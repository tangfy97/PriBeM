public class org.sat4j.tools.ManyCore extends java.lang.Object implements org.sat4j.specs.ISolver, org.sat4j.tools.OutcomeListener
{
    private static final int NORMAL_SLEEP;
    private static final int FAST_SLEEP;
    private static final long serialVersionUID;
    private final java.lang.String[] availableSolvers;
    protected final java.util.List solvers;
    protected final int numberOfSolvers;
    private int winnerId;
    private boolean resultFound;
    private volatile int remainingSolvers;
    private volatile int sleepTime;
    private volatile boolean solved;
    private final org.sat4j.specs.IVec solversStats;
    static final boolean $assertionsDisabled;

    public transient void <init>(org.sat4j.core.ASolverFactory, java.lang.String[])
    {
        org.sat4j.tools.ManyCore r0;
        org.sat4j.core.ASolverFactory r4;
        org.sat4j.specs.ISolver $r8;
        org.sat4j.core.Vec $r1;
        java.lang.String[] r2, $r5;
        java.util.ArrayList $r3;
        java.util.List $r7;
        org.sat4j.minisat.core.Counter $r9;
        int $i0, $i1, $i2, i3;
        java.lang.String $r6;
        org.sat4j.specs.IVec $r10;

        r0 := @this: org.sat4j.tools.ManyCore;

        r4 := @parameter0: org.sat4j.core.ASolverFactory;

        r2 := @parameter1: java.lang.String[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.sat4j.core.Vec;

        specialinvoke $r1.<org.sat4j.core.Vec: void <init>()>();

        r0.<org.sat4j.tools.ManyCore: org.sat4j.specs.IVec solversStats> = $r1;

        r0.<org.sat4j.tools.ManyCore: java.lang.String[] availableSolvers> = r2;

        $i0 = lengthof r2;

        r0.<org.sat4j.tools.ManyCore: int numberOfSolvers> = $i0;

        $r3 = new java.util.ArrayList;

        $i1 = r0.<org.sat4j.tools.ManyCore: int numberOfSolvers>;

        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>($i1);

        r0.<org.sat4j.tools.ManyCore: java.util.List solvers> = $r3;

        i3 = 0;

     label1:
        $i2 = r0.<org.sat4j.tools.ManyCore: int numberOfSolvers>;

        if i3 >= $i2 goto label2;

        $r7 = r0.<org.sat4j.tools.ManyCore: java.util.List solvers>;

        $r5 = r0.<org.sat4j.tools.ManyCore: java.lang.String[] availableSolvers>;

        $r6 = $r5[i3];

        $r8 = virtualinvoke r4.<org.sat4j.core.ASolverFactory: org.sat4j.specs.ISolver createSolverByName(java.lang.String)>($r6);

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r8);

        $r10 = r0.<org.sat4j.tools.ManyCore: org.sat4j.specs.IVec solversStats>;

        $r9 = new org.sat4j.minisat.core.Counter;

        specialinvoke $r9.<org.sat4j.minisat.core.Counter: void <init>(int)>(0);

        interfaceinvoke $r10.<org.sat4j.specs.IVec: org.sat4j.specs.IVec push(java.lang.Object)>($r9);

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }

    public transient void <init>(java.lang.String[], org.sat4j.specs.ISolver[])
    {
        org.sat4j.tools.ManyCore r0;
        org.sat4j.specs.ISolver[] r1;
        int $i0, i1;
        java.lang.String[] r2, $r4;
        java.lang.String $r3;

        r0 := @this: org.sat4j.tools.ManyCore;

        r2 := @parameter0: java.lang.String[];

        r1 := @parameter1: org.sat4j.specs.ISolver[];

        specialinvoke r0.<org.sat4j.tools.ManyCore: void <init>(org.sat4j.specs.ISolver[])>(r1);

        i1 = 0;

     label1:
        $i0 = lengthof r2;

        if i1 >= $i0 goto label2;

        $r4 = r0.<org.sat4j.tools.ManyCore: java.lang.String[] availableSolvers>;

        $r3 = r2[i1];

        $r4[i1] = $r3;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public transient void <init>(org.sat4j.specs.ISolver[])
    {
        org.sat4j.tools.ManyCore r0;
        org.sat4j.specs.ISolver $r5;
        org.sat4j.core.Vec $r1;
        java.lang.String[] $r3, $r10;
        java.util.ArrayList $r4;
        org.sat4j.minisat.core.Counter $r7;
        int $i0, $i1, $i2, $i3, $i4, i5, i6;
        org.sat4j.specs.IVec $r8;
        java.lang.String $r13;
        java.util.List $r6;
        org.sat4j.specs.ISolver[] r2;
        java.lang.StringBuilder $r9, $r11, $r12;

        r0 := @this: org.sat4j.tools.ManyCore;

        r2 := @parameter0: org.sat4j.specs.ISolver[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.sat4j.core.Vec;

        specialinvoke $r1.<org.sat4j.core.Vec: void <init>()>();

        r0.<org.sat4j.tools.ManyCore: org.sat4j.specs.IVec solversStats> = $r1;

        $i0 = lengthof r2;

        $r3 = newarray (java.lang.String)[$i0];

        r0.<org.sat4j.tools.ManyCore: java.lang.String[] availableSolvers> = $r3;

        i5 = 0;

     label1:
        $i1 = lengthof r2;

        if i5 >= $i1 goto label2;

        $r10 = r0.<org.sat4j.tools.ManyCore: java.lang.String[] availableSolvers>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("solver");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10[i5] = $r13;

        i5 = i5 + 1;

        goto label1;

     label2:
        $i2 = lengthof r2;

        r0.<org.sat4j.tools.ManyCore: int numberOfSolvers> = $i2;

        $r4 = new java.util.ArrayList;

        $i3 = r0.<org.sat4j.tools.ManyCore: int numberOfSolvers>;

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>($i3);

        r0.<org.sat4j.tools.ManyCore: java.util.List solvers> = $r4;

        i6 = 0;

     label3:
        $i4 = r0.<org.sat4j.tools.ManyCore: int numberOfSolvers>;

        if i6 >= $i4 goto label4;

        $r6 = r0.<org.sat4j.tools.ManyCore: java.util.List solvers>;

        $r5 = r2[i6];

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r5);

        $r8 = r0.<org.sat4j.tools.ManyCore: org.sat4j.specs.IVec solversStats>;

        $r7 = new org.sat4j.minisat.core.Counter;

        specialinvoke $r7.<org.sat4j.minisat.core.Counter: void <init>()>();

        interfaceinvoke $r8.<org.sat4j.specs.IVec: org.sat4j.specs.IVec push(java.lang.Object)>($r7);

        i6 = i6 + 1;

        goto label3;

     label4:
        return;
    }

    public void addAllClauses(org.sat4j.specs.IVec) throws org.sat4j.specs.ContradictionException
    {
        java.util.List $r1;
        org.sat4j.tools.ManyCore r0;
        org.sat4j.specs.ISolver $r4;
        int $i0, i1;
        java.lang.Object $r2;
        org.sat4j.specs.IVec r3;

        r0 := @this: org.sat4j.tools.ManyCore;

        r3 := @parameter0: org.sat4j.specs.IVec;

        i1 = 0;

     label1:
        $i0 = r0.<org.sat4j.tools.ManyCore: int numberOfSolvers>;

        if i1 >= $i0 goto label2;

        $r1 = r0.<org.sat4j.tools.ManyCore: java.util.List solvers>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i1);

        $r4 = (org.sat4j.specs.ISolver) $r2;

        interfaceinvoke $r4.<org.sat4j.specs.ISolver: void addAllClauses(org.sat4j.specs.IVec)>(r3);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public org.sat4j.specs.IConstr addAtLeast(org.sat4j.specs.IVecInt, int) throws org.sat4j.specs.ContradictionException
    {
        org.sat4j.tools.ManyCore r1;
        org.sat4j.specs.ISolver $r5;
        org.sat4j.specs.IConstr $r6;
        org.sat4j.core.ConstrGroup $r0;
        org.sat4j.specs.IVecInt r4;
        java.util.List $r2;
        int $i0, i1, i2;
        java.lang.Object $r3;

        r1 := @this: org.sat4j.tools.ManyCore;

        r4 := @parameter0: org.sat4j.specs.IVecInt;

        i1 := @parameter1: int;

        $r0 = new org.sat4j.core.ConstrGroup;

        specialinvoke $r0.<org.sat4j.core.ConstrGroup: void <init>(boolean)>(0);

        i2 = 0;

     label1:
        $i0 = r1.<org.sat4j.tools.ManyCore: int numberOfSolvers>;

        if i2 >= $i0 goto label2;

        $r2 = r1.<org.sat4j.tools.ManyCore: java.util.List solvers>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i2);

        $r5 = (org.sat4j.specs.ISolver) $r3;

        $r6 = interfaceinvoke $r5.<org.sat4j.specs.ISolver: org.sat4j.specs.IConstr addAtLeast(org.sat4j.specs.IVecInt,int)>(r4, i1);

        virtualinvoke $r0.<org.sat4j.core.ConstrGroup: void add(org.sat4j.specs.IConstr)>($r6);

        i2 = i2 + 1;

        goto label1;

     label2:
        return $r0;
    }

    public org.sat4j.specs.IConstr addAtMost(org.sat4j.specs.IVecInt, int) throws org.sat4j.specs.ContradictionException
    {
        org.sat4j.tools.ManyCore r1;
        org.sat4j.specs.ISolver $r5;
        org.sat4j.specs.IConstr $r6;
        org.sat4j.core.ConstrGroup $r0;
        org.sat4j.specs.IVecInt r4;
        java.util.List $r2;
        int $i0, i1, i2;
        java.lang.Object $r3;

        r1 := @this: org.sat4j.tools.ManyCore;

        r4 := @parameter0: org.sat4j.specs.IVecInt;

        i1 := @parameter1: int;

        $r0 = new org.sat4j.core.ConstrGroup;

        specialinvoke $r0.<org.sat4j.core.ConstrGroup: void <init>(boolean)>(0);

        i2 = 0;

     label1:
        $i0 = r1.<org.sat4j.tools.ManyCore: int numberOfSolvers>;

        if i2 >= $i0 goto label2;

        $r2 = r1.<org.sat4j.tools.ManyCore: java.util.List solvers>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i2);

        $r5 = (org.sat4j.specs.ISolver) $r3;

        $r6 = interfaceinvoke $r5.<org.sat4j.specs.ISolver: org.sat4j.specs.IConstr addAtMost(org.sat4j.specs.IVecInt,int)>(r4, i1);

        virtualinvoke $r0.<org.sat4j.core.ConstrGroup: void add(org.sat4j.specs.IConstr)>($r6);

        i2 = i2 + 1;

        goto label1;

     label2:
        return $r0;
    }

    public org.sat4j.specs.IConstr addExactly(org.sat4j.specs.IVecInt, int) throws org.sat4j.specs.ContradictionException
    {
        org.sat4j.tools.ManyCore r1;
        org.sat4j.specs.ISolver $r5;
        org.sat4j.specs.IConstr $r6;
        org.sat4j.core.ConstrGroup $r0;
        org.sat4j.specs.IVecInt r4;
        java.util.List $r2;
        int $i0, i1, i2;
        java.lang.Object $r3;

        r1 := @this: org.sat4j.tools.ManyCore;

        r4 := @parameter0: org.sat4j.specs.IVecInt;

        i1 := @parameter1: int;

        $r0 = new org.sat4j.core.ConstrGroup;

        specialinvoke $r0.<org.sat4j.core.ConstrGroup: void <init>(boolean)>(0);

        i2 = 0;

     label1:
        $i0 = r1.<org.sat4j.tools.ManyCore: int numberOfSolvers>;

        if i2 >= $i0 goto label2;

        $r2 = r1.<org.sat4j.tools.ManyCore: java.util.List solvers>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i2);

        $r5 = (org.sat4j.specs.ISolver) $r3;

        $r6 = interfaceinvoke $r5.<org.sat4j.specs.ISolver: org.sat4j.specs.IConstr addExactly(org.sat4j.specs.IVecInt,int)>(r4, i1);

        virtualinvoke $r0.<org.sat4j.core.ConstrGroup: void add(org.sat4j.specs.IConstr)>($r6);

        i2 = i2 + 1;

        goto label1;

     label2:
        return $r0;
    }

    public org.sat4j.specs.IConstr addClause(org.sat4j.specs.IVecInt) throws org.sat4j.specs.ContradictionException
    {
        org.sat4j.tools.ManyCore r1;
        org.sat4j.specs.ISolver $r5;
        org.sat4j.specs.IConstr $r6;
        org.sat4j.core.ConstrGroup $r0;
        org.sat4j.specs.IVecInt r4;
        java.util.List $r2;
        int $i0, i1;
        java.lang.Object $r3;

        r1 := @this: org.sat4j.tools.ManyCore;

        r4 := @parameter0: org.sat4j.specs.IVecInt;

        $r0 = new org.sat4j.core.ConstrGroup;

        specialinvoke $r0.<org.sat4j.core.ConstrGroup: void <init>(boolean)>(0);

        i1 = 0;

     label1:
        $i0 = r1.<org.sat4j.tools.ManyCore: int numberOfSolvers>;

        if i1 >= $i0 goto label2;

        $r2 = r1.<org.sat4j.tools.ManyCore: java.util.List solvers>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i1);

        $r5 = (org.sat4j.specs.ISolver) $r3;

        $r6 = interfaceinvoke $r5.<org.sat4j.specs.ISolver: org.sat4j.specs.IConstr addClause(org.sat4j.specs.IVecInt)>(r4);

        virtualinvoke $r0.<org.sat4j.core.ConstrGroup: void add(org.sat4j.specs.IConstr)>($r6);

        i1 = i1 + 1;

        goto label1;

     label2:
        return $r0;
    }

    public void clearLearntClauses()
    {
        java.util.List $r1;
        org.sat4j.tools.ManyCore r0;
        org.sat4j.specs.ISolver $r3;
        int $i0, i1;
        java.lang.Object $r2;

        r0 := @this: org.sat4j.tools.ManyCore;

        i1 = 0;

     label1:
        $i0 = r0.<org.sat4j.tools.ManyCore: int numberOfSolvers>;

        if i1 >= $i0 goto label2;

        $r1 = r0.<org.sat4j.tools.ManyCore: java.util.List solvers>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i1);

        $r3 = (org.sat4j.specs.ISolver) $r2;

        interfaceinvoke $r3.<org.sat4j.specs.ISolver: void clearLearntClauses()>();

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public void expireTimeout()
    {
        java.util.List $r1;
        org.sat4j.tools.ManyCore r0;
        org.sat4j.specs.ISolver $r3;
        int $i0, i1;
        java.lang.Object $r2;

        r0 := @this: org.sat4j.tools.ManyCore;

        i1 = 0;

     label1:
        $i0 = r0.<org.sat4j.tools.ManyCore: int numberOfSolvers>;

        if i1 >= $i0 goto label2;

        $r1 = r0.<org.sat4j.tools.ManyCore: java.util.List solvers>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i1);

        $r3 = (org.sat4j.specs.ISolver) $r2;

        interfaceinvoke $r3.<org.sat4j.specs.ISolver: void expireTimeout()>();

        i1 = i1 + 1;

        goto label1;

     label2:
        r0.<org.sat4j.tools.ManyCore: int sleepTime> = 50;

        return;
    }

    public java.util.Map getStat()
    {
        java.util.List $r1;
        org.sat4j.tools.ManyCore r0;
        org.sat4j.specs.ISolver $r3;
        java.util.Map $r4;
        int $i0;
        java.lang.Object $r2;

        r0 := @this: org.sat4j.tools.ManyCore;

        $r1 = r0.<org.sat4j.tools.ManyCore: java.util.List solvers>;

        $i0 = r0.<org.sat4j.tools.ManyCore: int winnerId>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i0);

        $r3 = (org.sat4j.specs.ISolver) $r2;

        $r4 = interfaceinvoke $r3.<org.sat4j.specs.ISolver: java.util.Map getStat()>();

        return $r4;
    }

    public int getTimeout()
    {
        java.util.List $r1;
        org.sat4j.tools.ManyCore r0;
        org.sat4j.specs.ISolver $r3;
        int $i0;
        java.lang.Object $r2;

        r0 := @this: org.sat4j.tools.ManyCore;

        $r1 = r0.<org.sat4j.tools.ManyCore: java.util.List solvers>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        $r3 = (org.sat4j.specs.ISolver) $r2;

        $i0 = interfaceinvoke $r3.<org.sat4j.specs.ISolver: int getTimeout()>();

        return $i0;
    }

    public long getTimeoutMs()
    {
        java.util.List $r1;
        org.sat4j.tools.ManyCore r0;
        org.sat4j.specs.ISolver $r3;
        java.lang.Object $r2;
        long $l0;

        r0 := @this: org.sat4j.tools.ManyCore;

        $r1 = r0.<org.sat4j.tools.ManyCore: java.util.List solvers>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        $r3 = (org.sat4j.specs.ISolver) $r2;

        $l0 = interfaceinvoke $r3.<org.sat4j.specs.ISolver: long getTimeoutMs()>();

        return $l0;
    }

    public int newVar()
    {
        java.lang.UnsupportedOperationException $r0;
        org.sat4j.tools.ManyCore r1;

        r1 := @this: org.sat4j.tools.ManyCore;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public int newVar(int)
    {
        org.sat4j.tools.ManyCore r0;
        org.sat4j.specs.ISolver $r3;
        java.util.List $r1;
        int $i0, i1, i2, i3;
        java.lang.Object $r2;

        r0 := @this: org.sat4j.tools.ManyCore;

        i1 := @parameter0: int;

        i2 = 0;

        i3 = 0;

     label1:
        $i0 = r0.<org.sat4j.tools.ManyCore: int numberOfSolvers>;

        if i3 >= $i0 goto label2;

        $r1 = r0.<org.sat4j.tools.ManyCore: java.util.List solvers>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i3);

        $r3 = (org.sat4j.specs.ISolver) $r2;

        i2 = interfaceinvoke $r3.<org.sat4j.specs.ISolver: int newVar(int)>(i1);

        i3 = i3 + 1;

        goto label1;

     label2:
        return i2;
    }

    public void printStat(java.io.PrintStream, java.lang.String)
    {
        java.io.PrintStream r1;
        org.sat4j.tools.ManyCore r0;
        java.lang.Object[] $r2;
        org.sat4j.specs.ISolver $r11;
        java.lang.Integer $r4, $r8;
        java.util.List $r9;
        org.sat4j.minisat.core.Counter $r7;
        int $i0, $i1, i2;
        java.lang.Object $r6, $r10;
        java.lang.String r3;
        org.sat4j.specs.IVec $r5;

        r0 := @this: org.sat4j.tools.ManyCore;

        r1 := @parameter0: java.io.PrintStream;

        r3 := @parameter1: java.lang.String;

        i2 = 0;

     label1:
        $i0 = r0.<org.sat4j.tools.ManyCore: int numberOfSolvers>;

        if i2 >= $i0 goto label2;

        $r2 = newarray (java.lang.Object)[3];

        $r2[0] = r3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r2[1] = $r4;

        $r5 = r0.<org.sat4j.tools.ManyCore: org.sat4j.specs.IVec solversStats>;

        $r6 = interfaceinvoke $r5.<org.sat4j.specs.IVec: java.lang.Object get(int)>(i2);

        $r7 = (org.sat4j.minisat.core.Counter) $r6;

        $i1 = virtualinvoke $r7.<org.sat4j.minisat.core.Counter: int getValue()>();

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r2[2] = $r8;

        virtualinvoke r1.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>("%s>>>>>>>>>> Solver number %d (%d answers) <<<<<<<<<<<<<<<<<<\n", $r2);

        $r9 = r0.<org.sat4j.tools.ManyCore: java.util.List solvers>;

        $r10 = interfaceinvoke $r9.<java.util.List: java.lang.Object get(int)>(i2);

        $r11 = (org.sat4j.specs.ISolver) $r10;

        interfaceinvoke $r11.<org.sat4j.specs.ISolver: void printStat(java.io.PrintStream,java.lang.String)>(r1, r3);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    public void printStat(java.io.PrintWriter, java.lang.String)
    {
        java.io.PrintWriter r1;
        org.sat4j.tools.ManyCore r0;
        java.lang.Object[] $r2;
        org.sat4j.specs.ISolver $r11;
        java.lang.Integer $r4, $r8;
        java.util.List $r9;
        org.sat4j.minisat.core.Counter $r7;
        int $i0, $i1, i2;
        java.lang.Object $r6, $r10;
        java.lang.String r3;
        org.sat4j.specs.IVec $r5;

        r0 := @this: org.sat4j.tools.ManyCore;

        r1 := @parameter0: java.io.PrintWriter;

        r3 := @parameter1: java.lang.String;

        i2 = 0;

     label1:
        $i0 = r0.<org.sat4j.tools.ManyCore: int numberOfSolvers>;

        if i2 >= $i0 goto label2;

        $r2 = newarray (java.lang.Object)[3];

        $r2[0] = r3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r2[1] = $r4;

        $r5 = r0.<org.sat4j.tools.ManyCore: org.sat4j.specs.IVec solversStats>;

        $r6 = interfaceinvoke $r5.<org.sat4j.specs.IVec: java.lang.Object get(int)>(i2);

        $r7 = (org.sat4j.minisat.core.Counter) $r6;

        $i1 = virtualinvoke $r7.<org.sat4j.minisat.core.Counter: int getValue()>();

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r2[2] = $r8;

        virtualinvoke r1.<java.io.PrintWriter: java.io.PrintWriter printf(java.lang.String,java.lang.Object[])>("%s>>>>>>>>>> Solver number %d (%d answers) <<<<<<<<<<<<<<<<<<\n", $r2);

        $r9 = r0.<org.sat4j.tools.ManyCore: java.util.List solvers>;

        $r10 = interfaceinvoke $r9.<java.util.List: java.lang.Object get(int)>(i2);

        $r11 = (org.sat4j.specs.ISolver) $r10;

        interfaceinvoke $r11.<org.sat4j.specs.ISolver: void printStat(java.io.PrintWriter,java.lang.String)>(r1, r3);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    public boolean removeConstr(org.sat4j.specs.IConstr)
    {
        org.sat4j.tools.ManyCore r3;
        org.sat4j.specs.IConstr r0, $r4;
        org.sat4j.specs.ISolver $r7;
        org.sat4j.core.ConstrGroup r2;
        java.lang.IllegalArgumentException $r1;
        java.util.List $r5;
        int $i0, i1;
        java.lang.Object $r6;
        boolean $z0, $z1, z2;

        r3 := @this: org.sat4j.tools.ManyCore;

        r0 := @parameter0: org.sat4j.specs.IConstr;

        $z0 = r0 instanceof org.sat4j.core.ConstrGroup;

        if $z0 == 0 goto label4;

        r2 = (org.sat4j.core.ConstrGroup) r0;

        z2 = 1;

        i1 = 0;

     label1:
        $i0 = r3.<org.sat4j.tools.ManyCore: int numberOfSolvers>;

        if i1 >= $i0 goto label3;

        $r4 = virtualinvoke r2.<org.sat4j.core.ConstrGroup: org.sat4j.specs.IConstr getConstr(int)>(i1);

        if $r4 == null goto label2;

        $r5 = r3.<org.sat4j.tools.ManyCore: java.util.List solvers>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i1);

        $r7 = (org.sat4j.specs.ISolver) $r6;

        $z1 = interfaceinvoke $r7.<org.sat4j.specs.ISolver: boolean removeConstr(org.sat4j.specs.IConstr)>($r4);

        z2 = z2 & $z1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return z2;

     label4:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can only remove a group of constraints!");

        throw $r1;
    }

    public void reset()
    {
        java.util.List $r1;
        org.sat4j.tools.ManyCore r0;
        org.sat4j.specs.ISolver $r3;
        int $i0, i1;
        java.lang.Object $r2;

        r0 := @this: org.sat4j.tools.ManyCore;

        i1 = 0;

     label1:
        $i0 = r0.<org.sat4j.tools.ManyCore: int numberOfSolvers>;

        if i1 >= $i0 goto label2;

        $r1 = r0.<org.sat4j.tools.ManyCore: java.util.List solvers>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i1);

        $r3 = (org.sat4j.specs.ISolver) $r2;

        interfaceinvoke $r3.<org.sat4j.specs.ISolver: void reset()>();

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public void setExpectedNumberOfClauses(int)
    {
        java.util.List $r1;
        org.sat4j.tools.ManyCore r0;
        org.sat4j.specs.ISolver $r3;
        int $i0, i1, i2;
        java.lang.Object $r2;

        r0 := @this: org.sat4j.tools.ManyCore;

        i1 := @parameter0: int;

        i2 = 0;

     label1:
        $i0 = r0.<org.sat4j.tools.ManyCore: int numberOfSolvers>;

        if i2 >= $i0 goto label2;

        $r1 = r0.<org.sat4j.tools.ManyCore: java.util.List solvers>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i2);

        $r3 = (org.sat4j.specs.ISolver) $r2;

        interfaceinvoke $r3.<org.sat4j.specs.ISolver: void setExpectedNumberOfClauses(int)>(i1);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    public void setTimeout(int)
    {
        java.util.List $r1;
        org.sat4j.tools.ManyCore r0;
        org.sat4j.specs.ISolver $r3;
        int $i0, i1, i2;
        java.lang.Object $r2;

        r0 := @this: org.sat4j.tools.ManyCore;

        i1 := @parameter0: int;

        i2 = 0;

     label1:
        $i0 = r0.<org.sat4j.tools.ManyCore: int numberOfSolvers>;

        if i2 >= $i0 goto label2;

        $r1 = r0.<org.sat4j.tools.ManyCore: java.util.List solvers>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i2);

        $r3 = (org.sat4j.specs.ISolver) $r2;

        interfaceinvoke $r3.<org.sat4j.specs.ISolver: void setTimeout(int)>(i1);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    public void setTimeoutMs(long)
    {
        java.util.List $r1;
        org.sat4j.tools.ManyCore r0;
        org.sat4j.specs.ISolver $r3;
        int $i0, i2;
        java.lang.Object $r2;
        long l1;

        r0 := @this: org.sat4j.tools.ManyCore;

        l1 := @parameter0: long;

        i2 = 0;

     label1:
        $i0 = r0.<org.sat4j.tools.ManyCore: int numberOfSolvers>;

        if i2 >= $i0 goto label2;

        $r1 = r0.<org.sat4j.tools.ManyCore: java.util.List solvers>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i2);

        $r3 = (org.sat4j.specs.ISolver) $r2;

        interfaceinvoke $r3.<org.sat4j.specs.ISolver: void setTimeoutMs(long)>(l1);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    public void setTimeoutOnConflicts(int)
    {
        java.util.List $r1;
        org.sat4j.tools.ManyCore r0;
        org.sat4j.specs.ISolver $r3;
        int $i0, i1, i2;
        java.lang.Object $r2;

        r0 := @this: org.sat4j.tools.ManyCore;

        i1 := @parameter0: int;

        i2 = 0;

     label1:
        $i0 = r0.<org.sat4j.tools.ManyCore: int numberOfSolvers>;

        if i2 >= $i0 goto label2;

        $r1 = r0.<org.sat4j.tools.ManyCore: java.util.List solvers>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i2);

        $r3 = (org.sat4j.specs.ISolver) $r2;

        interfaceinvoke $r3.<org.sat4j.specs.ISolver: void setTimeoutOnConflicts(int)>(i1);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    public java.lang.String toString(java.lang.String)
    {
        org.sat4j.tools.ManyCore r2;
        org.sat4j.specs.ISolver $r6;
        java.util.List $r4;
        java.lang.StringBuffer $r0;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.Object $r5;
        java.lang.String r1, $r3, $r7;

        r2 := @this: org.sat4j.tools.ManyCore;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("ManyCore solver with ");

        $i0 = r2.<org.sat4j.tools.ManyCore: int numberOfSolvers>;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" solvers running in parallel");

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        i4 = 0;

     label1:
        $i1 = r2.<org.sat4j.tools.ManyCore: int numberOfSolvers>;

        if i4 >= $i1 goto label3;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(">>>>>>>>>> Solver number ");

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i4);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" <<<<<<<<<<<<<<<<<<\n");

        $r4 = r2.<org.sat4j.tools.ManyCore: java.util.List solvers>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i4);

        $r6 = (org.sat4j.specs.ISolver) $r5;

        $r7 = interfaceinvoke $r6.<org.sat4j.specs.ISolver: java.lang.String toString(java.lang.String)>(r1);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $i2 = r2.<org.sat4j.tools.ManyCore: int numberOfSolvers>;

        $i3 = $i2 - 1;

        if i4 >= $i3 goto label2;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

     label2:
        i4 = i4 + 1;

        goto label1;

     label3:
        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    public int[] findModel() throws org.sat4j.specs.TimeoutException
    {
        org.sat4j.tools.ManyCore r0;
        int[] $r1;
        boolean $z0;

        r0 := @this: org.sat4j.tools.ManyCore;

        $z0 = virtualinvoke r0.<org.sat4j.tools.ManyCore: boolean isSatisfiable()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<org.sat4j.tools.ManyCore: int[] model()>();

        return $r1;

     label1:
        return null;
    }

    public int[] findModel(org.sat4j.specs.IVecInt) throws org.sat4j.specs.TimeoutException
    {
        org.sat4j.tools.ManyCore r0;
        int[] $r2;
        org.sat4j.specs.IVecInt r1;
        boolean $z0;

        r0 := @this: org.sat4j.tools.ManyCore;

        r1 := @parameter0: org.sat4j.specs.IVecInt;

        $z0 = virtualinvoke r0.<org.sat4j.tools.ManyCore: boolean isSatisfiable(org.sat4j.specs.IVecInt)>(r1);

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<org.sat4j.tools.ManyCore: int[] model()>();

        return $r2;

     label1:
        return null;
    }

    public boolean isSatisfiable() throws org.sat4j.specs.TimeoutException
    {
        org.sat4j.specs.IVecInt $r1;
        org.sat4j.tools.ManyCore r0;
        boolean $z0;

        r0 := @this: org.sat4j.tools.ManyCore;

        $r1 = <org.sat4j.core.VecInt: org.sat4j.specs.IVecInt EMPTY>;

        $z0 = virtualinvoke r0.<org.sat4j.tools.ManyCore: boolean isSatisfiable(org.sat4j.specs.IVecInt,boolean)>($r1, 0);

        return $z0;
    }

    public synchronized boolean isSatisfiable(org.sat4j.specs.IVecInt, boolean) throws org.sat4j.specs.TimeoutException
    {
        org.sat4j.tools.ManyCore r0;
        org.sat4j.specs.ISolver $r8;
        long $l3;
        java.lang.AssertionError $r2;
        java.lang.Thread $r3;
        int $i0, $i1, $i2, $i4, $i5, i6;
        boolean $z0, $z1, $z2, z3;
        org.sat4j.specs.IVecInt r7;
        org.sat4j.tools.RunnableSolver $r4;
        java.util.List $r5;
        java.lang.InterruptedException $r9;
        org.sat4j.specs.TimeoutException $r1;
        java.lang.Object $r6;

        r0 := @this: org.sat4j.tools.ManyCore;

        r7 := @parameter0: org.sat4j.specs.IVecInt;

        z3 := @parameter1: boolean;

        $i0 = r0.<org.sat4j.tools.ManyCore: int numberOfSolvers>;

        r0.<org.sat4j.tools.ManyCore: int remainingSolvers> = $i0;

        r0.<org.sat4j.tools.ManyCore: boolean solved> = 0;

        i6 = 0;

     label1:
        $i1 = r0.<org.sat4j.tools.ManyCore: int numberOfSolvers>;

        if i6 >= $i1 goto label2;

        $r3 = new java.lang.Thread;

        $r4 = new org.sat4j.tools.RunnableSolver;

        $r5 = r0.<org.sat4j.tools.ManyCore: java.util.List solvers>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i6);

        $r8 = (org.sat4j.specs.ISolver) $r6;

        specialinvoke $r4.<org.sat4j.tools.RunnableSolver: void <init>(int,org.sat4j.specs.ISolver,org.sat4j.specs.IVecInt,boolean,org.sat4j.tools.OutcomeListener)>(i6, $r8, r7, z3, r0);

        specialinvoke $r3.<java.lang.Thread: void <init>(java.lang.Runnable)>($r4);

        virtualinvoke $r3.<java.lang.Thread: void start()>();

        i6 = i6 + 1;

        goto label1;

     label2:
        r0.<org.sat4j.tools.ManyCore: int sleepTime> = 500;

     label3:
        $i2 = r0.<org.sat4j.tools.ManyCore: int sleepTime>;

        $l3 = (long) $i2;

        virtualinvoke r0.<java.lang.Object: void wait(long)>($l3);

        $i4 = r0.<org.sat4j.tools.ManyCore: int remainingSolvers>;

        if $i4 > 0 goto label3;

     label4:
        goto label6;

     label5:
        $r9 := @caughtexception;

     label6:
        $z0 = r0.<org.sat4j.tools.ManyCore: boolean solved>;

        if $z0 != 0 goto label8;

        $z2 = <org.sat4j.tools.ManyCore: boolean $assertionsDisabled>;

        if $z2 != 0 goto label7;

        $i5 = r0.<org.sat4j.tools.ManyCore: int remainingSolvers>;

        if $i5 == 0 goto label7;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label7:
        $r1 = new org.sat4j.specs.TimeoutException;

        specialinvoke $r1.<org.sat4j.specs.TimeoutException: void <init>()>();

        throw $r1;

     label8:
        $z1 = r0.<org.sat4j.tools.ManyCore: boolean resultFound>;

        return $z1;

        catch java.lang.InterruptedException from label2 to label4 with label5;
    }

    public boolean isSatisfiable(boolean) throws org.sat4j.specs.TimeoutException
    {
        java.lang.UnsupportedOperationException $r0;
        org.sat4j.tools.ManyCore r1;
        boolean z0;

        r1 := @this: org.sat4j.tools.ManyCore;

        z0 := @parameter0: boolean;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public boolean isSatisfiable(org.sat4j.specs.IVecInt) throws org.sat4j.specs.TimeoutException
    {
        org.sat4j.specs.IVecInt r2;
        java.lang.UnsupportedOperationException $r0;
        org.sat4j.tools.ManyCore r1;

        r1 := @this: org.sat4j.tools.ManyCore;

        r2 := @parameter0: org.sat4j.specs.IVecInt;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public int[] model()
    {
        java.util.List $r1;
        org.sat4j.tools.ManyCore r0;
        int[] $r4;
        org.sat4j.specs.ISolver $r3;
        int $i0;
        java.lang.Object $r2;

        r0 := @this: org.sat4j.tools.ManyCore;

        $r1 = r0.<org.sat4j.tools.ManyCore: java.util.List solvers>;

        $i0 = r0.<org.sat4j.tools.ManyCore: int winnerId>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i0);

        $r3 = (org.sat4j.specs.ISolver) $r2;

        $r4 = interfaceinvoke $r3.<org.sat4j.specs.ISolver: int[] model()>();

        return $r4;
    }

    public boolean model(int)
    {
        java.util.List $r1;
        org.sat4j.tools.ManyCore r0;
        org.sat4j.specs.ISolver $r3;
        int $i0, i1;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.sat4j.tools.ManyCore;

        i1 := @parameter0: int;

        $r1 = r0.<org.sat4j.tools.ManyCore: java.util.List solvers>;

        $i0 = r0.<org.sat4j.tools.ManyCore: int winnerId>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i0);

        $r3 = (org.sat4j.specs.ISolver) $r2;

        $z0 = interfaceinvoke $r3.<org.sat4j.specs.ISolver: boolean model(int)>(i1);

        return $z0;
    }

    public int nConstraints()
    {
        java.util.List $r1;
        org.sat4j.tools.ManyCore r0;
        org.sat4j.specs.ISolver $r3;
        int $i0;
        java.lang.Object $r2;

        r0 := @this: org.sat4j.tools.ManyCore;

        $r1 = r0.<org.sat4j.tools.ManyCore: java.util.List solvers>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        $r3 = (org.sat4j.specs.ISolver) $r2;

        $i0 = interfaceinvoke $r3.<org.sat4j.specs.ISolver: int nConstraints()>();

        return $i0;
    }

    public int nVars()
    {
        java.util.List $r1;
        org.sat4j.tools.ManyCore r0;
        org.sat4j.specs.ISolver $r3;
        int $i0;
        java.lang.Object $r2;

        r0 := @this: org.sat4j.tools.ManyCore;

        $r1 = r0.<org.sat4j.tools.ManyCore: java.util.List solvers>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        $r3 = (org.sat4j.specs.ISolver) $r2;

        $i0 = interfaceinvoke $r3.<org.sat4j.specs.ISolver: int nVars()>();

        return $i0;
    }

    public void printInfos(java.io.PrintWriter, java.lang.String)
    {
        java.io.PrintWriter r1;
        org.sat4j.tools.ManyCore r0;
        java.lang.Object[] $r2;
        org.sat4j.specs.ISolver $r7;
        java.lang.Integer $r4;
        java.util.List $r5;
        int $i0, i1;
        java.lang.Object $r6;
        java.lang.String r3;

        r0 := @this: org.sat4j.tools.ManyCore;

        r1 := @parameter0: java.io.PrintWriter;

        r3 := @parameter1: java.lang.String;

        i1 = 0;

     label1:
        $i0 = r0.<org.sat4j.tools.ManyCore: int numberOfSolvers>;

        if i1 >= $i0 goto label2;

        $r2 = newarray (java.lang.Object)[2];

        $r2[0] = r3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r2[1] = $r4;

        virtualinvoke r1.<java.io.PrintWriter: java.io.PrintWriter printf(java.lang.String,java.lang.Object[])>("%s>>>>>>>>>> Solver number %d <<<<<<<<<<<<<<<<<<\n", $r2);

        $r5 = r0.<org.sat4j.tools.ManyCore: java.util.List solvers>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i1);

        $r7 = (org.sat4j.specs.ISolver) $r6;

        interfaceinvoke $r7.<org.sat4j.specs.ISolver: void printInfos(java.io.PrintWriter,java.lang.String)>(r1, r3);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public synchronized void onFinishWithAnswer(boolean, boolean, int)
    {
        org.sat4j.tools.ManyCore r0;
        org.sat4j.specs.ISolver $r15;
        java.lang.String[] $r9;
        org.sat4j.minisat.core.Counter $r3;
        int i0, $i1, $i2, $i3, i4, $i5, $i6;
        org.sat4j.specs.IVec $r1;
        java.lang.String $r6, $r10, $r12;
        boolean z0, $z1, z2;
        java.io.PrintStream $r5;
        java.util.List $r13;
        java.lang.Object $r2, $r14;
        java.lang.StringBuilder $r4, $r7, $r8, $r11;

        r0 := @this: org.sat4j.tools.ManyCore;

        z0 := @parameter0: boolean;

        z2 := @parameter1: boolean;

        i0 := @parameter2: int;

        if z0 == 0 goto label4;

        $z1 = r0.<org.sat4j.tools.ManyCore: boolean solved>;

        if $z1 != 0 goto label4;

        r0.<org.sat4j.tools.ManyCore: int winnerId> = i0;

        $r1 = r0.<org.sat4j.tools.ManyCore: org.sat4j.specs.IVec solversStats>;

        $r2 = interfaceinvoke $r1.<org.sat4j.specs.IVec: java.lang.Object get(int)>(i0);

        $r3 = (org.sat4j.minisat.core.Counter) $r2;

        virtualinvoke $r3.<org.sat4j.minisat.core.Counter: void inc()>();

        r0.<org.sat4j.tools.ManyCore: boolean solved> = 1;

        r0.<org.sat4j.tools.ManyCore: boolean resultFound> = z2;

        i4 = 0;

     label1:
        $i1 = r0.<org.sat4j.tools.ManyCore: int numberOfSolvers>;

        if i4 >= $i1 goto label3;

        $i3 = r0.<org.sat4j.tools.ManyCore: int winnerId>;

        if i4 == $i3 goto label2;

        $r13 = r0.<org.sat4j.tools.ManyCore: java.util.List solvers>;

        $r14 = interfaceinvoke $r13.<java.util.List: java.lang.Object get(int)>(i4);

        $r15 = (org.sat4j.specs.ISolver) $r14;

        interfaceinvoke $r15.<org.sat4j.specs.ISolver: void expireTimeout()>();

     label2:
        i4 = i4 + 1;

        goto label1;

     label3:
        r0.<org.sat4j.tools.ManyCore: int sleepTime> = 50;

        $r5 = <java.lang.System: java.io.PrintStream out>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke r0.<org.sat4j.tools.ManyCore: java.lang.String getLogPrefix()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("And the winner is ");

        $r9 = r0.<org.sat4j.tools.ManyCore: java.lang.String[] availableSolvers>;

        $i2 = r0.<org.sat4j.tools.ManyCore: int winnerId>;

        $r10 = $r9[$i2];

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r12);

     label4:
        $i5 = r0.<org.sat4j.tools.ManyCore: int remainingSolvers>;

        $i6 = $i5 - 1;

        r0.<org.sat4j.tools.ManyCore: int remainingSolvers> = $i6;

        return;
    }

    public boolean isDBSimplificationAllowed()
    {
        java.util.List $r1;
        org.sat4j.tools.ManyCore r0;
        org.sat4j.specs.ISolver $r3;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.sat4j.tools.ManyCore;

        $r1 = r0.<org.sat4j.tools.ManyCore: java.util.List solvers>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        $r3 = (org.sat4j.specs.ISolver) $r2;

        $z0 = interfaceinvoke $r3.<org.sat4j.specs.ISolver: boolean isDBSimplificationAllowed()>();

        return $z0;
    }

    public void setDBSimplificationAllowed(boolean)
    {
        java.util.List $r1;
        org.sat4j.tools.ManyCore r0;
        org.sat4j.specs.ISolver $r3;
        int $i0, i1;
        java.lang.Object $r2;
        boolean z0;

        r0 := @this: org.sat4j.tools.ManyCore;

        z0 := @parameter0: boolean;

        i1 = 0;

     label1:
        $i0 = r0.<org.sat4j.tools.ManyCore: int numberOfSolvers>;

        if i1 >= $i0 goto label2;

        $r1 = r0.<org.sat4j.tools.ManyCore: java.util.List solvers>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        $r3 = (org.sat4j.specs.ISolver) $r2;

        interfaceinvoke $r3.<org.sat4j.specs.ISolver: void setDBSimplificationAllowed(boolean)>(z0);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public void setSearchListener(org.sat4j.specs.SearchListener)
    {
        java.util.List $r1;
        org.sat4j.tools.ManyCore r0;
        org.sat4j.specs.SearchListener r3;
        org.sat4j.specs.ISolver $r4;
        int $i0, i1;
        java.lang.Object $r2;

        r0 := @this: org.sat4j.tools.ManyCore;

        r3 := @parameter0: org.sat4j.specs.SearchListener;

        i1 = 0;

     label1:
        $i0 = r0.<org.sat4j.tools.ManyCore: int numberOfSolvers>;

        if i1 >= $i0 goto label2;

        $r1 = r0.<org.sat4j.tools.ManyCore: java.util.List solvers>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i1);

        $r4 = (org.sat4j.specs.ISolver) $r2;

        interfaceinvoke $r4.<org.sat4j.specs.ISolver: void setSearchListener(org.sat4j.specs.SearchListener)>(r3);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public org.sat4j.specs.SearchListener getSearchListener()
    {
        java.util.List $r1;
        org.sat4j.tools.ManyCore r0;
        org.sat4j.specs.SearchListener $r4;
        org.sat4j.specs.ISolver $r3;
        java.lang.Object $r2;

        r0 := @this: org.sat4j.tools.ManyCore;

        $r1 = r0.<org.sat4j.tools.ManyCore: java.util.List solvers>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        $r3 = (org.sat4j.specs.ISolver) $r2;

        $r4 = interfaceinvoke $r3.<org.sat4j.specs.ISolver: org.sat4j.specs.SearchListener getSearchListener()>();

        return $r4;
    }

    public int nextFreeVarId(boolean)
    {
        org.sat4j.tools.ManyCore r0;
        org.sat4j.specs.ISolver $r3;
        java.util.List $r1;
        int $i0, i1, i2, $i4;
        java.lang.Object $r2;
        boolean z0;

        r0 := @this: org.sat4j.tools.ManyCore;

        z0 := @parameter0: boolean;

        $i4 = (int) -1;

        i1 = $i4;

        i2 = 0;

     label1:
        $i0 = r0.<org.sat4j.tools.ManyCore: int numberOfSolvers>;

        if i2 >= $i0 goto label2;

        $r1 = r0.<org.sat4j.tools.ManyCore: java.util.List solvers>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i2);

        $r3 = (org.sat4j.specs.ISolver) $r2;

        i1 = interfaceinvoke $r3.<org.sat4j.specs.ISolver: int nextFreeVarId(boolean)>(z0);

        i2 = i2 + 1;

        goto label1;

     label2:
        return i1;
    }

    public org.sat4j.specs.IConstr addBlockingClause(org.sat4j.specs.IVecInt) throws org.sat4j.specs.ContradictionException
    {
        org.sat4j.tools.ManyCore r1;
        org.sat4j.specs.ISolver $r5;
        org.sat4j.specs.IConstr $r6;
        org.sat4j.core.ConstrGroup $r0;
        org.sat4j.specs.IVecInt r4;
        java.util.List $r2;
        int $i0, i1;
        java.lang.Object $r3;

        r1 := @this: org.sat4j.tools.ManyCore;

        r4 := @parameter0: org.sat4j.specs.IVecInt;

        $r0 = new org.sat4j.core.ConstrGroup;

        specialinvoke $r0.<org.sat4j.core.ConstrGroup: void <init>(boolean)>(0);

        i1 = 0;

     label1:
        $i0 = r1.<org.sat4j.tools.ManyCore: int numberOfSolvers>;

        if i1 >= $i0 goto label2;

        $r2 = r1.<org.sat4j.tools.ManyCore: java.util.List solvers>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i1);

        $r5 = (org.sat4j.specs.ISolver) $r3;

        $r6 = interfaceinvoke $r5.<org.sat4j.specs.ISolver: org.sat4j.specs.IConstr addBlockingClause(org.sat4j.specs.IVecInt)>(r4);

        virtualinvoke $r0.<org.sat4j.core.ConstrGroup: void add(org.sat4j.specs.IConstr)>($r6);

        i1 = i1 + 1;

        goto label1;

     label2:
        return $r0;
    }

    public boolean removeSubsumedConstr(org.sat4j.specs.IConstr)
    {
        org.sat4j.tools.ManyCore r3;
        org.sat4j.specs.IConstr r0, $r4;
        org.sat4j.specs.ISolver $r7;
        org.sat4j.core.ConstrGroup r2;
        java.lang.IllegalArgumentException $r1;
        java.util.List $r5;
        int $i0, i1;
        java.lang.Object $r6;
        boolean $z0, $z1, z2;

        r3 := @this: org.sat4j.tools.ManyCore;

        r0 := @parameter0: org.sat4j.specs.IConstr;

        $z0 = r0 instanceof org.sat4j.core.ConstrGroup;

        if $z0 == 0 goto label4;

        r2 = (org.sat4j.core.ConstrGroup) r0;

        z2 = 1;

        i1 = 0;

     label1:
        $i0 = r3.<org.sat4j.tools.ManyCore: int numberOfSolvers>;

        if i1 >= $i0 goto label3;

        $r4 = virtualinvoke r2.<org.sat4j.core.ConstrGroup: org.sat4j.specs.IConstr getConstr(int)>(i1);

        if $r4 == null goto label2;

        $r5 = r3.<org.sat4j.tools.ManyCore: java.util.List solvers>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i1);

        $r7 = (org.sat4j.specs.ISolver) $r6;

        $z1 = interfaceinvoke $r7.<org.sat4j.specs.ISolver: boolean removeSubsumedConstr(org.sat4j.specs.IConstr)>($r4);

        z2 = z2 & $z1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return z2;

     label4:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can only remove a group of constraints!");

        throw $r1;
    }

    public boolean isVerbose()
    {
        java.util.List $r1;
        org.sat4j.tools.ManyCore r0;
        org.sat4j.specs.ISolver $r3;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.sat4j.tools.ManyCore;

        $r1 = r0.<org.sat4j.tools.ManyCore: java.util.List solvers>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        $r3 = (org.sat4j.specs.ISolver) $r2;

        $z0 = interfaceinvoke $r3.<org.sat4j.specs.ISolver: boolean isVerbose()>();

        return $z0;
    }

    public void setVerbose(boolean)
    {
        java.util.List $r1;
        org.sat4j.tools.ManyCore r0;
        org.sat4j.specs.ISolver $r3;
        int $i0, i1;
        java.lang.Object $r2;
        boolean z0;

        r0 := @this: org.sat4j.tools.ManyCore;

        z0 := @parameter0: boolean;

        i1 = 0;

     label1:
        $i0 = r0.<org.sat4j.tools.ManyCore: int numberOfSolvers>;

        if i1 >= $i0 goto label2;

        $r1 = r0.<org.sat4j.tools.ManyCore: java.util.List solvers>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i1);

        $r3 = (org.sat4j.specs.ISolver) $r2;

        interfaceinvoke $r3.<org.sat4j.specs.ISolver: void setVerbose(boolean)>(z0);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public void setLogPrefix(java.lang.String)
    {
        java.util.List $r1;
        org.sat4j.tools.ManyCore r0;
        org.sat4j.specs.ISolver $r4;
        int $i0, i1;
        java.lang.Object $r2;
        java.lang.String r3;

        r0 := @this: org.sat4j.tools.ManyCore;

        r3 := @parameter0: java.lang.String;

        i1 = 0;

     label1:
        $i0 = r0.<org.sat4j.tools.ManyCore: int numberOfSolvers>;

        if i1 >= $i0 goto label2;

        $r1 = r0.<org.sat4j.tools.ManyCore: java.util.List solvers>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i1);

        $r4 = (org.sat4j.specs.ISolver) $r2;

        interfaceinvoke $r4.<org.sat4j.specs.ISolver: void setLogPrefix(java.lang.String)>(r3);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public java.lang.String getLogPrefix()
    {
        java.util.List $r1;
        org.sat4j.tools.ManyCore r0;
        org.sat4j.specs.ISolver $r3;
        java.lang.Object $r2;
        java.lang.String $r4;

        r0 := @this: org.sat4j.tools.ManyCore;

        $r1 = r0.<org.sat4j.tools.ManyCore: java.util.List solvers>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        $r3 = (org.sat4j.specs.ISolver) $r2;

        $r4 = interfaceinvoke $r3.<org.sat4j.specs.ISolver: java.lang.String getLogPrefix()>();

        return $r4;
    }

    public org.sat4j.specs.IVecInt unsatExplanation()
    {
        java.util.List $r1;
        org.sat4j.tools.ManyCore r0;
        org.sat4j.specs.ISolver $r3;
        int $i0;
        org.sat4j.specs.IVecInt $r4;
        java.lang.Object $r2;

        r0 := @this: org.sat4j.tools.ManyCore;

        $r1 = r0.<org.sat4j.tools.ManyCore: java.util.List solvers>;

        $i0 = r0.<org.sat4j.tools.ManyCore: int winnerId>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i0);

        $r3 = (org.sat4j.specs.ISolver) $r2;

        $r4 = interfaceinvoke $r3.<org.sat4j.specs.ISolver: org.sat4j.specs.IVecInt unsatExplanation()>();

        return $r4;
    }

    public int[] primeImplicant()
    {
        java.util.List $r1;
        org.sat4j.tools.ManyCore r0;
        int[] $r4;
        org.sat4j.specs.ISolver $r3;
        int $i0;
        java.lang.Object $r2;

        r0 := @this: org.sat4j.tools.ManyCore;

        $r1 = r0.<org.sat4j.tools.ManyCore: java.util.List solvers>;

        $i0 = r0.<org.sat4j.tools.ManyCore: int winnerId>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i0);

        $r3 = (org.sat4j.specs.ISolver) $r2;

        $r4 = interfaceinvoke $r3.<org.sat4j.specs.ISolver: int[] primeImplicant()>();

        return $r4;
    }

    public boolean primeImplicant(int)
    {
        java.util.List $r1;
        org.sat4j.tools.ManyCore r0;
        org.sat4j.specs.ISolver $r3;
        int $i0, i1;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.sat4j.tools.ManyCore;

        i1 := @parameter0: int;

        $r1 = r0.<org.sat4j.tools.ManyCore: java.util.List solvers>;

        $i0 = r0.<org.sat4j.tools.ManyCore: int winnerId>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i0);

        $r3 = (org.sat4j.specs.ISolver) $r2;

        $z0 = interfaceinvoke $r3.<org.sat4j.specs.ISolver: boolean primeImplicant(int)>(i1);

        return $z0;
    }

    public java.util.List getSolvers()
    {
        java.util.List $r2;
        org.sat4j.tools.ManyCore r1;
        java.util.ArrayList $r0;

        r1 := @this: org.sat4j.tools.ManyCore;

        $r0 = new java.util.ArrayList;

        $r2 = r1.<org.sat4j.tools.ManyCore: java.util.List solvers>;

        specialinvoke $r0.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

        return $r0;
    }

    public int[] modelWithInternalVariables()
    {
        java.util.List $r1;
        org.sat4j.tools.ManyCore r0;
        int[] $r4;
        org.sat4j.specs.ISolver $r3;
        int $i0;
        java.lang.Object $r2;

        r0 := @this: org.sat4j.tools.ManyCore;

        $r1 = r0.<org.sat4j.tools.ManyCore: java.util.List solvers>;

        $i0 = r0.<org.sat4j.tools.ManyCore: int winnerId>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i0);

        $r3 = (org.sat4j.specs.ISolver) $r2;

        $r4 = interfaceinvoke $r3.<org.sat4j.specs.ISolver: int[] modelWithInternalVariables()>();

        return $r4;
    }

    public int realNumberOfVariables()
    {
        java.util.List $r1;
        org.sat4j.tools.ManyCore r0;
        org.sat4j.specs.ISolver $r3;
        int $i0;
        java.lang.Object $r2;

        r0 := @this: org.sat4j.tools.ManyCore;

        $r1 = r0.<org.sat4j.tools.ManyCore: java.util.List solvers>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        $r3 = (org.sat4j.specs.ISolver) $r2;

        $i0 = interfaceinvoke $r3.<org.sat4j.specs.ISolver: int realNumberOfVariables()>();

        return $i0;
    }

    public void registerLiteral(int)
    {
        java.util.List $r1;
        org.sat4j.tools.ManyCore r0;
        org.sat4j.specs.ISolver $r3;
        int $i0, i1, i2;
        java.lang.Object $r2;

        r0 := @this: org.sat4j.tools.ManyCore;

        i1 := @parameter0: int;

        i2 = 0;

     label1:
        $i0 = r0.<org.sat4j.tools.ManyCore: int numberOfSolvers>;

        if i2 >= $i0 goto label2;

        $r1 = r0.<org.sat4j.tools.ManyCore: java.util.List solvers>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i2);

        $r3 = (org.sat4j.specs.ISolver) $r2;

        interfaceinvoke $r3.<org.sat4j.specs.ISolver: void registerLiteral(int)>(i1);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    public boolean isSolverKeptHot()
    {
        java.util.List $r1;
        org.sat4j.tools.ManyCore r0;
        org.sat4j.specs.ISolver $r3;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.sat4j.tools.ManyCore;

        $r1 = r0.<org.sat4j.tools.ManyCore: java.util.List solvers>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        $r3 = (org.sat4j.specs.ISolver) $r2;

        $z0 = interfaceinvoke $r3.<org.sat4j.specs.ISolver: boolean isSolverKeptHot()>();

        return $z0;
    }

    public void setKeepSolverHot(boolean)
    {
        java.util.List $r1;
        org.sat4j.tools.ManyCore r0;
        org.sat4j.specs.ISolver $r3;
        int $i0, i1;
        java.lang.Object $r2;
        boolean z0;

        r0 := @this: org.sat4j.tools.ManyCore;

        z0 := @parameter0: boolean;

        i1 = 0;

     label1:
        $i0 = r0.<org.sat4j.tools.ManyCore: int numberOfSolvers>;

        if i1 >= $i0 goto label2;

        $r1 = r0.<org.sat4j.tools.ManyCore: java.util.List solvers>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i1);

        $r3 = (org.sat4j.specs.ISolver) $r2;

        interfaceinvoke $r3.<org.sat4j.specs.ISolver: void setKeepSolverHot(boolean)>(z0);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        <org.sat4j.tools.ManyCore: long serialVersionUID> = 1L;

        <org.sat4j.tools.ManyCore: int FAST_SLEEP> = 50;

        <org.sat4j.tools.ManyCore: int NORMAL_SLEEP> = 500;

        $r0 = class "Lorg/sat4j/tools/ManyCore;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.sat4j.tools.ManyCore: boolean $assertionsDisabled> = $z1;

        return;
    }
}
