public abstract class org.waveprotocol.wave.model.schema.AbstractXmlSchemaConstraints extends java.lang.Object implements org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema
{
    private static final java.lang.String IMPLICIT_ROOT_TYPE;
    private final org.waveprotocol.wave.model.util.StringMap permittedChildren;
    private final org.waveprotocol.wave.model.util.StringMap permittedAttrs;
    private final org.waveprotocol.wave.model.util.StringMap textPermitted;
    private final org.waveprotocol.wave.model.util.StringMap requiredInitial;

    public void <init>()
    {
        org.waveprotocol.wave.model.schema.AbstractXmlSchemaConstraints r0;
        org.waveprotocol.wave.model.util.StringMap $r1, $r2, $r3, $r4;

        r0 := @this: org.waveprotocol.wave.model.schema.AbstractXmlSchemaConstraints;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringMap createStringMap()>();

        r0.<org.waveprotocol.wave.model.schema.AbstractXmlSchemaConstraints: org.waveprotocol.wave.model.util.StringMap permittedChildren> = $r1;

        $r2 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringMap createStringMap()>();

        r0.<org.waveprotocol.wave.model.schema.AbstractXmlSchemaConstraints: org.waveprotocol.wave.model.util.StringMap permittedAttrs> = $r2;

        $r3 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringMap createStringMap()>();

        r0.<org.waveprotocol.wave.model.schema.AbstractXmlSchemaConstraints: org.waveprotocol.wave.model.util.StringMap textPermitted> = $r3;

        $r4 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringMap createStringMap()>();

        r0.<org.waveprotocol.wave.model.schema.AbstractXmlSchemaConstraints: org.waveprotocol.wave.model.util.StringMap requiredInitial> = $r4;

        return;
    }

    private static java.lang.String fixType(java.lang.String)
    {
        java.lang.String r0, $r1;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        $r1 = "";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, "Invalid type");

        if r0 != null goto label3;

        return "";

     label3:
        return r0;
    }

    private static void checkNotTopLevel(java.lang.String)
    {
        java.lang.String r0, $r1;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        $r1 = "";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, "Invalid type");

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "Null type");

        return;
    }

    public void addRequiredInitial(java.lang.String, java.util.List)
    {
        org.waveprotocol.wave.model.schema.AbstractXmlSchemaConstraints r0;
        java.util.List r2;
        java.lang.String r1;
        org.waveprotocol.wave.model.util.StringMap $r3;

        r0 := @this: org.waveprotocol.wave.model.schema.AbstractXmlSchemaConstraints;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.List;

        $r3 = r0.<org.waveprotocol.wave.model.schema.AbstractXmlSchemaConstraints: org.waveprotocol.wave.model.util.StringMap requiredInitial>;

        interfaceinvoke $r3.<org.waveprotocol.wave.model.util.StringMap: void put(java.lang.String,java.lang.Object)>(r1, r2);

        return;
    }

    public transient void containsBlipText(java.lang.String[])
    {
        org.waveprotocol.wave.model.schema.AbstractXmlSchemaConstraints r2;
        java.lang.String[] r0;
        org.waveprotocol.wave.model.util.StringMap $r4;
        int i0, i1;
        java.lang.String $r1, r5;
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters $r3;

        r2 := @this: org.waveprotocol.wave.model.schema.AbstractXmlSchemaConstraints;

        r0 := @parameter0: java.lang.String[];

        i0 = lengthof r0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r5 = r0[i1];

        $r1 = staticinvoke <org.waveprotocol.wave.model.schema.AbstractXmlSchemaConstraints: java.lang.String fixType(java.lang.String)>(r5);

        $r4 = r2.<org.waveprotocol.wave.model.schema.AbstractXmlSchemaConstraints: org.waveprotocol.wave.model.util.StringMap textPermitted>;

        $r3 = <org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters BLIP_TEXT>;

        interfaceinvoke $r4.<org.waveprotocol.wave.model.util.StringMap: void put(java.lang.String,java.lang.Object)>($r1, $r3);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public transient void containsAnyText(java.lang.String[])
    {
        org.waveprotocol.wave.model.schema.AbstractXmlSchemaConstraints r2;
        java.lang.String[] r0;
        org.waveprotocol.wave.model.util.StringMap $r4;
        int i0, i1;
        java.lang.String $r1, r5;
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters $r3;

        r2 := @this: org.waveprotocol.wave.model.schema.AbstractXmlSchemaConstraints;

        r0 := @parameter0: java.lang.String[];

        i0 = lengthof r0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r5 = r0[i1];

        $r1 = staticinvoke <org.waveprotocol.wave.model.schema.AbstractXmlSchemaConstraints: java.lang.String fixType(java.lang.String)>(r5);

        $r4 = r2.<org.waveprotocol.wave.model.schema.AbstractXmlSchemaConstraints: org.waveprotocol.wave.model.util.StringMap textPermitted>;

        $r3 = <org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters ANY>;

        interfaceinvoke $r4.<org.waveprotocol.wave.model.util.StringMap: void put(java.lang.String,java.lang.Object)>($r1, $r3);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public transient void addChildren(java.lang.String, java.lang.String[])
    {
        org.waveprotocol.wave.model.schema.AbstractXmlSchemaConstraints r1;
        org.waveprotocol.wave.model.util.StringSet $r7, r9;
        java.lang.String[] r4;
        org.waveprotocol.wave.model.util.StringMap $r2, $r6;
        int $i0, i1;
        java.lang.Object $r3;
        java.lang.String $r0, r5, r8;

        r1 := @this: org.waveprotocol.wave.model.schema.AbstractXmlSchemaConstraints;

        r8 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String[];

        $r0 = staticinvoke <org.waveprotocol.wave.model.schema.AbstractXmlSchemaConstraints: java.lang.String fixType(java.lang.String)>(r8);

        $r2 = r1.<org.waveprotocol.wave.model.schema.AbstractXmlSchemaConstraints: org.waveprotocol.wave.model.util.StringMap permittedChildren>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.util.StringMap: java.lang.Object get(java.lang.String)>($r0);

        r9 = (org.waveprotocol.wave.model.util.StringSet) $r3;

        if r9 != null goto label1;

        $r6 = r1.<org.waveprotocol.wave.model.schema.AbstractXmlSchemaConstraints: org.waveprotocol.wave.model.util.StringMap permittedChildren>;

        $r7 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringSet createStringSet()>();

        r9 = $r7;

        interfaceinvoke $r6.<org.waveprotocol.wave.model.util.StringMap: void put(java.lang.String,java.lang.Object)>($r0, $r7);

     label1:
        $i0 = lengthof r4;

        i1 = 0;

     label2:
        if i1 >= $i0 goto label3;

        r5 = r4[i1];

        staticinvoke <org.waveprotocol.wave.model.schema.AbstractXmlSchemaConstraints: void checkNotTopLevel(java.lang.String)>(r5);

        interfaceinvoke r9.<org.waveprotocol.wave.model.util.StringSet: void add(java.lang.String)>(r5);

        i1 = i1 + 1;

        goto label2;

     label3:
        return;
    }

    public transient void addAttrs(java.lang.String, java.lang.String[])
    {
        org.waveprotocol.wave.model.schema.AbstractXmlSchemaConstraints r3;
        int i0, i1;
        java.lang.String[] r1, $r4;
        java.lang.String r0, r2;

        r3 := @this: org.waveprotocol.wave.model.schema.AbstractXmlSchemaConstraints;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String[];

        staticinvoke <org.waveprotocol.wave.model.schema.AbstractXmlSchemaConstraints: void checkNotTopLevel(java.lang.String)>(r0);

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r2 = r1[i1];

        $r4 = newarray (java.lang.String)[0];

        virtualinvoke r3.<org.waveprotocol.wave.model.schema.AbstractXmlSchemaConstraints: void addAttrWithValues(java.lang.String,java.lang.String,java.lang.String[])>(r0, r2, $r4);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public transient void addAttrWithValues(java.lang.String, java.lang.String, java.lang.String[])
    {
        org.waveprotocol.wave.model.schema.AbstractXmlSchemaConstraints r1;
        org.waveprotocol.wave.model.util.StringSet $r8, r12;
        java.lang.String[] r4;
        org.waveprotocol.wave.model.util.StringMap $r2, $r9, $r10, r11;
        int $i0, $i1, i2;
        java.lang.String r0, r5, r7;
        java.lang.Object $r3, $r6;

        r1 := @this: org.waveprotocol.wave.model.schema.AbstractXmlSchemaConstraints;

        r0 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String[];

        staticinvoke <org.waveprotocol.wave.model.schema.AbstractXmlSchemaConstraints: void checkNotTopLevel(java.lang.String)>(r0);

        $r2 = r1.<org.waveprotocol.wave.model.schema.AbstractXmlSchemaConstraints: org.waveprotocol.wave.model.util.StringMap permittedAttrs>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.util.StringMap: java.lang.Object get(java.lang.String)>(r0);

        r11 = (org.waveprotocol.wave.model.util.StringMap) $r3;

        if r11 != null goto label1;

        $r9 = r1.<org.waveprotocol.wave.model.schema.AbstractXmlSchemaConstraints: org.waveprotocol.wave.model.util.StringMap permittedAttrs>;

        $r10 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringMap createStringMap()>();

        r11 = $r10;

        interfaceinvoke $r9.<org.waveprotocol.wave.model.util.StringMap: void put(java.lang.String,java.lang.Object)>(r0, $r10);

     label1:
        $i0 = lengthof r4;

        if $i0 != 0 goto label2;

        interfaceinvoke r11.<org.waveprotocol.wave.model.util.StringMap: void put(java.lang.String,java.lang.Object)>(r5, null);

        goto label5;

     label2:
        $r6 = interfaceinvoke r11.<org.waveprotocol.wave.model.util.StringMap: java.lang.Object get(java.lang.String)>(r5);

        r12 = (org.waveprotocol.wave.model.util.StringSet) $r6;

        if r12 != null goto label3;

        $r8 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringSet createStringSet()>();

        r12 = $r8;

        interfaceinvoke r11.<org.waveprotocol.wave.model.util.StringMap: void put(java.lang.String,java.lang.Object)>(r5, $r8);

     label3:
        $i1 = lengthof r4;

        i2 = 0;

     label4:
        if i2 >= $i1 goto label5;

        r7 = r4[i2];

        interfaceinvoke r12.<org.waveprotocol.wave.model.util.StringSet: void add(java.lang.String)>(r7);

        i2 = i2 + 1;

        goto label4;

     label5:
        return;
    }

    public boolean permitsAttribute(java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.model.schema.AbstractXmlSchemaConstraints r1;
        org.waveprotocol.wave.model.util.StringMap $r2, r4;
        java.lang.Object $r3;
        java.lang.String r0, r5;
        boolean $z0, $z1;

        r1 := @this: org.waveprotocol.wave.model.schema.AbstractXmlSchemaConstraints;

        r0 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.String;

        staticinvoke <org.waveprotocol.wave.model.schema.AbstractXmlSchemaConstraints: void checkNotTopLevel(java.lang.String)>(r0);

        $r2 = r1.<org.waveprotocol.wave.model.schema.AbstractXmlSchemaConstraints: org.waveprotocol.wave.model.util.StringMap permittedAttrs>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.util.StringMap: java.lang.Object get(java.lang.String)>(r0);

        r4 = (org.waveprotocol.wave.model.util.StringMap) $r3;

        if r4 == null goto label1;

        $z0 = interfaceinvoke r4.<org.waveprotocol.wave.model.util.StringMap: boolean containsKey(java.lang.String)>(r5);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public boolean permitsAttribute(java.lang.String, java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.model.schema.AbstractXmlSchemaConstraints r1;
        org.waveprotocol.wave.model.util.StringSet $r9;
        org.waveprotocol.wave.model.util.StringMap $r2, r4;
        java.lang.Object $r3, $r6, $r7;
        java.lang.String r0, r5, r8;
        boolean $z0, $z1, $z2;

        r1 := @this: org.waveprotocol.wave.model.schema.AbstractXmlSchemaConstraints;

        r0 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.String;

        r8 := @parameter2: java.lang.String;

        staticinvoke <org.waveprotocol.wave.model.schema.AbstractXmlSchemaConstraints: void checkNotTopLevel(java.lang.String)>(r0);

        $r2 = r1.<org.waveprotocol.wave.model.schema.AbstractXmlSchemaConstraints: org.waveprotocol.wave.model.util.StringMap permittedAttrs>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.util.StringMap: java.lang.Object get(java.lang.String)>(r0);

        r4 = (org.waveprotocol.wave.model.util.StringMap) $r3;

        if r4 == null goto label2;

        $z0 = interfaceinvoke r4.<org.waveprotocol.wave.model.util.StringMap: boolean containsKey(java.lang.String)>(r5);

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r4.<org.waveprotocol.wave.model.util.StringMap: java.lang.Object get(java.lang.String)>(r5);

        if $r6 == null goto label1;

        $r7 = interfaceinvoke r4.<org.waveprotocol.wave.model.util.StringMap: java.lang.Object get(java.lang.String)>(r5);

        $r9 = (org.waveprotocol.wave.model.util.StringSet) $r7;

        $z1 = interfaceinvoke $r9.<org.waveprotocol.wave.model.util.StringSet: boolean contains(java.lang.String)>(r8);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public boolean permitsChild(java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.model.schema.AbstractXmlSchemaConstraints r2;
        org.waveprotocol.wave.model.util.StringSet r5;
        org.waveprotocol.wave.model.util.StringMap $r3;
        java.lang.Object $r4;
        java.lang.String $r0, r1, r6;
        boolean $z0, $z1;

        r2 := @this: org.waveprotocol.wave.model.schema.AbstractXmlSchemaConstraints;

        r6 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r0 = staticinvoke <org.waveprotocol.wave.model.schema.AbstractXmlSchemaConstraints: java.lang.String fixType(java.lang.String)>(r6);

        staticinvoke <org.waveprotocol.wave.model.schema.AbstractXmlSchemaConstraints: void checkNotTopLevel(java.lang.String)>(r1);

        $r3 = r2.<org.waveprotocol.wave.model.schema.AbstractXmlSchemaConstraints: org.waveprotocol.wave.model.util.StringMap permittedChildren>;

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.model.util.StringMap: java.lang.Object get(java.lang.String)>($r0);

        r5 = (org.waveprotocol.wave.model.util.StringSet) $r4;

        if r5 == null goto label1;

        $z0 = interfaceinvoke r5.<org.waveprotocol.wave.model.util.StringSet: boolean contains(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters permittedCharacters(java.lang.String)
    {
        org.waveprotocol.wave.model.schema.AbstractXmlSchemaConstraints r1;
        java.lang.Object $r3;
        java.lang.String $r0, r5;
        org.waveprotocol.wave.model.util.StringMap $r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters r4, $r6;

        r1 := @this: org.waveprotocol.wave.model.schema.AbstractXmlSchemaConstraints;

        r5 := @parameter0: java.lang.String;

        $r0 = staticinvoke <org.waveprotocol.wave.model.schema.AbstractXmlSchemaConstraints: java.lang.String fixType(java.lang.String)>(r5);

        $r2 = r1.<org.waveprotocol.wave.model.schema.AbstractXmlSchemaConstraints: org.waveprotocol.wave.model.util.StringMap textPermitted>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.util.StringMap: java.lang.Object get(java.lang.String)>($r0);

        r4 = (org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters) $r3;

        if r4 == null goto label1;

        $r6 = r4;

        goto label2;

     label1:
        $r6 = <org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters NONE>;

     label2:
        return $r6;
    }

    public java.util.List getRequiredInitialChildren(java.lang.String)
    {
        org.waveprotocol.wave.model.schema.AbstractXmlSchemaConstraints r1;
        org.waveprotocol.wave.model.util.StringMap $r2, $r3;
        java.util.List $r6;
        java.lang.Object $r4;
        java.lang.String $r0, r5;
        boolean $z0;

        r1 := @this: org.waveprotocol.wave.model.schema.AbstractXmlSchemaConstraints;

        r5 := @parameter0: java.lang.String;

        $r0 = staticinvoke <org.waveprotocol.wave.model.schema.AbstractXmlSchemaConstraints: java.lang.String fixType(java.lang.String)>(r5);

        $r2 = r1.<org.waveprotocol.wave.model.schema.AbstractXmlSchemaConstraints: org.waveprotocol.wave.model.util.StringMap requiredInitial>;

        $z0 = interfaceinvoke $r2.<org.waveprotocol.wave.model.util.StringMap: boolean containsKey(java.lang.String)>($r0);

        if $z0 == 0 goto label1;

        $r3 = r1.<org.waveprotocol.wave.model.schema.AbstractXmlSchemaConstraints: org.waveprotocol.wave.model.util.StringMap requiredInitial>;

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.model.util.StringMap: java.lang.Object get(java.lang.String)>($r0);

        $r6 = (java.util.List) $r4;

        goto label2;

     label1:
        $r6 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

     label2:
        return $r6;
    }

    public static void <clinit>()
    {
        <org.waveprotocol.wave.model.schema.AbstractXmlSchemaConstraints: java.lang.String IMPLICIT_ROOT_TYPE> = "";

        return;
    }
}
