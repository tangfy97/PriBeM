public class org.waveprotocol.box.server.robots.util.ConversationUtil extends java.lang.Object
{
    private final org.waveprotocol.wave.model.id.IdGenerator idGenerator;

    public void <init>(org.waveprotocol.wave.model.id.IdGenerator)
    {
        org.waveprotocol.box.server.robots.util.ConversationUtil r0;
        org.waveprotocol.wave.model.id.IdGenerator r1;

        r0 := @this: org.waveprotocol.box.server.robots.util.ConversationUtil;

        r1 := @parameter0: org.waveprotocol.wave.model.id.IdGenerator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.box.server.robots.util.ConversationUtil: org.waveprotocol.wave.model.id.IdGenerator idGenerator> = r1;

        return;
    }

    public org.waveprotocol.wave.model.conversation.ObservableConversationView buildConversation(org.waveprotocol.wave.model.wave.ObservableWavelet)
    {
        org.waveprotocol.wave.model.id.WaveletId $r1, $r4, $r9;
        org.waveprotocol.wave.model.wave.ObservableWavelet r0;
        java.lang.String $r6, $r12;
        boolean $z0, $z1;
        org.waveprotocol.wave.model.conversation.WaveBasedConversationView $r17;
        org.waveprotocol.box.server.robots.util.ConversationUtil r15;
        org.waveprotocol.wave.model.id.WaveId $r14;
        org.waveprotocol.wave.model.id.IdGenerator $r16;
        java.lang.StringBuilder $r2, $r3, $r5, $r7, $r8, $r10, $r11;
        org.waveprotocol.wave.model.wave.ReadOnlyWaveView $r13;

        r15 := @this: org.waveprotocol.box.server.robots.util.ConversationUtil;

        r0 := @parameter0: org.waveprotocol.wave.model.wave.ObservableWavelet;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.wave.ObservableWavelet: org.waveprotocol.wave.model.id.WaveletId getId()>();

        $z0 = staticinvoke <org.waveprotocol.wave.model.id.IdUtil: boolean isConversationalId(org.waveprotocol.wave.model.id.WaveletId)>($r1);

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected conversational wavelet, got ");

        $r4 = interfaceinvoke r0.<org.waveprotocol.wave.model.wave.ObservableWavelet: org.waveprotocol.wave.model.id.WaveletId getId()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, $r6);

        $z1 = staticinvoke <org.waveprotocol.wave.model.conversation.WaveletBasedConversation: boolean waveletHasConversation(org.waveprotocol.wave.model.wave.Wavelet)>(r0);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Conversation can\'t be build on a wavelet ");

        $r9 = interfaceinvoke r0.<org.waveprotocol.wave.model.wave.ObservableWavelet: org.waveprotocol.wave.model.id.WaveletId getId()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" without conversation structure");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, $r12);

        $r13 = new org.waveprotocol.wave.model.wave.ReadOnlyWaveView;

        $r14 = interfaceinvoke r0.<org.waveprotocol.wave.model.wave.ObservableWavelet: org.waveprotocol.wave.model.id.WaveId getWaveId()>();

        specialinvoke $r13.<org.waveprotocol.wave.model.wave.ReadOnlyWaveView: void <init>(org.waveprotocol.wave.model.id.WaveId)>($r14);

        virtualinvoke $r13.<org.waveprotocol.wave.model.wave.ReadOnlyWaveView: void addWavelet(org.waveprotocol.wave.model.wave.ObservableWavelet)>(r0);

        $r16 = r15.<org.waveprotocol.box.server.robots.util.ConversationUtil: org.waveprotocol.wave.model.id.IdGenerator idGenerator>;

        $r17 = staticinvoke <org.waveprotocol.wave.model.conversation.WaveBasedConversationView: org.waveprotocol.wave.model.conversation.WaveBasedConversationView create(org.waveprotocol.wave.model.wave.opbased.ObservableWaveView,org.waveprotocol.wave.model.id.IdGenerator)>($r13, $r16);

        return $r17;
    }

    public org.waveprotocol.wave.model.id.WaveletName generateWaveletName()
    {
        org.waveprotocol.wave.model.id.WaveletName $r5;
        org.waveprotocol.box.server.robots.util.ConversationUtil r0;
        org.waveprotocol.wave.model.id.WaveId $r2;
        org.waveprotocol.wave.model.id.WaveletId $r4;
        org.waveprotocol.wave.model.id.IdGenerator $r1, $r3;

        r0 := @this: org.waveprotocol.box.server.robots.util.ConversationUtil;

        $r1 = r0.<org.waveprotocol.box.server.robots.util.ConversationUtil: org.waveprotocol.wave.model.id.IdGenerator idGenerator>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.id.IdGenerator: org.waveprotocol.wave.model.id.WaveId newWaveId()>();

        $r3 = r0.<org.waveprotocol.box.server.robots.util.ConversationUtil: org.waveprotocol.wave.model.id.IdGenerator idGenerator>;

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.model.id.IdGenerator: org.waveprotocol.wave.model.id.WaveletId newConversationRootWaveletId()>();

        $r5 = staticinvoke <org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveletName of(org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.model.id.WaveletId)>($r2, $r4);

        return $r5;
    }

    public static java.lang.String getRootBlipId(org.waveprotocol.wave.model.conversation.Conversation)
    {
        org.waveprotocol.wave.model.conversation.ConversationBlip $r2;
        org.waveprotocol.wave.model.conversation.Conversation r0;
        org.waveprotocol.wave.model.conversation.ConversationThread $r1;
        java.lang.String $r3;

        r0 := @parameter0: org.waveprotocol.wave.model.conversation.Conversation;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.conversation.Conversation: org.waveprotocol.wave.model.conversation.ConversationThread getRootThread()>();

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.conversation.ConversationThread: org.waveprotocol.wave.model.conversation.ConversationBlip getFirstBlip()>();

        if $r2 == null goto label1;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.conversation.ConversationBlip: java.lang.String getId()>();

        goto label2;

     label1:
        $r3 = "";

     label2:
        return $r3;
    }
}
