class com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator$1 extends java.lang.Object implements com.adobe.xmp.properties.XMPPropertyInfo
{
    final com.adobe.xmp.impl.XMPNode val$node;
    final java.lang.String val$baseNS;
    final java.lang.String val$path;
    final java.lang.String val$value;
    final com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator this$1;

    void <init>(com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator, com.adobe.xmp.impl.XMPNode, java.lang.String, java.lang.String, java.lang.String)
    {
        com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator$1 r0;
        com.adobe.xmp.impl.XMPNode r2;
        com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator r1;
        java.lang.String r3, r4, r5;

        r0 := @this: com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator$1;

        r1 := @parameter0: com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator;

        r2 := @parameter1: com.adobe.xmp.impl.XMPNode;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: java.lang.String;

        r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator$1: com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator this$1> = r1;

        r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator$1: com.adobe.xmp.impl.XMPNode val$node> = r2;

        r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator$1: java.lang.String val$baseNS> = r3;

        r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator$1: java.lang.String val$path> = r4;

        r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator$1: java.lang.String val$value> = r5;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.String getNamespace()
    {
        com.adobe.xmp.options.PropertyOptions $r2;
        com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator$1 r0;
        com.adobe.xmp.XMPSchemaRegistry $r7;
        com.adobe.xmp.impl.XMPNode $r1, $r5;
        com.adobe.xmp.impl.QName $r4;
        java.lang.String $r3, $r6, $r8, $r9;
        boolean $z0;

        r0 := @this: com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator$1;

        $r1 = r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator$1: com.adobe.xmp.impl.XMPNode val$node>;

        $r2 = virtualinvoke $r1.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z0 = virtualinvoke $r2.<com.adobe.xmp.options.PropertyOptions: boolean isSchemaNode()>();

        if $z0 != 0 goto label1;

        $r4 = new com.adobe.xmp.impl.QName;

        $r5 = r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator$1: com.adobe.xmp.impl.XMPNode val$node>;

        $r6 = virtualinvoke $r5.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        specialinvoke $r4.<com.adobe.xmp.impl.QName: void <init>(java.lang.String)>($r6);

        $r7 = staticinvoke <com.adobe.xmp.XMPMetaFactory: com.adobe.xmp.XMPSchemaRegistry getSchemaRegistry()>();

        $r8 = virtualinvoke $r4.<com.adobe.xmp.impl.QName: java.lang.String getPrefix()>();

        $r9 = interfaceinvoke $r7.<com.adobe.xmp.XMPSchemaRegistry: java.lang.String getNamespaceURI(java.lang.String)>($r8);

        return $r9;

     label1:
        $r3 = r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator$1: java.lang.String val$baseNS>;

        return $r3;
    }

    public java.lang.String getPath()
    {
        com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator$1 r0;
        java.lang.String $r1;

        r0 := @this: com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator$1;

        $r1 = r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator$1: java.lang.String val$path>;

        return $r1;
    }

    public java.lang.String getValue()
    {
        com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator$1 r0;
        java.lang.String $r1;

        r0 := @this: com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator$1;

        $r1 = r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator$1: java.lang.String val$value>;

        return $r1;
    }

    public com.adobe.xmp.options.PropertyOptions getOptions()
    {
        com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator$1 r0;
        com.adobe.xmp.options.PropertyOptions $r2;
        com.adobe.xmp.impl.XMPNode $r1;

        r0 := @this: com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator$1;

        $r1 = r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator$1: com.adobe.xmp.impl.XMPNode val$node>;

        $r2 = virtualinvoke $r1.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        return $r2;
    }

    public java.lang.String getLanguage()
    {
        com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator$1 r0;

        r0 := @this: com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator$1;

        return null;
    }
}
