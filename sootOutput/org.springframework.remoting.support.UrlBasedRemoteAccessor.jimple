public abstract class org.springframework.remoting.support.UrlBasedRemoteAccessor extends org.springframework.remoting.support.RemoteAccessor implements org.springframework.beans.factory.InitializingBean
{
    private java.lang.String serviceUrl;

    public void <init>()
    {
        org.springframework.remoting.support.UrlBasedRemoteAccessor r0;

        r0 := @this: org.springframework.remoting.support.UrlBasedRemoteAccessor;

        specialinvoke r0.<org.springframework.remoting.support.RemoteAccessor: void <init>()>();

        return;
    }

    public void setServiceUrl(java.lang.String)
    {
        java.lang.String r1;
        org.springframework.remoting.support.UrlBasedRemoteAccessor r0;

        r0 := @this: org.springframework.remoting.support.UrlBasedRemoteAccessor;

        r1 := @parameter0: java.lang.String;

        r0.<org.springframework.remoting.support.UrlBasedRemoteAccessor: java.lang.String serviceUrl> = r1;

        return;
    }

    public java.lang.String getServiceUrl()
    {
        java.lang.String $r1;
        org.springframework.remoting.support.UrlBasedRemoteAccessor r0;

        r0 := @this: org.springframework.remoting.support.UrlBasedRemoteAccessor;

        $r1 = r0.<org.springframework.remoting.support.UrlBasedRemoteAccessor: java.lang.String serviceUrl>;

        return $r1;
    }

    public void afterPropertiesSet()
    {
        java.lang.String $r1;
        java.lang.IllegalArgumentException $r2;
        org.springframework.remoting.support.UrlBasedRemoteAccessor r0;

        r0 := @this: org.springframework.remoting.support.UrlBasedRemoteAccessor;

        $r1 = virtualinvoke r0.<org.springframework.remoting.support.UrlBasedRemoteAccessor: java.lang.String getServiceUrl()>();

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Property \'serviceUrl\' is required");

        throw $r2;

     label1:
        return;
    }
}
