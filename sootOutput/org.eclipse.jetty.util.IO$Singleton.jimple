class org.eclipse.jetty.util.IO$Singleton extends java.lang.Object
{
    static final org.eclipse.jetty.util.thread.QueuedThreadPool __pool;

    private void <init>()
    {
        org.eclipse.jetty.util.IO$Singleton r0;

        r0 := @this: org.eclipse.jetty.util.IO$Singleton;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void <clinit>()
    {
        org.eclipse.jetty.util.thread.QueuedThreadPool $r0, $r1;
        org.eclipse.jetty.util.log.Logger $r3;
        java.lang.Exception $r2;

        $r0 = new org.eclipse.jetty.util.thread.QueuedThreadPool;

        specialinvoke $r0.<org.eclipse.jetty.util.thread.QueuedThreadPool: void <init>()>();

        <org.eclipse.jetty.util.IO$Singleton: org.eclipse.jetty.util.thread.QueuedThreadPool __pool> = $r0;

     label1:
        $r1 = <org.eclipse.jetty.util.IO$Singleton: org.eclipse.jetty.util.thread.QueuedThreadPool __pool>;

        virtualinvoke $r1.<org.eclipse.jetty.util.thread.QueuedThreadPool: void start()>();

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = staticinvoke <org.eclipse.jetty.util.IO: org.eclipse.jetty.util.log.Logger access$000()>();

        interfaceinvoke $r3.<org.eclipse.jetty.util.log.Logger: void warn(java.lang.Throwable)>($r2);

        staticinvoke <java.lang.System: void exit(int)>(1);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }
}
