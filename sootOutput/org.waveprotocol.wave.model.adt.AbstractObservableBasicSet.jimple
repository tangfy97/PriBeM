public abstract class org.waveprotocol.wave.model.adt.AbstractObservableBasicSet extends java.lang.Object implements org.waveprotocol.wave.model.adt.ObservableBasicSet
{
    private final org.waveprotocol.wave.model.util.CopyOnWriteSet listeners;

    public void <init>()
    {
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        org.waveprotocol.wave.model.adt.AbstractObservableBasicSet r0;

        r0 := @this: org.waveprotocol.wave.model.adt.AbstractObservableBasicSet;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.waveprotocol.wave.model.util.CopyOnWriteSet: org.waveprotocol.wave.model.util.CopyOnWriteSet create()>();

        r0.<org.waveprotocol.wave.model.adt.AbstractObservableBasicSet: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners> = $r1;

        return;
    }

    public void addListener(org.waveprotocol.wave.model.adt.ObservableBasicSet$Listener)
    {
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;
        org.waveprotocol.wave.model.adt.AbstractObservableBasicSet r0;
        org.waveprotocol.wave.model.adt.ObservableBasicSet$Listener r1;

        r0 := @this: org.waveprotocol.wave.model.adt.AbstractObservableBasicSet;

        r1 := @parameter0: org.waveprotocol.wave.model.adt.ObservableBasicSet$Listener;

        $r2 = r0.<org.waveprotocol.wave.model.adt.AbstractObservableBasicSet: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.util.CopyOnWriteSet: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void removeListener(org.waveprotocol.wave.model.adt.ObservableBasicSet$Listener)
    {
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;
        org.waveprotocol.wave.model.adt.AbstractObservableBasicSet r0;
        org.waveprotocol.wave.model.adt.ObservableBasicSet$Listener r1;

        r0 := @this: org.waveprotocol.wave.model.adt.AbstractObservableBasicSet;

        r1 := @parameter0: org.waveprotocol.wave.model.adt.ObservableBasicSet$Listener;

        $r2 = r0.<org.waveprotocol.wave.model.adt.AbstractObservableBasicSet: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.util.CopyOnWriteSet: boolean remove(java.lang.Object)>(r1);

        return;
    }

    protected void fireOnValueAdded(java.lang.Object)
    {
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        java.util.Iterator $r2;
        java.lang.Object $r3, r5;
        org.waveprotocol.wave.model.adt.AbstractObservableBasicSet r0;
        org.waveprotocol.wave.model.adt.ObservableBasicSet$Listener r4;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.adt.AbstractObservableBasicSet;

        r5 := @parameter0: java.lang.Object;

        $r1 = r0.<org.waveprotocol.wave.model.adt.AbstractObservableBasicSet: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.adt.ObservableBasicSet$Listener) $r3;

        interfaceinvoke r4.<org.waveprotocol.wave.model.adt.ObservableBasicSet$Listener: void onValueAdded(java.lang.Object)>(r5);

        goto label1;

     label2:
        return;
    }

    protected void fireOnValueRemoved(java.lang.Object)
    {
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        java.util.Iterator $r2;
        java.lang.Object $r3, r5;
        org.waveprotocol.wave.model.adt.AbstractObservableBasicSet r0;
        org.waveprotocol.wave.model.adt.ObservableBasicSet$Listener r4;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.adt.AbstractObservableBasicSet;

        r5 := @parameter0: java.lang.Object;

        $r1 = r0.<org.waveprotocol.wave.model.adt.AbstractObservableBasicSet: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.adt.ObservableBasicSet$Listener) $r3;

        interfaceinvoke r4.<org.waveprotocol.wave.model.adt.ObservableBasicSet$Listener: void onValueRemoved(java.lang.Object)>(r5);

        goto label1;

     label2:
        return;
    }

    public volatile void removeListener(java.lang.Object)
    {
        java.lang.Object r1;
        org.waveprotocol.wave.model.adt.AbstractObservableBasicSet r0;
        org.waveprotocol.wave.model.adt.ObservableBasicSet$Listener $r2;

        r0 := @this: org.waveprotocol.wave.model.adt.AbstractObservableBasicSet;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.adt.ObservableBasicSet$Listener) r1;

        virtualinvoke r0.<org.waveprotocol.wave.model.adt.AbstractObservableBasicSet: void removeListener(org.waveprotocol.wave.model.adt.ObservableBasicSet$Listener)>($r2);

        return;
    }

    public volatile void addListener(java.lang.Object)
    {
        java.lang.Object r1;
        org.waveprotocol.wave.model.adt.AbstractObservableBasicSet r0;
        org.waveprotocol.wave.model.adt.ObservableBasicSet$Listener $r2;

        r0 := @this: org.waveprotocol.wave.model.adt.AbstractObservableBasicSet;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.adt.ObservableBasicSet$Listener) r1;

        virtualinvoke r0.<org.waveprotocol.wave.model.adt.AbstractObservableBasicSet: void addListener(org.waveprotocol.wave.model.adt.ObservableBasicSet$Listener)>($r2);

        return;
    }
}
