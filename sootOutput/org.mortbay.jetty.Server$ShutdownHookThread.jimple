class org.mortbay.jetty.Server$ShutdownHookThread extends java.lang.Thread
{
    private boolean hooked;
    private java.util.ArrayList servers;

    private void <init>()
    {
        org.mortbay.jetty.Server$ShutdownHookThread r0;
        java.util.ArrayList $r1;

        r0 := @this: org.mortbay.jetty.Server$ShutdownHookThread;

        specialinvoke r0.<java.lang.Thread: void <init>()>();

        r0.<org.mortbay.jetty.Server$ShutdownHookThread: boolean hooked> = 0;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.mortbay.jetty.Server$ShutdownHookThread: java.util.ArrayList servers> = $r1;

        return;
    }

    private void createShutdownHook()
    {
        java.lang.Object[] $r11;
        java.lang.Runtime $r10;
        java.lang.Class[] $r6;
        org.mortbay.jetty.Server$ShutdownHookThread r0;
        java.lang.Exception $r4;
        java.lang.Class $r1, $r2, $r3, $r5, $r7, $r8;
        java.lang.reflect.Method $r9;
        boolean $z0, $z1, $z2;

        r0 := @this: org.mortbay.jetty.Server$ShutdownHookThread;

        $z0 = staticinvoke <java.lang.Boolean: boolean getBoolean(java.lang.String)>("JETTY_NO_SHUTDOWN_HOOK");

        if $z0 != 0 goto label8;

        $z1 = r0.<org.mortbay.jetty.Server$ShutdownHookThread: boolean hooked>;

        if $z1 != 0 goto label8;

     label1:
        $r1 = <org.mortbay.jetty.Server: java.lang.Class class$java$lang$Runtime>;

        if $r1 != null goto label2;

        $r3 = staticinvoke <org.mortbay.jetty.Server: java.lang.Class class$(java.lang.String)>("java.lang.Runtime");

        $r5 = $r3;

        <org.mortbay.jetty.Server: java.lang.Class class$java$lang$Runtime> = $r3;

        goto label3;

     label2:
        $r5 = <org.mortbay.jetty.Server: java.lang.Class class$java$lang$Runtime>;

     label3:
        $r6 = newarray (java.lang.Class)[1];

        $r2 = <org.mortbay.jetty.Server: java.lang.Class class$java$lang$Thread>;

        if $r2 != null goto label4;

        $r7 = staticinvoke <org.mortbay.jetty.Server: java.lang.Class class$(java.lang.String)>("java.lang.Thread");

        $r8 = $r7;

        <org.mortbay.jetty.Server: java.lang.Class class$java$lang$Thread> = $r7;

        goto label5;

     label4:
        $r8 = <org.mortbay.jetty.Server: java.lang.Class class$java$lang$Thread>;

     label5:
        $r6[0] = $r8;

        $r9 = virtualinvoke $r5.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("addShutdownHook", $r6);

        $r10 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $r11 = newarray (java.lang.Object)[1];

        $r11[0] = r0;

        virtualinvoke $r9.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r10, $r11);

        r0.<org.mortbay.jetty.Server$ShutdownHookThread: boolean hooked> = 1;

     label6:
        goto label8;

     label7:
        $r4 := @caughtexception;

        $z2 = staticinvoke <org.mortbay.log.Log: boolean isDebugEnabled()>();

        if $z2 == 0 goto label8;

        staticinvoke <org.mortbay.log.Log: void debug(java.lang.String,java.lang.Object)>("No shutdown hook in JVM ", $r4);

     label8:
        return;

        catch java.lang.Exception from label1 to label6 with label7;
    }

    public boolean add(org.mortbay.jetty.Server)
    {
        org.mortbay.jetty.Server r1;
        org.mortbay.jetty.Server$ShutdownHookThread r0;
        java.util.ArrayList $r2;
        boolean $z0;

        r0 := @this: org.mortbay.jetty.Server$ShutdownHookThread;

        r1 := @parameter0: org.mortbay.jetty.Server;

        specialinvoke r0.<org.mortbay.jetty.Server$ShutdownHookThread: void createShutdownHook()>();

        $r2 = r0.<org.mortbay.jetty.Server$ShutdownHookThread: java.util.ArrayList servers>;

        $z0 = virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean contains(org.mortbay.jetty.Server)
    {
        org.mortbay.jetty.Server r1;
        org.mortbay.jetty.Server$ShutdownHookThread r0;
        java.util.ArrayList $r2;
        boolean $z0;

        r0 := @this: org.mortbay.jetty.Server$ShutdownHookThread;

        r1 := @parameter0: org.mortbay.jetty.Server;

        $r2 = r0.<org.mortbay.jetty.Server$ShutdownHookThread: java.util.ArrayList servers>;

        $z0 = virtualinvoke $r2.<java.util.ArrayList: boolean contains(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean addAll(java.util.Collection)
    {
        java.util.Collection r1;
        org.mortbay.jetty.Server$ShutdownHookThread r0;
        java.util.ArrayList $r2;
        boolean $z0;

        r0 := @this: org.mortbay.jetty.Server$ShutdownHookThread;

        r1 := @parameter0: java.util.Collection;

        specialinvoke r0.<org.mortbay.jetty.Server$ShutdownHookThread: void createShutdownHook()>();

        $r2 = r0.<org.mortbay.jetty.Server$ShutdownHookThread: java.util.ArrayList servers>;

        $z0 = virtualinvoke $r2.<java.util.ArrayList: boolean addAll(java.util.Collection)>(r1);

        return $z0;
    }

    public void clear()
    {
        org.mortbay.jetty.Server$ShutdownHookThread r0;
        java.util.ArrayList $r1;

        r0 := @this: org.mortbay.jetty.Server$ShutdownHookThread;

        specialinvoke r0.<org.mortbay.jetty.Server$ShutdownHookThread: void createShutdownHook()>();

        $r1 = r0.<org.mortbay.jetty.Server$ShutdownHookThread: java.util.ArrayList servers>;

        virtualinvoke $r1.<java.util.ArrayList: void clear()>();

        return;
    }

    public boolean remove(org.mortbay.jetty.Server)
    {
        org.mortbay.jetty.Server r1;
        org.mortbay.jetty.Server$ShutdownHookThread r0;
        java.util.ArrayList $r2;
        boolean $z0;

        r0 := @this: org.mortbay.jetty.Server$ShutdownHookThread;

        r1 := @parameter0: org.mortbay.jetty.Server;

        specialinvoke r0.<org.mortbay.jetty.Server$ShutdownHookThread: void createShutdownHook()>();

        $r2 = r0.<org.mortbay.jetty.Server$ShutdownHookThread: java.util.ArrayList servers>;

        $z0 = virtualinvoke $r2.<java.util.ArrayList: boolean remove(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean removeAll(java.util.Collection)
    {
        java.util.Collection r1;
        org.mortbay.jetty.Server$ShutdownHookThread r0;
        java.util.ArrayList $r2;
        boolean $z0;

        r0 := @this: org.mortbay.jetty.Server$ShutdownHookThread;

        r1 := @parameter0: java.util.Collection;

        specialinvoke r0.<org.mortbay.jetty.Server$ShutdownHookThread: void createShutdownHook()>();

        $r2 = r0.<org.mortbay.jetty.Server$ShutdownHookThread: java.util.ArrayList servers>;

        $z0 = virtualinvoke $r2.<java.util.ArrayList: boolean removeAll(java.util.Collection)>(r1);

        return $z0;
    }

    public void run()
    {
        java.util.Iterator $r2;
        org.mortbay.jetty.Server$ShutdownHookThread r0;
        java.lang.Exception $r5, $r6;
        java.util.ArrayList $r1;
        org.mortbay.jetty.Server r4;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: org.mortbay.jetty.Server$ShutdownHookThread;

        virtualinvoke r0.<org.mortbay.jetty.Server$ShutdownHookThread: void setName(java.lang.String)>("Shutdown");

        staticinvoke <org.mortbay.log.Log: void info(java.lang.String)>("Shutdown hook executing");

        $r1 = r0.<org.mortbay.jetty.Server$ShutdownHookThread: java.util.ArrayList servers>;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label10;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.mortbay.jetty.Server) $r3;

        if r4 != null goto label02;

        goto label01;

     label02:
        virtualinvoke r4.<org.mortbay.jetty.Server: void stop()>();

     label03:
        goto label05;

     label04:
        $r6 := @caughtexception;

        staticinvoke <org.mortbay.log.Log: void warn(java.lang.Throwable)>($r6);

     label05:
        staticinvoke <org.mortbay.log.Log: void info(java.lang.String)>("Shutdown hook complete");

     label06:
        staticinvoke <java.lang.Thread: void sleep(long)>(1000L);

     label07:
        goto label09;

     label08:
        $r5 := @caughtexception;

        staticinvoke <org.mortbay.log.Log: void warn(java.lang.Throwable)>($r5);

     label09:
        goto label01;

     label10:
        return;

        catch java.lang.Exception from label02 to label03 with label04;
        catch java.lang.Exception from label06 to label07 with label08;
    }

    void <init>(org.mortbay.jetty.Server$1)
    {
        org.mortbay.jetty.Server$1 r1;
        org.mortbay.jetty.Server$ShutdownHookThread r0;

        r0 := @this: org.mortbay.jetty.Server$ShutdownHookThread;

        r1 := @parameter0: org.mortbay.jetty.Server$1;

        specialinvoke r0.<org.mortbay.jetty.Server$ShutdownHookThread: void <init>()>();

        return;
    }
}
