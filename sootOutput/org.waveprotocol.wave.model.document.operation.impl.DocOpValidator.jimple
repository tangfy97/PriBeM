public final class org.waveprotocol.wave.model.document.operation.impl.DocOpValidator extends java.lang.Object
{
    private static final org.waveprotocol.wave.model.document.operation.impl.DocOpValidator$IllFormed ILL_FORMED;

    private void <init>()
    {
        org.waveprotocol.wave.model.document.operation.impl.DocOpValidator r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.impl.DocOpValidator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult validate(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector, org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema, org.waveprotocol.wave.model.document.operation.DocInitialization)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema r0;
        org.waveprotocol.wave.model.document.operation.DocInitialization r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r4;
        org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument $r3;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        r0 := @parameter1: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema;

        r2 := @parameter2: org.waveprotocol.wave.model.document.operation.DocInitialization;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "Schema constraints required, if not, use DocumentSchema.NO_SCHEMA_CONSTRAINTS");

        $r3 = <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument EMPTY_DOCUMENT>;

        $r4 = staticinvoke <org.waveprotocol.wave.model.document.operation.impl.DocOpValidator: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult validate(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema,org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument,org.waveprotocol.wave.model.document.operation.DocOp)>(r1, r0, $r3, r2);

        return $r4;
    }

    public static boolean isWellFormed(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector, org.waveprotocol.wave.model.document.operation.DocOp)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        org.waveprotocol.wave.model.document.operation.DocOp r0;
        org.waveprotocol.wave.model.document.operation.impl.BufferedDocOpImpl $r2;
        boolean $z0, $z1, $z2;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        r0 := @parameter1: org.waveprotocol.wave.model.document.operation.DocOp;

        $z0 = r0 instanceof org.waveprotocol.wave.model.document.operation.impl.BufferedDocOpImpl;

        if $z0 == 0 goto label1;

        $r2 = (org.waveprotocol.wave.model.document.operation.impl.BufferedDocOpImpl) r0;

        $z2 = staticinvoke <org.waveprotocol.wave.model.document.operation.impl.DocOpValidator: boolean isWellFormed(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.impl.BufferedDocOpImpl)>(r1, $r2);

        return $z2;

     label1:
        $z1 = staticinvoke <org.waveprotocol.wave.model.document.operation.impl.DocOpValidator: boolean isWellFormedRaw(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.DocOp)>(r1, r0);

        return $z1;
    }

    public static boolean isWellFormed(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector, org.waveprotocol.wave.model.document.operation.impl.BufferedDocOpImpl)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        org.waveprotocol.wave.model.document.operation.impl.BufferedDocOpImpl r0;
        boolean $z0, $z1;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        r0 := @parameter1: org.waveprotocol.wave.model.document.operation.impl.BufferedDocOpImpl;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.model.document.operation.impl.BufferedDocOpImpl: boolean isKnownToBeWellFormed()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = staticinvoke <org.waveprotocol.wave.model.document.operation.impl.DocOpValidator: boolean isWellFormedRaw(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.DocOp)>(r1, r0);

        if $z1 == 0 goto label2;

        virtualinvoke r0.<org.waveprotocol.wave.model.document.operation.impl.BufferedDocOpImpl: void markWellFormed()>();

        return 1;

     label2:
        return 0;
    }

    public static boolean isWellFormedRaw(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector, org.waveprotocol.wave.model.document.operation.DocOp)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r0;
        org.waveprotocol.wave.model.document.operation.DocOp r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema $r3;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r4;
        org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument $r2;
        boolean $z0, $z1;

        r0 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        r1 := @parameter1: org.waveprotocol.wave.model.document.operation.DocOp;

        $r3 = <org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema NO_SCHEMA_CONSTRAINTS>;

        $r2 = <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument EMPTY_DOCUMENT>;

        $r4 = staticinvoke <org.waveprotocol.wave.model.document.operation.impl.DocOpValidator: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult validate(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema,org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument,org.waveprotocol.wave.model.document.operation.DocOp)>(r0, $r3, $r2, r1);

        $z0 = virtualinvoke $r4.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: boolean isIllFormed()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public static org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult validate(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector, org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema, org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument, org.waveprotocol.wave.model.document.operation.DocOp)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton $r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult[] $r2;
        org.waveprotocol.wave.model.document.operation.DocOp r4;
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema r13;
        org.waveprotocol.wave.model.document.operation.impl.DocOpValidator$1 $r5;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r6;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3, $r7, $r8, $r9, $r10, $r12;
        org.waveprotocol.wave.model.document.operation.impl.DocOpValidator$IllFormed $r11;
        org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument r1;

        r6 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        r13 := @parameter1: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema;

        r1 := @parameter2: org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument;

        r4 := @parameter3: org.waveprotocol.wave.model.document.operation.DocOp;

        if r13 != null goto label1;

        r13 = <org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema NO_SCHEMA_CONSTRAINTS>;

     label1:
        $r0 = new org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        specialinvoke $r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: void <init>(org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument,org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema)>(r1, r13);

        $r2 = newarray (org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult)[1];

        $r3 = <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult VALID>;

        $r2[0] = $r3;

     label2:
        $r5 = new org.waveprotocol.wave.model.document.operation.impl.DocOpValidator$1;

        specialinvoke $r5.<org.waveprotocol.wave.model.document.operation.impl.DocOpValidator$1: void <init>(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult[],org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>($r2, $r0, r6);

        interfaceinvoke r4.<org.waveprotocol.wave.model.document.operation.DocOp: void apply(org.waveprotocol.wave.model.document.operation.DocOpCursor)>($r5);

     label3:
        goto label5;

     label4:
        $r11 := @caughtexception;

        $r12 = <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult ILL_FORMED>;

        return $r12;

     label5:
        $r7 = $r2[0];

        $r8 = virtualinvoke $r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkFinish(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r6);

        $r9 = virtualinvoke $r7.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult mergeWith(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult)>($r8);

        $r2[0] = $r9;

        $r10 = $r2[0];

        return $r10;

        catch org.waveprotocol.wave.model.document.operation.impl.DocOpValidator$IllFormed from label2 to label3 with label4;
    }

    static org.waveprotocol.wave.model.document.operation.impl.DocOpValidator$IllFormed access$000()
    {
        org.waveprotocol.wave.model.document.operation.impl.DocOpValidator$IllFormed $r0;

        $r0 = <org.waveprotocol.wave.model.document.operation.impl.DocOpValidator: org.waveprotocol.wave.model.document.operation.impl.DocOpValidator$IllFormed ILL_FORMED>;

        return $r0;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.model.document.operation.impl.DocOpValidator$IllFormed $r0;

        $r0 = new org.waveprotocol.wave.model.document.operation.impl.DocOpValidator$IllFormed;

        specialinvoke $r0.<org.waveprotocol.wave.model.document.operation.impl.DocOpValidator$IllFormed: void <init>(java.lang.String)>("Preallocated exception with a meaningless stack trace");

        <org.waveprotocol.wave.model.document.operation.impl.DocOpValidator: org.waveprotocol.wave.model.document.operation.impl.DocOpValidator$IllFormed ILL_FORMED> = $r0;

        return;
    }
}
