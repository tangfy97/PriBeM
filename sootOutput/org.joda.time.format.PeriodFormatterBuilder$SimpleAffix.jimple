class org.joda.time.format.PeriodFormatterBuilder$SimpleAffix extends java.lang.Object implements org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix
{
    private final java.lang.String iText;

    void <init>(java.lang.String)
    {
        java.lang.String r1;
        org.joda.time.format.PeriodFormatterBuilder$SimpleAffix r0;

        r0 := @this: org.joda.time.format.PeriodFormatterBuilder$SimpleAffix;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: java.lang.String iText> = r1;

        return;
    }

    public int calculatePrintedLength(int)
    {
        int $i0, i1;
        java.lang.String $r1;
        org.joda.time.format.PeriodFormatterBuilder$SimpleAffix r0;

        r0 := @this: org.joda.time.format.PeriodFormatterBuilder$SimpleAffix;

        i1 := @parameter0: int;

        $r1 = r0.<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: java.lang.String iText>;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        return $i0;
    }

    public void printTo(java.lang.StringBuffer, int)
    {
        java.lang.StringBuffer r0;
        int i0;
        java.lang.String $r2;
        org.joda.time.format.PeriodFormatterBuilder$SimpleAffix r1;

        r1 := @this: org.joda.time.format.PeriodFormatterBuilder$SimpleAffix;

        r0 := @parameter0: java.lang.StringBuffer;

        i0 := @parameter1: int;

        $r2 = r1.<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: java.lang.String iText>;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        return;
    }

    public void printTo(java.io.Writer, int) throws java.io.IOException
    {
        java.io.Writer r0;
        int i0;
        java.lang.String $r2;
        org.joda.time.format.PeriodFormatterBuilder$SimpleAffix r1;

        r1 := @this: org.joda.time.format.PeriodFormatterBuilder$SimpleAffix;

        r0 := @parameter0: java.io.Writer;

        i0 := @parameter1: int;

        $r2 = r1.<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: java.lang.String iText>;

        virtualinvoke r0.<java.io.Writer: void write(java.lang.String)>($r2);

        return;
    }

    public int parse(java.lang.String, int)
    {
        org.joda.time.format.PeriodFormatterBuilder$SimpleAffix r0;
        int $i0, i1, $i2, $i3, $i5;
        java.lang.String r1, r2;
        boolean $z0;

        r0 := @this: org.joda.time.format.PeriodFormatterBuilder$SimpleAffix;

        r2 := @parameter0: java.lang.String;

        i1 := @parameter1: int;

        r1 = r0.<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: java.lang.String iText>;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        $z0 = virtualinvoke r2.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, i1, r1, 0, $i0);

        if $z0 == 0 goto label1;

        $i3 = i1 + $i0;

        return $i3;

     label1:
        $i5 = (int) -1;

        $i2 = i1 ^ $i5;

        return $i2;
    }

    public int scan(java.lang.String, int)
    {
        char $c4;
        org.joda.time.format.PeriodFormatterBuilder$SimpleAffix r0;
        int $i0, $i1, i2, $i3, i5, $i6, $i8;
        java.lang.String r1, r2;
        boolean $z0;

        r0 := @this: org.joda.time.format.PeriodFormatterBuilder$SimpleAffix;

        r2 := @parameter0: java.lang.String;

        i2 := @parameter1: int;

        r1 = r0.<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: java.lang.String iText>;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        $i1 = virtualinvoke r2.<java.lang.String: int length()>();

        i5 = i2;

     label1:
        if i5 >= $i1 goto label6;

        $z0 = virtualinvoke r2.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, i5, r1, 0, $i0);

        if $z0 == 0 goto label2;

        return i5;

     label2:
        $c4 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i5);

        $i6 = (int) $c4;

        tableswitch($i6)
        {
            case 43: goto label3;
            case 44: goto label3;
            case 45: goto label3;
            case 46: goto label3;
            case 47: goto label4;
            case 48: goto label3;
            case 49: goto label3;
            case 50: goto label3;
            case 51: goto label3;
            case 52: goto label3;
            case 53: goto label3;
            case 54: goto label3;
            case 55: goto label3;
            case 56: goto label3;
            case 57: goto label3;
            default: goto label4;
        };

     label3:
        goto label5;

     label4:
        goto label6;

     label5:
        i5 = i5 + 1;

        goto label1;

     label6:
        $i8 = (int) -1;

        $i3 = i2 ^ $i8;

        return $i3;
    }
}
