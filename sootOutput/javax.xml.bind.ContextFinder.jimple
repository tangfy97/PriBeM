class javax.xml.bind.ContextFinder extends java.lang.Object
{
    private static final java.util.logging.Logger logger;
    private static final java.lang.String PLATFORM_DEFAULT_FACTORY_CLASS;

    void <init>()
    {
        javax.xml.bind.ContextFinder r0;

        r0 := @this: javax.xml.bind.ContextFinder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static void handleInvocationTargetException(java.lang.reflect.InvocationTargetException) throws javax.xml.bind.JAXBException
    {
        java.lang.Throwable $r1;
        java.lang.Error $r2;
        java.lang.RuntimeException $r3;
        javax.xml.bind.JAXBException $r4;
        java.lang.reflect.InvocationTargetException r0;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.reflect.InvocationTargetException;

        $r1 = virtualinvoke r0.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        if $r1 == null goto label3;

        $z0 = $r1 instanceof javax.xml.bind.JAXBException;

        if $z0 == 0 goto label1;

        $r4 = (javax.xml.bind.JAXBException) $r1;

        throw $r4;

     label1:
        $z1 = $r1 instanceof java.lang.RuntimeException;

        if $z1 == 0 goto label2;

        $r3 = (java.lang.RuntimeException) $r1;

        throw $r3;

     label2:
        $z2 = $r1 instanceof java.lang.Error;

        if $z2 == 0 goto label3;

        $r2 = (java.lang.Error) $r1;

        throw $r2;

     label3:
        return;
    }

    private static javax.xml.bind.JAXBException handleClassCastException(java.lang.Class, java.lang.Class)
    {
        java.net.URL $r1, $r5;
        java.lang.Class r0, r3;
        java.lang.ClassLoader $r4;
        java.lang.String $r6;
        javax.xml.bind.JAXBException $r2;

        r3 := @parameter0: java.lang.Class;

        r0 := @parameter1: java.lang.Class;

        $r1 = staticinvoke <javax.xml.bind.ContextFinder: java.net.URL which(java.lang.Class)>(r0);

        $r2 = new javax.xml.bind.JAXBException;

        $r4 = virtualinvoke r3.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r5 = virtualinvoke $r4.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>("javax/xml/bind/JAXBContext.class");

        $r6 = staticinvoke <javax.xml.bind.Messages: java.lang.String format(java.lang.String,java.lang.Object,java.lang.Object)>("JAXBContext.IllegalCast", $r5, $r1);

        specialinvoke $r2.<javax.xml.bind.JAXBException: void <init>(java.lang.String)>($r6);

        return $r2;
    }

    static javax.xml.bind.JAXBContext newInstance(java.lang.String, java.lang.String, java.lang.ClassLoader, java.util.Map) throws javax.xml.bind.JAXBException
    {
        java.lang.RuntimeException $r9;
        javax.xml.bind.JAXBException $r7, $r11;
        java.lang.Exception $r6;
        java.util.Map r4;
        java.lang.Class $r2;
        java.lang.ClassNotFoundException $r10;
        java.lang.String r0, r3, $r8, $r12;
        java.lang.ClassLoader r1;
        javax.xml.bind.JAXBContext $r5;

        r3 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.ClassLoader;

        r4 := @parameter3: java.util.Map;

     label1:
        $r2 = staticinvoke <javax.xml.bind.ContextFinder: java.lang.Class safeLoadClass(java.lang.String,java.lang.ClassLoader)>(r0, r1);

        $r5 = staticinvoke <javax.xml.bind.ContextFinder: javax.xml.bind.JAXBContext newInstance(java.lang.String,java.lang.Class,java.lang.ClassLoader,java.util.Map)>(r3, $r2, r1, r4);

     label2:
        return $r5;

     label3:
        $r10 := @caughtexception;

        $r11 = new javax.xml.bind.JAXBException;

        $r12 = staticinvoke <javax.xml.bind.Messages: java.lang.String format(java.lang.String,java.lang.Object)>("ContextFinder.ProviderNotFound", r0);

        specialinvoke $r11.<javax.xml.bind.JAXBException: void <init>(java.lang.String,java.lang.Throwable)>($r12, $r10);

        throw $r11;

     label4:
        $r9 := @caughtexception;

        throw $r9;

     label5:
        $r6 := @caughtexception;

        $r7 = new javax.xml.bind.JAXBException;

        $r8 = staticinvoke <javax.xml.bind.Messages: java.lang.String format(java.lang.String,java.lang.Object,java.lang.Object)>("ContextFinder.CouldNotInstantiate", r0, $r6);

        specialinvoke $r7.<javax.xml.bind.JAXBException: void <init>(java.lang.String,java.lang.Throwable)>($r8, $r6);

        throw $r7;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
        catch java.lang.RuntimeException from label1 to label2 with label4;
        catch java.lang.Exception from label1 to label2 with label5;
    }

    static javax.xml.bind.JAXBContext newInstance(java.lang.String, java.lang.Class, java.lang.ClassLoader, java.util.Map) throws javax.xml.bind.JAXBException
    {
        java.lang.Throwable $r18, r23;
        java.lang.Object[] $r3, $r12;
        java.lang.NoSuchMethodException $r21;
        java.util.Map r6;
        java.lang.String r4, $r15, $r20;
        java.lang.reflect.Method $r2, $r11;
        javax.xml.bind.JAXBContext $r7;
        boolean $z0;
        java.lang.Class[] $r1, $r10;
        java.lang.RuntimeException $r16;
        javax.xml.bind.JAXBException $r9, $r14, $r19;
        java.lang.Exception $r13;
        java.lang.reflect.InvocationTargetException $r17;
        java.lang.Class r0, $r8;
        java.lang.Object r22;
        java.lang.ClassLoader r5;

        r4 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.Class;

        r5 := @parameter2: java.lang.ClassLoader;

        r6 := @parameter3: java.util.Map;

     label01:
        r22 = null;

     label02:
        $r1 = newarray (java.lang.Class)[3];

        $r1[0] = class "Ljava/lang/String;";

        $r1[1] = class "Ljava/lang/ClassLoader;";

        $r1[2] = class "Ljava/util/Map;";

        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("createContext", $r1);

        $r3 = newarray (java.lang.Object)[3];

        $r3[0] = r4;

        $r3[1] = r5;

        $r3[2] = r6;

        r22 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r3);

     label03:
        goto label05;

     label04:
        $r21 := @caughtexception;

     label05:
        if r22 != null goto label06;

        $r10 = newarray (java.lang.Class)[2];

        $r10[0] = class "Ljava/lang/String;";

        $r10[1] = class "Ljava/lang/ClassLoader;";

        $r11 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("createContext", $r10);

        $r12 = newarray (java.lang.Object)[2];

        $r12[0] = r4;

        $r12[1] = r5;

        r22 = virtualinvoke $r11.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r12);

     label06:
        $z0 = r22 instanceof javax.xml.bind.JAXBContext;

        if $z0 != 0 goto label07;

        $r8 = virtualinvoke r22.<java.lang.Object: java.lang.Class getClass()>();

        $r9 = staticinvoke <javax.xml.bind.ContextFinder: javax.xml.bind.JAXBException handleClassCastException(java.lang.Class,java.lang.Class)>($r8, class "Ljavax/xml/bind/JAXBContext;");

        throw $r9;

     label07:
        $r7 = (javax.xml.bind.JAXBContext) r22;

     label08:
        return $r7;

     label09:
        $r17 := @caughtexception;

        staticinvoke <javax.xml.bind.ContextFinder: void handleInvocationTargetException(java.lang.reflect.InvocationTargetException)>($r17);

        r23 = $r17;

        $r18 = virtualinvoke $r17.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        if $r18 == null goto label10;

        r23 = virtualinvoke $r17.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

     label10:
        $r19 = new javax.xml.bind.JAXBException;

        $r20 = staticinvoke <javax.xml.bind.Messages: java.lang.String format(java.lang.String,java.lang.Object,java.lang.Object)>("ContextFinder.CouldNotInstantiate", r0, r23);

        specialinvoke $r19.<javax.xml.bind.JAXBException: void <init>(java.lang.String,java.lang.Throwable)>($r20, r23);

        throw $r19;

     label11:
        $r16 := @caughtexception;

        throw $r16;

     label12:
        $r13 := @caughtexception;

        $r14 = new javax.xml.bind.JAXBException;

        $r15 = staticinvoke <javax.xml.bind.Messages: java.lang.String format(java.lang.String,java.lang.Object,java.lang.Object)>("ContextFinder.CouldNotInstantiate", r0, $r13);

        specialinvoke $r14.<javax.xml.bind.JAXBException: void <init>(java.lang.String,java.lang.Throwable)>($r15, $r13);

        throw $r14;

        catch java.lang.NoSuchMethodException from label02 to label03 with label04;
        catch java.lang.reflect.InvocationTargetException from label01 to label08 with label09;
        catch java.lang.RuntimeException from label01 to label08 with label11;
        catch java.lang.Exception from label01 to label08 with label12;
    }

    static javax.xml.bind.JAXBContext newInstance(java.lang.Class[], java.util.Map, java.lang.String) throws javax.xml.bind.JAXBException
    {
        java.lang.Object[] $r9;
        java.net.URL $r12;
        java.util.logging.Level $r4, $r11;
        java.lang.Thread $r0;
        java.util.Map r7;
        java.lang.String r2;
        javax.xml.bind.JAXBContext $r8;
        boolean $z0;
        java.lang.Class[] r6;
        java.util.logging.Logger $r5, $r10;
        javax.xml.bind.JAXBException $r14;
        java.lang.Class $r3;
        java.lang.ClassNotFoundException $r13;
        java.lang.ClassLoader $r1;

        r6 := @parameter0: java.lang.Class[];

        r7 := @parameter1: java.util.Map;

        r2 := @parameter2: java.lang.String;

        $r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r1 = virtualinvoke $r0.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

     label1:
        $r3 = staticinvoke <javax.xml.bind.ContextFinder: java.lang.Class safeLoadClass(java.lang.String,java.lang.ClassLoader)>(r2, $r1);

     label2:
        goto label4;

     label3:
        $r13 := @caughtexception;

        $r14 = new javax.xml.bind.JAXBException;

        specialinvoke $r14.<javax.xml.bind.JAXBException: void <init>(java.lang.Throwable)>($r13);

        throw $r14;

     label4:
        $r5 = <javax.xml.bind.ContextFinder: java.util.logging.Logger logger>;

        $r4 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z0 = virtualinvoke $r5.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r4);

        if $z0 == 0 goto label5;

        $r10 = <javax.xml.bind.ContextFinder: java.util.logging.Logger logger>;

        $r11 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $r9 = newarray (java.lang.Object)[2];

        $r9[0] = r2;

        $r12 = staticinvoke <javax.xml.bind.ContextFinder: java.net.URL which(java.lang.Class)>($r3);

        $r9[1] = $r12;

        virtualinvoke $r10.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object[])>($r11, "loaded {0} from {1}", $r9);

     label5:
        $r8 = staticinvoke <javax.xml.bind.ContextFinder: javax.xml.bind.JAXBContext newInstance(java.lang.Class[],java.util.Map,java.lang.Class)>(r6, r7, $r3);

        return $r8;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static javax.xml.bind.JAXBContext newInstance(java.lang.Class[], java.util.Map, java.lang.Class) throws javax.xml.bind.JAXBException
    {
        java.lang.Throwable $r11, r17;
        java.lang.Object[] $r3;
        java.lang.NoSuchMethodException $r15;
        java.util.Map r5;
        java.lang.reflect.Method $r2;
        javax.xml.bind.JAXBContext $r7;
        boolean $z0;
        java.lang.IllegalAccessException $r13;
        java.lang.Class[] $r1, r4;
        javax.xml.bind.JAXBException $r9, $r12, $r14, $r16;
        java.lang.reflect.InvocationTargetException $r10;
        java.lang.Class r0, $r8;
        java.lang.Object $r6;

        r4 := @parameter0: java.lang.Class[];

        r5 := @parameter1: java.util.Map;

        r0 := @parameter2: java.lang.Class;

     label1:
        $r1 = newarray (java.lang.Class)[2];

        $r1[0] = class "[Ljava/lang/Class;";

        $r1[1] = class "Ljava/util/Map;";

        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("createContext", $r1);

     label2:
        goto label4;

     label3:
        $r15 := @caughtexception;

        $r16 = new javax.xml.bind.JAXBException;

        specialinvoke $r16.<javax.xml.bind.JAXBException: void <init>(java.lang.Throwable)>($r15);

        throw $r16;

     label4:
        $r3 = newarray (java.lang.Object)[2];

        $r3[0] = r4;

        $r3[1] = r5;

        $r6 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r3);

        $z0 = $r6 instanceof javax.xml.bind.JAXBContext;

        if $z0 != 0 goto label5;

        $r8 = virtualinvoke $r6.<java.lang.Object: java.lang.Class getClass()>();

        $r9 = staticinvoke <javax.xml.bind.ContextFinder: javax.xml.bind.JAXBException handleClassCastException(java.lang.Class,java.lang.Class)>($r8, class "Ljavax/xml/bind/JAXBContext;");

        throw $r9;

     label5:
        $r7 = (javax.xml.bind.JAXBContext) $r6;

     label6:
        return $r7;

     label7:
        $r13 := @caughtexception;

        $r14 = new javax.xml.bind.JAXBException;

        specialinvoke $r14.<javax.xml.bind.JAXBException: void <init>(java.lang.Throwable)>($r13);

        throw $r14;

     label8:
        $r10 := @caughtexception;

        staticinvoke <javax.xml.bind.ContextFinder: void handleInvocationTargetException(java.lang.reflect.InvocationTargetException)>($r10);

        r17 = $r10;

        $r11 = virtualinvoke $r10.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        if $r11 == null goto label9;

        r17 = virtualinvoke $r10.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

     label9:
        $r12 = new javax.xml.bind.JAXBException;

        specialinvoke $r12.<javax.xml.bind.JAXBException: void <init>(java.lang.Throwable)>(r17);

        throw $r12;

        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
        catch java.lang.IllegalAccessException from label4 to label6 with label7;
        catch java.lang.reflect.InvocationTargetException from label4 to label6 with label8;
    }

    static javax.xml.bind.JAXBContext find(java.lang.String, java.lang.String, java.lang.ClassLoader, java.util.Map) throws javax.xml.bind.JAXBException
    {
        java.lang.Thread $r10;
        java.util.Map r23;
        boolean $z0, $z1, $z2;
        java.util.logging.Logger $r4, $r5, $r13, $r19, $r22, $r31;
        javax.xml.bind.JAXBException $r43, $r47, $r50, $r52;
        java.lang.StringBuilder $r14, $r15, $r16, $r37, $r38, $r39;
        java.lang.ClassLoader $r11, r12;
        java.io.UnsupportedEncodingException $r51;
        java.util.logging.Level $r20;
        java.util.StringTokenizer $r2;
        javax.xml.bind.GetPropertyAction $r6, $r8;
        java.lang.String $r1, r3, $r17, $r21, $r27, $r28, $r35, $r36, $r40, r42, $r44, $r45, $r48, r53, r54;
        javax.xml.bind.JAXBContext $r24, $r29, $r32, $r33, $r34, $r46;
        java.util.Properties $r41;
        java.io.IOException $r49;
        java.io.InputStreamReader $r26;
        java.lang.Class $r0, $r30;
        java.lang.Object $r7, $r9;
        java.io.BufferedReader $r25;
        java.io.InputStream $r18;

        r42 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r12 := @parameter2: java.lang.ClassLoader;

        r23 := @parameter3: java.util.Map;

        $r0 = class "Ljavax/xml/bind/JAXBContext;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = new java.util.StringTokenizer;

        specialinvoke $r2.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r3, ":");

        $z0 = virtualinvoke $r2.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 != 0 goto label01;

        $r47 = new javax.xml.bind.JAXBException;

        $r48 = staticinvoke <javax.xml.bind.Messages: java.lang.String format(java.lang.String)>("ContextFinder.NoPackageInContextPath");

        specialinvoke $r47.<javax.xml.bind.JAXBException: void <init>(java.lang.String)>($r48);

        throw $r47;

     label01:
        $r4 = <javax.xml.bind.ContextFinder: java.util.logging.Logger logger>;

        virtualinvoke $r4.<java.util.logging.Logger: void fine(java.lang.String)>("Searching jaxb.properties");

     label02:
        $z1 = virtualinvoke $r2.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z1 == 0 goto label05;

        $r35 = virtualinvoke $r2.<java.util.StringTokenizer: java.lang.String nextToken(java.lang.String)>(":");

        $r36 = virtualinvoke $r35.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/jaxb.properties");

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        $r41 = staticinvoke <javax.xml.bind.ContextFinder: java.util.Properties loadJAXBProperties(java.lang.ClassLoader,java.lang.String)>(r12, $r40);

        if $r41 == null goto label04;

        $z2 = virtualinvoke $r41.<java.util.Properties: boolean containsKey(java.lang.Object)>(r42);

        if $z2 == 0 goto label03;

        $r45 = virtualinvoke $r41.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r42);

        $r46 = staticinvoke <javax.xml.bind.ContextFinder: javax.xml.bind.JAXBContext newInstance(java.lang.String,java.lang.String,java.lang.ClassLoader,java.util.Map)>(r3, $r45, r12, r23);

        return $r46;

     label03:
        $r43 = new javax.xml.bind.JAXBException;

        $r44 = staticinvoke <javax.xml.bind.Messages: java.lang.String format(java.lang.String,java.lang.Object,java.lang.Object)>("ContextFinder.MissingProperty", $r36, r42);

        specialinvoke $r43.<javax.xml.bind.JAXBException: void <init>(java.lang.String)>($r44);

        throw $r43;

     label04:
        goto label02;

     label05:
        $r5 = <javax.xml.bind.ContextFinder: java.util.logging.Logger logger>;

        virtualinvoke $r5.<java.util.logging.Logger: void fine(java.lang.String)>("Searching the system property");

        $r6 = new javax.xml.bind.GetPropertyAction;

        specialinvoke $r6.<javax.xml.bind.GetPropertyAction: void <init>(java.lang.String)>("javax.xml.bind.context.factory");

        $r7 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r6);

        r53 = (java.lang.String) $r7;

        if r53 == null goto label06;

        $r34 = staticinvoke <javax.xml.bind.ContextFinder: javax.xml.bind.JAXBContext newInstance(java.lang.String,java.lang.String,java.lang.ClassLoader,java.util.Map)>(r3, r53, r12, r23);

        return $r34;

     label06:
        $r8 = new javax.xml.bind.GetPropertyAction;

        specialinvoke $r8.<javax.xml.bind.GetPropertyAction: void <init>(java.lang.String)>($r1);

        $r9 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r8);

        r54 = (java.lang.String) $r9;

        if r54 == null goto label07;

        $r33 = staticinvoke <javax.xml.bind.ContextFinder: javax.xml.bind.JAXBContext newInstance(java.lang.String,java.lang.String,java.lang.ClassLoader,java.util.Map)>(r3, r54, r12, r23);

        return $r33;

     label07:
        $r10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r11 = virtualinvoke $r10.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        if $r11 != r12 goto label08;

        $r30 = staticinvoke <javax.xml.bind.ContextFinder: java.lang.Class lookupUsingOSGiServiceLoader(java.lang.String)>("javax.xml.bind.JAXBContext");

        if $r30 == null goto label08;

        $r31 = <javax.xml.bind.ContextFinder: java.util.logging.Logger logger>;

        virtualinvoke $r31.<java.util.logging.Logger: void fine(java.lang.String)>("OSGi environment detected");

        $r32 = staticinvoke <javax.xml.bind.ContextFinder: javax.xml.bind.JAXBContext newInstance(java.lang.String,java.lang.Class,java.lang.ClassLoader,java.util.Map)>(r3, $r30, r12, r23);

        return $r32;

     label08:
        $r13 = <javax.xml.bind.ContextFinder: java.util.logging.Logger logger>;

        virtualinvoke $r13.<java.util.logging.Logger: void fine(java.lang.String)>("Searching META-INF/services");

     label09:
        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("META-INF/services/");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $r18 = virtualinvoke r12.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>($r17);

        if $r18 == null goto label11;

        $r25 = new java.io.BufferedReader;

        $r26 = new java.io.InputStreamReader;

        specialinvoke $r26.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r18, "UTF-8");

        specialinvoke $r25.<java.io.BufferedReader: void <init>(java.io.Reader)>($r26);

        $r27 = virtualinvoke $r25.<java.io.BufferedReader: java.lang.String readLine()>();

        $r28 = virtualinvoke $r27.<java.lang.String: java.lang.String trim()>();

        virtualinvoke $r25.<java.io.BufferedReader: void close()>();

        $r29 = staticinvoke <javax.xml.bind.ContextFinder: javax.xml.bind.JAXBContext newInstance(java.lang.String,java.lang.String,java.lang.ClassLoader,java.util.Map)>(r3, $r28, r12, r23);

     label10:
        return $r29;

     label11:
        $r19 = <javax.xml.bind.ContextFinder: java.util.logging.Logger logger>;

        $r20 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $r21 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r19.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object)>($r20, "Unable to load:{0}", $r21);

     label12:
        goto label15;

     label13:
        $r51 := @caughtexception;

        $r52 = new javax.xml.bind.JAXBException;

        specialinvoke $r52.<javax.xml.bind.JAXBException: void <init>(java.lang.Throwable)>($r51);

        throw $r52;

     label14:
        $r49 := @caughtexception;

        $r50 = new javax.xml.bind.JAXBException;

        specialinvoke $r50.<javax.xml.bind.JAXBException: void <init>(java.lang.Throwable)>($r49);

        throw $r50;

     label15:
        $r22 = <javax.xml.bind.ContextFinder: java.util.logging.Logger logger>;

        virtualinvoke $r22.<java.util.logging.Logger: void fine(java.lang.String)>("Trying to create the platform default provider");

        $r24 = staticinvoke <javax.xml.bind.ContextFinder: javax.xml.bind.JAXBContext newInstance(java.lang.String,java.lang.String,java.lang.ClassLoader,java.util.Map)>(r3, "com.sun.xml.internal.bind.v2.ContextFactory", r12, r23);

        return $r24;

        catch java.io.UnsupportedEncodingException from label09 to label10 with label13;
        catch java.io.UnsupportedEncodingException from label11 to label12 with label13;
        catch java.io.IOException from label09 to label10 with label14;
        catch java.io.IOException from label11 to label12 with label14;
    }

    static javax.xml.bind.JAXBContext find(java.lang.Class[], java.util.Map) throws javax.xml.bind.JAXBException
    {
        java.lang.Thread $r18;
        java.util.Map r23;
        java.lang.StringBuilder $r15, $r16, $r46, $r47, $r48;
        java.lang.ClassLoader $r19, r65;
        javax.xml.bind.GetPropertyAction $r5, $r10;
        java.lang.String $r1, $r17, $r30, $r31, $r44, $r45, $r49, $r55, $r56, $r57, r66, r67;
        java.util.Properties $r52;
        java.lang.Class[] r2;
        java.io.IOException $r60;
        java.io.InputStreamReader $r28;
        java.io.BufferedReader $r27;
        java.net.URL r68;
        boolean $z0;
        javax.xml.bind.ContextFinder$1 $r41;
        java.util.logging.Logger $r4, $r7, $r9, $r12, $r14, $r21, $r22, $r26, $r33, $r36, $r39, $r51, $r53, $r59;
        javax.xml.bind.JAXBException $r54, $r61, $r63;
        java.io.UnsupportedEncodingException $r62;
        java.util.logging.Level $r3, $r8, $r20, $r25, $r35, $r38, $r50;
        int i0, i1;
        javax.xml.bind.JAXBContext $r24, $r32, $r34, $r37, $r40, $r58;
        java.lang.Package $r43;
        java.lang.Class $r0, $r13, r64;
        java.lang.Object $r6, $r11, $r42;
        java.io.InputStream $r29;

        r2 := @parameter0: java.lang.Class[];

        r23 := @parameter1: java.util.Map;

        $r0 = class "Ljavax/xml/bind/JAXBContext;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        i0 = lengthof r2;

        i1 = 0;

     label01:
        if i1 >= i0 goto label06;

        r64 = r2[i1];

        $r41 = new javax.xml.bind.ContextFinder$1;

        specialinvoke $r41.<javax.xml.bind.ContextFinder$1: void <init>(java.lang.Class)>(r64);

        $r42 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r41);

        r65 = (java.lang.ClassLoader) $r42;

        $r43 = virtualinvoke r64.<java.lang.Class: java.lang.Package getPackage()>();

        if $r43 != null goto label02;

        goto label05;

     label02:
        $r44 = virtualinvoke $r43.<java.lang.Package: java.lang.String getName()>();

        $r45 = virtualinvoke $r44.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        $r46 = new java.lang.StringBuilder;

        specialinvoke $r46.<java.lang.StringBuilder: void <init>()>();

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r45);

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/jaxb.properties");

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.String toString()>();

        $r51 = <javax.xml.bind.ContextFinder: java.util.logging.Logger logger>;

        $r50 = <java.util.logging.Level: java.util.logging.Level FINE>;

        virtualinvoke $r51.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object)>($r50, "Trying to locate {0}", $r49);

        $r52 = staticinvoke <javax.xml.bind.ContextFinder: java.util.Properties loadJAXBProperties(java.lang.ClassLoader,java.lang.String)>(r65, $r49);

        if $r52 != null goto label03;

        $r59 = <javax.xml.bind.ContextFinder: java.util.logging.Logger logger>;

        virtualinvoke $r59.<java.util.logging.Logger: void fine(java.lang.String)>("  not found");

        goto label05;

     label03:
        $r53 = <javax.xml.bind.ContextFinder: java.util.logging.Logger logger>;

        virtualinvoke $r53.<java.util.logging.Logger: void fine(java.lang.String)>("  found");

        $z0 = virtualinvoke $r52.<java.util.Properties: boolean containsKey(java.lang.Object)>("javax.xml.bind.context.factory");

        if $z0 == 0 goto label04;

        $r56 = virtualinvoke $r52.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("javax.xml.bind.context.factory");

        $r57 = virtualinvoke $r56.<java.lang.String: java.lang.String trim()>();

        $r58 = staticinvoke <javax.xml.bind.ContextFinder: javax.xml.bind.JAXBContext newInstance(java.lang.Class[],java.util.Map,java.lang.String)>(r2, r23, $r57);

        return $r58;

     label04:
        $r54 = new javax.xml.bind.JAXBException;

        $r55 = staticinvoke <javax.xml.bind.Messages: java.lang.String format(java.lang.String,java.lang.Object,java.lang.Object)>("ContextFinder.MissingProperty", $r45, "javax.xml.bind.context.factory");

        specialinvoke $r54.<javax.xml.bind.JAXBException: void <init>(java.lang.String)>($r55);

        throw $r54;

     label05:
        i1 = i1 + 1;

        goto label01;

     label06:
        $r4 = <javax.xml.bind.ContextFinder: java.util.logging.Logger logger>;

        $r3 = <java.util.logging.Level: java.util.logging.Level FINE>;

        virtualinvoke $r4.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object)>($r3, "Checking system property {0}", "javax.xml.bind.context.factory");

        $r5 = new javax.xml.bind.GetPropertyAction;

        specialinvoke $r5.<javax.xml.bind.GetPropertyAction: void <init>(java.lang.String)>("javax.xml.bind.context.factory");

        $r6 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r5);

        r66 = (java.lang.String) $r6;

        if r66 == null goto label07;

        $r39 = <javax.xml.bind.ContextFinder: java.util.logging.Logger logger>;

        $r38 = <java.util.logging.Level: java.util.logging.Level FINE>;

        virtualinvoke $r39.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object)>($r38, "  found {0}", r66);

        $r40 = staticinvoke <javax.xml.bind.ContextFinder: javax.xml.bind.JAXBContext newInstance(java.lang.Class[],java.util.Map,java.lang.String)>(r2, r23, r66);

        return $r40;

     label07:
        $r7 = <javax.xml.bind.ContextFinder: java.util.logging.Logger logger>;

        virtualinvoke $r7.<java.util.logging.Logger: void fine(java.lang.String)>("  not found");

        $r9 = <javax.xml.bind.ContextFinder: java.util.logging.Logger logger>;

        $r8 = <java.util.logging.Level: java.util.logging.Level FINE>;

        virtualinvoke $r9.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object)>($r8, "Checking system property {0}", $r1);

        $r10 = new javax.xml.bind.GetPropertyAction;

        specialinvoke $r10.<javax.xml.bind.GetPropertyAction: void <init>(java.lang.String)>($r1);

        $r11 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r10);

        r67 = (java.lang.String) $r11;

        if r67 == null goto label08;

        $r36 = <javax.xml.bind.ContextFinder: java.util.logging.Logger logger>;

        $r35 = <java.util.logging.Level: java.util.logging.Level FINE>;

        virtualinvoke $r36.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object)>($r35, "  found {0}", r67);

        $r37 = staticinvoke <javax.xml.bind.ContextFinder: javax.xml.bind.JAXBContext newInstance(java.lang.Class[],java.util.Map,java.lang.String)>(r2, r23, r67);

        return $r37;

     label08:
        $r12 = <javax.xml.bind.ContextFinder: java.util.logging.Logger logger>;

        virtualinvoke $r12.<java.util.logging.Logger: void fine(java.lang.String)>("  not found");

        $r13 = staticinvoke <javax.xml.bind.ContextFinder: java.lang.Class lookupUsingOSGiServiceLoader(java.lang.String)>("javax.xml.bind.JAXBContext");

        if $r13 == null goto label09;

        $r33 = <javax.xml.bind.ContextFinder: java.util.logging.Logger logger>;

        virtualinvoke $r33.<java.util.logging.Logger: void fine(java.lang.String)>("OSGi environment detected");

        $r34 = staticinvoke <javax.xml.bind.ContextFinder: javax.xml.bind.JAXBContext newInstance(java.lang.Class[],java.util.Map,java.lang.Class)>(r2, r23, $r13);

        return $r34;

     label09:
        $r14 = <javax.xml.bind.ContextFinder: java.util.logging.Logger logger>;

        virtualinvoke $r14.<java.util.logging.Logger: void fine(java.lang.String)>("Checking META-INF/services");

     label10:
        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>(java.lang.String)>("META-INF/services/");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $r18 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r19 = virtualinvoke $r18.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        if $r19 != null goto label11;

        r68 = staticinvoke <java.lang.ClassLoader: java.net.URL getSystemResource(java.lang.String)>($r17);

        goto label12;

     label11:
        r68 = virtualinvoke $r19.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>($r17);

     label12:
        if r68 == null goto label14;

        $r26 = <javax.xml.bind.ContextFinder: java.util.logging.Logger logger>;

        $r25 = <java.util.logging.Level: java.util.logging.Level FINE>;

        virtualinvoke $r26.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object)>($r25, "Reading {0}", r68);

        $r27 = new java.io.BufferedReader;

        $r28 = new java.io.InputStreamReader;

        $r29 = virtualinvoke r68.<java.net.URL: java.io.InputStream openStream()>();

        specialinvoke $r28.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r29, "UTF-8");

        specialinvoke $r27.<java.io.BufferedReader: void <init>(java.io.Reader)>($r28);

        $r30 = virtualinvoke $r27.<java.io.BufferedReader: java.lang.String readLine()>();

        $r31 = virtualinvoke $r30.<java.lang.String: java.lang.String trim()>();

        $r32 = staticinvoke <javax.xml.bind.ContextFinder: javax.xml.bind.JAXBContext newInstance(java.lang.Class[],java.util.Map,java.lang.String)>(r2, r23, $r31);

     label13:
        return $r32;

     label14:
        $r21 = <javax.xml.bind.ContextFinder: java.util.logging.Logger logger>;

        $r20 = <java.util.logging.Level: java.util.logging.Level FINE>;

        virtualinvoke $r21.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object)>($r20, "Unable to find: {0}", $r17);

     label15:
        goto label18;

     label16:
        $r62 := @caughtexception;

        $r63 = new javax.xml.bind.JAXBException;

        specialinvoke $r63.<javax.xml.bind.JAXBException: void <init>(java.lang.Throwable)>($r62);

        throw $r63;

     label17:
        $r60 := @caughtexception;

        $r61 = new javax.xml.bind.JAXBException;

        specialinvoke $r61.<javax.xml.bind.JAXBException: void <init>(java.lang.Throwable)>($r60);

        throw $r61;

     label18:
        $r22 = <javax.xml.bind.ContextFinder: java.util.logging.Logger logger>;

        virtualinvoke $r22.<java.util.logging.Logger: void fine(java.lang.String)>("Trying to create the platform default provider");

        $r24 = staticinvoke <javax.xml.bind.ContextFinder: javax.xml.bind.JAXBContext newInstance(java.lang.Class[],java.util.Map,java.lang.String)>(r2, r23, "com.sun.xml.internal.bind.v2.ContextFactory");

        return $r24;

        catch java.io.UnsupportedEncodingException from label10 to label13 with label16;
        catch java.io.UnsupportedEncodingException from label14 to label15 with label16;
        catch java.io.IOException from label10 to label13 with label17;
        catch java.io.IOException from label14 to label15 with label17;
    }

    private static java.lang.Class lookupUsingOSGiServiceLoader(java.lang.String)
    {
        java.lang.Object[] $r5;
        java.util.Iterator $r8;
        java.lang.Class[] $r3;
        java.util.logging.Logger $r12;
        java.lang.Iterable $r7;
        java.lang.Exception $r10;
        java.util.logging.Level $r11;
        java.lang.Class $r1, $r2, $r13;
        java.lang.Object $r6, $r9;
        java.lang.String r0;
        java.lang.reflect.Method $r4;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("org.glassfish.hk2.osgiresourcelocator.ServiceLoader");

        $r3 = newarray (java.lang.Class)[1];

        $r3[0] = class "Ljava/lang/Class;";

        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("lookupProviderClasses", $r3);

        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = $r1;

        $r6 = virtualinvoke $r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r5);

        $r7 = (java.lang.Iterable) $r6;

        $r8 = interfaceinvoke $r7.<java.lang.Iterable: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        $r13 = (java.lang.Class) $r9;

        goto label3;

     label2:
        $r13 = null;

     label3:
        return $r13;

     label4:
        $r10 := @caughtexception;

        $r12 = <javax.xml.bind.ContextFinder: java.util.logging.Logger logger>;

        $r11 = <java.util.logging.Level: java.util.logging.Level FINE>;

        virtualinvoke $r12.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object)>($r11, "Unable to find from OSGi: {0}", r0);

        return null;

        catch java.lang.Exception from label1 to label3 with label4;
    }

    private static java.util.Properties loadJAXBProperties(java.lang.ClassLoader, java.lang.String) throws javax.xml.bind.JAXBException
    {
        java.net.URL r16;
        java.util.logging.Level $r2, $r9;
        java.lang.String r1, $r12, $r14;
        java.util.Properties $r4, r15;
        java.io.IOException $r6;
        java.util.logging.Logger $r3, $r8;
        javax.xml.bind.JAXBException $r13;
        java.lang.StringBuilder $r7, $r10, $r11;
        java.lang.ClassLoader r0;
        java.io.InputStream $r5;

        r0 := @parameter0: java.lang.ClassLoader;

        r1 := @parameter1: java.lang.String;

        r15 = null;

     label1:
        if r0 != null goto label2;

        r16 = staticinvoke <java.lang.ClassLoader: java.net.URL getSystemResource(java.lang.String)>(r1);

        goto label3;

     label2:
        r16 = virtualinvoke r0.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>(r1);

     label3:
        if r16 == null goto label4;

        $r3 = <javax.xml.bind.ContextFinder: java.util.logging.Logger logger>;

        $r2 = <java.util.logging.Level: java.util.logging.Level FINE>;

        virtualinvoke $r3.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object)>($r2, "loading props from {0}", r16);

        $r4 = new java.util.Properties;

        specialinvoke $r4.<java.util.Properties: void <init>()>();

        r15 = $r4;

        $r5 = virtualinvoke r16.<java.net.URL: java.io.InputStream openStream()>();

        virtualinvoke $r4.<java.util.Properties: void load(java.io.InputStream)>($r5);

        virtualinvoke $r5.<java.io.InputStream: void close()>();

     label4:
        goto label6;

     label5:
        $r6 := @caughtexception;

        $r8 = <javax.xml.bind.ContextFinder: java.util.logging.Logger logger>;

        $r9 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to load ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r8.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r9, $r12, $r6);

        $r13 = new javax.xml.bind.JAXBException;

        $r14 = virtualinvoke $r6.<java.io.IOException: java.lang.String toString()>();

        specialinvoke $r13.<javax.xml.bind.JAXBException: void <init>(java.lang.String,java.lang.Throwable)>($r14, $r6);

        throw $r13;

     label6:
        return r15;

        catch java.io.IOException from label1 to label4 with label5;
    }

    static java.net.URL which(java.lang.Class, java.lang.ClassLoader)
    {
        java.net.URL $r7;
        java.lang.StringBuilder $r0, $r4, $r5;
        java.lang.Class r1;
        java.lang.String $r2, $r3, $r6;
        java.lang.ClassLoader r8;

        r1 := @parameter0: java.lang.Class;

        r8 := @parameter1: java.lang.ClassLoader;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".class");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        if r8 != null goto label1;

        r8 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

     label1:
        $r7 = virtualinvoke r8.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>($r6);

        return $r7;
    }

    static java.net.URL which(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.ClassLoader $r1;
        java.net.URL $r2;

        r0 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r2 = staticinvoke <javax.xml.bind.ContextFinder: java.net.URL which(java.lang.Class,java.lang.ClassLoader)>(r0, $r1);

        return $r2;
    }

    private static java.lang.Class safeLoadClass(java.lang.String, java.lang.ClassLoader) throws java.lang.ClassNotFoundException
    {
        java.util.logging.Logger $r2;
        java.lang.SecurityManager $r3;
        java.util.logging.Level $r1;
        int $i0, $i2;
        java.lang.Class $r5, $r6, $r10;
        java.lang.SecurityException $r8;
        java.lang.String r0, $r7, $r9;
        java.lang.ClassLoader r4;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.ClassLoader;

        $r2 = <javax.xml.bind.ContextFinder: java.util.logging.Logger logger>;

        $r1 = <java.util.logging.Level: java.util.logging.Level FINE>;

        virtualinvoke $r2.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object)>($r1, "Trying to load {0}", r0);

     label1:
        $r3 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        if $r3 == null goto label2;

        $i0 = virtualinvoke r0.<java.lang.String: int lastIndexOf(int)>(46);

        $i2 = (int) -1;

        if $i0 == $i2 goto label2;

        $r7 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        virtualinvoke $r3.<java.lang.SecurityManager: void checkPackageAccess(java.lang.String)>($r7);

     label2:
        if r4 != null goto label4;

        $r6 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label3:
        return $r6;

     label4:
        $r5 = virtualinvoke r4.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r0);

     label5:
        return $r5;

     label6:
        $r8 := @caughtexception;

        $r9 = "com.sun.xml.internal.bind.v2.ContextFactory";

        $z0 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label7;

        $r10 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        return $r10;

     label7:
        throw $r8;

        catch java.lang.SecurityException from label1 to label3 with label6;
        catch java.lang.SecurityException from label4 to label5 with label6;
    }

    static void <clinit>()
    {
        java.lang.Throwable $r9;
        java.util.logging.Logger $r0, $r3, $r5, $r8;
        java.util.logging.Level $r4, $r7;
        javax.xml.bind.GetPropertyAction $r1;
        java.lang.Object $r2;
        java.util.logging.ConsoleHandler $r6;

        <javax.xml.bind.ContextFinder: java.lang.String PLATFORM_DEFAULT_FACTORY_CLASS> = "com.sun.xml.internal.bind.v2.ContextFactory";

        $r0 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>("javax.xml.bind");

        <javax.xml.bind.ContextFinder: java.util.logging.Logger logger> = $r0;

     label1:
        $r1 = new javax.xml.bind.GetPropertyAction;

        specialinvoke $r1.<javax.xml.bind.GetPropertyAction: void <init>(java.lang.String)>("jaxb.debug");

        $r2 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r1);

        if $r2 == null goto label2;

        $r3 = <javax.xml.bind.ContextFinder: java.util.logging.Logger logger>;

        virtualinvoke $r3.<java.util.logging.Logger: void setUseParentHandlers(boolean)>(0);

        $r5 = <javax.xml.bind.ContextFinder: java.util.logging.Logger logger>;

        $r4 = <java.util.logging.Level: java.util.logging.Level ALL>;

        virtualinvoke $r5.<java.util.logging.Logger: void setLevel(java.util.logging.Level)>($r4);

        $r6 = new java.util.logging.ConsoleHandler;

        specialinvoke $r6.<java.util.logging.ConsoleHandler: void <init>()>();

        $r7 = <java.util.logging.Level: java.util.logging.Level ALL>;

        virtualinvoke $r6.<java.util.logging.ConsoleHandler: void setLevel(java.util.logging.Level)>($r7);

        $r8 = <javax.xml.bind.ContextFinder: java.util.logging.Logger logger>;

        virtualinvoke $r8.<java.util.logging.Logger: void addHandler(java.util.logging.Handler)>($r6);

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
