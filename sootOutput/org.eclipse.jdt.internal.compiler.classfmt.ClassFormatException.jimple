public class org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException extends java.lang.Exception
{
    public static final int ErrBadMagic;
    public static final int ErrBadMinorVersion;
    public static final int ErrBadMajorVersion;
    public static final int ErrBadConstantClass;
    public static final int ErrBadConstantString;
    public static final int ErrBadConstantNameAndType;
    public static final int ErrBadConstantFieldRef;
    public static final int ErrBadConstantMethodRef;
    public static final int ErrBadConstantInterfaceMethodRef;
    public static final int ErrBadConstantPoolIndex;
    public static final int ErrBadSuperclassName;
    public static final int ErrInterfaceCannotBeFinal;
    public static final int ErrInterfaceMustBeAbstract;
    public static final int ErrBadModifiers;
    public static final int ErrClassCannotBeAbstractFinal;
    public static final int ErrBadClassname;
    public static final int ErrBadFieldInfo;
    public static final int ErrBadMethodInfo;
    public static final int ErrEmptyConstantPool;
    public static final int ErrMalformedUtf8;
    public static final int ErrUnknownConstantTag;
    public static final int ErrTruncatedInput;
    public static final int ErrMethodMustBeAbstract;
    public static final int ErrMalformedAttribute;
    public static final int ErrBadInterface;
    public static final int ErrInterfaceMustSubclassObject;
    public static final int ErrIncorrectInterfaceMethods;
    public static final int ErrInvalidMethodName;
    public static final int ErrInvalidMethodSignature;
    private static final long serialVersionUID;
    private int errorCode;
    private int bufferPosition;
    private java.lang.RuntimeException nestedException;
    private char[] fileName;

    public void <init>(java.lang.RuntimeException, char[])
    {
        char[] r2;
        java.lang.RuntimeException r1;
        org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException;

        r1 := @parameter0: java.lang.RuntimeException;

        r2 := @parameter1: char[];

        specialinvoke r0.<java.lang.Exception: void <init>()>();

        r0.<org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException: java.lang.RuntimeException nestedException> = r1;

        r0.<org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException: char[] fileName> = r2;

        return;
    }

    public void <init>(int)
    {
        int i0;
        org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Exception: void <init>()>();

        r0.<org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException: int errorCode> = i0;

        return;
    }

    public void <init>(int, int)
    {
        int i0, i1;
        org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Exception: void <init>()>();

        r0.<org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException: int errorCode> = i0;

        r0.<org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException: int bufferPosition> = i1;

        return;
    }

    public int getErrorCode()
    {
        int $i0;
        org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException: int errorCode>;

        return $i0;
    }

    public int getBufferPosition()
    {
        int $i0;
        org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException: int bufferPosition>;

        return $i0;
    }

    public java.lang.Throwable getException()
    {
        java.lang.RuntimeException $r1;
        org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException: java.lang.RuntimeException nestedException>;

        return $r1;
    }

    public void printStackTrace()
    {
        java.io.PrintStream $r1;
        org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException;

        $r1 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException: void printStackTrace(java.io.PrintStream)>($r1);

        return;
    }

    public void printStackTrace(java.io.PrintStream)
    {
        java.io.PrintStream r0;
        java.lang.Throwable $r2, $r5;
        org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException r1;
        char[] $r3, $r4;

        r1 := @this: org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException;

        r0 := @parameter0: java.io.PrintStream;

        entermonitor r0;

     label1:
        specialinvoke r1.<java.lang.Exception: void printStackTrace(java.io.PrintStream)>(r0);

        $r2 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException: java.lang.Throwable getException()>();

        if $r2 == null goto label4;

        $r3 = r1.<org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException: char[] fileName>;

        if $r3 == null goto label2;

        virtualinvoke r0.<java.io.PrintStream: void print(java.lang.String)>("Caused in ");

        $r4 = r1.<org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException: char[] fileName>;

        virtualinvoke r0.<java.io.PrintStream: void print(char[])>($r4);

        virtualinvoke r0.<java.io.PrintStream: void print(java.lang.String)>(" by: ");

        goto label3;

     label2:
        virtualinvoke r0.<java.io.PrintStream: void print(java.lang.String)>("Caused by: ");

     label3:
        virtualinvoke $r2.<java.lang.Throwable: void printStackTrace(java.io.PrintStream)>(r0);

     label4:
        exitmonitor r0;

     label5:
        goto label8;

     label6:
        $r5 := @caughtexception;

        exitmonitor r0;

     label7:
        throw $r5;

     label8:
        return;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public void printStackTrace(java.io.PrintWriter)
    {
        java.io.PrintWriter r0;
        java.lang.Throwable $r2, $r5;
        org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException r1;
        char[] $r3, $r4;

        r1 := @this: org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException;

        r0 := @parameter0: java.io.PrintWriter;

        entermonitor r0;

     label1:
        specialinvoke r1.<java.lang.Exception: void printStackTrace(java.io.PrintWriter)>(r0);

        $r2 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException: java.lang.Throwable getException()>();

        if $r2 == null goto label4;

        $r3 = r1.<org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException: char[] fileName>;

        if $r3 == null goto label2;

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>("Caused in ");

        $r4 = r1.<org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException: char[] fileName>;

        virtualinvoke r0.<java.io.PrintWriter: void print(char[])>($r4);

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>(" by: ");

        goto label3;

     label2:
        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>("Caused by: ");

     label3:
        virtualinvoke $r2.<java.lang.Throwable: void printStackTrace(java.io.PrintWriter)>(r0);

     label4:
        exitmonitor r0;

     label5:
        goto label8;

     label6:
        $r5 := @caughtexception;

        exitmonitor r0;

     label7:
        throw $r5;

     label8:
        return;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public static void <clinit>()
    {
        <org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException: long serialVersionUID> = 6667458511042774540L;

        <org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException: int ErrInvalidMethodSignature> = 28;

        <org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException: int ErrInvalidMethodName> = 27;

        <org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException: int ErrIncorrectInterfaceMethods> = 26;

        <org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException: int ErrInterfaceMustSubclassObject> = 25;

        <org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException: int ErrBadInterface> = 24;

        <org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException: int ErrMalformedAttribute> = 23;

        <org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException: int ErrMethodMustBeAbstract> = 22;

        <org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException: int ErrTruncatedInput> = 21;

        <org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException: int ErrUnknownConstantTag> = 20;

        <org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException: int ErrMalformedUtf8> = 19;

        <org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException: int ErrEmptyConstantPool> = 18;

        <org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException: int ErrBadMethodInfo> = 17;

        <org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException: int ErrBadFieldInfo> = 17;

        <org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException: int ErrBadClassname> = 16;

        <org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException: int ErrClassCannotBeAbstractFinal> = 15;

        <org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException: int ErrBadModifiers> = 14;

        <org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException: int ErrInterfaceMustBeAbstract> = 13;

        <org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException: int ErrInterfaceCannotBeFinal> = 12;

        <org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException: int ErrBadSuperclassName> = 11;

        <org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException: int ErrBadConstantPoolIndex> = 10;

        <org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException: int ErrBadConstantInterfaceMethodRef> = 9;

        <org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException: int ErrBadConstantMethodRef> = 8;

        <org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException: int ErrBadConstantFieldRef> = 7;

        <org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException: int ErrBadConstantNameAndType> = 6;

        <org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException: int ErrBadConstantString> = 5;

        <org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException: int ErrBadConstantClass> = 4;

        <org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException: int ErrBadMajorVersion> = 3;

        <org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException: int ErrBadMinorVersion> = 2;

        <org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException: int ErrBadMagic> = 1;

        return;
    }
}
