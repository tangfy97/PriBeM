public interface  com.sun.xml.bind.v2.model.nav.Navigator extends java.lang.Object
{
    public static final com.sun.xml.bind.v2.model.nav.ReflectionNavigator REFLECTION;

    public abstract java.lang.Object getSuperClass(java.lang.Object);

    public abstract java.lang.Object getBaseClass(java.lang.Object, java.lang.Object);

    public abstract java.lang.String getClassName(java.lang.Object);

    public abstract java.lang.String getTypeName(java.lang.Object);

    public abstract java.lang.String getClassShortName(java.lang.Object);

    public abstract java.util.Collection getDeclaredFields(java.lang.Object);

    public abstract java.lang.Object getDeclaredField(java.lang.Object, java.lang.String);

    public abstract java.util.Collection getDeclaredMethods(java.lang.Object);

    public abstract java.lang.Object getDeclaringClassForField(java.lang.Object);

    public abstract java.lang.Object getDeclaringClassForMethod(java.lang.Object);

    public abstract java.lang.Object getFieldType(java.lang.Object);

    public abstract java.lang.String getFieldName(java.lang.Object);

    public abstract java.lang.String getMethodName(java.lang.Object);

    public abstract java.lang.Object getReturnType(java.lang.Object);

    public abstract java.lang.Object[] getMethodParameters(java.lang.Object);

    public abstract boolean isStaticMethod(java.lang.Object);

    public abstract boolean isSubClassOf(java.lang.Object, java.lang.Object);

    public abstract java.lang.Object ref(java.lang.Class);

    public abstract java.lang.Object use(java.lang.Object);

    public abstract java.lang.Object asDecl(java.lang.Object);

    public abstract java.lang.Object asDecl(java.lang.Class);

    public abstract boolean isArray(java.lang.Object);

    public abstract boolean isArrayButNotByteArray(java.lang.Object);

    public abstract java.lang.Object getComponentType(java.lang.Object);

    public abstract java.lang.Object getTypeArgument(java.lang.Object, int);

    public abstract boolean isParameterizedType(java.lang.Object);

    public abstract boolean isPrimitive(java.lang.Object);

    public abstract java.lang.Object getPrimitive(java.lang.Class);

    public abstract com.sun.xml.bind.v2.runtime.Location getClassLocation(java.lang.Object);

    public abstract com.sun.xml.bind.v2.runtime.Location getFieldLocation(java.lang.Object);

    public abstract com.sun.xml.bind.v2.runtime.Location getMethodLocation(java.lang.Object);

    public abstract boolean hasDefaultConstructor(java.lang.Object);

    public abstract boolean isStaticField(java.lang.Object);

    public abstract boolean isPublicMethod(java.lang.Object);

    public abstract boolean isFinalMethod(java.lang.Object);

    public abstract boolean isPublicField(java.lang.Object);

    public abstract boolean isEnum(java.lang.Object);

    public abstract java.lang.Object erasure(java.lang.Object);

    public abstract boolean isAbstract(java.lang.Object);

    public abstract boolean isFinal(java.lang.Object);

    public abstract java.lang.Object[] getEnumConstants(java.lang.Object);

    public abstract java.lang.Object getVoidType();

    public abstract java.lang.String getPackageName(java.lang.Object);

    public abstract java.lang.Object findClass(java.lang.String, java.lang.Object);

    public abstract boolean isBridgeMethod(java.lang.Object);

    public abstract boolean isOverriding(java.lang.Object, java.lang.Object);

    public abstract boolean isInterface(java.lang.Object);

    public abstract boolean isTransient(java.lang.Object);

    public abstract boolean isInnerClass(java.lang.Object);

    public abstract boolean isSameType(java.lang.Object, java.lang.Object);

    static void <clinit>()
    {
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator $r0;

        $r0 = new com.sun.xml.bind.v2.model.nav.ReflectionNavigator;

        specialinvoke $r0.<com.sun.xml.bind.v2.model.nav.ReflectionNavigator: void <init>()>();

        <com.sun.xml.bind.v2.model.nav.Navigator: com.sun.xml.bind.v2.model.nav.ReflectionNavigator REFLECTION> = $r0;

        return;
    }
}
