public class com.jhlabs.image.ArrayColormap extends java.lang.Object implements com.jhlabs.image.Colormap, java.lang.Cloneable, java.io.Serializable
{
    static final long serialVersionUID;
    protected int[] map;

    public void <init>()
    {
        com.jhlabs.image.ArrayColormap r0;
        int[] $r1;

        r0 := @this: com.jhlabs.image.ArrayColormap;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (int)[256];

        r0.<com.jhlabs.image.ArrayColormap: int[] map> = $r1;

        return;
    }

    public void <init>(int[])
    {
        com.jhlabs.image.ArrayColormap r0;
        int[] r1;

        r0 := @this: com.jhlabs.image.ArrayColormap;

        r1 := @parameter0: int[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.jhlabs.image.ArrayColormap: int[] map> = r1;

        return;
    }

    public java.lang.Object clone()
    {
        com.jhlabs.image.ArrayColormap r0, r7;
        java.lang.CloneNotSupportedException $r6;
        int[] $r2, $r4, $r5;
        java.lang.Object $r1, $r3;

        r0 := @this: com.jhlabs.image.ArrayColormap;

     label1:
        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        r7 = (com.jhlabs.image.ArrayColormap) $r1;

        $r2 = r0.<com.jhlabs.image.ArrayColormap: int[] map>;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r4 = (int[]) $r3;

        $r5 = (int[]) $r4;

        r7.<com.jhlabs.image.ArrayColormap: int[] map> = $r5;

     label2:
        return r7;

     label3:
        $r6 := @caughtexception;

        return null;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    public void setMap(int[])
    {
        com.jhlabs.image.ArrayColormap r0;
        int[] r1;

        r0 := @this: com.jhlabs.image.ArrayColormap;

        r1 := @parameter0: int[];

        r0.<com.jhlabs.image.ArrayColormap: int[] map> = r1;

        return;
    }

    public int[] getMap()
    {
        com.jhlabs.image.ArrayColormap r0;
        int[] $r1;

        r0 := @this: com.jhlabs.image.ArrayColormap;

        $r1 = r0.<com.jhlabs.image.ArrayColormap: int[] map>;

        return $r1;
    }

    public int getColor(float)
    {
        com.jhlabs.image.ArrayColormap r0;
        int[] $r1;
        int i0, $i1;
        float f0, $f1;

        r0 := @this: com.jhlabs.image.ArrayColormap;

        f0 := @parameter0: float;

        $f1 = f0 * 255.0F;

        i0 = (int) $f1;

        if i0 >= 0 goto label1;

        i0 = 0;

        goto label2;

     label1:
        if i0 <= 255 goto label2;

        i0 = 255;

     label2:
        $r1 = r0.<com.jhlabs.image.ArrayColormap: int[] map>;

        $i1 = $r1[i0];

        return $i1;
    }

    public void setColorInterpolated(int, int, int, int)
    {
        com.jhlabs.image.ArrayColormap r0;
        int[] $r1, $r2, $r3, $r4;
        int i0, i1, i2, i3, i4, $i5, $i6, i7, $i8, $i9, $i10, $i11, i12, i13;
        float $f0, $f1, $f2, $f3, $f4, $f5;

        r0 := @this: com.jhlabs.image.ArrayColormap;

        i4 := @parameter0: int;

        i0 := @parameter1: int;

        i2 := @parameter2: int;

        i7 := @parameter3: int;

        $r1 = r0.<com.jhlabs.image.ArrayColormap: int[] map>;

        i1 = $r1[i0];

        $r2 = r0.<com.jhlabs.image.ArrayColormap: int[] map>;

        i3 = $r2[i2];

        i12 = i0;

     label1:
        if i12 > i4 goto label2;

        $r4 = r0.<com.jhlabs.image.ArrayColormap: int[] map>;

        $i9 = i12 - i0;

        $f4 = (float) $i9;

        $i10 = i4 - i0;

        $f3 = (float) $i10;

        $f5 = $f4 / $f3;

        $i11 = staticinvoke <com.jhlabs.image.ImageMath: int mixColors(float,int,int)>($f5, i1, i7);

        $r4[i12] = $i11;

        i12 = i12 + 1;

        goto label1;

     label2:
        i13 = i4;

     label3:
        if i13 >= i2 goto label4;

        $r3 = r0.<com.jhlabs.image.ArrayColormap: int[] map>;

        $i5 = i13 - i4;

        $f1 = (float) $i5;

        $i6 = i2 - i4;

        $f0 = (float) $i6;

        $f2 = $f1 / $f0;

        $i8 = staticinvoke <com.jhlabs.image.ImageMath: int mixColors(float,int,int)>($f2, i7, i3);

        $r3[i13] = $i8;

        i13 = i13 + 1;

        goto label3;

     label4:
        return;
    }

    public void setColorRange(int, int, int, int)
    {
        com.jhlabs.image.ArrayColormap r0;
        int[] $r1;
        int i0, i1, $i2, $i3, i4, i5, $i6, i7;
        float $f0, $f1, $f2;

        r0 := @this: com.jhlabs.image.ArrayColormap;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i4 := @parameter2: int;

        i5 := @parameter3: int;

        i7 = i0;

     label1:
        if i7 > i1 goto label2;

        $r1 = r0.<com.jhlabs.image.ArrayColormap: int[] map>;

        $i2 = i7 - i0;

        $f1 = (float) $i2;

        $i3 = i1 - i0;

        $f0 = (float) $i3;

        $f2 = $f1 / $f0;

        $i6 = staticinvoke <com.jhlabs.image.ImageMath: int mixColors(float,int,int)>($f2, i4, i5);

        $r1[i7] = $i6;

        i7 = i7 + 1;

        goto label1;

     label2:
        return;
    }

    public void setColorRange(int, int, int)
    {
        com.jhlabs.image.ArrayColormap r0;
        int[] $r1;
        int i0, i1, i2, i3;

        r0 := @this: com.jhlabs.image.ArrayColormap;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 = i0;

     label1:
        if i3 > i1 goto label2;

        $r1 = r0.<com.jhlabs.image.ArrayColormap: int[] map>;

        $r1[i3] = i2;

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }

    public void setColor(int, int)
    {
        com.jhlabs.image.ArrayColormap r0;
        int[] $r1;
        int i0, i1;

        r0 := @this: com.jhlabs.image.ArrayColormap;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.jhlabs.image.ArrayColormap: int[] map>;

        $r1[i0] = i1;

        return;
    }

    public static void <clinit>()
    {
        <com.jhlabs.image.ArrayColormap: long serialVersionUID> = -7990431442314209043L;

        return;
    }
}
