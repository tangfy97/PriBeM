public class org.codehaus.groovy.tools.shell.util.ANSI extends java.lang.Object
{
    private static java.lang.Boolean enabled;
    static java.lang.Class class$org$codehaus$groovy$tools$shell$util$ANSI;
    static java.lang.Class class$org$codehaus$groovy$tools$shell$util$ANSI$Code;

    public void <init>()
    {
        org.codehaus.groovy.tools.shell.util.ANSI r0;

        r0 := @this: org.codehaus.groovy.tools.shell.util.ANSI;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static boolean detect()
    {
        java.lang.StringBuffer $r1, $r4, $r5;
        jline.Terminal $r0;
        java.lang.Boolean $r8;
        java.lang.Class $r2, $r9;
        java.lang.String $r3, $r6, $r7;
        boolean $z0, z1;

        $r0 = staticinvoke <jline.Terminal: jline.Terminal getTerminal()>();

        $z0 = virtualinvoke $r0.<jline.Terminal: boolean isANSISupported()>();

        z1 = $z0;

        if $z0 != 0 goto label3;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = <org.codehaus.groovy.tools.shell.util.ANSI: java.lang.Class class$org$codehaus$groovy$tools$shell$util$ANSI>;

        if $r2 != null goto label1;

        $r9 = staticinvoke <org.codehaus.groovy.tools.shell.util.ANSI: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.tools.shell.util.ANSI");

        <org.codehaus.groovy.tools.shell.util.ANSI: java.lang.Class class$org$codehaus$groovy$tools$shell$util$ANSI> = $r9;

        goto label2;

     label1:
        $r9 = <org.codehaus.groovy.tools.shell.util.ANSI: java.lang.Class class$org$codehaus$groovy$tools$shell$util$ANSI>;

     label2:
        $r3 = virtualinvoke $r9.<java.lang.Class: java.lang.String getName()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".force");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        $r7 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>($r6, "false");

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r7);

        z1 = virtualinvoke $r8.<java.lang.Boolean: boolean booleanValue()>();

     label3:
        return z1;
    }

    public static boolean isDetected()
    {
        boolean $z0;

        $z0 = staticinvoke <org.codehaus.groovy.tools.shell.util.ANSI: boolean detect()>();

        return $z0;
    }

    public static void setEnabled(boolean)
    {
        java.lang.Boolean $r0;
        boolean z0;

        z0 := @parameter0: boolean;

        $r0 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        <org.codehaus.groovy.tools.shell.util.ANSI: java.lang.Boolean enabled> = $r0;

        return;
    }

    public static boolean isEnabled()
    {
        java.lang.Boolean $r0, $r1, $r2;
        boolean $z0, $z1;

        $r0 = <org.codehaus.groovy.tools.shell.util.ANSI: java.lang.Boolean enabled>;

        if $r0 != null goto label1;

        $z1 = staticinvoke <org.codehaus.groovy.tools.shell.util.ANSI: boolean isDetected()>();

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        <org.codehaus.groovy.tools.shell.util.ANSI: java.lang.Boolean enabled> = $r2;

     label1:
        $r1 = <org.codehaus.groovy.tools.shell.util.ANSI: java.lang.Boolean enabled>;

        $z0 = virtualinvoke $r1.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }
}
