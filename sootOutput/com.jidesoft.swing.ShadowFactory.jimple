public class com.jidesoft.swing.ShadowFactory extends java.lang.Object implements com.jidesoft.swing.ShadowRenderer
{
    public static final java.lang.String KEY_BLUR_QUALITY;
    public static final java.lang.String VALUE_BLUR_QUALITY_FAST;
    public static final java.lang.String VALUE_BLUR_QUALITY_HIGH;
    public static final java.lang.String SIZE_CHANGED_PROPERTY;
    public static final java.lang.String OPACITY_CHANGED_PROPERTY;
    public static final java.lang.String COLOR_CHANGED_PROPERTY;
    private int size;
    private float opacity;
    private java.awt.Color color;
    private java.util.HashMap hints;
    private java.beans.PropertyChangeSupport changeSupport;

    public void <init>()
    {
        java.awt.Color $r1;
        com.jidesoft.swing.ShadowFactory r0;

        r0 := @this: com.jidesoft.swing.ShadowFactory;

        $r1 = <java.awt.Color: java.awt.Color BLACK>;

        specialinvoke r0.<com.jidesoft.swing.ShadowFactory: void <init>(int,float,java.awt.Color)>(5, 0.5F, $r1);

        return;
    }

    public void <init>(int, float, java.awt.Color)
    {
        java.awt.Color $r1, r5;
        com.jidesoft.swing.ShadowFactory r0;
        java.util.HashMap $r2, $r3;
        int i0;
        java.beans.PropertyChangeSupport $r4;
        float f0;

        r0 := @this: com.jidesoft.swing.ShadowFactory;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        r5 := @parameter2: java.awt.Color;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.jidesoft.swing.ShadowFactory: int size> = 5;

        r0.<com.jidesoft.swing.ShadowFactory: float opacity> = 0.5F;

        $r1 = <java.awt.Color: java.awt.Color BLACK>;

        r0.<com.jidesoft.swing.ShadowFactory: java.awt.Color color> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<com.jidesoft.swing.ShadowFactory: java.util.HashMap hints> = $r2;

        $r3 = r0.<com.jidesoft.swing.ShadowFactory: java.util.HashMap hints>;

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("blur_quality", "fast");

        $r4 = new java.beans.PropertyChangeSupport;

        specialinvoke $r4.<java.beans.PropertyChangeSupport: void <init>(java.lang.Object)>(r0);

        r0.<com.jidesoft.swing.ShadowFactory: java.beans.PropertyChangeSupport changeSupport> = $r4;

        virtualinvoke r0.<com.jidesoft.swing.ShadowFactory: void setSize(int)>(i0);

        virtualinvoke r0.<com.jidesoft.swing.ShadowFactory: void setOpacity(float)>(f0);

        virtualinvoke r0.<com.jidesoft.swing.ShadowFactory: void setColor(java.awt.Color)>(r5);

        return;
    }

    public void addPropertyChangeListener(java.beans.PropertyChangeListener)
    {
        java.beans.PropertyChangeSupport $r2;
        com.jidesoft.swing.ShadowFactory r0;
        java.beans.PropertyChangeListener r1;

        r0 := @this: com.jidesoft.swing.ShadowFactory;

        r1 := @parameter0: java.beans.PropertyChangeListener;

        $r2 = r0.<com.jidesoft.swing.ShadowFactory: java.beans.PropertyChangeSupport changeSupport>;

        virtualinvoke $r2.<java.beans.PropertyChangeSupport: void addPropertyChangeListener(java.beans.PropertyChangeListener)>(r1);

        return;
    }

    public void removePropertyChangeListener(java.beans.PropertyChangeListener)
    {
        java.beans.PropertyChangeSupport $r2;
        com.jidesoft.swing.ShadowFactory r0;
        java.beans.PropertyChangeListener r1;

        r0 := @this: com.jidesoft.swing.ShadowFactory;

        r1 := @parameter0: java.beans.PropertyChangeListener;

        $r2 = r0.<com.jidesoft.swing.ShadowFactory: java.beans.PropertyChangeSupport changeSupport>;

        virtualinvoke $r2.<java.beans.PropertyChangeSupport: void removePropertyChangeListener(java.beans.PropertyChangeListener)>(r1);

        return;
    }

    public void setRenderingHint(java.lang.Object, java.lang.Object)
    {
        com.jidesoft.swing.ShadowFactory r0;
        java.lang.Object r1, r2;
        java.util.HashMap $r3;

        r0 := @this: com.jidesoft.swing.ShadowFactory;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = r0.<com.jidesoft.swing.ShadowFactory: java.util.HashMap hints>;

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    public java.awt.Color getColor()
    {
        java.awt.Color $r1;
        com.jidesoft.swing.ShadowFactory r0;

        r0 := @this: com.jidesoft.swing.ShadowFactory;

        $r1 = r0.<com.jidesoft.swing.ShadowFactory: java.awt.Color color>;

        return $r1;
    }

    public void setColor(java.awt.Color)
    {
        java.awt.Color r0, r2, $r3;
        com.jidesoft.swing.ShadowFactory r1;
        java.beans.PropertyChangeSupport $r4;

        r1 := @this: com.jidesoft.swing.ShadowFactory;

        r0 := @parameter0: java.awt.Color;

        if r0 == null goto label1;

        r2 = r1.<com.jidesoft.swing.ShadowFactory: java.awt.Color color>;

        r1.<com.jidesoft.swing.ShadowFactory: java.awt.Color color> = r0;

        $r4 = r1.<com.jidesoft.swing.ShadowFactory: java.beans.PropertyChangeSupport changeSupport>;

        $r3 = r1.<com.jidesoft.swing.ShadowFactory: java.awt.Color color>;

        virtualinvoke $r4.<java.beans.PropertyChangeSupport: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("shadow_color", r2, $r3);

     label1:
        return;
    }

    public float getOpacity()
    {
        float $f0;
        com.jidesoft.swing.ShadowFactory r0;

        r0 := @this: com.jidesoft.swing.ShadowFactory;

        $f0 = r0.<com.jidesoft.swing.ShadowFactory: float opacity>;

        return $f0;
    }

    public void setOpacity(float)
    {
        java.lang.Float $r2, $r3;
        com.jidesoft.swing.ShadowFactory r0;
        byte $b0, $b1;
        int $i2, $i3;
        float f0, f1, $f2;
        java.beans.PropertyChangeSupport $r1;
        double $d0;

        r0 := @this: com.jidesoft.swing.ShadowFactory;

        f1 := @parameter0: float;

        f0 = r0.<com.jidesoft.swing.ShadowFactory: float opacity>;

        $d0 = (double) f1;

        $b0 = $d0 cmpg 0.0;

        $i2 = (int) $b0;

        if $i2 >= 0 goto label1;

        r0.<com.jidesoft.swing.ShadowFactory: float opacity> = 0.0F;

        goto label3;

     label1:
        $b1 = f1 cmpl 1.0F;

        $i3 = (int) $b1;

        if $i3 <= 0 goto label2;

        r0.<com.jidesoft.swing.ShadowFactory: float opacity> = 1.0F;

        goto label3;

     label2:
        r0.<com.jidesoft.swing.ShadowFactory: float opacity> = f1;

     label3:
        $r1 = r0.<com.jidesoft.swing.ShadowFactory: java.beans.PropertyChangeSupport changeSupport>;

        $r2 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f0);

        $f2 = r0.<com.jidesoft.swing.ShadowFactory: float opacity>;

        $r3 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f2);

        virtualinvoke $r1.<java.beans.PropertyChangeSupport: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("shadow_opacity", $r2, $r3);

        return;
    }

    public int getSize()
    {
        int $i0;
        com.jidesoft.swing.ShadowFactory r0;

        r0 := @this: com.jidesoft.swing.ShadowFactory;

        $i0 = r0.<com.jidesoft.swing.ShadowFactory: int size>;

        return $i0;
    }

    public void setSize(int)
    {
        com.jidesoft.swing.ShadowFactory r0;
        int i0, i1, $i2;
        java.beans.PropertyChangeSupport $r2;
        java.lang.Integer $r1, $r3;

        r0 := @this: com.jidesoft.swing.ShadowFactory;

        i1 := @parameter0: int;

        i0 = r0.<com.jidesoft.swing.ShadowFactory: int size>;

        if i1 >= 0 goto label1;

        r0.<com.jidesoft.swing.ShadowFactory: int size> = 0;

        goto label2;

     label1:
        r0.<com.jidesoft.swing.ShadowFactory: int size> = i1;

     label2:
        $r2 = r0.<com.jidesoft.swing.ShadowFactory: java.beans.PropertyChangeSupport changeSupport>;

        $r1 = new java.lang.Integer;

        specialinvoke $r1.<java.lang.Integer: void <init>(int)>(i0);

        $r3 = new java.lang.Integer;

        $i2 = r0.<com.jidesoft.swing.ShadowFactory: int size>;

        specialinvoke $r3.<java.lang.Integer: void <init>(int)>($i2);

        virtualinvoke $r2.<java.beans.PropertyChangeSupport: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("shadow_size", $r1, $r3);

        return;
    }

    public java.awt.image.BufferedImage createShadow(java.awt.image.BufferedImage)
    {
        com.jidesoft.swing.ShadowFactory r0;
        java.awt.image.BufferedImage r3, $r4, $r5, $r6, $r7;
        java.util.HashMap $r1;
        int $i0, $i1, $i2;
        java.awt.image.ConvolveOp $r8;
        java.lang.Object $r2;

        r0 := @this: com.jidesoft.swing.ShadowFactory;

        r3 := @parameter0: java.awt.image.BufferedImage;

        $r1 = r0.<com.jidesoft.swing.ShadowFactory: java.util.HashMap hints>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>("blur_quality");

        if $r2 != "high" goto label1;

        $r5 = specialinvoke r0.<com.jidesoft.swing.ShadowFactory: java.awt.image.BufferedImage prepareImage(java.awt.image.BufferedImage)>(r3);

        $r6 = new java.awt.image.BufferedImage;

        $i0 = virtualinvoke $r5.<java.awt.image.BufferedImage: int getWidth()>();

        $i1 = virtualinvoke $r5.<java.awt.image.BufferedImage: int getHeight()>();

        specialinvoke $r6.<java.awt.image.BufferedImage: void <init>(int,int,int)>($i0, $i1, 2);

        $r7 = specialinvoke r0.<com.jidesoft.swing.ShadowFactory: java.awt.image.BufferedImage createShadowMask(java.awt.image.BufferedImage)>($r5);

        $i2 = r0.<com.jidesoft.swing.ShadowFactory: int size>;

        $r8 = specialinvoke r0.<com.jidesoft.swing.ShadowFactory: java.awt.image.ConvolveOp getLinearBlurOp(int)>($i2);

        virtualinvoke $r8.<java.awt.image.ConvolveOp: java.awt.image.BufferedImage filter(java.awt.image.BufferedImage,java.awt.image.BufferedImage)>($r7, $r6);

        return $r6;

     label1:
        $r4 = specialinvoke r0.<com.jidesoft.swing.ShadowFactory: java.awt.image.BufferedImage createShadowFast(java.awt.image.BufferedImage)>(r3);

        return $r4;
    }

    private java.awt.image.BufferedImage prepareImage(java.awt.image.BufferedImage)
    {
        com.jidesoft.swing.ShadowFactory r2;
        java.awt.image.BufferedImage $r0, r1;
        java.awt.Graphics2D $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;

        r2 := @this: com.jidesoft.swing.ShadowFactory;

        r1 := @parameter0: java.awt.image.BufferedImage;

        $r0 = new java.awt.image.BufferedImage;

        $i0 = virtualinvoke r1.<java.awt.image.BufferedImage: int getWidth()>();

        $i1 = r2.<com.jidesoft.swing.ShadowFactory: int size>;

        $i2 = $i1 * 2;

        $i3 = $i0 + $i2;

        $i4 = virtualinvoke r1.<java.awt.image.BufferedImage: int getHeight()>();

        $i5 = r2.<com.jidesoft.swing.ShadowFactory: int size>;

        $i6 = $i5 * 2;

        $i7 = $i4 + $i6;

        specialinvoke $r0.<java.awt.image.BufferedImage: void <init>(int,int,int)>($i3, $i7, 2);

        $r3 = virtualinvoke $r0.<java.awt.image.BufferedImage: java.awt.Graphics2D createGraphics()>();

        $i9 = r2.<com.jidesoft.swing.ShadowFactory: int size>;

        $i8 = r2.<com.jidesoft.swing.ShadowFactory: int size>;

        virtualinvoke $r3.<java.awt.Graphics2D: void drawImage(java.awt.image.BufferedImage,java.awt.image.BufferedImageOp,int,int)>(r1, null, $i9, $i8);

        virtualinvoke $r3.<java.awt.Graphics2D: void dispose()>();

        return $r0;
    }

    private java.awt.image.BufferedImage createShadowFast(java.awt.image.BufferedImage)
    {
        java.awt.Color $r3;
        com.jidesoft.swing.ShadowFactory r0;
        java.awt.image.DataBufferInt $r9;
        int[] r4, $r10;
        java.awt.image.BufferedImage r1, $r2;
        float $f0, f1, $f2, $f3, f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12;
        java.awt.image.DataBuffer $r8;
        int i0, $i1, $i2, $i3, i4, $i5, i6, $i7, i8, i9, i10, $i11, i12, i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, i35, i36, i37, i38, i39, i40, i41, i42, i43, i44, i45, i46, i47, i48, i49, i50, i51, i52, i53, i54, i55, i56, i57, i58;
        java.awt.image.ColorModel $r5;
        java.awt.image.WritableRaster $r6, $r7;
        java.lang.Object $r11;

        r0 := @this: com.jidesoft.swing.ShadowFactory;

        r1 := @parameter0: java.awt.image.BufferedImage;

        i0 = r0.<com.jidesoft.swing.ShadowFactory: int size>;

        $i1 = virtualinvoke r1.<java.awt.image.BufferedImage: int getWidth()>();

        $i2 = virtualinvoke r1.<java.awt.image.BufferedImage: int getHeight()>();

        $i3 = r0.<com.jidesoft.swing.ShadowFactory: int size>;

        i4 = $i1 + $i3;

        $i5 = r0.<com.jidesoft.swing.ShadowFactory: int size>;

        i6 = $i2 + $i5;

        $i7 = i0 - 1;

        i8 = $i7 >> 1;

        i9 = i0 - i8;

        i10 = i6 - i9;

        $r2 = new java.awt.image.BufferedImage;

        specialinvoke $r2.<java.awt.image.BufferedImage: void <init>(int,int,int)>(i4, i6, 2);

        $r3 = r0.<com.jidesoft.swing.ShadowFactory: java.awt.Color color>;

        $i11 = virtualinvoke $r3.<java.awt.Color: int getRGB()>();

        i12 = $i11 & 16777215;

        r4 = newarray (int)[i0];

        $r5 = virtualinvoke r1.<java.awt.image.BufferedImage: java.awt.image.ColorModel getColorModel()>();

        $r6 = virtualinvoke r1.<java.awt.image.BufferedImage: java.awt.image.WritableRaster getRaster()>();

        $r7 = virtualinvoke $r2.<java.awt.image.BufferedImage: java.awt.image.WritableRaster getRaster()>();

        $r8 = virtualinvoke $r7.<java.awt.image.WritableRaster: java.awt.image.DataBuffer getDataBuffer()>();

        $r9 = (java.awt.image.DataBufferInt) $r8;

        $r10 = virtualinvoke $r9.<java.awt.image.DataBufferInt: int[] getData()>();

        i13 = i9 * i4;

        $i14 = r0.<com.jidesoft.swing.ShadowFactory: int size>;

        $f0 = (float) $i14;

        f1 = 1.0F / $f0;

        $f3 = r0.<com.jidesoft.swing.ShadowFactory: float opacity>;

        $i15 = r0.<com.jidesoft.swing.ShadowFactory: int size>;

        $f2 = (float) $i15;

        f4 = $f3 / $f2;

        i35 = 0;

        i36 = i8 * i4;

     label01:
        if i35 >= $i2 goto label10;

        i37 = 0;

     label02:
        if i37 >= i0 goto label03;

        $i34 = i37;

        i37 = i37 + 1;

        r4[$i34] = 0;

        goto label02;

     label03:
        i38 = 0;

        i39 = 0;

        i40 = 0;

     label04:
        if i40 >= $i1 goto label06;

        $f11 = (float) i38;

        $f12 = $f11 * f1;

        i41 = (int) $f12;

        $i30 = i36;

        i36 = i36 + 1;

        $i31 = i41 << 24;

        $r10[$i30] = $i31;

        $i32 = r4[i39];

        i42 = i38 - $i32;

        $r11 = virtualinvoke $r6.<java.awt.image.WritableRaster: java.lang.Object getDataElements(int,int,java.lang.Object)>(i40, i35, null);

        $i33 = virtualinvoke $r5.<java.awt.image.ColorModel: int getAlpha(java.lang.Object)>($r11);

        r4[i39] = $i33;

        i38 = i42 + $i33;

        i39 = i39 + 1;

        if i39 < i0 goto label05;

        i39 = i39 - i0;

     label05:
        i40 = i40 + 1;

        goto label04;

     label06:
        i43 = 0;

     label07:
        if i43 >= i0 goto label09;

        $f9 = (float) i38;

        $f10 = $f9 * f1;

        i44 = (int) $f10;

        $i27 = i36;

        i36 = i36 + 1;

        $i28 = i44 << 24;

        $r10[$i27] = $i28;

        $i29 = r4[i39];

        i38 = i38 - $i29;

        i39 = i39 + 1;

        if i39 < i0 goto label08;

        i39 = i39 - i0;

     label08:
        i43 = i43 + 1;

        goto label07;

     label09:
        i35 = i35 + 1;

        goto label01;

     label10:
        i45 = 0;

        i46 = 0;

     label11:
        if i45 >= i4 goto label22;

        i47 = 0;

        i48 = 0;

     label12:
        if i48 >= i8 goto label13;

        $i26 = i48;

        i48 = i48 + 1;

        r4[$i26] = 0;

        goto label12;

     label13:
        i49 = 0;

     label14:
        if i49 >= i9 goto label15;

        $i24 = $r10[i46];

        i50 = $i24 >>> 24;

        $i25 = i48;

        i48 = i48 + 1;

        r4[$i25] = i50;

        i47 = i47 + i50;

        i49 = i49 + 1;

        i46 = i46 + i4;

        goto label14;

     label15:
        i51 = i45;

        i52 = 0;

        i53 = 0;

     label16:
        if i53 >= i10 goto label18;

        $f7 = (float) i47;

        $f8 = $f7 * f4;

        i54 = (int) $f8;

        $i19 = i54 << 24;

        $i20 = $i19 | i12;

        $r10[i51] = $i20;

        $i21 = r4[i52];

        i55 = i47 - $i21;

        $i22 = i51 + i13;

        $i23 = $r10[$i22];

        i56 = $i23 >>> 24;

        r4[i52] = i56;

        i47 = i55 + i56;

        i52 = i52 + 1;

        if i52 < i0 goto label17;

        i52 = i52 - i0;

     label17:
        i53 = i53 + 1;

        i51 = i51 + i4;

        goto label16;

     label18:
        i57 = i10;

     label19:
        if i57 >= i6 goto label21;

        $f5 = (float) i47;

        $f6 = $f5 * f4;

        i58 = (int) $f6;

        $i16 = i58 << 24;

        $i17 = $i16 | i12;

        $r10[i51] = $i17;

        $i18 = r4[i52];

        i47 = i47 - $i18;

        i52 = i52 + 1;

        if i52 < i0 goto label20;

        i52 = i52 - i0;

     label20:
        i57 = i57 + 1;

        i51 = i51 + i4;

        goto label19;

     label21:
        i45 = i45 + 1;

        i46 = i45;

        goto label11;

     label22:
        return $r2;
    }

    private java.awt.image.BufferedImage createShadowMask(java.awt.image.BufferedImage)
    {
        java.awt.Color $r5;
        com.jidesoft.swing.ShadowFactory r3;
        java.awt.image.BufferedImage $r0, r1;
        java.awt.AlphaComposite $r4;
        java.awt.Graphics2D $r2;
        int $i0, $i1, $i2, $i3;
        float $f0;

        r3 := @this: com.jidesoft.swing.ShadowFactory;

        r1 := @parameter0: java.awt.image.BufferedImage;

        $r0 = new java.awt.image.BufferedImage;

        $i0 = virtualinvoke r1.<java.awt.image.BufferedImage: int getWidth()>();

        $i1 = virtualinvoke r1.<java.awt.image.BufferedImage: int getHeight()>();

        specialinvoke $r0.<java.awt.image.BufferedImage: void <init>(int,int,int)>($i0, $i1, 2);

        $r2 = virtualinvoke $r0.<java.awt.image.BufferedImage: java.awt.Graphics2D createGraphics()>();

        virtualinvoke $r2.<java.awt.Graphics2D: boolean drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)>(r1, 0, 0, null);

        $f0 = r3.<com.jidesoft.swing.ShadowFactory: float opacity>;

        $r4 = staticinvoke <java.awt.AlphaComposite: java.awt.AlphaComposite getInstance(int,float)>(5, $f0);

        virtualinvoke $r2.<java.awt.Graphics2D: void setComposite(java.awt.Composite)>($r4);

        $r5 = r3.<com.jidesoft.swing.ShadowFactory: java.awt.Color color>;

        virtualinvoke $r2.<java.awt.Graphics2D: void setColor(java.awt.Color)>($r5);

        $i2 = virtualinvoke r1.<java.awt.image.BufferedImage: int getWidth()>();

        $i3 = virtualinvoke r1.<java.awt.image.BufferedImage: int getHeight()>();

        virtualinvoke $r2.<java.awt.Graphics2D: void fillRect(int,int,int,int)>(0, 0, $i2, $i3);

        virtualinvoke $r2.<java.awt.Graphics2D: void dispose()>();

        return $r0;
    }

    private java.awt.image.ConvolveOp getLinearBlurOp(int)
    {
        com.jidesoft.swing.ShadowFactory r3;
        float[] r0;
        java.awt.image.Kernel $r2;
        int i0, $i1, $i2, $i3, i4;
        float $f0, f1;
        java.awt.image.ConvolveOp $r1;

        r3 := @this: com.jidesoft.swing.ShadowFactory;

        i0 := @parameter0: int;

        $i1 = i0 * i0;

        r0 = newarray (float)[$i1];

        $i2 = i0 * i0;

        $f0 = (float) $i2;

        f1 = 1.0F / $f0;

        i4 = 0;

     label1:
        $i3 = lengthof r0;

        if i4 >= $i3 goto label2;

        r0[i4] = f1;

        i4 = i4 + 1;

        goto label1;

     label2:
        $r1 = new java.awt.image.ConvolveOp;

        $r2 = new java.awt.image.Kernel;

        specialinvoke $r2.<java.awt.image.Kernel: void <init>(int,int,float[])>(i0, i0, r0);

        specialinvoke $r1.<java.awt.image.ConvolveOp: void <init>(java.awt.image.Kernel)>($r2);

        return $r1;
    }

    public static void <clinit>()
    {
        <com.jidesoft.swing.ShadowFactory: java.lang.String COLOR_CHANGED_PROPERTY> = "shadow_color";

        <com.jidesoft.swing.ShadowFactory: java.lang.String OPACITY_CHANGED_PROPERTY> = "shadow_opacity";

        <com.jidesoft.swing.ShadowFactory: java.lang.String SIZE_CHANGED_PROPERTY> = "shadow_size";

        <com.jidesoft.swing.ShadowFactory: java.lang.String VALUE_BLUR_QUALITY_HIGH> = "high";

        <com.jidesoft.swing.ShadowFactory: java.lang.String VALUE_BLUR_QUALITY_FAST> = "fast";

        <com.jidesoft.swing.ShadowFactory: java.lang.String KEY_BLUR_QUALITY> = "blur_quality";

        return;
    }
}
