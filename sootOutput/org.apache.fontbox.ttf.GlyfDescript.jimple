public abstract class org.apache.fontbox.ttf.GlyfDescript extends java.lang.Object implements org.apache.fontbox.ttf.GlyphDescription
{
    public static final byte ON_CURVE;
    public static final byte X_SHORT_VECTOR;
    public static final byte Y_SHORT_VECTOR;
    public static final byte REPEAT;
    public static final byte X_DUAL;
    public static final byte Y_DUAL;
    private int[] instructions;
    private int contourCount;

    protected void <init>(short, org.apache.fontbox.ttf.TTFDataStream) throws java.io.IOException
    {
        short s0;
        int $i1;
        org.apache.fontbox.ttf.TTFDataStream r1;
        org.apache.fontbox.ttf.GlyfDescript r0;

        r0 := @this: org.apache.fontbox.ttf.GlyfDescript;

        s0 := @parameter0: short;

        r1 := @parameter1: org.apache.fontbox.ttf.TTFDataStream;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i1 = (int) s0;

        r0.<org.apache.fontbox.ttf.GlyfDescript: int contourCount> = $i1;

        return;
    }

    public void resolve()
    {
        org.apache.fontbox.ttf.GlyfDescript r0;

        r0 := @this: org.apache.fontbox.ttf.GlyfDescript;

        return;
    }

    public int getContourCount()
    {
        int $i0;
        org.apache.fontbox.ttf.GlyfDescript r0;

        r0 := @this: org.apache.fontbox.ttf.GlyfDescript;

        $i0 = r0.<org.apache.fontbox.ttf.GlyfDescript: int contourCount>;

        return $i0;
    }

    public int[] getInstructions()
    {
        org.apache.fontbox.ttf.GlyfDescript r0;
        int[] $r1;

        r0 := @this: org.apache.fontbox.ttf.GlyfDescript;

        $r1 = r0.<org.apache.fontbox.ttf.GlyfDescript: int[] instructions>;

        return $r1;
    }

    protected void readInstructions(org.apache.fontbox.ttf.TTFDataStream, int) throws java.io.IOException
    {
        int[] $r2;
        int i0;
        org.apache.fontbox.ttf.TTFDataStream r1;
        org.apache.fontbox.ttf.GlyfDescript r0;

        r0 := @this: org.apache.fontbox.ttf.GlyfDescript;

        r1 := @parameter0: org.apache.fontbox.ttf.TTFDataStream;

        i0 := @parameter1: int;

        $r2 = virtualinvoke r1.<org.apache.fontbox.ttf.TTFDataStream: int[] readUnsignedByteArray(int)>(i0);

        r0.<org.apache.fontbox.ttf.GlyfDescript: int[] instructions> = $r2;

        return;
    }

    public static void <clinit>()
    {
        <org.apache.fontbox.ttf.GlyfDescript: byte Y_DUAL> = 32;

        <org.apache.fontbox.ttf.GlyfDescript: byte X_DUAL> = 16;

        <org.apache.fontbox.ttf.GlyfDescript: byte REPEAT> = 8;

        <org.apache.fontbox.ttf.GlyfDescript: byte Y_SHORT_VECTOR> = 4;

        <org.apache.fontbox.ttf.GlyfDescript: byte X_SHORT_VECTOR> = 2;

        <org.apache.fontbox.ttf.GlyfDescript: byte ON_CURVE> = 1;

        return;
    }
}
