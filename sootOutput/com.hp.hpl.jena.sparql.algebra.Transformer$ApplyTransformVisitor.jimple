public class com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor extends com.hp.hpl.jena.sparql.algebra.OpVisitorByType
{
    protected final com.hp.hpl.jena.sparql.algebra.Transform transform;
    private final com.hp.hpl.jena.sparql.expr.ExprTransform exprTransform;
    private final java.util.Deque stack;

    protected final com.hp.hpl.jena.sparql.algebra.Op pop()
    {
        com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor r0;
        java.lang.Object $r2;
        java.util.Deque $r1;
        com.hp.hpl.jena.sparql.algebra.Op $r3;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor;

        $r1 = r0.<com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor: java.util.Deque stack>;

        $r2 = interfaceinvoke $r1.<java.util.Deque: java.lang.Object pop()>();

        $r3 = (com.hp.hpl.jena.sparql.algebra.Op) $r2;

        return $r3;
    }

    protected final void push(com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor r0;
        java.util.Deque $r2;
        com.hp.hpl.jena.sparql.algebra.Op r1;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        $r2 = r0.<com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor: java.util.Deque stack>;

        interfaceinvoke $r2.<java.util.Deque: void push(java.lang.Object)>(r1);

        return;
    }

    public void <init>(com.hp.hpl.jena.sparql.algebra.Transform, com.hp.hpl.jena.sparql.expr.ExprTransform)
    {
        com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor r0;
        com.hp.hpl.jena.sparql.expr.ExprTransform r3;
        com.hp.hpl.jena.sparql.algebra.Transform r2;
        java.util.ArrayDeque $r1;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor;

        r2 := @parameter0: com.hp.hpl.jena.sparql.algebra.Transform;

        r3 := @parameter1: com.hp.hpl.jena.sparql.expr.ExprTransform;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpVisitorByType: void <init>()>();

        $r1 = new java.util.ArrayDeque;

        specialinvoke $r1.<java.util.ArrayDeque: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor: java.util.Deque stack> = $r1;

        r0.<com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor: com.hp.hpl.jena.sparql.algebra.Transform transform> = r2;

        r0.<com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor: com.hp.hpl.jena.sparql.expr.ExprTransform exprTransform> = r3;

        return;
    }

    final com.hp.hpl.jena.sparql.algebra.Op result()
    {
        com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor r0;
        int $i0;
        java.util.Deque $r1;
        com.hp.hpl.jena.sparql.algebra.Op $r2;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor;

        $r1 = r0.<com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor: java.util.Deque stack>;

        $i0 = interfaceinvoke $r1.<java.util.Deque: int size()>();

        if $i0 == 1 goto label1;

        staticinvoke <org.apache.jena.atlas.logging.Log: void warn(java.lang.Object,java.lang.String)>(r0, "Stack is not aligned");

     label1:
        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor: com.hp.hpl.jena.sparql.algebra.Op pop()>();

        return $r2;
    }

    private com.hp.hpl.jena.sparql.expr.ExprList transform(com.hp.hpl.jena.sparql.expr.ExprList, com.hp.hpl.jena.sparql.expr.ExprTransform)
    {
        com.hp.hpl.jena.sparql.expr.ExprTransform r1;
        com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor r3;
        com.hp.hpl.jena.sparql.expr.ExprList r0, $r2;

        r3 := @this: com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprList;

        r1 := @parameter1: com.hp.hpl.jena.sparql.expr.ExprTransform;

        if r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        return r0;

     label2:
        $r2 = staticinvoke <com.hp.hpl.jena.sparql.expr.ExprTransformer: com.hp.hpl.jena.sparql.expr.ExprList transform(com.hp.hpl.jena.sparql.expr.ExprTransform,com.hp.hpl.jena.sparql.expr.ExprList)>(r1, r0);

        return $r2;
    }

    private com.hp.hpl.jena.sparql.expr.Expr transform(com.hp.hpl.jena.sparql.expr.Expr, com.hp.hpl.jena.sparql.expr.ExprTransform)
    {
        com.hp.hpl.jena.sparql.expr.Expr r0, $r2;
        com.hp.hpl.jena.sparql.expr.ExprTransform r1;
        com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor r3;

        r3 := @this: com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.Expr;

        r1 := @parameter1: com.hp.hpl.jena.sparql.expr.ExprTransform;

        if r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        return r0;

     label2:
        $r2 = staticinvoke <com.hp.hpl.jena.sparql.expr.ExprTransformer: com.hp.hpl.jena.sparql.expr.Expr transform(com.hp.hpl.jena.sparql.expr.ExprTransform,com.hp.hpl.jena.sparql.expr.Expr)>(r1, r0);

        return $r2;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpOrder)
    {
        com.hp.hpl.jena.sparql.expr.ExprTransform $r10;
        java.util.ArrayList $r2;
        com.hp.hpl.jena.sparql.algebra.op.OpOrder r0, $r5, r13;
        com.hp.hpl.jena.sparql.expr.Expr $r9, $r11;
        int $i0;
        com.hp.hpl.jena.sparql.algebra.Op $r6;
        boolean $z0, z1;
        java.util.Iterator $r3;
        com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor r4;
        com.hp.hpl.jena.query.SortCondition r8, $r12;
        java.util.List $r1;
        java.lang.Object $r7;

        r4 := @this: com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpOrder;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpOrder: java.util.List getConditions()>();

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        z1 = 0;

        $r3 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r8 = (com.hp.hpl.jena.query.SortCondition) $r7;

        $r9 = virtualinvoke r8.<com.hp.hpl.jena.query.SortCondition: com.hp.hpl.jena.sparql.expr.Expr getExpression()>();

        $r10 = r4.<com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor: com.hp.hpl.jena.sparql.expr.ExprTransform exprTransform>;

        $r11 = specialinvoke r4.<com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor: com.hp.hpl.jena.sparql.expr.Expr transform(com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.expr.ExprTransform)>($r9, $r10);

        $r12 = new com.hp.hpl.jena.query.SortCondition;

        $i0 = virtualinvoke r8.<com.hp.hpl.jena.query.SortCondition: int getDirection()>();

        specialinvoke $r12.<com.hp.hpl.jena.query.SortCondition: void <init>(com.hp.hpl.jena.sparql.expr.Expr,int)>($r11, $i0);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r12);

        if $r9 == $r11 goto label2;

        z1 = 1;

     label2:
        goto label1;

     label3:
        r13 = r0;

        if z1 == 0 goto label4;

        $r5 = new com.hp.hpl.jena.sparql.algebra.op.OpOrder;

        $r6 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpOrder: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        specialinvoke $r5.<com.hp.hpl.jena.sparql.algebra.op.OpOrder: void <init>(com.hp.hpl.jena.sparql.algebra.Op,java.util.List)>($r6, $r2);

        r13 = $r5;

     label4:
        virtualinvoke r4.<com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor: void visit1(com.hp.hpl.jena.sparql.algebra.op.Op1)>(r13);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpAssign)
    {
        com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor r2;
        com.hp.hpl.jena.sparql.core.VarExprList $r1, $r3;
        com.hp.hpl.jena.sparql.algebra.op.OpAssign r0, r5;
        com.hp.hpl.jena.sparql.algebra.Op $r4;

        r2 := @this: com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpAssign;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpAssign: com.hp.hpl.jena.sparql.core.VarExprList getVarExprList()>();

        $r3 = specialinvoke r2.<com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor: com.hp.hpl.jena.sparql.core.VarExprList process(com.hp.hpl.jena.sparql.core.VarExprList)>($r1);

        r5 = r0;

        if $r1 == $r3 goto label1;

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpAssign: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        r5 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpAssign: com.hp.hpl.jena.sparql.algebra.op.OpAssign assignDirect(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.core.VarExprList)>($r4, $r3);

     label1:
        virtualinvoke r2.<com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor: void visit1(com.hp.hpl.jena.sparql.algebra.op.Op1)>(r5);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpExtend)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpExtend r0, r5;
        com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor r2;
        com.hp.hpl.jena.sparql.core.VarExprList $r1, $r3;
        com.hp.hpl.jena.sparql.algebra.Op $r4;

        r2 := @this: com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpExtend;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpExtend: com.hp.hpl.jena.sparql.core.VarExprList getVarExprList()>();

        $r3 = specialinvoke r2.<com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor: com.hp.hpl.jena.sparql.core.VarExprList process(com.hp.hpl.jena.sparql.core.VarExprList)>($r1);

        r5 = r0;

        if $r1 == $r3 goto label1;

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpExtend: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        r5 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpExtend: com.hp.hpl.jena.sparql.algebra.op.OpExtend extendDirect(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.core.VarExprList)>($r4, $r3);

     label1:
        virtualinvoke r2.<com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor: void visit1(com.hp.hpl.jena.sparql.algebra.op.Op1)>(r5);

        return;
    }

    private com.hp.hpl.jena.sparql.core.VarExprList process(com.hp.hpl.jena.sparql.core.VarExprList)
    {
        java.util.Iterator $r3;
        com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor r7;
        com.hp.hpl.jena.sparql.expr.ExprTransform $r8;
        com.hp.hpl.jena.sparql.core.Var r5;
        java.util.List $r1;
        com.hp.hpl.jena.sparql.expr.Expr $r6, r9;
        com.hp.hpl.jena.sparql.core.VarExprList r0, $r2;
        java.lang.Object $r4;
        boolean $z0, z1;

        r7 := @this: com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor;

        r0 := @parameter0: com.hp.hpl.jena.sparql.core.VarExprList;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.VarExprList: java.util.List getVars()>();

        $r2 = new com.hp.hpl.jena.sparql.core.VarExprList;

        specialinvoke $r2.<com.hp.hpl.jena.sparql.core.VarExprList: void <init>()>();

        z1 = 0;

        $r3 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.hp.hpl.jena.sparql.core.Var) $r4;

        $r6 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.VarExprList: com.hp.hpl.jena.sparql.expr.Expr getExpr(com.hp.hpl.jena.sparql.core.Var)>(r5);

        r9 = $r6;

        if $r6 == null goto label2;

        $r8 = r7.<com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor: com.hp.hpl.jena.sparql.expr.ExprTransform exprTransform>;

        r9 = specialinvoke r7.<com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor: com.hp.hpl.jena.sparql.expr.Expr transform(com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.expr.ExprTransform)>($r6, $r8);

     label2:
        if r9 != null goto label3;

        virtualinvoke $r2.<com.hp.hpl.jena.sparql.core.VarExprList: void add(com.hp.hpl.jena.sparql.core.Var)>(r5);

        goto label4;

     label3:
        virtualinvoke $r2.<com.hp.hpl.jena.sparql.core.VarExprList: void add(com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.sparql.expr.Expr)>(r5, r9);

     label4:
        if $r6 == r9 goto label5;

        z1 = 1;

     label5:
        goto label1;

     label6:
        if z1 != 0 goto label7;

        return r0;

     label7:
        return $r2;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpGroup)
    {
        com.hp.hpl.jena.sparql.expr.ExprTransform $r13, $r19;
        java.util.ArrayList $r5;
        com.hp.hpl.jena.sparql.algebra.op.OpGroup r0, $r7, r21;
        com.hp.hpl.jena.sparql.expr.ExprAggregator r10, $r17;
        com.hp.hpl.jena.sparql.expr.Expr $r14, $r15, r20;
        com.hp.hpl.jena.sparql.core.VarExprList $r1, $r3;
        com.hp.hpl.jena.sparql.expr.aggregate.Aggregator $r11, $r16;
        com.hp.hpl.jena.sparql.algebra.Op $r8;
        boolean z0, $z1;
        com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor r2;
        java.util.Iterator $r6;
        com.hp.hpl.jena.sparql.core.Var $r18;
        java.util.List $r4;
        java.lang.Object $r9;
        com.hp.hpl.jena.sparql.expr.ExprVar $r12;

        r2 := @this: com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpGroup;

        z0 = 0;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpGroup: com.hp.hpl.jena.sparql.core.VarExprList getGroupVars()>();

        $r3 = specialinvoke r2.<com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor: com.hp.hpl.jena.sparql.core.VarExprList process(com.hp.hpl.jena.sparql.core.VarExprList)>($r1);

        if $r1 == $r3 goto label1;

        z0 = 1;

     label1:
        $r4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpGroup: java.util.List getAggregators()>();

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $r6 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r9 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r10 = (com.hp.hpl.jena.sparql.expr.ExprAggregator) $r9;

        $r11 = virtualinvoke r10.<com.hp.hpl.jena.sparql.expr.ExprAggregator: com.hp.hpl.jena.sparql.expr.aggregate.Aggregator getAggregator()>();

        virtualinvoke r10.<com.hp.hpl.jena.sparql.expr.ExprAggregator: com.hp.hpl.jena.sparql.core.Var getVar()>();

        $r12 = virtualinvoke r10.<com.hp.hpl.jena.sparql.expr.ExprAggregator: com.hp.hpl.jena.sparql.expr.ExprVar getAggVar()>();

        $r13 = r2.<com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor: com.hp.hpl.jena.sparql.expr.ExprTransform exprTransform>;

        $r14 = specialinvoke r2.<com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor: com.hp.hpl.jena.sparql.expr.Expr transform(com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.expr.ExprTransform)>($r12, $r13);

        if $r12 == $r14 goto label3;

        z0 = 1;

     label3:
        $r15 = interfaceinvoke $r11.<com.hp.hpl.jena.sparql.expr.aggregate.Aggregator: com.hp.hpl.jena.sparql.expr.Expr getExpr()>();

        r20 = $r15;

        if $r15 == null goto label4;

        $r19 = r2.<com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor: com.hp.hpl.jena.sparql.expr.ExprTransform exprTransform>;

        r20 = specialinvoke r2.<com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor: com.hp.hpl.jena.sparql.expr.Expr transform(com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.expr.ExprTransform)>($r15, $r19);

     label4:
        if $r15 == r20 goto label5;

        z0 = 1;

     label5:
        $r16 = interfaceinvoke $r11.<com.hp.hpl.jena.sparql.expr.aggregate.Aggregator: com.hp.hpl.jena.sparql.expr.aggregate.Aggregator copy(com.hp.hpl.jena.sparql.expr.Expr)>(r20);

        $r17 = new com.hp.hpl.jena.sparql.expr.ExprAggregator;

        $r18 = interfaceinvoke $r14.<com.hp.hpl.jena.sparql.expr.Expr: com.hp.hpl.jena.sparql.core.Var asVar()>();

        specialinvoke $r17.<com.hp.hpl.jena.sparql.expr.ExprAggregator: void <init>(com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.sparql.expr.aggregate.Aggregator)>($r18, $r16);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r17);

        goto label2;

     label6:
        r21 = r0;

        if z0 == 0 goto label7;

        $r7 = new com.hp.hpl.jena.sparql.algebra.op.OpGroup;

        $r8 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpGroup: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        specialinvoke $r7.<com.hp.hpl.jena.sparql.algebra.op.OpGroup: void <init>(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.core.VarExprList,java.util.List)>($r8, $r3, $r5);

        r21 = $r7;

     label7:
        virtualinvoke r2.<com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor: void visit1(com.hp.hpl.jena.sparql.algebra.op.Op1)>(r21);

        return;
    }

    protected void visit0(com.hp.hpl.jena.sparql.algebra.op.Op0)
    {
        com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor r0;
        com.hp.hpl.jena.sparql.algebra.op.Op0 r1;
        com.hp.hpl.jena.sparql.algebra.Transform $r2;
        com.hp.hpl.jena.sparql.algebra.Op $r3;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.Op0;

        $r2 = r0.<com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor: com.hp.hpl.jena.sparql.algebra.Transform transform>;

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.Op0: com.hp.hpl.jena.sparql.algebra.Op apply(com.hp.hpl.jena.sparql.algebra.Transform)>($r2);

        virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor: void push(com.hp.hpl.jena.sparql.algebra.Op)>($r3);

        return;
    }

    protected void visit1(com.hp.hpl.jena.sparql.algebra.op.Op1)
    {
        com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor r2;
        com.hp.hpl.jena.sparql.algebra.op.Op1 r0;
        com.hp.hpl.jena.sparql.algebra.Transform $r3;
        com.hp.hpl.jena.sparql.algebra.Op $r1, $r4, r5;

        r2 := @this: com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.Op1;

        r5 = null;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.Op1: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        if $r1 == null goto label1;

        r5 = virtualinvoke r2.<com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor: com.hp.hpl.jena.sparql.algebra.Op pop()>();

     label1:
        $r3 = r2.<com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor: com.hp.hpl.jena.sparql.algebra.Transform transform>;

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.Op1: com.hp.hpl.jena.sparql.algebra.Op apply(com.hp.hpl.jena.sparql.algebra.Transform,com.hp.hpl.jena.sparql.algebra.Op)>($r3, r5);

        virtualinvoke r2.<com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor: void push(com.hp.hpl.jena.sparql.algebra.Op)>($r4);

        return;
    }

    protected void visit2(com.hp.hpl.jena.sparql.algebra.op.Op2)
    {
        com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor r3;
        com.hp.hpl.jena.sparql.algebra.op.Op2 r0;
        com.hp.hpl.jena.sparql.algebra.Transform $r4;
        com.hp.hpl.jena.sparql.algebra.Op $r1, $r2, $r5, r6, r7;

        r3 := @this: com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.Op2;

        r6 = null;

        r7 = null;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.Op2: com.hp.hpl.jena.sparql.algebra.Op getRight()>();

        if $r1 == null goto label1;

        r7 = virtualinvoke r3.<com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor: com.hp.hpl.jena.sparql.algebra.Op pop()>();

     label1:
        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.Op2: com.hp.hpl.jena.sparql.algebra.Op getLeft()>();

        if $r2 == null goto label2;

        r6 = virtualinvoke r3.<com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor: com.hp.hpl.jena.sparql.algebra.Op pop()>();

     label2:
        $r4 = r3.<com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor: com.hp.hpl.jena.sparql.algebra.Transform transform>;

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.Op2: com.hp.hpl.jena.sparql.algebra.Op apply(com.hp.hpl.jena.sparql.algebra.Transform,com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.Op)>($r4, r6, r7);

        virtualinvoke r3.<com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor: void push(com.hp.hpl.jena.sparql.algebra.Op)>($r5);

        return;
    }

    protected void visitN(com.hp.hpl.jena.sparql.algebra.op.OpN)
    {
        java.util.Iterator $r2;
        com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor r3;
        java.util.ArrayList $r0;
        int $i0;
        com.hp.hpl.jena.sparql.algebra.op.OpN r1;
        com.hp.hpl.jena.sparql.algebra.Transform $r4;
        java.lang.Object $r6;
        com.hp.hpl.jena.sparql.algebra.Op $r5, r7, $r8;
        boolean $z0;

        r3 := @this: com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpN;

        $r0 = new java.util.ArrayList;

        $i0 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpN: int size()>();

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>($i0);

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpN: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r7 = (com.hp.hpl.jena.sparql.algebra.Op) $r6;

        $r8 = virtualinvoke r3.<com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor: com.hp.hpl.jena.sparql.algebra.Op pop()>();

        if $r8 == null goto label2;

        interfaceinvoke $r0.<java.util.List: void add(int,java.lang.Object)>(0, $r8);

     label2:
        goto label1;

     label3:
        $r4 = r3.<com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor: com.hp.hpl.jena.sparql.algebra.Transform transform>;

        $r5 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpN: com.hp.hpl.jena.sparql.algebra.Op apply(com.hp.hpl.jena.sparql.algebra.Transform,java.util.List)>($r4, $r0);

        virtualinvoke r3.<com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor: void push(com.hp.hpl.jena.sparql.algebra.Op)>($r5);

        return;
    }

    protected void visitFilter(com.hp.hpl.jena.sparql.algebra.op.OpFilter)
    {
        com.hp.hpl.jena.sparql.expr.ExprTransform $r12;
        com.hp.hpl.jena.sparql.expr.Expr r11, $r13;
        com.hp.hpl.jena.sparql.expr.ExprList $r3, $r4;
        com.hp.hpl.jena.sparql.algebra.Op $r1, $r2, $r8, $r9, r14;
        boolean $z0, z1, $z2;
        com.hp.hpl.jena.sparql.algebra.op.OpFilter r0, r15;
        java.util.Iterator $r5;
        com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor r6;
        com.hp.hpl.jena.sparql.algebra.Transform $r7;
        java.lang.Object $r10;

        r6 := @this: com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpFilter;

        r14 = null;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpFilter: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        if $r1 == null goto label1;

        r14 = virtualinvoke r6.<com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor: com.hp.hpl.jena.sparql.algebra.Op pop()>();

     label1:
        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpFilter: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        if $r2 == r14 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        z1 = $z0;

        $r3 = new com.hp.hpl.jena.sparql.expr.ExprList;

        specialinvoke $r3.<com.hp.hpl.jena.sparql.expr.ExprList: void <init>()>();

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpFilter: com.hp.hpl.jena.sparql.expr.ExprList getExprs()>();

        $r5 = virtualinvoke $r4.<com.hp.hpl.jena.sparql.expr.ExprList: java.util.Iterator iterator()>();

     label4:
        $z2 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        $r10 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r11 = (com.hp.hpl.jena.sparql.expr.Expr) $r10;

        $r12 = r6.<com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor: com.hp.hpl.jena.sparql.expr.ExprTransform exprTransform>;

        $r13 = specialinvoke r6.<com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor: com.hp.hpl.jena.sparql.expr.Expr transform(com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.expr.ExprTransform)>(r11, $r12);

        virtualinvoke $r3.<com.hp.hpl.jena.sparql.expr.ExprList: void add(com.hp.hpl.jena.sparql.expr.Expr)>($r13);

        if r11 == $r13 goto label5;

        z1 = 1;

     label5:
        goto label4;

     label6:
        r15 = r0;

        if z1 == 0 goto label7;

        $r9 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpFilter: com.hp.hpl.jena.sparql.algebra.Op filter(com.hp.hpl.jena.sparql.expr.ExprList,com.hp.hpl.jena.sparql.algebra.Op)>($r3, r14);

        r15 = (com.hp.hpl.jena.sparql.algebra.op.OpFilter) $r9;

     label7:
        $r7 = r6.<com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor: com.hp.hpl.jena.sparql.algebra.Transform transform>;

        $r8 = virtualinvoke r15.<com.hp.hpl.jena.sparql.algebra.op.OpFilter: com.hp.hpl.jena.sparql.algebra.Op apply(com.hp.hpl.jena.sparql.algebra.Transform,com.hp.hpl.jena.sparql.algebra.Op)>($r7, r14);

        virtualinvoke r6.<com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor: void push(com.hp.hpl.jena.sparql.algebra.Op)>($r8);

        return;
    }

    protected void visitExt(com.hp.hpl.jena.sparql.algebra.op.OpExt)
    {
        com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor r0;
        com.hp.hpl.jena.sparql.algebra.op.OpExt r1;
        com.hp.hpl.jena.sparql.algebra.Transform $r2;
        com.hp.hpl.jena.sparql.algebra.Op $r3;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpExt;

        $r2 = r0.<com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor: com.hp.hpl.jena.sparql.algebra.Transform transform>;

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.sparql.algebra.Transform: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpExt)>(r1);

        virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.Transformer$ApplyTransformVisitor: void push(com.hp.hpl.jena.sparql.algebra.Op)>($r3);

        return;
    }
}
