public class com.hp.hpl.jena.sparql.graph.GraphSPARQL extends com.hp.hpl.jena.graph.impl.GraphBase implements com.hp.hpl.jena.graph.Graph
{
    private static org.slf4j.Logger log;
    private com.hp.hpl.jena.sparql.core.DatasetGraph dataset;
    private com.hp.hpl.jena.sparql.engine.QueryEngineFactory factory;

    public void <init>(com.hp.hpl.jena.sparql.core.DatasetGraph, com.hp.hpl.jena.sparql.engine.QueryEngineFactory)
    {
        com.hp.hpl.jena.sparql.core.DatasetGraph r1;
        com.hp.hpl.jena.sparql.engine.QueryEngineFactory r2;
        com.hp.hpl.jena.sparql.graph.GraphSPARQL r0;

        r0 := @this: com.hp.hpl.jena.sparql.graph.GraphSPARQL;

        r1 := @parameter0: com.hp.hpl.jena.sparql.core.DatasetGraph;

        r2 := @parameter1: com.hp.hpl.jena.sparql.engine.QueryEngineFactory;

        specialinvoke r0.<com.hp.hpl.jena.graph.impl.GraphBase: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.graph.GraphSPARQL: com.hp.hpl.jena.sparql.core.DatasetGraph dataset> = r1;

        r0.<com.hp.hpl.jena.sparql.graph.GraphSPARQL: com.hp.hpl.jena.sparql.engine.QueryEngineFactory factory> = r2;

        return;
    }

    public void <init>(com.hp.hpl.jena.sparql.core.DatasetGraph, java.lang.String)
    {
        com.hp.hpl.jena.sparql.graph.GraphSPARQL r0;
        java.lang.String r2;
        com.hp.hpl.jena.graph.Node $r3;
        com.hp.hpl.jena.sparql.core.DatasetGraph r1;

        r0 := @this: com.hp.hpl.jena.sparql.graph.GraphSPARQL;

        r1 := @parameter0: com.hp.hpl.jena.sparql.core.DatasetGraph;

        r2 := @parameter1: java.lang.String;

        $r3 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createURI(java.lang.String)>(r2);

        specialinvoke r0.<com.hp.hpl.jena.sparql.graph.GraphSPARQL: void <init>(com.hp.hpl.jena.sparql.core.DatasetGraph,com.hp.hpl.jena.graph.Node)>(r1, $r3);

        return;
    }

    public void <init>(com.hp.hpl.jena.sparql.core.DatasetGraph, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.sparql.graph.GraphSPARQL r0;
        com.hp.hpl.jena.graph.Node r3;
        com.hp.hpl.jena.sparql.core.DatasetGraph r1, $r2, $r4;
        com.hp.hpl.jena.graph.Graph $r5;

        r0 := @this: com.hp.hpl.jena.sparql.graph.GraphSPARQL;

        r1 := @parameter0: com.hp.hpl.jena.sparql.core.DatasetGraph;

        r3 := @parameter1: com.hp.hpl.jena.graph.Node;

        specialinvoke r0.<com.hp.hpl.jena.graph.impl.GraphBase: void <init>()>();

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.core.DatasetGraphFactory: com.hp.hpl.jena.sparql.core.DatasetGraph create(com.hp.hpl.jena.sparql.core.DatasetGraph)>(r1);

        r0.<com.hp.hpl.jena.sparql.graph.GraphSPARQL: com.hp.hpl.jena.sparql.core.DatasetGraph dataset> = $r2;

        $r4 = r0.<com.hp.hpl.jena.sparql.graph.GraphSPARQL: com.hp.hpl.jena.sparql.core.DatasetGraph dataset>;

        $r5 = interfaceinvoke r1.<com.hp.hpl.jena.sparql.core.DatasetGraph: com.hp.hpl.jena.graph.Graph getGraph(com.hp.hpl.jena.graph.Node)>(r3);

        interfaceinvoke $r4.<com.hp.hpl.jena.sparql.core.DatasetGraph: void setDefaultGraph(com.hp.hpl.jena.graph.Graph)>($r5);

        r0.<com.hp.hpl.jena.sparql.graph.GraphSPARQL: com.hp.hpl.jena.sparql.engine.QueryEngineFactory factory> = null;

        return;
    }

    public void <init>(com.hp.hpl.jena.graph.Graph)
    {
        com.hp.hpl.jena.sparql.graph.GraphSPARQL r0;
        com.hp.hpl.jena.graph.Graph r1;

        r0 := @this: com.hp.hpl.jena.sparql.graph.GraphSPARQL;

        r1 := @parameter0: com.hp.hpl.jena.graph.Graph;

        specialinvoke r0.<com.hp.hpl.jena.sparql.graph.GraphSPARQL: void <init>(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.sparql.engine.QueryEngineFactory)>(r1, null);

        return;
    }

    public void <init>(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.sparql.engine.QueryEngineFactory)
    {
        com.hp.hpl.jena.sparql.engine.QueryEngineFactory r3;
        com.hp.hpl.jena.sparql.graph.GraphSPARQL r0;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r2;
        com.hp.hpl.jena.graph.Graph r1;

        r0 := @this: com.hp.hpl.jena.sparql.graph.GraphSPARQL;

        r1 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r3 := @parameter1: com.hp.hpl.jena.sparql.engine.QueryEngineFactory;

        specialinvoke r0.<com.hp.hpl.jena.graph.impl.GraphBase: void <init>()>();

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.core.DatasetGraphFactory: com.hp.hpl.jena.sparql.core.DatasetGraph createOneGraph(com.hp.hpl.jena.graph.Graph)>(r1);

        r0.<com.hp.hpl.jena.sparql.graph.GraphSPARQL: com.hp.hpl.jena.sparql.core.DatasetGraph dataset> = $r2;

        r0.<com.hp.hpl.jena.sparql.graph.GraphSPARQL: com.hp.hpl.jena.sparql.engine.QueryEngineFactory factory> = r3;

        return;
    }

    private com.hp.hpl.jena.sparql.core.DatasetGraph toDSG(com.hp.hpl.jena.sparql.core.DatasetGraph, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.sparql.graph.GraphSPARQL r3;
        com.hp.hpl.jena.graph.Node r0;
        com.hp.hpl.jena.sparql.core.DatasetGraph r1, $r2;
        com.hp.hpl.jena.graph.Graph $r4;

        r3 := @this: com.hp.hpl.jena.sparql.graph.GraphSPARQL;

        r1 := @parameter0: com.hp.hpl.jena.sparql.core.DatasetGraph;

        r0 := @parameter1: com.hp.hpl.jena.graph.Node;

        if r0 != null goto label1;

        $r4 = interfaceinvoke r1.<com.hp.hpl.jena.sparql.core.DatasetGraph: com.hp.hpl.jena.graph.Graph getDefaultGraph()>();

        goto label2;

     label1:
        $r4 = interfaceinvoke r1.<com.hp.hpl.jena.sparql.core.DatasetGraph: com.hp.hpl.jena.graph.Graph getGraph(com.hp.hpl.jena.graph.Node)>(r0);

     label2:
        $r2 = staticinvoke <com.hp.hpl.jena.sparql.core.DatasetGraphFactory: com.hp.hpl.jena.sparql.core.DatasetGraph create(com.hp.hpl.jena.graph.Graph)>($r4);

        return $r2;
    }

    public com.hp.hpl.jena.graph.Capabilities getCapabilities()
    {
        com.hp.hpl.jena.sparql.graph.GraphSPARQL$1 $r3;
        com.hp.hpl.jena.sparql.graph.GraphSPARQL r0;
        com.hp.hpl.jena.graph.Capabilities $r1, $r2;

        r0 := @this: com.hp.hpl.jena.sparql.graph.GraphSPARQL;

        $r1 = r0.<com.hp.hpl.jena.sparql.graph.GraphSPARQL: com.hp.hpl.jena.graph.Capabilities capabilities>;

        if $r1 != null goto label1;

        $r3 = new com.hp.hpl.jena.sparql.graph.GraphSPARQL$1;

        specialinvoke $r3.<com.hp.hpl.jena.sparql.graph.GraphSPARQL$1: void <init>(com.hp.hpl.jena.sparql.graph.GraphSPARQL)>(r0);

        r0.<com.hp.hpl.jena.sparql.graph.GraphSPARQL: com.hp.hpl.jena.graph.Capabilities capabilities> = $r3;

     label1:
        $r2 = r0.<com.hp.hpl.jena.sparql.graph.GraphSPARQL: com.hp.hpl.jena.graph.Capabilities capabilities>;

        return $r2;
    }

    public com.hp.hpl.jena.sparql.core.DatasetGraph getDataset()
    {
        com.hp.hpl.jena.sparql.core.DatasetGraph $r1;
        com.hp.hpl.jena.sparql.graph.GraphSPARQL r0;

        r0 := @this: com.hp.hpl.jena.sparql.graph.GraphSPARQL;

        $r1 = r0.<com.hp.hpl.jena.sparql.graph.GraphSPARQL: com.hp.hpl.jena.sparql.core.DatasetGraph dataset>;

        return $r1;
    }

    protected com.hp.hpl.jena.util.iterator.ExtendedIterator graphBaseFind(com.hp.hpl.jena.graph.TripleMatch)
    {
        com.hp.hpl.jena.graph.Node $r1, $r2, $r3, r27, r29, r31, r33, r34, r35;
        com.hp.hpl.jena.graph.TripleMatch r0;
        boolean $z0, $z1;
        com.hp.hpl.jena.graph.Triple $r4, $r17;
        com.hp.hpl.jena.sparql.engine.binding.Binding $r10, $r16;
        com.hp.hpl.jena.sparql.engine.QueryEngineFactory $r8;
        java.lang.StringBuilder $r19, $r21, $r22;
        com.hp.hpl.jena.sparql.engine.QueryIterator $r12;
        com.hp.hpl.jena.util.iterator.WrappedIterator $r15;
        com.hp.hpl.jena.sparql.graph.GraphSPARQL r7;
        com.hp.hpl.jena.sparql.engine.Plan $r11;
        java.util.ArrayList $r13;
        java.lang.String $r23;
        org.slf4j.Logger $r18, $r20;
        java.util.Iterator $r14;
        com.hp.hpl.jena.sparql.core.BasicPattern $r5;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r9;
        com.hp.hpl.jena.sparql.core.Var $r24, $r25, $r26, r28, r30, r32;
        com.hp.hpl.jena.sparql.algebra.op.OpBGP $r6;

        r7 := @this: com.hp.hpl.jena.sparql.graph.GraphSPARQL;

        r0 := @parameter0: com.hp.hpl.jena.graph.TripleMatch;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.graph.TripleMatch: com.hp.hpl.jena.graph.Node getMatchSubject()>();

        r27 = $r1;

        r28 = null;

        if $r1 != null goto label1;

        $r26 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: com.hp.hpl.jena.sparql.core.Var alloc(java.lang.String)>("s");

        r28 = $r26;

        r27 = $r26;

     label1:
        $r2 = interfaceinvoke r0.<com.hp.hpl.jena.graph.TripleMatch: com.hp.hpl.jena.graph.Node getMatchPredicate()>();

        r29 = $r2;

        r30 = null;

        if $r2 != null goto label2;

        $r25 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: com.hp.hpl.jena.sparql.core.Var alloc(java.lang.String)>("p");

        r30 = $r25;

        r29 = $r25;

     label2:
        $r3 = interfaceinvoke r0.<com.hp.hpl.jena.graph.TripleMatch: com.hp.hpl.jena.graph.Node getMatchObject()>();

        r31 = $r3;

        r32 = null;

        if $r3 != null goto label3;

        $r24 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: com.hp.hpl.jena.sparql.core.Var alloc(java.lang.String)>("o");

        r32 = $r24;

        r31 = $r24;

     label3:
        $r4 = new com.hp.hpl.jena.graph.Triple;

        specialinvoke $r4.<com.hp.hpl.jena.graph.Triple: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r27, r29, r31);

        $r5 = new com.hp.hpl.jena.sparql.core.BasicPattern;

        specialinvoke $r5.<com.hp.hpl.jena.sparql.core.BasicPattern: void <init>()>();

        virtualinvoke $r5.<com.hp.hpl.jena.sparql.core.BasicPattern: void add(com.hp.hpl.jena.graph.Triple)>($r4);

        $r6 = new com.hp.hpl.jena.sparql.algebra.op.OpBGP;

        specialinvoke $r6.<com.hp.hpl.jena.sparql.algebra.op.OpBGP: void <init>(com.hp.hpl.jena.sparql.core.BasicPattern)>($r5);

        $r8 = r7.<com.hp.hpl.jena.sparql.graph.GraphSPARQL: com.hp.hpl.jena.sparql.engine.QueryEngineFactory factory>;

        $r9 = virtualinvoke r7.<com.hp.hpl.jena.sparql.graph.GraphSPARQL: com.hp.hpl.jena.sparql.core.DatasetGraph getDataset()>();

        $r10 = staticinvoke <com.hp.hpl.jena.sparql.engine.binding.BindingRoot: com.hp.hpl.jena.sparql.engine.binding.Binding create()>();

        $r11 = interfaceinvoke $r8.<com.hp.hpl.jena.sparql.engine.QueryEngineFactory: com.hp.hpl.jena.sparql.engine.Plan create(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.core.DatasetGraph,com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.util.Context)>($r6, $r9, $r10, null);

        $r12 = interfaceinvoke $r11.<com.hp.hpl.jena.sparql.engine.Plan: com.hp.hpl.jena.sparql.engine.QueryIterator iterator()>();

        $r13 = new java.util.ArrayList;

        specialinvoke $r13.<java.util.ArrayList: void <init>()>();

     label4:
        $z1 = interfaceinvoke $r12.<com.hp.hpl.jena.sparql.engine.QueryIterator: boolean hasNext()>();

        if $z1 == 0 goto label9;

        $r16 = interfaceinvoke $r12.<com.hp.hpl.jena.sparql.engine.QueryIterator: com.hp.hpl.jena.sparql.engine.binding.Binding nextBinding()>();

        r33 = r27;

        r34 = r29;

        r35 = r31;

        if r28 == null goto label5;

        r33 = interfaceinvoke $r16.<com.hp.hpl.jena.sparql.engine.binding.Binding: com.hp.hpl.jena.graph.Node get(com.hp.hpl.jena.sparql.core.Var)>(r28);

     label5:
        if r30 == null goto label6;

        r34 = interfaceinvoke $r16.<com.hp.hpl.jena.sparql.engine.binding.Binding: com.hp.hpl.jena.graph.Node get(com.hp.hpl.jena.sparql.core.Var)>(r30);

     label6:
        if r32 == null goto label7;

        r35 = interfaceinvoke $r16.<com.hp.hpl.jena.sparql.engine.binding.Binding: com.hp.hpl.jena.graph.Node get(com.hp.hpl.jena.sparql.core.Var)>(r32);

     label7:
        $r17 = new com.hp.hpl.jena.graph.Triple;

        specialinvoke $r17.<com.hp.hpl.jena.graph.Triple: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r33, r34, r35);

        $r18 = <com.hp.hpl.jena.sparql.graph.GraphSPARQL: org.slf4j.Logger log>;

        $z0 = interfaceinvoke $r18.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label8;

        $r20 = <com.hp.hpl.jena.sparql.graph.GraphSPARQL: org.slf4j.Logger log>;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r17);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r20.<org.slf4j.Logger: void debug(java.lang.String)>($r23);

     label8:
        interfaceinvoke $r13.<java.util.List: boolean add(java.lang.Object)>($r17);

        goto label4;

     label9:
        interfaceinvoke $r12.<com.hp.hpl.jena.sparql.engine.QueryIterator: void close()>();

        $r14 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>();

        $r15 = staticinvoke <com.hp.hpl.jena.util.iterator.WrappedIterator: com.hp.hpl.jena.util.iterator.WrappedIterator createNoRemove(java.util.Iterator)>($r14);

        return $r15;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/hp/hpl/jena/sparql/graph/GraphSPARQL;");

        <com.hp.hpl.jena.sparql.graph.GraphSPARQL: org.slf4j.Logger log> = $r0;

        return;
    }
}
