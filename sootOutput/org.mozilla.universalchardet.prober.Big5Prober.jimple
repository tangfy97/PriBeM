public class org.mozilla.universalchardet.prober.Big5Prober extends org.mozilla.universalchardet.prober.CharsetProber
{
    private org.mozilla.universalchardet.prober.statemachine.CodingStateMachine codingSM;
    private org.mozilla.universalchardet.prober.CharsetProber$ProbingState state;
    private org.mozilla.universalchardet.prober.distributionanalysis.Big5DistributionAnalysis distributionAnalyzer;
    private byte[] lastChar;
    private static final org.mozilla.universalchardet.prober.statemachine.SMModel smModel;

    public void <init>()
    {
        byte[] $r4;
        org.mozilla.universalchardet.prober.statemachine.CodingStateMachine $r1;
        org.mozilla.universalchardet.prober.distributionanalysis.Big5DistributionAnalysis $r3;
        org.mozilla.universalchardet.prober.statemachine.SMModel $r2;
        org.mozilla.universalchardet.prober.Big5Prober r0;

        r0 := @this: org.mozilla.universalchardet.prober.Big5Prober;

        specialinvoke r0.<org.mozilla.universalchardet.prober.CharsetProber: void <init>()>();

        $r1 = new org.mozilla.universalchardet.prober.statemachine.CodingStateMachine;

        $r2 = <org.mozilla.universalchardet.prober.Big5Prober: org.mozilla.universalchardet.prober.statemachine.SMModel smModel>;

        specialinvoke $r1.<org.mozilla.universalchardet.prober.statemachine.CodingStateMachine: void <init>(org.mozilla.universalchardet.prober.statemachine.SMModel)>($r2);

        r0.<org.mozilla.universalchardet.prober.Big5Prober: org.mozilla.universalchardet.prober.statemachine.CodingStateMachine codingSM> = $r1;

        $r3 = new org.mozilla.universalchardet.prober.distributionanalysis.Big5DistributionAnalysis;

        specialinvoke $r3.<org.mozilla.universalchardet.prober.distributionanalysis.Big5DistributionAnalysis: void <init>()>();

        r0.<org.mozilla.universalchardet.prober.Big5Prober: org.mozilla.universalchardet.prober.distributionanalysis.Big5DistributionAnalysis distributionAnalyzer> = $r3;

        $r4 = newarray (byte)[2];

        r0.<org.mozilla.universalchardet.prober.Big5Prober: byte[] lastChar> = $r4;

        virtualinvoke r0.<org.mozilla.universalchardet.prober.Big5Prober: void reset()>();

        return;
    }

    public java.lang.String getCharSetName()
    {
        java.lang.String $r0;
        org.mozilla.universalchardet.prober.Big5Prober r1;

        r1 := @this: org.mozilla.universalchardet.prober.Big5Prober;

        $r0 = <org.mozilla.universalchardet.Constants: java.lang.String CHARSET_BIG5>;

        return $r0;
    }

    public float getConfidence()
    {
        float $f0;
        org.mozilla.universalchardet.prober.distributionanalysis.Big5DistributionAnalysis $r1;
        org.mozilla.universalchardet.prober.Big5Prober r0;

        r0 := @this: org.mozilla.universalchardet.prober.Big5Prober;

        $r1 = r0.<org.mozilla.universalchardet.prober.Big5Prober: org.mozilla.universalchardet.prober.distributionanalysis.Big5DistributionAnalysis distributionAnalyzer>;

        $f0 = virtualinvoke $r1.<org.mozilla.universalchardet.prober.distributionanalysis.Big5DistributionAnalysis: float getConfidence()>();

        return $f0;
    }

    public org.mozilla.universalchardet.prober.CharsetProber$ProbingState getState()
    {
        org.mozilla.universalchardet.prober.CharsetProber$ProbingState $r1;
        org.mozilla.universalchardet.prober.Big5Prober r0;

        r0 := @this: org.mozilla.universalchardet.prober.Big5Prober;

        $r1 = r0.<org.mozilla.universalchardet.prober.Big5Prober: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state>;

        return $r1;
    }

    public org.mozilla.universalchardet.prober.CharsetProber$ProbingState handleData(byte[], int, int)
    {
        byte[] r1, $r7, $r8, $r12;
        org.mozilla.universalchardet.prober.Big5Prober r0;
        byte $b3, $b4, $b8, $b11;
        int i0, i1, i2, $i5, $i6, $i7, i9, $i10, $i12;
        boolean $z0;
        org.mozilla.universalchardet.prober.CharsetProber$ProbingState $r3, $r10, $r11, $r13, $r14, $r15;
        org.mozilla.universalchardet.prober.statemachine.CodingStateMachine $r4, $r5;
        float $f0;
        org.mozilla.universalchardet.prober.distributionanalysis.Big5DistributionAnalysis $r2, $r6, $r9;

        r0 := @this: org.mozilla.universalchardet.prober.Big5Prober;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 = i0 + i1;

        i9 = i0;

     label1:
        if i9 >= i2 goto label6;

        $r4 = r0.<org.mozilla.universalchardet.prober.Big5Prober: org.mozilla.universalchardet.prober.statemachine.CodingStateMachine codingSM>;

        $b4 = r1[i9];

        $i5 = virtualinvoke $r4.<org.mozilla.universalchardet.prober.statemachine.CodingStateMachine: int nextState(byte)>($b4);

        if $i5 != 1 goto label2;

        $r11 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState NOT_ME>;

        r0.<org.mozilla.universalchardet.prober.Big5Prober: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state> = $r11;

        goto label6;

     label2:
        if $i5 != 2 goto label3;

        $r10 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState FOUND_IT>;

        r0.<org.mozilla.universalchardet.prober.Big5Prober: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state> = $r10;

        goto label6;

     label3:
        if $i5 != 0 goto label5;

        $r5 = r0.<org.mozilla.universalchardet.prober.Big5Prober: org.mozilla.universalchardet.prober.statemachine.CodingStateMachine codingSM>;

        $i6 = virtualinvoke $r5.<org.mozilla.universalchardet.prober.statemachine.CodingStateMachine: int getCurrentCharLen()>();

        if i9 != i0 goto label4;

        $r7 = r0.<org.mozilla.universalchardet.prober.Big5Prober: byte[] lastChar>;

        $b8 = r1[i0];

        $r7[1] = $b8;

        $r9 = r0.<org.mozilla.universalchardet.prober.Big5Prober: org.mozilla.universalchardet.prober.distributionanalysis.Big5DistributionAnalysis distributionAnalyzer>;

        $r8 = r0.<org.mozilla.universalchardet.prober.Big5Prober: byte[] lastChar>;

        virtualinvoke $r9.<org.mozilla.universalchardet.prober.distributionanalysis.Big5DistributionAnalysis: void handleOneChar(byte[],int,int)>($r8, 0, $i6);

        goto label5;

     label4:
        $r6 = r0.<org.mozilla.universalchardet.prober.Big5Prober: org.mozilla.universalchardet.prober.distributionanalysis.Big5DistributionAnalysis distributionAnalyzer>;

        $i7 = i9 - 1;

        virtualinvoke $r6.<org.mozilla.universalchardet.prober.distributionanalysis.Big5DistributionAnalysis: void handleOneChar(byte[],int,int)>(r1, $i7, $i6);

     label5:
        i9 = i9 + 1;

        goto label1;

     label6:
        $r12 = r0.<org.mozilla.universalchardet.prober.Big5Prober: byte[] lastChar>;

        $i10 = i2 - 1;

        $b11 = r1[$i10];

        $r12[0] = $b11;

        $r13 = r0.<org.mozilla.universalchardet.prober.Big5Prober: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state>;

        $r14 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState DETECTING>;

        if $r13 != $r14 goto label7;

        $r2 = r0.<org.mozilla.universalchardet.prober.Big5Prober: org.mozilla.universalchardet.prober.distributionanalysis.Big5DistributionAnalysis distributionAnalyzer>;

        $z0 = virtualinvoke $r2.<org.mozilla.universalchardet.prober.distributionanalysis.Big5DistributionAnalysis: boolean gotEnoughData()>();

        if $z0 == 0 goto label7;

        $f0 = virtualinvoke r0.<org.mozilla.universalchardet.prober.Big5Prober: float getConfidence()>();

        $b3 = $f0 cmpl 0.95F;

        $i12 = (int) $b3;

        if $i12 <= 0 goto label7;

        $r3 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState FOUND_IT>;

        r0.<org.mozilla.universalchardet.prober.Big5Prober: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state> = $r3;

     label7:
        $r15 = r0.<org.mozilla.universalchardet.prober.Big5Prober: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state>;

        return $r15;
    }

    public void reset()
    {
        org.mozilla.universalchardet.prober.CharsetProber$ProbingState $r2;
        byte[] $r4;
        org.mozilla.universalchardet.prober.statemachine.CodingStateMachine $r1;
        org.mozilla.universalchardet.prober.distributionanalysis.Big5DistributionAnalysis $r3;
        org.mozilla.universalchardet.prober.Big5Prober r0;

        r0 := @this: org.mozilla.universalchardet.prober.Big5Prober;

        $r1 = r0.<org.mozilla.universalchardet.prober.Big5Prober: org.mozilla.universalchardet.prober.statemachine.CodingStateMachine codingSM>;

        virtualinvoke $r1.<org.mozilla.universalchardet.prober.statemachine.CodingStateMachine: void reset()>();

        $r2 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState DETECTING>;

        r0.<org.mozilla.universalchardet.prober.Big5Prober: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state> = $r2;

        $r3 = r0.<org.mozilla.universalchardet.prober.Big5Prober: org.mozilla.universalchardet.prober.distributionanalysis.Big5DistributionAnalysis distributionAnalyzer>;

        virtualinvoke $r3.<org.mozilla.universalchardet.prober.distributionanalysis.Big5DistributionAnalysis: void reset()>();

        $r4 = r0.<org.mozilla.universalchardet.prober.Big5Prober: byte[] lastChar>;

        staticinvoke <java.util.Arrays: void fill(byte[],byte)>($r4, 0);

        return;
    }

    public void setOption()
    {
        org.mozilla.universalchardet.prober.Big5Prober r0;

        r0 := @this: org.mozilla.universalchardet.prober.Big5Prober;

        return;
    }

    static void <clinit>()
    {
        org.mozilla.universalchardet.prober.statemachine.Big5SMModel $r0;

        $r0 = new org.mozilla.universalchardet.prober.statemachine.Big5SMModel;

        specialinvoke $r0.<org.mozilla.universalchardet.prober.statemachine.Big5SMModel: void <init>()>();

        <org.mozilla.universalchardet.prober.Big5Prober: org.mozilla.universalchardet.prober.statemachine.SMModel smModel> = $r0;

        return;
    }
}
