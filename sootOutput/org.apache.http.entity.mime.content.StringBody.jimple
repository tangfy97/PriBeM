public class org.apache.http.entity.mime.content.StringBody extends org.apache.http.entity.mime.content.AbstractContentBody
{
    private final byte[] content;
    private final java.nio.charset.Charset charset;

    public static org.apache.http.entity.mime.content.StringBody create(java.lang.String, java.lang.String, java.nio.charset.Charset) throws java.lang.IllegalArgumentException
    {
        java.lang.IllegalArgumentException $r5;
        java.nio.charset.Charset r3;
        org.apache.http.entity.mime.content.StringBody $r0;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;
        java.lang.String r1, r2, $r10;
        java.io.UnsupportedEncodingException $r4;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.nio.charset.Charset;

     label1:
        $r0 = new org.apache.http.entity.mime.content.StringBody;

        specialinvoke $r0.<org.apache.http.entity.mime.content.StringBody: void <init>(java.lang.String,java.lang.String,java.nio.charset.Charset)>(r1, r2, r3);

     label2:
        return $r0;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Charset ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not supported");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r10, $r4);

        throw $r5;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public static org.apache.http.entity.mime.content.StringBody create(java.lang.String, java.nio.charset.Charset) throws java.lang.IllegalArgumentException
    {
        org.apache.http.entity.mime.content.StringBody $r2;
        java.lang.String r0;
        java.nio.charset.Charset r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.nio.charset.Charset;

        $r2 = staticinvoke <org.apache.http.entity.mime.content.StringBody: org.apache.http.entity.mime.content.StringBody create(java.lang.String,java.lang.String,java.nio.charset.Charset)>(r0, null, r1);

        return $r2;
    }

    public static org.apache.http.entity.mime.content.StringBody create(java.lang.String) throws java.lang.IllegalArgumentException
    {
        org.apache.http.entity.mime.content.StringBody $r1;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.http.entity.mime.content.StringBody: org.apache.http.entity.mime.content.StringBody create(java.lang.String,java.lang.String,java.nio.charset.Charset)>(r0, null, null);

        return $r1;
    }

    public void <init>(java.lang.String, java.lang.String, java.nio.charset.Charset) throws java.io.UnsupportedEncodingException
    {
        byte[] $r4;
        java.nio.charset.Charset r6;
        org.apache.http.entity.mime.content.StringBody r0;
        java.lang.String r1, r2, $r3;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: org.apache.http.entity.mime.content.StringBody;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r6 := @parameter2: java.nio.charset.Charset;

        specialinvoke r0.<org.apache.http.entity.mime.content.AbstractContentBody: void <init>(java.lang.String)>(r1);

        if r2 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Text may not be null");

        throw $r5;

     label1:
        if r6 != null goto label2;

        r6 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("US-ASCII");

     label2:
        $r3 = virtualinvoke r6.<java.nio.charset.Charset: java.lang.String name()>();

        $r4 = virtualinvoke r2.<java.lang.String: byte[] getBytes(java.lang.String)>($r3);

        r0.<org.apache.http.entity.mime.content.StringBody: byte[] content> = $r4;

        r0.<org.apache.http.entity.mime.content.StringBody: java.nio.charset.Charset charset> = r6;

        return;
    }

    public void <init>(java.lang.String, java.nio.charset.Charset) throws java.io.UnsupportedEncodingException
    {
        org.apache.http.entity.mime.content.StringBody r0;
        java.lang.String r1;
        java.nio.charset.Charset r2;

        r0 := @this: org.apache.http.entity.mime.content.StringBody;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.nio.charset.Charset;

        specialinvoke r0.<org.apache.http.entity.mime.content.StringBody: void <init>(java.lang.String,java.lang.String,java.nio.charset.Charset)>(r1, "text/plain", r2);

        return;
    }

    public void <init>(java.lang.String) throws java.io.UnsupportedEncodingException
    {
        org.apache.http.entity.mime.content.StringBody r0;
        java.lang.String r1;

        r0 := @this: org.apache.http.entity.mime.content.StringBody;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.http.entity.mime.content.StringBody: void <init>(java.lang.String,java.lang.String,java.nio.charset.Charset)>(r1, "text/plain", null);

        return;
    }

    public java.io.Reader getReader()
    {
        byte[] $r3;
        java.io.ByteArrayInputStream $r1;
        java.nio.charset.Charset $r4;
        org.apache.http.entity.mime.content.StringBody r2;
        java.io.InputStreamReader $r0;

        r2 := @this: org.apache.http.entity.mime.content.StringBody;

        $r0 = new java.io.InputStreamReader;

        $r1 = new java.io.ByteArrayInputStream;

        $r3 = r2.<org.apache.http.entity.mime.content.StringBody: byte[] content>;

        specialinvoke $r1.<java.io.ByteArrayInputStream: void <init>(byte[])>($r3);

        $r4 = r2.<org.apache.http.entity.mime.content.StringBody: java.nio.charset.Charset charset>;

        specialinvoke $r0.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>($r1, $r4);

        return $r0;
    }

    public void writeTo(java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r0;
        byte[] $r3, r4;
        java.lang.IllegalArgumentException $r6;
        java.io.ByteArrayInputStream $r7;
        int $i0, $i2;
        org.apache.http.entity.mime.content.StringBody r2;

        r2 := @this: org.apache.http.entity.mime.content.StringBody;

        r0 := @parameter0: java.io.OutputStream;

        if r0 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Output stream may not be null");

        throw $r6;

     label1:
        $r7 = new java.io.ByteArrayInputStream;

        $r3 = r2.<org.apache.http.entity.mime.content.StringBody: byte[] content>;

        specialinvoke $r7.<java.io.ByteArrayInputStream: void <init>(byte[])>($r3);

        r4 = newarray (byte)[4096];

     label2:
        $i0 = virtualinvoke $r7.<java.io.InputStream: int read(byte[])>(r4);

        $i2 = (int) -1;

        if $i0 == $i2 goto label3;

        virtualinvoke r0.<java.io.OutputStream: void write(byte[],int,int)>(r4, 0, $i0);

        goto label2;

     label3:
        virtualinvoke r0.<java.io.OutputStream: void flush()>();

        return;
    }

    public java.lang.String getTransferEncoding()
    {
        org.apache.http.entity.mime.content.StringBody r0;

        r0 := @this: org.apache.http.entity.mime.content.StringBody;

        return "8bit";
    }

    public java.lang.String getCharset()
    {
        org.apache.http.entity.mime.content.StringBody r0;
        java.lang.String $r2;
        java.nio.charset.Charset $r1;

        r0 := @this: org.apache.http.entity.mime.content.StringBody;

        $r1 = r0.<org.apache.http.entity.mime.content.StringBody: java.nio.charset.Charset charset>;

        $r2 = virtualinvoke $r1.<java.nio.charset.Charset: java.lang.String name()>();

        return $r2;
    }

    public long getContentLength()
    {
        byte[] $r1;
        int $i0;
        org.apache.http.entity.mime.content.StringBody r0;
        long $l1;

        r0 := @this: org.apache.http.entity.mime.content.StringBody;

        $r1 = r0.<org.apache.http.entity.mime.content.StringBody: byte[] content>;

        $i0 = lengthof $r1;

        $l1 = (long) $i0;

        return $l1;
    }

    public java.lang.String getFilename()
    {
        org.apache.http.entity.mime.content.StringBody r0;

        r0 := @this: org.apache.http.entity.mime.content.StringBody;

        return null;
    }
}
