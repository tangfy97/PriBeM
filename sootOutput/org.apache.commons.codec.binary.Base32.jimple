public class org.apache.commons.codec.binary.Base32 extends org.apache.commons.codec.binary.BaseNCodec
{
    private static final int BITS_PER_ENCODED_BYTE;
    private static final int BYTES_PER_ENCODED_BLOCK;
    private static final int BYTES_PER_UNENCODED_BLOCK;
    private static final byte[] CHUNK_SEPARATOR;
    private static final byte[] DECODE_TABLE;
    private static final byte[] ENCODE_TABLE;
    private static final byte[] HEX_DECODE_TABLE;
    private static final byte[] HEX_ENCODE_TABLE;
    private static final int MASK_5BITS;
    private long bitWorkArea;
    private final int decodeSize;
    private final byte[] decodeTable;
    private final int encodeSize;
    private final byte[] encodeTable;
    private final byte[] lineSeparator;

    public void <init>()
    {
        org.apache.commons.codec.binary.Base32 r0;

        r0 := @this: org.apache.commons.codec.binary.Base32;

        specialinvoke r0.<org.apache.commons.codec.binary.Base32: void <init>(boolean)>(0);

        return;
    }

    public void <init>(boolean)
    {
        org.apache.commons.codec.binary.Base32 r0;
        boolean z0;

        r0 := @this: org.apache.commons.codec.binary.Base32;

        z0 := @parameter0: boolean;

        specialinvoke r0.<org.apache.commons.codec.binary.Base32: void <init>(int,byte[],boolean)>(0, null, z0);

        return;
    }

    public void <init>(int)
    {
        int i0;
        byte[] $r1;
        org.apache.commons.codec.binary.Base32 r0;

        r0 := @this: org.apache.commons.codec.binary.Base32;

        i0 := @parameter0: int;

        $r1 = <org.apache.commons.codec.binary.Base32: byte[] CHUNK_SEPARATOR>;

        specialinvoke r0.<org.apache.commons.codec.binary.Base32: void <init>(int,byte[])>(i0, $r1);

        return;
    }

    public void <init>(int, byte[])
    {
        int i0;
        byte[] r1;
        org.apache.commons.codec.binary.Base32 r0;

        r0 := @this: org.apache.commons.codec.binary.Base32;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        specialinvoke r0.<org.apache.commons.codec.binary.Base32: void <init>(int,byte[],boolean)>(i0, r1, 0);

        return;
    }

    public void <init>(int, byte[], boolean)
    {
        byte[] r1, $r2, $r3, $r4, $r5, $r19, $r20;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.String $r6, $r12, $r18;
        boolean z0, $z1;
        java.lang.IllegalArgumentException $r7, $r13;
        org.apache.commons.codec.binary.Base32 r0;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r14, $r15, $r16, $r17;

        r0 := @this: org.apache.commons.codec.binary.Base32;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        z0 := @parameter2: boolean;

        if r1 != null goto label1;

        $i7 = 0;

        goto label2;

     label1:
        $i7 = lengthof r1;

     label2:
        specialinvoke r0.<org.apache.commons.codec.binary.BaseNCodec: void <init>(int,int,int,int)>(5, 8, i0, $i7);

        if z0 == 0 goto label3;

        $r19 = <org.apache.commons.codec.binary.Base32: byte[] HEX_ENCODE_TABLE>;

        r0.<org.apache.commons.codec.binary.Base32: byte[] encodeTable> = $r19;

        $r20 = <org.apache.commons.codec.binary.Base32: byte[] HEX_DECODE_TABLE>;

        r0.<org.apache.commons.codec.binary.Base32: byte[] decodeTable> = $r20;

        goto label4;

     label3:
        $r2 = <org.apache.commons.codec.binary.Base32: byte[] ENCODE_TABLE>;

        r0.<org.apache.commons.codec.binary.Base32: byte[] encodeTable> = $r2;

        $r3 = <org.apache.commons.codec.binary.Base32: byte[] DECODE_TABLE>;

        r0.<org.apache.commons.codec.binary.Base32: byte[] decodeTable> = $r3;

     label4:
        if i0 <= 0 goto label7;

        if r1 != null goto label5;

        $r13 = new java.lang.IllegalArgumentException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("lineLength ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" > 0, but lineSeparator is null");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r18);

        throw $r13;

     label5:
        $z1 = virtualinvoke r0.<org.apache.commons.codec.binary.Base32: boolean containsAlphabetOrPad(byte[])>(r1);

        if $z1 == 0 goto label6;

        $r6 = staticinvoke <org.apache.commons.codec.binary.StringUtils: java.lang.String newStringUtf8(byte[])>(r1);

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("lineSeparator must not contain Base32 characters: [");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r7;

     label6:
        $i3 = lengthof r1;

        $i4 = 8 + $i3;

        r0.<org.apache.commons.codec.binary.Base32: int encodeSize> = $i4;

        $i5 = lengthof r1;

        $r4 = newarray (byte)[$i5];

        r0.<org.apache.commons.codec.binary.Base32: byte[] lineSeparator> = $r4;

        $r5 = r0.<org.apache.commons.codec.binary.Base32: byte[] lineSeparator>;

        $i6 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r5, 0, $i6);

        goto label8;

     label7:
        r0.<org.apache.commons.codec.binary.Base32: int encodeSize> = 8;

        r0.<org.apache.commons.codec.binary.Base32: byte[] lineSeparator> = null;

     label8:
        $i1 = r0.<org.apache.commons.codec.binary.Base32: int encodeSize>;

        $i2 = $i1 - 1;

        r0.<org.apache.commons.codec.binary.Base32: int decodeSize> = $i2;

        return;
    }

    void decode(byte[], int, int)
    {
        byte[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22;
        byte $b12, $b19, $b26, $b32, $b41, $b48, $b54, $b63, $b70, $b76, $b85, $b91, $b98, $b105, b107, b110, $b125, $b132, $b139, $b146, $b152;
        long $l4, $l5, $l8, $l9, $l10, $l15, $l16, $l17, $l22, $l23, $l24, $l29, $l30, $l33, $l34, $l37, $l38, $l39, $l44, $l45, $l46, $l51, $l52, $l55, $l56, $l59, $l60, $l61, $l66, $l67, $l68, $l73, $l74, $l77, $l78, $l81, $l82, $l83, $l88, $l89, $l94, $l95, $l96, $l101, $l102, $l103, $l114, $l115, $l116, $l117, $l121, $l122, $l123, $l128, $l129, $l130, $l135, $l136, $l137, $l142, $l143, $l144, $l149, $l150;
        org.apache.commons.codec.binary.Base32 r0;
        int i0, $i1, $i2, $i3, $i6, $i7, $i11, $i13, $i14, $i18, $i20, $i21, $i25, $i27, $i28, $i31, $i35, $i36, $i40, $i42, $i43, $i47, $i49, $i50, $i53, $i57, $i58, $i62, $i64, $i65, $i69, $i71, $i72, $i75, $i79, $i80, $i84, $i86, $i87, $i90, $i92, $i93, $i97, $i99, $i100, $i104, $i106, $i108, $i109, $i111, $i112, $i113, $i118, $i119, $i120, $i124, $i126, $i127, $i131, $i133, $i134, $i138, $i140, $i141, $i145, $i147, $i148, $i151, i153, i154, $i155, $i156, $i157, $i158, $i159;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.codec.binary.Base32;

        r15 := @parameter0: byte[];

        i153 := @parameter1: int;

        i0 := @parameter2: int;

        $z0 = r0.<org.apache.commons.codec.binary.Base32: boolean eof>;

        if $z0 == 0 goto label01;

        return;

     label01:
        if i0 >= 0 goto label02;

        r0.<org.apache.commons.codec.binary.Base32: boolean eof> = 1;

     label02:
        i154 = 0;

     label03:
        if i154 >= i0 goto label06;

        $i106 = i153;

        i153 = i153 + 1;

        b107 = r15[$i106];

        $i155 = (int) b107;

        if $i155 != 61 goto label04;

        r0.<org.apache.commons.codec.binary.Base32: boolean eof> = 1;

        goto label06;

     label04:
        $i108 = r0.<org.apache.commons.codec.binary.Base32: int decodeSize>;

        virtualinvoke r0.<org.apache.commons.codec.binary.Base32: void ensureBufferSize(int)>($i108);

        $i156 = (int) b107;

        if $i156 < 0 goto label05;

        $r16 = r0.<org.apache.commons.codec.binary.Base32: byte[] decodeTable>;

        $i109 = lengthof $r16;

        $i157 = (int) b107;

        if $i157 >= $i109 goto label05;

        $r17 = r0.<org.apache.commons.codec.binary.Base32: byte[] decodeTable>;

        $i158 = (int) b107;

        b110 = $r17[$i158];

        $i159 = (int) b110;

        if $i159 < 0 goto label05;

        $i111 = r0.<org.apache.commons.codec.binary.Base32: int modulus>;

        $i112 = $i111 + 1;

        $i113 = $i112 % 8;

        r0.<org.apache.commons.codec.binary.Base32: int modulus> = $i113;

        $l114 = r0.<org.apache.commons.codec.binary.Base32: long bitWorkArea>;

        $l116 = $l114 << 5;

        $l115 = (long) b110;

        $l117 = $l116 + $l115;

        r0.<org.apache.commons.codec.binary.Base32: long bitWorkArea> = $l117;

        $i118 = r0.<org.apache.commons.codec.binary.Base32: int modulus>;

        if $i118 != 0 goto label05;

        $r18 = r0.<org.apache.commons.codec.binary.Base32: byte[] buffer>;

        $i119 = r0.<org.apache.commons.codec.binary.Base32: int pos>;

        $i120 = $i119 + 1;

        r0.<org.apache.commons.codec.binary.Base32: int pos> = $i120;

        $l121 = r0.<org.apache.commons.codec.binary.Base32: long bitWorkArea>;

        $l122 = $l121 >> 32;

        $l123 = $l122 & 255L;

        $i124 = (int) $l123;

        $b125 = (byte) $i124;

        $r18[$i119] = $b125;

        $r19 = r0.<org.apache.commons.codec.binary.Base32: byte[] buffer>;

        $i126 = r0.<org.apache.commons.codec.binary.Base32: int pos>;

        $i127 = $i126 + 1;

        r0.<org.apache.commons.codec.binary.Base32: int pos> = $i127;

        $l128 = r0.<org.apache.commons.codec.binary.Base32: long bitWorkArea>;

        $l129 = $l128 >> 24;

        $l130 = $l129 & 255L;

        $i131 = (int) $l130;

        $b132 = (byte) $i131;

        $r19[$i126] = $b132;

        $r20 = r0.<org.apache.commons.codec.binary.Base32: byte[] buffer>;

        $i133 = r0.<org.apache.commons.codec.binary.Base32: int pos>;

        $i134 = $i133 + 1;

        r0.<org.apache.commons.codec.binary.Base32: int pos> = $i134;

        $l135 = r0.<org.apache.commons.codec.binary.Base32: long bitWorkArea>;

        $l136 = $l135 >> 16;

        $l137 = $l136 & 255L;

        $i138 = (int) $l137;

        $b139 = (byte) $i138;

        $r20[$i133] = $b139;

        $r21 = r0.<org.apache.commons.codec.binary.Base32: byte[] buffer>;

        $i140 = r0.<org.apache.commons.codec.binary.Base32: int pos>;

        $i141 = $i140 + 1;

        r0.<org.apache.commons.codec.binary.Base32: int pos> = $i141;

        $l142 = r0.<org.apache.commons.codec.binary.Base32: long bitWorkArea>;

        $l143 = $l142 >> 8;

        $l144 = $l143 & 255L;

        $i145 = (int) $l144;

        $b146 = (byte) $i145;

        $r21[$i140] = $b146;

        $r22 = r0.<org.apache.commons.codec.binary.Base32: byte[] buffer>;

        $i147 = r0.<org.apache.commons.codec.binary.Base32: int pos>;

        $i148 = $i147 + 1;

        r0.<org.apache.commons.codec.binary.Base32: int pos> = $i148;

        $l149 = r0.<org.apache.commons.codec.binary.Base32: long bitWorkArea>;

        $l150 = $l149 & 255L;

        $i151 = (int) $l150;

        $b152 = (byte) $i151;

        $r22[$i147] = $b152;

     label05:
        i154 = i154 + 1;

        goto label03;

     label06:
        $z1 = r0.<org.apache.commons.codec.binary.Base32: boolean eof>;

        if $z1 == 0 goto label13;

        $i1 = r0.<org.apache.commons.codec.binary.Base32: int modulus>;

        if $i1 < 2 goto label13;

        $i2 = r0.<org.apache.commons.codec.binary.Base32: int decodeSize>;

        virtualinvoke r0.<org.apache.commons.codec.binary.Base32: void ensureBufferSize(int)>($i2);

        $i3 = r0.<org.apache.commons.codec.binary.Base32: int modulus>;

        tableswitch($i3)
        {
            case 2: goto label07;
            case 3: goto label08;
            case 4: goto label09;
            case 5: goto label10;
            case 6: goto label11;
            case 7: goto label12;
            default: goto label13;
        };

     label07:
        $r14 = r0.<org.apache.commons.codec.binary.Base32: byte[] buffer>;

        $i99 = r0.<org.apache.commons.codec.binary.Base32: int pos>;

        $i100 = $i99 + 1;

        r0.<org.apache.commons.codec.binary.Base32: int pos> = $i100;

        $l101 = r0.<org.apache.commons.codec.binary.Base32: long bitWorkArea>;

        $l102 = $l101 >> 2;

        $l103 = $l102 & 255L;

        $i104 = (int) $l103;

        $b105 = (byte) $i104;

        $r14[$i99] = $b105;

        goto label13;

     label08:
        $r13 = r0.<org.apache.commons.codec.binary.Base32: byte[] buffer>;

        $i92 = r0.<org.apache.commons.codec.binary.Base32: int pos>;

        $i93 = $i92 + 1;

        r0.<org.apache.commons.codec.binary.Base32: int pos> = $i93;

        $l94 = r0.<org.apache.commons.codec.binary.Base32: long bitWorkArea>;

        $l95 = $l94 >> 7;

        $l96 = $l95 & 255L;

        $i97 = (int) $l96;

        $b98 = (byte) $i97;

        $r13[$i92] = $b98;

        goto label13;

     label09:
        $l77 = r0.<org.apache.commons.codec.binary.Base32: long bitWorkArea>;

        $l78 = $l77 >> 4;

        r0.<org.apache.commons.codec.binary.Base32: long bitWorkArea> = $l78;

        $r11 = r0.<org.apache.commons.codec.binary.Base32: byte[] buffer>;

        $i79 = r0.<org.apache.commons.codec.binary.Base32: int pos>;

        $i80 = $i79 + 1;

        r0.<org.apache.commons.codec.binary.Base32: int pos> = $i80;

        $l81 = r0.<org.apache.commons.codec.binary.Base32: long bitWorkArea>;

        $l82 = $l81 >> 8;

        $l83 = $l82 & 255L;

        $i84 = (int) $l83;

        $b85 = (byte) $i84;

        $r11[$i79] = $b85;

        $r12 = r0.<org.apache.commons.codec.binary.Base32: byte[] buffer>;

        $i86 = r0.<org.apache.commons.codec.binary.Base32: int pos>;

        $i87 = $i86 + 1;

        r0.<org.apache.commons.codec.binary.Base32: int pos> = $i87;

        $l88 = r0.<org.apache.commons.codec.binary.Base32: long bitWorkArea>;

        $l89 = $l88 & 255L;

        $i90 = (int) $l89;

        $b91 = (byte) $i90;

        $r12[$i86] = $b91;

        goto label13;

     label10:
        $l55 = r0.<org.apache.commons.codec.binary.Base32: long bitWorkArea>;

        $l56 = $l55 >> 1;

        r0.<org.apache.commons.codec.binary.Base32: long bitWorkArea> = $l56;

        $r8 = r0.<org.apache.commons.codec.binary.Base32: byte[] buffer>;

        $i57 = r0.<org.apache.commons.codec.binary.Base32: int pos>;

        $i58 = $i57 + 1;

        r0.<org.apache.commons.codec.binary.Base32: int pos> = $i58;

        $l59 = r0.<org.apache.commons.codec.binary.Base32: long bitWorkArea>;

        $l60 = $l59 >> 16;

        $l61 = $l60 & 255L;

        $i62 = (int) $l61;

        $b63 = (byte) $i62;

        $r8[$i57] = $b63;

        $r9 = r0.<org.apache.commons.codec.binary.Base32: byte[] buffer>;

        $i64 = r0.<org.apache.commons.codec.binary.Base32: int pos>;

        $i65 = $i64 + 1;

        r0.<org.apache.commons.codec.binary.Base32: int pos> = $i65;

        $l66 = r0.<org.apache.commons.codec.binary.Base32: long bitWorkArea>;

        $l67 = $l66 >> 8;

        $l68 = $l67 & 255L;

        $i69 = (int) $l68;

        $b70 = (byte) $i69;

        $r9[$i64] = $b70;

        $r10 = r0.<org.apache.commons.codec.binary.Base32: byte[] buffer>;

        $i71 = r0.<org.apache.commons.codec.binary.Base32: int pos>;

        $i72 = $i71 + 1;

        r0.<org.apache.commons.codec.binary.Base32: int pos> = $i72;

        $l73 = r0.<org.apache.commons.codec.binary.Base32: long bitWorkArea>;

        $l74 = $l73 & 255L;

        $i75 = (int) $l74;

        $b76 = (byte) $i75;

        $r10[$i71] = $b76;

        goto label13;

     label11:
        $l33 = r0.<org.apache.commons.codec.binary.Base32: long bitWorkArea>;

        $l34 = $l33 >> 6;

        r0.<org.apache.commons.codec.binary.Base32: long bitWorkArea> = $l34;

        $r5 = r0.<org.apache.commons.codec.binary.Base32: byte[] buffer>;

        $i35 = r0.<org.apache.commons.codec.binary.Base32: int pos>;

        $i36 = $i35 + 1;

        r0.<org.apache.commons.codec.binary.Base32: int pos> = $i36;

        $l37 = r0.<org.apache.commons.codec.binary.Base32: long bitWorkArea>;

        $l38 = $l37 >> 16;

        $l39 = $l38 & 255L;

        $i40 = (int) $l39;

        $b41 = (byte) $i40;

        $r5[$i35] = $b41;

        $r6 = r0.<org.apache.commons.codec.binary.Base32: byte[] buffer>;

        $i42 = r0.<org.apache.commons.codec.binary.Base32: int pos>;

        $i43 = $i42 + 1;

        r0.<org.apache.commons.codec.binary.Base32: int pos> = $i43;

        $l44 = r0.<org.apache.commons.codec.binary.Base32: long bitWorkArea>;

        $l45 = $l44 >> 8;

        $l46 = $l45 & 255L;

        $i47 = (int) $l46;

        $b48 = (byte) $i47;

        $r6[$i42] = $b48;

        $r7 = r0.<org.apache.commons.codec.binary.Base32: byte[] buffer>;

        $i49 = r0.<org.apache.commons.codec.binary.Base32: int pos>;

        $i50 = $i49 + 1;

        r0.<org.apache.commons.codec.binary.Base32: int pos> = $i50;

        $l51 = r0.<org.apache.commons.codec.binary.Base32: long bitWorkArea>;

        $l52 = $l51 & 255L;

        $i53 = (int) $l52;

        $b54 = (byte) $i53;

        $r7[$i49] = $b54;

        goto label13;

     label12:
        $l4 = r0.<org.apache.commons.codec.binary.Base32: long bitWorkArea>;

        $l5 = $l4 >> 3;

        r0.<org.apache.commons.codec.binary.Base32: long bitWorkArea> = $l5;

        $r1 = r0.<org.apache.commons.codec.binary.Base32: byte[] buffer>;

        $i6 = r0.<org.apache.commons.codec.binary.Base32: int pos>;

        $i7 = $i6 + 1;

        r0.<org.apache.commons.codec.binary.Base32: int pos> = $i7;

        $l8 = r0.<org.apache.commons.codec.binary.Base32: long bitWorkArea>;

        $l9 = $l8 >> 24;

        $l10 = $l9 & 255L;

        $i11 = (int) $l10;

        $b12 = (byte) $i11;

        $r1[$i6] = $b12;

        $r2 = r0.<org.apache.commons.codec.binary.Base32: byte[] buffer>;

        $i13 = r0.<org.apache.commons.codec.binary.Base32: int pos>;

        $i14 = $i13 + 1;

        r0.<org.apache.commons.codec.binary.Base32: int pos> = $i14;

        $l15 = r0.<org.apache.commons.codec.binary.Base32: long bitWorkArea>;

        $l16 = $l15 >> 16;

        $l17 = $l16 & 255L;

        $i18 = (int) $l17;

        $b19 = (byte) $i18;

        $r2[$i13] = $b19;

        $r3 = r0.<org.apache.commons.codec.binary.Base32: byte[] buffer>;

        $i20 = r0.<org.apache.commons.codec.binary.Base32: int pos>;

        $i21 = $i20 + 1;

        r0.<org.apache.commons.codec.binary.Base32: int pos> = $i21;

        $l22 = r0.<org.apache.commons.codec.binary.Base32: long bitWorkArea>;

        $l23 = $l22 >> 8;

        $l24 = $l23 & 255L;

        $i25 = (int) $l24;

        $b26 = (byte) $i25;

        $r3[$i20] = $b26;

        $r4 = r0.<org.apache.commons.codec.binary.Base32: byte[] buffer>;

        $i27 = r0.<org.apache.commons.codec.binary.Base32: int pos>;

        $i28 = $i27 + 1;

        r0.<org.apache.commons.codec.binary.Base32: int pos> = $i28;

        $l29 = r0.<org.apache.commons.codec.binary.Base32: long bitWorkArea>;

        $l30 = $l29 & 255L;

        $i31 = (int) $l30;

        $b32 = (byte) $i31;

        $r4[$i27] = $b32;

     label13:
        return;
    }

    void encode(byte[], int, int)
    {
        org.apache.commons.codec.binary.Base32 r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i10, $i11, $i12, $i15, $i16, $i18, $i19, $i22, $i23, $i25, $i26, $i29, $i30, $i32, $i33, $i36, $i37, $i39, $i40, $i43, $i44, $i46, $i47, $i50, $i51, $i53, $i54, $i57, $i58, $i60, $i61, $i63, $i64, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i83, $i84, $i86, $i87, $i90, $i91, $i93, $i94, $i97, $i98, $i100, $i101, $i104, $i105, $i107, $i108, $i111, $i112, $i114, $i115, $i118, $i119, $i121, $i122, $i125, $i126, $i128, $i129, $i130, $i131, $i132, $i133, $i134, $i135, $i136, $i137, $i140, $i141, $i143, $i144, $i147, $i148, $i150, $i151, $i154, $i155, $i157, $i158, $i161, $i162, $i164, $i165, $i168, $i169, $i171, $i172, $i173, $i174, $i175, $i176, $i177, $i178, $i181, $i182, $i184, $i185, $i188, $i189, $i191, $i192, $i195, $i196, $i198, $i199, $i202, $i203, $i205, $i206, $i207, $i208, $i209, $i210, $i211, $i212, $i213, $i214, $i217, $i218, $i220, $i221, $i224, $i225, $i227, $i228, $i229, $i230, $i231, $i232, $i233, $i234, $i235, $i236, $i237, $i238, $i239, $i240, i241, $i242, $i243, $i244, $i245, $i246, i247, i248;
        boolean $z0;
        byte[] r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r44, $r45, $r46, $r47, $r48, $r49, $r50, $r51, $r52, $r53, $r54, $r55, $r56, $r57, $r58, $r59, $r60, $r61, $r62, $r63, $r64, $r65, $r66, $r67, $r68, $r69, $r70, $r71, $r72, $r73, $r74, $r75;
        byte $b17, $b24, $b31, $b38, $b45, $b52, $b59, $b65, $b85, $b92, $b99, $b106, $b113, $b120, $b127, $b142, $b149, $b156, $b163, $b170, $b183, $b190, $b197, $b204, $b219, $b226;
        long $l6, $l7, $l8, $l9, $l13, $l14, $l20, $l21, $l27, $l28, $l34, $l35, $l41, $l42, $l48, $l49, $l55, $l56, $l62, $l81, $l82, $l88, $l89, $l95, $l96, $l102, $l103, $l109, $l110, $l116, $l117, $l123, $l124, $l138, $l139, $l145, $l146, $l152, $l153, $l159, $l160, $l166, $l167, $l179, $l180, $l186, $l187, $l193, $l194, $l200, $l201, $l215, $l216, $l222, $l223;

        r0 := @this: org.apache.commons.codec.binary.Base32;

        r1 := @parameter0: byte[];

        i241 := @parameter1: int;

        i0 := @parameter2: int;

        $z0 = r0.<org.apache.commons.codec.binary.Base32: boolean eof>;

        if $z0 == 0 goto label01;

        return;

     label01:
        if i0 >= 0 goto label09;

        r0.<org.apache.commons.codec.binary.Base32: boolean eof> = 1;

        $i76 = r0.<org.apache.commons.codec.binary.Base32: int modulus>;

        if 0 != $i76 goto label02;

        $i239 = r0.<org.apache.commons.codec.binary.Base32: int lineLength>;

        if $i239 != 0 goto label02;

        return;

     label02:
        $i77 = r0.<org.apache.commons.codec.binary.Base32: int encodeSize>;

        virtualinvoke r0.<org.apache.commons.codec.binary.Base32: void ensureBufferSize(int)>($i77);

        $i240 = r0.<org.apache.commons.codec.binary.Base32: int pos>;

        $i78 = r0.<org.apache.commons.codec.binary.Base32: int modulus>;

        tableswitch($i78)
        {
            case 1: goto label03;
            case 2: goto label04;
            case 3: goto label05;
            case 4: goto label06;
            default: goto label07;
        };

     label03:
        $r66 = r0.<org.apache.commons.codec.binary.Base32: byte[] buffer>;

        $i213 = r0.<org.apache.commons.codec.binary.Base32: int pos>;

        $i214 = $i213 + 1;

        r0.<org.apache.commons.codec.binary.Base32: int pos> = $i214;

        $r67 = r0.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>;

        $l215 = r0.<org.apache.commons.codec.binary.Base32: long bitWorkArea>;

        $l216 = $l215 >> 3;

        $i217 = (int) $l216;

        $i218 = $i217 & 31;

        $b219 = $r67[$i218];

        $r66[$i213] = $b219;

        $r68 = r0.<org.apache.commons.codec.binary.Base32: byte[] buffer>;

        $i220 = r0.<org.apache.commons.codec.binary.Base32: int pos>;

        $i221 = $i220 + 1;

        r0.<org.apache.commons.codec.binary.Base32: int pos> = $i221;

        $r69 = r0.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>;

        $l222 = r0.<org.apache.commons.codec.binary.Base32: long bitWorkArea>;

        $l223 = $l222 << 2;

        $i224 = (int) $l223;

        $i225 = $i224 & 31;

        $b226 = $r69[$i225];

        $r68[$i220] = $b226;

        $r70 = r0.<org.apache.commons.codec.binary.Base32: byte[] buffer>;

        $i227 = r0.<org.apache.commons.codec.binary.Base32: int pos>;

        $i228 = $i227 + 1;

        r0.<org.apache.commons.codec.binary.Base32: int pos> = $i228;

        $r70[$i227] = 61;

        $r71 = r0.<org.apache.commons.codec.binary.Base32: byte[] buffer>;

        $i229 = r0.<org.apache.commons.codec.binary.Base32: int pos>;

        $i230 = $i229 + 1;

        r0.<org.apache.commons.codec.binary.Base32: int pos> = $i230;

        $r71[$i229] = 61;

        $r72 = r0.<org.apache.commons.codec.binary.Base32: byte[] buffer>;

        $i231 = r0.<org.apache.commons.codec.binary.Base32: int pos>;

        $i232 = $i231 + 1;

        r0.<org.apache.commons.codec.binary.Base32: int pos> = $i232;

        $r72[$i231] = 61;

        $r73 = r0.<org.apache.commons.codec.binary.Base32: byte[] buffer>;

        $i233 = r0.<org.apache.commons.codec.binary.Base32: int pos>;

        $i234 = $i233 + 1;

        r0.<org.apache.commons.codec.binary.Base32: int pos> = $i234;

        $r73[$i233] = 61;

        $r74 = r0.<org.apache.commons.codec.binary.Base32: byte[] buffer>;

        $i235 = r0.<org.apache.commons.codec.binary.Base32: int pos>;

        $i236 = $i235 + 1;

        r0.<org.apache.commons.codec.binary.Base32: int pos> = $i236;

        $r74[$i235] = 61;

        $r75 = r0.<org.apache.commons.codec.binary.Base32: byte[] buffer>;

        $i237 = r0.<org.apache.commons.codec.binary.Base32: int pos>;

        $i238 = $i237 + 1;

        r0.<org.apache.commons.codec.binary.Base32: int pos> = $i238;

        $r75[$i237] = 61;

        goto label07;

     label04:
        $r54 = r0.<org.apache.commons.codec.binary.Base32: byte[] buffer>;

        $i177 = r0.<org.apache.commons.codec.binary.Base32: int pos>;

        $i178 = $i177 + 1;

        r0.<org.apache.commons.codec.binary.Base32: int pos> = $i178;

        $r55 = r0.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>;

        $l179 = r0.<org.apache.commons.codec.binary.Base32: long bitWorkArea>;

        $l180 = $l179 >> 11;

        $i181 = (int) $l180;

        $i182 = $i181 & 31;

        $b183 = $r55[$i182];

        $r54[$i177] = $b183;

        $r56 = r0.<org.apache.commons.codec.binary.Base32: byte[] buffer>;

        $i184 = r0.<org.apache.commons.codec.binary.Base32: int pos>;

        $i185 = $i184 + 1;

        r0.<org.apache.commons.codec.binary.Base32: int pos> = $i185;

        $r57 = r0.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>;

        $l186 = r0.<org.apache.commons.codec.binary.Base32: long bitWorkArea>;

        $l187 = $l186 >> 6;

        $i188 = (int) $l187;

        $i189 = $i188 & 31;

        $b190 = $r57[$i189];

        $r56[$i184] = $b190;

        $r58 = r0.<org.apache.commons.codec.binary.Base32: byte[] buffer>;

        $i191 = r0.<org.apache.commons.codec.binary.Base32: int pos>;

        $i192 = $i191 + 1;

        r0.<org.apache.commons.codec.binary.Base32: int pos> = $i192;

        $r59 = r0.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>;

        $l193 = r0.<org.apache.commons.codec.binary.Base32: long bitWorkArea>;

        $l194 = $l193 >> 1;

        $i195 = (int) $l194;

        $i196 = $i195 & 31;

        $b197 = $r59[$i196];

        $r58[$i191] = $b197;

        $r60 = r0.<org.apache.commons.codec.binary.Base32: byte[] buffer>;

        $i198 = r0.<org.apache.commons.codec.binary.Base32: int pos>;

        $i199 = $i198 + 1;

        r0.<org.apache.commons.codec.binary.Base32: int pos> = $i199;

        $r61 = r0.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>;

        $l200 = r0.<org.apache.commons.codec.binary.Base32: long bitWorkArea>;

        $l201 = $l200 << 4;

        $i202 = (int) $l201;

        $i203 = $i202 & 31;

        $b204 = $r61[$i203];

        $r60[$i198] = $b204;

        $r62 = r0.<org.apache.commons.codec.binary.Base32: byte[] buffer>;

        $i205 = r0.<org.apache.commons.codec.binary.Base32: int pos>;

        $i206 = $i205 + 1;

        r0.<org.apache.commons.codec.binary.Base32: int pos> = $i206;

        $r62[$i205] = 61;

        $r63 = r0.<org.apache.commons.codec.binary.Base32: byte[] buffer>;

        $i207 = r0.<org.apache.commons.codec.binary.Base32: int pos>;

        $i208 = $i207 + 1;

        r0.<org.apache.commons.codec.binary.Base32: int pos> = $i208;

        $r63[$i207] = 61;

        $r64 = r0.<org.apache.commons.codec.binary.Base32: byte[] buffer>;

        $i209 = r0.<org.apache.commons.codec.binary.Base32: int pos>;

        $i210 = $i209 + 1;

        r0.<org.apache.commons.codec.binary.Base32: int pos> = $i210;

        $r64[$i209] = 61;

        $r65 = r0.<org.apache.commons.codec.binary.Base32: byte[] buffer>;

        $i211 = r0.<org.apache.commons.codec.binary.Base32: int pos>;

        $i212 = $i211 + 1;

        r0.<org.apache.commons.codec.binary.Base32: int pos> = $i212;

        $r65[$i211] = 61;

        goto label07;

     label05:
        $r41 = r0.<org.apache.commons.codec.binary.Base32: byte[] buffer>;

        $i136 = r0.<org.apache.commons.codec.binary.Base32: int pos>;

        $i137 = $i136 + 1;

        r0.<org.apache.commons.codec.binary.Base32: int pos> = $i137;

        $r42 = r0.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>;

        $l138 = r0.<org.apache.commons.codec.binary.Base32: long bitWorkArea>;

        $l139 = $l138 >> 19;

        $i140 = (int) $l139;

        $i141 = $i140 & 31;

        $b142 = $r42[$i141];

        $r41[$i136] = $b142;

        $r43 = r0.<org.apache.commons.codec.binary.Base32: byte[] buffer>;

        $i143 = r0.<org.apache.commons.codec.binary.Base32: int pos>;

        $i144 = $i143 + 1;

        r0.<org.apache.commons.codec.binary.Base32: int pos> = $i144;

        $r44 = r0.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>;

        $l145 = r0.<org.apache.commons.codec.binary.Base32: long bitWorkArea>;

        $l146 = $l145 >> 14;

        $i147 = (int) $l146;

        $i148 = $i147 & 31;

        $b149 = $r44[$i148];

        $r43[$i143] = $b149;

        $r45 = r0.<org.apache.commons.codec.binary.Base32: byte[] buffer>;

        $i150 = r0.<org.apache.commons.codec.binary.Base32: int pos>;

        $i151 = $i150 + 1;

        r0.<org.apache.commons.codec.binary.Base32: int pos> = $i151;

        $r46 = r0.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>;

        $l152 = r0.<org.apache.commons.codec.binary.Base32: long bitWorkArea>;

        $l153 = $l152 >> 9;

        $i154 = (int) $l153;

        $i155 = $i154 & 31;

        $b156 = $r46[$i155];

        $r45[$i150] = $b156;

        $r47 = r0.<org.apache.commons.codec.binary.Base32: byte[] buffer>;

        $i157 = r0.<org.apache.commons.codec.binary.Base32: int pos>;

        $i158 = $i157 + 1;

        r0.<org.apache.commons.codec.binary.Base32: int pos> = $i158;

        $r48 = r0.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>;

        $l159 = r0.<org.apache.commons.codec.binary.Base32: long bitWorkArea>;

        $l160 = $l159 >> 4;

        $i161 = (int) $l160;

        $i162 = $i161 & 31;

        $b163 = $r48[$i162];

        $r47[$i157] = $b163;

        $r49 = r0.<org.apache.commons.codec.binary.Base32: byte[] buffer>;

        $i164 = r0.<org.apache.commons.codec.binary.Base32: int pos>;

        $i165 = $i164 + 1;

        r0.<org.apache.commons.codec.binary.Base32: int pos> = $i165;

        $r50 = r0.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>;

        $l166 = r0.<org.apache.commons.codec.binary.Base32: long bitWorkArea>;

        $l167 = $l166 << 1;

        $i168 = (int) $l167;

        $i169 = $i168 & 31;

        $b170 = $r50[$i169];

        $r49[$i164] = $b170;

        $r51 = r0.<org.apache.commons.codec.binary.Base32: byte[] buffer>;

        $i171 = r0.<org.apache.commons.codec.binary.Base32: int pos>;

        $i172 = $i171 + 1;

        r0.<org.apache.commons.codec.binary.Base32: int pos> = $i172;

        $r51[$i171] = 61;

        $r52 = r0.<org.apache.commons.codec.binary.Base32: byte[] buffer>;

        $i173 = r0.<org.apache.commons.codec.binary.Base32: int pos>;

        $i174 = $i173 + 1;

        r0.<org.apache.commons.codec.binary.Base32: int pos> = $i174;

        $r52[$i173] = 61;

        $r53 = r0.<org.apache.commons.codec.binary.Base32: byte[] buffer>;

        $i175 = r0.<org.apache.commons.codec.binary.Base32: int pos>;

        $i176 = $i175 + 1;

        r0.<org.apache.commons.codec.binary.Base32: int pos> = $i176;

        $r53[$i175] = 61;

        goto label07;

     label06:
        $r22 = r0.<org.apache.commons.codec.binary.Base32: byte[] buffer>;

        $i79 = r0.<org.apache.commons.codec.binary.Base32: int pos>;

        $i80 = $i79 + 1;

        r0.<org.apache.commons.codec.binary.Base32: int pos> = $i80;

        $r23 = r0.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>;

        $l81 = r0.<org.apache.commons.codec.binary.Base32: long bitWorkArea>;

        $l82 = $l81 >> 27;

        $i83 = (int) $l82;

        $i84 = $i83 & 31;

        $b85 = $r23[$i84];

        $r22[$i79] = $b85;

        $r24 = r0.<org.apache.commons.codec.binary.Base32: byte[] buffer>;

        $i86 = r0.<org.apache.commons.codec.binary.Base32: int pos>;

        $i87 = $i86 + 1;

        r0.<org.apache.commons.codec.binary.Base32: int pos> = $i87;

        $r25 = r0.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>;

        $l88 = r0.<org.apache.commons.codec.binary.Base32: long bitWorkArea>;

        $l89 = $l88 >> 22;

        $i90 = (int) $l89;

        $i91 = $i90 & 31;

        $b92 = $r25[$i91];

        $r24[$i86] = $b92;

        $r26 = r0.<org.apache.commons.codec.binary.Base32: byte[] buffer>;

        $i93 = r0.<org.apache.commons.codec.binary.Base32: int pos>;

        $i94 = $i93 + 1;

        r0.<org.apache.commons.codec.binary.Base32: int pos> = $i94;

        $r27 = r0.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>;

        $l95 = r0.<org.apache.commons.codec.binary.Base32: long bitWorkArea>;

        $l96 = $l95 >> 17;

        $i97 = (int) $l96;

        $i98 = $i97 & 31;

        $b99 = $r27[$i98];

        $r26[$i93] = $b99;

        $r28 = r0.<org.apache.commons.codec.binary.Base32: byte[] buffer>;

        $i100 = r0.<org.apache.commons.codec.binary.Base32: int pos>;

        $i101 = $i100 + 1;

        r0.<org.apache.commons.codec.binary.Base32: int pos> = $i101;

        $r29 = r0.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>;

        $l102 = r0.<org.apache.commons.codec.binary.Base32: long bitWorkArea>;

        $l103 = $l102 >> 12;

        $i104 = (int) $l103;

        $i105 = $i104 & 31;

        $b106 = $r29[$i105];

        $r28[$i100] = $b106;

        $r30 = r0.<org.apache.commons.codec.binary.Base32: byte[] buffer>;

        $i107 = r0.<org.apache.commons.codec.binary.Base32: int pos>;

        $i108 = $i107 + 1;

        r0.<org.apache.commons.codec.binary.Base32: int pos> = $i108;

        $r31 = r0.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>;

        $l109 = r0.<org.apache.commons.codec.binary.Base32: long bitWorkArea>;

        $l110 = $l109 >> 7;

        $i111 = (int) $l110;

        $i112 = $i111 & 31;

        $b113 = $r31[$i112];

        $r30[$i107] = $b113;

        $r32 = r0.<org.apache.commons.codec.binary.Base32: byte[] buffer>;

        $i114 = r0.<org.apache.commons.codec.binary.Base32: int pos>;

        $i115 = $i114 + 1;

        r0.<org.apache.commons.codec.binary.Base32: int pos> = $i115;

        $r33 = r0.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>;

        $l116 = r0.<org.apache.commons.codec.binary.Base32: long bitWorkArea>;

        $l117 = $l116 >> 2;

        $i118 = (int) $l117;

        $i119 = $i118 & 31;

        $b120 = $r33[$i119];

        $r32[$i114] = $b120;

        $r34 = r0.<org.apache.commons.codec.binary.Base32: byte[] buffer>;

        $i121 = r0.<org.apache.commons.codec.binary.Base32: int pos>;

        $i122 = $i121 + 1;

        r0.<org.apache.commons.codec.binary.Base32: int pos> = $i122;

        $r35 = r0.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>;

        $l123 = r0.<org.apache.commons.codec.binary.Base32: long bitWorkArea>;

        $l124 = $l123 << 3;

        $i125 = (int) $l124;

        $i126 = $i125 & 31;

        $b127 = $r35[$i126];

        $r34[$i121] = $b127;

        $r36 = r0.<org.apache.commons.codec.binary.Base32: byte[] buffer>;

        $i128 = r0.<org.apache.commons.codec.binary.Base32: int pos>;

        $i129 = $i128 + 1;

        r0.<org.apache.commons.codec.binary.Base32: int pos> = $i129;

        $r36[$i128] = 61;

     label07:
        $i242 = r0.<org.apache.commons.codec.binary.Base32: int currentLinePos>;

        $i243 = r0.<org.apache.commons.codec.binary.Base32: int pos>;

        $i244 = $i243 - $i240;

        $i245 = $i242 + $i244;

        r0.<org.apache.commons.codec.binary.Base32: int currentLinePos> = $i245;

        $i246 = r0.<org.apache.commons.codec.binary.Base32: int lineLength>;

        if $i246 <= 0 goto label08;

        $i130 = r0.<org.apache.commons.codec.binary.Base32: int currentLinePos>;

        if $i130 <= 0 goto label08;

        $r39 = r0.<org.apache.commons.codec.binary.Base32: byte[] lineSeparator>;

        $r38 = r0.<org.apache.commons.codec.binary.Base32: byte[] buffer>;

        $i132 = r0.<org.apache.commons.codec.binary.Base32: int pos>;

        $r37 = r0.<org.apache.commons.codec.binary.Base32: byte[] lineSeparator>;

        $i131 = lengthof $r37;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r39, 0, $r38, $i132, $i131);

        $i134 = r0.<org.apache.commons.codec.binary.Base32: int pos>;

        $r40 = r0.<org.apache.commons.codec.binary.Base32: byte[] lineSeparator>;

        $i133 = lengthof $r40;

        $i135 = $i134 + $i133;

        r0.<org.apache.commons.codec.binary.Base32: int pos> = $i135;

     label08:
        goto label13;

     label09:
        i247 = 0;

     label10:
        if i247 >= i0 goto label13;

        $i1 = r0.<org.apache.commons.codec.binary.Base32: int encodeSize>;

        virtualinvoke r0.<org.apache.commons.codec.binary.Base32: void ensureBufferSize(int)>($i1);

        $i2 = r0.<org.apache.commons.codec.binary.Base32: int modulus>;

        $i3 = $i2 + 1;

        $i4 = $i3 % 5;

        r0.<org.apache.commons.codec.binary.Base32: int modulus> = $i4;

        $i5 = i241;

        i241 = i241 + 1;

        i248 = r1[$i5];

        if i248 >= 0 goto label11;

        i248 = i248 + 256;

     label11:
        $l6 = r0.<org.apache.commons.codec.binary.Base32: long bitWorkArea>;

        $l8 = $l6 << 8;

        $l7 = (long) i248;

        $l9 = $l8 + $l7;

        r0.<org.apache.commons.codec.binary.Base32: long bitWorkArea> = $l9;

        $i10 = r0.<org.apache.commons.codec.binary.Base32: int modulus>;

        if 0 != $i10 goto label12;

        $r2 = r0.<org.apache.commons.codec.binary.Base32: byte[] buffer>;

        $i11 = r0.<org.apache.commons.codec.binary.Base32: int pos>;

        $i12 = $i11 + 1;

        r0.<org.apache.commons.codec.binary.Base32: int pos> = $i12;

        $r3 = r0.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>;

        $l13 = r0.<org.apache.commons.codec.binary.Base32: long bitWorkArea>;

        $l14 = $l13 >> 35;

        $i15 = (int) $l14;

        $i16 = $i15 & 31;

        $b17 = $r3[$i16];

        $r2[$i11] = $b17;

        $r4 = r0.<org.apache.commons.codec.binary.Base32: byte[] buffer>;

        $i18 = r0.<org.apache.commons.codec.binary.Base32: int pos>;

        $i19 = $i18 + 1;

        r0.<org.apache.commons.codec.binary.Base32: int pos> = $i19;

        $r5 = r0.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>;

        $l20 = r0.<org.apache.commons.codec.binary.Base32: long bitWorkArea>;

        $l21 = $l20 >> 30;

        $i22 = (int) $l21;

        $i23 = $i22 & 31;

        $b24 = $r5[$i23];

        $r4[$i18] = $b24;

        $r6 = r0.<org.apache.commons.codec.binary.Base32: byte[] buffer>;

        $i25 = r0.<org.apache.commons.codec.binary.Base32: int pos>;

        $i26 = $i25 + 1;

        r0.<org.apache.commons.codec.binary.Base32: int pos> = $i26;

        $r7 = r0.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>;

        $l27 = r0.<org.apache.commons.codec.binary.Base32: long bitWorkArea>;

        $l28 = $l27 >> 25;

        $i29 = (int) $l28;

        $i30 = $i29 & 31;

        $b31 = $r7[$i30];

        $r6[$i25] = $b31;

        $r8 = r0.<org.apache.commons.codec.binary.Base32: byte[] buffer>;

        $i32 = r0.<org.apache.commons.codec.binary.Base32: int pos>;

        $i33 = $i32 + 1;

        r0.<org.apache.commons.codec.binary.Base32: int pos> = $i33;

        $r9 = r0.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>;

        $l34 = r0.<org.apache.commons.codec.binary.Base32: long bitWorkArea>;

        $l35 = $l34 >> 20;

        $i36 = (int) $l35;

        $i37 = $i36 & 31;

        $b38 = $r9[$i37];

        $r8[$i32] = $b38;

        $r10 = r0.<org.apache.commons.codec.binary.Base32: byte[] buffer>;

        $i39 = r0.<org.apache.commons.codec.binary.Base32: int pos>;

        $i40 = $i39 + 1;

        r0.<org.apache.commons.codec.binary.Base32: int pos> = $i40;

        $r11 = r0.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>;

        $l41 = r0.<org.apache.commons.codec.binary.Base32: long bitWorkArea>;

        $l42 = $l41 >> 15;

        $i43 = (int) $l42;

        $i44 = $i43 & 31;

        $b45 = $r11[$i44];

        $r10[$i39] = $b45;

        $r12 = r0.<org.apache.commons.codec.binary.Base32: byte[] buffer>;

        $i46 = r0.<org.apache.commons.codec.binary.Base32: int pos>;

        $i47 = $i46 + 1;

        r0.<org.apache.commons.codec.binary.Base32: int pos> = $i47;

        $r13 = r0.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>;

        $l48 = r0.<org.apache.commons.codec.binary.Base32: long bitWorkArea>;

        $l49 = $l48 >> 10;

        $i50 = (int) $l49;

        $i51 = $i50 & 31;

        $b52 = $r13[$i51];

        $r12[$i46] = $b52;

        $r14 = r0.<org.apache.commons.codec.binary.Base32: byte[] buffer>;

        $i53 = r0.<org.apache.commons.codec.binary.Base32: int pos>;

        $i54 = $i53 + 1;

        r0.<org.apache.commons.codec.binary.Base32: int pos> = $i54;

        $r15 = r0.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>;

        $l55 = r0.<org.apache.commons.codec.binary.Base32: long bitWorkArea>;

        $l56 = $l55 >> 5;

        $i57 = (int) $l56;

        $i58 = $i57 & 31;

        $b59 = $r15[$i58];

        $r14[$i53] = $b59;

        $r16 = r0.<org.apache.commons.codec.binary.Base32: byte[] buffer>;

        $i60 = r0.<org.apache.commons.codec.binary.Base32: int pos>;

        $i61 = $i60 + 1;

        r0.<org.apache.commons.codec.binary.Base32: int pos> = $i61;

        $r17 = r0.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>;

        $l62 = r0.<org.apache.commons.codec.binary.Base32: long bitWorkArea>;

        $i63 = (int) $l62;

        $i64 = $i63 & 31;

        $b65 = $r17[$i64];

        $r16[$i60] = $b65;

        $i66 = r0.<org.apache.commons.codec.binary.Base32: int currentLinePos>;

        $i67 = $i66 + 8;

        r0.<org.apache.commons.codec.binary.Base32: int currentLinePos> = $i67;

        $i68 = r0.<org.apache.commons.codec.binary.Base32: int lineLength>;

        if $i68 <= 0 goto label12;

        $i70 = r0.<org.apache.commons.codec.binary.Base32: int lineLength>;

        $i69 = r0.<org.apache.commons.codec.binary.Base32: int currentLinePos>;

        if $i70 > $i69 goto label12;

        $r20 = r0.<org.apache.commons.codec.binary.Base32: byte[] lineSeparator>;

        $r19 = r0.<org.apache.commons.codec.binary.Base32: byte[] buffer>;

        $i72 = r0.<org.apache.commons.codec.binary.Base32: int pos>;

        $r18 = r0.<org.apache.commons.codec.binary.Base32: byte[] lineSeparator>;

        $i71 = lengthof $r18;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r20, 0, $r19, $i72, $i71);

        $i74 = r0.<org.apache.commons.codec.binary.Base32: int pos>;

        $r21 = r0.<org.apache.commons.codec.binary.Base32: byte[] lineSeparator>;

        $i73 = lengthof $r21;

        $i75 = $i74 + $i73;

        r0.<org.apache.commons.codec.binary.Base32: int pos> = $i75;

        r0.<org.apache.commons.codec.binary.Base32: int currentLinePos> = 0;

     label12:
        i247 = i247 + 1;

        goto label10;

     label13:
        return;
    }

    public boolean isInAlphabet(byte)
    {
        byte[] $r1, $r2;
        org.apache.commons.codec.binary.Base32 r0;
        byte b0, $b2;
        int $i1, $i3, $i4, $i5, $i6, $i8;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.binary.Base32;

        b0 := @parameter0: byte;

        $i3 = (int) b0;

        if $i3 < 0 goto label1;

        $r1 = r0.<org.apache.commons.codec.binary.Base32: byte[] decodeTable>;

        $i1 = lengthof $r1;

        $i4 = (int) b0;

        if $i4 >= $i1 goto label1;

        $r2 = r0.<org.apache.commons.codec.binary.Base32: byte[] decodeTable>;

        $i5 = (int) b0;

        $b2 = $r2[$i5];

        $i6 = (int) $b2;

        $i8 = (int) -1;

        if $i6 == $i8 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    static void <clinit>()
    {
        byte[] $r0, $r1, $r2, $r3, $r4;

        <org.apache.commons.codec.binary.Base32: int MASK_5BITS> = 31;

        <org.apache.commons.codec.binary.Base32: int BYTES_PER_UNENCODED_BLOCK> = 5;

        <org.apache.commons.codec.binary.Base32: int BYTES_PER_ENCODED_BLOCK> = 8;

        <org.apache.commons.codec.binary.Base32: int BITS_PER_ENCODED_BYTE> = 5;

        $r0 = newarray (byte)[2];

        $r0[0] = 13;

        $r0[1] = 10;

        <org.apache.commons.codec.binary.Base32: byte[] CHUNK_SEPARATOR> = $r0;

        $r1 = newarray (byte)[91];

        $r1[0] = -1;

        $r1[1] = -1;

        $r1[2] = -1;

        $r1[3] = -1;

        $r1[4] = -1;

        $r1[5] = -1;

        $r1[6] = -1;

        $r1[7] = -1;

        $r1[8] = -1;

        $r1[9] = -1;

        $r1[10] = -1;

        $r1[11] = -1;

        $r1[12] = -1;

        $r1[13] = -1;

        $r1[14] = -1;

        $r1[15] = -1;

        $r1[16] = -1;

        $r1[17] = -1;

        $r1[18] = -1;

        $r1[19] = -1;

        $r1[20] = -1;

        $r1[21] = -1;

        $r1[22] = -1;

        $r1[23] = -1;

        $r1[24] = -1;

        $r1[25] = -1;

        $r1[26] = -1;

        $r1[27] = -1;

        $r1[28] = -1;

        $r1[29] = -1;

        $r1[30] = -1;

        $r1[31] = -1;

        $r1[32] = -1;

        $r1[33] = -1;

        $r1[34] = -1;

        $r1[35] = -1;

        $r1[36] = -1;

        $r1[37] = -1;

        $r1[38] = -1;

        $r1[39] = -1;

        $r1[40] = -1;

        $r1[41] = -1;

        $r1[42] = -1;

        $r1[43] = -1;

        $r1[44] = -1;

        $r1[45] = -1;

        $r1[46] = -1;

        $r1[47] = 63;

        $r1[48] = -1;

        $r1[49] = -1;

        $r1[50] = 26;

        $r1[51] = 27;

        $r1[52] = 28;

        $r1[53] = 29;

        $r1[54] = 30;

        $r1[55] = 31;

        $r1[56] = -1;

        $r1[57] = -1;

        $r1[58] = -1;

        $r1[59] = -1;

        $r1[60] = -1;

        $r1[61] = -1;

        $r1[62] = -1;

        $r1[63] = -1;

        $r1[64] = -1;

        $r1[65] = 0;

        $r1[66] = 1;

        $r1[67] = 2;

        $r1[68] = 3;

        $r1[69] = 4;

        $r1[70] = 5;

        $r1[71] = 6;

        $r1[72] = 7;

        $r1[73] = 8;

        $r1[74] = 9;

        $r1[75] = 10;

        $r1[76] = 11;

        $r1[77] = 12;

        $r1[78] = 13;

        $r1[79] = 14;

        $r1[80] = 15;

        $r1[81] = 16;

        $r1[82] = 17;

        $r1[83] = 18;

        $r1[84] = 19;

        $r1[85] = 20;

        $r1[86] = 21;

        $r1[87] = 22;

        $r1[88] = 23;

        $r1[89] = 24;

        $r1[90] = 25;

        <org.apache.commons.codec.binary.Base32: byte[] DECODE_TABLE> = $r1;

        $r2 = newarray (byte)[32];

        $r2[0] = 65;

        $r2[1] = 66;

        $r2[2] = 67;

        $r2[3] = 68;

        $r2[4] = 69;

        $r2[5] = 70;

        $r2[6] = 71;

        $r2[7] = 72;

        $r2[8] = 73;

        $r2[9] = 74;

        $r2[10] = 75;

        $r2[11] = 76;

        $r2[12] = 77;

        $r2[13] = 78;

        $r2[14] = 79;

        $r2[15] = 80;

        $r2[16] = 81;

        $r2[17] = 82;

        $r2[18] = 83;

        $r2[19] = 84;

        $r2[20] = 85;

        $r2[21] = 86;

        $r2[22] = 87;

        $r2[23] = 88;

        $r2[24] = 89;

        $r2[25] = 90;

        $r2[26] = 50;

        $r2[27] = 51;

        $r2[28] = 52;

        $r2[29] = 53;

        $r2[30] = 54;

        $r2[31] = 55;

        <org.apache.commons.codec.binary.Base32: byte[] ENCODE_TABLE> = $r2;

        $r3 = newarray (byte)[88];

        $r3[0] = -1;

        $r3[1] = -1;

        $r3[2] = -1;

        $r3[3] = -1;

        $r3[4] = -1;

        $r3[5] = -1;

        $r3[6] = -1;

        $r3[7] = -1;

        $r3[8] = -1;

        $r3[9] = -1;

        $r3[10] = -1;

        $r3[11] = -1;

        $r3[12] = -1;

        $r3[13] = -1;

        $r3[14] = -1;

        $r3[15] = -1;

        $r3[16] = -1;

        $r3[17] = -1;

        $r3[18] = -1;

        $r3[19] = -1;

        $r3[20] = -1;

        $r3[21] = -1;

        $r3[22] = -1;

        $r3[23] = -1;

        $r3[24] = -1;

        $r3[25] = -1;

        $r3[26] = -1;

        $r3[27] = -1;

        $r3[28] = -1;

        $r3[29] = -1;

        $r3[30] = -1;

        $r3[31] = -1;

        $r3[32] = -1;

        $r3[33] = -1;

        $r3[34] = -1;

        $r3[35] = -1;

        $r3[36] = -1;

        $r3[37] = -1;

        $r3[38] = -1;

        $r3[39] = -1;

        $r3[40] = -1;

        $r3[41] = -1;

        $r3[42] = -1;

        $r3[43] = -1;

        $r3[44] = -1;

        $r3[45] = -1;

        $r3[46] = -1;

        $r3[47] = 63;

        $r3[48] = 0;

        $r3[49] = 1;

        $r3[50] = 2;

        $r3[51] = 3;

        $r3[52] = 4;

        $r3[53] = 5;

        $r3[54] = 6;

        $r3[55] = 7;

        $r3[56] = 8;

        $r3[57] = 9;

        $r3[58] = -1;

        $r3[59] = -1;

        $r3[60] = -1;

        $r3[61] = -1;

        $r3[62] = -1;

        $r3[63] = -1;

        $r3[64] = -1;

        $r3[65] = 10;

        $r3[66] = 11;

        $r3[67] = 12;

        $r3[68] = 13;

        $r3[69] = 14;

        $r3[70] = 15;

        $r3[71] = 16;

        $r3[72] = 17;

        $r3[73] = 18;

        $r3[74] = 19;

        $r3[75] = 20;

        $r3[76] = 21;

        $r3[77] = 22;

        $r3[78] = 23;

        $r3[79] = 24;

        $r3[80] = 25;

        $r3[81] = 26;

        $r3[82] = 27;

        $r3[83] = 28;

        $r3[84] = 29;

        $r3[85] = 30;

        $r3[86] = 31;

        $r3[87] = 32;

        <org.apache.commons.codec.binary.Base32: byte[] HEX_DECODE_TABLE> = $r3;

        $r4 = newarray (byte)[32];

        $r4[0] = 48;

        $r4[1] = 49;

        $r4[2] = 50;

        $r4[3] = 51;

        $r4[4] = 52;

        $r4[5] = 53;

        $r4[6] = 54;

        $r4[7] = 55;

        $r4[8] = 56;

        $r4[9] = 57;

        $r4[10] = 65;

        $r4[11] = 66;

        $r4[12] = 67;

        $r4[13] = 68;

        $r4[14] = 69;

        $r4[15] = 70;

        $r4[16] = 71;

        $r4[17] = 72;

        $r4[18] = 73;

        $r4[19] = 74;

        $r4[20] = 75;

        $r4[21] = 76;

        $r4[22] = 77;

        $r4[23] = 78;

        $r4[24] = 79;

        $r4[25] = 80;

        $r4[26] = 81;

        $r4[27] = 82;

        $r4[28] = 83;

        $r4[29] = 84;

        $r4[30] = 85;

        $r4[31] = 86;

        <org.apache.commons.codec.binary.Base32: byte[] HEX_ENCODE_TABLE> = $r4;

        return;
    }
}
