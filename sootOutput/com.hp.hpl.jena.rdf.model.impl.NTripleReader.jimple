public class com.hp.hpl.jena.rdf.model.impl.NTripleReader extends java.lang.Object implements com.hp.hpl.jena.rdf.model.RDFReader
{
    static final org.slf4j.Logger log;
    private com.hp.hpl.jena.rdf.model.Model model;
    private java.util.Hashtable anons;
    private com.hp.hpl.jena.rdf.model.impl.IStream in;
    private boolean inErr;
    private int errCount;
    private static final int sbLength;
    private com.hp.hpl.jena.rdf.model.RDFErrorHandler errorHandler;
    private java.lang.String base;

    void <init>()
    {
        com.hp.hpl.jena.rdf.model.impl.RDFDefaultErrorHandler $r2;
        com.hp.hpl.jena.rdf.model.impl.NTripleReader r0;
        java.util.Hashtable $r1;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.NTripleReader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: com.hp.hpl.jena.rdf.model.Model model> = null;

        $r1 = new java.util.Hashtable;

        specialinvoke $r1.<java.util.Hashtable: void <init>()>();

        r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: java.util.Hashtable anons> = $r1;

        r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: com.hp.hpl.jena.rdf.model.impl.IStream in> = null;

        r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: boolean inErr> = 0;

        r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: int errCount> = 0;

        $r2 = new com.hp.hpl.jena.rdf.model.impl.RDFDefaultErrorHandler;

        specialinvoke $r2.<com.hp.hpl.jena.rdf.model.impl.RDFDefaultErrorHandler: void <init>()>();

        r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: com.hp.hpl.jena.rdf.model.RDFErrorHandler errorHandler> = $r2;

        return;
    }

    public void read(com.hp.hpl.jena.rdf.model.Model, java.io.InputStream, java.lang.String)
    {
        com.hp.hpl.jena.rdf.model.impl.NTripleReader r0;
        com.hp.hpl.jena.rdf.model.Model r1;
        java.io.Reader $r3;
        java.lang.String r4;
        java.io.InputStream r2;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.NTripleReader;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        r2 := @parameter1: java.io.InputStream;

        r4 := @parameter2: java.lang.String;

        $r3 = staticinvoke <com.hp.hpl.jena.util.FileUtils: java.io.Reader asUTF8(java.io.InputStream)>(r2);

        virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: void read(com.hp.hpl.jena.rdf.model.Model,java.io.Reader,java.lang.String)>(r1, $r3, r4);

        return;
    }

    public void read(com.hp.hpl.jena.rdf.model.Model, java.io.Reader, java.lang.String)
    {
        java.io.Reader r9;
        com.hp.hpl.jena.rdf.model.impl.NTripleReader r0;
        com.hp.hpl.jena.shared.SyntaxError $r7;
        com.hp.hpl.jena.rdf.model.impl.IStream $r6;
        com.hp.hpl.jena.rdf.model.Model r1;
        int $i0;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String r2, $r10;
        java.io.BufferedReader $r8;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.NTripleReader;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        r9 := @parameter1: java.io.Reader;

        r2 := @parameter2: java.lang.String;

        $z0 = r9 instanceof java.io.BufferedReader;

        if $z0 != 0 goto label1;

        $r8 = new java.io.BufferedReader;

        specialinvoke $r8.<java.io.BufferedReader: void <init>(java.io.Reader)>(r9);

        r9 = $r8;

     label1:
        r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: com.hp.hpl.jena.rdf.model.Model model> = r1;

        if r2 != null goto label2;

        $r10 = "";

        goto label3;

     label2:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r10 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

     label3:
        r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: java.lang.String base> = $r10;

        $r6 = new com.hp.hpl.jena.rdf.model.impl.IStream;

        specialinvoke $r6.<com.hp.hpl.jena.rdf.model.impl.IStream: void <init>(java.io.Reader)>(r9);

        r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: com.hp.hpl.jena.rdf.model.impl.IStream in> = $r6;

        virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: void readRDF()>();

        $i0 = r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: int errCount>;

        if $i0 == 0 goto label4;

        $r7 = new com.hp.hpl.jena.shared.SyntaxError;

        specialinvoke $r7.<com.hp.hpl.jena.shared.SyntaxError: void <init>(java.lang.String)>("unknown");

        throw $r7;

     label4:
        return;
    }

    public void read(com.hp.hpl.jena.rdf.model.Model, java.lang.String)
    {
        java.lang.Throwable $r7;
        com.hp.hpl.jena.shared.JenaException $r10;
        java.net.URL $r3;
        java.io.InputStreamReader $r2;
        java.lang.Exception $r9;
        com.hp.hpl.jena.rdf.model.impl.NTripleReader r0;
        com.hp.hpl.jena.shared.SyntaxError $r6, $r8;
        com.hp.hpl.jena.rdf.model.Model r1;
        int $i0, $i1;
        java.lang.String r4;
        java.io.InputStream $r5;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.NTripleReader;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        r4 := @parameter1: java.lang.String;

     label1:
        $r2 = new java.io.InputStreamReader;

        $r3 = new java.net.URL;

        specialinvoke $r3.<java.net.URL: void <init>(java.lang.String)>(r4);

        $r5 = virtualinvoke $r3.<java.net.URL: java.io.InputStream openStream()>();

        specialinvoke $r2.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r5);

        virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: void read(com.hp.hpl.jena.rdf.model.Model,java.io.Reader,java.lang.String)>(r1, $r2, r4);

     label2:
        $i0 = r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: int errCount>;

        if $i0 == 0 goto label7;

        $r6 = new com.hp.hpl.jena.shared.SyntaxError;

        specialinvoke $r6.<com.hp.hpl.jena.shared.SyntaxError: void <init>(java.lang.String)>("unknown");

        throw $r6;

     label3:
        $r9 := @caughtexception;

        $r10 = new com.hp.hpl.jena.shared.JenaException;

        specialinvoke $r10.<com.hp.hpl.jena.shared.JenaException: void <init>(java.lang.Throwable)>($r9);

        throw $r10;

     label4:
        $r7 := @caughtexception;

     label5:
        $i1 = r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: int errCount>;

        if $i1 == 0 goto label6;

        $r8 = new com.hp.hpl.jena.shared.SyntaxError;

        specialinvoke $r8.<com.hp.hpl.jena.shared.SyntaxError: void <init>(java.lang.String)>("unknown");

        throw $r8;

     label6:
        throw $r7;

     label7:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label5 with label4;
    }

    public java.lang.Object setProperty(java.lang.String, java.lang.Object)
    {
        com.hp.hpl.jena.rdf.model.impl.NTripleReader r0;
        com.hp.hpl.jena.shared.UnknownPropertyException $r1;
        com.hp.hpl.jena.rdf.model.RDFErrorHandler $r3;
        java.lang.Object r4;
        java.lang.String r2;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.NTripleReader;

        r2 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.Object;

        $r3 = r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: com.hp.hpl.jena.rdf.model.RDFErrorHandler errorHandler>;

        $r1 = new com.hp.hpl.jena.shared.UnknownPropertyException;

        specialinvoke $r1.<com.hp.hpl.jena.shared.UnknownPropertyException: void <init>(java.lang.String)>(r2);

        interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.RDFErrorHandler: void error(java.lang.Exception)>($r1);

        return null;
    }

    public com.hp.hpl.jena.rdf.model.RDFErrorHandler setErrorHandler(com.hp.hpl.jena.rdf.model.RDFErrorHandler)
    {
        com.hp.hpl.jena.rdf.model.impl.NTripleReader r0;
        com.hp.hpl.jena.rdf.model.RDFErrorHandler r1, r2;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.NTripleReader;

        r2 := @parameter0: com.hp.hpl.jena.rdf.model.RDFErrorHandler;

        r1 = r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: com.hp.hpl.jena.rdf.model.RDFErrorHandler errorHandler>;

        r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: com.hp.hpl.jena.rdf.model.RDFErrorHandler errorHandler> = r2;

        return r1;
    }

    protected void readRDF()
    {
        java.lang.Throwable $r5;
        com.hp.hpl.jena.graph.GraphEvents $r1, $r3, $r6;
        com.hp.hpl.jena.rdf.model.impl.NTripleReader r0;
        com.hp.hpl.jena.rdf.model.Model $r2, $r4, $r7;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.NTripleReader;

     label1:
        $r2 = r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: com.hp.hpl.jena.rdf.model.Model model>;

        $r1 = <com.hp.hpl.jena.graph.GraphEvents: com.hp.hpl.jena.graph.GraphEvents startRead>;

        interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Model notifyEvent(java.lang.Object)>($r1);

        virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: void unwrappedReadRDF()>();

     label2:
        $r4 = r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: com.hp.hpl.jena.rdf.model.Model model>;

        $r3 = <com.hp.hpl.jena.graph.GraphEvents: com.hp.hpl.jena.graph.GraphEvents finishRead>;

        interfaceinvoke $r4.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Model notifyEvent(java.lang.Object)>($r3);

        goto label5;

     label3:
        $r5 := @caughtexception;

     label4:
        $r7 = r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: com.hp.hpl.jena.rdf.model.Model model>;

        $r6 = <com.hp.hpl.jena.graph.GraphEvents: com.hp.hpl.jena.graph.GraphEvents finishRead>;

        interfaceinvoke $r7.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Model notifyEvent(java.lang.Object)>($r6);

        throw $r5;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    protected final void unwrappedReadRDF()
    {
        com.hp.hpl.jena.rdf.model.Property r14;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        com.hp.hpl.jena.rdf.model.RDFNode $r8;
        java.lang.Exception $r10, $r12;
        int $i0, $i1, $i3;
        java.lang.String $r7;
        char $c2;
        com.hp.hpl.jena.rdf.model.Resource $r4, $r5;
        com.hp.hpl.jena.rdf.model.impl.NTripleReader r0;
        com.hp.hpl.jena.rdf.model.impl.IStream $r1, $r2, $r3, $r15, $r16;
        com.hp.hpl.jena.rdf.model.Model $r6, $r9;
        com.hp.hpl.jena.rdf.model.RDFErrorHandler $r11, $r13;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.NTripleReader;

        r14 = null;

     label01:
        $r15 = r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: com.hp.hpl.jena.rdf.model.impl.IStream in>;

        $z8 = virtualinvoke $r15.<com.hp.hpl.jena.rdf.model.impl.IStream: boolean eof()>();

        if $z8 != 0 goto label19;

     label02:
        $r16 = r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: com.hp.hpl.jena.rdf.model.impl.IStream in>;

        $z9 = virtualinvoke $r16.<com.hp.hpl.jena.rdf.model.impl.IStream: boolean eof()>();

        if $z9 != 0 goto label17;

        r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: boolean inErr> = 0;

        virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: void skipWhiteSpace()>();

        $r3 = r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: com.hp.hpl.jena.rdf.model.impl.IStream in>;

        $z1 = virtualinvoke $r3.<com.hp.hpl.jena.rdf.model.impl.IStream: boolean eof()>();

        if $z1 == 0 goto label03;

        return;

     label03:
        $r4 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: com.hp.hpl.jena.rdf.model.Resource readResource()>();

        $z2 = r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: boolean inErr>;

        if $z2 == 0 goto label04;

        goto label17;

     label04:
        virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: void skipWhiteSpace()>();

     label05:
        $r5 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: com.hp.hpl.jena.rdf.model.Resource readResource()>();

        $z3 = r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: boolean inErr>;

        if $z3 == 0 goto label07;

     label06:
        goto label17;

     label07:
        $r6 = r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: com.hp.hpl.jena.rdf.model.Model model>;

        $r7 = interfaceinvoke $r5.<com.hp.hpl.jena.rdf.model.Resource: java.lang.String getURI()>();

        r14 = interfaceinvoke $r6.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Property createProperty(java.lang.String)>($r7);

     label08:
        goto label10;

     label09:
        $r12 := @caughtexception;

        $r13 = r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: com.hp.hpl.jena.rdf.model.RDFErrorHandler errorHandler>;

        interfaceinvoke $r13.<com.hp.hpl.jena.rdf.model.RDFErrorHandler: void fatalError(java.lang.Exception)>($r12);

     label10:
        $z4 = r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: boolean inErr>;

        if $z4 == 0 goto label11;

        goto label17;

     label11:
        virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: void skipWhiteSpace()>();

        $r8 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: com.hp.hpl.jena.rdf.model.RDFNode readNode()>();

        $z5 = r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: boolean inErr>;

        if $z5 == 0 goto label12;

        goto label17;

     label12:
        virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: void skipWhiteSpace()>();

        $z6 = specialinvoke r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: boolean badEOF()>();

        if $z6 == 0 goto label13;

        goto label17;

     label13:
        $z7 = specialinvoke r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: boolean expect(java.lang.String)>(".");

        if $z7 != 0 goto label14;

        goto label17;

     label14:
        $r9 = r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: com.hp.hpl.jena.rdf.model.Model model>;

        interfaceinvoke $r9.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Model add(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>($r4, r14, $r8);

     label15:
        goto label02;

     label16:
        $r10 := @caughtexception;

        $r11 = r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: com.hp.hpl.jena.rdf.model.RDFErrorHandler errorHandler>;

        interfaceinvoke $r11.<com.hp.hpl.jena.rdf.model.RDFErrorHandler: void fatalError(java.lang.Exception)>($r10);

        goto label02;

     label17:
        $z10 = r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: boolean inErr>;

        if $z10 == 0 goto label01;

        $i0 = r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: int errCount>;

        $i1 = $i0 + 1;

        r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: int errCount> = $i1;

     label18:
        $r1 = r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: com.hp.hpl.jena.rdf.model.impl.IStream in>;

        $z0 = virtualinvoke $r1.<com.hp.hpl.jena.rdf.model.impl.IStream: boolean eof()>();

        if $z0 != 0 goto label01;

        $r2 = r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: com.hp.hpl.jena.rdf.model.impl.IStream in>;

        $c2 = virtualinvoke $r2.<com.hp.hpl.jena.rdf.model.impl.IStream: char readChar()>();

        $i3 = (int) $c2;

        if $i3 == 10 goto label01;

        goto label18;

     label19:
        return;

        catch java.lang.Exception from label05 to label06 with label09;
        catch java.lang.Exception from label07 to label08 with label09;
        catch java.lang.Exception from label14 to label15 with label16;
    }

    public com.hp.hpl.jena.rdf.model.Resource readResource()
    {
        int $i2, $i3, $i4;
        java.lang.String $r2, $r6;
        boolean $z0, $z1;
        java.io.PrintStream $r8;
        char $c0, $c1;
        com.hp.hpl.jena.rdf.model.Resource $r5, $r7;
        com.hp.hpl.jena.rdf.model.impl.NTripleReader r0;
        com.hp.hpl.jena.rdf.model.impl.IStream $r1, $r3;
        com.hp.hpl.jena.rdf.model.Model $r4;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.NTripleReader;

        $r1 = r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: com.hp.hpl.jena.rdf.model.impl.IStream in>;

        $c0 = virtualinvoke $r1.<com.hp.hpl.jena.rdf.model.impl.IStream: char readChar()>();

        $z0 = specialinvoke r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: boolean badEOF()>();

        if $z0 == 0 goto label1;

        $r8 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>("**** Bad EOF");

        return null;

     label1:
        $i2 = (int) $c0;

        if $i2 != 95 goto label4;

        $z1 = specialinvoke r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: boolean expect(java.lang.String)>(":");

        if $z1 != 0 goto label2;

        return null;

     label2:
        $r6 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: java.lang.String readName()>();

        if $r6 != null goto label3;

        specialinvoke r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: void syntaxError(java.lang.String)>("expected bNode label");

        return null;

     label3:
        $r7 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: com.hp.hpl.jena.rdf.model.Resource lookupResource(java.lang.String)>($r6);

        return $r7;

     label4:
        $i3 = (int) $c0;

        if $i3 != 60 goto label7;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: java.lang.String readURI()>();

        if $r2 != null goto label5;

        r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: boolean inErr> = 1;

        return null;

     label5:
        $r3 = r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: com.hp.hpl.jena.rdf.model.impl.IStream in>;

        $c1 = virtualinvoke $r3.<com.hp.hpl.jena.rdf.model.impl.IStream: char readChar()>();

        $i4 = (int) $c1;

        if $i4 == 62 goto label6;

        specialinvoke r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: void syntaxError(java.lang.String)>("expected \'>\'");

        return null;

     label6:
        $r4 = r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: com.hp.hpl.jena.rdf.model.Model model>;

        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Resource createResource(java.lang.String)>($r2);

        return $r5;

     label7:
        specialinvoke r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: void syntaxError(java.lang.String)>("unexpected input");

        return null;
    }

    public com.hp.hpl.jena.rdf.model.RDFNode readNode()
    {
        com.hp.hpl.jena.rdf.model.impl.NTripleReader r0;
        com.hp.hpl.jena.rdf.model.impl.IStream $r1;
        int $i1;
        char $c0;
        com.hp.hpl.jena.rdf.model.Literal $r3;
        com.hp.hpl.jena.rdf.model.Resource $r2;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.NTripleReader;

        virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: void skipWhiteSpace()>();

        $r1 = r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: com.hp.hpl.jena.rdf.model.impl.IStream in>;

        $c0 = virtualinvoke $r1.<com.hp.hpl.jena.rdf.model.impl.IStream: char nextChar()>();

        $i1 = (int) $c0;

        lookupswitch($i1)
        {
            case 34: goto label1;
            case 60: goto label2;
            case 95: goto label2;
            default: goto label3;
        };

     label1:
        $r3 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: com.hp.hpl.jena.rdf.model.Literal readLiteral()>();

        return $r3;

     label2:
        $r2 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: com.hp.hpl.jena.rdf.model.Resource readResource()>();

        return $r2;

     label3:
        specialinvoke r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: void syntaxError(java.lang.String)>("unexpected input");

        return null;
    }

    protected com.hp.hpl.jena.rdf.model.Literal readLiteral()
    {
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.StringBuilder $r15, $r16, $r17, $r23;
        com.hp.hpl.jena.rdf.model.Literal $r7, $r11;
        java.lang.StringBuffer r19, $r22;
        int $i3, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19;
        java.lang.String $r6, $r8, $r10, $r18, r20;
        char $c0, $c1, $c2, $c4, c5, $c6;
        com.hp.hpl.jena.rdf.model.impl.NTripleReader r1;
        com.hp.hpl.jena.rdf.model.impl.IStream $r2, $r3, $r4, $r12, $r13, $r21;
        com.hp.hpl.jena.rdf.model.Model $r5, $r9;

        r1 := @this: com.hp.hpl.jena.rdf.model.impl.NTripleReader;

        $r22 = new java.lang.StringBuffer;

        specialinvoke $r22.<java.lang.StringBuffer: void <init>(int)>(200);

        r19 = $r22;

        $z0 = specialinvoke r1.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: boolean expect(java.lang.String)>("\"");

        if $z0 != 0 goto label01;

        return null;

     label01:
        $r2 = r1.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: com.hp.hpl.jena.rdf.model.impl.IStream in>;

        $c0 = virtualinvoke $r2.<com.hp.hpl.jena.rdf.model.impl.IStream: char readChar()>();

        c5 = $c0;

        $z1 = specialinvoke r1.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: boolean badEOF()>();

        if $z1 == 0 goto label02;

        return null;

     label02:
        $i7 = (int) $c0;

        if $i7 != 92 goto label11;

        $r12 = r1.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: com.hp.hpl.jena.rdf.model.impl.IStream in>;

        $c4 = virtualinvoke $r12.<com.hp.hpl.jena.rdf.model.impl.IStream: char readChar()>();

        $r13 = r1.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: com.hp.hpl.jena.rdf.model.impl.IStream in>;

        $z4 = virtualinvoke $r13.<com.hp.hpl.jena.rdf.model.impl.IStream: boolean eof()>();

        if $z4 == 0 goto label03;

        r1.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: boolean inErr> = 1;

        return null;

     label03:
        $i8 = (int) $c4;

        if $i8 != 110 goto label04;

        c5 = 10;

        goto label10;

     label04:
        $i9 = (int) $c4;

        if $i9 != 114 goto label05;

        c5 = 13;

        goto label10;

     label05:
        $i10 = (int) $c4;

        if $i10 != 116 goto label06;

        c5 = 9;

        goto label10;

     label06:
        $i11 = (int) $c4;

        if $i11 == 92 goto label07;

        $i12 = (int) $c4;

        if $i12 != 34 goto label08;

     label07:
        c5 = $c4;

        goto label10;

     label08:
        $i13 = (int) $c4;

        if $i13 != 117 goto label09;

        c5 = specialinvoke r1.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: char readUnicode4Escape()>();

        $z5 = r1.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: boolean inErr>;

        if $z5 == 0 goto label10;

        return null;

     label09:
        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("illegal escape sequence \'");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c4);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r1.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: void syntaxError(java.lang.String)>($r18);

        return null;

     label10:
        goto label22;

     label11:
        $i14 = (int) $c0;

        if $i14 != 34 goto label20;

        $r3 = r1.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: com.hp.hpl.jena.rdf.model.impl.IStream in>;

        $c1 = virtualinvoke $r3.<com.hp.hpl.jena.rdf.model.impl.IStream: char nextChar()>();

        $i15 = (int) $c1;

        if 64 != $i15 goto label12;

        specialinvoke r1.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: boolean expect(java.lang.String)>("@");

        r20 = specialinvoke r1.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: java.lang.String readLang()>();

        goto label14;

     label12:
        $r4 = r1.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: com.hp.hpl.jena.rdf.model.impl.IStream in>;

        $c2 = virtualinvoke $r4.<com.hp.hpl.jena.rdf.model.impl.IStream: char nextChar()>();

        $i16 = (int) $c2;

        if 45 != $i16 goto label13;

        specialinvoke r1.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: boolean expect(java.lang.String)>("-");

        specialinvoke r1.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: void deprecated(java.lang.String)>("Language tags should be introduced with @ not -.");

        r20 = specialinvoke r1.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: java.lang.String readLang()>();

        goto label14;

     label13:
        r20 = "";

     label14:
        $r21 = r1.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: com.hp.hpl.jena.rdf.model.impl.IStream in>;

        $c6 = virtualinvoke $r21.<com.hp.hpl.jena.rdf.model.impl.IStream: char nextChar()>();

        $i17 = (int) $c6;

        if 94 != $i17 goto label19;

        $z2 = specialinvoke r1.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: boolean expect(java.lang.String)>("^^<");

        if $z2 != 0 goto label15;

        specialinvoke r1.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: void syntaxError(java.lang.String)>("ill-formed datatype");

        return null;

     label15:
        $r8 = virtualinvoke r1.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: java.lang.String readURI()>();

        if $r8 == null goto label16;

        $z3 = specialinvoke r1.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: boolean expect(java.lang.String)>(">");

        if $z3 != 0 goto label17;

     label16:
        return null;

     label17:
        $i3 = virtualinvoke r20.<java.lang.String: int length()>();

        if $i3 <= 0 goto label18;

        specialinvoke r1.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: void deprecated(java.lang.String)>("Language tags are not permitted on typed literals.");

     label18:
        $r9 = r1.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: com.hp.hpl.jena.rdf.model.Model model>;

        $r10 = virtualinvoke r19.<java.lang.StringBuffer: java.lang.String toString()>();

        $r11 = interfaceinvoke $r9.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Literal createTypedLiteral(java.lang.String,java.lang.String)>($r10, $r8);

        return $r11;

     label19:
        $r5 = r1.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: com.hp.hpl.jena.rdf.model.Model model>;

        $r6 = virtualinvoke r19.<java.lang.StringBuffer: java.lang.String toString()>();

        $r7 = interfaceinvoke $r5.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Literal createLiteral(java.lang.String,java.lang.String)>($r6, r20);

        return $r7;

     label20:
        $i18 = (int) $c0;

        if $i18 == 10 goto label21;

        $i19 = (int) $c0;

        if $i19 != 13 goto label22;

     label21:
        specialinvoke r1.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: void deprecated(java.lang.String)>("Raw NL or CR not permitted in N-Triples data");

        return null;

     label22:
        r19 = virtualinvoke r19.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c5);

        goto label01;
    }

    private char readUnicode4Escape()
    {
        char $c0, $c1, $c2, $c3, $c5;
        java.lang.NumberFormatException $r7;
        com.hp.hpl.jena.rdf.model.impl.NTripleReader r1;
        com.hp.hpl.jena.rdf.model.impl.IStream $r2, $r3, $r4, $r5;
        int $i4;
        char[] $r0;
        java.lang.String $r6;
        boolean $z0;

        r1 := @this: com.hp.hpl.jena.rdf.model.impl.NTripleReader;

        $r0 = newarray (char)[4];

        $r2 = r1.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: com.hp.hpl.jena.rdf.model.impl.IStream in>;

        $c0 = virtualinvoke $r2.<com.hp.hpl.jena.rdf.model.impl.IStream: char readChar()>();

        $r0[0] = $c0;

        $r3 = r1.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: com.hp.hpl.jena.rdf.model.impl.IStream in>;

        $c1 = virtualinvoke $r3.<com.hp.hpl.jena.rdf.model.impl.IStream: char readChar()>();

        $r0[1] = $c1;

        $r4 = r1.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: com.hp.hpl.jena.rdf.model.impl.IStream in>;

        $c2 = virtualinvoke $r4.<com.hp.hpl.jena.rdf.model.impl.IStream: char readChar()>();

        $r0[2] = $c2;

        $r5 = r1.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: com.hp.hpl.jena.rdf.model.impl.IStream in>;

        $c3 = virtualinvoke $r5.<com.hp.hpl.jena.rdf.model.impl.IStream: char readChar()>();

        $r0[3] = $c3;

        $z0 = specialinvoke r1.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: boolean badEOF()>();

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r6 = new java.lang.String;

        specialinvoke $r6.<java.lang.String: void <init>(char[])>($r0);

        $i4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r6, 16);

        $c5 = (char) $i4;

     label2:
        return $c5;

     label3:
        $r7 := @caughtexception;

        specialinvoke r1.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: void syntaxError(java.lang.String)>("bad unicode escape sequence");

        return 0;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    private void deprecated(java.lang.String)
    {
        com.hp.hpl.jena.rdf.model.impl.NTripleReader r0;
        com.hp.hpl.jena.shared.SyntaxError $r1;
        com.hp.hpl.jena.rdf.model.impl.IStream $r3, $r5;
        int $i0, $i1;
        com.hp.hpl.jena.rdf.model.RDFErrorHandler $r4;
        java.lang.String r2, $r6;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.NTripleReader;

        r2 := @parameter0: java.lang.String;

        $r4 = r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: com.hp.hpl.jena.rdf.model.RDFErrorHandler errorHandler>;

        $r1 = new com.hp.hpl.jena.shared.SyntaxError;

        $r3 = r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: com.hp.hpl.jena.rdf.model.impl.IStream in>;

        $i0 = virtualinvoke $r3.<com.hp.hpl.jena.rdf.model.impl.IStream: int getLinepos()>();

        $r5 = r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: com.hp.hpl.jena.rdf.model.impl.IStream in>;

        $i1 = virtualinvoke $r5.<com.hp.hpl.jena.rdf.model.impl.IStream: int getCharpos()>();

        $r6 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: java.lang.String syntaxErrorMessage(java.lang.String,java.lang.String,int,int)>("Deprecation warning", r2, $i0, $i1);

        specialinvoke $r1.<com.hp.hpl.jena.shared.SyntaxError: void <init>(java.lang.String)>($r6);

        interfaceinvoke $r4.<com.hp.hpl.jena.rdf.model.RDFErrorHandler: void warning(java.lang.Exception)>($r1);

        return;
    }

    private void syntaxError(java.lang.String)
    {
        com.hp.hpl.jena.rdf.model.impl.NTripleReader r0;
        com.hp.hpl.jena.shared.SyntaxError $r1;
        com.hp.hpl.jena.rdf.model.impl.IStream $r3, $r5;
        int $i0, $i1;
        com.hp.hpl.jena.rdf.model.RDFErrorHandler $r4;
        java.lang.String r2, $r6;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.NTripleReader;

        r2 := @parameter0: java.lang.String;

        $r4 = r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: com.hp.hpl.jena.rdf.model.RDFErrorHandler errorHandler>;

        $r1 = new com.hp.hpl.jena.shared.SyntaxError;

        $r3 = r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: com.hp.hpl.jena.rdf.model.impl.IStream in>;

        $i0 = virtualinvoke $r3.<com.hp.hpl.jena.rdf.model.impl.IStream: int getLinepos()>();

        $r5 = r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: com.hp.hpl.jena.rdf.model.impl.IStream in>;

        $i1 = virtualinvoke $r5.<com.hp.hpl.jena.rdf.model.impl.IStream: int getCharpos()>();

        $r6 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: java.lang.String syntaxErrorMessage(java.lang.String,java.lang.String,int,int)>("Syntax error", r2, $i0, $i1);

        specialinvoke $r1.<com.hp.hpl.jena.shared.SyntaxError: void <init>(java.lang.String)>($r6);

        interfaceinvoke $r4.<com.hp.hpl.jena.rdf.model.RDFErrorHandler: void error(java.lang.Exception)>($r1);

        r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: boolean inErr> = 1;

        return;
    }

    private java.lang.String readLang()
    {
        char $c0, $c1;
        com.hp.hpl.jena.rdf.model.impl.NTripleReader r1;
        com.hp.hpl.jena.rdf.model.impl.IStream $r2, $r3;
        java.lang.StringBuffer r4, $r6;
        int $i2, $i3;
        java.lang.String $r5;
        boolean $z0;

        r1 := @this: com.hp.hpl.jena.rdf.model.impl.NTripleReader;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>(int)>(15);

        r4 = $r6;

     label1:
        $r2 = r1.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: com.hp.hpl.jena.rdf.model.impl.IStream in>;

        $c0 = virtualinvoke $r2.<com.hp.hpl.jena.rdf.model.impl.IStream: char nextChar()>();

        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c0);

        if $z0 != 0 goto label2;

        $i2 = (int) $c0;

        if $i2 == 46 goto label2;

        $i3 = (int) $c0;

        if $i3 != 94 goto label3;

     label2:
        $r5 = virtualinvoke r4.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r5;

     label3:
        $r3 = r1.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: com.hp.hpl.jena.rdf.model.impl.IStream in>;

        $c1 = virtualinvoke $r3.<com.hp.hpl.jena.rdf.model.impl.IStream: char readChar()>();

        r4 = virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c1);

        goto label1;
    }

    private boolean badEOF()
    {
        com.hp.hpl.jena.rdf.model.impl.NTripleReader r0;
        com.hp.hpl.jena.rdf.model.impl.IStream $r1;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.NTripleReader;

        $r1 = r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: com.hp.hpl.jena.rdf.model.impl.IStream in>;

        $z0 = virtualinvoke $r1.<com.hp.hpl.jena.rdf.model.impl.IStream: boolean eof()>();

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: void syntaxError(java.lang.String)>("premature end of file");

     label1:
        $z1 = r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: boolean inErr>;

        return $z1;
    }

    protected java.lang.String readURI()
    {
        char $c0, $c1, c2;
        com.hp.hpl.jena.rdf.model.impl.NTripleReader r1;
        com.hp.hpl.jena.rdf.model.impl.IStream $r2, $r4;
        java.lang.StringBuffer r5, $r6;
        int $i3, $i4;
        java.lang.String $r3;
        boolean $z0;

        r1 := @this: com.hp.hpl.jena.rdf.model.impl.NTripleReader;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>(int)>(200);

        r5 = $r6;

     label1:
        $r2 = r1.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: com.hp.hpl.jena.rdf.model.impl.IStream in>;

        $c0 = virtualinvoke $r2.<com.hp.hpl.jena.rdf.model.impl.IStream: char nextChar()>();

        $i3 = (int) $c0;

        if $i3 == 62 goto label4;

        $r4 = r1.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: com.hp.hpl.jena.rdf.model.impl.IStream in>;

        $c1 = virtualinvoke $r4.<com.hp.hpl.jena.rdf.model.impl.IStream: char readChar()>();

        c2 = $c1;

        $i4 = (int) $c1;

        if $i4 != 92 goto label2;

        specialinvoke r1.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: boolean expect(java.lang.String)>("u");

        c2 = specialinvoke r1.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: char readUnicode4Escape()>();

     label2:
        $z0 = specialinvoke r1.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: boolean badEOF()>();

        if $z0 == 0 goto label3;

        return null;

     label3:
        r5 = virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c2);

        goto label1;

     label4:
        $r3 = virtualinvoke r5.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    protected java.lang.String readName()
    {
        char $c0, $c1;
        com.hp.hpl.jena.rdf.model.impl.NTripleReader r1;
        com.hp.hpl.jena.rdf.model.impl.IStream $r2, $r3;
        java.lang.StringBuffer r5, $r6;
        int $i2;
        java.lang.String $r4;
        boolean $z0, $z1;

        r1 := @this: com.hp.hpl.jena.rdf.model.impl.NTripleReader;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>(int)>(200);

        r5 = $r6;

     label1:
        $r2 = r1.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: com.hp.hpl.jena.rdf.model.impl.IStream in>;

        $c0 = virtualinvoke $r2.<com.hp.hpl.jena.rdf.model.impl.IStream: char nextChar()>();

        $z0 = staticinvoke <java.lang.Character: boolean isLetterOrDigit(char)>($c0);

        if $z0 != 0 goto label2;

        $i2 = (int) $c0;

        if 45 != $i2 goto label3;

     label2:
        $r3 = r1.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: com.hp.hpl.jena.rdf.model.impl.IStream in>;

        $c1 = virtualinvoke $r3.<com.hp.hpl.jena.rdf.model.impl.IStream: char readChar()>();

        r5 = virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c1);

        $z1 = specialinvoke r1.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: boolean badEOF()>();

        if $z1 == 0 goto label1;

        return null;

     label3:
        $r4 = virtualinvoke r5.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    private boolean expect(java.lang.String)
    {
        char $c1, $c2;
        com.hp.hpl.jena.rdf.model.impl.NTripleReader r1;
        com.hp.hpl.jena.rdf.model.impl.IStream $r2;
        int $i0, i3, $i4, $i5;
        java.lang.StringBuilder $r4, $r5, $r6, $r8;
        java.lang.String r0, $r7;
        boolean $z0;

        r1 := @this: com.hp.hpl.jena.rdf.model.impl.NTripleReader;

        r0 := @parameter0: java.lang.String;

        i3 = 0;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if i3 >= $i0 goto label4;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i3);

        $z0 = specialinvoke r1.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: boolean badEOF()>();

        if $z0 == 0 goto label2;

        return 0;

     label2:
        $r2 = r1.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: com.hp.hpl.jena.rdf.model.impl.IStream in>;

        $c2 = virtualinvoke $r2.<com.hp.hpl.jena.rdf.model.impl.IStream: char readChar()>();

        $i4 = (int) $c2;

        $i5 = (int) $c1;

        if $i4 == $i5 goto label3;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected \"");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r1.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: void syntaxError(java.lang.String)>($r7);

        return 0;

     label3:
        i3 = i3 + 1;

        goto label1;

     label4:
        return 1;
    }

    protected void skipWhiteSpace()
    {
        int $i4, $i5, $i6;
        boolean $z0, $z1, $z2;
        char $c0, $c1, $c2, c3;
        com.hp.hpl.jena.rdf.model.impl.NTripleReader r0;
        com.hp.hpl.jena.rdf.model.impl.IStream $r1, $r2, $r3, $r4, $r5, $r6;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.NTripleReader;

     label1:
        $r1 = r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: com.hp.hpl.jena.rdf.model.impl.IStream in>;

        $c0 = virtualinvoke $r1.<com.hp.hpl.jena.rdf.model.impl.IStream: char nextChar()>();

        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c0);

        if $z0 != 0 goto label2;

        $r6 = r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: com.hp.hpl.jena.rdf.model.impl.IStream in>;

        $c2 = virtualinvoke $r6.<com.hp.hpl.jena.rdf.model.impl.IStream: char nextChar()>();

        $i4 = (int) $c2;

        if $i4 != 35 goto label6;

     label2:
        $r2 = r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: com.hp.hpl.jena.rdf.model.impl.IStream in>;

        $c1 = virtualinvoke $r2.<com.hp.hpl.jena.rdf.model.impl.IStream: char readChar()>();

        c3 = $c1;

        $r3 = r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: com.hp.hpl.jena.rdf.model.impl.IStream in>;

        $z1 = virtualinvoke $r3.<com.hp.hpl.jena.rdf.model.impl.IStream: boolean eof()>();

        if $z1 == 0 goto label3;

        return;

     label3:
        $i5 = (int) $c1;

        if $i5 != 35 goto label5;

     label4:
        $i6 = (int) c3;

        if $i6 == 10 goto label5;

        $r4 = r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: com.hp.hpl.jena.rdf.model.impl.IStream in>;

        c3 = virtualinvoke $r4.<com.hp.hpl.jena.rdf.model.impl.IStream: char readChar()>();

        $r5 = r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: com.hp.hpl.jena.rdf.model.impl.IStream in>;

        $z2 = virtualinvoke $r5.<com.hp.hpl.jena.rdf.model.impl.IStream: boolean eof()>();

        if $z2 == 0 goto label4;

        return;

     label5:
        goto label1;

     label6:
        return;
    }

    protected com.hp.hpl.jena.rdf.model.Resource lookupResource(java.lang.String)
    {
        com.hp.hpl.jena.rdf.model.Resource $r5, r7;
        com.hp.hpl.jena.rdf.model.impl.NTripleReader r0;
        com.hp.hpl.jena.rdf.model.Model $r4;
        java.lang.Object $r3;
        java.lang.String r1;
        java.util.Hashtable $r2, $r6;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.NTripleReader;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: java.util.Hashtable anons>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);

        r7 = (com.hp.hpl.jena.rdf.model.Resource) $r3;

        if r7 != null goto label1;

        $r4 = r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: com.hp.hpl.jena.rdf.model.Model model>;

        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Resource createResource()>();

        r7 = $r5;

        $r6 = r0.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: java.util.Hashtable anons>;

        virtualinvoke $r6.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r5);

     label1:
        return r7;
    }

    protected java.lang.String syntaxErrorMessage(java.lang.String, java.lang.String, int, int)
    {
        int i0, i1;
        java.lang.String $r2, r4, r11, $r13;
        com.hp.hpl.jena.rdf.model.impl.NTripleReader r1;
        java.lang.StringBuilder $r0, $r3, $r5, $r6, $r7, $r8, $r9, $r10, $r12;

        r1 := @this: com.hp.hpl.jena.rdf.model.impl.NTripleReader;

        r4 := @parameter0: java.lang.String;

        r11 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = r1.<com.hp.hpl.jena.rdf.model.impl.NTripleReader: java.lang.String base>;

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" at line ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" position ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r13;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        <com.hp.hpl.jena.rdf.model.impl.NTripleReader: int sbLength> = 200;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/hp/hpl/jena/rdf/model/impl/NTripleReader;");

        <com.hp.hpl.jena.rdf.model.impl.NTripleReader: org.slf4j.Logger log> = $r0;

        return;
    }
}
