public final class minsolver.MinSATSolver extends java.lang.Object implements kodkod.engine.satlab.SATSolver
{
    private org.sat4j.specs.ISolver solver;
    private final minsolver.MinSATSolver$ReadOnlyIVecInt wrapper;
    private java.lang.Boolean sat;
    private int vars;
    private int clauses;
    private int[] lastModel;
    boolean sbpActive;
    private java.util.Set sbpClauses;
    private java.util.Set toRemoveSBP;
    private java.util.Set sbpUnitClauses;

    public int internalNumConstraints()
    {
        int $i0;
        minsolver.MinSATSolver r0;
        org.sat4j.specs.ISolver $r1;

        r0 := @this: minsolver.MinSATSolver;

        $r1 = r0.<minsolver.MinSATSolver: org.sat4j.specs.ISolver solver>;

        $i0 = interfaceinvoke $r1.<org.sat4j.specs.ISolver: int nConstraints()>();

        return $i0;
    }

    void clc()
    {
        minsolver.MinSATSolver r0;
        org.sat4j.specs.ISolver $r1;

        r0 := @this: minsolver.MinSATSolver;

        $r1 = r0.<minsolver.MinSATSolver: org.sat4j.specs.ISolver solver>;

        interfaceinvoke $r1.<org.sat4j.specs.ISolver: void clearLearntClauses()>();

        return;
    }

    public int numSBPClauses()
    {
        int $i0, $i1, $i2;
        java.util.Set $r1, $r2;
        minsolver.MinSATSolver r0;

        r0 := @this: minsolver.MinSATSolver;

        $r1 = r0.<minsolver.MinSATSolver: java.util.Set sbpClauses>;

        $i0 = interfaceinvoke $r1.<java.util.Set: int size()>();

        $r2 = r0.<minsolver.MinSATSolver: java.util.Set sbpUnitClauses>;

        $i1 = interfaceinvoke $r2.<java.util.Set: int size()>();

        $i2 = $i0 + $i1;

        return $i2;
    }

    public boolean sbpActive()
    {
        minsolver.MinSATSolver r0;
        boolean $z0;

        r0 := @this: minsolver.MinSATSolver;

        $z0 = r0.<minsolver.MinSATSolver: boolean sbpActive>;

        return $z0;
    }

    public boolean activateSBP()
    {
        org.sat4j.specs.ContradictionException $r10;
        java.util.Iterator $r2;
        org.sat4j.specs.ISolver $r6;
        org.sat4j.specs.IConstr $r8;
        org.sat4j.specs.IVecInt $r7;
        java.util.Set $r1, $r9;
        int[] r4;
        minsolver.MinSATSolver$ReadOnlyIVecInt $r5;
        java.lang.Boolean $r11;
        java.lang.Object $r3;
        minsolver.MinSATSolver r0;
        boolean $z0, $z1;

        r0 := @this: minsolver.MinSATSolver;

        $z0 = r0.<minsolver.MinSATSolver: boolean sbpActive>;

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r1 = r0.<minsolver.MinSATSolver: java.util.Set sbpClauses>;

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

        goto label6;

     label2:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (int[]) $r3;

     label3:
        $r6 = r0.<minsolver.MinSATSolver: org.sat4j.specs.ISolver solver>;

        $r5 = r0.<minsolver.MinSATSolver: minsolver.MinSATSolver$ReadOnlyIVecInt wrapper>;

        $r7 = virtualinvoke $r5.<minsolver.MinSATSolver$ReadOnlyIVecInt: org.sat4j.specs.IVecInt wrap(int[])>(r4);

        $r8 = interfaceinvoke $r6.<org.sat4j.specs.ISolver: org.sat4j.specs.IConstr addClause(org.sat4j.specs.IVecInt)>($r7);

        if $r8 == null goto label6;

        $r9 = r0.<minsolver.MinSATSolver: java.util.Set toRemoveSBP>;

        interfaceinvoke $r9.<java.util.Set: boolean add(java.lang.Object)>($r8);

     label4:
        goto label6;

     label5:
        $r10 := @caughtexception;

        $r11 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        r0.<minsolver.MinSATSolver: java.lang.Boolean sat> = $r11;

        staticinvoke <javax.swing.JOptionPane: void showMessageDialog(java.awt.Component,java.lang.Object)>(null, "CONTRADICTION EXCEPTION in activateSBP");

     label6:
        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label2;

        r0.<minsolver.MinSATSolver: boolean sbpActive> = 1;

        return 1;

        catch org.sat4j.specs.ContradictionException from label3 to label4 with label5;
    }

    public boolean deactivateSBP()
    {
        java.util.Iterator $r2;
        org.sat4j.specs.IConstr r4;
        org.sat4j.specs.ISolver $r5;
        java.util.Set $r1, $r6;
        java.lang.Object $r3;
        minsolver.MinSATSolver r0;
        boolean $z0, $z1;

        r0 := @this: minsolver.MinSATSolver;

        $z0 = r0.<minsolver.MinSATSolver: boolean sbpActive>;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r1 = r0.<minsolver.MinSATSolver: java.util.Set toRemoveSBP>;

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

        goto label3;

     label2:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.sat4j.specs.IConstr) $r3;

        $r5 = r0.<minsolver.MinSATSolver: org.sat4j.specs.ISolver solver>;

        interfaceinvoke $r5.<org.sat4j.specs.ISolver: boolean removeConstr(org.sat4j.specs.IConstr)>(r4);

     label3:
        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label2;

        $r6 = r0.<minsolver.MinSATSolver: java.util.Set toRemoveSBP>;

        interfaceinvoke $r6.<java.util.Set: void clear()>();

        r0.<minsolver.MinSATSolver: boolean sbpActive> = 0;

        return 1;
    }

    public void setLastModel()
    {
        org.sat4j.specs.ISolver $r1;
        int[] $r2, $r3, $r4, $r5;
        int $i0, $i1, $i2, i3, $i4, $i5, i6, i7, $i8;
        minsolver.MinSATSolver r0;

        r0 := @this: minsolver.MinSATSolver;

        $r1 = r0.<minsolver.MinSATSolver: org.sat4j.specs.ISolver solver>;

        $r2 = interfaceinvoke $r1.<org.sat4j.specs.ISolver: int[] model()>();

        $i0 = r0.<minsolver.MinSATSolver: int vars>;

        $r3 = newarray (int)[$i0];

        r0.<minsolver.MinSATSolver: int[] lastModel> = $r3;

        i6 = 1;

        goto label2;

     label1:
        $r4 = r0.<minsolver.MinSATSolver: int[] lastModel>;

        $i2 = i6 - 1;

        $r4[$i2] = i6;

        i6 = i6 + 1;

     label2:
        $i1 = r0.<minsolver.MinSATSolver: int vars>;

        if i6 <= $i1 goto label1;

        i7 = 0;

        goto label5;

     label3:
        i3 = $r2[i7];

        if i3 >= 0 goto label4;

        $r5 = r0.<minsolver.MinSATSolver: int[] lastModel>;

        $i4 = neg i3;

        $i5 = $i4 - 1;

        $r5[$i5] = i3;

     label4:
        i7 = i7 + 1;

     label5:
        $i8 = lengthof $r2;

        if i7 < $i8 goto label3;

        return;
    }

    public int[] getLastModel()
    {
        minsolver.MinSATSolver r0;
        int[] $r1;

        r0 := @this: minsolver.MinSATSolver;

        $r1 = r0.<minsolver.MinSATSolver: int[] lastModel>;

        return $r1;
    }

    void <init>(org.sat4j.specs.ISolver)
    {
        java.util.HashSet $r1, $r2, $r3;
        org.sat4j.specs.ISolver r4;
        minsolver.MinSATSolver$ReadOnlyIVecInt $r5;
        minsolver.MinSATSolver r0;
        java.lang.NullPointerException $r6;

        r0 := @this: minsolver.MinSATSolver;

        r4 := @parameter0: org.sat4j.specs.ISolver;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<minsolver.MinSATSolver: int[] lastModel> = null;

        r0.<minsolver.MinSATSolver: boolean sbpActive> = 1;

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        r0.<minsolver.MinSATSolver: java.util.Set sbpClauses> = $r1;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        r0.<minsolver.MinSATSolver: java.util.Set toRemoveSBP> = $r2;

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        r0.<minsolver.MinSATSolver: java.util.Set sbpUnitClauses> = $r3;

        if r4 != null goto label1;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("solver");

        throw $r6;

     label1:
        r0.<minsolver.MinSATSolver: org.sat4j.specs.ISolver solver> = r4;

        $r5 = new minsolver.MinSATSolver$ReadOnlyIVecInt;

        specialinvoke $r5.<minsolver.MinSATSolver$ReadOnlyIVecInt: void <init>(minsolver.MinSATSolver$ReadOnlyIVecInt)>(null);

        r0.<minsolver.MinSATSolver: minsolver.MinSATSolver$ReadOnlyIVecInt wrapper> = $r5;

        r0.<minsolver.MinSATSolver: java.lang.Boolean sat> = null;

        r0.<minsolver.MinSATSolver: int clauses> = 0;

        r0.<minsolver.MinSATSolver: int vars> = 0;

        return;
    }

    public int numberOfVariables()
    {
        int $i0;
        minsolver.MinSATSolver r0;

        r0 := @this: minsolver.MinSATSolver;

        $i0 = r0.<minsolver.MinSATSolver: int vars>;

        return $i0;
    }

    public int numberOfClauses()
    {
        int $i0;
        minsolver.MinSATSolver r0;

        r0 := @this: minsolver.MinSATSolver;

        $i0 = r0.<minsolver.MinSATSolver: int clauses>;

        return $i0;
    }

    public void addVariables(int)
    {
        org.sat4j.specs.ISolver $r1;
        java.lang.IllegalArgumentException $r2;
        int i0, $i1, $i2, $i3;
        java.lang.StringBuilder $r3, $r4;
        minsolver.MinSATSolver r0;
        java.lang.String $r5;

        r0 := @this: minsolver.MinSATSolver;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("numVars < 0: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r2;

     label1:
        if i0 <= 0 goto label2;

        $i1 = r0.<minsolver.MinSATSolver: int vars>;

        $i2 = $i1 + i0;

        r0.<minsolver.MinSATSolver: int vars> = $i2;

        $r1 = r0.<minsolver.MinSATSolver: org.sat4j.specs.ISolver solver>;

        $i3 = r0.<minsolver.MinSATSolver: int vars>;

        interfaceinvoke $r1.<org.sat4j.specs.ISolver: int newVar(int)>($i3);

     label2:
        return;
    }

    public boolean addClause(int[])
    {
        org.sat4j.specs.ContradictionException $r5;
        org.sat4j.specs.ISolver $r3;
        org.sat4j.specs.IVecInt $r4;
        int[] r1;
        int $i0, $i1;
        minsolver.MinSATSolver$ReadOnlyIVecInt $r2;
        java.lang.Boolean $r6;
        minsolver.MinSATSolver r0;

        r0 := @this: minsolver.MinSATSolver;

        r1 := @parameter0: int[];

     label1:
        $i0 = r0.<minsolver.MinSATSolver: int clauses>;

        $i1 = $i0 + 1;

        r0.<minsolver.MinSATSolver: int clauses> = $i1;

        $r3 = r0.<minsolver.MinSATSolver: org.sat4j.specs.ISolver solver>;

        $r2 = r0.<minsolver.MinSATSolver: minsolver.MinSATSolver$ReadOnlyIVecInt wrapper>;

        $r4 = virtualinvoke $r2.<minsolver.MinSATSolver$ReadOnlyIVecInt: org.sat4j.specs.IVecInt wrap(int[])>(r1);

        interfaceinvoke $r3.<org.sat4j.specs.ISolver: org.sat4j.specs.IConstr addClause(org.sat4j.specs.IVecInt)>($r4);

     label2:
        return 1;

     label3:
        $r5 := @caughtexception;

        $r6 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        r0.<minsolver.MinSATSolver: java.lang.Boolean sat> = $r6;

        staticinvoke <javax.swing.JOptionPane: void showMessageDialog(java.awt.Component,java.lang.Object)>(null, "CONTRADICTION EXCEPTION in addClause");

        return 0;

        catch org.sat4j.specs.ContradictionException from label1 to label2 with label3;
    }

    static boolean isTautology(int[])
    {
        java.util.Iterator $r3;
        java.lang.Integer $r2, $r5, r6;
        java.util.HashSet $r0;
        int[] r1;
        int $i0, i1, $i2, $i3, i4, i5;
        java.lang.Object $r4;
        boolean $z0, $z1;

        r1 := @parameter0: int[];

        $r0 = new java.util.HashSet;

        $i0 = lengthof r1;

        specialinvoke $r0.<java.util.HashSet: void <init>(int)>($i0);

        i1 = lengthof r1;

        i4 = 0;

        goto label2;

     label1:
        i5 = r1[i4];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i5);

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r2);

        i4 = i4 + 1;

     label2:
        if i4 < i1 goto label1;

        $r3 = interfaceinvoke $r0.<java.util.Set: java.util.Iterator iterator()>();

        goto label4;

     label3:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.Integer) $r4;

        $i2 = virtualinvoke r6.<java.lang.Integer: int intValue()>();

        $i3 = neg $i2;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $z1 = interfaceinvoke $r0.<java.util.Set: boolean contains(java.lang.Object)>($r5);

        if $z1 == 0 goto label4;

        return 1;

     label4:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label3;

        return 0;
    }

    public boolean addSBPClause(int[])
    {
        org.sat4j.specs.ISolver $r4;
        java.lang.Integer $r12;
        int[] r0, $r9;
        int $i0, $i1;
        java.lang.Boolean $r14;
        minsolver.MinSATSolver r1;
        boolean $z0;
        org.sat4j.specs.ContradictionException $r13;
        org.sat4j.specs.IConstr $r6;
        org.sat4j.specs.IVecInt $r5;
        java.util.Set $r2, $r7, $r10, $r11;
        minsolver.MinSATSolver$ReadOnlyIVecInt $r3;
        java.lang.Object $r8;

        r1 := @this: minsolver.MinSATSolver;

        r0 := @parameter0: int[];

     label1:
        $i0 = lengthof r0;

        if $i0 > 1 goto label2;

        $r11 = r1.<minsolver.MinSATSolver: java.util.Set sbpUnitClauses>;

        $i1 = r0[0];

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        interfaceinvoke $r11.<java.util.Set: boolean add(java.lang.Object)>($r12);

        goto label5;

     label2:
        $r2 = r1.<minsolver.MinSATSolver: java.util.Set sbpClauses>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r0);

        if $z0 == 0 goto label4;

     label3:
        return 1;

     label4:
        $r4 = r1.<minsolver.MinSATSolver: org.sat4j.specs.ISolver solver>;

        $r3 = r1.<minsolver.MinSATSolver: minsolver.MinSATSolver$ReadOnlyIVecInt wrapper>;

        $r5 = virtualinvoke $r3.<minsolver.MinSATSolver$ReadOnlyIVecInt: org.sat4j.specs.IVecInt wrap(int[])>(r0);

        $r6 = interfaceinvoke $r4.<org.sat4j.specs.ISolver: org.sat4j.specs.IConstr addClause(org.sat4j.specs.IVecInt)>($r5);

        $r7 = r1.<minsolver.MinSATSolver: java.util.Set sbpClauses>;

        $r8 = virtualinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        $r9 = (int[]) $r8;

        interfaceinvoke $r7.<java.util.Set: boolean add(java.lang.Object)>($r9);

        if $r6 == null goto label5;

        $r10 = r1.<minsolver.MinSATSolver: java.util.Set toRemoveSBP>;

        interfaceinvoke $r10.<java.util.Set: boolean add(java.lang.Object)>($r6);

     label5:
        return 1;

     label6:
        $r13 := @caughtexception;

        $r14 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        r1.<minsolver.MinSATSolver: java.lang.Boolean sat> = $r14;

        staticinvoke <javax.swing.JOptionPane: void showMessageDialog(java.awt.Component,java.lang.Object)>(null, "CONTRADICTION EXCEPTION in addSBPClause");

        return 0;

        catch org.sat4j.specs.ContradictionException from label1 to label3 with label6;
        catch org.sat4j.specs.ContradictionException from label4 to label5 with label6;
    }

    public org.sat4j.specs.IConstr addConstraint(int[]) throws org.sat4j.specs.ContradictionException
    {
        org.sat4j.specs.ISolver $r3;
        org.sat4j.specs.IConstr $r5;
        org.sat4j.specs.IVecInt $r4;
        int[] r1;
        int $i0, $i1;
        minsolver.MinSATSolver$ReadOnlyIVecInt $r2;
        minsolver.MinSATSolver r0;

        r0 := @this: minsolver.MinSATSolver;

        r1 := @parameter0: int[];

        $i0 = r0.<minsolver.MinSATSolver: int clauses>;

        $i1 = $i0 + 1;

        r0.<minsolver.MinSATSolver: int clauses> = $i1;

        $r3 = r0.<minsolver.MinSATSolver: org.sat4j.specs.ISolver solver>;

        $r2 = r0.<minsolver.MinSATSolver: minsolver.MinSATSolver$ReadOnlyIVecInt wrapper>;

        $r4 = virtualinvoke $r2.<minsolver.MinSATSolver$ReadOnlyIVecInt: org.sat4j.specs.IVecInt wrap(int[])>(r1);

        $r5 = interfaceinvoke $r3.<org.sat4j.specs.ISolver: org.sat4j.specs.IConstr addClause(org.sat4j.specs.IVecInt)>($r4);

        return $r5;
    }

    public boolean removeConstraint(org.sat4j.specs.IConstr)
    {
        org.sat4j.specs.IConstr r1;
        org.sat4j.specs.ISolver $r2;
        int $i0, $i1;
        minsolver.MinSATSolver r0;
        boolean $z0;

        r0 := @this: minsolver.MinSATSolver;

        r1 := @parameter0: org.sat4j.specs.IConstr;

        $i0 = r0.<minsolver.MinSATSolver: int clauses>;

        $i1 = $i0 - 1;

        r0.<minsolver.MinSATSolver: int clauses> = $i1;

        $r2 = r0.<minsolver.MinSATSolver: org.sat4j.specs.ISolver solver>;

        $z0 = interfaceinvoke $r2.<org.sat4j.specs.ISolver: boolean removeConstr(org.sat4j.specs.IConstr)>(r1);

        return $z0;
    }

    org.sat4j.specs.IVecInt getAssumptions(int[])
    {
        java.lang.Integer r8;
        int[] r2, r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9;
        minsolver.MinSATSolver r0;
        boolean $z0, $z1;
        java.util.Iterator $r6;
        java.util.Set $r3, $r5;
        org.sat4j.core.VecInt $r1, $r9;
        java.lang.Object $r7;

        r0 := @this: minsolver.MinSATSolver;

        r2 := @parameter0: int[];

        $z0 = r0.<minsolver.MinSATSolver: boolean sbpActive>;

        if $z0 == 0 goto label5;

        $i0 = lengthof r2;

        $r3 = r0.<minsolver.MinSATSolver: java.util.Set sbpUnitClauses>;

        $i1 = interfaceinvoke $r3.<java.util.Set: int size()>();

        $i2 = $i0 + $i1;

        r4 = newarray (int)[$i2];

        i8 = 0;

        goto label2;

     label1:
        $i4 = r2[i8];

        r4[i8] = $i4;

        i8 = i8 + 1;

     label2:
        $i3 = lengthof r2;

        if i8 < $i3 goto label1;

        i9 = 0;

        $r5 = r0.<minsolver.MinSATSolver: java.util.Set sbpUnitClauses>;

        $r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

        goto label4;

     label3:
        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.lang.Integer) $r7;

        $i5 = lengthof r2;

        $i6 = i9 + $i5;

        $i7 = virtualinvoke r8.<java.lang.Integer: int intValue()>();

        r4[$i6] = $i7;

        i9 = i9 + 1;

     label4:
        $z1 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label3;

        $r9 = new org.sat4j.core.VecInt;

        specialinvoke $r9.<org.sat4j.core.VecInt: void <init>(int[])>(r4);

        return $r9;

     label5:
        $r1 = new org.sat4j.core.VecInt;

        specialinvoke $r1.<org.sat4j.core.VecInt: void <init>(int[])>(r2);

        return $r1;
    }

    public boolean solve(boolean)
    {
        org.sat4j.specs.ISolver $r2;
        org.sat4j.specs.IVecInt $r3;
        java.lang.RuntimeException $r7;
        int[] $r1;
        java.lang.Boolean $r4, $r5, $r8;
        org.sat4j.specs.TimeoutException $r6;
        minsolver.MinSATSolver r0;
        boolean $z0, $z1, z2, $z3;

        r0 := @this: minsolver.MinSATSolver;

        z2 := @parameter0: boolean;

     label1:
        $r2 = r0.<minsolver.MinSATSolver: org.sat4j.specs.ISolver solver>;

        $r1 = newarray (int)[0];

        $r3 = virtualinvoke r0.<minsolver.MinSATSolver: org.sat4j.specs.IVecInt getAssumptions(int[])>($r1);

        $z0 = interfaceinvoke $r2.<org.sat4j.specs.ISolver: boolean isSatisfiable(org.sat4j.specs.IVecInt)>($r3);

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        r0.<minsolver.MinSATSolver: java.lang.Boolean sat> = $r4;

        $r5 = r0.<minsolver.MinSATSolver: java.lang.Boolean sat>;

        $z1 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 == 0 goto label2;

        if z2 == 0 goto label2;

        virtualinvoke r0.<minsolver.MinSATSolver: void setLastModel()>();

     label2:
        $r8 = r0.<minsolver.MinSATSolver: java.lang.Boolean sat>;

        $z3 = virtualinvoke $r8.<java.lang.Boolean: boolean booleanValue()>();

     label3:
        return $z3;

     label4:
        $r6 := @caughtexception;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>("timed out");

        throw $r7;

        catch org.sat4j.specs.TimeoutException from label1 to label3 with label4;
    }

    public boolean solve()
    {
        minsolver.MinSATSolver r0;
        boolean $z0;

        r0 := @this: minsolver.MinSATSolver;

        $z0 = virtualinvoke r0.<minsolver.MinSATSolver: boolean solve(boolean)>(1);

        return $z0;
    }

    public boolean solve(int[])
    {
        minsolver.MinSATSolver r0;
        int[] r1;
        boolean $z0;

        r0 := @this: minsolver.MinSATSolver;

        r1 := @parameter0: int[];

        $z0 = virtualinvoke r0.<minsolver.MinSATSolver: boolean solve(int[],boolean)>(r1, 1);

        return $z0;
    }

    public boolean solve(int[], boolean)
    {
        org.sat4j.specs.ISolver $r2;
        org.sat4j.specs.IVecInt $r3;
        java.lang.RuntimeException $r7;
        int[] r1;
        java.lang.Boolean $r4, $r5, $r8;
        org.sat4j.specs.TimeoutException $r6;
        minsolver.MinSATSolver r0;
        boolean $z0, $z1, z2, $z3;

        r0 := @this: minsolver.MinSATSolver;

        r1 := @parameter0: int[];

        z2 := @parameter1: boolean;

     label1:
        $r2 = r0.<minsolver.MinSATSolver: org.sat4j.specs.ISolver solver>;

        $r3 = virtualinvoke r0.<minsolver.MinSATSolver: org.sat4j.specs.IVecInt getAssumptions(int[])>(r1);

        $z0 = interfaceinvoke $r2.<org.sat4j.specs.ISolver: boolean isSatisfiable(org.sat4j.specs.IVecInt)>($r3);

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        r0.<minsolver.MinSATSolver: java.lang.Boolean sat> = $r4;

        $r5 = r0.<minsolver.MinSATSolver: java.lang.Boolean sat>;

        $z1 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 == 0 goto label2;

        if z2 == 0 goto label2;

        virtualinvoke r0.<minsolver.MinSATSolver: void setLastModel()>();

     label2:
        $r8 = r0.<minsolver.MinSATSolver: java.lang.Boolean sat>;

        $z3 = virtualinvoke $r8.<java.lang.Boolean: boolean booleanValue()>();

     label3:
        return $z3;

     label4:
        $r6 := @caughtexception;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>("timed out");

        throw $r7;

        catch org.sat4j.specs.TimeoutException from label1 to label3 with label4;
    }

    public final boolean valueOf(int)
    {
        java.lang.IllegalArgumentException $r0;
        int[] $r8;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.StringBuilder $r1, $r3, $r5, $r6;
        java.lang.String $r2, $r7;
        minsolver.MinSATSolver r4;
        boolean $z0;

        r4 := @this: minsolver.MinSATSolver;

        i0 := @parameter0: int;

        if i0 < 1 goto label1;

        $i2 = r4.<minsolver.MinSATSolver: int vars>;

        if i0 <= $i2 goto label2;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>($r2);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" !in [1..");

        $i1 = r4.<minsolver.MinSATSolver: int vars>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r0;

     label2:
        $r8 = r4.<minsolver.MinSATSolver: int[] lastModel>;

        $i3 = i0 - 1;

        $i4 = $r8[$i3];

        if $i4 <= 0 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    public final synchronized void free()
    {
        minsolver.MinSATSolver r0;

        r0 := @this: minsolver.MinSATSolver;

        return;
    }

    public java.lang.String printConstraints()
    {
        org.sat4j.specs.ISolver $r1;
        org.sat4j.specs.IConstr $r5;
        int $i0, i1, $i2;
        java.lang.StringBuilder $r3, $r6, $r7, $r8;
        minsolver.MinSATSolver r0;
        org.sat4j.minisat.core.Solver r2;
        java.lang.String $r4, r9, $r10;

        r0 := @this: minsolver.MinSATSolver;

        $r1 = r0.<minsolver.MinSATSolver: org.sat4j.specs.ISolver solver>;

        r2 = (org.sat4j.minisat.core.Solver) $r1;

        r9 = "";

        i1 = 0;

        goto label4;

     label1:
        $r3 = new java.lang.StringBuilder;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r9);

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>($r4);

        $r5 = virtualinvoke r2.<org.sat4j.minisat.core.Solver: org.sat4j.specs.IConstr getIthConstr(int)>(i1);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",    ");

        $i0 = i1 % 4;

        if $i0 != 0 goto label2;

        $r10 = "\n";

        goto label3;

     label2:
        $r10 = "";

     label3:
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        i1 = i1 + 1;

     label4:
        $i2 = virtualinvoke r2.<org.sat4j.minisat.core.Solver: int nConstraints()>();

        if i1 < $i2 goto label1;

        return r9;
    }
}
