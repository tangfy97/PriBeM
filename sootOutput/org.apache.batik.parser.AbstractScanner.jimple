public abstract class org.apache.batik.parser.AbstractScanner extends java.lang.Object
{
    protected org.apache.batik.util.io.NormalizingReader reader;
    protected int current;
    protected char[] buffer;
    protected int position;
    protected int type;
    protected int previousType;
    protected int start;
    protected int end;
    protected int blankCharacters;

    public void <init>(java.io.Reader) throws org.apache.batik.parser.ParseException
    {
        org.apache.batik.util.io.StreamNormalizingReader $r2;
        int $i0;
        org.apache.batik.parser.AbstractScanner r0;
        char[] $r1;
        java.io.IOException $r4;
        java.io.Reader r3;
        org.apache.batik.parser.ParseException $r5;

        r0 := @this: org.apache.batik.parser.AbstractScanner;

        r3 := @parameter0: java.io.Reader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (char)[128];

        r0.<org.apache.batik.parser.AbstractScanner: char[] buffer> = $r1;

     label1:
        $r2 = new org.apache.batik.util.io.StreamNormalizingReader;

        specialinvoke $r2.<org.apache.batik.util.io.StreamNormalizingReader: void <init>(java.io.Reader)>(r3);

        r0.<org.apache.batik.parser.AbstractScanner: org.apache.batik.util.io.NormalizingReader reader> = $r2;

        $i0 = virtualinvoke r0.<org.apache.batik.parser.AbstractScanner: int nextChar()>();

        r0.<org.apache.batik.parser.AbstractScanner: int current> = $i0;

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = new org.apache.batik.parser.ParseException;

        specialinvoke $r5.<org.apache.batik.parser.ParseException: void <init>(java.lang.Exception)>($r4);

        throw $r5;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void <init>(java.io.InputStream, java.lang.String) throws org.apache.batik.parser.ParseException
    {
        org.apache.batik.util.io.StreamNormalizingReader $r2;
        java.io.IOException $r5;
        int $i0;
        org.apache.batik.parser.AbstractScanner r0;
        char[] $r1;
        java.lang.String r4;
        java.io.InputStream r3;
        org.apache.batik.parser.ParseException $r6;

        r0 := @this: org.apache.batik.parser.AbstractScanner;

        r3 := @parameter0: java.io.InputStream;

        r4 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (char)[128];

        r0.<org.apache.batik.parser.AbstractScanner: char[] buffer> = $r1;

     label1:
        $r2 = new org.apache.batik.util.io.StreamNormalizingReader;

        specialinvoke $r2.<org.apache.batik.util.io.StreamNormalizingReader: void <init>(java.io.InputStream,java.lang.String)>(r3, r4);

        r0.<org.apache.batik.parser.AbstractScanner: org.apache.batik.util.io.NormalizingReader reader> = $r2;

        $i0 = virtualinvoke r0.<org.apache.batik.parser.AbstractScanner: int nextChar()>();

        r0.<org.apache.batik.parser.AbstractScanner: int current> = $i0;

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r6 = new org.apache.batik.parser.ParseException;

        specialinvoke $r6.<org.apache.batik.parser.ParseException: void <init>(java.lang.Exception)>($r5);

        throw $r6;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void <init>(java.lang.String) throws org.apache.batik.parser.ParseException
    {
        org.apache.batik.util.io.StringNormalizingReader $r2;
        int $i0;
        org.apache.batik.parser.AbstractScanner r0;
        char[] $r1;
        java.io.IOException $r4;
        java.lang.String r3;
        org.apache.batik.parser.ParseException $r5;

        r0 := @this: org.apache.batik.parser.AbstractScanner;

        r3 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (char)[128];

        r0.<org.apache.batik.parser.AbstractScanner: char[] buffer> = $r1;

     label1:
        $r2 = new org.apache.batik.util.io.StringNormalizingReader;

        specialinvoke $r2.<org.apache.batik.util.io.StringNormalizingReader: void <init>(java.lang.String)>(r3);

        r0.<org.apache.batik.parser.AbstractScanner: org.apache.batik.util.io.NormalizingReader reader> = $r2;

        $i0 = virtualinvoke r0.<org.apache.batik.parser.AbstractScanner: int nextChar()>();

        r0.<org.apache.batik.parser.AbstractScanner: int current> = $i0;

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = new org.apache.batik.parser.ParseException;

        specialinvoke $r5.<org.apache.batik.parser.ParseException: void <init>(java.lang.Exception)>($r4);

        throw $r5;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public int getLine()
    {
        int $i0;
        org.apache.batik.parser.AbstractScanner r0;
        org.apache.batik.util.io.NormalizingReader $r1;

        r0 := @this: org.apache.batik.parser.AbstractScanner;

        $r1 = r0.<org.apache.batik.parser.AbstractScanner: org.apache.batik.util.io.NormalizingReader reader>;

        $i0 = virtualinvoke $r1.<org.apache.batik.util.io.NormalizingReader: int getLine()>();

        return $i0;
    }

    public int getColumn()
    {
        int $i0;
        org.apache.batik.parser.AbstractScanner r0;
        org.apache.batik.util.io.NormalizingReader $r1;

        r0 := @this: org.apache.batik.parser.AbstractScanner;

        $r1 = r0.<org.apache.batik.parser.AbstractScanner: org.apache.batik.util.io.NormalizingReader reader>;

        $i0 = virtualinvoke $r1.<org.apache.batik.util.io.NormalizingReader: int getColumn()>();

        return $i0;
    }

    public char[] getBuffer()
    {
        org.apache.batik.parser.AbstractScanner r0;
        char[] $r1;

        r0 := @this: org.apache.batik.parser.AbstractScanner;

        $r1 = r0.<org.apache.batik.parser.AbstractScanner: char[] buffer>;

        return $r1;
    }

    public int getStart()
    {
        int $i0;
        org.apache.batik.parser.AbstractScanner r0;

        r0 := @this: org.apache.batik.parser.AbstractScanner;

        $i0 = r0.<org.apache.batik.parser.AbstractScanner: int start>;

        return $i0;
    }

    public int getEnd()
    {
        int $i0;
        org.apache.batik.parser.AbstractScanner r0;

        r0 := @this: org.apache.batik.parser.AbstractScanner;

        $i0 = r0.<org.apache.batik.parser.AbstractScanner: int end>;

        return $i0;
    }

    public void clearBuffer()
    {
        int $i0, $i1, $i2;
        org.apache.batik.parser.AbstractScanner r0;
        char[] $r1, $r2;
        char $c3;

        r0 := @this: org.apache.batik.parser.AbstractScanner;

        $i0 = r0.<org.apache.batik.parser.AbstractScanner: int position>;

        if $i0 > 0 goto label1;

        r0.<org.apache.batik.parser.AbstractScanner: int position> = 0;

        goto label2;

     label1:
        $r2 = r0.<org.apache.batik.parser.AbstractScanner: char[] buffer>;

        $r1 = r0.<org.apache.batik.parser.AbstractScanner: char[] buffer>;

        $i1 = r0.<org.apache.batik.parser.AbstractScanner: int position>;

        $i2 = $i1 - 1;

        $c3 = $r1[$i2];

        $r2[0] = $c3;

        r0.<org.apache.batik.parser.AbstractScanner: int position> = 1;

     label2:
        return;
    }

    public int getType()
    {
        int $i0;
        org.apache.batik.parser.AbstractScanner r0;

        r0 := @this: org.apache.batik.parser.AbstractScanner;

        $i0 = r0.<org.apache.batik.parser.AbstractScanner: int type>;

        return $i0;
    }

    public java.lang.String getStringValue()
    {
        int $i0, $i1, $i2, $i3;
        org.apache.batik.parser.AbstractScanner r1;
        char[] $r2;
        java.lang.String $r0;

        r1 := @this: org.apache.batik.parser.AbstractScanner;

        $r0 = new java.lang.String;

        $r2 = r1.<org.apache.batik.parser.AbstractScanner: char[] buffer>;

        $i3 = r1.<org.apache.batik.parser.AbstractScanner: int start>;

        $i1 = r1.<org.apache.batik.parser.AbstractScanner: int end>;

        $i0 = r1.<org.apache.batik.parser.AbstractScanner: int start>;

        $i2 = $i1 - $i0;

        specialinvoke $r0.<java.lang.String: void <init>(char[],int,int)>($r2, $i3, $i2);

        return $r0;
    }

    public int next() throws org.apache.batik.parser.ParseException
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        org.apache.batik.parser.AbstractScanner r0;

        r0 := @this: org.apache.batik.parser.AbstractScanner;

        r0.<org.apache.batik.parser.AbstractScanner: int blankCharacters> = 0;

        $i0 = r0.<org.apache.batik.parser.AbstractScanner: int position>;

        $i1 = $i0 - 1;

        r0.<org.apache.batik.parser.AbstractScanner: int start> = $i1;

        $i2 = r0.<org.apache.batik.parser.AbstractScanner: int type>;

        r0.<org.apache.batik.parser.AbstractScanner: int previousType> = $i2;

        virtualinvoke r0.<org.apache.batik.parser.AbstractScanner: void nextToken()>();

        $i3 = r0.<org.apache.batik.parser.AbstractScanner: int position>;

        $i4 = virtualinvoke r0.<org.apache.batik.parser.AbstractScanner: int endGap()>();

        $i5 = $i3 - $i4;

        r0.<org.apache.batik.parser.AbstractScanner: int end> = $i5;

        $i6 = r0.<org.apache.batik.parser.AbstractScanner: int type>;

        return $i6;
    }

    protected abstract int endGap();

    protected abstract void nextToken() throws org.apache.batik.parser.ParseException;

    protected static boolean isEqualIgnoreCase(int, char)
    {
        char $c1, $c2, c3;
        int i0, $i5, $i6, $i7;
        boolean $z0;

        i0 := @parameter0: int;

        c3 := @parameter1: char;

        $i5 = (int) -1;

        if i0 != $i5 goto label1;

        $z0 = 0;

        goto label3;

     label1:
        $c1 = (char) i0;

        $c2 = staticinvoke <java.lang.Character: char toLowerCase(char)>($c1);

        $i6 = (int) $c2;

        $i7 = (int) c3;

        if $i6 != $i7 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    protected int nextChar() throws java.io.IOException
    {
        org.apache.batik.util.io.NormalizingReader $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i16, $i17;
        org.apache.batik.parser.AbstractScanner r0;
        char $c7;
        char[] $r2, $r3, r4, $r5;

        r0 := @this: org.apache.batik.parser.AbstractScanner;

        $r1 = r0.<org.apache.batik.parser.AbstractScanner: org.apache.batik.util.io.NormalizingReader reader>;

        $i0 = virtualinvoke $r1.<java.io.Reader: int read()>();

        r0.<org.apache.batik.parser.AbstractScanner: int current> = $i0;

        $i1 = r0.<org.apache.batik.parser.AbstractScanner: int current>;

        $i16 = (int) -1;

        if $i1 != $i16 goto label1;

        $i14 = r0.<org.apache.batik.parser.AbstractScanner: int current>;

        return $i14;

     label1:
        $i3 = r0.<org.apache.batik.parser.AbstractScanner: int position>;

        $r2 = r0.<org.apache.batik.parser.AbstractScanner: char[] buffer>;

        $i2 = lengthof $r2;

        if $i3 != $i2 goto label2;

        $i8 = r0.<org.apache.batik.parser.AbstractScanner: int position>;

        $i11 = 1 + $i8;

        $i9 = r0.<org.apache.batik.parser.AbstractScanner: int position>;

        $i10 = $i9 / 2;

        $i12 = $i11 + $i10;

        r4 = newarray (char)[$i12];

        $r5 = r0.<org.apache.batik.parser.AbstractScanner: char[] buffer>;

        $i13 = r0.<org.apache.batik.parser.AbstractScanner: int position>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, r4, 0, $i13);

        r0.<org.apache.batik.parser.AbstractScanner: char[] buffer> = r4;

     label2:
        $r3 = r0.<org.apache.batik.parser.AbstractScanner: char[] buffer>;

        $i4 = r0.<org.apache.batik.parser.AbstractScanner: int position>;

        $i5 = $i4 + 1;

        r0.<org.apache.batik.parser.AbstractScanner: int position> = $i5;

        $i6 = r0.<org.apache.batik.parser.AbstractScanner: int current>;

        $c7 = (char) $i6;

        $r3[$i4] = $c7;

        $i17 = (int) $c7;

        return $i17;
    }
}
