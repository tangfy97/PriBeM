public class org.pircbotx.ManyToManyMap extends java.lang.Object
{
    protected final java.util.Map AMap;
    protected final java.util.Map BMap;
    protected final java.lang.Object lockObject;

    public void <init>()
    {
        org.pircbotx.ManyToManyMap r0;
        java.util.HashMap $r1, $r2;
        java.lang.Object $r3;

        r0 := @this: org.pircbotx.ManyToManyMap;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.pircbotx.ManyToManyMap: java.util.Map AMap> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<org.pircbotx.ManyToManyMap: java.util.Map BMap> = $r2;

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<org.pircbotx.ManyToManyMap: java.lang.Object lockObject> = $r3;

        return;
    }

    public int size()
    {
        java.lang.Throwable $r4;
        org.pircbotx.ManyToManyMap r0;
        java.util.Map $r2, $r3;
        int $i0, $i1, $i2;
        java.lang.Object $r1;

        r0 := @this: org.pircbotx.ManyToManyMap;

        $r1 = r0.<org.pircbotx.ManyToManyMap: java.lang.Object lockObject>;

        entermonitor $r1;

     label1:
        $r2 = r0.<org.pircbotx.ManyToManyMap: java.util.Map AMap>;

        $i0 = interfaceinvoke $r2.<java.util.Map: int size()>();

        $r3 = r0.<org.pircbotx.ManyToManyMap: java.util.Map BMap>;

        $i1 = interfaceinvoke $r3.<java.util.Map: int size()>();

        $i2 = $i0 + $i1;

        exitmonitor $r1;

     label2:
        return $i2;

     label3:
        $r4 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean isEmpty()
    {
        java.lang.Throwable $r4;
        org.pircbotx.ManyToManyMap r0;
        java.util.Map $r2, $r3;
        java.lang.Object $r1;
        boolean $z0, $z1, $z2;

        r0 := @this: org.pircbotx.ManyToManyMap;

        $r1 = r0.<org.pircbotx.ManyToManyMap: java.lang.Object lockObject>;

        entermonitor $r1;

     label1:
        $r2 = r0.<org.pircbotx.ManyToManyMap: java.util.Map AMap>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        $r3 = r0.<org.pircbotx.ManyToManyMap: java.util.Map BMap>;

        $z1 = interfaceinvoke $r3.<java.util.Map: boolean isEmpty()>();

        if $z1 == 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        exitmonitor $r1;

     label4:
        return $z2;

     label5:
        $r4 := @caughtexception;

        exitmonitor $r1;

     label6:
        throw $r4;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void clear()
    {
        java.lang.Throwable $r4;
        org.pircbotx.ManyToManyMap r0;
        java.util.Map $r2, $r3;
        java.lang.Object $r1;

        r0 := @this: org.pircbotx.ManyToManyMap;

        $r1 = r0.<org.pircbotx.ManyToManyMap: java.lang.Object lockObject>;

        entermonitor $r1;

     label1:
        $r2 = r0.<org.pircbotx.ManyToManyMap: java.util.Map AMap>;

        interfaceinvoke $r2.<java.util.Map: void clear()>();

        $r3 = r0.<org.pircbotx.ManyToManyMap: java.util.Map BMap>;

        interfaceinvoke $r3.<java.util.Map: void clear()>();

        exitmonitor $r1;

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r4;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean containsA(java.lang.Object)
    {
        java.lang.Throwable $r4;
        org.pircbotx.ManyToManyMap r0;
        java.util.Map $r3;
        java.lang.Object $r1, r2;
        boolean $z0;

        r0 := @this: org.pircbotx.ManyToManyMap;

        r2 := @parameter0: java.lang.Object;

        $r1 = r0.<org.pircbotx.ManyToManyMap: java.lang.Object lockObject>;

        entermonitor $r1;

     label1:
        $r3 = r0.<org.pircbotx.ManyToManyMap: java.util.Map AMap>;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r2);

        exitmonitor $r1;

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean containsB(java.lang.Object)
    {
        java.lang.Throwable $r4;
        org.pircbotx.ManyToManyMap r0;
        java.util.Map $r3;
        java.lang.Object $r1, r2;
        boolean $z0;

        r0 := @this: org.pircbotx.ManyToManyMap;

        r2 := @parameter0: java.lang.Object;

        $r1 = r0.<org.pircbotx.ManyToManyMap: java.lang.Object lockObject>;

        entermonitor $r1;

     label1:
        $r3 = r0.<org.pircbotx.ManyToManyMap: java.util.Map BMap>;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r2);

        exitmonitor $r1;

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public java.util.Set getAValues()
    {
        java.lang.Throwable $r5;
        org.pircbotx.ManyToManyMap r0;
        java.util.Map $r2;
        java.util.Set $r3, $r4;
        java.lang.Object $r1;

        r0 := @this: org.pircbotx.ManyToManyMap;

        $r1 = r0.<org.pircbotx.ManyToManyMap: java.lang.Object lockObject>;

        entermonitor $r1;

     label1:
        $r2 = r0.<org.pircbotx.ManyToManyMap: java.util.Map AMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>();

        $r4 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r3);

        exitmonitor $r1;

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public java.util.Set getBValues()
    {
        java.lang.Throwable $r5;
        org.pircbotx.ManyToManyMap r0;
        java.util.Map $r2;
        java.util.Set $r3, $r4;
        java.lang.Object $r1;

        r0 := @this: org.pircbotx.ManyToManyMap;

        $r1 = r0.<org.pircbotx.ManyToManyMap: java.lang.Object lockObject>;

        entermonitor $r1;

     label1:
        $r2 = r0.<org.pircbotx.ManyToManyMap: java.util.Map BMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>();

        $r4 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r3);

        exitmonitor $r1;

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public java.util.Set getBValues(java.lang.Object)
    {
        java.lang.Throwable $r8;
        org.pircbotx.ManyToManyMap r0;
        java.util.Set $r7, $r9;
        java.util.HashSet $r4;
        java.util.Map $r3, $r5;
        java.lang.Object $r1, r2, $r6;
        boolean $z0;

        r0 := @this: org.pircbotx.ManyToManyMap;

        r2 := @parameter0: java.lang.Object;

        $r1 = r0.<org.pircbotx.ManyToManyMap: java.lang.Object lockObject>;

        entermonitor $r1;

     label1:
        $r3 = r0.<org.pircbotx.ManyToManyMap: java.util.Map AMap>;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r2);

        if $z0 == 0 goto label2;

        $r5 = r0.<org.pircbotx.ManyToManyMap: java.util.Map AMap>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        $r7 = (java.util.Set) $r6;

        $r9 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r7);

        goto label3;

     label2:
        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        $r9 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r4);

     label3:
        exitmonitor $r1;

     label4:
        return $r9;

     label5:
        $r8 := @caughtexception;

        exitmonitor $r1;

     label6:
        throw $r8;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public java.util.Set getAValues(java.lang.Object)
    {
        java.lang.Throwable $r8;
        org.pircbotx.ManyToManyMap r0;
        java.util.Set $r7, $r9;
        java.util.HashSet $r4;
        java.util.Map $r3, $r5;
        java.lang.Object $r1, r2, $r6;
        boolean $z0;

        r0 := @this: org.pircbotx.ManyToManyMap;

        r2 := @parameter0: java.lang.Object;

        $r1 = r0.<org.pircbotx.ManyToManyMap: java.lang.Object lockObject>;

        entermonitor $r1;

     label1:
        $r3 = r0.<org.pircbotx.ManyToManyMap: java.util.Map BMap>;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r2);

        if $z0 == 0 goto label2;

        $r5 = r0.<org.pircbotx.ManyToManyMap: java.util.Map BMap>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        $r7 = (java.util.Set) $r6;

        $r9 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r7);

        goto label3;

     label2:
        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        $r9 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r4);

     label3:
        exitmonitor $r1;

     label4:
        return $r9;

     label5:
        $r8 := @caughtexception;

        exitmonitor $r1;

     label6:
        throw $r8;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public boolean putA(java.lang.Object)
    {
        java.lang.Object r1;
        org.pircbotx.ManyToManyMap r0;
        boolean $z0;

        r0 := @this: org.pircbotx.ManyToManyMap;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<org.pircbotx.ManyToManyMap: boolean put(java.lang.Object,java.lang.Object)>(null, r1);

        return $z0;
    }

    public boolean putB(java.lang.Object)
    {
        java.lang.Object r1;
        org.pircbotx.ManyToManyMap r0;
        boolean $z0;

        r0 := @this: org.pircbotx.ManyToManyMap;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<org.pircbotx.ManyToManyMap: boolean put(java.lang.Object,java.lang.Object)>(r1, null);

        return $z0;
    }

    public boolean put(java.lang.Object, java.lang.Object)
    {
        java.lang.Throwable $r16;
        org.pircbotx.ManyToManyMap r0;
        java.util.HashSet $r11, $r14;
        java.util.Map $r4, $r7, $r10, $r12, $r13, $r15;
        boolean $z0, $z1;
        java.util.Set $r6, $r9;
        java.lang.Object $r1, r2, r3, $r5, $r8;

        r0 := @this: org.pircbotx.ManyToManyMap;

        r2 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Object;

        $r1 = r0.<org.pircbotx.ManyToManyMap: java.lang.Object lockObject>;

        entermonitor $r1;

     label1:
        if r2 == null goto label2;

        $r13 = r0.<org.pircbotx.ManyToManyMap: java.util.Map AMap>;

        $z1 = interfaceinvoke $r13.<java.util.Map: boolean containsKey(java.lang.Object)>(r2);

        if $z1 != 0 goto label2;

        $r15 = r0.<org.pircbotx.ManyToManyMap: java.util.Map AMap>;

        $r14 = new java.util.HashSet;

        specialinvoke $r14.<java.util.HashSet: void <init>()>();

        interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r14);

     label2:
        if r3 == null goto label3;

        $r10 = r0.<org.pircbotx.ManyToManyMap: java.util.Map BMap>;

        $z0 = interfaceinvoke $r10.<java.util.Map: boolean containsKey(java.lang.Object)>(r3);

        if $z0 != 0 goto label3;

        $r12 = r0.<org.pircbotx.ManyToManyMap: java.util.Map BMap>;

        $r11 = new java.util.HashSet;

        specialinvoke $r11.<java.util.HashSet: void <init>()>();

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r11);

     label3:
        if r2 == null goto label5;

        if r3 == null goto label5;

        $r4 = r0.<org.pircbotx.ManyToManyMap: java.util.Map AMap>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        $r6 = (java.util.Set) $r5;

        interfaceinvoke $r6.<java.util.Set: boolean add(java.lang.Object)>(r3);

        $r7 = r0.<org.pircbotx.ManyToManyMap: java.util.Map BMap>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3);

        $r9 = (java.util.Set) $r8;

        interfaceinvoke $r9.<java.util.Set: boolean add(java.lang.Object)>(r2);

        exitmonitor $r1;

     label4:
        return 1;

     label5:
        exitmonitor $r1;

     label6:
        goto label9;

     label7:
        $r16 := @caughtexception;

        exitmonitor $r1;

     label8:
        throw $r16;

     label9:
        return 0;

        catch java.lang.Throwable from label1 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public boolean dissociate(java.lang.Object, java.lang.Object)
    {
        org.pircbotx.ManyToManyMap r0;
        java.lang.Object r1, r2;
        boolean $z0;

        r0 := @this: org.pircbotx.ManyToManyMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $z0 = virtualinvoke r0.<org.pircbotx.ManyToManyMap: boolean dissociate(java.lang.Object,java.lang.Object,boolean)>(r1, r2, 0);

        return $z0;
    }

    public boolean dissociate(java.lang.Object, java.lang.Object, boolean)
    {
        java.lang.Throwable $r9;
        org.pircbotx.ManyToManyMap r0;
        java.util.Map $r3, $r4, $r7, $r10;
        boolean $z0, z1, $z2, $z3, $z4;
        java.util.Set $r8, $r12;
        java.lang.Object $r1, r2, $r5, r6, $r11;

        r0 := @this: org.pircbotx.ManyToManyMap;

        r2 := @parameter0: java.lang.Object;

        r6 := @parameter1: java.lang.Object;

        z1 := @parameter2: boolean;

        $r1 = r0.<org.pircbotx.ManyToManyMap: java.lang.Object lockObject>;

        entermonitor $r1;

     label1:
        $r3 = r0.<org.pircbotx.ManyToManyMap: java.util.Map AMap>;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r2);

        if $z0 != 0 goto label3;

        $r7 = r0.<org.pircbotx.ManyToManyMap: java.util.Map BMap>;

        $z4 = interfaceinvoke $r7.<java.util.Map: boolean containsKey(java.lang.Object)>(r6);

        if $z4 != 0 goto label3;

        exitmonitor $r1;

     label2:
        return 0;

     label3:
        $r4 = r0.<org.pircbotx.ManyToManyMap: java.util.Map AMap>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        $r8 = (java.util.Set) $r5;

        interfaceinvoke $r8.<java.util.Set: boolean remove(java.lang.Object)>(r6);

        if z1 == 0 goto label4;

        $z3 = interfaceinvoke $r8.<java.util.Set: boolean isEmpty()>();

        if $z3 == 0 goto label4;

        virtualinvoke r0.<org.pircbotx.ManyToManyMap: java.util.Set deleteA(java.lang.Object)>(r2);

     label4:
        $r10 = r0.<org.pircbotx.ManyToManyMap: java.util.Map BMap>;

        $r11 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>(r6);

        $r12 = (java.util.Set) $r11;

        interfaceinvoke $r12.<java.util.Set: boolean remove(java.lang.Object)>(r2);

        if z1 == 0 goto label5;

        $z2 = interfaceinvoke $r12.<java.util.Set: boolean isEmpty()>();

        if $z2 == 0 goto label5;

        virtualinvoke r0.<org.pircbotx.ManyToManyMap: java.util.Set deleteB(java.lang.Object)>(r6);

     label5:
        exitmonitor $r1;

     label6:
        goto label9;

     label7:
        $r9 := @caughtexception;

        exitmonitor $r1;

     label8:
        throw $r9;

     label9:
        return 1;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public java.util.Set deleteA(java.lang.Object)
    {
        java.lang.Throwable $r13;
        org.pircbotx.ManyToManyMap r0;
        java.util.Map $r3, $r4, $r10;
        boolean $z0, $z1;
        java.util.Iterator $r8;
        java.util.Set $r6, $r7, $r12;
        java.lang.Object $r1, r2, $r5, $r9, $r11;

        r0 := @this: org.pircbotx.ManyToManyMap;

        r2 := @parameter0: java.lang.Object;

        $r1 = r0.<org.pircbotx.ManyToManyMap: java.lang.Object lockObject>;

        entermonitor $r1;

     label1:
        $r3 = r0.<org.pircbotx.ManyToManyMap: java.util.Map AMap>;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r2);

        if $z0 != 0 goto label3;

        exitmonitor $r1;

     label2:
        return null;

     label3:
        $r4 = r0.<org.pircbotx.ManyToManyMap: java.util.Map AMap>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r2);

        $r6 = (java.util.Set) $r5;

        $r7 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r6);

        $r8 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        $r10 = r0.<org.pircbotx.ManyToManyMap: java.util.Map BMap>;

        $r11 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>($r9);

        $r12 = (java.util.Set) $r11;

        interfaceinvoke $r12.<java.util.Set: boolean remove(java.lang.Object)>(r2);

        goto label4;

     label5:
        exitmonitor $r1;

     label6:
        return $r7;

     label7:
        $r13 := @caughtexception;

        exitmonitor $r1;

     label8:
        throw $r13;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public java.util.Set deleteB(java.lang.Object)
    {
        java.lang.Throwable $r13;
        org.pircbotx.ManyToManyMap r0;
        java.util.Map $r3, $r4, $r10;
        boolean $z0, $z1;
        java.util.Iterator $r8;
        java.util.Set $r6, $r7, $r12;
        java.lang.Object $r1, r2, $r5, $r9, $r11;

        r0 := @this: org.pircbotx.ManyToManyMap;

        r2 := @parameter0: java.lang.Object;

        $r1 = r0.<org.pircbotx.ManyToManyMap: java.lang.Object lockObject>;

        entermonitor $r1;

     label1:
        $r3 = r0.<org.pircbotx.ManyToManyMap: java.util.Map BMap>;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r2);

        if $z0 != 0 goto label3;

        exitmonitor $r1;

     label2:
        return null;

     label3:
        $r4 = r0.<org.pircbotx.ManyToManyMap: java.util.Map BMap>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r2);

        $r6 = (java.util.Set) $r5;

        $r7 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r6);

        $r8 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        $r10 = r0.<org.pircbotx.ManyToManyMap: java.util.Map AMap>;

        $r11 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>($r9);

        $r12 = (java.util.Set) $r11;

        interfaceinvoke $r12.<java.util.Set: boolean remove(java.lang.Object)>(r2);

        goto label4;

     label5:
        exitmonitor $r1;

     label6:
        return $r7;

     label7:
        $r13 := @caughtexception;

        exitmonitor $r1;

     label8:
        throw $r13;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }
}
