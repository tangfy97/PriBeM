public final class com.google.gxp.com.google.common.collect.ReferenceMap extends java.util.AbstractMap implements java.util.concurrent.ConcurrentMap, java.io.Serializable
{
    private final com.google.gxp.com.google.common.collect.ReferenceMap$ReferenceStrategy keyStrategy;
    private final com.google.gxp.com.google.common.collect.ReferenceMap$ReferenceStrategy valueStrategy;
    private transient java.util.concurrent.ConcurrentMap delegate;
    private transient com.google.gxp.com.google.common.collect.ReferenceMap$EntrySet entrySet;
    private static final long serialVersionUID;

    public void <init>(com.google.gxp.com.google.common.base.ReferenceType, com.google.gxp.com.google.common.base.ReferenceType)
    {
        com.google.gxp.com.google.common.base.ReferenceType r1, r2;
        java.util.concurrent.ConcurrentHashMap $r3;
        com.google.gxp.com.google.common.collect.ReferenceMap r0;

        r0 := @this: com.google.gxp.com.google.common.collect.ReferenceMap;

        r1 := @parameter0: com.google.gxp.com.google.common.base.ReferenceType;

        r2 := @parameter1: com.google.gxp.com.google.common.base.ReferenceType;

        $r3 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r3.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        specialinvoke r0.<com.google.gxp.com.google.common.collect.ReferenceMap: void <init>(com.google.gxp.com.google.common.base.ReferenceType,com.google.gxp.com.google.common.base.ReferenceType,java.util.concurrent.ConcurrentMap)>(r1, r2, $r3);

        return;
    }

    public void <init>(com.google.gxp.com.google.common.base.ReferenceType, com.google.gxp.com.google.common.base.ReferenceType, java.util.concurrent.ConcurrentMap)
    {
        com.google.gxp.com.google.common.collect.ReferenceMap$ReferenceStrategy $r6, $r7;
        com.google.gxp.com.google.common.collect.ReferenceMap r0;
        java.util.concurrent.ConcurrentMap r5;
        com.google.gxp.com.google.common.base.ReferenceType r1, $r2, r3, $r4;
        boolean $z0, $z1, $z2;

        r0 := @this: com.google.gxp.com.google.common.collect.ReferenceMap;

        r1 := @parameter0: com.google.gxp.com.google.common.base.ReferenceType;

        r3 := @parameter1: com.google.gxp.com.google.common.base.ReferenceType;

        r5 := @parameter2: java.util.concurrent.ConcurrentMap;

        specialinvoke r0.<java.util.AbstractMap: void <init>()>();

        $r2 = <com.google.gxp.com.google.common.base.ReferenceType: com.google.gxp.com.google.common.base.ReferenceType PHANTOM>;

        if r1 == $r2 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <com.google.gxp.com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, "Phantom references are not supported.");

        $r4 = <com.google.gxp.com.google.common.base.ReferenceType: com.google.gxp.com.google.common.base.ReferenceType PHANTOM>;

        if r3 == $r4 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        staticinvoke <com.google.gxp.com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z2, "Phantom references are not supported.");

        $z0 = interfaceinvoke r5.<java.util.concurrent.ConcurrentMap: boolean isEmpty()>();

        staticinvoke <com.google.gxp.com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "The backing map must be empty.");

        $r6 = staticinvoke <com.google.gxp.com.google.common.collect.ReferenceMap$ReferenceStrategy: com.google.gxp.com.google.common.collect.ReferenceMap$ReferenceStrategy forType(com.google.gxp.com.google.common.base.ReferenceType)>(r1);

        r0.<com.google.gxp.com.google.common.collect.ReferenceMap: com.google.gxp.com.google.common.collect.ReferenceMap$ReferenceStrategy keyStrategy> = $r6;

        $r7 = staticinvoke <com.google.gxp.com.google.common.collect.ReferenceMap$ReferenceStrategy: com.google.gxp.com.google.common.collect.ReferenceMap$ReferenceStrategy forType(com.google.gxp.com.google.common.base.ReferenceType)>(r3);

        r0.<com.google.gxp.com.google.common.collect.ReferenceMap: com.google.gxp.com.google.common.collect.ReferenceMap$ReferenceStrategy valueStrategy> = $r7;

        r0.<com.google.gxp.com.google.common.collect.ReferenceMap: java.util.concurrent.ConcurrentMap delegate> = r5;

        return;
    }

    public int size()
    {
        int $i0;
        com.google.gxp.com.google.common.collect.ReferenceMap r0;
        java.util.concurrent.ConcurrentMap $r1;

        r0 := @this: com.google.gxp.com.google.common.collect.ReferenceMap;

        $r1 = r0.<com.google.gxp.com.google.common.collect.ReferenceMap: java.util.concurrent.ConcurrentMap delegate>;

        $i0 = interfaceinvoke $r1.<java.util.concurrent.ConcurrentMap: int size()>();

        return $i0;
    }

    public boolean isEmpty()
    {
        com.google.gxp.com.google.common.collect.ReferenceMap r0;
        java.util.concurrent.ConcurrentMap $r1;
        boolean $z0;

        r0 := @this: com.google.gxp.com.google.common.collect.ReferenceMap;

        $r1 = r0.<com.google.gxp.com.google.common.collect.ReferenceMap: java.util.concurrent.ConcurrentMap delegate>;

        $z0 = interfaceinvoke $r1.<java.util.concurrent.ConcurrentMap: boolean isEmpty()>();

        return $z0;
    }

    public boolean containsKey(java.lang.Object)
    {
        com.google.gxp.com.google.common.collect.ReferenceMap$ReferenceStrategy $r2;
        java.lang.Object r1, $r3;
        com.google.gxp.com.google.common.collect.ReferenceMap r0;
        java.util.concurrent.ConcurrentMap $r4;
        boolean $z0;

        r0 := @this: com.google.gxp.com.google.common.collect.ReferenceMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.google.gxp.com.google.common.collect.ReferenceMap: com.google.gxp.com.google.common.collect.ReferenceMap$ReferenceStrategy keyStrategy>;

        $r3 = virtualinvoke $r2.<com.google.gxp.com.google.common.collect.ReferenceMap$ReferenceStrategy: java.lang.Object getDummyFor(java.lang.Object)>(r1);

        $r4 = r0.<com.google.gxp.com.google.common.collect.ReferenceMap: java.util.concurrent.ConcurrentMap delegate>;

        $z0 = interfaceinvoke $r4.<java.util.concurrent.ConcurrentMap: boolean containsKey(java.lang.Object)>($r3);

        return $z0;
    }

    public boolean containsValue(java.lang.Object)
    {
        java.util.Iterator $r4;
        java.util.Collection $r3;
        com.google.gxp.com.google.common.collect.ReferenceMap r1;
        java.util.concurrent.ConcurrentMap $r2;
        java.lang.Object r0, $r5, $r6;
        boolean $z0, $z1;

        r1 := @this: com.google.gxp.com.google.common.collect.ReferenceMap;

        r0 := @parameter0: java.lang.Object;

        staticinvoke <com.google.gxp.com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r2 = r1.<com.google.gxp.com.google.common.collect.ReferenceMap: java.util.concurrent.ConcurrentMap delegate>;

        $r3 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: java.util.Collection values()>();

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = specialinvoke r1.<com.google.gxp.com.google.common.collect.ReferenceMap: java.lang.Object dereferenceValue(java.lang.Object)>($r5);

        $z1 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r6);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    public java.lang.Object get(java.lang.Object)
    {
        com.google.gxp.com.google.common.collect.ReferenceMap$ReferenceStrategy $r2;
        java.lang.Object r1, $r3, $r5, $r6;
        com.google.gxp.com.google.common.collect.ReferenceMap r0;
        java.util.concurrent.ConcurrentMap $r4;

        r0 := @this: com.google.gxp.com.google.common.collect.ReferenceMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.google.gxp.com.google.common.collect.ReferenceMap: com.google.gxp.com.google.common.collect.ReferenceMap$ReferenceStrategy keyStrategy>;

        $r3 = virtualinvoke $r2.<com.google.gxp.com.google.common.collect.ReferenceMap$ReferenceStrategy: java.lang.Object getDummyFor(java.lang.Object)>(r1);

        $r4 = r0.<com.google.gxp.com.google.common.collect.ReferenceMap: java.util.concurrent.ConcurrentMap delegate>;

        $r5 = interfaceinvoke $r4.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>($r3);

        $r6 = specialinvoke r0.<com.google.gxp.com.google.common.collect.ReferenceMap: java.lang.Object dereferenceValue(java.lang.Object)>($r5);

        return $r6;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        com.google.gxp.com.google.common.collect.ReferenceMap r0;
        java.util.concurrent.ConcurrentMap $r5;
        java.lang.Object r1, $r2, r3, $r4, $r6, $r7;

        r0 := @this: com.google.gxp.com.google.common.collect.ReferenceMap;

        r1 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Object;

        $r2 = specialinvoke r0.<com.google.gxp.com.google.common.collect.ReferenceMap: java.lang.Object referenceKey(java.lang.Object)>(r1);

        $r4 = specialinvoke r0.<com.google.gxp.com.google.common.collect.ReferenceMap: java.lang.Object referenceValue(java.lang.Object,java.lang.Object)>($r2, r3);

        $r5 = r0.<com.google.gxp.com.google.common.collect.ReferenceMap: java.util.concurrent.ConcurrentMap delegate>;

        $r6 = interfaceinvoke $r5.<java.util.concurrent.ConcurrentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r4);

        $r7 = specialinvoke r0.<com.google.gxp.com.google.common.collect.ReferenceMap: java.lang.Object dereferenceValue(java.lang.Object)>($r6);

        return $r7;
    }

    public java.lang.Object putIfAbsent(java.lang.Object, java.lang.Object)
    {
        com.google.gxp.com.google.common.collect.ReferenceMap r0;
        java.util.concurrent.ConcurrentMap $r5;
        java.lang.Object r1, $r2, r3, $r4, $r6, $r7;
        boolean $z0;

        r0 := @this: com.google.gxp.com.google.common.collect.ReferenceMap;

        r1 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Object;

        $r2 = specialinvoke r0.<com.google.gxp.com.google.common.collect.ReferenceMap: java.lang.Object referenceKey(java.lang.Object)>(r1);

        $r4 = specialinvoke r0.<com.google.gxp.com.google.common.collect.ReferenceMap: java.lang.Object referenceValue(java.lang.Object,java.lang.Object)>($r2, r3);

     label1:
        $r5 = r0.<com.google.gxp.com.google.common.collect.ReferenceMap: java.util.concurrent.ConcurrentMap delegate>;

        $r6 = interfaceinvoke $r5.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>($r2, $r4);

        $r7 = specialinvoke r0.<com.google.gxp.com.google.common.collect.ReferenceMap: java.lang.Object dereferenceValue(java.lang.Object)>($r6);

        $z0 = staticinvoke <com.google.gxp.com.google.common.collect.ReferenceMap: boolean isPartiallyReclaimed(java.lang.Object,java.lang.Object)>($r6, $r7);

        if $z0 != 0 goto label1;

        return $r7;
    }

    public java.lang.Object replace(java.lang.Object, java.lang.Object)
    {
        com.google.gxp.com.google.common.collect.ReferenceMap r0;
        java.util.concurrent.ConcurrentMap $r5, $r6;
        java.lang.Object r1, $r2, r3, $r4, $r7, $r8;
        boolean $z0, $z1;

        r0 := @this: com.google.gxp.com.google.common.collect.ReferenceMap;

        r1 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Object;

        $r2 = specialinvoke r0.<com.google.gxp.com.google.common.collect.ReferenceMap: java.lang.Object referenceKey(java.lang.Object)>(r1);

        $r4 = specialinvoke r0.<com.google.gxp.com.google.common.collect.ReferenceMap: java.lang.Object referenceValue(java.lang.Object,java.lang.Object)>($r2, r3);

     label1:
        $r6 = r0.<com.google.gxp.com.google.common.collect.ReferenceMap: java.util.concurrent.ConcurrentMap delegate>;

        $r7 = interfaceinvoke $r6.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>($r2);

        $r8 = specialinvoke r0.<com.google.gxp.com.google.common.collect.ReferenceMap: java.lang.Object dereferenceValue(java.lang.Object)>($r7);

        $z1 = staticinvoke <com.google.gxp.com.google.common.collect.ReferenceMap: boolean isPartiallyReclaimed(java.lang.Object,java.lang.Object)>($r7, $r8);

        if $z1 != 0 goto label1;

        if $r7 != null goto label2;

        return null;

     label2:
        $r5 = r0.<com.google.gxp.com.google.common.collect.ReferenceMap: java.util.concurrent.ConcurrentMap delegate>;

        $z0 = interfaceinvoke $r5.<java.util.concurrent.ConcurrentMap: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>($r2, $r7, $r4);

        if $z0 == 0 goto label3;

        return $r8;

     label3:
        goto label1;
    }

    public boolean replace(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        com.google.gxp.com.google.common.collect.ReferenceMap$ReferenceStrategy $r4;
        com.google.gxp.com.google.common.collect.ReferenceMap r0;
        java.util.concurrent.ConcurrentMap $r8;
        java.lang.Object r1, $r2, r3, $r5, r6, $r7;
        boolean $z0;

        r0 := @this: com.google.gxp.com.google.common.collect.ReferenceMap;

        r1 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Object;

        r6 := @parameter2: java.lang.Object;

        $r2 = specialinvoke r0.<com.google.gxp.com.google.common.collect.ReferenceMap: java.lang.Object referenceKey(java.lang.Object)>(r1);

        $r4 = r0.<com.google.gxp.com.google.common.collect.ReferenceMap: com.google.gxp.com.google.common.collect.ReferenceMap$ReferenceStrategy valueStrategy>;

        $r5 = virtualinvoke $r4.<com.google.gxp.com.google.common.collect.ReferenceMap$ReferenceStrategy: java.lang.Object getDummyFor(java.lang.Object)>(r3);

        $r7 = specialinvoke r0.<com.google.gxp.com.google.common.collect.ReferenceMap: java.lang.Object referenceValue(java.lang.Object,java.lang.Object)>($r2, r6);

        $r8 = r0.<com.google.gxp.com.google.common.collect.ReferenceMap: java.util.concurrent.ConcurrentMap delegate>;

        $z0 = interfaceinvoke $r8.<java.util.concurrent.ConcurrentMap: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>($r2, $r5, $r7);

        return $z0;
    }

    private static boolean isPartiallyReclaimed(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        if r0 == null goto label1;

        if r1 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.Object remove(java.lang.Object)
    {
        com.google.gxp.com.google.common.collect.ReferenceMap$ReferenceStrategy $r2;
        java.lang.Object r1, $r3, $r5, $r6;
        com.google.gxp.com.google.common.collect.ReferenceMap r0;
        java.util.concurrent.ConcurrentMap $r4;

        r0 := @this: com.google.gxp.com.google.common.collect.ReferenceMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.google.gxp.com.google.common.collect.ReferenceMap: com.google.gxp.com.google.common.collect.ReferenceMap$ReferenceStrategy keyStrategy>;

        $r3 = virtualinvoke $r2.<com.google.gxp.com.google.common.collect.ReferenceMap$ReferenceStrategy: java.lang.Object getDummyFor(java.lang.Object)>(r1);

        $r4 = r0.<com.google.gxp.com.google.common.collect.ReferenceMap: java.util.concurrent.ConcurrentMap delegate>;

        $r5 = interfaceinvoke $r4.<java.util.concurrent.ConcurrentMap: java.lang.Object remove(java.lang.Object)>($r3);

        $r6 = specialinvoke r0.<com.google.gxp.com.google.common.collect.ReferenceMap: java.lang.Object dereferenceValue(java.lang.Object)>($r5);

        return $r6;
    }

    public boolean remove(java.lang.Object, java.lang.Object)
    {
        com.google.gxp.com.google.common.collect.ReferenceMap$ReferenceStrategy $r2, $r5;
        com.google.gxp.com.google.common.collect.ReferenceMap r0;
        java.util.concurrent.ConcurrentMap $r7;
        java.lang.Object r1, $r3, r4, $r6;
        boolean $z0;

        r0 := @this: com.google.gxp.com.google.common.collect.ReferenceMap;

        r1 := @parameter0: java.lang.Object;

        r4 := @parameter1: java.lang.Object;

        $r2 = r0.<com.google.gxp.com.google.common.collect.ReferenceMap: com.google.gxp.com.google.common.collect.ReferenceMap$ReferenceStrategy keyStrategy>;

        $r3 = virtualinvoke $r2.<com.google.gxp.com.google.common.collect.ReferenceMap$ReferenceStrategy: java.lang.Object getDummyFor(java.lang.Object)>(r1);

        $r5 = r0.<com.google.gxp.com.google.common.collect.ReferenceMap: com.google.gxp.com.google.common.collect.ReferenceMap$ReferenceStrategy valueStrategy>;

        $r6 = virtualinvoke $r5.<com.google.gxp.com.google.common.collect.ReferenceMap$ReferenceStrategy: java.lang.Object getDummyFor(java.lang.Object)>(r4);

        $r7 = r0.<com.google.gxp.com.google.common.collect.ReferenceMap: java.util.concurrent.ConcurrentMap delegate>;

        $z0 = interfaceinvoke $r7.<java.util.concurrent.ConcurrentMap: boolean remove(java.lang.Object,java.lang.Object)>($r3, $r6);

        return $z0;
    }

    public void clear()
    {
        com.google.gxp.com.google.common.collect.ReferenceMap r0;
        java.util.concurrent.ConcurrentMap $r1;

        r0 := @this: com.google.gxp.com.google.common.collect.ReferenceMap;

        $r1 = r0.<com.google.gxp.com.google.common.collect.ReferenceMap: java.util.concurrent.ConcurrentMap delegate>;

        interfaceinvoke $r1.<java.util.concurrent.ConcurrentMap: void clear()>();

        return;
    }

    public java.util.Set entrySet()
    {
        com.google.gxp.com.google.common.collect.ReferenceMap$EntrySet r1, $r2;
        com.google.gxp.com.google.common.collect.ReferenceMap r0;

        r0 := @this: com.google.gxp.com.google.common.collect.ReferenceMap;

        r1 = r0.<com.google.gxp.com.google.common.collect.ReferenceMap: com.google.gxp.com.google.common.collect.ReferenceMap$EntrySet entrySet>;

        if r1 != null goto label1;

        $r2 = new com.google.gxp.com.google.common.collect.ReferenceMap$EntrySet;

        specialinvoke $r2.<com.google.gxp.com.google.common.collect.ReferenceMap$EntrySet: void <init>(com.google.gxp.com.google.common.collect.ReferenceMap,com.google.gxp.com.google.common.collect.ReferenceMap$1)>(r0, null);

        r0.<com.google.gxp.com.google.common.collect.ReferenceMap: com.google.gxp.com.google.common.collect.ReferenceMap$EntrySet entrySet> = $r2;

        goto label2;

     label1:
        $r2 = r1;

     label2:
        return $r2;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.util.Map$Entry r5;
        java.util.Iterator $r3;
        java.util.Set $r2;
        com.google.gxp.com.google.common.collect.ReferenceMap r1;
        int $i0;
        java.io.ObjectOutputStream r0;
        java.lang.Object $r4, $r6, $r7;
        boolean $z0;

        r1 := @this: com.google.gxp.com.google.common.collect.ReferenceMap;

        r0 := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke r0.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        $i0 = virtualinvoke r1.<com.google.gxp.com.google.common.collect.ReferenceMap: int size()>();

        virtualinvoke r0.<java.io.ObjectOutputStream: void writeInt(int)>($i0);

        $r2 = virtualinvoke r1.<com.google.gxp.com.google.common.collect.ReferenceMap: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r6 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        virtualinvoke r0.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r6);

        $r7 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke r0.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r7);

        goto label1;

     label2:
        virtualinvoke r0.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(null);

        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.ObjectInputStream r0;
        int $i0, $i1;
        java.util.concurrent.ConcurrentHashMap $r2;
        java.lang.Object $r3, $r4;
        com.google.gxp.com.google.common.collect.ReferenceMap r1;

        r1 := @this: com.google.gxp.com.google.common.collect.ReferenceMap;

        r0 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r0.<java.io.ObjectInputStream: void defaultReadObject()>();

        $i0 = virtualinvoke r0.<java.io.ObjectInputStream: int readInt()>();

        $r2 = new java.util.concurrent.ConcurrentHashMap;

        $i1 = staticinvoke <com.google.gxp.com.google.common.collect.Maps: int capacity(int)>($i0);

        specialinvoke $r2.<java.util.concurrent.ConcurrentHashMap: void <init>(int)>($i1);

        r1.<com.google.gxp.com.google.common.collect.ReferenceMap: java.util.concurrent.ConcurrentMap delegate> = $r2;

     label1:
        $r3 = virtualinvoke r0.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        if $r3 != null goto label2;

        goto label3;

     label2:
        $r4 = virtualinvoke r0.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        virtualinvoke r1.<com.google.gxp.com.google.common.collect.ReferenceMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r4);

        goto label1;

     label3:
        return;
    }

    private static boolean referenceEquals(java.lang.ref.Reference, java.lang.Object)
    {
        com.google.gxp.com.google.common.collect.ReferenceMap$DummyReference $r2;
        java.lang.ref.Reference r1;
        com.google.gxp.com.google.common.collect.ReferenceMap$InternalReference $r5;
        java.lang.Object r0, $r3, $r4, $r6, $r7;
        boolean $z0, $z1, $z2;

        r1 := @parameter0: java.lang.ref.Reference;

        r0 := @parameter1: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r0 instanceof com.google.gxp.com.google.common.collect.ReferenceMap$InternalReference;

        if $z0 == 0 goto label4;

        $r5 = (com.google.gxp.com.google.common.collect.ReferenceMap$InternalReference) r0;

        $r6 = interfaceinvoke $r5.<com.google.gxp.com.google.common.collect.ReferenceMap$InternalReference: java.lang.Object get()>();

        if $r6 == null goto label2;

        $r7 = virtualinvoke r1.<java.lang.ref.Reference: java.lang.Object get()>();

        if $r6 != $r7 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;

     label4:
        $r2 = (com.google.gxp.com.google.common.collect.ReferenceMap$DummyReference) r0;

        $r3 = virtualinvoke $r2.<com.google.gxp.com.google.common.collect.ReferenceMap$DummyReference: java.lang.Object unwrap()>();

        $r4 = virtualinvoke r1.<java.lang.ref.Reference: java.lang.Object get()>();

        if $r3 != $r4 goto label5;

        $z2 = 1;

        goto label6;

     label5:
        $z2 = 0;

     label6:
        return $z2;
    }

    private java.lang.Object referenceKey(java.lang.Object)
    {
        com.google.gxp.com.google.common.collect.ReferenceMap$ReferenceStrategy $r2;
        java.lang.Object r1, $r3, $r4;
        com.google.gxp.com.google.common.collect.ReferenceMap r0;

        r0 := @this: com.google.gxp.com.google.common.collect.ReferenceMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.google.gxp.com.google.common.collect.ReferenceMap: com.google.gxp.com.google.common.collect.ReferenceMap$ReferenceStrategy keyStrategy>;

        $r3 = staticinvoke <com.google.gxp.com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r4 = virtualinvoke $r2.<com.google.gxp.com.google.common.collect.ReferenceMap$ReferenceStrategy: java.lang.Object referenceKey(com.google.gxp.com.google.common.collect.ReferenceMap,java.lang.Object)>(r0, $r3);

        return $r4;
    }

    private java.lang.Object referenceValue(java.lang.Object, java.lang.Object)
    {
        com.google.gxp.com.google.common.collect.ReferenceMap$ReferenceStrategy $r3;
        java.lang.Object r1, r2, $r4, $r5;
        com.google.gxp.com.google.common.collect.ReferenceMap r0;

        r0 := @this: com.google.gxp.com.google.common.collect.ReferenceMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = r0.<com.google.gxp.com.google.common.collect.ReferenceMap: com.google.gxp.com.google.common.collect.ReferenceMap$ReferenceStrategy valueStrategy>;

        $r4 = staticinvoke <com.google.gxp.com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r5 = virtualinvoke $r3.<com.google.gxp.com.google.common.collect.ReferenceMap$ReferenceStrategy: java.lang.Object referenceValue(com.google.gxp.com.google.common.collect.ReferenceMap,java.lang.Object,java.lang.Object)>(r0, r1, $r4);

        return $r5;
    }

    private java.lang.Object dereferenceValue(java.lang.Object)
    {
        com.google.gxp.com.google.common.collect.ReferenceMap$ReferenceStrategy $r2;
        java.lang.Object r0, $r3;
        com.google.gxp.com.google.common.collect.ReferenceMap r1;

        r1 := @this: com.google.gxp.com.google.common.collect.ReferenceMap;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        return null;

     label1:
        $r2 = r1.<com.google.gxp.com.google.common.collect.ReferenceMap: com.google.gxp.com.google.common.collect.ReferenceMap$ReferenceStrategy valueStrategy>;

        $r3 = virtualinvoke $r2.<com.google.gxp.com.google.common.collect.ReferenceMap$ReferenceStrategy: java.lang.Object dereferenceValue(java.lang.Object)>(r0);

        return $r3;
    }

    static java.util.concurrent.ConcurrentMap access$200(com.google.gxp.com.google.common.collect.ReferenceMap)
    {
        com.google.gxp.com.google.common.collect.ReferenceMap r0;
        java.util.concurrent.ConcurrentMap $r1;

        r0 := @parameter0: com.google.gxp.com.google.common.collect.ReferenceMap;

        $r1 = r0.<com.google.gxp.com.google.common.collect.ReferenceMap: java.util.concurrent.ConcurrentMap delegate>;

        return $r1;
    }

    static com.google.gxp.com.google.common.collect.ReferenceMap$ReferenceStrategy access$300(com.google.gxp.com.google.common.collect.ReferenceMap)
    {
        com.google.gxp.com.google.common.collect.ReferenceMap$ReferenceStrategy $r1;
        com.google.gxp.com.google.common.collect.ReferenceMap r0;

        r0 := @parameter0: com.google.gxp.com.google.common.collect.ReferenceMap;

        $r1 = r0.<com.google.gxp.com.google.common.collect.ReferenceMap: com.google.gxp.com.google.common.collect.ReferenceMap$ReferenceStrategy keyStrategy>;

        return $r1;
    }

    static java.lang.Object access$400(com.google.gxp.com.google.common.collect.ReferenceMap, java.lang.Object)
    {
        java.lang.Object r1, $r2;
        com.google.gxp.com.google.common.collect.ReferenceMap r0;

        r0 := @parameter0: com.google.gxp.com.google.common.collect.ReferenceMap;

        r1 := @parameter1: java.lang.Object;

        $r2 = specialinvoke r0.<com.google.gxp.com.google.common.collect.ReferenceMap: java.lang.Object dereferenceValue(java.lang.Object)>(r1);

        return $r2;
    }

    static boolean access$600(java.lang.ref.Reference, java.lang.Object)
    {
        java.lang.ref.Reference r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @parameter0: java.lang.ref.Reference;

        r1 := @parameter1: java.lang.Object;

        $z0 = staticinvoke <com.google.gxp.com.google.common.collect.ReferenceMap: boolean referenceEquals(java.lang.ref.Reference,java.lang.Object)>(r0, r1);

        return $z0;
    }

    public static void <clinit>()
    {
        <com.google.gxp.com.google.common.collect.ReferenceMap: long serialVersionUID> = 0L;

        return;
    }
}
