public class org.springframework.http.server.ServletServerHttpResponse extends java.lang.Object implements org.springframework.http.server.ServerHttpResponse
{
    private final javax.servlet.http.HttpServletResponse servletResponse;
    private final org.springframework.http.HttpHeaders headers;
    private boolean headersWritten;

    public void <init>(javax.servlet.http.HttpServletResponse)
    {
        javax.servlet.http.HttpServletResponse r2;
        org.springframework.http.server.ServletServerHttpResponse r0;
        org.springframework.http.HttpHeaders $r1;

        r0 := @this: org.springframework.http.server.ServletServerHttpResponse;

        r2 := @parameter0: javax.servlet.http.HttpServletResponse;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.springframework.http.HttpHeaders;

        specialinvoke $r1.<org.springframework.http.HttpHeaders: void <init>()>();

        r0.<org.springframework.http.server.ServletServerHttpResponse: org.springframework.http.HttpHeaders headers> = $r1;

        r0.<org.springframework.http.server.ServletServerHttpResponse: boolean headersWritten> = 0;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r2, "\'servletResponse\' must not be null");

        r0.<org.springframework.http.server.ServletServerHttpResponse: javax.servlet.http.HttpServletResponse servletResponse> = r2;

        return;
    }

    public javax.servlet.http.HttpServletResponse getServletResponse()
    {
        javax.servlet.http.HttpServletResponse $r1;
        org.springframework.http.server.ServletServerHttpResponse r0;

        r0 := @this: org.springframework.http.server.ServletServerHttpResponse;

        $r1 = r0.<org.springframework.http.server.ServletServerHttpResponse: javax.servlet.http.HttpServletResponse servletResponse>;

        return $r1;
    }

    public void setStatusCode(org.springframework.http.HttpStatus)
    {
        org.springframework.http.HttpStatus r1;
        org.springframework.http.server.ServletServerHttpResponse r0;
        javax.servlet.http.HttpServletResponse $r2;
        int $i0;

        r0 := @this: org.springframework.http.server.ServletServerHttpResponse;

        r1 := @parameter0: org.springframework.http.HttpStatus;

        $r2 = r0.<org.springframework.http.server.ServletServerHttpResponse: javax.servlet.http.HttpServletResponse servletResponse>;

        $i0 = virtualinvoke r1.<org.springframework.http.HttpStatus: int value()>();

        interfaceinvoke $r2.<javax.servlet.http.HttpServletResponse: void setStatus(int)>($i0);

        return;
    }

    public org.springframework.http.HttpHeaders getHeaders()
    {
        org.springframework.http.server.ServletServerHttpResponse r0;
        org.springframework.http.HttpHeaders $r1, $r2;
        boolean $z0;

        r0 := @this: org.springframework.http.server.ServletServerHttpResponse;

        $z0 = r0.<org.springframework.http.server.ServletServerHttpResponse: boolean headersWritten>;

        if $z0 == 0 goto label1;

        $r1 = r0.<org.springframework.http.server.ServletServerHttpResponse: org.springframework.http.HttpHeaders headers>;

        $r2 = staticinvoke <org.springframework.http.HttpHeaders: org.springframework.http.HttpHeaders readOnlyHttpHeaders(org.springframework.http.HttpHeaders)>($r1);

        goto label2;

     label1:
        $r2 = r0.<org.springframework.http.server.ServletServerHttpResponse: org.springframework.http.HttpHeaders headers>;

     label2:
        return $r2;
    }

    public java.io.OutputStream getBody() throws java.io.IOException
    {
        javax.servlet.http.HttpServletResponse $r1;
        org.springframework.http.server.ServletServerHttpResponse r0;
        javax.servlet.ServletOutputStream $r2;

        r0 := @this: org.springframework.http.server.ServletServerHttpResponse;

        specialinvoke r0.<org.springframework.http.server.ServletServerHttpResponse: void writeHeaders()>();

        $r1 = r0.<org.springframework.http.server.ServletServerHttpResponse: javax.servlet.http.HttpServletResponse servletResponse>;

        $r2 = interfaceinvoke $r1.<javax.servlet.http.HttpServletResponse: javax.servlet.ServletOutputStream getOutputStream()>();

        return $r2;
    }

    public void close()
    {
        org.springframework.http.server.ServletServerHttpResponse r0;

        r0 := @this: org.springframework.http.server.ServletServerHttpResponse;

        specialinvoke r0.<org.springframework.http.server.ServletServerHttpResponse: void writeHeaders()>();

        return;
    }

    private void writeHeaders()
    {
        org.springframework.http.server.ServletServerHttpResponse r0;
        java.lang.String r7, r12;
        boolean $z0, $z1, $z2;
        java.util.Map$Entry r5;
        java.util.Iterator $r3, $r10;
        org.springframework.http.HttpHeaders $r1;
        javax.servlet.http.HttpServletResponse $r13;
        java.util.Set $r2;
        java.util.List $r9;
        java.lang.Object $r4, $r6, $r8, $r11;

        r0 := @this: org.springframework.http.server.ServletServerHttpResponse;

        $z0 = r0.<org.springframework.http.server.ServletServerHttpResponse: boolean headersWritten>;

        if $z0 != 0 goto label5;

        $r1 = r0.<org.springframework.http.server.ServletServerHttpResponse: org.springframework.http.HttpHeaders headers>;

        $r2 = virtualinvoke $r1.<org.springframework.http.HttpHeaders: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        goto label4;

     label1:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r6 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        r7 = (java.lang.String) $r6;

        $r8 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r9 = (java.util.List) $r8;

        $r10 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

        goto label3;

     label2:
        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r12 = (java.lang.String) $r11;

        $r13 = r0.<org.springframework.http.server.ServletServerHttpResponse: javax.servlet.http.HttpServletResponse servletResponse>;

        interfaceinvoke $r13.<javax.servlet.http.HttpServletResponse: void addHeader(java.lang.String,java.lang.String)>(r7, r12);

     label3:
        $z2 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label2;

     label4:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label1;

        r0.<org.springframework.http.server.ServletServerHttpResponse: boolean headersWritten> = 1;

     label5:
        return;
    }
}
