public class org.apache.batik.parser.TransformListParser extends org.apache.batik.parser.NumberParser
{
    protected org.apache.batik.parser.TransformListHandler transformListHandler;

    public void <init>()
    {
        org.apache.batik.parser.TransformListHandler $r1;
        org.apache.batik.parser.TransformListParser r0;

        r0 := @this: org.apache.batik.parser.TransformListParser;

        specialinvoke r0.<org.apache.batik.parser.NumberParser: void <init>()>();

        $r1 = <org.apache.batik.parser.DefaultTransformListHandler: org.apache.batik.parser.TransformListHandler INSTANCE>;

        r0.<org.apache.batik.parser.TransformListParser: org.apache.batik.parser.TransformListHandler transformListHandler> = $r1;

        return;
    }

    public void setTransformListHandler(org.apache.batik.parser.TransformListHandler)
    {
        org.apache.batik.parser.TransformListHandler r1;
        org.apache.batik.parser.TransformListParser r0;

        r0 := @this: org.apache.batik.parser.TransformListParser;

        r1 := @parameter0: org.apache.batik.parser.TransformListHandler;

        r0.<org.apache.batik.parser.TransformListParser: org.apache.batik.parser.TransformListHandler transformListHandler> = r1;

        return;
    }

    public org.apache.batik.parser.TransformListHandler getTransformListHandler()
    {
        org.apache.batik.parser.TransformListHandler $r1;
        org.apache.batik.parser.TransformListParser r0;

        r0 := @this: org.apache.batik.parser.TransformListParser;

        $r1 = r0.<org.apache.batik.parser.TransformListParser: org.apache.batik.parser.TransformListHandler transformListHandler>;

        return $r1;
    }

    protected void doParse() throws org.apache.batik.parser.ParseException, java.io.IOException
    {
        java.lang.Object[] $r5;
        org.apache.batik.parser.TransformListParser r0;
        org.apache.batik.util.io.NormalizingReader $r2, $r3;
        java.lang.Integer $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9;
        org.apache.batik.parser.TransformListHandler $r1, $r4;
        org.apache.batik.parser.ErrorHandler $r8;
        org.apache.batik.parser.ParseException $r7;

        r0 := @this: org.apache.batik.parser.TransformListParser;

        $r1 = r0.<org.apache.batik.parser.TransformListParser: org.apache.batik.parser.TransformListHandler transformListHandler>;

        interfaceinvoke $r1.<org.apache.batik.parser.TransformListHandler: void startTransformList()>();

        goto label01;

     label01:
        $r2 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader>;

        $i0 = virtualinvoke $r2.<java.io.Reader: int read()>();

        r0.<org.apache.batik.parser.AbstractParser: int current> = $i0;

        $i1 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        lookupswitch($i1)
        {
            case -1: goto label10;
            case 9: goto label02;
            case 10: goto label02;
            case 13: goto label02;
            case 32: goto label02;
            case 44: goto label02;
            case 109: goto label03;
            case 114: goto label04;
            case 115: goto label06;
            case 116: goto label05;
            default: goto label11;
        };

     label02:
        goto label12;

     label03:
        virtualinvoke r0.<org.apache.batik.parser.TransformListParser: void parseMatrix()>();

        goto label12;

     label04:
        virtualinvoke r0.<org.apache.batik.parser.TransformListParser: void parseRotate()>();

        goto label12;

     label05:
        virtualinvoke r0.<org.apache.batik.parser.TransformListParser: void parseTranslate()>();

        goto label12;

     label06:
        $r3 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader>;

        $i2 = virtualinvoke $r3.<java.io.Reader: int read()>();

        r0.<org.apache.batik.parser.AbstractParser: int current> = $i2;

        $i3 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        lookupswitch($i3)
        {
            case 99: goto label07;
            case 107: goto label08;
            default: goto label09;
        };

     label07:
        virtualinvoke r0.<org.apache.batik.parser.TransformListParser: void parseScale()>();

        goto label12;

     label08:
        virtualinvoke r0.<org.apache.batik.parser.TransformListParser: void parseSkew()>();

        goto label12;

     label09:
        $i4 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void reportUnexpectedCharacterError(int)>($i4);

        virtualinvoke r0.<org.apache.batik.parser.TransformListParser: void skipTransform()>();

        goto label12;

     label10:
        goto label15;

     label11:
        $i7 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void reportUnexpectedCharacterError(int)>($i7);

        virtualinvoke r0.<org.apache.batik.parser.TransformListParser: void skipTransform()>();

     label12:
        goto label14;

     label13:
        $r7 := @caughtexception;

        $r8 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.parser.ErrorHandler errorHandler>;

        interfaceinvoke $r8.<org.apache.batik.parser.ErrorHandler: void error(org.apache.batik.parser.ParseException)>($r7);

        virtualinvoke r0.<org.apache.batik.parser.TransformListParser: void skipTransform()>();

     label14:
        goto label01;

     label15:
        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipSpaces()>();

        $i5 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        $i9 = (int) -1;

        if $i5 == $i9 goto label16;

        $r5 = newarray (java.lang.Object)[1];

        $r9 = new java.lang.Integer;

        $i6 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        specialinvoke $r9.<java.lang.Integer: void <init>(int)>($i6);

        $r5[0] = $r9;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void reportError(java.lang.String,java.lang.Object[])>("end.of.stream.expected", $r5);

     label16:
        $r4 = r0.<org.apache.batik.parser.TransformListParser: org.apache.batik.parser.TransformListHandler transformListHandler>;

        interfaceinvoke $r4.<org.apache.batik.parser.TransformListHandler: void endTransformList()>();

        return;

        catch org.apache.batik.parser.ParseException from label01 to label12 with label13;
    }

    protected void parseMatrix() throws org.apache.batik.parser.ParseException, java.io.IOException
    {
        float $f0, $f1, $f2, $f3, $f4, $f5;
        org.apache.batik.parser.TransformListParser r0;
        org.apache.batik.util.io.NormalizingReader $r1, $r2, $r3, $r4, $r5, $r6, $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20;
        org.apache.batik.parser.TransformListHandler $r8;

        r0 := @this: org.apache.batik.parser.TransformListParser;

        $r1 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader>;

        $i0 = virtualinvoke $r1.<java.io.Reader: int read()>();

        r0.<org.apache.batik.parser.AbstractParser: int current> = $i0;

        $i1 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        if $i1 == 97 goto label1;

        $i20 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void reportCharacterExpectedError(char,int)>(97, $i20);

        virtualinvoke r0.<org.apache.batik.parser.TransformListParser: void skipTransform()>();

        return;

     label1:
        $r2 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader>;

        $i2 = virtualinvoke $r2.<java.io.Reader: int read()>();

        r0.<org.apache.batik.parser.AbstractParser: int current> = $i2;

        $i3 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        if $i3 == 116 goto label2;

        $i19 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void reportCharacterExpectedError(char,int)>(116, $i19);

        virtualinvoke r0.<org.apache.batik.parser.TransformListParser: void skipTransform()>();

        return;

     label2:
        $r3 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader>;

        $i4 = virtualinvoke $r3.<java.io.Reader: int read()>();

        r0.<org.apache.batik.parser.AbstractParser: int current> = $i4;

        $i5 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        if $i5 == 114 goto label3;

        $i18 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void reportCharacterExpectedError(char,int)>(114, $i18);

        virtualinvoke r0.<org.apache.batik.parser.TransformListParser: void skipTransform()>();

        return;

     label3:
        $r4 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader>;

        $i6 = virtualinvoke $r4.<java.io.Reader: int read()>();

        r0.<org.apache.batik.parser.AbstractParser: int current> = $i6;

        $i7 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        if $i7 == 105 goto label4;

        $i17 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void reportCharacterExpectedError(char,int)>(105, $i17);

        virtualinvoke r0.<org.apache.batik.parser.TransformListParser: void skipTransform()>();

        return;

     label4:
        $r5 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader>;

        $i8 = virtualinvoke $r5.<java.io.Reader: int read()>();

        r0.<org.apache.batik.parser.AbstractParser: int current> = $i8;

        $i9 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        if $i9 == 120 goto label5;

        $i16 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void reportCharacterExpectedError(char,int)>(120, $i16);

        virtualinvoke r0.<org.apache.batik.parser.TransformListParser: void skipTransform()>();

        return;

     label5:
        $r6 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader>;

        $i10 = virtualinvoke $r6.<java.io.Reader: int read()>();

        r0.<org.apache.batik.parser.AbstractParser: int current> = $i10;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipSpaces()>();

        $i11 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        if $i11 == 40 goto label6;

        $i15 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void reportCharacterExpectedError(char,int)>(40, $i15);

        virtualinvoke r0.<org.apache.batik.parser.TransformListParser: void skipTransform()>();

        return;

     label6:
        $r7 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader>;

        $i12 = virtualinvoke $r7.<java.io.Reader: int read()>();

        r0.<org.apache.batik.parser.AbstractParser: int current> = $i12;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipSpaces()>();

        $f0 = virtualinvoke r0.<org.apache.batik.parser.NumberParser: float parseFloat()>();

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipCommaSpaces()>();

        $f1 = virtualinvoke r0.<org.apache.batik.parser.NumberParser: float parseFloat()>();

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipCommaSpaces()>();

        $f2 = virtualinvoke r0.<org.apache.batik.parser.NumberParser: float parseFloat()>();

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipCommaSpaces()>();

        $f3 = virtualinvoke r0.<org.apache.batik.parser.NumberParser: float parseFloat()>();

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipCommaSpaces()>();

        $f4 = virtualinvoke r0.<org.apache.batik.parser.NumberParser: float parseFloat()>();

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipCommaSpaces()>();

        $f5 = virtualinvoke r0.<org.apache.batik.parser.NumberParser: float parseFloat()>();

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipSpaces()>();

        $i13 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        if $i13 == 41 goto label7;

        $i14 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void reportCharacterExpectedError(char,int)>(41, $i14);

        virtualinvoke r0.<org.apache.batik.parser.TransformListParser: void skipTransform()>();

        return;

     label7:
        $r8 = r0.<org.apache.batik.parser.TransformListParser: org.apache.batik.parser.TransformListHandler transformListHandler>;

        interfaceinvoke $r8.<org.apache.batik.parser.TransformListHandler: void matrix(float,float,float,float,float,float)>($f0, $f1, $f2, $f3, $f4, $f5);

        return;
    }

    protected void parseRotate() throws org.apache.batik.parser.ParseException, java.io.IOException
    {
        float $f0, $f1, $f2;
        org.apache.batik.parser.TransformListParser r0;
        org.apache.batik.util.io.NormalizingReader $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22;
        org.apache.batik.parser.TransformListHandler $r9, $r10;

        r0 := @this: org.apache.batik.parser.TransformListParser;

        $r1 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader>;

        $i0 = virtualinvoke $r1.<java.io.Reader: int read()>();

        r0.<org.apache.batik.parser.AbstractParser: int current> = $i0;

        $i1 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        if $i1 == 111 goto label01;

        $i22 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void reportCharacterExpectedError(char,int)>(111, $i22);

        virtualinvoke r0.<org.apache.batik.parser.TransformListParser: void skipTransform()>();

        return;

     label01:
        $r2 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader>;

        $i2 = virtualinvoke $r2.<java.io.Reader: int read()>();

        r0.<org.apache.batik.parser.AbstractParser: int current> = $i2;

        $i3 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        if $i3 == 116 goto label02;

        $i21 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void reportCharacterExpectedError(char,int)>(116, $i21);

        virtualinvoke r0.<org.apache.batik.parser.TransformListParser: void skipTransform()>();

        return;

     label02:
        $r3 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader>;

        $i4 = virtualinvoke $r3.<java.io.Reader: int read()>();

        r0.<org.apache.batik.parser.AbstractParser: int current> = $i4;

        $i5 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        if $i5 == 97 goto label03;

        $i20 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void reportCharacterExpectedError(char,int)>(97, $i20);

        virtualinvoke r0.<org.apache.batik.parser.TransformListParser: void skipTransform()>();

        return;

     label03:
        $r4 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader>;

        $i6 = virtualinvoke $r4.<java.io.Reader: int read()>();

        r0.<org.apache.batik.parser.AbstractParser: int current> = $i6;

        $i7 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        if $i7 == 116 goto label04;

        $i19 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void reportCharacterExpectedError(char,int)>(116, $i19);

        virtualinvoke r0.<org.apache.batik.parser.TransformListParser: void skipTransform()>();

        return;

     label04:
        $r5 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader>;

        $i8 = virtualinvoke $r5.<java.io.Reader: int read()>();

        r0.<org.apache.batik.parser.AbstractParser: int current> = $i8;

        $i9 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        if $i9 == 101 goto label05;

        $i18 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void reportCharacterExpectedError(char,int)>(101, $i18);

        virtualinvoke r0.<org.apache.batik.parser.TransformListParser: void skipTransform()>();

        return;

     label05:
        $r6 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader>;

        $i10 = virtualinvoke $r6.<java.io.Reader: int read()>();

        r0.<org.apache.batik.parser.AbstractParser: int current> = $i10;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipSpaces()>();

        $i11 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        if $i11 == 40 goto label06;

        $i17 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void reportCharacterExpectedError(char,int)>(40, $i17);

        virtualinvoke r0.<org.apache.batik.parser.TransformListParser: void skipTransform()>();

        return;

     label06:
        $r7 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader>;

        $i12 = virtualinvoke $r7.<java.io.Reader: int read()>();

        r0.<org.apache.batik.parser.AbstractParser: int current> = $i12;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipSpaces()>();

        $f0 = virtualinvoke r0.<org.apache.batik.parser.NumberParser: float parseFloat()>();

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipSpaces()>();

        $i13 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        lookupswitch($i13)
        {
            case 41: goto label07;
            case 44: goto label08;
            default: goto label09;
        };

     label07:
        $r10 = r0.<org.apache.batik.parser.TransformListParser: org.apache.batik.parser.TransformListHandler transformListHandler>;

        interfaceinvoke $r10.<org.apache.batik.parser.TransformListHandler: void rotate(float)>($f0);

        return;

     label08:
        $r8 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader>;

        $i14 = virtualinvoke $r8.<java.io.Reader: int read()>();

        r0.<org.apache.batik.parser.AbstractParser: int current> = $i14;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipSpaces()>();

     label09:
        $f1 = virtualinvoke r0.<org.apache.batik.parser.NumberParser: float parseFloat()>();

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipCommaSpaces()>();

        $f2 = virtualinvoke r0.<org.apache.batik.parser.NumberParser: float parseFloat()>();

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipSpaces()>();

        $i15 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        if $i15 == 41 goto label10;

        $i16 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void reportCharacterExpectedError(char,int)>(41, $i16);

        virtualinvoke r0.<org.apache.batik.parser.TransformListParser: void skipTransform()>();

        return;

     label10:
        $r9 = r0.<org.apache.batik.parser.TransformListParser: org.apache.batik.parser.TransformListHandler transformListHandler>;

        interfaceinvoke $r9.<org.apache.batik.parser.TransformListHandler: void rotate(float,float,float)>($f0, $f1, $f2);

        return;
    }

    protected void parseTranslate() throws org.apache.batik.parser.ParseException, java.io.IOException
    {
        float $f0, $f1;
        org.apache.batik.parser.TransformListParser r0;
        org.apache.batik.util.io.NormalizingReader $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31;
        org.apache.batik.parser.TransformListHandler $r12, $r13;

        r0 := @this: org.apache.batik.parser.TransformListParser;

        $r1 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader>;

        $i0 = virtualinvoke $r1.<java.io.Reader: int read()>();

        r0.<org.apache.batik.parser.AbstractParser: int current> = $i0;

        $i1 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        if $i1 == 114 goto label01;

        $i31 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void reportCharacterExpectedError(char,int)>(114, $i31);

        virtualinvoke r0.<org.apache.batik.parser.TransformListParser: void skipTransform()>();

        return;

     label01:
        $r2 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader>;

        $i2 = virtualinvoke $r2.<java.io.Reader: int read()>();

        r0.<org.apache.batik.parser.AbstractParser: int current> = $i2;

        $i3 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        if $i3 == 97 goto label02;

        $i30 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void reportCharacterExpectedError(char,int)>(97, $i30);

        virtualinvoke r0.<org.apache.batik.parser.TransformListParser: void skipTransform()>();

        return;

     label02:
        $r3 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader>;

        $i4 = virtualinvoke $r3.<java.io.Reader: int read()>();

        r0.<org.apache.batik.parser.AbstractParser: int current> = $i4;

        $i5 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        if $i5 == 110 goto label03;

        $i29 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void reportCharacterExpectedError(char,int)>(110, $i29);

        virtualinvoke r0.<org.apache.batik.parser.TransformListParser: void skipTransform()>();

        return;

     label03:
        $r4 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader>;

        $i6 = virtualinvoke $r4.<java.io.Reader: int read()>();

        r0.<org.apache.batik.parser.AbstractParser: int current> = $i6;

        $i7 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        if $i7 == 115 goto label04;

        $i28 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void reportCharacterExpectedError(char,int)>(115, $i28);

        virtualinvoke r0.<org.apache.batik.parser.TransformListParser: void skipTransform()>();

        return;

     label04:
        $r5 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader>;

        $i8 = virtualinvoke $r5.<java.io.Reader: int read()>();

        r0.<org.apache.batik.parser.AbstractParser: int current> = $i8;

        $i9 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        if $i9 == 108 goto label05;

        $i27 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void reportCharacterExpectedError(char,int)>(108, $i27);

        virtualinvoke r0.<org.apache.batik.parser.TransformListParser: void skipTransform()>();

        return;

     label05:
        $r6 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader>;

        $i10 = virtualinvoke $r6.<java.io.Reader: int read()>();

        r0.<org.apache.batik.parser.AbstractParser: int current> = $i10;

        $i11 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        if $i11 == 97 goto label06;

        $i26 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void reportCharacterExpectedError(char,int)>(97, $i26);

        virtualinvoke r0.<org.apache.batik.parser.TransformListParser: void skipTransform()>();

        return;

     label06:
        $r7 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader>;

        $i12 = virtualinvoke $r7.<java.io.Reader: int read()>();

        r0.<org.apache.batik.parser.AbstractParser: int current> = $i12;

        $i13 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        if $i13 == 116 goto label07;

        $i25 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void reportCharacterExpectedError(char,int)>(116, $i25);

        virtualinvoke r0.<org.apache.batik.parser.TransformListParser: void skipTransform()>();

        return;

     label07:
        $r8 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader>;

        $i14 = virtualinvoke $r8.<java.io.Reader: int read()>();

        r0.<org.apache.batik.parser.AbstractParser: int current> = $i14;

        $i15 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        if $i15 == 101 goto label08;

        $i24 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void reportCharacterExpectedError(char,int)>(101, $i24);

        virtualinvoke r0.<org.apache.batik.parser.TransformListParser: void skipTransform()>();

        return;

     label08:
        $r9 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader>;

        $i16 = virtualinvoke $r9.<java.io.Reader: int read()>();

        r0.<org.apache.batik.parser.AbstractParser: int current> = $i16;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipSpaces()>();

        $i17 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        if $i17 == 40 goto label09;

        $i23 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void reportCharacterExpectedError(char,int)>(40, $i23);

        virtualinvoke r0.<org.apache.batik.parser.TransformListParser: void skipTransform()>();

        return;

     label09:
        $r10 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader>;

        $i18 = virtualinvoke $r10.<java.io.Reader: int read()>();

        r0.<org.apache.batik.parser.AbstractParser: int current> = $i18;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipSpaces()>();

        $f0 = virtualinvoke r0.<org.apache.batik.parser.NumberParser: float parseFloat()>();

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipSpaces()>();

        $i19 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        lookupswitch($i19)
        {
            case 41: goto label10;
            case 44: goto label11;
            default: goto label12;
        };

     label10:
        $r13 = r0.<org.apache.batik.parser.TransformListParser: org.apache.batik.parser.TransformListHandler transformListHandler>;

        interfaceinvoke $r13.<org.apache.batik.parser.TransformListHandler: void translate(float)>($f0);

        return;

     label11:
        $r11 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader>;

        $i20 = virtualinvoke $r11.<java.io.Reader: int read()>();

        r0.<org.apache.batik.parser.AbstractParser: int current> = $i20;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipSpaces()>();

     label12:
        $f1 = virtualinvoke r0.<org.apache.batik.parser.NumberParser: float parseFloat()>();

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipSpaces()>();

        $i21 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        if $i21 == 41 goto label13;

        $i22 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void reportCharacterExpectedError(char,int)>(41, $i22);

        virtualinvoke r0.<org.apache.batik.parser.TransformListParser: void skipTransform()>();

        return;

     label13:
        $r12 = r0.<org.apache.batik.parser.TransformListParser: org.apache.batik.parser.TransformListHandler transformListHandler>;

        interfaceinvoke $r12.<org.apache.batik.parser.TransformListHandler: void translate(float,float)>($f0, $f1);

        return;
    }

    protected void parseScale() throws org.apache.batik.parser.ParseException, java.io.IOException
    {
        org.apache.batik.parser.TransformListParser r0;
        org.apache.batik.util.io.NormalizingReader $r1, $r2, $r3, $r4, $r5, $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16;
        org.apache.batik.parser.TransformListHandler $r7, $r8;
        float $f0, $f1;

        r0 := @this: org.apache.batik.parser.TransformListParser;

        $r1 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader>;

        $i0 = virtualinvoke $r1.<java.io.Reader: int read()>();

        r0.<org.apache.batik.parser.AbstractParser: int current> = $i0;

        $i1 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        if $i1 == 97 goto label1;

        $i16 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void reportCharacterExpectedError(char,int)>(97, $i16);

        virtualinvoke r0.<org.apache.batik.parser.TransformListParser: void skipTransform()>();

        return;

     label1:
        $r2 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader>;

        $i2 = virtualinvoke $r2.<java.io.Reader: int read()>();

        r0.<org.apache.batik.parser.AbstractParser: int current> = $i2;

        $i3 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        if $i3 == 108 goto label2;

        $i15 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void reportCharacterExpectedError(char,int)>(108, $i15);

        virtualinvoke r0.<org.apache.batik.parser.TransformListParser: void skipTransform()>();

        return;

     label2:
        $r3 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader>;

        $i4 = virtualinvoke $r3.<java.io.Reader: int read()>();

        r0.<org.apache.batik.parser.AbstractParser: int current> = $i4;

        $i5 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        if $i5 == 101 goto label3;

        $i14 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void reportCharacterExpectedError(char,int)>(101, $i14);

        virtualinvoke r0.<org.apache.batik.parser.TransformListParser: void skipTransform()>();

        return;

     label3:
        $r4 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader>;

        $i6 = virtualinvoke $r4.<java.io.Reader: int read()>();

        r0.<org.apache.batik.parser.AbstractParser: int current> = $i6;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipSpaces()>();

        $i7 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        if $i7 == 40 goto label4;

        $i13 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void reportCharacterExpectedError(char,int)>(40, $i13);

        virtualinvoke r0.<org.apache.batik.parser.TransformListParser: void skipTransform()>();

        return;

     label4:
        $r5 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader>;

        $i8 = virtualinvoke $r5.<java.io.Reader: int read()>();

        r0.<org.apache.batik.parser.AbstractParser: int current> = $i8;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipSpaces()>();

        $f0 = virtualinvoke r0.<org.apache.batik.parser.NumberParser: float parseFloat()>();

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipSpaces()>();

        $i9 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        lookupswitch($i9)
        {
            case 41: goto label5;
            case 44: goto label6;
            default: goto label7;
        };

     label5:
        $r8 = r0.<org.apache.batik.parser.TransformListParser: org.apache.batik.parser.TransformListHandler transformListHandler>;

        interfaceinvoke $r8.<org.apache.batik.parser.TransformListHandler: void scale(float)>($f0);

        return;

     label6:
        $r6 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader>;

        $i10 = virtualinvoke $r6.<java.io.Reader: int read()>();

        r0.<org.apache.batik.parser.AbstractParser: int current> = $i10;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipSpaces()>();

     label7:
        $f1 = virtualinvoke r0.<org.apache.batik.parser.NumberParser: float parseFloat()>();

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipSpaces()>();

        $i11 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        if $i11 == 41 goto label8;

        $i12 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void reportCharacterExpectedError(char,int)>(41, $i12);

        virtualinvoke r0.<org.apache.batik.parser.TransformListParser: void skipTransform()>();

        return;

     label8:
        $r7 = r0.<org.apache.batik.parser.TransformListParser: org.apache.batik.parser.TransformListHandler transformListHandler>;

        interfaceinvoke $r7.<org.apache.batik.parser.TransformListHandler: void scale(float,float)>($f0, $f1);

        return;
    }

    protected void parseSkew() throws org.apache.batik.parser.ParseException, java.io.IOException
    {
        org.apache.batik.parser.TransformListParser r0;
        org.apache.batik.util.io.NormalizingReader $r1, $r2, $r3, $r4, $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        boolean z0;
        org.apache.batik.parser.TransformListHandler $r6, $r7;
        float $f0;

        r0 := @this: org.apache.batik.parser.TransformListParser;

        $r1 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader>;

        $i0 = virtualinvoke $r1.<java.io.Reader: int read()>();

        r0.<org.apache.batik.parser.AbstractParser: int current> = $i0;

        $i1 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        if $i1 == 101 goto label01;

        $i14 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void reportCharacterExpectedError(char,int)>(101, $i14);

        virtualinvoke r0.<org.apache.batik.parser.TransformListParser: void skipTransform()>();

        return;

     label01:
        $r2 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader>;

        $i2 = virtualinvoke $r2.<java.io.Reader: int read()>();

        r0.<org.apache.batik.parser.AbstractParser: int current> = $i2;

        $i3 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        if $i3 == 119 goto label02;

        $i13 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void reportCharacterExpectedError(char,int)>(119, $i13);

        virtualinvoke r0.<org.apache.batik.parser.TransformListParser: void skipTransform()>();

        return;

     label02:
        $r3 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader>;

        $i4 = virtualinvoke $r3.<java.io.Reader: int read()>();

        r0.<org.apache.batik.parser.AbstractParser: int current> = $i4;

        z0 = 0;

        $i5 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        lookupswitch($i5)
        {
            case 88: goto label03;
            case 89: goto label04;
            default: goto label05;
        };

     label03:
        z0 = 1;

     label04:
        goto label06;

     label05:
        $i12 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void reportCharacterExpectedError(char,int)>(88, $i12);

        virtualinvoke r0.<org.apache.batik.parser.TransformListParser: void skipTransform()>();

        return;

     label06:
        $r4 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader>;

        $i6 = virtualinvoke $r4.<java.io.Reader: int read()>();

        r0.<org.apache.batik.parser.AbstractParser: int current> = $i6;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipSpaces()>();

        $i7 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        if $i7 == 40 goto label07;

        $i11 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void reportCharacterExpectedError(char,int)>(40, $i11);

        virtualinvoke r0.<org.apache.batik.parser.TransformListParser: void skipTransform()>();

        return;

     label07:
        $r5 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader>;

        $i8 = virtualinvoke $r5.<java.io.Reader: int read()>();

        r0.<org.apache.batik.parser.AbstractParser: int current> = $i8;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipSpaces()>();

        $f0 = virtualinvoke r0.<org.apache.batik.parser.NumberParser: float parseFloat()>();

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipSpaces()>();

        $i9 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        if $i9 == 41 goto label08;

        $i10 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void reportCharacterExpectedError(char,int)>(41, $i10);

        virtualinvoke r0.<org.apache.batik.parser.TransformListParser: void skipTransform()>();

        return;

     label08:
        if z0 == 0 goto label09;

        $r7 = r0.<org.apache.batik.parser.TransformListParser: org.apache.batik.parser.TransformListHandler transformListHandler>;

        interfaceinvoke $r7.<org.apache.batik.parser.TransformListHandler: void skewX(float)>($f0);

        goto label10;

     label09:
        $r6 = r0.<org.apache.batik.parser.TransformListParser: org.apache.batik.parser.TransformListHandler transformListHandler>;

        interfaceinvoke $r6.<org.apache.batik.parser.TransformListHandler: void skewY(float)>($f0);

     label10:
        return;
    }

    protected void skipTransform() throws java.io.IOException
    {
        org.apache.batik.parser.TransformListParser r0;
        int $i0, $i1, $i2, $i4;
        org.apache.batik.util.io.NormalizingReader $r1;

        r0 := @this: org.apache.batik.parser.TransformListParser;

        goto label1;

     label1:
        $r1 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader>;

        $i0 = virtualinvoke $r1.<java.io.Reader: int read()>();

        r0.<org.apache.batik.parser.AbstractParser: int current> = $i0;

        $i1 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        lookupswitch($i1)
        {
            case 41: goto label2;
            default: goto label3;
        };

     label2:
        goto label4;

     label3:
        $i2 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        $i4 = (int) -1;

        if $i2 != $i4 goto label1;

        goto label4;

     label4:
        return;
    }
}
