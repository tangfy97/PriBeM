public final class org.joda.time.Partial extends org.joda.time.base.AbstractPartial implements org.joda.time.ReadablePartial, java.io.Serializable
{
    private static final long serialVersionUID;
    private final org.joda.time.Chronology iChronology;
    private final org.joda.time.DateTimeFieldType[] iTypes;
    private final int[] iValues;
    private transient org.joda.time.format.DateTimeFormatter[] iFormatter;

    public void <init>()
    {
        org.joda.time.Partial r0;

        r0 := @this: org.joda.time.Partial;

        specialinvoke r0.<org.joda.time.Partial: void <init>(org.joda.time.Chronology)>(null);

        return;
    }

    public void <init>(org.joda.time.Chronology)
    {
        org.joda.time.Partial r0;
        org.joda.time.DateTimeFieldType[] $r4;
        int[] $r5;
        org.joda.time.Chronology r1, $r2, $r3;

        r0 := @this: org.joda.time.Partial;

        r1 := @parameter0: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.base.AbstractPartial: void <init>()>();

        $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1);

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>();

        r0.<org.joda.time.Partial: org.joda.time.Chronology iChronology> = $r3;

        $r4 = newarray (org.joda.time.DateTimeFieldType)[0];

        r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes> = $r4;

        $r5 = newarray (int)[0];

        r0.<org.joda.time.Partial: int[] iValues> = $r5;

        return;
    }

    public void <init>(org.joda.time.DateTimeFieldType, int)
    {
        int i0;
        org.joda.time.Partial r0;
        org.joda.time.DateTimeFieldType r1;

        r0 := @this: org.joda.time.Partial;

        r1 := @parameter0: org.joda.time.DateTimeFieldType;

        i0 := @parameter1: int;

        specialinvoke r0.<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType,int,org.joda.time.Chronology)>(r1, i0, null);

        return;
    }

    public void <init>(org.joda.time.DateTimeFieldType, int, org.joda.time.Chronology)
    {
        org.joda.time.Partial r0;
        org.joda.time.Chronology $r1, $r2, r8;
        java.lang.IllegalArgumentException $r7;
        org.joda.time.DateTimeFieldType[] $r4;
        int[] $r5, $r6;
        int i0;
        org.joda.time.DateTimeFieldType r3;

        r0 := @this: org.joda.time.Partial;

        r3 := @parameter0: org.joda.time.DateTimeFieldType;

        i0 := @parameter1: int;

        r8 := @parameter2: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.base.AbstractPartial: void <init>()>();

        $r1 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r8);

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>();

        r0.<org.joda.time.Partial: org.joda.time.Chronology iChronology> = $r2;

        if r3 != null goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The field type must not be null");

        throw $r7;

     label1:
        $r4 = newarray (org.joda.time.DateTimeFieldType)[1];

        $r4[0] = r3;

        r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes> = $r4;

        $r5 = newarray (int)[1];

        $r5[0] = i0;

        r0.<org.joda.time.Partial: int[] iValues> = $r5;

        $r6 = r0.<org.joda.time.Partial: int[] iValues>;

        virtualinvoke $r2.<org.joda.time.Chronology: void validate(org.joda.time.ReadablePartial,int[])>(r0, $r6);

        return;
    }

    public void <init>(org.joda.time.DateTimeFieldType[], int[])
    {
        org.joda.time.Partial r0;
        org.joda.time.DateTimeFieldType[] r1;
        int[] r2;

        r0 := @this: org.joda.time.Partial;

        r1 := @parameter0: org.joda.time.DateTimeFieldType[];

        r2 := @parameter1: int[];

        specialinvoke r0.<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>(r1, r2, null);

        return;
    }

    public void <init>(org.joda.time.DateTimeFieldType[], int[], org.joda.time.Chronology)
    {
        org.joda.time.DateTimeFieldType r9, $r16, $r23, $r26, $r42, $r52, $r66;
        java.lang.StringBuffer $r14, $r15, $r18, $r19, $r21, $r34, $r35, $r37, $r40, $r41, $r44, $r45, $r47, $r50, $r51, $r54, $r55, $r57, $r61, $r62, $r64, $r68, $r69, $r70;
        java.lang.String $r17, $r20, $r22, $r36, $r38, $r43, $r46, $r48, $r53, $r56, $r58, $r63, $r65, $r71;
        int[] r4, $r8;
        boolean $z0;
        org.joda.time.Partial r0;
        org.joda.time.DurationFieldType $r10, $r24, $r25, $r27, $r30, $r59;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, i14;
        org.joda.time.DurationField $r12, $r29, $r32, r76;
        org.joda.time.Chronology $r1, $r2, $r11, $r28, $r31, r75;
        java.lang.IllegalArgumentException $r13, $r33, $r39, $r49, $r60, $r67, $r72, $r73, $r74;
        org.joda.time.DateTimeFieldType[] r3, $r6;
        java.lang.Object $r5, $r7;

        r0 := @this: org.joda.time.Partial;

        r3 := @parameter0: org.joda.time.DateTimeFieldType[];

        r4 := @parameter1: int[];

        r75 := @parameter2: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.base.AbstractPartial: void <init>()>();

        $r1 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r75);

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>();

        r0.<org.joda.time.Partial: org.joda.time.Chronology iChronology> = $r2;

        if r3 != null goto label01;

        $r74 = new java.lang.IllegalArgumentException;

        specialinvoke $r74.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Types array must not be null");

        throw $r74;

     label01:
        if r4 != null goto label02;

        $r73 = new java.lang.IllegalArgumentException;

        specialinvoke $r73.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Values array must not be null");

        throw $r73;

     label02:
        $i1 = lengthof r4;

        $i0 = lengthof r3;

        if $i1 == $i0 goto label03;

        $r72 = new java.lang.IllegalArgumentException;

        specialinvoke $r72.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Values array must be the same length as the types array");

        throw $r72;

     label03:
        $i2 = lengthof r3;

        if $i2 != 0 goto label04;

        r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes> = r3;

        r0.<org.joda.time.Partial: int[] iValues> = r4;

        return;

     label04:
        i13 = 0;

     label05:
        $i3 = lengthof r3;

        if i13 >= $i3 goto label07;

        $r66 = r3[i13];

        if $r66 != null goto label06;

        $r67 = new java.lang.IllegalArgumentException;

        $r68 = new java.lang.StringBuffer;

        specialinvoke $r68.<java.lang.StringBuffer: void <init>()>();

        $r69 = virtualinvoke $r68.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Types array must not contain null: index ");

        $r70 = virtualinvoke $r69.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i13);

        $r71 = virtualinvoke $r70.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r67.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r71);

        throw $r67;

     label06:
        i13 = i13 + 1;

        goto label05;

     label07:
        r76 = null;

        i14 = 0;

     label08:
        $i4 = lengthof r3;

        if i14 >= $i4 goto label15;

        r9 = r3[i14];

        $r10 = virtualinvoke r9.<org.joda.time.DateTimeFieldType: org.joda.time.DurationFieldType getDurationType()>();

        $r11 = r0.<org.joda.time.Partial: org.joda.time.Chronology iChronology>;

        $r12 = virtualinvoke $r10.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>($r11);

        if i14 <= 0 goto label14;

        $i5 = virtualinvoke r76.<org.joda.time.DurationField: int compareTo(java.lang.Object)>($r12);

        if $i5 < 0 goto label09;

        if $i5 == 0 goto label10;

        $z0 = virtualinvoke $r12.<org.joda.time.DurationField: boolean isSupported()>();

        if $z0 != 0 goto label10;

     label09:
        $r13 = new java.lang.IllegalArgumentException;

        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Types array must be in order largest-smallest: ");

        $i6 = i14 - 1;

        $r16 = r3[$i6];

        $r17 = virtualinvoke $r16.<org.joda.time.DateTimeFieldType: java.lang.String getName()>();

        $r18 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" < ");

        $r20 = virtualinvoke r9.<org.joda.time.DateTimeFieldType: java.lang.String getName()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r22);

        throw $r13;

     label10:
        if $i5 != 0 goto label14;

        $i7 = i14 - 1;

        $r23 = r3[$i7];

        $r24 = virtualinvoke $r23.<org.joda.time.DateTimeFieldType: org.joda.time.DurationFieldType getRangeDurationType()>();

        if $r24 != null goto label11;

        $r59 = virtualinvoke r9.<org.joda.time.DateTimeFieldType: org.joda.time.DurationFieldType getRangeDurationType()>();

        if $r59 != null goto label14;

        $r60 = new java.lang.IllegalArgumentException;

        $r61 = new java.lang.StringBuffer;

        specialinvoke $r61.<java.lang.StringBuffer: void <init>()>();

        $r62 = virtualinvoke $r61.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Types array must not contain duplicate: ");

        $r63 = virtualinvoke r9.<org.joda.time.DateTimeFieldType: java.lang.String getName()>();

        $r64 = virtualinvoke $r62.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r63);

        $r65 = virtualinvoke $r64.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r60.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r65);

        throw $r60;

     label11:
        $r25 = virtualinvoke r9.<org.joda.time.DateTimeFieldType: org.joda.time.DurationFieldType getRangeDurationType()>();

        if $r25 != null goto label12;

        $r49 = new java.lang.IllegalArgumentException;

        $r50 = new java.lang.StringBuffer;

        specialinvoke $r50.<java.lang.StringBuffer: void <init>()>();

        $r51 = virtualinvoke $r50.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Types array must be in order largest-smallest: ");

        $i12 = i14 - 1;

        $r52 = r3[$i12];

        $r53 = virtualinvoke $r52.<org.joda.time.DateTimeFieldType: java.lang.String getName()>();

        $r54 = virtualinvoke $r51.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r53);

        $r55 = virtualinvoke $r54.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" < ");

        $r56 = virtualinvoke r9.<org.joda.time.DateTimeFieldType: java.lang.String getName()>();

        $r57 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r56);

        $r58 = virtualinvoke $r57.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r49.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r58);

        throw $r49;

     label12:
        $i8 = i14 - 1;

        $r26 = r3[$i8];

        $r27 = virtualinvoke $r26.<org.joda.time.DateTimeFieldType: org.joda.time.DurationFieldType getRangeDurationType()>();

        $r28 = r0.<org.joda.time.Partial: org.joda.time.Chronology iChronology>;

        $r29 = virtualinvoke $r27.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>($r28);

        $r30 = virtualinvoke r9.<org.joda.time.DateTimeFieldType: org.joda.time.DurationFieldType getRangeDurationType()>();

        $r31 = r0.<org.joda.time.Partial: org.joda.time.Chronology iChronology>;

        $r32 = virtualinvoke $r30.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>($r31);

        $i9 = virtualinvoke $r29.<org.joda.time.DurationField: int compareTo(java.lang.Object)>($r32);

        if $i9 >= 0 goto label13;

        $r39 = new java.lang.IllegalArgumentException;

        $r40 = new java.lang.StringBuffer;

        specialinvoke $r40.<java.lang.StringBuffer: void <init>()>();

        $r41 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Types array must be in order largest-smallest: ");

        $i11 = i14 - 1;

        $r42 = r3[$i11];

        $r43 = virtualinvoke $r42.<org.joda.time.DateTimeFieldType: java.lang.String getName()>();

        $r44 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r43);

        $r45 = virtualinvoke $r44.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" < ");

        $r46 = virtualinvoke r9.<org.joda.time.DateTimeFieldType: java.lang.String getName()>();

        $r47 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r46);

        $r48 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r39.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r48);

        throw $r39;

     label13:
        $i10 = virtualinvoke $r29.<org.joda.time.DurationField: int compareTo(java.lang.Object)>($r32);

        if $i10 != 0 goto label14;

        $r33 = new java.lang.IllegalArgumentException;

        $r34 = new java.lang.StringBuffer;

        specialinvoke $r34.<java.lang.StringBuffer: void <init>()>();

        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Types array must not contain duplicate: ");

        $r36 = virtualinvoke r9.<org.joda.time.DateTimeFieldType: java.lang.String getName()>();

        $r37 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r36);

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r33.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r38);

        throw $r33;

     label14:
        r76 = $r12;

        i14 = i14 + 1;

        goto label08;

     label15:
        $r5 = virtualinvoke r3.<java.lang.Object: java.lang.Object clone()>();

        $r6 = (org.joda.time.DateTimeFieldType[]) $r5;

        r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes> = $r6;

        virtualinvoke $r2.<org.joda.time.Chronology: void validate(org.joda.time.ReadablePartial,int[])>(r0, r4);

        $r7 = virtualinvoke r4.<java.lang.Object: java.lang.Object clone()>();

        $r8 = (int[]) $r7;

        r0.<org.joda.time.Partial: int[] iValues> = $r8;

        return;
    }

    public void <init>(org.joda.time.ReadablePartial)
    {
        int[] $r6, $r9;
        int $i0, $i1, $i2, $i3, i4;
        org.joda.time.DateTimeFieldType $r8;
        org.joda.time.Partial r0;
        org.joda.time.Chronology $r2, $r3, $r4;
        java.lang.IllegalArgumentException $r10;
        org.joda.time.DateTimeFieldType[] $r5, $r7;
        org.joda.time.ReadablePartial r1;

        r0 := @this: org.joda.time.Partial;

        r1 := @parameter0: org.joda.time.ReadablePartial;

        specialinvoke r0.<org.joda.time.base.AbstractPartial: void <init>()>();

        if r1 != null goto label1;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The partial must not be null");

        throw $r10;

     label1:
        $r2 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.Chronology getChronology()>();

        $r3 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>($r2);

        $r4 = virtualinvoke $r3.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>();

        r0.<org.joda.time.Partial: org.joda.time.Chronology iChronology> = $r4;

        $i0 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int size()>();

        $r5 = newarray (org.joda.time.DateTimeFieldType)[$i0];

        r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes> = $r5;

        $i1 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int size()>();

        $r6 = newarray (int)[$i1];

        r0.<org.joda.time.Partial: int[] iValues> = $r6;

        i4 = 0;

     label2:
        $i2 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int size()>();

        if i4 >= $i2 goto label3;

        $r7 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>;

        $r8 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i4);

        $r7[i4] = $r8;

        $r9 = r0.<org.joda.time.Partial: int[] iValues>;

        $i3 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int getValue(int)>(i4);

        $r9[i4] = $i3;

        i4 = i4 + 1;

        goto label2;

     label3:
        return;
    }

    void <init>(org.joda.time.Partial, int[])
    {
        org.joda.time.Partial r0, r1;
        org.joda.time.DateTimeFieldType[] $r3;
        int[] r4;
        org.joda.time.Chronology $r2;

        r0 := @this: org.joda.time.Partial;

        r1 := @parameter0: org.joda.time.Partial;

        r4 := @parameter1: int[];

        specialinvoke r0.<org.joda.time.base.AbstractPartial: void <init>()>();

        $r2 = r1.<org.joda.time.Partial: org.joda.time.Chronology iChronology>;

        r0.<org.joda.time.Partial: org.joda.time.Chronology iChronology> = $r2;

        $r3 = r1.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>;

        r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes> = $r3;

        r0.<org.joda.time.Partial: int[] iValues> = r4;

        return;
    }

    void <init>(org.joda.time.Chronology, org.joda.time.DateTimeFieldType[], int[])
    {
        org.joda.time.Partial r0;
        org.joda.time.DateTimeFieldType[] r2;
        int[] r3;
        org.joda.time.Chronology r1;

        r0 := @this: org.joda.time.Partial;

        r1 := @parameter0: org.joda.time.Chronology;

        r2 := @parameter1: org.joda.time.DateTimeFieldType[];

        r3 := @parameter2: int[];

        specialinvoke r0.<org.joda.time.base.AbstractPartial: void <init>()>();

        r0.<org.joda.time.Partial: org.joda.time.Chronology iChronology> = r1;

        r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes> = r2;

        r0.<org.joda.time.Partial: int[] iValues> = r3;

        return;
    }

    public int size()
    {
        int $i0;
        org.joda.time.Partial r0;
        org.joda.time.DateTimeFieldType[] $r1;

        r0 := @this: org.joda.time.Partial;

        $r1 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public org.joda.time.Chronology getChronology()
    {
        org.joda.time.Chronology $r1;
        org.joda.time.Partial r0;

        r0 := @this: org.joda.time.Partial;

        $r1 = r0.<org.joda.time.Partial: org.joda.time.Chronology iChronology>;

        return $r1;
    }

    protected org.joda.time.DateTimeField getField(int, org.joda.time.Chronology)
    {
        org.joda.time.Partial r0;
        org.joda.time.DateTimeFieldType[] $r1;
        int i0;
        org.joda.time.Chronology r2;
        org.joda.time.DateTimeFieldType $r3;
        org.joda.time.DateTimeField $r4;

        r0 := @this: org.joda.time.Partial;

        i0 := @parameter0: int;

        r2 := @parameter1: org.joda.time.Chronology;

        $r1 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>;

        $r3 = $r1[i0];

        $r4 = virtualinvoke $r3.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>(r2);

        return $r4;
    }

    public org.joda.time.DateTimeFieldType getFieldType(int)
    {
        org.joda.time.Partial r0;
        org.joda.time.DateTimeFieldType[] $r1;
        int i0;
        org.joda.time.DateTimeFieldType $r2;

        r0 := @this: org.joda.time.Partial;

        i0 := @parameter0: int;

        $r1 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>;

        $r2 = $r1[i0];

        return $r2;
    }

    public org.joda.time.DateTimeFieldType[] getFieldTypes()
    {
        org.joda.time.Partial r0;
        org.joda.time.DateTimeFieldType[] $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.joda.time.Partial;

        $r1 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (org.joda.time.DateTimeFieldType[]) $r2;

        return $r3;
    }

    public int getValue(int)
    {
        org.joda.time.Partial r0;
        int[] $r1;
        int i0, $i1;

        r0 := @this: org.joda.time.Partial;

        i0 := @parameter0: int;

        $r1 = r0.<org.joda.time.Partial: int[] iValues>;

        $i1 = $r1[i0];

        return $i1;
    }

    public int[] getValues()
    {
        org.joda.time.Partial r0;
        int[] $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.joda.time.Partial;

        $r1 = r0.<org.joda.time.Partial: int[] iValues>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (int[]) $r2;

        return $r3;
    }

    public org.joda.time.Partial withChronologyRetainFields(org.joda.time.Chronology)
    {
        org.joda.time.Partial r2, $r4;
        org.joda.time.Chronology $r0, $r1, $r3, r8;
        int[] $r5, $r7;
        org.joda.time.DateTimeFieldType[] $r6;

        r2 := @this: org.joda.time.Partial;

        r8 := @parameter0: org.joda.time.Chronology;

        $r0 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r8);

        $r1 = virtualinvoke $r0.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>();

        $r3 = virtualinvoke r2.<org.joda.time.Partial: org.joda.time.Chronology getChronology()>();

        if $r1 != $r3 goto label1;

        return r2;

     label1:
        $r4 = new org.joda.time.Partial;

        $r6 = r2.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>;

        $r5 = r2.<org.joda.time.Partial: int[] iValues>;

        specialinvoke $r4.<org.joda.time.Partial: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeFieldType[],int[])>($r1, $r6, $r5);

        $r7 = r2.<org.joda.time.Partial: int[] iValues>;

        virtualinvoke $r1.<org.joda.time.Chronology: void validate(org.joda.time.ReadablePartial,int[])>($r4, $r7);

        return $r4;
    }

    public org.joda.time.Partial 'with'(org.joda.time.DateTimeFieldType, int)
    {
        int[] $r2, $r4, r7, $r26, $r28;
        org.joda.time.DateTimeFieldType r0, r24;
        org.joda.time.DateTimeField $r3;
        boolean $z0, $z1;
        org.joda.time.Partial r1, $r33, $r34;
        org.joda.time.DurationFieldType $r8, $r13, $r16, $r19;
        int $i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i19;
        org.joda.time.DurationField $r10, $r15, $r18, $r21;
        org.joda.time.Chronology $r9, $r14, $r17, $r20, $r30, $r31;
        java.lang.IllegalArgumentException $r32;
        org.joda.time.DateTimeFieldType[] $r6, $r11, $r12, r23, $r25, $r27;

        r1 := @this: org.joda.time.Partial;

        r0 := @parameter0: org.joda.time.DateTimeFieldType;

        i1 := @parameter1: int;

        if r0 != null goto label1;

        $r32 = new java.lang.IllegalArgumentException;

        specialinvoke $r32.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The field type must not be null");

        throw $r32;

     label1:
        $i0 = virtualinvoke r1.<org.joda.time.Partial: int indexOf(org.joda.time.DateTimeFieldType)>(r0);

        $i19 = (int) -1;

        if $i0 != $i19 goto label6;

        $r6 = r1.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>;

        $i3 = lengthof $r6;

        $i4 = $i3 + 1;

        r23 = newarray (org.joda.time.DateTimeFieldType)[$i4];

        $i5 = lengthof r23;

        r7 = newarray (int)[$i5];

        i9 = 0;

        $r8 = virtualinvoke r0.<org.joda.time.DateTimeFieldType: org.joda.time.DurationFieldType getDurationType()>();

        $r9 = r1.<org.joda.time.Partial: org.joda.time.Chronology iChronology>;

        $r10 = virtualinvoke $r8.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>($r9);

        $z0 = virtualinvoke $r10.<org.joda.time.DurationField: boolean isSupported()>();

        if $z0 == 0 goto label5;

     label2:
        $r11 = r1.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>;

        $i6 = lengthof $r11;

        if i9 >= $i6 goto label5;

        $r12 = r1.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>;

        r24 = $r12[i9];

        $r13 = virtualinvoke r24.<org.joda.time.DateTimeFieldType: org.joda.time.DurationFieldType getDurationType()>();

        $r14 = r1.<org.joda.time.Partial: org.joda.time.Chronology iChronology>;

        $r15 = virtualinvoke $r13.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>($r14);

        $z1 = virtualinvoke $r15.<org.joda.time.DurationField: boolean isSupported()>();

        if $z1 == 0 goto label4;

        $i7 = virtualinvoke $r10.<org.joda.time.DurationField: int compareTo(java.lang.Object)>($r15);

        if $i7 <= 0 goto label3;

        goto label5;

     label3:
        if $i7 != 0 goto label4;

        $r16 = virtualinvoke r0.<org.joda.time.DateTimeFieldType: org.joda.time.DurationFieldType getRangeDurationType()>();

        $r17 = r1.<org.joda.time.Partial: org.joda.time.Chronology iChronology>;

        $r18 = virtualinvoke $r16.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>($r17);

        $r19 = virtualinvoke r24.<org.joda.time.DateTimeFieldType: org.joda.time.DurationFieldType getRangeDurationType()>();

        $r20 = r1.<org.joda.time.Partial: org.joda.time.Chronology iChronology>;

        $r21 = virtualinvoke $r19.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>($r20);

        $i8 = virtualinvoke $r18.<org.joda.time.DurationField: int compareTo(java.lang.Object)>($r21);

        if $i8 <= 0 goto label4;

        goto label5;

     label4:
        i9 = i9 + 1;

        goto label2;

     label5:
        $r25 = r1.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r25, 0, r23, 0, i9);

        $r26 = r1.<org.joda.time.Partial: int[] iValues>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r26, 0, r7, 0, i9);

        r23[i9] = r0;

        r7[i9] = i1;

        $r27 = r1.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>;

        $i10 = i9 + 1;

        $i11 = lengthof r23;

        $i12 = $i11 - i9;

        $i13 = $i12 - 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r27, i9, r23, $i10, $i13);

        $r28 = r1.<org.joda.time.Partial: int[] iValues>;

        $i14 = i9 + 1;

        $i15 = lengthof r7;

        $i16 = $i15 - i9;

        $i17 = $i16 - 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r28, i9, r7, $i14, $i17);

        $r33 = new org.joda.time.Partial;

        $r30 = r1.<org.joda.time.Partial: org.joda.time.Chronology iChronology>;

        specialinvoke $r33.<org.joda.time.Partial: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeFieldType[],int[])>($r30, r23, r7);

        $r31 = r1.<org.joda.time.Partial: org.joda.time.Chronology iChronology>;

        virtualinvoke $r31.<org.joda.time.Chronology: void validate(org.joda.time.ReadablePartial,int[])>($r33, r7);

        return $r33;

     label6:
        $i2 = virtualinvoke r1.<org.joda.time.Partial: int getValue(int)>($i0);

        if i1 != $i2 goto label7;

        return r1;

     label7:
        $r2 = virtualinvoke r1.<org.joda.time.Partial: int[] getValues()>();

        $r3 = virtualinvoke r1.<org.joda.time.Partial: org.joda.time.DateTimeField getField(int)>($i0);

        $r4 = virtualinvoke $r3.<org.joda.time.DateTimeField: int[] set(org.joda.time.ReadablePartial,int,int[],int)>(r1, $i0, $r2, i1);

        $r34 = new org.joda.time.Partial;

        specialinvoke $r34.<org.joda.time.Partial: void <init>(org.joda.time.Partial,int[])>(r1, $r4);

        return $r34;
    }

    public org.joda.time.Partial without(org.joda.time.DateTimeFieldType)
    {
        int[] r3, $r6, $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i12;
        org.joda.time.DateTimeFieldType r1;
        org.joda.time.Partial r0, $r11;
        org.joda.time.Chronology $r9, $r10;
        org.joda.time.DateTimeFieldType[] r2, $r4, $r5;

        r0 := @this: org.joda.time.Partial;

        r1 := @parameter0: org.joda.time.DateTimeFieldType;

        $i0 = virtualinvoke r0.<org.joda.time.Partial: int indexOf(org.joda.time.DateTimeFieldType)>(r1);

        $i12 = (int) -1;

        if $i0 == $i12 goto label1;

        $i1 = virtualinvoke r0.<org.joda.time.Partial: int size()>();

        $i2 = $i1 - 1;

        r2 = newarray (org.joda.time.DateTimeFieldType)[$i2];

        $i3 = virtualinvoke r0.<org.joda.time.Partial: int size()>();

        $i4 = $i3 - 1;

        r3 = newarray (int)[$i4];

        $r4 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r2, 0, $i0);

        $r5 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>;

        $i7 = $i0 + 1;

        $i5 = lengthof r2;

        $i6 = $i5 - $i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, $i7, r2, $i0, $i6);

        $r6 = r0.<org.joda.time.Partial: int[] iValues>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, r3, 0, $i0);

        $r7 = r0.<org.joda.time.Partial: int[] iValues>;

        $i10 = $i0 + 1;

        $i8 = lengthof r3;

        $i9 = $i8 - $i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, $i10, r3, $i0, $i9);

        $r11 = new org.joda.time.Partial;

        $r9 = r0.<org.joda.time.Partial: org.joda.time.Chronology iChronology>;

        specialinvoke $r11.<org.joda.time.Partial: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeFieldType[],int[])>($r9, r2, r3);

        $r10 = r0.<org.joda.time.Partial: org.joda.time.Chronology iChronology>;

        virtualinvoke $r10.<org.joda.time.Chronology: void validate(org.joda.time.ReadablePartial,int[])>($r11, r3);

        return $r11;

     label1:
        return r0;
    }

    public org.joda.time.Partial withField(org.joda.time.DateTimeFieldType, int)
    {
        org.joda.time.Partial r0, $r5;
        int[] $r2, $r4;
        int $i0, i1, $i2;
        org.joda.time.DateTimeFieldType r1;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.Partial;

        r1 := @parameter0: org.joda.time.DateTimeFieldType;

        i1 := @parameter1: int;

        $i0 = virtualinvoke r0.<org.joda.time.Partial: int indexOfSupported(org.joda.time.DateTimeFieldType)>(r1);

        $i2 = virtualinvoke r0.<org.joda.time.Partial: int getValue(int)>($i0);

        if i1 != $i2 goto label1;

        return r0;

     label1:
        $r2 = virtualinvoke r0.<org.joda.time.Partial: int[] getValues()>();

        $r3 = virtualinvoke r0.<org.joda.time.Partial: org.joda.time.DateTimeField getField(int)>($i0);

        $r4 = virtualinvoke $r3.<org.joda.time.DateTimeField: int[] set(org.joda.time.ReadablePartial,int,int[],int)>(r0, $i0, $r2, i1);

        $r5 = new org.joda.time.Partial;

        specialinvoke $r5.<org.joda.time.Partial: void <init>(org.joda.time.Partial,int[])>(r0, $r4);

        return $r5;
    }

    public org.joda.time.Partial withFieldAdded(org.joda.time.DurationFieldType, int)
    {
        org.joda.time.Partial r0, $r5;
        int[] $r2, $r4;
        org.joda.time.DurationFieldType r1;
        int $i0, i1;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.Partial;

        r1 := @parameter0: org.joda.time.DurationFieldType;

        i1 := @parameter1: int;

        $i0 = virtualinvoke r0.<org.joda.time.Partial: int indexOfSupported(org.joda.time.DurationFieldType)>(r1);

        if i1 != 0 goto label1;

        return r0;

     label1:
        $r2 = virtualinvoke r0.<org.joda.time.Partial: int[] getValues()>();

        $r3 = virtualinvoke r0.<org.joda.time.Partial: org.joda.time.DateTimeField getField(int)>($i0);

        $r4 = virtualinvoke $r3.<org.joda.time.DateTimeField: int[] add(org.joda.time.ReadablePartial,int,int[],int)>(r0, $i0, $r2, i1);

        $r5 = new org.joda.time.Partial;

        specialinvoke $r5.<org.joda.time.Partial: void <init>(org.joda.time.Partial,int[])>(r0, $r4);

        return $r5;
    }

    public org.joda.time.Partial withFieldAddWrapped(org.joda.time.DurationFieldType, int)
    {
        org.joda.time.Partial r0, $r5;
        int[] $r2, $r4;
        org.joda.time.DurationFieldType r1;
        int $i0, i1;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.Partial;

        r1 := @parameter0: org.joda.time.DurationFieldType;

        i1 := @parameter1: int;

        $i0 = virtualinvoke r0.<org.joda.time.Partial: int indexOfSupported(org.joda.time.DurationFieldType)>(r1);

        if i1 != 0 goto label1;

        return r0;

     label1:
        $r2 = virtualinvoke r0.<org.joda.time.Partial: int[] getValues()>();

        $r3 = virtualinvoke r0.<org.joda.time.Partial: org.joda.time.DateTimeField getField(int)>($i0);

        $r4 = virtualinvoke $r3.<org.joda.time.DateTimeField: int[] addWrapPartial(org.joda.time.ReadablePartial,int,int[],int)>(r0, $i0, $r2, i1);

        $r5 = new org.joda.time.Partial;

        specialinvoke $r5.<org.joda.time.Partial: void <init>(org.joda.time.Partial,int[])>(r0, $r4);

        return $r5;
    }

    public org.joda.time.Partial withPeriodAdded(org.joda.time.ReadablePeriod, int)
    {
        org.joda.time.Partial r1, $r2;
        org.joda.time.ReadablePeriod r0;
        int[] r5;
        org.joda.time.DurationFieldType $r3;
        int i0, $i1, $i2, $i3, $i4, i5;
        org.joda.time.DateTimeField $r4;

        r1 := @this: org.joda.time.Partial;

        r0 := @parameter0: org.joda.time.ReadablePeriod;

        i0 := @parameter1: int;

        if r0 == null goto label1;

        if i0 != 0 goto label2;

     label1:
        return r1;

     label2:
        r5 = virtualinvoke r1.<org.joda.time.Partial: int[] getValues()>();

        i5 = 0;

     label3:
        $i1 = interfaceinvoke r0.<org.joda.time.ReadablePeriod: int size()>();

        if i5 >= $i1 goto label5;

        $r3 = interfaceinvoke r0.<org.joda.time.ReadablePeriod: org.joda.time.DurationFieldType getFieldType(int)>(i5);

        $i2 = virtualinvoke r1.<org.joda.time.Partial: int indexOf(org.joda.time.DurationFieldType)>($r3);

        if $i2 < 0 goto label4;

        $r4 = virtualinvoke r1.<org.joda.time.Partial: org.joda.time.DateTimeField getField(int)>($i2);

        $i3 = interfaceinvoke r0.<org.joda.time.ReadablePeriod: int getValue(int)>(i5);

        $i4 = staticinvoke <org.joda.time.field.FieldUtils: int safeMultiply(int,int)>($i3, i0);

        r5 = virtualinvoke $r4.<org.joda.time.DateTimeField: int[] add(org.joda.time.ReadablePartial,int,int[],int)>(r1, $i2, r5, $i4);

     label4:
        i5 = i5 + 1;

        goto label3;

     label5:
        $r2 = new org.joda.time.Partial;

        specialinvoke $r2.<org.joda.time.Partial: void <init>(org.joda.time.Partial,int[])>(r1, r5);

        return $r2;
    }

    public org.joda.time.Partial plus(org.joda.time.ReadablePeriod)
    {
        org.joda.time.Partial r0, $r2;
        org.joda.time.ReadablePeriod r1;

        r0 := @this: org.joda.time.Partial;

        r1 := @parameter0: org.joda.time.ReadablePeriod;

        $r2 = virtualinvoke r0.<org.joda.time.Partial: org.joda.time.Partial withPeriodAdded(org.joda.time.ReadablePeriod,int)>(r1, 1);

        return $r2;
    }

    public org.joda.time.Partial minus(org.joda.time.ReadablePeriod)
    {
        org.joda.time.Partial r0, $r2;
        org.joda.time.ReadablePeriod r1;
        int $i1;

        r0 := @this: org.joda.time.Partial;

        r1 := @parameter0: org.joda.time.ReadablePeriod;

        $i1 = (int) -1;

        $r2 = virtualinvoke r0.<org.joda.time.Partial: org.joda.time.Partial withPeriodAdded(org.joda.time.ReadablePeriod,int)>(r1, $i1);

        return $r2;
    }

    public org.joda.time.Partial$Property property(org.joda.time.DateTimeFieldType)
    {
        org.joda.time.Partial r1;
        int $i0;
        org.joda.time.DateTimeFieldType r2;
        org.joda.time.Partial$Property $r0;

        r1 := @this: org.joda.time.Partial;

        r2 := @parameter0: org.joda.time.DateTimeFieldType;

        $r0 = new org.joda.time.Partial$Property;

        $i0 = virtualinvoke r1.<org.joda.time.Partial: int indexOfSupported(org.joda.time.DateTimeFieldType)>(r2);

        specialinvoke $r0.<org.joda.time.Partial$Property: void <init>(org.joda.time.Partial,int)>(r1, $i0);

        return $r0;
    }

    public boolean isMatch(org.joda.time.ReadableInstant)
    {
        org.joda.time.Partial r2;
        org.joda.time.Chronology $r1;
        org.joda.time.ReadableInstant r0;
        long $l0;
        org.joda.time.DateTimeFieldType[] $r3, $r4;
        int[] $r7;
        int $i1, $i2, $i3, i4;
        org.joda.time.DateTimeFieldType $r5;
        org.joda.time.DateTimeField $r6;

        r2 := @this: org.joda.time.Partial;

        r0 := @parameter0: org.joda.time.ReadableInstant;

        $l0 = staticinvoke <org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>(r0);

        $r1 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>(r0);

        i4 = 0;

     label1:
        $r3 = r2.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>;

        $i1 = lengthof $r3;

        if i4 >= $i1 goto label3;

        $r4 = r2.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>;

        $r5 = $r4[i4];

        $r6 = virtualinvoke $r5.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r1);

        $i2 = virtualinvoke $r6.<org.joda.time.DateTimeField: int get(long)>($l0);

        $r7 = r2.<org.joda.time.Partial: int[] iValues>;

        $i3 = $r7[i4];

        if $i2 == $i3 goto label2;

        return 0;

     label2:
        i4 = i4 + 1;

        goto label1;

     label3:
        return 1;
    }

    public boolean isMatch(org.joda.time.ReadablePartial)
    {
        org.joda.time.Partial r1;
        java.lang.IllegalArgumentException $r6;
        org.joda.time.DateTimeFieldType[] $r2, $r3;
        int[] $r5;
        org.joda.time.ReadablePartial r0;
        int $i0, $i1, $i2, i3;
        org.joda.time.DateTimeFieldType $r4;

        r1 := @this: org.joda.time.Partial;

        r0 := @parameter0: org.joda.time.ReadablePartial;

        if r0 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The partial must not be null");

        throw $r6;

     label1:
        i3 = 0;

     label2:
        $r2 = r1.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>;

        $i0 = lengthof $r2;

        if i3 >= $i0 goto label4;

        $r3 = r1.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>;

        $r4 = $r3[i3];

        $i1 = interfaceinvoke r0.<org.joda.time.ReadablePartial: int get(org.joda.time.DateTimeFieldType)>($r4);

        $r5 = r1.<org.joda.time.Partial: int[] iValues>;

        $i2 = $r5[i3];

        if $i1 == $i2 goto label3;

        return 0;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        return 1;
    }

    public org.joda.time.format.DateTimeFormatter getFormatter()
    {
        org.joda.time.Partial r0;
        org.joda.time.format.DateTimeFormatter $r4, $r5, $r8;
        java.lang.IllegalArgumentException $r6;
        java.util.ArrayList $r1;
        java.util.List $r3;
        org.joda.time.DateTimeFieldType[] $r2;
        int $i0, $i1;
        org.joda.time.format.DateTimeFormatter[] r7;

        r0 := @this: org.joda.time.Partial;

        r7 = r0.<org.joda.time.Partial: org.joda.time.format.DateTimeFormatter[] iFormatter>;

        if r7 != null goto label6;

        $i0 = virtualinvoke r0.<org.joda.time.Partial: int size()>();

        if $i0 != 0 goto label1;

        return null;

     label1:
        r7 = newarray (org.joda.time.format.DateTimeFormatter)[2];

     label2:
        $r1 = new java.util.ArrayList;

        $r2 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>;

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>($r3);

        $r4 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>($r1, 1, 0);

        r7[0] = $r4;

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i1 != 0 goto label3;

        $r5 = r7[0];

        r7[1] = $r5;

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

     label5:
        r0.<org.joda.time.Partial: org.joda.time.format.DateTimeFormatter[] iFormatter> = r7;

     label6:
        $r8 = r7[0];

        return $r8;

        catch java.lang.IllegalArgumentException from label2 to label3 with label4;
    }

    public java.lang.String toString()
    {
        org.joda.time.Partial r0;
        org.joda.time.format.DateTimeFormatter $r3;
        org.joda.time.format.DateTimeFormatter[] r5;
        java.lang.String $r1, $r2, $r4;

        r0 := @this: org.joda.time.Partial;

        r5 = r0.<org.joda.time.Partial: org.joda.time.format.DateTimeFormatter[] iFormatter>;

        if r5 != null goto label1;

        virtualinvoke r0.<org.joda.time.Partial: org.joda.time.format.DateTimeFormatter getFormatter()>();

        r5 = r0.<org.joda.time.Partial: org.joda.time.format.DateTimeFormatter[] iFormatter>;

        if r5 != null goto label1;

        $r4 = virtualinvoke r0.<org.joda.time.Partial: java.lang.String toStringList()>();

        return $r4;

     label1:
        $r3 = r5[1];

        if $r3 != null goto label2;

        $r2 = virtualinvoke r0.<org.joda.time.Partial: java.lang.String toStringList()>();

        return $r2;

     label2:
        $r1 = virtualinvoke $r3.<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>(r0);

        return $r1;
    }

    public java.lang.String toStringList()
    {
        org.joda.time.Partial r0;
        org.joda.time.DateTimeFieldType[] $r3;
        int[] $r6;
        java.lang.StringBuffer $r1, $r7;
        int $i0, $i1, $i2, i3;
        org.joda.time.DateTimeFieldType $r4;
        java.lang.String $r2, $r5;

        r0 := @this: org.joda.time.Partial;

        $i0 = virtualinvoke r0.<org.joda.time.Partial: int size()>();

        $r1 = new java.lang.StringBuffer;

        $i1 = 20 * $i0;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>(int)>($i1);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(91);

        i3 = 0;

     label1:
        if i3 >= $i0 goto label3;

        if i3 <= 0 goto label2;

        $r7 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(44);

        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

     label2:
        $r3 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>;

        $r4 = $r3[i3];

        $r5 = virtualinvoke $r4.<org.joda.time.DateTimeFieldType: java.lang.String getName()>();

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(61);

        $r6 = r0.<org.joda.time.Partial: int[] iValues>;

        $i2 = $r6[i3];

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i2);

        i3 = i3 + 1;

        goto label1;

     label3:
        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(93);

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    public java.lang.String toString(java.lang.String)
    {
        org.joda.time.Partial r2;
        org.joda.time.format.DateTimeFormatter $r1;
        java.lang.String r0, $r3, $r4;

        r2 := @this: org.joda.time.Partial;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r4 = virtualinvoke r2.<org.joda.time.Partial: java.lang.String toString()>();

        return $r4;

     label1:
        $r1 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>(r0);

        $r3 = virtualinvoke $r1.<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>(r2);

        return $r3;
    }

    public java.lang.String toString(java.lang.String, java.util.Locale)
    {
        org.joda.time.Partial r4;
        org.joda.time.format.DateTimeFormatter $r1, $r3;
        java.util.Locale r2;
        java.lang.String r0, $r5, $r6;

        r4 := @this: org.joda.time.Partial;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Locale;

        if r0 != null goto label1;

        $r6 = virtualinvoke r4.<org.joda.time.Partial: java.lang.String toString()>();

        return $r6;

     label1:
        $r1 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>(r0);

        $r3 = virtualinvoke $r1.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withLocale(java.util.Locale)>(r2);

        $r5 = virtualinvoke $r3.<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>(r4);

        return $r5;
    }

    public static void <clinit>()
    {
        <org.joda.time.Partial: long serialVersionUID> = 12324121189002L;

        return;
    }
}
