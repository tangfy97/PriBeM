public class org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocResults extends java.lang.Object
{
    private static final org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocResults INSTANCE;
    private java.lang.ThreadLocal mRootsPerThread;
    static java.lang.Class class$org$apache$xmlbeans$impl$jam$internal$javadoc$JavadocResults;
    static java.lang.Class class$com$sun$javadoc$RootDoc;

    public void <init>()
    {
        java.lang.ThreadLocal $r1;
        org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocResults r0;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocResults;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.ThreadLocal;

        specialinvoke $r1.<java.lang.ThreadLocal: void <init>()>();

        r0.<org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocResults: java.lang.ThreadLocal mRootsPerThread> = $r1;

        return;
    }

    public static void prepare()
    {
        java.lang.Thread $r0;
        java.lang.Class $r1, $r3;
        java.lang.ClassLoader $r2;

        $r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r1 = <org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocResults: java.lang.Class class$org$apache$xmlbeans$impl$jam$internal$javadoc$JavadocResults>;

        if $r1 != null goto label1;

        $r3 = staticinvoke <org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocResults: java.lang.Class class$(java.lang.String)>("org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocResults");

        <org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocResults: java.lang.Class class$org$apache$xmlbeans$impl$jam$internal$javadoc$JavadocResults> = $r3;

        goto label2;

     label1:
        $r3 = <org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocResults: java.lang.Class class$org$apache$xmlbeans$impl$jam$internal$javadoc$JavadocResults>;

     label2:
        $r2 = virtualinvoke $r3.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        virtualinvoke $r0.<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>($r2);

        return;
    }

    public static void setRoot(com.sun.javadoc.RootDoc)
    {
        java.lang.IllegalStateException $r8;
        java.lang.Object[] $r5;
        java.lang.Class[] $r2;
        java.lang.Exception $r7;
        com.sun.javadoc.RootDoc r6;
        java.lang.Object $r0;
        java.lang.Class $r1, $r3, $r9;
        java.lang.reflect.Method $r4;

        r6 := @parameter0: com.sun.javadoc.RootDoc;

     label1:
        $r0 = staticinvoke <org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocResults: java.lang.Object getHolder()>();

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = newarray (java.lang.Class)[1];

        $r3 = <org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocResults: java.lang.Class class$com$sun$javadoc$RootDoc>;

        if $r3 != null goto label2;

        $r9 = staticinvoke <org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocResults: java.lang.Class class$(java.lang.String)>("com.sun.javadoc.RootDoc");

        <org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocResults: java.lang.Class class$com$sun$javadoc$RootDoc> = $r9;

        goto label3;

     label2:
        $r9 = <org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocResults: java.lang.Class class$com$sun$javadoc$RootDoc>;

     label3:
        $r2[0] = $r9;

        $r4 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("_setRoot", $r2);

        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = r6;

        virtualinvoke $r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r0, $r5);

     label4:
        goto label6;

     label5:
        $r7 := @caughtexception;

        virtualinvoke $r7.<java.lang.Exception: void printStackTrace()>();

        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>()>();

        throw $r8;

     label6:
        return;

        catch java.lang.Exception from label1 to label4 with label5;
    }

    public static com.sun.javadoc.RootDoc getRoot()
    {
        java.lang.IllegalStateException $r8;
        java.lang.Object[] $r4;
        java.lang.Class[] $r2;
        java.lang.Exception $r7;
        com.sun.javadoc.RootDoc $r6;
        java.lang.Object $r0, $r5;
        java.lang.Class $r1;
        java.lang.reflect.Method $r3;

     label1:
        $r0 = staticinvoke <org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocResults: java.lang.Object getHolder()>();

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = newarray (java.lang.Class)[0];

        $r3 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("_getRoot", $r2);

        $r4 = (java.lang.Object[]) null;

        $r5 = virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r0, $r4);

        $r6 = (com.sun.javadoc.RootDoc) $r5;

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

        virtualinvoke $r7.<java.lang.Exception: void printStackTrace()>();

        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>()>();

        throw $r8;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void _setRoot(com.sun.javadoc.RootDoc)
    {
        com.sun.javadoc.RootDoc r1;
        java.lang.ThreadLocal $r2;
        org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocResults r0;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocResults;

        r1 := @parameter0: com.sun.javadoc.RootDoc;

        $r2 = r0.<org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocResults: java.lang.ThreadLocal mRootsPerThread>;

        virtualinvoke $r2.<java.lang.ThreadLocal: void set(java.lang.Object)>(r1);

        return;
    }

    public com.sun.javadoc.RootDoc _getRoot()
    {
        java.lang.ThreadLocal $r1;
        com.sun.javadoc.RootDoc $r3;
        java.lang.Object $r2;
        org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocResults r0;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocResults;

        $r1 = r0.<org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocResults: java.lang.ThreadLocal mRootsPerThread>;

        $r2 = virtualinvoke $r1.<java.lang.ThreadLocal: java.lang.Object get()>();

        $r3 = (com.sun.javadoc.RootDoc) $r2;

        return $r3;
    }

    public static org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocResults getInstance()
    {
        org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocResults $r0;

        $r0 = <org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocResults: org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocResults INSTANCE>;

        return $r0;
    }

    private static java.lang.Object getHolder() throws java.lang.Exception
    {
        java.lang.Object[] $r7;
        java.lang.Class[] $r5;
        java.lang.Thread $r0;
        java.lang.Class $r2, $r4, $r9;
        java.lang.Object $r8;
        java.lang.ClassLoader $r1;
        java.lang.String $r3;
        java.lang.reflect.Method $r6;

        $r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r1 = virtualinvoke $r0.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        $r2 = <org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocResults: java.lang.Class class$org$apache$xmlbeans$impl$jam$internal$javadoc$JavadocResults>;

        if $r2 != null goto label1;

        $r9 = staticinvoke <org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocResults: java.lang.Class class$(java.lang.String)>("org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocResults");

        <org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocResults: java.lang.Class class$org$apache$xmlbeans$impl$jam$internal$javadoc$JavadocResults> = $r9;

        goto label2;

     label1:
        $r9 = <org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocResults: java.lang.Class class$org$apache$xmlbeans$impl$jam$internal$javadoc$JavadocResults>;

     label2:
        $r3 = virtualinvoke $r9.<java.lang.Class: java.lang.String getName()>();

        $r4 = virtualinvoke $r1.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>($r3);

        $r5 = newarray (java.lang.Class)[0];

        $r6 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getInstance", $r5);

        $r7 = newarray (java.lang.Object)[0];

        $r8 = virtualinvoke $r6.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r7);

        return $r8;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocResults $r0;

        $r0 = new org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocResults;

        specialinvoke $r0.<org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocResults: void <init>()>();

        <org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocResults: org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocResults INSTANCE> = $r0;

        return;
    }
}
