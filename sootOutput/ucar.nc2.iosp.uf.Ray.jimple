public class ucar.nc2.iosp.uf.Ray extends java.lang.Object
{
    int raySize;
    long rayOffset;
    static final int UF_MANDATORY_HEADER2_LEN;
    static final int UF_FIELD_HEADER2_LEN;
    static final boolean littleEndianData;
    boolean debug;
    long data_msecs;
    ucar.nc2.iosp.uf.Ray$UF_mandatory_header2 uf_header2;
    ucar.nc2.iosp.uf.Ray$UF_optional_header uf_opt_header;
    short numberOfFields;
    short numberOfRecords;
    short numberOfFieldsInRecord;
    java.util.HashMap field_header_map;

    public void <init>(java.nio.ByteBuffer, int, long)
    {
        byte[] r11, r12, $r14, $r15;
        java.nio.ByteBuffer r2;
        ucar.nc2.iosp.uf.Ray$UF_optional_header $r18;
        ucar.nc2.iosp.uf.Ray$UF_mandatory_header2 $r4, $r8, $r9, $r13, $r17;
        ucar.nc2.iosp.uf.Ray$UF_field_header2 $r20;
        long l1, $l12;
        java.util.HashMap $r7, $r16;
        short $s2, $s3, $s7, $s8, $s9, $s13, $s14, $s15, $s17;
        ucar.nc2.iosp.uf.Ray r0;
        int i0, $i4, $i5, $i6, $i10, $i11, i16, $i18, $i19, $i20, $i21, $i22, $i23;
        java.lang.String $r19;

        r0 := @this: ucar.nc2.iosp.uf.Ray;

        r2 := @parameter0: java.nio.ByteBuffer;

        i0 := @parameter1: int;

        l1 := @parameter2: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<ucar.nc2.iosp.uf.Ray: boolean debug> = 0;

        r0.<ucar.nc2.iosp.uf.Ray: long data_msecs> = 0L;

        r0.<ucar.nc2.iosp.uf.Ray: int raySize> = i0;

        r0.<ucar.nc2.iosp.uf.Ray: long rayOffset> = l1;

        $r16 = new java.util.HashMap;

        specialinvoke $r16.<java.util.HashMap: void <init>()>();

        r0.<ucar.nc2.iosp.uf.Ray: java.util.HashMap field_header_map> = $r16;

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(0);

        r11 = newarray (byte)[90];

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r11);

        $r17 = new ucar.nc2.iosp.uf.Ray$UF_mandatory_header2;

        specialinvoke $r17.<ucar.nc2.iosp.uf.Ray$UF_mandatory_header2: void <init>(ucar.nc2.iosp.uf.Ray,byte[])>(r0, r11);

        r0.<ucar.nc2.iosp.uf.Ray: ucar.nc2.iosp.uf.Ray$UF_mandatory_header2 uf_header2> = $r17;

        $r4 = r0.<ucar.nc2.iosp.uf.Ray: ucar.nc2.iosp.uf.Ray$UF_mandatory_header2 uf_header2>;

        $s2 = $r4.<ucar.nc2.iosp.uf.Ray$UF_mandatory_header2: short offset2StartOfOptionalHeader>;

        $i18 = (int) $s2;

        if $i18 <= 0 goto label1;

        $r8 = r0.<ucar.nc2.iosp.uf.Ray: ucar.nc2.iosp.uf.Ray$UF_mandatory_header2 uf_header2>;

        $s8 = $r8.<ucar.nc2.iosp.uf.Ray$UF_mandatory_header2: short dataHeaderPosition>;

        $r9 = r0.<ucar.nc2.iosp.uf.Ray: ucar.nc2.iosp.uf.Ray$UF_mandatory_header2 uf_header2>;

        $s7 = $r9.<ucar.nc2.iosp.uf.Ray$UF_mandatory_header2: short offset2StartOfOptionalHeader>;

        $i19 = (int) $s8;

        $i20 = (int) $s7;

        if $i19 == $i20 goto label1;

        r12 = newarray (byte)[28];

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r12);

        $r18 = new ucar.nc2.iosp.uf.Ray$UF_optional_header;

        specialinvoke $r18.<ucar.nc2.iosp.uf.Ray$UF_optional_header: void <init>(ucar.nc2.iosp.uf.Ray,byte[])>(r0, r12);

        r0.<ucar.nc2.iosp.uf.Ray: ucar.nc2.iosp.uf.Ray$UF_optional_header uf_opt_header> = $r18;

     label1:
        $r13 = r0.<ucar.nc2.iosp.uf.Ray: ucar.nc2.iosp.uf.Ray$UF_mandatory_header2 uf_header2>;

        $s9 = $r13.<ucar.nc2.iosp.uf.Ray$UF_mandatory_header2: short dataHeaderPosition>;

        $i21 = (int) $s9;

        $i10 = $i21 * 2;

        $i11 = $i10 - 2;

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i11);

        $l12 = virtualinvoke r0.<ucar.nc2.iosp.uf.Ray: long setDateMesc()>();

        r0.<ucar.nc2.iosp.uf.Ray: long data_msecs> = $l12;

        $r14 = newarray (byte)[2];

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>($r14);

        $s13 = virtualinvoke r0.<ucar.nc2.iosp.uf.Ray: short getShort(byte[],int)>($r14, 0);

        r0.<ucar.nc2.iosp.uf.Ray: short numberOfFields> = $s13;

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>($r14);

        $s14 = virtualinvoke r0.<ucar.nc2.iosp.uf.Ray: short getShort(byte[],int)>($r14, 0);

        r0.<ucar.nc2.iosp.uf.Ray: short numberOfRecords> = $s14;

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>($r14);

        $s15 = virtualinvoke r0.<ucar.nc2.iosp.uf.Ray: short getShort(byte[],int)>($r14, 0);

        r0.<ucar.nc2.iosp.uf.Ray: short numberOfFieldsInRecord> = $s15;

        $r15 = newarray (byte)[50];

        i16 = 0;

     label2:
        $s17 = r0.<ucar.nc2.iosp.uf.Ray: short numberOfFields>;

        $i22 = (int) $s17;

        if i16 >= $i22 goto label3;

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>($r14);

        $r19 = new java.lang.String;

        specialinvoke $r19.<java.lang.String: void <init>(byte[])>($r14);

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>($r14);

        $s3 = virtualinvoke r0.<ucar.nc2.iosp.uf.Ray: short getShort(byte[],int)>($r14, 0);

        $i4 = virtualinvoke r2.<java.nio.ByteBuffer: int position()>();

        $i23 = (int) $s3;

        $i5 = $i23 * 2;

        $i6 = $i5 - 2;

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i6);

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>($r15);

        $r20 = new ucar.nc2.iosp.uf.Ray$UF_field_header2;

        specialinvoke $r20.<ucar.nc2.iosp.uf.Ray$UF_field_header2: void <init>(ucar.nc2.iosp.uf.Ray,byte[])>(r0, $r15);

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i4);

        $r7 = r0.<ucar.nc2.iosp.uf.Ray: java.util.HashMap field_header_map>;

        virtualinvoke $r7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r19, $r20);

        i16 = i16 + 1;

        goto label2;

     label3:
        return;
    }

    public int getRaySize()
    {
        int $i0;
        ucar.nc2.iosp.uf.Ray r0;

        r0 := @this: ucar.nc2.iosp.uf.Ray;

        $i0 = r0.<ucar.nc2.iosp.uf.Ray: int raySize>;

        return $i0;
    }

    public int getGateCount(java.lang.String)
    {
        short $s0;
        ucar.nc2.iosp.uf.Ray r0;
        int $i1;
        java.util.HashMap $r2;
        java.lang.Object $r3;
        java.lang.String r1;
        ucar.nc2.iosp.uf.Ray$UF_field_header2 r4;

        r0 := @this: ucar.nc2.iosp.uf.Ray;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<ucar.nc2.iosp.uf.Ray: java.util.HashMap field_header_map>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (ucar.nc2.iosp.uf.Ray$UF_field_header2) $r3;

        $s0 = r4.<ucar.nc2.iosp.uf.Ray$UF_field_header2: short binCount>;

        $i1 = (int) $s0;

        return $i1;
    }

    public java.lang.String getDatatypeName(java.lang.String)
    {
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, $z29, $z30, $z31, $z32, $z33;
        ucar.nc2.iosp.uf.Ray r1;
        java.lang.String r0;

        r1 := @this: ucar.nc2.iosp.uf.Ray;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("ZN");

        if $z0 != 0 goto label01;

        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("ZS");

        if $z1 == 0 goto label02;

     label01:
        return "Reflectivity";

     label02:
        $z2 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("ZF");

        if $z2 != 0 goto label03;

        $z3 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("ZX");

        if $z3 != 0 goto label03;

        $z4 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("DR");

        if $z4 == 0 goto label04;

     label03:
        return "Reflectivity";

     label04:
        $z5 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("VR");

        if $z5 != 0 goto label05;

        $z6 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("DN");

        if $z6 != 0 goto label05;

        $z7 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("DS");

        if $z7 != 0 goto label05;

        $z8 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("DF");

        if $z8 != 0 goto label05;

        $z9 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("DX");

        if $z9 == 0 goto label06;

     label05:
        return "RadialVelocity";

     label06:
        $z10 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("VN");

        if $z10 != 0 goto label07;

        $z11 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("VF");

        if $z11 == 0 goto label08;

     label07:
        return "CorrectedRadialVelocity";

     label08:
        $z12 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("SW");

        if $z12 != 0 goto label09;

        $z13 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("WS");

        if $z13 != 0 goto label09;

        $z14 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("WF");

        if $z14 != 0 goto label09;

        $z15 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("WX");

        if $z15 != 0 goto label09;

        $z16 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("WN");

        if $z16 == 0 goto label10;

     label09:
        return "SpectrumWidth";

     label10:
        $z17 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("PN");

        if $z17 != 0 goto label11;

        $z18 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("PS");

        if $z18 != 0 goto label11;

        $z19 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("PF");

        if $z19 != 0 goto label11;

        $z20 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("PX");

        if $z20 == 0 goto label12;

     label11:
        return "Power";

     label12:
        $z21 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("MN");

        if $z21 != 0 goto label13;

        $z22 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("MS");

        if $z22 != 0 goto label13;

        $z23 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("MF");

        if $z23 != 0 goto label13;

        $z24 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("MX");

        if $z24 == 0 goto label14;

     label13:
        return "Power";

     label14:
        $z25 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("PH");

        if $z25 == 0 goto label15;

        return "PhiDP";

     label15:
        $z26 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("RH");

        if $z26 == 0 goto label16;

        return "RhoHV";

     label16:
        $z27 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("LH");

        if $z27 == 0 goto label17;

        return "LdrH";

     label17:
        $z28 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("KD");

        if $z28 == 0 goto label18;

        return "KDP";

     label18:
        $z29 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("LV");

        if $z29 == 0 goto label19;

        return "LdrV";

     label19:
        $z30 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("DR");

        if $z30 == 0 goto label20;

        return "ZDR";

     label20:
        $z31 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("CZ");

        if $z31 == 0 goto label21;

        return "CorrecteddBZ";

     label21:
        $z32 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("DZ");

        if $z32 == 0 goto label22;

        return "TotalReflectivity";

     label22:
        $z33 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("DR");

        if $z33 == 0 goto label23;

        return "ZDR";

     label23:
        return r0;
    }

    public java.lang.String getDatatypeUnits(java.lang.String)
    {
        ucar.nc2.iosp.uf.Ray r1;
        java.lang.String r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25;

        r1 := @this: ucar.nc2.iosp.uf.Ray;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("CZ");

        if $z0 != 0 goto label01;

        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("DZ");

        if $z1 != 0 goto label01;

        $z2 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("ZN");

        if $z2 != 0 goto label01;

        $z3 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("ZS");

        if $z3 == 0 goto label02;

     label01:
        return "dBz";

     label02:
        $z4 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("ZF");

        if $z4 != 0 goto label03;

        $z5 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("ZX");

        if $z5 == 0 goto label04;

     label03:
        return "dBz";

     label04:
        $z6 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("VR");

        if $z6 != 0 goto label05;

        $z7 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("DN");

        if $z7 != 0 goto label05;

        $z8 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("DS");

        if $z8 != 0 goto label05;

        $z9 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("DF");

        if $z9 != 0 goto label05;

        $z10 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("DX");

        if $z10 == 0 goto label06;

     label05:
        return "m/s";

     label06:
        $z11 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("VN");

        if $z11 != 0 goto label07;

        $z12 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("VF");

        if $z12 == 0 goto label08;

     label07:
        return "m/s";

     label08:
        $z13 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("SW");

        if $z13 != 0 goto label09;

        $z14 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("WS");

        if $z14 != 0 goto label09;

        $z15 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("WF");

        if $z15 != 0 goto label09;

        $z16 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("WX");

        if $z16 != 0 goto label09;

        $z17 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("WN");

        if $z17 == 0 goto label10;

     label09:
        return "m/s";

     label10:
        $z18 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("PN");

        if $z18 != 0 goto label11;

        $z19 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("PS");

        if $z19 != 0 goto label11;

        $z20 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("PF");

        if $z20 != 0 goto label11;

        $z21 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("PX");

        if $z21 == 0 goto label12;

     label11:
        return "dBM";

     label12:
        $z22 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("MN");

        if $z22 != 0 goto label13;

        $z23 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("MS");

        if $z23 != 0 goto label13;

        $z24 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("MF");

        if $z24 != 0 goto label13;

        $z25 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("MX");

        if $z25 == 0 goto label14;

     label13:
        return "dBM";

     label14:
        return r0;
    }

    public short getDatatypeRangeFoldingThreshhold(java.lang.String)
    {
        short $s0;
        ucar.nc2.iosp.uf.Ray r0;
        java.util.HashMap $r2;
        java.lang.Object $r3;
        java.lang.String r1;
        ucar.nc2.iosp.uf.Ray$UF_field_header2 r4;

        r0 := @this: ucar.nc2.iosp.uf.Ray;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<ucar.nc2.iosp.uf.Ray: java.util.HashMap field_header_map>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (ucar.nc2.iosp.uf.Ray$UF_field_header2) $r3;

        $s0 = r4.<ucar.nc2.iosp.uf.Ray$UF_field_header2: short thresholdValue>;

        return $s0;
    }

    public float getDatatypeScaleFactor(java.lang.String)
    {
        java.util.HashMap $r2;
        ucar.nc2.iosp.uf.Ray$UF_field_header2 r4;
        short $s0;
        ucar.nc2.iosp.uf.Ray r0;
        float $f0, $f1;
        java.lang.Object $r3;
        java.lang.String r1;

        r0 := @this: ucar.nc2.iosp.uf.Ray;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<ucar.nc2.iosp.uf.Ray: java.util.HashMap field_header_map>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (ucar.nc2.iosp.uf.Ray$UF_field_header2) $r3;

        $s0 = r4.<ucar.nc2.iosp.uf.Ray$UF_field_header2: short scaleFactor>;

        $f0 = (float) $s0;

        $f1 = 1.0F / $f0;

        return $f1;
    }

    public float getDatatypeAddOffset(java.lang.String)
    {
        ucar.nc2.iosp.uf.Ray r0;
        java.lang.String r1;

        r0 := @this: ucar.nc2.iosp.uf.Ray;

        r1 := @parameter0: java.lang.String;

        return 0.0F;
    }

    public int getGateStart(java.lang.String)
    {
        short $s0;
        ucar.nc2.iosp.uf.Ray r0;
        int $i1;
        java.util.HashMap $r2;
        java.lang.Object $r3;
        java.lang.String r1;
        ucar.nc2.iosp.uf.Ray$UF_field_header2 r4;

        r0 := @this: ucar.nc2.iosp.uf.Ray;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<ucar.nc2.iosp.uf.Ray: java.util.HashMap field_header_map>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (ucar.nc2.iosp.uf.Ray$UF_field_header2) $r3;

        $s0 = r4.<ucar.nc2.iosp.uf.Ray$UF_field_header2: short startRange>;

        $i1 = (int) $s0;

        return $i1;
    }

    public int getDataOffset(java.lang.String)
    {
        short $s0;
        ucar.nc2.iosp.uf.Ray r0;
        int $i1;
        java.util.HashMap $r2;
        java.lang.Object $r3;
        java.lang.String r1;
        ucar.nc2.iosp.uf.Ray$UF_field_header2 r4;

        r0 := @this: ucar.nc2.iosp.uf.Ray;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<ucar.nc2.iosp.uf.Ray: java.util.HashMap field_header_map>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (ucar.nc2.iosp.uf.Ray$UF_field_header2) $r3;

        $s0 = r4.<ucar.nc2.iosp.uf.Ray$UF_field_header2: short dataOffset>;

        $i1 = (int) $s0;

        return $i1;
    }

    public int getGateSize(java.lang.String)
    {
        short $s0;
        ucar.nc2.iosp.uf.Ray r0;
        int $i1;
        java.util.HashMap $r2;
        java.lang.Object $r3;
        java.lang.String r1;
        ucar.nc2.iosp.uf.Ray$UF_field_header2 r4;

        r0 := @this: ucar.nc2.iosp.uf.Ray;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<ucar.nc2.iosp.uf.Ray: java.util.HashMap field_header_map>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (ucar.nc2.iosp.uf.Ray$UF_field_header2) $r3;

        $s0 = r4.<ucar.nc2.iosp.uf.Ray$UF_field_header2: short binSpacing>;

        $i1 = (int) $s0;

        return $i1;
    }

    public float getElevation()
    {
        short $s0;
        ucar.nc2.iosp.uf.Ray r0;
        float $f0, $f1;
        ucar.nc2.iosp.uf.Ray$UF_mandatory_header2 $r1;

        r0 := @this: ucar.nc2.iosp.uf.Ray;

        $r1 = r0.<ucar.nc2.iosp.uf.Ray: ucar.nc2.iosp.uf.Ray$UF_mandatory_header2 uf_header2>;

        $s0 = $r1.<ucar.nc2.iosp.uf.Ray$UF_mandatory_header2: short elevation>;

        $f0 = (float) $s0;

        $f1 = $f0 / 64.0F;

        return $f1;
    }

    public float getAzimuth()
    {
        short $s0;
        ucar.nc2.iosp.uf.Ray r0;
        float $f0, $f1;
        ucar.nc2.iosp.uf.Ray$UF_mandatory_header2 $r1;

        r0 := @this: ucar.nc2.iosp.uf.Ray;

        $r1 = r0.<ucar.nc2.iosp.uf.Ray: ucar.nc2.iosp.uf.Ray$UF_mandatory_header2 uf_header2>;

        $s0 = $r1.<ucar.nc2.iosp.uf.Ray$UF_mandatory_header2: short azimuth>;

        $f0 = (float) $s0;

        $f1 = $f0 / 64.0F;

        return $f1;
    }

    public short getMissingData()
    {
        ucar.nc2.iosp.uf.Ray$UF_mandatory_header2 $r1;
        short $s0;
        ucar.nc2.iosp.uf.Ray r0;

        r0 := @this: ucar.nc2.iosp.uf.Ray;

        $r1 = r0.<ucar.nc2.iosp.uf.Ray: ucar.nc2.iosp.uf.Ray$UF_mandatory_header2 uf_header2>;

        $s0 = $r1.<ucar.nc2.iosp.uf.Ray$UF_mandatory_header2: short missing>;

        return $s0;
    }

    public int getYear()
    {
        short $s0;
        ucar.nc2.iosp.uf.Ray r0;
        int $i1, $i2;
        ucar.nc2.iosp.uf.Ray$UF_mandatory_header2 $r1;

        r0 := @this: ucar.nc2.iosp.uf.Ray;

        $r1 = r0.<ucar.nc2.iosp.uf.Ray: ucar.nc2.iosp.uf.Ray$UF_mandatory_header2 uf_header2>;

        $s0 = $r1.<ucar.nc2.iosp.uf.Ray$UF_mandatory_header2: short year>;

        $i2 = (int) $s0;

        $i1 = virtualinvoke r0.<ucar.nc2.iosp.uf.Ray: int getYear(int)>($i2);

        return $i1;
    }

    public float getLatitude()
    {
        ucar.nc2.iosp.uf.Ray$UF_mandatory_header2 $r1, $r2, $r3;
        short $s0, $s1, $s2;
        ucar.nc2.iosp.uf.Ray r0;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6;

        r0 := @this: ucar.nc2.iosp.uf.Ray;

        $r1 = r0.<ucar.nc2.iosp.uf.Ray: ucar.nc2.iosp.uf.Ray$UF_mandatory_header2 uf_header2>;

        $s0 = $r1.<ucar.nc2.iosp.uf.Ray$UF_mandatory_header2: short latitudeD>;

        $f5 = (float) $s0;

        $r2 = r0.<ucar.nc2.iosp.uf.Ray: ucar.nc2.iosp.uf.Ray$UF_mandatory_header2 uf_header2>;

        $s1 = $r2.<ucar.nc2.iosp.uf.Ray$UF_mandatory_header2: short latitudeM>;

        $f2 = (float) $s1;

        $r3 = r0.<ucar.nc2.iosp.uf.Ray: ucar.nc2.iosp.uf.Ray$UF_mandatory_header2 uf_header2>;

        $s2 = $r3.<ucar.nc2.iosp.uf.Ray$UF_mandatory_header2: short latitudeS>;

        $f0 = (float) $s2;

        $f1 = $f0 / 3840.0F;

        $f3 = $f2 + $f1;

        $f4 = $f3 / 60.0F;

        $f6 = $f5 + $f4;

        return $f6;
    }

    public float getLongtitude()
    {
        ucar.nc2.iosp.uf.Ray$UF_mandatory_header2 $r1, $r2, $r3;
        short $s0, $s1, $s2;
        ucar.nc2.iosp.uf.Ray r0;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6;

        r0 := @this: ucar.nc2.iosp.uf.Ray;

        $r1 = r0.<ucar.nc2.iosp.uf.Ray: ucar.nc2.iosp.uf.Ray$UF_mandatory_header2 uf_header2>;

        $s0 = $r1.<ucar.nc2.iosp.uf.Ray$UF_mandatory_header2: short longitudeD>;

        $f5 = (float) $s0;

        $r2 = r0.<ucar.nc2.iosp.uf.Ray: ucar.nc2.iosp.uf.Ray$UF_mandatory_header2 uf_header2>;

        $s1 = $r2.<ucar.nc2.iosp.uf.Ray$UF_mandatory_header2: short longitudeM>;

        $f2 = (float) $s1;

        $r3 = r0.<ucar.nc2.iosp.uf.Ray: ucar.nc2.iosp.uf.Ray$UF_mandatory_header2 uf_header2>;

        $s2 = $r3.<ucar.nc2.iosp.uf.Ray$UF_mandatory_header2: short longitudeS>;

        $f0 = (float) $s2;

        $f1 = $f0 / 3840.0F;

        $f3 = $f2 + $f1;

        $f4 = $f3 / 60.0F;

        $f6 = $f5 + $f4;

        return $f6;
    }

    public float getHorizontalBeamWidth(java.lang.String)
    {
        java.util.HashMap $r2;
        ucar.nc2.iosp.uf.Ray$UF_field_header2 r4;
        short $s0;
        ucar.nc2.iosp.uf.Ray r0;
        float $f0, $f1;
        java.lang.Object $r3;
        java.lang.String r1;

        r0 := @this: ucar.nc2.iosp.uf.Ray;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<ucar.nc2.iosp.uf.Ray: java.util.HashMap field_header_map>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (ucar.nc2.iosp.uf.Ray$UF_field_header2) $r3;

        $s0 = r4.<ucar.nc2.iosp.uf.Ray$UF_field_header2: short HorizontalBeamWidth>;

        $f0 = (float) $s0;

        $f1 = $f0 / 64.0F;

        return $f1;
    }

    public int getYear(int)
    {
        ucar.nc2.iosp.uf.Ray r0;
        int i0, $i1, $i2;

        r0 := @this: ucar.nc2.iosp.uf.Ray;

        i0 := @parameter0: int;

        if i0 <= 1970 goto label1;

        return i0;

     label1:
        if i0 <= 70 goto label2;

        if i0 >= 100 goto label2;

        $i2 = 1900 + i0;

        return $i2;

     label2:
        if i0 >= 60 goto label3;

        $i1 = 2000 + i0;

        return $i1;

     label3:
        return 0;
    }

    public long getTitleMsecs()
    {
        long $l0;
        ucar.nc2.iosp.uf.Ray r0;

        r0 := @this: ucar.nc2.iosp.uf.Ray;

        $l0 = r0.<ucar.nc2.iosp.uf.Ray: long data_msecs>;

        return $l0;
    }

    public long setDateMesc()
    {
        long $l6;
        short $s0, $s1, $s2, $s3, $s4, $s5;
        java.util.Calendar $r0;
        ucar.nc2.iosp.uf.Ray r1;
        int $i7, $i8, $i9, $i10, $i11, $i12;
        ucar.nc2.iosp.uf.Ray$UF_mandatory_header2 $r2, $r3, $r4, $r5, $r6, $r7;

        r1 := @this: ucar.nc2.iosp.uf.Ray;

        $r0 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $r2 = r1.<ucar.nc2.iosp.uf.Ray: ucar.nc2.iosp.uf.Ray$UF_mandatory_header2 uf_header2>;

        $s0 = $r2.<ucar.nc2.iosp.uf.Ray$UF_mandatory_header2: short year>;

        $i7 = (int) $s0;

        virtualinvoke $r0.<java.util.Calendar: void set(int,int)>(1, $i7);

        $r3 = r1.<ucar.nc2.iosp.uf.Ray: ucar.nc2.iosp.uf.Ray$UF_mandatory_header2 uf_header2>;

        $s1 = $r3.<ucar.nc2.iosp.uf.Ray$UF_mandatory_header2: short month>;

        $i8 = (int) $s1;

        virtualinvoke $r0.<java.util.Calendar: void set(int,int)>(2, $i8);

        $r4 = r1.<ucar.nc2.iosp.uf.Ray: ucar.nc2.iosp.uf.Ray$UF_mandatory_header2 uf_header2>;

        $s2 = $r4.<ucar.nc2.iosp.uf.Ray$UF_mandatory_header2: short day>;

        $i9 = (int) $s2;

        virtualinvoke $r0.<java.util.Calendar: void set(int,int)>(5, $i9);

        $r5 = r1.<ucar.nc2.iosp.uf.Ray: ucar.nc2.iosp.uf.Ray$UF_mandatory_header2 uf_header2>;

        $s3 = $r5.<ucar.nc2.iosp.uf.Ray$UF_mandatory_header2: short hour>;

        $i10 = (int) $s3;

        virtualinvoke $r0.<java.util.Calendar: void set(int,int)>(11, $i10);

        $r6 = r1.<ucar.nc2.iosp.uf.Ray: ucar.nc2.iosp.uf.Ray$UF_mandatory_header2 uf_header2>;

        $s4 = $r6.<ucar.nc2.iosp.uf.Ray$UF_mandatory_header2: short minute>;

        $i11 = (int) $s4;

        virtualinvoke $r0.<java.util.Calendar: void set(int,int)>(12, $i11);

        $r7 = r1.<ucar.nc2.iosp.uf.Ray: ucar.nc2.iosp.uf.Ray$UF_mandatory_header2 uf_header2>;

        $s5 = $r7.<ucar.nc2.iosp.uf.Ray$UF_mandatory_header2: short second>;

        $i12 = (int) $s5;

        virtualinvoke $r0.<java.util.Calendar: void set(int,int)>(13, $i12);

        $l6 = virtualinvoke $r0.<java.util.Calendar: long getTimeInMillis()>();

        return $l6;
    }

    public java.util.Date getDate()
    {
        java.util.Calendar $r0;
        ucar.nc2.iosp.uf.Ray r1;
        java.util.Date $r2;
        long $l0;

        r1 := @this: ucar.nc2.iosp.uf.Ray;

        $r0 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $l0 = r1.<ucar.nc2.iosp.uf.Ray: long data_msecs>;

        virtualinvoke $r0.<java.util.Calendar: void setTimeInMillis(long)>($l0);

        $r2 = virtualinvoke $r0.<java.util.Calendar: java.util.Date getTime()>();

        return $r2;
    }

    protected short getShort1(byte[], int)
    {
        byte[] r0;
        short $s5, $s8, $s10;
        ucar.nc2.iosp.uf.Ray r1;
        byte $b3, $b4;
        int i0, i1, i2, $i6, $i7, $i9, $i11;

        r1 := @this: ucar.nc2.iosp.uf.Ray;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 = i0 + 1;

        i2 = i0 + 0;

        $b3 = r0[i1];

        $i9 = (int) $b3;

        $i6 = $i9 << 8;

        $b4 = r0[i2];

        $s10 = (short) $b4;

        $s5 = $s10 & 255;

        $i11 = (int) $s5;

        $i7 = $i6 | $i11;

        $s8 = (short) $i7;

        return $s8;
    }

    protected short getShort(byte[], int)
    {
        byte[] r0;
        short $s5;
        ucar.nc2.iosp.uf.Ray r1;
        byte $b2, $b3;
        int i0, $i1, $i4;

        r1 := @this: ucar.nc2.iosp.uf.Ray;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        $b3 = r0[i0];

        $i1 = i0 + 1;

        $b2 = r0[$i1];

        $i4 = staticinvoke <ucar.nc2.iosp.uf.Ray: int bytesToShort(byte,byte,boolean)>($b3, $b2, 0);

        $s5 = (short) $i4;

        return $s5;
    }

    public static int bytesToShort(byte, byte, boolean)
    {
        short $s2, $s6, $s8, $s12;
        byte b0, b1;
        int $i3, $i4, $i5, $i7, $i9, $i10, $i11, $i13;
        boolean z0;

        b0 := @parameter0: byte;

        b1 := @parameter1: byte;

        z0 := @parameter2: boolean;

        if z0 == 0 goto label1;

        $s8 = (short) b0;

        $s6 = $s8 & 255;

        $i9 = (int) b1;

        $i5 = $i9 << 8;

        $i10 = (int) $s6;

        $i7 = $i10 + $i5;

        return $i7;

     label1:
        $i11 = (int) b0;

        $i3 = $i11 << 8;

        $s12 = (short) b1;

        $s2 = $s12 & 255;

        $i13 = (int) $s2;

        $i4 = $i3 + $i13;

        return $i4;
    }

    public static int bytesToInt(byte[], boolean)
    {
        byte[] r0;
        byte b0, b1, b2, b3;
        boolean z0;
        short $s4, $s5, $s8, $s11, $s14, $s16, $s17, $s20, $s24, $s25, $s28, $s30, $s32, $s34, $s36, $s38;
        int $i6, $i7, $i9, $i10, $i12, $i13, $i15, $i18, $i19, $i21, $i22, $i23, $i26, $i27, $i29, $i31, $i33, $i35, $i37, $i39;

        r0 := @parameter0: byte[];

        z0 := @parameter1: boolean;

        b0 = r0[0];

        b1 = r0[1];

        b2 = r0[2];

        b3 = r0[3];

        if z0 == 0 goto label1;

        $s24 = (short) b0;

        $s16 = $s24 & 255;

        $s25 = (short) b1;

        $s14 = $s25 & 255;

        $i26 = (int) $s14;

        $i15 = $i26 << 8;

        $i27 = (int) $s16;

        $i19 = $i27 + $i15;

        $s28 = (short) b2;

        $s17 = $s28 & 255;

        $i29 = (int) $s17;

        $i18 = $i29 << 16;

        $i22 = $i19 + $i18;

        $s30 = (short) b3;

        $s20 = $s30 & 255;

        $i31 = (int) $s20;

        $i21 = $i31 << 24;

        $i23 = $i22 + $i21;

        return $i23;

     label1:
        $s32 = (short) b0;

        $s4 = $s32 & 255;

        $i33 = (int) $s4;

        $i7 = $i33 << 24;

        $s34 = (short) b1;

        $s5 = $s34 & 255;

        $i35 = (int) $s5;

        $i6 = $i35 << 16;

        $i10 = $i7 + $i6;

        $s36 = (short) b2;

        $s8 = $s36 & 255;

        $i37 = (int) $s8;

        $i9 = $i37 << 8;

        $i12 = $i10 + $i9;

        $s38 = (short) b3;

        $s11 = $s38 & 255;

        $i39 = (int) $s11;

        $i13 = $i12 + $i39;

        return $i13;
    }

    public short[] byte2short(byte[], int)
    {
        byte[] r1, r2;
        short $s7;
        ucar.nc2.iosp.uf.Ray r3;
        byte $b3, $b6;
        int i0, i1, $i2, $i4, $i5, i8;
        short[] r0;

        r3 := @this: ucar.nc2.iosp.uf.Ray;

        r2 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 = i0 / 2;

        r0 = newarray (short)[i1];

        r1 = newarray (byte)[2];

        i8 = 0;

     label1:
        if i8 >= i1 goto label2;

        $i2 = 2 * i8;

        $b3 = r2[$i2];

        r1[0] = $b3;

        $i4 = 2 * i8;

        $i5 = $i4 + 1;

        $b6 = r2[$i5];

        r1[1] = $b6;

        $s7 = virtualinvoke r3.<ucar.nc2.iosp.uf.Ray: short getShort(byte[],int)>(r1, 0);

        r0[i8] = $s7;

        i8 = i8 + 1;

        goto label1;

     label2:
        return r0;
    }

    public void readData(ucar.unidata.io.RandomAccessFile, java.lang.String, ucar.ma2.Range, ucar.ma2.IndexIterator) throws java.io.IOException
    {
        byte[] r3, r4;
        ucar.unidata.io.RandomAccessFile r2;
        long $l3, l16, l17;
        short $s13, $s15;
        ucar.nc2.iosp.uf.Ray r0;
        byte $b9, $b12;
        int $i0, $i1, $i2, $i4, $i5, $i6, $i7, $i8, $i10, $i11, $i14, i18;
        java.lang.String r1;
        ucar.ma2.Range r5;
        ucar.ma2.IndexIterator r6;
        ucar.nc2.iosp.uf.Ray$UF_mandatory_header2 $r7;

        r0 := @this: ucar.nc2.iosp.uf.Ray;

        r2 := @parameter0: ucar.unidata.io.RandomAccessFile;

        r1 := @parameter1: java.lang.String;

        r5 := @parameter2: ucar.ma2.Range;

        r6 := @parameter3: ucar.ma2.IndexIterator;

        l16 = r0.<ucar.nc2.iosp.uf.Ray: long rayOffset>;

        $i0 = virtualinvoke r0.<ucar.nc2.iosp.uf.Ray: int getDataOffset(java.lang.String)>(r1);

        $i1 = $i0 * 2;

        $i2 = $i1 - 2;

        $l3 = (long) $i2;

        l17 = l16 + $l3;

        virtualinvoke r2.<ucar.unidata.io.RandomAccessFile: void seek(long)>(l17);

        r3 = newarray (byte)[2];

        $i4 = virtualinvoke r0.<ucar.nc2.iosp.uf.Ray: int getGateCount(java.lang.String)>(r1);

        $i5 = $i4 * 2;

        r4 = newarray (byte)[$i5];

        virtualinvoke r2.<ucar.unidata.io.RandomAccessFile: void readFully(byte[])>(r4);

        $i6 = 2 * $i4;

        virtualinvoke r0.<ucar.nc2.iosp.uf.Ray: short[] byte2short(byte[],int)>(r4, $i6);

        i18 = virtualinvoke r5.<ucar.ma2.Range: int first()>();

     label1:
        $i7 = virtualinvoke r5.<ucar.ma2.Range: int last()>();

        if i18 > $i7 goto label4;

        if i18 < $i4 goto label2;

        $r7 = r0.<ucar.nc2.iosp.uf.Ray: ucar.nc2.iosp.uf.Ray$UF_mandatory_header2 uf_header2>;

        $s15 = $r7.<ucar.nc2.iosp.uf.Ray$UF_mandatory_header2: short missing>;

        interfaceinvoke r6.<ucar.ma2.IndexIterator: void setShortNext(short)>($s15);

        goto label3;

     label2:
        $i8 = i18 * 2;

        $b9 = r4[$i8];

        r3[0] = $b9;

        $i10 = i18 * 2;

        $i11 = $i10 + 1;

        $b12 = r4[$i11];

        r3[1] = $b12;

        $s13 = virtualinvoke r0.<ucar.nc2.iosp.uf.Ray: short getShort(byte[],int)>(r3, 0);

        interfaceinvoke r6.<ucar.ma2.IndexIterator: void setShortNext(short)>($s13);

     label3:
        $i14 = virtualinvoke r5.<ucar.ma2.Range: int stride()>();

        i18 = i18 + $i14;

        goto label1;

     label4:
        return;
    }

    public static void <clinit>()
    {
        <ucar.nc2.iosp.uf.Ray: boolean littleEndianData> = 1;

        <ucar.nc2.iosp.uf.Ray: int UF_FIELD_HEADER2_LEN> = 50;

        <ucar.nc2.iosp.uf.Ray: int UF_MANDATORY_HEADER2_LEN> = 90;

        return;
    }
}
