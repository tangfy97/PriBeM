public abstract class org.springframework.core.AttributeAccessorSupport extends java.lang.Object implements org.springframework.core.AttributeAccessor, java.io.Serializable
{
    private final java.util.Map attributes;

    public void <init>()
    {
        java.util.LinkedHashMap $r1;
        org.springframework.core.AttributeAccessorSupport r0;

        r0 := @this: org.springframework.core.AttributeAccessorSupport;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.LinkedHashMap;

        specialinvoke $r1.<java.util.LinkedHashMap: void <init>(int)>(0);

        r0.<org.springframework.core.AttributeAccessorSupport: java.util.Map attributes> = $r1;

        return;
    }

    public void setAttribute(java.lang.String, java.lang.Object)
    {
        org.springframework.core.AttributeAccessorSupport r2;
        java.util.Map $r3;
        java.lang.Object r1;
        java.lang.String r0;

        r2 := @this: org.springframework.core.AttributeAccessorSupport;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Name must not be null");

        if r1 == null goto label1;

        $r3 = r2.<org.springframework.core.AttributeAccessorSupport: java.util.Map attributes>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r1);

        goto label2;

     label1:
        virtualinvoke r2.<org.springframework.core.AttributeAccessorSupport: java.lang.Object removeAttribute(java.lang.String)>(r0);

     label2:
        return;
    }

    public java.lang.Object getAttribute(java.lang.String)
    {
        org.springframework.core.AttributeAccessorSupport r1;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.String r0;

        r1 := @this: org.springframework.core.AttributeAccessorSupport;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Name must not be null");

        $r2 = r1.<org.springframework.core.AttributeAccessorSupport: java.util.Map attributes>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        return $r3;
    }

    public java.lang.Object removeAttribute(java.lang.String)
    {
        org.springframework.core.AttributeAccessorSupport r1;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.String r0;

        r1 := @this: org.springframework.core.AttributeAccessorSupport;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Name must not be null");

        $r2 = r1.<org.springframework.core.AttributeAccessorSupport: java.util.Map attributes>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r0);

        return $r3;
    }

    public boolean hasAttribute(java.lang.String)
    {
        org.springframework.core.AttributeAccessorSupport r1;
        java.util.Map $r2;
        java.lang.String r0;
        boolean $z0;

        r1 := @this: org.springframework.core.AttributeAccessorSupport;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Name must not be null");

        $r2 = r1.<org.springframework.core.AttributeAccessorSupport: java.util.Map attributes>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r0);

        return $z0;
    }

    public java.lang.String[] attributeNames()
    {
        java.lang.Object[] $r5;
        java.util.Set $r2;
        java.lang.String[] $r4, $r6;
        org.springframework.core.AttributeAccessorSupport r0;
        java.util.Map $r1, $r3;
        int $i0;

        r0 := @this: org.springframework.core.AttributeAccessorSupport;

        $r1 = r0.<org.springframework.core.AttributeAccessorSupport: java.util.Map attributes>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $r3 = r0.<org.springframework.core.AttributeAccessorSupport: java.util.Map attributes>;

        $i0 = interfaceinvoke $r3.<java.util.Map: int size()>();

        $r4 = newarray (java.lang.String)[$i0];

        $r5 = interfaceinvoke $r2.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        $r6 = (java.lang.String[]) $r5;

        return $r6;
    }

    protected void copyAttributesFrom(org.springframework.core.AttributeAccessor)
    {
        org.springframework.core.AttributeAccessor r0;
        org.springframework.core.AttributeAccessorSupport r3;
        int i0, i1;
        java.lang.String[] $r1;
        java.lang.Object $r4;
        java.lang.String r2;

        r3 := @this: org.springframework.core.AttributeAccessorSupport;

        r0 := @parameter0: org.springframework.core.AttributeAccessor;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Source must not be null");

        $r1 = interfaceinvoke r0.<org.springframework.core.AttributeAccessor: java.lang.String[] attributeNames()>();

        i0 = lengthof $r1;

        i1 = 0;

        goto label2;

     label1:
        r2 = $r1[i1];

        $r4 = interfaceinvoke r0.<org.springframework.core.AttributeAccessor: java.lang.Object getAttribute(java.lang.String)>(r2);

        virtualinvoke r3.<org.springframework.core.AttributeAccessorSupport: void setAttribute(java.lang.String,java.lang.Object)>(r2, $r4);

        i1 = i1 + 1;

     label2:
        if i1 < i0 goto label1;

        return;
    }

    public boolean equals(java.lang.Object)
    {
        org.springframework.core.AttributeAccessorSupport r0, r2;
        java.util.Map $r3, $r4;
        java.lang.Object r1;
        boolean $z0, $z1;

        r0 := @this: org.springframework.core.AttributeAccessorSupport;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.springframework.core.AttributeAccessorSupport;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (org.springframework.core.AttributeAccessorSupport) r1;

        $r4 = r0.<org.springframework.core.AttributeAccessorSupport: java.util.Map attributes>;

        $r3 = r2.<org.springframework.core.AttributeAccessorSupport: java.util.Map attributes>;

        $z1 = interfaceinvoke $r4.<java.util.Map: boolean equals(java.lang.Object)>($r3);

        return $z1;
    }

    public int hashCode()
    {
        int $i0;
        org.springframework.core.AttributeAccessorSupport r0;
        java.util.Map $r1;

        r0 := @this: org.springframework.core.AttributeAccessorSupport;

        $r1 = r0.<org.springframework.core.AttributeAccessorSupport: java.util.Map attributes>;

        $i0 = interfaceinvoke $r1.<java.util.Map: int hashCode()>();

        return $i0;
    }
}
