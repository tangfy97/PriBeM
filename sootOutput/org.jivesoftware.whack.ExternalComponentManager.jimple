public class org.jivesoftware.whack.ExternalComponentManager extends java.lang.Object implements org.xmpp.component.ComponentManager
{
    private java.lang.String host;
    private int port;
    private java.lang.String domain;
    private int connectTimeout;
    private java.lang.String defaultSecretKey;
    private java.util.Map secretKeys;
    private java.util.Map allowMultiple;
    java.util.prefs.Preferences preferences;
    private java.lang.String preferencesPrefix;
    private java.util.Map componentsByDomain;
    private java.util.Map components;
    private org.xmpp.component.Log logger;

    public void <init>(java.lang.String)
    {
        org.jivesoftware.whack.ExternalComponentManager r0;
        java.lang.String r1;

        r0 := @this: org.jivesoftware.whack.ExternalComponentManager;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.jivesoftware.whack.ExternalComponentManager: void <init>(java.lang.String,int)>(r1, 5225);

        return;
    }

    public void <init>(java.lang.String, int)
    {
        org.jivesoftware.whack.ExternalComponentManager r0;
        java.lang.IllegalArgumentException $r7;
        java.util.prefs.Preferences $r3;
        int i0;
        java.lang.String r6;
        java.util.Hashtable $r1, $r2, $r4, $r5;

        r0 := @this: org.jivesoftware.whack.ExternalComponentManager;

        r6 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.jivesoftware.whack.ExternalComponentManager: int connectTimeout> = 2000;

        $r1 = new java.util.Hashtable;

        specialinvoke $r1.<java.util.Hashtable: void <init>()>();

        r0.<org.jivesoftware.whack.ExternalComponentManager: java.util.Map secretKeys> = $r1;

        $r2 = new java.util.Hashtable;

        specialinvoke $r2.<java.util.Hashtable: void <init>()>();

        r0.<org.jivesoftware.whack.ExternalComponentManager: java.util.Map allowMultiple> = $r2;

        $r3 = staticinvoke <java.util.prefs.Preferences: java.util.prefs.Preferences userRoot()>();

        r0.<org.jivesoftware.whack.ExternalComponentManager: java.util.prefs.Preferences preferences> = $r3;

        $r4 = new java.util.Hashtable;

        specialinvoke $r4.<java.util.Hashtable: void <init>()>();

        r0.<org.jivesoftware.whack.ExternalComponentManager: java.util.Map componentsByDomain> = $r4;

        $r5 = new java.util.Hashtable;

        specialinvoke $r5.<java.util.Hashtable: void <init>()>();

        r0.<org.jivesoftware.whack.ExternalComponentManager: java.util.Map components> = $r5;

        if r6 != null goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Host of XMPP server cannot be null");

        throw $r7;

     label1:
        r0.<org.jivesoftware.whack.ExternalComponentManager: java.lang.String host> = r6;

        r0.<org.jivesoftware.whack.ExternalComponentManager: int port> = i0;

        specialinvoke r0.<org.jivesoftware.whack.ExternalComponentManager: void createDummyLogger()>();

        staticinvoke <org.xmpp.component.ComponentManagerFactory: void setComponentManager(org.xmpp.component.ComponentManager)>(r0);

        return;
    }

    public void setSecretKey(java.lang.String, java.lang.String)
    {
        org.jivesoftware.whack.ExternalComponentManager r0;
        java.util.Map $r3;
        java.lang.String r1, r2;

        r0 := @this: org.jivesoftware.whack.ExternalComponentManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.jivesoftware.whack.ExternalComponentManager: java.util.Map secretKeys>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    public java.lang.String getSecretKey(java.lang.String)
    {
        org.jivesoftware.whack.ExternalComponentManager r0;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.String r1, r4;

        r0 := @this: org.jivesoftware.whack.ExternalComponentManager;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.jivesoftware.whack.ExternalComponentManager: java.util.Map secretKeys>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (java.lang.String) $r3;

        if r4 != null goto label1;

        r4 = r0.<org.jivesoftware.whack.ExternalComponentManager: java.lang.String defaultSecretKey>;

     label1:
        return r4;
    }

    public void setDefaultSecretKey(java.lang.String)
    {
        org.jivesoftware.whack.ExternalComponentManager r0;
        java.lang.String r1;

        r0 := @this: org.jivesoftware.whack.ExternalComponentManager;

        r1 := @parameter0: java.lang.String;

        r0.<org.jivesoftware.whack.ExternalComponentManager: java.lang.String defaultSecretKey> = r1;

        return;
    }

    public boolean isMultipleAllowed(java.lang.String)
    {
        org.jivesoftware.whack.ExternalComponentManager r0;
        java.util.Map $r2;
        java.lang.Boolean r4;
        java.lang.Object $r3;
        java.lang.String r1;
        boolean $z0, $z1;

        r0 := @this: org.jivesoftware.whack.ExternalComponentManager;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.jivesoftware.whack.ExternalComponentManager: java.util.Map allowMultiple>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (java.lang.Boolean) $r3;

        if r4 == null goto label1;

        $z0 = virtualinvoke r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public void setMultipleAllowed(java.lang.String, boolean)
    {
        org.jivesoftware.whack.ExternalComponentManager r0;
        java.util.Map $r2;
        java.lang.Boolean $r3;
        java.lang.String r1;
        boolean z0;

        r0 := @this: org.jivesoftware.whack.ExternalComponentManager;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r2 = r0.<org.jivesoftware.whack.ExternalComponentManager: java.util.Map allowMultiple>;

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r3);

        return;
    }

    public void addComponent(java.lang.String, org.xmpp.component.Component) throws org.xmpp.component.ComponentException
    {
        org.jivesoftware.whack.ExternalComponentManager r0;
        org.xmpp.component.Component r2;
        int $i0;
        java.lang.String r1;
        java.lang.Integer $r3;

        r0 := @this: org.jivesoftware.whack.ExternalComponentManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.xmpp.component.Component;

        $i0 = r0.<org.jivesoftware.whack.ExternalComponentManager: int port>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        virtualinvoke r0.<org.jivesoftware.whack.ExternalComponentManager: void addComponent(java.lang.String,org.xmpp.component.Component,java.lang.Integer)>(r1, r2, $r3);

        return;
    }

    public void addComponent(java.lang.String, org.xmpp.component.Component, java.lang.Integer) throws org.xmpp.component.ComponentException
    {
        org.jivesoftware.whack.ExternalComponentManager r0;
        org.xmpp.component.ComponentException $r16;
        org.xmpp.packet.JID $r9;
        java.lang.Integer r7;
        java.util.Map $r2, $r5, $r6, $r11, $r17, $r18;
        int $i0;
        java.lang.String r1, $r8, $r10;
        boolean $z0;
        org.jivesoftware.whack.ExternalComponent $r3, $r13;
        java.lang.IllegalArgumentException $r15;
        org.xmpp.component.Component r4, $r14;
        java.lang.Object $r12;

        r0 := @this: org.jivesoftware.whack.ExternalComponentManager;

        r1 := @parameter0: java.lang.String;

        r4 := @parameter1: org.xmpp.component.Component;

        r7 := @parameter2: java.lang.Integer;

        $r2 = r0.<org.jivesoftware.whack.ExternalComponentManager: java.util.Map componentsByDomain>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        $r11 = r0.<org.jivesoftware.whack.ExternalComponentManager: java.util.Map componentsByDomain>;

        $r12 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r13 = (org.jivesoftware.whack.ExternalComponent) $r12;

        $r14 = virtualinvoke $r13.<org.jivesoftware.whack.ExternalComponent: org.xmpp.component.Component getComponent()>();

        if $r14 != r4 goto label1;

        return;

     label1:
        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Subdomain already in use by another component");

        throw $r15;

     label2:
        $r3 = new org.jivesoftware.whack.ExternalComponent;

        specialinvoke $r3.<org.jivesoftware.whack.ExternalComponent: void <init>(org.xmpp.component.Component,org.jivesoftware.whack.ExternalComponentManager)>(r4, r0);

     label3:
        $r5 = r0.<org.jivesoftware.whack.ExternalComponentManager: java.util.Map componentsByDomain>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r3);

        $r6 = r0.<org.jivesoftware.whack.ExternalComponentManager: java.util.Map components>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, $r3);

        $r8 = r0.<org.jivesoftware.whack.ExternalComponentManager: java.lang.String host>;

        $i0 = virtualinvoke r7.<java.lang.Integer: int intValue()>();

        virtualinvoke $r3.<org.jivesoftware.whack.ExternalComponent: void connect(java.lang.String,int,java.lang.String)>($r8, $i0, r1);

        $r9 = new org.xmpp.packet.JID;

        $r10 = virtualinvoke $r3.<org.jivesoftware.whack.ExternalComponent: java.lang.String getDomain()>();

        specialinvoke $r9.<org.xmpp.packet.JID: void <init>(java.lang.String,java.lang.String,java.lang.String)>(null, $r10, null);

        virtualinvoke $r3.<org.jivesoftware.whack.ExternalComponent: void initialize(org.xmpp.packet.JID,org.xmpp.component.ComponentManager)>($r9, r0);

     label4:
        goto label6;

     label5:
        $r16 := @caughtexception;

        $r17 = r0.<org.jivesoftware.whack.ExternalComponentManager: java.util.Map componentsByDomain>;

        interfaceinvoke $r17.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        $r18 = r0.<org.jivesoftware.whack.ExternalComponentManager: java.util.Map components>;

        interfaceinvoke $r18.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r4);

        throw $r16;

     label6:
        virtualinvoke $r3.<org.jivesoftware.whack.ExternalComponent: void start()>();

        return;

        catch org.xmpp.component.ComponentException from label3 to label4 with label5;
    }

    public void removeComponent(java.lang.String) throws org.xmpp.component.ComponentException
    {
        org.jivesoftware.whack.ExternalComponentManager r0;
        org.xmpp.component.Component $r6;
        java.util.Map $r2, $r5;
        java.lang.Object $r3;
        java.lang.String r1;
        org.jivesoftware.whack.ExternalComponent r4;

        r0 := @this: org.jivesoftware.whack.ExternalComponentManager;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.jivesoftware.whack.ExternalComponentManager: java.util.Map componentsByDomain>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        r4 = (org.jivesoftware.whack.ExternalComponent) $r3;

        if r4 == null goto label1;

        $r5 = r0.<org.jivesoftware.whack.ExternalComponentManager: java.util.Map components>;

        $r6 = virtualinvoke r4.<org.jivesoftware.whack.ExternalComponent: org.xmpp.component.Component getComponent()>();

        interfaceinvoke $r5.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r6);

        virtualinvoke r4.<org.jivesoftware.whack.ExternalComponent: void shutdown()>();

     label1:
        return;
    }

    public void sendPacket(org.xmpp.component.Component, org.xmpp.packet.Packet)
    {
        org.jivesoftware.whack.ExternalComponentManager r0;
        org.xmpp.component.Component r1;
        org.xmpp.packet.Packet r4;
        java.util.Map $r2;
        java.lang.Object $r3;
        org.jivesoftware.whack.ExternalComponent $r5;

        r0 := @this: org.jivesoftware.whack.ExternalComponentManager;

        r1 := @parameter0: org.xmpp.component.Component;

        r4 := @parameter1: org.xmpp.packet.Packet;

        $r2 = r0.<org.jivesoftware.whack.ExternalComponentManager: java.util.Map components>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r5 = (org.jivesoftware.whack.ExternalComponent) $r3;

        virtualinvoke $r5.<org.jivesoftware.whack.ExternalComponent: void send(org.xmpp.packet.Packet)>(r4);

        return;
    }

    public org.xmpp.packet.IQ query(org.xmpp.component.Component, org.xmpp.packet.IQ, long) throws org.xmpp.component.ComponentException
    {
        org.jivesoftware.whack.ExternalComponentManager r1;
        long l0;
        org.jivesoftware.whack.ExternalComponentManager$1 $r8;
        org.jivesoftware.whack.ExternalComponent r5;
        java.util.concurrent.LinkedBlockingQueue $r0;
        java.util.concurrent.TimeUnit $r9;
        org.xmpp.component.Component r2;
        java.lang.InterruptedException $r11;
        java.util.Map $r3;
        java.lang.Object $r4, $r10;
        java.lang.String $r7;
        org.xmpp.packet.IQ r6, r12;

        r1 := @this: org.jivesoftware.whack.ExternalComponentManager;

        r2 := @parameter0: org.xmpp.component.Component;

        r6 := @parameter1: org.xmpp.packet.IQ;

        l0 := @parameter2: long;

        $r0 = new java.util.concurrent.LinkedBlockingQueue;

        specialinvoke $r0.<java.util.concurrent.LinkedBlockingQueue: void <init>(int)>(8);

        $r3 = r1.<org.jivesoftware.whack.ExternalComponentManager: java.util.Map components>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r5 = (org.jivesoftware.whack.ExternalComponent) $r4;

        $r7 = virtualinvoke r6.<org.xmpp.packet.IQ: java.lang.String getID()>();

        $r8 = new org.jivesoftware.whack.ExternalComponentManager$1;

        specialinvoke $r8.<org.jivesoftware.whack.ExternalComponentManager$1: void <init>(org.jivesoftware.whack.ExternalComponentManager,java.util.concurrent.LinkedBlockingQueue)>(r1, $r0);

        virtualinvoke r5.<org.jivesoftware.whack.ExternalComponent: void addIQResultListener(java.lang.String,org.jivesoftware.whack.IQResultListener,long)>($r7, $r8, l0);

        virtualinvoke r1.<org.jivesoftware.whack.ExternalComponentManager: void sendPacket(org.xmpp.component.Component,org.xmpp.packet.Packet)>(r2, r6);

        r12 = null;

     label1:
        $r9 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $r10 = virtualinvoke $r0.<java.util.concurrent.LinkedBlockingQueue: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>(l0, $r9);

        r12 = (org.xmpp.packet.IQ) $r10;

     label2:
        goto label4;

     label3:
        $r11 := @caughtexception;

     label4:
        return r12;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    public void query(org.xmpp.component.Component, org.xmpp.packet.IQ, org.jivesoftware.whack.IQResultListener) throws org.xmpp.component.ComponentException
    {
        org.jivesoftware.whack.ExternalComponentManager r0;
        org.jivesoftware.whack.ExternalComponent r4;
        org.jivesoftware.whack.IQResultListener r7;
        org.xmpp.component.Component r1;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.String $r6;
        org.xmpp.packet.IQ r5;

        r0 := @this: org.jivesoftware.whack.ExternalComponentManager;

        r1 := @parameter0: org.xmpp.component.Component;

        r5 := @parameter1: org.xmpp.packet.IQ;

        r7 := @parameter2: org.jivesoftware.whack.IQResultListener;

        $r2 = r0.<org.jivesoftware.whack.ExternalComponentManager: java.util.Map components>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (org.jivesoftware.whack.ExternalComponent) $r3;

        $r6 = virtualinvoke r5.<org.xmpp.packet.IQ: java.lang.String getID()>();

        virtualinvoke r4.<org.jivesoftware.whack.ExternalComponent: void addIQResultListener(java.lang.String,org.jivesoftware.whack.IQResultListener,long)>($r6, r7, 300000L);

        virtualinvoke r0.<org.jivesoftware.whack.ExternalComponentManager: void sendPacket(org.xmpp.component.Component,org.xmpp.packet.Packet)>(r1, r5);

        return;
    }

    public java.lang.String getProperty(java.lang.String)
    {
        org.jivesoftware.whack.ExternalComponentManager r0;
        java.util.prefs.Preferences $r2;
        java.lang.StringBuilder $r1, $r4, $r6;
        java.lang.String $r3, r5, $r7, $r8;

        r0 := @this: org.jivesoftware.whack.ExternalComponentManager;

        r5 := @parameter0: java.lang.String;

        $r2 = r0.<org.jivesoftware.whack.ExternalComponentManager: java.util.prefs.Preferences preferences>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = specialinvoke r0.<org.jivesoftware.whack.ExternalComponentManager: java.lang.String getPreferencesPrefix()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = virtualinvoke $r2.<java.util.prefs.Preferences: java.lang.String get(java.lang.String,java.lang.String)>($r7, null);

        return $r8;
    }

    public void setProperty(java.lang.String, java.lang.String)
    {
        org.jivesoftware.whack.ExternalComponentManager r0;
        java.util.prefs.Preferences $r2;
        java.lang.StringBuilder $r1, $r4, $r6;
        java.lang.String $r3, r5, $r7, r8;

        r0 := @this: org.jivesoftware.whack.ExternalComponentManager;

        r5 := @parameter0: java.lang.String;

        r8 := @parameter1: java.lang.String;

        $r2 = r0.<org.jivesoftware.whack.ExternalComponentManager: java.util.prefs.Preferences preferences>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = specialinvoke r0.<org.jivesoftware.whack.ExternalComponentManager: java.lang.String getPreferencesPrefix()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.util.prefs.Preferences: void put(java.lang.String,java.lang.String)>($r7, r8);

        return;
    }

    private java.lang.String getPreferencesPrefix()
    {
        org.jivesoftware.whack.ExternalComponentManager r0;
        java.lang.StringBuilder $r3, $r4, $r6, $r7;
        java.lang.String $r1, $r2, $r5, $r8;

        r0 := @this: org.jivesoftware.whack.ExternalComponentManager;

        $r1 = r0.<org.jivesoftware.whack.ExternalComponentManager: java.lang.String preferencesPrefix>;

        if $r1 != null goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("whack.");

        $r5 = r0.<org.jivesoftware.whack.ExternalComponentManager: java.lang.String domain>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<org.jivesoftware.whack.ExternalComponentManager: java.lang.String preferencesPrefix> = $r8;

     label1:
        $r2 = r0.<org.jivesoftware.whack.ExternalComponentManager: java.lang.String preferencesPrefix>;

        return $r2;
    }

    public void setServerName(java.lang.String)
    {
        org.jivesoftware.whack.ExternalComponentManager r0;
        java.lang.String r1;

        r0 := @this: org.jivesoftware.whack.ExternalComponentManager;

        r1 := @parameter0: java.lang.String;

        r0.<org.jivesoftware.whack.ExternalComponentManager: java.lang.String domain> = r1;

        return;
    }

    public java.lang.String getServerName()
    {
        org.jivesoftware.whack.ExternalComponentManager r0;
        java.lang.String $r1;

        r0 := @this: org.jivesoftware.whack.ExternalComponentManager;

        $r1 = r0.<org.jivesoftware.whack.ExternalComponentManager: java.lang.String domain>;

        return $r1;
    }

    public int getConnectTimeout()
    {
        org.jivesoftware.whack.ExternalComponentManager r0;
        int $i0;

        r0 := @this: org.jivesoftware.whack.ExternalComponentManager;

        $i0 = r0.<org.jivesoftware.whack.ExternalComponentManager: int connectTimeout>;

        return $i0;
    }

    public void setConnectTimeout(int)
    {
        org.jivesoftware.whack.ExternalComponentManager r0;
        int i0;

        r0 := @this: org.jivesoftware.whack.ExternalComponentManager;

        i0 := @parameter0: int;

        r0.<org.jivesoftware.whack.ExternalComponentManager: int connectTimeout> = i0;

        return;
    }

    public boolean isExternalMode()
    {
        org.jivesoftware.whack.ExternalComponentManager r0;

        r0 := @this: org.jivesoftware.whack.ExternalComponentManager;

        return 1;
    }

    public org.xmpp.component.Log getLog()
    {
        org.jivesoftware.whack.ExternalComponentManager r0;
        org.xmpp.component.Log $r1;

        r0 := @this: org.jivesoftware.whack.ExternalComponentManager;

        $r1 = r0.<org.jivesoftware.whack.ExternalComponentManager: org.xmpp.component.Log logger>;

        return $r1;
    }

    private void createDummyLogger()
    {
        org.jivesoftware.whack.ExternalComponentManager r0;
        org.jivesoftware.whack.ExternalComponentManager$2 $r1;

        r0 := @this: org.jivesoftware.whack.ExternalComponentManager;

        $r1 = new org.jivesoftware.whack.ExternalComponentManager$2;

        specialinvoke $r1.<org.jivesoftware.whack.ExternalComponentManager$2: void <init>(org.jivesoftware.whack.ExternalComponentManager)>(r0);

        r0.<org.jivesoftware.whack.ExternalComponentManager: org.xmpp.component.Log logger> = $r1;

        return;
    }
}
