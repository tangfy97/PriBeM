public class org.apache.pdfbox.filter.JBIG2Filter extends java.lang.Object implements org.apache.pdfbox.filter.Filter
{
    private static final org.apache.commons.logging.Log LOG;

    public void <init>()
    {
        org.apache.pdfbox.filter.JBIG2Filter r0;

        r0 := @this: org.apache.pdfbox.filter.JBIG2Filter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void decode(java.io.InputStream, java.io.OutputStream, org.apache.pdfbox.cos.COSDictionary, int) throws java.io.IOException
    {
        byte[] $r23;
        java.awt.image.DataBufferByte $r22;
        org.apache.pdfbox.filter.JBIG2Filter r32;
        boolean $z0;
        java.awt.image.BufferedImage $r11, $r24, r35;
        javax.imageio.stream.ImageInputStream $r10;
        org.apache.pdfbox.cos.COSDictionary r3, r6;
        org.apache.pdfbox.cos.COSBase $r5, $r8, $r30;
        java.awt.Graphics $r25;
        java.lang.StringBuilder $r16, $r18, $r19;
        java.awt.image.DataBuffer $r15;
        org.apache.pdfbox.cos.COSInteger r9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7;
        java.awt.image.Raster $r14;
        java.lang.String $r20;
        org.apache.pdfbox.cos.COSStream r34;
        org.apache.pdfbox.cos.COSName $r4, $r7, $r29;
        java.io.OutputStream r21;
        javax.imageio.ImageReader r2;
        java.util.Iterator $r0;
        java.io.SequenceInputStream $r27;
        java.awt.image.ColorModel $r13;
        java.lang.Object $r1;
        org.apache.commons.logging.Log $r12, $r17, $r26, $r31;
        java.io.InputStream $r28, r33;

        r32 := @this: org.apache.pdfbox.filter.JBIG2Filter;

        r33 := @parameter0: java.io.InputStream;

        r21 := @parameter1: java.io.OutputStream;

        r3 := @parameter2: org.apache.pdfbox.cos.COSDictionary;

        i7 := @parameter3: int;

        $r0 = staticinvoke <javax.imageio.ImageIO: java.util.Iterator getImageReadersByFormatName(java.lang.String)>("JBIG2");

        $z0 = interfaceinvoke $r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r31 = <org.apache.pdfbox.filter.JBIG2Filter: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r31.<org.apache.commons.logging.Log: void error(java.lang.Object)>("Can\'t find an ImageIO plugin to decode the JBIG2 encoded datastream.");

        return;

     label1:
        $r1 = interfaceinvoke $r0.<java.util.Iterator: java.lang.Object next()>();

        r2 = (javax.imageio.ImageReader) $r1;

        $r4 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName DECODE_PARMS>;

        $r5 = virtualinvoke r3.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r4);

        r6 = (org.apache.pdfbox.cos.COSDictionary) $r5;

        $r7 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName BITS_PER_COMPONENT>;

        $r8 = virtualinvoke r3.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r7);

        r9 = (org.apache.pdfbox.cos.COSInteger) $r8;

        r34 = null;

        if r6 == null goto label2;

        $r29 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName JBIG2_GLOBALS>;

        $r30 = virtualinvoke r6.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r29);

        r34 = (org.apache.pdfbox.cos.COSStream) $r30;

     label2:
        if r34 == null goto label3;

        $r27 = new java.io.SequenceInputStream;

        $r28 = virtualinvoke r34.<org.apache.pdfbox.cos.COSStream: java.io.InputStream getUnfilteredStream()>();

        specialinvoke $r27.<java.io.SequenceInputStream: void <init>(java.io.InputStream,java.io.InputStream)>($r28, r33);

        r33 = $r27;

     label3:
        $r10 = staticinvoke <javax.imageio.ImageIO: javax.imageio.stream.ImageInputStream createImageInputStream(java.lang.Object)>(r33);

        virtualinvoke r2.<javax.imageio.ImageReader: void setInput(java.lang.Object)>($r10);

        $r11 = virtualinvoke r2.<javax.imageio.ImageReader: java.awt.image.BufferedImage read(int)>(0);

        r35 = $r11;

        interfaceinvoke $r10.<javax.imageio.stream.ImageInputStream: void close()>();

        virtualinvoke r2.<javax.imageio.ImageReader: void dispose()>();

        if $r11 == null goto label8;

        $r13 = virtualinvoke $r11.<java.awt.image.BufferedImage: java.awt.image.ColorModel getColorModel()>();

        $i0 = virtualinvoke $r13.<java.awt.image.ColorModel: int getPixelSize()>();

        $i1 = virtualinvoke r9.<org.apache.pdfbox.cos.COSInteger: int intValue()>();

        if $i0 == $i1 goto label5;

        $i4 = virtualinvoke r9.<org.apache.pdfbox.cos.COSInteger: int intValue()>();

        if $i4 == 1 goto label4;

        $r26 = <org.apache.pdfbox.filter.JBIG2Filter: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r26.<org.apache.commons.logging.Log: void error(java.lang.Object)>("Do not know how to deal with JBIG2 with more than 1 bit");

        return;

     label4:
        $r24 = new java.awt.image.BufferedImage;

        $i5 = virtualinvoke $r11.<java.awt.image.BufferedImage: int getWidth()>();

        $i6 = virtualinvoke $r11.<java.awt.image.BufferedImage: int getHeight()>();

        specialinvoke $r24.<java.awt.image.BufferedImage: void <init>(int,int,int)>($i5, $i6, 12);

        $r25 = virtualinvoke $r24.<java.awt.image.BufferedImage: java.awt.Graphics getGraphics()>();

        virtualinvoke $r25.<java.awt.Graphics: boolean drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)>($r11, 0, 0, null);

        virtualinvoke $r25.<java.awt.Graphics: void dispose()>();

        r35 = $r24;

     label5:
        $r14 = virtualinvoke r35.<java.awt.image.BufferedImage: java.awt.image.Raster getData()>();

        $r15 = virtualinvoke $r14.<java.awt.image.Raster: java.awt.image.DataBuffer getDataBuffer()>();

        $i2 = virtualinvoke $r15.<java.awt.image.DataBuffer: int getDataType()>();

        if $i2 != 0 goto label6;

        $r22 = (java.awt.image.DataBufferByte) $r15;

        $r23 = virtualinvoke $r22.<java.awt.image.DataBufferByte: byte[] getData()>();

        virtualinvoke r21.<java.io.OutputStream: void write(byte[])>($r23);

        goto label7;

     label6:
        $r17 = <org.apache.pdfbox.filter.JBIG2Filter: org.apache.commons.logging.Log LOG>;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Image data buffer not of type byte but type ");

        $i3 = virtualinvoke $r15.<java.awt.image.DataBuffer: int getDataType()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r17.<org.apache.commons.logging.Log: void error(java.lang.Object)>($r20);

     label7:
        goto label9;

     label8:
        $r12 = <org.apache.pdfbox.filter.JBIG2Filter: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r12.<org.apache.commons.logging.Log: void error(java.lang.Object)>("Something went wrong when decoding the JBIG2 encoded datastream.");

     label9:
        return;
    }

    public void encode(java.io.InputStream, java.io.OutputStream, org.apache.pdfbox.cos.COSDictionary, int) throws java.io.IOException
    {
        java.io.PrintStream $r0;
        org.apache.pdfbox.filter.JBIG2Filter r1;
        java.io.OutputStream r3;
        org.apache.pdfbox.cos.COSDictionary r4;
        int i0;
        java.io.InputStream r2;

        r1 := @this: org.apache.pdfbox.filter.JBIG2Filter;

        r2 := @parameter0: java.io.InputStream;

        r3 := @parameter1: java.io.OutputStream;

        r4 := @parameter2: org.apache.pdfbox.cos.COSDictionary;

        i0 := @parameter3: int;

        $r0 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("Warning: JBIG2.encode is not implemented yet, skipping this stream.");

        return;
    }

    static void <clinit>()
    {
        org.apache.commons.logging.Log $r0;

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lorg/apache/pdfbox/filter/JBIG2Filter;");

        <org.apache.pdfbox.filter.JBIG2Filter: org.apache.commons.logging.Log LOG> = $r0;

        return;
    }
}
