public class org.apache.fontbox.cmap.CMap extends java.lang.Object
{
    private static final org.apache.commons.logging.Log LOG;
    private int wmode;
    private java.lang.String cmapName;
    private java.lang.String cmapVersion;
    private int cmapType;
    private java.lang.String registry;
    private java.lang.String ordering;
    private int supplement;
    private java.util.List codeSpaceRanges;
    private java.util.Map singleByteMappings;
    private java.util.Map doubleByteMappings;
    private final java.util.Map cid2charMappings;
    private final java.util.Map char2CIDMappings;
    private final java.util.List cidRanges;
    private static final java.lang.String SPACE;
    private int spaceMapping;

    public void <init>()
    {
        java.util.HashMap $r8, $r9, $r10, $r11;
        org.apache.fontbox.cmap.CMap r0;
        java.util.ArrayList $r7;
        int $i1, $i3;
        java.util.LinkedList $r12;

        r0 := @this: org.apache.fontbox.cmap.CMap;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.fontbox.cmap.CMap: int wmode> = 0;

        r0.<org.apache.fontbox.cmap.CMap: java.lang.String cmapName> = null;

        r0.<org.apache.fontbox.cmap.CMap: java.lang.String cmapVersion> = null;

        $i1 = (int) -1;

        r0.<org.apache.fontbox.cmap.CMap: int cmapType> = $i1;

        r0.<org.apache.fontbox.cmap.CMap: java.lang.String registry> = null;

        r0.<org.apache.fontbox.cmap.CMap: java.lang.String ordering> = null;

        r0.<org.apache.fontbox.cmap.CMap: int supplement> = 0;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.fontbox.cmap.CMap: java.util.List codeSpaceRanges> = $r7;

        $r8 = new java.util.HashMap;

        specialinvoke $r8.<java.util.HashMap: void <init>()>();

        r0.<org.apache.fontbox.cmap.CMap: java.util.Map singleByteMappings> = $r8;

        $r9 = new java.util.HashMap;

        specialinvoke $r9.<java.util.HashMap: void <init>()>();

        r0.<org.apache.fontbox.cmap.CMap: java.util.Map doubleByteMappings> = $r9;

        $r10 = new java.util.HashMap;

        specialinvoke $r10.<java.util.HashMap: void <init>()>();

        r0.<org.apache.fontbox.cmap.CMap: java.util.Map cid2charMappings> = $r10;

        $r11 = new java.util.HashMap;

        specialinvoke $r11.<java.util.HashMap: void <init>()>();

        r0.<org.apache.fontbox.cmap.CMap: java.util.Map char2CIDMappings> = $r11;

        $r12 = new java.util.LinkedList;

        specialinvoke $r12.<java.util.LinkedList: void <init>()>();

        r0.<org.apache.fontbox.cmap.CMap: java.util.List cidRanges> = $r12;

        $i3 = (int) -1;

        r0.<org.apache.fontbox.cmap.CMap: int spaceMapping> = $i3;

        return;
    }

    public boolean hasOneByteMappings()
    {
        java.util.Map $r1;
        int $i0;
        org.apache.fontbox.cmap.CMap r0;
        boolean $z0;

        r0 := @this: org.apache.fontbox.cmap.CMap;

        $r1 = r0.<org.apache.fontbox.cmap.CMap: java.util.Map singleByteMappings>;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean hasTwoByteMappings()
    {
        java.util.Map $r1;
        int $i0;
        org.apache.fontbox.cmap.CMap r0;
        boolean $z0;

        r0 := @this: org.apache.fontbox.cmap.CMap;

        $r1 = r0.<org.apache.fontbox.cmap.CMap: java.util.Map doubleByteMappings>;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean hasCIDMappings()
    {
        java.util.List $r2;
        java.util.Map $r1;
        org.apache.fontbox.cmap.CMap r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.fontbox.cmap.CMap;

        $r1 = r0.<org.apache.fontbox.cmap.CMap: java.util.Map char2CIDMappings>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.fontbox.cmap.CMap: java.util.List cidRanges>;

        $z1 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>();

        if $z1 != 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public java.lang.String lookup(byte[], int, int)
    {
        byte[] r1;
        int i0, i1, $i2;
        java.lang.String $r2;
        org.apache.fontbox.cmap.CMap r0;

        r0 := @this: org.apache.fontbox.cmap.CMap;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = specialinvoke r0.<org.apache.fontbox.cmap.CMap: int getCodeFromArray(byte[],int,int)>(r1, i0, i1);

        $r2 = virtualinvoke r0.<org.apache.fontbox.cmap.CMap: java.lang.String lookup(int,int)>($i2, i1);

        return $r2;
    }

    public java.lang.String lookup(int, int)
    {
        java.lang.Integer $r2, $r5;
        org.apache.fontbox.cmap.CMap r0;
        java.util.Map $r1, $r4;
        int i0, i1;
        java.lang.Object $r3, $r6;
        java.lang.String r7;

        r0 := @this: org.apache.fontbox.cmap.CMap;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        r7 = null;

        if i0 != 1 goto label1;

        $r4 = r0.<org.apache.fontbox.cmap.CMap: java.util.Map singleByteMappings>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r6 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        r7 = (java.lang.String) $r6;

        goto label2;

     label1:
        if i0 != 2 goto label2;

        $r1 = r0.<org.apache.fontbox.cmap.CMap: java.util.Map doubleByteMappings>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        r7 = (java.lang.String) $r3;

     label2:
        return r7;
    }

    public java.lang.String lookupCID(int)
    {
        java.lang.Integer $r2, $r9;
        java.util.Map $r1, $r8;
        int i0, $i1, $i4;
        java.lang.String $r7, $r11;
        boolean $z0, $z1;
        java.util.Iterator $r4;
        char $c2;
        org.apache.fontbox.cmap.CMap r0;
        java.util.List $r3;
        java.lang.Object $r5, $r10;
        org.apache.fontbox.cmap.CIDRange r6;

        r0 := @this: org.apache.fontbox.cmap.CMap;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.fontbox.cmap.CMap: java.util.Map cid2charMappings>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        $r8 = r0.<org.apache.fontbox.cmap.CMap: java.util.Map cid2charMappings>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r10 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>($r9);

        $r11 = (java.lang.String) $r10;

        return $r11;

     label1:
        $r3 = r0.<org.apache.fontbox.cmap.CMap: java.util.List cidRanges>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.fontbox.cmap.CIDRange) $r5;

        $i1 = virtualinvoke r6.<org.apache.fontbox.cmap.CIDRange: int unmap(int)>(i0);

        $i4 = (int) -1;

        if $i1 == $i4 goto label3;

        $c2 = (char) $i1;

        $r7 = staticinvoke <java.lang.Character: java.lang.String toString(char)>($c2);

        return $r7;

     label3:
        goto label2;

     label4:
        return null;
    }

    public int lookupCID(byte[], int, int)
    {
        byte[] r1;
        java.lang.Integer $r3, $r9, $r11;
        java.util.Map $r2, $r8;
        int i0, i1, $i2, $i4, $i5, $i7, $i9, $i11;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r5;
        char $c3;
        org.apache.fontbox.cmap.CMap r0;
        java.util.List $r4;
        java.lang.Object $r6, $r10;
        org.apache.fontbox.cmap.CIDRange r7;

        r0 := @this: org.apache.fontbox.cmap.CMap;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = virtualinvoke r0.<org.apache.fontbox.cmap.CMap: boolean isInCodeSpaceRanges(byte[],int,int)>(r1, i0, i1);

        if $z0 == 0 goto label5;

        $i2 = specialinvoke r0.<org.apache.fontbox.cmap.CMap: int getCodeFromArray(byte[],int,int)>(r1, i0, i1);

        $r2 = r0.<org.apache.fontbox.cmap.CMap: java.util.Map char2CIDMappings>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $z1 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r3);

        if $z1 == 0 goto label1;

        $r8 = r0.<org.apache.fontbox.cmap.CMap: java.util.Map char2CIDMappings>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r10 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>($r9);

        $r11 = (java.lang.Integer) $r10;

        $i5 = virtualinvoke $r11.<java.lang.Integer: int intValue()>();

        return $i5;

     label1:
        $r4 = r0.<org.apache.fontbox.cmap.CMap: java.util.List cidRanges>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z2 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label4;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.apache.fontbox.cmap.CIDRange) $r6;

        $c3 = (char) $i2;

        $i4 = virtualinvoke r7.<org.apache.fontbox.cmap.CIDRange: int map(char)>($c3);

        $i7 = (int) -1;

        if $i4 == $i7 goto label3;

        return $i4;

     label3:
        goto label2;

     label4:
        $i9 = (int) -1;

        return $i9;

     label5:
        $i11 = (int) -1;

        return $i11;
    }

    private int getCodeFromArray(byte[], int, int)
    {
        byte[] r0;
        org.apache.fontbox.cmap.CMap r1;
        byte $b3;
        int i0, i1, $i2, $i4, $i5, i6, i7, i8, $i9;

        r1 := @this: org.apache.fontbox.cmap.CMap;

        r0 := @parameter0: byte[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        i6 = 0;

        i7 = 0;

     label1:
        if i7 >= i0 goto label2;

        i8 = i6 << 8;

        $i2 = i1 + i7;

        $b3 = r0[$i2];

        $i9 = (int) $b3;

        $i4 = $i9 + 256;

        $i5 = $i4 % 256;

        i6 = i8 | $i5;

        i7 = i7 + 1;

        goto label1;

     label2:
        return i6;
    }

    public void addMapping(byte[], java.lang.String) throws java.io.IOException
    {
        byte[] r0;
        java.lang.Integer $r10, $r12;
        java.util.Map $r9, $r11;
        int i0, $i1, $i2;
        java.lang.String r2, $r3, $r8;
        boolean $z0;
        org.apache.fontbox.cmap.CMap r1;
        java.lang.StringBuilder $r4, $r6, $r7;
        org.apache.commons.logging.Log $r5;

        r1 := @this: org.apache.fontbox.cmap.CMap;

        r0 := @parameter0: byte[];

        r2 := @parameter1: java.lang.String;

        i0 = lengthof r0;

        $i1 = specialinvoke r1.<org.apache.fontbox.cmap.CMap: int getCodeFromArray(byte[],int,int)>(r0, 0, i0);

        $r3 = " ";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z0 == 0 goto label1;

        r1.<org.apache.fontbox.cmap.CMap: int spaceMapping> = $i1;

     label1:
        if i0 != 1 goto label2;

        $r11 = r1.<org.apache.fontbox.cmap.CMap: java.util.Map singleByteMappings>;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, r2);

        goto label4;

     label2:
        if i0 != 2 goto label3;

        $r9 = r1.<org.apache.fontbox.cmap.CMap: java.util.Map doubleByteMappings>;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, r2);

        goto label4;

     label3:
        $r5 = <org.apache.fontbox.cmap.CMap: org.apache.commons.logging.Log LOG>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Mapping code should be 1 or two bytes and not ");

        $i2 = lengthof r0;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r5.<org.apache.commons.logging.Log: void error(java.lang.Object)>($r8);

     label4:
        return;
    }

    public void addCIDMapping(int, java.lang.String) throws java.io.IOException
    {
        java.util.Map $r1, $r4;
        int i0;
        java.lang.String r3;
        java.lang.Integer $r2, $r5;
        org.apache.fontbox.cmap.CMap r0;

        r0 := @this: org.apache.fontbox.cmap.CMap;

        i0 := @parameter0: int;

        r3 := @parameter1: java.lang.String;

        $r1 = r0.<org.apache.fontbox.cmap.CMap: java.util.Map cid2charMappings>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, r3);

        $r4 = r0.<org.apache.fontbox.cmap.CMap: java.util.Map char2CIDMappings>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r5);

        return;
    }

    public void addCIDRange(char, char, int)
    {
        java.util.List $r2;
        int i2;
        char c0, c1;
        org.apache.fontbox.cmap.CIDRange $r1;
        org.apache.fontbox.cmap.CMap r0;

        r0 := @this: org.apache.fontbox.cmap.CMap;

        c0 := @parameter0: char;

        c1 := @parameter1: char;

        i2 := @parameter2: int;

        $r2 = r0.<org.apache.fontbox.cmap.CMap: java.util.List cidRanges>;

        $r1 = new org.apache.fontbox.cmap.CIDRange;

        specialinvoke $r1.<org.apache.fontbox.cmap.CIDRange: void <init>(char,char,int)>(c0, c1, i2);

        interfaceinvoke $r2.<java.util.List: void add(int,java.lang.Object)>(0, $r1);

        return;
    }

    public void addCodespaceRange(org.apache.fontbox.cmap.CodespaceRange)
    {
        java.util.List $r2;
        org.apache.fontbox.cmap.CodespaceRange r1;
        org.apache.fontbox.cmap.CMap r0;

        r0 := @this: org.apache.fontbox.cmap.CMap;

        r1 := @parameter0: org.apache.fontbox.cmap.CodespaceRange;

        $r2 = r0.<org.apache.fontbox.cmap.CMap: java.util.List codeSpaceRanges>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public java.util.List getCodeSpaceRanges()
    {
        java.util.List $r1;
        org.apache.fontbox.cmap.CMap r0;

        r0 := @this: org.apache.fontbox.cmap.CMap;

        $r1 = r0.<org.apache.fontbox.cmap.CMap: java.util.List codeSpaceRanges>;

        return $r1;
    }

    public void useCmap(org.apache.fontbox.cmap.CMap)
    {
        org.apache.fontbox.cmap.CMap r0, r1;
        java.util.List $r2, $r3;
        java.util.Map $r4, $r5, $r6, $r7;

        r0 := @this: org.apache.fontbox.cmap.CMap;

        r1 := @parameter0: org.apache.fontbox.cmap.CMap;

        $r3 = r0.<org.apache.fontbox.cmap.CMap: java.util.List codeSpaceRanges>;

        $r2 = r1.<org.apache.fontbox.cmap.CMap: java.util.List codeSpaceRanges>;

        interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>($r2);

        $r5 = r0.<org.apache.fontbox.cmap.CMap: java.util.Map singleByteMappings>;

        $r4 = r1.<org.apache.fontbox.cmap.CMap: java.util.Map singleByteMappings>;

        interfaceinvoke $r5.<java.util.Map: void putAll(java.util.Map)>($r4);

        $r7 = r0.<org.apache.fontbox.cmap.CMap: java.util.Map doubleByteMappings>;

        $r6 = r1.<org.apache.fontbox.cmap.CMap: java.util.Map doubleByteMappings>;

        interfaceinvoke $r7.<java.util.Map: void putAll(java.util.Map)>($r6);

        return;
    }

    public boolean isInCodeSpaceRanges(byte[])
    {
        byte[] r1;
        int $i0;
        org.apache.fontbox.cmap.CMap r0;
        boolean $z0;

        r0 := @this: org.apache.fontbox.cmap.CMap;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        $z0 = virtualinvoke r0.<org.apache.fontbox.cmap.CMap: boolean isInCodeSpaceRanges(byte[],int,int)>(r1, 0, $i0);

        return $z0;
    }

    public boolean isInCodeSpaceRanges(byte[], int, int)
    {
        byte[] r5;
        java.util.Iterator $r2;
        org.apache.fontbox.cmap.CMap r0;
        java.util.List $r1;
        int i0, i1;
        java.lang.Object $r3;
        org.apache.fontbox.cmap.CodespaceRange r4;
        boolean $z0, $z1;

        r0 := @this: org.apache.fontbox.cmap.CMap;

        r5 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = r0.<org.apache.fontbox.cmap.CMap: java.util.List codeSpaceRanges>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.fontbox.cmap.CodespaceRange) $r3;

        if r4 == null goto label2;

        $z1 = virtualinvoke r4.<org.apache.fontbox.cmap.CodespaceRange: boolean isInRange(byte[],int,int)>(r5, i0, i1);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    public int getWMode()
    {
        int $i0;
        org.apache.fontbox.cmap.CMap r0;

        r0 := @this: org.apache.fontbox.cmap.CMap;

        $i0 = r0.<org.apache.fontbox.cmap.CMap: int wmode>;

        return $i0;
    }

    public void setWMode(int)
    {
        int i0;
        org.apache.fontbox.cmap.CMap r0;

        r0 := @this: org.apache.fontbox.cmap.CMap;

        i0 := @parameter0: int;

        r0.<org.apache.fontbox.cmap.CMap: int wmode> = i0;

        return;
    }

    public java.lang.String getName()
    {
        java.lang.String $r1;
        org.apache.fontbox.cmap.CMap r0;

        r0 := @this: org.apache.fontbox.cmap.CMap;

        $r1 = r0.<org.apache.fontbox.cmap.CMap: java.lang.String cmapName>;

        return $r1;
    }

    public void setName(java.lang.String)
    {
        java.lang.String r1;
        org.apache.fontbox.cmap.CMap r0;

        r0 := @this: org.apache.fontbox.cmap.CMap;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.fontbox.cmap.CMap: java.lang.String cmapName> = r1;

        return;
    }

    public java.lang.String getVersion()
    {
        java.lang.String $r1;
        org.apache.fontbox.cmap.CMap r0;

        r0 := @this: org.apache.fontbox.cmap.CMap;

        $r1 = r0.<org.apache.fontbox.cmap.CMap: java.lang.String cmapVersion>;

        return $r1;
    }

    public void setVersion(java.lang.String)
    {
        java.lang.String r1;
        org.apache.fontbox.cmap.CMap r0;

        r0 := @this: org.apache.fontbox.cmap.CMap;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.fontbox.cmap.CMap: java.lang.String cmapVersion> = r1;

        return;
    }

    public int getType()
    {
        int $i0;
        org.apache.fontbox.cmap.CMap r0;

        r0 := @this: org.apache.fontbox.cmap.CMap;

        $i0 = r0.<org.apache.fontbox.cmap.CMap: int cmapType>;

        return $i0;
    }

    public void setType(int)
    {
        int i0;
        org.apache.fontbox.cmap.CMap r0;

        r0 := @this: org.apache.fontbox.cmap.CMap;

        i0 := @parameter0: int;

        r0.<org.apache.fontbox.cmap.CMap: int cmapType> = i0;

        return;
    }

    public java.lang.String getRegistry()
    {
        java.lang.String $r1;
        org.apache.fontbox.cmap.CMap r0;

        r0 := @this: org.apache.fontbox.cmap.CMap;

        $r1 = r0.<org.apache.fontbox.cmap.CMap: java.lang.String registry>;

        return $r1;
    }

    public void setRegistry(java.lang.String)
    {
        java.lang.String r1;
        org.apache.fontbox.cmap.CMap r0;

        r0 := @this: org.apache.fontbox.cmap.CMap;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.fontbox.cmap.CMap: java.lang.String registry> = r1;

        return;
    }

    public java.lang.String getOrdering()
    {
        java.lang.String $r1;
        org.apache.fontbox.cmap.CMap r0;

        r0 := @this: org.apache.fontbox.cmap.CMap;

        $r1 = r0.<org.apache.fontbox.cmap.CMap: java.lang.String ordering>;

        return $r1;
    }

    public void setOrdering(java.lang.String)
    {
        java.lang.String r1;
        org.apache.fontbox.cmap.CMap r0;

        r0 := @this: org.apache.fontbox.cmap.CMap;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.fontbox.cmap.CMap: java.lang.String ordering> = r1;

        return;
    }

    public int getSupplement()
    {
        int $i0;
        org.apache.fontbox.cmap.CMap r0;

        r0 := @this: org.apache.fontbox.cmap.CMap;

        $i0 = r0.<org.apache.fontbox.cmap.CMap: int supplement>;

        return $i0;
    }

    public void setSupplement(int)
    {
        int i0;
        org.apache.fontbox.cmap.CMap r0;

        r0 := @this: org.apache.fontbox.cmap.CMap;

        i0 := @parameter0: int;

        r0.<org.apache.fontbox.cmap.CMap: int supplement> = i0;

        return;
    }

    public int getSpaceMapping()
    {
        int $i0;
        org.apache.fontbox.cmap.CMap r0;

        r0 := @this: org.apache.fontbox.cmap.CMap;

        $i0 = r0.<org.apache.fontbox.cmap.CMap: int spaceMapping>;

        return $i0;
    }

    static void <clinit>()
    {
        org.apache.commons.logging.Log $r0;

        <org.apache.fontbox.cmap.CMap: java.lang.String SPACE> = " ";

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lorg/apache/fontbox/cmap/CMap;");

        <org.apache.fontbox.cmap.CMap: org.apache.commons.logging.Log LOG> = $r0;

        return;
    }
}
