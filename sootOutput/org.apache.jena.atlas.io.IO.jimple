public class org.apache.jena.atlas.io.IO extends java.lang.Object
{
    public static final int EOF;
    public static final int UNSET;
    public static final java.lang.String encodingUTF8;
    public static final java.lang.String encodingAscii;
    private static java.nio.charset.Charset utf8;
    private static java.nio.charset.Charset ascii;
    private static final int BUFFER_SIZE;

    public void <init>()
    {
        org.apache.jena.atlas.io.IO r0;

        r0 := @this: org.apache.jena.atlas.io.IO;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.io.InputStream openFile(java.lang.String)
    {
        org.apache.jena.atlas.AtlasException $r3;
        java.lang.String r0;
        java.lang.Exception $r2;
        java.io.InputStream $r1;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <org.apache.jena.atlas.io.IO: java.io.InputStream openFileEx(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new org.apache.jena.atlas.AtlasException;

        specialinvoke $r3.<org.apache.jena.atlas.AtlasException: void <init>(java.lang.Throwable)>($r2);

        throw $r3;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static java.io.InputStream openFileEx(java.lang.String) throws java.io.IOException
    {
        java.util.zip.GZIPInputStream $r2;
        java.io.FileInputStream $r1;
        int $i0;
        java.lang.String $r3, $r4, r5;
        java.io.InputStream $r0, r6;
        boolean $z0, $z1, $z2;

        r5 := @parameter0: java.lang.String;

        if r5 == null goto label1;

        $z0 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("-");

        if $z0 == 0 goto label2;

     label1:
        $r0 = <java.lang.System: java.io.InputStream in>;

        return $r0;

     label2:
        $z1 = virtualinvoke r5.<java.lang.String: boolean startsWith(java.lang.String)>("file:");

        if $z1 == 0 goto label3;

        $r3 = "file:";

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        $r4 = virtualinvoke r5.<java.lang.String: java.lang.String substring(int)>($i0);

        r5 = staticinvoke <org.apache.jena.riot.system.IRILib: java.lang.String decode(java.lang.String)>($r4);

     label3:
        $r1 = new java.io.FileInputStream;

        specialinvoke $r1.<java.io.FileInputStream: void <init>(java.lang.String)>(r5);

        r6 = $r1;

        $z2 = virtualinvoke r5.<java.lang.String: boolean endsWith(java.lang.String)>(".gz");

        if $z2 == 0 goto label4;

        $r2 = new java.util.zip.GZIPInputStream;

        specialinvoke $r2.<java.util.zip.GZIPInputStream: void <init>(java.io.InputStream)>($r1);

        r6 = $r2;

     label4:
        return r6;
    }

    public static java.io.Reader openFileUTF8(java.lang.String)
    {
        java.lang.String r0;
        java.io.Reader $r2;
        java.nio.charset.Charset $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.apache.jena.atlas.io.IO: java.nio.charset.Charset utf8>;

        $r2 = staticinvoke <org.apache.jena.atlas.io.IO: java.io.Reader openFileReader(java.lang.String,java.nio.charset.Charset)>(r0, $r1);

        return $r2;
    }

    public static java.io.Reader openFileASCII(java.lang.String)
    {
        java.lang.String r0;
        java.io.Reader $r2;
        java.nio.charset.Charset $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.apache.jena.atlas.io.IO: java.nio.charset.Charset ascii>;

        $r2 = staticinvoke <org.apache.jena.atlas.io.IO: java.io.Reader openFileReader(java.lang.String,java.nio.charset.Charset)>(r0, $r1);

        return $r2;
    }

    private static java.io.Reader openFileReader(java.lang.String, java.nio.charset.Charset)
    {
        java.nio.charset.Charset r3;
        java.lang.String r0;
        java.io.InputStreamReader $r2;
        java.io.InputStream $r1;

        r0 := @parameter0: java.lang.String;

        r3 := @parameter1: java.nio.charset.Charset;

        $r1 = staticinvoke <org.apache.jena.atlas.io.IO: java.io.InputStream openFile(java.lang.String)>(r0);

        $r2 = new java.io.InputStreamReader;

        specialinvoke $r2.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>($r1, r3);

        return $r2;
    }

    public static java.io.Reader asUTF8(java.io.InputStream)
    {
        java.nio.charset.Charset $r2;
        java.nio.charset.CharsetDecoder $r3;
        java.io.InputStreamReader $r0;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        $r0 = new java.io.InputStreamReader;

        $r2 = <org.apache.jena.atlas.io.IO: java.nio.charset.Charset utf8>;

        $r3 = virtualinvoke $r2.<java.nio.charset.Charset: java.nio.charset.CharsetDecoder newDecoder()>();

        specialinvoke $r0.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.CharsetDecoder)>(r1, $r3);

        return $r0;
    }

    public static java.io.Reader asASCII(java.io.InputStream)
    {
        java.nio.charset.Charset $r2;
        java.nio.charset.CharsetDecoder $r3;
        java.io.InputStreamReader $r0;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        $r0 = new java.io.InputStreamReader;

        $r2 = <org.apache.jena.atlas.io.IO: java.nio.charset.Charset ascii>;

        $r3 = virtualinvoke $r2.<java.nio.charset.Charset: java.nio.charset.CharsetDecoder newDecoder()>();

        specialinvoke $r0.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.CharsetDecoder)>(r1, $r3);

        return $r0;
    }

    public static java.io.BufferedReader asBufferedUTF8(java.io.InputStream)
    {
        java.io.BufferedReader $r0;
        java.io.Reader $r2;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        $r0 = new java.io.BufferedReader;

        $r2 = staticinvoke <org.apache.jena.atlas.io.IO: java.io.Reader asUTF8(java.io.InputStream)>(r1);

        specialinvoke $r0.<java.io.BufferedReader: void <init>(java.io.Reader)>($r2);

        return $r0;
    }

    public static java.io.Writer asUTF8(java.io.OutputStream)
    {
        java.io.OutputStream r1;
        java.nio.charset.Charset $r2;
        java.nio.charset.CharsetEncoder $r3;
        java.io.OutputStreamWriter $r0;

        r1 := @parameter0: java.io.OutputStream;

        $r0 = new java.io.OutputStreamWriter;

        $r2 = <org.apache.jena.atlas.io.IO: java.nio.charset.Charset utf8>;

        $r3 = virtualinvoke $r2.<java.nio.charset.Charset: java.nio.charset.CharsetEncoder newEncoder()>();

        specialinvoke $r0.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.CharsetEncoder)>(r1, $r3);

        return $r0;
    }

    public static java.io.Writer asASCII(java.io.OutputStream)
    {
        java.io.OutputStream r1;
        java.nio.charset.Charset $r2;
        java.nio.charset.CharsetEncoder $r3;
        java.io.OutputStreamWriter $r0;

        r1 := @parameter0: java.io.OutputStream;

        $r0 = new java.io.OutputStreamWriter;

        $r2 = <org.apache.jena.atlas.io.IO: java.nio.charset.Charset ascii>;

        $r3 = virtualinvoke $r2.<java.nio.charset.Charset: java.nio.charset.CharsetEncoder newEncoder()>();

        specialinvoke $r0.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.CharsetEncoder)>(r1, $r3);

        return $r0;
    }

    public static java.io.Writer asBufferedUTF8(java.io.OutputStream)
    {
        java.io.OutputStream r1;
        java.nio.charset.Charset $r2;
        java.nio.charset.CharsetEncoder $r3;
        java.io.BufferedWriter $r4;
        java.io.OutputStreamWriter $r0;

        r1 := @parameter0: java.io.OutputStream;

        $r0 = new java.io.OutputStreamWriter;

        $r2 = <org.apache.jena.atlas.io.IO: java.nio.charset.Charset utf8>;

        $r3 = virtualinvoke $r2.<java.nio.charset.Charset: java.nio.charset.CharsetEncoder newEncoder()>();

        specialinvoke $r0.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.CharsetEncoder)>(r1, $r3);

        $r4 = new java.io.BufferedWriter;

        specialinvoke $r4.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r0);

        return $r4;
    }

    public static org.apache.jena.atlas.io.AWriter wrap(java.io.Writer)
    {
        java.io.Writer r0;
        org.apache.jena.atlas.io.Writer2 $r1;

        r0 := @parameter0: java.io.Writer;

        $r1 = staticinvoke <org.apache.jena.atlas.io.Writer2: org.apache.jena.atlas.io.Writer2 wrap(java.io.Writer)>(r0);

        return $r1;
    }

    public static org.apache.jena.atlas.io.AWriter wrapUTF8(java.io.OutputStream)
    {
        java.io.OutputStream r0;
        java.io.Writer $r1;
        org.apache.jena.atlas.io.AWriter $r2;

        r0 := @parameter0: java.io.OutputStream;

        $r1 = staticinvoke <org.apache.jena.atlas.io.IO: java.io.Writer asUTF8(java.io.OutputStream)>(r0);

        $r2 = staticinvoke <org.apache.jena.atlas.io.IO: org.apache.jena.atlas.io.AWriter wrap(java.io.Writer)>($r1);

        return $r2;
    }

    public static org.apache.jena.atlas.io.AWriter wrapASCII(java.io.OutputStream)
    {
        java.io.OutputStream r0;
        java.io.Writer $r1;
        org.apache.jena.atlas.io.AWriter $r2;

        r0 := @parameter0: java.io.OutputStream;

        $r1 = staticinvoke <org.apache.jena.atlas.io.IO: java.io.Writer asASCII(java.io.OutputStream)>(r0);

        $r2 = staticinvoke <org.apache.jena.atlas.io.IO: org.apache.jena.atlas.io.AWriter wrap(java.io.Writer)>($r1);

        return $r2;
    }

    public static java.io.PrintWriter asPrintWriterUTF8(java.io.OutputStream)
    {
        java.io.PrintWriter $r0;
        java.io.OutputStream r1;
        java.io.Writer $r2;

        r1 := @parameter0: java.io.OutputStream;

        $r0 = new java.io.PrintWriter;

        $r2 = staticinvoke <org.apache.jena.atlas.io.IO: java.io.Writer asUTF8(java.io.OutputStream)>(r1);

        specialinvoke $r0.<java.io.PrintWriter: void <init>(java.io.Writer)>($r2);

        return $r0;
    }

    public static void close(org.apache.jena.atlas.lib.Closeable)
    {
        org.apache.jena.atlas.lib.Closeable r0;

        r0 := @parameter0: org.apache.jena.atlas.lib.Closeable;

        interfaceinvoke r0.<org.apache.jena.atlas.lib.Closeable: void close()>();

        return;
    }

    public static void closeSilent(org.apache.jena.atlas.lib.Closeable)
    {
        org.apache.jena.atlas.lib.Closeable r0;
        java.lang.Exception $r1;

        r0 := @parameter0: org.apache.jena.atlas.lib.Closeable;

     label1:
        interfaceinvoke r0.<org.apache.jena.atlas.lib.Closeable: void close()>();

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static void close(java.io.Closeable)
    {
        java.io.IOException $r1;
        java.io.Closeable r0;

        r0 := @parameter0: java.io.Closeable;

        if r0 != null goto label1;

        return;

     label1:
        interfaceinvoke r0.<java.io.Closeable: void close()>();

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        staticinvoke <org.apache.jena.atlas.io.IO: void exception(java.io.IOException)>($r1);

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static void closeSilent(java.io.Closeable)
    {
        java.io.IOException $r1;
        java.io.Closeable r0;

        r0 := @parameter0: java.io.Closeable;

        if r0 != null goto label1;

        return;

     label1:
        interfaceinvoke r0.<java.io.Closeable: void close()>();

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static void close(org.apache.jena.atlas.io.AWriter)
    {
        org.apache.jena.atlas.io.AWriter r0;

        r0 := @parameter0: org.apache.jena.atlas.io.AWriter;

        if r0 != null goto label1;

        return;

     label1:
        interfaceinvoke r0.<org.apache.jena.atlas.io.AWriter: void close()>();

        return;
    }

    public static void closeSilent(org.apache.jena.atlas.io.AWriter)
    {
        org.apache.jena.atlas.io.AWriter r0;
        java.lang.Exception $r1;

        r0 := @parameter0: org.apache.jena.atlas.io.AWriter;

        if r0 != null goto label1;

        return;

     label1:
        interfaceinvoke r0.<org.apache.jena.atlas.io.AWriter: void close()>();

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static void close(org.apache.jena.atlas.io.IndentedWriter)
    {
        org.apache.jena.atlas.io.IndentedWriter r0;

        r0 := @parameter0: org.apache.jena.atlas.io.IndentedWriter;

        if r0 != null goto label1;

        return;

     label1:
        virtualinvoke r0.<org.apache.jena.atlas.io.IndentedWriter: void close()>();

        return;
    }

    public static void closeSilent(org.apache.jena.atlas.io.IndentedWriter)
    {
        org.apache.jena.atlas.io.IndentedWriter r0;
        java.lang.Exception $r1;

        r0 := @parameter0: org.apache.jena.atlas.io.IndentedWriter;

        if r0 != null goto label1;

        return;

     label1:
        virtualinvoke r0.<org.apache.jena.atlas.io.IndentedWriter: void close()>();

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static void exception(java.io.IOException)
    {
        org.apache.jena.atlas.AtlasException $r0;
        java.io.IOException r1;

        r1 := @parameter0: java.io.IOException;

        $r0 = new org.apache.jena.atlas.AtlasException;

        specialinvoke $r0.<org.apache.jena.atlas.AtlasException: void <init>(java.lang.Throwable)>(r1);

        throw $r0;
    }

    public static void exception(java.lang.String, java.io.IOException)
    {
        org.apache.jena.atlas.AtlasException $r0;
        java.io.IOException r2;
        java.lang.String r1;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.io.IOException;

        $r0 = new org.apache.jena.atlas.AtlasException;

        specialinvoke $r0.<org.apache.jena.atlas.AtlasException: void <init>(java.lang.String,java.lang.Throwable)>(r1, r2);

        throw $r0;
    }

    public static void flush(java.io.OutputStream)
    {
        java.io.OutputStream r0;
        java.io.IOException $r1;

        r0 := @parameter0: java.io.OutputStream;

        if r0 != null goto label1;

        return;

     label1:
        virtualinvoke r0.<java.io.OutputStream: void flush()>();

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        staticinvoke <org.apache.jena.atlas.io.IO: void exception(java.io.IOException)>($r1);

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static void flush(java.io.Writer)
    {
        java.io.Writer r0;
        java.io.IOException $r1;

        r0 := @parameter0: java.io.Writer;

        if r0 != null goto label1;

        return;

     label1:
        virtualinvoke r0.<java.io.Writer: void flush()>();

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        staticinvoke <org.apache.jena.atlas.io.IO: void exception(java.io.IOException)>($r1);

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static void flush(org.apache.jena.atlas.io.AWriter)
    {
        org.apache.jena.atlas.io.AWriter r0;

        r0 := @parameter0: org.apache.jena.atlas.io.AWriter;

        if r0 != null goto label1;

        return;

     label1:
        interfaceinvoke r0.<org.apache.jena.atlas.io.AWriter: void flush()>();

        return;
    }

    public static byte[] readWholeFile(java.io.InputStream)
    {
        byte[] r1, $r3;
        java.io.ByteArrayOutputStream $r0;
        int $i0;
        java.io.IOException $r4;
        java.io.InputStream r2;

        r2 := @parameter0: java.io.InputStream;

     label1:
        $r0 = new java.io.ByteArrayOutputStream;

        specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>(int)>(8192);

        r1 = newarray (byte)[8192];

     label2:
        $i0 = virtualinvoke r2.<java.io.InputStream: int read(byte[])>(r1);

        if $i0 > 0 goto label3;

        goto label4;

     label3:
        virtualinvoke $r0.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>(r1, 0, $i0);

        goto label2;

     label4:
        virtualinvoke $r0.<java.io.ByteArrayOutputStream: void close()>();

        $r3 = virtualinvoke $r0.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

     label5:
        return $r3;

     label6:
        $r4 := @caughtexception;

        staticinvoke <org.apache.jena.atlas.io.IO: void exception(java.io.IOException)>($r4);

        return null;

        catch java.io.IOException from label1 to label5 with label6;
    }

    public static java.lang.String readWholeFileAsUTF8(java.lang.String) throws java.io.IOException
    {
        java.io.FileInputStream $r0;
        java.lang.String r1, $r2;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.io.FileInputStream;

        specialinvoke $r0.<java.io.FileInputStream: void <init>(java.lang.String)>(r1);

        $r2 = staticinvoke <org.apache.jena.atlas.io.IO: java.lang.String readWholeFileAsUTF8(java.io.InputStream)>($r0);

        return $r2;
    }

    public static java.lang.String readWholeFileAsUTF8(java.io.InputStream) throws java.io.IOException
    {
        java.io.Reader $r1;
        java.lang.String $r2;
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        $r1 = staticinvoke <org.apache.jena.atlas.io.IO: java.io.Reader asUTF8(java.io.InputStream)>(r0);

        $r2 = staticinvoke <org.apache.jena.atlas.io.IO: java.lang.String readWholeFileAsUTF8(java.io.Reader)>($r1);

        return $r2;
    }

    private static java.lang.String readWholeFileAsUTF8(java.io.Reader) throws java.io.IOException
    {
        java.io.StringWriter $r0;
        int $i0;
        char[] r1;
        java.io.Reader r2;
        java.lang.String $r3;

        r2 := @parameter0: java.io.Reader;

        $r0 = new java.io.StringWriter;

        specialinvoke $r0.<java.io.StringWriter: void <init>(int)>(8192);

        r1 = newarray (char)[8192];

     label1:
        $i0 = virtualinvoke r2.<java.io.Reader: int read(char[])>(r1);

        if $i0 >= 0 goto label2;

        goto label3;

     label2:
        virtualinvoke $r0.<java.io.StringWriter: void write(char[],int,int)>(r1, 0, $i0);

        goto label1;

     label3:
        virtualinvoke $r0.<java.io.StringWriter: void close()>();

        $r3 = virtualinvoke $r0.<java.io.StringWriter: java.lang.String toString()>();

        return $r3;
    }

    static void <clinit>()
    {
        java.lang.Throwable $r2;
        java.nio.charset.Charset $r0, $r1;

        <org.apache.jena.atlas.io.IO: int BUFFER_SIZE> = 8192;

        <org.apache.jena.atlas.io.IO: java.lang.String encodingAscii> = "ascii";

        <org.apache.jena.atlas.io.IO: java.lang.String encodingUTF8> = "utf-8";

        <org.apache.jena.atlas.io.IO: int UNSET> = -2;

        <org.apache.jena.atlas.io.IO: int EOF> = -1;

        <org.apache.jena.atlas.io.IO: java.nio.charset.Charset utf8> = null;

        <org.apache.jena.atlas.io.IO: java.nio.charset.Charset ascii> = null;

     label1:
        $r0 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        <org.apache.jena.atlas.io.IO: java.nio.charset.Charset utf8> = $r0;

        $r1 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("ascii");

        <org.apache.jena.atlas.io.IO: java.nio.charset.Charset ascii> = $r1;

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        staticinvoke <org.apache.jena.atlas.logging.Log: void fatal(java.lang.Class,java.lang.String,java.lang.Throwable)>(class "Lcom/hp/hpl/jena/util/FileUtils;", "Failed to get charset", $r2);

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
