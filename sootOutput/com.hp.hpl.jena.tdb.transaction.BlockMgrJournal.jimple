public class com.hp.hpl.jena.tdb.transaction.BlockMgrJournal extends java.lang.Object implements com.hp.hpl.jena.tdb.base.block.BlockMgr, com.hp.hpl.jena.tdb.transaction.TransactionLifecycle
{
    private static org.slf4j.Logger log;
    private com.hp.hpl.jena.tdb.base.block.BlockMgr blockMgr;
    private com.hp.hpl.jena.tdb.transaction.Transaction transaction;
    private com.hp.hpl.jena.tdb.sys.FileRef fileRef;
    private final java.util.Set readBlocks;
    private final java.util.Set iteratorBlocks;
    private final java.util.Map writeBlocks;
    private final java.util.Map freedBlocks;
    private boolean closed;
    private boolean active;

    public void <init>(com.hp.hpl.jena.tdb.transaction.Transaction, com.hp.hpl.jena.tdb.sys.FileRef, com.hp.hpl.jena.tdb.base.block.BlockMgr)
    {
        java.io.PrintStream $r10;
        java.util.HashMap $r3, $r4;
        java.util.HashSet $r1, $r2;
        com.hp.hpl.jena.tdb.sys.FileRef r6;
        com.hp.hpl.jena.tdb.base.block.BlockMgr r7;
        com.hp.hpl.jena.tdb.transaction.BlockMgrJournal r0;
        com.hp.hpl.jena.query.ReadWrite $r8, $r9;
        com.hp.hpl.jena.tdb.transaction.Transaction r5;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.BlockMgrJournal;

        r5 := @parameter0: com.hp.hpl.jena.tdb.transaction.Transaction;

        r6 := @parameter1: com.hp.hpl.jena.tdb.sys.FileRef;

        r7 := @parameter2: com.hp.hpl.jena.tdb.base.block.BlockMgr;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: java.util.Set readBlocks> = $r1;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: java.util.Set iteratorBlocks> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: java.util.Map writeBlocks> = $r3;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: java.util.Map freedBlocks> = $r4;

        r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: boolean closed> = 0;

        r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: boolean active> = 0;

        specialinvoke r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: void reset(com.hp.hpl.jena.tdb.transaction.Transaction,com.hp.hpl.jena.tdb.sys.FileRef,com.hp.hpl.jena.tdb.base.block.BlockMgr)>(r5, r6, r7);

        $r8 = virtualinvoke r5.<com.hp.hpl.jena.tdb.transaction.Transaction: com.hp.hpl.jena.query.ReadWrite getMode()>();

        $r9 = <com.hp.hpl.jena.query.ReadWrite: com.hp.hpl.jena.query.ReadWrite READ>;

        if $r8 != $r9 goto label1;

        $z0 = r7 instanceof com.hp.hpl.jena.tdb.transaction.BlockMgrJournal;

        if $z0 == 0 goto label1;

        $r10 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>("Two level BlockMgrJournal");

     label1:
        return;
    }

    public void begin(com.hp.hpl.jena.tdb.transaction.Transaction)
    {
        com.hp.hpl.jena.tdb.sys.FileRef $r3;
        com.hp.hpl.jena.tdb.base.block.BlockMgr $r2;
        com.hp.hpl.jena.tdb.transaction.BlockMgrJournal r0;
        com.hp.hpl.jena.tdb.transaction.Transaction r1;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.BlockMgrJournal;

        r1 := @parameter0: com.hp.hpl.jena.tdb.transaction.Transaction;

        $r3 = r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: com.hp.hpl.jena.tdb.sys.FileRef fileRef>;

        $r2 = r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: com.hp.hpl.jena.tdb.base.block.BlockMgr blockMgr>;

        specialinvoke r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: void reset(com.hp.hpl.jena.tdb.transaction.Transaction,com.hp.hpl.jena.tdb.sys.FileRef,com.hp.hpl.jena.tdb.base.block.BlockMgr)>(r1, $r3, $r2);

        return;
    }

    public void commitPrepare(com.hp.hpl.jena.tdb.transaction.Transaction)
    {
        java.util.Iterator $r3;
        java.util.Collection $r2;
        com.hp.hpl.jena.tdb.transaction.BlockMgrJournal r0;
        java.util.Map $r1;
        com.hp.hpl.jena.tdb.base.block.Block r5;
        java.lang.Object $r4;
        boolean $z0;
        com.hp.hpl.jena.tdb.transaction.Transaction r6;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.BlockMgrJournal;

        r6 := @parameter0: com.hp.hpl.jena.tdb.transaction.Transaction;

        specialinvoke r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: void checkActive()>();

        $r1 = r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: java.util.Map writeBlocks>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.hp.hpl.jena.tdb.base.block.Block) $r4;

        specialinvoke r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: void writeJournalEntry(com.hp.hpl.jena.tdb.base.block.Block)>(r5);

        goto label1;

     label2:
        r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: boolean active> = 0;

        return;
    }

    public void commitEnact(com.hp.hpl.jena.tdb.transaction.Transaction)
    {
        com.hp.hpl.jena.tdb.transaction.BlockMgrJournal r0;
        com.hp.hpl.jena.tdb.transaction.Transaction r1;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.BlockMgrJournal;

        r1 := @parameter0: com.hp.hpl.jena.tdb.transaction.Transaction;

        return;
    }

    public void abort(com.hp.hpl.jena.tdb.transaction.Transaction)
    {
        com.hp.hpl.jena.tdb.transaction.BlockMgrJournal r0;
        com.hp.hpl.jena.tdb.transaction.Transaction r1;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.BlockMgrJournal;

        r1 := @parameter0: com.hp.hpl.jena.tdb.transaction.Transaction;

        specialinvoke r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: void checkActive()>();

        r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: boolean active> = 0;

        return;
    }

    public void commitClearup(com.hp.hpl.jena.tdb.transaction.Transaction)
    {
        com.hp.hpl.jena.tdb.transaction.BlockMgrJournal r0;
        com.hp.hpl.jena.tdb.transaction.Transaction r1;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.BlockMgrJournal;

        r1 := @parameter0: com.hp.hpl.jena.tdb.transaction.Transaction;

        specialinvoke r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: void clear(com.hp.hpl.jena.tdb.transaction.Transaction)>(r1);

        return;
    }

    private void reset(com.hp.hpl.jena.tdb.transaction.Transaction, com.hp.hpl.jena.tdb.sys.FileRef, com.hp.hpl.jena.tdb.base.block.BlockMgr)
    {
        com.hp.hpl.jena.tdb.sys.FileRef r1;
        com.hp.hpl.jena.tdb.base.block.BlockMgr r2;
        com.hp.hpl.jena.tdb.transaction.BlockMgrJournal r0;
        com.hp.hpl.jena.tdb.transaction.Transaction r3;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.BlockMgrJournal;

        r3 := @parameter0: com.hp.hpl.jena.tdb.transaction.Transaction;

        r1 := @parameter1: com.hp.hpl.jena.tdb.sys.FileRef;

        r2 := @parameter2: com.hp.hpl.jena.tdb.base.block.BlockMgr;

        r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: com.hp.hpl.jena.tdb.sys.FileRef fileRef> = r1;

        r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: com.hp.hpl.jena.tdb.base.block.BlockMgr blockMgr> = r2;

        r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: boolean active> = 1;

        specialinvoke r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: void clear(com.hp.hpl.jena.tdb.transaction.Transaction)>(r3);

        return;
    }

    private void clear(com.hp.hpl.jena.tdb.transaction.Transaction)
    {
        com.hp.hpl.jena.tdb.transaction.BlockMgrJournal r0;
        java.util.Map $r4, $r5;
        java.util.Set $r2, $r3;
        com.hp.hpl.jena.tdb.transaction.Transaction r1;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.BlockMgrJournal;

        r1 := @parameter0: com.hp.hpl.jena.tdb.transaction.Transaction;

        r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: com.hp.hpl.jena.tdb.transaction.Transaction transaction> = r1;

        $r2 = r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: java.util.Set readBlocks>;

        interfaceinvoke $r2.<java.util.Set: void clear()>();

        $r3 = r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: java.util.Set iteratorBlocks>;

        interfaceinvoke $r3.<java.util.Set: void clear()>();

        $r4 = r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: java.util.Map writeBlocks>;

        interfaceinvoke $r4.<java.util.Map: void clear()>();

        $r5 = r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: java.util.Map freedBlocks>;

        interfaceinvoke $r5.<java.util.Map: void clear()>();

        return;
    }

    public com.hp.hpl.jena.tdb.base.block.Block allocate(int)
    {
        com.hp.hpl.jena.tdb.base.block.BlockMgr $r1;
        com.hp.hpl.jena.tdb.transaction.BlockMgrJournal r0;
        java.lang.Long $r5;
        com.hp.hpl.jena.tdb.base.block.Block $r2, $r3, r6;
        java.util.Map $r4;
        int i0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.BlockMgrJournal;

        i0 := @parameter0: int;

        specialinvoke r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: void checkIfClosed()>();

        $r1 = r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: com.hp.hpl.jena.tdb.base.block.BlockMgr blockMgr>;

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.tdb.base.block.BlockMgr: com.hp.hpl.jena.tdb.base.block.Block allocate(int)>(i0);

        r6 = $r2;

        $z0 = r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: boolean active>;

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.tdb.base.block.Block: com.hp.hpl.jena.tdb.base.block.Block replicate()>();

        r6 = $r3;

        $r4 = r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: java.util.Map writeBlocks>;

        $r5 = virtualinvoke $r3.<com.hp.hpl.jena.tdb.base.block.Block: java.lang.Long getId()>();

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r3);

     label1:
        return r6;
    }

    public com.hp.hpl.jena.tdb.base.block.Block getRead(long)
    {
        java.util.Set $r4;
        long l0;
        com.hp.hpl.jena.tdb.base.block.BlockMgr $r2;
        com.hp.hpl.jena.tdb.transaction.BlockMgrJournal r0;
        java.lang.Long $r5;
        com.hp.hpl.jena.tdb.base.block.Block $r1, $r3;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.BlockMgrJournal;

        l0 := @parameter0: long;

        specialinvoke r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: void checkIfClosed()>();

        $r1 = specialinvoke r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: com.hp.hpl.jena.tdb.base.block.Block localBlock(long)>(l0);

        if $r1 == null goto label1;

        return $r1;

     label1:
        $r2 = r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: com.hp.hpl.jena.tdb.base.block.BlockMgr blockMgr>;

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.tdb.base.block.BlockMgr: com.hp.hpl.jena.tdb.base.block.Block getRead(long)>(l0);

        $z0 = r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: boolean active>;

        if $z0 == 0 goto label2;

        $r4 = r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: java.util.Set readBlocks>;

        $r5 = virtualinvoke $r3.<com.hp.hpl.jena.tdb.base.block.Block: java.lang.Long getId()>();

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>($r5);

     label2:
        return $r3;
    }

    public com.hp.hpl.jena.tdb.base.block.Block getReadIterator(long)
    {
        long l0;
        com.hp.hpl.jena.tdb.base.block.BlockMgr $r12;
        com.hp.hpl.jena.tdb.transaction.BlockMgrJournal r0;
        java.lang.Long $r3;
        com.hp.hpl.jena.tdb.base.block.BlockException $r4;
        java.lang.String $r7, $r11;
        boolean $z0;
        java.util.Set $r2;
        com.hp.hpl.jena.tdb.base.block.Block $r1, r13;
        java.lang.StringBuilder $r5, $r6, $r8, $r9, $r10;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.BlockMgrJournal;

        l0 := @parameter0: long;

        specialinvoke r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: void checkIfClosed()>();

        $r1 = specialinvoke r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: com.hp.hpl.jena.tdb.base.block.Block localBlock(long)>(l0);

        r13 = $r1;

        if $r1 != null goto label1;

        $r12 = r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: com.hp.hpl.jena.tdb.base.block.BlockMgr blockMgr>;

        r13 = interfaceinvoke $r12.<com.hp.hpl.jena.tdb.base.block.BlockMgr: com.hp.hpl.jena.tdb.base.block.Block getReadIterator(long)>(l0);

     label1:
        if r13 != null goto label2;

        $r4 = new com.hp.hpl.jena.tdb.base.block.BlockException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No such block: ");

        $r7 = virtualinvoke r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: java.lang.String getLabel()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<com.hp.hpl.jena.tdb.base.block.BlockException: void <init>(java.lang.String)>($r11);

        throw $r4;

     label2:
        $z0 = r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: boolean active>;

        if $z0 == 0 goto label3;

        $r2 = r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: java.util.Set iteratorBlocks>;

        $r3 = virtualinvoke r13.<com.hp.hpl.jena.tdb.base.block.Block: java.lang.Long getId()>();

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r3);

     label3:
        return r13;
    }

    public com.hp.hpl.jena.tdb.base.block.Block getWrite(long)
    {
        com.hp.hpl.jena.tdb.base.block.BlockMgr $r2;
        com.hp.hpl.jena.tdb.transaction.BlockMgrJournal r0;
        com.hp.hpl.jena.tdb.base.block.Block $r1, $r3, $r4;
        long l0;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.BlockMgrJournal;

        l0 := @parameter0: long;

        specialinvoke r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: void checkActive()>();

        specialinvoke r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: void checkIfClosed()>();

        $r1 = specialinvoke r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: com.hp.hpl.jena.tdb.base.block.Block localBlock(long)>(l0);

        if $r1 == null goto label1;

        return $r1;

     label1:
        $r2 = r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: com.hp.hpl.jena.tdb.base.block.BlockMgr blockMgr>;

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.tdb.base.block.BlockMgr: com.hp.hpl.jena.tdb.base.block.Block getRead(long)>(l0);

        $r4 = specialinvoke r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: com.hp.hpl.jena.tdb.base.block.Block _promote(com.hp.hpl.jena.tdb.base.block.Block)>($r3);

        return $r4;
    }

    private com.hp.hpl.jena.tdb.base.block.Block localBlock(long)
    {
        com.hp.hpl.jena.tdb.transaction.BlockMgrJournal r0;
        java.lang.Long $r2;
        java.util.Map $r1;
        com.hp.hpl.jena.tdb.base.block.Block $r4;
        long l0;
        java.lang.Object $r3;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.BlockMgrJournal;

        l0 := @parameter0: long;

        specialinvoke r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: void checkIfClosed()>();

        $r1 = r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: java.util.Map writeBlocks>;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        $r4 = (com.hp.hpl.jena.tdb.base.block.Block) $r3;

        return $r4;
    }

    public com.hp.hpl.jena.tdb.base.block.Block promote(com.hp.hpl.jena.tdb.base.block.Block)
    {
        com.hp.hpl.jena.tdb.transaction.BlockMgrJournal r0;
        java.lang.Long $r3;
        com.hp.hpl.jena.tdb.base.block.Block r1, $r4;
        java.util.Map $r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.BlockMgrJournal;

        r1 := @parameter0: com.hp.hpl.jena.tdb.base.block.Block;

        specialinvoke r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: void checkIfClosed()>();

        $r2 = r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: java.util.Map writeBlocks>;

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.tdb.base.block.Block: java.lang.Long getId()>();

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        return r1;

     label1:
        $r4 = specialinvoke r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: com.hp.hpl.jena.tdb.base.block.Block _promote(com.hp.hpl.jena.tdb.base.block.Block)>(r1);

        return $r4;
    }

    private com.hp.hpl.jena.tdb.base.block.Block _promote(com.hp.hpl.jena.tdb.base.block.Block)
    {
        com.hp.hpl.jena.tdb.transaction.BlockMgrJournal r0;
        java.lang.Long $r3;
        com.hp.hpl.jena.tdb.base.block.Block $r1, r4;
        java.util.Map $r2;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.BlockMgrJournal;

        r4 := @parameter0: com.hp.hpl.jena.tdb.base.block.Block;

        specialinvoke r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: void checkActive()>();

        $r1 = virtualinvoke r4.<com.hp.hpl.jena.tdb.base.block.Block: com.hp.hpl.jena.tdb.base.block.Block replicate()>();

        $r2 = r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: java.util.Map writeBlocks>;

        $r3 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.base.block.Block: java.lang.Long getId()>();

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r1);

        return $r1;
    }

    public void release(com.hp.hpl.jena.tdb.base.block.Block)
    {
        com.hp.hpl.jena.tdb.base.block.BlockMgr $r4;
        com.hp.hpl.jena.tdb.transaction.BlockMgrJournal r0;
        java.lang.Long $r2;
        com.hp.hpl.jena.tdb.base.block.Block r1;
        java.util.Map $r3;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.BlockMgrJournal;

        r1 := @parameter0: com.hp.hpl.jena.tdb.base.block.Block;

        specialinvoke r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: void checkIfClosed()>();

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.tdb.base.block.Block: java.lang.Long getId()>();

        $r3 = r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: java.util.Map writeBlocks>;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>($r2);

        if $z0 != 0 goto label1;

        $r4 = r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: com.hp.hpl.jena.tdb.base.block.BlockMgr blockMgr>;

        interfaceinvoke $r4.<com.hp.hpl.jena.tdb.base.block.BlockMgr: void release(com.hp.hpl.jena.tdb.base.block.Block)>(r1);

     label1:
        return;
    }

    public void write(com.hp.hpl.jena.tdb.base.block.Block)
    {
        com.hp.hpl.jena.tdb.sys.FileRef $r13;
        com.hp.hpl.jena.tdb.transaction.BlockMgrJournal r0;
        java.lang.Long $r3, $r6, $r10, $r16;
        java.util.Map $r2, $r9;
        java.lang.String $r8, $r19;
        boolean $z0, $z1;
        com.hp.hpl.jena.tdb.base.block.Block r1;
        java.lang.StringBuilder $r4, $r5, $r7, $r11, $r12, $r14, $r15, $r17, $r18;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.BlockMgrJournal;

        r1 := @parameter0: com.hp.hpl.jena.tdb.base.block.Block;

        specialinvoke r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: void checkIfClosed()>();

        $z0 = virtualinvoke r1.<com.hp.hpl.jena.tdb.base.block.Block: boolean isModified()>();

        if $z0 != 0 goto label1;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Page for block ");

        $r13 = r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: com.hp.hpl.jena.tdb.sys.FileRef fileRef>;

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r16 = virtualinvoke r1.<com.hp.hpl.jena.tdb.base.block.Block: java.lang.Long getId()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not modified");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.jena.atlas.logging.Log: void warn(java.lang.Object,java.lang.String)>(r0, $r19);

     label1:
        $r2 = r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: java.util.Map writeBlocks>;

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.tdb.base.block.Block: java.lang.Long getId()>();

        $z1 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r3);

        if $z1 != 0 goto label2;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Block not recognized: ");

        $r6 = virtualinvoke r1.<com.hp.hpl.jena.tdb.base.block.Block: java.lang.Long getId()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.jena.atlas.logging.Log: void warn(java.lang.Object,java.lang.String)>(r0, $r8);

        $r9 = r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: java.util.Map writeBlocks>;

        $r10 = virtualinvoke r1.<com.hp.hpl.jena.tdb.base.block.Block: java.lang.Long getId()>();

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, r1);

     label2:
        return;
    }

    public void overwrite(com.hp.hpl.jena.tdb.base.block.Block)
    {
        com.hp.hpl.jena.tdb.base.block.BlockMgr $r2;
        com.hp.hpl.jena.tdb.transaction.BlockMgrJournal r0;
        com.hp.hpl.jena.tdb.base.block.Block r1;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.BlockMgrJournal;

        r1 := @parameter0: com.hp.hpl.jena.tdb.base.block.Block;

        $r2 = r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: com.hp.hpl.jena.tdb.base.block.BlockMgr blockMgr>;

        interfaceinvoke $r2.<com.hp.hpl.jena.tdb.base.block.BlockMgr: void overwrite(com.hp.hpl.jena.tdb.base.block.Block)>(r1);

        return;
    }

    public void free(com.hp.hpl.jena.tdb.base.block.Block)
    {
        com.hp.hpl.jena.tdb.transaction.BlockMgrJournal r0;
        java.lang.Long $r3;
        com.hp.hpl.jena.tdb.base.block.Block r1;
        java.util.Map $r2;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.BlockMgrJournal;

        r1 := @parameter0: com.hp.hpl.jena.tdb.base.block.Block;

        specialinvoke r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: void checkIfClosed()>();

        $r2 = r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: java.util.Map freedBlocks>;

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.tdb.base.block.Block: java.lang.Long getId()>();

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r1);

        return;
    }

    public boolean isEmpty()
    {
        com.hp.hpl.jena.tdb.base.block.BlockMgr $r2;
        com.hp.hpl.jena.tdb.transaction.BlockMgrJournal r0;
        java.util.Map $r1;
        boolean $z0, $z1, $z2;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.BlockMgrJournal;

        specialinvoke r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: void checkIfClosed()>();

        $r1 = r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: java.util.Map writeBlocks>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: com.hp.hpl.jena.tdb.base.block.BlockMgr blockMgr>;

        $z1 = interfaceinvoke $r2.<com.hp.hpl.jena.tdb.base.block.BlockMgr: boolean isEmpty()>();

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public boolean valid(int)
    {
        com.hp.hpl.jena.tdb.base.block.BlockMgr $r3;
        com.hp.hpl.jena.tdb.transaction.BlockMgrJournal r0;
        java.util.Map $r1;
        int i0;
        java.lang.Integer $r2;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.BlockMgrJournal;

        i0 := @parameter0: int;

        specialinvoke r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: void checkIfClosed()>();

        $r1 = r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: java.util.Map writeBlocks>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r3 = r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: com.hp.hpl.jena.tdb.base.block.BlockMgr blockMgr>;

        $z1 = interfaceinvoke $r3.<com.hp.hpl.jena.tdb.base.block.BlockMgr: boolean valid(int)>(i0);

        return $z1;
    }

    public void close()
    {
        com.hp.hpl.jena.tdb.transaction.BlockMgrJournal r0;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.BlockMgrJournal;

        r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: boolean closed> = 1;

        return;
    }

    public boolean isClosed()
    {
        com.hp.hpl.jena.tdb.transaction.BlockMgrJournal r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.BlockMgrJournal;

        $z0 = r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: boolean closed>;

        return $z0;
    }

    private void checkIfClosed()
    {
        long $l0;
        com.hp.hpl.jena.tdb.transaction.BlockMgrJournal r0;
        java.lang.StringBuilder $r1, $r2, $r4;
        java.lang.String $r5;
        boolean $z0;
        com.hp.hpl.jena.tdb.transaction.Transaction $r3;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.BlockMgrJournal;

        $z0 = r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: boolean closed>;

        if $z0 == 0 goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Already closed: ");

        $r3 = r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: com.hp.hpl.jena.tdb.transaction.Transaction transaction>;

        $l0 = virtualinvoke $r3.<com.hp.hpl.jena.tdb.transaction.Transaction: long getTxnId()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.jena.atlas.logging.Log: void fatal(java.lang.Object,java.lang.String)>(r0, $r5);

     label1:
        return;
    }

    private void checkActive()
    {
        long $l0, $l1;
        com.hp.hpl.jena.tdb.transaction.BlockMgrJournal r0;
        java.lang.String $r9, $r14;
        boolean $z0;
        com.hp.hpl.jena.tdb.transaction.Transaction $r1, $r7, $r12;
        com.hp.hpl.jena.tdb.transaction.TxnState $r2, $r3, $r4;
        java.lang.StringBuilder $r5, $r6, $r8, $r10, $r11, $r13;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.BlockMgrJournal;

        $z0 = r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: boolean active>;

        if $z0 != 0 goto label1;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not active: ");

        $r12 = r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: com.hp.hpl.jena.tdb.transaction.Transaction transaction>;

        $l1 = virtualinvoke $r12.<com.hp.hpl.jena.tdb.transaction.Transaction: long getTxnId()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.jena.atlas.logging.Log: void fatal(java.lang.Object,java.lang.String)>(r0, $r14);

     label1:
        $r1 = r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: com.hp.hpl.jena.tdb.transaction.Transaction transaction>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.transaction.Transaction: com.hp.hpl.jena.tdb.transaction.TxnState getState()>();

        $r3 = <com.hp.hpl.jena.tdb.transaction.TxnState: com.hp.hpl.jena.tdb.transaction.TxnState ACTIVE>;

        if $r2 == $r3 goto label2;

        $r4 = <com.hp.hpl.jena.tdb.transaction.TxnState: com.hp.hpl.jena.tdb.transaction.TxnState PREPARING>;

        if $r2 == $r4 goto label2;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("**** Not active: ");

        $r7 = r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: com.hp.hpl.jena.tdb.transaction.Transaction transaction>;

        $l0 = virtualinvoke $r7.<com.hp.hpl.jena.tdb.transaction.Transaction: long getTxnId()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.jena.atlas.logging.Log: void fatal(java.lang.Object,java.lang.String)>(r0, $r9);

     label2:
        return;
    }

    public void sync()
    {
        com.hp.hpl.jena.tdb.transaction.BlockMgrJournal r0;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.BlockMgrJournal;

        specialinvoke r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: void checkIfClosed()>();

        return;
    }

    public void syncForce()
    {
        com.hp.hpl.jena.tdb.base.block.BlockMgr $r1;
        com.hp.hpl.jena.tdb.transaction.BlockMgrJournal r0;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.BlockMgrJournal;

        $r1 = r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: com.hp.hpl.jena.tdb.base.block.BlockMgr blockMgr>;

        interfaceinvoke $r1.<com.hp.hpl.jena.tdb.base.block.BlockMgr: void syncForce()>();

        return;
    }

    public void beginUpdate()
    {
        com.hp.hpl.jena.tdb.base.block.BlockMgr $r1;
        com.hp.hpl.jena.tdb.transaction.BlockMgrJournal r0;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.BlockMgrJournal;

        specialinvoke r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: void checkIfClosed()>();

        $r1 = r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: com.hp.hpl.jena.tdb.base.block.BlockMgr blockMgr>;

        interfaceinvoke $r1.<com.hp.hpl.jena.tdb.base.block.BlockMgr: void beginRead()>();

        return;
    }

    public void endUpdate()
    {
        com.hp.hpl.jena.tdb.base.block.BlockMgr $r1;
        com.hp.hpl.jena.tdb.transaction.BlockMgrJournal r0;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.BlockMgrJournal;

        specialinvoke r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: void checkIfClosed()>();

        $r1 = r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: com.hp.hpl.jena.tdb.base.block.BlockMgr blockMgr>;

        interfaceinvoke $r1.<com.hp.hpl.jena.tdb.base.block.BlockMgr: void endRead()>();

        return;
    }

    private void writeJournalEntry(com.hp.hpl.jena.tdb.base.block.Block)
    {
        com.hp.hpl.jena.tdb.sys.FileRef $r5;
        com.hp.hpl.jena.tdb.transaction.BlockMgrJournal r2;
        com.hp.hpl.jena.tdb.base.block.Block r0;
        com.hp.hpl.jena.tdb.transaction.JournalEntryType $r6;
        java.nio.ByteBuffer $r1;
        com.hp.hpl.jena.tdb.transaction.Transaction $r3;
        com.hp.hpl.jena.tdb.transaction.Journal $r4;

        r2 := @this: com.hp.hpl.jena.tdb.transaction.BlockMgrJournal;

        r0 := @parameter0: com.hp.hpl.jena.tdb.base.block.Block;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.tdb.base.block.Block: java.nio.ByteBuffer getByteBuffer()>();

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.Buffer rewind()>();

        $r3 = r2.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: com.hp.hpl.jena.tdb.transaction.Transaction transaction>;

        $r4 = virtualinvoke $r3.<com.hp.hpl.jena.tdb.transaction.Transaction: com.hp.hpl.jena.tdb.transaction.Journal getJournal()>();

        $r6 = <com.hp.hpl.jena.tdb.transaction.JournalEntryType: com.hp.hpl.jena.tdb.transaction.JournalEntryType Block>;

        $r5 = r2.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: com.hp.hpl.jena.tdb.sys.FileRef fileRef>;

        virtualinvoke $r4.<com.hp.hpl.jena.tdb.transaction.Journal: long write(com.hp.hpl.jena.tdb.transaction.JournalEntryType,com.hp.hpl.jena.tdb.sys.FileRef,com.hp.hpl.jena.tdb.base.block.Block)>($r6, $r5, r0);

        return;
    }

    private void logState()
    {
        com.hp.hpl.jena.tdb.transaction.BlockMgrJournal r0;
        java.util.Map $r13, $r23;
        java.lang.String $r3, $r5, $r10, $r15, $r20, $r25;
        java.util.Set $r8, $r18;
        java.lang.StringBuilder $r1, $r2, $r4, $r6, $r7, $r9, $r11, $r12, $r14, $r16, $r17, $r19, $r21, $r22, $r24;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.BlockMgrJournal;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("state: ");

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: java.lang.String getLabel()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.jena.atlas.logging.Log: void info(java.lang.Object,java.lang.String)>(r0, $r5);

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  readBlocks:      ");

        $r8 = r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: java.util.Set readBlocks>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.jena.atlas.logging.Log: void info(java.lang.Object,java.lang.String)>(r0, $r10);

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  writeBlocks:     ");

        $r13 = r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: java.util.Map writeBlocks>;

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.jena.atlas.logging.Log: void info(java.lang.Object,java.lang.String)>(r0, $r15);

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  iteratorBlocks:  ");

        $r18 = r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: java.util.Set iteratorBlocks>;

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.jena.atlas.logging.Log: void info(java.lang.Object,java.lang.String)>(r0, $r20);

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  freedBlocks:     ");

        $r23 = r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: java.util.Map freedBlocks>;

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.jena.atlas.logging.Log: void info(java.lang.Object,java.lang.String)>(r0, $r25);

        return;
    }

    public void beginRead()
    {
        com.hp.hpl.jena.tdb.base.block.BlockMgr $r1;
        com.hp.hpl.jena.tdb.transaction.BlockMgrJournal r0;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.BlockMgrJournal;

        specialinvoke r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: void checkIfClosed()>();

        $r1 = r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: com.hp.hpl.jena.tdb.base.block.BlockMgr blockMgr>;

        interfaceinvoke $r1.<com.hp.hpl.jena.tdb.base.block.BlockMgr: void beginRead()>();

        return;
    }

    public void endRead()
    {
        com.hp.hpl.jena.tdb.base.block.BlockMgr $r1;
        com.hp.hpl.jena.tdb.transaction.BlockMgrJournal r0;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.BlockMgrJournal;

        specialinvoke r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: void checkIfClosed()>();

        $r1 = r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: com.hp.hpl.jena.tdb.base.block.BlockMgr blockMgr>;

        interfaceinvoke $r1.<com.hp.hpl.jena.tdb.base.block.BlockMgr: void endRead()>();

        return;
    }

    public void beginIterator(java.util.Iterator)
    {
        com.hp.hpl.jena.tdb.transaction.BlockMgrJournal r0;
        java.util.Iterator r1;
        com.hp.hpl.jena.tdb.transaction.Transaction $r2;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.BlockMgrJournal;

        r1 := @parameter0: java.util.Iterator;

        specialinvoke r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: void checkIfClosed()>();

        $r2 = r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: com.hp.hpl.jena.tdb.transaction.Transaction transaction>;

        virtualinvoke $r2.<com.hp.hpl.jena.tdb.transaction.Transaction: void addIterator(java.util.Iterator)>(r1);

        return;
    }

    public void endIterator(java.util.Iterator)
    {
        com.hp.hpl.jena.tdb.transaction.BlockMgrJournal r0;
        java.util.Iterator r1;
        com.hp.hpl.jena.tdb.transaction.Transaction $r2;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.BlockMgrJournal;

        r1 := @parameter0: java.util.Iterator;

        specialinvoke r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: void checkIfClosed()>();

        $r2 = r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: com.hp.hpl.jena.tdb.transaction.Transaction transaction>;

        virtualinvoke $r2.<com.hp.hpl.jena.tdb.transaction.Transaction: void removeIterator(java.util.Iterator)>(r1);

        return;
    }

    public java.lang.String toString()
    {
        com.hp.hpl.jena.tdb.sys.FileRef $r3;
        com.hp.hpl.jena.tdb.base.block.BlockMgr $r7;
        com.hp.hpl.jena.tdb.transaction.BlockMgrJournal r2;
        java.lang.StringBuilder $r0, $r1, $r5, $r6, $r10, $r11;
        java.lang.Class $r8;
        java.lang.String $r4, $r9, $r12;

        r2 := @this: com.hp.hpl.jena.tdb.transaction.BlockMgrJournal;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Journal:");

        $r3 = r2.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: com.hp.hpl.jena.tdb.sys.FileRef fileRef>;

        $r4 = virtualinvoke $r3.<com.hp.hpl.jena.tdb.sys.FileRef: java.lang.String getFilename()>();

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r7 = r2.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: com.hp.hpl.jena.tdb.base.block.BlockMgr blockMgr>;

        $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.Class getClass()>();

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.String getSimpleName()>();

        $r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r12;
    }

    public java.lang.String getLabel()
    {
        com.hp.hpl.jena.tdb.sys.FileRef $r1;
        com.hp.hpl.jena.tdb.transaction.BlockMgrJournal r0;
        java.lang.String $r2;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.BlockMgrJournal;

        $r1 = r0.<com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: com.hp.hpl.jena.tdb.sys.FileRef fileRef>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.sys.FileRef: java.lang.String getFilename()>();

        return $r2;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/hp/hpl/jena/tdb/transaction/BlockMgrJournal;");

        <com.hp.hpl.jena.tdb.transaction.BlockMgrJournal: org.slf4j.Logger log> = $r0;

        return;
    }
}
