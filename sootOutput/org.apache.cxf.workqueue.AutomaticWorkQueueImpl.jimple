public class org.apache.cxf.workqueue.AutomaticWorkQueueImpl extends java.lang.Object implements org.apache.cxf.workqueue.AutomaticWorkQueue
{
    public static final java.lang.String PROPERTY_NAME;
    static final int DEFAULT_MAX_QUEUE_SIZE;
    private static final java.util.logging.Logger LOG;
    java.lang.String name;
    int maxQueueSize;
    int initialThreads;
    int lowWaterMark;
    int highWaterMark;
    long dequeueTimeout;
    volatile int approxThreadCount;
    java.util.concurrent.ThreadPoolExecutor executor;
    java.lang.reflect.Method addWorkerMethod;
    java.lang.Object[] addWorkerArgs;
    org.apache.cxf.workqueue.AutomaticWorkQueueImpl$AWQThreadFactory threadFactory;
    java.util.concurrent.locks.ReentrantLock mainLock;
    final java.util.concurrent.locks.ReentrantLock addThreadLock;
    java.util.concurrent.DelayQueue delayQueue;
    org.apache.cxf.workqueue.AutomaticWorkQueueImpl$WatchDog watchDog;
    boolean shared;
    int sharedCount;
    private java.util.List changeListenerList;

    public void <init>()
    {
        org.apache.cxf.workqueue.AutomaticWorkQueueImpl r0;

        r0 := @this: org.apache.cxf.workqueue.AutomaticWorkQueueImpl;

        specialinvoke r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: void <init>(int)>(256);

        return;
    }

    public void <init>(java.lang.String)
    {
        org.apache.cxf.workqueue.AutomaticWorkQueueImpl r0;
        java.lang.String r1;

        r0 := @this: org.apache.cxf.workqueue.AutomaticWorkQueueImpl;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: void <init>(int,java.lang.String)>(256, r1);

        return;
    }

    public void <init>(int)
    {
        org.apache.cxf.workqueue.AutomaticWorkQueueImpl r0;
        int i0;

        r0 := @this: org.apache.cxf.workqueue.AutomaticWorkQueueImpl;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: void <init>(int,java.lang.String)>(i0, "default");

        return;
    }

    public void <init>(int, java.lang.String)
    {
        org.apache.cxf.workqueue.AutomaticWorkQueueImpl r0;
        int i0;
        java.lang.String r1;

        r0 := @this: org.apache.cxf.workqueue.AutomaticWorkQueueImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: void <init>(int,int,int,int,long,java.lang.String)>(i0, 0, 25, 5, 120000L, r1);

        return;
    }

    public void <init>(int, int, int, int, long)
    {
        org.apache.cxf.workqueue.AutomaticWorkQueueImpl r0;
        int i0, i1, i2, i3;
        long l4;

        r0 := @this: org.apache.cxf.workqueue.AutomaticWorkQueueImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        l4 := @parameter4: long;

        specialinvoke r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: void <init>(int,int,int,int,long,java.lang.String)>(i0, i1, i2, i3, l4, "default");

        return;
    }

    public void <init>(int, int, int, int, long, java.lang.String)
    {
        java.util.concurrent.locks.ReentrantLock $r4;
        org.apache.cxf.workqueue.AutomaticWorkQueueImpl r0;
        long l4;
        java.util.ArrayList $r5;
        int i0, i1, i2, i3, $i5, $i6, $i7, $i9, $i11, $i13;
        java.lang.String r2;

        r0 := @this: org.apache.cxf.workqueue.AutomaticWorkQueueImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        l4 := @parameter4: long;

        r2 := @parameter5: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: java.lang.String name> = "default";

        $r4 = new java.util.concurrent.locks.ReentrantLock;

        specialinvoke $r4.<java.util.concurrent.locks.ReentrantLock: void <init>()>();

        r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: java.util.concurrent.locks.ReentrantLock addThreadLock> = $r4;

        $i9 = (int) -1;

        if i0 != $i9 goto label1;

        $i5 = 256;

        goto label2;

     label1:
        $i5 = i0;

     label2:
        r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: int maxQueueSize> = $i5;

        r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: int initialThreads> = i1;

        $i11 = (int) -1;

        if $i11 != i2 goto label3;

        $i6 = 2147483647;

        goto label4;

     label3:
        $i6 = i2;

     label4:
        r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: int highWaterMark> = $i6;

        $i13 = (int) -1;

        if $i13 != i3 goto label5;

        $i7 = 2147483647;

        goto label6;

     label5:
        $i7 = i3;

     label6:
        r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: int lowWaterMark> = $i7;

        r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: long dequeueTimeout> = l4;

        r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: java.lang.String name> = r2;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: java.util.List changeListenerList> = $r5;

        return;
    }

    public void addChangeListener(java.beans.PropertyChangeListener)
    {
        org.apache.cxf.workqueue.AutomaticWorkQueueImpl r0;
        java.util.List $r2;
        java.beans.PropertyChangeListener r1;

        r0 := @this: org.apache.cxf.workqueue.AutomaticWorkQueueImpl;

        r1 := @parameter0: java.beans.PropertyChangeListener;

        $r2 = r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: java.util.List changeListenerList>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void removeChangeListener(java.beans.PropertyChangeListener)
    {
        org.apache.cxf.workqueue.AutomaticWorkQueueImpl r0;
        java.util.List $r2;
        java.beans.PropertyChangeListener r1;

        r0 := @this: org.apache.cxf.workqueue.AutomaticWorkQueueImpl;

        r1 := @parameter0: java.beans.PropertyChangeListener;

        $r2 = r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: java.util.List changeListenerList>;

        interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>(r1);

        return;
    }

    public void notifyChangeListeners(java.beans.PropertyChangeEvent)
    {
        java.util.List $r1;
        java.util.Iterator $r2;
        java.beans.PropertyChangeListener r4;
        org.apache.cxf.workqueue.AutomaticWorkQueueImpl r0;
        java.lang.Object $r3;
        java.beans.PropertyChangeEvent r5;
        boolean $z0;

        r0 := @this: org.apache.cxf.workqueue.AutomaticWorkQueueImpl;

        r5 := @parameter0: java.beans.PropertyChangeEvent;

        $r1 = r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: java.util.List changeListenerList>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.beans.PropertyChangeListener) $r3;

        interfaceinvoke r4.<java.beans.PropertyChangeListener: void propertyChange(java.beans.PropertyChangeEvent)>(r5);

        goto label1;

     label2:
        return;
    }

    public void setShared(boolean)
    {
        org.apache.cxf.workqueue.AutomaticWorkQueueImpl r0;
        boolean z0;

        r0 := @this: org.apache.cxf.workqueue.AutomaticWorkQueueImpl;

        z0 := @parameter0: boolean;

        r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: boolean shared> = z0;

        return;
    }

    public boolean isShared()
    {
        org.apache.cxf.workqueue.AutomaticWorkQueueImpl r0;
        boolean $z0;

        r0 := @this: org.apache.cxf.workqueue.AutomaticWorkQueueImpl;

        $z0 = r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: boolean shared>;

        return $z0;
    }

    public void addSharedUser()
    {
        org.apache.cxf.workqueue.AutomaticWorkQueueImpl r0;
        int $i0, $i1;

        r0 := @this: org.apache.cxf.workqueue.AutomaticWorkQueueImpl;

        $i0 = r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: int sharedCount>;

        $i1 = $i0 + 1;

        r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: int sharedCount> = $i1;

        return;
    }

    public void removeSharedUser()
    {
        org.apache.cxf.workqueue.AutomaticWorkQueueImpl r0;
        int $i0, $i1;

        r0 := @this: org.apache.cxf.workqueue.AutomaticWorkQueueImpl;

        $i0 = r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: int sharedCount>;

        $i1 = $i0 - 1;

        r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: int sharedCount> = $i1;

        return;
    }

    public int getShareCount()
    {
        org.apache.cxf.workqueue.AutomaticWorkQueueImpl r0;
        int $i0;

        r0 := @this: org.apache.cxf.workqueue.AutomaticWorkQueueImpl;

        $i0 = r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: int sharedCount>;

        return $i0;
    }

    protected synchronized java.util.concurrent.ThreadPoolExecutor getExecutor()
    {
        org.apache.cxf.workqueue.AutomaticWorkQueueImpl r0;
        java.lang.Integer $r21, $r22;
        org.apache.cxf.workqueue.AutomaticWorkQueueImpl$1 $r4;
        java.lang.StringBuilder $r23, $r24, $r25, $r26, $r27, $r29, $r30, $r31, $r32, $r34, $r35, $r36, $r37, $r39, $r40, $r41, $r42;
        java.lang.Throwable $r46, $r47, $r54;
        java.lang.Object[] $r14, $r18, $r52;
        long $l0, $l3;
        java.lang.String $r2, $r28, $r33, $r38, $r43, $r45;
        java.lang.Class[] $r11, $r48;
        java.lang.reflect.Field $r57;
        java.lang.reflect.Method $r13, $r51;
        boolean $z0;
        java.util.logging.Logger $r10, $r19, $r44;
        java.util.concurrent.LinkedBlockingQueue $r6;
        java.util.concurrent.ThreadPoolExecutor $r1, $r15, $r16, $r17, $r58, $r61;
        org.apache.cxf.workqueue.AutomaticWorkQueueImpl$AWQThreadFactory $r3, $r8;
        java.util.logging.Level $r9, $r20;
        int $i1, $i2, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18;
        java.lang.Boolean $r53;
        java.util.concurrent.locks.ReentrantLock $r55, r60;
        java.util.concurrent.TimeUnit $r5, $r7;
        java.lang.Class $r12, $r49, $r50, $r56;
        java.lang.Object $r59;

        r0 := @this: org.apache.cxf.workqueue.AutomaticWorkQueueImpl;

        $r1 = r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: java.util.concurrent.ThreadPoolExecutor executor>;

        if $r1 != null goto label14;

        $r2 = r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: java.lang.String name>;

        $r3 = specialinvoke r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: org.apache.cxf.workqueue.AutomaticWorkQueueImpl$AWQThreadFactory createThreadFactory(java.lang.String)>($r2);

        r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: org.apache.cxf.workqueue.AutomaticWorkQueueImpl$AWQThreadFactory threadFactory> = $r3;

        $r4 = new org.apache.cxf.workqueue.AutomaticWorkQueueImpl$1;

        $i1 = r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: int lowWaterMark>;

        $i2 = r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: int highWaterMark>;

        $r5 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $l0 = r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: long dequeueTimeout>;

        $l3 = virtualinvoke $r5.<java.util.concurrent.TimeUnit: long toMillis(long)>($l0);

        $r7 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $r6 = new java.util.concurrent.LinkedBlockingQueue;

        $i4 = r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: int maxQueueSize>;

        specialinvoke $r6.<java.util.concurrent.LinkedBlockingQueue: void <init>(int)>($i4);

        $r8 = r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: org.apache.cxf.workqueue.AutomaticWorkQueueImpl$AWQThreadFactory threadFactory>;

        specialinvoke $r4.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl$1: void <init>(org.apache.cxf.workqueue.AutomaticWorkQueueImpl,int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)>(r0, $i1, $i2, $l3, $r7, $r6, $r8);

        r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: java.util.concurrent.ThreadPoolExecutor executor> = $r4;

        $r10 = <org.apache.cxf.workqueue.AutomaticWorkQueueImpl: java.util.logging.Logger LOG>;

        $r9 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z0 = virtualinvoke $r10.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r9);

        if $z0 == 0 goto label01;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Constructing automatic work queue with:\n");

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("max queue size: ");

        $i15 = r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: int maxQueueSize>;

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i15);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("initialThreads: ");

        $i16 = r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: int initialThreads>;

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i16);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("lowWaterMark: ");

        $i17 = r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: int lowWaterMark>;

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i17);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r38);

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("highWaterMark: ");

        $i18 = r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: int highWaterMark>;

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i18);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r43);

        $r44 = <org.apache.cxf.workqueue.AutomaticWorkQueueImpl: java.util.logging.Logger LOG>;

        $r45 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r44.<java.util.logging.Logger: void fine(java.lang.String)>($r45);

     label01:
        $i6 = r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: int initialThreads>;

        $i5 = r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: int highWaterMark>;

        if $i6 <= $i5 goto label02;

        $i14 = r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: int highWaterMark>;

        r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: int initialThreads> = $i14;

     label02:
        $i7 = r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: int initialThreads>;

        if $i7 >= 2147483647 goto label04;

        $i8 = r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: int initialThreads>;

        if $i8 <= 0 goto label04;

        $r15 = r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: java.util.concurrent.ThreadPoolExecutor executor>;

        $i9 = r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: int initialThreads>;

        virtualinvoke $r15.<java.util.concurrent.ThreadPoolExecutor: void setCorePoolSize(int)>($i9);

        $r16 = r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: java.util.concurrent.ThreadPoolExecutor executor>;

        $i10 = virtualinvoke $r16.<java.util.concurrent.ThreadPoolExecutor: int prestartAllCoreThreads()>();

        $i11 = r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: int initialThreads>;

        if $i10 >= $i11 goto label03;

        $r19 = <org.apache.cxf.workqueue.AutomaticWorkQueueImpl: java.util.logging.Logger LOG>;

        $r20 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $r18 = newarray (java.lang.Object)[2];

        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i10);

        $r18[0] = $r21;

        $i13 = r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: int initialThreads>;

        $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i13);

        $r18[1] = $r22;

        virtualinvoke $r19.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object[])>($r20, "THREAD_START_FAILURE_MSG", $r18);

     label03:
        $r17 = r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: java.util.concurrent.ThreadPoolExecutor executor>;

        $i12 = r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: int lowWaterMark>;

        virtualinvoke $r17.<java.util.concurrent.ThreadPoolExecutor: void setCorePoolSize(int)>($i12);

     label04:
        $r56 = class "Ljava/util/concurrent/ThreadPoolExecutor;";

        $r57 = virtualinvoke $r56.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("mainLock");

        staticinvoke <org.apache.cxf.common.util.ReflectionUtil: java.lang.reflect.AccessibleObject setAccessible(java.lang.reflect.AccessibleObject)>($r57);

        $r58 = r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: java.util.concurrent.ThreadPoolExecutor executor>;

        $r59 = virtualinvoke $r57.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>($r58);

        r60 = (java.util.concurrent.locks.ReentrantLock) $r59;

     label05:
        goto label07;

     label06:
        $r54 := @caughtexception;

        $r55 = new java.util.concurrent.locks.ReentrantLock;

        specialinvoke $r55.<java.util.concurrent.locks.ReentrantLock: void <init>()>();

        r60 = $r55;

     label07:
        r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: java.util.concurrent.locks.ReentrantLock mainLock> = r60;

     label08:
        $r12 = class "Ljava/util/concurrent/ThreadPoolExecutor;";

        $r11 = newarray (java.lang.Class)[1];

        $r11[0] = class "Ljava/lang/Runnable;";

        $r13 = virtualinvoke $r12.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("addIfUnderMaximumPoolSize", $r11);

        r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: java.lang.reflect.Method addWorkerMethod> = $r13;

        $r14 = newarray (java.lang.Object)[1];

        $r14[0] = null;

        r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: java.lang.Object[] addWorkerArgs> = $r14;

     label09:
        goto label14;

     label10:
        $r47 := @caughtexception;

     label11:
        $r50 = class "Ljava/util/concurrent/ThreadPoolExecutor;";

        $r48 = newarray (java.lang.Class)[2];

        $r48[0] = class "Ljava/lang/Runnable;";

        $r49 = <java.lang.Boolean: java.lang.Class TYPE>;

        $r48[1] = $r49;

        $r51 = virtualinvoke $r50.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("addWorker", $r48);

        r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: java.lang.reflect.Method addWorkerMethod> = $r51;

        $r52 = newarray (java.lang.Object)[2];

        $r52[0] = null;

        $r53 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        $r52[1] = $r53;

        r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: java.lang.Object[] addWorkerArgs> = $r52;

     label12:
        goto label14;

     label13:
        $r46 := @caughtexception;

     label14:
        $r61 = r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: java.util.concurrent.ThreadPoolExecutor executor>;

        return $r61;

        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label13;
    }

    private org.apache.cxf.workqueue.AutomaticWorkQueueImpl$AWQThreadFactory createThreadFactory(java.lang.String)
    {
        org.apache.cxf.workqueue.AutomaticWorkQueueImpl$2 $r0;
        org.apache.cxf.workqueue.AutomaticWorkQueueImpl r1;
        org.apache.cxf.workqueue.AutomaticWorkQueueImpl$AWQThreadFactory $r4;
        java.lang.ThreadGroup $r6, r11;
        java.lang.Object $r3;
        java.lang.SecurityException $r5;
        java.lang.StringBuilder $r7, $r8, $r9;
        java.lang.String r2, $r10;

        r1 := @this: org.apache.cxf.workqueue.AutomaticWorkQueueImpl;

        r2 := @parameter0: java.lang.String;

     label1:
        $r0 = new org.apache.cxf.workqueue.AutomaticWorkQueueImpl$2;

        specialinvoke $r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl$2: void <init>(org.apache.cxf.workqueue.AutomaticWorkQueueImpl,java.lang.String)>(r1, r2);

        $r3 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0);

        r11 = (java.lang.ThreadGroup) $r3;

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.ThreadGroup;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-workqueue");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.ThreadGroup: void <init>(java.lang.String)>($r10);

        r11 = $r6;

     label4:
        $r4 = new org.apache.cxf.workqueue.AutomaticWorkQueueImpl$AWQThreadFactory;

        specialinvoke $r4.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl$AWQThreadFactory: void <init>(org.apache.cxf.workqueue.AutomaticWorkQueueImpl,java.lang.ThreadGroup,java.lang.String)>(r1, r11, r2);

        return $r4;

        catch java.lang.SecurityException from label1 to label2 with label3;
    }

    public void setName(java.lang.String)
    {
        org.apache.cxf.workqueue.AutomaticWorkQueueImpl r0;
        org.apache.cxf.workqueue.AutomaticWorkQueueImpl$AWQThreadFactory $r2, $r3;
        java.lang.String r1;

        r0 := @this: org.apache.cxf.workqueue.AutomaticWorkQueueImpl;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: java.lang.String name> = r1;

        $r2 = r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: org.apache.cxf.workqueue.AutomaticWorkQueueImpl$AWQThreadFactory threadFactory>;

        if $r2 == null goto label1;

        $r3 = r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: org.apache.cxf.workqueue.AutomaticWorkQueueImpl$AWQThreadFactory threadFactory>;

        virtualinvoke $r3.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl$AWQThreadFactory: void setName(java.lang.String)>(r1);

     label1:
        return;
    }

    public java.lang.String getName()
    {
        org.apache.cxf.workqueue.AutomaticWorkQueueImpl r0;
        java.lang.String $r1;

        r0 := @this: org.apache.cxf.workqueue.AutomaticWorkQueueImpl;

        $r1 = r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: java.lang.String name>;

        return $r1;
    }

    public java.lang.String toString()
    {
        org.apache.cxf.workqueue.AutomaticWorkQueueImpl r1;
        long $l0;
        int $i1, $i2, $i3, $i4, $i5;
        java.lang.StringBuilder $r0;
        java.lang.String $r2, $r3;

        r1 := @this: org.apache.cxf.workqueue.AutomaticWorkQueueImpl;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = specialinvoke r1.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [queue size: ");

        $l0 = virtualinvoke r1.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: long getSize()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", max size: ");

        $i1 = r1.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: int maxQueueSize>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", threads: ");

        $i2 = virtualinvoke r1.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: int getPoolSize()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", active threads: ");

        $i3 = virtualinvoke r1.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: int getActiveCount()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", low water mark: ");

        $i4 = virtualinvoke r1.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: int getLowWaterMark()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", high water mark: ");

        $i5 = virtualinvoke r1.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: int getHighWaterMark()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public void execute(java.lang.Runnable)
    {
        org.apache.cxf.workqueue.AutomaticWorkQueueImpl r3;
        java.lang.Runnable r4;
        java.lang.Thread $r0;
        java.lang.reflect.Method $r6, $r14, $r18;
        boolean $z0, $z1;
        org.apache.cxf.workqueue.AutomaticWorkQueueImpl$3 $r2;
        java.util.concurrent.BlockingQueue $r7, $r11;
        java.lang.Exception $r23;
        java.lang.ClassLoader $r1;
        java.lang.Throwable $r19, $r21;
        java.lang.Object[] $r16;
        java.util.concurrent.ThreadPoolExecutor $r5, $r10, $r17;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.reflect.AccessibleObject $r15;
        java.util.concurrent.locks.ReentrantLock $r8, $r9, $r12, $r13, $r20, $r22, $r24;

        r3 := @this: org.apache.cxf.workqueue.AutomaticWorkQueueImpl;

        r4 := @parameter0: java.lang.Runnable;

        $r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r1 = virtualinvoke $r0.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        $r2 = new org.apache.cxf.workqueue.AutomaticWorkQueueImpl$3;

        specialinvoke $r2.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl$3: void <init>(org.apache.cxf.workqueue.AutomaticWorkQueueImpl,java.lang.ClassLoader,java.lang.Runnable)>(r3, $r1, r4);

        $r5 = virtualinvoke r3.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: java.util.concurrent.ThreadPoolExecutor getExecutor()>();

        virtualinvoke $r5.<java.util.concurrent.ThreadPoolExecutor: void execute(java.lang.Runnable)>($r2);

        $r6 = r3.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: java.lang.reflect.Method addWorkerMethod>;

        if $r6 == null goto label11;

        $r7 = virtualinvoke $r5.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.BlockingQueue getQueue()>();

        $z0 = interfaceinvoke $r7.<java.util.concurrent.BlockingQueue: boolean isEmpty()>();

        if $z0 != 0 goto label11;

        $i1 = r3.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: int approxThreadCount>;

        $i0 = r3.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: int highWaterMark>;

        if $i1 >= $i0 goto label11;

        $r8 = r3.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: java.util.concurrent.locks.ReentrantLock addThreadLock>;

        $z1 = virtualinvoke $r8.<java.util.concurrent.locks.ReentrantLock: boolean tryLock()>();

        if $z1 == 0 goto label11;

     label01:
        $r9 = r3.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: java.util.concurrent.locks.ReentrantLock mainLock>;

        virtualinvoke $r9.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label02:
        $i2 = virtualinvoke r3.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: int getPoolSize()>();

        $r10 = r3.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: java.util.concurrent.ThreadPoolExecutor executor>;

        $r11 = virtualinvoke $r10.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.BlockingQueue getQueue()>();

        $i3 = interfaceinvoke $r11.<java.util.concurrent.BlockingQueue: int size()>();

        $i4 = virtualinvoke r3.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: int getActiveCount()>();

        $i5 = $i3 + $i4;

        if $i5 <= $i2 goto label03;

        $r14 = r3.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: java.lang.reflect.Method addWorkerMethod>;

        $r15 = staticinvoke <org.apache.cxf.common.util.ReflectionUtil: java.lang.reflect.AccessibleObject setAccessible(java.lang.reflect.AccessibleObject)>($r14);

        $r18 = (java.lang.reflect.Method) $r15;

        $r17 = r3.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: java.util.concurrent.ThreadPoolExecutor executor>;

        $r16 = r3.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: java.lang.Object[] addWorkerArgs>;

        virtualinvoke $r18.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r17, $r16);

     label03:
        $r12 = r3.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: java.util.concurrent.locks.ReentrantLock mainLock>;

        virtualinvoke $r12.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        goto label08;

     label04:
        $r23 := @caughtexception;

     label05:
        $r24 = r3.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: java.util.concurrent.locks.ReentrantLock mainLock>;

        virtualinvoke $r24.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        goto label08;

     label06:
        $r21 := @caughtexception;

     label07:
        $r22 = r3.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: java.util.concurrent.locks.ReentrantLock mainLock>;

        virtualinvoke $r22.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw $r21;

     label08:
        $r13 = r3.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: java.util.concurrent.locks.ReentrantLock addThreadLock>;

        virtualinvoke $r13.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        goto label11;

     label09:
        $r19 := @caughtexception;

     label10:
        $r20 = r3.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: java.util.concurrent.locks.ReentrantLock addThreadLock>;

        virtualinvoke $r20.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw $r19;

     label11:
        return;

        catch java.lang.Exception from label02 to label03 with label04;
        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.lang.Throwable from label01 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public void execute(java.lang.Runnable, long)
    {
        java.util.concurrent.ThreadPoolExecutor $r4;
        org.apache.cxf.workqueue.AutomaticWorkQueueImpl r0;
        java.util.concurrent.BlockingQueue $r5;
        long l0;
        java.lang.Runnable r1;
        java.util.concurrent.TimeUnit $r6;
        java.util.concurrent.RejectedExecutionException $r3;
        java.lang.InterruptedException $r2;
        boolean $z0;

        r0 := @this: org.apache.cxf.workqueue.AutomaticWorkQueueImpl;

        r1 := @parameter0: java.lang.Runnable;

        l0 := @parameter1: long;

     label1:
        virtualinvoke r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: void execute(java.lang.Runnable)>(r1);

     label2:
        goto label7;

     label3:
        $r3 := @caughtexception;

     label4:
        $r4 = virtualinvoke r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: java.util.concurrent.ThreadPoolExecutor getExecutor()>();

        $r5 = virtualinvoke $r4.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.BlockingQueue getQueue()>();

        $r6 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $z0 = interfaceinvoke $r5.<java.util.concurrent.BlockingQueue: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)>(r1, l0, $r6);

        if $z0 != 0 goto label5;

        throw $r3;

     label5:
        goto label7;

     label6:
        $r2 := @caughtexception;

        throw $r3;

     label7:
        return;

        catch java.util.concurrent.RejectedExecutionException from label1 to label2 with label3;
        catch java.lang.InterruptedException from label4 to label5 with label6;
    }

    public synchronized void schedule(java.lang.Runnable, long)
    {
        org.apache.cxf.workqueue.AutomaticWorkQueueImpl r0;
        long l0;
        java.lang.Runnable r3;
        org.apache.cxf.workqueue.AutomaticWorkQueueImpl$WatchDog $r6, $r8, $r9;
        java.util.concurrent.DelayQueue $r1, $r4, $r5, $r7;
        org.apache.cxf.workqueue.AutomaticWorkQueueImpl$DelayedTaskWrapper $r2;

        r0 := @this: org.apache.cxf.workqueue.AutomaticWorkQueueImpl;

        r3 := @parameter0: java.lang.Runnable;

        l0 := @parameter1: long;

        $r1 = r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: java.util.concurrent.DelayQueue delayQueue>;

        if $r1 != null goto label1;

        $r5 = new java.util.concurrent.DelayQueue;

        specialinvoke $r5.<java.util.concurrent.DelayQueue: void <init>()>();

        r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: java.util.concurrent.DelayQueue delayQueue> = $r5;

        $r6 = new org.apache.cxf.workqueue.AutomaticWorkQueueImpl$WatchDog;

        $r7 = r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: java.util.concurrent.DelayQueue delayQueue>;

        specialinvoke $r6.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl$WatchDog: void <init>(org.apache.cxf.workqueue.AutomaticWorkQueueImpl,java.util.concurrent.DelayQueue)>(r0, $r7);

        r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: org.apache.cxf.workqueue.AutomaticWorkQueueImpl$WatchDog watchDog> = $r6;

        $r8 = r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: org.apache.cxf.workqueue.AutomaticWorkQueueImpl$WatchDog watchDog>;

        virtualinvoke $r8.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl$WatchDog: void setDaemon(boolean)>(1);

        $r9 = r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: org.apache.cxf.workqueue.AutomaticWorkQueueImpl$WatchDog watchDog>;

        virtualinvoke $r9.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl$WatchDog: void start()>();

     label1:
        $r4 = r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: java.util.concurrent.DelayQueue delayQueue>;

        $r2 = new org.apache.cxf.workqueue.AutomaticWorkQueueImpl$DelayedTaskWrapper;

        specialinvoke $r2.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl$DelayedTaskWrapper: void <init>(java.lang.Runnable,long)>(r3, l0);

        virtualinvoke $r4.<java.util.concurrent.DelayQueue: void put(java.util.concurrent.Delayed)>($r2);

        return;
    }

    public void shutdown(boolean)
    {
        java.util.concurrent.ThreadPoolExecutor $r1, $r2, $r3;
        org.apache.cxf.workqueue.AutomaticWorkQueueImpl r0;
        java.util.concurrent.BlockingQueue $r4;
        boolean z0;

        r0 := @this: org.apache.cxf.workqueue.AutomaticWorkQueueImpl;

        z0 := @parameter0: boolean;

        $r1 = r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: java.util.concurrent.ThreadPoolExecutor executor>;

        if $r1 == null goto label2;

        if z0 != 0 goto label1;

        $r3 = r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: java.util.concurrent.ThreadPoolExecutor executor>;

        $r4 = virtualinvoke $r3.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.BlockingQueue getQueue()>();

        interfaceinvoke $r4.<java.util.concurrent.BlockingQueue: void clear()>();

     label1:
        $r2 = r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: java.util.concurrent.ThreadPoolExecutor executor>;

        virtualinvoke $r2.<java.util.concurrent.ThreadPoolExecutor: void shutdown()>();

     label2:
        return;
    }

    public long getMaxSize()
    {
        org.apache.cxf.workqueue.AutomaticWorkQueueImpl r0;
        int $i0;
        long $l1;

        r0 := @this: org.apache.cxf.workqueue.AutomaticWorkQueueImpl;

        $i0 = r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: int maxQueueSize>;

        $l1 = (long) $i0;

        return $l1;
    }

    public long getSize()
    {
        java.util.concurrent.ThreadPoolExecutor $r1, $r2;
        org.apache.cxf.workqueue.AutomaticWorkQueueImpl r0;
        int $i0;
        java.util.concurrent.BlockingQueue $r3;
        long $l1;

        r0 := @this: org.apache.cxf.workqueue.AutomaticWorkQueueImpl;

        $r1 = r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: java.util.concurrent.ThreadPoolExecutor executor>;

        if $r1 != null goto label1;

        $l1 = 0L;

        goto label2;

     label1:
        $r2 = r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: java.util.concurrent.ThreadPoolExecutor executor>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.BlockingQueue getQueue()>();

        $i0 = interfaceinvoke $r3.<java.util.concurrent.BlockingQueue: int size()>();

        $l1 = (long) $i0;

     label2:
        return $l1;
    }

    public boolean isEmpty()
    {
        java.util.concurrent.ThreadPoolExecutor $r1, $r2;
        org.apache.cxf.workqueue.AutomaticWorkQueueImpl r0;
        int $i0;
        java.util.concurrent.BlockingQueue $r3;
        boolean $z0;

        r0 := @this: org.apache.cxf.workqueue.AutomaticWorkQueueImpl;

        $r1 = r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: java.util.concurrent.ThreadPoolExecutor executor>;

        if $r1 != null goto label1;

        $z0 = 1;

        goto label3;

     label1:
        $r2 = r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: java.util.concurrent.ThreadPoolExecutor executor>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.BlockingQueue getQueue()>();

        $i0 = interfaceinvoke $r3.<java.util.concurrent.BlockingQueue: int size()>();

        if $i0 != 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public boolean isFull()
    {
        java.util.concurrent.ThreadPoolExecutor $r1, $r2;
        org.apache.cxf.workqueue.AutomaticWorkQueueImpl r0;
        int $i0;
        java.util.concurrent.BlockingQueue $r3;
        boolean $z0;

        r0 := @this: org.apache.cxf.workqueue.AutomaticWorkQueueImpl;

        $r1 = r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: java.util.concurrent.ThreadPoolExecutor executor>;

        if $r1 != null goto label1;

        $z0 = 0;

        goto label3;

     label1:
        $r2 = r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: java.util.concurrent.ThreadPoolExecutor executor>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.BlockingQueue getQueue()>();

        $i0 = interfaceinvoke $r3.<java.util.concurrent.BlockingQueue: int remainingCapacity()>();

        if $i0 != 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public int getHighWaterMark()
    {
        java.util.concurrent.ThreadPoolExecutor $r1, $r2;
        org.apache.cxf.workqueue.AutomaticWorkQueueImpl r0;
        int $i0, $i1, $i3;

        r0 := @this: org.apache.cxf.workqueue.AutomaticWorkQueueImpl;

        $r1 = r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: java.util.concurrent.ThreadPoolExecutor executor>;

        if $r1 != null goto label1;

        $i0 = r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: int highWaterMark>;

        goto label2;

     label1:
        $r2 = r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: java.util.concurrent.ThreadPoolExecutor executor>;

        $i0 = virtualinvoke $r2.<java.util.concurrent.ThreadPoolExecutor: int getMaximumPoolSize()>();

     label2:
        if $i0 != 2147483647 goto label3;

        $i3 = (int) -1;

        $i1 = $i3;

        goto label4;

     label3:
        $i1 = $i0;

     label4:
        return $i1;
    }

    public int getLowWaterMark()
    {
        java.util.concurrent.ThreadPoolExecutor $r1, $r2;
        org.apache.cxf.workqueue.AutomaticWorkQueueImpl r0;
        int $i0, $i1, $i3;

        r0 := @this: org.apache.cxf.workqueue.AutomaticWorkQueueImpl;

        $r1 = r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: java.util.concurrent.ThreadPoolExecutor executor>;

        if $r1 != null goto label1;

        $i0 = r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: int lowWaterMark>;

        goto label2;

     label1:
        $r2 = r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: java.util.concurrent.ThreadPoolExecutor executor>;

        $i0 = virtualinvoke $r2.<java.util.concurrent.ThreadPoolExecutor: int getCorePoolSize()>();

     label2:
        if $i0 != 2147483647 goto label3;

        $i3 = (int) -1;

        $i1 = $i3;

        goto label4;

     label3:
        $i1 = $i0;

     label4:
        return $i1;
    }

    public int getInitialSize()
    {
        org.apache.cxf.workqueue.AutomaticWorkQueueImpl r0;
        int $i0;

        r0 := @this: org.apache.cxf.workqueue.AutomaticWorkQueueImpl;

        $i0 = r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: int initialThreads>;

        return $i0;
    }

    public void setHighWaterMark(int)
    {
        java.util.concurrent.ThreadPoolExecutor $r1, $r3, $r6;
        org.apache.cxf.workqueue.AutomaticWorkQueueImpl r0;
        java.lang.Integer $r4, $r5;
        int i0, $i1, $i2, $i3;
        java.beans.PropertyChangeEvent $r2;

        r0 := @this: org.apache.cxf.workqueue.AutomaticWorkQueueImpl;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $i3 = 2147483647;

        goto label2;

     label1:
        $i3 = i0;

     label2:
        r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: int highWaterMark> = $i3;

        $r1 = r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: java.util.concurrent.ThreadPoolExecutor executor>;

        if $r1 == null goto label3;

        $r2 = new java.beans.PropertyChangeEvent;

        $r3 = r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: java.util.concurrent.ThreadPoolExecutor executor>;

        $i1 = virtualinvoke $r3.<java.util.concurrent.ThreadPoolExecutor: int getMaximumPoolSize()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r2.<java.beans.PropertyChangeEvent: void <init>(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Object)>(r0, "highWaterMark", $r4, $r5);

        virtualinvoke r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: void notifyChangeListeners(java.beans.PropertyChangeEvent)>($r2);

        $r6 = r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: java.util.concurrent.ThreadPoolExecutor executor>;

        $i2 = r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: int highWaterMark>;

        virtualinvoke $r6.<java.util.concurrent.ThreadPoolExecutor: void setMaximumPoolSize(int)>($i2);

     label3:
        return;
    }

    public void setLowWaterMark(int)
    {
        java.util.concurrent.ThreadPoolExecutor $r1, $r3, $r6;
        org.apache.cxf.workqueue.AutomaticWorkQueueImpl r0;
        java.lang.Integer $r4, $r5;
        int i0, $i1, $i2, $i3;
        java.beans.PropertyChangeEvent $r2;

        r0 := @this: org.apache.cxf.workqueue.AutomaticWorkQueueImpl;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $i3 = 0;

        goto label2;

     label1:
        $i3 = i0;

     label2:
        r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: int lowWaterMark> = $i3;

        $r1 = r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: java.util.concurrent.ThreadPoolExecutor executor>;

        if $r1 == null goto label3;

        $r2 = new java.beans.PropertyChangeEvent;

        $r3 = r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: java.util.concurrent.ThreadPoolExecutor executor>;

        $i1 = virtualinvoke $r3.<java.util.concurrent.ThreadPoolExecutor: int getCorePoolSize()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r2.<java.beans.PropertyChangeEvent: void <init>(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Object)>(r0, "lowWaterMark", $r4, $r5);

        virtualinvoke r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: void notifyChangeListeners(java.beans.PropertyChangeEvent)>($r2);

        $r6 = r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: java.util.concurrent.ThreadPoolExecutor executor>;

        $i2 = r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: int lowWaterMark>;

        virtualinvoke $r6.<java.util.concurrent.ThreadPoolExecutor: void setCorePoolSize(int)>($i2);

     label3:
        return;
    }

    public void setInitialSize(int)
    {
        org.apache.cxf.workqueue.AutomaticWorkQueueImpl r0;
        int $i0, i1;
        java.lang.Integer $r2, $r3;
        java.beans.PropertyChangeEvent $r1;

        r0 := @this: org.apache.cxf.workqueue.AutomaticWorkQueueImpl;

        i1 := @parameter0: int;

        $r1 = new java.beans.PropertyChangeEvent;

        $i0 = r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: int initialThreads>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        specialinvoke $r1.<java.beans.PropertyChangeEvent: void <init>(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Object)>(r0, "initialSize", $r2, $r3);

        virtualinvoke r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: void notifyChangeListeners(java.beans.PropertyChangeEvent)>($r1);

        r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: int initialThreads> = i1;

        return;
    }

    public void setQueueSize(int)
    {
        org.apache.cxf.workqueue.AutomaticWorkQueueImpl r0;
        int $i0, i1;
        java.lang.Integer $r2, $r3;
        java.beans.PropertyChangeEvent $r1;

        r0 := @this: org.apache.cxf.workqueue.AutomaticWorkQueueImpl;

        i1 := @parameter0: int;

        $r1 = new java.beans.PropertyChangeEvent;

        $i0 = r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: int maxQueueSize>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        specialinvoke $r1.<java.beans.PropertyChangeEvent: void <init>(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Object)>(r0, "queueSize", $r2, $r3);

        virtualinvoke r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: void notifyChangeListeners(java.beans.PropertyChangeEvent)>($r1);

        r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: int maxQueueSize> = i1;

        return;
    }

    public void setDequeueTimeout(long)
    {
        java.lang.Long $r2, $r3;
        org.apache.cxf.workqueue.AutomaticWorkQueueImpl r0;
        long $l0, l1;
        java.beans.PropertyChangeEvent $r1;

        r0 := @this: org.apache.cxf.workqueue.AutomaticWorkQueueImpl;

        l1 := @parameter0: long;

        $r1 = new java.beans.PropertyChangeEvent;

        $l0 = r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: long dequeueTimeout>;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        specialinvoke $r1.<java.beans.PropertyChangeEvent: void <init>(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Object)>(r0, "dequeueTimeout", $r2, $r3);

        virtualinvoke r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: void notifyChangeListeners(java.beans.PropertyChangeEvent)>($r1);

        r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: long dequeueTimeout> = l1;

        return;
    }

    public boolean isShutdown()
    {
        java.util.concurrent.ThreadPoolExecutor $r1, $r2;
        org.apache.cxf.workqueue.AutomaticWorkQueueImpl r0;
        boolean $z0;

        r0 := @this: org.apache.cxf.workqueue.AutomaticWorkQueueImpl;

        $r1 = r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: java.util.concurrent.ThreadPoolExecutor executor>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $r2 = r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: java.util.concurrent.ThreadPoolExecutor executor>;

        $z0 = virtualinvoke $r2.<java.util.concurrent.ThreadPoolExecutor: boolean isShutdown()>();

        return $z0;
    }

    public int getLargestPoolSize()
    {
        java.util.concurrent.ThreadPoolExecutor $r1, $r2;
        org.apache.cxf.workqueue.AutomaticWorkQueueImpl r0;
        int $i0;

        r0 := @this: org.apache.cxf.workqueue.AutomaticWorkQueueImpl;

        $r1 = r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: java.util.concurrent.ThreadPoolExecutor executor>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $r2 = r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: java.util.concurrent.ThreadPoolExecutor executor>;

        $i0 = virtualinvoke $r2.<java.util.concurrent.ThreadPoolExecutor: int getLargestPoolSize()>();

        return $i0;
    }

    public int getPoolSize()
    {
        java.util.concurrent.ThreadPoolExecutor $r1, $r2;
        org.apache.cxf.workqueue.AutomaticWorkQueueImpl r0;
        int $i0;

        r0 := @this: org.apache.cxf.workqueue.AutomaticWorkQueueImpl;

        $r1 = r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: java.util.concurrent.ThreadPoolExecutor executor>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $r2 = r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: java.util.concurrent.ThreadPoolExecutor executor>;

        $i0 = virtualinvoke $r2.<java.util.concurrent.ThreadPoolExecutor: int getPoolSize()>();

        return $i0;
    }

    public int getActiveCount()
    {
        java.util.concurrent.ThreadPoolExecutor $r1, $r2;
        org.apache.cxf.workqueue.AutomaticWorkQueueImpl r0;
        int $i0;

        r0 := @this: org.apache.cxf.workqueue.AutomaticWorkQueueImpl;

        $r1 = r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: java.util.concurrent.ThreadPoolExecutor executor>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $r2 = r0.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: java.util.concurrent.ThreadPoolExecutor executor>;

        $i0 = virtualinvoke $r2.<java.util.concurrent.ThreadPoolExecutor: int getActiveCount()>();

        return $i0;
    }

    public void update(java.util.Dictionary)
    {
        org.apache.cxf.workqueue.AutomaticWorkQueueImpl r6;
        long $l1;
        int $i0, $i2, $i3, $i4;
        java.lang.String $r7, $r8, $r9, $r10, r11;
        java.lang.Object $r1, $r2, $r3, $r4, $r5;
        java.util.Dictionary r0;

        r6 := @this: org.apache.cxf.workqueue.AutomaticWorkQueueImpl;

        r0 := @parameter0: java.util.Dictionary;

        $r1 = virtualinvoke r0.<java.util.Dictionary: java.lang.Object get(java.lang.Object)>("highWaterMark");

        r11 = (java.lang.String) $r1;

        if r11 == null goto label1;

        $i4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r11);

        r6.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: int highWaterMark> = $i4;

     label1:
        $r2 = virtualinvoke r0.<java.util.Dictionary: java.lang.Object get(java.lang.Object)>("lowWaterMark");

        $r10 = (java.lang.String) $r2;

        if $r10 == null goto label2;

        $i3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r10);

        r6.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: int lowWaterMark> = $i3;

     label2:
        $r3 = virtualinvoke r0.<java.util.Dictionary: java.lang.Object get(java.lang.Object)>("initialSize");

        $r9 = (java.lang.String) $r3;

        if $r9 == null goto label3;

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r9);

        r6.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: int initialThreads> = $i2;

     label3:
        $r4 = virtualinvoke r0.<java.util.Dictionary: java.lang.Object get(java.lang.Object)>("dequeueTimeout");

        $r8 = (java.lang.String) $r4;

        if $r8 == null goto label4;

        $l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r8);

        r6.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: long dequeueTimeout> = $l1;

     label4:
        $r5 = virtualinvoke r0.<java.util.Dictionary: java.lang.Object get(java.lang.Object)>("queueSize");

        $r7 = (java.lang.String) $r5;

        if $r7 == null goto label5;

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r7);

        r6.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: int maxQueueSize> = $i0;

     label5:
        return;
    }

    public java.util.Dictionary getProperties()
    {
        org.apache.cxf.workqueue.AutomaticWorkQueueImpl r2;
        long $l1, $l3, $l5, $l7, $l9;
        java.text.NumberFormat $r1;
        int $i0, $i2, $i4, $i6, $i8;
        java.lang.String $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        java.util.Hashtable $r0;

        r2 := @this: org.apache.cxf.workqueue.AutomaticWorkQueueImpl;

        $r0 = new java.util.Hashtable;

        specialinvoke $r0.<java.util.Hashtable: void <init>()>();

        $r1 = staticinvoke <java.text.NumberFormat: java.text.NumberFormat getIntegerInstance()>();

        $r3 = virtualinvoke r2.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: java.lang.String getName()>();

        $r4 = virtualinvoke $r1.<java.text.NumberFormat: java.lang.String format(java.lang.Object)>($r3);

        virtualinvoke $r0.<java.util.Dictionary: java.lang.Object put(java.lang.Object,java.lang.Object)>("name", $r4);

        $i0 = virtualinvoke r2.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: int getHighWaterMark()>();

        $l1 = (long) $i0;

        $r5 = virtualinvoke $r1.<java.text.NumberFormat: java.lang.String format(long)>($l1);

        virtualinvoke $r0.<java.util.Dictionary: java.lang.Object put(java.lang.Object,java.lang.Object)>("highWaterMark", $r5);

        $i2 = virtualinvoke r2.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: int getLowWaterMark()>();

        $l3 = (long) $i2;

        $r6 = virtualinvoke $r1.<java.text.NumberFormat: java.lang.String format(long)>($l3);

        virtualinvoke $r0.<java.util.Dictionary: java.lang.Object put(java.lang.Object,java.lang.Object)>("lowWaterMark", $r6);

        $i4 = virtualinvoke r2.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: int getLowWaterMark()>();

        $l5 = (long) $i4;

        $r7 = virtualinvoke $r1.<java.text.NumberFormat: java.lang.String format(long)>($l5);

        virtualinvoke $r0.<java.util.Dictionary: java.lang.Object put(java.lang.Object,java.lang.Object)>("initialSize", $r7);

        $i6 = virtualinvoke r2.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: int getLowWaterMark()>();

        $l7 = (long) $i6;

        $r8 = virtualinvoke $r1.<java.text.NumberFormat: java.lang.String format(long)>($l7);

        virtualinvoke $r0.<java.util.Dictionary: java.lang.Object put(java.lang.Object,java.lang.Object)>("dequeueTimeout", $r8);

        $i8 = virtualinvoke r2.<org.apache.cxf.workqueue.AutomaticWorkQueueImpl: int getLowWaterMark()>();

        $l9 = (long) $i8;

        $r9 = virtualinvoke $r1.<java.text.NumberFormat: java.lang.String format(long)>($l9);

        virtualinvoke $r0.<java.util.Dictionary: java.lang.Object put(java.lang.Object,java.lang.Object)>("queueSize", $r9);

        return $r0;
    }

    static java.util.logging.Logger access$000()
    {
        java.util.logging.Logger $r0;

        $r0 = <org.apache.cxf.workqueue.AutomaticWorkQueueImpl: java.util.logging.Logger LOG>;

        return $r0;
    }

    static void <clinit>()
    {
        java.util.logging.Logger $r0;

        <org.apache.cxf.workqueue.AutomaticWorkQueueImpl: int DEFAULT_MAX_QUEUE_SIZE> = 256;

        <org.apache.cxf.workqueue.AutomaticWorkQueueImpl: java.lang.String PROPERTY_NAME> = "name";

        $r0 = staticinvoke <org.apache.cxf.common.logging.LogUtils: java.util.logging.Logger getL7dLogger(java.lang.Class)>(class "Lorg/apache/cxf/workqueue/AutomaticWorkQueueImpl;");

        <org.apache.cxf.workqueue.AutomaticWorkQueueImpl: java.util.logging.Logger LOG> = $r0;

        return;
    }
}
