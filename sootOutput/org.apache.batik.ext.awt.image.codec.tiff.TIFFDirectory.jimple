public class org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory extends java.lang.Object implements java.io.Serializable
{
    boolean isBigEndian;
    int numEntries;
    org.apache.batik.ext.awt.image.codec.tiff.TIFFField[] fields;
    java.util.Map fieldIndex;
    long IFDOffset;
    long nextIFDOffset;
    private static final int[] sizeOfType;

    void <init>()
    {
        org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory r0;
        java.util.HashMap $r1;

        r0 := @this: org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: java.util.Map fieldIndex> = $r1;

        r0.<org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: long IFDOffset> = 8L;

        r0.<org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: long nextIFDOffset> = 0L;

        return;
    }

    private static boolean isValidEndianTag(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;

        if i0 == 18761 goto label1;

        if i0 != 19789 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public void <init>(org.apache.batik.ext.awt.image.codec.util.SeekableStream, int) throws java.io.IOException
    {
        org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory r0;
        java.util.HashMap $r1;
        long $l0, l6, $l7, l8;
        byte $b4;
        int $i1, $i2, i3, $i5, i9;
        boolean $z0, $z1;
        org.apache.batik.ext.awt.image.codec.util.SeekableStream r2;
        java.lang.IllegalArgumentException $r3, $r4, $r5;

        r0 := @this: org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory;

        r2 := @parameter0: org.apache.batik.ext.awt.image.codec.util.SeekableStream;

        i3 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: java.util.Map fieldIndex> = $r1;

        r0.<org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: long IFDOffset> = 8L;

        r0.<org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: long nextIFDOffset> = 0L;

        $l0 = virtualinvoke r2.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: long getFilePointer()>();

        virtualinvoke r2.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: void seek(long)>(0L);

        $i1 = virtualinvoke r2.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: int readUnsignedShort()>();

        $z0 = staticinvoke <org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: boolean isValidEndianTag(int)>($i1);

        if $z0 != 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("TIFFDirectory1");

        throw $r5;

     label1:
        if $i1 != 19789 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        r0.<org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: boolean isBigEndian> = $z1;

        $i2 = specialinvoke r0.<org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: int readUnsignedShort(org.apache.batik.ext.awt.image.codec.util.SeekableStream)>(r2);

        if $i2 == 42 goto label4;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("TIFFDirectory2");

        throw $r4;

     label4:
        l8 = specialinvoke r0.<org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: long readUnsignedInt(org.apache.batik.ext.awt.image.codec.util.SeekableStream)>(r2);

        i9 = 0;

        goto label7;

     label5:
        $b4 = l8 cmp 0L;

        if $b4 != 0 goto label6;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("TIFFDirectory3");

        throw $r3;

     label6:
        virtualinvoke r2.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: void seek(long)>(l8);

        $i5 = specialinvoke r0.<org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: int readUnsignedShort(org.apache.batik.ext.awt.image.codec.util.SeekableStream)>(r2);

        l6 = (long) $i5;

        $l7 = 12L * l6;

        virtualinvoke r2.<java.io.InputStream: long skip(long)>($l7);

        l8 = specialinvoke r0.<org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: long readUnsignedInt(org.apache.batik.ext.awt.image.codec.util.SeekableStream)>(r2);

        i9 = i9 + 1;

     label7:
        if i9 < i3 goto label5;

        virtualinvoke r2.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: void seek(long)>(l8);

        specialinvoke r0.<org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: void initialize(org.apache.batik.ext.awt.image.codec.util.SeekableStream)>(r2);

        virtualinvoke r2.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: void seek(long)>($l0);

        return;
    }

    public void <init>(org.apache.batik.ext.awt.image.codec.util.SeekableStream, long, int) throws java.io.IOException
    {
        org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory r0;
        java.util.HashMap $r1;
        long $l0, l4, $l5, $l6, $l7, l8;
        int $i1, i2, $i3, i9;
        boolean $z0, $z1;
        org.apache.batik.ext.awt.image.codec.util.SeekableStream r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory;

        r2 := @parameter0: org.apache.batik.ext.awt.image.codec.util.SeekableStream;

        l8 := @parameter1: long;

        i2 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: java.util.Map fieldIndex> = $r1;

        r0.<org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: long IFDOffset> = 8L;

        r0.<org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: long nextIFDOffset> = 0L;

        $l0 = virtualinvoke r2.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: long getFilePointer()>();

        virtualinvoke r2.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: void seek(long)>(0L);

        $i1 = virtualinvoke r2.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: int readUnsignedShort()>();

        $z0 = staticinvoke <org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: boolean isValidEndianTag(int)>($i1);

        if $z0 != 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("TIFFDirectory1");

        throw $r3;

     label1:
        if $i1 != 19789 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        r0.<org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: boolean isBigEndian> = $z1;

        virtualinvoke r2.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: void seek(long)>(l8);

        i9 = 0;

        goto label5;

     label4:
        $i3 = specialinvoke r0.<org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: int readUnsignedShort(org.apache.batik.ext.awt.image.codec.util.SeekableStream)>(r2);

        l4 = (long) $i3;

        $l5 = 12L * l4;

        $l6 = l8 + $l5;

        virtualinvoke r2.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: void seek(long)>($l6);

        $l7 = specialinvoke r0.<org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: long readUnsignedInt(org.apache.batik.ext.awt.image.codec.util.SeekableStream)>(r2);

        l8 = $l7;

        virtualinvoke r2.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: void seek(long)>($l7);

        i9 = i9 + 1;

     label5:
        if i9 < i2 goto label4;

        specialinvoke r0.<org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: void initialize(org.apache.batik.ext.awt.image.codec.util.SeekableStream)>(r2);

        virtualinvoke r2.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: void seek(long)>($l0);

        return;
    }

    private void initialize(org.apache.batik.ext.awt.image.codec.util.SeekableStream) throws java.io.IOException
    {
        byte[] r15;
        java.lang.Integer $r35, $r36;
        byte $b21;
        java.util.Map $r5;
        org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory r0;
        double[] r7;
        long $l0, $l5, $l6, l7, $l14, $l15, $l16, $l23, $l24, $l25;
        float[] r8;
        java.util.ArrayList $r37;
        short $s13;
        java.lang.StringBuffer $r22, $r23, $r24, $r34;
        java.lang.String $r25, $r38;
        long[][] r30;
        org.apache.batik.ext.awt.image.codec.util.SeekableStream r1;
        java.lang.ArrayIndexOutOfBoundsException $r19;
        char[] r28;
        int[][] r9;
        org.apache.batik.ext.awt.image.codec.tiff.TIFFField[] $r2, $r32;
        int[] $r3, $r10, $r11, r12;
        float $f0;
        short[] r31;
        java.lang.String[] r27;
        long[] $r13, $r14, r29;
        int $i1, $i2, $i3, $i4, $i8, $i9, $i10, $i11, $i12, $i17, $i19, $i20, $i22, i26, i27, i28, i29, i30, i31, i32, i33, i34, i35, i36, i37, i38, $i39;
        double $d0;
        java.io.PrintStream $r18, $r21;
        org.apache.batik.ext.awt.image.codec.tiff.TIFFField $r39;
        char $c18;
        java.lang.Object r26, $r40, $r41, $r42, $r43, $r44, $r45, $r46, $r47, $r48, $r49;

        r0 := @this: org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory;

        r1 := @parameter0: org.apache.batik.ext.awt.image.codec.util.SeekableStream;

        $l0 = virtualinvoke r1.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: long getFilePointer()>();

        r0.<org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: long IFDOffset> = $l0;

        $i1 = specialinvoke r0.<org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: int readUnsignedShort(org.apache.batik.ext.awt.image.codec.util.SeekableStream)>(r1);

        r0.<org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: int numEntries> = $i1;

        $i2 = r0.<org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: int numEntries>;

        $r2 = newarray (org.apache.batik.ext.awt.image.codec.tiff.TIFFField)[$i2];

        r0.<org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: org.apache.batik.ext.awt.image.codec.tiff.TIFFField[] fields> = $r2;

        i26 = 0;

        goto label38;

     label01:
        $i3 = specialinvoke r0.<org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: int readUnsignedShort(org.apache.batik.ext.awt.image.codec.util.SeekableStream)>(r1);

        $i4 = specialinvoke r0.<org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: int readUnsignedShort(org.apache.batik.ext.awt.image.codec.util.SeekableStream)>(r1);

        $l5 = specialinvoke r0.<org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: long readUnsignedInt(org.apache.batik.ext.awt.image.codec.util.SeekableStream)>(r1);

        i27 = (int) $l5;

        $l6 = virtualinvoke r1.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: long getFilePointer()>();

        l7 = $l6 + 4L;

     label02:
        $r3 = <org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: int[] sizeOfType>;

        $i8 = $r3[$i4];

        $i9 = i27 * $i8;

        if $i9 <= 4 goto label03;

        $l23 = specialinvoke r0.<org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: long readUnsignedInt(org.apache.batik.ext.awt.image.codec.util.SeekableStream)>(r1);

        i28 = (int) $l23;

        $l24 = (long) i28;

        virtualinvoke r1.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: void seek(long)>($l24);

     label03:
        goto label05;

     label04:
        $r19 := @caughtexception;

        $r21 = <java.lang.System: java.io.PrintStream err>;

        $r34 = new java.lang.StringBuffer;

        specialinvoke $r34.<java.lang.StringBuffer: void <init>()>();

        $r22 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i3);

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("TIFFDirectory4");

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r21.<java.io.PrintStream: void println(java.lang.String)>($r25);

        virtualinvoke r1.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: void seek(long)>(l7);

        goto label37;

     label05:
        $r5 = r0.<org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: java.util.Map fieldIndex>;

        $r35 = new java.lang.Integer;

        specialinvoke $r35.<java.lang.Integer: void <init>(int)>($i3);

        $r36 = new java.lang.Integer;

        specialinvoke $r36.<java.lang.Integer: void <init>(int)>(i26);

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r35, $r36);

        r26 = null;

        tableswitch($i4)
        {
            case 1: goto label06;
            case 2: goto label06;
            case 3: goto label11;
            case 4: goto label14;
            case 5: goto label17;
            case 6: goto label06;
            case 7: goto label06;
            case 8: goto label20;
            case 9: goto label23;
            case 10: goto label26;
            case 11: goto label29;
            case 12: goto label32;
            default: goto label35;
        };

     label06:
        r15 = newarray (byte)[i27];

        virtualinvoke r1.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: void readFully(byte[],int,int)>(r15, 0, i27);

        if $i4 != 2 goto label10;

        i29 = 0;

        i30 = 0;

        $r37 = new java.util.ArrayList;

        specialinvoke $r37.<java.util.ArrayList: void <init>()>();

        goto label09;

     label07:
        if i29 >= i27 goto label08;

        $i20 = i29;

        i29 = i29 + 1;

        $b21 = r15[$i20];

        if $b21 != 0 goto label07;

     label08:
        $r38 = new java.lang.String;

        $i19 = i29 - i30;

        specialinvoke $r38.<java.lang.String: void <init>(byte[],int,int)>(r15, i30, $i19);

        interfaceinvoke $r37.<java.util.List: boolean add(java.lang.Object)>($r38);

        i30 = i29;

     label09:
        if i29 < i27 goto label07;

        $i22 = interfaceinvoke $r37.<java.util.List: int size()>();

        i27 = $i22;

        r27 = newarray (java.lang.String)[$i22];

        interfaceinvoke $r37.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r27);

        $r40 = (java.lang.Object) r27;

        r26 = $r40;

        goto label36;

     label10:
        $r41 = (java.lang.Object) r15;

        r26 = $r41;

        goto label36;

     label11:
        r28 = newarray (char)[i27];

        i31 = 0;

        goto label13;

     label12:
        $i17 = specialinvoke r0.<org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: int readUnsignedShort(org.apache.batik.ext.awt.image.codec.util.SeekableStream)>(r1);

        $c18 = (char) $i17;

        r28[i31] = $c18;

        i31 = i31 + 1;

     label13:
        if i31 < i27 goto label12;

        $r42 = (java.lang.Object) r28;

        r26 = $r42;

        goto label36;

     label14:
        r29 = newarray (long)[i27];

        i32 = 0;

        goto label16;

     label15:
        $l16 = specialinvoke r0.<org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: long readUnsignedInt(org.apache.batik.ext.awt.image.codec.util.SeekableStream)>(r1);

        r29[i32] = $l16;

        i32 = i32 + 1;

     label16:
        if i32 < i27 goto label15;

        $r43 = (java.lang.Object) r29;

        r26 = $r43;

        goto label36;

     label17:
        r30 = newmultiarray (long)[i27][2];

        i33 = 0;

        goto label19;

     label18:
        $r13 = r30[i33];

        $l14 = specialinvoke r0.<org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: long readUnsignedInt(org.apache.batik.ext.awt.image.codec.util.SeekableStream)>(r1);

        $r13[0] = $l14;

        $r14 = r30[i33];

        $l15 = specialinvoke r0.<org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: long readUnsignedInt(org.apache.batik.ext.awt.image.codec.util.SeekableStream)>(r1);

        $r14[1] = $l15;

        i33 = i33 + 1;

     label19:
        if i33 < i27 goto label18;

        $r44 = (java.lang.Object) r30;

        r26 = $r44;

        goto label36;

     label20:
        r31 = newarray (short)[i27];

        i34 = 0;

        goto label22;

     label21:
        $s13 = specialinvoke r0.<org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: short readShort(org.apache.batik.ext.awt.image.codec.util.SeekableStream)>(r1);

        r31[i34] = $s13;

        i34 = i34 + 1;

     label22:
        if i34 < i27 goto label21;

        $r45 = (java.lang.Object) r31;

        r26 = $r45;

        goto label36;

     label23:
        r12 = newarray (int)[i27];

        i35 = 0;

        goto label25;

     label24:
        $i12 = specialinvoke r0.<org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: int readInt(org.apache.batik.ext.awt.image.codec.util.SeekableStream)>(r1);

        r12[i35] = $i12;

        i35 = i35 + 1;

     label25:
        if i35 < i27 goto label24;

        $r46 = (java.lang.Object) r12;

        r26 = $r46;

        goto label36;

     label26:
        r9 = newmultiarray (int)[i27][2];

        i36 = 0;

        goto label28;

     label27:
        $r10 = r9[i36];

        $i10 = specialinvoke r0.<org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: int readInt(org.apache.batik.ext.awt.image.codec.util.SeekableStream)>(r1);

        $r10[0] = $i10;

        $r11 = r9[i36];

        $i11 = specialinvoke r0.<org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: int readInt(org.apache.batik.ext.awt.image.codec.util.SeekableStream)>(r1);

        $r11[1] = $i11;

        i36 = i36 + 1;

     label28:
        if i36 < i27 goto label27;

        $r47 = (java.lang.Object) r9;

        r26 = $r47;

        goto label36;

     label29:
        r8 = newarray (float)[i27];

        i37 = 0;

        goto label31;

     label30:
        $f0 = specialinvoke r0.<org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: float readFloat(org.apache.batik.ext.awt.image.codec.util.SeekableStream)>(r1);

        r8[i37] = $f0;

        i37 = i37 + 1;

     label31:
        if i37 < i27 goto label30;

        $r48 = (java.lang.Object) r8;

        r26 = $r48;

        goto label36;

     label32:
        r7 = newarray (double)[i27];

        i38 = 0;

        goto label34;

     label33:
        $d0 = specialinvoke r0.<org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: double readDouble(org.apache.batik.ext.awt.image.codec.util.SeekableStream)>(r1);

        r7[i38] = $d0;

        i38 = i38 + 1;

     label34:
        if i38 < i27 goto label33;

        $r49 = (java.lang.Object) r7;

        r26 = $r49;

        goto label36;

     label35:
        $r18 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r18.<java.io.PrintStream: void println(java.lang.String)>("TIFFDirectory0");

     label36:
        $r32 = r0.<org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: org.apache.batik.ext.awt.image.codec.tiff.TIFFField[] fields>;

        $r39 = new org.apache.batik.ext.awt.image.codec.tiff.TIFFField;

        specialinvoke $r39.<org.apache.batik.ext.awt.image.codec.tiff.TIFFField: void <init>(int,int,int,java.lang.Object)>($i3, $i4, i27, r26);

        $r32[i26] = $r39;

        virtualinvoke r1.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: void seek(long)>(l7);

     label37:
        i26 = i26 + 1;

     label38:
        $i39 = r0.<org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: int numEntries>;

        if i26 < $i39 goto label01;

        $l25 = specialinvoke r0.<org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: long readUnsignedInt(org.apache.batik.ext.awt.image.codec.util.SeekableStream)>(r1);

        r0.<org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: long nextIFDOffset> = $l25;

        return;

        catch java.lang.ArrayIndexOutOfBoundsException from label02 to label03 with label04;
    }

    public int getNumEntries()
    {
        int $i0;
        org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory r0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory;

        $i0 = r0.<org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: int numEntries>;

        return $i0;
    }

    public org.apache.batik.ext.awt.image.codec.tiff.TIFFField getField(int)
    {
        org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory r0;
        org.apache.batik.ext.awt.image.codec.tiff.TIFFField $r6;
        java.lang.Integer $r1, r4;
        org.apache.batik.ext.awt.image.codec.tiff.TIFFField[] $r5;
        java.util.Map $r2;
        int i0, $i1;
        java.lang.Object $r3;

        r0 := @this: org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory;

        i0 := @parameter0: int;

        $r2 = r0.<org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: java.util.Map fieldIndex>;

        $r1 = new java.lang.Integer;

        specialinvoke $r1.<java.lang.Integer: void <init>(int)>(i0);

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        r4 = (java.lang.Integer) $r3;

        if r4 != null goto label1;

        return null;

     label1:
        $r5 = r0.<org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: org.apache.batik.ext.awt.image.codec.tiff.TIFFField[] fields>;

        $i1 = virtualinvoke r4.<java.lang.Integer: int intValue()>();

        $r6 = $r5[$i1];

        return $r6;
    }

    public boolean isTagPresent(int)
    {
        org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory r0;
        java.util.Map $r2;
        int i0;
        java.lang.Integer $r1;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory;

        i0 := @parameter0: int;

        $r2 = r0.<org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: java.util.Map fieldIndex>;

        $r1 = new java.lang.Integer;

        specialinvoke $r1.<java.lang.Integer: void <init>(int)>(i0);

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

        return $z0;
    }

    public int[] getTags()
    {
        org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory r0;
        java.util.Iterator $r5;
        java.util.Set $r4;
        java.lang.Integer $r7;
        int[] r2;
        java.util.Map $r1, $r3;
        int $i0, $i1, $i2, i3;
        java.lang.Object $r6;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory;

        $r1 = r0.<org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: java.util.Map fieldIndex>;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        r2 = newarray (int)[$i0];

        $r3 = r0.<org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: java.util.Map fieldIndex>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set keySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

        i3 = 0;

        goto label2;

     label1:
        $i1 = i3;

        i3 = i3 + 1;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (java.lang.Integer) $r6;

        $i2 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        r2[$i1] = $i2;

     label2:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return r2;
    }

    public org.apache.batik.ext.awt.image.codec.tiff.TIFFField[] getFields()
    {
        org.apache.batik.ext.awt.image.codec.tiff.TIFFField[] $r1;
        org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory r0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory;

        $r1 = r0.<org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: org.apache.batik.ext.awt.image.codec.tiff.TIFFField[] fields>;

        return $r1;
    }

    public byte getFieldAsByte(int, int)
    {
        byte[] $r7;
        org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory r0;
        org.apache.batik.ext.awt.image.codec.tiff.TIFFField $r6;
        java.lang.Integer $r1, r4;
        org.apache.batik.ext.awt.image.codec.tiff.TIFFField[] $r5;
        byte $b3;
        java.util.Map $r2;
        int i0, $i1, i2;
        java.lang.Object $r3;

        r0 := @this: org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        $r2 = r0.<org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: java.util.Map fieldIndex>;

        $r1 = new java.lang.Integer;

        specialinvoke $r1.<java.lang.Integer: void <init>(int)>(i0);

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        r4 = (java.lang.Integer) $r3;

        $r5 = r0.<org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: org.apache.batik.ext.awt.image.codec.tiff.TIFFField[] fields>;

        $i1 = virtualinvoke r4.<java.lang.Integer: int intValue()>();

        $r6 = $r5[$i1];

        $r7 = virtualinvoke $r6.<org.apache.batik.ext.awt.image.codec.tiff.TIFFField: byte[] getAsBytes()>();

        $b3 = $r7[i2];

        return $b3;
    }

    public byte getFieldAsByte(int)
    {
        int i0;
        org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory r0;
        byte $b1;

        r0 := @this: org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory;

        i0 := @parameter0: int;

        $b1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: byte getFieldAsByte(int,int)>(i0, 0);

        return $b1;
    }

    public long getFieldAsLong(int, int)
    {
        org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory r0;
        org.apache.batik.ext.awt.image.codec.tiff.TIFFField $r6;
        long $l3;
        java.lang.Integer $r1, r4;
        org.apache.batik.ext.awt.image.codec.tiff.TIFFField[] $r5;
        java.util.Map $r2;
        int i0, $i1, i2;
        java.lang.Object $r3;

        r0 := @this: org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        $r2 = r0.<org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: java.util.Map fieldIndex>;

        $r1 = new java.lang.Integer;

        specialinvoke $r1.<java.lang.Integer: void <init>(int)>(i0);

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        r4 = (java.lang.Integer) $r3;

        $r5 = r0.<org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: org.apache.batik.ext.awt.image.codec.tiff.TIFFField[] fields>;

        $i1 = virtualinvoke r4.<java.lang.Integer: int intValue()>();

        $r6 = $r5[$i1];

        $l3 = virtualinvoke $r6.<org.apache.batik.ext.awt.image.codec.tiff.TIFFField: long getAsLong(int)>(i2);

        return $l3;
    }

    public long getFieldAsLong(int)
    {
        int i0;
        org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory r0;
        long $l1;

        r0 := @this: org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory;

        i0 := @parameter0: int;

        $l1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: long getFieldAsLong(int,int)>(i0, 0);

        return $l1;
    }

    public float getFieldAsFloat(int, int)
    {
        org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory r0;
        org.apache.batik.ext.awt.image.codec.tiff.TIFFField $r6;
        java.lang.Integer $r1, r4;
        org.apache.batik.ext.awt.image.codec.tiff.TIFFField[] $r5;
        java.util.Map $r2;
        int i0, $i1, i2;
        float $f0;
        java.lang.Object $r3;

        r0 := @this: org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        $r2 = r0.<org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: java.util.Map fieldIndex>;

        $r1 = new java.lang.Integer;

        specialinvoke $r1.<java.lang.Integer: void <init>(int)>(i0);

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        r4 = (java.lang.Integer) $r3;

        $r5 = r0.<org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: org.apache.batik.ext.awt.image.codec.tiff.TIFFField[] fields>;

        $i1 = virtualinvoke r4.<java.lang.Integer: int intValue()>();

        $r6 = $r5[$i1];

        $f0 = virtualinvoke $r6.<org.apache.batik.ext.awt.image.codec.tiff.TIFFField: float getAsFloat(int)>(i2);

        return $f0;
    }

    public float getFieldAsFloat(int)
    {
        int i0;
        float $f0;
        org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory r0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory;

        i0 := @parameter0: int;

        $f0 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: float getFieldAsFloat(int,int)>(i0, 0);

        return $f0;
    }

    public double getFieldAsDouble(int, int)
    {
        org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory r0;
        org.apache.batik.ext.awt.image.codec.tiff.TIFFField $r6;
        java.lang.Integer $r1, r4;
        org.apache.batik.ext.awt.image.codec.tiff.TIFFField[] $r5;
        java.util.Map $r2;
        int i0, $i1, i2;
        java.lang.Object $r3;
        double $d0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        $r2 = r0.<org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: java.util.Map fieldIndex>;

        $r1 = new java.lang.Integer;

        specialinvoke $r1.<java.lang.Integer: void <init>(int)>(i0);

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        r4 = (java.lang.Integer) $r3;

        $r5 = r0.<org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: org.apache.batik.ext.awt.image.codec.tiff.TIFFField[] fields>;

        $i1 = virtualinvoke r4.<java.lang.Integer: int intValue()>();

        $r6 = $r5[$i1];

        $d0 = virtualinvoke $r6.<org.apache.batik.ext.awt.image.codec.tiff.TIFFField: double getAsDouble(int)>(i2);

        return $d0;
    }

    public double getFieldAsDouble(int)
    {
        int i0;
        org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory r0;
        double $d0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory;

        i0 := @parameter0: int;

        $d0 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: double getFieldAsDouble(int,int)>(i0, 0);

        return $d0;
    }

    private short readShort(org.apache.batik.ext.awt.image.codec.util.SeekableStream) throws java.io.IOException
    {
        org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory r0;
        short $s0, $s1;
        org.apache.batik.ext.awt.image.codec.util.SeekableStream r1;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory;

        r1 := @parameter0: org.apache.batik.ext.awt.image.codec.util.SeekableStream;

        $z0 = r0.<org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: boolean isBigEndian>;

        if $z0 == 0 goto label1;

        $s1 = virtualinvoke r1.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: short readShort()>();

        return $s1;

     label1:
        $s0 = virtualinvoke r1.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: short readShortLE()>();

        return $s0;
    }

    private int readUnsignedShort(org.apache.batik.ext.awt.image.codec.util.SeekableStream) throws java.io.IOException
    {
        org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory r0;
        org.apache.batik.ext.awt.image.codec.util.SeekableStream r1;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory;

        r1 := @parameter0: org.apache.batik.ext.awt.image.codec.util.SeekableStream;

        $z0 = r0.<org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: boolean isBigEndian>;

        if $z0 == 0 goto label1;

        $i1 = virtualinvoke r1.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: int readUnsignedShort()>();

        return $i1;

     label1:
        $i0 = virtualinvoke r1.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: int readUnsignedShortLE()>();

        return $i0;
    }

    private int readInt(org.apache.batik.ext.awt.image.codec.util.SeekableStream) throws java.io.IOException
    {
        org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory r0;
        org.apache.batik.ext.awt.image.codec.util.SeekableStream r1;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory;

        r1 := @parameter0: org.apache.batik.ext.awt.image.codec.util.SeekableStream;

        $z0 = r0.<org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: boolean isBigEndian>;

        if $z0 == 0 goto label1;

        $i1 = virtualinvoke r1.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: int readInt()>();

        return $i1;

     label1:
        $i0 = virtualinvoke r1.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: int readIntLE()>();

        return $i0;
    }

    private long readUnsignedInt(org.apache.batik.ext.awt.image.codec.util.SeekableStream) throws java.io.IOException
    {
        org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory r0;
        org.apache.batik.ext.awt.image.codec.util.SeekableStream r1;
        long $l0, $l1;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory;

        r1 := @parameter0: org.apache.batik.ext.awt.image.codec.util.SeekableStream;

        $z0 = r0.<org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: boolean isBigEndian>;

        if $z0 == 0 goto label1;

        $l1 = virtualinvoke r1.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: long readUnsignedInt()>();

        return $l1;

     label1:
        $l0 = virtualinvoke r1.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: long readUnsignedIntLE()>();

        return $l0;
    }

    private long readLong(org.apache.batik.ext.awt.image.codec.util.SeekableStream) throws java.io.IOException
    {
        org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory r0;
        org.apache.batik.ext.awt.image.codec.util.SeekableStream r1;
        long $l0, $l1;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory;

        r1 := @parameter0: org.apache.batik.ext.awt.image.codec.util.SeekableStream;

        $z0 = r0.<org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: boolean isBigEndian>;

        if $z0 == 0 goto label1;

        $l1 = virtualinvoke r1.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: long readLong()>();

        return $l1;

     label1:
        $l0 = virtualinvoke r1.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: long readLongLE()>();

        return $l0;
    }

    private float readFloat(org.apache.batik.ext.awt.image.codec.util.SeekableStream) throws java.io.IOException
    {
        org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory r0;
        org.apache.batik.ext.awt.image.codec.util.SeekableStream r1;
        float $f0, $f1;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory;

        r1 := @parameter0: org.apache.batik.ext.awt.image.codec.util.SeekableStream;

        $z0 = r0.<org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: boolean isBigEndian>;

        if $z0 == 0 goto label1;

        $f1 = virtualinvoke r1.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: float readFloat()>();

        return $f1;

     label1:
        $f0 = virtualinvoke r1.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: float readFloatLE()>();

        return $f0;
    }

    private double readDouble(org.apache.batik.ext.awt.image.codec.util.SeekableStream) throws java.io.IOException
    {
        org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory r0;
        org.apache.batik.ext.awt.image.codec.util.SeekableStream r1;
        boolean $z0;
        double $d0, $d1;

        r0 := @this: org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory;

        r1 := @parameter0: org.apache.batik.ext.awt.image.codec.util.SeekableStream;

        $z0 = r0.<org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: boolean isBigEndian>;

        if $z0 == 0 goto label1;

        $d1 = virtualinvoke r1.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: double readDouble()>();

        return $d1;

     label1:
        $d0 = virtualinvoke r1.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: double readDoubleLE()>();

        return $d0;
    }

    private static int readUnsignedShort(org.apache.batik.ext.awt.image.codec.util.SeekableStream, boolean) throws java.io.IOException
    {
        org.apache.batik.ext.awt.image.codec.util.SeekableStream r0;
        int $i0, $i1;
        boolean z0;

        r0 := @parameter0: org.apache.batik.ext.awt.image.codec.util.SeekableStream;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $i1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: int readUnsignedShort()>();

        return $i1;

     label1:
        $i0 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: int readUnsignedShortLE()>();

        return $i0;
    }

    private static long readUnsignedInt(org.apache.batik.ext.awt.image.codec.util.SeekableStream, boolean) throws java.io.IOException
    {
        org.apache.batik.ext.awt.image.codec.util.SeekableStream r0;
        long $l0, $l1;
        boolean z0;

        r0 := @parameter0: org.apache.batik.ext.awt.image.codec.util.SeekableStream;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $l1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: long readUnsignedInt()>();

        return $l1;

     label1:
        $l0 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: long readUnsignedIntLE()>();

        return $l0;
    }

    public static int getNumDirectories(org.apache.batik.ext.awt.image.codec.util.SeekableStream) throws java.io.IOException
    {
        long $l0, l5, $l6, l7;
        byte $b3;
        int $i1, $i2, $i4, i8;
        boolean $z0, z1, $z3, $z4, $z5;
        org.apache.batik.ext.awt.image.codec.util.SeekableStream r0;
        java.lang.IllegalArgumentException $r1, $r2;

        r0 := @parameter0: org.apache.batik.ext.awt.image.codec.util.SeekableStream;

        $l0 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: long getFilePointer()>();

        virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: void seek(long)>(0L);

        $i1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: int readUnsignedShort()>();

        $z0 = staticinvoke <org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: boolean isValidEndianTag(int)>($i1);

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("TIFFDirectory1");

        throw $r2;

     label1:
        if $i1 != 19789 goto label2;

        $z5 = 1;

        $z4 = 1;

        $z3 = 1;

        goto label3;

     label2:
        $z5 = 0;

        $z4 = 0;

        $z3 = 0;

     label3:
        z1 = $z5;

        $i2 = staticinvoke <org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: int readUnsignedShort(org.apache.batik.ext.awt.image.codec.util.SeekableStream,boolean)>(r0, $z4);

        if $i2 == 42 goto label4;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("TIFFDirectory2");

        throw $r1;

     label4:
        virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: void seek(long)>(4L);

        l7 = staticinvoke <org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: long readUnsignedInt(org.apache.batik.ext.awt.image.codec.util.SeekableStream,boolean)>(r0, $z3);

        i8 = 0;

        goto label6;

     label5:
        i8 = i8 + 1;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: void seek(long)>(l7);

        $i4 = staticinvoke <org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: int readUnsignedShort(org.apache.batik.ext.awt.image.codec.util.SeekableStream,boolean)>(r0, z1);

        l5 = (long) $i4;

        $l6 = 12L * l5;

        virtualinvoke r0.<java.io.InputStream: long skip(long)>($l6);

        l7 = staticinvoke <org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: long readUnsignedInt(org.apache.batik.ext.awt.image.codec.util.SeekableStream,boolean)>(r0, z1);

     label6:
        $b3 = l7 cmp 0L;

        if $b3 != 0 goto label5;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: void seek(long)>($l0);

        return i8;
    }

    public boolean isBigEndian()
    {
        org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory r0;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory;

        $z0 = r0.<org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: boolean isBigEndian>;

        return $z0;
    }

    public long getIFDOffset()
    {
        org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory r0;
        long $l0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory;

        $l0 = r0.<org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: long IFDOffset>;

        return $l0;
    }

    public long getNextIFDOffset()
    {
        org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory r0;
        long $l0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory;

        $l0 = r0.<org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: long nextIFDOffset>;

        return $l0;
    }

    static void <clinit>()
    {
        int[] $r0;

        $r0 = newarray (int)[13];

        $r0[0] = 0;

        $r0[1] = 1;

        $r0[2] = 1;

        $r0[3] = 2;

        $r0[4] = 4;

        $r0[5] = 8;

        $r0[6] = 1;

        $r0[7] = 1;

        $r0[8] = 2;

        $r0[9] = 4;

        $r0[10] = 8;

        $r0[11] = 4;

        $r0[12] = 8;

        <org.apache.batik.ext.awt.image.codec.tiff.TIFFDirectory: int[] sizeOfType> = $r0;

        return;
    }
}
