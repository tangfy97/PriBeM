public abstract class org.springframework.beans.factory.serviceloader.AbstractServiceLoaderBasedFactoryBean extends org.springframework.beans.factory.config.AbstractFactoryBean implements org.springframework.beans.factory.BeanClassLoaderAware
{
    private java.lang.Class serviceType;
    private java.lang.ClassLoader beanClassLoader;

    public void <init>()
    {
        java.lang.ClassLoader $r1;
        org.springframework.beans.factory.serviceloader.AbstractServiceLoaderBasedFactoryBean r0;

        r0 := @this: org.springframework.beans.factory.serviceloader.AbstractServiceLoaderBasedFactoryBean;

        specialinvoke r0.<org.springframework.beans.factory.config.AbstractFactoryBean: void <init>()>();

        $r1 = staticinvoke <org.springframework.util.ClassUtils: java.lang.ClassLoader getDefaultClassLoader()>();

        r0.<org.springframework.beans.factory.serviceloader.AbstractServiceLoaderBasedFactoryBean: java.lang.ClassLoader beanClassLoader> = $r1;

        return;
    }

    public void setServiceType(java.lang.Class)
    {
        java.lang.Class r1;
        org.springframework.beans.factory.serviceloader.AbstractServiceLoaderBasedFactoryBean r0;

        r0 := @this: org.springframework.beans.factory.serviceloader.AbstractServiceLoaderBasedFactoryBean;

        r1 := @parameter0: java.lang.Class;

        r0.<org.springframework.beans.factory.serviceloader.AbstractServiceLoaderBasedFactoryBean: java.lang.Class serviceType> = r1;

        return;
    }

    public java.lang.Class getServiceType()
    {
        java.lang.Class $r1;
        org.springframework.beans.factory.serviceloader.AbstractServiceLoaderBasedFactoryBean r0;

        r0 := @this: org.springframework.beans.factory.serviceloader.AbstractServiceLoaderBasedFactoryBean;

        $r1 = r0.<org.springframework.beans.factory.serviceloader.AbstractServiceLoaderBasedFactoryBean: java.lang.Class serviceType>;

        return $r1;
    }

    public void setBeanClassLoader(java.lang.ClassLoader)
    {
        java.lang.ClassLoader r1;
        org.springframework.beans.factory.serviceloader.AbstractServiceLoaderBasedFactoryBean r0;

        r0 := @this: org.springframework.beans.factory.serviceloader.AbstractServiceLoaderBasedFactoryBean;

        r1 := @parameter0: java.lang.ClassLoader;

        r0.<org.springframework.beans.factory.serviceloader.AbstractServiceLoaderBasedFactoryBean: java.lang.ClassLoader beanClassLoader> = r1;

        return;
    }

    protected java.lang.Object createInstance()
    {
        java.lang.Class $r1, $r2;
        java.util.ServiceLoader $r4;
        java.lang.Object $r5;
        java.lang.ClassLoader $r3;
        org.springframework.beans.factory.serviceloader.AbstractServiceLoaderBasedFactoryBean r0;

        r0 := @this: org.springframework.beans.factory.serviceloader.AbstractServiceLoaderBasedFactoryBean;

        $r1 = virtualinvoke r0.<org.springframework.beans.factory.serviceloader.AbstractServiceLoaderBasedFactoryBean: java.lang.Class getServiceType()>();

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>($r1, "Property \'serviceType\' is required");

        $r2 = virtualinvoke r0.<org.springframework.beans.factory.serviceloader.AbstractServiceLoaderBasedFactoryBean: java.lang.Class getServiceType()>();

        $r3 = r0.<org.springframework.beans.factory.serviceloader.AbstractServiceLoaderBasedFactoryBean: java.lang.ClassLoader beanClassLoader>;

        $r4 = staticinvoke <java.util.ServiceLoader: java.util.ServiceLoader load(java.lang.Class,java.lang.ClassLoader)>($r2, $r3);

        $r5 = virtualinvoke r0.<org.springframework.beans.factory.serviceloader.AbstractServiceLoaderBasedFactoryBean: java.lang.Object getObjectToExpose(java.util.ServiceLoader)>($r4);

        return $r5;
    }

    protected abstract java.lang.Object getObjectToExpose(java.util.ServiceLoader);
}
