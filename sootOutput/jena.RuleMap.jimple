public class jena.RuleMap extends java.lang.Object
{

    public void <init>()
    {
        jena.RuleMap r0;

        r0 := @this: jena.RuleMap;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.List loadRules(java.lang.String, java.util.Map) throws java.io.IOException
    {
        java.util.Map r1;
        java.lang.String r0, $r3, $r5, $r8, $r10, r12;
        boolean $z0, $z1, $z2;
        java.util.List $r14;
        java.lang.StringBuilder $r2, $r4, $r6, $r7, $r9, $r11;
        java.io.BufferedReader $r13;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.Map;

        r12 = r0;

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("file:///");

        if $z0 == 0 goto label1;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = <java.io.File: java.lang.String separator>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(8);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label3;

     label1:
        $z1 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("file:/");

        if $z1 == 0 goto label2;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = <java.io.File: java.lang.String separator>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(6);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        r12 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label3;

     label2:
        $z2 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("file:");

        if $z2 == 0 goto label3;

        r12 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(5);

     label3:
        $r13 = staticinvoke <com.hp.hpl.jena.util.FileUtils: java.io.BufferedReader openResourceFile(java.lang.String)>(r12);

        $r14 = staticinvoke <jena.RuleMap: java.util.List loadRules(java.io.BufferedReader,java.util.Map)>($r13, r1);

        return $r14;
    }

    public static java.util.List loadRules(java.io.BufferedReader, java.util.Map) throws java.io.IOException
    {
        java.util.List $r2;
        java.util.Map r3, $r4;
        java.io.BufferedReader r0;
        com.hp.hpl.jena.reasoner.rulesys.Rule$Parser $r1;

        r0 := @parameter0: java.io.BufferedReader;

        r3 := @parameter1: java.util.Map;

        $r1 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Rule: com.hp.hpl.jena.reasoner.rulesys.Rule$Parser rulesParserFromReader(java.io.BufferedReader)>(r0);

        $r2 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Rule: java.util.List parseRules(com.hp.hpl.jena.reasoner.rulesys.Rule$Parser)>($r1);

        $r4 = virtualinvoke $r1.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: java.util.Map getPrefixMap()>();

        interfaceinvoke r3.<java.util.Map: void putAll(java.util.Map)>($r4);

        return $r2;
    }

    public static void main(java.lang.String[])
    {
        com.hp.hpl.jena.rdf.model.InfModel $r14;
        jena.RuleMap$Deduce $r8;
        com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner $r13;
        com.hp.hpl.jena.reasoner.rulesys.BuiltinRegistry $r9;
        boolean $z0, $z1;
        java.io.PrintWriter $r15;
        java.util.List $r12;
        java.lang.StringBuilder $r22, $r24, $r25;
        jena.cmdline.Arg $r2, $r5, $r7;
        java.lang.Throwable $r21;
        java.lang.String[] r1;
        java.util.HashMap $r10;
        int $i0;
        com.hp.hpl.jena.util.FileManager $r4;
        java.lang.String $r3, r6, $r11, $r26, $r27, $r29;
        java.io.PrintStream $r16, $r20, $r23;
        jena.cmdline.CommandLine $r0;
        com.hp.hpl.jena.rdf.model.Model $r17, $r18, r28;
        java.io.InputStream $r19;

        r1 := @parameter0: java.lang.String[];

     label01:
        $r0 = new jena.cmdline.CommandLine;

        specialinvoke $r0.<jena.cmdline.CommandLine: void <init>()>();

        virtualinvoke $r0.<jena.cmdline.CommandLine: void setUsage(java.lang.String)>("Usage:  RuleMap [-il inlang] [-ol outlang] [-d] rulefile infile (- for stdin)");

        virtualinvoke $r0.<jena.cmdline.CommandLine: jena.cmdline.CommandLine add(java.lang.String,boolean)>("il", 1);

        virtualinvoke $r0.<jena.cmdline.CommandLine: jena.cmdline.CommandLine add(java.lang.String,boolean)>("ol", 1);

        virtualinvoke $r0.<jena.cmdline.CommandLine: jena.cmdline.CommandLine add(java.lang.String,boolean)>("d", 0);

        virtualinvoke $r0.<jena.cmdline.CommandLine: void process(java.lang.String[])>(r1);

        $i0 = virtualinvoke $r0.<jena.cmdline.CommandLine: int numItems()>();

        if $i0 == 2 goto label02;

        $r20 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r20.<java.io.PrintStream: void println(java.lang.String)>("Usage:  RuleMap [-il inlang] [-ol outlang] [-d] rulefile infile (- for stdin)");

        staticinvoke <java.lang.System: void exit(int)>(1);

     label02:
        $r2 = virtualinvoke $r0.<jena.cmdline.CommandLine: jena.cmdline.Arg getArg(java.lang.String)>("il");

        if $r2 != null goto label03;

        $r27 = null;

        goto label04;

     label03:
        $r27 = virtualinvoke $r2.<jena.cmdline.Arg: java.lang.String getValue()>();

     label04:
        $r3 = virtualinvoke $r0.<jena.cmdline.CommandLine: java.lang.String getItem(int)>(1);

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("-");

        if $z0 == 0 goto label05;

        $r18 = staticinvoke <com.hp.hpl.jena.rdf.model.ModelFactory: com.hp.hpl.jena.rdf.model.Model createDefaultModel()>();

        r28 = $r18;

        $r19 = <java.lang.System: java.io.InputStream in>;

        interfaceinvoke $r18.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Model read(java.io.InputStream,java.lang.String,java.lang.String)>($r19, null, $r27);

        goto label06;

     label05:
        $r4 = staticinvoke <com.hp.hpl.jena.util.FileManager: com.hp.hpl.jena.util.FileManager get()>();

        r28 = virtualinvoke $r4.<com.hp.hpl.jena.util.FileManager: com.hp.hpl.jena.rdf.model.Model loadModel(java.lang.String,java.lang.String)>($r3, $r27);

     label06:
        $r5 = virtualinvoke $r0.<jena.cmdline.CommandLine: jena.cmdline.Arg getArg(java.lang.String)>("ol");

        if $r5 != null goto label07;

        $r29 = "N3";

        goto label08;

     label07:
        $r29 = virtualinvoke $r5.<jena.cmdline.Arg: java.lang.String getValue()>();

     label08:
        r6 = $r29;

        $r7 = virtualinvoke $r0.<jena.cmdline.CommandLine: jena.cmdline.Arg getArg(java.lang.String)>("d");

        if $r7 == null goto label09;

        $z1 = 1;

        goto label10;

     label09:
        $z1 = 0;

     label10:
        $r9 = <com.hp.hpl.jena.reasoner.rulesys.BuiltinRegistry: com.hp.hpl.jena.reasoner.rulesys.BuiltinRegistry theRegistry>;

        $r8 = new jena.RuleMap$Deduce;

        specialinvoke $r8.<jena.RuleMap$Deduce: void <init>()>();

        virtualinvoke $r9.<com.hp.hpl.jena.reasoner.rulesys.BuiltinRegistry: void register(com.hp.hpl.jena.reasoner.rulesys.Builtin)>($r8);

        $r10 = new java.util.HashMap;

        specialinvoke $r10.<java.util.HashMap: void <init>()>();

        $r11 = virtualinvoke $r0.<jena.cmdline.CommandLine: java.lang.String getItem(int)>(0);

        $r12 = staticinvoke <jena.RuleMap: java.util.List loadRules(java.lang.String,java.util.Map)>($r11, $r10);

        $r13 = new com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner;

        specialinvoke $r13.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: void <init>(java.util.List)>($r12);

        $r14 = staticinvoke <com.hp.hpl.jena.rdf.model.ModelFactory: com.hp.hpl.jena.rdf.model.InfModel createInfModel(com.hp.hpl.jena.reasoner.Reasoner,com.hp.hpl.jena.rdf.model.Model)>($r13, r28);

        interfaceinvoke $r14.<com.hp.hpl.jena.rdf.model.InfModel: void prepare()>();

        interfaceinvoke $r14.<com.hp.hpl.jena.rdf.model.InfModel: com.hp.hpl.jena.shared.PrefixMapping setNsPrefixes(java.util.Map)>($r10);

        $r15 = new java.io.PrintWriter;

        $r16 = <java.lang.System: java.io.PrintStream out>;

        specialinvoke $r15.<java.io.PrintWriter: void <init>(java.io.OutputStream)>($r16);

        if $z1 == 0 goto label11;

        $r17 = interfaceinvoke $r14.<com.hp.hpl.jena.rdf.model.InfModel: com.hp.hpl.jena.rdf.model.Model getDeductionsModel()>();

        interfaceinvoke $r17.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.shared.PrefixMapping setNsPrefixes(java.util.Map)>($r10);

        interfaceinvoke $r17.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.shared.PrefixMapping setNsPrefixes(com.hp.hpl.jena.shared.PrefixMapping)>(r28);

        interfaceinvoke $r17.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Model write(java.io.Writer,java.lang.String)>($r15, r6);

        goto label12;

     label11:
        interfaceinvoke $r14.<com.hp.hpl.jena.rdf.model.InfModel: com.hp.hpl.jena.rdf.model.Model write(java.io.Writer,java.lang.String)>($r15, r6);

     label12:
        virtualinvoke $r15.<java.io.PrintWriter: void close()>();

     label13:
        goto label15;

     label14:
        $r21 := @caughtexception;

        $r23 = <java.lang.System: java.io.PrintStream err>;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("An error occured: \n");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r21);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r23.<java.io.PrintStream: void println(java.lang.String)>($r26);

        virtualinvoke $r21.<java.lang.Throwable: void printStackTrace()>();

     label15:
        return;

        catch java.lang.Throwable from label01 to label13 with label14;
    }

    static void <clinit>()
    {
        staticinvoke <jena.cmdline.CmdLineUtils: void setLog4jConfiguration()>();

        return;
    }
}
