public class org.springframework.jmx.export.assembler.MethodNameBasedMBeanInfoAssembler extends org.springframework.jmx.export.assembler.AbstractConfigurableMBeanInfoAssembler
{
    private java.util.Set managedMethods;
    private java.util.Map methodMappings;

    public void <init>()
    {
        org.springframework.jmx.export.assembler.MethodNameBasedMBeanInfoAssembler r0;

        r0 := @this: org.springframework.jmx.export.assembler.MethodNameBasedMBeanInfoAssembler;

        specialinvoke r0.<org.springframework.jmx.export.assembler.AbstractConfigurableMBeanInfoAssembler: void <init>()>();

        return;
    }

    public void setManagedMethods(java.lang.String[])
    {
        java.util.HashSet $r1;
        java.util.List $r3;
        java.util.Collection $r4;
        java.lang.String[] r2;
        org.springframework.jmx.export.assembler.MethodNameBasedMBeanInfoAssembler r0;

        r0 := @this: org.springframework.jmx.export.assembler.MethodNameBasedMBeanInfoAssembler;

        r2 := @parameter0: java.lang.String[];

        $r1 = new java.util.HashSet;

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r2);

        $r4 = (java.util.Collection) $r3;

        specialinvoke $r1.<java.util.HashSet: void <init>(java.util.Collection)>($r4);

        r0.<org.springframework.jmx.export.assembler.MethodNameBasedMBeanInfoAssembler: java.util.Set managedMethods> = $r1;

        return;
    }

    public void setMethodMappings(java.util.Properties)
    {
        java.util.Properties r2;
        java.util.Enumeration $r3;
        java.util.Collection $r11;
        java.util.HashMap $r1;
        java.lang.String[] $r7;
        org.springframework.jmx.export.assembler.MethodNameBasedMBeanInfoAssembler r0;
        java.util.HashSet $r8;
        java.util.List $r10;
        java.util.Map $r9;
        java.lang.Object $r4;
        java.lang.String r5, $r6;
        boolean $z0;

        r0 := @this: org.springframework.jmx.export.assembler.MethodNameBasedMBeanInfoAssembler;

        r2 := @parameter0: java.util.Properties;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.springframework.jmx.export.assembler.MethodNameBasedMBeanInfoAssembler: java.util.Map methodMappings> = $r1;

        $r3 = virtualinvoke r2.<java.util.Properties: java.util.Enumeration keys()>();

        goto label2;

     label1:
        $r4 = interfaceinvoke $r3.<java.util.Enumeration: java.lang.Object nextElement()>();

        r5 = (java.lang.String) $r4;

        $r6 = virtualinvoke r2.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r5);

        $r7 = staticinvoke <org.springframework.util.StringUtils: java.lang.String[] commaDelimitedListToStringArray(java.lang.String)>($r6);

        $r9 = r0.<org.springframework.jmx.export.assembler.MethodNameBasedMBeanInfoAssembler: java.util.Map methodMappings>;

        $r8 = new java.util.HashSet;

        $r10 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r7);

        $r11 = (java.util.Collection) $r10;

        specialinvoke $r8.<java.util.HashSet: void <init>(java.util.Collection)>($r11);

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, $r8);

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 != 0 goto label1;

        return;
    }

    protected boolean includeReadAttribute(java.lang.reflect.Method, java.lang.String)
    {
        java.lang.String r2;
        java.lang.reflect.Method r1;
        org.springframework.jmx.export.assembler.MethodNameBasedMBeanInfoAssembler r0;
        boolean $z0;

        r0 := @this: org.springframework.jmx.export.assembler.MethodNameBasedMBeanInfoAssembler;

        r1 := @parameter0: java.lang.reflect.Method;

        r2 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r0.<org.springframework.jmx.export.assembler.MethodNameBasedMBeanInfoAssembler: boolean isMatch(java.lang.reflect.Method,java.lang.String)>(r1, r2);

        return $z0;
    }

    protected boolean includeWriteAttribute(java.lang.reflect.Method, java.lang.String)
    {
        java.lang.String r2;
        java.lang.reflect.Method r1;
        org.springframework.jmx.export.assembler.MethodNameBasedMBeanInfoAssembler r0;
        boolean $z0;

        r0 := @this: org.springframework.jmx.export.assembler.MethodNameBasedMBeanInfoAssembler;

        r1 := @parameter0: java.lang.reflect.Method;

        r2 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r0.<org.springframework.jmx.export.assembler.MethodNameBasedMBeanInfoAssembler: boolean isMatch(java.lang.reflect.Method,java.lang.String)>(r1, r2);

        return $z0;
    }

    protected boolean includeOperation(java.lang.reflect.Method, java.lang.String)
    {
        java.lang.String r2;
        java.lang.reflect.Method r1;
        org.springframework.jmx.export.assembler.MethodNameBasedMBeanInfoAssembler r0;
        boolean $z0;

        r0 := @this: org.springframework.jmx.export.assembler.MethodNameBasedMBeanInfoAssembler;

        r1 := @parameter0: java.lang.reflect.Method;

        r2 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r0.<org.springframework.jmx.export.assembler.MethodNameBasedMBeanInfoAssembler: boolean isMatch(java.lang.reflect.Method,java.lang.String)>(r1, r2);

        return $z0;
    }

    protected boolean isMatch(java.lang.reflect.Method, java.lang.String)
    {
        java.util.Set $r2, $r4, r9;
        org.springframework.jmx.export.assembler.MethodNameBasedMBeanInfoAssembler r0;
        java.util.Map $r1, $r7;
        java.lang.Object $r8;
        java.lang.String $r5, r6, $r10;
        java.lang.reflect.Method r3;
        boolean $z0, $z1;

        r0 := @this: org.springframework.jmx.export.assembler.MethodNameBasedMBeanInfoAssembler;

        r3 := @parameter0: java.lang.reflect.Method;

        r6 := @parameter1: java.lang.String;

        $r1 = r0.<org.springframework.jmx.export.assembler.MethodNameBasedMBeanInfoAssembler: java.util.Map methodMappings>;

        if $r1 == null goto label1;

        $r7 = r0.<org.springframework.jmx.export.assembler.MethodNameBasedMBeanInfoAssembler: java.util.Map methodMappings>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r6);

        r9 = (java.util.Set) $r8;

        if r9 == null goto label1;

        $r10 = virtualinvoke r3.<java.lang.reflect.Method: java.lang.String getName()>();

        $z1 = interfaceinvoke r9.<java.util.Set: boolean contains(java.lang.Object)>($r10);

        return $z1;

     label1:
        $r2 = r0.<org.springframework.jmx.export.assembler.MethodNameBasedMBeanInfoAssembler: java.util.Set managedMethods>;

        if $r2 == null goto label2;

        $r4 = r0.<org.springframework.jmx.export.assembler.MethodNameBasedMBeanInfoAssembler: java.util.Set managedMethods>;

        $r5 = virtualinvoke r3.<java.lang.reflect.Method: java.lang.String getName()>();

        $z0 = interfaceinvoke $r4.<java.util.Set: boolean contains(java.lang.Object)>($r5);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }
}
