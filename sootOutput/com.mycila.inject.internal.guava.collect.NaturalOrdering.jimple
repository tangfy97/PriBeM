final class com.mycila.inject.internal.guava.collect.NaturalOrdering extends com.mycila.inject.internal.guava.collect.Ordering implements java.io.Serializable
{
    static final com.mycila.inject.internal.guava.collect.NaturalOrdering INSTANCE;
    private static final long serialVersionUID;

    public int compare(java.lang.Comparable, java.lang.Comparable)
    {
        int $i0;
        java.lang.Comparable r0, r1;
        com.mycila.inject.internal.guava.collect.NaturalOrdering r2;

        r2 := @this: com.mycila.inject.internal.guava.collect.NaturalOrdering;

        r1 := @parameter0: java.lang.Comparable;

        r0 := @parameter1: java.lang.Comparable;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        if r1 != r0 goto label1;

        return 0;

     label1:
        $i0 = interfaceinvoke r1.<java.lang.Comparable: int compareTo(java.lang.Object)>(r0);

        return $i0;
    }

    public com.mycila.inject.internal.guava.collect.Ordering reverse()
    {
        com.mycila.inject.internal.guava.collect.NaturalOrdering r1;
        com.mycila.inject.internal.guava.collect.ReverseNaturalOrdering $r0;

        r1 := @this: com.mycila.inject.internal.guava.collect.NaturalOrdering;

        $r0 = <com.mycila.inject.internal.guava.collect.ReverseNaturalOrdering: com.mycila.inject.internal.guava.collect.ReverseNaturalOrdering INSTANCE>;

        return $r0;
    }

    public int binarySearch(java.util.List, java.lang.Comparable)
    {
        java.util.List r0;
        int $i0;
        java.lang.Comparable r1;
        com.mycila.inject.internal.guava.collect.NaturalOrdering r2;

        r2 := @this: com.mycila.inject.internal.guava.collect.NaturalOrdering;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.lang.Comparable;

        $i0 = staticinvoke <java.util.Collections: int binarySearch(java.util.List,java.lang.Object)>(r0, r1);

        return $i0;
    }

    public java.util.List sortedCopy(java.lang.Iterable)
    {
        com.mycila.inject.internal.guava.collect.NaturalOrdering r2;
        java.lang.Iterable r0;
        java.util.ArrayList $r1;

        r2 := @this: com.mycila.inject.internal.guava.collect.NaturalOrdering;

        r0 := @parameter0: java.lang.Iterable;

        $r1 = staticinvoke <com.mycila.inject.internal.guava.collect.Lists: java.util.ArrayList newArrayList(java.lang.Iterable)>(r0);

        staticinvoke <java.util.Collections: void sort(java.util.List)>($r1);

        return $r1;
    }

    private java.lang.Object readResolve()
    {
        com.mycila.inject.internal.guava.collect.NaturalOrdering $r0, r1;

        r1 := @this: com.mycila.inject.internal.guava.collect.NaturalOrdering;

        $r0 = <com.mycila.inject.internal.guava.collect.NaturalOrdering: com.mycila.inject.internal.guava.collect.NaturalOrdering INSTANCE>;

        return $r0;
    }

    public java.lang.String toString()
    {
        com.mycila.inject.internal.guava.collect.NaturalOrdering r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.NaturalOrdering;

        return "Ordering.natural()";
    }

    private void <init>()
    {
        com.mycila.inject.internal.guava.collect.NaturalOrdering r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.NaturalOrdering;

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.Ordering: void <init>()>();

        return;
    }

    public volatile int binarySearch(java.util.List, java.lang.Object)
    {
        java.util.List r1;
        int $i0;
        java.lang.Object r2;
        java.lang.Comparable $r3;
        com.mycila.inject.internal.guava.collect.NaturalOrdering r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.NaturalOrdering;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.lang.Object;

        $r3 = (java.lang.Comparable) r2;

        $i0 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.NaturalOrdering: int binarySearch(java.util.List,java.lang.Comparable)>(r1, $r3);

        return $i0;
    }

    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        int $i0;
        java.lang.Object r1, r2;
        java.lang.Comparable $r3, $r4;
        com.mycila.inject.internal.guava.collect.NaturalOrdering r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.NaturalOrdering;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (java.lang.Comparable) r1;

        $r3 = (java.lang.Comparable) r2;

        $i0 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.NaturalOrdering: int compare(java.lang.Comparable,java.lang.Comparable)>($r4, $r3);

        return $i0;
    }

    static void <clinit>()
    {
        com.mycila.inject.internal.guava.collect.NaturalOrdering $r0;

        <com.mycila.inject.internal.guava.collect.NaturalOrdering: long serialVersionUID> = 0L;

        $r0 = new com.mycila.inject.internal.guava.collect.NaturalOrdering;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.NaturalOrdering: void <init>()>();

        <com.mycila.inject.internal.guava.collect.NaturalOrdering: com.mycila.inject.internal.guava.collect.NaturalOrdering INSTANCE> = $r0;

        return;
    }
}
