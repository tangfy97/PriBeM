public class org.apache.batik.ext.awt.image.rendered.SpecularLightingRed extends org.apache.batik.ext.awt.image.rendered.AbstractTiledRed
{
    private double ks;
    private double specularExponent;
    private org.apache.batik.ext.awt.image.Light light;
    private org.apache.batik.ext.awt.image.rendered.BumpMap bumpMap;
    private double scaleX;
    private double scaleY;
    private java.awt.Rectangle litRegion;
    private boolean linear;

    public void <init>(double, double, org.apache.batik.ext.awt.image.Light, org.apache.batik.ext.awt.image.rendered.BumpMap, java.awt.Rectangle, double, double, boolean)
    {
        java.awt.Rectangle r3;
        java.awt.image.SampleModel $r4;
        int $i0, $i1, $i2, $i3, $i4, i5, i6;
        org.apache.batik.ext.awt.image.rendered.SpecularLightingRed r0;
        double d0, d1, d2, d3;
        boolean z0;
        org.apache.batik.ext.awt.image.rendered.BumpMap r2;
        org.apache.batik.ext.awt.image.Light r1;
        java.awt.image.ColorModel r5;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.SpecularLightingRed;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        r1 := @parameter2: org.apache.batik.ext.awt.image.Light;

        r2 := @parameter3: org.apache.batik.ext.awt.image.rendered.BumpMap;

        r3 := @parameter4: java.awt.Rectangle;

        d2 := @parameter5: double;

        d3 := @parameter6: double;

        z0 := @parameter7: boolean;

        specialinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractTiledRed: void <init>()>();

        r0.<org.apache.batik.ext.awt.image.rendered.SpecularLightingRed: double ks> = d0;

        r0.<org.apache.batik.ext.awt.image.rendered.SpecularLightingRed: double specularExponent> = d1;

        r0.<org.apache.batik.ext.awt.image.rendered.SpecularLightingRed: org.apache.batik.ext.awt.image.Light light> = r1;

        r0.<org.apache.batik.ext.awt.image.rendered.SpecularLightingRed: org.apache.batik.ext.awt.image.rendered.BumpMap bumpMap> = r2;

        r0.<org.apache.batik.ext.awt.image.rendered.SpecularLightingRed: java.awt.Rectangle litRegion> = r3;

        r0.<org.apache.batik.ext.awt.image.rendered.SpecularLightingRed: double scaleX> = d2;

        r0.<org.apache.batik.ext.awt.image.rendered.SpecularLightingRed: double scaleY> = d3;

        r0.<org.apache.batik.ext.awt.image.rendered.SpecularLightingRed: boolean linear> = z0;

        if z0 == 0 goto label1;

        r5 = <org.apache.batik.ext.awt.image.GraphicsUtil: java.awt.image.ColorModel Linear_sRGB_Unpre>;

        goto label2;

     label1:
        r5 = <org.apache.batik.ext.awt.image.GraphicsUtil: java.awt.image.ColorModel sRGB_Unpre>;

     label2:
        $i3 = r3.<java.awt.Rectangle: int width>;

        i5 = $i3;

        $i4 = r3.<java.awt.Rectangle: int height>;

        i6 = $i4;

        $i0 = staticinvoke <org.apache.batik.ext.awt.image.rendered.AbstractTiledRed: int getDefaultTileSize()>();

        if $i3 <= $i0 goto label3;

        i5 = $i0;

     label3:
        if $i4 <= $i0 goto label4;

        i6 = $i0;

     label4:
        $r4 = virtualinvoke r5.<java.awt.image.ColorModel: java.awt.image.SampleModel createCompatibleSampleModel(int,int)>(i5, i6);

        $i2 = r3.<java.awt.Rectangle: int x>;

        $i1 = r3.<java.awt.Rectangle: int y>;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractTiledRed: void init(org.apache.batik.ext.awt.image.rendered.CachableRed,java.awt.Rectangle,java.awt.image.ColorModel,java.awt.image.SampleModel,int,int,java.util.Map)>(null, r3, r5, $r4, $i2, $i1, null);

        return;
    }

    public java.awt.image.WritableRaster copyData(java.awt.image.WritableRaster)
    {
        java.awt.image.WritableRaster r1;
        org.apache.batik.ext.awt.image.rendered.SpecularLightingRed r0;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.SpecularLightingRed;

        r1 := @parameter0: java.awt.image.WritableRaster;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractTiledRed: void copyToRaster(java.awt.image.WritableRaster)>(r1);

        return r1;
    }

    public void genRect(java.awt.image.WritableRaster)
    {
        java.awt.image.SampleModel $r8;
        byte $b13, $b14, $b17, $b22;
        java.awt.image.DataBufferInt r5;
        short $s34, $s41, $s48;
        int[] r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, $i11, i12, $i15, $i16, $i18, $i19, $i20, $i21, $i23, $i24, $i25, $i26, $i27, $i28, $i29, i30, i31, i32, i33, $i35, $i36, $i37, i38, i39, i40, $i42, $i43, $i44, i45, i46, i47, $i49, $i50, $i51, $i52, $i53, $i55, $i57, $i58, $i60;
        java.awt.image.WritableRaster r3;
        org.apache.batik.ext.awt.image.rendered.SpecularLightingRed r0;
        double[][][] $r11;
        double[][] r18, r19, r22, r23, r27;
        double[] $r2, r20, r21, r24, r25, r26, r28;
        java.awt.image.SinglePixelPackedSampleModel r9;
        org.apache.batik.ext.awt.image.Light $r1, $r12, $r13, $r14, $r15, $r16;
        int[][] $r6;
        org.apache.batik.ext.awt.image.SpotLight r17;
        boolean $z0, $z1, $z2;
        java.awt.image.DataBuffer $r4;
        double d0, d1, $d2, d3, $d4, d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, $d65, $d66, $d67, $d68, $d69, $d70, $d71, $d72, $d73, $d74, $d75, $d76, $d77, $d78, $d79, $d80, $d81, $d82, $d83, $d84, $d85, $d86, $d87, $d88, $d89, $d90, $d91, $d92, $d93, $d94, $d95, $d96, $d97, $d98, $d99, $d100, $d101, $d102, $d103, $d104, $d105, $d106, $d107, $d108, $d109, $d110, $d111, d112, $d113, $d114, $d115, $d116, $d117, $d118, $d119, $d120, $d121, d122, d123, d124, d125, d126;
        org.apache.batik.ext.awt.image.rendered.BumpMap $r10;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.SpecularLightingRed;

        r3 := @parameter0: java.awt.image.WritableRaster;

        d0 = r0.<org.apache.batik.ext.awt.image.rendered.SpecularLightingRed: double scaleX>;

        d1 = r0.<org.apache.batik.ext.awt.image.rendered.SpecularLightingRed: double scaleY>;

        $r1 = r0.<org.apache.batik.ext.awt.image.rendered.SpecularLightingRed: org.apache.batik.ext.awt.image.Light light>;

        $z0 = r0.<org.apache.batik.ext.awt.image.rendered.SpecularLightingRed: boolean linear>;

        $r2 = interfaceinvoke $r1.<org.apache.batik.ext.awt.image.Light: double[] getColor(boolean)>($z0);

        $i0 = virtualinvoke r3.<java.awt.image.Raster: int getWidth()>();

        $i1 = virtualinvoke r3.<java.awt.image.Raster: int getHeight()>();

        $i2 = virtualinvoke r3.<java.awt.image.Raster: int getMinX()>();

        $i3 = virtualinvoke r3.<java.awt.image.Raster: int getMinY()>();

        $r4 = virtualinvoke r3.<java.awt.image.Raster: java.awt.image.DataBuffer getDataBuffer()>();

        r5 = (java.awt.image.DataBufferInt) $r4;

        $r6 = virtualinvoke r5.<java.awt.image.DataBufferInt: int[][] getBankData()>();

        r7 = $r6[0];

        $r8 = virtualinvoke r3.<java.awt.image.Raster: java.awt.image.SampleModel getSampleModel()>();

        r9 = (java.awt.image.SinglePixelPackedSampleModel) $r8;

        $i4 = virtualinvoke r5.<java.awt.image.DataBuffer: int getOffset()>();

        $i5 = virtualinvoke r3.<java.awt.image.Raster: int getSampleModelTranslateX()>();

        $i6 = $i2 - $i5;

        $i7 = virtualinvoke r3.<java.awt.image.Raster: int getSampleModelTranslateY()>();

        $i8 = $i3 - $i7;

        $i9 = virtualinvoke r9.<java.awt.image.SinglePixelPackedSampleModel: int getOffset(int,int)>($i6, $i8);

        i10 = $i4 + $i9;

        $i11 = virtualinvoke r9.<java.awt.image.SinglePixelPackedSampleModel: int getScanlineStride()>();

        i12 = $i11 - $i0;

        i30 = i10;

        $d2 = (double) $i2;

        d3 = d0 * $d2;

        $d4 = (double) $i3;

        d5 = d1 * $d4;

        $d7 = $r2[0];

        $d6 = $r2[1];

        $b13 = $d7 cmpl $d6;

        $i52 = (int) $b13;

        if $i52 <= 0 goto label01;

        $d120 = $r2[0];

        goto label02;

     label01:
        $d120 = $r2[1];

     label02:
        $d8 = $r2[2];

        $b14 = $d120 cmpl $d8;

        $i53 = (int) $b14;

        if $i53 <= 0 goto label03;

        $d121 = $d120;

        goto label04;

     label03:
        $d121 = $r2[2];

     label04:
        $d118 = 255.0 / $d121;

        $d9 = $r2[0];

        $d10 = $d9 * $d118;

        $d11 = $d10 + 0.5;

        $i25 = (int) $d11;

        $d12 = $r2[1];

        $d13 = $d12 * $d118;

        $d14 = $d13 + 0.5;

        $i26 = (int) $d14;

        $i15 = $i25 << 8;

        $i27 = $i15 | $i26;

        $d15 = $r2[2];

        $d16 = $d15 * $d118;

        $d17 = $d16 + 0.5;

        $i28 = (int) $d17;

        $i16 = $i27 << 8;

        $i29 = $i16 | $i28;

        $d18 = r0.<org.apache.batik.ext.awt.image.rendered.SpecularLightingRed: double ks>;

        $d19 = 255.0 * $d18;

        $d119 = $d121 * $d19;

        $r10 = r0.<org.apache.batik.ext.awt.image.rendered.SpecularLightingRed: org.apache.batik.ext.awt.image.rendered.BumpMap bumpMap>;

        $r11 = virtualinvoke $r10.<org.apache.batik.ext.awt.image.rendered.BumpMap: double[][][] getNormalArray(int,int,int,int)>($i2, $i3, $i0, $i1);

        $r12 = r0.<org.apache.batik.ext.awt.image.rendered.SpecularLightingRed: org.apache.batik.ext.awt.image.Light light>;

        $z1 = $r12 instanceof org.apache.batik.ext.awt.image.SpotLight;

        if $z1 == 0 goto label13;

        $r16 = r0.<org.apache.batik.ext.awt.image.rendered.SpecularLightingRed: org.apache.batik.ext.awt.image.Light light>;

        r17 = (org.apache.batik.ext.awt.image.SpotLight) $r16;

        r18 = newmultiarray (double)[$i0][4];

        i31 = 0;

        goto label12;

     label05:
        r19 = $r11[i31];

        $d86 = (double) i31;

        $d87 = $d86 * d1;

        $d88 = d5 + $d87;

        virtualinvoke r17.<org.apache.batik.ext.awt.image.SpotLight: double[][] getLightRow4(double,double,double,int,double[][],double[][])>(d3, $d88, d0, $i0, r19, r18);

        i32 = 0;

        goto label11;

     label06:
        r20 = r19[i32];

        r21 = r18[i32];

        d122 = r21[3];

        $b22 = d122 cmpl 0.0;

        if $b22 != 0 goto label07;

        i33 = 0;

        goto label10;

     label07:
        $d89 = r21[2];

        $d90 = $d89 + 1.0;

        r21[2] = $d90;

        $d92 = r21[0];

        $d91 = r21[0];

        $d96 = $d92 * $d91;

        $d94 = r21[1];

        $d93 = r21[1];

        $d95 = $d94 * $d93;

        $d100 = $d96 + $d95;

        $d98 = r21[2];

        $d97 = r21[2];

        $d99 = $d98 * $d97;

        d123 = $d100 + $d99;

        $d101 = staticinvoke <java.lang.Math: double sqrt(double)>(d123);

        $d103 = r20[0];

        $d102 = r21[0];

        $d107 = $d103 * $d102;

        $d105 = r20[1];

        $d104 = r21[1];

        $d106 = $d105 * $d104;

        $d111 = $d107 + $d106;

        $d109 = r20[2];

        $d108 = r21[2];

        $d110 = $d109 * $d108;

        d112 = $d111 + $d110;

        $d114 = d112 / $d101;

        $d113 = r0.<org.apache.batik.ext.awt.image.rendered.SpecularLightingRed: double specularExponent>;

        $d115 = staticinvoke <java.lang.Math: double pow(double,double)>($d114, $d113);

        d124 = d122 * $d115;

        $d116 = $d119 * d124;

        $d117 = $d116 + 0.5;

        i33 = (int) $d117;

        $i55 = (int) -256;

        $i23 = i33 & $i55;

        if $i23 == 0 goto label10;

        $i24 = i33 & -2147483648;

        if $i24 == 0 goto label08;

        $s34 = 0;

        goto label09;

     label08:
        $s34 = 255;

     label09:
        i33 = $s34;

     label10:
        $i35 = i30;

        i30 = i30 + 1;

        $i36 = i33 << 24;

        $i37 = $i36 | $i29;

        r7[$i35] = $i37;

        i32 = i32 + 1;

     label11:
        if i32 < $i0 goto label06;

        i30 = i30 + i12;

        i31 = i31 + 1;

     label12:
        if i31 < $i1 goto label05;

        goto label30;

     label13:
        $r13 = r0.<org.apache.batik.ext.awt.image.rendered.SpecularLightingRed: org.apache.batik.ext.awt.image.Light light>;

        $z2 = interfaceinvoke $r13.<org.apache.batik.ext.awt.image.Light: boolean isConstant()>();

        if $z2 != 0 goto label21;

        r22 = newmultiarray (double)[$i0][4];

        i38 = 0;

        goto label20;

     label14:
        r23 = $r11[i38];

        $r15 = r0.<org.apache.batik.ext.awt.image.rendered.SpecularLightingRed: org.apache.batik.ext.awt.image.Light light>;

        $d55 = (double) i38;

        $d56 = $d55 * d1;

        $d57 = d5 + $d56;

        interfaceinvoke $r15.<org.apache.batik.ext.awt.image.Light: double[][] getLightRow(double,double,double,int,double[][],double[][])>(d3, $d57, d0, $i0, r23, r22);

        i39 = 0;

        goto label19;

     label15:
        r24 = r23[i39];

        r25 = r22[i39];

        $d58 = r25[2];

        $d59 = $d58 + 1.0;

        r25[2] = $d59;

        $d61 = r25[0];

        $d60 = r25[0];

        $d65 = $d61 * $d60;

        $d63 = r25[1];

        $d62 = r25[1];

        $d64 = $d63 * $d62;

        $d69 = $d65 + $d64;

        $d67 = r25[2];

        $d66 = r25[2];

        $d68 = $d67 * $d66;

        d125 = $d69 + $d68;

        $d70 = staticinvoke <java.lang.Math: double sqrt(double)>(d125);

        $d72 = r24[0];

        $d71 = r25[0];

        $d76 = $d72 * $d71;

        $d74 = r24[1];

        $d73 = r25[1];

        $d75 = $d74 * $d73;

        $d80 = $d76 + $d75;

        $d78 = r24[2];

        $d77 = r25[2];

        $d79 = $d78 * $d77;

        d126 = $d80 + $d79;

        $d82 = d126 / $d70;

        $d81 = r0.<org.apache.batik.ext.awt.image.rendered.SpecularLightingRed: double specularExponent>;

        $d83 = staticinvoke <java.lang.Math: double pow(double,double)>($d82, $d81);

        $d84 = $d119 * $d83;

        $d85 = $d84 + 0.5;

        i40 = (int) $d85;

        $i57 = (int) -256;

        $i20 = i40 & $i57;

        if $i20 == 0 goto label18;

        $i21 = i40 & -2147483648;

        if $i21 == 0 goto label16;

        $s41 = 0;

        goto label17;

     label16:
        $s41 = 255;

     label17:
        i40 = $s41;

     label18:
        $i42 = i30;

        i30 = i30 + 1;

        $i43 = i40 << 24;

        $i44 = $i43 | $i29;

        r7[$i42] = $i44;

        i39 = i39 + 1;

     label19:
        if i39 < $i0 goto label15;

        i30 = i30 + i12;

        i38 = i38 + 1;

     label20:
        if i38 < $i1 goto label14;

        goto label30;

     label21:
        r26 = newarray (double)[3];

        $r14 = r0.<org.apache.batik.ext.awt.image.rendered.SpecularLightingRed: org.apache.batik.ext.awt.image.Light light>;

        interfaceinvoke $r14.<org.apache.batik.ext.awt.image.Light: void getLight(double,double,double,double[])>(0.0, 0.0, 0.0, r26);

        $d20 = r26[2];

        $d21 = $d20 + 1.0;

        r26[2] = $d21;

        $d23 = r26[0];

        $d22 = r26[0];

        $d27 = $d23 * $d22;

        $d25 = r26[1];

        $d24 = r26[1];

        $d26 = $d25 * $d24;

        $d31 = $d27 + $d26;

        $d29 = r26[2];

        $d28 = r26[2];

        $d30 = $d29 * $d28;

        $d32 = $d31 + $d30;

        $d33 = staticinvoke <java.lang.Math: double sqrt(double)>($d32);

        $b17 = $d33 cmpl 0.0;

        $i58 = (int) $b17;

        if $i58 <= 0 goto label22;

        $d49 = r26[0];

        $d50 = $d49 / $d33;

        r26[0] = $d50;

        $d51 = r26[1];

        $d52 = $d51 / $d33;

        r26[1] = $d52;

        $d53 = r26[2];

        $d54 = $d53 / $d33;

        r26[2] = $d54;

     label22:
        i45 = 0;

        goto label29;

     label23:
        r27 = $r11[i45];

        i46 = 0;

        goto label28;

     label24:
        r28 = r27[i46];

        $d35 = r28[0];

        $d34 = r26[0];

        $d39 = $d35 * $d34;

        $d37 = r28[1];

        $d36 = r26[1];

        $d38 = $d37 * $d36;

        $d43 = $d39 + $d38;

        $d41 = r28[2];

        $d40 = r26[2];

        $d42 = $d41 * $d40;

        $d45 = $d43 + $d42;

        $d44 = r0.<org.apache.batik.ext.awt.image.rendered.SpecularLightingRed: double specularExponent>;

        $d46 = staticinvoke <java.lang.Math: double pow(double,double)>($d45, $d44);

        $d47 = $d119 * $d46;

        $d48 = $d47 + 0.5;

        i47 = (int) $d48;

        $i60 = (int) -256;

        $i18 = i47 & $i60;

        if $i18 == 0 goto label27;

        $i19 = i47 & -2147483648;

        if $i19 == 0 goto label25;

        $s48 = 0;

        goto label26;

     label25:
        $s48 = 255;

     label26:
        i47 = $s48;

     label27:
        $i49 = i30;

        i30 = i30 + 1;

        $i50 = i47 << 24;

        $i51 = $i50 | $i29;

        r7[$i49] = $i51;

        i46 = i46 + 1;

     label28:
        if i46 < $i0 goto label24;

        i30 = i30 + i12;

        i45 = i45 + 1;

     label29:
        if i45 < $i1 goto label23;

     label30:
        return;
    }
}
