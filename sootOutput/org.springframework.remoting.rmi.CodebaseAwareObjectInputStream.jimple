public class org.springframework.remoting.rmi.CodebaseAwareObjectInputStream extends org.springframework.core.ConfigurableObjectInputStream
{
    private final java.lang.String codebaseUrl;

    public void <init>(java.io.InputStream, java.lang.String) throws java.io.IOException
    {
        java.lang.String r2;
        org.springframework.remoting.rmi.CodebaseAwareObjectInputStream r0;
        java.io.InputStream r1;

        r0 := @this: org.springframework.remoting.rmi.CodebaseAwareObjectInputStream;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<org.springframework.remoting.rmi.CodebaseAwareObjectInputStream: void <init>(java.io.InputStream,java.lang.ClassLoader,java.lang.String)>(r1, null, r2);

        return;
    }

    public void <init>(java.io.InputStream, java.lang.ClassLoader, java.lang.String) throws java.io.IOException
    {
        java.lang.ClassLoader r2;
        java.lang.String r3;
        org.springframework.remoting.rmi.CodebaseAwareObjectInputStream r0;
        java.io.InputStream r1;

        r0 := @this: org.springframework.remoting.rmi.CodebaseAwareObjectInputStream;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.lang.ClassLoader;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<org.springframework.core.ConfigurableObjectInputStream: void <init>(java.io.InputStream,java.lang.ClassLoader)>(r1, r2);

        r0.<org.springframework.remoting.rmi.CodebaseAwareObjectInputStream: java.lang.String codebaseUrl> = r3;

        return;
    }

    public void <init>(java.io.InputStream, java.lang.ClassLoader, boolean) throws java.io.IOException
    {
        java.lang.ClassLoader r2;
        org.springframework.remoting.rmi.CodebaseAwareObjectInputStream r0;
        java.io.InputStream r1;
        boolean z0;

        r0 := @this: org.springframework.remoting.rmi.CodebaseAwareObjectInputStream;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.lang.ClassLoader;

        z0 := @parameter2: boolean;

        specialinvoke r0.<org.springframework.core.ConfigurableObjectInputStream: void <init>(java.io.InputStream,java.lang.ClassLoader,boolean)>(r1, r2, z0);

        r0.<org.springframework.remoting.rmi.CodebaseAwareObjectInputStream: java.lang.String codebaseUrl> = null;

        return;
    }

    protected java.lang.Class resolveFallbackIfPossible(java.lang.String, java.lang.ClassNotFoundException) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.lang.Class $r4;
        java.lang.ClassNotFoundException r5;
        java.lang.String $r1, r2, $r3;
        org.springframework.remoting.rmi.CodebaseAwareObjectInputStream r0;

        r0 := @this: org.springframework.remoting.rmi.CodebaseAwareObjectInputStream;

        r2 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.ClassNotFoundException;

        $r1 = r0.<org.springframework.remoting.rmi.CodebaseAwareObjectInputStream: java.lang.String codebaseUrl>;

        if $r1 != null goto label1;

        throw r5;

     label1:
        $r3 = r0.<org.springframework.remoting.rmi.CodebaseAwareObjectInputStream: java.lang.String codebaseUrl>;

        $r4 = staticinvoke <java.rmi.server.RMIClassLoader: java.lang.Class loadClass(java.lang.String,java.lang.String)>($r3, r2);

        return $r4;
    }

    protected java.lang.ClassLoader getFallbackClassLoader() throws java.io.IOException
    {
        java.lang.String $r1;
        java.lang.ClassLoader $r2;
        org.springframework.remoting.rmi.CodebaseAwareObjectInputStream r0;

        r0 := @this: org.springframework.remoting.rmi.CodebaseAwareObjectInputStream;

        $r1 = r0.<org.springframework.remoting.rmi.CodebaseAwareObjectInputStream: java.lang.String codebaseUrl>;

        $r2 = staticinvoke <java.rmi.server.RMIClassLoader: java.lang.ClassLoader getClassLoader(java.lang.String)>($r1);

        return $r2;
    }
}
