public final class com.mycila.inject.internal.guava.collect.MapConstraints extends java.lang.Object
{

    private void <init>()
    {
        com.mycila.inject.internal.guava.collect.MapConstraints r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.MapConstraints;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.mycila.inject.internal.guava.collect.MapConstraint notNull()
    {
        com.mycila.inject.internal.guava.collect.MapConstraints$NotNullMapConstraint $r0;

        $r0 = <com.mycila.inject.internal.guava.collect.MapConstraints$NotNullMapConstraint: com.mycila.inject.internal.guava.collect.MapConstraints$NotNullMapConstraint INSTANCE>;

        return $r0;
    }

    public static java.util.Map constrainedMap(java.util.Map, com.mycila.inject.internal.guava.collect.MapConstraint)
    {
        com.mycila.inject.internal.guava.collect.MapConstraint r2;
        com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedMap $r0;
        java.util.Map r1;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: com.mycila.inject.internal.guava.collect.MapConstraint;

        $r0 = new com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedMap;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedMap: void <init>(java.util.Map,com.mycila.inject.internal.guava.collect.MapConstraint)>(r1, r2);

        return $r0;
    }

    public static com.mycila.inject.internal.guava.collect.Multimap constrainedMultimap(com.mycila.inject.internal.guava.collect.Multimap, com.mycila.inject.internal.guava.collect.MapConstraint)
    {
        com.mycila.inject.internal.guava.collect.Multimap r1;
        com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedMultimap $r0;
        com.mycila.inject.internal.guava.collect.MapConstraint r2;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.Multimap;

        r2 := @parameter1: com.mycila.inject.internal.guava.collect.MapConstraint;

        $r0 = new com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedMultimap;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedMultimap: void <init>(com.mycila.inject.internal.guava.collect.Multimap,com.mycila.inject.internal.guava.collect.MapConstraint)>(r1, r2);

        return $r0;
    }

    public static com.mycila.inject.internal.guava.collect.ListMultimap constrainedListMultimap(com.mycila.inject.internal.guava.collect.ListMultimap, com.mycila.inject.internal.guava.collect.MapConstraint)
    {
        com.mycila.inject.internal.guava.collect.ListMultimap r1;
        com.mycila.inject.internal.guava.collect.MapConstraint r2;
        com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedListMultimap $r0;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.ListMultimap;

        r2 := @parameter1: com.mycila.inject.internal.guava.collect.MapConstraint;

        $r0 = new com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedListMultimap;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedListMultimap: void <init>(com.mycila.inject.internal.guava.collect.ListMultimap,com.mycila.inject.internal.guava.collect.MapConstraint)>(r1, r2);

        return $r0;
    }

    public static com.mycila.inject.internal.guava.collect.SetMultimap constrainedSetMultimap(com.mycila.inject.internal.guava.collect.SetMultimap, com.mycila.inject.internal.guava.collect.MapConstraint)
    {
        com.mycila.inject.internal.guava.collect.SetMultimap r1;
        com.mycila.inject.internal.guava.collect.MapConstraint r2;
        com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedSetMultimap $r0;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.SetMultimap;

        r2 := @parameter1: com.mycila.inject.internal.guava.collect.MapConstraint;

        $r0 = new com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedSetMultimap;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedSetMultimap: void <init>(com.mycila.inject.internal.guava.collect.SetMultimap,com.mycila.inject.internal.guava.collect.MapConstraint)>(r1, r2);

        return $r0;
    }

    public static com.mycila.inject.internal.guava.collect.SortedSetMultimap constrainedSortedSetMultimap(com.mycila.inject.internal.guava.collect.SortedSetMultimap, com.mycila.inject.internal.guava.collect.MapConstraint)
    {
        com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedSortedSetMultimap $r0;
        com.mycila.inject.internal.guava.collect.MapConstraint r2;
        com.mycila.inject.internal.guava.collect.SortedSetMultimap r1;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.SortedSetMultimap;

        r2 := @parameter1: com.mycila.inject.internal.guava.collect.MapConstraint;

        $r0 = new com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedSortedSetMultimap;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedSortedSetMultimap: void <init>(com.mycila.inject.internal.guava.collect.SortedSetMultimap,com.mycila.inject.internal.guava.collect.MapConstraint)>(r1, r2);

        return $r0;
    }

    private static java.util.Map$Entry constrainedEntry(java.util.Map$Entry, com.mycila.inject.internal.guava.collect.MapConstraint)
    {
        java.util.Map$Entry r0;
        com.mycila.inject.internal.guava.collect.MapConstraint r1;
        com.mycila.inject.internal.guava.collect.MapConstraints$1 $r2;

        r0 := @parameter0: java.util.Map$Entry;

        r1 := @parameter1: com.mycila.inject.internal.guava.collect.MapConstraint;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r2 = new com.mycila.inject.internal.guava.collect.MapConstraints$1;

        specialinvoke $r2.<com.mycila.inject.internal.guava.collect.MapConstraints$1: void <init>(java.util.Map$Entry,com.mycila.inject.internal.guava.collect.MapConstraint)>(r0, r1);

        return $r2;
    }

    private static java.util.Map$Entry constrainedAsMapEntry(java.util.Map$Entry, com.mycila.inject.internal.guava.collect.MapConstraint)
    {
        java.util.Map$Entry r0;
        com.mycila.inject.internal.guava.collect.MapConstraint r1;
        com.mycila.inject.internal.guava.collect.MapConstraints$2 $r2;

        r0 := @parameter0: java.util.Map$Entry;

        r1 := @parameter1: com.mycila.inject.internal.guava.collect.MapConstraint;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r2 = new com.mycila.inject.internal.guava.collect.MapConstraints$2;

        specialinvoke $r2.<com.mycila.inject.internal.guava.collect.MapConstraints$2: void <init>(java.util.Map$Entry,com.mycila.inject.internal.guava.collect.MapConstraint)>(r0, r1);

        return $r2;
    }

    private static java.util.Set constrainedAsMapEntries(java.util.Set, com.mycila.inject.internal.guava.collect.MapConstraint)
    {
        java.util.Set r1;
        com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedAsMapEntries $r0;
        com.mycila.inject.internal.guava.collect.MapConstraint r2;

        r1 := @parameter0: java.util.Set;

        r2 := @parameter1: com.mycila.inject.internal.guava.collect.MapConstraint;

        $r0 = new com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedAsMapEntries;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedAsMapEntries: void <init>(java.util.Set,com.mycila.inject.internal.guava.collect.MapConstraint)>(r1, r2);

        return $r0;
    }

    private static java.util.Collection constrainedEntries(java.util.Collection, com.mycila.inject.internal.guava.collect.MapConstraint)
    {
        java.util.Collection r0;
        com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedEntries $r1;
        java.util.Set $r3, $r4;
        com.mycila.inject.internal.guava.collect.MapConstraint r2;
        boolean $z0;

        r0 := @parameter0: java.util.Collection;

        r2 := @parameter1: com.mycila.inject.internal.guava.collect.MapConstraint;

        $z0 = r0 instanceof java.util.Set;

        if $z0 == 0 goto label1;

        $r3 = (java.util.Set) r0;

        $r4 = staticinvoke <com.mycila.inject.internal.guava.collect.MapConstraints: java.util.Set constrainedEntrySet(java.util.Set,com.mycila.inject.internal.guava.collect.MapConstraint)>($r3, r2);

        return $r4;

     label1:
        $r1 = new com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedEntries;

        specialinvoke $r1.<com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedEntries: void <init>(java.util.Collection,com.mycila.inject.internal.guava.collect.MapConstraint)>(r0, r2);

        return $r1;
    }

    private static java.util.Set constrainedEntrySet(java.util.Set, com.mycila.inject.internal.guava.collect.MapConstraint)
    {
        com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedEntrySet $r0;
        java.util.Set r1;
        com.mycila.inject.internal.guava.collect.MapConstraint r2;

        r1 := @parameter0: java.util.Set;

        r2 := @parameter1: com.mycila.inject.internal.guava.collect.MapConstraint;

        $r0 = new com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedEntrySet;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedEntrySet: void <init>(java.util.Set,com.mycila.inject.internal.guava.collect.MapConstraint)>(r1, r2);

        return $r0;
    }

    public static com.mycila.inject.internal.guava.collect.BiMap constrainedBiMap(com.mycila.inject.internal.guava.collect.BiMap, com.mycila.inject.internal.guava.collect.MapConstraint)
    {
        com.mycila.inject.internal.guava.collect.BiMap r1;
        com.mycila.inject.internal.guava.collect.MapConstraint r2;
        com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedBiMap $r0;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.BiMap;

        r2 := @parameter1: com.mycila.inject.internal.guava.collect.MapConstraint;

        $r0 = new com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedBiMap;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedBiMap: void <init>(com.mycila.inject.internal.guava.collect.BiMap,com.mycila.inject.internal.guava.collect.BiMap,com.mycila.inject.internal.guava.collect.MapConstraint)>(r1, null, r2);

        return $r0;
    }

    private static java.util.Collection checkValues(java.lang.Object, java.lang.Iterable, com.mycila.inject.internal.guava.collect.MapConstraint)
    {
        java.util.Iterator $r2;
        java.lang.Object $r3, r5;
        com.mycila.inject.internal.guava.collect.MapConstraint r4;
        java.lang.Iterable r0;
        java.util.ArrayList $r1;
        boolean $z0;

        r5 := @parameter0: java.lang.Object;

        r0 := @parameter1: java.lang.Iterable;

        r4 := @parameter2: com.mycila.inject.internal.guava.collect.MapConstraint;

        $r1 = staticinvoke <com.mycila.inject.internal.guava.collect.Lists: java.util.ArrayList newArrayList(java.lang.Iterable)>(r0);

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke r4.<com.mycila.inject.internal.guava.collect.MapConstraint: void checkKeyValue(java.lang.Object,java.lang.Object)>(r5, $r3);

        goto label1;

     label2:
        return $r1;
    }

    private static java.util.Map checkMap(java.util.Map, com.mycila.inject.internal.guava.collect.MapConstraint)
    {
        java.util.Map$Entry r5;
        java.util.Iterator $r3;
        java.util.Set $r2;
        java.util.LinkedHashMap $r0;
        java.util.Map r1;
        java.lang.Object $r4, $r7, $r8;
        com.mycila.inject.internal.guava.collect.MapConstraint r6;
        boolean $z0;

        r1 := @parameter0: java.util.Map;

        r6 := @parameter1: com.mycila.inject.internal.guava.collect.MapConstraint;

        $r0 = new java.util.LinkedHashMap;

        specialinvoke $r0.<java.util.LinkedHashMap: void <init>(java.util.Map)>(r1);

        $r2 = interfaceinvoke $r0.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r7 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke r6.<com.mycila.inject.internal.guava.collect.MapConstraint: void checkKeyValue(java.lang.Object,java.lang.Object)>($r7, $r8);

        goto label1;

     label2:
        return $r0;
    }

    static java.util.Set access$000(java.util.Set, com.mycila.inject.internal.guava.collect.MapConstraint)
    {
        java.util.Set r0, $r2;
        com.mycila.inject.internal.guava.collect.MapConstraint r1;

        r0 := @parameter0: java.util.Set;

        r1 := @parameter1: com.mycila.inject.internal.guava.collect.MapConstraint;

        $r2 = staticinvoke <com.mycila.inject.internal.guava.collect.MapConstraints: java.util.Set constrainedEntrySet(java.util.Set,com.mycila.inject.internal.guava.collect.MapConstraint)>(r0, r1);

        return $r2;
    }

    static java.util.Map access$100(java.util.Map, com.mycila.inject.internal.guava.collect.MapConstraint)
    {
        com.mycila.inject.internal.guava.collect.MapConstraint r1;
        java.util.Map r0, $r2;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: com.mycila.inject.internal.guava.collect.MapConstraint;

        $r2 = staticinvoke <com.mycila.inject.internal.guava.collect.MapConstraints: java.util.Map checkMap(java.util.Map,com.mycila.inject.internal.guava.collect.MapConstraint)>(r0, r1);

        return $r2;
    }

    static java.util.Set access$200(java.util.Set, com.mycila.inject.internal.guava.collect.MapConstraint)
    {
        java.util.Set r0, $r2;
        com.mycila.inject.internal.guava.collect.MapConstraint r1;

        r0 := @parameter0: java.util.Set;

        r1 := @parameter1: com.mycila.inject.internal.guava.collect.MapConstraint;

        $r2 = staticinvoke <com.mycila.inject.internal.guava.collect.MapConstraints: java.util.Set constrainedAsMapEntries(java.util.Set,com.mycila.inject.internal.guava.collect.MapConstraint)>(r0, r1);

        return $r2;
    }

    static java.util.Collection access$300(java.util.Collection, com.mycila.inject.internal.guava.collect.MapConstraint)
    {
        com.mycila.inject.internal.guava.collect.MapConstraint r1;
        java.util.Collection r0, $r2;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: com.mycila.inject.internal.guava.collect.MapConstraint;

        $r2 = staticinvoke <com.mycila.inject.internal.guava.collect.MapConstraints: java.util.Collection constrainedEntries(java.util.Collection,com.mycila.inject.internal.guava.collect.MapConstraint)>(r0, r1);

        return $r2;
    }

    static java.util.Collection access$400(java.lang.Object, java.lang.Iterable, com.mycila.inject.internal.guava.collect.MapConstraint)
    {
        java.util.Collection $r3;
        java.lang.Object r0;
        com.mycila.inject.internal.guava.collect.MapConstraint r2;
        java.lang.Iterable r1;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Iterable;

        r2 := @parameter2: com.mycila.inject.internal.guava.collect.MapConstraint;

        $r3 = staticinvoke <com.mycila.inject.internal.guava.collect.MapConstraints: java.util.Collection checkValues(java.lang.Object,java.lang.Iterable,com.mycila.inject.internal.guava.collect.MapConstraint)>(r0, r1, r2);

        return $r3;
    }

    static java.util.Map$Entry access$500(java.util.Map$Entry, com.mycila.inject.internal.guava.collect.MapConstraint)
    {
        java.util.Map$Entry r0, $r2;
        com.mycila.inject.internal.guava.collect.MapConstraint r1;

        r0 := @parameter0: java.util.Map$Entry;

        r1 := @parameter1: com.mycila.inject.internal.guava.collect.MapConstraint;

        $r2 = staticinvoke <com.mycila.inject.internal.guava.collect.MapConstraints: java.util.Map$Entry constrainedEntry(java.util.Map$Entry,com.mycila.inject.internal.guava.collect.MapConstraint)>(r0, r1);

        return $r2;
    }

    static java.util.Map$Entry access$700(java.util.Map$Entry, com.mycila.inject.internal.guava.collect.MapConstraint)
    {
        java.util.Map$Entry r0, $r2;
        com.mycila.inject.internal.guava.collect.MapConstraint r1;

        r0 := @parameter0: java.util.Map$Entry;

        r1 := @parameter1: com.mycila.inject.internal.guava.collect.MapConstraint;

        $r2 = staticinvoke <com.mycila.inject.internal.guava.collect.MapConstraints: java.util.Map$Entry constrainedAsMapEntry(java.util.Map$Entry,com.mycila.inject.internal.guava.collect.MapConstraint)>(r0, r1);

        return $r2;
    }
}
