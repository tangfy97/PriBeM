public class org.apache.log4j.xml.SAXErrorHandler extends java.lang.Object implements org.xml.sax.ErrorHandler
{

    public void <init>()
    {
        org.apache.log4j.xml.SAXErrorHandler r0;

        r0 := @this: org.apache.log4j.xml.SAXErrorHandler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void error(org.xml.sax.SAXParseException)
    {
        org.apache.log4j.xml.SAXErrorHandler r1;
        org.xml.sax.SAXParseException r0;

        r1 := @this: org.apache.log4j.xml.SAXErrorHandler;

        r0 := @parameter0: org.xml.sax.SAXParseException;

        staticinvoke <org.apache.log4j.xml.SAXErrorHandler: void emitMessage(java.lang.String,org.xml.sax.SAXParseException)>("Continuable parsing error ", r0);

        return;
    }

    public void fatalError(org.xml.sax.SAXParseException)
    {
        org.apache.log4j.xml.SAXErrorHandler r1;
        org.xml.sax.SAXParseException r0;

        r1 := @this: org.apache.log4j.xml.SAXErrorHandler;

        r0 := @parameter0: org.xml.sax.SAXParseException;

        staticinvoke <org.apache.log4j.xml.SAXErrorHandler: void emitMessage(java.lang.String,org.xml.sax.SAXParseException)>("Fatal parsing error ", r0);

        return;
    }

    public void warning(org.xml.sax.SAXParseException)
    {
        org.apache.log4j.xml.SAXErrorHandler r1;
        org.xml.sax.SAXParseException r0;

        r1 := @this: org.apache.log4j.xml.SAXErrorHandler;

        r0 := @parameter0: org.xml.sax.SAXParseException;

        staticinvoke <org.apache.log4j.xml.SAXErrorHandler: void emitMessage(java.lang.String,org.xml.sax.SAXParseException)>("Parsing warning ", r0);

        return;
    }

    private static void emitMessage(java.lang.String, org.xml.sax.SAXParseException)
    {
        java.lang.Exception $r9;
        org.xml.sax.SAXParseException r3;
        java.lang.StringBuffer $r0, $r2, $r4, $r5, $r6;
        int $i0, $i1;
        java.lang.String r1, $r7, $r8;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: org.xml.sax.SAXParseException;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $i0 = virtualinvoke r3.<org.xml.sax.SAXParseException: int getLineNumber()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" and column ");

        $i1 = virtualinvoke r3.<org.xml.sax.SAXParseException: int getColumnNumber()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void warn(java.lang.String)>($r7);

        $r8 = virtualinvoke r3.<org.xml.sax.SAXException: java.lang.String getMessage()>();

        $r9 = virtualinvoke r3.<org.xml.sax.SAXException: java.lang.Exception getException()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void warn(java.lang.String,java.lang.Throwable)>($r8, $r9);

        return;
    }
}
