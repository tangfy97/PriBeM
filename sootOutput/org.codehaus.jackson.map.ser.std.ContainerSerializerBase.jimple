public abstract class org.codehaus.jackson.map.ser.std.ContainerSerializerBase extends org.codehaus.jackson.map.ser.std.SerializerBase
{

    protected void <init>(java.lang.Class)
    {
        java.lang.Class r1;
        org.codehaus.jackson.map.ser.std.ContainerSerializerBase r0;

        r0 := @this: org.codehaus.jackson.map.ser.std.ContainerSerializerBase;

        r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<org.codehaus.jackson.map.ser.std.SerializerBase: void <init>(java.lang.Class)>(r1);

        return;
    }

    protected void <init>(java.lang.Class, boolean)
    {
        java.lang.Class r1;
        org.codehaus.jackson.map.ser.std.ContainerSerializerBase r0;
        boolean z0;

        r0 := @this: org.codehaus.jackson.map.ser.std.ContainerSerializerBase;

        r1 := @parameter0: java.lang.Class;

        z0 := @parameter1: boolean;

        specialinvoke r0.<org.codehaus.jackson.map.ser.std.SerializerBase: void <init>(java.lang.Class,boolean)>(r1, z0);

        return;
    }

    public org.codehaus.jackson.map.ser.std.ContainerSerializerBase withValueTypeSerializer(org.codehaus.jackson.map.TypeSerializer)
    {
        org.codehaus.jackson.map.ser.std.ContainerSerializerBase r1, $r2;
        org.codehaus.jackson.map.TypeSerializer r0;

        r1 := @this: org.codehaus.jackson.map.ser.std.ContainerSerializerBase;

        r0 := @parameter0: org.codehaus.jackson.map.TypeSerializer;

        if r0 != null goto label1;

        return r1;

     label1:
        $r2 = virtualinvoke r1.<org.codehaus.jackson.map.ser.std.ContainerSerializerBase: org.codehaus.jackson.map.ser.std.ContainerSerializerBase _withValueTypeSerializer(org.codehaus.jackson.map.TypeSerializer)>(r0);

        return $r2;
    }

    public abstract org.codehaus.jackson.map.ser.std.ContainerSerializerBase _withValueTypeSerializer(org.codehaus.jackson.map.TypeSerializer);
}
