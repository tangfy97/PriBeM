public final class org.apache.lucene.search.SearcherManager extends org.apache.lucene.search.ReferenceManager
{
    private final org.apache.lucene.search.SearcherFactory searcherFactory;
    static final boolean $assertionsDisabled;

    public void <init>(org.apache.lucene.index.IndexWriter, boolean, org.apache.lucene.search.SearcherFactory) throws java.io.IOException
    {
        org.apache.lucene.index.IndexWriter r1;
        org.apache.lucene.search.SearcherFactory $r4, r5;
        org.apache.lucene.index.DirectoryReader $r2;
        org.apache.lucene.search.SearcherManager r0;
        boolean z0;
        org.apache.lucene.search.IndexSearcher $r3;

        r0 := @this: org.apache.lucene.search.SearcherManager;

        r1 := @parameter0: org.apache.lucene.index.IndexWriter;

        z0 := @parameter1: boolean;

        r5 := @parameter2: org.apache.lucene.search.SearcherFactory;

        specialinvoke r0.<org.apache.lucene.search.ReferenceManager: void <init>()>();

        if r5 != null goto label1;

        $r4 = new org.apache.lucene.search.SearcherFactory;

        specialinvoke $r4.<org.apache.lucene.search.SearcherFactory: void <init>()>();

        r5 = $r4;

     label1:
        r0.<org.apache.lucene.search.SearcherManager: org.apache.lucene.search.SearcherFactory searcherFactory> = r5;

        $r2 = staticinvoke <org.apache.lucene.index.DirectoryReader: org.apache.lucene.index.DirectoryReader open(org.apache.lucene.index.IndexWriter,boolean)>(r1, z0);

        $r3 = staticinvoke <org.apache.lucene.search.SearcherManager: org.apache.lucene.search.IndexSearcher getSearcher(org.apache.lucene.search.SearcherFactory,org.apache.lucene.index.IndexReader)>(r5, $r2);

        r0.<org.apache.lucene.search.SearcherManager: java.lang.Object current> = $r3;

        return;
    }

    public void <init>(org.apache.lucene.store.Directory, org.apache.lucene.search.SearcherFactory) throws java.io.IOException
    {
        org.apache.lucene.search.SearcherFactory $r4, r5;
        org.apache.lucene.store.Directory r1;
        org.apache.lucene.index.DirectoryReader $r2;
        org.apache.lucene.search.SearcherManager r0;
        org.apache.lucene.search.IndexSearcher $r3;

        r0 := @this: org.apache.lucene.search.SearcherManager;

        r1 := @parameter0: org.apache.lucene.store.Directory;

        r5 := @parameter1: org.apache.lucene.search.SearcherFactory;

        specialinvoke r0.<org.apache.lucene.search.ReferenceManager: void <init>()>();

        if r5 != null goto label1;

        $r4 = new org.apache.lucene.search.SearcherFactory;

        specialinvoke $r4.<org.apache.lucene.search.SearcherFactory: void <init>()>();

        r5 = $r4;

     label1:
        r0.<org.apache.lucene.search.SearcherManager: org.apache.lucene.search.SearcherFactory searcherFactory> = r5;

        $r2 = staticinvoke <org.apache.lucene.index.DirectoryReader: org.apache.lucene.index.DirectoryReader open(org.apache.lucene.store.Directory)>(r1);

        $r3 = staticinvoke <org.apache.lucene.search.SearcherManager: org.apache.lucene.search.IndexSearcher getSearcher(org.apache.lucene.search.SearcherFactory,org.apache.lucene.index.IndexReader)>(r5, $r2);

        r0.<org.apache.lucene.search.SearcherManager: java.lang.Object current> = $r3;

        return;
    }

    protected void decRef(org.apache.lucene.search.IndexSearcher) throws java.io.IOException
    {
        org.apache.lucene.search.SearcherManager r2;
        org.apache.lucene.index.IndexReader $r1;
        org.apache.lucene.search.IndexSearcher r0;

        r2 := @this: org.apache.lucene.search.SearcherManager;

        r0 := @parameter0: org.apache.lucene.search.IndexSearcher;

        $r1 = virtualinvoke r0.<org.apache.lucene.search.IndexSearcher: org.apache.lucene.index.IndexReader getIndexReader()>();

        virtualinvoke $r1.<org.apache.lucene.index.IndexReader: void decRef()>();

        return;
    }

    protected org.apache.lucene.search.IndexSearcher refreshIfNeeded(org.apache.lucene.search.IndexSearcher) throws java.io.IOException
    {
        org.apache.lucene.index.DirectoryReader $r2, $r3;
        java.lang.AssertionError $r7;
        org.apache.lucene.search.SearcherFactory $r5;
        java.lang.StringBuilder $r8, $r9, $r10;
        java.lang.String $r11;
        org.apache.lucene.search.SearcherManager r4;
        org.apache.lucene.index.IndexReader $r1;
        org.apache.lucene.search.IndexSearcher r0, $r6;
        boolean $z0, $z1;

        r4 := @this: org.apache.lucene.search.SearcherManager;

        r0 := @parameter0: org.apache.lucene.search.IndexSearcher;

        $r1 = virtualinvoke r0.<org.apache.lucene.search.IndexSearcher: org.apache.lucene.index.IndexReader getIndexReader()>();

        $z0 = <org.apache.lucene.search.SearcherManager: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = $r1 instanceof org.apache.lucene.index.DirectoryReader;

        if $z1 != 0 goto label1;

        $r7 = new java.lang.AssertionError;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("searcher\'s IndexReader should be a DirectoryReader, but got ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.AssertionError: void <init>(java.lang.Object)>($r11);

        throw $r7;

     label1:
        $r2 = (org.apache.lucene.index.DirectoryReader) $r1;

        $r3 = staticinvoke <org.apache.lucene.index.DirectoryReader: org.apache.lucene.index.DirectoryReader openIfChanged(org.apache.lucene.index.DirectoryReader)>($r2);

        if $r3 != null goto label2;

        return null;

     label2:
        $r5 = r4.<org.apache.lucene.search.SearcherManager: org.apache.lucene.search.SearcherFactory searcherFactory>;

        $r6 = staticinvoke <org.apache.lucene.search.SearcherManager: org.apache.lucene.search.IndexSearcher getSearcher(org.apache.lucene.search.SearcherFactory,org.apache.lucene.index.IndexReader)>($r5, $r3);

        return $r6;
    }

    protected boolean tryIncRef(org.apache.lucene.search.IndexSearcher)
    {
        org.apache.lucene.search.SearcherManager r2;
        org.apache.lucene.index.IndexReader $r1;
        org.apache.lucene.search.IndexSearcher r0;
        boolean $z0;

        r2 := @this: org.apache.lucene.search.SearcherManager;

        r0 := @parameter0: org.apache.lucene.search.IndexSearcher;

        $r1 = virtualinvoke r0.<org.apache.lucene.search.IndexSearcher: org.apache.lucene.index.IndexReader getIndexReader()>();

        $z0 = virtualinvoke $r1.<org.apache.lucene.index.IndexReader: boolean tryIncRef()>();

        return $z0;
    }

    public boolean isSearcherCurrent() throws java.io.IOException
    {
        java.lang.Throwable $r10;
        org.apache.lucene.index.DirectoryReader $r4;
        java.lang.AssertionError $r5;
        java.lang.Object $r1;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String $r9;
        org.apache.lucene.search.SearcherManager r0;
        org.apache.lucene.index.IndexReader $r3;
        org.apache.lucene.search.IndexSearcher r2;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.lucene.search.SearcherManager;

        $r1 = virtualinvoke r0.<org.apache.lucene.search.SearcherManager: java.lang.Object acquire()>();

        r2 = (org.apache.lucene.search.IndexSearcher) $r1;

     label1:
        $r3 = virtualinvoke r2.<org.apache.lucene.search.IndexSearcher: org.apache.lucene.index.IndexReader getIndexReader()>();

        $z0 = <org.apache.lucene.search.SearcherManager: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $z2 = $r3 instanceof org.apache.lucene.index.DirectoryReader;

        if $z2 != 0 goto label2;

        $r5 = new java.lang.AssertionError;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("searcher\'s IndexReader should be a DirectoryReader, but got ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>($r9);

        throw $r5;

     label2:
        $r4 = (org.apache.lucene.index.DirectoryReader) $r3;

        $z1 = virtualinvoke $r4.<org.apache.lucene.index.DirectoryReader: boolean isCurrent()>();

     label3:
        virtualinvoke r0.<org.apache.lucene.search.SearcherManager: void release(java.lang.Object)>(r2);

        return $z1;

     label4:
        $r10 := @caughtexception;

     label5:
        virtualinvoke r0.<org.apache.lucene.search.SearcherManager: void release(java.lang.Object)>(r2);

        throw $r10;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public static org.apache.lucene.search.IndexSearcher getSearcher(org.apache.lucene.search.SearcherFactory, org.apache.lucene.index.IndexReader) throws java.io.IOException
    {
        java.lang.Throwable $r13;
        java.lang.IllegalStateException $r4;
        org.apache.lucene.search.SearcherFactory r0;
        java.lang.StringBuilder $r5, $r6, $r8, $r9, $r10, $r11;
        java.lang.String $r12;
        org.apache.lucene.index.IndexReader r1, $r3, $r7;
        org.apache.lucene.search.IndexSearcher $r2;

        r0 := @parameter0: org.apache.lucene.search.SearcherFactory;

        r1 := @parameter1: org.apache.lucene.index.IndexReader;

     label1:
        $r2 = virtualinvoke r0.<org.apache.lucene.search.SearcherFactory: org.apache.lucene.search.IndexSearcher newSearcher(org.apache.lucene.index.IndexReader)>(r1);

        $r3 = virtualinvoke $r2.<org.apache.lucene.search.IndexSearcher: org.apache.lucene.index.IndexReader getIndexReader()>();

        if $r3 == r1 goto label2;

        $r4 = new java.lang.IllegalStateException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SearcherFactory must wrap exactly the provided reader (got ");

        $r7 = virtualinvoke $r2.<org.apache.lucene.search.IndexSearcher: org.apache.lucene.index.IndexReader getIndexReader()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but expected ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r12);

        throw $r4;

     label2:
        if 1 != 0 goto label6;

        virtualinvoke r1.<org.apache.lucene.index.IndexReader: void decRef()>();

        goto label6;

     label3:
        $r13 := @caughtexception;

     label4:
        if 0 != 0 goto label5;

        virtualinvoke r1.<org.apache.lucene.index.IndexReader: void decRef()>();

     label5:
        throw $r13;

     label6:
        return $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    protected volatile boolean tryIncRef(java.lang.Object) throws java.io.IOException
    {
        java.lang.Object r1;
        org.apache.lucene.search.SearcherManager r0;
        org.apache.lucene.search.IndexSearcher $r2;
        boolean $z0;

        r0 := @this: org.apache.lucene.search.SearcherManager;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.lucene.search.IndexSearcher) r1;

        $z0 = virtualinvoke r0.<org.apache.lucene.search.SearcherManager: boolean tryIncRef(org.apache.lucene.search.IndexSearcher)>($r2);

        return $z0;
    }

    protected volatile java.lang.Object refreshIfNeeded(java.lang.Object) throws java.io.IOException
    {
        java.lang.Object r1;
        org.apache.lucene.search.SearcherManager r0;
        org.apache.lucene.search.IndexSearcher $r2, $r3;

        r0 := @this: org.apache.lucene.search.SearcherManager;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.lucene.search.IndexSearcher) r1;

        $r3 = virtualinvoke r0.<org.apache.lucene.search.SearcherManager: org.apache.lucene.search.IndexSearcher refreshIfNeeded(org.apache.lucene.search.IndexSearcher)>($r2);

        return $r3;
    }

    protected volatile void decRef(java.lang.Object) throws java.io.IOException
    {
        java.lang.Object r1;
        org.apache.lucene.search.SearcherManager r0;
        org.apache.lucene.search.IndexSearcher $r2;

        r0 := @this: org.apache.lucene.search.SearcherManager;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.lucene.search.IndexSearcher) r1;

        virtualinvoke r0.<org.apache.lucene.search.SearcherManager: void decRef(org.apache.lucene.search.IndexSearcher)>($r2);

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/search/SearcherManager;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.search.SearcherManager: boolean $assertionsDisabled> = $z1;

        return;
    }
}
