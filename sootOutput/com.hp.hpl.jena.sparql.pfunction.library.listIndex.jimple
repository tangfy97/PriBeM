public class com.hp.hpl.jena.sparql.pfunction.library.listIndex extends com.hp.hpl.jena.sparql.pfunction.library.ListBaseList
{

    public void <init>()
    {
        com.hp.hpl.jena.sparql.pfunction.library.listIndex r0;

        r0 := @this: com.hp.hpl.jena.sparql.pfunction.library.listIndex;

        specialinvoke r0.<com.hp.hpl.jena.sparql.pfunction.library.ListBaseList: void <init>()>();

        return;
    }

    protected com.hp.hpl.jena.sparql.engine.QueryIterator execObjectList(com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.sparql.core.Var, com.hp.hpl.jena.graph.Node, java.util.List, com.hp.hpl.jena.sparql.engine.ExecutionContext)
    {
        com.hp.hpl.jena.graph.Node r2, r4, r10;
        com.hp.hpl.jena.sparql.pfunction.PropFuncArg $r11;
        com.hp.hpl.jena.sparql.expr.ExprEvalException $r15;
        int $i0;
        com.hp.hpl.jena.sparql.engine.ExecutionContext r5;
        com.hp.hpl.jena.graph.Graph $r6, $r14;
        boolean $z0;
        com.hp.hpl.jena.sparql.pfunction.library.listIndex r7;
        java.util.Collection r16;
        com.hp.hpl.jena.sparql.core.Var r9;
        com.hp.hpl.jena.sparql.util.graph.GNode $r13;
        java.util.List r0;
        com.hp.hpl.jena.sparql.engine.binding.Binding r8;
        java.lang.Object $r1, $r3;
        com.hp.hpl.jena.sparql.engine.QueryIterator $r12;

        r7 := @this: com.hp.hpl.jena.sparql.pfunction.library.listIndex;

        r8 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r9 := @parameter1: com.hp.hpl.jena.sparql.core.Var;

        r10 := @parameter2: com.hp.hpl.jena.graph.Node;

        r0 := @parameter3: java.util.List;

        r5 := @parameter4: com.hp.hpl.jena.sparql.engine.ExecutionContext;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 == 2 goto label1;

        $r15 = new com.hp.hpl.jena.sparql.expr.ExprEvalException;

        specialinvoke $r15.<com.hp.hpl.jena.sparql.expr.ExprEvalException: void <init>(java.lang.String)>("ListIndex : object not a list of length 2");

        throw $r15;

     label1:
        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        r2 = (com.hp.hpl.jena.graph.Node) $r1;

        $r3 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(1);

        r4 = (com.hp.hpl.jena.graph.Node) $r3;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: boolean isVar(com.hp.hpl.jena.graph.Node)>(r4);

        if $z0 != 0 goto label2;

        $r13 = new com.hp.hpl.jena.sparql.util.graph.GNode;

        $r14 = virtualinvoke r5.<com.hp.hpl.jena.sparql.engine.ExecutionContext: com.hp.hpl.jena.graph.Graph getActiveGraph()>();

        specialinvoke $r13.<com.hp.hpl.jena.sparql.util.graph.GNode: void <init>(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Node)>($r14, r4);

        r16 = staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphList: java.util.List listFromMember(com.hp.hpl.jena.sparql.util.graph.GNode)>($r13);

        goto label3;

     label2:
        $r6 = virtualinvoke r5.<com.hp.hpl.jena.sparql.engine.ExecutionContext: com.hp.hpl.jena.graph.Graph getActiveGraph()>();

        r16 = staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphList: java.util.Set findAllLists(com.hp.hpl.jena.graph.Graph)>($r6);

     label3:
        $r11 = new com.hp.hpl.jena.sparql.pfunction.PropFuncArg;

        specialinvoke $r11.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: void <init>(java.util.List,com.hp.hpl.jena.graph.Node)>(r0, null);

        $r12 = specialinvoke r7.<com.hp.hpl.jena.sparql.pfunction.library.ListBaseList: com.hp.hpl.jena.sparql.engine.QueryIterator allLists(com.hp.hpl.jena.sparql.engine.binding.Binding,java.util.Collection,com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.pfunction.PropFuncArg,com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r8, r16, r9, r10, $r11, r5);

        return $r12;
    }

    protected com.hp.hpl.jena.sparql.engine.QueryIterator execOneList(com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, java.util.List, com.hp.hpl.jena.sparql.engine.ExecutionContext)
    {
        com.hp.hpl.jena.graph.Node r0, r3, r5, r20;
        com.hp.hpl.jena.sparql.expr.ExprEvalException $r17, $r18;
        int $i0;
        com.hp.hpl.jena.sparql.engine.ExecutionContext r6;
        com.hp.hpl.jena.graph.Graph $r7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        com.hp.hpl.jena.sparql.pfunction.library.listIndex r19;
        com.hp.hpl.jena.sparql.core.Var $r9, $r10, $r13, $r15;
        java.util.List r1;
        com.hp.hpl.jena.sparql.engine.binding.Binding r8;
        java.lang.Object $r2, $r4;
        com.hp.hpl.jena.sparql.engine.QueryIterator $r11, $r12, $r14, $r16;

        r19 := @this: com.hp.hpl.jena.sparql.pfunction.library.listIndex;

        r8 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r0 := @parameter1: com.hp.hpl.jena.graph.Node;

        r20 := @parameter2: com.hp.hpl.jena.graph.Node;

        r1 := @parameter3: java.util.List;

        r6 := @parameter4: com.hp.hpl.jena.sparql.engine.ExecutionContext;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: boolean isVar(com.hp.hpl.jena.graph.Node)>(r0);

        if $z0 == 0 goto label1;

        $r18 = new com.hp.hpl.jena.sparql.expr.ExprEvalException;

        specialinvoke $r18.<com.hp.hpl.jena.sparql.expr.ExprEvalException: void <init>(java.lang.String)>("ListIndex : subject not a list or variable bound to a list");

        throw $r18;

     label1:
        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i0 == 2 goto label2;

        $r17 = new com.hp.hpl.jena.sparql.expr.ExprEvalException;

        specialinvoke $r17.<com.hp.hpl.jena.sparql.expr.ExprEvalException: void <init>(java.lang.String)>("ListIndex : object not a list of length 2");

        throw $r17;

     label2:
        $r2 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0);

        r3 = (com.hp.hpl.jena.graph.Node) $r2;

        $r4 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(1);

        r5 = (com.hp.hpl.jena.graph.Node) $r4;

        $r7 = virtualinvoke r6.<com.hp.hpl.jena.sparql.engine.ExecutionContext: com.hp.hpl.jena.graph.Graph getActiveGraph()>();

        $z1 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: boolean isVar(com.hp.hpl.jena.graph.Node)>(r3);

        if $z1 == 0 goto label3;

        $z6 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: boolean isVar(com.hp.hpl.jena.graph.Node)>(r5);

        if $z6 != 0 goto label3;

        $r15 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: com.hp.hpl.jena.sparql.core.Var alloc(com.hp.hpl.jena.graph.Node)>(r3);

        $r16 = staticinvoke <com.hp.hpl.jena.sparql.pfunction.library.listIndex: com.hp.hpl.jena.sparql.engine.QueryIterator findIndex(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r7, r8, r0, $r15, r5, r6);

        return $r16;

     label3:
        $z2 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: boolean isVar(com.hp.hpl.jena.graph.Node)>(r3);

        if $z2 != 0 goto label4;

        $z5 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: boolean isVar(com.hp.hpl.jena.graph.Node)>(r5);

        if $z5 == 0 goto label4;

        $r13 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: com.hp.hpl.jena.sparql.core.Var alloc(com.hp.hpl.jena.graph.Node)>(r5);

        $r14 = staticinvoke <com.hp.hpl.jena.sparql.pfunction.library.listIndex: com.hp.hpl.jena.sparql.engine.QueryIterator getByIndex(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r7, r8, r0, r3, $r13, r6);

        return $r14;

     label4:
        $z3 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: boolean isVar(com.hp.hpl.jena.graph.Node)>(r3);

        if $z3 != 0 goto label5;

        $z4 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: boolean isVar(com.hp.hpl.jena.graph.Node)>(r5);

        if $z4 != 0 goto label5;

        $r12 = staticinvoke <com.hp.hpl.jena.sparql.pfunction.library.listIndex: com.hp.hpl.jena.sparql.engine.QueryIterator testSlotValue(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r7, r8, r0, r3, r5, r6);

        return $r12;

     label5:
        $r9 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: com.hp.hpl.jena.sparql.core.Var alloc(com.hp.hpl.jena.graph.Node)>(r3);

        $r10 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: com.hp.hpl.jena.sparql.core.Var alloc(com.hp.hpl.jena.graph.Node)>(r5);

        $r11 = staticinvoke <com.hp.hpl.jena.sparql.pfunction.library.listIndex: com.hp.hpl.jena.sparql.engine.QueryIterator findIndexMember(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r7, r8, r0, $r9, $r10, r6);

        return $r11;
    }

    private static com.hp.hpl.jena.sparql.engine.QueryIterator getByIndex(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.sparql.core.Var, com.hp.hpl.jena.sparql.engine.ExecutionContext)
    {
        com.hp.hpl.jena.graph.Node r0, r3, $r4;
        com.hp.hpl.jena.sparql.core.Var r6;
        com.hp.hpl.jena.sparql.util.graph.GNode $r1;
        com.hp.hpl.jena.sparql.engine.binding.Binding r5;
        int $i0;
        com.hp.hpl.jena.sparql.engine.ExecutionContext r7;
        com.hp.hpl.jena.graph.Graph r2;
        com.hp.hpl.jena.sparql.engine.QueryIterator $r8, $r9, $r10;

        r2 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r5 := @parameter1: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r3 := @parameter2: com.hp.hpl.jena.graph.Node;

        r0 := @parameter3: com.hp.hpl.jena.graph.Node;

        r6 := @parameter4: com.hp.hpl.jena.sparql.core.Var;

        r7 := @parameter5: com.hp.hpl.jena.sparql.engine.ExecutionContext;

        $i0 = staticinvoke <com.hp.hpl.jena.sparql.util.NodeFactoryExtra: int nodeToInt(com.hp.hpl.jena.graph.Node)>(r0);

        if $i0 >= 0 goto label1;

        $r10 = staticinvoke <com.hp.hpl.jena.sparql.util.IterLib: com.hp.hpl.jena.sparql.engine.QueryIterator noResults(com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r7);

        return $r10;

     label1:
        $r1 = new com.hp.hpl.jena.sparql.util.graph.GNode;

        specialinvoke $r1.<com.hp.hpl.jena.sparql.util.graph.GNode: void <init>(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Node)>(r2, r3);

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphList: com.hp.hpl.jena.graph.Node get(com.hp.hpl.jena.sparql.util.graph.GNode,int)>($r1, $i0);

        if $r4 != null goto label2;

        $r9 = staticinvoke <com.hp.hpl.jena.sparql.util.IterLib: com.hp.hpl.jena.sparql.engine.QueryIterator noResults(com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r7);

        return $r9;

     label2:
        $r8 = staticinvoke <com.hp.hpl.jena.sparql.util.IterLib: com.hp.hpl.jena.sparql.engine.QueryIterator oneResult(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r5, r6, $r4, r7);

        return $r8;
    }

    private static com.hp.hpl.jena.sparql.engine.QueryIterator testSlotValue(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.sparql.engine.ExecutionContext)
    {
        com.hp.hpl.jena.graph.Node r0, r3, $r4, r5;
        com.hp.hpl.jena.sparql.util.graph.GNode $r1;
        com.hp.hpl.jena.sparql.engine.binding.Binding r8;
        int $i0;
        com.hp.hpl.jena.sparql.engine.ExecutionContext r6;
        com.hp.hpl.jena.graph.Graph r2;
        com.hp.hpl.jena.sparql.engine.QueryIterator $r7, $r9, $r10, $r11;
        boolean $z0;

        r2 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r8 := @parameter1: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r3 := @parameter2: com.hp.hpl.jena.graph.Node;

        r0 := @parameter3: com.hp.hpl.jena.graph.Node;

        r5 := @parameter4: com.hp.hpl.jena.graph.Node;

        r6 := @parameter5: com.hp.hpl.jena.sparql.engine.ExecutionContext;

        $i0 = staticinvoke <com.hp.hpl.jena.sparql.util.NodeFactoryExtra: int nodeToInt(com.hp.hpl.jena.graph.Node)>(r0);

        if $i0 >= 0 goto label1;

        $r11 = staticinvoke <com.hp.hpl.jena.sparql.util.IterLib: com.hp.hpl.jena.sparql.engine.QueryIterator noResults(com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r6);

        return $r11;

     label1:
        $r1 = new com.hp.hpl.jena.sparql.util.graph.GNode;

        specialinvoke $r1.<com.hp.hpl.jena.sparql.util.graph.GNode: void <init>(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Node)>(r2, r3);

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphList: com.hp.hpl.jena.graph.Node get(com.hp.hpl.jena.sparql.util.graph.GNode,int)>($r1, $i0);

        if $r4 != null goto label2;

        $r10 = staticinvoke <com.hp.hpl.jena.sparql.util.IterLib: com.hp.hpl.jena.sparql.engine.QueryIterator noResults(com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r6);

        return $r10;

     label2:
        $z0 = virtualinvoke $r4.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>(r5);

        if $z0 == 0 goto label3;

        $r9 = staticinvoke <com.hp.hpl.jena.sparql.util.IterLib: com.hp.hpl.jena.sparql.engine.QueryIterator result(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r8, r6);

        return $r9;

     label3:
        $r7 = staticinvoke <com.hp.hpl.jena.sparql.util.IterLib: com.hp.hpl.jena.sparql.engine.QueryIterator noResults(com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r6);

        return $r7;
    }

    private static com.hp.hpl.jena.sparql.engine.QueryIterator findIndex(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.sparql.core.Var, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.sparql.engine.ExecutionContext)
    {
        com.hp.hpl.jena.graph.Node r2, r3, $r4;
        com.hp.hpl.jena.sparql.core.Var r6;
        com.hp.hpl.jena.sparql.util.graph.GNode $r0;
        com.hp.hpl.jena.sparql.engine.binding.Binding r5;
        int $i0;
        com.hp.hpl.jena.sparql.engine.ExecutionContext r7;
        com.hp.hpl.jena.graph.Graph r1;
        com.hp.hpl.jena.sparql.engine.QueryIterator $r8, $r9;

        r1 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r5 := @parameter1: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r2 := @parameter2: com.hp.hpl.jena.graph.Node;

        r6 := @parameter3: com.hp.hpl.jena.sparql.core.Var;

        r3 := @parameter4: com.hp.hpl.jena.graph.Node;

        r7 := @parameter5: com.hp.hpl.jena.sparql.engine.ExecutionContext;

        $r0 = new com.hp.hpl.jena.sparql.util.graph.GNode;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.util.graph.GNode: void <init>(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Node)>(r1, r2);

        $i0 = staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphList: int index(com.hp.hpl.jena.sparql.util.graph.GNode,com.hp.hpl.jena.graph.Node)>($r0, r3);

        if $i0 >= 0 goto label1;

        $r9 = staticinvoke <com.hp.hpl.jena.sparql.util.IterLib: com.hp.hpl.jena.sparql.engine.QueryIterator noResults(com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r7);

        return $r9;

     label1:
        $r4 = staticinvoke <com.hp.hpl.jena.sparql.util.NodeFactoryExtra: com.hp.hpl.jena.graph.Node intToNode(int)>($i0);

        $r8 = staticinvoke <com.hp.hpl.jena.sparql.util.IterLib: com.hp.hpl.jena.sparql.engine.QueryIterator oneResult(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r5, r6, $r4, r7);

        return $r8;
    }

    private static com.hp.hpl.jena.sparql.engine.QueryIterator findIndexMember(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.sparql.core.Var, com.hp.hpl.jena.sparql.core.Var, com.hp.hpl.jena.sparql.engine.ExecutionContext)
    {
        com.hp.hpl.jena.graph.Node r2, $r8, r10;
        java.util.ArrayList $r4;
        int $i0, i1;
        com.hp.hpl.jena.sparql.engine.binding.BindingMap $r12;
        com.hp.hpl.jena.sparql.engine.ExecutionContext r7;
        com.hp.hpl.jena.graph.Graph r1;
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterPlainWrapper $r5;
        java.util.Iterator $r6;
        com.hp.hpl.jena.sparql.core.Var r13, r14;
        com.hp.hpl.jena.sparql.util.graph.GNode $r0;
        java.util.List $r3;
        com.hp.hpl.jena.sparql.engine.binding.Binding r11;
        java.lang.Object $r9;

        r1 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r11 := @parameter1: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r2 := @parameter2: com.hp.hpl.jena.graph.Node;

        r13 := @parameter3: com.hp.hpl.jena.sparql.core.Var;

        r14 := @parameter4: com.hp.hpl.jena.sparql.core.Var;

        r7 := @parameter5: com.hp.hpl.jena.sparql.engine.ExecutionContext;

        $r0 = new com.hp.hpl.jena.sparql.util.graph.GNode;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.util.graph.GNode: void <init>(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Node)>(r1, r2);

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphList: java.util.List members(com.hp.hpl.jena.sparql.util.graph.GNode)>($r0);

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        i1 = 0;

     label1:
        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        if i1 >= $i0 goto label2;

        $r8 = staticinvoke <com.hp.hpl.jena.sparql.util.NodeFactoryExtra: com.hp.hpl.jena.graph.Node intToNode(int)>(i1);

        $r9 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i1);

        r10 = (com.hp.hpl.jena.graph.Node) $r9;

        $r12 = staticinvoke <com.hp.hpl.jena.sparql.engine.binding.BindingFactory: com.hp.hpl.jena.sparql.engine.binding.BindingMap create(com.hp.hpl.jena.sparql.engine.binding.Binding)>(r11);

        interfaceinvoke $r12.<com.hp.hpl.jena.sparql.engine.binding.BindingMap: void add(com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.graph.Node)>(r13, $r8);

        interfaceinvoke $r12.<com.hp.hpl.jena.sparql.engine.binding.BindingMap: void add(com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.graph.Node)>(r14, r10);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r12);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r5 = new com.hp.hpl.jena.sparql.engine.iterator.QueryIterPlainWrapper;

        $r6 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

        specialinvoke $r5.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterPlainWrapper: void <init>(java.util.Iterator,com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r6, r7);

        return $r5;
    }
}
