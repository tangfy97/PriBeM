public class org.apache.neethi.builders.PolicyContainingPrimitiveAssertion extends org.apache.neethi.builders.PrimitiveAssertion implements org.apache.neethi.PolicyContainingAssertion
{
    protected org.apache.neethi.Policy nested;

    public void <init>(javax.xml.namespace.QName, boolean, boolean, org.apache.neethi.Policy)
    {
        org.apache.neethi.builders.PolicyContainingPrimitiveAssertion r0;
        javax.xml.namespace.QName r1;
        org.apache.neethi.Policy r2;
        boolean z0, z1;

        r0 := @this: org.apache.neethi.builders.PolicyContainingPrimitiveAssertion;

        r1 := @parameter0: javax.xml.namespace.QName;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        r2 := @parameter3: org.apache.neethi.Policy;

        specialinvoke r0.<org.apache.neethi.builders.PrimitiveAssertion: void <init>(javax.xml.namespace.QName,boolean,boolean)>(r1, z0, z1);

        r0.<org.apache.neethi.builders.PolicyContainingPrimitiveAssertion: org.apache.neethi.Policy nested> = r2;

        return;
    }

    public void <init>(javax.xml.namespace.QName, boolean, boolean, java.util.Map, org.apache.neethi.Policy)
    {
        org.apache.neethi.builders.PolicyContainingPrimitiveAssertion r0;
        java.util.Map r2;
        javax.xml.namespace.QName r1;
        org.apache.neethi.Policy r3;
        boolean z0, z1;

        r0 := @this: org.apache.neethi.builders.PolicyContainingPrimitiveAssertion;

        r1 := @parameter0: javax.xml.namespace.QName;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        r2 := @parameter3: java.util.Map;

        r3 := @parameter4: org.apache.neethi.Policy;

        specialinvoke r0.<org.apache.neethi.builders.PrimitiveAssertion: void <init>(javax.xml.namespace.QName,boolean,boolean,java.util.Map)>(r1, z0, z1, r2);

        r0.<org.apache.neethi.builders.PolicyContainingPrimitiveAssertion: org.apache.neethi.Policy nested> = r3;

        return;
    }

    public org.apache.neethi.PolicyComponent normalize()
    {
        org.apache.neethi.PolicyRegistry $r5, $r15;
        java.lang.String $r7, $r17;
        boolean $z0, $z1;
        org.apache.neethi.builders.PolicyContainingPrimitiveAssertion r0;
        java.util.Iterator $r9;
        org.apache.neethi.All $r10, $r20, $r21;
        org.apache.neethi.Assertion $r18;
        org.apache.neethi.Policy $r1, $r2, $r3, $r4, $r6, $r13, $r14, $r16;
        org.apache.neethi.ExactlyOne $r8, $r19;
        java.util.List r12;
        java.lang.Object $r11;

        r0 := @this: org.apache.neethi.builders.PolicyContainingPrimitiveAssertion;

        $r1 = r0.<org.apache.neethi.builders.PolicyContainingPrimitiveAssertion: org.apache.neethi.Policy nested>;

        $r2 = virtualinvoke $r1.<org.apache.neethi.Policy: org.apache.neethi.Policy normalize(boolean)>(1);

        $r3 = new org.apache.neethi.Policy;

        $r4 = r0.<org.apache.neethi.builders.PolicyContainingPrimitiveAssertion: org.apache.neethi.Policy nested>;

        $r5 = virtualinvoke $r4.<org.apache.neethi.Policy: org.apache.neethi.PolicyRegistry getPolicyRegistry()>();

        $r6 = r0.<org.apache.neethi.builders.PolicyContainingPrimitiveAssertion: org.apache.neethi.Policy nested>;

        $r7 = virtualinvoke $r6.<org.apache.neethi.Policy: java.lang.String getNamespace()>();

        specialinvoke $r3.<org.apache.neethi.Policy: void <init>(org.apache.neethi.PolicyRegistry,java.lang.String)>($r5, $r7);

        $r8 = new org.apache.neethi.ExactlyOne;

        specialinvoke $r8.<org.apache.neethi.ExactlyOne: void <init>()>();

        virtualinvoke $r3.<org.apache.neethi.Policy: void addPolicyComponent(org.apache.neethi.PolicyComponent)>($r8);

        $z0 = virtualinvoke r0.<org.apache.neethi.builders.PolicyContainingPrimitiveAssertion: boolean isOptional()>();

        if $z0 == 0 goto label1;

        $r21 = new org.apache.neethi.All;

        specialinvoke $r21.<org.apache.neethi.All: void <init>()>();

        virtualinvoke $r8.<org.apache.neethi.ExactlyOne: void addPolicyComponent(org.apache.neethi.PolicyComponent)>($r21);

     label1:
        $r9 = virtualinvoke $r2.<org.apache.neethi.Policy: java.util.Iterator getAlternatives()>();

     label2:
        $z1 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r10 = new org.apache.neethi.All;

        specialinvoke $r10.<org.apache.neethi.All: void <init>()>();

        $r11 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r12 = (java.util.List) $r11;

        $r13 = new org.apache.neethi.Policy;

        $r14 = r0.<org.apache.neethi.builders.PolicyContainingPrimitiveAssertion: org.apache.neethi.Policy nested>;

        $r15 = virtualinvoke $r14.<org.apache.neethi.Policy: org.apache.neethi.PolicyRegistry getPolicyRegistry()>();

        $r16 = r0.<org.apache.neethi.builders.PolicyContainingPrimitiveAssertion: org.apache.neethi.Policy nested>;

        $r17 = virtualinvoke $r16.<org.apache.neethi.Policy: java.lang.String getNamespace()>();

        specialinvoke $r13.<org.apache.neethi.Policy: void <init>(org.apache.neethi.PolicyRegistry,java.lang.String)>($r15, $r17);

        $r18 = virtualinvoke r0.<org.apache.neethi.builders.PolicyContainingPrimitiveAssertion: org.apache.neethi.Assertion clone(boolean,org.apache.neethi.Policy)>(0, $r13);

        $r19 = new org.apache.neethi.ExactlyOne;

        specialinvoke $r19.<org.apache.neethi.ExactlyOne: void <init>()>();

        virtualinvoke $r13.<org.apache.neethi.Policy: void addPolicyComponent(org.apache.neethi.PolicyComponent)>($r19);

        $r20 = new org.apache.neethi.All;

        specialinvoke $r20.<org.apache.neethi.All: void <init>()>();

        virtualinvoke $r19.<org.apache.neethi.ExactlyOne: void addPolicyComponent(org.apache.neethi.PolicyComponent)>($r20);

        virtualinvoke $r20.<org.apache.neethi.All: void addPolicyComponents(java.util.List)>(r12);

        virtualinvoke $r10.<org.apache.neethi.All: void addPolicyComponent(org.apache.neethi.PolicyComponent)>($r18);

        virtualinvoke $r8.<org.apache.neethi.ExactlyOne: void addPolicyComponent(org.apache.neethi.PolicyComponent)>($r10);

        goto label2;

     label3:
        return $r3;
    }

    protected org.apache.neethi.Assertion clone(boolean, org.apache.neethi.Policy)
    {
        org.apache.neethi.builders.PolicyContainingPrimitiveAssertion $r0, r1;
        java.util.Map $r3;
        javax.xml.namespace.QName $r4;
        org.apache.neethi.Policy r2;
        boolean z0, $z1;

        r1 := @this: org.apache.neethi.builders.PolicyContainingPrimitiveAssertion;

        z0 := @parameter0: boolean;

        r2 := @parameter1: org.apache.neethi.Policy;

        $r0 = new org.apache.neethi.builders.PolicyContainingPrimitiveAssertion;

        $r4 = r1.<org.apache.neethi.builders.PolicyContainingPrimitiveAssertion: javax.xml.namespace.QName name>;

        $z1 = r1.<org.apache.neethi.builders.PolicyContainingPrimitiveAssertion: boolean ignorable>;

        $r3 = r1.<org.apache.neethi.builders.PolicyContainingPrimitiveAssertion: java.util.Map attributes>;

        specialinvoke $r0.<org.apache.neethi.builders.PolicyContainingPrimitiveAssertion: void <init>(javax.xml.namespace.QName,boolean,boolean,java.util.Map,org.apache.neethi.Policy)>($r4, z0, $z1, $r3, r2);

        return $r0;
    }

    public boolean equal(org.apache.neethi.PolicyComponent)
    {
        org.apache.neethi.builders.PolicyContainingPrimitiveAssertion r0, r2;
        org.apache.neethi.PolicyComponent r1;
        org.apache.neethi.Policy $r3, $r4;
        boolean $z0, $z1;

        r0 := @this: org.apache.neethi.builders.PolicyContainingPrimitiveAssertion;

        r1 := @parameter0: org.apache.neethi.PolicyComponent;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = specialinvoke r0.<org.apache.neethi.builders.PrimitiveAssertion: boolean equal(org.apache.neethi.PolicyComponent)>(r1);

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (org.apache.neethi.builders.PolicyContainingPrimitiveAssertion) r1;

        $r3 = virtualinvoke r0.<org.apache.neethi.builders.PolicyContainingPrimitiveAssertion: org.apache.neethi.Policy getPolicy()>();

        $r4 = virtualinvoke r2.<org.apache.neethi.builders.PolicyContainingPrimitiveAssertion: org.apache.neethi.Policy getPolicy()>();

        $z1 = virtualinvoke $r3.<org.apache.neethi.Policy: boolean equal(org.apache.neethi.PolicyComponent)>($r4);

        return $z1;
    }

    public void setPolicy(org.apache.neethi.Policy)
    {
        org.apache.neethi.builders.PolicyContainingPrimitiveAssertion r0;
        org.apache.neethi.Policy r1;

        r0 := @this: org.apache.neethi.builders.PolicyContainingPrimitiveAssertion;

        r1 := @parameter0: org.apache.neethi.Policy;

        r0.<org.apache.neethi.builders.PolicyContainingPrimitiveAssertion: org.apache.neethi.Policy nested> = r1;

        return;
    }

    public org.apache.neethi.Policy getPolicy()
    {
        org.apache.neethi.builders.PolicyContainingPrimitiveAssertion r0;
        org.apache.neethi.Policy $r1;

        r0 := @this: org.apache.neethi.builders.PolicyContainingPrimitiveAssertion;

        $r1 = r0.<org.apache.neethi.builders.PolicyContainingPrimitiveAssertion: org.apache.neethi.Policy nested>;

        return $r1;
    }

    protected void writeContents(javax.xml.stream.XMLStreamWriter) throws javax.xml.stream.XMLStreamException
    {
        org.apache.neethi.builders.PolicyContainingPrimitiveAssertion r0;
        javax.xml.stream.XMLStreamWriter r1;
        org.apache.neethi.Policy $r2;

        r0 := @this: org.apache.neethi.builders.PolicyContainingPrimitiveAssertion;

        r1 := @parameter0: javax.xml.stream.XMLStreamWriter;

        $r2 = r0.<org.apache.neethi.builders.PolicyContainingPrimitiveAssertion: org.apache.neethi.Policy nested>;

        virtualinvoke $r2.<org.apache.neethi.Policy: void serialize(javax.xml.stream.XMLStreamWriter)>(r1);

        return;
    }

    protected boolean hasContents()
    {
        org.apache.neethi.builders.PolicyContainingPrimitiveAssertion r0;

        r0 := @this: org.apache.neethi.builders.PolicyContainingPrimitiveAssertion;

        return 1;
    }
}
