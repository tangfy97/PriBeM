public class org.apache.batik.css.engine.value.svg.ClipPathManager extends org.apache.batik.css.engine.value.AbstractValueManager
{

    public void <init>()
    {
        org.apache.batik.css.engine.value.svg.ClipPathManager r0;

        r0 := @this: org.apache.batik.css.engine.value.svg.ClipPathManager;

        specialinvoke r0.<org.apache.batik.css.engine.value.AbstractValueManager: void <init>()>();

        return;
    }

    public boolean isInheritedProperty()
    {
        org.apache.batik.css.engine.value.svg.ClipPathManager r0;

        r0 := @this: org.apache.batik.css.engine.value.svg.ClipPathManager;

        return 0;
    }

    public java.lang.String getPropertyName()
    {
        org.apache.batik.css.engine.value.svg.ClipPathManager r0;

        r0 := @this: org.apache.batik.css.engine.value.svg.ClipPathManager;

        return "clip-path";
    }

    public boolean isAnimatableProperty()
    {
        org.apache.batik.css.engine.value.svg.ClipPathManager r0;

        r0 := @this: org.apache.batik.css.engine.value.svg.ClipPathManager;

        return 1;
    }

    public boolean isAdditiveProperty()
    {
        org.apache.batik.css.engine.value.svg.ClipPathManager r0;

        r0 := @this: org.apache.batik.css.engine.value.svg.ClipPathManager;

        return 0;
    }

    public int getPropertyType()
    {
        org.apache.batik.css.engine.value.svg.ClipPathManager r0;

        r0 := @this: org.apache.batik.css.engine.value.svg.ClipPathManager;

        return 20;
    }

    public org.apache.batik.css.engine.value.Value getDefaultValue()
    {
        org.apache.batik.css.engine.value.svg.ClipPathManager r1;
        org.apache.batik.css.engine.value.Value $r0;

        r1 := @this: org.apache.batik.css.engine.value.svg.ClipPathManager;

        $r0 = <org.apache.batik.css.engine.value.ValueConstants: org.apache.batik.css.engine.value.Value NONE_VALUE>;

        return $r0;
    }

    public org.apache.batik.css.engine.value.Value createValue(org.w3c.css.sac.LexicalUnit, org.apache.batik.css.engine.CSSEngine) throws org.w3c.dom.DOMException
    {
        org.apache.batik.css.engine.value.svg.ClipPathManager r2;
        org.apache.batik.css.engine.CSSEngine r7;
        short $s0, $s1;
        org.w3c.dom.DOMException $r3;
        org.w3c.css.sac.LexicalUnit r0;
        int $i2;
        org.apache.batik.css.engine.value.URIValue $r12;
        java.lang.String $r1, $r6, $r9, $r10;
        boolean $z0;
        org.apache.batik.css.engine.value.Value $r4, $r11;
        org.apache.batik.util.ParsedURL $r8;

        r2 := @this: org.apache.batik.css.engine.value.svg.ClipPathManager;

        r0 := @parameter0: org.w3c.css.sac.LexicalUnit;

        r7 := @parameter1: org.apache.batik.css.engine.CSSEngine;

        $s0 = interfaceinvoke r0.<org.w3c.css.sac.LexicalUnit: short getLexicalUnitType()>();

        $i2 = (int) $s0;

        lookupswitch($i2)
        {
            case 12: goto label1;
            case 24: goto label2;
            case 35: goto label3;
            default: goto label4;
        };

     label1:
        $r11 = <org.apache.batik.css.engine.value.ValueConstants: org.apache.batik.css.engine.value.Value INHERIT_VALUE>;

        return $r11;

     label2:
        $r12 = new org.apache.batik.css.engine.value.URIValue;

        $r6 = interfaceinvoke r0.<org.w3c.css.sac.LexicalUnit: java.lang.String getStringValue()>();

        $r8 = virtualinvoke r7.<org.apache.batik.css.engine.CSSEngine: org.apache.batik.util.ParsedURL getCSSBaseURI()>();

        $r9 = interfaceinvoke r0.<org.w3c.css.sac.LexicalUnit: java.lang.String getStringValue()>();

        $r10 = staticinvoke <org.apache.batik.css.engine.value.AbstractValueFactory: java.lang.String resolveURI(org.apache.batik.util.ParsedURL,java.lang.String)>($r8, $r9);

        specialinvoke $r12.<org.apache.batik.css.engine.value.URIValue: void <init>(java.lang.String,java.lang.String)>($r6, $r10);

        return $r12;

     label3:
        $r1 = interfaceinvoke r0.<org.w3c.css.sac.LexicalUnit: java.lang.String getStringValue()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("none");

        if $z0 == 0 goto label4;

        $r4 = <org.apache.batik.css.engine.value.ValueConstants: org.apache.batik.css.engine.value.Value NONE_VALUE>;

        return $r4;

     label4:
        $s1 = interfaceinvoke r0.<org.w3c.css.sac.LexicalUnit: short getLexicalUnitType()>();

        $r3 = virtualinvoke r2.<org.apache.batik.css.engine.value.AbstractValueFactory: org.w3c.dom.DOMException createInvalidLexicalUnitDOMException(short)>($s1);

        throw $r3;
    }

    public org.apache.batik.css.engine.value.Value createStringValue(short, java.lang.String, org.apache.batik.css.engine.CSSEngine) throws org.w3c.dom.DOMException
    {
        org.apache.batik.css.engine.value.svg.ClipPathManager r1;
        org.apache.batik.css.engine.value.Value $r3;
        org.apache.batik.css.engine.CSSEngine r5;
        short s0;
        org.apache.batik.util.ParsedURL $r6;
        org.w3c.dom.DOMException $r2;
        int $i1;
        org.apache.batik.css.engine.value.URIValue $r8;
        java.lang.String r0, $r7;
        boolean $z0;

        r1 := @this: org.apache.batik.css.engine.value.svg.ClipPathManager;

        s0 := @parameter0: short;

        r0 := @parameter1: java.lang.String;

        r5 := @parameter2: org.apache.batik.css.engine.CSSEngine;

        $i1 = (int) s0;

        lookupswitch($i1)
        {
            case 20: goto label2;
            case 21: goto label1;
            default: goto label3;
        };

     label1:
        $z0 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("none");

        if $z0 == 0 goto label3;

        $r3 = <org.apache.batik.css.engine.value.ValueConstants: org.apache.batik.css.engine.value.Value NONE_VALUE>;

        return $r3;

     label2:
        $r8 = new org.apache.batik.css.engine.value.URIValue;

        $r6 = virtualinvoke r5.<org.apache.batik.css.engine.CSSEngine: org.apache.batik.util.ParsedURL getCSSBaseURI()>();

        $r7 = staticinvoke <org.apache.batik.css.engine.value.AbstractValueFactory: java.lang.String resolveURI(org.apache.batik.util.ParsedURL,java.lang.String)>($r6, r0);

        specialinvoke $r8.<org.apache.batik.css.engine.value.URIValue: void <init>(java.lang.String,java.lang.String)>(r0, $r7);

        return $r8;

     label3:
        $r2 = virtualinvoke r1.<org.apache.batik.css.engine.value.AbstractValueFactory: org.w3c.dom.DOMException createInvalidStringTypeDOMException(short)>(s0);

        throw $r2;
    }
}
