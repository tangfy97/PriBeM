public final class org.codehaus.jackson.map.ser.std.StdArraySerializers$CharArraySerializer extends org.codehaus.jackson.map.ser.std.SerializerBase
{

    public void <init>()
    {
        org.codehaus.jackson.map.ser.std.StdArraySerializers$CharArraySerializer r0;

        r0 := @this: org.codehaus.jackson.map.ser.std.StdArraySerializers$CharArraySerializer;

        specialinvoke r0.<org.codehaus.jackson.map.ser.std.SerializerBase: void <init>(java.lang.Class)>(class "[C");

        return;
    }

    public void serialize(char[], org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.map.ser.std.StdArraySerializers$CharArraySerializer r4;
        org.codehaus.jackson.JsonGenerator r2;
        int $i0;
        org.codehaus.jackson.map.SerializerProvider r0;
        char[] r3;
        org.codehaus.jackson.map.SerializationConfig$Feature $r1;
        boolean $z0;

        r4 := @this: org.codehaus.jackson.map.ser.std.StdArraySerializers$CharArraySerializer;

        r3 := @parameter0: char[];

        r2 := @parameter1: org.codehaus.jackson.JsonGenerator;

        r0 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r1 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature WRITE_CHAR_ARRAYS_AS_JSON_ARRAYS>;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.map.SerializerProvider: boolean isEnabled(org.codehaus.jackson.map.SerializationConfig$Feature)>($r1);

        if $z0 == 0 goto label1;

        virtualinvoke r2.<org.codehaus.jackson.JsonGenerator: void writeStartArray()>();

        specialinvoke r4.<org.codehaus.jackson.map.ser.std.StdArraySerializers$CharArraySerializer: void _writeArrayContents(org.codehaus.jackson.JsonGenerator,char[])>(r2, r3);

        virtualinvoke r2.<org.codehaus.jackson.JsonGenerator: void writeEndArray()>();

        goto label2;

     label1:
        $i0 = lengthof r3;

        virtualinvoke r2.<org.codehaus.jackson.JsonGenerator: void writeString(char[],int,int)>(r3, 0, $i0);

     label2:
        return;
    }

    public void serializeWithType(char[], org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider, org.codehaus.jackson.map.TypeSerializer) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.map.ser.std.StdArraySerializers$CharArraySerializer r5;
        org.codehaus.jackson.map.SerializerProvider r0;
        org.codehaus.jackson.map.TypeSerializer r2;
        org.codehaus.jackson.JsonGenerator r4;
        int $i0;
        char[] r3;
        org.codehaus.jackson.map.SerializationConfig$Feature $r1;
        boolean $z0;

        r5 := @this: org.codehaus.jackson.map.ser.std.StdArraySerializers$CharArraySerializer;

        r3 := @parameter0: char[];

        r4 := @parameter1: org.codehaus.jackson.JsonGenerator;

        r0 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        r2 := @parameter3: org.codehaus.jackson.map.TypeSerializer;

        $r1 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature WRITE_CHAR_ARRAYS_AS_JSON_ARRAYS>;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.map.SerializerProvider: boolean isEnabled(org.codehaus.jackson.map.SerializationConfig$Feature)>($r1);

        if $z0 == 0 goto label1;

        virtualinvoke r2.<org.codehaus.jackson.map.TypeSerializer: void writeTypePrefixForArray(java.lang.Object,org.codehaus.jackson.JsonGenerator)>(r3, r4);

        specialinvoke r5.<org.codehaus.jackson.map.ser.std.StdArraySerializers$CharArraySerializer: void _writeArrayContents(org.codehaus.jackson.JsonGenerator,char[])>(r4, r3);

        virtualinvoke r2.<org.codehaus.jackson.map.TypeSerializer: void writeTypeSuffixForArray(java.lang.Object,org.codehaus.jackson.JsonGenerator)>(r3, r4);

        goto label2;

     label1:
        virtualinvoke r2.<org.codehaus.jackson.map.TypeSerializer: void writeTypePrefixForScalar(java.lang.Object,org.codehaus.jackson.JsonGenerator)>(r3, r4);

        $i0 = lengthof r3;

        virtualinvoke r4.<org.codehaus.jackson.JsonGenerator: void writeString(char[],int,int)>(r3, 0, $i0);

        virtualinvoke r2.<org.codehaus.jackson.map.TypeSerializer: void writeTypeSuffixForScalar(java.lang.Object,org.codehaus.jackson.JsonGenerator)>(r3, r4);

     label2:
        return;
    }

    private final void _writeArrayContents(org.codehaus.jackson.JsonGenerator, char[]) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.map.ser.std.StdArraySerializers$CharArraySerializer r2;
        org.codehaus.jackson.JsonGenerator r1;
        int i0, i1;
        char[] r0;

        r2 := @this: org.codehaus.jackson.map.ser.std.StdArraySerializers$CharArraySerializer;

        r1 := @parameter0: org.codehaus.jackson.JsonGenerator;

        r0 := @parameter1: char[];

        i1 = 0;

        i0 = lengthof r0;

     label1:
        if i1 >= i0 goto label2;

        virtualinvoke r1.<org.codehaus.jackson.JsonGenerator: void writeString(char[],int,int)>(r0, i1, 1);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public org.codehaus.jackson.JsonNode getSchema(org.codehaus.jackson.map.SerializerProvider, java.lang.reflect.Type)
    {
        org.codehaus.jackson.map.ser.std.StdArraySerializers$CharArraySerializer r0;
        java.lang.reflect.Type r4;
        org.codehaus.jackson.map.SerializerProvider r3;
        org.codehaus.jackson.node.ObjectNode $r1, $r2;

        r0 := @this: org.codehaus.jackson.map.ser.std.StdArraySerializers$CharArraySerializer;

        r3 := @parameter0: org.codehaus.jackson.map.SerializerProvider;

        r4 := @parameter1: java.lang.reflect.Type;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.ser.std.StdArraySerializers$CharArraySerializer: org.codehaus.jackson.node.ObjectNode createSchemaNode(java.lang.String,boolean)>("array", 1);

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.ser.std.StdArraySerializers$CharArraySerializer: org.codehaus.jackson.node.ObjectNode createSchemaNode(java.lang.String)>("string");

        virtualinvoke $r2.<org.codehaus.jackson.node.ObjectNode: void put(java.lang.String,java.lang.String)>("type", "string");

        virtualinvoke $r1.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.JsonNode put(java.lang.String,org.codehaus.jackson.JsonNode)>("items", $r2);

        return $r1;
    }

    public volatile void serialize(java.lang.Object, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.map.ser.std.StdArraySerializers$CharArraySerializer r0;
        org.codehaus.jackson.JsonGenerator r2;
        org.codehaus.jackson.map.SerializerProvider r3;
        char[] $r4;
        java.lang.Object r1;

        r0 := @this: org.codehaus.jackson.map.ser.std.StdArraySerializers$CharArraySerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.codehaus.jackson.JsonGenerator;

        r3 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r4 = (char[]) r1;

        virtualinvoke r0.<org.codehaus.jackson.map.ser.std.StdArraySerializers$CharArraySerializer: void serialize(char[],org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r4, r2, r3);

        return;
    }

    public volatile void serializeWithType(java.lang.Object, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider, org.codehaus.jackson.map.TypeSerializer) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.map.ser.std.StdArraySerializers$CharArraySerializer r0;
        org.codehaus.jackson.JsonGenerator r2;
        org.codehaus.jackson.map.TypeSerializer r4;
        org.codehaus.jackson.map.SerializerProvider r3;
        char[] $r5;
        java.lang.Object r1;

        r0 := @this: org.codehaus.jackson.map.ser.std.StdArraySerializers$CharArraySerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.codehaus.jackson.JsonGenerator;

        r3 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        r4 := @parameter3: org.codehaus.jackson.map.TypeSerializer;

        $r5 = (char[]) r1;

        virtualinvoke r0.<org.codehaus.jackson.map.ser.std.StdArraySerializers$CharArraySerializer: void serializeWithType(char[],org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.TypeSerializer)>($r5, r2, r3, r4);

        return;
    }
}
