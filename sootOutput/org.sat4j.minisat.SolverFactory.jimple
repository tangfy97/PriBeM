public final class org.sat4j.minisat.SolverFactory extends org.sat4j.core.ASolverFactory
{
    private static final long serialVersionUID;
    private static org.sat4j.minisat.SolverFactory instance;

    private void <init>()
    {
        org.sat4j.minisat.SolverFactory r0;

        r0 := @this: org.sat4j.minisat.SolverFactory;

        specialinvoke r0.<org.sat4j.core.ASolverFactory: void <init>()>();

        return;
    }

    private static synchronized void createInstance()
    {
        org.sat4j.minisat.SolverFactory $r0, $r1;

        $r0 = <org.sat4j.minisat.SolverFactory: org.sat4j.minisat.SolverFactory instance>;

        if $r0 != null goto label1;

        $r1 = new org.sat4j.minisat.SolverFactory;

        specialinvoke $r1.<org.sat4j.minisat.SolverFactory: void <init>()>();

        <org.sat4j.minisat.SolverFactory: org.sat4j.minisat.SolverFactory instance> = $r1;

     label1:
        return;
    }

    public static org.sat4j.minisat.SolverFactory instance()
    {
        org.sat4j.minisat.SolverFactory $r0, $r1;

        $r0 = <org.sat4j.minisat.SolverFactory: org.sat4j.minisat.SolverFactory instance>;

        if $r0 != null goto label1;

        staticinvoke <org.sat4j.minisat.SolverFactory: void createInstance()>();

     label1:
        $r1 = <org.sat4j.minisat.SolverFactory: org.sat4j.minisat.SolverFactory instance>;

        return $r1;
    }

    public static org.sat4j.minisat.core.Solver newMiniLearningHeap()
    {
        org.sat4j.minisat.constraints.MixedDataStructureDanielWL $r0;
        org.sat4j.minisat.core.Solver $r1;

        $r0 = new org.sat4j.minisat.constraints.MixedDataStructureDanielWL;

        specialinvoke $r0.<org.sat4j.minisat.constraints.MixedDataStructureDanielWL: void <init>()>();

        $r1 = staticinvoke <org.sat4j.minisat.SolverFactory: org.sat4j.minisat.core.Solver newMiniLearningHeap(org.sat4j.minisat.core.DataStructureFactory)>($r0);

        return $r1;
    }

    public static org.sat4j.minisat.core.ICDCL newMiniLearningHeapEZSimp()
    {
        org.sat4j.minisat.core.Solver $r0;
        org.sat4j.minisat.core.ISimplifier $r1;

        $r0 = staticinvoke <org.sat4j.minisat.SolverFactory: org.sat4j.minisat.core.Solver newMiniLearningHeap()>();

        $r1 = $r0.<org.sat4j.minisat.core.Solver: org.sat4j.minisat.core.ISimplifier SIMPLE_SIMPLIFICATION>;

        virtualinvoke $r0.<org.sat4j.minisat.core.Solver: void setSimplifier(org.sat4j.minisat.core.ISimplifier)>($r1);

        return $r0;
    }

    public static org.sat4j.minisat.core.Solver newMiniLearningHeapExpSimp()
    {
        org.sat4j.minisat.core.Solver $r0;
        org.sat4j.minisat.core.ISimplifier $r1;

        $r0 = staticinvoke <org.sat4j.minisat.SolverFactory: org.sat4j.minisat.core.Solver newMiniLearningHeap()>();

        $r1 = $r0.<org.sat4j.minisat.core.Solver: org.sat4j.minisat.core.ISimplifier EXPENSIVE_SIMPLIFICATION>;

        virtualinvoke $r0.<org.sat4j.minisat.core.Solver: void setSimplifier(org.sat4j.minisat.core.ISimplifier)>($r1);

        return $r0;
    }

    public static org.sat4j.minisat.core.Solver newMiniLearningHeapRsatExpSimp()
    {
        org.sat4j.minisat.core.Solver $r0;
        org.sat4j.minisat.orders.VarOrderHeap $r1;
        org.sat4j.minisat.orders.RSATPhaseSelectionStrategy $r2;

        $r0 = staticinvoke <org.sat4j.minisat.SolverFactory: org.sat4j.minisat.core.Solver newMiniLearningHeapExpSimp()>();

        $r1 = new org.sat4j.minisat.orders.VarOrderHeap;

        $r2 = new org.sat4j.minisat.orders.RSATPhaseSelectionStrategy;

        specialinvoke $r2.<org.sat4j.minisat.orders.RSATPhaseSelectionStrategy: void <init>()>();

        specialinvoke $r1.<org.sat4j.minisat.orders.VarOrderHeap: void <init>(org.sat4j.minisat.core.IPhaseSelectionStrategy)>($r2);

        virtualinvoke $r0.<org.sat4j.minisat.core.Solver: void setOrder(org.sat4j.minisat.core.IOrder)>($r1);

        return $r0;
    }

    public static org.sat4j.minisat.core.Solver newMiniLearningHeapRsatExpSimpBiere()
    {
        org.sat4j.minisat.core.Solver $r0;
        org.sat4j.minisat.restarts.ArminRestarts $r1;
        org.sat4j.minisat.core.SearchParams $r2;

        $r0 = staticinvoke <org.sat4j.minisat.SolverFactory: org.sat4j.minisat.core.Solver newMiniLearningHeapRsatExpSimp()>();

        $r1 = new org.sat4j.minisat.restarts.ArminRestarts;

        specialinvoke $r1.<org.sat4j.minisat.restarts.ArminRestarts: void <init>()>();

        virtualinvoke $r0.<org.sat4j.minisat.core.Solver: void setRestartStrategy(org.sat4j.minisat.core.RestartStrategy)>($r1);

        $r2 = new org.sat4j.minisat.core.SearchParams;

        specialinvoke $r2.<org.sat4j.minisat.core.SearchParams: void <init>(double,int)>(1.1, 100);

        virtualinvoke $r0.<org.sat4j.minisat.core.Solver: void setSearchParams(org.sat4j.minisat.core.SearchParams)>($r2);

        return $r0;
    }

    public static org.sat4j.minisat.core.ICDCL newMiniLearningHeapRsatExpSimpLuby()
    {
        org.sat4j.minisat.core.Solver $r0;
        org.sat4j.minisat.restarts.LubyRestarts $r1;

        $r0 = staticinvoke <org.sat4j.minisat.SolverFactory: org.sat4j.minisat.core.Solver newMiniLearningHeapRsatExpSimp()>();

        $r1 = new org.sat4j.minisat.restarts.LubyRestarts;

        specialinvoke $r1.<org.sat4j.minisat.restarts.LubyRestarts: void <init>(int)>(512);

        interfaceinvoke $r0.<org.sat4j.minisat.core.ICDCL: void setRestartStrategy(org.sat4j.minisat.core.RestartStrategy)>($r1);

        return $r0;
    }

    private static org.sat4j.minisat.core.Solver newBestCurrentSolverConfiguration(org.sat4j.minisat.core.DataStructureFactory)
    {
        org.sat4j.minisat.core.ISimplifier $r7;
        org.sat4j.minisat.core.DataStructureFactory r2;
        org.sat4j.minisat.learning.MiniSATLearning $r0;
        org.sat4j.minisat.core.SearchParams $r6;
        org.sat4j.minisat.core.Solver $r1;
        org.sat4j.minisat.orders.VarOrderHeap $r3;
        org.sat4j.minisat.orders.RSATPhaseSelectionStrategy $r4;
        org.sat4j.minisat.restarts.ArminRestarts $r5;

        r2 := @parameter0: org.sat4j.minisat.core.DataStructureFactory;

        $r0 = new org.sat4j.minisat.learning.MiniSATLearning;

        specialinvoke $r0.<org.sat4j.minisat.learning.MiniSATLearning: void <init>()>();

        $r1 = new org.sat4j.minisat.core.Solver;

        $r3 = new org.sat4j.minisat.orders.VarOrderHeap;

        $r4 = new org.sat4j.minisat.orders.RSATPhaseSelectionStrategy;

        specialinvoke $r4.<org.sat4j.minisat.orders.RSATPhaseSelectionStrategy: void <init>()>();

        specialinvoke $r3.<org.sat4j.minisat.orders.VarOrderHeap: void <init>(org.sat4j.minisat.core.IPhaseSelectionStrategy)>($r4);

        $r5 = new org.sat4j.minisat.restarts.ArminRestarts;

        specialinvoke $r5.<org.sat4j.minisat.restarts.ArminRestarts: void <init>()>();

        specialinvoke $r1.<org.sat4j.minisat.core.Solver: void <init>(org.sat4j.minisat.core.LearningStrategy,org.sat4j.minisat.core.DataStructureFactory,org.sat4j.minisat.core.IOrder,org.sat4j.minisat.core.RestartStrategy)>($r0, r2, $r3, $r5);

        $r6 = new org.sat4j.minisat.core.SearchParams;

        specialinvoke $r6.<org.sat4j.minisat.core.SearchParams: void <init>(double,int)>(1.1, 100);

        virtualinvoke $r1.<org.sat4j.minisat.core.Solver: void setSearchParams(org.sat4j.minisat.core.SearchParams)>($r6);

        virtualinvoke $r0.<org.sat4j.minisat.learning.MiniSATLearning: void setSolver(org.sat4j.minisat.core.Solver)>($r1);

        $r7 = $r1.<org.sat4j.minisat.core.Solver: org.sat4j.minisat.core.ISimplifier EXPENSIVE_SIMPLIFICATION>;

        virtualinvoke $r1.<org.sat4j.minisat.core.Solver: void setSimplifier(org.sat4j.minisat.core.ISimplifier)>($r7);

        return $r1;
    }

    public static org.sat4j.minisat.core.ICDCL newGreedySolver()
    {
        org.sat4j.minisat.core.ISimplifier $r7;
        org.sat4j.minisat.orders.RandomWalkDecorator $r3;
        org.sat4j.minisat.learning.MiniSATLearning $r0;
        org.sat4j.minisat.constraints.MixedDataStructureDanielWL $r2;
        org.sat4j.minisat.restarts.NoRestarts $r6;
        org.sat4j.minisat.core.Solver $r1;
        org.sat4j.minisat.orders.VarOrderHeap $r4;
        org.sat4j.minisat.orders.RSATPhaseSelectionStrategy $r5;

        $r0 = new org.sat4j.minisat.learning.MiniSATLearning;

        specialinvoke $r0.<org.sat4j.minisat.learning.MiniSATLearning: void <init>()>();

        $r1 = new org.sat4j.minisat.core.Solver;

        $r2 = new org.sat4j.minisat.constraints.MixedDataStructureDanielWL;

        specialinvoke $r2.<org.sat4j.minisat.constraints.MixedDataStructureDanielWL: void <init>()>();

        $r3 = new org.sat4j.minisat.orders.RandomWalkDecorator;

        $r4 = new org.sat4j.minisat.orders.VarOrderHeap;

        $r5 = new org.sat4j.minisat.orders.RSATPhaseSelectionStrategy;

        specialinvoke $r5.<org.sat4j.minisat.orders.RSATPhaseSelectionStrategy: void <init>()>();

        specialinvoke $r4.<org.sat4j.minisat.orders.VarOrderHeap: void <init>(org.sat4j.minisat.core.IPhaseSelectionStrategy)>($r5);

        specialinvoke $r3.<org.sat4j.minisat.orders.RandomWalkDecorator: void <init>(org.sat4j.minisat.orders.VarOrderHeap)>($r4);

        $r6 = new org.sat4j.minisat.restarts.NoRestarts;

        specialinvoke $r6.<org.sat4j.minisat.restarts.NoRestarts: void <init>()>();

        specialinvoke $r1.<org.sat4j.minisat.core.Solver: void <init>(org.sat4j.minisat.core.LearningStrategy,org.sat4j.minisat.core.DataStructureFactory,org.sat4j.minisat.core.IOrder,org.sat4j.minisat.core.RestartStrategy)>($r0, $r2, $r3, $r6);

        virtualinvoke $r0.<org.sat4j.minisat.learning.MiniSATLearning: void setSolver(org.sat4j.minisat.core.Solver)>($r1);

        $r7 = $r1.<org.sat4j.minisat.core.Solver: org.sat4j.minisat.core.ISimplifier EXPENSIVE_SIMPLIFICATION>;

        virtualinvoke $r1.<org.sat4j.minisat.core.Solver: void setSimplifier(org.sat4j.minisat.core.ISimplifier)>($r7);

        return $r1;
    }

    public static org.sat4j.minisat.core.ICDCL newDefaultAutoErasePhaseSaving()
    {
        org.sat4j.minisat.core.Solver $r0;
        org.sat4j.minisat.orders.VarOrderHeap $r1;
        org.sat4j.minisat.orders.PhaseCachingAutoEraseStrategy $r2;

        $r0 = staticinvoke <org.sat4j.minisat.SolverFactory: org.sat4j.minisat.core.Solver newBestWL()>();

        $r1 = new org.sat4j.minisat.orders.VarOrderHeap;

        $r2 = new org.sat4j.minisat.orders.PhaseCachingAutoEraseStrategy;

        specialinvoke $r2.<org.sat4j.minisat.orders.PhaseCachingAutoEraseStrategy: void <init>()>();

        specialinvoke $r1.<org.sat4j.minisat.orders.VarOrderHeap: void <init>(org.sat4j.minisat.core.IPhaseSelectionStrategy)>($r2);

        interfaceinvoke $r0.<org.sat4j.minisat.core.ICDCL: void setOrder(org.sat4j.minisat.core.IOrder)>($r1);

        return $r0;
    }

    public static org.sat4j.minisat.core.ICDCL newDefaultMS21PhaseSaving()
    {
        org.sat4j.minisat.core.Solver $r0;
        org.sat4j.minisat.orders.VarOrderHeap $r1;
        org.sat4j.minisat.orders.RSATLastLearnedClausesPhaseSelectionStrategy $r2;

        $r0 = staticinvoke <org.sat4j.minisat.SolverFactory: org.sat4j.minisat.core.Solver newBestWL()>();

        $r1 = new org.sat4j.minisat.orders.VarOrderHeap;

        $r2 = new org.sat4j.minisat.orders.RSATLastLearnedClausesPhaseSelectionStrategy;

        specialinvoke $r2.<org.sat4j.minisat.orders.RSATLastLearnedClausesPhaseSelectionStrategy: void <init>()>();

        specialinvoke $r1.<org.sat4j.minisat.orders.VarOrderHeap: void <init>(org.sat4j.minisat.core.IPhaseSelectionStrategy)>($r2);

        interfaceinvoke $r0.<org.sat4j.minisat.core.ICDCL: void setOrder(org.sat4j.minisat.core.IOrder)>($r1);

        return $r0;
    }

    public static org.sat4j.minisat.core.Solver newBestWL()
    {
        org.sat4j.minisat.constraints.MixedDataStructureDanielWL $r0;
        org.sat4j.minisat.core.Solver $r1;

        $r0 = new org.sat4j.minisat.constraints.MixedDataStructureDanielWL;

        specialinvoke $r0.<org.sat4j.minisat.constraints.MixedDataStructureDanielWL: void <init>()>();

        $r1 = staticinvoke <org.sat4j.minisat.SolverFactory: org.sat4j.minisat.core.Solver newBestCurrentSolverConfiguration(org.sat4j.minisat.core.DataStructureFactory)>($r0);

        return $r1;
    }

    public static org.sat4j.minisat.core.ICDCL newBestHT()
    {
        org.sat4j.minisat.constraints.MixedDataStructureDanielHT $r0;
        org.sat4j.minisat.core.Solver $r1;

        $r0 = new org.sat4j.minisat.constraints.MixedDataStructureDanielHT;

        specialinvoke $r0.<org.sat4j.minisat.constraints.MixedDataStructureDanielHT: void <init>()>();

        $r1 = staticinvoke <org.sat4j.minisat.SolverFactory: org.sat4j.minisat.core.Solver newBestCurrentSolverConfiguration(org.sat4j.minisat.core.DataStructureFactory)>($r0);

        return $r1;
    }

    public static org.sat4j.minisat.core.ICDCL newBestSingleWL()
    {
        org.sat4j.minisat.constraints.MixedDataStructureSingleWL $r0;
        org.sat4j.minisat.core.Solver $r1;

        $r0 = new org.sat4j.minisat.constraints.MixedDataStructureSingleWL;

        specialinvoke $r0.<org.sat4j.minisat.constraints.MixedDataStructureSingleWL: void <init>()>();

        $r1 = staticinvoke <org.sat4j.minisat.SolverFactory: org.sat4j.minisat.core.Solver newBestCurrentSolverConfiguration(org.sat4j.minisat.core.DataStructureFactory)>($r0);

        return $r1;
    }

    public static org.sat4j.minisat.core.ICDCL newBest17()
    {
        org.sat4j.minisat.constraints.MixedDataStructureSingleWL $r0;
        org.sat4j.minisat.core.ISimplifier $r2;
        org.sat4j.minisat.learning.PercentLengthLearning $r4;
        org.sat4j.minisat.core.LearnedConstraintsDeletionStrategy $r3;
        org.sat4j.minisat.core.Solver $r1;

        $r0 = new org.sat4j.minisat.constraints.MixedDataStructureSingleWL;

        specialinvoke $r0.<org.sat4j.minisat.constraints.MixedDataStructureSingleWL: void <init>()>();

        $r1 = staticinvoke <org.sat4j.minisat.SolverFactory: org.sat4j.minisat.core.Solver newBestCurrentSolverConfiguration(org.sat4j.minisat.core.DataStructureFactory)>($r0);

        $r2 = $r1.<org.sat4j.minisat.core.Solver: org.sat4j.minisat.core.ISimplifier EXPENSIVE_SIMPLIFICATION_WLONLY>;

        virtualinvoke $r1.<org.sat4j.minisat.core.Solver: void setSimplifier(org.sat4j.minisat.core.ISimplifier)>($r2);

        $r3 = $r1.<org.sat4j.minisat.core.Solver: org.sat4j.minisat.core.LearnedConstraintsDeletionStrategy memory_based>;

        virtualinvoke $r1.<org.sat4j.minisat.core.Solver: void setLearnedConstraintsDeletionStrategy(org.sat4j.minisat.core.LearnedConstraintsDeletionStrategy)>($r3);

        $r4 = new org.sat4j.minisat.learning.PercentLengthLearning;

        specialinvoke $r4.<org.sat4j.minisat.learning.PercentLengthLearning: void <init>(int)>(10);

        virtualinvoke $r1.<org.sat4j.minisat.core.Solver: void setLearner(org.sat4j.minisat.core.LearningStrategy)>($r4);

        virtualinvoke $r4.<org.sat4j.minisat.learning.LimitedLearning: void setSolver(org.sat4j.minisat.core.Solver)>($r1);

        return $r1;
    }

    public static org.sat4j.minisat.core.Solver newGlucose()
    {
        org.sat4j.minisat.core.LearnedConstraintsDeletionStrategy $r1;
        org.sat4j.minisat.core.Solver $r0;
        org.sat4j.minisat.restarts.LubyRestarts $r2;

        $r0 = staticinvoke <org.sat4j.minisat.SolverFactory: org.sat4j.minisat.core.Solver newBestWL()>();

        $r1 = $r0.<org.sat4j.minisat.core.Solver: org.sat4j.minisat.core.LearnedConstraintsDeletionStrategy glucose>;

        virtualinvoke $r0.<org.sat4j.minisat.core.Solver: void setLearnedConstraintsDeletionStrategy(org.sat4j.minisat.core.LearnedConstraintsDeletionStrategy)>($r1);

        $r2 = new org.sat4j.minisat.restarts.LubyRestarts;

        specialinvoke $r2.<org.sat4j.minisat.restarts.LubyRestarts: void <init>(int)>(512);

        virtualinvoke $r0.<org.sat4j.minisat.core.Solver: void setRestartStrategy(org.sat4j.minisat.core.RestartStrategy)>($r2);

        return $r0;
    }

    public static org.sat4j.minisat.core.Solver newMiniLearningHeap(org.sat4j.minisat.core.DataStructureFactory)
    {
        org.sat4j.minisat.core.DataStructureFactory r0;
        org.sat4j.minisat.core.Solver $r2;
        org.sat4j.minisat.orders.VarOrderHeap $r1;

        r0 := @parameter0: org.sat4j.minisat.core.DataStructureFactory;

        $r1 = new org.sat4j.minisat.orders.VarOrderHeap;

        specialinvoke $r1.<org.sat4j.minisat.orders.VarOrderHeap: void <init>()>();

        $r2 = staticinvoke <org.sat4j.minisat.SolverFactory: org.sat4j.minisat.core.Solver newMiniLearning(org.sat4j.minisat.core.DataStructureFactory,org.sat4j.minisat.core.IOrder)>(r0, $r1);

        return $r2;
    }

    public static org.sat4j.minisat.core.ICDCL newMiniLearningPure()
    {
        org.sat4j.minisat.constraints.MixedDataStructureDanielWL $r0;
        org.sat4j.minisat.orders.PureOrder $r1;
        org.sat4j.minisat.core.Solver $r2;

        $r0 = new org.sat4j.minisat.constraints.MixedDataStructureDanielWL;

        specialinvoke $r0.<org.sat4j.minisat.constraints.MixedDataStructureDanielWL: void <init>()>();

        $r1 = new org.sat4j.minisat.orders.PureOrder;

        specialinvoke $r1.<org.sat4j.minisat.orders.PureOrder: void <init>()>();

        $r2 = staticinvoke <org.sat4j.minisat.SolverFactory: org.sat4j.minisat.core.Solver newMiniLearning(org.sat4j.minisat.core.DataStructureFactory,org.sat4j.minisat.core.IOrder)>($r0, $r1);

        return $r2;
    }

    public static org.sat4j.minisat.core.Solver newMiniLearning(org.sat4j.minisat.core.DataStructureFactory, org.sat4j.minisat.core.IOrder)
    {
        org.sat4j.minisat.core.IOrder r3;
        org.sat4j.minisat.restarts.MiniSATRestarts $r4;
        org.sat4j.minisat.core.DataStructureFactory r2;
        org.sat4j.minisat.core.Solver $r1;
        org.sat4j.minisat.learning.MiniSATLearning $r0;

        r2 := @parameter0: org.sat4j.minisat.core.DataStructureFactory;

        r3 := @parameter1: org.sat4j.minisat.core.IOrder;

        $r0 = new org.sat4j.minisat.learning.MiniSATLearning;

        specialinvoke $r0.<org.sat4j.minisat.learning.MiniSATLearning: void <init>()>();

        $r1 = new org.sat4j.minisat.core.Solver;

        $r4 = new org.sat4j.minisat.restarts.MiniSATRestarts;

        specialinvoke $r4.<org.sat4j.minisat.restarts.MiniSATRestarts: void <init>()>();

        specialinvoke $r1.<org.sat4j.minisat.core.Solver: void <init>(org.sat4j.minisat.core.LearningStrategy,org.sat4j.minisat.core.DataStructureFactory,org.sat4j.minisat.core.IOrder,org.sat4j.minisat.core.RestartStrategy)>($r0, r2, r3, $r4);

        virtualinvoke $r0.<org.sat4j.minisat.learning.MiniSATLearning: void setSolver(org.sat4j.minisat.core.Solver)>($r1);

        return $r1;
    }

    public static org.sat4j.minisat.core.ICDCL newMiniLearningHeapEZSimpNoRestarts()
    {
        org.sat4j.minisat.constraints.MixedDataStructureDanielWL $r2;
        org.sat4j.minisat.core.ISimplifier $r6;
        org.sat4j.minisat.learning.PercentLengthLearning $r0;
        org.sat4j.minisat.restarts.MiniSATRestarts $r5;
        org.sat4j.minisat.core.Solver $r1;
        org.sat4j.minisat.orders.VarOrderHeap $r4;
        org.sat4j.minisat.core.SearchParams $r3;

        $r0 = new org.sat4j.minisat.learning.PercentLengthLearning;

        specialinvoke $r0.<org.sat4j.minisat.learning.PercentLengthLearning: void <init>(int)>(10);

        $r1 = new org.sat4j.minisat.core.Solver;

        $r2 = new org.sat4j.minisat.constraints.MixedDataStructureDanielWL;

        specialinvoke $r2.<org.sat4j.minisat.constraints.MixedDataStructureDanielWL: void <init>()>();

        $r3 = new org.sat4j.minisat.core.SearchParams;

        specialinvoke $r3.<org.sat4j.minisat.core.SearchParams: void <init>(int)>(2147483647);

        $r4 = new org.sat4j.minisat.orders.VarOrderHeap;

        specialinvoke $r4.<org.sat4j.minisat.orders.VarOrderHeap: void <init>()>();

        $r5 = new org.sat4j.minisat.restarts.MiniSATRestarts;

        specialinvoke $r5.<org.sat4j.minisat.restarts.MiniSATRestarts: void <init>()>();

        specialinvoke $r1.<org.sat4j.minisat.core.Solver: void <init>(org.sat4j.minisat.core.LearningStrategy,org.sat4j.minisat.core.DataStructureFactory,org.sat4j.minisat.core.SearchParams,org.sat4j.minisat.core.IOrder,org.sat4j.minisat.core.RestartStrategy)>($r0, $r2, $r3, $r4, $r5);

        virtualinvoke $r0.<org.sat4j.minisat.learning.LimitedLearning: void setSolver(org.sat4j.minisat.core.Solver)>($r1);

        $r6 = $r1.<org.sat4j.minisat.core.Solver: org.sat4j.minisat.core.ISimplifier SIMPLE_SIMPLIFICATION>;

        virtualinvoke $r1.<org.sat4j.minisat.core.Solver: void setSimplifier(org.sat4j.minisat.core.ISimplifier)>($r6);

        return $r1;
    }

    public static org.sat4j.minisat.core.ICDCL newMiniLearningHeapEZSimpLongRestarts()
    {
        org.sat4j.minisat.constraints.MixedDataStructureDanielWL $r2;
        org.sat4j.minisat.core.ISimplifier $r6;
        org.sat4j.minisat.learning.PercentLengthLearning $r0;
        org.sat4j.minisat.restarts.MiniSATRestarts $r5;
        org.sat4j.minisat.core.Solver $r1;
        org.sat4j.minisat.orders.VarOrderHeap $r4;
        org.sat4j.minisat.core.SearchParams $r3;

        $r0 = new org.sat4j.minisat.learning.PercentLengthLearning;

        specialinvoke $r0.<org.sat4j.minisat.learning.PercentLengthLearning: void <init>(int)>(10);

        $r1 = new org.sat4j.minisat.core.Solver;

        $r2 = new org.sat4j.minisat.constraints.MixedDataStructureDanielWL;

        specialinvoke $r2.<org.sat4j.minisat.constraints.MixedDataStructureDanielWL: void <init>()>();

        $r3 = new org.sat4j.minisat.core.SearchParams;

        specialinvoke $r3.<org.sat4j.minisat.core.SearchParams: void <init>(int)>(1000);

        $r4 = new org.sat4j.minisat.orders.VarOrderHeap;

        specialinvoke $r4.<org.sat4j.minisat.orders.VarOrderHeap: void <init>()>();

        $r5 = new org.sat4j.minisat.restarts.MiniSATRestarts;

        specialinvoke $r5.<org.sat4j.minisat.restarts.MiniSATRestarts: void <init>()>();

        specialinvoke $r1.<org.sat4j.minisat.core.Solver: void <init>(org.sat4j.minisat.core.LearningStrategy,org.sat4j.minisat.core.DataStructureFactory,org.sat4j.minisat.core.SearchParams,org.sat4j.minisat.core.IOrder,org.sat4j.minisat.core.RestartStrategy)>($r0, $r2, $r3, $r4, $r5);

        virtualinvoke $r0.<org.sat4j.minisat.learning.LimitedLearning: void setSolver(org.sat4j.minisat.core.Solver)>($r1);

        $r6 = $r1.<org.sat4j.minisat.core.Solver: org.sat4j.minisat.core.ISimplifier SIMPLE_SIMPLIFICATION>;

        virtualinvoke $r1.<org.sat4j.minisat.core.Solver: void setSimplifier(org.sat4j.minisat.core.ISimplifier)>($r6);

        return $r1;
    }

    public static org.sat4j.minisat.core.Solver newMiniSATHeap()
    {
        org.sat4j.minisat.constraints.MixedDataStructureDanielWL $r0;
        org.sat4j.minisat.core.Solver $r1;

        $r0 = new org.sat4j.minisat.constraints.MixedDataStructureDanielWL;

        specialinvoke $r0.<org.sat4j.minisat.constraints.MixedDataStructureDanielWL: void <init>()>();

        $r1 = staticinvoke <org.sat4j.minisat.SolverFactory: org.sat4j.minisat.core.Solver newMiniSATHeap(org.sat4j.minisat.core.DataStructureFactory)>($r0);

        return $r1;
    }

    public static org.sat4j.minisat.core.ICDCL newMiniSATHeapEZSimp()
    {
        org.sat4j.minisat.core.Solver $r0;
        org.sat4j.minisat.core.ISimplifier $r1;

        $r0 = staticinvoke <org.sat4j.minisat.SolverFactory: org.sat4j.minisat.core.Solver newMiniSATHeap()>();

        $r1 = $r0.<org.sat4j.minisat.core.Solver: org.sat4j.minisat.core.ISimplifier SIMPLE_SIMPLIFICATION>;

        virtualinvoke $r0.<org.sat4j.minisat.core.Solver: void setSimplifier(org.sat4j.minisat.core.ISimplifier)>($r1);

        return $r0;
    }

    public static org.sat4j.minisat.core.ICDCL newMiniSATHeapExpSimp()
    {
        org.sat4j.minisat.core.Solver $r0;
        org.sat4j.minisat.core.ISimplifier $r1;

        $r0 = staticinvoke <org.sat4j.minisat.SolverFactory: org.sat4j.minisat.core.Solver newMiniSATHeap()>();

        $r1 = $r0.<org.sat4j.minisat.core.Solver: org.sat4j.minisat.core.ISimplifier EXPENSIVE_SIMPLIFICATION>;

        virtualinvoke $r0.<org.sat4j.minisat.core.Solver: void setSimplifier(org.sat4j.minisat.core.ISimplifier)>($r1);

        return $r0;
    }

    public static org.sat4j.minisat.core.Solver newMiniSATHeap(org.sat4j.minisat.core.DataStructureFactory)
    {
        org.sat4j.minisat.restarts.MiniSATRestarts $r4;
        org.sat4j.minisat.core.DataStructureFactory r2, $r5;
        org.sat4j.minisat.core.Solver $r1;
        org.sat4j.minisat.learning.MiniSATLearning $r0;
        org.sat4j.minisat.orders.VarOrderHeap $r3;

        r2 := @parameter0: org.sat4j.minisat.core.DataStructureFactory;

        $r0 = new org.sat4j.minisat.learning.MiniSATLearning;

        specialinvoke $r0.<org.sat4j.minisat.learning.MiniSATLearning: void <init>()>();

        $r1 = new org.sat4j.minisat.core.Solver;

        $r3 = new org.sat4j.minisat.orders.VarOrderHeap;

        specialinvoke $r3.<org.sat4j.minisat.orders.VarOrderHeap: void <init>()>();

        $r4 = new org.sat4j.minisat.restarts.MiniSATRestarts;

        specialinvoke $r4.<org.sat4j.minisat.restarts.MiniSATRestarts: void <init>()>();

        specialinvoke $r1.<org.sat4j.minisat.core.Solver: void <init>(org.sat4j.minisat.core.LearningStrategy,org.sat4j.minisat.core.DataStructureFactory,org.sat4j.minisat.core.IOrder,org.sat4j.minisat.core.RestartStrategy)>($r0, r2, $r3, $r4);

        $r5 = virtualinvoke $r1.<org.sat4j.minisat.core.Solver: org.sat4j.minisat.core.DataStructureFactory getDSFactory()>();

        virtualinvoke $r0.<org.sat4j.minisat.learning.MiniSATLearning: void setDataStructureFactory(org.sat4j.minisat.core.DataStructureFactory)>($r5);

        virtualinvoke $r0.<org.sat4j.minisat.learning.MiniSATLearning: void setVarActivityListener(org.sat4j.minisat.core.VarActivityListener)>($r1);

        return $r1;
    }

    public static org.sat4j.minisat.core.ICDCL newBackjumping()
    {
        org.sat4j.minisat.constraints.MixedDataStructureDanielWL $r2;
        org.sat4j.minisat.restarts.MiniSATRestarts $r4;
        org.sat4j.minisat.learning.NoLearningButHeuristics $r0;
        org.sat4j.minisat.core.Solver $r1;
        org.sat4j.minisat.orders.VarOrderHeap $r3;

        $r0 = new org.sat4j.minisat.learning.NoLearningButHeuristics;

        specialinvoke $r0.<org.sat4j.minisat.learning.NoLearningButHeuristics: void <init>()>();

        $r1 = new org.sat4j.minisat.core.Solver;

        $r2 = new org.sat4j.minisat.constraints.MixedDataStructureDanielWL;

        specialinvoke $r2.<org.sat4j.minisat.constraints.MixedDataStructureDanielWL: void <init>()>();

        $r3 = new org.sat4j.minisat.orders.VarOrderHeap;

        specialinvoke $r3.<org.sat4j.minisat.orders.VarOrderHeap: void <init>()>();

        $r4 = new org.sat4j.minisat.restarts.MiniSATRestarts;

        specialinvoke $r4.<org.sat4j.minisat.restarts.MiniSATRestarts: void <init>()>();

        specialinvoke $r1.<org.sat4j.minisat.core.Solver: void <init>(org.sat4j.minisat.core.LearningStrategy,org.sat4j.minisat.core.DataStructureFactory,org.sat4j.minisat.core.IOrder,org.sat4j.minisat.core.RestartStrategy)>($r0, $r2, $r3, $r4);

        virtualinvoke $r0.<org.sat4j.minisat.learning.NoLearningButHeuristics: void setVarActivityListener(org.sat4j.minisat.core.VarActivityListener)>($r1);

        return $r1;
    }

    public static org.sat4j.specs.ISolver newMinOneSolver()
    {
        org.sat4j.opt.MinOneDecorator $r1;
        org.sat4j.tools.OptToSatAdapter $r0;
        org.sat4j.specs.ISolver $r2;

        $r0 = new org.sat4j.tools.OptToSatAdapter;

        $r1 = new org.sat4j.opt.MinOneDecorator;

        $r2 = staticinvoke <org.sat4j.minisat.SolverFactory: org.sat4j.specs.ISolver newDefault()>();

        specialinvoke $r1.<org.sat4j.opt.MinOneDecorator: void <init>(org.sat4j.specs.ISolver)>($r2);

        specialinvoke $r0.<org.sat4j.tools.OptToSatAdapter: void <init>(org.sat4j.specs.IOptimizationProblem)>($r1);

        return $r0;
    }

    public static org.sat4j.specs.ISolver newDefault()
    {
        org.sat4j.minisat.core.Solver $r0;

        $r0 = staticinvoke <org.sat4j.minisat.SolverFactory: org.sat4j.minisat.core.Solver newMiniLearningHeapRsatExpSimpBiere()>();

        return $r0;
    }

    public org.sat4j.specs.ISolver defaultSolver()
    {
        org.sat4j.minisat.SolverFactory r1;
        org.sat4j.specs.ISolver $r0;

        r1 := @this: org.sat4j.minisat.SolverFactory;

        $r0 = staticinvoke <org.sat4j.minisat.SolverFactory: org.sat4j.specs.ISolver newDefault()>();

        return $r0;
    }

    public static org.sat4j.specs.ISolver newLight()
    {
        org.sat4j.minisat.core.Solver $r0;

        $r0 = staticinvoke <org.sat4j.minisat.SolverFactory: org.sat4j.minisat.core.Solver newMiniLearningHeap()>();

        return $r0;
    }

    public org.sat4j.specs.ISolver lightSolver()
    {
        org.sat4j.minisat.SolverFactory r1;
        org.sat4j.specs.ISolver $r0;

        r1 := @this: org.sat4j.minisat.SolverFactory;

        $r0 = staticinvoke <org.sat4j.minisat.SolverFactory: org.sat4j.specs.ISolver newLight()>();

        return $r0;
    }

    public static org.sat4j.specs.ISolver newDimacsOutput()
    {
        org.sat4j.tools.DimacsOutputSolver $r0;

        $r0 = new org.sat4j.tools.DimacsOutputSolver;

        specialinvoke $r0.<org.sat4j.tools.DimacsOutputSolver: void <init>()>();

        return $r0;
    }

    public static void <clinit>()
    {
        <org.sat4j.minisat.SolverFactory: long serialVersionUID> = 1L;

        return;
    }
}
