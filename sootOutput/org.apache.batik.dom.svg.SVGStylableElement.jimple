public abstract class org.apache.batik.dom.svg.SVGStylableElement extends org.apache.batik.dom.svg.SVGOMElement implements org.apache.batik.css.engine.CSSStylableElement
{
    protected static org.apache.batik.util.DoublyIndexedTable xmlTraitInformation;
    protected org.apache.batik.css.engine.StyleMap computedStyleMap;
    protected org.apache.batik.dom.svg.SVGStylableElement$OverrideStyleDeclaration overrideStyleDeclaration;
    protected org.apache.batik.dom.svg.SVGOMAnimatedString className;
    protected org.apache.batik.dom.svg.SVGStylableElement$StyleDeclaration style;

    protected void <init>()
    {
        org.apache.batik.dom.svg.SVGStylableElement r0;

        r0 := @this: org.apache.batik.dom.svg.SVGStylableElement;

        specialinvoke r0.<org.apache.batik.dom.svg.SVGOMElement: void <init>()>();

        return;
    }

    protected void <init>(java.lang.String, org.apache.batik.dom.AbstractDocument)
    {
        org.apache.batik.dom.AbstractDocument r2;
        java.lang.String r1;
        org.apache.batik.dom.svg.SVGStylableElement r0;

        r0 := @this: org.apache.batik.dom.svg.SVGStylableElement;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.batik.dom.AbstractDocument;

        specialinvoke r0.<org.apache.batik.dom.svg.SVGOMElement: void <init>(java.lang.String,org.apache.batik.dom.AbstractDocument)>(r1, r2);

        specialinvoke r0.<org.apache.batik.dom.svg.SVGStylableElement: void initializeLiveAttributes()>();

        return;
    }

    protected void initializeAllLiveAttributes()
    {
        org.apache.batik.dom.svg.SVGStylableElement r0;

        r0 := @this: org.apache.batik.dom.svg.SVGStylableElement;

        specialinvoke r0.<org.apache.batik.dom.svg.SVGOMElement: void initializeAllLiveAttributes()>();

        specialinvoke r0.<org.apache.batik.dom.svg.SVGStylableElement: void initializeLiveAttributes()>();

        return;
    }

    private void initializeLiveAttributes()
    {
        org.apache.batik.dom.svg.SVGStylableElement r0;
        org.apache.batik.dom.svg.SVGOMAnimatedString $r1;

        r0 := @this: org.apache.batik.dom.svg.SVGStylableElement;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.svg.SVGOMElement: org.apache.batik.dom.svg.SVGOMAnimatedString createLiveAnimatedString(java.lang.String,java.lang.String)>(null, "class");

        r0.<org.apache.batik.dom.svg.SVGStylableElement: org.apache.batik.dom.svg.SVGOMAnimatedString className> = $r1;

        return;
    }

    public org.w3c.dom.css.CSSStyleDeclaration getOverrideStyle()
    {
        org.apache.batik.dom.svg.SVGStylableElement r0;
        org.w3c.dom.Document $r3;
        org.apache.batik.dom.svg.SVGStylableElement$OverrideStyleDeclaration $r1, $r2, $r6;
        org.apache.batik.css.engine.CSSEngine $r5;
        org.apache.batik.dom.svg.SVGOMDocument $r4;

        r0 := @this: org.apache.batik.dom.svg.SVGStylableElement;

        $r1 = r0.<org.apache.batik.dom.svg.SVGStylableElement: org.apache.batik.dom.svg.SVGStylableElement$OverrideStyleDeclaration overrideStyleDeclaration>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.Document getOwnerDocument()>();

        $r4 = (org.apache.batik.dom.svg.SVGOMDocument) $r3;

        $r5 = virtualinvoke $r4.<org.apache.batik.dom.AbstractStylableDocument: org.apache.batik.css.engine.CSSEngine getCSSEngine()>();

        $r6 = new org.apache.batik.dom.svg.SVGStylableElement$OverrideStyleDeclaration;

        specialinvoke $r6.<org.apache.batik.dom.svg.SVGStylableElement$OverrideStyleDeclaration: void <init>(org.apache.batik.dom.svg.SVGStylableElement,org.apache.batik.css.engine.CSSEngine)>(r0, $r5);

        r0.<org.apache.batik.dom.svg.SVGStylableElement: org.apache.batik.dom.svg.SVGStylableElement$OverrideStyleDeclaration overrideStyleDeclaration> = $r6;

     label1:
        $r2 = r0.<org.apache.batik.dom.svg.SVGStylableElement: org.apache.batik.dom.svg.SVGStylableElement$OverrideStyleDeclaration overrideStyleDeclaration>;

        return $r2;
    }

    public org.apache.batik.css.engine.StyleMap getComputedStyleMap(java.lang.String)
    {
        java.lang.String r2;
        org.apache.batik.dom.svg.SVGStylableElement r0;
        org.apache.batik.css.engine.StyleMap $r1;

        r0 := @this: org.apache.batik.dom.svg.SVGStylableElement;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.batik.dom.svg.SVGStylableElement: org.apache.batik.css.engine.StyleMap computedStyleMap>;

        return $r1;
    }

    public void setComputedStyleMap(java.lang.String, org.apache.batik.css.engine.StyleMap)
    {
        java.lang.String r2;
        org.apache.batik.dom.svg.SVGStylableElement r0;
        org.apache.batik.css.engine.StyleMap r1;

        r0 := @this: org.apache.batik.dom.svg.SVGStylableElement;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: org.apache.batik.css.engine.StyleMap;

        r0.<org.apache.batik.dom.svg.SVGStylableElement: org.apache.batik.css.engine.StyleMap computedStyleMap> = r1;

        return;
    }

    public java.lang.String getXMLId()
    {
        java.lang.String $r1;
        org.apache.batik.dom.svg.SVGStylableElement r0;

        r0 := @this: org.apache.batik.dom.svg.SVGStylableElement;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.AbstractElement: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "id");

        return $r1;
    }

    public java.lang.String getCSSClass()
    {
        java.lang.String $r1;
        org.apache.batik.dom.svg.SVGStylableElement r0;

        r0 := @this: org.apache.batik.dom.svg.SVGStylableElement;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.AbstractElement: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "class");

        return $r1;
    }

    public org.apache.batik.util.ParsedURL getCSSBase()
    {
        org.w3c.dom.Element $r1;
        org.apache.batik.dom.svg.SVGStylableElement r0;
        org.apache.batik.util.ParsedURL $r3;
        java.lang.String $r2;

        r0 := @this: org.apache.batik.dom.svg.SVGStylableElement;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.Element getXblBoundElement()>();

        if $r1 == null goto label1;

        return null;

     label1:
        $r2 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: java.lang.String getBaseURI()>();

        if $r2 != null goto label2;

        $r3 = null;

        goto label3;

     label2:
        $r3 = new org.apache.batik.util.ParsedURL;

        specialinvoke $r3.<org.apache.batik.util.ParsedURL: void <init>(java.lang.String)>($r2);

     label3:
        return $r3;
    }

    public boolean isPseudoInstanceOf(java.lang.String)
    {
        short $s0;
        org.apache.batik.dom.svg.SVGStylableElement r1;
        org.w3c.dom.Node r2;
        java.lang.String r0;
        boolean $z0, $z1;

        r1 := @this: org.apache.batik.dom.svg.SVGStylableElement;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("first-child");

        if $z0 == 0 goto label6;

        r2 = virtualinvoke r1.<org.apache.batik.dom.AbstractParentChildNode: org.w3c.dom.Node getPreviousSibling()>();

        goto label2;

     label1:
        r2 = interfaceinvoke r2.<org.w3c.dom.Node: org.w3c.dom.Node getPreviousSibling()>();

     label2:
        if r2 == null goto label3;

        $s0 = interfaceinvoke r2.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 != 1 goto label1;

     label3:
        if r2 != null goto label4;

        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        return $z1;

     label6:
        return 0;
    }

    public org.apache.batik.css.engine.StyleDeclarationProvider getOverrideStyleDeclarationProvider()
    {
        org.apache.batik.dom.svg.SVGStylableElement r0;
        org.apache.batik.css.engine.StyleDeclarationProvider $r2;
        org.w3c.dom.css.CSSStyleDeclaration $r1;

        r0 := @this: org.apache.batik.dom.svg.SVGStylableElement;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.svg.SVGStylableElement: org.w3c.dom.css.CSSStyleDeclaration getOverrideStyle()>();

        $r2 = (org.apache.batik.css.engine.StyleDeclarationProvider) $r1;

        return $r2;
    }

    public void updatePropertyValue(java.lang.String, org.apache.batik.anim.values.AnimatableValue)
    {
        org.apache.batik.dom.svg.SVGStylableElement r0;
        org.w3c.dom.css.CSSStyleDeclaration $r1;
        java.lang.String r3, $r4;
        org.apache.batik.anim.values.AnimatableValue r2;

        r0 := @this: org.apache.batik.dom.svg.SVGStylableElement;

        r3 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.batik.anim.values.AnimatableValue;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.svg.SVGStylableElement: org.w3c.dom.css.CSSStyleDeclaration getOverrideStyle()>();

        if r2 != null goto label1;

        interfaceinvoke $r1.<org.w3c.dom.css.CSSStyleDeclaration: java.lang.String removeProperty(java.lang.String)>(r3);

        goto label2;

     label1:
        $r4 = virtualinvoke r2.<org.apache.batik.anim.values.AnimatableValue: java.lang.String getCssText()>();

        interfaceinvoke $r1.<org.w3c.dom.css.CSSStyleDeclaration: void setProperty(java.lang.String,java.lang.String,java.lang.String)>(r3, $r4, "");

     label2:
        return;
    }

    public boolean useLinearRGBColorInterpolation()
    {
        org.apache.batik.dom.svg.SVGStylableElement r0;
        char $c0;
        org.apache.batik.css.engine.value.Value $r4;
        org.apache.batik.css.engine.CSSEngine $r3;
        org.apache.batik.dom.svg.SVGOMDocument $r2;
        org.w3c.dom.Document $r1;
        int $i1;
        java.lang.String $r5;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.svg.SVGStylableElement;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.Document getOwnerDocument()>();

        $r2 = (org.apache.batik.dom.svg.SVGOMDocument) $r1;

        $r3 = virtualinvoke $r2.<org.apache.batik.dom.AbstractStylableDocument: org.apache.batik.css.engine.CSSEngine getCSSEngine()>();

        $r4 = virtualinvoke $r3.<org.apache.batik.css.engine.CSSEngine: org.apache.batik.css.engine.value.Value getComputedStyle(org.apache.batik.css.engine.CSSStylableElement,java.lang.String,int)>(r0, null, 6);

        $r5 = interfaceinvoke $r4.<org.apache.batik.css.engine.value.Value: java.lang.String getStringValue()>();

        $c0 = virtualinvoke $r5.<java.lang.String: char charAt(int)>(0);

        $i1 = (int) $c0;

        if $i1 != 108 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void addTargetListener(java.lang.String, java.lang.String, boolean, org.apache.batik.dom.anim.AnimationTargetListener)
    {
        org.apache.batik.dom.svg.SVGStylableElement r0;
        org.apache.batik.dom.anim.AnimationTargetListener r3;
        org.apache.batik.dom.svg.SVGAnimationTargetContext $r6;
        org.apache.batik.dom.svg.SVGContext $r4, $r5;
        java.lang.String r1, r2;
        boolean z0;

        r0 := @this: org.apache.batik.dom.svg.SVGStylableElement;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        r3 := @parameter3: org.apache.batik.dom.anim.AnimationTargetListener;

        if z0 == 0 goto label1;

        $r4 = r0.<org.apache.batik.dom.svg.SVGOMElement: org.apache.batik.dom.svg.SVGContext svgContext>;

        if $r4 == null goto label1;

        $r5 = r0.<org.apache.batik.dom.svg.SVGOMElement: org.apache.batik.dom.svg.SVGContext svgContext>;

        $r6 = (org.apache.batik.dom.svg.SVGAnimationTargetContext) $r5;

        interfaceinvoke $r6.<org.apache.batik.dom.svg.SVGAnimationTargetContext: void addTargetListener(java.lang.String,org.apache.batik.dom.anim.AnimationTargetListener)>(r2, r3);

        goto label2;

     label1:
        specialinvoke r0.<org.apache.batik.dom.svg.SVGOMElement: void addTargetListener(java.lang.String,java.lang.String,boolean,org.apache.batik.dom.anim.AnimationTargetListener)>(r1, r2, z0, r3);

     label2:
        return;
    }

    public void removeTargetListener(java.lang.String, java.lang.String, boolean, org.apache.batik.dom.anim.AnimationTargetListener)
    {
        org.apache.batik.dom.svg.SVGAnimationTargetContext $r5;
        org.apache.batik.dom.svg.SVGContext $r4;
        org.apache.batik.dom.svg.SVGStylableElement r0;
        org.apache.batik.dom.anim.AnimationTargetListener r3;
        java.lang.String r1, r2;
        boolean z0;

        r0 := @this: org.apache.batik.dom.svg.SVGStylableElement;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        r3 := @parameter3: org.apache.batik.dom.anim.AnimationTargetListener;

        if z0 == 0 goto label1;

        $r4 = r0.<org.apache.batik.dom.svg.SVGOMElement: org.apache.batik.dom.svg.SVGContext svgContext>;

        $r5 = (org.apache.batik.dom.svg.SVGAnimationTargetContext) $r4;

        interfaceinvoke $r5.<org.apache.batik.dom.svg.SVGAnimationTargetContext: void removeTargetListener(java.lang.String,org.apache.batik.dom.anim.AnimationTargetListener)>(r2, r3);

        goto label2;

     label1:
        specialinvoke r0.<org.apache.batik.dom.svg.SVGOMElement: void removeTargetListener(java.lang.String,java.lang.String,boolean,org.apache.batik.dom.anim.AnimationTargetListener)>(r1, r2, z0, r3);

     label2:
        return;
    }

    public org.w3c.dom.css.CSSStyleDeclaration getStyle()
    {
        org.apache.batik.dom.svg.SVGStylableElement r0;
        org.apache.batik.css.engine.CSSEngine $r5;
        org.apache.batik.dom.svg.SVGOMDocument $r4;
        org.w3c.dom.Document $r3;
        org.apache.batik.dom.svg.SVGStylableElement$StyleDeclaration $r1, $r2, $r6, $r7;

        r0 := @this: org.apache.batik.dom.svg.SVGStylableElement;

        $r1 = r0.<org.apache.batik.dom.svg.SVGStylableElement: org.apache.batik.dom.svg.SVGStylableElement$StyleDeclaration style>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.Document getOwnerDocument()>();

        $r4 = (org.apache.batik.dom.svg.SVGOMDocument) $r3;

        $r5 = virtualinvoke $r4.<org.apache.batik.dom.AbstractStylableDocument: org.apache.batik.css.engine.CSSEngine getCSSEngine()>();

        $r6 = new org.apache.batik.dom.svg.SVGStylableElement$StyleDeclaration;

        specialinvoke $r6.<org.apache.batik.dom.svg.SVGStylableElement$StyleDeclaration: void <init>(org.apache.batik.dom.svg.SVGStylableElement,org.apache.batik.css.engine.CSSEngine)>(r0, $r5);

        r0.<org.apache.batik.dom.svg.SVGStylableElement: org.apache.batik.dom.svg.SVGStylableElement$StyleDeclaration style> = $r6;

        $r7 = r0.<org.apache.batik.dom.svg.SVGStylableElement: org.apache.batik.dom.svg.SVGStylableElement$StyleDeclaration style>;

        virtualinvoke r0.<org.apache.batik.dom.svg.AbstractElement: void putLiveAttributeValue(java.lang.String,java.lang.String,org.apache.batik.dom.svg.LiveAttributeValue)>(null, "style", $r7);

     label1:
        $r2 = r0.<org.apache.batik.dom.svg.SVGStylableElement: org.apache.batik.dom.svg.SVGStylableElement$StyleDeclaration style>;

        return $r2;
    }

    public org.w3c.dom.css.CSSValue getPresentationAttribute(java.lang.String)
    {
        org.apache.batik.dom.svg.SVGStylableElement$PresentationAttributeValue $r22;
        org.w3c.dom.css.CSSValue r15;
        org.apache.batik.css.engine.CSSEngine $r5;
        org.w3c.dom.Document $r3;
        int $i0, $i1, $i3;
        org.apache.batik.dom.svg.LiveAttributeValue $r2, $r16;
        java.lang.String r1, $r17;
        boolean $z0, $z1;
        org.apache.batik.dom.svg.SVGStylableElement$PresentationAttributeColorValue $r19, $r21;
        org.apache.batik.dom.svg.SVGStylableElement r0;
        org.apache.batik.dom.svg.SVGStylableElement$PresentationAttributePaintValue $r18, $r20;
        org.apache.batik.css.engine.value.ValueManager[] $r9, $r11;
        org.apache.batik.dom.svg.SVGOMDocument $r4;
        org.apache.batik.css.engine.value.ValueManager $r10, $r12;

        r0 := @this: org.apache.batik.dom.svg.SVGStylableElement;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.batik.dom.svg.AbstractElement: org.apache.batik.dom.svg.LiveAttributeValue getLiveAttributeValue(java.lang.String,java.lang.String)>(null, r1);

        r15 = (org.w3c.dom.css.CSSValue) $r2;

        if r15 == null goto label1;

        return r15;

     label1:
        $r3 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.Document getOwnerDocument()>();

        $r4 = (org.apache.batik.dom.svg.SVGOMDocument) $r3;

        $r5 = virtualinvoke $r4.<org.apache.batik.dom.AbstractStylableDocument: org.apache.batik.css.engine.CSSEngine getCSSEngine()>();

        $i0 = virtualinvoke $r5.<org.apache.batik.css.engine.CSSEngine: int getPropertyIndex(java.lang.String)>(r1);

        $i3 = (int) -1;

        if $i0 != $i3 goto label2;

        return null;

     label2:
        if $i0 <= 59 goto label4;

        $r9 = virtualinvoke $r5.<org.apache.batik.css.engine.CSSEngine: org.apache.batik.css.engine.value.ValueManager[] getValueManagers()>();

        $r10 = $r9[$i0];

        $z0 = $r10 instanceof org.apache.batik.css.engine.value.svg.SVGPaintManager;

        if $z0 == 0 goto label3;

        $r18 = new org.apache.batik.dom.svg.SVGStylableElement$PresentationAttributePaintValue;

        specialinvoke $r18.<org.apache.batik.dom.svg.SVGStylableElement$PresentationAttributePaintValue: void <init>(org.apache.batik.dom.svg.SVGStylableElement,org.apache.batik.css.engine.CSSEngine,java.lang.String)>(r0, $r5, r1);

        r15 = $r18;

     label3:
        $r11 = virtualinvoke $r5.<org.apache.batik.css.engine.CSSEngine: org.apache.batik.css.engine.value.ValueManager[] getValueManagers()>();

        $r12 = $r11[$i0];

        $z1 = $r12 instanceof org.apache.batik.css.engine.value.svg.SVGColorManager;

        if $z1 == 0 goto label8;

        $r19 = new org.apache.batik.dom.svg.SVGStylableElement$PresentationAttributeColorValue;

        specialinvoke $r19.<org.apache.batik.dom.svg.SVGStylableElement$PresentationAttributeColorValue: void <init>(org.apache.batik.dom.svg.SVGStylableElement,org.apache.batik.css.engine.CSSEngine,java.lang.String)>(r0, $r5, r1);

        r15 = $r19;

        goto label8;

     label4:
        lookupswitch($i0)
        {
            case 15: goto label5;
            case 19: goto label6;
            case 33: goto label6;
            case 43: goto label6;
            case 45: goto label5;
            default: goto label7;
        };

     label5:
        $r20 = new org.apache.batik.dom.svg.SVGStylableElement$PresentationAttributePaintValue;

        specialinvoke $r20.<org.apache.batik.dom.svg.SVGStylableElement$PresentationAttributePaintValue: void <init>(org.apache.batik.dom.svg.SVGStylableElement,org.apache.batik.css.engine.CSSEngine,java.lang.String)>(r0, $r5, r1);

        r15 = $r20;

        goto label8;

     label6:
        $r21 = new org.apache.batik.dom.svg.SVGStylableElement$PresentationAttributeColorValue;

        specialinvoke $r21.<org.apache.batik.dom.svg.SVGStylableElement$PresentationAttributeColorValue: void <init>(org.apache.batik.dom.svg.SVGStylableElement,org.apache.batik.css.engine.CSSEngine,java.lang.String)>(r0, $r5, r1);

        r15 = $r21;

        goto label8;

     label7:
        $r22 = new org.apache.batik.dom.svg.SVGStylableElement$PresentationAttributeValue;

        specialinvoke $r22.<org.apache.batik.dom.svg.SVGStylableElement$PresentationAttributeValue: void <init>(org.apache.batik.dom.svg.SVGStylableElement,org.apache.batik.css.engine.CSSEngine,java.lang.String)>(r0, $r5, r1);

        r15 = $r22;

     label8:
        $r16 = (org.apache.batik.dom.svg.LiveAttributeValue) r15;

        virtualinvoke r0.<org.apache.batik.dom.svg.AbstractElement: void putLiveAttributeValue(java.lang.String,java.lang.String,org.apache.batik.dom.svg.LiveAttributeValue)>(null, r1, $r16);

        $r17 = virtualinvoke r0.<org.apache.batik.dom.AbstractElement: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, r1);

        $i1 = virtualinvoke $r17.<java.lang.String: int length()>();

        if $i1 != 0 goto label9;

        return null;

     label9:
        return r15;
    }

    public org.w3c.dom.svg.SVGAnimatedString getClassName()
    {
        org.apache.batik.dom.svg.SVGStylableElement r0;
        org.apache.batik.dom.svg.SVGOMAnimatedString $r1;

        r0 := @this: org.apache.batik.dom.svg.SVGStylableElement;

        $r1 = r0.<org.apache.batik.dom.svg.SVGStylableElement: org.apache.batik.dom.svg.SVGOMAnimatedString className>;

        return $r1;
    }

    protected org.apache.batik.util.DoublyIndexedTable getTraitInformationTable()
    {
        org.apache.batik.util.DoublyIndexedTable $r0;
        org.apache.batik.dom.svg.SVGStylableElement r1;

        r1 := @this: org.apache.batik.dom.svg.SVGStylableElement;

        $r0 = <org.apache.batik.dom.svg.SVGStylableElement: org.apache.batik.util.DoublyIndexedTable xmlTraitInformation>;

        return $r0;
    }

    static org.apache.batik.dom.AbstractDocument access$301(org.apache.batik.dom.svg.SVGStylableElement)
    {
        org.apache.batik.dom.AbstractDocument $r1;
        org.apache.batik.dom.svg.SVGStylableElement r0;

        r0 := @parameter0: org.apache.batik.dom.svg.SVGStylableElement;

        $r1 = r0.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.AbstractDocument ownerDocument>;

        return $r1;
    }

    static org.apache.batik.dom.AbstractDocument access$401(org.apache.batik.dom.svg.SVGStylableElement)
    {
        org.apache.batik.dom.AbstractDocument $r1;
        org.apache.batik.dom.svg.SVGStylableElement r0;

        r0 := @parameter0: org.apache.batik.dom.svg.SVGStylableElement;

        $r1 = r0.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.AbstractDocument ownerDocument>;

        return $r1;
    }

    static org.apache.batik.dom.AbstractDocument access$501(org.apache.batik.dom.svg.SVGStylableElement)
    {
        org.apache.batik.dom.AbstractDocument $r1;
        org.apache.batik.dom.svg.SVGStylableElement r0;

        r0 := @parameter0: org.apache.batik.dom.svg.SVGStylableElement;

        $r1 = r0.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.AbstractDocument ownerDocument>;

        return $r1;
    }

    static void <clinit>()
    {
        org.apache.batik.util.DoublyIndexedTable $r0, $r1;
        org.apache.batik.dom.svg.TraitInformation $r2;

        $r0 = new org.apache.batik.util.DoublyIndexedTable;

        $r1 = <org.apache.batik.dom.svg.SVGOMElement: org.apache.batik.util.DoublyIndexedTable xmlTraitInformation>;

        specialinvoke $r0.<org.apache.batik.util.DoublyIndexedTable: void <init>(org.apache.batik.util.DoublyIndexedTable)>($r1);

        $r2 = new org.apache.batik.dom.svg.TraitInformation;

        specialinvoke $r2.<org.apache.batik.dom.svg.TraitInformation: void <init>(boolean,int)>(1, 16);

        virtualinvoke $r0.<org.apache.batik.util.DoublyIndexedTable: java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object)>(null, "class", $r2);

        <org.apache.batik.dom.svg.SVGStylableElement: org.apache.batik.util.DoublyIndexedTable xmlTraitInformation> = $r0;

        return;
    }
}
