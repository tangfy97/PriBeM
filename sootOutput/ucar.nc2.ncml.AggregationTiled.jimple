public class ucar.nc2.ncml.AggregationTiled extends ucar.nc2.ncml.Aggregation implements ucar.nc2.ProxyReader
{
    private java.util.List dimNames;
    private java.util.List dims;
    private ucar.ma2.Section section;
    private boolean debug;
    static final boolean $assertionsDisabled;

    public void <init>(ucar.nc2.dataset.NetcdfDataset, java.lang.String, java.lang.String)
    {
        java.util.ArrayList $r5, $r6;
        ucar.nc2.ncml.Aggregation$Type $r4;
        java.util.List $r8;
        java.util.StringTokenizer $r7;
        ucar.nc2.ncml.AggregationTiled r0;
        java.lang.String r2, r3, $r9;
        ucar.nc2.dataset.NetcdfDataset r1;
        boolean $z0;

        r0 := @this: ucar.nc2.ncml.AggregationTiled;

        r1 := @parameter0: ucar.nc2.dataset.NetcdfDataset;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r4 = <ucar.nc2.ncml.Aggregation$Type: ucar.nc2.ncml.Aggregation$Type tiled>;

        specialinvoke r0.<ucar.nc2.ncml.Aggregation: void <init>(ucar.nc2.dataset.NetcdfDataset,java.lang.String,ucar.nc2.ncml.Aggregation$Type,java.lang.String)>(r1, r2, $r4, r3);

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<ucar.nc2.ncml.AggregationTiled: java.util.List dimNames> = $r5;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r0.<ucar.nc2.ncml.AggregationTiled: java.util.List dims> = $r6;

        r0.<ucar.nc2.ncml.AggregationTiled: boolean debug> = 0;

        $r7 = new java.util.StringTokenizer;

        specialinvoke $r7.<java.util.StringTokenizer: void <init>(java.lang.String)>(r2);

     label1:
        $z0 = virtualinvoke $r7.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label2;

        $r8 = r0.<ucar.nc2.ncml.AggregationTiled: java.util.List dimNames>;

        $r9 = virtualinvoke $r7.<java.util.StringTokenizer: java.lang.String nextToken()>();

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r9);

        goto label1;

     label2:
        return;
    }

    protected void buildNetcdfDataset(ucar.nc2.util.CancelTask) throws java.io.IOException
    {
        ucar.nc2.ncml.Aggregation$Dataset $r1, r55;
        ucar.nc2.util.CancelTask r17;
        ucar.nc2.Group $r19, $r20, $r43;
        ucar.nc2.ncml.AggregationTiled$DatasetTiled r56;
        java.lang.StringBuilder $r46, $r47, $r48;
        ucar.ma2.Section $r10, $r38, $r39, $r40, r54, $r57;
        java.lang.AssertionError $r31, $r32, $r34, $r35;
        java.lang.String $r23, $r25, $r26, $r49, r53;
        ucar.ma2.InvalidRangeException $r51;
        ucar.nc2.Dimension $r44, r60;
        ucar.nc2.dataset.NetcdfDataset $r3, $r15, $r18, $r22, $r42;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        ucar.ma2.Range r58, r59;
        ucar.nc2.dataset.VariableDS $r21;
        ucar.ma2.DataType $r24;
        java.util.List $r4, $r6, $r8, $r11, $r13, $r28, $r33, $r37, $r50;
        ucar.nc2.NetcdfFile $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6;
        ucar.nc2.ncml.AggregationTiled r0;
        ucar.nc2.Variable r61;
        java.util.Iterator $r5, $r7, $r9, $r12, $r14;
        java.lang.IllegalArgumentException $r45, $r52;
        java.lang.Object $r16, $r27, $r29, $r30, $r36, $r41;

        r0 := @this: ucar.nc2.ncml.AggregationTiled;

        r17 := @parameter0: ucar.nc2.util.CancelTask;

        $r1 = virtualinvoke r0.<ucar.nc2.ncml.AggregationTiled: ucar.nc2.ncml.Aggregation$Dataset getTypicalDataset()>();

        $r2 = virtualinvoke $r1.<ucar.nc2.ncml.Aggregation$Dataset: ucar.nc2.NetcdfFile acquireFile(ucar.nc2.util.CancelTask)>(null);

        $r3 = r0.<ucar.nc2.ncml.AggregationTiled: ucar.nc2.dataset.NetcdfDataset ncDataset>;

        staticinvoke <ucar.nc2.dataset.DatasetConstructor: void transferDataset(ucar.nc2.NetcdfFile,ucar.nc2.dataset.NetcdfDataset,ucar.nc2.dataset.ReplaceVariableCheck)>($r2, $r3, null);

        $r4 = r0.<ucar.nc2.ncml.AggregationTiled: java.util.List dimNames>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label04;

        $r41 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r53 = (java.lang.String) $r41;

        $r42 = r0.<ucar.nc2.ncml.AggregationTiled: ucar.nc2.dataset.NetcdfDataset ncDataset>;

        $r43 = virtualinvoke $r42.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Group getRootGroup()>();

        $r44 = virtualinvoke $r43.<ucar.nc2.Group: ucar.nc2.Dimension findDimension(java.lang.String)>(r53);

        if null == $r44 goto label02;

        $r50 = r0.<ucar.nc2.ncml.AggregationTiled: java.util.List dims>;

        interfaceinvoke $r50.<java.util.List: boolean add(java.lang.Object)>($r44);

        goto label03;

     label02:
        $r45 = new java.lang.IllegalArgumentException;

        $r46 = new java.lang.StringBuilder;

        specialinvoke $r46.<java.lang.StringBuilder: void <init>()>();

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown dimension = ");

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r53);

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r45.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r49);

        throw $r45;

     label03:
        goto label01;

     label04:
        r54 = null;

        $r6 = r0.<ucar.nc2.ncml.AggregationTiled: java.util.List datasets>;

        $r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label12;

        $r36 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r55 = (ucar.nc2.ncml.Aggregation$Dataset) $r36;

        r56 = (ucar.nc2.ncml.AggregationTiled$DatasetTiled) r55;

     label06:
        $r38 = r56.<ucar.nc2.ncml.AggregationTiled$DatasetTiled: ucar.ma2.Section section>;

        $r37 = r0.<ucar.nc2.ncml.AggregationTiled: java.util.List dimNames>;

        $r39 = virtualinvoke $r38.<ucar.ma2.Section: ucar.ma2.Section addRangeNames(java.util.List)>($r37);

        r56.<ucar.nc2.ncml.AggregationTiled$DatasetTiled: ucar.ma2.Section section> = $r39;

        if r54 != null goto label07;

        $r57 = r56.<ucar.nc2.ncml.AggregationTiled$DatasetTiled: ucar.ma2.Section section>;

        goto label08;

     label07:
        $r40 = r56.<ucar.nc2.ncml.AggregationTiled$DatasetTiled: ucar.ma2.Section section>;

        $r57 = virtualinvoke r54.<ucar.ma2.Section: ucar.ma2.Section union(ucar.ma2.Section)>($r40);

     label08:
        r54 = $r57;

     label09:
        goto label11;

     label10:
        $r51 := @caughtexception;

        $r52 = new java.lang.IllegalArgumentException;

        specialinvoke $r52.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r51);

        throw $r52;

     label11:
        goto label05;

     label12:
        $z2 = <ucar.nc2.ncml.AggregationTiled: boolean $assertionsDisabled>;

        if $z2 != 0 goto label13;

        if r54 != null goto label13;

        $r35 = new java.lang.AssertionError;

        specialinvoke $r35.<java.lang.AssertionError: void <init>()>();

        throw $r35;

     label13:
        $z3 = <ucar.nc2.ncml.AggregationTiled: boolean $assertionsDisabled>;

        if $z3 != 0 goto label14;

        $i4 = virtualinvoke r54.<ucar.ma2.Section: int getRank()>();

        $r33 = r0.<ucar.nc2.ncml.AggregationTiled: java.util.List dims>;

        $i5 = interfaceinvoke $r33.<java.util.List: int size()>();

        if $i4 == $i5 goto label14;

        $r34 = new java.lang.AssertionError;

        specialinvoke $r34.<java.lang.AssertionError: void <init>()>();

        throw $r34;

     label14:
        $r8 = virtualinvoke r54.<ucar.ma2.Section: java.util.List getRanges()>();

        $r9 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label15:
        $z10 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z10 == 0 goto label18;

        $r30 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r58 = (ucar.ma2.Range) $r30;

        $z8 = <ucar.nc2.ncml.AggregationTiled: boolean $assertionsDisabled>;

        if $z8 != 0 goto label16;

        $i3 = virtualinvoke r58.<ucar.ma2.Range: int first()>();

        if $i3 == 0 goto label16;

        $r32 = new java.lang.AssertionError;

        specialinvoke $r32.<java.lang.AssertionError: void <init>()>();

        throw $r32;

     label16:
        $z9 = <ucar.nc2.ncml.AggregationTiled: boolean $assertionsDisabled>;

        if $z9 != 0 goto label17;

        $i2 = virtualinvoke r58.<ucar.ma2.Range: int stride()>();

        if $i2 == 1 goto label17;

        $r31 = new java.lang.AssertionError;

        specialinvoke $r31.<java.lang.AssertionError: void <init>()>();

        throw $r31;

     label17:
        goto label15;

     label18:
        r0.<ucar.nc2.ncml.AggregationTiled: ucar.ma2.Section section> = r54;

        i6 = 0;

        $r10 = r0.<ucar.nc2.ncml.AggregationTiled: ucar.ma2.Section section>;

        $r11 = virtualinvoke $r10.<ucar.ma2.Section: java.util.List getRanges()>();

        $r12 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();

     label19:
        $z4 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label20;

        $r27 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r59 = (ucar.ma2.Range) $r27;

        $r28 = r0.<ucar.nc2.ncml.AggregationTiled: java.util.List dims>;

        $i0 = i6;

        i6 = i6 + 1;

        $r29 = interfaceinvoke $r28.<java.util.List: java.lang.Object get(int)>($i0);

        r60 = (ucar.nc2.Dimension) $r29;

        $i1 = virtualinvoke r59.<ucar.ma2.Range: int length()>();

        virtualinvoke r60.<ucar.nc2.Dimension: void setLength(int)>($i1);

        goto label19;

     label20:
        $r13 = virtualinvoke $r2.<ucar.nc2.NetcdfFile: java.util.List getVariables()>();

        $r14 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>();

     label21:
        $z5 = interfaceinvoke $r14.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label24;

        $r16 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>();

        r61 = (ucar.nc2.Variable) $r16;

        $z6 = specialinvoke r0.<ucar.nc2.ncml.AggregationTiled: boolean isTiled(ucar.nc2.Variable)>(r61);

        if $z6 == 0 goto label22;

        $r18 = r0.<ucar.nc2.ncml.AggregationTiled: ucar.nc2.dataset.NetcdfDataset ncDataset>;

        $r19 = virtualinvoke r61.<ucar.nc2.Variable: ucar.nc2.Group getParentGroup()>();

        $r20 = staticinvoke <ucar.nc2.dataset.DatasetConstructor: ucar.nc2.Group findGroup(ucar.nc2.NetcdfFile,ucar.nc2.Group)>($r18, $r19);

        $r21 = new ucar.nc2.dataset.VariableDS;

        $r22 = r0.<ucar.nc2.ncml.AggregationTiled: ucar.nc2.dataset.NetcdfDataset ncDataset>;

        $r23 = virtualinvoke r61.<ucar.nc2.Variable: java.lang.String getShortName()>();

        $r24 = virtualinvoke r61.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r25 = virtualinvoke r61.<ucar.nc2.Variable: java.lang.String getDimensionsString()>();

        specialinvoke $r21.<ucar.nc2.dataset.VariableDS: void <init>(ucar.nc2.dataset.NetcdfDataset,ucar.nc2.Group,ucar.nc2.Structure,java.lang.String,ucar.ma2.DataType,java.lang.String,java.lang.String,java.lang.String)>($r22, $r20, null, $r23, $r24, $r25, null, null);

        virtualinvoke $r21.<ucar.nc2.dataset.VariableDS: void setProxyReader(ucar.nc2.ProxyReader)>(r0);

        staticinvoke <ucar.nc2.dataset.DatasetConstructor: void transferVariableAttributes(ucar.nc2.Variable,ucar.nc2.Variable)>(r61, $r21);

        $r26 = virtualinvoke r61.<ucar.nc2.Variable: java.lang.String getShortName()>();

        virtualinvoke $r20.<ucar.nc2.Group: boolean removeVariable(java.lang.String)>($r26);

        virtualinvoke $r20.<ucar.nc2.Group: void addVariable(ucar.nc2.Variable)>($r21);

     label22:
        if r17 == null goto label23;

        $z7 = interfaceinvoke r17.<ucar.nc2.util.CancelTask: boolean isCancel()>();

        if $z7 == 0 goto label23;

        return;

     label23:
        goto label21;

     label24:
        $r15 = r0.<ucar.nc2.ncml.AggregationTiled: ucar.nc2.dataset.NetcdfDataset ncDataset>;

        virtualinvoke r0.<ucar.nc2.ncml.AggregationTiled: void setDatasetAcquireProxy(ucar.nc2.ncml.Aggregation$Dataset,ucar.nc2.dataset.NetcdfDataset)>($r1, $r15);

        virtualinvoke $r1.<ucar.nc2.ncml.Aggregation$Dataset: void close(ucar.nc2.NetcdfFile)>($r2);

        return;

        catch ucar.ma2.InvalidRangeException from label06 to label09 with label10;
    }

    private boolean isTiled(ucar.nc2.Variable)
    {
        ucar.ma2.Section $r6;
        ucar.nc2.Variable r0;
        ucar.nc2.ncml.AggregationTiled r5;
        java.lang.String $r11, $r12;
        boolean $z0, $z1, $z2;
        ucar.ma2.Range r10;
        java.util.Iterator $r2, $r8;
        java.util.List $r1, $r7;
        java.lang.Object $r3, $r9;
        ucar.nc2.Dimension r4;

        r5 := @this: ucar.nc2.ncml.AggregationTiled;

        r0 := @parameter0: ucar.nc2.Variable;

        $r1 = virtualinvoke r0.<ucar.nc2.Variable: java.util.List getDimensions()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (ucar.nc2.Dimension) $r3;

        $r6 = r5.<ucar.nc2.ncml.AggregationTiled: ucar.ma2.Section section>;

        $r7 = virtualinvoke $r6.<ucar.ma2.Section: java.util.List getRanges()>();

        $r8 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (ucar.ma2.Range) $r9;

        $r11 = virtualinvoke r4.<ucar.nc2.Dimension: java.lang.String getName()>();

        $r12 = virtualinvoke r10.<ucar.ma2.Range: java.lang.String getName()>();

        $z2 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z2 == 0 goto label3;

        return 1;

     label3:
        goto label2;

     label4:
        goto label1;

     label5:
        return 0;
    }

    protected void rebuildDataset() throws java.io.IOException
    {
        ucar.nc2.ncml.AggregationTiled r0;
        ucar.nc2.dataset.NetcdfDataset $r1;
        java.util.ArrayList $r2;

        r0 := @this: ucar.nc2.ncml.AggregationTiled;

        $r1 = r0.<ucar.nc2.ncml.AggregationTiled: ucar.nc2.dataset.NetcdfDataset ncDataset>;

        virtualinvoke $r1.<ucar.nc2.dataset.NetcdfDataset: void empty()>();

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<ucar.nc2.ncml.AggregationTiled: java.util.List dims> = $r2;

        virtualinvoke r0.<ucar.nc2.ncml.AggregationTiled: void buildNetcdfDataset(ucar.nc2.util.CancelTask)>(null);

        return;
    }

    public ucar.ma2.Array reallyRead(ucar.nc2.Variable, ucar.nc2.util.CancelTask) throws java.io.IOException
    {
        ucar.nc2.ncml.Aggregation$Dataset r8;
        ucar.nc2.util.CancelTask r11;
        byte $b2;
        int[] $r1, $r18;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        ucar.nc2.dataset.VariableDS $r29;
        ucar.ma2.DataType $r36;
        java.util.List $r5;
        ucar.nc2.ncml.AggregationTiled$DatasetTiled r9;
        java.lang.StringBuilder $r14, $r16, $r19, $r21, $r23, $r24, $r25, $r27;
        ucar.ma2.Section $r3, $r10, $r17;
        long $l0, $l1;
        int $i3, $i4, $i5;
        ucar.nc2.Variable r0;
        ucar.nc2.ncml.AggregationTiled r4;
        java.lang.String $r20, $r26, $r28, $r32, $r35;
        java.io.PrintStream $r15, $r22, $r31;
        java.util.Iterator $r6;
        java.lang.RuntimeException $r30;
        java.lang.IllegalArgumentException $r34;
        ucar.ma2.Array $r2, $r12;
        ucar.ma2.InvalidRangeException $r33;
        java.lang.Object $r7;
        ucar.nc2.ncml.AggregationTiled$TileLayout $r13;

        r4 := @this: ucar.nc2.ncml.AggregationTiled;

        r0 := @parameter0: ucar.nc2.Variable;

        r11 := @parameter1: ucar.nc2.util.CancelTask;

        $z0 = r0 instanceof ucar.nc2.dataset.VariableDS;

        if $z0 == 0 goto label01;

        $r29 = (ucar.nc2.dataset.VariableDS) r0;

        $r36 = virtualinvoke $r29.<ucar.nc2.dataset.VariableDS: ucar.ma2.DataType getOriginalDataType()>();

        goto label02;

     label01:
        $r36 = virtualinvoke r0.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

     label02:
        $r1 = virtualinvoke r0.<ucar.nc2.Variable: int[] getShape()>();

        $r2 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(ucar.ma2.DataType,int[])>($r36, $r1);

        $r3 = virtualinvoke r0.<ucar.nc2.Variable: ucar.ma2.Section getShapeAsSection()>();

        $z1 = r4.<ucar.nc2.ncml.AggregationTiled: boolean debug>;

        if $z1 == 0 goto label03;

        $r22 = <java.lang.System: java.io.PrintStream out>;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("wantSection: ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for var ");

        $r26 = virtualinvoke r0.<ucar.nc2.Variable: java.lang.String getName()>();

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r22.<java.io.PrintStream: void println(java.lang.String)>($r28);

     label03:
        $r5 = virtualinvoke r4.<ucar.nc2.ncml.AggregationTiled: java.util.List getDatasets()>();

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z5 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label15;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (ucar.nc2.ncml.Aggregation$Dataset) $r7;

        r9 = (ucar.nc2.ncml.AggregationTiled$DatasetTiled) r8;

        $r10 = virtualinvoke r9.<ucar.nc2.ncml.AggregationTiled$DatasetTiled: ucar.ma2.Section makeVarSection(ucar.nc2.Variable)>(r0);

     label05:
        $r12 = virtualinvoke r9.<ucar.nc2.ncml.AggregationTiled$DatasetTiled: ucar.ma2.Array read(ucar.nc2.Variable,ucar.nc2.util.CancelTask)>(r0, r11);

        $r13 = new ucar.nc2.ncml.AggregationTiled$TileLayout;

        specialinvoke $r13.<ucar.nc2.ncml.AggregationTiled$TileLayout: void <init>(ucar.nc2.ncml.AggregationTiled,ucar.ma2.Section,ucar.ma2.Section)>(r4, $r10, $r3);

        $z2 = r4.<ucar.nc2.ncml.AggregationTiled: boolean debug>;

        if $z2 == 0 goto label06;

        $r15 = <java.lang.System: java.io.PrintStream out>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" varData read: ");

        $r17 = new ucar.ma2.Section;

        $r18 = virtualinvoke $r12.<ucar.ma2.Array: int[] getShape()>();

        specialinvoke $r17.<ucar.ma2.Section: void <init>(int[])>($r18);

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r17);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>($r20);

     label06:
        goto label08;

     label07:
        $r33 := @caughtexception;

        $r34 = new java.lang.IllegalArgumentException;

        $r35 = virtualinvoke $r33.<ucar.ma2.InvalidRangeException: java.lang.String getMessage()>();

        specialinvoke $r34.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r35);

        throw $r34;

     label08:
        $z3 = virtualinvoke $r13.<ucar.nc2.ncml.AggregationTiled$TileLayout: boolean hasNext()>();

        if $z3 == 0 goto label12;

     label09:
        $i3 = staticinvoke <ucar.nc2.ncml.AggregationTiled$TileLayout: int access$000(ucar.nc2.ncml.AggregationTiled$TileLayout)>($r13);

        $i4 = staticinvoke <ucar.nc2.ncml.AggregationTiled$TileLayout: int access$100(ucar.nc2.ncml.AggregationTiled$TileLayout)>($r13);

        $i5 = staticinvoke <ucar.nc2.ncml.AggregationTiled$TileLayout: int access$200(ucar.nc2.ncml.AggregationTiled$TileLayout)>($r13);

        staticinvoke <ucar.ma2.Array: void arraycopy(ucar.ma2.Array,int,ucar.ma2.Array,int,int)>($r12, $i3, $r2, $i4, $i5);

     label10:
        goto label08;

     label11:
        $r30 := @caughtexception;

        $r31 = <java.lang.System: java.io.PrintStream out>;

        $r32 = virtualinvoke $r13.<ucar.nc2.ncml.AggregationTiled$TileLayout: java.lang.String toString()>();

        virtualinvoke $r31.<java.io.PrintStream: void println(java.lang.String)>($r32);

        throw $r30;

     label12:
        $l0 = virtualinvoke $r12.<ucar.ma2.Array: long getSize()>();

        $l1 = virtualinvoke r0.<ucar.nc2.Variable: long getSize()>();

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label13;

        goto label15;

     label13:
        if r11 == null goto label14;

        $z4 = interfaceinvoke r11.<ucar.nc2.util.CancelTask: boolean isCancel()>();

        if $z4 == 0 goto label14;

        return null;

     label14:
        goto label04;

     label15:
        return $r2;

        catch ucar.ma2.InvalidRangeException from label05 to label06 with label07;
        catch java.lang.RuntimeException from label09 to label10 with label11;
    }

    public ucar.ma2.Array reallyRead(ucar.nc2.Variable, ucar.ma2.Section, ucar.nc2.util.CancelTask) throws java.io.IOException
    {
        ucar.nc2.ncml.Aggregation$Dataset r8;
        ucar.nc2.util.CancelTask r13;
        byte $b2, $b5;
        ucar.nc2.ncml.AggregationTiled$DatasetTiled r9;
        java.lang.StringBuilder $r17, $r19, $r20, $r22, $r24, $r25, $r26, $r28, $r30, $r32, $r33, $r36, $r41, $r43, $r44;
        ucar.ma2.Section r0, $r10, $r11, $r12, $r34;
        long $l0, $l1, $l3, $l4;
        java.lang.String $r21, $r27, $r29, $r37, $r45, $r47, $r50;
        java.lang.RuntimeException $r40;
        ucar.ma2.Array $r3, $r15, $r39;
        ucar.ma2.InvalidRangeException $r48;
        int[] $r2, $r35;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        ucar.nc2.dataset.VariableDS $r38;
        ucar.ma2.DataType $r51;
        java.util.List $r5, $r14;
        int $i6, $i7, $i8;
        ucar.nc2.Variable r1;
        ucar.nc2.ncml.AggregationTiled r4;
        java.io.PrintStream $r18, $r23, $r31, $r42, $r46;
        java.util.Iterator $r6;
        java.lang.IllegalArgumentException $r49;
        java.lang.Object $r7;
        ucar.nc2.ncml.AggregationTiled$TileLayout $r16;

        r4 := @this: ucar.nc2.ncml.AggregationTiled;

        r1 := @parameter0: ucar.nc2.Variable;

        r0 := @parameter1: ucar.ma2.Section;

        r13 := @parameter2: ucar.nc2.util.CancelTask;

        $l0 = virtualinvoke r0.<ucar.ma2.Section: long computeSize()>();

        $l1 = virtualinvoke r1.<ucar.nc2.Variable: long getSize()>();

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label01;

        $r39 = virtualinvoke r4.<ucar.nc2.ncml.AggregationTiled: ucar.ma2.Array reallyRead(ucar.nc2.Variable,ucar.nc2.util.CancelTask)>(r1, r13);

        return $r39;

     label01:
        $z0 = r1 instanceof ucar.nc2.dataset.VariableDS;

        if $z0 == 0 goto label02;

        $r38 = (ucar.nc2.dataset.VariableDS) r1;

        $r51 = virtualinvoke $r38.<ucar.nc2.dataset.VariableDS: ucar.ma2.DataType getOriginalDataType()>();

        goto label03;

     label02:
        $r51 = virtualinvoke r1.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

     label03:
        $r2 = virtualinvoke r0.<ucar.ma2.Section: int[] getShape()>();

        $r3 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(ucar.ma2.DataType,int[])>($r51, $r2);

        $z1 = r4.<ucar.nc2.ncml.AggregationTiled: boolean debug>;

        if $z1 == 0 goto label04;

        $r31 = <java.lang.System: java.io.PrintStream out>;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r51);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" allData allocated: ");

        $r34 = new ucar.ma2.Section;

        $r35 = virtualinvoke $r3.<ucar.ma2.Array: int[] getShape()>();

        specialinvoke $r34.<ucar.ma2.Section: void <init>(int[])>($r35);

        $r36 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r34);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r31.<java.io.PrintStream: void println(java.lang.String)>($r37);

     label04:
        $r5 = virtualinvoke r4.<ucar.nc2.ncml.AggregationTiled: java.util.List getDatasets()>();

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $z7 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label20;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (ucar.nc2.ncml.Aggregation$Dataset) $r7;

        r9 = (ucar.nc2.ncml.AggregationTiled$DatasetTiled) r8;

        $r10 = virtualinvoke r9.<ucar.nc2.ncml.AggregationTiled$DatasetTiled: ucar.ma2.Section makeVarSection(ucar.nc2.Variable)>(r1);

     label06:
        $z2 = virtualinvoke $r10.<ucar.ma2.Section: boolean intersects(ucar.ma2.Section)>(r0);

        if $z2 != 0 goto label08;

     label07:
        goto label05;

     label08:
        $r11 = virtualinvoke $r10.<ucar.ma2.Section: ucar.ma2.Section intersect(ucar.ma2.Section)>(r0);

        $z3 = r4.<ucar.nc2.ncml.AggregationTiled: boolean debug>;

        if $z3 == 0 goto label09;

        $r23 = <java.lang.System: java.io.PrintStream out>;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" tiledSection: ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from file ");

        $r27 = virtualinvoke r9.<ucar.nc2.ncml.AggregationTiled$DatasetTiled: java.lang.String getLocation()>();

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r23.<java.io.PrintStream: void println(java.lang.String)>($r29);

     label09:
        $z4 = r4.<ucar.nc2.ncml.AggregationTiled: boolean debug>;

        if $z4 == 0 goto label10;

        $r18 = <java.lang.System: java.io.PrintStream out>;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" intersection: ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r18.<java.io.PrintStream: void println(java.lang.String)>($r21);

     label10:
        $r12 = virtualinvoke $r11.<ucar.ma2.Section: ucar.ma2.Section shiftOrigin(ucar.ma2.Section)>($r10);

        $r14 = virtualinvoke $r12.<ucar.ma2.Section: java.util.List getRanges()>();

        $r15 = virtualinvoke r9.<ucar.nc2.ncml.AggregationTiled$DatasetTiled: ucar.ma2.Array read(ucar.nc2.Variable,ucar.nc2.util.CancelTask,java.util.List)>(r1, r13, $r14);

        $r16 = new ucar.nc2.ncml.AggregationTiled$TileLayout;

        specialinvoke $r16.<ucar.nc2.ncml.AggregationTiled$TileLayout: void <init>(ucar.nc2.ncml.AggregationTiled,ucar.ma2.Section,ucar.ma2.Section)>(r4, $r11, r0);

     label11:
        goto label13;

     label12:
        $r48 := @caughtexception;

        $r49 = new java.lang.IllegalArgumentException;

        $r50 = virtualinvoke $r48.<ucar.ma2.InvalidRangeException: java.lang.String getMessage()>();

        specialinvoke $r49.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r50);

        throw $r49;

     label13:
        $z5 = virtualinvoke $r16.<ucar.nc2.ncml.AggregationTiled$TileLayout: boolean hasNext()>();

        if $z5 == 0 goto label17;

     label14:
        $i6 = staticinvoke <ucar.nc2.ncml.AggregationTiled$TileLayout: int access$000(ucar.nc2.ncml.AggregationTiled$TileLayout)>($r16);

        $i7 = staticinvoke <ucar.nc2.ncml.AggregationTiled$TileLayout: int access$100(ucar.nc2.ncml.AggregationTiled$TileLayout)>($r16);

        $i8 = staticinvoke <ucar.nc2.ncml.AggregationTiled$TileLayout: int access$200(ucar.nc2.ncml.AggregationTiled$TileLayout)>($r16);

        staticinvoke <ucar.ma2.Array: void arraycopy(ucar.ma2.Array,int,ucar.ma2.Array,int,int)>($r15, $i6, $r3, $i7, $i8);

     label15:
        goto label13;

     label16:
        $r40 := @caughtexception;

        $r42 = <java.lang.System: java.io.PrintStream out>;

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        $r43 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" tiledSection: ");

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r42.<java.io.PrintStream: void println(java.lang.String)>($r45);

        $r46 = <java.lang.System: java.io.PrintStream out>;

        $r47 = virtualinvoke $r16.<ucar.nc2.ncml.AggregationTiled$TileLayout: java.lang.String toString()>();

        virtualinvoke $r46.<java.io.PrintStream: void println(java.lang.String)>($r47);

        throw $r40;

     label17:
        $l3 = virtualinvoke $r15.<ucar.ma2.Array: long getSize()>();

        $l4 = virtualinvoke r1.<ucar.nc2.Variable: long getSize()>();

        $b5 = $l3 cmp $l4;

        if $b5 != 0 goto label18;

        goto label20;

     label18:
        if r13 == null goto label19;

        $z6 = interfaceinvoke r13.<ucar.nc2.util.CancelTask: boolean isCancel()>();

        if $z6 == 0 goto label19;

        return null;

     label19:
        goto label05;

     label20:
        return $r3;

        catch ucar.ma2.InvalidRangeException from label06 to label07 with label12;
        catch ucar.ma2.InvalidRangeException from label08 to label11 with label12;
        catch java.lang.RuntimeException from label14 to label15 with label16;
    }

    protected ucar.nc2.ncml.Aggregation$Dataset makeDataset(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.util.EnumSet, ucar.nc2.util.cache.FileFactory)
    {
        ucar.nc2.ncml.AggregationTiled$DatasetTiled $r0;
        ucar.nc2.ncml.AggregationTiled r1;
        java.lang.String r2, r3, r4, r5, r8, r9;
        ucar.nc2.util.cache.FileFactory r7;
        java.util.EnumSet r6;

        r1 := @this: ucar.nc2.ncml.AggregationTiled;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        r8 := @parameter3: java.lang.String;

        r9 := @parameter4: java.lang.String;

        r5 := @parameter5: java.lang.String;

        r6 := @parameter6: java.util.EnumSet;

        r7 := @parameter7: ucar.nc2.util.cache.FileFactory;

        $r0 = new ucar.nc2.ncml.AggregationTiled$DatasetTiled;

        specialinvoke $r0.<ucar.nc2.ncml.AggregationTiled$DatasetTiled: void <init>(ucar.nc2.ncml.AggregationTiled,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.EnumSet,ucar.nc2.util.cache.FileFactory)>(r1, r2, r3, r4, r5, r6, r7);

        return $r0;
    }

    static boolean access$300(ucar.nc2.ncml.AggregationTiled)
    {
        ucar.nc2.ncml.AggregationTiled r0;
        boolean $z0;

        r0 := @parameter0: ucar.nc2.ncml.AggregationTiled;

        $z0 = r0.<ucar.nc2.ncml.AggregationTiled: boolean debug>;

        return $z0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lucar/nc2/ncml/AggregationTiled;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <ucar.nc2.ncml.AggregationTiled: boolean $assertionsDisabled> = $z1;

        return;
    }
}
