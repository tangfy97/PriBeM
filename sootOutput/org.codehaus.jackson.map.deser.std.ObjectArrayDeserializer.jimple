public class org.codehaus.jackson.map.deser.std.ObjectArrayDeserializer extends org.codehaus.jackson.map.deser.std.ContainerDeserializerBase
{
    protected final org.codehaus.jackson.type.JavaType _arrayType;
    protected final boolean _untyped;
    protected final java.lang.Class _elementClass;
    protected final org.codehaus.jackson.map.JsonDeserializer _elementDeserializer;
    protected final org.codehaus.jackson.map.TypeDeserializer _elementTypeDeserializer;

    public void <init>(org.codehaus.jackson.map.type.ArrayType, org.codehaus.jackson.map.JsonDeserializer, org.codehaus.jackson.map.TypeDeserializer)
    {
        org.codehaus.jackson.map.TypeDeserializer r6;
        org.codehaus.jackson.type.JavaType $r2;
        java.lang.Class $r3, $r4;
        org.codehaus.jackson.map.JsonDeserializer r5;
        org.codehaus.jackson.map.deser.std.ObjectArrayDeserializer r0;
        org.codehaus.jackson.map.type.ArrayType r1;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.deser.std.ObjectArrayDeserializer;

        r1 := @parameter0: org.codehaus.jackson.map.type.ArrayType;

        r5 := @parameter1: org.codehaus.jackson.map.JsonDeserializer;

        r6 := @parameter2: org.codehaus.jackson.map.TypeDeserializer;

        specialinvoke r0.<org.codehaus.jackson.map.deser.std.ContainerDeserializerBase: void <init>(java.lang.Class)>(class "[Ljava/lang/Object;");

        r0.<org.codehaus.jackson.map.deser.std.ObjectArrayDeserializer: org.codehaus.jackson.type.JavaType _arrayType> = r1;

        $r2 = virtualinvoke r1.<org.codehaus.jackson.map.type.ArrayType: org.codehaus.jackson.type.JavaType getContentType()>();

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        r0.<org.codehaus.jackson.map.deser.std.ObjectArrayDeserializer: java.lang.Class _elementClass> = $r3;

        $r4 = r0.<org.codehaus.jackson.map.deser.std.ObjectArrayDeserializer: java.lang.Class _elementClass>;

        if $r4 != class "Ljava/lang/Object;" goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        r0.<org.codehaus.jackson.map.deser.std.ObjectArrayDeserializer: boolean _untyped> = $z0;

        r0.<org.codehaus.jackson.map.deser.std.ObjectArrayDeserializer: org.codehaus.jackson.map.JsonDeserializer _elementDeserializer> = r5;

        r0.<org.codehaus.jackson.map.deser.std.ObjectArrayDeserializer: org.codehaus.jackson.map.TypeDeserializer _elementTypeDeserializer> = r6;

        return;
    }

    public org.codehaus.jackson.type.JavaType getContentType()
    {
        org.codehaus.jackson.type.JavaType $r1, $r2;
        org.codehaus.jackson.map.deser.std.ObjectArrayDeserializer r0;

        r0 := @this: org.codehaus.jackson.map.deser.std.ObjectArrayDeserializer;

        $r1 = r0.<org.codehaus.jackson.map.deser.std.ObjectArrayDeserializer: org.codehaus.jackson.type.JavaType _arrayType>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType getContentType()>();

        return $r2;
    }

    public org.codehaus.jackson.map.JsonDeserializer getContentDeserializer()
    {
        org.codehaus.jackson.map.JsonDeserializer $r1;
        org.codehaus.jackson.map.deser.std.ObjectArrayDeserializer r0;

        r0 := @this: org.codehaus.jackson.map.deser.std.ObjectArrayDeserializer;

        $r1 = r0.<org.codehaus.jackson.map.deser.std.ObjectArrayDeserializer: org.codehaus.jackson.map.JsonDeserializer _elementDeserializer>;

        return $r1;
    }

    public java.lang.Object[] deserialize(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.JsonToken $r5, $r6, $r8;
        java.lang.Object[] $r11, r12, r14;
        org.codehaus.jackson.map.DeserializationContext r1;
        org.codehaus.jackson.map.util.ObjectBuffer $r2;
        int $i0, i1, $i2;
        org.codehaus.jackson.map.JsonDeserializer $r9, $r10;
        org.codehaus.jackson.JsonParser r0;
        boolean $z0, $z1;
        org.codehaus.jackson.map.TypeDeserializer r4;
        java.lang.Class $r7;
        java.lang.Object r13;
        org.codehaus.jackson.map.deser.std.ObjectArrayDeserializer r3;

        r3 := @this: org.codehaus.jackson.map.deser.std.ObjectArrayDeserializer;

        r0 := @parameter0: org.codehaus.jackson.JsonParser;

        r1 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: boolean isExpectedStartArrayToken()>();

        if $z0 != 0 goto label1;

        $r11 = specialinvoke r3.<org.codehaus.jackson.map.deser.std.ObjectArrayDeserializer: java.lang.Object[] handleNonArray(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>(r0, r1);

        return $r11;

     label1:
        $r2 = virtualinvoke r1.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.util.ObjectBuffer leaseObjectBuffer()>();

        r12 = virtualinvoke $r2.<org.codehaus.jackson.map.util.ObjectBuffer: java.lang.Object[] resetAndStart()>();

        i1 = 0;

        r4 = r3.<org.codehaus.jackson.map.deser.std.ObjectArrayDeserializer: org.codehaus.jackson.map.TypeDeserializer _elementTypeDeserializer>;

     label2:
        $r5 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken nextToken()>();

        $r6 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken END_ARRAY>;

        if $r5 == $r6 goto label7;

        $r8 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NULL>;

        if $r5 != $r8 goto label3;

        r13 = null;

        goto label5;

     label3:
        if r4 != null goto label4;

        $r10 = r3.<org.codehaus.jackson.map.deser.std.ObjectArrayDeserializer: org.codehaus.jackson.map.JsonDeserializer _elementDeserializer>;

        r13 = virtualinvoke $r10.<org.codehaus.jackson.map.JsonDeserializer: java.lang.Object deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>(r0, r1);

        goto label5;

     label4:
        $r9 = r3.<org.codehaus.jackson.map.deser.std.ObjectArrayDeserializer: org.codehaus.jackson.map.JsonDeserializer _elementDeserializer>;

        r13 = virtualinvoke $r9.<org.codehaus.jackson.map.JsonDeserializer: java.lang.Object deserializeWithType(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext,org.codehaus.jackson.map.TypeDeserializer)>(r0, r1, r4);

     label5:
        $i2 = lengthof r12;

        if i1 < $i2 goto label6;

        r12 = virtualinvoke $r2.<org.codehaus.jackson.map.util.ObjectBuffer: java.lang.Object[] appendCompletedChunk(java.lang.Object[])>(r12);

        i1 = 0;

     label6:
        $i0 = i1;

        i1 = i1 + 1;

        r12[$i0] = r13;

        goto label2;

     label7:
        $z1 = r3.<org.codehaus.jackson.map.deser.std.ObjectArrayDeserializer: boolean _untyped>;

        if $z1 == 0 goto label8;

        r14 = virtualinvoke $r2.<org.codehaus.jackson.map.util.ObjectBuffer: java.lang.Object[] completeAndClearBuffer(java.lang.Object[],int)>(r12, i1);

        goto label9;

     label8:
        $r7 = r3.<org.codehaus.jackson.map.deser.std.ObjectArrayDeserializer: java.lang.Class _elementClass>;

        r14 = virtualinvoke $r2.<org.codehaus.jackson.map.util.ObjectBuffer: java.lang.Object[] completeAndClearBuffer(java.lang.Object[],int,java.lang.Class)>(r12, i1, $r7);

     label9:
        virtualinvoke r1.<org.codehaus.jackson.map.DeserializationContext: void returnObjectBuffer(org.codehaus.jackson.map.util.ObjectBuffer)>($r2);

        return r14;
    }

    public java.lang.Object[] deserializeWithType(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext, org.codehaus.jackson.map.TypeDeserializer) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.map.TypeDeserializer r0;
        java.lang.Object[] $r4, $r5;
        java.lang.Object $r3;
        org.codehaus.jackson.map.deser.std.ObjectArrayDeserializer r6;
        org.codehaus.jackson.JsonParser r1;
        org.codehaus.jackson.map.DeserializationContext r2;

        r6 := @this: org.codehaus.jackson.map.deser.std.ObjectArrayDeserializer;

        r1 := @parameter0: org.codehaus.jackson.JsonParser;

        r2 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        r0 := @parameter2: org.codehaus.jackson.map.TypeDeserializer;

        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.TypeDeserializer: java.lang.Object deserializeTypedFromArray(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>(r1, r2);

        $r4 = (java.lang.Object[]) $r3;

        $r5 = (java.lang.Object[]) $r4;

        return $r5;
    }

    protected java.lang.Byte[] deserializeFromBase64(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        byte[] $r3;
        org.codehaus.jackson.map.DeserializationContext r1;
        java.lang.Byte[] r4;
        byte $b2;
        org.codehaus.jackson.Base64Variant $r2;
        int $i0, i1, i3;
        java.lang.Byte $r5;
        org.codehaus.jackson.map.deser.std.ObjectArrayDeserializer r6;
        org.codehaus.jackson.JsonParser r0;

        r6 := @this: org.codehaus.jackson.map.deser.std.ObjectArrayDeserializer;

        r0 := @parameter0: org.codehaus.jackson.JsonParser;

        r1 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r2 = virtualinvoke r1.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.Base64Variant getBase64Variant()>();

        $r3 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: byte[] getBinaryValue(org.codehaus.jackson.Base64Variant)>($r2);

        $i0 = lengthof $r3;

        r4 = newarray (java.lang.Byte)[$i0];

        i3 = 0;

        i1 = lengthof $r3;

     label1:
        if i3 >= i1 goto label2;

        $b2 = $r3[i3];

        $r5 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b2);

        r4[i3] = $r5;

        i3 = i3 + 1;

        goto label1;

     label2:
        return r4;
    }

    private final java.lang.Object[] handleNonArray(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.JsonToken $r1, $r2, $r4, $r5, $r14, $r15;
        java.lang.Object[] $r12, r25;
        org.codehaus.jackson.map.DeserializationContext r3;
        org.codehaus.jackson.map.JsonMappingException $r18;
        int $i0;
        org.codehaus.jackson.type.JavaType $r16;
        org.codehaus.jackson.map.JsonDeserializer $r9, $r13;
        java.lang.String $r22;
        org.codehaus.jackson.JsonParser r0;
        boolean $z0, $z1, $z2;
        org.codehaus.jackson.map.DeserializationConfig$Feature $r21, $r23;
        org.codehaus.jackson.map.TypeDeserializer $r7, $r8;
        java.lang.Byte[] $r20;
        java.lang.Class $r10, $r17, $r19;
        java.lang.Object $r11, r24;
        org.codehaus.jackson.map.deser.std.ObjectArrayDeserializer r6;

        r6 := @this: org.codehaus.jackson.map.deser.std.ObjectArrayDeserializer;

        r0 := @parameter0: org.codehaus.jackson.JsonParser;

        r3 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken getCurrentToken()>();

        $r2 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_STRING>;

        if $r1 != $r2 goto label1;

        $r21 = <org.codehaus.jackson.map.DeserializationConfig$Feature: org.codehaus.jackson.map.DeserializationConfig$Feature ACCEPT_EMPTY_STRING_AS_NULL_OBJECT>;

        $z0 = virtualinvoke r3.<org.codehaus.jackson.map.DeserializationContext: boolean isEnabled(org.codehaus.jackson.map.DeserializationConfig$Feature)>($r21);

        if $z0 == 0 goto label1;

        $r22 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: java.lang.String getText()>();

        $i0 = virtualinvoke $r22.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        return null;

     label1:
        $r23 = <org.codehaus.jackson.map.DeserializationConfig$Feature: org.codehaus.jackson.map.DeserializationConfig$Feature ACCEPT_SINGLE_VALUE_AS_ARRAY>;

        $z1 = virtualinvoke r3.<org.codehaus.jackson.map.DeserializationContext: boolean isEnabled(org.codehaus.jackson.map.DeserializationConfig$Feature)>($r23);

        if $z1 != 0 goto label3;

        $r14 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken getCurrentToken()>();

        $r15 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_STRING>;

        if $r14 != $r15 goto label2;

        $r19 = r6.<org.codehaus.jackson.map.deser.std.ObjectArrayDeserializer: java.lang.Class _elementClass>;

        if $r19 != class "Ljava/lang/Byte;" goto label2;

        $r20 = virtualinvoke r6.<org.codehaus.jackson.map.deser.std.ObjectArrayDeserializer: java.lang.Byte[] deserializeFromBase64(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>(r0, r3);

        return $r20;

     label2:
        $r16 = r6.<org.codehaus.jackson.map.deser.std.ObjectArrayDeserializer: org.codehaus.jackson.type.JavaType _arrayType>;

        $r17 = virtualinvoke $r16.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        $r18 = virtualinvoke r3.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException mappingException(java.lang.Class)>($r17);

        throw $r18;

     label3:
        $r4 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken getCurrentToken()>();

        $r5 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NULL>;

        if $r4 != $r5 goto label4;

        r24 = null;

        goto label6;

     label4:
        $r7 = r6.<org.codehaus.jackson.map.deser.std.ObjectArrayDeserializer: org.codehaus.jackson.map.TypeDeserializer _elementTypeDeserializer>;

        if $r7 != null goto label5;

        $r13 = r6.<org.codehaus.jackson.map.deser.std.ObjectArrayDeserializer: org.codehaus.jackson.map.JsonDeserializer _elementDeserializer>;

        r24 = virtualinvoke $r13.<org.codehaus.jackson.map.JsonDeserializer: java.lang.Object deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>(r0, r3);

        goto label6;

     label5:
        $r9 = r6.<org.codehaus.jackson.map.deser.std.ObjectArrayDeserializer: org.codehaus.jackson.map.JsonDeserializer _elementDeserializer>;

        $r8 = r6.<org.codehaus.jackson.map.deser.std.ObjectArrayDeserializer: org.codehaus.jackson.map.TypeDeserializer _elementTypeDeserializer>;

        r24 = virtualinvoke $r9.<org.codehaus.jackson.map.JsonDeserializer: java.lang.Object deserializeWithType(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext,org.codehaus.jackson.map.TypeDeserializer)>(r0, r3, $r8);

     label6:
        $z2 = r6.<org.codehaus.jackson.map.deser.std.ObjectArrayDeserializer: boolean _untyped>;

        if $z2 == 0 goto label7;

        r25 = newarray (java.lang.Object)[1];

        goto label8;

     label7:
        $r10 = r6.<org.codehaus.jackson.map.deser.std.ObjectArrayDeserializer: java.lang.Class _elementClass>;

        $r11 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r10, 1);

        $r12 = (java.lang.Object[]) $r11;

        r25 = (java.lang.Object[]) $r12;

     label8:
        r25[0] = r24;

        return r25;
    }

    public volatile java.lang.Object deserializeWithType(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext, org.codehaus.jackson.map.TypeDeserializer) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.map.TypeDeserializer r3;
        java.lang.Object[] $r4;
        org.codehaus.jackson.map.deser.std.ObjectArrayDeserializer r0;
        org.codehaus.jackson.JsonParser r1;
        org.codehaus.jackson.map.DeserializationContext r2;

        r0 := @this: org.codehaus.jackson.map.deser.std.ObjectArrayDeserializer;

        r1 := @parameter0: org.codehaus.jackson.JsonParser;

        r2 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        r3 := @parameter2: org.codehaus.jackson.map.TypeDeserializer;

        $r4 = virtualinvoke r0.<org.codehaus.jackson.map.deser.std.ObjectArrayDeserializer: java.lang.Object[] deserializeWithType(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext,org.codehaus.jackson.map.TypeDeserializer)>(r1, r2, r3);

        return $r4;
    }

    public volatile java.lang.Object deserialize(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        java.lang.Object[] $r3;
        org.codehaus.jackson.map.deser.std.ObjectArrayDeserializer r0;
        org.codehaus.jackson.JsonParser r1;
        org.codehaus.jackson.map.DeserializationContext r2;

        r0 := @this: org.codehaus.jackson.map.deser.std.ObjectArrayDeserializer;

        r1 := @parameter0: org.codehaus.jackson.JsonParser;

        r2 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.deser.std.ObjectArrayDeserializer: java.lang.Object[] deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>(r1, r2);

        return $r3;
    }
}
