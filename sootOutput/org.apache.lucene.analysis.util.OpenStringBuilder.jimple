public class org.apache.lucene.analysis.util.OpenStringBuilder extends java.lang.Object implements java.lang.Appendable, java.lang.CharSequence
{
    protected char[] buf;
    protected int len;

    public void <init>()
    {
        org.apache.lucene.analysis.util.OpenStringBuilder r0;

        r0 := @this: org.apache.lucene.analysis.util.OpenStringBuilder;

        specialinvoke r0.<org.apache.lucene.analysis.util.OpenStringBuilder: void <init>(int)>(32);

        return;
    }

    public void <init>(int)
    {
        int i0;
        char[] $r1;
        org.apache.lucene.analysis.util.OpenStringBuilder r0;

        r0 := @this: org.apache.lucene.analysis.util.OpenStringBuilder;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (char)[i0];

        r0.<org.apache.lucene.analysis.util.OpenStringBuilder: char[] buf> = $r1;

        return;
    }

    public void <init>(char[], int)
    {
        int i0;
        char[] r1;
        org.apache.lucene.analysis.util.OpenStringBuilder r0;

        r0 := @this: org.apache.lucene.analysis.util.OpenStringBuilder;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        virtualinvoke r0.<org.apache.lucene.analysis.util.OpenStringBuilder: void set(char[],int)>(r1, i0);

        return;
    }

    public void setLength(int)
    {
        int i0;
        org.apache.lucene.analysis.util.OpenStringBuilder r0;

        r0 := @this: org.apache.lucene.analysis.util.OpenStringBuilder;

        i0 := @parameter0: int;

        r0.<org.apache.lucene.analysis.util.OpenStringBuilder: int len> = i0;

        return;
    }

    public void set(char[], int)
    {
        int i0;
        char[] r1;
        org.apache.lucene.analysis.util.OpenStringBuilder r0;

        r0 := @this: org.apache.lucene.analysis.util.OpenStringBuilder;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        r0.<org.apache.lucene.analysis.util.OpenStringBuilder: char[] buf> = r1;

        r0.<org.apache.lucene.analysis.util.OpenStringBuilder: int len> = i0;

        return;
    }

    public char[] getArray()
    {
        char[] $r1;
        org.apache.lucene.analysis.util.OpenStringBuilder r0;

        r0 := @this: org.apache.lucene.analysis.util.OpenStringBuilder;

        $r1 = r0.<org.apache.lucene.analysis.util.OpenStringBuilder: char[] buf>;

        return $r1;
    }

    public int size()
    {
        int $i0;
        org.apache.lucene.analysis.util.OpenStringBuilder r0;

        r0 := @this: org.apache.lucene.analysis.util.OpenStringBuilder;

        $i0 = r0.<org.apache.lucene.analysis.util.OpenStringBuilder: int len>;

        return $i0;
    }

    public int length()
    {
        int $i0;
        org.apache.lucene.analysis.util.OpenStringBuilder r0;

        r0 := @this: org.apache.lucene.analysis.util.OpenStringBuilder;

        $i0 = r0.<org.apache.lucene.analysis.util.OpenStringBuilder: int len>;

        return $i0;
    }

    public int capacity()
    {
        int $i0;
        char[] $r1;
        org.apache.lucene.analysis.util.OpenStringBuilder r0;

        r0 := @this: org.apache.lucene.analysis.util.OpenStringBuilder;

        $r1 = r0.<org.apache.lucene.analysis.util.OpenStringBuilder: char[] buf>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public java.lang.Appendable append(java.lang.CharSequence)
    {
        org.apache.lucene.analysis.util.OpenStringBuilder r0;
        java.lang.CharSequence r1;
        java.lang.Appendable $r2;
        int $i0;

        r0 := @this: org.apache.lucene.analysis.util.OpenStringBuilder;

        r1 := @parameter0: java.lang.CharSequence;

        $i0 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        $r2 = virtualinvoke r0.<org.apache.lucene.analysis.util.OpenStringBuilder: java.lang.Appendable append(java.lang.CharSequence,int,int)>(r1, 0, $i0);

        return $r2;
    }

    public java.lang.Appendable append(java.lang.CharSequence, int, int)
    {
        org.apache.lucene.analysis.util.OpenStringBuilder r0;
        java.lang.CharSequence r1;
        int i0, i1, $i2, i4;
        char $c3;

        r0 := @this: org.apache.lucene.analysis.util.OpenStringBuilder;

        r1 := @parameter0: java.lang.CharSequence;

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        $i2 = i0 - i1;

        virtualinvoke r0.<org.apache.lucene.analysis.util.OpenStringBuilder: void reserve(int)>($i2);

        i4 = i1;

     label1:
        if i4 >= i0 goto label2;

        $c3 = interfaceinvoke r1.<java.lang.CharSequence: char charAt(int)>(i4);

        virtualinvoke r0.<org.apache.lucene.analysis.util.OpenStringBuilder: void unsafeWrite(char)>($c3);

        i4 = i4 + 1;

        goto label1;

     label2:
        return r0;
    }

    public java.lang.Appendable append(char)
    {
        char c0;
        org.apache.lucene.analysis.util.OpenStringBuilder r0;

        r0 := @this: org.apache.lucene.analysis.util.OpenStringBuilder;

        c0 := @parameter0: char;

        virtualinvoke r0.<org.apache.lucene.analysis.util.OpenStringBuilder: void write(char)>(c0);

        return r0;
    }

    public char charAt(int)
    {
        org.apache.lucene.analysis.util.OpenStringBuilder r0;
        int i0;
        char[] $r1;
        char $c1;

        r0 := @this: org.apache.lucene.analysis.util.OpenStringBuilder;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.lucene.analysis.util.OpenStringBuilder: char[] buf>;

        $c1 = $r1[i0];

        return $c1;
    }

    public void setCharAt(int, char)
    {
        org.apache.lucene.analysis.util.OpenStringBuilder r0;
        int i0;
        char[] $r1;
        char c1;

        r0 := @this: org.apache.lucene.analysis.util.OpenStringBuilder;

        i0 := @parameter0: int;

        c1 := @parameter1: char;

        $r1 = r0.<org.apache.lucene.analysis.util.OpenStringBuilder: char[] buf>;

        $r1[i0] = c1;

        return;
    }

    public java.lang.CharSequence subSequence(int, int)
    {
        java.lang.UnsupportedOperationException $r0;
        org.apache.lucene.analysis.util.OpenStringBuilder r1;
        int i0, i1;

        r1 := @this: org.apache.lucene.analysis.util.OpenStringBuilder;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public void unsafeWrite(char)
    {
        org.apache.lucene.analysis.util.OpenStringBuilder r0;
        int $i0, $i1;
        char[] $r1;
        char c2;

        r0 := @this: org.apache.lucene.analysis.util.OpenStringBuilder;

        c2 := @parameter0: char;

        $r1 = r0.<org.apache.lucene.analysis.util.OpenStringBuilder: char[] buf>;

        $i0 = r0.<org.apache.lucene.analysis.util.OpenStringBuilder: int len>;

        $i1 = $i0 + 1;

        r0.<org.apache.lucene.analysis.util.OpenStringBuilder: int len> = $i1;

        $r1[$i0] = c2;

        return;
    }

    public void unsafeWrite(int)
    {
        int i0;
        char $c1;
        org.apache.lucene.analysis.util.OpenStringBuilder r0;

        r0 := @this: org.apache.lucene.analysis.util.OpenStringBuilder;

        i0 := @parameter0: int;

        $c1 = (char) i0;

        virtualinvoke r0.<org.apache.lucene.analysis.util.OpenStringBuilder: void unsafeWrite(char)>($c1);

        return;
    }

    public void unsafeWrite(char[], int, int)
    {
        org.apache.lucene.analysis.util.OpenStringBuilder r1;
        int i0, i1, $i2, $i3, $i4;
        char[] r0, $r2;

        r1 := @this: org.apache.lucene.analysis.util.OpenStringBuilder;

        r0 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r1.<org.apache.lucene.analysis.util.OpenStringBuilder: char[] buf>;

        $i2 = r1.<org.apache.lucene.analysis.util.OpenStringBuilder: int len>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, i0, $r2, $i2, i1);

        $i3 = r1.<org.apache.lucene.analysis.util.OpenStringBuilder: int len>;

        $i4 = $i3 + i1;

        r1.<org.apache.lucene.analysis.util.OpenStringBuilder: int len> = $i4;

        return;
    }

    protected void resize(int)
    {
        org.apache.lucene.analysis.util.OpenStringBuilder r0;
        int $i0, i1, $i2, $i3, $i4;
        char[] $r1, r2, $r3;

        r0 := @this: org.apache.lucene.analysis.util.OpenStringBuilder;

        i1 := @parameter0: int;

        $r1 = r0.<org.apache.lucene.analysis.util.OpenStringBuilder: char[] buf>;

        $i0 = lengthof $r1;

        $i2 = $i0 << 1;

        $i3 = staticinvoke <java.lang.Math: int max(int,int)>($i2, i1);

        r2 = newarray (char)[$i3];

        $r3 = r0.<org.apache.lucene.analysis.util.OpenStringBuilder: char[] buf>;

        $i4 = virtualinvoke r0.<org.apache.lucene.analysis.util.OpenStringBuilder: int size()>();

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r2, 0, $i4);

        r0.<org.apache.lucene.analysis.util.OpenStringBuilder: char[] buf> = r2;

        return;
    }

    public void reserve(int)
    {
        org.apache.lucene.analysis.util.OpenStringBuilder r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        char[] $r1;

        r0 := @this: org.apache.lucene.analysis.util.OpenStringBuilder;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.lucene.analysis.util.OpenStringBuilder: int len>;

        $i3 = $i1 + i0;

        $r1 = r0.<org.apache.lucene.analysis.util.OpenStringBuilder: char[] buf>;

        $i2 = lengthof $r1;

        if $i3 <= $i2 goto label1;

        $i4 = r0.<org.apache.lucene.analysis.util.OpenStringBuilder: int len>;

        $i5 = $i4 + i0;

        virtualinvoke r0.<org.apache.lucene.analysis.util.OpenStringBuilder: void resize(int)>($i5);

     label1:
        return;
    }

    public void write(char)
    {
        org.apache.lucene.analysis.util.OpenStringBuilder r0;
        int $i0, $i1, $i3, $i4;
        char[] $r1;
        char c2;

        r0 := @this: org.apache.lucene.analysis.util.OpenStringBuilder;

        c2 := @parameter0: char;

        $i1 = r0.<org.apache.lucene.analysis.util.OpenStringBuilder: int len>;

        $r1 = r0.<org.apache.lucene.analysis.util.OpenStringBuilder: char[] buf>;

        $i0 = lengthof $r1;

        if $i1 < $i0 goto label1;

        $i3 = r0.<org.apache.lucene.analysis.util.OpenStringBuilder: int len>;

        $i4 = $i3 + 1;

        virtualinvoke r0.<org.apache.lucene.analysis.util.OpenStringBuilder: void resize(int)>($i4);

     label1:
        virtualinvoke r0.<org.apache.lucene.analysis.util.OpenStringBuilder: void unsafeWrite(char)>(c2);

        return;
    }

    public void write(int)
    {
        int i0;
        char $c1;
        org.apache.lucene.analysis.util.OpenStringBuilder r0;

        r0 := @this: org.apache.lucene.analysis.util.OpenStringBuilder;

        i0 := @parameter0: int;

        $c1 = (char) i0;

        virtualinvoke r0.<org.apache.lucene.analysis.util.OpenStringBuilder: void write(char)>($c1);

        return;
    }

    public final void write(char[])
    {
        int $i0;
        char[] r1;
        org.apache.lucene.analysis.util.OpenStringBuilder r0;

        r0 := @this: org.apache.lucene.analysis.util.OpenStringBuilder;

        r1 := @parameter0: char[];

        $i0 = lengthof r1;

        virtualinvoke r0.<org.apache.lucene.analysis.util.OpenStringBuilder: void write(char[],int,int)>(r1, 0, $i0);

        return;
    }

    public void write(char[], int, int)
    {
        org.apache.lucene.analysis.util.OpenStringBuilder r0;
        int i0, i1;
        char[] r1;

        r0 := @this: org.apache.lucene.analysis.util.OpenStringBuilder;

        r1 := @parameter0: char[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        virtualinvoke r0.<org.apache.lucene.analysis.util.OpenStringBuilder: void reserve(int)>(i0);

        virtualinvoke r0.<org.apache.lucene.analysis.util.OpenStringBuilder: void unsafeWrite(char[],int,int)>(r1, i1, i0);

        return;
    }

    public final void write(org.apache.lucene.analysis.util.OpenStringBuilder)
    {
        org.apache.lucene.analysis.util.OpenStringBuilder r0, r1;
        int $i0;
        char[] $r2;

        r0 := @this: org.apache.lucene.analysis.util.OpenStringBuilder;

        r1 := @parameter0: org.apache.lucene.analysis.util.OpenStringBuilder;

        $r2 = r1.<org.apache.lucene.analysis.util.OpenStringBuilder: char[] buf>;

        $i0 = r0.<org.apache.lucene.analysis.util.OpenStringBuilder: int len>;

        virtualinvoke r0.<org.apache.lucene.analysis.util.OpenStringBuilder: void write(char[],int,int)>($r2, 0, $i0);

        return;
    }

    public void write(java.lang.String)
    {
        org.apache.lucene.analysis.util.OpenStringBuilder r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        char[] $r2;
        java.lang.String r1;

        r0 := @this: org.apache.lucene.analysis.util.OpenStringBuilder;

        r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        virtualinvoke r0.<org.apache.lucene.analysis.util.OpenStringBuilder: void reserve(int)>($i0);

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        $r2 = r0.<org.apache.lucene.analysis.util.OpenStringBuilder: char[] buf>;

        $i2 = r0.<org.apache.lucene.analysis.util.OpenStringBuilder: int len>;

        virtualinvoke r1.<java.lang.String: void getChars(int,int,char[],int)>(0, $i1, $r2, $i2);

        $i3 = r0.<org.apache.lucene.analysis.util.OpenStringBuilder: int len>;

        $i4 = virtualinvoke r1.<java.lang.String: int length()>();

        $i5 = $i3 + $i4;

        r0.<org.apache.lucene.analysis.util.OpenStringBuilder: int len> = $i5;

        return;
    }

    public void flush()
    {
        org.apache.lucene.analysis.util.OpenStringBuilder r0;

        r0 := @this: org.apache.lucene.analysis.util.OpenStringBuilder;

        return;
    }

    public final void reset()
    {
        org.apache.lucene.analysis.util.OpenStringBuilder r0;

        r0 := @this: org.apache.lucene.analysis.util.OpenStringBuilder;

        r0.<org.apache.lucene.analysis.util.OpenStringBuilder: int len> = 0;

        return;
    }

    public char[] toCharArray()
    {
        org.apache.lucene.analysis.util.OpenStringBuilder r0;
        int $i0, $i1;
        char[] r1, $r2;

        r0 := @this: org.apache.lucene.analysis.util.OpenStringBuilder;

        $i0 = virtualinvoke r0.<org.apache.lucene.analysis.util.OpenStringBuilder: int size()>();

        r1 = newarray (char)[$i0];

        $r2 = r0.<org.apache.lucene.analysis.util.OpenStringBuilder: char[] buf>;

        $i1 = virtualinvoke r0.<org.apache.lucene.analysis.util.OpenStringBuilder: int size()>();

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r1, 0, $i1);

        return r1;
    }

    public java.lang.String toString()
    {
        org.apache.lucene.analysis.util.OpenStringBuilder r1;
        int $i0;
        char[] $r2;
        java.lang.String $r0;

        r1 := @this: org.apache.lucene.analysis.util.OpenStringBuilder;

        $r0 = new java.lang.String;

        $r2 = r1.<org.apache.lucene.analysis.util.OpenStringBuilder: char[] buf>;

        $i0 = virtualinvoke r1.<org.apache.lucene.analysis.util.OpenStringBuilder: int size()>();

        specialinvoke $r0.<java.lang.String: void <init>(char[],int,int)>($r2, 0, $i0);

        return $r0;
    }
}
