public abstract class org.objectweb.asm.util.Printer extends java.lang.Object
{
    public static final java.lang.String[] OPCODES;
    public static final java.lang.String[] TYPES;
    public static final java.lang.String[] HANDLE_TAG;
    protected final int api;
    protected final java.lang.StringBuffer buf;
    public final java.util.List text;

    protected void <init>(int)
    {
        org.objectweb.asm.util.Printer r0;
        java.lang.StringBuffer $r1;
        int i0;
        java.util.ArrayList $r2;

        r0 := @this: org.objectweb.asm.util.Printer;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.objectweb.asm.util.Printer: int api> = i0;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        r0.<org.objectweb.asm.util.Printer: java.lang.StringBuffer buf> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.objectweb.asm.util.Printer: java.util.List text> = $r2;

        return;
    }

    public abstract void visit(int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[]);

    public abstract void visitSource(java.lang.String, java.lang.String);

    public abstract void visitOuterClass(java.lang.String, java.lang.String, java.lang.String);

    public abstract org.objectweb.asm.util.Printer visitClassAnnotation(java.lang.String, boolean);

    public abstract void visitClassAttribute(org.objectweb.asm.Attribute);

    public abstract void visitInnerClass(java.lang.String, java.lang.String, java.lang.String, int);

    public abstract org.objectweb.asm.util.Printer visitField(int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object);

    public abstract org.objectweb.asm.util.Printer visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[]);

    public abstract void visitClassEnd();

    public abstract void visit(java.lang.String, java.lang.Object);

    public abstract void visitEnum(java.lang.String, java.lang.String, java.lang.String);

    public abstract org.objectweb.asm.util.Printer visitAnnotation(java.lang.String, java.lang.String);

    public abstract org.objectweb.asm.util.Printer visitArray(java.lang.String);

    public abstract void visitAnnotationEnd();

    public abstract org.objectweb.asm.util.Printer visitFieldAnnotation(java.lang.String, boolean);

    public abstract void visitFieldAttribute(org.objectweb.asm.Attribute);

    public abstract void visitFieldEnd();

    public abstract org.objectweb.asm.util.Printer visitAnnotationDefault();

    public abstract org.objectweb.asm.util.Printer visitMethodAnnotation(java.lang.String, boolean);

    public abstract org.objectweb.asm.util.Printer visitParameterAnnotation(int, java.lang.String, boolean);

    public abstract void visitMethodAttribute(org.objectweb.asm.Attribute);

    public abstract void visitCode();

    public abstract void visitFrame(int, int, java.lang.Object[], int, java.lang.Object[]);

    public abstract void visitInsn(int);

    public abstract void visitIntInsn(int, int);

    public abstract void visitVarInsn(int, int);

    public abstract void visitTypeInsn(int, java.lang.String);

    public abstract void visitFieldInsn(int, java.lang.String, java.lang.String, java.lang.String);

    public abstract void visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String);

    public abstract transient void visitInvokeDynamicInsn(java.lang.String, java.lang.String, org.objectweb.asm.Handle, java.lang.Object[]);

    public abstract void visitJumpInsn(int, org.objectweb.asm.Label);

    public abstract void visitLabel(org.objectweb.asm.Label);

    public abstract void visitLdcInsn(java.lang.Object);

    public abstract void visitIincInsn(int, int);

    public abstract transient void visitTableSwitchInsn(int, int, org.objectweb.asm.Label, org.objectweb.asm.Label[]);

    public abstract void visitLookupSwitchInsn(org.objectweb.asm.Label, int[], org.objectweb.asm.Label[]);

    public abstract void visitMultiANewArrayInsn(java.lang.String, int);

    public abstract void visitTryCatchBlock(org.objectweb.asm.Label, org.objectweb.asm.Label, org.objectweb.asm.Label, java.lang.String);

    public abstract void visitLocalVariable(java.lang.String, java.lang.String, java.lang.String, org.objectweb.asm.Label, org.objectweb.asm.Label, int);

    public abstract void visitLineNumber(int, org.objectweb.asm.Label);

    public abstract void visitMaxs(int, int);

    public abstract void visitMethodEnd();

    public java.util.List getText()
    {
        java.util.List $r1;
        org.objectweb.asm.util.Printer r0;

        r0 := @this: org.objectweb.asm.util.Printer;

        $r1 = r0.<org.objectweb.asm.util.Printer: java.util.List text>;

        return $r1;
    }

    public void print(java.io.PrintWriter)
    {
        java.io.PrintWriter r0;
        java.util.List $r2;
        org.objectweb.asm.util.Printer r1;

        r1 := @this: org.objectweb.asm.util.Printer;

        r0 := @parameter0: java.io.PrintWriter;

        $r2 = r1.<org.objectweb.asm.util.Printer: java.util.List text>;

        staticinvoke <org.objectweb.asm.util.Printer: void printList(java.io.PrintWriter,java.util.List)>(r0, $r2);

        return;
    }

    public static void appendString(java.lang.StringBuffer, java.lang.String)
    {
        java.lang.StringBuffer r0;
        int $i0, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        java.lang.String r1, $r2;
        char $c1;

        r0 := @parameter0: java.lang.StringBuffer;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(34);

        i2 = 0;

     label01:
        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if i2 >= $i0 goto label12;

        $c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i2);

        $i3 = (int) $c1;

        if $i3 != 10 goto label02;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\n");

        goto label11;

     label02:
        $i4 = (int) $c1;

        if $i4 != 13 goto label03;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\r");

        goto label11;

     label03:
        $i5 = (int) $c1;

        if $i5 != 92 goto label04;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\\\");

        goto label11;

     label04:
        $i6 = (int) $c1;

        if $i6 != 34 goto label05;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\\"");

        goto label11;

     label05:
        $i7 = (int) $c1;

        if $i7 < 32 goto label06;

        $i8 = (int) $c1;

        if $i8 <= 127 goto label10;

     label06:
        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\u");

        $i9 = (int) $c1;

        if $i9 >= 16 goto label07;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("000");

        goto label09;

     label07:
        $i10 = (int) $c1;

        if $i10 >= 256 goto label08;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("00");

        goto label09;

     label08:
        $i11 = (int) $c1;

        if $i11 >= 4096 goto label09;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(48);

     label09:
        $i12 = (int) $c1;

        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int,int)>($i12, 16);

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        goto label11;

     label10:
        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c1);

     label11:
        i2 = i2 + 1;

        goto label01;

     label12:
        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(34);

        return;
    }

    static void printList(java.io.PrintWriter, java.util.List)
    {
        java.io.PrintWriter r2;
        java.util.List r0, $r4;
        int $i0, i1;
        java.lang.Object $r1;
        java.lang.String $r3;
        boolean $z0;

        r2 := @parameter0: java.io.PrintWriter;

        r0 := @parameter1: java.util.List;

        i1 = 0;

     label1:
        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if i1 >= $i0 goto label4;

        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i1);

        $z0 = $r1 instanceof java.util.List;

        if $z0 == 0 goto label2;

        $r4 = (java.util.List) $r1;

        staticinvoke <org.objectweb.asm.util.Printer: void printList(java.io.PrintWriter,java.util.List)>(r2, $r4);

        goto label3;

     label2:
        $r3 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>($r3);

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0, $r1, $r2, $r3, $r6, $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, i9, i10, i11, i12;
        java.lang.String $r4, $r5, $r7, $r8, $r10, r11, $r12, r13, r14;

        r11 = "NOP,ACONST_NULL,ICONST_M1,ICONST_0,ICONST_1,ICONST_2,ICONST_3,ICONST_4,ICONST_5,LCONST_0,LCONST_1,FCONST_0,FCONST_1,FCONST_2,DCONST_0,DCONST_1,BIPUSH,SIPUSH,LDC,,,ILOAD,LLOAD,FLOAD,DLOAD,ALOAD,,,,,,,,,,,,,,,,,,,,,IALOAD,LALOAD,FALOAD,DALOAD,AALOAD,BALOAD,CALOAD,SALOAD,ISTORE,LSTORE,FSTORE,DSTORE,ASTORE,,,,,,,,,,,,,,,,,,,,,IASTORE,LASTORE,FASTORE,DASTORE,AASTORE,BASTORE,CASTORE,SASTORE,POP,POP2,DUP,DUP_X1,DUP_X2,DUP2,DUP2_X1,DUP2_X2,SWAP,IADD,LADD,FADD,DADD,ISUB,LSUB,FSUB,DSUB,IMUL,LMUL,FMUL,DMUL,IDIV,LDIV,FDIV,DDIV,IREM,LREM,FREM,DREM,INEG,LNEG,FNEG,DNEG,ISHL,LSHL,ISHR,LSHR,IUSHR,LUSHR,IAND,LAND,IOR,LOR,IXOR,LXOR,IINC,I2L,I2F,I2D,L2I,L2F,L2D,F2I,F2L,F2D,D2I,D2L,D2F,I2B,I2C,I2S,LCMP,FCMPL,FCMPG,DCMPL,DCMPG,IFEQ,IFNE,IFLT,IFGE,IFGT,IFLE,IF_ICMPEQ,IF_ICMPNE,IF_ICMPLT,IF_ICMPGE,IF_ICMPGT,IF_ICMPLE,IF_ACMPEQ,IF_ACMPNE,GOTO,JSR,RET,TABLESWITCH,LOOKUPSWITCH,IRETURN,LRETURN,FRETURN,DRETURN,ARETURN,RETURN,GETSTATIC,PUTSTATIC,GETFIELD,PUTFIELD,INVOKEVIRTUAL,INVOKESPECIAL,INVOKESTATIC,INVOKEINTERFACE,INVOKEDYNAMIC,NEW,NEWARRAY,ANEWARRAY,ARRAYLENGTH,ATHROW,CHECKCAST,INSTANCEOF,MONITORENTER,MONITOREXIT,,MULTIANEWARRAY,IFNULL,IFNONNULL,";

        $r0 = newarray (java.lang.String)[200];

        <org.objectweb.asm.util.Printer: java.lang.String[] OPCODES> = $r0;

        i7 = 0;

        i8 = 0;

     label1:
        $r10 = "NOP,ACONST_NULL,ICONST_M1,ICONST_0,ICONST_1,ICONST_2,ICONST_3,ICONST_4,ICONST_5,LCONST_0,LCONST_1,FCONST_0,FCONST_1,FCONST_2,DCONST_0,DCONST_1,BIPUSH,SIPUSH,LDC,,,ILOAD,LLOAD,FLOAD,DLOAD,ALOAD,,,,,,,,,,,,,,,,,,,,,IALOAD,LALOAD,FALOAD,DALOAD,AALOAD,BALOAD,CALOAD,SALOAD,ISTORE,LSTORE,FSTORE,DSTORE,ASTORE,,,,,,,,,,,,,,,,,,,,,IASTORE,LASTORE,FASTORE,DASTORE,AASTORE,BASTORE,CASTORE,SASTORE,POP,POP2,DUP,DUP_X1,DUP_X2,DUP2,DUP2_X1,DUP2_X2,SWAP,IADD,LADD,FADD,DADD,ISUB,LSUB,FSUB,DSUB,IMUL,LMUL,FMUL,DMUL,IDIV,LDIV,FDIV,DDIV,IREM,LREM,FREM,DREM,INEG,LNEG,FNEG,DNEG,ISHL,LSHL,ISHR,LSHR,IUSHR,LUSHR,IAND,LAND,IOR,LOR,IXOR,LXOR,IINC,I2L,I2F,I2D,L2I,L2F,L2D,F2I,F2L,F2D,D2I,D2L,D2F,I2B,I2C,I2S,LCMP,FCMPL,FCMPG,DCMPL,DCMPG,IFEQ,IFNE,IFLT,IFGE,IFGT,IFLE,IF_ICMPEQ,IF_ICMPNE,IF_ICMPLT,IF_ICMPGE,IF_ICMPGT,IF_ICMPLE,IF_ACMPEQ,IF_ACMPNE,GOTO,JSR,RET,TABLESWITCH,LOOKUPSWITCH,IRETURN,LRETURN,FRETURN,DRETURN,ARETURN,RETURN,GETSTATIC,PUTSTATIC,GETFIELD,PUTFIELD,INVOKEVIRTUAL,INVOKESPECIAL,INVOKESTATIC,INVOKEINTERFACE,INVOKEDYNAMIC,NEW,NEWARRAY,ANEWARRAY,ARRAYLENGTH,ATHROW,CHECKCAST,INSTANCEOF,MONITORENTER,MONITOREXIT,,MULTIANEWARRAY,IFNULL,IFNONNULL,";

        $i0 = virtualinvoke $r10.<java.lang.String: int indexOf(int,int)>(44, i8);

        if $i0 <= 0 goto label4;

        $r9 = <org.objectweb.asm.util.Printer: java.lang.String[] OPCODES>;

        $i5 = i7;

        i7 = i7 + 1;

        $i6 = i8 + 1;

        if $i6 != $i0 goto label2;

        $r12 = null;

        goto label3;

     label2:
        $r12 = virtualinvoke r11.<java.lang.String: java.lang.String substring(int,int)>(i8, $i0);

     label3:
        $r9[$i5] = $r12;

        i8 = $i0 + 1;

        goto label1;

     label4:
        r13 = "T_BOOLEAN,T_CHAR,T_FLOAT,T_DOUBLE,T_BYTE,T_SHORT,T_INT,T_LONG,";

        $r1 = newarray (java.lang.String)[12];

        <org.objectweb.asm.util.Printer: java.lang.String[] TYPES> = $r1;

        i9 = 0;

        i10 = 4;

     label5:
        $r8 = "T_BOOLEAN,T_CHAR,T_FLOAT,T_DOUBLE,T_BYTE,T_SHORT,T_INT,T_LONG,";

        $i1 = virtualinvoke $r8.<java.lang.String: int indexOf(int,int)>(44, i9);

        if $i1 <= 0 goto label6;

        $r6 = <org.objectweb.asm.util.Printer: java.lang.String[] TYPES>;

        $i4 = i10;

        i10 = i10 + 1;

        $r7 = virtualinvoke r13.<java.lang.String: java.lang.String substring(int,int)>(i9, $i1);

        $r6[$i4] = $r7;

        i9 = $i1 + 1;

        goto label5;

     label6:
        r14 = "H_GETFIELD,H_GETSTATIC,H_PUTFIELD,H_PUTSTATIC,H_INVOKEVIRTUAL,H_INVOKESTATIC,H_INVOKESPECIAL,H_NEWINVOKESPECIAL,H_INVOKEINTERFACE,";

        $r2 = newarray (java.lang.String)[10];

        <org.objectweb.asm.util.Printer: java.lang.String[] HANDLE_TAG> = $r2;

        i11 = 0;

        i12 = 1;

     label7:
        $r5 = "H_GETFIELD,H_GETSTATIC,H_PUTFIELD,H_PUTSTATIC,H_INVOKEVIRTUAL,H_INVOKESTATIC,H_INVOKESPECIAL,H_NEWINVOKESPECIAL,H_INVOKEINTERFACE,";

        $i2 = virtualinvoke $r5.<java.lang.String: int indexOf(int,int)>(44, i11);

        if $i2 <= 0 goto label8;

        $r3 = <org.objectweb.asm.util.Printer: java.lang.String[] HANDLE_TAG>;

        $i3 = i12;

        i12 = i12 + 1;

        $r4 = virtualinvoke r14.<java.lang.String: java.lang.String substring(int,int)>(i11, $i2);

        $r3[$i3] = $r4;

        i11 = $i2 + 1;

        goto label7;

     label8:
        return;
    }
}
