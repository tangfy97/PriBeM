final class org.waveprotocol.wave.model.document.util.LineContainers$2 extends java.lang.Object implements org.waveprotocol.wave.model.document.MutableDocument$Action
{
    final org.waveprotocol.wave.model.document.util.XmlStringBuilder val$content;

    void <init>(org.waveprotocol.wave.model.document.util.XmlStringBuilder)
    {
        org.waveprotocol.wave.model.document.util.XmlStringBuilder r1;
        org.waveprotocol.wave.model.document.util.LineContainers$2 r0;

        r0 := @this: org.waveprotocol.wave.model.document.util.LineContainers$2;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.XmlStringBuilder;

        r0.<org.waveprotocol.wave.model.document.util.LineContainers$2: org.waveprotocol.wave.model.document.util.XmlStringBuilder val$content> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void exec(org.waveprotocol.wave.model.document.MutableDocument)
    {
        org.waveprotocol.wave.model.document.util.XmlStringBuilder $r2;
        org.waveprotocol.wave.model.document.MutableDocument r0;
        org.waveprotocol.wave.model.document.util.LineContainers$2 r1;

        r1 := @this: org.waveprotocol.wave.model.document.util.LineContainers$2;

        r0 := @parameter0: org.waveprotocol.wave.model.document.MutableDocument;

        $r2 = r1.<org.waveprotocol.wave.model.document.util.LineContainers$2: org.waveprotocol.wave.model.document.util.XmlStringBuilder val$content>;

        staticinvoke <org.waveprotocol.wave.model.document.util.LineContainers: java.lang.Object appendLine(org.waveprotocol.wave.model.document.MutableDocument,org.waveprotocol.wave.model.document.util.XmlStringBuilder)>(r0, $r2);

        return;
    }
}
