public class org.eclipse.jetty.util.statistic.SampleStatistic extends java.lang.Object
{
    protected final java.util.concurrent.atomic.AtomicLong _max;
    protected final java.util.concurrent.atomic.AtomicLong _total;
    protected final java.util.concurrent.atomic.AtomicLong _count;
    protected final java.util.concurrent.atomic.AtomicLong _totalVariance100;

    public void <init>()
    {
        java.util.concurrent.atomic.AtomicLong $r1, $r2, $r3, $r4;
        org.eclipse.jetty.util.statistic.SampleStatistic r0;

        r0 := @this: org.eclipse.jetty.util.statistic.SampleStatistic;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicLong: void <init>()>();

        r0.<org.eclipse.jetty.util.statistic.SampleStatistic: java.util.concurrent.atomic.AtomicLong _max> = $r1;

        $r2 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicLong: void <init>()>();

        r0.<org.eclipse.jetty.util.statistic.SampleStatistic: java.util.concurrent.atomic.AtomicLong _total> = $r2;

        $r3 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicLong: void <init>()>();

        r0.<org.eclipse.jetty.util.statistic.SampleStatistic: java.util.concurrent.atomic.AtomicLong _count> = $r3;

        $r4 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r4.<java.util.concurrent.atomic.AtomicLong: void <init>()>();

        r0.<org.eclipse.jetty.util.statistic.SampleStatistic: java.util.concurrent.atomic.AtomicLong _totalVariance100> = $r4;

        return;
    }

    public void reset()
    {
        java.util.concurrent.atomic.AtomicLong $r1, $r2, $r3, $r4;
        org.eclipse.jetty.util.statistic.SampleStatistic r0;

        r0 := @this: org.eclipse.jetty.util.statistic.SampleStatistic;

        $r1 = r0.<org.eclipse.jetty.util.statistic.SampleStatistic: java.util.concurrent.atomic.AtomicLong _max>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: void set(long)>(0L);

        $r2 = r0.<org.eclipse.jetty.util.statistic.SampleStatistic: java.util.concurrent.atomic.AtomicLong _total>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicLong: void set(long)>(0L);

        $r3 = r0.<org.eclipse.jetty.util.statistic.SampleStatistic: java.util.concurrent.atomic.AtomicLong _count>;

        virtualinvoke $r3.<java.util.concurrent.atomic.AtomicLong: void set(long)>(0L);

        $r4 = r0.<org.eclipse.jetty.util.statistic.SampleStatistic: java.util.concurrent.atomic.AtomicLong _totalVariance100>;

        virtualinvoke $r4.<java.util.concurrent.atomic.AtomicLong: void set(long)>(0L);

        return;
    }

    public void set(long)
    {
        long l0, $l1, $l2, $l4, l5, $l6, l7, $l8;
        java.util.concurrent.atomic.AtomicLong $r1, $r2, $r3, $r4;
        byte $b3;
        org.eclipse.jetty.util.statistic.SampleStatistic r0;
        int $i9;

        r0 := @this: org.eclipse.jetty.util.statistic.SampleStatistic;

        l0 := @parameter0: long;

        $r1 = r0.<org.eclipse.jetty.util.statistic.SampleStatistic: java.util.concurrent.atomic.AtomicLong _total>;

        $l1 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>(l0);

        $r2 = r0.<org.eclipse.jetty.util.statistic.SampleStatistic: java.util.concurrent.atomic.AtomicLong _count>;

        $l2 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>();

        $b3 = $l2 cmp 1L;

        $i9 = (int) $b3;

        if $i9 <= 0 goto label1;

        $l4 = $l1 * 10L;

        l5 = $l4 / $l2;

        $l6 = l0 * 10L;

        l7 = $l6 - l5;

        $r4 = r0.<org.eclipse.jetty.util.statistic.SampleStatistic: java.util.concurrent.atomic.AtomicLong _totalVariance100>;

        $l8 = l7 * l7;

        virtualinvoke $r4.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>($l8);

     label1:
        $r3 = r0.<org.eclipse.jetty.util.statistic.SampleStatistic: java.util.concurrent.atomic.AtomicLong _max>;

        staticinvoke <org.eclipse.jetty.util.Atomics: void updateMax(java.util.concurrent.atomic.AtomicLong,long)>($r3, l0);

        return;
    }

    public long getMax()
    {
        org.eclipse.jetty.util.statistic.SampleStatistic r0;
        java.util.concurrent.atomic.AtomicLong $r1;
        long $l0;

        r0 := @this: org.eclipse.jetty.util.statistic.SampleStatistic;

        $r1 = r0.<org.eclipse.jetty.util.statistic.SampleStatistic: java.util.concurrent.atomic.AtomicLong _max>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long get()>();

        return $l0;
    }

    public long getTotal()
    {
        org.eclipse.jetty.util.statistic.SampleStatistic r0;
        java.util.concurrent.atomic.AtomicLong $r1;
        long $l0;

        r0 := @this: org.eclipse.jetty.util.statistic.SampleStatistic;

        $r1 = r0.<org.eclipse.jetty.util.statistic.SampleStatistic: java.util.concurrent.atomic.AtomicLong _total>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long get()>();

        return $l0;
    }

    public long getCount()
    {
        org.eclipse.jetty.util.statistic.SampleStatistic r0;
        java.util.concurrent.atomic.AtomicLong $r1;
        long $l0;

        r0 := @this: org.eclipse.jetty.util.statistic.SampleStatistic;

        $r1 = r0.<org.eclipse.jetty.util.statistic.SampleStatistic: java.util.concurrent.atomic.AtomicLong _count>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long get()>();

        return $l0;
    }

    public double getMean()
    {
        long $l0, $l1;
        java.util.concurrent.atomic.AtomicLong $r1, $r2;
        org.eclipse.jetty.util.statistic.SampleStatistic r0;
        double $d0, $d1, $d2;

        r0 := @this: org.eclipse.jetty.util.statistic.SampleStatistic;

        $r1 = r0.<org.eclipse.jetty.util.statistic.SampleStatistic: java.util.concurrent.atomic.AtomicLong _total>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $d0 = (double) $l0;

        $r2 = r0.<org.eclipse.jetty.util.statistic.SampleStatistic: java.util.concurrent.atomic.AtomicLong _count>;

        $l1 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $d1 = (double) $l1;

        $d2 = $d0 / $d1;

        return $d2;
    }

    public double getVariance()
    {
        long $l0, $l1, $l3;
        java.util.concurrent.atomic.AtomicLong $r1, $r2;
        byte $b2;
        org.eclipse.jetty.util.statistic.SampleStatistic r0;
        int $i4;
        double $d0, $d1, $d2, $d3;

        r0 := @this: org.eclipse.jetty.util.statistic.SampleStatistic;

        $r1 = r0.<org.eclipse.jetty.util.statistic.SampleStatistic: java.util.concurrent.atomic.AtomicLong _totalVariance100>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $r2 = r0.<org.eclipse.jetty.util.statistic.SampleStatistic: java.util.concurrent.atomic.AtomicLong _count>;

        $l1 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $b2 = $l1 cmp 1L;

        $i4 = (int) $b2;

        if $i4 <= 0 goto label1;

        $d0 = (double) $l0;

        $d2 = $d0 / 100.0;

        $l3 = $l1 - 1L;

        $d1 = (double) $l3;

        $d3 = $d2 / $d1;

        goto label2;

     label1:
        $d3 = 0.0;

     label2:
        return $d3;
    }

    public double getStdDev()
    {
        org.eclipse.jetty.util.statistic.SampleStatistic r0;
        double $d0, $d1;

        r0 := @this: org.eclipse.jetty.util.statistic.SampleStatistic;

        $d0 = virtualinvoke r0.<org.eclipse.jetty.util.statistic.SampleStatistic: double getVariance()>();

        $d1 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        return $d1;
    }
}
