class org.waveprotocol.wave.client.editor.event.EditorEventHandler$1 extends java.lang.Object implements org.waveprotocol.wave.client.editor.event.CompositionEventHandler$CompositionListener
{
    final org.waveprotocol.wave.client.editor.event.EditorEventHandler this$0;

    void <init>(org.waveprotocol.wave.client.editor.event.EditorEventHandler)
    {
        org.waveprotocol.wave.client.editor.event.EditorEventHandler$1 r0;
        org.waveprotocol.wave.client.editor.event.EditorEventHandler r1;

        r0 := @this: org.waveprotocol.wave.client.editor.event.EditorEventHandler$1;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.event.EditorEventHandler;

        r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler$1: org.waveprotocol.wave.client.editor.event.EditorEventHandler this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void compositionStart(org.waveprotocol.wave.client.editor.event.EditorEvent)
    {
        org.waveprotocol.wave.client.editor.event.EditorEventHandler$1 r0;
        org.waveprotocol.wave.client.editor.event.EditorEventHandler $r2;
        org.waveprotocol.wave.client.editor.event.EditorEvent r1;

        r0 := @this: org.waveprotocol.wave.client.editor.event.EditorEventHandler$1;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.event.EditorEvent;

        $r2 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler$1: org.waveprotocol.wave.client.editor.event.EditorEventHandler this$0>;

        staticinvoke <org.waveprotocol.wave.client.editor.event.EditorEventHandler: void access$000(org.waveprotocol.wave.client.editor.event.EditorEventHandler,org.waveprotocol.wave.client.editor.event.EditorEvent)>($r2, r1);

        return;
    }

    public void compositionUpdate()
    {
        org.waveprotocol.wave.client.editor.event.EditorEventHandler$1 r0;
        org.waveprotocol.wave.client.editor.event.EditorEventHandler $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.event.EditorEventHandler$1;

        $r1 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler$1: org.waveprotocol.wave.client.editor.event.EditorEventHandler this$0>;

        staticinvoke <org.waveprotocol.wave.client.editor.event.EditorEventHandler: void access$100(org.waveprotocol.wave.client.editor.event.EditorEventHandler)>($r1);

        return;
    }

    public void compositionEnd()
    {
        org.waveprotocol.wave.client.editor.event.EditorEventHandler$1 r0;
        org.waveprotocol.wave.client.editor.event.EditorEventHandler $r1;
        java.lang.Throwable $r2;

        r0 := @this: org.waveprotocol.wave.client.editor.event.EditorEventHandler$1;

        staticinvoke <org.waveprotocol.wave.client.editor.EditorStaticDeps: void startIgnoreMutations()>();

     label1:
        $r1 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler$1: org.waveprotocol.wave.client.editor.event.EditorEventHandler this$0>;

        staticinvoke <org.waveprotocol.wave.client.editor.event.EditorEventHandler: void access$200(org.waveprotocol.wave.client.editor.event.EditorEventHandler)>($r1);

     label2:
        staticinvoke <org.waveprotocol.wave.client.editor.EditorStaticDeps: void endIgnoreMutations()>();

        goto label5;

     label3:
        $r2 := @caughtexception;

     label4:
        staticinvoke <org.waveprotocol.wave.client.editor.EditorStaticDeps: void endIgnoreMutations()>();

        throw $r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public volatile void compositionStart(java.lang.Object)
    {
        org.waveprotocol.wave.client.editor.event.EditorEventHandler$1 r0;
        java.lang.Object r1;
        org.waveprotocol.wave.client.editor.event.EditorEvent $r2;

        r0 := @this: org.waveprotocol.wave.client.editor.event.EditorEventHandler$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.client.editor.event.EditorEvent) r1;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler$1: void compositionStart(org.waveprotocol.wave.client.editor.event.EditorEvent)>($r2);

        return;
    }
}
