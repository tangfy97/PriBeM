class com.mongodb.DBPortPool extends com.mongodb.util.SimplePool
{
    final com.mongodb.MongoOptions _options;
    private final java.util.concurrent.Semaphore _waitingSem;
    final java.net.InetSocketAddress _addr;
    boolean _everWorked;

    void <init>(java.net.InetSocketAddress, com.mongodb.MongoOptions)
    {
        com.mongodb.DBPortPool r0;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.String $r4, $r6;
        com.mongodb.MongoOptions r7, $r9, $r10;
        java.util.concurrent.Semaphore $r8;
        java.net.InetSocketAddress r3;
        java.lang.StringBuilder $r1, $r2, $r5;

        r0 := @this: com.mongodb.DBPortPool;

        r3 := @parameter0: java.net.InetSocketAddress;

        r7 := @parameter1: com.mongodb.MongoOptions;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DBPortPool-");

        $r4 = virtualinvoke r3.<java.net.InetSocketAddress: java.lang.String toString()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $i1 = r7.<com.mongodb.MongoOptions: int connectionsPerHost>;

        $i0 = r7.<com.mongodb.MongoOptions: int connectionsPerHost>;

        specialinvoke r0.<com.mongodb.util.SimplePool: void <init>(java.lang.String,int,int)>($r6, $i1, $i0);

        r0.<com.mongodb.DBPortPool: boolean _everWorked> = 0;

        r0.<com.mongodb.DBPortPool: com.mongodb.MongoOptions _options> = r7;

        r0.<com.mongodb.DBPortPool: java.net.InetSocketAddress _addr> = r3;

        $r8 = new java.util.concurrent.Semaphore;

        $r9 = r0.<com.mongodb.DBPortPool: com.mongodb.MongoOptions _options>;

        $i3 = $r9.<com.mongodb.MongoOptions: int connectionsPerHost>;

        $r10 = r0.<com.mongodb.DBPortPool: com.mongodb.MongoOptions _options>;

        $i2 = $r10.<com.mongodb.MongoOptions: int threadsAllowedToBlockForConnectionMultiplier>;

        $i4 = $i3 * $i2;

        specialinvoke $r8.<java.util.concurrent.Semaphore: void <init>(int)>($i4);

        r0.<com.mongodb.DBPortPool: java.util.concurrent.Semaphore _waitingSem> = $r8;

        return;
    }

    protected long memSize(com.mongodb.DBPort)
    {
        com.mongodb.DBPort r1;
        com.mongodb.DBPortPool r0;

        r0 := @this: com.mongodb.DBPortPool;

        r1 := @parameter0: com.mongodb.DBPort;

        return 0L;
    }

    protected int pick(int, boolean)
    {
        com.mongodb.DBPort r5;
        com.mongodb.DBPortPool r1;
        java.util.List $r2, $r3;
        java.lang.Thread $r0;
        int $i0, $i1, i2, $i3, i4, $i6;
        java.lang.Object $r4;
        boolean z0;

        r1 := @this: com.mongodb.DBPortPool;

        i2 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $i0 = virtualinvoke $r0.<java.lang.Object: int hashCode()>();

        $r2 = r1.<com.mongodb.DBPortPool: java.util.List _availSafe>;

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        i4 = 0;

     label1:
        if i4 >= $i1 goto label3;

        $r3 = r1.<com.mongodb.DBPortPool: java.util.List _availSafe>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i4);

        r5 = (com.mongodb.DBPort) $r4;

        $i3 = r5.<com.mongodb.DBPort: int _lastThread>;

        if $i3 != $i0 goto label2;

        return i4;

     label2:
        i4 = i4 + 1;

        goto label1;

     label3:
        if z0 == 0 goto label4;

        $i6 = (int) -1;

        return $i6;

     label4:
        return i2;
    }

    public com.mongodb.DBPort get()
    {
        java.lang.Throwable $r9;
        com.mongodb.DBPort r11;
        com.mongodb.DBPortPool r0;
        long $l1;
        com.mongodb.DBPortPool$ConnectionWaitTimeOut $r6;
        java.lang.Thread $r5;
        int $i0, $i2, $i3;
        boolean $z0;
        com.mongodb.MongoOptions $r2, $r7;
        com.mongodb.DBPortPool$SemaphoresOut $r8;
        java.util.concurrent.Semaphore $r1, $r4, $r10;
        java.lang.Object $r3;

        r0 := @this: com.mongodb.DBPortPool;

        $r1 = r0.<com.mongodb.DBPortPool: java.util.concurrent.Semaphore _waitingSem>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.Semaphore: boolean tryAcquire()>();

        if $z0 != 0 goto label1;

        $r8 = new com.mongodb.DBPortPool$SemaphoresOut;

        specialinvoke $r8.<com.mongodb.DBPortPool$SemaphoresOut: void <init>()>();

        throw $r8;

     label1:
        $r2 = r0.<com.mongodb.DBPortPool: com.mongodb.MongoOptions _options>;

        $i0 = $r2.<com.mongodb.MongoOptions: int maxWaitTime>;

        $l1 = (long) $i0;

        $r3 = virtualinvoke r0.<com.mongodb.DBPortPool: java.lang.Object get(long)>($l1);

        r11 = (com.mongodb.DBPort) $r3;

     label2:
        $r4 = r0.<com.mongodb.DBPortPool: java.util.concurrent.Semaphore _waitingSem>;

        virtualinvoke $r4.<java.util.concurrent.Semaphore: void release()>();

        goto label5;

     label3:
        $r9 := @caughtexception;

     label4:
        $r10 = r0.<com.mongodb.DBPortPool: java.util.concurrent.Semaphore _waitingSem>;

        virtualinvoke $r10.<java.util.concurrent.Semaphore: void release()>();

        throw $r9;

     label5:
        if r11 != null goto label6;

        $r6 = new com.mongodb.DBPortPool$ConnectionWaitTimeOut;

        $r7 = r0.<com.mongodb.DBPortPool: com.mongodb.MongoOptions _options>;

        $i3 = $r7.<com.mongodb.MongoOptions: int maxWaitTime>;

        specialinvoke $r6.<com.mongodb.DBPortPool$ConnectionWaitTimeOut: void <init>(int)>($i3);

        throw $r6;

     label6:
        $r5 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $i2 = virtualinvoke $r5.<java.lang.Object: int hashCode()>();

        r11.<com.mongodb.DBPort: int _lastThread> = $i2;

        return r11;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    void gotError(java.lang.Exception)
    {
        com.mongodb.DBPort r7, $r10;
        com.mongodb.DBPortPool r4;
        java.util.logging.Level $r1;
        java.util.ArrayList $r3;
        int $i0;
        boolean $z0, $z1, $z2, $z3;
        com.mongodb.MongoOptions $r8;
        java.util.Iterator $r5;
        java.util.logging.Logger $r2;
        java.lang.Exception r0;
        java.lang.Object $r6, $r9;

        r4 := @this: com.mongodb.DBPortPool;

        r0 := @parameter0: java.lang.Exception;

        $z0 = r0 instanceof java.nio.channels.ClosedByInterruptException;

        if $z0 != 0 goto label1;

        $z1 = r0 instanceof java.lang.InterruptedException;

        if $z1 == 0 goto label2;

     label1:
        return;

     label2:
        $z2 = r0 instanceof java.net.SocketTimeoutException;

        if $z2 == 0 goto label3;

        $r8 = r4.<com.mongodb.DBPortPool: com.mongodb.MongoOptions _options>;

        $i0 = $r8.<com.mongodb.MongoOptions: int socketTimeout>;

        if $i0 <= 0 goto label3;

        return;

     label3:
        $r2 = <com.mongodb.Bytes: java.util.logging.Logger LOGGER>;

        $r1 = <java.util.logging.Level: java.util.logging.Level INFO>;

        virtualinvoke $r2.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r1, "emptying DBPortPool b/c of error", r0);

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

     label4:
        $r9 = virtualinvoke r4.<com.mongodb.DBPortPool: java.lang.Object get(long)>(0L);

        $r10 = (com.mongodb.DBPort) $r9;

        if $r10 != null goto label5;

        goto label6;

     label5:
        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r10);

        goto label4;

     label6:
        $r5 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label7:
        $z3 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label8;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (com.mongodb.DBPort) $r6;

        virtualinvoke r7.<com.mongodb.DBPort: void close()>();

        virtualinvoke r4.<com.mongodb.DBPortPool: void done(java.lang.Object)>(r7);

        goto label7;

     label8:
        return;
    }

    void close()
    {
        com.mongodb.DBPortPool r0;

        r0 := @this: com.mongodb.DBPortPool;

        virtualinvoke r0.<com.mongodb.DBPortPool: void clear()>();

        return;
    }

    public void cleanup(com.mongodb.DBPort)
    {
        com.mongodb.DBPort r0;
        com.mongodb.DBPortPool r1;

        r1 := @this: com.mongodb.DBPortPool;

        r0 := @parameter0: com.mongodb.DBPort;

        virtualinvoke r0.<com.mongodb.DBPort: void close()>();

        return;
    }

    public boolean ok(com.mongodb.DBPort)
    {
        com.mongodb.DBPort r1;
        com.mongodb.DBPortPool r0;
        java.net.InetSocketAddress $r2, $r3;
        boolean $z0;

        r0 := @this: com.mongodb.DBPortPool;

        r1 := @parameter0: com.mongodb.DBPort;

        $r3 = r0.<com.mongodb.DBPortPool: java.net.InetSocketAddress _addr>;

        $r2 = r1.<com.mongodb.DBPort: java.net.InetSocketAddress _addr>;

        $z0 = virtualinvoke $r3.<java.net.InetSocketAddress: boolean equals(java.lang.Object)>($r2);

        return $z0;
    }

    protected com.mongodb.DBPort createNew() throws com.mongodb.MongoInternalException
    {
        com.mongodb.DBPort $r0;
        com.mongodb.MongoInternalException $r5;
        com.mongodb.DBPortPool r1;
        com.mongodb.MongoOptions $r2;
        java.io.IOException $r4;
        java.net.InetSocketAddress $r3, $r8;
        java.lang.StringBuilder $r6, $r7, $r9;
        java.lang.String $r10;

        r1 := @this: com.mongodb.DBPortPool;

     label1:
        $r0 = new com.mongodb.DBPort;

        $r3 = r1.<com.mongodb.DBPortPool: java.net.InetSocketAddress _addr>;

        $r2 = r1.<com.mongodb.DBPortPool: com.mongodb.MongoOptions _options>;

        specialinvoke $r0.<com.mongodb.DBPort: void <init>(java.net.InetSocketAddress,com.mongodb.DBPortPool,com.mongodb.MongoOptions)>($r3, r1, $r2);

     label2:
        return $r0;

     label3:
        $r4 := @caughtexception;

        $r5 = new com.mongodb.MongoInternalException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("can\'t create port to:");

        $r8 = r1.<com.mongodb.DBPortPool: java.net.InetSocketAddress _addr>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<com.mongodb.MongoInternalException: void <init>(java.lang.String,java.lang.Throwable)>($r10, $r4);

        throw $r5;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public volatile java.lang.Object get()
    {
        com.mongodb.DBPort $r1;
        com.mongodb.DBPortPool r0;

        r0 := @this: com.mongodb.DBPortPool;

        $r1 = virtualinvoke r0.<com.mongodb.DBPortPool: com.mongodb.DBPort get()>();

        return $r1;
    }

    public volatile void cleanup(java.lang.Object)
    {
        com.mongodb.DBPort $r2;
        com.mongodb.DBPortPool r0;
        java.lang.Object r1;

        r0 := @this: com.mongodb.DBPortPool;

        r1 := @parameter0: java.lang.Object;

        $r2 = (com.mongodb.DBPort) r1;

        virtualinvoke r0.<com.mongodb.DBPortPool: void cleanup(com.mongodb.DBPort)>($r2);

        return;
    }

    public volatile boolean ok(java.lang.Object)
    {
        com.mongodb.DBPort $r2;
        com.mongodb.DBPortPool r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: com.mongodb.DBPortPool;

        r1 := @parameter0: java.lang.Object;

        $r2 = (com.mongodb.DBPort) r1;

        $z0 = virtualinvoke r0.<com.mongodb.DBPortPool: boolean ok(com.mongodb.DBPort)>($r2);

        return $z0;
    }

    protected volatile java.lang.Object createNew()
    {
        com.mongodb.DBPort $r1;
        com.mongodb.DBPortPool r0;

        r0 := @this: com.mongodb.DBPortPool;

        $r1 = virtualinvoke r0.<com.mongodb.DBPortPool: com.mongodb.DBPort createNew()>();

        return $r1;
    }
}
