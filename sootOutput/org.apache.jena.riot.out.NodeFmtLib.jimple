public class org.apache.jena.riot.out.NodeFmtLib extends java.lang.Object
{
    static org.apache.jena.riot.system.PrefixMap dftPrefixMap;
    private static final boolean onlySafeBNodeLabels;
    static char encodeMarkerChar;
    private static char LabelLeadingLetter;
    private static int relFlags;

    public void <init>()
    {
        org.apache.jena.riot.out.NodeFmtLib r0;

        r0 := @this: org.apache.jena.riot.out.NodeFmtLib;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String str(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.graph.Node[] $r0;
        com.hp.hpl.jena.graph.Node $r2, $r3, $r4;
        java.lang.String $r5;
        com.hp.hpl.jena.graph.Triple r1;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r0 = newarray (com.hp.hpl.jena.graph.Node)[3];

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        $r0[0] = $r2;

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r0[1] = $r3;

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        $r0[2] = $r4;

        $r5 = staticinvoke <org.apache.jena.riot.out.NodeFmtLib: java.lang.String strNodes(com.hp.hpl.jena.graph.Node[])>($r0);

        return $r5;
    }

    public static java.lang.String str(com.hp.hpl.jena.sparql.core.Quad)
    {
        com.hp.hpl.jena.graph.Node[] $r0;
        com.hp.hpl.jena.graph.Node $r2, $r3, $r4, $r5;
        java.lang.String $r6;
        com.hp.hpl.jena.sparql.core.Quad r1;

        r1 := @parameter0: com.hp.hpl.jena.sparql.core.Quad;

        $r0 = newarray (com.hp.hpl.jena.graph.Node)[4];

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getGraph()>();

        $r0[0] = $r2;

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getSubject()>();

        $r0[1] = $r3;

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r0[2] = $r4;

        $r5 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getObject()>();

        $r0[3] = $r5;

        $r6 = staticinvoke <org.apache.jena.riot.out.NodeFmtLib: java.lang.String strNodes(com.hp.hpl.jena.graph.Node[])>($r0);

        return $r6;
    }

    public static transient java.lang.String strNodes(com.hp.hpl.jena.graph.Node[])
    {
        com.hp.hpl.jena.graph.Node[] r1;
        java.lang.Object[] $r4;
        org.apache.jena.atlas.io.IndentedLineBuffer $r0;
        com.hp.hpl.jena.graph.Node r3;
        int i0, i1;
        java.lang.String $r2;
        boolean z0;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node[];

        $r0 = new org.apache.jena.atlas.io.IndentedLineBuffer;

        specialinvoke $r0.<org.apache.jena.atlas.io.IndentedLineBuffer: void <init>()>();

        z0 = 1;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r3 = r1[i1];

        if z0 != 0 goto label2;

        $r4 = newarray (java.lang.Object)[0];

        virtualinvoke $r0.<org.apache.jena.atlas.io.IndentedLineBuffer: void append(java.lang.String,java.lang.Object[])>(" ", $r4);

     label2:
        z0 = 0;

        staticinvoke <org.apache.jena.riot.out.NodeFmtLib: void str(org.apache.jena.atlas.io.IndentedWriter,com.hp.hpl.jena.graph.Node)>($r0, r3);

        i1 = i1 + 1;

        goto label1;

     label3:
        $r2 = virtualinvoke $r0.<org.apache.jena.atlas.io.IndentedLineBuffer: java.lang.String toString()>();

        return $r2;
    }

    public static java.lang.String str(com.hp.hpl.jena.graph.Node)
    {
        org.apache.jena.atlas.io.IndentedLineBuffer $r0;
        com.hp.hpl.jena.graph.Node r1;
        java.lang.String $r2;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        $r0 = new org.apache.jena.atlas.io.IndentedLineBuffer;

        specialinvoke $r0.<org.apache.jena.atlas.io.IndentedLineBuffer: void <init>()>();

        staticinvoke <org.apache.jena.riot.out.NodeFmtLib: void str(org.apache.jena.atlas.io.IndentedWriter,com.hp.hpl.jena.graph.Node)>($r0, r1);

        $r2 = virtualinvoke $r0.<org.apache.jena.atlas.io.IndentedLineBuffer: java.lang.String toString()>();

        return $r2;
    }

    public static void str(org.apache.jena.atlas.io.IndentedWriter, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r1;
        org.apache.jena.atlas.io.IndentedWriter r0;

        r0 := @parameter0: org.apache.jena.atlas.io.IndentedWriter;

        r1 := @parameter1: com.hp.hpl.jena.graph.Node;

        staticinvoke <org.apache.jena.riot.out.NodeFmtLib: void serialize(org.apache.jena.atlas.io.IndentedWriter,com.hp.hpl.jena.graph.Node,java.lang.String,org.apache.jena.riot.system.PrefixMap)>(r0, r1, null, null);

        return;
    }

    public static void serialize(org.apache.jena.atlas.io.IndentedWriter, com.hp.hpl.jena.graph.Node, org.apache.jena.riot.system.Prologue)
    {
        org.apache.jena.riot.system.PrefixMap $r4;
        org.apache.jena.riot.system.Prologue r2;
        com.hp.hpl.jena.graph.Node r1;
        java.lang.String $r3;
        org.apache.jena.atlas.io.IndentedWriter r0;

        r0 := @parameter0: org.apache.jena.atlas.io.IndentedWriter;

        r1 := @parameter1: com.hp.hpl.jena.graph.Node;

        r2 := @parameter2: org.apache.jena.riot.system.Prologue;

        $r3 = virtualinvoke r2.<org.apache.jena.riot.system.Prologue: java.lang.String getBaseURI()>();

        $r4 = virtualinvoke r2.<org.apache.jena.riot.system.Prologue: org.apache.jena.riot.system.PrefixMap getPrefixMap()>();

        staticinvoke <org.apache.jena.riot.out.NodeFmtLib: void serialize(org.apache.jena.atlas.io.IndentedWriter,com.hp.hpl.jena.graph.Node,java.lang.String,org.apache.jena.riot.system.PrefixMap)>(r0, r1, $r3, $r4);

        return;
    }

    public static void serialize(org.apache.jena.atlas.io.IndentedWriter, com.hp.hpl.jena.graph.Node, java.lang.String, org.apache.jena.riot.system.PrefixMap)
    {
        org.apache.jena.riot.system.PrefixMap r4;
        org.apache.jena.riot.out.NodeFormatterTTL $r0;
        java.lang.String r1;
        com.hp.hpl.jena.graph.Node r3;
        org.apache.jena.atlas.io.IndentedWriter r2;

        r2 := @parameter0: org.apache.jena.atlas.io.IndentedWriter;

        r3 := @parameter1: com.hp.hpl.jena.graph.Node;

        r1 := @parameter2: java.lang.String;

        r4 := @parameter3: org.apache.jena.riot.system.PrefixMap;

        if r4 != null goto label1;

        r4 = <org.apache.jena.riot.out.NodeFmtLib: org.apache.jena.riot.system.PrefixMap dftPrefixMap>;

     label1:
        $r0 = new org.apache.jena.riot.out.NodeFormatterTTL;

        specialinvoke $r0.<org.apache.jena.riot.out.NodeFormatterTTL: void <init>(java.lang.String,org.apache.jena.riot.system.PrefixMap)>(r1, r4);

        interfaceinvoke $r0.<org.apache.jena.riot.out.NodeFormatter: void format(org.apache.jena.atlas.io.AWriter,com.hp.hpl.jena.graph.Node)>(r2, r3);

        return;
    }

    public static java.lang.String encodeBNodeLabel(java.lang.String)
    {
        char $c0, $c2, $c3, $c4;
        int $i1, i5, $i6, $i7, $i8;
        java.lang.StringBuilder $r3;
        java.lang.String r1, $r2;
        boolean $z0;

        r1 := @parameter0: java.lang.String;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $c0 = <org.apache.jena.riot.out.NodeFmtLib: char LabelLeadingLetter>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0);

        i5 = 0;

     label1:
        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        if i5 >= $i1 goto label5;

        $c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i5);

        $c3 = <org.apache.jena.riot.out.NodeFmtLib: char encodeMarkerChar>;

        $i6 = (int) $c2;

        $i7 = (int) $c3;

        if $i6 != $i7 goto label2;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

        goto label4;

     label2:
        $i8 = (int) $c2;

        $z0 = staticinvoke <org.apache.jena.riot.system.RiotChars: boolean isA2ZN(int)>($i8);

        if $z0 == 0 goto label3;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

        goto label4;

     label3:
        $c4 = <org.apache.jena.riot.out.NodeFmtLib: char encodeMarkerChar>;

        staticinvoke <org.apache.jena.atlas.lib.Chars: void encodeAsHex(java.lang.StringBuilder,char,char)>($r3, $c4, $c2);

     label4:
        i5 = i5 + 1;

        goto label1;

     label5:
        $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public static java.lang.String decodeBNodeLabel(java.lang.String)
    {
        int $i2, $i5, $i9, $i11, $i12, i13, i15, i16, $i17, $i18, $i19, $i20, $i21, $i22;
        java.lang.String r1, $r2;
        char $c0, $c1, $c3, $c4, $c6, $c7, $c8, $c10, $c14;
        java.lang.StringBuilder $r3;

        r1 := @parameter0: java.lang.String;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $c0 = virtualinvoke r1.<java.lang.String: char charAt(int)>(0);

        $c1 = <org.apache.jena.riot.out.NodeFmtLib: char LabelLeadingLetter>;

        $i17 = (int) $c0;

        $i18 = (int) $c1;

        if $i17 == $i18 goto label1;

        return r1;

     label1:
        i15 = 1;

     label2:
        $i2 = virtualinvoke r1.<java.lang.String: int length()>();

        if i15 >= $i2 goto label6;

        $c3 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i15);

        $c4 = <org.apache.jena.riot.out.NodeFmtLib: char encodeMarkerChar>;

        $i19 = (int) $c3;

        $i20 = (int) $c4;

        if $i19 == $i20 goto label3;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3);

        goto label5;

     label3:
        $i5 = i15 + 1;

        $c6 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i5);

        $c7 = <org.apache.jena.riot.out.NodeFmtLib: char encodeMarkerChar>;

        $i21 = (int) $c6;

        $i22 = (int) $c7;

        if $i21 != $i22 goto label4;

        i15 = i15 + 1;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3);

        goto label5;

     label4:
        i16 = i15 + 1;

        $c8 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i16);

        $i9 = staticinvoke <org.apache.jena.atlas.lib.Bytes: int hexCharToInt(char)>($c8);

        i15 = i16 + 1;

        $c10 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i15);

        $i11 = staticinvoke <org.apache.jena.atlas.lib.Bytes: int hexCharToInt(char)>($c10);

        $i12 = $i9 << 4;

        i13 = $i12 | $i11;

        $c14 = (char) i13;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c14);

     label5:
        i15 = i15 + 1;

        goto label2;

     label6:
        $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public static java.lang.String abbrevByBase(java.lang.String, java.lang.String)
    {
        java.net.MalformedURLException $r5;
        org.apache.jena.iri.IRIFactory $r1;
        int $i0;
        java.lang.String r0, r3, r6;
        org.apache.jena.iri.IRI $r2, $r4;

        r3 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = staticinvoke <org.apache.jena.iri.IRIFactory: org.apache.jena.iri.IRIFactory jenaImplementation()>();

        $r2 = virtualinvoke $r1.<org.apache.jena.iri.IRIFactory: org.apache.jena.iri.IRI construct(java.lang.String)>(r0);

        $i0 = <org.apache.jena.riot.out.NodeFmtLib: int relFlags>;

        $r4 = virtualinvoke $r2.<org.apache.jena.iri.IRI: org.apache.jena.iri.IRI relativize(java.lang.String,int)>(r3, $i0);

     label2:
        r6 = virtualinvoke $r4.<org.apache.jena.iri.IRI: java.lang.String toASCIIString()>();

     label3:
        goto label5;

     label4:
        $r5 := @caughtexception;

        r6 = virtualinvoke $r4.<org.apache.jena.iri.IRI: java.lang.String toString()>();

     label5:
        return r6;

        catch java.net.MalformedURLException from label2 to label3 with label4;
    }

    static void <clinit>()
    {
        java.util.Map$Entry r6;
        java.util.Iterator $r4;
        java.util.Set $r3;
        org.apache.jena.riot.system.PrefixMap $r0, $r7;
        java.util.Map $r2;
        java.lang.Object $r5, $r8, $r10;
        java.lang.String $r9, $r11;
        com.hp.hpl.jena.shared.PrefixMapping $r1;
        boolean $z0;

        <org.apache.jena.riot.out.NodeFmtLib: boolean onlySafeBNodeLabels> = 1;

        $r0 = staticinvoke <org.apache.jena.riot.system.PrefixMapFactory: org.apache.jena.riot.system.PrefixMap create()>();

        <org.apache.jena.riot.out.NodeFmtLib: org.apache.jena.riot.system.PrefixMap dftPrefixMap> = $r0;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.ARQConstants: com.hp.hpl.jena.shared.PrefixMapping getGlobalPrefixMap()>();

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.shared.PrefixMapping: java.util.Map getNsPrefixMap()>();

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.Map$Entry) $r5;

        $r7 = <org.apache.jena.riot.out.NodeFmtLib: org.apache.jena.riot.system.PrefixMap dftPrefixMap>;

        $r8 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r9 = (java.lang.String) $r8;

        $r10 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r11 = (java.lang.String) $r10;

        interfaceinvoke $r7.<org.apache.jena.riot.system.PrefixMap: void add(java.lang.String,java.lang.String)>($r9, $r11);

        goto label1;

     label2:
        <org.apache.jena.riot.out.NodeFmtLib: char encodeMarkerChar> = 88;

        <org.apache.jena.riot.out.NodeFmtLib: char LabelLeadingLetter> = 66;

        <org.apache.jena.riot.out.NodeFmtLib: int relFlags> = 9;

        return;
    }
}
