class org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$DeleteCharactersGenerator extends org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$RandomMutationComponentGenerator
{
    final org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator this$0;

    void <init>(org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator)
    {
        org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator r1;
        org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$DeleteCharactersGenerator r0;

        r0 := @this: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$DeleteCharactersGenerator;

        r1 := @parameter0: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator;

        r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$DeleteCharactersGenerator: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator this$0> = r1;

        specialinvoke r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$RandomMutationComponentGenerator: void <init>(org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator)>(r1);

        return;
    }

    org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$RandomizerMutationComponent generate(boolean)
    {
        org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$DeleteCharactersGenerator r0;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters $r5, $r14;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider $r9, $r16;
        org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$DeleteCharactersGenerator$1 $r10;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, i8;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton $r2, $r7, $r12;
        boolean $z0, z1;
        org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator $r1, $r4, $r6, $r8, $r11, $r13, $r15;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3;

        r0 := @this: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$DeleteCharactersGenerator;

        z1 := @parameter0: boolean;

        $r1 = r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$DeleteCharactersGenerator: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator this$0>;

        $r2 = $r1.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator: org.waveprotocol.wave.model.document.operation.NindoAutomaton a>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkDeleteCharacters(int,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(1, null);

        $z0 = virtualinvoke $r3.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: boolean isIllFormed()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        if z1 == 0 goto label3;

        $r11 = r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$DeleteCharactersGenerator: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator this$0>;

        $r12 = $r11.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator: org.waveprotocol.wave.model.document.operation.NindoAutomaton a>;

        $i4 = virtualinvoke $r12.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: int maxCharactersToDelete()>();

        $r13 = r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$DeleteCharactersGenerator: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator this$0>;

        $r14 = $r13.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters p>;

        $i5 = virtualinvoke $r14.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters: int getMaxDeleteLength()>();

        $i6 = staticinvoke <java.lang.Math: int min(int,int)>($i4, $i5);

        if $i6 != 0 goto label2;

        return null;

     label2:
        $r15 = r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$DeleteCharactersGenerator: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator this$0>;

        $r16 = $r15.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider r>;

        $i7 = $i6 + 1;

        i8 = staticinvoke <org.waveprotocol.wave.model.testing.RandomNindoGenerator: int access$000(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider,int,int)>($r16, 1, $i7);

        goto label5;

     label3:
        $r4 = r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$DeleteCharactersGenerator: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator this$0>;

        $r5 = $r4.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters p>;

        $i0 = virtualinvoke $r5.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters: int getMaxDeleteLength()>();

        $r6 = r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$DeleteCharactersGenerator: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator this$0>;

        $r7 = $r6.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator: org.waveprotocol.wave.model.document.operation.NindoAutomaton a>;

        $i1 = virtualinvoke $r7.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: int maxCharactersToDelete()>();

        i2 = $i1 + 1;

        if i2 <= $i0 goto label4;

        return null;

     label4:
        $r8 = r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$DeleteCharactersGenerator: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator this$0>;

        $r9 = $r8.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider r>;

        $i3 = $i0 + 1;

        i8 = staticinvoke <org.waveprotocol.wave.model.testing.RandomNindoGenerator: int access$000(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider,int,int)>($r9, i2, $i3);

     label5:
        $r10 = new org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$DeleteCharactersGenerator$1;

        specialinvoke $r10.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$DeleteCharactersGenerator$1: void <init>(org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$DeleteCharactersGenerator,int)>(r0, i8);

        return $r10;
    }

    public int potential()
    {
        int $i1;
        org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$DeleteCharactersGenerator r0;

        r0 := @this: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$DeleteCharactersGenerator;

        $i1 = (int) -2;

        return $i1;
    }
}
