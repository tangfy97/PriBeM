public abstract class org.springframework.web.multipart.support.AbstractMultipartHttpServletRequest extends javax.servlet.http.HttpServletRequestWrapper implements org.springframework.web.multipart.MultipartHttpServletRequest
{
    private org.springframework.util.MultiValueMap multipartFiles;

    protected void <init>(javax.servlet.http.HttpServletRequest)
    {
        javax.servlet.http.HttpServletRequest r1;
        org.springframework.web.multipart.support.AbstractMultipartHttpServletRequest r0;

        r0 := @this: org.springframework.web.multipart.support.AbstractMultipartHttpServletRequest;

        r1 := @parameter0: javax.servlet.http.HttpServletRequest;

        specialinvoke r0.<javax.servlet.http.HttpServletRequestWrapper: void <init>(javax.servlet.http.HttpServletRequest)>(r1);

        return;
    }

    public java.util.Iterator getFileNames()
    {
        java.util.Iterator $r3;
        org.springframework.util.MultiValueMap $r1;
        java.util.Set $r2;
        org.springframework.web.multipart.support.AbstractMultipartHttpServletRequest r0;

        r0 := @this: org.springframework.web.multipart.support.AbstractMultipartHttpServletRequest;

        $r1 = virtualinvoke r0.<org.springframework.web.multipart.support.AbstractMultipartHttpServletRequest: org.springframework.util.MultiValueMap getMultipartFiles()>();

        $r2 = interfaceinvoke $r1.<org.springframework.util.MultiValueMap: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        return $r3;
    }

    public org.springframework.web.multipart.MultipartFile getFile(java.lang.String)
    {
        org.springframework.util.MultiValueMap $r1;
        org.springframework.web.multipart.MultipartFile $r4;
        java.lang.Object $r3;
        java.lang.String r2;
        org.springframework.web.multipart.support.AbstractMultipartHttpServletRequest r0;

        r0 := @this: org.springframework.web.multipart.support.AbstractMultipartHttpServletRequest;

        r2 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<org.springframework.web.multipart.support.AbstractMultipartHttpServletRequest: org.springframework.util.MultiValueMap getMultipartFiles()>();

        $r3 = interfaceinvoke $r1.<org.springframework.util.MultiValueMap: java.lang.Object getFirst(java.lang.Object)>(r2);

        $r4 = (org.springframework.web.multipart.MultipartFile) $r3;

        return $r4;
    }

    public java.util.List getFiles(java.lang.String)
    {
        java.util.List r4, $r5;
        org.springframework.util.MultiValueMap $r1;
        java.lang.Object $r3;
        java.lang.String r2;
        org.springframework.web.multipart.support.AbstractMultipartHttpServletRequest r0;

        r0 := @this: org.springframework.web.multipart.support.AbstractMultipartHttpServletRequest;

        r2 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<org.springframework.web.multipart.support.AbstractMultipartHttpServletRequest: org.springframework.util.MultiValueMap getMultipartFiles()>();

        $r3 = interfaceinvoke $r1.<org.springframework.util.MultiValueMap: java.lang.Object get(java.lang.Object)>(r2);

        r4 = (java.util.List) $r3;

        if r4 == null goto label1;

        return r4;

     label1:
        $r5 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r5;
    }

    public java.util.Map getFileMap()
    {
        org.springframework.util.MultiValueMap $r1;
        org.springframework.web.multipart.support.AbstractMultipartHttpServletRequest r0;
        java.util.Map $r2;

        r0 := @this: org.springframework.web.multipart.support.AbstractMultipartHttpServletRequest;

        $r1 = virtualinvoke r0.<org.springframework.web.multipart.support.AbstractMultipartHttpServletRequest: org.springframework.util.MultiValueMap getMultipartFiles()>();

        $r2 = interfaceinvoke $r1.<org.springframework.util.MultiValueMap: java.util.Map toSingleValueMap()>();

        return $r2;
    }

    public org.springframework.util.MultiValueMap getMultiFileMap()
    {
        org.springframework.util.MultiValueMap $r1;
        org.springframework.web.multipart.support.AbstractMultipartHttpServletRequest r0;

        r0 := @this: org.springframework.web.multipart.support.AbstractMultipartHttpServletRequest;

        $r1 = virtualinvoke r0.<org.springframework.web.multipart.support.AbstractMultipartHttpServletRequest: org.springframework.util.MultiValueMap getMultipartFiles()>();

        return $r1;
    }

    protected final void setMultipartFiles(org.springframework.util.MultiValueMap)
    {
        java.util.Map $r3;
        org.springframework.util.MultiValueMap r2;
        org.springframework.util.LinkedMultiValueMap $r1;
        org.springframework.web.multipart.support.AbstractMultipartHttpServletRequest r0;

        r0 := @this: org.springframework.web.multipart.support.AbstractMultipartHttpServletRequest;

        r2 := @parameter0: org.springframework.util.MultiValueMap;

        $r1 = new org.springframework.util.LinkedMultiValueMap;

        $r3 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>(r2);

        specialinvoke $r1.<org.springframework.util.LinkedMultiValueMap: void <init>(java.util.Map)>($r3);

        r0.<org.springframework.web.multipart.support.AbstractMultipartHttpServletRequest: org.springframework.util.MultiValueMap multipartFiles> = $r1;

        return;
    }

    protected org.springframework.util.MultiValueMap getMultipartFiles()
    {
        org.springframework.util.MultiValueMap $r1, $r2;
        org.springframework.web.multipart.support.AbstractMultipartHttpServletRequest r0;

        r0 := @this: org.springframework.web.multipart.support.AbstractMultipartHttpServletRequest;

        $r1 = r0.<org.springframework.web.multipart.support.AbstractMultipartHttpServletRequest: org.springframework.util.MultiValueMap multipartFiles>;

        if $r1 != null goto label1;

        virtualinvoke r0.<org.springframework.web.multipart.support.AbstractMultipartHttpServletRequest: void initializeMultipart()>();

     label1:
        $r2 = r0.<org.springframework.web.multipart.support.AbstractMultipartHttpServletRequest: org.springframework.util.MultiValueMap multipartFiles>;

        return $r2;
    }

    protected void initializeMultipart()
    {
        java.lang.IllegalStateException $r0;
        org.springframework.web.multipart.support.AbstractMultipartHttpServletRequest r1;

        r1 := @this: org.springframework.web.multipart.support.AbstractMultipartHttpServletRequest;

        $r0 = new java.lang.IllegalStateException;

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Multipart request not initialized");

        throw $r0;
    }
}
