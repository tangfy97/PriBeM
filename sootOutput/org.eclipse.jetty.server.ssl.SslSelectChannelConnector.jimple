public class org.eclipse.jetty.server.ssl.SslSelectChannelConnector extends org.eclipse.jetty.server.nio.SelectChannelConnector implements org.eclipse.jetty.server.ssl.SslConnector
{
    private final org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory;
    private org.eclipse.jetty.io.Buffers _sslBuffers;

    public void <init>()
    {
        java.lang.String $r2;
        org.eclipse.jetty.server.ssl.SslSelectChannelConnector r0;
        org.eclipse.jetty.util.ssl.SslContextFactory $r1;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSelectChannelConnector;

        $r1 = new org.eclipse.jetty.util.ssl.SslContextFactory;

        $r2 = <org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String DEFAULT_KEYSTORE_PATH>;

        specialinvoke $r1.<org.eclipse.jetty.util.ssl.SslContextFactory: void <init>(java.lang.String)>($r2);

        specialinvoke r0.<org.eclipse.jetty.server.ssl.SslSelectChannelConnector: void <init>(org.eclipse.jetty.util.ssl.SslContextFactory)>($r1);

        virtualinvoke r0.<org.eclipse.jetty.server.ssl.SslSelectChannelConnector: void setSoLingerTime(int)>(30000);

        return;
    }

    public void <init>(org.eclipse.jetty.util.ssl.SslContextFactory)
    {
        org.eclipse.jetty.server.ssl.SslSelectChannelConnector r0;
        org.eclipse.jetty.util.ssl.SslContextFactory r1, $r2;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSelectChannelConnector;

        r1 := @parameter0: org.eclipse.jetty.util.ssl.SslContextFactory;

        specialinvoke r0.<org.eclipse.jetty.server.nio.SelectChannelConnector: void <init>()>();

        r0.<org.eclipse.jetty.server.ssl.SslSelectChannelConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory> = r1;

        $r2 = r0.<org.eclipse.jetty.server.ssl.SslSelectChannelConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        virtualinvoke r0.<org.eclipse.jetty.server.ssl.SslSelectChannelConnector: boolean addBean(java.lang.Object)>($r2);

        virtualinvoke r0.<org.eclipse.jetty.server.ssl.SslSelectChannelConnector: void setUseDirectBuffers(boolean)>(0);

        virtualinvoke r0.<org.eclipse.jetty.server.ssl.SslSelectChannelConnector: void setSoLingerTime(int)>(30000);

        return;
    }

    public void customize(org.eclipse.jetty.io.EndPoint, org.eclipse.jetty.server.Request) throws java.io.IOException
    {
        org.eclipse.jetty.server.Request r0;
        org.eclipse.jetty.io.nio.SslConnection$SslEndPoint r3;
        javax.net.ssl.SSLSession $r5;
        org.eclipse.jetty.io.EndPoint r2;
        org.eclipse.jetty.server.ssl.SslSelectChannelConnector r1;
        javax.net.ssl.SSLEngine $r4;

        r1 := @this: org.eclipse.jetty.server.ssl.SslSelectChannelConnector;

        r2 := @parameter0: org.eclipse.jetty.io.EndPoint;

        r0 := @parameter1: org.eclipse.jetty.server.Request;

        virtualinvoke r0.<org.eclipse.jetty.server.Request: void setScheme(java.lang.String)>("https");

        specialinvoke r1.<org.eclipse.jetty.server.nio.SelectChannelConnector: void customize(org.eclipse.jetty.io.EndPoint,org.eclipse.jetty.server.Request)>(r2, r0);

        r3 = (org.eclipse.jetty.io.nio.SslConnection$SslEndPoint) r2;

        $r4 = virtualinvoke r3.<org.eclipse.jetty.io.nio.SslConnection$SslEndPoint: javax.net.ssl.SSLEngine getSslEngine()>();

        $r5 = virtualinvoke $r4.<javax.net.ssl.SSLEngine: javax.net.ssl.SSLSession getSession()>();

        staticinvoke <org.eclipse.jetty.server.ssl.SslCertificates: void customize(javax.net.ssl.SSLSession,org.eclipse.jetty.io.EndPoint,org.eclipse.jetty.server.Request)>($r5, r2, r0);

        return;
    }

    public boolean isAllowRenegotiate()
    {
        org.eclipse.jetty.server.ssl.SslSelectChannelConnector r0;
        org.eclipse.jetty.util.ssl.SslContextFactory $r1;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSelectChannelConnector;

        $r1 = r0.<org.eclipse.jetty.server.ssl.SslSelectChannelConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        $z0 = virtualinvoke $r1.<org.eclipse.jetty.util.ssl.SslContextFactory: boolean isAllowRenegotiate()>();

        return $z0;
    }

    public void setAllowRenegotiate(boolean)
    {
        org.eclipse.jetty.server.ssl.SslSelectChannelConnector r0;
        org.eclipse.jetty.util.ssl.SslContextFactory $r1;
        boolean z0;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSelectChannelConnector;

        z0 := @parameter0: boolean;

        $r1 = r0.<org.eclipse.jetty.server.ssl.SslSelectChannelConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        virtualinvoke $r1.<org.eclipse.jetty.util.ssl.SslContextFactory: void setAllowRenegotiate(boolean)>(z0);

        return;
    }

    public java.lang.String[] getExcludeCipherSuites()
    {
        java.lang.String[] $r2;
        org.eclipse.jetty.server.ssl.SslSelectChannelConnector r0;
        org.eclipse.jetty.util.ssl.SslContextFactory $r1;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSelectChannelConnector;

        $r1 = r0.<org.eclipse.jetty.server.ssl.SslSelectChannelConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        $r2 = virtualinvoke $r1.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String[] getExcludeCipherSuites()>();

        return $r2;
    }

    public void setExcludeCipherSuites(java.lang.String[])
    {
        java.lang.String[] r1;
        org.eclipse.jetty.server.ssl.SslSelectChannelConnector r0;
        org.eclipse.jetty.util.ssl.SslContextFactory $r2;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSelectChannelConnector;

        r1 := @parameter0: java.lang.String[];

        $r2 = r0.<org.eclipse.jetty.server.ssl.SslSelectChannelConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        virtualinvoke $r2.<org.eclipse.jetty.util.ssl.SslContextFactory: void setExcludeCipherSuites(java.lang.String[])>(r1);

        return;
    }

    public java.lang.String[] getIncludeCipherSuites()
    {
        java.lang.String[] $r2;
        org.eclipse.jetty.server.ssl.SslSelectChannelConnector r0;
        org.eclipse.jetty.util.ssl.SslContextFactory $r1;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSelectChannelConnector;

        $r1 = r0.<org.eclipse.jetty.server.ssl.SslSelectChannelConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        $r2 = virtualinvoke $r1.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String[] getIncludeCipherSuites()>();

        return $r2;
    }

    public void setIncludeCipherSuites(java.lang.String[])
    {
        java.lang.String[] r1;
        org.eclipse.jetty.server.ssl.SslSelectChannelConnector r0;
        org.eclipse.jetty.util.ssl.SslContextFactory $r2;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSelectChannelConnector;

        r1 := @parameter0: java.lang.String[];

        $r2 = r0.<org.eclipse.jetty.server.ssl.SslSelectChannelConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        virtualinvoke $r2.<org.eclipse.jetty.util.ssl.SslContextFactory: void setIncludeCipherSuites(java.lang.String[])>(r1);

        return;
    }

    public void setPassword(java.lang.String)
    {
        java.lang.String r1;
        org.eclipse.jetty.server.ssl.SslSelectChannelConnector r0;
        org.eclipse.jetty.util.ssl.SslContextFactory $r2;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSelectChannelConnector;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.eclipse.jetty.server.ssl.SslSelectChannelConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        virtualinvoke $r2.<org.eclipse.jetty.util.ssl.SslContextFactory: void setKeyStorePassword(java.lang.String)>(r1);

        return;
    }

    public void setTrustPassword(java.lang.String)
    {
        java.lang.String r1;
        org.eclipse.jetty.server.ssl.SslSelectChannelConnector r0;
        org.eclipse.jetty.util.ssl.SslContextFactory $r2;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSelectChannelConnector;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.eclipse.jetty.server.ssl.SslSelectChannelConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        virtualinvoke $r2.<org.eclipse.jetty.util.ssl.SslContextFactory: void setTrustStorePassword(java.lang.String)>(r1);

        return;
    }

    public void setKeyPassword(java.lang.String)
    {
        java.lang.String r1;
        org.eclipse.jetty.server.ssl.SslSelectChannelConnector r0;
        org.eclipse.jetty.util.ssl.SslContextFactory $r2;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSelectChannelConnector;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.eclipse.jetty.server.ssl.SslSelectChannelConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        virtualinvoke $r2.<org.eclipse.jetty.util.ssl.SslContextFactory: void setKeyManagerPassword(java.lang.String)>(r1);

        return;
    }

    public java.lang.String getAlgorithm()
    {
        java.lang.UnsupportedOperationException $r0;
        org.eclipse.jetty.server.ssl.SslSelectChannelConnector r1;

        r1 := @this: org.eclipse.jetty.server.ssl.SslSelectChannelConnector;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public void setAlgorithm(java.lang.String)
    {
        java.lang.UnsupportedOperationException $r0;
        java.lang.String r2;
        org.eclipse.jetty.server.ssl.SslSelectChannelConnector r1;

        r1 := @this: org.eclipse.jetty.server.ssl.SslSelectChannelConnector;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public java.lang.String getProtocol()
    {
        java.lang.String $r2;
        org.eclipse.jetty.server.ssl.SslSelectChannelConnector r0;
        org.eclipse.jetty.util.ssl.SslContextFactory $r1;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSelectChannelConnector;

        $r1 = r0.<org.eclipse.jetty.server.ssl.SslSelectChannelConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        $r2 = virtualinvoke $r1.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String getProtocol()>();

        return $r2;
    }

    public void setProtocol(java.lang.String)
    {
        java.lang.String r1;
        org.eclipse.jetty.server.ssl.SslSelectChannelConnector r0;
        org.eclipse.jetty.util.ssl.SslContextFactory $r2;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSelectChannelConnector;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.eclipse.jetty.server.ssl.SslSelectChannelConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        virtualinvoke $r2.<org.eclipse.jetty.util.ssl.SslContextFactory: void setProtocol(java.lang.String)>(r1);

        return;
    }

    public void setKeystore(java.lang.String)
    {
        java.lang.String r1;
        org.eclipse.jetty.server.ssl.SslSelectChannelConnector r0;
        org.eclipse.jetty.util.ssl.SslContextFactory $r2;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSelectChannelConnector;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.eclipse.jetty.server.ssl.SslSelectChannelConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        virtualinvoke $r2.<org.eclipse.jetty.util.ssl.SslContextFactory: void setKeyStorePath(java.lang.String)>(r1);

        return;
    }

    public java.lang.String getKeystore()
    {
        java.lang.String $r2;
        org.eclipse.jetty.server.ssl.SslSelectChannelConnector r0;
        org.eclipse.jetty.util.ssl.SslContextFactory $r1;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSelectChannelConnector;

        $r1 = r0.<org.eclipse.jetty.server.ssl.SslSelectChannelConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        $r2 = virtualinvoke $r1.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String getKeyStorePath()>();

        return $r2;
    }

    public java.lang.String getKeystoreType()
    {
        java.lang.String $r2;
        org.eclipse.jetty.server.ssl.SslSelectChannelConnector r0;
        org.eclipse.jetty.util.ssl.SslContextFactory $r1;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSelectChannelConnector;

        $r1 = r0.<org.eclipse.jetty.server.ssl.SslSelectChannelConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        $r2 = virtualinvoke $r1.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String getKeyStoreType()>();

        return $r2;
    }

    public boolean getNeedClientAuth()
    {
        org.eclipse.jetty.server.ssl.SslSelectChannelConnector r0;
        org.eclipse.jetty.util.ssl.SslContextFactory $r1;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSelectChannelConnector;

        $r1 = r0.<org.eclipse.jetty.server.ssl.SslSelectChannelConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        $z0 = virtualinvoke $r1.<org.eclipse.jetty.util.ssl.SslContextFactory: boolean getNeedClientAuth()>();

        return $z0;
    }

    public boolean getWantClientAuth()
    {
        org.eclipse.jetty.server.ssl.SslSelectChannelConnector r0;
        org.eclipse.jetty.util.ssl.SslContextFactory $r1;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSelectChannelConnector;

        $r1 = r0.<org.eclipse.jetty.server.ssl.SslSelectChannelConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        $z0 = virtualinvoke $r1.<org.eclipse.jetty.util.ssl.SslContextFactory: boolean getWantClientAuth()>();

        return $z0;
    }

    public void setNeedClientAuth(boolean)
    {
        org.eclipse.jetty.server.ssl.SslSelectChannelConnector r0;
        org.eclipse.jetty.util.ssl.SslContextFactory $r1;
        boolean z0;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSelectChannelConnector;

        z0 := @parameter0: boolean;

        $r1 = r0.<org.eclipse.jetty.server.ssl.SslSelectChannelConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        virtualinvoke $r1.<org.eclipse.jetty.util.ssl.SslContextFactory: void setNeedClientAuth(boolean)>(z0);

        return;
    }

    public void setWantClientAuth(boolean)
    {
        org.eclipse.jetty.server.ssl.SslSelectChannelConnector r0;
        org.eclipse.jetty.util.ssl.SslContextFactory $r1;
        boolean z0;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSelectChannelConnector;

        z0 := @parameter0: boolean;

        $r1 = r0.<org.eclipse.jetty.server.ssl.SslSelectChannelConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        virtualinvoke $r1.<org.eclipse.jetty.util.ssl.SslContextFactory: void setWantClientAuth(boolean)>(z0);

        return;
    }

    public void setKeystoreType(java.lang.String)
    {
        java.lang.String r1;
        org.eclipse.jetty.server.ssl.SslSelectChannelConnector r0;
        org.eclipse.jetty.util.ssl.SslContextFactory $r2;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSelectChannelConnector;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.eclipse.jetty.server.ssl.SslSelectChannelConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        virtualinvoke $r2.<org.eclipse.jetty.util.ssl.SslContextFactory: void setKeyStoreType(java.lang.String)>(r1);

        return;
    }

    public java.lang.String getProvider()
    {
        java.lang.String $r2;
        org.eclipse.jetty.server.ssl.SslSelectChannelConnector r0;
        org.eclipse.jetty.util.ssl.SslContextFactory $r1;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSelectChannelConnector;

        $r1 = r0.<org.eclipse.jetty.server.ssl.SslSelectChannelConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        $r2 = virtualinvoke $r1.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String getProvider()>();

        return $r2;
    }

    public java.lang.String getSecureRandomAlgorithm()
    {
        java.lang.String $r2;
        org.eclipse.jetty.server.ssl.SslSelectChannelConnector r0;
        org.eclipse.jetty.util.ssl.SslContextFactory $r1;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSelectChannelConnector;

        $r1 = r0.<org.eclipse.jetty.server.ssl.SslSelectChannelConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        $r2 = virtualinvoke $r1.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String getSecureRandomAlgorithm()>();

        return $r2;
    }

    public java.lang.String getSslKeyManagerFactoryAlgorithm()
    {
        java.lang.String $r2;
        org.eclipse.jetty.server.ssl.SslSelectChannelConnector r0;
        org.eclipse.jetty.util.ssl.SslContextFactory $r1;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSelectChannelConnector;

        $r1 = r0.<org.eclipse.jetty.server.ssl.SslSelectChannelConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        $r2 = virtualinvoke $r1.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String getSslKeyManagerFactoryAlgorithm()>();

        return $r2;
    }

    public java.lang.String getSslTrustManagerFactoryAlgorithm()
    {
        java.lang.String $r2;
        org.eclipse.jetty.server.ssl.SslSelectChannelConnector r0;
        org.eclipse.jetty.util.ssl.SslContextFactory $r1;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSelectChannelConnector;

        $r1 = r0.<org.eclipse.jetty.server.ssl.SslSelectChannelConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        $r2 = virtualinvoke $r1.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String getTrustManagerFactoryAlgorithm()>();

        return $r2;
    }

    public java.lang.String getTruststore()
    {
        java.lang.String $r2;
        org.eclipse.jetty.server.ssl.SslSelectChannelConnector r0;
        org.eclipse.jetty.util.ssl.SslContextFactory $r1;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSelectChannelConnector;

        $r1 = r0.<org.eclipse.jetty.server.ssl.SslSelectChannelConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        $r2 = virtualinvoke $r1.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String getTrustStore()>();

        return $r2;
    }

    public java.lang.String getTruststoreType()
    {
        java.lang.String $r2;
        org.eclipse.jetty.server.ssl.SslSelectChannelConnector r0;
        org.eclipse.jetty.util.ssl.SslContextFactory $r1;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSelectChannelConnector;

        $r1 = r0.<org.eclipse.jetty.server.ssl.SslSelectChannelConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        $r2 = virtualinvoke $r1.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String getTrustStoreType()>();

        return $r2;
    }

    public void setProvider(java.lang.String)
    {
        java.lang.String r1;
        org.eclipse.jetty.server.ssl.SslSelectChannelConnector r0;
        org.eclipse.jetty.util.ssl.SslContextFactory $r2;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSelectChannelConnector;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.eclipse.jetty.server.ssl.SslSelectChannelConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        virtualinvoke $r2.<org.eclipse.jetty.util.ssl.SslContextFactory: void setProvider(java.lang.String)>(r1);

        return;
    }

    public void setSecureRandomAlgorithm(java.lang.String)
    {
        java.lang.String r1;
        org.eclipse.jetty.server.ssl.SslSelectChannelConnector r0;
        org.eclipse.jetty.util.ssl.SslContextFactory $r2;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSelectChannelConnector;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.eclipse.jetty.server.ssl.SslSelectChannelConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        virtualinvoke $r2.<org.eclipse.jetty.util.ssl.SslContextFactory: void setSecureRandomAlgorithm(java.lang.String)>(r1);

        return;
    }

    public void setSslKeyManagerFactoryAlgorithm(java.lang.String)
    {
        java.lang.String r1;
        org.eclipse.jetty.server.ssl.SslSelectChannelConnector r0;
        org.eclipse.jetty.util.ssl.SslContextFactory $r2;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSelectChannelConnector;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.eclipse.jetty.server.ssl.SslSelectChannelConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        virtualinvoke $r2.<org.eclipse.jetty.util.ssl.SslContextFactory: void setSslKeyManagerFactoryAlgorithm(java.lang.String)>(r1);

        return;
    }

    public void setSslTrustManagerFactoryAlgorithm(java.lang.String)
    {
        java.lang.String r1;
        org.eclipse.jetty.server.ssl.SslSelectChannelConnector r0;
        org.eclipse.jetty.util.ssl.SslContextFactory $r2;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSelectChannelConnector;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.eclipse.jetty.server.ssl.SslSelectChannelConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        virtualinvoke $r2.<org.eclipse.jetty.util.ssl.SslContextFactory: void setTrustManagerFactoryAlgorithm(java.lang.String)>(r1);

        return;
    }

    public void setTruststore(java.lang.String)
    {
        java.lang.String r1;
        org.eclipse.jetty.server.ssl.SslSelectChannelConnector r0;
        org.eclipse.jetty.util.ssl.SslContextFactory $r2;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSelectChannelConnector;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.eclipse.jetty.server.ssl.SslSelectChannelConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        virtualinvoke $r2.<org.eclipse.jetty.util.ssl.SslContextFactory: void setTrustStore(java.lang.String)>(r1);

        return;
    }

    public void setTruststoreType(java.lang.String)
    {
        java.lang.String r1;
        org.eclipse.jetty.server.ssl.SslSelectChannelConnector r0;
        org.eclipse.jetty.util.ssl.SslContextFactory $r2;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSelectChannelConnector;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.eclipse.jetty.server.ssl.SslSelectChannelConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        virtualinvoke $r2.<org.eclipse.jetty.util.ssl.SslContextFactory: void setTrustStoreType(java.lang.String)>(r1);

        return;
    }

    public void setSslContext(javax.net.ssl.SSLContext)
    {
        javax.net.ssl.SSLContext r1;
        org.eclipse.jetty.server.ssl.SslSelectChannelConnector r0;
        org.eclipse.jetty.util.ssl.SslContextFactory $r2;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSelectChannelConnector;

        r1 := @parameter0: javax.net.ssl.SSLContext;

        $r2 = r0.<org.eclipse.jetty.server.ssl.SslSelectChannelConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        virtualinvoke $r2.<org.eclipse.jetty.util.ssl.SslContextFactory: void setSslContext(javax.net.ssl.SSLContext)>(r1);

        return;
    }

    public javax.net.ssl.SSLContext getSslContext()
    {
        javax.net.ssl.SSLContext $r2;
        org.eclipse.jetty.server.ssl.SslSelectChannelConnector r0;
        org.eclipse.jetty.util.ssl.SslContextFactory $r1;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSelectChannelConnector;

        $r1 = r0.<org.eclipse.jetty.server.ssl.SslSelectChannelConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        $r2 = virtualinvoke $r1.<org.eclipse.jetty.util.ssl.SslContextFactory: javax.net.ssl.SSLContext getSslContext()>();

        return $r2;
    }

    public org.eclipse.jetty.util.ssl.SslContextFactory getSslContextFactory()
    {
        org.eclipse.jetty.server.ssl.SslSelectChannelConnector r0;
        org.eclipse.jetty.util.ssl.SslContextFactory $r1;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSelectChannelConnector;

        $r1 = r0.<org.eclipse.jetty.server.ssl.SslSelectChannelConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        return $r1;
    }

    public boolean isConfidential(org.eclipse.jetty.server.Request)
    {
        org.eclipse.jetty.server.Request r1;
        int $i0, $i1;
        org.eclipse.jetty.server.ssl.SslSelectChannelConnector r0;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSelectChannelConnector;

        r1 := @parameter0: org.eclipse.jetty.server.Request;

        $i0 = virtualinvoke r0.<org.eclipse.jetty.server.ssl.SslSelectChannelConnector: int getConfidentialPort()>();

        if $i0 == 0 goto label1;

        $i1 = virtualinvoke r1.<org.eclipse.jetty.server.Request: int getServerPort()>();

        if $i0 != $i1 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public boolean isIntegral(org.eclipse.jetty.server.Request)
    {
        org.eclipse.jetty.server.Request r1;
        int $i0, $i1;
        org.eclipse.jetty.server.ssl.SslSelectChannelConnector r0;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSelectChannelConnector;

        r1 := @parameter0: org.eclipse.jetty.server.Request;

        $i0 = virtualinvoke r0.<org.eclipse.jetty.server.ssl.SslSelectChannelConnector: int getIntegralPort()>();

        if $i0 == 0 goto label1;

        $i1 = virtualinvoke r1.<org.eclipse.jetty.server.Request: int getServerPort()>();

        if $i0 != $i1 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    protected org.eclipse.jetty.io.nio.AsyncConnection newConnection(java.nio.channels.SocketChannel, org.eclipse.jetty.io.AsyncEndPoint)
    {
        org.eclipse.jetty.util.ssl.SslContextFactory $r8;
        java.io.IOException $r9;
        org.eclipse.jetty.server.ssl.SslSelectChannelConnector r0;
        org.eclipse.jetty.io.nio.AsyncConnection $r6;
        javax.net.ssl.SSLEngine $r2;
        java.nio.channels.SocketChannel r1;
        org.eclipse.jetty.io.nio.SslConnection $r4;
        org.eclipse.jetty.io.AsyncEndPoint r3, $r5, $r7;
        org.eclipse.jetty.io.RuntimeIOException $r10;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSelectChannelConnector;

        r1 := @parameter0: java.nio.channels.SocketChannel;

        r3 := @parameter1: org.eclipse.jetty.io.AsyncEndPoint;

     label1:
        $r2 = virtualinvoke r0.<org.eclipse.jetty.server.ssl.SslSelectChannelConnector: javax.net.ssl.SSLEngine createSSLEngine(java.nio.channels.SocketChannel)>(r1);

        $r4 = virtualinvoke r0.<org.eclipse.jetty.server.ssl.SslSelectChannelConnector: org.eclipse.jetty.io.nio.SslConnection newSslConnection(org.eclipse.jetty.io.AsyncEndPoint,javax.net.ssl.SSLEngine)>(r3, $r2);

        $r5 = virtualinvoke $r4.<org.eclipse.jetty.io.nio.SslConnection: org.eclipse.jetty.io.AsyncEndPoint getSslEndPoint()>();

        $r6 = virtualinvoke r0.<org.eclipse.jetty.server.ssl.SslSelectChannelConnector: org.eclipse.jetty.io.nio.AsyncConnection newPlainConnection(java.nio.channels.SocketChannel,org.eclipse.jetty.io.AsyncEndPoint)>(r1, $r5);

        $r7 = virtualinvoke $r4.<org.eclipse.jetty.io.nio.SslConnection: org.eclipse.jetty.io.AsyncEndPoint getSslEndPoint()>();

        interfaceinvoke $r7.<org.eclipse.jetty.io.AsyncEndPoint: void setConnection(org.eclipse.jetty.io.Connection)>($r6);

        $r8 = r0.<org.eclipse.jetty.server.ssl.SslSelectChannelConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        $z0 = virtualinvoke $r8.<org.eclipse.jetty.util.ssl.SslContextFactory: boolean isAllowRenegotiate()>();

        virtualinvoke $r4.<org.eclipse.jetty.io.nio.SslConnection: void setAllowRenegotiate(boolean)>($z0);

     label2:
        return $r4;

     label3:
        $r9 := @caughtexception;

        $r10 = new org.eclipse.jetty.io.RuntimeIOException;

        specialinvoke $r10.<org.eclipse.jetty.io.RuntimeIOException: void <init>(java.lang.Throwable)>($r9);

        throw $r10;

        catch java.io.IOException from label1 to label2 with label3;
    }

    protected org.eclipse.jetty.io.nio.AsyncConnection newPlainConnection(java.nio.channels.SocketChannel, org.eclipse.jetty.io.AsyncEndPoint)
    {
        java.nio.channels.SocketChannel r1;
        org.eclipse.jetty.io.AsyncEndPoint r2;
        org.eclipse.jetty.server.ssl.SslSelectChannelConnector r0;
        org.eclipse.jetty.io.nio.AsyncConnection $r3;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSelectChannelConnector;

        r1 := @parameter0: java.nio.channels.SocketChannel;

        r2 := @parameter1: org.eclipse.jetty.io.AsyncEndPoint;

        $r3 = specialinvoke r0.<org.eclipse.jetty.server.nio.SelectChannelConnector: org.eclipse.jetty.io.nio.AsyncConnection newConnection(java.nio.channels.SocketChannel,org.eclipse.jetty.io.AsyncEndPoint)>(r1, r2);

        return $r3;
    }

    protected org.eclipse.jetty.io.nio.SslConnection newSslConnection(org.eclipse.jetty.io.AsyncEndPoint, javax.net.ssl.SSLEngine)
    {
        org.eclipse.jetty.io.nio.SslConnection $r0;
        org.eclipse.jetty.io.AsyncEndPoint r2;
        org.eclipse.jetty.server.ssl.SslSelectChannelConnector r3;
        javax.net.ssl.SSLEngine r1;

        r3 := @this: org.eclipse.jetty.server.ssl.SslSelectChannelConnector;

        r2 := @parameter0: org.eclipse.jetty.io.AsyncEndPoint;

        r1 := @parameter1: javax.net.ssl.SSLEngine;

        $r0 = new org.eclipse.jetty.io.nio.SslConnection;

        specialinvoke $r0.<org.eclipse.jetty.io.nio.SslConnection: void <init>(javax.net.ssl.SSLEngine,org.eclipse.jetty.io.EndPoint)>(r1, r2);

        return $r0;
    }

    protected javax.net.ssl.SSLEngine createSSLEngine(java.nio.channels.SocketChannel) throws java.io.IOException
    {
        java.net.Socket $r3, $r6;
        org.eclipse.jetty.util.ssl.SslContextFactory $r2, $r7;
        org.eclipse.jetty.server.ssl.SslSelectChannelConnector r1;
        javax.net.ssl.SSLEngine r8;
        java.net.InetAddress $r4;
        java.nio.channels.SocketChannel r0;
        int $i0;
        java.lang.String $r5;

        r1 := @this: org.eclipse.jetty.server.ssl.SslSelectChannelConnector;

        r0 := @parameter0: java.nio.channels.SocketChannel;

        if r0 == null goto label1;

        $r3 = virtualinvoke r0.<java.nio.channels.SocketChannel: java.net.Socket socket()>();

        $r4 = virtualinvoke $r3.<java.net.Socket: java.net.InetAddress getInetAddress()>();

        $r5 = virtualinvoke $r4.<java.net.InetAddress: java.lang.String getHostAddress()>();

        $r6 = virtualinvoke r0.<java.nio.channels.SocketChannel: java.net.Socket socket()>();

        $i0 = virtualinvoke $r6.<java.net.Socket: int getPort()>();

        $r7 = r1.<org.eclipse.jetty.server.ssl.SslSelectChannelConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        r8 = virtualinvoke $r7.<org.eclipse.jetty.util.ssl.SslContextFactory: javax.net.ssl.SSLEngine newSslEngine(java.lang.String,int)>($r5, $i0);

        goto label2;

     label1:
        $r2 = r1.<org.eclipse.jetty.server.ssl.SslSelectChannelConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        r8 = virtualinvoke $r2.<org.eclipse.jetty.util.ssl.SslContextFactory: javax.net.ssl.SSLEngine newSslEngine()>();

     label2:
        virtualinvoke r8.<javax.net.ssl.SSLEngine: void setUseClientMode(boolean)>(0);

        return r8;
    }

    protected void doStart() throws java.lang.Exception
    {
        org.eclipse.jetty.io.Buffers $r9;
        org.eclipse.jetty.util.ssl.SslContextFactory $r1, $r2, $r3;
        org.eclipse.jetty.server.ssl.SslSelectChannelConnector r0;
        org.eclipse.jetty.io.Buffers$Type $r6, $r7, $r8;
        javax.net.ssl.SSLEngine $r4;
        javax.net.ssl.SSLSession $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        boolean $z0, $z1, $z2;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSelectChannelConnector;

        $r1 = r0.<org.eclipse.jetty.server.ssl.SslSelectChannelConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        virtualinvoke $r1.<org.eclipse.jetty.util.ssl.SslContextFactory: void checkKeyStore()>();

        $r2 = r0.<org.eclipse.jetty.server.ssl.SslSelectChannelConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        virtualinvoke $r2.<org.eclipse.jetty.util.ssl.SslContextFactory: void start()>();

        $r3 = r0.<org.eclipse.jetty.server.ssl.SslSelectChannelConnector: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        $r4 = virtualinvoke $r3.<org.eclipse.jetty.util.ssl.SslContextFactory: javax.net.ssl.SSLEngine newSslEngine()>();

        virtualinvoke $r4.<javax.net.ssl.SSLEngine: void setUseClientMode(boolean)>(0);

        $r5 = virtualinvoke $r4.<javax.net.ssl.SSLEngine: javax.net.ssl.SSLSession getSession()>();

        $z0 = virtualinvoke r0.<org.eclipse.jetty.server.ssl.SslSelectChannelConnector: boolean getUseDirectBuffers()>();

        if $z0 == 0 goto label1;

        $r6 = <org.eclipse.jetty.io.Buffers$Type: org.eclipse.jetty.io.Buffers$Type DIRECT>;

        goto label2;

     label1:
        $r6 = <org.eclipse.jetty.io.Buffers$Type: org.eclipse.jetty.io.Buffers$Type INDIRECT>;

     label2:
        $i4 = interfaceinvoke $r5.<javax.net.ssl.SSLSession: int getApplicationBufferSize()>();

        $z1 = virtualinvoke r0.<org.eclipse.jetty.server.ssl.SslSelectChannelConnector: boolean getUseDirectBuffers()>();

        if $z1 == 0 goto label3;

        $r7 = <org.eclipse.jetty.io.Buffers$Type: org.eclipse.jetty.io.Buffers$Type DIRECT>;

        goto label4;

     label3:
        $r7 = <org.eclipse.jetty.io.Buffers$Type: org.eclipse.jetty.io.Buffers$Type INDIRECT>;

     label4:
        $i5 = interfaceinvoke $r5.<javax.net.ssl.SSLSession: int getApplicationBufferSize()>();

        $z2 = virtualinvoke r0.<org.eclipse.jetty.server.ssl.SslSelectChannelConnector: boolean getUseDirectBuffers()>();

        if $z2 == 0 goto label5;

        $r8 = <org.eclipse.jetty.io.Buffers$Type: org.eclipse.jetty.io.Buffers$Type DIRECT>;

        goto label6;

     label5:
        $r8 = <org.eclipse.jetty.io.Buffers$Type: org.eclipse.jetty.io.Buffers$Type INDIRECT>;

     label6:
        $i6 = virtualinvoke r0.<org.eclipse.jetty.server.ssl.SslSelectChannelConnector: int getMaxBuffers()>();

        $r9 = staticinvoke <org.eclipse.jetty.io.BuffersFactory: org.eclipse.jetty.io.Buffers newBuffers(org.eclipse.jetty.io.Buffers$Type,int,org.eclipse.jetty.io.Buffers$Type,int,org.eclipse.jetty.io.Buffers$Type,int)>($r6, $i4, $r7, $i5, $r8, $i6);

        r0.<org.eclipse.jetty.server.ssl.SslSelectChannelConnector: org.eclipse.jetty.io.Buffers _sslBuffers> = $r9;

        $i7 = virtualinvoke r0.<org.eclipse.jetty.server.ssl.SslSelectChannelConnector: int getRequestHeaderSize()>();

        $i8 = interfaceinvoke $r5.<javax.net.ssl.SSLSession: int getApplicationBufferSize()>();

        if $i7 >= $i8 goto label7;

        $i3 = interfaceinvoke $r5.<javax.net.ssl.SSLSession: int getApplicationBufferSize()>();

        virtualinvoke r0.<org.eclipse.jetty.server.ssl.SslSelectChannelConnector: void setRequestHeaderSize(int)>($i3);

     label7:
        $i0 = virtualinvoke r0.<org.eclipse.jetty.server.ssl.SslSelectChannelConnector: int getRequestBufferSize()>();

        $i1 = interfaceinvoke $r5.<javax.net.ssl.SSLSession: int getApplicationBufferSize()>();

        if $i0 >= $i1 goto label8;

        $i2 = interfaceinvoke $r5.<javax.net.ssl.SSLSession: int getApplicationBufferSize()>();

        virtualinvoke r0.<org.eclipse.jetty.server.ssl.SslSelectChannelConnector: void setRequestBufferSize(int)>($i2);

     label8:
        specialinvoke r0.<org.eclipse.jetty.server.nio.SelectChannelConnector: void doStart()>();

        return;
    }

    protected void doStop() throws java.lang.Exception
    {
        org.eclipse.jetty.server.ssl.SslSelectChannelConnector r0;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSelectChannelConnector;

        r0.<org.eclipse.jetty.server.ssl.SslSelectChannelConnector: org.eclipse.jetty.io.Buffers _sslBuffers> = null;

        specialinvoke r0.<org.eclipse.jetty.server.nio.SelectChannelConnector: void doStop()>();

        return;
    }

    public org.eclipse.jetty.io.Buffers getSslBuffers()
    {
        org.eclipse.jetty.io.Buffers $r1;
        org.eclipse.jetty.server.ssl.SslSelectChannelConnector r0;

        r0 := @this: org.eclipse.jetty.server.ssl.SslSelectChannelConnector;

        $r1 = r0.<org.eclipse.jetty.server.ssl.SslSelectChannelConnector: org.eclipse.jetty.io.Buffers _sslBuffers>;

        return $r1;
    }
}
