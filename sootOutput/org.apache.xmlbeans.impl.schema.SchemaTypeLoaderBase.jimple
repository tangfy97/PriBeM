public abstract class org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase extends java.lang.Object implements org.apache.xmlbeans.SchemaTypeLoader
{
    private static final java.lang.String USER_AGENT;
    private static final java.lang.reflect.Method _pathCompiler;
    private static final java.lang.reflect.Method _queryCompiler;
    static java.lang.Class class$java$lang$String;
    static java.lang.Class class$org$apache$xmlbeans$XmlOptions;
    static final boolean $assertionsDisabled;
    static java.lang.Class class$org$apache$xmlbeans$impl$schema$SchemaTypeLoaderBase;

    public void <init>()
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static java.lang.reflect.Method getMethod(java.lang.String, java.lang.String, java.lang.Class[])
    {
        java.lang.IllegalStateException $r6;
        java.lang.Class[] r3;
        java.lang.Exception $r5;
        java.lang.StringBuffer $r7, $r8, $r9, $r10, $r11, $r12, $r13;
        java.lang.Class $r1;
        java.lang.String r0, r2, $r14;
        java.lang.reflect.Method $r4;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Class[];

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        $r4 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>(r2, r3);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.IllegalStateException;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Cannot find ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".  verify that xmlstore ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(from xbean.jar) is on classpath");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r14);

        throw $r6;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private static java.lang.Object invokeMethod(java.lang.reflect.Method, java.lang.Object[])
    {
        java.lang.Throwable $r7;
        java.lang.IllegalStateException $r4, $r8;
        java.lang.Object[] r1;
        java.lang.Exception $r3;
        java.lang.reflect.InvocationTargetException $r6;
        java.lang.Object $r2;
        java.lang.String $r5, $r9;
        java.lang.reflect.Method r0;

        r0 := @parameter0: java.lang.reflect.Method;

        r1 := @parameter1: java.lang.Object[];

     label1:
        $r2 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, r1);

     label2:
        return $r2;

     label3:
        $r6 := @caughtexception;

        $r7 = virtualinvoke $r6.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();

        $r8 = new java.lang.IllegalStateException;

        $r9 = virtualinvoke $r7.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9);

        virtualinvoke $r8.<java.lang.IllegalStateException: java.lang.Throwable initCause(java.lang.Throwable)>($r7);

        throw $r8;

     label4:
        $r3 := @caughtexception;

        $r4 = new java.lang.IllegalStateException;

        $r5 = virtualinvoke $r3.<java.lang.Exception: java.lang.String getMessage()>();

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5);

        virtualinvoke $r4.<java.lang.IllegalStateException: java.lang.Throwable initCause(java.lang.Throwable)>($r3);

        throw $r4;

        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label3;
        catch java.lang.Exception from label1 to label2 with label4;
    }

    private static java.lang.String doCompilePath(java.lang.String, org.apache.xmlbeans.XmlOptions)
    {
        java.lang.Object[] $r0;
        org.apache.xmlbeans.XmlOptions r2;
        java.lang.Object $r4;
        java.lang.String r1, $r5;
        java.lang.reflect.Method $r3;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.xmlbeans.XmlOptions;

        $r3 = <org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase: java.lang.reflect.Method _pathCompiler>;

        $r0 = newarray (java.lang.Object)[2];

        $r0[0] = r1;

        $r0[1] = r2;

        $r4 = staticinvoke <org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase: java.lang.Object invokeMethod(java.lang.reflect.Method,java.lang.Object[])>($r3, $r0);

        $r5 = (java.lang.String) $r4;

        return $r5;
    }

    private static java.lang.String doCompileQuery(java.lang.String, org.apache.xmlbeans.XmlOptions)
    {
        java.lang.Object[] $r0;
        org.apache.xmlbeans.XmlOptions r2;
        java.lang.Object $r4;
        java.lang.String r1, $r5;
        java.lang.reflect.Method $r3;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.xmlbeans.XmlOptions;

        $r3 = <org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase: java.lang.reflect.Method _queryCompiler>;

        $r0 = newarray (java.lang.Object)[2];

        $r0[0] = r1;

        $r0[1] = r2;

        $r4 = staticinvoke <org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase: java.lang.Object invokeMethod(java.lang.reflect.Method,java.lang.Object[])>($r3, $r0);

        $r5 = (java.lang.String) $r4;

        return $r5;
    }

    public org.apache.xmlbeans.SchemaType findType(javax.xml.namespace.QName)
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase r0;
        org.apache.xmlbeans.SchemaType$Ref $r2;
        javax.xml.namespace.QName r1;
        java.lang.AssertionError $r4;
        org.apache.xmlbeans.SchemaType $r3;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase;

        r1 := @parameter0: javax.xml.namespace.QName;

        $r2 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase: org.apache.xmlbeans.SchemaType$Ref findTypeRef(javax.xml.namespace.QName)>(r1);

        if $r2 != null goto label1;

        return null;

     label1:
        $r3 = virtualinvoke $r2.<org.apache.xmlbeans.SchemaType$Ref: org.apache.xmlbeans.SchemaType get()>();

        $z0 = <org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        if $r3 != null goto label2;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label2:
        return $r3;
    }

    public org.apache.xmlbeans.SchemaType findDocumentType(javax.xml.namespace.QName)
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase r0;
        org.apache.xmlbeans.SchemaType$Ref $r2;
        javax.xml.namespace.QName r1;
        java.lang.AssertionError $r4;
        org.apache.xmlbeans.SchemaType $r3;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase;

        r1 := @parameter0: javax.xml.namespace.QName;

        $r2 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase: org.apache.xmlbeans.SchemaType$Ref findDocumentTypeRef(javax.xml.namespace.QName)>(r1);

        if $r2 != null goto label1;

        return null;

     label1:
        $r3 = virtualinvoke $r2.<org.apache.xmlbeans.SchemaType$Ref: org.apache.xmlbeans.SchemaType get()>();

        $z0 = <org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        if $r3 != null goto label2;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label2:
        return $r3;
    }

    public org.apache.xmlbeans.SchemaType findAttributeType(javax.xml.namespace.QName)
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase r0;
        org.apache.xmlbeans.SchemaType$Ref $r2;
        javax.xml.namespace.QName r1;
        java.lang.AssertionError $r4;
        org.apache.xmlbeans.SchemaType $r3;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase;

        r1 := @parameter0: javax.xml.namespace.QName;

        $r2 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase: org.apache.xmlbeans.SchemaType$Ref findAttributeTypeRef(javax.xml.namespace.QName)>(r1);

        if $r2 != null goto label1;

        return null;

     label1:
        $r3 = virtualinvoke $r2.<org.apache.xmlbeans.SchemaType$Ref: org.apache.xmlbeans.SchemaType get()>();

        $z0 = <org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        if $r3 != null goto label2;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label2:
        return $r3;
    }

    public org.apache.xmlbeans.SchemaModelGroup findModelGroup(javax.xml.namespace.QName)
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase r0;
        javax.xml.namespace.QName r1;
        java.lang.AssertionError $r4;
        org.apache.xmlbeans.SchemaModelGroup $r3;
        org.apache.xmlbeans.SchemaModelGroup$Ref $r2;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase;

        r1 := @parameter0: javax.xml.namespace.QName;

        $r2 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase: org.apache.xmlbeans.SchemaModelGroup$Ref findModelGroupRef(javax.xml.namespace.QName)>(r1);

        if $r2 != null goto label1;

        return null;

     label1:
        $r3 = virtualinvoke $r2.<org.apache.xmlbeans.SchemaModelGroup$Ref: org.apache.xmlbeans.SchemaModelGroup get()>();

        $z0 = <org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        if $r3 != null goto label2;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label2:
        return $r3;
    }

    public org.apache.xmlbeans.SchemaAttributeGroup findAttributeGroup(javax.xml.namespace.QName)
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase r0;
        org.apache.xmlbeans.SchemaAttributeGroup $r3;
        javax.xml.namespace.QName r1;
        java.lang.AssertionError $r4;
        org.apache.xmlbeans.SchemaAttributeGroup$Ref $r2;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase;

        r1 := @parameter0: javax.xml.namespace.QName;

        $r2 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase: org.apache.xmlbeans.SchemaAttributeGroup$Ref findAttributeGroupRef(javax.xml.namespace.QName)>(r1);

        if $r2 != null goto label1;

        return null;

     label1:
        $r3 = virtualinvoke $r2.<org.apache.xmlbeans.SchemaAttributeGroup$Ref: org.apache.xmlbeans.SchemaAttributeGroup get()>();

        $z0 = <org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        if $r3 != null goto label2;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label2:
        return $r3;
    }

    public org.apache.xmlbeans.SchemaGlobalElement findElement(javax.xml.namespace.QName)
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase r0;
        org.apache.xmlbeans.SchemaGlobalElement$Ref $r2;
        org.apache.xmlbeans.SchemaGlobalElement $r3;
        javax.xml.namespace.QName r1;
        java.lang.AssertionError $r4;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase;

        r1 := @parameter0: javax.xml.namespace.QName;

        $r2 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase: org.apache.xmlbeans.SchemaGlobalElement$Ref findElementRef(javax.xml.namespace.QName)>(r1);

        if $r2 != null goto label1;

        return null;

     label1:
        $r3 = virtualinvoke $r2.<org.apache.xmlbeans.SchemaGlobalElement$Ref: org.apache.xmlbeans.SchemaGlobalElement get()>();

        $z0 = <org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        if $r3 != null goto label2;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label2:
        return $r3;
    }

    public org.apache.xmlbeans.SchemaGlobalAttribute findAttribute(javax.xml.namespace.QName)
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase r0;
        org.apache.xmlbeans.SchemaGlobalAttribute $r3;
        javax.xml.namespace.QName r1;
        java.lang.AssertionError $r4;
        org.apache.xmlbeans.SchemaGlobalAttribute$Ref $r2;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase;

        r1 := @parameter0: javax.xml.namespace.QName;

        $r2 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase: org.apache.xmlbeans.SchemaGlobalAttribute$Ref findAttributeRef(javax.xml.namespace.QName)>(r1);

        if $r2 != null goto label1;

        return null;

     label1:
        $r3 = virtualinvoke $r2.<org.apache.xmlbeans.SchemaGlobalAttribute$Ref: org.apache.xmlbeans.SchemaGlobalAttribute get()>();

        $z0 = <org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        if $r3 != null goto label2;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label2:
        return $r3;
    }

    public org.apache.xmlbeans.XmlObject newInstance(org.apache.xmlbeans.SchemaType, org.apache.xmlbeans.XmlOptions)
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase r1;
        org.apache.xmlbeans.XmlOptions r3;
        org.apache.xmlbeans.XmlObject $r4, $r5;
        org.apache.xmlbeans.SchemaType r2;
        org.apache.xmlbeans.XmlFactoryHook $r0;

        r1 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase;

        r2 := @parameter0: org.apache.xmlbeans.SchemaType;

        r3 := @parameter1: org.apache.xmlbeans.XmlOptions;

        $r0 = staticinvoke <org.apache.xmlbeans.XmlFactoryHook$ThreadContext: org.apache.xmlbeans.XmlFactoryHook getHook()>();

        if $r0 == null goto label1;

        $r5 = interfaceinvoke $r0.<org.apache.xmlbeans.XmlFactoryHook: org.apache.xmlbeans.XmlObject newInstance(org.apache.xmlbeans.SchemaTypeLoader,org.apache.xmlbeans.SchemaType,org.apache.xmlbeans.XmlOptions)>(r1, r2, r3);

        return $r5;

     label1:
        $r4 = staticinvoke <org.apache.xmlbeans.impl.store.Locale: org.apache.xmlbeans.XmlObject newInstance(org.apache.xmlbeans.SchemaTypeLoader,org.apache.xmlbeans.SchemaType,org.apache.xmlbeans.XmlOptions)>(r1, r2, r3);

        return $r4;
    }

    public org.apache.xmlbeans.XmlObject parse(java.lang.String, org.apache.xmlbeans.SchemaType, org.apache.xmlbeans.XmlOptions) throws org.apache.xmlbeans.XmlException
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase r1;
        org.apache.xmlbeans.XmlOptions r4;
        java.lang.String r2;
        org.apache.xmlbeans.XmlObject $r5, $r6;
        org.apache.xmlbeans.SchemaType r3;
        org.apache.xmlbeans.XmlFactoryHook $r0;

        r1 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: org.apache.xmlbeans.SchemaType;

        r4 := @parameter2: org.apache.xmlbeans.XmlOptions;

        $r0 = staticinvoke <org.apache.xmlbeans.XmlFactoryHook$ThreadContext: org.apache.xmlbeans.XmlFactoryHook getHook()>();

        if $r0 == null goto label1;

        $r6 = interfaceinvoke $r0.<org.apache.xmlbeans.XmlFactoryHook: org.apache.xmlbeans.XmlObject parse(org.apache.xmlbeans.SchemaTypeLoader,java.lang.String,org.apache.xmlbeans.SchemaType,org.apache.xmlbeans.XmlOptions)>(r1, r2, r3, r4);

        return $r6;

     label1:
        $r5 = staticinvoke <org.apache.xmlbeans.impl.store.Locale: org.apache.xmlbeans.XmlObject parseToXmlObject(org.apache.xmlbeans.SchemaTypeLoader,java.lang.String,org.apache.xmlbeans.SchemaType,org.apache.xmlbeans.XmlOptions)>(r1, r2, r3, r4);

        return $r5;
    }

    public org.apache.xmlbeans.XmlObject parse(org.apache.xmlbeans.xml.stream.XMLInputStream, org.apache.xmlbeans.SchemaType, org.apache.xmlbeans.XmlOptions) throws org.apache.xmlbeans.XmlException, org.apache.xmlbeans.xml.stream.XMLStreamException
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase r1;
        org.apache.xmlbeans.xml.stream.XMLInputStream r2;
        org.apache.xmlbeans.XmlOptions r4;
        org.apache.xmlbeans.XmlObject $r5, $r6;
        org.apache.xmlbeans.SchemaType r3;
        org.apache.xmlbeans.XmlFactoryHook $r0;

        r1 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase;

        r2 := @parameter0: org.apache.xmlbeans.xml.stream.XMLInputStream;

        r3 := @parameter1: org.apache.xmlbeans.SchemaType;

        r4 := @parameter2: org.apache.xmlbeans.XmlOptions;

        $r0 = staticinvoke <org.apache.xmlbeans.XmlFactoryHook$ThreadContext: org.apache.xmlbeans.XmlFactoryHook getHook()>();

        if $r0 == null goto label1;

        $r6 = interfaceinvoke $r0.<org.apache.xmlbeans.XmlFactoryHook: org.apache.xmlbeans.XmlObject parse(org.apache.xmlbeans.SchemaTypeLoader,org.apache.xmlbeans.xml.stream.XMLInputStream,org.apache.xmlbeans.SchemaType,org.apache.xmlbeans.XmlOptions)>(r1, r2, r3, r4);

        return $r6;

     label1:
        $r5 = staticinvoke <org.apache.xmlbeans.impl.store.Locale: org.apache.xmlbeans.XmlObject parseToXmlObject(org.apache.xmlbeans.SchemaTypeLoader,org.apache.xmlbeans.xml.stream.XMLInputStream,org.apache.xmlbeans.SchemaType,org.apache.xmlbeans.XmlOptions)>(r1, r2, r3, r4);

        return $r5;
    }

    public org.apache.xmlbeans.XmlObject parse(javax.xml.stream.XMLStreamReader, org.apache.xmlbeans.SchemaType, org.apache.xmlbeans.XmlOptions) throws org.apache.xmlbeans.XmlException
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase r1;
        javax.xml.stream.XMLStreamReader r2;
        org.apache.xmlbeans.XmlOptions r4;
        org.apache.xmlbeans.XmlObject $r5, $r6;
        org.apache.xmlbeans.SchemaType r3;
        org.apache.xmlbeans.XmlFactoryHook $r0;

        r1 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase;

        r2 := @parameter0: javax.xml.stream.XMLStreamReader;

        r3 := @parameter1: org.apache.xmlbeans.SchemaType;

        r4 := @parameter2: org.apache.xmlbeans.XmlOptions;

        $r0 = staticinvoke <org.apache.xmlbeans.XmlFactoryHook$ThreadContext: org.apache.xmlbeans.XmlFactoryHook getHook()>();

        if $r0 == null goto label1;

        $r6 = interfaceinvoke $r0.<org.apache.xmlbeans.XmlFactoryHook: org.apache.xmlbeans.XmlObject parse(org.apache.xmlbeans.SchemaTypeLoader,javax.xml.stream.XMLStreamReader,org.apache.xmlbeans.SchemaType,org.apache.xmlbeans.XmlOptions)>(r1, r2, r3, r4);

        return $r6;

     label1:
        $r5 = staticinvoke <org.apache.xmlbeans.impl.store.Locale: org.apache.xmlbeans.XmlObject parseToXmlObject(org.apache.xmlbeans.SchemaTypeLoader,javax.xml.stream.XMLStreamReader,org.apache.xmlbeans.SchemaType,org.apache.xmlbeans.XmlOptions)>(r1, r2, r3, r4);

        return $r5;
    }

    public org.apache.xmlbeans.XmlObject parse(java.io.File, org.apache.xmlbeans.SchemaType, org.apache.xmlbeans.XmlOptions) throws org.apache.xmlbeans.XmlException, java.io.IOException
    {
        java.lang.Throwable $r11;
        org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase r1;
        java.net.URI $r4, $r5, $r8, $r9;
        java.lang.String $r6, $r10;
        org.apache.xmlbeans.XmlObject $r14;
        org.apache.xmlbeans.SchemaType r2;
        boolean $z0;
        java.io.FileInputStream $r13;
        java.io.File r0;
        org.apache.xmlbeans.XmlOptions $r3, $r7, r12;

        r1 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase;

        r0 := @parameter0: java.io.File;

        r2 := @parameter1: org.apache.xmlbeans.SchemaType;

        r12 := @parameter2: org.apache.xmlbeans.XmlOptions;

        if r12 != null goto label1;

        $r7 = new org.apache.xmlbeans.XmlOptions;

        specialinvoke $r7.<org.apache.xmlbeans.XmlOptions: void <init>()>();

        r12 = $r7;

        $r8 = virtualinvoke r0.<java.io.File: java.net.URI toURI()>();

        $r9 = virtualinvoke $r8.<java.net.URI: java.net.URI normalize()>();

        $r10 = virtualinvoke $r9.<java.net.URI: java.lang.String toString()>();

        virtualinvoke $r7.<org.apache.xmlbeans.XmlOptions: void put(java.lang.Object,java.lang.Object)>("DOCUMENT_SOURCE_NAME", $r10);

        goto label2;

     label1:
        $z0 = virtualinvoke r12.<org.apache.xmlbeans.XmlOptions: boolean hasOption(java.lang.Object)>("DOCUMENT_SOURCE_NAME");

        if $z0 != 0 goto label2;

        $r3 = new org.apache.xmlbeans.XmlOptions;

        specialinvoke $r3.<org.apache.xmlbeans.XmlOptions: void <init>(org.apache.xmlbeans.XmlOptions)>(r12);

        r12 = $r3;

        $r4 = virtualinvoke r0.<java.io.File: java.net.URI toURI()>();

        $r5 = virtualinvoke $r4.<java.net.URI: java.net.URI normalize()>();

        $r6 = virtualinvoke $r5.<java.net.URI: java.lang.String toString()>();

        virtualinvoke $r3.<org.apache.xmlbeans.XmlOptions: void put(java.lang.Object,java.lang.Object)>("DOCUMENT_SOURCE_NAME", $r6);

     label2:
        $r13 = new java.io.FileInputStream;

        specialinvoke $r13.<java.io.FileInputStream: void <init>(java.io.File)>(r0);

     label3:
        $r14 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase: org.apache.xmlbeans.XmlObject parse(java.io.InputStream,org.apache.xmlbeans.SchemaType,org.apache.xmlbeans.XmlOptions)>($r13, r2, r12);

     label4:
        virtualinvoke $r13.<java.io.InputStream: void close()>();

        return $r14;

     label5:
        $r11 := @caughtexception;

     label6:
        virtualinvoke $r13.<java.io.InputStream: void close()>();

        throw $r11;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public org.apache.xmlbeans.XmlObject parse(java.net.URL, org.apache.xmlbeans.SchemaType, org.apache.xmlbeans.XmlOptions) throws org.apache.xmlbeans.XmlException, java.io.IOException
    {
        java.lang.Throwable $r10;
        java.net.HttpURLConnection r16;
        java.net.URL $r5, r11;
        org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase r1;
        java.net.URLConnection $r14;
        int $i0, i1;
        org.apache.xmlbeans.XmlObject $r3;
        java.lang.String $r4, $r7, $r9, $r15;
        org.apache.xmlbeans.SchemaType r2;
        boolean $z0, z1, $z2, $z4, $z5;
        org.apache.xmlbeans.XmlOptions $r6, $r8, r12;
        java.io.InputStream $r0, r13;

        r1 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase;

        r11 := @parameter0: java.net.URL;

        r2 := @parameter1: org.apache.xmlbeans.SchemaType;

        r12 := @parameter2: org.apache.xmlbeans.XmlOptions;

        if r12 != null goto label01;

        $r8 = new org.apache.xmlbeans.XmlOptions;

        specialinvoke $r8.<org.apache.xmlbeans.XmlOptions: void <init>()>();

        r12 = $r8;

        $r9 = virtualinvoke r11.<java.net.URL: java.lang.String toString()>();

        virtualinvoke $r8.<org.apache.xmlbeans.XmlOptions: void put(java.lang.Object,java.lang.Object)>("DOCUMENT_SOURCE_NAME", $r9);

        goto label02;

     label01:
        $z0 = virtualinvoke r12.<org.apache.xmlbeans.XmlOptions: boolean hasOption(java.lang.Object)>("DOCUMENT_SOURCE_NAME");

        if $z0 != 0 goto label02;

        $r6 = new org.apache.xmlbeans.XmlOptions;

        specialinvoke $r6.<org.apache.xmlbeans.XmlOptions: void <init>(org.apache.xmlbeans.XmlOptions)>(r12);

        r12 = $r6;

        $r7 = virtualinvoke r11.<java.net.URL: java.lang.String toString()>();

        virtualinvoke $r6.<org.apache.xmlbeans.XmlOptions: void put(java.lang.Object,java.lang.Object)>("DOCUMENT_SOURCE_NAME", $r7);

     label02:
        r13 = null;

     label03:
        z1 = 0;

        i1 = 0;

     label04:
        $r14 = virtualinvoke r11.<java.net.URL: java.net.URLConnection openConnection()>();

        $r15 = <org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase: java.lang.String USER_AGENT>;

        virtualinvoke $r14.<java.net.URLConnection: void addRequestProperty(java.lang.String,java.lang.String)>("User-Agent", $r15);

        virtualinvoke $r14.<java.net.URLConnection: void addRequestProperty(java.lang.String,java.lang.String)>("Accept", "application/xml, text/xml, */*");

        $z2 = $r14 instanceof java.net.HttpURLConnection;

        if $z2 == 0 goto label10;

        r16 = (java.net.HttpURLConnection) $r14;

        $i0 = virtualinvoke r16.<java.net.HttpURLConnection: int getResponseCode()>();

        if $i0 == 301 goto label05;

        if $i0 != 302 goto label06;

     label05:
        $z5 = 1;

        $z4 = 1;

        goto label07;

     label06:
        $z5 = 0;

        $z4 = 0;

     label07:
        z1 = $z5;

        if $z4 == 0 goto label08;

        if i1 <= 5 goto label08;

        z1 = 0;

     label08:
        if z1 == 0 goto label10;

        $r4 = virtualinvoke r16.<java.net.HttpURLConnection: java.lang.String getHeaderField(java.lang.String)>("Location");

        if $r4 != null goto label09;

        z1 = 0;

        goto label10;

     label09:
        $r5 = new java.net.URL;

        specialinvoke $r5.<java.net.URL: void <init>(java.lang.String)>($r4);

        r11 = $r5;

        i1 = i1 + 1;

     label10:
        if z1 != 0 goto label04;

        $r0 = virtualinvoke $r14.<java.net.URLConnection: java.io.InputStream getInputStream()>();

        r13 = $r0;

        $r3 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase: org.apache.xmlbeans.XmlObject parse(java.io.InputStream,org.apache.xmlbeans.SchemaType,org.apache.xmlbeans.XmlOptions)>($r0, r2, r12);

     label11:
        if $r0 == null goto label12;

        virtualinvoke $r0.<java.io.InputStream: void close()>();

     label12:
        return $r3;

     label13:
        $r10 := @caughtexception;

     label14:
        if r13 == null goto label15;

        virtualinvoke r13.<java.io.InputStream: void close()>();

     label15:
        throw $r10;

        catch java.lang.Throwable from label03 to label11 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    public org.apache.xmlbeans.XmlObject parse(java.io.InputStream, org.apache.xmlbeans.SchemaType, org.apache.xmlbeans.XmlOptions) throws org.apache.xmlbeans.XmlException, java.io.IOException
    {
        byte[] $r7;
        java.security.MessageDigest $r6, $r9;
        org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase r2;
        org.apache.xmlbeans.XmlDocumentProperties $r5;
        org.apache.xmlbeans.XmlOptions r1;
        java.security.NoSuchAlgorithmException $r11;
        java.security.DigestInputStream $r10, r13;
        org.apache.xmlbeans.XmlObject $r4, $r8;
        org.apache.xmlbeans.SchemaType r3;
        org.apache.xmlbeans.XmlFactoryHook $r0;
        boolean $z0;
        java.io.InputStream r12;

        r2 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase;

        r12 := @parameter0: java.io.InputStream;

        r3 := @parameter1: org.apache.xmlbeans.SchemaType;

        r1 := @parameter2: org.apache.xmlbeans.XmlOptions;

        $r0 = staticinvoke <org.apache.xmlbeans.XmlFactoryHook$ThreadContext: org.apache.xmlbeans.XmlFactoryHook getHook()>();

        r13 = null;

        if r1 == null goto label5;

        $z0 = virtualinvoke r1.<org.apache.xmlbeans.XmlOptions: boolean hasOption(java.lang.Object)>("LOAD_MESSAGE_DIGEST");

        if $z0 == 0 goto label5;

     label1:
        $r9 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("SHA");

     label2:
        goto label4;

     label3:
        $r11 := @caughtexception;

        goto label5;

     label4:
        $r10 = new java.security.DigestInputStream;

        specialinvoke $r10.<java.security.DigestInputStream: void <init>(java.io.InputStream,java.security.MessageDigest)>(r12, $r9);

        r13 = $r10;

        r12 = $r10;

     label5:
        if $r0 == null goto label6;

        $r8 = interfaceinvoke $r0.<org.apache.xmlbeans.XmlFactoryHook: org.apache.xmlbeans.XmlObject parse(org.apache.xmlbeans.SchemaTypeLoader,java.io.InputStream,org.apache.xmlbeans.SchemaType,org.apache.xmlbeans.XmlOptions)>(r2, r12, r3, r1);

        return $r8;

     label6:
        $r4 = staticinvoke <org.apache.xmlbeans.impl.store.Locale: org.apache.xmlbeans.XmlObject parseToXmlObject(org.apache.xmlbeans.SchemaTypeLoader,java.io.InputStream,org.apache.xmlbeans.SchemaType,org.apache.xmlbeans.XmlOptions)>(r2, r12, r3, r1);

        if r13 == null goto label7;

        $r5 = interfaceinvoke $r4.<org.apache.xmlbeans.XmlObject: org.apache.xmlbeans.XmlDocumentProperties documentProperties()>();

        $r6 = virtualinvoke r13.<java.security.DigestInputStream: java.security.MessageDigest getMessageDigest()>();

        $r7 = virtualinvoke $r6.<java.security.MessageDigest: byte[] digest()>();

        virtualinvoke $r5.<org.apache.xmlbeans.XmlDocumentProperties: void setMessageDigest(byte[])>($r7);

     label7:
        return $r4;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
    }

    public org.apache.xmlbeans.XmlObject parse(java.io.Reader, org.apache.xmlbeans.SchemaType, org.apache.xmlbeans.XmlOptions) throws org.apache.xmlbeans.XmlException, java.io.IOException
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase r1;
        org.apache.xmlbeans.XmlOptions r4;
        java.io.Reader r2;
        org.apache.xmlbeans.XmlObject $r5, $r6;
        org.apache.xmlbeans.SchemaType r3;
        org.apache.xmlbeans.XmlFactoryHook $r0;

        r1 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase;

        r2 := @parameter0: java.io.Reader;

        r3 := @parameter1: org.apache.xmlbeans.SchemaType;

        r4 := @parameter2: org.apache.xmlbeans.XmlOptions;

        $r0 = staticinvoke <org.apache.xmlbeans.XmlFactoryHook$ThreadContext: org.apache.xmlbeans.XmlFactoryHook getHook()>();

        if $r0 == null goto label1;

        $r6 = interfaceinvoke $r0.<org.apache.xmlbeans.XmlFactoryHook: org.apache.xmlbeans.XmlObject parse(org.apache.xmlbeans.SchemaTypeLoader,java.io.Reader,org.apache.xmlbeans.SchemaType,org.apache.xmlbeans.XmlOptions)>(r1, r2, r3, r4);

        return $r6;

     label1:
        $r5 = staticinvoke <org.apache.xmlbeans.impl.store.Locale: org.apache.xmlbeans.XmlObject parseToXmlObject(org.apache.xmlbeans.SchemaTypeLoader,java.io.Reader,org.apache.xmlbeans.SchemaType,org.apache.xmlbeans.XmlOptions)>(r1, r2, r3, r4);

        return $r5;
    }

    public org.apache.xmlbeans.XmlObject parse(org.w3c.dom.Node, org.apache.xmlbeans.SchemaType, org.apache.xmlbeans.XmlOptions) throws org.apache.xmlbeans.XmlException
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase r1;
        org.apache.xmlbeans.XmlOptions r4;
        org.w3c.dom.Node r2;
        org.apache.xmlbeans.XmlObject $r5, $r6;
        org.apache.xmlbeans.SchemaType r3;
        org.apache.xmlbeans.XmlFactoryHook $r0;

        r1 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase;

        r2 := @parameter0: org.w3c.dom.Node;

        r3 := @parameter1: org.apache.xmlbeans.SchemaType;

        r4 := @parameter2: org.apache.xmlbeans.XmlOptions;

        $r0 = staticinvoke <org.apache.xmlbeans.XmlFactoryHook$ThreadContext: org.apache.xmlbeans.XmlFactoryHook getHook()>();

        if $r0 == null goto label1;

        $r6 = interfaceinvoke $r0.<org.apache.xmlbeans.XmlFactoryHook: org.apache.xmlbeans.XmlObject parse(org.apache.xmlbeans.SchemaTypeLoader,org.w3c.dom.Node,org.apache.xmlbeans.SchemaType,org.apache.xmlbeans.XmlOptions)>(r1, r2, r3, r4);

        return $r6;

     label1:
        $r5 = staticinvoke <org.apache.xmlbeans.impl.store.Locale: org.apache.xmlbeans.XmlObject parseToXmlObject(org.apache.xmlbeans.SchemaTypeLoader,org.w3c.dom.Node,org.apache.xmlbeans.SchemaType,org.apache.xmlbeans.XmlOptions)>(r1, r2, r3, r4);

        return $r5;
    }

    public org.apache.xmlbeans.XmlSaxHandler newXmlSaxHandler(org.apache.xmlbeans.SchemaType, org.apache.xmlbeans.XmlOptions)
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase r1;
        org.apache.xmlbeans.XmlOptions r3;
        org.apache.xmlbeans.XmlSaxHandler $r4, $r5;
        org.apache.xmlbeans.SchemaType r2;
        org.apache.xmlbeans.XmlFactoryHook $r0;

        r1 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase;

        r2 := @parameter0: org.apache.xmlbeans.SchemaType;

        r3 := @parameter1: org.apache.xmlbeans.XmlOptions;

        $r0 = staticinvoke <org.apache.xmlbeans.XmlFactoryHook$ThreadContext: org.apache.xmlbeans.XmlFactoryHook getHook()>();

        if $r0 == null goto label1;

        $r5 = interfaceinvoke $r0.<org.apache.xmlbeans.XmlFactoryHook: org.apache.xmlbeans.XmlSaxHandler newXmlSaxHandler(org.apache.xmlbeans.SchemaTypeLoader,org.apache.xmlbeans.SchemaType,org.apache.xmlbeans.XmlOptions)>(r1, r2, r3);

        return $r5;

     label1:
        $r4 = staticinvoke <org.apache.xmlbeans.impl.store.Locale: org.apache.xmlbeans.XmlSaxHandler newSaxHandler(org.apache.xmlbeans.SchemaTypeLoader,org.apache.xmlbeans.SchemaType,org.apache.xmlbeans.XmlOptions)>(r1, r2, r3);

        return $r4;
    }

    public org.w3c.dom.DOMImplementation newDomImplementation(org.apache.xmlbeans.XmlOptions)
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase r0;
        org.apache.xmlbeans.XmlOptions r1;
        org.w3c.dom.DOMImplementation $r2;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase;

        r1 := @parameter0: org.apache.xmlbeans.XmlOptions;

        $r2 = staticinvoke <org.apache.xmlbeans.impl.store.Locale: org.w3c.dom.DOMImplementation newDomImplementation(org.apache.xmlbeans.SchemaTypeLoader,org.apache.xmlbeans.XmlOptions)>(r0, r1);

        return $r2;
    }

    public org.apache.xmlbeans.xml.stream.XMLInputStream newValidatingXMLInputStream(org.apache.xmlbeans.xml.stream.XMLInputStream, org.apache.xmlbeans.SchemaType, org.apache.xmlbeans.XmlOptions) throws org.apache.xmlbeans.XmlException, org.apache.xmlbeans.xml.stream.XMLStreamException
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase r2;
        org.apache.xmlbeans.xml.stream.XMLInputStream r1;
        org.apache.xmlbeans.XmlOptions r4;
        org.apache.xmlbeans.impl.validator.ValidatingXMLInputStream $r0;
        org.apache.xmlbeans.SchemaType r3;

        r2 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase;

        r1 := @parameter0: org.apache.xmlbeans.xml.stream.XMLInputStream;

        r3 := @parameter1: org.apache.xmlbeans.SchemaType;

        r4 := @parameter2: org.apache.xmlbeans.XmlOptions;

        $r0 = new org.apache.xmlbeans.impl.validator.ValidatingXMLInputStream;

        specialinvoke $r0.<org.apache.xmlbeans.impl.validator.ValidatingXMLInputStream: void <init>(org.apache.xmlbeans.xml.stream.XMLInputStream,org.apache.xmlbeans.SchemaTypeLoader,org.apache.xmlbeans.SchemaType,org.apache.xmlbeans.XmlOptions)>(r1, r2, r3, r4);

        return $r0;
    }

    public java.lang.String compilePath(java.lang.String)
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase r0;
        java.lang.String r1, $r2;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase: java.lang.String compilePath(java.lang.String,org.apache.xmlbeans.XmlOptions)>(r1, null);

        return $r2;
    }

    public java.lang.String compilePath(java.lang.String, org.apache.xmlbeans.XmlOptions)
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase r3;
        org.apache.xmlbeans.XmlOptions r1;
        java.lang.String r0, $r2;

        r3 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: org.apache.xmlbeans.XmlOptions;

        $r2 = staticinvoke <org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase: java.lang.String doCompilePath(java.lang.String,org.apache.xmlbeans.XmlOptions)>(r0, r1);

        return $r2;
    }

    public java.lang.String compileQuery(java.lang.String)
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase r0;
        java.lang.String r1, $r2;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase: java.lang.String compileQuery(java.lang.String,org.apache.xmlbeans.XmlOptions)>(r1, null);

        return $r2;
    }

    public java.lang.String compileQuery(java.lang.String, org.apache.xmlbeans.XmlOptions)
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase r3;
        org.apache.xmlbeans.XmlOptions r1;
        java.lang.String r0, $r2;

        r3 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: org.apache.xmlbeans.XmlOptions;

        $r2 = staticinvoke <org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase: java.lang.String doCompileQuery(java.lang.String,org.apache.xmlbeans.XmlOptions)>(r0, r1);

        return $r2;
    }

    public org.apache.xmlbeans.SchemaType typeForSignature(java.lang.String)
    {
        org.apache.xmlbeans.SchemaType[] $r9, $r11, $r16, $r30, $r35;
        byte $b27, $b28, $b29, $b30, $b31, $b32, $b33, $b34;
        org.apache.xmlbeans.SchemaType $r6, $r18, $r24, $r28, $r37, r47;
        java.lang.Exception $r43;
        javax.xml.namespace.QName $r5, $r14, $r20, $r23, $r27, $r33, $r39;
        org.apache.xmlbeans.SchemaField $r19, $r38;
        java.util.ArrayList $r49;
        java.lang.String r0, $r4, $r8, $r13, $r17, $r21, $r22, $r26, $r32, $r36, $r40, r45, $r46, r48;
        org.apache.xmlbeans.SchemaGlobalElement $r15;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i16, $i17, i18, i19, $i20, i21, i22, i25, i26, $i35, $i36, $i38;
        org.apache.xmlbeans.SchemaGlobalAttribute $r34;
        char $c15, $c24;
        java.lang.IllegalArgumentException $r50, $r51, $r52, $r53, $r54, $r55, $r56, $r57, $r58;
        java.lang.Object $r2;

        r3 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(64);

        i18 = $i0;

        if $i0 >= 0 goto label01;

        r45 = "";

        i18 = virtualinvoke r0.<java.lang.String: int length()>();

        goto label02;

     label01:
        $i1 = $i0 + 1;

        r45 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i1);

     label02:
        $r49 = new java.util.ArrayList;

        specialinvoke $r49.<java.util.ArrayList: void <init>()>();

        i19 = 0;

     label03:
        if i19 >= i18 goto label10;

        $i16 = virtualinvoke r0.<java.lang.String: int indexOf(int,int)>(58, i19);

        $i17 = virtualinvoke r0.<java.lang.String: int indexOf(int,int)>(124, i19);

        if $i16 >= 0 goto label04;

        $i20 = $i17;

        goto label07;

     label04:
        if $i17 >= 0 goto label05;

        $i20 = $i16;

        goto label07;

     label05:
        if $i16 >= $i17 goto label06;

        $i20 = $i16;

        goto label07;

     label06:
        $i20 = $i17;

     label07:
        i21 = $i20;

        if $i20 < 0 goto label08;

        if $i20 <= i18 goto label09;

     label08:
        i21 = i18;

     label09:
        $r46 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i19, i21);

        interfaceinvoke $r49.<java.util.List: boolean add(java.lang.Object)>($r46);

        i19 = i21 + 1;

        goto label03;

     label10:
        r47 = null;

        $i2 = interfaceinvoke $r49.<java.util.List: int size()>();

        i22 = $i2 - 1;

     label11:
        if i22 < 0 goto label52;

        $r2 = interfaceinvoke $r49.<java.util.List: java.lang.Object get(int)>(i22);

        r48 = (java.lang.String) $r2;

        $i3 = virtualinvoke r48.<java.lang.String: int length()>();

        if $i3 >= 1 goto label12;

        $r50 = new java.lang.IllegalArgumentException;

        specialinvoke $r50.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r50;

     label12:
        $i4 = virtualinvoke r48.<java.lang.String: int length()>();

        if $i4 < 2 goto label13;

        $c15 = virtualinvoke r48.<java.lang.String: char charAt(int)>(1);

        $i35 = (int) $c15;

        if $i35 != 61 goto label13;

        $b34 = 2;

        $b33 = 2;

        $b32 = 2;

        $b31 = 2;

        $b30 = 2;

        $b29 = 2;

        $b28 = 2;

        $b27 = 2;

        goto label14;

     label13:
        $b34 = 1;

        $b33 = 1;

        $b32 = 1;

        $b31 = 1;

        $b30 = 1;

        $b29 = 1;

        $b28 = 1;

        $b27 = 1;

     label14:
        $c24 = virtualinvoke r48.<java.lang.String: char charAt(int)>(0);

        $i36 = (int) $c24;

        tableswitch($i36)
        {
            case 65: goto label28;
            case 66: goto label35;
            case 67: goto label19;
            case 68: goto label17;
            case 69: goto label21;
            case 70: goto label50;
            case 71: goto label50;
            case 72: goto label50;
            case 73: goto label39;
            case 74: goto label50;
            case 75: goto label50;
            case 76: goto label50;
            case 77: goto label43;
            case 78: goto label50;
            case 79: goto label50;
            case 80: goto label50;
            case 81: goto label28;
            case 82: goto label19;
            case 83: goto label50;
            case 84: goto label15;
            case 85: goto label21;
            default: goto label50;
        };

     label15:
        if r47 == null goto label16;

        $r51 = new java.lang.IllegalArgumentException;

        specialinvoke $r51.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r51;

     label16:
        $r4 = virtualinvoke r48.<java.lang.String: java.lang.String substring(int)>($b30);

        $r5 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: javax.xml.namespace.QName forLNS(java.lang.String,java.lang.String)>($r4, r45);

        $r6 = virtualinvoke r3.<org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase: org.apache.xmlbeans.SchemaType findType(javax.xml.namespace.QName)>($r5);

        r47 = $r6;

        if $r6 != null goto label51;

        return null;

     label17:
        if r47 == null goto label18;

        $r52 = new java.lang.IllegalArgumentException;

        specialinvoke $r52.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r52;

     label18:
        $r22 = virtualinvoke r48.<java.lang.String: java.lang.String substring(int)>($b34);

        $r23 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: javax.xml.namespace.QName forLNS(java.lang.String,java.lang.String)>($r22, r45);

        $r24 = virtualinvoke r3.<org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase: org.apache.xmlbeans.SchemaType findDocumentType(javax.xml.namespace.QName)>($r23);

        r47 = $r24;

        if $r24 != null goto label51;

        return null;

     label19:
        if r47 == null goto label20;

        $r53 = new java.lang.IllegalArgumentException;

        specialinvoke $r53.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r53;

     label20:
        $r26 = virtualinvoke r48.<java.lang.String: java.lang.String substring(int)>($b29);

        $r27 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: javax.xml.namespace.QName forLNS(java.lang.String,java.lang.String)>($r26, r45);

        $r28 = virtualinvoke r3.<org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase: org.apache.xmlbeans.SchemaType findAttributeType(javax.xml.namespace.QName)>($r27);

        r47 = $r28;

        if $r28 != null goto label51;

        return null;

     label21:
        if r47 == null goto label26;

        $i10 = interfaceinvoke r47.<org.apache.xmlbeans.SchemaType: int getContentType()>();

        if $i10 >= 3 goto label22;

        return null;

     label22:
        $r16 = interfaceinvoke r47.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType[] getAnonymousTypes()>();

        $r17 = virtualinvoke r48.<java.lang.String: java.lang.String substring(int)>($b27);

        i25 = 0;

     label23:
        $i11 = lengthof $r16;

        if i25 >= $i11 goto label25;

        $r18 = $r16[i25];

        $r19 = interfaceinvoke $r18.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaField getContainerField()>();

        if $r19 == null goto label24;

        $z0 = interfaceinvoke $r19.<org.apache.xmlbeans.SchemaField: boolean isAttribute()>();

        if $z0 != 0 goto label24;

        $r20 = interfaceinvoke $r19.<org.apache.xmlbeans.SchemaField: javax.xml.namespace.QName getName()>();

        $r21 = virtualinvoke $r20.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $z1 = virtualinvoke $r21.<java.lang.String: boolean equals(java.lang.Object)>($r17);

        if $z1 == 0 goto label24;

        r47 = $r16[i25];

        goto label51;

     label24:
        i25 = i25 + 1;

        goto label23;

     label25:
        return null;

     label26:
        $r13 = virtualinvoke r48.<java.lang.String: java.lang.String substring(int)>($b33);

        $r14 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: javax.xml.namespace.QName forLNS(java.lang.String,java.lang.String)>($r13, r45);

        $r15 = virtualinvoke r3.<org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase: org.apache.xmlbeans.SchemaGlobalElement findElement(javax.xml.namespace.QName)>($r14);

        if $r15 != null goto label27;

        return null;

     label27:
        r47 = interfaceinvoke $r15.<org.apache.xmlbeans.SchemaGlobalElement: org.apache.xmlbeans.SchemaType getType()>();

        goto label51;

     label28:
        if r47 == null goto label33;

        $z2 = interfaceinvoke r47.<org.apache.xmlbeans.SchemaType: boolean isSimpleType()>();

        if $z2 == 0 goto label29;

        return null;

     label29:
        $r35 = interfaceinvoke r47.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType[] getAnonymousTypes()>();

        $r36 = virtualinvoke r48.<java.lang.String: java.lang.String substring(int)>($b31);

        i26 = 0;

     label30:
        $i14 = lengthof $r35;

        if i26 >= $i14 goto label32;

        $r37 = $r35[i26];

        $r38 = interfaceinvoke $r37.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaField getContainerField()>();

        if $r38 == null goto label31;

        $z3 = interfaceinvoke $r38.<org.apache.xmlbeans.SchemaField: boolean isAttribute()>();

        if $z3 == 0 goto label31;

        $r39 = interfaceinvoke $r38.<org.apache.xmlbeans.SchemaField: javax.xml.namespace.QName getName()>();

        $r40 = virtualinvoke $r39.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $z4 = virtualinvoke $r40.<java.lang.String: boolean equals(java.lang.Object)>($r36);

        if $z4 == 0 goto label31;

        r47 = $r35[i26];

        goto label51;

     label31:
        i26 = i26 + 1;

        goto label30;

     label32:
        return null;

     label33:
        $r32 = virtualinvoke r48.<java.lang.String: java.lang.String substring(int)>($b28);

        $r33 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: javax.xml.namespace.QName forLNS(java.lang.String,java.lang.String)>($r32, r45);

        $r34 = virtualinvoke r3.<org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase: org.apache.xmlbeans.SchemaGlobalAttribute findAttribute(javax.xml.namespace.QName)>($r33);

        if $r34 != null goto label34;

        return null;

     label34:
        r47 = interfaceinvoke $r34.<org.apache.xmlbeans.SchemaGlobalAttribute: org.apache.xmlbeans.SchemaType getType()>();

        goto label51;

     label35:
        if r47 != null goto label36;

        $r54 = new java.lang.IllegalArgumentException;

        specialinvoke $r54.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r54;

     label36:
        $i12 = interfaceinvoke r47.<org.apache.xmlbeans.SchemaType: int getSimpleVariety()>();

        if $i12 == 1 goto label37;

        return null;

     label37:
        $r30 = interfaceinvoke r47.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType[] getAnonymousTypes()>();

        $i13 = lengthof $r30;

        if $i13 == 1 goto label38;

        return null;

     label38:
        r47 = $r30[0];

        goto label51;

     label39:
        if r47 != null goto label40;

        $r55 = new java.lang.IllegalArgumentException;

        specialinvoke $r55.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r55;

     label40:
        $i8 = interfaceinvoke r47.<org.apache.xmlbeans.SchemaType: int getSimpleVariety()>();

        if $i8 == 3 goto label41;

        return null;

     label41:
        $r11 = interfaceinvoke r47.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType[] getAnonymousTypes()>();

        $i9 = lengthof $r11;

        if $i9 == 1 goto label42;

        return null;

     label42:
        r47 = $r11[0];

        goto label51;

     label43:
        if r47 != null goto label44;

        $r56 = new java.lang.IllegalArgumentException;

        specialinvoke $r56.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r56;

     label44:
        $r8 = virtualinvoke r48.<java.lang.String: java.lang.String substring(int)>($b32);

        $i5 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r8);

     label45:
        goto label47;

     label46:
        $r43 := @caughtexception;

        $r57 = new java.lang.IllegalArgumentException;

        specialinvoke $r57.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r57;

     label47:
        $i6 = interfaceinvoke r47.<org.apache.xmlbeans.SchemaType: int getSimpleVariety()>();

        if $i6 == 2 goto label48;

        return null;

     label48:
        $r9 = interfaceinvoke r47.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType[] getAnonymousTypes()>();

        $i7 = lengthof $r9;

        if $i7 > $i5 goto label49;

        return null;

     label49:
        r47 = $r9[$i5];

        goto label51;

     label50:
        $r58 = new java.lang.IllegalArgumentException;

        specialinvoke $r58.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r58;

     label51:
        $i38 = (int) -1;

        i22 = i22 + $i38;

        goto label11;

     label52:
        return r47;

        catch java.lang.Exception from label44 to label45 with label46;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.StringBuffer $r1, $r2, $r4, $r5, $r7, $r8;
        java.lang.String $r3, $r6, $r9;
        java.lang.reflect.Method $r13, $r17;
        boolean $z0, $z1;
        java.lang.Class[] $r10, $r14;
        java.lang.Class $r0, $r11, $r12, $r15, $r16, $r18, $r19, $r20, $r21, $r22;

        $r0 = <org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase: java.lang.Class class$org$apache$xmlbeans$impl$schema$SchemaTypeLoaderBase>;

        if $r0 != null goto label01;

        $r18 = staticinvoke <org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase: java.lang.Class class$(java.lang.String)>("org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase");

        <org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase: java.lang.Class class$org$apache$xmlbeans$impl$schema$SchemaTypeLoaderBase> = $r18;

        goto label02;

     label01:
        $r18 = <org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase: java.lang.Class class$org$apache$xmlbeans$impl$schema$SchemaTypeLoaderBase>;

     label02:
        $z0 = virtualinvoke $r18.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label03;

        $z1 = 1;

        goto label04;

     label03:
        $z1 = 0;

     label04:
        <org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase: boolean $assertionsDisabled> = $z1;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("XMLBeans/");

        $r3 = staticinvoke <org.apache.xmlbeans.XmlBeans: java.lang.String getVersion()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" (");

        $r6 = staticinvoke <org.apache.xmlbeans.XmlBeans: java.lang.String getTitle()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        <org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase: java.lang.String USER_AGENT> = $r9;

        $r10 = newarray (java.lang.Class)[2];

        $r11 = <org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase: java.lang.Class class$java$lang$String>;

        if $r11 != null goto label05;

        $r19 = staticinvoke <org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase: java.lang.Class class$(java.lang.String)>("java.lang.String");

        <org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase: java.lang.Class class$java$lang$String> = $r19;

        goto label06;

     label05:
        $r19 = <org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase: java.lang.Class class$java$lang$String>;

     label06:
        $r10[0] = $r19;

        $r12 = <org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase: java.lang.Class class$org$apache$xmlbeans$XmlOptions>;

        if $r12 != null goto label07;

        $r20 = staticinvoke <org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase: java.lang.Class class$(java.lang.String)>("org.apache.xmlbeans.XmlOptions");

        <org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase: java.lang.Class class$org$apache$xmlbeans$XmlOptions> = $r20;

        goto label08;

     label07:
        $r20 = <org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase: java.lang.Class class$org$apache$xmlbeans$XmlOptions>;

     label08:
        $r10[1] = $r20;

        $r13 = staticinvoke <org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase: java.lang.reflect.Method getMethod(java.lang.String,java.lang.String,java.lang.Class[])>("org.apache.xmlbeans.impl.store.Path", "compilePath", $r10);

        <org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase: java.lang.reflect.Method _pathCompiler> = $r13;

        $r14 = newarray (java.lang.Class)[2];

        $r15 = <org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase: java.lang.Class class$java$lang$String>;

        if $r15 != null goto label09;

        $r21 = staticinvoke <org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase: java.lang.Class class$(java.lang.String)>("java.lang.String");

        <org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase: java.lang.Class class$java$lang$String> = $r21;

        goto label10;

     label09:
        $r21 = <org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase: java.lang.Class class$java$lang$String>;

     label10:
        $r14[0] = $r21;

        $r16 = <org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase: java.lang.Class class$org$apache$xmlbeans$XmlOptions>;

        if $r16 != null goto label11;

        $r22 = staticinvoke <org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase: java.lang.Class class$(java.lang.String)>("org.apache.xmlbeans.XmlOptions");

        <org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase: java.lang.Class class$org$apache$xmlbeans$XmlOptions> = $r22;

        goto label12;

     label11:
        $r22 = <org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase: java.lang.Class class$org$apache$xmlbeans$XmlOptions>;

     label12:
        $r14[1] = $r22;

        $r17 = staticinvoke <org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase: java.lang.reflect.Method getMethod(java.lang.String,java.lang.String,java.lang.Class[])>("org.apache.xmlbeans.impl.store.Query", "compileQuery", $r14);

        <org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase: java.lang.reflect.Method _queryCompiler> = $r17;

        return;
    }
}
