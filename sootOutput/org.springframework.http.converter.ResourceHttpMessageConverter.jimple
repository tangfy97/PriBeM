public class org.springframework.http.converter.ResourceHttpMessageConverter extends java.lang.Object implements org.springframework.http.converter.HttpMessageConverter
{
    private static final boolean jafPresent;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.ClassLoader $r1;
        boolean $z0;

        $r0 = class "Lorg/springframework/http/converter/ResourceHttpMessageConverter;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $z0 = staticinvoke <org.springframework.util.ClassUtils: boolean isPresent(java.lang.String,java.lang.ClassLoader)>("javax.activation.FileTypeMap", $r1);

        <org.springframework.http.converter.ResourceHttpMessageConverter: boolean jafPresent> = $z0;

        return;
    }

    public void <init>()
    {
        org.springframework.http.converter.ResourceHttpMessageConverter r0;

        r0 := @this: org.springframework.http.converter.ResourceHttpMessageConverter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean canRead(java.lang.Class, org.springframework.http.MediaType)
    {
        org.springframework.http.converter.ResourceHttpMessageConverter r2;
        org.springframework.http.MediaType r3;
        java.lang.Class r0, $r1;
        boolean $z0;

        r2 := @this: org.springframework.http.converter.ResourceHttpMessageConverter;

        r0 := @parameter0: java.lang.Class;

        r3 := @parameter1: org.springframework.http.MediaType;

        $r1 = class "Lorg/springframework/core/io/Resource;";

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        return $z0;
    }

    public boolean canWrite(java.lang.Class, org.springframework.http.MediaType)
    {
        org.springframework.http.converter.ResourceHttpMessageConverter r2;
        org.springframework.http.MediaType r3;
        java.lang.Class r0, $r1;
        boolean $z0;

        r2 := @this: org.springframework.http.converter.ResourceHttpMessageConverter;

        r0 := @parameter0: java.lang.Class;

        r3 := @parameter1: org.springframework.http.MediaType;

        $r1 = class "Lorg/springframework/core/io/Resource;";

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        return $z0;
    }

    public java.util.List getSupportedMediaTypes()
    {
        org.springframework.http.converter.ResourceHttpMessageConverter r2;
        java.util.List $r1;
        org.springframework.http.MediaType $r0;

        r2 := @this: org.springframework.http.converter.ResourceHttpMessageConverter;

        $r0 = <org.springframework.http.MediaType: org.springframework.http.MediaType ALL>;

        $r1 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r0);

        return $r1;
    }

    public org.springframework.core.io.Resource read(java.lang.Class, org.springframework.http.HttpInputMessage) throws java.io.IOException, org.springframework.http.converter.HttpMessageNotReadableException
    {
        byte[] $r2;
        org.springframework.http.converter.ResourceHttpMessageConverter r4;
        org.springframework.http.HttpInputMessage r0;
        java.lang.Class r5;
        org.springframework.core.io.ByteArrayResource $r3;
        java.io.InputStream $r1;

        r4 := @this: org.springframework.http.converter.ResourceHttpMessageConverter;

        r5 := @parameter0: java.lang.Class;

        r0 := @parameter1: org.springframework.http.HttpInputMessage;

        $r1 = interfaceinvoke r0.<org.springframework.http.HttpInputMessage: java.io.InputStream getBody()>();

        $r2 = staticinvoke <org.springframework.util.FileCopyUtils: byte[] copyToByteArray(java.io.InputStream)>($r1);

        $r3 = new org.springframework.core.io.ByteArrayResource;

        specialinvoke $r3.<org.springframework.core.io.ByteArrayResource: void <init>(byte[])>($r2);

        return $r3;
    }

    public void write(org.springframework.core.io.Resource, org.springframework.http.MediaType, org.springframework.http.HttpOutputMessage) throws java.io.IOException, org.springframework.http.converter.HttpMessageNotWritableException
    {
        java.io.OutputStream $r6, $r7;
        org.springframework.http.HttpHeaders $r1;
        org.springframework.http.MediaType r8;
        long $l0;
        org.springframework.http.converter.ResourceHttpMessageConverter r2;
        java.lang.Long $r4;
        org.springframework.http.HttpOutputMessage r0;
        org.springframework.core.io.Resource r3;
        java.io.InputStream $r5;
        boolean $z0, $z1;

        r2 := @this: org.springframework.http.converter.ResourceHttpMessageConverter;

        r3 := @parameter0: org.springframework.core.io.Resource;

        r8 := @parameter1: org.springframework.http.MediaType;

        r0 := @parameter2: org.springframework.http.HttpOutputMessage;

        $r1 = interfaceinvoke r0.<org.springframework.http.HttpOutputMessage: org.springframework.http.HttpHeaders getHeaders()>();

        if r8 == null goto label1;

        $z0 = virtualinvoke r8.<org.springframework.http.MediaType: boolean isWildcardType()>();

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r8.<org.springframework.http.MediaType: boolean isWildcardSubtype()>();

        if $z1 == 0 goto label2;

     label1:
        r8 = specialinvoke r2.<org.springframework.http.converter.ResourceHttpMessageConverter: org.springframework.http.MediaType getContentType(org.springframework.core.io.Resource)>(r3);

     label2:
        if r8 == null goto label3;

        virtualinvoke $r1.<org.springframework.http.HttpHeaders: void setContentType(org.springframework.http.MediaType)>(r8);

     label3:
        $r4 = virtualinvoke r2.<org.springframework.http.converter.ResourceHttpMessageConverter: java.lang.Long getContentLength(org.springframework.core.io.Resource,org.springframework.http.MediaType)>(r3, r8);

        if $r4 == null goto label4;

        $l0 = virtualinvoke $r4.<java.lang.Long: long longValue()>();

        virtualinvoke $r1.<org.springframework.http.HttpHeaders: void setContentLength(long)>($l0);

     label4:
        $r5 = interfaceinvoke r3.<org.springframework.core.io.Resource: java.io.InputStream getInputStream()>();

        $r6 = interfaceinvoke r0.<org.springframework.http.HttpOutputMessage: java.io.OutputStream getBody()>();

        staticinvoke <org.springframework.util.FileCopyUtils: int copy(java.io.InputStream,java.io.OutputStream)>($r5, $r6);

        $r7 = interfaceinvoke r0.<org.springframework.http.HttpOutputMessage: java.io.OutputStream getBody()>();

        virtualinvoke $r7.<java.io.OutputStream: void flush()>();

        return;
    }

    private org.springframework.http.MediaType getContentType(org.springframework.core.io.Resource)
    {
        org.springframework.http.converter.ResourceHttpMessageConverter r3;
        org.springframework.http.MediaType $r0, $r2;
        boolean $z0;
        org.springframework.core.io.Resource r1;

        r3 := @this: org.springframework.http.converter.ResourceHttpMessageConverter;

        r1 := @parameter0: org.springframework.core.io.Resource;

        $z0 = <org.springframework.http.converter.ResourceHttpMessageConverter: boolean jafPresent>;

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <org.springframework.http.converter.ResourceHttpMessageConverter$ActivationMediaTypeFactory: org.springframework.http.MediaType getMediaType(org.springframework.core.io.Resource)>(r1);

        return $r2;

     label1:
        $r0 = <org.springframework.http.MediaType: org.springframework.http.MediaType APPLICATION_OCTET_STREAM>;

        return $r0;
    }

    protected java.lang.Long getContentLength(org.springframework.core.io.Resource, org.springframework.http.MediaType) throws java.io.IOException
    {
        org.springframework.http.converter.ResourceHttpMessageConverter r2;
        java.lang.Long $r1;
        org.springframework.http.MediaType r3;
        long $l0;
        org.springframework.core.io.Resource r0;

        r2 := @this: org.springframework.http.converter.ResourceHttpMessageConverter;

        r0 := @parameter0: org.springframework.core.io.Resource;

        r3 := @parameter1: org.springframework.http.MediaType;

        $l0 = interfaceinvoke r0.<org.springframework.core.io.Resource: long contentLength()>();

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        return $r1;
    }

    public volatile java.lang.Object read(java.lang.Class, org.springframework.http.HttpInputMessage) throws java.io.IOException, org.springframework.http.converter.HttpMessageNotReadableException
    {
        org.springframework.http.converter.ResourceHttpMessageConverter r0;
        org.springframework.http.HttpInputMessage r2;
        java.lang.Class r1, $r3;
        org.springframework.core.io.Resource $r4;

        r0 := @this: org.springframework.http.converter.ResourceHttpMessageConverter;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: org.springframework.http.HttpInputMessage;

        $r3 = (java.lang.Class) r1;

        $r4 = virtualinvoke r0.<org.springframework.http.converter.ResourceHttpMessageConverter: org.springframework.core.io.Resource read(java.lang.Class,org.springframework.http.HttpInputMessage)>($r3, r2);

        return $r4;
    }

    public volatile void write(java.lang.Object, org.springframework.http.MediaType, org.springframework.http.HttpOutputMessage) throws java.io.IOException, org.springframework.http.converter.HttpMessageNotWritableException
    {
        org.springframework.http.converter.ResourceHttpMessageConverter r0;
        org.springframework.http.MediaType r2;
        java.lang.Object r1;
        org.springframework.http.HttpOutputMessage r3;
        org.springframework.core.io.Resource $r4;

        r0 := @this: org.springframework.http.converter.ResourceHttpMessageConverter;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.springframework.http.MediaType;

        r3 := @parameter2: org.springframework.http.HttpOutputMessage;

        $r4 = (org.springframework.core.io.Resource) r1;

        virtualinvoke r0.<org.springframework.http.converter.ResourceHttpMessageConverter: void write(org.springframework.core.io.Resource,org.springframework.http.MediaType,org.springframework.http.HttpOutputMessage)>($r4, r2, r3);

        return;
    }
}
