public class com.jidesoft.spinner.PointSpinner extends javax.swing.JSpinner
{

    public void <init>(com.jidesoft.spinner.SpinnerPointModel)
    {
        com.jidesoft.spinner.SpinnerPointModel r1;
        com.jidesoft.spinner.PointSpinner r0;

        r0 := @this: com.jidesoft.spinner.PointSpinner;

        r1 := @parameter0: com.jidesoft.spinner.SpinnerPointModel;

        specialinvoke r0.<javax.swing.JSpinner: void <init>(javax.swing.SpinnerModel)>(r1);

        virtualinvoke r0.<com.jidesoft.spinner.PointSpinner: void customizeSpinner()>();

        return;
    }

    public void <init>()
    {
        com.jidesoft.spinner.SpinnerPointModel $r1;
        com.jidesoft.spinner.PointSpinner r0;

        r0 := @this: com.jidesoft.spinner.PointSpinner;

        $r1 = new com.jidesoft.spinner.SpinnerPointModel;

        specialinvoke $r1.<com.jidesoft.spinner.SpinnerPointModel: void <init>()>();

        specialinvoke r0.<com.jidesoft.spinner.PointSpinner: void <init>(com.jidesoft.spinner.SpinnerPointModel)>($r1);

        return;
    }

    protected javax.swing.JComponent createEditor(javax.swing.SpinnerModel)
    {
        com.jidesoft.spinner.PointSpinner$PointEditor $r0;
        javax.swing.SpinnerModel r2;
        com.jidesoft.spinner.PointSpinner r1;

        r1 := @this: com.jidesoft.spinner.PointSpinner;

        r2 := @parameter0: javax.swing.SpinnerModel;

        $r0 = new com.jidesoft.spinner.PointSpinner$PointEditor;

        specialinvoke $r0.<com.jidesoft.spinner.PointSpinner$PointEditor: void <init>(javax.swing.JSpinner)>(r1);

        return $r0;
    }

    private void updateField()
    {
        javax.swing.JComponent $r1;
        javax.swing.JFormattedTextField $r4;
        com.jidesoft.spinner.PointSpinner$PointEditor $r3;
        byte $b2;
        int $i0, $i1;
        com.jidesoft.spinner.SpinnerPointModel r6;
        javax.swing.SpinnerModel $r2, $r5;
        java.lang.String $r7;
        com.jidesoft.spinner.PointSpinner r0;
        boolean $z0, $z1;

        r0 := @this: com.jidesoft.spinner.PointSpinner;

        $r1 = virtualinvoke r0.<com.jidesoft.spinner.PointSpinner: javax.swing.JComponent getEditor()>();

        $z0 = $r1 instanceof com.jidesoft.spinner.PointSpinner$PointEditor;

        if $z0 == 0 goto label3;

        $r2 = virtualinvoke r0.<com.jidesoft.spinner.PointSpinner: javax.swing.SpinnerModel getModel()>();

        $z1 = $r2 instanceof com.jidesoft.spinner.SpinnerPointModel;

        if $z1 == 0 goto label3;

        $r3 = (com.jidesoft.spinner.PointSpinner$PointEditor) $r1;

        $r4 = virtualinvoke $r3.<com.jidesoft.spinner.PointSpinner$PointEditor: javax.swing.JFormattedTextField getTextField()>();

        $r5 = virtualinvoke r0.<com.jidesoft.spinner.PointSpinner: javax.swing.SpinnerModel getModel()>();

        r6 = (com.jidesoft.spinner.SpinnerPointModel) $r5;

        $r7 = virtualinvoke $r4.<javax.swing.JFormattedTextField: java.lang.String getText()>();

        $i0 = virtualinvoke $r7.<java.lang.String: int indexOf(int)>(44);

        $i1 = virtualinvoke $r4.<javax.swing.JFormattedTextField: int getCaretPosition()>();

        if $i1 > $i0 goto label1;

        $b2 = 0;

        goto label2;

     label1:
        $b2 = 1;

     label2:
        virtualinvoke r6.<com.jidesoft.spinner.SpinnerPointModel: void setField(int)>($b2);

     label3:
        return;
    }

    public java.awt.Point getNextValue()
    {
        java.lang.Object $r1;
        java.awt.Point $r2;
        com.jidesoft.spinner.PointSpinner r0;

        r0 := @this: com.jidesoft.spinner.PointSpinner;

        specialinvoke r0.<com.jidesoft.spinner.PointSpinner: void updateField()>();

        $r1 = specialinvoke r0.<javax.swing.JSpinner: java.lang.Object getNextValue()>();

        $r2 = (java.awt.Point) $r1;

        return $r2;
    }

    public java.awt.Point getPreviousValue()
    {
        java.lang.Object $r1;
        java.awt.Point $r2;
        com.jidesoft.spinner.PointSpinner r0;

        r0 := @this: com.jidesoft.spinner.PointSpinner;

        specialinvoke r0.<com.jidesoft.spinner.PointSpinner: void updateField()>();

        $r1 = specialinvoke r0.<javax.swing.JSpinner: java.lang.Object getPreviousValue()>();

        $r2 = (java.awt.Point) $r1;

        return $r2;
    }

    public java.awt.Point getValue()
    {
        java.lang.Object $r1;
        java.awt.Point $r2;
        com.jidesoft.spinner.PointSpinner r0;

        r0 := @this: com.jidesoft.spinner.PointSpinner;

        $r1 = specialinvoke r0.<javax.swing.JSpinner: java.lang.Object getValue()>();

        $r2 = (java.awt.Point) $r1;

        return $r2;
    }

    protected void customizeSpinner()
    {
        com.jidesoft.spinner.PointSpinner r0;

        r0 := @this: com.jidesoft.spinner.PointSpinner;

        staticinvoke <com.jidesoft.spinner.SpinnerWheelSupport: void installMouseWheelSupport(javax.swing.JSpinner)>(r0);

        return;
    }

    public volatile java.lang.Object getPreviousValue()
    {
        java.awt.Point $r1;
        com.jidesoft.spinner.PointSpinner r0;

        r0 := @this: com.jidesoft.spinner.PointSpinner;

        $r1 = virtualinvoke r0.<com.jidesoft.spinner.PointSpinner: java.awt.Point getPreviousValue()>();

        return $r1;
    }

    public volatile java.lang.Object getNextValue()
    {
        java.awt.Point $r1;
        com.jidesoft.spinner.PointSpinner r0;

        r0 := @this: com.jidesoft.spinner.PointSpinner;

        $r1 = virtualinvoke r0.<com.jidesoft.spinner.PointSpinner: java.awt.Point getNextValue()>();

        return $r1;
    }

    public volatile java.lang.Object getValue()
    {
        java.awt.Point $r1;
        com.jidesoft.spinner.PointSpinner r0;

        r0 := @this: com.jidesoft.spinner.PointSpinner;

        $r1 = virtualinvoke r0.<com.jidesoft.spinner.PointSpinner: java.awt.Point getValue()>();

        return $r1;
    }
}
