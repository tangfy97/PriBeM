public class org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector extends org.codehaus.jackson.map.AnnotationIntrospector
{

    public void <init>()
    {
        org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector r0;

        r0 := @this: org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector;

        specialinvoke r0.<org.codehaus.jackson.map.AnnotationIntrospector: void <init>()>();

        return;
    }

    public boolean isHandled(java.lang.'annotation'.Annotation)
    {
        java.lang.'annotation'.Annotation r0, $r2;
        java.lang.Class $r1;
        org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector r3;
        boolean $z0;

        r3 := @this: org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector;

        r0 := @parameter0: java.lang.'annotation'.Annotation;

        $r1 = interfaceinvoke r0.<java.lang.'annotation'.Annotation: java.lang.Class annotationType()>();

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/codehaus/jackson/annotate/JacksonAnnotation;");

        if $r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.String findEnumValue(java.lang.Enum)
    {
        org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector r2;
        java.lang.String $r1;
        java.lang.Enum r0;

        r2 := @this: org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector;

        r0 := @parameter0: java.lang.Enum;

        $r1 = virtualinvoke r0.<java.lang.Enum: java.lang.String name()>();

        return $r1;
    }

    public java.lang.Boolean findCachability(org.codehaus.jackson.map.introspect.AnnotatedClass)
    {
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;
        java.lang.'annotation'.Annotation $r1;
        java.lang.Boolean $r4;
        org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector r3;
        org.codehaus.jackson.map.annotate.JsonCachable r2;
        boolean $z0;

        r3 := @this: org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector;

        r0 := @parameter0: org.codehaus.jackson.map.introspect.AnnotatedClass;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/codehaus/jackson/map/annotate/JsonCachable;");

        r2 = (org.codehaus.jackson.map.annotate.JsonCachable) $r1;

        if r2 != null goto label1;

        return null;

     label1:
        $z0 = interfaceinvoke r2.<org.codehaus.jackson.map.annotate.JsonCachable: boolean value()>();

        if $z0 == 0 goto label2;

        $r4 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        goto label3;

     label2:
        $r4 = <java.lang.Boolean: java.lang.Boolean FALSE>;

     label3:
        return $r4;
    }

    public java.lang.String findRootName(org.codehaus.jackson.map.introspect.AnnotatedClass)
    {
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;
        java.lang.'annotation'.Annotation $r1;
        org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector r3;
        java.lang.String $r4;
        org.codehaus.jackson.map.annotate.JsonRootName r2;

        r3 := @this: org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector;

        r0 := @parameter0: org.codehaus.jackson.map.introspect.AnnotatedClass;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/codehaus/jackson/map/annotate/JsonRootName;");

        r2 = (org.codehaus.jackson.map.annotate.JsonRootName) $r1;

        if r2 != null goto label1;

        $r4 = null;

        goto label2;

     label1:
        $r4 = interfaceinvoke r2.<org.codehaus.jackson.map.annotate.JsonRootName: java.lang.String value()>();

     label2:
        return $r4;
    }

    public java.lang.String[] findPropertiesToIgnore(org.codehaus.jackson.map.introspect.AnnotatedClass)
    {
        org.codehaus.jackson.annotate.JsonIgnoreProperties r2;
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;
        java.lang.'annotation'.Annotation $r1;
        org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector r3;
        java.lang.String[] $r4;

        r3 := @this: org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector;

        r0 := @parameter0: org.codehaus.jackson.map.introspect.AnnotatedClass;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/codehaus/jackson/annotate/JsonIgnoreProperties;");

        r2 = (org.codehaus.jackson.annotate.JsonIgnoreProperties) $r1;

        if r2 != null goto label1;

        $r4 = null;

        goto label2;

     label1:
        $r4 = interfaceinvoke r2.<org.codehaus.jackson.annotate.JsonIgnoreProperties: java.lang.String[] value()>();

     label2:
        return $r4;
    }

    public java.lang.Boolean findIgnoreUnknownProperties(org.codehaus.jackson.map.introspect.AnnotatedClass)
    {
        org.codehaus.jackson.annotate.JsonIgnoreProperties r2;
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;
        java.lang.'annotation'.Annotation $r1;
        java.lang.Boolean $r4;
        org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector r3;
        boolean $z0;

        r3 := @this: org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector;

        r0 := @parameter0: org.codehaus.jackson.map.introspect.AnnotatedClass;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/codehaus/jackson/annotate/JsonIgnoreProperties;");

        r2 = (org.codehaus.jackson.annotate.JsonIgnoreProperties) $r1;

        if r2 != null goto label1;

        $r4 = null;

        goto label2;

     label1:
        $z0 = interfaceinvoke r2.<org.codehaus.jackson.annotate.JsonIgnoreProperties: boolean ignoreUnknown()>();

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

     label2:
        return $r4;
    }

    public java.lang.Boolean isIgnorableType(org.codehaus.jackson.map.introspect.AnnotatedClass)
    {
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;
        java.lang.'annotation'.Annotation $r1;
        java.lang.Boolean $r4;
        org.codehaus.jackson.annotate.JsonIgnoreType r2;
        org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector r3;
        boolean $z0;

        r3 := @this: org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector;

        r0 := @parameter0: org.codehaus.jackson.map.introspect.AnnotatedClass;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/codehaus/jackson/annotate/JsonIgnoreType;");

        r2 = (org.codehaus.jackson.annotate.JsonIgnoreType) $r1;

        if r2 != null goto label1;

        $r4 = null;

        goto label2;

     label1:
        $z0 = interfaceinvoke r2.<org.codehaus.jackson.annotate.JsonIgnoreType: boolean value()>();

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

     label2:
        return $r4;
    }

    public java.lang.Object findFilterId(org.codehaus.jackson.map.introspect.AnnotatedClass)
    {
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;
        java.lang.'annotation'.Annotation $r1;
        int $i0;
        org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector r4;
        java.lang.String $r3;
        org.codehaus.jackson.map.annotate.JsonFilter r2;

        r4 := @this: org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector;

        r0 := @parameter0: org.codehaus.jackson.map.introspect.AnnotatedClass;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/codehaus/jackson/map/annotate/JsonFilter;");

        r2 = (org.codehaus.jackson.map.annotate.JsonFilter) $r1;

        if r2 == null goto label1;

        $r3 = interfaceinvoke r2.<org.codehaus.jackson.map.annotate.JsonFilter: java.lang.String value()>();

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i0 <= 0 goto label1;

        return $r3;

     label1:
        return null;
    }

    public org.codehaus.jackson.map.introspect.VisibilityChecker findAutoDetectVisibility(org.codehaus.jackson.map.introspect.AnnotatedClass, org.codehaus.jackson.map.introspect.VisibilityChecker)
    {
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;
        org.codehaus.jackson.map.introspect.VisibilityChecker r3, $r5;
        java.lang.'annotation'.Annotation $r1;
        org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector r4;
        org.codehaus.jackson.annotate.JsonAutoDetect r2;

        r4 := @this: org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector;

        r0 := @parameter0: org.codehaus.jackson.map.introspect.AnnotatedClass;

        r3 := @parameter1: org.codehaus.jackson.map.introspect.VisibilityChecker;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/codehaus/jackson/annotate/JsonAutoDetect;");

        r2 = (org.codehaus.jackson.annotate.JsonAutoDetect) $r1;

        if r2 != null goto label1;

        $r5 = r3;

        goto label2;

     label1:
        $r5 = interfaceinvoke r3.<org.codehaus.jackson.map.introspect.VisibilityChecker: org.codehaus.jackson.map.introspect.VisibilityChecker 'with'(org.codehaus.jackson.annotate.JsonAutoDetect)>(r2);

     label2:
        return $r5;
    }

    public org.codehaus.jackson.map.AnnotationIntrospector$ReferenceProperty findReferenceType(org.codehaus.jackson.map.introspect.AnnotatedMember)
    {
        org.codehaus.jackson.annotate.JsonManagedReference r2;
        org.codehaus.jackson.map.AnnotationIntrospector$ReferenceProperty $r6, $r8;
        org.codehaus.jackson.map.introspect.AnnotatedMember r0;
        java.lang.'annotation'.Annotation $r1, $r3;
        org.codehaus.jackson.annotate.JsonBackReference r4;
        org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector r9;
        java.lang.String $r5, $r7;

        r9 := @this: org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector;

        r0 := @parameter0: org.codehaus.jackson.map.introspect.AnnotatedMember;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedMember: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/codehaus/jackson/annotate/JsonManagedReference;");

        r2 = (org.codehaus.jackson.annotate.JsonManagedReference) $r1;

        if r2 == null goto label1;

        $r7 = interfaceinvoke r2.<org.codehaus.jackson.annotate.JsonManagedReference: java.lang.String value()>();

        $r8 = staticinvoke <org.codehaus.jackson.map.AnnotationIntrospector$ReferenceProperty: org.codehaus.jackson.map.AnnotationIntrospector$ReferenceProperty managed(java.lang.String)>($r7);

        return $r8;

     label1:
        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedMember: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/codehaus/jackson/annotate/JsonBackReference;");

        r4 = (org.codehaus.jackson.annotate.JsonBackReference) $r3;

        if r4 == null goto label2;

        $r5 = interfaceinvoke r4.<org.codehaus.jackson.annotate.JsonBackReference: java.lang.String value()>();

        $r6 = staticinvoke <org.codehaus.jackson.map.AnnotationIntrospector$ReferenceProperty: org.codehaus.jackson.map.AnnotationIntrospector$ReferenceProperty back(java.lang.String)>($r5);

        return $r6;

     label2:
        return null;
    }

    public java.lang.Boolean shouldUnwrapProperty(org.codehaus.jackson.map.introspect.AnnotatedMember)
    {
        org.codehaus.jackson.annotate.JsonUnwrapped r2;
        org.codehaus.jackson.map.introspect.AnnotatedMember r0;
        java.lang.'annotation'.Annotation $r1;
        java.lang.Boolean $r4;
        org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector r3;
        boolean $z0;

        r3 := @this: org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector;

        r0 := @parameter0: org.codehaus.jackson.map.introspect.AnnotatedMember;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedMember: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/codehaus/jackson/annotate/JsonUnwrapped;");

        r2 = (org.codehaus.jackson.annotate.JsonUnwrapped) $r1;

        if r2 == null goto label1;

        $z0 = interfaceinvoke r2.<org.codehaus.jackson.annotate.JsonUnwrapped: boolean enabled()>();

        if $z0 == 0 goto label1;

        $r4 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        goto label2;

     label1:
        $r4 = null;

     label2:
        return $r4;
    }

    public boolean hasIgnoreMarker(org.codehaus.jackson.map.introspect.AnnotatedMember)
    {
        org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector r0;
        org.codehaus.jackson.map.introspect.AnnotatedMember r1;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector;

        r1 := @parameter0: org.codehaus.jackson.map.introspect.AnnotatedMember;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector: boolean _isIgnorable(org.codehaus.jackson.map.introspect.Annotated)>(r1);

        return $z0;
    }

    public java.lang.Object findInjectableValueId(org.codehaus.jackson.map.introspect.AnnotatedMember)
    {
        org.codehaus.jackson.map.annotate.JacksonInject r2;
        org.codehaus.jackson.map.introspect.AnnotatedMethod r4;
        org.codehaus.jackson.map.introspect.AnnotatedMember r0;
        java.lang.'annotation'.Annotation $r1;
        int $i0, $i1;
        java.lang.Class $r5, $r7, $r9;
        org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector r11;
        java.lang.String $r3, $r6, $r8, $r10;
        boolean $z0;

        r11 := @this: org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector;

        r0 := @parameter0: org.codehaus.jackson.map.introspect.AnnotatedMember;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedMember: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/codehaus/jackson/map/annotate/JacksonInject;");

        r2 = (org.codehaus.jackson.map.annotate.JacksonInject) $r1;

        if r2 != null goto label1;

        return null;

     label1:
        $r3 = interfaceinvoke r2.<org.codehaus.jackson.map.annotate.JacksonInject: java.lang.String value()>();

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i0 != 0 goto label4;

        $z0 = r0 instanceof org.codehaus.jackson.map.introspect.AnnotatedMethod;

        if $z0 != 0 goto label2;

        $r9 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedMember: java.lang.Class getRawType()>();

        $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.String getName()>();

        return $r10;

     label2:
        r4 = (org.codehaus.jackson.map.introspect.AnnotatedMethod) r0;

        $i1 = virtualinvoke r4.<org.codehaus.jackson.map.introspect.AnnotatedMethod: int getParameterCount()>();

        if $i1 != 0 goto label3;

        $r7 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedMember: java.lang.Class getRawType()>();

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        return $r8;

     label3:
        $r5 = virtualinvoke r4.<org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.Class getParameterClass(int)>(0);

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        return $r6;

     label4:
        return $r3;
    }

    public org.codehaus.jackson.map.jsontype.TypeResolverBuilder findTypeResolver(org.codehaus.jackson.map.MapperConfig, org.codehaus.jackson.map.introspect.AnnotatedClass, org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.map.introspect.AnnotatedClass r2;
        org.codehaus.jackson.map.jsontype.TypeResolverBuilder $r4;
        org.codehaus.jackson.type.JavaType r3;
        org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector r0;
        org.codehaus.jackson.map.MapperConfig r1;

        r0 := @this: org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector;

        r1 := @parameter0: org.codehaus.jackson.map.MapperConfig;

        r2 := @parameter1: org.codehaus.jackson.map.introspect.AnnotatedClass;

        r3 := @parameter2: org.codehaus.jackson.type.JavaType;

        $r4 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector: org.codehaus.jackson.map.jsontype.TypeResolverBuilder _findTypeResolver(org.codehaus.jackson.map.MapperConfig,org.codehaus.jackson.map.introspect.Annotated,org.codehaus.jackson.type.JavaType)>(r1, r2, r3);

        return $r4;
    }

    public org.codehaus.jackson.map.jsontype.TypeResolverBuilder findPropertyTypeResolver(org.codehaus.jackson.map.MapperConfig, org.codehaus.jackson.map.introspect.AnnotatedMember, org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.map.introspect.AnnotatedMember r3;
        org.codehaus.jackson.map.jsontype.TypeResolverBuilder $r4;
        org.codehaus.jackson.type.JavaType r0;
        org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector r1;
        org.codehaus.jackson.map.MapperConfig r2;
        boolean $z0;

        r1 := @this: org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector;

        r2 := @parameter0: org.codehaus.jackson.map.MapperConfig;

        r3 := @parameter1: org.codehaus.jackson.map.introspect.AnnotatedMember;

        r0 := @parameter2: org.codehaus.jackson.type.JavaType;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.type.JavaType: boolean isContainerType()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r4 = virtualinvoke r1.<org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector: org.codehaus.jackson.map.jsontype.TypeResolverBuilder _findTypeResolver(org.codehaus.jackson.map.MapperConfig,org.codehaus.jackson.map.introspect.Annotated,org.codehaus.jackson.type.JavaType)>(r2, r3, r0);

        return $r4;
    }

    public org.codehaus.jackson.map.jsontype.TypeResolverBuilder findPropertyContentTypeResolver(org.codehaus.jackson.map.MapperConfig, org.codehaus.jackson.map.introspect.AnnotatedMember, org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.map.MapperConfig r2;
        java.lang.IllegalArgumentException $r5;
        org.codehaus.jackson.map.introspect.AnnotatedMember r3;
        org.codehaus.jackson.map.jsontype.TypeResolverBuilder $r4;
        org.codehaus.jackson.type.JavaType r0;
        org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector r1;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;
        java.lang.String $r10;
        boolean $z0;

        r1 := @this: org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector;

        r2 := @parameter0: org.codehaus.jackson.map.MapperConfig;

        r3 := @parameter1: org.codehaus.jackson.map.introspect.AnnotatedMember;

        r0 := @parameter2: org.codehaus.jackson.type.JavaType;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.type.JavaType: boolean isContainerType()>();

        if $z0 != 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Must call method with a container type (got ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r5;

     label1:
        $r4 = virtualinvoke r1.<org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector: org.codehaus.jackson.map.jsontype.TypeResolverBuilder _findTypeResolver(org.codehaus.jackson.map.MapperConfig,org.codehaus.jackson.map.introspect.Annotated,org.codehaus.jackson.type.JavaType)>(r2, r3, r0);

        return $r4;
    }

    public java.util.List findSubtypes(org.codehaus.jackson.map.introspect.Annotated)
    {
        org.codehaus.jackson.annotate.JsonSubTypes$Type[] $r3;
        org.codehaus.jackson.map.jsontype.NamedType $r6;
        org.codehaus.jackson.annotate.JsonSubTypes r2;
        java.util.ArrayList $r4;
        org.codehaus.jackson.map.introspect.Annotated r0;
        java.lang.'annotation'.Annotation $r1;
        int $i0, i1, i2;
        java.lang.Class $r7;
        org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector r9;
        java.lang.String $r8;
        org.codehaus.jackson.annotate.JsonSubTypes$Type r5;

        r9 := @this: org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector;

        r0 := @parameter0: org.codehaus.jackson.map.introspect.Annotated;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.Annotated: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/codehaus/jackson/annotate/JsonSubTypes;");

        r2 = (org.codehaus.jackson.annotate.JsonSubTypes) $r1;

        if r2 != null goto label1;

        return null;

     label1:
        $r3 = interfaceinvoke r2.<org.codehaus.jackson.annotate.JsonSubTypes: org.codehaus.jackson.annotate.JsonSubTypes$Type[] value()>();

        $r4 = new java.util.ArrayList;

        $i0 = lengthof $r3;

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>($i0);

        i1 = lengthof $r3;

        i2 = 0;

     label2:
        if i2 >= i1 goto label3;

        r5 = $r3[i2];

        $r6 = new org.codehaus.jackson.map.jsontype.NamedType;

        $r7 = interfaceinvoke r5.<org.codehaus.jackson.annotate.JsonSubTypes$Type: java.lang.Class value()>();

        $r8 = interfaceinvoke r5.<org.codehaus.jackson.annotate.JsonSubTypes$Type: java.lang.String name()>();

        specialinvoke $r6.<org.codehaus.jackson.map.jsontype.NamedType: void <init>(java.lang.Class,java.lang.String)>($r7, $r8);

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);

        i2 = i2 + 1;

        goto label2;

     label3:
        return $r4;
    }

    public java.lang.String findTypeName(org.codehaus.jackson.map.introspect.AnnotatedClass)
    {
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;
        java.lang.'annotation'.Annotation $r1;
        org.codehaus.jackson.annotate.JsonTypeName r2;
        org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector r3;
        java.lang.String $r4;

        r3 := @this: org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector;

        r0 := @parameter0: org.codehaus.jackson.map.introspect.AnnotatedClass;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/codehaus/jackson/annotate/JsonTypeName;");

        r2 = (org.codehaus.jackson.annotate.JsonTypeName) $r1;

        if r2 != null goto label1;

        $r4 = null;

        goto label2;

     label1:
        $r4 = interfaceinvoke r2.<org.codehaus.jackson.annotate.JsonTypeName: java.lang.String value()>();

     label2:
        return $r4;
    }

    public boolean isIgnorableMethod(org.codehaus.jackson.map.introspect.AnnotatedMethod)
    {
        org.codehaus.jackson.map.introspect.AnnotatedMethod r1;
        org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector r0;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector;

        r1 := @parameter0: org.codehaus.jackson.map.introspect.AnnotatedMethod;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector: boolean _isIgnorable(org.codehaus.jackson.map.introspect.Annotated)>(r1);

        return $z0;
    }

    public boolean isIgnorableConstructor(org.codehaus.jackson.map.introspect.AnnotatedConstructor)
    {
        org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector r0;
        org.codehaus.jackson.map.introspect.AnnotatedConstructor r1;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector;

        r1 := @parameter0: org.codehaus.jackson.map.introspect.AnnotatedConstructor;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector: boolean _isIgnorable(org.codehaus.jackson.map.introspect.Annotated)>(r1);

        return $z0;
    }

    public boolean isIgnorableField(org.codehaus.jackson.map.introspect.AnnotatedField)
    {
        org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector r0;
        org.codehaus.jackson.map.introspect.AnnotatedField r1;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector;

        r1 := @parameter0: org.codehaus.jackson.map.introspect.AnnotatedField;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector: boolean _isIgnorable(org.codehaus.jackson.map.introspect.Annotated)>(r1);

        return $z0;
    }

    public java.lang.Object findSerializer(org.codehaus.jackson.map.introspect.Annotated)
    {
        org.codehaus.jackson.map.introspect.Annotated r0;
        org.codehaus.jackson.annotate.JsonRawValue $r7;
        java.lang.'annotation'.Annotation $r1, $r3;
        java.lang.Class $r4, $r6;
        org.codehaus.jackson.map.ser.std.RawSerializer $r5;
        org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector r8;
        org.codehaus.jackson.map.annotate.JsonSerialize r2;
        boolean $z0;

        r8 := @this: org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector;

        r0 := @parameter0: org.codehaus.jackson.map.introspect.Annotated;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.Annotated: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/codehaus/jackson/map/annotate/JsonSerialize;");

        r2 = (org.codehaus.jackson.map.annotate.JsonSerialize) $r1;

        if r2 == null goto label1;

        $r6 = interfaceinvoke r2.<org.codehaus.jackson.map.annotate.JsonSerialize: java.lang.Class using()>();

        if $r6 == class "Lorg/codehaus/jackson/map/JsonSerializer$None;" goto label1;

        return $r6;

     label1:
        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.Annotated: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/codehaus/jackson/annotate/JsonRawValue;");

        $r7 = (org.codehaus.jackson.annotate.JsonRawValue) $r3;

        if $r7 == null goto label2;

        $z0 = interfaceinvoke $r7.<org.codehaus.jackson.annotate.JsonRawValue: boolean value()>();

        if $z0 == 0 goto label2;

        $r4 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.Annotated: java.lang.Class getRawType()>();

        $r5 = new org.codehaus.jackson.map.ser.std.RawSerializer;

        specialinvoke $r5.<org.codehaus.jackson.map.ser.std.RawSerializer: void <init>(java.lang.Class)>($r4);

        return $r5;

     label2:
        return null;
    }

    public java.lang.Class findKeySerializer(org.codehaus.jackson.map.introspect.Annotated)
    {
        org.codehaus.jackson.map.introspect.Annotated r0;
        java.lang.'annotation'.Annotation $r1;
        java.lang.Class $r3;
        org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector r4;
        org.codehaus.jackson.map.annotate.JsonSerialize r2;

        r4 := @this: org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector;

        r0 := @parameter0: org.codehaus.jackson.map.introspect.Annotated;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.Annotated: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/codehaus/jackson/map/annotate/JsonSerialize;");

        r2 = (org.codehaus.jackson.map.annotate.JsonSerialize) $r1;

        if r2 == null goto label1;

        $r3 = interfaceinvoke r2.<org.codehaus.jackson.map.annotate.JsonSerialize: java.lang.Class keyUsing()>();

        if $r3 == class "Lorg/codehaus/jackson/map/JsonSerializer$None;" goto label1;

        return $r3;

     label1:
        return null;
    }

    public java.lang.Class findContentSerializer(org.codehaus.jackson.map.introspect.Annotated)
    {
        org.codehaus.jackson.map.introspect.Annotated r0;
        java.lang.'annotation'.Annotation $r1;
        java.lang.Class $r3;
        org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector r4;
        org.codehaus.jackson.map.annotate.JsonSerialize r2;

        r4 := @this: org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector;

        r0 := @parameter0: org.codehaus.jackson.map.introspect.Annotated;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.Annotated: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/codehaus/jackson/map/annotate/JsonSerialize;");

        r2 = (org.codehaus.jackson.map.annotate.JsonSerialize) $r1;

        if r2 == null goto label1;

        $r3 = interfaceinvoke r2.<org.codehaus.jackson.map.annotate.JsonSerialize: java.lang.Class contentUsing()>();

        if $r3 == class "Lorg/codehaus/jackson/map/JsonSerializer$None;" goto label1;

        return $r3;

     label1:
        return null;
    }

    public org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion findSerializationInclusion(org.codehaus.jackson.map.introspect.Annotated, org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion)
    {
        org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion r5, $r6, $r8;
        org.codehaus.jackson.map.introspect.Annotated r0;
        org.codehaus.jackson.annotate.JsonWriteNullProperties r4;
        java.lang.'annotation'.Annotation $r1, $r3;
        org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector r7;
        org.codehaus.jackson.map.annotate.JsonSerialize r2;
        boolean $z0;

        r7 := @this: org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector;

        r0 := @parameter0: org.codehaus.jackson.map.introspect.Annotated;

        r5 := @parameter1: org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.Annotated: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/codehaus/jackson/map/annotate/JsonSerialize;");

        r2 = (org.codehaus.jackson.map.annotate.JsonSerialize) $r1;

        if r2 == null goto label1;

        $r6 = interfaceinvoke r2.<org.codehaus.jackson.map.annotate.JsonSerialize: org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion include()>();

        return $r6;

     label1:
        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.Annotated: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/codehaus/jackson/annotate/JsonWriteNullProperties;");

        r4 = (org.codehaus.jackson.annotate.JsonWriteNullProperties) $r3;

        if r4 == null goto label4;

        $z0 = interfaceinvoke r4.<org.codehaus.jackson.annotate.JsonWriteNullProperties: boolean value()>();

        if $z0 == 0 goto label2;

        $r8 = <org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion: org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion ALWAYS>;

        goto label3;

     label2:
        $r8 = <org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion: org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion NON_NULL>;

     label3:
        return $r8;

     label4:
        return r5;
    }

    public java.lang.Class findSerializationType(org.codehaus.jackson.map.introspect.Annotated)
    {
        org.codehaus.jackson.map.introspect.Annotated r0;
        java.lang.'annotation'.Annotation $r1;
        java.lang.Class $r3;
        org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector r4;
        org.codehaus.jackson.map.annotate.JsonSerialize r2;

        r4 := @this: org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector;

        r0 := @parameter0: org.codehaus.jackson.map.introspect.Annotated;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.Annotated: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/codehaus/jackson/map/annotate/JsonSerialize;");

        r2 = (org.codehaus.jackson.map.annotate.JsonSerialize) $r1;

        if r2 == null goto label1;

        $r3 = interfaceinvoke r2.<org.codehaus.jackson.map.annotate.JsonSerialize: java.lang.Class as()>();

        if $r3 == class "Lorg/codehaus/jackson/map/annotate/NoClass;" goto label1;

        return $r3;

     label1:
        return null;
    }

    public java.lang.Class findSerializationKeyType(org.codehaus.jackson.map.introspect.Annotated, org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.map.introspect.Annotated r0;
        java.lang.'annotation'.Annotation $r1;
        org.codehaus.jackson.type.JavaType r5;
        java.lang.Class $r3;
        org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector r4;
        org.codehaus.jackson.map.annotate.JsonSerialize r2;

        r4 := @this: org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector;

        r0 := @parameter0: org.codehaus.jackson.map.introspect.Annotated;

        r5 := @parameter1: org.codehaus.jackson.type.JavaType;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.Annotated: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/codehaus/jackson/map/annotate/JsonSerialize;");

        r2 = (org.codehaus.jackson.map.annotate.JsonSerialize) $r1;

        if r2 == null goto label1;

        $r3 = interfaceinvoke r2.<org.codehaus.jackson.map.annotate.JsonSerialize: java.lang.Class keyAs()>();

        if $r3 == class "Lorg/codehaus/jackson/map/annotate/NoClass;" goto label1;

        return $r3;

     label1:
        return null;
    }

    public java.lang.Class findSerializationContentType(org.codehaus.jackson.map.introspect.Annotated, org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.map.introspect.Annotated r0;
        java.lang.'annotation'.Annotation $r1;
        org.codehaus.jackson.type.JavaType r5;
        java.lang.Class $r3;
        org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector r4;
        org.codehaus.jackson.map.annotate.JsonSerialize r2;

        r4 := @this: org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector;

        r0 := @parameter0: org.codehaus.jackson.map.introspect.Annotated;

        r5 := @parameter1: org.codehaus.jackson.type.JavaType;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.Annotated: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/codehaus/jackson/map/annotate/JsonSerialize;");

        r2 = (org.codehaus.jackson.map.annotate.JsonSerialize) $r1;

        if r2 == null goto label1;

        $r3 = interfaceinvoke r2.<org.codehaus.jackson.map.annotate.JsonSerialize: java.lang.Class contentAs()>();

        if $r3 == class "Lorg/codehaus/jackson/map/annotate/NoClass;" goto label1;

        return $r3;

     label1:
        return null;
    }

    public org.codehaus.jackson.map.annotate.JsonSerialize$Typing findSerializationTyping(org.codehaus.jackson.map.introspect.Annotated)
    {
        org.codehaus.jackson.map.introspect.Annotated r0;
        org.codehaus.jackson.map.annotate.JsonSerialize$Typing $r4;
        java.lang.'annotation'.Annotation $r1;
        org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector r3;
        org.codehaus.jackson.map.annotate.JsonSerialize r2;

        r3 := @this: org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector;

        r0 := @parameter0: org.codehaus.jackson.map.introspect.Annotated;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.Annotated: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/codehaus/jackson/map/annotate/JsonSerialize;");

        r2 = (org.codehaus.jackson.map.annotate.JsonSerialize) $r1;

        if r2 != null goto label1;

        $r4 = null;

        goto label2;

     label1:
        $r4 = interfaceinvoke r2.<org.codehaus.jackson.map.annotate.JsonSerialize: org.codehaus.jackson.map.annotate.JsonSerialize$Typing typing()>();

     label2:
        return $r4;
    }

    public java.lang.Class[] findSerializationViews(org.codehaus.jackson.map.introspect.Annotated)
    {
        org.codehaus.jackson.map.introspect.Annotated r0;
        java.lang.'annotation'.Annotation $r1;
        java.lang.Class[] $r4;
        org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector r3;
        org.codehaus.jackson.map.annotate.JsonView r2;

        r3 := @this: org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector;

        r0 := @parameter0: org.codehaus.jackson.map.introspect.Annotated;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.Annotated: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/codehaus/jackson/map/annotate/JsonView;");

        r2 = (org.codehaus.jackson.map.annotate.JsonView) $r1;

        if r2 != null goto label1;

        $r4 = null;

        goto label2;

     label1:
        $r4 = interfaceinvoke r2.<org.codehaus.jackson.map.annotate.JsonView: java.lang.Class[] value()>();

     label2:
        return $r4;
    }

    public java.lang.String[] findSerializationPropertyOrder(org.codehaus.jackson.map.introspect.AnnotatedClass)
    {
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;
        java.lang.'annotation'.Annotation $r1;
        org.codehaus.jackson.annotate.JsonPropertyOrder r2;
        org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector r3;
        java.lang.String[] $r4;

        r3 := @this: org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector;

        r0 := @parameter0: org.codehaus.jackson.map.introspect.AnnotatedClass;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/codehaus/jackson/annotate/JsonPropertyOrder;");

        r2 = (org.codehaus.jackson.annotate.JsonPropertyOrder) $r1;

        if r2 != null goto label1;

        $r4 = null;

        goto label2;

     label1:
        $r4 = interfaceinvoke r2.<org.codehaus.jackson.annotate.JsonPropertyOrder: java.lang.String[] value()>();

     label2:
        return $r4;
    }

    public java.lang.Boolean findSerializationSortAlphabetically(org.codehaus.jackson.map.introspect.AnnotatedClass)
    {
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;
        java.lang.'annotation'.Annotation $r1;
        java.lang.Boolean $r4;
        org.codehaus.jackson.annotate.JsonPropertyOrder r2;
        org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector r3;
        boolean $z0;

        r3 := @this: org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector;

        r0 := @parameter0: org.codehaus.jackson.map.introspect.AnnotatedClass;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/codehaus/jackson/annotate/JsonPropertyOrder;");

        r2 = (org.codehaus.jackson.annotate.JsonPropertyOrder) $r1;

        if r2 != null goto label1;

        $r4 = null;

        goto label2;

     label1:
        $z0 = interfaceinvoke r2.<org.codehaus.jackson.annotate.JsonPropertyOrder: boolean alphabetic()>();

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

     label2:
        return $r4;
    }

    public java.lang.String findGettablePropertyName(org.codehaus.jackson.map.introspect.AnnotatedMethod)
    {
        org.codehaus.jackson.map.introspect.AnnotatedMethod r0;
        org.codehaus.jackson.annotate.JsonGetter r4;
        java.lang.'annotation'.Annotation $r1, $r3;
        org.codehaus.jackson.annotate.JsonProperty r2;
        org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector r7;
        java.lang.String $r5, $r6;
        boolean $z0, $z1;

        r7 := @this: org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector;

        r0 := @parameter0: org.codehaus.jackson.map.introspect.AnnotatedMethod;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/codehaus/jackson/annotate/JsonProperty;");

        r2 = (org.codehaus.jackson.annotate.JsonProperty) $r1;

        if r2 == null goto label1;

        $r6 = interfaceinvoke r2.<org.codehaus.jackson.annotate.JsonProperty: java.lang.String value()>();

        return $r6;

     label1:
        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/codehaus/jackson/annotate/JsonGetter;");

        r4 = (org.codehaus.jackson.annotate.JsonGetter) $r3;

        if r4 == null goto label2;

        $r5 = interfaceinvoke r4.<org.codehaus.jackson.annotate.JsonGetter: java.lang.String value()>();

        return $r5;

     label2:
        $z0 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedMethod: boolean hasAnnotation(java.lang.Class)>(class "Lorg/codehaus/jackson/map/annotate/JsonSerialize;");

        if $z0 != 0 goto label3;

        $z1 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedMethod: boolean hasAnnotation(java.lang.Class)>(class "Lorg/codehaus/jackson/map/annotate/JsonView;");

        if $z1 == 0 goto label4;

     label3:
        return "";

     label4:
        return null;
    }

    public boolean hasAsValueAnnotation(org.codehaus.jackson.map.introspect.AnnotatedMethod)
    {
        org.codehaus.jackson.map.introspect.AnnotatedMethod r0;
        java.lang.'annotation'.Annotation $r1;
        org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector r3;
        org.codehaus.jackson.annotate.JsonValue r2;
        boolean $z0, $z1;

        r3 := @this: org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector;

        r0 := @parameter0: org.codehaus.jackson.map.introspect.AnnotatedMethod;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/codehaus/jackson/annotate/JsonValue;");

        r2 = (org.codehaus.jackson.annotate.JsonValue) $r1;

        if r2 == null goto label1;

        $z0 = interfaceinvoke r2.<org.codehaus.jackson.annotate.JsonValue: boolean value()>();

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public java.lang.String findSerializablePropertyName(org.codehaus.jackson.map.introspect.AnnotatedField)
    {
        java.lang.'annotation'.Annotation $r1;
        org.codehaus.jackson.map.introspect.AnnotatedField r0;
        org.codehaus.jackson.annotate.JsonProperty r2;
        org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector r4;
        java.lang.String $r3;
        boolean $z0, $z1;

        r4 := @this: org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector;

        r0 := @parameter0: org.codehaus.jackson.map.introspect.AnnotatedField;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedField: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/codehaus/jackson/annotate/JsonProperty;");

        r2 = (org.codehaus.jackson.annotate.JsonProperty) $r1;

        if r2 == null goto label1;

        $r3 = interfaceinvoke r2.<org.codehaus.jackson.annotate.JsonProperty: java.lang.String value()>();

        return $r3;

     label1:
        $z0 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedField: boolean hasAnnotation(java.lang.Class)>(class "Lorg/codehaus/jackson/map/annotate/JsonSerialize;");

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedField: boolean hasAnnotation(java.lang.Class)>(class "Lorg/codehaus/jackson/map/annotate/JsonView;");

        if $z1 == 0 goto label3;

     label2:
        return "";

     label3:
        return null;
    }

    public java.lang.Class findDeserializer(org.codehaus.jackson.map.introspect.Annotated)
    {
        org.codehaus.jackson.map.introspect.Annotated r0;
        java.lang.'annotation'.Annotation $r1;
        org.codehaus.jackson.map.annotate.JsonDeserialize r2;
        java.lang.Class $r3;
        org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector r4;

        r4 := @this: org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector;

        r0 := @parameter0: org.codehaus.jackson.map.introspect.Annotated;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.Annotated: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/codehaus/jackson/map/annotate/JsonDeserialize;");

        r2 = (org.codehaus.jackson.map.annotate.JsonDeserialize) $r1;

        if r2 == null goto label1;

        $r3 = interfaceinvoke r2.<org.codehaus.jackson.map.annotate.JsonDeserialize: java.lang.Class using()>();

        if $r3 == class "Lorg/codehaus/jackson/map/JsonDeserializer$None;" goto label1;

        return $r3;

     label1:
        return null;
    }

    public java.lang.Class findKeyDeserializer(org.codehaus.jackson.map.introspect.Annotated)
    {
        org.codehaus.jackson.map.introspect.Annotated r0;
        java.lang.'annotation'.Annotation $r1;
        org.codehaus.jackson.map.annotate.JsonDeserialize r2;
        java.lang.Class $r3;
        org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector r4;

        r4 := @this: org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector;

        r0 := @parameter0: org.codehaus.jackson.map.introspect.Annotated;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.Annotated: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/codehaus/jackson/map/annotate/JsonDeserialize;");

        r2 = (org.codehaus.jackson.map.annotate.JsonDeserialize) $r1;

        if r2 == null goto label1;

        $r3 = interfaceinvoke r2.<org.codehaus.jackson.map.annotate.JsonDeserialize: java.lang.Class keyUsing()>();

        if $r3 == class "Lorg/codehaus/jackson/map/KeyDeserializer$None;" goto label1;

        return $r3;

     label1:
        return null;
    }

    public java.lang.Class findContentDeserializer(org.codehaus.jackson.map.introspect.Annotated)
    {
        org.codehaus.jackson.map.introspect.Annotated r0;
        java.lang.'annotation'.Annotation $r1;
        org.codehaus.jackson.map.annotate.JsonDeserialize r2;
        java.lang.Class $r3;
        org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector r4;

        r4 := @this: org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector;

        r0 := @parameter0: org.codehaus.jackson.map.introspect.Annotated;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.Annotated: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/codehaus/jackson/map/annotate/JsonDeserialize;");

        r2 = (org.codehaus.jackson.map.annotate.JsonDeserialize) $r1;

        if r2 == null goto label1;

        $r3 = interfaceinvoke r2.<org.codehaus.jackson.map.annotate.JsonDeserialize: java.lang.Class contentUsing()>();

        if $r3 == class "Lorg/codehaus/jackson/map/JsonDeserializer$None;" goto label1;

        return $r3;

     label1:
        return null;
    }

    public java.lang.Class findDeserializationType(org.codehaus.jackson.map.introspect.Annotated, org.codehaus.jackson.type.JavaType, java.lang.String)
    {
        org.codehaus.jackson.map.introspect.Annotated r0;
        java.lang.'annotation'.Annotation $r1;
        org.codehaus.jackson.map.annotate.JsonDeserialize r2;
        org.codehaus.jackson.type.JavaType r5;
        java.lang.Class $r3;
        org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector r4;
        java.lang.String r6;

        r4 := @this: org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector;

        r0 := @parameter0: org.codehaus.jackson.map.introspect.Annotated;

        r5 := @parameter1: org.codehaus.jackson.type.JavaType;

        r6 := @parameter2: java.lang.String;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.Annotated: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/codehaus/jackson/map/annotate/JsonDeserialize;");

        r2 = (org.codehaus.jackson.map.annotate.JsonDeserialize) $r1;

        if r2 == null goto label1;

        $r3 = interfaceinvoke r2.<org.codehaus.jackson.map.annotate.JsonDeserialize: java.lang.Class as()>();

        if $r3 == class "Lorg/codehaus/jackson/map/annotate/NoClass;" goto label1;

        return $r3;

     label1:
        return null;
    }

    public java.lang.Class findDeserializationKeyType(org.codehaus.jackson.map.introspect.Annotated, org.codehaus.jackson.type.JavaType, java.lang.String)
    {
        org.codehaus.jackson.map.introspect.Annotated r0;
        java.lang.'annotation'.Annotation $r1;
        org.codehaus.jackson.map.annotate.JsonDeserialize r2;
        org.codehaus.jackson.type.JavaType r5;
        java.lang.Class $r3;
        org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector r4;
        java.lang.String r6;

        r4 := @this: org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector;

        r0 := @parameter0: org.codehaus.jackson.map.introspect.Annotated;

        r5 := @parameter1: org.codehaus.jackson.type.JavaType;

        r6 := @parameter2: java.lang.String;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.Annotated: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/codehaus/jackson/map/annotate/JsonDeserialize;");

        r2 = (org.codehaus.jackson.map.annotate.JsonDeserialize) $r1;

        if r2 == null goto label1;

        $r3 = interfaceinvoke r2.<org.codehaus.jackson.map.annotate.JsonDeserialize: java.lang.Class keyAs()>();

        if $r3 == class "Lorg/codehaus/jackson/map/annotate/NoClass;" goto label1;

        return $r3;

     label1:
        return null;
    }

    public java.lang.Class findDeserializationContentType(org.codehaus.jackson.map.introspect.Annotated, org.codehaus.jackson.type.JavaType, java.lang.String)
    {
        org.codehaus.jackson.map.introspect.Annotated r0;
        java.lang.'annotation'.Annotation $r1;
        org.codehaus.jackson.map.annotate.JsonDeserialize r2;
        org.codehaus.jackson.type.JavaType r5;
        java.lang.Class $r3;
        org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector r4;
        java.lang.String r6;

        r4 := @this: org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector;

        r0 := @parameter0: org.codehaus.jackson.map.introspect.Annotated;

        r5 := @parameter1: org.codehaus.jackson.type.JavaType;

        r6 := @parameter2: java.lang.String;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.Annotated: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/codehaus/jackson/map/annotate/JsonDeserialize;");

        r2 = (org.codehaus.jackson.map.annotate.JsonDeserialize) $r1;

        if r2 == null goto label1;

        $r3 = interfaceinvoke r2.<org.codehaus.jackson.map.annotate.JsonDeserialize: java.lang.Class contentAs()>();

        if $r3 == class "Lorg/codehaus/jackson/map/annotate/NoClass;" goto label1;

        return $r3;

     label1:
        return null;
    }

    public java.lang.Object findValueInstantiator(org.codehaus.jackson.map.introspect.AnnotatedClass)
    {
        org.codehaus.jackson.map.annotate.JsonValueInstantiator r2;
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;
        java.lang.'annotation'.Annotation $r1;
        org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector r3;
        java.lang.Class $r4;

        r3 := @this: org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector;

        r0 := @parameter0: org.codehaus.jackson.map.introspect.AnnotatedClass;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/codehaus/jackson/map/annotate/JsonValueInstantiator;");

        r2 = (org.codehaus.jackson.map.annotate.JsonValueInstantiator) $r1;

        if r2 != null goto label1;

        $r4 = null;

        goto label2;

     label1:
        $r4 = interfaceinvoke r2.<org.codehaus.jackson.map.annotate.JsonValueInstantiator: java.lang.Class value()>();

     label2:
        return $r4;
    }

    public java.lang.String findSettablePropertyName(org.codehaus.jackson.map.introspect.AnnotatedMethod)
    {
        org.codehaus.jackson.annotate.JsonSetter r4;
        org.codehaus.jackson.map.introspect.AnnotatedMethod r0;
        java.lang.'annotation'.Annotation $r1, $r3;
        org.codehaus.jackson.annotate.JsonProperty r2;
        org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector r7;
        java.lang.String $r5, $r6;
        boolean $z0, $z1, $z2, $z3;

        r7 := @this: org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector;

        r0 := @parameter0: org.codehaus.jackson.map.introspect.AnnotatedMethod;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/codehaus/jackson/annotate/JsonProperty;");

        r2 = (org.codehaus.jackson.annotate.JsonProperty) $r1;

        if r2 == null goto label1;

        $r6 = interfaceinvoke r2.<org.codehaus.jackson.annotate.JsonProperty: java.lang.String value()>();

        return $r6;

     label1:
        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/codehaus/jackson/annotate/JsonSetter;");

        r4 = (org.codehaus.jackson.annotate.JsonSetter) $r3;

        if r4 == null goto label2;

        $r5 = interfaceinvoke r4.<org.codehaus.jackson.annotate.JsonSetter: java.lang.String value()>();

        return $r5;

     label2:
        $z0 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedMethod: boolean hasAnnotation(java.lang.Class)>(class "Lorg/codehaus/jackson/map/annotate/JsonDeserialize;");

        if $z0 != 0 goto label3;

        $z1 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedMethod: boolean hasAnnotation(java.lang.Class)>(class "Lorg/codehaus/jackson/map/annotate/JsonView;");

        if $z1 != 0 goto label3;

        $z2 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedMethod: boolean hasAnnotation(java.lang.Class)>(class "Lorg/codehaus/jackson/annotate/JsonBackReference;");

        if $z2 != 0 goto label3;

        $z3 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedMethod: boolean hasAnnotation(java.lang.Class)>(class "Lorg/codehaus/jackson/annotate/JsonManagedReference;");

        if $z3 == 0 goto label4;

     label3:
        return "";

     label4:
        return null;
    }

    public boolean hasAnySetterAnnotation(org.codehaus.jackson.map.introspect.AnnotatedMethod)
    {
        org.codehaus.jackson.map.introspect.AnnotatedMethod r0;
        org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector r1;
        boolean $z0;

        r1 := @this: org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector;

        r0 := @parameter0: org.codehaus.jackson.map.introspect.AnnotatedMethod;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedMethod: boolean hasAnnotation(java.lang.Class)>(class "Lorg/codehaus/jackson/annotate/JsonAnySetter;");

        return $z0;
    }

    public boolean hasAnyGetterAnnotation(org.codehaus.jackson.map.introspect.AnnotatedMethod)
    {
        org.codehaus.jackson.map.introspect.AnnotatedMethod r0;
        org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector r1;
        boolean $z0;

        r1 := @this: org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector;

        r0 := @parameter0: org.codehaus.jackson.map.introspect.AnnotatedMethod;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedMethod: boolean hasAnnotation(java.lang.Class)>(class "Lorg/codehaus/jackson/annotate/JsonAnyGetter;");

        return $z0;
    }

    public boolean hasCreatorAnnotation(org.codehaus.jackson.map.introspect.Annotated)
    {
        org.codehaus.jackson.map.introspect.Annotated r0;
        org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector r1;
        boolean $z0;

        r1 := @this: org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector;

        r0 := @parameter0: org.codehaus.jackson.map.introspect.Annotated;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.Annotated: boolean hasAnnotation(java.lang.Class)>(class "Lorg/codehaus/jackson/annotate/JsonCreator;");

        return $z0;
    }

    public java.lang.String findDeserializablePropertyName(org.codehaus.jackson.map.introspect.AnnotatedField)
    {
        java.lang.'annotation'.Annotation $r1;
        org.codehaus.jackson.map.introspect.AnnotatedField r0;
        org.codehaus.jackson.annotate.JsonProperty r2;
        org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector r4;
        java.lang.String $r3;
        boolean $z0, $z1, $z2, $z3;

        r4 := @this: org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector;

        r0 := @parameter0: org.codehaus.jackson.map.introspect.AnnotatedField;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedField: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/codehaus/jackson/annotate/JsonProperty;");

        r2 = (org.codehaus.jackson.annotate.JsonProperty) $r1;

        if r2 == null goto label1;

        $r3 = interfaceinvoke r2.<org.codehaus.jackson.annotate.JsonProperty: java.lang.String value()>();

        return $r3;

     label1:
        $z0 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedField: boolean hasAnnotation(java.lang.Class)>(class "Lorg/codehaus/jackson/map/annotate/JsonDeserialize;");

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedField: boolean hasAnnotation(java.lang.Class)>(class "Lorg/codehaus/jackson/map/annotate/JsonView;");

        if $z1 != 0 goto label2;

        $z2 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedField: boolean hasAnnotation(java.lang.Class)>(class "Lorg/codehaus/jackson/annotate/JsonBackReference;");

        if $z2 != 0 goto label2;

        $z3 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedField: boolean hasAnnotation(java.lang.Class)>(class "Lorg/codehaus/jackson/annotate/JsonManagedReference;");

        if $z3 == 0 goto label3;

     label2:
        return "";

     label3:
        return null;
    }

    public java.lang.String findPropertyNameForParam(org.codehaus.jackson.map.introspect.AnnotatedParameter)
    {
        java.lang.'annotation'.Annotation $r1;
        org.codehaus.jackson.annotate.JsonProperty r2;
        org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector r4;
        java.lang.String $r3;
        org.codehaus.jackson.map.introspect.AnnotatedParameter r0;

        r4 := @this: org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector;

        r0 := @parameter0: org.codehaus.jackson.map.introspect.AnnotatedParameter;

        if r0 == null goto label1;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedParameter: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/codehaus/jackson/annotate/JsonProperty;");

        r2 = (org.codehaus.jackson.annotate.JsonProperty) $r1;

        if r2 == null goto label1;

        $r3 = interfaceinvoke r2.<org.codehaus.jackson.annotate.JsonProperty: java.lang.String value()>();

        return $r3;

     label1:
        return null;
    }

    protected boolean _isIgnorable(org.codehaus.jackson.map.introspect.Annotated)
    {
        org.codehaus.jackson.map.introspect.Annotated r0;
        org.codehaus.jackson.annotate.JsonIgnore r2;
        java.lang.'annotation'.Annotation $r1;
        org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector r3;
        boolean $z0, $z1;

        r3 := @this: org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector;

        r0 := @parameter0: org.codehaus.jackson.map.introspect.Annotated;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.Annotated: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/codehaus/jackson/annotate/JsonIgnore;");

        r2 = (org.codehaus.jackson.annotate.JsonIgnore) $r1;

        if r2 == null goto label1;

        $z0 = interfaceinvoke r2.<org.codehaus.jackson.annotate.JsonIgnore: boolean value()>();

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    protected org.codehaus.jackson.map.jsontype.TypeResolverBuilder _findTypeResolver(org.codehaus.jackson.map.MapperConfig, org.codehaus.jackson.map.introspect.Annotated, org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.map.annotate.JsonTypeIdResolver $r19;
        org.codehaus.jackson.annotate.JsonTypeInfo r2;
        org.codehaus.jackson.annotate.JsonTypeInfo$Id $r5, $r6, $r12;
        org.codehaus.jackson.map.introspect.Annotated r0;
        org.codehaus.jackson.type.JavaType r16;
        org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector r7;
        java.lang.String $r24;
        org.codehaus.jackson.annotate.JsonTypeInfo$As $r14, $r15, r22;
        boolean $z0;
        org.codehaus.jackson.map.annotate.JsonTypeResolver r4;
        org.codehaus.jackson.map.MapperConfig r9;
        org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder $r17;
        org.codehaus.jackson.map.jsontype.TypeIdResolver r11, $r21;
        org.codehaus.jackson.map.jsontype.TypeResolverBuilder $r13, r20, $r23, $r25, r26;
        java.lang.'annotation'.Annotation $r1, $r3, $r8;
        java.lang.Class $r10, $r18, $r27;

        r7 := @this: org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector;

        r9 := @parameter0: org.codehaus.jackson.map.MapperConfig;

        r0 := @parameter1: org.codehaus.jackson.map.introspect.Annotated;

        r16 := @parameter2: org.codehaus.jackson.type.JavaType;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.Annotated: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/codehaus/jackson/annotate/JsonTypeInfo;");

        r2 = (org.codehaus.jackson.annotate.JsonTypeInfo) $r1;

        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.Annotated: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/codehaus/jackson/map/annotate/JsonTypeResolver;");

        r4 = (org.codehaus.jackson.map.annotate.JsonTypeResolver) $r3;

        if r4 == null goto label02;

        if r2 != null goto label01;

        return null;

     label01:
        $r18 = interfaceinvoke r4.<org.codehaus.jackson.map.annotate.JsonTypeResolver: java.lang.Class value()>();

        r20 = virtualinvoke r9.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.jsontype.TypeResolverBuilder typeResolverBuilderInstance(org.codehaus.jackson.map.introspect.Annotated,java.lang.Class)>(r0, $r18);

        goto label05;

     label02:
        if r2 != null goto label03;

        return null;

     label03:
        $r5 = interfaceinvoke r2.<org.codehaus.jackson.annotate.JsonTypeInfo: org.codehaus.jackson.annotate.JsonTypeInfo$Id use()>();

        $r6 = <org.codehaus.jackson.annotate.JsonTypeInfo$Id: org.codehaus.jackson.annotate.JsonTypeInfo$Id NONE>;

        if $r5 != $r6 goto label04;

        $r17 = virtualinvoke r7.<org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector: org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder _constructNoTypeResolverBuilder()>();

        return $r17;

     label04:
        r20 = virtualinvoke r7.<org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector: org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder _constructStdTypeResolverBuilder()>();

     label05:
        $r8 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.Annotated: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/codehaus/jackson/map/annotate/JsonTypeIdResolver;");

        $r19 = (org.codehaus.jackson.map.annotate.JsonTypeIdResolver) $r8;

        if $r19 != null goto label06;

        $r21 = null;

        goto label07;

     label06:
        $r10 = interfaceinvoke $r19.<org.codehaus.jackson.map.annotate.JsonTypeIdResolver: java.lang.Class value()>();

        $r21 = virtualinvoke r9.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.jsontype.TypeIdResolver typeIdResolverInstance(org.codehaus.jackson.map.introspect.Annotated,java.lang.Class)>(r0, $r10);

     label07:
        r11 = $r21;

        if $r21 == null goto label08;

        interfaceinvoke $r21.<org.codehaus.jackson.map.jsontype.TypeIdResolver: void init(org.codehaus.jackson.type.JavaType)>(r16);

     label08:
        $r12 = interfaceinvoke r2.<org.codehaus.jackson.annotate.JsonTypeInfo: org.codehaus.jackson.annotate.JsonTypeInfo$Id use()>();

        $r13 = interfaceinvoke r20.<org.codehaus.jackson.map.jsontype.TypeResolverBuilder: org.codehaus.jackson.map.jsontype.TypeResolverBuilder init(org.codehaus.jackson.annotate.JsonTypeInfo$Id,org.codehaus.jackson.map.jsontype.TypeIdResolver)>($r12, r11);

        $r14 = interfaceinvoke r2.<org.codehaus.jackson.annotate.JsonTypeInfo: org.codehaus.jackson.annotate.JsonTypeInfo$As include()>();

        r22 = $r14;

        $r15 = <org.codehaus.jackson.annotate.JsonTypeInfo$As: org.codehaus.jackson.annotate.JsonTypeInfo$As EXTERNAL_PROPERTY>;

        if $r14 != $r15 goto label09;

        $z0 = r0 instanceof org.codehaus.jackson.map.introspect.AnnotatedClass;

        if $z0 == 0 goto label09;

        r22 = <org.codehaus.jackson.annotate.JsonTypeInfo$As: org.codehaus.jackson.annotate.JsonTypeInfo$As PROPERTY>;

     label09:
        $r23 = interfaceinvoke $r13.<org.codehaus.jackson.map.jsontype.TypeResolverBuilder: org.codehaus.jackson.map.jsontype.TypeResolverBuilder inclusion(org.codehaus.jackson.annotate.JsonTypeInfo$As)>(r22);

        $r24 = interfaceinvoke r2.<org.codehaus.jackson.annotate.JsonTypeInfo: java.lang.String property()>();

        $r25 = interfaceinvoke $r23.<org.codehaus.jackson.map.jsontype.TypeResolverBuilder: org.codehaus.jackson.map.jsontype.TypeResolverBuilder typeProperty(java.lang.String)>($r24);

        r26 = $r25;

        $r27 = interfaceinvoke r2.<org.codehaus.jackson.annotate.JsonTypeInfo: java.lang.Class defaultImpl()>();

        if $r27 == class "Lorg/codehaus/jackson/annotate/JsonTypeInfo$None;" goto label10;

        r26 = interfaceinvoke $r25.<org.codehaus.jackson.map.jsontype.TypeResolverBuilder: org.codehaus.jackson.map.jsontype.TypeResolverBuilder defaultImpl(java.lang.Class)>($r27);

     label10:
        return r26;
    }

    protected org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder _constructStdTypeResolverBuilder()
    {
        org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder $r0;
        org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector r1;

        r1 := @this: org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector;

        $r0 = new org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder;

        specialinvoke $r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: void <init>()>();

        return $r0;
    }

    protected org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder _constructNoTypeResolverBuilder()
    {
        org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder $r0;
        org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector r1;

        r1 := @this: org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector;

        $r0 = staticinvoke <org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder noTypeInfoBuilder()>();

        return $r0;
    }

    public volatile java.lang.Object findDeserializer(org.codehaus.jackson.map.introspect.Annotated)
    {
        org.codehaus.jackson.map.introspect.Annotated r1;
        org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector r0;
        java.lang.Class $r2;

        r0 := @this: org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector;

        r1 := @parameter0: org.codehaus.jackson.map.introspect.Annotated;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector: java.lang.Class findDeserializer(org.codehaus.jackson.map.introspect.Annotated)>(r1);

        return $r2;
    }
}
