public class com.hp.hpl.jena.sparql.sse.builders.BuilderBinding extends java.lang.Object
{

    public void <init>()
    {
        com.hp.hpl.jena.sparql.sse.builders.BuilderBinding r0;

        r0 := @this: com.hp.hpl.jena.sparql.sse.builders.BuilderBinding;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.hp.hpl.jena.sparql.engine.binding.Binding build(com.hp.hpl.jena.sparql.sse.Item)
    {
        com.hp.hpl.jena.sparql.engine.binding.Binding $r6;
        com.hp.hpl.jena.sparql.sse.ItemList $r5;
        com.hp.hpl.jena.sparql.sse.Item r0;
        java.lang.StringBuilder $r1, $r2, $r3;
        java.lang.String $r4;

        r0 := @parameter0: com.hp.hpl.jena.sparql.sse.Item;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempt to build a binding from non-list: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderLib: void checkList(com.hp.hpl.jena.sparql.sse.Item,java.lang.String)>(r0, $r4);

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.ItemList getList()>();

        $r6 = staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderBinding: com.hp.hpl.jena.sparql.engine.binding.Binding buildBinding(com.hp.hpl.jena.sparql.sse.ItemList)>($r5);

        return $r6;
    }

    private static com.hp.hpl.jena.sparql.engine.binding.Binding buildBinding(com.hp.hpl.jena.sparql.sse.ItemList)
    {
        com.hp.hpl.jena.graph.Node $r13;
        com.hp.hpl.jena.sparql.engine.binding.BindingMap $r36;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        com.hp.hpl.jena.sparql.sse.Item $r1, $r2, $r8, $r10, $r12, $r15, $r22, $r29, $r33;
        java.lang.StringBuilder $r3, $r4, $r5, $r16, $r17, $r19, $r23, $r24, $r26, $r30, $r31, $r34;
        int $i0, i1, $i2;
        java.lang.String $r6, $r18, $r20, $r25, $r27, $r35;
        com.hp.hpl.jena.sparql.sse.ItemList r0, $r7, $r11, $r14, $r21, $r28, $r32;
        com.hp.hpl.jena.sparql.core.Var $r9;

        r0 := @parameter0: com.hp.hpl.jena.sparql.sse.ItemList;

        $i0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.ItemList: int size()>();

        if $i0 != 0 goto label1;

        staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderLib: void broken(com.hp.hpl.jena.sparql.sse.ItemList,java.lang.String)>(r0, "Empty list");

     label1:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.Item get(int)>(0);

        $z0 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.sse.Item: boolean isSymbolIgnoreCase(java.lang.String)>("row");

        if $z0 != 0 goto label2;

        $z5 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.sse.Item: boolean isSymbolIgnoreCase(java.lang.String)>("binding");

        if $z5 != 0 goto label2;

        staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderLib: void broken(com.hp.hpl.jena.sparql.sse.ItemLocation,java.lang.String,com.hp.hpl.jena.sparql.sse.Item)>(r0, "Does not start (row ...) or (binding ...)", $r1);

     label2:
        $r36 = staticinvoke <com.hp.hpl.jena.sparql.engine.binding.BindingFactory: com.hp.hpl.jena.sparql.engine.binding.BindingMap create()>();

        i1 = 1;

     label3:
        $i2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.ItemList: int size()>();

        if i1 >= $i2 goto label9;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.Item get(int)>(i1);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempt to build a binding pair from non-list: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderLib: void checkList(com.hp.hpl.jena.sparql.sse.Item,java.lang.String)>($r2, $r6);

        $r7 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.ItemList getList()>();

        staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderLib: void checkLength(int,com.hp.hpl.jena.sparql.sse.ItemList,java.lang.String)>(2, $r7, "Need a pair for a binding");

        $r8 = virtualinvoke $r7.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.Item get(int)>(0);

        $r9 = staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderNode: com.hp.hpl.jena.sparql.core.Var buildVar(com.hp.hpl.jena.sparql.sse.Item)>($r8);

        $r10 = virtualinvoke $r7.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.Item get(int)>(1);

        $z1 = virtualinvoke $r10.<com.hp.hpl.jena.sparql.sse.Item: boolean isSymbolIgnoreCase(java.lang.String)>("undef");

        if $z1 != 0 goto label8;

        $z2 = virtualinvoke $r10.<com.hp.hpl.jena.sparql.sse.Item: boolean isSymbolIgnoreCase(java.lang.String)>("null");

        if $z2 == 0 goto label4;

        goto label8;

     label4:
        staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderLib: void checkNode(com.hp.hpl.jena.sparql.sse.Item)>($r10);

        $r11 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.ItemList getList()>();

        $r12 = virtualinvoke $r11.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.Item get(int)>(1);

        $r13 = staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderNode: com.hp.hpl.jena.graph.Node buildNode(com.hp.hpl.jena.sparql.sse.Item)>($r12);

        if $r13 != null goto label5;

        $r28 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.ItemList getList()>();

        $r29 = virtualinvoke $r28.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.Item get(int)>(1);

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Null node from ");

        $r32 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.ItemList getList()>();

        $r33 = virtualinvoke $r32.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.Item get(int)>(1);

        $r34 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r33);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderLib: void broken(com.hp.hpl.jena.sparql.sse.Item,java.lang.String)>($r29, $r35);

     label5:
        $z3 = virtualinvoke $r13.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z3 == 0 goto label6;

        $r21 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.ItemList getList()>();

        $r22 = virtualinvoke $r21.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.Item get(int)>(1);

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No variables as table values: ");

        $r25 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: java.lang.String stringForNode(com.hp.hpl.jena.graph.Node)>($r13);

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderLib: void broken(com.hp.hpl.jena.sparql.sse.Item,java.lang.String)>($r22, $r27);

     label6:
        $z4 = virtualinvoke $r13.<com.hp.hpl.jena.graph.Node: boolean isConcrete()>();

        if $z4 != 0 goto label7;

        $r14 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.ItemList getList()>();

        $r15 = virtualinvoke $r14.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.Item get(int)>(1);

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ony concrete nodes as table values: ");

        $r18 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: java.lang.String stringForNode(com.hp.hpl.jena.graph.Node)>($r13);

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderLib: void broken(com.hp.hpl.jena.sparql.sse.Item,java.lang.String)>($r15, $r20);

     label7:
        interfaceinvoke $r36.<com.hp.hpl.jena.sparql.engine.binding.BindingMap: void add(com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.graph.Node)>($r9, $r13);

     label8:
        i1 = i1 + 1;

        goto label3;

     label9:
        return $r36;
    }
}
