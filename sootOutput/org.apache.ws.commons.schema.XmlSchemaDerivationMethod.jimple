public class org.apache.ws.commons.schema.XmlSchemaDerivationMethod extends java.lang.Object
{
    public static final org.apache.ws.commons.schema.XmlSchemaDerivationMethod NONE;
    private boolean all;
    private boolean empty;
    private boolean extension;
    private boolean list;
    private boolean restriction;
    private boolean substitution;
    private boolean union;

    public void <init>()
    {
        org.apache.ws.commons.schema.XmlSchemaDerivationMethod r0;

        r0 := @this: org.apache.ws.commons.schema.XmlSchemaDerivationMethod;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.apache.ws.commons.schema.XmlSchemaDerivationMethod schemaValueOf(java.lang.String)
    {
        org.apache.ws.commons.schema.XmlSchemaDerivationMethod $r2;
        java.lang.String[] $r1;
        org.apache.ws.commons.schema.XmlSchemaException $r5, $r12;
        int i0, i1;
        java.lang.String r0, r3, $r4, $r6, $r7, $r8, $r9, $r10, $r11;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\s");

        $r2 = new org.apache.ws.commons.schema.XmlSchemaDerivationMethod;

        specialinvoke $r2.<org.apache.ws.commons.schema.XmlSchemaDerivationMethod: void <init>()>();

        i0 = lengthof $r1;

        i1 = 0;

     label01:
        if i1 >= i0 goto label11;

        r3 = $r1[i1];

        $r4 = "#all";

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r3);

        if $z0 != 0 goto label02;

        $r6 = "all";

        $z2 = virtualinvoke $r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r3);

        if $z2 == 0 goto label04;

     label02:
        $z1 = virtualinvoke $r2.<org.apache.ws.commons.schema.XmlSchemaDerivationMethod: boolean notAll()>();

        if $z1 == 0 goto label03;

        $r5 = new org.apache.ws.commons.schema.XmlSchemaException;

        specialinvoke $r5.<org.apache.ws.commons.schema.XmlSchemaException: void <init>(java.lang.String)>("Derivation method cannot be #all and something else.");

        throw $r5;

     label03:
        virtualinvoke $r2.<org.apache.ws.commons.schema.XmlSchemaDerivationMethod: void setAll(boolean)>(1);

        goto label10;

     label04:
        $z3 = virtualinvoke $r2.<org.apache.ws.commons.schema.XmlSchemaDerivationMethod: boolean isAll()>();

        if $z3 == 0 goto label05;

        $r12 = new org.apache.ws.commons.schema.XmlSchemaException;

        specialinvoke $r12.<org.apache.ws.commons.schema.XmlSchemaException: void <init>(java.lang.String)>("Derivation method cannot be #all and something else.");

        throw $r12;

     label05:
        $r7 = "extension";

        $z4 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z4 == 0 goto label06;

        virtualinvoke $r2.<org.apache.ws.commons.schema.XmlSchemaDerivationMethod: void setExtension(boolean)>(1);

        goto label10;

     label06:
        $r8 = "list";

        $z5 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z5 == 0 goto label07;

        virtualinvoke $r2.<org.apache.ws.commons.schema.XmlSchemaDerivationMethod: void setList(boolean)>(1);

        goto label10;

     label07:
        $r9 = "restriction";

        $z6 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z6 == 0 goto label08;

        virtualinvoke $r2.<org.apache.ws.commons.schema.XmlSchemaDerivationMethod: void setRestriction(boolean)>(1);

        goto label10;

     label08:
        $r10 = "substitution";

        $z7 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z7 == 0 goto label09;

        virtualinvoke $r2.<org.apache.ws.commons.schema.XmlSchemaDerivationMethod: void setSubstitution(boolean)>(1);

        goto label10;

     label09:
        $r11 = "union";

        $z8 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z8 == 0 goto label10;

        virtualinvoke $r2.<org.apache.ws.commons.schema.XmlSchemaDerivationMethod: void setUnion(boolean)>(1);

     label10:
        i1 = i1 + 1;

        goto label01;

     label11:
        return $r2;
    }

    public java.lang.String toString()
    {
        org.apache.ws.commons.schema.XmlSchemaDerivationMethod r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2, $r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r0 := @this: org.apache.ws.commons.schema.XmlSchemaDerivationMethod;

        $z0 = virtualinvoke r0.<org.apache.ws.commons.schema.XmlSchemaDerivationMethod: boolean isAll()>();

        if $z0 == 0 goto label1;

        return "#all";

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $z1 = virtualinvoke r0.<org.apache.ws.commons.schema.XmlSchemaDerivationMethod: boolean isExtension()>();

        if $z1 == 0 goto label2;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("extension ");

     label2:
        $z2 = virtualinvoke r0.<org.apache.ws.commons.schema.XmlSchemaDerivationMethod: boolean isList()>();

        if $z2 == 0 goto label3;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("list ");

     label3:
        $z3 = virtualinvoke r0.<org.apache.ws.commons.schema.XmlSchemaDerivationMethod: boolean isRestriction()>();

        if $z3 == 0 goto label4;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("restriction ");

     label4:
        $z4 = virtualinvoke r0.<org.apache.ws.commons.schema.XmlSchemaDerivationMethod: boolean isSubstitution()>();

        if $z4 == 0 goto label5;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("substitution ");

     label5:
        $z5 = virtualinvoke r0.<org.apache.ws.commons.schema.XmlSchemaDerivationMethod: boolean isUnion()>();

        if $z5 == 0 goto label6;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("union ");

     label6:
        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

        return $r3;
    }

    public boolean notAll()
    {
        org.apache.ws.commons.schema.XmlSchemaDerivationMethod r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;

        r0 := @this: org.apache.ws.commons.schema.XmlSchemaDerivationMethod;

        $z1 = r0.<org.apache.ws.commons.schema.XmlSchemaDerivationMethod: boolean empty>;

        $z0 = r0.<org.apache.ws.commons.schema.XmlSchemaDerivationMethod: boolean extension>;

        $z3 = $z1 | $z0;

        $z2 = r0.<org.apache.ws.commons.schema.XmlSchemaDerivationMethod: boolean list>;

        $z5 = $z3 | $z2;

        $z4 = r0.<org.apache.ws.commons.schema.XmlSchemaDerivationMethod: boolean restriction>;

        $z7 = $z5 | $z4;

        $z6 = r0.<org.apache.ws.commons.schema.XmlSchemaDerivationMethod: boolean substitution>;

        $z9 = $z7 | $z6;

        $z8 = r0.<org.apache.ws.commons.schema.XmlSchemaDerivationMethod: boolean union>;

        $z10 = $z9 | $z8;

        return $z10;
    }

    public boolean isAll()
    {
        org.apache.ws.commons.schema.XmlSchemaDerivationMethod r0;
        boolean $z0;

        r0 := @this: org.apache.ws.commons.schema.XmlSchemaDerivationMethod;

        $z0 = r0.<org.apache.ws.commons.schema.XmlSchemaDerivationMethod: boolean all>;

        return $z0;
    }

    public void setAll(boolean)
    {
        org.apache.ws.commons.schema.XmlSchemaDerivationMethod r0;
        boolean z0;

        r0 := @this: org.apache.ws.commons.schema.XmlSchemaDerivationMethod;

        z0 := @parameter0: boolean;

        r0.<org.apache.ws.commons.schema.XmlSchemaDerivationMethod: boolean all> = z0;

        if z0 == 0 goto label1;

        r0.<org.apache.ws.commons.schema.XmlSchemaDerivationMethod: boolean empty> = 0;

        r0.<org.apache.ws.commons.schema.XmlSchemaDerivationMethod: boolean extension> = 0;

        r0.<org.apache.ws.commons.schema.XmlSchemaDerivationMethod: boolean list> = 0;

        r0.<org.apache.ws.commons.schema.XmlSchemaDerivationMethod: boolean restriction> = 0;

        r0.<org.apache.ws.commons.schema.XmlSchemaDerivationMethod: boolean substitution> = 0;

        r0.<org.apache.ws.commons.schema.XmlSchemaDerivationMethod: boolean union> = 0;

     label1:
        return;
    }

    public boolean isEmpty()
    {
        org.apache.ws.commons.schema.XmlSchemaDerivationMethod r0;
        boolean $z0;

        r0 := @this: org.apache.ws.commons.schema.XmlSchemaDerivationMethod;

        $z0 = r0.<org.apache.ws.commons.schema.XmlSchemaDerivationMethod: boolean empty>;

        return $z0;
    }

    public void setEmpty(boolean)
    {
        org.apache.ws.commons.schema.XmlSchemaDerivationMethod r0;
        boolean z0;

        r0 := @this: org.apache.ws.commons.schema.XmlSchemaDerivationMethod;

        z0 := @parameter0: boolean;

        r0.<org.apache.ws.commons.schema.XmlSchemaDerivationMethod: boolean empty> = z0;

        return;
    }

    public boolean isExtension()
    {
        org.apache.ws.commons.schema.XmlSchemaDerivationMethod r0;
        boolean $z0;

        r0 := @this: org.apache.ws.commons.schema.XmlSchemaDerivationMethod;

        $z0 = r0.<org.apache.ws.commons.schema.XmlSchemaDerivationMethod: boolean extension>;

        return $z0;
    }

    public void setExtension(boolean)
    {
        org.apache.ws.commons.schema.XmlSchemaDerivationMethod r0;
        boolean z0;

        r0 := @this: org.apache.ws.commons.schema.XmlSchemaDerivationMethod;

        z0 := @parameter0: boolean;

        r0.<org.apache.ws.commons.schema.XmlSchemaDerivationMethod: boolean extension> = z0;

        return;
    }

    public boolean isList()
    {
        org.apache.ws.commons.schema.XmlSchemaDerivationMethod r0;
        boolean $z0;

        r0 := @this: org.apache.ws.commons.schema.XmlSchemaDerivationMethod;

        $z0 = r0.<org.apache.ws.commons.schema.XmlSchemaDerivationMethod: boolean list>;

        return $z0;
    }

    public void setList(boolean)
    {
        org.apache.ws.commons.schema.XmlSchemaDerivationMethod r0;
        boolean z0;

        r0 := @this: org.apache.ws.commons.schema.XmlSchemaDerivationMethod;

        z0 := @parameter0: boolean;

        r0.<org.apache.ws.commons.schema.XmlSchemaDerivationMethod: boolean list> = z0;

        return;
    }

    public boolean isNone()
    {
        org.apache.ws.commons.schema.XmlSchemaDerivationMethod r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;

        r0 := @this: org.apache.ws.commons.schema.XmlSchemaDerivationMethod;

        $z0 = r0.<org.apache.ws.commons.schema.XmlSchemaDerivationMethod: boolean all>;

        if $z0 != 0 goto label1;

        $z1 = r0.<org.apache.ws.commons.schema.XmlSchemaDerivationMethod: boolean empty>;

        if $z1 != 0 goto label1;

        $z2 = r0.<org.apache.ws.commons.schema.XmlSchemaDerivationMethod: boolean extension>;

        if $z2 != 0 goto label1;

        $z3 = r0.<org.apache.ws.commons.schema.XmlSchemaDerivationMethod: boolean list>;

        if $z3 != 0 goto label1;

        $z4 = r0.<org.apache.ws.commons.schema.XmlSchemaDerivationMethod: boolean restriction>;

        if $z4 != 0 goto label1;

        $z5 = r0.<org.apache.ws.commons.schema.XmlSchemaDerivationMethod: boolean substitution>;

        if $z5 != 0 goto label1;

        $z6 = r0.<org.apache.ws.commons.schema.XmlSchemaDerivationMethod: boolean union>;

        if $z6 != 0 goto label1;

        $z7 = 1;

        goto label2;

     label1:
        $z7 = 0;

     label2:
        return $z7;
    }

    public void setNone(boolean)
    {
        org.apache.ws.commons.schema.XmlSchemaDerivationMethod r0;
        boolean z0;

        r0 := @this: org.apache.ws.commons.schema.XmlSchemaDerivationMethod;

        z0 := @parameter0: boolean;

        r0.<org.apache.ws.commons.schema.XmlSchemaDerivationMethod: boolean all> = 0;

        r0.<org.apache.ws.commons.schema.XmlSchemaDerivationMethod: boolean empty> = 0;

        r0.<org.apache.ws.commons.schema.XmlSchemaDerivationMethod: boolean extension> = 0;

        r0.<org.apache.ws.commons.schema.XmlSchemaDerivationMethod: boolean list> = 0;

        r0.<org.apache.ws.commons.schema.XmlSchemaDerivationMethod: boolean restriction> = 0;

        r0.<org.apache.ws.commons.schema.XmlSchemaDerivationMethod: boolean substitution> = 0;

        r0.<org.apache.ws.commons.schema.XmlSchemaDerivationMethod: boolean union> = 0;

        return;
    }

    public boolean isRestriction()
    {
        org.apache.ws.commons.schema.XmlSchemaDerivationMethod r0;
        boolean $z0;

        r0 := @this: org.apache.ws.commons.schema.XmlSchemaDerivationMethod;

        $z0 = r0.<org.apache.ws.commons.schema.XmlSchemaDerivationMethod: boolean restriction>;

        return $z0;
    }

    public void setRestriction(boolean)
    {
        org.apache.ws.commons.schema.XmlSchemaDerivationMethod r0;
        boolean z0;

        r0 := @this: org.apache.ws.commons.schema.XmlSchemaDerivationMethod;

        z0 := @parameter0: boolean;

        r0.<org.apache.ws.commons.schema.XmlSchemaDerivationMethod: boolean restriction> = z0;

        return;
    }

    public boolean isSubstitution()
    {
        org.apache.ws.commons.schema.XmlSchemaDerivationMethod r0;
        boolean $z0;

        r0 := @this: org.apache.ws.commons.schema.XmlSchemaDerivationMethod;

        $z0 = r0.<org.apache.ws.commons.schema.XmlSchemaDerivationMethod: boolean substitution>;

        return $z0;
    }

    public void setSubstitution(boolean)
    {
        org.apache.ws.commons.schema.XmlSchemaDerivationMethod r0;
        boolean z0;

        r0 := @this: org.apache.ws.commons.schema.XmlSchemaDerivationMethod;

        z0 := @parameter0: boolean;

        r0.<org.apache.ws.commons.schema.XmlSchemaDerivationMethod: boolean substitution> = z0;

        return;
    }

    public boolean isUnion()
    {
        org.apache.ws.commons.schema.XmlSchemaDerivationMethod r0;
        boolean $z0;

        r0 := @this: org.apache.ws.commons.schema.XmlSchemaDerivationMethod;

        $z0 = r0.<org.apache.ws.commons.schema.XmlSchemaDerivationMethod: boolean union>;

        return $z0;
    }

    public void setUnion(boolean)
    {
        org.apache.ws.commons.schema.XmlSchemaDerivationMethod r0;
        boolean z0;

        r0 := @this: org.apache.ws.commons.schema.XmlSchemaDerivationMethod;

        z0 := @parameter0: boolean;

        r0.<org.apache.ws.commons.schema.XmlSchemaDerivationMethod: boolean union> = z0;

        return;
    }

    static void <clinit>()
    {
        org.apache.ws.commons.schema.XmlSchemaDerivationMethod $r0;

        $r0 = new org.apache.ws.commons.schema.XmlSchemaDerivationMethod;

        specialinvoke $r0.<org.apache.ws.commons.schema.XmlSchemaDerivationMethod: void <init>()>();

        <org.apache.ws.commons.schema.XmlSchemaDerivationMethod: org.apache.ws.commons.schema.XmlSchemaDerivationMethod NONE> = $r0;

        return;
    }
}
