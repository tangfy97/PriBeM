public abstract class org.apache.http.impl.auth.AuthSchemeBase extends java.lang.Object implements org.apache.http.auth.ContextAwareAuthScheme
{
    private org.apache.http.auth.ChallengeState challengeState;

    public void <init>(org.apache.http.auth.ChallengeState)
    {
        org.apache.http.auth.ChallengeState r1;
        org.apache.http.impl.auth.AuthSchemeBase r0;

        r0 := @this: org.apache.http.impl.auth.AuthSchemeBase;

        r1 := @parameter0: org.apache.http.auth.ChallengeState;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.http.impl.auth.AuthSchemeBase: org.apache.http.auth.ChallengeState challengeState> = r1;

        return;
    }

    public void <init>()
    {
        org.apache.http.impl.auth.AuthSchemeBase r0;

        r0 := @this: org.apache.http.impl.auth.AuthSchemeBase;

        specialinvoke r0.<org.apache.http.impl.auth.AuthSchemeBase: void <init>(org.apache.http.auth.ChallengeState)>(null);

        return;
    }

    public void processChallenge(org.apache.http.Header) throws org.apache.http.auth.MalformedChallengeException
    {
        org.apache.http.Header r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.apache.http.auth.ChallengeState $r8, $r21;
        java.lang.StringBuilder $r3, $r4, $r5, $r14, $r15, $r16;
        org.apache.http.FormattedHeader $r19, $r20;
        org.apache.http.impl.auth.AuthSchemeBase r7;
        int $i0, $i1, i4, $i5, i6, $i7;
        java.lang.String $r1, $r6, $r9, $r11, $r12, $r17;
        org.apache.http.auth.MalformedChallengeException $r2, $r13, $r18;
        char $c2, $c3;
        java.lang.IllegalArgumentException $r22;
        org.apache.http.util.CharArrayBuffer $r10, r23;

        r7 := @this: org.apache.http.impl.auth.AuthSchemeBase;

        r0 := @parameter0: org.apache.http.Header;

        if r0 != null goto label01;

        $r22 = new java.lang.IllegalArgumentException;

        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Header may not be null");

        throw $r22;

     label01:
        $r1 = interfaceinvoke r0.<org.apache.http.Header: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("WWW-Authenticate");

        if $z0 == 0 goto label02;

        $r21 = <org.apache.http.auth.ChallengeState: org.apache.http.auth.ChallengeState TARGET>;

        r7.<org.apache.http.impl.auth.AuthSchemeBase: org.apache.http.auth.ChallengeState challengeState> = $r21;

        goto label04;

     label02:
        $z1 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("Proxy-Authenticate");

        if $z1 == 0 goto label03;

        $r8 = <org.apache.http.auth.ChallengeState: org.apache.http.auth.ChallengeState PROXY>;

        r7.<org.apache.http.impl.auth.AuthSchemeBase: org.apache.http.auth.ChallengeState challengeState> = $r8;

        goto label04;

     label03:
        $r2 = new org.apache.http.auth.MalformedChallengeException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected header name: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<org.apache.http.auth.MalformedChallengeException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label04:
        $z2 = r0 instanceof org.apache.http.FormattedHeader;

        if $z2 == 0 goto label05;

        $r19 = (org.apache.http.FormattedHeader) r0;

        r23 = interfaceinvoke $r19.<org.apache.http.FormattedHeader: org.apache.http.util.CharArrayBuffer getBuffer()>();

        $r20 = (org.apache.http.FormattedHeader) r0;

        i4 = interfaceinvoke $r20.<org.apache.http.FormattedHeader: int getValuePos()>();

        goto label07;

     label05:
        $r9 = interfaceinvoke r0.<org.apache.http.Header: java.lang.String getValue()>();

        if $r9 != null goto label06;

        $r18 = new org.apache.http.auth.MalformedChallengeException;

        specialinvoke $r18.<org.apache.http.auth.MalformedChallengeException: void <init>(java.lang.String)>("Header value is null");

        throw $r18;

     label06:
        $r10 = new org.apache.http.util.CharArrayBuffer;

        $i0 = virtualinvoke $r9.<java.lang.String: int length()>();

        specialinvoke $r10.<org.apache.http.util.CharArrayBuffer: void <init>(int)>($i0);

        r23 = $r10;

        virtualinvoke $r10.<org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>($r9);

        i4 = 0;

     label07:
        $i5 = virtualinvoke r23.<org.apache.http.util.CharArrayBuffer: int length()>();

        if i4 >= $i5 goto label08;

        $c3 = virtualinvoke r23.<org.apache.http.util.CharArrayBuffer: char charAt(int)>(i4);

        $z5 = staticinvoke <org.apache.http.protocol.HTTP: boolean isWhitespace(char)>($c3);

        if $z5 == 0 goto label08;

        i4 = i4 + 1;

        goto label07;

     label08:
        i6 = i4;

     label09:
        $i7 = virtualinvoke r23.<org.apache.http.util.CharArrayBuffer: int length()>();

        if i4 >= $i7 goto label10;

        $c2 = virtualinvoke r23.<org.apache.http.util.CharArrayBuffer: char charAt(int)>(i4);

        $z4 = staticinvoke <org.apache.http.protocol.HTTP: boolean isWhitespace(char)>($c2);

        if $z4 != 0 goto label10;

        i4 = i4 + 1;

        goto label09;

     label10:
        $r11 = virtualinvoke r23.<org.apache.http.util.CharArrayBuffer: java.lang.String substring(int,int)>(i6, i4);

        $r12 = virtualinvoke r7.<org.apache.http.impl.auth.AuthSchemeBase: java.lang.String getSchemeName()>();

        $z3 = virtualinvoke $r11.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r12);

        if $z3 != 0 goto label11;

        $r13 = new org.apache.http.auth.MalformedChallengeException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid scheme identifier: ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<org.apache.http.auth.MalformedChallengeException: void <init>(java.lang.String)>($r17);

        throw $r13;

     label11:
        $i1 = virtualinvoke r23.<org.apache.http.util.CharArrayBuffer: int length()>();

        virtualinvoke r7.<org.apache.http.impl.auth.AuthSchemeBase: void parseChallenge(org.apache.http.util.CharArrayBuffer,int,int)>(r23, i4, $i1);

        return;
    }

    public org.apache.http.Header authenticate(org.apache.http.auth.Credentials, org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext) throws org.apache.http.auth.AuthenticationException
    {
        org.apache.http.auth.Credentials r1;
        org.apache.http.protocol.HttpContext r4;
        org.apache.http.impl.auth.AuthSchemeBase r0;
        org.apache.http.HttpRequest r2;
        org.apache.http.Header $r3;

        r0 := @this: org.apache.http.impl.auth.AuthSchemeBase;

        r1 := @parameter0: org.apache.http.auth.Credentials;

        r2 := @parameter1: org.apache.http.HttpRequest;

        r4 := @parameter2: org.apache.http.protocol.HttpContext;

        $r3 = virtualinvoke r0.<org.apache.http.impl.auth.AuthSchemeBase: org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest)>(r1, r2);

        return $r3;
    }

    protected abstract void parseChallenge(org.apache.http.util.CharArrayBuffer, int, int) throws org.apache.http.auth.MalformedChallengeException;

    public boolean isProxy()
    {
        org.apache.http.auth.ChallengeState $r1, $r2, $r3;
        org.apache.http.impl.auth.AuthSchemeBase r0;
        boolean $z0;

        r0 := @this: org.apache.http.impl.auth.AuthSchemeBase;

        $r1 = r0.<org.apache.http.impl.auth.AuthSchemeBase: org.apache.http.auth.ChallengeState challengeState>;

        if $r1 == null goto label1;

        $r3 = r0.<org.apache.http.impl.auth.AuthSchemeBase: org.apache.http.auth.ChallengeState challengeState>;

        $r2 = <org.apache.http.auth.ChallengeState: org.apache.http.auth.ChallengeState PROXY>;

        if $r3 != $r2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public org.apache.http.auth.ChallengeState getChallengeState()
    {
        org.apache.http.auth.ChallengeState $r1;
        org.apache.http.impl.auth.AuthSchemeBase r0;

        r0 := @this: org.apache.http.impl.auth.AuthSchemeBase;

        $r1 = r0.<org.apache.http.impl.auth.AuthSchemeBase: org.apache.http.auth.ChallengeState challengeState>;

        return $r1;
    }

    public java.lang.String toString()
    {
        java.util.Locale $r3;
        org.apache.http.impl.auth.AuthSchemeBase r0;
        java.lang.String $r1, $r2, $r4;

        r0 := @this: org.apache.http.impl.auth.AuthSchemeBase;

        $r1 = virtualinvoke r0.<org.apache.http.impl.auth.AuthSchemeBase: java.lang.String getSchemeName()>();

        if $r1 == null goto label1;

        $r3 = <java.util.Locale: java.util.Locale US>;

        $r4 = virtualinvoke $r1.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r3);

        return $r4;

     label1:
        $r2 = specialinvoke r0.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }
}
