public abstract class kodkod.engine.bool.Operator extends java.lang.Object implements java.lang.Comparable
{
    final int ordinal;
    public static final kodkod.engine.bool.Operator$Nary AND;
    public static final kodkod.engine.bool.Operator$Nary OR;
    public static final kodkod.engine.bool.Operator$Ternary ITE;
    public static final kodkod.engine.bool.Operator NOT;
    public static final kodkod.engine.bool.Operator VAR;
    public static final kodkod.engine.bool.Operator CONST;

    static void <clinit>()
    {
        kodkod.engine.bool.Operator$4 $r3;
        kodkod.engine.bool.Operator$5 $r4;
        kodkod.engine.bool.Operator$2 $r1;
        kodkod.engine.bool.Operator$3 $r2;
        kodkod.engine.bool.Operator$6 $r5;
        kodkod.engine.bool.Operator$1 $r0;

        $r0 = new kodkod.engine.bool.Operator$1;

        specialinvoke $r0.<kodkod.engine.bool.Operator$1: void <init>(int)>(0);

        <kodkod.engine.bool.Operator: kodkod.engine.bool.Operator$Nary AND> = $r0;

        $r1 = new kodkod.engine.bool.Operator$2;

        specialinvoke $r1.<kodkod.engine.bool.Operator$2: void <init>(int)>(1);

        <kodkod.engine.bool.Operator: kodkod.engine.bool.Operator$Nary OR> = $r1;

        $r2 = new kodkod.engine.bool.Operator$3;

        specialinvoke $r2.<kodkod.engine.bool.Operator$3: void <init>(int)>(2);

        <kodkod.engine.bool.Operator: kodkod.engine.bool.Operator$Ternary ITE> = $r2;

        $r3 = new kodkod.engine.bool.Operator$4;

        specialinvoke $r3.<kodkod.engine.bool.Operator$4: void <init>(int)>(3);

        <kodkod.engine.bool.Operator: kodkod.engine.bool.Operator NOT> = $r3;

        $r4 = new kodkod.engine.bool.Operator$5;

        specialinvoke $r4.<kodkod.engine.bool.Operator$5: void <init>(int)>(4);

        <kodkod.engine.bool.Operator: kodkod.engine.bool.Operator VAR> = $r4;

        $r5 = new kodkod.engine.bool.Operator$6;

        specialinvoke $r5.<kodkod.engine.bool.Operator$6: void <init>(int)>(5);

        <kodkod.engine.bool.Operator: kodkod.engine.bool.Operator CONST> = $r5;

        return;
    }

    private void <init>(int)
    {
        int i0;
        kodkod.engine.bool.Operator r0;

        r0 := @this: kodkod.engine.bool.Operator;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kodkod.engine.bool.Operator: int ordinal> = i0;

        return;
    }

    public final int ordinal()
    {
        int $i0;
        kodkod.engine.bool.Operator r0;

        r0 := @this: kodkod.engine.bool.Operator;

        $i0 = r0.<kodkod.engine.bool.Operator: int ordinal>;

        return $i0;
    }

    public int compareTo(kodkod.engine.bool.Operator)
    {
        int $i0, $i1, $i2;
        kodkod.engine.bool.Operator r0, r1;

        r0 := @this: kodkod.engine.bool.Operator;

        r1 := @parameter0: kodkod.engine.bool.Operator;

        $i0 = virtualinvoke r0.<kodkod.engine.bool.Operator: int ordinal()>();

        $i1 = virtualinvoke r1.<kodkod.engine.bool.Operator: int ordinal()>();

        $i2 = $i0 - $i1;

        return $i2;
    }

    public volatile int compareTo(java.lang.Object)
    {
        int $i0;
        java.lang.Object r1;
        kodkod.engine.bool.Operator r0, $r2;

        r0 := @this: kodkod.engine.bool.Operator;

        r1 := @parameter0: java.lang.Object;

        $r2 = (kodkod.engine.bool.Operator) r1;

        $i0 = virtualinvoke r0.<kodkod.engine.bool.Operator: int compareTo(kodkod.engine.bool.Operator)>($r2);

        return $i0;
    }

    void <init>(int, kodkod.engine.bool.Operator)
    {
        int i0;
        kodkod.engine.bool.Operator r0, r1;

        r0 := @this: kodkod.engine.bool.Operator;

        i0 := @parameter0: int;

        r1 := @parameter1: kodkod.engine.bool.Operator;

        specialinvoke r0.<kodkod.engine.bool.Operator: void <init>(int)>(i0);

        return;
    }
}
