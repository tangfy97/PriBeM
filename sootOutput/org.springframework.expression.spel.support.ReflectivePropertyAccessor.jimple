public class org.springframework.expression.spel.support.ReflectivePropertyAccessor extends java.lang.Object implements org.springframework.expression.PropertyAccessor
{
    protected final java.util.Map readerCache;
    protected final java.util.Map writerCache;
    protected final java.util.Map typeDescriptorCache;

    public void <init>()
    {
        org.springframework.expression.spel.support.ReflectivePropertyAccessor r0;
        java.util.concurrent.ConcurrentHashMap $r1, $r2, $r3;

        r0 := @this: org.springframework.expression.spel.support.ReflectivePropertyAccessor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.springframework.expression.spel.support.ReflectivePropertyAccessor: java.util.Map readerCache> = $r1;

        $r2 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r2.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.springframework.expression.spel.support.ReflectivePropertyAccessor: java.util.Map writerCache> = $r2;

        $r3 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r3.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.springframework.expression.spel.support.ReflectivePropertyAccessor: java.util.Map typeDescriptorCache> = $r3;

        return;
    }

    public java.lang.Class[] getSpecificTargetClasses()
    {
        org.springframework.expression.spel.support.ReflectivePropertyAccessor r0;

        r0 := @this: org.springframework.expression.spel.support.ReflectivePropertyAccessor;

        return null;
    }

    public boolean canRead(org.springframework.expression.EvaluationContext, java.lang.Object, java.lang.String) throws org.springframework.expression.AccessException
    {
        org.springframework.expression.spel.support.ReflectivePropertyAccessor r4;
        org.springframework.core.convert.support.PropertyTypeDescriptor $r30;
        org.springframework.expression.spel.support.ReflectivePropertyAccessor$CacheKey $r27;
        java.util.Map $r5, $r10, $r11, $r16, $r17;
        org.springframework.core.MethodParameter $r29;
        java.lang.reflect.Method $r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.springframework.expression.AccessException $r33;
        java.beans.IntrospectionException $r18;
        org.springframework.expression.EvaluationContext r25;
        java.beans.PropertyDescriptor $r28;
        java.lang.StringBuilder $r21, $r22, $r23, $r32;
        org.springframework.core.convert.TypeDescriptor $r34;
        int $i1;
        java.lang.String r3, $r24;
        org.springframework.expression.spel.support.ReflectivePropertyAccessor$InvokerPair $r31, $r35;
        java.lang.reflect.Field $r7;
        java.lang.Object r0;
        java.lang.Class r1, $r26;

        r4 := @this: org.springframework.expression.spel.support.ReflectivePropertyAccessor;

        r25 := @parameter0: org.springframework.expression.EvaluationContext;

        r0 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.String;

        if r0 != null goto label01;

        return 0;

     label01:
        $z0 = r0 instanceof java.lang.Class;

        if $z0 == 0 goto label02;

        $r26 = (java.lang.Class) r0;

        goto label03;

     label02:
        $r26 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

     label03:
        r1 = $r26;

        $z1 = virtualinvoke $r26.<java.lang.Class: boolean isArray()>();

        if $z1 == 0 goto label04;

        $z5 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("length");

        if $z5 == 0 goto label04;

        return 1;

     label04:
        $r27 = new org.springframework.expression.spel.support.ReflectivePropertyAccessor$CacheKey;

        specialinvoke $r27.<org.springframework.expression.spel.support.ReflectivePropertyAccessor$CacheKey: void <init>(java.lang.Class,java.lang.String)>(r1, r3);

        $r5 = r4.<org.springframework.expression.spel.support.ReflectivePropertyAccessor: java.util.Map readerCache>;

        $z2 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>($r27);

        if $z2 == 0 goto label05;

        return 1;

     label05:
        $z3 = r0 instanceof java.lang.Class;

        $r6 = virtualinvoke r4.<org.springframework.expression.spel.support.ReflectivePropertyAccessor: java.lang.reflect.Method findGetterForProperty(java.lang.String,java.lang.Class,boolean)>(r3, r1, $z3);

        if $r6 == null goto label09;

     label06:
        $r28 = new java.beans.PropertyDescriptor;

        specialinvoke $r28.<java.beans.PropertyDescriptor: void <init>(java.lang.String,java.lang.reflect.Method,java.lang.reflect.Method)>(r3, $r6, null);

        $r30 = new org.springframework.core.convert.support.PropertyTypeDescriptor;

        $r29 = new org.springframework.core.MethodParameter;

        $i1 = (int) -1;

        specialinvoke $r29.<org.springframework.core.MethodParameter: void <init>(java.lang.reflect.Method,int)>($r6, $i1);

        specialinvoke $r30.<org.springframework.core.convert.support.PropertyTypeDescriptor: void <init>(java.beans.PropertyDescriptor,org.springframework.core.MethodParameter)>($r28, $r29);

        $r16 = r4.<org.springframework.expression.spel.support.ReflectivePropertyAccessor: java.util.Map readerCache>;

        $r31 = new org.springframework.expression.spel.support.ReflectivePropertyAccessor$InvokerPair;

        specialinvoke $r31.<org.springframework.expression.spel.support.ReflectivePropertyAccessor$InvokerPair: void <init>(java.lang.reflect.Member,org.springframework.core.convert.TypeDescriptor)>($r6, $r30);

        interfaceinvoke $r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r27, $r31);

        $r17 = r4.<org.springframework.expression.spel.support.ReflectivePropertyAccessor: java.util.Map typeDescriptorCache>;

        interfaceinvoke $r17.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r27, $r30);

     label07:
        return 1;

     label08:
        $r18 := @caughtexception;

        $r33 = new org.springframework.expression.AccessException;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unable to access property \'");

        $r21 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' through getter ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r33.<org.springframework.expression.AccessException: void <init>(java.lang.String,java.lang.Exception)>($r24, $r18);

        throw $r33;

     label09:
        $z4 = r0 instanceof java.lang.Class;

        $r7 = virtualinvoke r4.<org.springframework.expression.spel.support.ReflectivePropertyAccessor: java.lang.reflect.Field findField(java.lang.String,java.lang.Class,boolean)>(r3, r1, $z4);

        if $r7 == null goto label10;

        $r34 = new org.springframework.core.convert.TypeDescriptor;

        specialinvoke $r34.<org.springframework.core.convert.TypeDescriptor: void <init>(java.lang.reflect.Field)>($r7);

        $r10 = r4.<org.springframework.expression.spel.support.ReflectivePropertyAccessor: java.util.Map readerCache>;

        $r35 = new org.springframework.expression.spel.support.ReflectivePropertyAccessor$InvokerPair;

        specialinvoke $r35.<org.springframework.expression.spel.support.ReflectivePropertyAccessor$InvokerPair: void <init>(java.lang.reflect.Member,org.springframework.core.convert.TypeDescriptor)>($r7, $r34);

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r27, $r35);

        $r11 = r4.<org.springframework.expression.spel.support.ReflectivePropertyAccessor: java.util.Map typeDescriptorCache>;

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r27, $r34);

        return 1;

     label10:
        return 0;

        catch java.beans.IntrospectionException from label06 to label07 with label08;
    }

    public org.springframework.expression.TypedValue read(org.springframework.expression.EvaluationContext, java.lang.Object, java.lang.String) throws org.springframework.expression.AccessException
    {
        org.springframework.core.convert.support.PropertyTypeDescriptor $r71;
        org.springframework.expression.spel.support.ReflectivePropertyAccessor$CacheKey $r68;
        java.lang.Integer $r35;
        java.util.Map $r5, $r18, $r30;
        java.lang.reflect.Member $r20, $r32, $r61, $r63;
        java.lang.Exception $r40, $r45;
        java.beans.IntrospectionException $r51;
        java.beans.PropertyDescriptor $r69;
        java.lang.StringBuilder $r9, $r10, $r43, $r48, $r49, $r54, $r55, $r56, $r73, $r76, $r81, $r83;
        java.lang.Object[] $r22;
        java.lang.String r3, $r11, $r44, $r50, $r57;
        org.springframework.expression.TypedValue $r67, $r75, $r80;
        org.springframework.expression.spel.support.ReflectivePropertyAccessor$InvokerPair $r33, r60, $r72, $r79;
        java.lang.reflect.Field $r15, $r19, r64;
        org.springframework.expression.spel.support.ReflectivePropertyAccessor r4;
        org.springframework.core.MethodParameter $r70;
        java.lang.reflect.Method $r25, $r31, r62;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        org.springframework.expression.AccessException $r65, $r66, $r74, $r77, $r82, $r84;
        org.springframework.expression.EvaluationContext r58;
        org.springframework.core.convert.TypeDescriptor $r14, $r24, $r37, $r78;
        int $i0, $i2;
        java.lang.Object r0, $r6, $r13, $r23;
        java.lang.Class r1, $r36, $r59;

        r4 := @this: org.springframework.expression.spel.support.ReflectivePropertyAccessor;

        r58 := @parameter0: org.springframework.expression.EvaluationContext;

        r0 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.String;

        if r0 != null goto label01;

        $r65 = new org.springframework.expression.AccessException;

        specialinvoke $r65.<org.springframework.expression.AccessException: void <init>(java.lang.String)>("Cannot read property of null target");

        throw $r65;

     label01:
        $z0 = r0 instanceof java.lang.Class;

        if $z0 == 0 goto label02;

        $r59 = (java.lang.Class) r0;

        goto label03;

     label02:
        $r59 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

     label03:
        r1 = $r59;

        $z1 = virtualinvoke $r59.<java.lang.Class: boolean isArray()>();

        if $z1 == 0 goto label05;

        $z6 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("length");

        if $z6 == 0 goto label05;

        $z7 = r0 instanceof java.lang.Class;

        if $z7 == 0 goto label04;

        $r66 = new org.springframework.expression.AccessException;

        specialinvoke $r66.<org.springframework.expression.AccessException: void <init>(java.lang.String)>("Cannot access length on array class itself");

        throw $r66;

     label04:
        $r67 = new org.springframework.expression.TypedValue;

        $i0 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(r0);

        $r35 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r36 = <java.lang.Integer: java.lang.Class TYPE>;

        $r37 = staticinvoke <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor valueOf(java.lang.Class)>($r36);

        specialinvoke $r67.<org.springframework.expression.TypedValue: void <init>(java.lang.Object,org.springframework.core.convert.TypeDescriptor)>($r35, $r37);

        return $r67;

     label05:
        $r68 = new org.springframework.expression.spel.support.ReflectivePropertyAccessor$CacheKey;

        specialinvoke $r68.<org.springframework.expression.spel.support.ReflectivePropertyAccessor$CacheKey: void <init>(java.lang.Class,java.lang.String)>(r1, r3);

        $r5 = r4.<org.springframework.expression.spel.support.ReflectivePropertyAccessor: java.util.Map readerCache>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r68);

        $r33 = (org.springframework.expression.spel.support.ReflectivePropertyAccessor$InvokerPair) $r6;

        r60 = $r33;

        if $r33 == null goto label06;

        $r32 = $r33.<org.springframework.expression.spel.support.ReflectivePropertyAccessor$InvokerPair: java.lang.reflect.Member member>;

        $z5 = $r32 instanceof java.lang.reflect.Method;

        if $z5 == 0 goto label16;

     label06:
        if $r33 == null goto label07;

        $r61 = $r33.<org.springframework.expression.spel.support.ReflectivePropertyAccessor$InvokerPair: java.lang.reflect.Member member>;

        goto label08;

     label07:
        $r61 = null;

     label08:
        $r31 = (java.lang.reflect.Method) $r61;

        r62 = $r31;

        if $r31 != null goto label12;

        $z4 = r0 instanceof java.lang.Class;

        $r25 = virtualinvoke r4.<org.springframework.expression.spel.support.ReflectivePropertyAccessor: java.lang.reflect.Method findGetterForProperty(java.lang.String,java.lang.Class,boolean)>(r3, r1, $z4);

        r62 = $r25;

        if $r25 == null goto label12;

     label09:
        $r69 = new java.beans.PropertyDescriptor;

        specialinvoke $r69.<java.beans.PropertyDescriptor: void <init>(java.lang.String,java.lang.reflect.Method,java.lang.reflect.Method)>(r3, $r25, null);

        $r71 = new org.springframework.core.convert.support.PropertyTypeDescriptor;

        $r70 = new org.springframework.core.MethodParameter;

        $i2 = (int) -1;

        specialinvoke $r70.<org.springframework.core.MethodParameter: void <init>(java.lang.reflect.Method,int)>($r25, $i2);

        specialinvoke $r71.<org.springframework.core.convert.support.PropertyTypeDescriptor: void <init>(java.beans.PropertyDescriptor,org.springframework.core.MethodParameter)>($r69, $r70);

        $r72 = new org.springframework.expression.spel.support.ReflectivePropertyAccessor$InvokerPair;

        specialinvoke $r72.<org.springframework.expression.spel.support.ReflectivePropertyAccessor$InvokerPair: void <init>(java.lang.reflect.Member,org.springframework.core.convert.TypeDescriptor)>($r25, $r71);

        r60 = $r72;

        $r30 = r4.<org.springframework.expression.spel.support.ReflectivePropertyAccessor: java.util.Map readerCache>;

        interfaceinvoke $r30.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r68, $r72);

     label10:
        goto label12;

     label11:
        $r51 := @caughtexception;

        $r74 = new org.springframework.expression.AccessException;

        $r73 = new java.lang.StringBuilder;

        specialinvoke $r73.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unable to access property \'");

        $r54 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' through getter ");

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r25);

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r74.<org.springframework.expression.AccessException: void <init>(java.lang.String,java.lang.Exception)>($r57, $r51);

        throw $r74;

     label12:
        if r62 == null goto label16;

     label13:
        staticinvoke <org.springframework.util.ReflectionUtils: void makeAccessible(java.lang.reflect.Method)>(r62);

        $r75 = new org.springframework.expression.TypedValue;

        $r22 = newarray (java.lang.Object)[0];

        $r23 = virtualinvoke r62.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, $r22);

        $r24 = r60.<org.springframework.expression.spel.support.ReflectivePropertyAccessor$InvokerPair: org.springframework.core.convert.TypeDescriptor typeDescriptor>;

        specialinvoke $r75.<org.springframework.expression.TypedValue: void <init>(java.lang.Object,org.springframework.core.convert.TypeDescriptor)>($r23, $r24);

     label14:
        return $r75;

     label15:
        $r45 := @caughtexception;

        $r77 = new org.springframework.expression.AccessException;

        $r76 = new java.lang.StringBuilder;

        specialinvoke $r76.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unable to access property \'");

        $r48 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' through getter");

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r77.<org.springframework.expression.AccessException: void <init>(java.lang.String,java.lang.Exception)>($r50, $r45);

        throw $r77;

     label16:
        if r60 == null goto label17;

        $r20 = r60.<org.springframework.expression.spel.support.ReflectivePropertyAccessor$InvokerPair: java.lang.reflect.Member member>;

        $z3 = $r20 instanceof java.lang.reflect.Field;

        if $z3 == 0 goto label24;

     label17:
        if r60 != null goto label18;

        $r63 = null;

        goto label19;

     label18:
        $r63 = r60.<org.springframework.expression.spel.support.ReflectivePropertyAccessor$InvokerPair: java.lang.reflect.Member member>;

     label19:
        $r19 = (java.lang.reflect.Field) $r63;

        r64 = $r19;

        if $r19 != null goto label20;

        $z2 = r0 instanceof java.lang.Class;

        $r15 = virtualinvoke r4.<org.springframework.expression.spel.support.ReflectivePropertyAccessor: java.lang.reflect.Field findField(java.lang.String,java.lang.Class,boolean)>(r3, r1, $z2);

        r64 = $r15;

        if $r15 == null goto label20;

        $r79 = new org.springframework.expression.spel.support.ReflectivePropertyAccessor$InvokerPair;

        $r78 = new org.springframework.core.convert.TypeDescriptor;

        specialinvoke $r78.<org.springframework.core.convert.TypeDescriptor: void <init>(java.lang.reflect.Field)>($r15);

        specialinvoke $r79.<org.springframework.expression.spel.support.ReflectivePropertyAccessor$InvokerPair: void <init>(java.lang.reflect.Member,org.springframework.core.convert.TypeDescriptor)>($r15, $r78);

        r60 = $r79;

        $r18 = r4.<org.springframework.expression.spel.support.ReflectivePropertyAccessor: java.util.Map readerCache>;

        interfaceinvoke $r18.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r68, $r79);

     label20:
        if r64 == null goto label24;

     label21:
        staticinvoke <org.springframework.util.ReflectionUtils: void makeAccessible(java.lang.reflect.Field)>(r64);

        $r80 = new org.springframework.expression.TypedValue;

        $r13 = virtualinvoke r64.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r0);

        $r14 = r60.<org.springframework.expression.spel.support.ReflectivePropertyAccessor$InvokerPair: org.springframework.core.convert.TypeDescriptor typeDescriptor>;

        specialinvoke $r80.<org.springframework.expression.TypedValue: void <init>(java.lang.Object,org.springframework.core.convert.TypeDescriptor)>($r13, $r14);

     label22:
        return $r80;

     label23:
        $r40 := @caughtexception;

        $r82 = new org.springframework.expression.AccessException;

        $r81 = new java.lang.StringBuilder;

        specialinvoke $r81.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unable to access field: ");

        $r43 = virtualinvoke $r81.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r82.<org.springframework.expression.AccessException: void <init>(java.lang.String,java.lang.Exception)>($r44, $r40);

        throw $r82;

     label24:
        $r84 = new org.springframework.expression.AccessException;

        $r83 = new java.lang.StringBuilder;

        specialinvoke $r83.<java.lang.StringBuilder: void <init>(java.lang.String)>("Neither getter nor field found for property \'");

        $r9 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r84.<org.springframework.expression.AccessException: void <init>(java.lang.String)>($r11);

        throw $r84;

        catch java.beans.IntrospectionException from label09 to label10 with label11;
        catch java.lang.Exception from label13 to label14 with label15;
        catch java.lang.Exception from label21 to label22 with label23;
    }

    public boolean canWrite(org.springframework.expression.EvaluationContext, java.lang.Object, java.lang.String) throws org.springframework.expression.AccessException
    {
        org.springframework.expression.spel.support.ReflectivePropertyAccessor r3;
        org.springframework.core.convert.support.PropertyTypeDescriptor $r12;
        org.springframework.expression.spel.support.ReflectivePropertyAccessor$CacheKey $r1;
        org.springframework.core.convert.TypeDescriptor $r8;
        java.util.Map $r4, $r7, $r9, $r13, $r14;
        org.springframework.core.MethodParameter $r11;
        java.lang.String r2, $r21;
        java.lang.reflect.Method $r5;
        boolean $z0, $z1, $z2, $z3;
        java.lang.reflect.Field $r6;
        org.springframework.expression.AccessException $r16;
        java.beans.IntrospectionException $r15;
        org.springframework.expression.EvaluationContext r22;
        java.beans.PropertyDescriptor $r10;
        java.lang.Object r0;
        java.lang.StringBuilder $r17, $r18, $r19, $r20;
        java.lang.Class $r23;

        r3 := @this: org.springframework.expression.spel.support.ReflectivePropertyAccessor;

        r22 := @parameter0: org.springframework.expression.EvaluationContext;

        r0 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.String;

        if r0 != null goto label01;

        return 0;

     label01:
        $z0 = r0 instanceof java.lang.Class;

        if $z0 == 0 goto label02;

        $r23 = (java.lang.Class) r0;

        goto label03;

     label02:
        $r23 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

     label03:
        $r1 = new org.springframework.expression.spel.support.ReflectivePropertyAccessor$CacheKey;

        specialinvoke $r1.<org.springframework.expression.spel.support.ReflectivePropertyAccessor$CacheKey: void <init>(java.lang.Class,java.lang.String)>($r23, r2);

        $r4 = r3.<org.springframework.expression.spel.support.ReflectivePropertyAccessor: java.util.Map writerCache>;

        $z1 = interfaceinvoke $r4.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

        if $z1 == 0 goto label04;

        return 1;

     label04:
        $z2 = r0 instanceof java.lang.Class;

        $r5 = virtualinvoke r3.<org.springframework.expression.spel.support.ReflectivePropertyAccessor: java.lang.reflect.Method findSetterForProperty(java.lang.String,java.lang.Class,boolean)>(r2, $r23, $z2);

        if $r5 == null goto label09;

     label05:
        $r10 = new java.beans.PropertyDescriptor;

        specialinvoke $r10.<java.beans.PropertyDescriptor: void <init>(java.lang.String,java.lang.reflect.Method,java.lang.reflect.Method)>(r2, null, $r5);

     label06:
        goto label08;

     label07:
        $r15 := @caughtexception;

        $r16 = new org.springframework.expression.AccessException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unable to access property \'");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' through setter ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<org.springframework.expression.AccessException: void <init>(java.lang.String,java.lang.Exception)>($r21, $r15);

        throw $r16;

     label08:
        $r11 = new org.springframework.core.MethodParameter;

        specialinvoke $r11.<org.springframework.core.MethodParameter: void <init>(java.lang.reflect.Method,int)>($r5, 0);

        $r12 = new org.springframework.core.convert.support.PropertyTypeDescriptor;

        specialinvoke $r12.<org.springframework.core.convert.support.PropertyTypeDescriptor: void <init>(java.beans.PropertyDescriptor,org.springframework.core.MethodParameter)>($r10, $r11);

        $r13 = r3.<org.springframework.expression.spel.support.ReflectivePropertyAccessor: java.util.Map writerCache>;

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r5);

        $r14 = r3.<org.springframework.expression.spel.support.ReflectivePropertyAccessor: java.util.Map typeDescriptorCache>;

        interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r12);

        return 1;

     label09:
        $z3 = r0 instanceof java.lang.Class;

        $r6 = virtualinvoke r3.<org.springframework.expression.spel.support.ReflectivePropertyAccessor: java.lang.reflect.Field findField(java.lang.String,java.lang.Class,boolean)>(r2, $r23, $z3);

        if $r6 == null goto label10;

        $r7 = r3.<org.springframework.expression.spel.support.ReflectivePropertyAccessor: java.util.Map writerCache>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r6);

        $r9 = r3.<org.springframework.expression.spel.support.ReflectivePropertyAccessor: java.util.Map typeDescriptorCache>;

        $r8 = new org.springframework.core.convert.TypeDescriptor;

        specialinvoke $r8.<org.springframework.core.convert.TypeDescriptor: void <init>(java.lang.reflect.Field)>($r6);

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r8);

        return 1;

     label10:
        return 0;

        catch java.beans.IntrospectionException from label05 to label06 with label07;
    }

    public void write(org.springframework.expression.EvaluationContext, java.lang.Object, java.lang.String, java.lang.Object) throws org.springframework.expression.AccessException
    {
        org.springframework.expression.spel.support.ReflectivePropertyAccessor r3;
        org.springframework.expression.spel.support.ReflectivePropertyAccessor$CacheKey $r7;
        java.util.Map $r8, $r16, $r20;
        java.lang.reflect.Method $r19, $r21, r42;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.springframework.expression.TypeConverter $r22;
        java.lang.reflect.Member $r24, r41;
        org.springframework.expression.AccessException $r10, $r25, $r27, $r32, $r38;
        java.lang.Exception $r26, $r31;
        org.springframework.expression.EvaluationContext r4;
        java.lang.StringBuilder $r11, $r12, $r13, $r28, $r29, $r33, $r34, $r35;
        java.lang.Object[] $r18;
        org.springframework.expression.EvaluationException $r37;
        org.springframework.core.convert.TypeDescriptor $r6, $r23;
        java.lang.String r5, $r14, $r30, $r36;
        java.lang.reflect.Field $r15, $r17, r43;
        java.lang.Object r0, r2, $r9, r40;
        java.lang.Class r1, $r39;

        r3 := @this: org.springframework.expression.spel.support.ReflectivePropertyAccessor;

        r4 := @parameter0: org.springframework.expression.EvaluationContext;

        r0 := @parameter1: java.lang.Object;

        r5 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.Object;

        if r0 != null goto label01;

        $r25 = new org.springframework.expression.AccessException;

        specialinvoke $r25.<org.springframework.expression.AccessException: void <init>(java.lang.String)>("Cannot write property on null target");

        throw $r25;

     label01:
        $z0 = r0 instanceof java.lang.Class;

        if $z0 == 0 goto label02;

        $r39 = (java.lang.Class) r0;

        goto label03;

     label02:
        $r39 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

     label03:
        r1 = $r39;

        r40 = r2;

        $r6 = specialinvoke r3.<org.springframework.expression.spel.support.ReflectivePropertyAccessor: org.springframework.core.convert.TypeDescriptor getTypeDescriptor(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.String)>(r4, r0, r5);

        if $r6 == null goto label07;

     label04:
        $r22 = interfaceinvoke r4.<org.springframework.expression.EvaluationContext: org.springframework.expression.TypeConverter getTypeConverter()>();

        $r23 = staticinvoke <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor forObject(java.lang.Object)>(r2);

        r40 = interfaceinvoke $r22.<org.springframework.expression.TypeConverter: java.lang.Object convertValue(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>(r2, $r23, $r6);

     label05:
        goto label07;

     label06:
        $r37 := @caughtexception;

        $r38 = new org.springframework.expression.AccessException;

        specialinvoke $r38.<org.springframework.expression.AccessException: void <init>(java.lang.String,java.lang.Exception)>("Type conversion failure", $r37);

        throw $r38;

     label07:
        $r7 = new org.springframework.expression.spel.support.ReflectivePropertyAccessor$CacheKey;

        specialinvoke $r7.<org.springframework.expression.spel.support.ReflectivePropertyAccessor$CacheKey: void <init>(java.lang.Class,java.lang.String)>(r1, r5);

        $r8 = r3.<org.springframework.expression.spel.support.ReflectivePropertyAccessor: java.util.Map writerCache>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>($r7);

        $r24 = (java.lang.reflect.Member) $r9;

        r41 = $r24;

        if $r24 == null goto label08;

        $z4 = $r24 instanceof java.lang.reflect.Method;

        if $z4 == 0 goto label13;

     label08:
        $r21 = (java.lang.reflect.Method) $r24;

        r42 = $r21;

        if $r21 != null goto label09;

        $z3 = r0 instanceof java.lang.Class;

        $r19 = virtualinvoke r3.<org.springframework.expression.spel.support.ReflectivePropertyAccessor: java.lang.reflect.Method findSetterForProperty(java.lang.String,java.lang.Class,boolean)>(r5, r1, $z3);

        r42 = $r19;

        if $r19 == null goto label09;

        r41 = $r19;

        $r20 = r3.<org.springframework.expression.spel.support.ReflectivePropertyAccessor: java.util.Map writerCache>;

        interfaceinvoke $r20.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r19);

     label09:
        if r42 == null goto label13;

     label10:
        staticinvoke <org.springframework.util.ReflectionUtils: void makeAccessible(java.lang.reflect.Method)>(r42);

        $r18 = newarray (java.lang.Object)[1];

        $r18[0] = r40;

        virtualinvoke r42.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, $r18);

     label11:
        return;

     label12:
        $r31 := @caughtexception;

        $r32 = new org.springframework.expression.AccessException;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unable to access property \'");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' through setter");

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r32.<org.springframework.expression.AccessException: void <init>(java.lang.String,java.lang.Exception)>($r36, $r31);

        throw $r32;

     label13:
        if r41 == null goto label14;

        $z2 = r41 instanceof java.lang.reflect.Field;

        if $z2 == 0 goto label19;

     label14:
        $r17 = (java.lang.reflect.Field) r41;

        r43 = $r17;

        if $r17 != null goto label15;

        $z1 = r0 instanceof java.lang.Class;

        $r15 = virtualinvoke r3.<org.springframework.expression.spel.support.ReflectivePropertyAccessor: java.lang.reflect.Field findField(java.lang.String,java.lang.Class,boolean)>(r5, r1, $z1);

        r43 = $r15;

        if $r15 == null goto label15;

        $r16 = r3.<org.springframework.expression.spel.support.ReflectivePropertyAccessor: java.util.Map writerCache>;

        interfaceinvoke $r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r15);

     label15:
        if r43 == null goto label19;

     label16:
        staticinvoke <org.springframework.util.ReflectionUtils: void makeAccessible(java.lang.reflect.Field)>(r43);

        virtualinvoke r43.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(r0, r40);

     label17:
        return;

     label18:
        $r26 := @caughtexception;

        $r27 = new org.springframework.expression.AccessException;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unable to access field: ");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<org.springframework.expression.AccessException: void <init>(java.lang.String,java.lang.Exception)>($r30, $r26);

        throw $r27;

     label19:
        $r10 = new org.springframework.expression.AccessException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>("Neither setter nor field found for property \'");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<org.springframework.expression.AccessException: void <init>(java.lang.String)>($r14);

        throw $r10;

        catch org.springframework.expression.EvaluationException from label04 to label05 with label06;
        catch java.lang.Exception from label10 to label11 with label12;
        catch java.lang.Exception from label16 to label17 with label18;
    }

    private org.springframework.core.convert.TypeDescriptor getTypeDescriptor(org.springframework.expression.EvaluationContext, java.lang.Object, java.lang.String)
    {
        org.springframework.expression.spel.support.ReflectivePropertyAccessor r4;
        org.springframework.expression.spel.support.ReflectivePropertyAccessor$CacheKey $r2;
        org.springframework.core.convert.TypeDescriptor $r12, $r14, r17;
        java.util.Map $r5, $r8, $r10;
        java.lang.String r3;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.springframework.expression.AccessException $r15;
        org.springframework.expression.EvaluationContext r7;
        java.lang.Object r0, $r6, $r9, $r11;
        java.lang.Class r1, $r13, $r16;

        r4 := @this: org.springframework.expression.spel.support.ReflectivePropertyAccessor;

        r7 := @parameter0: org.springframework.expression.EvaluationContext;

        r0 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $z0 = r0 instanceof java.lang.Class;

        if $z0 == 0 goto label2;

        $r16 = (java.lang.Class) r0;

        goto label3;

     label2:
        $r16 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

     label3:
        r1 = $r16;

        $z1 = virtualinvoke $r16.<java.lang.Class: boolean isArray()>();

        if $z1 == 0 goto label4;

        $z4 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("length");

        if $z4 == 0 goto label4;

        $r13 = <java.lang.Integer: java.lang.Class TYPE>;

        $r14 = staticinvoke <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor valueOf(java.lang.Class)>($r13);

        return $r14;

     label4:
        $r2 = new org.springframework.expression.spel.support.ReflectivePropertyAccessor$CacheKey;

        specialinvoke $r2.<org.springframework.expression.spel.support.ReflectivePropertyAccessor$CacheKey: void <init>(java.lang.Class,java.lang.String)>(r1, r3);

        $r5 = r4.<org.springframework.expression.spel.support.ReflectivePropertyAccessor: java.util.Map typeDescriptorCache>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        $r12 = (org.springframework.core.convert.TypeDescriptor) $r6;

        r17 = $r12;

        if $r12 != null goto label9;

     label5:
        $z2 = virtualinvoke r4.<org.springframework.expression.spel.support.ReflectivePropertyAccessor: boolean canRead(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.String)>(r7, r0, r3);

        if $z2 == 0 goto label6;

        $r10 = r4.<org.springframework.expression.spel.support.ReflectivePropertyAccessor: java.util.Map typeDescriptorCache>;

        $r11 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        r17 = (org.springframework.core.convert.TypeDescriptor) $r11;

        goto label9;

     label6:
        $z3 = virtualinvoke r4.<org.springframework.expression.spel.support.ReflectivePropertyAccessor: boolean canWrite(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.String)>(r7, r0, r3);

        if $z3 == 0 goto label9;

        $r8 = r4.<org.springframework.expression.spel.support.ReflectivePropertyAccessor: java.util.Map typeDescriptorCache>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        r17 = (org.springframework.core.convert.TypeDescriptor) $r9;

     label7:
        goto label9;

     label8:
        $r15 := @caughtexception;

     label9:
        return r17;

        catch org.springframework.expression.AccessException from label5 to label7 with label8;
    }

    protected java.lang.reflect.Method findGetterForProperty(java.lang.String, java.lang.Class, boolean)
    {
        org.springframework.expression.spel.support.ReflectivePropertyAccessor r17;
        java.lang.reflect.Method[] $r1;
        java.lang.reflect.Method r18, r19;
        boolean $z0, z1, $z2, $z3, $z4, $z5;
        java.lang.StringBuilder $r2, $r5, $r9, $r11;
        int $i0, $i1, $i2, $i3, i4, i5, i6, i7;
        java.lang.String r3, $r4, $r6, $r7, $r10, $r12, $r13;
        java.lang.Class[] $r8, $r14;
        java.lang.Class r0, $r15, $r16;

        r17 := @this: org.springframework.expression.spel.support.ReflectivePropertyAccessor;

        r3 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.Class;

        z1 := @parameter2: boolean;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("get");

        $r4 = staticinvoke <org.springframework.util.StringUtils: java.lang.String capitalize(java.lang.String)>(r3);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        i4 = lengthof $r1;

        i5 = 0;

        goto label4;

     label1:
        r18 = $r1[i5];

        $r7 = virtualinvoke r18.<java.lang.reflect.Method: java.lang.String getName()>();

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label3;

        $r8 = virtualinvoke r18.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i0 = lengthof $r8;

        if $i0 != 0 goto label3;

        if z1 == 0 goto label2;

        $i1 = virtualinvoke r18.<java.lang.reflect.Method: int getModifiers()>();

        $z2 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i1);

        if $z2 == 0 goto label3;

     label2:
        return r18;

     label3:
        i5 = i5 + 1;

     label4:
        if i5 < i4 goto label1;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("is");

        $r10 = staticinvoke <org.springframework.util.StringUtils: java.lang.String capitalize(java.lang.String)>(r3);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        i6 = lengthof $r1;

        i7 = 0;

        goto label8;

     label5:
        r19 = $r1[i7];

        $r13 = virtualinvoke r19.<java.lang.reflect.Method: java.lang.String getName()>();

        $z3 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z3 == 0 goto label7;

        $r14 = virtualinvoke r19.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i2 = lengthof $r14;

        if $i2 != 0 goto label7;

        $r15 = <java.lang.Boolean: java.lang.Class TYPE>;

        $r16 = virtualinvoke r19.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $z4 = virtualinvoke $r15.<java.lang.Object: boolean equals(java.lang.Object)>($r16);

        if $z4 == 0 goto label7;

        if z1 == 0 goto label6;

        $i3 = virtualinvoke r19.<java.lang.reflect.Method: int getModifiers()>();

        $z5 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i3);

        if $z5 == 0 goto label7;

     label6:
        return r19;

     label7:
        i7 = i7 + 1;

     label8:
        if i7 < i6 goto label5;

        return null;
    }

    protected java.lang.reflect.Method findSetterForProperty(java.lang.String, java.lang.Class, boolean)
    {
        org.springframework.expression.spel.support.ReflectivePropertyAccessor r10;
        java.lang.reflect.Method[] $r1;
        int i0, $i1, $i2, i3;
        java.lang.String r3, $r4, $r6, $r8;
        java.lang.reflect.Method r7;
        boolean $z0, z1, $z2;
        java.lang.Class[] $r9;
        java.lang.Class r0;
        java.lang.StringBuilder $r2, $r5;

        r10 := @this: org.springframework.expression.spel.support.ReflectivePropertyAccessor;

        r3 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.Class;

        z1 := @parameter2: boolean;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("set");

        $r4 = staticinvoke <org.springframework.util.StringUtils: java.lang.String capitalize(java.lang.String)>(r3);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        i0 = lengthof $r1;

        i3 = 0;

        goto label4;

     label1:
        r7 = $r1[i3];

        $r8 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.String getName()>();

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label3;

        $r9 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i1 = lengthof $r9;

        if $i1 != 1 goto label3;

        if z1 == 0 goto label2;

        $i2 = virtualinvoke r7.<java.lang.reflect.Method: int getModifiers()>();

        $z2 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i2);

        if $z2 == 0 goto label3;

     label2:
        return r7;

     label3:
        i3 = i3 + 1;

     label4:
        if i3 < i0 goto label1;

        return null;
    }

    protected java.lang.reflect.Field findField(java.lang.String, java.lang.Class, boolean)
    {
        org.springframework.expression.spel.support.ReflectivePropertyAccessor r5;
        java.lang.reflect.Field r2;
        java.lang.reflect.Field[] $r1;
        int i0, $i1, i2;
        java.lang.Class r0;
        java.lang.String $r3, r4;
        boolean $z0, z1, $z2;

        r5 := @this: org.springframework.expression.spel.support.ReflectivePropertyAccessor;

        r4 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.Class;

        z1 := @parameter2: boolean;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Field[] getFields()>();

        i0 = lengthof $r1;

        i2 = 0;

        goto label4;

     label1:
        r2 = $r1[i2];

        $r3 = virtualinvoke r2.<java.lang.reflect.Field: java.lang.String getName()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z0 == 0 goto label3;

        if z1 == 0 goto label2;

        $i1 = virtualinvoke r2.<java.lang.reflect.Field: int getModifiers()>();

        $z2 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i1);

        if $z2 == 0 goto label3;

     label2:
        return r2;

     label3:
        i2 = i2 + 1;

     label4:
        if i2 < i0 goto label1;

        return null;
    }

    public org.springframework.expression.PropertyAccessor createOptimalAccessor(org.springframework.expression.EvaluationContext, java.lang.Object, java.lang.String)
    {
        org.springframework.expression.spel.support.ReflectivePropertyAccessor r4;
        org.springframework.expression.spel.support.ReflectivePropertyAccessor$CacheKey $r29;
        java.util.Map $r5, $r11, $r19;
        org.springframework.core.MethodParameter $r30;
        java.lang.reflect.Method $r15, $r20, r26;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.reflect.Member $r13, $r21, $r25, $r27;
        org.springframework.expression.EvaluationContext r22;
        org.springframework.core.convert.TypeDescriptor $r31, $r34;
        int $i1;
        java.lang.String r3;
        org.springframework.expression.spel.support.ReflectivePropertyAccessor$InvokerPair r24, $r32, $r35;
        java.lang.reflect.Field $r8, $r12, r28;
        org.springframework.expression.spel.support.ReflectivePropertyAccessor$OptimalPropertyAccessor $r33, $r36;
        java.lang.Object r0, $r6;
        java.lang.Class r1, $r23;

        r4 := @this: org.springframework.expression.spel.support.ReflectivePropertyAccessor;

        r22 := @parameter0: org.springframework.expression.EvaluationContext;

        r0 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.String;

        if r0 != null goto label01;

        return r4;

     label01:
        $z0 = r0 instanceof java.lang.Class;

        if $z0 == 0 goto label02;

        $r23 = (java.lang.Class) r0;

        goto label03;

     label02:
        $r23 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

     label03:
        r1 = $r23;

        $z1 = virtualinvoke $r23.<java.lang.Class: boolean isArray()>();

        if $z1 == 0 goto label04;

        return r4;

     label04:
        $r29 = new org.springframework.expression.spel.support.ReflectivePropertyAccessor$CacheKey;

        specialinvoke $r29.<org.springframework.expression.spel.support.ReflectivePropertyAccessor$CacheKey: void <init>(java.lang.Class,java.lang.String)>($r23, r3);

        $r5 = r4.<org.springframework.expression.spel.support.ReflectivePropertyAccessor: java.util.Map readerCache>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r29);

        r24 = (org.springframework.expression.spel.support.ReflectivePropertyAccessor$InvokerPair) $r6;

        if r24 == null goto label05;

        $r21 = r24.<org.springframework.expression.spel.support.ReflectivePropertyAccessor$InvokerPair: java.lang.reflect.Member member>;

        $z5 = $r21 instanceof java.lang.reflect.Method;

        if $z5 == 0 goto label09;

     label05:
        if r24 != null goto label06;

        $r25 = null;

        goto label07;

     label06:
        $r25 = r24.<org.springframework.expression.spel.support.ReflectivePropertyAccessor$InvokerPair: java.lang.reflect.Member member>;

     label07:
        $r20 = (java.lang.reflect.Method) $r25;

        r26 = $r20;

        if $r20 != null goto label08;

        $z4 = r0 instanceof java.lang.Class;

        $r15 = virtualinvoke r4.<org.springframework.expression.spel.support.ReflectivePropertyAccessor: java.lang.reflect.Method findGetterForProperty(java.lang.String,java.lang.Class,boolean)>(r3, r1, $z4);

        r26 = $r15;

        if $r15 == null goto label08;

        $r32 = new org.springframework.expression.spel.support.ReflectivePropertyAccessor$InvokerPair;

        $r31 = new org.springframework.core.convert.TypeDescriptor;

        $r30 = new org.springframework.core.MethodParameter;

        $i1 = (int) -1;

        specialinvoke $r30.<org.springframework.core.MethodParameter: void <init>(java.lang.reflect.Method,int)>($r15, $i1);

        specialinvoke $r31.<org.springframework.core.convert.TypeDescriptor: void <init>(org.springframework.core.MethodParameter)>($r30);

        specialinvoke $r32.<org.springframework.expression.spel.support.ReflectivePropertyAccessor$InvokerPair: void <init>(java.lang.reflect.Member,org.springframework.core.convert.TypeDescriptor)>($r15, $r31);

        r24 = $r32;

        staticinvoke <org.springframework.util.ReflectionUtils: void makeAccessible(java.lang.reflect.Method)>($r15);

        $r19 = r4.<org.springframework.expression.spel.support.ReflectivePropertyAccessor: java.util.Map readerCache>;

        interfaceinvoke $r19.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r29, $r32);

     label08:
        if r26 == null goto label09;

        $r33 = new org.springframework.expression.spel.support.ReflectivePropertyAccessor$OptimalPropertyAccessor;

        specialinvoke $r33.<org.springframework.expression.spel.support.ReflectivePropertyAccessor$OptimalPropertyAccessor: void <init>(org.springframework.expression.spel.support.ReflectivePropertyAccessor$InvokerPair)>(r24);

        return $r33;

     label09:
        if r24 == null goto label10;

        $r13 = r24.<org.springframework.expression.spel.support.ReflectivePropertyAccessor$InvokerPair: java.lang.reflect.Member member>;

        $z3 = $r13 instanceof java.lang.reflect.Field;

        if $z3 == 0 goto label14;

     label10:
        if r24 != null goto label11;

        $r27 = null;

        goto label12;

     label11:
        $r27 = r24.<org.springframework.expression.spel.support.ReflectivePropertyAccessor$InvokerPair: java.lang.reflect.Member member>;

     label12:
        $r12 = (java.lang.reflect.Field) $r27;

        r28 = $r12;

        if $r12 != null goto label13;

        $z2 = r0 instanceof java.lang.Class;

        $r8 = virtualinvoke r4.<org.springframework.expression.spel.support.ReflectivePropertyAccessor: java.lang.reflect.Field findField(java.lang.String,java.lang.Class,boolean)>(r3, r1, $z2);

        r28 = $r8;

        if $r8 == null goto label13;

        $r35 = new org.springframework.expression.spel.support.ReflectivePropertyAccessor$InvokerPair;

        $r34 = new org.springframework.core.convert.TypeDescriptor;

        specialinvoke $r34.<org.springframework.core.convert.TypeDescriptor: void <init>(java.lang.reflect.Field)>($r8);

        specialinvoke $r35.<org.springframework.expression.spel.support.ReflectivePropertyAccessor$InvokerPair: void <init>(java.lang.reflect.Member,org.springframework.core.convert.TypeDescriptor)>($r8, $r34);

        r24 = $r35;

        staticinvoke <org.springframework.util.ReflectionUtils: void makeAccessible(java.lang.reflect.Field)>($r8);

        $r11 = r4.<org.springframework.expression.spel.support.ReflectivePropertyAccessor: java.util.Map readerCache>;

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r29, $r35);

     label13:
        if r28 == null goto label14;

        $r36 = new org.springframework.expression.spel.support.ReflectivePropertyAccessor$OptimalPropertyAccessor;

        specialinvoke $r36.<org.springframework.expression.spel.support.ReflectivePropertyAccessor$OptimalPropertyAccessor: void <init>(org.springframework.expression.spel.support.ReflectivePropertyAccessor$InvokerPair)>(r24);

        return $r36;

     label14:
        return r4;
    }
}
