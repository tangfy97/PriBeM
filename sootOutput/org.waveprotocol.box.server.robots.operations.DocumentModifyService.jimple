public class org.waveprotocol.box.server.robots.operations.DocumentModifyService extends java.lang.Object implements org.waveprotocol.box.server.robots.operations.OperationService
{

    public void <init>()
    {
        org.waveprotocol.box.server.robots.operations.DocumentModifyService r0;

        r0 := @this: org.waveprotocol.box.server.robots.operations.DocumentModifyService;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void execute(com.google.wave.api.OperationRequest, org.waveprotocol.box.server.robots.OperationContext, org.waveprotocol.wave.model.wave.ParticipantId) throws com.google.wave.api.InvalidRequestException
    {
        com.google.wave.api.OperationRequest r0;
        org.waveprotocol.wave.model.wave.ParticipantId r8;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet $r9;
        org.waveprotocol.wave.model.conversation.ObservableConversation $r11;
        org.waveprotocol.wave.model.conversation.ConversationBlip $r12;
        com.google.wave.api.data.ApiView $r14;
        int[] $r17;
        int $i0, $i1;
        org.waveprotocol.wave.model.conversation.ObservableConversationView $r10;
        java.lang.String r3, $r24;
        com.google.wave.api.JsonRpcConstant$ParamsProperty $r1, $r4;
        java.lang.UnsupportedOperationException $r19;
        org.waveprotocol.box.server.robots.OperationContext r7;
        org.waveprotocol.wave.model.document.Document $r13;
        org.waveprotocol.box.server.robots.operations.DocumentModifyService r15;
        com.google.wave.api.impl.DocumentModifyAction r6;
        java.lang.Object $r2, $r5;
        java.lang.StringBuilder $r20, $r21, $r23;
        com.google.wave.api.impl.DocumentModifyAction$ModifyHow $r18, $r22;
        com.google.wave.api.data.DocumentHitIterator $r16;

        r15 := @this: org.waveprotocol.box.server.robots.operations.DocumentModifyService;

        r0 := @parameter0: com.google.wave.api.OperationRequest;

        r7 := @parameter1: org.waveprotocol.box.server.robots.OperationContext;

        r8 := @parameter2: org.waveprotocol.wave.model.wave.ParticipantId;

        $r1 = <com.google.wave.api.JsonRpcConstant$ParamsProperty: com.google.wave.api.JsonRpcConstant$ParamsProperty BLIP_ID>;

        $r2 = staticinvoke <org.waveprotocol.box.server.robots.util.OperationUtil: java.lang.Object getRequiredParameter(com.google.wave.api.OperationRequest,com.google.wave.api.JsonRpcConstant$ParamsProperty)>(r0, $r1);

        r3 = (java.lang.String) $r2;

        $r4 = <com.google.wave.api.JsonRpcConstant$ParamsProperty: com.google.wave.api.JsonRpcConstant$ParamsProperty MODIFY_ACTION>;

        $r5 = staticinvoke <org.waveprotocol.box.server.robots.util.OperationUtil: java.lang.Object getRequiredParameter(com.google.wave.api.OperationRequest,com.google.wave.api.JsonRpcConstant$ParamsProperty)>(r0, $r4);

        r6 = (com.google.wave.api.impl.DocumentModifyAction) $r5;

        $r9 = interfaceinvoke r7.<org.waveprotocol.box.server.robots.OperationContext: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet openWavelet(com.google.wave.api.OperationRequest,org.waveprotocol.wave.model.wave.ParticipantId)>(r0, r8);

        $r10 = interfaceinvoke r7.<org.waveprotocol.box.server.robots.OperationContext: org.waveprotocol.wave.model.conversation.ObservableConversationView openConversation(com.google.wave.api.OperationRequest,org.waveprotocol.wave.model.wave.ParticipantId)>(r0, r8);

        $r11 = interfaceinvoke $r10.<org.waveprotocol.wave.model.conversation.ObservableConversationView: org.waveprotocol.wave.model.conversation.ObservableConversation getRoot()>();

        $r12 = interfaceinvoke r7.<org.waveprotocol.box.server.robots.OperationContext: org.waveprotocol.wave.model.conversation.ConversationBlip getBlip(org.waveprotocol.wave.model.conversation.Conversation,java.lang.String)>($r11, r3);

        $r13 = interfaceinvoke $r12.<org.waveprotocol.wave.model.conversation.ConversationBlip: org.waveprotocol.wave.model.document.Document getContent()>();

        $r14 = new com.google.wave.api.data.ApiView;

        specialinvoke $r14.<com.google.wave.api.data.ApiView: void <init>(org.waveprotocol.wave.model.document.Document,org.waveprotocol.wave.model.wave.Wavelet)>($r13, $r9);

        $r16 = specialinvoke r15.<org.waveprotocol.box.server.robots.operations.DocumentModifyService: com.google.wave.api.data.DocumentHitIterator getDocumentHitIterator(com.google.wave.api.OperationRequest,com.google.wave.api.data.ApiView)>(r0, $r14);

        $r17 = <org.waveprotocol.box.server.robots.operations.DocumentModifyService$1: int[] $SwitchMap$com$google$wave$api$impl$DocumentModifyAction$ModifyHow>;

        $r18 = virtualinvoke r6.<com.google.wave.api.impl.DocumentModifyAction: com.google.wave.api.impl.DocumentModifyAction$ModifyHow getModifyHow()>();

        $i0 = virtualinvoke $r18.<com.google.wave.api.impl.DocumentModifyAction$ModifyHow: int ordinal()>();

        $i1 = $r17[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            case 5: goto label5;
            case 6: goto label6;
            case 7: goto label7;
            default: goto label8;
        };

     label1:
        specialinvoke r15.<org.waveprotocol.box.server.robots.operations.DocumentModifyService: void annotate(com.google.wave.api.OperationRequest,org.waveprotocol.wave.model.document.Document,com.google.wave.api.data.ApiView,com.google.wave.api.data.DocumentHitIterator,com.google.wave.api.impl.DocumentModifyAction)>(r0, $r13, $r14, $r16, r6);

        goto label9;

     label2:
        specialinvoke r15.<org.waveprotocol.box.server.robots.operations.DocumentModifyService: void clearAnnotation(com.google.wave.api.OperationRequest,org.waveprotocol.wave.model.document.Document,com.google.wave.api.data.ApiView,com.google.wave.api.data.DocumentHitIterator,com.google.wave.api.impl.DocumentModifyAction)>(r0, $r13, $r14, $r16, r6);

        goto label9;

     label3:
        specialinvoke r15.<org.waveprotocol.box.server.robots.operations.DocumentModifyService: void delete(com.google.wave.api.OperationRequest,com.google.wave.api.data.ApiView,com.google.wave.api.data.DocumentHitIterator)>(r0, $r14, $r16);

        goto label9;

     label4:
        specialinvoke r15.<org.waveprotocol.box.server.robots.operations.DocumentModifyService: void insert(com.google.wave.api.OperationRequest,org.waveprotocol.wave.model.document.Document,com.google.wave.api.data.ApiView,com.google.wave.api.data.DocumentHitIterator,com.google.wave.api.impl.DocumentModifyAction)>(r0, $r13, $r14, $r16, r6);

        goto label9;

     label5:
        specialinvoke r15.<org.waveprotocol.box.server.robots.operations.DocumentModifyService: void insertAfter(com.google.wave.api.OperationRequest,org.waveprotocol.wave.model.document.Document,com.google.wave.api.data.ApiView,com.google.wave.api.data.DocumentHitIterator,com.google.wave.api.impl.DocumentModifyAction)>(r0, $r13, $r14, $r16, r6);

        goto label9;

     label6:
        specialinvoke r15.<org.waveprotocol.box.server.robots.operations.DocumentModifyService: void replace(com.google.wave.api.OperationRequest,org.waveprotocol.wave.model.document.Document,com.google.wave.api.data.ApiView,com.google.wave.api.data.DocumentHitIterator,com.google.wave.api.impl.DocumentModifyAction)>(r0, $r13, $r14, $r16, r6);

        goto label9;

     label7:
        specialinvoke r15.<org.waveprotocol.box.server.robots.operations.DocumentModifyService: void updateElement(com.google.wave.api.OperationRequest,org.waveprotocol.wave.model.document.Document,com.google.wave.api.data.ApiView,com.google.wave.api.data.DocumentHitIterator,com.google.wave.api.impl.DocumentModifyAction)>(r0, $r13, $r14, $r16, r6);

        goto label9;

     label8:
        $r19 = new java.lang.UnsupportedOperationException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported ModifyHow ");

        $r22 = virtualinvoke r6.<com.google.wave.api.impl.DocumentModifyAction: com.google.wave.api.impl.DocumentModifyAction$ModifyHow getModifyHow()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r24);

        throw $r19;

     label9:
        return;
    }

    private com.google.wave.api.data.DocumentHitIterator getDocumentHitIterator(com.google.wave.api.OperationRequest, com.google.wave.api.data.ApiView) throws com.google.wave.api.InvalidRequestException
    {
        com.google.wave.api.OperationRequest r0;
        java.lang.Integer r6;
        com.google.wave.api.data.ApiView r12;
        com.google.wave.api.data.DocumentHitIterator$ElementMatcher $r14;
        java.util.Map $r16;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.String $r13;
        com.google.wave.api.InvalidRequestException $r19, $r20;
        com.google.wave.api.JsonRpcConstant$ParamsProperty $r1, $r4, $r7;
        com.google.wave.api.impl.DocumentModifyQuery r9;
        com.google.wave.api.ElementType $r15;
        org.waveprotocol.box.server.robots.operations.DocumentModifyService r22;
        com.google.wave.api.data.DocumentHitIterator$Singleshot $r10, $r17, $r21;
        com.google.wave.api.Range r3, $r11, $r18;
        java.lang.Object $r2, $r5, $r8;
        com.google.wave.api.data.DocumentHitIterator r23;

        r22 := @this: org.waveprotocol.box.server.robots.operations.DocumentModifyService;

        r0 := @parameter0: com.google.wave.api.OperationRequest;

        r12 := @parameter1: com.google.wave.api.data.ApiView;

        $r1 = <com.google.wave.api.JsonRpcConstant$ParamsProperty: com.google.wave.api.JsonRpcConstant$ParamsProperty RANGE>;

        $r2 = staticinvoke <org.waveprotocol.box.server.robots.util.OperationUtil: java.lang.Object getOptionalParameter(com.google.wave.api.OperationRequest,com.google.wave.api.JsonRpcConstant$ParamsProperty)>(r0, $r1);

        r3 = (com.google.wave.api.Range) $r2;

        $r4 = <com.google.wave.api.JsonRpcConstant$ParamsProperty: com.google.wave.api.JsonRpcConstant$ParamsProperty INDEX>;

        $r5 = staticinvoke <org.waveprotocol.box.server.robots.util.OperationUtil: java.lang.Object getOptionalParameter(com.google.wave.api.OperationRequest,com.google.wave.api.JsonRpcConstant$ParamsProperty)>(r0, $r4);

        r6 = (java.lang.Integer) $r5;

        $r7 = <com.google.wave.api.JsonRpcConstant$ParamsProperty: com.google.wave.api.JsonRpcConstant$ParamsProperty MODIFY_QUERY>;

        $r8 = staticinvoke <org.waveprotocol.box.server.robots.util.OperationUtil: java.lang.Object getOptionalParameter(com.google.wave.api.OperationRequest,com.google.wave.api.JsonRpcConstant$ParamsProperty)>(r0, $r7);

        r9 = (com.google.wave.api.impl.DocumentModifyQuery) $r8;

        if r3 == null goto label3;

        if r6 != null goto label1;

        if r9 == null goto label2;

     label1:
        $r20 = new com.google.wave.api.InvalidRequestException;

        specialinvoke $r20.<com.google.wave.api.InvalidRequestException: void <init>(java.lang.String,com.google.wave.api.OperationRequest)>("At most one parameter out of RANGE, INDEX and MODIFY_QUERY must be specified", r0);

        throw $r20;

     label2:
        $r21 = new com.google.wave.api.data.DocumentHitIterator$Singleshot;

        specialinvoke $r21.<com.google.wave.api.data.DocumentHitIterator$Singleshot: void <init>(com.google.wave.api.Range)>(r3);

        r23 = $r21;

        goto label7;

     label3:
        if r6 == null goto label5;

        if r9 == null goto label4;

        $r19 = new com.google.wave.api.InvalidRequestException;

        specialinvoke $r19.<com.google.wave.api.InvalidRequestException: void <init>(java.lang.String,com.google.wave.api.OperationRequest)>("At most one parameter out of RANGE, INDEX and MODIFY_QUERY must be specified", r0);

        throw $r19;

     label4:
        $r17 = new com.google.wave.api.data.DocumentHitIterator$Singleshot;

        $r18 = new com.google.wave.api.Range;

        $i2 = virtualinvoke r6.<java.lang.Integer: int intValue()>();

        $i3 = virtualinvoke r6.<java.lang.Integer: int intValue()>();

        $i4 = $i3 + 1;

        specialinvoke $r18.<com.google.wave.api.Range: void <init>(int,int)>($i2, $i4);

        specialinvoke $r17.<com.google.wave.api.data.DocumentHitIterator$Singleshot: void <init>(com.google.wave.api.Range)>($r18);

        r23 = $r17;

        goto label7;

     label5:
        if r9 == null goto label6;

        $r14 = new com.google.wave.api.data.DocumentHitIterator$ElementMatcher;

        $r15 = virtualinvoke r9.<com.google.wave.api.impl.DocumentModifyQuery: com.google.wave.api.ElementType getElementMatch()>();

        $r16 = virtualinvoke r9.<com.google.wave.api.impl.DocumentModifyQuery: java.util.Map getRestrictions()>();

        $i1 = virtualinvoke r9.<com.google.wave.api.impl.DocumentModifyQuery: int getMaxRes()>();

        specialinvoke $r14.<com.google.wave.api.data.DocumentHitIterator$ElementMatcher: void <init>(com.google.wave.api.data.ApiView,com.google.wave.api.ElementType,java.util.Map,int)>(r12, $r15, $r16, $i1);

        r23 = $r14;

        goto label7;

     label6:
        $r10 = new com.google.wave.api.data.DocumentHitIterator$Singleshot;

        $r11 = new com.google.wave.api.Range;

        $r13 = virtualinvoke r12.<com.google.wave.api.data.ApiView: java.lang.String apiContents()>();

        $i0 = virtualinvoke $r13.<java.lang.String: int length()>();

        specialinvoke $r11.<com.google.wave.api.Range: void <init>(int,int)>(0, $i0);

        specialinvoke $r10.<com.google.wave.api.data.DocumentHitIterator$Singleshot: void <init>(com.google.wave.api.Range)>($r11);

        r23 = $r10;

     label7:
        return r23;
    }

    private void annotate(com.google.wave.api.OperationRequest, org.waveprotocol.wave.model.document.Document, com.google.wave.api.data.ApiView, com.google.wave.api.data.DocumentHitIterator, com.google.wave.api.impl.DocumentModifyAction) throws com.google.wave.api.InvalidRequestException
    {
        com.google.wave.api.OperationRequest r7;
        com.google.wave.api.data.ApiView r5;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.String $r3, $r9;
        boolean $z0;
        org.waveprotocol.wave.model.document.Document r8;
        org.waveprotocol.box.server.robots.operations.DocumentModifyService r6;
        com.google.wave.api.Range r10;
        com.google.wave.api.impl.DocumentModifyAction r0;
        com.google.wave.api.impl.DocumentModifyAction$ModifyHow $r1, $r2;
        com.google.wave.api.data.DocumentHitIterator r4;

        r6 := @this: org.waveprotocol.box.server.robots.operations.DocumentModifyService;

        r7 := @parameter0: com.google.wave.api.OperationRequest;

        r8 := @parameter1: org.waveprotocol.wave.model.document.Document;

        r5 := @parameter2: com.google.wave.api.data.ApiView;

        r4 := @parameter3: com.google.wave.api.data.DocumentHitIterator;

        r0 := @parameter4: com.google.wave.api.impl.DocumentModifyAction;

        $r1 = virtualinvoke r0.<com.google.wave.api.impl.DocumentModifyAction: com.google.wave.api.impl.DocumentModifyAction$ModifyHow getModifyHow()>();

        $r2 = <com.google.wave.api.impl.DocumentModifyAction$ModifyHow: com.google.wave.api.impl.DocumentModifyAction$ModifyHow ANNOTATE>;

        if $r1 != $r2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "This method only supports ANNOTATE");

        $r3 = virtualinvoke r0.<com.google.wave.api.impl.DocumentModifyAction: java.lang.String getAnnotationKey()>();

        i4 = 0;

        r10 = interfaceinvoke r4.<com.google.wave.api.data.DocumentHitIterator: com.google.wave.api.Range next()>();

     label3:
        if r10 == null goto label4;

        $i0 = virtualinvoke r10.<com.google.wave.api.Range: int getStart()>();

        $i1 = virtualinvoke r5.<com.google.wave.api.data.ApiView: int transformToXmlOffset(int)>($i0);

        $i2 = virtualinvoke r10.<com.google.wave.api.Range: int getEnd()>();

        $i3 = virtualinvoke r5.<com.google.wave.api.data.ApiView: int transformToXmlOffset(int)>($i2);

        $r9 = virtualinvoke r0.<com.google.wave.api.impl.DocumentModifyAction: java.lang.String getValue(int)>(i4);

        specialinvoke r6.<org.waveprotocol.box.server.robots.operations.DocumentModifyService: void setDocumentAnnotation(com.google.wave.api.OperationRequest,org.waveprotocol.wave.model.document.Document,int,int,java.lang.String,java.lang.String)>(r7, r8, $i1, $i3, $r3, $r9);

        i4 = i4 + 1;

        r10 = interfaceinvoke r4.<com.google.wave.api.data.DocumentHitIterator: com.google.wave.api.Range next()>();

        goto label3;

     label4:
        return;
    }

    private void clearAnnotation(com.google.wave.api.OperationRequest, org.waveprotocol.wave.model.document.Document, com.google.wave.api.data.ApiView, com.google.wave.api.data.DocumentHitIterator, com.google.wave.api.impl.DocumentModifyAction) throws com.google.wave.api.InvalidRequestException
    {
        com.google.wave.api.OperationRequest r7;
        org.waveprotocol.wave.model.document.Document r8;
        org.waveprotocol.box.server.robots.operations.DocumentModifyService r6;
        com.google.wave.api.data.ApiView r5;
        com.google.wave.api.Range r9;
        com.google.wave.api.impl.DocumentModifyAction r0;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r3;
        com.google.wave.api.impl.DocumentModifyAction$ModifyHow $r1, $r2;
        com.google.wave.api.data.DocumentHitIterator r4;
        boolean $z0;

        r6 := @this: org.waveprotocol.box.server.robots.operations.DocumentModifyService;

        r7 := @parameter0: com.google.wave.api.OperationRequest;

        r8 := @parameter1: org.waveprotocol.wave.model.document.Document;

        r5 := @parameter2: com.google.wave.api.data.ApiView;

        r4 := @parameter3: com.google.wave.api.data.DocumentHitIterator;

        r0 := @parameter4: com.google.wave.api.impl.DocumentModifyAction;

        $r1 = virtualinvoke r0.<com.google.wave.api.impl.DocumentModifyAction: com.google.wave.api.impl.DocumentModifyAction$ModifyHow getModifyHow()>();

        $r2 = <com.google.wave.api.impl.DocumentModifyAction$ModifyHow: com.google.wave.api.impl.DocumentModifyAction$ModifyHow CLEAR_ANNOTATION>;

        if $r1 != $r2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "This method only supports CLEAR_ANNOTATION");

        $r3 = virtualinvoke r0.<com.google.wave.api.impl.DocumentModifyAction: java.lang.String getAnnotationKey()>();

        r9 = interfaceinvoke r4.<com.google.wave.api.data.DocumentHitIterator: com.google.wave.api.Range next()>();

     label3:
        if r9 == null goto label4;

        $i0 = virtualinvoke r9.<com.google.wave.api.Range: int getStart()>();

        $i1 = virtualinvoke r5.<com.google.wave.api.data.ApiView: int transformToXmlOffset(int)>($i0);

        $i2 = virtualinvoke r9.<com.google.wave.api.Range: int getEnd()>();

        $i3 = virtualinvoke r5.<com.google.wave.api.data.ApiView: int transformToXmlOffset(int)>($i2);

        specialinvoke r6.<org.waveprotocol.box.server.robots.operations.DocumentModifyService: void setDocumentAnnotation(com.google.wave.api.OperationRequest,org.waveprotocol.wave.model.document.Document,int,int,java.lang.String,java.lang.String)>(r7, r8, $i1, $i3, $r3, null);

        r9 = interfaceinvoke r4.<com.google.wave.api.data.DocumentHitIterator: com.google.wave.api.Range next()>();

        goto label3;

     label4:
        return;
    }

    private void setDocumentAnnotation(com.google.wave.api.OperationRequest, org.waveprotocol.wave.model.document.Document, int, int, java.lang.String, java.lang.String) throws com.google.wave.api.InvalidRequestException
    {
        java.lang.IndexOutOfBoundsException $r3;
        com.google.wave.api.OperationRequest r10;
        org.waveprotocol.wave.model.document.Document r0;
        org.waveprotocol.box.server.robots.operations.DocumentModifyService r11;
        int i0, i1;
        java.lang.StringBuilder $r5, $r6, $r8;
        java.lang.String r1, r2, $r7, $r9;
        com.google.wave.api.InvalidRequestException $r4;

        r11 := @this: org.waveprotocol.box.server.robots.operations.DocumentModifyService;

        r10 := @parameter0: com.google.wave.api.OperationRequest;

        r0 := @parameter1: org.waveprotocol.wave.model.document.Document;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r1 := @parameter4: java.lang.String;

        r2 := @parameter5: java.lang.String;

     label1:
        interfaceinvoke r0.<org.waveprotocol.wave.model.document.Document: void setAnnotation(int,int,java.lang.String,java.lang.Object)>(i0, i1, r1, r2);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new com.google.wave.api.InvalidRequestException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t set annotation for out of bounds indices ");

        $r7 = virtualinvoke $r3.<java.lang.IndexOutOfBoundsException: java.lang.String getMessage()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<com.google.wave.api.InvalidRequestException: void <init>(java.lang.String,com.google.wave.api.OperationRequest,java.lang.Exception)>($r9, r10, $r3);

        throw $r4;

     label4:
        return;

        catch java.lang.IndexOutOfBoundsException from label1 to label2 with label3;
    }

    private void delete(com.google.wave.api.OperationRequest, com.google.wave.api.data.ApiView, com.google.wave.api.data.DocumentHitIterator) throws com.google.wave.api.InvalidRequestException
    {
        com.google.wave.api.OperationRequest r9;
        com.google.wave.api.data.ApiView r1;
        int $i0, $i1, $i2, i3;
        java.lang.String $r8;
        com.google.wave.api.InvalidRequestException $r2;
        org.waveprotocol.box.server.robots.operations.DocumentModifyService r10;
        com.google.wave.api.Range r11;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7;
        com.google.wave.api.data.DocumentHitIterator r0;

        r10 := @this: org.waveprotocol.box.server.robots.operations.DocumentModifyService;

        r9 := @parameter0: com.google.wave.api.OperationRequest;

        r1 := @parameter1: com.google.wave.api.data.ApiView;

        r0 := @parameter2: com.google.wave.api.data.DocumentHitIterator;

        r11 = interfaceinvoke r0.<com.google.wave.api.data.DocumentHitIterator: com.google.wave.api.Range next()>();

     label1:
        if r11 == null goto label4;

        $i0 = virtualinvoke r11.<com.google.wave.api.Range: int getStart()>();

        i3 = $i0;

        $i1 = virtualinvoke r11.<com.google.wave.api.Range: int getEnd()>();

        if $i0 != 0 goto label2;

        i3 = 1;

     label2:
        if i3 < $i1 goto label3;

        $r2 = new com.google.wave.api.InvalidRequestException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid range specified, ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">=");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<com.google.wave.api.InvalidRequestException: void <init>(java.lang.String,com.google.wave.api.OperationRequest)>($r8, r9);

        throw $r2;

     label3:
        virtualinvoke r1.<com.google.wave.api.data.ApiView: void delete(int,int)>(i3, $i1);

        $i2 = $i1 - i3;

        interfaceinvoke r0.<com.google.wave.api.data.DocumentHitIterator: void shift(int,int)>(i3, $i2);

        r11 = interfaceinvoke r0.<com.google.wave.api.data.DocumentHitIterator: com.google.wave.api.Range next()>();

        goto label1;

     label4:
        return;
    }

    private void insert(com.google.wave.api.OperationRequest, org.waveprotocol.wave.model.document.Document, com.google.wave.api.data.ApiView, com.google.wave.api.data.DocumentHitIterator, com.google.wave.api.impl.DocumentModifyAction) throws com.google.wave.api.InvalidRequestException
    {
        com.google.wave.api.OperationRequest r2;
        org.waveprotocol.wave.model.document.Document r3;
        org.waveprotocol.box.server.robots.operations.DocumentModifyService r1;
        com.google.wave.api.data.ApiView r4;
        com.google.wave.api.Range r6;
        com.google.wave.api.impl.DocumentModifyAction r5;
        int $i0, $i1, i2;
        com.google.wave.api.data.DocumentHitIterator r0;

        r1 := @this: org.waveprotocol.box.server.robots.operations.DocumentModifyService;

        r2 := @parameter0: com.google.wave.api.OperationRequest;

        r3 := @parameter1: org.waveprotocol.wave.model.document.Document;

        r4 := @parameter2: com.google.wave.api.data.ApiView;

        r0 := @parameter3: com.google.wave.api.data.DocumentHitIterator;

        r5 := @parameter4: com.google.wave.api.impl.DocumentModifyAction;

        i2 = 0;

        r6 = interfaceinvoke r0.<com.google.wave.api.data.DocumentHitIterator: com.google.wave.api.Range next()>();

     label1:
        if r6 == null goto label2;

        $i0 = virtualinvoke r6.<com.google.wave.api.Range: int getStart()>();

        $i1 = specialinvoke r1.<org.waveprotocol.box.server.robots.operations.DocumentModifyService: int insertInto(com.google.wave.api.OperationRequest,org.waveprotocol.wave.model.document.Document,com.google.wave.api.data.ApiView,int,com.google.wave.api.impl.DocumentModifyAction,int)>(r2, r3, r4, $i0, r5, i2);

        interfaceinvoke r0.<com.google.wave.api.data.DocumentHitIterator: void shift(int,int)>($i0, $i1);

        i2 = i2 + 1;

        r6 = interfaceinvoke r0.<com.google.wave.api.data.DocumentHitIterator: com.google.wave.api.Range next()>();

        goto label1;

     label2:
        return;
    }

    private void insertAfter(com.google.wave.api.OperationRequest, org.waveprotocol.wave.model.document.Document, com.google.wave.api.data.ApiView, com.google.wave.api.data.DocumentHitIterator, com.google.wave.api.impl.DocumentModifyAction) throws com.google.wave.api.InvalidRequestException
    {
        com.google.wave.api.OperationRequest r2;
        org.waveprotocol.wave.model.document.Document r3;
        org.waveprotocol.box.server.robots.operations.DocumentModifyService r1;
        com.google.wave.api.data.ApiView r4;
        com.google.wave.api.Range r6;
        com.google.wave.api.impl.DocumentModifyAction r5;
        int $i0, $i1, i2;
        com.google.wave.api.data.DocumentHitIterator r0;

        r1 := @this: org.waveprotocol.box.server.robots.operations.DocumentModifyService;

        r2 := @parameter0: com.google.wave.api.OperationRequest;

        r3 := @parameter1: org.waveprotocol.wave.model.document.Document;

        r4 := @parameter2: com.google.wave.api.data.ApiView;

        r0 := @parameter3: com.google.wave.api.data.DocumentHitIterator;

        r5 := @parameter4: com.google.wave.api.impl.DocumentModifyAction;

        i2 = 0;

        r6 = interfaceinvoke r0.<com.google.wave.api.data.DocumentHitIterator: com.google.wave.api.Range next()>();

     label1:
        if r6 == null goto label2;

        $i0 = virtualinvoke r6.<com.google.wave.api.Range: int getEnd()>();

        $i1 = specialinvoke r1.<org.waveprotocol.box.server.robots.operations.DocumentModifyService: int insertInto(com.google.wave.api.OperationRequest,org.waveprotocol.wave.model.document.Document,com.google.wave.api.data.ApiView,int,com.google.wave.api.impl.DocumentModifyAction,int)>(r2, r3, r4, $i0, r5, i2);

        interfaceinvoke r0.<com.google.wave.api.data.DocumentHitIterator: void shift(int,int)>($i0, $i1);

        i2 = i2 + 1;

        r6 = interfaceinvoke r0.<com.google.wave.api.data.DocumentHitIterator: com.google.wave.api.Range next()>();

        goto label1;

     label2:
        return;
    }

    private void replace(com.google.wave.api.OperationRequest, org.waveprotocol.wave.model.document.Document, com.google.wave.api.data.ApiView, com.google.wave.api.data.DocumentHitIterator, com.google.wave.api.impl.DocumentModifyAction) throws com.google.wave.api.InvalidRequestException
    {
        com.google.wave.api.OperationRequest r2;
        com.google.wave.api.data.ApiView r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10;
        org.waveprotocol.wave.model.document.Document r3;
        org.waveprotocol.box.server.robots.operations.DocumentModifyService r1;
        com.google.wave.api.Range r6;
        com.google.wave.api.impl.DocumentModifyAction r5;
        com.google.wave.api.data.DocumentHitIterator r0;

        r1 := @this: org.waveprotocol.box.server.robots.operations.DocumentModifyService;

        r2 := @parameter0: com.google.wave.api.OperationRequest;

        r3 := @parameter1: org.waveprotocol.wave.model.document.Document;

        r4 := @parameter2: com.google.wave.api.data.ApiView;

        r0 := @parameter3: com.google.wave.api.data.DocumentHitIterator;

        r5 := @parameter4: com.google.wave.api.impl.DocumentModifyAction;

        i10 = 0;

        r6 = interfaceinvoke r0.<com.google.wave.api.data.DocumentHitIterator: com.google.wave.api.Range next()>();

     label1:
        if r6 == null goto label2;

        $i0 = virtualinvoke r6.<com.google.wave.api.Range: int getStart()>();

        $i1 = specialinvoke r1.<org.waveprotocol.box.server.robots.operations.DocumentModifyService: int insertInto(com.google.wave.api.OperationRequest,org.waveprotocol.wave.model.document.Document,com.google.wave.api.data.ApiView,int,com.google.wave.api.impl.DocumentModifyAction,int)>(r2, r3, r4, $i0, r5, i10);

        $i2 = $i0 + $i1;

        $i3 = virtualinvoke r6.<com.google.wave.api.Range: int getEnd()>();

        $i4 = $i3 + $i1;

        virtualinvoke r4.<com.google.wave.api.data.ApiView: void delete(int,int)>($i2, $i4);

        $i5 = virtualinvoke r6.<com.google.wave.api.Range: int getStart()>();

        $i6 = virtualinvoke r6.<com.google.wave.api.Range: int getEnd()>();

        $i7 = $i5 - $i6;

        $i8 = staticinvoke <java.lang.Math: int min(int,int)>(0, $i7);

        $i9 = $i1 + $i8;

        interfaceinvoke r0.<com.google.wave.api.data.DocumentHitIterator: void shift(int,int)>($i0, $i9);

        i10 = i10 + 1;

        r6 = interfaceinvoke r0.<com.google.wave.api.data.DocumentHitIterator: com.google.wave.api.Range next()>();

        goto label1;

     label2:
        return;
    }

    private int insertInto(com.google.wave.api.OperationRequest, org.waveprotocol.wave.model.document.Document, com.google.wave.api.data.ApiView, int, com.google.wave.api.impl.DocumentModifyAction, int) throws com.google.wave.api.InvalidRequestException
    {
        java.util.Map $r5;
        boolean $z0, $z1, $z2, $z3, $z4;
        com.google.wave.api.impl.DocumentModifyAction$BundledAnnotation r27;
        java.util.List $r12, $r25;
        java.lang.StringBuilder $r22, $r23, $r29;
        org.waveprotocol.wave.model.document.util.XmlStringBuilder $r6;
        com.google.wave.api.OperationRequest r16;
        com.google.wave.api.Element $r1;
        java.lang.Iterable $r10;
        com.google.wave.api.data.ApiView r9;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i8;
        com.google.wave.api.Gadget r28;
        java.lang.String $r3, $r4, $r8, $r17, $r18, $r20, r24;
        java.lang.UnsupportedOperationException $r30;
        java.util.Iterator $r11, $r13;
        org.waveprotocol.wave.model.document.Document r7;
        char $c7;
        org.waveprotocol.box.server.robots.operations.DocumentModifyService r15;
        org.waveprotocol.wave.model.document.RangedAnnotation r26;
        com.google.wave.api.impl.DocumentModifyAction r0;
        java.lang.Object $r14, $r19;

        r15 := @this: org.waveprotocol.box.server.robots.operations.DocumentModifyService;

        r16 := @parameter0: com.google.wave.api.OperationRequest;

        r7 := @parameter1: org.waveprotocol.wave.model.document.Document;

        r9 := @parameter2: com.google.wave.api.data.ApiView;

        i1 := @parameter3: int;

        r0 := @parameter4: com.google.wave.api.impl.DocumentModifyAction;

        i0 := @parameter5: int;

        $z0 = virtualinvoke r0.<com.google.wave.api.impl.DocumentModifyAction: boolean hasTextAt(int)>(i0);

        if $z0 == 0 goto label6;

        $r8 = virtualinvoke r0.<com.google.wave.api.impl.DocumentModifyAction: java.lang.String getValue(int)>(i0);

        r24 = $r8;

        if i1 != 0 goto label1;

        $z4 = virtualinvoke $r8.<java.lang.String: boolean isEmpty()>();

        if $z4 != 0 goto label1;

        $c7 = virtualinvoke $r8.<java.lang.String: char charAt(int)>(0);

        $i8 = (int) $c7;

        if $i8 == 10 goto label1;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        virtualinvoke r9.<com.google.wave.api.data.ApiView: void insert(int,java.lang.String)>(i1, r24);

        $r25 = virtualinvoke r0.<com.google.wave.api.impl.DocumentModifyAction: java.util.List getBundledAnnotations()>();

        if $r25 == null goto label5;

        $i3 = virtualinvoke r9.<com.google.wave.api.data.ApiView: int transformToXmlOffset(int)>(i1);

        $i4 = virtualinvoke r24.<java.lang.String: int length()>();

        $i5 = i1 + $i4;

        $i6 = virtualinvoke r9.<com.google.wave.api.data.ApiView: int transformToXmlOffset(int)>($i5);

        $r10 = interfaceinvoke r7.<org.waveprotocol.wave.model.document.Document: java.lang.Iterable rangedAnnotations(int,int,org.waveprotocol.wave.model.util.ReadableStringSet)>($i3, $i6, null);

        $r11 = interfaceinvoke $r10.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z2 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label3;

        $r19 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r26 = (org.waveprotocol.wave.model.document.RangedAnnotation) $r19;

        $r20 = interfaceinvoke r26.<org.waveprotocol.wave.model.document.RangedAnnotation: java.lang.String key()>();

        specialinvoke r15.<org.waveprotocol.box.server.robots.operations.DocumentModifyService: void setDocumentAnnotation(com.google.wave.api.OperationRequest,org.waveprotocol.wave.model.document.Document,int,int,java.lang.String,java.lang.String)>(r16, r7, $i3, $i6, $r20, null);

        goto label2;

     label3:
        $r12 = virtualinvoke r0.<com.google.wave.api.impl.DocumentModifyAction: java.util.List getBundledAnnotations()>();

        $r13 = interfaceinvoke $r12.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z3 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label5;

        $r14 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r27 = (com.google.wave.api.impl.DocumentModifyAction$BundledAnnotation) $r14;

        $r18 = r27.<com.google.wave.api.impl.DocumentModifyAction$BundledAnnotation: java.lang.String key>;

        $r17 = r27.<com.google.wave.api.impl.DocumentModifyAction$BundledAnnotation: java.lang.String value>;

        specialinvoke r15.<org.waveprotocol.box.server.robots.operations.DocumentModifyService: void setDocumentAnnotation(com.google.wave.api.OperationRequest,org.waveprotocol.wave.model.document.Document,int,int,java.lang.String,java.lang.String)>(r16, r7, $i3, $i6, $r18, $r17);

        goto label4;

     label5:
        $i2 = virtualinvoke r24.<java.lang.String: int length()>();

        return $i2;

     label6:
        $r1 = virtualinvoke r0.<com.google.wave.api.impl.DocumentModifyAction: com.google.wave.api.Element getElement(int)>(i0);

        if $r1 == null goto label8;

        $z1 = virtualinvoke $r1.<com.google.wave.api.Element: boolean isGadget()>();

        if $z1 == 0 goto label7;

        r28 = (com.google.wave.api.Gadget) $r1;

        $r3 = virtualinvoke r28.<com.google.wave.api.Gadget: java.lang.String getUrl()>();

        $r4 = virtualinvoke r28.<com.google.wave.api.Gadget: java.lang.String getAuthor()>();

        $r5 = virtualinvoke r28.<com.google.wave.api.Gadget: java.util.Map getProperties()>();

        $r6 = staticinvoke <org.waveprotocol.wave.model.gadget.GadgetXmlUtil: org.waveprotocol.wave.model.document.util.XmlStringBuilder constructXml(java.lang.String,java.lang.String,java.lang.String,java.lang.String[],java.util.Map)>($r3, "", $r4, null, $r5);

        staticinvoke <org.waveprotocol.wave.model.document.util.LineContainers: java.lang.Object appendLine(org.waveprotocol.wave.model.document.MutableDocument,org.waveprotocol.wave.model.document.util.XmlStringBuilder)>(r7, $r6);

        goto label8;

     label7:
        $r30 = new java.lang.UnsupportedOperationException;

        specialinvoke $r30.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Can\'t insert other elements than text and gadgets at the moment");

        throw $r30;

     label8:
        return 1;
    }

    private void updateElement(com.google.wave.api.OperationRequest, org.waveprotocol.wave.model.document.Document, com.google.wave.api.data.ApiView, com.google.wave.api.data.DocumentHitIterator, com.google.wave.api.impl.DocumentModifyAction) throws com.google.wave.api.InvalidRequestException
    {
        com.google.wave.api.OperationRequest r11;
        com.google.wave.api.Element $r3;
        com.google.wave.api.data.ApiView r5;
        int $i0, $i1, i2;
        org.waveprotocol.wave.model.document.util.Point $r7;
        boolean $z0;
        java.lang.UnsupportedOperationException $r4;
        org.waveprotocol.wave.model.document.Document r6;
        org.waveprotocol.box.server.robots.operations.DocumentModifyService r10;
        com.google.wave.api.Range $r1;
        com.google.wave.api.impl.DocumentModifyAction r2;
        java.lang.Object $r8;
        org.waveprotocol.wave.model.document.Doc$E r9;
        com.google.wave.api.data.DocumentHitIterator r0;

        r10 := @this: org.waveprotocol.box.server.robots.operations.DocumentModifyService;

        r11 := @parameter0: com.google.wave.api.OperationRequest;

        r6 := @parameter1: org.waveprotocol.wave.model.document.Document;

        r5 := @parameter2: com.google.wave.api.data.ApiView;

        r0 := @parameter3: com.google.wave.api.data.DocumentHitIterator;

        r2 := @parameter4: com.google.wave.api.impl.DocumentModifyAction;

        i2 = 0;

     label1:
        $r1 = interfaceinvoke r0.<com.google.wave.api.data.DocumentHitIterator: com.google.wave.api.Range next()>();

        if $r1 == null goto label4;

        $r3 = virtualinvoke r2.<com.google.wave.api.impl.DocumentModifyAction: com.google.wave.api.Element getElement(int)>(i2);

        if $r3 == null goto label3;

        $z0 = virtualinvoke $r3.<com.google.wave.api.Element: boolean isGadget()>();

        if $z0 == 0 goto label2;

        $i0 = virtualinvoke $r1.<com.google.wave.api.Range: int getStart()>();

        $i1 = virtualinvoke r5.<com.google.wave.api.data.ApiView: int transformToXmlOffset(int)>($i0);

        $r7 = interfaceinvoke r6.<org.waveprotocol.wave.model.document.Document: org.waveprotocol.wave.model.document.util.Point locate(int)>($i1);

        $r8 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: java.lang.Object elementAfter(org.waveprotocol.wave.model.document.ReadableDocument,org.waveprotocol.wave.model.document.util.Point)>(r6, $r7);

        r9 = (org.waveprotocol.wave.model.document.Doc$E) $r8;

        specialinvoke r10.<org.waveprotocol.box.server.robots.operations.DocumentModifyService: void updateExistingGadgetElement(org.waveprotocol.wave.model.document.Document,org.waveprotocol.wave.model.document.Doc$E,com.google.wave.api.Element)>(r6, r9, $r3);

        goto label3;

     label2:
        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Can\'t update other elements than gadgets at the moment");

        throw $r4;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        return;
    }

    private void updateExistingGadgetElement(org.waveprotocol.wave.model.document.Document, org.waveprotocol.wave.model.document.Doc$E, com.google.wave.api.Element) throws com.google.wave.api.InvalidRequestException
    {
        java.util.Map $r8, $r43;
        java.util.Set $r9;
        java.lang.StringBuilder $r31, $r32, $r35, $r40, $r41, $r42, $r46;
        java.lang.Object[] $r1;
        java.lang.String $r3, $r13, $r17, $r22, $r24, $r26, $r28, $r30, $r34, $r36, $r39, $r45, r50, r54, r56;
        java.util.Map$Entry r52;
        org.waveprotocol.wave.model.document.Document r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        com.google.wave.api.ElementType $r2;
        org.waveprotocol.wave.model.document.util.Point$El $r19, $r20;
        org.waveprotocol.wave.model.document.util.XmlStringBuilder $r18;
        com.google.wave.api.Element r0;
        java.util.HashMap $r4;
        java.util.Iterator $r10;
        org.waveprotocol.wave.model.document.Doc$N r48;
        org.waveprotocol.box.server.robots.operations.DocumentModifyService r47;
        java.lang.Object $r7, $r11, $r12, $r14, $r15, $r16, $r21, $r23, $r25, $r27, $r29, $r33, $r38, $r44, $r51, $r53, $r55;
        org.waveprotocol.wave.model.document.Doc$E r6, $r37, r49;

        r47 := @this: org.waveprotocol.box.server.robots.operations.DocumentModifyService;

        r5 := @parameter0: org.waveprotocol.wave.model.document.Document;

        r6 := @parameter1: org.waveprotocol.wave.model.document.Doc$E;

        r0 := @parameter2: com.google.wave.api.Element;

        $z0 = virtualinvoke r0.<com.google.wave.api.Element: boolean isGadget()>();

        $r1 = newarray (java.lang.Object)[1];

        $r2 = virtualinvoke r0.<com.google.wave.api.Element: com.google.wave.api.ElementType getType()>();

        $r1[0] = $r2;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z0, "Called with non-gadget element type %s", $r1);

        $r3 = virtualinvoke r0.<com.google.wave.api.Element: java.lang.String getProperty(java.lang.String)>("url");

        if $r3 == null goto label01;

        interfaceinvoke r5.<org.waveprotocol.wave.model.document.Document: void setElementAttribute(java.lang.Object,java.lang.String,java.lang.String)>(r6, "url", $r3);

     label01:
        $r4 = staticinvoke <com.google.common.collect.Maps: java.util.HashMap newHashMap()>();

        $r7 = interfaceinvoke r5.<org.waveprotocol.wave.model.document.Document: java.lang.Object getFirstChild(java.lang.Object)>(r6);

        r48 = (org.waveprotocol.wave.model.document.Doc$N) $r7;

     label02:
        if r48 == null goto label05;

        $r38 = interfaceinvoke r5.<org.waveprotocol.wave.model.document.Document: java.lang.Object asElement(java.lang.Object)>(r48);

        r49 = (org.waveprotocol.wave.model.document.Doc$E) $r38;

        if r49 == null goto label04;

        $r39 = interfaceinvoke r5.<org.waveprotocol.wave.model.document.Document: java.lang.String getTagName(java.lang.Object)>(r49);

        r50 = $r39;

        $z8 = virtualinvoke $r39.<java.lang.String: boolean equals(java.lang.Object)>("state");

        if $z8 == 0 goto label03;

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r39);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r43 = interfaceinvoke r5.<org.waveprotocol.wave.model.document.Document: java.util.Map getAttributes(java.lang.Object)>(r49);

        $r44 = interfaceinvoke $r43.<java.util.Map: java.lang.Object get(java.lang.Object)>("name");

        $r45 = (java.lang.String) $r44;

        $r46 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r45);

        r50 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();

     label03:
        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r50, r49);

     label04:
        $r51 = interfaceinvoke r5.<org.waveprotocol.wave.model.document.Document: java.lang.Object getNextSibling(java.lang.Object)>(r48);

        r48 = (org.waveprotocol.wave.model.document.Doc$N) $r51;

        goto label02;

     label05:
        $r8 = virtualinvoke r0.<com.google.wave.api.Element: java.util.Map getProperties()>();

        $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Set entrySet()>();

        $r10 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label06:
        $z9 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z9 == 0 goto label15;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r52 = (java.util.Map$Entry) $r11;

        $r12 = interfaceinvoke r52.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r13 = (java.lang.String) $r12;

        $z1 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>("title");

        if $z1 != 0 goto label07;

        $r21 = interfaceinvoke r52.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r22 = (java.lang.String) $r21;

        $z3 = virtualinvoke $r22.<java.lang.String: boolean equals(java.lang.Object)>("thumbnail");

        if $z3 != 0 goto label07;

        $r23 = interfaceinvoke r52.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r24 = (java.lang.String) $r23;

        $z4 = virtualinvoke $r24.<java.lang.String: boolean equals(java.lang.Object)>("author");

        if $z4 == 0 goto label08;

     label07:
        $r53 = interfaceinvoke r52.<java.util.Map$Entry: java.lang.Object getKey()>();

        r54 = (java.lang.String) $r53;

        $r55 = interfaceinvoke r52.<java.util.Map$Entry: java.lang.Object getKey()>();

        r56 = (java.lang.String) $r55;

        goto label09;

     label08:
        $r25 = interfaceinvoke r52.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r26 = (java.lang.String) $r25;

        $z5 = virtualinvoke $r26.<java.lang.String: boolean equals(java.lang.Object)>("name");

        if $z5 != 0 goto label06;

        $r27 = interfaceinvoke r52.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r28 = (java.lang.String) $r27;

        $z6 = virtualinvoke $r28.<java.lang.String: boolean equals(java.lang.Object)>("pref");

        if $z6 != 0 goto label06;

        $r29 = interfaceinvoke r52.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r30 = (java.lang.String) $r29;

        $z7 = virtualinvoke $r30.<java.lang.String: boolean equals(java.lang.Object)>("url");

        if $z7 != 0 goto label06;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("state ");

        $r33 = interfaceinvoke r52.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r34 = (java.lang.String) $r33;

        $r35 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);

        r54 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        r56 = "state";

     label09:
        $r14 = interfaceinvoke r52.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r36 = (java.lang.String) $r14;

        $r15 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r54);

        $r37 = (org.waveprotocol.wave.model.document.Doc$E) $r15;

        if $r36 != null goto label11;

        if $r37 != null goto label10;

        goto label06;

     label10:
        interfaceinvoke r5.<org.waveprotocol.wave.model.document.Document: void deleteNode(java.lang.Object)>($r37);

        goto label14;

     label11:
        if $r37 == null goto label13;

        $z2 = virtualinvoke r56.<java.lang.String: boolean equals(java.lang.Object)>("state");

        if $z2 == 0 goto label12;

        interfaceinvoke r5.<org.waveprotocol.wave.model.document.Document: void setElementAttribute(java.lang.Object,java.lang.String,java.lang.String)>($r37, "value", $r36);

        goto label14;

     label12:
        interfaceinvoke r5.<org.waveprotocol.wave.model.document.Document: void emptyElement(java.lang.Object)>($r37);

        $r20 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El inElement(java.lang.Object,java.lang.Object)>($r37, null);

        interfaceinvoke r5.<org.waveprotocol.wave.model.document.Document: void insertText(org.waveprotocol.wave.model.document.util.Point,java.lang.String)>($r20, $r36);

        goto label14;

     label13:
        $r16 = interfaceinvoke r52.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r17 = (java.lang.String) $r16;

        $r18 = staticinvoke <org.waveprotocol.wave.model.gadget.GadgetXmlUtil: org.waveprotocol.wave.model.document.util.XmlStringBuilder constructStateXml(java.lang.String,java.lang.String)>($r17, $r36);

        $r19 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El inElement(java.lang.Object,java.lang.Object)>(r6, null);

        interfaceinvoke r5.<org.waveprotocol.wave.model.document.Document: java.lang.Object insertXml(org.waveprotocol.wave.model.document.util.Point,org.waveprotocol.wave.model.document.util.XmlStringBuilder)>($r19, $r18);

     label14:
        goto label06;

     label15:
        return;
    }

    public static org.waveprotocol.box.server.robots.operations.DocumentModifyService create()
    {
        org.waveprotocol.box.server.robots.operations.DocumentModifyService $r0;

        $r0 = new org.waveprotocol.box.server.robots.operations.DocumentModifyService;

        specialinvoke $r0.<org.waveprotocol.box.server.robots.operations.DocumentModifyService: void <init>()>();

        return $r0;
    }
}
