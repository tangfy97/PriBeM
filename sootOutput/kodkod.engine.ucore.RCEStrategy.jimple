public class kodkod.engine.ucore.RCEStrategy extends java.lang.Object implements kodkod.engine.satlab.ReductionStrategy
{
    private final kodkod.util.ints.IntCollection varsToTry;
    private final int dist;
    static final boolean $assertionsDisabled;

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lkodkod/engine/ucore/RCEStrategy;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <kodkod.engine.ucore.RCEStrategy: boolean $assertionsDisabled> = $z1;

        return;
    }

    public void <init>(kodkod.engine.fol2sat.TranslationLog)
    {
        kodkod.engine.fol2sat.TranslationLog r1;
        kodkod.engine.ucore.RCEStrategy r0;

        r0 := @this: kodkod.engine.ucore.RCEStrategy;

        r1 := @parameter0: kodkod.engine.fol2sat.TranslationLog;

        specialinvoke r0.<kodkod.engine.ucore.RCEStrategy: void <init>(kodkod.engine.fol2sat.TranslationLog,int)>(r1, 2147483647);

        return;
    }

    public void <init>(kodkod.engine.fol2sat.TranslationLog, int)
    {
        kodkod.engine.ucore.RCEStrategy r0;
        kodkod.util.ints.IntSet $r2;
        kodkod.engine.fol2sat.TranslationLog r1;
        java.lang.IllegalArgumentException $r3;
        int i0;
        java.lang.StringBuilder $r4, $r5;
        java.lang.String $r6;

        r0 := @this: kodkod.engine.ucore.RCEStrategy;

        r1 := @parameter0: kodkod.engine.fol2sat.TranslationLog;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if i0 >= 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("Resolution distance must be non-negative: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r3;

     label1:
        $r2 = staticinvoke <kodkod.engine.ucore.StrategyUtils: kodkod.util.ints.IntSet rootVars(kodkod.engine.fol2sat.TranslationLog)>(r1);

        r0.<kodkod.engine.ucore.RCEStrategy: kodkod.util.ints.IntCollection varsToTry> = $r2;

        r0.<kodkod.engine.ucore.RCEStrategy: int dist> = i0;

        return;
    }

    public kodkod.util.ints.IntSet next(kodkod.engine.satlab.ResolutionTrace)
    {
        java.lang.AssertionError $r7;
        kodkod.util.ints.IntIterator $r5;
        kodkod.util.ints.IntCollection $r1, $r4, $r8;
        int $i0, $i1, $i2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        kodkod.engine.satlab.ResolutionTrace r2;
        kodkod.engine.ucore.RCEStrategy r0;
        kodkod.util.ints.IntSet $r3, $r6, $r9, $r10;

        r0 := @this: kodkod.engine.ucore.RCEStrategy;

        r2 := @parameter0: kodkod.engine.satlab.ResolutionTrace;

        $r1 = r0.<kodkod.engine.ucore.RCEStrategy: kodkod.util.ints.IntCollection varsToTry>;

        $z0 = interfaceinvoke $r1.<kodkod.util.ints.IntCollection: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r10 = <kodkod.util.ints.Ints: kodkod.util.ints.IntSet EMPTY_SET>;

        return $r10;

     label1:
        $r3 = staticinvoke <kodkod.engine.ucore.StrategyUtils: kodkod.util.ints.IntSet coreTailUnits(kodkod.engine.satlab.ResolutionTrace)>(r2);

        $r4 = r0.<kodkod.engine.ucore.RCEStrategy: kodkod.util.ints.IntCollection varsToTry>;

        $r5 = interfaceinvoke $r4.<kodkod.util.ints.IntCollection: kodkod.util.ints.IntIterator iterator()>();

        goto label6;

     label2:
        $i0 = interfaceinvoke $r5.<kodkod.util.ints.IntIterator: int next()>();

        interfaceinvoke $r5.<kodkod.util.ints.IntIterator: void remove()>();

        $z2 = interfaceinvoke $r3.<kodkod.util.ints.IntSet: boolean remove(int)>($i0);

        if $z2 == 0 goto label6;

        $z3 = interfaceinvoke $r3.<kodkod.util.ints.IntSet: boolean isEmpty()>();

        if $z3 == 0 goto label3;

        goto label7;

     label3:
        $r6 = specialinvoke r0.<kodkod.engine.ucore.RCEStrategy: kodkod.util.ints.IntSet clausesFor(kodkod.engine.satlab.ResolutionTrace,kodkod.util.ints.IntSet)>(r2, $r3);

        $z4 = <kodkod.engine.ucore.RCEStrategy: boolean $assertionsDisabled>;

        if $z4 != 0 goto label5;

        $z5 = interfaceinvoke $r6.<kodkod.util.ints.IntSet: boolean isEmpty()>();

        if $z5 != 0 goto label4;

        $i1 = interfaceinvoke r2.<kodkod.engine.satlab.ResolutionTrace: int size()>();

        $i2 = $i1 - 1;

        $z6 = interfaceinvoke $r6.<kodkod.util.ints.IntSet: boolean contains(int)>($i2);

        if $z6 == 0 goto label5;

     label4:
        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label5:
        return $r6;

     label6:
        $z1 = interfaceinvoke $r5.<kodkod.util.ints.IntIterator: boolean hasNext()>();

        if $z1 != 0 goto label2;

     label7:
        $r8 = r0.<kodkod.engine.ucore.RCEStrategy: kodkod.util.ints.IntCollection varsToTry>;

        interfaceinvoke $r8.<kodkod.util.ints.IntCollection: void clear()>();

        $r9 = <kodkod.util.ints.Ints: kodkod.util.ints.IntSet EMPTY_SET>;

        return $r9;
    }

    private kodkod.util.ints.IntSet clausesFor(kodkod.engine.satlab.ResolutionTrace, kodkod.util.ints.IntSet)
    {
        kodkod.engine.satlab.ResolutionTrace r0;
        kodkod.engine.ucore.RCEStrategy r3;
        kodkod.util.ints.IntSet r1, $r2, $r4, $r5, r6;
        int $i0, $i1, $i2, $i3, i4, i5;

        r3 := @this: kodkod.engine.ucore.RCEStrategy;

        r0 := @parameter0: kodkod.engine.satlab.ResolutionTrace;

        r1 := @parameter1: kodkod.util.ints.IntSet;

        $r2 = staticinvoke <kodkod.engine.ucore.StrategyUtils: kodkod.util.ints.IntSet clausesFor(kodkod.engine.satlab.ResolutionTrace,kodkod.util.ints.IntSet)>(r0, r1);

        $i0 = r3.<kodkod.engine.ucore.RCEStrategy: int dist>;

        $r4 = interfaceinvoke r0.<kodkod.engine.satlab.ResolutionTrace: kodkod.util.ints.IntSet resolvents()>();

        $i1 = interfaceinvoke $r4.<kodkod.util.ints.IntSet: int size()>();

        if $i0 >= $i1 goto label4;

        r6 = $r2;

        i4 = 0;

        i5 = 0;

        goto label2;

     label1:
        i5 = interfaceinvoke r6.<kodkod.util.ints.IntSet: int size()>();

        r6 = interfaceinvoke r0.<kodkod.engine.satlab.ResolutionTrace: kodkod.util.ints.IntSet directlyLearnable(kodkod.util.ints.IntSet)>(r6);

        i4 = i4 + 1;

     label2:
        $i2 = interfaceinvoke r6.<kodkod.util.ints.IntSet: int size()>();

        if i5 >= $i2 goto label3;

        $i3 = r3.<kodkod.engine.ucore.RCEStrategy: int dist>;

        if i4 < $i3 goto label1;

     label3:
        return r6;

     label4:
        $r5 = interfaceinvoke r0.<kodkod.engine.satlab.ResolutionTrace: kodkod.util.ints.IntSet learnable(kodkod.util.ints.IntSet)>($r2);

        return $r5;
    }
}
