public abstract class org.codehaus.jettison.AbstractXMLOutputFactory extends javax.xml.stream.XMLOutputFactory
{

    public void <init>()
    {
        org.codehaus.jettison.AbstractXMLOutputFactory r0;

        r0 := @this: org.codehaus.jettison.AbstractXMLOutputFactory;

        specialinvoke r0.<javax.xml.stream.XMLOutputFactory: void <init>()>();

        return;
    }

    public javax.xml.stream.XMLEventWriter createXMLEventWriter(java.io.OutputStream, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        java.io.OutputStream r2;
        org.codehaus.jettison.AbstractXMLEventWriter $r0;
        org.codehaus.jettison.AbstractXMLOutputFactory r1;
        javax.xml.stream.XMLStreamWriter $r4;
        java.lang.String r3;

        r1 := @this: org.codehaus.jettison.AbstractXMLOutputFactory;

        r2 := @parameter0: java.io.OutputStream;

        r3 := @parameter1: java.lang.String;

        $r0 = new org.codehaus.jettison.AbstractXMLEventWriter;

        $r4 = virtualinvoke r1.<org.codehaus.jettison.AbstractXMLOutputFactory: javax.xml.stream.XMLStreamWriter createXMLStreamWriter(java.io.OutputStream,java.lang.String)>(r2, r3);

        specialinvoke $r0.<org.codehaus.jettison.AbstractXMLEventWriter: void <init>(javax.xml.stream.XMLStreamWriter)>($r4);

        return $r0;
    }

    public javax.xml.stream.XMLEventWriter createXMLEventWriter(java.io.OutputStream) throws javax.xml.stream.XMLStreamException
    {
        java.io.OutputStream r2;
        org.codehaus.jettison.AbstractXMLEventWriter $r0;
        org.codehaus.jettison.AbstractXMLOutputFactory r1;
        javax.xml.stream.XMLStreamWriter $r3;

        r1 := @this: org.codehaus.jettison.AbstractXMLOutputFactory;

        r2 := @parameter0: java.io.OutputStream;

        $r0 = new org.codehaus.jettison.AbstractXMLEventWriter;

        $r3 = virtualinvoke r1.<org.codehaus.jettison.AbstractXMLOutputFactory: javax.xml.stream.XMLStreamWriter createXMLStreamWriter(java.io.OutputStream)>(r2);

        specialinvoke $r0.<org.codehaus.jettison.AbstractXMLEventWriter: void <init>(javax.xml.stream.XMLStreamWriter)>($r3);

        return $r0;
    }

    public javax.xml.stream.XMLEventWriter createXMLEventWriter(javax.xml.transform.Result) throws javax.xml.stream.XMLStreamException
    {
        org.codehaus.jettison.AbstractXMLEventWriter $r0;
        org.codehaus.jettison.AbstractXMLOutputFactory r1;
        javax.xml.transform.Result r2;
        javax.xml.stream.XMLStreamWriter $r3;

        r1 := @this: org.codehaus.jettison.AbstractXMLOutputFactory;

        r2 := @parameter0: javax.xml.transform.Result;

        $r0 = new org.codehaus.jettison.AbstractXMLEventWriter;

        $r3 = virtualinvoke r1.<org.codehaus.jettison.AbstractXMLOutputFactory: javax.xml.stream.XMLStreamWriter createXMLStreamWriter(javax.xml.transform.Result)>(r2);

        specialinvoke $r0.<org.codehaus.jettison.AbstractXMLEventWriter: void <init>(javax.xml.stream.XMLStreamWriter)>($r3);

        return $r0;
    }

    public javax.xml.stream.XMLEventWriter createXMLEventWriter(java.io.Writer) throws javax.xml.stream.XMLStreamException
    {
        org.codehaus.jettison.AbstractXMLEventWriter $r0;
        java.io.Writer r2;
        org.codehaus.jettison.AbstractXMLOutputFactory r1;
        javax.xml.stream.XMLStreamWriter $r3;

        r1 := @this: org.codehaus.jettison.AbstractXMLOutputFactory;

        r2 := @parameter0: java.io.Writer;

        $r0 = new org.codehaus.jettison.AbstractXMLEventWriter;

        $r3 = virtualinvoke r1.<org.codehaus.jettison.AbstractXMLOutputFactory: javax.xml.stream.XMLStreamWriter createXMLStreamWriter(java.io.Writer)>(r2);

        specialinvoke $r0.<org.codehaus.jettison.AbstractXMLEventWriter: void <init>(javax.xml.stream.XMLStreamWriter)>($r3);

        return $r0;
    }

    public javax.xml.stream.XMLStreamWriter createXMLStreamWriter(java.io.OutputStream, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        java.io.OutputStream r2;
        javax.xml.stream.XMLStreamException $r5;
        java.io.OutputStreamWriter $r1;
        org.codehaus.jettison.AbstractXMLOutputFactory r0;
        javax.xml.stream.XMLStreamWriter $r3;
        java.lang.String r6;
        java.io.UnsupportedEncodingException $r4;

        r0 := @this: org.codehaus.jettison.AbstractXMLOutputFactory;

        r2 := @parameter0: java.io.OutputStream;

        r6 := @parameter1: java.lang.String;

        if r6 != null goto label1;

        r6 = "UTF-8";

     label1:
        $r1 = new java.io.OutputStreamWriter;

        specialinvoke $r1.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>(r2, r6);

        $r3 = virtualinvoke r0.<org.codehaus.jettison.AbstractXMLOutputFactory: javax.xml.stream.XMLStreamWriter createXMLStreamWriter(java.io.Writer)>($r1);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new javax.xml.stream.XMLStreamException;

        specialinvoke $r5.<javax.xml.stream.XMLStreamException: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public javax.xml.stream.XMLStreamWriter createXMLStreamWriter(java.io.OutputStream) throws javax.xml.stream.XMLStreamException
    {
        java.io.OutputStream r1;
        org.codehaus.jettison.AbstractXMLOutputFactory r0;
        javax.xml.stream.XMLStreamWriter $r2;

        r0 := @this: org.codehaus.jettison.AbstractXMLOutputFactory;

        r1 := @parameter0: java.io.OutputStream;

        $r2 = virtualinvoke r0.<org.codehaus.jettison.AbstractXMLOutputFactory: javax.xml.stream.XMLStreamWriter createXMLStreamWriter(java.io.OutputStream,java.lang.String)>(r1, null);

        return $r2;
    }

    public javax.xml.stream.XMLStreamWriter createXMLStreamWriter(javax.xml.transform.Result) throws javax.xml.stream.XMLStreamException
    {
        java.io.OutputStream $r3;
        java.lang.UnsupportedOperationException $r1, $r5;
        javax.xml.transform.stream.StreamResult r2;
        javax.xml.transform.Result r0;
        java.io.Writer $r4;
        org.codehaus.jettison.AbstractXMLOutputFactory r6;
        javax.xml.stream.XMLStreamWriter $r7, $r8;
        boolean $z0;

        r6 := @this: org.codehaus.jettison.AbstractXMLOutputFactory;

        r0 := @parameter0: javax.xml.transform.Result;

        $z0 = r0 instanceof javax.xml.transform.stream.StreamResult;

        if $z0 == 0 goto label3;

        r2 = (javax.xml.transform.stream.StreamResult) r0;

        $r3 = virtualinvoke r2.<javax.xml.transform.stream.StreamResult: java.io.OutputStream getOutputStream()>();

        if $r3 == null goto label1;

        $r8 = virtualinvoke r6.<org.codehaus.jettison.AbstractXMLOutputFactory: javax.xml.stream.XMLStreamWriter createXMLStreamWriter(java.io.OutputStream)>($r3);

        return $r8;

     label1:
        $r4 = virtualinvoke r2.<javax.xml.transform.stream.StreamResult: java.io.Writer getWriter()>();

        if $r4 == null goto label2;

        $r7 = virtualinvoke r6.<org.codehaus.jettison.AbstractXMLOutputFactory: javax.xml.stream.XMLStreamWriter createXMLStreamWriter(java.io.Writer)>($r4);

        return $r7;

     label2:
        $r5 = new java.lang.UnsupportedOperationException;

        specialinvoke $r5.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Only those javax.xml.transform.stream.StreamResult instances supported that have an OutputStream or Writer");

        throw $r5;

     label3:
        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Only javax.xml.transform.stream.StreamResult type supported");

        throw $r1;
    }

    public abstract javax.xml.stream.XMLStreamWriter createXMLStreamWriter(java.io.Writer) throws javax.xml.stream.XMLStreamException;

    public java.lang.Object getProperty(java.lang.String) throws java.lang.IllegalArgumentException
    {
        org.codehaus.jettison.AbstractXMLOutputFactory r0;
        java.lang.String r1;

        r0 := @this: org.codehaus.jettison.AbstractXMLOutputFactory;

        r1 := @parameter0: java.lang.String;

        return null;
    }

    public boolean isPropertySupported(java.lang.String)
    {
        org.codehaus.jettison.AbstractXMLOutputFactory r0;
        java.lang.String r1;

        r0 := @this: org.codehaus.jettison.AbstractXMLOutputFactory;

        r1 := @parameter0: java.lang.String;

        return 0;
    }

    public void setProperty(java.lang.String, java.lang.Object) throws java.lang.IllegalArgumentException
    {
        org.codehaus.jettison.AbstractXMLOutputFactory r0;
        java.lang.Object r2;
        java.lang.String r1;

        r0 := @this: org.codehaus.jettison.AbstractXMLOutputFactory;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        return;
    }
}
