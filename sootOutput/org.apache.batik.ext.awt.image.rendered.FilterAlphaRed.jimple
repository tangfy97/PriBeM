public class org.apache.batik.ext.awt.image.rendered.FilterAlphaRed extends org.apache.batik.ext.awt.image.rendered.AbstractRed
{

    public void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed)
    {
        java.awt.Rectangle $r2;
        org.apache.batik.ext.awt.image.rendered.FilterAlphaRed r0;
        java.awt.image.SampleModel $r4;
        org.apache.batik.ext.awt.image.rendered.CachableRed r1;
        java.awt.image.ColorModel $r3;
        java.util.Map $r6;
        int $i0, $i1;
        java.lang.Object $r5;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.FilterAlphaRed;

        r1 := @parameter0: org.apache.batik.ext.awt.image.rendered.CachableRed;

        $r2 = interfaceinvoke r1.<org.apache.batik.ext.awt.image.rendered.CachableRed: java.awt.Rectangle getBounds()>();

        $r3 = interfaceinvoke r1.<java.awt.image.RenderedImage: java.awt.image.ColorModel getColorModel()>();

        $r4 = interfaceinvoke r1.<java.awt.image.RenderedImage: java.awt.image.SampleModel getSampleModel()>();

        $i0 = interfaceinvoke r1.<java.awt.image.RenderedImage: int getTileGridXOffset()>();

        $i1 = interfaceinvoke r1.<java.awt.image.RenderedImage: int getTileGridYOffset()>();

        specialinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed,java.awt.Rectangle,java.awt.image.ColorModel,java.awt.image.SampleModel,int,int,java.util.Map)>(r1, $r2, $r3, $r4, $i0, $i1, null);

        $r6 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.util.Map props>;

        $r5 = <org.apache.batik.ext.awt.ColorSpaceHintKey: java.lang.Object VALUE_COLORSPACE_ALPHA>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.apache.batik.gvt.filter.Colorspace", $r5);

        return;
    }

    public java.awt.image.WritableRaster copyData(java.awt.image.WritableRaster)
    {
        java.awt.Rectangle $r6;
        org.apache.batik.ext.awt.image.rendered.FilterAlphaRed r0;
        java.awt.image.SampleModel $r4;
        java.util.Vector $r1;
        org.apache.batik.ext.awt.image.rendered.CachableRed r3;
        int $i0, $i1, $i2, $i3, $i4;
        java.awt.image.Raster $r7;
        java.lang.Object $r2;
        java.awt.image.WritableRaster r5, $r8;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.FilterAlphaRed;

        r5 := @parameter0: java.awt.image.WritableRaster;

        $r1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.util.Vector getSources()>();

        $r2 = virtualinvoke $r1.<java.util.Vector: java.lang.Object get(int)>(0);

        r3 = (org.apache.batik.ext.awt.image.rendered.CachableRed) $r2;

        $r4 = interfaceinvoke r3.<java.awt.image.RenderedImage: java.awt.image.SampleModel getSampleModel()>();

        $i0 = virtualinvoke $r4.<java.awt.image.SampleModel: int getNumBands()>();

        if $i0 != 1 goto label1;

        $r8 = interfaceinvoke r3.<java.awt.image.RenderedImage: java.awt.image.WritableRaster copyData(java.awt.image.WritableRaster)>(r5);

        return $r8;

     label1:
        staticinvoke <org.apache.batik.ext.awt.image.rendered.PadRed$ZeroRecter: void zeroRect(java.awt.image.WritableRaster)>(r5);

        $r6 = virtualinvoke r5.<java.awt.image.Raster: java.awt.Rectangle getBounds()>();

        $r7 = interfaceinvoke r3.<java.awt.image.RenderedImage: java.awt.image.Raster getData(java.awt.Rectangle)>($r6);

        $i1 = virtualinvoke $r7.<java.awt.image.Raster: int getNumBands()>();

        $i2 = $i1 - 1;

        $i3 = virtualinvoke r5.<java.awt.image.Raster: int getNumBands()>();

        $i4 = $i3 - 1;

        staticinvoke <org.apache.batik.ext.awt.image.rendered.AbstractRed: void copyBand(java.awt.image.Raster,int,java.awt.image.WritableRaster,int)>($r7, $i2, r5, $i4);

        return r5;
    }
}
