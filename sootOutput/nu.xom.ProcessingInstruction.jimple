public class nu.xom.ProcessingInstruction extends nu.xom.Node
{
    private java.lang.String target;
    private java.lang.String data;

    public void <init>(java.lang.String, java.lang.String)
    {
        nu.xom.ProcessingInstruction r0;
        java.lang.String r1, r2;

        r0 := @this: nu.xom.ProcessingInstruction;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<nu.xom.Node: void <init>()>();

        specialinvoke r0.<nu.xom.ProcessingInstruction: void _setTarget(java.lang.String)>(r1);

        specialinvoke r0.<nu.xom.ProcessingInstruction: void _setValue(java.lang.String)>(r2);

        return;
    }

    public void <init>(nu.xom.ProcessingInstruction)
    {
        nu.xom.ProcessingInstruction r0, r1;
        java.lang.String $r2, $r3;

        r0 := @this: nu.xom.ProcessingInstruction;

        r1 := @parameter0: nu.xom.ProcessingInstruction;

        specialinvoke r0.<nu.xom.Node: void <init>()>();

        $r2 = r1.<nu.xom.ProcessingInstruction: java.lang.String target>;

        r0.<nu.xom.ProcessingInstruction: java.lang.String target> = $r2;

        $r3 = r1.<nu.xom.ProcessingInstruction: java.lang.String data>;

        r0.<nu.xom.ProcessingInstruction: java.lang.String data> = $r3;

        return;
    }

    private void <init>()
    {
        nu.xom.ProcessingInstruction r0;

        r0 := @this: nu.xom.ProcessingInstruction;

        specialinvoke r0.<nu.xom.Node: void <init>()>();

        return;
    }

    static nu.xom.ProcessingInstruction build(java.lang.String, java.lang.String)
    {
        nu.xom.ProcessingInstruction $r0;
        java.lang.String r1, r2;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r0 = new nu.xom.ProcessingInstruction;

        specialinvoke $r0.<nu.xom.ProcessingInstruction: void <init>()>();

        $r0.<nu.xom.ProcessingInstruction: java.lang.String target> = r1;

        $r0.<nu.xom.ProcessingInstruction: java.lang.String data> = r2;

        return $r0;
    }

    public final java.lang.String getTarget()
    {
        nu.xom.ProcessingInstruction r0;
        java.lang.String $r1;

        r0 := @this: nu.xom.ProcessingInstruction;

        $r1 = r0.<nu.xom.ProcessingInstruction: java.lang.String target>;

        return $r1;
    }

    public void setTarget(java.lang.String)
    {
        nu.xom.ProcessingInstruction r0;
        java.lang.String r1;

        r0 := @this: nu.xom.ProcessingInstruction;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<nu.xom.ProcessingInstruction: void _setTarget(java.lang.String)>(r1);

        return;
    }

    private void _setTarget(java.lang.String)
    {
        nu.xom.IllegalTargetException $r2, $r8;
        java.lang.StringBuffer $r3, $r4, $r5;
        java.lang.String r0, $r6, $r9;
        nu.xom.ProcessingInstruction r1;
        boolean $z0;
        nu.xom.IllegalNameException $r7;

        r1 := @this: nu.xom.ProcessingInstruction;

        r0 := @parameter0: java.lang.String;

     label1:
        staticinvoke <nu.xom.Verifier: void checkNCName(java.lang.String)>(r0);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        $r8 = new nu.xom.IllegalTargetException;

        $r9 = virtualinvoke $r7.<nu.xom.IllegalNameException: java.lang.String getMessage()>();

        specialinvoke $r8.<nu.xom.IllegalTargetException: void <init>(java.lang.String)>($r9);

        virtualinvoke $r8.<nu.xom.IllegalTargetException: void setData(java.lang.String)>(r0);

        throw $r8;

     label4:
        $z0 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("xml");

        if $z0 == 0 goto label5;

        $r2 = new nu.xom.IllegalTargetException;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is not a legal processing instruction target.");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r2.<nu.xom.IllegalTargetException: void <init>(java.lang.String)>($r6);

        virtualinvoke $r2.<nu.xom.IllegalTargetException: void setData(java.lang.String)>(r0);

        throw $r2;

     label5:
        r1.<nu.xom.ProcessingInstruction: java.lang.String target> = r0;

        return;

        catch nu.xom.IllegalNameException from label1 to label2 with label3;
    }

    public void setValue(java.lang.String)
    {
        nu.xom.ProcessingInstruction r0;
        java.lang.String r1;

        r0 := @this: nu.xom.ProcessingInstruction;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<nu.xom.ProcessingInstruction: void _setValue(java.lang.String)>(r1);

        return;
    }

    private void _setValue(java.lang.String)
    {
        nu.xom.IllegalDataException $r5, $r6, $r7;
        char $c3;
        int $i0, $i1, $i2, $i4, $i5, $i6;
        java.lang.String r0;
        nu.xom.ProcessingInstruction r1;

        r1 := @this: nu.xom.ProcessingInstruction;

        r0 := @parameter0: java.lang.String;

        staticinvoke <nu.xom.Verifier: void checkPCDATA(java.lang.String)>(r0);

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 == 0 goto label4;

        $i1 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>("?>");

        if $i1 < 0 goto label1;

        $r5 = new nu.xom.IllegalDataException;

        specialinvoke $r5.<nu.xom.IllegalDataException: void <init>(java.lang.String)>("Processing instruction data must not contain \"?>\"");

        virtualinvoke $r5.<nu.xom.IllegalDataException: void setData(java.lang.String)>(r0);

        throw $r5;

     label1:
        $i2 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(13);

        if $i2 < 0 goto label2;

        $r6 = new nu.xom.IllegalDataException;

        specialinvoke $r6.<nu.xom.IllegalDataException: void <init>(java.lang.String)>("Processing instruction data cannot contain carriage returns");

        virtualinvoke $r6.<nu.xom.IllegalDataException: void setData(java.lang.String)>(r0);

        throw $r6;

     label2:
        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $i4 = (int) $c3;

        if $i4 == 32 goto label3;

        $i5 = (int) $c3;

        if $i5 == 10 goto label3;

        $i6 = (int) $c3;

        if $i6 != 9 goto label4;

     label3:
        $r7 = new nu.xom.IllegalDataException;

        specialinvoke $r7.<nu.xom.IllegalDataException: void <init>(java.lang.String)>("Processing instruction data cannot contain leading white space");

        virtualinvoke $r7.<nu.xom.IllegalDataException: void setData(java.lang.String)>(r0);

        throw $r7;

     label4:
        r1.<nu.xom.ProcessingInstruction: java.lang.String data> = r0;

        return;
    }

    public final java.lang.String getValue()
    {
        nu.xom.ProcessingInstruction r0;
        java.lang.String $r1;

        r0 := @this: nu.xom.ProcessingInstruction;

        $r1 = r0.<nu.xom.ProcessingInstruction: java.lang.String data>;

        return $r1;
    }

    public final nu.xom.Node getChild(int)
    {
        int i0;
        java.lang.IndexOutOfBoundsException $r0;
        nu.xom.ProcessingInstruction r1;

        r1 := @this: nu.xom.ProcessingInstruction;

        i0 := @parameter0: int;

        $r0 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("LeafNodes do not have children");

        throw $r0;
    }

    public final int getChildCount()
    {
        nu.xom.ProcessingInstruction r0;

        r0 := @this: nu.xom.ProcessingInstruction;

        return 0;
    }

    public final java.lang.String toXML()
    {
        java.lang.StringBuffer $r0;
        int $i0;
        nu.xom.ProcessingInstruction r1;
        java.lang.String $r2, $r3, $r4, $r5;

        r1 := @this: nu.xom.ProcessingInstruction;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>(java.lang.String)>("<?");

        $r2 = r1.<nu.xom.ProcessingInstruction: java.lang.String target>;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r3 = r1.<nu.xom.ProcessingInstruction: java.lang.String data>;

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i0 <= 0 goto label1;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        $r5 = r1.<nu.xom.ProcessingInstruction: java.lang.String data>;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

     label1:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("?>");

        $r4 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    public nu.xom.Node copy()
    {
        nu.xom.ProcessingInstruction $r0, r1;
        java.lang.String $r2, $r3;

        r1 := @this: nu.xom.ProcessingInstruction;

        $r0 = new nu.xom.ProcessingInstruction;

        $r3 = r1.<nu.xom.ProcessingInstruction: java.lang.String target>;

        $r2 = r1.<nu.xom.ProcessingInstruction: java.lang.String data>;

        specialinvoke $r0.<nu.xom.ProcessingInstruction: void <init>(java.lang.String,java.lang.String)>($r3, $r2);

        return $r0;
    }

    boolean isProcessingInstruction()
    {
        nu.xom.ProcessingInstruction r0;

        r0 := @this: nu.xom.ProcessingInstruction;

        return 1;
    }

    public final java.lang.String toString()
    {
        java.lang.StringBuffer $r0, $r1, $r5, $r6, $r8, $r9, $r12, $r13;
        java.lang.Class $r3;
        nu.xom.ProcessingInstruction r2;
        java.lang.String $r4, $r7, $r10, $r11, $r14;

        r2 := @this: nu.xom.ProcessingInstruction;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[");

        $r3 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r5 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": target=\"");

        $r7 = r2.<nu.xom.ProcessingInstruction: java.lang.String target>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"; data=\"");

        $r10 = r2.<nu.xom.ProcessingInstruction: java.lang.String data>;

        $r11 = staticinvoke <nu.xom.Text: java.lang.String escapeLineBreaksAndTruncate(java.lang.String)>($r10);

        $r12 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"]");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r14;
    }
}
