public abstract class org.apache.lucene.search.TopTermsRewrite extends org.apache.lucene.search.TermCollectingRewrite
{
    private final int size;
    private static final java.util.Comparator scoreTermSortByTermComp;
    static final boolean $assertionsDisabled;

    public void <init>(int)
    {
        int i0;
        org.apache.lucene.search.TopTermsRewrite r0;

        r0 := @this: org.apache.lucene.search.TopTermsRewrite;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.lucene.search.TermCollectingRewrite: void <init>()>();

        r0.<org.apache.lucene.search.TopTermsRewrite: int size> = i0;

        return;
    }

    public int getSize()
    {
        int $i0;
        org.apache.lucene.search.TopTermsRewrite r0;

        r0 := @this: org.apache.lucene.search.TopTermsRewrite;

        $i0 = r0.<org.apache.lucene.search.TopTermsRewrite: int size>;

        return $i0;
    }

    protected abstract int getMaxSize();

    public final org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery) throws java.io.IOException
    {
        org.apache.lucene.search.Query $r5;
        java.util.PriorityQueue $r1;
        org.apache.lucene.index.Term $r11;
        org.apache.lucene.search.MultiTermQuery r3;
        boolean $z0;
        org.apache.lucene.util.BytesRef $r12;
        org.apache.lucene.search.TopTermsRewrite$1 $r4;
        org.apache.lucene.search.TopTermsRewrite r0;
        float $f0, $f1, $f2;
        java.lang.StringBuilder $r18, $r19, $r20, $r21, $r23, $r24, $r25;
        org.apache.lucene.index.IndexReader r2;
        java.lang.Object[] $r7;
        java.lang.AssertionError $r17;
        org.apache.lucene.search.TopTermsRewrite$ScoreTerm[] $r6, r8;
        int $i0, $i1, $i2, $i3, i4, $i5, $i6, $i7, $i8, $i9, i10;
        org.apache.lucene.search.TopTermsRewrite$ScoreTerm r10;
        java.lang.String $r13, $r26;
        org.apache.lucene.index.TermContext $r14, $r15, $r16, $r22;
        java.util.Comparator $r9;

        r0 := @this: org.apache.lucene.search.TopTermsRewrite;

        r2 := @parameter0: org.apache.lucene.index.IndexReader;

        r3 := @parameter1: org.apache.lucene.search.MultiTermQuery;

        $i0 = r0.<org.apache.lucene.search.TopTermsRewrite: int size>;

        $i1 = virtualinvoke r0.<org.apache.lucene.search.TopTermsRewrite: int getMaxSize()>();

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        $r1 = new java.util.PriorityQueue;

        specialinvoke $r1.<java.util.PriorityQueue: void <init>()>();

        $r4 = new org.apache.lucene.search.TopTermsRewrite$1;

        specialinvoke $r4.<org.apache.lucene.search.TopTermsRewrite$1: void <init>(org.apache.lucene.search.TopTermsRewrite,java.util.PriorityQueue,int)>(r0, $r1, $i2);

        virtualinvoke r0.<org.apache.lucene.search.TopTermsRewrite: void collectTerms(org.apache.lucene.index.IndexReader,org.apache.lucene.search.MultiTermQuery,org.apache.lucene.search.TermCollectingRewrite$TermCollector)>(r2, r3, $r4);

        $r5 = virtualinvoke r0.<org.apache.lucene.search.TopTermsRewrite: org.apache.lucene.search.Query getTopLevelQuery()>();

        $i3 = virtualinvoke $r1.<java.util.PriorityQueue: int size()>();

        $r6 = newarray (org.apache.lucene.search.TopTermsRewrite$ScoreTerm)[$i3];

        $r7 = virtualinvoke $r1.<java.util.PriorityQueue: java.lang.Object[] toArray(java.lang.Object[])>($r6);

        r8 = (org.apache.lucene.search.TopTermsRewrite$ScoreTerm[]) $r7;

        $r9 = <org.apache.lucene.search.TopTermsRewrite: java.util.Comparator scoreTermSortByTermComp>;

        staticinvoke <org.apache.lucene.util.ArrayUtil: void mergeSort(java.lang.Object[],java.util.Comparator)>(r8, $r9);

        i4 = lengthof r8;

        i10 = 0;

     label1:
        if i10 >= i4 goto label3;

        r10 = r8[i10];

        $r11 = new org.apache.lucene.index.Term;

        $r13 = r3.<org.apache.lucene.search.MultiTermQuery: java.lang.String field>;

        $r12 = r10.<org.apache.lucene.search.TopTermsRewrite$ScoreTerm: org.apache.lucene.util.BytesRef bytes>;

        specialinvoke $r11.<org.apache.lucene.index.Term: void <init>(java.lang.String,org.apache.lucene.util.BytesRef)>($r13, $r12);

        $z0 = <org.apache.lucene.search.TopTermsRewrite: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $i6 = virtualinvoke r2.<org.apache.lucene.index.IndexReader: int docFreq(org.apache.lucene.index.Term)>($r11);

        $r16 = r10.<org.apache.lucene.search.TopTermsRewrite$ScoreTerm: org.apache.lucene.index.TermContext termState>;

        $i7 = virtualinvoke $r16.<org.apache.lucene.index.TermContext: int docFreq()>();

        if $i6 == $i7 goto label2;

        $r17 = new java.lang.AssertionError;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("reader DF is ");

        $i8 = virtualinvoke r2.<org.apache.lucene.index.IndexReader: int docFreq(org.apache.lucene.index.Term)>($r11);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" vs ");

        $r22 = r10.<org.apache.lucene.search.TopTermsRewrite$ScoreTerm: org.apache.lucene.index.TermContext termState>;

        $i9 = virtualinvoke $r22.<org.apache.lucene.index.TermContext: int docFreq()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" term=");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.AssertionError: void <init>(java.lang.Object)>($r26);

        throw $r17;

     label2:
        $r14 = r10.<org.apache.lucene.search.TopTermsRewrite$ScoreTerm: org.apache.lucene.index.TermContext termState>;

        $i5 = virtualinvoke $r14.<org.apache.lucene.index.TermContext: int docFreq()>();

        $f0 = virtualinvoke r3.<org.apache.lucene.search.MultiTermQuery: float getBoost()>();

        $f1 = r10.<org.apache.lucene.search.TopTermsRewrite$ScoreTerm: float boost>;

        $f2 = $f0 * $f1;

        $r15 = r10.<org.apache.lucene.search.TopTermsRewrite$ScoreTerm: org.apache.lucene.index.TermContext termState>;

        virtualinvoke r0.<org.apache.lucene.search.TopTermsRewrite: void addClause(org.apache.lucene.search.Query,org.apache.lucene.index.Term,int,float,org.apache.lucene.index.TermContext)>($r5, $r11, $i5, $f2, $r15);

        i10 = i10 + 1;

        goto label1;

     label3:
        return $r5;
    }

    public int hashCode()
    {
        int $i0, $i1;
        org.apache.lucene.search.TopTermsRewrite r0;

        r0 := @this: org.apache.lucene.search.TopTermsRewrite;

        $i0 = r0.<org.apache.lucene.search.TopTermsRewrite: int size>;

        $i1 = 31 * $i0;

        return $i1;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.lucene.search.TopTermsRewrite r0, r4;
        int $i0, $i1;
        java.lang.Object r1;
        java.lang.Class $r2, $r3;

        r0 := @this: org.apache.lucene.search.TopTermsRewrite;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r1 != null goto label2;

        return 0;

     label2:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 == $r3 goto label3;

        return 0;

     label3:
        r4 = (org.apache.lucene.search.TopTermsRewrite) r1;

        $i1 = r0.<org.apache.lucene.search.TopTermsRewrite: int size>;

        $i0 = r4.<org.apache.lucene.search.TopTermsRewrite: int size>;

        if $i1 == $i0 goto label4;

        return 0;

     label4:
        return 1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;
        org.apache.lucene.search.TopTermsRewrite$2 $r1;

        $r0 = class "Lorg/apache/lucene/search/TopTermsRewrite;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.search.TopTermsRewrite: boolean $assertionsDisabled> = $z1;

        $r1 = new org.apache.lucene.search.TopTermsRewrite$2;

        specialinvoke $r1.<org.apache.lucene.search.TopTermsRewrite$2: void <init>()>();

        <org.apache.lucene.search.TopTermsRewrite: java.util.Comparator scoreTermSortByTermComp> = $r1;

        return;
    }
}
