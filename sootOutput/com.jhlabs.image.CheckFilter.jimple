public class com.jhlabs.image.CheckFilter extends com.jhlabs.image.PointFilter
{
    private int xScale;
    private int yScale;
    private int foreground;
    private int background;
    private int fuzziness;
    private float angle;
    private int operation;
    private float m00;
    private float m01;
    private float m10;
    private float m11;

    public void <init>()
    {
        int $i1;
        com.jhlabs.image.CheckFilter r0;

        r0 := @this: com.jhlabs.image.CheckFilter;

        specialinvoke r0.<com.jhlabs.image.PointFilter: void <init>()>();

        r0.<com.jhlabs.image.CheckFilter: int xScale> = 8;

        r0.<com.jhlabs.image.CheckFilter: int yScale> = 8;

        $i1 = (int) -1;

        r0.<com.jhlabs.image.CheckFilter: int foreground> = $i1;

        r0.<com.jhlabs.image.CheckFilter: int background> = -16777216;

        r0.<com.jhlabs.image.CheckFilter: int fuzziness> = 0;

        r0.<com.jhlabs.image.CheckFilter: float angle> = 0.0F;

        r0.<com.jhlabs.image.CheckFilter: float m00> = 1.0F;

        r0.<com.jhlabs.image.CheckFilter: float m01> = 0.0F;

        r0.<com.jhlabs.image.CheckFilter: float m10> = 0.0F;

        r0.<com.jhlabs.image.CheckFilter: float m11> = 1.0F;

        return;
    }

    public void setForeground(int)
    {
        int i0;
        com.jhlabs.image.CheckFilter r0;

        r0 := @this: com.jhlabs.image.CheckFilter;

        i0 := @parameter0: int;

        r0.<com.jhlabs.image.CheckFilter: int foreground> = i0;

        return;
    }

    public int getForeground()
    {
        int $i0;
        com.jhlabs.image.CheckFilter r0;

        r0 := @this: com.jhlabs.image.CheckFilter;

        $i0 = r0.<com.jhlabs.image.CheckFilter: int foreground>;

        return $i0;
    }

    public void setBackground(int)
    {
        int i0;
        com.jhlabs.image.CheckFilter r0;

        r0 := @this: com.jhlabs.image.CheckFilter;

        i0 := @parameter0: int;

        r0.<com.jhlabs.image.CheckFilter: int background> = i0;

        return;
    }

    public int getBackground()
    {
        int $i0;
        com.jhlabs.image.CheckFilter r0;

        r0 := @this: com.jhlabs.image.CheckFilter;

        $i0 = r0.<com.jhlabs.image.CheckFilter: int background>;

        return $i0;
    }

    public void setXScale(int)
    {
        int i0;
        com.jhlabs.image.CheckFilter r0;

        r0 := @this: com.jhlabs.image.CheckFilter;

        i0 := @parameter0: int;

        r0.<com.jhlabs.image.CheckFilter: int xScale> = i0;

        return;
    }

    public int getXScale()
    {
        int $i0;
        com.jhlabs.image.CheckFilter r0;

        r0 := @this: com.jhlabs.image.CheckFilter;

        $i0 = r0.<com.jhlabs.image.CheckFilter: int xScale>;

        return $i0;
    }

    public void setYScale(int)
    {
        int i0;
        com.jhlabs.image.CheckFilter r0;

        r0 := @this: com.jhlabs.image.CheckFilter;

        i0 := @parameter0: int;

        r0.<com.jhlabs.image.CheckFilter: int yScale> = i0;

        return;
    }

    public int getYScale()
    {
        int $i0;
        com.jhlabs.image.CheckFilter r0;

        r0 := @this: com.jhlabs.image.CheckFilter;

        $i0 = r0.<com.jhlabs.image.CheckFilter: int yScale>;

        return $i0;
    }

    public void setFuzziness(int)
    {
        int i0;
        com.jhlabs.image.CheckFilter r0;

        r0 := @this: com.jhlabs.image.CheckFilter;

        i0 := @parameter0: int;

        r0.<com.jhlabs.image.CheckFilter: int fuzziness> = i0;

        return;
    }

    public int getFuzziness()
    {
        int $i0;
        com.jhlabs.image.CheckFilter r0;

        r0 := @this: com.jhlabs.image.CheckFilter;

        $i0 = r0.<com.jhlabs.image.CheckFilter: int fuzziness>;

        return $i0;
    }

    public void setOperation(int)
    {
        int i0;
        com.jhlabs.image.CheckFilter r0;

        r0 := @this: com.jhlabs.image.CheckFilter;

        i0 := @parameter0: int;

        r0.<com.jhlabs.image.CheckFilter: int operation> = i0;

        return;
    }

    public int getOperation()
    {
        int $i0;
        com.jhlabs.image.CheckFilter r0;

        r0 := @this: com.jhlabs.image.CheckFilter;

        $i0 = r0.<com.jhlabs.image.CheckFilter: int operation>;

        return $i0;
    }

    public void setAngle(float)
    {
        com.jhlabs.image.CheckFilter r0;
        float f0, f1, f2, $f3;
        double $d0, $d1, $d2, $d3;

        r0 := @this: com.jhlabs.image.CheckFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.CheckFilter: float angle> = f0;

        $d0 = (double) f0;

        $d1 = staticinvoke <java.lang.Math: double cos(double)>($d0);

        f1 = (float) $d1;

        $d2 = (double) f0;

        $d3 = staticinvoke <java.lang.Math: double sin(double)>($d2);

        f2 = (float) $d3;

        r0.<com.jhlabs.image.CheckFilter: float m00> = f1;

        r0.<com.jhlabs.image.CheckFilter: float m01> = f2;

        $f3 = neg f2;

        r0.<com.jhlabs.image.CheckFilter: float m10> = $f3;

        r0.<com.jhlabs.image.CheckFilter: float m11> = f1;

        return;
    }

    public float getAngle()
    {
        float $f0;
        com.jhlabs.image.CheckFilter r0;

        r0 := @this: com.jhlabs.image.CheckFilter;

        $f0 = r0.<com.jhlabs.image.CheckFilter: float angle>;

        return $f0;
    }

    public int filterRGB(int, int, int)
    {
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, f17, $f18, $f19, $f20, f21, $f22, $f23, $f24, $f25, $f26, $f27, $f28, f30, $f31, $f32;
        com.jhlabs.image.CheckFilter r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13;

        r0 := @this: com.jhlabs.image.CheckFilter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i13 := @parameter2: int;

        $f1 = r0.<com.jhlabs.image.CheckFilter: float m00>;

        $f0 = (float) i0;

        $f5 = $f1 * $f0;

        $f3 = r0.<com.jhlabs.image.CheckFilter: float m01>;

        $f2 = (float) i1;

        $f4 = $f3 * $f2;

        $f7 = $f5 + $f4;

        $i2 = r0.<com.jhlabs.image.CheckFilter: int xScale>;

        $f6 = (float) $i2;

        f8 = $f7 / $f6;

        $f10 = r0.<com.jhlabs.image.CheckFilter: float m10>;

        $f9 = (float) i0;

        $f14 = $f10 * $f9;

        $f12 = r0.<com.jhlabs.image.CheckFilter: float m11>;

        $f11 = (float) i1;

        $f13 = $f12 * $f11;

        $f16 = $f14 + $f13;

        $i3 = r0.<com.jhlabs.image.CheckFilter: int yScale>;

        $f15 = (float) $i3;

        f17 = $f16 / $f15;

        $f18 = f8 + 100000.0F;

        $i4 = (int) $f18;

        $i7 = $i4 % 2;

        $f19 = f17 + 100000.0F;

        $i5 = (int) $f19;

        $i6 = $i5 % 2;

        if $i7 == $i6 goto label1;

        $f32 = 1.0F;

        $f31 = 1.0F;

        goto label2;

     label1:
        $f32 = 0.0F;

        $f31 = 0.0F;

     label2:
        f30 = $f32;

        $i8 = r0.<com.jhlabs.image.CheckFilter: int fuzziness>;

        if $i8 == 0 goto label3;

        $i12 = r0.<com.jhlabs.image.CheckFilter: int fuzziness>;

        $f20 = (float) $i12;

        f21 = $f20 / 100.0F;

        $f22 = 1.0F - f21;

        $f23 = staticinvoke <com.jhlabs.image.ImageMath: float mod(float,float)>(f8, 1.0F);

        $f24 = staticinvoke <com.jhlabs.image.ImageMath: float smoothPulse(float,float,float,float,float)>(0.0F, f21, $f22, 1.0F, $f23);

        $f25 = 1.0F - f21;

        $f26 = staticinvoke <com.jhlabs.image.ImageMath: float mod(float,float)>(f17, 1.0F);

        $f27 = staticinvoke <com.jhlabs.image.ImageMath: float smoothPulse(float,float,float,float,float)>(0.0F, f21, $f25, 1.0F, $f26);

        $f28 = $f24 * $f27;

        f30 = $f31 * $f28;

     label3:
        $i10 = r0.<com.jhlabs.image.CheckFilter: int foreground>;

        $i9 = r0.<com.jhlabs.image.CheckFilter: int background>;

        $i11 = staticinvoke <com.jhlabs.image.ImageMath: int mixColors(float,int,int)>(f30, $i10, $i9);

        return $i11;
    }

    public java.lang.String toString()
    {
        com.jhlabs.image.CheckFilter r0;

        r0 := @this: com.jhlabs.image.CheckFilter;

        return "Texture/Checkerboard...";
    }
}
