public abstract class org.apache.commons.httpclient.methods.multipart.Part extends java.lang.Object
{
    private static final org.apache.commons.logging.Log LOG;
    protected static final java.lang.String BOUNDARY;
    protected static final byte[] BOUNDARY_BYTES;
    private static final byte[] DEFAULT_BOUNDARY_BYTES;
    protected static final java.lang.String CRLF;
    protected static final byte[] CRLF_BYTES;
    protected static final java.lang.String QUOTE;
    protected static final byte[] QUOTE_BYTES;
    protected static final java.lang.String EXTRA;
    protected static final byte[] EXTRA_BYTES;
    protected static final java.lang.String CONTENT_DISPOSITION;
    protected static final byte[] CONTENT_DISPOSITION_BYTES;
    protected static final java.lang.String CONTENT_TYPE;
    protected static final byte[] CONTENT_TYPE_BYTES;
    protected static final java.lang.String CHARSET;
    protected static final byte[] CHARSET_BYTES;
    protected static final java.lang.String CONTENT_TRANSFER_ENCODING;
    protected static final byte[] CONTENT_TRANSFER_ENCODING_BYTES;
    private byte[] boundaryBytes;
    static java.lang.Class class$org$apache$commons$httpclient$methods$multipart$Part;

    public void <init>()
    {
        org.apache.commons.httpclient.methods.multipart.Part r0;

        r0 := @this: org.apache.commons.httpclient.methods.multipart.Part;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String getBoundary()
    {
        return "----------------314159265358979323846";
    }

    public abstract java.lang.String getName();

    public abstract java.lang.String getContentType();

    public abstract java.lang.String getCharSet();

    public abstract java.lang.String getTransferEncoding();

    protected byte[] getPartBoundary()
    {
        byte[] $r1, $r2, $r3;
        org.apache.commons.httpclient.methods.multipart.Part r0;

        r0 := @this: org.apache.commons.httpclient.methods.multipart.Part;

        $r1 = r0.<org.apache.commons.httpclient.methods.multipart.Part: byte[] boundaryBytes>;

        if $r1 != null goto label1;

        $r3 = <org.apache.commons.httpclient.methods.multipart.Part: byte[] DEFAULT_BOUNDARY_BYTES>;

        return $r3;

     label1:
        $r2 = r0.<org.apache.commons.httpclient.methods.multipart.Part: byte[] boundaryBytes>;

        return $r2;
    }

    void setPartBoundary(byte[])
    {
        byte[] r1;
        org.apache.commons.httpclient.methods.multipart.Part r0;

        r0 := @this: org.apache.commons.httpclient.methods.multipart.Part;

        r1 := @parameter0: byte[];

        r0.<org.apache.commons.httpclient.methods.multipart.Part: byte[] boundaryBytes> = r1;

        return;
    }

    public boolean isRepeatable()
    {
        org.apache.commons.httpclient.methods.multipart.Part r0;

        r0 := @this: org.apache.commons.httpclient.methods.multipart.Part;

        return 1;
    }

    protected void sendStart(java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r1;
        byte[] $r2, $r4, $r5;
        org.apache.commons.httpclient.methods.multipart.Part r3;
        org.apache.commons.logging.Log $r0;

        r3 := @this: org.apache.commons.httpclient.methods.multipart.Part;

        r1 := @parameter0: java.io.OutputStream;

        $r0 = <org.apache.commons.httpclient.methods.multipart.Part: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter sendStart(OutputStream out)");

        $r2 = <org.apache.commons.httpclient.methods.multipart.Part: byte[] EXTRA_BYTES>;

        virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r2);

        $r4 = virtualinvoke r3.<org.apache.commons.httpclient.methods.multipart.Part: byte[] getPartBoundary()>();

        virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r4);

        $r5 = <org.apache.commons.httpclient.methods.multipart.Part: byte[] CRLF_BYTES>;

        virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r5);

        return;
    }

    protected void sendDispositionHeader(java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r1;
        byte[] $r2, $r3, $r6, $r7;
        org.apache.commons.httpclient.methods.multipart.Part r4;
        org.apache.commons.logging.Log $r0;
        java.lang.String $r5;

        r4 := @this: org.apache.commons.httpclient.methods.multipart.Part;

        r1 := @parameter0: java.io.OutputStream;

        $r0 = <org.apache.commons.httpclient.methods.multipart.Part: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter sendDispositionHeader(OutputStream out)");

        $r2 = <org.apache.commons.httpclient.methods.multipart.Part: byte[] CONTENT_DISPOSITION_BYTES>;

        virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r2);

        $r3 = <org.apache.commons.httpclient.methods.multipart.Part: byte[] QUOTE_BYTES>;

        virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r3);

        $r5 = virtualinvoke r4.<org.apache.commons.httpclient.methods.multipart.Part: java.lang.String getName()>();

        $r6 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: byte[] getAsciiBytes(java.lang.String)>($r5);

        virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r6);

        $r7 = <org.apache.commons.httpclient.methods.multipart.Part: byte[] QUOTE_BYTES>;

        virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r7);

        return;
    }

    protected void sendContentTypeHeader(java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r3;
        byte[] $r4, $r5, $r6, $r8, $r9;
        org.apache.commons.httpclient.methods.multipart.Part r1;
        org.apache.commons.logging.Log $r0;
        java.lang.String $r2, $r7;

        r1 := @this: org.apache.commons.httpclient.methods.multipart.Part;

        r3 := @parameter0: java.io.OutputStream;

        $r0 = <org.apache.commons.httpclient.methods.multipart.Part: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter sendContentTypeHeader(OutputStream out)");

        $r2 = virtualinvoke r1.<org.apache.commons.httpclient.methods.multipart.Part: java.lang.String getContentType()>();

        if $r2 == null goto label1;

        $r4 = <org.apache.commons.httpclient.methods.multipart.Part: byte[] CRLF_BYTES>;

        virtualinvoke r3.<java.io.OutputStream: void write(byte[])>($r4);

        $r5 = <org.apache.commons.httpclient.methods.multipart.Part: byte[] CONTENT_TYPE_BYTES>;

        virtualinvoke r3.<java.io.OutputStream: void write(byte[])>($r5);

        $r6 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: byte[] getAsciiBytes(java.lang.String)>($r2);

        virtualinvoke r3.<java.io.OutputStream: void write(byte[])>($r6);

        $r7 = virtualinvoke r1.<org.apache.commons.httpclient.methods.multipart.Part: java.lang.String getCharSet()>();

        if $r7 == null goto label1;

        $r8 = <org.apache.commons.httpclient.methods.multipart.Part: byte[] CHARSET_BYTES>;

        virtualinvoke r3.<java.io.OutputStream: void write(byte[])>($r8);

        $r9 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: byte[] getAsciiBytes(java.lang.String)>($r7);

        virtualinvoke r3.<java.io.OutputStream: void write(byte[])>($r9);

     label1:
        return;
    }

    protected void sendTransferEncodingHeader(java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r3;
        byte[] $r4, $r5, $r6;
        org.apache.commons.httpclient.methods.multipart.Part r1;
        org.apache.commons.logging.Log $r0;
        java.lang.String $r2;

        r1 := @this: org.apache.commons.httpclient.methods.multipart.Part;

        r3 := @parameter0: java.io.OutputStream;

        $r0 = <org.apache.commons.httpclient.methods.multipart.Part: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter sendTransferEncodingHeader(OutputStream out)");

        $r2 = virtualinvoke r1.<org.apache.commons.httpclient.methods.multipart.Part: java.lang.String getTransferEncoding()>();

        if $r2 == null goto label1;

        $r4 = <org.apache.commons.httpclient.methods.multipart.Part: byte[] CRLF_BYTES>;

        virtualinvoke r3.<java.io.OutputStream: void write(byte[])>($r4);

        $r5 = <org.apache.commons.httpclient.methods.multipart.Part: byte[] CONTENT_TRANSFER_ENCODING_BYTES>;

        virtualinvoke r3.<java.io.OutputStream: void write(byte[])>($r5);

        $r6 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: byte[] getAsciiBytes(java.lang.String)>($r2);

        virtualinvoke r3.<java.io.OutputStream: void write(byte[])>($r6);

     label1:
        return;
    }

    protected void sendEndOfHeader(java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r1;
        byte[] $r2, $r3;
        org.apache.commons.httpclient.methods.multipart.Part r4;
        org.apache.commons.logging.Log $r0;

        r4 := @this: org.apache.commons.httpclient.methods.multipart.Part;

        r1 := @parameter0: java.io.OutputStream;

        $r0 = <org.apache.commons.httpclient.methods.multipart.Part: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter sendEndOfHeader(OutputStream out)");

        $r2 = <org.apache.commons.httpclient.methods.multipart.Part: byte[] CRLF_BYTES>;

        virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r2);

        $r3 = <org.apache.commons.httpclient.methods.multipart.Part: byte[] CRLF_BYTES>;

        virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r3);

        return;
    }

    protected abstract void sendData(java.io.OutputStream) throws java.io.IOException;

    protected abstract long lengthOfData() throws java.io.IOException;

    protected void sendEnd(java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r1;
        byte[] $r2;
        org.apache.commons.httpclient.methods.multipart.Part r3;
        org.apache.commons.logging.Log $r0;

        r3 := @this: org.apache.commons.httpclient.methods.multipart.Part;

        r1 := @parameter0: java.io.OutputStream;

        $r0 = <org.apache.commons.httpclient.methods.multipart.Part: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter sendEnd(OutputStream out)");

        $r2 = <org.apache.commons.httpclient.methods.multipart.Part: byte[] CRLF_BYTES>;

        virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r2);

        return;
    }

    public void send(java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r2;
        org.apache.commons.logging.Log $r0;
        org.apache.commons.httpclient.methods.multipart.Part r1;

        r1 := @this: org.apache.commons.httpclient.methods.multipart.Part;

        r2 := @parameter0: java.io.OutputStream;

        $r0 = <org.apache.commons.httpclient.methods.multipart.Part: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter send(OutputStream out)");

        virtualinvoke r1.<org.apache.commons.httpclient.methods.multipart.Part: void sendStart(java.io.OutputStream)>(r2);

        virtualinvoke r1.<org.apache.commons.httpclient.methods.multipart.Part: void sendDispositionHeader(java.io.OutputStream)>(r2);

        virtualinvoke r1.<org.apache.commons.httpclient.methods.multipart.Part: void sendContentTypeHeader(java.io.OutputStream)>(r2);

        virtualinvoke r1.<org.apache.commons.httpclient.methods.multipart.Part: void sendTransferEncodingHeader(java.io.OutputStream)>(r2);

        virtualinvoke r1.<org.apache.commons.httpclient.methods.multipart.Part: void sendEndOfHeader(java.io.OutputStream)>(r2);

        virtualinvoke r1.<org.apache.commons.httpclient.methods.multipart.Part: void sendData(java.io.OutputStream)>(r2);

        virtualinvoke r1.<org.apache.commons.httpclient.methods.multipart.Part: void sendEnd(java.io.OutputStream)>(r2);

        return;
    }

    public long length() throws java.io.IOException
    {
        java.io.ByteArrayOutputStream $r3;
        long $l0, $l3, $l4, $l5;
        org.apache.commons.httpclient.methods.multipart.Part r1;
        byte $b1;
        int $i2, $i6;
        org.apache.commons.logging.Log $r0;

        r1 := @this: org.apache.commons.httpclient.methods.multipart.Part;

        $r0 = <org.apache.commons.httpclient.methods.multipart.Part: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter length()");

        $l0 = virtualinvoke r1.<org.apache.commons.httpclient.methods.multipart.Part: long lengthOfData()>();

        $b1 = $l0 cmp 0L;

        $i6 = (int) $b1;

        if $i6 >= 0 goto label1;

        return -1L;

     label1:
        $r3 = new java.io.ByteArrayOutputStream;

        specialinvoke $r3.<java.io.ByteArrayOutputStream: void <init>()>();

        virtualinvoke r1.<org.apache.commons.httpclient.methods.multipart.Part: void sendStart(java.io.OutputStream)>($r3);

        virtualinvoke r1.<org.apache.commons.httpclient.methods.multipart.Part: void sendDispositionHeader(java.io.OutputStream)>($r3);

        virtualinvoke r1.<org.apache.commons.httpclient.methods.multipart.Part: void sendContentTypeHeader(java.io.OutputStream)>($r3);

        virtualinvoke r1.<org.apache.commons.httpclient.methods.multipart.Part: void sendTransferEncodingHeader(java.io.OutputStream)>($r3);

        virtualinvoke r1.<org.apache.commons.httpclient.methods.multipart.Part: void sendEndOfHeader(java.io.OutputStream)>($r3);

        virtualinvoke r1.<org.apache.commons.httpclient.methods.multipart.Part: void sendEnd(java.io.OutputStream)>($r3);

        $i2 = virtualinvoke $r3.<java.io.ByteArrayOutputStream: int size()>();

        $l3 = (long) $i2;

        $l4 = virtualinvoke r1.<org.apache.commons.httpclient.methods.multipart.Part: long lengthOfData()>();

        $l5 = $l3 + $l4;

        return $l5;
    }

    public java.lang.String toString()
    {
        org.apache.commons.httpclient.methods.multipart.Part r0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.httpclient.methods.multipart.Part;

        $r1 = virtualinvoke r0.<org.apache.commons.httpclient.methods.multipart.Part: java.lang.String getName()>();

        return $r1;
    }

    public static void sendParts(java.io.OutputStream, org.apache.commons.httpclient.methods.multipart.Part[]) throws java.io.IOException
    {
        java.io.OutputStream r0;
        org.apache.commons.httpclient.methods.multipart.Part[] r1;
        byte[] $r2;

        r0 := @parameter0: java.io.OutputStream;

        r1 := @parameter1: org.apache.commons.httpclient.methods.multipart.Part[];

        $r2 = <org.apache.commons.httpclient.methods.multipart.Part: byte[] DEFAULT_BOUNDARY_BYTES>;

        staticinvoke <org.apache.commons.httpclient.methods.multipart.Part: void sendParts(java.io.OutputStream,org.apache.commons.httpclient.methods.multipart.Part[],byte[])>(r0, r1, $r2);

        return;
    }

    public static void sendParts(java.io.OutputStream, org.apache.commons.httpclient.methods.multipart.Part[], byte[]) throws java.io.IOException
    {
        org.apache.commons.httpclient.methods.multipart.Part[] r0;
        java.io.OutputStream r3;
        byte[] r1, $r4, $r5, $r6;
        java.lang.IllegalArgumentException $r2, $r9;
        org.apache.commons.httpclient.methods.multipart.Part $r7, $r8;
        int $i0, $i1, i2;

        r3 := @parameter0: java.io.OutputStream;

        r0 := @parameter1: org.apache.commons.httpclient.methods.multipart.Part[];

        r1 := @parameter2: byte[];

        if r0 != null goto label1;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parts may not be null");

        throw $r9;

     label1:
        if r1 == null goto label2;

        $i0 = lengthof r1;

        if $i0 != 0 goto label3;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("partBoundary may not be empty");

        throw $r2;

     label3:
        i2 = 0;

     label4:
        $i1 = lengthof r0;

        if i2 >= $i1 goto label5;

        $r7 = r0[i2];

        virtualinvoke $r7.<org.apache.commons.httpclient.methods.multipart.Part: void setPartBoundary(byte[])>(r1);

        $r8 = r0[i2];

        virtualinvoke $r8.<org.apache.commons.httpclient.methods.multipart.Part: void send(java.io.OutputStream)>(r3);

        i2 = i2 + 1;

        goto label4;

     label5:
        $r4 = <org.apache.commons.httpclient.methods.multipart.Part: byte[] EXTRA_BYTES>;

        virtualinvoke r3.<java.io.OutputStream: void write(byte[])>($r4);

        virtualinvoke r3.<java.io.OutputStream: void write(byte[])>(r1);

        $r5 = <org.apache.commons.httpclient.methods.multipart.Part: byte[] EXTRA_BYTES>;

        virtualinvoke r3.<java.io.OutputStream: void write(byte[])>($r5);

        $r6 = <org.apache.commons.httpclient.methods.multipart.Part: byte[] CRLF_BYTES>;

        virtualinvoke r3.<java.io.OutputStream: void write(byte[])>($r6);

        return;
    }

    public static long getLengthOfParts(org.apache.commons.httpclient.methods.multipart.Part[]) throws java.io.IOException
    {
        org.apache.commons.httpclient.methods.multipart.Part[] r0;
        byte[] $r1;
        long $l0;

        r0 := @parameter0: org.apache.commons.httpclient.methods.multipart.Part[];

        $r1 = <org.apache.commons.httpclient.methods.multipart.Part: byte[] DEFAULT_BOUNDARY_BYTES>;

        $l0 = staticinvoke <org.apache.commons.httpclient.methods.multipart.Part: long getLengthOfParts(org.apache.commons.httpclient.methods.multipart.Part[],byte[])>(r0, $r1);

        return $l0;
    }

    public static long getLengthOfParts(org.apache.commons.httpclient.methods.multipart.Part[], byte[]) throws java.io.IOException
    {
        byte[] $r2, r3, $r4, $r5;
        long $l2, $l4, $l6, $l8, $l9, l11, l13, l14, l15, l16;
        org.apache.commons.httpclient.methods.multipart.Part $r6, $r7;
        byte $b10;
        int $i0, $i1, $i3, $i5, $i7, i12, $i17;
        org.apache.commons.httpclient.methods.multipart.Part[] r1;
        java.lang.IllegalArgumentException $r9;
        org.apache.commons.logging.Log $r0;

        r1 := @parameter0: org.apache.commons.httpclient.methods.multipart.Part[];

        r3 := @parameter1: byte[];

        $r0 = <org.apache.commons.httpclient.methods.multipart.Part: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("getLengthOfParts(Parts[])");

        if r1 != null goto label1;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parts may not be null");

        throw $r9;

     label1:
        l11 = 0L;

        i12 = 0;

     label2:
        $i0 = lengthof r1;

        if i12 >= $i0 goto label4;

        $r6 = r1[i12];

        virtualinvoke $r6.<org.apache.commons.httpclient.methods.multipart.Part: void setPartBoundary(byte[])>(r3);

        $r7 = r1[i12];

        $l9 = virtualinvoke $r7.<org.apache.commons.httpclient.methods.multipart.Part: long length()>();

        $b10 = $l9 cmp 0L;

        $i17 = (int) $b10;

        if $i17 >= 0 goto label3;

        return -1L;

     label3:
        l11 = l11 + $l9;

        i12 = i12 + 1;

        goto label2;

     label4:
        $r2 = <org.apache.commons.httpclient.methods.multipart.Part: byte[] EXTRA_BYTES>;

        $i1 = lengthof $r2;

        $l2 = (long) $i1;

        l13 = l11 + $l2;

        $i3 = lengthof r3;

        $l4 = (long) $i3;

        l14 = l13 + $l4;

        $r4 = <org.apache.commons.httpclient.methods.multipart.Part: byte[] EXTRA_BYTES>;

        $i5 = lengthof $r4;

        $l6 = (long) $i5;

        l15 = l14 + $l6;

        $r5 = <org.apache.commons.httpclient.methods.multipart.Part: byte[] CRLF_BYTES>;

        $i7 = lengthof $r5;

        $l8 = (long) $i7;

        l16 = l15 + $l8;

        return l16;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        byte[] $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        java.lang.Class $r0, $r11;
        org.apache.commons.logging.Log $r1;

        <org.apache.commons.httpclient.methods.multipart.Part: java.lang.String CONTENT_TRANSFER_ENCODING> = "Content-Transfer-Encoding: ";

        <org.apache.commons.httpclient.methods.multipart.Part: java.lang.String CHARSET> = "; charset=";

        <org.apache.commons.httpclient.methods.multipart.Part: java.lang.String CONTENT_TYPE> = "Content-Type: ";

        <org.apache.commons.httpclient.methods.multipart.Part: java.lang.String CONTENT_DISPOSITION> = "Content-Disposition: form-data; name=";

        <org.apache.commons.httpclient.methods.multipart.Part: java.lang.String EXTRA> = "--";

        <org.apache.commons.httpclient.methods.multipart.Part: java.lang.String QUOTE> = "\"";

        <org.apache.commons.httpclient.methods.multipart.Part: java.lang.String CRLF> = "\r\n";

        <org.apache.commons.httpclient.methods.multipart.Part: java.lang.String BOUNDARY> = "----------------314159265358979323846";

        $r0 = <org.apache.commons.httpclient.methods.multipart.Part: java.lang.Class class$org$apache$commons$httpclient$methods$multipart$Part>;

        if $r0 != null goto label1;

        $r11 = staticinvoke <org.apache.commons.httpclient.methods.multipart.Part: java.lang.Class class$(java.lang.String)>("org.apache.commons.httpclient.methods.multipart.Part");

        <org.apache.commons.httpclient.methods.multipart.Part: java.lang.Class class$org$apache$commons$httpclient$methods$multipart$Part> = $r11;

        goto label2;

     label1:
        $r11 = <org.apache.commons.httpclient.methods.multipart.Part: java.lang.Class class$org$apache$commons$httpclient$methods$multipart$Part>;

     label2:
        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r11);

        <org.apache.commons.httpclient.methods.multipart.Part: org.apache.commons.logging.Log LOG> = $r1;

        $r2 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: byte[] getAsciiBytes(java.lang.String)>("----------------314159265358979323846");

        <org.apache.commons.httpclient.methods.multipart.Part: byte[] BOUNDARY_BYTES> = $r2;

        $r3 = <org.apache.commons.httpclient.methods.multipart.Part: byte[] BOUNDARY_BYTES>;

        <org.apache.commons.httpclient.methods.multipart.Part: byte[] DEFAULT_BOUNDARY_BYTES> = $r3;

        $r4 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: byte[] getAsciiBytes(java.lang.String)>("\r\n");

        <org.apache.commons.httpclient.methods.multipart.Part: byte[] CRLF_BYTES> = $r4;

        $r5 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: byte[] getAsciiBytes(java.lang.String)>("\"");

        <org.apache.commons.httpclient.methods.multipart.Part: byte[] QUOTE_BYTES> = $r5;

        $r6 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: byte[] getAsciiBytes(java.lang.String)>("--");

        <org.apache.commons.httpclient.methods.multipart.Part: byte[] EXTRA_BYTES> = $r6;

        $r7 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: byte[] getAsciiBytes(java.lang.String)>("Content-Disposition: form-data; name=");

        <org.apache.commons.httpclient.methods.multipart.Part: byte[] CONTENT_DISPOSITION_BYTES> = $r7;

        $r8 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: byte[] getAsciiBytes(java.lang.String)>("Content-Type: ");

        <org.apache.commons.httpclient.methods.multipart.Part: byte[] CONTENT_TYPE_BYTES> = $r8;

        $r9 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: byte[] getAsciiBytes(java.lang.String)>("; charset=");

        <org.apache.commons.httpclient.methods.multipart.Part: byte[] CHARSET_BYTES> = $r9;

        $r10 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: byte[] getAsciiBytes(java.lang.String)>("Content-Transfer-Encoding: ");

        <org.apache.commons.httpclient.methods.multipart.Part: byte[] CONTENT_TRANSFER_ENCODING_BYTES> = $r10;

        return;
    }
}
