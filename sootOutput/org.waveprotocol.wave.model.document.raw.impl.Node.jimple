public abstract class org.waveprotocol.wave.model.document.raw.impl.Node extends java.lang.Object implements org.waveprotocol.wave.model.document.Doc$N
{
    org.waveprotocol.wave.model.document.raw.impl.Element parent;
    org.waveprotocol.wave.model.document.raw.impl.Node firstChild;
    org.waveprotocol.wave.model.document.raw.impl.Node lastChild;
    org.waveprotocol.wave.model.document.raw.impl.Node previousSibling;
    org.waveprotocol.wave.model.document.raw.impl.Node nextSibling;
    private org.waveprotocol.wave.model.util.OffsetList$Container indexingContainer;

    public void <init>()
    {
        org.waveprotocol.wave.model.document.raw.impl.Node r0;

        r0 := @this: org.waveprotocol.wave.model.document.raw.impl.Node;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.waveprotocol.wave.model.document.raw.impl.Element getParentElement()
    {
        org.waveprotocol.wave.model.document.raw.impl.Node r0;
        org.waveprotocol.wave.model.document.raw.impl.Element $r1;

        r0 := @this: org.waveprotocol.wave.model.document.raw.impl.Node;

        $r1 = r0.<org.waveprotocol.wave.model.document.raw.impl.Node: org.waveprotocol.wave.model.document.raw.impl.Element parent>;

        return $r1;
    }

    public abstract short getNodeType();

    public org.waveprotocol.wave.model.document.raw.impl.Node getFirstChild()
    {
        org.waveprotocol.wave.model.document.raw.impl.Node r0, $r1;

        r0 := @this: org.waveprotocol.wave.model.document.raw.impl.Node;

        $r1 = r0.<org.waveprotocol.wave.model.document.raw.impl.Node: org.waveprotocol.wave.model.document.raw.impl.Node firstChild>;

        return $r1;
    }

    public org.waveprotocol.wave.model.document.raw.impl.Node getLastChild()
    {
        org.waveprotocol.wave.model.document.raw.impl.Node r0, $r1;

        r0 := @this: org.waveprotocol.wave.model.document.raw.impl.Node;

        $r1 = r0.<org.waveprotocol.wave.model.document.raw.impl.Node: org.waveprotocol.wave.model.document.raw.impl.Node lastChild>;

        return $r1;
    }

    public org.waveprotocol.wave.model.document.raw.impl.Node getPreviousSibling()
    {
        org.waveprotocol.wave.model.document.raw.impl.Node r0, $r1;

        r0 := @this: org.waveprotocol.wave.model.document.raw.impl.Node;

        $r1 = r0.<org.waveprotocol.wave.model.document.raw.impl.Node: org.waveprotocol.wave.model.document.raw.impl.Node previousSibling>;

        return $r1;
    }

    public org.waveprotocol.wave.model.document.raw.impl.Node getNextSibling()
    {
        org.waveprotocol.wave.model.document.raw.impl.Node r0, $r1;

        r0 := @this: org.waveprotocol.wave.model.document.raw.impl.Node;

        $r1 = r0.<org.waveprotocol.wave.model.document.raw.impl.Node: org.waveprotocol.wave.model.document.raw.impl.Node nextSibling>;

        return $r1;
    }

    public org.waveprotocol.wave.model.util.OffsetList$Container getIndexingContainer()
    {
        org.waveprotocol.wave.model.document.raw.impl.Node r0;
        org.waveprotocol.wave.model.util.OffsetList$Container $r1;

        r0 := @this: org.waveprotocol.wave.model.document.raw.impl.Node;

        $r1 = r0.<org.waveprotocol.wave.model.document.raw.impl.Node: org.waveprotocol.wave.model.util.OffsetList$Container indexingContainer>;

        return $r1;
    }

    public void setIndexingContainer(org.waveprotocol.wave.model.util.OffsetList$Container)
    {
        org.waveprotocol.wave.model.document.raw.impl.Node r0;
        org.waveprotocol.wave.model.util.OffsetList$Container r1;

        r0 := @this: org.waveprotocol.wave.model.document.raw.impl.Node;

        r1 := @parameter0: org.waveprotocol.wave.model.util.OffsetList$Container;

        r0.<org.waveprotocol.wave.model.document.raw.impl.Node: org.waveprotocol.wave.model.util.OffsetList$Container indexingContainer> = r1;

        return;
    }

    public boolean isOrIsAncestorOf(org.waveprotocol.wave.model.document.raw.impl.Node)
    {
        org.waveprotocol.wave.model.document.raw.impl.Node r0, r1;

        r0 := @this: org.waveprotocol.wave.model.document.raw.impl.Node;

        r1 := @parameter0: org.waveprotocol.wave.model.document.raw.impl.Node;

     label1:
        if r1 == null goto label3;

        if r0 != r1 goto label2;

        return 1;

     label2:
        r1 = virtualinvoke r1.<org.waveprotocol.wave.model.document.raw.impl.Node: org.waveprotocol.wave.model.document.raw.impl.Element getParentElement()>();

        goto label1;

     label3:
        return 0;
    }

    public abstract int calculateSize();

    public abstract org.waveprotocol.wave.model.document.raw.impl.Element asElement();

    public abstract org.waveprotocol.wave.model.document.raw.impl.Text asText();
}
