public class org.apache.batik.dom.AbstractDocument$XPathExpr extends java.lang.Object implements org.w3c.dom.xpath.XPathExpression
{
    protected org.apache.xpath.XPath xpath;
    protected org.w3c.dom.xpath.XPathNSResolver resolver;
    protected org.apache.batik.dom.AbstractDocument$XPathExpr$NSPrefixResolver prefixResolver;
    protected org.apache.xpath.XPathContext context;
    private final org.apache.batik.dom.AbstractDocument this$0;

    public void <init>(org.apache.batik.dom.AbstractDocument, java.lang.String, org.w3c.dom.xpath.XPathNSResolver) throws org.w3c.dom.DOMException, org.w3c.dom.xpath.XPathException
    {
        java.lang.Object[] $r9;
        org.apache.xpath.XPath $r4;
        javax.xml.transform.TransformerException $r8;
        org.w3c.dom.xpath.XPathNSResolver r2;
        org.apache.batik.dom.AbstractDocument r1;
        org.w3c.dom.xpath.XPathException $r11;
        org.apache.batik.dom.AbstractDocument$XPathExpr r0;
        org.apache.xpath.XPathContext $r7;
        java.lang.String r5, $r10;
        org.apache.batik.dom.AbstractDocument$XPathExpr$NSPrefixResolver $r3, $r6;

        r0 := @this: org.apache.batik.dom.AbstractDocument$XPathExpr;

        r1 := @parameter0: org.apache.batik.dom.AbstractDocument;

        r5 := @parameter1: java.lang.String;

        r2 := @parameter2: org.w3c.dom.xpath.XPathNSResolver;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.batik.dom.AbstractDocument$XPathExpr: org.apache.batik.dom.AbstractDocument this$0> = r1;

        r0.<org.apache.batik.dom.AbstractDocument$XPathExpr: org.w3c.dom.xpath.XPathNSResolver resolver> = r2;

        $r3 = new org.apache.batik.dom.AbstractDocument$XPathExpr$NSPrefixResolver;

        specialinvoke $r3.<org.apache.batik.dom.AbstractDocument$XPathExpr$NSPrefixResolver: void <init>(org.apache.batik.dom.AbstractDocument$XPathExpr)>(r0);

        r0.<org.apache.batik.dom.AbstractDocument$XPathExpr: org.apache.batik.dom.AbstractDocument$XPathExpr$NSPrefixResolver prefixResolver> = $r3;

     label1:
        $r4 = new org.apache.xpath.XPath;

        $r6 = r0.<org.apache.batik.dom.AbstractDocument$XPathExpr: org.apache.batik.dom.AbstractDocument$XPathExpr$NSPrefixResolver prefixResolver>;

        specialinvoke $r4.<org.apache.xpath.XPath: void <init>(java.lang.String,javax.xml.transform.SourceLocator,org.apache.xml.utils.PrefixResolver,int)>(r5, null, $r6, 0);

        r0.<org.apache.batik.dom.AbstractDocument$XPathExpr: org.apache.xpath.XPath xpath> = $r4;

        $r7 = new org.apache.xpath.XPathContext;

        specialinvoke $r7.<org.apache.xpath.XPathContext: void <init>()>();

        r0.<org.apache.batik.dom.AbstractDocument$XPathExpr: org.apache.xpath.XPathContext context> = $r7;

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        $r9 = newarray (java.lang.Object)[2];

        $r9[0] = r5;

        $r10 = virtualinvoke $r8.<java.lang.Throwable: java.lang.String getMessage()>();

        $r9[1] = $r10;

        $r11 = virtualinvoke r1.<org.apache.batik.dom.AbstractDocument: org.w3c.dom.xpath.XPathException createXPathException(short,java.lang.String,java.lang.Object[])>(51, "xpath.invalid.expression", $r9);

        throw $r11;

     label4:
        return;

        catch javax.xml.transform.TransformerException from label1 to label2 with label3;
    }

    public java.lang.Object evaluate(org.w3c.dom.Node, short, java.lang.Object) throws org.w3c.dom.xpath.XPathException, org.w3c.dom.DOMException
    {
        java.lang.Integer $r47, $r48, $r49, $r50;
        org.w3c.dom.Document $r31;
        org.apache.xpath.XPath $r14, $r41;
        org.apache.batik.dom.AbstractDocument$XPathExpr r1;
        org.apache.xpath.objects.XObject $r15;
        java.lang.Object[] $r2, $r6, $r26, $r34, $r40;
        javax.xml.transform.TransformerException $r33, $r39;
        short $s0, $s1, s2, $s3, $s4, $s6;
        org.apache.xpath.XPathContext $r11, $r13;
        java.lang.String $r9, $r29, $r37, $r43, $r44;
        org.apache.batik.dom.AbstractDocument $r4, $r8, $r25, $r28, $r32, $r36, $r42;
        org.w3c.dom.xpath.XPathException $r38, $r45;
        org.apache.batik.dom.AbstractDocument$XPathExpr$Result $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24;
        org.apache.batik.dom.AbstractDocument$XPathExpr$NSPrefixResolver $r12;
        org.w3c.dom.Node r0;
        org.w3c.dom.DOMException $r5, $r10, $r30;
        int $i5, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16;
        java.lang.Object r46;

        r1 := @this: org.apache.batik.dom.AbstractDocument$XPathExpr;

        r0 := @parameter0: org.w3c.dom.Node;

        s2 := @parameter1: short;

        r46 := @parameter2: java.lang.Object;

        $s0 = interfaceinvoke r0.<org.w3c.dom.Node: short getNodeType()>();

        $i7 = (int) $s0;

        if $i7 == 9 goto label01;

        $r31 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Document getOwnerDocument()>();

        $r32 = r1.<org.apache.batik.dom.AbstractDocument$XPathExpr: org.apache.batik.dom.AbstractDocument this$0>;

        if $r31 != $r32 goto label02;

     label01:
        $s1 = interfaceinvoke r0.<org.w3c.dom.Node: short getNodeType()>();

        $i8 = (int) $s1;

        if $i8 != 9 goto label03;

        $r25 = r1.<org.apache.batik.dom.AbstractDocument$XPathExpr: org.apache.batik.dom.AbstractDocument this$0>;

        if r0 == $r25 goto label03;

     label02:
        $r28 = r1.<org.apache.batik.dom.AbstractDocument$XPathExpr: org.apache.batik.dom.AbstractDocument this$0>;

        $r26 = newarray (java.lang.Object)[2];

        $r47 = new java.lang.Integer;

        $s6 = interfaceinvoke r0.<org.w3c.dom.Node: short getNodeType()>();

        $i9 = (int) $s6;

        specialinvoke $r47.<java.lang.Integer: void <init>(int)>($i9);

        $r26[0] = $r47;

        $r29 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $r26[1] = $r29;

        $r30 = virtualinvoke $r28.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(4, "node.from.wrong.document", $r26);

        throw $r30;

     label03:
        $i10 = (int) s2;

        if $i10 < 0 goto label04;

        $i11 = (int) s2;

        if $i11 <= 9 goto label05;

     label04:
        $r4 = r1.<org.apache.batik.dom.AbstractDocument$XPathExpr: org.apache.batik.dom.AbstractDocument this$0>;

        $r2 = newarray (java.lang.Object)[1];

        $r48 = new java.lang.Integer;

        $i12 = (int) s2;

        specialinvoke $r48.<java.lang.Integer: void <init>(int)>($i12);

        $r2[0] = $r48;

        $r5 = virtualinvoke $r4.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(9, "xpath.invalid.result.type", $r2);

        throw $r5;

     label05:
        $s3 = interfaceinvoke r0.<org.w3c.dom.Node: short getNodeType()>();

        $i13 = (int) $s3;

        tableswitch($i13)
        {
            case 5: goto label06;
            case 6: goto label06;
            case 7: goto label07;
            case 8: goto label07;
            case 9: goto label07;
            case 10: goto label06;
            case 11: goto label06;
            case 12: goto label06;
            default: goto label07;
        };

     label06:
        $r8 = r1.<org.apache.batik.dom.AbstractDocument$XPathExpr: org.apache.batik.dom.AbstractDocument this$0>;

        $r6 = newarray (java.lang.Object)[2];

        $r49 = new java.lang.Integer;

        $s4 = interfaceinvoke r0.<org.w3c.dom.Node: short getNodeType()>();

        $i14 = (int) $s4;

        specialinvoke $r49.<java.lang.Integer: void <init>(int)>($i14);

        $r6[0] = $r49;

        $r9 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $r6[1] = $r9;

        $r10 = virtualinvoke $r8.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(9, "xpath.invalid.context.node", $r6);

        throw $r10;

     label07:
        $r11 = r1.<org.apache.batik.dom.AbstractDocument$XPathExpr: org.apache.xpath.XPathContext context>;

        virtualinvoke $r11.<org.apache.xpath.XPathContext: void reset()>();

     label08:
        $r14 = r1.<org.apache.batik.dom.AbstractDocument$XPathExpr: org.apache.xpath.XPath xpath>;

        $r13 = r1.<org.apache.batik.dom.AbstractDocument$XPathExpr: org.apache.xpath.XPathContext context>;

        $r12 = r1.<org.apache.batik.dom.AbstractDocument$XPathExpr: org.apache.batik.dom.AbstractDocument$XPathExpr$NSPrefixResolver prefixResolver>;

        $r15 = virtualinvoke $r14.<org.apache.xpath.XPath: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext,org.w3c.dom.Node,org.apache.xml.utils.PrefixResolver)>($r13, r0, $r12);

     label09:
        goto label11;

     label10:
        $r39 := @caughtexception;

        $r42 = r1.<org.apache.batik.dom.AbstractDocument$XPathExpr: org.apache.batik.dom.AbstractDocument this$0>;

        $r40 = newarray (java.lang.Object)[2];

        $r41 = r1.<org.apache.batik.dom.AbstractDocument$XPathExpr: org.apache.xpath.XPath xpath>;

        $r43 = virtualinvoke $r41.<org.apache.xpath.XPath: java.lang.String getPatternString()>();

        $r40[0] = $r43;

        $r44 = virtualinvoke $r39.<java.lang.Throwable: java.lang.String getMessage()>();

        $r40[1] = $r44;

        $r45 = virtualinvoke $r42.<org.apache.batik.dom.AbstractDocument: org.w3c.dom.xpath.XPathException createXPathException(short,java.lang.String,java.lang.Object[])>(51, "xpath.error", $r40);

        throw $r45;

     label11:
        $i15 = (int) s2;

        tableswitch($i15)
        {
            case 0: goto label17;
            case 1: goto label14;
            case 2: goto label16;
            case 3: goto label13;
            case 4: goto label15;
            case 5: goto label15;
            case 6: goto label15;
            case 7: goto label15;
            case 8: goto label12;
            case 9: goto label12;
            default: goto label22;
        };

     label12:
        $r16 = virtualinvoke r1.<org.apache.batik.dom.AbstractDocument$XPathExpr: org.apache.batik.dom.AbstractDocument$XPathExpr$Result convertSingleNode(org.apache.xpath.objects.XObject,short)>($r15, s2);

        return $r16;

     label13:
        $r18 = virtualinvoke r1.<org.apache.batik.dom.AbstractDocument$XPathExpr: org.apache.batik.dom.AbstractDocument$XPathExpr$Result convertBoolean(org.apache.xpath.objects.XObject)>($r15);

        return $r18;

     label14:
        $r20 = virtualinvoke r1.<org.apache.batik.dom.AbstractDocument$XPathExpr: org.apache.batik.dom.AbstractDocument$XPathExpr$Result convertNumber(org.apache.xpath.objects.XObject)>($r15);

        return $r20;

     label15:
        $r17 = virtualinvoke r1.<org.apache.batik.dom.AbstractDocument$XPathExpr: org.apache.batik.dom.AbstractDocument$XPathExpr$Result convertNodeIterator(org.apache.xpath.objects.XObject,short)>($r15, s2);

        return $r17;

     label16:
        $r19 = virtualinvoke r1.<org.apache.batik.dom.AbstractDocument$XPathExpr: org.apache.batik.dom.AbstractDocument$XPathExpr$Result convertString(org.apache.xpath.objects.XObject)>($r15);

        return $r19;

     label17:
        $i5 = virtualinvoke $r15.<org.apache.xpath.objects.XObject: int getType()>();

        tableswitch($i5)
        {
            case 1: goto label18;
            case 2: goto label19;
            case 3: goto label20;
            case 4: goto label21;
            default: goto label22;
        };

     label18:
        $r24 = virtualinvoke r1.<org.apache.batik.dom.AbstractDocument$XPathExpr: org.apache.batik.dom.AbstractDocument$XPathExpr$Result convertBoolean(org.apache.xpath.objects.XObject)>($r15);

        return $r24;

     label19:
        $r23 = virtualinvoke r1.<org.apache.batik.dom.AbstractDocument$XPathExpr: org.apache.batik.dom.AbstractDocument$XPathExpr$Result convertNumber(org.apache.xpath.objects.XObject)>($r15);

        return $r23;

     label20:
        $r22 = virtualinvoke r1.<org.apache.batik.dom.AbstractDocument$XPathExpr: org.apache.batik.dom.AbstractDocument$XPathExpr$Result convertString(org.apache.xpath.objects.XObject)>($r15);

        return $r22;

     label21:
        $r21 = virtualinvoke r1.<org.apache.batik.dom.AbstractDocument$XPathExpr: org.apache.batik.dom.AbstractDocument$XPathExpr$Result convertNodeIterator(org.apache.xpath.objects.XObject,short)>($r15, 4);

        return $r21;

     label22:
        goto label24;

     label23:
        $r33 := @caughtexception;

        $r36 = r1.<org.apache.batik.dom.AbstractDocument$XPathExpr: org.apache.batik.dom.AbstractDocument this$0>;

        $r34 = newarray (java.lang.Object)[2];

        $r50 = new java.lang.Integer;

        $i16 = (int) s2;

        specialinvoke $r50.<java.lang.Integer: void <init>(int)>($i16);

        $r34[0] = $r50;

        $r37 = virtualinvoke $r33.<java.lang.Throwable: java.lang.String getMessage()>();

        $r34[1] = $r37;

        $r38 = virtualinvoke $r36.<org.apache.batik.dom.AbstractDocument: org.w3c.dom.xpath.XPathException createXPathException(short,java.lang.String,java.lang.Object[])>(52, "xpath.cannot.convert.result", $r34);

        throw $r38;

     label24:
        return null;

        catch javax.xml.transform.TransformerException from label08 to label09 with label10;
        catch javax.xml.transform.TransformerException from label11 to label22 with label23;
    }

    protected org.apache.batik.dom.AbstractDocument$XPathExpr$Result convertSingleNode(org.apache.xpath.objects.XObject, short) throws javax.xml.transform.TransformerException
    {
        org.apache.batik.dom.AbstractDocument$XPathExpr$Result $r0;
        short s0;
        org.w3c.dom.NodeList $r3;
        org.w3c.dom.Node $r4;
        org.apache.xpath.objects.XObject r2;
        org.apache.batik.dom.AbstractDocument$XPathExpr r1;

        r1 := @this: org.apache.batik.dom.AbstractDocument$XPathExpr;

        r2 := @parameter0: org.apache.xpath.objects.XObject;

        s0 := @parameter1: short;

        $r0 = new org.apache.batik.dom.AbstractDocument$XPathExpr$Result;

        $r3 = virtualinvoke r2.<org.apache.xpath.objects.XObject: org.w3c.dom.NodeList nodelist()>();

        $r4 = interfaceinvoke $r3.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(0);

        specialinvoke $r0.<org.apache.batik.dom.AbstractDocument$XPathExpr$Result: void <init>(org.apache.batik.dom.AbstractDocument$XPathExpr,org.w3c.dom.Node,short)>(r1, $r4, s0);

        return $r0;
    }

    protected org.apache.batik.dom.AbstractDocument$XPathExpr$Result convertBoolean(org.apache.xpath.objects.XObject) throws javax.xml.transform.TransformerException
    {
        org.apache.batik.dom.AbstractDocument$XPathExpr$Result $r0;
        org.apache.xpath.objects.XObject r2;
        org.apache.batik.dom.AbstractDocument$XPathExpr r1;
        boolean $z0;

        r1 := @this: org.apache.batik.dom.AbstractDocument$XPathExpr;

        r2 := @parameter0: org.apache.xpath.objects.XObject;

        $r0 = new org.apache.batik.dom.AbstractDocument$XPathExpr$Result;

        $z0 = virtualinvoke r2.<org.apache.xpath.objects.XObject: boolean bool()>();

        specialinvoke $r0.<org.apache.batik.dom.AbstractDocument$XPathExpr$Result: void <init>(org.apache.batik.dom.AbstractDocument$XPathExpr,boolean)>(r1, $z0);

        return $r0;
    }

    protected org.apache.batik.dom.AbstractDocument$XPathExpr$Result convertNumber(org.apache.xpath.objects.XObject) throws javax.xml.transform.TransformerException
    {
        org.apache.batik.dom.AbstractDocument$XPathExpr$Result $r0;
        org.apache.xpath.objects.XObject r2;
        org.apache.batik.dom.AbstractDocument$XPathExpr r1;
        double $d0;

        r1 := @this: org.apache.batik.dom.AbstractDocument$XPathExpr;

        r2 := @parameter0: org.apache.xpath.objects.XObject;

        $r0 = new org.apache.batik.dom.AbstractDocument$XPathExpr$Result;

        $d0 = virtualinvoke r2.<org.apache.xpath.objects.XObject: double num()>();

        specialinvoke $r0.<org.apache.batik.dom.AbstractDocument$XPathExpr$Result: void <init>(org.apache.batik.dom.AbstractDocument$XPathExpr,double)>(r1, $d0);

        return $r0;
    }

    protected org.apache.batik.dom.AbstractDocument$XPathExpr$Result convertString(org.apache.xpath.objects.XObject)
    {
        org.apache.batik.dom.AbstractDocument$XPathExpr$Result $r0;
        org.apache.xpath.objects.XObject r2;
        java.lang.String $r3;
        org.apache.batik.dom.AbstractDocument$XPathExpr r1;

        r1 := @this: org.apache.batik.dom.AbstractDocument$XPathExpr;

        r2 := @parameter0: org.apache.xpath.objects.XObject;

        $r0 = new org.apache.batik.dom.AbstractDocument$XPathExpr$Result;

        $r3 = virtualinvoke r2.<org.apache.xpath.objects.XObject: java.lang.String str()>();

        specialinvoke $r0.<org.apache.batik.dom.AbstractDocument$XPathExpr$Result: void <init>(org.apache.batik.dom.AbstractDocument$XPathExpr,java.lang.String)>(r1, $r3);

        return $r0;
    }

    protected org.apache.batik.dom.AbstractDocument$XPathExpr$Result convertNodeIterator(org.apache.xpath.objects.XObject, short) throws javax.xml.transform.TransformerException
    {
        org.apache.batik.dom.AbstractDocument$XPathExpr$Result $r0;
        short s0;
        org.w3c.dom.NodeList $r3;
        org.apache.xpath.objects.XObject r2;
        org.apache.batik.dom.AbstractDocument$XPathExpr r1;

        r1 := @this: org.apache.batik.dom.AbstractDocument$XPathExpr;

        r2 := @parameter0: org.apache.xpath.objects.XObject;

        s0 := @parameter1: short;

        $r0 = new org.apache.batik.dom.AbstractDocument$XPathExpr$Result;

        $r3 = virtualinvoke r2.<org.apache.xpath.objects.XObject: org.w3c.dom.NodeList nodelist()>();

        specialinvoke $r0.<org.apache.batik.dom.AbstractDocument$XPathExpr$Result: void <init>(org.apache.batik.dom.AbstractDocument$XPathExpr,org.w3c.dom.NodeList,short)>(r1, $r3, s0);

        return $r0;
    }

    static org.apache.batik.dom.AbstractDocument access$000(org.apache.batik.dom.AbstractDocument$XPathExpr)
    {
        org.apache.batik.dom.AbstractDocument $r1;
        org.apache.batik.dom.AbstractDocument$XPathExpr r0;

        r0 := @parameter0: org.apache.batik.dom.AbstractDocument$XPathExpr;

        $r1 = r0.<org.apache.batik.dom.AbstractDocument$XPathExpr: org.apache.batik.dom.AbstractDocument this$0>;

        return $r1;
    }
}
