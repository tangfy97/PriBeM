public class org.eclipse.jdt.internal.compiler.parser.Parser extends java.lang.Object implements org.eclipse.jdt.internal.compiler.parser.ParserBasicInformation, org.eclipse.jdt.internal.compiler.parser.TerminalTokens, org.eclipse.jdt.internal.compiler.ast.OperatorIds, org.eclipse.jdt.internal.compiler.lookup.TypeIds
{
    protected static final int THIS_CALL;
    protected static final int SUPER_CALL;
    public static char[] asb;
    public static char[] asr;
    protected static final int AstStackIncrement;
    public static char[] base_action;
    public static final int BracketKinds;
    public static short[] check_table;
    public static final int CurlyBracket;
    private static final boolean DEBUG;
    private static final boolean DEBUG_AUTOMATON;
    private static final java.lang.String EOF_TOKEN;
    private static final java.lang.String ERROR_TOKEN;
    protected static final int ExpressionStackIncrement;
    protected static final int GenericsStackIncrement;
    private static final java.lang.String FILEPREFIX;
    public static char[] in_symb;
    private static final java.lang.String INVALID_CHARACTER;
    public static char[] lhs;
    public static java.lang.String[] name;
    public static char[] nasb;
    public static char[] nasr;
    public static char[] non_terminal_index;
    private static final java.lang.String READABLE_NAMES_FILE;
    private static final java.lang.String READABLE_NAMES_FILE_NAME;
    public static java.lang.String[] readableName;
    public static byte[] rhs;
    public static int[] reverse_index;
    public static char[] recovery_templates_index;
    public static char[] recovery_templates;
    public static char[] statements_recovery_filter;
    public static long[] rules_compliance;
    public static final int RoundBracket;
    public static byte[] scope_la;
    public static char[] scope_lhs;
    public static char[] scope_prefix;
    public static char[] scope_rhs;
    public static char[] scope_state;
    public static char[] scope_state_set;
    public static char[] scope_suffix;
    public static final int SquareBracket;
    protected static final int StackIncrement;
    public static char[] term_action;
    public static byte[] term_check;
    public static char[] terminal_index;
    private static final java.lang.String UNEXPECTED_EOF;
    public static boolean VERBOSE_RECOVERY;
    protected int astLengthPtr;
    protected int[] astLengthStack;
    protected int astPtr;
    protected org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack;
    public org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit;
    protected org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement;
    public int currentToken;
    protected boolean diet;
    protected int dietInt;
    protected int endPosition;
    protected int endStatementPosition;
    protected int expressionLengthPtr;
    protected int[] expressionLengthStack;
    protected int expressionPtr;
    protected org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack;
    public int firstToken;
    protected int genericsIdentifiersLengthPtr;
    protected int[] genericsIdentifiersLengthStack;
    protected int genericsLengthPtr;
    protected int[] genericsLengthStack;
    protected int genericsPtr;
    protected org.eclipse.jdt.internal.compiler.ast.ASTNode[] genericsStack;
    protected boolean hasError;
    protected boolean hasReportedError;
    protected int identifierLengthPtr;
    protected int[] identifierLengthStack;
    protected long[] identifierPositionStack;
    protected int identifierPtr;
    protected char[][] identifierStack;
    protected boolean ignoreNextOpeningBrace;
    protected int intPtr;
    protected int[] intStack;
    public int lastAct;
    protected int lastCheckPoint;
    protected int lastErrorEndPosition;
    protected int lastErrorEndPositionBeforeRecovery;
    protected int lastIgnoredToken;
    protected int nextIgnoredToken;
    protected int listLength;
    protected int listTypeParameterLength;
    protected int lParenPos;
    protected int rParenPos;
    protected int modifiers;
    protected int modifiersSourceStart;
    protected int[] nestedMethod;
    protected int nestedType;
    protected int dimensions;
    org.eclipse.jdt.internal.compiler.ast.ASTNode[] noAstNodes;
    org.eclipse.jdt.internal.compiler.ast.Expression[] noExpressions;
    protected boolean optimizeStringLiterals;
    protected org.eclipse.jdt.internal.compiler.impl.CompilerOptions options;
    protected org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter;
    protected int rBraceStart;
    protected int rBraceEnd;
    protected int rBraceSuccessorStart;
    protected int realBlockPtr;
    protected int[] realBlockStack;
    protected int recoveredStaticInitializerStart;
    public org.eclipse.jdt.internal.compiler.impl.ReferenceContext referenceContext;
    public boolean reportOnlyOneSyntaxError;
    public boolean reportSyntaxErrorIsRequired;
    protected boolean restartRecovery;
    protected boolean annotationRecoveryActivated;
    protected int lastPosistion;
    public boolean methodRecoveryActivated;
    protected boolean statementRecoveryActivated;
    protected org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] recoveredTypes;
    protected int recoveredTypePtr;
    protected int nextTypeStart;
    protected org.eclipse.jdt.internal.compiler.ast.TypeDeclaration pendingRecoveredType;
    public org.eclipse.jdt.internal.compiler.parser.RecoveryScanner recoveryScanner;
    public org.eclipse.jdt.internal.compiler.parser.Scanner scanner;
    protected int[] stack;
    protected int stateStackTop;
    protected int synchronizedBlockSourceStart;
    protected int[] variablesCounter;
    protected boolean checkExternalizeStrings;
    protected boolean recordStringLiterals;
    public org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc;
    public org.eclipse.jdt.internal.compiler.parser.JavadocParser javadocParser;
    protected int lastJavadocEnd;
    public org.eclipse.jdt.internal.compiler.ReadManager readManager;
    static java.lang.Class class$0;

    static void <clinit>()
    {
        java.io.IOException $r0;
        java.lang.String $r2;
        java.lang.ExceptionInInitializerError $r1;

        <org.eclipse.jdt.internal.compiler.parser.Parser: java.lang.String UNEXPECTED_EOF> = "Unexpected End Of File";

        <org.eclipse.jdt.internal.compiler.parser.Parser: int StackIncrement> = 255;

        <org.eclipse.jdt.internal.compiler.parser.Parser: int SquareBracket> = 1;

        <org.eclipse.jdt.internal.compiler.parser.Parser: int RoundBracket> = 0;

        <org.eclipse.jdt.internal.compiler.parser.Parser: java.lang.String READABLE_NAMES_FILE_NAME> = "org.eclipse.jdt.internal.compiler.parser.readableNames";

        <org.eclipse.jdt.internal.compiler.parser.Parser: java.lang.String READABLE_NAMES_FILE> = "readableNames";

        <org.eclipse.jdt.internal.compiler.parser.Parser: java.lang.String INVALID_CHARACTER> = "Invalid Character";

        <org.eclipse.jdt.internal.compiler.parser.Parser: java.lang.String FILEPREFIX> = "parser";

        <org.eclipse.jdt.internal.compiler.parser.Parser: int GenericsStackIncrement> = 10;

        <org.eclipse.jdt.internal.compiler.parser.Parser: int ExpressionStackIncrement> = 100;

        <org.eclipse.jdt.internal.compiler.parser.Parser: java.lang.String ERROR_TOKEN> = "$error";

        <org.eclipse.jdt.internal.compiler.parser.Parser: java.lang.String EOF_TOKEN> = "$eof";

        <org.eclipse.jdt.internal.compiler.parser.Parser: boolean DEBUG_AUTOMATON> = 0;

        <org.eclipse.jdt.internal.compiler.parser.Parser: boolean DEBUG> = 0;

        <org.eclipse.jdt.internal.compiler.parser.Parser: int CurlyBracket> = 2;

        <org.eclipse.jdt.internal.compiler.parser.Parser: int BracketKinds> = 3;

        <org.eclipse.jdt.internal.compiler.parser.Parser: int AstStackIncrement> = 100;

        <org.eclipse.jdt.internal.compiler.parser.Parser: int SUPER_CALL> = 2;

        <org.eclipse.jdt.internal.compiler.parser.Parser: int THIS_CALL> = 3;

        <org.eclipse.jdt.internal.compiler.parser.Parser: char[] asb> = null;

        <org.eclipse.jdt.internal.compiler.parser.Parser: char[] asr> = null;

        <org.eclipse.jdt.internal.compiler.parser.Parser: char[] base_action> = null;

        <org.eclipse.jdt.internal.compiler.parser.Parser: short[] check_table> = null;

        <org.eclipse.jdt.internal.compiler.parser.Parser: char[] in_symb> = null;

        <org.eclipse.jdt.internal.compiler.parser.Parser: char[] lhs> = null;

        <org.eclipse.jdt.internal.compiler.parser.Parser: java.lang.String[] name> = null;

        <org.eclipse.jdt.internal.compiler.parser.Parser: char[] nasb> = null;

        <org.eclipse.jdt.internal.compiler.parser.Parser: char[] nasr> = null;

        <org.eclipse.jdt.internal.compiler.parser.Parser: char[] non_terminal_index> = null;

        <org.eclipse.jdt.internal.compiler.parser.Parser: java.lang.String[] readableName> = null;

        <org.eclipse.jdt.internal.compiler.parser.Parser: byte[] rhs> = null;

        <org.eclipse.jdt.internal.compiler.parser.Parser: int[] reverse_index> = null;

        <org.eclipse.jdt.internal.compiler.parser.Parser: char[] recovery_templates_index> = null;

        <org.eclipse.jdt.internal.compiler.parser.Parser: char[] recovery_templates> = null;

        <org.eclipse.jdt.internal.compiler.parser.Parser: char[] statements_recovery_filter> = null;

        <org.eclipse.jdt.internal.compiler.parser.Parser: long[] rules_compliance> = null;

        <org.eclipse.jdt.internal.compiler.parser.Parser: byte[] scope_la> = null;

        <org.eclipse.jdt.internal.compiler.parser.Parser: char[] scope_lhs> = null;

        <org.eclipse.jdt.internal.compiler.parser.Parser: char[] scope_prefix> = null;

        <org.eclipse.jdt.internal.compiler.parser.Parser: char[] scope_rhs> = null;

        <org.eclipse.jdt.internal.compiler.parser.Parser: char[] scope_state> = null;

        <org.eclipse.jdt.internal.compiler.parser.Parser: char[] scope_state_set> = null;

        <org.eclipse.jdt.internal.compiler.parser.Parser: char[] scope_suffix> = null;

        <org.eclipse.jdt.internal.compiler.parser.Parser: char[] term_action> = null;

        <org.eclipse.jdt.internal.compiler.parser.Parser: byte[] term_check> = null;

        <org.eclipse.jdt.internal.compiler.parser.Parser: char[] terminal_index> = null;

        <org.eclipse.jdt.internal.compiler.parser.Parser: boolean VERBOSE_RECOVERY> = 0;

     label1:
        staticinvoke <org.eclipse.jdt.internal.compiler.parser.Parser: void initTables()>();

     label2:
        goto label4;

     label3:
        $r0 := @caughtexception;

        $r1 = new java.lang.ExceptionInInitializerError;

        $r2 = virtualinvoke $r0.<java.io.IOException: java.lang.String getMessage()>();

        specialinvoke $r1.<java.lang.ExceptionInInitializerError: void <init>(java.lang.String)>($r2);

        throw $r1;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static int asi(int)
    {
        int i0, $i1, $i3;
        char[] $r0;
        char $c2;

        i0 := @parameter0: int;

        $r0 = <org.eclipse.jdt.internal.compiler.parser.Parser: char[] asb>;

        $i1 = staticinvoke <org.eclipse.jdt.internal.compiler.parser.Parser: int original_state(int)>(i0);

        $c2 = $r0[$i1];

        $i3 = (int) $c2;

        return $i3;
    }

    public static final short base_check(int)
    {
        short $s2;
        int i0, $i1;
        short[] $r0;

        i0 := @parameter0: int;

        $r0 = <org.eclipse.jdt.internal.compiler.parser.Parser: short[] check_table>;

        $i1 = i0 - 701;

        $s2 = $r0[$i1];

        return $s2;
    }

    private static final void buildFile(java.lang.String, java.util.List)
    {
        java.lang.Throwable $r9;
        java.lang.StringBuffer $r14, $r16;
        java.lang.String r2, $r6, $r15, $r17;
        boolean $z0;
        java.io.PrintStream $r13;
        java.util.Iterator $r4;
        java.io.BufferedWriter $r0, r12;
        java.io.FileWriter $r1;
        java.io.IOException $r7, $r8, $r10, $r11;
        java.util.List r3;
        java.lang.Object $r5;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.util.List;

        r12 = null;

     label01:
        $r0 = new java.io.BufferedWriter;

        $r1 = new java.io.FileWriter;

        specialinvoke $r1.<java.io.FileWriter: void <init>(java.lang.String)>(r2);

        specialinvoke $r0.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r1);

        r12 = $r0;

        $r4 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

        goto label03;

     label02:
        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r5);

        virtualinvoke $r0.<java.io.BufferedWriter: void write(java.lang.String)>($r6);

     label03:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label02;

        virtualinvoke $r0.<java.io.BufferedWriter: void flush()>();

     label04:
        goto label15;

     label05:
        $r11 := @caughtexception;

     label06:
        if r12 == null goto label19;

     label07:
        virtualinvoke r12.<java.io.BufferedWriter: void close()>();

     label08:
        goto label19;

     label09:
        $r10 := @caughtexception;

        goto label19;

     label10:
        $r9 := @caughtexception;

        if r12 == null goto label14;

     label11:
        virtualinvoke r12.<java.io.BufferedWriter: void close()>();

     label12:
        goto label14;

     label13:
        $r8 := @caughtexception;

     label14:
        throw $r9;

     label15:
        if $r0 == null goto label19;

     label16:
        virtualinvoke $r0.<java.io.BufferedWriter: void close()>();

     label17:
        goto label19;

     label18:
        $r7 := @caughtexception;

     label19:
        $r13 = <java.lang.System: java.io.PrintStream out>;

        $r14 = new java.lang.StringBuffer;

        $r15 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r2);

        specialinvoke $r14.<java.lang.StringBuffer: void <init>(java.lang.String)>($r15);

        $r16 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" creation complete");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>($r17);

        return;

        catch java.io.IOException from label01 to label04 with label05;
        catch java.io.IOException from label07 to label08 with label09;
        catch java.lang.Throwable from label01 to label06 with label10;
        catch java.io.IOException from label11 to label12 with label13;
        catch java.io.IOException from label16 to label17 with label18;
    }

    private static final java.lang.String[] buildFileForName(java.lang.String, java.lang.String)
    {
        boolean $z0, $z1, z2;
        java.lang.String[] $r9, r12;
        java.lang.StringBuffer r13, $r15, $r16, $r17;
        int $i0, $i1, $i2, $i3, $i5, $i6, $i7, i8, i9, i10, $i11, $i13, $i14, $i16, $i18, $i20, $i21;
        java.lang.String $r1, $r3, $r4, r6, $r7, $r10, r11, r14;
        char $c4;
        char[] $r8;

        r6 := @parameter0: java.lang.String;

        r11 := @parameter1: java.lang.String;

        $i0 = virtualinvoke r11.<java.lang.String: int length()>();

        r12 = newarray (java.lang.String)[$i0];

        r12[0] = null;

        i8 = 1;

        $r15 = new java.lang.StringBuffer;

        specialinvoke $r15.<java.lang.StringBuffer: void <init>()>();

        $i1 = virtualinvoke r11.<java.lang.String: int indexOf(java.lang.String)>("name[]");

        $i2 = virtualinvoke r11.<java.lang.String: int indexOf(int,int)>(34, $i1);

        $i3 = virtualinvoke r11.<java.lang.String: int indexOf(java.lang.String,int)>("};", $i2);

        $r1 = virtualinvoke r11.<java.lang.String: java.lang.String substring(int,int)>($i2, $i3);

        z2 = 0;

        $i13 = (int) -1;

        i9 = $i13;

        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>()>();

        r13 = $r16;

        i10 = 0;

        goto label8;

     label1:
        $c4 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(i10);

        $i14 = (int) $c4;

        if $i14 != 34 goto label6;

        $i16 = (int) -1;

        if i9 != $i16 goto label2;

        i9 = i10 + 1;

        goto label6;

     label2:
        if z2 == 0 goto label3;

        virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

        $i5 = i8;

        i8 = i8 + 1;

        $r4 = virtualinvoke r13.<java.lang.StringBuffer: java.lang.String toString()>();

        r12[$i5] = $r4;

        $r17 = new java.lang.StringBuffer;

        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        r13 = $r17;

     label3:
        $r3 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(i9, i10);

        r14 = $r3;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("$error");

        if $z0 == 0 goto label4;

        r14 = "Invalid Character";

        goto label5;

     label4:
        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("$eof");

        if $z1 == 0 goto label5;

        r14 = "Unexpected End Of File";

     label5:
        virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r14);

        virtualinvoke r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r14);

        z2 = 1;

        $i18 = (int) -1;

        i9 = $i18;

     label6:
        $i20 = (int) -1;

        if i9 != $i20 goto label7;

        $i21 = (int) $c4;

        if $i21 != 43 goto label7;

        z2 = 0;

     label7:
        i10 = i10 + 1;

     label8:
        $i11 = virtualinvoke $r1.<java.lang.String: int length()>();

        if i10 < $i11 goto label1;

        $i6 = virtualinvoke r13.<java.lang.StringBuffer: int length()>();

        if $i6 <= 0 goto label9;

        $i7 = i8;

        i8 = i8 + 1;

        $r10 = virtualinvoke r13.<java.lang.StringBuffer: java.lang.String toString()>();

        r12[$i7] = $r10;

     label9:
        $r7 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        $r8 = virtualinvoke $r7.<java.lang.String: char[] toCharArray()>();

        staticinvoke <org.eclipse.jdt.internal.compiler.parser.Parser: void buildFileForTable(java.lang.String,char[])>(r6, $r8);

        $r9 = newarray (java.lang.String)[i8];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r12, 0, $r9, 0, i8);

        return $r9;
    }

    private static void buildFileForReadableName(java.lang.String, char[], char[], java.lang.String[], java.lang.String[])
    {
        boolean $z0, $z1, $z2, $z3;
        java.lang.String[] r1, r3;
        java.util.ArrayList $r23;
        java.lang.StringBuffer $r20, $r24, $r25;
        int $i0, $i1, $i2, $i5, i6, $i7, i8, i9, $i10, $i11, $i12, $i13, $i14;
        java.lang.String $r4, $r5, $r8, $r10, $r11, $r12, $r13, $r14, $r15, $r17, $r19, $r21, r22;
        java.io.PrintStream $r18;
        boolean[] r2;
        char $c3, c4;
        char[] r6, r7;

        r22 := @parameter0: java.lang.String;

        r7 := @parameter1: char[];

        r6 := @parameter2: char[];

        r1 := @parameter3: java.lang.String[];

        r3 := @parameter4: java.lang.String[];

        $r23 = new java.util.ArrayList;

        specialinvoke $r23.<java.util.ArrayList: void <init>()>();

        $i0 = lengthof r1;

        r2 = newarray (boolean)[$i0];

        i6 = 0;

        goto label3;

     label1:
        $r5 = "1";

        $r4 = r3[i6];

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label2;

        $i1 = i6 + 1;

        $r8 = r3[$i1];

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r8);

        $c3 = r7[$i2];

        $i11 = (int) $c3;

        c4 = r6[$i11];

        $r24 = new java.lang.StringBuffer;

        specialinvoke $r24.<java.lang.StringBuffer: void <init>()>();

        $i12 = (int) c4;

        $z1 = r2[$i12];

        if $z1 != 0 goto label2;

        $i13 = (int) c4;

        r2[$i13] = 1;

        $i14 = (int) c4;

        $r10 = r1[$i14];

        virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(61);

        $i5 = i6 + 2;

        $r11 = r3[$i5];

        $r12 = virtualinvoke $r11.<java.lang.String: java.lang.String trim()>();

        virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

        $r13 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r24);

        virtualinvoke $r23.<java.util.ArrayList: boolean add(java.lang.Object)>($r13);

     label2:
        i6 = i6 + 3;

     label3:
        $i7 = lengthof r3;

        if i6 < $i7 goto label1;

        i8 = 1;

        goto label5;

     label4:
        i8 = i8 + 1;

     label5:
        $r15 = "Invalid Character";

        $r14 = r1[i8];

        $z2 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>($r14);

        if $z2 == 0 goto label4;

        i9 = i8 + 1;

        goto label8;

     label6:
        $z3 = r2[i9];

        if $z3 != 0 goto label7;

        $r18 = <java.lang.System: java.io.PrintStream out>;

        $r25 = new java.lang.StringBuffer;

        $r17 = r1[i9];

        $r19 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r17);

        specialinvoke $r25.<java.lang.StringBuffer: void <init>(java.lang.String)>($r19);

        $r20 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" has no readable name");

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r18.<java.io.PrintStream: void println(java.lang.String)>($r21);

     label7:
        i9 = i9 + 1;

     label8:
        $i10 = lengthof r2;

        if i9 < $i10 goto label6;

        staticinvoke <java.util.Collections: void sort(java.util.List)>($r23);

        staticinvoke <org.eclipse.jdt.internal.compiler.parser.Parser: void buildFile(java.lang.String,java.util.List)>(r22, $r23);

        return;
    }

    private static void buildFilesForRecoveryTemplates(java.lang.String, java.lang.String, char[], char[], java.lang.String[], char[], java.lang.String[])
    {
        int[] $r3;
        boolean $z0, $z1;
        java.lang.String[] r2, r5, $r20;
        java.util.StringTokenizer $r26;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7, $i8, $i9, $i10, $i11, $i12, $i14, $i15, i17, i18, i19, i20, i21, i22, $i23, $i24, i25, $i26, $i28;
        java.lang.String $r6, $r7, $r9, $r10, $r11, $r14, $r15, r22, r23, $r25;
        char $c6, $c13, $c16;
        char[] r0, r1, r4, r8, $r16, $r17, $r18, $r19, $r21, r24;

        r22 := @parameter0: java.lang.String;

        r23 := @parameter1: java.lang.String;

        r0 := @parameter2: char[];

        r1 := @parameter3: char[];

        r2 := @parameter4: java.lang.String[];

        r8 := @parameter5: char[];

        r5 := @parameter6: java.lang.String[];

        $r3 = staticinvoke <org.eclipse.jdt.internal.compiler.parser.Parser: int[] computeReverseTable(char[],char[],java.lang.String[])>(r0, r1, r2);

        $i0 = lengthof r1;

        r4 = newarray (char)[$i0];

        $i1 = lengthof r1;

        r24 = newarray (char)[$i1];

        i17 = 0;

        i18 = 0;

        goto label10;

     label01:
        $r7 = "3";

        $r6 = r5[i18];

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label09;

        i19 = lengthof r24;

        $i2 = i17 + 1;

        if i19 != $i2 goto label02;

        $r19 = r24;

        $i15 = i19 * 2;

        $r18 = newarray (char)[$i15];

        r24 = $r18;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r19, 0, $r18, 0, i19);

     label02:
        $i3 = i17;

        i17 = i17 + 1;

        r24[$i3] = 0;

        $i4 = i18 + 1;

        $r9 = r5[$i4];

        $i5 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r9);

        $c16 = r8[$i5];

        $c6 = (char) i17;

        $i26 = (int) $c16;

        r4[$i26] = $c6;

        $i7 = i18 + 2;

        $r10 = r5[$i7];

        $r11 = virtualinvoke $r10.<java.lang.String: java.lang.String trim()>();

        $r26 = new java.util.StringTokenizer;

        $r25 = new java.lang.String;

        specialinvoke $r25.<java.lang.String: void <init>(java.lang.String)>($r11);

        specialinvoke $r26.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>($r25, " ");

        $i8 = virtualinvoke $r26.<java.util.StringTokenizer: int countTokens()>();

        $r20 = newarray (java.lang.String)[$i8];

        i20 = 0;

        goto label04;

     label03:
        $i9 = i20;

        i20 = i20 + 1;

        $r14 = virtualinvoke $r26.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r20[$i9] = $r14;

     label04:
        $z1 = virtualinvoke $r26.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z1 != 0 goto label03;

        i21 = 0;

        goto label08;

     label05:
        $r15 = $r20[i21];

        $i10 = staticinvoke <org.eclipse.jdt.internal.compiler.parser.Parser: int getSymbol(java.lang.String,java.lang.String[],int[])>($r15, r2, $r3);

        $i28 = (int) -1;

        if $i10 <= $i28 goto label07;

        i22 = lengthof r24;

        $i11 = i17 + 1;

        if i22 != $i11 goto label06;

        $r17 = r24;

        $i14 = i22 * 2;

        $r16 = newarray (char)[$i14];

        r24 = $r16;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r17, 0, $r16, 0, i22);

     label06:
        $i12 = i17;

        i17 = i17 + 1;

        $c13 = (char) $i10;

        r24[$i12] = $c13;

     label07:
        i21 = i21 + 1;

     label08:
        $i23 = lengthof $r20;

        if i21 < $i23 goto label05;

     label09:
        i18 = i18 + 3;

     label10:
        $i24 = lengthof r5;

        if i18 < $i24 goto label01;

        i25 = i17 + 1;

        r24[i17] = 0;

        $r21 = newarray (char)[i25];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r24, 0, $r21, 0, i25);

        staticinvoke <org.eclipse.jdt.internal.compiler.parser.Parser: void buildFileForTable(java.lang.String,char[])>(r22, r4);

        staticinvoke <org.eclipse.jdt.internal.compiler.parser.Parser: void buildFileForTable(java.lang.String,char[])>(r23, $r21);

        return;
    }

    private static void buildFilesForStatementsRecoveryFilter(java.lang.String, char[], char[], java.lang.String[])
    {
        java.lang.String[] r2;
        int $i0, $i1, $i2, i4, $i5, $i6;
        java.lang.String $r3, $r4, $r6, r7;
        boolean $z0;
        char c3;
        char[] r0, r1, r5;

        r7 := @parameter0: java.lang.String;

        r0 := @parameter1: char[];

        r5 := @parameter2: char[];

        r2 := @parameter3: java.lang.String[];

        $i0 = lengthof r0;

        r1 = newarray (char)[$i0];

        i4 = 0;

        goto label3;

     label1:
        $r4 = "4";

        $r3 = r2[i4];

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label2;

        $i1 = i4 + 1;

        $r6 = r2[$i1];

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r6);

        c3 = r5[$i2];

        $i6 = (int) c3;

        r1[$i6] = 1;

     label2:
        i4 = i4 + 3;

     label3:
        $i5 = lengthof r2;

        if i4 < $i5 goto label1;

        staticinvoke <org.eclipse.jdt.internal.compiler.parser.Parser: void buildFileForTable(java.lang.String,char[])>(r7, r1);

        return;
    }

    private static void buildFileForCompliance(java.lang.String, int, java.lang.String[])
    {
        byte[] r0;
        byte $b10, $b14, $b18, $b22, $b26, $b30, $b34, $b37;
        boolean $z0, $z1, $z2, $z3;
        java.lang.String[] r1;
        long l6, $l8, $l12, $l16, $l20, $l24, $l28, $l32, l39, l40, l41, l42, l43, l44, l45, l46;
        int i0, $i1, $i2, $i3, $i4, i5, $i7, $i9, $i11, $i13, $i15, $i17, $i19, $i21, $i23, $i25, $i27, $i29, $i31, $i33, $i35, $i36, $i38;
        java.lang.String $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, r10;

        r10 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String[];

        $i1 = i0 * 8;

        r0 = newarray (byte)[$i1];

        i5 = 0;

        goto label6;

     label1:
        $r3 = "2";

        $r2 = r1[i5];

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label5;

        $i2 = i5 + 1;

        $r4 = r1[$i2];

        $i3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r4);

        $i4 = i5 + 2;

        $r5 = r1[$i4];

        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String trim()>();

        l6 = 0L;

        l46 = 0L;

        l45 = 0L;

        l44 = 0L;

        l43 = 0L;

        l42 = 0L;

        l41 = 0L;

        l40 = 0L;

        l39 = 0L;

        $r7 = "1.4";

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z1 == 0 goto label2;

        l6 = 3145728L;

        l46 = 3145728L;

        l45 = 3145728L;

        l44 = 3145728L;

        l43 = 3145728L;

        l42 = 3145728L;

        l41 = 3145728L;

        l40 = 3145728L;

        l39 = 3145728L;

        goto label4;

     label2:
        $r8 = "1.5";

        $z2 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z2 == 0 goto label3;

        l6 = 3211264L;

        l46 = 3211264L;

        l45 = 3211264L;

        l44 = 3211264L;

        l43 = 3211264L;

        l42 = 3211264L;

        l41 = 3211264L;

        l40 = 3211264L;

        l39 = 3211264L;

        goto label4;

     label3:
        $r9 = "recovery";

        $z3 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z3 == 0 goto label4;

        l6 = 9223372036854775807L;

        l46 = 9223372036854775807L;

        l45 = 9223372036854775807L;

        l44 = 9223372036854775807L;

        l43 = 9223372036854775807L;

        l42 = 9223372036854775807L;

        l41 = 9223372036854775807L;

        l40 = 9223372036854775807L;

        l39 = 9223372036854775807L;

     label4:
        $i7 = $i3 * 8;

        $l8 = l45 >>> 56;

        $i9 = (int) $l8;

        $b10 = (byte) $i9;

        r0[$i7] = $b10;

        $i11 = $i7 + 1;

        $l12 = l43 >>> 48;

        $i13 = (int) $l12;

        $b14 = (byte) $i13;

        r0[$i11] = $b14;

        $i15 = $i7 + 2;

        $l16 = l39 >>> 40;

        $i17 = (int) $l16;

        $b18 = (byte) $i17;

        r0[$i15] = $b18;

        $i19 = $i7 + 3;

        $l20 = l46 >>> 32;

        $i21 = (int) $l20;

        $b22 = (byte) $i21;

        r0[$i19] = $b22;

        $i23 = $i7 + 4;

        $l24 = l42 >>> 24;

        $i25 = (int) $l24;

        $b26 = (byte) $i25;

        r0[$i23] = $b26;

        $i27 = $i7 + 5;

        $l28 = l40 >>> 16;

        $i29 = (int) $l28;

        $b30 = (byte) $i29;

        r0[$i27] = $b30;

        $i31 = $i7 + 6;

        $l32 = l44 >>> 8;

        $i33 = (int) $l32;

        $b34 = (byte) $i33;

        r0[$i31] = $b34;

        $i35 = $i7 + 7;

        $i36 = (int) l41;

        $b37 = (byte) $i36;

        r0[$i35] = $b37;

     label5:
        i5 = i5 + 3;

     label6:
        $i38 = lengthof r1;

        if i5 < $i38 goto label1;

        staticinvoke <org.eclipse.jdt.internal.compiler.parser.Parser: void buildFileForTable(java.lang.String,byte[])>(r10, r0);

        return;
    }

    private static final void buildFileForTable(java.lang.String, byte[])
    {
        java.lang.Throwable $r5;
        java.io.PrintStream $r9;
        byte[] r2;
        java.io.FileOutputStream $r0, r8;
        java.io.IOException $r3, $r4, $r6, $r7;
        java.lang.StringBuffer $r10, $r12;
        java.lang.String r1, $r11, $r13;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: byte[];

        r8 = null;

     label01:
        $r0 = new java.io.FileOutputStream;

        specialinvoke $r0.<java.io.FileOutputStream: void <init>(java.lang.String)>(r1);

        r8 = $r0;

        virtualinvoke $r0.<java.io.FileOutputStream: void write(byte[])>(r2);

     label02:
        goto label13;

     label03:
        $r7 := @caughtexception;

     label04:
        if r8 == null goto label17;

     label05:
        virtualinvoke r8.<java.io.FileOutputStream: void close()>();

     label06:
        goto label17;

     label07:
        $r6 := @caughtexception;

        goto label17;

     label08:
        $r5 := @caughtexception;

        if r8 == null goto label12;

     label09:
        virtualinvoke r8.<java.io.FileOutputStream: void close()>();

     label10:
        goto label12;

     label11:
        $r4 := @caughtexception;

     label12:
        throw $r5;

     label13:
        if $r0 == null goto label17;

     label14:
        virtualinvoke $r0.<java.io.FileOutputStream: void close()>();

     label15:
        goto label17;

     label16:
        $r3 := @caughtexception;

     label17:
        $r9 = <java.lang.System: java.io.PrintStream out>;

        $r10 = new java.lang.StringBuffer;

        $r11 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        specialinvoke $r10.<java.lang.StringBuffer: void <init>(java.lang.String)>($r11);

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" creation complete");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r13);

        return;

        catch java.io.IOException from label01 to label02 with label03;
        catch java.io.IOException from label05 to label06 with label07;
        catch java.lang.Throwable from label01 to label04 with label08;
        catch java.io.IOException from label09 to label10 with label11;
        catch java.io.IOException from label14 to label15 with label16;
    }

    private static final void buildFileForTable(java.lang.String, char[])
    {
        java.lang.Throwable $r6;
        byte[] r1;
        byte $b5, $b10;
        java.lang.StringBuffer $r13, $r16;
        int $i0, $i1, $i2, $i4, $i6, $i7, $i11, i12, $i13;
        java.lang.String r3, $r12, $r14;
        java.io.PrintStream $r10;
        java.io.FileOutputStream r9, $r15;
        char $c3, $c8, $c9;
        java.io.IOException $r4, $r5, $r7, $r8;
        char[] r0;

        r3 := @parameter0: java.lang.String;

        r0 := @parameter1: char[];

        $i0 = lengthof r0;

        $i1 = $i0 * 2;

        r1 = newarray (byte)[$i1];

        i12 = 0;

        goto label02;

     label01:
        $i6 = 2 * i12;

        $c3 = r0[i12];

        $i13 = (int) $c3;

        $i4 = $i13 >>> 8;

        $b5 = (byte) $i4;

        r1[$i6] = $b5;

        $i7 = 2 * i12;

        $i11 = $i7 + 1;

        $c8 = r0[i12];

        $c9 = $c8 & 255;

        $b10 = (byte) $c9;

        r1[$i11] = $b10;

        i12 = i12 + 1;

     label02:
        $i2 = lengthof r0;

        if i12 < $i2 goto label01;

        r9 = null;

     label03:
        $r15 = new java.io.FileOutputStream;

        specialinvoke $r15.<java.io.FileOutputStream: void <init>(java.lang.String)>(r3);

        r9 = $r15;

        virtualinvoke $r15.<java.io.FileOutputStream: void write(byte[])>(r1);

     label04:
        goto label15;

     label05:
        $r8 := @caughtexception;

     label06:
        if r9 == null goto label19;

     label07:
        virtualinvoke r9.<java.io.FileOutputStream: void close()>();

     label08:
        goto label19;

     label09:
        $r7 := @caughtexception;

        goto label19;

     label10:
        $r6 := @caughtexception;

        if r9 == null goto label14;

     label11:
        virtualinvoke r9.<java.io.FileOutputStream: void close()>();

     label12:
        goto label14;

     label13:
        $r5 := @caughtexception;

     label14:
        throw $r6;

     label15:
        if $r15 == null goto label19;

     label16:
        virtualinvoke $r15.<java.io.FileOutputStream: void close()>();

     label17:
        goto label19;

     label18:
        $r4 := @caughtexception;

     label19:
        $r10 = <java.lang.System: java.io.PrintStream out>;

        $r16 = new java.lang.StringBuffer;

        $r12 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r3);

        specialinvoke $r16.<java.lang.StringBuffer: void <init>(java.lang.String)>($r12);

        $r13 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" creation complete");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r14);

        return;

        catch java.io.IOException from label03 to label04 with label05;
        catch java.io.IOException from label07 to label08 with label09;
        catch java.lang.Throwable from label03 to label06 with label10;
        catch java.io.IOException from label11 to label12 with label13;
        catch java.io.IOException from label16 to label17 with label18;
    }

    private static final byte[] buildFileOfByteFor(java.lang.String, java.lang.String, java.lang.String[])
    {
        byte[] $r4, r6;
        java.lang.String[] r0;
        byte $b5;
        int $i0, $i1, $i2, $i3, $i4, i6, i7;
        java.lang.String r1, $r2, $r3, r5;
        boolean $z0, $z1;

        r5 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r0 := @parameter2: java.lang.String[];

        i6 = 0;

     label1:
        $i0 = i6;

        i6 = i6 + 1;

        $r2 = r0[$i0];

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $i1 = lengthof r0;

        r6 = newarray (byte)[$i1];

        i7 = 0;

        goto label3;

     label2:
        $i3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

        $i4 = i7;

        i7 = i7 + 1;

        $b5 = (byte) $i3;

        r6[$i4] = $b5;

     label3:
        $i2 = i6;

        i6 = i6 + 1;

        $r3 = r0[$i2];

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("}");

        if $z1 == 0 goto label2;

        $r4 = newarray (byte)[i7];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r6, 0, $r4, 0, i7);

        staticinvoke <org.eclipse.jdt.internal.compiler.parser.Parser: void buildFileForTable(java.lang.String,byte[])>(r5, $r4);

        return $r4;
    }

    private static final char[] buildFileOfIntFor(java.lang.String, java.lang.String, java.lang.String[])
    {
        java.lang.String[] r0;
        int $i0, $i1, $i2, $i3, $i4, i6, i7;
        java.lang.String r1, $r2, $r3, r5;
        boolean $z0, $z1;
        char $c5;
        char[] $r4, r6;

        r5 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r0 := @parameter2: java.lang.String[];

        i6 = 0;

     label1:
        $i0 = i6;

        i6 = i6 + 1;

        $r2 = r0[$i0];

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $i1 = lengthof r0;

        r6 = newarray (char)[$i1];

        i7 = 0;

        goto label3;

     label2:
        $i3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

        $i4 = i7;

        i7 = i7 + 1;

        $c5 = (char) $i3;

        r6[$i4] = $c5;

     label3:
        $i2 = i6;

        i6 = i6 + 1;

        $r3 = r0[$i2];

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("}");

        if $z1 == 0 goto label2;

        $r4 = newarray (char)[i7];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r6, 0, $r4, 0, i7);

        staticinvoke <org.eclipse.jdt.internal.compiler.parser.Parser: void buildFileForTable(java.lang.String,char[])>(r5, $r4);

        return $r4;
    }

    private static final void buildFileOfShortFor(java.lang.String, java.lang.String, java.lang.String[])
    {
        java.lang.String[] r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, i7, i8, $i10;
        java.lang.String r1, $r2, $r3, r5;
        boolean $z0, $z1;
        char $c6;
        char[] $r4, r6;

        r5 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r0 := @parameter2: java.lang.String[];

        i7 = 0;

     label1:
        $i0 = i7;

        i7 = i7 + 1;

        $r2 = r0[$i0];

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $i1 = lengthof r0;

        r6 = newarray (char)[$i1];

        i8 = 0;

        goto label3;

     label2:
        $i3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

        $i4 = i8;

        i8 = i8 + 1;

        $i10 = (int) 32768;

        $i5 = $i3 + $i10;

        $c6 = (char) $i5;

        r6[$i4] = $c6;

     label3:
        $i2 = i7;

        i7 = i7 + 1;

        $r3 = r0[$i2];

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("}");

        if $z1 == 0 goto label2;

        $r4 = newarray (char)[i8];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r6, 0, $r4, 0, i8);

        staticinvoke <org.eclipse.jdt.internal.compiler.parser.Parser: void buildFileForTable(java.lang.String,char[])>(r5, $r4);

        return;
    }

    public static final void buildFilesFromLPG(java.lang.String, java.lang.String)
    {
        byte[] $r77;
        java.util.StringTokenizer $r3, $r95;
        java.lang.StringBuffer $r6, $r7, $r8, $r11, $r12, $r13, $r15, $r16, $r17, $r19, $r20, $r21, $r23, $r24, $r25, $r27, $r28, $r29, $r31, $r32, $r33, $r36, $r37, $r38, $r41, $r42, $r43, $r45, $r46, $r47, $r49, $r50, $r51, $r53, $r54, $r55, $r57, $r58, $r59, $r61, $r62, $r63, $r65, $r66, $r67, $r69, $r70, $r71, $r73, $r74, $r75, $r78, $r79, $r80, $r82, $r83, $r84, $r86, $r87, $r88, $r98, $r99, $r100, $r102, $r103, $r104, $r106, $r107, $r108, $r110, $r111, $r112;
        java.io.IOException $r116, $r119;
        int $i0, $i1, $i2, $i3, $i4, i5, i6;
        java.io.PrintStream $r115, $r118, $r121;
        java.lang.String r1, $r4, $r5, $r9, $r14, $r18, $r22, $r26, $r30, $r34, $r39, $r44, $r48, $r52, $r56, $r60, $r64, $r68, $r72, $r76, $r81, $r85, $r89, $r90, r93, $r96, $r97, $r101, $r105, $r109, $r113, $r114, $r117, $r120;
        java.io.File $r0, $r92;
        char[] $r2, $r10, $r35, $r40, $r94, r122, r124;
        boolean $z0, $z1;
        java.lang.String[] $r91, r123, r125;

        r1 := @parameter0: java.lang.String;

        r93 := @parameter1: java.lang.String;

        r122 = <org.eclipse.jdt.core.compiler.CharOperation: char[] NO_CHAR>;

     label01:
        $r0 = new java.io.File;

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>(r1);

        $r2 = staticinvoke <org.eclipse.jdt.internal.compiler.util.Util: char[] getFileCharContent(java.io.File,java.lang.String)>($r0, null);

     label02:
        goto label04;

     label03:
        $r119 := @caughtexception;

        $r121 = <java.lang.System: java.io.PrintStream out>;

        $r120 = <org.eclipse.jdt.internal.compiler.util.Messages: java.lang.String parser_incorrectPath>;

        virtualinvoke $r121.<java.io.PrintStream: void println(java.lang.String)>($r120);

        return;

     label04:
        $r3 = new java.util.StringTokenizer;

        $r4 = new java.lang.String;

        specialinvoke $r4.<java.lang.String: void <init>(char[])>($r2);

        specialinvoke $r3.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>($r4, " \t\n\r[]={,;");

        $i0 = virtualinvoke $r3.<java.util.StringTokenizer: int countTokens()>();

        r123 = newarray (java.lang.String)[$i0];

        i5 = 0;

        goto label06;

     label05:
        $i1 = i5;

        i5 = i5 + 1;

        $r5 = virtualinvoke $r3.<java.util.StringTokenizer: java.lang.String nextToken()>();

        r123[$i1] = $r5;

     label06:
        $z0 = virtualinvoke $r3.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 != 0 goto label05;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>(java.lang.String)>("parser");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".rsc");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        $r10 = staticinvoke <org.eclipse.jdt.internal.compiler.parser.Parser: char[] buildFileOfIntFor(java.lang.String,java.lang.String,java.lang.String[])>($r9, "lhs", r123);

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>(java.lang.String)>("parser");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(2);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".rsc");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.eclipse.jdt.internal.compiler.parser.Parser: void buildFileOfShortFor(java.lang.String,java.lang.String,java.lang.String[])>($r14, "check_table", r123);

        $r15 = new java.lang.StringBuffer;

        specialinvoke $r15.<java.lang.StringBuffer: void <init>(java.lang.String)>("parser");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(3);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".rsc");

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.eclipse.jdt.internal.compiler.parser.Parser: char[] buildFileOfIntFor(java.lang.String,java.lang.String,java.lang.String[])>($r18, "asb", r123);

        $r19 = new java.lang.StringBuffer;

        specialinvoke $r19.<java.lang.StringBuffer: void <init>(java.lang.String)>("parser");

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(4);

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".rsc");

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.eclipse.jdt.internal.compiler.parser.Parser: char[] buildFileOfIntFor(java.lang.String,java.lang.String,java.lang.String[])>($r22, "asr", r123);

        $r23 = new java.lang.StringBuffer;

        specialinvoke $r23.<java.lang.StringBuffer: void <init>(java.lang.String)>("parser");

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(5);

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".rsc");

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.eclipse.jdt.internal.compiler.parser.Parser: char[] buildFileOfIntFor(java.lang.String,java.lang.String,java.lang.String[])>($r26, "nasb", r123);

        $r27 = new java.lang.StringBuffer;

        specialinvoke $r27.<java.lang.StringBuffer: void <init>(java.lang.String)>("parser");

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(6);

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".rsc");

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.eclipse.jdt.internal.compiler.parser.Parser: char[] buildFileOfIntFor(java.lang.String,java.lang.String,java.lang.String[])>($r30, "nasr", r123);

        $r31 = new java.lang.StringBuffer;

        specialinvoke $r31.<java.lang.StringBuffer: void <init>(java.lang.String)>("parser");

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(7);

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".rsc");

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.String toString()>();

        $r35 = staticinvoke <org.eclipse.jdt.internal.compiler.parser.Parser: char[] buildFileOfIntFor(java.lang.String,java.lang.String,java.lang.String[])>($r34, "terminal_index", r123);

        $r36 = new java.lang.StringBuffer;

        specialinvoke $r36.<java.lang.StringBuffer: void <init>(java.lang.String)>("parser");

        $r37 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(8);

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".rsc");

        $r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.String toString()>();

        $r40 = staticinvoke <org.eclipse.jdt.internal.compiler.parser.Parser: char[] buildFileOfIntFor(java.lang.String,java.lang.String,java.lang.String[])>($r39, "non_terminal_index", r123);

        $r41 = new java.lang.StringBuffer;

        specialinvoke $r41.<java.lang.StringBuffer: void <init>(java.lang.String)>("parser");

        $r42 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(9);

        $r43 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".rsc");

        $r44 = virtualinvoke $r43.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.eclipse.jdt.internal.compiler.parser.Parser: char[] buildFileOfIntFor(java.lang.String,java.lang.String,java.lang.String[])>($r44, "term_action", r123);

        $r45 = new java.lang.StringBuffer;

        specialinvoke $r45.<java.lang.StringBuffer: void <init>(java.lang.String)>("parser");

        $r46 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(10);

        $r47 = virtualinvoke $r46.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".rsc");

        $r48 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.eclipse.jdt.internal.compiler.parser.Parser: char[] buildFileOfIntFor(java.lang.String,java.lang.String,java.lang.String[])>($r48, "scope_prefix", r123);

        $r49 = new java.lang.StringBuffer;

        specialinvoke $r49.<java.lang.StringBuffer: void <init>(java.lang.String)>("parser");

        $r50 = virtualinvoke $r49.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(11);

        $r51 = virtualinvoke $r50.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".rsc");

        $r52 = virtualinvoke $r51.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.eclipse.jdt.internal.compiler.parser.Parser: char[] buildFileOfIntFor(java.lang.String,java.lang.String,java.lang.String[])>($r52, "scope_suffix", r123);

        $r53 = new java.lang.StringBuffer;

        specialinvoke $r53.<java.lang.StringBuffer: void <init>(java.lang.String)>("parser");

        $r54 = virtualinvoke $r53.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(12);

        $r55 = virtualinvoke $r54.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".rsc");

        $r56 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.eclipse.jdt.internal.compiler.parser.Parser: char[] buildFileOfIntFor(java.lang.String,java.lang.String,java.lang.String[])>($r56, "scope_lhs", r123);

        $r57 = new java.lang.StringBuffer;

        specialinvoke $r57.<java.lang.StringBuffer: void <init>(java.lang.String)>("parser");

        $r58 = virtualinvoke $r57.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(13);

        $r59 = virtualinvoke $r58.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".rsc");

        $r60 = virtualinvoke $r59.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.eclipse.jdt.internal.compiler.parser.Parser: char[] buildFileOfIntFor(java.lang.String,java.lang.String,java.lang.String[])>($r60, "scope_state_set", r123);

        $r61 = new java.lang.StringBuffer;

        specialinvoke $r61.<java.lang.StringBuffer: void <init>(java.lang.String)>("parser");

        $r62 = virtualinvoke $r61.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(14);

        $r63 = virtualinvoke $r62.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".rsc");

        $r64 = virtualinvoke $r63.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.eclipse.jdt.internal.compiler.parser.Parser: char[] buildFileOfIntFor(java.lang.String,java.lang.String,java.lang.String[])>($r64, "scope_rhs", r123);

        $r65 = new java.lang.StringBuffer;

        specialinvoke $r65.<java.lang.StringBuffer: void <init>(java.lang.String)>("parser");

        $r66 = virtualinvoke $r65.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(15);

        $r67 = virtualinvoke $r66.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".rsc");

        $r68 = virtualinvoke $r67.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.eclipse.jdt.internal.compiler.parser.Parser: char[] buildFileOfIntFor(java.lang.String,java.lang.String,java.lang.String[])>($r68, "scope_state", r123);

        $r69 = new java.lang.StringBuffer;

        specialinvoke $r69.<java.lang.StringBuffer: void <init>(java.lang.String)>("parser");

        $r70 = virtualinvoke $r69.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(16);

        $r71 = virtualinvoke $r70.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".rsc");

        $r72 = virtualinvoke $r71.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.eclipse.jdt.internal.compiler.parser.Parser: char[] buildFileOfIntFor(java.lang.String,java.lang.String,java.lang.String[])>($r72, "in_symb", r123);

        $r73 = new java.lang.StringBuffer;

        specialinvoke $r73.<java.lang.StringBuffer: void <init>(java.lang.String)>("parser");

        $r74 = virtualinvoke $r73.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(17);

        $r75 = virtualinvoke $r74.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".rsc");

        $r76 = virtualinvoke $r75.<java.lang.StringBuffer: java.lang.String toString()>();

        $r77 = staticinvoke <org.eclipse.jdt.internal.compiler.parser.Parser: byte[] buildFileOfByteFor(java.lang.String,java.lang.String,java.lang.String[])>($r76, "rhs", r123);

        $r78 = new java.lang.StringBuffer;

        specialinvoke $r78.<java.lang.StringBuffer: void <init>(java.lang.String)>("parser");

        $r79 = virtualinvoke $r78.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(18);

        $r80 = virtualinvoke $r79.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".rsc");

        $r81 = virtualinvoke $r80.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.eclipse.jdt.internal.compiler.parser.Parser: byte[] buildFileOfByteFor(java.lang.String,java.lang.String,java.lang.String[])>($r81, "term_check", r123);

        $r82 = new java.lang.StringBuffer;

        specialinvoke $r82.<java.lang.StringBuffer: void <init>(java.lang.String)>("parser");

        $r83 = virtualinvoke $r82.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(19);

        $r84 = virtualinvoke $r83.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".rsc");

        $r85 = virtualinvoke $r84.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.eclipse.jdt.internal.compiler.parser.Parser: byte[] buildFileOfByteFor(java.lang.String,java.lang.String,java.lang.String[])>($r85, "scope_la", r123);

        $r86 = new java.lang.StringBuffer;

        specialinvoke $r86.<java.lang.StringBuffer: void <init>(java.lang.String)>("parser");

        $r87 = virtualinvoke $r86.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(20);

        $r88 = virtualinvoke $r87.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".rsc");

        $r89 = virtualinvoke $r88.<java.lang.StringBuffer: java.lang.String toString()>();

        $r90 = new java.lang.String;

        specialinvoke $r90.<java.lang.String: void <init>(char[])>($r2);

        $r91 = staticinvoke <org.eclipse.jdt.internal.compiler.parser.Parser: java.lang.String[] buildFileForName(java.lang.String,java.lang.String)>($r89, $r90);

        r124 = <org.eclipse.jdt.core.compiler.CharOperation: char[] NO_CHAR>;

     label07:
        $r92 = new java.io.File;

        specialinvoke $r92.<java.io.File: void <init>(java.lang.String)>(r93);

        $r94 = staticinvoke <org.eclipse.jdt.internal.compiler.util.Util: char[] getFileCharContent(java.io.File,java.lang.String)>($r92, null);

     label08:
        goto label10;

     label09:
        $r116 := @caughtexception;

        $r118 = <java.lang.System: java.io.PrintStream out>;

        $r117 = <org.eclipse.jdt.internal.compiler.util.Messages: java.lang.String parser_incorrectPath>;

        virtualinvoke $r118.<java.io.PrintStream: void println(java.lang.String)>($r117);

        return;

     label10:
        $r95 = new java.util.StringTokenizer;

        $r96 = new java.lang.String;

        specialinvoke $r96.<java.lang.String: void <init>(char[])>($r94);

        specialinvoke $r95.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>($r96, "\t\n\r#");

        $i2 = virtualinvoke $r95.<java.util.StringTokenizer: int countTokens()>();

        r125 = newarray (java.lang.String)[$i2];

        i6 = 0;

        goto label12;

     label11:
        $i3 = i6;

        i6 = i6 + 1;

        $r97 = virtualinvoke $r95.<java.util.StringTokenizer: java.lang.String nextToken()>();

        r125[$i3] = $r97;

     label12:
        $z1 = virtualinvoke $r95.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z1 != 0 goto label11;

        $r98 = new java.lang.StringBuffer;

        specialinvoke $r98.<java.lang.StringBuffer: void <init>(java.lang.String)>("parser");

        $r99 = virtualinvoke $r98.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(21);

        $r100 = virtualinvoke $r99.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".rsc");

        $r101 = virtualinvoke $r100.<java.lang.StringBuffer: java.lang.String toString()>();

        $i4 = lengthof $r77;

        staticinvoke <org.eclipse.jdt.internal.compiler.parser.Parser: void buildFileForCompliance(java.lang.String,int,java.lang.String[])>($r101, $i4, r125);

        staticinvoke <org.eclipse.jdt.internal.compiler.parser.Parser: void buildFileForReadableName(java.lang.String,char[],char[],java.lang.String[],java.lang.String[])>("readableNames.properties", $r10, $r40, $r91, r125);

        $r102 = new java.lang.StringBuffer;

        specialinvoke $r102.<java.lang.StringBuffer: void <init>(java.lang.String)>("parser");

        $r103 = virtualinvoke $r102.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(22);

        $r104 = virtualinvoke $r103.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".rsc");

        $r105 = virtualinvoke $r104.<java.lang.StringBuffer: java.lang.String toString()>();

        $r106 = new java.lang.StringBuffer;

        specialinvoke $r106.<java.lang.StringBuffer: void <init>(java.lang.String)>("parser");

        $r107 = virtualinvoke $r106.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(23);

        $r108 = virtualinvoke $r107.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".rsc");

        $r109 = virtualinvoke $r108.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.eclipse.jdt.internal.compiler.parser.Parser: void buildFilesForRecoveryTemplates(java.lang.String,java.lang.String,char[],char[],java.lang.String[],char[],java.lang.String[])>($r105, $r109, $r35, $r40, $r91, $r10, r125);

        $r110 = new java.lang.StringBuffer;

        specialinvoke $r110.<java.lang.StringBuffer: void <init>(java.lang.String)>("parser");

        $r111 = virtualinvoke $r110.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(24);

        $r112 = virtualinvoke $r111.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".rsc");

        $r113 = virtualinvoke $r112.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.eclipse.jdt.internal.compiler.parser.Parser: void buildFilesForStatementsRecoveryFilter(java.lang.String,char[],char[],java.lang.String[])>($r113, $r40, $r10, r125);

        $r115 = <java.lang.System: java.io.PrintStream out>;

        $r114 = <org.eclipse.jdt.internal.compiler.util.Messages: java.lang.String parser_moveFiles>;

        virtualinvoke $r115.<java.io.PrintStream: void println(java.lang.String)>($r114);

        return;

        catch java.io.IOException from label01 to label02 with label03;
        catch java.io.IOException from label07 to label08 with label09;
    }

    public static int in_symbol(int)
    {
        int i0, $i1, $i3;
        char[] $r0;
        char $c2;

        i0 := @parameter0: int;

        $r0 = <org.eclipse.jdt.internal.compiler.parser.Parser: char[] in_symb>;

        $i1 = staticinvoke <org.eclipse.jdt.internal.compiler.parser.Parser: int original_state(int)>(i0);

        $c2 = $r0[$i1];

        $i3 = (int) $c2;

        return $i3;
    }

    public static final void initTables() throws java.io.IOException
    {
        byte[] $r86, $r91, $r96;
        short $s4;
        java.lang.StringBuffer $r1, $r2, $r6, $r7, $r13, $r14, $r18, $r19, $r23, $r24, $r28, $r29, $r33, $r34, $r38, $r39, $r43, $r44, $r48, $r49, $r53, $r54, $r58, $r59, $r63, $r64, $r68, $r69, $r73, $r74, $r78, $r79, $r83, $r84, $r88, $r89, $r93, $r94, $r98, $r99, $r103, $r104, $r113, $r114, $r118, $r119, $r123, $r124, $r128, $r129, $r130, $r131, $r132, $r133, $r134, $r135, $r136, $r137, $r138, $r139, $r140, $r141, $r142, $r143, $r144, $r145, $r146, $r147, $r148, $r149, $r150, $r151;
        int[] $r111;
        long[] $r106;
        int $i0, $i1, $i3, i5, $i6, $i8, $i10;
        java.lang.String $r3, $r8, $r15, $r20, $r25, $r30, $r35, $r40, $r45, $r50, $r55, $r60, $r65, $r70, $r75, $r80, $r85, $r90, $r95, $r100, $r105, $r115, $r120, $r125;
        char[] $r4, $r9, $r16, $r21, $r26, $r31, $r36, $r41, $r46, $r51, $r56, $r61, $r66, $r71, $r76, $r81, $r109, $r110, $r116, $r121, $r126, $r127;
        short[] $r10, $r11;
        java.lang.String[] $r101, $r107, $r108;
        char $c2;

        $r128 = new java.lang.StringBuffer;

        specialinvoke $r128.<java.lang.StringBuffer: void <init>(java.lang.String)>("parser");

        $r1 = virtualinvoke $r128.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(1);

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".rsc");

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        $r4 = staticinvoke <org.eclipse.jdt.internal.compiler.parser.Parser: char[] readTable(java.lang.String)>($r3);

        <org.eclipse.jdt.internal.compiler.parser.Parser: char[] lhs> = $r4;

        $r129 = new java.lang.StringBuffer;

        specialinvoke $r129.<java.lang.StringBuffer: void <init>(java.lang.String)>("parser");

        $r6 = virtualinvoke $r129.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".rsc");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        $r9 = staticinvoke <org.eclipse.jdt.internal.compiler.parser.Parser: char[] readTable(java.lang.String)>($r8);

        $i0 = lengthof $r9;

        $r10 = newarray (short)[$i0];

        <org.eclipse.jdt.internal.compiler.parser.Parser: short[] check_table> = $r10;

        i5 = lengthof $r9;

        goto label2;

     label1:
        $r11 = <org.eclipse.jdt.internal.compiler.parser.Parser: short[] check_table>;

        $c2 = $r9[i5];

        $i6 = (int) $c2;

        $i8 = (int) 32768;

        $i3 = $i6 - $i8;

        $s4 = (short) $i3;

        $r11[i5] = $s4;

     label2:
        $i1 = i5;

        $i10 = (int) -1;

        i5 = i5 + $i10;

        if $i1 > 0 goto label1;

        $r130 = new java.lang.StringBuffer;

        specialinvoke $r130.<java.lang.StringBuffer: void <init>(java.lang.String)>("parser");

        $r13 = virtualinvoke $r130.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(3);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".rsc");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        $r16 = staticinvoke <org.eclipse.jdt.internal.compiler.parser.Parser: char[] readTable(java.lang.String)>($r15);

        <org.eclipse.jdt.internal.compiler.parser.Parser: char[] asb> = $r16;

        $r131 = new java.lang.StringBuffer;

        specialinvoke $r131.<java.lang.StringBuffer: void <init>(java.lang.String)>("parser");

        $r18 = virtualinvoke $r131.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(4);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".rsc");

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        $r21 = staticinvoke <org.eclipse.jdt.internal.compiler.parser.Parser: char[] readTable(java.lang.String)>($r20);

        <org.eclipse.jdt.internal.compiler.parser.Parser: char[] asr> = $r21;

        $r132 = new java.lang.StringBuffer;

        specialinvoke $r132.<java.lang.StringBuffer: void <init>(java.lang.String)>("parser");

        $r23 = virtualinvoke $r132.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(5);

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".rsc");

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.String toString()>();

        $r26 = staticinvoke <org.eclipse.jdt.internal.compiler.parser.Parser: char[] readTable(java.lang.String)>($r25);

        <org.eclipse.jdt.internal.compiler.parser.Parser: char[] nasb> = $r26;

        $r133 = new java.lang.StringBuffer;

        specialinvoke $r133.<java.lang.StringBuffer: void <init>(java.lang.String)>("parser");

        $r28 = virtualinvoke $r133.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(6);

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".rsc");

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.String toString()>();

        $r31 = staticinvoke <org.eclipse.jdt.internal.compiler.parser.Parser: char[] readTable(java.lang.String)>($r30);

        <org.eclipse.jdt.internal.compiler.parser.Parser: char[] nasr> = $r31;

        $r134 = new java.lang.StringBuffer;

        specialinvoke $r134.<java.lang.StringBuffer: void <init>(java.lang.String)>("parser");

        $r33 = virtualinvoke $r134.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(7);

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".rsc");

        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.String toString()>();

        $r36 = staticinvoke <org.eclipse.jdt.internal.compiler.parser.Parser: char[] readTable(java.lang.String)>($r35);

        <org.eclipse.jdt.internal.compiler.parser.Parser: char[] terminal_index> = $r36;

        $r135 = new java.lang.StringBuffer;

        specialinvoke $r135.<java.lang.StringBuffer: void <init>(java.lang.String)>("parser");

        $r38 = virtualinvoke $r135.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(8);

        $r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".rsc");

        $r40 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.String toString()>();

        $r41 = staticinvoke <org.eclipse.jdt.internal.compiler.parser.Parser: char[] readTable(java.lang.String)>($r40);

        <org.eclipse.jdt.internal.compiler.parser.Parser: char[] non_terminal_index> = $r41;

        $r136 = new java.lang.StringBuffer;

        specialinvoke $r136.<java.lang.StringBuffer: void <init>(java.lang.String)>("parser");

        $r43 = virtualinvoke $r136.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(9);

        $r44 = virtualinvoke $r43.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".rsc");

        $r45 = virtualinvoke $r44.<java.lang.StringBuffer: java.lang.String toString()>();

        $r46 = staticinvoke <org.eclipse.jdt.internal.compiler.parser.Parser: char[] readTable(java.lang.String)>($r45);

        <org.eclipse.jdt.internal.compiler.parser.Parser: char[] term_action> = $r46;

        $r137 = new java.lang.StringBuffer;

        specialinvoke $r137.<java.lang.StringBuffer: void <init>(java.lang.String)>("parser");

        $r48 = virtualinvoke $r137.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(10);

        $r49 = virtualinvoke $r48.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".rsc");

        $r50 = virtualinvoke $r49.<java.lang.StringBuffer: java.lang.String toString()>();

        $r51 = staticinvoke <org.eclipse.jdt.internal.compiler.parser.Parser: char[] readTable(java.lang.String)>($r50);

        <org.eclipse.jdt.internal.compiler.parser.Parser: char[] scope_prefix> = $r51;

        $r138 = new java.lang.StringBuffer;

        specialinvoke $r138.<java.lang.StringBuffer: void <init>(java.lang.String)>("parser");

        $r53 = virtualinvoke $r138.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(11);

        $r54 = virtualinvoke $r53.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".rsc");

        $r55 = virtualinvoke $r54.<java.lang.StringBuffer: java.lang.String toString()>();

        $r56 = staticinvoke <org.eclipse.jdt.internal.compiler.parser.Parser: char[] readTable(java.lang.String)>($r55);

        <org.eclipse.jdt.internal.compiler.parser.Parser: char[] scope_suffix> = $r56;

        $r139 = new java.lang.StringBuffer;

        specialinvoke $r139.<java.lang.StringBuffer: void <init>(java.lang.String)>("parser");

        $r58 = virtualinvoke $r139.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(12);

        $r59 = virtualinvoke $r58.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".rsc");

        $r60 = virtualinvoke $r59.<java.lang.StringBuffer: java.lang.String toString()>();

        $r61 = staticinvoke <org.eclipse.jdt.internal.compiler.parser.Parser: char[] readTable(java.lang.String)>($r60);

        <org.eclipse.jdt.internal.compiler.parser.Parser: char[] scope_lhs> = $r61;

        $r140 = new java.lang.StringBuffer;

        specialinvoke $r140.<java.lang.StringBuffer: void <init>(java.lang.String)>("parser");

        $r63 = virtualinvoke $r140.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(13);

        $r64 = virtualinvoke $r63.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".rsc");

        $r65 = virtualinvoke $r64.<java.lang.StringBuffer: java.lang.String toString()>();

        $r66 = staticinvoke <org.eclipse.jdt.internal.compiler.parser.Parser: char[] readTable(java.lang.String)>($r65);

        <org.eclipse.jdt.internal.compiler.parser.Parser: char[] scope_state_set> = $r66;

        $r141 = new java.lang.StringBuffer;

        specialinvoke $r141.<java.lang.StringBuffer: void <init>(java.lang.String)>("parser");

        $r68 = virtualinvoke $r141.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(14);

        $r69 = virtualinvoke $r68.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".rsc");

        $r70 = virtualinvoke $r69.<java.lang.StringBuffer: java.lang.String toString()>();

        $r71 = staticinvoke <org.eclipse.jdt.internal.compiler.parser.Parser: char[] readTable(java.lang.String)>($r70);

        <org.eclipse.jdt.internal.compiler.parser.Parser: char[] scope_rhs> = $r71;

        $r142 = new java.lang.StringBuffer;

        specialinvoke $r142.<java.lang.StringBuffer: void <init>(java.lang.String)>("parser");

        $r73 = virtualinvoke $r142.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(15);

        $r74 = virtualinvoke $r73.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".rsc");

        $r75 = virtualinvoke $r74.<java.lang.StringBuffer: java.lang.String toString()>();

        $r76 = staticinvoke <org.eclipse.jdt.internal.compiler.parser.Parser: char[] readTable(java.lang.String)>($r75);

        <org.eclipse.jdt.internal.compiler.parser.Parser: char[] scope_state> = $r76;

        $r143 = new java.lang.StringBuffer;

        specialinvoke $r143.<java.lang.StringBuffer: void <init>(java.lang.String)>("parser");

        $r78 = virtualinvoke $r143.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(16);

        $r79 = virtualinvoke $r78.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".rsc");

        $r80 = virtualinvoke $r79.<java.lang.StringBuffer: java.lang.String toString()>();

        $r81 = staticinvoke <org.eclipse.jdt.internal.compiler.parser.Parser: char[] readTable(java.lang.String)>($r80);

        <org.eclipse.jdt.internal.compiler.parser.Parser: char[] in_symb> = $r81;

        $r144 = new java.lang.StringBuffer;

        specialinvoke $r144.<java.lang.StringBuffer: void <init>(java.lang.String)>("parser");

        $r83 = virtualinvoke $r144.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(17);

        $r84 = virtualinvoke $r83.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".rsc");

        $r85 = virtualinvoke $r84.<java.lang.StringBuffer: java.lang.String toString()>();

        $r86 = staticinvoke <org.eclipse.jdt.internal.compiler.parser.Parser: byte[] readByteTable(java.lang.String)>($r85);

        <org.eclipse.jdt.internal.compiler.parser.Parser: byte[] rhs> = $r86;

        $r145 = new java.lang.StringBuffer;

        specialinvoke $r145.<java.lang.StringBuffer: void <init>(java.lang.String)>("parser");

        $r88 = virtualinvoke $r145.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(18);

        $r89 = virtualinvoke $r88.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".rsc");

        $r90 = virtualinvoke $r89.<java.lang.StringBuffer: java.lang.String toString()>();

        $r91 = staticinvoke <org.eclipse.jdt.internal.compiler.parser.Parser: byte[] readByteTable(java.lang.String)>($r90);

        <org.eclipse.jdt.internal.compiler.parser.Parser: byte[] term_check> = $r91;

        $r146 = new java.lang.StringBuffer;

        specialinvoke $r146.<java.lang.StringBuffer: void <init>(java.lang.String)>("parser");

        $r93 = virtualinvoke $r146.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(19);

        $r94 = virtualinvoke $r93.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".rsc");

        $r95 = virtualinvoke $r94.<java.lang.StringBuffer: java.lang.String toString()>();

        $r96 = staticinvoke <org.eclipse.jdt.internal.compiler.parser.Parser: byte[] readByteTable(java.lang.String)>($r95);

        <org.eclipse.jdt.internal.compiler.parser.Parser: byte[] scope_la> = $r96;

        $r147 = new java.lang.StringBuffer;

        specialinvoke $r147.<java.lang.StringBuffer: void <init>(java.lang.String)>("parser");

        $r98 = virtualinvoke $r147.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(20);

        $r99 = virtualinvoke $r98.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".rsc");

        $r100 = virtualinvoke $r99.<java.lang.StringBuffer: java.lang.String toString()>();

        $r101 = staticinvoke <org.eclipse.jdt.internal.compiler.parser.Parser: java.lang.String[] readNameTable(java.lang.String)>($r100);

        <org.eclipse.jdt.internal.compiler.parser.Parser: java.lang.String[] name> = $r101;

        $r148 = new java.lang.StringBuffer;

        specialinvoke $r148.<java.lang.StringBuffer: void <init>(java.lang.String)>("parser");

        $r103 = virtualinvoke $r148.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(21);

        $r104 = virtualinvoke $r103.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".rsc");

        $r105 = virtualinvoke $r104.<java.lang.StringBuffer: java.lang.String toString()>();

        $r106 = staticinvoke <org.eclipse.jdt.internal.compiler.parser.Parser: long[] readLongTable(java.lang.String)>($r105);

        <org.eclipse.jdt.internal.compiler.parser.Parser: long[] rules_compliance> = $r106;

        $r107 = staticinvoke <org.eclipse.jdt.internal.compiler.parser.Parser: java.lang.String[] readReadableNameTable(java.lang.String)>("org.eclipse.jdt.internal.compiler.parser.readableNames");

        <org.eclipse.jdt.internal.compiler.parser.Parser: java.lang.String[] readableName> = $r107;

        $r110 = <org.eclipse.jdt.internal.compiler.parser.Parser: char[] terminal_index>;

        $r109 = <org.eclipse.jdt.internal.compiler.parser.Parser: char[] non_terminal_index>;

        $r108 = <org.eclipse.jdt.internal.compiler.parser.Parser: java.lang.String[] name>;

        $r111 = staticinvoke <org.eclipse.jdt.internal.compiler.parser.Parser: int[] computeReverseTable(char[],char[],java.lang.String[])>($r110, $r109, $r108);

        <org.eclipse.jdt.internal.compiler.parser.Parser: int[] reverse_index> = $r111;

        $r149 = new java.lang.StringBuffer;

        specialinvoke $r149.<java.lang.StringBuffer: void <init>(java.lang.String)>("parser");

        $r113 = virtualinvoke $r149.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(22);

        $r114 = virtualinvoke $r113.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".rsc");

        $r115 = virtualinvoke $r114.<java.lang.StringBuffer: java.lang.String toString()>();

        $r116 = staticinvoke <org.eclipse.jdt.internal.compiler.parser.Parser: char[] readTable(java.lang.String)>($r115);

        <org.eclipse.jdt.internal.compiler.parser.Parser: char[] recovery_templates_index> = $r116;

        $r150 = new java.lang.StringBuffer;

        specialinvoke $r150.<java.lang.StringBuffer: void <init>(java.lang.String)>("parser");

        $r118 = virtualinvoke $r150.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(23);

        $r119 = virtualinvoke $r118.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".rsc");

        $r120 = virtualinvoke $r119.<java.lang.StringBuffer: java.lang.String toString()>();

        $r121 = staticinvoke <org.eclipse.jdt.internal.compiler.parser.Parser: char[] readTable(java.lang.String)>($r120);

        <org.eclipse.jdt.internal.compiler.parser.Parser: char[] recovery_templates> = $r121;

        $r151 = new java.lang.StringBuffer;

        specialinvoke $r151.<java.lang.StringBuffer: void <init>(java.lang.String)>("parser");

        $r123 = virtualinvoke $r151.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(24);

        $r124 = virtualinvoke $r123.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".rsc");

        $r125 = virtualinvoke $r124.<java.lang.StringBuffer: java.lang.String toString()>();

        $r126 = staticinvoke <org.eclipse.jdt.internal.compiler.parser.Parser: char[] readTable(java.lang.String)>($r125);

        <org.eclipse.jdt.internal.compiler.parser.Parser: char[] statements_recovery_filter> = $r126;

        $r127 = <org.eclipse.jdt.internal.compiler.parser.Parser: char[] lhs>;

        <org.eclipse.jdt.internal.compiler.parser.Parser: char[] base_action> = $r127;

        return;
    }

    public static int nasi(int)
    {
        int i0, $i1, $i3;
        char[] $r0;
        char $c2;

        i0 := @parameter0: int;

        $r0 = <org.eclipse.jdt.internal.compiler.parser.Parser: char[] nasb>;

        $i1 = staticinvoke <org.eclipse.jdt.internal.compiler.parser.Parser: int original_state(int)>(i0);

        $c2 = $r0[$i1];

        $i3 = (int) $c2;

        return $i3;
    }

    public static int ntAction(int, int)
    {
        int i0, i1, $i2, $i4;
        char[] $r0;
        char $c3;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r0 = <org.eclipse.jdt.internal.compiler.parser.Parser: char[] base_action>;

        $i2 = i0 + i1;

        $c3 = $r0[$i2];

        $i4 = (int) $c3;

        return $i4;
    }

    protected static int original_state(int)
    {
        short $s1;
        int i0, $i2, $i3;

        i0 := @parameter0: int;

        $s1 = staticinvoke <org.eclipse.jdt.internal.compiler.parser.Parser: short base_check(int)>(i0);

        $i3 = (int) $s1;

        $i2 = neg $i3;

        return $i2;
    }

    protected static int[] computeReverseTable(char[], char[], java.lang.String[])
    {
        java.lang.String[] r0;
        int[] r1;
        int $i0, $i1, $i3, $i5, i6, i7, i8, $i9, $i10, $i11;
        char $c2, $c4;
        char[] r2, r3;

        r2 := @parameter0: char[];

        r3 := @parameter1: char[];

        r0 := @parameter2: java.lang.String[];

        $i0 = lengthof r0;

        r1 = newarray (int)[$i0];

        i6 = 0;

        goto label9;

     label1:
        i7 = 0;

        goto label4;

     label2:
        $c2 = r2[i7];

        $i10 = (int) $c2;

        if $i10 != i6 goto label3;

        r1[i6] = i7;

        goto label8;

     label3:
        i7 = i7 + 1;

     label4:
        $i1 = lengthof r2;

        if i7 < $i1 goto label2;

        i8 = 0;

        goto label7;

     label5:
        $c4 = r3[i8];

        $i11 = (int) $c4;

        if $i11 != i6 goto label6;

        $i5 = neg i8;

        r1[i6] = $i5;

        goto label8;

     label6:
        i8 = i8 + 1;

     label7:
        $i3 = lengthof r3;

        if i8 < $i3 goto label5;

     label8:
        i6 = i6 + 1;

     label9:
        $i9 = lengthof r0;

        if i6 < $i9 goto label1;

        return r1;
    }

    private static int getSymbol(java.lang.String, java.lang.String[], int[])
    {
        java.lang.String[] r0;
        int[] r3;
        int $i0, $i1, i2, $i4;
        java.lang.String r1, $r2;
        boolean $z0;

        r1 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String[];

        r3 := @parameter2: int[];

        i2 = 0;

        goto label3;

     label1:
        $r2 = r0[i2];

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label2;

        $i1 = r3[i2];

        return $i1;

     label2:
        i2 = i2 + 1;

     label3:
        $i0 = lengthof r0;

        if i2 < $i0 goto label1;

        $i4 = (int) -1;

        return $i4;
    }

    protected static byte[] readByteTable(java.lang.String) throws java.io.IOException
    {
        java.lang.Throwable $r9;
        byte[] $r3;
        java.io.BufferedInputStream $r17;
        int $i1;
        java.lang.String r0, $r5, $r6, $r12;
        java.lang.NoClassDefFoundError $r15;
        java.io.IOException $r7, $r8, $r16;
        java.lang.ClassNotFoundException $r10;
        java.lang.Class $r13;
        java.io.InputStream $r1, r14;

        r0 := @parameter0: java.lang.String;

        $r13 = <org.eclipse.jdt.internal.compiler.parser.Parser: java.lang.Class class$0>;

        if $r13 != null goto label04;

     label01:
        $r13 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("org.eclipse.jdt.internal.compiler.parser.Parser");

     label02:
        <org.eclipse.jdt.internal.compiler.parser.Parser: java.lang.Class class$0> = $r13;

        goto label04;

     label03:
        $r10 := @caughtexception;

        $r15 = new java.lang.NoClassDefFoundError;

        $r12 = virtualinvoke $r10.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r15.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r12);

        throw $r15;

     label04:
        $r1 = virtualinvoke $r13.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>(r0);

        r14 = $r1;

        if $r1 != null goto label05;

        $r16 = new java.io.IOException;

        $r5 = <org.eclipse.jdt.internal.compiler.util.Messages: java.lang.String parser_missingFile>;

        $r6 = staticinvoke <org.eclipse.jdt.internal.compiler.util.Messages: java.lang.String bind(java.lang.String,java.lang.Object)>($r5, r0);

        specialinvoke $r16.<java.io.IOException: void <init>(java.lang.String)>($r6);

        throw $r16;

     label05:
        $r17 = new java.io.BufferedInputStream;

        specialinvoke $r17.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r1);

        r14 = $r17;

        $i1 = (int) -1;

        $r3 = staticinvoke <org.eclipse.jdt.internal.compiler.util.Util: byte[] getInputStreamAsByteArray(java.io.InputStream,int)>($r17, $i1);

        goto label11;

     label06:
        $r9 := @caughtexception;

     label07:
        virtualinvoke r14.<java.io.InputStream: void close()>();

     label08:
        goto label10;

     label09:
        $r8 := @caughtexception;

     label10:
        throw $r9;

     label11:
        virtualinvoke $r17.<java.io.InputStream: void close()>();

     label12:
        goto label14;

     label13:
        $r7 := @caughtexception;

     label14:
        return $r3;

        catch java.lang.ClassNotFoundException from label01 to label02 with label03;
        catch java.lang.Throwable from label05 to label06 with label06;
        catch java.io.IOException from label07 to label08 with label09;
        catch java.io.IOException from label11 to label12 with label13;
    }

    protected static java.lang.String[] readNameTable(java.lang.String) throws java.io.IOException
    {
        java.lang.String[] r3;
        char[][] $r2;
        int $i0, $i1, $i2, $i3, i4;
        char[] $r1, $r5;
        java.lang.String r0, $r4;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.eclipse.jdt.internal.compiler.parser.Parser: char[] readTable(java.lang.String)>(r0);

        $r2 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: char[][] splitOn(char,char[])>(10, $r1);

        $i0 = lengthof $r2;

        $i1 = $i0 + 1;

        r3 = newarray (java.lang.String)[$i1];

        r3[0] = null;

        i4 = 0;

        goto label2;

     label1:
        $i3 = i4 + 1;

        $r4 = new java.lang.String;

        $r5 = $r2[i4];

        specialinvoke $r4.<java.lang.String: void <init>(char[])>($r5);

        r3[$i3] = $r4;

        i4 = i4 + 1;

     label2:
        $i2 = lengthof $r2;

        if i4 < $i2 goto label1;

        return r3;
    }

    protected static java.lang.String[] readReadableNameTable(java.lang.String)
    {
        java.lang.String[] $r0, r1, $r5, $r7, $r10, $r13, $r24;
        java.util.ResourceBundle $r4;
        java.util.Locale $r3, $r21;
        java.lang.StringBuffer $r16, $r19, $r20, $r22;
        int $i0, $i1, i2, i3, $i4;
        java.lang.String r2, $r6, $r8, $r9, $r11, $r14, $r18, $r23;
        java.io.PrintStream $r17;
        java.util.MissingResourceException $r12, $r15;

        r2 := @parameter0: java.lang.String;

        $r0 = <org.eclipse.jdt.internal.compiler.parser.Parser: java.lang.String[] name>;

        $i0 = lengthof $r0;

        r1 = newarray (java.lang.String)[$i0];

     label01:
        $r3 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $r4 = staticinvoke <java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale)>(r2, $r3);

     label02:
        goto label04;

     label03:
        $r15 := @caughtexception;

        $r17 = <java.lang.System: java.io.PrintStream out>;

        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>(java.lang.String)>("Missing resource : ");

        $r18 = virtualinvoke r2.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        $r19 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".properties for locale ");

        $r21 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r17.<java.io.PrintStream: void println(java.lang.String)>($r23);

        throw $r15;

     label04:
        i2 = 0;

        goto label06;

     label05:
        $r5 = <org.eclipse.jdt.internal.compiler.parser.Parser: java.lang.String[] name>;

        $r6 = $r5[i2];

        r1[i2] = $r6;

        i2 = i2 + 1;

     label06:
        if i2 < 111 goto label05;

        i3 = 110;

        goto label12;

     label07:
        $r7 = <org.eclipse.jdt.internal.compiler.parser.Parser: java.lang.String[] name>;

        $r8 = $r7[i3];

        $r9 = virtualinvoke $r4.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>($r8);

        if $r9 == null goto label08;

        $i1 = virtualinvoke $r9.<java.lang.String: int length()>();

        if $i1 <= 0 goto label08;

        r1[i3] = $r9;

        goto label11;

     label08:
        $r10 = <org.eclipse.jdt.internal.compiler.parser.Parser: java.lang.String[] name>;

        $r11 = $r10[i3];

        r1[i3] = $r11;

     label09:
        goto label11;

     label10:
        $r12 := @caughtexception;

        $r13 = <org.eclipse.jdt.internal.compiler.parser.Parser: java.lang.String[] name>;

        $r14 = $r13[i3];

        r1[i3] = $r14;

     label11:
        i3 = i3 + 1;

     label12:
        $r24 = <org.eclipse.jdt.internal.compiler.parser.Parser: java.lang.String[] name>;

        $i4 = lengthof $r24;

        if i3 < $i4 goto label07;

        return r1;

        catch java.util.MissingResourceException from label01 to label02 with label03;
        catch java.util.MissingResourceException from label07 to label09 with label10;
    }

    protected static char[] readTable(java.lang.String) throws java.io.IOException
    {
        byte[] $r3;
        java.io.BufferedInputStream $r21;
        byte $b3, $b5;
        java.lang.Throwable $r13;
        short $s4, $s6, $s16, $s18;
        int $i0, $i1, $i2, $i7, $i8, $i10, i11, i12, i13, $i15, $i17, $i19;
        java.lang.String r0, $r6, $r7, $r9, $r10, $r16;
        java.lang.NoClassDefFoundError $r19;
        char $c9;
        java.io.IOException $r11, $r12, $r20, $r22;
        char[] r4;
        java.lang.ClassNotFoundException $r14;
        java.lang.Class $r17;
        java.io.InputStream $r1, r18;

        r0 := @parameter0: java.lang.String;

        $r17 = <org.eclipse.jdt.internal.compiler.parser.Parser: java.lang.Class class$0>;

        if $r17 != null goto label04;

     label01:
        $r17 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("org.eclipse.jdt.internal.compiler.parser.Parser");

     label02:
        <org.eclipse.jdt.internal.compiler.parser.Parser: java.lang.Class class$0> = $r17;

        goto label04;

     label03:
        $r14 := @caughtexception;

        $r19 = new java.lang.NoClassDefFoundError;

        $r16 = virtualinvoke $r14.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r19.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r16);

        throw $r19;

     label04:
        $r1 = virtualinvoke $r17.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>(r0);

        r18 = $r1;

        if $r1 != null goto label05;

        $r20 = new java.io.IOException;

        $r9 = <org.eclipse.jdt.internal.compiler.util.Messages: java.lang.String parser_missingFile>;

        $r10 = staticinvoke <org.eclipse.jdt.internal.compiler.util.Messages: java.lang.String bind(java.lang.String,java.lang.Object)>($r9, r0);

        specialinvoke $r20.<java.io.IOException: void <init>(java.lang.String)>($r10);

        throw $r20;

     label05:
        $r21 = new java.io.BufferedInputStream;

        specialinvoke $r21.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r1);

        r18 = $r21;

        $i15 = (int) -1;

        $r3 = staticinvoke <org.eclipse.jdt.internal.compiler.util.Util: byte[] getInputStreamAsByteArray(java.io.InputStream,int)>($r21, $i15);

        goto label11;

     label06:
        $r13 := @caughtexception;

     label07:
        virtualinvoke r18.<java.io.InputStream: void close()>();

     label08:
        goto label10;

     label09:
        $r12 := @caughtexception;

     label10:
        throw $r13;

     label11:
        virtualinvoke $r21.<java.io.InputStream: void close()>();

     label12:
        goto label14;

     label13:
        $r11 := @caughtexception;

     label14:
        $i10 = lengthof $r3;

        $i0 = $i10 & 1;

        if $i0 == 0 goto label15;

        $r22 = new java.io.IOException;

        $r6 = <org.eclipse.jdt.internal.compiler.util.Messages: java.lang.String parser_corruptedFile>;

        $r7 = staticinvoke <org.eclipse.jdt.internal.compiler.util.Messages: java.lang.String bind(java.lang.String,java.lang.Object)>($r6, r0);

        specialinvoke $r22.<java.io.IOException: void <init>(java.lang.String)>($r7);

        throw $r22;

     label15:
        $i1 = $i10 / 2;

        r4 = newarray (char)[$i1];

        i11 = 0;

        i12 = 0;

     label16:
        $i2 = i12;

        i12 = i12 + 1;

        i13 = i11 + 1;

        $b3 = $r3[i11];

        $s16 = (short) $b3;

        $s4 = $s16 & 255;

        $i17 = (int) $s4;

        $i7 = $i17 << 8;

        i11 = i13 + 1;

        $b5 = $r3[i13];

        $s18 = (short) $b5;

        $s6 = $s18 & 255;

        $i19 = (int) $s6;

        $i8 = $i7 + $i19;

        $c9 = (char) $i8;

        r4[$i2] = $c9;

        if i11 != $i10 goto label16;

        return r4;

        catch java.lang.ClassNotFoundException from label01 to label02 with label03;
        catch java.lang.Throwable from label05 to label06 with label06;
        catch java.io.IOException from label07 to label08 with label09;
        catch java.io.IOException from label11 to label12 with label13;
    }

    protected static long[] readLongTable(java.lang.String) throws java.io.IOException
    {
        byte[] $r3;
        java.io.BufferedInputStream $r21;
        byte $b3, $b6, $b11, $b16, $b21, $b26, $b31, $b36;
        java.lang.Throwable $r13;
        long $l5, $l8, $l9, $l10, $l13, $l14, $l15, $l18, $l19, $l20, $l23, $l24, $l25, $l28, $l29, $l30, $l33, $l34, $l35, $l38, $l39, $l40;
        short $s4, $s7, $s12, $s17, $s22, $s27, $s32, $s37, $s53, $s54, $s55, $s56, $s57, $s58, $s59, $s60;
        java.lang.String r0, $r6, $r7, $r9, $r10, $r16;
        java.io.IOException $r11, $r12, $r20, $r22;
        java.lang.ClassNotFoundException $r14;
        long[] r4;
        int $i0, $i1, $i2, $i41, i42, i43, i44, i45, i46, i47, i48, i49, i50, $i52;
        java.lang.NoClassDefFoundError $r19;
        java.lang.Class $r17;
        java.io.InputStream $r1, r18;

        r0 := @parameter0: java.lang.String;

        $r17 = <org.eclipse.jdt.internal.compiler.parser.Parser: java.lang.Class class$0>;

        if $r17 != null goto label04;

     label01:
        $r17 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("org.eclipse.jdt.internal.compiler.parser.Parser");

     label02:
        <org.eclipse.jdt.internal.compiler.parser.Parser: java.lang.Class class$0> = $r17;

        goto label04;

     label03:
        $r14 := @caughtexception;

        $r19 = new java.lang.NoClassDefFoundError;

        $r16 = virtualinvoke $r14.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r19.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r16);

        throw $r19;

     label04:
        $r1 = virtualinvoke $r17.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>(r0);

        r18 = $r1;

        if $r1 != null goto label05;

        $r20 = new java.io.IOException;

        $r9 = <org.eclipse.jdt.internal.compiler.util.Messages: java.lang.String parser_missingFile>;

        $r10 = staticinvoke <org.eclipse.jdt.internal.compiler.util.Messages: java.lang.String bind(java.lang.String,java.lang.Object)>($r9, r0);

        specialinvoke $r20.<java.io.IOException: void <init>(java.lang.String)>($r10);

        throw $r20;

     label05:
        $r21 = new java.io.BufferedInputStream;

        specialinvoke $r21.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r1);

        r18 = $r21;

        $i52 = (int) -1;

        $r3 = staticinvoke <org.eclipse.jdt.internal.compiler.util.Util: byte[] getInputStreamAsByteArray(java.io.InputStream,int)>($r21, $i52);

        goto label11;

     label06:
        $r13 := @caughtexception;

     label07:
        virtualinvoke r18.<java.io.InputStream: void close()>();

     label08:
        goto label10;

     label09:
        $r12 := @caughtexception;

     label10:
        throw $r13;

     label11:
        virtualinvoke $r21.<java.io.InputStream: void close()>();

     label12:
        goto label14;

     label13:
        $r11 := @caughtexception;

     label14:
        $i41 = lengthof $r3;

        $i0 = $i41 % 8;

        if $i0 == 0 goto label15;

        $r22 = new java.io.IOException;

        $r6 = <org.eclipse.jdt.internal.compiler.util.Messages: java.lang.String parser_corruptedFile>;

        $r7 = staticinvoke <org.eclipse.jdt.internal.compiler.util.Messages: java.lang.String bind(java.lang.String,java.lang.Object)>($r6, r0);

        specialinvoke $r22.<java.io.IOException: void <init>(java.lang.String)>($r7);

        throw $r22;

     label15:
        $i1 = $i41 / 8;

        r4 = newarray (long)[$i1];

        i42 = 0;

        i43 = 0;

     label16:
        $i2 = i43;

        i43 = i43 + 1;

        i44 = i42 + 1;

        $b3 = $r3[i42];

        $s53 = (short) $b3;

        $s4 = $s53 & 255;

        $l5 = (long) $s4;

        $l10 = $l5 << 56;

        i45 = i44 + 1;

        $b6 = $r3[i44];

        $s54 = (short) $b6;

        $s7 = $s54 & 255;

        $l8 = (long) $s7;

        $l9 = $l8 << 48;

        $l15 = $l10 + $l9;

        i46 = i45 + 1;

        $b11 = $r3[i45];

        $s55 = (short) $b11;

        $s12 = $s55 & 255;

        $l13 = (long) $s12;

        $l14 = $l13 << 40;

        $l20 = $l15 + $l14;

        i47 = i46 + 1;

        $b16 = $r3[i46];

        $s56 = (short) $b16;

        $s17 = $s56 & 255;

        $l18 = (long) $s17;

        $l19 = $l18 << 32;

        $l25 = $l20 + $l19;

        i48 = i47 + 1;

        $b21 = $r3[i47];

        $s57 = (short) $b21;

        $s22 = $s57 & 255;

        $l23 = (long) $s22;

        $l24 = $l23 << 24;

        $l30 = $l25 + $l24;

        i49 = i48 + 1;

        $b26 = $r3[i48];

        $s58 = (short) $b26;

        $s27 = $s58 & 255;

        $l28 = (long) $s27;

        $l29 = $l28 << 16;

        $l35 = $l30 + $l29;

        i50 = i49 + 1;

        $b31 = $r3[i49];

        $s59 = (short) $b31;

        $s32 = $s59 & 255;

        $l33 = (long) $s32;

        $l34 = $l33 << 8;

        $l39 = $l35 + $l34;

        i42 = i50 + 1;

        $b36 = $r3[i50];

        $s60 = (short) $b36;

        $s37 = $s60 & 255;

        $l38 = (long) $s37;

        $l40 = $l39 + $l38;

        r4[$i2] = $l40;

        if i42 != $i41 goto label16;

        return r4;

        catch java.lang.ClassNotFoundException from label01 to label02 with label03;
        catch java.lang.Throwable from label05 to label06 with label06;
        catch java.io.IOException from label07 to label08 with label09;
        catch java.io.IOException from label11 to label12 with label13;
    }

    public static int tAction(int, int)
    {
        byte[] $r1;
        byte $b4;
        int i0, i1, $i3, $i7, $i8, $i9, $i10, $i11;
        char $c2, $c5, $c6;
        char[] $r0, $r2, $r3, $r4;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r3 = <org.eclipse.jdt.internal.compiler.parser.Parser: char[] term_action>;

        $r1 = <org.eclipse.jdt.internal.compiler.parser.Parser: byte[] term_check>;

        $r0 = <org.eclipse.jdt.internal.compiler.parser.Parser: char[] base_action>;

        $c2 = $r0[i0];

        $i8 = (int) $c2;

        $i3 = $i8 + i1;

        $b4 = $r1[$i3];

        $i9 = (int) $b4;

        if $i9 != i1 goto label1;

        $r4 = <org.eclipse.jdt.internal.compiler.parser.Parser: char[] base_action>;

        $c6 = $r4[i0];

        $i10 = (int) $c6;

        $i7 = $i10 + i1;

        goto label2;

     label1:
        $r2 = <org.eclipse.jdt.internal.compiler.parser.Parser: char[] base_action>;

        $i7 = $r2[i0];

     label2:
        $c5 = $r3[$i7];

        $i11 = (int) $c5;

        return $i11;
    }

    public void <init>(org.eclipse.jdt.internal.compiler.problem.ProblemReporter, boolean)
    {
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter r9;
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r2, $r7;
        char[][] $r14;
        long[] $r18;
        int[] $r3, $r4, $r8, $r11, $r12, $r13, $r15, $r16, $r17, $r19;
        int $i1;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r1, $r5, $r6;
        boolean z0;
        org.eclipse.jdt.internal.compiler.parser.JavadocParser $r20;
        org.eclipse.jdt.internal.compiler.impl.CompilerOptions $r10;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        r9 := @parameter0: org.eclipse.jdt.internal.compiler.problem.ProblemReporter;

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (org.eclipse.jdt.internal.compiler.ast.ASTNode)[100];

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack> = $r1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean diet> = 0;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int dietInt> = 0;

        $r2 = newarray (org.eclipse.jdt.internal.compiler.ast.Expression)[100];

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack> = $r2;

        $r3 = newarray (int)[10];

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] genericsIdentifiersLengthStack> = $r3;

        $r4 = newarray (int)[10];

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] genericsLengthStack> = $r4;

        $r5 = newarray (org.eclipse.jdt.internal.compiler.ast.ASTNode)[10];

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] genericsStack> = $r5;

        $i1 = (int) -1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastErrorEndPositionBeforeRecovery> = $i1;

        $r6 = newarray (org.eclipse.jdt.internal.compiler.ast.ASTNode)[100];

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] noAstNodes> = $r6;

        $r7 = newarray (org.eclipse.jdt.internal.compiler.ast.Expression)[100];

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] noExpressions> = $r7;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean optimizeStringLiterals> = 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean reportOnlyOneSyntaxError> = 0;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean reportSyntaxErrorIsRequired> = 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean annotationRecoveryActivated> = 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean methodRecoveryActivated> = 0;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean statementRecoveryActivated> = 0;

        $r8 = newarray (int)[255];

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] stack> = $r8;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter> = r9;

        $r10 = r9.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: org.eclipse.jdt.internal.compiler.impl.CompilerOptions options>;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.CompilerOptions options> = $r10;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean optimizeStringLiterals> = z0;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void initializeScanner()>();

        $r11 = newarray (int)[50];

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] astLengthStack> = $r11;

        $r12 = newarray (int)[30];

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] expressionLengthStack> = $r12;

        $r13 = newarray (int)[50];

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack> = $r13;

        $r14 = newarray (char[])[30];

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: char[][] identifierStack> = $r14;

        $r15 = newarray (int)[30];

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] identifierLengthStack> = $r15;

        $r16 = newarray (int)[30];

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] nestedMethod> = $r16;

        $r17 = newarray (int)[30];

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] realBlockStack> = $r17;

        $r18 = newarray (long)[30];

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: long[] identifierPositionStack> = $r18;

        $r19 = newarray (int)[30];

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] variablesCounter> = $r19;

        $r20 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.JavadocParser createJavadocParser()>();

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.JavadocParser javadocParser> = $r20;

        return;
    }

    protected void annotationRecoveryCheckPoint(int, int)
    {
        int i0, $i1, $i2, i3;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        i3 := @parameter0: int;

        i0 := @parameter1: int;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastCheckPoint>;

        if $i1 >= i0 goto label1;

        $i2 = i0 + 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastCheckPoint> = $i2;

     label1:
        return;
    }

    public void arrayInitializer(int)
    {
        org.eclipse.jdt.internal.compiler.ast.ArrayInitializer $r0;
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r3, $r4;
        int[] $r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        org.eclipse.jdt.internal.compiler.parser.Parser r1;

        r1 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        i0 := @parameter0: int;

        $r0 = new org.eclipse.jdt.internal.compiler.ast.ArrayInitializer;

        specialinvoke $r0.<org.eclipse.jdt.internal.compiler.ast.ArrayInitializer: void <init>()>();

        if i0 == 0 goto label1;

        $i5 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i6 = $i5 - i0;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr> = $i6;

        $r4 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i7 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i8 = $i7 + 1;

        $r3 = newarray (org.eclipse.jdt.internal.compiler.ast.Expression)[i0];

        $r0.<org.eclipse.jdt.internal.compiler.ast.ArrayInitializer: org.eclipse.jdt.internal.compiler.ast.Expression[] expressions> = $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, $i8, $r3, 0, i0);

     label1:
        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnExpressionStack(org.eclipse.jdt.internal.compiler.ast.Expression)>($r0);

        $i1 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        $r0.<org.eclipse.jdt.internal.compiler.ast.ArrayInitializer: int sourceEnd> = $i1;

        $r2 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i2 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i3 = $i2 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i3;

        $i4 = $r2[$i2];

        $r0.<org.eclipse.jdt.internal.compiler.ast.ArrayInitializer: int sourceStart> = $i4;

        return;
    }

    protected void blockReal()
    {
        int[] $r1;
        int $i0, $i1, $i2;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] realBlockStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int realBlockPtr>;

        $i1 = $r1[$i0];

        $i2 = $i1 + 1;

        $r1[$i0] = $i2;

        return;
    }

    public org.eclipse.jdt.internal.compiler.parser.RecoveredElement buildInitialRecoveryState()
    {
        org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration $r29, $r30, $r31, $r32;
        org.eclipse.jdt.internal.compiler.parser.RecoveredUnit $r47;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r5;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r1, $r10, $r18, $r19, $r20;
        org.eclipse.jdt.internal.compiler.parser.RecoveredMethod $r48;
        org.eclipse.jdt.internal.compiler.ast.Block $r8, $r17, r43, $r49;
        org.eclipse.jdt.internal.compiler.ast.FieldDeclaration[] $r15, $r36;
        org.eclipse.jdt.internal.compiler.ast.Statement r46;
        org.eclipse.jdt.internal.compiler.ast.Expression $r6, $r7, $r45;
        org.eclipse.jdt.internal.compiler.ast.FieldDeclaration r35, r40;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration $r9, $r11, $r12, $r13, r34, r41;
        org.eclipse.jdt.internal.compiler.ast.ASTNode r37;
        org.eclipse.jdt.internal.compiler.impl.ReferenceContext $r2, $r3, $r4, $r14, $r23, $r25;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, i47, $i48, i49, $i50, $i51, $i53;
        org.eclipse.jdt.internal.compiler.ast.ImportReference r42;
        org.eclipse.jdt.internal.compiler.parser.RecoveredElement r33;
        org.eclipse.jdt.internal.compiler.ast.LocalDeclaration r44;
        org.eclipse.jdt.internal.compiler.parser.RecoveredInitializer $r50;
        org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration $r24, $r26, r38;
        org.eclipse.jdt.internal.compiler.ast.Initializer $r16, r39;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastCheckPoint> = 0;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i0 = $r1.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastErrorEndPositionBeforeRecovery> = $i0;

        r33 = null;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.ReferenceContext referenceContext>;

        $z0 = $r2 instanceof org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration;

        if $z0 == 0 goto label01;

        $r47 = new org.eclipse.jdt.internal.compiler.parser.RecoveredUnit;

        $r29 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit>;

        specialinvoke $r47.<org.eclipse.jdt.internal.compiler.parser.RecoveredUnit: void <init>(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,int,org.eclipse.jdt.internal.compiler.parser.Parser)>($r29, 0, r0);

        $r30 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit>;

        $r30.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: org.eclipse.jdt.internal.compiler.ast.ImportReference currentPackage> = null;

        $r31 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit>;

        $r31.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: org.eclipse.jdt.internal.compiler.ast.ImportReference[] imports> = null;

        $r32 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit>;

        $r32.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] types> = null;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int currentToken> = 0;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int listLength> = 0;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int listTypeParameterLength> = 0;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endPosition> = 0;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition> = 0;

        return $r47;

     label01:
        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.ReferenceContext referenceContext>;

        $z1 = $r3 instanceof org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration;

        if $z1 == 0 goto label02;

        $r48 = new org.eclipse.jdt.internal.compiler.parser.RecoveredMethod;

        $r23 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.ReferenceContext referenceContext>;

        $r24 = (org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration) $r23;

        specialinvoke $r48.<org.eclipse.jdt.internal.compiler.parser.RecoveredMethod: void <init>(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,org.eclipse.jdt.internal.compiler.parser.RecoveredElement,int,org.eclipse.jdt.internal.compiler.parser.Parser)>($r24, null, 0, r0);

        r33 = $r48;

        $r25 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.ReferenceContext referenceContext>;

        $r26 = (org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration) $r25;

        $i46 = $r26.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: int bodyStart>;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastCheckPoint> = $i46;

        $z19 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean statementRecoveryActivated>;

        if $z19 == 0 goto label06;

        $r49 = new org.eclipse.jdt.internal.compiler.ast.Block;

        specialinvoke $r49.<org.eclipse.jdt.internal.compiler.ast.Block: void <init>(int)>(0);

        r33 = virtualinvoke $r48.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.Block,int)>($r49, 0);

        goto label06;

     label02:
        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.ReferenceContext referenceContext>;

        $z2 = $r4 instanceof org.eclipse.jdt.internal.compiler.ast.TypeDeclaration;

        if $z2 == 0 goto label06;

        $r14 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.ReferenceContext referenceContext>;

        r34 = (org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) $r14;

        i47 = 0;

        goto label05;

     label03:
        $r15 = r34.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.FieldDeclaration[] fields>;

        r35 = $r15[i47];

        if r35 == null goto label04;

        $i37 = virtualinvoke r35.<org.eclipse.jdt.internal.compiler.ast.FieldDeclaration: int getKind()>();

        if $i37 != 2 goto label04;

        $r16 = (org.eclipse.jdt.internal.compiler.ast.Initializer) r35;

        $r17 = $r16.<org.eclipse.jdt.internal.compiler.ast.Initializer: org.eclipse.jdt.internal.compiler.ast.Block block>;

        if $r17 == null goto label04;

        $i39 = r35.<org.eclipse.jdt.internal.compiler.ast.FieldDeclaration: int declarationSourceStart>;

        $r18 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i38 = $r18.<org.eclipse.jdt.internal.compiler.parser.Scanner: int initialPosition>;

        if $i39 > $i38 goto label04;

        $r19 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i41 = $r19.<org.eclipse.jdt.internal.compiler.parser.Scanner: int initialPosition>;

        $i40 = r35.<org.eclipse.jdt.internal.compiler.ast.FieldDeclaration: int declarationSourceEnd>;

        if $i41 > $i40 goto label04;

        $r20 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i44 = $r20.<org.eclipse.jdt.internal.compiler.parser.Scanner: int eofPosition>;

        $i42 = r35.<org.eclipse.jdt.internal.compiler.ast.FieldDeclaration: int declarationSourceEnd>;

        $i43 = $i42 + 1;

        if $i44 > $i43 goto label04;

        $r50 = new org.eclipse.jdt.internal.compiler.parser.RecoveredInitializer;

        specialinvoke $r50.<org.eclipse.jdt.internal.compiler.parser.RecoveredInitializer: void <init>(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,org.eclipse.jdt.internal.compiler.parser.RecoveredElement,int,org.eclipse.jdt.internal.compiler.parser.Parser)>(r35, null, 1, r0);

        r33 = $r50;

        $i45 = r35.<org.eclipse.jdt.internal.compiler.ast.FieldDeclaration: int declarationSourceStart>;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastCheckPoint> = $i45;

        goto label06;

     label04:
        i47 = i47 + 1;

     label05:
        $r36 = r34.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.FieldDeclaration[] fields>;

        $i48 = lengthof $r36;

        if i47 < $i48 goto label03;

     label06:
        if r33 != null goto label07;

        return r33;

     label07:
        i49 = 0;

        goto label26;

     label08:
        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        r37 = $r5[i49];

        $z3 = r37 instanceof org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration;

        if $z3 == 0 goto label10;

        r38 = (org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration) r37;

        $i28 = r38.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: int declarationSourceEnd>;

        if $i28 != 0 goto label09;

        r33 = virtualinvoke r33.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,int)>(r38, 0);

        $i31 = r38.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: int bodyStart>;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastCheckPoint> = $i31;

        goto label25;

     label09:
        r33 = virtualinvoke r33.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,int)>(r38, 0);

        $i29 = r38.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: int declarationSourceEnd>;

        $i30 = $i29 + 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastCheckPoint> = $i30;

        goto label25;

     label10:
        $z4 = r37 instanceof org.eclipse.jdt.internal.compiler.ast.Initializer;

        if $z4 == 0 goto label13;

        r39 = (org.eclipse.jdt.internal.compiler.ast.Initializer) r37;

        $r8 = r39.<org.eclipse.jdt.internal.compiler.ast.Initializer: org.eclipse.jdt.internal.compiler.ast.Block block>;

        if $r8 != null goto label11;

        goto label25;

     label11:
        $i24 = r39.<org.eclipse.jdt.internal.compiler.ast.Initializer: int declarationSourceEnd>;

        if $i24 != 0 goto label12;

        r33 = virtualinvoke r33.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,int)>(r39, 1);

        $i27 = r39.<org.eclipse.jdt.internal.compiler.ast.Initializer: int sourceStart>;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastCheckPoint> = $i27;

        goto label25;

     label12:
        r33 = virtualinvoke r33.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,int)>(r39, 0);

        $i25 = r39.<org.eclipse.jdt.internal.compiler.ast.Initializer: int declarationSourceEnd>;

        $i26 = $i25 + 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastCheckPoint> = $i26;

        goto label25;

     label13:
        $z5 = r37 instanceof org.eclipse.jdt.internal.compiler.ast.FieldDeclaration;

        if $z5 == 0 goto label16;

        r40 = (org.eclipse.jdt.internal.compiler.ast.FieldDeclaration) r37;

        $i17 = r40.<org.eclipse.jdt.internal.compiler.ast.FieldDeclaration: int declarationSourceEnd>;

        if $i17 != 0 goto label15;

        r33 = virtualinvoke r33.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,int)>(r40, 0);

        $r6 = r40.<org.eclipse.jdt.internal.compiler.ast.FieldDeclaration: org.eclipse.jdt.internal.compiler.ast.Expression initialization>;

        if $r6 != null goto label14;

        $i22 = r40.<org.eclipse.jdt.internal.compiler.ast.FieldDeclaration: int sourceEnd>;

        $i23 = $i22 + 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastCheckPoint> = $i23;

        goto label25;

     label14:
        $r7 = r40.<org.eclipse.jdt.internal.compiler.ast.FieldDeclaration: org.eclipse.jdt.internal.compiler.ast.Expression initialization>;

        $i20 = $r7.<org.eclipse.jdt.internal.compiler.ast.Expression: int sourceEnd>;

        $i21 = $i20 + 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastCheckPoint> = $i21;

        goto label25;

     label15:
        r33 = virtualinvoke r33.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,int)>(r40, 0);

        $i18 = r40.<org.eclipse.jdt.internal.compiler.ast.FieldDeclaration: int declarationSourceEnd>;

        $i19 = $i18 + 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastCheckPoint> = $i19;

        goto label25;

     label16:
        $z6 = r37 instanceof org.eclipse.jdt.internal.compiler.ast.TypeDeclaration;

        if $z6 == 0 goto label18;

        r41 = (org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) r37;

        $i13 = r41.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int declarationSourceEnd>;

        if $i13 != 0 goto label17;

        r33 = virtualinvoke r33.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,int)>(r41, 0);

        $i16 = r41.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bodyStart>;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastCheckPoint> = $i16;

        goto label25;

     label17:
        r33 = virtualinvoke r33.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,int)>(r41, 0);

        $i14 = r41.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int declarationSourceEnd>;

        $i15 = $i14 + 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastCheckPoint> = $i15;

        goto label25;

     label18:
        $z7 = r37 instanceof org.eclipse.jdt.internal.compiler.ast.ImportReference;

        if $z7 == 0 goto label19;

        r42 = (org.eclipse.jdt.internal.compiler.ast.ImportReference) r37;

        r33 = virtualinvoke r33.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.ImportReference,int)>(r42, 0);

        $i11 = r42.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationSourceEnd>;

        $i12 = $i11 + 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastCheckPoint> = $i12;

     label19:
        $z8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean statementRecoveryActivated>;

        if $z8 == 0 goto label25;

        $z9 = r37 instanceof org.eclipse.jdt.internal.compiler.ast.Block;

        if $z9 == 0 goto label20;

        r43 = (org.eclipse.jdt.internal.compiler.ast.Block) r37;

        r33 = virtualinvoke r33.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.Block,int)>(r43, 0);

        $i9 = r43.<org.eclipse.jdt.internal.compiler.ast.Block: int sourceEnd>;

        $i10 = $i9 + 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastCheckPoint> = $i10;

        goto label25;

     label20:
        $z10 = r37 instanceof org.eclipse.jdt.internal.compiler.ast.LocalDeclaration;

        if $z10 == 0 goto label21;

        r44 = (org.eclipse.jdt.internal.compiler.ast.LocalDeclaration) r37;

        r33 = virtualinvoke r33.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,int)>(r44, 0);

        $i7 = r44.<org.eclipse.jdt.internal.compiler.ast.LocalDeclaration: int sourceEnd>;

        $i8 = $i7 + 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastCheckPoint> = $i8;

        goto label25;

     label21:
        $z11 = r37 instanceof org.eclipse.jdt.internal.compiler.ast.Expression;

        if $z11 == 0 goto label24;

        $z13 = r37 instanceof org.eclipse.jdt.internal.compiler.ast.Assignment;

        if $z13 != 0 goto label22;

        $z14 = r37 instanceof org.eclipse.jdt.internal.compiler.ast.PrefixExpression;

        if $z14 != 0 goto label22;

        $z15 = r37 instanceof org.eclipse.jdt.internal.compiler.ast.PostfixExpression;

        if $z15 != 0 goto label22;

        $z16 = r37 instanceof org.eclipse.jdt.internal.compiler.ast.MessageSend;

        if $z16 != 0 goto label22;

        $z17 = r37 instanceof org.eclipse.jdt.internal.compiler.ast.AllocationExpression;

        if $z17 == 0 goto label25;

     label22:
        $r45 = (org.eclipse.jdt.internal.compiler.ast.Expression) r37;

        r33 = virtualinvoke r33.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.Statement,int)>($r45, 0);

        $i50 = $r45.<org.eclipse.jdt.internal.compiler.ast.Expression: int statementEnd>;

        $i53 = (int) -1;

        if $i50 == $i53 goto label23;

        $i5 = $r45.<org.eclipse.jdt.internal.compiler.ast.Expression: int statementEnd>;

        $i6 = $i5 + 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastCheckPoint> = $i6;

        goto label25;

     label23:
        $i3 = $r45.<org.eclipse.jdt.internal.compiler.ast.Expression: int sourceEnd>;

        $i4 = $i3 + 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastCheckPoint> = $i4;

        goto label25;

     label24:
        $z12 = r37 instanceof org.eclipse.jdt.internal.compiler.ast.Statement;

        if $z12 == 0 goto label25;

        r46 = (org.eclipse.jdt.internal.compiler.ast.Statement) r37;

        r33 = virtualinvoke r33.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.Statement,int)>(r46, 0);

        $i1 = r46.<org.eclipse.jdt.internal.compiler.ast.Statement: int sourceEnd>;

        $i2 = $i1 + 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastCheckPoint> = $i2;

     label25:
        i49 = i49 + 1;

     label26:
        $i51 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        if i49 <= $i51 goto label08;

        $z18 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean statementRecoveryActivated>;

        if $z18 == 0 goto label27;

        $r9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration pendingRecoveredType>;

        if $r9 == null goto label27;

        $r10 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i32 = $r10.<org.eclipse.jdt.internal.compiler.parser.Scanner: int startPosition>;

        $i34 = $i32 - 1;

        $r11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration pendingRecoveredType>;

        $i33 = $r11.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int declarationSourceEnd>;

        if $i34 > $i33 goto label27;

        $r12 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration pendingRecoveredType>;

        r33 = virtualinvoke r33.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,int)>($r12, 0);

        $r13 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration pendingRecoveredType>;

        $i35 = $r13.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int declarationSourceEnd>;

        $i36 = $i35 + 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastCheckPoint> = $i36;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration pendingRecoveredType> = null;

     label27:
        return r33;
    }

    protected void checkAndSetModifiers(int)
    {
        org.eclipse.jdt.internal.compiler.parser.Scanner $r3;
        org.eclipse.jdt.internal.compiler.parser.RecoveredElement $r1, $r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        boolean $z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        i0 := @parameter0: int;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int modifiers>;

        $i2 = $i1 & i0;

        if $i2 == 0 goto label1;

        $i8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int modifiers>;

        $i9 = $i8 | 4194304;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int modifiers> = $i9;

     label1:
        $i3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int modifiers>;

        $i4 = $i3 | i0;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int modifiers> = $i4;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int modifiersSourceStart>;

        if $i5 >= 0 goto label2;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i7 = $r3.<org.eclipse.jdt.internal.compiler.parser.Scanner: int startPosition>;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int modifiersSourceStart> = $i7;

     label2:
        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r1 == null goto label3;

        $z0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean annotationRecoveryActivated>;

        if $z0 == 0 goto label3;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $i6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int modifiersSourceStart>;

        virtualinvoke $r2.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: void addModifier(int,int)>(i0, $i6);

     label3:
        return;
    }

    public void checkComment()
    {
        org.eclipse.jdt.internal.compiler.ast.Javadoc $r11;
        int[] $r3, $r6, $r15, $r17;
        boolean $z0, $z1, $z2, $z3;
        org.eclipse.jdt.internal.compiler.parser.JavadocParser $r4, $r7, $r8, $r9, $r10, $r19;
        int $i0, $i1, $i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, $i11, $i13, $i15;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r1, $r2, $r5, $r14, $r16, $r18;
        org.eclipse.jdt.internal.compiler.parser.RecoveredElement $r12, $r13;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $z0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean diet>;

        if $z0 == 0 goto label01;

        $i9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int dietInt>;

        if $i9 == 0 goto label02;

     label01:
        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i0 = $r1.<org.eclipse.jdt.internal.compiler.parser.Scanner: int commentPtr>;

        if $i0 < 0 goto label02;

        $i8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int flushCommentsDefinedPriorTo(int)>($i8);

     label02:
        $r18 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        i10 = $r18.<org.eclipse.jdt.internal.compiler.parser.Scanner: int commentPtr>;

        $i11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int modifiersSourceStart>;

        if $i11 < 0 goto label05;

        goto label04;

     label03:
        $i13 = (int) -1;

        i10 = i10 + $i13;

     label04:
        if i10 < 0 goto label05;

        $r16 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r17 = $r16.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentStarts>;

        $i7 = $r17[i10];

        $i6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int modifiersSourceStart>;

        if $i7 > $i6 goto label03;

     label05:
        if i10 < 0 goto label14;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r3 = $r2.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentStarts>;

        $i1 = $r3[0];

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int modifiersSourceStart> = $i1;

        goto label07;

     label06:
        $i15 = (int) -1;

        i10 = i10 + $i15;

     label07:
        if i10 < 0 goto label08;

        $r14 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r15 = $r14.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentStops>;

        $i5 = $r15[i10];

        if $i5 < 0 goto label06;

     label08:
        if i10 < 0 goto label14;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.JavadocParser javadocParser>;

        if $r4 == null goto label14;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r6 = $r5.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentStops>;

        $i2 = $r6[i10];

        i3 = $i2 - 1;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.JavadocParser javadocParser>;

        $z1 = $r7.<org.eclipse.jdt.internal.compiler.parser.JavadocParser: boolean shouldReportProblems>;

        if $z1 == 0 goto label11;

        $r19 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.JavadocParser javadocParser>;

        $r13 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r13 == null goto label09;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastJavadocEnd>;

        if i3 > $i4 goto label09;

        $z3 = 0;

        goto label10;

     label09:
        $z3 = 1;

     label10:
        $r19.<org.eclipse.jdt.internal.compiler.parser.JavadocParser: boolean reportProblems> = $z3;

        goto label12;

     label11:
        $r8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.JavadocParser javadocParser>;

        $r8.<org.eclipse.jdt.internal.compiler.parser.JavadocParser: boolean reportProblems> = 0;

     label12:
        $r9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.JavadocParser javadocParser>;

        $z2 = virtualinvoke $r9.<org.eclipse.jdt.internal.compiler.parser.JavadocParser: boolean checkDeprecation(int)>(i10);

        if $z2 == 0 goto label13;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void checkAndSetModifiers(int)>(1048576);

     label13:
        $r10 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.JavadocParser javadocParser>;

        $r11 = $r10.<org.eclipse.jdt.internal.compiler.parser.JavadocParser: org.eclipse.jdt.internal.compiler.ast.Javadoc docComment>;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc> = $r11;

        $r12 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r12 != null goto label14;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastJavadocEnd> = i3;

     label14:
        return;
    }

    protected void checkNonNLSAfterBodyEnd(int)
    {
        org.eclipse.jdt.internal.compiler.parser.Scanner $r1, $r2, $r4;
        org.eclipse.jdt.core.compiler.InvalidInputException $r3;
        int $i0, i1, $i2, $i3, $i4;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        i1 := @parameter0: int;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i0 = $r1.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        $i2 = $i0 - 1;

        if $i2 > i1 goto label6;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        if i1 >= 2147483647 goto label1;

        $i3 = i1 + 1;

        goto label2;

     label1:
        $i3 = i1;

     label2:
        $r2.<org.eclipse.jdt.internal.compiler.parser.Scanner: int eofPosition> = $i3;

     label3:
        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i4 = virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.parser.Scanner: int getNextToken()>();

        if $i4 != 68 goto label3;

     label4:
        goto label6;

     label5:
        $r3 := @caughtexception;

     label6:
        return;

        catch org.eclipse.jdt.core.compiler.InvalidInputException from label3 to label4 with label5;
    }

    protected void classInstanceCreation(boolean)
    {
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r13, $r14;
        int[] $r1, $r10, $r12;
        boolean $z0, z1;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r11;
        org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression $r4, $r5, $r15;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration $r8;
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r3, $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r2, $r6;
        org.eclipse.jdt.internal.compiler.ast.AllocationExpression $r9, r16;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        z1 := @parameter0: boolean;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] astLengthStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr> = $i1;

        $i2 = $r1[$i0];

        if $i2 != 1 goto label4;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $r7 = $r6[$i11];

        if $r7 != null goto label4;

        $i12 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i13 = $i12 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr> = $i13;

        if z1 == 0 goto label1;

        $r15 = new org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression;

        specialinvoke $r15.<org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression: void <init>()>();

        r16 = $r15;

        goto label2;

     label1:
        $r9 = new org.eclipse.jdt.internal.compiler.ast.AllocationExpression;

        specialinvoke $r9.<org.eclipse.jdt.internal.compiler.ast.AllocationExpression: void <init>()>();

        r16 = $r9;

     label2:
        $i14 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endPosition>;

        r16.<org.eclipse.jdt.internal.compiler.ast.AllocationExpression: int sourceEnd> = $i14;

        $r10 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] expressionLengthStack>;

        $i15 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        $i16 = $i15 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr> = $i16;

        $i17 = $r10[$i15];

        if $i17 == 0 goto label3;

        $i21 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i22 = $i21 - $i17;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr> = $i22;

        $r14 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i23 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i24 = $i23 + 1;

        $r13 = newarray (org.eclipse.jdt.internal.compiler.ast.Expression)[$i17];

        r16.<org.eclipse.jdt.internal.compiler.ast.AllocationExpression: org.eclipse.jdt.internal.compiler.ast.Expression[] arguments> = $r13;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r14, $i24, $r13, 0, $i17);

     label3:
        $r11 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeReference getTypeReference(int)>(0);

        r16.<org.eclipse.jdt.internal.compiler.ast.AllocationExpression: org.eclipse.jdt.internal.compiler.ast.TypeReference type> = $r11;

        $r12 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i18 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i19 = $i18 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i19;

        $i20 = $r12[$i18];

        r16.<org.eclipse.jdt.internal.compiler.ast.AllocationExpression: int sourceStart> = $i20;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnExpressionStack(org.eclipse.jdt.internal.compiler.ast.Expression)>(r16);

        goto label7;

     label4:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void dispatchDeclarationInto(int)>($i2);

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $r3 = $r2[$i3];

        $r8 = (org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) $r3;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        $r8.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int declarationSourceEnd> = $i4;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        $r8.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bodyEnd> = $i5;

        $r4 = $r8.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression allocation>;

        if $r4 == null goto label5;

        $r5 = $r8.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression allocation>;

        $i10 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        $r5.<org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression: int sourceEnd> = $i10;

     label5:
        if $i2 != 0 goto label6;

        $i7 = $r8.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bodyStart>;

        $i6 = $r8.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bodyEnd>;

        $z0 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean containsComment(int,int)>($i7, $i6);

        if $z0 != 0 goto label6;

        $i8 = $r8.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits>;

        $i9 = $i8 | 8;

        $r8.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits> = $i9;

     label6:
        $i25 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i26 = $i25 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr> = $i26;

        $i27 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr>;

        $i28 = $i27 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr> = $i28;

     label7:
        return;
    }

    protected void concatExpressionLists()
    {
        int[] $r1;
        int $i0, $i1, $i2, $i3;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] expressionLengthStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr> = $i1;

        $i2 = $r1[$i1];

        $i3 = $i2 + 1;

        $r1[$i1] = $i3;

        return;
    }

    protected void concatGenericsLists()
    {
        int[] $r1, $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] genericsLengthStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsLengthPtr>;

        $i1 = $i0 - 1;

        $i4 = $r1[$i1];

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] genericsLengthStack>;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsLengthPtr>;

        $i3 = $i2 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsLengthPtr> = $i3;

        $i5 = $r2[$i2];

        $i6 = $i4 + $i5;

        $r1[$i1] = $i6;

        return;
    }

    protected void concatNodeLists()
    {
        int[] $r1, $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] astLengthStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr>;

        $i1 = $i0 - 1;

        $i4 = $r1[$i1];

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] astLengthStack>;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr>;

        $i3 = $i2 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr> = $i3;

        $i5 = $r2[$i2];

        $i6 = $i4 + $i5;

        $r1[$i1] = $i6;

        return;
    }

    protected void consumeAdditionalBound()
    {
        int[] $r1;
        int $i0, $i1, $i2;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r2;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i1;

        $i2 = $r1[$i0];

        $r2 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeReference getTypeReference(int)>($i2);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnGenericsStack(org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r2);

        return;
    }

    protected void consumeAdditionalBound1()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        return;
    }

    protected void consumeAdditionalBoundList()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void concatGenericsLists()>();

        return;
    }

    protected void consumeAdditionalBoundList1()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void concatGenericsLists()>();

        return;
    }

    protected void consumeAllocationHeader()
    {
        int[] $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i12;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r2, $r10;
        org.eclipse.jdt.internal.compiler.parser.RecoveredElement $r1, $r11, $r12;
        org.eclipse.jdt.internal.compiler.CompilationResult $r5;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r9;
        char[] $r6;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration $r13;
        org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression $r14;
        org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration $r4;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r1 != null goto label1;

        return;

     label1:
        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int currentToken>;

        if $i0 != 69 goto label2;

        $r13 = new org.eclipse.jdt.internal.compiler.ast.TypeDeclaration;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit>;

        $r5 = $r4.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: org.eclipse.jdt.internal.compiler.CompilationResult compilationResult>;

        specialinvoke $r13.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: void <init>(org.eclipse.jdt.internal.compiler.CompilationResult)>($r5);

        $r6 = <org.eclipse.jdt.core.compiler.CharOperation: char[] NO_CHAR>;

        $r13.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: char[] name> = $r6;

        $i2 = $r13.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits>;

        $i3 = $i2 | 768;

        $r13.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits> = $i3;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i5 = $i4 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i5;

        $i6 = $r7[$i4];

        $r13.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int sourceStart> = $i6;

        $i7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int rParenPos>;

        $r13.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int sourceEnd> = $i7;

        $r14 = new org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression;

        specialinvoke $r14.<org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression: void <init>(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)>($r13);

        $r9 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeReference getTypeReference(int)>(0);

        $r14.<org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression: org.eclipse.jdt.internal.compiler.ast.TypeReference type> = $r9;

        $i8 = $r13.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int sourceStart>;

        $r14.<org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression: int sourceStart> = $i8;

        $i9 = $r13.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int sourceEnd>;

        $r14.<org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression: int sourceEnd> = $i9;

        $r10 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i10 = $r10.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        $r13.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bodyStart> = $i10;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastCheckPoint> = $i10;

        $r11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $r12 = virtualinvoke $r11.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,int)>($r13, 0);

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement> = $r12;

        $i12 = (int) -1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastIgnoredToken> = $i12;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int currentToken> = 0;

        return;

     label2:
        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i1 = $r2.<org.eclipse.jdt.internal.compiler.parser.Scanner: int startPosition>;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastCheckPoint> = $i1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean restartRecovery> = 1;

        return;
    }

    protected void consumeAnnotationAsModifier()
    {
        org.eclipse.jdt.internal.compiler.ast.Expression r2;
        int $i0, i1, $i2;
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r1;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        r2 = $r1[$i0];

        i1 = r2.<org.eclipse.jdt.internal.compiler.ast.Expression: int sourceStart>;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int modifiersSourceStart>;

        if $i2 >= 0 goto label1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int modifiersSourceStart> = i1;

     label1:
        return;
    }

    protected void consumeAnnotationName()
    {
        org.eclipse.jdt.internal.compiler.parser.RecoveredElement $r1, $r4, $r5;
        long $l3, $l4;
        long[] $r3;
        int[] $r2;
        int $i0, i1, $i2, i5, $i6, $i7;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        boolean $z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r1 == null goto label1;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        i1 = $r2[$i0];

        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: long[] identifierPositionStack>;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $l3 = $r3[$i2];

        $l4 = $l3 & 4294967295L;

        i5 = (int) $l4;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void annotationRecoveryCheckPoint(int,int)>(i1, i5);

        $z0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean annotationRecoveryActivated>;

        if $z0 == 0 goto label1;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $i7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr>;

        $r5 = virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.parser.RecoveredElement addAnnotationName(int,int,int,int)>($i7, $i6, i1, 0);

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement> = $r5;

     label1:
        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean recordStringLiterals> = 0;

        return;
    }

    protected void consumeAnnotationTypeDeclaration()
    {
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r3;
        int[] $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r2;
        boolean $z0, $z1;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r4;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration $r5;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] astLengthStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr> = $i1;

        $i2 = $r1[$i0];

        if $i2 == 0 goto label1;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void dispatchDeclarationInto(int)>($i2);

     label1:
        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $r3 = $r2[$i3];

        $r5 = (org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) $r3;

        virtualinvoke $r5.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: boolean checkConstructors(org.eclipse.jdt.internal.compiler.parser.Parser)>(r0);

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $z0 = $r4.<org.eclipse.jdt.internal.compiler.parser.Scanner: boolean containsAssertKeyword>;

        if $z0 == 0 goto label2;

        $i9 = $r5.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits>;

        $i10 = $i9 | 1;

        $r5.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits> = $i10;

     label2:
        virtualinvoke $r5.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: void addClinit()>();

        $i4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        $r5.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bodyEnd> = $i4;

        if $i2 != 0 goto label3;

        $i6 = $r5.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bodyStart>;

        $i5 = $r5.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bodyEnd>;

        $z1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean containsComment(int,int)>($i6, $i5);

        if $z1 != 0 goto label3;

        $i7 = $r5.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits>;

        $i8 = $i7 | 8;

        $r5.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits> = $i8;

     label3:
        $i11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        $i12 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int flushCommentsDefinedPriorTo(int)>($i11);

        $r5.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int declarationSourceEnd> = $i12;

        return;
    }

    protected void consumeAnnotationTypeDeclarationHeader()
    {
        org.eclipse.jdt.internal.compiler.parser.Scanner $r2;
        int $i1;
        org.eclipse.jdt.internal.compiler.parser.RecoveredElement $r1;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r1 == null goto label1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean restartRecovery> = 1;

     label1:
        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i1 = (int) -1;

        $r2.<org.eclipse.jdt.internal.compiler.parser.Scanner: int commentPtr> = $i1;

        return;
    }

    protected void consumeAnnotationTypeDeclarationHeaderName()
    {
        org.eclipse.jdt.internal.compiler.ast.Javadoc $r6;
        char[][] $r19;
        byte $b12;
        org.eclipse.jdt.internal.compiler.CompilationResult $r3;
        org.eclipse.jdt.internal.compiler.impl.CompilerOptions $r9;
        org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration $r2, $r14, $r15;
        long $l11, $l29, $l31;
        org.eclipse.jdt.internal.compiler.parser.Parser r1;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r10;
        char[] $r16, $r17, $r20;
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r11;
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r12;
        int[] $r4, $r5, $r21, $r22, $r23;
        boolean $z0, $z1;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration $r25;
        org.eclipse.jdt.internal.compiler.ast.Annotation[] $r13;
        long[] $r18;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i30, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, i50, $i51, $i52, $i53, $i54, $i56;
        org.eclipse.jdt.internal.compiler.parser.RecoveredElement $r7, $r8, $r24;

        r1 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r25 = new org.eclipse.jdt.internal.compiler.ast.TypeDeclaration;

        $r2 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit>;

        $r3 = $r2.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: org.eclipse.jdt.internal.compiler.CompilationResult compilationResult>;

        specialinvoke $r25.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: void <init>(org.eclipse.jdt.internal.compiler.CompilationResult)>($r3);

        $r4 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] nestedMethod>;

        $i0 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int nestedType>;

        $i1 = $r4[$i0];

        if $i1 != 0 goto label1;

        $i25 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int nestedType>;

        if $i25 == 0 goto label2;

        $i26 = $r25.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits>;

        $i27 = $i26 | 1024;

        $r25.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits> = $i27;

        goto label2;

     label1:
        $i2 = $r25.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits>;

        $i3 = $i2 | 256;

        $r25.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits> = $i3;

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.parser.Parser: void markEnclosingMemberWithLocalType()>();

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.parser.Parser: void blockReal()>();

     label2:
        $r18 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: long[] identifierPositionStack>;

        $i28 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $l29 = $r18[$i28];

        $i30 = (int) $l29;

        $r25.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int sourceEnd> = $i30;

        $l31 = $l29 >>> 32;

        $i32 = (int) $l31;

        $r25.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int sourceStart> = $i32;

        $r19 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: char[][] identifierStack>;

        $i33 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i34 = $i33 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr> = $i34;

        $r20 = $r19[$i33];

        $r25.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: char[] name> = $r20;

        $i35 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr>;

        $i36 = $i35 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr> = $i36;

        $i37 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i38 = $i37 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i38;

        $i39 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i40 = $i39 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i40;

        $r21 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i41 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i42 = $i41 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i42;

        $i43 = $r21[$i41];

        $r25.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int modifiersSourceStart> = $i43;

        $r22 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i44 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i45 = $i44 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i45;

        $i46 = $r22[$i44];

        $i47 = $i46 | 8192;

        $i48 = $i47 | 512;

        $r25.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int modifiers> = $i48;

        $i49 = $r25.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int modifiersSourceStart>;

        if $i49 < 0 goto label3;

        $i22 = $r25.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int modifiersSourceStart>;

        $r25.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int declarationSourceStart> = $i22;

        $i23 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i24 = $i23 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i24;

        goto label4;

     label3:
        $r5 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i4 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i5 = $i4 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i5;

        i50 = $r5[$i4];

        $r25.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int declarationSourceStart> = i50;

     label4:
        $i6 = $r25.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits>;

        $i7 = $i6 & 1024;

        if $i7 != 0 goto label5;

        $i18 = $r25.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits>;

        $i19 = $i18 & 256;

        if $i19 != 0 goto label5;

        $r14 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit>;

        if $r14 == null goto label5;

        $r16 = $r25.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: char[] name>;

        $r15 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit>;

        $r17 = virtualinvoke $r15.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: char[] getMainTypeName()>();

        $z1 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: boolean equals(char[],char[])>($r16, $r17);

        if $z1 != 0 goto label5;

        $i20 = $r25.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits>;

        $i21 = $i20 | 4096;

        $r25.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits> = $i21;

     label5:
        $r23 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] expressionLengthStack>;

        $i51 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        $i52 = $i51 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr> = $i52;

        $i53 = $r23[$i51];

        if $i53 == 0 goto label6;

        $r12 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i15 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i16 = $i15 - $i53;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr> = $i16;

        $i17 = $i16 + 1;

        $r13 = newarray (org.eclipse.jdt.internal.compiler.ast.Annotation)[$i53];

        $r25.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.Annotation[] annotations> = $r13;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r12, $i17, $r13, 0, $i53);

     label6:
        $i8 = $r25.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int sourceEnd>;

        $i9 = $i8 + 1;

        $r25.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bodyStart> = $i9;

        $r6 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc>;

        $r25.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc> = $r6;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc> = null;

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnAstStack(org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r25);

        $z0 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean statementRecoveryActivated>;

        if $z0 != 0 goto label7;

        $r9 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.CompilerOptions options>;

        $l11 = $r9.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long sourceLevel>;

        $b12 = $l11 cmp 3211264L;

        $i54 = (int) $b12;

        if $i54 >= 0 goto label7;

        $i14 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastErrorEndPositionBeforeRecovery>;

        $r10 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i13 = $r10.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        if $i14 >= $i13 goto label7;

        $r11 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        virtualinvoke $r11.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void invalidUsageOfAnnotationDeclarations(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)>($r25);

     label7:
        $r24 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r24 == null goto label8;

        $i10 = $r25.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bodyStart>;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastCheckPoint> = $i10;

        $r7 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $r8 = virtualinvoke $r7.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,int)>($r25, 0);

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement> = $r8;

        $i56 = (int) -1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastIgnoredToken> = $i56;

     label8:
        return;
    }

    protected void consumeAnnotationTypeDeclarationHeaderNameWithTypeParameters()
    {
        org.eclipse.jdt.internal.compiler.ast.Javadoc $r12;
        char[][] $r25;
        byte $b20;
        org.eclipse.jdt.internal.compiler.CompilationResult $r3;
        org.eclipse.jdt.internal.compiler.impl.CompilerOptions $r15;
        org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration $r2, $r20, $r21;
        long $l19, $l38, $l40;
        org.eclipse.jdt.internal.compiler.parser.Parser r1;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r6;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r16;
        char[] $r22, $r23, $r26;
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r7, $r17;
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r18;
        int[] $r4, $r10, $r11, $r27, $r28, $r29;
        boolean $z0, $z1;
        org.eclipse.jdt.internal.compiler.ast.TypeParameter $r9;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration $r31;
        org.eclipse.jdt.internal.compiler.ast.Annotation[] $r19;
        long[] $r24;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15, $i16, $i17, $i18, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, i36, $i37, $i39, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i64;
        org.eclipse.jdt.internal.compiler.ast.TypeParameter[] $r5, $r8;
        org.eclipse.jdt.internal.compiler.parser.RecoveredElement $r13, $r14, $r30;

        r1 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r31 = new org.eclipse.jdt.internal.compiler.ast.TypeDeclaration;

        $r2 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit>;

        $r3 = $r2.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: org.eclipse.jdt.internal.compiler.CompilationResult compilationResult>;

        specialinvoke $r31.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: void <init>(org.eclipse.jdt.internal.compiler.CompilationResult)>($r3);

        $r4 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] genericsLengthStack>;

        $i0 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsLengthPtr>;

        $i1 = $i0 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsLengthPtr> = $i1;

        i36 = $r4[$i0];

        $i2 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr>;

        $i3 = $i2 - i36;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr> = $i3;

        $r6 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] genericsStack>;

        $i4 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr>;

        $i5 = $i4 + 1;

        $r5 = newarray (org.eclipse.jdt.internal.compiler.ast.TypeParameter)[i36];

        $r31.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeParameter[] typeParameters> = $r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, $i5, $r5, 0, i36);

        $r7 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        virtualinvoke $r7.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void invalidUsageOfTypeParametersForAnnotationDeclaration(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)>($r31);

        $r8 = $r31.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeParameter[] typeParameters>;

        $i6 = i36 - 1;

        $r9 = $r8[$i6];

        $i7 = $r9.<org.eclipse.jdt.internal.compiler.ast.TypeParameter: int declarationSourceEnd>;

        $i8 = $i7 + 1;

        $r31.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bodyStart> = $i8;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int listTypeParameterLength> = 0;

        $r10 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] nestedMethod>;

        $i9 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int nestedType>;

        $i10 = $r10[$i9];

        if $i10 != 0 goto label1;

        $i33 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int nestedType>;

        if $i33 == 0 goto label2;

        $i34 = $r31.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits>;

        $i35 = $i34 | 1024;

        $r31.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits> = $i35;

        goto label2;

     label1:
        $i11 = $r31.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits>;

        $i12 = $i11 | 256;

        $r31.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits> = $i12;

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.parser.Parser: void markEnclosingMemberWithLocalType()>();

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.parser.Parser: void blockReal()>();

     label2:
        $r24 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: long[] identifierPositionStack>;

        $i37 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $l38 = $r24[$i37];

        $i39 = (int) $l38;

        $r31.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int sourceEnd> = $i39;

        $l40 = $l38 >>> 32;

        $i41 = (int) $l40;

        $r31.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int sourceStart> = $i41;

        $r25 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: char[][] identifierStack>;

        $i42 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i43 = $i42 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr> = $i43;

        $r26 = $r25[$i42];

        $r31.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: char[] name> = $r26;

        $i44 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr>;

        $i45 = $i44 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr> = $i45;

        $i46 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i47 = $i46 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i47;

        $i48 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i49 = $i48 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i49;

        $r27 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i50 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i51 = $i50 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i51;

        $i52 = $r27[$i50];

        $r31.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int modifiersSourceStart> = $i52;

        $r28 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i53 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i54 = $i53 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i54;

        $i55 = $r28[$i53];

        $i56 = $i55 | 8192;

        $i57 = $i56 | 512;

        $r31.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int modifiers> = $i57;

        $i58 = $r31.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int modifiersSourceStart>;

        if $i58 < 0 goto label3;

        $i30 = $r31.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int modifiersSourceStart>;

        $r31.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int declarationSourceStart> = $i30;

        $i31 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i32 = $i31 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i32;

        goto label4;

     label3:
        $r11 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i13 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i14 = $i13 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i14;

        i15 = $r11[$i13];

        $r31.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int declarationSourceStart> = i15;

     label4:
        $i16 = $r31.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits>;

        $i17 = $i16 & 1024;

        if $i17 != 0 goto label5;

        $i26 = $r31.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits>;

        $i27 = $i26 & 256;

        if $i27 != 0 goto label5;

        $r20 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit>;

        if $r20 == null goto label5;

        $r22 = $r31.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: char[] name>;

        $r21 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit>;

        $r23 = virtualinvoke $r21.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: char[] getMainTypeName()>();

        $z1 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: boolean equals(char[],char[])>($r22, $r23);

        if $z1 != 0 goto label5;

        $i28 = $r31.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits>;

        $i29 = $i28 | 4096;

        $r31.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits> = $i29;

     label5:
        $r29 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] expressionLengthStack>;

        $i59 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        $i60 = $i59 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr> = $i60;

        $i61 = $r29[$i59];

        if $i61 == 0 goto label6;

        $r18 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i23 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i24 = $i23 - $i61;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr> = $i24;

        $i25 = $i24 + 1;

        $r19 = newarray (org.eclipse.jdt.internal.compiler.ast.Annotation)[$i61];

        $r31.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.Annotation[] annotations> = $r19;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r18, $i25, $r19, 0, $i61);

     label6:
        $r12 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc>;

        $r31.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc> = $r12;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc> = null;

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnAstStack(org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r31);

        $z0 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean statementRecoveryActivated>;

        if $z0 != 0 goto label7;

        $r15 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.CompilerOptions options>;

        $l19 = $r15.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long sourceLevel>;

        $b20 = $l19 cmp 3211264L;

        $i62 = (int) $b20;

        if $i62 >= 0 goto label7;

        $i22 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastErrorEndPositionBeforeRecovery>;

        $r16 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i21 = $r16.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        if $i22 >= $i21 goto label7;

        $r17 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        virtualinvoke $r17.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void invalidUsageOfAnnotationDeclarations(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)>($r31);

     label7:
        $r30 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r30 == null goto label8;

        $i18 = $r31.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bodyStart>;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastCheckPoint> = $i18;

        $r13 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $r14 = virtualinvoke $r13.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,int)>($r31, 0);

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement> = $r14;

        $i64 = (int) -1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastIgnoredToken> = $i64;

     label8:
        return;
    }

    protected void consumeAnnotationTypeMemberDeclaration()
    {
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r2;
        org.eclipse.jdt.internal.compiler.ast.AnnotationMethodDeclaration r3;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $r2 = $r1[$i0];

        r3 = (org.eclipse.jdt.internal.compiler.ast.AnnotationMethodDeclaration) $r2;

        $i1 = r3.<org.eclipse.jdt.internal.compiler.ast.AnnotationMethodDeclaration: int modifiers>;

        $i2 = $i1 | 16777216;

        r3.<org.eclipse.jdt.internal.compiler.ast.AnnotationMethodDeclaration: int modifiers> = $i2;

        $i3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        $i4 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int flushCommentsDefinedPriorTo(int)>($i3);

        $i5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        r3.<org.eclipse.jdt.internal.compiler.ast.AnnotationMethodDeclaration: int bodyStart> = $i5;

        r3.<org.eclipse.jdt.internal.compiler.ast.AnnotationMethodDeclaration: int bodyEnd> = $i4;

        r3.<org.eclipse.jdt.internal.compiler.ast.AnnotationMethodDeclaration: int declarationSourceEnd> = $i4;

        return;
    }

    protected void consumeAnnotationTypeMemberDeclarations()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void concatNodeLists()>();

        return;
    }

    protected void consumeArgumentList()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void concatExpressionLists()>();

        return;
    }

    protected void consumeArguments()
    {
        int $i0;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int rParenPos>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnIntStack(int)>($i0);

        return;
    }

    protected void consumeArrayAccess(boolean)
    {
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r2, $r3, $r6, $r8, $r10;
        org.eclipse.jdt.internal.compiler.ast.Expression $r4, $r5, $r11;
        org.eclipse.jdt.internal.compiler.ast.NameReference $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        boolean z0;
        org.eclipse.jdt.internal.compiler.ast.ArrayReference $r1, $r7, r12;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r7 = new org.eclipse.jdt.internal.compiler.ast.ArrayReference;

        $r9 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.NameReference getUnspecifiedReferenceOptimized()>();

        $r10 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i10 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r11 = $r10[$i10];

        specialinvoke $r7.<org.eclipse.jdt.internal.compiler.ast.ArrayReference: void <init>(org.eclipse.jdt.internal.compiler.ast.Expression,org.eclipse.jdt.internal.compiler.ast.Expression)>($r9, $r11);

        $r8[$i9] = $r7;

        r12 = $r7;

        goto label2;

     label1:
        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr> = $i1;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        $i3 = $i2 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr> = $i3;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r1 = new org.eclipse.jdt.internal.compiler.ast.ArrayReference;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r5 = $r2[$i4];

        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i6 = $i5 + 1;

        $r4 = $r3[$i6];

        specialinvoke $r1.<org.eclipse.jdt.internal.compiler.ast.ArrayReference: void <init>(org.eclipse.jdt.internal.compiler.ast.Expression,org.eclipse.jdt.internal.compiler.ast.Expression)>($r5, $r4);

        $r6[$i7] = $r1;

        r12 = $r1;

     label2:
        $i8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        r12.<org.eclipse.jdt.internal.compiler.ast.Expression: int sourceEnd> = $i8;

        return;
    }

    protected void consumeArrayCreationExpressionWithInitializer()
    {
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r2, $r8, $r9;
        org.eclipse.jdt.internal.compiler.ast.Expression $r3;
        int[] $r7, $r10;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        org.eclipse.jdt.internal.compiler.parser.Parser r1;
        org.eclipse.jdt.internal.compiler.ast.ArrayInitializer $r4, $r11, $r12;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r5, $r6;
        org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression $r0;

        r1 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r0 = new org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression;

        specialinvoke $r0.<org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression: void <init>()>();

        $i0 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        $i1 = $i0 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr> = $i1;

        $r2 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i2 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i3 = $i2 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr> = $i3;

        $r3 = $r2[$i2];

        $r4 = (org.eclipse.jdt.internal.compiler.ast.ArrayInitializer) $r3;

        $r0.<org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression: org.eclipse.jdt.internal.compiler.ast.ArrayInitializer initializer> = $r4;

        $r5 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeReference getTypeReference(int)>(0);

        $r0.<org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression: org.eclipse.jdt.internal.compiler.ast.TypeReference type> = $r5;

        $r6 = $r0.<org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression: org.eclipse.jdt.internal.compiler.ast.TypeReference type>;

        $i4 = $r6.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int bits>;

        $i5 = $i4 | 1073741824;

        $r6.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int bits> = $i5;

        $r7 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] expressionLengthStack>;

        $i6 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        $i7 = $i6 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr> = $i7;

        i8 = $r7[$i6];

        $i9 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i10 = $i9 - i8;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr> = $i10;

        $r9 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i11 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i12 = $i11 + 1;

        $r8 = newarray (org.eclipse.jdt.internal.compiler.ast.Expression)[i8];

        $r0.<org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression: org.eclipse.jdt.internal.compiler.ast.Expression[] dimensions> = $r8;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, $i12, $r8, 0, i8);

        $r10 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i13 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i14 = $i13 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i14;

        $i15 = $r10[$i13];

        $r0.<org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression: int sourceStart> = $i15;

        $r11 = $r0.<org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression: org.eclipse.jdt.internal.compiler.ast.ArrayInitializer initializer>;

        if $r11 != null goto label1;

        $i17 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        $r0.<org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression: int sourceEnd> = $i17;

        goto label2;

     label1:
        $r12 = $r0.<org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression: org.eclipse.jdt.internal.compiler.ast.ArrayInitializer initializer>;

        $i16 = $r12.<org.eclipse.jdt.internal.compiler.ast.ArrayInitializer: int sourceEnd>;

        $r0.<org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression: int sourceEnd> = $i16;

     label2:
        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnExpressionStack(org.eclipse.jdt.internal.compiler.ast.Expression)>($r0);

        return;
    }

    protected void consumeArrayCreationExpressionWithoutInitializer()
    {
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r5, $r6;
        int[] $r4, $r7;
        int $i0, $i1, $i2, $i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        org.eclipse.jdt.internal.compiler.parser.Parser r1;
        org.eclipse.jdt.internal.compiler.ast.ArrayInitializer $r8, $r9;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r2, $r3;
        org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression $r0;

        r1 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r0 = new org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression;

        specialinvoke $r0.<org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression: void <init>()>();

        $r2 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeReference getTypeReference(int)>(0);

        $r0.<org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression: org.eclipse.jdt.internal.compiler.ast.TypeReference type> = $r2;

        $r3 = $r0.<org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression: org.eclipse.jdt.internal.compiler.ast.TypeReference type>;

        $i0 = $r3.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int bits>;

        $i1 = $i0 | 1073741824;

        $r3.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int bits> = $i1;

        $r4 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] expressionLengthStack>;

        $i2 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        $i3 = $i2 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr> = $i3;

        i4 = $r4[$i2];

        $i5 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i6 = $i5 - i4;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr> = $i6;

        $r6 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i7 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i8 = $i7 + 1;

        $r5 = newarray (org.eclipse.jdt.internal.compiler.ast.Expression)[i4];

        $r0.<org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression: org.eclipse.jdt.internal.compiler.ast.Expression[] dimensions> = $r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, $i8, $r5, 0, i4);

        $r7 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i9 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i10 = $i9 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i10;

        $i11 = $r7[$i9];

        $r0.<org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression: int sourceStart> = $i11;

        $r8 = $r0.<org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression: org.eclipse.jdt.internal.compiler.ast.ArrayInitializer initializer>;

        if $r8 != null goto label1;

        $i13 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        $r0.<org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression: int sourceEnd> = $i13;

        goto label2;

     label1:
        $r9 = $r0.<org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression: org.eclipse.jdt.internal.compiler.ast.ArrayInitializer initializer>;

        $i12 = $r9.<org.eclipse.jdt.internal.compiler.ast.ArrayInitializer: int sourceEnd>;

        $r0.<org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression: int sourceEnd> = $i12;

     label2:
        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnExpressionStack(org.eclipse.jdt.internal.compiler.ast.Expression)>($r0);

        return;
    }

    protected void consumeArrayCreationHeader()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        return;
    }

    protected void consumeArrayInitializer()
    {
        int[] $r1;
        int $i0, $i1, $i2;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] expressionLengthStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr> = $i1;

        $i2 = $r1[$i0];

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void arrayInitializer(int)>($i2);

        return;
    }

    protected void consumeArrayTypeWithTypeArgumentsName()
    {
        int[] $r1, $r2;
        int $i0, $i1, $i2, $i3, $i4;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] genericsIdentifiersLengthStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsIdentifiersLengthPtr>;

        $i3 = $r1[$i0];

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] identifierLengthStack>;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr>;

        $i2 = $r2[$i1];

        $i4 = $i3 + $i2;

        $r1[$i0] = $i4;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnGenericsLengthStack(int)>(0);

        return;
    }

    protected void consumeAssertStatement()
    {
        org.eclipse.jdt.internal.compiler.ast.AssertStatement $r1;
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r2, $r4;
        org.eclipse.jdt.internal.compiler.ast.Expression $r3, $r5;
        int[] $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        $i1 = $i0 - 2;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr> = $i1;

        $r1 = new org.eclipse.jdt.internal.compiler.ast.AssertStatement;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i3 = $i2 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr> = $i3;

        $r3 = $r2[$i2];

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i5 = $i4 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr> = $i5;

        $r5 = $r4[$i4];

        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i7 = $i6 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i7;

        $i8 = $r6[$i6];

        specialinvoke $r1.<org.eclipse.jdt.internal.compiler.ast.AssertStatement: void <init>(org.eclipse.jdt.internal.compiler.ast.Expression,org.eclipse.jdt.internal.compiler.ast.Expression,int)>($r3, $r5, $i8);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnAstStack(org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r1);

        return;
    }

    protected void consumeAssignment()
    {
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r2, $r3, $r7, $r15, $r16, $r17;
        org.eclipse.jdt.internal.compiler.ast.CompoundAssignment $r22;
        org.eclipse.jdt.internal.compiler.ast.Expression $r5, $r6, $r19, $r20;
        int[] $r1;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration $r8, $r9, $r12, $r13;
        org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression $r10, $r14;
        org.eclipse.jdt.internal.compiler.ast.Assignment $r21, $r23;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r4, $r11, $r18;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i1;

        i2 = $r1[$i0];

        $i3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i4 = $i3 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr> = $i4;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        $i6 = $i5 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr> = $i6;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i12 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        if i2 == 30 goto label1;

        $r22 = new org.eclipse.jdt.internal.compiler.ast.CompoundAssignment;

        $r21 = $r22;

        $r16 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i17 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r20 = $r16[$i17];

        $r17 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i18 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i19 = $i18 + 1;

        $r19 = $r17[$i19];

        $r18 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i20 = $r18.<org.eclipse.jdt.internal.compiler.parser.Scanner: int startPosition>;

        $i21 = $i20 - 1;

        specialinvoke $r22.<org.eclipse.jdt.internal.compiler.ast.CompoundAssignment: void <init>(org.eclipse.jdt.internal.compiler.ast.Expression,org.eclipse.jdt.internal.compiler.ast.Expression,int,int)>($r20, $r19, i2, $i21);

        goto label2;

     label1:
        $r23 = new org.eclipse.jdt.internal.compiler.ast.Assignment;

        $r21 = $r23;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r6 = $r2[$i7];

        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i9 = $i8 + 1;

        $r5 = $r3[$i9];

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i10 = $r4.<org.eclipse.jdt.internal.compiler.parser.Scanner: int startPosition>;

        $i11 = $i10 - 1;

        specialinvoke $r23.<org.eclipse.jdt.internal.compiler.ast.Assignment: void <init>(org.eclipse.jdt.internal.compiler.ast.Expression,org.eclipse.jdt.internal.compiler.ast.Expression,int)>($r6, $r5, $i11);

     label2:
        $r7[$i12] = $r21;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration pendingRecoveredType>;

        if $r8 == null goto label4;

        $r9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration pendingRecoveredType>;

        $r10 = $r9.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression allocation>;

        if $r10 == null goto label3;

        $r11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i13 = $r11.<org.eclipse.jdt.internal.compiler.parser.Scanner: int startPosition>;

        $i15 = $i13 - 1;

        $r12 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration pendingRecoveredType>;

        $i14 = $r12.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int declarationSourceEnd>;

        if $i15 > $i14 goto label3;

        $r15 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i16 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r13 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration pendingRecoveredType>;

        $r14 = $r13.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression allocation>;

        $r15[$i16] = $r14;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration pendingRecoveredType> = null;

        return;

     label3:
        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration pendingRecoveredType> = null;

     label4:
        return;
    }

    protected void consumeAssignmentOperator(int)
    {
        int i0;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        i0 := @parameter0: int;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnIntStack(int)>(i0);

        return;
    }

    protected void consumeBinaryExpression(int)
    {
        org.eclipse.jdt.internal.compiler.ast.CharLiteral $r35;
        org.eclipse.jdt.internal.compiler.ast.BinaryExpression $r5, $r12, $r13, $r19, $r26, $r27, $r29, $r39, $r45;
        org.eclipse.jdt.internal.compiler.ast.StringLiteral $r15, $r16, $r31, $r32, $r36;
        org.eclipse.jdt.internal.compiler.ast.ExtendedStringLiteral $r34, $r38;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.OR_OR_Expression $r41;
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r1, $r3, $r6, $r8, $r11, $r14, $r17, $r20, $r22, $r25, $r28, $r30, $r33, $r37, $r40, $r42, $r44, $r46;
        org.eclipse.jdt.internal.compiler.ast.Expression r2, r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression $r7, $r9, $r10, $r21, $r23, $r24;
        org.eclipse.jdt.internal.compiler.ast.StringLiteralConcatenation $r18;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51;
        org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression $r43;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        i7 := @parameter0: int;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr> = $i1;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        $i3 = $i2 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr> = $i3;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        r2 = $r1[$i4];

        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i6 = $i5 + 1;

        r4 = $r3[$i6];

        lookupswitch(i7)
        {
            case 0: goto label02;
            case 1: goto label01;
            case 4: goto label19;
            case 14: goto label03;
            default: goto label20;
        };

     label01:
        $r42 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i49 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r41 = new org.eclipse.jdt.internal.compiler.ast.OR_OR_Expression;

        specialinvoke $r41.<org.eclipse.jdt.internal.compiler.ast.OR_OR_Expression: void <init>(org.eclipse.jdt.internal.compiler.ast.Expression,org.eclipse.jdt.internal.compiler.ast.Expression,int)>(r2, r4, i7);

        $r42[$i49] = $r41;

        goto label21;

     label02:
        $r44 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i50 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r43 = new org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression;

        specialinvoke $r43.<org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression: void <init>(org.eclipse.jdt.internal.compiler.ast.Expression,org.eclipse.jdt.internal.compiler.ast.Expression,int)>(r2, r4, i7);

        $r44[$i50] = $r43;

        goto label21;

     label03:
        $z0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean optimizeStringLiterals>;

        if $z0 == 0 goto label12;

        $z5 = r2 instanceof org.eclipse.jdt.internal.compiler.ast.StringLiteral;

        if $z5 == 0 goto label07;

        $i39 = r2.<org.eclipse.jdt.internal.compiler.ast.Expression: int bits>;

        $i40 = $i39 & 534773760;

        $i41 = $i40 >> 21;

        if $i41 != 0 goto label06;

        $z8 = r4 instanceof org.eclipse.jdt.internal.compiler.ast.CharLiteral;

        if $z8 == 0 goto label04;

        $r37 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i45 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r36 = (org.eclipse.jdt.internal.compiler.ast.StringLiteral) r2;

        $r35 = (org.eclipse.jdt.internal.compiler.ast.CharLiteral) r4;

        $r38 = virtualinvoke $r36.<org.eclipse.jdt.internal.compiler.ast.StringLiteral: org.eclipse.jdt.internal.compiler.ast.ExtendedStringLiteral extendWith(org.eclipse.jdt.internal.compiler.ast.CharLiteral)>($r35);

        $r37[$i45] = $r38;

        goto label21;

     label04:
        $z9 = r4 instanceof org.eclipse.jdt.internal.compiler.ast.StringLiteral;

        if $z9 == 0 goto label05;

        $r33 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i44 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r32 = (org.eclipse.jdt.internal.compiler.ast.StringLiteral) r2;

        $r31 = (org.eclipse.jdt.internal.compiler.ast.StringLiteral) r4;

        $r34 = virtualinvoke $r32.<org.eclipse.jdt.internal.compiler.ast.StringLiteral: org.eclipse.jdt.internal.compiler.ast.ExtendedStringLiteral extendWith(org.eclipse.jdt.internal.compiler.ast.StringLiteral)>($r31);

        $r33[$i44] = $r34;

        goto label21;

     label05:
        $r30 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i43 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r29 = new org.eclipse.jdt.internal.compiler.ast.BinaryExpression;

        specialinvoke $r29.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: void <init>(org.eclipse.jdt.internal.compiler.ast.Expression,org.eclipse.jdt.internal.compiler.ast.Expression,int)>(r2, r4, 14);

        $r30[$i43] = $r29;

        goto label21;

     label06:
        $r28 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i42 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r27 = new org.eclipse.jdt.internal.compiler.ast.BinaryExpression;

        specialinvoke $r27.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: void <init>(org.eclipse.jdt.internal.compiler.ast.Expression,org.eclipse.jdt.internal.compiler.ast.Expression,int)>(r2, r4, 14);

        $r28[$i42] = $r27;

        goto label21;

     label07:
        $z6 = r2 instanceof org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression;

        if $z6 == 0 goto label10;

        $r23 = (org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression) r2;

        $i34 = $r23.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: int arity>;

        $i33 = $r23.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: int arityMax>;

        if $i34 >= $i33 goto label08;

        $r26 = new org.eclipse.jdt.internal.compiler.ast.BinaryExpression;

        specialinvoke $r26.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: void <init>(org.eclipse.jdt.internal.compiler.ast.BinaryExpression)>($r23);

        $r23.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left> = $r26;

        $i37 = $r23.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: int arity>;

        $i38 = $i37 + 1;

        $r23.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: int arity> = $i38;

        goto label09;

     label08:
        $r24 = new org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression;

        specialinvoke $r24.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: void <init>(org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression)>($r23);

        $r23.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left> = $r24;

        $r23.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: int arity> = 0;

        virtualinvoke $r23.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: void tuneArityMax()>();

     label09:
        $r23.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right> = r4;

        $i35 = r4.<org.eclipse.jdt.internal.compiler.ast.Expression: int sourceEnd>;

        $r23.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: int sourceEnd> = $i35;

        $r25 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i36 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r25[$i36] = $r23;

        goto label21;

     label10:
        $z7 = r2 instanceof org.eclipse.jdt.internal.compiler.ast.BinaryExpression;

        if $z7 == 0 goto label11;

        $i29 = r2.<org.eclipse.jdt.internal.compiler.ast.Expression: int bits>;

        $i30 = $i29 & 4032;

        $i31 = $i30 >> 6;

        if $i31 != 14 goto label11;

        $r22 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i32 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r21 = new org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression;

        specialinvoke $r21.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: void <init>(org.eclipse.jdt.internal.compiler.ast.Expression,org.eclipse.jdt.internal.compiler.ast.Expression,int,int)>(r2, r4, 14, 1);

        $r22[$i32] = $r21;

        goto label21;

     label11:
        $r20 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i28 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r19 = new org.eclipse.jdt.internal.compiler.ast.BinaryExpression;

        specialinvoke $r19.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: void <init>(org.eclipse.jdt.internal.compiler.ast.Expression,org.eclipse.jdt.internal.compiler.ast.Expression,int)>(r2, r4, 14);

        $r20[$i28] = $r19;

        goto label21;

     label12:
        $z1 = r2 instanceof org.eclipse.jdt.internal.compiler.ast.StringLiteral;

        if $z1 == 0 goto label14;

        $z4 = r4 instanceof org.eclipse.jdt.internal.compiler.ast.StringLiteral;

        if $z4 == 0 goto label13;

        $i24 = r2.<org.eclipse.jdt.internal.compiler.ast.Expression: int bits>;

        $i25 = $i24 & 534773760;

        $i26 = $i25 >> 21;

        if $i26 != 0 goto label13;

        $r17 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i27 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r16 = (org.eclipse.jdt.internal.compiler.ast.StringLiteral) r2;

        $r15 = (org.eclipse.jdt.internal.compiler.ast.StringLiteral) r4;

        $r18 = virtualinvoke $r16.<org.eclipse.jdt.internal.compiler.ast.StringLiteral: org.eclipse.jdt.internal.compiler.ast.StringLiteralConcatenation extendsWith(org.eclipse.jdt.internal.compiler.ast.StringLiteral)>($r15);

        $r17[$i27] = $r18;

        goto label21;

     label13:
        $r14 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i23 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r13 = new org.eclipse.jdt.internal.compiler.ast.BinaryExpression;

        specialinvoke $r13.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: void <init>(org.eclipse.jdt.internal.compiler.ast.Expression,org.eclipse.jdt.internal.compiler.ast.Expression,int)>(r2, r4, 14);

        $r14[$i23] = $r13;

        goto label21;

     label14:
        $z2 = r2 instanceof org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression;

        if $z2 == 0 goto label17;

        $r9 = (org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression) r2;

        $i14 = $r9.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: int arity>;

        $i13 = $r9.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: int arityMax>;

        if $i14 >= $i13 goto label15;

        $r12 = new org.eclipse.jdt.internal.compiler.ast.BinaryExpression;

        specialinvoke $r12.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: void <init>(org.eclipse.jdt.internal.compiler.ast.BinaryExpression)>($r9);

        $r9.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left> = $r12;

        $i19 = $r9.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: int bits>;

        $i20 = $i19 & -534773761;

        $r9.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: int bits> = $i20;

        $i21 = $r9.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: int arity>;

        $i22 = $i21 + 1;

        $r9.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: int arity> = $i22;

        goto label16;

     label15:
        $r10 = new org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression;

        specialinvoke $r10.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: void <init>(org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression)>($r9);

        $r9.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left> = $r10;

        $i15 = $r9.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: int bits>;

        $i16 = $i15 & -534773761;

        $r9.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: int bits> = $i16;

        $r9.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: int arity> = 0;

        virtualinvoke $r9.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: void tuneArityMax()>();

     label16:
        $r9.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right> = r4;

        $i17 = r4.<org.eclipse.jdt.internal.compiler.ast.Expression: int sourceEnd>;

        $r9.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: int sourceEnd> = $i17;

        $r11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i18 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r11[$i18] = $r9;

        goto label21;

     label17:
        $z3 = r2 instanceof org.eclipse.jdt.internal.compiler.ast.BinaryExpression;

        if $z3 == 0 goto label18;

        $i9 = r2.<org.eclipse.jdt.internal.compiler.ast.Expression: int bits>;

        $i10 = $i9 & 4032;

        $i11 = $i10 >> 6;

        if $i11 != 14 goto label18;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i12 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r7 = new org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression;

        specialinvoke $r7.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: void <init>(org.eclipse.jdt.internal.compiler.ast.Expression,org.eclipse.jdt.internal.compiler.ast.Expression,int,int)>(r2, r4, 14, 1);

        $r8[$i12] = $r7;

        goto label21;

     label18:
        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r5 = new org.eclipse.jdt.internal.compiler.ast.BinaryExpression;

        specialinvoke $r5.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: void <init>(org.eclipse.jdt.internal.compiler.ast.Expression,org.eclipse.jdt.internal.compiler.ast.Expression,int)>(r2, r4, 14);

        $r6[$i8] = $r5;

        goto label21;

     label19:
        $i46 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i47 = $i46 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i47;

        $r40 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i48 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r39 = new org.eclipse.jdt.internal.compiler.ast.BinaryExpression;

        specialinvoke $r39.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: void <init>(org.eclipse.jdt.internal.compiler.ast.Expression,org.eclipse.jdt.internal.compiler.ast.Expression,int)>(r2, r4, i7);

        $r40[$i48] = $r39;

        goto label21;

     label20:
        $r46 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i51 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r45 = new org.eclipse.jdt.internal.compiler.ast.BinaryExpression;

        specialinvoke $r45.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: void <init>(org.eclipse.jdt.internal.compiler.ast.Expression,org.eclipse.jdt.internal.compiler.ast.Expression,int)>(r2, r4, i7);

        $r46[$i51] = $r45;

     label21:
        return;
    }

    protected void consumeBinaryExpressionWithName(int)
    {
        org.eclipse.jdt.internal.compiler.ast.NameReference $r1;
        org.eclipse.jdt.internal.compiler.ast.CharLiteral $r22;
        org.eclipse.jdt.internal.compiler.ast.BinaryExpression $r6, $r8, $r14, $r16, $r26, $r32;
        org.eclipse.jdt.internal.compiler.ast.StringLiteral $r10, $r11, $r18, $r19, $r23;
        org.eclipse.jdt.internal.compiler.ast.ExtendedStringLiteral $r21, $r25;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.OR_OR_Expression $r28;
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r2, $r4, $r7, $r9, $r12, $r15, $r17, $r20, $r24, $r27, $r29, $r31, $r33;
        org.eclipse.jdt.internal.compiler.ast.Expression r3, r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.eclipse.jdt.internal.compiler.ast.StringLiteralConcatenation $r13;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26;
        org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression $r30;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        i7 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.NameReference getUnspecifiedReferenceOptimized()>();

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnExpressionStack(org.eclipse.jdt.internal.compiler.ast.Expression)>($r1);

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr> = $i1;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        $i3 = $i2 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr> = $i3;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i5 = $i4 + 1;

        r3 = $r2[$i5];

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        r5 = $r4[$i6];

        lookupswitch(i7)
        {
            case 0: goto label02;
            case 1: goto label01;
            case 4: goto label10;
            case 14: goto label03;
            default: goto label11;
        };

     label01:
        $r29 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i24 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r28 = new org.eclipse.jdt.internal.compiler.ast.OR_OR_Expression;

        specialinvoke $r28.<org.eclipse.jdt.internal.compiler.ast.OR_OR_Expression: void <init>(org.eclipse.jdt.internal.compiler.ast.Expression,org.eclipse.jdt.internal.compiler.ast.Expression,int)>(r3, r5, i7);

        $r29[$i24] = $r28;

        goto label12;

     label02:
        $r31 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i25 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r30 = new org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression;

        specialinvoke $r30.<org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression: void <init>(org.eclipse.jdt.internal.compiler.ast.Expression,org.eclipse.jdt.internal.compiler.ast.Expression,int)>(r3, r5, i7);

        $r31[$i25] = $r30;

        goto label12;

     label03:
        $z0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean optimizeStringLiterals>;

        if $z0 == 0 goto label07;

        $z3 = r3 instanceof org.eclipse.jdt.internal.compiler.ast.StringLiteral;

        if $z3 == 0 goto label06;

        $i15 = r3.<org.eclipse.jdt.internal.compiler.ast.Expression: int bits>;

        $i16 = $i15 & 534773760;

        $i17 = $i16 >> 21;

        if $i17 != 0 goto label06;

        $z4 = r5 instanceof org.eclipse.jdt.internal.compiler.ast.CharLiteral;

        if $z4 == 0 goto label04;

        $r24 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i20 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r23 = (org.eclipse.jdt.internal.compiler.ast.StringLiteral) r3;

        $r22 = (org.eclipse.jdt.internal.compiler.ast.CharLiteral) r5;

        $r25 = virtualinvoke $r23.<org.eclipse.jdt.internal.compiler.ast.StringLiteral: org.eclipse.jdt.internal.compiler.ast.ExtendedStringLiteral extendWith(org.eclipse.jdt.internal.compiler.ast.CharLiteral)>($r22);

        $r24[$i20] = $r25;

        goto label12;

     label04:
        $z5 = r5 instanceof org.eclipse.jdt.internal.compiler.ast.StringLiteral;

        if $z5 == 0 goto label05;

        $r20 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i19 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r19 = (org.eclipse.jdt.internal.compiler.ast.StringLiteral) r3;

        $r18 = (org.eclipse.jdt.internal.compiler.ast.StringLiteral) r5;

        $r21 = virtualinvoke $r19.<org.eclipse.jdt.internal.compiler.ast.StringLiteral: org.eclipse.jdt.internal.compiler.ast.ExtendedStringLiteral extendWith(org.eclipse.jdt.internal.compiler.ast.StringLiteral)>($r18);

        $r20[$i19] = $r21;

        goto label12;

     label05:
        $r17 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i18 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r16 = new org.eclipse.jdt.internal.compiler.ast.BinaryExpression;

        specialinvoke $r16.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: void <init>(org.eclipse.jdt.internal.compiler.ast.Expression,org.eclipse.jdt.internal.compiler.ast.Expression,int)>(r3, r5, 14);

        $r17[$i18] = $r16;

        goto label12;

     label06:
        $r15 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i14 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r14 = new org.eclipse.jdt.internal.compiler.ast.BinaryExpression;

        specialinvoke $r14.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: void <init>(org.eclipse.jdt.internal.compiler.ast.Expression,org.eclipse.jdt.internal.compiler.ast.Expression,int)>(r3, r5, 14);

        $r15[$i14] = $r14;

        goto label12;

     label07:
        $z1 = r3 instanceof org.eclipse.jdt.internal.compiler.ast.StringLiteral;

        if $z1 == 0 goto label09;

        $z2 = r5 instanceof org.eclipse.jdt.internal.compiler.ast.StringLiteral;

        if $z2 == 0 goto label08;

        $i10 = r3.<org.eclipse.jdt.internal.compiler.ast.Expression: int bits>;

        $i11 = $i10 & 534773760;

        $i12 = $i11 >> 21;

        if $i12 != 0 goto label08;

        $r12 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i13 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r11 = (org.eclipse.jdt.internal.compiler.ast.StringLiteral) r3;

        $r10 = (org.eclipse.jdt.internal.compiler.ast.StringLiteral) r5;

        $r13 = virtualinvoke $r11.<org.eclipse.jdt.internal.compiler.ast.StringLiteral: org.eclipse.jdt.internal.compiler.ast.StringLiteralConcatenation extendsWith(org.eclipse.jdt.internal.compiler.ast.StringLiteral)>($r10);

        $r12[$i13] = $r13;

        goto label12;

     label08:
        $r9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r8 = new org.eclipse.jdt.internal.compiler.ast.BinaryExpression;

        specialinvoke $r8.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: void <init>(org.eclipse.jdt.internal.compiler.ast.Expression,org.eclipse.jdt.internal.compiler.ast.Expression,int)>(r3, r5, i7);

        $r9[$i9] = $r8;

        goto label12;

     label09:
        $r7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r6 = new org.eclipse.jdt.internal.compiler.ast.BinaryExpression;

        specialinvoke $r6.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: void <init>(org.eclipse.jdt.internal.compiler.ast.Expression,org.eclipse.jdt.internal.compiler.ast.Expression,int)>(r3, r5, i7);

        $r7[$i8] = $r6;

        goto label12;

     label10:
        $i21 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i22 = $i21 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i22;

        $r27 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i23 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r26 = new org.eclipse.jdt.internal.compiler.ast.BinaryExpression;

        specialinvoke $r26.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: void <init>(org.eclipse.jdt.internal.compiler.ast.Expression,org.eclipse.jdt.internal.compiler.ast.Expression,int)>(r3, r5, i7);

        $r27[$i23] = $r26;

        goto label12;

     label11:
        $r33 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i26 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r32 = new org.eclipse.jdt.internal.compiler.ast.BinaryExpression;

        specialinvoke $r32.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: void <init>(org.eclipse.jdt.internal.compiler.ast.Expression,org.eclipse.jdt.internal.compiler.ast.Expression,int)>(r3, r5, i7);

        $r33[$i26] = $r32;

     label12:
        return;
    }

    protected void consumeBlock()
    {
        org.eclipse.jdt.internal.compiler.ast.Statement[] $r4;
        org.eclipse.jdt.internal.compiler.ast.Block $r2, $r7, r9;
        int[] $r1, $r3, $r6, $r8;
        boolean $z0;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r5;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] astLengthStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr> = $i1;

        i2 = $r1[$i0];

        if i2 != 0 goto label2;

        $r7 = new org.eclipse.jdt.internal.compiler.ast.Block;

        specialinvoke $r7.<org.eclipse.jdt.internal.compiler.ast.Block: void <init>(int)>(0);

        r9 = $r7;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i14 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i15 = $i14 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i15;

        $i16 = $r8[$i14];

        $r7.<org.eclipse.jdt.internal.compiler.ast.Block: int sourceStart> = $i16;

        $i17 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        $r7.<org.eclipse.jdt.internal.compiler.ast.Block: int sourceEnd> = $i17;

        $i19 = $r7.<org.eclipse.jdt.internal.compiler.ast.Block: int sourceStart>;

        $i18 = $r7.<org.eclipse.jdt.internal.compiler.ast.Block: int sourceEnd>;

        $z0 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean containsComment(int,int)>($i19, $i18);

        if $z0 != 0 goto label1;

        $i22 = $r7.<org.eclipse.jdt.internal.compiler.ast.Block: int bits>;

        $i23 = $i22 | 8;

        $r7.<org.eclipse.jdt.internal.compiler.ast.Block: int bits> = $i23;

     label1:
        $i20 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int realBlockPtr>;

        $i21 = $i20 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int realBlockPtr> = $i21;

        goto label3;

     label2:
        $r2 = new org.eclipse.jdt.internal.compiler.ast.Block;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] realBlockStack>;

        $i3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int realBlockPtr>;

        $i4 = $i3 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int realBlockPtr> = $i4;

        $i5 = $r3[$i3];

        specialinvoke $r2.<org.eclipse.jdt.internal.compiler.ast.Block: void <init>(int)>($i5);

        r9 = $r2;

        $i6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i7 = $i6 - i2;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr> = $i7;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i9 = $i8 + 1;

        $r4 = newarray (org.eclipse.jdt.internal.compiler.ast.Statement)[i2];

        $r2.<org.eclipse.jdt.internal.compiler.ast.Block: org.eclipse.jdt.internal.compiler.ast.Statement[] statements> = $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, $i9, $r4, 0, i2);

        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i10 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i11 = $i10 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i11;

        $i12 = $r6[$i10];

        $r2.<org.eclipse.jdt.internal.compiler.ast.Block: int sourceStart> = $i12;

        $i13 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        $r2.<org.eclipse.jdt.internal.compiler.ast.Block: int sourceEnd> = $i13;

     label3:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnAstStack(org.eclipse.jdt.internal.compiler.ast.ASTNode)>(r9);

        return;
    }

    protected void consumeBlockStatements()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void concatNodeLists()>();

        return;
    }

    protected void consumeCaseLabel()
    {
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r1;
        org.eclipse.jdt.internal.compiler.ast.CaseStatement $r3;
        org.eclipse.jdt.internal.compiler.ast.Expression r2;
        int[] $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr> = $i1;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i3 = $i2 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr> = $i3;

        r2 = $r1[$i2];

        $r3 = new org.eclipse.jdt.internal.compiler.ast.CaseStatement;

        $i6 = r2.<org.eclipse.jdt.internal.compiler.ast.Expression: int sourceEnd>;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i5 = $i4 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i5;

        $i7 = $r4[$i4];

        specialinvoke $r3.<org.eclipse.jdt.internal.compiler.ast.CaseStatement: void <init>(org.eclipse.jdt.internal.compiler.ast.Expression,int,int)>(r2, $i6, $i7);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnAstStack(org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r3);

        return;
    }

    protected void consumeCastExpressionLL1()
    {
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r2, $r4, $r6;
        org.eclipse.jdt.internal.compiler.ast.Expression $r3, $r5, $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.CastExpression $r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr> = $i1;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r1 = new org.eclipse.jdt.internal.compiler.ast.CastExpression;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i3 = $i2 + 1;

        $r3 = $r2[$i3];

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r5 = $r4[$i4];

        $r7 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression getTypeReference(org.eclipse.jdt.internal.compiler.ast.Expression)>($r5);

        specialinvoke $r1.<org.eclipse.jdt.internal.compiler.ast.CastExpression: void <init>(org.eclipse.jdt.internal.compiler.ast.Expression,org.eclipse.jdt.internal.compiler.ast.Expression)>($r3, $r7);

        $r6[$i5] = $r1;

        $i6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        $i7 = $i6 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr> = $i7;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void updateSourcePosition(org.eclipse.jdt.internal.compiler.ast.Expression)>($r1);

        $i8 = $r3.<org.eclipse.jdt.internal.compiler.ast.Expression: int sourceEnd>;

        $r1.<org.eclipse.jdt.internal.compiler.ast.Expression: int sourceEnd> = $i8;

        return;
    }

    protected void consumeCastExpressionWithGenericsArray()
    {
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r5, $r7;
        org.eclipse.jdt.internal.compiler.ast.Expression $r6;
        int[] $r1, $r2, $r3, $r9;
        int $i0, $i1, i2, $i3, $i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r8;
        org.eclipse.jdt.internal.compiler.ast.CastExpression $r4;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i1;

        i2 = $r1[$i0];

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i4 = $i3 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i4;

        i5 = $r2[$i3];

        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] identifierLengthStack>;

        $i6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr>;

        $i7 = $r3[$i6];

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnGenericsIdentifiersLengthStack(int)>($i7);

        $r7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r4 = new org.eclipse.jdt.internal.compiler.ast.CastExpression;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r6 = $r5[$i8];

        $r8 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeReference getTypeReference(int)>(i5);

        specialinvoke $r4.<org.eclipse.jdt.internal.compiler.ast.CastExpression: void <init>(org.eclipse.jdt.internal.compiler.ast.Expression,org.eclipse.jdt.internal.compiler.ast.Expression)>($r6, $r8);

        $r7[$i9] = $r4;

        $i10 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i11 = $i10 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i11;

        $i12 = i2 - 1;

        $r8.<org.eclipse.jdt.internal.compiler.ast.Expression: int sourceEnd> = $i12;

        $r9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i13 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i14 = $i13 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i14;

        $i15 = $r9[$i13];

        $r4.<org.eclipse.jdt.internal.compiler.ast.Expression: int sourceStart> = $i15;

        $i16 = $i15 + 1;

        $r8.<org.eclipse.jdt.internal.compiler.ast.Expression: int sourceStart> = $i16;

        $i17 = $r6.<org.eclipse.jdt.internal.compiler.ast.Expression: int sourceEnd>;

        $r4.<org.eclipse.jdt.internal.compiler.ast.Expression: int sourceEnd> = $i17;

        return;
    }

    protected void consumeCastExpressionWithNameArray()
    {
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r4, $r6;
        org.eclipse.jdt.internal.compiler.ast.Expression $r5;
        int[] $r1, $r2, $r7, $r9;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r8;
        org.eclipse.jdt.internal.compiler.ast.CastExpression $r3;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i1;

        i2 = $r1[$i0];

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnGenericsLengthStack(int)>(0);

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] identifierLengthStack>;

        $i3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr>;

        $i4 = $r2[$i3];

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnGenericsIdentifiersLengthStack(int)>($i4);

        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r3 = new org.eclipse.jdt.internal.compiler.ast.CastExpression;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r5 = $r4[$i5];

        $r7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i7 = $i6 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i7;

        $i9 = $r7[$i6];

        $r8 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeReference getTypeReference(int)>($i9);

        specialinvoke $r3.<org.eclipse.jdt.internal.compiler.ast.CastExpression: void <init>(org.eclipse.jdt.internal.compiler.ast.Expression,org.eclipse.jdt.internal.compiler.ast.Expression)>($r5, $r8);

        $r6[$i8] = $r3;

        $i10 = i2 - 1;

        $r8.<org.eclipse.jdt.internal.compiler.ast.Expression: int sourceEnd> = $i10;

        $r9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i12 = $i11 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i12;

        $i13 = $r9[$i11];

        $r3.<org.eclipse.jdt.internal.compiler.ast.Expression: int sourceStart> = $i13;

        $i14 = $i13 + 1;

        $r8.<org.eclipse.jdt.internal.compiler.ast.Expression: int sourceStart> = $i14;

        $i15 = $r5.<org.eclipse.jdt.internal.compiler.ast.Expression: int sourceEnd>;

        $r3.<org.eclipse.jdt.internal.compiler.ast.Expression: int sourceEnd> = $i15;

        return;
    }

    protected void consumeCastExpressionWithPrimitiveType()
    {
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r3, $r5;
        org.eclipse.jdt.internal.compiler.ast.Expression $r4;
        int[] $r1, $r6, $r8;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r7;
        org.eclipse.jdt.internal.compiler.ast.CastExpression $r2;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i1;

        i2 = $r1[$i0];

        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r2 = new org.eclipse.jdt.internal.compiler.ast.CastExpression;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r4 = $r3[$i3];

        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i5 = $i4 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i5;

        $i7 = $r6[$i4];

        $r7 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeReference getTypeReference(int)>($i7);

        specialinvoke $r2.<org.eclipse.jdt.internal.compiler.ast.CastExpression: void <init>(org.eclipse.jdt.internal.compiler.ast.Expression,org.eclipse.jdt.internal.compiler.ast.Expression)>($r4, $r7);

        $r5[$i6] = $r2;

        $i8 = i2 - 1;

        $r7.<org.eclipse.jdt.internal.compiler.ast.Expression: int sourceEnd> = $i8;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i10 = $i9 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i10;

        $i11 = $r8[$i9];

        $r2.<org.eclipse.jdt.internal.compiler.ast.Expression: int sourceStart> = $i11;

        $i12 = $i11 + 1;

        $r7.<org.eclipse.jdt.internal.compiler.ast.Expression: int sourceStart> = $i12;

        $i13 = $r4.<org.eclipse.jdt.internal.compiler.ast.Expression: int sourceEnd>;

        $r2.<org.eclipse.jdt.internal.compiler.ast.Expression: int sourceEnd> = $i13;

        return;
    }

    protected org.eclipse.jdt.internal.compiler.ast.ParameterizedQualifiedTypeReference computeQualifiedGenericsFromRightSide(org.eclipse.jdt.internal.compiler.ast.TypeReference, int)
    {
        char[][] $r3, $r6, $r14, $r16, $r18, r24, r26;
        org.eclipse.jdt.internal.compiler.ast.TypeReference[][] $r17, r23;
        org.eclipse.jdt.internal.compiler.ast.TypeReference[] $r12, $r29;
        org.eclipse.jdt.internal.compiler.ast.TypeReference r2;
        long $l15, $l22, $l24, $l25, $l26, $l28, $l30, $l31, $l32;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r30;
        org.eclipse.jdt.internal.compiler.ast.SingleTypeReference r21;
        char[] $r7, $r10, $r11;
        int[] $r1, $r28;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        org.eclipse.jdt.internal.compiler.ast.ParameterizedSingleTypeReference r20;
        org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference $r13, $r15, r25;
        long[] $r4, $r8, r9, $r19, r27;
        org.eclipse.jdt.internal.compiler.ast.ParameterizedQualifiedTypeReference $r5, r22;
        int $i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, $i12, $i13, $i14, $i16, $i17, $i18, $i19, $i20, $i21, $i23, $i27, $i29, $i33, $i34, i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        r2 := @parameter0: org.eclipse.jdt.internal.compiler.ast.TypeReference;

        i11 := @parameter1: int;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] identifierLengthStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr>;

        i1 = $r1[$i0];

        i35 = i1;

        $z0 = r2 instanceof org.eclipse.jdt.internal.compiler.ast.ParameterizedSingleTypeReference;

        if $z0 == 0 goto label01;

        i35 = i1 + 1;

        goto label04;

     label01:
        $z1 = r2 instanceof org.eclipse.jdt.internal.compiler.ast.SingleTypeReference;

        if $z1 == 0 goto label02;

        i35 = i1 + 1;

        goto label04;

     label02:
        $z2 = r2 instanceof org.eclipse.jdt.internal.compiler.ast.ParameterizedQualifiedTypeReference;

        if $z2 == 0 goto label03;

        $r15 = (org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference) r2;

        $r16 = $r15.<org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference: char[][] tokens>;

        $i34 = lengthof $r16;

        i35 = i1 + $i34;

        goto label04;

     label03:
        $z3 = r2 instanceof org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference;

        if $z3 == 0 goto label04;

        $r13 = (org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference) r2;

        $r14 = $r13.<org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference: char[][] tokens>;

        $i33 = lengthof $r14;

        i35 = i1 + $i33;

     label04:
        $r17 = newarray (org.eclipse.jdt.internal.compiler.ast.TypeReference[])[i35];

        $r18 = newarray (char[])[i35];

        $r19 = newarray (long)[i35];

        $z7 = r2 instanceof org.eclipse.jdt.internal.compiler.ast.ParameterizedSingleTypeReference;

        if $z7 == 0 goto label05;

        r20 = (org.eclipse.jdt.internal.compiler.ast.ParameterizedSingleTypeReference) r2;

        $r11 = r20.<org.eclipse.jdt.internal.compiler.ast.ParameterizedSingleTypeReference: char[] token>;

        $r18[i1] = $r11;

        $i27 = r20.<org.eclipse.jdt.internal.compiler.ast.ParameterizedSingleTypeReference: int sourceStart>;

        $l28 = (long) $i27;

        $l31 = $l28 << 32;

        $i29 = r20.<org.eclipse.jdt.internal.compiler.ast.ParameterizedSingleTypeReference: int sourceEnd>;

        $l30 = (long) $i29;

        $l32 = $l31 + $l30;

        $r19[i1] = $l32;

        $r12 = r20.<org.eclipse.jdt.internal.compiler.ast.ParameterizedSingleTypeReference: org.eclipse.jdt.internal.compiler.ast.TypeReference[] typeArguments>;

        $r17[i1] = $r12;

        goto label08;

     label05:
        $z4 = r2 instanceof org.eclipse.jdt.internal.compiler.ast.SingleTypeReference;

        if $z4 == 0 goto label06;

        r21 = (org.eclipse.jdt.internal.compiler.ast.SingleTypeReference) r2;

        $r10 = r21.<org.eclipse.jdt.internal.compiler.ast.SingleTypeReference: char[] token>;

        $r18[i1] = $r10;

        $i21 = r21.<org.eclipse.jdt.internal.compiler.ast.SingleTypeReference: int sourceStart>;

        $l22 = (long) $i21;

        $l25 = $l22 << 32;

        $i23 = r21.<org.eclipse.jdt.internal.compiler.ast.SingleTypeReference: int sourceEnd>;

        $l24 = (long) $i23;

        $l26 = $l25 + $l24;

        $r19[i1] = $l26;

        goto label08;

     label06:
        $z5 = r2 instanceof org.eclipse.jdt.internal.compiler.ast.ParameterizedQualifiedTypeReference;

        if $z5 == 0 goto label07;

        r22 = (org.eclipse.jdt.internal.compiler.ast.ParameterizedQualifiedTypeReference) r2;

        r23 = r22.<org.eclipse.jdt.internal.compiler.ast.ParameterizedQualifiedTypeReference: org.eclipse.jdt.internal.compiler.ast.TypeReference[][] typeArguments>;

        $i18 = lengthof r23;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r23, 0, $r17, i1, $i18);

        r24 = r22.<org.eclipse.jdt.internal.compiler.ast.ParameterizedQualifiedTypeReference: char[][] tokens>;

        $i19 = lengthof r24;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r24, 0, $r18, i1, $i19);

        r9 = r22.<org.eclipse.jdt.internal.compiler.ast.ParameterizedQualifiedTypeReference: long[] sourcePositions>;

        $i20 = lengthof r9;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r9, 0, $r19, i1, $i20);

        goto label08;

     label07:
        $z6 = r2 instanceof org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference;

        if $z6 == 0 goto label08;

        r25 = (org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference) r2;

        r26 = r25.<org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference: char[][] tokens>;

        $i16 = lengthof r26;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r26, 0, $r18, i1, $i16);

        r27 = r25.<org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference: long[] sourcePositions>;

        $i17 = lengthof r27;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r27, 0, $r19, i1, $i17);

     label08:
        $r28 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] genericsLengthStack>;

        $i36 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsLengthPtr>;

        $i37 = $i36 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsLengthPtr> = $i37;

        $i38 = $r28[$i36];

        $r29 = newarray (org.eclipse.jdt.internal.compiler.ast.TypeReference)[$i38];

        $i39 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr>;

        $i40 = $i39 - $i38;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr> = $i40;

        $r30 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] genericsStack>;

        $i41 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr>;

        $i42 = $i41 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r30, $i42, $r29, 0, $i38);

        if i1 != 1 goto label09;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: char[][] identifierStack>;

        $i12 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $r7 = $r6[$i12];

        $r18[0] = $r7;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: long[] identifierPositionStack>;

        $i13 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i14 = $i13 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr> = $i14;

        $l15 = $r8[$i13];

        $r19[0] = $l15;

        $r17[0] = $r29;

        goto label10;

     label09:
        $i2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i3 = $i2 - i1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr> = $i3;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: char[][] identifierStack>;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i5 = $i4 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, $i5, $r18, 0, i1);

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: long[] identifierPositionStack>;

        $i6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i7 = $i6 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, $i7, $r19, 0, i1);

        $i8 = i1 - 1;

        $r17[$i8] = $r29;

     label10:
        $i9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr>;

        $i10 = $i9 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr> = $i10;

        $r5 = new org.eclipse.jdt.internal.compiler.ast.ParameterizedQualifiedTypeReference;

        specialinvoke $r5.<org.eclipse.jdt.internal.compiler.ast.ParameterizedQualifiedTypeReference: void <init>(char[][],org.eclipse.jdt.internal.compiler.ast.TypeReference[][],int,long[])>($r18, $r17, i11, $r19);

        return $r5;
    }

    protected void consumeCastExpressionWithQualifiedGenericsArray()
    {
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r6, $r8;
        org.eclipse.jdt.internal.compiler.ast.Expression $r7;
        int[] $r1, $r2, $r9;
        org.eclipse.jdt.internal.compiler.ast.ParameterizedQualifiedTypeReference $r4;
        int $i0, $i1, i2, $i3, $i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r3;
        org.eclipse.jdt.internal.compiler.ast.CastExpression $r5;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i1;

        i2 = $r1[$i0];

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i4 = $i3 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i4;

        i5 = $r2[$i3];

        $r3 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeReference getTypeReference(int)>(0);

        $r4 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ParameterizedQualifiedTypeReference computeQualifiedGenericsFromRightSide(org.eclipse.jdt.internal.compiler.ast.TypeReference,int)>($r3, i5);

        $i6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i7 = $i6 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i7;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r5 = new org.eclipse.jdt.internal.compiler.ast.CastExpression;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r7 = $r6[$i8];

        specialinvoke $r5.<org.eclipse.jdt.internal.compiler.ast.CastExpression: void <init>(org.eclipse.jdt.internal.compiler.ast.Expression,org.eclipse.jdt.internal.compiler.ast.Expression)>($r7, $r4);

        $r8[$i9] = $r5;

        $i10 = i2 - 1;

        $r4.<org.eclipse.jdt.internal.compiler.ast.Expression: int sourceEnd> = $i10;

        $r9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i12 = $i11 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i12;

        $i13 = $r9[$i11];

        $r5.<org.eclipse.jdt.internal.compiler.ast.Expression: int sourceStart> = $i13;

        $i14 = $i13 + 1;

        $r4.<org.eclipse.jdt.internal.compiler.ast.Expression: int sourceStart> = $i14;

        $i15 = $r7.<org.eclipse.jdt.internal.compiler.ast.Expression: int sourceEnd>;

        $r5.<org.eclipse.jdt.internal.compiler.ast.Expression: int sourceEnd> = $i15;

        return;
    }

    protected void consumeCatches()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void optimizedConcatNodeLists()>();

        return;
    }

    protected void consumeCatchHeader()
    {
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r3;
        boolean $z0, $z1;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r10;
        org.eclipse.jdt.internal.compiler.ast.Argument $r14;
        org.eclipse.jdt.internal.compiler.parser.RecoveredBlock $r13;
        org.eclipse.jdt.internal.compiler.parser.RecoveredElement $r1, $r2, $r8, $r9, $r11, $r12;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r7;
        org.eclipse.jdt.internal.compiler.ast.LocalDeclaration $r16;
        org.eclipse.jdt.internal.compiler.parser.RecoveredMethod r15;
        char[] $r6;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r1 != null goto label1;

        return;

     label1:
        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $z0 = $r2 instanceof org.eclipse.jdt.internal.compiler.parser.RecoveredBlock;

        if $z0 != 0 goto label4;

        $r11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $z1 = $r11 instanceof org.eclipse.jdt.internal.compiler.parser.RecoveredMethod;

        if $z1 != 0 goto label2;

        return;

     label2:
        $r12 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        r15 = (org.eclipse.jdt.internal.compiler.parser.RecoveredMethod) $r12;

        $r13 = r15.<org.eclipse.jdt.internal.compiler.parser.RecoveredMethod: org.eclipse.jdt.internal.compiler.parser.RecoveredBlock methodBody>;

        if $r13 != null goto label3;

        $i7 = r15.<org.eclipse.jdt.internal.compiler.parser.RecoveredMethod: int bracketBalance>;

        if $i7 > 0 goto label4;

     label3:
        return;

     label4:
        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr> = $i1;

        $r4 = $r3[$i0];

        $r14 = (org.eclipse.jdt.internal.compiler.ast.Argument) $r4;

        $r16 = new org.eclipse.jdt.internal.compiler.ast.LocalDeclaration;

        $r6 = $r14.<org.eclipse.jdt.internal.compiler.ast.Argument: char[] name>;

        $i3 = $r14.<org.eclipse.jdt.internal.compiler.ast.Argument: int sourceStart>;

        $i2 = $r14.<org.eclipse.jdt.internal.compiler.ast.Argument: int sourceEnd>;

        specialinvoke $r16.<org.eclipse.jdt.internal.compiler.ast.LocalDeclaration: void <init>(char[],int,int)>($r6, $i3, $i2);

        $r7 = $r14.<org.eclipse.jdt.internal.compiler.ast.Argument: org.eclipse.jdt.internal.compiler.ast.TypeReference type>;

        $r16.<org.eclipse.jdt.internal.compiler.ast.LocalDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeReference type> = $r7;

        $i4 = $r14.<org.eclipse.jdt.internal.compiler.ast.Argument: int declarationSourceStart>;

        $r16.<org.eclipse.jdt.internal.compiler.ast.LocalDeclaration: int declarationSourceStart> = $i4;

        $i5 = $r14.<org.eclipse.jdt.internal.compiler.ast.Argument: int declarationSourceEnd>;

        $r16.<org.eclipse.jdt.internal.compiler.ast.LocalDeclaration: int declarationSourceEnd> = $i5;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $r9 = virtualinvoke $r8.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,int)>($r16, 0);

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement> = $r9;

        $r10 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i6 = $r10.<org.eclipse.jdt.internal.compiler.parser.Scanner: int startPosition>;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastCheckPoint> = $i6;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean restartRecovery> = 1;

        $i9 = (int) -1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastIgnoredToken> = $i9;

        return;
    }

    protected void consumeClassBodyDeclaration()
    {
        org.eclipse.jdt.internal.compiler.ast.Block r4;
        org.eclipse.jdt.internal.compiler.ast.Javadoc $r9;
        int[] $r1, $r7, $r8;
        boolean $z0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r3, $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i26, $i28;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r2, $r5;
        org.eclipse.jdt.internal.compiler.ast.Initializer $r10;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] nestedMethod>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int nestedType>;

        $i1 = $r1[$i0];

        $i2 = $i1 - 1;

        $r1[$i0] = $i2;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i4 = $i3 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr> = $i4;

        $r3 = $r2[$i3];

        r4 = (org.eclipse.jdt.internal.compiler.ast.Block) $r3;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr>;

        $i6 = $i5 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr> = $i6;

        $z0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean diet>;

        if $z0 == 0 goto label1;

        $i22 = r4.<org.eclipse.jdt.internal.compiler.ast.Block: int bits>;

        $i26 = (int) -9;

        $i23 = $i22 & $i26;

        r4.<org.eclipse.jdt.internal.compiler.ast.Block: int bits> = $i23;

     label1:
        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $r6 = $r5[$i7];

        $r10 = (org.eclipse.jdt.internal.compiler.ast.Initializer) $r6;

        $i8 = r4.<org.eclipse.jdt.internal.compiler.ast.Block: int sourceStart>;

        $r10.<org.eclipse.jdt.internal.compiler.ast.Initializer: int sourceStart> = $i8;

        $r10.<org.eclipse.jdt.internal.compiler.ast.Initializer: int declarationSourceStart> = $i8;

        $r10.<org.eclipse.jdt.internal.compiler.ast.Initializer: org.eclipse.jdt.internal.compiler.ast.Block block> = r4;

        $i9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i10 = $i9 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i10;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i12 = $i11 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i12;

        $i13 = $r7[$i11];

        $r10.<org.eclipse.jdt.internal.compiler.ast.Initializer: int bodyStart> = $i13;

        $i14 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int realBlockPtr>;

        $i15 = $i14 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int realBlockPtr> = $i15;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i16 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i17 = $i16 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i17;

        $i24 = $r8[$i16];

        $i28 = (int) -1;

        if $i24 == $i28 goto label2;

        $r10.<org.eclipse.jdt.internal.compiler.ast.Initializer: int declarationSourceStart> = $i24;

        $r9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc>;

        $r10.<org.eclipse.jdt.internal.compiler.ast.Initializer: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc> = $r9;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc> = null;

     label2:
        $i18 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endPosition>;

        $r10.<org.eclipse.jdt.internal.compiler.ast.Initializer: int bodyEnd> = $i18;

        $i19 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        $r10.<org.eclipse.jdt.internal.compiler.ast.Initializer: int sourceEnd> = $i19;

        $i20 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        $i21 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int flushCommentsDefinedPriorTo(int)>($i20);

        $r10.<org.eclipse.jdt.internal.compiler.ast.Initializer: int declarationSourceEnd> = $i21;

        return;
    }

    protected void consumeClassBodyDeclarations()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void concatNodeLists()>();

        return;
    }

    protected void consumeClassBodyDeclarationsopt()
    {
        int $i0, $i1;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int nestedType>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int nestedType> = $i1;

        return;
    }

    protected void consumeAnnotationTypeMemberDeclarationsopt()
    {
        int $i0, $i1;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int nestedType>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int nestedType> = $i1;

        return;
    }

    protected void consumeClassBodyopt()
    {
        int $i0;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnAstStack(org.eclipse.jdt.internal.compiler.ast.ASTNode)>(null);

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int rParenPos>;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endPosition> = $i0;

        return;
    }

    protected void consumeClassDeclaration()
    {
        int[] $r1, $r4;
        boolean $z0, $z1, $z2, z3, $z4, $z5, $z6;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration $r5;
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14, $i15, $i16, $i18;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r2;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r6;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] astLengthStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr> = $i1;

        $i2 = $r1[$i0];

        if $i2 == 0 goto label01;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void dispatchDeclarationInto(int)>($i2);

     label01:
        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $r3 = $r2[$i3];

        $r5 = (org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) $r3;

        $z0 = virtualinvoke $r5.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: boolean checkConstructors(org.eclipse.jdt.internal.compiler.parser.Parser)>(r0);

        if $z0 != 0 goto label09;

        $i11 = $r5.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int modifiers>;

        $i12 = staticinvoke <org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int kind(int)>($i11);

        tableswitch($i12)
        {
            case 1: goto label02;
            case 2: goto label09;
            case 3: goto label02;
            default: goto label09;
        };

     label02:
        z3 = 0;

        $z2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean diet>;

        if $z2 == 0 goto label06;

        i14 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int nestedType>;

        goto label05;

     label03:
        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] variablesCounter>;

        $i13 = $r4[i14];

        if $i13 <= 0 goto label04;

        z3 = 1;

        goto label06;

     label04:
        $i18 = (int) -1;

        i14 = i14 + $i18;

     label05:
        if i14 > 0 goto label03;

     label06:
        $z4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean diet>;

        if $z4 == 0 goto label07;

        if z3 != 0 goto label07;

        $z5 = 0;

        goto label08;

     label07:
        $z5 = 1;

     label08:
        virtualinvoke $r5.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration createDefaultConstructor(boolean,boolean)>($z5, 1);

     label09:
        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $z6 = $r6.<org.eclipse.jdt.internal.compiler.parser.Scanner: boolean containsAssertKeyword>;

        if $z6 == 0 goto label10;

        $i9 = $r5.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits>;

        $i10 = $i9 | 1;

        $r5.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits> = $i10;

     label10:
        virtualinvoke $r5.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: void addClinit()>();

        $i4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        $r5.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bodyEnd> = $i4;

        if $i2 != 0 goto label11;

        $i6 = $r5.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bodyStart>;

        $i5 = $r5.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bodyEnd>;

        $z1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean containsComment(int,int)>($i6, $i5);

        if $z1 != 0 goto label11;

        $i7 = $r5.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits>;

        $i8 = $i7 | 8;

        $r5.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits> = $i8;

     label11:
        $i15 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        $i16 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int flushCommentsDefinedPriorTo(int)>($i15);

        $r5.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int declarationSourceEnd> = $i16;

        return;
    }

    protected void consumeClassHeader()
    {
        org.eclipse.jdt.internal.compiler.parser.Scanner $r5, $r6;
        org.eclipse.jdt.internal.compiler.parser.RecoveredElement $r4;
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r2;
        int $i0, $i1, $i2, $i4;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r1;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration r3;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $r2 = $r1[$i0];

        r3 = (org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) $r2;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int currentToken>;

        if $i1 != 69 goto label1;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i2 = $r6.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        r3.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bodyStart> = $i2;

     label1:
        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r4 == null goto label2;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean restartRecovery> = 1;

     label2:
        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i4 = (int) -1;

        $r5.<org.eclipse.jdt.internal.compiler.parser.Scanner: int commentPtr> = $i4;

        return;
    }

    protected void consumeClassHeaderExtends()
    {
        org.eclipse.jdt.internal.compiler.parser.RecoveredElement $r6;
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r3;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r1, $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r2;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration r4;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeReference getTypeReference(int)>(0);

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $r3 = $r2[$i0];

        r4 = (org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) $r3;

        r4.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeReference superclass> = $r1;

        $i1 = $r1.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int bits>;

        $i2 = $i1 | 16;

        $r1.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int bits> = $i2;

        $r5 = r4.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeReference superclass>;

        $i3 = $r5.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int sourceEnd>;

        $i4 = $i3 + 1;

        r4.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bodyStart> = $i4;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r6 == null goto label1;

        $i5 = r4.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bodyStart>;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastCheckPoint> = $i5;

     label1:
        return;
    }

    protected void consumeClassHeaderImplements()
    {
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r3;
        int[] $r1;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, i8, $i9, $i10, $i11, $i12, $i13, $i14, i15;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r2, $r6;
        org.eclipse.jdt.internal.compiler.ast.TypeReference[] $r5, $r7, $r8, $r10;
        org.eclipse.jdt.internal.compiler.parser.RecoveredElement $r12;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r9, $r11;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration r4;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] astLengthStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr> = $i1;

        i2 = $r1[$i0];

        $i3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i4 = $i3 - i2;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr> = $i4;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $r3 = $r2[$i5];

        r4 = (org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) $r3;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i7 = $i6 + 1;

        $r5 = newarray (org.eclipse.jdt.internal.compiler.ast.TypeReference)[i2];

        r4.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeReference[] superInterfaces> = $r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, $i7, $r5, 0, i2);

        i15 = 0;

        $r7 = r4.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeReference[] superInterfaces>;

        i8 = lengthof $r7;

        goto label2;

     label1:
        $r8 = r4.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeReference[] superInterfaces>;

        $r9 = $r8[i15];

        $i9 = $r9.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int bits>;

        $i10 = $i9 | 16;

        $r9.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int bits> = $i10;

        i15 = i15 + 1;

     label2:
        if i15 < i8 goto label1;

        $r10 = r4.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeReference[] superInterfaces>;

        $i11 = i2 - 1;

        $r11 = $r10[$i11];

        $i12 = $r11.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int sourceEnd>;

        $i13 = $i12 + 1;

        r4.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bodyStart> = $i13;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int listLength> = 0;

        $r12 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r12 == null goto label3;

        $i14 = r4.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bodyStart>;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastCheckPoint> = $i14;

     label3:
        return;
    }

    protected void consumeClassHeaderName1()
    {
        org.eclipse.jdt.internal.compiler.ast.Javadoc $r6;
        char[][] $r16;
        org.eclipse.jdt.internal.compiler.CompilationResult $r3;
        org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration $r2, $r11, $r12;
        long $l21, $l23;
        org.eclipse.jdt.internal.compiler.parser.Parser r1;
        char[] $r13, $r14, $r17;
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r9;
        int[] $r4, $r18, $r19, $r20, $r21;
        boolean $z0;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration $r22;
        org.eclipse.jdt.internal.compiler.ast.Annotation[] $r10;
        long[] $r15;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i22, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i45;
        org.eclipse.jdt.internal.compiler.parser.RecoveredElement $r5, $r7, $r8;

        r1 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r22 = new org.eclipse.jdt.internal.compiler.ast.TypeDeclaration;

        $r2 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit>;

        $r3 = $r2.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: org.eclipse.jdt.internal.compiler.CompilationResult compilationResult>;

        specialinvoke $r22.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: void <init>(org.eclipse.jdt.internal.compiler.CompilationResult)>($r3);

        $r4 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] nestedMethod>;

        $i0 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int nestedType>;

        $i1 = $r4[$i0];

        if $i1 != 0 goto label1;

        $i17 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int nestedType>;

        if $i17 == 0 goto label2;

        $i18 = $r22.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits>;

        $i19 = $i18 | 1024;

        $r22.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits> = $i19;

        goto label2;

     label1:
        $i2 = $r22.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits>;

        $i3 = $i2 | 256;

        $r22.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits> = $i3;

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.parser.Parser: void markEnclosingMemberWithLocalType()>();

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.parser.Parser: void blockReal()>();

     label2:
        $r15 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: long[] identifierPositionStack>;

        $i20 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $l21 = $r15[$i20];

        $i22 = (int) $l21;

        $r22.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int sourceEnd> = $i22;

        $l23 = $l21 >>> 32;

        $i24 = (int) $l23;

        $r22.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int sourceStart> = $i24;

        $r16 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: char[][] identifierStack>;

        $i25 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i26 = $i25 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr> = $i26;

        $r17 = $r16[$i25];

        $r22.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: char[] name> = $r17;

        $i27 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr>;

        $i28 = $i27 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr> = $i28;

        $r18 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i29 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i30 = $i29 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i30;

        $i31 = $r18[$i29];

        $r22.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int declarationSourceStart> = $i31;

        $i32 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i33 = $i32 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i33;

        $r19 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i34 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i35 = $i34 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i35;

        $i36 = $r19[$i34];

        $r22.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int modifiersSourceStart> = $i36;

        $r20 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i37 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i38 = $i37 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i38;

        $i39 = $r20[$i37];

        $r22.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int modifiers> = $i39;

        $i40 = $r22.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int modifiersSourceStart>;

        if $i40 < 0 goto label3;

        $i16 = $r22.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int modifiersSourceStart>;

        $r22.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int declarationSourceStart> = $i16;

     label3:
        $i4 = $r22.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits>;

        $i5 = $i4 & 1024;

        if $i5 != 0 goto label4;

        $i12 = $r22.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits>;

        $i13 = $i12 & 256;

        if $i13 != 0 goto label4;

        $r11 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit>;

        if $r11 == null goto label4;

        $r13 = $r22.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: char[] name>;

        $r12 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit>;

        $r14 = virtualinvoke $r12.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: char[] getMainTypeName()>();

        $z0 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: boolean equals(char[],char[])>($r13, $r14);

        if $z0 != 0 goto label4;

        $i14 = $r22.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits>;

        $i15 = $i14 | 4096;

        $r22.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits> = $i15;

     label4:
        $r21 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] expressionLengthStack>;

        $i41 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        $i42 = $i41 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr> = $i42;

        $i43 = $r21[$i41];

        if $i43 == 0 goto label5;

        $r9 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i9 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i10 = $i9 - $i43;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr> = $i10;

        $i11 = $i10 + 1;

        $r10 = newarray (org.eclipse.jdt.internal.compiler.ast.Annotation)[$i43];

        $r22.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.Annotation[] annotations> = $r10;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, $i11, $r10, 0, $i43);

     label5:
        $i6 = $r22.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int sourceEnd>;

        $i7 = $i6 + 1;

        $r22.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bodyStart> = $i7;

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnAstStack(org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r22);

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int listLength> = 0;

        $r5 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r5 == null goto label6;

        $i8 = $r22.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bodyStart>;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastCheckPoint> = $i8;

        $r7 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $r8 = virtualinvoke $r7.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,int)>($r22, 0);

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement> = $r8;

        $i45 = (int) -1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastIgnoredToken> = $i45;

     label6:
        $r6 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc>;

        $r22.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc> = $r6;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc> = null;

        return;
    }

    protected void consumeTypeHeaderNameWithTypeParameters()
    {
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r2;
        int[] $r4;
        int $i0, $i1, $i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        org.eclipse.jdt.internal.compiler.parser.RecoveredType r11;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r1, $r6;
        org.eclipse.jdt.internal.compiler.ast.TypeParameter[] $r5, $r7;
        org.eclipse.jdt.internal.compiler.parser.RecoveredElement $r9, $r10;
        org.eclipse.jdt.internal.compiler.ast.TypeParameter $r8;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration r3;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $r2 = $r1[$i0];

        r3 = (org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) $r2;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] genericsLengthStack>;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsLengthPtr>;

        $i2 = $i1 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsLengthPtr> = $i2;

        i3 = $r4[$i1];

        $i4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr>;

        $i5 = $i4 - i3;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr> = $i5;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] genericsStack>;

        $i6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr>;

        $i7 = $i6 + 1;

        $r5 = newarray (org.eclipse.jdt.internal.compiler.ast.TypeParameter)[i3];

        r3.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeParameter[] typeParameters> = $r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, $i7, $r5, 0, i3);

        $r7 = r3.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeParameter[] typeParameters>;

        $i8 = i3 - 1;

        $r8 = $r7[$i8];

        $i9 = $r8.<org.eclipse.jdt.internal.compiler.ast.TypeParameter: int declarationSourceEnd>;

        $i10 = $i9 + 1;

        r3.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bodyStart> = $i10;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int listTypeParameterLength> = 0;

        $r9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r9 == null goto label1;

        $r10 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        r11 = (org.eclipse.jdt.internal.compiler.parser.RecoveredType) $r10;

        r11.<org.eclipse.jdt.internal.compiler.parser.RecoveredType: org.eclipse.jdt.internal.compiler.ast.TypeParameter[] pendingTypeParameters> = null;

        $i11 = r3.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bodyStart>;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastCheckPoint> = $i11;

     label1:
        return;
    }

    protected void consumeClassInstanceCreationExpression()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void classInstanceCreation(boolean)>(0);

        return;
    }

    protected void consumeClassInstanceCreationExpressionName()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.NameReference $r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.NameReference getUnspecifiedReferenceOptimized()>();

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnExpressionStack(org.eclipse.jdt.internal.compiler.ast.Expression)>($r1);

        return;
    }

    protected void consumeClassInstanceCreationExpressionQualified()
    {
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r1, $r4, $r6;
        org.eclipse.jdt.internal.compiler.ast.Expression $r2, $r5, $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression r3;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void classInstanceCreation(boolean)>(1);

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr> = $i1;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i3 = $i2 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr> = $i3;

        $r2 = $r1[$i2];

        r3 = (org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression) $r2;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r5 = $r4[$i4];

        r3.<org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression: org.eclipse.jdt.internal.compiler.ast.Expression enclosingInstance> = $r5;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r6[$i5] = r3;

        $r7 = r3.<org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression: org.eclipse.jdt.internal.compiler.ast.Expression enclosingInstance>;

        $i6 = $r7.<org.eclipse.jdt.internal.compiler.ast.Expression: int sourceStart>;

        r3.<org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression: int sourceStart> = $i6;

        return;
    }

    protected void consumeClassInstanceCreationExpressionQualifiedWithTypeArguments()
    {
        org.eclipse.jdt.internal.compiler.ast.TypeReference[] $r5, $r15;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r13;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r2, $r6, $r8, $r16;
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r18, $r19, $r21, $r24, $r26;
        org.eclipse.jdt.internal.compiler.ast.Expression $r22, $r25, $r27;
        int[] $r1, $r4, $r7, $r12, $r14, $r17;
        boolean $z0;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration $r10;
        org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression $r11, $r20, $r23;
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r3, $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] astLengthStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr> = $i1;

        $i2 = $r1[$i0];

        if $i2 != 1 goto label2;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i20 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $r9 = $r8[$i20];

        if $r9 != null goto label2;

        $i21 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i22 = $i21 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr> = $i22;

        $r11 = new org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression;

        specialinvoke $r11.<org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression: void <init>()>();

        $i23 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endPosition>;

        $r11.<org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression: int sourceEnd> = $i23;

        $r12 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] expressionLengthStack>;

        $i24 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        $i25 = $i24 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr> = $i25;

        $i26 = $r12[$i24];

        if $i26 == 0 goto label1;

        $i38 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i39 = $i38 - $i26;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr> = $i39;

        $r19 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i40 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i41 = $i40 + 1;

        $r18 = newarray (org.eclipse.jdt.internal.compiler.ast.Expression)[$i26];

        $r11.<org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression: org.eclipse.jdt.internal.compiler.ast.Expression[] arguments> = $r18;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r19, $i41, $r18, 0, $i26);

     label1:
        $r13 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeReference getTypeReference(int)>(0);

        $r11.<org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression: org.eclipse.jdt.internal.compiler.ast.TypeReference type> = $r13;

        $r14 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] genericsLengthStack>;

        $i27 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsLengthPtr>;

        $i28 = $i27 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsLengthPtr> = $i28;

        $i42 = $r14[$i27];

        $i29 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr>;

        $i30 = $i29 - $i42;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr> = $i30;

        $r16 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] genericsStack>;

        $i31 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr>;

        $i32 = $i31 + 1;

        $r15 = newarray (org.eclipse.jdt.internal.compiler.ast.TypeReference)[$i42];

        $r11.<org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression: org.eclipse.jdt.internal.compiler.ast.TypeReference[] typeArguments> = $r15;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r16, $i32, $r15, 0, $i42);

        $i33 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i34 = $i33 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i34;

        $r17 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i35 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i36 = $i35 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i36;

        $i37 = $r17[$i35];

        $r11.<org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression: int sourceStart> = $i37;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnExpressionStack(org.eclipse.jdt.internal.compiler.ast.Expression)>($r11);

        goto label4;

     label2:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void dispatchDeclarationInto(int)>($i2);

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $r3 = $r2[$i3];

        $r10 = (org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) $r3;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        $r10.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int declarationSourceEnd> = $i4;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        $r10.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bodyEnd> = $i5;

        if $i2 != 0 goto label3;

        $i17 = $r10.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bodyStart>;

        $i16 = $r10.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bodyEnd>;

        $z0 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean containsComment(int,int)>($i17, $i16);

        if $z0 != 0 goto label3;

        $i18 = $r10.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits>;

        $i19 = $i18 | 8;

        $r10.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits> = $i19;

     label3:
        $i43 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i44 = $i43 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr> = $i44;

        $i45 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr>;

        $i46 = $i45 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr> = $i46;

        $r20 = $r10.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression allocation>;

        if $r20 == null goto label4;

        $i6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        $r20.<org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression: int sourceEnd> = $i6;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] genericsLengthStack>;

        $i7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsLengthPtr>;

        $i8 = $i7 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsLengthPtr> = $i8;

        i47 = $r4[$i7];

        $i9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr>;

        $i10 = $i9 - i47;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr> = $i10;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] genericsStack>;

        $i11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr>;

        $i12 = $i11 + 1;

        $r5 = newarray (org.eclipse.jdt.internal.compiler.ast.TypeReference)[i47];

        $r20.<org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression: org.eclipse.jdt.internal.compiler.ast.TypeReference[] typeArguments> = $r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, $i12, $r5, 0, i47);

        $r7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i13 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i14 = $i13 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i14;

        $i15 = $r7[$i13];

        $r20.<org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression: int sourceStart> = $i15;

     label4:
        $i48 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        $i49 = $i48 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr> = $i49;

        $r21 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i50 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i51 = $i50 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr> = $i51;

        $r22 = $r21[$i50];

        $r23 = (org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression) $r22;

        $r24 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i52 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r25 = $r24[$i52];

        $r23.<org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression: org.eclipse.jdt.internal.compiler.ast.Expression enclosingInstance> = $r25;

        $r26 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i53 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r26[$i53] = $r23;

        $r27 = $r23.<org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression: org.eclipse.jdt.internal.compiler.ast.Expression enclosingInstance>;

        $i54 = $r27.<org.eclipse.jdt.internal.compiler.ast.Expression: int sourceStart>;

        $r23.<org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression: int sourceStart> = $i54;

        return;
    }

    protected void consumeClassInstanceCreationExpressionWithTypeArguments()
    {
        org.eclipse.jdt.internal.compiler.ast.TypeReference[] $r5, $r15;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r13;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r2, $r6, $r8, $r16;
        org.eclipse.jdt.internal.compiler.ast.AllocationExpression $r11;
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r18, $r19;
        int[] $r1, $r4, $r7, $r12, $r14, $r17;
        boolean $z0;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration $r10;
        org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression $r20;
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r3, $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, i47;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] astLengthStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr> = $i1;

        $i2 = $r1[$i0];

        if $i2 != 1 goto label2;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i20 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $r9 = $r8[$i20];

        if $r9 != null goto label2;

        $i21 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i22 = $i21 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr> = $i22;

        $r11 = new org.eclipse.jdt.internal.compiler.ast.AllocationExpression;

        specialinvoke $r11.<org.eclipse.jdt.internal.compiler.ast.AllocationExpression: void <init>()>();

        $i23 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endPosition>;

        $r11.<org.eclipse.jdt.internal.compiler.ast.AllocationExpression: int sourceEnd> = $i23;

        $r12 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] expressionLengthStack>;

        $i24 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        $i25 = $i24 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr> = $i25;

        $i26 = $r12[$i24];

        if $i26 == 0 goto label1;

        $i38 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i39 = $i38 - $i26;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr> = $i39;

        $r19 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i40 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i41 = $i40 + 1;

        $r18 = newarray (org.eclipse.jdt.internal.compiler.ast.Expression)[$i26];

        $r11.<org.eclipse.jdt.internal.compiler.ast.AllocationExpression: org.eclipse.jdt.internal.compiler.ast.Expression[] arguments> = $r18;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r19, $i41, $r18, 0, $i26);

     label1:
        $r13 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeReference getTypeReference(int)>(0);

        $r11.<org.eclipse.jdt.internal.compiler.ast.AllocationExpression: org.eclipse.jdt.internal.compiler.ast.TypeReference type> = $r13;

        $r14 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] genericsLengthStack>;

        $i27 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsLengthPtr>;

        $i28 = $i27 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsLengthPtr> = $i28;

        $i42 = $r14[$i27];

        $i29 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr>;

        $i30 = $i29 - $i42;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr> = $i30;

        $r16 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] genericsStack>;

        $i31 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr>;

        $i32 = $i31 + 1;

        $r15 = newarray (org.eclipse.jdt.internal.compiler.ast.TypeReference)[$i42];

        $r11.<org.eclipse.jdt.internal.compiler.ast.AllocationExpression: org.eclipse.jdt.internal.compiler.ast.TypeReference[] typeArguments> = $r15;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r16, $i32, $r15, 0, $i42);

        $i33 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i34 = $i33 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i34;

        $r17 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i35 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i36 = $i35 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i36;

        $i37 = $r17[$i35];

        $r11.<org.eclipse.jdt.internal.compiler.ast.AllocationExpression: int sourceStart> = $i37;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnExpressionStack(org.eclipse.jdt.internal.compiler.ast.Expression)>($r11);

        goto label4;

     label2:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void dispatchDeclarationInto(int)>($i2);

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $r3 = $r2[$i3];

        $r10 = (org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) $r3;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        $r10.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int declarationSourceEnd> = $i4;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        $r10.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bodyEnd> = $i5;

        if $i2 != 0 goto label3;

        $i17 = $r10.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bodyStart>;

        $i16 = $r10.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bodyEnd>;

        $z0 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean containsComment(int,int)>($i17, $i16);

        if $z0 != 0 goto label3;

        $i18 = $r10.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits>;

        $i19 = $i18 | 8;

        $r10.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits> = $i19;

     label3:
        $i43 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i44 = $i43 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr> = $i44;

        $i45 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr>;

        $i46 = $i45 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr> = $i46;

        $r20 = $r10.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression allocation>;

        if $r20 == null goto label4;

        $i6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        $r20.<org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression: int sourceEnd> = $i6;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] genericsLengthStack>;

        $i7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsLengthPtr>;

        $i8 = $i7 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsLengthPtr> = $i8;

        i47 = $r4[$i7];

        $i9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr>;

        $i10 = $i9 - i47;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr> = $i10;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] genericsStack>;

        $i11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr>;

        $i12 = $i11 + 1;

        $r5 = newarray (org.eclipse.jdt.internal.compiler.ast.TypeReference)[i47];

        $r20.<org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression: org.eclipse.jdt.internal.compiler.ast.TypeReference[] typeArguments> = $r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, $i12, $r5, 0, i47);

        $r7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i13 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i14 = $i13 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i14;

        $i15 = $r7[$i13];

        $r20.<org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression: int sourceStart> = $i15;

     label4:
        return;
    }

    protected void consumeClassOrInterface()
    {
        int[] $r1, $r2;
        int $i0, $i1, $i2, $i3, $i4;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] genericsIdentifiersLengthStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsIdentifiersLengthPtr>;

        $i3 = $r1[$i0];

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] identifierLengthStack>;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr>;

        $i2 = $r2[$i1];

        $i4 = $i3 + $i2;

        $r1[$i0] = $i4;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnGenericsLengthStack(int)>(0);

        return;
    }

    protected void consumeClassOrInterfaceName()
    {
        int[] $r1;
        int $i0, $i1;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] identifierLengthStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr>;

        $i1 = $r1[$i0];

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnGenericsIdentifiersLengthStack(int)>($i1);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnGenericsLengthStack(int)>(0);

        return;
    }

    protected void consumeClassTypeElt()
    {
        int $i0, $i1;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeReference getTypeReference(int)>(0);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnAstStack(org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r1);

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int listLength>;

        $i1 = $i0 + 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int listLength> = $i1;

        return;
    }

    protected void consumeClassTypeList()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void optimizedConcatNodeLists()>();

        return;
    }

    protected void consumeCompilationUnit()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        return;
    }

    protected void consumeConditionalExpression(int)
    {
        org.eclipse.jdt.internal.compiler.ast.ConditionalExpression $r1;
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r2, $r3, $r4, $r8;
        org.eclipse.jdt.internal.compiler.ast.Expression $r5, $r6, $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        i12 := @parameter0: int;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i1 = $i0 - 2;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i1;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i3 = $i2 - 2;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr> = $i3;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        $i5 = $i4 - 2;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr> = $i5;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r1 = new org.eclipse.jdt.internal.compiler.ast.ConditionalExpression;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r7 = $r2[$i6];

        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i8 = $i7 + 1;

        $r6 = $r3[$i8];

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i10 = $i9 + 2;

        $r5 = $r4[$i10];

        specialinvoke $r1.<org.eclipse.jdt.internal.compiler.ast.ConditionalExpression: void <init>(org.eclipse.jdt.internal.compiler.ast.Expression,org.eclipse.jdt.internal.compiler.ast.Expression,org.eclipse.jdt.internal.compiler.ast.Expression)>($r7, $r6, $r5);

        $r8[$i11] = $r1;

        return;
    }

    protected void consumeConditionalExpressionWithName(int)
    {
        org.eclipse.jdt.internal.compiler.ast.ConditionalExpression $r2;
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r3, $r4, $r5, $r9;
        org.eclipse.jdt.internal.compiler.ast.Expression $r6, $r7, $r8;
        org.eclipse.jdt.internal.compiler.ast.NameReference $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        i12 := @parameter0: int;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i1 = $i0 - 2;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i1;

        $r1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.NameReference getUnspecifiedReferenceOptimized()>();

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnExpressionStack(org.eclipse.jdt.internal.compiler.ast.Expression)>($r1);

        $i2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i3 = $i2 - 2;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr> = $i3;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        $i5 = $i4 - 2;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr> = $i5;

        $r9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r2 = new org.eclipse.jdt.internal.compiler.ast.ConditionalExpression;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i7 = $i6 + 2;

        $r8 = $r3[$i7];

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r7 = $r4[$i8];

        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i10 = $i9 + 1;

        $r6 = $r5[$i10];

        specialinvoke $r2.<org.eclipse.jdt.internal.compiler.ast.ConditionalExpression: void <init>(org.eclipse.jdt.internal.compiler.ast.Expression,org.eclipse.jdt.internal.compiler.ast.Expression,org.eclipse.jdt.internal.compiler.ast.Expression)>($r8, $r7, $r6);

        $r9[$i11] = $r2;

        return;
    }

    protected void consumeConstructorBlockStatements()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void concatNodeLists()>();

        return;
    }

    protected void consumeConstructorBody()
    {
        int[] $r1;
        int $i0, $i1, $i2;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] nestedMethod>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int nestedType>;

        $i1 = $r1[$i0];

        $i2 = $i1 - 1;

        $r1[$i0] = $i2;

        return;
    }

    protected void consumeConstructorDeclaration()
    {
        org.eclipse.jdt.internal.compiler.ast.Statement[] $r8, $r10, r15;
        int[] $r1, $r5;
        boolean $z0, $z1, $z2, $z3, z4, $z5, $z6;
        org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration $r18;
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r7, $r13, $r17;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, i30, $i31, $i32, $i33, $i34, $i36;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r6, $r9, $r11, $r12, $r16;
        org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall $r2, $r3, $r4, r14;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i1;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i3 = $i2 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i3;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int realBlockPtr>;

        $i5 = $i4 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int realBlockPtr> = $i5;

        r14 = null;

        r15 = (org.eclipse.jdt.internal.compiler.ast.Statement[]) null;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] astLengthStack>;

        $i6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr>;

        $i7 = $i6 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr> = $i7;

        $i8 = $r1[$i6];

        if $i8 == 0 goto label02;

        $i18 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i19 = $i18 - $i8;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr> = $i19;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i20 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i21 = $i20 + 1;

        $r7 = $r6[$i21];

        $z3 = $r7 instanceof org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall;

        if $z3 == 0 goto label01;

        $r11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i24 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i27 = $i24 + 2;

        $i25 = $i8 - 1;

        $r10 = newarray (org.eclipse.jdt.internal.compiler.ast.Statement)[$i25];

        r15 = $r10;

        $i26 = $i8 - 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r11, $i27, $r10, 0, $i26);

        $r12 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i28 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i29 = $i28 + 1;

        $r13 = $r12[$i29];

        r14 = (org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall) $r13;

        goto label08;

     label01:
        $r9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i22 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i23 = $i22 + 1;

        $r8 = newarray (org.eclipse.jdt.internal.compiler.ast.Statement)[$i8];

        r15 = $r8;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, $i23, $r8, 0, $i8);

        r14 = staticinvoke <org.eclipse.jdt.internal.compiler.ast.SuperReference: org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall implicitSuperConstructorCall()>();

        goto label08;

     label02:
        z4 = 0;

        $z0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean diet>;

        if $z0 == 0 goto label06;

        i30 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int nestedType>;

        goto label05;

     label03:
        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] variablesCounter>;

        $i17 = $r5[i30];

        if $i17 <= 0 goto label04;

        z4 = 1;

        goto label06;

     label04:
        $i36 = (int) -1;

        i30 = i30 + $i36;

     label05:
        if i30 > 0 goto label03;

     label06:
        $z5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean diet>;

        if $z5 == 0 goto label07;

        if z4 == 0 goto label08;

     label07:
        r14 = staticinvoke <org.eclipse.jdt.internal.compiler.ast.SuperReference: org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall implicitSuperConstructorCall()>();

     label08:
        $r16 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i31 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $r17 = $r16[$i31];

        $r18 = (org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration) $r17;

        $r18.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall constructorCall> = r14;

        $r18.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: org.eclipse.jdt.internal.compiler.ast.Statement[] statements> = r15;

        if r14 == null goto label09;

        $r2 = $r18.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall constructorCall>;

        $i14 = $r2.<org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall: int sourceEnd>;

        if $i14 != 0 goto label09;

        $r3 = $r18.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall constructorCall>;

        $i15 = $r18.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: int sourceEnd>;

        $r3.<org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall: int sourceEnd> = $i15;

        $r4 = $r18.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall constructorCall>;

        $i16 = $r18.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: int sourceStart>;

        $r4.<org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall: int sourceStart> = $i16;

     label09:
        $z6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean diet>;

        if $z6 == 0 goto label10;

        $i13 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int dietInt>;

        if $i13 == 0 goto label12;

     label10:
        if r15 != null goto label12;

        if r14 == null goto label11;

        $z2 = virtualinvoke r14.<org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall: boolean isImplicitSuper()>();

        if $z2 == 0 goto label12;

     label11:
        $i10 = $r18.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: int bodyStart>;

        $i9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endPosition>;

        $z1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean containsComment(int,int)>($i10, $i9);

        if $z1 != 0 goto label12;

        $i11 = $r18.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: int bits>;

        $i12 = $i11 | 8;

        $r18.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: int bits> = $i12;

     label12:
        $i32 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endPosition>;

        $r18.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: int bodyEnd> = $i32;

        $i33 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        $i34 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int flushCommentsDefinedPriorTo(int)>($i33);

        $r18.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: int declarationSourceEnd> = $i34;

        return;
    }

    protected void consumeConstructorHeader()
    {
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r2, $r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r1;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r5, $r6, $r13;
        org.eclipse.jdt.internal.compiler.parser.RecoveredElement $r4, $r7, $r9, $r10, $r11, $r12;
        org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration r3;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $r2 = $r1[$i0];

        r3 = (org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration) $r2;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int currentToken>;

        if $i1 != 69 goto label1;

        $r13 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i9 = $r13.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        r3.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: int bodyStart> = $i9;

     label1:
        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r4 == null goto label3;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int currentToken>;

        if $i2 != 27 goto label2;

        $i3 = r3.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: int modifiers>;

        $i4 = $i3 | 16777216;

        r3.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: int modifiers> = $i4;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i5 = $r5.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        $i6 = $i5 - 1;

        r3.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: int declarationSourceEnd> = $i6;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i7 = $r6.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        $i8 = $i7 - 1;

        r3.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: int bodyEnd> = $i8;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $r8 = virtualinvoke $r7.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.ast.ASTNode parseTree()>();

        if $r8 != r3 goto label2;

        $r9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $r10 = $r9.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.parser.RecoveredElement parent>;

        if $r10 == null goto label2;

        $r11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $r12 = $r11.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.parser.RecoveredElement parent>;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement> = $r12;

     label2:
        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean restartRecovery> = 1;

     label3:
        return;
    }

    protected void consumeConstructorHeaderName()
    {
        org.eclipse.jdt.internal.compiler.ast.Javadoc $r11;
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r16;
        char[][] $r5;
        int[] $r8, $r9, $r10;
        boolean $z0;
        org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration $r19;
        org.eclipse.jdt.internal.compiler.CompilationResult $r4;
        org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration $r3;
        long $l14, $l26;
        org.eclipse.jdt.internal.compiler.ast.Annotation[] $r17;
        long[] $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i27, $i29;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r18;
        org.eclipse.jdt.internal.compiler.parser.RecoveredElement $r1, $r12, $r13, $r14, $r15;
        char[] $r6;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r1 == null goto label1;

        $i25 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastIgnoredToken>;

        if $i25 != 43 goto label1;

        $r18 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i27 = $r18.<org.eclipse.jdt.internal.compiler.parser.Scanner: int startPosition>;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastCheckPoint> = $i27;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean restartRecovery> = 1;

        return;

     label1:
        $r19 = new org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit>;

        $r4 = $r3.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: org.eclipse.jdt.internal.compiler.CompilationResult compilationResult>;

        specialinvoke $r19.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: void <init>(org.eclipse.jdt.internal.compiler.CompilationResult)>($r4);

        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: char[][] identifierStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $r6 = $r5[$i0];

        $r19.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: char[] selector> = $r6;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: long[] identifierPositionStack>;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i2 = $i1 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr> = $i2;

        $l26 = $r7[$i1];

        $i3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr>;

        $i4 = $i3 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr> = $i4;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i6 = $i5 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i6;

        $i7 = $r8[$i5];

        $r19.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: int declarationSourceStart> = $i7;

        $r9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i9 = $i8 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i9;

        $i10 = $r9[$i8];

        $r19.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: int modifiers> = $i10;

        $r10 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] expressionLengthStack>;

        $i11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        $i12 = $i11 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr> = $i12;

        $i13 = $r10[$i11];

        if $i13 == 0 goto label2;

        $r16 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i22 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i23 = $i22 - $i13;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr> = $i23;

        $i24 = $i23 + 1;

        $r17 = newarray (org.eclipse.jdt.internal.compiler.ast.Annotation)[$i13];

        $r19.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: org.eclipse.jdt.internal.compiler.ast.Annotation[] annotations> = $r17;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r16, $i24, $r17, 0, $i13);

     label2:
        $r11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc>;

        $r19.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc> = $r11;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc> = null;

        $l14 = $l26 >>> 32;

        $i15 = (int) $l14;

        $r19.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: int sourceStart> = $i15;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnAstStack(org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r19);

        $i16 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lParenPos>;

        $r19.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: int sourceEnd> = $i16;

        $i17 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lParenPos>;

        $i18 = $i17 + 1;

        $r19.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: int bodyStart> = $i18;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int listLength> = 0;

        $r12 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r12 == null goto label5;

        $i19 = $r19.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: int bodyStart>;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastCheckPoint> = $i19;

        $r13 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $z0 = $r13 instanceof org.eclipse.jdt.internal.compiler.parser.RecoveredType;

        if $z0 == 0 goto label3;

        $i21 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastIgnoredToken>;

        if $i21 != 3 goto label4;

     label3:
        $i20 = $r19.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: int modifiers>;

        if $i20 == 0 goto label5;

     label4:
        $r14 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $r15 = virtualinvoke $r14.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,int)>($r19, 0);

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement> = $r15;

        $i29 = (int) -1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastIgnoredToken> = $i29;

     label5:
        return;
    }

    protected void consumeConstructorHeaderNameWithTypeParameters()
    {
        org.eclipse.jdt.internal.compiler.ast.Javadoc $r14;
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r19;
        char[][] $r5;
        int[] $r8, $r11, $r12, $r13;
        boolean $z0;
        org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration $r22;
        org.eclipse.jdt.internal.compiler.CompilationResult $r4;
        org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration $r3;
        long $l20, $l32;
        org.eclipse.jdt.internal.compiler.ast.Annotation[] $r20;
        long[] $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i33, $i34, $i36;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r10;
        org.eclipse.jdt.internal.compiler.ast.TypeParameter[] $r9;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r21;
        org.eclipse.jdt.internal.compiler.parser.RecoveredElement $r1, $r15, $r16, $r17, $r18;
        char[] $r6;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r1 == null goto label1;

        $i31 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastIgnoredToken>;

        if $i31 != 43 goto label1;

        $r21 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i34 = $r21.<org.eclipse.jdt.internal.compiler.parser.Scanner: int startPosition>;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastCheckPoint> = $i34;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean restartRecovery> = 1;

        return;

     label1:
        $r22 = new org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit>;

        $r4 = $r3.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: org.eclipse.jdt.internal.compiler.CompilationResult compilationResult>;

        specialinvoke $r22.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: void <init>(org.eclipse.jdt.internal.compiler.CompilationResult)>($r4);

        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: char[][] identifierStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $r6 = $r5[$i0];

        $r22.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: char[] selector> = $r6;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: long[] identifierPositionStack>;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i2 = $i1 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr> = $i2;

        $l32 = $r7[$i1];

        $i3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr>;

        $i4 = $i3 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr> = $i4;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] genericsLengthStack>;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsLengthPtr>;

        $i6 = $i5 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsLengthPtr> = $i6;

        $i33 = $r8[$i5];

        $i7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr>;

        $i8 = $i7 - $i33;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr> = $i8;

        $r10 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] genericsStack>;

        $i9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr>;

        $i10 = $i9 + 1;

        $r9 = newarray (org.eclipse.jdt.internal.compiler.ast.TypeParameter)[$i33];

        $r22.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeParameter[] typeParameters> = $r9;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r10, $i10, $r9, 0, $i33);

        $r11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i12 = $i11 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i12;

        $i13 = $r11[$i11];

        $r22.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: int declarationSourceStart> = $i13;

        $r12 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i14 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i15 = $i14 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i15;

        $i16 = $r12[$i14];

        $r22.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: int modifiers> = $i16;

        $r13 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] expressionLengthStack>;

        $i17 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        $i18 = $i17 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr> = $i18;

        $i19 = $r13[$i17];

        if $i19 == 0 goto label2;

        $r19 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i28 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i29 = $i28 - $i19;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr> = $i29;

        $i30 = $i29 + 1;

        $r20 = newarray (org.eclipse.jdt.internal.compiler.ast.Annotation)[$i19];

        $r22.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: org.eclipse.jdt.internal.compiler.ast.Annotation[] annotations> = $r20;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r19, $i30, $r20, 0, $i19);

     label2:
        $r14 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc>;

        $r22.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc> = $r14;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc> = null;

        $l20 = $l32 >>> 32;

        $i21 = (int) $l20;

        $r22.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: int sourceStart> = $i21;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnAstStack(org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r22);

        $i22 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lParenPos>;

        $r22.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: int sourceEnd> = $i22;

        $i23 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lParenPos>;

        $i24 = $i23 + 1;

        $r22.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: int bodyStart> = $i24;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int listLength> = 0;

        $r15 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r15 == null goto label5;

        $i25 = $r22.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: int bodyStart>;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastCheckPoint> = $i25;

        $r16 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $z0 = $r16 instanceof org.eclipse.jdt.internal.compiler.parser.RecoveredType;

        if $z0 == 0 goto label3;

        $i27 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastIgnoredToken>;

        if $i27 != 3 goto label4;

     label3:
        $i26 = $r22.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: int modifiers>;

        if $i26 == 0 goto label5;

     label4:
        $r17 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $r18 = virtualinvoke $r17.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,int)>($r22, 0);

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement> = $r18;

        $i36 = (int) -1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastIgnoredToken> = $i36;

     label5:
        return;
    }

    protected void consumeDefaultLabel()
    {
        org.eclipse.jdt.internal.compiler.ast.CaseStatement $r1;
        int[] $r2, $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = new org.eclipse.jdt.internal.compiler.ast.CaseStatement;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i1;

        $i4 = $r2[$i0];

        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i3 = $i2 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i3;

        $i5 = $r3[$i2];

        specialinvoke $r1.<org.eclipse.jdt.internal.compiler.ast.CaseStatement: void <init>(org.eclipse.jdt.internal.compiler.ast.Expression,int,int)>(null, $i4, $i5);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnAstStack(org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r1);

        return;
    }

    protected void consumeCreateInitializer()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.Initializer $r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = new org.eclipse.jdt.internal.compiler.ast.Initializer;

        specialinvoke $r1.<org.eclipse.jdt.internal.compiler.ast.Initializer: void <init>(org.eclipse.jdt.internal.compiler.ast.Block,int)>(null, 0);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnAstStack(org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r1);

        return;
    }

    protected void consumeDefaultModifiers()
    {
        org.eclipse.jdt.internal.compiler.parser.Scanner $r1;
        int $i0, $i1, $i2;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void checkComment()>();

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int modifiers>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnIntStack(int)>($i0);

        $i1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int modifiersSourceStart>;

        if $i1 < 0 goto label1;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int modifiersSourceStart>;

        goto label2;

     label1:
        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i2 = $r1.<org.eclipse.jdt.internal.compiler.parser.Scanner: int startPosition>;

     label2:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnIntStack(int)>($i2);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void resetModifiers()>();

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnExpressionStackLengthStack(int)>(0);

        return;
    }

    protected void consumeDiet()
    {
        int $i0;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void checkComment()>();

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int modifiersSourceStart>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnIntStack(int)>($i0);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void resetModifiers()>();

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void jumpOverMethodBody()>();

        return;
    }

    protected void consumeDims()
    {
        int $i0;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int dimensions>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnIntStack(int)>($i0);

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int dimensions> = 0;

        return;
    }

    protected void consumeDimWithOrWithOutExpr()
    {
        int $i0, $i1, $i2;
        org.eclipse.jdt.internal.compiler.parser.RecoveredElement $r1, $r2;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnExpressionStack(org.eclipse.jdt.internal.compiler.ast.Expression)>(null);

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r1 == null goto label1;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int currentToken>;

        if $i0 != 69 goto label1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean ignoreNextOpeningBrace> = 1;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $i1 = $r2.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: int bracketBalance>;

        $i2 = $i1 + 1;

        $r2.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: int bracketBalance> = $i2;

     label1:
        return;
    }

    protected void consumeDimWithOrWithOutExprs()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void concatExpressionLists()>();

        return;
    }

    protected void consumeEmptyAnnotationTypeMemberDeclarationsopt()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnAstLengthStack(int)>(0);

        return;
    }

    protected void consumeEmptyArgumentListopt()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnExpressionStackLengthStack(int)>(0);

        return;
    }

    protected void consumeEmptyArguments()
    {
        int $i0, $i1;
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r2;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r1;
        org.eclipse.jdt.internal.compiler.ast.FieldDeclaration r3;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $r2 = $r1[$i0];

        r3 = (org.eclipse.jdt.internal.compiler.ast.FieldDeclaration) $r2;

        $i1 = r3.<org.eclipse.jdt.internal.compiler.ast.FieldDeclaration: int sourceEnd>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnIntStack(int)>($i1);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnExpressionStackLengthStack(int)>(0);

        return;
    }

    protected void consumeEmptyArrayInitializer()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void arrayInitializer(int)>(0);

        return;
    }

    protected void consumeEmptyArrayInitializeropt()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnExpressionStackLengthStack(int)>(0);

        return;
    }

    protected void consumeEmptyBlockStatementsopt()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnAstLengthStack(int)>(0);

        return;
    }

    protected void consumeEmptyCatchesopt()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnAstLengthStack(int)>(0);

        return;
    }

    protected void consumeEmptyClassBodyDeclarationsopt()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnAstLengthStack(int)>(0);

        return;
    }

    protected void consumeEmptyMethodHeaderDefaultValue()
    {
        int $i0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r2;
        org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration r3;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r1;
        boolean $z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $r2 = $r1[$i0];

        r3 = (org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration) $r2;

        $z0 = virtualinvoke r3.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: boolean isAnnotationMethod()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnExpressionStackLengthStack(int)>(0);

     label1:
        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean recordStringLiterals> = 1;

        return;
    }

    protected void consumeEmptyDimsopt()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnIntStack(int)>(0);

        return;
    }

    protected void consumeEmptyEnumDeclarations()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnAstLengthStack(int)>(0);

        return;
    }

    protected void consumeEmptyExpression()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnExpressionStackLengthStack(int)>(0);

        return;
    }

    protected void consumeEmptyForInitopt()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnAstLengthStack(int)>(0);

        return;
    }

    protected void consumeEmptyForUpdateopt()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnExpressionStackLengthStack(int)>(0);

        return;
    }

    protected void consumeEmptyInterfaceMemberDeclarationsopt()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnAstLengthStack(int)>(0);

        return;
    }

    protected void consumeEmptyInternalCompilationUnit()
    {
        org.eclipse.jdt.internal.compiler.ast.Javadoc $r11;
        org.eclipse.jdt.internal.compiler.CompilationResult $r6;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] $r2, $r9;
        char[] $r7;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration $r4;
        org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration $r1, $r3, $r5, $r8, $r10;
        boolean $z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit>;

        $z0 = virtualinvoke $r1.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: boolean isPackageInfo()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit>;

        $r2 = newarray (org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)[1];

        $r3.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] types> = $r2;

        $r4 = new org.eclipse.jdt.internal.compiler.ast.TypeDeclaration;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit>;

        $r6 = $r5.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: org.eclipse.jdt.internal.compiler.CompilationResult compilationResult>;

        specialinvoke $r4.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: void <init>(org.eclipse.jdt.internal.compiler.CompilationResult)>($r6);

        $r7 = <org.eclipse.jdt.internal.compiler.lookup.TypeConstants: char[] PACKAGE_INFO_NAME>;

        $r4.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: char[] name> = $r7;

        $r4.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int modifiers> = 512;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit>;

        $r9 = $r8.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] types>;

        $r9[0] = $r4;

        $r10 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit>;

        $r11 = $r10.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc>;

        $r4.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc> = $r11;

     label1:
        return;
    }

    protected void consumeEmptyMemberValuePairsopt()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnAstLengthStack(int)>(0);

        return;
    }

    protected void consumeEmptyMemberValueArrayInitializer()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void arrayInitializer(int)>(0);

        return;
    }

    protected void consumeEmptyStatement()
    {
        org.eclipse.jdt.internal.compiler.ast.EmptyStatement $r6, $r7, $r8;
        int $i0, $i2, $i3, $i6, $i7, $i9, $i10, $i11, $i13, $i14, $i15, $i17, $i18, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i28, $i29, $i30, i31, $i32, $i33, $i34, $i36, $i37, $i38, $i39;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r1;
        char $c1, $c4, $c5, $c8, $c12, $c16, $c19, $c27;
        char[] r2;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        r2 = $r1.<org.eclipse.jdt.internal.compiler.parser.Scanner: char[] source>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        $c1 = r2[$i0];

        $i34 = (int) $c1;

        if $i34 != 59 goto label1;

        $r6 = new org.eclipse.jdt.internal.compiler.ast.EmptyStatement;

        $i30 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        $i29 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        specialinvoke $r6.<org.eclipse.jdt.internal.compiler.ast.EmptyStatement: void <init>(int,int)>($i30, $i29);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnAstStack(org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r6);

        goto label5;

     label1:
        $i2 = lengthof r2;

        if $i2 <= 5 goto label4;

        $i3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        i31 = $i3 - 4;

        goto label3;

     label2:
        $i36 = (int) -1;

        i31 = i31 + $i36;

     label3:
        $c4 = r2[i31];

        $i37 = (int) $c4;

        if $i37 == 117 goto label2;

        $c5 = r2[i31];

        $i38 = (int) $c5;

        if $i38 != 92 goto label4;

        $i6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        $i7 = $i6 - 3;

        $c8 = r2[$i7];

        $i9 = staticinvoke <org.eclipse.jdt.internal.compiler.parser.ScannerHelper: int getNumericValue(char)>($c8);

        if $i9 > 15 goto label4;

        if $i9 < 0 goto label4;

        $i10 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        $i11 = $i10 - 2;

        $c12 = r2[$i11];

        $i13 = staticinvoke <org.eclipse.jdt.internal.compiler.parser.ScannerHelper: int getNumericValue(char)>($c12);

        if $i13 > 15 goto label4;

        if $i13 < 0 goto label4;

        $i14 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        $i15 = $i14 - 1;

        $c16 = r2[$i15];

        $i17 = staticinvoke <org.eclipse.jdt.internal.compiler.parser.ScannerHelper: int getNumericValue(char)>($c16);

        if $i17 > 15 goto label4;

        if $i17 < 0 goto label4;

        $i18 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        $c19 = r2[$i18];

        $i20 = staticinvoke <org.eclipse.jdt.internal.compiler.parser.ScannerHelper: int getNumericValue(char)>($c19);

        if $i20 > 15 goto label4;

        if $i20 < 0 goto label4;

        $i21 = $i9 * 16;

        $i22 = $i21 + $i13;

        $i23 = $i22 * 16;

        $i24 = $i23 + $i17;

        $i25 = $i24 * 16;

        $i26 = $i25 + $i20;

        $c27 = (char) $i26;

        $i39 = (int) $c27;

        if $i39 != 59 goto label4;

        $r7 = new org.eclipse.jdt.internal.compiler.ast.EmptyStatement;

        $i28 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        specialinvoke $r7.<org.eclipse.jdt.internal.compiler.ast.EmptyStatement: void <init>(int,int)>(i31, $i28);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnAstStack(org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r7);

        return;

     label4:
        $r8 = new org.eclipse.jdt.internal.compiler.ast.EmptyStatement;

        $i32 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        $i33 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        specialinvoke $r8.<org.eclipse.jdt.internal.compiler.ast.EmptyStatement: void <init>(int,int)>($i32, $i33);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnAstStack(org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r8);

     label5:
        return;
    }

    protected void consumeEmptySwitchBlock()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnAstLengthStack(int)>(0);

        return;
    }

    protected void consumeEmptyTypeDeclaration()
    {
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r1;
        int $i0, $i1, $i2, $i3;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        boolean $z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnAstLengthStack(int)>(0);

        $z0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean statementRecoveryActivated>;

        if $z0 != 0 goto label1;

        $r1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        $i1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endPosition>;

        $i3 = $i1 + 1;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        virtualinvoke $r1.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void superfluousSemicolon(int,int)>($i3, $i2);

     label1:
        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int flushCommentsDefinedPriorTo(int)>($i0);

        return;
    }

    protected void consumeEnhancedForStatementHeaderInit(boolean)
    {
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r11;
        char[][] $r1;
        int[] $r5, $r6, $r8, $r10, $r13, $r14;
        boolean z0;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r7;
        org.eclipse.jdt.internal.compiler.ast.ForeachStatement $r9;
        long l2, $l3;
        org.eclipse.jdt.internal.compiler.ast.Annotation[] $r12;
        long[] $r3;
        int $i0, $i1, $i4, $i5, $i6, $i7, $i8, i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, i35, i36;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.LocalDeclaration $r4;
        char[] r2;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        z0 := @parameter0: boolean;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: char[][] identifierStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        r2 = $r1[$i0];

        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: long[] identifierPositionStack>;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        l2 = $r3[$i1];

        $l3 = l2 >>> 32;

        $i5 = (int) $l3;

        $i4 = (int) l2;

        $r4 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.LocalDeclaration createLocalDeclaration(char[],int,int)>(r2, $i5, $i4);

        $i6 = $r4.<org.eclipse.jdt.internal.compiler.ast.LocalDeclaration: int declarationEnd>;

        $r4.<org.eclipse.jdt.internal.compiler.ast.LocalDeclaration: int declarationSourceEnd> = $i6;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i8 = $i7 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i8;

        i9 = $r5[$i7];

        $i10 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i11 = $i10 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr> = $i11;

        $i12 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr>;

        $i13 = $i12 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr> = $i13;

        i35 = 0;

        i36 = 0;

        if z0 == 0 goto label1;

        $r13 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i31 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i32 = $i31 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i32;

        i35 = $r13[$i31];

        $r14 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i33 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i34 = $i33 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i34;

        i36 = $r14[$i33];

        goto label2;

     label1:
        $i14 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i15 = $i14 - 2;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i15;

     label2:
        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i16 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i17 = $i16 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i17;

        $i18 = $r6[$i16];

        $i19 = $i18 + i9;

        $r7 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeReference getTypeReference(int)>($i19);

        $r8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] expressionLengthStack>;

        $i20 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        $i21 = $i20 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr> = $i21;

        $i22 = $r8[$i20];

        if $i22 == 0 goto label3;

        $r11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i28 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i29 = $i28 - $i22;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr> = $i29;

        $i30 = $i29 + 1;

        $r12 = newarray (org.eclipse.jdt.internal.compiler.ast.Annotation)[$i22];

        $r4.<org.eclipse.jdt.internal.compiler.ast.LocalDeclaration: org.eclipse.jdt.internal.compiler.ast.Annotation[] annotations> = $r12;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r11, $i30, $r12, 0, $i22);

     label3:
        if z0 == 0 goto label4;

        $r4.<org.eclipse.jdt.internal.compiler.ast.LocalDeclaration: int declarationSourceStart> = i35;

        $r4.<org.eclipse.jdt.internal.compiler.ast.LocalDeclaration: int modifiers> = i36;

        goto label5;

     label4:
        $i23 = $r7.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int sourceStart>;

        $r4.<org.eclipse.jdt.internal.compiler.ast.LocalDeclaration: int declarationSourceStart> = $i23;

     label5:
        $r4.<org.eclipse.jdt.internal.compiler.ast.LocalDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeReference type> = $r7;

        $r9 = new org.eclipse.jdt.internal.compiler.ast.ForeachStatement;

        $r10 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i24 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i25 = $i24 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i25;

        $i26 = $r10[$i24];

        specialinvoke $r9.<org.eclipse.jdt.internal.compiler.ast.ForeachStatement: void <init>(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,int)>($r4, $i26);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnAstStack(org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r9);

        $i27 = $r4.<org.eclipse.jdt.internal.compiler.ast.LocalDeclaration: int declarationSourceEnd>;

        $r9.<org.eclipse.jdt.internal.compiler.ast.ForeachStatement: int sourceEnd> = $i27;

        return;
    }

    protected void consumeEnhancedForStatementHeader()
    {
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r8;
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r4;
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r2;
        long $l6;
        org.eclipse.jdt.internal.compiler.ast.Expression r5;
        byte $b7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i8, $i9, $i10;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r1;
        boolean $z0;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r7;
        org.eclipse.jdt.internal.compiler.ast.LocalDeclaration $r9;
        org.eclipse.jdt.internal.compiler.ast.ForeachStatement r3;
        org.eclipse.jdt.internal.compiler.impl.CompilerOptions $r6;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $r2 = $r1[$i0];

        r3 = (org.eclipse.jdt.internal.compiler.ast.ForeachStatement) $r2;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        $i2 = $i1 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr> = $i2;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i4 = $i3 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr> = $i4;

        r5 = $r4[$i3];

        r3.<org.eclipse.jdt.internal.compiler.ast.ForeachStatement: org.eclipse.jdt.internal.compiler.ast.Expression collection> = r5;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int rParenPos>;

        r3.<org.eclipse.jdt.internal.compiler.ast.ForeachStatement: int sourceEnd> = $i5;

        $z0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean statementRecoveryActivated>;

        if $z0 != 0 goto label1;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.CompilerOptions options>;

        $l6 = $r6.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long sourceLevel>;

        $b7 = $l6 cmp 3211264L;

        $i10 = (int) $b7;

        if $i10 >= 0 goto label1;

        $i9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastErrorEndPositionBeforeRecovery>;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i8 = $r7.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        if $i9 >= $i8 goto label1;

        $r8 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        $r9 = r3.<org.eclipse.jdt.internal.compiler.ast.ForeachStatement: org.eclipse.jdt.internal.compiler.ast.LocalDeclaration elementVariable>;

        virtualinvoke $r8.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void invalidUsageOfForeachStatements(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,org.eclipse.jdt.internal.compiler.ast.Expression)>($r9, r5);

     label1:
        return;
    }

    protected void consumeEnhancedForStatement()
    {
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r2, $r5;
        org.eclipse.jdt.internal.compiler.ast.Statement r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r1, $r4;
        boolean $z0;
        org.eclipse.jdt.internal.compiler.ast.ForeachStatement r6;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr> = $i1;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i3 = $i2 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr> = $i3;

        $r2 = $r1[$i2];

        r3 = (org.eclipse.jdt.internal.compiler.ast.Statement) $r2;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $r5 = $r4[$i4];

        r6 = (org.eclipse.jdt.internal.compiler.ast.ForeachStatement) $r5;

        r6.<org.eclipse.jdt.internal.compiler.ast.ForeachStatement: org.eclipse.jdt.internal.compiler.ast.Statement action> = r3;

        $z0 = r3 instanceof org.eclipse.jdt.internal.compiler.ast.EmptyStatement;

        if $z0 == 0 goto label1;

        $i6 = r3.<org.eclipse.jdt.internal.compiler.ast.Statement: int bits>;

        $i7 = $i6 | 1;

        r3.<org.eclipse.jdt.internal.compiler.ast.Statement: int bits> = $i7;

     label1:
        $i5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        r6.<org.eclipse.jdt.internal.compiler.ast.ForeachStatement: int sourceEnd> = $i5;

        return;
    }

    protected void consumeEnterAnonymousClassBody()
    {
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r17, $r18;
        int[] $r7, $r9;
        boolean $z0;
        org.eclipse.jdt.internal.compiler.CompilationResult $r4;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r1, $r8;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration $r19;
        org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression $r20;
        org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i20, $i22;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r10, $r11;
        org.eclipse.jdt.internal.compiler.parser.RecoveredElement $r12, $r13, $r14, $r15, $r16;
        char[] $r5;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeReference getTypeReference(int)>(0);

        $r19 = new org.eclipse.jdt.internal.compiler.ast.TypeDeclaration;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit>;

        $r4 = $r3.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: org.eclipse.jdt.internal.compiler.CompilationResult compilationResult>;

        specialinvoke $r19.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: void <init>(org.eclipse.jdt.internal.compiler.CompilationResult)>($r4);

        $r5 = <org.eclipse.jdt.core.compiler.CharOperation: char[] NO_CHAR>;

        $r19.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: char[] name> = $r5;

        $i0 = $r19.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits>;

        $i1 = $i0 | 768;

        $r19.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits> = $i1;

        $r20 = new org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression;

        specialinvoke $r20.<org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression: void <init>(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)>($r19);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void markEnclosingMemberWithLocalType()>();

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnAstStack(org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r19);

        $i2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int rParenPos>;

        $r20.<org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression: int sourceEnd> = $i2;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] expressionLengthStack>;

        $i3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        $i4 = $i3 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr> = $i4;

        $i5 = $r7[$i3];

        if $i5 == 0 goto label1;

        $i15 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i16 = $i15 - $i5;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr> = $i16;

        $r18 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i17 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i18 = $i17 + 1;

        $r17 = newarray (org.eclipse.jdt.internal.compiler.ast.Expression)[$i5];

        $r20.<org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression: org.eclipse.jdt.internal.compiler.ast.Expression[] arguments> = $r17;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r18, $i18, $r17, 0, $i5);

     label1:
        $r20.<org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression: org.eclipse.jdt.internal.compiler.ast.TypeReference type> = $r1;

        $i6 = $r20.<org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression: int sourceEnd>;

        $r19.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int sourceEnd> = $i6;

        $r8 = $r20.<org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression: org.eclipse.jdt.internal.compiler.ast.TypeReference type>;

        $i7 = $r8.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int sourceStart>;

        $r19.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int declarationSourceStart> = $i7;

        $r19.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int sourceStart> = $i7;

        $r9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i9 = $i8 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i9;

        $i10 = $r9[$i8];

        $r20.<org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression: int sourceStart> = $i10;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnExpressionStack(org.eclipse.jdt.internal.compiler.ast.Expression)>($r20);

        $r10 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i11 = $r10.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        $r19.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bodyStart> = $i11;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int listLength> = 0;

        $r11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i20 = (int) -1;

        $r11.<org.eclipse.jdt.internal.compiler.parser.Scanner: int commentPtr> = $i20;

        $r12 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r12 == null goto label4;

        $i12 = $r19.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bodyStart>;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastCheckPoint> = $i12;

        $r13 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $r14 = virtualinvoke $r13.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,int)>($r19, 0);

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement> = $r14;

        $r15 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $z0 = $r15 instanceof org.eclipse.jdt.internal.compiler.parser.RecoveredAnnotation;

        if $z0 != 0 goto label2;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int currentToken> = 0;

        goto label3;

     label2:
        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean ignoreNextOpeningBrace> = 1;

        $r16 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $i13 = $r16.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: int bracketBalance>;

        $i14 = $i13 + 1;

        $r16.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: int bracketBalance> = $i14;

     label3:
        $i22 = (int) -1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastIgnoredToken> = $i22;

     label4:
        return;
    }

    protected void consumeEnterCompilationUnit()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        return;
    }

    protected void consumeEnterMemberValue()
    {
        org.eclipse.jdt.internal.compiler.parser.RecoveredAnnotation r4;
        org.eclipse.jdt.internal.compiler.parser.RecoveredElement $r1, $r2, $r3;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        boolean $z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r1 == null goto label1;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $z0 = $r2 instanceof org.eclipse.jdt.internal.compiler.parser.RecoveredAnnotation;

        if $z0 == 0 goto label1;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        r4 = (org.eclipse.jdt.internal.compiler.parser.RecoveredAnnotation) $r3;

        r4.<org.eclipse.jdt.internal.compiler.parser.RecoveredAnnotation: boolean hasPendingMemberValueName> = 1;

     label1:
        return;
    }

    protected void consumeEnterMemberValueArrayInitializer()
    {
        int $i0, $i1;
        org.eclipse.jdt.internal.compiler.parser.RecoveredElement $r1, $r2;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r1 == null goto label1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean ignoreNextOpeningBrace> = 1;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $i0 = $r2.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: int bracketBalance>;

        $i1 = $i0 + 1;

        $r2.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: int bracketBalance> = $i1;

     label1:
        return;
    }

    protected void consumeEnterVariable()
    {
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r11, $r23, $r32, $r44, r48;
        long l2, $l8, $l31, $l36, $l73;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        int[] $r4, $r5, $r6, $r12, $r26, $r29, $r31, $r33, $r34, $r35, $r40, $r41, $r42, $r43;
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r8, $r10, $r16, $r20;
        org.eclipse.jdt.internal.compiler.ast.Annotation[] $r30, $r38, $r46, r50;
        long[] $r3;
        int $i0, $i1, $i3, $i4, i5, $i6, $i7, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i32, $i33, $i34, $i35, $i37, $i38, $i39, i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i74, $i75, $i76, i77, i78, $i80, $i82;
        org.eclipse.jdt.internal.compiler.ast.Javadoc $r36;
        char[][] $r1;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r7, $r9, $r15, $r19;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r24, $r25, $r27, $r28;
        char[] r2;
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r37, $r45;
        org.eclipse.jdt.internal.compiler.ast.FieldDeclaration $r39, r52;
        boolean z0, $z1, $z3, $z4;
        org.eclipse.jdt.internal.compiler.parser.RecoveredElement $r13, $r14, $r17, $r18, $r21, $r22;
        org.eclipse.jdt.internal.compiler.ast.LocalDeclaration r51;
        org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration r47, r49;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: char[][] identifierStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        r2 = $r1[$i0];

        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: long[] identifierPositionStack>;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        l2 = $r3[$i1];

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i4 = $i3 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i4;

        i5 = $r4[$i3];

        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] nestedMethod>;

        $i6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int nestedType>;

        $i7 = $r5[$i6];

        if $i7 == 0 goto label01;

        $z4 = 1;

        $z3 = 1;

        goto label02;

     label01:
        $z4 = 0;

        $z3 = 0;

     label02:
        z0 = $z3;

        if $z4 == 0 goto label03;

        $l73 = l2 >>> 32;

        $i75 = (int) $l73;

        $i74 = (int) l2;

        r47 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.LocalDeclaration createLocalDeclaration(char[],int,int)>(r2, $i75, $i74);

        goto label04;

     label03:
        $l8 = l2 >>> 32;

        $i10 = (int) $l8;

        $i9 = (int) l2;

        r47 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.FieldDeclaration createFieldDeclaration(char[],int,int)>(r2, $i10, $i9);

     label04:
        $i11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i12 = $i11 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr> = $i12;

        $i13 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr>;

        $i14 = $i13 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr> = $i14;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] variablesCounter>;

        $i15 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int nestedType>;

        $i76 = $r6[$i15];

        if $i76 != 0 goto label09;

        if z0 == 0 goto label07;

        $r40 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i56 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i57 = $i56 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i57;

        $i58 = $r40[$i56];

        r47.<org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration: int declarationSourceStart> = $i58;

        $r41 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i59 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i60 = $i59 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i60;

        $i61 = $r41[$i59];

        r47.<org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration: int modifiers> = $i61;

        $r42 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] expressionLengthStack>;

        $i62 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        $i63 = $i62 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr> = $i63;

        $i64 = $r42[$i62];

        if $i64 == 0 goto label05;

        $r45 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i70 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i71 = $i70 - $i64;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr> = $i71;

        $i72 = $i71 + 1;

        $r46 = newarray (org.eclipse.jdt.internal.compiler.ast.Annotation)[$i64];

        r47.<org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration: org.eclipse.jdt.internal.compiler.ast.Annotation[] annotations> = $r46;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r45, $i72, $r46, 0, $i64);

     label05:
        $r43 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i65 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i66 = $i65 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i66;

        $i67 = $r43[$i65];

        i77 = $i67;

        $r44 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeReference getTypeReference(int)>($i67);

        r48 = $r44;

        $i68 = r47.<org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration: int declarationSourceStart>;

        $i80 = (int) -1;

        if $i68 != $i80 goto label06;

        $i69 = $r44.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int sourceStart>;

        r47.<org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration: int declarationSourceStart> = $i69;

     label06:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnAstStack(org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r44);

        goto label10;

     label07:
        $r31 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i41 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i42 = $i41 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i42;

        $i43 = $r31[$i41];

        i77 = $i43;

        $r32 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeReference getTypeReference(int)>($i43);

        r48 = $r32;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnAstStack(org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r32);

        $r33 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i44 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i45 = $i44 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i45;

        $i46 = $r33[$i44];

        r47.<org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration: int declarationSourceStart> = $i46;

        $r34 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i47 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i48 = $i47 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i48;

        $i49 = $r34[$i47];

        r47.<org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration: int modifiers> = $i49;

        $r35 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] expressionLengthStack>;

        $i50 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        $i51 = $i50 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr> = $i51;

        $i52 = $r35[$i50];

        if $i52 == 0 goto label08;

        $r37 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i53 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i54 = $i53 - $i52;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr> = $i54;

        $i55 = $i54 + 1;

        $r38 = newarray (org.eclipse.jdt.internal.compiler.ast.Annotation)[$i52];

        r47.<org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration: org.eclipse.jdt.internal.compiler.ast.Annotation[] annotations> = $r38;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r37, $i55, $r38, 0, $i52);

     label08:
        $r39 = (org.eclipse.jdt.internal.compiler.ast.FieldDeclaration) r47;

        $r36 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc>;

        $r39.<org.eclipse.jdt.internal.compiler.ast.FieldDeclaration: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc> = $r36;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc> = null;

        goto label10;

     label09:
        $r7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i16 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i17 = $i16 - $i76;

        $r8 = $r7[$i17];

        r48 = (org.eclipse.jdt.internal.compiler.ast.TypeReference) $r8;

        i77 = virtualinvoke r48.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int dimensions()>();

        $r9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i18 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $r10 = $r9[$i18];

        r49 = (org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration) $r10;

        $i19 = r49.<org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration: int declarationSourceStart>;

        r47.<org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration: int declarationSourceStart> = $i19;

        $i20 = r49.<org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration: int modifiers>;

        r47.<org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration: int modifiers> = $i20;

        r50 = r49.<org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration: org.eclipse.jdt.internal.compiler.ast.Annotation[] annotations>;

        if r50 == null goto label10;

        i40 = lengthof r50;

        $r30 = newarray (org.eclipse.jdt.internal.compiler.ast.Annotation)[i40];

        r47.<org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration: org.eclipse.jdt.internal.compiler.ast.Annotation[] annotations> = $r30;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r50, 0, $r30, 0, i40);

     label10:
        if i5 != 0 goto label11;

        r47.<org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeReference type> = r48;

        goto label12;

     label11:
        i78 = i77 + i5;

        $r11 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeReference copyDims(org.eclipse.jdt.internal.compiler.ast.TypeReference,int)>(r48, i78);

        r47.<org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeReference type> = $r11;

     label12:
        $r12 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] variablesCounter>;

        $i21 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int nestedType>;

        $i22 = $r12[$i21];

        $i23 = $i22 + 1;

        $r12[$i21] = $i23;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnAstStack(org.eclipse.jdt.internal.compiler.ast.ASTNode)>(r47);

        $r13 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r13 == null goto label17;

        $r14 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $z1 = $r14 instanceof org.eclipse.jdt.internal.compiler.parser.RecoveredType;

        if $z1 != 0 goto label14;

        $i30 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int currentToken>;

        if $i30 == 3 goto label13;

        $r23 = r47.<org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeReference type>;

        $i34 = $r23.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int sourceStart>;

        $r24 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r26 = $r24.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] lineEnds>;

        $r25 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i33 = $r25.<org.eclipse.jdt.internal.compiler.parser.Scanner: int linePtr>;

        $i35 = staticinvoke <org.eclipse.jdt.internal.compiler.util.Util: int getLineNumber(int,int[],int,int)>($i34, $r26, 0, $i33);

        $l36 = l2 >>> 32;

        $i38 = (int) $l36;

        $r27 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r29 = $r27.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] lineEnds>;

        $r28 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i37 = $r28.<org.eclipse.jdt.internal.compiler.parser.Scanner: int linePtr>;

        $i39 = staticinvoke <org.eclipse.jdt.internal.compiler.util.Util: int getLineNumber(int,int[],int,int)>($i38, $r29, 0, $i37);

        if $i35 == $i39 goto label14;

     label13:
        $l31 = l2 >>> 32;

        $i32 = (int) $l31;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastCheckPoint> = $i32;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean restartRecovery> = 1;

        return;

     label14:
        if z0 == 0 goto label15;

        $r19 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i27 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $r20 = $r19[$i27];

        r51 = (org.eclipse.jdt.internal.compiler.ast.LocalDeclaration) $r20;

        $i28 = r51.<org.eclipse.jdt.internal.compiler.ast.LocalDeclaration: int sourceEnd>;

        $i29 = $i28 + 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastCheckPoint> = $i29;

        $r21 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $r22 = virtualinvoke $r21.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration,int)>(r51, 0);

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement> = $r22;

        goto label16;

     label15:
        $r15 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i24 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $r16 = $r15[$i24];

        r52 = (org.eclipse.jdt.internal.compiler.ast.FieldDeclaration) $r16;

        $i25 = r52.<org.eclipse.jdt.internal.compiler.ast.FieldDeclaration: int sourceEnd>;

        $i26 = $i25 + 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastCheckPoint> = $i26;

        $r17 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $r18 = virtualinvoke $r17.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,int)>(r52, 0);

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement> = $r18;

     label16:
        $i82 = (int) -1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastIgnoredToken> = $i82;

     label17:
        return;
    }

    protected void consumeEnumBodyNoConstants()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        return;
    }

    protected void consumeEnumBodyWithConstants()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void concatNodeLists()>();

        return;
    }

    protected void consumeEnumConstantHeaderName()
    {
        org.eclipse.jdt.internal.compiler.ast.Javadoc $r8;
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r11;
        char[][] $r3;
        int[] $r5, $r6, $r25;
        org.eclipse.jdt.internal.compiler.ast.FieldDeclaration $r4, $r22;
        boolean $z0, $z1, $z2;
        org.eclipse.jdt.internal.compiler.parser.RecoveredField $r21;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r23;
        org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration $r13, $r14;
        long $l2, $l27;
        org.eclipse.jdt.internal.compiler.ast.Annotation[] $r12;
        long[] $r2;
        int $i0, $i1, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i28, $i29, $i30, $i31, $i32;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r24;
        org.eclipse.jdt.internal.compiler.parser.RecoveredElement $r1, $r7, $r9, $r10, $r17, $r19, $r20;
        char[] $r15, $r16, $r18;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r1 == null goto label3;

        $r17 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $z1 = $r17 instanceof org.eclipse.jdt.internal.compiler.parser.RecoveredType;

        if $z1 != 0 goto label1;

        $r19 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $z2 = $r19 instanceof org.eclipse.jdt.internal.compiler.parser.RecoveredField;

        if $z2 == 0 goto label2;

        $r20 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $r21 = (org.eclipse.jdt.internal.compiler.parser.RecoveredField) $r20;

        $r22 = $r21.<org.eclipse.jdt.internal.compiler.parser.RecoveredField: org.eclipse.jdt.internal.compiler.ast.FieldDeclaration fieldDeclaration>;

        $r23 = $r22.<org.eclipse.jdt.internal.compiler.ast.FieldDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeReference type>;

        if $r23 != null goto label2;

     label1:
        $i26 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastIgnoredToken>;

        if $i26 != 3 goto label3;

     label2:
        $r24 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i29 = $r24.<org.eclipse.jdt.internal.compiler.parser.Scanner: int startPosition>;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastCheckPoint> = $i29;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean restartRecovery> = 1;

        return;

     label3:
        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: long[] identifierPositionStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $l27 = $r2[$i0];

        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: char[][] identifierStack>;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $r18 = $r3[$i1];

        $i28 = (int) $l27;

        $l2 = $l27 >>> 32;

        $i3 = (int) $l2;

        $r4 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.FieldDeclaration createFieldDeclaration(char[],int,int)>($r18, $i3, $i28);

        $i4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i5 = $i4 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr> = $i5;

        $i6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr>;

        $i7 = $i6 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr> = $i7;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i9 = $i8 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i9;

        $i10 = $r5[$i8];

        $r4.<org.eclipse.jdt.internal.compiler.ast.FieldDeclaration: int modifiersSourceStart> = $i10;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i12 = $i11 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i12;

        $i13 = $r6[$i11];

        $r4.<org.eclipse.jdt.internal.compiler.ast.FieldDeclaration: int modifiers> = $i13;

        $i14 = $r4.<org.eclipse.jdt.internal.compiler.ast.FieldDeclaration: int modifiersSourceStart>;

        $r4.<org.eclipse.jdt.internal.compiler.ast.FieldDeclaration: int declarationSourceStart> = $i14;

        $i15 = $r4.<org.eclipse.jdt.internal.compiler.ast.FieldDeclaration: int bits>;

        $i16 = $i15 & 1024;

        if $i16 != 0 goto label4;

        $i22 = $r4.<org.eclipse.jdt.internal.compiler.ast.FieldDeclaration: int bits>;

        $i23 = $i22 & 256;

        if $i23 != 0 goto label4;

        $r13 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit>;

        if $r13 == null goto label4;

        $r15 = $r4.<org.eclipse.jdt.internal.compiler.ast.FieldDeclaration: char[] name>;

        $r14 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit>;

        $r16 = virtualinvoke $r14.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: char[] getMainTypeName()>();

        $z0 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: boolean equals(char[],char[])>($r15, $r16);

        if $z0 != 0 goto label4;

        $i24 = $r4.<org.eclipse.jdt.internal.compiler.ast.FieldDeclaration: int bits>;

        $i25 = $i24 | 4096;

        $r4.<org.eclipse.jdt.internal.compiler.ast.FieldDeclaration: int bits> = $i25;

     label4:
        $r25 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] expressionLengthStack>;

        $i30 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        $i31 = $i30 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr> = $i31;

        $i32 = $r25[$i30];

        if $i32 == 0 goto label5;

        $r11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i19 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i20 = $i19 - $i32;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr> = $i20;

        $i21 = $i20 + 1;

        $r12 = newarray (org.eclipse.jdt.internal.compiler.ast.Annotation)[$i32];

        $r4.<org.eclipse.jdt.internal.compiler.ast.FieldDeclaration: org.eclipse.jdt.internal.compiler.ast.Annotation[] annotations> = $r12;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r11, $i21, $r12, 0, $i32);

     label5:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnAstStack(org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r4);

        $r7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r7 == null goto label6;

        $i17 = $r4.<org.eclipse.jdt.internal.compiler.ast.FieldDeclaration: int sourceEnd>;

        $i18 = $i17 + 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastCheckPoint> = $i18;

        $r9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $r10 = virtualinvoke $r9.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,int)>($r4, 0);

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement> = $r10;

     label6:
        $r8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc>;

        $r4.<org.eclipse.jdt.internal.compiler.ast.FieldDeclaration: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc> = $r8;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc> = null;

        return;
    }

    protected void consumeEnumConstantHeader()
    {
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r11, $r12, $r21, $r22;
        int[] $r5, $r20;
        org.eclipse.jdt.internal.compiler.parser.RecoveredType $r6;
        org.eclipse.jdt.internal.compiler.ast.FieldDeclaration r3;
        boolean z0, $z2, $z3;
        org.eclipse.jdt.internal.compiler.CompilationResult $r15;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration r24, $r26;
        org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression $r27;
        org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration $r14;
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r2, $r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, i22, $i23, $i25, $i27;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r1, $r7;
        org.eclipse.jdt.internal.compiler.ast.AllocationExpression $r28;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r17, $r18, $r25;
        org.eclipse.jdt.internal.compiler.parser.RecoveredElement $r9, $r10, $r23;
        char[] $r16;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $r2 = $r1[$i0];

        r3 = (org.eclipse.jdt.internal.compiler.ast.FieldDeclaration) $r2;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int currentToken>;

        if $i1 != 69 goto label1;

        $z3 = 1;

        $z2 = 1;

        goto label2;

     label1:
        $z3 = 0;

        $z2 = 0;

     label2:
        z0 = $z2;

        if $z3 == 0 goto label4;

        $r26 = new org.eclipse.jdt.internal.compiler.ast.TypeDeclaration;

        $r14 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit>;

        $r15 = $r14.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: org.eclipse.jdt.internal.compiler.CompilationResult compilationResult>;

        specialinvoke $r26.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: void <init>(org.eclipse.jdt.internal.compiler.CompilationResult)>($r15);

        $r16 = <org.eclipse.jdt.core.compiler.CharOperation: char[] NO_CHAR>;

        $r26.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: char[] name> = $r16;

        $i12 = $r26.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits>;

        $i13 = $i12 | 768;

        $r26.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits> = $i13;

        $r17 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        i22 = $r17.<org.eclipse.jdt.internal.compiler.parser.Scanner: int startPosition>;

        $r26.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int declarationSourceStart> = i22;

        $r26.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int sourceStart> = i22;

        $r26.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int sourceEnd> = i22;

        $r26.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int modifiers> = 0;

        $r18 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i14 = $r18.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        $r26.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bodyStart> = $i14;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void markEnclosingMemberWithLocalType()>();

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnAstStack(org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r26);

        $r27 = new org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression;

        specialinvoke $r27.<org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression: void <init>(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)>($r26);

        $r27.<org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression: org.eclipse.jdt.internal.compiler.ast.FieldDeclaration enumConstant> = r3;

        $r20 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] expressionLengthStack>;

        $i15 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        $i16 = $i15 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr> = $i16;

        $i17 = $r20[$i15];

        if $i17 == 0 goto label3;

        $i18 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i19 = $i18 - $i17;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr> = $i19;

        $r22 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i20 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i21 = $i20 + 1;

        $r21 = newarray (org.eclipse.jdt.internal.compiler.ast.Expression)[$i17];

        $r27.<org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression: org.eclipse.jdt.internal.compiler.ast.Expression[] arguments> = $r21;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r22, $i21, $r21, 0, $i17);

     label3:
        r3.<org.eclipse.jdt.internal.compiler.ast.FieldDeclaration: org.eclipse.jdt.internal.compiler.ast.Expression initialization> = $r27;

        goto label6;

     label4:
        $r28 = new org.eclipse.jdt.internal.compiler.ast.AllocationExpression;

        specialinvoke $r28.<org.eclipse.jdt.internal.compiler.ast.AllocationExpression: void <init>()>();

        $r28.<org.eclipse.jdt.internal.compiler.ast.AllocationExpression: org.eclipse.jdt.internal.compiler.ast.FieldDeclaration enumConstant> = r3;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] expressionLengthStack>;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        $i3 = $i2 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr> = $i3;

        $i4 = $r5[$i2];

        if $i4 == 0 goto label5;

        $i8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i9 = $i8 - $i4;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr> = $i9;

        $r12 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i10 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i11 = $i10 + 1;

        $r11 = newarray (org.eclipse.jdt.internal.compiler.ast.Expression)[$i4];

        $r28.<org.eclipse.jdt.internal.compiler.ast.AllocationExpression: org.eclipse.jdt.internal.compiler.ast.Expression[] arguments> = $r11;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r12, $i11, $r11, 0, $i4);

     label5:
        r3.<org.eclipse.jdt.internal.compiler.ast.FieldDeclaration: org.eclipse.jdt.internal.compiler.ast.Expression initialization> = $r28;

     label6:
        $r23 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r23 == null goto label9;

        if z0 == 0 goto label7;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $r8 = $r7[$i6];

        r24 = (org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) $r8;

        $r9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $r10 = virtualinvoke $r9.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,int)>(r24, 0);

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement> = $r10;

        $i7 = r24.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bodyStart>;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastCheckPoint> = $i7;

        $i25 = (int) -1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastIgnoredToken> = $i25;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int currentToken> = 0;

        goto label9;

     label7:
        $i5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int currentToken>;

        if $i5 != 27 goto label8;

        $r6 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredType currentRecoveryType()>();

        if $r6 == null goto label8;

        $r6.<org.eclipse.jdt.internal.compiler.parser.RecoveredType: boolean insideEnumConstantPart> = 0;

     label8:
        $r25 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i23 = $r25.<org.eclipse.jdt.internal.compiler.parser.Scanner: int startPosition>;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastCheckPoint> = $i23;

        $i27 = (int) -1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastIgnoredToken> = $i27;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean restartRecovery> = 1;

     label9:
        return;
    }

    protected void consumeEnumConstantNoClassBody()
    {
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r3;
        int[] $r1;
        int $i0, $i1, i2, $i3;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r2;
        org.eclipse.jdt.internal.compiler.ast.FieldDeclaration r4;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i1;

        i2 = $r1[$i0];

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $r3 = $r2[$i3];

        r4 = (org.eclipse.jdt.internal.compiler.ast.FieldDeclaration) $r3;

        r4.<org.eclipse.jdt.internal.compiler.ast.FieldDeclaration: int declarationEnd> = i2;

        r4.<org.eclipse.jdt.internal.compiler.ast.FieldDeclaration: int declarationSourceEnd> = i2;

        return;
    }

    protected void consumeEnumConstants()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void concatNodeLists()>();

        return;
    }

    protected void consumeEnumConstantWithClassBody()
    {
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r3, $r6;
        int[] $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r2, $r5;
        org.eclipse.jdt.internal.compiler.ast.FieldDeclaration r7;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration r4;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] astLengthStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr> = $i1;

        $i2 = $r1[$i0];

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void dispatchDeclarationInto(int)>($i2);

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i4 = $i3 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr> = $i4;

        $r3 = $r2[$i3];

        r4 = (org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) $r3;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr>;

        $i6 = $i5 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr> = $i6;

        $i7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endPosition>;

        r4.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bodyEnd> = $i7;

        $i8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        $i9 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int flushCommentsDefinedPriorTo(int)>($i8);

        r4.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int declarationSourceEnd> = $i9;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i10 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $r6 = $r5[$i10];

        r7 = (org.eclipse.jdt.internal.compiler.ast.FieldDeclaration) $r6;

        $i11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        r7.<org.eclipse.jdt.internal.compiler.ast.FieldDeclaration: int declarationEnd> = $i11;

        $i12 = r4.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int declarationSourceEnd>;

        r7.<org.eclipse.jdt.internal.compiler.ast.FieldDeclaration: int declarationSourceEnd> = $i12;

        $i13 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i14 = $i13 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i14;

        return;
    }

    protected void consumeEnumDeclaration()
    {
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r3;
        int[] $r1, $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, $i13, $i14, $i16;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r2;
        boolean $z0, $z1, $z2, z3, $z4, $z5, $z6;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r6;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration $r5;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] astLengthStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr> = $i1;

        $i2 = $r1[$i0];

        if $i2 == 0 goto label01;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void dispatchDeclarationIntoEnumDeclaration(int)>($i2);

     label01:
        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $r3 = $r2[$i3];

        $r5 = (org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) $r3;

        $z0 = virtualinvoke $r5.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: boolean checkConstructors(org.eclipse.jdt.internal.compiler.parser.Parser)>(r0);

        if $z0 != 0 goto label08;

        z3 = 0;

        $z2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean diet>;

        if $z2 == 0 goto label05;

        i12 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int nestedType>;

        goto label04;

     label02:
        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] variablesCounter>;

        $i11 = $r4[i12];

        if $i11 <= 0 goto label03;

        z3 = 1;

        goto label05;

     label03:
        $i16 = (int) -1;

        i12 = i12 + $i16;

     label04:
        if i12 > 0 goto label02;

     label05:
        $z4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean diet>;

        if $z4 == 0 goto label06;

        if z3 != 0 goto label06;

        $z5 = 0;

        goto label07;

     label06:
        $z5 = 1;

     label07:
        virtualinvoke $r5.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration createDefaultConstructor(boolean,boolean)>($z5, 1);

     label08:
        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $z6 = $r6.<org.eclipse.jdt.internal.compiler.parser.Scanner: boolean containsAssertKeyword>;

        if $z6 == 0 goto label09;

        $i9 = $r5.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits>;

        $i10 = $i9 | 1;

        $r5.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits> = $i10;

     label09:
        virtualinvoke $r5.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: void addClinit()>();

        $i4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        $r5.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bodyEnd> = $i4;

        if $i2 != 0 goto label10;

        $i6 = $r5.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bodyStart>;

        $i5 = $r5.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bodyEnd>;

        $z1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean containsComment(int,int)>($i6, $i5);

        if $z1 != 0 goto label10;

        $i7 = $r5.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits>;

        $i8 = $i7 | 8;

        $r5.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits> = $i8;

     label10:
        $i13 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        $i14 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int flushCommentsDefinedPriorTo(int)>($i13);

        $r5.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int declarationSourceEnd> = $i14;

        return;
    }

    protected void consumeEnumDeclarations()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        return;
    }

    protected void consumeEnumHeader()
    {
        org.eclipse.jdt.internal.compiler.parser.Scanner $r5, $r6;
        org.eclipse.jdt.internal.compiler.parser.RecoveredElement $r4;
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r2;
        int $i0, $i1, $i2, $i4;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r1;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration r3;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $r2 = $r1[$i0];

        r3 = (org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) $r2;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int currentToken>;

        if $i1 != 69 goto label1;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i2 = $r6.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        r3.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bodyStart> = $i2;

     label1:
        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r4 == null goto label2;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean restartRecovery> = 1;

     label2:
        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i4 = (int) -1;

        $r5.<org.eclipse.jdt.internal.compiler.parser.Scanner: int commentPtr> = $i4;

        return;
    }

    protected void consumeEnumHeaderName()
    {
        org.eclipse.jdt.internal.compiler.ast.Javadoc $r6;
        char[][] $r15;
        byte $b9;
        org.eclipse.jdt.internal.compiler.CompilationResult $r3;
        org.eclipse.jdt.internal.compiler.impl.CompilerOptions $r9;
        org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration $r2;
        long $l8, $l20, $l22;
        org.eclipse.jdt.internal.compiler.parser.Parser r1;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r10;
        char[] $r16;
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r11;
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r12;
        int[] $r4, $r5, $r17, $r18, $r19;
        boolean $z0;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration $r21;
        org.eclipse.jdt.internal.compiler.ast.Annotation[] $r13;
        long[] $r14;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i21, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i43;
        org.eclipse.jdt.internal.compiler.parser.RecoveredElement $r7, $r8, $r20;

        r1 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r21 = new org.eclipse.jdt.internal.compiler.ast.TypeDeclaration;

        $r2 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit>;

        $r3 = $r2.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: org.eclipse.jdt.internal.compiler.CompilationResult compilationResult>;

        specialinvoke $r21.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: void <init>(org.eclipse.jdt.internal.compiler.CompilationResult)>($r3);

        $r4 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] nestedMethod>;

        $i0 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int nestedType>;

        $i1 = $r4[$i0];

        if $i1 != 0 goto label1;

        $i16 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int nestedType>;

        if $i16 == 0 goto label2;

        $i17 = $r21.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits>;

        $i18 = $i17 | 1024;

        $r21.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits> = $i18;

        goto label2;

     label1:
        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.parser.Parser: void blockReal()>();

     label2:
        $r14 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: long[] identifierPositionStack>;

        $i19 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $l20 = $r14[$i19];

        $i21 = (int) $l20;

        $r21.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int sourceEnd> = $i21;

        $l22 = $l20 >>> 32;

        $i23 = (int) $l22;

        $r21.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int sourceStart> = $i23;

        $r15 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: char[][] identifierStack>;

        $i24 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i25 = $i24 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr> = $i25;

        $r16 = $r15[$i24];

        $r21.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: char[] name> = $r16;

        $i26 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr>;

        $i27 = $i26 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr> = $i27;

        $r17 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i28 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i29 = $i28 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i29;

        $i30 = $r17[$i28];

        $r21.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int declarationSourceStart> = $i30;

        $i31 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i32 = $i31 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i32;

        $r18 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i33 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i34 = $i33 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i34;

        $i35 = $r18[$i33];

        $r21.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int modifiersSourceStart> = $i35;

        $r19 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i36 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i37 = $i36 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i37;

        $i38 = $r19[$i36];

        $i39 = $i38 | 16384;

        $r21.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int modifiers> = $i39;

        $i40 = $r21.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int modifiersSourceStart>;

        if $i40 < 0 goto label3;

        $i15 = $r21.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int modifiersSourceStart>;

        $r21.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int declarationSourceStart> = $i15;

     label3:
        $r5 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] expressionLengthStack>;

        $i2 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        $i3 = $i2 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr> = $i3;

        $i4 = $r5[$i2];

        if $i4 == 0 goto label4;

        $r12 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i12 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i13 = $i12 - $i4;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr> = $i13;

        $i14 = $i13 + 1;

        $r13 = newarray (org.eclipse.jdt.internal.compiler.ast.Annotation)[$i4];

        $r21.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.Annotation[] annotations> = $r13;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r12, $i14, $r13, 0, $i4);

     label4:
        $i5 = $r21.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int sourceEnd>;

        $i6 = $i5 + 1;

        $r21.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bodyStart> = $i6;

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnAstStack(org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r21);

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int listLength> = 0;

        $z0 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean statementRecoveryActivated>;

        if $z0 != 0 goto label5;

        $r9 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.CompilerOptions options>;

        $l8 = $r9.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long sourceLevel>;

        $b9 = $l8 cmp 3211264L;

        $i41 = (int) $b9;

        if $i41 >= 0 goto label5;

        $i11 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastErrorEndPositionBeforeRecovery>;

        $r10 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i10 = $r10.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        if $i11 >= $i10 goto label5;

        $r11 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        virtualinvoke $r11.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void invalidUsageOfEnumDeclarations(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)>($r21);

     label5:
        $r20 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r20 == null goto label6;

        $i7 = $r21.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bodyStart>;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastCheckPoint> = $i7;

        $r7 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $r8 = virtualinvoke $r7.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,int)>($r21, 0);

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement> = $r8;

        $i43 = (int) -1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastIgnoredToken> = $i43;

     label6:
        $r6 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc>;

        $r21.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc> = $r6;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc> = null;

        return;
    }

    protected void consumeEnumHeaderNameWithTypeParameters()
    {
        org.eclipse.jdt.internal.compiler.ast.Javadoc $r12;
        char[][] $r21;
        byte $b18;
        org.eclipse.jdt.internal.compiler.CompilationResult $r3;
        org.eclipse.jdt.internal.compiler.impl.CompilerOptions $r15;
        org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration $r2;
        long $l17, $l30, $l32;
        org.eclipse.jdt.internal.compiler.parser.Parser r1;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r6;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r16;
        char[] $r22;
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r7, $r17;
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r18;
        int[] $r4, $r10, $r11, $r23, $r24, $r25;
        boolean $z0;
        org.eclipse.jdt.internal.compiler.ast.TypeParameter $r9;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration $r27;
        org.eclipse.jdt.internal.compiler.ast.Annotation[] $r19;
        long[] $r20;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, i28, $i29, $i31, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i53;
        org.eclipse.jdt.internal.compiler.ast.TypeParameter[] $r5, $r8;
        org.eclipse.jdt.internal.compiler.parser.RecoveredElement $r13, $r14, $r26;

        r1 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r27 = new org.eclipse.jdt.internal.compiler.ast.TypeDeclaration;

        $r2 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit>;

        $r3 = $r2.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: org.eclipse.jdt.internal.compiler.CompilationResult compilationResult>;

        specialinvoke $r27.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: void <init>(org.eclipse.jdt.internal.compiler.CompilationResult)>($r3);

        $r4 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] genericsLengthStack>;

        $i0 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsLengthPtr>;

        $i1 = $i0 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsLengthPtr> = $i1;

        i28 = $r4[$i0];

        $i2 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr>;

        $i3 = $i2 - i28;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr> = $i3;

        $r6 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] genericsStack>;

        $i4 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr>;

        $i5 = $i4 + 1;

        $r5 = newarray (org.eclipse.jdt.internal.compiler.ast.TypeParameter)[i28];

        $r27.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeParameter[] typeParameters> = $r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, $i5, $r5, 0, i28);

        $r7 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        virtualinvoke $r7.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void invalidUsageOfTypeParametersForEnumDeclaration(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)>($r27);

        $r8 = $r27.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeParameter[] typeParameters>;

        $i6 = i28 - 1;

        $r9 = $r8[$i6];

        $i7 = $r9.<org.eclipse.jdt.internal.compiler.ast.TypeParameter: int declarationSourceEnd>;

        $i8 = $i7 + 1;

        $r27.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bodyStart> = $i8;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int listTypeParameterLength> = 0;

        $r10 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] nestedMethod>;

        $i9 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int nestedType>;

        $i10 = $r10[$i9];

        if $i10 != 0 goto label1;

        $i25 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int nestedType>;

        if $i25 == 0 goto label2;

        $i26 = $r27.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits>;

        $i27 = $i26 | 1024;

        $r27.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits> = $i27;

        goto label2;

     label1:
        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.parser.Parser: void blockReal()>();

     label2:
        $r20 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: long[] identifierPositionStack>;

        $i29 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $l30 = $r20[$i29];

        $i31 = (int) $l30;

        $r27.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int sourceEnd> = $i31;

        $l32 = $l30 >>> 32;

        $i33 = (int) $l32;

        $r27.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int sourceStart> = $i33;

        $r21 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: char[][] identifierStack>;

        $i34 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i35 = $i34 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr> = $i35;

        $r22 = $r21[$i34];

        $r27.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: char[] name> = $r22;

        $i36 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr>;

        $i37 = $i36 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr> = $i37;

        $r23 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i38 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i39 = $i38 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i39;

        $i40 = $r23[$i38];

        $r27.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int declarationSourceStart> = $i40;

        $i41 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i42 = $i41 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i42;

        $r24 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i43 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i44 = $i43 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i44;

        $i45 = $r24[$i43];

        $r27.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int modifiersSourceStart> = $i45;

        $r25 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i46 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i47 = $i46 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i47;

        $i48 = $r25[$i46];

        $i49 = $i48 | 16384;

        $r27.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int modifiers> = $i49;

        $i50 = $r27.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int modifiersSourceStart>;

        if $i50 < 0 goto label3;

        $i24 = $r27.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int modifiersSourceStart>;

        $r27.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int declarationSourceStart> = $i24;

     label3:
        $r11 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] expressionLengthStack>;

        $i11 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        $i12 = $i11 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr> = $i12;

        $i13 = $r11[$i11];

        if $i13 == 0 goto label4;

        $r18 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i21 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i22 = $i21 - $i13;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr> = $i22;

        $i23 = $i22 + 1;

        $r19 = newarray (org.eclipse.jdt.internal.compiler.ast.Annotation)[$i13];

        $r27.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.Annotation[] annotations> = $r19;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r18, $i23, $r19, 0, $i13);

     label4:
        $i14 = $r27.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int sourceEnd>;

        $i15 = $i14 + 1;

        $r27.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bodyStart> = $i15;

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnAstStack(org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r27);

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int listLength> = 0;

        $z0 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean statementRecoveryActivated>;

        if $z0 != 0 goto label5;

        $r15 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.CompilerOptions options>;

        $l17 = $r15.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long sourceLevel>;

        $b18 = $l17 cmp 3211264L;

        $i51 = (int) $b18;

        if $i51 >= 0 goto label5;

        $i20 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastErrorEndPositionBeforeRecovery>;

        $r16 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i19 = $r16.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        if $i20 >= $i19 goto label5;

        $r17 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        virtualinvoke $r17.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void invalidUsageOfEnumDeclarations(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)>($r27);

     label5:
        $r26 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r26 == null goto label6;

        $i16 = $r27.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bodyStart>;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastCheckPoint> = $i16;

        $r13 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $r14 = virtualinvoke $r13.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,int)>($r27, 0);

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement> = $r14;

        $i53 = (int) -1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastIgnoredToken> = $i53;

     label6:
        $r12 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc>;

        $r27.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc> = $r12;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc> = null;

        return;
    }

    protected void consumeEqualityExpression(int)
    {
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r2, $r3, $r6;
        org.eclipse.jdt.internal.compiler.ast.Expression $r4, $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, $i8;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.EqualExpression $r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        i7 := @parameter0: int;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr> = $i1;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        $i3 = $i2 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr> = $i3;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r1 = new org.eclipse.jdt.internal.compiler.ast.EqualExpression;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r5 = $r2[$i4];

        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i6 = $i5 + 1;

        $r4 = $r3[$i6];

        specialinvoke $r1.<org.eclipse.jdt.internal.compiler.ast.EqualExpression: void <init>(org.eclipse.jdt.internal.compiler.ast.Expression,org.eclipse.jdt.internal.compiler.ast.Expression,int)>($r5, $r4, i7);

        $r6[$i8] = $r1;

        return;
    }

    protected void consumeEqualityExpressionWithName(int)
    {
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r3, $r4, $r7;
        org.eclipse.jdt.internal.compiler.ast.Expression $r5, $r6;
        org.eclipse.jdt.internal.compiler.ast.NameReference $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, $i8;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.EqualExpression $r2;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        i7 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.NameReference getUnspecifiedReferenceOptimized()>();

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnExpressionStack(org.eclipse.jdt.internal.compiler.ast.Expression)>($r1);

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr> = $i1;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        $i3 = $i2 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr> = $i3;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r2 = new org.eclipse.jdt.internal.compiler.ast.EqualExpression;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i5 = $i4 + 1;

        $r6 = $r3[$i5];

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r5 = $r4[$i6];

        specialinvoke $r2.<org.eclipse.jdt.internal.compiler.ast.EqualExpression: void <init>(org.eclipse.jdt.internal.compiler.ast.Expression,org.eclipse.jdt.internal.compiler.ast.Expression,int)>($r6, $r5, i7);

        $r7[$i8] = $r2;

        return;
    }

    protected void consumeExitMemberValue()
    {
        org.eclipse.jdt.internal.compiler.parser.RecoveredAnnotation r4;
        int $i1;
        org.eclipse.jdt.internal.compiler.parser.RecoveredElement $r1, $r2, $r3;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        boolean $z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r1 == null goto label1;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $z0 = $r2 instanceof org.eclipse.jdt.internal.compiler.parser.RecoveredAnnotation;

        if $z0 == 0 goto label1;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        r4 = (org.eclipse.jdt.internal.compiler.parser.RecoveredAnnotation) $r3;

        r4.<org.eclipse.jdt.internal.compiler.parser.RecoveredAnnotation: boolean hasPendingMemberValueName> = 0;

        $i1 = (int) -1;

        r4.<org.eclipse.jdt.internal.compiler.parser.RecoveredAnnotation: int memberValuPairEqualEnd> = $i1;

     label1:
        return;
    }

    protected void consumeExitTryBlock()
    {
        org.eclipse.jdt.internal.compiler.parser.RecoveredElement $r1;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r1 == null goto label1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean restartRecovery> = 1;

     label1:
        return;
    }

    protected void consumeExitVariableWithInitialization()
    {
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r4;
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r2;
        org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration r3;
        org.eclipse.jdt.internal.compiler.ast.Expression $r5, $r6, $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr> = $i1;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $r2 = $r1[$i2];

        r3 = (org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration) $r2;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i4 = $i3 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr> = $i4;

        $r5 = $r4[$i3];

        r3.<org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration: org.eclipse.jdt.internal.compiler.ast.Expression initialization> = $r5;

        $r6 = r3.<org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration: org.eclipse.jdt.internal.compiler.ast.Expression initialization>;

        $i5 = $r6.<org.eclipse.jdt.internal.compiler.ast.Expression: int sourceEnd>;

        r3.<org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration: int declarationSourceEnd> = $i5;

        $r7 = r3.<org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration: org.eclipse.jdt.internal.compiler.ast.Expression initialization>;

        $i6 = $r7.<org.eclipse.jdt.internal.compiler.ast.Expression: int sourceEnd>;

        r3.<org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration: int declarationEnd> = $i6;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void recoveryExitFromVariable()>();

        return;
    }

    protected void consumeExitVariableWithoutInitialization()
    {
        org.eclipse.jdt.internal.compiler.parser.RecoveredElement $r4, $r5, $r6;
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r2;
        org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration r3;
        int $i0, $i1, $i2, $i3, $i4;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r1;
        boolean $z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $r2 = $r1[$i0];

        r3 = (org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration) $r2;

        $i1 = r3.<org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration: int declarationEnd>;

        r3.<org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration: int declarationSourceEnd> = $i1;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r4 == null goto label1;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $z0 = $r5 instanceof org.eclipse.jdt.internal.compiler.parser.RecoveredField;

        if $z0 == 0 goto label1;

        $i3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        $i2 = r3.<org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration: int sourceEnd>;

        if $i3 <= $i2 goto label1;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        virtualinvoke $r6.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: void updateSourceEndIfNecessary(int)>($i4);

     label1:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void recoveryExitFromVariable()>();

        return;
    }

    protected void consumeExplicitConstructorInvocation(int, int)
    {
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r5, $r7, $r8;
        org.eclipse.jdt.internal.compiler.ast.Expression $r6;
        int[] $r1, $r3;
        org.eclipse.jdt.internal.compiler.ast.NameReference $r4;
        int $i0, $i1, i2, i3, $i4, $i5, $i6, i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall $r2;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        i7 := @parameter0: int;

        i3 := @parameter1: int;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i1;

        i2 = $r1[$i0];

        $r2 = new org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall;

        specialinvoke $r2.<org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall: void <init>(int)>(i3);

        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] expressionLengthStack>;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        $i5 = $i4 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr> = $i5;

        $i6 = $r3[$i4];

        if $i6 == 0 goto label1;

        $i14 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i15 = $i14 - $i6;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr> = $i15;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i16 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i17 = $i16 + 1;

        $r7 = newarray (org.eclipse.jdt.internal.compiler.ast.Expression)[$i6];

        $r2.<org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall: org.eclipse.jdt.internal.compiler.ast.Expression[] arguments> = $r7;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, $i17, $r7, 0, $i6);

     label1:
        tableswitch(i7)
        {
            case 0: goto label2;
            case 1: goto label3;
            case 2: goto label4;
            default: goto label5;
        };

     label2:
        $r2.<org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall: int sourceStart> = i2;

        goto label5;

     label3:
        $i9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        $i10 = $i9 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr> = $i10;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i12 = $i11 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr> = $i12;

        $r6 = $r5[$i11];

        $r2.<org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall: org.eclipse.jdt.internal.compiler.ast.Expression qualification> = $r6;

        $i13 = $r6.<org.eclipse.jdt.internal.compiler.ast.Expression: int sourceStart>;

        $r2.<org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall: int sourceStart> = $i13;

        goto label5;

     label4:
        $r4 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.NameReference getUnspecifiedReferenceOptimized()>();

        $r2.<org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall: org.eclipse.jdt.internal.compiler.ast.Expression qualification> = $r4;

        $i8 = $r4.<org.eclipse.jdt.internal.compiler.ast.Expression: int sourceStart>;

        $r2.<org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall: int sourceStart> = $i8;

     label5:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnAstStack(org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r2);

        $i18 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        $r2.<org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall: int sourceEnd> = $i18;

        return;
    }

    protected void consumeExplicitConstructorInvocationWithTypeArguments(int, int)
    {
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r9, $r11, $r12;
        org.eclipse.jdt.internal.compiler.ast.Expression $r10;
        int[] $r1, $r3, $r4, $r7;
        org.eclipse.jdt.internal.compiler.ast.NameReference $r8;
        org.eclipse.jdt.internal.compiler.ast.TypeReference[] $r5;
        int $i0, $i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r6;
        org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall $r2;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        i16 := @parameter0: int;

        i3 := @parameter1: int;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i1;

        i2 = $r1[$i0];

        $r2 = new org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall;

        specialinvoke $r2.<org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall: void <init>(int)>(i3);

        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] expressionLengthStack>;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        $i5 = $i4 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr> = $i5;

        $i6 = $r3[$i4];

        if $i6 == 0 goto label1;

        $i23 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i24 = $i23 - $i6;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr> = $i24;

        $r12 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i25 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i26 = $i25 + 1;

        $r11 = newarray (org.eclipse.jdt.internal.compiler.ast.Expression)[$i6];

        $r2.<org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall: org.eclipse.jdt.internal.compiler.ast.Expression[] arguments> = $r11;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r12, $i26, $r11, 0, $i6);

     label1:
        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] genericsLengthStack>;

        $i7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsLengthPtr>;

        $i8 = $i7 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsLengthPtr> = $i8;

        $i27 = $r4[$i7];

        $i9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr>;

        $i10 = $i9 - $i27;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr> = $i10;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] genericsStack>;

        $i11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr>;

        $i12 = $i11 + 1;

        $r5 = newarray (org.eclipse.jdt.internal.compiler.ast.TypeReference)[$i27];

        $r2.<org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall: org.eclipse.jdt.internal.compiler.ast.TypeReference[] typeArguments> = $r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, $i12, $r5, 0, $i27);

        $r7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i13 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i14 = $i13 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i14;

        $i15 = $r7[$i13];

        $r2.<org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall: int typeArgumentsSourceStart> = $i15;

        tableswitch(i16)
        {
            case 0: goto label2;
            case 1: goto label3;
            case 2: goto label4;
            default: goto label5;
        };

     label2:
        $r2.<org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall: int sourceStart> = i2;

        goto label5;

     label3:
        $i18 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        $i19 = $i18 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr> = $i19;

        $r9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i20 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i21 = $i20 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr> = $i21;

        $r10 = $r9[$i20];

        $r2.<org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall: org.eclipse.jdt.internal.compiler.ast.Expression qualification> = $r10;

        $i22 = $r10.<org.eclipse.jdt.internal.compiler.ast.Expression: int sourceStart>;

        $r2.<org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall: int sourceStart> = $i22;

        goto label5;

     label4:
        $r8 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.NameReference getUnspecifiedReferenceOptimized()>();

        $r2.<org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall: org.eclipse.jdt.internal.compiler.ast.Expression qualification> = $r8;

        $i17 = $r8.<org.eclipse.jdt.internal.compiler.ast.Expression: int sourceStart>;

        $r2.<org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall: int sourceStart> = $i17;

     label5:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnAstStack(org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r2);

        $i28 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        $r2.<org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall: int sourceEnd> = $i28;

        return;
    }

    protected void consumeExpressionStatement()
    {
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r1;
        org.eclipse.jdt.internal.compiler.ast.Expression r2;
        int $i0, $i1, $i2, $i3, $i4;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr> = $i1;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i3 = $i2 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr> = $i3;

        r2 = $r1[$i2];

        $i4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        r2.<org.eclipse.jdt.internal.compiler.ast.Expression: int statementEnd> = $i4;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnAstStack(org.eclipse.jdt.internal.compiler.ast.ASTNode)>(r2);

        return;
    }

    protected void consumeFieldAccess(boolean)
    {
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r5, $r8;
        long $l3;
        char[][] $r2;
        long[] $r4;
        org.eclipse.jdt.internal.compiler.ast.Expression $r6, $r7;
        org.eclipse.jdt.internal.compiler.ast.SuperReference $r10;
        int[] $r9;
        int $i0, $i1, $i2, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        org.eclipse.jdt.internal.compiler.parser.Parser r1;
        boolean z0;
        char[] $r3;
        org.eclipse.jdt.internal.compiler.ast.FieldReference $r0;

        r1 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        z0 := @parameter0: boolean;

        $r0 = new org.eclipse.jdt.internal.compiler.ast.FieldReference;

        $r2 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: char[][] identifierStack>;

        $i0 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $r3 = $r2[$i0];

        $r4 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: long[] identifierPositionStack>;

        $i1 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i2 = $i1 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr> = $i2;

        $l3 = $r4[$i1];

        specialinvoke $r0.<org.eclipse.jdt.internal.compiler.ast.FieldReference: void <init>(char[],long)>($r3, $l3);

        $i4 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr>;

        $i5 = $i4 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr> = $i5;

        if z0 == 0 goto label1;

        $r9 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i9 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i10 = $i9 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i10;

        $i11 = $r9[$i9];

        $r0.<org.eclipse.jdt.internal.compiler.ast.FieldReference: int sourceStart> = $i11;

        $r10 = new org.eclipse.jdt.internal.compiler.ast.SuperReference;

        $i13 = $r0.<org.eclipse.jdt.internal.compiler.ast.FieldReference: int sourceStart>;

        $i12 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int endPosition>;

        specialinvoke $r10.<org.eclipse.jdt.internal.compiler.ast.SuperReference: void <init>(int,int)>($i13, $i12);

        $r0.<org.eclipse.jdt.internal.compiler.ast.FieldReference: org.eclipse.jdt.internal.compiler.ast.Expression receiver> = $r10;

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnExpressionStack(org.eclipse.jdt.internal.compiler.ast.Expression)>($r0);

        goto label2;

     label1:
        $r5 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i6 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r6 = $r5[$i6];

        $r0.<org.eclipse.jdt.internal.compiler.ast.FieldReference: org.eclipse.jdt.internal.compiler.ast.Expression receiver> = $r6;

        $r7 = $r0.<org.eclipse.jdt.internal.compiler.ast.FieldReference: org.eclipse.jdt.internal.compiler.ast.Expression receiver>;

        $i7 = $r7.<org.eclipse.jdt.internal.compiler.ast.Expression: int sourceStart>;

        $r0.<org.eclipse.jdt.internal.compiler.ast.FieldReference: int sourceStart> = $i7;

        $r8 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i8 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r8[$i8] = $r0;

     label2:
        return;
    }

    protected void consumeFieldDeclaration()
    {
        int[] $r1, $r4, $r7, $r19;
        org.eclipse.jdt.internal.compiler.ast.FieldDeclaration r17, r18;
        boolean $z0, $z1;
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r3, $r16;
        int $i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, i22, i23, $i24, $i26;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r2, $r5, $r6, $r15;
        org.eclipse.jdt.internal.compiler.parser.RecoveredElement $r8, $r9, $r10, $r11, $r12, $r13, $r14;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] astLengthStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr>;

        i1 = $r1[$i0];

        i22 = i1 - 1;

        goto label2;

     label1:
        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i3 = $i2 - i22;

        $r3 = $r2[$i3];

        r18 = (org.eclipse.jdt.internal.compiler.ast.FieldDeclaration) $r3;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        r18.<org.eclipse.jdt.internal.compiler.ast.FieldDeclaration: int declarationSourceEnd> = $i4;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        r18.<org.eclipse.jdt.internal.compiler.ast.FieldDeclaration: int declarationEnd> = $i5;

        $i26 = (int) -1;

        i22 = i22 + $i26;

     label2:
        if i22 >= 0 goto label1;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void updateSourceDeclarationParts(int)>(i1);

        $i6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        $i7 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int flushCommentsDefinedPriorTo(int)>($i6);

        $i8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        if $i7 == $i8 goto label5;

        i23 = 0;

        goto label4;

     label3:
        $r15 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i19 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i20 = $i19 - i23;

        $r16 = $r15[$i20];

        r17 = (org.eclipse.jdt.internal.compiler.ast.FieldDeclaration) $r16;

        r17.<org.eclipse.jdt.internal.compiler.ast.FieldDeclaration: int declarationSourceEnd> = $i7;

        i23 = i23 + 1;

     label4:
        if i23 < i1 goto label3;

     label5:
        $i11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] variablesCounter>;

        $i9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int nestedType>;

        $i10 = $r4[$i9];

        $i12 = $i11 - $i10;

        $i21 = $i12 + 1;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i13 = $i21 - 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, $i21, $r5, $i13, i1);

        $i14 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i15 = $i14 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr> = $i15;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] astLengthStack>;

        $i16 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr>;

        $i17 = $i16 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr> = $i17;

        $r7[$i17] = i1;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r8 == null goto label7;

        $i18 = $i7 + 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastCheckPoint> = $i18;

        $r9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $r10 = $r9.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.parser.RecoveredElement parent>;

        if $r10 == null goto label6;

        $r11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $z0 = $r11 instanceof org.eclipse.jdt.internal.compiler.parser.RecoveredField;

        if $z0 == 0 goto label6;

        $r12 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $z1 = $r12 instanceof org.eclipse.jdt.internal.compiler.parser.RecoveredInitializer;

        if $z1 != 0 goto label6;

        $r13 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $r14 = $r13.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.parser.RecoveredElement parent>;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement> = $r14;

     label6:
        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean restartRecovery> = 1;

     label7:
        $r19 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] variablesCounter>;

        $i24 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int nestedType>;

        $r19[$i24] = 0;

        return;
    }

    protected void consumeForceNoDiet()
    {
        int $i0, $i1;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int dietInt>;

        $i1 = $i0 + 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int dietInt> = $i1;

        return;
    }

    protected void consumeForInit()
    {
        int $i1;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $i1 = (int) -1;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnAstLengthStack(int)>($i1);

        return;
    }

    protected void consumeFormalParameter(boolean)
    {
        char[][] $r1;
        byte $b14;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r6, $r13, r15;
        org.eclipse.jdt.internal.compiler.impl.CompilerOptions $r8;
        long l5, $l13;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r9;
        char[] r2;
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r7, $r10;
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r11;
        int[] $r4, $r5, $r14, $r16, $r18, $r19;
        boolean z0, $z1, $z2;
        org.eclipse.jdt.internal.compiler.ast.Argument $r20;
        org.eclipse.jdt.internal.compiler.ast.Annotation[] $r12;
        long[] $r3;
        int $i0, $i1, $i2, $i3, $i4, $i6, $i7, i8, $i9, $i10, $i11, $i12, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        z0 := @parameter0: boolean;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr> = $i1;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: char[][] identifierStack>;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        r2 = $r1[$i2];

        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: long[] identifierPositionStack>;

        $i3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i4 = $i3 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr> = $i4;

        l5 = $r3[$i3];

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i7 = $i6 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i7;

        i8 = $r4[$i6];

        i27 = 0;

        if z0 == 0 goto label1;

        $r14 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i23 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i24 = $i23 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i24;

        i27 = $r14[$i23];

     label1:
        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i10 = $i9 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i10;

        $i25 = $r5[$i9];

        $i26 = $i25 + i8;

        $r6 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeReference getTypeReference(int)>($i26);

        r15 = $r6;

        if z0 == 0 goto label3;

        $i20 = $i26 + 1;

        $r13 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeReference copyDims(org.eclipse.jdt.internal.compiler.ast.TypeReference,int)>($r6, $i20);

        r15 = $r13;

        if i8 != 0 goto label2;

        $r13.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int sourceEnd> = i27;

     label2:
        $i21 = $r13.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int bits>;

        $i22 = $i21 | 16384;

        $r13.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int bits> = $i22;

     label3:
        $r16 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i28 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i29 = $i28 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i29;

        $i30 = $r16[$i28];

        $i31 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i32 = $i31 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i32;

        $r20 = new org.eclipse.jdt.internal.compiler.ast.Argument;

        $r18 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i33 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i34 = $i33 + 1;

        $i35 = $r18[$i34];

        $i36 = $i35 & -1048577;

        specialinvoke $r20.<org.eclipse.jdt.internal.compiler.ast.Argument: void <init>(char[],long,org.eclipse.jdt.internal.compiler.ast.TypeReference,int)>(r2, l5, r15, $i36);

        $r20.<org.eclipse.jdt.internal.compiler.ast.Argument: int declarationSourceStart> = $i30;

        $r19 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] expressionLengthStack>;

        $i37 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        $i38 = $i37 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr> = $i38;

        $i39 = $r19[$i37];

        if $i39 == 0 goto label4;

        $r11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i17 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i18 = $i17 - $i39;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr> = $i18;

        $i19 = $i18 + 1;

        $r12 = newarray (org.eclipse.jdt.internal.compiler.ast.Annotation)[$i39];

        $r20.<org.eclipse.jdt.internal.compiler.ast.Argument: org.eclipse.jdt.internal.compiler.ast.Annotation[] annotations> = $r12;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r11, $i19, $r12, 0, $i39);

     label4:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnAstStack(org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r20);

        $i11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int listLength>;

        $i12 = $i11 + 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int listLength> = $i12;

        if z0 == 0 goto label6;

        $z1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean statementRecoveryActivated>;

        if $z1 != 0 goto label5;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.CompilerOptions options>;

        $l13 = $r8.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long sourceLevel>;

        $b14 = $l13 cmp 3211264L;

        $i40 = (int) $b14;

        if $i40 >= 0 goto label5;

        $i16 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastErrorEndPositionBeforeRecovery>;

        $r9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i15 = $r9.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        if $i16 >= $i15 goto label5;

        $r10 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        virtualinvoke $r10.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void invalidUsageOfVarargs(org.eclipse.jdt.internal.compiler.ast.Argument)>($r20);

        goto label6;

     label5:
        $z2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean statementRecoveryActivated>;

        if $z2 != 0 goto label6;

        if i8 <= 0 goto label6;

        $r7 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        virtualinvoke $r7.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void illegalExtendedDimensions(org.eclipse.jdt.internal.compiler.ast.Argument)>($r20);

     label6:
        return;
    }

    protected void consumeFormalParameterList()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void optimizedConcatNodeLists()>();

        return;
    }

    protected void consumeFormalParameterListopt()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnAstLengthStack(int)>(0);

        return;
    }

    protected void consumeGenericType()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        return;
    }

    protected void consumeGenericTypeArrayType()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        return;
    }

    protected void consumeGenericTypeNameArrayType()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        return;
    }

    protected void consumeImportDeclaration()
    {
        org.eclipse.jdt.internal.compiler.ast.ImportReference r3;
        org.eclipse.jdt.internal.compiler.parser.RecoveredElement $r4, $r5, $r6;
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $r2 = $r1[$i0];

        r3 = (org.eclipse.jdt.internal.compiler.ast.ImportReference) $r2;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        r3.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationEnd> = $i1;

        $i2 = r3.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationSourceEnd>;

        $i3 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int flushCommentsDefinedPriorTo(int)>($i2);

        r3.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationSourceEnd> = $i3;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r4 == null goto label1;

        $i4 = r3.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationSourceEnd>;

        $i5 = $i4 + 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastCheckPoint> = $i5;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $r6 = virtualinvoke $r5.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.ImportReference,int)>(r3, 0);

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement> = $r6;

        $i7 = (int) -1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastIgnoredToken> = $i7;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean restartRecovery> = 1;

     label1:
        return;
    }

    protected void consumeImportDeclarations()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void optimizedConcatNodeLists()>();

        return;
    }

    protected void consumeInsideCastExpression()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        return;
    }

    protected void consumeInsideCastExpressionLL1()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.NameReference $r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.NameReference getUnspecifiedReferenceOptimized()>();

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnExpressionStack(org.eclipse.jdt.internal.compiler.ast.Expression)>($r1);

        return;
    }

    protected void consumeInsideCastExpressionWithQualifiedGenerics()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        return;
    }

    protected void consumeInstanceOfExpression()
    {
        org.eclipse.jdt.internal.compiler.ast.InstanceOfExpression $r1;
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r2, $r3;
        org.eclipse.jdt.internal.compiler.ast.Expression $r4;
        int[] $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r7;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r6;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r1 = new org.eclipse.jdt.internal.compiler.ast.InstanceOfExpression;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r4 = $r2[$i0];

        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i2 = $i1 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i2;

        $i4 = $r5[$i1];

        $r6 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeReference getTypeReference(int)>($i4);

        specialinvoke $r1.<org.eclipse.jdt.internal.compiler.ast.InstanceOfExpression: void <init>(org.eclipse.jdt.internal.compiler.ast.Expression,org.eclipse.jdt.internal.compiler.ast.TypeReference)>($r4, $r6);

        $r3[$i3] = $r1;

        $i5 = $r1.<org.eclipse.jdt.internal.compiler.ast.Expression: int sourceEnd>;

        if $i5 != 0 goto label1;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i6 = $r7.<org.eclipse.jdt.internal.compiler.parser.Scanner: int startPosition>;

        $i7 = $i6 - 1;

        $r1.<org.eclipse.jdt.internal.compiler.ast.Expression: int sourceEnd> = $i7;

     label1:
        return;
    }

    protected void consumeInstanceOfExpressionWithName()
    {
        org.eclipse.jdt.internal.compiler.ast.InstanceOfExpression $r4;
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r5, $r7;
        org.eclipse.jdt.internal.compiler.ast.Expression $r6;
        int[] $r1;
        org.eclipse.jdt.internal.compiler.ast.NameReference $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r8;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r2;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i1;

        $i2 = $r1[$i0];

        $r2 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeReference getTypeReference(int)>($i2);

        $r3 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.NameReference getUnspecifiedReferenceOptimized()>();

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnExpressionStack(org.eclipse.jdt.internal.compiler.ast.Expression)>($r3);

        $r7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r4 = new org.eclipse.jdt.internal.compiler.ast.InstanceOfExpression;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r6 = $r5[$i3];

        specialinvoke $r4.<org.eclipse.jdt.internal.compiler.ast.InstanceOfExpression: void <init>(org.eclipse.jdt.internal.compiler.ast.Expression,org.eclipse.jdt.internal.compiler.ast.TypeReference)>($r6, $r2);

        $r7[$i4] = $r4;

        $i5 = $r4.<org.eclipse.jdt.internal.compiler.ast.Expression: int sourceEnd>;

        if $i5 != 0 goto label1;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i6 = $r8.<org.eclipse.jdt.internal.compiler.parser.Scanner: int startPosition>;

        $i7 = $i6 - 1;

        $r4.<org.eclipse.jdt.internal.compiler.ast.Expression: int sourceEnd> = $i7;

     label1:
        return;
    }

    protected void consumeInterfaceDeclaration()
    {
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r3;
        int[] $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r2;
        boolean $z0, $z1;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r4;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration $r5;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] astLengthStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr> = $i1;

        $i2 = $r1[$i0];

        if $i2 == 0 goto label1;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void dispatchDeclarationInto(int)>($i2);

     label1:
        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $r3 = $r2[$i3];

        $r5 = (org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) $r3;

        virtualinvoke $r5.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: boolean checkConstructors(org.eclipse.jdt.internal.compiler.parser.Parser)>(r0);

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $z0 = $r4.<org.eclipse.jdt.internal.compiler.parser.Scanner: boolean containsAssertKeyword>;

        if $z0 == 0 goto label2;

        $i9 = $r5.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits>;

        $i10 = $i9 | 1;

        $r5.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits> = $i10;

     label2:
        virtualinvoke $r5.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: void addClinit()>();

        $i4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        $r5.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bodyEnd> = $i4;

        if $i2 != 0 goto label3;

        $i6 = $r5.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bodyStart>;

        $i5 = $r5.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bodyEnd>;

        $z1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean containsComment(int,int)>($i6, $i5);

        if $z1 != 0 goto label3;

        $i7 = $r5.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits>;

        $i8 = $i7 | 8;

        $r5.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits> = $i8;

     label3:
        $i11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        $i12 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int flushCommentsDefinedPriorTo(int)>($i11);

        $r5.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int declarationSourceEnd> = $i12;

        return;
    }

    protected void consumeInterfaceHeader()
    {
        org.eclipse.jdt.internal.compiler.parser.Scanner $r5, $r6;
        org.eclipse.jdt.internal.compiler.parser.RecoveredElement $r4;
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r2;
        int $i0, $i1, $i2, $i4;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r1;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration r3;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $r2 = $r1[$i0];

        r3 = (org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) $r2;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int currentToken>;

        if $i1 != 69 goto label1;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i2 = $r6.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        r3.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bodyStart> = $i2;

     label1:
        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r4 == null goto label2;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean restartRecovery> = 1;

     label2:
        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i4 = (int) -1;

        $r5.<org.eclipse.jdt.internal.compiler.parser.Scanner: int commentPtr> = $i4;

        return;
    }

    protected void consumeInterfaceHeaderExtends()
    {
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r3;
        int[] $r1;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, i8, $i9, $i10, $i11, $i12, $i13, $i14, i15;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r2, $r6;
        org.eclipse.jdt.internal.compiler.ast.TypeReference[] $r5, $r7, $r8, $r10;
        org.eclipse.jdt.internal.compiler.parser.RecoveredElement $r12;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r9, $r11;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration r4;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] astLengthStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr> = $i1;

        i2 = $r1[$i0];

        $i3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i4 = $i3 - i2;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr> = $i4;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $r3 = $r2[$i5];

        r4 = (org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) $r3;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i7 = $i6 + 1;

        $r5 = newarray (org.eclipse.jdt.internal.compiler.ast.TypeReference)[i2];

        r4.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeReference[] superInterfaces> = $r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, $i7, $r5, 0, i2);

        i15 = 0;

        $r7 = r4.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeReference[] superInterfaces>;

        i8 = lengthof $r7;

        goto label2;

     label1:
        $r8 = r4.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeReference[] superInterfaces>;

        $r9 = $r8[i15];

        $i9 = $r9.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int bits>;

        $i10 = $i9 | 16;

        $r9.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int bits> = $i10;

        i15 = i15 + 1;

     label2:
        if i15 < i8 goto label1;

        $r10 = r4.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeReference[] superInterfaces>;

        $i11 = i2 - 1;

        $r11 = $r10[$i11];

        $i12 = $r11.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int sourceEnd>;

        $i13 = $i12 + 1;

        r4.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bodyStart> = $i13;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int listLength> = 0;

        $r12 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r12 == null goto label3;

        $i14 = r4.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bodyStart>;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastCheckPoint> = $i14;

     label3:
        return;
    }

    protected void consumeInterfaceHeaderName1()
    {
        org.eclipse.jdt.internal.compiler.ast.Javadoc $r6;
        char[][] $r16;
        org.eclipse.jdt.internal.compiler.CompilationResult $r3;
        org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration $r2, $r11, $r12;
        long $l21, $l23;
        org.eclipse.jdt.internal.compiler.parser.Parser r1;
        char[] $r13, $r14, $r17;
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r9;
        int[] $r4, $r18, $r19, $r20, $r21;
        boolean $z0;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration $r22;
        org.eclipse.jdt.internal.compiler.ast.Annotation[] $r10;
        long[] $r15;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i22, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i46;
        org.eclipse.jdt.internal.compiler.parser.RecoveredElement $r5, $r7, $r8;

        r1 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r22 = new org.eclipse.jdt.internal.compiler.ast.TypeDeclaration;

        $r2 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit>;

        $r3 = $r2.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: org.eclipse.jdt.internal.compiler.CompilationResult compilationResult>;

        specialinvoke $r22.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: void <init>(org.eclipse.jdt.internal.compiler.CompilationResult)>($r3);

        $r4 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] nestedMethod>;

        $i0 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int nestedType>;

        $i1 = $r4[$i0];

        if $i1 != 0 goto label1;

        $i17 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int nestedType>;

        if $i17 == 0 goto label2;

        $i18 = $r22.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits>;

        $i19 = $i18 | 1024;

        $r22.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits> = $i19;

        goto label2;

     label1:
        $i2 = $r22.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits>;

        $i3 = $i2 | 256;

        $r22.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits> = $i3;

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.parser.Parser: void markEnclosingMemberWithLocalType()>();

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.parser.Parser: void blockReal()>();

     label2:
        $r15 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: long[] identifierPositionStack>;

        $i20 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $l21 = $r15[$i20];

        $i22 = (int) $l21;

        $r22.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int sourceEnd> = $i22;

        $l23 = $l21 >>> 32;

        $i24 = (int) $l23;

        $r22.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int sourceStart> = $i24;

        $r16 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: char[][] identifierStack>;

        $i25 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i26 = $i25 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr> = $i26;

        $r17 = $r16[$i25];

        $r22.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: char[] name> = $r17;

        $i27 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr>;

        $i28 = $i27 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr> = $i28;

        $r18 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i29 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i30 = $i29 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i30;

        $i31 = $r18[$i29];

        $r22.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int declarationSourceStart> = $i31;

        $i32 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i33 = $i32 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i33;

        $r19 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i34 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i35 = $i34 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i35;

        $i36 = $r19[$i34];

        $r22.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int modifiersSourceStart> = $i36;

        $r20 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i37 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i38 = $i37 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i38;

        $i39 = $r20[$i37];

        $i40 = $i39 | 512;

        $r22.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int modifiers> = $i40;

        $i41 = $r22.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int modifiersSourceStart>;

        if $i41 < 0 goto label3;

        $i16 = $r22.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int modifiersSourceStart>;

        $r22.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int declarationSourceStart> = $i16;

     label3:
        $i4 = $r22.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits>;

        $i5 = $i4 & 1024;

        if $i5 != 0 goto label4;

        $i12 = $r22.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits>;

        $i13 = $i12 & 256;

        if $i13 != 0 goto label4;

        $r11 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit>;

        if $r11 == null goto label4;

        $r13 = $r22.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: char[] name>;

        $r12 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit>;

        $r14 = virtualinvoke $r12.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: char[] getMainTypeName()>();

        $z0 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: boolean equals(char[],char[])>($r13, $r14);

        if $z0 != 0 goto label4;

        $i14 = $r22.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits>;

        $i15 = $i14 | 4096;

        $r22.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits> = $i15;

     label4:
        $r21 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] expressionLengthStack>;

        $i42 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        $i43 = $i42 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr> = $i43;

        $i44 = $r21[$i42];

        if $i44 == 0 goto label5;

        $r9 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i9 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i10 = $i9 - $i44;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr> = $i10;

        $i11 = $i10 + 1;

        $r10 = newarray (org.eclipse.jdt.internal.compiler.ast.Annotation)[$i44];

        $r22.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.Annotation[] annotations> = $r10;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, $i11, $r10, 0, $i44);

     label5:
        $i6 = $r22.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int sourceEnd>;

        $i7 = $i6 + 1;

        $r22.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bodyStart> = $i7;

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnAstStack(org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r22);

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int listLength> = 0;

        $r5 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r5 == null goto label6;

        $i8 = $r22.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bodyStart>;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastCheckPoint> = $i8;

        $r7 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $r8 = virtualinvoke $r7.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,int)>($r22, 0);

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement> = $r8;

        $i46 = (int) -1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastIgnoredToken> = $i46;

     label6:
        $r6 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc>;

        $r22.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc> = $r6;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc> = null;

        return;
    }

    protected void consumeInterfaceMemberDeclarations()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void concatNodeLists()>();

        return;
    }

    protected void consumeInterfaceMemberDeclarationsopt()
    {
        int $i0, $i1;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int nestedType>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int nestedType> = $i1;

        return;
    }

    protected void consumeInterfaceType()
    {
        int $i0, $i1;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeReference getTypeReference(int)>(0);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnAstStack(org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r1);

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int listLength>;

        $i1 = $i0 + 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int listLength> = $i1;

        return;
    }

    protected void consumeInterfaceTypeList()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void optimizedConcatNodeLists()>();

        return;
    }

    protected void consumeInternalCompilationUnit()
    {
        org.eclipse.jdt.internal.compiler.ast.Javadoc $r11;
        org.eclipse.jdt.internal.compiler.CompilationResult $r6;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] $r2, $r9;
        char[] $r7;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration $r4;
        org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration $r1, $r3, $r5, $r8, $r10;
        boolean $z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit>;

        $z0 = virtualinvoke $r1.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: boolean isPackageInfo()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit>;

        $r2 = newarray (org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)[1];

        $r3.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] types> = $r2;

        $r4 = new org.eclipse.jdt.internal.compiler.ast.TypeDeclaration;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit>;

        $r6 = $r5.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: org.eclipse.jdt.internal.compiler.CompilationResult compilationResult>;

        specialinvoke $r4.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: void <init>(org.eclipse.jdt.internal.compiler.CompilationResult)>($r6);

        $r7 = <org.eclipse.jdt.internal.compiler.lookup.TypeConstants: char[] PACKAGE_INFO_NAME>;

        $r4.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: char[] name> = $r7;

        $r4.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int modifiers> = 512;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit>;

        $r9 = $r8.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] types>;

        $r9[0] = $r4;

        $r10 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit>;

        $r11 = $r10.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc>;

        $r4.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc> = $r11;

     label1:
        return;
    }

    protected void consumeInternalCompilationUnitWithTypes()
    {
        org.eclipse.jdt.internal.compiler.ast.Javadoc $r20;
        int[] $r1;
        boolean $z0;
        org.eclipse.jdt.internal.compiler.CompilationResult $r15;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration $r13;
        org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration $r2, $r4, $r5, $r9, $r10, $r14, $r17, $r19;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] $r3, $r6, $r8, $r11, $r18;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r7, $r12;
        char[] $r16;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] astLengthStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr> = $i1;

        $i2 = $r1[$i0];

        if $i2 == 0 goto label2;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit>;

        $z0 = virtualinvoke $r2.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: boolean isPackageInfo()>();

        if $z0 == 0 goto label1;

        $r9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit>;

        $i7 = $i2 + 1;

        $r8 = newarray (org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)[$i7];

        $r9.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] types> = $r8;

        $i8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i9 = $i8 - $i2;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr> = $i9;

        $r12 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i10 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i11 = $i10 + 1;

        $r10 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit>;

        $r11 = $r10.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] types>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r12, $i11, $r11, 1, $i2);

        $r13 = new org.eclipse.jdt.internal.compiler.ast.TypeDeclaration;

        $r14 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit>;

        $r15 = $r14.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: org.eclipse.jdt.internal.compiler.CompilationResult compilationResult>;

        specialinvoke $r13.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: void <init>(org.eclipse.jdt.internal.compiler.CompilationResult)>($r15);

        $r16 = <org.eclipse.jdt.internal.compiler.lookup.TypeConstants: char[] PACKAGE_INFO_NAME>;

        $r13.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: char[] name> = $r16;

        $r13.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int modifiers> = 512;

        $r17 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit>;

        $r18 = $r17.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] types>;

        $r18[0] = $r13;

        $r19 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit>;

        $r20 = $r19.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc>;

        $r13.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc> = $r20;

        goto label2;

     label1:
        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit>;

        $r3 = newarray (org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)[$i2];

        $r4.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] types> = $r3;

        $i3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i4 = $i3 - $i2;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr> = $i4;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i6 = $i5 + 1;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit>;

        $r6 = $r5.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] types>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, $i6, $r6, 0, $i2);

     label2:
        return;
    }

    protected void consumeInvalidAnnotationTypeDeclaration()
    {
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r4;
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r2;
        int $i0, $i1, $i2, $i4;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r1;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration r3;
        boolean $z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $r2 = $r1[$i0];

        r3 = (org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) $r2;

        $z0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean statementRecoveryActivated>;

        if $z0 != 0 goto label1;

        $r4 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void illegalLocalTypeDeclaration(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)>(r3);

     label1:
        $i1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i2 = $i1 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr> = $i2;

        $i4 = (int) -1;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnAstLengthStack(int)>($i4);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void concatNodeLists()>();

        return;
    }

    protected void consumeInvalidConstructorDeclaration()
    {
        org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration r3;
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $r2 = $r1[$i0];

        r3 = (org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration) $r2;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endPosition>;

        r3.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: int bodyEnd> = $i1;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        $i3 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int flushCommentsDefinedPriorTo(int)>($i2);

        r3.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: int declarationSourceEnd> = $i3;

        $i4 = r3.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: int modifiers>;

        $i5 = $i4 | 16777216;

        r3.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: int modifiers> = $i5;

        return;
    }

    protected void consumeInvalidConstructorDeclaration(boolean)
    {
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r3;
        int[] $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r2;
        boolean z0;
        org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration $r4;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $i9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i10 = $i9 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i10;

     label1:
        if z0 == 0 goto label2;

        $i7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int realBlockPtr>;

        $i8 = $i7 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int realBlockPtr> = $i8;

     label2:
        if z0 == 0 goto label3;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] astLengthStack>;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr>;

        $i3 = $i2 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr> = $i3;

        $i4 = $r1[$i2];

        if $i4 == 0 goto label3;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i6 = $i5 - $i4;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr> = $i6;

     label3:
        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $r3 = $r2[$i11];

        $r4 = (org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration) $r3;

        $i12 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        $r4.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: int bodyEnd> = $i12;

        $i13 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        $i14 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int flushCommentsDefinedPriorTo(int)>($i13);

        $r4.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: int declarationSourceEnd> = $i14;

        if z0 != 0 goto label4;

        $i0 = $r4.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: int modifiers>;

        $i1 = $i0 | 16777216;

        $r4.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: int modifiers> = $i1;

     label4:
        return;
    }

    protected void consumeInvalidInterfaceDeclaration()
    {
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r4;
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r2;
        int $i0, $i1, $i2, $i4;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r1;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration r3;
        boolean $z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $r2 = $r1[$i0];

        r3 = (org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) $r2;

        $z0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean statementRecoveryActivated>;

        if $z0 != 0 goto label1;

        $r4 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void illegalLocalTypeDeclaration(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)>(r3);

     label1:
        $i1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i2 = $i1 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr> = $i2;

        $i4 = (int) -1;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnAstLengthStack(int)>($i4);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void concatNodeLists()>();

        return;
    }

    protected void consumeInvalidEnumDeclaration()
    {
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r4;
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r2;
        int $i0, $i1, $i2, $i4;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r1;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration r3;
        boolean $z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $r2 = $r1[$i0];

        r3 = (org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) $r2;

        $z0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean statementRecoveryActivated>;

        if $z0 != 0 goto label1;

        $r4 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void illegalLocalTypeDeclaration(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)>(r3);

     label1:
        $i1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i2 = $i1 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr> = $i2;

        $i4 = (int) -1;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnAstLengthStack(int)>($i4);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void concatNodeLists()>();

        return;
    }

    protected void consumeInvalidMethodDeclaration()
    {
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r4;
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r3;
        int[] $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        org.eclipse.jdt.internal.compiler.ast.MethodDeclaration $r5;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r2;
        boolean $z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i1;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int realBlockPtr>;

        $i3 = $i2 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int realBlockPtr> = $i3;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] astLengthStack>;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr>;

        $i5 = $i4 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr> = $i5;

        $i6 = $r1[$i4];

        if $i6 == 0 goto label1;

        $i11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i12 = $i11 - $i6;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr> = $i12;

     label1:
        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $r3 = $r2[$i7];

        $r5 = (org.eclipse.jdt.internal.compiler.ast.MethodDeclaration) $r3;

        $i8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endPosition>;

        $r5.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: int bodyEnd> = $i8;

        $i9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        $i10 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int flushCommentsDefinedPriorTo(int)>($i9);

        $r5.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: int declarationSourceEnd> = $i10;

        $z0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean statementRecoveryActivated>;

        if $z0 != 0 goto label2;

        $r4 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void abstractMethodNeedingNoBody(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)>($r5);

     label2:
        return;
    }

    protected void consumeLabel()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        return;
    }

    protected void consumeLeftParen()
    {
        int $i0;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lParenPos>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnIntStack(int)>($i0);

        return;
    }

    protected void consumeLocalVariableDeclaration()
    {
        int[] $r1, $r2, $r5, $r6;
        int $i0, i1, $i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i12;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r3, $r4;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] astLengthStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr>;

        i1 = $r1[$i0];

        $i4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] variablesCounter>;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int nestedType>;

        $i3 = $r2[$i2];

        $i5 = $i4 - $i3;

        i6 = $i5 + 1;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i7 = i6 - 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, i6, $r3, $i7, i1);

        $i8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i9 = $i8 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr> = $i9;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] astLengthStack>;

        $i10 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr>;

        $i11 = $i10 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr> = $i11;

        $r5[$i11] = i1;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] variablesCounter>;

        $i12 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int nestedType>;

        $r6[$i12] = 0;

        return;
    }

    protected void consumeLocalVariableDeclarationStatement()
    {
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r4;
        int[] $r1, $r2;
        int $i0, $i1, $i2, $i3, i4, $i5, $i6, $i7, $i8, i9, $i11;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r3;
        org.eclipse.jdt.internal.compiler.ast.LocalDeclaration r5;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] realBlockStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int realBlockPtr>;

        $i1 = $r1[$i0];

        $i2 = $i1 + 1;

        $r1[$i0] = $i2;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] astLengthStack>;

        $i3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr>;

        i4 = $r2[$i3];

        i9 = i4 - 1;

        goto label2;

     label1:
        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i6 = $i5 - i9;

        $r4 = $r3[$i6];

        r5 = (org.eclipse.jdt.internal.compiler.ast.LocalDeclaration) $r4;

        $i7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        r5.<org.eclipse.jdt.internal.compiler.ast.LocalDeclaration: int declarationSourceEnd> = $i7;

        $i8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        r5.<org.eclipse.jdt.internal.compiler.ast.LocalDeclaration: int declarationEnd> = $i8;

        $i11 = (int) -1;

        i9 = i9 + $i11;

     label2:
        if i9 >= 0 goto label1;

        return;
    }

    protected void consumeMarkerAnnotation()
    {
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r10;
        long $l5;
        org.eclipse.jdt.internal.compiler.parser.RecoveredAnnotation $r6;
        byte $b6;
        int[] $r3;
        int i0, $i1, $i2, $i3, $i4, $i7, $i8, $i9;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        boolean $z0, $z1;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r9;
        org.eclipse.jdt.internal.compiler.ast.MarkerAnnotation $r12;
        org.eclipse.jdt.internal.compiler.parser.RecoveredElement $r4, $r5, $r7, $r11;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r1;
        org.eclipse.jdt.internal.compiler.impl.CompilerOptions $r8;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $r1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeReference getAnnotationType()>();

        $r12 = new org.eclipse.jdt.internal.compiler.ast.MarkerAnnotation;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i2 = $i1 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i2;

        $i3 = $r3[$i1];

        specialinvoke $r12.<org.eclipse.jdt.internal.compiler.ast.MarkerAnnotation: void <init>(org.eclipse.jdt.internal.compiler.ast.TypeReference,int)>($r1, $i3);

        $i4 = $r12.<org.eclipse.jdt.internal.compiler.ast.MarkerAnnotation: int sourceEnd>;

        $r12.<org.eclipse.jdt.internal.compiler.ast.MarkerAnnotation: int declarationSourceEnd> = $i4;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnExpressionStack(org.eclipse.jdt.internal.compiler.ast.Expression)>($r12);

        $z0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean statementRecoveryActivated>;

        if $z0 != 0 goto label1;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.CompilerOptions options>;

        $l5 = $r8.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long sourceLevel>;

        $b6 = $l5 cmp 3211264L;

        $i9 = (int) $b6;

        if $i9 >= 0 goto label1;

        $i8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastErrorEndPositionBeforeRecovery>;

        $r9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i7 = $r9.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        if $i8 >= $i7 goto label1;

        $r10 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        virtualinvoke $r10.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void invalidUsageOfAnnotation(org.eclipse.jdt.internal.compiler.ast.Annotation)>($r12);

     label1:
        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean recordStringLiterals> = 1;

        $r11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r11 == null goto label2;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $z1 = $r4 instanceof org.eclipse.jdt.internal.compiler.parser.RecoveredAnnotation;

        if $z1 == 0 goto label2;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $r6 = (org.eclipse.jdt.internal.compiler.parser.RecoveredAnnotation) $r5;

        $r7 = virtualinvoke $r6.<org.eclipse.jdt.internal.compiler.parser.RecoveredAnnotation: org.eclipse.jdt.internal.compiler.parser.RecoveredElement addAnnotation(org.eclipse.jdt.internal.compiler.ast.Annotation,int)>($r12, i0);

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement> = $r7;

     label2:
        return;
    }

    protected void consumeMemberValueArrayInitializer()
    {
        int[] $r1;
        int $i0, $i1, $i2;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] expressionLengthStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr> = $i1;

        $i2 = $r1[$i0];

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void arrayInitializer(int)>($i2);

        return;
    }

    protected void consumeMemberValueAsName()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.NameReference $r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.NameReference getUnspecifiedReferenceOptimized()>();

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnExpressionStack(org.eclipse.jdt.internal.compiler.ast.Expression)>($r1);

        return;
    }

    protected void consumeMemberValuePair()
    {
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r4;
        long l3, $l7;
        char[][] $r1;
        org.eclipse.jdt.internal.compiler.ast.MemberValuePair $r6;
        org.eclipse.jdt.internal.compiler.parser.RecoveredAnnotation r10;
        long[] $r3;
        org.eclipse.jdt.internal.compiler.ast.Expression r5;
        int $i0, $i1, $i2, $i4, $i5, i6, i8, $i9, $i10, $i11, $i12;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        boolean $z0;
        org.eclipse.jdt.internal.compiler.parser.RecoveredElement $r7, $r8, $r9;
        char[] r2;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: char[][] identifierStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        r2 = $r1[$i0];

        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: long[] identifierPositionStack>;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i2 = $i1 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr> = $i2;

        l3 = $r3[$i1];

        $i4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr>;

        $i5 = $i4 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr> = $i5;

        i6 = (int) l3;

        $l7 = l3 >>> 32;

        i8 = (int) $l7;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i10 = $i9 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr> = $i10;

        r5 = $r4[$i9];

        $i11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        $i12 = $i11 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr> = $i12;

        $r6 = new org.eclipse.jdt.internal.compiler.ast.MemberValuePair;

        specialinvoke $r6.<org.eclipse.jdt.internal.compiler.ast.MemberValuePair: void <init>(char[],int,int,org.eclipse.jdt.internal.compiler.ast.Expression)>(r2, i8, i6, r5);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnAstStack(org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r6);

        $r7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r7 == null goto label1;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $z0 = $r8 instanceof org.eclipse.jdt.internal.compiler.parser.RecoveredAnnotation;

        if $z0 == 0 goto label1;

        $r9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        r10 = (org.eclipse.jdt.internal.compiler.parser.RecoveredAnnotation) $r9;

        virtualinvoke r10.<org.eclipse.jdt.internal.compiler.parser.RecoveredAnnotation: void setKind(int)>(1);

     label1:
        return;
    }

    protected void consumeMemberValuePairs()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void concatNodeLists()>();

        return;
    }

    protected void consumeMemberValues()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void concatExpressionLists()>();

        return;
    }

    protected void consumeMethodBody()
    {
        int[] $r1;
        int $i0, $i1, $i2;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] nestedMethod>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int nestedType>;

        $i1 = $r1[$i0];

        $i2 = $i1 - 1;

        $r1[$i0] = $i2;

        return;
    }

    protected void consumeMethodDeclaration(boolean)
    {
        org.eclipse.jdt.internal.compiler.ast.Statement[] $r4, r5;
        int[] $r1, $r2;
        boolean z0, $z1, $z2;
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, i19, $i20, $i21, $i22, $i23;
        org.eclipse.jdt.internal.compiler.ast.MethodDeclaration $r8;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r3, $r6;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $i15 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i16 = $i15 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i16;

        $i17 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i18 = $i17 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i18;

     label1:
        i19 = 0;

        r5 = (org.eclipse.jdt.internal.compiler.ast.Statement[]) null;

        if z0 == 0 goto label2;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] realBlockStack>;

        $i7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int realBlockPtr>;

        $i8 = $i7 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int realBlockPtr> = $i8;

        i19 = $r1[$i7];

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] astLengthStack>;

        $i9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr>;

        $i10 = $i9 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr> = $i10;

        $i11 = $r2[$i9];

        if $i11 == 0 goto label2;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i12 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i13 = $i12 - $i11;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr> = $i13;

        $i14 = $i13 + 1;

        $r4 = newarray (org.eclipse.jdt.internal.compiler.ast.Statement)[$i11];

        r5 = $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, $i14, $r4, 0, $i11);

     label2:
        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i20 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $r7 = $r6[$i20];

        $r8 = (org.eclipse.jdt.internal.compiler.ast.MethodDeclaration) $r7;

        $r8.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: org.eclipse.jdt.internal.compiler.ast.Statement[] statements> = r5;

        $r8.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: int explicitDeclarations> = i19;

        if z0 != 0 goto label3;

        $i5 = $r8.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: int modifiers>;

        $i6 = $i5 | 16777216;

        $r8.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: int modifiers> = $i6;

        goto label5;

     label3:
        $z1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean diet>;

        if $z1 == 0 goto label4;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int dietInt>;

        if $i4 == 0 goto label5;

     label4:
        if r5 != null goto label5;

        $i1 = $r8.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: int bodyStart>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endPosition>;

        $z2 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean containsComment(int,int)>($i1, $i0);

        if $z2 != 0 goto label5;

        $i2 = $r8.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: int bits>;

        $i3 = $i2 | 8;

        $r8.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: int bits> = $i3;

     label5:
        $i21 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endPosition>;

        $r8.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: int bodyEnd> = $i21;

        $i22 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        $i23 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int flushCommentsDefinedPriorTo(int)>($i22);

        $r8.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: int declarationSourceEnd> = $i23;

        return;
    }

    protected void consumeMethodHeader()
    {
        boolean $z0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r2, $r13;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r1;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r10, $r11, $r18;
        org.eclipse.jdt.internal.compiler.parser.RecoveredElement $r4, $r5, $r6, $r9, $r12, $r14, $r15, $r16, $r17;
        org.eclipse.jdt.internal.compiler.parser.RecoveredMethod $r7;
        org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration r3, $r8;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $r2 = $r1[$i0];

        r3 = (org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration) $r2;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int currentToken>;

        if $i1 != 69 goto label1;

        $r18 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i12 = $r18.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        r3.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: int bodyStart> = $i12;

     label1:
        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r4 == null goto label4;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int currentToken>;

        if $i2 != 27 goto label2;

        $i6 = r3.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: int modifiers>;

        $i7 = $i6 | 16777216;

        r3.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: int modifiers> = $i7;

        $r10 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i8 = $r10.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        $i9 = $i8 - 1;

        r3.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: int declarationSourceEnd> = $i9;

        $r11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i10 = $r11.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        $i11 = $i10 - 1;

        r3.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: int bodyEnd> = $i11;

        $r12 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $r13 = virtualinvoke $r12.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.ast.ASTNode parseTree()>();

        if $r13 != r3 goto label3;

        $r14 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $r15 = $r14.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.parser.RecoveredElement parent>;

        if $r15 == null goto label3;

        $r16 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $r17 = $r16.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.parser.RecoveredElement parent>;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement> = $r17;

        goto label3;

     label2:
        $i3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int currentToken>;

        if $i3 != 69 goto label3;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $z0 = $r5 instanceof org.eclipse.jdt.internal.compiler.parser.RecoveredMethod;

        if $z0 == 0 goto label3;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $r7 = (org.eclipse.jdt.internal.compiler.parser.RecoveredMethod) $r6;

        $r8 = $r7.<org.eclipse.jdt.internal.compiler.parser.RecoveredMethod: org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration methodDeclaration>;

        if $r8 == r3 goto label3;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean ignoreNextOpeningBrace> = 1;

        $r9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $i4 = $r9.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: int bracketBalance>;

        $i5 = $i4 + 1;

        $r9.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: int bracketBalance> = $i5;

     label3:
        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean restartRecovery> = 1;

     label4:
        return;
    }

    protected void consumeMethodHeaderDefaultValue()
    {
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r8;
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r2;
        org.eclipse.jdt.internal.compiler.ast.AnnotationMethodDeclaration $r5, $r10;
        org.eclipse.jdt.internal.compiler.ast.Expression $r6, $r9;
        int[] $r4;
        int $i0, $i1, $i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        org.eclipse.jdt.internal.compiler.ast.MethodDeclaration r3;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r1;
        boolean $z0, $z1;
        org.eclipse.jdt.internal.compiler.parser.RecoveredElement $r7, $r11;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $r2 = $r1[$i0];

        r3 = (org.eclipse.jdt.internal.compiler.ast.MethodDeclaration) $r2;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] expressionLengthStack>;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        $i2 = $i1 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr> = $i2;

        i3 = $r4[$i1];

        if i3 != 1 goto label2;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i6 = $i5 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i6;

        $i7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i8 = $i7 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i8;

        $z1 = virtualinvoke r3.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: boolean isAnnotationMethod()>();

        if $z1 == 0 goto label1;

        $r10 = (org.eclipse.jdt.internal.compiler.ast.AnnotationMethodDeclaration) r3;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r9 = $r8[$i11];

        $r10.<org.eclipse.jdt.internal.compiler.ast.AnnotationMethodDeclaration: org.eclipse.jdt.internal.compiler.ast.Expression defaultValue> = $r9;

        $i12 = r3.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: int modifiers>;

        $i13 = $i12 | 131072;

        r3.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: int modifiers> = $i13;

     label1:
        $i9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i10 = $i9 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr> = $i10;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean recordStringLiterals> = 1;

     label2:
        $r11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r11 == null goto label3;

        $z0 = virtualinvoke r3.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: boolean isAnnotationMethod()>();

        if $z0 == 0 goto label3;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $r5 = (org.eclipse.jdt.internal.compiler.ast.AnnotationMethodDeclaration) r3;

        $r6 = $r5.<org.eclipse.jdt.internal.compiler.ast.AnnotationMethodDeclaration: org.eclipse.jdt.internal.compiler.ast.Expression defaultValue>;

        $i4 = $r6.<org.eclipse.jdt.internal.compiler.ast.Expression: int sourceEnd>;

        virtualinvoke $r7.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: void updateSourceEndIfNecessary(int)>($i4);

     label3:
        return;
    }

    protected void consumeMethodHeaderExtendedDims()
    {
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r2;
        org.eclipse.jdt.internal.compiler.ast.AnnotationMethodDeclaration $r8;
        int[] $r4;
        int $i0, $i1, $i2, i3, $i4, $i5, i6, $i7, $i8, $i9, $i10;
        org.eclipse.jdt.internal.compiler.ast.MethodDeclaration r3;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r1;
        boolean $z0;
        org.eclipse.jdt.internal.compiler.parser.RecoveredElement $r7;
        org.eclipse.jdt.internal.compiler.ast.TypeReference r5, $r6;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $r2 = $r1[$i0];

        r3 = (org.eclipse.jdt.internal.compiler.ast.MethodDeclaration) $r2;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i2 = $i1 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i2;

        i3 = $r4[$i1];

        $z0 = virtualinvoke r3.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: boolean isAnnotationMethod()>();

        if $z0 == 0 goto label1;

        $r8 = (org.eclipse.jdt.internal.compiler.ast.AnnotationMethodDeclaration) r3;

        $r8.<org.eclipse.jdt.internal.compiler.ast.AnnotationMethodDeclaration: int extendedDimensions> = i3;

     label1:
        if i3 == 0 goto label3;

        r5 = r3.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeReference returnType>;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endPosition>;

        r3.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: int sourceEnd> = $i4;

        $i5 = virtualinvoke r5.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int dimensions()>();

        i6 = $i5 + i3;

        $r6 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeReference copyDims(org.eclipse.jdt.internal.compiler.ast.TypeReference,int)>(r5, i6);

        r3.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeReference returnType> = $r6;

        $i7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int currentToken>;

        if $i7 != 69 goto label2;

        $i9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endPosition>;

        $i10 = $i9 + 1;

        r3.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: int bodyStart> = $i10;

     label2:
        $r7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r7 == null goto label3;

        $i8 = r3.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: int bodyStart>;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastCheckPoint> = $i8;

     label3:
        return;
    }

    protected void consumeMethodHeaderName(boolean)
    {
        org.eclipse.jdt.internal.compiler.ast.Javadoc $r12;
        char[][] $r4;
        org.eclipse.jdt.internal.compiler.CompilationResult $r3, $r28;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r8, $r17;
        org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration $r2, $r27;
        long $l17, $l33;
        org.eclipse.jdt.internal.compiler.ast.MethodDeclaration r29, $r31;
        org.eclipse.jdt.internal.compiler.parser.Parser r1;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r18, $r19, $r21, $r22;
        char[] $r5;
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r24;
        org.eclipse.jdt.internal.compiler.ast.AnnotationMethodDeclaration $r30;
        int[] $r7, $r9, $r10, $r11, $r20, $r23;
        boolean z0, $z1;
        org.eclipse.jdt.internal.compiler.ast.Annotation[] $r25;
        long[] $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i35;
        org.eclipse.jdt.internal.compiler.parser.RecoveredElement $r13, $r14, $r15, $r16;

        r1 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r30 = new org.eclipse.jdt.internal.compiler.ast.AnnotationMethodDeclaration;

        $r27 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit>;

        $r28 = $r27.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: org.eclipse.jdt.internal.compiler.CompilationResult compilationResult>;

        specialinvoke $r30.<org.eclipse.jdt.internal.compiler.ast.AnnotationMethodDeclaration: void <init>(org.eclipse.jdt.internal.compiler.CompilationResult)>($r28);

        r29 = $r30;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean recordStringLiterals> = 0;

        goto label2;

     label1:
        $r31 = new org.eclipse.jdt.internal.compiler.ast.MethodDeclaration;

        $r2 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit>;

        $r3 = $r2.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: org.eclipse.jdt.internal.compiler.CompilationResult compilationResult>;

        specialinvoke $r31.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: void <init>(org.eclipse.jdt.internal.compiler.CompilationResult)>($r3);

        r29 = $r31;

     label2:
        $r4 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: char[][] identifierStack>;

        $i0 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $r5 = $r4[$i0];

        r29.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: char[] selector> = $r5;

        $r6 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: long[] identifierPositionStack>;

        $i1 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i2 = $i1 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr> = $i2;

        $l33 = $r6[$i1];

        $i3 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr>;

        $i4 = $i3 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr> = $i4;

        $r7 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i5 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i6 = $i5 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i6;

        $i7 = $r7[$i5];

        $r8 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeReference getTypeReference(int)>($i7);

        r29.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeReference returnType> = $r8;

        $r9 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i8 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i9 = $i8 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i9;

        $i10 = $r9[$i8];

        r29.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: int declarationSourceStart> = $i10;

        $r10 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i11 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i12 = $i11 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i12;

        $i13 = $r10[$i11];

        r29.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: int modifiers> = $i13;

        $r11 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] expressionLengthStack>;

        $i14 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        $i15 = $i14 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr> = $i15;

        $i16 = $r11[$i14];

        if $i16 == 0 goto label3;

        $r24 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i30 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i31 = $i30 - $i16;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr> = $i31;

        $i32 = $i31 + 1;

        $r25 = newarray (org.eclipse.jdt.internal.compiler.ast.Annotation)[$i16];

        r29.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: org.eclipse.jdt.internal.compiler.ast.Annotation[] annotations> = $r25;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r24, $i32, $r25, 0, $i16);

     label3:
        $r12 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc>;

        r29.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc> = $r12;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc> = null;

        $l17 = $l33 >>> 32;

        $i18 = (int) $l17;

        r29.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: int sourceStart> = $i18;

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnAstStack(org.eclipse.jdt.internal.compiler.ast.ASTNode)>(r29);

        $i19 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int lParenPos>;

        r29.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: int sourceEnd> = $i19;

        $i20 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int lParenPos>;

        $i21 = $i20 + 1;

        r29.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: int bodyStart> = $i21;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int listLength> = 0;

        $r13 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r13 == null goto label6;

        $r14 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $z1 = $r14 instanceof org.eclipse.jdt.internal.compiler.parser.RecoveredType;

        if $z1 != 0 goto label4;

        $r17 = r29.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeReference returnType>;

        $i24 = $r17.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int sourceStart>;

        $r18 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r20 = $r18.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] lineEnds>;

        $r19 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i23 = $r19.<org.eclipse.jdt.internal.compiler.parser.Scanner: int linePtr>;

        $i25 = staticinvoke <org.eclipse.jdt.internal.compiler.util.Util: int getLineNumber(int,int[],int,int)>($i24, $r20, 0, $i23);

        $i27 = r29.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: int sourceStart>;

        $r21 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r23 = $r21.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] lineEnds>;

        $r22 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i26 = $r22.<org.eclipse.jdt.internal.compiler.parser.Scanner: int linePtr>;

        $i28 = staticinvoke <org.eclipse.jdt.internal.compiler.util.Util: int getLineNumber(int,int[],int,int)>($i27, $r23, 0, $i26);

        if $i25 != $i28 goto label5;

     label4:
        $i22 = r29.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: int bodyStart>;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastCheckPoint> = $i22;

        $r15 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $r16 = virtualinvoke $r15.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,int)>(r29, 0);

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement> = $r16;

        $i35 = (int) -1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastIgnoredToken> = $i35;

        goto label6;

     label5:
        $i29 = r29.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: int sourceStart>;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastCheckPoint> = $i29;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean restartRecovery> = 1;

     label6:
        return;
    }

    protected void consumeMethodHeaderNameWithTypeParameters(boolean)
    {
        org.eclipse.jdt.internal.compiler.ast.Javadoc $r15;
        char[][] $r4;
        org.eclipse.jdt.internal.compiler.CompilationResult $r3, $r33;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r8, $r22;
        org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration $r2, $r32;
        long $l23, $l39;
        org.eclipse.jdt.internal.compiler.ast.MethodDeclaration r34, $r36;
        org.eclipse.jdt.internal.compiler.parser.Parser r1;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r11;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r23, $r24, $r26, $r27;
        char[] $r5;
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r29;
        org.eclipse.jdt.internal.compiler.ast.AnnotationMethodDeclaration $r35;
        int[] $r7, $r9, $r12, $r13, $r14, $r25, $r28;
        org.eclipse.jdt.internal.compiler.parser.RecoveredType $r21;
        boolean z0, $z1;
        org.eclipse.jdt.internal.compiler.ast.Annotation[] $r30;
        long[] $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i40, $i42;
        org.eclipse.jdt.internal.compiler.ast.TypeParameter[] $r10;
        org.eclipse.jdt.internal.compiler.parser.RecoveredElement $r16, $r17, $r18, $r19, $r20;

        r1 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r35 = new org.eclipse.jdt.internal.compiler.ast.AnnotationMethodDeclaration;

        $r32 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit>;

        $r33 = $r32.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: org.eclipse.jdt.internal.compiler.CompilationResult compilationResult>;

        specialinvoke $r35.<org.eclipse.jdt.internal.compiler.ast.AnnotationMethodDeclaration: void <init>(org.eclipse.jdt.internal.compiler.CompilationResult)>($r33);

        r34 = $r35;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean recordStringLiterals> = 0;

        goto label2;

     label1:
        $r36 = new org.eclipse.jdt.internal.compiler.ast.MethodDeclaration;

        $r2 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit>;

        $r3 = $r2.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: org.eclipse.jdt.internal.compiler.CompilationResult compilationResult>;

        specialinvoke $r36.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: void <init>(org.eclipse.jdt.internal.compiler.CompilationResult)>($r3);

        r34 = $r36;

     label2:
        $r4 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: char[][] identifierStack>;

        $i0 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $r5 = $r4[$i0];

        r34.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: char[] selector> = $r5;

        $r6 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: long[] identifierPositionStack>;

        $i1 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i2 = $i1 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr> = $i2;

        $l39 = $r6[$i1];

        $i3 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr>;

        $i4 = $i3 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr> = $i4;

        $r7 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i5 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i6 = $i5 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i6;

        $i7 = $r7[$i5];

        $r8 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeReference getTypeReference(int)>($i7);

        r34.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeReference returnType> = $r8;

        $r9 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] genericsLengthStack>;

        $i8 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsLengthPtr>;

        $i9 = $i8 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsLengthPtr> = $i9;

        $i40 = $r9[$i8];

        $i10 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr>;

        $i11 = $i10 - $i40;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr> = $i11;

        $r11 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] genericsStack>;

        $i12 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr>;

        $i13 = $i12 + 1;

        $r10 = newarray (org.eclipse.jdt.internal.compiler.ast.TypeParameter)[$i40];

        r34.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeParameter[] typeParameters> = $r10;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r11, $i13, $r10, 0, $i40);

        $r12 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i14 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i15 = $i14 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i15;

        $i16 = $r12[$i14];

        r34.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: int declarationSourceStart> = $i16;

        $r13 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i17 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i18 = $i17 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i18;

        $i19 = $r13[$i17];

        r34.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: int modifiers> = $i19;

        $r14 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] expressionLengthStack>;

        $i20 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        $i21 = $i20 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr> = $i21;

        $i22 = $r14[$i20];

        if $i22 == 0 goto label3;

        $r29 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i36 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i37 = $i36 - $i22;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr> = $i37;

        $i38 = $i37 + 1;

        $r30 = newarray (org.eclipse.jdt.internal.compiler.ast.Annotation)[$i22];

        r34.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: org.eclipse.jdt.internal.compiler.ast.Annotation[] annotations> = $r30;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r29, $i38, $r30, 0, $i22);

     label3:
        $r15 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc>;

        r34.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc> = $r15;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc> = null;

        $l23 = $l39 >>> 32;

        $i24 = (int) $l23;

        r34.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: int sourceStart> = $i24;

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnAstStack(org.eclipse.jdt.internal.compiler.ast.ASTNode)>(r34);

        $i25 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int lParenPos>;

        r34.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: int sourceEnd> = $i25;

        $i26 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int lParenPos>;

        $i27 = $i26 + 1;

        r34.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: int bodyStart> = $i27;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int listLength> = 0;

        $r16 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r16 == null goto label7;

        $r17 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $z1 = $r17 instanceof org.eclipse.jdt.internal.compiler.parser.RecoveredType;

        if $z1 != 0 goto label4;

        $r22 = r34.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeReference returnType>;

        $i30 = $r22.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int sourceStart>;

        $r23 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r25 = $r23.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] lineEnds>;

        $r24 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i29 = $r24.<org.eclipse.jdt.internal.compiler.parser.Scanner: int linePtr>;

        $i31 = staticinvoke <org.eclipse.jdt.internal.compiler.util.Util: int getLineNumber(int,int[],int,int)>($i30, $r25, 0, $i29);

        $i33 = r34.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: int sourceStart>;

        $r26 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r28 = $r26.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] lineEnds>;

        $r27 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i32 = $r27.<org.eclipse.jdt.internal.compiler.parser.Scanner: int linePtr>;

        $i34 = staticinvoke <org.eclipse.jdt.internal.compiler.util.Util: int getLineNumber(int,int[],int,int)>($i33, $r28, 0, $i32);

        if $i31 != $i34 goto label6;

     label4:
        if $z1 == 0 goto label5;

        $r20 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $r21 = (org.eclipse.jdt.internal.compiler.parser.RecoveredType) $r20;

        $r21.<org.eclipse.jdt.internal.compiler.parser.RecoveredType: org.eclipse.jdt.internal.compiler.ast.TypeParameter[] pendingTypeParameters> = null;

     label5:
        $i28 = r34.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: int bodyStart>;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastCheckPoint> = $i28;

        $r18 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $r19 = virtualinvoke $r18.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,int)>(r34, 0);

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement> = $r19;

        $i42 = (int) -1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastIgnoredToken> = $i42;

        goto label7;

     label6:
        $i35 = r34.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: int sourceStart>;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastCheckPoint> = $i35;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean restartRecovery> = 1;

     label7:
        return;
    }

    protected void consumeMethodHeaderRightParen()
    {
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r3, $r7;
        int[] $r1;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i15;
        org.eclipse.jdt.internal.compiler.ast.Argument[] $r8;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r2, $r9;
        boolean $z0;
        org.eclipse.jdt.internal.compiler.parser.RecoveredElement $r5, $r6, $r10, $r11;
        org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration r4;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] astLengthStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr> = $i1;

        i2 = $r1[$i0];

        $i3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i4 = $i3 - i2;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr> = $i4;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $r3 = $r2[$i5];

        r4 = (org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration) $r3;

        $i6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int rParenPos>;

        r4.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: int sourceEnd> = $i6;

        if i2 == 0 goto label1;

        $r9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i12 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i13 = $i12 + 1;

        $r8 = newarray (org.eclipse.jdt.internal.compiler.ast.Argument)[i2];

        r4.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.ast.Argument[] arguments> = $r8;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, $i13, $r8, 0, i2);

     label1:
        $i7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int rParenPos>;

        $i8 = $i7 + 1;

        r4.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: int bodyStart> = $i8;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int listLength> = 0;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r5 == null goto label4;

        $i9 = r4.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: int bodyStart>;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastCheckPoint> = $i9;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $r7 = virtualinvoke $r6.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.ast.ASTNode parseTree()>();

        if $r7 != r4 goto label2;

        return;

     label2:
        $z0 = virtualinvoke r4.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: boolean isConstructor()>();

        if $z0 == 0 goto label4;

        if i2 != 0 goto label3;

        $i10 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int currentToken>;

        if $i10 == 69 goto label3;

        $i11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int currentToken>;

        if $i11 != 105 goto label4;

     label3:
        $r10 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $r11 = virtualinvoke $r10.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,int)>(r4, 0);

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement> = $r11;

        $i15 = (int) -1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastIgnoredToken> = $i15;

     label4:
        return;
    }

    protected void consumeMethodHeaderThrowsClause()
    {
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r3;
        int[] $r1;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r2, $r6;
        org.eclipse.jdt.internal.compiler.ast.TypeReference[] $r5, $r7, $r9;
        org.eclipse.jdt.internal.compiler.parser.RecoveredElement $r11;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r8, $r10;
        org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration r4;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] astLengthStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr> = $i1;

        i2 = $r1[$i0];

        $i3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i4 = $i3 - i2;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr> = $i4;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $r3 = $r2[$i5];

        r4 = (org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration) $r3;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i7 = $i6 + 1;

        $r5 = newarray (org.eclipse.jdt.internal.compiler.ast.TypeReference)[i2];

        r4.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeReference[] thrownExceptions> = $r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, $i7, $r5, 0, i2);

        $r7 = r4.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeReference[] thrownExceptions>;

        $i8 = i2 - 1;

        $r8 = $r7[$i8];

        $i9 = $r8.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int sourceEnd>;

        r4.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: int sourceEnd> = $i9;

        $r9 = r4.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeReference[] thrownExceptions>;

        $i10 = i2 - 1;

        $r10 = $r9[$i10];

        $i11 = $r10.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int sourceEnd>;

        $i12 = $i11 + 1;

        r4.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: int bodyStart> = $i12;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int listLength> = 0;

        $r11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r11 == null goto label1;

        $i13 = r4.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: int bodyStart>;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastCheckPoint> = $i13;

     label1:
        return;
    }

    protected void consumeMethodInvocationName()
    {
        long $l2, $l3;
        char[][] $r3;
        long[] $r2;
        org.eclipse.jdt.internal.compiler.ast.Expression $r8;
        int[] $r5, $r6;
        org.eclipse.jdt.internal.compiler.ast.NameReference $r7;
        int $i0, $i1, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.MessageSend $r1;
        char[] $r4;
        org.eclipse.jdt.internal.compiler.ast.ThisReference $r9;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.MessageSend newMessageSend()>();

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int rParenPos>;

        $r1.<org.eclipse.jdt.internal.compiler.ast.MessageSend: int sourceEnd> = $i0;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: long[] identifierPositionStack>;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $l2 = $r2[$i1];

        $r1.<org.eclipse.jdt.internal.compiler.ast.MessageSend: long nameSourcePosition> = $l2;

        $l3 = $l2 >>> 32;

        $i4 = (int) $l3;

        $r1.<org.eclipse.jdt.internal.compiler.ast.MessageSend: int sourceStart> = $i4;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: char[][] identifierStack>;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i6 = $i5 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr> = $i6;

        $r4 = $r3[$i5];

        $r1.<org.eclipse.jdt.internal.compiler.ast.MessageSend: char[] selector> = $r4;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] identifierLengthStack>;

        $i7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr>;

        $i8 = $r5[$i7];

        if $i8 != 1 goto label1;

        $r9 = staticinvoke <org.eclipse.jdt.internal.compiler.ast.ThisReference: org.eclipse.jdt.internal.compiler.ast.ThisReference implicitThis()>();

        $r1.<org.eclipse.jdt.internal.compiler.ast.MessageSend: org.eclipse.jdt.internal.compiler.ast.Expression receiver> = $r9;

        $i13 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr>;

        $i14 = $i13 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr> = $i14;

        goto label2;

     label1:
        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] identifierLengthStack>;

        $i9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr>;

        $i10 = $r6[$i9];

        $i11 = $i10 - 1;

        $r6[$i9] = $i11;

        $r7 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.NameReference getUnspecifiedReference()>();

        $r1.<org.eclipse.jdt.internal.compiler.ast.MessageSend: org.eclipse.jdt.internal.compiler.ast.Expression receiver> = $r7;

        $r8 = $r1.<org.eclipse.jdt.internal.compiler.ast.MessageSend: org.eclipse.jdt.internal.compiler.ast.Expression receiver>;

        $i12 = $r8.<org.eclipse.jdt.internal.compiler.ast.Expression: int sourceStart>;

        $r1.<org.eclipse.jdt.internal.compiler.ast.MessageSend: int sourceStart> = $i12;

     label2:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnExpressionStack(org.eclipse.jdt.internal.compiler.ast.Expression)>($r1);

        return;
    }

    protected void consumeMethodInvocationNameWithTypeArguments()
    {
        long $l2, $l3;
        char[][] $r3;
        long[] $r2;
        org.eclipse.jdt.internal.compiler.ast.Expression $r9;
        int[] $r5;
        org.eclipse.jdt.internal.compiler.ast.NameReference $r8;
        int $i0, $i1, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r7;
        org.eclipse.jdt.internal.compiler.ast.TypeReference[] $r6;
        org.eclipse.jdt.internal.compiler.ast.MessageSend $r1;
        char[] $r4;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.MessageSend newMessageSendWithTypeArguments()>();

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int rParenPos>;

        $r1.<org.eclipse.jdt.internal.compiler.ast.MessageSend: int sourceEnd> = $i0;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: long[] identifierPositionStack>;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $l2 = $r2[$i1];

        $r1.<org.eclipse.jdt.internal.compiler.ast.MessageSend: long nameSourcePosition> = $l2;

        $l3 = $l2 >>> 32;

        $i4 = (int) $l3;

        $r1.<org.eclipse.jdt.internal.compiler.ast.MessageSend: int sourceStart> = $i4;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: char[][] identifierStack>;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i6 = $i5 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr> = $i6;

        $r4 = $r3[$i5];

        $r1.<org.eclipse.jdt.internal.compiler.ast.MessageSend: char[] selector> = $r4;

        $i7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr>;

        $i8 = $i7 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr> = $i8;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] genericsLengthStack>;

        $i9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsLengthPtr>;

        $i10 = $i9 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsLengthPtr> = $i10;

        i11 = $r5[$i9];

        $i12 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr>;

        $i13 = $i12 - i11;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr> = $i13;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] genericsStack>;

        $i14 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr>;

        $i15 = $i14 + 1;

        $r6 = newarray (org.eclipse.jdt.internal.compiler.ast.TypeReference)[i11];

        $r1.<org.eclipse.jdt.internal.compiler.ast.MessageSend: org.eclipse.jdt.internal.compiler.ast.TypeReference[] typeArguments> = $r6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, $i15, $r6, 0, i11);

        $i16 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i17 = $i16 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i17;

        $r8 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.NameReference getUnspecifiedReference()>();

        $r1.<org.eclipse.jdt.internal.compiler.ast.MessageSend: org.eclipse.jdt.internal.compiler.ast.Expression receiver> = $r8;

        $r9 = $r1.<org.eclipse.jdt.internal.compiler.ast.MessageSend: org.eclipse.jdt.internal.compiler.ast.Expression receiver>;

        $i18 = $r9.<org.eclipse.jdt.internal.compiler.ast.Expression: int sourceStart>;

        $r1.<org.eclipse.jdt.internal.compiler.ast.MessageSend: int sourceStart> = $i18;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnExpressionStack(org.eclipse.jdt.internal.compiler.ast.Expression)>($r1);

        return;
    }

    protected void consumeMethodInvocationPrimary()
    {
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r5, $r8;
        long $l1, $l2;
        char[][] $r3;
        long[] $r2;
        org.eclipse.jdt.internal.compiler.ast.Expression $r6, $r7;
        int $i0, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.MessageSend $r1;
        char[] $r4;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.MessageSend newMessageSend()>();

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: long[] identifierPositionStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $l1 = $r2[$i0];

        $r1.<org.eclipse.jdt.internal.compiler.ast.MessageSend: long nameSourcePosition> = $l1;

        $l2 = $l1 >>> 32;

        $i3 = (int) $l2;

        $r1.<org.eclipse.jdt.internal.compiler.ast.MessageSend: int sourceStart> = $i3;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: char[][] identifierStack>;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i5 = $i4 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr> = $i5;

        $r4 = $r3[$i4];

        $r1.<org.eclipse.jdt.internal.compiler.ast.MessageSend: char[] selector> = $r4;

        $i6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr>;

        $i7 = $i6 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr> = $i7;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r6 = $r5[$i8];

        $r1.<org.eclipse.jdt.internal.compiler.ast.MessageSend: org.eclipse.jdt.internal.compiler.ast.Expression receiver> = $r6;

        $r7 = $r1.<org.eclipse.jdt.internal.compiler.ast.MessageSend: org.eclipse.jdt.internal.compiler.ast.Expression receiver>;

        $i9 = $r7.<org.eclipse.jdt.internal.compiler.ast.Expression: int sourceStart>;

        $r1.<org.eclipse.jdt.internal.compiler.ast.MessageSend: int sourceStart> = $i9;

        $i10 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int rParenPos>;

        $r1.<org.eclipse.jdt.internal.compiler.ast.MessageSend: int sourceEnd> = $i10;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r8[$i11] = $r1;

        return;
    }

    protected void consumeMethodInvocationPrimaryWithTypeArguments()
    {
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r8, $r11;
        char[][] $r3;
        org.eclipse.jdt.internal.compiler.ast.Expression $r9, $r10;
        int[] $r5;
        org.eclipse.jdt.internal.compiler.ast.TypeReference[] $r6;
        org.eclipse.jdt.internal.compiler.ast.MessageSend $r1;
        long $l1, $l2;
        long[] $r2;
        int $i0, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r7;
        char[] $r4;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.MessageSend newMessageSendWithTypeArguments()>();

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: long[] identifierPositionStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $l1 = $r2[$i0];

        $r1.<org.eclipse.jdt.internal.compiler.ast.MessageSend: long nameSourcePosition> = $l1;

        $l2 = $l1 >>> 32;

        $i3 = (int) $l2;

        $r1.<org.eclipse.jdt.internal.compiler.ast.MessageSend: int sourceStart> = $i3;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: char[][] identifierStack>;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i5 = $i4 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr> = $i5;

        $r4 = $r3[$i4];

        $r1.<org.eclipse.jdt.internal.compiler.ast.MessageSend: char[] selector> = $r4;

        $i6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr>;

        $i7 = $i6 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr> = $i7;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] genericsLengthStack>;

        $i8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsLengthPtr>;

        $i9 = $i8 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsLengthPtr> = $i9;

        i10 = $r5[$i8];

        $i11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr>;

        $i12 = $i11 - i10;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr> = $i12;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] genericsStack>;

        $i13 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr>;

        $i14 = $i13 + 1;

        $r6 = newarray (org.eclipse.jdt.internal.compiler.ast.TypeReference)[i10];

        $r1.<org.eclipse.jdt.internal.compiler.ast.MessageSend: org.eclipse.jdt.internal.compiler.ast.TypeReference[] typeArguments> = $r6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, $i14, $r6, 0, i10);

        $i15 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i16 = $i15 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i16;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i17 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r9 = $r8[$i17];

        $r1.<org.eclipse.jdt.internal.compiler.ast.MessageSend: org.eclipse.jdt.internal.compiler.ast.Expression receiver> = $r9;

        $r10 = $r1.<org.eclipse.jdt.internal.compiler.ast.MessageSend: org.eclipse.jdt.internal.compiler.ast.Expression receiver>;

        $i18 = $r10.<org.eclipse.jdt.internal.compiler.ast.Expression: int sourceStart>;

        $r1.<org.eclipse.jdt.internal.compiler.ast.MessageSend: int sourceStart> = $i18;

        $i19 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int rParenPos>;

        $r1.<org.eclipse.jdt.internal.compiler.ast.MessageSend: int sourceEnd> = $i19;

        $r11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i20 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r11[$i20] = $r1;

        return;
    }

    protected void consumeMethodInvocationSuper()
    {
        long $l5;
        char[][] $r4;
        long[] $r3;
        org.eclipse.jdt.internal.compiler.ast.SuperReference $r6;
        int[] $r2;
        int $i0, $i1, $i2, $i3, $i4, $i6, $i7, $i8, $i9, $i10, $i11;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.MessageSend $r1;
        char[] $r5;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.MessageSend newMessageSend()>();

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i1;

        $i2 = $r2[$i0];

        $r1.<org.eclipse.jdt.internal.compiler.ast.MessageSend: int sourceStart> = $i2;

        $i3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int rParenPos>;

        $r1.<org.eclipse.jdt.internal.compiler.ast.MessageSend: int sourceEnd> = $i3;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: long[] identifierPositionStack>;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $l5 = $r3[$i4];

        $r1.<org.eclipse.jdt.internal.compiler.ast.MessageSend: long nameSourcePosition> = $l5;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: char[][] identifierStack>;

        $i6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i7 = $i6 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr> = $i7;

        $r5 = $r4[$i6];

        $r1.<org.eclipse.jdt.internal.compiler.ast.MessageSend: char[] selector> = $r5;

        $i8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr>;

        $i9 = $i8 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr> = $i9;

        $r6 = new org.eclipse.jdt.internal.compiler.ast.SuperReference;

        $i11 = $r1.<org.eclipse.jdt.internal.compiler.ast.MessageSend: int sourceStart>;

        $i10 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endPosition>;

        specialinvoke $r6.<org.eclipse.jdt.internal.compiler.ast.SuperReference: void <init>(int,int)>($i11, $i10);

        $r1.<org.eclipse.jdt.internal.compiler.ast.MessageSend: org.eclipse.jdt.internal.compiler.ast.Expression receiver> = $r6;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnExpressionStack(org.eclipse.jdt.internal.compiler.ast.Expression)>($r1);

        return;
    }

    protected void consumeMethodInvocationSuperWithTypeArguments()
    {
        long $l4;
        char[][] $r3;
        long[] $r2;
        org.eclipse.jdt.internal.compiler.ast.SuperReference $r9;
        int[] $r5, $r8;
        int $i0, $i1, $i2, $i3, $i5, $i6, $i7, $i8, $i9, $i10, i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r7;
        org.eclipse.jdt.internal.compiler.ast.TypeReference[] $r6;
        org.eclipse.jdt.internal.compiler.ast.MessageSend $r1;
        char[] $r4;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.MessageSend newMessageSendWithTypeArguments()>();

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i1;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int rParenPos>;

        $r1.<org.eclipse.jdt.internal.compiler.ast.MessageSend: int sourceEnd> = $i2;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: long[] identifierPositionStack>;

        $i3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $l4 = $r2[$i3];

        $r1.<org.eclipse.jdt.internal.compiler.ast.MessageSend: long nameSourcePosition> = $l4;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: char[][] identifierStack>;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i6 = $i5 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr> = $i6;

        $r4 = $r3[$i5];

        $r1.<org.eclipse.jdt.internal.compiler.ast.MessageSend: char[] selector> = $r4;

        $i7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr>;

        $i8 = $i7 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr> = $i8;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] genericsLengthStack>;

        $i9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsLengthPtr>;

        $i10 = $i9 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsLengthPtr> = $i10;

        i11 = $r5[$i9];

        $i12 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr>;

        $i13 = $i12 - i11;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr> = $i13;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] genericsStack>;

        $i14 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr>;

        $i15 = $i14 + 1;

        $r6 = newarray (org.eclipse.jdt.internal.compiler.ast.TypeReference)[i11];

        $r1.<org.eclipse.jdt.internal.compiler.ast.MessageSend: org.eclipse.jdt.internal.compiler.ast.TypeReference[] typeArguments> = $r6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, $i15, $r6, 0, i11);

        $r8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i16 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i17 = $i16 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i17;

        $i18 = $r8[$i16];

        $r1.<org.eclipse.jdt.internal.compiler.ast.MessageSend: int sourceStart> = $i18;

        $r9 = new org.eclipse.jdt.internal.compiler.ast.SuperReference;

        $i20 = $r1.<org.eclipse.jdt.internal.compiler.ast.MessageSend: int sourceStart>;

        $i19 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endPosition>;

        specialinvoke $r9.<org.eclipse.jdt.internal.compiler.ast.SuperReference: void <init>(int,int)>($i20, $i19);

        $r1.<org.eclipse.jdt.internal.compiler.ast.MessageSend: org.eclipse.jdt.internal.compiler.ast.Expression receiver> = $r9;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnExpressionStack(org.eclipse.jdt.internal.compiler.ast.Expression)>($r1);

        return;
    }

    protected void consumeModifiers()
    {
        int i0, $i1, $i2, $i3;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int modifiersSourceStart>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void checkComment()>();

        $i1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int modifiers>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnIntStack(int)>($i1);

        $i2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int modifiersSourceStart>;

        if $i2 < i0 goto label1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int modifiersSourceStart> = i0;

     label1:
        $i3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int modifiersSourceStart>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnIntStack(int)>($i3);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void resetModifiers()>();

        return;
    }

    protected void consumeModifiers2()
    {
        int[] $r1, $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] expressionLengthStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        $i1 = $i0 - 1;

        $i4 = $r1[$i1];

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] expressionLengthStack>;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        $i3 = $i2 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr> = $i3;

        $i5 = $r2[$i2];

        $i6 = $i4 + $i5;

        $r1[$i1] = $i6;

        return;
    }

    protected void consumeNameArrayType()
    {
        int[] $r1;
        int $i0, $i1;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnGenericsLengthStack(int)>(0);

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] identifierLengthStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr>;

        $i1 = $r1[$i0];

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnGenericsIdentifiersLengthStack(int)>($i1);

        return;
    }

    protected void consumeNestedMethod()
    {
        int[] $r1;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r2;
        int $i0, $i1, $i2, $i3;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void jumpOverMethodBody()>();

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] nestedMethod>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int nestedType>;

        $i1 = $r1[$i0];

        $i2 = $i1 + 1;

        $r1[$i0] = $i2;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i3 = $r2.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnIntStack(int)>($i3);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeOpenBlock()>();

        return;
    }

    protected void consumeNestedType()
    {
        int[] $r1, $r2, $r3, $r4, $r5, $r6, $r7;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] nestedMethod>;

        i0 = lengthof $r1;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int nestedType>;

        $i2 = $i1 + 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int nestedType> = $i2;

        if $i2 < i0 goto label1;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] nestedMethod>;

        $i5 = i0 + 30;

        $r4 = newarray (int)[$i5];

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] nestedMethod> = $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, $r4, 0, i0);

        $r7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] variablesCounter>;

        $i6 = i0 + 30;

        $r6 = newarray (int)[$i6];

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] variablesCounter> = $r6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, $r6, 0, i0);

     label1:
        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] nestedMethod>;

        $i3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int nestedType>;

        $r2[$i3] = 0;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] variablesCounter>;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int nestedType>;

        $r3[$i4] = 0;

        return;
    }

    protected void consumeNormalAnnotation()
    {
        org.eclipse.jdt.internal.compiler.ast.MemberValuePair[] $r14;
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r8;
        org.eclipse.jdt.internal.compiler.parser.RecoveredAnnotation $r11;
        byte $b9;
        int[] $r3, $r4;
        boolean $z0, $z1;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r1;
        org.eclipse.jdt.internal.compiler.ast.NormalAnnotation $r15;
        org.eclipse.jdt.internal.compiler.impl.CompilerOptions $r6;
        long $l8;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r13;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r7;
        org.eclipse.jdt.internal.compiler.parser.RecoveredElement $r5, $r9, $r10, $r12;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $r1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeReference getAnnotationType()>();

        $r15 = new org.eclipse.jdt.internal.compiler.ast.NormalAnnotation;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i2 = $i1 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i2;

        $i3 = $r3[$i1];

        specialinvoke $r15.<org.eclipse.jdt.internal.compiler.ast.NormalAnnotation: void <init>(org.eclipse.jdt.internal.compiler.ast.TypeReference,int)>($r1, $i3);

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] astLengthStack>;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr>;

        $i5 = $i4 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr> = $i5;

        $i6 = $r4[$i4];

        if $i6 == 0 goto label1;

        $r13 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i14 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i15 = $i14 - $i6;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr> = $i15;

        $i16 = $i15 + 1;

        $r14 = newarray (org.eclipse.jdt.internal.compiler.ast.MemberValuePair)[$i6];

        $r15.<org.eclipse.jdt.internal.compiler.ast.NormalAnnotation: org.eclipse.jdt.internal.compiler.ast.MemberValuePair[] memberValuePairs> = $r14;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r13, $i16, $r14, 0, $i6);

     label1:
        $i7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int rParenPos>;

        $r15.<org.eclipse.jdt.internal.compiler.ast.NormalAnnotation: int declarationSourceEnd> = $i7;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnExpressionStack(org.eclipse.jdt.internal.compiler.ast.Expression)>($r15);

        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r5 == null goto label2;

        $i13 = $r15.<org.eclipse.jdt.internal.compiler.ast.NormalAnnotation: int sourceStart>;

        $i12 = $r15.<org.eclipse.jdt.internal.compiler.ast.NormalAnnotation: int declarationSourceEnd>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void annotationRecoveryCheckPoint(int,int)>($i13, $i12);

        $r9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $z0 = $r9 instanceof org.eclipse.jdt.internal.compiler.parser.RecoveredAnnotation;

        if $z0 == 0 goto label2;

        $r10 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $r11 = (org.eclipse.jdt.internal.compiler.parser.RecoveredAnnotation) $r10;

        $r12 = virtualinvoke $r11.<org.eclipse.jdt.internal.compiler.parser.RecoveredAnnotation: org.eclipse.jdt.internal.compiler.parser.RecoveredElement addAnnotation(org.eclipse.jdt.internal.compiler.ast.Annotation,int)>($r15, i0);

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement> = $r12;

     label2:
        $z1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean statementRecoveryActivated>;

        if $z1 != 0 goto label3;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.CompilerOptions options>;

        $l8 = $r6.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long sourceLevel>;

        $b9 = $l8 cmp 3211264L;

        $i17 = (int) $b9;

        if $i17 >= 0 goto label3;

        $i11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastErrorEndPositionBeforeRecovery>;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i10 = $r7.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        if $i11 >= $i10 goto label3;

        $r8 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        virtualinvoke $r8.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void invalidUsageOfAnnotation(org.eclipse.jdt.internal.compiler.ast.Annotation)>($r15);

     label3:
        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean recordStringLiterals> = 1;

        return;
    }

    protected void consumeOneDimLoop()
    {
        int $i0, $i1;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int dimensions>;

        $i1 = $i0 + 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int dimensions> = $i1;

        return;
    }

    protected void consumeOnlySynchronized()
    {
        int $i0, $i1, $i2;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int synchronizedBlockSourceStart>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnIntStack(int)>($i0);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void resetModifiers()>();

        $i1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        $i2 = $i1 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr> = $i2;

        return;
    }

    protected void consumeOnlyTypeArguments()
    {
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r4;
        long $l0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r6, $r8;
        byte $b1;
        int[] $r3;
        int $i2, $i3, $i4, i5, $i6, $i7, $i8, $i9, $i10;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r5, $r7;
        boolean $z0;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r2;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r9, $r10;
        org.eclipse.jdt.internal.compiler.impl.CompilerOptions $r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $z0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean statementRecoveryActivated>;

        if $z0 != 0 goto label1;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.CompilerOptions options>;

        $l0 = $r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long sourceLevel>;

        $b1 = $l0 cmp 3211264L;

        $i10 = (int) $b1;

        if $i10 >= 0 goto label1;

        $i3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastErrorEndPositionBeforeRecovery>;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i2 = $r2.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        if $i3 >= $i2 goto label1;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] genericsLengthStack>;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsLengthPtr>;

        i5 = $r3[$i4];

        $r4 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] genericsStack>;

        $i6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr>;

        $i7 = $i6 - i5;

        $i8 = $i7 + 1;

        $r6 = $r5[$i8];

        $r10 = (org.eclipse.jdt.internal.compiler.ast.TypeReference) $r6;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] genericsStack>;

        $i9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr>;

        $r8 = $r7[$i9];

        $r9 = (org.eclipse.jdt.internal.compiler.ast.TypeReference) $r8;

        virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void invalidUsageOfTypeArguments(org.eclipse.jdt.internal.compiler.ast.TypeReference,org.eclipse.jdt.internal.compiler.ast.TypeReference)>($r10, $r9);

     label1:
        return;
    }

    protected void consumeOnlyTypeArgumentsForCastExpression()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        return;
    }

    protected void consumeOpenBlock()
    {
        org.eclipse.jdt.internal.compiler.parser.Scanner $r1;
        int[] $r2, $r3, $r4, $r5;
        int $i0, i1, $i2, $i3, $i4, $i5;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i0 = $r1.<org.eclipse.jdt.internal.compiler.parser.Scanner: int startPosition>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnIntStack(int)>($i0);

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] realBlockStack>;

        i1 = lengthof $r2;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int realBlockPtr>;

        $i3 = $i2 + 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int realBlockPtr> = $i3;

        if $i3 < i1 goto label1;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] realBlockStack>;

        $i5 = i1 + 255;

        $r4 = newarray (int)[$i5];

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] realBlockStack> = $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, $r4, 0, i1);

     label1:
        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] realBlockStack>;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int realBlockPtr>;

        $r3[$i4] = 0;

        return;
    }

    protected void consumePackageComment()
    {
        byte $b1;
        int $i2;
        long $l0;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.impl.CompilerOptions $r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.CompilerOptions options>;

        $l0 = $r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long sourceLevel>;

        $b1 = $l0 cmp 3211264L;

        $i2 = (int) $b1;

        if $i2 < 0 goto label1;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void checkComment()>();

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void resetModifiers()>();

     label1:
        return;
    }

    protected void consumePackageDeclaration()
    {
        org.eclipse.jdt.internal.compiler.ast.ImportReference r2;
        org.eclipse.jdt.internal.compiler.ast.Javadoc $r3;
        int $i0, $i1, $i2;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration $r1, $r4;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit>;

        r2 = $r1.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: org.eclipse.jdt.internal.compiler.ast.ImportReference currentPackage>;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit>;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc>;

        $r4.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc> = $r3;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc> = null;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        r2.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationEnd> = $i0;

        $i1 = r2.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationSourceEnd>;

        $i2 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int flushCommentsDefinedPriorTo(int)>($i1);

        r2.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationSourceEnd> = $i2;

        return;
    }

    protected void consumePackageDeclarationName()
    {
        org.eclipse.jdt.internal.compiler.ast.Javadoc $r9, $r11;
        char[][] r2, $r4;
        int[] $r1, $r8;
        org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration $r7;
        long[] r3, $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ImportReference $r6;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r12;
        org.eclipse.jdt.internal.compiler.parser.RecoveredElement $r10;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] identifierLengthStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr> = $i1;

        $i2 = $r1[$i0];

        r2 = newarray (char[])[$i2];

        $i3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i4 = $i3 - $i2;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr> = $i4;

        r3 = newarray (long)[$i2];

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: char[][] identifierStack>;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i6 = $i5 + 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr> = $i6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, $i6, r2, 0, $i2);

        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: long[] identifierPositionStack>;

        $i7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i8 = $i7 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr> = $i8;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, $i7, r3, 0, $i2);

        $r6 = new org.eclipse.jdt.internal.compiler.ast.ImportReference;

        specialinvoke $r6.<org.eclipse.jdt.internal.compiler.ast.ImportReference: void <init>(char[][],long[],boolean,int)>(r2, r3, 1, 0);

        $r7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit>;

        $r7.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: org.eclipse.jdt.internal.compiler.ast.ImportReference currentPackage> = $r6;

        $i9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int currentToken>;

        if $i9 != 27 goto label1;

        $r12 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i18 = $r12.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        $i19 = $i18 - 1;

        $r6.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationSourceEnd> = $i19;

        goto label2;

     label1:
        $i10 = $r6.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int sourceEnd>;

        $r6.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationSourceEnd> = $i10;

     label2:
        $i11 = $r6.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationSourceEnd>;

        $r6.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationEnd> = $i11;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i12 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i13 = $i12 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i13;

        $i14 = $r8[$i12];

        $r6.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationSourceStart> = $i14;

        $r9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc>;

        if $r9 == null goto label3;

        $r11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc>;

        $i17 = $r11.<org.eclipse.jdt.internal.compiler.ast.Javadoc: int sourceStart>;

        $r6.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationSourceStart> = $i17;

     label3:
        $r10 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r10 == null goto label4;

        $i15 = $r6.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationSourceEnd>;

        $i16 = $i15 + 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastCheckPoint> = $i16;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean restartRecovery> = 1;

     label4:
        return;
    }

    protected void consumePackageDeclarationNameWithModifiers()
    {
        org.eclipse.jdt.internal.compiler.ast.Javadoc $r12, $r15;
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r16;
        char[][] r2, $r4;
        int[] $r1, $r6, $r7, $r10, $r11;
        org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration $r9;
        org.eclipse.jdt.internal.compiler.ast.Annotation[] $r17;
        long[] r3, $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, $i12, $i13, i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ImportReference $r8;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r14;
        org.eclipse.jdt.internal.compiler.parser.RecoveredElement $r13;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] identifierLengthStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr> = $i1;

        $i2 = $r1[$i0];

        r2 = newarray (char[])[$i2];

        $i3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i4 = $i3 - $i2;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr> = $i4;

        r3 = newarray (long)[$i2];

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: char[][] identifierStack>;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i6 = $i5 + 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr> = $i6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, $i6, r2, 0, $i2);

        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: long[] identifierPositionStack>;

        $i7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i8 = $i7 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr> = $i8;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, $i7, r3, 0, $i2);

        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i10 = $i9 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i10;

        i11 = $r6[$i9];

        $r7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i12 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i13 = $i12 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i13;

        i14 = $r7[$i12];

        $r8 = new org.eclipse.jdt.internal.compiler.ast.ImportReference;

        specialinvoke $r8.<org.eclipse.jdt.internal.compiler.ast.ImportReference: void <init>(char[][],long[],boolean,int)>(r2, r3, 1, i14);

        $r9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit>;

        $r9.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: org.eclipse.jdt.internal.compiler.ast.ImportReference currentPackage> = $r8;

        $r10 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] expressionLengthStack>;

        $i15 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        $i16 = $i15 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr> = $i16;

        $i17 = $r10[$i15];

        if $i17 == 0 goto label1;

        $r16 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i28 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i29 = $i28 - $i17;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr> = $i29;

        $i30 = $i29 + 1;

        $r17 = newarray (org.eclipse.jdt.internal.compiler.ast.Annotation)[$i17];

        $r8.<org.eclipse.jdt.internal.compiler.ast.ImportReference: org.eclipse.jdt.internal.compiler.ast.Annotation[] annotations> = $r17;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r16, $i30, $r17, 0, $i17);

        $r8.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationSourceStart> = i11;

        $i31 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i32 = $i31 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i32;

        goto label2;

     label1:
        $r11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i18 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i19 = $i18 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i19;

        $i20 = $r11[$i18];

        $r8.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationSourceStart> = $i20;

        $r12 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc>;

        if $r12 == null goto label2;

        $r15 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc>;

        $i27 = $r15.<org.eclipse.jdt.internal.compiler.ast.Javadoc: int sourceStart>;

        $r8.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationSourceStart> = $i27;

     label2:
        $i33 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int currentToken>;

        if $i33 != 27 goto label3;

        $r14 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i25 = $r14.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        $i26 = $i25 - 1;

        $r8.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationSourceEnd> = $i26;

        goto label4;

     label3:
        $i21 = $r8.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int sourceEnd>;

        $r8.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationSourceEnd> = $i21;

     label4:
        $i22 = $r8.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationSourceEnd>;

        $r8.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationEnd> = $i22;

        $r13 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r13 == null goto label5;

        $i23 = $r8.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationSourceEnd>;

        $i24 = $i23 + 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastCheckPoint> = $i24;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean restartRecovery> = 1;

     label5:
        return;
    }

    protected void consumePostfixExpression()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.NameReference $r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.NameReference getUnspecifiedReferenceOptimized()>();

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnExpressionStack(org.eclipse.jdt.internal.compiler.ast.Expression)>($r1);

        return;
    }

    protected void consumePrimaryNoNewArray()
    {
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r1;
        org.eclipse.jdt.internal.compiler.ast.Expression r2;
        int $i0, $i1, $i2, i3, $i4, $i5, $i6, $i7, $i8, $i9;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        r2 = $r1[$i0];

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void updateSourcePosition(org.eclipse.jdt.internal.compiler.ast.Expression)>(r2);

        $i1 = r2.<org.eclipse.jdt.internal.compiler.ast.Expression: int bits>;

        $i2 = $i1 & 534773760;

        i3 = $i2 >> 21;

        $i4 = r2.<org.eclipse.jdt.internal.compiler.ast.Expression: int bits>;

        $i5 = $i4 & -534773761;

        r2.<org.eclipse.jdt.internal.compiler.ast.Expression: int bits> = $i5;

        $i8 = r2.<org.eclipse.jdt.internal.compiler.ast.Expression: int bits>;

        $i6 = i3 + 1;

        $i7 = $i6 << 21;

        $i9 = $i8 | $i7;

        r2.<org.eclipse.jdt.internal.compiler.ast.Expression: int bits> = $i9;

        return;
    }

    protected void consumePrimaryNoNewArrayArrayType()
    {
        org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess $r2;
        int[] $r1, $r3, $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r5;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i1;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] identifierLengthStack>;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr>;

        $i3 = $r1[$i2];

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnGenericsIdentifiersLengthStack(int)>($i3);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnGenericsLengthStack(int)>(0);

        $r2 = new org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i5 = $i4 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i5;

        $i8 = $r3[$i4];

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i7 = $i6 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i7;

        $i9 = $r4[$i6];

        $r5 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeReference getTypeReference(int)>($i9);

        specialinvoke $r2.<org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess: void <init>(int,org.eclipse.jdt.internal.compiler.ast.TypeReference)>($i8, $r5);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnExpressionStack(org.eclipse.jdt.internal.compiler.ast.Expression)>($r2);

        return;
    }

    protected void consumePrimaryNoNewArrayName()
    {
        org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess $r3;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r2;
        int[] $r1, $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i1;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] identifierLengthStack>;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr>;

        $i3 = $r1[$i2];

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnGenericsIdentifiersLengthStack(int)>($i3);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnGenericsLengthStack(int)>(0);

        $r2 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeReference getTypeReference(int)>(0);

        $r3 = new org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i5 = $i4 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i5;

        $i6 = $r4[$i4];

        specialinvoke $r3.<org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess: void <init>(int,org.eclipse.jdt.internal.compiler.ast.TypeReference)>($i6, $r2);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnExpressionStack(org.eclipse.jdt.internal.compiler.ast.Expression)>($r3);

        return;
    }

    protected void consumePrimaryNoNewArrayNameSuper()
    {
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r2;
        int[] $r1, $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.QualifiedSuperReference $r3;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] identifierLengthStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr>;

        $i1 = $r1[$i0];

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnGenericsIdentifiersLengthStack(int)>($i1);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnGenericsLengthStack(int)>(0);

        $r2 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeReference getTypeReference(int)>(0);

        $r3 = new org.eclipse.jdt.internal.compiler.ast.QualifiedSuperReference;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i3 = $i2 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i3;

        $i5 = $r4[$i2];

        $i4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endPosition>;

        specialinvoke $r3.<org.eclipse.jdt.internal.compiler.ast.QualifiedSuperReference: void <init>(org.eclipse.jdt.internal.compiler.ast.TypeReference,int,int)>($r2, $i5, $i4);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnExpressionStack(org.eclipse.jdt.internal.compiler.ast.Expression)>($r3);

        return;
    }

    protected void consumePrimaryNoNewArrayNameThis()
    {
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r2;
        org.eclipse.jdt.internal.compiler.ast.QualifiedThisReference $r3;
        int[] $r1, $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] identifierLengthStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr>;

        $i1 = $r1[$i0];

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnGenericsIdentifiersLengthStack(int)>($i1);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnGenericsLengthStack(int)>(0);

        $r2 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeReference getTypeReference(int)>(0);

        $r3 = new org.eclipse.jdt.internal.compiler.ast.QualifiedThisReference;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i3 = $i2 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i3;

        $i5 = $r4[$i2];

        $i4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endPosition>;

        specialinvoke $r3.<org.eclipse.jdt.internal.compiler.ast.QualifiedThisReference: void <init>(org.eclipse.jdt.internal.compiler.ast.TypeReference,int,int)>($r2, $i5, $i4);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnExpressionStack(org.eclipse.jdt.internal.compiler.ast.Expression)>($r3);

        return;
    }

    protected void consumePrimaryNoNewArrayPrimitiveArrayType()
    {
        org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess $r1;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r4;
        int[] $r2, $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i1;

        $r1 = new org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i3 = $i2 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i3;

        $i6 = $r2[$i2];

        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i5 = $i4 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i5;

        $i7 = $r3[$i4];

        $r4 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeReference getTypeReference(int)>($i7);

        specialinvoke $r1.<org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess: void <init>(int,org.eclipse.jdt.internal.compiler.ast.TypeReference)>($i6, $r4);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnExpressionStack(org.eclipse.jdt.internal.compiler.ast.Expression)>($r1);

        return;
    }

    protected void consumePrimaryNoNewArrayPrimitiveType()
    {
        org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess $r1;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r3;
        int[] $r2;
        int $i0, $i1, $i2, $i3, $i4;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i1;

        $r1 = new org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i3 = $i2 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i3;

        $i4 = $r2[$i2];

        $r3 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeReference getTypeReference(int)>(0);

        specialinvoke $r1.<org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess: void <init>(int,org.eclipse.jdt.internal.compiler.ast.TypeReference)>($i4, $r3);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnExpressionStack(org.eclipse.jdt.internal.compiler.ast.Expression)>($r1);

        return;
    }

    protected void consumePrimaryNoNewArrayThis()
    {
        int[] $r2;
        int $i0, $i1, $i2, $i3;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ThisReference $r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = new org.eclipse.jdt.internal.compiler.ast.ThisReference;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i1;

        $i3 = $r2[$i0];

        $i2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endPosition>;

        specialinvoke $r1.<org.eclipse.jdt.internal.compiler.ast.ThisReference: void <init>(int,int)>($i3, $i2);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnExpressionStack(org.eclipse.jdt.internal.compiler.ast.Expression)>($r1);

        return;
    }

    protected void consumePrimaryNoNewArrayWithName()
    {
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r2;
        org.eclipse.jdt.internal.compiler.ast.Expression r3;
        org.eclipse.jdt.internal.compiler.ast.NameReference $r1;
        int $i0, $i1, $i2, i3, $i4, $i5, $i6, $i7, $i8, $i9;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.NameReference getUnspecifiedReferenceOptimized()>();

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnExpressionStack(org.eclipse.jdt.internal.compiler.ast.Expression)>($r1);

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        r3 = $r2[$i0];

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void updateSourcePosition(org.eclipse.jdt.internal.compiler.ast.Expression)>(r3);

        $i1 = r3.<org.eclipse.jdt.internal.compiler.ast.Expression: int bits>;

        $i2 = $i1 & 534773760;

        i3 = $i2 >> 21;

        $i4 = r3.<org.eclipse.jdt.internal.compiler.ast.Expression: int bits>;

        $i5 = $i4 & -534773761;

        r3.<org.eclipse.jdt.internal.compiler.ast.Expression: int bits> = $i5;

        $i8 = r3.<org.eclipse.jdt.internal.compiler.ast.Expression: int bits>;

        $i6 = i3 + 1;

        $i7 = $i6 << 21;

        $i9 = $i8 | $i7;

        r3.<org.eclipse.jdt.internal.compiler.ast.Expression: int bits> = $i9;

        return;
    }

    protected void consumePrimitiveArrayType()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        return;
    }

    protected void consumePrimitiveType()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnIntStack(int)>(0);

        return;
    }

    protected void consumePushLeftBrace()
    {
        int $i0;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endPosition>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnIntStack(int)>($i0);

        return;
    }

    protected void consumePushRealModifiers()
    {
        int $i0, $i1;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void checkComment()>();

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int modifiers>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnIntStack(int)>($i0);

        $i1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int modifiersSourceStart>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnIntStack(int)>($i1);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void resetModifiers()>();

        return;
    }

    protected void consumePushModifiers()
    {
        int $i0, $i1;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int modifiers>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnIntStack(int)>($i0);

        $i1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int modifiersSourceStart>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnIntStack(int)>($i1);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void resetModifiers()>();

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnExpressionStackLengthStack(int)>(0);

        return;
    }

    protected void consumePushModifiersForHeader()
    {
        int $i0, $i1;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void checkComment()>();

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int modifiers>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnIntStack(int)>($i0);

        $i1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int modifiersSourceStart>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnIntStack(int)>($i1);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void resetModifiers()>();

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnExpressionStackLengthStack(int)>(0);

        return;
    }

    protected void consumePushPosition()
    {
        int $i0;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endPosition>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnIntStack(int)>($i0);

        return;
    }

    protected void consumeQualifiedName()
    {
        int[] $r1;
        int $i0, $i1, $i2, $i3;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] identifierLengthStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr> = $i1;

        $i2 = $r1[$i1];

        $i3 = $i2 + 1;

        $r1[$i1] = $i3;

        return;
    }

    protected void consumeRecoveryMethodHeaderName()
    {
        org.eclipse.jdt.internal.compiler.parser.RecoveredType $r3, $r6;
        int $i0, $i1, $i2, $i3;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        boolean $z0, z1, $z2, $z3;
        org.eclipse.jdt.internal.compiler.parser.RecoveredElement $r1, $r2, $r5;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration $r4, $r7;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        z1 = 0;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $z0 = $r1 instanceof org.eclipse.jdt.internal.compiler.parser.RecoveredType;

        if $z0 == 0 goto label3;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $r6 = (org.eclipse.jdt.internal.compiler.parser.RecoveredType) $r5;

        $r7 = $r6.<org.eclipse.jdt.internal.compiler.parser.RecoveredType: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDeclaration>;

        $i2 = $r7.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int modifiers>;

        $i3 = $i2 & 8192;

        if $i3 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        z1 = $z2;

        goto label6;

     label3:
        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $r3 = virtualinvoke $r2.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.parser.RecoveredType enclosingType()>();

        if $r3 == null goto label6;

        $r4 = $r3.<org.eclipse.jdt.internal.compiler.parser.RecoveredType: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDeclaration>;

        $i0 = $r4.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int modifiers>;

        $i1 = $i0 & 8192;

        if $i1 == 0 goto label4;

        $z3 = 1;

        goto label5;

     label4:
        $z3 = 0;

     label5:
        z1 = $z3;

     label6:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeMethodHeaderName(boolean)>(z1);

        return;
    }

    protected void consumeRecoveryMethodHeaderNameWithTypeParameters()
    {
        org.eclipse.jdt.internal.compiler.parser.RecoveredType $r3, $r6;
        int $i0, $i1, $i2, $i3;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        boolean $z0, z1, $z2, $z3;
        org.eclipse.jdt.internal.compiler.parser.RecoveredElement $r1, $r2, $r5;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration $r4, $r7;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        z1 = 0;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $z0 = $r1 instanceof org.eclipse.jdt.internal.compiler.parser.RecoveredType;

        if $z0 == 0 goto label3;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $r6 = (org.eclipse.jdt.internal.compiler.parser.RecoveredType) $r5;

        $r7 = $r6.<org.eclipse.jdt.internal.compiler.parser.RecoveredType: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDeclaration>;

        $i2 = $r7.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int modifiers>;

        $i3 = $i2 & 8192;

        if $i3 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        z1 = $z2;

        goto label6;

     label3:
        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $r3 = virtualinvoke $r2.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.parser.RecoveredType enclosingType()>();

        if $r3 == null goto label6;

        $r4 = $r3.<org.eclipse.jdt.internal.compiler.parser.RecoveredType: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDeclaration>;

        $i0 = $r4.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int modifiers>;

        $i1 = $i0 & 8192;

        if $i1 == 0 goto label4;

        $z3 = 1;

        goto label5;

     label4:
        $z3 = 0;

     label5:
        z1 = $z3;

     label6:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeMethodHeaderNameWithTypeParameters(boolean)>(z1);

        return;
    }

    protected void consumeReduceImports()
    {
        int[] $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        org.eclipse.jdt.internal.compiler.ast.ImportReference[] $r2;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r4;
        org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration $r3;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] astLengthStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr> = $i1;

        $i2 = $r1[$i0];

        if $i2 == 0 goto label1;

        $i3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i4 = $i3 - $i2;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr> = $i4;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i6 = $i5 + 1;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit>;

        $r2 = newarray (org.eclipse.jdt.internal.compiler.ast.ImportReference)[$i2];

        $r3.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: org.eclipse.jdt.internal.compiler.ast.ImportReference[] imports> = $r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, $i6, $r2, 0, $i2);

     label1:
        return;
    }

    protected void consumeReferenceType()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnIntStack(int)>(0);

        return;
    }

    protected void consumeReferenceType1()
    {
        int[] $r1;
        int $i0, $i1, $i2;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r2;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i1;

        $i2 = $r1[$i0];

        $r2 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeReference getTypeReference(int)>($i2);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnGenericsStack(org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r2);

        return;
    }

    protected void consumeReferenceType2()
    {
        int[] $r1;
        int $i0, $i1, $i2;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r2;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i1;

        $i2 = $r1[$i0];

        $r2 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeReference getTypeReference(int)>($i2);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnGenericsStack(org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r2);

        return;
    }

    protected void consumeReferenceType3()
    {
        int[] $r1;
        int $i0, $i1, $i2;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r2;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i1;

        $i2 = $r1[$i0];

        $r2 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeReference getTypeReference(int)>($i2);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnGenericsStack(org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r2);

        return;
    }

    protected void consumeRestoreDiet()
    {
        int $i0, $i1;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int dietInt>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int dietInt> = $i1;

        return;
    }

    protected void consumeRightParen()
    {
        int $i0;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int rParenPos>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnIntStack(int)>($i0);

        return;
    }

    protected void consumeRule(int)
    {
        int i0;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 30: goto label001;
            case 31: goto label418;
            case 32: goto label418;
            case 33: goto label418;
            case 34: goto label418;
            case 35: goto label418;
            case 36: goto label418;
            case 37: goto label418;
            case 38: goto label418;
            case 39: goto label418;
            case 40: goto label418;
            case 41: goto label418;
            case 42: goto label418;
            case 43: goto label418;
            case 44: goto label002;
            case 45: goto label418;
            case 46: goto label418;
            case 47: goto label418;
            case 48: goto label003;
            case 49: goto label004;
            case 50: goto label005;
            case 51: goto label006;
            case 52: goto label007;
            case 53: goto label008;
            case 54: goto label009;
            case 55: goto label010;
            case 56: goto label418;
            case 57: goto label418;
            case 58: goto label418;
            case 59: goto label418;
            case 60: goto label011;
            case 61: goto label012;
            case 62: goto label013;
            case 63: goto label014;
            case 64: goto label015;
            case 65: goto label016;
            case 66: goto label017;
            case 67: goto label018;
            case 68: goto label019;
            case 69: goto label020;
            case 70: goto label021;
            case 71: goto label022;
            case 72: goto label418;
            case 73: goto label418;
            case 74: goto label418;
            case 75: goto label418;
            case 76: goto label418;
            case 77: goto label418;
            case 78: goto label418;
            case 79: goto label418;
            case 80: goto label418;
            case 81: goto label418;
            case 82: goto label418;
            case 83: goto label418;
            case 84: goto label418;
            case 85: goto label418;
            case 86: goto label418;
            case 87: goto label023;
            case 88: goto label418;
            case 89: goto label024;
            case 90: goto label418;
            case 91: goto label025;
            case 92: goto label026;
            case 93: goto label027;
            case 94: goto label028;
            case 95: goto label029;
            case 96: goto label418;
            case 97: goto label418;
            case 98: goto label418;
            case 99: goto label418;
            case 100: goto label030;
            case 101: goto label031;
            case 102: goto label032;
            case 103: goto label033;
            case 104: goto label418;
            case 105: goto label418;
            case 106: goto label034;
            case 107: goto label418;
            case 108: goto label418;
            case 109: goto label418;
            case 110: goto label035;
            case 111: goto label418;
            case 112: goto label418;
            case 113: goto label418;
            case 114: goto label418;
            case 115: goto label418;
            case 116: goto label418;
            case 117: goto label418;
            case 118: goto label418;
            case 119: goto label418;
            case 120: goto label418;
            case 121: goto label418;
            case 122: goto label036;
            case 123: goto label037;
            case 124: goto label038;
            case 125: goto label039;
            case 126: goto label418;
            case 127: goto label040;
            case 128: goto label041;
            case 129: goto label042;
            case 130: goto label418;
            case 131: goto label043;
            case 132: goto label044;
            case 133: goto label418;
            case 134: goto label418;
            case 135: goto label045;
            case 136: goto label418;
            case 137: goto label418;
            case 138: goto label418;
            case 139: goto label046;
            case 140: goto label047;
            case 141: goto label048;
            case 142: goto label049;
            case 143: goto label418;
            case 144: goto label418;
            case 145: goto label418;
            case 146: goto label418;
            case 147: goto label418;
            case 148: goto label418;
            case 149: goto label050;
            case 150: goto label418;
            case 151: goto label418;
            case 152: goto label051;
            case 153: goto label418;
            case 154: goto label052;
            case 155: goto label418;
            case 156: goto label418;
            case 157: goto label053;
            case 158: goto label054;
            case 159: goto label055;
            case 160: goto label056;
            case 161: goto label057;
            case 162: goto label418;
            case 163: goto label418;
            case 164: goto label418;
            case 165: goto label418;
            case 166: goto label058;
            case 167: goto label059;
            case 168: goto label060;
            case 169: goto label061;
            case 170: goto label062;
            case 171: goto label063;
            case 172: goto label064;
            case 173: goto label065;
            case 174: goto label066;
            case 175: goto label067;
            case 176: goto label068;
            case 177: goto label418;
            case 178: goto label069;
            case 179: goto label070;
            case 180: goto label071;
            case 181: goto label418;
            case 182: goto label072;
            case 183: goto label073;
            case 184: goto label074;
            case 185: goto label075;
            case 186: goto label076;
            case 187: goto label077;
            case 188: goto label078;
            case 189: goto label079;
            case 190: goto label080;
            case 191: goto label081;
            case 192: goto label082;
            case 193: goto label083;
            case 194: goto label084;
            case 195: goto label085;
            case 196: goto label086;
            case 197: goto label087;
            case 198: goto label088;
            case 199: goto label089;
            case 200: goto label090;
            case 201: goto label091;
            case 202: goto label092;
            case 203: goto label093;
            case 204: goto label094;
            case 205: goto label418;
            case 206: goto label095;
            case 207: goto label096;
            case 208: goto label418;
            case 209: goto label418;
            case 210: goto label097;
            case 211: goto label098;
            case 212: goto label418;
            case 213: goto label099;
            case 214: goto label100;
            case 215: goto label101;
            case 216: goto label418;
            case 217: goto label418;
            case 218: goto label418;
            case 219: goto label418;
            case 220: goto label418;
            case 221: goto label418;
            case 222: goto label418;
            case 223: goto label102;
            case 224: goto label103;
            case 225: goto label104;
            case 226: goto label105;
            case 227: goto label418;
            case 228: goto label106;
            case 229: goto label107;
            case 230: goto label108;
            case 231: goto label418;
            case 232: goto label109;
            case 233: goto label418;
            case 234: goto label418;
            case 235: goto label418;
            case 236: goto label110;
            case 237: goto label111;
            case 238: goto label112;
            case 239: goto label113;
            case 240: goto label114;
            case 241: goto label115;
            case 242: goto label116;
            case 243: goto label117;
            case 244: goto label118;
            case 245: goto label418;
            case 246: goto label418;
            case 247: goto label418;
            case 248: goto label418;
            case 249: goto label418;
            case 250: goto label418;
            case 251: goto label418;
            case 252: goto label418;
            case 253: goto label418;
            case 254: goto label418;
            case 255: goto label418;
            case 256: goto label418;
            case 257: goto label418;
            case 258: goto label418;
            case 259: goto label418;
            case 260: goto label418;
            case 261: goto label418;
            case 262: goto label418;
            case 263: goto label418;
            case 264: goto label418;
            case 265: goto label418;
            case 266: goto label418;
            case 267: goto label418;
            case 268: goto label418;
            case 269: goto label418;
            case 270: goto label119;
            case 271: goto label120;
            case 272: goto label121;
            case 273: goto label122;
            case 274: goto label123;
            case 275: goto label418;
            case 276: goto label418;
            case 277: goto label418;
            case 278: goto label418;
            case 279: goto label418;
            case 280: goto label418;
            case 281: goto label418;
            case 282: goto label418;
            case 283: goto label124;
            case 284: goto label125;
            case 285: goto label126;
            case 286: goto label127;
            case 287: goto label128;
            case 288: goto label418;
            case 289: goto label418;
            case 290: goto label129;
            case 291: goto label418;
            case 292: goto label130;
            case 293: goto label131;
            case 294: goto label418;
            case 295: goto label132;
            case 296: goto label133;
            case 297: goto label134;
            case 298: goto label135;
            case 299: goto label136;
            case 300: goto label137;
            case 301: goto label138;
            case 302: goto label139;
            case 303: goto label140;
            case 304: goto label418;
            case 305: goto label418;
            case 306: goto label418;
            case 307: goto label141;
            case 308: goto label142;
            case 309: goto label143;
            case 310: goto label144;
            case 311: goto label145;
            case 312: goto label146;
            case 313: goto label147;
            case 314: goto label148;
            case 315: goto label149;
            case 316: goto label150;
            case 317: goto label151;
            case 318: goto label152;
            case 319: goto label153;
            case 320: goto label418;
            case 321: goto label154;
            case 322: goto label418;
            case 323: goto label155;
            case 324: goto label156;
            case 325: goto label418;
            case 326: goto label157;
            case 327: goto label158;
            case 328: goto label418;
            case 329: goto label418;
            case 330: goto label418;
            case 331: goto label418;
            case 332: goto label159;
            case 333: goto label160;
            case 334: goto label161;
            case 335: goto label418;
            case 336: goto label418;
            case 337: goto label162;
            case 338: goto label163;
            case 339: goto label164;
            case 340: goto label165;
            case 341: goto label166;
            case 342: goto label167;
            case 343: goto label418;
            case 344: goto label418;
            case 345: goto label168;
            case 346: goto label169;
            case 347: goto label170;
            case 348: goto label171;
            case 349: goto label172;
            case 350: goto label173;
            case 351: goto label174;
            case 352: goto label175;
            case 353: goto label176;
            case 354: goto label418;
            case 355: goto label177;
            case 356: goto label418;
            case 357: goto label178;
            case 358: goto label179;
            case 359: goto label180;
            case 360: goto label181;
            case 361: goto label182;
            case 362: goto label183;
            case 363: goto label184;
            case 364: goto label418;
            case 365: goto label185;
            case 366: goto label418;
            case 367: goto label186;
            case 368: goto label187;
            case 369: goto label418;
            case 370: goto label418;
            case 371: goto label188;
            case 372: goto label189;
            case 373: goto label190;
            case 374: goto label191;
            case 375: goto label192;
            case 376: goto label193;
            case 377: goto label194;
            case 378: goto label195;
            case 379: goto label196;
            case 380: goto label197;
            case 381: goto label198;
            case 382: goto label199;
            case 383: goto label418;
            case 384: goto label200;
            case 385: goto label418;
            case 386: goto label418;
            case 387: goto label201;
            case 388: goto label202;
            case 389: goto label203;
            case 390: goto label418;
            case 391: goto label418;
            case 392: goto label204;
            case 393: goto label205;
            case 394: goto label418;
            case 395: goto label206;
            case 396: goto label207;
            case 397: goto label418;
            case 398: goto label208;
            case 399: goto label209;
            case 400: goto label418;
            case 401: goto label210;
            case 402: goto label211;
            case 403: goto label212;
            case 404: goto label213;
            case 405: goto label214;
            case 406: goto label215;
            case 407: goto label216;
            case 408: goto label217;
            case 409: goto label218;
            case 410: goto label418;
            case 411: goto label219;
            case 412: goto label220;
            case 413: goto label221;
            case 414: goto label418;
            case 415: goto label222;
            case 416: goto label223;
            case 417: goto label418;
            case 418: goto label224;
            case 419: goto label225;
            case 420: goto label226;
            case 421: goto label418;
            case 422: goto label227;
            case 423: goto label228;
            case 424: goto label229;
            case 425: goto label230;
            case 426: goto label418;
            case 427: goto label231;
            case 428: goto label418;
            case 429: goto label232;
            case 430: goto label233;
            case 431: goto label418;
            case 432: goto label234;
            case 433: goto label418;
            case 434: goto label235;
            case 435: goto label418;
            case 436: goto label236;
            case 437: goto label418;
            case 438: goto label237;
            case 439: goto label418;
            case 440: goto label238;
            case 441: goto label418;
            case 442: goto label239;
            case 443: goto label418;
            case 444: goto label418;
            case 445: goto label240;
            case 446: goto label418;
            case 447: goto label241;
            case 448: goto label242;
            case 449: goto label243;
            case 450: goto label244;
            case 451: goto label245;
            case 452: goto label246;
            case 453: goto label247;
            case 454: goto label248;
            case 455: goto label249;
            case 456: goto label250;
            case 457: goto label251;
            case 458: goto label252;
            case 459: goto label253;
            case 460: goto label418;
            case 461: goto label418;
            case 462: goto label418;
            case 463: goto label254;
            case 464: goto label418;
            case 465: goto label418;
            case 466: goto label418;
            case 467: goto label418;
            case 468: goto label255;
            case 469: goto label256;
            case 470: goto label257;
            case 471: goto label258;
            case 472: goto label259;
            case 473: goto label418;
            case 474: goto label260;
            case 475: goto label418;
            case 476: goto label261;
            case 477: goto label418;
            case 478: goto label418;
            case 479: goto label418;
            case 480: goto label262;
            case 481: goto label418;
            case 482: goto label418;
            case 483: goto label418;
            case 484: goto label263;
            case 485: goto label264;
            case 486: goto label265;
            case 487: goto label266;
            case 488: goto label418;
            case 489: goto label267;
            case 490: goto label418;
            case 491: goto label418;
            case 492: goto label418;
            case 493: goto label268;
            case 494: goto label418;
            case 495: goto label269;
            case 496: goto label270;
            case 497: goto label271;
            case 498: goto label272;
            case 499: goto label273;
            case 500: goto label274;
            case 501: goto label275;
            case 502: goto label276;
            case 503: goto label418;
            case 504: goto label277;
            case 505: goto label278;
            case 506: goto label279;
            case 507: goto label280;
            case 508: goto label281;
            case 509: goto label282;
            case 510: goto label283;
            case 511: goto label418;
            case 512: goto label284;
            case 513: goto label285;
            case 514: goto label418;
            case 515: goto label286;
            case 516: goto label287;
            case 517: goto label288;
            case 518: goto label289;
            case 519: goto label290;
            case 520: goto label291;
            case 521: goto label292;
            case 522: goto label293;
            case 523: goto label294;
            case 524: goto label295;
            case 525: goto label296;
            case 526: goto label418;
            case 527: goto label297;
            case 528: goto label418;
            case 529: goto label298;
            case 530: goto label299;
            case 531: goto label418;
            case 532: goto label418;
            case 533: goto label418;
            case 534: goto label300;
            case 535: goto label301;
            case 536: goto label418;
            case 537: goto label302;
            case 538: goto label418;
            case 539: goto label418;
            case 540: goto label303;
            case 541: goto label304;
            case 542: goto label418;
            case 543: goto label305;
            case 544: goto label418;
            case 545: goto label418;
            case 546: goto label306;
            case 547: goto label307;
            case 548: goto label308;
            case 549: goto label309;
            case 550: goto label310;
            case 551: goto label311;
            case 552: goto label312;
            case 553: goto label313;
            case 554: goto label314;
            case 555: goto label315;
            case 556: goto label316;
            case 557: goto label317;
            case 558: goto label318;
            case 559: goto label319;
            case 560: goto label320;
            case 561: goto label321;
            case 562: goto label322;
            case 563: goto label323;
            case 564: goto label324;
            case 565: goto label418;
            case 566: goto label325;
            case 567: goto label418;
            case 568: goto label326;
            case 569: goto label327;
            case 570: goto label418;
            case 571: goto label328;
            case 572: goto label329;
            case 573: goto label418;
            case 574: goto label330;
            case 575: goto label331;
            case 576: goto label332;
            case 577: goto label333;
            case 578: goto label418;
            case 579: goto label334;
            case 580: goto label335;
            case 581: goto label418;
            case 582: goto label418;
            case 583: goto label418;
            case 584: goto label418;
            case 585: goto label418;
            case 586: goto label336;
            case 587: goto label337;
            case 588: goto label418;
            case 589: goto label418;
            case 590: goto label338;
            case 591: goto label339;
            case 592: goto label418;
            case 593: goto label418;
            case 594: goto label340;
            case 595: goto label341;
            case 596: goto label342;
            case 597: goto label343;
            case 598: goto label344;
            case 599: goto label345;
            case 600: goto label418;
            case 601: goto label346;
            case 602: goto label347;
            case 603: goto label348;
            case 604: goto label349;
            case 605: goto label418;
            case 606: goto label350;
            case 607: goto label351;
            case 608: goto label352;
            case 609: goto label353;
            case 610: goto label354;
            case 611: goto label355;
            case 612: goto label418;
            case 613: goto label356;
            case 614: goto label357;
            case 615: goto label358;
            case 616: goto label359;
            case 617: goto label360;
            case 618: goto label361;
            case 619: goto label362;
            case 620: goto label363;
            case 621: goto label418;
            case 622: goto label364;
            case 623: goto label365;
            case 624: goto label418;
            case 625: goto label366;
            case 626: goto label367;
            case 627: goto label368;
            case 628: goto label369;
            case 629: goto label418;
            case 630: goto label370;
            case 631: goto label371;
            case 632: goto label418;
            case 633: goto label372;
            case 634: goto label373;
            case 635: goto label418;
            case 636: goto label374;
            case 637: goto label375;
            case 638: goto label418;
            case 639: goto label376;
            case 640: goto label377;
            case 641: goto label418;
            case 642: goto label378;
            case 643: goto label379;
            case 644: goto label418;
            case 645: goto label380;
            case 646: goto label381;
            case 647: goto label418;
            case 648: goto label418;
            case 649: goto label418;
            case 650: goto label382;
            case 651: goto label383;
            case 652: goto label384;
            case 653: goto label385;
            case 654: goto label386;
            case 655: goto label387;
            case 656: goto label418;
            case 657: goto label388;
            case 658: goto label389;
            case 659: goto label418;
            case 660: goto label390;
            case 661: goto label391;
            case 662: goto label392;
            case 663: goto label393;
            case 664: goto label394;
            case 665: goto label395;
            case 666: goto label396;
            case 667: goto label418;
            case 668: goto label418;
            case 669: goto label418;
            case 670: goto label418;
            case 671: goto label418;
            case 672: goto label418;
            case 673: goto label418;
            case 674: goto label397;
            case 675: goto label398;
            case 676: goto label399;
            case 677: goto label418;
            case 678: goto label418;
            case 679: goto label400;
            case 680: goto label401;
            case 681: goto label402;
            case 682: goto label403;
            case 683: goto label418;
            case 684: goto label404;
            case 685: goto label418;
            case 686: goto label418;
            case 687: goto label405;
            case 688: goto label406;
            case 689: goto label407;
            case 690: goto label408;
            case 691: goto label409;
            case 692: goto label418;
            case 693: goto label410;
            case 694: goto label411;
            case 695: goto label412;
            case 696: goto label413;
            case 697: goto label414;
            case 698: goto label415;
            case 699: goto label416;
            case 700: goto label417;
            default: goto label418;
        };

     label001:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumePrimitiveType()>();

        goto label418;

     label002:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeReferenceType()>();

        goto label418;

     label003:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeClassOrInterfaceName()>();

        goto label418;

     label004:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeClassOrInterface()>();

        goto label418;

     label005:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeGenericType()>();

        goto label418;

     label006:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeArrayTypeWithTypeArgumentsName()>();

        goto label418;

     label007:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumePrimitiveArrayType()>();

        goto label418;

     label008:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeNameArrayType()>();

        goto label418;

     label009:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeGenericTypeNameArrayType()>();

        goto label418;

     label010:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeGenericTypeArrayType()>();

        goto label418;

     label011:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeQualifiedName()>();

        goto label418;

     label012:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeCompilationUnit()>();

        goto label418;

     label013:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeInternalCompilationUnit()>();

        goto label418;

     label014:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeInternalCompilationUnit()>();

        goto label418;

     label015:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeInternalCompilationUnitWithTypes()>();

        goto label418;

     label016:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeInternalCompilationUnitWithTypes()>();

        goto label418;

     label017:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeInternalCompilationUnit()>();

        goto label418;

     label018:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeInternalCompilationUnitWithTypes()>();

        goto label418;

     label019:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeInternalCompilationUnitWithTypes()>();

        goto label418;

     label020:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeEmptyInternalCompilationUnit()>();

        goto label418;

     label021:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeReduceImports()>();

        goto label418;

     label022:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeEnterCompilationUnit()>();

        goto label418;

     label023:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeCatchHeader()>();

        goto label418;

     label024:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeImportDeclarations()>();

        goto label418;

     label025:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeTypeDeclarations()>();

        goto label418;

     label026:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumePackageDeclaration()>();

        goto label418;

     label027:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumePackageDeclarationNameWithModifiers()>();

        goto label418;

     label028:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumePackageDeclarationName()>();

        goto label418;

     label029:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumePackageComment()>();

        goto label418;

     label030:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeImportDeclaration()>();

        goto label418;

     label031:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeSingleTypeImportDeclarationName()>();

        goto label418;

     label032:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeImportDeclaration()>();

        goto label418;

     label033:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeTypeImportOnDemandDeclarationName()>();

        goto label418;

     label034:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeEmptyTypeDeclaration()>();

        goto label418;

     label035:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeModifiers2()>();

        goto label418;

     label036:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeAnnotationAsModifier()>();

        goto label418;

     label037:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeClassDeclaration()>();

        goto label418;

     label038:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeClassHeader()>();

        goto label418;

     label039:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeTypeHeaderNameWithTypeParameters()>();

        goto label418;

     label040:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeClassHeaderName1()>();

        goto label418;

     label041:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeClassHeaderExtends()>();

        goto label418;

     label042:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeClassHeaderImplements()>();

        goto label418;

     label043:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeInterfaceTypeList()>();

        goto label418;

     label044:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeInterfaceType()>();

        goto label418;

     label045:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeClassBodyDeclarations()>();

        goto label418;

     label046:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeClassBodyDeclaration()>();

        goto label418;

     label047:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeDiet()>();

        goto label418;

     label048:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeClassBodyDeclaration()>();

        goto label418;

     label049:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeCreateInitializer()>();

        goto label418;

     label050:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeEmptyTypeDeclaration()>();

        goto label418;

     label051:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeFieldDeclaration()>();

        goto label418;

     label052:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeVariableDeclarators()>();

        goto label418;

     label053:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeEnterVariable()>();

        goto label418;

     label054:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeExitVariableWithInitialization()>();

        goto label418;

     label055:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeExitVariableWithoutInitialization()>();

        goto label418;

     label056:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeForceNoDiet()>();

        goto label418;

     label057:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeRestoreDiet()>();

        goto label418;

     label058:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeMethodDeclaration(boolean)>(1);

        goto label418;

     label059:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeMethodDeclaration(boolean)>(0);

        goto label418;

     label060:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeMethodHeader()>();

        goto label418;

     label061:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeMethodHeaderNameWithTypeParameters(boolean)>(0);

        goto label418;

     label062:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeMethodHeaderName(boolean)>(0);

        goto label418;

     label063:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeMethodHeaderRightParen()>();

        goto label418;

     label064:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeMethodHeaderExtendedDims()>();

        goto label418;

     label065:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeMethodHeaderThrowsClause()>();

        goto label418;

     label066:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeConstructorHeader()>();

        goto label418;

     label067:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeConstructorHeaderNameWithTypeParameters()>();

        goto label418;

     label068:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeConstructorHeaderName()>();

        goto label418;

     label069:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeFormalParameterList()>();

        goto label418;

     label070:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeFormalParameter(boolean)>(0);

        goto label418;

     label071:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeFormalParameter(boolean)>(1);

        goto label418;

     label072:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeClassTypeList()>();

        goto label418;

     label073:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeClassTypeElt()>();

        goto label418;

     label074:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeMethodBody()>();

        goto label418;

     label075:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeNestedMethod()>();

        goto label418;

     label076:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeStaticInitializer()>();

        goto label418;

     label077:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeStaticOnly()>();

        goto label418;

     label078:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeConstructorDeclaration()>();

        goto label418;

     label079:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeInvalidConstructorDeclaration()>();

        goto label418;

     label080:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeExplicitConstructorInvocation(int,int)>(0, 3);

        goto label418;

     label081:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeExplicitConstructorInvocationWithTypeArguments(int,int)>(0, 3);

        goto label418;

     label082:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeExplicitConstructorInvocation(int,int)>(0, 2);

        goto label418;

     label083:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeExplicitConstructorInvocationWithTypeArguments(int,int)>(0, 2);

        goto label418;

     label084:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeExplicitConstructorInvocation(int,int)>(1, 2);

        goto label418;

     label085:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeExplicitConstructorInvocationWithTypeArguments(int,int)>(1, 2);

        goto label418;

     label086:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeExplicitConstructorInvocation(int,int)>(2, 2);

        goto label418;

     label087:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeExplicitConstructorInvocationWithTypeArguments(int,int)>(2, 2);

        goto label418;

     label088:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeExplicitConstructorInvocation(int,int)>(1, 3);

        goto label418;

     label089:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeExplicitConstructorInvocationWithTypeArguments(int,int)>(1, 3);

        goto label418;

     label090:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeExplicitConstructorInvocation(int,int)>(2, 3);

        goto label418;

     label091:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeExplicitConstructorInvocationWithTypeArguments(int,int)>(2, 3);

        goto label418;

     label092:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeInterfaceDeclaration()>();

        goto label418;

     label093:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeInterfaceHeader()>();

        goto label418;

     label094:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeTypeHeaderNameWithTypeParameters()>();

        goto label418;

     label095:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeInterfaceHeaderName1()>();

        goto label418;

     label096:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeInterfaceHeaderExtends()>();

        goto label418;

     label097:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeInterfaceMemberDeclarations()>();

        goto label418;

     label098:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeEmptyTypeDeclaration()>();

        goto label418;

     label099:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeInvalidMethodDeclaration()>();

        goto label418;

     label100:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeInvalidConstructorDeclaration(boolean)>(1);

        goto label418;

     label101:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeInvalidConstructorDeclaration(boolean)>(0);

        goto label418;

     label102:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumePushLeftBrace()>();

        goto label418;

     label103:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeEmptyArrayInitializer()>();

        goto label418;

     label104:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeArrayInitializer()>();

        goto label418;

     label105:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeArrayInitializer()>();

        goto label418;

     label106:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeVariableInitializers()>();

        goto label418;

     label107:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeBlock()>();

        goto label418;

     label108:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeOpenBlock()>();

        goto label418;

     label109:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeBlockStatements()>();

        goto label418;

     label110:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeInvalidInterfaceDeclaration()>();

        goto label418;

     label111:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeInvalidAnnotationTypeDeclaration()>();

        goto label418;

     label112:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeInvalidEnumDeclaration()>();

        goto label418;

     label113:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeLocalVariableDeclarationStatement()>();

        goto label418;

     label114:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeLocalVariableDeclaration()>();

        goto label418;

     label115:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeLocalVariableDeclaration()>();

        goto label418;

     label116:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumePushModifiers()>();

        goto label418;

     label117:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumePushModifiersForHeader()>();

        goto label418;

     label118:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumePushRealModifiers()>();

        goto label418;

     label119:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeEmptyStatement()>();

        goto label418;

     label120:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeStatementLabel()>();

        goto label418;

     label121:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeStatementLabel()>();

        goto label418;

     label122:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeLabel()>();

        goto label418;

     label123:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeExpressionStatement()>();

        goto label418;

     label124:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeStatementIfNoElse()>();

        goto label418;

     label125:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeStatementIfWithElse()>();

        goto label418;

     label126:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeStatementIfWithElse()>();

        goto label418;

     label127:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeStatementSwitch()>();

        goto label418;

     label128:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeEmptySwitchBlock()>();

        goto label418;

     label129:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeSwitchBlock()>();

        goto label418;

     label130:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeSwitchBlockStatements()>();

        goto label418;

     label131:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeSwitchBlockStatement()>();

        goto label418;

     label132:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeSwitchLabels()>();

        goto label418;

     label133:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeCaseLabel()>();

        goto label418;

     label134:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeDefaultLabel()>();

        goto label418;

     label135:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeStatementWhile()>();

        goto label418;

     label136:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeStatementWhile()>();

        goto label418;

     label137:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeStatementDo()>();

        goto label418;

     label138:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeStatementFor()>();

        goto label418;

     label139:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeStatementFor()>();

        goto label418;

     label140:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeForInit()>();

        goto label418;

     label141:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeStatementExpressionList()>();

        goto label418;

     label142:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeSimpleAssertStatement()>();

        goto label418;

     label143:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeAssertStatement()>();

        goto label418;

     label144:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeStatementBreak()>();

        goto label418;

     label145:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeStatementBreakWithLabel()>();

        goto label418;

     label146:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeStatementContinue()>();

        goto label418;

     label147:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeStatementContinueWithLabel()>();

        goto label418;

     label148:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeStatementReturn()>();

        goto label418;

     label149:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeStatementThrow()>();

        goto label418;

     label150:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeStatementSynchronized()>();

        goto label418;

     label151:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeOnlySynchronized()>();

        goto label418;

     label152:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeStatementTry(boolean)>(0);

        goto label418;

     label153:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeStatementTry(boolean)>(1);

        goto label418;

     label154:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeExitTryBlock()>();

        goto label418;

     label155:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeCatches()>();

        goto label418;

     label156:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeStatementCatch()>();

        goto label418;

     label157:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeLeftParen()>();

        goto label418;

     label158:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeRightParen()>();

        goto label418;

     label159:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumePrimaryNoNewArrayThis()>();

        goto label418;

     label160:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumePrimaryNoNewArray()>();

        goto label418;

     label161:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumePrimaryNoNewArrayWithName()>();

        goto label418;

     label162:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumePrimaryNoNewArrayNameThis()>();

        goto label418;

     label163:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumePrimaryNoNewArrayNameSuper()>();

        goto label418;

     label164:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumePrimaryNoNewArrayName()>();

        goto label418;

     label165:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumePrimaryNoNewArrayArrayType()>();

        goto label418;

     label166:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumePrimaryNoNewArrayPrimitiveArrayType()>();

        goto label418;

     label167:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumePrimaryNoNewArrayPrimitiveType()>();

        goto label418;

     label168:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeAllocationHeader()>();

        goto label418;

     label169:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeClassInstanceCreationExpressionWithTypeArguments()>();

        goto label418;

     label170:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeClassInstanceCreationExpression()>();

        goto label418;

     label171:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeClassInstanceCreationExpressionQualifiedWithTypeArguments()>();

        goto label418;

     label172:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeClassInstanceCreationExpressionQualified()>();

        goto label418;

     label173:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeClassInstanceCreationExpressionQualified()>();

        goto label418;

     label174:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeClassInstanceCreationExpressionQualifiedWithTypeArguments()>();

        goto label418;

     label175:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeClassInstanceCreationExpressionName()>();

        goto label418;

     label176:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeClassBodyopt()>();

        goto label418;

     label177:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeEnterAnonymousClassBody()>();

        goto label418;

     label178:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeArgumentList()>();

        goto label418;

     label179:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeArrayCreationHeader()>();

        goto label418;

     label180:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeArrayCreationHeader()>();

        goto label418;

     label181:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeArrayCreationExpressionWithoutInitializer()>();

        goto label418;

     label182:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeArrayCreationExpressionWithInitializer()>();

        goto label418;

     label183:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeArrayCreationExpressionWithoutInitializer()>();

        goto label418;

     label184:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeArrayCreationExpressionWithInitializer()>();

        goto label418;

     label185:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeDimWithOrWithOutExprs()>();

        goto label418;

     label186:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeDimWithOrWithOutExpr()>();

        goto label418;

     label187:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeDims()>();

        goto label418;

     label188:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeOneDimLoop()>();

        goto label418;

     label189:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeFieldAccess(boolean)>(0);

        goto label418;

     label190:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeFieldAccess(boolean)>(1);

        goto label418;

     label191:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeMethodInvocationName()>();

        goto label418;

     label192:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeMethodInvocationNameWithTypeArguments()>();

        goto label418;

     label193:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeMethodInvocationPrimaryWithTypeArguments()>();

        goto label418;

     label194:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeMethodInvocationPrimary()>();

        goto label418;

     label195:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeMethodInvocationSuperWithTypeArguments()>();

        goto label418;

     label196:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeMethodInvocationSuper()>();

        goto label418;

     label197:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeArrayAccess(boolean)>(1);

        goto label418;

     label198:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeArrayAccess(boolean)>(0);

        goto label418;

     label199:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeArrayAccess(boolean)>(0);

        goto label418;

     label200:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumePostfixExpression()>();

        goto label418;

     label201:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeUnaryExpression(int,boolean)>(14, 1);

        goto label418;

     label202:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeUnaryExpression(int,boolean)>(13, 1);

        goto label418;

     label203:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumePushPosition()>();

        goto label418;

     label204:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeUnaryExpression(int)>(14);

        goto label418;

     label205:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeUnaryExpression(int)>(13);

        goto label418;

     label206:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeUnaryExpression(int,boolean)>(14, 0);

        goto label418;

     label207:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeUnaryExpression(int,boolean)>(13, 0);

        goto label418;

     label208:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeUnaryExpression(int)>(12);

        goto label418;

     label209:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeUnaryExpression(int)>(11);

        goto label418;

     label210:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeCastExpressionWithPrimitiveType()>();

        goto label418;

     label211:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeCastExpressionWithGenericsArray()>();

        goto label418;

     label212:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeCastExpressionWithQualifiedGenericsArray()>();

        goto label418;

     label213:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeCastExpressionLL1()>();

        goto label418;

     label214:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeCastExpressionWithNameArray()>();

        goto label418;

     label215:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeOnlyTypeArgumentsForCastExpression()>();

        goto label418;

     label216:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeInsideCastExpression()>();

        goto label418;

     label217:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeInsideCastExpressionLL1()>();

        goto label418;

     label218:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeInsideCastExpressionWithQualifiedGenerics()>();

        goto label418;

     label219:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeBinaryExpression(int)>(15);

        goto label418;

     label220:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeBinaryExpression(int)>(9);

        goto label418;

     label221:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeBinaryExpression(int)>(16);

        goto label418;

     label222:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeBinaryExpression(int)>(14);

        goto label418;

     label223:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeBinaryExpression(int)>(13);

        goto label418;

     label224:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeBinaryExpression(int)>(10);

        goto label418;

     label225:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeBinaryExpression(int)>(17);

        goto label418;

     label226:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeBinaryExpression(int)>(19);

        goto label418;

     label227:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeBinaryExpression(int)>(4);

        goto label418;

     label228:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeBinaryExpression(int)>(6);

        goto label418;

     label229:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeBinaryExpression(int)>(5);

        goto label418;

     label230:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeBinaryExpression(int)>(7);

        goto label418;

     label231:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeInstanceOfExpression()>();

        goto label418;

     label232:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeEqualityExpression(int)>(18);

        goto label418;

     label233:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeEqualityExpression(int)>(29);

        goto label418;

     label234:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeBinaryExpression(int)>(2);

        goto label418;

     label235:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeBinaryExpression(int)>(8);

        goto label418;

     label236:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeBinaryExpression(int)>(3);

        goto label418;

     label237:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeBinaryExpression(int)>(0);

        goto label418;

     label238:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeBinaryExpression(int)>(1);

        goto label418;

     label239:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeConditionalExpression(int)>(23);

        goto label418;

     label240:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeAssignment()>();

        goto label418;

     label241:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void ignoreExpressionAssignment()>();

        goto label418;

     label242:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeAssignmentOperator(int)>(30);

        goto label418;

     label243:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeAssignmentOperator(int)>(15);

        goto label418;

     label244:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeAssignmentOperator(int)>(9);

        goto label418;

     label245:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeAssignmentOperator(int)>(16);

        goto label418;

     label246:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeAssignmentOperator(int)>(14);

        goto label418;

     label247:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeAssignmentOperator(int)>(13);

        goto label418;

     label248:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeAssignmentOperator(int)>(10);

        goto label418;

     label249:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeAssignmentOperator(int)>(17);

        goto label418;

     label250:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeAssignmentOperator(int)>(19);

        goto label418;

     label251:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeAssignmentOperator(int)>(2);

        goto label418;

     label252:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeAssignmentOperator(int)>(8);

        goto label418;

     label253:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeAssignmentOperator(int)>(3);

        goto label418;

     label254:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeEmptyExpression()>();

        goto label418;

     label255:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeEmptyClassBodyDeclarationsopt()>();

        goto label418;

     label256:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeClassBodyDeclarationsopt()>();

        goto label418;

     label257:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeDefaultModifiers()>();

        goto label418;

     label258:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeModifiers()>();

        goto label418;

     label259:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeEmptyBlockStatementsopt()>();

        goto label418;

     label260:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeEmptyDimsopt()>();

        goto label418;

     label261:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeEmptyArgumentListopt()>();

        goto label418;

     label262:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeFormalParameterListopt()>();

        goto label418;

     label263:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeEmptyInterfaceMemberDeclarationsopt()>();

        goto label418;

     label264:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeInterfaceMemberDeclarationsopt()>();

        goto label418;

     label265:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeNestedType()>();

        goto label418;

     label266:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeEmptyForInitopt()>();

        goto label418;

     label267:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeEmptyForUpdateopt()>();

        goto label418;

     label268:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeEmptyCatchesopt()>();

        goto label418;

     label269:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeEnumDeclaration()>();

        goto label418;

     label270:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeEnumHeader()>();

        goto label418;

     label271:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeEnumHeaderName()>();

        goto label418;

     label272:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeEnumHeaderNameWithTypeParameters()>();

        goto label418;

     label273:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeEnumBodyNoConstants()>();

        goto label418;

     label274:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeEnumBodyNoConstants()>();

        goto label418;

     label275:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeEnumBodyWithConstants()>();

        goto label418;

     label276:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeEnumBodyWithConstants()>();

        goto label418;

     label277:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeEnumConstants()>();

        goto label418;

     label278:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeEnumConstantHeaderName()>();

        goto label418;

     label279:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeEnumConstantHeader()>();

        goto label418;

     label280:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeEnumConstantWithClassBody()>();

        goto label418;

     label281:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeEnumConstantNoClassBody()>();

        goto label418;

     label282:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeArguments()>();

        goto label418;

     label283:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeEmptyArguments()>();

        goto label418;

     label284:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeEnumDeclarations()>();

        goto label418;

     label285:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeEmptyEnumDeclarations()>();

        goto label418;

     label286:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeEnhancedForStatement()>();

        goto label418;

     label287:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeEnhancedForStatement()>();

        goto label418;

     label288:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeEnhancedForStatementHeaderInit(boolean)>(0);

        goto label418;

     label289:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeEnhancedForStatementHeaderInit(boolean)>(1);

        goto label418;

     label290:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeEnhancedForStatementHeader()>();

        goto label418;

     label291:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeImportDeclaration()>();

        goto label418;

     label292:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeSingleStaticImportDeclarationName()>();

        goto label418;

     label293:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeImportDeclaration()>();

        goto label418;

     label294:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeStaticImportOnDemandDeclarationName()>();

        goto label418;

     label295:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeTypeArguments()>();

        goto label418;

     label296:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeOnlyTypeArguments()>();

        goto label418;

     label297:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeTypeArgumentList1()>();

        goto label418;

     label298:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeTypeArgumentList()>();

        goto label418;

     label299:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeTypeArgument()>();

        goto label418;

     label300:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeReferenceType1()>();

        goto label418;

     label301:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeTypeArgumentReferenceType1()>();

        goto label418;

     label302:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeTypeArgumentList2()>();

        goto label418;

     label303:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeReferenceType2()>();

        goto label418;

     label304:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeTypeArgumentReferenceType2()>();

        goto label418;

     label305:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeTypeArgumentList3()>();

        goto label418;

     label306:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeReferenceType3()>();

        goto label418;

     label307:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeWildcard()>();

        goto label418;

     label308:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeWildcardWithBounds()>();

        goto label418;

     label309:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeWildcardBoundsExtends()>();

        goto label418;

     label310:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeWildcardBoundsSuper()>();

        goto label418;

     label311:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeWildcard1()>();

        goto label418;

     label312:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeWildcard1WithBounds()>();

        goto label418;

     label313:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeWildcardBounds1Extends()>();

        goto label418;

     label314:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeWildcardBounds1Super()>();

        goto label418;

     label315:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeWildcard2()>();

        goto label418;

     label316:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeWildcard2WithBounds()>();

        goto label418;

     label317:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeWildcardBounds2Extends()>();

        goto label418;

     label318:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeWildcardBounds2Super()>();

        goto label418;

     label319:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeWildcard3()>();

        goto label418;

     label320:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeWildcard3WithBounds()>();

        goto label418;

     label321:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeWildcardBounds3Extends()>();

        goto label418;

     label322:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeWildcardBounds3Super()>();

        goto label418;

     label323:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeTypeParameterHeader()>();

        goto label418;

     label324:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeTypeParameters()>();

        goto label418;

     label325:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeTypeParameterList()>();

        goto label418;

     label326:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeTypeParameterWithExtends()>();

        goto label418;

     label327:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeTypeParameterWithExtendsAndBounds()>();

        goto label418;

     label328:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeAdditionalBoundList()>();

        goto label418;

     label329:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeAdditionalBound()>();

        goto label418;

     label330:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeTypeParameterList1()>();

        goto label418;

     label331:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeTypeParameter1()>();

        goto label418;

     label332:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeTypeParameter1WithExtends()>();

        goto label418;

     label333:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeTypeParameter1WithExtendsAndBounds()>();

        goto label418;

     label334:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeAdditionalBoundList1()>();

        goto label418;

     label335:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeAdditionalBound1()>();

        goto label418;

     label336:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeUnaryExpression(int)>(14);

        goto label418;

     label337:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeUnaryExpression(int)>(13);

        goto label418;

     label338:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeUnaryExpression(int)>(12);

        goto label418;

     label339:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeUnaryExpression(int)>(11);

        goto label418;

     label340:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeBinaryExpression(int)>(15);

        goto label418;

     label341:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeBinaryExpressionWithName(int)>(15);

        goto label418;

     label342:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeBinaryExpression(int)>(9);

        goto label418;

     label343:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeBinaryExpressionWithName(int)>(9);

        goto label418;

     label344:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeBinaryExpression(int)>(16);

        goto label418;

     label345:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeBinaryExpressionWithName(int)>(16);

        goto label418;

     label346:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeBinaryExpression(int)>(14);

        goto label418;

     label347:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeBinaryExpressionWithName(int)>(14);

        goto label418;

     label348:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeBinaryExpression(int)>(13);

        goto label418;

     label349:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeBinaryExpressionWithName(int)>(13);

        goto label418;

     label350:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeBinaryExpression(int)>(10);

        goto label418;

     label351:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeBinaryExpressionWithName(int)>(10);

        goto label418;

     label352:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeBinaryExpression(int)>(17);

        goto label418;

     label353:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeBinaryExpressionWithName(int)>(17);

        goto label418;

     label354:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeBinaryExpression(int)>(19);

        goto label418;

     label355:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeBinaryExpressionWithName(int)>(19);

        goto label418;

     label356:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeBinaryExpression(int)>(4);

        goto label418;

     label357:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeBinaryExpressionWithName(int)>(4);

        goto label418;

     label358:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeBinaryExpression(int)>(6);

        goto label418;

     label359:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeBinaryExpressionWithName(int)>(6);

        goto label418;

     label360:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeBinaryExpression(int)>(5);

        goto label418;

     label361:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeBinaryExpressionWithName(int)>(5);

        goto label418;

     label362:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeBinaryExpression(int)>(7);

        goto label418;

     label363:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeBinaryExpressionWithName(int)>(7);

        goto label418;

     label364:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeInstanceOfExpressionWithName()>();

        goto label418;

     label365:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeInstanceOfExpression()>();

        goto label418;

     label366:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeEqualityExpression(int)>(18);

        goto label418;

     label367:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeEqualityExpressionWithName(int)>(18);

        goto label418;

     label368:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeEqualityExpression(int)>(29);

        goto label418;

     label369:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeEqualityExpressionWithName(int)>(29);

        goto label418;

     label370:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeBinaryExpression(int)>(2);

        goto label418;

     label371:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeBinaryExpressionWithName(int)>(2);

        goto label418;

     label372:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeBinaryExpression(int)>(8);

        goto label418;

     label373:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeBinaryExpressionWithName(int)>(8);

        goto label418;

     label374:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeBinaryExpression(int)>(3);

        goto label418;

     label375:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeBinaryExpressionWithName(int)>(3);

        goto label418;

     label376:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeBinaryExpression(int)>(0);

        goto label418;

     label377:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeBinaryExpressionWithName(int)>(0);

        goto label418;

     label378:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeBinaryExpression(int)>(1);

        goto label418;

     label379:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeBinaryExpressionWithName(int)>(1);

        goto label418;

     label380:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeConditionalExpression(int)>(23);

        goto label418;

     label381:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeConditionalExpressionWithName(int)>(23);

        goto label418;

     label382:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeAnnotationTypeDeclarationHeaderName()>();

        goto label418;

     label383:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeAnnotationTypeDeclarationHeaderNameWithTypeParameters()>();

        goto label418;

     label384:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeAnnotationTypeDeclarationHeaderNameWithTypeParameters()>();

        goto label418;

     label385:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeAnnotationTypeDeclarationHeaderName()>();

        goto label418;

     label386:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeAnnotationTypeDeclarationHeader()>();

        goto label418;

     label387:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeAnnotationTypeDeclaration()>();

        goto label418;

     label388:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeEmptyAnnotationTypeMemberDeclarationsopt()>();

        goto label418;

     label389:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeAnnotationTypeMemberDeclarationsopt()>();

        goto label418;

     label390:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeAnnotationTypeMemberDeclarations()>();

        goto label418;

     label391:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeMethodHeaderNameWithTypeParameters(boolean)>(1);

        goto label418;

     label392:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeMethodHeaderName(boolean)>(1);

        goto label418;

     label393:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeEmptyMethodHeaderDefaultValue()>();

        goto label418;

     label394:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeMethodHeaderDefaultValue()>();

        goto label418;

     label395:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeMethodHeader()>();

        goto label418;

     label396:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeAnnotationTypeMemberDeclaration()>();

        goto label418;

     label397:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeAnnotationName()>();

        goto label418;

     label398:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeNormalAnnotation()>();

        goto label418;

     label399:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeEmptyMemberValuePairsopt()>();

        goto label418;

     label400:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeMemberValuePairs()>();

        goto label418;

     label401:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeMemberValuePair()>();

        goto label418;

     label402:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeEnterMemberValue()>();

        goto label418;

     label403:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeExitMemberValue()>();

        goto label418;

     label404:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeMemberValueAsName()>();

        goto label418;

     label405:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeMemberValueArrayInitializer()>();

        goto label418;

     label406:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeMemberValueArrayInitializer()>();

        goto label418;

     label407:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeEmptyMemberValueArrayInitializer()>();

        goto label418;

     label408:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeEmptyMemberValueArrayInitializer()>();

        goto label418;

     label409:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeEnterMemberValueArrayInitializer()>();

        goto label418;

     label410:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeMemberValues()>();

        goto label418;

     label411:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeMarkerAnnotation()>();

        goto label418;

     label412:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeSingleMemberAnnotationMemberValue()>();

        goto label418;

     label413:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeSingleMemberAnnotation()>();

        goto label418;

     label414:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeRecoveryMethodHeaderNameWithTypeParameters()>();

        goto label418;

     label415:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeRecoveryMethodHeaderName()>();

        goto label418;

     label416:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeMethodHeader()>();

        goto label418;

     label417:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeMethodHeader()>();

     label418:
        return;
    }

    protected void consumeSimpleAssertStatement()
    {
        org.eclipse.jdt.internal.compiler.ast.AssertStatement $r1;
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r2;
        org.eclipse.jdt.internal.compiler.ast.Expression $r3;
        int[] $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr> = $i1;

        $r1 = new org.eclipse.jdt.internal.compiler.ast.AssertStatement;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i3 = $i2 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr> = $i3;

        $r3 = $r2[$i2];

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i5 = $i4 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i5;

        $i6 = $r4[$i4];

        specialinvoke $r1.<org.eclipse.jdt.internal.compiler.ast.AssertStatement: void <init>(org.eclipse.jdt.internal.compiler.ast.Expression,int)>($r3, $i6);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnAstStack(org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r1);

        return;
    }

    protected void consumeSingleMemberAnnotation()
    {
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r9;
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r4;
        org.eclipse.jdt.internal.compiler.parser.RecoveredAnnotation $r12;
        org.eclipse.jdt.internal.compiler.ast.Expression $r5;
        byte $b10;
        int[] $r3;
        boolean $z0, $z1;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r1;
        org.eclipse.jdt.internal.compiler.ast.SingleMemberAnnotation $r14;
        org.eclipse.jdt.internal.compiler.impl.CompilerOptions $r7;
        long $l9;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i11, $i12, $i13, $i14, $i15;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r8;
        org.eclipse.jdt.internal.compiler.parser.RecoveredElement $r6, $r10, $r11, $r13;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $r1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeReference getAnnotationType()>();

        $r14 = new org.eclipse.jdt.internal.compiler.ast.SingleMemberAnnotation;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i2 = $i1 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i2;

        $i3 = $r3[$i1];

        specialinvoke $r14.<org.eclipse.jdt.internal.compiler.ast.SingleMemberAnnotation: void <init>(org.eclipse.jdt.internal.compiler.ast.TypeReference,int)>($r1, $i3);

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i5 = $i4 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr> = $i5;

        $r5 = $r4[$i4];

        $r14.<org.eclipse.jdt.internal.compiler.ast.SingleMemberAnnotation: org.eclipse.jdt.internal.compiler.ast.Expression memberValue> = $r5;

        $i6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        $i7 = $i6 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr> = $i7;

        $i8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int rParenPos>;

        $r14.<org.eclipse.jdt.internal.compiler.ast.SingleMemberAnnotation: int declarationSourceEnd> = $i8;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnExpressionStack(org.eclipse.jdt.internal.compiler.ast.Expression)>($r14);

        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r6 == null goto label1;

        $i14 = $r14.<org.eclipse.jdt.internal.compiler.ast.SingleMemberAnnotation: int sourceStart>;

        $i13 = $r14.<org.eclipse.jdt.internal.compiler.ast.SingleMemberAnnotation: int declarationSourceEnd>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void annotationRecoveryCheckPoint(int,int)>($i14, $i13);

        $r10 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $z0 = $r10 instanceof org.eclipse.jdt.internal.compiler.parser.RecoveredAnnotation;

        if $z0 == 0 goto label1;

        $r11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $r12 = (org.eclipse.jdt.internal.compiler.parser.RecoveredAnnotation) $r11;

        $r13 = virtualinvoke $r12.<org.eclipse.jdt.internal.compiler.parser.RecoveredAnnotation: org.eclipse.jdt.internal.compiler.parser.RecoveredElement addAnnotation(org.eclipse.jdt.internal.compiler.ast.Annotation,int)>($r14, i0);

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement> = $r13;

     label1:
        $z1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean statementRecoveryActivated>;

        if $z1 != 0 goto label2;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.CompilerOptions options>;

        $l9 = $r7.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long sourceLevel>;

        $b10 = $l9 cmp 3211264L;

        $i15 = (int) $b10;

        if $i15 >= 0 goto label2;

        $i12 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastErrorEndPositionBeforeRecovery>;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i11 = $r8.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        if $i12 >= $i11 goto label2;

        $r9 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        virtualinvoke $r9.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void invalidUsageOfAnnotation(org.eclipse.jdt.internal.compiler.ast.Annotation)>($r14);

     label2:
        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean recordStringLiterals> = 1;

        return;
    }

    protected void consumeSingleMemberAnnotationMemberValue()
    {
        org.eclipse.jdt.internal.compiler.parser.RecoveredAnnotation r4;
        org.eclipse.jdt.internal.compiler.parser.RecoveredElement $r1, $r2, $r3;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        boolean $z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r1 == null goto label1;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $z0 = $r2 instanceof org.eclipse.jdt.internal.compiler.parser.RecoveredAnnotation;

        if $z0 == 0 goto label1;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        r4 = (org.eclipse.jdt.internal.compiler.parser.RecoveredAnnotation) $r3;

        virtualinvoke r4.<org.eclipse.jdt.internal.compiler.parser.RecoveredAnnotation: void setKind(int)>(2);

     label1:
        return;
    }

    protected void consumeSingleStaticImportDeclarationName()
    {
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r12;
        char[][] r2, $r4;
        byte $b18;
        int[] $r1, $r7;
        boolean $z0;
        org.eclipse.jdt.internal.compiler.impl.CompilerOptions $r10;
        long $l17;
        long[] r3, $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i19, $i20, $i21, $i22, $i24, $i25, $i27;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ImportReference $r15;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r11, $r13;
        org.eclipse.jdt.internal.compiler.parser.RecoveredElement $r8, $r9, $r14;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] identifierLengthStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr> = $i1;

        $i2 = $r1[$i0];

        r2 = newarray (char[])[$i2];

        $i3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i4 = $i3 - $i2;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr> = $i4;

        r3 = newarray (long)[$i2];

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: char[][] identifierStack>;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i6 = $i5 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, $i6, r2, 0, $i2);

        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: long[] identifierPositionStack>;

        $i7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i8 = $i7 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, $i8, r3, 0, $i2);

        $r15 = new org.eclipse.jdt.internal.compiler.ast.ImportReference;

        specialinvoke $r15.<org.eclipse.jdt.internal.compiler.ast.ImportReference: void <init>(char[][],long[],boolean,int)>(r2, r3, 0, 8);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnAstStack(org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r15);

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int modifiers> = 0;

        $i24 = (int) -1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int modifiersSourceStart> = $i24;

        $i9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int currentToken>;

        if $i9 != 27 goto label1;

        $r13 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i21 = $r13.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        $i22 = $i21 - 1;

        $r15.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationSourceEnd> = $i22;

        goto label2;

     label1:
        $i10 = $r15.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int sourceEnd>;

        $r15.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationSourceEnd> = $i10;

     label2:
        $i11 = $r15.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationSourceEnd>;

        $r15.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationEnd> = $i11;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i12 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i13 = $i12 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i13;

        $i14 = $r7[$i12];

        $r15.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationSourceStart> = $i14;

        $z0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean statementRecoveryActivated>;

        if $z0 != 0 goto label3;

        $r10 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.CompilerOptions options>;

        $l17 = $r10.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long sourceLevel>;

        $b18 = $l17 cmp 3211264L;

        $i25 = (int) $b18;

        if $i25 >= 0 goto label3;

        $i20 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastErrorEndPositionBeforeRecovery>;

        $r11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i19 = $r11.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        if $i20 >= $i19 goto label3;

        $r15.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int modifiers> = 0;

        $r12 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        virtualinvoke $r12.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void invalidUsageOfStaticImports(org.eclipse.jdt.internal.compiler.ast.ImportReference)>($r15);

     label3:
        $r14 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r14 == null goto label4;

        $i15 = $r15.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationSourceEnd>;

        $i16 = $i15 + 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastCheckPoint> = $i16;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $r9 = virtualinvoke $r8.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.ImportReference,int)>($r15, 0);

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement> = $r9;

        $i27 = (int) -1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastIgnoredToken> = $i27;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean restartRecovery> = 1;

     label4:
        return;
    }

    protected void consumeSingleTypeImportDeclarationName()
    {
        char[][] r2, $r4;
        int[] $r1, $r7;
        long[] r3, $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i20;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ImportReference $r12;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r11;
        org.eclipse.jdt.internal.compiler.parser.RecoveredElement $r8, $r9, $r10;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] identifierLengthStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr> = $i1;

        $i2 = $r1[$i0];

        r2 = newarray (char[])[$i2];

        $i3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i4 = $i3 - $i2;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr> = $i4;

        r3 = newarray (long)[$i2];

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: char[][] identifierStack>;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i6 = $i5 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, $i6, r2, 0, $i2);

        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: long[] identifierPositionStack>;

        $i7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i8 = $i7 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, $i8, r3, 0, $i2);

        $r12 = new org.eclipse.jdt.internal.compiler.ast.ImportReference;

        specialinvoke $r12.<org.eclipse.jdt.internal.compiler.ast.ImportReference: void <init>(char[][],long[],boolean,int)>(r2, r3, 0, 0);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnAstStack(org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r12);

        $i9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int currentToken>;

        if $i9 != 27 goto label1;

        $r11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i17 = $r11.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        $i18 = $i17 - 1;

        $r12.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationSourceEnd> = $i18;

        goto label2;

     label1:
        $i10 = $r12.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int sourceEnd>;

        $r12.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationSourceEnd> = $i10;

     label2:
        $i11 = $r12.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationSourceEnd>;

        $r12.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationEnd> = $i11;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i12 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i13 = $i12 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i13;

        $i14 = $r7[$i12];

        $r12.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationSourceStart> = $i14;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r8 == null goto label3;

        $i15 = $r12.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationSourceEnd>;

        $i16 = $i15 + 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastCheckPoint> = $i16;

        $r9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $r10 = virtualinvoke $r9.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.ImportReference,int)>($r12, 0);

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement> = $r10;

        $i20 = (int) -1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastIgnoredToken> = $i20;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean restartRecovery> = 1;

     label3:
        return;
    }

    protected void consumeStatementBreak()
    {
        org.eclipse.jdt.internal.compiler.ast.BreakStatement $r1;
        int[] $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r8;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration $r3, $r4, $r6, $r7;
        org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression $r5;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = new org.eclipse.jdt.internal.compiler.ast.BreakStatement;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i1;

        $i3 = $r2[$i0];

        $i2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        specialinvoke $r1.<org.eclipse.jdt.internal.compiler.ast.BreakStatement: void <init>(char[],int,int)>(null, $i3, $i2);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnAstStack(org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r1);

        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration pendingRecoveredType>;

        if $r3 == null goto label2;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration pendingRecoveredType>;

        $r5 = $r4.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression allocation>;

        if $r5 != null goto label1;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endPosition>;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration pendingRecoveredType>;

        $i4 = $r6.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int declarationSourceEnd>;

        if $i5 > $i4 goto label1;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration pendingRecoveredType>;

        $r8[$i6] = $r7;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration pendingRecoveredType> = null;

        return;

     label1:
        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration pendingRecoveredType> = null;

     label2:
        return;
    }

    protected void consumeStatementBreakWithLabel()
    {
        char[][] $r2;
        org.eclipse.jdt.internal.compiler.ast.BreakStatement $r1;
        int[] $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        char[] $r3;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = new org.eclipse.jdt.internal.compiler.ast.BreakStatement;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: char[][] identifierStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr> = $i1;

        $r3 = $r2[$i0];

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i3 = $i2 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i3;

        $i5 = $r4[$i2];

        $i4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        specialinvoke $r1.<org.eclipse.jdt.internal.compiler.ast.BreakStatement: void <init>(char[],int,int)>($r3, $i5, $i4);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnAstStack(org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r1);

        $i6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr>;

        $i7 = $i6 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr> = $i7;

        return;
    }

    protected void consumeStatementCatch()
    {
        int $i0, $i1;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr> = $i1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int listLength> = 0;

        return;
    }

    protected void consumeStatementContinue()
    {
        int[] $r2;
        int $i0, $i1, $i2, $i3;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ContinueStatement $r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = new org.eclipse.jdt.internal.compiler.ast.ContinueStatement;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i1;

        $i3 = $r2[$i0];

        $i2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        specialinvoke $r1.<org.eclipse.jdt.internal.compiler.ast.ContinueStatement: void <init>(char[],int,int)>(null, $i3, $i2);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnAstStack(org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r1);

        return;
    }

    protected void consumeStatementContinueWithLabel()
    {
        char[][] $r2;
        int[] $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        char[] $r3;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ContinueStatement $r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = new org.eclipse.jdt.internal.compiler.ast.ContinueStatement;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: char[][] identifierStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr> = $i1;

        $r3 = $r2[$i0];

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i3 = $i2 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i3;

        $i5 = $r4[$i2];

        $i4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        specialinvoke $r1.<org.eclipse.jdt.internal.compiler.ast.ContinueStatement: void <init>(char[],int,int)>($r3, $i5, $i4);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnAstStack(org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r1);

        $i6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr>;

        $i7 = $i6 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr> = $i7;

        return;
    }

    protected void consumeStatementDo()
    {
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r6;
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r2;
        org.eclipse.jdt.internal.compiler.ast.Statement r3;
        org.eclipse.jdt.internal.compiler.ast.Expression $r7;
        int[] $r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r1, $r5;
        org.eclipse.jdt.internal.compiler.ast.DoStatement $r4;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i1;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $r2 = $r1[$i2];

        r3 = (org.eclipse.jdt.internal.compiler.ast.Statement) $r2;

        $i3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        $i4 = $i3 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr> = $i4;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $r4 = new org.eclipse.jdt.internal.compiler.ast.DoStatement;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i6 = $i5 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr> = $i6;

        $r7 = $r6[$i5];

        $r8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i9 = $i8 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i9;

        $i11 = $r8[$i8];

        $i10 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        specialinvoke $r4.<org.eclipse.jdt.internal.compiler.ast.DoStatement: void <init>(org.eclipse.jdt.internal.compiler.ast.Expression,org.eclipse.jdt.internal.compiler.ast.Statement,int,int)>($r7, r3, $i11, $i10);

        $r5[$i7] = $r4;

        return;
    }

    protected void consumeStatementExpressionList()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void concatExpressionLists()>();

        return;
    }

    protected void consumeStatementFor()
    {
        org.eclipse.jdt.internal.compiler.ast.Statement[] $r5, $r9, $r12, r16, r17;
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r6, $r13, $r14;
        org.eclipse.jdt.internal.compiler.ast.Statement r3;
        org.eclipse.jdt.internal.compiler.ast.Expression r15;
        int[] $r4, $r7, $r8, $r11, $r19;
        boolean z0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, i29, $i30, $i31, $i32, $i33, $i35;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r1, $r10;
        org.eclipse.jdt.internal.compiler.ast.ForStatement $r20;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        r15 = null;

        z0 = 1;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr> = $i1;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i3 = $i2 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr> = $i3;

        $r2 = $r1[$i2];

        r3 = (org.eclipse.jdt.internal.compiler.ast.Statement) $r2;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] expressionLengthStack>;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        $i5 = $i4 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr> = $i5;

        $i6 = $r4[$i4];

        if $i6 != 0 goto label1;

        r16 = (org.eclipse.jdt.internal.compiler.ast.Statement[]) null;

        goto label2;

     label1:
        $i7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i8 = $i7 - $i6;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr> = $i8;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i10 = $i9 + 1;

        $r5 = newarray (org.eclipse.jdt.internal.compiler.ast.Statement)[$i6];

        r16 = $r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, $i10, $r5, 0, $i6);

     label2:
        $r7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] expressionLengthStack>;

        $i11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        $i12 = $i11 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr> = $i12;

        $i13 = $r7[$i11];

        if $i13 == 0 goto label3;

        $r14 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i27 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i28 = $i27 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr> = $i28;

        r15 = $r14[$i27];

     label3:
        $r8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] astLengthStack>;

        $i14 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr>;

        $i15 = $i14 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr> = $i15;

        $i16 = $r8[$i14];

        if $i16 != 0 goto label4;

        r17 = (org.eclipse.jdt.internal.compiler.ast.Statement[]) null;

        z0 = 0;

        goto label6;

     label4:
        $i35 = (int) -1;

        if $i16 != $i35 goto label5;

        z0 = 0;

        $r11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] expressionLengthStack>;

        $i21 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        $i22 = $i21 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr> = $i22;

        i29 = $r11[$i21];

        $i23 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i24 = $i23 - i29;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr> = $i24;

        $r13 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i25 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i26 = $i25 + 1;

        $r12 = newarray (org.eclipse.jdt.internal.compiler.ast.Statement)[i29];

        r17 = $r12;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r13, $i26, $r12, 0, i29);

        goto label6;

     label5:
        $i17 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i18 = $i17 - $i16;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr> = $i18;

        $r10 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i19 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i20 = $i19 + 1;

        $r9 = newarray (org.eclipse.jdt.internal.compiler.ast.Statement)[$i16];

        r17 = $r9;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r10, $i20, $r9, 0, $i16);

     label6:
        $r20 = new org.eclipse.jdt.internal.compiler.ast.ForStatement;

        $r19 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i30 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i31 = $i30 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i31;

        $i32 = $r19[$i30];

        $i33 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        specialinvoke $r20.<org.eclipse.jdt.internal.compiler.ast.ForStatement: void <init>(org.eclipse.jdt.internal.compiler.ast.Statement[],org.eclipse.jdt.internal.compiler.ast.Expression,org.eclipse.jdt.internal.compiler.ast.Statement[],org.eclipse.jdt.internal.compiler.ast.Statement,boolean,int,int)>(r17, r15, r16, r3, z0, $i32, $i33);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnAstStack(org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r20);

        return;
    }

    protected void consumeStatementIfNoElse()
    {
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r6;
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r2;
        org.eclipse.jdt.internal.compiler.ast.Statement r3;
        org.eclipse.jdt.internal.compiler.ast.Expression $r7;
        int[] $r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        org.eclipse.jdt.internal.compiler.ast.IfStatement $r4;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r1, $r5;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr> = $i1;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $r2 = $r1[$i2];

        r3 = (org.eclipse.jdt.internal.compiler.ast.Statement) $r2;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $r4 = new org.eclipse.jdt.internal.compiler.ast.IfStatement;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i4 = $i3 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr> = $i4;

        $r7 = $r6[$i3];

        $r8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i7 = $i6 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i7;

        $i9 = $r8[$i6];

        $i8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        specialinvoke $r4.<org.eclipse.jdt.internal.compiler.ast.IfStatement: void <init>(org.eclipse.jdt.internal.compiler.ast.Expression,org.eclipse.jdt.internal.compiler.ast.Statement,int,int)>($r7, r3, $i9, $i8);

        $r5[$i5] = $r4;

        return;
    }

    protected void consumeStatementIfWithElse()
    {
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r3;
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r5, $r7;
        org.eclipse.jdt.internal.compiler.ast.Statement $r9, $r10;
        org.eclipse.jdt.internal.compiler.ast.Expression $r8;
        int[] $r11;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        org.eclipse.jdt.internal.compiler.ast.IfStatement $r2;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r1, $r4, $r6;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr> = $i1;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr>;

        $i3 = $i2 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr> = $i3;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i5 = $i4 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr> = $i5;

        $r2 = new org.eclipse.jdt.internal.compiler.ast.IfStatement;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i7 = $i6 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr> = $i7;

        $r8 = $r3[$i6];

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $r5 = $r4[$i8];

        $r9 = (org.eclipse.jdt.internal.compiler.ast.Statement) $r5;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i10 = $i9 + 1;

        $r7 = $r6[$i10];

        $r10 = (org.eclipse.jdt.internal.compiler.ast.Statement) $r7;

        $r11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i12 = $i11 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i12;

        $i14 = $r11[$i11];

        $i13 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        specialinvoke $r2.<org.eclipse.jdt.internal.compiler.ast.IfStatement: void <init>(org.eclipse.jdt.internal.compiler.ast.Expression,org.eclipse.jdt.internal.compiler.ast.Statement,org.eclipse.jdt.internal.compiler.ast.Statement,int,int)>($r8, $r9, $r10, $i14, $i13);

        $r1[$i5] = $r2;

        return;
    }

    protected void consumeStatementLabel()
    {
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r2;
        long $l6;
        char[][] $r5;
        org.eclipse.jdt.internal.compiler.ast.Statement r3;
        long[] $r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7, $i8;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r1, $r6;
        org.eclipse.jdt.internal.compiler.ast.LabeledStatement $r4;
        char[] $r7;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $r2 = $r1[$i0];

        r3 = (org.eclipse.jdt.internal.compiler.ast.Statement) $r2;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $r4 = new org.eclipse.jdt.internal.compiler.ast.LabeledStatement;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: char[][] identifierStack>;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $r7 = $r5[$i1];

        $r8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: long[] identifierPositionStack>;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i3 = $i2 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr> = $i3;

        $l6 = $r8[$i2];

        $i5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        specialinvoke $r4.<org.eclipse.jdt.internal.compiler.ast.LabeledStatement: void <init>(char[],org.eclipse.jdt.internal.compiler.ast.Statement,long,int)>($r7, r3, $l6, $i5);

        $r6[$i4] = $r4;

        $i7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr>;

        $i8 = $i7 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr> = $i8;

        return;
    }

    protected void consumeStatementReturn()
    {
        org.eclipse.jdt.internal.compiler.ast.ReturnStatement $r2, $r4;
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r5;
        org.eclipse.jdt.internal.compiler.ast.Expression $r6;
        int[] $r1, $r3, $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] expressionLengthStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr> = $i1;

        $i2 = $r1[$i0];

        if $i2 == 0 goto label1;

        $r4 = new org.eclipse.jdt.internal.compiler.ast.ReturnStatement;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i8 = $i7 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr> = $i8;

        $r6 = $r5[$i7];

        $r7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i10 = $i9 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i10;

        $i12 = $r7[$i9];

        $i11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        specialinvoke $r4.<org.eclipse.jdt.internal.compiler.ast.ReturnStatement: void <init>(org.eclipse.jdt.internal.compiler.ast.Expression,int,int)>($r6, $i12, $i11);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnAstStack(org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r4);

        goto label2;

     label1:
        $r2 = new org.eclipse.jdt.internal.compiler.ast.ReturnStatement;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i4 = $i3 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i4;

        $i6 = $r3[$i3];

        $i5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        specialinvoke $r2.<org.eclipse.jdt.internal.compiler.ast.ReturnStatement: void <init>(org.eclipse.jdt.internal.compiler.ast.Expression,int,int)>(null, $i6, $i5);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnAstStack(org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r2);

     label2:
        return;
    }

    protected void consumeStatementSwitch()
    {
        org.eclipse.jdt.internal.compiler.ast.Statement[] $r8;
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r2;
        org.eclipse.jdt.internal.compiler.ast.Expression $r3;
        int[] $r4, $r5, $r6, $r7;
        boolean $z0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24;
        org.eclipse.jdt.internal.compiler.ast.SwitchStatement $r0;
        org.eclipse.jdt.internal.compiler.parser.Parser r1;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r9;

        r1 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r0 = new org.eclipse.jdt.internal.compiler.ast.SwitchStatement;

        specialinvoke $r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: void <init>()>();

        $i0 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        $i1 = $i0 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr> = $i1;

        $r2 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i2 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i3 = $i2 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr> = $i3;

        $r3 = $r2[$i2];

        $r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.ast.Expression expression> = $r3;

        $r4 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] astLengthStack>;

        $i4 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr>;

        $i5 = $i4 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr> = $i5;

        $i6 = $r4[$i4];

        if $i6 == 0 goto label1;

        $i21 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i22 = $i21 - $i6;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr> = $i22;

        $r9 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i23 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i24 = $i23 + 1;

        $r8 = newarray (org.eclipse.jdt.internal.compiler.ast.Statement)[$i6];

        $r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.ast.Statement[] statements> = $r8;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, $i24, $r8, 0, $i6);

     label1:
        $r5 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] realBlockStack>;

        $i7 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int realBlockPtr>;

        $i8 = $i7 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int realBlockPtr> = $i8;

        $i9 = $r5[$i7];

        $r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: int explicitDeclarations> = $i9;

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnAstStack(org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r0);

        $r6 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i10 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i11 = $i10 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i11;

        $i12 = $r6[$i10];

        $r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: int blockStart> = $i12;

        $r7 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i13 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i14 = $i13 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i14;

        $i15 = $r7[$i13];

        $r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: int sourceStart> = $i15;

        $i16 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        $r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: int sourceEnd> = $i16;

        if $i6 != 0 goto label2;

        $i18 = $r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: int blockStart>;

        $i17 = $r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: int sourceEnd>;

        $z0 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean containsComment(int,int)>($i18, $i17);

        if $z0 != 0 goto label2;

        $i19 = $r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: int bits>;

        $i20 = $i19 | 8;

        $r0.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: int bits> = $i20;

     label2:
        return;
    }

    protected void consumeStatementSynchronized()
    {
        org.eclipse.jdt.internal.compiler.ast.Block $r8;
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r4, $r13;
        org.eclipse.jdt.internal.compiler.ast.Expression $r7, $r14;
        int[] $r1, $r9, $r10, $r15;
        org.eclipse.jdt.internal.compiler.ast.SynchronizedStatement $r2, $r12;
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r3, $r5, $r11;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] astLengthStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr>;

        $i1 = $r1[$i0];

        if $i1 != 0 goto label1;

        $r10 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] astLengthStack>;

        $i12 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr>;

        $r10[$i12] = 1;

        $i13 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        $i14 = $i13 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr> = $i14;

        $r11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i15 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i16 = $i15 + 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr> = $i16;

        $r12 = new org.eclipse.jdt.internal.compiler.ast.SynchronizedStatement;

        $r13 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i17 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i18 = $i17 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr> = $i18;

        $r14 = $r13[$i17];

        $r15 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i19 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i20 = $i19 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i20;

        $i22 = $r15[$i19];

        $i21 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        specialinvoke $r12.<org.eclipse.jdt.internal.compiler.ast.SynchronizedStatement: void <init>(org.eclipse.jdt.internal.compiler.ast.Expression,org.eclipse.jdt.internal.compiler.ast.Block,int,int)>($r14, null, $i22, $i21);

        $r11[$i16] = $r12;

        goto label2;

     label1:
        $i2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        $i3 = $i2 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr> = $i3;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $r2 = new org.eclipse.jdt.internal.compiler.ast.SynchronizedStatement;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i5 = $i4 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr> = $i5;

        $r7 = $r4[$i4];

        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $r6 = $r5[$i7];

        $r8 = (org.eclipse.jdt.internal.compiler.ast.Block) $r6;

        $r9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i9 = $i8 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i9;

        $i11 = $r9[$i8];

        $i10 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        specialinvoke $r2.<org.eclipse.jdt.internal.compiler.ast.SynchronizedStatement: void <init>(org.eclipse.jdt.internal.compiler.ast.Expression,org.eclipse.jdt.internal.compiler.ast.Block,int,int)>($r7, $r8, $i11, $i10);

        $r3[$i6] = $r2;

     label2:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void resetModifiers()>();

        return;
    }

    protected void consumeStatementThrow()
    {
        org.eclipse.jdt.internal.compiler.ast.ThrowStatement $r1;
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r2;
        org.eclipse.jdt.internal.compiler.ast.Expression $r3;
        int[] $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr> = $i1;

        $r1 = new org.eclipse.jdt.internal.compiler.ast.ThrowStatement;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i3 = $i2 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr> = $i3;

        $r3 = $r2[$i2];

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i5 = $i4 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i5;

        $i7 = $r4[$i4];

        $i6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        specialinvoke $r1.<org.eclipse.jdt.internal.compiler.ast.ThrowStatement: void <init>(org.eclipse.jdt.internal.compiler.ast.Expression,int,int)>($r3, $i7, $i6);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnAstStack(org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r1);

        return;
    }

    protected void consumeStatementTry(boolean)
    {
        org.eclipse.jdt.internal.compiler.ast.Block $r7, $r14, $r21, $r24;
        int[] $r2, $r25;
        org.eclipse.jdt.internal.compiler.ast.Block[] $r3, $r11;
        org.eclipse.jdt.internal.compiler.ast.Argument[] $r4, $r15;
        boolean z0;
        org.eclipse.jdt.internal.compiler.ast.Argument $r10, $r18;
        org.eclipse.jdt.internal.compiler.ast.TryStatement $r26;
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r6, $r9, $r13, $r17, $r20, $r23;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i26;
        org.eclipse.jdt.internal.compiler.parser.Parser r1;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r5, $r8, $r12, $r16, $r19, $r22;

        r1 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        z0 := @parameter0: boolean;

        $r26 = new org.eclipse.jdt.internal.compiler.ast.TryStatement;

        specialinvoke $r26.<org.eclipse.jdt.internal.compiler.ast.TryStatement: void <init>()>();

        if z0 == 0 goto label1;

        $i12 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr>;

        $i13 = $i12 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr> = $i13;

        $r19 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i14 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i15 = $i14 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr> = $i15;

        $r20 = $r19[$i14];

        $r21 = (org.eclipse.jdt.internal.compiler.ast.Block) $r20;

        $r26.<org.eclipse.jdt.internal.compiler.ast.TryStatement: org.eclipse.jdt.internal.compiler.ast.Block finallyBlock> = $r21;

     label1:
        $r2 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] astLengthStack>;

        $i0 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr>;

        $i1 = $i0 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr> = $i1;

        $i2 = $r2[$i0];

        i16 = $i2;

        if $i2 == 0 goto label5;

        if $i2 != 1 goto label2;

        $r11 = newarray (org.eclipse.jdt.internal.compiler.ast.Block)[1];

        $r12 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i8 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i9 = $i8 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr> = $i9;

        $r13 = $r12[$i8];

        $r14 = (org.eclipse.jdt.internal.compiler.ast.Block) $r13;

        $r11[0] = $r14;

        $r26.<org.eclipse.jdt.internal.compiler.ast.TryStatement: org.eclipse.jdt.internal.compiler.ast.Block[] catchBlocks> = $r11;

        $r15 = newarray (org.eclipse.jdt.internal.compiler.ast.Argument)[1];

        $r16 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i10 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i11 = $i10 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr> = $i11;

        $r17 = $r16[$i10];

        $r18 = (org.eclipse.jdt.internal.compiler.ast.Argument) $r17;

        $r15[0] = $r18;

        $r26.<org.eclipse.jdt.internal.compiler.ast.TryStatement: org.eclipse.jdt.internal.compiler.ast.Argument[] catchArguments> = $r15;

        goto label5;

     label2:
        $r3 = newarray (org.eclipse.jdt.internal.compiler.ast.Block)[$i2];

        $r26.<org.eclipse.jdt.internal.compiler.ast.TryStatement: org.eclipse.jdt.internal.compiler.ast.Block[] catchBlocks> = $r3;

        $r4 = newarray (org.eclipse.jdt.internal.compiler.ast.Argument)[$i2];

        $r26.<org.eclipse.jdt.internal.compiler.ast.TryStatement: org.eclipse.jdt.internal.compiler.ast.Argument[] catchArguments> = $r4;

        goto label4;

     label3:
        $r5 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i4 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i5 = $i4 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr> = $i5;

        $r6 = $r5[$i4];

        $r7 = (org.eclipse.jdt.internal.compiler.ast.Block) $r6;

        $r3[i16] = $r7;

        $r8 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i6 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i7 = $i6 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr> = $i7;

        $r9 = $r8[$i6];

        $r10 = (org.eclipse.jdt.internal.compiler.ast.Argument) $r9;

        $r4[i16] = $r10;

     label4:
        $i3 = i16;

        $i26 = (int) -1;

        i16 = i16 + $i26;

        if $i3 > 0 goto label3;

     label5:
        $i17 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr>;

        $i18 = $i17 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr> = $i18;

        $r22 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i19 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i20 = $i19 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr> = $i20;

        $r23 = $r22[$i19];

        $r24 = (org.eclipse.jdt.internal.compiler.ast.Block) $r23;

        $r26.<org.eclipse.jdt.internal.compiler.ast.TryStatement: org.eclipse.jdt.internal.compiler.ast.Block tryBlock> = $r24;

        $i21 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        $r26.<org.eclipse.jdt.internal.compiler.ast.TryStatement: int sourceEnd> = $i21;

        $r25 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i22 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i23 = $i22 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i23;

        $i24 = $r25[$i22];

        $r26.<org.eclipse.jdt.internal.compiler.ast.TryStatement: int sourceStart> = $i24;

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnAstStack(org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r26);

        return;
    }

    protected void consumeStatementWhile()
    {
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r6;
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r2;
        org.eclipse.jdt.internal.compiler.ast.Statement r3;
        org.eclipse.jdt.internal.compiler.ast.Expression $r7;
        int[] $r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r1, $r5;
        org.eclipse.jdt.internal.compiler.ast.WhileStatement $r4;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr> = $i1;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $r2 = $r1[$i2];

        r3 = (org.eclipse.jdt.internal.compiler.ast.Statement) $r2;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $r4 = new org.eclipse.jdt.internal.compiler.ast.WhileStatement;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i4 = $i3 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr> = $i4;

        $r7 = $r6[$i3];

        $r8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i7 = $i6 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i7;

        $i9 = $r8[$i6];

        $i8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        specialinvoke $r4.<org.eclipse.jdt.internal.compiler.ast.WhileStatement: void <init>(org.eclipse.jdt.internal.compiler.ast.Expression,org.eclipse.jdt.internal.compiler.ast.Statement,int,int)>($r7, r3, $i9, $i8);

        $r5[$i5] = $r4;

        return;
    }

    protected void consumeStaticImportOnDemandDeclarationName()
    {
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r12;
        char[][] r2, $r4;
        byte $b18;
        int[] $r1, $r7;
        boolean $z0;
        org.eclipse.jdt.internal.compiler.impl.CompilerOptions $r10;
        long $l17;
        long[] r3, $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i19, $i20, $i21, $i22, $i24, $i25, $i27;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ImportReference $r15;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r11, $r13;
        org.eclipse.jdt.internal.compiler.parser.RecoveredElement $r8, $r9, $r14;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] identifierLengthStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr> = $i1;

        $i2 = $r1[$i0];

        r2 = newarray (char[])[$i2];

        $i3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i4 = $i3 - $i2;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr> = $i4;

        r3 = newarray (long)[$i2];

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: char[][] identifierStack>;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i6 = $i5 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, $i6, r2, 0, $i2);

        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: long[] identifierPositionStack>;

        $i7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i8 = $i7 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, $i8, r3, 0, $i2);

        $r15 = new org.eclipse.jdt.internal.compiler.ast.ImportReference;

        specialinvoke $r15.<org.eclipse.jdt.internal.compiler.ast.ImportReference: void <init>(char[][],long[],boolean,int)>(r2, r3, 1, 8);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnAstStack(org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r15);

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int modifiers> = 0;

        $i24 = (int) -1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int modifiersSourceStart> = $i24;

        $i9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int currentToken>;

        if $i9 != 27 goto label1;

        $r13 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i21 = $r13.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        $i22 = $i21 - 1;

        $r15.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationSourceEnd> = $i22;

        goto label2;

     label1:
        $i10 = $r15.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int sourceEnd>;

        $r15.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationSourceEnd> = $i10;

     label2:
        $i11 = $r15.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationSourceEnd>;

        $r15.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationEnd> = $i11;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i12 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i13 = $i12 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i13;

        $i14 = $r7[$i12];

        $r15.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationSourceStart> = $i14;

        $z0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean statementRecoveryActivated>;

        if $z0 != 0 goto label3;

        $r10 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.CompilerOptions options>;

        $l17 = $r10.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long sourceLevel>;

        $b18 = $l17 cmp 3211264L;

        $i25 = (int) $b18;

        if $i25 >= 0 goto label3;

        $i20 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastErrorEndPositionBeforeRecovery>;

        $r11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i19 = $r11.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        if $i20 >= $i19 goto label3;

        $r15.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int modifiers> = 0;

        $r12 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        virtualinvoke $r12.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void invalidUsageOfStaticImports(org.eclipse.jdt.internal.compiler.ast.ImportReference)>($r15);

     label3:
        $r14 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r14 == null goto label4;

        $i15 = $r15.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationSourceEnd>;

        $i16 = $i15 + 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastCheckPoint> = $i16;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $r9 = virtualinvoke $r8.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.ImportReference,int)>($r15, 0);

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement> = $r9;

        $i27 = (int) -1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastIgnoredToken> = $i27;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean restartRecovery> = 1;

     label4:
        return;
    }

    protected void consumeStaticInitializer()
    {
        org.eclipse.jdt.internal.compiler.ast.Block r3;
        org.eclipse.jdt.internal.compiler.ast.Javadoc $r9;
        int[] $r6, $r7, $r8;
        boolean $z0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i19, $i21;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r1, $r5;
        org.eclipse.jdt.internal.compiler.parser.RecoveredElement $r10, $r11, $r12;
        org.eclipse.jdt.internal.compiler.ast.Initializer $r13;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $r2 = $r1[$i0];

        r3 = (org.eclipse.jdt.internal.compiler.ast.Block) $r2;

        $z0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean diet>;

        if $z0 == 0 goto label1;

        $i16 = r3.<org.eclipse.jdt.internal.compiler.ast.Block: int bits>;

        $i19 = (int) -9;

        $i17 = $i16 & $i19;

        r3.<org.eclipse.jdt.internal.compiler.ast.Block: int bits> = $i17;

     label1:
        $r13 = new org.eclipse.jdt.internal.compiler.ast.Initializer;

        specialinvoke $r13.<org.eclipse.jdt.internal.compiler.ast.Initializer: void <init>(org.eclipse.jdt.internal.compiler.ast.Block,int)>(r3, 8);

        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $r5[$i1] = $r13;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        $r13.<org.eclipse.jdt.internal.compiler.ast.Initializer: int sourceEnd> = $i2;

        $i3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        $i4 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int flushCommentsDefinedPriorTo(int)>($i3);

        $r13.<org.eclipse.jdt.internal.compiler.ast.Initializer: int declarationSourceEnd> = $i4;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] nestedMethod>;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int nestedType>;

        $i6 = $r6[$i5];

        $i7 = $i6 - 1;

        $r6[$i5] = $i7;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i9 = $i8 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i9;

        $i10 = $r7[$i8];

        $r13.<org.eclipse.jdt.internal.compiler.ast.Initializer: int declarationSourceStart> = $i10;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i12 = $i11 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i12;

        $i13 = $r8[$i11];

        $r13.<org.eclipse.jdt.internal.compiler.ast.Initializer: int bodyStart> = $i13;

        $i14 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endPosition>;

        $r13.<org.eclipse.jdt.internal.compiler.ast.Initializer: int bodyEnd> = $i14;

        $r9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc>;

        $r13.<org.eclipse.jdt.internal.compiler.ast.Initializer: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc> = $r9;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc> = null;

        $r10 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r10 == null goto label2;

        $i15 = $r13.<org.eclipse.jdt.internal.compiler.ast.Initializer: int declarationSourceEnd>;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastCheckPoint> = $i15;

        $r11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $r12 = virtualinvoke $r11.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration,int)>($r13, 0);

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement> = $r12;

        $i21 = (int) -1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastIgnoredToken> = $i21;

     label2:
        return;
    }

    protected void consumeStaticOnly()
    {
        int[] $r3, $r5;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r1, $r2;
        org.eclipse.jdt.internal.compiler.parser.RecoveredElement $r4;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int modifiersSourceStart>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void checkComment()>();

        $i1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int modifiersSourceStart>;

        if $i1 < i0 goto label1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int modifiersSourceStart> = i0;

     label1:
        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i2 = $r1.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnIntStack(int)>($i2);

        $i3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int modifiersSourceStart>;

        if $i3 < 0 goto label2;

        $i11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int modifiersSourceStart>;

        goto label3;

     label2:
        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i11 = $r2.<org.eclipse.jdt.internal.compiler.parser.Scanner: int startPosition>;

     label3:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnIntStack(int)>($i11);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void jumpOverMethodBody()>();

        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] nestedMethod>;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int nestedType>;

        $i5 = $r3[$i4];

        $i6 = $i5 + 1;

        $r3[$i4] = $i6;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void resetModifiers()>();

        $i7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        $i8 = $i7 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr> = $i8;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r4 == null goto label4;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i10 = $r5[$i9];

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int recoveredStaticInitializerStart> = $i10;

     label4:
        return;
    }

    protected void consumeSwitchBlock()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void concatNodeLists()>();

        return;
    }

    protected void consumeSwitchBlockStatement()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void concatNodeLists()>();

        return;
    }

    protected void consumeSwitchBlockStatements()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void concatNodeLists()>();

        return;
    }

    protected void consumeSwitchLabels()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void optimizedConcatNodeLists()>();

        return;
    }

    protected void consumeToken(int)
    {
        org.eclipse.jdt.internal.compiler.ast.FalseLiteral $r116;
        org.eclipse.jdt.internal.compiler.ast.IntLiteral $r111;
        org.eclipse.jdt.internal.compiler.ast.LongLiteral $r112;
        long $l100, $l106, l116, l117;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.NullLiteral $r118;
        org.eclipse.jdt.internal.compiler.parser.RecoveredAnnotation r14;
        int[] $r30;
        org.eclipse.jdt.internal.compiler.ast.DoubleLiteral $r114;
        long[] $r95, $r98;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i101, $i102, $i103, $i104, $i105, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i118, $i119, $i120, $i122, $i124, $i126, $i128, $i130, $i132, $i134, $i136, $i138, $i140;
        org.eclipse.jdt.internal.compiler.ast.CharLiteral $r115;
        org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration $r33;
        org.eclipse.jdt.internal.compiler.ast.StringLiteral $r31, r106;
        org.eclipse.jdt.internal.compiler.ast.TrueLiteral $r117;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r25, $r26, $r27, $r28, $r29, $r35, $r37, $r38, $r40, $r42, $r43, $r45, $r47, $r48, $r50, $r52, $r53, $r55, $r57, $r58, $r60, $r61, $r63, $r64, $r66, $r67, $r68, $r69, $r70, $r71, $r72, $r73, $r74, $r75, $r76, $r77, $r78, $r79, $r80, $r81, $r82, $r83, $r84, $r85, $r86, $r87, $r88, $r89, $r90, $r91, $r92, $r93, $r94, $r97, $r100, $r101, $r102, $r103, $r104, $r105, $r107, $r109, $r110;
        org.eclipse.jdt.internal.compiler.ast.FloatLiteral $r113;
        char[] $r24, $r36, $r41, $r46, $r51, $r56, $r108;
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r96, $r99;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        org.eclipse.jdt.internal.compiler.parser.RecoveredElement $r11, $r12, $r13, $r32;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 1: goto label45;
            case 2: goto label45;
            case 3: goto label55;
            case 4: goto label55;
            case 5: goto label55;
            case 6: goto label55;
            case 7: goto label52;
            case 8: goto label46;
            case 9: goto label46;
            case 10: goto label55;
            case 11: goto label55;
            case 12: goto label55;
            case 13: goto label55;
            case 14: goto label55;
            case 15: goto label55;
            case 16: goto label55;
            case 17: goto label55;
            case 18: goto label55;
            case 19: goto label55;
            case 20: goto label55;
            case 21: goto label55;
            case 22: goto label55;
            case 23: goto label51;
            case 24: goto label55;
            case 25: goto label55;
            case 26: goto label01;
            case 27: goto label47;
            case 28: goto label49;
            case 29: goto label48;
            case 30: goto label55;
            case 31: goto label47;
            case 32: goto label16;
            case 33: goto label17;
            case 34: goto label18;
            case 35: goto label19;
            case 36: goto label20;
            case 37: goto label21;
            case 38: goto label22;
            case 39: goto label23;
            case 40: goto label15;
            case 41: goto label37;
            case 42: goto label37;
            case 43: goto label39;
            case 44: goto label34;
            case 45: goto label36;
            case 46: goto label35;
            case 47: goto label24;
            case 48: goto label25;
            case 49: goto label26;
            case 50: goto label27;
            case 51: goto label28;
            case 52: goto label29;
            case 53: goto label50;
            case 54: goto label13;
            case 55: goto label14;
            case 56: goto label04;
            case 57: goto label06;
            case 58: goto label07;
            case 59: goto label08;
            case 60: goto label09;
            case 61: goto label10;
            case 62: goto label05;
            case 63: goto label11;
            case 64: goto label12;
            case 65: goto label55;
            case 66: goto label45;
            case 67: goto label45;
            case 68: goto label55;
            case 69: goto label44;
            case 70: goto label43;
            case 71: goto label54;
            case 72: goto label40;
            case 73: goto label38;
            case 74: goto label38;
            case 75: goto label38;
            case 76: goto label38;
            case 77: goto label38;
            case 78: goto label38;
            case 79: goto label38;
            case 80: goto label38;
            case 81: goto label38;
            case 82: goto label38;
            case 83: goto label38;
            case 84: goto label55;
            case 85: goto label55;
            case 86: goto label55;
            case 87: goto label55;
            case 88: goto label55;
            case 89: goto label55;
            case 90: goto label55;
            case 91: goto label55;
            case 92: goto label55;
            case 93: goto label55;
            case 94: goto label55;
            case 95: goto label03;
            case 96: goto label38;
            case 97: goto label42;
            case 98: goto label41;
            case 99: goto label55;
            case 100: goto label38;
            case 101: goto label38;
            case 102: goto label55;
            case 103: goto label55;
            case 104: goto label55;
            case 105: goto label55;
            case 106: goto label55;
            case 107: goto label53;
            default: goto label55;
        };

     label01:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushIdentifier()>();

        $r93 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $z4 = $r93.<org.eclipse.jdt.internal.compiler.parser.Scanner: boolean useAssertAsAnIndentifier>;

        if $z4 == 0 goto label02;

        $i104 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastErrorEndPositionBeforeRecovery>;

        $r97 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i103 = $r97.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        if $i104 >= $i103 goto label02;

        $r98 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: long[] identifierPositionStack>;

        $i105 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        l116 = $r98[$i105];

        $z6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean statementRecoveryActivated>;

        if $z6 != 0 goto label02;

        $r99 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        $l106 = l116 >>> 32;

        $i108 = (int) $l106;

        $i107 = (int) l116;

        virtualinvoke $r99.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void useAssertAsAnIdentifier(int,int)>($i108, $i107);

     label02:
        $r105 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $z7 = $r105.<org.eclipse.jdt.internal.compiler.parser.Scanner: boolean useEnumAsAnIndentifier>;

        if $z7 == 0 goto label55;

        $i98 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastErrorEndPositionBeforeRecovery>;

        $r94 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i97 = $r94.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        if $i98 >= $i97 goto label55;

        $r95 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: long[] identifierPositionStack>;

        $i99 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        l117 = $r95[$i99];

        $z5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean statementRecoveryActivated>;

        if $z5 != 0 goto label55;

        $r96 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        $l100 = l117 >>> 32;

        $i102 = (int) $l100;

        $i101 = (int) l117;

        virtualinvoke $r96.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void useEnumAsAnIdentifier(int,int)>($i102, $i101);

        goto label55;

     label03:
        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i9 = $r6.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        $i10 = $i9 - 1;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnIntStack(int)>($i10);

        $r7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i11 = $r7.<org.eclipse.jdt.internal.compiler.parser.Scanner: int startPosition>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnIntStack(int)>($i11);

        goto label55;

     label04:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void checkAndSetModifiers(int)>(1024);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnExpressionStackLengthStack(int)>(0);

        goto label55;

     label05:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void checkAndSetModifiers(int)>(2048);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnExpressionStackLengthStack(int)>(0);

        goto label55;

     label06:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void checkAndSetModifiers(int)>(16);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnExpressionStackLengthStack(int)>(0);

        goto label55;

     label07:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void checkAndSetModifiers(int)>(256);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnExpressionStackLengthStack(int)>(0);

        goto label55;

     label08:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void checkAndSetModifiers(int)>(2);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnExpressionStackLengthStack(int)>(0);

        goto label55;

     label09:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void checkAndSetModifiers(int)>(4);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnExpressionStackLengthStack(int)>(0);

        goto label55;

     label10:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void checkAndSetModifiers(int)>(1);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnExpressionStackLengthStack(int)>(0);

        goto label55;

     label11:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void checkAndSetModifiers(int)>(128);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnExpressionStackLengthStack(int)>(0);

        goto label55;

     label12:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void checkAndSetModifiers(int)>(64);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnExpressionStackLengthStack(int)>(0);

        goto label55;

     label13:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void checkAndSetModifiers(int)>(8);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnExpressionStackLengthStack(int)>(0);

        goto label55;

     label14:
        $r20 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i25 = $r20.<org.eclipse.jdt.internal.compiler.parser.Scanner: int startPosition>;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int synchronizedBlockSourceStart> = $i25;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void checkAndSetModifiers(int)>(32);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnExpressionStackLengthStack(int)>(0);

        goto label55;

     label15:
        $i122 = (int) -6;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushIdentifier(int)>($i122);

        $r71 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i63 = $r71.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        $i64 = $i63 - 1;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnIntStack(int)>($i64);

        $r72 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i65 = $r72.<org.eclipse.jdt.internal.compiler.parser.Scanner: int startPosition>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnIntStack(int)>($i65);

        goto label55;

     label16:
        $i124 = (int) -5;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushIdentifier(int)>($i124);

        $r87 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i87 = $r87.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        $i88 = $i87 - 1;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnIntStack(int)>($i88);

        $r88 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i89 = $r88.<org.eclipse.jdt.internal.compiler.parser.Scanner: int startPosition>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnIntStack(int)>($i89);

        goto label55;

     label17:
        $i126 = (int) -3;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushIdentifier(int)>($i126);

        $r85 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i84 = $r85.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        $i85 = $i84 - 1;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnIntStack(int)>($i85);

        $r86 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i86 = $r86.<org.eclipse.jdt.internal.compiler.parser.Scanner: int startPosition>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnIntStack(int)>($i86);

        goto label55;

     label18:
        $i128 = (int) -2;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushIdentifier(int)>($i128);

        $r83 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i81 = $r83.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        $i82 = $i81 - 1;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnIntStack(int)>($i82);

        $r84 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i83 = $r84.<org.eclipse.jdt.internal.compiler.parser.Scanner: int startPosition>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnIntStack(int)>($i83);

        goto label55;

     label19:
        $i130 = (int) -8;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushIdentifier(int)>($i130);

        $r81 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i78 = $r81.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        $i79 = $i78 - 1;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnIntStack(int)>($i79);

        $r82 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i80 = $r82.<org.eclipse.jdt.internal.compiler.parser.Scanner: int startPosition>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnIntStack(int)>($i80);

        goto label55;

     label20:
        $i132 = (int) -9;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushIdentifier(int)>($i132);

        $r79 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i75 = $r79.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        $i76 = $i75 - 1;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnIntStack(int)>($i76);

        $r80 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i77 = $r80.<org.eclipse.jdt.internal.compiler.parser.Scanner: int startPosition>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnIntStack(int)>($i77);

        goto label55;

     label21:
        $i134 = (int) -10;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushIdentifier(int)>($i134);

        $r77 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i72 = $r77.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        $i73 = $i72 - 1;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnIntStack(int)>($i73);

        $r78 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i74 = $r78.<org.eclipse.jdt.internal.compiler.parser.Scanner: int startPosition>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnIntStack(int)>($i74);

        goto label55;

     label22:
        $i136 = (int) -7;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushIdentifier(int)>($i136);

        $r75 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i69 = $r75.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        $i70 = $i69 - 1;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnIntStack(int)>($i70);

        $r76 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i71 = $r76.<org.eclipse.jdt.internal.compiler.parser.Scanner: int startPosition>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnIntStack(int)>($i71);

        goto label55;

     label23:
        $i138 = (int) -4;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushIdentifier(int)>($i138);

        $r73 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i66 = $r73.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        $i67 = $i66 - 1;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnIntStack(int)>($i67);

        $r74 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i68 = $r74.<org.eclipse.jdt.internal.compiler.parser.Scanner: int startPosition>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnIntStack(int)>($i68);

        goto label55;

     label24:
        $r111 = new org.eclipse.jdt.internal.compiler.ast.IntLiteral;

        $r55 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r56 = virtualinvoke $r55.<org.eclipse.jdt.internal.compiler.parser.Scanner: char[] getCurrentTokenSource()>();

        $r57 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i49 = $r57.<org.eclipse.jdt.internal.compiler.parser.Scanner: int startPosition>;

        $r58 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i47 = $r58.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        $i48 = $i47 - 1;

        specialinvoke $r111.<org.eclipse.jdt.internal.compiler.ast.IntLiteral: void <init>(char[],int,int)>($r56, $i49, $i48);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnExpressionStack(org.eclipse.jdt.internal.compiler.ast.Expression)>($r111);

        goto label55;

     label25:
        $r112 = new org.eclipse.jdt.internal.compiler.ast.LongLiteral;

        $r50 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r51 = virtualinvoke $r50.<org.eclipse.jdt.internal.compiler.parser.Scanner: char[] getCurrentTokenSource()>();

        $r52 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i46 = $r52.<org.eclipse.jdt.internal.compiler.parser.Scanner: int startPosition>;

        $r53 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i44 = $r53.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        $i45 = $i44 - 1;

        specialinvoke $r112.<org.eclipse.jdt.internal.compiler.ast.LongLiteral: void <init>(char[],int,int)>($r51, $i46, $i45);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnExpressionStack(org.eclipse.jdt.internal.compiler.ast.Expression)>($r112);

        goto label55;

     label26:
        $r113 = new org.eclipse.jdt.internal.compiler.ast.FloatLiteral;

        $r45 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r46 = virtualinvoke $r45.<org.eclipse.jdt.internal.compiler.parser.Scanner: char[] getCurrentTokenSource()>();

        $r47 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i43 = $r47.<org.eclipse.jdt.internal.compiler.parser.Scanner: int startPosition>;

        $r48 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i41 = $r48.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        $i42 = $i41 - 1;

        specialinvoke $r113.<org.eclipse.jdt.internal.compiler.ast.FloatLiteral: void <init>(char[],int,int)>($r46, $i43, $i42);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnExpressionStack(org.eclipse.jdt.internal.compiler.ast.Expression)>($r113);

        goto label55;

     label27:
        $r114 = new org.eclipse.jdt.internal.compiler.ast.DoubleLiteral;

        $r40 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r41 = virtualinvoke $r40.<org.eclipse.jdt.internal.compiler.parser.Scanner: char[] getCurrentTokenSource()>();

        $r42 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i40 = $r42.<org.eclipse.jdt.internal.compiler.parser.Scanner: int startPosition>;

        $r43 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i38 = $r43.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        $i39 = $i38 - 1;

        specialinvoke $r114.<org.eclipse.jdt.internal.compiler.ast.DoubleLiteral: void <init>(char[],int,int)>($r41, $i40, $i39);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnExpressionStack(org.eclipse.jdt.internal.compiler.ast.Expression)>($r114);

        goto label55;

     label28:
        $r115 = new org.eclipse.jdt.internal.compiler.ast.CharLiteral;

        $r35 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r36 = virtualinvoke $r35.<org.eclipse.jdt.internal.compiler.parser.Scanner: char[] getCurrentTokenSource()>();

        $r37 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i37 = $r37.<org.eclipse.jdt.internal.compiler.parser.Scanner: int startPosition>;

        $r38 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i35 = $r38.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        $i36 = $i35 - 1;

        specialinvoke $r115.<org.eclipse.jdt.internal.compiler.ast.CharLiteral: void <init>(char[],int,int)>($r36, $i37, $i36);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnExpressionStack(org.eclipse.jdt.internal.compiler.ast.Expression)>($r115);

        goto label55;

     label29:
        $z1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean recordStringLiterals>;

        if $z1 == 0 goto label32;

        $z2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean checkExternalizeStrings>;

        if $z2 == 0 goto label32;

        $i28 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastPosistion>;

        $r22 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i27 = $r22.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        if $i28 >= $i27 goto label32;

        $z3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean statementRecoveryActivated>;

        if $z3 != 0 goto label32;

        $r23 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r24 = virtualinvoke $r23.<org.eclipse.jdt.internal.compiler.parser.Scanner: char[] getCurrentTokenSourceString()>();

        $r25 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i32 = $r25.<org.eclipse.jdt.internal.compiler.parser.Scanner: int startPosition>;

        $r26 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i29 = $r26.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        $i33 = $i29 - 1;

        $r27 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i31 = $r27.<org.eclipse.jdt.internal.compiler.parser.Scanner: int startPosition>;

        $r28 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r30 = $r28.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] lineEnds>;

        $r29 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i30 = $r29.<org.eclipse.jdt.internal.compiler.parser.Scanner: int linePtr>;

        $i34 = staticinvoke <org.eclipse.jdt.internal.compiler.util.Util: int getLineNumber(int,int[],int,int)>($i31, $r30, 0, $i30);

        $r31 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.StringLiteral createStringLiteral(char[],int,int,int)>($r24, $i32, $i33, $i34);

        r106 = $r31;

        $r33 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit>;

        $r32 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r32 == null goto label30;

        $z8 = 1;

        goto label31;

     label30:
        $z8 = 0;

     label31:
        virtualinvoke $r33.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: void recordStringLiteral(org.eclipse.jdt.internal.compiler.ast.StringLiteral,boolean)>($r31, $z8);

        goto label33;

     label32:
        $r107 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r108 = virtualinvoke $r107.<org.eclipse.jdt.internal.compiler.parser.Scanner: char[] getCurrentTokenSourceString()>();

        $r109 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i118 = $r109.<org.eclipse.jdt.internal.compiler.parser.Scanner: int startPosition>;

        $r110 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i119 = $r110.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        $i120 = $i119 - 1;

        r106 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.StringLiteral createStringLiteral(char[],int,int,int)>($r108, $i118, $i120, 0);

     label33:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnExpressionStack(org.eclipse.jdt.internal.compiler.ast.Expression)>(r106);

        goto label55;

     label34:
        $r116 = new org.eclipse.jdt.internal.compiler.ast.FalseLiteral;

        $r66 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i58 = $r66.<org.eclipse.jdt.internal.compiler.parser.Scanner: int startPosition>;

        $r67 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i56 = $r67.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        $i57 = $i56 - 1;

        specialinvoke $r116.<org.eclipse.jdt.internal.compiler.ast.FalseLiteral: void <init>(int,int)>($i58, $i57);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnExpressionStack(org.eclipse.jdt.internal.compiler.ast.Expression)>($r116);

        goto label55;

     label35:
        $r117 = new org.eclipse.jdt.internal.compiler.ast.TrueLiteral;

        $r60 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i52 = $r60.<org.eclipse.jdt.internal.compiler.parser.Scanner: int startPosition>;

        $r61 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i50 = $r61.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        $i51 = $i50 - 1;

        specialinvoke $r117.<org.eclipse.jdt.internal.compiler.ast.TrueLiteral: void <init>(int,int)>($i52, $i51);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnExpressionStack(org.eclipse.jdt.internal.compiler.ast.Expression)>($r117);

        goto label55;

     label36:
        $r118 = new org.eclipse.jdt.internal.compiler.ast.NullLiteral;

        $r63 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i55 = $r63.<org.eclipse.jdt.internal.compiler.parser.Scanner: int startPosition>;

        $r64 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i53 = $r64.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        $i54 = $i53 - 1;

        specialinvoke $r118.<org.eclipse.jdt.internal.compiler.ast.NullLiteral: void <init>(int,int)>($i55, $i54);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnExpressionStack(org.eclipse.jdt.internal.compiler.ast.Expression)>($r118);

        goto label55;

     label37:
        $r69 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i60 = $r69.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        $i61 = $i60 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endPosition> = $i61;

        $r70 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i62 = $r70.<org.eclipse.jdt.internal.compiler.parser.Scanner: int startPosition>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnIntStack(int)>($i62);

        goto label55;

     label38:
        $r8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i12 = $r8.<org.eclipse.jdt.internal.compiler.parser.Scanner: int startPosition>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnIntStack(int)>($i12);

        goto label55;

     label39:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void resetModifiers()>();

        $r68 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i59 = $r68.<org.eclipse.jdt.internal.compiler.parser.Scanner: int startPosition>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnIntStack(int)>($i59);

        goto label55;

     label40:
        $r9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i13 = $r9.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        $i14 = $i13 - 1;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnIntStack(int)>($i14);

        $r10 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i15 = $r10.<org.eclipse.jdt.internal.compiler.parser.Scanner: int startPosition>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnIntStack(int)>($i15);

        goto label55;

     label41:
        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i3 = $r2.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        $i4 = $i3 - 1;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnIntStack(int)>($i4);

        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i5 = $r3.<org.eclipse.jdt.internal.compiler.parser.Scanner: int startPosition>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnIntStack(int)>($i5);

        goto label55;

     label42:
        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i6 = $r4.<org.eclipse.jdt.internal.compiler.parser.Scanner: int startPosition>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnIntStack(int)>($i6);

        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i7 = $r5.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        $i8 = $i7 - 1;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnIntStack(int)>($i8);

        goto label55;

     label43:
        $r16 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i19 = $r16.<org.eclipse.jdt.internal.compiler.parser.Scanner: int startPosition>;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endPosition> = $i19;

        $r17 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i20 = $r17.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        $i21 = $i20 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition> = $i21;

        goto label55;

     label44:
        $r18 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i22 = $r18.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        $i23 = $i22 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition> = $i23;

     label45:
        $r19 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i24 = $r19.<org.eclipse.jdt.internal.compiler.parser.Scanner: int startPosition>;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endPosition> = $i24;

        goto label55;

     label46:
        $r102 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i112 = $r102.<org.eclipse.jdt.internal.compiler.parser.Scanner: int startPosition>;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endPosition> = $i112;

        $r103 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i113 = $r103.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        $i114 = $i113 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition> = $i114;

        goto label55;

     label47:
        $r91 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i93 = $r91.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        $i94 = $i93 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition> = $i94;

        $r92 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i95 = $r92.<org.eclipse.jdt.internal.compiler.parser.Scanner: int startPosition>;

        $i96 = $i95 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endPosition> = $i96;

        goto label55;

     label48:
        $r89 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i90 = $r89.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        $i91 = $i90 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int rParenPos> = $i91;

        goto label55;

     label49:
        $r90 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i92 = $r90.<org.eclipse.jdt.internal.compiler.parser.Scanner: int startPosition>;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lParenPos> = $i92;

        goto label55;

     label50:
        $r21 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i26 = $r21.<org.eclipse.jdt.internal.compiler.parser.Scanner: int startPosition>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnIntStack(int)>($i26);

        goto label55;

     label51:
        $r100 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i109 = $r100.<org.eclipse.jdt.internal.compiler.parser.Scanner: int startPosition>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnIntStack(int)>($i109);

        $r101 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i110 = $r101.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        $i111 = $i110 - 1;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnIntStack(int)>($i111);

        goto label55;

     label52:
        $r104 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i115 = $r104.<org.eclipse.jdt.internal.compiler.parser.Scanner: int startPosition>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnIntStack(int)>($i115);

        goto label55;

     label53:
        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i1 = $r1.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        $i2 = $i1 - 1;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnIntStack(int)>($i2);

        goto label55;

     label54:
        $r11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r11 == null goto label55;

        $r12 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $z0 = $r12 instanceof org.eclipse.jdt.internal.compiler.parser.RecoveredAnnotation;

        if $z0 == 0 goto label55;

        $r13 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        r14 = (org.eclipse.jdt.internal.compiler.parser.RecoveredAnnotation) $r13;

        $i16 = r14.<org.eclipse.jdt.internal.compiler.parser.RecoveredAnnotation: int memberValuPairEqualEnd>;

        $i140 = (int) -1;

        if $i16 != $i140 goto label55;

        $r15 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i17 = $r15.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        $i18 = $i17 - 1;

        r14.<org.eclipse.jdt.internal.compiler.parser.RecoveredAnnotation: int memberValuPairEqualEnd> = $i18;

     label55:
        return;
    }

    protected void consumeTypeArgument()
    {
        int[] $r1;
        int $i0, $i1, $i2;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r2;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i1;

        $i2 = $r1[$i0];

        $r2 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeReference getTypeReference(int)>($i2);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnGenericsStack(org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r2);

        return;
    }

    protected void consumeTypeArgumentList()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void concatGenericsLists()>();

        return;
    }

    protected void consumeTypeArgumentList1()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void concatGenericsLists()>();

        return;
    }

    protected void consumeTypeArgumentList2()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void concatGenericsLists()>();

        return;
    }

    protected void consumeTypeArgumentList3()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void concatGenericsLists()>();

        return;
    }

    protected void consumeTypeArgumentReferenceType1()
    {
        int $i0, $i1;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void concatGenericsLists()>();

        $r1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeReference getTypeReference(int)>(0);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnGenericsStack(org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r1);

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i1;

        return;
    }

    protected void consumeTypeArgumentReferenceType2()
    {
        int $i0, $i1;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void concatGenericsLists()>();

        $r1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeReference getTypeReference(int)>(0);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnGenericsStack(org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r1);

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i1;

        return;
    }

    protected void consumeTypeArguments()
    {
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r4;
        long $l2;
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r6, $r8;
        byte $b3;
        int[] $r3;
        int $i0, $i1, $i4, $i5, $i6, i7, $i8, $i9, $i10, $i11, $i12;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r5, $r7;
        boolean $z0;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r2;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r9, $r10;
        org.eclipse.jdt.internal.compiler.impl.CompilerOptions $r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void concatGenericsLists()>();

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i1;

        $z0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean statementRecoveryActivated>;

        if $z0 != 0 goto label1;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.CompilerOptions options>;

        $l2 = $r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long sourceLevel>;

        $b3 = $l2 cmp 3211264L;

        $i12 = (int) $b3;

        if $i12 >= 0 goto label1;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastErrorEndPositionBeforeRecovery>;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i4 = $r2.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        if $i5 >= $i4 goto label1;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] genericsLengthStack>;

        $i6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsLengthPtr>;

        i7 = $r3[$i6];

        $r4 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] genericsStack>;

        $i8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr>;

        $i9 = $i8 - i7;

        $i10 = $i9 + 1;

        $r6 = $r5[$i10];

        $r10 = (org.eclipse.jdt.internal.compiler.ast.TypeReference) $r6;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] genericsStack>;

        $i11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr>;

        $r8 = $r7[$i11];

        $r9 = (org.eclipse.jdt.internal.compiler.ast.TypeReference) $r8;

        virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void invalidUsageOfTypeArguments(org.eclipse.jdt.internal.compiler.ast.TypeReference,org.eclipse.jdt.internal.compiler.ast.TypeReference)>($r10, $r9);

     label1:
        return;
    }

    protected void consumeTypeDeclarations()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void concatNodeLists()>();

        return;
    }

    protected void consumeTypeImportOnDemandDeclarationName()
    {
        char[][] r2, $r4;
        int[] $r1, $r7;
        long[] r3, $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i20;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ImportReference $r12;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r11;
        org.eclipse.jdt.internal.compiler.parser.RecoveredElement $r8, $r9, $r10;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] identifierLengthStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr> = $i1;

        $i2 = $r1[$i0];

        r2 = newarray (char[])[$i2];

        $i3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i4 = $i3 - $i2;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr> = $i4;

        r3 = newarray (long)[$i2];

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: char[][] identifierStack>;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i6 = $i5 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, $i6, r2, 0, $i2);

        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: long[] identifierPositionStack>;

        $i7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i8 = $i7 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, $i8, r3, 0, $i2);

        $r12 = new org.eclipse.jdt.internal.compiler.ast.ImportReference;

        specialinvoke $r12.<org.eclipse.jdt.internal.compiler.ast.ImportReference: void <init>(char[][],long[],boolean,int)>(r2, r3, 1, 0);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnAstStack(org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r12);

        $i9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int currentToken>;

        if $i9 != 27 goto label1;

        $r11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i17 = $r11.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        $i18 = $i17 - 1;

        $r12.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationSourceEnd> = $i18;

        goto label2;

     label1:
        $i10 = $r12.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int sourceEnd>;

        $r12.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationSourceEnd> = $i10;

     label2:
        $i11 = $r12.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationSourceEnd>;

        $r12.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationEnd> = $i11;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i12 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i13 = $i12 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i13;

        $i14 = $r7[$i12];

        $r12.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationSourceStart> = $i14;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r8 == null goto label3;

        $i15 = $r12.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationSourceEnd>;

        $i16 = $i15 + 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastCheckPoint> = $i16;

        $r9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $r10 = virtualinvoke $r9.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.ImportReference,int)>($r12, 0);

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement> = $r10;

        $i20 = (int) -1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastIgnoredToken> = $i20;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean restartRecovery> = 1;

     label3:
        return;
    }

    protected void consumeTypeParameterHeader()
    {
        long l1, $l3;
        char[][] $r3;
        long[] $r2;
        int $i0, i2, i4, $i5, $i6, $i7, $i8, $i9, $i10;
        org.eclipse.jdt.internal.compiler.parser.Parser r1;
        org.eclipse.jdt.internal.compiler.ast.TypeParameter $r0;
        char[] $r4;

        r1 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r0 = new org.eclipse.jdt.internal.compiler.ast.TypeParameter;

        specialinvoke $r0.<org.eclipse.jdt.internal.compiler.ast.TypeParameter: void <init>()>();

        $r2 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: long[] identifierPositionStack>;

        $i0 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        l1 = $r2[$i0];

        i2 = (int) l1;

        $r0.<org.eclipse.jdt.internal.compiler.ast.TypeParameter: int declarationSourceEnd> = i2;

        $r0.<org.eclipse.jdt.internal.compiler.ast.TypeParameter: int sourceEnd> = i2;

        $l3 = l1 >>> 32;

        i4 = (int) $l3;

        $r0.<org.eclipse.jdt.internal.compiler.ast.TypeParameter: int declarationSourceStart> = i4;

        $r0.<org.eclipse.jdt.internal.compiler.ast.TypeParameter: int sourceStart> = i4;

        $r3 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: char[][] identifierStack>;

        $i5 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i6 = $i5 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr> = $i6;

        $r4 = $r3[$i5];

        $r0.<org.eclipse.jdt.internal.compiler.ast.TypeParameter: char[] name> = $r4;

        $i7 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr>;

        $i8 = $i7 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr> = $i8;

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnGenericsStack(org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r0);

        $i9 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int listTypeParameterLength>;

        $i10 = $i9 + 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int listTypeParameterLength> = $i10;

        return;
    }

    protected void consumeTypeParameter1()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        return;
    }

    protected void consumeTypeParameter1WithExtends()
    {
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r2, $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r1, $r4, $r7;
        org.eclipse.jdt.internal.compiler.ast.TypeReference r3;
        org.eclipse.jdt.internal.compiler.ast.TypeParameter r6;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] genericsStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr> = $i1;

        $r2 = $r1[$i0];

        r3 = (org.eclipse.jdt.internal.compiler.ast.TypeReference) $r2;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsLengthPtr>;

        $i3 = $i2 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsLengthPtr> = $i3;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] genericsStack>;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr>;

        $r5 = $r4[$i4];

        r6 = (org.eclipse.jdt.internal.compiler.ast.TypeParameter) $r5;

        $i5 = r3.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int sourceEnd>;

        r6.<org.eclipse.jdt.internal.compiler.ast.TypeParameter: int declarationSourceEnd> = $i5;

        r6.<org.eclipse.jdt.internal.compiler.ast.TypeParameter: org.eclipse.jdt.internal.compiler.ast.TypeReference type> = r3;

        $i6 = r3.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int bits>;

        $i7 = $i6 | 16;

        r3.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int bits> = $i7;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] genericsStack>;

        $i8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr>;

        $r7[$i8] = r6;

        return;
    }

    protected void consumeTypeParameter1WithExtendsAndBounds()
    {
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r7;
        int[] $r1, $r4;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15, $i16, $i17, i18;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r3, $r6;
        org.eclipse.jdt.internal.compiler.ast.TypeReference[] r2;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r5, $r9, $r10;
        org.eclipse.jdt.internal.compiler.ast.TypeParameter r8;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] genericsLengthStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsLengthPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsLengthPtr> = $i1;

        i2 = $r1[$i0];

        r2 = newarray (org.eclipse.jdt.internal.compiler.ast.TypeReference)[i2];

        $i3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr>;

        $i4 = $i3 - i2;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr> = $i4;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] genericsStack>;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr>;

        $i6 = $i5 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, $i6, r2, 0, i2);

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i8 = $i7 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i8;

        $i9 = $r4[$i7];

        $r5 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeReference getTypeReference(int)>($i9);

        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] genericsStack>;

        $i10 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr>;

        $r7 = $r6[$i10];

        r8 = (org.eclipse.jdt.internal.compiler.ast.TypeParameter) $r7;

        $i11 = i2 - 1;

        $r9 = r2[$i11];

        $i12 = $r9.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int sourceEnd>;

        r8.<org.eclipse.jdt.internal.compiler.ast.TypeParameter: int declarationSourceEnd> = $i12;

        r8.<org.eclipse.jdt.internal.compiler.ast.TypeParameter: org.eclipse.jdt.internal.compiler.ast.TypeReference type> = $r5;

        $i13 = $r5.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int bits>;

        $i14 = $i13 | 16;

        $r5.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int bits> = $i14;

        r8.<org.eclipse.jdt.internal.compiler.ast.TypeParameter: org.eclipse.jdt.internal.compiler.ast.TypeReference[] bounds> = r2;

        i18 = 0;

        i15 = lengthof r2;

        goto label2;

     label1:
        $r10 = r2[i18];

        $i16 = $r10.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int bits>;

        $i17 = $i16 | 16;

        $r10.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int bits> = $i17;

        i18 = i18 + 1;

     label2:
        if i18 < i15 goto label1;

        return;
    }

    protected void consumeTypeParameterList()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void concatGenericsLists()>();

        return;
    }

    protected void consumeTypeParameterList1()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void concatGenericsLists()>();

        return;
    }

    protected void consumeTypeParameters()
    {
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r6;
        byte $b4;
        int[] $r1, $r5, $r15;
        org.eclipse.jdt.internal.compiler.parser.RecoveredType r18;
        boolean $z0, $z1;
        org.eclipse.jdt.internal.compiler.ast.TypeParameter $r11, $r12;
        org.eclipse.jdt.internal.compiler.impl.CompilerOptions $r3;
        long $l3;
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r8, $r10;
        int $i0, $i1, i2, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, $i14, $i15, $i16, i17, $i18;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r7, $r9, $r17;
        org.eclipse.jdt.internal.compiler.ast.TypeParameter[] r16;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r4;
        org.eclipse.jdt.internal.compiler.parser.RecoveredElement $r2, $r13, $r14;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i1;

        i2 = $r1[$i0];

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r2 == null goto label1;

        $r13 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $z0 = $r13 instanceof org.eclipse.jdt.internal.compiler.parser.RecoveredType;

        if $z0 == 0 goto label1;

        $r14 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        r18 = (org.eclipse.jdt.internal.compiler.parser.RecoveredType) $r14;

        $r15 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] genericsLengthStack>;

        $i12 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsLengthPtr>;

        i13 = $r15[$i12];

        r16 = newarray (org.eclipse.jdt.internal.compiler.ast.TypeParameter)[i13];

        $r17 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] genericsStack>;

        $i14 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr>;

        $i15 = $i14 - i13;

        $i16 = $i15 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r17, $i16, r16, 0, i13);

        virtualinvoke r18.<org.eclipse.jdt.internal.compiler.parser.RecoveredType: void add(org.eclipse.jdt.internal.compiler.ast.TypeParameter[],int)>(r16, i2);

     label1:
        $z1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean statementRecoveryActivated>;

        if $z1 != 0 goto label2;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.CompilerOptions options>;

        $l3 = $r3.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long sourceLevel>;

        $b4 = $l3 cmp 3211264L;

        $i18 = (int) $b4;

        if $i18 >= 0 goto label2;

        $i6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastErrorEndPositionBeforeRecovery>;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i5 = $r4.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        if $i6 >= $i5 goto label2;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] genericsLengthStack>;

        $i7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsLengthPtr>;

        i17 = $r5[$i7];

        $r6 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        $r7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] genericsStack>;

        $i8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr>;

        $i9 = $i8 - i17;

        $i10 = $i9 + 1;

        $r8 = $r7[$i10];

        $r12 = (org.eclipse.jdt.internal.compiler.ast.TypeParameter) $r8;

        $r9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] genericsStack>;

        $i11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr>;

        $r10 = $r9[$i11];

        $r11 = (org.eclipse.jdt.internal.compiler.ast.TypeParameter) $r10;

        virtualinvoke $r6.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void invalidUsageOfTypeParameters(org.eclipse.jdt.internal.compiler.ast.TypeParameter,org.eclipse.jdt.internal.compiler.ast.TypeParameter)>($r12, $r11);

     label2:
        return;
    }

    protected void consumeTypeParameterWithExtends()
    {
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r4;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r2;
        org.eclipse.jdt.internal.compiler.ast.TypeParameter r5;
        int[] $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r3;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i1;

        $i2 = $r1[$i0];

        $r2 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeReference getTypeReference(int)>($i2);

        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] genericsStack>;

        $i3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr>;

        $r4 = $r3[$i3];

        r5 = (org.eclipse.jdt.internal.compiler.ast.TypeParameter) $r4;

        $i4 = $r2.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int sourceEnd>;

        r5.<org.eclipse.jdt.internal.compiler.ast.TypeParameter: int declarationSourceEnd> = $i4;

        r5.<org.eclipse.jdt.internal.compiler.ast.TypeParameter: org.eclipse.jdt.internal.compiler.ast.TypeReference type> = $r2;

        $i5 = $r2.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int bits>;

        $i6 = $i5 | 16;

        $r2.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int bits> = $i6;

        return;
    }

    protected void consumeTypeParameterWithExtendsAndBounds()
    {
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r7;
        int[] $r1, $r4;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15, $i16, $i17, i18;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r3, $r6;
        org.eclipse.jdt.internal.compiler.ast.TypeReference[] r2;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r5, $r9, $r10;
        org.eclipse.jdt.internal.compiler.ast.TypeParameter r8;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] genericsLengthStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsLengthPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsLengthPtr> = $i1;

        i2 = $r1[$i0];

        r2 = newarray (org.eclipse.jdt.internal.compiler.ast.TypeReference)[i2];

        $i3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr>;

        $i4 = $i3 - i2;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr> = $i4;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] genericsStack>;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr>;

        $i6 = $i5 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, $i6, r2, 0, i2);

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i8 = $i7 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i8;

        $i9 = $r4[$i7];

        $r5 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeReference getTypeReference(int)>($i9);

        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] genericsStack>;

        $i10 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr>;

        $r7 = $r6[$i10];

        r8 = (org.eclipse.jdt.internal.compiler.ast.TypeParameter) $r7;

        r8.<org.eclipse.jdt.internal.compiler.ast.TypeParameter: org.eclipse.jdt.internal.compiler.ast.TypeReference type> = $r5;

        $i11 = $r5.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int bits>;

        $i12 = $i11 | 16;

        $r5.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int bits> = $i12;

        r8.<org.eclipse.jdt.internal.compiler.ast.TypeParameter: org.eclipse.jdt.internal.compiler.ast.TypeReference[] bounds> = r2;

        $i13 = i2 - 1;

        $r9 = r2[$i13];

        $i14 = $r9.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int sourceEnd>;

        r8.<org.eclipse.jdt.internal.compiler.ast.TypeParameter: int declarationSourceEnd> = $i14;

        i18 = 0;

        i15 = lengthof r2;

        goto label2;

     label1:
        $r10 = r2[i18];

        $i16 = $r10.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int bits>;

        $i17 = $i16 | 16;

        $r10.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int bits> = $i17;

        i18 = i18 + 1;

     label2:
        if i18 < i15 goto label1;

        return;
    }

    protected void consumeUnaryExpression(int)
    {
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r1, $r4, $r6, $r9, $r12;
        org.eclipse.jdt.internal.compiler.ast.LongLiteral $r7;
        org.eclipse.jdt.internal.compiler.ast.LongLiteralMinValue $r8;
        org.eclipse.jdt.internal.compiler.ast.IntLiteral $r10;
        org.eclipse.jdt.internal.compiler.ast.Expression r2, r13;
        int[] $r14;
        int $i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        boolean $z0, $z1, $z2, $z3;
        org.eclipse.jdt.internal.compiler.ast.UnaryExpression $r3, $r5;
        org.eclipse.jdt.internal.compiler.ast.IntLiteralMinValue $r11;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        i1 := @parameter0: int;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        r2 = $r1[$i0];

        if i1 != 13 goto label3;

        $z0 = r2 instanceof org.eclipse.jdt.internal.compiler.ast.IntLiteral;

        if $z0 == 0 goto label1;

        $r10 = (org.eclipse.jdt.internal.compiler.ast.IntLiteral) r2;

        $z3 = virtualinvoke $r10.<org.eclipse.jdt.internal.compiler.ast.IntLiteral: boolean mayRepresentMIN_VALUE()>();

        if $z3 == 0 goto label1;

        $r12 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r11 = new org.eclipse.jdt.internal.compiler.ast.IntLiteralMinValue;

        specialinvoke $r11.<org.eclipse.jdt.internal.compiler.ast.IntLiteralMinValue: void <init>()>();

        $r12[$i5] = $r11;

        r13 = $r11;

        goto label4;

     label1:
        $z1 = r2 instanceof org.eclipse.jdt.internal.compiler.ast.LongLiteral;

        if $z1 == 0 goto label2;

        $r7 = (org.eclipse.jdt.internal.compiler.ast.LongLiteral) r2;

        $z2 = virtualinvoke $r7.<org.eclipse.jdt.internal.compiler.ast.LongLiteral: boolean mayRepresentMIN_VALUE()>();

        if $z2 == 0 goto label2;

        $r9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r8 = new org.eclipse.jdt.internal.compiler.ast.LongLiteralMinValue;

        specialinvoke $r8.<org.eclipse.jdt.internal.compiler.ast.LongLiteralMinValue: void <init>()>();

        $r9[$i4] = $r8;

        r13 = $r8;

        goto label4;

     label2:
        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r5 = new org.eclipse.jdt.internal.compiler.ast.UnaryExpression;

        specialinvoke $r5.<org.eclipse.jdt.internal.compiler.ast.UnaryExpression: void <init>(org.eclipse.jdt.internal.compiler.ast.Expression,int)>(r2, i1);

        $r6[$i3] = $r5;

        r13 = $r5;

        goto label4;

     label3:
        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r3 = new org.eclipse.jdt.internal.compiler.ast.UnaryExpression;

        specialinvoke $r3.<org.eclipse.jdt.internal.compiler.ast.UnaryExpression: void <init>(org.eclipse.jdt.internal.compiler.ast.Expression,int)>(r2, i1);

        $r4[$i2] = $r3;

        r13 = $r3;

     label4:
        $r14 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i7 = $i6 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i7;

        $i8 = $r14[$i6];

        r13.<org.eclipse.jdt.internal.compiler.ast.Expression: int sourceStart> = $i8;

        $i9 = r2.<org.eclipse.jdt.internal.compiler.ast.Expression: int sourceEnd>;

        r13.<org.eclipse.jdt.internal.compiler.ast.Expression: int sourceEnd> = $i9;

        return;
    }

    protected void consumeUnaryExpression(int, boolean)
    {
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r3;
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r1, $r5, $r10;
        org.eclipse.jdt.internal.compiler.ast.IntLiteral $r6, $r9;
        org.eclipse.jdt.internal.compiler.ast.Expression r2;
        int[] $r7;
        int $i0, $i1, $i2, i3, $i4, $i5, $i6, $i7, $i8, $i9;
        org.eclipse.jdt.internal.compiler.ast.PrefixExpression $r4;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        boolean $z0, z1, $z2;
        org.eclipse.jdt.internal.compiler.ast.PostfixExpression $r8;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        i3 := @parameter0: int;

        z1 := @parameter1: boolean;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        r2 = $r1[$i0];

        $z0 = r2 instanceof org.eclipse.jdt.internal.compiler.ast.Reference;

        if $z0 == 0 goto label2;

        if z1 == 0 goto label1;

        $r10 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r8 = new org.eclipse.jdt.internal.compiler.ast.PostfixExpression;

        $r9 = <org.eclipse.jdt.internal.compiler.ast.IntLiteral: org.eclipse.jdt.internal.compiler.ast.IntLiteral One>;

        $i8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        specialinvoke $r8.<org.eclipse.jdt.internal.compiler.ast.PostfixExpression: void <init>(org.eclipse.jdt.internal.compiler.ast.Expression,org.eclipse.jdt.internal.compiler.ast.Expression,int,int)>(r2, $r9, i3, $i8);

        $r10[$i9] = $r8;

        goto label4;

     label1:
        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r4 = new org.eclipse.jdt.internal.compiler.ast.PrefixExpression;

        $r6 = <org.eclipse.jdt.internal.compiler.ast.IntLiteral: org.eclipse.jdt.internal.compiler.ast.IntLiteral One>;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i5 = $i4 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i5;

        $i7 = $r7[$i4];

        specialinvoke $r4.<org.eclipse.jdt.internal.compiler.ast.PrefixExpression: void <init>(org.eclipse.jdt.internal.compiler.ast.Expression,org.eclipse.jdt.internal.compiler.ast.Expression,int,int)>(r2, $r6, i3, $i7);

        $r5[$i6] = $r4;

        goto label4;

     label2:
        if z1 != 0 goto label3;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i2 = $i1 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i2;

     label3:
        $z2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean statementRecoveryActivated>;

        if $z2 != 0 goto label4;

        $r3 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        virtualinvoke $r3.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void invalidUnaryExpression(org.eclipse.jdt.internal.compiler.ast.Expression)>(r2);

     label4:
        return;
    }

    protected void consumeVariableDeclarators()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void optimizedConcatNodeLists()>();

        return;
    }

    protected void consumeVariableInitializers()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void concatExpressionLists()>();

        return;
    }

    protected void consumeWildcard()
    {
        int[] $r2, $r3;
        org.eclipse.jdt.internal.compiler.ast.Wildcard $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.eclipse.jdt.internal.compiler.parser.Parser r1;

        r1 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r0 = new org.eclipse.jdt.internal.compiler.ast.Wildcard;

        specialinvoke $r0.<org.eclipse.jdt.internal.compiler.ast.Wildcard: void <init>(int)>(0);

        $r2 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i0 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i1 = $i0 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i1;

        $i2 = $r2[$i0];

        $r0.<org.eclipse.jdt.internal.compiler.ast.Wildcard: int sourceEnd> = $i2;

        $r3 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i3 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i4 = $i3 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i4;

        $i5 = $r3[$i3];

        $r0.<org.eclipse.jdt.internal.compiler.ast.Wildcard: int sourceStart> = $i5;

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnGenericsStack(org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r0);

        return;
    }

    protected void consumeWildcard1()
    {
        int[] $r2, $r3;
        org.eclipse.jdt.internal.compiler.ast.Wildcard $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.eclipse.jdt.internal.compiler.parser.Parser r1;

        r1 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r0 = new org.eclipse.jdt.internal.compiler.ast.Wildcard;

        specialinvoke $r0.<org.eclipse.jdt.internal.compiler.ast.Wildcard: void <init>(int)>(0);

        $r2 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i0 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i1 = $i0 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i1;

        $i2 = $r2[$i0];

        $r0.<org.eclipse.jdt.internal.compiler.ast.Wildcard: int sourceEnd> = $i2;

        $r3 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i3 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i4 = $i3 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i4;

        $i5 = $r3[$i3];

        $r0.<org.eclipse.jdt.internal.compiler.ast.Wildcard: int sourceStart> = $i5;

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnGenericsStack(org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r0);

        return;
    }

    protected void consumeWildcard1WithBounds()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        return;
    }

    protected void consumeWildcard2()
    {
        int[] $r2, $r3;
        org.eclipse.jdt.internal.compiler.ast.Wildcard $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.eclipse.jdt.internal.compiler.parser.Parser r1;

        r1 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r0 = new org.eclipse.jdt.internal.compiler.ast.Wildcard;

        specialinvoke $r0.<org.eclipse.jdt.internal.compiler.ast.Wildcard: void <init>(int)>(0);

        $r2 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i0 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i1 = $i0 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i1;

        $i2 = $r2[$i0];

        $r0.<org.eclipse.jdt.internal.compiler.ast.Wildcard: int sourceEnd> = $i2;

        $r3 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i3 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i4 = $i3 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i4;

        $i5 = $r3[$i3];

        $r0.<org.eclipse.jdt.internal.compiler.ast.Wildcard: int sourceStart> = $i5;

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnGenericsStack(org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r0);

        return;
    }

    protected void consumeWildcard2WithBounds()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        return;
    }

    protected void consumeWildcard3()
    {
        int[] $r2, $r3;
        org.eclipse.jdt.internal.compiler.ast.Wildcard $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.eclipse.jdt.internal.compiler.parser.Parser r1;

        r1 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r0 = new org.eclipse.jdt.internal.compiler.ast.Wildcard;

        specialinvoke $r0.<org.eclipse.jdt.internal.compiler.ast.Wildcard: void <init>(int)>(0);

        $r2 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i0 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i1 = $i0 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i1;

        $i2 = $r2[$i0];

        $r0.<org.eclipse.jdt.internal.compiler.ast.Wildcard: int sourceEnd> = $i2;

        $r3 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i3 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i4 = $i3 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i4;

        $i5 = $r3[$i3];

        $r0.<org.eclipse.jdt.internal.compiler.ast.Wildcard: int sourceStart> = $i5;

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnGenericsStack(org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r0);

        return;
    }

    protected void consumeWildcard3WithBounds()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        return;
    }

    protected void consumeWildcardBounds1Extends()
    {
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r3;
        int[] $r6;
        org.eclipse.jdt.internal.compiler.ast.Wildcard $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        org.eclipse.jdt.internal.compiler.parser.Parser r1;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r2, $r7;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r4, $r5;

        r1 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r0 = new org.eclipse.jdt.internal.compiler.ast.Wildcard;

        specialinvoke $r0.<org.eclipse.jdt.internal.compiler.ast.Wildcard: void <init>(int)>(1);

        $r2 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] genericsStack>;

        $i0 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr>;

        $r3 = $r2[$i0];

        $r4 = (org.eclipse.jdt.internal.compiler.ast.TypeReference) $r3;

        $r0.<org.eclipse.jdt.internal.compiler.ast.Wildcard: org.eclipse.jdt.internal.compiler.ast.TypeReference bound> = $r4;

        $r5 = $r0.<org.eclipse.jdt.internal.compiler.ast.Wildcard: org.eclipse.jdt.internal.compiler.ast.TypeReference bound>;

        $i1 = $r5.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int sourceEnd>;

        $r0.<org.eclipse.jdt.internal.compiler.ast.Wildcard: int sourceEnd> = $i1;

        $i2 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i3 = $i2 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i3;

        $r6 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i4 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i5 = $i4 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i5;

        $i6 = $r6[$i4];

        $r0.<org.eclipse.jdt.internal.compiler.ast.Wildcard: int sourceStart> = $i6;

        $r7 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] genericsStack>;

        $i7 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr>;

        $r7[$i7] = $r0;

        return;
    }

    protected void consumeWildcardBounds1Super()
    {
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r3;
        int[] $r6;
        org.eclipse.jdt.internal.compiler.ast.Wildcard $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        org.eclipse.jdt.internal.compiler.parser.Parser r1;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r2, $r7;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r4, $r5;

        r1 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r0 = new org.eclipse.jdt.internal.compiler.ast.Wildcard;

        specialinvoke $r0.<org.eclipse.jdt.internal.compiler.ast.Wildcard: void <init>(int)>(2);

        $r2 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] genericsStack>;

        $i0 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr>;

        $r3 = $r2[$i0];

        $r4 = (org.eclipse.jdt.internal.compiler.ast.TypeReference) $r3;

        $r0.<org.eclipse.jdt.internal.compiler.ast.Wildcard: org.eclipse.jdt.internal.compiler.ast.TypeReference bound> = $r4;

        $i1 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i2 = $i1 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i2;

        $r5 = $r0.<org.eclipse.jdt.internal.compiler.ast.Wildcard: org.eclipse.jdt.internal.compiler.ast.TypeReference bound>;

        $i3 = $r5.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int sourceEnd>;

        $r0.<org.eclipse.jdt.internal.compiler.ast.Wildcard: int sourceEnd> = $i3;

        $i4 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i5 = $i4 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i5;

        $r6 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i6 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i7 = $i6 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i7;

        $i8 = $r6[$i6];

        $r0.<org.eclipse.jdt.internal.compiler.ast.Wildcard: int sourceStart> = $i8;

        $r7 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] genericsStack>;

        $i9 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr>;

        $r7[$i9] = $r0;

        return;
    }

    protected void consumeWildcardBounds2Extends()
    {
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r3;
        int[] $r6;
        org.eclipse.jdt.internal.compiler.ast.Wildcard $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        org.eclipse.jdt.internal.compiler.parser.Parser r1;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r2, $r7;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r4, $r5;

        r1 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r0 = new org.eclipse.jdt.internal.compiler.ast.Wildcard;

        specialinvoke $r0.<org.eclipse.jdt.internal.compiler.ast.Wildcard: void <init>(int)>(1);

        $r2 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] genericsStack>;

        $i0 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr>;

        $r3 = $r2[$i0];

        $r4 = (org.eclipse.jdt.internal.compiler.ast.TypeReference) $r3;

        $r0.<org.eclipse.jdt.internal.compiler.ast.Wildcard: org.eclipse.jdt.internal.compiler.ast.TypeReference bound> = $r4;

        $r5 = $r0.<org.eclipse.jdt.internal.compiler.ast.Wildcard: org.eclipse.jdt.internal.compiler.ast.TypeReference bound>;

        $i1 = $r5.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int sourceEnd>;

        $r0.<org.eclipse.jdt.internal.compiler.ast.Wildcard: int sourceEnd> = $i1;

        $i2 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i3 = $i2 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i3;

        $r6 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i4 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i5 = $i4 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i5;

        $i6 = $r6[$i4];

        $r0.<org.eclipse.jdt.internal.compiler.ast.Wildcard: int sourceStart> = $i6;

        $r7 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] genericsStack>;

        $i7 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr>;

        $r7[$i7] = $r0;

        return;
    }

    protected void consumeWildcardBounds2Super()
    {
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r3;
        int[] $r6;
        org.eclipse.jdt.internal.compiler.ast.Wildcard $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        org.eclipse.jdt.internal.compiler.parser.Parser r1;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r2, $r7;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r4, $r5;

        r1 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r0 = new org.eclipse.jdt.internal.compiler.ast.Wildcard;

        specialinvoke $r0.<org.eclipse.jdt.internal.compiler.ast.Wildcard: void <init>(int)>(2);

        $r2 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] genericsStack>;

        $i0 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr>;

        $r3 = $r2[$i0];

        $r4 = (org.eclipse.jdt.internal.compiler.ast.TypeReference) $r3;

        $r0.<org.eclipse.jdt.internal.compiler.ast.Wildcard: org.eclipse.jdt.internal.compiler.ast.TypeReference bound> = $r4;

        $i1 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i2 = $i1 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i2;

        $r5 = $r0.<org.eclipse.jdt.internal.compiler.ast.Wildcard: org.eclipse.jdt.internal.compiler.ast.TypeReference bound>;

        $i3 = $r5.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int sourceEnd>;

        $r0.<org.eclipse.jdt.internal.compiler.ast.Wildcard: int sourceEnd> = $i3;

        $i4 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i5 = $i4 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i5;

        $r6 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i6 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i7 = $i6 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i7;

        $i8 = $r6[$i6];

        $r0.<org.eclipse.jdt.internal.compiler.ast.Wildcard: int sourceStart> = $i8;

        $r7 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] genericsStack>;

        $i9 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr>;

        $r7[$i9] = $r0;

        return;
    }

    protected void consumeWildcardBounds3Extends()
    {
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r3;
        int[] $r6;
        org.eclipse.jdt.internal.compiler.ast.Wildcard $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        org.eclipse.jdt.internal.compiler.parser.Parser r1;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r2, $r7;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r4, $r5;

        r1 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r0 = new org.eclipse.jdt.internal.compiler.ast.Wildcard;

        specialinvoke $r0.<org.eclipse.jdt.internal.compiler.ast.Wildcard: void <init>(int)>(1);

        $r2 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] genericsStack>;

        $i0 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr>;

        $r3 = $r2[$i0];

        $r4 = (org.eclipse.jdt.internal.compiler.ast.TypeReference) $r3;

        $r0.<org.eclipse.jdt.internal.compiler.ast.Wildcard: org.eclipse.jdt.internal.compiler.ast.TypeReference bound> = $r4;

        $r5 = $r0.<org.eclipse.jdt.internal.compiler.ast.Wildcard: org.eclipse.jdt.internal.compiler.ast.TypeReference bound>;

        $i1 = $r5.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int sourceEnd>;

        $r0.<org.eclipse.jdt.internal.compiler.ast.Wildcard: int sourceEnd> = $i1;

        $i2 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i3 = $i2 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i3;

        $r6 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i4 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i5 = $i4 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i5;

        $i6 = $r6[$i4];

        $r0.<org.eclipse.jdt.internal.compiler.ast.Wildcard: int sourceStart> = $i6;

        $r7 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] genericsStack>;

        $i7 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr>;

        $r7[$i7] = $r0;

        return;
    }

    protected void consumeWildcardBounds3Super()
    {
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r3;
        int[] $r6;
        org.eclipse.jdt.internal.compiler.ast.Wildcard $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        org.eclipse.jdt.internal.compiler.parser.Parser r1;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r2, $r7;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r4, $r5;

        r1 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r0 = new org.eclipse.jdt.internal.compiler.ast.Wildcard;

        specialinvoke $r0.<org.eclipse.jdt.internal.compiler.ast.Wildcard: void <init>(int)>(2);

        $r2 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] genericsStack>;

        $i0 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr>;

        $r3 = $r2[$i0];

        $r4 = (org.eclipse.jdt.internal.compiler.ast.TypeReference) $r3;

        $r0.<org.eclipse.jdt.internal.compiler.ast.Wildcard: org.eclipse.jdt.internal.compiler.ast.TypeReference bound> = $r4;

        $i1 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i2 = $i1 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i2;

        $r5 = $r0.<org.eclipse.jdt.internal.compiler.ast.Wildcard: org.eclipse.jdt.internal.compiler.ast.TypeReference bound>;

        $i3 = $r5.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int sourceEnd>;

        $r0.<org.eclipse.jdt.internal.compiler.ast.Wildcard: int sourceEnd> = $i3;

        $i4 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i5 = $i4 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i5;

        $r6 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i6 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i7 = $i6 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i7;

        $i8 = $r6[$i6];

        $r0.<org.eclipse.jdt.internal.compiler.ast.Wildcard: int sourceStart> = $i8;

        $r7 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] genericsStack>;

        $i9 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr>;

        $r7[$i9] = $r0;

        return;
    }

    protected void consumeWildcardBoundsExtends()
    {
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r3, $r4;
        int[] $r2, $r5;
        org.eclipse.jdt.internal.compiler.ast.Wildcard $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        org.eclipse.jdt.internal.compiler.parser.Parser r1;

        r1 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r0 = new org.eclipse.jdt.internal.compiler.ast.Wildcard;

        specialinvoke $r0.<org.eclipse.jdt.internal.compiler.ast.Wildcard: void <init>(int)>(1);

        $r2 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i0 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i1 = $i0 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i1;

        $i2 = $r2[$i0];

        $r3 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeReference getTypeReference(int)>($i2);

        $r0.<org.eclipse.jdt.internal.compiler.ast.Wildcard: org.eclipse.jdt.internal.compiler.ast.TypeReference bound> = $r3;

        $r4 = $r0.<org.eclipse.jdt.internal.compiler.ast.Wildcard: org.eclipse.jdt.internal.compiler.ast.TypeReference bound>;

        $i3 = $r4.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int sourceEnd>;

        $r0.<org.eclipse.jdt.internal.compiler.ast.Wildcard: int sourceEnd> = $i3;

        $i4 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i5 = $i4 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i5;

        $r5 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i6 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i7 = $i6 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i7;

        $i8 = $r5[$i6];

        $r0.<org.eclipse.jdt.internal.compiler.ast.Wildcard: int sourceStart> = $i8;

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnGenericsStack(org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r0);

        return;
    }

    protected void consumeWildcardBoundsSuper()
    {
        int[] $r2, $r5;
        org.eclipse.jdt.internal.compiler.ast.Wildcard $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        org.eclipse.jdt.internal.compiler.parser.Parser r1;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r3, $r4;

        r1 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r0 = new org.eclipse.jdt.internal.compiler.ast.Wildcard;

        specialinvoke $r0.<org.eclipse.jdt.internal.compiler.ast.Wildcard: void <init>(int)>(2);

        $r2 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i0 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i1 = $i0 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i1;

        $i2 = $r2[$i0];

        $r3 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeReference getTypeReference(int)>($i2);

        $r0.<org.eclipse.jdt.internal.compiler.ast.Wildcard: org.eclipse.jdt.internal.compiler.ast.TypeReference bound> = $r3;

        $i3 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i4 = $i3 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i4;

        $r4 = $r0.<org.eclipse.jdt.internal.compiler.ast.Wildcard: org.eclipse.jdt.internal.compiler.ast.TypeReference bound>;

        $i5 = $r4.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int sourceEnd>;

        $r0.<org.eclipse.jdt.internal.compiler.ast.Wildcard: int sourceEnd> = $i5;

        $i6 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i7 = $i6 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i7;

        $r5 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i8 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i9 = $i8 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i9;

        $i10 = $r5[$i8];

        $r0.<org.eclipse.jdt.internal.compiler.ast.Wildcard: int sourceStart> = $i10;

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnGenericsStack(org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r0);

        return;
    }

    protected void consumeWildcardWithBounds()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        return;
    }

    public boolean containsComment(int, int)
    {
        org.eclipse.jdt.internal.compiler.parser.Scanner $r1, $r2;
        int[] $r3;
        int i0, i1, i2, i3, $i5;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        i1 := @parameter0: int;

        i2 := @parameter1: int;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        i3 = $r1.<org.eclipse.jdt.internal.compiler.parser.Scanner: int commentPtr>;

        goto label5;

     label1:
        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r3 = $r2.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentStarts>;

        i0 = $r3[i3];

        if i0 >= i1 goto label2;

        goto label4;

     label2:
        if i0 <= i2 goto label3;

        goto label4;

     label3:
        return 1;

     label4:
        $i5 = (int) -1;

        i3 = i3 + $i5;

     label5:
        if i3 >= 0 goto label1;

        return 0;
    }

    public org.eclipse.jdt.internal.compiler.ast.MethodDeclaration convertToMethodDeclaration(org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration, org.eclipse.jdt.internal.compiler.CompilationResult)
    {
        org.eclipse.jdt.internal.compiler.ast.Statement[] $r5;
        org.eclipse.jdt.internal.compiler.ast.Javadoc $r9;
        org.eclipse.jdt.internal.compiler.ast.Annotation[] $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        org.eclipse.jdt.internal.compiler.ast.MethodDeclaration $r0;
        org.eclipse.jdt.internal.compiler.ast.Argument[] $r7;
        org.eclipse.jdt.internal.compiler.parser.Parser r10;
        org.eclipse.jdt.internal.compiler.ast.TypeParameter[] $r3;
        org.eclipse.jdt.internal.compiler.ast.TypeReference[] $r8;
        org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration r2;
        org.eclipse.jdt.internal.compiler.CompilationResult r1;
        char[] $r4;

        r10 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        r2 := @parameter0: org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration;

        r1 := @parameter1: org.eclipse.jdt.internal.compiler.CompilationResult;

        $r0 = new org.eclipse.jdt.internal.compiler.ast.MethodDeclaration;

        specialinvoke $r0.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: void <init>(org.eclipse.jdt.internal.compiler.CompilationResult)>(r1);

        $r3 = r2.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeParameter[] typeParameters>;

        $r0.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeParameter[] typeParameters> = $r3;

        $i0 = r2.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: int sourceStart>;

        $r0.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: int sourceStart> = $i0;

        $i1 = r2.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: int sourceEnd>;

        $r0.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: int sourceEnd> = $i1;

        $i2 = r2.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: int bodyStart>;

        $r0.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: int bodyStart> = $i2;

        $i3 = r2.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: int bodyEnd>;

        $r0.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: int bodyEnd> = $i3;

        $i4 = r2.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: int declarationSourceEnd>;

        $r0.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: int declarationSourceEnd> = $i4;

        $i5 = r2.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: int declarationSourceStart>;

        $r0.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: int declarationSourceStart> = $i5;

        $r4 = r2.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: char[] selector>;

        $r0.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: char[] selector> = $r4;

        $r5 = r2.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: org.eclipse.jdt.internal.compiler.ast.Statement[] statements>;

        $r0.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: org.eclipse.jdt.internal.compiler.ast.Statement[] statements> = $r5;

        $i6 = r2.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: int modifiers>;

        $r0.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: int modifiers> = $i6;

        $r6 = r2.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: org.eclipse.jdt.internal.compiler.ast.Annotation[] annotations>;

        $r0.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: org.eclipse.jdt.internal.compiler.ast.Annotation[] annotations> = $r6;

        $r7 = r2.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: org.eclipse.jdt.internal.compiler.ast.Argument[] arguments>;

        $r0.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: org.eclipse.jdt.internal.compiler.ast.Argument[] arguments> = $r7;

        $r8 = r2.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeReference[] thrownExceptions>;

        $r0.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeReference[] thrownExceptions> = $r8;

        $i7 = r2.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: int explicitDeclarations>;

        $r0.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: int explicitDeclarations> = $i7;

        $r0.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeReference returnType> = null;

        $r9 = r2.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc>;

        $r0.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc> = $r9;

        return $r0;
    }

    protected org.eclipse.jdt.internal.compiler.ast.TypeReference copyDims(org.eclipse.jdt.internal.compiler.ast.TypeReference, int)
    {
        int i0;
        org.eclipse.jdt.internal.compiler.parser.Parser r2;
        org.eclipse.jdt.internal.compiler.ast.TypeReference r0, $r1;

        r2 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.ast.TypeReference;

        i0 := @parameter1: int;

        $r1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ast.TypeReference: org.eclipse.jdt.internal.compiler.ast.TypeReference copyDims(int)>(i0);

        return $r1;
    }

    protected org.eclipse.jdt.internal.compiler.ast.FieldDeclaration createFieldDeclaration(char[], int, int)
    {
        int i0, i1;
        char[] r1;
        org.eclipse.jdt.internal.compiler.parser.Parser r2;
        org.eclipse.jdt.internal.compiler.ast.FieldDeclaration $r0;

        r2 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r0 = new org.eclipse.jdt.internal.compiler.ast.FieldDeclaration;

        specialinvoke $r0.<org.eclipse.jdt.internal.compiler.ast.FieldDeclaration: void <init>(char[],int,int)>(r1, i0, i1);

        return $r0;
    }

    protected org.eclipse.jdt.internal.compiler.parser.JavadocParser createJavadocParser()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r1;
        org.eclipse.jdt.internal.compiler.parser.JavadocParser $r0;

        r1 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r0 = new org.eclipse.jdt.internal.compiler.parser.JavadocParser;

        specialinvoke $r0.<org.eclipse.jdt.internal.compiler.parser.JavadocParser: void <init>(org.eclipse.jdt.internal.compiler.parser.Parser)>(r1);

        return $r0;
    }

    protected org.eclipse.jdt.internal.compiler.ast.LocalDeclaration createLocalDeclaration(char[], int, int)
    {
        int i0, i1;
        char[] r1;
        org.eclipse.jdt.internal.compiler.parser.Parser r2;
        org.eclipse.jdt.internal.compiler.ast.LocalDeclaration $r0;

        r2 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r0 = new org.eclipse.jdt.internal.compiler.ast.LocalDeclaration;

        specialinvoke $r0.<org.eclipse.jdt.internal.compiler.ast.LocalDeclaration: void <init>(char[],int,int)>(r1, i0, i1);

        return $r0;
    }

    protected org.eclipse.jdt.internal.compiler.ast.StringLiteral createStringLiteral(char[], int, int, int)
    {
        org.eclipse.jdt.internal.compiler.ast.StringLiteral $r0;
        int i0, i1, i2;
        char[] r1;
        org.eclipse.jdt.internal.compiler.parser.Parser r2;

        r2 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $r0 = new org.eclipse.jdt.internal.compiler.ast.StringLiteral;

        specialinvoke $r0.<org.eclipse.jdt.internal.compiler.ast.StringLiteral: void <init>(char[],int,int,int)>(r1, i0, i1, i2);

        return $r0;
    }

    protected org.eclipse.jdt.internal.compiler.parser.RecoveredType currentRecoveryType()
    {
        org.eclipse.jdt.internal.compiler.parser.RecoveredElement $r1, $r2, $r3, $r5;
        org.eclipse.jdt.internal.compiler.parser.RecoveredType $r4, $r6;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        boolean $z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r1 == null goto label2;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $z0 = $r2 instanceof org.eclipse.jdt.internal.compiler.parser.RecoveredType;

        if $z0 == 0 goto label1;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $r6 = (org.eclipse.jdt.internal.compiler.parser.RecoveredType) $r5;

        return $r6;

     label1:
        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $r4 = virtualinvoke $r3.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.parser.RecoveredType enclosingType()>();

        return $r4;

     label2:
        return null;
    }

    public org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration dietParse(org.eclipse.jdt.internal.compiler.env.ICompilationUnit, org.eclipse.jdt.internal.compiler.CompilationResult)
    {
        java.lang.Throwable $r4;
        org.eclipse.jdt.internal.compiler.CompilationResult r2;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.env.ICompilationUnit r1;
        boolean z0;
        org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration $r3;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.env.ICompilationUnit;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.CompilationResult;

        z0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean diet>;

     label1:
        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean diet> = 1;

        $r3 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration parse(org.eclipse.jdt.internal.compiler.env.ICompilationUnit,org.eclipse.jdt.internal.compiler.CompilationResult)>(r1, r2);

        goto label3;

     label2:
        $r4 := @caughtexception;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean diet> = z0;

        throw $r4;

     label3:
        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean diet> = z0;

        return $r3;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    protected void dispatchDeclarationInto(int)
    {
        org.eclipse.jdt.internal.compiler.ast.FieldDeclaration[] $r10, $r18;
        int[] r0;
        boolean $z0, $z1, $z2, z3;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration $r15, r20;
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r5, r19;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] $r6, $r12, $r13, $r14, $r16;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, i24, i25, i26, i27, i28, i29, i30, i31, i32, i33, i34, $i36, $i38;
        org.eclipse.jdt.internal.compiler.parser.Parser r1;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r2, $r4, $r7, $r9, $r11;
        org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration[] $r8, $r17;
        org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration $r3;

        r1 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        i0 := @parameter0: int;

        if i0 != 0 goto label01;

        return;

     label01:
        $i1 = i0 + 1;

        r0 = newarray (int)[$i1];

        i24 = 0;

        i25 = 0;

        i26 = 0;

        z3 = 0;

        i27 = i0 - 1;

        goto label06;

     label02:
        $r2 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i2 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i3 = $i2 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr> = $i3;

        r19 = $r2[$i2];

        $z0 = r19 instanceof org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration;

        if $z0 == 0 goto label03;

        r0[i27] = 2;

        i25 = i25 + 1;

        $r3 = (org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration) r19;

        $z2 = virtualinvoke $r3.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: boolean isAbstract()>();

        if $z2 == 0 goto label05;

        z3 = 1;

        goto label05;

     label03:
        $z1 = r19 instanceof org.eclipse.jdt.internal.compiler.ast.TypeDeclaration;

        if $z1 == 0 goto label04;

        r0[i27] = 3;

        i26 = i26 + 1;

        goto label05;

     label04:
        r0[i27] = 1;

        i24 = i24 + 1;

     label05:
        $i36 = (int) -1;

        i27 = i27 + $i36;

     label06:
        if i27 >= 0 goto label02;

        $r4 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i4 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $r5 = $r4[$i4];

        r20 = (org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) $r5;

        if i24 == 0 goto label07;

        $r18 = newarray (org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)[i24];

        r20.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.FieldDeclaration[] fields> = $r18;

     label07:
        if i25 == 0 goto label08;

        $r17 = newarray (org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)[i25];

        r20.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration[] methods> = $r17;

        if z3 == 0 goto label08;

        $i22 = r20.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits>;

        $i23 = $i22 | 2048;

        r20.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits> = $i23;

     label08:
        if i26 == 0 goto label09;

        $r16 = newarray (org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)[i26];

        r20.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] memberTypes> = $r16;

     label09:
        i28 = 0;

        i29 = 0;

        i30 = 0;

        i31 = r0[0];

        i32 = 0;

        i33 = 0;

        goto label16;

     label10:
        $i5 = r0[i33];

        if i31 == $i5 goto label15;

        tableswitch(i31)
        {
            case 1: goto label11;
            case 2: goto label12;
            case 3: goto label13;
            default: goto label14;
        };

     label11:
        $i16 = i33 - i32;

        i30 = i30 + $i16;

        $r11 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i17 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i18 = $i17 + i32;

        $i20 = $i18 + 1;

        $r10 = r20.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.FieldDeclaration[] fields>;

        $i19 = i30 - $i16;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r11, $i20, $r10, $i19, $i16);

        goto label14;

     label12:
        $i11 = i33 - i32;

        i29 = i29 + $i11;

        $r9 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i12 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i13 = $i12 + i32;

        $i15 = $i13 + 1;

        $r8 = r20.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration[] methods>;

        $i14 = i29 - $i11;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, $i15, $r8, $i14, $i11);

        goto label14;

     label13:
        $i6 = i33 - i32;

        i28 = i28 + $i6;

        $r7 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i7 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i8 = $i7 + i32;

        $i10 = $i8 + 1;

        $r6 = r20.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] memberTypes>;

        $i9 = i28 - $i6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, $i10, $r6, $i9, $i6);

     label14:
        i32 = i33;

        i31 = r0[i33];

     label15:
        i33 = i33 + 1;

     label16:
        if i33 <= i0 goto label10;

        $r12 = r20.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] memberTypes>;

        if $r12 == null goto label19;

        $r13 = r20.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] memberTypes>;

        $i21 = lengthof $r13;

        i34 = $i21 - 1;

        goto label18;

     label17:
        $r14 = r20.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] memberTypes>;

        $r15 = $r14[i34];

        $r15.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration enclosingType> = r20;

        $i38 = (int) -1;

        i34 = i34 + $i38;

     label18:
        if i34 >= 0 goto label17;

     label19:
        return;
    }

    protected void dispatchDeclarationIntoEnumDeclaration(int)
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r1;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r2, $r5, $r8, $r10, $r12;
        org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration[] $r9, $r18;
        org.eclipse.jdt.internal.compiler.ast.FieldDeclaration[] $r11, $r19;
        int[] r0;
        boolean $z0, $z1, $z2, $z3, z4;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration r4, $r16;
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r3, r20;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] $r7, $r13, $r14, $r15, $r17;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, i25, i26, i27, i28, i29, i30, i31, i32, i33, i34, i35, $i37, $i39;
        org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration $r6;

        r1 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        i0 := @parameter0: int;

        if i0 != 0 goto label01;

        return;

     label01:
        $i1 = i0 + 1;

        r0 = newarray (int)[$i1];

        i25 = 0;

        i26 = 0;

        i27 = 0;

        $r2 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i2 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i3 = $i2 - i0;

        $r3 = $r2[$i3];

        r4 = (org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) $r3;

        z4 = 0;

        i28 = i0 - 1;

        goto label06;

     label02:
        $r5 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i4 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i5 = $i4 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr> = $i5;

        r20 = $r5[$i4];

        $z0 = r20 instanceof org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration;

        if $z0 == 0 goto label03;

        r0[i28] = 2;

        i26 = i26 + 1;

        $r6 = (org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration) r20;

        $z3 = virtualinvoke $r6.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: boolean isAbstract()>();

        if $z3 == 0 goto label05;

        z4 = 1;

        goto label05;

     label03:
        $z1 = r20 instanceof org.eclipse.jdt.internal.compiler.ast.TypeDeclaration;

        if $z1 == 0 goto label04;

        r0[i28] = 3;

        i27 = i27 + 1;

        goto label05;

     label04:
        $z2 = r20 instanceof org.eclipse.jdt.internal.compiler.ast.FieldDeclaration;

        if $z2 == 0 goto label05;

        r0[i28] = 1;

        i25 = i25 + 1;

     label05:
        $i37 = (int) -1;

        i28 = i28 + $i37;

     label06:
        if i28 >= 0 goto label02;

        if i25 == 0 goto label07;

        $r19 = newarray (org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)[i25];

        r4.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.FieldDeclaration[] fields> = $r19;

     label07:
        if i26 == 0 goto label08;

        $r18 = newarray (org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)[i26];

        r4.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration[] methods> = $r18;

        if z4 == 0 goto label08;

        $i23 = r4.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits>;

        $i24 = $i23 | 2048;

        r4.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits> = $i24;

     label08:
        if i27 == 0 goto label09;

        $r17 = newarray (org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)[i27];

        r4.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] memberTypes> = $r17;

     label09:
        i29 = 0;

        i30 = 0;

        i31 = 0;

        i32 = r0[0];

        i33 = 0;

        i34 = 0;

        goto label16;

     label10:
        $i6 = r0[i34];

        if i32 == $i6 goto label15;

        tableswitch(i32)
        {
            case 1: goto label11;
            case 2: goto label12;
            case 3: goto label13;
            default: goto label14;
        };

     label11:
        $i17 = i34 - i33;

        i31 = i31 + $i17;

        $r12 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i18 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i19 = $i18 + i33;

        $i21 = $i19 + 1;

        $r11 = r4.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.FieldDeclaration[] fields>;

        $i20 = i31 - $i17;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r12, $i21, $r11, $i20, $i17);

        goto label14;

     label12:
        $i12 = i34 - i33;

        i30 = i30 + $i12;

        $r10 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i13 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i14 = $i13 + i33;

        $i16 = $i14 + 1;

        $r9 = r4.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration[] methods>;

        $i15 = i30 - $i12;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r10, $i16, $r9, $i15, $i12);

        goto label14;

     label13:
        $i7 = i34 - i33;

        i29 = i29 + $i7;

        $r8 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i8 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i9 = $i8 + i33;

        $i11 = $i9 + 1;

        $r7 = r4.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] memberTypes>;

        $i10 = i29 - $i7;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, $i11, $r7, $i10, $i7);

     label14:
        i33 = i34;

        i32 = r0[i34];

     label15:
        i34 = i34 + 1;

     label16:
        if i34 <= i0 goto label10;

        $r13 = r4.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] memberTypes>;

        if $r13 == null goto label19;

        $r14 = r4.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] memberTypes>;

        $i22 = lengthof $r14;

        i35 = $i22 - 1;

        goto label18;

     label17:
        $r15 = r4.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] memberTypes>;

        $r16 = $r15[i35];

        $r16.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration enclosingType> = r4;

        $i39 = (int) -1;

        i35 = i35 + $i39;

     label18:
        if i35 >= 0 goto label17;

     label19:
        return;
    }

    protected org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration endParse(int)
    {
        int[][] $r18, $r21;
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r2;
        char[][] $r5, $r9, $r12, $r15;
        int[] $r19, $r22;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration $r23, $r27, $r35;
        int i0, $i1, $i2, i3, $i4;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        java.lang.String $r3, $r7, $r24, $r32, $r40;
        java.io.PrintStream $r25, $r26, $r28, $r29, $r33, $r34, $r36, $r37;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r4, $r8, $r11, $r14, $r17, $r20, $r41;
        org.eclipse.jdt.internal.compiler.parser.RecoveredElement $r1, $r30, $r31, $r38, $r39;
        char[] $r6, $r10, $r13, $r16;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        i0 := @parameter0: int;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastAct> = i0;

        $z0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean statementRecoveryActivated>;

        if $z0 == 0 goto label02;

        $r38 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement buildInitialRecoveryState()>();

        if $r38 == null goto label01;

        $r39 = virtualinvoke $r38.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.parser.RecoveredElement topElement()>();

        virtualinvoke $r39.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: void updateParseTree()>();

     label01:
        $z6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean hasError>;

        if $z6 == 0 goto label05;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void resetStacks()>();

        goto label05;

     label02:
        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r1 == null goto label04;

        $z5 = <org.eclipse.jdt.internal.compiler.parser.Parser: boolean VERBOSE_RECOVERY>;

        if $z5 == 0 goto label03;

        $r33 = <java.lang.System: java.io.PrintStream out>;

        $r32 = <org.eclipse.jdt.internal.compiler.util.Messages: java.lang.String parser_syntaxRecovery>;

        virtualinvoke $r33.<java.io.PrintStream: void print(java.lang.String)>($r32);

        $r34 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r34.<java.io.PrintStream: void println(java.lang.String)>("--------------------------");

        $r36 = <java.lang.System: java.io.PrintStream out>;

        $r35 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit>;

        virtualinvoke $r36.<java.io.PrintStream: void println(java.lang.Object)>($r35);

        $r37 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r37.<java.io.PrintStream: void println(java.lang.String)>("----------------------------------");

     label03:
        $r30 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $r31 = virtualinvoke $r30.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.parser.RecoveredElement topElement()>();

        virtualinvoke $r31.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: void updateParseTree()>();

        goto label05;

     label04:
        $z2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean diet>;

        $z1 = <org.eclipse.jdt.internal.compiler.parser.Parser: boolean VERBOSE_RECOVERY>;

        $z3 = $z2 & $z1;

        if $z3 == 0 goto label05;

        $r25 = <java.lang.System: java.io.PrintStream out>;

        $r24 = <org.eclipse.jdt.internal.compiler.util.Messages: java.lang.String parser_regularParse>;

        virtualinvoke $r25.<java.io.PrintStream: void print(java.lang.String)>($r24);

        $r26 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r26.<java.io.PrintStream: void println(java.lang.String)>("--------------------------");

        $r28 = <java.lang.System: java.io.PrintStream out>;

        $r27 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit>;

        virtualinvoke $r28.<java.io.PrintStream: void println(java.lang.Object)>($r27);

        $r29 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r29.<java.io.PrintStream: void println(java.lang.String)>("----------------------------------");

     label05:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void persistLineSeparatorPositions()>();

        i3 = 0;

        goto label10;

     label06:
        $z4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean statementRecoveryActivated>;

        if $z4 != 0 goto label09;

        $r2 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        $r3 = new java.lang.String;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r5 = $r4.<org.eclipse.jdt.internal.compiler.parser.Scanner: char[][] foundTaskTags>;

        $r6 = $r5[i3];

        specialinvoke $r3.<java.lang.String: void <init>(char[])>($r6);

        $r7 = new java.lang.String;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r9 = $r8.<org.eclipse.jdt.internal.compiler.parser.Scanner: char[][] foundTaskMessages>;

        $r10 = $r9[i3];

        specialinvoke $r7.<java.lang.String: void <init>(char[])>($r10);

        $r11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r12 = $r11.<org.eclipse.jdt.internal.compiler.parser.Scanner: char[][] foundTaskPriorities>;

        $r13 = $r12[i3];

        if $r13 != null goto label07;

        $r40 = null;

        goto label08;

     label07:
        $r40 = new java.lang.String;

        $r14 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r15 = $r14.<org.eclipse.jdt.internal.compiler.parser.Scanner: char[][] foundTaskPriorities>;

        $r16 = $r15[i3];

        specialinvoke $r40.<java.lang.String: void <init>(char[])>($r16);

     label08:
        $r17 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r18 = $r17.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[][] foundTaskPositions>;

        $r19 = $r18[i3];

        $i2 = $r19[0];

        $r20 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r21 = $r20.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[][] foundTaskPositions>;

        $r22 = $r21[i3];

        $i1 = $r22[1];

        virtualinvoke $r2.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void task(java.lang.String,java.lang.String,java.lang.String,int,int)>($r3, $r7, $r40, $i2, $i1);

     label09:
        i3 = i3 + 1;

     label10:
        $r41 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i4 = $r41.<org.eclipse.jdt.internal.compiler.parser.Scanner: int foundTaskCount>;

        if i3 < $i4 goto label06;

        $r23 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit>;

        return $r23;
    }

    public int flushCommentsDefinedPriorTo(int)
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r1, $r2, $r4, $r5, $r8, $r9, $r12, $r13, $r16, $r17, $r20, $r21, $r24, $r25, $r28, $r29, $r32, $r33, $r36, $r37, $r40, $r41, $r44, $r45, $r48, $r49, $r52, $r54, $r55, $r57, $r58, $r60;
        int[] $r3, $r6, $r7, $r10, $r11, $r14, $r15, $r18, $r19, $r22, $r23, $r26, $r27, $r30, $r31, $r34, $r35, $r38, $r39, $r42, $r43, $r46, $r47, $r50, $r51, $r53, $r56, $r59;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, i28, i29, i30, i31, i32, i33, $i34, $i36, $i38, $i40;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        i28 := @parameter0: int;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        i0 = $r1.<org.eclipse.jdt.internal.compiler.parser.Scanner: int commentPtr>;

        if i0 >= 0 goto label01;

        return i28;

     label01:
        i29 = i0;

        i30 = 0;

        goto label05;

     label02:
        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r3 = $r2.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentStops>;

        i31 = $r3[i29];

        if i31 >= 0 goto label03;

        i31 = neg i31;

     label03:
        if i31 > i28 goto label04;

        goto label06;

     label04:
        $i36 = (int) -1;

        i29 = i29 + $i36;

        i30 = i30 + 1;

     label05:
        if i29 >= 0 goto label02;

     label06:
        if i30 <= 0 goto label07;

        $r52 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r53 = $r52.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentStops>;

        $i22 = i29 + 1;

        $i23 = $r53[$i22];

        i32 = neg $i23;

        if i32 <= 0 goto label07;

        $i38 = (int) -1;

        i33 = i32 + $i38;

        $r54 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r56 = $r54.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] lineEnds>;

        $r55 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i24 = $r55.<org.eclipse.jdt.internal.compiler.parser.Scanner: int linePtr>;

        $i25 = staticinvoke <org.eclipse.jdt.internal.compiler.util.Util: int getLineNumber(int,int[],int,int)>(i28, $r56, 0, $i24);

        $r57 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r59 = $r57.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] lineEnds>;

        $r58 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i26 = $r58.<org.eclipse.jdt.internal.compiler.parser.Scanner: int linePtr>;

        $i27 = staticinvoke <org.eclipse.jdt.internal.compiler.util.Util: int getLineNumber(int,int[],int,int)>(i33, $r59, 0, $i26);

        if $i25 != $i27 goto label07;

        i28 = i33;

        $i40 = (int) -1;

        i30 = i30 + $i40;

        i29 = i29 + 1;

     label07:
        if i29 >= 0 goto label08;

        return i28;

     label08:
        tableswitch(i30)
        {
            case 0: goto label09;
            case 1: goto label11;
            case 2: goto label10;
            default: goto label12;
        };

     label09:
        goto label13;

     label10:
        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r7 = $r4.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentStarts>;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r6 = $r5.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentStarts>;

        $i1 = i29 + 1;

        $i2 = $r6[$i1];

        $r7[0] = $i2;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r11 = $r8.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentStops>;

        $r9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r10 = $r9.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentStops>;

        $i3 = i29 + 1;

        $i4 = $r10[$i3];

        $r11[0] = $i4;

        $r12 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r15 = $r12.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentTagStarts>;

        $r13 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r14 = $r13.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentTagStarts>;

        $i5 = i29 + 1;

        $i6 = $r14[$i5];

        $r15[0] = $i6;

        $r16 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r19 = $r16.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentStarts>;

        $r17 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r18 = $r17.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentStarts>;

        $i7 = i29 + 2;

        $i8 = $r18[$i7];

        $r19[1] = $i8;

        $r20 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r23 = $r20.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentStops>;

        $r21 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r22 = $r21.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentStops>;

        $i9 = i29 + 2;

        $i10 = $r22[$i9];

        $r23[1] = $i10;

        $r24 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r27 = $r24.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentTagStarts>;

        $r25 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r26 = $r25.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentTagStarts>;

        $i11 = i29 + 2;

        $i12 = $r26[$i11];

        $r27[1] = $i12;

        goto label13;

     label11:
        $r28 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r31 = $r28.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentStarts>;

        $r29 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r30 = $r29.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentStarts>;

        $i13 = i29 + 1;

        $i14 = $r30[$i13];

        $r31[0] = $i14;

        $r32 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r35 = $r32.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentStops>;

        $r33 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r34 = $r33.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentStops>;

        $i15 = i29 + 1;

        $i16 = $r34[$i15];

        $r35[0] = $i16;

        $r36 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r39 = $r36.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentTagStarts>;

        $r37 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r38 = $r37.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentTagStarts>;

        $i17 = i29 + 1;

        $i18 = $r38[$i17];

        $r39[0] = $i18;

        goto label13;

     label12:
        $r40 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r43 = $r40.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentStarts>;

        $i19 = i29 + 1;

        $r41 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r42 = $r41.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentStarts>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r43, $i19, $r42, 0, i30);

        $r44 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r47 = $r44.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentStops>;

        $i20 = i29 + 1;

        $r45 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r46 = $r45.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentStops>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r47, $i20, $r46, 0, i30);

        $r48 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r51 = $r48.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentTagStarts>;

        $i21 = i29 + 1;

        $r49 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r50 = $r49.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentTagStarts>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r51, $i21, $r50, 0, i30);

     label13:
        $r60 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i34 = i30 - 1;

        $r60.<org.eclipse.jdt.internal.compiler.parser.Scanner: int commentPtr> = $i34;

        return i28;
    }

    protected org.eclipse.jdt.internal.compiler.ast.TypeReference getAnnotationType()
    {
        long $l12;
        char[][] r2, $r4, $r8;
        long[] r3, $r5, $r10;
        int[] $r1;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.SingleTypeReference $r7;
        char[] $r9;
        org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference $r6;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] identifierLengthStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr> = $i1;

        i2 = $r1[$i0];

        if i2 != 1 goto label1;

        $r7 = new org.eclipse.jdt.internal.compiler.ast.SingleTypeReference;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: char[][] identifierStack>;

        $i9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $r9 = $r8[$i9];

        $r10 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: long[] identifierPositionStack>;

        $i10 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i11 = $i10 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr> = $i11;

        $l12 = $r10[$i10];

        specialinvoke $r7.<org.eclipse.jdt.internal.compiler.ast.SingleTypeReference: void <init>(char[],long)>($r9, $l12);

        return $r7;

     label1:
        r2 = newarray (char[])[i2];

        $i3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i4 = $i3 - i2;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr> = $i4;

        r3 = newarray (long)[i2];

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: char[][] identifierStack>;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i6 = $i5 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, $i6, r2, 0, i2);

        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: long[] identifierPositionStack>;

        $i7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i8 = $i7 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, $i8, r3, 0, i2);

        $r6 = new org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference;

        specialinvoke $r6.<org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference: void <init>(char[][],long[])>(r2, r3);

        return $r6;
    }

    public int getFirstToken()
    {
        int $i0;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int firstToken>;

        return $i0;
    }

    public int[] getJavaDocPositions()
    {
        int[] $r3, $r6, $r8, $r10, r11;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, i7, i8, i9, i10, i11, i12;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r1, $r2, $r4, $r5, $r7, $r9;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        i7 = 0;

        i8 = 0;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        i9 = $r1.<org.eclipse.jdt.internal.compiler.parser.Scanner: int commentPtr>;

        goto label3;

     label1:
        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r3 = $r2.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentStops>;

        $i0 = $r3[i8];

        if $i0 <= 0 goto label2;

        i7 = i7 + 1;

     label2:
        i8 = i8 + 1;

     label3:
        if i8 <= i9 goto label1;

        if i7 != 0 goto label4;

        return null;

     label4:
        $i1 = 2 * i7;

        r11 = newarray (int)[$i1];

        i10 = 0;

        i11 = 0;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        i2 = $r4.<org.eclipse.jdt.internal.compiler.parser.Scanner: int commentPtr>;

        goto label7;

     label5:
        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r6 = $r5.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentStops>;

        $i3 = $r6[i11];

        if $i3 <= 0 goto label6;

        i12 = i10 + 1;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r8 = $r7.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentStarts>;

        $i4 = $r8[i11];

        r11[i10] = $i4;

        i10 = i12 + 1;

        $r9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r10 = $r9.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentStops>;

        $i5 = $r10[i11];

        $i6 = $i5 - 1;

        r11[i12] = $i6;

     label6:
        i11 = i11 + 1;

     label7:
        if i11 <= i2 goto label5;

        return r11;
    }

    public void getMethodBodies(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)
    {
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] $r12, $r13, $r21;
        org.eclipse.jdt.internal.compiler.ReadManager $r6, $r19;
        int[] r3;
        int $i0, $i1, i2, $i3, $i4, i5, i6;
        org.eclipse.jdt.internal.compiler.parser.Parser r1;
        boolean $z0, $z1;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r2, $r4, $r8, $r10, $r11, $r17;
        org.eclipse.jdt.internal.compiler.parser.JavadocParser $r9, $r15, $r16;
        org.eclipse.jdt.internal.compiler.CompilationResult r5;
        char[] $r20;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration $r14;
        org.eclipse.jdt.internal.compiler.env.ICompilationUnit $r7, $r18;
        org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration r0;

        r1 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration;

        if r0 != null goto label1;

        return;

     label1:
        $z0 = r0.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: boolean ignoreMethodBodies>;

        if $z0 == 0 goto label2;

        r0.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: boolean ignoreFurtherInvestigation> = 1;

        return;

     label2:
        $i0 = r0.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: int bits>;

        $i1 = $i0 & 16;

        if $i1 == 0 goto label3;

        return;

     label3:
        $r2 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        r3 = $r2.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] lineEnds>;

        $r4 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        i2 = $r4.<org.eclipse.jdt.internal.compiler.parser.Scanner: int linePtr>;

        r5 = r0.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: org.eclipse.jdt.internal.compiler.CompilationResult compilationResult>;

        $r6 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ReadManager readManager>;

        if $r6 == null goto label4;

        $r19 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ReadManager readManager>;

        $r18 = r5.<org.eclipse.jdt.internal.compiler.CompilationResult: org.eclipse.jdt.internal.compiler.env.ICompilationUnit compilationUnit>;

        $r20 = virtualinvoke $r19.<org.eclipse.jdt.internal.compiler.ReadManager: char[] getContents(org.eclipse.jdt.internal.compiler.env.ICompilationUnit)>($r18);

        goto label5;

     label4:
        $r7 = r5.<org.eclipse.jdt.internal.compiler.CompilationResult: org.eclipse.jdt.internal.compiler.env.ICompilationUnit compilationUnit>;

        $r20 = interfaceinvoke $r7.<org.eclipse.jdt.internal.compiler.env.ICompilationUnit: char[] getContents()>();

     label5:
        $r8 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        virtualinvoke $r8.<org.eclipse.jdt.internal.compiler.parser.Scanner: void setSource(char[],org.eclipse.jdt.internal.compiler.CompilationResult)>($r20, r5);

        $r9 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.JavadocParser javadocParser>;

        if $r9 == null goto label6;

        $r15 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.JavadocParser javadocParser>;

        $z1 = $r15.<org.eclipse.jdt.internal.compiler.parser.JavadocParser: boolean checkDocComment>;

        if $z1 == 0 goto label6;

        $r16 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.JavadocParser javadocParser>;

        $r17 = $r16.<org.eclipse.jdt.internal.compiler.parser.JavadocParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        virtualinvoke $r17.<org.eclipse.jdt.internal.compiler.parser.Scanner: void setSource(char[])>($r20);

     label6:
        $r21 = r0.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] types>;

        if $r21 == null goto label9;

        i6 = 0;

        $r12 = r0.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] types>;

        i5 = lengthof $r12;

        goto label8;

     label7:
        $r13 = r0.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] types>;

        $r14 = $r13[i6];

        virtualinvoke $r14.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: void parseMethods(org.eclipse.jdt.internal.compiler.parser.Parser,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)>(r1, r0);

        i6 = i6 + 1;

     label8:
        if i6 < i5 goto label7;

     label9:
        $i3 = r0.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: int bits>;

        $i4 = $i3 | 16;

        r0.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: int bits> = $i4;

        $r10 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r10.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] lineEnds> = r3;

        $r11 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r11.<org.eclipse.jdt.internal.compiler.parser.Scanner: int linePtr> = i2;

        return;
    }

    protected char getNextCharacter(char[], int[])
    {
        int[] r1;
        int $i0, $i1, $i2, $i3, $i4, $i6, $i7, $i8, $i9, $i11, $i12, $i13, $i15, $i16, $i17, $i19, $i20, $i21, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i31, $i32;
        org.eclipse.jdt.internal.compiler.parser.Parser r2;
        char $c5, $c10, $c14, $c18, $c22, c30;
        char[] r0;

        r2 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        r0 := @parameter0: char[];

        r1 := @parameter1: int[];

        $i0 = r1[0];

        $i1 = $i0 + 1;

        r1[0] = $i1;

        c30 = r0[$i0];

        $i31 = (int) c30;

        tableswitch($i31)
        {
            case 92: goto label1;
            default: goto label4;
        };

     label1:
        $i2 = r1[0];

        $i3 = $i2 + 1;

        r1[0] = $i3;

        goto label3;

     label2:
        $i6 = r1[0];

        $i7 = $i6 + 1;

        r1[0] = $i7;

     label3:
        $i4 = r1[0];

        $c5 = r0[$i4];

        $i32 = (int) $c5;

        if $i32 == 117 goto label2;

        $i8 = r1[0];

        $i9 = $i8 + 1;

        r1[0] = $i9;

        $c10 = r0[$i8];

        $i11 = staticinvoke <org.eclipse.jdt.internal.compiler.parser.ScannerHelper: int getNumericValue(char)>($c10);

        if $i11 > 15 goto label4;

        if $i11 < 0 goto label4;

        $i12 = r1[0];

        $i13 = $i12 + 1;

        r1[0] = $i13;

        $c14 = r0[$i12];

        $i15 = staticinvoke <org.eclipse.jdt.internal.compiler.parser.ScannerHelper: int getNumericValue(char)>($c14);

        if $i15 > 15 goto label4;

        if $i15 < 0 goto label4;

        $i16 = r1[0];

        $i17 = $i16 + 1;

        r1[0] = $i17;

        $c18 = r0[$i16];

        $i19 = staticinvoke <org.eclipse.jdt.internal.compiler.parser.ScannerHelper: int getNumericValue(char)>($c18);

        if $i19 > 15 goto label4;

        if $i19 < 0 goto label4;

        $i20 = r1[0];

        $i21 = $i20 + 1;

        r1[0] = $i21;

        $c22 = r0[$i20];

        $i23 = staticinvoke <org.eclipse.jdt.internal.compiler.parser.ScannerHelper: int getNumericValue(char)>($c22);

        if $i23 > 15 goto label4;

        if $i23 < 0 goto label4;

        $i24 = $i11 * 16;

        $i25 = $i24 + $i15;

        $i26 = $i25 * 16;

        $i27 = $i26 + $i19;

        $i28 = $i27 * 16;

        $i29 = $i28 + $i23;

        c30 = (char) $i29;

     label4:
        return c30;
    }

    protected org.eclipse.jdt.internal.compiler.ast.Expression getTypeReference(org.eclipse.jdt.internal.compiler.ast.Expression)
    {
        org.eclipse.jdt.internal.compiler.ast.Expression r0;
        int $i0, $i1, $i2, $i3, $i5;
        org.eclipse.jdt.internal.compiler.parser.Parser r1;

        r1 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.ast.Expression;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.ast.Expression: int bits>;

        $i5 = (int) -8;

        $i1 = $i0 & $i5;

        r0.<org.eclipse.jdt.internal.compiler.ast.Expression: int bits> = $i1;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.ast.Expression: int bits>;

        $i3 = $i2 | 4;

        r0.<org.eclipse.jdt.internal.compiler.ast.Expression: int bits> = $i3;

        return r0;
    }

    protected org.eclipse.jdt.internal.compiler.ast.TypeReference getTypeReference(int)
    {
        char[][] r4, $r6, $r11, $r15;
        int[] $r1, $r2, $r3, $r19, $r20;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r18, r21;
        org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference $r9;
        org.eclipse.jdt.internal.compiler.ast.ArrayQualifiedTypeReference $r8;
        org.eclipse.jdt.internal.compiler.ast.ArrayTypeReference $r10;
        long $l23, $l28;
        long[] r5, $r7, $r13, $r17;
        int $i0, $i1, i2, $i3, $i4, i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i24, $i25, $i26, $i27, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.SingleTypeReference $r14;
        char[] $r12, $r16;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        i6 := @parameter0: int;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] identifierLengthStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr> = $i1;

        i2 = $r1[$i0];

        if i2 >= 0 goto label2;

        $i29 = neg i2;

        $r18 = staticinvoke <org.eclipse.jdt.internal.compiler.ast.TypeReference: org.eclipse.jdt.internal.compiler.ast.TypeReference baseTypeReference(int,int)>($i29, i6);

        r21 = $r18;

        $r19 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i30 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i31 = $i30 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i31;

        $i32 = $r19[$i30];

        $r18.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int sourceStart> = $i32;

        if i6 != 0 goto label1;

        $r20 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i36 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i37 = $i36 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i37;

        $i38 = $r20[$i36];

        $r18.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int sourceEnd> = $i38;

        goto label8;

     label1:
        $i33 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i34 = $i33 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i34;

        $i35 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endPosition>;

        $r18.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int sourceEnd> = $i35;

        goto label8;

     label2:
        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] genericsIdentifiersLengthStack>;

        $i3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsIdentifiersLengthPtr>;

        $i4 = $i3 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsIdentifiersLengthPtr> = $i4;

        i5 = $r2[$i3];

        if i2 != i5 goto label3;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] genericsLengthStack>;

        $i7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsLengthPtr>;

        $i8 = $r3[$i7];

        if $i8 == 0 goto label4;

     label3:
        r21 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeReference getTypeReferenceForGenericType(int,int,int)>(i6, i2, i5);

        goto label8;

     label4:
        if i2 != 1 goto label6;

        $i18 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsLengthPtr>;

        $i19 = $i18 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsLengthPtr> = $i19;

        if i6 != 0 goto label5;

        $r14 = new org.eclipse.jdt.internal.compiler.ast.SingleTypeReference;

        $r15 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: char[][] identifierStack>;

        $i25 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $r16 = $r15[$i25];

        $r17 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: long[] identifierPositionStack>;

        $i26 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i27 = $i26 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr> = $i27;

        $l28 = $r17[$i26];

        specialinvoke $r14.<org.eclipse.jdt.internal.compiler.ast.SingleTypeReference: void <init>(char[],long)>($r16, $l28);

        r21 = $r14;

        goto label8;

     label5:
        $r10 = new org.eclipse.jdt.internal.compiler.ast.ArrayTypeReference;

        $r11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: char[][] identifierStack>;

        $i20 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $r12 = $r11[$i20];

        $r13 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: long[] identifierPositionStack>;

        $i21 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i22 = $i21 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr> = $i22;

        $l23 = $r13[$i21];

        specialinvoke $r10.<org.eclipse.jdt.internal.compiler.ast.ArrayTypeReference: void <init>(char[],int,long)>($r12, i6, $l23);

        r21 = $r10;

        $i24 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endPosition>;

        $r10.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int sourceEnd> = $i24;

        goto label8;

     label6:
        $i9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsLengthPtr>;

        $i10 = $i9 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsLengthPtr> = $i10;

        r4 = newarray (char[])[i2];

        $i11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i12 = $i11 - i2;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr> = $i12;

        r5 = newarray (long)[i2];

        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: char[][] identifierStack>;

        $i13 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i14 = $i13 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, $i14, r4, 0, i2);

        $r7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: long[] identifierPositionStack>;

        $i15 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i16 = $i15 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, $i16, r5, 0, i2);

        if i6 != 0 goto label7;

        $r9 = new org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference;

        specialinvoke $r9.<org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference: void <init>(char[][],long[])>(r4, r5);

        r21 = $r9;

        goto label8;

     label7:
        $r8 = new org.eclipse.jdt.internal.compiler.ast.ArrayQualifiedTypeReference;

        specialinvoke $r8.<org.eclipse.jdt.internal.compiler.ast.ArrayQualifiedTypeReference: void <init>(char[][],int,long[])>(r4, i6, r5);

        r21 = $r8;

        $i17 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endPosition>;

        $r8.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int sourceEnd> = $i17;

     label8:
        return r21;
    }

    protected org.eclipse.jdt.internal.compiler.ast.TypeReference getTypeReferenceForGenericType(int, int, int)
    {
        char[][] $r2, $r6, $r12, $r17;
        org.eclipse.jdt.internal.compiler.ast.TypeReference[][] $r11;
        org.eclipse.jdt.internal.compiler.ast.TypeReference[] $r8, r20;
        long $l9, $l37;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r9, $r15;
        char[] $r3, $r18;
        int[] $r1, $r5, $r14;
        org.eclipse.jdt.internal.compiler.ast.ParameterizedSingleTypeReference $r16;
        long[] $r4, $r7, $r13, $r19;
        org.eclipse.jdt.internal.compiler.ast.ParameterizedQualifiedTypeReference $r10;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i38, i39, i40, i41, i42;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        i26 := @parameter0: int;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i0 != 1 goto label2;

        if i1 != 1 goto label2;

        $r14 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] genericsLengthStack>;

        $i28 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsLengthPtr>;

        $i29 = $i28 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsLengthPtr> = $i29;

        i39 = $r14[$i28];

        r20 = newarray (org.eclipse.jdt.internal.compiler.ast.TypeReference)[i39];

        $i30 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr>;

        $i31 = $i30 - i39;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr> = $i31;

        $r15 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] genericsStack>;

        $i32 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr>;

        $i33 = $i32 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r15, $i33, r20, 0, i39);

        $r16 = new org.eclipse.jdt.internal.compiler.ast.ParameterizedSingleTypeReference;

        $r17 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: char[][] identifierStack>;

        $i34 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $r18 = $r17[$i34];

        $r19 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: long[] identifierPositionStack>;

        $i35 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i36 = $i35 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr> = $i36;

        $l37 = $r19[$i35];

        specialinvoke $r16.<org.eclipse.jdt.internal.compiler.ast.ParameterizedSingleTypeReference: void <init>(char[],org.eclipse.jdt.internal.compiler.ast.TypeReference[],int,long)>($r18, r20, i26, $l37);

        if i26 == 0 goto label1;

        $i38 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        $r16.<org.eclipse.jdt.internal.compiler.ast.ParameterizedSingleTypeReference: int sourceEnd> = $i38;

     label1:
        return $r16;

     label2:
        $r11 = newarray (org.eclipse.jdt.internal.compiler.ast.TypeReference[])[i1];

        $r12 = newarray (char[])[i1];

        $r13 = newarray (long)[i1];

        i40 = i1;

        i41 = i0;

        goto label8;

     label3:
        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] genericsLengthStack>;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsLengthPtr>;

        $i3 = $i2 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsLengthPtr> = $i3;

        i42 = $r1[$i2];

        if i42 == 0 goto label4;

        $i21 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr>;

        $i22 = $i21 - i42;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr> = $i22;

        $r9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] genericsStack>;

        $i23 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr>;

        $i25 = $i23 + 1;

        $i24 = i40 - 1;

        $r8 = newarray (org.eclipse.jdt.internal.compiler.ast.TypeReference)[i42];

        $r11[$i24] = $r8;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, $i25, $r8, 0, i42);

     label4:
        tableswitch(i41)
        {
            case 1: goto label5;
            default: goto label6;
        };

     label5:
        $i5 = i40 - 1;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: char[][] identifierStack>;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $r3 = $r2[$i4];

        $r12[$i5] = $r3;

        $i8 = i40 - 1;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: long[] identifierPositionStack>;

        $i6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i7 = $i6 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr> = $i7;

        $l9 = $r4[$i6];

        $r13[$i8] = $l9;

        goto label7;

     label6:
        $i12 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i13 = $i12 - i41;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr> = $i13;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: char[][] identifierStack>;

        $i14 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i16 = $i14 + 1;

        $i15 = i40 - i41;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, $i16, $r12, $i15, i41);

        $r7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: long[] identifierPositionStack>;

        $i17 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i19 = $i17 + 1;

        $i18 = i40 - i41;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, $i19, $r13, $i18, i41);

     label7:
        $i20 = i40 - i41;

        i40 = $i20;

        if $i20 <= 0 goto label8;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] identifierLengthStack>;

        $i10 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr>;

        $i11 = $i10 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr> = $i11;

        i41 = $r5[$i10];

     label8:
        if i40 > 0 goto label3;

        $r10 = new org.eclipse.jdt.internal.compiler.ast.ParameterizedQualifiedTypeReference;

        specialinvoke $r10.<org.eclipse.jdt.internal.compiler.ast.ParameterizedQualifiedTypeReference: void <init>(char[][],org.eclipse.jdt.internal.compiler.ast.TypeReference[][],int,long[])>($r12, $r11, i26, $r13);

        if i26 == 0 goto label9;

        $i27 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition>;

        $r10.<org.eclipse.jdt.internal.compiler.ast.ParameterizedQualifiedTypeReference: int sourceEnd> = $i27;

     label9:
        return $r10;
    }

    protected org.eclipse.jdt.internal.compiler.ast.NameReference getUnspecifiedReference()
    {
        org.eclipse.jdt.internal.compiler.ast.QualifiedNameReference $r6;
        char[][] r2, $r3, $r10;
        int[] $r1;
        org.eclipse.jdt.internal.compiler.ast.NameReference r13;
        org.eclipse.jdt.internal.compiler.ast.SingleNameReference $r9;
        long $l11, $l12, $l15, $l21;
        long[] r4, $r5, $r7, $r8, $r12;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i13, $i14, $i16, $i17, $i18, $i19, $i20;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        char[] $r11;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] identifierLengthStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr> = $i1;

        $i2 = $r1[$i0];

        if $i2 != 1 goto label1;

        $r9 = new org.eclipse.jdt.internal.compiler.ast.SingleNameReference;

        $r10 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: char[][] identifierStack>;

        $i18 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $r11 = $r10[$i18];

        $r12 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: long[] identifierPositionStack>;

        $i19 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i20 = $i19 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr> = $i20;

        $l21 = $r12[$i19];

        specialinvoke $r9.<org.eclipse.jdt.internal.compiler.ast.SingleNameReference: void <init>(char[],long)>($r11, $l21);

        r13 = $r9;

        goto label2;

     label1:
        r2 = newarray (char[])[$i2];

        $i3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i4 = $i3 - $i2;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr> = $i4;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: char[][] identifierStack>;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i6 = $i5 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, $i6, r2, 0, $i2);

        r4 = newarray (long)[$i2];

        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: long[] identifierPositionStack>;

        $i7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i8 = $i7 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, $i8, r4, 0, $i2);

        $r6 = new org.eclipse.jdt.internal.compiler.ast.QualifiedNameReference;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: long[] identifierPositionStack>;

        $i9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i10 = $i9 + 1;

        $l11 = $r7[$i10];

        $l12 = $l11 >> 32;

        $i17 = (int) $l12;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: long[] identifierPositionStack>;

        $i13 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i14 = $i13 + $i2;

        $l15 = $r8[$i14];

        $i16 = (int) $l15;

        specialinvoke $r6.<org.eclipse.jdt.internal.compiler.ast.QualifiedNameReference: void <init>(char[][],long[],int,int)>(r2, r4, $i17, $i16);

        r13 = $r6;

     label2:
        return r13;
    }

    protected org.eclipse.jdt.internal.compiler.ast.NameReference getUnspecifiedReferenceOptimized()
    {
        org.eclipse.jdt.internal.compiler.ast.QualifiedNameReference $r14;
        char[][] r2, $r3, $r10;
        int[] $r1;
        org.eclipse.jdt.internal.compiler.ast.SingleNameReference $r13;
        long $l11, $l12, $l15, $l25;
        long[] r4, $r5, $r7, $r8, $r12;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i13, $i14, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i26, $i27, $i28, $i29, $i31, $i33;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        char[] $r11;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] identifierLengthStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr> = $i1;

        $i2 = $r1[$i0];

        if $i2 != 1 goto label1;

        $r13 = new org.eclipse.jdt.internal.compiler.ast.SingleNameReference;

        $r10 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: char[][] identifierStack>;

        $i22 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $r11 = $r10[$i22];

        $r12 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: long[] identifierPositionStack>;

        $i23 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i24 = $i23 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr> = $i24;

        $l25 = $r12[$i23];

        specialinvoke $r13.<org.eclipse.jdt.internal.compiler.ast.SingleNameReference: void <init>(char[],long)>($r11, $l25);

        $i26 = $r13.<org.eclipse.jdt.internal.compiler.ast.NameReference: int bits>;

        $i31 = (int) -8;

        $i27 = $i26 & $i31;

        $r13.<org.eclipse.jdt.internal.compiler.ast.NameReference: int bits> = $i27;

        $i28 = $r13.<org.eclipse.jdt.internal.compiler.ast.NameReference: int bits>;

        $i29 = $i28 | 3;

        $r13.<org.eclipse.jdt.internal.compiler.ast.NameReference: int bits> = $i29;

        return $r13;

     label1:
        r2 = newarray (char[])[$i2];

        $i3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i4 = $i3 - $i2;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr> = $i4;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: char[][] identifierStack>;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i6 = $i5 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, $i6, r2, 0, $i2);

        r4 = newarray (long)[$i2];

        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: long[] identifierPositionStack>;

        $i7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i8 = $i7 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, $i8, r4, 0, $i2);

        $r14 = new org.eclipse.jdt.internal.compiler.ast.QualifiedNameReference;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: long[] identifierPositionStack>;

        $i9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i10 = $i9 + 1;

        $l11 = $r7[$i10];

        $l12 = $l11 >> 32;

        $i17 = (int) $l12;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: long[] identifierPositionStack>;

        $i13 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i14 = $i13 + $i2;

        $l15 = $r8[$i14];

        $i16 = (int) $l15;

        specialinvoke $r14.<org.eclipse.jdt.internal.compiler.ast.QualifiedNameReference: void <init>(char[][],long[],int,int)>(r2, r4, $i17, $i16);

        $i18 = $r14.<org.eclipse.jdt.internal.compiler.ast.NameReference: int bits>;

        $i33 = (int) -8;

        $i19 = $i18 & $i33;

        $r14.<org.eclipse.jdt.internal.compiler.ast.NameReference: int bits> = $i19;

        $i20 = $r14.<org.eclipse.jdt.internal.compiler.ast.NameReference: int bits>;

        $i21 = $i20 | 3;

        $r14.<org.eclipse.jdt.internal.compiler.ast.NameReference: int bits> = $i21;

        return $r14;
    }

    public void goForBlockStatementsopt()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int firstToken> = 67;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r1.<org.eclipse.jdt.internal.compiler.parser.Scanner: boolean recordLineSeparator> = 0;

        return;
    }

    public void goForBlockStatementsOrCatchHeader()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int firstToken> = 4;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r1.<org.eclipse.jdt.internal.compiler.parser.Scanner: boolean recordLineSeparator> = 0;

        return;
    }

    public void goForClassBodyDeclarations()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int firstToken> = 20;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r1.<org.eclipse.jdt.internal.compiler.parser.Scanner: boolean recordLineSeparator> = 1;

        return;
    }

    public void goForCompilationUnit()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r1, $r2;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int firstToken> = 8;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r1.<org.eclipse.jdt.internal.compiler.parser.Scanner: int foundTaskCount> = 0;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r2.<org.eclipse.jdt.internal.compiler.parser.Scanner: boolean recordLineSeparator> = 1;

        return;
    }

    public void goForExpression()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int firstToken> = 5;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r1.<org.eclipse.jdt.internal.compiler.parser.Scanner: boolean recordLineSeparator> = 1;

        return;
    }

    public void goForFieldDeclaration()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int firstToken> = 24;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r1.<org.eclipse.jdt.internal.compiler.parser.Scanner: boolean recordLineSeparator> = 1;

        return;
    }

    public void goForGenericMethodDeclaration()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int firstToken> = 6;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r1.<org.eclipse.jdt.internal.compiler.parser.Scanner: boolean recordLineSeparator> = 1;

        return;
    }

    public void goForHeaders()
    {
        org.eclipse.jdt.internal.compiler.parser.Scanner $r2;
        org.eclipse.jdt.internal.compiler.parser.RecoveredType $r1;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        boolean $z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredType currentRecoveryType()>();

        if $r1 == null goto label1;

        $z0 = $r1.<org.eclipse.jdt.internal.compiler.parser.RecoveredType: boolean insideEnumConstantPart>;

        if $z0 == 0 goto label1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int firstToken> = 66;

        goto label2;

     label1:
        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int firstToken> = 11;

     label2:
        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r2.<org.eclipse.jdt.internal.compiler.parser.Scanner: boolean recordLineSeparator> = 1;

        return;
    }

    public void goForImportDeclaration()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int firstToken> = 25;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r1.<org.eclipse.jdt.internal.compiler.parser.Scanner: boolean recordLineSeparator> = 1;

        return;
    }

    public void goForInitializer()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int firstToken> = 10;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r1.<org.eclipse.jdt.internal.compiler.parser.Scanner: boolean recordLineSeparator> = 0;

        return;
    }

    public void goForMemberValue()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int firstToken> = 25;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r1.<org.eclipse.jdt.internal.compiler.parser.Scanner: boolean recordLineSeparator> = 1;

        return;
    }

    public void goForMethodBody()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int firstToken> = 9;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r1.<org.eclipse.jdt.internal.compiler.parser.Scanner: boolean recordLineSeparator> = 0;

        return;
    }

    public void goForPackageDeclaration()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int firstToken> = 23;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r1.<org.eclipse.jdt.internal.compiler.parser.Scanner: boolean recordLineSeparator> = 1;

        return;
    }

    public void goForTypeDeclaration()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int firstToken> = 1;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r1.<org.eclipse.jdt.internal.compiler.parser.Scanner: boolean recordLineSeparator> = 1;

        return;
    }

    protected void ignoreExpressionAssignment()
    {
        org.eclipse.jdt.internal.compiler.ast.ArrayInitializer r3;
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r4;
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r1;
        org.eclipse.jdt.internal.compiler.ast.Expression $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        boolean $z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i1;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i3 = $i2 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr> = $i3;

        $r2 = $r1[$i2];

        r3 = (org.eclipse.jdt.internal.compiler.ast.ArrayInitializer) $r2;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        $i5 = $i4 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr> = $i5;

        $z0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean statementRecoveryActivated>;

        if $z0 != 0 goto label1;

        $r4 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        $i7 = r3.<org.eclipse.jdt.internal.compiler.ast.ArrayInitializer: int sourceStart>;

        $i6 = r3.<org.eclipse.jdt.internal.compiler.ast.ArrayInitializer: int sourceEnd>;

        virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void arrayConstantsOnlyInArrayInitializers(int,int)>($i7, $i6);

     label1:
        return;
    }

    public void initialize()
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void initialize(boolean)>(0);

        return;
    }

    public void initialize(boolean)
    {
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r7, $r8, $r9, $r10, $r15;
        int[] $r1, $r2;
        boolean z0, $z2, $z3, $z4;
        org.eclipse.jdt.internal.compiler.impl.CompilerOptions $r14;
        int $i0, i1, $i2, $i3, $i4, $i5, $i7, $i9, $i11, $i13, $i15, $i17, $i19, $i21, $i23, $i25, $i27, $i29, $i31, $i33, $i35, $i37, $i39, $i41, $i43, $i45;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r3, $r4, $r5, $r6, $r16;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r11, $r12, $r13, $r17, $r18;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        z0 := @parameter0: boolean;

        $i7 = (int) -1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr> = $i7;

        $i9 = (int) -1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr> = $i9;

        $i11 = (int) -1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr> = $i11;

        $i13 = (int) -1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr> = $i13;

        $i15 = (int) -1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr> = $i15;

        $i17 = (int) -1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr> = $i17;

        $i19 = (int) -1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i19;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] nestedMethod>;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int nestedType> = 0;

        $r1[0] = 0;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] variablesCounter>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int nestedType>;

        $r2[$i0] = 0;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int dimensions> = 0;

        $i21 = (int) -1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int realBlockPtr> = $i21;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit> = null;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.ReferenceContext referenceContext> = null;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition> = 0;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        i1 = lengthof $r3;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] noAstNodes>;

        $i2 = lengthof $r4;

        if $i2 >= i1 goto label1;

        $r16 = newarray (org.eclipse.jdt.internal.compiler.ast.ASTNode)[i1];

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] noAstNodes> = $r16;

     label1:
        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] noAstNodes>;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, $r5, 0, i1);

        $r7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i5 = lengthof $r7;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] noExpressions>;

        $i3 = lengthof $r8;

        if $i3 >= $i5 goto label2;

        $r15 = newarray (org.eclipse.jdt.internal.compiler.ast.Expression)[$i5];

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] noExpressions> = $r15;

     label2:
        $r10 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] noExpressions>;

        $r9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r10, 0, $r9, 0, $i5);

        $r11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i23 = (int) -1;

        $r11.<org.eclipse.jdt.internal.compiler.parser.Scanner: int commentPtr> = $i23;

        $r12 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r12.<org.eclipse.jdt.internal.compiler.parser.Scanner: int foundTaskCount> = 0;

        $r13 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r13.<org.eclipse.jdt.internal.compiler.parser.Scanner: int eofPosition> = 2147483647;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean recordStringLiterals> = 1;

        $r14 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.CompilerOptions options>;

        $i4 = virtualinvoke $r14.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: int getSeverity(long)>(256L);

        $i25 = (int) -1;

        if $i4 == $i25 goto label3;

        $z4 = 1;

        $z3 = 1;

        goto label4;

     label3:
        $z4 = 0;

        $z3 = 0;

     label4:
        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean checkExternalizeStrings> = $z3;

        $r17 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        if z0 == 0 goto label5;

        if $z4 == 0 goto label5;

        $z2 = 1;

        goto label6;

     label5:
        $z2 = 0;

     label6:
        $r17.<org.eclipse.jdt.internal.compiler.parser.Scanner: boolean checkNonExternalizedStringLiterals> = $z2;

        $r18 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i27 = (int) -1;

        $r18.<org.eclipse.jdt.internal.compiler.parser.Scanner: int lastPosition> = $i27;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void resetModifiers()>();

        $i29 = (int) -1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastCheckPoint> = $i29;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement> = null;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean restartRecovery> = 0;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean hasReportedError> = 0;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int recoveredStaticInitializerStart> = 0;

        $i31 = (int) -1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastIgnoredToken> = $i31;

        $i33 = (int) -1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastErrorEndPosition> = $i33;

        $i35 = (int) -1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastErrorEndPositionBeforeRecovery> = $i35;

        $i37 = (int) -1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastJavadocEnd> = $i37;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int listLength> = 0;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int listTypeParameterLength> = 0;

        $i39 = (int) -1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastPosistion> = $i39;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int rBraceStart> = 0;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int rBraceEnd> = 0;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int rBraceSuccessorStart> = 0;

        $i41 = (int) -1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsIdentifiersLengthPtr> = $i41;

        $i43 = (int) -1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsLengthPtr> = $i43;

        $i45 = (int) -1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr> = $i45;

        return;
    }

    public void initializeScanner()
    {
        org.eclipse.jdt.internal.compiler.parser.Scanner $r1;
        long $l0, $l1;
        char[][] $r7, $r8;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.impl.CompilerOptions $r2, $r3, $r4, $r5, $r6;
        boolean $z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = new org.eclipse.jdt.internal.compiler.parser.Scanner;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.CompilerOptions options>;

        $l1 = $r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long sourceLevel>;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.CompilerOptions options>;

        $l0 = $r3.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long complianceLevel>;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.CompilerOptions options>;

        $r8 = $r4.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: char[][] taskTags>;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.CompilerOptions options>;

        $r7 = $r5.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: char[][] taskPriorites>;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.CompilerOptions options>;

        $z0 = $r6.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean isTaskCaseSensitive>;

        specialinvoke $r1.<org.eclipse.jdt.internal.compiler.parser.Scanner: void <init>(boolean,boolean,boolean,long,long,char[][],char[][],boolean)>(0, 0, 0, $l1, $l0, $r8, $r7, $z0);

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner> = $r1;

        return;
    }

    public void jumpOverMethodBody()
    {
        org.eclipse.jdt.internal.compiler.parser.Scanner $r1;
        int $i0;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        boolean $z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $z0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean diet>;

        if $z0 == 0 goto label1;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int dietInt>;

        if $i0 != 0 goto label1;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r1.<org.eclipse.jdt.internal.compiler.parser.Scanner: boolean diet> = 1;

     label1:
        return;
    }

    private void jumpOverType()
    {
        int[] $r10, $r19;
        boolean $z0;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration r4, r15;
        org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression $r5, $r16, $r17;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] $r1, $r3, $r13, $r14;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i15;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r2, $r6, $r7, $r8, $r9, $r12, $r18;
        org.eclipse.jdt.core.compiler.InvalidInputException $r21;
        org.eclipse.jdt.internal.compiler.parser.RecoveryScanner $r11, $r20;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] recoveredTypes>;

        if $r1 == null goto label12;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int nextTypeStart>;

        $i15 = (int) -1;

        if $i0 <= $i15 goto label12;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int nextTypeStart>;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i1 = $r2.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        if $i2 >= $i1 goto label12;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] recoveredTypes>;

        $i3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int recoveredTypePtr>;

        r4 = $r3[$i3];

        $r5 = r4.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression allocation>;

        if $r5 == null goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i4 = r4.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int declarationSourceEnd>;

        $i5 = $i4 + 1;

        $r6.<org.eclipse.jdt.internal.compiler.parser.Scanner: int startPosition> = $i5;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i6 = r4.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int declarationSourceEnd>;

        $i7 = $i6 + 1;

        $r7.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition> = $i7;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r8.<org.eclipse.jdt.internal.compiler.parser.Scanner: boolean diet> = 0;

        if $z0 != 0 goto label03;

        $r18 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r20 = (org.eclipse.jdt.internal.compiler.parser.RecoveryScanner) $r18;

        $r19 = newarray (int)[2];

        $r19[0] = 27;

        $r19[1] = 75;

        virtualinvoke $r20.<org.eclipse.jdt.internal.compiler.parser.RecoveryScanner: void setPendingTokens(int[])>($r19);

        goto label04;

     label03:
        $r9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r11 = (org.eclipse.jdt.internal.compiler.parser.RecoveryScanner) $r9;

        $r10 = newarray (int)[3];

        $r10[0] = 26;

        $r10[1] = 71;

        $r10[2] = 26;

        virtualinvoke $r11.<org.eclipse.jdt.internal.compiler.parser.RecoveryScanner: void setPendingTokens(int[])>($r10);

     label04:
        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration pendingRecoveredType> = r4;

     label05:
        $r12 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i8 = virtualinvoke $r12.<org.eclipse.jdt.internal.compiler.parser.Scanner: int getNextToken()>();

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int currentToken> = $i8;

     label06:
        goto label08;

     label07:
        $r21 := @caughtexception;

     label08:
        $i9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int recoveredTypePtr>;

        $i10 = $i9 + 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int recoveredTypePtr> = $i10;

        $r13 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] recoveredTypes>;

        $i11 = lengthof $r13;

        if $i10 >= $i11 goto label11;

        $r14 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] recoveredTypes>;

        $i12 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int recoveredTypePtr>;

        r15 = $r14[$i12];

        $r16 = r15.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression allocation>;

        if $r16 != null goto label09;

        $i13 = r15.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int declarationSourceStart>;

        goto label10;

     label09:
        $r17 = r15.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression allocation>;

        $i13 = $r17.<org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression: int sourceStart>;

     label10:
        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int nextTypeStart> = $i13;

        goto label12;

     label11:
        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int nextTypeStart> = 2147483647;

     label12:
        return;

        catch org.eclipse.jdt.core.compiler.InvalidInputException from label05 to label06 with label07;
    }

    protected void markEnclosingMemberWithLocalType()
    {
        org.eclipse.jdt.internal.compiler.ast.ASTNode r3, $r7;
        org.eclipse.jdt.internal.compiler.impl.ReferenceContext $r5, $r6, $r8;
        int $i0, $i1, $i2, i3, $i4, $i5, $i7;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r2;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.eclipse.jdt.internal.compiler.parser.RecoveredElement $r1;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration $r4;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r1 == null goto label1;

        return;

     label1:
        i3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        goto label5;

     label2:
        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        r3 = $r2[i3];

        $z0 = r3 instanceof org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration;

        if $z0 != 0 goto label3;

        $z1 = r3 instanceof org.eclipse.jdt.internal.compiler.ast.FieldDeclaration;

        if $z1 != 0 goto label3;

        $z2 = r3 instanceof org.eclipse.jdt.internal.compiler.ast.TypeDeclaration;

        if $z2 == 0 goto label4;

        $r4 = (org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) r3;

        $i0 = $r4.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int declarationSourceEnd>;

        if $i0 != 0 goto label4;

     label3:
        $i4 = r3.<org.eclipse.jdt.internal.compiler.ast.ASTNode: int bits>;

        $i5 = $i4 | 2;

        r3.<org.eclipse.jdt.internal.compiler.ast.ASTNode: int bits> = $i5;

        return;

     label4:
        $i7 = (int) -1;

        i3 = i3 + $i7;

     label5:
        if i3 >= 0 goto label2;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.ReferenceContext referenceContext>;

        $z3 = $r5 instanceof org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration;

        if $z3 != 0 goto label6;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.ReferenceContext referenceContext>;

        $z4 = $r8 instanceof org.eclipse.jdt.internal.compiler.ast.TypeDeclaration;

        if $z4 == 0 goto label7;

     label6:
        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.ReferenceContext referenceContext>;

        $r7 = (org.eclipse.jdt.internal.compiler.ast.ASTNode) $r6;

        $i1 = $r7.<org.eclipse.jdt.internal.compiler.ast.ASTNode: int bits>;

        $i2 = $i1 | 2;

        $r7.<org.eclipse.jdt.internal.compiler.ast.ASTNode: int bits> = $i2;

     label7:
        return;
    }

    protected boolean moveRecoveryCheckpoint()
    {
        boolean $z0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, $i10, $i12, $i14, $i16, $i18;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r15;
        org.eclipse.jdt.core.compiler.InvalidInputException $r14;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        i9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastCheckPoint>;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r1.<org.eclipse.jdt.internal.compiler.parser.Scanner: int startPosition> = i9;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r2.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition> = i9;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r3.<org.eclipse.jdt.internal.compiler.parser.Scanner: boolean diet> = 0;

        $z0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean restartRecovery>;

        if $z0 == 0 goto label1;

        $i12 = (int) -1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastIgnoredToken> = $i12;

        $r13 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r13.<org.eclipse.jdt.internal.compiler.parser.Scanner: boolean insideRecovery> = 1;

        return 1;

     label1:
        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int nextIgnoredToken>;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastIgnoredToken> = $i0;

        $i14 = (int) -1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int nextIgnoredToken> = $i14;

     label2:
        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i1 = virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.parser.Scanner: int getNextToken()>();

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int nextIgnoredToken> = $i1;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i3 = $r5.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i2 = $r6.<org.eclipse.jdt.internal.compiler.parser.Scanner: int startPosition>;

        if $i3 != $i2 goto label5;

        $r12 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i7 = $r12.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        $i8 = $i7 + 1;

        $r12.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition> = $i8;

        $i16 = (int) -1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int nextIgnoredToken> = $i16;

     label3:
        goto label5;

     label4:
        $r14 := @caughtexception;

        $r15 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        i9 = $r15.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

     label5:
        $i10 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int nextIgnoredToken>;

        if $i10 < 0 goto label2;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int nextIgnoredToken>;

        if $i4 != 68 goto label6;

        $i6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int currentToken>;

        if $i6 != 68 goto label6;

        return 0;

     label6:
        $r7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i5 = $r7.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastCheckPoint> = $i5;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r8.<org.eclipse.jdt.internal.compiler.parser.Scanner: int startPosition> = i9;

        $r9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r9.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition> = i9;

        $r10 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i18 = (int) -1;

        $r10.<org.eclipse.jdt.internal.compiler.parser.Scanner: int commentPtr> = $i18;

        $r11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r11.<org.eclipse.jdt.internal.compiler.parser.Scanner: int foundTaskCount> = 0;

        return 1;

        catch org.eclipse.jdt.core.compiler.InvalidInputException from label2 to label3 with label4;
    }

    protected org.eclipse.jdt.internal.compiler.ast.MessageSend newMessageSend()
    {
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r3, $r4;
        org.eclipse.jdt.internal.compiler.ast.MessageSend $r0;
        int[] $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        org.eclipse.jdt.internal.compiler.parser.Parser r1;

        r1 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r0 = new org.eclipse.jdt.internal.compiler.ast.MessageSend;

        specialinvoke $r0.<org.eclipse.jdt.internal.compiler.ast.MessageSend: void <init>()>();

        $r2 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] expressionLengthStack>;

        $i0 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        $i1 = $i0 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr> = $i1;

        $i2 = $r2[$i0];

        if $i2 == 0 goto label1;

        $i3 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i4 = $i3 - $i2;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr> = $i4;

        $r4 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i5 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i6 = $i5 + 1;

        $r3 = newarray (org.eclipse.jdt.internal.compiler.ast.Expression)[$i2];

        $r0.<org.eclipse.jdt.internal.compiler.ast.MessageSend: org.eclipse.jdt.internal.compiler.ast.Expression[] arguments> = $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, $i6, $r3, 0, $i2);

     label1:
        return $r0;
    }

    protected org.eclipse.jdt.internal.compiler.ast.MessageSend newMessageSendWithTypeArguments()
    {
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r3, $r4;
        org.eclipse.jdt.internal.compiler.ast.MessageSend $r0;
        int[] $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        org.eclipse.jdt.internal.compiler.parser.Parser r1;

        r1 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r0 = new org.eclipse.jdt.internal.compiler.ast.MessageSend;

        specialinvoke $r0.<org.eclipse.jdt.internal.compiler.ast.MessageSend: void <init>()>();

        $r2 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] expressionLengthStack>;

        $i0 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        $i1 = $i0 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr> = $i1;

        $i2 = $r2[$i0];

        if $i2 == 0 goto label1;

        $i3 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i4 = $i3 - $i2;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr> = $i4;

        $r4 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i5 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i6 = $i5 + 1;

        $r3 = newarray (org.eclipse.jdt.internal.compiler.ast.Expression)[$i2];

        $r0.<org.eclipse.jdt.internal.compiler.ast.MessageSend: org.eclipse.jdt.internal.compiler.ast.Expression[] arguments> = $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, $i6, $r3, 0, $i2);

     label1:
        return $r0;
    }

    protected void optimizedConcatNodeLists()
    {
        int[] $r1;
        int $i0, $i1, $i2, $i3;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] astLengthStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr> = $i1;

        $i2 = $r1[$i1];

        $i3 = $i2 + 1;

        $r1[$i1] = $i3;

        return;
    }

    protected void parse()
    {
        byte[] $r42;
        byte $b24;
        org.eclipse.jdt.internal.compiler.CompilationResult $r8, $r21;
        org.eclipse.jdt.internal.compiler.impl.CompilerOptions $r6, $r19;
        org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration $r26;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        java.lang.String $r36, $r40;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r2, $r3, $r5, $r11, $r14, $r17, $r25, $r28, $r30, $r34, $r38;
        org.eclipse.jdt.core.compiler.InvalidInputException $r33, $r37;
        char[] $r12, $r44;
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r35, $r39;
        org.eclipse.jdt.internal.compiler.parser.RecoveryScannerData $r23, r45;
        int[] $r1, $r15, $r31, $r32, $r41, $r43;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, z12, $z13, z14, $z15;
        org.eclipse.jdt.internal.compiler.parser.NLSTag[] $r4;
        org.eclipse.jdt.internal.compiler.impl.ReferenceContext $r7, $r20;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, i18, $i19, $i20, $i21, $i22, $i23, $i25, $i26, $i27, $i28, $i30, $i32, $i34, $i36, $i37, $i38;
        org.eclipse.jdt.internal.compiler.parser.RecoveredElement $r27, $r29;
        char $c29;
        org.eclipse.jdt.internal.compiler.parser.RecoveryScanner $r9, $r10, $r13, $r16, $r18, $r22, $r46;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        z0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean diet>;

        $i0 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int getFirstToken()>();

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean hasError> = 0;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean hasReportedError> = 0;

        i18 = 731;

        $i32 = (int) -1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int stateStackTop> = $i32;

        $i1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int getFirstToken()>();

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int currentToken> = $i1;

     label01:
        $r41 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] stack>;

        $i19 = lengthof $r41;

        $i20 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int stateStackTop>;

        $i21 = $i20 + 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int stateStackTop> = $i21;

        if $i21 < $i19 goto label02;

        $r32 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] stack>;

        $i15 = $i19 + 255;

        $r31 = newarray (int)[$i15];

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] stack> = $r31;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r32, 0, $r31, 0, $i19);

     label02:
        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] stack>;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int stateStackTop>;

        $r1[$i2] = i18;

        $i3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int currentToken>;

        $i4 = staticinvoke <org.eclipse.jdt.internal.compiler.parser.Parser: int tAction(int,int)>(i18, $i3);

        i18 = $i4;

        if $i4 == 12828 goto label03;

        $z9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean restartRecovery>;

        if $z9 == 0 goto label07;

     label03:
        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i5 = $r2.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        $i14 = $i5 - 1;

        $z1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean hasReportedError>;

        if $z1 != 0 goto label04;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean hasError> = 1;

     label04:
        $i7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int currentToken>;

        $z2 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean resumeOnSyntaxError()>();

        if $z2 == 0 goto label06;

        if $i4 != 12828 goto label05;

        if $i7 == 0 goto label05;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastErrorEndPosition> = $i14;

     label05:
        i18 = 731;

        $i34 = (int) -1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int stateStackTop> = $i34;

        $i22 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int getFirstToken()>();

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int currentToken> = $i22;

        goto label01;

     label06:
        i18 = 12828;

        goto label22;

     label07:
        if $i4 > 700 goto label08;

        $i12 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int stateStackTop>;

        $i13 = $i12 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int stateStackTop> = $i13;

        goto label21;

     label08:
        if $i4 <= 12828 goto label15;

        $i10 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int currentToken>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeToken(int)>($i10);

        $r29 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r29 == null goto label09;

        z12 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean recordStringLiterals>;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean recordStringLiterals> = 0;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void recoveryTokenCheck()>();

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean recordStringLiterals> = z12;

     label09:
        $r30 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i11 = virtualinvoke $r30.<org.eclipse.jdt.internal.compiler.parser.Scanner: int getNextToken()>();

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int currentToken> = $i11;

     label10:
        goto label13;

     label11:
        $r37 := @caughtexception;

        $z11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean hasReportedError>;

        if $z11 != 0 goto label12;

        $r39 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        $r40 = virtualinvoke $r37.<org.eclipse.jdt.core.compiler.InvalidInputException: java.lang.String getMessage()>();

        virtualinvoke $r39.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void scannerError(org.eclipse.jdt.internal.compiler.parser.Parser,java.lang.String)>(r0, $r40);

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean hasReportedError> = 1;

     label12:
        $r38 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i17 = $r38.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastCheckPoint> = $i17;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int currentToken> = 0;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean restartRecovery> = 1;

     label13:
        $z13 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean statementRecoveryActivated>;

        if $z13 == 0 goto label14;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void jumpOverType()>();

     label14:
        $i36 = (int) -12828;

        i18 = $i4 + $i36;

        goto label21;

     label15:
        if $i4 >= 12827 goto label22;

        $i8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int currentToken>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeToken(int)>($i8);

        $r27 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r27 == null goto label16;

        z14 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean recordStringLiterals>;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean recordStringLiterals> = 0;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void recoveryTokenCheck()>();

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean recordStringLiterals> = z14;

     label16:
        $r28 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i9 = virtualinvoke $r28.<org.eclipse.jdt.internal.compiler.parser.Scanner: int getNextToken()>();

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int currentToken> = $i9;

     label17:
        goto label20;

     label18:
        $r33 := @caughtexception;

        $z10 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean hasReportedError>;

        if $z10 != 0 goto label19;

        $r35 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        $r36 = virtualinvoke $r33.<org.eclipse.jdt.core.compiler.InvalidInputException: java.lang.String getMessage()>();

        virtualinvoke $r35.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void scannerError(org.eclipse.jdt.internal.compiler.parser.Parser,java.lang.String)>(r0, $r36);

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean hasReportedError> = 1;

     label19:
        $r34 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i16 = $r34.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastCheckPoint> = $i16;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int currentToken> = 0;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean restartRecovery> = 1;

     label20:
        $z15 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean statementRecoveryActivated>;

        if $z15 == 0 goto label01;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void jumpOverType()>();

        goto label01;

     label21:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void consumeRule(int)>(i18);

        $i23 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int stateStackTop>;

        $r42 = <org.eclipse.jdt.internal.compiler.parser.Parser: byte[] rhs>;

        $b24 = $r42[i18];

        $i37 = (int) $b24;

        $i25 = $i37 - 1;

        $i26 = $i23 - $i25;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int stateStackTop> = $i26;

        $r43 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] stack>;

        $i27 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int stateStackTop>;

        $i28 = $r43[$i27];

        $r44 = <org.eclipse.jdt.internal.compiler.parser.Parser: char[] lhs>;

        $c29 = $r44[i18];

        $i38 = (int) $c29;

        $i30 = staticinvoke <org.eclipse.jdt.internal.compiler.parser.Parser: int ntAction(int,int)>($i28, $i38);

        i18 = $i30;

        if $i30 <= 700 goto label21;

        goto label01;

     label22:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration endParse(int)>(i18);

        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r4 = virtualinvoke $r3.<org.eclipse.jdt.internal.compiler.parser.Scanner: org.eclipse.jdt.internal.compiler.parser.NLSTag[] getNLSTags()>();

        if $r4 == null goto label23;

        $r26 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit>;

        $r26.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: org.eclipse.jdt.internal.compiler.parser.NLSTag[] nlsTags> = $r4;

     label23:
        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r5.<org.eclipse.jdt.internal.compiler.parser.Scanner: boolean checkNonExternalizedStringLiterals> = 0;

        $z3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean reportSyntaxErrorIsRequired>;

        if $z3 == 0 goto label28;

        $z4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean hasError>;

        if $z4 == 0 goto label28;

        $z5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean statementRecoveryActivated>;

        if $z5 != 0 goto label28;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.CompilerOptions options>;

        $z6 = $r6.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean performStatementsRecovery>;

        if $z6 != 0 goto label24;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void reportSyntaxErrors(boolean,int)>(z0, $i0);

        goto label28;

     label24:
        $r7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.ReferenceContext referenceContext>;

        $r8 = interfaceinvoke $r7.<org.eclipse.jdt.internal.compiler.impl.ReferenceContext: org.eclipse.jdt.internal.compiler.CompilationResult compilationResult()>();

        r45 = $r8.<org.eclipse.jdt.internal.compiler.CompilationResult: org.eclipse.jdt.internal.compiler.parser.RecoveryScannerData recoveryScannerData>;

        $r9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveryScanner recoveryScanner>;

        if $r9 != null goto label25;

        $r46 = new org.eclipse.jdt.internal.compiler.parser.RecoveryScanner;

        $r25 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        specialinvoke $r46.<org.eclipse.jdt.internal.compiler.parser.RecoveryScanner: void <init>(org.eclipse.jdt.internal.compiler.parser.Scanner,org.eclipse.jdt.internal.compiler.parser.RecoveryScannerData)>($r25, r45);

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveryScanner recoveryScanner> = $r46;

        goto label26;

     label25:
        $r10 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveryScanner recoveryScanner>;

        virtualinvoke $r10.<org.eclipse.jdt.internal.compiler.parser.RecoveryScanner: void setData(org.eclipse.jdt.internal.compiler.parser.RecoveryScannerData)>(r45);

     label26:
        $r13 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveryScanner recoveryScanner>;

        $r11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r12 = $r11.<org.eclipse.jdt.internal.compiler.parser.Scanner: char[] source>;

        virtualinvoke $r13.<org.eclipse.jdt.internal.compiler.parser.RecoveryScanner: void setSource(char[])>($r12);

        $r16 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveryScanner recoveryScanner>;

        $r14 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r15 = $r14.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] lineEnds>;

        $r16.<org.eclipse.jdt.internal.compiler.parser.RecoveryScanner: int[] lineEnds> = $r15;

        $r18 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveryScanner recoveryScanner>;

        $r17 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i6 = $r17.<org.eclipse.jdt.internal.compiler.parser.Scanner: int linePtr>;

        $r18.<org.eclipse.jdt.internal.compiler.parser.RecoveryScanner: int linePtr> = $i6;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void reportSyntaxErrors(boolean,int)>(z0, $i0);

        if r45 != null goto label27;

        $r20 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.ReferenceContext referenceContext>;

        $r21 = interfaceinvoke $r20.<org.eclipse.jdt.internal.compiler.impl.ReferenceContext: org.eclipse.jdt.internal.compiler.CompilationResult compilationResult()>();

        $r22 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveryScanner recoveryScanner>;

        $r23 = virtualinvoke $r22.<org.eclipse.jdt.internal.compiler.parser.RecoveryScanner: org.eclipse.jdt.internal.compiler.parser.RecoveryScannerData getData()>();

        $r21.<org.eclipse.jdt.internal.compiler.CompilationResult: org.eclipse.jdt.internal.compiler.parser.RecoveryScannerData recoveryScannerData> = $r23;

     label27:
        $z7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean methodRecoveryActivated>;

        if $z7 == 0 goto label28;

        $r19 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.CompilerOptions options>;

        $z8 = $r19.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean performStatementsRecovery>;

        if $z8 == 0 goto label28;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean methodRecoveryActivated> = 0;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void recoverStatements()>();

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean methodRecoveryActivated> = 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastAct> = 12828;

     label28:
        return;

        catch org.eclipse.jdt.core.compiler.InvalidInputException from label09 to label10 with label11;
        catch org.eclipse.jdt.core.compiler.InvalidInputException from label16 to label17 with label18;
    }

    public void parse(org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration, org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration, boolean)
    {
        org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration r3;
        org.eclipse.jdt.internal.compiler.impl.CompilerOptions $r1, $r7, $r26, $r29;
        org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration r4;
        java.lang.Throwable $r24;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r13, $r16, $r19, $r20;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r5, $r23;
        org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall $r9, $r10, $r11, $r17, $r22, $r30;
        org.eclipse.jdt.internal.compiler.ast.Statement[] $r15, $r18;
        int[] $r2, $r6, $r8, $r12, $r25, $r28;
        boolean z0, $z1, z2, $z3, $z4, $z5, $z6, $z7;
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r14, $r21;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i43;
        org.eclipse.jdt.internal.compiler.problem.AbortCompilation $r27;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        r3 := @parameter0: org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration;

        r4 := @parameter1: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration;

        z2 := @parameter2: boolean;

        z0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean methodRecoveryActivated>;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.CompilerOptions options>;

        $z1 = $r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean performMethodsFullRecovery>;

        if $z1 == 0 goto label01;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean methodRecoveryActivated> = 1;

     label01:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void initialize()>();

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void goForBlockStatementsopt()>();

        if z2 == 0 goto label02;

        $r23 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r23.<org.eclipse.jdt.internal.compiler.parser.Scanner: boolean recordLineSeparator> = 1;

     label02:
        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] nestedMethod>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int nestedType>;

        $i1 = $r2[$i0];

        $i2 = $i1 + 1;

        $r2[$i0] = $i2;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnRealBlockStack(int)>(0);

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.ReferenceContext referenceContext> = r3;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit> = r4;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i4 = r3.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: int bodyStart>;

        $i3 = r3.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: int bodyEnd>;

        virtualinvoke $r5.<org.eclipse.jdt.internal.compiler.parser.Scanner: void resetTo(int,int)>($i4, $i3);

     label03:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void parse()>();

     label04:
        goto label09;

     label05:
        $r27 := @caughtexception;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastAct> = 12828;

     label06:
        $r28 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] nestedMethod>;

        $i36 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int nestedType>;

        $i37 = $r28[$i36];

        $i38 = $i37 - 1;

        $r28[$i36] = $i38;

        $r29 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.CompilerOptions options>;

        $z7 = $r29.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean performStatementsRecovery>;

        if $z7 == 0 goto label10;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean methodRecoveryActivated> = z0;

        goto label10;

     label07:
        $r24 := @caughtexception;

        $r25 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] nestedMethod>;

        $i33 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int nestedType>;

        $i34 = $r25[$i33];

        $i35 = $i34 - 1;

        $r25[$i33] = $i35;

        $r26 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.CompilerOptions options>;

        $z6 = $r26.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean performStatementsRecovery>;

        if $z6 == 0 goto label08;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean methodRecoveryActivated> = z0;

     label08:
        throw $r24;

     label09:
        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] nestedMethod>;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int nestedType>;

        $i6 = $r6[$i5];

        $i7 = $i6 - 1;

        $r6[$i5] = $i7;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.CompilerOptions options>;

        $z3 = $r7.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean performStatementsRecovery>;

        if $z3 == 0 goto label10;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean methodRecoveryActivated> = z0;

     label10:
        $i39 = r3.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: int declarationSourceEnd>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void checkNonNLSAfterBodyEnd(int)>($i39);

        $i40 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastAct>;

        if $i40 != 12828 goto label11;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void initialize()>();

        return;

     label11:
        $r8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] realBlockStack>;

        $i8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int realBlockPtr>;

        $i9 = $i8 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int realBlockPtr> = $i9;

        $i10 = $r8[$i8];

        r3.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: int explicitDeclarations> = $i10;

        $i11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr>;

        $i43 = (int) -1;

        if $i11 <= $i43 goto label13;

        $r12 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] astLengthStack>;

        $i18 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr>;

        $i19 = $i18 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr> = $i19;

        $i20 = $r12[$i18];

        if $i20 == 0 goto label13;

        $i21 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i22 = $i21 - $i20;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr> = $i22;

        $r13 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i23 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i24 = $i23 + 1;

        $r14 = $r13[$i24];

        $z5 = $r14 instanceof org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall;

        if $z5 == 0 goto label12;

        $r19 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i27 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i29 = $i27 + 2;

        $i28 = $i20 - 1;

        $r18 = newarray (org.eclipse.jdt.internal.compiler.ast.Statement)[$i28];

        r3.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: org.eclipse.jdt.internal.compiler.ast.Statement[] statements> = $r18;

        $i30 = $i20 - 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r19, $i29, $r18, 0, $i30);

        $r20 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i31 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i32 = $i31 + 1;

        $r21 = $r20[$i32];

        $r22 = (org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall) $r21;

        r3.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall constructorCall> = $r22;

        goto label14;

     label12:
        $r16 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i25 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i26 = $i25 + 1;

        $r15 = newarray (org.eclipse.jdt.internal.compiler.ast.Statement)[$i20];

        r3.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: org.eclipse.jdt.internal.compiler.ast.Statement[] statements> = $r15;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r16, $i26, $r15, 0, $i20);

        $r17 = staticinvoke <org.eclipse.jdt.internal.compiler.ast.SuperReference: org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall implicitSuperConstructorCall()>();

        r3.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall constructorCall> = $r17;

        goto label14;

     label13:
        $r9 = staticinvoke <org.eclipse.jdt.internal.compiler.ast.SuperReference: org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall implicitSuperConstructorCall()>();

        r3.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall constructorCall> = $r9;

        $i13 = r3.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: int bodyStart>;

        $i12 = r3.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: int bodyEnd>;

        $z4 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean containsComment(int,int)>($i13, $i12);

        if $z4 != 0 goto label14;

        $i16 = r3.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: int bits>;

        $i17 = $i16 | 8;

        r3.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: int bits> = $i17;

     label14:
        $r30 = r3.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall constructorCall>;

        $i41 = $r30.<org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall: int sourceEnd>;

        if $i41 != 0 goto label15;

        $r10 = r3.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall constructorCall>;

        $i14 = r3.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: int sourceEnd>;

        $r10.<org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall: int sourceEnd> = $i14;

        $r11 = r3.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall constructorCall>;

        $i15 = r3.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: int sourceStart>;

        $r11.<org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall: int sourceStart> = $i15;

     label15:
        return;

        catch org.eclipse.jdt.internal.compiler.problem.AbortCompilation from label03 to label04 with label05;
        catch java.lang.Throwable from label03 to label06 with label07;
    }

    public void parse(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration, org.eclipse.jdt.internal.compiler.ast.TypeDeclaration, org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration, char[])
    {
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r9;
        org.eclipse.jdt.internal.compiler.ast.Expression $r10;
        int[] $r1, $r7, $r12, $r14;
        org.eclipse.jdt.internal.compiler.ast.FieldDeclaration r8;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration r2;
        org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration r3;
        java.lang.Throwable $r11;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.problem.AbortCompilation $r13;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r5, $r6;
        char[] r4;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        r8 := @parameter0: org.eclipse.jdt.internal.compiler.ast.FieldDeclaration;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration;

        r3 := @parameter2: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration;

        r4 := @parameter3: char[];

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void initialize()>();

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void goForExpression()>();

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] nestedMethod>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int nestedType>;

        $i1 = $r1[$i0];

        $i2 = $i1 + 1;

        $r1[$i0] = $i2;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.ReferenceContext referenceContext> = r2;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit> = r3;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        virtualinvoke $r5.<org.eclipse.jdt.internal.compiler.parser.Scanner: void setSource(char[])>(r4);

        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i3 = lengthof r4;

        $i4 = $i3 - 1;

        virtualinvoke $r6.<org.eclipse.jdt.internal.compiler.parser.Scanner: void resetTo(int,int)>(0, $i4);

     label1:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void parse()>();

     label2:
        goto label6;

     label3:
        $r13 := @caughtexception;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastAct> = 12828;

     label4:
        $r14 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] nestedMethod>;

        $i17 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int nestedType>;

        $i18 = $r14[$i17];

        $i19 = $i18 - 1;

        $r14[$i17] = $i19;

        goto label7;

     label5:
        $r11 := @caughtexception;

        $r12 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] nestedMethod>;

        $i14 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int nestedType>;

        $i15 = $r12[$i14];

        $i16 = $i15 - 1;

        $r12[$i14] = $i16;

        throw $r11;

     label6:
        $r7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] nestedMethod>;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int nestedType>;

        $i6 = $r7[$i5];

        $i7 = $i6 - 1;

        $r7[$i5] = $i7;

     label7:
        $i8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastAct>;

        if $i8 != 12828 goto label8;

        return;

     label8:
        $r9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r10 = $r9[$i9];

        r8.<org.eclipse.jdt.internal.compiler.ast.FieldDeclaration: org.eclipse.jdt.internal.compiler.ast.Expression initialization> = $r10;

        $i10 = r2.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits>;

        $i11 = $i10 & 2;

        if $i11 == 0 goto label9;

        $i12 = r8.<org.eclipse.jdt.internal.compiler.ast.FieldDeclaration: int bits>;

        $i13 = $i12 | 2;

        r8.<org.eclipse.jdt.internal.compiler.ast.FieldDeclaration: int bits> = $i13;

     label9:
        return;

        catch org.eclipse.jdt.internal.compiler.problem.AbortCompilation from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label4 with label5;
    }

    public org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration parse(org.eclipse.jdt.internal.compiler.env.ICompilationUnit, org.eclipse.jdt.internal.compiler.CompilationResult)
    {
        int $i1, $i3;
        org.eclipse.jdt.internal.compiler.CompilationResult r2;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.env.ICompilationUnit r1;
        org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration $r3;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.env.ICompilationUnit;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.CompilationResult;

        $i1 = (int) -1;

        $i3 = (int) -1;

        $r3 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration parse(org.eclipse.jdt.internal.compiler.env.ICompilationUnit,org.eclipse.jdt.internal.compiler.CompilationResult,int,int)>(r1, r2, $i1, $i3);

        return $r3;
    }

    public org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration parse(org.eclipse.jdt.internal.compiler.env.ICompilationUnit, org.eclipse.jdt.internal.compiler.CompilationResult, int, int)
    {
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r3, $r20;
        org.eclipse.jdt.internal.compiler.ReadManager $r4, $r17;
        boolean $z0, $z1, $z2, $z3;
        org.eclipse.jdt.internal.compiler.parser.JavadocParser $r10, $r11, $r12, $r14;
        org.eclipse.jdt.internal.compiler.CompilationResult r2;
        org.eclipse.jdt.internal.compiler.impl.CompilerOptions $r21;
        org.eclipse.jdt.internal.compiler.env.ICompilationUnit r5;
        org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration $r9, $r22, r25, r26, $r27;
        java.lang.Throwable $r18;
        org.eclipse.jdt.internal.compiler.problem.AbortCompilationUnit $r19;
        int $i0, $i1, i2, $i3, $i4, i5, $i6, $i7, $i9, $i11;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r6, $r7, $r13, $r15, $r16;
        char[] $r8, $r23, r24;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        r5 := @parameter0: org.eclipse.jdt.internal.compiler.env.ICompilationUnit;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.CompilationResult;

        i5 := @parameter2: int;

        i2 := @parameter3: int;

     label01:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void initialize(boolean)>(1);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void goForCompilationUnit()>();

        $r27 = new org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter>;

        specialinvoke $r27.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: void <init>(org.eclipse.jdt.internal.compiler.problem.ProblemReporter,org.eclipse.jdt.internal.compiler.CompilationResult,int)>($r3, r2, 0);

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit> = $r27;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.ReferenceContext referenceContext> = $r27;

     label02:
        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ReadManager readManager>;

        if $r4 == null goto label03;

        $r17 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ReadManager readManager>;

        $r23 = virtualinvoke $r17.<org.eclipse.jdt.internal.compiler.ReadManager: char[] getContents(org.eclipse.jdt.internal.compiler.env.ICompilationUnit)>(r5);

        goto label04;

     label03:
        $r23 = interfaceinvoke r5.<org.eclipse.jdt.internal.compiler.env.ICompilationUnit: char[] getContents()>();

     label04:
        r24 = $r23;

     label05:
        goto label07;

     label06:
        $r19 := @caughtexception;

        $r20 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        $r22 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit>;

        $r21 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.CompilerOptions options>;

        $z3 = $r21.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean verbose>;

        virtualinvoke $r20.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void cannotReadSource(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,org.eclipse.jdt.internal.compiler.problem.AbortCompilationUnit,boolean)>($r22, $r19, $z3);

        r24 = <org.eclipse.jdt.core.compiler.CharOperation: char[] NO_CHAR>;

     label07:
        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        virtualinvoke $r6.<org.eclipse.jdt.internal.compiler.parser.Scanner: void setSource(char[])>(r24);

        $r9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit>;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r8 = $r7.<org.eclipse.jdt.internal.compiler.parser.Scanner: char[] source>;

        $i0 = lengthof $r8;

        $i1 = $i0 - 1;

        $r9.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: int sourceEnd> = $i1;

        $i9 = (int) -1;

        if i2 == $i9 goto label08;

        $r16 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        virtualinvoke $r16.<org.eclipse.jdt.internal.compiler.parser.Scanner: void resetTo(int,int)>(i5, i2);

     label08:
        $r10 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.JavadocParser javadocParser>;

        if $r10 == null goto label09;

        $r11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.JavadocParser javadocParser>;

        $z1 = $r11.<org.eclipse.jdt.internal.compiler.parser.JavadocParser: boolean checkDocComment>;

        if $z1 == 0 goto label09;

        $r12 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.JavadocParser javadocParser>;

        $r13 = $r12.<org.eclipse.jdt.internal.compiler.parser.JavadocParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        virtualinvoke $r13.<org.eclipse.jdt.internal.compiler.parser.Scanner: void setSource(char[])>(r24);

        $i11 = (int) -1;

        if i2 == $i11 goto label09;

        $r14 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.JavadocParser javadocParser>;

        $r15 = $r14.<org.eclipse.jdt.internal.compiler.parser.JavadocParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        virtualinvoke $r15.<org.eclipse.jdt.internal.compiler.parser.Scanner: void resetTo(int,int)>(i5, i2);

     label09:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void parse()>();

        goto label12;

     label10:
        $r18 := @caughtexception;

        r25 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit>;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit> = null;

        $z2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean diet>;

        if $z2 != 0 goto label11;

        $i6 = r25.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: int bits>;

        $i7 = $i6 | 16;

        r25.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: int bits> = $i7;

     label11:
        throw $r18;

     label12:
        r26 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit>;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit> = null;

        $z0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean diet>;

        if $z0 != 0 goto label13;

        $i3 = r26.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: int bits>;

        $i4 = $i3 | 16;

        r26.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: int bits> = $i4;

     label13:
        return r26;

        catch org.eclipse.jdt.internal.compiler.problem.AbortCompilationUnit from label02 to label05 with label06;
        catch java.lang.Throwable from label01 to label10 with label10;
    }

    public void parse(org.eclipse.jdt.internal.compiler.ast.Initializer, org.eclipse.jdt.internal.compiler.ast.TypeDeclaration, org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)
    {
        org.eclipse.jdt.internal.compiler.impl.CompilerOptions $r1, $r8, $r20, $r23;
        org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration r4;
        java.lang.Throwable $r18;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r15;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r6;
        org.eclipse.jdt.internal.compiler.ast.Statement[] $r16;
        org.eclipse.jdt.internal.compiler.ast.Block $r9, $r11, $r12, $r13, $r17;
        int[] $r2, $r7, $r10, $r14, $r19, $r22;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i35;
        org.eclipse.jdt.internal.compiler.problem.AbortCompilation $r21;
        org.eclipse.jdt.internal.compiler.ast.Initializer r5;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        r5 := @parameter0: org.eclipse.jdt.internal.compiler.ast.Initializer;

        r3 := @parameter1: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration;

        r4 := @parameter2: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration;

        z0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean methodRecoveryActivated>;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.CompilerOptions options>;

        $z1 = $r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean performMethodsFullRecovery>;

        if $z1 == 0 goto label01;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean methodRecoveryActivated> = 1;

     label01:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void initialize()>();

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void goForBlockStatementsopt()>();

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] nestedMethod>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int nestedType>;

        $i1 = $r2[$i0];

        $i2 = $i1 + 1;

        $r2[$i0] = $i2;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnRealBlockStack(int)>(0);

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.ReferenceContext referenceContext> = r3;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit> = r4;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i4 = r5.<org.eclipse.jdt.internal.compiler.ast.Initializer: int bodyStart>;

        $i3 = r5.<org.eclipse.jdt.internal.compiler.ast.Initializer: int bodyEnd>;

        virtualinvoke $r6.<org.eclipse.jdt.internal.compiler.parser.Scanner: void resetTo(int,int)>($i4, $i3);

     label02:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void parse()>();

     label03:
        goto label08;

     label04:
        $r21 := @caughtexception;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastAct> = 12828;

     label05:
        $r22 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] nestedMethod>;

        $i27 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int nestedType>;

        $i28 = $r22[$i27];

        $i29 = $i28 - 1;

        $r22[$i27] = $i29;

        $r23 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.CompilerOptions options>;

        $z5 = $r23.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean performStatementsRecovery>;

        if $z5 == 0 goto label09;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean methodRecoveryActivated> = z0;

        goto label09;

     label06:
        $r18 := @caughtexception;

        $r19 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] nestedMethod>;

        $i24 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int nestedType>;

        $i25 = $r19[$i24];

        $i26 = $i25 - 1;

        $r19[$i24] = $i26;

        $r20 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.CompilerOptions options>;

        $z4 = $r20.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean performStatementsRecovery>;

        if $z4 == 0 goto label07;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean methodRecoveryActivated> = z0;

     label07:
        throw $r18;

     label08:
        $r7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] nestedMethod>;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int nestedType>;

        $i6 = $r7[$i5];

        $i7 = $i6 - 1;

        $r7[$i5] = $i7;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.CompilerOptions options>;

        $z2 = $r8.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean performStatementsRecovery>;

        if $z2 == 0 goto label09;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean methodRecoveryActivated> = z0;

     label09:
        $i30 = r5.<org.eclipse.jdt.internal.compiler.ast.Initializer: int declarationSourceEnd>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void checkNonNLSAfterBodyEnd(int)>($i30);

        $i31 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastAct>;

        if $i31 != 12828 goto label10;

        return;

     label10:
        $r9 = r5.<org.eclipse.jdt.internal.compiler.ast.Initializer: org.eclipse.jdt.internal.compiler.ast.Block block>;

        $r10 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] realBlockStack>;

        $i8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int realBlockPtr>;

        $i9 = $i8 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int realBlockPtr> = $i9;

        $i10 = $r10[$i8];

        $r9.<org.eclipse.jdt.internal.compiler.ast.Block: int explicitDeclarations> = $i10;

        $i11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr>;

        $i35 = (int) -1;

        if $i11 <= $i35 goto label11;

        $r14 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] astLengthStack>;

        $i18 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr>;

        $i19 = $i18 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr> = $i19;

        $i20 = $r14[$i18];

        if $i20 <= 0 goto label11;

        $r15 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i21 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i22 = $i21 - $i20;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr> = $i22;

        $i23 = $i22 + 1;

        $r17 = r5.<org.eclipse.jdt.internal.compiler.ast.Initializer: org.eclipse.jdt.internal.compiler.ast.Block block>;

        $r16 = newarray (org.eclipse.jdt.internal.compiler.ast.Statement)[$i20];

        $r17.<org.eclipse.jdt.internal.compiler.ast.Block: org.eclipse.jdt.internal.compiler.ast.Statement[] statements> = $r16;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r15, $i23, $r16, 0, $i20);

        goto label12;

     label11:
        $r11 = r5.<org.eclipse.jdt.internal.compiler.ast.Initializer: org.eclipse.jdt.internal.compiler.ast.Block block>;

        $i13 = $r11.<org.eclipse.jdt.internal.compiler.ast.Block: int sourceStart>;

        $r12 = r5.<org.eclipse.jdt.internal.compiler.ast.Initializer: org.eclipse.jdt.internal.compiler.ast.Block block>;

        $i12 = $r12.<org.eclipse.jdt.internal.compiler.ast.Block: int sourceEnd>;

        $z3 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean containsComment(int,int)>($i13, $i12);

        if $z3 != 0 goto label12;

        $r13 = r5.<org.eclipse.jdt.internal.compiler.ast.Initializer: org.eclipse.jdt.internal.compiler.ast.Block block>;

        $i16 = $r13.<org.eclipse.jdt.internal.compiler.ast.Block: int bits>;

        $i17 = $i16 | 8;

        $r13.<org.eclipse.jdt.internal.compiler.ast.Block: int bits> = $i17;

     label12:
        $i32 = r3.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int bits>;

        $i33 = $i32 & 2;

        if $i33 == 0 goto label13;

        $i14 = r5.<org.eclipse.jdt.internal.compiler.ast.Initializer: int bits>;

        $i15 = $i14 | 2;

        r5.<org.eclipse.jdt.internal.compiler.ast.Initializer: int bits> = $i15;

     label13:
        return;

        catch org.eclipse.jdt.internal.compiler.problem.AbortCompilation from label02 to label03 with label04;
        catch java.lang.Throwable from label02 to label05 with label06;
    }

    public void parse(org.eclipse.jdt.internal.compiler.ast.MethodDeclaration, org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)
    {
        org.eclipse.jdt.internal.compiler.ast.Statement[] $r11;
        int[] $r3, $r6, $r8, $r9, $r13, $r16;
        boolean $z0, $z1, z2, $z3, $z4, $z5, $z6, $z7;
        org.eclipse.jdt.internal.compiler.impl.CompilerOptions $r2, $r7, $r14, $r17;
        org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration r4;
        java.lang.Throwable $r12;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i34;
        org.eclipse.jdt.internal.compiler.ast.MethodDeclaration r0;
        org.eclipse.jdt.internal.compiler.parser.Parser r1;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r10;
        org.eclipse.jdt.internal.compiler.problem.AbortCompilation $r15;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r5;

        r1 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.ast.MethodDeclaration;

        r4 := @parameter1: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration;

        $z0 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: boolean isAbstract()>();

        if $z0 == 0 goto label01;

        return;

     label01:
        $z1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: boolean isNative()>();

        if $z1 == 0 goto label02;

        return;

     label02:
        $i0 = r0.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: int modifiers>;

        $i1 = $i0 & 16777216;

        if $i1 == 0 goto label03;

        return;

     label03:
        z2 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean methodRecoveryActivated>;

        $r2 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.CompilerOptions options>;

        $z3 = $r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean performMethodsFullRecovery>;

        if $z3 == 0 goto label04;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean methodRecoveryActivated> = 1;

        $i24 = r0.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: int sourceEnd>;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int rParenPos> = $i24;

     label04:
        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.parser.Parser: void initialize()>();

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.parser.Parser: void goForBlockStatementsopt()>();

        $r3 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] nestedMethod>;

        $i2 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int nestedType>;

        $i3 = $r3[$i2];

        $i4 = $i3 + 1;

        $r3[$i2] = $i4;

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnRealBlockStack(int)>(0);

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.ReferenceContext referenceContext> = r0;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit> = r4;

        $r5 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i6 = r0.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: int bodyStart>;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: int bodyEnd>;

        virtualinvoke $r5.<org.eclipse.jdt.internal.compiler.parser.Scanner: void resetTo(int,int)>($i6, $i5);

     label05:
        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.parser.Parser: void parse()>();

     label06:
        goto label11;

     label07:
        $r15 := @caughtexception;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastAct> = 12828;

     label08:
        $r16 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] nestedMethod>;

        $i28 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int nestedType>;

        $i29 = $r16[$i28];

        $i30 = $i29 - 1;

        $r16[$i28] = $i30;

        $r17 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.CompilerOptions options>;

        $z7 = $r17.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean performStatementsRecovery>;

        if $z7 == 0 goto label12;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean methodRecoveryActivated> = z2;

        goto label12;

     label09:
        $r12 := @caughtexception;

        $r13 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] nestedMethod>;

        $i25 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int nestedType>;

        $i26 = $r13[$i25];

        $i27 = $i26 - 1;

        $r13[$i25] = $i27;

        $r14 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.CompilerOptions options>;

        $z6 = $r14.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean performStatementsRecovery>;

        if $z6 == 0 goto label10;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean methodRecoveryActivated> = z2;

     label10:
        throw $r12;

     label11:
        $r6 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] nestedMethod>;

        $i7 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int nestedType>;

        $i8 = $r6[$i7];

        $i9 = $i8 - 1;

        $r6[$i7] = $i9;

        $r7 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.CompilerOptions options>;

        $z4 = $r7.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean performStatementsRecovery>;

        if $z4 == 0 goto label12;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean methodRecoveryActivated> = z2;

     label12:
        $i31 = r0.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: int declarationSourceEnd>;

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.parser.Parser: void checkNonNLSAfterBodyEnd(int)>($i31);

        $i32 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastAct>;

        if $i32 != 12828 goto label13;

        return;

     label13:
        $r8 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] realBlockStack>;

        $i10 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int realBlockPtr>;

        $i11 = $i10 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int realBlockPtr> = $i11;

        $i12 = $r8[$i10];

        r0.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: int explicitDeclarations> = $i12;

        $i13 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr>;

        $i34 = (int) -1;

        if $i13 <= $i34 goto label14;

        $r9 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] astLengthStack>;

        $i18 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr>;

        $i19 = $i18 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr> = $i19;

        $i20 = $r9[$i18];

        if $i20 == 0 goto label14;

        $r10 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i21 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i22 = $i21 - $i20;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr> = $i22;

        $i23 = $i22 + 1;

        $r11 = newarray (org.eclipse.jdt.internal.compiler.ast.Statement)[$i20];

        r0.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: org.eclipse.jdt.internal.compiler.ast.Statement[] statements> = $r11;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r10, $i23, $r11, 0, $i20);

        goto label15;

     label14:
        $i15 = r0.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: int bodyStart>;

        $i14 = r0.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: int bodyEnd>;

        $z5 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean containsComment(int,int)>($i15, $i14);

        if $z5 != 0 goto label15;

        $i16 = r0.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: int bits>;

        $i17 = $i16 | 8;

        r0.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: int bits> = $i17;

     label15:
        return;

        catch org.eclipse.jdt.internal.compiler.problem.AbortCompilation from label05 to label06 with label07;
        catch java.lang.Throwable from label05 to label08 with label09;
    }

    public org.eclipse.jdt.internal.compiler.ast.ASTNode[] parseClassBodyDeclarations(char[], int, int, org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)
    {
        int[] $r6;
        boolean $z0;
        org.eclipse.jdt.internal.compiler.parser.JavadocParser $r4, $r9, $r10, $r12;
        org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration r5;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i16;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] r7, $r8;
        org.eclipse.jdt.internal.compiler.problem.AbortCompilation $r14;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r2, $r3, $r11, $r13;
        char[] r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r5 := @parameter3: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void initialize()>();

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void goForClassBodyDeclarations()>();

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        virtualinvoke $r2.<org.eclipse.jdt.internal.compiler.parser.Scanner: void setSource(char[])>(r1);

        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i2 = i0 + i1;

        $i3 = $i2 - 1;

        virtualinvoke $r3.<org.eclipse.jdt.internal.compiler.parser.Scanner: void resetTo(int,int)>(i0, $i3);

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.JavadocParser javadocParser>;

        if $r4 == null goto label1;

        $r9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.JavadocParser javadocParser>;

        $z0 = $r9.<org.eclipse.jdt.internal.compiler.parser.JavadocParser: boolean checkDocComment>;

        if $z0 == 0 goto label1;

        $r10 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.JavadocParser javadocParser>;

        $r11 = $r10.<org.eclipse.jdt.internal.compiler.parser.JavadocParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        virtualinvoke $r11.<org.eclipse.jdt.internal.compiler.parser.Scanner: void setSource(char[])>(r1);

        $r12 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.JavadocParser javadocParser>;

        $r13 = $r12.<org.eclipse.jdt.internal.compiler.parser.JavadocParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i13 = i0 + i1;

        $i14 = $i13 - 1;

        virtualinvoke $r13.<org.eclipse.jdt.internal.compiler.parser.Scanner: void resetTo(int,int)>(i0, $i14);

     label1:
        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int nestedType> = 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.ReferenceContext referenceContext> = r5;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit> = r5;

     label2:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void parse()>();

     label3:
        goto label5;

     label4:
        $r14 := @caughtexception;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastAct> = 12828;

     label5:
        $i4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastAct>;

        if $i4 != 12828 goto label6;

        return null;

     label6:
        $i5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr>;

        $i16 = (int) -1;

        if $i5 <= $i16 goto label7;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] astLengthStack>;

        $i6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr>;

        $i7 = $i6 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr> = $i7;

        $i8 = $r6[$i6];

        if $i8 == 0 goto label7;

        r7 = newarray (org.eclipse.jdt.internal.compiler.ast.ASTNode)[$i8];

        $i9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i10 = $i9 - $i8;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr> = $i10;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i12 = $i11 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, $i12, r7, 0, $i8);

        return r7;

     label7:
        return null;

        catch org.eclipse.jdt.internal.compiler.problem.AbortCompilation from label2 to label3 with label4;
    }

    public org.eclipse.jdt.internal.compiler.ast.Expression parseExpression(char[], int, int, org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)
    {
        java.lang.Throwable $r9;
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r7;
        org.eclipse.jdt.internal.compiler.ast.Expression $r8;
        int[] $r1, $r6, $r10, $r12;
        int $i0, $i1, $i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.problem.AbortCompilation $r11;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r4, $r5;
        char[] r3;
        org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration r2;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        r3 := @parameter0: char[];

        i3 := @parameter1: int;

        i4 := @parameter2: int;

        r2 := @parameter3: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void initialize()>();

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void goForExpression()>();

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] nestedMethod>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int nestedType>;

        $i1 = $r1[$i0];

        $i2 = $i1 + 1;

        $r1[$i0] = $i2;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.ReferenceContext referenceContext> = r2;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit> = r2;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.parser.Scanner: void setSource(char[])>(r3);

        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i5 = i3 + i4;

        $i6 = $i5 - 1;

        virtualinvoke $r5.<org.eclipse.jdt.internal.compiler.parser.Scanner: void resetTo(int,int)>(i3, $i6);

     label1:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void parse()>();

     label2:
        goto label6;

     label3:
        $r11 := @caughtexception;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastAct> = 12828;

     label4:
        $r12 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] nestedMethod>;

        $i15 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int nestedType>;

        $i16 = $r12[$i15];

        $i17 = $i16 - 1;

        $r12[$i15] = $i17;

        goto label7;

     label5:
        $r9 := @caughtexception;

        $r10 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] nestedMethod>;

        $i12 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int nestedType>;

        $i13 = $r10[$i12];

        $i14 = $i13 - 1;

        $r10[$i12] = $i14;

        throw $r9;

     label6:
        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] nestedMethod>;

        $i7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int nestedType>;

        $i8 = $r6[$i7];

        $i9 = $i8 - 1;

        $r6[$i7] = $i9;

     label7:
        $i10 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastAct>;

        if $i10 != 12828 goto label8;

        return null;

     label8:
        $r7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r8 = $r7[$i11];

        return $r8;

        catch org.eclipse.jdt.internal.compiler.problem.AbortCompilation from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label4 with label5;
    }

    public org.eclipse.jdt.internal.compiler.ast.Expression parseMemberValue(char[], int, int, org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)
    {
        java.lang.Throwable $r9;
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r7;
        org.eclipse.jdt.internal.compiler.ast.Expression $r8;
        int[] $r1, $r6, $r10, $r12;
        int $i0, $i1, $i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.problem.AbortCompilation $r11;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r4, $r5;
        char[] r3;
        org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration r2;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        r3 := @parameter0: char[];

        i3 := @parameter1: int;

        i4 := @parameter2: int;

        r2 := @parameter3: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void initialize()>();

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void goForMemberValue()>();

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] nestedMethod>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int nestedType>;

        $i1 = $r1[$i0];

        $i2 = $i1 + 1;

        $r1[$i0] = $i2;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.ReferenceContext referenceContext> = r2;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit> = r2;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.parser.Scanner: void setSource(char[])>(r3);

        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i5 = i3 + i4;

        $i6 = $i5 - 1;

        virtualinvoke $r5.<org.eclipse.jdt.internal.compiler.parser.Scanner: void resetTo(int,int)>(i3, $i6);

     label1:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void parse()>();

     label2:
        goto label6;

     label3:
        $r11 := @caughtexception;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastAct> = 12828;

     label4:
        $r12 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] nestedMethod>;

        $i15 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int nestedType>;

        $i16 = $r12[$i15];

        $i17 = $i16 - 1;

        $r12[$i15] = $i17;

        goto label7;

     label5:
        $r9 := @caughtexception;

        $r10 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] nestedMethod>;

        $i12 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int nestedType>;

        $i13 = $r10[$i12];

        $i14 = $i13 - 1;

        $r10[$i12] = $i14;

        throw $r9;

     label6:
        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] nestedMethod>;

        $i7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int nestedType>;

        $i8 = $r6[$i7];

        $i9 = $i8 - 1;

        $r6[$i7] = $i9;

     label7:
        $i10 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastAct>;

        if $i10 != 12828 goto label8;

        return null;

     label8:
        $r7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r8 = $r7[$i11];

        return $r8;

        catch org.eclipse.jdt.internal.compiler.problem.AbortCompilation from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label4 with label5;
    }

    public void parseStatements(org.eclipse.jdt.internal.compiler.impl.ReferenceContext, int, int, org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[], org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)
    {
        int[] $r1, $r5, $r15, $r17;
        boolean z0;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration $r7, $r10, $r13;
        org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression $r8, $r11;
        org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration r3;
        java.lang.Throwable $r14;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] r4, $r6, $r9, $r12;
        org.eclipse.jdt.internal.compiler.impl.ReferenceContext r2;
        int $i0, $i1, $i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i18, $i20, $i22;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.problem.AbortCompilation $r16;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r18, $r19;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        r2 := @parameter0: org.eclipse.jdt.internal.compiler.impl.ReferenceContext;

        i3 := @parameter1: int;

        i4 := @parameter2: int;

        r4 := @parameter3: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[];

        r3 := @parameter4: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration;

        z0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean statementRecoveryActivated>;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean statementRecoveryActivated> = 1;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void initialize()>();

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void goForBlockStatementsopt()>();

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] nestedMethod>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int nestedType>;

        $i1 = $r1[$i0];

        $i2 = $i1 + 1;

        $r1[$i0] = $i2;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnRealBlockStack(int)>(0);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void pushOnAstLengthStack(int)>(0);

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.ReferenceContext referenceContext> = r2;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit> = r3;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration pendingRecoveredType> = null;

        if r4 == null goto label03;

        $i8 = lengthof r4;

        if $i8 <= 0 goto label03;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] recoveredTypes> = r4;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int recoveredTypePtr> = 0;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] recoveredTypes>;

        $r7 = $r6[0];

        $r8 = $r7.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression allocation>;

        if $r8 != null goto label01;

        $r12 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] recoveredTypes>;

        $r13 = $r12[0];

        $i15 = $r13.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: int declarationSourceStart>;

        goto label02;

     label01:
        $r9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] recoveredTypes>;

        $r10 = $r9[0];

        $r11 = $r10.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression allocation>;

        $i15 = $r11.<org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression: int sourceStart>;

     label02:
        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int nextTypeStart> = $i15;

        goto label04;

     label03:
        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] recoveredTypes> = null;

        $i18 = (int) -1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int recoveredTypePtr> = $i18;

        $i20 = (int) -1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int nextTypeStart> = $i20;

     label04:
        $r18 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        virtualinvoke $r18.<org.eclipse.jdt.internal.compiler.parser.Scanner: void resetTo(int,int)>(i3, i4);

        $r19 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i16 = $r19.<org.eclipse.jdt.internal.compiler.parser.Scanner: int initialPosition>;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastCheckPoint> = $i16;

        $i22 = (int) -1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int stateStackTop> = $i22;

     label05:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void parse()>();

     label06:
        goto label10;

     label07:
        $r16 := @caughtexception;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastAct> = 12828;

     label08:
        $r17 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] nestedMethod>;

        $i12 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int nestedType>;

        $i13 = $r17[$i12];

        $i14 = $i13 - 1;

        $r17[$i12] = $i14;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] recoveredTypes> = null;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean statementRecoveryActivated> = z0;

        goto label11;

     label09:
        $r14 := @caughtexception;

        $r15 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] nestedMethod>;

        $i9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int nestedType>;

        $i10 = $r15[$i9];

        $i11 = $i10 - 1;

        $r15[$i9] = $i11;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] recoveredTypes> = null;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean statementRecoveryActivated> = z0;

        throw $r14;

     label10:
        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] nestedMethod>;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int nestedType>;

        $i6 = $r5[$i5];

        $i7 = $i6 - 1;

        $r5[$i5] = $i7;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] recoveredTypes> = null;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean statementRecoveryActivated> = z0;

     label11:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void checkNonNLSAfterBodyEnd(int)>(i4);

        return;

        catch org.eclipse.jdt.internal.compiler.problem.AbortCompilation from label05 to label06 with label07;
        catch java.lang.Throwable from label05 to label08 with label09;
    }

    public void persistLineSeparatorPositions()
    {
        org.eclipse.jdt.internal.compiler.parser.Scanner $r1, $r3;
        int[] $r5;
        org.eclipse.jdt.internal.compiler.CompilationResult $r4;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        boolean $z0;
        org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration $r2;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $z0 = $r1.<org.eclipse.jdt.internal.compiler.parser.Scanner: boolean recordLineSeparator>;

        if $z0 == 0 goto label1;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit>;

        $r4 = $r2.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: org.eclipse.jdt.internal.compiler.CompilationResult compilationResult>;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r5 = virtualinvoke $r3.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] getLineEnds()>();

        $r4.<org.eclipse.jdt.internal.compiler.CompilationResult: int[] lineSeparatorPositions> = $r5;

     label1:
        return;
    }

    protected void prepareForBlockStatements()
    {
        int[] $r1, $r2, $r3;
        int $i0;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] nestedMethod>;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int nestedType> = 0;

        $r1[0] = 1;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] variablesCounter>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int nestedType>;

        $r2[$i0] = 0;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] realBlockStack>;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int realBlockPtr> = 1;

        $r3[1] = 0;

        return;
    }

    public org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()
    {
        org.eclipse.jdt.internal.compiler.parser.Scanner $r1, $r6;
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r3, $r4;
        org.eclipse.jdt.internal.compiler.CompilationResult $r7;
        org.eclipse.jdt.internal.compiler.impl.ReferenceContext $r2;
        int[] $r8;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        boolean $z0;
        org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration $r5;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $z0 = $r1.<org.eclipse.jdt.internal.compiler.parser.Scanner: boolean recordLineSeparator>;

        if $z0 == 0 goto label1;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit>;

        $r7 = $r5.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: org.eclipse.jdt.internal.compiler.CompilationResult compilationResult>;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r8 = virtualinvoke $r6.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] getLineEnds()>();

        $r7.<org.eclipse.jdt.internal.compiler.CompilationResult: int[] lineSeparatorPositions> = $r8;

     label1:
        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter>;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.ReferenceContext referenceContext>;

        $r3.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: org.eclipse.jdt.internal.compiler.impl.ReferenceContext referenceContext> = $r2;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter>;

        return $r4;
    }

    protected void pushIdentifier()
    {
        char[][] $r1, $r3, $r12, $r13;
        int[] $r8, $r9, $r10, $r11;
        long $l4, $l7, $l8, $l9;
        long[] $r7, $r14, $r15;
        int $i0, $i1, $i2, $i3, $i5, $i6, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, i18;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r2, $r5, $r6;
        char[] $r4;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: char[][] identifierStack>;

        i18 = lengthof $r1;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i1 = $i0 + 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr> = $i1;

        if $i1 < i18 goto label1;

        $r13 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: char[][] identifierStack>;

        $i15 = i18 + 20;

        $r12 = newarray (char[])[$i15];

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: char[][] identifierStack> = $r12;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r13, 0, $r12, 0, i18);

        $r15 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: long[] identifierPositionStack>;

        $i16 = i18 + 20;

        $r14 = newarray (long)[$i16];

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: long[] identifierPositionStack> = $r14;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r15, 0, $r14, 0, i18);

     label1:
        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: char[][] identifierStack>;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r4 = virtualinvoke $r2.<org.eclipse.jdt.internal.compiler.parser.Scanner: char[] getCurrentIdentifierSource()>();

        $r3[$i2] = $r4;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: long[] identifierPositionStack>;

        $i10 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i3 = $r5.<org.eclipse.jdt.internal.compiler.parser.Scanner: int startPosition>;

        $l4 = (long) $i3;

        $l8 = $l4 << 32;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i5 = $r6.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        $i6 = $i5 - 1;

        $l7 = (long) $i6;

        $l9 = $l8 + $l7;

        $r7[$i10] = $l9;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] identifierLengthStack>;

        $i17 = lengthof $r8;

        $i11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr>;

        $i12 = $i11 + 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr> = $i12;

        if $i12 < $i17 goto label2;

        $r11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] identifierLengthStack>;

        $i14 = $i17 + 10;

        $r10 = newarray (int)[$i14];

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] identifierLengthStack> = $r10;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r11, 0, $r10, 0, $i17);

     label2:
        $r9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] identifierLengthStack>;

        $i13 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr>;

        $r9[$i13] = 1;

        return;
    }

    protected void pushIdentifier(int)
    {
        int[] $r1, $r2, $r3, $r4;
        int i0, $i1, $i2, i3, $i4, $i5;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        i3 := @parameter0: int;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] identifierLengthStack>;

        i0 = lengthof $r1;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr>;

        $i2 = $i1 + 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr> = $i2;

        if $i2 < i0 goto label1;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] identifierLengthStack>;

        $i5 = i0 + 10;

        $r3 = newarray (int)[$i5];

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] identifierLengthStack> = $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r3, 0, i0);

     label1:
        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] identifierLengthStack>;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr>;

        $r2[$i4] = i3;

        return;
    }

    protected void pushOnAstLengthStack(int)
    {
        int[] $r1, $r2, $r3, $r4;
        int i0, $i1, $i2, i3, $i4, $i5;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        i3 := @parameter0: int;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] astLengthStack>;

        i0 = lengthof $r1;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr>;

        $i2 = $i1 + 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr> = $i2;

        if $i2 < i0 goto label1;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] astLengthStack>;

        $i5 = i0 + 255;

        $r3 = newarray (int)[$i5];

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] astLengthStack> = $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r3, 0, i0);

     label1:
        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] astLengthStack>;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr>;

        $r2[$i4] = i3;

        return;
    }

    protected void pushOnAstStack(org.eclipse.jdt.internal.compiler.ast.ASTNode)
    {
        org.eclipse.jdt.internal.compiler.ast.ASTNode r2;
        int[] $r4, $r5, $r6, $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r1, $r3, $r8, $r9;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        r2 := @parameter0: org.eclipse.jdt.internal.compiler.ast.ASTNode;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        i9 = lengthof $r1;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i1 = $i0 + 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr> = $i1;

        if $i1 < i9 goto label1;

        $r9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i7 = i9 + 100;

        $r8 = newarray (org.eclipse.jdt.internal.compiler.ast.ASTNode)[$i7];

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack> = $r8;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, 0, $r8, 0, i9);

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr> = i9;

     label1:
        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $r3[$i2] = r2;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] astLengthStack>;

        $i8 = lengthof $r4;

        $i3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr>;

        $i4 = $i3 + 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr> = $i4;

        if $i4 < $i8 goto label2;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] astLengthStack>;

        $i6 = $i8 + 100;

        $r6 = newarray (int)[$i6];

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] astLengthStack> = $r6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, $r6, 0, $i8);

     label2:
        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] astLengthStack>;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr>;

        $r5[$i5] = 1;

        return;
    }

    protected void pushOnExpressionStack(org.eclipse.jdt.internal.compiler.ast.Expression)
    {
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r1, $r3, $r8, $r9;
        org.eclipse.jdt.internal.compiler.ast.Expression r2;
        int[] $r4, $r5, $r6, $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        r2 := @parameter0: org.eclipse.jdt.internal.compiler.ast.Expression;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        i9 = lengthof $r1;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $i1 = $i0 + 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr> = $i1;

        if $i1 < i9 goto label1;

        $r9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i7 = i9 + 100;

        $r8 = newarray (org.eclipse.jdt.internal.compiler.ast.Expression)[$i7];

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack> = $r8;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, 0, $r8, 0, i9);

     label1:
        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r3[$i2] = r2;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] expressionLengthStack>;

        $i8 = lengthof $r4;

        $i3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        $i4 = $i3 + 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr> = $i4;

        if $i4 < $i8 goto label2;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] expressionLengthStack>;

        $i6 = $i8 + 100;

        $r6 = newarray (int)[$i6];

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] expressionLengthStack> = $r6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, $r6, 0, $i8);

     label2:
        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] expressionLengthStack>;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        $r5[$i5] = 1;

        return;
    }

    protected void pushOnExpressionStackLengthStack(int)
    {
        int[] $r1, $r2, $r3, $r4;
        int i0, $i1, $i2, i3, $i4, $i5;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        i3 := @parameter0: int;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] expressionLengthStack>;

        i0 = lengthof $r1;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        $i2 = $i1 + 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr> = $i2;

        if $i2 < i0 goto label1;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] expressionLengthStack>;

        $i5 = i0 + 255;

        $r3 = newarray (int)[$i5];

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] expressionLengthStack> = $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r3, 0, i0);

     label1:
        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] expressionLengthStack>;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        $r2[$i4] = i3;

        return;
    }

    protected void pushOnGenericsStack(org.eclipse.jdt.internal.compiler.ast.ASTNode)
    {
        org.eclipse.jdt.internal.compiler.ast.ASTNode r2;
        int[] $r4, $r5, $r6, $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r1, $r3, $r8, $r9;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        r2 := @parameter0: org.eclipse.jdt.internal.compiler.ast.ASTNode;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] genericsStack>;

        i9 = lengthof $r1;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr>;

        $i1 = $i0 + 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr> = $i1;

        if $i1 < i9 goto label1;

        $r9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] genericsStack>;

        $i7 = i9 + 10;

        $r8 = newarray (org.eclipse.jdt.internal.compiler.ast.ASTNode)[$i7];

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] genericsStack> = $r8;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, 0, $r8, 0, i9);

     label1:
        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] genericsStack>;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr>;

        $r3[$i2] = r2;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] genericsLengthStack>;

        $i8 = lengthof $r4;

        $i3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsLengthPtr>;

        $i4 = $i3 + 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsLengthPtr> = $i4;

        if $i4 < $i8 goto label2;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] genericsLengthStack>;

        $i6 = $i8 + 10;

        $r6 = newarray (int)[$i6];

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] genericsLengthStack> = $r6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, $r6, 0, $i8);

     label2:
        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] genericsLengthStack>;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsLengthPtr>;

        $r5[$i5] = 1;

        return;
    }

    protected void pushOnGenericsIdentifiersLengthStack(int)
    {
        int[] $r1, $r2, $r3, $r4;
        int i0, $i1, $i2, i3, $i4, $i5;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        i3 := @parameter0: int;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] genericsIdentifiersLengthStack>;

        i0 = lengthof $r1;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsIdentifiersLengthPtr>;

        $i2 = $i1 + 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsIdentifiersLengthPtr> = $i2;

        if $i2 < i0 goto label1;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] genericsIdentifiersLengthStack>;

        $i5 = i0 + 10;

        $r3 = newarray (int)[$i5];

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] genericsIdentifiersLengthStack> = $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r3, 0, i0);

     label1:
        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] genericsIdentifiersLengthStack>;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsIdentifiersLengthPtr>;

        $r2[$i4] = i3;

        return;
    }

    protected void pushOnGenericsLengthStack(int)
    {
        int[] $r1, $r2, $r3, $r4;
        int i0, $i1, $i2, i3, $i4, $i5;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        i3 := @parameter0: int;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] genericsLengthStack>;

        i0 = lengthof $r1;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsLengthPtr>;

        $i2 = $i1 + 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsLengthPtr> = $i2;

        if $i2 < i0 goto label1;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] genericsLengthStack>;

        $i5 = i0 + 10;

        $r3 = newarray (int)[$i5];

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] genericsLengthStack> = $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r3, 0, i0);

     label1:
        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] genericsLengthStack>;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsLengthPtr>;

        $r2[$i4] = i3;

        return;
    }

    protected void pushOnIntStack(int)
    {
        int[] $r1, $r2, $r3, $r4;
        int i0, $i1, $i2, i3, $i4, $i5;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        i3 := @parameter0: int;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        i0 = lengthof $r1;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i2 = $i1 + 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i2;

        if $i2 < i0 goto label1;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i5 = i0 + 255;

        $r3 = newarray (int)[$i5];

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack> = $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r3, 0, i0);

     label1:
        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $r2[$i4] = i3;

        return;
    }

    protected void pushOnRealBlockStack(int)
    {
        int[] $r1, $r2, $r3, $r4;
        int i0, $i1, $i2, i3, $i4, $i5;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        i3 := @parameter0: int;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] realBlockStack>;

        i0 = lengthof $r1;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int realBlockPtr>;

        $i2 = $i1 + 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int realBlockPtr> = $i2;

        if $i2 < i0 goto label1;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] realBlockStack>;

        $i5 = i0 + 255;

        $r3 = newarray (int)[$i5];

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] realBlockStack> = $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r3, 0, i0);

     label1:
        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] realBlockStack>;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int realBlockPtr>;

        $r2[$i4] = i3;

        return;
    }

    protected void recoverStatements()
    {
        org.eclipse.jdt.internal.compiler.ast.Block $r11;
        org.eclipse.jdt.internal.compiler.parser.Parser$1$TypeVisitor $r2;
        org.eclipse.jdt.internal.compiler.ast.FieldDeclaration[] $r7, $r8;
        org.eclipse.jdt.internal.compiler.impl.ReferenceContext $r3, $r4, $r5, $r12;
        int i0, $i1, i2;
        org.eclipse.jdt.internal.compiler.parser.Parser r1;
        org.eclipse.jdt.internal.compiler.ast.FieldDeclaration r9;
        boolean $z0, $z1;
        org.eclipse.jdt.internal.compiler.parser.Parser$1$MethodVisitor $r0;
        org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration $r13;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration r6;
        org.eclipse.jdt.internal.compiler.ast.Initializer r10;

        r1 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r0 = new org.eclipse.jdt.internal.compiler.parser.Parser$1$MethodVisitor;

        specialinvoke $r0.<org.eclipse.jdt.internal.compiler.parser.Parser$1$MethodVisitor: void <init>(org.eclipse.jdt.internal.compiler.parser.Parser)>(r1);

        $r2 = new org.eclipse.jdt.internal.compiler.parser.Parser$1$TypeVisitor;

        specialinvoke $r2.<org.eclipse.jdt.internal.compiler.parser.Parser$1$TypeVisitor: void <init>(org.eclipse.jdt.internal.compiler.parser.Parser)>(r1);

        $r0.<org.eclipse.jdt.internal.compiler.parser.Parser$1$MethodVisitor: org.eclipse.jdt.internal.compiler.ASTVisitor typeVisitor> = $r2;

        $r2.<org.eclipse.jdt.internal.compiler.parser.Parser$1$TypeVisitor: org.eclipse.jdt.internal.compiler.parser.Parser$1$MethodVisitor methodVisitor> = $r0;

        $r3 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.ReferenceContext referenceContext>;

        $z0 = $r3 instanceof org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration;

        if $z0 == 0 goto label1;

        $r12 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.ReferenceContext referenceContext>;

        $r13 = (org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration) $r12;

        virtualinvoke $r13.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor,org.eclipse.jdt.internal.compiler.lookup.ClassScope)>($r0, null);

        goto label7;

     label1:
        $r4 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.ReferenceContext referenceContext>;

        $z1 = $r4 instanceof org.eclipse.jdt.internal.compiler.ast.TypeDeclaration;

        if $z1 == 0 goto label7;

        $r5 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.ReferenceContext referenceContext>;

        r6 = (org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) $r5;

        $r7 = r6.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.FieldDeclaration[] fields>;

        i0 = lengthof $r7;

        i2 = 0;

        goto label6;

     label2:
        $r8 = r6.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.FieldDeclaration[] fields>;

        r9 = $r8[i2];

        $i1 = virtualinvoke r9.<org.eclipse.jdt.internal.compiler.ast.FieldDeclaration: int getKind()>();

        tableswitch($i1)
        {
            case 2: goto label3;
            default: goto label5;
        };

     label3:
        r10 = (org.eclipse.jdt.internal.compiler.ast.Initializer) r9;

        $r11 = r10.<org.eclipse.jdt.internal.compiler.ast.Initializer: org.eclipse.jdt.internal.compiler.ast.Block block>;

        if $r11 != null goto label4;

        goto label5;

     label4:
        $r0.<org.eclipse.jdt.internal.compiler.parser.Parser$1$MethodVisitor: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration enclosingType> = r6;

        virtualinvoke r10.<org.eclipse.jdt.internal.compiler.ast.Initializer: void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor,org.eclipse.jdt.internal.compiler.lookup.MethodScope)>($r0, null);

     label5:
        i2 = i2 + 1;

     label6:
        if i2 < i0 goto label2;

     label7:
        return;
    }

    public void recoveryExitFromVariable()
    {
        int i0, i1;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.FieldDeclaration $r9;
        boolean $z0, $z1, $z2;
        org.eclipse.jdt.internal.compiler.parser.RecoveredField $r8;
        org.eclipse.jdt.internal.compiler.parser.RecoveredElement $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r10, $r11, $r12, $r13, $r16, $r17, $r18;
        org.eclipse.jdt.internal.compiler.ast.LocalDeclaration $r15;
        org.eclipse.jdt.internal.compiler.parser.RecoveredLocalVariable $r14;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r1 == null goto label2;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $r3 = $r2.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.parser.RecoveredElement parent>;

        if $r3 == null goto label2;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $z0 = $r4 instanceof org.eclipse.jdt.internal.compiler.parser.RecoveredLocalVariable;

        if $z0 == 0 goto label1;

        $r13 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $r14 = (org.eclipse.jdt.internal.compiler.parser.RecoveredLocalVariable) $r13;

        $r15 = $r14.<org.eclipse.jdt.internal.compiler.parser.RecoveredLocalVariable: org.eclipse.jdt.internal.compiler.ast.LocalDeclaration localDeclaration>;

        i0 = $r15.<org.eclipse.jdt.internal.compiler.ast.LocalDeclaration: int sourceEnd>;

        $r16 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        virtualinvoke $r16.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: void updateSourceEndIfNecessary(int)>(i0);

        $r17 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $r18 = $r17.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.parser.RecoveredElement parent>;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement> = $r18;

        goto label2;

     label1:
        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $z1 = $r5 instanceof org.eclipse.jdt.internal.compiler.parser.RecoveredField;

        if $z1 == 0 goto label2;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $z2 = $r6 instanceof org.eclipse.jdt.internal.compiler.parser.RecoveredInitializer;

        if $z2 != 0 goto label2;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $r8 = (org.eclipse.jdt.internal.compiler.parser.RecoveredField) $r7;

        $r9 = $r8.<org.eclipse.jdt.internal.compiler.parser.RecoveredField: org.eclipse.jdt.internal.compiler.ast.FieldDeclaration fieldDeclaration>;

        i1 = $r9.<org.eclipse.jdt.internal.compiler.ast.FieldDeclaration: int sourceEnd>;

        $r10 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        virtualinvoke $r10.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: void updateSourceEndIfNecessary(int)>(i1);

        $r11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $r12 = $r11.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.parser.RecoveredElement parent>;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement> = $r12;

     label2:
        return;
    }

    public void recoveryTokenCheck()
    {
        org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration $r16;
        org.eclipse.jdt.internal.compiler.ast.StringLiteral $r14;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r1, $r2, $r3, $r5, $r6, $r8, $r9, $r10, $r11, $r12, $r17, $r18, $r19, $r22, $r24, $r25, $r27, $r28, $r29;
        char[] $r7;
        int[] $r13;
        org.eclipse.jdt.internal.compiler.parser.RecoveredType $r26;
        boolean $z0, $z1, $z2, $z3, $z4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31;
        org.eclipse.jdt.internal.compiler.parser.RecoveredElement $r4, $r15, $r20, $r21, $r23, r30;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int currentToken>;

        lookupswitch($i0)
        {
            case 27: goto label7;
            case 31: goto label6;
            case 52: goto label1;
            case 69: goto label4;
            default: goto label8;
        };

     label1:
        $z1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean recordStringLiterals>;

        if $z1 == 0 goto label9;

        $z2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean checkExternalizeStrings>;

        if $z2 == 0 goto label9;

        $i7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastPosistion>;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i6 = $r5.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        if $i7 >= $i6 goto label9;

        $z3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean statementRecoveryActivated>;

        if $z3 != 0 goto label9;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r7 = virtualinvoke $r6.<org.eclipse.jdt.internal.compiler.parser.Scanner: char[] getCurrentTokenSourceString()>();

        $r8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i11 = $r8.<org.eclipse.jdt.internal.compiler.parser.Scanner: int startPosition>;

        $r9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i8 = $r9.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        $i12 = $i8 - 1;

        $r10 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i10 = $r10.<org.eclipse.jdt.internal.compiler.parser.Scanner: int startPosition>;

        $r11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r13 = $r11.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] lineEnds>;

        $r12 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i9 = $r12.<org.eclipse.jdt.internal.compiler.parser.Scanner: int linePtr>;

        $i13 = staticinvoke <org.eclipse.jdt.internal.compiler.util.Util: int getLineNumber(int,int[],int,int)>($i10, $r13, 0, $i9);

        $r14 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.StringLiteral createStringLiteral(char[],int,int,int)>($r7, $i11, $i12, $i13);

        $r16 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit>;

        $r15 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r15 == null goto label2;

        $z4 = 1;

        goto label3;

     label2:
        $z4 = 0;

     label3:
        virtualinvoke $r16.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: void recordStringLiteral(org.eclipse.jdt.internal.compiler.ast.StringLiteral,boolean)>($r14, $z4);

        goto label9;

     label4:
        r30 = null;

        $z0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean ignoreNextOpeningBrace>;

        if $z0 != 0 goto label5;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i2 = $r2.<org.eclipse.jdt.internal.compiler.parser.Scanner: int startPosition>;

        $i5 = $i2 - 1;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i3 = $r3.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        $i4 = $i3 - 1;

        r30 = virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.parser.RecoveredElement updateOnOpeningBrace(int,int)>($i5, $i4);

     label5:
        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i1 = $r1.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastCheckPoint> = $i1;

        if r30 == null goto label9;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean restartRecovery> = 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement> = r30;

        goto label9;

     label6:
        $r17 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i14 = $r17.<org.eclipse.jdt.internal.compiler.parser.Scanner: int startPosition>;

        $i15 = $i14 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int rBraceStart> = $i15;

        $r18 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i16 = $r18.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        $i17 = $i16 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int rBraceEnd> = $i17;

        $i18 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int rBraceEnd>;

        $i19 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int flushCommentsDefinedPriorTo(int)>($i18);

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endPosition> = $i19;

        $r20 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $r19 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i21 = $r19.<org.eclipse.jdt.internal.compiler.parser.Scanner: int startPosition>;

        $i20 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int rBraceEnd>;

        $r21 = virtualinvoke $r20.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.parser.RecoveredElement updateOnClosingBrace(int,int)>($i21, $i20);

        $r22 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i22 = $r22.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastCheckPoint> = $i22;

        $r23 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r21 == $r23 goto label9;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement> = $r21;

        goto label9;

     label7:
        $r24 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i23 = $r24.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        $i24 = $i23 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endStatementPosition> = $i24;

        $r25 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i25 = $r25.<org.eclipse.jdt.internal.compiler.parser.Scanner: int startPosition>;

        $i26 = $i25 - 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int endPosition> = $i26;

        $r26 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredType currentRecoveryType()>();

        if $r26 == null goto label8;

        $r26.<org.eclipse.jdt.internal.compiler.parser.RecoveredType: boolean insideEnumConstantPart> = 0;

     label8:
        $i30 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int rBraceEnd>;

        $i31 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int rBraceSuccessorStart>;

        if $i30 <= $i31 goto label9;

        $r27 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i28 = $r27.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        $r28 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i27 = $r28.<org.eclipse.jdt.internal.compiler.parser.Scanner: int startPosition>;

        if $i28 == $i27 goto label9;

        $r29 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i29 = $r29.<org.eclipse.jdt.internal.compiler.parser.Scanner: int startPosition>;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int rBraceSuccessorStart> = $i29;

     label9:
        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean ignoreNextOpeningBrace> = 0;

        return;
    }

    protected void reportSyntaxErrors(boolean, int)
    {
        int[][] $r14;
        org.eclipse.jdt.internal.compiler.parser.diagnose.DiagnoseParser $r10, $r15;
        int[] $r5, $r17, $r18, $r19;
        boolean $z0, z1, $z2;
        org.eclipse.jdt.internal.compiler.CompilationResult $r4;
        org.eclipse.jdt.internal.compiler.impl.CompilerOptions $r11, $r12, $r16;
        org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration $r2, $r13;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] r24;
        org.eclipse.jdt.internal.compiler.impl.ReferenceContext $r1, $r22;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6;
        org.eclipse.jdt.internal.compiler.ast.MethodDeclaration r23;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r3, $r6, $r7, $r8, $r9, $r20, $r21;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        z1 := @parameter0: boolean;

        i2 := @parameter1: int;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.ReferenceContext referenceContext>;

        $z0 = $r1 instanceof org.eclipse.jdt.internal.compiler.ast.MethodDeclaration;

        if $z0 == 0 goto label1;

        $r22 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.ReferenceContext referenceContext>;

        r23 = (org.eclipse.jdt.internal.compiler.ast.MethodDeclaration) $r22;

        $i3 = r23.<org.eclipse.jdt.internal.compiler.ast.MethodDeclaration: int bits>;

        $i4 = $i3 & 32;

        if $i4 == 0 goto label1;

        return;

     label1:
        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit>;

        $r4 = $r2.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: org.eclipse.jdt.internal.compiler.CompilationResult compilationResult>;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r5 = virtualinvoke $r3.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] getLineEnds()>();

        $r4.<org.eclipse.jdt.internal.compiler.CompilationResult: int[] lineSeparatorPositions> = $r5;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r6.<org.eclipse.jdt.internal.compiler.parser.Scanner: boolean recordLineSeparator> = 0;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i5 = $r7.<org.eclipse.jdt.internal.compiler.parser.Scanner: int initialPosition>;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i0 = $r8.<org.eclipse.jdt.internal.compiler.parser.Scanner: int eofPosition>;

        if $i0 != 2147483647 goto label2;

        $r21 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i6 = $r21.<org.eclipse.jdt.internal.compiler.parser.Scanner: int eofPosition>;

        goto label3;

     label2:
        $r9 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i1 = $r9.<org.eclipse.jdt.internal.compiler.parser.Scanner: int eofPosition>;

        $i6 = $i1 - 1;

     label3:
        if z1 == 0 goto label4;

        $r13 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit>;

        r24 = $r13.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] types>;

        $r14 = staticinvoke <org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil: int[][] computeDietRange(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[])>(r24);

        $r15 = new org.eclipse.jdt.internal.compiler.parser.diagnose.DiagnoseParser;

        $r19 = $r14[0];

        $r18 = $r14[1];

        $r17 = $r14[2];

        $r16 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.CompilerOptions options>;

        specialinvoke $r15.<org.eclipse.jdt.internal.compiler.parser.diagnose.DiagnoseParser: void <init>(org.eclipse.jdt.internal.compiler.parser.Parser,int,int,int,int[],int[],int[],org.eclipse.jdt.internal.compiler.impl.CompilerOptions)>(r0, i2, $i5, $i6, $r19, $r18, $r17, $r16);

        virtualinvoke $r15.<org.eclipse.jdt.internal.compiler.parser.diagnose.DiagnoseParser: void diagnoseParse(boolean)>(0);

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void reportSyntaxErrorsForSkippedMethod(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[])>(r24);

        $r20 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        virtualinvoke $r20.<org.eclipse.jdt.internal.compiler.parser.Scanner: void resetTo(int,int)>($i5, $i6);

        goto label5;

     label4:
        $r10 = new org.eclipse.jdt.internal.compiler.parser.diagnose.DiagnoseParser;

        $r11 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.CompilerOptions options>;

        specialinvoke $r10.<org.eclipse.jdt.internal.compiler.parser.diagnose.DiagnoseParser: void <init>(org.eclipse.jdt.internal.compiler.parser.Parser,int,int,int,org.eclipse.jdt.internal.compiler.impl.CompilerOptions)>(r0, i2, $i5, $i6, $r11);

        $r12 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.CompilerOptions options>;

        $z2 = $r12.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean performStatementsRecovery>;

        virtualinvoke $r10.<org.eclipse.jdt.internal.compiler.parser.diagnose.DiagnoseParser: void diagnoseParse(boolean)>($z2);

     label5:
        return;
    }

    private void reportSyntaxErrorsForSkippedMethod(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[])
    {
        org.eclipse.jdt.internal.compiler.parser.diagnose.DiagnoseParser $r8, $r12, $r15;
        org.eclipse.jdt.internal.compiler.ast.FieldDeclaration[] $r18;
        org.eclipse.jdt.internal.compiler.ast.FieldDeclaration $r5, $r6;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration $r1, $r3, $r4;
        org.eclipse.jdt.internal.compiler.impl.CompilerOptions $r10, $r11, $r13, $r14, $r16, $r17;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] r0, r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11, $i12, i13, i14, $i15;
        org.eclipse.jdt.internal.compiler.parser.Parser r9;
        org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration[] $r19;
        org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration r20;
        org.eclipse.jdt.internal.compiler.ast.Initializer r7;

        r9 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[];

        if r0 == null goto label13;

        i10 = 0;

        goto label12;

     label01:
        $r1 = r0[i10];

        r2 = $r1.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] memberTypes>;

        if r2 == null goto label02;

        specialinvoke r9.<org.eclipse.jdt.internal.compiler.parser.Parser: void reportSyntaxErrorsForSkippedMethod(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[])>(r2);

     label02:
        $r3 = r0[i10];

        $r19 = $r3.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration[] methods>;

        if $r19 == null goto label07;

        i11 = 0;

        goto label06;

     label03:
        r20 = $r19[i11];

        $i4 = r20.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: int bits>;

        $i5 = $i4 & 32;

        if $i5 == 0 goto label05;

        $z2 = virtualinvoke r20.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: boolean isAnnotationMethod()>();

        if $z2 == 0 goto label04;

        $r15 = new org.eclipse.jdt.internal.compiler.parser.diagnose.DiagnoseParser;

        $i9 = r20.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: int declarationSourceStart>;

        $i8 = r20.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: int declarationSourceEnd>;

        $r16 = r9.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.CompilerOptions options>;

        specialinvoke $r15.<org.eclipse.jdt.internal.compiler.parser.diagnose.DiagnoseParser: void <init>(org.eclipse.jdt.internal.compiler.parser.Parser,int,int,int,org.eclipse.jdt.internal.compiler.impl.CompilerOptions)>(r9, 23, $i9, $i8, $r16);

        $r17 = r9.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.CompilerOptions options>;

        $z4 = $r17.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean performStatementsRecovery>;

        virtualinvoke $r15.<org.eclipse.jdt.internal.compiler.parser.diagnose.DiagnoseParser: void diagnoseParse(boolean)>($z4);

        goto label05;

     label04:
        $r12 = new org.eclipse.jdt.internal.compiler.parser.diagnose.DiagnoseParser;

        $i7 = r20.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: int declarationSourceStart>;

        $i6 = r20.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: int declarationSourceEnd>;

        $r13 = r9.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.CompilerOptions options>;

        specialinvoke $r12.<org.eclipse.jdt.internal.compiler.parser.diagnose.DiagnoseParser: void <init>(org.eclipse.jdt.internal.compiler.parser.Parser,int,int,int,org.eclipse.jdt.internal.compiler.impl.CompilerOptions)>(r9, 6, $i7, $i6, $r13);

        $r14 = r9.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.CompilerOptions options>;

        $z3 = $r14.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean performStatementsRecovery>;

        virtualinvoke $r12.<org.eclipse.jdt.internal.compiler.parser.diagnose.DiagnoseParser: void diagnoseParse(boolean)>($z3);

     label05:
        i11 = i11 + 1;

     label06:
        $i12 = lengthof $r19;

        if i11 < $i12 goto label03;

     label07:
        $r4 = r0[i10];

        $r18 = $r4.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.FieldDeclaration[] fields>;

        if $r18 == null goto label11;

        i13 = lengthof $r18;

        i14 = 0;

        goto label10;

     label08:
        $r5 = $r18[i14];

        $z0 = $r5 instanceof org.eclipse.jdt.internal.compiler.ast.Initializer;

        if $z0 == 0 goto label09;

        $r6 = $r18[i14];

        r7 = (org.eclipse.jdt.internal.compiler.ast.Initializer) $r6;

        $i0 = r7.<org.eclipse.jdt.internal.compiler.ast.Initializer: int bits>;

        $i1 = $i0 & 32;

        if $i1 == 0 goto label09;

        $r8 = new org.eclipse.jdt.internal.compiler.parser.diagnose.DiagnoseParser;

        $i3 = r7.<org.eclipse.jdt.internal.compiler.ast.Initializer: int declarationSourceStart>;

        $i2 = r7.<org.eclipse.jdt.internal.compiler.ast.Initializer: int declarationSourceEnd>;

        $r10 = r9.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.CompilerOptions options>;

        specialinvoke $r8.<org.eclipse.jdt.internal.compiler.parser.diagnose.DiagnoseParser: void <init>(org.eclipse.jdt.internal.compiler.parser.Parser,int,int,int,org.eclipse.jdt.internal.compiler.impl.CompilerOptions)>(r9, 10, $i3, $i2, $r10);

        $r11 = r9.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.CompilerOptions options>;

        $z1 = $r11.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean performStatementsRecovery>;

        virtualinvoke $r8.<org.eclipse.jdt.internal.compiler.parser.diagnose.DiagnoseParser: void diagnoseParse(boolean)>($z1);

     label09:
        i14 = i14 + 1;

     label10:
        if i14 < i13 goto label08;

     label11:
        i10 = i10 + 1;

     label12:
        $i15 = lengthof r0;

        if i10 < $i15 goto label01;

     label13:
        return;
    }

    protected void resetModifiers()
    {
        org.eclipse.jdt.internal.compiler.parser.Scanner $r1;
        int $i1, $i3;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int modifiers> = 0;

        $i1 = (int) -1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int modifiersSourceStart> = $i1;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i3 = (int) -1;

        $r1.<org.eclipse.jdt.internal.compiler.parser.Scanner: int commentPtr> = $i3;

        return;
    }

    protected void resetStacks()
    {
        int[] $r1, $r2, $r3;
        int $i0, $i2, $i4, $i6, $i8, $i10, $i12, $i14, $i16, $i18, $i20;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $i2 = (int) -1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr> = $i2;

        $i4 = (int) -1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr> = $i4;

        $i6 = (int) -1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr> = $i6;

        $i8 = (int) -1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr> = $i8;

        $i10 = (int) -1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr> = $i10;

        $i12 = (int) -1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr> = $i12;

        $i14 = (int) -1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i14;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] nestedMethod>;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int nestedType> = 0;

        $r1[0] = 0;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] variablesCounter>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int nestedType>;

        $r2[$i0] = 0;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int dimensions> = 0;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] realBlockStack>;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int realBlockPtr> = 0;

        $r3[0] = 0;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int recoveredStaticInitializerStart> = 0;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int listLength> = 0;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int listTypeParameterLength> = 0;

        $i16 = (int) -1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsIdentifiersLengthPtr> = $i16;

        $i18 = (int) -1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsLengthPtr> = $i18;

        $i20 = (int) -1;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr> = $i20;

        return;
    }

    protected boolean resumeAfterRecovery()
    {
        org.eclipse.jdt.internal.compiler.impl.ReferenceContext $r1;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $z0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean methodRecoveryActivated>;

        if $z0 != 0 goto label3;

        $z3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean statementRecoveryActivated>;

        if $z3 != 0 goto label3;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void resetStacks()>();

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void resetModifiers()>();

        $z4 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean moveRecoveryCheckpoint()>();

        if $z4 != 0 goto label1;

        return 0;

     label1:
        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.ReferenceContext referenceContext>;

        $z5 = $r1 instanceof org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration;

        if $z5 == 0 goto label2;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void goForHeaders()>();

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean diet> = 1;

        return 1;

     label2:
        return 0;

     label3:
        $z1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean statementRecoveryActivated>;

        if $z1 != 0 goto label5;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void resetStacks()>();

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void resetModifiers()>();

        $z2 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean moveRecoveryCheckpoint()>();

        if $z2 != 0 goto label4;

        return 0;

     label4:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void goForHeaders()>();

        return 1;

     label5:
        return 0;
    }

    protected boolean resumeOnSyntaxError()
    {
        org.eclipse.jdt.internal.compiler.parser.Scanner $r3, $r4, $r5, $r6;
        org.eclipse.jdt.internal.compiler.parser.RecoveredElement $r1, $r2, $r7;
        int $i0, $i1, $i2, $i3;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r1 != null goto label2;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc> = null;

        $z2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean statementRecoveryActivated>;

        if $z2 == 0 goto label1;

        return 0;

     label1:
        $r7 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement buildInitialRecoveryState()>();

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement> = $r7;

     label2:
        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r2 != null goto label3;

        return 0;

     label3:
        $z0 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean restartRecovery>;

        if $z0 == 0 goto label4;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean restartRecovery> = 0;

     label4:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void updateRecoveryState()>();

        $i1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastPosistion>;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i0 = $r3.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        if $i1 >= $i0 goto label5;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i2 = $r4.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastPosistion> = $i2;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i3 = $r5.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        $r6.<org.eclipse.jdt.internal.compiler.parser.Scanner: int lastPosition> = $i3;

     label5:
        $z1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: boolean resumeAfterRecovery()>();

        return $z1;
    }

    public void setMethodsFullRecovery(boolean)
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.impl.CompilerOptions $r1;
        boolean z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        z0 := @parameter0: boolean;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.CompilerOptions options>;

        $r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean performMethodsFullRecovery> = z0;

        return;
    }

    public void setStatementsRecovery(boolean)
    {
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.impl.CompilerOptions $r1, $r2;
        boolean z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.CompilerOptions options>;

        $r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean performMethodsFullRecovery> = 1;

     label1:
        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.impl.CompilerOptions options>;

        $r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean performStatementsRecovery> = z0;

        return;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuffer $r0, $r3, $r4, $r6, $r8, $r9, $r10, $r11, $r13, $r17, $r18, $r19, $r21, $r23, $r25, $r26, $r27, $r28, $r31, $r32, $r33, $r35, $r37, $r39, $r40, $r41, $r42, $r45, $r46, $r47, $r49, $r51, $r53, $r55, $r56, $r58, $r60, $r61, $r62, $r63, $r66, $r67, $r68, $r70, $r72, $r74, $r75, $r76, $r77, $r80, $r81, $r82, $r84, $r86, $r88, $r90, $r91, $r93, $r95, $r96, $r97, $r98, $r101, $r102, $r103, $r105, $r107, $r109, $r110, $r111, $r112, $r115, $r116, $r117, $r119, $r121, $r123, $r125, $r126, $r128, $r130, $r133;
        org.eclipse.jdt.internal.compiler.parser.Parser r1;
        int[] $r30, $r44, $r65, $r79, $r100, $r114;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, i31, i32, i33, i34, i35, i36, i37;
        char[][] $r14;
        java.lang.String $r2, $r5, $r7, $r12, $r16, $r20, $r22, $r24, $r29, $r34, $r36, $r38, $r43, $r48, $r50, $r52, $r54, $r57, $r59, $r64, $r69, $r71, $r73, $r78, $r83, $r85, $r87, $r89, $r92, $r94, $r99, $r104, $r106, $r108, $r113, $r118, $r120, $r122, $r124, $r127, $r129, $r132, $r134, r135, r136, r137, r138, r139, r140, r141;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r131;
        char[] $r15;

        r1 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>(java.lang.String)>("lastCheckpoint : int = ");

        $i0 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int lastCheckPoint>;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0);

        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        $r6 = new java.lang.StringBuffer;

        $r7 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r5);

        specialinvoke $r6.<java.lang.StringBuffer: void <init>(java.lang.String)>($r7);

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("identifierStack : char[");

        $i1 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        $i2 = $i1 + 1;

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("][] = {");

        r135 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        i31 = 0;

        goto label02;

     label01:
        $r11 = new java.lang.StringBuffer;

        $r12 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r135);

        specialinvoke $r11.<java.lang.StringBuffer: void <init>(java.lang.String)>($r12);

        $r13 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"");

        $r14 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: char[][] identifierStack>;

        $r15 = $r14[i31];

        $r16 = staticinvoke <java.lang.String: java.lang.String valueOf(char[])>($r15);

        $r17 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\",");

        r135 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        i31 = i31 + 1;

     label02:
        $i3 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierPtr>;

        if i31 <= $i3 goto label01;

        $r19 = new java.lang.StringBuffer;

        $r20 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r135);

        specialinvoke $r19.<java.lang.StringBuffer: void <init>(java.lang.String)>($r20);

        $r21 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("}\n");

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.String toString()>();

        $r23 = new java.lang.StringBuffer;

        $r24 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r22);

        specialinvoke $r23.<java.lang.StringBuffer: void <init>(java.lang.String)>($r24);

        $r25 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("identifierLengthStack : int[");

        $i4 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr>;

        $i5 = $i4 + 1;

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i5);

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] = {");

        r136 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.String toString()>();

        i32 = 0;

        goto label04;

     label03:
        $r28 = new java.lang.StringBuffer;

        $r29 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r136);

        specialinvoke $r28.<java.lang.StringBuffer: void <init>(java.lang.String)>($r29);

        $r30 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] identifierLengthStack>;

        $i7 = $r30[i32];

        $r31 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i7);

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

        r136 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.String toString()>();

        i32 = i32 + 1;

     label04:
        $i6 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int identifierLengthPtr>;

        if i32 <= $i6 goto label03;

        $r33 = new java.lang.StringBuffer;

        $r34 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r136);

        specialinvoke $r33.<java.lang.StringBuffer: void <init>(java.lang.String)>($r34);

        $r35 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("}\n");

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.String toString()>();

        $r37 = new java.lang.StringBuffer;

        $r38 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r36);

        specialinvoke $r37.<java.lang.StringBuffer: void <init>(java.lang.String)>($r38);

        $r39 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("astLengthStack : int[");

        $i8 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr>;

        $i9 = $i8 + 1;

        $r40 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i9);

        $r41 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] = {");

        r137 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.String toString()>();

        i33 = 0;

        goto label06;

     label05:
        $r42 = new java.lang.StringBuffer;

        $r43 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r137);

        specialinvoke $r42.<java.lang.StringBuffer: void <init>(java.lang.String)>($r43);

        $r44 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] astLengthStack>;

        $i11 = $r44[i33];

        $r45 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i11);

        $r46 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

        r137 = virtualinvoke $r46.<java.lang.StringBuffer: java.lang.String toString()>();

        i33 = i33 + 1;

     label06:
        $i10 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int astLengthPtr>;

        if i33 <= $i10 goto label05;

        $r47 = new java.lang.StringBuffer;

        $r48 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r137);

        specialinvoke $r47.<java.lang.StringBuffer: void <init>(java.lang.String)>($r48);

        $r49 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("}\n");

        $r50 = virtualinvoke $r49.<java.lang.StringBuffer: java.lang.String toString()>();

        $r51 = new java.lang.StringBuffer;

        $r52 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r50);

        specialinvoke $r51.<java.lang.StringBuffer: void <init>(java.lang.String)>($r52);

        $r53 = virtualinvoke $r51.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("astPtr : int = ");

        $i12 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $r54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i12);

        $r55 = virtualinvoke $r53.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r54);

        $r56 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        $r57 = virtualinvoke $r56.<java.lang.StringBuffer: java.lang.String toString()>();

        $r58 = new java.lang.StringBuffer;

        $r59 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r57);

        specialinvoke $r58.<java.lang.StringBuffer: void <init>(java.lang.String)>($r59);

        $r60 = virtualinvoke $r58.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("intStack : int[");

        $i13 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i14 = $i13 + 1;

        $r61 = virtualinvoke $r60.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i14);

        $r62 = virtualinvoke $r61.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] = {");

        r138 = virtualinvoke $r62.<java.lang.StringBuffer: java.lang.String toString()>();

        i34 = 0;

        goto label08;

     label07:
        $r63 = new java.lang.StringBuffer;

        $r64 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r138);

        specialinvoke $r63.<java.lang.StringBuffer: void <init>(java.lang.String)>($r64);

        $r65 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i16 = $r65[i34];

        $r66 = virtualinvoke $r63.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i16);

        $r67 = virtualinvoke $r66.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

        r138 = virtualinvoke $r67.<java.lang.StringBuffer: java.lang.String toString()>();

        i34 = i34 + 1;

     label08:
        $i15 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        if i34 <= $i15 goto label07;

        $r68 = new java.lang.StringBuffer;

        $r69 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r138);

        specialinvoke $r68.<java.lang.StringBuffer: void <init>(java.lang.String)>($r69);

        $r70 = virtualinvoke $r68.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("}\n");

        $r71 = virtualinvoke $r70.<java.lang.StringBuffer: java.lang.String toString()>();

        $r72 = new java.lang.StringBuffer;

        $r73 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r71);

        specialinvoke $r72.<java.lang.StringBuffer: void <init>(java.lang.String)>($r73);

        $r74 = virtualinvoke $r72.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("expressionLengthStack : int[");

        $i17 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        $i18 = $i17 + 1;

        $r75 = virtualinvoke $r74.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i18);

        $r76 = virtualinvoke $r75.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] = {");

        r139 = virtualinvoke $r76.<java.lang.StringBuffer: java.lang.String toString()>();

        i35 = 0;

        goto label10;

     label09:
        $r77 = new java.lang.StringBuffer;

        $r78 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r139);

        specialinvoke $r77.<java.lang.StringBuffer: void <init>(java.lang.String)>($r78);

        $r79 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] expressionLengthStack>;

        $i20 = $r79[i35];

        $r80 = virtualinvoke $r77.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i20);

        $r81 = virtualinvoke $r80.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

        r139 = virtualinvoke $r81.<java.lang.StringBuffer: java.lang.String toString()>();

        i35 = i35 + 1;

     label10:
        $i19 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionLengthPtr>;

        if i35 <= $i19 goto label09;

        $r82 = new java.lang.StringBuffer;

        $r83 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r139);

        specialinvoke $r82.<java.lang.StringBuffer: void <init>(java.lang.String)>($r83);

        $r84 = virtualinvoke $r82.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("}\n");

        $r85 = virtualinvoke $r84.<java.lang.StringBuffer: java.lang.String toString()>();

        $r86 = new java.lang.StringBuffer;

        $r87 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r85);

        specialinvoke $r86.<java.lang.StringBuffer: void <init>(java.lang.String)>($r87);

        $r88 = virtualinvoke $r86.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("expressionPtr : int = ");

        $i21 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int expressionPtr>;

        $r89 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i21);

        $r90 = virtualinvoke $r88.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r89);

        $r91 = virtualinvoke $r90.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        $r92 = virtualinvoke $r91.<java.lang.StringBuffer: java.lang.String toString()>();

        $r93 = new java.lang.StringBuffer;

        $r94 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r92);

        specialinvoke $r93.<java.lang.StringBuffer: void <init>(java.lang.String)>($r94);

        $r95 = virtualinvoke $r93.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("genericsIdentifiersLengthStack : int[");

        $i22 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsIdentifiersLengthPtr>;

        $i23 = $i22 + 1;

        $r96 = virtualinvoke $r95.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i23);

        $r97 = virtualinvoke $r96.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] = {");

        r140 = virtualinvoke $r97.<java.lang.StringBuffer: java.lang.String toString()>();

        i36 = 0;

        goto label12;

     label11:
        $r98 = new java.lang.StringBuffer;

        $r99 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r140);

        specialinvoke $r98.<java.lang.StringBuffer: void <init>(java.lang.String)>($r99);

        $r100 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] genericsIdentifiersLengthStack>;

        $i25 = $r100[i36];

        $r101 = virtualinvoke $r98.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i25);

        $r102 = virtualinvoke $r101.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

        r140 = virtualinvoke $r102.<java.lang.StringBuffer: java.lang.String toString()>();

        i36 = i36 + 1;

     label12:
        $i24 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsIdentifiersLengthPtr>;

        if i36 <= $i24 goto label11;

        $r103 = new java.lang.StringBuffer;

        $r104 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r140);

        specialinvoke $r103.<java.lang.StringBuffer: void <init>(java.lang.String)>($r104);

        $r105 = virtualinvoke $r103.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("}\n");

        $r106 = virtualinvoke $r105.<java.lang.StringBuffer: java.lang.String toString()>();

        $r107 = new java.lang.StringBuffer;

        $r108 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r106);

        specialinvoke $r107.<java.lang.StringBuffer: void <init>(java.lang.String)>($r108);

        $r109 = virtualinvoke $r107.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("genericsLengthStack : int[");

        $i26 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsLengthPtr>;

        $i27 = $i26 + 1;

        $r110 = virtualinvoke $r109.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i27);

        $r111 = virtualinvoke $r110.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] = {");

        r141 = virtualinvoke $r111.<java.lang.StringBuffer: java.lang.String toString()>();

        i37 = 0;

        goto label14;

     label13:
        $r112 = new java.lang.StringBuffer;

        $r113 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r141);

        specialinvoke $r112.<java.lang.StringBuffer: void <init>(java.lang.String)>($r113);

        $r114 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] genericsLengthStack>;

        $i29 = $r114[i37];

        $r115 = virtualinvoke $r112.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i29);

        $r116 = virtualinvoke $r115.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

        r141 = virtualinvoke $r116.<java.lang.StringBuffer: java.lang.String toString()>();

        i37 = i37 + 1;

     label14:
        $i28 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsLengthPtr>;

        if i37 <= $i28 goto label13;

        $r117 = new java.lang.StringBuffer;

        $r118 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r141);

        specialinvoke $r117.<java.lang.StringBuffer: void <init>(java.lang.String)>($r118);

        $r119 = virtualinvoke $r117.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("}\n");

        $r120 = virtualinvoke $r119.<java.lang.StringBuffer: java.lang.String toString()>();

        $r121 = new java.lang.StringBuffer;

        $r122 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r120);

        specialinvoke $r121.<java.lang.StringBuffer: void <init>(java.lang.String)>($r122);

        $r123 = virtualinvoke $r121.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("genericsPtr : int = ");

        $i30 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int genericsPtr>;

        $r124 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i30);

        $r125 = virtualinvoke $r123.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r124);

        $r126 = virtualinvoke $r125.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        $r127 = virtualinvoke $r126.<java.lang.StringBuffer: java.lang.String toString()>();

        $r128 = new java.lang.StringBuffer;

        $r129 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r127);

        specialinvoke $r128.<java.lang.StringBuffer: void <init>(java.lang.String)>($r129);

        $r130 = virtualinvoke $r128.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\n\n----------------Scanner--------------\n");

        $r131 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r132 = virtualinvoke $r131.<org.eclipse.jdt.internal.compiler.parser.Scanner: java.lang.String toString()>();

        $r133 = virtualinvoke $r130.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r132);

        $r134 = virtualinvoke $r133.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r134;
    }

    protected void updateRecoveryState()
    {
        org.eclipse.jdt.internal.compiler.parser.RecoveredElement $r1;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        virtualinvoke $r1.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: void updateFromParserState()>();

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.Parser: void recoveryTokenCheck()>();

        return;
    }

    protected void updateSourceDeclarationParts(int)
    {
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r2, $r4, $r6, $r8;
        int i0, $i1, $i2, $i3, $i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i16, $i18, $i20;
        org.eclipse.jdt.internal.compiler.parser.Parser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r1, $r3, $r5, $r7;
        org.eclipse.jdt.internal.compiler.ast.FieldDeclaration $r9, r10;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        i0 := @parameter0: int;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i2 = $i1 - i0;

        $i3 = $i2 + 1;

        $r2 = $r1[$i3];

        $i4 = $r2.<org.eclipse.jdt.internal.compiler.ast.ASTNode: int sourceStart>;

        $i18 = (int) -1;

        i5 = $i18 + $i4;

        i16 = 0;

        goto label2;

     label1:
        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i8 = $i7 - i16;

        $i9 = $i8 - 1;

        $r4 = $r3[$i9];

        r10 = (org.eclipse.jdt.internal.compiler.ast.FieldDeclaration) $r4;

        r10.<org.eclipse.jdt.internal.compiler.ast.FieldDeclaration: int endPart1Position> = i5;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i10 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $i11 = $i10 - i16;

        $r6 = $r5[$i11];

        $i12 = $r6.<org.eclipse.jdt.internal.compiler.ast.ASTNode: int sourceStart>;

        $i20 = (int) -1;

        $i13 = $i20 + $i12;

        r10.<org.eclipse.jdt.internal.compiler.ast.FieldDeclaration: int endPart2Position> = $i13;

        i16 = i16 + 1;

     label2:
        $i6 = i0 - 1;

        if i16 < $i6 goto label1;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i14 = r0.<org.eclipse.jdt.internal.compiler.parser.Parser: int astPtr>;

        $r8 = $r7[$i14];

        $r9 = (org.eclipse.jdt.internal.compiler.ast.FieldDeclaration) $r8;

        $r9.<org.eclipse.jdt.internal.compiler.ast.FieldDeclaration: int endPart1Position> = i5;

        $i15 = $r9.<org.eclipse.jdt.internal.compiler.ast.FieldDeclaration: int declarationSourceEnd>;

        $r9.<org.eclipse.jdt.internal.compiler.ast.FieldDeclaration: int endPart2Position> = $i15;

        return;
    }

    protected void updateSourcePosition(org.eclipse.jdt.internal.compiler.ast.Expression)
    {
        org.eclipse.jdt.internal.compiler.ast.Expression r0;
        int[] $r2, $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.eclipse.jdt.internal.compiler.parser.Parser r1;

        r1 := @this: org.eclipse.jdt.internal.compiler.parser.Parser;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.ast.Expression;

        $r2 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i0 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i1 = $i0 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i1;

        $i2 = $r2[$i0];

        r0.<org.eclipse.jdt.internal.compiler.ast.Expression: int sourceEnd> = $i2;

        $r3 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int[] intStack>;

        $i3 = r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr>;

        $i4 = $i3 - 1;

        r1.<org.eclipse.jdt.internal.compiler.parser.Parser: int intPtr> = $i4;

        $i5 = $r3[$i3];

        r0.<org.eclipse.jdt.internal.compiler.ast.Expression: int sourceStart> = $i5;

        return;
    }
}
