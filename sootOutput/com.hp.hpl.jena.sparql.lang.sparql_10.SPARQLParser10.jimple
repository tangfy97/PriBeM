public class com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 extends com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10Base implements com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10Constants
{
    boolean allowAggregatesInExpressions;
    public com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10TokenManager token_source;
    com.hp.hpl.jena.sparql.lang.sparql_10.JavaCharStream jj_input_stream;
    public com.hp.hpl.jena.sparql.lang.sparql_10.Token token;
    public com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_nt;
    private int jj_ntk;
    private int jj_gen;
    private final int[] jj_la1;
    private static int[] jj_la1_0;
    private static int[] jj_la1_1;
    private static int[] jj_la1_2;
    private static int[] jj_la1_3;
    private java.util.List jj_expentries;
    private int[] jj_expentry;
    private int jj_kind;

    public final void QueryUnit() throws com.hp.hpl.jena.sparql.lang.sparql_10.ParseException
    {
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: void Query()>();

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(0);

        return;
    }

    public final void Query() throws com.hp.hpl.jena.sparql.lang.sparql_10.ParseException
    {
        com.hp.hpl.jena.sparql.lang.sparql_10.ParseException $r3;
        int[] $r1;
        int $i0, $i1, $i2, $i4, $i6;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: void Prologue()>();

        $i0 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i4 = (int) -1;

        if $i0 != $i4 goto label1;

        $i2 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label2;

     label1:
        $i2 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label2:
        tableswitch($i2)
        {
            case 20: goto label3;
            case 21: goto label7;
            case 22: goto label7;
            case 23: goto label5;
            case 24: goto label4;
            case 25: goto label6;
            default: goto label7;
        };

     label3:
        virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: void SelectQuery()>();

        goto label8;

     label4:
        virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: void ConstructQuery()>();

        goto label8;

     label5:
        virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: void DescribeQuery()>();

        goto label8;

     label6:
        virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: void AskQuery()>();

        goto label8;

     label7:
        $r1 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i1 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r1[0] = $i1;

        $i6 = (int) -1;

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>($i6);

        $r3 = new com.hp.hpl.jena.sparql.lang.sparql_10.ParseException;

        specialinvoke $r3.<com.hp.hpl.jena.sparql.lang.sparql_10.ParseException: void <init>()>();

        throw $r3;

     label8:
        return;
    }

    public final void Prologue() throws com.hp.hpl.jena.sparql.lang.sparql_10.ParseException
    {
        int[] $r1, $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7, $i9;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        $i0 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i7 = (int) -1;

        if $i0 != $i7 goto label01;

        $i3 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label02;

     label01:
        $i3 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label02:
        lookupswitch($i3)
        {
            case 18: goto label03;
            default: goto label04;
        };

     label03:
        virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: void BaseDecl()>();

        goto label05;

     label04:
        $r2 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i2 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r2[1] = $i2;

     label05:
        $i4 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i9 = (int) -1;

        if $i4 != $i9 goto label06;

        $i5 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label07;

     label06:
        $i5 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label07:
        lookupswitch($i5)
        {
            case 19: goto label08;
            default: goto label09;
        };

     label08:
        goto label10;

     label09:
        $r1 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i1 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r1[2] = $i1;

        goto label11;

     label10:
        virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: void PrefixDecl()>();

        goto label05;

     label11:
        return;
    }

    public final void BaseDecl() throws com.hp.hpl.jena.sparql.lang.sparql_10.ParseException
    {
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;
        java.lang.String $r1;
        com.hp.hpl.jena.sparql.core.Prologue $r2;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(18);

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: java.lang.String IRI_REF()>();

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.core.Prologue getPrologue()>();

        virtualinvoke $r2.<com.hp.hpl.jena.sparql.core.Prologue: void setBaseURI(java.lang.String)>($r1);

        return;
    }

    public final void PrefixDecl() throws com.hp.hpl.jena.sparql.lang.sparql_10.ParseException
    {
        com.hp.hpl.jena.sparql.core.Prologue $r5;
        com.hp.hpl.jena.sparql.lang.sparql_10.Token $r1;
        int $i0, $i1;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;
        java.lang.String $r2, $r3, $r4;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(19);

        $r1 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(9);

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: java.lang.String IRI_REF()>();

        $r3 = $r1.<com.hp.hpl.jena.sparql.lang.sparql_10.Token: java.lang.String image>;

        $i1 = $r1.<com.hp.hpl.jena.sparql.lang.sparql_10.Token: int beginLine>;

        $i0 = $r1.<com.hp.hpl.jena.sparql.lang.sparql_10.Token: int beginColumn>;

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: java.lang.String fixupPrefix(java.lang.String,int,int)>($r3, $i1, $i0);

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.core.Prologue getPrologue()>();

        virtualinvoke $r5.<com.hp.hpl.jena.sparql.core.Prologue: void setPrefix(java.lang.String,java.lang.String)>($r4, $r2);

        return;
    }

    public final void SelectQuery() throws com.hp.hpl.jena.sparql.lang.sparql_10.ParseException
    {
        int[] $r1;
        int $i0, $i1, $i2, $i4;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: void Project()>();

     label1:
        $i0 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i4 = (int) -1;

        if $i0 != $i4 goto label2;

        $i2 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label3;

     label2:
        $i2 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label3:
        lookupswitch($i2)
        {
            case 33: goto label4;
            default: goto label5;
        };

     label4:
        goto label6;

     label5:
        $r1 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i1 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r1[3] = $i1;

        goto label7;

     label6:
        virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: void DatasetClause()>();

        goto label1;

     label7:
        virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: void WhereClause()>();

        virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: void SolutionModifier()>();

        return;
    }

    public final void SubSelect() throws com.hp.hpl.jena.sparql.lang.sparql_10.ParseException
    {
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: void Project()>();

        virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: void WhereClause()>();

        virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: void SolutionModifier()>();

        return;
    }

    public final void Project() throws com.hp.hpl.jena.sparql.lang.sparql_10.ParseException
    {
        int[] $r7, $r8, $r11, $r13;
        com.hp.hpl.jena.query.Query $r1, $r2, $r3, $r5, $r6, $r10;
        com.hp.hpl.jena.sparql.lang.sparql_10.ParseException $r14, $r15;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i13, $i15, $i17, $i19, $i21, $i23;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;
        com.hp.hpl.jena.sparql.core.Var $r4;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(20);

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.query.Query getQuery()>();

        virtualinvoke $r1.<com.hp.hpl.jena.query.Query: void setQuerySelectType()>();

        $i0 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i13 = (int) -1;

        if $i0 != $i13 goto label01;

        $i7 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label02;

     label01:
        $i7 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label02:
        lookupswitch($i7)
        {
            case 21: goto label03;
            case 22: goto label03;
            default: goto label09;
        };

     label03:
        $i1 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i15 = (int) -1;

        if $i1 != $i15 goto label04;

        $i8 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label05;

     label04:
        $i8 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label05:
        lookupswitch($i8)
        {
            case 21: goto label06;
            case 22: goto label07;
            default: goto label08;
        };

     label06:
        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(21);

        $r10 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.query.Query getQuery()>();

        virtualinvoke $r10.<com.hp.hpl.jena.query.Query: void setDistinct(boolean)>(1);

        goto label10;

     label07:
        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(22);

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.query.Query getQuery()>();

        virtualinvoke $r2.<com.hp.hpl.jena.query.Query: void setReduced(boolean)>(1);

        goto label10;

     label08:
        $r11 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i5 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r11[4] = $i5;

        $i17 = (int) -1;

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>($i17);

        $r14 = new com.hp.hpl.jena.sparql.lang.sparql_10.ParseException;

        specialinvoke $r14.<com.hp.hpl.jena.sparql.lang.sparql_10.ParseException: void <init>()>();

        throw $r14;

     label09:
        $r13 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i6 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r13[5] = $i6;

     label10:
        r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: boolean allowAggregatesInExpressions> = 1;

        $i9 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i19 = (int) -1;

        if $i9 != $i19 goto label11;

        $i10 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label12;

     label11:
        $i10 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label12:
        lookupswitch($i10)
        {
            case 12: goto label13;
            case 13: goto label13;
            case 97: goto label18;
            default: goto label19;
        };

     label13:
        $r4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.core.Var Var()>();

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.query.Query getQuery()>();

        virtualinvoke $r5.<com.hp.hpl.jena.query.Query: void addResultVar(com.hp.hpl.jena.graph.Node)>($r4);

        $r6 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.query.Query getQuery()>();

        virtualinvoke $r6.<com.hp.hpl.jena.query.Query: void setQueryResultStar(boolean)>(0);

        $i2 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i21 = (int) -1;

        if $i2 != $i21 goto label14;

        $i11 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label15;

     label14:
        $i11 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label15:
        lookupswitch($i11)
        {
            case 12: goto label16;
            case 13: goto label16;
            default: goto label17;
        };

     label16:
        goto label13;

     label17:
        $r7 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i3 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r7[6] = $i3;

        goto label20;

     label18:
        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(97);

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.query.Query getQuery()>();

        virtualinvoke $r3.<com.hp.hpl.jena.query.Query: void setQueryResultStar(boolean)>(1);

        goto label20;

     label19:
        $r8 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i4 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r8[7] = $i4;

        $i23 = (int) -1;

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>($i23);

        $r15 = new com.hp.hpl.jena.sparql.lang.sparql_10.ParseException;

        specialinvoke $r15.<com.hp.hpl.jena.sparql.lang.sparql_10.ParseException: void <init>()>();

        throw $r15;

     label20:
        r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: boolean allowAggregatesInExpressions> = 0;

        return;
    }

    public final void ConstructQuery() throws com.hp.hpl.jena.sparql.lang.sparql_10.ParseException
    {
        com.hp.hpl.jena.query.Query $r1, $r3;
        com.hp.hpl.jena.sparql.syntax.Template $r2;
        int[] $r4;
        int $i0, $i1, $i2, $i4;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(24);

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.query.Query getQuery()>();

        virtualinvoke $r1.<com.hp.hpl.jena.query.Query: void setQueryConstructType()>();

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.syntax.Template ConstructTemplate()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.query.Query getQuery()>();

        virtualinvoke $r3.<com.hp.hpl.jena.query.Query: void setConstructTemplate(com.hp.hpl.jena.sparql.syntax.Template)>($r2);

     label1:
        $i0 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i4 = (int) -1;

        if $i0 != $i4 goto label2;

        $i2 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label3;

     label2:
        $i2 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label3:
        lookupswitch($i2)
        {
            case 33: goto label4;
            default: goto label5;
        };

     label4:
        goto label6;

     label5:
        $r4 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i1 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r4[8] = $i1;

        goto label7;

     label6:
        virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: void DatasetClause()>();

        goto label1;

     label7:
        virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: void WhereClause()>();

        virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: void SolutionModifier()>();

        return;
    }

    public final void DescribeQuery() throws com.hp.hpl.jena.sparql.lang.sparql_10.ParseException
    {
        com.hp.hpl.jena.query.Query $r1, $r2, $r6, $r8;
        com.hp.hpl.jena.graph.Node $r5;
        com.hp.hpl.jena.sparql.lang.sparql_10.ParseException $r11;
        int[] $r3, $r4, $r7, $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i13, $i15, $i17, $i19, $i21;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(23);

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.query.Query getQuery()>();

        virtualinvoke $r1.<com.hp.hpl.jena.query.Query: void setQueryDescribeType()>();

        $i0 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i13 = (int) -1;

        if $i0 != $i13 goto label01;

        $i7 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label02;

     label01:
        $i7 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label02:
        lookupswitch($i7)
        {
            case 8: goto label03;
            case 9: goto label03;
            case 10: goto label03;
            case 12: goto label03;
            case 13: goto label03;
            case 97: goto label09;
            default: goto label10;
        };

     label03:
        $r5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.graph.Node VarOrIRIref()>();

        $r6 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.query.Query getQuery()>();

        virtualinvoke $r6.<com.hp.hpl.jena.query.Query: void addDescribeNode(com.hp.hpl.jena.graph.Node)>($r5);

        $i4 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i15 = (int) -1;

        if $i4 != $i15 goto label04;

        $i8 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label05;

     label04:
        $i8 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label05:
        tableswitch($i8)
        {
            case 8: goto label06;
            case 9: goto label06;
            case 10: goto label06;
            case 11: goto label07;
            case 12: goto label06;
            case 13: goto label06;
            default: goto label07;
        };

     label06:
        goto label03;

     label07:
        $r7 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i5 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r7[9] = $i5;

        goto label08;

     label08:
        $r8 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.query.Query getQuery()>();

        virtualinvoke $r8.<com.hp.hpl.jena.query.Query: void setQueryResultStar(boolean)>(0);

        goto label11;

     label09:
        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(97);

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.query.Query getQuery()>();

        virtualinvoke $r2.<com.hp.hpl.jena.query.Query: void setQueryResultStar(boolean)>(1);

        goto label11;

     label10:
        $r9 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i6 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r9[10] = $i6;

        $i17 = (int) -1;

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>($i17);

        $r11 = new com.hp.hpl.jena.sparql.lang.sparql_10.ParseException;

        specialinvoke $r11.<com.hp.hpl.jena.sparql.lang.sparql_10.ParseException: void <init>()>();

        throw $r11;

     label11:
        $i9 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i19 = (int) -1;

        if $i9 != $i19 goto label12;

        $i10 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label13;

     label12:
        $i10 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label13:
        lookupswitch($i10)
        {
            case 33: goto label14;
            default: goto label15;
        };

     label14:
        goto label16;

     label15:
        $r3 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i1 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r3[11] = $i1;

        goto label17;

     label16:
        virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: void DatasetClause()>();

        goto label11;

     label17:
        $i2 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i21 = (int) -1;

        if $i2 != $i21 goto label18;

        $i11 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label19;

     label18:
        $i11 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label19:
        lookupswitch($i11)
        {
            case 34: goto label20;
            case 76: goto label20;
            default: goto label21;
        };

     label20:
        virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: void WhereClause()>();

        goto label22;

     label21:
        $r4 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i3 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r4[12] = $i3;

     label22:
        virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: void SolutionModifier()>();

        return;
    }

    public final void AskQuery() throws com.hp.hpl.jena.sparql.lang.sparql_10.ParseException
    {
        com.hp.hpl.jena.query.Query $r1;
        int[] $r2;
        int $i0, $i1, $i2, $i4;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(25);

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.query.Query getQuery()>();

        virtualinvoke $r1.<com.hp.hpl.jena.query.Query: void setQueryAskType()>();

     label1:
        $i0 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i4 = (int) -1;

        if $i0 != $i4 goto label2;

        $i2 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label3;

     label2:
        $i2 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label3:
        lookupswitch($i2)
        {
            case 33: goto label4;
            default: goto label5;
        };

     label4:
        goto label6;

     label5:
        $r2 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i1 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r2[13] = $i1;

        goto label7;

     label6:
        virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: void DatasetClause()>();

        goto label1;

     label7:
        virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: void WhereClause()>();

        return;
    }

    public final void DatasetClause() throws com.hp.hpl.jena.sparql.lang.sparql_10.ParseException
    {
        com.hp.hpl.jena.sparql.lang.sparql_10.ParseException $r3;
        int[] $r1;
        int $i0, $i1, $i2, $i4, $i6;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(33);

        $i0 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i4 = (int) -1;

        if $i0 != $i4 goto label1;

        $i2 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label2;

     label1:
        $i2 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label2:
        lookupswitch($i2)
        {
            case 8: goto label3;
            case 9: goto label3;
            case 10: goto label3;
            case 32: goto label4;
            default: goto label5;
        };

     label3:
        virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: void DefaultGraphClause()>();

        goto label6;

     label4:
        virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: void NamedGraphClause()>();

        goto label6;

     label5:
        $r1 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i1 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r1[14] = $i1;

        $i6 = (int) -1;

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>($i6);

        $r3 = new com.hp.hpl.jena.sparql.lang.sparql_10.ParseException;

        specialinvoke $r3.<com.hp.hpl.jena.sparql.lang.sparql_10.ParseException: void <init>()>();

        throw $r3;

     label6:
        return;
    }

    public final void DefaultGraphClause() throws com.hp.hpl.jena.sparql.lang.sparql_10.ParseException
    {
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;
        com.hp.hpl.jena.query.Query $r2;
        java.lang.String $r1;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: java.lang.String SourceSelector()>();

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.query.Query getQuery()>();

        virtualinvoke $r2.<com.hp.hpl.jena.query.Query: void addGraphURI(java.lang.String)>($r1);

        return;
    }

    public final void NamedGraphClause() throws com.hp.hpl.jena.sparql.lang.sparql_10.ParseException
    {
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;
        com.hp.hpl.jena.query.Query $r2;
        java.lang.String $r1;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(32);

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: java.lang.String SourceSelector()>();

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.query.Query getQuery()>();

        virtualinvoke $r2.<com.hp.hpl.jena.query.Query: void addNamedGraphURI(java.lang.String)>($r1);

        return;
    }

    public final java.lang.String SourceSelector() throws com.hp.hpl.jena.sparql.lang.sparql_10.ParseException
    {
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;
        java.lang.String $r1;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: java.lang.String IRIref()>();

        return $r1;
    }

    public final void WhereClause() throws com.hp.hpl.jena.sparql.lang.sparql_10.ParseException
    {
        com.hp.hpl.jena.query.Query $r2;
        int[] $r3;
        int $i0, $i1, $i2, $i4;
        com.hp.hpl.jena.sparql.syntax.Element $r1;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        $i0 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i4 = (int) -1;

        if $i0 != $i4 goto label1;

        $i2 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label2;

     label1:
        $i2 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label2:
        lookupswitch($i2)
        {
            case 34: goto label3;
            default: goto label4;
        };

     label3:
        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(34);

        goto label5;

     label4:
        $r3 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i1 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r3[15] = $i1;

     label5:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.syntax.Element GroupGraphPattern()>();

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.query.Query getQuery()>();

        virtualinvoke $r2.<com.hp.hpl.jena.query.Query: void setQueryPattern(com.hp.hpl.jena.sparql.syntax.Element)>($r1);

        return;
    }

    public final void SolutionModifier() throws com.hp.hpl.jena.sparql.lang.sparql_10.ParseException
    {
        int[] $r1, $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7, $i9;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        $i0 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i7 = (int) -1;

        if $i0 != $i7 goto label01;

        $i4 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label02;

     label01:
        $i4 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label02:
        lookupswitch($i4)
        {
            case 28: goto label03;
            default: goto label04;
        };

     label03:
        virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: void OrderClause()>();

        goto label05;

     label04:
        $r2 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i3 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r2[16] = $i3;

     label05:
        $i1 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i9 = (int) -1;

        if $i1 != $i9 goto label06;

        $i5 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label07;

     label06:
        $i5 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label07:
        lookupswitch($i5)
        {
            case 26: goto label08;
            case 27: goto label08;
            default: goto label09;
        };

     label08:
        virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: void LimitOffsetClauses()>();

        goto label10;

     label09:
        $r1 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i2 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r1[17] = $i2;

     label10:
        return;
    }

    public final void OrderClause() throws com.hp.hpl.jena.sparql.lang.sparql_10.ParseException
    {
        int[] $r1;
        int $i0, $i1, $i2, $i4;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(28);

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(29);

     label1:
        virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: void OrderCondition()>();

        $i0 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i4 = (int) -1;

        if $i0 != $i4 goto label2;

        $i2 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label3;

     label2:
        $i2 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label3:
        tableswitch($i2)
        {
            case 8: goto label4;
            case 9: goto label4;
            case 10: goto label4;
            case 11: goto label5;
            case 12: goto label4;
            case 13: goto label4;
            case 14: goto label5;
            case 15: goto label5;
            case 16: goto label5;
            case 17: goto label5;
            case 18: goto label5;
            case 19: goto label5;
            case 20: goto label5;
            case 21: goto label5;
            case 22: goto label5;
            case 23: goto label5;
            case 24: goto label5;
            case 25: goto label5;
            case 26: goto label5;
            case 27: goto label5;
            case 28: goto label5;
            case 29: goto label5;
            case 30: goto label4;
            case 31: goto label4;
            case 32: goto label5;
            case 33: goto label5;
            case 34: goto label5;
            case 35: goto label5;
            case 36: goto label5;
            case 37: goto label5;
            case 38: goto label5;
            case 39: goto label5;
            case 40: goto label4;
            case 41: goto label4;
            case 42: goto label5;
            case 43: goto label5;
            case 44: goto label4;
            case 45: goto label4;
            case 46: goto label4;
            case 47: goto label4;
            case 48: goto label4;
            case 49: goto label4;
            case 50: goto label4;
            case 51: goto label4;
            case 52: goto label4;
            case 53: goto label5;
            case 54: goto label5;
            case 55: goto label5;
            case 56: goto label5;
            case 57: goto label5;
            case 58: goto label5;
            case 59: goto label5;
            case 60: goto label5;
            case 61: goto label5;
            case 62: goto label5;
            case 63: goto label5;
            case 64: goto label5;
            case 65: goto label5;
            case 66: goto label5;
            case 67: goto label5;
            case 68: goto label5;
            case 69: goto label5;
            case 70: goto label5;
            case 71: goto label5;
            case 72: goto label5;
            case 73: goto label4;
            default: goto label5;
        };

     label4:
        goto label1;

     label5:
        $r1 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i1 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r1[18] = $i1;

        goto label6;

     label6:
        return;
    }

    public final void OrderCondition() throws com.hp.hpl.jena.sparql.lang.sparql_10.ParseException
    {
        com.hp.hpl.jena.query.Query $r1, $r2;
        com.hp.hpl.jena.sparql.lang.sparql_10.ParseException $r11, $r12, $r13;
        com.hp.hpl.jena.sparql.expr.Expr r9;
        byte b6, b10, b11;
        int[] $r3, $r5, $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7, $i8, $i9, $i13, $i15, $i17, $i19, $i21, $i23;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;
        com.hp.hpl.jena.sparql.core.Var r10;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        r9 = null;

        r10 = null;

        b6 = -2;

        b11 = -2;

        b10 = -2;

        $i0 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i13 = (int) -1;

        if $i0 != $i13 goto label01;

        $i7 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label02;

     label01:
        $i7 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label02:
        tableswitch($i7)
        {
            case 8: goto label10;
            case 9: goto label10;
            case 10: goto label10;
            case 11: goto label16;
            case 12: goto label10;
            case 13: goto label10;
            case 14: goto label16;
            case 15: goto label16;
            case 16: goto label16;
            case 17: goto label16;
            case 18: goto label16;
            case 19: goto label16;
            case 20: goto label16;
            case 21: goto label16;
            case 22: goto label16;
            case 23: goto label16;
            case 24: goto label16;
            case 25: goto label16;
            case 26: goto label16;
            case 27: goto label16;
            case 28: goto label16;
            case 29: goto label16;
            case 30: goto label03;
            case 31: goto label03;
            case 32: goto label16;
            case 33: goto label16;
            case 34: goto label16;
            case 35: goto label16;
            case 36: goto label16;
            case 37: goto label16;
            case 38: goto label16;
            case 39: goto label16;
            case 40: goto label10;
            case 41: goto label10;
            case 42: goto label16;
            case 43: goto label16;
            case 44: goto label10;
            case 45: goto label10;
            case 46: goto label10;
            case 47: goto label10;
            case 48: goto label10;
            case 49: goto label10;
            case 50: goto label10;
            case 51: goto label10;
            case 52: goto label10;
            case 53: goto label16;
            case 54: goto label16;
            case 55: goto label16;
            case 56: goto label16;
            case 57: goto label16;
            case 58: goto label16;
            case 59: goto label16;
            case 60: goto label16;
            case 61: goto label16;
            case 62: goto label16;
            case 63: goto label16;
            case 64: goto label16;
            case 65: goto label16;
            case 66: goto label16;
            case 67: goto label16;
            case 68: goto label16;
            case 69: goto label16;
            case 70: goto label16;
            case 71: goto label16;
            case 72: goto label16;
            case 73: goto label10;
            default: goto label16;
        };

     label03:
        $i1 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i15 = (int) -1;

        if $i1 != $i15 goto label04;

        $i8 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label05;

     label04:
        $i8 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label05:
        lookupswitch($i8)
        {
            case 30: goto label06;
            case 31: goto label07;
            default: goto label08;
        };

     label06:
        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(30);

        b6 = 1;

        b11 = 1;

        b10 = 1;

        goto label09;

     label07:
        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(31);

        b6 = -1;

        b11 = -1;

        b10 = -1;

        goto label09;

     label08:
        $r3 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i2 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r3[19] = $i2;

        $i17 = (int) -1;

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>($i17);

        $r11 = new com.hp.hpl.jena.sparql.lang.sparql_10.ParseException;

        specialinvoke $r11.<com.hp.hpl.jena.sparql.lang.sparql_10.ParseException: void <init>()>();

        throw $r11;

     label09:
        r9 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.expr.Expr BrackettedExpression()>();

        goto label17;

     label10:
        $i3 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i19 = (int) -1;

        if $i3 != $i19 goto label11;

        $i9 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label12;

     label11:
        $i9 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label12:
        tableswitch($i9)
        {
            case 8: goto label13;
            case 9: goto label13;
            case 10: goto label13;
            case 11: goto label15;
            case 12: goto label14;
            case 13: goto label14;
            case 14: goto label15;
            case 15: goto label15;
            case 16: goto label15;
            case 17: goto label15;
            case 18: goto label15;
            case 19: goto label15;
            case 20: goto label15;
            case 21: goto label15;
            case 22: goto label15;
            case 23: goto label15;
            case 24: goto label15;
            case 25: goto label15;
            case 26: goto label15;
            case 27: goto label15;
            case 28: goto label15;
            case 29: goto label15;
            case 30: goto label15;
            case 31: goto label15;
            case 32: goto label15;
            case 33: goto label15;
            case 34: goto label15;
            case 35: goto label15;
            case 36: goto label15;
            case 37: goto label15;
            case 38: goto label15;
            case 39: goto label15;
            case 40: goto label13;
            case 41: goto label13;
            case 42: goto label15;
            case 43: goto label15;
            case 44: goto label13;
            case 45: goto label13;
            case 46: goto label13;
            case 47: goto label13;
            case 48: goto label13;
            case 49: goto label13;
            case 50: goto label13;
            case 51: goto label13;
            case 52: goto label13;
            case 53: goto label15;
            case 54: goto label15;
            case 55: goto label15;
            case 56: goto label15;
            case 57: goto label15;
            case 58: goto label15;
            case 59: goto label15;
            case 60: goto label15;
            case 61: goto label15;
            case 62: goto label15;
            case 63: goto label15;
            case 64: goto label15;
            case 65: goto label15;
            case 66: goto label15;
            case 67: goto label15;
            case 68: goto label15;
            case 69: goto label15;
            case 70: goto label15;
            case 71: goto label15;
            case 72: goto label15;
            case 73: goto label13;
            default: goto label15;
        };

     label13:
        r9 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.expr.Expr Constraint()>();

        goto label17;

     label14:
        r10 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.core.Var Var()>();

        goto label17;

     label15:
        $r5 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i4 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r5[20] = $i4;

        $i21 = (int) -1;

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>($i21);

        $r12 = new com.hp.hpl.jena.sparql.lang.sparql_10.ParseException;

        specialinvoke $r12.<com.hp.hpl.jena.sparql.lang.sparql_10.ParseException: void <init>()>();

        throw $r12;

     label16:
        $r7 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i5 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r7[21] = $i5;

        $i23 = (int) -1;

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>($i23);

        $r13 = new com.hp.hpl.jena.sparql.lang.sparql_10.ParseException;

        specialinvoke $r13.<com.hp.hpl.jena.sparql.lang.sparql_10.ParseException: void <init>()>();

        throw $r13;

     label17:
        if r10 != null goto label18;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.query.Query getQuery()>();

        virtualinvoke $r2.<com.hp.hpl.jena.query.Query: void addOrderBy(com.hp.hpl.jena.sparql.expr.Expr,int)>(r9, b11);

        goto label19;

     label18:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.query.Query getQuery()>();

        virtualinvoke $r1.<com.hp.hpl.jena.query.Query: void addOrderBy(com.hp.hpl.jena.graph.Node,int)>(r10, b10);

     label19:
        return;
    }

    public final void LimitOffsetClauses() throws com.hp.hpl.jena.sparql.lang.sparql_10.ParseException
    {
        com.hp.hpl.jena.sparql.lang.sparql_10.ParseException $r5;
        int[] $r1, $r2, $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10, $i12, $i14, $i16;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        $i0 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i10 = (int) -1;

        if $i0 != $i10 goto label01;

        $i6 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label02;

     label01:
        $i6 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label02:
        lookupswitch($i6)
        {
            case 26: goto label03;
            case 27: goto label08;
            default: goto label13;
        };

     label03:
        virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: void LimitClause()>();

        $i3 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i12 = (int) -1;

        if $i3 != $i12 goto label04;

        $i7 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label05;

     label04:
        $i7 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label05:
        lookupswitch($i7)
        {
            case 27: goto label06;
            default: goto label07;
        };

     label06:
        virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: void OffsetClause()>();

        goto label14;

     label07:
        $r2 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i4 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r2[22] = $i4;

        goto label14;

     label08:
        virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: void OffsetClause()>();

        $i1 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i14 = (int) -1;

        if $i1 != $i14 goto label09;

        $i8 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label10;

     label09:
        $i8 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label10:
        lookupswitch($i8)
        {
            case 26: goto label11;
            default: goto label12;
        };

     label11:
        virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: void LimitClause()>();

        goto label14;

     label12:
        $r1 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i2 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r1[23] = $i2;

        goto label14;

     label13:
        $r3 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i5 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r3[24] = $i5;

        $i16 = (int) -1;

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>($i16);

        $r5 = new com.hp.hpl.jena.sparql.lang.sparql_10.ParseException;

        specialinvoke $r5.<com.hp.hpl.jena.sparql.lang.sparql_10.ParseException: void <init>()>();

        throw $r5;

     label14:
        return;
    }

    public final void LimitClause() throws com.hp.hpl.jena.sparql.lang.sparql_10.ParseException
    {
        com.hp.hpl.jena.query.Query $r2;
        com.hp.hpl.jena.sparql.lang.sparql_10.Token $r1;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;
        long $l0;
        java.lang.String $r3;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(26);

        $r1 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(56);

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.query.Query getQuery()>();

        $r3 = $r1.<com.hp.hpl.jena.sparql.lang.sparql_10.Token: java.lang.String image>;

        $l0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: long integerValue(java.lang.String)>($r3);

        virtualinvoke $r2.<com.hp.hpl.jena.query.Query: void setLimit(long)>($l0);

        return;
    }

    public final void OffsetClause() throws com.hp.hpl.jena.sparql.lang.sparql_10.ParseException
    {
        com.hp.hpl.jena.query.Query $r2;
        com.hp.hpl.jena.sparql.lang.sparql_10.Token $r1;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;
        long $l0;
        java.lang.String $r3;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(27);

        $r1 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(56);

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.query.Query getQuery()>();

        $r3 = $r1.<com.hp.hpl.jena.sparql.lang.sparql_10.Token: java.lang.String image>;

        $l0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: long integerValue(java.lang.String)>($r3);

        virtualinvoke $r2.<com.hp.hpl.jena.query.Query: void setOffset(long)>($l0);

        return;
    }

    public final com.hp.hpl.jena.sparql.syntax.Element GroupGraphPattern() throws com.hp.hpl.jena.sparql.lang.sparql_10.ParseException
    {
        com.hp.hpl.jena.sparql.syntax.Element $r1;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(76);

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.syntax.Element GroupGraphPatternSub()>();

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(77);

        return $r1;
    }

    public final com.hp.hpl.jena.sparql.syntax.Element GroupGraphPatternSub() throws com.hp.hpl.jena.sparql.lang.sparql_10.ParseException
    {
        int[] $r4, $r5, $r6, $r8, $r9;
        com.hp.hpl.jena.sparql.syntax.ElementGroup $r11;
        com.hp.hpl.jena.sparql.syntax.Element $r2, $r3, r10;
        com.hp.hpl.jena.sparql.lang.sparql_10.ParseException $r12;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i16, $i18, $i20, $i22, $i24, $i26;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r1;

        r1 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        $r11 = new com.hp.hpl.jena.sparql.syntax.ElementGroup;

        specialinvoke $r11.<com.hp.hpl.jena.sparql.syntax.ElementGroup: void <init>()>();

        virtualinvoke r1.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: void startGroup(com.hp.hpl.jena.sparql.syntax.ElementGroup)>($r11);

        $i0 = r1.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i16 = (int) -1;

        if $i0 != $i16 goto label01;

        $i9 = specialinvoke r1.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label02;

     label01:
        $i9 = r1.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label02:
        tableswitch($i9)
        {
            case 8: goto label03;
            case 9: goto label03;
            case 10: goto label03;
            case 11: goto label03;
            case 12: goto label03;
            case 13: goto label03;
            case 14: goto label04;
            case 15: goto label04;
            case 16: goto label04;
            case 17: goto label04;
            case 18: goto label04;
            case 19: goto label04;
            case 20: goto label04;
            case 21: goto label04;
            case 22: goto label04;
            case 23: goto label04;
            case 24: goto label04;
            case 25: goto label04;
            case 26: goto label04;
            case 27: goto label04;
            case 28: goto label04;
            case 29: goto label04;
            case 30: goto label04;
            case 31: goto label04;
            case 32: goto label04;
            case 33: goto label04;
            case 34: goto label04;
            case 35: goto label04;
            case 36: goto label04;
            case 37: goto label04;
            case 38: goto label04;
            case 39: goto label04;
            case 40: goto label04;
            case 41: goto label04;
            case 42: goto label04;
            case 43: goto label04;
            case 44: goto label04;
            case 45: goto label04;
            case 46: goto label04;
            case 47: goto label04;
            case 48: goto label04;
            case 49: goto label04;
            case 50: goto label04;
            case 51: goto label04;
            case 52: goto label04;
            case 53: goto label03;
            case 54: goto label03;
            case 55: goto label04;
            case 56: goto label03;
            case 57: goto label03;
            case 58: goto label03;
            case 59: goto label03;
            case 60: goto label03;
            case 61: goto label03;
            case 62: goto label03;
            case 63: goto label03;
            case 64: goto label03;
            case 65: goto label04;
            case 66: goto label04;
            case 67: goto label04;
            case 68: goto label04;
            case 69: goto label03;
            case 70: goto label03;
            case 71: goto label03;
            case 72: goto label03;
            case 73: goto label03;
            case 74: goto label04;
            case 75: goto label03;
            case 76: goto label04;
            case 77: goto label04;
            case 78: goto label03;
            case 79: goto label04;
            case 80: goto label03;
            default: goto label04;
        };

     label03:
        virtualinvoke r1.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: void startTriplesBlock()>();

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.syntax.Element TriplesBlock(com.hp.hpl.jena.sparql.syntax.ElementTriplesBlock)>(null);

        virtualinvoke r1.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: void endTriplesBlock()>();

        virtualinvoke $r11.<com.hp.hpl.jena.sparql.syntax.ElementGroup: void addElement(com.hp.hpl.jena.sparql.syntax.Element)>($r2);

        goto label05;

     label04:
        $r9 = r1.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i8 = r1.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r9[25] = $i8;

     label05:
        $i10 = r1.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i18 = (int) -1;

        if $i10 != $i18 goto label06;

        $i11 = specialinvoke r1.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label07;

     label06:
        $i11 = r1.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label07:
        lookupswitch($i11)
        {
            case 36: goto label08;
            case 37: goto label08;
            case 39: goto label08;
            case 76: goto label08;
            default: goto label09;
        };

     label08:
        goto label10;

     label09:
        $r8 = r1.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i7 = r1.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r8[26] = $i7;

        goto label26;

     label10:
        $i1 = r1.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i20 = (int) -1;

        if $i1 != $i20 goto label11;

        $i12 = specialinvoke r1.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label12;

     label11:
        $i12 = r1.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label12:
        lookupswitch($i12)
        {
            case 36: goto label13;
            case 37: goto label13;
            case 39: goto label14;
            case 76: goto label13;
            default: goto label15;
        };

     label13:
        r10 = virtualinvoke r1.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.syntax.Element GraphPatternNotTriples()>();

        goto label16;

     label14:
        r10 = virtualinvoke r1.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.syntax.Element Filter()>();

        goto label16;

     label15:
        $r6 = r1.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i6 = r1.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r6[27] = $i6;

        $i22 = (int) -1;

        specialinvoke r1.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>($i22);

        $r12 = new com.hp.hpl.jena.sparql.lang.sparql_10.ParseException;

        specialinvoke $r12.<com.hp.hpl.jena.sparql.lang.sparql_10.ParseException: void <init>()>();

        throw $r12;

     label16:
        virtualinvoke $r11.<com.hp.hpl.jena.sparql.syntax.ElementGroup: void addElement(com.hp.hpl.jena.sparql.syntax.Element)>(r10);

        $i2 = r1.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i24 = (int) -1;

        if $i2 != $i24 goto label17;

        $i13 = specialinvoke r1.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label18;

     label17:
        $i13 = r1.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label18:
        lookupswitch($i13)
        {
            case 83: goto label19;
            default: goto label20;
        };

     label19:
        specialinvoke r1.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(83);

        goto label21;

     label20:
        $r5 = r1.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i5 = r1.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r5[28] = $i5;

     label21:
        $i3 = r1.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i26 = (int) -1;

        if $i3 != $i26 goto label22;

        $i14 = specialinvoke r1.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label23;

     label22:
        $i14 = r1.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label23:
        tableswitch($i14)
        {
            case 8: goto label24;
            case 9: goto label24;
            case 10: goto label24;
            case 11: goto label24;
            case 12: goto label24;
            case 13: goto label24;
            case 14: goto label25;
            case 15: goto label25;
            case 16: goto label25;
            case 17: goto label25;
            case 18: goto label25;
            case 19: goto label25;
            case 20: goto label25;
            case 21: goto label25;
            case 22: goto label25;
            case 23: goto label25;
            case 24: goto label25;
            case 25: goto label25;
            case 26: goto label25;
            case 27: goto label25;
            case 28: goto label25;
            case 29: goto label25;
            case 30: goto label25;
            case 31: goto label25;
            case 32: goto label25;
            case 33: goto label25;
            case 34: goto label25;
            case 35: goto label25;
            case 36: goto label25;
            case 37: goto label25;
            case 38: goto label25;
            case 39: goto label25;
            case 40: goto label25;
            case 41: goto label25;
            case 42: goto label25;
            case 43: goto label25;
            case 44: goto label25;
            case 45: goto label25;
            case 46: goto label25;
            case 47: goto label25;
            case 48: goto label25;
            case 49: goto label25;
            case 50: goto label25;
            case 51: goto label25;
            case 52: goto label25;
            case 53: goto label24;
            case 54: goto label24;
            case 55: goto label25;
            case 56: goto label24;
            case 57: goto label24;
            case 58: goto label24;
            case 59: goto label24;
            case 60: goto label24;
            case 61: goto label24;
            case 62: goto label24;
            case 63: goto label24;
            case 64: goto label24;
            case 65: goto label25;
            case 66: goto label25;
            case 67: goto label25;
            case 68: goto label25;
            case 69: goto label24;
            case 70: goto label24;
            case 71: goto label24;
            case 72: goto label24;
            case 73: goto label24;
            case 74: goto label25;
            case 75: goto label24;
            case 76: goto label25;
            case 77: goto label25;
            case 78: goto label24;
            case 79: goto label25;
            case 80: goto label24;
            default: goto label25;
        };

     label24:
        virtualinvoke r1.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: void startTriplesBlock()>();

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.syntax.Element TriplesBlock(com.hp.hpl.jena.sparql.syntax.ElementTriplesBlock)>(null);

        virtualinvoke r1.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: void endTriplesBlock()>();

        virtualinvoke $r11.<com.hp.hpl.jena.sparql.syntax.ElementGroup: void addElement(com.hp.hpl.jena.sparql.syntax.Element)>($r3);

        goto label05;

     label25:
        $r4 = r1.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i4 = r1.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r4[29] = $i4;

        goto label05;

     label26:
        virtualinvoke r1.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: void endGroup(com.hp.hpl.jena.sparql.syntax.ElementGroup)>($r11);

        return $r11;
    }

    public final com.hp.hpl.jena.sparql.syntax.Element TriplesBlock(com.hp.hpl.jena.sparql.syntax.ElementTriplesBlock) throws com.hp.hpl.jena.sparql.lang.sparql_10.ParseException
    {
        com.hp.hpl.jena.sparql.syntax.ElementTriplesBlock r4, $r5;
        int[] $r1, $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7, $i9;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        r4 := @parameter0: com.hp.hpl.jena.sparql.syntax.ElementTriplesBlock;

        if r4 != null goto label01;

        $r5 = new com.hp.hpl.jena.sparql.syntax.ElementTriplesBlock;

        specialinvoke $r5.<com.hp.hpl.jena.sparql.syntax.ElementTriplesBlock: void <init>()>();

        r4 = $r5;

     label01:
        virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: void TriplesSameSubject(com.hp.hpl.jena.sparql.syntax.TripleCollectorMark)>(r4);

        $i0 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i7 = (int) -1;

        if $i0 != $i7 goto label02;

        $i4 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label03;

     label02:
        $i4 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label03:
        lookupswitch($i4)
        {
            case 83: goto label04;
            default: goto label09;
        };

     label04:
        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(83);

        $i1 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i9 = (int) -1;

        if $i1 != $i9 goto label05;

        $i5 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label06;

     label05:
        $i5 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label06:
        tableswitch($i5)
        {
            case 8: goto label07;
            case 9: goto label07;
            case 10: goto label07;
            case 11: goto label07;
            case 12: goto label07;
            case 13: goto label07;
            case 14: goto label08;
            case 15: goto label08;
            case 16: goto label08;
            case 17: goto label08;
            case 18: goto label08;
            case 19: goto label08;
            case 20: goto label08;
            case 21: goto label08;
            case 22: goto label08;
            case 23: goto label08;
            case 24: goto label08;
            case 25: goto label08;
            case 26: goto label08;
            case 27: goto label08;
            case 28: goto label08;
            case 29: goto label08;
            case 30: goto label08;
            case 31: goto label08;
            case 32: goto label08;
            case 33: goto label08;
            case 34: goto label08;
            case 35: goto label08;
            case 36: goto label08;
            case 37: goto label08;
            case 38: goto label08;
            case 39: goto label08;
            case 40: goto label08;
            case 41: goto label08;
            case 42: goto label08;
            case 43: goto label08;
            case 44: goto label08;
            case 45: goto label08;
            case 46: goto label08;
            case 47: goto label08;
            case 48: goto label08;
            case 49: goto label08;
            case 50: goto label08;
            case 51: goto label08;
            case 52: goto label08;
            case 53: goto label07;
            case 54: goto label07;
            case 55: goto label08;
            case 56: goto label07;
            case 57: goto label07;
            case 58: goto label07;
            case 59: goto label07;
            case 60: goto label07;
            case 61: goto label07;
            case 62: goto label07;
            case 63: goto label07;
            case 64: goto label07;
            case 65: goto label08;
            case 66: goto label08;
            case 67: goto label08;
            case 68: goto label08;
            case 69: goto label07;
            case 70: goto label07;
            case 71: goto label07;
            case 72: goto label07;
            case 73: goto label07;
            case 74: goto label08;
            case 75: goto label07;
            case 76: goto label08;
            case 77: goto label08;
            case 78: goto label07;
            case 79: goto label08;
            case 80: goto label07;
            default: goto label08;
        };

     label07:
        virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.syntax.Element TriplesBlock(com.hp.hpl.jena.sparql.syntax.ElementTriplesBlock)>(r4);

        goto label10;

     label08:
        $r1 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i2 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r1[30] = $i2;

        goto label10;

     label09:
        $r2 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i3 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r2[31] = $i3;

     label10:
        return r4;
    }

    public final com.hp.hpl.jena.sparql.syntax.Element GraphPatternNotTriples() throws com.hp.hpl.jena.sparql.lang.sparql_10.ParseException
    {
        com.hp.hpl.jena.sparql.lang.sparql_10.ParseException $r4;
        int[] $r1;
        int $i0, $i1, $i2, $i4, $i6;
        com.hp.hpl.jena.sparql.syntax.Element r3;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        $i0 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i4 = (int) -1;

        if $i0 != $i4 goto label1;

        $i2 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label2;

     label1:
        $i2 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label2:
        lookupswitch($i2)
        {
            case 36: goto label5;
            case 37: goto label3;
            case 76: goto label4;
            default: goto label6;
        };

     label3:
        r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.syntax.Element OptionalGraphPattern()>();

        goto label7;

     label4:
        r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.syntax.Element GroupOrUnionGraphPattern()>();

        goto label7;

     label5:
        r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.syntax.Element GraphGraphPattern()>();

        goto label7;

     label6:
        $r1 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i1 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r1[32] = $i1;

        $i6 = (int) -1;

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>($i6);

        $r4 = new com.hp.hpl.jena.sparql.lang.sparql_10.ParseException;

        specialinvoke $r4.<com.hp.hpl.jena.sparql.lang.sparql_10.ParseException: void <init>()>();

        throw $r4;

     label7:
        return r3;
    }

    public final com.hp.hpl.jena.sparql.syntax.Element OptionalGraphPattern() throws com.hp.hpl.jena.sparql.lang.sparql_10.ParseException
    {
        com.hp.hpl.jena.sparql.syntax.ElementOptional $r2;
        com.hp.hpl.jena.sparql.syntax.Element $r1;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(37);

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.syntax.Element GroupGraphPattern()>();

        $r2 = new com.hp.hpl.jena.sparql.syntax.ElementOptional;

        specialinvoke $r2.<com.hp.hpl.jena.sparql.syntax.ElementOptional: void <init>(com.hp.hpl.jena.sparql.syntax.Element)>($r1);

        return $r2;
    }

    public final com.hp.hpl.jena.sparql.syntax.Element GraphGraphPattern() throws com.hp.hpl.jena.sparql.lang.sparql_10.ParseException
    {
        com.hp.hpl.jena.sparql.syntax.ElementNamedGraph $r3;
        com.hp.hpl.jena.sparql.syntax.Element $r2;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;
        com.hp.hpl.jena.graph.Node $r1;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(36);

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.graph.Node VarOrIRIref()>();

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.syntax.Element GroupGraphPattern()>();

        $r3 = new com.hp.hpl.jena.sparql.syntax.ElementNamedGraph;

        specialinvoke $r3.<com.hp.hpl.jena.sparql.syntax.ElementNamedGraph: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.syntax.Element)>($r1, $r2);

        return $r3;
    }

    public final com.hp.hpl.jena.sparql.syntax.Element GroupOrUnionGraphPattern() throws com.hp.hpl.jena.sparql.lang.sparql_10.ParseException
    {
        com.hp.hpl.jena.sparql.syntax.ElementUnion r4, $r7;
        int[] $r3;
        int $i0, $i1, $i2, $i4;
        com.hp.hpl.jena.sparql.syntax.Element $r1, r5, $r6;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        r4 = null;

        r5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.syntax.Element GroupGraphPattern()>();

     label01:
        $i0 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i4 = (int) -1;

        if $i0 != $i4 goto label02;

        $i2 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label03;

     label02:
        $i2 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label03:
        lookupswitch($i2)
        {
            case 38: goto label04;
            default: goto label05;
        };

     label04:
        goto label06;

     label05:
        $r3 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i1 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r3[33] = $i1;

        goto label08;

     label06:
        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(38);

        if r4 != null goto label07;

        $r7 = new com.hp.hpl.jena.sparql.syntax.ElementUnion;

        specialinvoke $r7.<com.hp.hpl.jena.sparql.syntax.ElementUnion: void <init>()>();

        r4 = $r7;

        virtualinvoke $r7.<com.hp.hpl.jena.sparql.syntax.ElementUnion: void addElement(com.hp.hpl.jena.sparql.syntax.Element)>(r5);

     label07:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.syntax.Element GroupGraphPattern()>();

        r5 = $r1;

        virtualinvoke r4.<com.hp.hpl.jena.sparql.syntax.ElementUnion: void addElement(com.hp.hpl.jena.sparql.syntax.Element)>($r1);

        goto label01;

     label08:
        if r4 != null goto label09;

        $r6 = r5;

        goto label10;

     label09:
        $r6 = r4;

     label10:
        return $r6;
    }

    public final com.hp.hpl.jena.sparql.syntax.Element Filter() throws com.hp.hpl.jena.sparql.lang.sparql_10.ParseException
    {
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;
        com.hp.hpl.jena.sparql.syntax.ElementFilter $r2;
        com.hp.hpl.jena.sparql.expr.Expr $r1;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(39);

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.expr.Expr Constraint()>();

        $r2 = new com.hp.hpl.jena.sparql.syntax.ElementFilter;

        specialinvoke $r2.<com.hp.hpl.jena.sparql.syntax.ElementFilter: void <init>(com.hp.hpl.jena.sparql.expr.Expr)>($r1);

        return $r2;
    }

    public final com.hp.hpl.jena.sparql.expr.Expr Constraint() throws com.hp.hpl.jena.sparql.lang.sparql_10.ParseException
    {
        com.hp.hpl.jena.sparql.lang.sparql_10.ParseException $r4;
        com.hp.hpl.jena.sparql.expr.Expr r3;
        int[] $r1;
        int $i0, $i1, $i2, $i4, $i6;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        $i0 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i4 = (int) -1;

        if $i0 != $i4 goto label1;

        $i2 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label2;

     label1:
        $i2 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label2:
        lookupswitch($i2)
        {
            case 8: goto label5;
            case 9: goto label5;
            case 10: goto label5;
            case 40: goto label4;
            case 41: goto label4;
            case 44: goto label4;
            case 45: goto label4;
            case 46: goto label4;
            case 47: goto label4;
            case 48: goto label4;
            case 49: goto label4;
            case 50: goto label4;
            case 51: goto label4;
            case 52: goto label4;
            case 73: goto label3;
            default: goto label6;
        };

     label3:
        r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.expr.Expr BrackettedExpression()>();

        goto label7;

     label4:
        r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.expr.Expr BuiltInCall()>();

        goto label7;

     label5:
        r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.expr.Expr FunctionCall()>();

        goto label7;

     label6:
        $r1 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i1 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r1[34] = $i1;

        $i6 = (int) -1;

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>($i6);

        $r4 = new com.hp.hpl.jena.sparql.lang.sparql_10.ParseException;

        specialinvoke $r4.<com.hp.hpl.jena.sparql.lang.sparql_10.ParseException: void <init>()>();

        throw $r4;

     label7:
        return r3;
    }

    public final com.hp.hpl.jena.sparql.expr.Expr FunctionCall() throws com.hp.hpl.jena.sparql.lang.sparql_10.ParseException
    {
        com.hp.hpl.jena.sparql.expr.E_Function $r3;
        com.hp.hpl.jena.sparql.expr.ExprList $r2;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;
        java.lang.String $r1;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: java.lang.String IRIref()>();

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.expr.ExprList ArgList()>();

        $r3 = new com.hp.hpl.jena.sparql.expr.E_Function;

        specialinvoke $r3.<com.hp.hpl.jena.sparql.expr.E_Function: void <init>(java.lang.String,com.hp.hpl.jena.sparql.expr.ExprList)>($r1, $r2);

        return $r3;
    }

    public final com.hp.hpl.jena.sparql.expr.ExprList ArgList() throws com.hp.hpl.jena.sparql.lang.sparql_10.ParseException
    {
        com.hp.hpl.jena.sparql.lang.sparql_10.ParseException $r8;
        com.hp.hpl.jena.sparql.expr.Expr $r2, $r3;
        int[] $r4, $r5;
        com.hp.hpl.jena.sparql.expr.ExprList $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7, $i9, $i11;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r1;

        r1 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        $r7 = new com.hp.hpl.jena.sparql.expr.ExprList;

        specialinvoke $r7.<com.hp.hpl.jena.sparql.expr.ExprList: void <init>()>();

        $i0 = r1.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i7 = (int) -1;

        if $i0 != $i7 goto label01;

        $i4 = specialinvoke r1.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label02;

     label01:
        $i4 = r1.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label02:
        lookupswitch($i4)
        {
            case 73: goto label04;
            case 75: goto label03;
            default: goto label12;
        };

     label03:
        specialinvoke r1.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(75);

        goto label13;

     label04:
        specialinvoke r1.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(73);

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.expr.Expr Expression()>();

        virtualinvoke $r7.<com.hp.hpl.jena.sparql.expr.ExprList: void add(com.hp.hpl.jena.sparql.expr.Expr)>($r2);

     label05:
        $i1 = r1.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i9 = (int) -1;

        if $i1 != $i9 goto label06;

        $i5 = specialinvoke r1.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label07;

     label06:
        $i5 = r1.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label07:
        lookupswitch($i5)
        {
            case 82: goto label08;
            default: goto label09;
        };

     label08:
        goto label10;

     label09:
        $r4 = r1.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i2 = r1.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r4[35] = $i2;

        goto label11;

     label10:
        specialinvoke r1.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(82);

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.expr.Expr Expression()>();

        virtualinvoke $r7.<com.hp.hpl.jena.sparql.expr.ExprList: void add(com.hp.hpl.jena.sparql.expr.Expr)>($r3);

        goto label05;

     label11:
        specialinvoke r1.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(74);

        goto label13;

     label12:
        $r5 = r1.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i3 = r1.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r5[36] = $i3;

        $i11 = (int) -1;

        specialinvoke r1.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>($i11);

        $r8 = new com.hp.hpl.jena.sparql.lang.sparql_10.ParseException;

        specialinvoke $r8.<com.hp.hpl.jena.sparql.lang.sparql_10.ParseException: void <init>()>();

        throw $r8;

     label13:
        return $r7;
    }

    public final com.hp.hpl.jena.sparql.expr.ExprList ParamList() throws com.hp.hpl.jena.sparql.lang.sparql_10.ParseException
    {
        com.hp.hpl.jena.sparql.expr.Expr $r2, $r3;
        int[] $r4;
        com.hp.hpl.jena.sparql.expr.ExprList $r5;
        int $i0, $i1, $i2, $i4;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r1;

        r1 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        $r5 = new com.hp.hpl.jena.sparql.expr.ExprList;

        specialinvoke $r5.<com.hp.hpl.jena.sparql.expr.ExprList: void <init>()>();

        specialinvoke r1.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(78);

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.expr.Expr Expression()>();

        virtualinvoke $r5.<com.hp.hpl.jena.sparql.expr.ExprList: void add(com.hp.hpl.jena.sparql.expr.Expr)>($r2);

     label1:
        $i0 = r1.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i4 = (int) -1;

        if $i0 != $i4 goto label2;

        $i2 = specialinvoke r1.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label3;

     label2:
        $i2 = r1.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label3:
        lookupswitch($i2)
        {
            case 82: goto label4;
            default: goto label5;
        };

     label4:
        goto label6;

     label5:
        $r4 = r1.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i1 = r1.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r4[37] = $i1;

        goto label7;

     label6:
        specialinvoke r1.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(82);

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.expr.Expr Expression()>();

        virtualinvoke $r5.<com.hp.hpl.jena.sparql.expr.ExprList: void add(com.hp.hpl.jena.sparql.expr.Expr)>($r3);

        goto label1;

     label7:
        specialinvoke r1.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(79);

        return $r5;
    }

    public final com.hp.hpl.jena.sparql.syntax.Template ConstructTemplate() throws com.hp.hpl.jena.sparql.lang.sparql_10.ParseException
    {
        com.hp.hpl.jena.sparql.core.BasicPattern $r2;
        com.hp.hpl.jena.sparql.syntax.Template $r6;
        com.hp.hpl.jena.sparql.syntax.TripleCollectorBGP $r5;
        int[] $r4;
        int $i0, $i1, $i2, $i4;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r3;

        r3 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        $r5 = new com.hp.hpl.jena.sparql.syntax.TripleCollectorBGP;

        specialinvoke $r5.<com.hp.hpl.jena.sparql.syntax.TripleCollectorBGP: void <init>()>();

        $r6 = new com.hp.hpl.jena.sparql.syntax.Template;

        $r2 = virtualinvoke $r5.<com.hp.hpl.jena.sparql.syntax.TripleCollectorBGP: com.hp.hpl.jena.sparql.core.BasicPattern getBGP()>();

        specialinvoke $r6.<com.hp.hpl.jena.sparql.syntax.Template: void <init>(com.hp.hpl.jena.sparql.core.BasicPattern)>($r2);

        virtualinvoke r3.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: void setInConstructTemplate(boolean)>(1);

        specialinvoke r3.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(76);

        $i0 = r3.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i4 = (int) -1;

        if $i0 != $i4 goto label1;

        $i2 = specialinvoke r3.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label2;

     label1:
        $i2 = r3.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label2:
        tableswitch($i2)
        {
            case 8: goto label3;
            case 9: goto label3;
            case 10: goto label3;
            case 11: goto label3;
            case 12: goto label3;
            case 13: goto label3;
            case 14: goto label4;
            case 15: goto label4;
            case 16: goto label4;
            case 17: goto label4;
            case 18: goto label4;
            case 19: goto label4;
            case 20: goto label4;
            case 21: goto label4;
            case 22: goto label4;
            case 23: goto label4;
            case 24: goto label4;
            case 25: goto label4;
            case 26: goto label4;
            case 27: goto label4;
            case 28: goto label4;
            case 29: goto label4;
            case 30: goto label4;
            case 31: goto label4;
            case 32: goto label4;
            case 33: goto label4;
            case 34: goto label4;
            case 35: goto label4;
            case 36: goto label4;
            case 37: goto label4;
            case 38: goto label4;
            case 39: goto label4;
            case 40: goto label4;
            case 41: goto label4;
            case 42: goto label4;
            case 43: goto label4;
            case 44: goto label4;
            case 45: goto label4;
            case 46: goto label4;
            case 47: goto label4;
            case 48: goto label4;
            case 49: goto label4;
            case 50: goto label4;
            case 51: goto label4;
            case 52: goto label4;
            case 53: goto label3;
            case 54: goto label3;
            case 55: goto label4;
            case 56: goto label3;
            case 57: goto label3;
            case 58: goto label3;
            case 59: goto label3;
            case 60: goto label3;
            case 61: goto label3;
            case 62: goto label3;
            case 63: goto label3;
            case 64: goto label3;
            case 65: goto label4;
            case 66: goto label4;
            case 67: goto label4;
            case 68: goto label4;
            case 69: goto label3;
            case 70: goto label3;
            case 71: goto label3;
            case 72: goto label3;
            case 73: goto label3;
            case 74: goto label4;
            case 75: goto label3;
            case 76: goto label4;
            case 77: goto label4;
            case 78: goto label3;
            case 79: goto label4;
            case 80: goto label3;
            default: goto label4;
        };

     label3:
        virtualinvoke r3.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: void ConstructTriples(com.hp.hpl.jena.sparql.syntax.TripleCollectorMark)>($r5);

        goto label5;

     label4:
        $r4 = r3.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i1 = r3.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r4[38] = $i1;

     label5:
        specialinvoke r3.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(77);

        virtualinvoke r3.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: void setInConstructTemplate(boolean)>(0);

        return $r6;
    }

    public final void ConstructTriples(com.hp.hpl.jena.sparql.syntax.TripleCollectorMark) throws com.hp.hpl.jena.sparql.lang.sparql_10.ParseException
    {
        com.hp.hpl.jena.sparql.syntax.TripleCollectorMark r1;
        int[] $r2, $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7, $i9;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        r1 := @parameter0: com.hp.hpl.jena.sparql.syntax.TripleCollectorMark;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: void TriplesSameSubject(com.hp.hpl.jena.sparql.syntax.TripleCollectorMark)>(r1);

        $i0 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i7 = (int) -1;

        if $i0 != $i7 goto label1;

        $i4 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label2;

     label1:
        $i4 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label2:
        lookupswitch($i4)
        {
            case 83: goto label3;
            default: goto label8;
        };

     label3:
        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(83);

        $i1 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i9 = (int) -1;

        if $i1 != $i9 goto label4;

        $i5 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label5;

     label4:
        $i5 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label5:
        tableswitch($i5)
        {
            case 8: goto label6;
            case 9: goto label6;
            case 10: goto label6;
            case 11: goto label6;
            case 12: goto label6;
            case 13: goto label6;
            case 14: goto label7;
            case 15: goto label7;
            case 16: goto label7;
            case 17: goto label7;
            case 18: goto label7;
            case 19: goto label7;
            case 20: goto label7;
            case 21: goto label7;
            case 22: goto label7;
            case 23: goto label7;
            case 24: goto label7;
            case 25: goto label7;
            case 26: goto label7;
            case 27: goto label7;
            case 28: goto label7;
            case 29: goto label7;
            case 30: goto label7;
            case 31: goto label7;
            case 32: goto label7;
            case 33: goto label7;
            case 34: goto label7;
            case 35: goto label7;
            case 36: goto label7;
            case 37: goto label7;
            case 38: goto label7;
            case 39: goto label7;
            case 40: goto label7;
            case 41: goto label7;
            case 42: goto label7;
            case 43: goto label7;
            case 44: goto label7;
            case 45: goto label7;
            case 46: goto label7;
            case 47: goto label7;
            case 48: goto label7;
            case 49: goto label7;
            case 50: goto label7;
            case 51: goto label7;
            case 52: goto label7;
            case 53: goto label6;
            case 54: goto label6;
            case 55: goto label7;
            case 56: goto label6;
            case 57: goto label6;
            case 58: goto label6;
            case 59: goto label6;
            case 60: goto label6;
            case 61: goto label6;
            case 62: goto label6;
            case 63: goto label6;
            case 64: goto label6;
            case 65: goto label7;
            case 66: goto label7;
            case 67: goto label7;
            case 68: goto label7;
            case 69: goto label6;
            case 70: goto label6;
            case 71: goto label6;
            case 72: goto label6;
            case 73: goto label6;
            case 74: goto label7;
            case 75: goto label6;
            case 76: goto label7;
            case 77: goto label7;
            case 78: goto label6;
            case 79: goto label7;
            case 80: goto label6;
            default: goto label7;
        };

     label6:
        virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: void ConstructTriples(com.hp.hpl.jena.sparql.syntax.TripleCollectorMark)>(r1);

        goto label9;

     label7:
        $r2 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i2 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r2[39] = $i2;

        goto label9;

     label8:
        $r3 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i3 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r3[40] = $i3;

     label9:
        return;
    }

    public final void TriplesSameSubject(com.hp.hpl.jena.sparql.syntax.TripleCollectorMark) throws com.hp.hpl.jena.sparql.lang.sparql_10.ParseException
    {
        com.hp.hpl.jena.sparql.syntax.TripleCollectorMark r1;
        com.hp.hpl.jena.graph.Node $r2, $r3;
        com.hp.hpl.jena.sparql.lang.sparql_10.ParseException $r6;
        int[] $r4;
        int $i0, $i1, $i2, $i4, $i6;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        r1 := @parameter0: com.hp.hpl.jena.sparql.syntax.TripleCollectorMark;

        $i0 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i4 = (int) -1;

        if $i0 != $i4 goto label1;

        $i2 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label2;

     label1:
        $i2 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label2:
        tableswitch($i2)
        {
            case 8: goto label3;
            case 9: goto label3;
            case 10: goto label3;
            case 11: goto label3;
            case 12: goto label3;
            case 13: goto label3;
            case 14: goto label5;
            case 15: goto label5;
            case 16: goto label5;
            case 17: goto label5;
            case 18: goto label5;
            case 19: goto label5;
            case 20: goto label5;
            case 21: goto label5;
            case 22: goto label5;
            case 23: goto label5;
            case 24: goto label5;
            case 25: goto label5;
            case 26: goto label5;
            case 27: goto label5;
            case 28: goto label5;
            case 29: goto label5;
            case 30: goto label5;
            case 31: goto label5;
            case 32: goto label5;
            case 33: goto label5;
            case 34: goto label5;
            case 35: goto label5;
            case 36: goto label5;
            case 37: goto label5;
            case 38: goto label5;
            case 39: goto label5;
            case 40: goto label5;
            case 41: goto label5;
            case 42: goto label5;
            case 43: goto label5;
            case 44: goto label5;
            case 45: goto label5;
            case 46: goto label5;
            case 47: goto label5;
            case 48: goto label5;
            case 49: goto label5;
            case 50: goto label5;
            case 51: goto label5;
            case 52: goto label5;
            case 53: goto label3;
            case 54: goto label3;
            case 55: goto label5;
            case 56: goto label3;
            case 57: goto label3;
            case 58: goto label3;
            case 59: goto label3;
            case 60: goto label3;
            case 61: goto label3;
            case 62: goto label3;
            case 63: goto label3;
            case 64: goto label3;
            case 65: goto label5;
            case 66: goto label5;
            case 67: goto label5;
            case 68: goto label5;
            case 69: goto label3;
            case 70: goto label3;
            case 71: goto label3;
            case 72: goto label3;
            case 73: goto label4;
            case 74: goto label5;
            case 75: goto label3;
            case 76: goto label5;
            case 77: goto label5;
            case 78: goto label4;
            case 79: goto label5;
            case 80: goto label3;
            default: goto label5;
        };

     label3:
        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.graph.Node VarOrTerm()>();

        virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: void PropertyListNotEmpty(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.syntax.TripleCollectorMark)>($r3, r1);

        goto label6;

     label4:
        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.graph.Node TriplesNode(com.hp.hpl.jena.sparql.syntax.TripleCollectorMark)>(r1);

        virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: void PropertyList(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.syntax.TripleCollectorMark)>($r2, r1);

        goto label6;

     label5:
        $r4 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i1 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r4[41] = $i1;

        $i6 = (int) -1;

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>($i6);

        $r6 = new com.hp.hpl.jena.sparql.lang.sparql_10.ParseException;

        specialinvoke $r6.<com.hp.hpl.jena.sparql.lang.sparql_10.ParseException: void <init>()>();

        throw $r6;

     label6:
        return;
    }

    public final void PropertyListNotEmpty(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.sparql.syntax.TripleCollectorMark) throws com.hp.hpl.jena.sparql.lang.sparql_10.ParseException
    {
        com.hp.hpl.jena.sparql.syntax.TripleCollectorMark r3;
        com.hp.hpl.jena.graph.Node $r1, r2, $r4;
        int[] $r5, $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7, $i9;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        r2 := @parameter0: com.hp.hpl.jena.graph.Node;

        r3 := @parameter1: com.hp.hpl.jena.sparql.syntax.TripleCollectorMark;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.graph.Node Verb()>();

        virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: void ObjectList(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.path.Path,com.hp.hpl.jena.sparql.syntax.TripleCollectorMark)>(r2, $r1, null, r3);

     label01:
        $i3 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i7 = (int) -1;

        if $i3 != $i7 goto label02;

        $i4 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label03;

     label02:
        $i4 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label03:
        lookupswitch($i4)
        {
            case 81: goto label04;
            default: goto label05;
        };

     label04:
        goto label06;

     label05:
        $r6 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i2 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r6[42] = $i2;

        goto label11;

     label06:
        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(81);

        $i0 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i9 = (int) -1;

        if $i0 != $i9 goto label07;

        $i5 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label08;

     label07:
        $i5 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label08:
        tableswitch($i5)
        {
            case 8: goto label09;
            case 9: goto label09;
            case 10: goto label09;
            case 11: goto label10;
            case 12: goto label09;
            case 13: goto label09;
            case 14: goto label10;
            case 15: goto label10;
            case 16: goto label10;
            case 17: goto label09;
            default: goto label10;
        };

     label09:
        $r4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.graph.Node Verb()>();

        virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: void ObjectList(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.path.Path,com.hp.hpl.jena.sparql.syntax.TripleCollectorMark)>(r2, $r4, null, r3);

        goto label01;

     label10:
        $r5 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i1 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r5[43] = $i1;

        goto label01;

     label11:
        return;
    }

    public final void PropertyList(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.sparql.syntax.TripleCollectorMark) throws com.hp.hpl.jena.sparql.lang.sparql_10.ParseException
    {
        com.hp.hpl.jena.sparql.syntax.TripleCollectorMark r2;
        com.hp.hpl.jena.graph.Node r1;
        int[] $r3;
        int $i0, $i1, $i2, $i4;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r2 := @parameter1: com.hp.hpl.jena.sparql.syntax.TripleCollectorMark;

        $i0 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i4 = (int) -1;

        if $i0 != $i4 goto label1;

        $i2 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label2;

     label1:
        $i2 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label2:
        tableswitch($i2)
        {
            case 8: goto label3;
            case 9: goto label3;
            case 10: goto label3;
            case 11: goto label4;
            case 12: goto label3;
            case 13: goto label3;
            case 14: goto label4;
            case 15: goto label4;
            case 16: goto label4;
            case 17: goto label3;
            default: goto label4;
        };

     label3:
        virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: void PropertyListNotEmpty(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.syntax.TripleCollectorMark)>(r1, r2);

        goto label5;

     label4:
        $r3 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i1 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r3[44] = $i1;

     label5:
        return;
    }

    public final void ObjectList(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.sparql.path.Path, com.hp.hpl.jena.sparql.syntax.TripleCollectorMark) throws com.hp.hpl.jena.sparql.lang.sparql_10.ParseException
    {
        com.hp.hpl.jena.sparql.syntax.TripleCollectorMark r4;
        com.hp.hpl.jena.graph.Node r1, r2;
        com.hp.hpl.jena.sparql.path.Path r3;
        int[] $r5;
        int $i0, $i1, $i2, $i4;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        r3 := @parameter2: com.hp.hpl.jena.sparql.path.Path;

        r4 := @parameter3: com.hp.hpl.jena.sparql.syntax.TripleCollectorMark;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: void Object(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.path.Path,com.hp.hpl.jena.sparql.syntax.TripleCollectorMark)>(r1, r2, r3, r4);

     label1:
        $i0 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i4 = (int) -1;

        if $i0 != $i4 goto label2;

        $i2 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label3;

     label2:
        $i2 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label3:
        lookupswitch($i2)
        {
            case 82: goto label4;
            default: goto label5;
        };

     label4:
        goto label6;

     label5:
        $r5 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i1 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r5[45] = $i1;

        goto label7;

     label6:
        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(82);

        virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: void Object(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.path.Path,com.hp.hpl.jena.sparql.syntax.TripleCollectorMark)>(r1, r2, r3, r4);

        goto label1;

     label7:
        return;
    }

    public final void Object(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.sparql.path.Path, com.hp.hpl.jena.sparql.syntax.TripleCollectorMark) throws com.hp.hpl.jena.sparql.lang.sparql_10.ParseException
    {
        com.hp.hpl.jena.sparql.syntax.TripleCollectorMark r0;
        com.hp.hpl.jena.sparql.path.Path r5;
        int $i0;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r1;
        com.hp.hpl.jena.graph.Node $r2, r3, r4;

        r1 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        r3 := @parameter0: com.hp.hpl.jena.graph.Node;

        r4 := @parameter1: com.hp.hpl.jena.graph.Node;

        r5 := @parameter2: com.hp.hpl.jena.sparql.path.Path;

        r0 := @parameter3: com.hp.hpl.jena.sparql.syntax.TripleCollectorMark;

        $i0 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.syntax.TripleCollectorMark: int mark()>();

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.graph.Node GraphNode(com.hp.hpl.jena.sparql.syntax.TripleCollectorMark)>(r0);

        virtualinvoke r1.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: void insert(com.hp.hpl.jena.sparql.syntax.TripleCollectorMark,int,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.path.Path,com.hp.hpl.jena.graph.Node)>(r0, $i0, r3, r4, r5, $r2);

        return;
    }

    public final com.hp.hpl.jena.graph.Node Verb() throws com.hp.hpl.jena.sparql.lang.sparql_10.ParseException
    {
        com.hp.hpl.jena.graph.Node r3;
        com.hp.hpl.jena.sparql.lang.sparql_10.ParseException $r4;
        int[] $r1;
        int $i0, $i1, $i2, $i4, $i6;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        $i0 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i4 = (int) -1;

        if $i0 != $i4 goto label1;

        $i2 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label2;

     label1:
        $i2 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label2:
        tableswitch($i2)
        {
            case 8: goto label3;
            case 9: goto label3;
            case 10: goto label3;
            case 11: goto label5;
            case 12: goto label3;
            case 13: goto label3;
            case 14: goto label5;
            case 15: goto label5;
            case 16: goto label5;
            case 17: goto label4;
            default: goto label5;
        };

     label3:
        r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.graph.Node VarOrIRIref()>();

        goto label6;

     label4:
        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(17);

        r3 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.graph.Node nRDFtype>;

        goto label6;

     label5:
        $r1 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i1 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r1[46] = $i1;

        $i6 = (int) -1;

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>($i6);

        $r4 = new com.hp.hpl.jena.sparql.lang.sparql_10.ParseException;

        specialinvoke $r4.<com.hp.hpl.jena.sparql.lang.sparql_10.ParseException: void <init>()>();

        throw $r4;

     label6:
        return r3;
    }

    public final com.hp.hpl.jena.graph.Node TriplesNode(com.hp.hpl.jena.sparql.syntax.TripleCollectorMark) throws com.hp.hpl.jena.sparql.lang.sparql_10.ParseException
    {
        com.hp.hpl.jena.sparql.syntax.TripleCollectorMark r1;
        com.hp.hpl.jena.graph.Node $r2, $r3;
        com.hp.hpl.jena.sparql.lang.sparql_10.ParseException $r6;
        int[] $r4;
        int $i0, $i1, $i2, $i4, $i6;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        r1 := @parameter0: com.hp.hpl.jena.sparql.syntax.TripleCollectorMark;

        $i0 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i4 = (int) -1;

        if $i0 != $i4 goto label1;

        $i2 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label2;

     label1:
        $i2 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label2:
        lookupswitch($i2)
        {
            case 73: goto label3;
            case 78: goto label4;
            default: goto label5;
        };

     label3:
        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.graph.Node Collection(com.hp.hpl.jena.sparql.syntax.TripleCollectorMark)>(r1);

        return $r3;

     label4:
        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.graph.Node BlankNodePropertyList(com.hp.hpl.jena.sparql.syntax.TripleCollectorMark)>(r1);

        return $r2;

     label5:
        $r4 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i1 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r4[47] = $i1;

        $i6 = (int) -1;

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>($i6);

        $r6 = new com.hp.hpl.jena.sparql.lang.sparql_10.ParseException;

        specialinvoke $r6.<com.hp.hpl.jena.sparql.lang.sparql_10.ParseException: void <init>()>();

        throw $r6;
    }

    public final com.hp.hpl.jena.graph.Node BlankNodePropertyList(com.hp.hpl.jena.sparql.syntax.TripleCollectorMark) throws com.hp.hpl.jena.sparql.lang.sparql_10.ParseException
    {
        com.hp.hpl.jena.sparql.syntax.TripleCollectorMark r3;
        com.hp.hpl.jena.sparql.lang.sparql_10.Token $r1;
        int $i0, $i1;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;
        com.hp.hpl.jena.graph.Node $r2;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        r3 := @parameter0: com.hp.hpl.jena.sparql.syntax.TripleCollectorMark;

        $r1 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(78);

        $i1 = $r1.<com.hp.hpl.jena.sparql.lang.sparql_10.Token: int beginLine>;

        $i0 = $r1.<com.hp.hpl.jena.sparql.lang.sparql_10.Token: int beginColumn>;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.graph.Node createBNode(int,int)>($i1, $i0);

        virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: void PropertyListNotEmpty(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.syntax.TripleCollectorMark)>($r2, r3);

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(79);

        return $r2;
    }

    public final com.hp.hpl.jena.graph.Node Collection(com.hp.hpl.jena.sparql.syntax.TripleCollectorMark) throws com.hp.hpl.jena.sparql.lang.sparql_10.ParseException
    {
        com.hp.hpl.jena.graph.Node $r2, $r3, $r5, $r6, $r8, $r9, $r10, r11, r12;
        com.hp.hpl.jena.sparql.lang.sparql_10.Token $r1;
        int[] $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;
        com.hp.hpl.jena.sparql.syntax.TripleCollectorMark r4;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        r4 := @parameter0: com.hp.hpl.jena.sparql.syntax.TripleCollectorMark;

        r11 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.graph.Node nRDFnil>;

        r12 = null;

        $r1 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(73);

     label01:
        $i1 = $r1.<com.hp.hpl.jena.sparql.lang.sparql_10.Token: int beginLine>;

        $i0 = $r1.<com.hp.hpl.jena.sparql.lang.sparql_10.Token: int beginColumn>;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.graph.Node createListNode(int,int)>($i1, $i0);

        $r3 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.graph.Node nRDFnil>;

        if r11 != $r3 goto label02;

        r11 = $r2;

     label02:
        if r12 == null goto label03;

        $r10 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.graph.Node nRDFrest>;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: void insert(com.hp.hpl.jena.sparql.syntax.TripleCollector,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r4, r12, $r10, $r2);

     label03:
        $i2 = interfaceinvoke r4.<com.hp.hpl.jena.sparql.syntax.TripleCollectorMark: int mark()>();

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.graph.Node GraphNode(com.hp.hpl.jena.sparql.syntax.TripleCollectorMark)>(r4);

        $r6 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.graph.Node nRDFfirst>;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: void insert(com.hp.hpl.jena.sparql.syntax.TripleCollectorMark,int,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r4, $i2, $r2, $r6, $r5);

        r12 = $r2;

        $i3 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i7 = (int) -1;

        if $i3 != $i7 goto label04;

        $i5 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label05;

     label04:
        $i5 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label05:
        tableswitch($i5)
        {
            case 8: goto label06;
            case 9: goto label06;
            case 10: goto label06;
            case 11: goto label06;
            case 12: goto label06;
            case 13: goto label06;
            case 14: goto label07;
            case 15: goto label07;
            case 16: goto label07;
            case 17: goto label07;
            case 18: goto label07;
            case 19: goto label07;
            case 20: goto label07;
            case 21: goto label07;
            case 22: goto label07;
            case 23: goto label07;
            case 24: goto label07;
            case 25: goto label07;
            case 26: goto label07;
            case 27: goto label07;
            case 28: goto label07;
            case 29: goto label07;
            case 30: goto label07;
            case 31: goto label07;
            case 32: goto label07;
            case 33: goto label07;
            case 34: goto label07;
            case 35: goto label07;
            case 36: goto label07;
            case 37: goto label07;
            case 38: goto label07;
            case 39: goto label07;
            case 40: goto label07;
            case 41: goto label07;
            case 42: goto label07;
            case 43: goto label07;
            case 44: goto label07;
            case 45: goto label07;
            case 46: goto label07;
            case 47: goto label07;
            case 48: goto label07;
            case 49: goto label07;
            case 50: goto label07;
            case 51: goto label07;
            case 52: goto label07;
            case 53: goto label06;
            case 54: goto label06;
            case 55: goto label07;
            case 56: goto label06;
            case 57: goto label06;
            case 58: goto label06;
            case 59: goto label06;
            case 60: goto label06;
            case 61: goto label06;
            case 62: goto label06;
            case 63: goto label06;
            case 64: goto label06;
            case 65: goto label07;
            case 66: goto label07;
            case 67: goto label07;
            case 68: goto label07;
            case 69: goto label06;
            case 70: goto label06;
            case 71: goto label06;
            case 72: goto label06;
            case 73: goto label06;
            case 74: goto label07;
            case 75: goto label06;
            case 76: goto label07;
            case 77: goto label07;
            case 78: goto label06;
            case 79: goto label07;
            case 80: goto label06;
            default: goto label07;
        };

     label06:
        goto label08;

     label07:
        $r7 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i4 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r7[48] = $i4;

        goto label09;

     label08:
        goto label01;

     label09:
        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(74);

        if $r2 == null goto label10;

        $r9 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.graph.Node nRDFrest>;

        $r8 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.graph.Node nRDFnil>;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: void insert(com.hp.hpl.jena.sparql.syntax.TripleCollector,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r4, $r2, $r9, $r8);

     label10:
        return r11;
    }

    public final com.hp.hpl.jena.graph.Node GraphNode(com.hp.hpl.jena.sparql.syntax.TripleCollectorMark) throws com.hp.hpl.jena.sparql.lang.sparql_10.ParseException
    {
        com.hp.hpl.jena.sparql.syntax.TripleCollectorMark r1;
        com.hp.hpl.jena.graph.Node $r2, $r3;
        com.hp.hpl.jena.sparql.lang.sparql_10.ParseException $r6;
        int[] $r4;
        int $i0, $i1, $i2, $i4, $i6;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        r1 := @parameter0: com.hp.hpl.jena.sparql.syntax.TripleCollectorMark;

        $i0 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i4 = (int) -1;

        if $i0 != $i4 goto label1;

        $i2 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label2;

     label1:
        $i2 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label2:
        tableswitch($i2)
        {
            case 8: goto label3;
            case 9: goto label3;
            case 10: goto label3;
            case 11: goto label3;
            case 12: goto label3;
            case 13: goto label3;
            case 14: goto label5;
            case 15: goto label5;
            case 16: goto label5;
            case 17: goto label5;
            case 18: goto label5;
            case 19: goto label5;
            case 20: goto label5;
            case 21: goto label5;
            case 22: goto label5;
            case 23: goto label5;
            case 24: goto label5;
            case 25: goto label5;
            case 26: goto label5;
            case 27: goto label5;
            case 28: goto label5;
            case 29: goto label5;
            case 30: goto label5;
            case 31: goto label5;
            case 32: goto label5;
            case 33: goto label5;
            case 34: goto label5;
            case 35: goto label5;
            case 36: goto label5;
            case 37: goto label5;
            case 38: goto label5;
            case 39: goto label5;
            case 40: goto label5;
            case 41: goto label5;
            case 42: goto label5;
            case 43: goto label5;
            case 44: goto label5;
            case 45: goto label5;
            case 46: goto label5;
            case 47: goto label5;
            case 48: goto label5;
            case 49: goto label5;
            case 50: goto label5;
            case 51: goto label5;
            case 52: goto label5;
            case 53: goto label3;
            case 54: goto label3;
            case 55: goto label5;
            case 56: goto label3;
            case 57: goto label3;
            case 58: goto label3;
            case 59: goto label3;
            case 60: goto label3;
            case 61: goto label3;
            case 62: goto label3;
            case 63: goto label3;
            case 64: goto label3;
            case 65: goto label5;
            case 66: goto label5;
            case 67: goto label5;
            case 68: goto label5;
            case 69: goto label3;
            case 70: goto label3;
            case 71: goto label3;
            case 72: goto label3;
            case 73: goto label4;
            case 74: goto label5;
            case 75: goto label3;
            case 76: goto label5;
            case 77: goto label5;
            case 78: goto label4;
            case 79: goto label5;
            case 80: goto label3;
            default: goto label5;
        };

     label3:
        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.graph.Node VarOrTerm()>();

        return $r3;

     label4:
        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.graph.Node TriplesNode(com.hp.hpl.jena.sparql.syntax.TripleCollectorMark)>(r1);

        return $r2;

     label5:
        $r4 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i1 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r4[49] = $i1;

        $i6 = (int) -1;

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>($i6);

        $r6 = new com.hp.hpl.jena.sparql.lang.sparql_10.ParseException;

        specialinvoke $r6.<com.hp.hpl.jena.sparql.lang.sparql_10.ParseException: void <init>()>();

        throw $r6;
    }

    public final com.hp.hpl.jena.graph.Node VarOrTerm() throws com.hp.hpl.jena.sparql.lang.sparql_10.ParseException
    {
        com.hp.hpl.jena.graph.Node r3;
        com.hp.hpl.jena.sparql.lang.sparql_10.ParseException $r4;
        int[] $r1;
        int $i0, $i1, $i2, $i4, $i6;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        $i0 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i4 = (int) -1;

        if $i0 != $i4 goto label1;

        $i2 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label2;

     label1:
        $i2 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label2:
        tableswitch($i2)
        {
            case 8: goto label4;
            case 9: goto label4;
            case 10: goto label4;
            case 11: goto label4;
            case 12: goto label3;
            case 13: goto label3;
            case 14: goto label5;
            case 15: goto label5;
            case 16: goto label5;
            case 17: goto label5;
            case 18: goto label5;
            case 19: goto label5;
            case 20: goto label5;
            case 21: goto label5;
            case 22: goto label5;
            case 23: goto label5;
            case 24: goto label5;
            case 25: goto label5;
            case 26: goto label5;
            case 27: goto label5;
            case 28: goto label5;
            case 29: goto label5;
            case 30: goto label5;
            case 31: goto label5;
            case 32: goto label5;
            case 33: goto label5;
            case 34: goto label5;
            case 35: goto label5;
            case 36: goto label5;
            case 37: goto label5;
            case 38: goto label5;
            case 39: goto label5;
            case 40: goto label5;
            case 41: goto label5;
            case 42: goto label5;
            case 43: goto label5;
            case 44: goto label5;
            case 45: goto label5;
            case 46: goto label5;
            case 47: goto label5;
            case 48: goto label5;
            case 49: goto label5;
            case 50: goto label5;
            case 51: goto label5;
            case 52: goto label5;
            case 53: goto label4;
            case 54: goto label4;
            case 55: goto label5;
            case 56: goto label4;
            case 57: goto label4;
            case 58: goto label4;
            case 59: goto label4;
            case 60: goto label4;
            case 61: goto label4;
            case 62: goto label4;
            case 63: goto label4;
            case 64: goto label4;
            case 65: goto label5;
            case 66: goto label5;
            case 67: goto label5;
            case 68: goto label5;
            case 69: goto label4;
            case 70: goto label4;
            case 71: goto label4;
            case 72: goto label4;
            case 73: goto label5;
            case 74: goto label5;
            case 75: goto label4;
            case 76: goto label5;
            case 77: goto label5;
            case 78: goto label5;
            case 79: goto label5;
            case 80: goto label4;
            default: goto label5;
        };

     label3:
        r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.core.Var Var()>();

        goto label6;

     label4:
        r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.graph.Node GraphTerm()>();

        goto label6;

     label5:
        $r1 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i1 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r1[50] = $i1;

        $i6 = (int) -1;

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>($i6);

        $r4 = new com.hp.hpl.jena.sparql.lang.sparql_10.ParseException;

        specialinvoke $r4.<com.hp.hpl.jena.sparql.lang.sparql_10.ParseException: void <init>()>();

        throw $r4;

     label6:
        return r3;
    }

    public final com.hp.hpl.jena.graph.Node VarOrIRIref() throws com.hp.hpl.jena.sparql.lang.sparql_10.ParseException
    {
        com.hp.hpl.jena.graph.Node r4;
        com.hp.hpl.jena.sparql.lang.sparql_10.ParseException $r5;
        int[] $r2;
        int $i0, $i1, $i2, $i4, $i6;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;
        java.lang.String $r1;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        $i0 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i4 = (int) -1;

        if $i0 != $i4 goto label1;

        $i2 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label2;

     label1:
        $i2 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label2:
        tableswitch($i2)
        {
            case 8: goto label4;
            case 9: goto label4;
            case 10: goto label4;
            case 11: goto label5;
            case 12: goto label3;
            case 13: goto label3;
            default: goto label5;
        };

     label3:
        r4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.core.Var Var()>();

        goto label6;

     label4:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: java.lang.String IRIref()>();

        r4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.graph.Node createNode(java.lang.String)>($r1);

        goto label6;

     label5:
        $r2 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i1 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r2[51] = $i1;

        $i6 = (int) -1;

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>($i6);

        $r5 = new com.hp.hpl.jena.sparql.lang.sparql_10.ParseException;

        specialinvoke $r5.<com.hp.hpl.jena.sparql.lang.sparql_10.ParseException: void <init>()>();

        throw $r5;

     label6:
        return r4;
    }

    public final com.hp.hpl.jena.sparql.core.Var Var() throws com.hp.hpl.jena.sparql.lang.sparql_10.ParseException
    {
        com.hp.hpl.jena.sparql.core.Var $r2;
        com.hp.hpl.jena.sparql.lang.sparql_10.ParseException $r6;
        com.hp.hpl.jena.sparql.lang.sparql_10.Token r5;
        int[] $r3;
        int $i0, $i1, $i2, $i3, $i4, $i6, $i8;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;
        java.lang.String $r1;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        $i0 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i6 = (int) -1;

        if $i0 != $i6 goto label1;

        $i4 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label2;

     label1:
        $i4 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label2:
        lookupswitch($i4)
        {
            case 12: goto label3;
            case 13: goto label4;
            default: goto label5;
        };

     label3:
        r5 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(12);

        goto label6;

     label4:
        r5 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(13);

        goto label6;

     label5:
        $r3 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i3 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r3[52] = $i3;

        $i8 = (int) -1;

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>($i8);

        $r6 = new com.hp.hpl.jena.sparql.lang.sparql_10.ParseException;

        specialinvoke $r6.<com.hp.hpl.jena.sparql.lang.sparql_10.ParseException: void <init>()>();

        throw $r6;

     label6:
        $r1 = r5.<com.hp.hpl.jena.sparql.lang.sparql_10.Token: java.lang.String image>;

        $i2 = r5.<com.hp.hpl.jena.sparql.lang.sparql_10.Token: int beginLine>;

        $i1 = r5.<com.hp.hpl.jena.sparql.lang.sparql_10.Token: int beginColumn>;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.core.Var createVariable(java.lang.String,int,int)>($r1, $i2, $i1);

        return $r2;
    }

    public final com.hp.hpl.jena.graph.Node GraphTerm() throws com.hp.hpl.jena.sparql.lang.sparql_10.ParseException
    {
        com.hp.hpl.jena.graph.Node $r1, $r2, $r3, $r4, $r5, $r7;
        com.hp.hpl.jena.sparql.lang.sparql_10.ParseException $r10;
        int[] $r8;
        int $i0, $i1, $i2, $i4, $i6;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;
        java.lang.String $r6;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        $i0 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i4 = (int) -1;

        if $i0 != $i4 goto label1;

        $i2 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label2;

     label1:
        $i2 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label2:
        tableswitch($i2)
        {
            case 8: goto label3;
            case 9: goto label3;
            case 10: goto label3;
            case 11: goto label7;
            case 12: goto label9;
            case 13: goto label9;
            case 14: goto label9;
            case 15: goto label9;
            case 16: goto label9;
            case 17: goto label9;
            case 18: goto label9;
            case 19: goto label9;
            case 20: goto label9;
            case 21: goto label9;
            case 22: goto label9;
            case 23: goto label9;
            case 24: goto label9;
            case 25: goto label9;
            case 26: goto label9;
            case 27: goto label9;
            case 28: goto label9;
            case 29: goto label9;
            case 30: goto label9;
            case 31: goto label9;
            case 32: goto label9;
            case 33: goto label9;
            case 34: goto label9;
            case 35: goto label9;
            case 36: goto label9;
            case 37: goto label9;
            case 38: goto label9;
            case 39: goto label9;
            case 40: goto label9;
            case 41: goto label9;
            case 42: goto label9;
            case 43: goto label9;
            case 44: goto label9;
            case 45: goto label9;
            case 46: goto label9;
            case 47: goto label9;
            case 48: goto label9;
            case 49: goto label9;
            case 50: goto label9;
            case 51: goto label9;
            case 52: goto label9;
            case 53: goto label6;
            case 54: goto label6;
            case 55: goto label9;
            case 56: goto label5;
            case 57: goto label5;
            case 58: goto label5;
            case 59: goto label5;
            case 60: goto label5;
            case 61: goto label5;
            case 62: goto label5;
            case 63: goto label5;
            case 64: goto label5;
            case 65: goto label9;
            case 66: goto label9;
            case 67: goto label9;
            case 68: goto label9;
            case 69: goto label4;
            case 70: goto label4;
            case 71: goto label4;
            case 72: goto label4;
            case 73: goto label9;
            case 74: goto label9;
            case 75: goto label8;
            case 76: goto label9;
            case 77: goto label9;
            case 78: goto label9;
            case 79: goto label9;
            case 80: goto label7;
            default: goto label9;
        };

     label3:
        $r6 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: java.lang.String IRIref()>();

        $r7 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.graph.Node createNode(java.lang.String)>($r6);

        return $r7;

     label4:
        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.graph.Node RDFLiteral()>();

        return $r2;

     label5:
        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.graph.Node NumericLiteral()>();

        return $r3;

     label6:
        $r4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.graph.Node BooleanLiteral()>();

        return $r4;

     label7:
        $r5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.graph.Node BlankNode()>();

        return $r5;

     label8:
        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(75);

        $r1 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.graph.Node nRDFnil>;

        return $r1;

     label9:
        $r8 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i1 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r8[53] = $i1;

        $i6 = (int) -1;

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>($i6);

        $r10 = new com.hp.hpl.jena.sparql.lang.sparql_10.ParseException;

        specialinvoke $r10.<com.hp.hpl.jena.sparql.lang.sparql_10.ParseException: void <init>()>();

        throw $r10;
    }

    public final com.hp.hpl.jena.sparql.expr.Expr Expression() throws com.hp.hpl.jena.sparql.lang.sparql_10.ParseException
    {
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;
        com.hp.hpl.jena.sparql.expr.Expr $r1;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.expr.Expr ConditionalOrExpression()>();

        return $r1;
    }

    public final com.hp.hpl.jena.sparql.expr.Expr ConditionalOrExpression() throws com.hp.hpl.jena.sparql.lang.sparql_10.ParseException
    {
        com.hp.hpl.jena.sparql.expr.E_LogicalOr $r5;
        com.hp.hpl.jena.sparql.expr.Expr $r1, r4;
        int[] $r3;
        int $i0, $i1, $i2, $i4;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        r4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.expr.Expr ConditionalAndExpression()>();

     label1:
        $i0 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i4 = (int) -1;

        if $i0 != $i4 goto label2;

        $i2 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label3;

     label2:
        $i2 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label3:
        lookupswitch($i2)
        {
            case 93: goto label4;
            default: goto label5;
        };

     label4:
        goto label6;

     label5:
        $r3 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i1 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r3[54] = $i1;

        goto label7;

     label6:
        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(93);

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.expr.Expr ConditionalAndExpression()>();

        $r5 = new com.hp.hpl.jena.sparql.expr.E_LogicalOr;

        specialinvoke $r5.<com.hp.hpl.jena.sparql.expr.E_LogicalOr: void <init>(com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.expr.Expr)>(r4, $r1);

        r4 = $r5;

        goto label1;

     label7:
        return r4;
    }

    public final com.hp.hpl.jena.sparql.expr.Expr ConditionalAndExpression() throws com.hp.hpl.jena.sparql.lang.sparql_10.ParseException
    {
        com.hp.hpl.jena.sparql.expr.E_LogicalAnd $r5;
        com.hp.hpl.jena.sparql.expr.Expr $r1, r4;
        int[] $r3;
        int $i0, $i1, $i2, $i4;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        r4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.expr.Expr ValueLogical()>();

     label1:
        $i0 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i4 = (int) -1;

        if $i0 != $i4 goto label2;

        $i2 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label3;

     label2:
        $i2 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label3:
        lookupswitch($i2)
        {
            case 94: goto label4;
            default: goto label5;
        };

     label4:
        goto label6;

     label5:
        $r3 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i1 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r3[55] = $i1;

        goto label7;

     label6:
        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(94);

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.expr.Expr ValueLogical()>();

        $r5 = new com.hp.hpl.jena.sparql.expr.E_LogicalAnd;

        specialinvoke $r5.<com.hp.hpl.jena.sparql.expr.E_LogicalAnd: void <init>(com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.expr.Expr)>(r4, $r1);

        r4 = $r5;

        goto label1;

     label7:
        return r4;
    }

    public final com.hp.hpl.jena.sparql.expr.Expr ValueLogical() throws com.hp.hpl.jena.sparql.lang.sparql_10.ParseException
    {
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;
        com.hp.hpl.jena.sparql.expr.Expr $r1;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.expr.Expr RelationalExpression()>();

        return $r1;
    }

    public final com.hp.hpl.jena.sparql.expr.Expr RelationalExpression() throws com.hp.hpl.jena.sparql.lang.sparql_10.ParseException
    {
        com.hp.hpl.jena.sparql.expr.E_GreaterThanOrEqual $r23;
        com.hp.hpl.jena.sparql.expr.E_NotEquals $r19;
        com.hp.hpl.jena.sparql.lang.sparql_10.ParseException $r24;
        com.hp.hpl.jena.sparql.expr.Expr $r1, $r2, $r4, $r6, $r8, $r10, $r12, r17;
        com.hp.hpl.jena.sparql.expr.E_GreaterThan $r21;
        int[] $r14, $r16;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7, $i9, $i11;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;
        com.hp.hpl.jena.sparql.expr.E_Equals $r18;
        com.hp.hpl.jena.sparql.expr.E_LessThan $r20;
        com.hp.hpl.jena.sparql.expr.E_LessThanOrEqual $r22;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.expr.Expr NumericExpression()>();

        r17 = $r1;

        $i0 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i7 = (int) -1;

        if $i0 != $i7 goto label01;

        $i4 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label02;

     label01:
        $i4 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label02:
        tableswitch($i4)
        {
            case 84: goto label03;
            case 85: goto label03;
            case 86: goto label03;
            case 87: goto label03;
            case 88: goto label03;
            case 89: goto label03;
            default: goto label13;
        };

     label03:
        $i1 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i9 = (int) -1;

        if $i1 != $i9 goto label04;

        $i5 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label05;

     label04:
        $i5 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label05:
        tableswitch($i5)
        {
            case 84: goto label06;
            case 85: goto label07;
            case 86: goto label09;
            case 87: goto label08;
            case 88: goto label10;
            case 89: goto label11;
            default: goto label12;
        };

     label06:
        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(84);

        $r12 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.expr.Expr NumericExpression()>();

        $r18 = new com.hp.hpl.jena.sparql.expr.E_Equals;

        specialinvoke $r18.<com.hp.hpl.jena.sparql.expr.E_Equals: void <init>(com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.expr.Expr)>($r1, $r12);

        r17 = $r18;

        goto label14;

     label07:
        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(85);

        $r10 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.expr.Expr NumericExpression()>();

        $r19 = new com.hp.hpl.jena.sparql.expr.E_NotEquals;

        specialinvoke $r19.<com.hp.hpl.jena.sparql.expr.E_NotEquals: void <init>(com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.expr.Expr)>($r1, $r10);

        r17 = $r19;

        goto label14;

     label08:
        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(87);

        $r6 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.expr.Expr NumericExpression()>();

        $r20 = new com.hp.hpl.jena.sparql.expr.E_LessThan;

        specialinvoke $r20.<com.hp.hpl.jena.sparql.expr.E_LessThan: void <init>(com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.expr.Expr)>($r1, $r6);

        r17 = $r20;

        goto label14;

     label09:
        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(86);

        $r8 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.expr.Expr NumericExpression()>();

        $r21 = new com.hp.hpl.jena.sparql.expr.E_GreaterThan;

        specialinvoke $r21.<com.hp.hpl.jena.sparql.expr.E_GreaterThan: void <init>(com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.expr.Expr)>($r1, $r8);

        r17 = $r21;

        goto label14;

     label10:
        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(88);

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.expr.Expr NumericExpression()>();

        $r22 = new com.hp.hpl.jena.sparql.expr.E_LessThanOrEqual;

        specialinvoke $r22.<com.hp.hpl.jena.sparql.expr.E_LessThanOrEqual: void <init>(com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.expr.Expr)>($r1, $r4);

        r17 = $r22;

        goto label14;

     label11:
        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(89);

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.expr.Expr NumericExpression()>();

        $r23 = new com.hp.hpl.jena.sparql.expr.E_GreaterThanOrEqual;

        specialinvoke $r23.<com.hp.hpl.jena.sparql.expr.E_GreaterThanOrEqual: void <init>(com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.expr.Expr)>($r1, $r2);

        r17 = $r23;

        goto label14;

     label12:
        $r14 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i2 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r14[56] = $i2;

        $i11 = (int) -1;

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>($i11);

        $r24 = new com.hp.hpl.jena.sparql.lang.sparql_10.ParseException;

        specialinvoke $r24.<com.hp.hpl.jena.sparql.lang.sparql_10.ParseException: void <init>()>();

        throw $r24;

     label13:
        $r16 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i3 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r16[57] = $i3;

     label14:
        return r17;
    }

    public final com.hp.hpl.jena.sparql.expr.Expr NumericExpression() throws com.hp.hpl.jena.sparql.lang.sparql_10.ParseException
    {
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;
        com.hp.hpl.jena.sparql.expr.Expr $r1;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.expr.Expr AdditiveExpression()>();

        return $r1;
    }

    public final com.hp.hpl.jena.sparql.expr.Expr AdditiveExpression() throws com.hp.hpl.jena.sparql.lang.sparql_10.ParseException
    {
        com.hp.hpl.jena.sparql.expr.E_Add $r25, $r31;
        com.hp.hpl.jena.graph.Node $r5, $r6, $r16, $r17;
        com.hp.hpl.jena.sparql.expr.E_Divide $r29;
        com.hp.hpl.jena.sparql.expr.Expr $r1, $r3, $r7, $r11, r23, r24;
        int[] $r13, $r15, $r18, $r20, $r22;
        boolean z0;
        com.hp.hpl.jena.sparql.lang.sparql_10.ParseException $r27, $r30, $r33;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i16, $i18, $i20, $i22, $i24, $i26, $i28, $i30;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;
        com.hp.hpl.jena.sparql.expr.E_Subtract $r26, $r32;
        com.hp.hpl.jena.sparql.expr.E_Multiply $r28;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        r23 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.expr.Expr MultiplicativeExpression()>();

     label01:
        $i9 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i16 = (int) -1;

        if $i9 != $i16 goto label02;

        $i10 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label03;

     label02:
        $i10 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label03:
        lookupswitch($i10)
        {
            case 59: goto label04;
            case 60: goto label04;
            case 61: goto label04;
            case 62: goto label04;
            case 63: goto label04;
            case 64: goto label04;
            case 95: goto label04;
            case 96: goto label04;
            default: goto label05;
        };

     label04:
        goto label06;

     label05:
        $r22 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i8 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r22[58] = $i8;

        goto label30;

     label06:
        $i0 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i18 = (int) -1;

        if $i0 != $i18 goto label07;

        $i11 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label08;

     label07:
        $i11 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label08:
        lookupswitch($i11)
        {
            case 59: goto label11;
            case 60: goto label11;
            case 61: goto label11;
            case 62: goto label11;
            case 63: goto label11;
            case 64: goto label11;
            case 95: goto label09;
            case 96: goto label10;
            default: goto label29;
        };

     label09:
        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(95);

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.expr.Expr MultiplicativeExpression()>();

        $r25 = new com.hp.hpl.jena.sparql.expr.E_Add;

        specialinvoke $r25.<com.hp.hpl.jena.sparql.expr.E_Add: void <init>(com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.expr.Expr)>(r23, $r3);

        r23 = $r25;

        goto label01;

     label10:
        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(96);

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.expr.Expr MultiplicativeExpression()>();

        $r26 = new com.hp.hpl.jena.sparql.expr.E_Subtract;

        specialinvoke $r26.<com.hp.hpl.jena.sparql.expr.E_Subtract: void <init>(com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.expr.Expr)>(r23, $r1);

        r23 = $r26;

        goto label01;

     label11:
        $i1 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i20 = (int) -1;

        if $i1 != $i20 goto label12;

        $i12 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label13;

     label12:
        $i12 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label13:
        tableswitch($i12)
        {
            case 59: goto label14;
            case 60: goto label14;
            case 61: goto label14;
            case 62: goto label15;
            case 63: goto label15;
            case 64: goto label15;
            default: goto label16;
        };

     label14:
        $r16 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.graph.Node NumericLiteralPositive()>();

        $r17 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.graph.Node stripSign(com.hp.hpl.jena.graph.Node)>($r16);

        r24 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.expr.Expr asExpr(com.hp.hpl.jena.graph.Node)>($r17);

        z0 = 1;

        goto label17;

     label15:
        $r5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.graph.Node NumericLiteralNegative()>();

        $r6 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.graph.Node stripSign(com.hp.hpl.jena.graph.Node)>($r5);

        r24 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.expr.Expr asExpr(com.hp.hpl.jena.graph.Node)>($r6);

        z0 = 0;

        goto label17;

     label16:
        $r18 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i6 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r18[59] = $i6;

        $i22 = (int) -1;

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>($i22);

        $r27 = new com.hp.hpl.jena.sparql.lang.sparql_10.ParseException;

        specialinvoke $r27.<com.hp.hpl.jena.sparql.lang.sparql_10.ParseException: void <init>()>();

        throw $r27;

     label17:
        $i2 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i24 = (int) -1;

        if $i2 != $i24 goto label18;

        $i13 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label19;

     label18:
        $i13 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label19:
        lookupswitch($i13)
        {
            case 97: goto label20;
            case 98: goto label20;
            default: goto label26;
        };

     label20:
        $i3 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i26 = (int) -1;

        if $i3 != $i26 goto label21;

        $i14 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label22;

     label21:
        $i14 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label22:
        lookupswitch($i14)
        {
            case 97: goto label23;
            case 98: goto label24;
            default: goto label25;
        };

     label23:
        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(97);

        $r11 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.expr.Expr UnaryExpression()>();

        $r28 = new com.hp.hpl.jena.sparql.expr.E_Multiply;

        specialinvoke $r28.<com.hp.hpl.jena.sparql.expr.E_Multiply: void <init>(com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.expr.Expr)>(r24, $r11);

        r24 = $r28;

        goto label27;

     label24:
        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(98);

        $r7 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.expr.Expr UnaryExpression()>();

        $r29 = new com.hp.hpl.jena.sparql.expr.E_Divide;

        specialinvoke $r29.<com.hp.hpl.jena.sparql.expr.E_Divide: void <init>(com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.expr.Expr)>(r24, $r7);

        r24 = $r29;

        goto label27;

     label25:
        $r13 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i4 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r13[60] = $i4;

        $i28 = (int) -1;

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>($i28);

        $r30 = new com.hp.hpl.jena.sparql.lang.sparql_10.ParseException;

        specialinvoke $r30.<com.hp.hpl.jena.sparql.lang.sparql_10.ParseException: void <init>()>();

        throw $r30;

     label26:
        $r15 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i5 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r15[61] = $i5;

     label27:
        if z0 == 0 goto label28;

        $r31 = new com.hp.hpl.jena.sparql.expr.E_Add;

        specialinvoke $r31.<com.hp.hpl.jena.sparql.expr.E_Add: void <init>(com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.expr.Expr)>(r23, r24);

        r23 = $r31;

        goto label01;

     label28:
        $r32 = new com.hp.hpl.jena.sparql.expr.E_Subtract;

        specialinvoke $r32.<com.hp.hpl.jena.sparql.expr.E_Subtract: void <init>(com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.expr.Expr)>(r23, r24);

        r23 = $r32;

        goto label01;

     label29:
        $r20 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i7 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r20[62] = $i7;

        $i30 = (int) -1;

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>($i30);

        $r33 = new com.hp.hpl.jena.sparql.lang.sparql_10.ParseException;

        specialinvoke $r33.<com.hp.hpl.jena.sparql.lang.sparql_10.ParseException: void <init>()>();

        throw $r33;

     label30:
        return r23;
    }

    public final com.hp.hpl.jena.sparql.expr.Expr MultiplicativeExpression() throws com.hp.hpl.jena.sparql.lang.sparql_10.ParseException
    {
        com.hp.hpl.jena.sparql.expr.E_Divide $r10;
        com.hp.hpl.jena.sparql.lang.sparql_10.ParseException $r11;
        com.hp.hpl.jena.sparql.expr.Expr $r1, $r3, r8;
        int[] $r5, $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7, $i9, $i11;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;
        com.hp.hpl.jena.sparql.expr.E_Multiply $r9;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        r8 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.expr.Expr UnaryExpression()>();

     label01:
        $i3 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i7 = (int) -1;

        if $i3 != $i7 goto label02;

        $i4 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label03;

     label02:
        $i4 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label03:
        lookupswitch($i4)
        {
            case 97: goto label04;
            case 98: goto label04;
            default: goto label05;
        };

     label04:
        goto label06;

     label05:
        $r7 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i2 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r7[63] = $i2;

        goto label12;

     label06:
        $i0 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i9 = (int) -1;

        if $i0 != $i9 goto label07;

        $i5 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label08;

     label07:
        $i5 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label08:
        lookupswitch($i5)
        {
            case 97: goto label09;
            case 98: goto label10;
            default: goto label11;
        };

     label09:
        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(97);

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.expr.Expr UnaryExpression()>();

        $r9 = new com.hp.hpl.jena.sparql.expr.E_Multiply;

        specialinvoke $r9.<com.hp.hpl.jena.sparql.expr.E_Multiply: void <init>(com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.expr.Expr)>(r8, $r3);

        r8 = $r9;

        goto label01;

     label10:
        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(98);

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.expr.Expr UnaryExpression()>();

        $r10 = new com.hp.hpl.jena.sparql.expr.E_Divide;

        specialinvoke $r10.<com.hp.hpl.jena.sparql.expr.E_Divide: void <init>(com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.expr.Expr)>(r8, $r1);

        r8 = $r10;

        goto label01;

     label11:
        $r5 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i1 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r5[64] = $i1;

        $i11 = (int) -1;

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>($i11);

        $r11 = new com.hp.hpl.jena.sparql.lang.sparql_10.ParseException;

        specialinvoke $r11.<com.hp.hpl.jena.sparql.lang.sparql_10.ParseException: void <init>()>();

        throw $r11;

     label12:
        return r8;
    }

    public final com.hp.hpl.jena.sparql.expr.Expr UnaryExpression() throws com.hp.hpl.jena.sparql.lang.sparql_10.ParseException
    {
        com.hp.hpl.jena.sparql.expr.E_UnaryPlus $r11;
        com.hp.hpl.jena.sparql.expr.E_LogicalNot $r10;
        com.hp.hpl.jena.sparql.expr.E_UnaryMinus $r12;
        com.hp.hpl.jena.sparql.lang.sparql_10.ParseException $r13;
        com.hp.hpl.jena.sparql.expr.Expr $r1, $r3, $r5, $r7;
        int[] $r8;
        int $i0, $i1, $i2, $i4, $i6;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        $i0 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i4 = (int) -1;

        if $i0 != $i4 goto label1;

        $i2 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label2;

     label1:
        $i2 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label2:
        tableswitch($i2)
        {
            case 8: goto label6;
            case 9: goto label6;
            case 10: goto label6;
            case 11: goto label7;
            case 12: goto label6;
            case 13: goto label6;
            case 14: goto label7;
            case 15: goto label7;
            case 16: goto label7;
            case 17: goto label7;
            case 18: goto label7;
            case 19: goto label7;
            case 20: goto label7;
            case 21: goto label7;
            case 22: goto label7;
            case 23: goto label7;
            case 24: goto label7;
            case 25: goto label7;
            case 26: goto label7;
            case 27: goto label7;
            case 28: goto label7;
            case 29: goto label7;
            case 30: goto label7;
            case 31: goto label7;
            case 32: goto label7;
            case 33: goto label7;
            case 34: goto label7;
            case 35: goto label7;
            case 36: goto label7;
            case 37: goto label7;
            case 38: goto label7;
            case 39: goto label7;
            case 40: goto label6;
            case 41: goto label6;
            case 42: goto label7;
            case 43: goto label7;
            case 44: goto label6;
            case 45: goto label6;
            case 46: goto label6;
            case 47: goto label6;
            case 48: goto label6;
            case 49: goto label6;
            case 50: goto label6;
            case 51: goto label6;
            case 52: goto label6;
            case 53: goto label6;
            case 54: goto label6;
            case 55: goto label7;
            case 56: goto label6;
            case 57: goto label6;
            case 58: goto label6;
            case 59: goto label6;
            case 60: goto label6;
            case 61: goto label6;
            case 62: goto label6;
            case 63: goto label6;
            case 64: goto label6;
            case 65: goto label7;
            case 66: goto label7;
            case 67: goto label7;
            case 68: goto label7;
            case 69: goto label6;
            case 70: goto label6;
            case 71: goto label6;
            case 72: goto label6;
            case 73: goto label6;
            case 74: goto label7;
            case 75: goto label7;
            case 76: goto label7;
            case 77: goto label7;
            case 78: goto label7;
            case 79: goto label7;
            case 80: goto label7;
            case 81: goto label7;
            case 82: goto label7;
            case 83: goto label7;
            case 84: goto label7;
            case 85: goto label7;
            case 86: goto label7;
            case 87: goto label7;
            case 88: goto label7;
            case 89: goto label7;
            case 90: goto label3;
            case 91: goto label7;
            case 92: goto label7;
            case 93: goto label7;
            case 94: goto label7;
            case 95: goto label4;
            case 96: goto label5;
            default: goto label7;
        };

     label3:
        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(90);

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.expr.Expr PrimaryExpression()>();

        $r10 = new com.hp.hpl.jena.sparql.expr.E_LogicalNot;

        specialinvoke $r10.<com.hp.hpl.jena.sparql.expr.E_LogicalNot: void <init>(com.hp.hpl.jena.sparql.expr.Expr)>($r5);

        return $r10;

     label4:
        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(95);

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.expr.Expr PrimaryExpression()>();

        $r11 = new com.hp.hpl.jena.sparql.expr.E_UnaryPlus;

        specialinvoke $r11.<com.hp.hpl.jena.sparql.expr.E_UnaryPlus: void <init>(com.hp.hpl.jena.sparql.expr.Expr)>($r3);

        return $r11;

     label5:
        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(96);

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.expr.Expr PrimaryExpression()>();

        $r12 = new com.hp.hpl.jena.sparql.expr.E_UnaryMinus;

        specialinvoke $r12.<com.hp.hpl.jena.sparql.expr.E_UnaryMinus: void <init>(com.hp.hpl.jena.sparql.expr.Expr)>($r1);

        return $r12;

     label6:
        $r7 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.expr.Expr PrimaryExpression()>();

        return $r7;

     label7:
        $r8 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i1 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r8[65] = $i1;

        $i6 = (int) -1;

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>($i6);

        $r13 = new com.hp.hpl.jena.sparql.lang.sparql_10.ParseException;

        specialinvoke $r13.<com.hp.hpl.jena.sparql.lang.sparql_10.ParseException: void <init>()>();

        throw $r13;
    }

    public final com.hp.hpl.jena.sparql.expr.Expr PrimaryExpression() throws com.hp.hpl.jena.sparql.lang.sparql_10.ParseException
    {
        com.hp.hpl.jena.graph.Node $r2, $r4, $r6;
        com.hp.hpl.jena.sparql.lang.sparql_10.ParseException $r14;
        com.hp.hpl.jena.sparql.expr.Expr $r1, $r3, $r5, $r7, $r8, $r10, $r11;
        int[] $r12;
        int $i0, $i1, $i2, $i4, $i6;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;
        com.hp.hpl.jena.sparql.core.Var $r9;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        $i0 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i4 = (int) -1;

        if $i0 != $i4 goto label01;

        $i2 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label02;

     label01:
        $i2 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label02:
        tableswitch($i2)
        {
            case 8: goto label05;
            case 9: goto label05;
            case 10: goto label05;
            case 11: goto label10;
            case 12: goto label09;
            case 13: goto label09;
            case 14: goto label10;
            case 15: goto label10;
            case 16: goto label10;
            case 17: goto label10;
            case 18: goto label10;
            case 19: goto label10;
            case 20: goto label10;
            case 21: goto label10;
            case 22: goto label10;
            case 23: goto label10;
            case 24: goto label10;
            case 25: goto label10;
            case 26: goto label10;
            case 27: goto label10;
            case 28: goto label10;
            case 29: goto label10;
            case 30: goto label10;
            case 31: goto label10;
            case 32: goto label10;
            case 33: goto label10;
            case 34: goto label10;
            case 35: goto label10;
            case 36: goto label10;
            case 37: goto label10;
            case 38: goto label10;
            case 39: goto label10;
            case 40: goto label04;
            case 41: goto label04;
            case 42: goto label10;
            case 43: goto label10;
            case 44: goto label04;
            case 45: goto label04;
            case 46: goto label04;
            case 47: goto label04;
            case 48: goto label04;
            case 49: goto label04;
            case 50: goto label04;
            case 51: goto label04;
            case 52: goto label04;
            case 53: goto label08;
            case 54: goto label08;
            case 55: goto label10;
            case 56: goto label07;
            case 57: goto label07;
            case 58: goto label07;
            case 59: goto label07;
            case 60: goto label07;
            case 61: goto label07;
            case 62: goto label07;
            case 63: goto label07;
            case 64: goto label07;
            case 65: goto label10;
            case 66: goto label10;
            case 67: goto label10;
            case 68: goto label10;
            case 69: goto label06;
            case 70: goto label06;
            case 71: goto label06;
            case 72: goto label06;
            case 73: goto label03;
            default: goto label10;
        };

     label03:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.expr.Expr BrackettedExpression()>();

        return $r1;

     label04:
        $r8 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.expr.Expr BuiltInCall()>();

        return $r8;

     label05:
        $r11 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.expr.Expr IRIrefOrFunction()>();

        return $r11;

     label06:
        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.graph.Node RDFLiteral()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.expr.Expr asExpr(com.hp.hpl.jena.graph.Node)>($r2);

        return $r3;

     label07:
        $r4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.graph.Node NumericLiteral()>();

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.expr.Expr asExpr(com.hp.hpl.jena.graph.Node)>($r4);

        return $r5;

     label08:
        $r6 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.graph.Node BooleanLiteral()>();

        $r7 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.expr.Expr asExpr(com.hp.hpl.jena.graph.Node)>($r6);

        return $r7;

     label09:
        $r9 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.core.Var Var()>();

        $r10 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.expr.Expr asExpr(com.hp.hpl.jena.graph.Node)>($r9);

        return $r10;

     label10:
        $r12 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i1 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r12[66] = $i1;

        $i6 = (int) -1;

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>($i6);

        $r14 = new com.hp.hpl.jena.sparql.lang.sparql_10.ParseException;

        specialinvoke $r14.<com.hp.hpl.jena.sparql.lang.sparql_10.ParseException: void <init>()>();

        throw $r14;
    }

    public final com.hp.hpl.jena.sparql.expr.Expr BrackettedExpression() throws com.hp.hpl.jena.sparql.lang.sparql_10.ParseException
    {
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;
        com.hp.hpl.jena.sparql.expr.Expr $r1;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(73);

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.expr.Expr Expression()>();

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(74);

        return $r1;
    }

    public final com.hp.hpl.jena.sparql.expr.Expr BuiltInCall() throws com.hp.hpl.jena.sparql.lang.sparql_10.ParseException
    {
        com.hp.hpl.jena.sparql.expr.E_IsURI $r35;
        com.hp.hpl.jena.sparql.expr.Expr $r1, $r2, $r4, $r5, $r7, $r9, $r11, $r13, $r14, $r16, $r18, $r20;
        int[] $r25;
        com.hp.hpl.jena.sparql.expr.E_Datatype $r30;
        com.hp.hpl.jena.sparql.expr.E_IsIRI $r34;
        com.hp.hpl.jena.sparql.expr.E_SameTerm $r33;
        com.hp.hpl.jena.sparql.expr.E_Bound $r32;
        com.hp.hpl.jena.sparql.expr.E_IsBlank $r36;
        com.hp.hpl.jena.sparql.expr.E_LangMatches $r29;
        com.hp.hpl.jena.sparql.expr.ExprVar $r31;
        com.hp.hpl.jena.sparql.lang.sparql_10.ParseException $r38;
        int $i0, $i1, $i2, $i4, $i6;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;
        com.hp.hpl.jena.sparql.expr.E_IsLiteral $r37;
        com.hp.hpl.jena.sparql.core.Var $r22;
        com.hp.hpl.jena.sparql.expr.E_Str $r27;
        com.hp.hpl.jena.sparql.expr.E_Lang $r28;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        $i0 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i4 = (int) -1;

        if $i0 != $i4 goto label01;

        $i2 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label02;

     label01:
        $i2 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label02:
        tableswitch($i2)
        {
            case 40: goto label07;
            case 41: goto label03;
            case 42: goto label14;
            case 43: goto label14;
            case 44: goto label06;
            case 45: goto label04;
            case 46: goto label05;
            case 47: goto label10;
            case 48: goto label09;
            case 49: goto label11;
            case 50: goto label12;
            case 51: goto label13;
            case 52: goto label08;
            default: goto label14;
        };

     label03:
        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(41);

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(73);

        $r20 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.expr.Expr Expression()>();

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(74);

        $r27 = new com.hp.hpl.jena.sparql.expr.E_Str;

        specialinvoke $r27.<com.hp.hpl.jena.sparql.expr.E_Str: void <init>(com.hp.hpl.jena.sparql.expr.Expr)>($r20);

        return $r27;

     label04:
        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(45);

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(73);

        $r16 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.expr.Expr Expression()>();

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(74);

        $r28 = new com.hp.hpl.jena.sparql.expr.E_Lang;

        specialinvoke $r28.<com.hp.hpl.jena.sparql.expr.E_Lang: void <init>(com.hp.hpl.jena.sparql.expr.Expr)>($r16);

        return $r28;

     label05:
        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(46);

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(73);

        $r13 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.expr.Expr Expression()>();

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(82);

        $r14 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.expr.Expr Expression()>();

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(74);

        $r29 = new com.hp.hpl.jena.sparql.expr.E_LangMatches;

        specialinvoke $r29.<com.hp.hpl.jena.sparql.expr.E_LangMatches: void <init>(com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.expr.Expr)>($r13, $r14);

        return $r29;

     label06:
        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(44);

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(73);

        $r18 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.expr.Expr Expression()>();

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(74);

        $r30 = new com.hp.hpl.jena.sparql.expr.E_Datatype;

        specialinvoke $r30.<com.hp.hpl.jena.sparql.expr.E_Datatype: void <init>(com.hp.hpl.jena.sparql.expr.Expr)>($r18);

        return $r30;

     label07:
        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(40);

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(73);

        $r22 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.core.Var Var()>();

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(74);

        $r32 = new com.hp.hpl.jena.sparql.expr.E_Bound;

        $r31 = new com.hp.hpl.jena.sparql.expr.ExprVar;

        specialinvoke $r31.<com.hp.hpl.jena.sparql.expr.ExprVar: void <init>(com.hp.hpl.jena.graph.Node)>($r22);

        specialinvoke $r32.<com.hp.hpl.jena.sparql.expr.E_Bound: void <init>(com.hp.hpl.jena.sparql.expr.Expr)>($r31);

        return $r32;

     label08:
        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(52);

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(73);

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.expr.Expr Expression()>();

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(82);

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.expr.Expr Expression()>();

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(74);

        $r33 = new com.hp.hpl.jena.sparql.expr.E_SameTerm;

        specialinvoke $r33.<com.hp.hpl.jena.sparql.expr.E_SameTerm: void <init>(com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.expr.Expr)>($r1, $r2);

        return $r33;

     label09:
        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(48);

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(73);

        $r9 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.expr.Expr Expression()>();

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(74);

        $r34 = new com.hp.hpl.jena.sparql.expr.E_IsIRI;

        specialinvoke $r34.<com.hp.hpl.jena.sparql.expr.E_IsIRI: void <init>(com.hp.hpl.jena.sparql.expr.Expr)>($r9);

        return $r34;

     label10:
        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(47);

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(73);

        $r11 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.expr.Expr Expression()>();

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(74);

        $r35 = new com.hp.hpl.jena.sparql.expr.E_IsURI;

        specialinvoke $r35.<com.hp.hpl.jena.sparql.expr.E_IsURI: void <init>(com.hp.hpl.jena.sparql.expr.Expr)>($r11);

        return $r35;

     label11:
        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(49);

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(73);

        $r7 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.expr.Expr Expression()>();

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(74);

        $r36 = new com.hp.hpl.jena.sparql.expr.E_IsBlank;

        specialinvoke $r36.<com.hp.hpl.jena.sparql.expr.E_IsBlank: void <init>(com.hp.hpl.jena.sparql.expr.Expr)>($r7);

        return $r36;

     label12:
        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(50);

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(73);

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.expr.Expr Expression()>();

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(74);

        $r37 = new com.hp.hpl.jena.sparql.expr.E_IsLiteral;

        specialinvoke $r37.<com.hp.hpl.jena.sparql.expr.E_IsLiteral: void <init>(com.hp.hpl.jena.sparql.expr.Expr)>($r5);

        return $r37;

     label13:
        $r4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.expr.Expr RegexExpression()>();

        return $r4;

     label14:
        $r25 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i1 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r25[67] = $i1;

        $i6 = (int) -1;

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>($i6);

        $r38 = new com.hp.hpl.jena.sparql.lang.sparql_10.ParseException;

        specialinvoke $r38.<com.hp.hpl.jena.sparql.lang.sparql_10.ParseException: void <init>()>();

        throw $r38;
    }

    public final com.hp.hpl.jena.sparql.expr.Expr RegexExpression() throws com.hp.hpl.jena.sparql.lang.sparql_10.ParseException
    {
        com.hp.hpl.jena.sparql.expr.Expr $r1, $r2, r5;
        int[] $r4;
        com.hp.hpl.jena.sparql.expr.E_Regex $r6;
        int $i0, $i1, $i2, $i4;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        r5 = null;

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(51);

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(73);

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.expr.Expr Expression()>();

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(82);

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.expr.Expr Expression()>();

        $i0 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i4 = (int) -1;

        if $i0 != $i4 goto label1;

        $i2 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label2;

     label1:
        $i2 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label2:
        lookupswitch($i2)
        {
            case 82: goto label3;
            default: goto label4;
        };

     label3:
        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(82);

        r5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.expr.Expr Expression()>();

        goto label5;

     label4:
        $r4 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i1 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r4[68] = $i1;

     label5:
        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(74);

        $r6 = new com.hp.hpl.jena.sparql.expr.E_Regex;

        specialinvoke $r6.<com.hp.hpl.jena.sparql.expr.E_Regex: void <init>(com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.expr.Expr)>($r1, $r2, r5);

        return $r6;
    }

    public final com.hp.hpl.jena.sparql.expr.Expr IRIrefOrFunction() throws com.hp.hpl.jena.sparql.lang.sparql_10.ParseException
    {
        com.hp.hpl.jena.graph.Node $r3;
        com.hp.hpl.jena.sparql.expr.Expr $r4;
        com.hp.hpl.jena.sparql.expr.E_Function $r7;
        int[] $r5;
        com.hp.hpl.jena.sparql.expr.ExprList r6;
        int $i0, $i1, $i2, $i4;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;
        java.lang.String $r1;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        r6 = null;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: java.lang.String IRIref()>();

        $i0 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i4 = (int) -1;

        if $i0 != $i4 goto label1;

        $i2 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label2;

     label1:
        $i2 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label2:
        lookupswitch($i2)
        {
            case 73: goto label3;
            case 75: goto label3;
            default: goto label4;
        };

     label3:
        r6 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.expr.ExprList ArgList()>();

        goto label5;

     label4:
        $r5 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i1 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r5[69] = $i1;

     label5:
        if r6 != null goto label6;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.graph.Node createNode(java.lang.String)>($r1);

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.expr.Expr asExpr(com.hp.hpl.jena.graph.Node)>($r3);

        return $r4;

     label6:
        $r7 = new com.hp.hpl.jena.sparql.expr.E_Function;

        specialinvoke $r7.<com.hp.hpl.jena.sparql.expr.E_Function: void <init>(java.lang.String,com.hp.hpl.jena.sparql.expr.ExprList)>($r1, r6);

        return $r7;
    }

    public final com.hp.hpl.jena.graph.Node RDFLiteral() throws com.hp.hpl.jena.sparql.lang.sparql_10.ParseException
    {
        com.hp.hpl.jena.graph.Node $r9;
        com.hp.hpl.jena.sparql.lang.sparql_10.ParseException $r10;
        com.hp.hpl.jena.sparql.lang.sparql_10.Token $r2;
        int[] $r4, $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7, $i9, $i11;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;
        java.lang.String $r1, $r3, r7, r8;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: java.lang.String String()>();

        r7 = null;

        r8 = null;

        $i0 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i7 = (int) -1;

        if $i0 != $i7 goto label01;

        $i4 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label02;

     label01:
        $i4 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label02:
        lookupswitch($i4)
        {
            case 14: goto label03;
            case 99: goto label03;
            default: goto label09;
        };

     label03:
        $i1 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i9 = (int) -1;

        if $i1 != $i9 goto label04;

        $i5 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label05;

     label04:
        $i5 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label05:
        lookupswitch($i5)
        {
            case 14: goto label06;
            case 99: goto label07;
            default: goto label08;
        };

     label06:
        $r2 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(14);

        $r3 = $r2.<com.hp.hpl.jena.sparql.lang.sparql_10.Token: java.lang.String image>;

        r7 = staticinvoke <com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: java.lang.String stripChars(java.lang.String,int)>($r3, 1);

        goto label10;

     label07:
        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(99);

        r8 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: java.lang.String IRIref()>();

        goto label10;

     label08:
        $r4 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i2 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r4[70] = $i2;

        $i11 = (int) -1;

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>($i11);

        $r10 = new com.hp.hpl.jena.sparql.lang.sparql_10.ParseException;

        specialinvoke $r10.<com.hp.hpl.jena.sparql.lang.sparql_10.ParseException: void <init>()>();

        throw $r10;

     label09:
        $r6 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i3 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r6[71] = $i3;

     label10:
        $r9 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String,java.lang.String,java.lang.String)>($r1, r7, r8);

        return $r9;
    }

    public final com.hp.hpl.jena.graph.Node NumericLiteral() throws com.hp.hpl.jena.sparql.lang.sparql_10.ParseException
    {
        com.hp.hpl.jena.graph.Node r3;
        com.hp.hpl.jena.sparql.lang.sparql_10.ParseException $r4;
        int[] $r1;
        int $i0, $i1, $i2, $i4, $i6;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        $i0 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i4 = (int) -1;

        if $i0 != $i4 goto label1;

        $i2 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label2;

     label1:
        $i2 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label2:
        tableswitch($i2)
        {
            case 56: goto label3;
            case 57: goto label3;
            case 58: goto label3;
            case 59: goto label4;
            case 60: goto label4;
            case 61: goto label4;
            case 62: goto label5;
            case 63: goto label5;
            case 64: goto label5;
            default: goto label6;
        };

     label3:
        r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.graph.Node NumericLiteralUnsigned()>();

        goto label7;

     label4:
        r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.graph.Node NumericLiteralPositive()>();

        goto label7;

     label5:
        r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.graph.Node NumericLiteralNegative()>();

        goto label7;

     label6:
        $r1 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i1 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r1[72] = $i1;

        $i6 = (int) -1;

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>($i6);

        $r4 = new com.hp.hpl.jena.sparql.lang.sparql_10.ParseException;

        specialinvoke $r4.<com.hp.hpl.jena.sparql.lang.sparql_10.ParseException: void <init>()>();

        throw $r4;

     label7:
        return r3;
    }

    public final com.hp.hpl.jena.graph.Node NumericLiteralUnsigned() throws com.hp.hpl.jena.sparql.lang.sparql_10.ParseException
    {
        com.hp.hpl.jena.graph.Node $r3, $r6, $r9;
        com.hp.hpl.jena.sparql.lang.sparql_10.ParseException $r12;
        com.hp.hpl.jena.sparql.lang.sparql_10.Token $r1, $r4, $r7;
        int[] $r10;
        int $i0, $i1, $i2, $i4, $i6;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;
        java.lang.String $r2, $r5, $r8;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        $i0 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i4 = (int) -1;

        if $i0 != $i4 goto label1;

        $i2 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label2;

     label1:
        $i2 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label2:
        tableswitch($i2)
        {
            case 56: goto label3;
            case 57: goto label4;
            case 58: goto label5;
            default: goto label6;
        };

     label3:
        $r7 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(56);

        $r8 = $r7.<com.hp.hpl.jena.sparql.lang.sparql_10.Token: java.lang.String image>;

        $r9 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.graph.Node createLiteralInteger(java.lang.String)>($r8);

        return $r9;

     label4:
        $r4 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(57);

        $r5 = $r4.<com.hp.hpl.jena.sparql.lang.sparql_10.Token: java.lang.String image>;

        $r6 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.graph.Node createLiteralDecimal(java.lang.String)>($r5);

        return $r6;

     label5:
        $r1 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(58);

        $r2 = $r1.<com.hp.hpl.jena.sparql.lang.sparql_10.Token: java.lang.String image>;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.graph.Node createLiteralDouble(java.lang.String)>($r2);

        return $r3;

     label6:
        $r10 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i1 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r10[73] = $i1;

        $i6 = (int) -1;

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>($i6);

        $r12 = new com.hp.hpl.jena.sparql.lang.sparql_10.ParseException;

        specialinvoke $r12.<com.hp.hpl.jena.sparql.lang.sparql_10.ParseException: void <init>()>();

        throw $r12;
    }

    public final com.hp.hpl.jena.graph.Node NumericLiteralPositive() throws com.hp.hpl.jena.sparql.lang.sparql_10.ParseException
    {
        com.hp.hpl.jena.graph.Node $r3, $r6, $r9;
        com.hp.hpl.jena.sparql.lang.sparql_10.ParseException $r12;
        com.hp.hpl.jena.sparql.lang.sparql_10.Token $r1, $r4, $r7;
        int[] $r10;
        int $i0, $i1, $i2, $i4, $i6;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;
        java.lang.String $r2, $r5, $r8;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        $i0 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i4 = (int) -1;

        if $i0 != $i4 goto label1;

        $i2 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label2;

     label1:
        $i2 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label2:
        tableswitch($i2)
        {
            case 59: goto label3;
            case 60: goto label4;
            case 61: goto label5;
            default: goto label6;
        };

     label3:
        $r7 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(59);

        $r8 = $r7.<com.hp.hpl.jena.sparql.lang.sparql_10.Token: java.lang.String image>;

        $r9 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.graph.Node createLiteralInteger(java.lang.String)>($r8);

        return $r9;

     label4:
        $r4 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(60);

        $r5 = $r4.<com.hp.hpl.jena.sparql.lang.sparql_10.Token: java.lang.String image>;

        $r6 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.graph.Node createLiteralDecimal(java.lang.String)>($r5);

        return $r6;

     label5:
        $r1 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(61);

        $r2 = $r1.<com.hp.hpl.jena.sparql.lang.sparql_10.Token: java.lang.String image>;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.graph.Node createLiteralDouble(java.lang.String)>($r2);

        return $r3;

     label6:
        $r10 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i1 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r10[74] = $i1;

        $i6 = (int) -1;

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>($i6);

        $r12 = new com.hp.hpl.jena.sparql.lang.sparql_10.ParseException;

        specialinvoke $r12.<com.hp.hpl.jena.sparql.lang.sparql_10.ParseException: void <init>()>();

        throw $r12;
    }

    public final com.hp.hpl.jena.graph.Node NumericLiteralNegative() throws com.hp.hpl.jena.sparql.lang.sparql_10.ParseException
    {
        com.hp.hpl.jena.graph.Node $r3, $r6, $r9;
        com.hp.hpl.jena.sparql.lang.sparql_10.ParseException $r12;
        com.hp.hpl.jena.sparql.lang.sparql_10.Token $r1, $r4, $r7;
        int[] $r10;
        int $i0, $i1, $i2, $i4, $i6;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;
        java.lang.String $r2, $r5, $r8;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        $i0 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i4 = (int) -1;

        if $i0 != $i4 goto label1;

        $i2 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label2;

     label1:
        $i2 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label2:
        tableswitch($i2)
        {
            case 62: goto label3;
            case 63: goto label4;
            case 64: goto label5;
            default: goto label6;
        };

     label3:
        $r7 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(62);

        $r8 = $r7.<com.hp.hpl.jena.sparql.lang.sparql_10.Token: java.lang.String image>;

        $r9 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.graph.Node createLiteralInteger(java.lang.String)>($r8);

        return $r9;

     label4:
        $r4 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(63);

        $r5 = $r4.<com.hp.hpl.jena.sparql.lang.sparql_10.Token: java.lang.String image>;

        $r6 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.graph.Node createLiteralDecimal(java.lang.String)>($r5);

        return $r6;

     label5:
        $r1 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(64);

        $r2 = $r1.<com.hp.hpl.jena.sparql.lang.sparql_10.Token: java.lang.String image>;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.graph.Node createLiteralDouble(java.lang.String)>($r2);

        return $r3;

     label6:
        $r10 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i1 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r10[75] = $i1;

        $i6 = (int) -1;

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>($i6);

        $r12 = new com.hp.hpl.jena.sparql.lang.sparql_10.ParseException;

        specialinvoke $r12.<com.hp.hpl.jena.sparql.lang.sparql_10.ParseException: void <init>()>();

        throw $r12;
    }

    public final com.hp.hpl.jena.graph.Node BooleanLiteral() throws com.hp.hpl.jena.sparql.lang.sparql_10.ParseException
    {
        com.hp.hpl.jena.graph.Node $r1, $r2;
        com.hp.hpl.jena.sparql.lang.sparql_10.ParseException $r5;
        int[] $r3;
        int $i0, $i1, $i2, $i4, $i6;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        $i0 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i4 = (int) -1;

        if $i0 != $i4 goto label1;

        $i2 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label2;

     label1:
        $i2 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label2:
        lookupswitch($i2)
        {
            case 53: goto label3;
            case 54: goto label4;
            default: goto label5;
        };

     label3:
        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(53);

        $r2 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.graph.Node XSD_TRUE>;

        return $r2;

     label4:
        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(54);

        $r1 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.graph.Node XSD_FALSE>;

        return $r1;

     label5:
        $r3 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i1 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r3[76] = $i1;

        $i6 = (int) -1;

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>($i6);

        $r5 = new com.hp.hpl.jena.sparql.lang.sparql_10.ParseException;

        specialinvoke $r5.<com.hp.hpl.jena.sparql.lang.sparql_10.ParseException: void <init>()>();

        throw $r5;
    }

    public final java.lang.String String() throws com.hp.hpl.jena.sparql.lang.sparql_10.ParseException
    {
        com.hp.hpl.jena.sparql.lang.sparql_10.ParseException $r14;
        com.hp.hpl.jena.sparql.lang.sparql_10.Token $r1, $r3, $r5, $r7, r11;
        int[] $r9;
        int $i0, $i1, $i2, $i3, $i4, $i6, $i8;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;
        java.lang.String $r2, $r4, $r6, $r8, r12, $r13;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        $i0 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i6 = (int) -1;

        if $i0 != $i6 goto label1;

        $i2 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label2;

     label1:
        $i2 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label2:
        tableswitch($i2)
        {
            case 69: goto label3;
            case 70: goto label4;
            case 71: goto label5;
            case 72: goto label6;
            default: goto label7;
        };

     label3:
        $r7 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(69);

        r11 = $r7;

        $r8 = $r7.<com.hp.hpl.jena.sparql.lang.sparql_10.Token: java.lang.String image>;

        r12 = staticinvoke <com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: java.lang.String stripQuotes(java.lang.String)>($r8);

        goto label8;

     label4:
        $r5 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(70);

        r11 = $r5;

        $r6 = $r5.<com.hp.hpl.jena.sparql.lang.sparql_10.Token: java.lang.String image>;

        r12 = staticinvoke <com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: java.lang.String stripQuotes(java.lang.String)>($r6);

        goto label8;

     label5:
        $r3 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(71);

        r11 = $r3;

        $r4 = $r3.<com.hp.hpl.jena.sparql.lang.sparql_10.Token: java.lang.String image>;

        r12 = staticinvoke <com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: java.lang.String stripQuotes3(java.lang.String)>($r4);

        goto label8;

     label6:
        $r1 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(72);

        r11 = $r1;

        $r2 = $r1.<com.hp.hpl.jena.sparql.lang.sparql_10.Token: java.lang.String image>;

        r12 = staticinvoke <com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: java.lang.String stripQuotes3(java.lang.String)>($r2);

        goto label8;

     label7:
        $r9 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i1 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r9[77] = $i1;

        $i8 = (int) -1;

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>($i8);

        $r14 = new com.hp.hpl.jena.sparql.lang.sparql_10.ParseException;

        specialinvoke $r14.<com.hp.hpl.jena.sparql.lang.sparql_10.ParseException: void <init>()>();

        throw $r14;

     label8:
        $i3 = r11.<com.hp.hpl.jena.sparql.lang.sparql_10.Token: int beginLine>;

        $i4 = r11.<com.hp.hpl.jena.sparql.lang.sparql_10.Token: int beginColumn>;

        $r13 = staticinvoke <com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: java.lang.String unescapeStr(java.lang.String,int,int)>(r12, $i3, $i4);

        return $r13;
    }

    public final java.lang.String IRIref() throws com.hp.hpl.jena.sparql.lang.sparql_10.ParseException
    {
        com.hp.hpl.jena.sparql.lang.sparql_10.ParseException $r5;
        int[] $r3;
        int $i0, $i1, $i2, $i4, $i6;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;
        java.lang.String $r1, $r2;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        $i0 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i4 = (int) -1;

        if $i0 != $i4 goto label1;

        $i2 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label2;

     label1:
        $i2 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label2:
        tableswitch($i2)
        {
            case 8: goto label3;
            case 9: goto label4;
            case 10: goto label4;
            default: goto label5;
        };

     label3:
        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: java.lang.String IRI_REF()>();

        return $r2;

     label4:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: java.lang.String PrefixedName()>();

        return $r1;

     label5:
        $r3 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i1 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r3[78] = $i1;

        $i6 = (int) -1;

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>($i6);

        $r5 = new com.hp.hpl.jena.sparql.lang.sparql_10.ParseException;

        specialinvoke $r5.<com.hp.hpl.jena.sparql.lang.sparql_10.ParseException: void <init>()>();

        throw $r5;
    }

    public final java.lang.String PrefixedName() throws com.hp.hpl.jena.sparql.lang.sparql_10.ParseException
    {
        com.hp.hpl.jena.sparql.lang.sparql_10.ParseException $r9;
        com.hp.hpl.jena.sparql.lang.sparql_10.Token $r1, $r4;
        int[] $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8, $i10;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;
        java.lang.String $r2, $r3, $r5, $r6;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        $i0 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i8 = (int) -1;

        if $i0 != $i8 goto label1;

        $i6 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label2;

     label1:
        $i6 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label2:
        lookupswitch($i6)
        {
            case 9: goto label4;
            case 10: goto label3;
            default: goto label5;
        };

     label3:
        $r1 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(10);

        $r2 = $r1.<com.hp.hpl.jena.sparql.lang.sparql_10.Token: java.lang.String image>;

        $i2 = $r1.<com.hp.hpl.jena.sparql.lang.sparql_10.Token: int beginLine>;

        $i1 = $r1.<com.hp.hpl.jena.sparql.lang.sparql_10.Token: int beginColumn>;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: java.lang.String resolvePName(java.lang.String,int,int)>($r2, $i2, $i1);

        return $r3;

     label4:
        $r4 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(9);

        $r5 = $r4.<com.hp.hpl.jena.sparql.lang.sparql_10.Token: java.lang.String image>;

        $i4 = $r4.<com.hp.hpl.jena.sparql.lang.sparql_10.Token: int beginLine>;

        $i3 = $r4.<com.hp.hpl.jena.sparql.lang.sparql_10.Token: int beginColumn>;

        $r6 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: java.lang.String resolvePName(java.lang.String,int,int)>($r5, $i4, $i3);

        return $r6;

     label5:
        $r7 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i5 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r7[79] = $i5;

        $i10 = (int) -1;

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>($i10);

        $r9 = new com.hp.hpl.jena.sparql.lang.sparql_10.ParseException;

        specialinvoke $r9.<com.hp.hpl.jena.sparql.lang.sparql_10.ParseException: void <init>()>();

        throw $r9;
    }

    public final com.hp.hpl.jena.graph.Node BlankNode() throws com.hp.hpl.jena.sparql.lang.sparql_10.ParseException
    {
        com.hp.hpl.jena.graph.Node $r2, $r5;
        com.hp.hpl.jena.sparql.lang.sparql_10.ParseException $r8;
        com.hp.hpl.jena.sparql.lang.sparql_10.Token $r1, $r3;
        int[] $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8, $i10;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;
        java.lang.String $r4;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        $i0 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

        $i8 = (int) -1;

        if $i0 != $i8 goto label1;

        $i6 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk()>();

        goto label2;

     label1:
        $i6 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk>;

     label2:
        lookupswitch($i6)
        {
            case 11: goto label3;
            case 80: goto label4;
            default: goto label5;
        };

     label3:
        $r3 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(11);

        $r4 = $r3.<com.hp.hpl.jena.sparql.lang.sparql_10.Token: java.lang.String image>;

        $i4 = $r3.<com.hp.hpl.jena.sparql.lang.sparql_10.Token: int beginLine>;

        $i3 = $r3.<com.hp.hpl.jena.sparql.lang.sparql_10.Token: int beginColumn>;

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.graph.Node createBNode(java.lang.String,int,int)>($r4, $i4, $i3);

        return $r5;

     label4:
        $r1 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(80);

        $i2 = $r1.<com.hp.hpl.jena.sparql.lang.sparql_10.Token: int beginLine>;

        $i1 = $r1.<com.hp.hpl.jena.sparql.lang.sparql_10.Token: int beginColumn>;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.graph.Node createBNode(int,int)>($i2, $i1);

        return $r2;

     label5:
        $r6 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i5 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $r6[80] = $i5;

        $i10 = (int) -1;

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>($i10);

        $r8 = new com.hp.hpl.jena.sparql.lang.sparql_10.ParseException;

        specialinvoke $r8.<com.hp.hpl.jena.sparql.lang.sparql_10.ParseException: void <init>()>();

        throw $r8;
    }

    public final java.lang.String IRI_REF() throws com.hp.hpl.jena.sparql.lang.sparql_10.ParseException
    {
        com.hp.hpl.jena.sparql.lang.sparql_10.Token $r1;
        int $i0, $i1;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;
        java.lang.String $r2, $r3;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        $r1 = specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int)>(8);

        $r2 = $r1.<com.hp.hpl.jena.sparql.lang.sparql_10.Token: java.lang.String image>;

        $i1 = $r1.<com.hp.hpl.jena.sparql.lang.sparql_10.Token: int beginLine>;

        $i0 = $r1.<com.hp.hpl.jena.sparql.lang.sparql_10.Token: int beginColumn>;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: java.lang.String resolveQuotedIRI(java.lang.String,int,int)>($r2, $i1, $i0);

        return $r3;
    }

    private static void jj_la1_init_0()
    {
        int[] $r0;

        $r0 = newarray (int)[81];

        $r0[0] = 59768832;

        $r0[1] = 262144;

        $r0[2] = 524288;

        $r0[3] = 0;

        $r0[4] = 6291456;

        $r0[5] = 6291456;

        $r0[6] = 12288;

        $r0[7] = 12288;

        $r0[8] = 0;

        $r0[9] = 14080;

        $r0[10] = 14080;

        $r0[11] = 0;

        $r0[12] = 0;

        $r0[13] = 0;

        $r0[14] = 1792;

        $r0[15] = 0;

        $r0[16] = 268435456;

        $r0[17] = 201326592;

        $r0[18] = -1073727744;

        $r0[19] = -1073741824;

        $r0[20] = 14080;

        $r0[21] = -1073727744;

        $r0[22] = 134217728;

        $r0[23] = 67108864;

        $r0[24] = 201326592;

        $r0[25] = 16128;

        $r0[26] = 0;

        $r0[27] = 0;

        $r0[28] = 0;

        $r0[29] = 16128;

        $r0[30] = 16128;

        $r0[31] = 0;

        $r0[32] = 0;

        $r0[33] = 0;

        $r0[34] = 1792;

        $r0[35] = 0;

        $r0[36] = 0;

        $r0[37] = 0;

        $r0[38] = 16128;

        $r0[39] = 16128;

        $r0[40] = 0;

        $r0[41] = 16128;

        $r0[42] = 0;

        $r0[43] = 145152;

        $r0[44] = 145152;

        $r0[45] = 0;

        $r0[46] = 145152;

        $r0[47] = 0;

        $r0[48] = 16128;

        $r0[49] = 16128;

        $r0[50] = 16128;

        $r0[51] = 14080;

        $r0[52] = 12288;

        $r0[53] = 3840;

        $r0[54] = 0;

        $r0[55] = 0;

        $r0[56] = 0;

        $r0[57] = 0;

        $r0[58] = 0;

        $r0[59] = 0;

        $r0[60] = 0;

        $r0[61] = 0;

        $r0[62] = 0;

        $r0[63] = 0;

        $r0[64] = 0;

        $r0[65] = 14080;

        $r0[66] = 14080;

        $r0[67] = 0;

        $r0[68] = 0;

        $r0[69] = 0;

        $r0[70] = 16384;

        $r0[71] = 16384;

        $r0[72] = 0;

        $r0[73] = 0;

        $r0[74] = 0;

        $r0[75] = 0;

        $r0[76] = 0;

        $r0[77] = 0;

        $r0[78] = 1792;

        $r0[79] = 1536;

        $r0[80] = 2048;

        <com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1_0> = $r0;

        return;
    }

    private static void jj_la1_init_1()
    {
        int[] $r0;

        $r0 = newarray (int)[81];

        $r0[0] = 0;

        $r0[1] = 0;

        $r0[2] = 0;

        $r0[3] = 2;

        $r0[4] = 0;

        $r0[5] = 0;

        $r0[6] = 0;

        $r0[7] = 0;

        $r0[8] = 2;

        $r0[9] = 0;

        $r0[10] = 0;

        $r0[11] = 2;

        $r0[12] = 4;

        $r0[13] = 2;

        $r0[14] = 1;

        $r0[15] = 4;

        $r0[16] = 0;

        $r0[17] = 0;

        $r0[18] = 2093824;

        $r0[19] = 0;

        $r0[20] = 2093824;

        $r0[21] = 2093824;

        $r0[22] = 0;

        $r0[23] = 0;

        $r0[24] = 0;

        $r0[25] = -10485760;

        $r0[26] = 176;

        $r0[27] = 176;

        $r0[28] = 0;

        $r0[29] = -10485760;

        $r0[30] = -10485760;

        $r0[31] = 0;

        $r0[32] = 48;

        $r0[33] = 64;

        $r0[34] = 2093824;

        $r0[35] = 0;

        $r0[36] = 0;

        $r0[37] = 0;

        $r0[38] = -10485760;

        $r0[39] = -10485760;

        $r0[40] = 0;

        $r0[41] = -10485760;

        $r0[42] = 0;

        $r0[43] = 0;

        $r0[44] = 0;

        $r0[45] = 0;

        $r0[46] = 0;

        $r0[47] = 0;

        $r0[48] = -10485760;

        $r0[49] = -10485760;

        $r0[50] = -10485760;

        $r0[51] = 0;

        $r0[52] = 0;

        $r0[53] = -10485760;

        $r0[54] = 0;

        $r0[55] = 0;

        $r0[56] = 0;

        $r0[57] = 0;

        $r0[58] = -134217728;

        $r0[59] = -134217728;

        $r0[60] = 0;

        $r0[61] = 0;

        $r0[62] = -134217728;

        $r0[63] = 0;

        $r0[64] = 0;

        $r0[65] = -8391936;

        $r0[66] = -8391936;

        $r0[67] = 2093824;

        $r0[68] = 0;

        $r0[69] = 0;

        $r0[70] = 0;

        $r0[71] = 0;

        $r0[72] = -16777216;

        $r0[73] = 117440512;

        $r0[74] = 939524096;

        $r0[75] = -1073741824;

        $r0[76] = 6291456;

        $r0[77] = 0;

        $r0[78] = 0;

        $r0[79] = 0;

        $r0[80] = 0;

        <com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1_1> = $r0;

        return;
    }

    private static void jj_la1_init_2()
    {
        int[] $r0;

        $r0 = newarray (int)[81];

        $r0[0] = 0;

        $r0[1] = 0;

        $r0[2] = 0;

        $r0[3] = 0;

        $r0[4] = 0;

        $r0[5] = 0;

        $r0[6] = 0;

        $r0[7] = 0;

        $r0[8] = 0;

        $r0[9] = 0;

        $r0[10] = 0;

        $r0[11] = 0;

        $r0[12] = 4096;

        $r0[13] = 0;

        $r0[14] = 0;

        $r0[15] = 0;

        $r0[16] = 0;

        $r0[17] = 0;

        $r0[18] = 512;

        $r0[19] = 0;

        $r0[20] = 512;

        $r0[21] = 512;

        $r0[22] = 0;

        $r0[23] = 0;

        $r0[24] = 0;

        $r0[25] = 84961;

        $r0[26] = 4096;

        $r0[27] = 4096;

        $r0[28] = 524288;

        $r0[29] = 84961;

        $r0[30] = 84961;

        $r0[31] = 524288;

        $r0[32] = 4096;

        $r0[33] = 0;

        $r0[34] = 512;

        $r0[35] = 262144;

        $r0[36] = 2560;

        $r0[37] = 262144;

        $r0[38] = 84961;

        $r0[39] = 84961;

        $r0[40] = 524288;

        $r0[41] = 84961;

        $r0[42] = 131072;

        $r0[43] = 0;

        $r0[44] = 0;

        $r0[45] = 262144;

        $r0[46] = 0;

        $r0[47] = 16896;

        $r0[48] = 84961;

        $r0[49] = 84961;

        $r0[50] = 68065;

        $r0[51] = 0;

        $r0[52] = 0;

        $r0[53] = 68065;

        $r0[54] = 536870912;

        $r0[55] = 1073741824;

        $r0[56] = 66060288;

        $r0[57] = 66060288;

        $r0[58] = -2147483647;

        $r0[59] = 1;

        $r0[60] = 0;

        $r0[61] = 0;

        $r0[62] = -2147483647;

        $r0[63] = 0;

        $r0[64] = 0;

        $r0[65] = -2080373791;

        $r0[66] = 993;

        $r0[67] = 0;

        $r0[68] = 262144;

        $r0[69] = 2560;

        $r0[70] = 0;

        $r0[71] = 0;

        $r0[72] = 1;

        $r0[73] = 0;

        $r0[74] = 0;

        $r0[75] = 1;

        $r0[76] = 0;

        $r0[77] = 480;

        $r0[78] = 0;

        $r0[79] = 0;

        $r0[80] = 65536;

        <com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1_2> = $r0;

        return;
    }

    private static void jj_la1_init_3()
    {
        int[] $r0;

        $r0 = newarray (int)[81];

        $r0[0] = 0;

        $r0[1] = 0;

        $r0[2] = 0;

        $r0[3] = 0;

        $r0[4] = 0;

        $r0[5] = 0;

        $r0[6] = 0;

        $r0[7] = 2;

        $r0[8] = 0;

        $r0[9] = 0;

        $r0[10] = 2;

        $r0[11] = 0;

        $r0[12] = 0;

        $r0[13] = 0;

        $r0[14] = 0;

        $r0[15] = 0;

        $r0[16] = 0;

        $r0[17] = 0;

        $r0[18] = 0;

        $r0[19] = 0;

        $r0[20] = 0;

        $r0[21] = 0;

        $r0[22] = 0;

        $r0[23] = 0;

        $r0[24] = 0;

        $r0[25] = 0;

        $r0[26] = 0;

        $r0[27] = 0;

        $r0[28] = 0;

        $r0[29] = 0;

        $r0[30] = 0;

        $r0[31] = 0;

        $r0[32] = 0;

        $r0[33] = 0;

        $r0[34] = 0;

        $r0[35] = 0;

        $r0[36] = 0;

        $r0[37] = 0;

        $r0[38] = 0;

        $r0[39] = 0;

        $r0[40] = 0;

        $r0[41] = 0;

        $r0[42] = 0;

        $r0[43] = 0;

        $r0[44] = 0;

        $r0[45] = 0;

        $r0[46] = 0;

        $r0[47] = 0;

        $r0[48] = 0;

        $r0[49] = 0;

        $r0[50] = 0;

        $r0[51] = 0;

        $r0[52] = 0;

        $r0[53] = 0;

        $r0[54] = 0;

        $r0[55] = 0;

        $r0[56] = 0;

        $r0[57] = 0;

        $r0[58] = 1;

        $r0[59] = 0;

        $r0[60] = 6;

        $r0[61] = 6;

        $r0[62] = 1;

        $r0[63] = 6;

        $r0[64] = 6;

        $r0[65] = 1;

        $r0[66] = 0;

        $r0[67] = 0;

        $r0[68] = 0;

        $r0[69] = 0;

        $r0[70] = 8;

        $r0[71] = 8;

        $r0[72] = 0;

        $r0[73] = 0;

        $r0[74] = 0;

        $r0[75] = 0;

        $r0[76] = 0;

        $r0[77] = 0;

        $r0[78] = 0;

        $r0[79] = 0;

        $r0[80] = 0;

        <com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1_3> = $r0;

        return;
    }

    public void <init>(java.io.InputStream)
    {
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;
        java.io.InputStream r1;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: void <init>(java.io.InputStream,java.lang.String)>(r1, null);

        return;
    }

    public void <init>(java.io.InputStream, java.lang.String)
    {
        java.util.ArrayList $r12;
        com.hp.hpl.jena.sparql.lang.sparql_10.JavaCharStream $r7, $r13;
        com.hp.hpl.jena.sparql.lang.sparql_10.Token $r16;
        int[] $r1, $r9;
        int i0, $i2, $i4, $i6;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;
        java.lang.String r5;
        java.lang.RuntimeException $r14;
        java.io.UnsupportedEncodingException $r10;
        java.io.InputStream r4;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10TokenManager $r15;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        r4 := @parameter0: java.io.InputStream;

        r5 := @parameter1: java.lang.String;

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10Base: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: boolean allowAggregatesInExpressions> = 0;

        $r1 = newarray (int)[81];

        r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1> = $r1;

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: java.util.List jj_expentries> = $r12;

        $i2 = (int) -1;

        r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_kind> = $i2;

     label1:
        $r13 = new com.hp.hpl.jena.sparql.lang.sparql_10.JavaCharStream;

        specialinvoke $r13.<com.hp.hpl.jena.sparql.lang.sparql_10.JavaCharStream: void <init>(java.io.InputStream,java.lang.String,int,int)>(r4, r5, 1, 1);

        r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.JavaCharStream jj_input_stream> = $r13;

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

        $r14 = new java.lang.RuntimeException;

        specialinvoke $r14.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r10);

        throw $r14;

     label4:
        $r15 = new com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10TokenManager;

        $r7 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.JavaCharStream jj_input_stream>;

        specialinvoke $r15.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10TokenManager: void <init>(com.hp.hpl.jena.sparql.lang.sparql_10.JavaCharStream)>($r7);

        r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10TokenManager token_source> = $r15;

        $r16 = new com.hp.hpl.jena.sparql.lang.sparql_10.Token;

        specialinvoke $r16.<com.hp.hpl.jena.sparql.lang.sparql_10.Token: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token token> = $r16;

        $i4 = (int) -1;

        r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk> = $i4;

        r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen> = 0;

        i0 = 0;

     label5:
        if i0 >= 81 goto label6;

        $r9 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i6 = (int) -1;

        $r9[i0] = $i6;

        i0 = i0 + 1;

        goto label5;

     label6:
        return;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public void ReInit(java.io.InputStream)
    {
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;
        java.io.InputStream r1;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        r1 := @parameter0: java.io.InputStream;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: void ReInit(java.io.InputStream,java.lang.String)>(r1, null);

        return;
    }

    public void ReInit(java.io.InputStream, java.lang.String)
    {
        java.lang.RuntimeException $r10;
        com.hp.hpl.jena.sparql.lang.sparql_10.JavaCharStream $r3, $r4;
        com.hp.hpl.jena.sparql.lang.sparql_10.Token $r11;
        int[] $r7;
        int i0, $i2, $i4;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;
        java.lang.String r2;
        java.io.UnsupportedEncodingException $r8;
        java.io.InputStream r1;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10TokenManager $r5;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.lang.String;

     label1:
        $r3 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.JavaCharStream jj_input_stream>;

        virtualinvoke $r3.<com.hp.hpl.jena.sparql.lang.sparql_10.JavaCharStream: void ReInit(java.io.InputStream,java.lang.String,int,int)>(r1, r2, 1, 1);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r8);

        throw $r10;

     label4:
        $r5 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10TokenManager token_source>;

        $r4 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.JavaCharStream jj_input_stream>;

        virtualinvoke $r5.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10TokenManager: void ReInit(com.hp.hpl.jena.sparql.lang.sparql_10.JavaCharStream)>($r4);

        $r11 = new com.hp.hpl.jena.sparql.lang.sparql_10.Token;

        specialinvoke $r11.<com.hp.hpl.jena.sparql.lang.sparql_10.Token: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token token> = $r11;

        $i2 = (int) -1;

        r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk> = $i2;

        r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen> = 0;

        i0 = 0;

     label5:
        if i0 >= 81 goto label6;

        $r7 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i4 = (int) -1;

        $r7[i0] = $i4;

        i0 = i0 + 1;

        goto label5;

     label6:
        return;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public void <init>(java.io.Reader)
    {
        java.io.Reader r4;
        java.util.ArrayList $r9;
        com.hp.hpl.jena.sparql.lang.sparql_10.JavaCharStream $r6, $r10;
        com.hp.hpl.jena.sparql.lang.sparql_10.Token $r12;
        int[] $r1, $r8;
        int i0, $i2, $i4, $i6;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10TokenManager $r11;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        r4 := @parameter0: java.io.Reader;

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10Base: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: boolean allowAggregatesInExpressions> = 0;

        $r1 = newarray (int)[81];

        r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1> = $r1;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: java.util.List jj_expentries> = $r9;

        $i2 = (int) -1;

        r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_kind> = $i2;

        $r10 = new com.hp.hpl.jena.sparql.lang.sparql_10.JavaCharStream;

        specialinvoke $r10.<com.hp.hpl.jena.sparql.lang.sparql_10.JavaCharStream: void <init>(java.io.Reader,int,int)>(r4, 1, 1);

        r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.JavaCharStream jj_input_stream> = $r10;

        $r11 = new com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10TokenManager;

        $r6 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.JavaCharStream jj_input_stream>;

        specialinvoke $r11.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10TokenManager: void <init>(com.hp.hpl.jena.sparql.lang.sparql_10.JavaCharStream)>($r6);

        r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10TokenManager token_source> = $r11;

        $r12 = new com.hp.hpl.jena.sparql.lang.sparql_10.Token;

        specialinvoke $r12.<com.hp.hpl.jena.sparql.lang.sparql_10.Token: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token token> = $r12;

        $i4 = (int) -1;

        r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk> = $i4;

        r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen> = 0;

        i0 = 0;

     label1:
        if i0 >= 81 goto label2;

        $r8 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i6 = (int) -1;

        $r8[i0] = $i6;

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }

    public void ReInit(java.io.Reader)
    {
        java.io.Reader r1;
        com.hp.hpl.jena.sparql.lang.sparql_10.JavaCharStream $r2, $r3;
        com.hp.hpl.jena.sparql.lang.sparql_10.Token $r7;
        int[] $r6;
        int i0, $i2, $i4;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10TokenManager $r4;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        r1 := @parameter0: java.io.Reader;

        $r2 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.JavaCharStream jj_input_stream>;

        virtualinvoke $r2.<com.hp.hpl.jena.sparql.lang.sparql_10.JavaCharStream: void ReInit(java.io.Reader,int,int)>(r1, 1, 1);

        $r4 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10TokenManager token_source>;

        $r3 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.JavaCharStream jj_input_stream>;

        virtualinvoke $r4.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10TokenManager: void ReInit(com.hp.hpl.jena.sparql.lang.sparql_10.JavaCharStream)>($r3);

        $r7 = new com.hp.hpl.jena.sparql.lang.sparql_10.Token;

        specialinvoke $r7.<com.hp.hpl.jena.sparql.lang.sparql_10.Token: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token token> = $r7;

        $i2 = (int) -1;

        r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk> = $i2;

        r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen> = 0;

        i0 = 0;

     label1:
        if i0 >= 81 goto label2;

        $r6 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i4 = (int) -1;

        $r6[i0] = $i4;

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }

    public void <init>(com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10TokenManager)
    {
        java.util.ArrayList $r6;
        com.hp.hpl.jena.sparql.lang.sparql_10.Token $r7;
        int[] $r1, $r5;
        int i0, $i2, $i4, $i6;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10TokenManager r3;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        r3 := @parameter0: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10TokenManager;

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10Base: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: boolean allowAggregatesInExpressions> = 0;

        $r1 = newarray (int)[81];

        r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1> = $r1;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: java.util.List jj_expentries> = $r6;

        $i2 = (int) -1;

        r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_kind> = $i2;

        r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10TokenManager token_source> = r3;

        $r7 = new com.hp.hpl.jena.sparql.lang.sparql_10.Token;

        specialinvoke $r7.<com.hp.hpl.jena.sparql.lang.sparql_10.Token: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token token> = $r7;

        $i4 = (int) -1;

        r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk> = $i4;

        r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen> = 0;

        i0 = 0;

     label1:
        if i0 >= 81 goto label2;

        $r5 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i6 = (int) -1;

        $r5[i0] = $i6;

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }

    public void ReInit(com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10TokenManager)
    {
        com.hp.hpl.jena.sparql.lang.sparql_10.Token $r4;
        int[] $r3;
        int i0, $i2, $i4;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10TokenManager r1;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        r1 := @parameter0: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10TokenManager;

        r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10TokenManager token_source> = r1;

        $r4 = new com.hp.hpl.jena.sparql.lang.sparql_10.Token;

        specialinvoke $r4.<com.hp.hpl.jena.sparql.lang.sparql_10.Token: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token token> = $r4;

        $i2 = (int) -1;

        r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk> = $i2;

        r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen> = 0;

        i0 = 0;

     label1:
        if i0 >= 81 goto label2;

        $r3 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i4 = (int) -1;

        $r3[i0] = $i4;

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }

    private com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_consume_token(int) throws com.hp.hpl.jena.sparql.lang.sparql_10.ParseException
    {
        com.hp.hpl.jena.sparql.lang.sparql_10.ParseException $r7;
        com.hp.hpl.jena.sparql.lang.sparql_10.Token $r1, $r2, $r4, $r5, $r6, $r8, $r9, $r10;
        int i0, $i1, $i2, $i3, $i5;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10TokenManager $r3;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        i0 := @parameter0: int;

        $r1 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token token>;

        $r2 = $r1.<com.hp.hpl.jena.sparql.lang.sparql_10.Token: com.hp.hpl.jena.sparql.lang.sparql_10.Token next>;

        if $r2 == null goto label1;

        $r9 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token token>;

        $r10 = $r9.<com.hp.hpl.jena.sparql.lang.sparql_10.Token: com.hp.hpl.jena.sparql.lang.sparql_10.Token next>;

        r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token token> = $r10;

        goto label2;

     label1:
        $r4 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token token>;

        $r3 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10TokenManager token_source>;

        $r5 = virtualinvoke $r3.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10TokenManager: com.hp.hpl.jena.sparql.lang.sparql_10.Token getNextToken()>();

        $r4.<com.hp.hpl.jena.sparql.lang.sparql_10.Token: com.hp.hpl.jena.sparql.lang.sparql_10.Token next> = $r5;

        r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token token> = $r5;

     label2:
        $i5 = (int) -1;

        r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk> = $i5;

        $r6 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token token>;

        $i1 = $r6.<com.hp.hpl.jena.sparql.lang.sparql_10.Token: int kind>;

        if $i1 != i0 goto label3;

        $i2 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $i3 = $i2 + 1;

        r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen> = $i3;

        $r8 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token token>;

        return $r8;

     label3:
        r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token token> = $r1;

        r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_kind> = i0;

        $r7 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.ParseException generateParseException()>();

        throw $r7;
    }

    public final com.hp.hpl.jena.sparql.lang.sparql_10.Token getNextToken()
    {
        com.hp.hpl.jena.sparql.lang.sparql_10.Token $r1, $r2, $r4, $r5, $r6, $r7, $r8;
        int $i0, $i1, $i3;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10TokenManager $r3;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        $r1 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token token>;

        $r2 = $r1.<com.hp.hpl.jena.sparql.lang.sparql_10.Token: com.hp.hpl.jena.sparql.lang.sparql_10.Token next>;

        if $r2 == null goto label1;

        $r7 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token token>;

        $r8 = $r7.<com.hp.hpl.jena.sparql.lang.sparql_10.Token: com.hp.hpl.jena.sparql.lang.sparql_10.Token next>;

        r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token token> = $r8;

        goto label2;

     label1:
        $r4 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token token>;

        $r3 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10TokenManager token_source>;

        $r5 = virtualinvoke $r3.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10TokenManager: com.hp.hpl.jena.sparql.lang.sparql_10.Token getNextToken()>();

        $r4.<com.hp.hpl.jena.sparql.lang.sparql_10.Token: com.hp.hpl.jena.sparql.lang.sparql_10.Token next> = $r5;

        r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token token> = $r5;

     label2:
        $i3 = (int) -1;

        r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk> = $i3;

        $i0 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        $i1 = $i0 + 1;

        r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen> = $i1;

        $r6 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token token>;

        return $r6;
    }

    public final com.hp.hpl.jena.sparql.lang.sparql_10.Token getToken(int)
    {
        com.hp.hpl.jena.sparql.lang.sparql_10.Token $r1, $r3, r4;
        int i0, i1;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10TokenManager $r2;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        i0 := @parameter0: int;

        r4 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token token>;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        $r1 = r4.<com.hp.hpl.jena.sparql.lang.sparql_10.Token: com.hp.hpl.jena.sparql.lang.sparql_10.Token next>;

        if $r1 == null goto label2;

        r4 = r4.<com.hp.hpl.jena.sparql.lang.sparql_10.Token: com.hp.hpl.jena.sparql.lang.sparql_10.Token next>;

        goto label3;

     label2:
        $r2 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10TokenManager token_source>;

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10TokenManager: com.hp.hpl.jena.sparql.lang.sparql_10.Token getNextToken()>();

        r4.<com.hp.hpl.jena.sparql.lang.sparql_10.Token: com.hp.hpl.jena.sparql.lang.sparql_10.Token next> = $r3;

        r4 = $r3;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return r4;
    }

    private int jj_ntk()
    {
        com.hp.hpl.jena.sparql.lang.sparql_10.Token $r1, $r2, $r3, $r5, $r6;
        int $i0, $i1;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10TokenManager $r4;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        $r1 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token token>;

        $r2 = $r1.<com.hp.hpl.jena.sparql.lang.sparql_10.Token: com.hp.hpl.jena.sparql.lang.sparql_10.Token next>;

        r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_nt> = $r2;

        if $r2 != null goto label1;

        $r5 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token token>;

        $r4 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10TokenManager token_source>;

        $r6 = virtualinvoke $r4.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10TokenManager: com.hp.hpl.jena.sparql.lang.sparql_10.Token getNextToken()>();

        $r5.<com.hp.hpl.jena.sparql.lang.sparql_10.Token: com.hp.hpl.jena.sparql.lang.sparql_10.Token next> = $r6;

        $i1 = $r6.<com.hp.hpl.jena.sparql.lang.sparql_10.Token: int kind>;

        r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk> = $i1;

        return $i1;

     label1:
        $r3 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token jj_nt>;

        $i0 = $r3.<com.hp.hpl.jena.sparql.lang.sparql_10.Token: int kind>;

        r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_ntk> = $i0;

        return $i0;
    }

    public com.hp.hpl.jena.sparql.lang.sparql_10.ParseException generateParseException()
    {
        int[][] r20;
        com.hp.hpl.jena.sparql.lang.sparql_10.Token $r7;
        int[] $r10, $r11, $r12, $r13, $r15, $r16, $r17, $r18, $r19;
        boolean $z0;
        java.util.List $r1, $r3, $r4, $r8, $r14;
        java.lang.String[] $r6;
        com.hp.hpl.jena.sparql.lang.sparql_10.ParseException $r21;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, i21, i22, i23, i24, $i26;
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;
        boolean[] r2;
        java.lang.Object $r9;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        $r1 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: java.util.List jj_expentries>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

        r2 = newarray (boolean)[108];

        $i0 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_kind>;

        if $i0 < 0 goto label01;

        $i20 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_kind>;

        r2[$i20] = 1;

        $i26 = (int) -1;

        r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_kind> = $i26;

     label01:
        i21 = 0;

     label02:
        if i21 >= 81 goto label09;

        $r15 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1>;

        $i4 = $r15[i21];

        $i3 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int jj_gen>;

        if $i4 != $i3 goto label08;

        i22 = 0;

     label03:
        if i22 >= 32 goto label08;

        $r16 = <com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1_0>;

        $i6 = $r16[i21];

        $i5 = 1 << i22;

        $i7 = $i6 & $i5;

        if $i7 == 0 goto label04;

        r2[i22] = 1;

     label04:
        $r17 = <com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1_1>;

        $i9 = $r17[i21];

        $i8 = 1 << i22;

        $i10 = $i9 & $i8;

        if $i10 == 0 goto label05;

        $i19 = 32 + i22;

        r2[$i19] = 1;

     label05:
        $r18 = <com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1_2>;

        $i12 = $r18[i21];

        $i11 = 1 << i22;

        $i13 = $i12 & $i11;

        if $i13 == 0 goto label06;

        $i18 = 64 + i22;

        r2[$i18] = 1;

     label06:
        $r19 = <com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_la1_3>;

        $i15 = $r19[i21];

        $i14 = 1 << i22;

        $i16 = $i15 & $i14;

        if $i16 == 0 goto label07;

        $i17 = 96 + i22;

        r2[$i17] = 1;

     label07:
        i22 = i22 + 1;

        goto label03;

     label08:
        i21 = i21 + 1;

        goto label02;

     label09:
        i23 = 0;

     label10:
        if i23 >= 108 goto label12;

        $z0 = r2[i23];

        if $z0 == 0 goto label11;

        $r11 = newarray (int)[1];

        r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_expentry> = $r11;

        $r12 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_expentry>;

        $r12[0] = i23;

        $r14 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: java.util.List jj_expentries>;

        $r13 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: int[] jj_expentry>;

        interfaceinvoke $r14.<java.util.List: boolean add(java.lang.Object)>($r13);

     label11:
        i23 = i23 + 1;

        goto label10;

     label12:
        $r3 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: java.util.List jj_expentries>;

        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        r20 = newarray (int[])[$i1];

        i24 = 0;

     label13:
        $r4 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: java.util.List jj_expentries>;

        $i2 = interfaceinvoke $r4.<java.util.List: int size()>();

        if i24 >= $i2 goto label14;

        $r8 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: java.util.List jj_expentries>;

        $r9 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>(i24);

        $r10 = (int[]) $r9;

        r20[i24] = $r10;

        i24 = i24 + 1;

        goto label13;

     label14:
        $r21 = new com.hp.hpl.jena.sparql.lang.sparql_10.ParseException;

        $r7 = r0.<com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: com.hp.hpl.jena.sparql.lang.sparql_10.Token token>;

        $r6 = <com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: java.lang.String[] tokenImage>;

        specialinvoke $r21.<com.hp.hpl.jena.sparql.lang.sparql_10.ParseException: void <init>(com.hp.hpl.jena.sparql.lang.sparql_10.Token,int[][],java.lang.String[])>($r7, r20, $r6);

        return $r21;
    }

    public final void enable_tracing()
    {
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        return;
    }

    public final void disable_tracing()
    {
        com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10 r0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10;

        return;
    }

    static void <clinit>()
    {
        staticinvoke <com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: void jj_la1_init_0()>();

        staticinvoke <com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: void jj_la1_init_1()>();

        staticinvoke <com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: void jj_la1_init_2()>();

        staticinvoke <com.hp.hpl.jena.sparql.lang.sparql_10.SPARQLParser10: void jj_la1_init_3()>();

        return;
    }
}
