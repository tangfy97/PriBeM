final class kodkod.util.ints.TreeSequence$Entry extends kodkod.util.ints.IntTree$Node implements kodkod.util.ints.IndexedEntry, java.lang.Cloneable
{
    java.lang.Object value;

    void <init>(int, java.lang.Object)
    {
        int i0;
        java.lang.Object r1;
        kodkod.util.ints.TreeSequence$Entry r0;

        r0 := @this: kodkod.util.ints.TreeSequence$Entry;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        specialinvoke r0.<kodkod.util.ints.IntTree$Node: void <init>(int)>(i0);

        r0.<kodkod.util.ints.TreeSequence$Entry: java.lang.Object value> = r1;

        return;
    }

    public int index()
    {
        int $i0;
        kodkod.util.ints.TreeSequence$Entry r0;

        r0 := @this: kodkod.util.ints.TreeSequence$Entry;

        $i0 = r0.<kodkod.util.ints.TreeSequence$Entry: int key>;

        return $i0;
    }

    public java.lang.Object value()
    {
        java.lang.Object $r1;
        kodkod.util.ints.TreeSequence$Entry r0;

        r0 := @this: kodkod.util.ints.TreeSequence$Entry;

        $r1 = r0.<kodkod.util.ints.TreeSequence$Entry: java.lang.Object value>;

        return $r1;
    }

    java.lang.Object setValue(java.lang.Object)
    {
        java.lang.Object r1, r2;
        kodkod.util.ints.TreeSequence$Entry r0;

        r0 := @this: kodkod.util.ints.TreeSequence$Entry;

        r2 := @parameter0: java.lang.Object;

        r1 = r0.<kodkod.util.ints.TreeSequence$Entry: java.lang.Object value>;

        r0.<kodkod.util.ints.TreeSequence$Entry: java.lang.Object value> = r2;

        return r1;
    }

    public boolean equals(java.lang.Object)
    {
        kodkod.util.ints.TreeSequence$Entry r1;
        kodkod.util.ints.IndexedEntry $r2;
        java.lang.Object r0;
        boolean $z0, $z1;

        r1 := @this: kodkod.util.ints.TreeSequence$Entry;

        r0 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r0 instanceof kodkod.util.ints.IndexedEntry;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $r2 = (kodkod.util.ints.IndexedEntry) r0;

        $z1 = staticinvoke <kodkod.util.ints.AbstractSparseSequence: boolean equal(kodkod.util.ints.IndexedEntry,kodkod.util.ints.IndexedEntry)>(r1, $r2);

        return $z1;
    }

    public int hashCode()
    {
        int $i0;
        kodkod.util.ints.TreeSequence$Entry r0;

        r0 := @this: kodkod.util.ints.TreeSequence$Entry;

        $i0 = staticinvoke <kodkod.util.ints.AbstractSparseSequence: int hashCode(kodkod.util.ints.IndexedEntry)>(r0);

        return $i0;
    }

    public java.lang.String toString()
    {
        kodkod.util.ints.TreeSequence$Entry r1;
        int $i0;
        java.lang.StringBuilder $r0, $r3, $r5;
        java.lang.Object $r4;
        java.lang.String $r2, $r6;

        r1 := @this: kodkod.util.ints.TreeSequence$Entry;

        $r0 = new java.lang.StringBuilder;

        $i0 = r1.<kodkod.util.ints.TreeSequence$Entry: int key>;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0);

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>($r2);

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        $r4 = r1.<kodkod.util.ints.TreeSequence$Entry: java.lang.Object value>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    protected kodkod.util.ints.TreeSequence$Entry clone() throws java.lang.CloneNotSupportedException
    {
        kodkod.util.ints.IntTree$Node $r1;
        kodkod.util.ints.TreeSequence$Entry r0, $r2, $r3;

        r0 := @this: kodkod.util.ints.TreeSequence$Entry;

        $r1 = specialinvoke r0.<kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node clone()>();

        $r2 = (kodkod.util.ints.TreeSequence$Entry) $r1;

        $r3 = (kodkod.util.ints.TreeSequence$Entry) $r2;

        return $r3;
    }

    protected volatile kodkod.util.ints.IntTree$Node clone() throws java.lang.CloneNotSupportedException
    {
        kodkod.util.ints.IntTree$Node $r2;
        kodkod.util.ints.TreeSequence$Entry r0, $r1;

        r0 := @this: kodkod.util.ints.TreeSequence$Entry;

        $r1 = virtualinvoke r0.<kodkod.util.ints.TreeSequence$Entry: kodkod.util.ints.TreeSequence$Entry clone()>();

        $r2 = (kodkod.util.ints.IntTree$Node) $r1;

        return $r2;
    }
}
