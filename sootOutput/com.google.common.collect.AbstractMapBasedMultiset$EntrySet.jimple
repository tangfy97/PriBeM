class com.google.common.collect.AbstractMapBasedMultiset$EntrySet extends java.util.AbstractSet
{
    final com.google.common.collect.AbstractMapBasedMultiset this$0;

    private void <init>(com.google.common.collect.AbstractMapBasedMultiset)
    {
        com.google.common.collect.AbstractMapBasedMultiset r1;
        com.google.common.collect.AbstractMapBasedMultiset$EntrySet r0;

        r0 := @this: com.google.common.collect.AbstractMapBasedMultiset$EntrySet;

        r1 := @parameter0: com.google.common.collect.AbstractMapBasedMultiset;

        r0.<com.google.common.collect.AbstractMapBasedMultiset$EntrySet: com.google.common.collect.AbstractMapBasedMultiset this$0> = r1;

        specialinvoke r0.<java.util.AbstractSet: void <init>()>();

        return;
    }

    public java.util.Iterator iterator()
    {
        com.google.common.collect.AbstractMapBasedMultiset$EntrySet r0;
        java.util.Iterator $r4;
        java.util.Map $r2;
        com.google.common.collect.AbstractMapBasedMultiset $r1;
        java.util.Set $r3;
        com.google.common.collect.AbstractMapBasedMultiset$EntrySet$1 $r5;

        r0 := @this: com.google.common.collect.AbstractMapBasedMultiset$EntrySet;

        $r1 = r0.<com.google.common.collect.AbstractMapBasedMultiset$EntrySet: com.google.common.collect.AbstractMapBasedMultiset this$0>;

        $r2 = staticinvoke <com.google.common.collect.AbstractMapBasedMultiset: java.util.Map access$100(com.google.common.collect.AbstractMapBasedMultiset)>($r1);

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

        $r5 = new com.google.common.collect.AbstractMapBasedMultiset$EntrySet$1;

        specialinvoke $r5.<com.google.common.collect.AbstractMapBasedMultiset$EntrySet$1: void <init>(com.google.common.collect.AbstractMapBasedMultiset$EntrySet,java.util.Iterator)>(r0, $r4);

        return $r5;
    }

    public int size()
    {
        com.google.common.collect.AbstractMapBasedMultiset$EntrySet r0;
        java.util.Map $r2;
        com.google.common.collect.AbstractMapBasedMultiset $r1;
        int $i0;

        r0 := @this: com.google.common.collect.AbstractMapBasedMultiset$EntrySet;

        $r1 = r0.<com.google.common.collect.AbstractMapBasedMultiset$EntrySet: com.google.common.collect.AbstractMapBasedMultiset this$0>;

        $r2 = staticinvoke <com.google.common.collect.AbstractMapBasedMultiset: java.util.Map access$100(com.google.common.collect.AbstractMapBasedMultiset)>($r1);

        $i0 = interfaceinvoke $r2.<java.util.Map: int size()>();

        return $i0;
    }

    public void clear()
    {
        com.google.common.collect.AbstractMapBasedMultiset$EntrySet r0;
        java.util.Iterator $r4;
        java.util.Collection $r3;
        com.google.common.collect.AbstractMapBasedMultiset $r1, $r5, $r7;
        java.util.concurrent.atomic.AtomicInteger r9;
        java.util.Map $r2, $r6;
        java.lang.Object $r8;
        boolean $z0;

        r0 := @this: com.google.common.collect.AbstractMapBasedMultiset$EntrySet;

        $r1 = r0.<com.google.common.collect.AbstractMapBasedMultiset$EntrySet: com.google.common.collect.AbstractMapBasedMultiset this$0>;

        $r2 = staticinvoke <com.google.common.collect.AbstractMapBasedMultiset: java.util.Map access$100(com.google.common.collect.AbstractMapBasedMultiset)>($r1);

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>();

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r9 = (java.util.concurrent.atomic.AtomicInteger) $r8;

        virtualinvoke r9.<java.util.concurrent.atomic.AtomicInteger: void set(int)>(0);

        goto label1;

     label2:
        $r5 = r0.<com.google.common.collect.AbstractMapBasedMultiset$EntrySet: com.google.common.collect.AbstractMapBasedMultiset this$0>;

        $r6 = staticinvoke <com.google.common.collect.AbstractMapBasedMultiset: java.util.Map access$100(com.google.common.collect.AbstractMapBasedMultiset)>($r5);

        interfaceinvoke $r6.<java.util.Map: void clear()>();

        $r7 = r0.<com.google.common.collect.AbstractMapBasedMultiset$EntrySet: com.google.common.collect.AbstractMapBasedMultiset this$0>;

        staticinvoke <com.google.common.collect.AbstractMapBasedMultiset: long access$202(com.google.common.collect.AbstractMapBasedMultiset,long)>($r7, 0L);

        return;
    }

    public boolean contains(java.lang.Object)
    {
        com.google.common.collect.AbstractMapBasedMultiset$EntrySet r2;
        com.google.common.collect.AbstractMapBasedMultiset $r3;
        com.google.common.collect.Multiset$Entry r1;
        int $i0, $i1;
        java.lang.Object r0, $r4;
        boolean $z0, $z1;

        r2 := @this: com.google.common.collect.AbstractMapBasedMultiset$EntrySet;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof com.google.common.collect.Multiset$Entry;

        if $z0 == 0 goto label3;

        r1 = (com.google.common.collect.Multiset$Entry) r0;

        $r3 = r2.<com.google.common.collect.AbstractMapBasedMultiset$EntrySet: com.google.common.collect.AbstractMapBasedMultiset this$0>;

        $r4 = interfaceinvoke r1.<com.google.common.collect.Multiset$Entry: java.lang.Object getElement()>();

        $i0 = virtualinvoke $r3.<com.google.common.collect.AbstractMapBasedMultiset: int count(java.lang.Object)>($r4);

        $i1 = interfaceinvoke r1.<com.google.common.collect.Multiset$Entry: int getCount()>();

        if $i0 != $i1 goto label1;

        if $i0 <= 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;

     label3:
        return 0;
    }

    public boolean remove(java.lang.Object)
    {
        com.google.common.collect.AbstractMapBasedMultiset$EntrySet r0;
        com.google.common.collect.AbstractMapBasedMultiset $r3, $r8;
        long $l1;
        com.google.common.collect.Multiset$Entry r2;
        java.util.concurrent.atomic.AtomicInteger r7;
        java.util.Map $r4;
        int $i0;
        java.lang.Object r1, $r5, $r6;
        boolean $z0;

        r0 := @this: com.google.common.collect.AbstractMapBasedMultiset$EntrySet;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<com.google.common.collect.AbstractMapBasedMultiset$EntrySet: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        r2 = (com.google.common.collect.Multiset$Entry) r1;

        $r3 = r0.<com.google.common.collect.AbstractMapBasedMultiset$EntrySet: com.google.common.collect.AbstractMapBasedMultiset this$0>;

        $r4 = staticinvoke <com.google.common.collect.AbstractMapBasedMultiset: java.util.Map access$100(com.google.common.collect.AbstractMapBasedMultiset)>($r3);

        $r5 = interfaceinvoke r2.<com.google.common.collect.Multiset$Entry: java.lang.Object getElement()>();

        $r6 = interfaceinvoke $r4.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r5);

        r7 = (java.util.concurrent.atomic.AtomicInteger) $r6;

        $i0 = virtualinvoke r7.<java.util.concurrent.atomic.AtomicInteger: int getAndSet(int)>(0);

        $r8 = r0.<com.google.common.collect.AbstractMapBasedMultiset$EntrySet: com.google.common.collect.AbstractMapBasedMultiset this$0>;

        $l1 = (long) $i0;

        staticinvoke <com.google.common.collect.AbstractMapBasedMultiset: long access$222(com.google.common.collect.AbstractMapBasedMultiset,long)>($r8, $l1);

        return 1;

     label1:
        return 0;
    }

    void <init>(com.google.common.collect.AbstractMapBasedMultiset, com.google.common.collect.AbstractMapBasedMultiset$1)
    {
        com.google.common.collect.AbstractMapBasedMultiset r1;
        com.google.common.collect.AbstractMapBasedMultiset$EntrySet r0;
        com.google.common.collect.AbstractMapBasedMultiset$1 r2;

        r0 := @this: com.google.common.collect.AbstractMapBasedMultiset$EntrySet;

        r1 := @parameter0: com.google.common.collect.AbstractMapBasedMultiset;

        r2 := @parameter1: com.google.common.collect.AbstractMapBasedMultiset$1;

        specialinvoke r0.<com.google.common.collect.AbstractMapBasedMultiset$EntrySet: void <init>(com.google.common.collect.AbstractMapBasedMultiset)>(r1);

        return;
    }
}
