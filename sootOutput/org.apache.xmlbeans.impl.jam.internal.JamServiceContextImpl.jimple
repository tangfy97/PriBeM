public class org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl extends org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl implements org.apache.xmlbeans.impl.jam.provider.JamServiceContext, org.apache.xmlbeans.impl.jam.JamServiceParams, org.apache.xmlbeans.impl.jam.internal.elements.ElementContext
{
    private static final char INNER_CLASS_SEPARATOR;
    private boolean m14WarningsEnabled;
    private java.util.Properties mProperties;
    private java.util.Map mSourceRoot2Scanner;
    private java.util.Map mClassRoot2Scanner;
    private java.util.List mClasspath;
    private java.util.List mSourcepath;
    private java.util.List mToolClasspath;
    private java.util.List mIncludeClasses;
    private java.util.List mExcludeClasses;
    private boolean mUseSystemClasspath;
    private org.apache.xmlbeans.impl.jam.'annotation'.JavadocTagParser mTagParser;
    private org.apache.xmlbeans.impl.jam.visitor.MVisitor mCommentInitializer;
    private org.apache.xmlbeans.impl.jam.visitor.MVisitor mPropertyInitializer;
    private java.util.List mOtherInitializers;
    private java.util.List mUnstructuredSourceFiles;
    private java.util.List mClassLoaders;
    private java.util.List mBaseBuilders;
    private org.apache.xmlbeans.impl.jam.JamClassLoader mLoader;
    private static final java.lang.String PREFIX;

    public void setClassLoader(org.apache.xmlbeans.impl.jam.JamClassLoader)
    {
        org.apache.xmlbeans.impl.jam.JamClassLoader r1;
        org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl;

        r1 := @parameter0: org.apache.xmlbeans.impl.jam.JamClassLoader;

        r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: org.apache.xmlbeans.impl.jam.JamClassLoader mLoader> = r1;

        return;
    }

    public org.apache.xmlbeans.impl.jam.provider.JamClassBuilder getBaseBuilder()
    {
        org.apache.xmlbeans.impl.jam.provider.JamClassBuilder[] r5;
        org.apache.xmlbeans.impl.jam.provider.JamClassBuilder $r10;
        java.util.List $r1, $r2, $r3, $r4, $r6, $r8;
        int $i0, $i1, $i2;
        org.apache.xmlbeans.impl.jam.provider.CompositeJamClassBuilder $r7;
        java.lang.Object $r9;
        org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.List mBaseBuilders>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.List mBaseBuilders>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 != 0 goto label2;

     label1:
        return null;

     label2:
        $r3 = r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.List mBaseBuilders>;

        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        if $i1 != 1 goto label3;

        $r8 = r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.List mBaseBuilders>;

        $r9 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>(0);

        $r10 = (org.apache.xmlbeans.impl.jam.provider.JamClassBuilder) $r9;

        return $r10;

     label3:
        $r4 = r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.List mBaseBuilders>;

        $i2 = interfaceinvoke $r4.<java.util.List: int size()>();

        r5 = newarray (org.apache.xmlbeans.impl.jam.provider.JamClassBuilder)[$i2];

        $r6 = r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.List mBaseBuilders>;

        interfaceinvoke $r6.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r5);

        $r7 = new org.apache.xmlbeans.impl.jam.provider.CompositeJamClassBuilder;

        specialinvoke $r7.<org.apache.xmlbeans.impl.jam.provider.CompositeJamClassBuilder: void <init>(org.apache.xmlbeans.impl.jam.provider.JamClassBuilder[])>(r5);

        return $r7;
    }

    public org.apache.xmlbeans.impl.jam.'annotation'.JavadocTagParser getTagParser()
    {
        org.apache.xmlbeans.impl.jam.'annotation'.WhitespaceDelimitedTagParser $r3;
        org.apache.xmlbeans.impl.jam.'annotation'.JavadocTagParser $r1, $r2, $r4;
        org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: org.apache.xmlbeans.impl.jam.'annotation'.JavadocTagParser mTagParser>;

        if $r1 != null goto label1;

        $r3 = new org.apache.xmlbeans.impl.jam.'annotation'.WhitespaceDelimitedTagParser;

        specialinvoke $r3.<org.apache.xmlbeans.impl.jam.'annotation'.WhitespaceDelimitedTagParser: void <init>()>();

        r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: org.apache.xmlbeans.impl.jam.'annotation'.JavadocTagParser mTagParser> = $r3;

        $r4 = r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: org.apache.xmlbeans.impl.jam.'annotation'.JavadocTagParser mTagParser>;

        virtualinvoke $r4.<org.apache.xmlbeans.impl.jam.'annotation'.JavadocTagParser: void init(org.apache.xmlbeans.impl.jam.provider.JamServiceContext)>(r0);

     label1:
        $r2 = r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: org.apache.xmlbeans.impl.jam.'annotation'.JavadocTagParser mTagParser>;

        return $r2;
    }

    public void <init>()
    {
        org.apache.xmlbeans.impl.jam.visitor.PropertyInitializer $r1;
        org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl;

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl: void <init>()>();

        r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: boolean m14WarningsEnabled> = 0;

        r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.Properties mProperties> = null;

        r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.Map mSourceRoot2Scanner> = null;

        r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.Map mClassRoot2Scanner> = null;

        r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.List mClasspath> = null;

        r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.List mSourcepath> = null;

        r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.List mToolClasspath> = null;

        r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.List mIncludeClasses> = null;

        r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.List mExcludeClasses> = null;

        r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: boolean mUseSystemClasspath> = 1;

        r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: org.apache.xmlbeans.impl.jam.'annotation'.JavadocTagParser mTagParser> = null;

        r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: org.apache.xmlbeans.impl.jam.visitor.MVisitor mCommentInitializer> = null;

        $r1 = new org.apache.xmlbeans.impl.jam.visitor.PropertyInitializer;

        specialinvoke $r1.<org.apache.xmlbeans.impl.jam.visitor.PropertyInitializer: void <init>()>();

        r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: org.apache.xmlbeans.impl.jam.visitor.MVisitor mPropertyInitializer> = $r1;

        r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.List mOtherInitializers> = null;

        r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.List mUnstructuredSourceFiles> = null;

        r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.List mClassLoaders> = null;

        r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.List mBaseBuilders> = null;

        r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: org.apache.xmlbeans.impl.jam.JamClassLoader mLoader> = null;

        return;
    }

    public java.lang.String[] getAllClassnames() throws java.io.IOException
    {
        java.lang.String[] $r6, $r9;
        java.util.HashSet $r14;
        int $i0, $i1, $i2, i3, $i5;
        java.lang.String $r10, $r11, $r12;
        boolean $z0;
        java.util.Iterator $r3;
        java.util.List $r2, $r4, $r5, $r13;
        java.lang.Object $r7;
        org.apache.xmlbeans.impl.jam.internal.DirectoryScanner r8;
        org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl r1;

        r1 := @this: org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl;

        $r14 = new java.util.HashSet;

        specialinvoke $r14.<java.util.HashSet: void <init>()>();

        $r2 = r1.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.List mIncludeClasses>;

        if $r2 == null goto label1;

        $r13 = r1.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.List mIncludeClasses>;

        interfaceinvoke $r14.<java.util.Set: boolean addAll(java.util.Collection)>($r13);

     label1:
        $r3 = specialinvoke r1.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.Iterator getAllDirectoryScanners()>();

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r7 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.apache.xmlbeans.impl.jam.internal.DirectoryScanner) $r7;

        $r9 = virtualinvoke r8.<org.apache.xmlbeans.impl.jam.internal.DirectoryScanner: java.lang.String[] getIncludedFiles()>();

        i3 = 0;

     label3:
        $i1 = lengthof $r9;

        if i3 >= $i1 goto label5;

        $r10 = $r9[i3];

        $i2 = virtualinvoke $r10.<java.lang.String: int indexOf(int)>(36);

        $i5 = (int) -1;

        if $i2 != $i5 goto label4;

        $r11 = $r9[i3];

        $r12 = staticinvoke <org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.lang.String filename2classname(java.lang.String)>($r11);

        interfaceinvoke $r14.<java.util.Set: boolean add(java.lang.Object)>($r12);

     label4:
        i3 = i3 + 1;

        goto label3;

     label5:
        goto label2;

     label6:
        $r4 = r1.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.List mExcludeClasses>;

        if $r4 == null goto label7;

        $r5 = r1.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.List mExcludeClasses>;

        interfaceinvoke $r14.<java.util.Set: boolean removeAll(java.util.Collection)>($r5);

     label7:
        $i0 = interfaceinvoke $r14.<java.util.Set: int size()>();

        $r6 = newarray (java.lang.String)[$i0];

        interfaceinvoke $r14.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r6);

        return $r6;
    }

    public org.apache.xmlbeans.impl.jam.provider.JamLogger getLogger()
    {
        org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl;

        return r0;
    }

    public java.io.File[] getSourceFiles() throws java.io.IOException
    {
        java.util.Map $r2, $r11;
        boolean $z0, $z1, $z2, $z3;
        java.util.Collection $r12;
        java.util.List $r3, $r4, $r7;
        org.apache.xmlbeans.impl.jam.internal.DirectoryScanner r15;
        org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl r1;
        java.lang.String[] $r16;
        java.util.HashSet $r0;
        java.lang.StringBuffer $r5, $r6, $r8, $r9, $r20, $r21, $r23, $r25, $r26, $r28;
        int $i0, i1, $i2, $i3;
        java.lang.String $r10, $r19, $r22, $r24, $r29;
        java.util.Iterator $r13;
        java.io.File $r17, $r18, $r27;
        java.lang.Object $r14;
        java.io.File[] $r30;

        r1 := @this: org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        $r2 = r1.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.Map mSourceRoot2Scanner>;

        if $r2 == null goto label6;

        $r11 = r1.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.Map mSourceRoot2Scanner>;

        $r12 = interfaceinvoke $r11.<java.util.Map: java.util.Collection values()>();

        $r13 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r14 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r15 = (org.apache.xmlbeans.impl.jam.internal.DirectoryScanner) $r14;

        $z2 = virtualinvoke r1.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: boolean isVerbose(java.lang.Object)>(r1);

        if $z2 == 0 goto label2;

        $r25 = new java.lang.StringBuffer;

        specialinvoke $r25.<java.lang.StringBuffer: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[JamServiceContextImpl]  checking scanner for dir");

        $r27 = virtualinvoke r15.<org.apache.xmlbeans.impl.jam.internal.DirectoryScanner: java.io.File getRoot()>();

        $r28 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r1.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: void verbose(java.lang.String)>($r29);

     label2:
        $r16 = virtualinvoke r15.<org.apache.xmlbeans.impl.jam.internal.DirectoryScanner: java.lang.String[] getIncludedFiles()>();

        i1 = 0;

     label3:
        $i2 = lengthof $r16;

        if i1 >= $i2 goto label5;

        $z3 = virtualinvoke r1.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: boolean isVerbose(java.lang.Object)>(r1);

        if $z3 == 0 goto label4;

        $r20 = new java.lang.StringBuffer;

        specialinvoke $r20.<java.lang.StringBuffer: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[JamServiceContextImpl]  ...including a source file ");

        $r22 = $r16[i1];

        $r23 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r1.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: void verbose(java.lang.String)>($r24);

     label4:
        $r17 = new java.io.File;

        $r18 = virtualinvoke r15.<org.apache.xmlbeans.impl.jam.internal.DirectoryScanner: java.io.File getRoot()>();

        $r19 = $r16[i1];

        specialinvoke $r17.<java.io.File: void <init>(java.io.File,java.lang.String)>($r18, $r19);

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r17);

        i1 = i1 + 1;

        goto label3;

     label5:
        goto label1;

     label6:
        $r3 = r1.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.List mUnstructuredSourceFiles>;

        if $r3 == null goto label8;

        $z0 = virtualinvoke r1.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: boolean isVerbose(java.lang.Object)>(r1);

        if $z0 == 0 goto label7;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[JamServiceContextImpl] adding ");

        $r7 = r1.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.List mUnstructuredSourceFiles>;

        $i0 = interfaceinvoke $r7.<java.util.List: int size()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" other source files");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r1.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: void verbose(java.lang.String)>($r10);

     label7:
        $r4 = r1.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.List mUnstructuredSourceFiles>;

        interfaceinvoke $r0.<java.util.Set: boolean addAll(java.util.Collection)>($r4);

     label8:
        $i3 = interfaceinvoke $r0.<java.util.Set: int size()>();

        $r30 = newarray (java.io.File)[$i3];

        interfaceinvoke $r0.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r30);

        return $r30;
    }

    public java.io.File[] getUnstructuredSourceFiles()
    {
        java.util.List $r1, $r2, $r4;
        int $i0;
        java.io.File[] r3;
        org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.List mUnstructuredSourceFiles>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.List mUnstructuredSourceFiles>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        r3 = newarray (java.io.File)[$i0];

        $r4 = r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.List mUnstructuredSourceFiles>;

        interfaceinvoke $r4.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r3);

        return r3;
    }

    public org.apache.xmlbeans.impl.jam.provider.ResourcePath getInputClasspath()
    {
        java.util.List $r1;
        org.apache.xmlbeans.impl.jam.provider.ResourcePath $r2;
        org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.List mClasspath>;

        $r2 = staticinvoke <org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: org.apache.xmlbeans.impl.jam.provider.ResourcePath createJPath(java.util.Collection)>($r1);

        return $r2;
    }

    public org.apache.xmlbeans.impl.jam.provider.ResourcePath getInputSourcepath()
    {
        java.util.List $r1;
        org.apache.xmlbeans.impl.jam.provider.ResourcePath $r2;
        org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.List mSourcepath>;

        $r2 = staticinvoke <org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: org.apache.xmlbeans.impl.jam.provider.ResourcePath createJPath(java.util.Collection)>($r1);

        return $r2;
    }

    public org.apache.xmlbeans.impl.jam.provider.ResourcePath getToolClasspath()
    {
        java.util.List $r1;
        org.apache.xmlbeans.impl.jam.provider.ResourcePath $r2;
        org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.List mToolClasspath>;

        $r2 = staticinvoke <org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: org.apache.xmlbeans.impl.jam.provider.ResourcePath createJPath(java.util.Collection)>($r1);

        return $r2;
    }

    public java.lang.String getProperty(java.lang.String)
    {
        java.util.Properties $r1, $r3;
        java.lang.String r2, $r4;
        org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.Properties mProperties>;

        if $r1 != null goto label1;

        $r4 = null;

        goto label2;

     label1:
        $r3 = r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.Properties mProperties>;

        $r4 = virtualinvoke $r3.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r2);

     label2:
        return $r4;
    }

    public org.apache.xmlbeans.impl.jam.visitor.MVisitor getInitializer()
    {
        org.apache.xmlbeans.impl.jam.visitor.CompositeMVisitor $r5;
        org.apache.xmlbeans.impl.jam.visitor.MVisitor $r2, $r3, $r8, $r9;
        java.util.ArrayList $r0;
        org.apache.xmlbeans.impl.jam.visitor.MVisitor[] $r7;
        java.util.List $r4, $r6;
        int $i0;
        org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl r1;

        r1 := @this: org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = r1.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: org.apache.xmlbeans.impl.jam.visitor.MVisitor mCommentInitializer>;

        if $r2 == null goto label1;

        $r9 = r1.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: org.apache.xmlbeans.impl.jam.visitor.MVisitor mCommentInitializer>;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r9);

     label1:
        $r3 = r1.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: org.apache.xmlbeans.impl.jam.visitor.MVisitor mPropertyInitializer>;

        if $r3 == null goto label2;

        $r8 = r1.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: org.apache.xmlbeans.impl.jam.visitor.MVisitor mPropertyInitializer>;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r8);

     label2:
        $r4 = r1.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.List mOtherInitializers>;

        if $r4 == null goto label3;

        $r6 = r1.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.List mOtherInitializers>;

        interfaceinvoke $r0.<java.util.List: boolean addAll(java.util.Collection)>($r6);

     label3:
        $i0 = interfaceinvoke $r0.<java.util.List: int size()>();

        $r7 = newarray (org.apache.xmlbeans.impl.jam.visitor.MVisitor)[$i0];

        interfaceinvoke $r0.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r7);

        $r5 = new org.apache.xmlbeans.impl.jam.visitor.CompositeMVisitor;

        specialinvoke $r5.<org.apache.xmlbeans.impl.jam.visitor.CompositeMVisitor: void <init>(org.apache.xmlbeans.impl.jam.visitor.MVisitor[])>($r7);

        return $r5;
    }

    public void addClassBuilder(org.apache.xmlbeans.impl.jam.provider.JamClassBuilder)
    {
        org.apache.xmlbeans.impl.jam.provider.JamClassBuilder r2;
        java.util.List $r1, $r3;
        org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl r0;
        java.util.ArrayList $r4;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl;

        r2 := @parameter0: org.apache.xmlbeans.impl.jam.provider.JamClassBuilder;

        $r1 = r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.List mBaseBuilders>;

        if $r1 != null goto label1;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.List mBaseBuilders> = $r4;

     label1:
        $r3 = r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.List mBaseBuilders>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r2);

        return;
    }

    public void setCommentInitializer(org.apache.xmlbeans.impl.jam.visitor.MVisitor)
    {
        org.apache.xmlbeans.impl.jam.visitor.MVisitor r1;
        org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl;

        r1 := @parameter0: org.apache.xmlbeans.impl.jam.visitor.MVisitor;

        r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: org.apache.xmlbeans.impl.jam.visitor.MVisitor mCommentInitializer> = r1;

        return;
    }

    public void setPropertyInitializer(org.apache.xmlbeans.impl.jam.visitor.MVisitor)
    {
        org.apache.xmlbeans.impl.jam.visitor.MVisitor r1;
        org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl;

        r1 := @parameter0: org.apache.xmlbeans.impl.jam.visitor.MVisitor;

        r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: org.apache.xmlbeans.impl.jam.visitor.MVisitor mPropertyInitializer> = r1;

        return;
    }

    public void addInitializer(org.apache.xmlbeans.impl.jam.visitor.MVisitor)
    {
        java.util.List $r1, $r3;
        org.apache.xmlbeans.impl.jam.visitor.MVisitor r2;
        org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl r0;
        java.util.ArrayList $r4;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl;

        r2 := @parameter0: org.apache.xmlbeans.impl.jam.visitor.MVisitor;

        $r1 = r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.List mOtherInitializers>;

        if $r1 != null goto label1;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.List mOtherInitializers> = $r4;

     label1:
        $r3 = r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.List mOtherInitializers>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r2);

        return;
    }

    public void setJavadocTagParser(org.apache.xmlbeans.impl.jam.'annotation'.JavadocTagParser)
    {
        org.apache.xmlbeans.impl.jam.'annotation'.JavadocTagParser r1;
        org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl;

        r1 := @parameter0: org.apache.xmlbeans.impl.jam.'annotation'.JavadocTagParser;

        r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: org.apache.xmlbeans.impl.jam.'annotation'.JavadocTagParser mTagParser> = r1;

        virtualinvoke r1.<org.apache.xmlbeans.impl.jam.'annotation'.JavadocTagParser: void init(org.apache.xmlbeans.impl.jam.provider.JamServiceContext)>(r0);

        return;
    }

    public void includeSourceFile(java.io.File)
    {
        java.util.ArrayList $r5;
        java.lang.StringBuffer $r7, $r8, $r9, $r12, $r13, $r14;
        java.lang.String $r10, $r15;
        boolean $z0, $z1, $z2;
        java.lang.IllegalArgumentException $r6, $r11, $r16;
        java.io.File $r0, $r4, r17;
        java.util.List $r2, $r3;
        org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl r1;

        r1 := @this: org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl;

        r17 := @parameter0: java.io.File;

        if r17 != null goto label1;

        $r16 = new java.lang.IllegalArgumentException;

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("null file");

        throw $r16;

     label1:
        $r0 = virtualinvoke r17.<java.io.File: java.io.File getAbsoluteFile()>();

        $z0 = virtualinvoke r1.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: boolean isVerbose(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        virtualinvoke r1.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: void verbose(java.lang.String)>("[JamServiceContextImpl] adding source ");

     label2:
        $z1 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label3;

        $r11 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" does not exist");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r11;

     label3:
        $z2 = virtualinvoke $r0.<java.io.File: boolean isDirectory()>();

        if $z2 == 0 goto label4;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" cannot be included as a source file because it is a directory.");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label4:
        $r2 = r1.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.List mUnstructuredSourceFiles>;

        if $r2 != null goto label5;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r1.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.List mUnstructuredSourceFiles> = $r5;

     label5:
        $r3 = r1.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.List mUnstructuredSourceFiles>;

        $r4 = virtualinvoke $r0.<java.io.File: java.io.File getAbsoluteFile()>();

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r4);

        return;
    }

    public void includeSourcePattern(java.io.File[], java.lang.String)
    {
        java.lang.StringBuffer $r6, $r7, $r8, $r9, $r11;
        int $i0, $i1, $i2, i3;
        java.lang.String $r1, $r12, r17;
        boolean $z0;
        java.lang.IllegalArgumentException $r13, $r14, $r15, $r16;
        java.io.File $r3, $r4, $r10;
        java.io.File[] r0;
        org.apache.xmlbeans.impl.jam.internal.DirectoryScanner $r5;
        org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl r2;

        r2 := @this: org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl;

        r0 := @parameter0: java.io.File[];

        r17 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        $r16 = new java.lang.IllegalArgumentException;

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("null sourcepath");

        throw $r16;

     label1:
        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("empty sourcepath");

        throw $r15;

     label2:
        if r17 != null goto label3;

        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("null pattern");

        throw $r14;

     label3:
        $r1 = virtualinvoke r17.<java.lang.String: java.lang.String trim()>();

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i1 != 0 goto label4;

        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("empty pattern");

        throw $r13;

     label4:
        i3 = 0;

     label5:
        $i2 = lengthof r0;

        if i3 >= $i2 goto label7;

        $z0 = virtualinvoke r2.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: boolean isVerbose(java.lang.Object)>(r2);

        if $z0 == 0 goto label6;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[JamServiceContextImpl] including \'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' under ");

        $r10 = r0[i3];

        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r2.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: void verbose(java.lang.String)>($r12);

     label6:
        $r3 = r0[i3];

        virtualinvoke r2.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: void addSourcepath(java.io.File)>($r3);

        $r4 = r0[i3];

        $r5 = specialinvoke r2.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: org.apache.xmlbeans.impl.jam.internal.DirectoryScanner getSourceScanner(java.io.File)>($r4);

        virtualinvoke $r5.<org.apache.xmlbeans.impl.jam.internal.DirectoryScanner: void include(java.lang.String)>($r1);

        i3 = i3 + 1;

        goto label5;

     label7:
        return;
    }

    public void includeClassPattern(java.io.File[], java.lang.String)
    {
        java.lang.StringBuffer $r6, $r7, $r8, $r9, $r11;
        int $i0, $i1, $i2, i3;
        java.lang.String $r1, $r12, r17;
        boolean $z0;
        java.lang.IllegalArgumentException $r13, $r14, $r15, $r16;
        java.io.File $r3, $r4, $r10;
        java.io.File[] r0;
        org.apache.xmlbeans.impl.jam.internal.DirectoryScanner $r5;
        org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl r2;

        r2 := @this: org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl;

        r0 := @parameter0: java.io.File[];

        r17 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        $r16 = new java.lang.IllegalArgumentException;

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("null classpath");

        throw $r16;

     label1:
        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("empty classpath");

        throw $r15;

     label2:
        if r17 != null goto label3;

        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("null pattern");

        throw $r14;

     label3:
        $r1 = virtualinvoke r17.<java.lang.String: java.lang.String trim()>();

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i1 != 0 goto label4;

        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("empty pattern");

        throw $r13;

     label4:
        i3 = 0;

     label5:
        $i2 = lengthof r0;

        if i3 >= $i2 goto label7;

        $z0 = virtualinvoke r2.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: boolean isVerbose(java.lang.Object)>(r2);

        if $z0 == 0 goto label6;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[JamServiceContextImpl] including \'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' under ");

        $r10 = r0[i3];

        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r2.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: void verbose(java.lang.String)>($r12);

     label6:
        $r3 = r0[i3];

        virtualinvoke r2.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: void addClasspath(java.io.File)>($r3);

        $r4 = r0[i3];

        $r5 = specialinvoke r2.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: org.apache.xmlbeans.impl.jam.internal.DirectoryScanner getClassScanner(java.io.File)>($r4);

        virtualinvoke $r5.<org.apache.xmlbeans.impl.jam.internal.DirectoryScanner: void include(java.lang.String)>($r1);

        i3 = i3 + 1;

        goto label5;

     label7:
        return;
    }

    public void excludeSourcePattern(java.io.File[], java.lang.String)
    {
        java.lang.StringBuffer $r6, $r7, $r8, $r9, $r11;
        int $i0, $i1, $i2, i3;
        java.lang.String $r1, $r12, r17;
        boolean $z0;
        java.lang.IllegalArgumentException $r13, $r14, $r15, $r16;
        java.io.File $r3, $r4, $r10;
        java.io.File[] r0;
        org.apache.xmlbeans.impl.jam.internal.DirectoryScanner $r5;
        org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl r2;

        r2 := @this: org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl;

        r0 := @parameter0: java.io.File[];

        r17 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        $r16 = new java.lang.IllegalArgumentException;

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("null sourcepath");

        throw $r16;

     label1:
        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("empty sourcepath");

        throw $r15;

     label2:
        if r17 != null goto label3;

        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("null pattern");

        throw $r14;

     label3:
        $r1 = virtualinvoke r17.<java.lang.String: java.lang.String trim()>();

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i1 != 0 goto label4;

        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("empty pattern");

        throw $r13;

     label4:
        i3 = 0;

     label5:
        $i2 = lengthof r0;

        if i3 >= $i2 goto label7;

        $z0 = virtualinvoke r2.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: boolean isVerbose(java.lang.Object)>(r2);

        if $z0 == 0 goto label6;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[JamServiceContextImpl] EXCLUDING \'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' under ");

        $r10 = r0[i3];

        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r2.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: void verbose(java.lang.String)>($r12);

     label6:
        $r3 = r0[i3];

        virtualinvoke r2.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: void addSourcepath(java.io.File)>($r3);

        $r4 = r0[i3];

        $r5 = specialinvoke r2.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: org.apache.xmlbeans.impl.jam.internal.DirectoryScanner getSourceScanner(java.io.File)>($r4);

        virtualinvoke $r5.<org.apache.xmlbeans.impl.jam.internal.DirectoryScanner: void exclude(java.lang.String)>($r1);

        i3 = i3 + 1;

        goto label5;

     label7:
        return;
    }

    public void excludeClassPattern(java.io.File[], java.lang.String)
    {
        java.lang.StringBuffer $r6, $r7, $r8, $r9, $r11;
        int $i0, $i1, $i2, i3;
        java.lang.String $r1, $r12, r17;
        boolean $z0;
        java.lang.IllegalArgumentException $r13, $r14, $r15, $r16;
        java.io.File $r3, $r4, $r10;
        java.io.File[] r0;
        org.apache.xmlbeans.impl.jam.internal.DirectoryScanner $r5;
        org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl r2;

        r2 := @this: org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl;

        r0 := @parameter0: java.io.File[];

        r17 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        $r16 = new java.lang.IllegalArgumentException;

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("null classpath");

        throw $r16;

     label1:
        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("empty classpath");

        throw $r15;

     label2:
        if r17 != null goto label3;

        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("null pattern");

        throw $r14;

     label3:
        $r1 = virtualinvoke r17.<java.lang.String: java.lang.String trim()>();

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i1 != 0 goto label4;

        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("empty pattern");

        throw $r13;

     label4:
        i3 = 0;

     label5:
        $i2 = lengthof r0;

        if i3 >= $i2 goto label7;

        $z0 = virtualinvoke r2.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: boolean isVerbose(java.lang.Object)>(r2);

        if $z0 == 0 goto label6;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[JamServiceContextImpl] EXCLUDING \'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' under ");

        $r10 = r0[i3];

        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r2.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: void verbose(java.lang.String)>($r12);

     label6:
        $r3 = r0[i3];

        virtualinvoke r2.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: void addClasspath(java.io.File)>($r3);

        $r4 = r0[i3];

        $r5 = specialinvoke r2.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: org.apache.xmlbeans.impl.jam.internal.DirectoryScanner getClassScanner(java.io.File)>($r4);

        virtualinvoke $r5.<org.apache.xmlbeans.impl.jam.internal.DirectoryScanner: void exclude(java.lang.String)>($r1);

        i3 = i3 + 1;

        goto label5;

     label7:
        return;
    }

    public void includeSourceFile(java.io.File[], java.io.File)
    {
        java.lang.String $r5;
        java.io.File[] r1, $r4;
        java.io.File r2, $r3;
        org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl;

        r1 := @parameter0: java.io.File[];

        r2 := @parameter1: java.io.File;

        $r3 = specialinvoke r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.io.File getPathRootForFile(java.io.File[],java.io.File)>(r1, r2);

        $r4 = newarray (java.io.File)[1];

        $r4[0] = $r3;

        $r5 = specialinvoke r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.lang.String source2pattern(java.io.File,java.io.File)>($r3, r2);

        virtualinvoke r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: void includeSourcePattern(java.io.File[],java.lang.String)>($r4, $r5);

        return;
    }

    public void excludeSourceFile(java.io.File[], java.io.File)
    {
        java.lang.String $r5;
        java.io.File[] r1, $r4;
        java.io.File r2, $r3;
        org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl;

        r1 := @parameter0: java.io.File[];

        r2 := @parameter1: java.io.File;

        $r3 = specialinvoke r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.io.File getPathRootForFile(java.io.File[],java.io.File)>(r1, r2);

        $r4 = newarray (java.io.File)[1];

        $r4[0] = $r3;

        $r5 = specialinvoke r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.lang.String source2pattern(java.io.File,java.io.File)>($r3, r2);

        virtualinvoke r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: void excludeSourcePattern(java.io.File[],java.lang.String)>($r4, $r5);

        return;
    }

    public void includeClassFile(java.io.File[], java.io.File)
    {
        java.lang.String $r5;
        java.io.File[] r1, $r4;
        java.io.File r2, $r3;
        org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl;

        r1 := @parameter0: java.io.File[];

        r2 := @parameter1: java.io.File;

        $r3 = specialinvoke r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.io.File getPathRootForFile(java.io.File[],java.io.File)>(r1, r2);

        $r4 = newarray (java.io.File)[1];

        $r4[0] = $r3;

        $r5 = specialinvoke r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.lang.String source2pattern(java.io.File,java.io.File)>($r3, r2);

        virtualinvoke r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: void includeClassPattern(java.io.File[],java.lang.String)>($r4, $r5);

        return;
    }

    public void excludeClassFile(java.io.File[], java.io.File)
    {
        java.lang.String $r5;
        java.io.File[] r1, $r4;
        java.io.File r2, $r3;
        org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl;

        r1 := @parameter0: java.io.File[];

        r2 := @parameter1: java.io.File;

        $r3 = specialinvoke r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.io.File getPathRootForFile(java.io.File[],java.io.File)>(r1, r2);

        $r4 = newarray (java.io.File)[1];

        $r4[0] = $r3;

        $r5 = specialinvoke r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.lang.String source2pattern(java.io.File,java.io.File)>($r3, r2);

        virtualinvoke r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: void excludeClassPattern(java.io.File[],java.lang.String)>($r4, $r5);

        return;
    }

    public void includeClass(java.lang.String)
    {
        java.util.List $r1, $r3;
        java.lang.String r2;
        org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl r0;
        java.util.ArrayList $r4;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.List mIncludeClasses>;

        if $r1 != null goto label1;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.List mIncludeClasses> = $r4;

     label1:
        $r3 = r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.List mIncludeClasses>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r2);

        return;
    }

    public void excludeClass(java.lang.String)
    {
        java.util.List $r1, $r3;
        java.lang.String r2;
        org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl r0;
        java.util.ArrayList $r4;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.List mExcludeClasses>;

        if $r1 != null goto label1;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.List mExcludeClasses> = $r4;

     label1:
        $r3 = r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.List mExcludeClasses>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r2);

        return;
    }

    public void addClasspath(java.io.File)
    {
        java.util.List $r1, $r3, $r4;
        java.io.File r2;
        org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl r0;
        boolean $z0;
        java.util.ArrayList $r5;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl;

        r2 := @parameter0: java.io.File;

        $r1 = r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.List mClasspath>;

        if $r1 != null goto label1;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.List mClasspath> = $r5;

        goto label2;

     label1:
        $r3 = r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.List mClasspath>;

        $z0 = interfaceinvoke $r3.<java.util.List: boolean contains(java.lang.Object)>(r2);

        if $z0 == 0 goto label2;

        return;

     label2:
        $r4 = r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.List mClasspath>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r2);

        return;
    }

    public void setLoggerWriter(java.io.PrintWriter)
    {
        java.io.PrintWriter r1;
        org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl;

        r1 := @parameter0: java.io.PrintWriter;

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl: void setOut(java.io.PrintWriter)>(r1);

        return;
    }

    public void setJamLogger(org.apache.xmlbeans.impl.jam.provider.JamLogger)
    {
        java.lang.IllegalStateException $r0;
        org.apache.xmlbeans.impl.jam.provider.JamLogger r2;
        org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl r1;

        r1 := @this: org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl;

        r2 := @parameter0: org.apache.xmlbeans.impl.jam.provider.JamLogger;

        $r0 = new java.lang.IllegalStateException;

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>("NYI");

        throw $r0;
    }

    public void addSourcepath(java.io.File)
    {
        java.util.List $r1, $r3, $r4;
        java.io.File r2;
        org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl r0;
        boolean $z0;
        java.util.ArrayList $r5;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl;

        r2 := @parameter0: java.io.File;

        $r1 = r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.List mSourcepath>;

        if $r1 != null goto label1;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.List mSourcepath> = $r5;

        goto label2;

     label1:
        $r3 = r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.List mSourcepath>;

        $z0 = interfaceinvoke $r3.<java.util.List: boolean contains(java.lang.Object)>(r2);

        if $z0 == 0 goto label2;

        return;

     label2:
        $r4 = r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.List mSourcepath>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r2);

        return;
    }

    public void addToolClasspath(java.io.File)
    {
        java.util.List $r1, $r3, $r4;
        java.io.File r2;
        org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl r0;
        boolean $z0;
        java.util.ArrayList $r5;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl;

        r2 := @parameter0: java.io.File;

        $r1 = r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.List mToolClasspath>;

        if $r1 != null goto label1;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.List mToolClasspath> = $r5;

        goto label2;

     label1:
        $r3 = r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.List mToolClasspath>;

        $z0 = interfaceinvoke $r3.<java.util.List: boolean contains(java.lang.Object)>(r2);

        if $z0 == 0 goto label2;

        return;

     label2:
        $r4 = r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.List mToolClasspath>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r2);

        return;
    }

    public void setProperty(java.lang.String, java.lang.String)
    {
        java.util.Properties $r1, $r4, $r5;
        java.lang.String r2, r3;
        org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r1 = r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.Properties mProperties>;

        if $r1 != null goto label1;

        $r5 = new java.util.Properties;

        specialinvoke $r5.<java.util.Properties: void <init>()>();

        r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.Properties mProperties> = $r5;

     label1:
        $r4 = r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.Properties mProperties>;

        virtualinvoke $r4.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>(r2, r3);

        return;
    }

    public void set14WarningsEnabled(boolean)
    {
        org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl r0;
        boolean z0;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl;

        z0 := @parameter0: boolean;

        r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: boolean m14WarningsEnabled> = z0;

        return;
    }

    public void setParentClassLoader(org.apache.xmlbeans.impl.jam.JamClassLoader)
    {
        java.lang.IllegalStateException $r0;
        org.apache.xmlbeans.impl.jam.JamClassLoader r2;
        org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl r1;

        r1 := @this: org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl;

        r2 := @parameter0: org.apache.xmlbeans.impl.jam.JamClassLoader;

        $r0 = new java.lang.IllegalStateException;

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>("NYI");

        throw $r0;
    }

    public void setUseSystemClasspath(boolean)
    {
        org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl r0;
        boolean z0;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl;

        z0 := @parameter0: boolean;

        r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: boolean mUseSystemClasspath> = z0;

        return;
    }

    public void addClassLoader(java.lang.ClassLoader)
    {
        java.util.List $r1, $r3;
        java.lang.ClassLoader r2;
        org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl r0;
        java.util.ArrayList $r4;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl;

        r2 := @parameter0: java.lang.ClassLoader;

        $r1 = r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.List mClassLoaders>;

        if $r1 != null goto label1;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.List mClassLoaders> = $r4;

     label1:
        $r3 = r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.List mClassLoaders>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r2);

        return;
    }

    public java.lang.ClassLoader[] getReflectionClassLoaders()
    {
        java.lang.ClassLoader[] $r7, $r8, $r9;
        int $i0, $i1, $i2, $i3, i4, $i5;
        boolean $z0, $z1, $z2, $z3;
        java.util.List $r1, $r2, $r4, $r11;
        java.lang.Object $r5;
        java.lang.ClassLoader $r3, $r6, $r10;
        org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.List mClassLoaders>;

        if $r1 != null goto label2;

        $z2 = r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: boolean mUseSystemClasspath>;

        if $z2 == 0 goto label1;

        $r9 = newarray (java.lang.ClassLoader)[1];

        $r10 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

        $r9[0] = $r10;

        return $r9;

     label1:
        $r8 = newarray (java.lang.ClassLoader)[0];

        return $r8;

     label2:
        $r2 = r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.List mClassLoaders>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $z0 = r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: boolean mUseSystemClasspath>;

        if $z0 == 0 goto label3;

        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        $i1 = $i0 + $z3;

        $r7 = newarray (java.lang.ClassLoader)[$i1];

        i4 = 0;

     label5:
        $r11 = r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.List mClassLoaders>;

        $i5 = interfaceinvoke $r11.<java.util.List: int size()>();

        if i4 >= $i5 goto label6;

        $r4 = r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.List mClassLoaders>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i4);

        $r6 = (java.lang.ClassLoader) $r5;

        $r7[i4] = $r6;

        i4 = i4 + 1;

        goto label5;

     label6:
        $z1 = r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: boolean mUseSystemClasspath>;

        if $z1 == 0 goto label7;

        $i2 = lengthof $r7;

        $i3 = $i2 - 1;

        $r3 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

        $r7[$i3] = $r3;

     label7:
        return $r7;
    }

    public boolean is14WarningsEnabled()
    {
        org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl r0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl;

        $z0 = r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: boolean m14WarningsEnabled>;

        return $z0;
    }

    public org.apache.xmlbeans.impl.jam.JamClassLoader getClassLoader()
    {
        org.apache.xmlbeans.impl.jam.JamClassLoader $r1;
        org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: org.apache.xmlbeans.impl.jam.JamClassLoader mLoader>;

        return $r1;
    }

    public org.apache.xmlbeans.impl.jam.'annotation'.AnnotationProxy createAnnotationProxy(java.lang.String)
    {
        java.lang.String r2;
        org.apache.xmlbeans.impl.jam.'annotation'.DefaultAnnotationProxy $r0;
        org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl r1;

        r1 := @this: org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl;

        r2 := @parameter0: java.lang.String;

        $r0 = new org.apache.xmlbeans.impl.jam.'annotation'.DefaultAnnotationProxy;

        specialinvoke $r0.<org.apache.xmlbeans.impl.jam.'annotation'.DefaultAnnotationProxy: void <init>()>();

        virtualinvoke $r0.<org.apache.xmlbeans.impl.jam.'annotation'.AnnotationProxy: void init(org.apache.xmlbeans.impl.jam.provider.JamServiceContext)>(r1);

        return $r0;
    }

    private java.io.File getPathRootForFile(java.io.File[], java.io.File)
    {
        boolean $z0, $z1, $z2, $z3;
        org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl r2;
        java.lang.StringBuffer $r4, $r5, $r6, $r12, $r13, $r15, $r17, $r18, $r19, $r20;
        int $i0, i1, $i2;
        java.lang.String $r7, $r16, $r21;
        java.lang.IllegalArgumentException $r3, $r22, $r23, $r24;
        java.io.File $r1, $r8, $r9, $r10, $r11, $r14, r25;
        java.io.File[] r0;

        r2 := @this: org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl;

        r0 := @parameter0: java.io.File[];

        r25 := @parameter1: java.io.File;

        if r0 != null goto label1;

        $r24 = new java.lang.IllegalArgumentException;

        specialinvoke $r24.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("null sourcepath");

        throw $r24;

     label1:
        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

        $r23 = new java.lang.IllegalArgumentException;

        specialinvoke $r23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("empty sourcepath");

        throw $r23;

     label2:
        if r25 != null goto label3;

        $r22 = new java.lang.IllegalArgumentException;

        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("null sourceFile");

        throw $r22;

     label3:
        $r1 = virtualinvoke r25.<java.io.File: java.io.File getAbsoluteFile()>();

        $z0 = virtualinvoke r2.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: boolean isVerbose(java.lang.Object)>(r2);

        if $z0 == 0 goto label4;

        $r17 = new java.lang.StringBuffer;

        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[JamServiceContextImpl] Getting root for ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r1);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("...");

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r2.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: void verbose(java.lang.String)>($r21);

     label4:
        i1 = 0;

     label5:
        $i2 = lengthof r0;

        if i1 >= $i2 goto label9;

        $z1 = virtualinvoke r2.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: boolean isVerbose(java.lang.Object)>(r2);

        if $z1 == 0 goto label6;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[JamServiceContextImpl] ...looking in ");

        $r14 = r0[i1];

        $r15 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r2.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: void verbose(java.lang.String)>($r16);

     label6:
        $r8 = r0[i1];

        $r9 = virtualinvoke $r8.<java.io.File: java.io.File getAbsoluteFile()>();

        $z2 = specialinvoke r2.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: boolean isContainingDir(java.io.File,java.io.File)>($r9, $r1);

        if $z2 == 0 goto label8;

        $z3 = virtualinvoke r2.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: boolean isVerbose(java.lang.Object)>(r2);

        if $z3 == 0 goto label7;

        virtualinvoke r2.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: void verbose(java.lang.String)>("[JamServiceContextImpl] ...found it!");

     label7:
        $r10 = r0[i1];

        $r11 = virtualinvoke $r10.<java.io.File: java.io.File getAbsoluteFile()>();

        return $r11;

     label8:
        i1 = i1 + 1;

        goto label5;

     label9:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is not in the given path.");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r3;
    }

    private boolean isContainingDir(java.io.File, java.io.File)
    {
        java.io.File r1, r2, $r3;
        java.lang.StringBuffer $r4, $r5, $r6, $r7, $r8;
        java.lang.String $r9;
        org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl r0;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl;

        r2 := @parameter0: java.io.File;

        r1 := @parameter1: java.io.File;

        $z0 = virtualinvoke r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: boolean isVerbose(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[JamServiceContextImpl] ... ...isContainingDir ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: void verbose(java.lang.String)>($r9);

     label1:
        if r1 != null goto label2;

        return 0;

     label2:
        $z1 = virtualinvoke r2.<java.io.File: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label4;

        $z3 = virtualinvoke r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: boolean isVerbose(java.lang.Object)>(r0);

        if $z3 == 0 goto label3;

        virtualinvoke r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: void verbose(java.lang.String)>("[JamServiceContextImpl] ... ...yes!");

     label3:
        return 1;

     label4:
        $r3 = virtualinvoke r1.<java.io.File: java.io.File getParentFile()>();

        $z2 = specialinvoke r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: boolean isContainingDir(java.io.File,java.io.File)>(r2, $r3);

        return $z2;
    }

    private java.lang.String source2pattern(java.io.File, java.io.File)
    {
        java.lang.StringBuffer $r6, $r7, $r9, $r11, $r12, $r13, $r14, $r15;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r2, $r4, $r5, $r8, $r10, $r16;
        boolean $z0, $z1;
        java.io.File r1, r3;
        org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl;

        r1 := @parameter0: java.io.File;

        r3 := @parameter1: java.io.File;

        $z0 = virtualinvoke r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: boolean isVerbose(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[JamServiceContextImpl] source2pattern ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r3);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: void verbose(java.lang.String)>($r16);

     label1:
        $r2 = virtualinvoke r1.<java.io.File: java.lang.String getAbsolutePath()>();

        $r4 = virtualinvoke r3.<java.io.File: java.lang.String getAbsolutePath()>();

        $z1 = virtualinvoke r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: boolean isVerbose(java.lang.Object)>(r0);

        if $z1 == 0 goto label2;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[JamServiceContextImpl] source2pattern returning ");

        $i2 = virtualinvoke $r2.<java.lang.String: int length()>();

        $i3 = $i2 + 1;

        $r8 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int)>($i3);

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: void verbose(java.lang.String)>($r10);

     label2:
        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        $i1 = $i0 + 1;

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int)>($i1);

        return $r5;
    }

    private static java.lang.String filename2classname(java.lang.String)
    {
        int $i0, $i2;
        java.lang.String $r0, $r1, r2;

        r2 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r2.<java.lang.String: int lastIndexOf(int)>(46);

        $i2 = (int) -1;

        if $i0 == $i2 goto label1;

        r2 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

     label1:
        $r0 = virtualinvoke r2.<java.lang.String: java.lang.String replace(char,char)>(47, 46);

        $r1 = virtualinvoke $r0.<java.lang.String: java.lang.String replace(char,char)>(92, 46);

        return $r1;
    }

    private java.util.Iterator getAllDirectoryScanners()
    {
        java.util.Iterator $r4;
        java.util.Collection $r6, $r8;
        java.util.ArrayList $r0;
        java.util.Map $r2, $r3, $r5, $r7;
        org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl r1;

        r1 := @this: org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = r1.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.Map mSourceRoot2Scanner>;

        if $r2 == null goto label1;

        $r7 = r1.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.Map mSourceRoot2Scanner>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.util.Collection values()>();

        interfaceinvoke $r0.<java.util.Collection: boolean addAll(java.util.Collection)>($r8);

     label1:
        $r3 = r1.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.Map mClassRoot2Scanner>;

        if $r3 == null goto label2;

        $r5 = r1.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.Map mClassRoot2Scanner>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Collection values()>();

        interfaceinvoke $r0.<java.util.Collection: boolean addAll(java.util.Collection)>($r6);

     label2:
        $r4 = interfaceinvoke $r0.<java.util.Collection: java.util.Iterator iterator()>();

        return $r4;
    }

    private static org.apache.xmlbeans.impl.jam.provider.ResourcePath createJPath(java.util.Collection)
    {
        java.util.Collection r0;
        int $i0, $i1;
        org.apache.xmlbeans.impl.jam.provider.ResourcePath $r2;
        java.io.File[] r1;

        r0 := @parameter0: java.util.Collection;

        if r0 == null goto label1;

        $i0 = interfaceinvoke r0.<java.util.Collection: int size()>();

        if $i0 != 0 goto label2;

     label1:
        return null;

     label2:
        $i1 = interfaceinvoke r0.<java.util.Collection: int size()>();

        r1 = newarray (java.io.File)[$i1];

        interfaceinvoke r0.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>(r1);

        $r2 = staticinvoke <org.apache.xmlbeans.impl.jam.provider.ResourcePath: org.apache.xmlbeans.impl.jam.provider.ResourcePath forFiles(java.io.File[])>(r1);

        return $r2;
    }

    private org.apache.xmlbeans.impl.jam.internal.DirectoryScanner getSourceScanner(java.io.File)
    {
        java.util.HashMap $r7;
        java.io.File r2;
        java.util.Map $r1, $r3, $r6;
        java.lang.Object $r4;
        org.apache.xmlbeans.impl.jam.internal.DirectoryScanner $r5, $r8, r9;
        org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl;

        r2 := @parameter0: java.io.File;

        $r1 = r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.Map mSourceRoot2Scanner>;

        if $r1 != null goto label1;

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.Map mSourceRoot2Scanner> = $r7;

     label1:
        $r3 = r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.Map mSourceRoot2Scanner>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        $r8 = (org.apache.xmlbeans.impl.jam.internal.DirectoryScanner) $r4;

        r9 = $r8;

        if $r8 != null goto label2;

        $r6 = r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.Map mSourceRoot2Scanner>;

        $r5 = new org.apache.xmlbeans.impl.jam.internal.DirectoryScanner;

        specialinvoke $r5.<org.apache.xmlbeans.impl.jam.internal.DirectoryScanner: void <init>(java.io.File,org.apache.xmlbeans.impl.jam.provider.JamLogger)>(r2, r0);

        r9 = $r5;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r5);

     label2:
        return r9;
    }

    private org.apache.xmlbeans.impl.jam.internal.DirectoryScanner getClassScanner(java.io.File)
    {
        java.util.HashMap $r7;
        java.io.File r2;
        java.util.Map $r1, $r3, $r6;
        java.lang.Object $r4;
        org.apache.xmlbeans.impl.jam.internal.DirectoryScanner $r5, $r8, r9;
        org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl;

        r2 := @parameter0: java.io.File;

        $r1 = r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.Map mClassRoot2Scanner>;

        if $r1 != null goto label1;

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.Map mClassRoot2Scanner> = $r7;

     label1:
        $r3 = r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.Map mClassRoot2Scanner>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        $r8 = (org.apache.xmlbeans.impl.jam.internal.DirectoryScanner) $r4;

        r9 = $r8;

        if $r8 != null goto label2;

        $r6 = r0.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.util.Map mClassRoot2Scanner>;

        $r5 = new org.apache.xmlbeans.impl.jam.internal.DirectoryScanner;

        specialinvoke $r5.<org.apache.xmlbeans.impl.jam.internal.DirectoryScanner: void <init>(java.io.File,org.apache.xmlbeans.impl.jam.provider.JamLogger)>(r2, r0);

        r9 = $r5;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r5);

     label2:
        return r9;
    }

    public static void <clinit>()
    {
        <org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: java.lang.String PREFIX> = "[JamServiceContextImpl] ";

        <org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: char INNER_CLASS_SEPARATOR> = 36;

        return;
    }
}
