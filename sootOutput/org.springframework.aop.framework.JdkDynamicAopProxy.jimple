final class org.springframework.aop.framework.JdkDynamicAopProxy extends java.lang.Object implements org.springframework.aop.framework.AopProxy, java.lang.reflect.InvocationHandler, java.io.Serializable
{
    private static final long serialVersionUID;
    private static org.apache.commons.logging.Log logger;
    private final org.springframework.aop.framework.AdvisedSupport advised;
    private boolean equalsDefined;
    private boolean hashCodeDefined;

    static void <clinit>()
    {
        org.apache.commons.logging.Log $r0;

        <org.springframework.aop.framework.JdkDynamicAopProxy: long serialVersionUID> = 5531744639992436476L;

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lorg/springframework/aop/framework/JdkDynamicAopProxy;");

        <org.springframework.aop.framework.JdkDynamicAopProxy: org.apache.commons.logging.Log logger> = $r0;

        return;
    }

    public void <init>(org.springframework.aop.framework.AdvisedSupport) throws org.springframework.aop.framework.AopConfigException
    {
        org.springframework.aop.framework.JdkDynamicAopProxy r0;
        org.springframework.aop.framework.AopConfigException $r5;
        int $i0;
        org.springframework.aop.TargetSource $r3, $r4;
        org.springframework.aop.framework.AdvisedSupport r1;
        org.springframework.aop.Advisor[] $r2;

        r0 := @this: org.springframework.aop.framework.JdkDynamicAopProxy;

        r1 := @parameter0: org.springframework.aop.framework.AdvisedSupport;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "AdvisedSupport must not be null");

        $r2 = virtualinvoke r1.<org.springframework.aop.framework.AdvisedSupport: org.springframework.aop.Advisor[] getAdvisors()>();

        $i0 = lengthof $r2;

        if $i0 != 0 goto label1;

        $r3 = virtualinvoke r1.<org.springframework.aop.framework.AdvisedSupport: org.springframework.aop.TargetSource getTargetSource()>();

        $r4 = <org.springframework.aop.framework.AdvisedSupport: org.springframework.aop.TargetSource EMPTY_TARGET_SOURCE>;

        if $r3 != $r4 goto label1;

        $r5 = new org.springframework.aop.framework.AopConfigException;

        specialinvoke $r5.<org.springframework.aop.framework.AopConfigException: void <init>(java.lang.String)>("No advisors and no TargetSource specified");

        throw $r5;

     label1:
        r0.<org.springframework.aop.framework.JdkDynamicAopProxy: org.springframework.aop.framework.AdvisedSupport advised> = r1;

        return;
    }

    public java.lang.Object getProxy()
    {
        org.springframework.aop.framework.JdkDynamicAopProxy r0;
        java.lang.Object $r2;
        java.lang.ClassLoader $r1;

        r0 := @this: org.springframework.aop.framework.JdkDynamicAopProxy;

        $r1 = staticinvoke <org.springframework.util.ClassUtils: java.lang.ClassLoader getDefaultClassLoader()>();

        $r2 = virtualinvoke r0.<org.springframework.aop.framework.JdkDynamicAopProxy: java.lang.Object getProxy(java.lang.ClassLoader)>($r1);

        return $r2;
    }

    public java.lang.Object getProxy(java.lang.ClassLoader)
    {
        org.springframework.aop.framework.JdkDynamicAopProxy r1;
        java.lang.Class[] $r3;
        org.springframework.aop.TargetSource $r9;
        org.apache.commons.logging.Log $r0, $r7;
        java.lang.Object $r5;
        java.lang.StringBuilder $r6, $r10;
        java.lang.ClassLoader r4;
        java.lang.String $r11;
        boolean $z0;
        org.springframework.aop.framework.AdvisedSupport $r2, $r8;

        r1 := @this: org.springframework.aop.framework.JdkDynamicAopProxy;

        r4 := @parameter0: java.lang.ClassLoader;

        $r0 = <org.springframework.aop.framework.JdkDynamicAopProxy: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r0.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r7 = <org.springframework.aop.framework.JdkDynamicAopProxy: org.apache.commons.logging.Log logger>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("Creating JDK dynamic proxy: target source is ");

        $r8 = r1.<org.springframework.aop.framework.JdkDynamicAopProxy: org.springframework.aop.framework.AdvisedSupport advised>;

        $r9 = virtualinvoke $r8.<org.springframework.aop.framework.AdvisedSupport: org.springframework.aop.TargetSource getTargetSource()>();

        $r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r7.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r11);

     label1:
        $r2 = r1.<org.springframework.aop.framework.JdkDynamicAopProxy: org.springframework.aop.framework.AdvisedSupport advised>;

        $r3 = staticinvoke <org.springframework.aop.framework.AopProxyUtils: java.lang.Class[] completeProxiedInterfaces(org.springframework.aop.framework.AdvisedSupport)>($r2);

        specialinvoke r1.<org.springframework.aop.framework.JdkDynamicAopProxy: void findDefinedEqualsAndHashCodeMethods(java.lang.Class[])>($r3);

        $r5 = staticinvoke <java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>(r4, $r3, r1);

        return $r5;
    }

    private void findDefinedEqualsAndHashCodeMethods(java.lang.Class[])
    {
        org.springframework.aop.framework.JdkDynamicAopProxy r4;
        java.lang.Class[] r0;
        java.lang.reflect.Method[] $r2;
        int i0, i1, i2, i3;
        java.lang.Class r1;
        java.lang.reflect.Method r3;
        boolean $z0, $z1, $z2, $z3;

        r4 := @this: org.springframework.aop.framework.JdkDynamicAopProxy;

        r0 := @parameter0: java.lang.Class[];

        i0 = lengthof r0;

        i2 = 0;

        goto label7;

     label1:
        r1 = r0[i2];

        $r2 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        i1 = lengthof $r2;

        i3 = 0;

        goto label6;

     label2:
        r3 = $r2[i3];

        $z0 = staticinvoke <org.springframework.aop.support.AopUtils: boolean isEqualsMethod(java.lang.reflect.Method)>(r3);

        if $z0 == 0 goto label3;

        r4.<org.springframework.aop.framework.JdkDynamicAopProxy: boolean equalsDefined> = 1;

     label3:
        $z1 = staticinvoke <org.springframework.aop.support.AopUtils: boolean isHashCodeMethod(java.lang.reflect.Method)>(r3);

        if $z1 == 0 goto label4;

        r4.<org.springframework.aop.framework.JdkDynamicAopProxy: boolean hashCodeDefined> = 1;

     label4:
        $z2 = r4.<org.springframework.aop.framework.JdkDynamicAopProxy: boolean equalsDefined>;

        if $z2 == 0 goto label5;

        $z3 = r4.<org.springframework.aop.framework.JdkDynamicAopProxy: boolean hashCodeDefined>;

        if $z3 == 0 goto label5;

        return;

     label5:
        i3 = i3 + 1;

     label6:
        if i3 < i1 goto label2;

        i2 = i2 + 1;

     label7:
        if i2 < i0 goto label1;

        return;
    }

    public java.lang.Object invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]) throws java.lang.Throwable
    {
        org.springframework.aop.framework.JdkDynamicAopProxy r0;
        org.springframework.aop.framework.ReflectiveMethodInvocation $r8;
        org.springframework.aop.TargetSource r2;
        java.lang.Integer $r18;
        java.lang.reflect.Method r5;
        org.springframework.aop.framework.AdvisedSupport $r1, $r3, $r6, $r16, $r25;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, z16, $z17, z18, z19;
        java.util.List $r7;
        java.lang.Throwable $r21;
        java.lang.Object[] r10;
        int $i0;
        java.lang.Boolean $r20;
        java.lang.Object $r4, r9, $r17, $r19, r22, r24, r26, r27;
        java.lang.Class $r11, $r12, $r13, $r14, $r15, r23;

        r0 := @this: org.springframework.aop.framework.JdkDynamicAopProxy;

        r9 := @parameter0: java.lang.Object;

        r5 := @parameter1: java.lang.reflect.Method;

        r10 := @parameter2: java.lang.Object[];

        r22 = null;

        z16 = 0;

        z19 = 0;

        z18 = 0;

        $r1 = r0.<org.springframework.aop.framework.JdkDynamicAopProxy: org.springframework.aop.framework.AdvisedSupport advised>;

        r2 = $r1.<org.springframework.aop.framework.AdvisedSupport: org.springframework.aop.TargetSource targetSource>;

        r23 = null;

        r24 = null;

     label01:
        $z0 = r0.<org.springframework.aop.framework.JdkDynamicAopProxy: boolean equalsDefined>;

        if $z0 != 0 goto label05;

        $z12 = staticinvoke <org.springframework.aop.support.AopUtils: boolean isEqualsMethod(java.lang.reflect.Method)>(r5);

        if $z12 == 0 goto label05;

        $r19 = r10[0];

        $z13 = virtualinvoke r0.<org.springframework.aop.framework.JdkDynamicAopProxy: boolean equals(java.lang.Object)>($r19);

        $r20 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z13);

     label02:
        if null == null goto label03;

        $z14 = interfaceinvoke r2.<org.springframework.aop.TargetSource: boolean isStatic()>();

        if $z14 != 0 goto label03;

        interfaceinvoke r2.<org.springframework.aop.TargetSource: void releaseTarget(java.lang.Object)>(null);

     label03:
        if 0 == 0 goto label04;

        staticinvoke <org.springframework.aop.framework.AopContext: java.lang.Object setCurrentProxy(java.lang.Object)>(null);

     label04:
        return $r20;

     label05:
        $z1 = r0.<org.springframework.aop.framework.JdkDynamicAopProxy: boolean hashCodeDefined>;

        if $z1 != 0 goto label09;

        $z10 = staticinvoke <org.springframework.aop.support.AopUtils: boolean isHashCodeMethod(java.lang.reflect.Method)>(r5);

        if $z10 == 0 goto label09;

        $i0 = virtualinvoke r0.<org.springframework.aop.framework.JdkDynamicAopProxy: int hashCode()>();

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

     label06:
        if null == null goto label07;

        $z11 = interfaceinvoke r2.<org.springframework.aop.TargetSource: boolean isStatic()>();

        if $z11 != 0 goto label07;

        interfaceinvoke r2.<org.springframework.aop.TargetSource: void releaseTarget(java.lang.Object)>(null);

     label07:
        if 0 == 0 goto label08;

        staticinvoke <org.springframework.aop.framework.AopContext: java.lang.Object setCurrentProxy(java.lang.Object)>(null);

     label08:
        return $r18;

     label09:
        $r3 = r0.<org.springframework.aop.framework.JdkDynamicAopProxy: org.springframework.aop.framework.AdvisedSupport advised>;

        $z2 = $r3.<org.springframework.aop.framework.AdvisedSupport: boolean opaque>;

        if $z2 != 0 goto label13;

        $r14 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $z7 = virtualinvoke $r14.<java.lang.Class: boolean isInterface()>();

        if $z7 == 0 goto label13;

        $r15 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $z8 = virtualinvoke $r15.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(class "Lorg/springframework/aop/framework/Advised;");

        if $z8 == 0 goto label13;

        $r16 = r0.<org.springframework.aop.framework.JdkDynamicAopProxy: org.springframework.aop.framework.AdvisedSupport advised>;

        $r17 = staticinvoke <org.springframework.aop.support.AopUtils: java.lang.Object invokeJoinpointUsingReflection(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])>($r16, r5, r10);

     label10:
        if null == null goto label11;

        $z9 = interfaceinvoke r2.<org.springframework.aop.TargetSource: boolean isStatic()>();

        if $z9 != 0 goto label11;

        interfaceinvoke r2.<org.springframework.aop.TargetSource: void releaseTarget(java.lang.Object)>(null);

     label11:
        if 0 == 0 goto label12;

        staticinvoke <org.springframework.aop.framework.AopContext: java.lang.Object setCurrentProxy(java.lang.Object)>(null);

     label12:
        return $r17;

     label13:
        $r25 = r0.<org.springframework.aop.framework.JdkDynamicAopProxy: org.springframework.aop.framework.AdvisedSupport advised>;

        $z17 = $r25.<org.springframework.aop.framework.AdvisedSupport: boolean exposeProxy>;

        if $z17 == 0 goto label14;

        r22 = staticinvoke <org.springframework.aop.framework.AopContext: java.lang.Object setCurrentProxy(java.lang.Object)>(r9);

        z16 = 1;

        z19 = 1;

        z18 = 1;

     label14:
        $r4 = interfaceinvoke r2.<org.springframework.aop.TargetSource: java.lang.Object getTarget()>();

        r24 = $r4;

        if $r4 == null goto label15;

        r23 = virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();

     label15:
        $r6 = r0.<org.springframework.aop.framework.JdkDynamicAopProxy: org.springframework.aop.framework.AdvisedSupport advised>;

        $r7 = virtualinvoke $r6.<org.springframework.aop.framework.AdvisedSupport: java.util.List getInterceptorsAndDynamicInterceptionAdvice(java.lang.reflect.Method,java.lang.Class)>(r5, r23);

        $z3 = interfaceinvoke $r7.<java.util.List: boolean isEmpty()>();

        if $z3 == 0 goto label16;

        r26 = staticinvoke <org.springframework.aop.support.AopUtils: java.lang.Object invokeJoinpointUsingReflection(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])>($r4, r5, r10);

        goto label17;

     label16:
        $r8 = new org.springframework.aop.framework.ReflectiveMethodInvocation;

        specialinvoke $r8.<org.springframework.aop.framework.ReflectiveMethodInvocation: void <init>(java.lang.Object,java.lang.Object,java.lang.reflect.Method,java.lang.Object[],java.lang.Class,java.util.List)>(r9, $r4, r5, r10, r23, $r7);

        r26 = interfaceinvoke $r8.<org.aopalliance.intercept.MethodInvocation: java.lang.Object proceed()>();

     label17:
        if r26 == null goto label18;

        if r26 != $r4 goto label18;

        $r11 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $z5 = virtualinvoke $r11.<java.lang.Class: boolean isInstance(java.lang.Object)>(r9);

        if $z5 == 0 goto label18;

        $r12 = class "Lorg/springframework/aop/RawTargetAccess;";

        $r13 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $z6 = virtualinvoke $r12.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r13);

        if $z6 != 0 goto label18;

        r26 = r9;

     label18:
        r27 = r26;

     label19:
        if $r4 == null goto label20;

        $z4 = interfaceinvoke r2.<org.springframework.aop.TargetSource: boolean isStatic()>();

        if $z4 != 0 goto label20;

        interfaceinvoke r2.<org.springframework.aop.TargetSource: void releaseTarget(java.lang.Object)>($r4);

     label20:
        if z18 == 0 goto label21;

        staticinvoke <org.springframework.aop.framework.AopContext: java.lang.Object setCurrentProxy(java.lang.Object)>(r22);

     label21:
        return r27;

     label22:
        $r21 := @caughtexception;

        if r24 == null goto label23;

        $z15 = interfaceinvoke r2.<org.springframework.aop.TargetSource: boolean isStatic()>();

        if $z15 != 0 goto label23;

        interfaceinvoke r2.<org.springframework.aop.TargetSource: void releaseTarget(java.lang.Object)>(r24);

     label23:
        if z19 == 0 goto label24;

        staticinvoke <org.springframework.aop.framework.AopContext: java.lang.Object setCurrentProxy(java.lang.Object)>(r22);

     label24:
        throw $r21;

        catch java.lang.Throwable from label01 to label02 with label22;
        catch java.lang.Throwable from label05 to label06 with label22;
        catch java.lang.Throwable from label09 to label10 with label22;
        catch java.lang.Throwable from label13 to label19 with label22;
    }

    public boolean equals(java.lang.Object)
    {
        org.springframework.aop.framework.JdkDynamicAopProxy r1, r6;
        java.lang.Object r0;
        java.lang.Class $r2;
        java.lang.reflect.InvocationHandler $r3;
        boolean $z0, $z1, $z2, $z3;
        org.springframework.aop.framework.AdvisedSupport $r4, $r5;

        r1 := @this: org.springframework.aop.framework.JdkDynamicAopProxy;

        r0 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r0 != null goto label2;

        return 0;

     label2:
        $z0 = r0 instanceof org.springframework.aop.framework.JdkDynamicAopProxy;

        if $z0 == 0 goto label3;

        r6 = (org.springframework.aop.framework.JdkDynamicAopProxy) r0;

        goto label6;

     label3:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z1 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>($r2);

        if $z1 == 0 goto label5;

        $r3 = staticinvoke <java.lang.reflect.Proxy: java.lang.reflect.InvocationHandler getInvocationHandler(java.lang.Object)>(r0);

        $z2 = $r3 instanceof org.springframework.aop.framework.JdkDynamicAopProxy;

        if $z2 != 0 goto label4;

        return 0;

     label4:
        r6 = (org.springframework.aop.framework.JdkDynamicAopProxy) $r3;

        goto label6;

     label5:
        return 0;

     label6:
        $r5 = r1.<org.springframework.aop.framework.JdkDynamicAopProxy: org.springframework.aop.framework.AdvisedSupport advised>;

        $r4 = r6.<org.springframework.aop.framework.JdkDynamicAopProxy: org.springframework.aop.framework.AdvisedSupport advised>;

        $z3 = staticinvoke <org.springframework.aop.framework.AopProxyUtils: boolean equalsInProxy(org.springframework.aop.framework.AdvisedSupport,org.springframework.aop.framework.AdvisedSupport)>($r5, $r4);

        return $z3;
    }

    public int hashCode()
    {
        org.springframework.aop.framework.JdkDynamicAopProxy r1;
        org.springframework.aop.TargetSource $r3;
        int $i0, $i1, $i2, $i3;
        java.lang.Class $r0;
        org.springframework.aop.framework.AdvisedSupport $r2;

        r1 := @this: org.springframework.aop.framework.JdkDynamicAopProxy;

        $r0 = class "Lorg/springframework/aop/framework/JdkDynamicAopProxy;";

        $i0 = virtualinvoke $r0.<java.lang.Object: int hashCode()>();

        $i1 = $i0 * 13;

        $r2 = r1.<org.springframework.aop.framework.JdkDynamicAopProxy: org.springframework.aop.framework.AdvisedSupport advised>;

        $r3 = virtualinvoke $r2.<org.springframework.aop.framework.AdvisedSupport: org.springframework.aop.TargetSource getTargetSource()>();

        $i2 = virtualinvoke $r3.<java.lang.Object: int hashCode()>();

        $i3 = $i1 + $i2;

        return $i3;
    }
}
