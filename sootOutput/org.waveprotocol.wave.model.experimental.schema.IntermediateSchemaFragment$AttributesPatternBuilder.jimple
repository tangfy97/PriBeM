final class org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$AttributesPatternBuilder extends java.lang.Object
{
    private final java.util.Set requiredAttributes;
    private final java.util.Map attributeValuePatterns;

    void <init>()
    {
        java.util.TreeMap $r2;
        java.util.TreeSet $r1;
        org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$AttributesPatternBuilder r0;

        r0 := @this: org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$AttributesPatternBuilder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.TreeSet;

        specialinvoke $r1.<java.util.TreeSet: void <init>()>();

        r0.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$AttributesPatternBuilder: java.util.Set requiredAttributes> = $r1;

        $r2 = new java.util.TreeMap;

        specialinvoke $r2.<java.util.TreeMap: void <init>()>();

        r0.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$AttributesPatternBuilder: java.util.Map attributeValuePatterns> = $r2;

        return;
    }

    void addRequired(java.lang.String)
    {
        java.util.Set $r2;
        java.lang.String r1;
        org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$AttributesPatternBuilder r0;

        r0 := @this: org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$AttributesPatternBuilder;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$AttributesPatternBuilder: java.util.Set requiredAttributes>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1);

        return;
    }

    void addValuePattern(java.lang.String, java.lang.String) throws org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException
    {
        org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException $r5;
        org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$AttributesPatternBuilder r0;
        java.util.Map $r2, $r4;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String r1, r3, $r9;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$AttributesPatternBuilder;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$AttributesPatternBuilder: java.util.Map attributeValuePatterns>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r5 = new org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attribute pattern defined more than once: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label1:
        $r4 = r0.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$AttributesPatternBuilder: java.util.Map attributeValuePatterns>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r3);

        return;
    }

    void importFrom(org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$AttributesPatternBuilder) throws org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException
    {
        org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$AttributesPatternBuilder r0, r1;
        java.util.Map $r4, $r11, $r12;
        java.lang.String r10, $r18;
        boolean $z0, $z1;
        org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException $r14;
        java.util.Map$Entry r8;
        java.util.Iterator $r6;
        java.util.Set $r2, $r3, $r5;
        java.lang.Object $r7, $r9, $r13;
        java.lang.StringBuilder $r15, $r16, $r17;

        r0 := @this: org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$AttributesPatternBuilder;

        r1 := @parameter0: org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$AttributesPatternBuilder;

        $r3 = r0.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$AttributesPatternBuilder: java.util.Set requiredAttributes>;

        $r2 = r1.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$AttributesPatternBuilder: java.util.Set requiredAttributes>;

        interfaceinvoke $r3.<java.util.Set: boolean addAll(java.util.Collection)>($r2);

        $r4 = r1.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$AttributesPatternBuilder: java.util.Map attributeValuePatterns>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Set entrySet()>();

        $r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.util.Map$Entry) $r7;

        $r9 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getKey()>();

        r10 = (java.lang.String) $r9;

        $r11 = r0.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$AttributesPatternBuilder: java.util.Map attributeValuePatterns>;

        $z1 = interfaceinvoke $r11.<java.util.Map: boolean containsKey(java.lang.Object)>(r10);

        if $z1 == 0 goto label2;

        $r14 = new org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attribute pattern defined more than once: ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException: void <init>(java.lang.String)>($r18);

        throw $r14;

     label2:
        $r12 = r0.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$AttributesPatternBuilder: java.util.Map attributeValuePatterns>;

        $r13 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r10, $r13);

        goto label1;

     label3:
        return;
    }

    org.waveprotocol.wave.model.experimental.schema.AttributesValidator createValidator()
    {
        java.util.Map$Entry r8;
        java.util.Iterator $r4;
        org.waveprotocol.wave.model.experimental.schema.AttributesValidator $r5;
        java.util.Set $r3, $r6;
        org.waveprotocol.wave.model.experimental.schema.ValueValidator $r13;
        java.util.TreeMap $r0;
        org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$AttributesPatternBuilder r1;
        java.util.Map $r2;
        java.lang.Object $r7, $r9, $r11;
        java.lang.String r10, r12;
        boolean $z0;

        r1 := @this: org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$AttributesPatternBuilder;

        $r0 = new java.util.TreeMap;

        specialinvoke $r0.<java.util.TreeMap: void <init>()>();

        $r2 = r1.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$AttributesPatternBuilder: java.util.Map attributeValuePatterns>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.util.Map$Entry) $r7;

        $r9 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getKey()>();

        r10 = (java.lang.String) $r9;

        $r11 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getValue()>();

        r12 = (java.lang.String) $r11;

        $r13 = staticinvoke <org.waveprotocol.wave.model.experimental.schema.ValueValidator: org.waveprotocol.wave.model.experimental.schema.ValueValidator fromRegex(java.lang.String)>(r12);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r10, $r13);

        goto label1;

     label2:
        $r5 = new org.waveprotocol.wave.model.experimental.schema.AttributesValidator;

        $r6 = r1.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$AttributesPatternBuilder: java.util.Set requiredAttributes>;

        specialinvoke $r5.<org.waveprotocol.wave.model.experimental.schema.AttributesValidator: void <init>(java.util.Set,java.util.Map)>($r6, $r0);

        return $r5;
    }
}
