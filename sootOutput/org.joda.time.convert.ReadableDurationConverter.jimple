class org.joda.time.convert.ReadableDurationConverter extends org.joda.time.convert.AbstractConverter implements org.joda.time.convert.DurationConverter, org.joda.time.convert.PeriodConverter
{
    static final org.joda.time.convert.ReadableDurationConverter INSTANCE;
    static java.lang.Class class$org$joda$time$ReadableDuration;

    protected void <init>()
    {
        org.joda.time.convert.ReadableDurationConverter r0;

        r0 := @this: org.joda.time.convert.ReadableDurationConverter;

        specialinvoke r0.<org.joda.time.convert.AbstractConverter: void <init>()>();

        return;
    }

    public long getDurationMillis(java.lang.Object)
    {
        org.joda.time.ReadableDuration $r1;
        org.joda.time.convert.ReadableDurationConverter r2;
        java.lang.Object r0;
        long $l0;

        r2 := @this: org.joda.time.convert.ReadableDurationConverter;

        r0 := @parameter0: java.lang.Object;

        $r1 = (org.joda.time.ReadableDuration) r0;

        $l0 = interfaceinvoke $r1.<org.joda.time.ReadableDuration: long getMillis()>();

        return $l0;
    }

    public void setInto(org.joda.time.ReadWritablePeriod, java.lang.Object, org.joda.time.Chronology)
    {
        org.joda.time.ReadableDuration r1;
        org.joda.time.ReadWritablePeriod r3;
        org.joda.time.Chronology $r2, r6;
        long $l0;
        int[] $r4;
        int $i1, $i2, i3;
        org.joda.time.convert.ReadableDurationConverter r5;
        java.lang.Object r0;

        r5 := @this: org.joda.time.convert.ReadableDurationConverter;

        r3 := @parameter0: org.joda.time.ReadWritablePeriod;

        r0 := @parameter1: java.lang.Object;

        r6 := @parameter2: org.joda.time.Chronology;

        r1 = (org.joda.time.ReadableDuration) r0;

        $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r6);

        $l0 = interfaceinvoke r1.<org.joda.time.ReadableDuration: long getMillis()>();

        $r4 = virtualinvoke $r2.<org.joda.time.Chronology: int[] get(org.joda.time.ReadablePeriod,long)>(r3, $l0);

        i3 = 0;

     label1:
        $i1 = lengthof $r4;

        if i3 >= $i1 goto label2;

        $i2 = $r4[i3];

        interfaceinvoke r3.<org.joda.time.ReadWritablePeriod: void setValue(int,int)>(i3, $i2);

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }

    public java.lang.Class getSupportedType()
    {
        org.joda.time.convert.ReadableDurationConverter r1;
        java.lang.Class $r0, $r2;

        r1 := @this: org.joda.time.convert.ReadableDurationConverter;

        $r0 = <org.joda.time.convert.ReadableDurationConverter: java.lang.Class class$org$joda$time$ReadableDuration>;

        if $r0 != null goto label1;

        $r2 = staticinvoke <org.joda.time.convert.ReadableDurationConverter: java.lang.Class class$(java.lang.String)>("org.joda.time.ReadableDuration");

        <org.joda.time.convert.ReadableDurationConverter: java.lang.Class class$org$joda$time$ReadableDuration> = $r2;

        goto label2;

     label1:
        $r2 = <org.joda.time.convert.ReadableDurationConverter: java.lang.Class class$org$joda$time$ReadableDuration>;

     label2:
        return $r2;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        org.joda.time.convert.ReadableDurationConverter $r0;

        $r0 = new org.joda.time.convert.ReadableDurationConverter;

        specialinvoke $r0.<org.joda.time.convert.ReadableDurationConverter: void <init>()>();

        <org.joda.time.convert.ReadableDurationConverter: org.joda.time.convert.ReadableDurationConverter INSTANCE> = $r0;

        return;
    }
}
