public class org.dom4j.io.SAXContentHandler extends org.xml.sax.helpers.DefaultHandler implements org.xml.sax.ext.LexicalHandler, org.xml.sax.ext.DeclHandler, org.xml.sax.DTDHandler
{
    private org.dom4j.DocumentFactory documentFactory;
    private org.dom4j.Document document;
    private org.dom4j.io.ElementStack elementStack;
    private org.dom4j.tree.NamespaceStack namespaceStack;
    private org.dom4j.ElementHandler elementHandler;
    private org.xml.sax.Locator locator;
    private java.lang.String entity;
    private boolean insideDTDSection;
    private boolean insideCDATASection;
    private java.lang.StringBuffer cdataText;
    private java.util.Map availableNamespaceMap;
    private java.util.List declaredNamespaceList;
    private java.util.List internalDTDDeclarations;
    private java.util.List externalDTDDeclarations;
    private int declaredNamespaceIndex;
    private org.xml.sax.EntityResolver entityResolver;
    private org.xml.sax.InputSource inputSource;
    private org.dom4j.Element currentElement;
    private boolean includeInternalDTDDeclarations;
    private boolean includeExternalDTDDeclarations;
    private int entityLevel;
    private boolean internalDTDsubset;
    private boolean mergeAdjacentText;
    private boolean textInTextBuffer;
    private boolean ignoreComments;
    private java.lang.StringBuffer textBuffer;
    private boolean stripWhitespaceText;

    public void <init>()
    {
        org.dom4j.io.SAXContentHandler r0;
        org.dom4j.DocumentFactory $r1;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        $r1 = staticinvoke <org.dom4j.DocumentFactory: org.dom4j.DocumentFactory getInstance()>();

        specialinvoke r0.<org.dom4j.io.SAXContentHandler: void <init>(org.dom4j.DocumentFactory)>($r1);

        return;
    }

    public void <init>(org.dom4j.DocumentFactory)
    {
        org.dom4j.io.SAXContentHandler r0;
        org.dom4j.DocumentFactory r1;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        r1 := @parameter0: org.dom4j.DocumentFactory;

        specialinvoke r0.<org.dom4j.io.SAXContentHandler: void <init>(org.dom4j.DocumentFactory,org.dom4j.ElementHandler)>(r1, null);

        return;
    }

    public void <init>(org.dom4j.DocumentFactory, org.dom4j.ElementHandler)
    {
        org.dom4j.io.ElementStack $r3;
        org.dom4j.ElementHandler r2;
        org.dom4j.io.SAXContentHandler r0;
        org.dom4j.DocumentFactory r1;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        r1 := @parameter0: org.dom4j.DocumentFactory;

        r2 := @parameter1: org.dom4j.ElementHandler;

        specialinvoke r0.<org.dom4j.io.SAXContentHandler: void <init>(org.dom4j.DocumentFactory,org.dom4j.ElementHandler,org.dom4j.io.ElementStack)>(r1, r2, null);

        $r3 = virtualinvoke r0.<org.dom4j.io.SAXContentHandler: org.dom4j.io.ElementStack createElementStack()>();

        r0.<org.dom4j.io.SAXContentHandler: org.dom4j.io.ElementStack elementStack> = $r3;

        return;
    }

    public void <init>(org.dom4j.DocumentFactory, org.dom4j.ElementHandler, org.dom4j.io.ElementStack)
    {
        org.dom4j.tree.NamespaceStack $r6;
        org.dom4j.io.ElementStack r5;
        org.dom4j.ElementHandler r4;
        org.dom4j.io.SAXContentHandler r0;
        java.util.HashMap $r1;
        java.util.ArrayList $r2;
        org.dom4j.DocumentFactory r3;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        r3 := @parameter0: org.dom4j.DocumentFactory;

        r4 := @parameter1: org.dom4j.ElementHandler;

        r5 := @parameter2: org.dom4j.io.ElementStack;

        specialinvoke r0.<org.xml.sax.helpers.DefaultHandler: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.dom4j.io.SAXContentHandler: java.util.Map availableNamespaceMap> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.dom4j.io.SAXContentHandler: java.util.List declaredNamespaceList> = $r2;

        r0.<org.dom4j.io.SAXContentHandler: boolean includeInternalDTDDeclarations> = 0;

        r0.<org.dom4j.io.SAXContentHandler: boolean includeExternalDTDDeclarations> = 0;

        r0.<org.dom4j.io.SAXContentHandler: boolean internalDTDsubset> = 0;

        r0.<org.dom4j.io.SAXContentHandler: boolean mergeAdjacentText> = 0;

        r0.<org.dom4j.io.SAXContentHandler: boolean textInTextBuffer> = 0;

        r0.<org.dom4j.io.SAXContentHandler: boolean ignoreComments> = 0;

        r0.<org.dom4j.io.SAXContentHandler: boolean stripWhitespaceText> = 0;

        r0.<org.dom4j.io.SAXContentHandler: org.dom4j.DocumentFactory documentFactory> = r3;

        r0.<org.dom4j.io.SAXContentHandler: org.dom4j.ElementHandler elementHandler> = r4;

        r0.<org.dom4j.io.SAXContentHandler: org.dom4j.io.ElementStack elementStack> = r5;

        $r6 = new org.dom4j.tree.NamespaceStack;

        specialinvoke $r6.<org.dom4j.tree.NamespaceStack: void <init>(org.dom4j.DocumentFactory)>(r3);

        r0.<org.dom4j.io.SAXContentHandler: org.dom4j.tree.NamespaceStack namespaceStack> = $r6;

        return;
    }

    public org.dom4j.Document getDocument()
    {
        org.dom4j.Document $r1, $r2, $r3;
        org.dom4j.io.SAXContentHandler r0;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        $r1 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.Document document>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<org.dom4j.io.SAXContentHandler: org.dom4j.Document createDocument()>();

        r0.<org.dom4j.io.SAXContentHandler: org.dom4j.Document document> = $r3;

     label1:
        $r2 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.Document document>;

        return $r2;
    }

    public void setDocumentLocator(org.xml.sax.Locator)
    {
        org.dom4j.io.SAXContentHandler r0;
        org.xml.sax.Locator r1;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        r1 := @parameter0: org.xml.sax.Locator;

        r0.<org.dom4j.io.SAXContentHandler: org.xml.sax.Locator locator> = r1;

        return;
    }

    public void processingInstruction(java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        org.dom4j.Document $r1;
        org.dom4j.io.SAXContentHandler r0;
        org.dom4j.Element $r4, $r5;
        java.lang.String r2, r3;
        boolean $z0, $z1;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $z0 = r0.<org.dom4j.io.SAXContentHandler: boolean mergeAdjacentText>;

        if $z0 == 0 goto label1;

        $z1 = r0.<org.dom4j.io.SAXContentHandler: boolean textInTextBuffer>;

        if $z1 == 0 goto label1;

        virtualinvoke r0.<org.dom4j.io.SAXContentHandler: void completeCurrentTextNode()>();

     label1:
        $r5 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.Element currentElement>;

        if $r5 == null goto label2;

        $r4 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.Element currentElement>;

        interfaceinvoke $r4.<org.dom4j.Element: org.dom4j.Element addProcessingInstruction(java.lang.String,java.lang.String)>(r2, r3);

        goto label3;

     label2:
        $r1 = virtualinvoke r0.<org.dom4j.io.SAXContentHandler: org.dom4j.Document getDocument()>();

        interfaceinvoke $r1.<org.dom4j.Document: org.dom4j.Document addProcessingInstruction(java.lang.String,java.lang.String)>(r2, r3);

     label3:
        return;
    }

    public void startPrefixMapping(java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        org.dom4j.tree.NamespaceStack $r3;
        org.dom4j.io.SAXContentHandler r0;
        java.lang.String r1, r2;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.tree.NamespaceStack namespaceStack>;

        virtualinvoke $r3.<org.dom4j.tree.NamespaceStack: void push(java.lang.String,java.lang.String)>(r1, r2);

        return;
    }

    public void endPrefixMapping(java.lang.String) throws org.xml.sax.SAXException
    {
        org.dom4j.tree.NamespaceStack $r2, $r3;
        org.dom4j.io.SAXContentHandler r0;
        int $i0;
        java.lang.String r1;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.tree.NamespaceStack namespaceStack>;

        virtualinvoke $r2.<org.dom4j.tree.NamespaceStack: org.dom4j.Namespace pop(java.lang.String)>(r1);

        $r3 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.tree.NamespaceStack namespaceStack>;

        $i0 = virtualinvoke $r3.<org.dom4j.tree.NamespaceStack: int size()>();

        r0.<org.dom4j.io.SAXContentHandler: int declaredNamespaceIndex> = $i0;

        return;
    }

    public void startDocument() throws org.xml.sax.SAXException
    {
        org.dom4j.io.ElementStack $r1, $r8;
        org.dom4j.ElementHandler $r2, $r5, $r6;
        org.dom4j.io.DispatchHandler $r7;
        org.dom4j.tree.NamespaceStack $r9;
        java.lang.StringBuffer $r3, $r4;
        org.dom4j.io.SAXContentHandler r0;
        boolean $z0, $z1;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        r0.<org.dom4j.io.SAXContentHandler: org.dom4j.Document document> = null;

        r0.<org.dom4j.io.SAXContentHandler: org.dom4j.Element currentElement> = null;

        $r1 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.io.ElementStack elementStack>;

        virtualinvoke $r1.<org.dom4j.io.ElementStack: void clear()>();

        $r2 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.ElementHandler elementHandler>;

        if $r2 == null goto label1;

        $r5 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.ElementHandler elementHandler>;

        $z0 = $r5 instanceof org.dom4j.io.DispatchHandler;

        if $z0 == 0 goto label1;

        $r8 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.io.ElementStack elementStack>;

        $r6 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.ElementHandler elementHandler>;

        $r7 = (org.dom4j.io.DispatchHandler) $r6;

        virtualinvoke $r8.<org.dom4j.io.ElementStack: void setDispatchHandler(org.dom4j.io.DispatchHandler)>($r7);

     label1:
        $r9 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.tree.NamespaceStack namespaceStack>;

        virtualinvoke $r9.<org.dom4j.tree.NamespaceStack: void clear()>();

        r0.<org.dom4j.io.SAXContentHandler: int declaredNamespaceIndex> = 0;

        $z1 = r0.<org.dom4j.io.SAXContentHandler: boolean mergeAdjacentText>;

        if $z1 == 0 goto label2;

        $r3 = r0.<org.dom4j.io.SAXContentHandler: java.lang.StringBuffer textBuffer>;

        if $r3 != null goto label2;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        r0.<org.dom4j.io.SAXContentHandler: java.lang.StringBuffer textBuffer> = $r4;

     label2:
        r0.<org.dom4j.io.SAXContentHandler: boolean textInTextBuffer> = 0;

        return;
    }

    public void endDocument() throws org.xml.sax.SAXException
    {
        org.dom4j.io.SAXContentHandler r0;
        org.dom4j.tree.NamespaceStack $r1;
        org.dom4j.io.ElementStack $r2;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        $r1 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.tree.NamespaceStack namespaceStack>;

        virtualinvoke $r1.<org.dom4j.tree.NamespaceStack: void clear()>();

        $r2 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.io.ElementStack elementStack>;

        virtualinvoke $r2.<org.dom4j.io.ElementStack: void clear()>();

        r0.<org.dom4j.io.SAXContentHandler: org.dom4j.Element currentElement> = null;

        r0.<org.dom4j.io.SAXContentHandler: java.lang.StringBuffer textBuffer> = null;

        return;
    }

    public void startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes) throws org.xml.sax.SAXException
    {
        org.dom4j.ElementHandler $r7, $r9;
        org.dom4j.tree.NamespaceStack $r10;
        org.xml.sax.Attributes r5;
        java.lang.String r1, r2, r3;
        boolean $z0, $z1;
        org.dom4j.io.ElementStack $r6, $r8;
        org.dom4j.Branch r13;
        org.dom4j.io.SAXContentHandler r0;
        org.dom4j.Element $r4, $r12;
        org.dom4j.QName $r11;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r5 := @parameter3: org.xml.sax.Attributes;

        $z0 = r0.<org.dom4j.io.SAXContentHandler: boolean mergeAdjacentText>;

        if $z0 == 0 goto label1;

        $z1 = r0.<org.dom4j.io.SAXContentHandler: boolean textInTextBuffer>;

        if $z1 == 0 goto label1;

        virtualinvoke r0.<org.dom4j.io.SAXContentHandler: void completeCurrentTextNode()>();

     label1:
        $r10 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.tree.NamespaceStack namespaceStack>;

        $r11 = virtualinvoke $r10.<org.dom4j.tree.NamespaceStack: org.dom4j.QName getQName(java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3);

        $r12 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.Element currentElement>;

        r13 = $r12;

        if $r12 != null goto label2;

        r13 = virtualinvoke r0.<org.dom4j.io.SAXContentHandler: org.dom4j.Document getDocument()>();

     label2:
        $r4 = interfaceinvoke r13.<org.dom4j.Branch: org.dom4j.Element addElement(org.dom4j.QName)>($r11);

        virtualinvoke r0.<org.dom4j.io.SAXContentHandler: void addDeclaredNamespaces(org.dom4j.Element)>($r4);

        virtualinvoke r0.<org.dom4j.io.SAXContentHandler: void addAttributes(org.dom4j.Element,org.xml.sax.Attributes)>($r4, r5);

        $r6 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.io.ElementStack elementStack>;

        virtualinvoke $r6.<org.dom4j.io.ElementStack: void pushElement(org.dom4j.Element)>($r4);

        r0.<org.dom4j.io.SAXContentHandler: org.dom4j.Element currentElement> = $r4;

        r0.<org.dom4j.io.SAXContentHandler: java.lang.String entity> = null;

        $r7 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.ElementHandler elementHandler>;

        if $r7 == null goto label3;

        $r9 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.ElementHandler elementHandler>;

        $r8 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.io.ElementStack elementStack>;

        interfaceinvoke $r9.<org.dom4j.ElementHandler: void onStart(org.dom4j.ElementPath)>($r8);

     label3:
        return;
    }

    public void endElement(java.lang.String, java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        org.dom4j.io.ElementStack $r2, $r8, $r9;
        org.dom4j.ElementHandler $r3, $r7;
        org.dom4j.io.SAXContentHandler r0;
        org.dom4j.Element $r1, $r10;
        java.lang.String r4, r5, r6;
        boolean $z0, $z1;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        r4 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.String;

        r6 := @parameter2: java.lang.String;

        $z0 = r0.<org.dom4j.io.SAXContentHandler: boolean mergeAdjacentText>;

        if $z0 == 0 goto label1;

        $z1 = r0.<org.dom4j.io.SAXContentHandler: boolean textInTextBuffer>;

        if $z1 == 0 goto label1;

        virtualinvoke r0.<org.dom4j.io.SAXContentHandler: void completeCurrentTextNode()>();

     label1:
        $r7 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.ElementHandler elementHandler>;

        if $r7 == null goto label2;

        $r1 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.Element currentElement>;

        if $r1 == null goto label2;

        $r3 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.ElementHandler elementHandler>;

        $r2 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.io.ElementStack elementStack>;

        interfaceinvoke $r3.<org.dom4j.ElementHandler: void onEnd(org.dom4j.ElementPath)>($r2);

     label2:
        $r8 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.io.ElementStack elementStack>;

        virtualinvoke $r8.<org.dom4j.io.ElementStack: org.dom4j.Element popElement()>();

        $r9 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.io.ElementStack elementStack>;

        $r10 = virtualinvoke $r9.<org.dom4j.io.ElementStack: org.dom4j.Element peekElement()>();

        r0.<org.dom4j.io.SAXContentHandler: org.dom4j.Element currentElement> = $r10;

        return;
    }

    public void characters(char[], int, int) throws org.xml.sax.SAXException
    {
        java.lang.StringBuffer $r6, $r10;
        int i0, i1;
        java.lang.String $r2, $r3, $r8, $r9, $r11;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.dom4j.io.SAXContentHandler r0;
        char[] r4;
        org.dom4j.Element $r1, $r5, $r7;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        r4 := @parameter0: char[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        if i0 != 0 goto label1;

        return;

     label1:
        $r1 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.Element currentElement>;

        if $r1 == null goto label7;

        $r2 = r0.<org.dom4j.io.SAXContentHandler: java.lang.String entity>;

        if $r2 == null goto label3;

        $z4 = r0.<org.dom4j.io.SAXContentHandler: boolean mergeAdjacentText>;

        if $z4 == 0 goto label2;

        $z5 = r0.<org.dom4j.io.SAXContentHandler: boolean textInTextBuffer>;

        if $z5 == 0 goto label2;

        virtualinvoke r0.<org.dom4j.io.SAXContentHandler: void completeCurrentTextNode()>();

     label2:
        $r7 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.Element currentElement>;

        $r8 = r0.<org.dom4j.io.SAXContentHandler: java.lang.String entity>;

        $r9 = new java.lang.String;

        specialinvoke $r9.<java.lang.String: void <init>(char[],int,int)>(r4, i1, i0);

        interfaceinvoke $r7.<org.dom4j.Element: org.dom4j.Element addEntity(java.lang.String,java.lang.String)>($r8, $r9);

        r0.<org.dom4j.io.SAXContentHandler: java.lang.String entity> = null;

        goto label7;

     label3:
        $z0 = r0.<org.dom4j.io.SAXContentHandler: boolean insideCDATASection>;

        if $z0 == 0 goto label5;

        $z2 = r0.<org.dom4j.io.SAXContentHandler: boolean mergeAdjacentText>;

        if $z2 == 0 goto label4;

        $z3 = r0.<org.dom4j.io.SAXContentHandler: boolean textInTextBuffer>;

        if $z3 == 0 goto label4;

        virtualinvoke r0.<org.dom4j.io.SAXContentHandler: void completeCurrentTextNode()>();

     label4:
        $r10 = r0.<org.dom4j.io.SAXContentHandler: java.lang.StringBuffer cdataText>;

        $r11 = new java.lang.String;

        specialinvoke $r11.<java.lang.String: void <init>(char[],int,int)>(r4, i1, i0);

        virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        goto label7;

     label5:
        $z1 = r0.<org.dom4j.io.SAXContentHandler: boolean mergeAdjacentText>;

        if $z1 == 0 goto label6;

        $r6 = r0.<org.dom4j.io.SAXContentHandler: java.lang.StringBuffer textBuffer>;

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>(r4, i1, i0);

        r0.<org.dom4j.io.SAXContentHandler: boolean textInTextBuffer> = 1;

        goto label7;

     label6:
        $r5 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.Element currentElement>;

        $r3 = new java.lang.String;

        specialinvoke $r3.<java.lang.String: void <init>(char[],int,int)>(r4, i1, i0);

        interfaceinvoke $r5.<org.dom4j.Element: org.dom4j.Element addText(java.lang.String)>($r3);

     label7:
        return;
    }

    public void warning(org.xml.sax.SAXParseException) throws org.xml.sax.SAXException
    {
        org.dom4j.io.SAXContentHandler r0;
        org.xml.sax.SAXParseException r1;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        r1 := @parameter0: org.xml.sax.SAXParseException;

        return;
    }

    public void error(org.xml.sax.SAXParseException) throws org.xml.sax.SAXException
    {
        org.dom4j.io.SAXContentHandler r1;
        org.xml.sax.SAXParseException r0;

        r1 := @this: org.dom4j.io.SAXContentHandler;

        r0 := @parameter0: org.xml.sax.SAXParseException;

        throw r0;
    }

    public void fatalError(org.xml.sax.SAXParseException) throws org.xml.sax.SAXException
    {
        org.dom4j.io.SAXContentHandler r1;
        org.xml.sax.SAXParseException r0;

        r1 := @this: org.dom4j.io.SAXContentHandler;

        r0 := @parameter0: org.xml.sax.SAXParseException;

        throw r0;
    }

    public void startDTD(java.lang.String, java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        org.dom4j.Document $r1;
        org.dom4j.io.SAXContentHandler r0;
        java.lang.String r2, r3, r4;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        $r1 = virtualinvoke r0.<org.dom4j.io.SAXContentHandler: org.dom4j.Document getDocument()>();

        interfaceinvoke $r1.<org.dom4j.Document: org.dom4j.Document addDocType(java.lang.String,java.lang.String,java.lang.String)>(r2, r3, r4);

        r0.<org.dom4j.io.SAXContentHandler: boolean insideDTDSection> = 1;

        r0.<org.dom4j.io.SAXContentHandler: boolean internalDTDsubset> = 1;

        return;
    }

    public void endDTD() throws org.xml.sax.SAXException
    {
        org.dom4j.Document $r1;
        java.util.List $r3, $r4, $r5, $r6;
        org.dom4j.DocumentType $r2;
        org.dom4j.io.SAXContentHandler r0;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        r0.<org.dom4j.io.SAXContentHandler: boolean insideDTDSection> = 0;

        $r1 = virtualinvoke r0.<org.dom4j.io.SAXContentHandler: org.dom4j.Document getDocument()>();

        $r2 = interfaceinvoke $r1.<org.dom4j.Document: org.dom4j.DocumentType getDocType()>();

        if $r2 == null goto label2;

        $r3 = r0.<org.dom4j.io.SAXContentHandler: java.util.List internalDTDDeclarations>;

        if $r3 == null goto label1;

        $r6 = r0.<org.dom4j.io.SAXContentHandler: java.util.List internalDTDDeclarations>;

        interfaceinvoke $r2.<org.dom4j.DocumentType: void setInternalDeclarations(java.util.List)>($r6);

     label1:
        $r4 = r0.<org.dom4j.io.SAXContentHandler: java.util.List externalDTDDeclarations>;

        if $r4 == null goto label2;

        $r5 = r0.<org.dom4j.io.SAXContentHandler: java.util.List externalDTDDeclarations>;

        interfaceinvoke $r2.<org.dom4j.DocumentType: void setExternalDeclarations(java.util.List)>($r5);

     label2:
        r0.<org.dom4j.io.SAXContentHandler: java.util.List internalDTDDeclarations> = null;

        r0.<org.dom4j.io.SAXContentHandler: java.util.List externalDTDDeclarations> = null;

        return;
    }

    public void startEntity(java.lang.String) throws org.xml.sax.SAXException
    {
        org.dom4j.io.SAXContentHandler r0;
        int $i0, $i1;
        java.lang.String r1;
        boolean $z0, $z1;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        r1 := @parameter0: java.lang.String;

        $i0 = r0.<org.dom4j.io.SAXContentHandler: int entityLevel>;

        $i1 = $i0 + 1;

        r0.<org.dom4j.io.SAXContentHandler: int entityLevel> = $i1;

        r0.<org.dom4j.io.SAXContentHandler: java.lang.String entity> = null;

        $z0 = r0.<org.dom4j.io.SAXContentHandler: boolean insideDTDSection>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<org.dom4j.io.SAXContentHandler: boolean isIgnorableEntity(java.lang.String)>(r1);

        if $z1 != 0 goto label1;

        r0.<org.dom4j.io.SAXContentHandler: java.lang.String entity> = r1;

     label1:
        r0.<org.dom4j.io.SAXContentHandler: boolean internalDTDsubset> = 0;

        return;
    }

    public void endEntity(java.lang.String) throws org.xml.sax.SAXException
    {
        org.dom4j.io.SAXContentHandler r0;
        int $i0, $i1, $i2;
        java.lang.String r1;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        r1 := @parameter0: java.lang.String;

        $i0 = r0.<org.dom4j.io.SAXContentHandler: int entityLevel>;

        $i1 = $i0 - 1;

        r0.<org.dom4j.io.SAXContentHandler: int entityLevel> = $i1;

        r0.<org.dom4j.io.SAXContentHandler: java.lang.String entity> = null;

        $i2 = r0.<org.dom4j.io.SAXContentHandler: int entityLevel>;

        if $i2 != 0 goto label1;

        r0.<org.dom4j.io.SAXContentHandler: boolean internalDTDsubset> = 1;

     label1:
        return;
    }

    public void startCDATA() throws org.xml.sax.SAXException
    {
        org.dom4j.io.SAXContentHandler r0;
        java.lang.StringBuffer $r1;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        r0.<org.dom4j.io.SAXContentHandler: boolean insideCDATASection> = 1;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        r0.<org.dom4j.io.SAXContentHandler: java.lang.StringBuffer cdataText> = $r1;

        return;
    }

    public void endCDATA() throws org.xml.sax.SAXException
    {
        java.lang.StringBuffer $r1;
        org.dom4j.io.SAXContentHandler r0;
        org.dom4j.Element $r2;
        java.lang.String $r3;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        r0.<org.dom4j.io.SAXContentHandler: boolean insideCDATASection> = 0;

        $r2 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.Element currentElement>;

        $r1 = r0.<org.dom4j.io.SAXContentHandler: java.lang.StringBuffer cdataText>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r2.<org.dom4j.Element: org.dom4j.Element addCDATA(java.lang.String)>($r3);

        return;
    }

    public void comment(char[], int, int) throws org.xml.sax.SAXException
    {
        org.dom4j.Document $r3;
        org.dom4j.io.SAXContentHandler r0;
        int i0, i1, $i2;
        char[] r1;
        org.dom4j.Element $r2, $r4;
        java.lang.String $r5;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = r0.<org.dom4j.io.SAXContentHandler: boolean ignoreComments>;

        if $z0 != 0 goto label3;

        $z1 = r0.<org.dom4j.io.SAXContentHandler: boolean mergeAdjacentText>;

        if $z1 == 0 goto label1;

        $z2 = r0.<org.dom4j.io.SAXContentHandler: boolean textInTextBuffer>;

        if $z2 == 0 goto label1;

        virtualinvoke r0.<org.dom4j.io.SAXContentHandler: void completeCurrentTextNode()>();

     label1:
        $r5 = new java.lang.String;

        specialinvoke $r5.<java.lang.String: void <init>(char[],int,int)>(r1, i0, i1);

        $z3 = r0.<org.dom4j.io.SAXContentHandler: boolean insideDTDSection>;

        if $z3 != 0 goto label3;

        $i2 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i2 <= 0 goto label3;

        $r2 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.Element currentElement>;

        if $r2 == null goto label2;

        $r4 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.Element currentElement>;

        interfaceinvoke $r4.<org.dom4j.Element: org.dom4j.Element addComment(java.lang.String)>($r5);

        goto label3;

     label2:
        $r3 = virtualinvoke r0.<org.dom4j.io.SAXContentHandler: org.dom4j.Document getDocument()>();

        interfaceinvoke $r3.<org.dom4j.Document: org.dom4j.Document addComment(java.lang.String)>($r5);

     label3:
        return;
    }

    public void elementDecl(java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        org.dom4j.dtd.ElementDecl $r1, $r4;
        org.dom4j.io.SAXContentHandler r0;
        java.lang.String r2, r3;
        boolean $z0, $z1, $z2;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $z0 = r0.<org.dom4j.io.SAXContentHandler: boolean internalDTDsubset>;

        if $z0 == 0 goto label1;

        $z2 = r0.<org.dom4j.io.SAXContentHandler: boolean includeInternalDTDDeclarations>;

        if $z2 == 0 goto label2;

        $r4 = new org.dom4j.dtd.ElementDecl;

        specialinvoke $r4.<org.dom4j.dtd.ElementDecl: void <init>(java.lang.String,java.lang.String)>(r2, r3);

        virtualinvoke r0.<org.dom4j.io.SAXContentHandler: void addDTDDeclaration(java.lang.Object)>($r4);

        goto label2;

     label1:
        $z1 = r0.<org.dom4j.io.SAXContentHandler: boolean includeExternalDTDDeclarations>;

        if $z1 == 0 goto label2;

        $r1 = new org.dom4j.dtd.ElementDecl;

        specialinvoke $r1.<org.dom4j.dtd.ElementDecl: void <init>(java.lang.String,java.lang.String)>(r2, r3);

        virtualinvoke r0.<org.dom4j.io.SAXContentHandler: void addExternalDTDDeclaration(java.lang.Object)>($r1);

     label2:
        return;
    }

    public void attributeDecl(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        org.dom4j.dtd.AttributeDecl $r1, $r7;
        org.dom4j.io.SAXContentHandler r0;
        java.lang.String r2, r3, r4, r5, r6;
        boolean $z0, $z1, $z2;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        r5 := @parameter3: java.lang.String;

        r6 := @parameter4: java.lang.String;

        $z0 = r0.<org.dom4j.io.SAXContentHandler: boolean internalDTDsubset>;

        if $z0 == 0 goto label1;

        $z2 = r0.<org.dom4j.io.SAXContentHandler: boolean includeInternalDTDDeclarations>;

        if $z2 == 0 goto label2;

        $r7 = new org.dom4j.dtd.AttributeDecl;

        specialinvoke $r7.<org.dom4j.dtd.AttributeDecl: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r2, r3, r4, r5, r6);

        virtualinvoke r0.<org.dom4j.io.SAXContentHandler: void addDTDDeclaration(java.lang.Object)>($r7);

        goto label2;

     label1:
        $z1 = r0.<org.dom4j.io.SAXContentHandler: boolean includeExternalDTDDeclarations>;

        if $z1 == 0 goto label2;

        $r1 = new org.dom4j.dtd.AttributeDecl;

        specialinvoke $r1.<org.dom4j.dtd.AttributeDecl: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r2, r3, r4, r5, r6);

        virtualinvoke r0.<org.dom4j.io.SAXContentHandler: void addExternalDTDDeclaration(java.lang.Object)>($r1);

     label2:
        return;
    }

    public void internalEntityDecl(java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        org.dom4j.io.SAXContentHandler r0;
        org.dom4j.dtd.InternalEntityDecl $r1, $r4;
        java.lang.String r2, r3;
        boolean $z0, $z1, $z2;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $z0 = r0.<org.dom4j.io.SAXContentHandler: boolean internalDTDsubset>;

        if $z0 == 0 goto label1;

        $z2 = r0.<org.dom4j.io.SAXContentHandler: boolean includeInternalDTDDeclarations>;

        if $z2 == 0 goto label2;

        $r4 = new org.dom4j.dtd.InternalEntityDecl;

        specialinvoke $r4.<org.dom4j.dtd.InternalEntityDecl: void <init>(java.lang.String,java.lang.String)>(r2, r3);

        virtualinvoke r0.<org.dom4j.io.SAXContentHandler: void addDTDDeclaration(java.lang.Object)>($r4);

        goto label2;

     label1:
        $z1 = r0.<org.dom4j.io.SAXContentHandler: boolean includeExternalDTDDeclarations>;

        if $z1 == 0 goto label2;

        $r1 = new org.dom4j.dtd.InternalEntityDecl;

        specialinvoke $r1.<org.dom4j.dtd.InternalEntityDecl: void <init>(java.lang.String,java.lang.String)>(r2, r3);

        virtualinvoke r0.<org.dom4j.io.SAXContentHandler: void addExternalDTDDeclaration(java.lang.Object)>($r1);

     label2:
        return;
    }

    public void externalEntityDecl(java.lang.String, java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        org.dom4j.dtd.ExternalEntityDecl $r0;
        org.dom4j.io.SAXContentHandler r4;
        java.lang.String r1, r2, r3;
        boolean $z0, $z1, $z2;

        r4 := @this: org.dom4j.io.SAXContentHandler;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r0 = new org.dom4j.dtd.ExternalEntityDecl;

        specialinvoke $r0.<org.dom4j.dtd.ExternalEntityDecl: void <init>(java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3);

        $z0 = r4.<org.dom4j.io.SAXContentHandler: boolean internalDTDsubset>;

        if $z0 == 0 goto label1;

        $z2 = r4.<org.dom4j.io.SAXContentHandler: boolean includeInternalDTDDeclarations>;

        if $z2 == 0 goto label2;

        virtualinvoke r4.<org.dom4j.io.SAXContentHandler: void addDTDDeclaration(java.lang.Object)>($r0);

        goto label2;

     label1:
        $z1 = r4.<org.dom4j.io.SAXContentHandler: boolean includeExternalDTDDeclarations>;

        if $z1 == 0 goto label2;

        virtualinvoke r4.<org.dom4j.io.SAXContentHandler: void addExternalDTDDeclaration(java.lang.Object)>($r0);

     label2:
        return;
    }

    public void notationDecl(java.lang.String, java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        org.dom4j.io.SAXContentHandler r0;
        java.lang.String r1, r2, r3;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        return;
    }

    public void unparsedEntityDecl(java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        org.dom4j.io.SAXContentHandler r0;
        java.lang.String r1, r2, r3, r4;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        return;
    }

    public org.dom4j.io.ElementStack getElementStack()
    {
        org.dom4j.io.SAXContentHandler r0;
        org.dom4j.io.ElementStack $r1;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        $r1 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.io.ElementStack elementStack>;

        return $r1;
    }

    public void setElementStack(org.dom4j.io.ElementStack)
    {
        org.dom4j.io.SAXContentHandler r0;
        org.dom4j.io.ElementStack r1;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        r1 := @parameter0: org.dom4j.io.ElementStack;

        r0.<org.dom4j.io.SAXContentHandler: org.dom4j.io.ElementStack elementStack> = r1;

        return;
    }

    public org.xml.sax.EntityResolver getEntityResolver()
    {
        org.dom4j.io.SAXContentHandler r0;
        org.xml.sax.EntityResolver $r1;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        $r1 = r0.<org.dom4j.io.SAXContentHandler: org.xml.sax.EntityResolver entityResolver>;

        return $r1;
    }

    public void setEntityResolver(org.xml.sax.EntityResolver)
    {
        org.dom4j.io.SAXContentHandler r0;
        org.xml.sax.EntityResolver r1;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        r1 := @parameter0: org.xml.sax.EntityResolver;

        r0.<org.dom4j.io.SAXContentHandler: org.xml.sax.EntityResolver entityResolver> = r1;

        return;
    }

    public org.xml.sax.InputSource getInputSource()
    {
        org.dom4j.io.SAXContentHandler r0;
        org.xml.sax.InputSource $r1;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        $r1 = r0.<org.dom4j.io.SAXContentHandler: org.xml.sax.InputSource inputSource>;

        return $r1;
    }

    public void setInputSource(org.xml.sax.InputSource)
    {
        org.dom4j.io.SAXContentHandler r0;
        org.xml.sax.InputSource r1;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        r1 := @parameter0: org.xml.sax.InputSource;

        r0.<org.dom4j.io.SAXContentHandler: org.xml.sax.InputSource inputSource> = r1;

        return;
    }

    public boolean isIncludeInternalDTDDeclarations()
    {
        org.dom4j.io.SAXContentHandler r0;
        boolean $z0;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        $z0 = r0.<org.dom4j.io.SAXContentHandler: boolean includeInternalDTDDeclarations>;

        return $z0;
    }

    public void setIncludeInternalDTDDeclarations(boolean)
    {
        org.dom4j.io.SAXContentHandler r0;
        boolean z0;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        z0 := @parameter0: boolean;

        r0.<org.dom4j.io.SAXContentHandler: boolean includeInternalDTDDeclarations> = z0;

        return;
    }

    public boolean isIncludeExternalDTDDeclarations()
    {
        org.dom4j.io.SAXContentHandler r0;
        boolean $z0;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        $z0 = r0.<org.dom4j.io.SAXContentHandler: boolean includeExternalDTDDeclarations>;

        return $z0;
    }

    public void setIncludeExternalDTDDeclarations(boolean)
    {
        org.dom4j.io.SAXContentHandler r0;
        boolean z0;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        z0 := @parameter0: boolean;

        r0.<org.dom4j.io.SAXContentHandler: boolean includeExternalDTDDeclarations> = z0;

        return;
    }

    public boolean isMergeAdjacentText()
    {
        org.dom4j.io.SAXContentHandler r0;
        boolean $z0;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        $z0 = r0.<org.dom4j.io.SAXContentHandler: boolean mergeAdjacentText>;

        return $z0;
    }

    public void setMergeAdjacentText(boolean)
    {
        org.dom4j.io.SAXContentHandler r0;
        boolean z0;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        z0 := @parameter0: boolean;

        r0.<org.dom4j.io.SAXContentHandler: boolean mergeAdjacentText> = z0;

        return;
    }

    public boolean isStripWhitespaceText()
    {
        org.dom4j.io.SAXContentHandler r0;
        boolean $z0;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        $z0 = r0.<org.dom4j.io.SAXContentHandler: boolean stripWhitespaceText>;

        return $z0;
    }

    public void setStripWhitespaceText(boolean)
    {
        org.dom4j.io.SAXContentHandler r0;
        boolean z0;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        z0 := @parameter0: boolean;

        r0.<org.dom4j.io.SAXContentHandler: boolean stripWhitespaceText> = z0;

        return;
    }

    public boolean isIgnoreComments()
    {
        org.dom4j.io.SAXContentHandler r0;
        boolean $z0;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        $z0 = r0.<org.dom4j.io.SAXContentHandler: boolean ignoreComments>;

        return $z0;
    }

    public void setIgnoreComments(boolean)
    {
        org.dom4j.io.SAXContentHandler r0;
        boolean z0;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        z0 := @parameter0: boolean;

        r0.<org.dom4j.io.SAXContentHandler: boolean ignoreComments> = z0;

        return;
    }

    protected void completeCurrentTextNode()
    {
        java.lang.StringBuffer $r1, $r4, $r5, $r6, $r9;
        int $i0, i2;
        java.lang.String $r3, $r8;
        boolean $z0, $z1, z2;
        char $c1;
        org.dom4j.io.SAXContentHandler r0;
        org.dom4j.Element $r2, $r7;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        $z0 = r0.<org.dom4j.io.SAXContentHandler: boolean stripWhitespaceText>;

        if $z0 == 0 goto label5;

        z2 = 1;

        i2 = 0;

        $r5 = r0.<org.dom4j.io.SAXContentHandler: java.lang.StringBuffer textBuffer>;

        $i0 = virtualinvoke $r5.<java.lang.StringBuffer: int length()>();

     label1:
        if i2 >= $i0 goto label3;

        $r9 = r0.<org.dom4j.io.SAXContentHandler: java.lang.StringBuffer textBuffer>;

        $c1 = virtualinvoke $r9.<java.lang.StringBuffer: char charAt(int)>(i2);

        $z1 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c1);

        if $z1 != 0 goto label2;

        z2 = 0;

        goto label3;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        if z2 != 0 goto label4;

        $r7 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.Element currentElement>;

        $r6 = r0.<org.dom4j.io.SAXContentHandler: java.lang.StringBuffer textBuffer>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r7.<org.dom4j.Element: org.dom4j.Element addText(java.lang.String)>($r8);

     label4:
        goto label6;

     label5:
        $r2 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.Element currentElement>;

        $r1 = r0.<org.dom4j.io.SAXContentHandler: java.lang.StringBuffer textBuffer>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r2.<org.dom4j.Element: org.dom4j.Element addText(java.lang.String)>($r3);

     label6:
        $r4 = r0.<org.dom4j.io.SAXContentHandler: java.lang.StringBuffer textBuffer>;

        virtualinvoke $r4.<java.lang.StringBuffer: void setLength(int)>(0);

        r0.<org.dom4j.io.SAXContentHandler: boolean textInTextBuffer> = 0;

        return;
    }

    protected org.dom4j.Document createDocument()
    {
        org.xml.sax.InputSource $r5, $r6;
        org.dom4j.Document $r3;
        org.dom4j.DocumentFactory $r2;
        org.dom4j.io.SAXContentHandler r0;
        java.lang.String $r1, $r7;
        org.xml.sax.EntityResolver $r4;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        $r1 = specialinvoke r0.<org.dom4j.io.SAXContentHandler: java.lang.String getEncoding()>();

        $r2 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.DocumentFactory documentFactory>;

        $r3 = virtualinvoke $r2.<org.dom4j.DocumentFactory: org.dom4j.Document createDocument(java.lang.String)>($r1);

        $r4 = r0.<org.dom4j.io.SAXContentHandler: org.xml.sax.EntityResolver entityResolver>;

        interfaceinvoke $r3.<org.dom4j.Document: void setEntityResolver(org.xml.sax.EntityResolver)>($r4);

        $r5 = r0.<org.dom4j.io.SAXContentHandler: org.xml.sax.InputSource inputSource>;

        if $r5 == null goto label1;

        $r6 = r0.<org.dom4j.io.SAXContentHandler: org.xml.sax.InputSource inputSource>;

        $r7 = virtualinvoke $r6.<org.xml.sax.InputSource: java.lang.String getSystemId()>();

        interfaceinvoke $r3.<org.dom4j.Document: void setName(java.lang.String)>($r7);

     label1:
        return $r3;
    }

    private java.lang.String getEncoding()
    {
        java.lang.Class[] $r4;
        org.xml.sax.Locator $r1, $r2, $r6;
        java.lang.Exception $r9;
        org.dom4j.io.SAXContentHandler r0;
        java.lang.Class $r3;
        java.lang.Object $r7;
        java.lang.String $r8;
        java.lang.reflect.Method $r5;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        $r1 = r0.<org.dom4j.io.SAXContentHandler: org.xml.sax.Locator locator>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = r0.<org.dom4j.io.SAXContentHandler: org.xml.sax.Locator locator>;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = newarray (java.lang.Class)[0];

        $r5 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getEncoding", $r4);

        if $r5 == null goto label3;

        $r6 = r0.<org.dom4j.io.SAXContentHandler: org.xml.sax.Locator locator>;

        $r7 = virtualinvoke $r5.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r6, null);

        $r8 = (java.lang.String) $r7;

     label2:
        return $r8;

     label3:
        goto label5;

     label4:
        $r9 := @caughtexception;

     label5:
        return null;

        catch java.lang.Exception from label1 to label2 with label4;
    }

    protected boolean isIgnorableEntity(java.lang.String)
    {
        org.dom4j.io.SAXContentHandler r6;
        java.lang.String r0, $r1, $r2, $r3, $r4, $r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r6 := @this: org.dom4j.io.SAXContentHandler;

        r0 := @parameter0: java.lang.String;

        $r1 = "amp";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 != 0 goto label1;

        $r2 = "apos";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z1 != 0 goto label1;

        $r3 = "gt";

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z2 != 0 goto label1;

        $r4 = "lt";

        $z3 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z3 != 0 goto label1;

        $r5 = "quot";

        $z4 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z4 == 0 goto label2;

     label1:
        $z5 = 1;

        goto label3;

     label2:
        $z5 = 0;

     label3:
        return $z5;
    }

    protected void addDeclaredNamespaces(org.dom4j.Element)
    {
        org.dom4j.Namespace $r4;
        org.dom4j.tree.NamespaceStack $r2, $r3;
        org.dom4j.io.SAXContentHandler r1;
        int $i0, $i1, $i2, $i3, $i4;
        org.dom4j.Element r0;

        r1 := @this: org.dom4j.io.SAXContentHandler;

        r0 := @parameter0: org.dom4j.Element;

        interfaceinvoke r0.<org.dom4j.Element: org.dom4j.Namespace getNamespace()>();

        $r2 = r1.<org.dom4j.io.SAXContentHandler: org.dom4j.tree.NamespaceStack namespaceStack>;

        $i0 = virtualinvoke $r2.<org.dom4j.tree.NamespaceStack: int size()>();

     label1:
        $i1 = r1.<org.dom4j.io.SAXContentHandler: int declaredNamespaceIndex>;

        if $i1 >= $i0 goto label2;

        $r3 = r1.<org.dom4j.io.SAXContentHandler: org.dom4j.tree.NamespaceStack namespaceStack>;

        $i2 = r1.<org.dom4j.io.SAXContentHandler: int declaredNamespaceIndex>;

        $r4 = virtualinvoke $r3.<org.dom4j.tree.NamespaceStack: org.dom4j.Namespace getNamespace(int)>($i2);

        interfaceinvoke r0.<org.dom4j.Element: void add(org.dom4j.Namespace)>($r4);

        $i3 = r1.<org.dom4j.io.SAXContentHandler: int declaredNamespaceIndex>;

        $i4 = $i3 + 1;

        r1.<org.dom4j.io.SAXContentHandler: int declaredNamespaceIndex> = $i4;

        goto label1;

     label2:
        return;
    }

    protected void addAttributes(org.dom4j.Element, org.xml.sax.Attributes)
    {
        org.dom4j.tree.AbstractElement r10;
        org.dom4j.tree.NamespaceStack $r7, $r9;
        org.xml.sax.Attributes r1;
        int $i0, i1;
        org.dom4j.io.SAXContentHandler r6;
        org.dom4j.Element r0;
        org.dom4j.QName $r8;
        java.lang.String $r2, $r3, $r4, $r5;
        boolean $z0, $z1;

        r6 := @this: org.dom4j.io.SAXContentHandler;

        r0 := @parameter0: org.dom4j.Element;

        r1 := @parameter1: org.xml.sax.Attributes;

        $z0 = r0 instanceof org.dom4j.tree.AbstractElement;

        if $z0 == 0 goto label1;

        r10 = (org.dom4j.tree.AbstractElement) r0;

        $r9 = r6.<org.dom4j.io.SAXContentHandler: org.dom4j.tree.NamespaceStack namespaceStack>;

        virtualinvoke r10.<org.dom4j.tree.AbstractElement: void setAttributes(org.xml.sax.Attributes,org.dom4j.tree.NamespaceStack,boolean)>(r1, $r9, 0);

        goto label5;

     label1:
        $i0 = interfaceinvoke r1.<org.xml.sax.Attributes: int getLength()>();

        i1 = 0;

     label2:
        if i1 >= $i0 goto label5;

        $r2 = interfaceinvoke r1.<org.xml.sax.Attributes: java.lang.String getQName(int)>(i1);

        if 0 != 0 goto label3;

        $z1 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("xmlns");

        if $z1 != 0 goto label4;

     label3:
        $r3 = interfaceinvoke r1.<org.xml.sax.Attributes: java.lang.String getURI(int)>(i1);

        $r4 = interfaceinvoke r1.<org.xml.sax.Attributes: java.lang.String getLocalName(int)>(i1);

        $r5 = interfaceinvoke r1.<org.xml.sax.Attributes: java.lang.String getValue(int)>(i1);

        $r7 = r6.<org.dom4j.io.SAXContentHandler: org.dom4j.tree.NamespaceStack namespaceStack>;

        $r8 = virtualinvoke $r7.<org.dom4j.tree.NamespaceStack: org.dom4j.QName getAttributeQName(java.lang.String,java.lang.String,java.lang.String)>($r3, $r4, $r2);

        interfaceinvoke r0.<org.dom4j.Element: org.dom4j.Element addAttribute(org.dom4j.QName,java.lang.String)>($r8, $r5);

     label4:
        i1 = i1 + 1;

        goto label2;

     label5:
        return;
    }

    protected void addDTDDeclaration(java.lang.Object)
    {
        java.util.List $r1, $r3;
        org.dom4j.io.SAXContentHandler r0;
        java.lang.Object r2;
        java.util.ArrayList $r4;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        r2 := @parameter0: java.lang.Object;

        $r1 = r0.<org.dom4j.io.SAXContentHandler: java.util.List internalDTDDeclarations>;

        if $r1 != null goto label1;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<org.dom4j.io.SAXContentHandler: java.util.List internalDTDDeclarations> = $r4;

     label1:
        $r3 = r0.<org.dom4j.io.SAXContentHandler: java.util.List internalDTDDeclarations>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r2);

        return;
    }

    protected void addExternalDTDDeclaration(java.lang.Object)
    {
        java.util.List $r1, $r3;
        org.dom4j.io.SAXContentHandler r0;
        java.lang.Object r2;
        java.util.ArrayList $r4;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        r2 := @parameter0: java.lang.Object;

        $r1 = r0.<org.dom4j.io.SAXContentHandler: java.util.List externalDTDDeclarations>;

        if $r1 != null goto label1;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<org.dom4j.io.SAXContentHandler: java.util.List externalDTDDeclarations> = $r4;

     label1:
        $r3 = r0.<org.dom4j.io.SAXContentHandler: java.util.List externalDTDDeclarations>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r2);

        return;
    }

    protected org.dom4j.io.ElementStack createElementStack()
    {
        org.dom4j.io.SAXContentHandler r1;
        org.dom4j.io.ElementStack $r0;

        r1 := @this: org.dom4j.io.SAXContentHandler;

        $r0 = new org.dom4j.io.ElementStack;

        specialinvoke $r0.<org.dom4j.io.ElementStack: void <init>()>();

        return $r0;
    }
}
