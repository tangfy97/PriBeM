class com.google.inject.internal.util.$MapMaker$SoftEntry extends com.google.inject.internal.util.$FinalizableSoftReference implements com.google.inject.internal.util.$MapMaker$ReferenceEntry
{
    final com.google.inject.internal.util.$CustomConcurrentHashMap$Internals internals;
    final int hash;
    volatile com.google.inject.internal.util.$MapMaker$ValueReference valueReference;

    void <init>(com.google.inject.internal.util.$CustomConcurrentHashMap$Internals, java.lang.Object, int)
    {
        com.google.inject.internal.util.$CustomConcurrentHashMap$Internals r4;
        int i0;
        com.google.inject.internal.util.$MapMaker$SoftEntry r0;
        java.lang.Object r1;
        com.google.inject.internal.util.$MapMaker$ValueReference $r3;
        com.google.inject.internal.util.$FinalizableReferenceQueue $r2;

        r0 := @this: com.google.inject.internal.util.$MapMaker$SoftEntry;

        r4 := @parameter0: com.google.inject.internal.util.$CustomConcurrentHashMap$Internals;

        r1 := @parameter1: java.lang.Object;

        i0 := @parameter2: int;

        $r2 = <com.google.inject.internal.util.$MapMaker$QueueHolder: com.google.inject.internal.util.$FinalizableReferenceQueue queue>;

        specialinvoke r0.<com.google.inject.internal.util.$FinalizableSoftReference: void <init>(java.lang.Object,com.google.inject.internal.util.$FinalizableReferenceQueue)>(r1, $r2);

        $r3 = staticinvoke <com.google.inject.internal.util.$MapMaker: com.google.inject.internal.util.$MapMaker$ValueReference access$600()>();

        r0.<com.google.inject.internal.util.$MapMaker$SoftEntry: com.google.inject.internal.util.$MapMaker$ValueReference valueReference> = $r3;

        r0.<com.google.inject.internal.util.$MapMaker$SoftEntry: com.google.inject.internal.util.$CustomConcurrentHashMap$Internals internals> = r4;

        r0.<com.google.inject.internal.util.$MapMaker$SoftEntry: int hash> = i0;

        return;
    }

    public java.lang.Object getKey()
    {
        com.google.inject.internal.util.$MapMaker$SoftEntry r0;
        java.lang.Object $r1;

        r0 := @this: com.google.inject.internal.util.$MapMaker$SoftEntry;

        $r1 = virtualinvoke r0.<com.google.inject.internal.util.$MapMaker$SoftEntry: java.lang.Object get()>();

        return $r1;
    }

    public void finalizeReferent()
    {
        com.google.inject.internal.util.$MapMaker$SoftEntry r0;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Internals $r1;

        r0 := @this: com.google.inject.internal.util.$MapMaker$SoftEntry;

        $r1 = r0.<com.google.inject.internal.util.$MapMaker$SoftEntry: com.google.inject.internal.util.$CustomConcurrentHashMap$Internals internals>;

        interfaceinvoke $r1.<com.google.inject.internal.util.$CustomConcurrentHashMap$Internals: boolean removeEntry(java.lang.Object)>(r0);

        return;
    }

    public com.google.inject.internal.util.$MapMaker$ValueReference getValueReference()
    {
        com.google.inject.internal.util.$MapMaker$SoftEntry r0;
        com.google.inject.internal.util.$MapMaker$ValueReference $r1;

        r0 := @this: com.google.inject.internal.util.$MapMaker$SoftEntry;

        $r1 = r0.<com.google.inject.internal.util.$MapMaker$SoftEntry: com.google.inject.internal.util.$MapMaker$ValueReference valueReference>;

        return $r1;
    }

    public void setValueReference(com.google.inject.internal.util.$MapMaker$ValueReference)
    {
        com.google.inject.internal.util.$MapMaker$SoftEntry r0;
        com.google.inject.internal.util.$MapMaker$ValueReference r1;

        r0 := @this: com.google.inject.internal.util.$MapMaker$SoftEntry;

        r1 := @parameter0: com.google.inject.internal.util.$MapMaker$ValueReference;

        r0.<com.google.inject.internal.util.$MapMaker$SoftEntry: com.google.inject.internal.util.$MapMaker$ValueReference valueReference> = r1;

        return;
    }

    public void valueReclaimed()
    {
        com.google.inject.internal.util.$MapMaker$SoftEntry r0;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Internals $r1;

        r0 := @this: com.google.inject.internal.util.$MapMaker$SoftEntry;

        $r1 = r0.<com.google.inject.internal.util.$MapMaker$SoftEntry: com.google.inject.internal.util.$CustomConcurrentHashMap$Internals internals>;

        interfaceinvoke $r1.<com.google.inject.internal.util.$CustomConcurrentHashMap$Internals: boolean removeEntry(java.lang.Object,java.lang.Object)>(r0, null);

        return;
    }

    public com.google.inject.internal.util.$MapMaker$ReferenceEntry getNext()
    {
        com.google.inject.internal.util.$MapMaker$SoftEntry r0;

        r0 := @this: com.google.inject.internal.util.$MapMaker$SoftEntry;

        return null;
    }

    public int getHash()
    {
        int $i0;
        com.google.inject.internal.util.$MapMaker$SoftEntry r0;

        r0 := @this: com.google.inject.internal.util.$MapMaker$SoftEntry;

        $i0 = r0.<com.google.inject.internal.util.$MapMaker$SoftEntry: int hash>;

        return $i0;
    }
}
