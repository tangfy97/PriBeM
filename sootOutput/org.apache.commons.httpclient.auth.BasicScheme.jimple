public class org.apache.commons.httpclient.auth.BasicScheme extends org.apache.commons.httpclient.auth.RFC2617Scheme
{
    private static final org.apache.commons.logging.Log LOG;
    private boolean complete;
    static java.lang.Class class$org$apache$commons$httpclient$auth$BasicScheme;

    public void <init>()
    {
        org.apache.commons.httpclient.auth.BasicScheme r0;

        r0 := @this: org.apache.commons.httpclient.auth.BasicScheme;

        specialinvoke r0.<org.apache.commons.httpclient.auth.RFC2617Scheme: void <init>()>();

        r0.<org.apache.commons.httpclient.auth.BasicScheme: boolean complete> = 0;

        return;
    }

    public void <init>(java.lang.String) throws org.apache.commons.httpclient.auth.MalformedChallengeException
    {
        java.lang.String r1;
        org.apache.commons.httpclient.auth.BasicScheme r0;

        r0 := @this: org.apache.commons.httpclient.auth.BasicScheme;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.commons.httpclient.auth.RFC2617Scheme: void <init>(java.lang.String)>(r1);

        r0.<org.apache.commons.httpclient.auth.BasicScheme: boolean complete> = 1;

        return;
    }

    public java.lang.String getSchemeName()
    {
        org.apache.commons.httpclient.auth.BasicScheme r0;

        r0 := @this: org.apache.commons.httpclient.auth.BasicScheme;

        return "basic";
    }

    public void processChallenge(java.lang.String) throws org.apache.commons.httpclient.auth.MalformedChallengeException
    {
        java.lang.String r1;
        org.apache.commons.httpclient.auth.BasicScheme r0;

        r0 := @this: org.apache.commons.httpclient.auth.BasicScheme;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.commons.httpclient.auth.RFC2617Scheme: void processChallenge(java.lang.String)>(r1);

        r0.<org.apache.commons.httpclient.auth.BasicScheme: boolean complete> = 1;

        return;
    }

    public boolean isComplete()
    {
        org.apache.commons.httpclient.auth.BasicScheme r0;
        boolean $z0;

        r0 := @this: org.apache.commons.httpclient.auth.BasicScheme;

        $z0 = r0.<org.apache.commons.httpclient.auth.BasicScheme: boolean complete>;

        return $z0;
    }

    public java.lang.String authenticate(org.apache.commons.httpclient.Credentials, java.lang.String, java.lang.String) throws org.apache.commons.httpclient.auth.AuthenticationException
    {
        org.apache.commons.httpclient.auth.BasicScheme r11;
        org.apache.commons.httpclient.auth.InvalidCredentialsException $r4;
        java.lang.ClassCastException $r3;
        org.apache.commons.httpclient.UsernamePasswordCredentials r14;
        org.apache.commons.httpclient.Credentials r1;
        java.lang.StringBuffer $r5, $r6, $r9;
        org.apache.commons.logging.Log $r0;
        java.lang.Class $r7;
        java.lang.String $r2, $r8, $r10, r12, r13;

        r11 := @this: org.apache.commons.httpclient.auth.BasicScheme;

        r1 := @parameter0: org.apache.commons.httpclient.Credentials;

        r12 := @parameter1: java.lang.String;

        r13 := @parameter2: java.lang.String;

        $r0 = <org.apache.commons.httpclient.auth.BasicScheme: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter BasicScheme.authenticate(Credentials, String, String)");

     label1:
        r14 = (org.apache.commons.httpclient.UsernamePasswordCredentials) r1;

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new org.apache.commons.httpclient.auth.InvalidCredentialsException;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Credentials cannot be used for basic authentication: ");

        $r7 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r4.<org.apache.commons.httpclient.auth.InvalidCredentialsException: void <init>(java.lang.String)>($r10);

        throw $r4;

     label4:
        $r2 = staticinvoke <org.apache.commons.httpclient.auth.BasicScheme: java.lang.String authenticate(org.apache.commons.httpclient.UsernamePasswordCredentials)>(r14);

        return $r2;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }

    public boolean isConnectionBased()
    {
        org.apache.commons.httpclient.auth.BasicScheme r0;

        r0 := @this: org.apache.commons.httpclient.auth.BasicScheme;

        return 0;
    }

    public java.lang.String authenticate(org.apache.commons.httpclient.Credentials, org.apache.commons.httpclient.HttpMethod) throws org.apache.commons.httpclient.auth.AuthenticationException
    {
        org.apache.commons.httpclient.params.HttpMethodParams $r3;
        java.lang.ClassCastException $r7;
        org.apache.commons.httpclient.UsernamePasswordCredentials r16;
        java.lang.StringBuffer $r9, $r10, $r13;
        java.lang.String $r4, $r5, $r12, $r14;
        org.apache.commons.httpclient.auth.BasicScheme r15;
        org.apache.commons.httpclient.auth.InvalidCredentialsException $r8;
        java.lang.IllegalArgumentException $r6;
        org.apache.commons.httpclient.Credentials r2;
        org.apache.commons.httpclient.HttpMethod r1;
        org.apache.commons.logging.Log $r0;
        java.lang.Class $r11;

        r15 := @this: org.apache.commons.httpclient.auth.BasicScheme;

        r2 := @parameter0: org.apache.commons.httpclient.Credentials;

        r1 := @parameter1: org.apache.commons.httpclient.HttpMethod;

        $r0 = <org.apache.commons.httpclient.auth.BasicScheme: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter BasicScheme.authenticate(Credentials, HttpMethod)");

        if r1 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Method may not be null");

        throw $r6;

     label1:
        r16 = (org.apache.commons.httpclient.UsernamePasswordCredentials) r2;

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        $r8 = new org.apache.commons.httpclient.auth.InvalidCredentialsException;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Credentials cannot be used for basic authentication: ");

        $r11 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r12 = virtualinvoke $r11.<java.lang.Class: java.lang.String getName()>();

        $r13 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r8.<org.apache.commons.httpclient.auth.InvalidCredentialsException: void <init>(java.lang.String)>($r14);

        throw $r8;

     label4:
        $r3 = interfaceinvoke r1.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        $r4 = virtualinvoke $r3.<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String getCredentialCharset()>();

        $r5 = staticinvoke <org.apache.commons.httpclient.auth.BasicScheme: java.lang.String authenticate(org.apache.commons.httpclient.UsernamePasswordCredentials,java.lang.String)>(r16, $r4);

        return $r5;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }

    public static java.lang.String authenticate(org.apache.commons.httpclient.UsernamePasswordCredentials)
    {
        java.lang.String $r1;
        org.apache.commons.httpclient.UsernamePasswordCredentials r0;

        r0 := @parameter0: org.apache.commons.httpclient.UsernamePasswordCredentials;

        $r1 = staticinvoke <org.apache.commons.httpclient.auth.BasicScheme: java.lang.String authenticate(org.apache.commons.httpclient.UsernamePasswordCredentials,java.lang.String)>(r0, "ISO-8859-1");

        return $r1;
    }

    public static java.lang.String authenticate(org.apache.commons.httpclient.UsernamePasswordCredentials, java.lang.String)
    {
        byte[] $r10, $r11;
        org.apache.commons.httpclient.UsernamePasswordCredentials r1;
        java.lang.StringBuffer $r4, $r7, $r8, $r13;
        int $i0;
        java.lang.String r2, $r5, $r6, $r9, $r12, $r14;
        java.lang.IllegalArgumentException $r3, $r15;
        org.apache.commons.logging.Log $r0;

        r1 := @parameter0: org.apache.commons.httpclient.UsernamePasswordCredentials;

        r2 := @parameter1: java.lang.String;

        $r0 = <org.apache.commons.httpclient.auth.BasicScheme: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter BasicScheme.authenticate(UsernamePasswordCredentials, String)");

        if r1 != null goto label1;

        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Credentials may not be null");

        throw $r15;

     label1:
        if r2 == null goto label2;

        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i0 != 0 goto label3;

     label2:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("charset may not be null or empty");

        throw $r3;

     label3:
        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke r1.<org.apache.commons.httpclient.UsernamePasswordCredentials: java.lang.String getUserName()>();

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        $r6 = virtualinvoke r1.<org.apache.commons.httpclient.UsernamePasswordCredentials: java.lang.String getPassword()>();

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Basic ");

        $r9 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        $r10 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: byte[] getBytes(java.lang.String,java.lang.String)>($r9, r2);

        $r11 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r10);

        $r12 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: java.lang.String getAsciiString(byte[])>($r11);

        $r13 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r14;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.Class $r0, $r2;
        org.apache.commons.logging.Log $r1;

        $r0 = <org.apache.commons.httpclient.auth.BasicScheme: java.lang.Class class$org$apache$commons$httpclient$auth$BasicScheme>;

        if $r0 != null goto label1;

        $r2 = staticinvoke <org.apache.commons.httpclient.auth.BasicScheme: java.lang.Class class$(java.lang.String)>("org.apache.commons.httpclient.auth.BasicScheme");

        <org.apache.commons.httpclient.auth.BasicScheme: java.lang.Class class$org$apache$commons$httpclient$auth$BasicScheme> = $r2;

        goto label2;

     label1:
        $r2 = <org.apache.commons.httpclient.auth.BasicScheme: java.lang.Class class$org$apache$commons$httpclient$auth$BasicScheme>;

     label2:
        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r2);

        <org.apache.commons.httpclient.auth.BasicScheme: org.apache.commons.logging.Log LOG> = $r1;

        return;
    }
}
