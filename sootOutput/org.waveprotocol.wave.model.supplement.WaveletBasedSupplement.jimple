public final class org.waveprotocol.wave.model.supplement.WaveletBasedSupplement extends java.lang.Object implements org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement
{
    public static final java.lang.String READSTATE_DOCUMENT;
    public static final java.lang.String PRESENTATION_DOCUMENT;
    public static final java.lang.String FOLDERS_DOCUMENT;
    public static final java.lang.String ARCHIVING_DOCUMENT;
    public static final java.lang.String MUTED_DOCUMENT;
    public static final java.lang.String CLEARED_DOCUMENT;
    public static final java.lang.String ABUSE_DOCUMENT;
    public static final java.lang.String SEEN_DOCUMENT;
    public static final java.lang.String GADGETS_DOCUMENT;
    public static final java.lang.String SEEN_VERSION_TAG;
    public static final java.lang.String NOTIFIED_VERSION_TAG;
    public static final java.lang.String WAVELET_TAG;
    public static final java.lang.String BLIP_READ_TAG;
    public static final java.lang.String PARTICIPANTS_READ_TAG;
    public static final java.lang.String TAGS_READ_TAG;
    public static final java.lang.String WAVELET_READ_TAG;
    public static final java.lang.String CONVERSATION_TAG;
    public static final java.lang.String THREAD_TAG;
    public static final java.lang.String BLIP_TAG;
    public static final java.lang.String ARCHIVE_TAG;
    public static final java.lang.String VERSION_ATTR;
    public static final java.lang.String ID_ATTR;
    public static final java.lang.String FOLDER_TAG;
    public static final java.lang.String MUTED_TAG;
    public static final java.lang.String MUTED_ATTR;
    public static final java.lang.String CLEARED_TAG;
    public static final java.lang.String CLEARED_ATTR;
    public static final java.lang.String SIGNATURE_ATTR;
    public static final java.lang.String STATE_ATTR;
    public static final java.lang.String NOTIFICATION_TAG;
    public static final java.lang.String PENDING_NOTIFICATION_ATTR;
    public static final java.lang.String GADGET_TAG;
    public static final java.lang.String PERMISSIONS_ATTR;
    public static final java.lang.String STATE_TAG;
    public static final java.lang.String NAME_ATTR;
    public static final java.lang.String VALUE_ATTR;
    private final org.waveprotocol.wave.model.supplement.WaveletReadStateCollection read;
    private final org.waveprotocol.wave.model.supplement.WaveletThreadStateCollection collapsed;
    private final org.waveprotocol.wave.model.adt.ObservableBasicSet folders;
    private final org.waveprotocol.wave.model.adt.ObservableBasicValue muted;
    private final org.waveprotocol.wave.model.adt.ObservableMonotonicMap waveletArchiveVersions;
    private final org.waveprotocol.wave.model.adt.ObservableBasicMap seenVersion;
    private final org.waveprotocol.wave.model.adt.ObservableBasicMap notifiedVersion;
    private final org.waveprotocol.wave.model.adt.ObservableBasicValue pendingNotification;
    private final org.waveprotocol.wave.model.supplement.ObservableAbuseStore abuseStore;
    private final org.waveprotocol.wave.model.supplement.GadgetStateCollection gadgetStates;
    private final org.waveprotocol.wave.model.adt.ObservableBasicValue archiveCleared;
    private final org.waveprotocol.wave.model.util.CopyOnWriteSet listeners;
    private final org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener forwardingListener;

    private void <init>(org.waveprotocol.wave.model.wave.Wavelet)
    {
        org.waveprotocol.wave.model.supplement.ObservableAbuseStore $r19;
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;
        org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener $r13, $r16, $r27;
        org.waveprotocol.wave.model.adt.ObservableBasicValue $r7, $r11, $r25;
        org.waveprotocol.wave.model.document.ObservableDocument $r4, $r6, $r8, $r10, $r12, $r15, $r18, $r20, $r22, $r24, $r26;
        org.waveprotocol.wave.model.supplement.WaveletReadStateCollection $r14;
        org.waveprotocol.wave.model.adt.ObservableMonotonicMap $r9;
        org.waveprotocol.wave.model.supplement.WaveletThreadStateCollection $r17;
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement$1 $r2;
        org.waveprotocol.wave.model.adt.ObservableBasicMap $r21, $r23;
        org.waveprotocol.wave.model.supplement.GadgetStateCollection $r28;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        org.waveprotocol.wave.model.wave.Wavelet r3;
        org.waveprotocol.wave.model.adt.ObservableBasicSet $r5;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        r3 := @parameter0: org.waveprotocol.wave.model.wave.Wavelet;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.waveprotocol.wave.model.util.CopyOnWriteSet: org.waveprotocol.wave.model.util.CopyOnWriteSet create()>();

        r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners> = $r1;

        $r2 = new org.waveprotocol.wave.model.supplement.WaveletBasedSupplement$1;

        specialinvoke $r2.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement$1: void <init>(org.waveprotocol.wave.model.supplement.WaveletBasedSupplement)>(r0);

        r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener forwardingListener> = $r2;

        $r4 = interfaceinvoke r3.<org.waveprotocol.wave.model.wave.Wavelet: org.waveprotocol.wave.model.document.ObservableDocument getDocument(java.lang.String)>("m/folder");

        $r5 = staticinvoke <org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.adt.ObservableBasicSet fungeCreateFolders(org.waveprotocol.wave.model.document.ObservableMutableDocument)>($r4);

        r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.adt.ObservableBasicSet folders> = $r5;

        $r6 = interfaceinvoke r3.<org.waveprotocol.wave.model.wave.Wavelet: org.waveprotocol.wave.model.document.ObservableDocument getDocument(java.lang.String)>("m/muted");

        $r7 = staticinvoke <org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.adt.ObservableBasicValue fungeCreateMuted(org.waveprotocol.wave.model.document.ObservableMutableDocument)>($r6);

        r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.adt.ObservableBasicValue muted> = $r7;

        $r8 = interfaceinvoke r3.<org.waveprotocol.wave.model.wave.Wavelet: org.waveprotocol.wave.model.document.ObservableDocument getDocument(java.lang.String)>("m/archiving");

        $r9 = staticinvoke <org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.adt.ObservableMonotonicMap fungeCreateWaveletArchiveState(org.waveprotocol.wave.model.document.ObservableMutableDocument)>($r8);

        r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.adt.ObservableMonotonicMap waveletArchiveVersions> = $r9;

        $r10 = interfaceinvoke r3.<org.waveprotocol.wave.model.wave.Wavelet: org.waveprotocol.wave.model.document.ObservableDocument getDocument(java.lang.String)>("m/cleared");

        $r11 = staticinvoke <org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.adt.ObservableBasicValue fungeCreateCleared(org.waveprotocol.wave.model.document.ObservableMutableDocument)>($r10);

        r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.adt.ObservableBasicValue archiveCleared> = $r11;

        $r12 = interfaceinvoke r3.<org.waveprotocol.wave.model.wave.Wavelet: org.waveprotocol.wave.model.document.ObservableDocument getDocument(java.lang.String)>("m/read");

        $r13 = r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener forwardingListener>;

        $r14 = staticinvoke <org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.supplement.WaveletReadStateCollection fungeCreateReadState(org.waveprotocol.wave.model.document.ObservableMutableDocument,org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener)>($r12, $r13);

        r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.supplement.WaveletReadStateCollection read> = $r14;

        $r15 = interfaceinvoke r3.<org.waveprotocol.wave.model.wave.Wavelet: org.waveprotocol.wave.model.document.ObservableDocument getDocument(java.lang.String)>("m/presentation");

        $r16 = r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener forwardingListener>;

        $r17 = staticinvoke <org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.supplement.WaveletThreadStateCollection fungeCreateCollapsedState(org.waveprotocol.wave.model.document.ObservableMutableDocument,org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener)>($r15, $r16);

        r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.supplement.WaveletThreadStateCollection collapsed> = $r17;

        $r18 = interfaceinvoke r3.<org.waveprotocol.wave.model.wave.Wavelet: org.waveprotocol.wave.model.document.ObservableDocument getDocument(java.lang.String)>("m/abuse");

        $r19 = staticinvoke <org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.supplement.ObservableAbuseStore fungeCreateAbuseStore(org.waveprotocol.wave.model.document.ObservableMutableDocument)>($r18);

        r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.supplement.ObservableAbuseStore abuseStore> = $r19;

        $r20 = interfaceinvoke r3.<org.waveprotocol.wave.model.wave.Wavelet: org.waveprotocol.wave.model.document.ObservableDocument getDocument(java.lang.String)>("m/seen");

        $r21 = staticinvoke <org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.adt.ObservableBasicMap fungeCreateSeenVersion(org.waveprotocol.wave.model.document.ObservableMutableDocument)>($r20);

        r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.adt.ObservableBasicMap seenVersion> = $r21;

        $r22 = interfaceinvoke r3.<org.waveprotocol.wave.model.wave.Wavelet: org.waveprotocol.wave.model.document.ObservableDocument getDocument(java.lang.String)>("m/seen");

        $r23 = staticinvoke <org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.adt.ObservableBasicMap fungeCreateNotifiedVersion(org.waveprotocol.wave.model.document.ObservableMutableDocument)>($r22);

        r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.adt.ObservableBasicMap notifiedVersion> = $r23;

        $r24 = interfaceinvoke r3.<org.waveprotocol.wave.model.wave.Wavelet: org.waveprotocol.wave.model.document.ObservableDocument getDocument(java.lang.String)>("m/seen");

        $r25 = staticinvoke <org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.adt.ObservableBasicValue fungeCreatePendingNotification(org.waveprotocol.wave.model.document.ObservableMutableDocument)>($r24);

        r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.adt.ObservableBasicValue pendingNotification> = $r25;

        $r26 = interfaceinvoke r3.<org.waveprotocol.wave.model.wave.Wavelet: org.waveprotocol.wave.model.document.ObservableDocument getDocument(java.lang.String)>("m/gadgets");

        $r27 = r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener forwardingListener>;

        $r28 = staticinvoke <org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.supplement.GadgetStateCollection fungeCreateGadgetStates(org.waveprotocol.wave.model.document.ObservableMutableDocument,org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener)>($r26, $r27);

        r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.supplement.GadgetStateCollection gadgetStates> = $r28;

        specialinvoke r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: void hackCleanup()>();

        specialinvoke r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: void installListeners()>();

        return;
    }

    private void hackCleanup()
    {
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;
        java.lang.Integer $r2, $r4;
        org.waveprotocol.wave.model.adt.ObservableBasicSet $r1, $r3;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.adt.ObservableBasicSet folders>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        interfaceinvoke $r1.<org.waveprotocol.wave.model.adt.ObservableBasicSet: void remove(java.lang.Object)>($r2);

        $r3 = r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.adt.ObservableBasicSet folders>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        interfaceinvoke $r3.<org.waveprotocol.wave.model.adt.ObservableBasicSet: void remove(java.lang.Object)>($r4);

        return;
    }

    private void installListeners()
    {
        org.waveprotocol.wave.model.supplement.ObservableAbuseStore $r10;
        org.waveprotocol.wave.model.adt.ObservableMonotonicMap $r8;
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement$3 $r3;
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement$2 $r1;
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement$6 $r9;
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement$5 $r7;
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement$4 $r5;
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;
        org.waveprotocol.wave.model.adt.ObservableBasicValue $r2, $r6;
        org.waveprotocol.wave.model.adt.ObservableBasicSet $r4;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.adt.ObservableBasicValue muted>;

        $r1 = new org.waveprotocol.wave.model.supplement.WaveletBasedSupplement$2;

        specialinvoke $r1.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement$2: void <init>(org.waveprotocol.wave.model.supplement.WaveletBasedSupplement)>(r0);

        interfaceinvoke $r2.<org.waveprotocol.wave.model.adt.ObservableBasicValue: void addListener(java.lang.Object)>($r1);

        $r4 = r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.adt.ObservableBasicSet folders>;

        $r3 = new org.waveprotocol.wave.model.supplement.WaveletBasedSupplement$3;

        specialinvoke $r3.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement$3: void <init>(org.waveprotocol.wave.model.supplement.WaveletBasedSupplement)>(r0);

        interfaceinvoke $r4.<org.waveprotocol.wave.model.adt.ObservableBasicSet: void addListener(java.lang.Object)>($r3);

        $r6 = r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.adt.ObservableBasicValue archiveCleared>;

        $r5 = new org.waveprotocol.wave.model.supplement.WaveletBasedSupplement$4;

        specialinvoke $r5.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement$4: void <init>(org.waveprotocol.wave.model.supplement.WaveletBasedSupplement)>(r0);

        interfaceinvoke $r6.<org.waveprotocol.wave.model.adt.ObservableBasicValue: void addListener(java.lang.Object)>($r5);

        $r8 = r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.adt.ObservableMonotonicMap waveletArchiveVersions>;

        $r7 = new org.waveprotocol.wave.model.supplement.WaveletBasedSupplement$5;

        specialinvoke $r7.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement$5: void <init>(org.waveprotocol.wave.model.supplement.WaveletBasedSupplement)>(r0);

        interfaceinvoke $r8.<org.waveprotocol.wave.model.adt.ObservableMonotonicMap: void addListener(org.waveprotocol.wave.model.adt.ObservableBasicMap$Listener)>($r7);

        $r10 = r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.supplement.ObservableAbuseStore abuseStore>;

        $r9 = new org.waveprotocol.wave.model.supplement.WaveletBasedSupplement$6;

        specialinvoke $r9.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement$6: void <init>(org.waveprotocol.wave.model.supplement.WaveletBasedSupplement)>(r0);

        interfaceinvoke $r10.<org.waveprotocol.wave.model.supplement.ObservableAbuseStore: void addListener(java.lang.Object)>($r9);

        return;
    }

    private static int valueOf(java.lang.Integer)
    {
        int $i0, $i2;
        java.lang.Integer r0;

        r0 := @parameter0: java.lang.Integer;

        if r0 == null goto label1;

        $i0 = virtualinvoke r0.<java.lang.Integer: int intValue()>();

        goto label2;

     label1:
        $i2 = (int) -1;

        $i0 = $i2;

     label2:
        return $i0;
    }

    private static boolean valueOf(java.lang.Boolean)
    {
        java.lang.Boolean r0;
        boolean $z0;

        r0 := @parameter0: java.lang.Boolean;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.Boolean: boolean booleanValue()>();

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static org.waveprotocol.wave.model.supplement.WaveletBasedSupplement create(org.waveprotocol.wave.model.wave.Wavelet)
    {
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement $r0;
        org.waveprotocol.wave.model.wave.Wavelet r1;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.Wavelet;

        $r0 = new org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        specialinvoke $r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: void <init>(org.waveprotocol.wave.model.wave.Wavelet)>(r1);

        return $r0;
    }

    public void setLastReadBlipVersion(org.waveprotocol.wave.model.id.WaveletId, java.lang.String, int)
    {
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;
        org.waveprotocol.wave.model.supplement.WaveletReadStateCollection $r3;
        int i0;
        org.waveprotocol.wave.model.id.WaveletId r1;
        java.lang.String r2;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r3 = r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.supplement.WaveletReadStateCollection read>;

        virtualinvoke $r3.<org.waveprotocol.wave.model.supplement.WaveletReadStateCollection: void setLastReadBlipVersion(org.waveprotocol.wave.model.id.WaveletId,java.lang.String,int)>(r1, r2, i0);

        return;
    }

    public void setLastReadParticipantsVersion(org.waveprotocol.wave.model.id.WaveletId, int)
    {
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;
        org.waveprotocol.wave.model.supplement.WaveletReadStateCollection $r2;
        int i0;
        org.waveprotocol.wave.model.id.WaveletId r1;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        i0 := @parameter1: int;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.supplement.WaveletReadStateCollection read>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.supplement.WaveletReadStateCollection: void setLastReadParticipantsVersion(org.waveprotocol.wave.model.id.WaveletId,int)>(r1, i0);

        return;
    }

    public void setLastReadTagsVersion(org.waveprotocol.wave.model.id.WaveletId, int)
    {
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;
        org.waveprotocol.wave.model.supplement.WaveletReadStateCollection $r2;
        int i0;
        org.waveprotocol.wave.model.id.WaveletId r1;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        i0 := @parameter1: int;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.supplement.WaveletReadStateCollection read>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.supplement.WaveletReadStateCollection: void setLastReadTagsVersion(org.waveprotocol.wave.model.id.WaveletId,int)>(r1, i0);

        return;
    }

    public void setLastReadWaveletVersion(org.waveprotocol.wave.model.id.WaveletId, int)
    {
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;
        org.waveprotocol.wave.model.supplement.WaveletReadStateCollection $r2;
        int i0;
        org.waveprotocol.wave.model.id.WaveletId r1;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        i0 := @parameter1: int;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.supplement.WaveletReadStateCollection read>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.supplement.WaveletReadStateCollection: void setLastReadWaveletVersion(org.waveprotocol.wave.model.id.WaveletId,int)>(r1, i0);

        return;
    }

    public void clearReadState()
    {
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;
        org.waveprotocol.wave.model.supplement.WaveletReadStateCollection $r1;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.supplement.WaveletReadStateCollection read>;

        virtualinvoke $r1.<org.waveprotocol.wave.model.supplement.WaveletReadStateCollection: void clear()>();

        return;
    }

    public void clearBlipReadState(org.waveprotocol.wave.model.id.WaveletId, java.lang.String)
    {
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;
        org.waveprotocol.wave.model.supplement.WaveletReadStateCollection $r3;
        org.waveprotocol.wave.model.id.WaveletId r1;
        java.lang.String r2;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.supplement.WaveletReadStateCollection read>;

        virtualinvoke $r3.<org.waveprotocol.wave.model.supplement.WaveletReadStateCollection: void clearBlipReadState(org.waveprotocol.wave.model.id.WaveletId,java.lang.String)>(r1, r2);

        return;
    }

    public int getLastReadBlipVersion(org.waveprotocol.wave.model.id.WaveletId, java.lang.String)
    {
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;
        org.waveprotocol.wave.model.supplement.WaveletReadStateCollection $r3;
        int $i0;
        org.waveprotocol.wave.model.id.WaveletId r1;
        java.lang.String r2;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.supplement.WaveletReadStateCollection read>;

        $i0 = virtualinvoke $r3.<org.waveprotocol.wave.model.supplement.WaveletReadStateCollection: int getLastReadBlipVersion(org.waveprotocol.wave.model.id.WaveletId,java.lang.String)>(r1, r2);

        return $i0;
    }

    public int getLastReadParticipantsVersion(org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;
        org.waveprotocol.wave.model.supplement.WaveletReadStateCollection $r2;
        int $i0;
        org.waveprotocol.wave.model.id.WaveletId r1;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.supplement.WaveletReadStateCollection read>;

        $i0 = virtualinvoke $r2.<org.waveprotocol.wave.model.supplement.WaveletReadStateCollection: int getLastReadParticipantsVersion(org.waveprotocol.wave.model.id.WaveletId)>(r1);

        return $i0;
    }

    public int getLastReadTagsVersion(org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;
        org.waveprotocol.wave.model.supplement.WaveletReadStateCollection $r2;
        int $i0;
        org.waveprotocol.wave.model.id.WaveletId r1;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.supplement.WaveletReadStateCollection read>;

        $i0 = virtualinvoke $r2.<org.waveprotocol.wave.model.supplement.WaveletReadStateCollection: int getLastReadTagsVersion(org.waveprotocol.wave.model.id.WaveletId)>(r1);

        return $i0;
    }

    public int getLastReadWaveletVersion(org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;
        org.waveprotocol.wave.model.supplement.WaveletReadStateCollection $r2;
        int $i0;
        org.waveprotocol.wave.model.id.WaveletId r1;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.supplement.WaveletReadStateCollection read>;

        $i0 = virtualinvoke $r2.<org.waveprotocol.wave.model.supplement.WaveletReadStateCollection: int getLastReadWaveletVersion(org.waveprotocol.wave.model.id.WaveletId)>(r1);

        return $i0;
    }

    public java.lang.Iterable getReadBlips(org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;
        org.waveprotocol.wave.model.supplement.WaveletReadStateCollection $r2;
        org.waveprotocol.wave.model.id.WaveletId r1;
        java.lang.Iterable $r3;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.supplement.WaveletReadStateCollection read>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.supplement.WaveletReadStateCollection: java.lang.Iterable getReadBlips(org.waveprotocol.wave.model.id.WaveletId)>(r1);

        return $r3;
    }

    public java.lang.Iterable getReadWavelets()
    {
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;
        org.waveprotocol.wave.model.supplement.WaveletReadStateCollection $r1;
        java.lang.Iterable $r2;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.supplement.WaveletReadStateCollection read>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.supplement.WaveletReadStateCollection: java.lang.Iterable getReadWavelets()>();

        return $r2;
    }

    public org.waveprotocol.wave.model.supplement.ThreadState getThreadState(org.waveprotocol.wave.model.id.WaveletId, java.lang.String)
    {
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;
        org.waveprotocol.wave.model.supplement.WaveletThreadStateCollection $r3;
        org.waveprotocol.wave.model.id.WaveletId r1;
        java.lang.String r2;
        org.waveprotocol.wave.model.supplement.ThreadState $r4;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.supplement.WaveletThreadStateCollection collapsed>;

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.model.supplement.WaveletThreadStateCollection: org.waveprotocol.wave.model.supplement.ThreadState getThreadState(org.waveprotocol.wave.model.id.WaveletId,java.lang.String)>(r1, r2);

        return $r4;
    }

    public void setThreadState(org.waveprotocol.wave.model.id.WaveletId, java.lang.String, org.waveprotocol.wave.model.supplement.ThreadState)
    {
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;
        org.waveprotocol.wave.model.supplement.WaveletThreadStateCollection $r4;
        org.waveprotocol.wave.model.id.WaveletId r1;
        java.lang.String r2;
        org.waveprotocol.wave.model.supplement.ThreadState r3;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.waveprotocol.wave.model.supplement.ThreadState;

        $r4 = r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.supplement.WaveletThreadStateCollection collapsed>;

        virtualinvoke $r4.<org.waveprotocol.wave.model.supplement.WaveletThreadStateCollection: void setThreadState(org.waveprotocol.wave.model.id.WaveletId,java.lang.String,org.waveprotocol.wave.model.supplement.ThreadState)>(r1, r2, r3);

        return;
    }

    public java.lang.Iterable getStatefulThreads(org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;
        org.waveprotocol.wave.model.supplement.WaveletThreadStateCollection $r2;
        org.waveprotocol.wave.model.id.WaveletId r1;
        java.lang.Iterable $r3;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.supplement.WaveletThreadStateCollection collapsed>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.supplement.WaveletThreadStateCollection: java.lang.Iterable getStatefulThreads(org.waveprotocol.wave.model.id.WaveletId)>(r1);

        return $r3;
    }

    public java.lang.Iterable getWaveletsWithThreadState()
    {
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;
        org.waveprotocol.wave.model.supplement.WaveletThreadStateCollection $r1;
        java.lang.Iterable $r2;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.supplement.WaveletThreadStateCollection collapsed>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.supplement.WaveletThreadStateCollection: java.lang.Iterable getStatefulWavelets()>();

        return $r2;
    }

    public void addFolder(int)
    {
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;
        int i0;
        java.lang.Integer $r2;
        org.waveprotocol.wave.model.adt.ObservableBasicSet $r1;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        i0 := @parameter0: int;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.adt.ObservableBasicSet folders>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r1.<org.waveprotocol.wave.model.adt.ObservableBasicSet: void add(java.lang.Object)>($r2);

        return;
    }

    public void removeAllFolders()
    {
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;
        org.waveprotocol.wave.model.adt.ObservableBasicSet $r1;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.adt.ObservableBasicSet folders>;

        interfaceinvoke $r1.<org.waveprotocol.wave.model.adt.ObservableBasicSet: void clear()>();

        return;
    }

    public void removeFolder(int)
    {
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;
        int i0;
        java.lang.Integer $r2;
        org.waveprotocol.wave.model.adt.ObservableBasicSet $r1;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        i0 := @parameter0: int;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.adt.ObservableBasicSet folders>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r1.<org.waveprotocol.wave.model.adt.ObservableBasicSet: void remove(java.lang.Object)>($r2);

        return;
    }

    public java.lang.Iterable getFolders()
    {
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;
        org.waveprotocol.wave.model.adt.ObservableBasicSet $r1;
        java.lang.Iterable $r2;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.adt.ObservableBasicSet folders>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.adt.ObservableBasicSet: java.lang.Iterable getValues()>();

        return $r2;
    }

    public boolean isInFolder(int)
    {
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;
        int i0;
        java.lang.Integer $r2;
        org.waveprotocol.wave.model.adt.ObservableBasicSet $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        i0 := @parameter0: int;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.adt.ObservableBasicSet folders>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $z0 = interfaceinvoke $r1.<org.waveprotocol.wave.model.adt.ObservableBasicSet: boolean contains(java.lang.Object)>($r2);

        return $z0;
    }

    private boolean isCleared()
    {
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;
        org.waveprotocol.wave.model.adt.ObservableBasicValue $r1;
        java.lang.Boolean r3;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.adt.ObservableBasicValue archiveCleared>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.adt.ObservableBasicValue: java.lang.Object get()>();

        r3 = (java.lang.Boolean) $r2;

        if r3 == null goto label1;

        $z0 = virtualinvoke r3.<java.lang.Boolean: boolean booleanValue()>();

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void follow()
    {
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;
        java.lang.Boolean $r2;
        org.waveprotocol.wave.model.adt.ObservableBasicValue $r1;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.adt.ObservableBasicValue muted>;

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        interfaceinvoke $r1.<org.waveprotocol.wave.model.adt.ObservableBasicValue: void set(java.lang.Object)>($r2);

        return;
    }

    public void unfollow()
    {
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;
        java.lang.Boolean $r2;
        org.waveprotocol.wave.model.adt.ObservableBasicValue $r1;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.adt.ObservableBasicValue muted>;

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r1.<org.waveprotocol.wave.model.adt.ObservableBasicValue: void set(java.lang.Object)>($r2);

        return;
    }

    public void clearFollow()
    {
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;
        org.waveprotocol.wave.model.adt.ObservableBasicValue $r1;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.adt.ObservableBasicValue muted>;

        interfaceinvoke $r1.<org.waveprotocol.wave.model.adt.ObservableBasicValue: void set(java.lang.Object)>(null);

        return;
    }

    public java.lang.Boolean getFollowed()
    {
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;
        org.waveprotocol.wave.model.adt.ObservableBasicValue $r1;
        java.lang.Boolean $r3, $r4;
        java.lang.Object $r2;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.adt.ObservableBasicValue muted>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.adt.ObservableBasicValue: java.lang.Object get()>();

        $r3 = (java.lang.Boolean) $r2;

        $r4 = staticinvoke <org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: java.lang.Boolean inverse(java.lang.Boolean)>($r3);

        return $r4;
    }

    private static java.lang.Boolean inverse(java.lang.Boolean)
    {
        java.lang.Boolean r0, $r1;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Boolean;

        if r0 == null goto label3;

        $z0 = virtualinvoke r0.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        goto label4;

     label3:
        $r1 = null;

     label4:
        return $r1;
    }

    public int getArchiveWaveletVersion(org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.wave.model.adt.ObservableMonotonicMap $r2;
        org.waveprotocol.wave.model.id.WaveletId r1;
        java.lang.Integer r4;
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;
        int $i0, $i2, $i4;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: boolean isCleared()>();

        if $z0 == 0 goto label1;

        $i2 = (int) -1;

        return $i2;

     label1:
        $r2 = r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.adt.ObservableMonotonicMap waveletArchiveVersions>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.adt.ObservableMonotonicMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (java.lang.Integer) $r3;

        if r4 == null goto label2;

        $i0 = virtualinvoke r4.<java.lang.Integer: int intValue()>();

        goto label3;

     label2:
        $i4 = (int) -1;

        $i0 = $i4;

     label3:
        return $i0;
    }

    public void archiveAtVersion(org.waveprotocol.wave.model.id.WaveletId, int)
    {
        org.waveprotocol.wave.model.adt.ObservableMonotonicMap $r2;
        org.waveprotocol.wave.model.id.WaveletId r1;
        java.lang.Integer $r3;
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;
        org.waveprotocol.wave.model.adt.ObservableBasicValue $r4;
        int i0;
        java.lang.Boolean $r5;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        i0 := @parameter1: int;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.adt.ObservableMonotonicMap waveletArchiveVersions>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r2.<org.waveprotocol.wave.model.adt.ObservableMonotonicMap: boolean put(java.lang.Object,java.lang.Object)>(r1, $r3);

        $z0 = specialinvoke r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: boolean isCleared()>();

        if $z0 == 0 goto label1;

        $r4 = r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.adt.ObservableBasicValue archiveCleared>;

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        interfaceinvoke $r4.<org.waveprotocol.wave.model.adt.ObservableBasicValue: void set(java.lang.Object)>($r5);

     label1:
        return;
    }

    public void clearArchiveState()
    {
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;
        org.waveprotocol.wave.model.adt.ObservableBasicValue $r1;
        java.lang.Boolean $r2;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: boolean isCleared()>();

        if $z0 != 0 goto label1;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.adt.ObservableBasicValue archiveCleared>;

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r1.<org.waveprotocol.wave.model.adt.ObservableBasicValue: void set(java.lang.Object)>($r2);

     label1:
        return;
    }

    public java.util.Set getSeenWavelets()
    {
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;
        org.waveprotocol.wave.model.adt.ObservableBasicMap $r1;
        java.util.Set $r2;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.adt.ObservableBasicMap seenVersion>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.adt.ObservableBasicMap: java.util.Set keySet()>();

        return $r2;
    }

    public java.util.Set getNotifiedWavelets()
    {
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;
        org.waveprotocol.wave.model.adt.ObservableBasicMap $r1;
        java.util.Set $r2;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.adt.ObservableBasicMap notifiedVersion>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.adt.ObservableBasicMap: java.util.Set keySet()>();

        return $r2;
    }

    public org.waveprotocol.wave.model.version.HashedVersion getSeenVersion(org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;
        org.waveprotocol.wave.model.adt.ObservableBasicMap $r2;
        org.waveprotocol.wave.model.version.HashedVersion r4, $r5;
        org.waveprotocol.wave.model.id.WaveletId r1;
        java.lang.Object $r3;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.adt.ObservableBasicMap seenVersion>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.adt.ObservableBasicMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (org.waveprotocol.wave.model.version.HashedVersion) $r3;

        if null != r4 goto label1;

        $r5 = staticinvoke <org.waveprotocol.wave.model.version.HashedVersion: org.waveprotocol.wave.model.version.HashedVersion unsigned(long)>(0L);

        return $r5;

     label1:
        return r4;
    }

    public void setSeenVersion(org.waveprotocol.wave.model.id.WaveletId, org.waveprotocol.wave.model.version.HashedVersion)
    {
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;
        org.waveprotocol.wave.model.adt.ObservableBasicMap $r3;
        org.waveprotocol.wave.model.version.HashedVersion r2;
        org.waveprotocol.wave.model.id.WaveletId r1;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        r2 := @parameter1: org.waveprotocol.wave.model.version.HashedVersion;

        $r3 = r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.adt.ObservableBasicMap seenVersion>;

        interfaceinvoke $r3.<org.waveprotocol.wave.model.adt.ObservableBasicMap: boolean put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    public void clearSeenVersion(org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;
        org.waveprotocol.wave.model.adt.ObservableBasicMap $r2;
        org.waveprotocol.wave.model.id.WaveletId r1;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.adt.ObservableBasicMap seenVersion>;

        interfaceinvoke $r2.<org.waveprotocol.wave.model.adt.ObservableBasicMap: void remove(java.lang.Object)>(r1);

        return;
    }

    public java.lang.Iterable getArchiveWavelets()
    {
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;
        java.util.Set $r2;
        org.waveprotocol.wave.model.adt.ObservableMonotonicMap $r1;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.adt.ObservableMonotonicMap waveletArchiveVersions>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.adt.ObservableMonotonicMap: java.util.Set keySet()>();

        return $r2;
    }

    public java.util.Set getWantedEvaluations()
    {
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;
        org.waveprotocol.wave.model.supplement.ObservableAbuseStore $r1;
        java.util.Set $r2;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.supplement.ObservableAbuseStore abuseStore>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.supplement.ObservableAbuseStore: java.util.Set getWantedEvaluations()>();

        return $r2;
    }

    public void addWantedEvaluation(org.waveprotocol.wave.model.supplement.WantedEvaluation)
    {
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;
        org.waveprotocol.wave.model.supplement.ObservableAbuseStore $r2;
        org.waveprotocol.wave.model.supplement.WantedEvaluation r1;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        r1 := @parameter0: org.waveprotocol.wave.model.supplement.WantedEvaluation;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.supplement.ObservableAbuseStore abuseStore>;

        interfaceinvoke $r2.<org.waveprotocol.wave.model.supplement.ObservableAbuseStore: void addWantedEvaluation(org.waveprotocol.wave.model.supplement.WantedEvaluation)>(r1);

        return;
    }

    public boolean getPendingNotification()
    {
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;
        org.waveprotocol.wave.model.adt.ObservableBasicValue $r1;
        java.lang.Boolean r3;
        java.lang.Object $r2;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.adt.ObservableBasicValue pendingNotification>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.adt.ObservableBasicValue: java.lang.Object get()>();

        r3 = (java.lang.Boolean) $r2;

        if r3 == null goto label1;

        $z0 = virtualinvoke r3.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public int getNotifiedVersion(org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;
        org.waveprotocol.wave.model.adt.ObservableBasicMap $r2;
        int $i0, $i2;
        org.waveprotocol.wave.model.id.WaveletId r1;
        java.lang.Object $r3;
        java.lang.Integer r4;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.adt.ObservableBasicMap notifiedVersion>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.adt.ObservableBasicMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (java.lang.Integer) $r3;

        if r4 == null goto label1;

        $i0 = virtualinvoke r4.<java.lang.Integer: int intValue()>();

        goto label2;

     label1:
        $i2 = (int) -1;

        $i0 = $i2;

     label2:
        return $i0;
    }

    public void setNotifiedVersion(org.waveprotocol.wave.model.id.WaveletId, int)
    {
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;
        org.waveprotocol.wave.model.adt.ObservableBasicMap $r2;
        int i0;
        org.waveprotocol.wave.model.id.WaveletId r1;
        java.lang.Integer $r3;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        i0 := @parameter1: int;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.adt.ObservableBasicMap notifiedVersion>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r2.<org.waveprotocol.wave.model.adt.ObservableBasicMap: boolean put(java.lang.Object,java.lang.Object)>(r1, $r3);

        return;
    }

    public void clearPendingNotification()
    {
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;
        org.waveprotocol.wave.model.adt.ObservableBasicValue $r1;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.adt.ObservableBasicValue pendingNotification>;

        interfaceinvoke $r1.<org.waveprotocol.wave.model.adt.ObservableBasicValue: void set(java.lang.Object)>(null);

        return;
    }

    public org.waveprotocol.wave.model.util.ReadableStringMap getGadgetState(java.lang.String)
    {
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;
        org.waveprotocol.wave.model.supplement.GadgetStateCollection $r2;
        java.lang.String r1;
        org.waveprotocol.wave.model.util.ReadableStringMap $r3;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.supplement.GadgetStateCollection gadgetStates>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.supplement.GadgetStateCollection: org.waveprotocol.wave.model.util.ReadableStringMap getGadgetState(java.lang.String)>(r1);

        return $r3;
    }

    public void setGadgetState(java.lang.String, java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;
        org.waveprotocol.wave.model.supplement.GadgetStateCollection $r4;
        java.lang.String r1, r2, r3;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r4 = r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.supplement.GadgetStateCollection gadgetStates>;

        virtualinvoke $r4.<org.waveprotocol.wave.model.supplement.GadgetStateCollection: void setGadgetState(java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3);

        return;
    }

    public void addListener(org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener)
    {
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;
        org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener r1;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        r1 := @parameter0: org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.util.CopyOnWriteSet: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void removeListener(org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener)
    {
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;
        org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener r1;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        r1 := @parameter0: org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.util.CopyOnWriteSet: boolean remove(java.lang.Object)>(r1);

        return;
    }

    private void triggerOnLastReadBlipVersionChanged(org.waveprotocol.wave.model.id.WaveletId, java.lang.String, int, int)
    {
        java.util.Iterator $r2;
        org.waveprotocol.wave.model.id.WaveletId r5;
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener r4;
        int i0, i1;
        java.lang.Object $r3;
        java.lang.String r6;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        r5 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        r6 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener) $r3;

        interfaceinvoke r4.<org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener: void onLastReadBlipVersionChanged(org.waveprotocol.wave.model.id.WaveletId,java.lang.String,int,int)>(r5, r6, i0, i1);

        goto label1;

     label2:
        return;
    }

    private void triggerOnLastReadParticipantsVersionChanged(org.waveprotocol.wave.model.id.WaveletId, int, int)
    {
        java.util.Iterator $r2;
        org.waveprotocol.wave.model.id.WaveletId r5;
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener r4;
        int i0, i1;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        r5 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener) $r3;

        interfaceinvoke r4.<org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener: void onLastReadParticipantsVersionChanged(org.waveprotocol.wave.model.id.WaveletId,int,int)>(r5, i0, i1);

        goto label1;

     label2:
        return;
    }

    private void triggerOnLastReadTagsVersionChanged(org.waveprotocol.wave.model.id.WaveletId, int, int)
    {
        java.util.Iterator $r2;
        org.waveprotocol.wave.model.id.WaveletId r5;
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener r4;
        int i0, i1;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        r5 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener) $r3;

        interfaceinvoke r4.<org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener: void onLastReadTagsVersionChanged(org.waveprotocol.wave.model.id.WaveletId,int,int)>(r5, i0, i1);

        goto label1;

     label2:
        return;
    }

    private void triggerOnLastReadWaveletVersionChanged(org.waveprotocol.wave.model.id.WaveletId, int, int)
    {
        java.util.Iterator $r2;
        org.waveprotocol.wave.model.id.WaveletId r5;
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener r4;
        int i0, i1;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        r5 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener) $r3;

        interfaceinvoke r4.<org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener: void onLastReadWaveletVersionChanged(org.waveprotocol.wave.model.id.WaveletId,int,int)>(r5, i0, i1);

        goto label1;

     label2:
        return;
    }

    private void triggerOnFollowed()
    {
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener r4;
        java.util.Iterator $r2;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener) $r3;

        interfaceinvoke r4.<org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener: void onFollowed()>();

        goto label1;

     label2:
        return;
    }

    private void triggerOnUnfollowed()
    {
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener r4;
        java.util.Iterator $r2;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener) $r3;

        interfaceinvoke r4.<org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener: void onUnfollowed()>();

        goto label1;

     label2:
        return;
    }

    private void triggerOnFollowCleared()
    {
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener r4;
        java.util.Iterator $r2;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener) $r3;

        interfaceinvoke r4.<org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener: void onFollowCleared()>();

        goto label1;

     label2:
        return;
    }

    private void triggerOnFolderAdded(int)
    {
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener r4;
        java.util.Iterator $r2;
        int i0;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        i0 := @parameter0: int;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener) $r3;

        interfaceinvoke r4.<org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener: void onFolderAdded(int)>(i0);

        goto label1;

     label2:
        return;
    }

    private void triggerOnFolderRemoved(int)
    {
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener r4;
        java.util.Iterator $r2;
        int i0;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        i0 := @parameter0: int;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener) $r3;

        interfaceinvoke r4.<org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener: void onFolderAdded(int)>(i0);

        goto label1;

     label2:
        return;
    }

    private void triggerOnArchiveVersionChanged(org.waveprotocol.wave.model.id.WaveletId, int, int)
    {
        java.util.Iterator $r2;
        org.waveprotocol.wave.model.id.WaveletId r5;
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener r4;
        int i0, i1;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        r5 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener) $r3;

        interfaceinvoke r4.<org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener: void onArchiveVersionChanged(org.waveprotocol.wave.model.id.WaveletId,int,int)>(r5, i0, i1);

        goto label1;

     label2:
        return;
    }

    private void triggerOnArchiveClearChanged(boolean, boolean)
    {
        java.util.Iterator $r2;
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener r4;
        java.lang.Object $r3;
        boolean $z0, z1, z2;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        z1 := @parameter0: boolean;

        z2 := @parameter1: boolean;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener) $r3;

        interfaceinvoke r4.<org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener: void onArchiveClearChanged(boolean,boolean)>(z1, z2);

        goto label1;

     label2:
        return;
    }

    private void triggerOnWantedEvaluationAdded(org.waveprotocol.wave.model.supplement.WantedEvaluation)
    {
        org.waveprotocol.wave.model.supplement.WantedEvaluation r0;
        java.util.Iterator $r4;
        org.waveprotocol.wave.model.id.WaveletId $r1;
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r2;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r3;
        org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener r6;
        java.lang.Object $r5;
        boolean $z0;

        r2 := @this: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        r0 := @parameter0: org.waveprotocol.wave.model.supplement.WantedEvaluation;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.supplement.WantedEvaluation: org.waveprotocol.wave.model.id.WaveletId getWaveletId()>();

        if $r1 != null goto label1;

        return;

     label1:
        $r3 = r2.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener) $r5;

        interfaceinvoke r6.<org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener: void onWantedEvaluationsChanged(org.waveprotocol.wave.model.id.WaveletId)>($r1);

        goto label2;

     label3:
        return;
    }

    private void triggerOnThreadStateChanged(org.waveprotocol.wave.model.id.WaveletId, java.lang.String, org.waveprotocol.wave.model.supplement.ThreadState, org.waveprotocol.wave.model.supplement.ThreadState)
    {
        java.util.Iterator $r2;
        org.waveprotocol.wave.model.id.WaveletId r5;
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener r4;
        java.lang.Object $r3;
        java.lang.String r6;
        org.waveprotocol.wave.model.supplement.ThreadState r7, r8;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        r5 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        r6 := @parameter1: java.lang.String;

        r7 := @parameter2: org.waveprotocol.wave.model.supplement.ThreadState;

        r8 := @parameter3: org.waveprotocol.wave.model.supplement.ThreadState;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener) $r3;

        interfaceinvoke r4.<org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener: void onThreadStateChanged(org.waveprotocol.wave.model.id.WaveletId,java.lang.String,org.waveprotocol.wave.model.supplement.ThreadState,org.waveprotocol.wave.model.supplement.ThreadState)>(r5, r6, r7, r8);

        goto label1;

     label2:
        return;
    }

    private void triggerOnGadgetStateChanged(java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        java.util.Iterator $r2;
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener r4;
        java.lang.Object $r3;
        java.lang.String r5, r6, r7, r8;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        r5 := @parameter0: java.lang.String;

        r6 := @parameter1: java.lang.String;

        r7 := @parameter2: java.lang.String;

        r8 := @parameter3: java.lang.String;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener) $r3;

        interfaceinvoke r4.<org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener: void onGadgetStateChanged(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r5, r6, r7, r8);

        goto label1;

     label2:
        return;
    }

    private static org.waveprotocol.wave.model.adt.ObservableBasicValue createMuted(org.waveprotocol.wave.model.document.util.DocumentEventRouter)
    {
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedBoolean $r3;
        org.waveprotocol.wave.model.document.ObservableMutableDocument $r1;
        java.lang.Object $r2;
        org.waveprotocol.wave.model.document.util.DocumentEventRouter r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.util.DocumentEventRouter;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.util.DocumentEventRouter: org.waveprotocol.wave.model.document.ObservableMutableDocument getDocument()>();

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.ObservableMutableDocument: java.lang.Object getDocumentElement()>();

        $r3 = staticinvoke <org.waveprotocol.wave.model.adt.docbased.DocumentBasedBoolean: org.waveprotocol.wave.model.adt.docbased.DocumentBasedBoolean create(org.waveprotocol.wave.model.document.util.DocumentEventRouter,java.lang.Object,java.lang.String,java.lang.String)>(r0, $r2, "muted", "muted");

        return $r3;
    }

    private static org.waveprotocol.wave.model.adt.ObservableBasicValue createCleared(org.waveprotocol.wave.model.document.util.DocumentEventRouter)
    {
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedBoolean $r3;
        org.waveprotocol.wave.model.document.ObservableMutableDocument $r1;
        java.lang.Object $r2;
        org.waveprotocol.wave.model.document.util.DocumentEventRouter r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.util.DocumentEventRouter;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.util.DocumentEventRouter: org.waveprotocol.wave.model.document.ObservableMutableDocument getDocument()>();

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.ObservableMutableDocument: java.lang.Object getDocumentElement()>();

        $r3 = staticinvoke <org.waveprotocol.wave.model.adt.docbased.DocumentBasedBoolean: org.waveprotocol.wave.model.adt.docbased.DocumentBasedBoolean create(org.waveprotocol.wave.model.document.util.DocumentEventRouter,java.lang.Object,java.lang.String,java.lang.String)>(r0, $r2, "cleared", "cleared");

        return $r3;
    }

    private static org.waveprotocol.wave.model.adt.ObservableBasicSet createFolders(org.waveprotocol.wave.model.document.util.DocumentEventRouter)
    {
        org.waveprotocol.wave.model.util.Serializer $r3;
        org.waveprotocol.wave.model.document.ObservableMutableDocument $r1;
        java.lang.Object $r2;
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet $r4;
        org.waveprotocol.wave.model.document.util.DocumentEventRouter r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.util.DocumentEventRouter;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.util.DocumentEventRouter: org.waveprotocol.wave.model.document.ObservableMutableDocument getDocument()>();

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.ObservableMutableDocument: java.lang.Object getDocumentElement()>();

        $r3 = <org.waveprotocol.wave.model.util.Serializer: org.waveprotocol.wave.model.util.Serializer INTEGER>;

        $r4 = staticinvoke <org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet: org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicSet create(org.waveprotocol.wave.model.document.util.DocumentEventRouter,java.lang.Object,org.waveprotocol.wave.model.util.Serializer,java.lang.String,java.lang.String)>(r0, $r2, $r3, "folder", "i");

        return $r4;
    }

    private static org.waveprotocol.wave.model.adt.ObservableMonotonicMap createWaveletArchiveState(org.waveprotocol.wave.model.document.util.DocumentEventRouter)
    {
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicMap $r5;
        org.waveprotocol.wave.model.util.Serializer $r3, $r4;
        org.waveprotocol.wave.model.document.ObservableMutableDocument $r1;
        java.lang.Object $r2;
        org.waveprotocol.wave.model.document.util.DocumentEventRouter r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.util.DocumentEventRouter;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.util.DocumentEventRouter: org.waveprotocol.wave.model.document.ObservableMutableDocument getDocument()>();

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.ObservableMutableDocument: java.lang.Object getDocumentElement()>();

        $r4 = <org.waveprotocol.wave.model.id.WaveletIdSerializer: org.waveprotocol.wave.model.util.Serializer INSTANCE>;

        $r3 = <org.waveprotocol.wave.model.util.Serializer: org.waveprotocol.wave.model.util.Serializer INTEGER>;

        $r5 = staticinvoke <org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicMap: org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicMap create(org.waveprotocol.wave.model.document.util.DocumentEventRouter,java.lang.Object,org.waveprotocol.wave.model.util.Serializer,org.waveprotocol.wave.model.util.Serializer,java.lang.String,java.lang.String,java.lang.String)>(r0, $r2, $r4, $r3, "archive", "i", "v");

        return $r5;
    }

    private static org.waveprotocol.wave.model.adt.ObservableBasicValue createPendingNotification(org.waveprotocol.wave.model.document.util.DocumentEventRouter)
    {
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedBoolean $r3;
        org.waveprotocol.wave.model.document.ObservableMutableDocument $r1;
        java.lang.Object $r2;
        org.waveprotocol.wave.model.document.util.DocumentEventRouter r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.util.DocumentEventRouter;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.util.DocumentEventRouter: org.waveprotocol.wave.model.document.ObservableMutableDocument getDocument()>();

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.ObservableMutableDocument: java.lang.Object getDocumentElement()>();

        $r3 = staticinvoke <org.waveprotocol.wave.model.adt.docbased.DocumentBasedBoolean: org.waveprotocol.wave.model.adt.docbased.DocumentBasedBoolean create(org.waveprotocol.wave.model.document.util.DocumentEventRouter,java.lang.Object,java.lang.String,java.lang.String)>(r0, $r2, "notification", "pending");

        return $r3;
    }

    private static org.waveprotocol.wave.model.supplement.WaveletReadStateCollection createWaveletReadState(org.waveprotocol.wave.model.document.util.DocumentEventRouter, org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener)
    {
        org.waveprotocol.wave.model.supplement.WaveletReadStateCollection $r4;
        org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener r3;
        org.waveprotocol.wave.model.document.ObservableMutableDocument $r1;
        java.lang.Object $r2;
        org.waveprotocol.wave.model.document.util.DocumentEventRouter r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.util.DocumentEventRouter;

        r3 := @parameter1: org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.util.DocumentEventRouter: org.waveprotocol.wave.model.document.ObservableMutableDocument getDocument()>();

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.ObservableMutableDocument: java.lang.Object getDocumentElement()>();

        $r4 = staticinvoke <org.waveprotocol.wave.model.supplement.WaveletReadStateCollection: org.waveprotocol.wave.model.supplement.WaveletReadStateCollection create(org.waveprotocol.wave.model.document.util.DocumentEventRouter,java.lang.Object,org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener)>(r0, $r2, r3);

        return $r4;
    }

    private static org.waveprotocol.wave.model.supplement.WaveletThreadStateCollection createWaveletCollapsedState(org.waveprotocol.wave.model.document.util.DocumentEventRouter, org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener)
    {
        org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener r3;
        org.waveprotocol.wave.model.supplement.WaveletThreadStateCollection $r4;
        org.waveprotocol.wave.model.document.ObservableMutableDocument $r1;
        java.lang.Object $r2;
        org.waveprotocol.wave.model.document.util.DocumentEventRouter r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.util.DocumentEventRouter;

        r3 := @parameter1: org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.util.DocumentEventRouter: org.waveprotocol.wave.model.document.ObservableMutableDocument getDocument()>();

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.ObservableMutableDocument: java.lang.Object getDocumentElement()>();

        $r4 = staticinvoke <org.waveprotocol.wave.model.supplement.WaveletThreadStateCollection: org.waveprotocol.wave.model.supplement.WaveletThreadStateCollection create(org.waveprotocol.wave.model.document.util.DocumentEventRouter,java.lang.Object,org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener)>(r0, $r2, r3);

        return $r4;
    }

    private static org.waveprotocol.wave.model.adt.ObservableBasicMap createWaveletSeenVersion(org.waveprotocol.wave.model.document.util.DocumentEventRouter)
    {
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicMap $r5;
        org.waveprotocol.wave.model.util.Serializer $r3, $r4;
        org.waveprotocol.wave.model.document.ObservableMutableDocument $r1;
        java.lang.Object $r2;
        org.waveprotocol.wave.model.document.util.DocumentEventRouter r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.util.DocumentEventRouter;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.util.DocumentEventRouter: org.waveprotocol.wave.model.document.ObservableMutableDocument getDocument()>();

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.ObservableMutableDocument: java.lang.Object getDocumentElement()>();

        $r4 = <org.waveprotocol.wave.model.id.WaveletIdSerializer: org.waveprotocol.wave.model.util.Serializer INSTANCE>;

        $r3 = <org.waveprotocol.wave.model.version.HashedVersionSerializer: org.waveprotocol.wave.model.util.Serializer INSTANCE>;

        $r5 = staticinvoke <org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicMap: org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicMap create(org.waveprotocol.wave.model.document.util.DocumentEventRouter,java.lang.Object,org.waveprotocol.wave.model.util.Serializer,org.waveprotocol.wave.model.util.Serializer,java.lang.String,java.lang.String,java.lang.String)>(r0, $r2, $r4, $r3, "seen", "i", "signature");

        return $r5;
    }

    private static org.waveprotocol.wave.model.adt.ObservableBasicMap createWaveletNotifiedVersion(org.waveprotocol.wave.model.document.util.DocumentEventRouter)
    {
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicMap $r5;
        org.waveprotocol.wave.model.util.Serializer $r3, $r4;
        org.waveprotocol.wave.model.document.ObservableMutableDocument $r1;
        java.lang.Object $r2;
        org.waveprotocol.wave.model.document.util.DocumentEventRouter r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.util.DocumentEventRouter;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.util.DocumentEventRouter: org.waveprotocol.wave.model.document.ObservableMutableDocument getDocument()>();

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.ObservableMutableDocument: java.lang.Object getDocumentElement()>();

        $r4 = <org.waveprotocol.wave.model.id.WaveletIdSerializer: org.waveprotocol.wave.model.util.Serializer INSTANCE>;

        $r3 = <org.waveprotocol.wave.model.util.Serializer: org.waveprotocol.wave.model.util.Serializer INTEGER>;

        $r5 = staticinvoke <org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicMap: org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicMap create(org.waveprotocol.wave.model.document.util.DocumentEventRouter,java.lang.Object,org.waveprotocol.wave.model.util.Serializer,org.waveprotocol.wave.model.util.Serializer,java.lang.String,java.lang.String,java.lang.String)>(r0, $r2, $r4, $r3, "notified", "i", "v");

        return $r5;
    }

    private static org.waveprotocol.wave.model.supplement.GadgetStateCollection createGadgetStatesDoc(org.waveprotocol.wave.model.document.util.DocumentEventRouter, org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener)
    {
        org.waveprotocol.wave.model.supplement.GadgetStateCollection $r4;
        org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener r3;
        org.waveprotocol.wave.model.document.ObservableMutableDocument $r1;
        java.lang.Object $r2;
        org.waveprotocol.wave.model.document.util.DocumentEventRouter r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.util.DocumentEventRouter;

        r3 := @parameter1: org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.util.DocumentEventRouter: org.waveprotocol.wave.model.document.ObservableMutableDocument getDocument()>();

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.ObservableMutableDocument: java.lang.Object getDocumentElement()>();

        $r4 = staticinvoke <org.waveprotocol.wave.model.supplement.GadgetStateCollection: org.waveprotocol.wave.model.supplement.GadgetStateCollection create(org.waveprotocol.wave.model.document.util.DocumentEventRouter,java.lang.Object,org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener)>(r0, $r2, r3);

        return $r4;
    }

    private static org.waveprotocol.wave.model.supplement.ObservableAbuseStore createAbuseStore(org.waveprotocol.wave.model.document.util.DocumentEventRouter)
    {
        org.waveprotocol.wave.model.document.util.DocumentEventRouter r0;
        org.waveprotocol.wave.model.supplement.DocumentBasedAbuseStore $r1;

        r0 := @parameter0: org.waveprotocol.wave.model.document.util.DocumentEventRouter;

        $r1 = staticinvoke <org.waveprotocol.wave.model.supplement.DocumentBasedAbuseStore: org.waveprotocol.wave.model.supplement.DocumentBasedAbuseStore create(org.waveprotocol.wave.model.document.util.DocumentEventRouter)>(r0);

        return $r1;
    }

    private static org.waveprotocol.wave.model.adt.ObservableBasicSet fungeCreateFolders(org.waveprotocol.wave.model.document.ObservableMutableDocument)
    {
        org.waveprotocol.wave.model.document.util.DocumentEventRouter $r1;
        org.waveprotocol.wave.model.document.ObservableMutableDocument r0;
        org.waveprotocol.wave.model.adt.ObservableBasicSet $r2;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ObservableMutableDocument;

        $r1 = staticinvoke <org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter: org.waveprotocol.wave.model.document.util.DocumentEventRouter create(org.waveprotocol.wave.model.document.ObservableMutableDocument)>(r0);

        $r2 = staticinvoke <org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.adt.ObservableBasicSet createFolders(org.waveprotocol.wave.model.document.util.DocumentEventRouter)>($r1);

        return $r2;
    }

    private static org.waveprotocol.wave.model.adt.ObservableBasicValue fungeCreateMuted(org.waveprotocol.wave.model.document.ObservableMutableDocument)
    {
        org.waveprotocol.wave.model.document.util.DocumentEventRouter $r1;
        org.waveprotocol.wave.model.adt.ObservableBasicValue $r2;
        org.waveprotocol.wave.model.document.ObservableMutableDocument r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ObservableMutableDocument;

        $r1 = staticinvoke <org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter: org.waveprotocol.wave.model.document.util.DocumentEventRouter create(org.waveprotocol.wave.model.document.ObservableMutableDocument)>(r0);

        $r2 = staticinvoke <org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.adt.ObservableBasicValue createMuted(org.waveprotocol.wave.model.document.util.DocumentEventRouter)>($r1);

        return $r2;
    }

    private static org.waveprotocol.wave.model.adt.ObservableBasicValue fungeCreateCleared(org.waveprotocol.wave.model.document.ObservableMutableDocument)
    {
        org.waveprotocol.wave.model.document.util.DocumentEventRouter $r1;
        org.waveprotocol.wave.model.adt.ObservableBasicValue $r2;
        org.waveprotocol.wave.model.document.ObservableMutableDocument r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ObservableMutableDocument;

        $r1 = staticinvoke <org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter: org.waveprotocol.wave.model.document.util.DocumentEventRouter create(org.waveprotocol.wave.model.document.ObservableMutableDocument)>(r0);

        $r2 = staticinvoke <org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.adt.ObservableBasicValue createCleared(org.waveprotocol.wave.model.document.util.DocumentEventRouter)>($r1);

        return $r2;
    }

    private static org.waveprotocol.wave.model.adt.ObservableMonotonicMap fungeCreateWaveletArchiveState(org.waveprotocol.wave.model.document.ObservableMutableDocument)
    {
        org.waveprotocol.wave.model.adt.ObservableMonotonicMap $r2;
        org.waveprotocol.wave.model.document.util.DocumentEventRouter $r1;
        org.waveprotocol.wave.model.document.ObservableMutableDocument r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ObservableMutableDocument;

        $r1 = staticinvoke <org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter: org.waveprotocol.wave.model.document.util.DocumentEventRouter create(org.waveprotocol.wave.model.document.ObservableMutableDocument)>(r0);

        $r2 = staticinvoke <org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.adt.ObservableMonotonicMap createWaveletArchiveState(org.waveprotocol.wave.model.document.util.DocumentEventRouter)>($r1);

        return $r2;
    }

    private static org.waveprotocol.wave.model.adt.ObservableBasicValue fungeCreatePendingNotification(org.waveprotocol.wave.model.document.ObservableMutableDocument)
    {
        org.waveprotocol.wave.model.document.util.DocumentEventRouter $r1;
        org.waveprotocol.wave.model.adt.ObservableBasicValue $r2;
        org.waveprotocol.wave.model.document.ObservableMutableDocument r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ObservableMutableDocument;

        $r1 = staticinvoke <org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter: org.waveprotocol.wave.model.document.util.DocumentEventRouter create(org.waveprotocol.wave.model.document.ObservableMutableDocument)>(r0);

        $r2 = staticinvoke <org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.adt.ObservableBasicValue createPendingNotification(org.waveprotocol.wave.model.document.util.DocumentEventRouter)>($r1);

        return $r2;
    }

    private static org.waveprotocol.wave.model.supplement.WaveletReadStateCollection fungeCreateReadState(org.waveprotocol.wave.model.document.ObservableMutableDocument, org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener)
    {
        org.waveprotocol.wave.model.supplement.WaveletReadStateCollection $r3;
        org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener r2;
        org.waveprotocol.wave.model.document.ObservableMutableDocument r0;
        org.waveprotocol.wave.model.document.util.DocumentEventRouter $r1;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ObservableMutableDocument;

        r2 := @parameter1: org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener;

        $r1 = staticinvoke <org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter: org.waveprotocol.wave.model.document.util.DocumentEventRouter create(org.waveprotocol.wave.model.document.ObservableMutableDocument)>(r0);

        $r3 = staticinvoke <org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.supplement.WaveletReadStateCollection createWaveletReadState(org.waveprotocol.wave.model.document.util.DocumentEventRouter,org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener)>($r1, r2);

        return $r3;
    }

    private static org.waveprotocol.wave.model.supplement.WaveletThreadStateCollection fungeCreateCollapsedState(org.waveprotocol.wave.model.document.ObservableMutableDocument, org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener)
    {
        org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener r2;
        org.waveprotocol.wave.model.supplement.WaveletThreadStateCollection $r3;
        org.waveprotocol.wave.model.document.ObservableMutableDocument r0;
        org.waveprotocol.wave.model.document.util.DocumentEventRouter $r1;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ObservableMutableDocument;

        r2 := @parameter1: org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener;

        $r1 = staticinvoke <org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter: org.waveprotocol.wave.model.document.util.DocumentEventRouter create(org.waveprotocol.wave.model.document.ObservableMutableDocument)>(r0);

        $r3 = staticinvoke <org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.supplement.WaveletThreadStateCollection createWaveletCollapsedState(org.waveprotocol.wave.model.document.util.DocumentEventRouter,org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener)>($r1, r2);

        return $r3;
    }

    private static org.waveprotocol.wave.model.adt.ObservableBasicMap fungeCreateSeenVersion(org.waveprotocol.wave.model.document.ObservableMutableDocument)
    {
        org.waveprotocol.wave.model.adt.ObservableBasicMap $r2;
        org.waveprotocol.wave.model.document.util.DocumentEventRouter $r1;
        org.waveprotocol.wave.model.document.ObservableMutableDocument r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ObservableMutableDocument;

        $r1 = staticinvoke <org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter: org.waveprotocol.wave.model.document.util.DocumentEventRouter create(org.waveprotocol.wave.model.document.ObservableMutableDocument)>(r0);

        $r2 = staticinvoke <org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.adt.ObservableBasicMap createWaveletSeenVersion(org.waveprotocol.wave.model.document.util.DocumentEventRouter)>($r1);

        return $r2;
    }

    private static org.waveprotocol.wave.model.adt.ObservableBasicMap fungeCreateNotifiedVersion(org.waveprotocol.wave.model.document.ObservableMutableDocument)
    {
        org.waveprotocol.wave.model.adt.ObservableBasicMap $r2;
        org.waveprotocol.wave.model.document.util.DocumentEventRouter $r1;
        org.waveprotocol.wave.model.document.ObservableMutableDocument r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ObservableMutableDocument;

        $r1 = staticinvoke <org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter: org.waveprotocol.wave.model.document.util.DocumentEventRouter create(org.waveprotocol.wave.model.document.ObservableMutableDocument)>(r0);

        $r2 = staticinvoke <org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.adt.ObservableBasicMap createWaveletNotifiedVersion(org.waveprotocol.wave.model.document.util.DocumentEventRouter)>($r1);

        return $r2;
    }

    private static org.waveprotocol.wave.model.supplement.ObservableAbuseStore fungeCreateAbuseStore(org.waveprotocol.wave.model.document.ObservableMutableDocument)
    {
        org.waveprotocol.wave.model.supplement.ObservableAbuseStore $r2;
        org.waveprotocol.wave.model.document.util.DocumentEventRouter $r1;
        org.waveprotocol.wave.model.document.ObservableMutableDocument r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ObservableMutableDocument;

        $r1 = staticinvoke <org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter: org.waveprotocol.wave.model.document.util.DocumentEventRouter create(org.waveprotocol.wave.model.document.ObservableMutableDocument)>(r0);

        $r2 = staticinvoke <org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.supplement.ObservableAbuseStore createAbuseStore(org.waveprotocol.wave.model.document.util.DocumentEventRouter)>($r1);

        return $r2;
    }

    private static org.waveprotocol.wave.model.supplement.GadgetStateCollection fungeCreateGadgetStates(org.waveprotocol.wave.model.document.ObservableMutableDocument, org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener)
    {
        org.waveprotocol.wave.model.supplement.GadgetStateCollection $r3;
        org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener r2;
        org.waveprotocol.wave.model.document.ObservableMutableDocument r0;
        org.waveprotocol.wave.model.document.util.DocumentEventRouter $r1;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ObservableMutableDocument;

        r2 := @parameter1: org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener;

        $r1 = staticinvoke <org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter: org.waveprotocol.wave.model.document.util.DocumentEventRouter create(org.waveprotocol.wave.model.document.ObservableMutableDocument)>(r0);

        $r3 = staticinvoke <org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.supplement.GadgetStateCollection createGadgetStatesDoc(org.waveprotocol.wave.model.document.util.DocumentEventRouter,org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener)>($r1, r2);

        return $r3;
    }

    public volatile void removeListener(java.lang.Object)
    {
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;
        java.lang.Object r1;
        org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener $r2;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener) r1;

        virtualinvoke r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: void removeListener(org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener)>($r2);

        return;
    }

    public volatile void addListener(java.lang.Object)
    {
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;
        java.lang.Object r1;
        org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener $r2;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener) r1;

        virtualinvoke r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: void addListener(org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener)>($r2);

        return;
    }

    static void access$000(org.waveprotocol.wave.model.supplement.WaveletBasedSupplement, org.waveprotocol.wave.model.id.WaveletId, java.lang.String, int, int)
    {
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;
        int i0, i1;
        org.waveprotocol.wave.model.id.WaveletId r1;
        java.lang.String r2;

        r0 := @parameter0: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        r1 := @parameter1: org.waveprotocol.wave.model.id.WaveletId;

        r2 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        specialinvoke r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: void triggerOnLastReadBlipVersionChanged(org.waveprotocol.wave.model.id.WaveletId,java.lang.String,int,int)>(r1, r2, i0, i1);

        return;
    }

    static void access$100(org.waveprotocol.wave.model.supplement.WaveletBasedSupplement, org.waveprotocol.wave.model.id.WaveletId, int, int)
    {
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;
        int i0, i1;
        org.waveprotocol.wave.model.id.WaveletId r1;

        r0 := @parameter0: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        r1 := @parameter1: org.waveprotocol.wave.model.id.WaveletId;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        specialinvoke r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: void triggerOnLastReadParticipantsVersionChanged(org.waveprotocol.wave.model.id.WaveletId,int,int)>(r1, i0, i1);

        return;
    }

    static void access$200(org.waveprotocol.wave.model.supplement.WaveletBasedSupplement, org.waveprotocol.wave.model.id.WaveletId, int, int)
    {
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;
        int i0, i1;
        org.waveprotocol.wave.model.id.WaveletId r1;

        r0 := @parameter0: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        r1 := @parameter1: org.waveprotocol.wave.model.id.WaveletId;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        specialinvoke r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: void triggerOnLastReadTagsVersionChanged(org.waveprotocol.wave.model.id.WaveletId,int,int)>(r1, i0, i1);

        return;
    }

    static void access$300(org.waveprotocol.wave.model.supplement.WaveletBasedSupplement, org.waveprotocol.wave.model.id.WaveletId, int, int)
    {
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;
        int i0, i1;
        org.waveprotocol.wave.model.id.WaveletId r1;

        r0 := @parameter0: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        r1 := @parameter1: org.waveprotocol.wave.model.id.WaveletId;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        specialinvoke r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: void triggerOnLastReadWaveletVersionChanged(org.waveprotocol.wave.model.id.WaveletId,int,int)>(r1, i0, i1);

        return;
    }

    static void access$400(org.waveprotocol.wave.model.supplement.WaveletBasedSupplement, org.waveprotocol.wave.model.id.WaveletId, java.lang.String, org.waveprotocol.wave.model.supplement.ThreadState, org.waveprotocol.wave.model.supplement.ThreadState)
    {
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;
        org.waveprotocol.wave.model.id.WaveletId r1;
        java.lang.String r2;
        org.waveprotocol.wave.model.supplement.ThreadState r3, r4;

        r0 := @parameter0: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        r1 := @parameter1: org.waveprotocol.wave.model.id.WaveletId;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: org.waveprotocol.wave.model.supplement.ThreadState;

        r4 := @parameter4: org.waveprotocol.wave.model.supplement.ThreadState;

        specialinvoke r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: void triggerOnThreadStateChanged(org.waveprotocol.wave.model.id.WaveletId,java.lang.String,org.waveprotocol.wave.model.supplement.ThreadState,org.waveprotocol.wave.model.supplement.ThreadState)>(r1, r2, r3, r4);

        return;
    }

    static void access$500(org.waveprotocol.wave.model.supplement.WaveletBasedSupplement, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;
        java.lang.String r1, r2, r3, r4;

        r0 := @parameter0: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: java.lang.String;

        specialinvoke r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: void triggerOnGadgetStateChanged(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3, r4);

        return;
    }

    static void access$600(org.waveprotocol.wave.model.supplement.WaveletBasedSupplement)
    {
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;

        r0 := @parameter0: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        specialinvoke r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: void triggerOnFollowCleared()>();

        return;
    }

    static void access$700(org.waveprotocol.wave.model.supplement.WaveletBasedSupplement)
    {
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;

        r0 := @parameter0: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        specialinvoke r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: void triggerOnUnfollowed()>();

        return;
    }

    static void access$800(org.waveprotocol.wave.model.supplement.WaveletBasedSupplement)
    {
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;

        r0 := @parameter0: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        specialinvoke r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: void triggerOnFollowed()>();

        return;
    }

    static void access$900(org.waveprotocol.wave.model.supplement.WaveletBasedSupplement, int)
    {
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;
        int i0;

        r0 := @parameter0: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        i0 := @parameter1: int;

        specialinvoke r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: void triggerOnFolderAdded(int)>(i0);

        return;
    }

    static void access$1000(org.waveprotocol.wave.model.supplement.WaveletBasedSupplement, int)
    {
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;
        int i0;

        r0 := @parameter0: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        i0 := @parameter1: int;

        specialinvoke r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: void triggerOnFolderRemoved(int)>(i0);

        return;
    }

    static boolean access$1100(java.lang.Boolean)
    {
        java.lang.Boolean r0;
        boolean $z0;

        r0 := @parameter0: java.lang.Boolean;

        $z0 = staticinvoke <org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: boolean valueOf(java.lang.Boolean)>(r0);

        return $z0;
    }

    static void access$1200(org.waveprotocol.wave.model.supplement.WaveletBasedSupplement, boolean, boolean)
    {
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;
        boolean z0, z1;

        r0 := @parameter0: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        specialinvoke r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: void triggerOnArchiveClearChanged(boolean,boolean)>(z0, z1);

        return;
    }

    static int access$1300(java.lang.Integer)
    {
        int $i0;
        java.lang.Integer r0;

        r0 := @parameter0: java.lang.Integer;

        $i0 = staticinvoke <org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: int valueOf(java.lang.Integer)>(r0);

        return $i0;
    }

    static void access$1400(org.waveprotocol.wave.model.supplement.WaveletBasedSupplement, org.waveprotocol.wave.model.id.WaveletId, int, int)
    {
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;
        int i0, i1;
        org.waveprotocol.wave.model.id.WaveletId r1;

        r0 := @parameter0: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        r1 := @parameter1: org.waveprotocol.wave.model.id.WaveletId;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        specialinvoke r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: void triggerOnArchiveVersionChanged(org.waveprotocol.wave.model.id.WaveletId,int,int)>(r1, i0, i1);

        return;
    }

    static void access$1500(org.waveprotocol.wave.model.supplement.WaveletBasedSupplement, org.waveprotocol.wave.model.supplement.WantedEvaluation)
    {
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement r0;
        org.waveprotocol.wave.model.supplement.WantedEvaluation r1;

        r0 := @parameter0: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement;

        r1 := @parameter1: org.waveprotocol.wave.model.supplement.WantedEvaluation;

        specialinvoke r0.<org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: void triggerOnWantedEvaluationAdded(org.waveprotocol.wave.model.supplement.WantedEvaluation)>(r1);

        return;
    }

    public static void <clinit>()
    {
        <org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: java.lang.String VALUE_ATTR> = "value";

        <org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: java.lang.String NAME_ATTR> = "name";

        <org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: java.lang.String STATE_TAG> = "state";

        <org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: java.lang.String PERMISSIONS_ATTR> = "p";

        <org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: java.lang.String GADGET_TAG> = "gadget";

        <org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: java.lang.String PENDING_NOTIFICATION_ATTR> = "pending";

        <org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: java.lang.String NOTIFICATION_TAG> = "notification";

        <org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: java.lang.String STATE_ATTR> = "state";

        <org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: java.lang.String SIGNATURE_ATTR> = "signature";

        <org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: java.lang.String CLEARED_ATTR> = "cleared";

        <org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: java.lang.String CLEARED_TAG> = "cleared";

        <org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: java.lang.String MUTED_ATTR> = "muted";

        <org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: java.lang.String MUTED_TAG> = "muted";

        <org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: java.lang.String FOLDER_TAG> = "folder";

        <org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: java.lang.String ID_ATTR> = "i";

        <org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: java.lang.String VERSION_ATTR> = "v";

        <org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: java.lang.String ARCHIVE_TAG> = "archive";

        <org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: java.lang.String BLIP_TAG> = "blip";

        <org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: java.lang.String THREAD_TAG> = "thread";

        <org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: java.lang.String CONVERSATION_TAG> = "conversation";

        <org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: java.lang.String WAVELET_READ_TAG> = "all";

        <org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: java.lang.String TAGS_READ_TAG> = "tags";

        <org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: java.lang.String PARTICIPANTS_READ_TAG> = "participants";

        <org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: java.lang.String BLIP_READ_TAG> = "blip";

        <org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: java.lang.String WAVELET_TAG> = "wavelet";

        <org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: java.lang.String NOTIFIED_VERSION_TAG> = "notified";

        <org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: java.lang.String SEEN_VERSION_TAG> = "seen";

        <org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: java.lang.String GADGETS_DOCUMENT> = "m/gadgets";

        <org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: java.lang.String SEEN_DOCUMENT> = "m/seen";

        <org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: java.lang.String ABUSE_DOCUMENT> = "m/abuse";

        <org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: java.lang.String CLEARED_DOCUMENT> = "m/cleared";

        <org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: java.lang.String MUTED_DOCUMENT> = "m/muted";

        <org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: java.lang.String ARCHIVING_DOCUMENT> = "m/archiving";

        <org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: java.lang.String FOLDERS_DOCUMENT> = "m/folder";

        <org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: java.lang.String PRESENTATION_DOCUMENT> = "m/presentation";

        <org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: java.lang.String READSTATE_DOCUMENT> = "m/read";

        return;
    }
}
