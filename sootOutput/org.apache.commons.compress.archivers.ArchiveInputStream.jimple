public abstract class org.apache.commons.compress.archivers.ArchiveInputStream extends java.io.InputStream
{
    private final byte[] SINGLE;
    private static final int BYTE_MASK;
    private long bytesRead;

    public void <init>()
    {
        byte[] $r1;
        org.apache.commons.compress.archivers.ArchiveInputStream r0;

        r0 := @this: org.apache.commons.compress.archivers.ArchiveInputStream;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        $r1 = newarray (byte)[1];

        r0.<org.apache.commons.compress.archivers.ArchiveInputStream: byte[] SINGLE> = $r1;

        r0.<org.apache.commons.compress.archivers.ArchiveInputStream: long bytesRead> = 0L;

        return;
    }

    public abstract org.apache.commons.compress.archivers.ArchiveEntry getNextEntry() throws java.io.IOException;

    public int read() throws java.io.IOException
    {
        byte[] $r1, $r2;
        short $s2;
        byte $b1;
        int $i0, $i4;
        org.apache.commons.compress.archivers.ArchiveInputStream r0;

        r0 := @this: org.apache.commons.compress.archivers.ArchiveInputStream;

        $r1 = r0.<org.apache.commons.compress.archivers.ArchiveInputStream: byte[] SINGLE>;

        $i0 = virtualinvoke r0.<org.apache.commons.compress.archivers.ArchiveInputStream: int read(byte[],int,int)>($r1, 0, 1);

        $i4 = (int) -1;

        if $i0 != $i4 goto label1;

        $s2 = -1;

        goto label2;

     label1:
        $r2 = r0.<org.apache.commons.compress.archivers.ArchiveInputStream: byte[] SINGLE>;

        $b1 = $r2[0];

        $s2 = $b1 & 255;

     label2:
        return $s2;
    }

    protected void count(int)
    {
        int i0;
        long $l1;
        org.apache.commons.compress.archivers.ArchiveInputStream r0;

        r0 := @this: org.apache.commons.compress.archivers.ArchiveInputStream;

        i0 := @parameter0: int;

        $l1 = (long) i0;

        virtualinvoke r0.<org.apache.commons.compress.archivers.ArchiveInputStream: void count(long)>($l1);

        return;
    }

    protected void count(long)
    {
        byte $b1;
        long l0, $l2, $l3;
        org.apache.commons.compress.archivers.ArchiveInputStream r0;

        r0 := @this: org.apache.commons.compress.archivers.ArchiveInputStream;

        l0 := @parameter0: long;

        $b1 = l0 cmp -1L;

        if $b1 == 0 goto label1;

        $l2 = r0.<org.apache.commons.compress.archivers.ArchiveInputStream: long bytesRead>;

        $l3 = $l2 + l0;

        r0.<org.apache.commons.compress.archivers.ArchiveInputStream: long bytesRead> = $l3;

     label1:
        return;
    }

    protected void pushedBackBytes(long)
    {
        long l0, $l1, $l2;
        org.apache.commons.compress.archivers.ArchiveInputStream r0;

        r0 := @this: org.apache.commons.compress.archivers.ArchiveInputStream;

        l0 := @parameter0: long;

        $l1 = r0.<org.apache.commons.compress.archivers.ArchiveInputStream: long bytesRead>;

        $l2 = $l1 - l0;

        r0.<org.apache.commons.compress.archivers.ArchiveInputStream: long bytesRead> = $l2;

        return;
    }

    public int getCount()
    {
        int $i1;
        long $l0;
        org.apache.commons.compress.archivers.ArchiveInputStream r0;

        r0 := @this: org.apache.commons.compress.archivers.ArchiveInputStream;

        $l0 = r0.<org.apache.commons.compress.archivers.ArchiveInputStream: long bytesRead>;

        $i1 = (int) $l0;

        return $i1;
    }

    public long getBytesRead()
    {
        long $l0;
        org.apache.commons.compress.archivers.ArchiveInputStream r0;

        r0 := @this: org.apache.commons.compress.archivers.ArchiveInputStream;

        $l0 = r0.<org.apache.commons.compress.archivers.ArchiveInputStream: long bytesRead>;

        return $l0;
    }

    public boolean canReadEntryData(org.apache.commons.compress.archivers.ArchiveEntry)
    {
        org.apache.commons.compress.archivers.ArchiveInputStream r0;
        org.apache.commons.compress.archivers.ArchiveEntry r1;

        r0 := @this: org.apache.commons.compress.archivers.ArchiveInputStream;

        r1 := @parameter0: org.apache.commons.compress.archivers.ArchiveEntry;

        return 1;
    }

    public static void <clinit>()
    {
        <org.apache.commons.compress.archivers.ArchiveInputStream: int BYTE_MASK> = 255;

        return;
    }
}
