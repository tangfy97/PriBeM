public class org.apache.batik.swing.svg.SVGUpdateOverlay extends java.lang.Object implements org.apache.batik.swing.gvt.Overlay
{
    java.util.List rects;
    int size;
    int updateCount;
    int[] counts;

    public void <init>(int, int)
    {
        org.apache.batik.swing.svg.SVGUpdateOverlay r0;
        int[] $r2;
        int i0, i1;
        java.util.LinkedList $r1;

        r0 := @this: org.apache.batik.swing.svg.SVGUpdateOverlay;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.LinkedList;

        specialinvoke $r1.<java.util.LinkedList: void <init>()>();

        r0.<org.apache.batik.swing.svg.SVGUpdateOverlay: java.util.List rects> = $r1;

        r0.<org.apache.batik.swing.svg.SVGUpdateOverlay: int size> = i0;

        $r2 = newarray (int)[i1];

        r0.<org.apache.batik.swing.svg.SVGUpdateOverlay: int[] counts> = $r2;

        return;
    }

    public void addRect(java.awt.Rectangle)
    {
        java.awt.Rectangle r1;
        java.util.List $r2, $r3, $r4;
        org.apache.batik.swing.svg.SVGUpdateOverlay r0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.apache.batik.swing.svg.SVGUpdateOverlay;

        r1 := @parameter0: java.awt.Rectangle;

        $r2 = r0.<org.apache.batik.swing.svg.SVGUpdateOverlay: java.util.List rects>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        $r3 = r0.<org.apache.batik.swing.svg.SVGUpdateOverlay: java.util.List rects>;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        $i1 = r0.<org.apache.batik.swing.svg.SVGUpdateOverlay: int size>;

        if $i0 <= $i1 goto label1;

        $r4 = r0.<org.apache.batik.swing.svg.SVGUpdateOverlay: java.util.List rects>;

        interfaceinvoke $r4.<java.util.List: java.lang.Object remove(int)>(0);

     label1:
        $i2 = r0.<org.apache.batik.swing.svg.SVGUpdateOverlay: int updateCount>;

        $i3 = $i2 + 1;

        r0.<org.apache.batik.swing.svg.SVGUpdateOverlay: int updateCount> = $i3;

        return;
    }

    public void endUpdate()
    {
        int[] $r1, $r2, $r3, $r4, $r6, $r7, $r8, $r9, $r10;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11, i12, $i14;
        java.util.List $r5;
        org.apache.batik.swing.svg.SVGUpdateOverlay r0;

        r0 := @this: org.apache.batik.swing.svg.SVGUpdateOverlay;

        i10 = 0;

        goto label2;

     label1:
        $r3 = r0.<org.apache.batik.swing.svg.SVGUpdateOverlay: int[] counts>;

        $r2 = r0.<org.apache.batik.swing.svg.SVGUpdateOverlay: int[] counts>;

        $i2 = i10 + 1;

        $i3 = $r2[$i2];

        $r3[i10] = $i3;

        i10 = i10 + 1;

     label2:
        $r1 = r0.<org.apache.batik.swing.svg.SVGUpdateOverlay: int[] counts>;

        $i0 = lengthof $r1;

        $i1 = $i0 - 1;

        if i10 < $i1 goto label1;

        $r4 = r0.<org.apache.batik.swing.svg.SVGUpdateOverlay: int[] counts>;

        $i4 = r0.<org.apache.batik.swing.svg.SVGUpdateOverlay: int updateCount>;

        $r4[i10] = $i4;

        r0.<org.apache.batik.swing.svg.SVGUpdateOverlay: int updateCount> = 0;

        $r5 = r0.<org.apache.batik.swing.svg.SVGUpdateOverlay: java.util.List rects>;

        i11 = interfaceinvoke $r5.<java.util.List: int size()>();

        $r6 = r0.<org.apache.batik.swing.svg.SVGUpdateOverlay: int[] counts>;

        $i5 = lengthof $r6;

        i12 = $i5 - 1;

        goto label5;

     label3:
        $r7 = r0.<org.apache.batik.swing.svg.SVGUpdateOverlay: int[] counts>;

        $i6 = $r7[i12];

        if $i6 <= i11 goto label4;

        $r9 = r0.<org.apache.batik.swing.svg.SVGUpdateOverlay: int[] counts>;

        $r9[i12] = i11;

     label4:
        $r8 = r0.<org.apache.batik.swing.svg.SVGUpdateOverlay: int[] counts>;

        $i7 = $r8[i12];

        i11 = i11 - $i7;

        $i14 = (int) -1;

        i12 = i12 + $i14;

     label5:
        if i12 >= 0 goto label3;

        $r10 = r0.<org.apache.batik.swing.svg.SVGUpdateOverlay: int[] counts>;

        $i8 = $r10[0];

        $i9 = $i8 + i11;

        $r10[0] = $i9;

        return;
    }

    public void paint(java.awt.Graphics)
    {
        java.awt.Color $r7;
        int[] $r3, $r4, $r10, $r11, $r12;
        boolean $z0;
        java.util.List $r1, $r8;
        java.awt.Graphics r9;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6;
        java.awt.Rectangle r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14, i15, i16;
        java.util.Iterator $r2;
        org.apache.batik.swing.svg.SVGUpdateOverlay r0;
        java.lang.Object $r5;

        r0 := @this: org.apache.batik.swing.svg.SVGUpdateOverlay;

        r9 := @parameter0: java.awt.Graphics;

        $r1 = r0.<org.apache.batik.swing.svg.SVGUpdateOverlay: java.util.List rects>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

        i14 = 0;

        i15 = 0;

        i16 = 0;

        goto label2;

     label1:
        i16 = i16 + 1;

     label2:
        $r3 = r0.<org.apache.batik.swing.svg.SVGUpdateOverlay: int[] counts>;

        $i0 = lengthof $r3;

        $i1 = $i0 - 1;

        if i16 >= $i1 goto label3;

        $r12 = r0.<org.apache.batik.swing.svg.SVGUpdateOverlay: int[] counts>;

        $i12 = $r12[i16];

        if 0 == $i12 goto label1;

     label3:
        $r4 = r0.<org.apache.batik.swing.svg.SVGUpdateOverlay: int[] counts>;

        $i2 = lengthof $r4;

        $i13 = $i2 - 1;

        goto label7;

     label4:
        $r5 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.awt.Rectangle) $r5;

        $r7 = new java.awt.Color;

        $i3 = $i13 - i16;

        $f1 = (float) $i3;

        $f0 = (float) $i13;

        $f3 = $f1 / $f0;

        $f2 = (float) i14;

        $f4 = $f2 + 1.0F;

        $r8 = r0.<org.apache.batik.swing.svg.SVGUpdateOverlay: java.util.List rects>;

        $i4 = interfaceinvoke $r8.<java.util.List: int size()>();

        $f5 = (float) $i4;

        $f6 = $f4 / $f5;

        specialinvoke $r7.<java.awt.Color: void <init>(float,float,float,float)>(1.0F, $f3, 0.0F, $f6);

        virtualinvoke r9.<java.awt.Graphics: void setColor(java.awt.Color)>($r7);

        $i8 = r6.<java.awt.Rectangle: int x>;

        $i7 = r6.<java.awt.Rectangle: int y>;

        $i6 = r6.<java.awt.Rectangle: int width>;

        $i5 = r6.<java.awt.Rectangle: int height>;

        virtualinvoke r9.<java.awt.Graphics: void drawRect(int,int,int,int)>($i8, $i7, $i6, $i5);

        i14 = i14 + 1;

        i15 = i15 + 1;

        goto label6;

     label5:
        i16 = i16 + 1;

        i15 = 0;

     label6:
        $r10 = r0.<org.apache.batik.swing.svg.SVGUpdateOverlay: int[] counts>;

        $i9 = lengthof $r10;

        $i10 = $i9 - 1;

        if i16 >= $i10 goto label7;

        $r11 = r0.<org.apache.batik.swing.svg.SVGUpdateOverlay: int[] counts>;

        $i11 = $r11[i16];

        if i15 == $i11 goto label5;

     label7:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label4;

        return;
    }
}
