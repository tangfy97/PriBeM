public class org.apache.batik.ext.awt.geom.PathLength$SingleSegmentPathIterator extends java.lang.Object implements java.awt.geom.PathIterator
{
    protected java.awt.geom.PathIterator it;
    protected boolean done;
    protected boolean moveDone;
    protected double x;
    protected double y;

    protected void <init>()
    {
        org.apache.batik.ext.awt.geom.PathLength$SingleSegmentPathIterator r0;

        r0 := @this: org.apache.batik.ext.awt.geom.PathLength$SingleSegmentPathIterator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void setPathIterator(java.awt.geom.PathIterator, double, double)
    {
        org.apache.batik.ext.awt.geom.PathLength$SingleSegmentPathIterator r0;
        java.awt.geom.PathIterator r1;
        double d0, d1;

        r0 := @this: org.apache.batik.ext.awt.geom.PathLength$SingleSegmentPathIterator;

        r1 := @parameter0: java.awt.geom.PathIterator;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        r0.<org.apache.batik.ext.awt.geom.PathLength$SingleSegmentPathIterator: java.awt.geom.PathIterator it> = r1;

        r0.<org.apache.batik.ext.awt.geom.PathLength$SingleSegmentPathIterator: double x> = d0;

        r0.<org.apache.batik.ext.awt.geom.PathLength$SingleSegmentPathIterator: double y> = d1;

        r0.<org.apache.batik.ext.awt.geom.PathLength$SingleSegmentPathIterator: boolean done> = 0;

        r0.<org.apache.batik.ext.awt.geom.PathLength$SingleSegmentPathIterator: boolean moveDone> = 0;

        return;
    }

    public int currentSegment(double[])
    {
        org.apache.batik.ext.awt.geom.PathLength$SingleSegmentPathIterator r0;
        double[] r1;
        int $i0;
        java.awt.geom.PathIterator $r2;
        boolean $z0;
        double $d0, $d1;

        r0 := @this: org.apache.batik.ext.awt.geom.PathLength$SingleSegmentPathIterator;

        r1 := @parameter0: double[];

        $r2 = r0.<org.apache.batik.ext.awt.geom.PathLength$SingleSegmentPathIterator: java.awt.geom.PathIterator it>;

        $i0 = interfaceinvoke $r2.<java.awt.geom.PathIterator: int currentSegment(double[])>(r1);

        $z0 = r0.<org.apache.batik.ext.awt.geom.PathLength$SingleSegmentPathIterator: boolean moveDone>;

        if $z0 != 0 goto label1;

        $d0 = r0.<org.apache.batik.ext.awt.geom.PathLength$SingleSegmentPathIterator: double x>;

        r1[0] = $d0;

        $d1 = r0.<org.apache.batik.ext.awt.geom.PathLength$SingleSegmentPathIterator: double y>;

        r1[1] = $d1;

        return 0;

     label1:
        return $i0;
    }

    public int currentSegment(float[])
    {
        org.apache.batik.ext.awt.geom.PathLength$SingleSegmentPathIterator r0;
        float[] r1;
        java.awt.geom.PathIterator $r2;
        int $i0;
        float $f0, $f1;
        boolean $z0;
        double $d0, $d1;

        r0 := @this: org.apache.batik.ext.awt.geom.PathLength$SingleSegmentPathIterator;

        r1 := @parameter0: float[];

        $r2 = r0.<org.apache.batik.ext.awt.geom.PathLength$SingleSegmentPathIterator: java.awt.geom.PathIterator it>;

        $i0 = interfaceinvoke $r2.<java.awt.geom.PathIterator: int currentSegment(float[])>(r1);

        $z0 = r0.<org.apache.batik.ext.awt.geom.PathLength$SingleSegmentPathIterator: boolean moveDone>;

        if $z0 != 0 goto label1;

        $d0 = r0.<org.apache.batik.ext.awt.geom.PathLength$SingleSegmentPathIterator: double x>;

        $f0 = (float) $d0;

        r1[0] = $f0;

        $d1 = r0.<org.apache.batik.ext.awt.geom.PathLength$SingleSegmentPathIterator: double y>;

        $f1 = (float) $d1;

        r1[1] = $f1;

        return 0;

     label1:
        return $i0;
    }

    public int getWindingRule()
    {
        int $i0;
        org.apache.batik.ext.awt.geom.PathLength$SingleSegmentPathIterator r0;
        java.awt.geom.PathIterator $r1;

        r0 := @this: org.apache.batik.ext.awt.geom.PathLength$SingleSegmentPathIterator;

        $r1 = r0.<org.apache.batik.ext.awt.geom.PathLength$SingleSegmentPathIterator: java.awt.geom.PathIterator it>;

        $i0 = interfaceinvoke $r1.<java.awt.geom.PathIterator: int getWindingRule()>();

        return $i0;
    }

    public boolean isDone()
    {
        org.apache.batik.ext.awt.geom.PathLength$SingleSegmentPathIterator r0;
        boolean $z0, $z1, $z2;
        java.awt.geom.PathIterator $r1;

        r0 := @this: org.apache.batik.ext.awt.geom.PathLength$SingleSegmentPathIterator;

        $z0 = r0.<org.apache.batik.ext.awt.geom.PathLength$SingleSegmentPathIterator: boolean done>;

        if $z0 != 0 goto label1;

        $r1 = r0.<org.apache.batik.ext.awt.geom.PathLength$SingleSegmentPathIterator: java.awt.geom.PathIterator it>;

        $z1 = interfaceinvoke $r1.<java.awt.geom.PathIterator: boolean isDone()>();

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public void next()
    {
        org.apache.batik.ext.awt.geom.PathLength$SingleSegmentPathIterator r0;
        boolean $z0, $z1;
        java.awt.geom.PathIterator $r1;

        r0 := @this: org.apache.batik.ext.awt.geom.PathLength$SingleSegmentPathIterator;

        $z0 = r0.<org.apache.batik.ext.awt.geom.PathLength$SingleSegmentPathIterator: boolean done>;

        if $z0 != 0 goto label2;

        $z1 = r0.<org.apache.batik.ext.awt.geom.PathLength$SingleSegmentPathIterator: boolean moveDone>;

        if $z1 != 0 goto label1;

        r0.<org.apache.batik.ext.awt.geom.PathLength$SingleSegmentPathIterator: boolean moveDone> = 1;

        goto label2;

     label1:
        $r1 = r0.<org.apache.batik.ext.awt.geom.PathLength$SingleSegmentPathIterator: java.awt.geom.PathIterator it>;

        interfaceinvoke $r1.<java.awt.geom.PathIterator: void next()>();

        r0.<org.apache.batik.ext.awt.geom.PathLength$SingleSegmentPathIterator: boolean done> = 1;

     label2:
        return;
    }
}
