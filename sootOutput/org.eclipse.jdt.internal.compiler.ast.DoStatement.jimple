public class org.eclipse.jdt.internal.compiler.ast.DoStatement extends org.eclipse.jdt.internal.compiler.ast.Statement
{
    public org.eclipse.jdt.internal.compiler.ast.Expression condition;
    public org.eclipse.jdt.internal.compiler.ast.Statement action;
    private org.eclipse.jdt.internal.compiler.codegen.BranchLabel breakLabel;
    private org.eclipse.jdt.internal.compiler.codegen.BranchLabel continueLabel;
    int mergedInitStateIndex;

    public void <init>(org.eclipse.jdt.internal.compiler.ast.Expression, org.eclipse.jdt.internal.compiler.ast.Statement, int, int)
    {
        org.eclipse.jdt.internal.compiler.ast.DoStatement r0;
        org.eclipse.jdt.internal.compiler.ast.Statement r2;
        org.eclipse.jdt.internal.compiler.ast.Expression r1;
        int i0, i1, $i2, $i3, $i5;
        boolean $z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.DoStatement;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.ast.Expression;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.ast.Statement;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.ast.Statement: void <init>()>();

        $i5 = (int) -1;

        r0.<org.eclipse.jdt.internal.compiler.ast.DoStatement: int mergedInitStateIndex> = $i5;

        r0.<org.eclipse.jdt.internal.compiler.ast.DoStatement: int sourceStart> = i0;

        r0.<org.eclipse.jdt.internal.compiler.ast.DoStatement: int sourceEnd> = i1;

        r0.<org.eclipse.jdt.internal.compiler.ast.DoStatement: org.eclipse.jdt.internal.compiler.ast.Expression condition> = r1;

        r0.<org.eclipse.jdt.internal.compiler.ast.DoStatement: org.eclipse.jdt.internal.compiler.ast.Statement action> = r2;

        $z0 = r2 instanceof org.eclipse.jdt.internal.compiler.ast.EmptyStatement;

        if $z0 == 0 goto label1;

        $i2 = r2.<org.eclipse.jdt.internal.compiler.ast.Statement: int bits>;

        $i3 = $i2 | 1;

        r2.<org.eclipse.jdt.internal.compiler.ast.Statement: int bits> = $i3;

     label1:
        return;
    }

    public org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.flow.FlowContext, org.eclipse.jdt.internal.compiler.flow.FlowInfo)
    {
        org.eclipse.jdt.internal.compiler.lookup.MethodScope $r46;
        org.eclipse.jdt.internal.compiler.flow.FlowContext r4;
        org.eclipse.jdt.internal.compiler.impl.Constant $r10, r31, $r33, $r34, $r35;
        org.eclipse.jdt.internal.compiler.flow.LoopingFlowContext $r3, $r39;
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r6;
        org.eclipse.jdt.internal.compiler.flow.FlowInfo r5, $r13, $r14, $r17, $r20, $r23, $r28, $r43, $r44;
        org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo $r12, $r15, $r16, $r19, $r21, $r22, $r24, $r25, $r29, $r30, $r36, r37, $r41, $r42, $r45;
        org.eclipse.jdt.internal.compiler.ast.Statement $r26, $r27, $r38, $r40;
        org.eclipse.jdt.internal.compiler.ast.Expression $r9, $r11, $r32;
        boolean z0, z1, z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        org.eclipse.jdt.internal.compiler.codegen.BranchLabel $r1, $r2, $r7, $r8, $r18;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        org.eclipse.jdt.internal.compiler.ast.DoStatement r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.DoStatement;

        r6 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r4 := @parameter1: org.eclipse.jdt.internal.compiler.flow.FlowContext;

        r5 := @parameter2: org.eclipse.jdt.internal.compiler.flow.FlowInfo;

        $r1 = new org.eclipse.jdt.internal.compiler.codegen.BranchLabel;

        specialinvoke $r1.<org.eclipse.jdt.internal.compiler.codegen.BranchLabel: void <init>()>();

        r0.<org.eclipse.jdt.internal.compiler.ast.DoStatement: org.eclipse.jdt.internal.compiler.codegen.BranchLabel breakLabel> = $r1;

        $r2 = new org.eclipse.jdt.internal.compiler.codegen.BranchLabel;

        specialinvoke $r2.<org.eclipse.jdt.internal.compiler.codegen.BranchLabel: void <init>()>();

        r0.<org.eclipse.jdt.internal.compiler.ast.DoStatement: org.eclipse.jdt.internal.compiler.codegen.BranchLabel continueLabel> = $r2;

        $r3 = new org.eclipse.jdt.internal.compiler.flow.LoopingFlowContext;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.ast.DoStatement: org.eclipse.jdt.internal.compiler.codegen.BranchLabel breakLabel>;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.ast.DoStatement: org.eclipse.jdt.internal.compiler.codegen.BranchLabel continueLabel>;

        specialinvoke $r3.<org.eclipse.jdt.internal.compiler.flow.LoopingFlowContext: void <init>(org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo,org.eclipse.jdt.internal.compiler.ast.ASTNode,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,org.eclipse.jdt.internal.compiler.lookup.Scope)>(r4, r5, r0, $r8, $r7, r6);

        $r9 = r0.<org.eclipse.jdt.internal.compiler.ast.DoStatement: org.eclipse.jdt.internal.compiler.ast.Expression condition>;

        r31 = $r9.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $r10 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        if r31 == $r10 goto label01;

        $z6 = virtualinvoke r31.<org.eclipse.jdt.internal.compiler.impl.Constant: boolean booleanValue()>();

        if $z6 == 0 goto label01;

        $z7 = 1;

        goto label02;

     label01:
        $z7 = 0;

     label02:
        z0 = $z7;

        $r32 = r0.<org.eclipse.jdt.internal.compiler.ast.DoStatement: org.eclipse.jdt.internal.compiler.ast.Expression condition>;

        $r33 = virtualinvoke $r32.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant optimizedBooleanConstant()>();

        $r34 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        if $r33 == $r34 goto label03;

        $z5 = virtualinvoke $r33.<org.eclipse.jdt.internal.compiler.impl.Constant: boolean booleanValue()>();

        if $z5 == 0 goto label03;

        $z8 = 1;

        goto label04;

     label03:
        $z8 = 0;

     label04:
        z1 = $z8;

        $r35 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        if $r33 == $r35 goto label05;

        $z4 = virtualinvoke $r33.<org.eclipse.jdt.internal.compiler.impl.Constant: boolean booleanValue()>();

        if $z4 != 0 goto label05;

        $z9 = 1;

        goto label06;

     label05:
        $z9 = 0;

     label06:
        z2 = $z9;

        $i6 = virtualinvoke r5.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: int reachMode()>();

        $r36 = virtualinvoke r5.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo nullInfoLessUnconditionalCopy()>();

        r37 = $r36;

        $r38 = r0.<org.eclipse.jdt.internal.compiler.ast.DoStatement: org.eclipse.jdt.internal.compiler.ast.Statement action>;

        if $r38 == null goto label07;

        $r26 = r0.<org.eclipse.jdt.internal.compiler.ast.DoStatement: org.eclipse.jdt.internal.compiler.ast.Statement action>;

        $z3 = virtualinvoke $r26.<org.eclipse.jdt.internal.compiler.ast.Statement: boolean isEmptyBlock()>();

        if $z3 != 0 goto label07;

        $r27 = r0.<org.eclipse.jdt.internal.compiler.ast.DoStatement: org.eclipse.jdt.internal.compiler.ast.Statement action>;

        $r28 = virtualinvoke $r27.<org.eclipse.jdt.internal.compiler.ast.Statement: org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>(r6, $r3, $r36);

        $r29 = virtualinvoke $r28.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo unconditionalInits()>();

        r37 = $r29;

        $i3 = $r29.<org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo: int tagBits>;

        $r30 = $r3.<org.eclipse.jdt.internal.compiler.flow.LoopingFlowContext: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo initsOnContinue>;

        $i2 = $r30.<org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo: int tagBits>;

        $i4 = $i3 & $i2;

        $i5 = $i4 & 1;

        if $i5 == 0 goto label07;

        r0.<org.eclipse.jdt.internal.compiler.ast.DoStatement: org.eclipse.jdt.internal.compiler.codegen.BranchLabel continueLabel> = null;

     label07:
        virtualinvoke r37.<org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo: org.eclipse.jdt.internal.compiler.flow.FlowInfo setReachMode(int)>($i6);

        $r11 = r0.<org.eclipse.jdt.internal.compiler.ast.DoStatement: org.eclipse.jdt.internal.compiler.ast.Expression condition>;

        $r39 = new org.eclipse.jdt.internal.compiler.flow.LoopingFlowContext;

        specialinvoke $r39.<org.eclipse.jdt.internal.compiler.flow.LoopingFlowContext: void <init>(org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo,org.eclipse.jdt.internal.compiler.ast.ASTNode,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,org.eclipse.jdt.internal.compiler.lookup.Scope)>(r4, r5, r0, null, null, r6);

        $r40 = r0.<org.eclipse.jdt.internal.compiler.ast.DoStatement: org.eclipse.jdt.internal.compiler.ast.Statement action>;

        if $r40 != null goto label08;

        $r41 = r37;

        goto label09;

     label08:
        $r12 = $r3.<org.eclipse.jdt.internal.compiler.flow.LoopingFlowContext: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo initsOnContinue>;

        $r41 = virtualinvoke r37.<org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo mergedWith(org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo)>($r12);

     label09:
        $r13 = virtualinvoke $r41.<org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo: org.eclipse.jdt.internal.compiler.flow.FlowInfo copy()>();

        $r14 = virtualinvoke $r11.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>(r6, $r39, $r13);

        if z2 != 0 goto label10;

        $r18 = r0.<org.eclipse.jdt.internal.compiler.ast.DoStatement: org.eclipse.jdt.internal.compiler.codegen.BranchLabel continueLabel>;

        if $r18 == null goto label10;

        virtualinvoke $r3.<org.eclipse.jdt.internal.compiler.flow.LoopingFlowContext: void complainOnDeferredFinalChecks(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>(r6, $r14);

        virtualinvoke $r39.<org.eclipse.jdt.internal.compiler.flow.LoopingFlowContext: void complainOnDeferredFinalChecks(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>(r6, $r14);

        $r19 = virtualinvoke r5.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo unconditionalCopy()>();

        $r20 = virtualinvoke $r14.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.FlowInfo initsWhenTrue()>();

        $r21 = virtualinvoke $r20.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo unconditionalInits()>();

        $r22 = virtualinvoke $r19.<org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo addPotentialNullInfoFrom(org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo)>($r21);

        virtualinvoke $r3.<org.eclipse.jdt.internal.compiler.flow.LoopingFlowContext: void complainOnDeferredNullChecks(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>(r6, $r22);

        $r23 = virtualinvoke $r14.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.FlowInfo initsWhenTrue()>();

        $r24 = virtualinvoke $r23.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo unconditionalInits()>();

        $r25 = virtualinvoke r37.<org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo addPotentialNullInfoFrom(org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo)>($r24);

        virtualinvoke $r39.<org.eclipse.jdt.internal.compiler.flow.LoopingFlowContext: void complainOnDeferredNullChecks(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>(r6, $r25);

     label10:
        $r42 = $r3.<org.eclipse.jdt.internal.compiler.flow.LoopingFlowContext: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo initsOnBreak>;

        $i7 = $r42.<org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo: int tagBits>;

        $i8 = $i7 & 1;

        if $i8 == 0 goto label11;

        $r43 = $r3.<org.eclipse.jdt.internal.compiler.flow.LoopingFlowContext: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo initsOnBreak>;

        goto label12;

     label11:
        $r15 = virtualinvoke r5.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo unconditionalCopy()>();

        $r16 = $r3.<org.eclipse.jdt.internal.compiler.flow.LoopingFlowContext: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo initsOnBreak>;

        $r43 = virtualinvoke $r15.<org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo: org.eclipse.jdt.internal.compiler.flow.FlowInfo addInitializationsFrom(org.eclipse.jdt.internal.compiler.flow.FlowInfo)>($r16);

     label12:
        $i0 = $r14.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: int tagBits>;

        $i1 = $i0 & 1;

        if $i1 != 0 goto label13;

        $r17 = virtualinvoke $r14.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.FlowInfo initsWhenFalse()>();

        $r44 = virtualinvoke r5.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.FlowInfo addInitializationsFrom(org.eclipse.jdt.internal.compiler.flow.FlowInfo)>($r17);

        goto label14;

     label13:
        $r44 = $r14;

     label14:
        if z0 == 0 goto label15;

        $z10 = 0;

        goto label16;

     label15:
        $z10 = 1;

     label16:
        $r45 = staticinvoke <org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo mergedOptimizedBranches(org.eclipse.jdt.internal.compiler.flow.FlowInfo,boolean,org.eclipse.jdt.internal.compiler.flow.FlowInfo,boolean,boolean)>($r43, z1, $r44, 0, $z10);

        $r46 = virtualinvoke r6.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.lookup.MethodScope methodScope()>();

        $i9 = virtualinvoke $r46.<org.eclipse.jdt.internal.compiler.lookup.MethodScope: int recordInitializationStates(org.eclipse.jdt.internal.compiler.flow.FlowInfo)>($r45);

        r0.<org.eclipse.jdt.internal.compiler.ast.DoStatement: int mergedInitStateIndex> = $i9;

        return $r45;
    }

    public void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.codegen.CodeStream)
    {
        org.eclipse.jdt.internal.compiler.ast.Statement $r3, $r6, $r16;
        org.eclipse.jdt.internal.compiler.ast.Expression $r7, $r13, $r14;
        boolean z0, $z1, $z3, $z4, $z5;
        org.eclipse.jdt.internal.compiler.impl.Constant $r8, $r9;
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r12;
        org.eclipse.jdt.internal.compiler.codegen.BranchLabel $r4, $r5, $r10, $r11, $r15, $r17, $r18;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11;
        org.eclipse.jdt.internal.compiler.ast.DoStatement r0;
        org.eclipse.jdt.internal.compiler.codegen.CodeStream r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.DoStatement;

        r12 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r1 := @parameter1: org.eclipse.jdt.internal.compiler.codegen.CodeStream;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.ast.DoStatement: int bits>;

        $i1 = $i0 & -2147483648;

        if $i1 != 0 goto label01;

        return;

     label01:
        i2 = r1.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: int position>;

        $r18 = new org.eclipse.jdt.internal.compiler.codegen.BranchLabel;

        specialinvoke $r18.<org.eclipse.jdt.internal.compiler.codegen.BranchLabel: void <init>(org.eclipse.jdt.internal.compiler.codegen.CodeStream)>(r1);

        $r3 = r0.<org.eclipse.jdt.internal.compiler.ast.DoStatement: org.eclipse.jdt.internal.compiler.ast.Statement action>;

        if $r3 == null goto label02;

        $i7 = $r18.<org.eclipse.jdt.internal.compiler.codegen.BranchLabel: int tagBits>;

        $i8 = $i7 | 2;

        $r18.<org.eclipse.jdt.internal.compiler.codegen.BranchLabel: int tagBits> = $i8;

     label02:
        virtualinvoke $r18.<org.eclipse.jdt.internal.compiler.codegen.BranchLabel: void place()>();

        $r4 = r0.<org.eclipse.jdt.internal.compiler.ast.DoStatement: org.eclipse.jdt.internal.compiler.codegen.BranchLabel breakLabel>;

        virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.codegen.BranchLabel: void initialize(org.eclipse.jdt.internal.compiler.codegen.CodeStream)>(r1);

        $r5 = r0.<org.eclipse.jdt.internal.compiler.ast.DoStatement: org.eclipse.jdt.internal.compiler.codegen.BranchLabel continueLabel>;

        if $r5 == null goto label03;

        $z5 = 1;

        $z4 = 1;

        goto label04;

     label03:
        $z5 = 0;

        $z4 = 0;

     label04:
        z0 = $z4;

        if $z5 == 0 goto label05;

        $r17 = r0.<org.eclipse.jdt.internal.compiler.ast.DoStatement: org.eclipse.jdt.internal.compiler.codegen.BranchLabel continueLabel>;

        virtualinvoke $r17.<org.eclipse.jdt.internal.compiler.codegen.BranchLabel: void initialize(org.eclipse.jdt.internal.compiler.codegen.CodeStream)>(r1);

     label05:
        $r6 = r0.<org.eclipse.jdt.internal.compiler.ast.DoStatement: org.eclipse.jdt.internal.compiler.ast.Statement action>;

        if $r6 == null goto label06;

        $r16 = r0.<org.eclipse.jdt.internal.compiler.ast.DoStatement: org.eclipse.jdt.internal.compiler.ast.Statement action>;

        virtualinvoke $r16.<org.eclipse.jdt.internal.compiler.ast.Statement: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream)>(r12, r1);

     label06:
        if z0 == 0 goto label07;

        $r15 = r0.<org.eclipse.jdt.internal.compiler.ast.DoStatement: org.eclipse.jdt.internal.compiler.codegen.BranchLabel continueLabel>;

        virtualinvoke $r15.<org.eclipse.jdt.internal.compiler.codegen.BranchLabel: void place()>();

     label07:
        $r7 = r0.<org.eclipse.jdt.internal.compiler.ast.DoStatement: org.eclipse.jdt.internal.compiler.ast.Expression condition>;

        $r8 = virtualinvoke $r7.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant optimizedBooleanConstant()>();

        $r9 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        if $r8 == $r9 goto label08;

        $z1 = virtualinvoke $r8.<org.eclipse.jdt.internal.compiler.impl.Constant: boolean booleanValue()>();

        if $z1 != 0 goto label08;

        $z3 = 1;

        goto label09;

     label08:
        $z3 = 0;

     label09:
        if $z3 == 0 goto label10;

        $r14 = r0.<org.eclipse.jdt.internal.compiler.ast.DoStatement: org.eclipse.jdt.internal.compiler.ast.Expression condition>;

        virtualinvoke $r14.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r12, r1, 0);

        goto label11;

     label10:
        if z0 == 0 goto label11;

        $r13 = r0.<org.eclipse.jdt.internal.compiler.ast.DoStatement: org.eclipse.jdt.internal.compiler.ast.Expression condition>;

        virtualinvoke $r13.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateOptimizedBoolean(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,boolean)>(r12, r1, $r18, null, 1);

     label11:
        $i9 = r0.<org.eclipse.jdt.internal.compiler.ast.DoStatement: int mergedInitStateIndex>;

        $i11 = (int) -1;

        if $i9 == $i11 goto label12;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.ast.DoStatement: int mergedInitStateIndex>;

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void removeNotDefinitelyAssignedVariables(org.eclipse.jdt.internal.compiler.lookup.Scope,int)>(r12, $i5);

        $i6 = r0.<org.eclipse.jdt.internal.compiler.ast.DoStatement: int mergedInitStateIndex>;

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void addDefinitelyAssignedVariables(org.eclipse.jdt.internal.compiler.lookup.Scope,int)>(r12, $i6);

     label12:
        $r10 = r0.<org.eclipse.jdt.internal.compiler.ast.DoStatement: org.eclipse.jdt.internal.compiler.codegen.BranchLabel breakLabel>;

        $i3 = virtualinvoke $r10.<org.eclipse.jdt.internal.compiler.codegen.BranchLabel: int forwardReferenceCount()>();

        if $i3 <= 0 goto label13;

        $r11 = r0.<org.eclipse.jdt.internal.compiler.ast.DoStatement: org.eclipse.jdt.internal.compiler.codegen.BranchLabel breakLabel>;

        virtualinvoke $r11.<org.eclipse.jdt.internal.compiler.codegen.BranchLabel: void place()>();

     label13:
        $i4 = r0.<org.eclipse.jdt.internal.compiler.ast.DoStatement: int sourceStart>;

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void recordPositionsFrom(int,int)>(i2, $i4);

        return;
    }

    public java.lang.StringBuffer printStatement(int, java.lang.StringBuffer)
    {
        org.eclipse.jdt.internal.compiler.ast.DoStatement r2;
        org.eclipse.jdt.internal.compiler.ast.Statement $r3, $r4;
        org.eclipse.jdt.internal.compiler.ast.Expression $r6;
        java.lang.StringBuffer r0, $r1, $r5, $r7, $r8;
        int i0, $i1;

        r2 := @this: org.eclipse.jdt.internal.compiler.ast.DoStatement;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.StringBuffer;

        $r1 = staticinvoke <org.eclipse.jdt.internal.compiler.ast.DoStatement: java.lang.StringBuffer printIndent(int,java.lang.StringBuffer)>(i0, r0);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("do");

        $r3 = r2.<org.eclipse.jdt.internal.compiler.ast.DoStatement: org.eclipse.jdt.internal.compiler.ast.Statement action>;

        if $r3 != null goto label1;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ;\n");

        goto label2;

     label1:
        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

        $r4 = r2.<org.eclipse.jdt.internal.compiler.ast.DoStatement: org.eclipse.jdt.internal.compiler.ast.Statement action>;

        $i1 = i0 + 1;

        $r5 = virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.ast.Statement: java.lang.StringBuffer printStatement(int,java.lang.StringBuffer)>($i1, r0);

        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

     label2:
        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("while (");

        $r6 = r2.<org.eclipse.jdt.internal.compiler.ast.DoStatement: org.eclipse.jdt.internal.compiler.ast.Expression condition>;

        $r7 = virtualinvoke $r6.<org.eclipse.jdt.internal.compiler.ast.Expression: java.lang.StringBuffer printExpression(int,java.lang.StringBuffer)>(0, r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(");");

        return $r8;
    }

    public void resolve(org.eclipse.jdt.internal.compiler.lookup.BlockScope)
    {
        org.eclipse.jdt.internal.compiler.ast.DoStatement r0;
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r1;
        org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding $r2;
        org.eclipse.jdt.internal.compiler.ast.Statement $r6, $r7;
        org.eclipse.jdt.internal.compiler.ast.Expression $r3, $r5;
        org.eclipse.jdt.internal.compiler.lookup.TypeBinding $r4;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.DoStatement;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.ast.DoStatement: org.eclipse.jdt.internal.compiler.ast.Expression condition>;

        $r2 = <org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding BOOLEAN>;

        $r4 = virtualinvoke $r3.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolveTypeExpecting(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>(r1, $r2);

        $r5 = r0.<org.eclipse.jdt.internal.compiler.ast.DoStatement: org.eclipse.jdt.internal.compiler.ast.Expression condition>;

        virtualinvoke $r5.<org.eclipse.jdt.internal.compiler.ast.Expression: void computeConversion(org.eclipse.jdt.internal.compiler.lookup.Scope,org.eclipse.jdt.internal.compiler.lookup.TypeBinding,org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>(r1, $r4, $r4);

        $r6 = r0.<org.eclipse.jdt.internal.compiler.ast.DoStatement: org.eclipse.jdt.internal.compiler.ast.Statement action>;

        if $r6 == null goto label1;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.ast.DoStatement: org.eclipse.jdt.internal.compiler.ast.Statement action>;

        virtualinvoke $r7.<org.eclipse.jdt.internal.compiler.ast.Statement: void resolve(org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r1);

     label1:
        return;
    }

    public void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor, org.eclipse.jdt.internal.compiler.lookup.BlockScope)
    {
        org.eclipse.jdt.internal.compiler.ASTVisitor r0;
        org.eclipse.jdt.internal.compiler.ast.DoStatement r1;
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r2;
        org.eclipse.jdt.internal.compiler.ast.Statement $r3, $r5;
        org.eclipse.jdt.internal.compiler.ast.Expression $r4;
        boolean $z0;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.DoStatement;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.ASTVisitor;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        $z0 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: boolean visit(org.eclipse.jdt.internal.compiler.ast.DoStatement,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r1, r2);

        if $z0 == 0 goto label2;

        $r3 = r1.<org.eclipse.jdt.internal.compiler.ast.DoStatement: org.eclipse.jdt.internal.compiler.ast.Statement action>;

        if $r3 == null goto label1;

        $r5 = r1.<org.eclipse.jdt.internal.compiler.ast.DoStatement: org.eclipse.jdt.internal.compiler.ast.Statement action>;

        virtualinvoke $r5.<org.eclipse.jdt.internal.compiler.ast.Statement: void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r0, r2);

     label1:
        $r4 = r1.<org.eclipse.jdt.internal.compiler.ast.DoStatement: org.eclipse.jdt.internal.compiler.ast.Expression condition>;

        virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.ast.Expression: void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r0, r2);

     label2:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: void endVisit(org.eclipse.jdt.internal.compiler.ast.DoStatement,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r1, r2);

        return;
    }
}
