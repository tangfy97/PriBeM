public abstract class kodkod.ast.visitor.AbstractCollector extends java.lang.Object implements kodkod.ast.visitor.ReturnVisitor
{
    protected final java.util.Map cache;
    protected final java.util.Set cached;
    private static int[] $SWITCH_TABLE$kodkod$ast$RelationPredicate$Name;

    protected void <init>(java.util.Set)
    {
        java.util.IdentityHashMap $r2;
        int $i0;
        java.util.Set r1;
        kodkod.ast.visitor.AbstractCollector r0;

        r0 := @this: kodkod.ast.visitor.AbstractCollector;

        r1 := @parameter0: java.util.Set;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set cached> = r1;

        $r2 = new java.util.IdentityHashMap;

        $i0 = interfaceinvoke r1.<java.util.Set: int size()>();

        specialinvoke $r2.<java.util.IdentityHashMap: void <init>(int)>($i0);

        r0.<kodkod.ast.visitor.AbstractCollector: java.util.Map cache> = $r2;

        return;
    }

    protected void <init>(java.util.Set, java.util.Map)
    {
        java.util.Set r1;
        kodkod.ast.visitor.AbstractCollector r0;
        java.util.Map r2;

        r0 := @this: kodkod.ast.visitor.AbstractCollector;

        r1 := @parameter0: java.util.Set;

        r2 := @parameter1: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set cached> = r1;

        r0.<kodkod.ast.visitor.AbstractCollector: java.util.Map cache> = r2;

        return;
    }

    protected java.util.Set lookup(kodkod.ast.Node)
    {
        java.util.Map $r2;
        java.util.Set $r4;
        java.lang.Object $r3;
        kodkod.ast.visitor.AbstractCollector r0;
        kodkod.ast.Node r1;

        r0 := @this: kodkod.ast.visitor.AbstractCollector;

        r1 := @parameter0: kodkod.ast.Node;

        $r2 = r0.<kodkod.ast.visitor.AbstractCollector: java.util.Map cache>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.util.Set) $r3;

        return $r4;
    }

    protected java.util.Set cache(kodkod.ast.Node, java.util.Set)
    {
        java.util.Map $r4;
        java.util.Set $r2, r3, $r5;
        kodkod.ast.visitor.AbstractCollector r0;
        kodkod.ast.Node r1;
        boolean $z0;

        r0 := @this: kodkod.ast.visitor.AbstractCollector;

        r1 := @parameter0: kodkod.ast.Node;

        r3 := @parameter1: java.util.Set;

        $r2 = r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set cached>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r4 = r0.<kodkod.ast.visitor.AbstractCollector: java.util.Map cache>;

        $r5 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set reduce(java.util.Set)>(r3);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r5);

     label1:
        return r3;
    }

    protected java.util.Set reduce(java.util.Set)
    {
        java.util.Iterator $r1;
        int $i0;
        java.util.Set r0, $r3, $r4;
        java.lang.Object $r2;
        kodkod.ast.visitor.AbstractCollector r5;

        r5 := @this: kodkod.ast.visitor.AbstractCollector;

        r0 := @parameter0: java.util.Set;

        $i0 = interfaceinvoke r0.<java.util.Set: int size()>();

        tableswitch($i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            default: goto label3;
        };

     label1:
        $r4 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();

        return $r4;

     label2:
        $r1 = interfaceinvoke r0.<java.util.Set: java.util.Iterator iterator()>();

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r3 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>($r2);

        return $r3;

     label3:
        return r0;
    }

    protected abstract java.util.Set newSet();

    public java.util.Set visit(kodkod.ast.Decls)
    {
        java.util.Iterator $r4;
        java.util.Collection $r8;
        java.util.Set $r2, $r3, $r9;
        kodkod.ast.Decl r6;
        kodkod.ast.Decls r1;
        java.lang.Object $r5, $r7;
        kodkod.ast.visitor.AbstractCollector r0;
        boolean $z0;

        r0 := @this: kodkod.ast.visitor.AbstractCollector;

        r1 := @parameter0: kodkod.ast.Decls;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set lookup(kodkod.ast.Node)>(r1);

        if $r2 == null goto label1;

        return $r2;

     label1:
        $r3 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set newSet()>();

        $r4 = virtualinvoke r1.<kodkod.ast.Decls: java.util.Iterator iterator()>();

        goto label3;

     label2:
        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (kodkod.ast.Decl) $r5;

        $r7 = virtualinvoke r6.<kodkod.ast.Decl: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r8 = (java.util.Collection) $r7;

        interfaceinvoke $r3.<java.util.Set: boolean addAll(java.util.Collection)>($r8);

     label3:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        $r9 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set cache(kodkod.ast.Node,java.util.Set)>(r1, $r3);

        return $r9;
    }

    public java.util.Set visit(kodkod.ast.Decl)
    {
        java.util.Collection $r6, $r9;
        kodkod.ast.Decl r1;
        java.util.Set $r2, $r3, $r10;
        kodkod.ast.Expression $r7;
        kodkod.ast.Variable $r4;
        java.lang.Object $r5, $r8;
        kodkod.ast.visitor.AbstractCollector r0;

        r0 := @this: kodkod.ast.visitor.AbstractCollector;

        r1 := @parameter0: kodkod.ast.Decl;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set lookup(kodkod.ast.Node)>(r1);

        if $r2 == null goto label1;

        return $r2;

     label1:
        $r3 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set newSet()>();

        $r4 = virtualinvoke r1.<kodkod.ast.Decl: kodkod.ast.Variable variable()>();

        $r5 = virtualinvoke $r4.<kodkod.ast.Variable: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r6 = (java.util.Collection) $r5;

        interfaceinvoke $r3.<java.util.Set: boolean addAll(java.util.Collection)>($r6);

        $r7 = virtualinvoke r1.<kodkod.ast.Decl: kodkod.ast.Expression expression()>();

        $r8 = virtualinvoke $r7.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r9 = (java.util.Collection) $r8;

        interfaceinvoke $r3.<java.util.Set: boolean addAll(java.util.Collection)>($r9);

        $r10 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set cache(kodkod.ast.Node,java.util.Set)>(r1, $r3);

        return $r10;
    }

    public java.util.Set visit(kodkod.ast.Relation)
    {
        java.util.Set $r0;
        kodkod.ast.visitor.AbstractCollector r1;
        kodkod.ast.Relation r2;

        r1 := @this: kodkod.ast.visitor.AbstractCollector;

        r2 := @parameter0: kodkod.ast.Relation;

        $r0 = <java.util.Collections: java.util.Set EMPTY_SET>;

        return $r0;
    }

    public java.util.Set visit(kodkod.ast.Variable)
    {
        java.util.Set $r0;
        kodkod.ast.visitor.AbstractCollector r1;
        kodkod.ast.Variable r2;

        r1 := @this: kodkod.ast.visitor.AbstractCollector;

        r2 := @parameter0: kodkod.ast.Variable;

        $r0 = <java.util.Collections: java.util.Set EMPTY_SET>;

        return $r0;
    }

    public java.util.Set visit(kodkod.ast.ConstantExpression)
    {
        kodkod.ast.ConstantExpression r2;
        java.util.Set $r0;
        kodkod.ast.visitor.AbstractCollector r1;

        r1 := @this: kodkod.ast.visitor.AbstractCollector;

        r2 := @parameter0: kodkod.ast.ConstantExpression;

        $r0 = <java.util.Collections: java.util.Set EMPTY_SET>;

        return $r0;
    }

    public java.util.Set visit(kodkod.ast.NaryExpression)
    {
        java.util.Iterator $r4;
        java.util.Collection $r8;
        java.util.Set $r2, $r3, $r9;
        kodkod.ast.Expression r6;
        kodkod.ast.NaryExpression r1;
        java.lang.Object $r5, $r7;
        kodkod.ast.visitor.AbstractCollector r0;
        boolean $z0;

        r0 := @this: kodkod.ast.visitor.AbstractCollector;

        r1 := @parameter0: kodkod.ast.NaryExpression;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set lookup(kodkod.ast.Node)>(r1);

        if $r2 == null goto label1;

        return $r2;

     label1:
        $r3 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set newSet()>();

        $r4 = virtualinvoke r1.<kodkod.ast.NaryExpression: java.util.Iterator iterator()>();

        goto label3;

     label2:
        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (kodkod.ast.Expression) $r5;

        $r7 = virtualinvoke r6.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r8 = (java.util.Collection) $r7;

        interfaceinvoke $r3.<java.util.Set: boolean addAll(java.util.Collection)>($r8);

     label3:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        $r9 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set cache(kodkod.ast.Node,java.util.Set)>(r1, $r3);

        return $r9;
    }

    public java.util.Set visit(kodkod.ast.BinaryExpression)
    {
        java.util.Collection $r6, $r9;
        java.util.Set $r2, $r3, $r10;
        kodkod.ast.Expression $r4, $r7;
        kodkod.ast.BinaryExpression r1;
        java.lang.Object $r5, $r8;
        kodkod.ast.visitor.AbstractCollector r0;

        r0 := @this: kodkod.ast.visitor.AbstractCollector;

        r1 := @parameter0: kodkod.ast.BinaryExpression;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set lookup(kodkod.ast.Node)>(r1);

        if $r2 == null goto label1;

        return $r2;

     label1:
        $r3 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set newSet()>();

        $r4 = virtualinvoke r1.<kodkod.ast.BinaryExpression: kodkod.ast.Expression left()>();

        $r5 = virtualinvoke $r4.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r6 = (java.util.Collection) $r5;

        interfaceinvoke $r3.<java.util.Set: boolean addAll(java.util.Collection)>($r6);

        $r7 = virtualinvoke r1.<kodkod.ast.BinaryExpression: kodkod.ast.Expression right()>();

        $r8 = virtualinvoke $r7.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r9 = (java.util.Collection) $r8;

        interfaceinvoke $r3.<java.util.Set: boolean addAll(java.util.Collection)>($r9);

        $r10 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set cache(kodkod.ast.Node,java.util.Set)>(r1, $r3);

        return $r10;
    }

    public java.util.Set visit(kodkod.ast.UnaryExpression)
    {
        java.util.Collection $r6;
        java.util.Set $r2, $r3, $r7;
        kodkod.ast.Expression $r4;
        kodkod.ast.UnaryExpression r1;
        java.lang.Object $r5;
        kodkod.ast.visitor.AbstractCollector r0;

        r0 := @this: kodkod.ast.visitor.AbstractCollector;

        r1 := @parameter0: kodkod.ast.UnaryExpression;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set lookup(kodkod.ast.Node)>(r1);

        if $r2 == null goto label1;

        return $r2;

     label1:
        $r3 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set newSet()>();

        $r4 = virtualinvoke r1.<kodkod.ast.UnaryExpression: kodkod.ast.Expression expression()>();

        $r5 = virtualinvoke $r4.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r6 = (java.util.Collection) $r5;

        interfaceinvoke $r3.<java.util.Set: boolean addAll(java.util.Collection)>($r6);

        $r7 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set cache(kodkod.ast.Node,java.util.Set)>(r1, $r3);

        return $r7;
    }

    public java.util.Set visit(kodkod.ast.Comprehension)
    {
        java.util.Collection $r6, $r9;
        kodkod.ast.Formula $r7;
        java.util.Set $r2, $r3, $r10;
        kodkod.ast.Decls $r4;
        java.lang.Object $r5, $r8;
        kodkod.ast.visitor.AbstractCollector r0;
        kodkod.ast.Comprehension r1;

        r0 := @this: kodkod.ast.visitor.AbstractCollector;

        r1 := @parameter0: kodkod.ast.Comprehension;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set lookup(kodkod.ast.Node)>(r1);

        if $r2 == null goto label1;

        return $r2;

     label1:
        $r3 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set newSet()>();

        $r4 = virtualinvoke r1.<kodkod.ast.Comprehension: kodkod.ast.Decls decls()>();

        $r5 = virtualinvoke $r4.<kodkod.ast.Decls: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r6 = (java.util.Collection) $r5;

        interfaceinvoke $r3.<java.util.Set: boolean addAll(java.util.Collection)>($r6);

        $r7 = virtualinvoke r1.<kodkod.ast.Comprehension: kodkod.ast.Formula formula()>();

        $r8 = virtualinvoke $r7.<kodkod.ast.Formula: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r9 = (java.util.Collection) $r8;

        interfaceinvoke $r3.<java.util.Set: boolean addAll(java.util.Collection)>($r9);

        $r10 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set cache(kodkod.ast.Node,java.util.Set)>(r1, $r3);

        return $r10;
    }

    public java.util.Set visit(kodkod.ast.IfExpression)
    {
        kodkod.ast.Formula $r4;
        java.util.Collection $r6, $r9, $r12;
        java.util.Set $r2, $r3, $r13;
        kodkod.ast.Expression $r7, $r10;
        java.lang.Object $r5, $r8, $r11;
        kodkod.ast.visitor.AbstractCollector r0;
        kodkod.ast.IfExpression r1;

        r0 := @this: kodkod.ast.visitor.AbstractCollector;

        r1 := @parameter0: kodkod.ast.IfExpression;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set lookup(kodkod.ast.Node)>(r1);

        if $r2 == null goto label1;

        return $r2;

     label1:
        $r3 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set newSet()>();

        $r4 = virtualinvoke r1.<kodkod.ast.IfExpression: kodkod.ast.Formula condition()>();

        $r5 = virtualinvoke $r4.<kodkod.ast.Formula: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r6 = (java.util.Collection) $r5;

        interfaceinvoke $r3.<java.util.Set: boolean addAll(java.util.Collection)>($r6);

        $r7 = virtualinvoke r1.<kodkod.ast.IfExpression: kodkod.ast.Expression thenExpr()>();

        $r8 = virtualinvoke $r7.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r9 = (java.util.Collection) $r8;

        interfaceinvoke $r3.<java.util.Set: boolean addAll(java.util.Collection)>($r9);

        $r10 = virtualinvoke r1.<kodkod.ast.IfExpression: kodkod.ast.Expression elseExpr()>();

        $r11 = virtualinvoke $r10.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r12 = (java.util.Collection) $r11;

        interfaceinvoke $r3.<java.util.Set: boolean addAll(java.util.Collection)>($r12);

        $r13 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set cache(kodkod.ast.Node,java.util.Set)>(r1, $r3);

        return $r13;
    }

    public java.util.Set visit(kodkod.ast.ProjectExpression)
    {
        kodkod.ast.ProjectExpression r1;
        kodkod.ast.IntExpression $r7;
        java.util.Collection $r6, $r9;
        java.util.Set $r2, $r3, $r10;
        kodkod.ast.Expression $r4;
        int $i0, i1;
        java.lang.Object $r5, $r8;
        kodkod.ast.visitor.AbstractCollector r0;

        r0 := @this: kodkod.ast.visitor.AbstractCollector;

        r1 := @parameter0: kodkod.ast.ProjectExpression;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set lookup(kodkod.ast.Node)>(r1);

        if $r2 == null goto label1;

        return $r2;

     label1:
        $r3 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set newSet()>();

        $r4 = virtualinvoke r1.<kodkod.ast.ProjectExpression: kodkod.ast.Expression expression()>();

        $r5 = virtualinvoke $r4.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r6 = (java.util.Collection) $r5;

        interfaceinvoke $r3.<java.util.Set: boolean addAll(java.util.Collection)>($r6);

        i1 = 0;

        $i0 = virtualinvoke r1.<kodkod.ast.ProjectExpression: int arity()>();

        goto label3;

     label2:
        $r7 = virtualinvoke r1.<kodkod.ast.ProjectExpression: kodkod.ast.IntExpression column(int)>(i1);

        $r8 = virtualinvoke $r7.<kodkod.ast.IntExpression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r9 = (java.util.Collection) $r8;

        interfaceinvoke $r3.<java.util.Set: boolean addAll(java.util.Collection)>($r9);

        i1 = i1 + 1;

     label3:
        if i1 < $i0 goto label2;

        $r10 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set cache(kodkod.ast.Node,java.util.Set)>(r1, $r3);

        return $r10;
    }

    public java.util.Set visit(kodkod.ast.IntToExprCast)
    {
        kodkod.ast.IntExpression $r4;
        java.util.Collection $r6;
        java.util.Set $r2, $r3, $r7;
        kodkod.ast.IntToExprCast r1;
        java.lang.Object $r5;
        kodkod.ast.visitor.AbstractCollector r0;

        r0 := @this: kodkod.ast.visitor.AbstractCollector;

        r1 := @parameter0: kodkod.ast.IntToExprCast;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set lookup(kodkod.ast.Node)>(r1);

        if $r2 == null goto label1;

        return $r2;

     label1:
        $r3 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set newSet()>();

        $r4 = virtualinvoke r1.<kodkod.ast.IntToExprCast: kodkod.ast.IntExpression intExpr()>();

        $r5 = virtualinvoke $r4.<kodkod.ast.IntExpression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r6 = (java.util.Collection) $r5;

        interfaceinvoke $r3.<java.util.Set: boolean addAll(java.util.Collection)>($r6);

        $r7 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set cache(kodkod.ast.Node,java.util.Set)>(r1, $r3);

        return $r7;
    }

    public java.util.Set visit(kodkod.ast.IntConstant)
    {
        kodkod.ast.IntConstant r2;
        java.util.Set $r0;
        kodkod.ast.visitor.AbstractCollector r1;

        r1 := @this: kodkod.ast.visitor.AbstractCollector;

        r2 := @parameter0: kodkod.ast.IntConstant;

        $r0 = <java.util.Collections: java.util.Set EMPTY_SET>;

        return $r0;
    }

    public java.util.Set visit(kodkod.ast.IfIntExpression)
    {
        kodkod.ast.IntExpression $r7, $r10;
        kodkod.ast.Formula $r4;
        java.util.Collection $r6, $r9, $r12;
        java.util.Set $r2, $r3, $r13;
        kodkod.ast.IfIntExpression r1;
        java.lang.Object $r5, $r8, $r11;
        kodkod.ast.visitor.AbstractCollector r0;

        r0 := @this: kodkod.ast.visitor.AbstractCollector;

        r1 := @parameter0: kodkod.ast.IfIntExpression;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set lookup(kodkod.ast.Node)>(r1);

        if $r2 == null goto label1;

        return $r2;

     label1:
        $r3 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set newSet()>();

        $r4 = virtualinvoke r1.<kodkod.ast.IfIntExpression: kodkod.ast.Formula condition()>();

        $r5 = virtualinvoke $r4.<kodkod.ast.Formula: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r6 = (java.util.Collection) $r5;

        interfaceinvoke $r3.<java.util.Set: boolean addAll(java.util.Collection)>($r6);

        $r7 = virtualinvoke r1.<kodkod.ast.IfIntExpression: kodkod.ast.IntExpression thenExpr()>();

        $r8 = virtualinvoke $r7.<kodkod.ast.IntExpression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r9 = (java.util.Collection) $r8;

        interfaceinvoke $r3.<java.util.Set: boolean addAll(java.util.Collection)>($r9);

        $r10 = virtualinvoke r1.<kodkod.ast.IfIntExpression: kodkod.ast.IntExpression elseExpr()>();

        $r11 = virtualinvoke $r10.<kodkod.ast.IntExpression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r12 = (java.util.Collection) $r11;

        interfaceinvoke $r3.<java.util.Set: boolean addAll(java.util.Collection)>($r12);

        $r13 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set cache(kodkod.ast.Node,java.util.Set)>(r1, $r3);

        return $r13;
    }

    public java.util.Set visit(kodkod.ast.ExprToIntCast)
    {
        java.util.Collection $r6;
        java.util.Set $r2, $r3, $r7;
        kodkod.ast.Expression $r4;
        kodkod.ast.ExprToIntCast r1;
        java.lang.Object $r5;
        kodkod.ast.visitor.AbstractCollector r0;

        r0 := @this: kodkod.ast.visitor.AbstractCollector;

        r1 := @parameter0: kodkod.ast.ExprToIntCast;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set lookup(kodkod.ast.Node)>(r1);

        if $r2 == null goto label1;

        return $r2;

     label1:
        $r3 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set newSet()>();

        $r4 = virtualinvoke r1.<kodkod.ast.ExprToIntCast: kodkod.ast.Expression expression()>();

        $r5 = virtualinvoke $r4.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r6 = (java.util.Collection) $r5;

        interfaceinvoke $r3.<java.util.Set: boolean addAll(java.util.Collection)>($r6);

        $r7 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set cache(kodkod.ast.Node,java.util.Set)>(r1, $r3);

        return $r7;
    }

    public java.util.Set visit(kodkod.ast.NaryIntExpression)
    {
        kodkod.ast.NaryIntExpression r1;
        kodkod.ast.IntExpression r6;
        java.util.Iterator $r4;
        java.util.Collection $r8;
        java.util.Set $r2, $r3, $r9;
        java.lang.Object $r5, $r7;
        kodkod.ast.visitor.AbstractCollector r0;
        boolean $z0;

        r0 := @this: kodkod.ast.visitor.AbstractCollector;

        r1 := @parameter0: kodkod.ast.NaryIntExpression;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set lookup(kodkod.ast.Node)>(r1);

        if $r2 == null goto label1;

        return $r2;

     label1:
        $r3 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set newSet()>();

        $r4 = virtualinvoke r1.<kodkod.ast.NaryIntExpression: java.util.Iterator iterator()>();

        goto label3;

     label2:
        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (kodkod.ast.IntExpression) $r5;

        $r7 = virtualinvoke r6.<kodkod.ast.IntExpression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r8 = (java.util.Collection) $r7;

        interfaceinvoke $r3.<java.util.Set: boolean addAll(java.util.Collection)>($r8);

     label3:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        $r9 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set cache(kodkod.ast.Node,java.util.Set)>(r1, $r3);

        return $r9;
    }

    public java.util.Set visit(kodkod.ast.BinaryIntExpression)
    {
        kodkod.ast.IntExpression $r4, $r7;
        kodkod.ast.BinaryIntExpression r1;
        java.util.Collection $r6, $r9;
        java.util.Set $r2, $r3, $r10;
        java.lang.Object $r5, $r8;
        kodkod.ast.visitor.AbstractCollector r0;

        r0 := @this: kodkod.ast.visitor.AbstractCollector;

        r1 := @parameter0: kodkod.ast.BinaryIntExpression;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set lookup(kodkod.ast.Node)>(r1);

        if $r2 == null goto label1;

        return $r2;

     label1:
        $r3 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set newSet()>();

        $r4 = virtualinvoke r1.<kodkod.ast.BinaryIntExpression: kodkod.ast.IntExpression left()>();

        $r5 = virtualinvoke $r4.<kodkod.ast.IntExpression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r6 = (java.util.Collection) $r5;

        interfaceinvoke $r3.<java.util.Set: boolean addAll(java.util.Collection)>($r6);

        $r7 = virtualinvoke r1.<kodkod.ast.BinaryIntExpression: kodkod.ast.IntExpression right()>();

        $r8 = virtualinvoke $r7.<kodkod.ast.IntExpression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r9 = (java.util.Collection) $r8;

        interfaceinvoke $r3.<java.util.Set: boolean addAll(java.util.Collection)>($r9);

        $r10 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set cache(kodkod.ast.Node,java.util.Set)>(r1, $r3);

        return $r10;
    }

    public java.util.Set visit(kodkod.ast.UnaryIntExpression)
    {
        kodkod.ast.IntExpression $r4;
        java.util.Collection $r6;
        java.util.Set $r2, $r3, $r7;
        java.lang.Object $r5;
        kodkod.ast.visitor.AbstractCollector r0;
        kodkod.ast.UnaryIntExpression r1;

        r0 := @this: kodkod.ast.visitor.AbstractCollector;

        r1 := @parameter0: kodkod.ast.UnaryIntExpression;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set lookup(kodkod.ast.Node)>(r1);

        if $r2 == null goto label1;

        return $r2;

     label1:
        $r3 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set newSet()>();

        $r4 = virtualinvoke r1.<kodkod.ast.UnaryIntExpression: kodkod.ast.IntExpression intExpr()>();

        $r5 = virtualinvoke $r4.<kodkod.ast.IntExpression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r6 = (java.util.Collection) $r5;

        interfaceinvoke $r3.<java.util.Set: boolean addAll(java.util.Collection)>($r6);

        $r7 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set cache(kodkod.ast.Node,java.util.Set)>(r1, $r3);

        return $r7;
    }

    public java.util.Set visit(kodkod.ast.SumExpression)
    {
        kodkod.ast.IntExpression $r7;
        java.util.Collection $r6, $r9;
        java.util.Set $r2, $r3, $r10;
        kodkod.ast.Decls $r4;
        kodkod.ast.SumExpression r1;
        java.lang.Object $r5, $r8;
        kodkod.ast.visitor.AbstractCollector r0;

        r0 := @this: kodkod.ast.visitor.AbstractCollector;

        r1 := @parameter0: kodkod.ast.SumExpression;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set lookup(kodkod.ast.Node)>(r1);

        if $r2 == null goto label1;

        return $r2;

     label1:
        $r3 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set newSet()>();

        $r4 = virtualinvoke r1.<kodkod.ast.SumExpression: kodkod.ast.Decls decls()>();

        $r5 = virtualinvoke $r4.<kodkod.ast.Decls: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r6 = (java.util.Collection) $r5;

        interfaceinvoke $r3.<java.util.Set: boolean addAll(java.util.Collection)>($r6);

        $r7 = virtualinvoke r1.<kodkod.ast.SumExpression: kodkod.ast.IntExpression intExpr()>();

        $r8 = virtualinvoke $r7.<kodkod.ast.IntExpression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r9 = (java.util.Collection) $r8;

        interfaceinvoke $r3.<java.util.Set: boolean addAll(java.util.Collection)>($r9);

        $r10 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set cache(kodkod.ast.Node,java.util.Set)>(r1, $r3);

        return $r10;
    }

    public java.util.Set visit(kodkod.ast.IntComparisonFormula)
    {
        kodkod.ast.IntExpression $r4, $r7;
        java.util.Collection $r6, $r9;
        java.util.Set $r2, $r3, $r10;
        kodkod.ast.IntComparisonFormula r1;
        java.lang.Object $r5, $r8;
        kodkod.ast.visitor.AbstractCollector r0;

        r0 := @this: kodkod.ast.visitor.AbstractCollector;

        r1 := @parameter0: kodkod.ast.IntComparisonFormula;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set lookup(kodkod.ast.Node)>(r1);

        if $r2 == null goto label1;

        return $r2;

     label1:
        $r3 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set newSet()>();

        $r4 = virtualinvoke r1.<kodkod.ast.IntComparisonFormula: kodkod.ast.IntExpression left()>();

        $r5 = virtualinvoke $r4.<kodkod.ast.IntExpression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r6 = (java.util.Collection) $r5;

        interfaceinvoke $r3.<java.util.Set: boolean addAll(java.util.Collection)>($r6);

        $r7 = virtualinvoke r1.<kodkod.ast.IntComparisonFormula: kodkod.ast.IntExpression right()>();

        $r8 = virtualinvoke $r7.<kodkod.ast.IntExpression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r9 = (java.util.Collection) $r8;

        interfaceinvoke $r3.<java.util.Set: boolean addAll(java.util.Collection)>($r9);

        $r10 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set cache(kodkod.ast.Node,java.util.Set)>(r1, $r3);

        return $r10;
    }

    public java.util.Set visit(kodkod.ast.QuantifiedFormula)
    {
        kodkod.ast.QuantifiedFormula r1;
        java.util.Collection $r6, $r9;
        kodkod.ast.Formula $r7;
        java.util.Set $r2, $r3, $r10;
        kodkod.ast.Decls $r4;
        java.lang.Object $r5, $r8;
        kodkod.ast.visitor.AbstractCollector r0;

        r0 := @this: kodkod.ast.visitor.AbstractCollector;

        r1 := @parameter0: kodkod.ast.QuantifiedFormula;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set lookup(kodkod.ast.Node)>(r1);

        if $r2 == null goto label1;

        return $r2;

     label1:
        $r3 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set newSet()>();

        $r4 = virtualinvoke r1.<kodkod.ast.QuantifiedFormula: kodkod.ast.Decls decls()>();

        $r5 = virtualinvoke $r4.<kodkod.ast.Decls: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r6 = (java.util.Collection) $r5;

        interfaceinvoke $r3.<java.util.Set: boolean addAll(java.util.Collection)>($r6);

        $r7 = virtualinvoke r1.<kodkod.ast.QuantifiedFormula: kodkod.ast.Formula formula()>();

        $r8 = virtualinvoke $r7.<kodkod.ast.Formula: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r9 = (java.util.Collection) $r8;

        interfaceinvoke $r3.<java.util.Set: boolean addAll(java.util.Collection)>($r9);

        $r10 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set cache(kodkod.ast.Node,java.util.Set)>(r1, $r3);

        return $r10;
    }

    public java.util.Set visit(kodkod.ast.NaryFormula)
    {
        java.util.Iterator $r4;
        kodkod.ast.Formula r6;
        java.util.Collection $r8;
        java.util.Set $r2, $r3, $r9;
        java.lang.Object $r5, $r7;
        kodkod.ast.visitor.AbstractCollector r0;
        kodkod.ast.NaryFormula r1;
        boolean $z0;

        r0 := @this: kodkod.ast.visitor.AbstractCollector;

        r1 := @parameter0: kodkod.ast.NaryFormula;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set lookup(kodkod.ast.Node)>(r1);

        if $r2 == null goto label1;

        return $r2;

     label1:
        $r3 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set newSet()>();

        $r4 = virtualinvoke r1.<kodkod.ast.NaryFormula: java.util.Iterator iterator()>();

        goto label3;

     label2:
        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (kodkod.ast.Formula) $r5;

        $r7 = virtualinvoke r6.<kodkod.ast.Formula: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r8 = (java.util.Collection) $r7;

        interfaceinvoke $r3.<java.util.Set: boolean addAll(java.util.Collection)>($r8);

     label3:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        $r9 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set cache(kodkod.ast.Node,java.util.Set)>(r1, $r3);

        return $r9;
    }

    public java.util.Set visit(kodkod.ast.BinaryFormula)
    {
        kodkod.ast.BinaryFormula r1;
        kodkod.ast.Formula $r4, $r7;
        java.util.Collection $r6, $r9;
        java.util.Set $r2, $r3, $r10;
        java.lang.Object $r5, $r8;
        kodkod.ast.visitor.AbstractCollector r0;

        r0 := @this: kodkod.ast.visitor.AbstractCollector;

        r1 := @parameter0: kodkod.ast.BinaryFormula;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set lookup(kodkod.ast.Node)>(r1);

        if $r2 == null goto label1;

        return $r2;

     label1:
        $r3 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set newSet()>();

        $r4 = virtualinvoke r1.<kodkod.ast.BinaryFormula: kodkod.ast.Formula left()>();

        $r5 = virtualinvoke $r4.<kodkod.ast.Formula: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r6 = (java.util.Collection) $r5;

        interfaceinvoke $r3.<java.util.Set: boolean addAll(java.util.Collection)>($r6);

        $r7 = virtualinvoke r1.<kodkod.ast.BinaryFormula: kodkod.ast.Formula right()>();

        $r8 = virtualinvoke $r7.<kodkod.ast.Formula: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r9 = (java.util.Collection) $r8;

        interfaceinvoke $r3.<java.util.Set: boolean addAll(java.util.Collection)>($r9);

        $r10 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set cache(kodkod.ast.Node,java.util.Set)>(r1, $r3);

        return $r10;
    }

    public java.util.Set visit(kodkod.ast.NotFormula)
    {
        kodkod.ast.Formula $r4;
        java.util.Collection $r6;
        java.util.Set $r2, $r3, $r7;
        kodkod.ast.NotFormula r1;
        java.lang.Object $r5;
        kodkod.ast.visitor.AbstractCollector r0;

        r0 := @this: kodkod.ast.visitor.AbstractCollector;

        r1 := @parameter0: kodkod.ast.NotFormula;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set lookup(kodkod.ast.Node)>(r1);

        if $r2 == null goto label1;

        return $r2;

     label1:
        $r3 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set newSet()>();

        $r4 = virtualinvoke r1.<kodkod.ast.NotFormula: kodkod.ast.Formula formula()>();

        $r5 = virtualinvoke $r4.<kodkod.ast.Formula: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r6 = (java.util.Collection) $r5;

        interfaceinvoke $r3.<java.util.Set: boolean addAll(java.util.Collection)>($r6);

        $r7 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set cache(kodkod.ast.Node,java.util.Set)>(r1, $r3);

        return $r7;
    }

    public java.util.Set visit(kodkod.ast.ConstantFormula)
    {
        java.util.Set $r0;
        kodkod.ast.ConstantFormula r2;
        kodkod.ast.visitor.AbstractCollector r1;

        r1 := @this: kodkod.ast.visitor.AbstractCollector;

        r2 := @parameter0: kodkod.ast.ConstantFormula;

        $r0 = <java.util.Collections: java.util.Set EMPTY_SET>;

        return $r0;
    }

    public java.util.Set visit(kodkod.ast.ComparisonFormula)
    {
        java.util.Collection $r6, $r9;
        java.util.Set $r2, $r3, $r10;
        kodkod.ast.Expression $r4, $r7;
        kodkod.ast.ComparisonFormula r1;
        java.lang.Object $r5, $r8;
        kodkod.ast.visitor.AbstractCollector r0;

        r0 := @this: kodkod.ast.visitor.AbstractCollector;

        r1 := @parameter0: kodkod.ast.ComparisonFormula;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set lookup(kodkod.ast.Node)>(r1);

        if $r2 == null goto label1;

        return $r2;

     label1:
        $r3 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set newSet()>();

        $r4 = virtualinvoke r1.<kodkod.ast.ComparisonFormula: kodkod.ast.Expression left()>();

        $r5 = virtualinvoke $r4.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r6 = (java.util.Collection) $r5;

        interfaceinvoke $r3.<java.util.Set: boolean addAll(java.util.Collection)>($r6);

        $r7 = virtualinvoke r1.<kodkod.ast.ComparisonFormula: kodkod.ast.Expression right()>();

        $r8 = virtualinvoke $r7.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r9 = (java.util.Collection) $r8;

        interfaceinvoke $r3.<java.util.Set: boolean addAll(java.util.Collection)>($r9);

        $r10 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set cache(kodkod.ast.Node,java.util.Set)>(r1, $r3);

        return $r10;
    }

    public java.util.Set visit(kodkod.ast.MultiplicityFormula)
    {
        kodkod.ast.MultiplicityFormula r1;
        java.util.Collection $r6;
        java.util.Set $r2, $r3, $r7;
        kodkod.ast.Expression $r4;
        java.lang.Object $r5;
        kodkod.ast.visitor.AbstractCollector r0;

        r0 := @this: kodkod.ast.visitor.AbstractCollector;

        r1 := @parameter0: kodkod.ast.MultiplicityFormula;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set lookup(kodkod.ast.Node)>(r1);

        if $r2 == null goto label1;

        return $r2;

     label1:
        $r3 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set newSet()>();

        $r4 = virtualinvoke r1.<kodkod.ast.MultiplicityFormula: kodkod.ast.Expression expression()>();

        $r5 = virtualinvoke $r4.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r6 = (java.util.Collection) $r5;

        interfaceinvoke $r3.<java.util.Set: boolean addAll(java.util.Collection)>($r6);

        $r7 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set cache(kodkod.ast.Node,java.util.Set)>(r1, $r3);

        return $r7;
    }

    public java.util.Set visit(kodkod.ast.RelationPredicate)
    {
        int[] $r7;
        kodkod.ast.visitor.AbstractCollector r0;
        kodkod.ast.RelationPredicate$Name $r8, $r28;
        java.util.Collection $r6, $r12, $r15, $r18, $r22, $r25;
        java.util.Set $r2, $r3, $r31;
        kodkod.ast.Expression $r20, $r23;
        kodkod.ast.RelationPredicate$TotalOrdering r9;
        java.lang.StringBuilder $r27, $r29;
        kodkod.ast.Relation $r4, $r10, $r13, $r16;
        int $i0, $i1;
        java.lang.String $r30;
        kodkod.ast.RelationPredicate$Function r19;
        java.lang.IllegalArgumentException $r26;
        java.lang.Object $r5, $r11, $r14, $r17, $r21, $r24;
        kodkod.ast.RelationPredicate r1;

        r0 := @this: kodkod.ast.visitor.AbstractCollector;

        r1 := @parameter0: kodkod.ast.RelationPredicate;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set lookup(kodkod.ast.Node)>(r1);

        if $r2 == null goto label1;

        return $r2;

     label1:
        $r3 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set newSet()>();

        $r4 = virtualinvoke r1.<kodkod.ast.RelationPredicate: kodkod.ast.Relation relation()>();

        $r5 = virtualinvoke $r4.<kodkod.ast.Relation: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r6 = (java.util.Collection) $r5;

        interfaceinvoke $r3.<java.util.Set: boolean addAll(java.util.Collection)>($r6);

        $r7 = staticinvoke <kodkod.ast.visitor.AbstractCollector: int[] $SWITCH_TABLE$kodkod$ast$RelationPredicate$Name()>();

        $r8 = virtualinvoke r1.<kodkod.ast.RelationPredicate: kodkod.ast.RelationPredicate$Name name()>();

        $i0 = virtualinvoke $r8.<kodkod.ast.RelationPredicate$Name: int ordinal()>();

        $i1 = $r7[$i0];

        tableswitch($i1)
        {
            case 0: goto label3;
            case 1: goto label2;
            case 2: goto label4;
            default: goto label5;
        };

     label2:
        goto label6;

     label3:
        r19 = (kodkod.ast.RelationPredicate$Function) r1;

        $r20 = virtualinvoke r19.<kodkod.ast.RelationPredicate$Function: kodkod.ast.Expression domain()>();

        $r21 = virtualinvoke $r20.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r22 = (java.util.Collection) $r21;

        interfaceinvoke $r3.<java.util.Set: boolean addAll(java.util.Collection)>($r22);

        $r23 = virtualinvoke r19.<kodkod.ast.RelationPredicate$Function: kodkod.ast.Expression range()>();

        $r24 = virtualinvoke $r23.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r25 = (java.util.Collection) $r24;

        interfaceinvoke $r3.<java.util.Set: boolean addAll(java.util.Collection)>($r25);

        goto label6;

     label4:
        r9 = (kodkod.ast.RelationPredicate$TotalOrdering) r1;

        $r10 = virtualinvoke r9.<kodkod.ast.RelationPredicate$TotalOrdering: kodkod.ast.Relation ordered()>();

        $r11 = virtualinvoke $r10.<kodkod.ast.Relation: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r12 = (java.util.Collection) $r11;

        interfaceinvoke $r3.<java.util.Set: boolean addAll(java.util.Collection)>($r12);

        $r13 = virtualinvoke r9.<kodkod.ast.RelationPredicate$TotalOrdering: kodkod.ast.Relation first()>();

        $r14 = virtualinvoke $r13.<kodkod.ast.Relation: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r15 = (java.util.Collection) $r14;

        interfaceinvoke $r3.<java.util.Set: boolean addAll(java.util.Collection)>($r15);

        $r16 = virtualinvoke r9.<kodkod.ast.RelationPredicate$TotalOrdering: kodkod.ast.Relation last()>();

        $r17 = virtualinvoke $r16.<kodkod.ast.Relation: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r18 = (java.util.Collection) $r17;

        interfaceinvoke $r3.<java.util.Set: boolean addAll(java.util.Collection)>($r18);

        goto label6;

     label5:
        $r26 = new java.lang.IllegalArgumentException;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>(java.lang.String)>("unknown relation predicate: ");

        $r28 = virtualinvoke r1.<kodkod.ast.RelationPredicate: kodkod.ast.RelationPredicate$Name name()>();

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r28);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r26.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r30);

        throw $r26;

     label6:
        $r31 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set cache(kodkod.ast.Node,java.util.Set)>(r1, $r3);

        return $r31;
    }

    public volatile java.lang.Object visit(kodkod.ast.RelationPredicate)
    {
        java.util.Set $r2;
        kodkod.ast.visitor.AbstractCollector r0;
        kodkod.ast.RelationPredicate r1;

        r0 := @this: kodkod.ast.visitor.AbstractCollector;

        r1 := @parameter0: kodkod.ast.RelationPredicate;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set visit(kodkod.ast.RelationPredicate)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.MultiplicityFormula)
    {
        kodkod.ast.MultiplicityFormula r1;
        java.util.Set $r2;
        kodkod.ast.visitor.AbstractCollector r0;

        r0 := @this: kodkod.ast.visitor.AbstractCollector;

        r1 := @parameter0: kodkod.ast.MultiplicityFormula;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set visit(kodkod.ast.MultiplicityFormula)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.ComparisonFormula)
    {
        kodkod.ast.ComparisonFormula r1;
        java.util.Set $r2;
        kodkod.ast.visitor.AbstractCollector r0;

        r0 := @this: kodkod.ast.visitor.AbstractCollector;

        r1 := @parameter0: kodkod.ast.ComparisonFormula;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set visit(kodkod.ast.ComparisonFormula)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.ConstantFormula)
    {
        java.util.Set $r2;
        kodkod.ast.ConstantFormula r1;
        kodkod.ast.visitor.AbstractCollector r0;

        r0 := @this: kodkod.ast.visitor.AbstractCollector;

        r1 := @parameter0: kodkod.ast.ConstantFormula;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set visit(kodkod.ast.ConstantFormula)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.NotFormula)
    {
        java.util.Set $r2;
        kodkod.ast.visitor.AbstractCollector r0;
        kodkod.ast.NotFormula r1;

        r0 := @this: kodkod.ast.visitor.AbstractCollector;

        r1 := @parameter0: kodkod.ast.NotFormula;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set visit(kodkod.ast.NotFormula)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.BinaryFormula)
    {
        kodkod.ast.BinaryFormula r1;
        java.util.Set $r2;
        kodkod.ast.visitor.AbstractCollector r0;

        r0 := @this: kodkod.ast.visitor.AbstractCollector;

        r1 := @parameter0: kodkod.ast.BinaryFormula;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set visit(kodkod.ast.BinaryFormula)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.NaryFormula)
    {
        java.util.Set $r2;
        kodkod.ast.visitor.AbstractCollector r0;
        kodkod.ast.NaryFormula r1;

        r0 := @this: kodkod.ast.visitor.AbstractCollector;

        r1 := @parameter0: kodkod.ast.NaryFormula;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set visit(kodkod.ast.NaryFormula)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.QuantifiedFormula)
    {
        java.util.Set $r2;
        kodkod.ast.visitor.AbstractCollector r0;
        kodkod.ast.QuantifiedFormula r1;

        r0 := @this: kodkod.ast.visitor.AbstractCollector;

        r1 := @parameter0: kodkod.ast.QuantifiedFormula;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set visit(kodkod.ast.QuantifiedFormula)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.IntComparisonFormula)
    {
        java.util.Set $r2;
        kodkod.ast.IntComparisonFormula r1;
        kodkod.ast.visitor.AbstractCollector r0;

        r0 := @this: kodkod.ast.visitor.AbstractCollector;

        r1 := @parameter0: kodkod.ast.IntComparisonFormula;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set visit(kodkod.ast.IntComparisonFormula)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.SumExpression)
    {
        java.util.Set $r2;
        kodkod.ast.visitor.AbstractCollector r0;
        kodkod.ast.SumExpression r1;

        r0 := @this: kodkod.ast.visitor.AbstractCollector;

        r1 := @parameter0: kodkod.ast.SumExpression;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set visit(kodkod.ast.SumExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.UnaryIntExpression)
    {
        java.util.Set $r2;
        kodkod.ast.visitor.AbstractCollector r0;
        kodkod.ast.UnaryIntExpression r1;

        r0 := @this: kodkod.ast.visitor.AbstractCollector;

        r1 := @parameter0: kodkod.ast.UnaryIntExpression;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set visit(kodkod.ast.UnaryIntExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.BinaryIntExpression)
    {
        java.util.Set $r2;
        kodkod.ast.visitor.AbstractCollector r0;
        kodkod.ast.BinaryIntExpression r1;

        r0 := @this: kodkod.ast.visitor.AbstractCollector;

        r1 := @parameter0: kodkod.ast.BinaryIntExpression;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set visit(kodkod.ast.BinaryIntExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.NaryIntExpression)
    {
        java.util.Set $r2;
        kodkod.ast.NaryIntExpression r1;
        kodkod.ast.visitor.AbstractCollector r0;

        r0 := @this: kodkod.ast.visitor.AbstractCollector;

        r1 := @parameter0: kodkod.ast.NaryIntExpression;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set visit(kodkod.ast.NaryIntExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.ExprToIntCast)
    {
        kodkod.ast.ExprToIntCast r1;
        java.util.Set $r2;
        kodkod.ast.visitor.AbstractCollector r0;

        r0 := @this: kodkod.ast.visitor.AbstractCollector;

        r1 := @parameter0: kodkod.ast.ExprToIntCast;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set visit(kodkod.ast.ExprToIntCast)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.IfIntExpression)
    {
        java.util.Set $r2;
        kodkod.ast.visitor.AbstractCollector r0;
        kodkod.ast.IfIntExpression r1;

        r0 := @this: kodkod.ast.visitor.AbstractCollector;

        r1 := @parameter0: kodkod.ast.IfIntExpression;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set visit(kodkod.ast.IfIntExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.IntConstant)
    {
        kodkod.ast.IntConstant r1;
        java.util.Set $r2;
        kodkod.ast.visitor.AbstractCollector r0;

        r0 := @this: kodkod.ast.visitor.AbstractCollector;

        r1 := @parameter0: kodkod.ast.IntConstant;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set visit(kodkod.ast.IntConstant)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.IntToExprCast)
    {
        java.util.Set $r2;
        kodkod.ast.visitor.AbstractCollector r0;
        kodkod.ast.IntToExprCast r1;

        r0 := @this: kodkod.ast.visitor.AbstractCollector;

        r1 := @parameter0: kodkod.ast.IntToExprCast;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set visit(kodkod.ast.IntToExprCast)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.ProjectExpression)
    {
        kodkod.ast.ProjectExpression r1;
        java.util.Set $r2;
        kodkod.ast.visitor.AbstractCollector r0;

        r0 := @this: kodkod.ast.visitor.AbstractCollector;

        r1 := @parameter0: kodkod.ast.ProjectExpression;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set visit(kodkod.ast.ProjectExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.IfExpression)
    {
        java.util.Set $r2;
        kodkod.ast.visitor.AbstractCollector r0;
        kodkod.ast.IfExpression r1;

        r0 := @this: kodkod.ast.visitor.AbstractCollector;

        r1 := @parameter0: kodkod.ast.IfExpression;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set visit(kodkod.ast.IfExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.Comprehension)
    {
        java.util.Set $r2;
        kodkod.ast.visitor.AbstractCollector r0;
        kodkod.ast.Comprehension r1;

        r0 := @this: kodkod.ast.visitor.AbstractCollector;

        r1 := @parameter0: kodkod.ast.Comprehension;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set visit(kodkod.ast.Comprehension)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.UnaryExpression)
    {
        java.util.Set $r2;
        kodkod.ast.visitor.AbstractCollector r0;
        kodkod.ast.UnaryExpression r1;

        r0 := @this: kodkod.ast.visitor.AbstractCollector;

        r1 := @parameter0: kodkod.ast.UnaryExpression;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set visit(kodkod.ast.UnaryExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.BinaryExpression)
    {
        java.util.Set $r2;
        kodkod.ast.visitor.AbstractCollector r0;
        kodkod.ast.BinaryExpression r1;

        r0 := @this: kodkod.ast.visitor.AbstractCollector;

        r1 := @parameter0: kodkod.ast.BinaryExpression;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set visit(kodkod.ast.BinaryExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.NaryExpression)
    {
        java.util.Set $r2;
        kodkod.ast.visitor.AbstractCollector r0;
        kodkod.ast.NaryExpression r1;

        r0 := @this: kodkod.ast.visitor.AbstractCollector;

        r1 := @parameter0: kodkod.ast.NaryExpression;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set visit(kodkod.ast.NaryExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.ConstantExpression)
    {
        kodkod.ast.ConstantExpression r1;
        java.util.Set $r2;
        kodkod.ast.visitor.AbstractCollector r0;

        r0 := @this: kodkod.ast.visitor.AbstractCollector;

        r1 := @parameter0: kodkod.ast.ConstantExpression;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set visit(kodkod.ast.ConstantExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.Variable)
    {
        java.util.Set $r2;
        kodkod.ast.visitor.AbstractCollector r0;
        kodkod.ast.Variable r1;

        r0 := @this: kodkod.ast.visitor.AbstractCollector;

        r1 := @parameter0: kodkod.ast.Variable;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set visit(kodkod.ast.Variable)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.Relation)
    {
        java.util.Set $r2;
        kodkod.ast.visitor.AbstractCollector r0;
        kodkod.ast.Relation r1;

        r0 := @this: kodkod.ast.visitor.AbstractCollector;

        r1 := @parameter0: kodkod.ast.Relation;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set visit(kodkod.ast.Relation)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.Decl)
    {
        kodkod.ast.Decl r1;
        java.util.Set $r2;
        kodkod.ast.visitor.AbstractCollector r0;

        r0 := @this: kodkod.ast.visitor.AbstractCollector;

        r1 := @parameter0: kodkod.ast.Decl;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set visit(kodkod.ast.Decl)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.Decls)
    {
        java.util.Set $r2;
        kodkod.ast.visitor.AbstractCollector r0;
        kodkod.ast.Decls r1;

        r0 := @this: kodkod.ast.visitor.AbstractCollector;

        r1 := @parameter0: kodkod.ast.Decls;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractCollector: java.util.Set visit(kodkod.ast.Decls)>(r1);

        return $r2;
    }

    static int[] $SWITCH_TABLE$kodkod$ast$RelationPredicate$Name()
    {
        java.lang.NoSuchFieldError $r6, $r7, $r8;
        kodkod.ast.RelationPredicate$Name[] $r1;
        int[] $r0, r2;
        int $i0, $i1, $i2, $i3;
        kodkod.ast.RelationPredicate$Name $r3, $r4, $r5;

        $r0 = <kodkod.ast.visitor.AbstractCollector: int[] $SWITCH_TABLE$kodkod$ast$RelationPredicate$Name>;

        if $r0 == null goto label01;

        return $r0;

     label01:
        $r1 = staticinvoke <kodkod.ast.RelationPredicate$Name: kodkod.ast.RelationPredicate$Name[] values()>();

        $i0 = lengthof $r1;

        r2 = newarray (int)[$i0];

     label02:
        $r3 = <kodkod.ast.RelationPredicate$Name: kodkod.ast.RelationPredicate$Name ACYCLIC>;

        $i1 = virtualinvoke $r3.<kodkod.ast.RelationPredicate$Name: int ordinal()>();

        r2[$i1] = 1;

     label03:
        goto label05;

     label04:
        $r8 := @caughtexception;

     label05:
        $r4 = <kodkod.ast.RelationPredicate$Name: kodkod.ast.RelationPredicate$Name FUNCTION>;

        $i2 = virtualinvoke $r4.<kodkod.ast.RelationPredicate$Name: int ordinal()>();

        r2[$i2] = 0;

     label06:
        goto label08;

     label07:
        $r7 := @caughtexception;

     label08:
        $r5 = <kodkod.ast.RelationPredicate$Name: kodkod.ast.RelationPredicate$Name TOTAL_ORDERING>;

        $i3 = virtualinvoke $r5.<kodkod.ast.RelationPredicate$Name: int ordinal()>();

        r2[$i3] = 2;

     label09:
        goto label11;

     label10:
        $r6 := @caughtexception;

     label11:
        <kodkod.ast.visitor.AbstractCollector: int[] $SWITCH_TABLE$kodkod$ast$RelationPredicate$Name> = r2;

        return r2;

        catch java.lang.NoSuchFieldError from label02 to label03 with label04;
        catch java.lang.NoSuchFieldError from label05 to label06 with label07;
        catch java.lang.NoSuchFieldError from label08 to label09 with label10;
    }
}
