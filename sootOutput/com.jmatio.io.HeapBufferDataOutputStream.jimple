public class com.jmatio.io.HeapBufferDataOutputStream extends java.io.ByteArrayOutputStream implements com.jmatio.io.DataOutputStream
{
    private final int BUFFER_SIZE;

    public void <init>()
    {
        com.jmatio.io.HeapBufferDataOutputStream r0;

        r0 := @this: com.jmatio.io.HeapBufferDataOutputStream;

        specialinvoke r0.<java.io.ByteArrayOutputStream: void <init>()>();

        r0.<com.jmatio.io.HeapBufferDataOutputStream: int BUFFER_SIZE> = 1024;

        r0.<com.jmatio.io.HeapBufferDataOutputStream: int BUFFER_SIZE> = 1024;

        return;
    }

    public java.nio.ByteBuffer getByteBuffer() throws java.io.IOException
    {
        byte[] $r1;
        com.jmatio.io.HeapBufferDataOutputStream r0;
        java.nio.ByteBuffer $r2;

        r0 := @this: com.jmatio.io.HeapBufferDataOutputStream;

        $r1 = r0.<java.io.ByteArrayOutputStream: byte[] buf>;

        $r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>($r1);

        return $r2;
    }

    public void write(java.nio.ByteBuffer) throws java.io.IOException
    {
        byte[] r0;
        int $i0, $i1, $i2;
        com.jmatio.io.HeapBufferDataOutputStream r2;
        java.nio.ByteBuffer r1;
        boolean $z0;

        r2 := @this: com.jmatio.io.HeapBufferDataOutputStream;

        r1 := @parameter0: java.nio.ByteBuffer;

        r0 = newarray (byte)[1024];

     label1:
        $z0 = virtualinvoke r1.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z0 == 0 goto label2;

        $i0 = virtualinvoke r1.<java.nio.ByteBuffer: int remaining()>();

        $i1 = lengthof r0;

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>(r0, 0, $i2);

        virtualinvoke r2.<com.jmatio.io.HeapBufferDataOutputStream: void write(byte[],int,int)>(r0, 0, $i2);

        goto label1;

     label2:
        return;
    }
}
