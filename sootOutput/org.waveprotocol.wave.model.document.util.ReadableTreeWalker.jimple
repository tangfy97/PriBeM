public class org.waveprotocol.wave.model.document.util.ReadableTreeWalker extends java.lang.Object
{
    protected final org.waveprotocol.wave.model.document.ReadableDocument document;
    protected final java.util.Iterator nodeWalker;
    protected java.lang.Object currentNode;

    public void <init>(org.waveprotocol.wave.model.document.ReadableDocument, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.util.ReadableTreeWalker r0;
        org.waveprotocol.wave.model.document.util.DocIterate$DocIterationFilter $r4;
        org.waveprotocol.wave.model.document.ReadableDocument r1;
        java.lang.Object r2, $r3;
        java.lang.Iterable $r5;

        r0 := @this: org.waveprotocol.wave.model.document.util.ReadableTreeWalker;

        r1 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r2 := @parameter1: java.lang.Object;

        $r3 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: java.lang.Object getNextOrPrevNodeDepthFirst(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object,java.lang.Object,boolean,boolean)>(r1, r2, null, 0, 1);

        $r4 = staticinvoke <org.waveprotocol.wave.model.document.util.DocIterate: org.waveprotocol.wave.model.document.util.DocIterate$DocIterationFilter forwardDepthFirstIterator()>();

        $r5 = staticinvoke <org.waveprotocol.wave.model.document.util.DocIterate: java.lang.Iterable iterate(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object,java.lang.Object,org.waveprotocol.wave.model.document.util.DocIterate$DocIterationFilter)>(r1, r2, $r3, $r4);

        specialinvoke r0.<org.waveprotocol.wave.model.document.util.ReadableTreeWalker: void <init>(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Iterable)>(r1, $r5);

        return;
    }

    public void <init>(org.waveprotocol.wave.model.document.ReadableDocument, java.lang.Iterable)
    {
        org.waveprotocol.wave.model.document.util.ReadableTreeWalker r0;
        java.util.Iterator $r3;
        org.waveprotocol.wave.model.document.ReadableDocument r1;
        java.lang.Iterable r2;

        r0 := @this: org.waveprotocol.wave.model.document.util.ReadableTreeWalker;

        r1 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r2 := @parameter1: java.lang.Iterable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.model.document.util.ReadableTreeWalker: org.waveprotocol.wave.model.document.ReadableDocument document> = r1;

        $r3 = interfaceinvoke r2.<java.lang.Iterable: java.util.Iterator iterator()>();

        r0.<org.waveprotocol.wave.model.document.util.ReadableTreeWalker: java.util.Iterator nodeWalker> = $r3;

        return;
    }

    public java.lang.Object checkElement(java.lang.String, java.util.Map)
    {
        java.util.Iterator $r1;
        org.waveprotocol.wave.model.document.ReadableDocument $r3, $r5, $r8;
        org.waveprotocol.wave.model.document.util.ReadableTreeWalker r0;
        java.util.Map $r9, r10;
        java.lang.Object $r2, $r4;
        java.lang.String $r6, r7;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.waveprotocol.wave.model.document.util.ReadableTreeWalker;

        r7 := @parameter0: java.lang.String;

        r10 := @parameter1: java.util.Map;

        $r1 = r0.<org.waveprotocol.wave.model.document.util.ReadableTreeWalker: java.util.Iterator nodeWalker>;

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "Tree Walker: no more nodes to walk, element expected");

        virtualinvoke r0.<org.waveprotocol.wave.model.document.util.ReadableTreeWalker: void progress()>();

        $r3 = r0.<org.waveprotocol.wave.model.document.util.ReadableTreeWalker: org.waveprotocol.wave.model.document.ReadableDocument document>;

        $r2 = r0.<org.waveprotocol.wave.model.document.util.ReadableTreeWalker: java.lang.Object currentNode>;

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object asElement(java.lang.Object)>($r2);

        if $r4 == null goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkState(boolean,java.lang.Object)>($z3, "Tree Walker: At text node, element expected");

        $r5 = r0.<org.waveprotocol.wave.model.document.util.ReadableTreeWalker: org.waveprotocol.wave.model.document.ReadableDocument document>;

        $r6 = interfaceinvoke $r5.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.String getTagName(java.lang.Object)>($r4);

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r7);

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkState(boolean,java.lang.Object)>($z1, "Tree Walker: Incorrect tag name");

        $r8 = r0.<org.waveprotocol.wave.model.document.util.ReadableTreeWalker: org.waveprotocol.wave.model.document.ReadableDocument document>;

        $r9 = interfaceinvoke $r8.<org.waveprotocol.wave.model.document.ReadableDocument: java.util.Map getAttributes(java.lang.Object)>($r4);

        $z2 = staticinvoke <org.waveprotocol.wave.model.util.ValueUtils: boolean equal(java.lang.Object,java.lang.Object)>($r9, r10);

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkState(boolean,java.lang.Object)>($z2, "Tree Walker: Incorrect attributes");

        return $r4;
    }

    public java.lang.Object checkTextNode(java.lang.String)
    {
        java.util.Iterator $r1;
        org.waveprotocol.wave.model.document.ReadableDocument $r3, $r5;
        org.waveprotocol.wave.model.document.util.ReadableTreeWalker r0;
        java.lang.Object $r2, $r4;
        java.lang.String $r6, r7;
        boolean $z0, $z1, $z2;

        r0 := @this: org.waveprotocol.wave.model.document.util.ReadableTreeWalker;

        r7 := @parameter0: java.lang.String;

        $r1 = r0.<org.waveprotocol.wave.model.document.util.ReadableTreeWalker: java.util.Iterator nodeWalker>;

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "Tree Walker: no more nodes to walk, text node expected");

        virtualinvoke r0.<org.waveprotocol.wave.model.document.util.ReadableTreeWalker: void progress()>();

        $r3 = r0.<org.waveprotocol.wave.model.document.util.ReadableTreeWalker: org.waveprotocol.wave.model.document.ReadableDocument document>;

        $r2 = r0.<org.waveprotocol.wave.model.document.util.ReadableTreeWalker: java.lang.Object currentNode>;

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object asText(java.lang.Object)>($r2);

        if $r4 == null goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkState(boolean,java.lang.Object)>($z2, "Tree Walker: At element, text node expected");

        $r5 = r0.<org.waveprotocol.wave.model.document.util.ReadableTreeWalker: org.waveprotocol.wave.model.document.ReadableDocument document>;

        $r6 = interfaceinvoke $r5.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.String getData(java.lang.Object)>($r4);

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r7);

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkState(boolean,java.lang.Object)>($z1, "Tree Walker: Incorrect text node data");

        return $r4;
    }

    public boolean checkComplete()
    {
        org.waveprotocol.wave.model.document.util.ReadableTreeWalker r0;
        java.util.Iterator $r1, $r2;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.waveprotocol.wave.model.document.util.ReadableTreeWalker;

        $r1 = r0.<org.waveprotocol.wave.model.document.util.ReadableTreeWalker: java.util.Iterator nodeWalker>;

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkState(boolean,java.lang.Object)>($z2, "Tree Walker: Did not end walk at the correct node");

        $r2 = r0.<org.waveprotocol.wave.model.document.util.ReadableTreeWalker: java.util.Iterator nodeWalker>;

        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label3;

        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        return $z3;
    }

    public boolean checkWalk(org.waveprotocol.wave.model.document.ReadableDocument, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.util.ReadableTreeWalker r3;
        org.waveprotocol.wave.model.document.util.DocIterate$DocIterationFilter $r4;
        org.waveprotocol.wave.model.document.ReadableDocument r0;
        java.lang.Object r1, $r2;
        java.lang.Iterable $r5;
        boolean $z0;

        r3 := @this: org.waveprotocol.wave.model.document.util.ReadableTreeWalker;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r1 := @parameter1: java.lang.Object;

        $r2 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: java.lang.Object getNextOrPrevNodeDepthFirst(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object,java.lang.Object,boolean,boolean)>(r0, r1, null, 0, 1);

        $r4 = staticinvoke <org.waveprotocol.wave.model.document.util.DocIterate: org.waveprotocol.wave.model.document.util.DocIterate$DocIterationFilter forwardDepthFirstIterator()>();

        $r5 = staticinvoke <org.waveprotocol.wave.model.document.util.DocIterate: java.lang.Iterable iterate(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object,java.lang.Object,org.waveprotocol.wave.model.document.util.DocIterate$DocIterationFilter)>(r0, r1, $r2, $r4);

        $z0 = virtualinvoke r3.<org.waveprotocol.wave.model.document.util.ReadableTreeWalker: boolean checkWalk(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Iterable)>(r0, $r5);

        return $z0;
    }

    public boolean checkWalk(org.waveprotocol.wave.model.document.ReadableDocument, java.lang.Iterable)
    {
        java.lang.IllegalStateException $r10;
        java.util.Iterator $r1;
        org.waveprotocol.wave.model.document.ReadableDocument r4;
        java.lang.Iterable r0;
        org.waveprotocol.wave.model.document.util.ReadableTreeWalker r2;
        java.util.Map $r9;
        java.lang.Object $r3, $r5, $r6;
        java.lang.String $r7, $r8;
        boolean $z0, $z1;

        r2 := @this: org.waveprotocol.wave.model.document.util.ReadableTreeWalker;

        r4 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r0 := @parameter1: java.lang.Iterable;

     label1:
        $r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r3 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r5 = interfaceinvoke r4.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object asElement(java.lang.Object)>($r3);

        if $r5 == null goto label3;

        $r8 = interfaceinvoke r4.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.String getTagName(java.lang.Object)>($r5);

        $r9 = interfaceinvoke r4.<org.waveprotocol.wave.model.document.ReadableDocument: java.util.Map getAttributes(java.lang.Object)>($r5);

        virtualinvoke r2.<org.waveprotocol.wave.model.document.util.ReadableTreeWalker: java.lang.Object checkElement(java.lang.String,java.util.Map)>($r8, $r9);

        goto label4;

     label3:
        $r6 = interfaceinvoke r4.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object asText(java.lang.Object)>($r3);

        $r7 = interfaceinvoke r4.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.String getData(java.lang.Object)>($r6);

        virtualinvoke r2.<org.waveprotocol.wave.model.document.util.ReadableTreeWalker: java.lang.Object checkTextNode(java.lang.String)>($r7);

     label4:
        goto label2;

     label5:
        $z1 = virtualinvoke r2.<org.waveprotocol.wave.model.document.util.ReadableTreeWalker: boolean checkComplete()>();

     label6:
        return $z1;

     label7:
        $r10 := @caughtexception;

        return 0;

        catch java.lang.IllegalStateException from label1 to label6 with label7;
    }

    protected void progress()
    {
        org.waveprotocol.wave.model.document.util.ReadableTreeWalker r0;
        java.lang.Object $r2;
        java.util.Iterator $r1;

        r0 := @this: org.waveprotocol.wave.model.document.util.ReadableTreeWalker;

        $r1 = r0.<org.waveprotocol.wave.model.document.util.ReadableTreeWalker: java.util.Iterator nodeWalker>;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r0.<org.waveprotocol.wave.model.document.util.ReadableTreeWalker: java.lang.Object currentNode> = $r2;

        return;
    }
}
