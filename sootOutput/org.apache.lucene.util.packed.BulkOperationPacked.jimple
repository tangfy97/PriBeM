class org.apache.lucene.util.packed.BulkOperationPacked extends org.apache.lucene.util.packed.BulkOperation
{
    private final int bitsPerValue;
    private final int longBlockCount;
    private final int longValueCount;
    private final int byteBlockCount;
    private final int byteValueCount;
    private final long mask;
    private final int intMask;
    static final boolean $assertionsDisabled;

    public void <init>(int)
    {
        long $l6, $l7, $l8;
        java.lang.AssertionError $r1, $r2;
        org.apache.lucene.util.packed.BulkOperationPacked r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i9, $i10, $i11, $i12, $i13, $i14, i15, $i16, i17, i18;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.util.packed.BulkOperationPacked;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.lucene.util.packed.BulkOperation: void <init>()>();

        r0.<org.apache.lucene.util.packed.BulkOperationPacked: int bitsPerValue> = i0;

        $z0 = <org.apache.lucene.util.packed.BulkOperationPacked: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        if i0 <= 0 goto label1;

        if i0 <= 64 goto label2;

     label1:
        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label2:
        i15 = i0;

     label3:
        $i16 = i15 & 1;

        if $i16 != 0 goto label4;

        i15 = i15 >>> 1;

        goto label3;

     label4:
        r0.<org.apache.lucene.util.packed.BulkOperationPacked: int longBlockCount> = i15;

        $i1 = r0.<org.apache.lucene.util.packed.BulkOperationPacked: int longBlockCount>;

        $i2 = 64 * $i1;

        $i3 = $i2 / i0;

        r0.<org.apache.lucene.util.packed.BulkOperationPacked: int longValueCount> = $i3;

        $i4 = r0.<org.apache.lucene.util.packed.BulkOperationPacked: int longBlockCount>;

        i17 = 8 * $i4;

        i18 = r0.<org.apache.lucene.util.packed.BulkOperationPacked: int longValueCount>;

     label5:
        $i5 = i17 & 1;

        if $i5 != 0 goto label6;

        $i14 = i18 & 1;

        if $i14 != 0 goto label6;

        i17 = i17 >>> 1;

        i18 = i18 >>> 1;

        goto label5;

     label6:
        r0.<org.apache.lucene.util.packed.BulkOperationPacked: int byteBlockCount> = i17;

        r0.<org.apache.lucene.util.packed.BulkOperationPacked: int byteValueCount> = i18;

        if i0 != 64 goto label7;

        r0.<org.apache.lucene.util.packed.BulkOperationPacked: long mask> = -1L;

        goto label8;

     label7:
        $l6 = 1L << i0;

        $l7 = $l6 - 1L;

        r0.<org.apache.lucene.util.packed.BulkOperationPacked: long mask> = $l7;

     label8:
        $l8 = r0.<org.apache.lucene.util.packed.BulkOperationPacked: long mask>;

        $i9 = (int) $l8;

        r0.<org.apache.lucene.util.packed.BulkOperationPacked: int intMask> = $i9;

        $z1 = <org.apache.lucene.util.packed.BulkOperationPacked: boolean $assertionsDisabled>;

        if $z1 != 0 goto label9;

        $i10 = r0.<org.apache.lucene.util.packed.BulkOperationPacked: int longValueCount>;

        $i13 = $i10 * i0;

        $i11 = r0.<org.apache.lucene.util.packed.BulkOperationPacked: int longBlockCount>;

        $i12 = 64 * $i11;

        if $i13 == $i12 goto label9;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label9:
        return;
    }

    public int longBlockCount()
    {
        int $i0;
        org.apache.lucene.util.packed.BulkOperationPacked r0;

        r0 := @this: org.apache.lucene.util.packed.BulkOperationPacked;

        $i0 = r0.<org.apache.lucene.util.packed.BulkOperationPacked: int longBlockCount>;

        return $i0;
    }

    public int longValueCount()
    {
        int $i0;
        org.apache.lucene.util.packed.BulkOperationPacked r0;

        r0 := @this: org.apache.lucene.util.packed.BulkOperationPacked;

        $i0 = r0.<org.apache.lucene.util.packed.BulkOperationPacked: int longValueCount>;

        return $i0;
    }

    public int byteBlockCount()
    {
        int $i0;
        org.apache.lucene.util.packed.BulkOperationPacked r0;

        r0 := @this: org.apache.lucene.util.packed.BulkOperationPacked;

        $i0 = r0.<org.apache.lucene.util.packed.BulkOperationPacked: int byteBlockCount>;

        return $i0;
    }

    public int byteValueCount()
    {
        int $i0;
        org.apache.lucene.util.packed.BulkOperationPacked r0;

        r0 := @this: org.apache.lucene.util.packed.BulkOperationPacked;

        $i0 = r0.<org.apache.lucene.util.packed.BulkOperationPacked: int byteValueCount>;

        return $i0;
    }

    public void decode(long[], int, long[], int, int)
    {
        long $l5, $l6, $l7, $l8, $l13, $l14, $l15, $l17, $l19, $l20, $l21, $l22;
        org.apache.lucene.util.packed.BulkOperationPacked r0;
        long[] r1, r2;
        int i0, $i1, $i2, $i3, $i4, $i9, $i10, $i11, $i12, $i16, $i18, i23, i24, i25, i26;

        r0 := @this: org.apache.lucene.util.packed.BulkOperationPacked;

        r2 := @parameter0: long[];

        i23 := @parameter1: int;

        r1 := @parameter2: long[];

        i24 := @parameter3: int;

        i0 := @parameter4: int;

        i25 = 64;

        i26 = 0;

     label1:
        $i1 = r0.<org.apache.lucene.util.packed.BulkOperationPacked: int longValueCount>;

        $i2 = $i1 * i0;

        if i26 >= $i2 goto label4;

        $i3 = r0.<org.apache.lucene.util.packed.BulkOperationPacked: int bitsPerValue>;

        i25 = i25 - $i3;

        if i25 >= 0 goto label2;

        $i9 = i24;

        i24 = i24 + 1;

        $i10 = i23;

        i23 = i23 + 1;

        $l15 = r2[$i10];

        $i11 = r0.<org.apache.lucene.util.packed.BulkOperationPacked: int bitsPerValue>;

        $i12 = $i11 + i25;

        $l13 = 1L << $i12;

        $l14 = $l13 - 1L;

        $l17 = $l15 & $l14;

        $i16 = neg i25;

        $l21 = $l17 << $i16;

        $l19 = r2[i23];

        $i18 = 64 + i25;

        $l20 = $l19 >>> $i18;

        $l22 = $l21 | $l20;

        r1[$i9] = $l22;

        i25 = i25 + 64;

        goto label3;

     label2:
        $i4 = i24;

        i24 = i24 + 1;

        $l5 = r2[i23];

        $l7 = $l5 >>> i25;

        $l6 = r0.<org.apache.lucene.util.packed.BulkOperationPacked: long mask>;

        $l8 = $l7 & $l6;

        r1[$i4] = $l8;

     label3:
        i26 = i26 + 1;

        goto label1;

     label4:
        return;
    }

    public void decode(byte[], int, long[], int, int)
    {
        byte[] r2;
        byte $b5;
        boolean $z0;
        long $l6, l7, $l9, $l10, $l13, $l14, $l15, $l18, $l19, $l20, $l21, l24;
        java.lang.AssertionError $r4;
        org.apache.lucene.util.packed.BulkOperationPacked r0;
        long[] r3;
        int i0, $i1, $i2, $i3, $i4, $i8, $i11, $i12, $i16, $i17, i22, i23, i25, i26, i27, $i29;

        r0 := @this: org.apache.lucene.util.packed.BulkOperationPacked;

        r2 := @parameter0: byte[];

        i22 := @parameter1: int;

        r3 := @parameter2: long[];

        i23 := @parameter3: int;

        i0 := @parameter4: int;

        l24 = 0L;

        i25 = r0.<org.apache.lucene.util.packed.BulkOperationPacked: int bitsPerValue>;

        i26 = 0;

     label1:
        $i1 = r0.<org.apache.lucene.util.packed.BulkOperationPacked: int byteBlockCount>;

        $i2 = i0 * $i1;

        if i26 >= $i2 goto label6;

        $i4 = i22;

        i22 = i22 + 1;

        $b5 = r2[$i4];

        $l6 = (long) $b5;

        l7 = $l6 & 255L;

        if i25 <= 8 goto label2;

        $i29 = (int) -8;

        i25 = i25 + $i29;

        $l21 = l7 << i25;

        l24 = l24 | $l21;

        goto label5;

     label2:
        i27 = 8 - i25;

        $i8 = i23;

        i23 = i23 + 1;

        $l9 = l7 >>> i27;

        $l10 = l24 | $l9;

        r3[$i8] = $l10;

     label3:
        $i11 = r0.<org.apache.lucene.util.packed.BulkOperationPacked: int bitsPerValue>;

        if i27 < $i11 goto label4;

        $i16 = r0.<org.apache.lucene.util.packed.BulkOperationPacked: int bitsPerValue>;

        i27 = i27 - $i16;

        $i17 = i23;

        i23 = i23 + 1;

        $l19 = l7 >>> i27;

        $l18 = r0.<org.apache.lucene.util.packed.BulkOperationPacked: long mask>;

        $l20 = $l19 & $l18;

        r3[$i17] = $l20;

        goto label3;

     label4:
        $i12 = r0.<org.apache.lucene.util.packed.BulkOperationPacked: int bitsPerValue>;

        i25 = $i12 - i27;

        $l13 = 1L << i27;

        $l14 = $l13 - 1L;

        $l15 = l7 & $l14;

        l24 = $l15 << i25;

     label5:
        i26 = i26 + 1;

        goto label1;

     label6:
        $z0 = <org.apache.lucene.util.packed.BulkOperationPacked: boolean $assertionsDisabled>;

        if $z0 != 0 goto label7;

        $i3 = r0.<org.apache.lucene.util.packed.BulkOperationPacked: int bitsPerValue>;

        if i25 == $i3 goto label7;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label7:
        return;
    }

    public void decode(long[], int, int[], int, int)
    {
        int[] r1;
        java.lang.StringBuilder $r4, $r5, $r6, $r7;
        long $l6, $l7, $l8, $l9, $l15, $l16, $l17, $l19, $l21, $l22, $l23, $l24;
        org.apache.lucene.util.packed.BulkOperationPacked r0;
        long[] r2;
        int $i0, i1, $i2, $i3, $i4, $i5, $i10, $i11, $i12, $i13, $i14, $i18, $i20, $i25, $i26, i27, i28, i29, i30;
        java.lang.String $r8;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: org.apache.lucene.util.packed.BulkOperationPacked;

        r2 := @parameter0: long[];

        i27 := @parameter1: int;

        r1 := @parameter2: int[];

        i28 := @parameter3: int;

        i1 := @parameter4: int;

        $i0 = r0.<org.apache.lucene.util.packed.BulkOperationPacked: int bitsPerValue>;

        if $i0 <= 32 goto label1;

        $r3 = new java.lang.UnsupportedOperationException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot decode ");

        $i26 = r0.<org.apache.lucene.util.packed.BulkOperationPacked: int bitsPerValue>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i26);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-bits values into an int[]");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r8);

        throw $r3;

     label1:
        i29 = 64;

        i30 = 0;

     label2:
        $i2 = r0.<org.apache.lucene.util.packed.BulkOperationPacked: int longValueCount>;

        $i3 = $i2 * i1;

        if i30 >= $i3 goto label5;

        $i4 = r0.<org.apache.lucene.util.packed.BulkOperationPacked: int bitsPerValue>;

        i29 = i29 - $i4;

        if i29 >= 0 goto label3;

        $i11 = i28;

        i28 = i28 + 1;

        $i12 = i27;

        i27 = i27 + 1;

        $l17 = r2[$i12];

        $i13 = r0.<org.apache.lucene.util.packed.BulkOperationPacked: int bitsPerValue>;

        $i14 = $i13 + i29;

        $l15 = 1L << $i14;

        $l16 = $l15 - 1L;

        $l19 = $l17 & $l16;

        $i18 = neg i29;

        $l23 = $l19 << $i18;

        $l21 = r2[i27];

        $i20 = 64 + i29;

        $l22 = $l21 >>> $i20;

        $l24 = $l23 | $l22;

        $i25 = (int) $l24;

        r1[$i11] = $i25;

        i29 = i29 + 64;

        goto label4;

     label3:
        $i5 = i28;

        i28 = i28 + 1;

        $l6 = r2[i27];

        $l8 = $l6 >>> i29;

        $l7 = r0.<org.apache.lucene.util.packed.BulkOperationPacked: long mask>;

        $l9 = $l8 & $l7;

        $i10 = (int) $l9;

        r1[$i5] = $i10;

     label4:
        i30 = i30 + 1;

        goto label2;

     label5:
        return;
    }

    public void decode(byte[], int, int[], int, int)
    {
        byte[] r2;
        byte $b5;
        int[] r3;
        boolean $z0;
        java.lang.AssertionError $r4;
        org.apache.lucene.util.packed.BulkOperationPacked r0;
        short s6, $s27;
        int i0, $i1, $i2, $i3, $i4, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, i21, i22, i23, i24, i25, i26, $i29, $i30, $i31, $i32, $i33;

        r0 := @this: org.apache.lucene.util.packed.BulkOperationPacked;

        r2 := @parameter0: byte[];

        i21 := @parameter1: int;

        r3 := @parameter2: int[];

        i22 := @parameter3: int;

        i0 := @parameter4: int;

        i23 = 0;

        i24 = r0.<org.apache.lucene.util.packed.BulkOperationPacked: int bitsPerValue>;

        i25 = 0;

     label1:
        $i1 = r0.<org.apache.lucene.util.packed.BulkOperationPacked: int byteBlockCount>;

        $i2 = i0 * $i1;

        if i25 >= $i2 goto label6;

        $i4 = i21;

        i21 = i21 + 1;

        $b5 = r2[$i4];

        $s27 = (short) $b5;

        s6 = $s27 & 255;

        if i24 <= 8 goto label2;

        $i29 = (int) -8;

        i24 = i24 + $i29;

        $i30 = (int) s6;

        $i20 = $i30 << i24;

        i23 = i23 | $i20;

        goto label5;

     label2:
        i26 = 8 - i24;

        $i7 = i22;

        i22 = i22 + 1;

        $i31 = (int) s6;

        $i8 = $i31 >>> i26;

        $i9 = i23 | $i8;

        r3[$i7] = $i9;

     label3:
        $i10 = r0.<org.apache.lucene.util.packed.BulkOperationPacked: int bitsPerValue>;

        if i26 < $i10 goto label4;

        $i15 = r0.<org.apache.lucene.util.packed.BulkOperationPacked: int bitsPerValue>;

        i26 = i26 - $i15;

        $i16 = i22;

        i22 = i22 + 1;

        $i32 = (int) s6;

        $i18 = $i32 >>> i26;

        $i17 = r0.<org.apache.lucene.util.packed.BulkOperationPacked: int intMask>;

        $i19 = $i18 & $i17;

        r3[$i16] = $i19;

        goto label3;

     label4:
        $i11 = r0.<org.apache.lucene.util.packed.BulkOperationPacked: int bitsPerValue>;

        i24 = $i11 - i26;

        $i12 = 1 << i26;

        $i13 = $i12 - 1;

        $i33 = (int) s6;

        $i14 = $i33 & $i13;

        i23 = $i14 << i24;

     label5:
        i25 = i25 + 1;

        goto label1;

     label6:
        $z0 = <org.apache.lucene.util.packed.BulkOperationPacked: boolean $assertionsDisabled>;

        if $z0 != 0 goto label7;

        $i3 = r0.<org.apache.lucene.util.packed.BulkOperationPacked: int bitsPerValue>;

        if i24 == $i3 goto label7;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label7:
        return;
    }

    public void encode(long[], int, long[], int, int)
    {
        long $l5, $l6, $l10, $l11, $l12, $l14, $l16, $l19, $l20, l23, l26, l27;
        org.apache.lucene.util.packed.BulkOperationPacked r0;
        long[] r1, r2;
        int i0, $i1, $i2, $i3, $i4, $i7, $i8, $i9, $i13, $i15, $i17, $i18, i21, i22, i24, i25;

        r0 := @this: org.apache.lucene.util.packed.BulkOperationPacked;

        r1 := @parameter0: long[];

        i21 := @parameter1: int;

        r2 := @parameter2: long[];

        i22 := @parameter3: int;

        i0 := @parameter4: int;

        l23 = 0L;

        i24 = 64;

        i25 = 0;

     label1:
        $i1 = r0.<org.apache.lucene.util.packed.BulkOperationPacked: int longValueCount>;

        $i2 = $i1 * i0;

        if i25 >= $i2 goto label5;

        $i3 = r0.<org.apache.lucene.util.packed.BulkOperationPacked: int bitsPerValue>;

        i24 = i24 - $i3;

        if i24 <= 0 goto label2;

        $i18 = i21;

        i21 = i21 + 1;

        $l19 = r1[$i18];

        $l20 = $l19 << i24;

        l23 = l23 | $l20;

        goto label4;

     label2:
        if i24 != 0 goto label3;

        $i15 = i21;

        i21 = i21 + 1;

        $l16 = r1[$i15];

        l26 = l23 | $l16;

        $i17 = i22;

        i22 = i22 + 1;

        r2[$i17] = l26;

        l23 = 0L;

        i24 = 64;

        goto label4;

     label3:
        $l5 = r1[i21];

        $i4 = neg i24;

        $l6 = $l5 >>> $i4;

        l27 = l23 | $l6;

        $i7 = i22;

        i22 = i22 + 1;

        r2[$i7] = l27;

        $i8 = i21;

        i21 = i21 + 1;

        $l12 = r1[$i8];

        $i9 = neg i24;

        $l10 = 1L << $i9;

        $l11 = $l10 - 1L;

        $l14 = $l12 & $l11;

        $i13 = 64 + i24;

        l23 = $l14 << $i13;

        i24 = i24 + 64;

     label4:
        i25 = i25 + 1;

        goto label1;

     label5:
        return;
    }

    public void encode(int[], int, long[], int, int)
    {
        int[] r1;
        long $l5, $l7, $l8, $l13, $l14, $l15, $l17, $l20, $l21, $l25, $l26, $l27, l30, l33, l34;
        org.apache.lucene.util.packed.BulkOperationPacked r0;
        long[] r2;
        int i0, $i1, $i2, $i3, $i4, $i6, $i9, $i10, $i11, $i12, $i16, $i18, $i19, $i22, $i23, $i24, i28, i29, i31, i32;

        r0 := @this: org.apache.lucene.util.packed.BulkOperationPacked;

        r1 := @parameter0: int[];

        i28 := @parameter1: int;

        r2 := @parameter2: long[];

        i29 := @parameter3: int;

        i0 := @parameter4: int;

        l30 = 0L;

        i31 = 64;

        i32 = 0;

     label1:
        $i1 = r0.<org.apache.lucene.util.packed.BulkOperationPacked: int longValueCount>;

        $i2 = $i1 * i0;

        if i32 >= $i2 goto label5;

        $i3 = r0.<org.apache.lucene.util.packed.BulkOperationPacked: int bitsPerValue>;

        i31 = i31 - $i3;

        if i31 <= 0 goto label2;

        $i23 = i28;

        i28 = i28 + 1;

        $i24 = r1[$i23];

        $l25 = (long) $i24;

        $l26 = $l25 & 4294967295L;

        $l27 = $l26 << i31;

        l30 = l30 | $l27;

        goto label4;

     label2:
        if i31 != 0 goto label3;

        $i18 = i28;

        i28 = i28 + 1;

        $i19 = r1[$i18];

        $l20 = (long) $i19;

        $l21 = $l20 & 4294967295L;

        l33 = l30 | $l21;

        $i22 = i29;

        i29 = i29 + 1;

        r2[$i22] = l33;

        l30 = 0L;

        i31 = 64;

        goto label4;

     label3:
        $i4 = r1[i28];

        $l5 = (long) $i4;

        $l7 = $l5 & 4294967295L;

        $i6 = neg i31;

        $l8 = $l7 >>> $i6;

        l34 = l30 | $l8;

        $i9 = i29;

        i29 = i29 + 1;

        r2[$i9] = l34;

        $i10 = i28;

        i28 = i28 + 1;

        $i11 = r1[$i10];

        $l15 = (long) $i11;

        $i12 = neg i31;

        $l13 = 1L << $i12;

        $l14 = $l13 - 1L;

        $l17 = $l15 & $l14;

        $i16 = 64 + i31;

        l30 = $l17 << $i16;

        i31 = i31 + 64;

     label4:
        i32 = i32 + 1;

        goto label1;

     label5:
        return;
    }

    public void encode(long[], int, byte[], int, int)
    {
        byte[] r3;
        byte $b11, $b19;
        boolean $z0, $z1;
        long l4, $l7, $l8, $l9, $l12, $l13, $l14, $l15, $l17, $l22, $l23, $l24;
        java.lang.AssertionError $r5, $r6;
        org.apache.lucene.util.packed.BulkOperationPacked r0;
        long[] r2;
        int i0, $i1, $i2, $i3, $i5, $i6, $i10, $i16, $i18, $i20, $i21, $i25, $i26, $i27, $i28, i29, i30, i31, i32, i33, $i34, i35, $i37;

        r0 := @this: org.apache.lucene.util.packed.BulkOperationPacked;

        r2 := @parameter0: long[];

        i29 := @parameter1: int;

        r3 := @parameter2: byte[];

        i30 := @parameter3: int;

        i0 := @parameter4: int;

        i31 = 0;

        i32 = 8;

        i33 = 0;

     label1:
        $i1 = r0.<org.apache.lucene.util.packed.BulkOperationPacked: int byteValueCount>;

        $i2 = $i1 * i0;

        if i33 >= $i2 goto label7;

        $i3 = i29;

        i29 = i29 + 1;

        l4 = r2[$i3];

        $z1 = <org.apache.lucene.util.packed.BulkOperationPacked: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $i26 = r0.<org.apache.lucene.util.packed.BulkOperationPacked: int bitsPerValue>;

        if $i26 == 64 goto label2;

        $i27 = staticinvoke <org.apache.lucene.util.packed.PackedInts: int bitsRequired(long)>(l4);

        $i28 = r0.<org.apache.lucene.util.packed.BulkOperationPacked: int bitsPerValue>;

        if $i27 <= $i28 goto label2;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label2:
        $i34 = r0.<org.apache.lucene.util.packed.BulkOperationPacked: int bitsPerValue>;

        if $i34 >= i32 goto label3;

        $l23 = (long) i31;

        $i20 = r0.<org.apache.lucene.util.packed.BulkOperationPacked: int bitsPerValue>;

        $i21 = i32 - $i20;

        $l22 = l4 << $i21;

        $l24 = $l23 | $l22;

        i31 = (int) $l24;

        $i25 = r0.<org.apache.lucene.util.packed.BulkOperationPacked: int bitsPerValue>;

        i32 = i32 - $i25;

        goto label6;

     label3:
        $i5 = r0.<org.apache.lucene.util.packed.BulkOperationPacked: int bitsPerValue>;

        i35 = $i5 - i32;

        $i6 = i30;

        i30 = i30 + 1;

        $l8 = (long) i31;

        $l7 = l4 >>> i35;

        $l9 = $l8 | $l7;

        $i10 = (int) $l9;

        $b11 = (byte) $i10;

        r3[$i6] = $b11;

     label4:
        if i35 < 8 goto label5;

        $i37 = (int) -8;

        i35 = i35 + $i37;

        $i16 = i30;

        i30 = i30 + 1;

        $l17 = l4 >>> i35;

        $i18 = (int) $l17;

        $b19 = (byte) $i18;

        r3[$i16] = $b19;

        goto label4;

     label5:
        i32 = 8 - i35;

        $l12 = 1L << i35;

        $l13 = $l12 - 1L;

        $l14 = l4 & $l13;

        $l15 = $l14 << i32;

        i31 = (int) $l15;

     label6:
        i33 = i33 + 1;

        goto label1;

     label7:
        $z0 = <org.apache.lucene.util.packed.BulkOperationPacked: boolean $assertionsDisabled>;

        if $z0 != 0 goto label8;

        if i32 == 8 goto label8;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label8:
        return;
    }

    public void encode(int[], int, byte[], int, int)
    {
        byte[] r3;
        byte $b10, $b16;
        int[] r2;
        boolean $z0, $z1;
        long $l21, $l22;
        java.lang.AssertionError $r5, $r6;
        org.apache.lucene.util.packed.BulkOperationPacked r0;
        int i0, $i1, $i2, $i3, i4, $i5, $i6, $i7, $i8, $i9, $i11, $i12, $i13, $i14, $i15, $i17, $i18, $i19, $i20, $i23, $i24, i25, i26, i27, i28, i29, i30, $i32;

        r0 := @this: org.apache.lucene.util.packed.BulkOperationPacked;

        r2 := @parameter0: int[];

        i25 := @parameter1: int;

        r3 := @parameter2: byte[];

        i26 := @parameter3: int;

        i0 := @parameter4: int;

        i27 = 0;

        i28 = 8;

        i29 = 0;

     label1:
        $i1 = r0.<org.apache.lucene.util.packed.BulkOperationPacked: int byteValueCount>;

        $i2 = $i1 * i0;

        if i29 >= $i2 goto label7;

        $i3 = i25;

        i25 = i25 + 1;

        i4 = r2[$i3];

        $z1 = <org.apache.lucene.util.packed.BulkOperationPacked: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $l21 = (long) i4;

        $l22 = $l21 & 4294967295L;

        $i23 = staticinvoke <org.apache.lucene.util.packed.PackedInts: int bitsRequired(long)>($l22);

        $i24 = r0.<org.apache.lucene.util.packed.BulkOperationPacked: int bitsPerValue>;

        if $i23 <= $i24 goto label2;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label2:
        $i5 = r0.<org.apache.lucene.util.packed.BulkOperationPacked: int bitsPerValue>;

        if $i5 >= i28 goto label3;

        $i17 = r0.<org.apache.lucene.util.packed.BulkOperationPacked: int bitsPerValue>;

        $i18 = i28 - $i17;

        $i19 = i4 << $i18;

        i27 = i27 | $i19;

        $i20 = r0.<org.apache.lucene.util.packed.BulkOperationPacked: int bitsPerValue>;

        i28 = i28 - $i20;

        goto label6;

     label3:
        $i6 = r0.<org.apache.lucene.util.packed.BulkOperationPacked: int bitsPerValue>;

        i30 = $i6 - i28;

        $i7 = i26;

        i26 = i26 + 1;

        $i8 = i4 >>> i30;

        $i9 = i27 | $i8;

        $b10 = (byte) $i9;

        r3[$i7] = $b10;

     label4:
        if i30 < 8 goto label5;

        $i32 = (int) -8;

        i30 = i30 + $i32;

        $i14 = i26;

        i26 = i26 + 1;

        $i15 = i4 >>> i30;

        $b16 = (byte) $i15;

        r3[$i14] = $b16;

        goto label4;

     label5:
        i28 = 8 - i30;

        $i11 = 1 << i30;

        $i12 = $i11 - 1;

        $i13 = i4 & $i12;

        i27 = $i13 << i28;

     label6:
        i29 = i29 + 1;

        goto label1;

     label7:
        $z0 = <org.apache.lucene.util.packed.BulkOperationPacked: boolean $assertionsDisabled>;

        if $z0 != 0 goto label8;

        if i28 == 8 goto label8;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label8:
        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/util/packed/BulkOperationPacked;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.util.packed.BulkOperationPacked: boolean $assertionsDisabled> = $z1;

        return;
    }
}
