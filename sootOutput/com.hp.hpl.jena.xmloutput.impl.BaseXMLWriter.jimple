public abstract class com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter extends java.lang.Object implements com.hp.hpl.jena.xmloutput.RDFXMLWriterI
{
    private static final java.lang.String newline;
    private static final java.lang.String DEFAULT_NS_ENTITY_NAME;
    private static final java.lang.String DEFAULT_NS_ENTITY_NAME_ALT;
    private java.lang.String defaultNSEntityName;
    private static org.slf4j.Logger xlogger;
    protected static com.hp.hpl.jena.xmloutput.impl.SimpleLogger logger;
    private static java.util.Set badRDF;
    private int jenaPrefixCount;
    static java.lang.String RDFNS;
    private static java.util.regex.Pattern jenaNamespace;
    java.lang.String xmlBase;
    private org.apache.jena.iri.IRI baseURI;
    boolean longId;
    private boolean demandGoodURIs;
    int tabSize;
    int width;
    java.util.HashMap anonMap;
    int anonCount;
    private static com.hp.hpl.jena.rdf.model.impl.RDFDefaultErrorHandler defaultErrorHandler;
    com.hp.hpl.jena.rdf.model.RDFErrorHandler errorHandler;
    java.lang.Boolean showXmlDeclaration;
    protected java.lang.Boolean showDoctypeDeclaration;
    private boolean writingAllModelPrefixNamespaces;
    private com.hp.hpl.jena.xmloutput.impl.Relation nameSpaces;
    private java.util.Map ns;
    private com.hp.hpl.jena.shared.PrefixMapping modelPrefixMapping;
    private java.util.Set namespacesNeeded;
    private static final int FAST;
    private static final int START;
    private static final int END;
    private static final int ATTR;
    private static final int FASTATTR;
    public static boolean dbg;
    static org.apache.jena.iri.IRIFactory factory;
    protected static final java.util.regex.Pattern predefinedEntityNames;
    private java.lang.String attributeQuoteChar;
    private static final char ESCAPE;
    static final char[] hexchar;
    private com.hp.hpl.jena.rdf.model.Resource[] blockedRules;
    private int relativeFlags;

    public void <init>()
    {
        com.hp.hpl.jena.rdf.model.impl.RDFDefaultErrorHandler $r2;
        com.hp.hpl.jena.xmloutput.impl.Relation $r4;
        com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter r0;
        java.lang.Boolean $r3;
        com.hp.hpl.jena.rdf.model.Resource[] $r5;
        java.util.HashMap $r1;
        com.hp.hpl.jena.rdf.model.Resource $r6;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.lang.String defaultNSEntityName> = "UNSET";

        r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.lang.String xmlBase> = null;

        r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: boolean longId> = 0;

        r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: boolean demandGoodURIs> = 1;

        r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: int tabSize> = 2;

        r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: int width> = 60;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.util.HashMap anonMap> = $r1;

        r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: int anonCount> = 0;

        $r2 = <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: com.hp.hpl.jena.rdf.model.impl.RDFDefaultErrorHandler defaultErrorHandler>;

        r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: com.hp.hpl.jena.rdf.model.RDFErrorHandler errorHandler> = $r2;

        r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.lang.Boolean showXmlDeclaration> = null;

        $r3 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.lang.Boolean showDoctypeDeclaration> = $r3;

        r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: boolean writingAllModelPrefixNamespaces> = 1;

        $r4 = new com.hp.hpl.jena.xmloutput.impl.Relation;

        specialinvoke $r4.<com.hp.hpl.jena.xmloutput.impl.Relation: void <init>()>();

        r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: com.hp.hpl.jena.xmloutput.impl.Relation nameSpaces> = $r4;

        r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.lang.String attributeQuoteChar> = "\"";

        $r5 = newarray (com.hp.hpl.jena.rdf.model.Resource)[1];

        $r6 = <com.hp.hpl.jena.vocabulary.RDFSyntax: com.hp.hpl.jena.rdf.model.Resource propertyAttr>;

        $r5[0] = $r6;

        r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: com.hp.hpl.jena.rdf.model.Resource[] blockedRules> = $r5;

        r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: int relativeFlags> = 29;

        virtualinvoke r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: void setupMaps()>();

        return;
    }

    public static com.hp.hpl.jena.xmloutput.impl.SimpleLogger setLogger(com.hp.hpl.jena.xmloutput.impl.SimpleLogger)
    {
        com.hp.hpl.jena.xmloutput.impl.SimpleLogger r0, r1;

        r1 := @parameter0: com.hp.hpl.jena.xmloutput.impl.SimpleLogger;

        r0 = <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: com.hp.hpl.jena.xmloutput.impl.SimpleLogger logger>;

        <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: com.hp.hpl.jena.xmloutput.impl.SimpleLogger logger> = r1;

        return r0;
    }

    protected abstract void unblockAll();

    protected abstract void blockRule(com.hp.hpl.jena.rdf.model.Resource);

    protected abstract void writeBody(com.hp.hpl.jena.rdf.model.Model, java.io.PrintWriter, java.lang.String, boolean);

    java.lang.String anonId(com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter r0;
        java.lang.String $r2;
        com.hp.hpl.jena.rdf.model.Resource r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        $z0 = r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: boolean longId>;

        if $z0 == 0 goto label1;

        $r2 = specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.lang.String longAnonId(com.hp.hpl.jena.rdf.model.Resource)>(r1);

        goto label2;

     label1:
        $r2 = specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.lang.String shortAnonId(com.hp.hpl.jena.rdf.model.Resource)>(r1);

     label2:
        return $r2;
    }

    private java.lang.String shortAnonId(com.hp.hpl.jena.rdf.model.Resource)
    {
        java.util.HashMap $r2, $r10;
        com.hp.hpl.jena.rdf.model.Resource r1;
        com.hp.hpl.jena.rdf.model.AnonId $r3, $r11;
        int $i0, $i1;
        com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter r0;
        java.lang.Object $r4;
        java.lang.StringBuilder $r5, $r6, $r8;
        java.lang.String $r7, $r9, r12;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        $r2 = r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.util.HashMap anonMap>;

        $r3 = interfaceinvoke r1.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.AnonId getId()>();

        $r4 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r3);

        r12 = (java.lang.String) $r4;

        if r12 != null goto label1;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("A");

        $i0 = r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: int anonCount>;

        $i1 = $i0 + 1;

        r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: int anonCount> = $i1;

        $r7 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        r12 = $r9;

        $r10 = r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.util.HashMap anonMap>;

        $r11 = interfaceinvoke r1.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.AnonId getId()>();

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, $r9);

     label1:
        return r12;
    }

    private java.lang.String longAnonId(com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.rdf.model.AnonId $r1;
        com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter r3;
        java.lang.String $r2, $r4;
        com.hp.hpl.jena.rdf.model.Resource r0;
        boolean $z0;

        r3 := @this: com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.AnonId getId()>();

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.rdf.model.AnonId: java.lang.String toString()>();

        $z0 = staticinvoke <org.apache.xerces.util.XMLChar: boolean isValidNCName(java.lang.String)>($r2);

        if $z0 == 0 goto label1;

        $r4 = $r2;

        goto label2;

     label1:
        $r4 = staticinvoke <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.lang.String escapedId(java.lang.String)>($r2);

     label2:
        return $r4;
    }

    void addNameSpace(java.lang.String)
    {
        com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter r0;
        java.util.Set $r2;
        java.lang.String r1;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.util.Set namespacesNeeded>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1);

        return;
    }

    boolean isDefaultNamespace(java.lang.String)
    {
        java.util.Map $r2;
        com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter r0;
        java.lang.Object $r4;
        java.lang.String r1, $r3;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter;

        r1 := @parameter0: java.lang.String;

        $r3 = "";

        $r2 = r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.util.Map ns>;

        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        return $z0;
    }

    private void addNameSpaces(com.hp.hpl.jena.rdf.model.Model)
    {
        com.hp.hpl.jena.rdf.model.Model r0;
        com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter r2;
        com.hp.hpl.jena.rdf.model.NsIterator $r1;
        java.lang.String $r3;
        boolean $z0;

        r2 := @this: com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.NsIterator listNameSpaces()>();

     label1:
        $z0 = interfaceinvoke $r1.<com.hp.hpl.jena.rdf.model.NsIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r1.<com.hp.hpl.jena.rdf.model.NsIterator: java.lang.String nextNs()>();

        virtualinvoke r2.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: void addNameSpace(java.lang.String)>($r3);

        goto label1;

     label2:
        return;
    }

    private void primeNamespace(com.hp.hpl.jena.rdf.model.Model)
    {
        java.util.Map $r1;
        int i0;
        java.lang.String $r10, $r11, r13, r14;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.Map$Entry r12;
        java.util.Iterator $r3;
        java.util.Set $r2;
        com.hp.hpl.jena.rdf.model.Model r0;
        com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter r4;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.Object $r8, $r9;

        r4 := @this: com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Model: java.util.Map getNsPrefixMap()>();

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r8 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r12 = (java.util.Map$Entry) $r8;

        $r9 = interfaceinvoke r12.<java.util.Map$Entry: java.lang.Object getValue()>();

        r13 = (java.lang.String) $r9;

        $r10 = virtualinvoke r4.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.lang.String getPrefixFor(java.lang.String)>(r13);

        if $r10 != null goto label2;

        $r11 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Model: java.lang.String getNsURIPrefix(java.lang.String)>(r13);

        virtualinvoke r4.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: void setNsPrefix(java.lang.String,java.lang.String)>($r11, r13);

        $z3 = r4.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: boolean writingAllModelPrefixNamespaces>;

        if $z3 == 0 goto label2;

        virtualinvoke r4.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: void addNameSpace(java.lang.String)>(r13);

     label2:
        goto label1;

     label3:
        $z1 = staticinvoke <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: boolean usesPrefix(com.hp.hpl.jena.rdf.model.Model,java.lang.String)>(r0, "");

        if $z1 == 0 goto label7;

        r14 = "this";

        $z2 = staticinvoke <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: boolean usesPrefix(com.hp.hpl.jena.rdf.model.Model,java.lang.String)>(r0, "this");

        if $z2 == 0 goto label4;

        r14 = "here";

     label4:
        i0 = 0;

     label5:
        $z4 = staticinvoke <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: boolean usesPrefix(com.hp.hpl.jena.rdf.model.Model,java.lang.String)>(r0, r14);

        if $z4 == 0 goto label6;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("here.");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        r14 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        i0 = i0 + 1;

        goto label5;

     label6:
        r4.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.lang.String defaultNSEntityName> = r14;

     label7:
        return;
    }

    void setupMaps()
    {
        com.hp.hpl.jena.xmloutput.impl.Relation $r1, $r3, $r5, $r7, $r9, $r10, $r12;
        com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter r0;
        java.lang.String $r2, $r4, $r6, $r8, $r11;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter;

        $r1 = r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: com.hp.hpl.jena.xmloutput.impl.Relation nameSpaces>;

        $r2 = staticinvoke <com.hp.hpl.jena.vocabulary.RDF: java.lang.String getURI()>();

        virtualinvoke $r1.<com.hp.hpl.jena.xmloutput.impl.Relation: void set11(java.lang.Object,java.lang.Object)>($r2, "rdf");

        $r3 = r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: com.hp.hpl.jena.xmloutput.impl.Relation nameSpaces>;

        $r4 = staticinvoke <com.hp.hpl.jena.vocabulary.RDFS: java.lang.String getURI()>();

        virtualinvoke $r3.<com.hp.hpl.jena.xmloutput.impl.Relation: void set11(java.lang.Object,java.lang.Object)>($r4, "rdfs");

        $r5 = r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: com.hp.hpl.jena.xmloutput.impl.Relation nameSpaces>;

        $r6 = staticinvoke <com.hp.hpl.jena.vocabulary.DC: java.lang.String getURI()>();

        virtualinvoke $r5.<com.hp.hpl.jena.xmloutput.impl.Relation: void set11(java.lang.Object,java.lang.Object)>($r6, "dc");

        $r7 = r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: com.hp.hpl.jena.xmloutput.impl.Relation nameSpaces>;

        $r8 = staticinvoke <com.hp.hpl.jena.vocabulary.RSS: java.lang.String getURI()>();

        virtualinvoke $r7.<com.hp.hpl.jena.xmloutput.impl.Relation: void set11(java.lang.Object,java.lang.Object)>($r8, "rss");

        $r9 = r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: com.hp.hpl.jena.xmloutput.impl.Relation nameSpaces>;

        virtualinvoke $r9.<com.hp.hpl.jena.xmloutput.impl.Relation: void set11(java.lang.Object,java.lang.Object)>("http://www.daml.org/2001/03/daml+oil.daml#", "daml");

        $r10 = r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: com.hp.hpl.jena.xmloutput.impl.Relation nameSpaces>;

        $r11 = staticinvoke <com.hp.hpl.jena.vocabulary.VCARD: java.lang.String getURI()>();

        virtualinvoke $r10.<com.hp.hpl.jena.xmloutput.impl.Relation: void set11(java.lang.Object,java.lang.Object)>($r11, "vcard");

        $r12 = r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: com.hp.hpl.jena.xmloutput.impl.Relation nameSpaces>;

        virtualinvoke $r12.<com.hp.hpl.jena.xmloutput.impl.Relation: void set11(java.lang.Object,java.lang.Object)>("http://www.w3.org/2002/07/owl#", "owl");

        return;
    }

    void workOutNamespaces()
    {
        java.util.HashSet $r3;
        java.util.Map $r1, $r4, $r5;
        com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter r0;
        java.util.HashMap $r2;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter;

        $r1 = r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.util.Map ns>;

        if $r1 != null goto label1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.util.Map ns> = $r2;

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        $r4 = r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.util.Map ns>;

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: void setFromWriterSystemProperties(java.util.Map,java.util.Set)>($r4, $r3);

        $r5 = r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.util.Map ns>;

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: void setFromGivenNamespaces(java.util.Map,java.util.Set)>($r5, $r3);

     label1:
        return;
    }

    private void setFromWriterSystemProperties(java.util.Map, java.util.Set)
    {
        java.util.Iterator $r2;
        java.util.Set $r1, r10;
        java.util.Map r11;
        com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter r0;
        java.lang.Object $r3;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String r4, $r8, $r9;
        boolean $z0, $z1, $z2;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter;

        r11 := @parameter0: java.util.Map;

        r10 := @parameter1: java.util.Set;

        $r1 = r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.util.Set namespacesNeeded>;

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r3;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("com.hp.hpl.jena.nsprefix.");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = staticinvoke <com.hp.hpl.jena.JenaRuntime: java.lang.String getSystemProperty(java.lang.String)>($r8);

        if $r9 == null goto label2;

        $z1 = specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: boolean checkLegalPrefix(java.lang.String)>($r9);

        if $z1 == 0 goto label2;

        $z2 = interfaceinvoke r10.<java.util.Set: boolean contains(java.lang.Object)>($r9);

        if $z2 != 0 goto label2;

        interfaceinvoke r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, $r9);

        interfaceinvoke r10.<java.util.Set: boolean add(java.lang.Object)>($r9);

     label2:
        goto label1;

     label3:
        return;
    }

    private void setFromGivenNamespaces(java.util.Map, java.util.Set)
    {
        com.hp.hpl.jena.xmloutput.impl.Relation $r6;
        java.util.Map r5;
        int $i0, $i1;
        java.lang.String r4, $r12, r15;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.Iterator $r2, $r13;
        java.util.Set $r1, $r7, r8;
        com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter r0;
        java.lang.Object $r3, $r14;
        java.lang.StringBuilder $r9, $r10, $r11;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter;

        r5 := @parameter0: java.util.Map;

        r8 := @parameter1: java.util.Set;

        $r1 = r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.util.Set namespacesNeeded>;

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z4 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label7;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r3;

        $z0 = interfaceinvoke r5.<java.util.Map: boolean containsKey(java.lang.Object)>(r4);

        if $z0 == 0 goto label2;

        goto label1;

     label2:
        r15 = null;

        $r6 = r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: com.hp.hpl.jena.xmloutput.impl.Relation nameSpaces>;

        $r7 = virtualinvoke $r6.<com.hp.hpl.jena.xmloutput.impl.Relation: java.util.Set forward(java.lang.Object)>(r4);

        if $r7 == null goto label4;

        $r13 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

        $z2 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label3;

        $r14 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r15 = (java.lang.String) $r14;

     label3:
        $z3 = interfaceinvoke r8.<java.util.Set: boolean contains(java.lang.Object)>(r15);

        if $z3 == 0 goto label4;

        r15 = null;

     label4:
        if r15 != null goto label6;

     label5:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("j.");

        $i0 = r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: int jenaPrefixCount>;

        $i1 = $i0 + 1;

        r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: int jenaPrefixCount> = $i1;

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        r15 = $r12;

        $z1 = interfaceinvoke r8.<java.util.Set: boolean contains(java.lang.Object)>($r12);

        if $z1 != 0 goto label5;

     label6:
        interfaceinvoke r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r15);

        interfaceinvoke r8.<java.util.Set: boolean add(java.lang.Object)>(r15);

        goto label1;

     label7:
        return;
    }

    public final synchronized void setNsPrefix(java.lang.String, java.lang.String)
    {
        com.hp.hpl.jena.xmloutput.impl.Relation $r3;
        com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter r0;
        java.lang.String r1, r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $z0 = specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: boolean checkLegalPrefix(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        $r3 = r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: com.hp.hpl.jena.xmloutput.impl.Relation nameSpaces>;

        virtualinvoke $r3.<com.hp.hpl.jena.xmloutput.impl.Relation: void set11(java.lang.Object,java.lang.Object)>(r2, r1);

     label1:
        return;
    }

    public final java.lang.String getPrefixFor(java.lang.String)
    {
        java.util.Iterator $r6;
        java.util.Set $r5;
        com.hp.hpl.jena.xmloutput.impl.Relation $r4;
        int $i0;
        com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter r3;
        java.lang.Object $r7;
        java.lang.String r0, $r1, $r2, $r8;
        boolean $z0, $z1;

        r3 := @this: com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter;

        r0 := @parameter0: java.lang.String;

        $r1 = "http://www.w3.org/XML/1998/namespace";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        return "xml";

     label1:
        $r2 = "http://www.w3.org/2000/xmlns/";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z1 == 0 goto label2;

        return "xmlns";

     label2:
        $r4 = r3.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: com.hp.hpl.jena.xmloutput.impl.Relation nameSpaces>;

        $r5 = virtualinvoke $r4.<com.hp.hpl.jena.xmloutput.impl.Relation: java.util.Set backward(java.lang.Object)>(r0);

        if $r5 == null goto label3;

        $i0 = interfaceinvoke $r5.<java.util.Set: int size()>();

        if $i0 != 1 goto label3;

        $r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (java.lang.String) $r7;

        return $r8;

     label3:
        return null;
    }

    java.lang.String xmlnsDecl()
    {
        java.lang.StringBuffer $r1, $r13, $r14, $r17;
        java.util.Map $r2;
        int $i0;
        java.lang.String $r5, r9, r11, $r12, $r15, $r16;
        boolean $z0;
        java.util.Map$Entry r7;
        java.util.Iterator $r4;
        java.util.Set $r3;
        com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter r0;
        java.lang.Object $r6, $r8, $r10;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter;

        virtualinvoke r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: void workOutNamespaces()>();

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.util.Map ns>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.Map$Entry) $r6;

        $r8 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        r9 = (java.lang.String) $r8;

        $r10 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        r11 = (java.lang.String) $r10;

        $r12 = <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.lang.String newline>;

        $r13 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("    xmlns");

        $i0 = virtualinvoke r9.<java.lang.String: int length()>();

        if $i0 <= 0 goto label2;

        $r17 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58);

        virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r9);

     label2:
        $r14 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(61);

        $r15 = specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.lang.String checkURI(java.lang.String)>(r11);

        $r16 = virtualinvoke r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.lang.String substitutedAttribute(java.lang.String)>($r15);

        virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r16);

        goto label1;

     label3:
        $r5 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r5;
    }

    java.lang.String rdfEl(java.lang.String)
    {
        com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter r0;
        java.lang.String r1, $r2, $r3;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter;

        r1 := @parameter0: java.lang.String;

        $r2 = <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.lang.String RDFNS>;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.lang.String tag(java.lang.String,java.lang.String,int,boolean)>($r2, r1, 1, 1);

        return $r3;
    }

    java.lang.String startElementTag(java.lang.String, java.lang.String)
    {
        com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter r0;
        java.lang.String r1, r2, $r3;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.lang.String tag(java.lang.String,java.lang.String,int,boolean)>(r1, r2, 2, 0);

        return $r3;
    }

    protected java.lang.String startElementTag(java.lang.String)
    {
        com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter r0;
        java.lang.String r1, $r2;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.lang.String splitTag(java.lang.String,int)>(r1, 2);

        return $r2;
    }

    java.lang.String attributeTag(java.lang.String)
    {
        com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter r0;
        java.lang.String r1, $r2;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.lang.String splitTag(java.lang.String,int)>(r1, 4);

        return $r2;
    }

    java.lang.String attributeTag(java.lang.String, java.lang.String)
    {
        com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter r0;
        java.lang.String r1, r2, $r3;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.lang.String tag(java.lang.String,java.lang.String,int,boolean)>(r1, r2, 4, 0);

        return $r3;
    }

    java.lang.String rdfAt(java.lang.String)
    {
        com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter r0;
        java.lang.String r1, $r2, $r3;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter;

        r1 := @parameter0: java.lang.String;

        $r2 = <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.lang.String RDFNS>;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.lang.String tag(java.lang.String,java.lang.String,int,boolean)>($r2, r1, 5, 1);

        return $r3;
    }

    java.lang.String endElementTag(java.lang.String, java.lang.String)
    {
        com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter r0;
        java.lang.String r1, r2, $r3;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.lang.String tag(java.lang.String,java.lang.String,int,boolean)>(r1, r2, 3, 0);

        return $r3;
    }

    protected java.lang.String endElementTag(java.lang.String)
    {
        com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter r0;
        java.lang.String r1, $r2;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.lang.String splitTag(java.lang.String,int)>(r1, 3);

        return $r2;
    }

    java.lang.String splitTag(java.lang.String, int)
    {
        com.hp.hpl.jena.shared.InvalidPropertyURIException $r5;
        int $i0, $i1, i2;
        com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter r1;
        java.lang.String r0, $r2, $r3, $r4;

        r1 := @this: com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter;

        r0 := @parameter0: java.lang.String;

        i2 := @parameter1: int;

        $i0 = staticinvoke <com.hp.hpl.jena.rdf.model.impl.Util: int splitNamespace(java.lang.String)>(r0);

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != $i1 goto label1;

        $r5 = new com.hp.hpl.jena.shared.InvalidPropertyURIException;

        specialinvoke $r5.<com.hp.hpl.jena.shared.InvalidPropertyURIException: void <init>(java.lang.String)>(r0);

        throw $r5;

     label1:
        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i0);

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.lang.String tag(java.lang.String,java.lang.String,int,boolean)>($r2, $r3, i2, 1);

        return $r4;
    }

    java.lang.String tag(java.lang.String, java.lang.String, int, boolean)
    {
        java.util.Map $r2;
        boolean $z0, z1, $z2, $z3, $z4, z5;
        java.util.Set $r23;
        com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter r0;
        java.lang.StringBuilder $r4, $r5, $r6, $r8, $r11, $r13, $r14, $r15, $r18, $r19, $r20, $r24, $r26, $r27, $r28, $r31, $r32, $r33, $r35, $r36, $r37, $r40, $r42, $r43, $r44;
        com.hp.hpl.jena.xmloutput.impl.SimpleLogger $r12, $r25;
        int i0, $i1;
        java.lang.String r1, r7, $r9, $r10, $r16, $r21, $r22, $r29, $r34, $r38, $r39, $r45, $r46;
        com.hp.hpl.jena.shared.BrokenException $r17;
        java.io.PrintStream $r41;
        com.hp.hpl.jena.shared.InvalidPropertyURIException $r30;
        java.lang.Object $r3;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter;

        r1 := @parameter0: java.lang.String;

        r7 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        z1 := @parameter3: boolean;

        $z0 = <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: boolean dbg>;

        if $z0 == 0 goto label1;

        $r41 = <java.lang.System: java.io.PrintStream err>;

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        $r42 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - ");

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r41.<java.io.PrintStream: void println(java.lang.String)>($r45);

     label1:
        $r2 = r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.util.Map ns>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r46 = (java.lang.String) $r3;

        if i0 == 1 goto label3;

        if i0 == 5 goto label3;

        if z1 != 0 goto label2;

        $z4 = staticinvoke <org.apache.xerces.util.XMLChar: boolean isValidNCName(java.lang.String)>(r7);

        if $z4 != 0 goto label2;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        $r39 = virtualinvoke r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.lang.String splitTag(java.lang.String,int)>($r38, i0);

        return $r39;

     label2:
        $r22 = <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.lang.String RDFNS>;

        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r22);

        if $z2 == 0 goto label3;

        $r23 = <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.util.Set badRDF>;

        $z3 = interfaceinvoke $r23.<java.util.Set: boolean contains(java.lang.Object)>(r7);

        if $z3 == 0 goto label3;

        $r25 = <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: com.hp.hpl.jena.xmloutput.impl.SimpleLogger logger>;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The URI rdf:");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cannot be serialized in RDF/XML.");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r25.<com.hp.hpl.jena.xmloutput.impl.SimpleLogger: void warn(java.lang.String)>($r29);

        $r30 = new com.hp.hpl.jena.shared.InvalidPropertyURIException;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("rdf:");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r30.<com.hp.hpl.jena.shared.InvalidPropertyURIException: void <init>(java.lang.String)>($r34);

        throw $r30;

     label3:
        z5 = 0;

        if $r46 != null goto label4;

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.lang.String checkURI(java.lang.String)>(r1);

        $r12 = <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: com.hp.hpl.jena.xmloutput.impl.SimpleLogger logger>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Internal error: unexpected QName URI: <");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">.  Fixing up with j.cook.up code.");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $r17 = new com.hp.hpl.jena.shared.BrokenException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unexpected QName URI ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<com.hp.hpl.jena.shared.BrokenException: void <init>(java.lang.String)>($r21);

        interfaceinvoke $r12.<com.hp.hpl.jena.xmloutput.impl.SimpleLogger: void warn(java.lang.String,java.lang.Exception)>($r16, $r17);

        z5 = 1;

        goto label7;

     label4:
        $i1 = virtualinvoke $r46.<java.lang.String: int length()>();

        if $i1 != 0 goto label7;

        if i0 == 4 goto label5;

        if i0 != 5 goto label6;

     label5:
        z5 = 1;

        goto label7;

     label6:
        return r7;

     label7:
        if z5 == 0 goto label8;

        $r10 = specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.lang.String cookUpAttribution(int,java.lang.String,java.lang.String)>(i0, r1, r7);

        return $r10;

     label8:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r46);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    private java.lang.String cookUpAttribution(int, java.lang.String, java.lang.String)
    {
        int i0;
        java.lang.String r5, $r6, r11, $r13, $r21, $r23, $r29;
        com.hp.hpl.jena.shared.BrokenException $r24;
        com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter r4;
        java.lang.StringBuilder $r0, $r1, $r2, $r3, $r7, $r8, $r9, $r10, $r12, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r22, $r25, $r26, $r27, $r28;

        r4 := @this: com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter;

        i0 := @parameter0: int;

        r5 := @parameter1: java.lang.String;

        r11 := @parameter2: java.lang.String;

        tableswitch(i0)
        {
            case 1: goto label4;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label1;
            case 5: goto label1;
            default: goto label3;
        };

     label1:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("xmlns:");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("j.cook.up");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        $r6 = virtualinvoke r4.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.lang.String substitutedAttribute(java.lang.String)>(r5);

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("j.cook.up");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r13;

     label2:
        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("j.cook.up");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" xmlns:");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("j.cook.up");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        $r21 = virtualinvoke r4.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.lang.String substitutedAttribute(java.lang.String)>(r5);

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r23;

     label3:
        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("j.cook.up");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r29;

     label4:
        $r24 = new com.hp.hpl.jena.shared.BrokenException;

        specialinvoke $r24.<com.hp.hpl.jena.shared.BrokenException: void <init>(java.lang.String)>("cookup reached final FAST");

        throw $r24;
    }

    public final void write(com.hp.hpl.jena.rdf.model.Model, java.io.OutputStream, java.lang.String)
    {
        java.io.OutputStream r2;
        com.hp.hpl.jena.rdf.model.Model r1;
        java.io.Writer $r3;
        com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter r0;
        java.lang.String r4;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        r2 := @parameter1: java.io.OutputStream;

        r4 := @parameter2: java.lang.String;

        $r3 = staticinvoke <com.hp.hpl.jena.util.FileUtils: java.io.Writer asUTF8(java.io.OutputStream)>(r2);

        virtualinvoke r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: void write(com.hp.hpl.jena.rdf.model.Model,java.io.Writer,java.lang.String)>(r1, $r3, r4);

        return;
    }

    public synchronized void write(com.hp.hpl.jena.rdf.model.Model, java.io.Writer, java.lang.String)
    {
        java.io.PrintWriter r3, $r7;
        com.hp.hpl.jena.rdf.model.Model r1;
        java.io.Writer r2;
        com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter r0;
        java.lang.Boolean $r4, $r5;
        java.lang.String r6;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        r2 := @parameter1: java.io.Writer;

        r6 := @parameter2: java.lang.String;

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: void setupNamespaces(com.hp.hpl.jena.rdf.model.Model)>(r1);

        $z0 = r2 instanceof java.io.PrintWriter;

        if $z0 == 0 goto label1;

        $r7 = (java.io.PrintWriter) r2;

        goto label2;

     label1:
        $r7 = new java.io.PrintWriter;

        specialinvoke $r7.<java.io.PrintWriter: void <init>(java.io.Writer)>(r2);

     label2:
        r3 = $r7;

        $r5 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        $r4 = r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.lang.Boolean showXmlDeclaration>;

        $z1 = virtualinvoke $r5.<java.lang.Boolean: boolean equals(java.lang.Object)>($r4);

        if $z1 != 0 goto label3;

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: void writeXMLDeclaration(java.io.Writer,java.io.PrintWriter)>(r2, $r7);

     label3:
        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: void writeXMLBody(com.hp.hpl.jena.rdf.model.Model,java.io.PrintWriter,java.lang.String)>(r1, r3, r6);

        virtualinvoke r3.<java.io.PrintWriter: void flush()>();

        return;
    }

    private void setupNamespaces(com.hp.hpl.jena.rdf.model.Model)
    {
        java.util.HashSet $r1;
        com.hp.hpl.jena.rdf.model.Model r2;
        com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter r0;
        java.lang.String $r3;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter;

        r2 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.util.Set namespacesNeeded> = $r1;

        r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.util.Map ns> = null;

        r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: com.hp.hpl.jena.shared.PrefixMapping modelPrefixMapping> = r2;

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: void primeNamespace(com.hp.hpl.jena.rdf.model.Model)>(r2);

        $r3 = staticinvoke <com.hp.hpl.jena.vocabulary.RDF: java.lang.String getURI()>();

        virtualinvoke r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: void addNameSpace(java.lang.String)>($r3);

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: void addNameSpaces(com.hp.hpl.jena.rdf.model.Model)>(r2);

        r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: int jenaPrefixCount> = 0;

        return;
    }

    private void writeXMLBody(com.hp.hpl.jena.rdf.model.Model, java.io.PrintWriter, java.lang.String)
    {
        org.apache.jena.iri.IRIFactory $r5, $r10;
        int $i0, $i1;
        java.lang.Boolean $r1;
        java.lang.String $r2, $r3, $r4, $r8, r9;
        org.apache.jena.iri.IRI $r11, $r12;
        boolean $z0;
        java.io.PrintWriter r7;
        com.hp.hpl.jena.rdf.model.Model r6;
        com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter r0;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter;

        r6 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        r7 := @parameter1: java.io.PrintWriter;

        r9 := @parameter2: java.lang.String;

        $r1 = r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.lang.Boolean showDoctypeDeclaration>;

        $z0 = virtualinvoke $r1.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: void generateDoctypeDeclaration(com.hp.hpl.jena.rdf.model.Model,java.io.PrintWriter)>(r6, r7);

     label1:
        $r2 = r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.lang.String xmlBase>;

        if $r2 != null goto label5;

        if r9 == null goto label2;

        $i1 = virtualinvoke r9.<java.lang.String: int length()>();

        if $i1 != 0 goto label3;

     label2:
        $r11 = null;

        goto label4;

     label3:
        $r10 = <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: org.apache.jena.iri.IRIFactory factory>;

        $r11 = virtualinvoke $r10.<org.apache.jena.iri.IRIFactory: org.apache.jena.iri.IRI create(java.lang.String)>(r9);

     label4:
        r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: org.apache.jena.iri.IRI baseURI> = $r11;

        virtualinvoke r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: void writeBody(com.hp.hpl.jena.rdf.model.Model,java.io.PrintWriter,java.lang.String,boolean)>(r6, r7, r9, 0);

        goto label8;

     label5:
        $r3 = r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.lang.String xmlBase>;

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i0 != 0 goto label6;

        $r12 = null;

        goto label7;

     label6:
        $r5 = <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: org.apache.jena.iri.IRIFactory factory>;

        $r4 = r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.lang.String xmlBase>;

        $r12 = virtualinvoke $r5.<org.apache.jena.iri.IRIFactory: org.apache.jena.iri.IRI create(java.lang.String)>($r4);

     label7:
        r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: org.apache.jena.iri.IRI baseURI> = $r12;

        $r8 = r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.lang.String xmlBase>;

        virtualinvoke r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: void writeBody(com.hp.hpl.jena.rdf.model.Model,java.io.PrintWriter,java.lang.String,boolean)>(r6, r7, $r8, 1);

     label8:
        return;
    }

    public boolean isPredefinedEntityName(java.lang.String)
    {
        java.util.regex.Matcher $r2;
        com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter r3;
        java.lang.String r0;
        java.util.regex.Pattern $r1;
        boolean $z0;

        r3 := @this: com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter;

        r0 := @parameter0: java.lang.String;

        $r1 = <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.util.regex.Pattern predefinedEntityNames>;

        $r2 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0);

        $z0 = virtualinvoke $r2.<java.util.regex.Matcher: boolean matches()>();

        return $z0;
    }

    protected java.lang.String attributeQuoted(java.lang.String)
    {
        com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter r1;
        java.lang.StringBuilder $r0, $r3, $r5, $r7;
        java.lang.String $r2, r4, $r6, $r8;

        r1 := @this: com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter;

        r4 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = r1.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.lang.String attributeQuoteChar>;

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r6 = r1.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.lang.String attributeQuoteChar>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    protected java.lang.String substitutedAttribute(java.lang.String)
    {
        int $i0;
        java.lang.Boolean $r3;
        java.lang.String r0, $r1, $r4, $r6, $r9, $r12, $r14, $r15, $r16;
        boolean $z0, $z1;
        com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter r2;
        java.lang.StringBuilder $r7, $r8, $r10, $r11, $r13;
        com.hp.hpl.jena.shared.PrefixMapping $r5;

        r2 := @this: com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.hp.hpl.jena.rdf.model.impl.Util: java.lang.String substituteStandardEntities(java.lang.String)>(r0);

        $r3 = r2.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.lang.Boolean showDoctypeDeclaration>;

        $z0 = virtualinvoke $r3.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label1;

        $r15 = virtualinvoke r2.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.lang.String attributeQuoted(java.lang.String)>($r1);

        return $r15;

     label1:
        $i0 = staticinvoke <com.hp.hpl.jena.rdf.model.impl.Util: int splitNamespace(java.lang.String)>($r1);

        $r4 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $r5 = r2.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: com.hp.hpl.jena.shared.PrefixMapping modelPrefixMapping>;

        $r6 = interfaceinvoke $r5.<com.hp.hpl.jena.shared.PrefixMapping: java.lang.String getNsURIPrefix(java.lang.String)>($r4);

        if $r6 == null goto label2;

        $z1 = virtualinvoke r2.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: boolean isPredefinedEntityName(java.lang.String)>($r6);

        if $z1 == 0 goto label3;

     label2:
        $r16 = virtualinvoke r2.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.lang.String attributeQuoted(java.lang.String)>($r1);

        goto label4;

     label3:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&");

        $r9 = specialinvoke r2.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.lang.String strForPrefix(java.lang.String)>($r6);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        $r12 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i0);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r16 = virtualinvoke r2.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.lang.String attributeQuoted(java.lang.String)>($r14);

     label4:
        return $r16;
    }

    private void generateDoctypeDeclaration(com.hp.hpl.jena.rdf.model.Model, java.io.PrintWriter)
    {
        java.util.Map $r7;
        boolean $z0, $z1;
        java.io.PrintWriter r8;
        java.util.Set $r14;
        com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter r23;
        java.lang.StringBuilder $r2, $r3, $r4, $r9, $r10, $r11, $r12, $r16, $r17, $r19, $r24, $r26, $r27, $r29, $r30, $r34, $r35;
        java.lang.String $r0, $r5, $r6, $r13, $r18, $r20, r22, $r25, $r28, $r32, $r33, $r36, r37;
        java.util.Iterator $r15;
        com.hp.hpl.jena.rdf.model.Model r1;
        java.lang.Object $r21, $r31;

        r23 := @this: com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        r8 := @parameter1: java.io.PrintWriter;

        $r0 = staticinvoke <com.hp.hpl.jena.vocabulary.RDF: java.lang.String getURI()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RDF");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = interfaceinvoke r1.<com.hp.hpl.jena.rdf.model.Model: java.lang.String qnameFor(java.lang.String)>($r5);

        r37 = $r6;

        if $r6 != null goto label1;

        interfaceinvoke r1.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.shared.PrefixMapping setNsPrefix(java.lang.String,java.lang.String)>("rdf", $r0);

        r37 = "rdf:RDF";

     label1:
        $r7 = interfaceinvoke r1.<com.hp.hpl.jena.rdf.model.Model: java.util.Map getNsPrefixMap()>();

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<!DOCTYPE ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r37);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r8.<java.io.PrintWriter: void print(java.lang.String)>($r13);

        $r14 = interfaceinvoke $r7.<java.util.Map: java.util.Set keySet()>();

        $r15 = interfaceinvoke $r14.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r21 = interfaceinvoke $r15.<java.util.Iterator: java.lang.Object next()>();

        r22 = (java.lang.String) $r21;

        $z0 = virtualinvoke r23.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: boolean isPredefinedEntityName(java.lang.String)>(r22);

        if $z0 == 0 goto label3;

        goto label2;

     label3:
        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.lang.String newline>;

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  <!ENTITY ");

        $r28 = specialinvoke r23.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.lang.String strForPrefix(java.lang.String)>(r22);

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" \'");

        $r31 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r22);

        $r32 = (java.lang.String) $r31;

        $r33 = staticinvoke <com.hp.hpl.jena.rdf.model.impl.Util: java.lang.String substituteEntitiesInEntityValue(java.lang.String)>($r32);

        $r34 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'>");

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r8.<java.io.PrintWriter: void print(java.lang.String)>($r36);

        goto label2;

     label4:
        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]>");

        $r18 = <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.lang.String newline>;

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r8.<java.io.PrintWriter: void print(java.lang.String)>($r20);

        return;
    }

    private java.lang.String strForPrefix(java.lang.String)
    {
        int $i0;
        com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter r1;
        java.lang.String r0, $r2;

        r1 := @this: com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        $r2 = r1.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.lang.String defaultNSEntityName>;

        return $r2;

     label1:
        return r0;
    }

    private static boolean usesPrefix(com.hp.hpl.jena.rdf.model.Model, java.lang.String)
    {
        com.hp.hpl.jena.rdf.model.Model r0;
        java.lang.String r1, $r2;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        r1 := @parameter1: java.lang.String;

        $r2 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Model: java.lang.String getNsPrefixURI(java.lang.String)>(r1);

        if $r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private void writeXMLDeclaration(java.io.Writer, java.io.PrintWriter)
    {
        com.hp.hpl.jena.util.CharEncoding $r11;
        boolean $z0, $z1, $z2, $z3;
        java.io.PrintWriter r1;
        java.io.Writer r0;
        com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter r2;
        java.lang.StringBuilder $r4, $r5, $r7, $r8, $r13, $r14, $r16, $r17, $r19, $r20, $r21, $r24, $r25, $r26;
        com.hp.hpl.jena.xmloutput.impl.SimpleLogger $r22;
        java.lang.Boolean $r3;
        java.io.OutputStreamWriter $r9;
        java.lang.String $r6, $r10, $r12, $r15, $r18, $r23, $r27, r28;

        r2 := @this: com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter;

        r0 := @parameter0: java.io.Writer;

        r1 := @parameter1: java.io.PrintWriter;

        r28 = null;

        $z0 = r0 instanceof java.io.OutputStreamWriter;

        if $z0 == 0 goto label1;

        $r9 = (java.io.OutputStreamWriter) r0;

        $r10 = virtualinvoke $r9.<java.io.OutputStreamWriter: java.lang.String getEncoding()>();

        $z1 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>("UTF8");

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>("UTF-16");

        if $z2 != 0 goto label1;

        $r11 = staticinvoke <com.hp.hpl.jena.util.CharEncoding: com.hp.hpl.jena.util.CharEncoding create(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<com.hp.hpl.jena.util.CharEncoding: java.lang.String name()>();

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<?xml version=");

        $r15 = virtualinvoke r2.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.lang.String attributeQuoted(java.lang.String)>("1.0");

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" encoding=");

        $r18 = virtualinvoke r2.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.lang.String attributeQuoted(java.lang.String)>($r12);

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?>");

        r28 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        $z3 = virtualinvoke $r11.<com.hp.hpl.jena.util.CharEncoding: boolean isIANA()>();

        if $z3 != 0 goto label1;

        $r22 = <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: com.hp.hpl.jena.xmloutput.impl.SimpleLogger logger>;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r11.<com.hp.hpl.jena.util.CharEncoding: java.lang.String warningMessage()>();

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("   It is better to use a FileOutputStream, in place of a FileWriter.");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r22.<com.hp.hpl.jena.xmloutput.impl.SimpleLogger: void warn(java.lang.String)>($r27);

     label1:
        if r28 != null goto label2;

        $r3 = r2.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.lang.Boolean showXmlDeclaration>;

        if $r3 == null goto label2;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<?xml version=");

        $r6 = virtualinvoke r2.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.lang.String attributeQuoted(java.lang.String)>("1.0");

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?>");

        r28 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        if r28 == null goto label3;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>(r28);

     label3:
        return;
    }

    public synchronized com.hp.hpl.jena.rdf.model.RDFErrorHandler setErrorHandler(com.hp.hpl.jena.rdf.model.RDFErrorHandler)
    {
        com.hp.hpl.jena.rdf.model.impl.RDFDefaultErrorHandler $r1;
        com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter r0;
        com.hp.hpl.jena.rdf.model.RDFErrorHandler r2, r3, $r4;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter;

        r2 := @parameter0: com.hp.hpl.jena.rdf.model.RDFErrorHandler;

        r3 = r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: com.hp.hpl.jena.rdf.model.RDFErrorHandler errorHandler>;

        $r1 = <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: com.hp.hpl.jena.rdf.model.impl.RDFDefaultErrorHandler defaultErrorHandler>;

        if r3 != $r1 goto label1;

        r3 = null;

     label1:
        if r2 != null goto label2;

        $r4 = <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: com.hp.hpl.jena.rdf.model.impl.RDFDefaultErrorHandler defaultErrorHandler>;

        goto label3;

     label2:
        $r4 = r2;

     label3:
        r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: com.hp.hpl.jena.rdf.model.RDFErrorHandler errorHandler> = $r4;

        return r3;
    }

    private static java.lang.String escapedId(java.lang.String)
    {
        char $c1;
        java.lang.StringBuffer $r3;
        int $i0, i2, $i3, $i4, $i5;
        java.lang.String r1, $r2;
        boolean $z0, $z1;

        r1 := @parameter0: java.lang.String;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        i2 = 0;

     label1:
        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if i2 >= $i0 goto label6;

        $c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i2);

        $i3 = (int) $c1;

        if $i3 == 88 goto label4;

        if i2 != 0 goto label2;

        $i4 = (int) $c1;

        $z1 = staticinvoke <org.apache.xerces.util.XMLChar: boolean isNCNameStart(int)>($i4);

        if $z1 == 0 goto label4;

        goto label3;

     label2:
        $i5 = (int) $c1;

        $z0 = staticinvoke <org.apache.xerces.util.XMLChar: boolean isNCName(int)>($i5);

        if $z0 == 0 goto label4;

     label3:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c1);

        goto label5;

     label4:
        staticinvoke <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: void escape(java.lang.StringBuffer,char)>($r3, $c1);

     label5:
        i2 = i2 + 1;

        goto label1;

     label6:
        $r2 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    private static void escape(java.lang.StringBuffer, char)
    {
        char c0, $c2;
        java.lang.StringBuffer r0;
        int $i1, $i3, i4, $i5;
        char[] $r1;

        r0 := @parameter0: java.lang.StringBuffer;

        c0 := @parameter1: char;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(88);

        $i5 = (int) c0;

        i4 = $i5;

     label1:
        $r1 = <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: char[] hexchar>;

        $i1 = i4 & 15;

        $c2 = $r1[$i1];

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c2);

        $i3 = i4 >> 4;

        i4 = $i3;

        if $i3 != 0 goto label1;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(88);

        return;
    }

    public final synchronized java.lang.Object setProperty(java.lang.String, java.lang.Object)
    {
        java.lang.Integer $r17, $r18;
        com.hp.hpl.jena.rdf.model.Resource[] $r8, $r11, $r12, $r13;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23;
        com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter r6;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.Throwable $r23;
        com.hp.hpl.jena.xmloutput.impl.SimpleLogger $r2;
        int $i0, i1;
        java.lang.Boolean $r14, $r16, $r20;
        java.lang.String r0, $r5, $r9, $r10, $r15, $r19, $r21, $r22, r24;
        java.lang.Object r7;

        r6 := @this: com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter;

        r0 := @parameter0: java.lang.String;

        r7 := @parameter1: java.lang.Object;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("showXmlDeclaration");

        if $z0 == 0 goto label01;

        $r22 = specialinvoke r6.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.lang.String setShowXmlDeclaration(java.lang.Object)>(r7);

        return $r22;

     label01:
        $z1 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("showDoctypeDeclaration");

        if $z1 == 0 goto label02;

        $r21 = specialinvoke r6.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.lang.String setShowDoctypeDeclaration(java.lang.Object)>(r7);

        return $r21;

     label02:
        $z2 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("minimalPrefixes");

        if $z2 == 0 goto label13;

     label03:
        $r20 = new java.lang.Boolean;

        $z16 = r6.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: boolean writingAllModelPrefixNamespaces>;

        if $z16 != 0 goto label04;

        $z19 = 1;

        goto label05;

     label04:
        $z19 = 0;

     label05:
        specialinvoke $r20.<java.lang.Boolean: void <init>(boolean)>($z19);

     label06:
        $z17 = staticinvoke <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: boolean getBoolean(java.lang.Object)>(r7);

        if $z17 != 0 goto label07;

        $z20 = 1;

        goto label08;

     label07:
        $z20 = 0;

     label08:
        r6.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: boolean writingAllModelPrefixNamespaces> = $z20;

        return $r20;

     label09:
        $r23 := @caughtexception;

     label10:
        $z18 = staticinvoke <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: boolean getBoolean(java.lang.Object)>(r7);

        if $z18 != 0 goto label11;

        $z21 = 1;

        goto label12;

     label11:
        $z21 = 0;

     label12:
        r6.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: boolean writingAllModelPrefixNamespaces> = $z21;

        throw $r23;

     label13:
        $z3 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("xmlbase");

        if $z3 == 0 goto label14;

        r24 = r6.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.lang.String xmlBase>;

        $r19 = (java.lang.String) r7;

        r6.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.lang.String xmlBase> = $r19;

        return r24;

     label14:
        $z4 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("tab");

        if $z4 == 0 goto label15;

        $r18 = specialinvoke r6.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.lang.Integer setTab(java.lang.Object)>(r7);

        return $r18;

     label15:
        $z5 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("width");

        if $z5 == 0 goto label16;

        $r17 = specialinvoke r6.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.lang.Integer setWidth(java.lang.Object)>(r7);

        return $r17;

     label16:
        $z6 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("longid");

        if $z6 == 0 goto label17;

        $r16 = new java.lang.Boolean;

        $z14 = r6.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: boolean longId>;

        specialinvoke $r16.<java.lang.Boolean: void <init>(boolean)>($z14);

        $z15 = staticinvoke <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: boolean getBoolean(java.lang.Object)>(r7);

        r6.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: boolean longId> = $z15;

        return $r16;

     label17:
        $z7 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("attributeQuoteChar");

        if $z7 == 0 goto label18;

        $r15 = specialinvoke r6.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.lang.String setAttributeQuoteChar(java.lang.Object)>(r7);

        return $r15;

     label18:
        $z8 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("allowBadURIs");

        if $z8 == 0 goto label23;

        $r14 = new java.lang.Boolean;

        $z12 = r6.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: boolean demandGoodURIs>;

        if $z12 != 0 goto label19;

        $z22 = 1;

        goto label20;

     label19:
        $z22 = 0;

     label20:
        specialinvoke $r14.<java.lang.Boolean: void <init>(boolean)>($z22);

        $z13 = staticinvoke <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: boolean getBoolean(java.lang.Object)>(r7);

        if $z13 != 0 goto label21;

        $z23 = 1;

        goto label22;

     label21:
        $z23 = 0;

     label22:
        r6.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: boolean demandGoodURIs> = $z23;

        return $r14;

     label23:
        $z9 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("prettyTypes");

        if $z9 == 0 goto label24;

        $r11 = (com.hp.hpl.jena.rdf.model.Resource[]) r7;

        $r12 = (com.hp.hpl.jena.rdf.model.Resource[]) $r11;

        $r13 = virtualinvoke r6.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: com.hp.hpl.jena.rdf.model.Resource[] setTypes(com.hp.hpl.jena.rdf.model.Resource[])>($r12);

        return $r13;

     label24:
        $z10 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("relativeURIs");

        if $z10 == 0 goto label25;

        i1 = r6.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: int relativeFlags>;

        $r9 = (java.lang.String) r7;

        $i0 = staticinvoke <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: int str2flags(java.lang.String)>($r9);

        r6.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: int relativeFlags> = $i0;

        $r10 = staticinvoke <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.lang.String flags2str(int)>(i1);

        return $r10;

     label25:
        $z11 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("blockRules");

        if $z11 == 0 goto label26;

        $r8 = virtualinvoke r6.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: com.hp.hpl.jena.rdf.model.Resource[] setBlockRules(java.lang.Object)>(r7);

        return $r8;

     label26:
        $r2 = <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: com.hp.hpl.jena.xmloutput.impl.SimpleLogger logger>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported property: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r2.<com.hp.hpl.jena.xmloutput.impl.SimpleLogger: void warn(java.lang.String)>($r5);

        return null;

        catch java.lang.Throwable from label03 to label06 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    private java.lang.String setAttributeQuoteChar(java.lang.Object)
    {
        com.hp.hpl.jena.xmloutput.impl.SimpleLogger $r7;
        com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter r0;
        java.lang.Object r2;
        java.lang.StringBuilder $r6, $r8, $r9, $r10;
        java.lang.String r1, $r3, $r4, $r5, $r11;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter;

        r2 := @parameter0: java.lang.Object;

        r1 = r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.lang.String attributeQuoteChar>;

        $r3 = "\"";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z0 != 0 goto label1;

        $r5 = "\'";

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z1 == 0 goto label2;

     label1:
        $r4 = (java.lang.String) r2;

        r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.lang.String attributeQuoteChar> = $r4;

        goto label3;

     label2:
        $r7 = <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: com.hp.hpl.jena.xmloutput.impl.SimpleLogger logger>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("attributeQutpeChar must be either \"\\\"\" or \', not \"");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r7.<com.hp.hpl.jena.xmloutput.impl.SimpleLogger: void warn(java.lang.String)>($r11);

     label3:
        return r1;
    }

    private java.lang.Integer setWidth(java.lang.Object)
    {
        java.lang.Integer $r0, $r4;
        com.hp.hpl.jena.xmloutput.impl.SimpleLogger $r7;
        int $i0, $i1, $i2;
        java.lang.String $r3, $r11, $r14;
        boolean $z0;
        java.lang.Exception $r5;
        com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter r1;
        java.lang.Object r2;
        java.lang.StringBuilder $r6, $r8, $r9, $r10, $r12, $r13;

        r1 := @this: com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter;

        r2 := @parameter0: java.lang.Object;

        $r0 = new java.lang.Integer;

        $i0 = r1.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: int width>;

        specialinvoke $r0.<java.lang.Integer: void <init>(int)>($i0);

        $z0 = r2 instanceof java.lang.Integer;

        if $z0 == 0 goto label1;

        $r4 = (java.lang.Integer) r2;

        $i2 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        r1.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: int width> = $i2;

        goto label4;

     label1:
        $r3 = (java.lang.String) r2;

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

        r1.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: int width> = $i1;

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r7 = <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: com.hp.hpl.jena.xmloutput.impl.SimpleLogger logger>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad value for width: \'");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' [");

        $r11 = virtualinvoke $r5.<java.lang.Exception: java.lang.String getMessage()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r7.<com.hp.hpl.jena.xmloutput.impl.SimpleLogger: void warn(java.lang.String)>($r14);

     label4:
        return $r0;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private java.lang.Integer setTab(java.lang.Object)
    {
        java.lang.Integer $r0, $r4;
        com.hp.hpl.jena.xmloutput.impl.SimpleLogger $r7;
        int $i0, $i1, $i2;
        java.lang.String $r3, $r11, $r14;
        boolean $z0;
        java.lang.Exception $r5;
        com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter r1;
        java.lang.Object r2;
        java.lang.StringBuilder $r6, $r8, $r9, $r10, $r12, $r13;

        r1 := @this: com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter;

        r2 := @parameter0: java.lang.Object;

        $r0 = new java.lang.Integer;

        $i0 = r1.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: int tabSize>;

        specialinvoke $r0.<java.lang.Integer: void <init>(int)>($i0);

        $z0 = r2 instanceof java.lang.Integer;

        if $z0 == 0 goto label1;

        $r4 = (java.lang.Integer) r2;

        $i2 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        r1.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: int tabSize> = $i2;

        goto label4;

     label1:
        $r3 = (java.lang.String) r2;

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

        r1.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: int tabSize> = $i1;

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r7 = <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: com.hp.hpl.jena.xmloutput.impl.SimpleLogger logger>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad value for tab: \'");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' [");

        $r11 = virtualinvoke $r5.<java.lang.Exception: java.lang.String getMessage()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r7.<com.hp.hpl.jena.xmloutput.impl.SimpleLogger: void warn(java.lang.String)>($r14);

     label4:
        return $r0;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private java.lang.String setShowDoctypeDeclaration(java.lang.Object)
    {
        com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter r0;
        java.lang.Boolean $r1, $r4, $r5;
        java.lang.Object r3;
        java.lang.String $r2;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter;

        r3 := @parameter0: java.lang.Object;

        $r1 = r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.lang.Boolean showDoctypeDeclaration>;

        $r2 = virtualinvoke $r1.<java.lang.Boolean: java.lang.String toString()>();

        $r4 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        $r5 = staticinvoke <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.lang.Boolean getBooleanValue(java.lang.Object,java.lang.Boolean)>(r3, $r4);

        r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.lang.Boolean showDoctypeDeclaration> = $r5;

        return $r2;
    }

    private java.lang.String setShowXmlDeclaration(java.lang.Object)
    {
        com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter r0;
        java.lang.Boolean $r1, $r2, $r4;
        java.lang.Object r3;
        java.lang.String $r5;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter;

        r3 := @parameter0: java.lang.Object;

        $r1 = r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.lang.Boolean showXmlDeclaration>;

        if $r1 != null goto label1;

        $r5 = null;

        goto label2;

     label1:
        $r2 = r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.lang.Boolean showXmlDeclaration>;

        $r5 = virtualinvoke $r2.<java.lang.Boolean: java.lang.String toString()>();

     label2:
        $r4 = staticinvoke <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.lang.Boolean getBooleanValue(java.lang.Object,java.lang.Boolean)>(r3, null);

        r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.lang.Boolean showXmlDeclaration> = $r4;

        return $r5;
    }

    private static boolean getBoolean(java.lang.Object)
    {
        java.lang.Boolean $r1, $r2;
        java.lang.Object r0;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        $r1 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        $r2 = staticinvoke <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.lang.Boolean getBooleanValue(java.lang.Object,java.lang.Boolean)>(r0, $r1);

        $z0 = virtualinvoke $r2.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    private static java.lang.Boolean getBooleanValue(java.lang.Object, java.lang.Boolean)
    {
        com.hp.hpl.jena.shared.JenaException $r1;
        java.lang.Boolean r6, $r8, $r9;
        java.lang.Object r0;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5, $r7;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Object;

        r6 := @parameter1: java.lang.Boolean;

        if r0 != null goto label1;

        return r6;

     label1:
        $z0 = r0 instanceof java.lang.Boolean;

        if $z0 == 0 goto label2;

        $r9 = (java.lang.Boolean) r0;

        return $r9;

     label2:
        $z1 = r0 instanceof java.lang.String;

        if $z1 == 0 goto label3;

        $r7 = (java.lang.String) r0;

        $r8 = staticinvoke <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.lang.Boolean stringToBoolean(java.lang.String,java.lang.Boolean)>($r7, r6);

        return $r8;

     label3:
        $r1 = new com.hp.hpl.jena.shared.JenaException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot treat as boolean: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<com.hp.hpl.jena.shared.JenaException: void <init>(java.lang.String)>($r5);

        throw $r1;
    }

    private static java.lang.Boolean stringToBoolean(java.lang.String, java.lang.Boolean)
    {
        com.hp.hpl.jena.shared.BadBooleanException $r1;
        java.lang.Boolean $r2, $r3, r4;
        java.lang.String r0;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.Boolean;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("default");

        if $z0 == 0 goto label1;

        return r4;

     label1:
        $z1 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("true");

        if $z1 == 0 goto label2;

        $r3 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        return $r3;

     label2:
        $z2 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("false");

        if $z2 == 0 goto label3;

        $r2 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        return $r2;

     label3:
        $r1 = new com.hp.hpl.jena.shared.BadBooleanException;

        specialinvoke $r1.<com.hp.hpl.jena.shared.BadBooleanException: void <init>(java.lang.String)>(r0);

        throw $r1;
    }

    com.hp.hpl.jena.rdf.model.Resource[] setTypes(com.hp.hpl.jena.rdf.model.Resource[])
    {
        com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter r1;
        com.hp.hpl.jena.rdf.model.Resource[] r2;
        com.hp.hpl.jena.xmloutput.impl.SimpleLogger $r0;

        r1 := @this: com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter;

        r2 := @parameter0: com.hp.hpl.jena.rdf.model.Resource[];

        $r0 = <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: com.hp.hpl.jena.xmloutput.impl.SimpleLogger logger>;

        interfaceinvoke $r0.<com.hp.hpl.jena.xmloutput.impl.SimpleLogger: void warn(java.lang.String)>("prettyTypes is not a property on the Basic RDF/XML writer.");

        return null;
    }

    com.hp.hpl.jena.rdf.model.Resource[] setBlockRules(java.lang.Object)
    {
        com.hp.hpl.jena.rdf.model.impl.ResourceImpl $r11;
        java.util.Vector $r5;
        java.util.StringTokenizer $r3;
        int $i0, i1, $i2;
        com.hp.hpl.jena.rdf.model.Resource[] r1, $r6, $r7, $r8, $r17, $r18, $r19;
        java.lang.String $r4, $r10, $r13, $r16;
        boolean $z0, $z1;
        com.hp.hpl.jena.rdf.model.Resource $r9;
        com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter r0;
        java.lang.Object r2;
        java.lang.StringBuilder $r12, $r14, $r15;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter;

        r2 := @parameter0: java.lang.Object;

        r1 = r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: com.hp.hpl.jena.rdf.model.Resource[] blockedRules>;

        virtualinvoke r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: void unblockAll()>();

        $z0 = r2 instanceof com.hp.hpl.jena.rdf.model.Resource[];

        if $z0 == 0 goto label1;

        $r17 = (com.hp.hpl.jena.rdf.model.Resource[]) r2;

        $r18 = (com.hp.hpl.jena.rdf.model.Resource[]) $r17;

        r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: com.hp.hpl.jena.rdf.model.Resource[] blockedRules> = $r18;

        goto label4;

     label1:
        $r3 = new java.util.StringTokenizer;

        $r4 = (java.lang.String) r2;

        specialinvoke $r3.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>($r4, ", ");

        $r5 = new java.util.Vector;

        specialinvoke $r5.<java.util.Vector: void <init>()>();

     label2:
        $z1 = virtualinvoke $r3.<java.util.StringTokenizer: boolean hasMoreElements()>();

        if $z1 == 0 goto label3;

        $r10 = virtualinvoke $r3.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r11 = new com.hp.hpl.jena.rdf.model.impl.ResourceImpl;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = staticinvoke <com.hp.hpl.jena.vocabulary.RDFSyntax: java.lang.String getURI()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<com.hp.hpl.jena.rdf.model.impl.ResourceImpl: void <init>(java.lang.String)>($r16);

        virtualinvoke $r5.<java.util.Vector: boolean add(java.lang.Object)>($r11);

        goto label2;

     label3:
        $i0 = virtualinvoke $r5.<java.util.Vector: int size()>();

        $r6 = newarray (com.hp.hpl.jena.rdf.model.Resource)[$i0];

        r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: com.hp.hpl.jena.rdf.model.Resource[] blockedRules> = $r6;

        $r7 = r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: com.hp.hpl.jena.rdf.model.Resource[] blockedRules>;

        virtualinvoke $r5.<java.util.Vector: void copyInto(java.lang.Object[])>($r7);

     label4:
        i1 = 0;

     label5:
        $r19 = r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: com.hp.hpl.jena.rdf.model.Resource[] blockedRules>;

        $i2 = lengthof $r19;

        if i1 >= $i2 goto label6;

        $r8 = r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: com.hp.hpl.jena.rdf.model.Resource[] blockedRules>;

        $r9 = $r8[i1];

        virtualinvoke r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: void blockRule(com.hp.hpl.jena.rdf.model.Resource)>($r9);

        i1 = i1 + 1;

        goto label5;

     label6:
        return r1;
    }

    protected java.lang.String relativize(java.lang.String)
    {
        int $i0;
        com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter r0;
        java.lang.String r1, $r4;
        org.apache.jena.iri.IRI $r2, $r3;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter;

        r1 := @parameter0: java.lang.String;

        $i0 = r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: int relativeFlags>;

        if $i0 == 0 goto label1;

        $r2 = r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: org.apache.jena.iri.IRI baseURI>;

        if $r2 == null goto label1;

        $r3 = r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: org.apache.jena.iri.IRI baseURI>;

        $r4 = specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.lang.String relativize(org.apache.jena.iri.IRI,java.lang.String)>($r3, r1);

        goto label2;

     label1:
        $r4 = specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.lang.String checkURI(java.lang.String)>(r1);

     label2:
        return $r4;
    }

    private java.lang.String relativize(org.apache.jena.iri.IRI, java.lang.String)
    {
        int $i0;
        com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter r2;
        java.lang.String r1, $r4;
        org.apache.jena.iri.IRI r0, $r3;

        r2 := @this: com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter;

        r0 := @parameter0: org.apache.jena.iri.IRI;

        r1 := @parameter1: java.lang.String;

        $i0 = r2.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: int relativeFlags>;

        $r3 = virtualinvoke r0.<org.apache.jena.iri.IRI: org.apache.jena.iri.IRI relativize(java.lang.String,int)>(r1, $i0);

        $r4 = virtualinvoke $r3.<org.apache.jena.iri.IRI: java.lang.String toString()>();

        return $r4;
    }

    private java.lang.String checkURI(java.lang.String)
    {
        java.util.Iterator $r7;
        org.apache.jena.iri.IRIFactory $r2;
        com.hp.hpl.jena.shared.BadURIException $r4;
        com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter r0;
        java.lang.StringBuilder $r5, $r6, $r11;
        java.lang.Object $r8;
        java.lang.String r1, $r10, $r12;
        org.apache.jena.iri.IRI $r3;
        org.apache.jena.iri.Violation $r9;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter;

        r1 := @parameter0: java.lang.String;

        $z0 = r0.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: boolean demandGoodURIs>;

        if $z0 == 0 goto label1;

        $r2 = <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: org.apache.jena.iri.IRIFactory factory>;

        $r3 = virtualinvoke $r2.<org.apache.jena.iri.IRIFactory: org.apache.jena.iri.IRI create(java.lang.String)>(r1);

        $z1 = virtualinvoke $r3.<org.apache.jena.iri.IRI: boolean hasViolation(boolean)>(0);

        if $z1 == 0 goto label1;

        $r4 = new com.hp.hpl.jena.shared.BadURIException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Only well-formed absolute URIrefs can be included in RDF/XML output: ");

        $r7 = virtualinvoke $r3.<org.apache.jena.iri.IRI: java.util.Iterator violations(boolean)>(0);

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        $r9 = (org.apache.jena.iri.Violation) $r8;

        $r10 = virtualinvoke $r9.<org.apache.jena.iri.Violation: java.lang.String getShortMessage()>();

        $r11 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<com.hp.hpl.jena.shared.BadURIException: void <init>(java.lang.String)>($r12);

        throw $r4;

     label1:
        return r1;
    }

    private boolean checkLegalPrefix(java.lang.String)
    {
        com.hp.hpl.jena.xmloutput.impl.SimpleLogger $r5, $r11, $r17;
        java.util.regex.Matcher $r3;
        java.lang.String r0, $r1, $r9, $r15, $r21;
        boolean $z0, $z1, $z2, $z3;
        com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter r22;
        java.lang.StringBuilder $r4, $r6, $r7, $r8, $r10, $r12, $r13, $r14, $r16, $r18, $r19, $r20;
        java.util.regex.Pattern $r2;

        r22 := @this: com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String toLowerCase()>();

        $z1 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("xml");

        if $z1 == 0 goto label2;

        $r17 = <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: com.hp.hpl.jena.xmloutput.impl.SimpleLogger logger>;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Namespace prefix \'");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is reserved by XML.");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r17.<com.hp.hpl.jena.xmloutput.impl.SimpleLogger: void warn(java.lang.String)>($r21);

        goto label5;

     label2:
        $z2 = staticinvoke <org.apache.xerces.util.XMLChar: boolean isValidNCName(java.lang.String)>(r0);

        if $z2 != 0 goto label3;

        $r11 = <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: com.hp.hpl.jena.xmloutput.impl.SimpleLogger logger>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not a legal namespace prefix.");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r11.<com.hp.hpl.jena.xmloutput.impl.SimpleLogger: void warn(java.lang.String)>($r15);

        goto label5;

     label3:
        $r2 = <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.util.regex.Pattern jenaNamespace>;

        $r3 = virtualinvoke $r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0);

        $z3 = virtualinvoke $r3.<java.util.regex.Matcher: boolean matches()>();

        if $z3 == 0 goto label4;

        $r5 = <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: com.hp.hpl.jena.xmloutput.impl.SimpleLogger logger>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Namespace prefix \'");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is reserved by Jena.");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r5.<com.hp.hpl.jena.xmloutput.impl.SimpleLogger: void warn(java.lang.String)>($r9);

        goto label5;

     label4:
        return 1;

     label5:
        return 0;
    }

    private static java.lang.String flags2str(int)
    {
        java.lang.StringBuffer $r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.lang.String $r1;

        i0 := @parameter0: int;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>(int)>(64);

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("same-document, ");

     label1:
        $i2 = i0 & 2;

        if $i2 == 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("network, ");

     label2:
        $i3 = i0 & 4;

        if $i3 == 0 goto label3;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("absolute, ");

     label3:
        $i4 = i0 & 8;

        if $i4 == 0 goto label4;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("relative, ");

     label4:
        $i5 = i0 & 16;

        if $i5 == 0 goto label5;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("parent, ");

     label5:
        $i6 = i0 & 32;

        if $i6 == 0 goto label6;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("grandparent, ");

     label6:
        $i7 = virtualinvoke $r0.<java.lang.StringBuffer: int length()>();

        if $i7 <= 0 goto label7;

        $i8 = virtualinvoke $r0.<java.lang.StringBuffer: int length()>();

        $i9 = $i8 - 2;

        virtualinvoke $r0.<java.lang.StringBuffer: void setLength(int)>($i9);

     label7:
        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r1;
    }

    public static int str2flags(java.lang.String)
    {
        com.hp.hpl.jena.xmloutput.impl.SimpleLogger $r4;
        byte b0;
        java.util.StringTokenizer $r0;
        java.lang.String r1, $r2, $r7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.StringBuilder $r3, $r5, $r6;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.util.StringTokenizer;

        specialinvoke $r0.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r1, ", ");

        b0 = 0;

     label1:
        $z0 = virtualinvoke $r0.<java.util.StringTokenizer: boolean hasMoreElements()>();

        if $z0 == 0 goto label9;

        $r2 = virtualinvoke $r0.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("same-document");

        if $z1 == 0 goto label2;

        b0 = b0 | 1;

        goto label8;

     label2:
        $z2 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("network");

        if $z2 == 0 goto label3;

        b0 = b0 | 2;

        goto label8;

     label3:
        $z3 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("absolute");

        if $z3 == 0 goto label4;

        b0 = b0 | 4;

        goto label8;

     label4:
        $z4 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("relative");

        if $z4 == 0 goto label5;

        b0 = b0 | 8;

        goto label8;

     label5:
        $z5 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("parent");

        if $z5 == 0 goto label6;

        b0 = b0 | 16;

        goto label8;

     label6:
        $z6 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("grandparent");

        if $z6 == 0 goto label7;

        b0 = b0 | 32;

        goto label8;

     label7:
        $r4 = <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: com.hp.hpl.jena.xmloutput.impl.SimpleLogger logger>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Incorrect property value for relativeURIs: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r4.<com.hp.hpl.jena.xmloutput.impl.SimpleLogger: void warn(java.lang.String)>($r7);

     label8:
        goto label1;

     label9:
        return b0;
    }

    static org.slf4j.Logger access$000()
    {
        org.slf4j.Logger $r0;

        $r0 = <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: org.slf4j.Logger xlogger>;

        return $r0;
    }

    static void <clinit>()
    {
        org.apache.jena.iri.IRIFactory $r19;
        com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter$1 $r2;
        java.util.HashSet $r3;
        java.lang.String $r0, $r4, $r21;
        org.slf4j.Logger $r1;
        java.util.Set $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17;
        com.hp.hpl.jena.rdf.model.impl.RDFDefaultErrorHandler $r18;
        char[] $r22;
        java.util.regex.Pattern $r5, $r20;

        <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: char ESCAPE> = 88;

        <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: int FASTATTR> = 5;

        <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: int ATTR> = 4;

        <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: int END> = 3;

        <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: int START> = 2;

        <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: int FAST> = 1;

        <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.lang.String DEFAULT_NS_ENTITY_NAME_ALT> = "here";

        <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.lang.String DEFAULT_NS_ENTITY_NAME> = "this";

        $r0 = staticinvoke <com.hp.hpl.jena.JenaRuntime: java.lang.String getSystemProperty(java.lang.String)>("line.separator");

        <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.lang.String newline> = $r0;

        $r1 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/hp/hpl/jena/xmloutput/impl/BaseXMLWriter;");

        <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: org.slf4j.Logger xlogger> = $r1;

        $r2 = new com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter$1;

        specialinvoke $r2.<com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter$1: void <init>()>();

        <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: com.hp.hpl.jena.xmloutput.impl.SimpleLogger logger> = $r2;

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.util.Set badRDF> = $r3;

        $r4 = staticinvoke <com.hp.hpl.jena.vocabulary.RDF: java.lang.String getURI()>();

        <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.lang.String RDFNS> = $r4;

        $r5 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("j\\.([1-9][0-9]*|cook\\.up)");

        <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.util.regex.Pattern jenaNamespace> = $r5;

        $r6 = <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.util.Set badRDF>;

        interfaceinvoke $r6.<java.util.Set: boolean add(java.lang.Object)>("RDF");

        $r7 = <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.util.Set badRDF>;

        interfaceinvoke $r7.<java.util.Set: boolean add(java.lang.Object)>("Description");

        $r8 = <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.util.Set badRDF>;

        interfaceinvoke $r8.<java.util.Set: boolean add(java.lang.Object)>("li");

        $r9 = <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.util.Set badRDF>;

        interfaceinvoke $r9.<java.util.Set: boolean add(java.lang.Object)>("about");

        $r10 = <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.util.Set badRDF>;

        interfaceinvoke $r10.<java.util.Set: boolean add(java.lang.Object)>("aboutEach");

        $r11 = <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.util.Set badRDF>;

        interfaceinvoke $r11.<java.util.Set: boolean add(java.lang.Object)>("aboutEachPrefix");

        $r12 = <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.util.Set badRDF>;

        interfaceinvoke $r12.<java.util.Set: boolean add(java.lang.Object)>("ID");

        $r13 = <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.util.Set badRDF>;

        interfaceinvoke $r13.<java.util.Set: boolean add(java.lang.Object)>("nodeID");

        $r14 = <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.util.Set badRDF>;

        interfaceinvoke $r14.<java.util.Set: boolean add(java.lang.Object)>("parseType");

        $r15 = <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.util.Set badRDF>;

        interfaceinvoke $r15.<java.util.Set: boolean add(java.lang.Object)>("datatype");

        $r16 = <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.util.Set badRDF>;

        interfaceinvoke $r16.<java.util.Set: boolean add(java.lang.Object)>("bagID");

        $r17 = <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.util.Set badRDF>;

        interfaceinvoke $r17.<java.util.Set: boolean add(java.lang.Object)>("resource");

        $r18 = new com.hp.hpl.jena.rdf.model.impl.RDFDefaultErrorHandler;

        specialinvoke $r18.<com.hp.hpl.jena.rdf.model.impl.RDFDefaultErrorHandler: void <init>()>();

        <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: com.hp.hpl.jena.rdf.model.impl.RDFDefaultErrorHandler defaultErrorHandler> = $r18;

        <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: boolean dbg> = 0;

        $r19 = staticinvoke <org.apache.jena.iri.IRIFactory: org.apache.jena.iri.IRIFactory jenaImplementation()>();

        <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: org.apache.jena.iri.IRIFactory factory> = $r19;

        $r20 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("amp|lt|gt|apos|quot");

        <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: java.util.regex.Pattern predefinedEntityNames> = $r20;

        $r21 = "0123456789abcdef";

        $r22 = virtualinvoke $r21.<java.lang.String: char[] toCharArray()>();

        <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: char[] hexchar> = $r22;

        return;
    }
}
