public class org.jivesoftware.whack.util.StringUtils extends java.lang.Object
{
    public static final java.text.SimpleDateFormat UTC_FORMAT;
    private static final char[] QUOTE_ENCODE;
    private static final char[] AMP_ENCODE;
    private static final char[] LT_ENCODE;
    private static final char[] GT_ENCODE;
    private static java.security.MessageDigest digest;
    private static final int fillchar;
    private static final java.lang.String cvt;
    private static java.util.Random randGen;
    private static char[] numbersAndLetters;

    public static java.lang.String parseName(java.lang.String)
    {
        int $i0;
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>("@");

        if $i0 > 0 goto label2;

        return "";

     label2:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        return $r1;
    }

    public static java.lang.String parseServer(java.lang.String)
    {
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String r0, $r1, $r2;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>("@");

        $i1 = $i0 + 1;

        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i1 <= $i2 goto label2;

        return "";

     label2:
        $i3 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>("/");

        if $i3 <= 0 goto label3;

        $i5 = $i0 + 1;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>($i5, $i3);

        return $r2;

     label3:
        $i4 = $i0 + 1;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i4);

        return $r1;
    }

    public static java.lang.String parseResource(java.lang.String)
    {
        int $i0, $i1, $i2, $i3;
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>("/");

        $i1 = $i0 + 1;

        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i1 > $i2 goto label2;

        if $i0 >= 0 goto label3;

     label2:
        return "";

     label3:
        $i3 = $i0 + 1;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i3);

        return $r1;
    }

    public static java.lang.String parseBareAddress(java.lang.String)
    {
        int $i0;
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>("/");

        if $i0 >= 0 goto label2;

        return r0;

     label2:
        if $i0 != 0 goto label3;

        return "";

     label3:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        return $r1;
    }

    public static final java.lang.String escapeForXML(java.lang.String)
    {
        boolean $z0, $z1, $z2;
        java.lang.StringBuffer $r8;
        int i0, $i1, $i2, $i4, $i5, $i6, $i8, $i10, $i12, $i14, $i16, $i17, $i18, i19, i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27;
        java.lang.String r0, $r3;
        double $d0, $d1;
        char c3, $c7, $c9, $c11, $c13, $c15;
        char[] $r1, $r4, $r5, $r6, $r7;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label01;

        return null;

     label01:
        i19 = 0;

        i20 = 0;

        $r1 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>();

        i0 = lengthof $r1;

        $r8 = new java.lang.StringBuffer;

        $d0 = (double) i0;

        $d1 = $d0 * 1.3;

        $i1 = (int) $d1;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>(int)>($i1);

     label02:
        if i19 >= i0 goto label13;

        c3 = $r1[i19];

        $i21 = (int) c3;

        if $i21 <= 62 goto label03;

        goto label12;

     label03:
        $i22 = (int) c3;

        if $i22 != 60 goto label05;

        if i19 <= i20 goto label04;

        $i18 = i19 - i20;

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>($r1, i20, $i18);

     label04:
        i20 = i19 + 1;

        $r6 = <org.jivesoftware.whack.util.StringUtils: char[] LT_ENCODE>;

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>($r6);

        goto label12;

     label05:
        $i23 = (int) c3;

        if $i23 != 62 goto label07;

        if i19 <= i20 goto label06;

        $i17 = i19 - i20;

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>($r1, i20, $i17);

     label06:
        i20 = i19 + 1;

        $r5 = <org.jivesoftware.whack.util.StringUtils: char[] GT_ENCODE>;

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>($r5);

        goto label12;

     label07:
        $i24 = (int) c3;

        if $i24 != 38 goto label10;

        if i19 <= i20 goto label08;

        $i16 = i19 - i20;

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>($r1, i20, $i16);

     label08:
        $i5 = i19 + 5;

        if i0 <= $i5 goto label09;

        $i6 = i19 + 1;

        $c7 = $r1[$i6];

        $i25 = (int) $c7;

        if $i25 != 35 goto label09;

        $i8 = i19 + 2;

        $c9 = $r1[$i8];

        $z0 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c9);

        if $z0 == 0 goto label09;

        $i10 = i19 + 3;

        $c11 = $r1[$i10];

        $z1 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c11);

        if $z1 == 0 goto label09;

        $i12 = i19 + 4;

        $c13 = $r1[$i12];

        $z2 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c13);

        if $z2 == 0 goto label09;

        $i14 = i19 + 5;

        $c15 = $r1[$i14];

        $i26 = (int) $c15;

        if $i26 == 59 goto label12;

     label09:
        i20 = i19 + 1;

        $r7 = <org.jivesoftware.whack.util.StringUtils: char[] AMP_ENCODE>;

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>($r7);

        goto label12;

     label10:
        $i27 = (int) c3;

        if $i27 != 34 goto label12;

        if i19 <= i20 goto label11;

        $i4 = i19 - i20;

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>($r1, i20, $i4);

     label11:
        i20 = i19 + 1;

        $r4 = <org.jivesoftware.whack.util.StringUtils: char[] QUOTE_ENCODE>;

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>($r4);

     label12:
        i19 = i19 + 1;

        goto label02;

     label13:
        if i20 != 0 goto label14;

        return r0;

     label14:
        if i19 <= i20 goto label15;

        $i2 = i19 - i20;

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>($r1, i20, $i2);

     label15:
        $r3 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    public static final synchronized java.lang.String hash(java.lang.String)
    {
        java.io.PrintStream $r7, $r9;
        byte[] $r3, $r11;
        java.security.MessageDigest $r0, $r2, $r5, $r10;
        java.security.NoSuchAlgorithmException $r8;
        java.lang.String r1, $r4;
        java.io.UnsupportedEncodingException $r6;

        r1 := @parameter0: java.lang.String;

        $r0 = <org.jivesoftware.whack.util.StringUtils: java.security.MessageDigest digest>;

        if $r0 != null goto label4;

     label1:
        $r5 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("SHA-1");

        <org.jivesoftware.whack.util.StringUtils: java.security.MessageDigest digest> = $r5;

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        $r9 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>("Failed to load the SHA-1 MessageDigest. Jive will be unable to function normally.");

     label4:
        $r10 = <org.jivesoftware.whack.util.StringUtils: java.security.MessageDigest digest>;

        $r11 = virtualinvoke r1.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        virtualinvoke $r10.<java.security.MessageDigest: void update(byte[])>($r11);

     label5:
        goto label7;

     label6:
        $r6 := @caughtexception;

        $r7 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.Object)>($r6);

     label7:
        $r2 = <org.jivesoftware.whack.util.StringUtils: java.security.MessageDigest digest>;

        $r3 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest()>();

        $r4 = staticinvoke <org.jivesoftware.whack.util.StringUtils: java.lang.String encodeHex(byte[])>($r3);

        return $r4;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
        catch java.io.UnsupportedEncodingException from label4 to label5 with label6;
    }

    public static final java.lang.String encodeHex(byte[])
    {
        byte[] r1;
        long $l7;
        short $s4, $s6, $s9, $s11;
        byte $b3, $b5;
        java.lang.StringBuffer $r4;
        int $i0, $i1, $i2, i8, $i10;
        java.lang.String $r2, $r3;

        r1 := @parameter0: byte[];

        $r4 = new java.lang.StringBuffer;

        $i0 = lengthof r1;

        $i1 = $i0 * 2;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>(int)>($i1);

        i8 = 0;

     label1:
        $i2 = lengthof r1;

        if i8 >= $i2 goto label3;

        $b3 = r1[i8];

        $s9 = (short) $b3;

        $s4 = $s9 & 255;

        $i10 = (int) $s4;

        if $i10 >= 16 goto label2;

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("0");

     label2:
        $b5 = r1[i8];

        $s11 = (short) $b5;

        $s6 = $s11 & 255;

        $l7 = (long) $s6;

        $r3 = staticinvoke <java.lang.Long: java.lang.String toString(long,int)>($l7, 16);

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        i8 = i8 + 1;

        goto label1;

     label3:
        $r2 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    public static java.lang.String encodeBase64(java.lang.String)
    {
        byte[] r3;
        java.lang.String r0, $r1;
        java.io.UnsupportedEncodingException $r2;

        r0 := @parameter0: java.lang.String;

        r3 = null;

     label1:
        r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        virtualinvoke $r2.<java.io.UnsupportedEncodingException: void printStackTrace()>();

     label4:
        $r1 = staticinvoke <org.jivesoftware.whack.util.StringUtils: java.lang.String encodeBase64(byte[])>(r3);

        return $r1;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public static java.lang.String encodeBase64(byte[])
    {
        byte[] r0;
        java.lang.String $r1;

        r0 := @parameter0: byte[];

        $r1 = staticinvoke <org.jivesoftware.util.Base64: java.lang.String encodeBytes(byte[],int)>(r0, 8);

        return $r1;
    }

    public static byte[] decodeBase64(java.lang.String)
    {
        byte[] $r1;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.jivesoftware.util.Base64: byte[] decode(java.lang.String)>(r0);

        return $r1;
    }

    public static final java.lang.String randomString(int)
    {
        java.util.Random $r2;
        char $c3;
        int i0, $i1, $i2, i4;
        char[] r0, $r3;
        java.lang.String $r1;

        i0 := @parameter0: int;

        if i0 >= 1 goto label1;

        return null;

     label1:
        r0 = newarray (char)[i0];

        i4 = 0;

     label2:
        $i1 = lengthof r0;

        if i4 >= $i1 goto label3;

        $r3 = <org.jivesoftware.whack.util.StringUtils: char[] numbersAndLetters>;

        $r2 = <org.jivesoftware.whack.util.StringUtils: java.util.Random randGen>;

        $i2 = virtualinvoke $r2.<java.util.Random: int nextInt(int)>(71);

        $c3 = $r3[$i2];

        r0[i4] = $c3;

        i4 = i4 + 1;

        goto label2;

     label3:
        $r1 = new java.lang.String;

        specialinvoke $r1.<java.lang.String: void <init>(char[])>(r0);

        return $r1;
    }

    public static java.util.Date parseDate(java.lang.String) throws java.text.ParseException
    {
        java.lang.Throwable $r4;
        java.util.Date $r3;
        java.text.SimpleDateFormat $r0, $r2;
        java.lang.String r1;

        r1 := @parameter0: java.lang.String;

        $r0 = <org.jivesoftware.whack.util.StringUtils: java.text.SimpleDateFormat UTC_FORMAT>;

        entermonitor $r0;

     label1:
        $r2 = <org.jivesoftware.whack.util.StringUtils: java.text.SimpleDateFormat UTC_FORMAT>;

        $r3 = virtualinvoke $r2.<java.text.SimpleDateFormat: java.util.Date parse(java.lang.String)>(r1);

        exitmonitor $r0;

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        exitmonitor $r0;

     label4:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void <init>()
    {
        org.jivesoftware.whack.util.StringUtils r0;

        r0 := @this: org.jivesoftware.whack.util.StringUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void <clinit>()
    {
        java.util.TimeZone $r2;
        java.text.SimpleDateFormat $r0, $r1;
        java.util.Random $r11;
        char[] $r4, $r6, $r8, $r10, $r13;
        java.lang.String $r3, $r5, $r7, $r9, $r12;

        <org.jivesoftware.whack.util.StringUtils: java.lang.String cvt> = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

        <org.jivesoftware.whack.util.StringUtils: int fillchar> = 61;

        $r0 = new java.text.SimpleDateFormat;

        specialinvoke $r0.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("yyyy-MM-dd\'T\'HH:mm:ss.SSS\'Z\'");

        <org.jivesoftware.whack.util.StringUtils: java.text.SimpleDateFormat UTC_FORMAT> = $r0;

        $r1 = <org.jivesoftware.whack.util.StringUtils: java.text.SimpleDateFormat UTC_FORMAT>;

        $r2 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("UTC");

        virtualinvoke $r1.<java.text.SimpleDateFormat: void setTimeZone(java.util.TimeZone)>($r2);

        $r3 = "&quot;";

        $r4 = virtualinvoke $r3.<java.lang.String: char[] toCharArray()>();

        <org.jivesoftware.whack.util.StringUtils: char[] QUOTE_ENCODE> = $r4;

        $r5 = "&amp;";

        $r6 = virtualinvoke $r5.<java.lang.String: char[] toCharArray()>();

        <org.jivesoftware.whack.util.StringUtils: char[] AMP_ENCODE> = $r6;

        $r7 = "&lt;";

        $r8 = virtualinvoke $r7.<java.lang.String: char[] toCharArray()>();

        <org.jivesoftware.whack.util.StringUtils: char[] LT_ENCODE> = $r8;

        $r9 = "&gt;";

        $r10 = virtualinvoke $r9.<java.lang.String: char[] toCharArray()>();

        <org.jivesoftware.whack.util.StringUtils: char[] GT_ENCODE> = $r10;

        <org.jivesoftware.whack.util.StringUtils: java.security.MessageDigest digest> = null;

        $r11 = new java.util.Random;

        specialinvoke $r11.<java.util.Random: void <init>()>();

        <org.jivesoftware.whack.util.StringUtils: java.util.Random randGen> = $r11;

        $r12 = "0123456789abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";

        $r13 = virtualinvoke $r12.<java.lang.String: char[] toCharArray()>();

        <org.jivesoftware.whack.util.StringUtils: char[] numbersAndLetters> = $r13;

        return;
    }
}
