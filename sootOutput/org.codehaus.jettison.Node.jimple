public class org.codehaus.jettison.Node extends java.lang.Object
{
    org.codehaus.jettison.json.JSONObject object;
    java.util.Map attributes;
    java.util.Map namespaces;
    java.util.Iterator keys;
    javax.xml.namespace.QName name;
    org.codehaus.jettison.json.JSONArray array;
    int arrayIndex;
    java.lang.String currentKey;
    org.codehaus.jettison.Node parent;

    public void <init>(org.codehaus.jettison.Node, java.lang.String, org.codehaus.jettison.json.JSONObject, org.codehaus.jettison.Convention) throws org.codehaus.jettison.json.JSONException, javax.xml.stream.XMLStreamException
    {
        org.codehaus.jettison.Convention r5;
        java.util.Iterator $r6;
        org.codehaus.jettison.Node r0, r1;
        org.codehaus.jettison.json.JSONObject r2;
        java.util.HashMap $r3, $r4;
        java.lang.String r7;
        javax.xml.namespace.QName $r8;

        r0 := @this: org.codehaus.jettison.Node;

        r1 := @parameter0: org.codehaus.jettison.Node;

        r7 := @parameter1: java.lang.String;

        r2 := @parameter2: org.codehaus.jettison.json.JSONObject;

        r5 := @parameter3: org.codehaus.jettison.Convention;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.codehaus.jettison.Node: org.codehaus.jettison.Node parent> = r1;

        r0.<org.codehaus.jettison.Node: org.codehaus.jettison.json.JSONObject object> = r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<org.codehaus.jettison.Node: java.util.Map namespaces> = $r3;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<org.codehaus.jettison.Node: java.util.Map attributes> = $r4;

        interfaceinvoke r5.<org.codehaus.jettison.Convention: void processAttributesAndNamespaces(org.codehaus.jettison.Node,org.codehaus.jettison.json.JSONObject)>(r0, r2);

        $r6 = virtualinvoke r2.<org.codehaus.jettison.json.JSONObject: java.util.Iterator keys()>();

        r0.<org.codehaus.jettison.Node: java.util.Iterator keys> = $r6;

        $r8 = interfaceinvoke r5.<org.codehaus.jettison.Convention: javax.xml.namespace.QName createQName(java.lang.String,org.codehaus.jettison.Node)>(r7, r0);

        r0.<org.codehaus.jettison.Node: javax.xml.namespace.QName name> = $r8;

        return;
    }

    public void <init>(java.lang.String, org.codehaus.jettison.Convention) throws javax.xml.stream.XMLStreamException
    {
        org.codehaus.jettison.Convention r1;
        org.codehaus.jettison.Node r0;
        java.util.HashMap $r4, $r5;
        java.lang.String r2;
        javax.xml.namespace.QName $r3;

        r0 := @this: org.codehaus.jettison.Node;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: org.codehaus.jettison.Convention;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = interfaceinvoke r1.<org.codehaus.jettison.Convention: javax.xml.namespace.QName createQName(java.lang.String,org.codehaus.jettison.Node)>(r2, r0);

        r0.<org.codehaus.jettison.Node: javax.xml.namespace.QName name> = $r3;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<org.codehaus.jettison.Node: java.util.Map namespaces> = $r4;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        r0.<org.codehaus.jettison.Node: java.util.Map attributes> = $r5;

        return;
    }

    public void <init>(org.codehaus.jettison.json.JSONObject)
    {
        org.codehaus.jettison.Node r0;
        org.codehaus.jettison.json.JSONObject r1;
        java.util.HashMap $r2, $r3;

        r0 := @this: org.codehaus.jettison.Node;

        r1 := @parameter0: org.codehaus.jettison.json.JSONObject;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.codehaus.jettison.Node: org.codehaus.jettison.json.JSONObject object> = r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<org.codehaus.jettison.Node: java.util.Map namespaces> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<org.codehaus.jettison.Node: java.util.Map attributes> = $r3;

        return;
    }

    public int getNamespaceCount()
    {
        int $i0;
        org.codehaus.jettison.Node r0;
        java.util.Map $r1;

        r0 := @this: org.codehaus.jettison.Node;

        $r1 = r0.<org.codehaus.jettison.Node: java.util.Map namespaces>;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        return $i0;
    }

    public java.lang.String getNamespaceURI(java.lang.String)
    {
        java.util.Map $r2;
        org.codehaus.jettison.Node r0, $r4, $r5;
        java.lang.Object $r3;
        java.lang.String r1, r6;

        r0 := @this: org.codehaus.jettison.Node;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.codehaus.jettison.Node: java.util.Map namespaces>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r6 = (java.lang.String) $r3;

        if r6 != null goto label1;

        $r4 = r0.<org.codehaus.jettison.Node: org.codehaus.jettison.Node parent>;

        if $r4 == null goto label1;

        $r5 = r0.<org.codehaus.jettison.Node: org.codehaus.jettison.Node parent>;

        r6 = virtualinvoke $r5.<org.codehaus.jettison.Node: java.lang.String getNamespaceURI(java.lang.String)>(r1);

     label1:
        return r6;
    }

    public java.lang.String getNamespaceURI(int)
    {
        org.codehaus.jettison.Node r3;
        java.util.Map $r7;
        int $i0, $i1, i2, $i4;
        java.lang.String $r6, $r11;
        java.util.Iterator $r9;
        java.util.Collection $r8;
        java.lang.IllegalArgumentException $r13;
        java.lang.StringBuilder $r2, $r4, $r5, $r12;
        java.lang.Object $r10;

        r3 := @this: org.codehaus.jettison.Node;

        i2 := @parameter0: int;

        if i2 < 0 goto label1;

        $i1 = virtualinvoke r3.<org.codehaus.jettison.Node: int getNamespaceCount()>();

        if i2 < $i1 goto label2;

     label1:
        $r13 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal index: element has ");

        $i0 = virtualinvoke r3.<org.codehaus.jettison.Node: int getNamespaceCount()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" namespace declarations");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r13;

     label2:
        $r7 = r3.<org.codehaus.jettison.Node: java.util.Map namespaces>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.util.Collection values()>();

        $r9 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $i4 = (int) -1;

        i2 = i2 + $i4;

        if i2 < 0 goto label4;

        interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        goto label3;

     label4:
        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        if $r10 != null goto label5;

        $r11 = "";

        goto label6;

     label5:
        $r11 = virtualinvoke $r10.<java.lang.Object: java.lang.String toString()>();

     label6:
        return $r11;
    }

    public java.lang.String getNamespacePrefix(java.lang.String)
    {
        java.util.Map$Entry r8;
        java.util.Iterator $r3;
        org.codehaus.jettison.Node r0, $r4, $r6;
        java.util.Set $r2;
        java.util.Map $r1;
        java.lang.Object $r7, $r9, $r10;
        java.lang.String r5, r11;
        boolean $z0, $z1;

        r0 := @this: org.codehaus.jettison.Node;

        r5 := @parameter0: java.lang.String;

        r11 = null;

        $r1 = r0.<org.codehaus.jettison.Node: java.util.Map namespaces>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.util.Map$Entry) $r7;

        $r9 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getValue()>();

        $z1 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>(r5);

        if $z1 == 0 goto label2;

        $r10 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getKey()>();

        r11 = (java.lang.String) $r10;

     label2:
        goto label1;

     label3:
        if r11 != null goto label4;

        $r4 = r0.<org.codehaus.jettison.Node: org.codehaus.jettison.Node parent>;

        if $r4 == null goto label4;

        $r6 = r0.<org.codehaus.jettison.Node: org.codehaus.jettison.Node parent>;

        r11 = virtualinvoke $r6.<org.codehaus.jettison.Node: java.lang.String getNamespacePrefix(java.lang.String)>(r5);

     label4:
        return r11;
    }

    public java.lang.String getNamespacePrefix(int)
    {
        org.codehaus.jettison.Node r3;
        java.util.Map $r7;
        int $i0, $i1, i2, $i4;
        java.lang.String $r6, $r11;
        java.util.Iterator $r9;
        java.util.Set $r8;
        java.lang.IllegalArgumentException $r13;
        java.lang.StringBuilder $r2, $r4, $r5, $r12;
        java.lang.Object $r10;

        r3 := @this: org.codehaus.jettison.Node;

        i2 := @parameter0: int;

        if i2 < 0 goto label1;

        $i1 = virtualinvoke r3.<org.codehaus.jettison.Node: int getNamespaceCount()>();

        if i2 < $i1 goto label2;

     label1:
        $r13 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal index: element has ");

        $i0 = virtualinvoke r3.<org.codehaus.jettison.Node: int getNamespaceCount()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" namespace declarations");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r13;

     label2:
        $r7 = r3.<org.codehaus.jettison.Node: java.util.Map namespaces>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.util.Set keySet()>();

        $r9 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $i4 = (int) -1;

        i2 = i2 + $i4;

        if i2 < 0 goto label4;

        interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        goto label3;

     label4:
        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        $r11 = virtualinvoke $r10.<java.lang.Object: java.lang.String toString()>();

        return $r11;
    }

    public void setNamespaces(java.util.Map)
    {
        org.codehaus.jettison.Node r0;
        java.util.Map r1;

        r0 := @this: org.codehaus.jettison.Node;

        r1 := @parameter0: java.util.Map;

        r0.<org.codehaus.jettison.Node: java.util.Map namespaces> = r1;

        return;
    }

    public void setNamespace(java.lang.String, java.lang.String)
    {
        java.util.Map $r3;
        org.codehaus.jettison.Node r0;
        java.lang.String r1, r2;

        r0 := @this: org.codehaus.jettison.Node;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.codehaus.jettison.Node: java.util.Map namespaces>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    public java.util.Map getAttributes()
    {
        org.codehaus.jettison.Node r0;
        java.util.Map $r1;

        r0 := @this: org.codehaus.jettison.Node;

        $r1 = r0.<org.codehaus.jettison.Node: java.util.Map attributes>;

        return $r1;
    }

    public void setAttribute(javax.xml.namespace.QName, java.lang.String)
    {
        java.util.Map $r3;
        org.codehaus.jettison.Node r0;
        javax.xml.namespace.QName r1;
        java.lang.String r2;

        r0 := @this: org.codehaus.jettison.Node;

        r1 := @parameter0: javax.xml.namespace.QName;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.codehaus.jettison.Node: java.util.Map attributes>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    public java.util.Iterator getKeys()
    {
        org.codehaus.jettison.Node r0;
        java.util.Iterator $r1;

        r0 := @this: org.codehaus.jettison.Node;

        $r1 = r0.<org.codehaus.jettison.Node: java.util.Iterator keys>;

        return $r1;
    }

    public javax.xml.namespace.QName getName()
    {
        org.codehaus.jettison.Node r0;
        javax.xml.namespace.QName $r1;

        r0 := @this: org.codehaus.jettison.Node;

        $r1 = r0.<org.codehaus.jettison.Node: javax.xml.namespace.QName name>;

        return $r1;
    }

    public org.codehaus.jettison.json.JSONObject getObject()
    {
        org.codehaus.jettison.Node r0;
        org.codehaus.jettison.json.JSONObject $r1;

        r0 := @this: org.codehaus.jettison.Node;

        $r1 = r0.<org.codehaus.jettison.Node: org.codehaus.jettison.json.JSONObject object>;

        return $r1;
    }

    public void setObject(org.codehaus.jettison.json.JSONObject)
    {
        org.codehaus.jettison.Node r0;
        org.codehaus.jettison.json.JSONObject r1;

        r0 := @this: org.codehaus.jettison.Node;

        r1 := @parameter0: org.codehaus.jettison.json.JSONObject;

        r0.<org.codehaus.jettison.Node: org.codehaus.jettison.json.JSONObject object> = r1;

        return;
    }

    public org.codehaus.jettison.json.JSONArray getArray()
    {
        org.codehaus.jettison.Node r0;
        org.codehaus.jettison.json.JSONArray $r1;

        r0 := @this: org.codehaus.jettison.Node;

        $r1 = r0.<org.codehaus.jettison.Node: org.codehaus.jettison.json.JSONArray array>;

        return $r1;
    }

    public void setArray(org.codehaus.jettison.json.JSONArray)
    {
        org.codehaus.jettison.Node r0;
        org.codehaus.jettison.json.JSONArray r1;

        r0 := @this: org.codehaus.jettison.Node;

        r1 := @parameter0: org.codehaus.jettison.json.JSONArray;

        r0.<org.codehaus.jettison.Node: org.codehaus.jettison.json.JSONArray array> = r1;

        return;
    }

    public int getArrayIndex()
    {
        int $i0;
        org.codehaus.jettison.Node r0;

        r0 := @this: org.codehaus.jettison.Node;

        $i0 = r0.<org.codehaus.jettison.Node: int arrayIndex>;

        return $i0;
    }

    public void setArrayIndex(int)
    {
        int i0;
        org.codehaus.jettison.Node r0;

        r0 := @this: org.codehaus.jettison.Node;

        i0 := @parameter0: int;

        r0.<org.codehaus.jettison.Node: int arrayIndex> = i0;

        return;
    }

    public java.lang.String getCurrentKey()
    {
        org.codehaus.jettison.Node r0;
        java.lang.String $r1;

        r0 := @this: org.codehaus.jettison.Node;

        $r1 = r0.<org.codehaus.jettison.Node: java.lang.String currentKey>;

        return $r1;
    }

    public void setCurrentKey(java.lang.String)
    {
        org.codehaus.jettison.Node r0;
        java.lang.String r1;

        r0 := @this: org.codehaus.jettison.Node;

        r1 := @parameter0: java.lang.String;

        r0.<org.codehaus.jettison.Node: java.lang.String currentKey> = r1;

        return;
    }

    public java.lang.String toString()
    {
        org.codehaus.jettison.Node r0;
        javax.xml.namespace.QName $r1, $r3;
        java.lang.String $r2, $r4;

        r0 := @this: org.codehaus.jettison.Node;

        $r1 = r0.<org.codehaus.jettison.Node: javax.xml.namespace.QName name>;

        if $r1 == null goto label1;

        $r3 = r0.<org.codehaus.jettison.Node: javax.xml.namespace.QName name>;

        $r4 = virtualinvoke $r3.<javax.xml.namespace.QName: java.lang.String toString()>();

        return $r4;

     label1:
        $r2 = specialinvoke r0.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }
}
