abstract class com.sun.xml.bind.v2.model.impl.SingleTypePropertyInfoImpl extends com.sun.xml.bind.v2.model.impl.PropertyInfoImpl
{
    private com.sun.xml.bind.v2.model.core.NonElement type;
    private final com.sun.xml.bind.v2.runtime.reflect.Accessor acc;
    private com.sun.xml.bind.v2.runtime.Transducer xducer;
    static final boolean $assertionsDisabled;

    public void <init>(com.sun.xml.bind.v2.model.impl.ClassInfoImpl, com.sun.xml.bind.v2.model.impl.PropertySeed)
    {
        com.sun.xml.bind.v2.model.impl.PropertySeed r2;
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl r1;
        com.sun.xml.bind.v2.model.runtime.RuntimePropertyInfo $r6;
        com.sun.xml.bind.v2.model.core.Adapter $r5, $r7;
        com.sun.xml.bind.v2.runtime.reflect.Accessor $r4, r8;
        com.sun.xml.bind.v2.model.impl.SingleTypePropertyInfoImpl r0;
        com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl$RuntimePropertySeed $r3;
        boolean $z0, $z1;

        r0 := @this: com.sun.xml.bind.v2.model.impl.SingleTypePropertyInfoImpl;

        r1 := @parameter0: com.sun.xml.bind.v2.model.impl.ClassInfoImpl;

        r2 := @parameter1: com.sun.xml.bind.v2.model.impl.PropertySeed;

        specialinvoke r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: void <init>(com.sun.xml.bind.v2.model.impl.ClassInfoImpl,com.sun.xml.bind.v2.model.impl.PropertySeed)>(r1, r2);

        $z0 = r0 instanceof com.sun.xml.bind.v2.model.runtime.RuntimePropertyInfo;

        if $z0 == 0 goto label2;

        $r3 = (com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl$RuntimePropertySeed) r2;

        $r4 = virtualinvoke $r3.<com.sun.xml.bind.v2.model.impl.RuntimeClassInfoImpl$RuntimePropertySeed: com.sun.xml.bind.v2.runtime.reflect.Accessor getAccessor()>();

        r8 = $r4;

        $r5 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.SingleTypePropertyInfoImpl: com.sun.xml.bind.v2.model.core.Adapter getAdapter()>();

        if $r5 == null goto label1;

        $z1 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.SingleTypePropertyInfoImpl: boolean isCollection()>();

        if $z1 != 0 goto label1;

        $r6 = (com.sun.xml.bind.v2.model.runtime.RuntimePropertyInfo) r0;

        $r7 = interfaceinvoke $r6.<com.sun.xml.bind.v2.model.runtime.RuntimePropertyInfo: com.sun.xml.bind.v2.model.core.Adapter getAdapter()>();

        r8 = virtualinvoke $r4.<com.sun.xml.bind.v2.runtime.reflect.Accessor: com.sun.xml.bind.v2.runtime.reflect.Accessor adapt(com.sun.xml.bind.v2.model.core.Adapter)>($r7);

     label1:
        r0.<com.sun.xml.bind.v2.model.impl.SingleTypePropertyInfoImpl: com.sun.xml.bind.v2.runtime.reflect.Accessor acc> = r8;

        goto label3;

     label2:
        r0.<com.sun.xml.bind.v2.model.impl.SingleTypePropertyInfoImpl: com.sun.xml.bind.v2.runtime.reflect.Accessor acc> = null;

     label3:
        return;
    }

    public java.util.List ref()
    {
        com.sun.xml.bind.v2.model.core.NonElement $r1;
        java.util.List $r2;
        com.sun.xml.bind.v2.model.impl.SingleTypePropertyInfoImpl r0;

        r0 := @this: com.sun.xml.bind.v2.model.impl.SingleTypePropertyInfoImpl;

        $r1 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.SingleTypePropertyInfoImpl: com.sun.xml.bind.v2.model.core.NonElement getTarget()>();

        $r2 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r1);

        return $r2;
    }

    public com.sun.xml.bind.v2.model.core.NonElement getTarget()
    {
        com.sun.xml.bind.v2.model.core.NonElement $r1, $r5, $r9;
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl $r2, $r6;
        java.lang.AssertionError $r8;
        com.sun.xml.bind.v2.model.impl.SingleTypePropertyInfoImpl r0;
        java.lang.Object $r4;
        boolean $z0;
        com.sun.xml.bind.v2.model.impl.ModelBuilder $r3, $r7;

        r0 := @this: com.sun.xml.bind.v2.model.impl.SingleTypePropertyInfoImpl;

        $r1 = r0.<com.sun.xml.bind.v2.model.impl.SingleTypePropertyInfoImpl: com.sun.xml.bind.v2.model.core.NonElement type>;

        if $r1 != null goto label2;

        $z0 = <com.sun.xml.bind.v2.model.impl.SingleTypePropertyInfoImpl: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r6 = r0.<com.sun.xml.bind.v2.model.impl.SingleTypePropertyInfoImpl: com.sun.xml.bind.v2.model.impl.ClassInfoImpl parent>;

        $r7 = $r6.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.ModelBuilder builder>;

        if $r7 != null goto label1;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>(java.lang.Object)>("this method must be called during the build stage");

        throw $r8;

     label1:
        $r2 = r0.<com.sun.xml.bind.v2.model.impl.SingleTypePropertyInfoImpl: com.sun.xml.bind.v2.model.impl.ClassInfoImpl parent>;

        $r3 = $r2.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.ModelBuilder builder>;

        $r4 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.SingleTypePropertyInfoImpl: java.lang.Object getIndividualType()>();

        $r5 = virtualinvoke $r3.<com.sun.xml.bind.v2.model.impl.ModelBuilder: com.sun.xml.bind.v2.model.core.NonElement getTypeInfo(java.lang.Object,com.sun.xml.bind.v2.model.'annotation'.Locatable)>($r4, r0);

        r0.<com.sun.xml.bind.v2.model.impl.SingleTypePropertyInfoImpl: com.sun.xml.bind.v2.model.core.NonElement type> = $r5;

     label2:
        $r9 = r0.<com.sun.xml.bind.v2.model.impl.SingleTypePropertyInfoImpl: com.sun.xml.bind.v2.model.core.NonElement type>;

        return $r9;
    }

    public com.sun.xml.bind.v2.model.core.PropertyInfo getSource()
    {
        com.sun.xml.bind.v2.model.impl.SingleTypePropertyInfoImpl r0;

        r0 := @this: com.sun.xml.bind.v2.model.impl.SingleTypePropertyInfoImpl;

        return r0;
    }

    public void link()
    {
        com.sun.xml.bind.v2.model.impl.PropertySeed $r4, $r20;
        java.lang.Object[] $r7, $r16;
        java.lang.String $r10, $r19;
        boolean $z0, $z1, $z2, $z3;
        com.sun.xml.bind.v2.model.impl.ModelBuilder $r9, $r18;
        com.sun.xml.bind.v2.model.core.NonElement $r1, $r11;
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl $r5, $r14;
        com.sun.xml.bind.v2.model.impl.Messages $r8, $r17;
        com.sun.xml.bind.v2.model.impl.SingleTypePropertyInfoImpl r0;
        com.sun.xml.bind.v2.runtime.IllegalAnnotationException $r6, $r15;
        javax.xml.namespace.QName $r2, $r3;
        com.sun.xml.bind.v2.model.core.ID $r12, $r13;

        r0 := @this: com.sun.xml.bind.v2.model.impl.SingleTypePropertyInfoImpl;

        specialinvoke r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: void link()>();

        $r2 = <com.sun.xml.bind.v2.model.core.NonElement: javax.xml.namespace.QName ANYTYPE_NAME>;

        $r1 = r0.<com.sun.xml.bind.v2.model.impl.SingleTypePropertyInfoImpl: com.sun.xml.bind.v2.model.core.NonElement type>;

        $r3 = interfaceinvoke $r1.<com.sun.xml.bind.v2.model.core.NonElement: javax.xml.namespace.QName getTypeName()>();

        $z0 = virtualinvoke $r2.<javax.xml.namespace.QName: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label1;

        $r11 = r0.<com.sun.xml.bind.v2.model.impl.SingleTypePropertyInfoImpl: com.sun.xml.bind.v2.model.core.NonElement type>;

        $z2 = interfaceinvoke $r11.<com.sun.xml.bind.v2.model.core.NonElement: boolean isSimpleType()>();

        if $z2 != 0 goto label1;

        $r12 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.SingleTypePropertyInfoImpl: com.sun.xml.bind.v2.model.core.ID id()>();

        $r13 = <com.sun.xml.bind.v2.model.core.ID: com.sun.xml.bind.v2.model.core.ID IDREF>;

        if $r12 == $r13 goto label1;

        $r14 = r0.<com.sun.xml.bind.v2.model.impl.SingleTypePropertyInfoImpl: com.sun.xml.bind.v2.model.impl.ClassInfoImpl parent>;

        $r18 = $r14.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.ModelBuilder builder>;

        $r15 = new com.sun.xml.bind.v2.runtime.IllegalAnnotationException;

        $r17 = <com.sun.xml.bind.v2.model.impl.Messages: com.sun.xml.bind.v2.model.impl.Messages SIMPLE_TYPE_IS_REQUIRED>;

        $r16 = newarray (java.lang.Object)[0];

        $r19 = virtualinvoke $r17.<com.sun.xml.bind.v2.model.impl.Messages: java.lang.String format(java.lang.Object[])>($r16);

        $r20 = r0.<com.sun.xml.bind.v2.model.impl.SingleTypePropertyInfoImpl: com.sun.xml.bind.v2.model.impl.PropertySeed seed>;

        specialinvoke $r15.<com.sun.xml.bind.v2.runtime.IllegalAnnotationException: void <init>(java.lang.String,com.sun.xml.bind.v2.model.'annotation'.Locatable)>($r19, $r20);

        virtualinvoke $r18.<com.sun.xml.bind.v2.model.impl.ModelBuilder: void reportError(com.sun.xml.bind.v2.runtime.IllegalAnnotationException)>($r15);

     label1:
        $z3 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.SingleTypePropertyInfoImpl: boolean isCollection()>();

        if $z3 != 0 goto label2;

        $r4 = r0.<com.sun.xml.bind.v2.model.impl.SingleTypePropertyInfoImpl: com.sun.xml.bind.v2.model.impl.PropertySeed seed>;

        $z1 = interfaceinvoke $r4.<com.sun.xml.bind.v2.model.impl.PropertySeed: boolean hasAnnotation(java.lang.Class)>(class "Ljavax/xml/bind/annotation/XmlList;");

        if $z1 == 0 goto label2;

        $r5 = r0.<com.sun.xml.bind.v2.model.impl.SingleTypePropertyInfoImpl: com.sun.xml.bind.v2.model.impl.ClassInfoImpl parent>;

        $r9 = $r5.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.ModelBuilder builder>;

        $r6 = new com.sun.xml.bind.v2.runtime.IllegalAnnotationException;

        $r8 = <com.sun.xml.bind.v2.model.impl.Messages: com.sun.xml.bind.v2.model.impl.Messages XMLLIST_ON_SINGLE_PROPERTY>;

        $r7 = newarray (java.lang.Object)[0];

        $r10 = virtualinvoke $r8.<com.sun.xml.bind.v2.model.impl.Messages: java.lang.String format(java.lang.Object[])>($r7);

        specialinvoke $r6.<com.sun.xml.bind.v2.runtime.IllegalAnnotationException: void <init>(java.lang.String,com.sun.xml.bind.v2.model.'annotation'.Locatable)>($r10, r0);

        virtualinvoke $r9.<com.sun.xml.bind.v2.model.impl.ModelBuilder: void reportError(com.sun.xml.bind.v2.runtime.IllegalAnnotationException)>($r6);

     label2:
        return;
    }

    public com.sun.xml.bind.v2.runtime.reflect.Accessor getAccessor()
    {
        com.sun.xml.bind.v2.runtime.reflect.Accessor $r1;
        com.sun.xml.bind.v2.model.impl.SingleTypePropertyInfoImpl r0;

        r0 := @this: com.sun.xml.bind.v2.model.impl.SingleTypePropertyInfoImpl;

        $r1 = r0.<com.sun.xml.bind.v2.model.impl.SingleTypePropertyInfoImpl: com.sun.xml.bind.v2.runtime.reflect.Accessor acc>;

        return $r1;
    }

    public com.sun.xml.bind.v2.runtime.Transducer getTransducer()
    {
        com.sun.xml.bind.v2.model.runtime.RuntimeNonElementRef $r2;
        com.sun.xml.bind.v2.model.impl.SingleTypePropertyInfoImpl r0;
        com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl $r5;
        com.sun.xml.bind.v2.runtime.Transducer $r1, $r3, $r4, $r6;

        r0 := @this: com.sun.xml.bind.v2.model.impl.SingleTypePropertyInfoImpl;

        $r1 = r0.<com.sun.xml.bind.v2.model.impl.SingleTypePropertyInfoImpl: com.sun.xml.bind.v2.runtime.Transducer xducer>;

        if $r1 != null goto label1;

        $r2 = (com.sun.xml.bind.v2.model.runtime.RuntimeNonElementRef) r0;

        $r3 = staticinvoke <com.sun.xml.bind.v2.model.impl.RuntimeModelBuilder: com.sun.xml.bind.v2.runtime.Transducer createTransducer(com.sun.xml.bind.v2.model.runtime.RuntimeNonElementRef)>($r2);

        r0.<com.sun.xml.bind.v2.model.impl.SingleTypePropertyInfoImpl: com.sun.xml.bind.v2.runtime.Transducer xducer> = $r3;

        $r4 = r0.<com.sun.xml.bind.v2.model.impl.SingleTypePropertyInfoImpl: com.sun.xml.bind.v2.runtime.Transducer xducer>;

        if $r4 != null goto label1;

        $r5 = <com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl: com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl STRING>;

        r0.<com.sun.xml.bind.v2.model.impl.SingleTypePropertyInfoImpl: com.sun.xml.bind.v2.runtime.Transducer xducer> = $r5;

     label1:
        $r6 = r0.<com.sun.xml.bind.v2.model.impl.SingleTypePropertyInfoImpl: com.sun.xml.bind.v2.runtime.Transducer xducer>;

        return $r6;
    }

    public volatile java.util.Collection ref()
    {
        java.util.List $r1;
        com.sun.xml.bind.v2.model.impl.SingleTypePropertyInfoImpl r0;

        r0 := @this: com.sun.xml.bind.v2.model.impl.SingleTypePropertyInfoImpl;

        $r1 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.SingleTypePropertyInfoImpl: java.util.List ref()>();

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lcom/sun/xml/bind/v2/model/impl/SingleTypePropertyInfoImpl;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.sun.xml.bind.v2.model.impl.SingleTypePropertyInfoImpl: boolean $assertionsDisabled> = $z1;

        return;
    }
}
