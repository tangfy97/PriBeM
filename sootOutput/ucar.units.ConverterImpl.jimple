public abstract class ucar.units.ConverterImpl extends java.lang.Object implements ucar.units.Converter
{

    protected void <init>(ucar.units.Unit, ucar.units.Unit) throws ucar.units.ConversionException
    {
        ucar.units.ConversionException $r3;
        ucar.units.Unit r1, r2;
        ucar.units.ConverterImpl r0;
        boolean $z0;

        r0 := @this: ucar.units.ConverterImpl;

        r1 := @parameter0: ucar.units.Unit;

        r2 := @parameter1: ucar.units.Unit;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z0 = interfaceinvoke r1.<ucar.units.Unit: boolean isCompatible(ucar.units.Unit)>(r2);

        if $z0 != 0 goto label1;

        $r3 = new ucar.units.ConversionException;

        specialinvoke $r3.<ucar.units.ConversionException: void <init>(ucar.units.Unit,ucar.units.Unit)>(r1, r2);

        throw $r3;

     label1:
        return;
    }

    public static ucar.units.Converter create(ucar.units.Unit, ucar.units.Unit) throws ucar.units.ConversionException
    {
        ucar.units.Unit r0, r1;
        ucar.units.Converter $r2;

        r0 := @parameter0: ucar.units.Unit;

        r1 := @parameter1: ucar.units.Unit;

        $r2 = interfaceinvoke r0.<ucar.units.Unit: ucar.units.Converter getConverterTo(ucar.units.Unit)>(r1);

        return $r2;
    }

    public final float convert(float)
    {
        ucar.units.ConverterImpl r0;
        float f0, $f1;
        double $d0, $d1;

        r0 := @this: ucar.units.ConverterImpl;

        f0 := @parameter0: float;

        $d0 = (double) f0;

        $d1 = virtualinvoke r0.<ucar.units.ConverterImpl: double convert(double)>($d0);

        $f1 = (float) $d1;

        return $f1;
    }

    public final float[] convert(float[])
    {
        int $i0;
        ucar.units.ConverterImpl r0;
        float[] r1, $r2, $r3;

        r0 := @this: ucar.units.ConverterImpl;

        r1 := @parameter0: float[];

        $i0 = lengthof r1;

        $r2 = newarray (float)[$i0];

        $r3 = virtualinvoke r0.<ucar.units.ConverterImpl: float[] convert(float[],float[])>(r1, $r2);

        return $r3;
    }

    public final double[] convert(double[])
    {
        double[] r1, $r2, $r3;
        int $i0;
        ucar.units.ConverterImpl r0;

        r0 := @this: ucar.units.ConverterImpl;

        r1 := @parameter0: double[];

        $i0 = lengthof r1;

        $r2 = newarray (double)[$i0];

        $r3 = virtualinvoke r0.<ucar.units.ConverterImpl: double[] convert(double[],double[])>(r1, $r2);

        return $r3;
    }
}
