public class org.waveprotocol.box.server.frontend.WaveClientRpcImpl extends java.lang.Object implements org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveClientRpc$Interface
{
    private static final org.waveprotocol.wave.util.logging.Log LOG;
    private final org.waveprotocol.box.server.frontend.ClientFrontend frontend;
    private final boolean handleAuthentication;

    public static org.waveprotocol.box.server.frontend.WaveClientRpcImpl create(org.waveprotocol.box.server.frontend.ClientFrontend, boolean)
    {
        org.waveprotocol.box.server.frontend.ClientFrontend r1;
        org.waveprotocol.box.server.frontend.WaveClientRpcImpl $r0;
        boolean z0;

        r1 := @parameter0: org.waveprotocol.box.server.frontend.ClientFrontend;

        z0 := @parameter1: boolean;

        $r0 = new org.waveprotocol.box.server.frontend.WaveClientRpcImpl;

        specialinvoke $r0.<org.waveprotocol.box.server.frontend.WaveClientRpcImpl: void <init>(org.waveprotocol.box.server.frontend.ClientFrontend,boolean)>(r1, z0);

        return $r0;
    }

    private void <init>(org.waveprotocol.box.server.frontend.ClientFrontend, boolean)
    {
        org.waveprotocol.box.server.frontend.ClientFrontend r1;
        org.waveprotocol.box.server.frontend.WaveClientRpcImpl r0;
        boolean z0;

        r0 := @this: org.waveprotocol.box.server.frontend.WaveClientRpcImpl;

        r1 := @parameter0: org.waveprotocol.box.server.frontend.ClientFrontend;

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.box.server.frontend.WaveClientRpcImpl: org.waveprotocol.box.server.frontend.ClientFrontend frontend> = r1;

        r0.<org.waveprotocol.box.server.frontend.WaveClientRpcImpl: boolean handleAuthentication> = z0;

        return;
    }

    public void open(com.google.protobuf.RpcController, org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolOpenRequest, com.google.protobuf.RpcCallback)
    {
        org.waveprotocol.box.server.frontend.WaveClientRpcImpl$1 $r13;
        org.waveprotocol.box.server.rpc.ServerRpcController $r9;
        org.waveprotocol.wave.model.wave.ParticipantId $r10;
        com.google.protobuf.RpcCallback r14;
        org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolOpenRequest r0;
        org.waveprotocol.wave.model.id.IdFilter $r6;
        org.waveprotocol.wave.util.logging.Log $r16;
        java.lang.String $r2, $r17;
        org.waveprotocol.box.server.frontend.ClientFrontend $r11;
        org.waveprotocol.wave.model.id.WaveId $r3;
        org.waveprotocol.wave.model.id.InvalidIdException $r15;
        org.waveprotocol.box.server.frontend.WaveClientRpcImpl r7;
        java.util.Set $r4;
        com.google.protobuf.RpcController r8;
        java.util.List $r5, $r12;
        org.waveprotocol.wave.model.id.ModernIdSerialiser $r1;

        r7 := @this: org.waveprotocol.box.server.frontend.WaveClientRpcImpl;

        r8 := @parameter0: com.google.protobuf.RpcController;

        r0 := @parameter1: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolOpenRequest;

        r14 := @parameter2: com.google.protobuf.RpcCallback;

     label1:
        $r1 = <org.waveprotocol.wave.model.id.ModernIdSerialiser: org.waveprotocol.wave.model.id.ModernIdSerialiser INSTANCE>;

        $r2 = virtualinvoke r0.<org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolOpenRequest: java.lang.String getWaveId()>();

        $r3 = virtualinvoke $r1.<org.waveprotocol.wave.model.id.ModernIdSerialiser: org.waveprotocol.wave.model.id.WaveId deserialiseWaveId(java.lang.String)>($r2);

     label2:
        goto label4;

     label3:
        $r15 := @caughtexception;

        $r16 = <org.waveprotocol.box.server.frontend.WaveClientRpcImpl: org.waveprotocol.wave.util.logging.Log LOG>;

        virtualinvoke $r16.<org.waveprotocol.wave.util.logging.Log: void warning(java.lang.String,java.lang.Throwable)>("Invalid id in open", $r15);

        $r17 = virtualinvoke $r15.<org.waveprotocol.wave.model.id.InvalidIdException: java.lang.String getMessage()>();

        interfaceinvoke r8.<com.google.protobuf.RpcController: void setFailed(java.lang.String)>($r17);

        return;

     label4:
        $r4 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();

        $r5 = virtualinvoke r0.<org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolOpenRequest: java.util.List getWaveletIdPrefixList()>();

        $r6 = staticinvoke <org.waveprotocol.wave.model.id.IdFilter: org.waveprotocol.wave.model.id.IdFilter of(java.util.Collection,java.util.Collection)>($r4, $r5);

        $r9 = virtualinvoke r7.<org.waveprotocol.box.server.frontend.WaveClientRpcImpl: org.waveprotocol.box.server.rpc.ServerRpcController asBoxController(com.google.protobuf.RpcController)>(r8);

        $r10 = interfaceinvoke $r9.<org.waveprotocol.box.server.rpc.ServerRpcController: org.waveprotocol.wave.model.wave.ParticipantId getLoggedInUser()>();

        $r11 = r7.<org.waveprotocol.box.server.frontend.WaveClientRpcImpl: org.waveprotocol.box.server.frontend.ClientFrontend frontend>;

        $r12 = virtualinvoke r0.<org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolOpenRequest: java.util.List getKnownWaveletList()>();

        $r13 = new org.waveprotocol.box.server.frontend.WaveClientRpcImpl$1;

        specialinvoke $r13.<org.waveprotocol.box.server.frontend.WaveClientRpcImpl$1: void <init>(org.waveprotocol.box.server.frontend.WaveClientRpcImpl,com.google.protobuf.RpcController,com.google.protobuf.RpcCallback)>(r7, r8, r14);

        interfaceinvoke $r11.<org.waveprotocol.box.server.frontend.ClientFrontend: void openRequest(org.waveprotocol.wave.model.wave.ParticipantId,org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.model.id.IdFilter,java.util.Collection,org.waveprotocol.box.server.frontend.ClientFrontend$OpenListener)>($r10, $r3, $r6, $r12, $r13);

        return;

        catch org.waveprotocol.wave.model.id.InvalidIdException from label1 to label2 with label3;
    }

    public void submit(com.google.protobuf.RpcController, org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolSubmitRequest, com.google.protobuf.RpcCallback)
    {
        org.waveprotocol.box.server.frontend.WaveClientRpcImpl$2 $r10;
        org.waveprotocol.box.server.rpc.ServerRpcController $r6;
        org.waveprotocol.wave.model.wave.ParticipantId $r7;
        com.google.protobuf.RpcCallback r11;
        org.waveprotocol.wave.util.logging.Log $r13;
        java.lang.String $r2, $r14, r15;
        org.waveprotocol.box.server.frontend.ClientFrontend $r8;
        boolean $z0;
        org.waveprotocol.wave.model.id.WaveletName $r3;
        org.waveprotocol.wave.model.id.InvalidIdException $r12;
        org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolSubmitRequest r0;
        org.waveprotocol.box.server.frontend.WaveClientRpcImpl r4;
        org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta $r9;
        com.google.protobuf.RpcController r5;
        org.waveprotocol.wave.model.id.ModernIdSerialiser $r1;

        r4 := @this: org.waveprotocol.box.server.frontend.WaveClientRpcImpl;

        r5 := @parameter0: com.google.protobuf.RpcController;

        r0 := @parameter1: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolSubmitRequest;

        r11 := @parameter2: com.google.protobuf.RpcCallback;

     label1:
        $r1 = <org.waveprotocol.wave.model.id.ModernIdSerialiser: org.waveprotocol.wave.model.id.ModernIdSerialiser INSTANCE>;

        $r2 = virtualinvoke r0.<org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolSubmitRequest: java.lang.String getWaveletName()>();

        $r3 = virtualinvoke $r1.<org.waveprotocol.wave.model.id.ModernIdSerialiser: org.waveprotocol.wave.model.id.WaveletName deserialiseWaveletName(java.lang.String)>($r2);

     label2:
        goto label4;

     label3:
        $r12 := @caughtexception;

        $r13 = <org.waveprotocol.box.server.frontend.WaveClientRpcImpl: org.waveprotocol.wave.util.logging.Log LOG>;

        virtualinvoke $r13.<org.waveprotocol.wave.util.logging.Log: void warning(java.lang.String,java.lang.Throwable)>("Invalid id in submit", $r12);

        $r14 = virtualinvoke $r12.<org.waveprotocol.wave.model.id.InvalidIdException: java.lang.String getMessage()>();

        interfaceinvoke r5.<com.google.protobuf.RpcController: void setFailed(java.lang.String)>($r14);

        return;

     label4:
        $z0 = virtualinvoke r0.<org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolSubmitRequest: boolean hasChannelId()>();

        if $z0 == 0 goto label5;

        r15 = virtualinvoke r0.<org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolSubmitRequest: java.lang.String getChannelId()>();

        goto label6;

     label5:
        r15 = null;

     label6:
        $r6 = virtualinvoke r4.<org.waveprotocol.box.server.frontend.WaveClientRpcImpl: org.waveprotocol.box.server.rpc.ServerRpcController asBoxController(com.google.protobuf.RpcController)>(r5);

        $r7 = interfaceinvoke $r6.<org.waveprotocol.box.server.rpc.ServerRpcController: org.waveprotocol.wave.model.wave.ParticipantId getLoggedInUser()>();

        $r8 = r4.<org.waveprotocol.box.server.frontend.WaveClientRpcImpl: org.waveprotocol.box.server.frontend.ClientFrontend frontend>;

        $r9 = virtualinvoke r0.<org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolSubmitRequest: org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta getDelta()>();

        $r10 = new org.waveprotocol.box.server.frontend.WaveClientRpcImpl$2;

        specialinvoke $r10.<org.waveprotocol.box.server.frontend.WaveClientRpcImpl$2: void <init>(org.waveprotocol.box.server.frontend.WaveClientRpcImpl,com.google.protobuf.RpcCallback)>(r4, r11);

        interfaceinvoke $r8.<org.waveprotocol.box.server.frontend.ClientFrontend: void submitRequest(org.waveprotocol.wave.model.wave.ParticipantId,org.waveprotocol.wave.model.id.WaveletName,org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta,java.lang.String,org.waveprotocol.box.server.waveserver.WaveletProvider$SubmitRequestListener)>($r7, $r3, $r9, r15, $r10);

        return;

        catch org.waveprotocol.wave.model.id.InvalidIdException from label1 to label2 with label3;
    }

    public void authenticate(com.google.protobuf.RpcController, org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolAuthenticate, com.google.protobuf.RpcCallback)
    {
        org.waveprotocol.box.server.frontend.WaveClientRpcImpl r0;
        com.google.protobuf.RpcController r3;
        org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolAuthenticationResult $r2;
        org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolAuthenticate r4;
        boolean $z0;
        com.google.protobuf.RpcCallback r1;

        r0 := @this: org.waveprotocol.box.server.frontend.WaveClientRpcImpl;

        r3 := @parameter0: com.google.protobuf.RpcController;

        r4 := @parameter1: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolAuthenticate;

        r1 := @parameter2: com.google.protobuf.RpcCallback;

        $z0 = r0.<org.waveprotocol.box.server.frontend.WaveClientRpcImpl: boolean handleAuthentication>;

        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "ProtocolAuthenticate should be handled in ServerRpcProvider");

        $r2 = staticinvoke <org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolAuthenticationResult: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolAuthenticationResult getDefaultInstance()>();

        interfaceinvoke r1.<com.google.protobuf.RpcCallback: void run(java.lang.Object)>($r2);

        return;
    }

    org.waveprotocol.box.server.rpc.ServerRpcController asBoxController(com.google.protobuf.RpcController)
    {
        com.google.protobuf.RpcController r0;
        org.waveprotocol.box.server.rpc.ServerRpcController $r1;
        org.waveprotocol.box.server.frontend.WaveClientRpcImpl r2;

        r2 := @this: org.waveprotocol.box.server.frontend.WaveClientRpcImpl;

        r0 := @parameter0: com.google.protobuf.RpcController;

        $r1 = (org.waveprotocol.box.server.rpc.ServerRpcController) r0;

        return $r1;
    }

    static org.waveprotocol.wave.util.logging.Log access$000()
    {
        org.waveprotocol.wave.util.logging.Log $r0;

        $r0 = <org.waveprotocol.box.server.frontend.WaveClientRpcImpl: org.waveprotocol.wave.util.logging.Log LOG>;

        return $r0;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.util.logging.Log $r0;

        $r0 = staticinvoke <org.waveprotocol.wave.util.logging.Log: org.waveprotocol.wave.util.logging.Log get(java.lang.Class)>(class "Lorg/waveprotocol/box/server/frontend/WaveClientRpcImpl;");

        <org.waveprotocol.box.server.frontend.WaveClientRpcImpl: org.waveprotocol.wave.util.logging.Log LOG> = $r0;

        return;
    }
}
