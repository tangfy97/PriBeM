public final class org.codehaus.jackson.node.IntNode extends org.codehaus.jackson.node.NumericNode
{
    static final int MIN_CANONICAL;
    static final int MAX_CANONICAL;
    private static final org.codehaus.jackson.node.IntNode[] CANONICALS;
    final int _value;

    public void <init>(int)
    {
        int i0;
        org.codehaus.jackson.node.IntNode r0;

        r0 := @this: org.codehaus.jackson.node.IntNode;

        i0 := @parameter0: int;

        specialinvoke r0.<org.codehaus.jackson.node.NumericNode: void <init>()>();

        r0.<org.codehaus.jackson.node.IntNode: int _value> = i0;

        return;
    }

    public static org.codehaus.jackson.node.IntNode valueOf(int)
    {
        int i0, $i1, $i3, $i5;
        org.codehaus.jackson.node.IntNode[] $r1;
        org.codehaus.jackson.node.IntNode $r2, $r3;

        i0 := @parameter0: int;

        if i0 > 10 goto label1;

        $i3 = (int) -1;

        if i0 >= $i3 goto label2;

     label1:
        $r3 = new org.codehaus.jackson.node.IntNode;

        specialinvoke $r3.<org.codehaus.jackson.node.IntNode: void <init>(int)>(i0);

        return $r3;

     label2:
        $r1 = <org.codehaus.jackson.node.IntNode: org.codehaus.jackson.node.IntNode[] CANONICALS>;

        $i5 = (int) -1;

        $i1 = i0 - $i5;

        $r2 = $r1[$i1];

        return $r2;
    }

    public org.codehaus.jackson.JsonToken asToken()
    {
        org.codehaus.jackson.JsonToken $r0;
        org.codehaus.jackson.node.IntNode r1;

        r1 := @this: org.codehaus.jackson.node.IntNode;

        $r0 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_INT>;

        return $r0;
    }

    public org.codehaus.jackson.JsonParser$NumberType getNumberType()
    {
        org.codehaus.jackson.node.IntNode r1;
        org.codehaus.jackson.JsonParser$NumberType $r0;

        r1 := @this: org.codehaus.jackson.node.IntNode;

        $r0 = <org.codehaus.jackson.JsonParser$NumberType: org.codehaus.jackson.JsonParser$NumberType INT>;

        return $r0;
    }

    public boolean isIntegralNumber()
    {
        org.codehaus.jackson.node.IntNode r0;

        r0 := @this: org.codehaus.jackson.node.IntNode;

        return 1;
    }

    public boolean isInt()
    {
        org.codehaus.jackson.node.IntNode r0;

        r0 := @this: org.codehaus.jackson.node.IntNode;

        return 1;
    }

    public java.lang.Number getNumberValue()
    {
        int $i0;
        org.codehaus.jackson.node.IntNode r0;
        java.lang.Integer $r1;

        r0 := @this: org.codehaus.jackson.node.IntNode;

        $i0 = r0.<org.codehaus.jackson.node.IntNode: int _value>;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        return $r1;
    }

    public int getIntValue()
    {
        int $i0;
        org.codehaus.jackson.node.IntNode r0;

        r0 := @this: org.codehaus.jackson.node.IntNode;

        $i0 = r0.<org.codehaus.jackson.node.IntNode: int _value>;

        return $i0;
    }

    public long getLongValue()
    {
        int $i0;
        long $l1;
        org.codehaus.jackson.node.IntNode r0;

        r0 := @this: org.codehaus.jackson.node.IntNode;

        $i0 = r0.<org.codehaus.jackson.node.IntNode: int _value>;

        $l1 = (long) $i0;

        return $l1;
    }

    public double getDoubleValue()
    {
        int $i0;
        org.codehaus.jackson.node.IntNode r0;
        double $d0;

        r0 := @this: org.codehaus.jackson.node.IntNode;

        $i0 = r0.<org.codehaus.jackson.node.IntNode: int _value>;

        $d0 = (double) $i0;

        return $d0;
    }

    public java.math.BigDecimal getDecimalValue()
    {
        java.math.BigDecimal $r1;
        int $i0;
        long $l1;
        org.codehaus.jackson.node.IntNode r0;

        r0 := @this: org.codehaus.jackson.node.IntNode;

        $i0 = r0.<org.codehaus.jackson.node.IntNode: int _value>;

        $l1 = (long) $i0;

        $r1 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>($l1);

        return $r1;
    }

    public java.math.BigInteger getBigIntegerValue()
    {
        int $i0;
        long $l1;
        java.math.BigInteger $r1;
        org.codehaus.jackson.node.IntNode r0;

        r0 := @this: org.codehaus.jackson.node.IntNode;

        $i0 = r0.<org.codehaus.jackson.node.IntNode: int _value>;

        $l1 = (long) $i0;

        $r1 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l1);

        return $r1;
    }

    public java.lang.String asText()
    {
        int $i0;
        java.lang.String $r1;
        org.codehaus.jackson.node.IntNode r0;

        r0 := @this: org.codehaus.jackson.node.IntNode;

        $i0 = r0.<org.codehaus.jackson.node.IntNode: int _value>;

        $r1 = staticinvoke <org.codehaus.jackson.io.NumberOutput: java.lang.String toString(int)>($i0);

        return $r1;
    }

    public boolean asBoolean(boolean)
    {
        int $i0;
        org.codehaus.jackson.node.IntNode r0;
        boolean z0, $z1;

        r0 := @this: org.codehaus.jackson.node.IntNode;

        z0 := @parameter0: boolean;

        $i0 = r0.<org.codehaus.jackson.node.IntNode: int _value>;

        if $i0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public final void serialize(org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.JsonGenerator r0;
        int $i0;
        org.codehaus.jackson.map.SerializerProvider r2;
        org.codehaus.jackson.node.IntNode r1;

        r1 := @this: org.codehaus.jackson.node.IntNode;

        r0 := @parameter0: org.codehaus.jackson.JsonGenerator;

        r2 := @parameter1: org.codehaus.jackson.map.SerializerProvider;

        $i0 = r1.<org.codehaus.jackson.node.IntNode: int _value>;

        virtualinvoke r0.<org.codehaus.jackson.JsonGenerator: void writeNumber(int)>($i0);

        return;
    }

    public boolean equals(java.lang.Object)
    {
        int $i0, $i1;
        java.lang.Object r0;
        java.lang.Class $r2, $r3;
        org.codehaus.jackson.node.IntNode r1, $r4;
        boolean $z0;

        r1 := @this: org.codehaus.jackson.node.IntNode;

        r0 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r0 != null goto label2;

        return 0;

     label2:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 == $r3 goto label3;

        return 0;

     label3:
        $r4 = (org.codehaus.jackson.node.IntNode) r0;

        $i1 = $r4.<org.codehaus.jackson.node.IntNode: int _value>;

        $i0 = r1.<org.codehaus.jackson.node.IntNode: int _value>;

        if $i1 != $i0 goto label4;

        $z0 = 1;

        goto label5;

     label4:
        $z0 = 0;

     label5:
        return $z0;
    }

    public int hashCode()
    {
        int $i0;
        org.codehaus.jackson.node.IntNode r0;

        r0 := @this: org.codehaus.jackson.node.IntNode;

        $i0 = r0.<org.codehaus.jackson.node.IntNode: int _value>;

        return $i0;
    }

    static void <clinit>()
    {
        int $i0, i1, $i3;
        org.codehaus.jackson.node.IntNode[] $r0, $r2;
        org.codehaus.jackson.node.IntNode $r3;

        <org.codehaus.jackson.node.IntNode: int MAX_CANONICAL> = 10;

        <org.codehaus.jackson.node.IntNode: int MIN_CANONICAL> = -1;

        $r0 = newarray (org.codehaus.jackson.node.IntNode)[12];

        <org.codehaus.jackson.node.IntNode: org.codehaus.jackson.node.IntNode[] CANONICALS> = $r0;

        i1 = 0;

     label1:
        if i1 >= 12 goto label2;

        $r2 = <org.codehaus.jackson.node.IntNode: org.codehaus.jackson.node.IntNode[] CANONICALS>;

        $r3 = new org.codehaus.jackson.node.IntNode;

        $i3 = (int) -1;

        $i0 = $i3 + i1;

        specialinvoke $r3.<org.codehaus.jackson.node.IntNode: void <init>(int)>($i0);

        $r2[i1] = $r3;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
}
