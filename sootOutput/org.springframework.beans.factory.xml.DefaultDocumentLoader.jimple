public class org.springframework.beans.factory.xml.DefaultDocumentLoader extends java.lang.Object implements org.springframework.beans.factory.xml.DocumentLoader
{
    private static final java.lang.String SCHEMA_LANGUAGE_ATTRIBUTE;
    private static final java.lang.String XSD_SCHEMA_LANGUAGE;
    private static final org.apache.commons.logging.Log logger;

    static void <clinit>()
    {
        org.apache.commons.logging.Log $r0;

        <org.springframework.beans.factory.xml.DefaultDocumentLoader: java.lang.String XSD_SCHEMA_LANGUAGE> = "http://www.w3.org/2001/XMLSchema";

        <org.springframework.beans.factory.xml.DefaultDocumentLoader: java.lang.String SCHEMA_LANGUAGE_ATTRIBUTE> = "http://java.sun.com/xml/jaxp/properties/schemaLanguage";

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lorg/springframework/beans/factory/xml/DefaultDocumentLoader;");

        <org.springframework.beans.factory.xml.DefaultDocumentLoader: org.apache.commons.logging.Log logger> = $r0;

        return;
    }

    public void <init>()
    {
        org.springframework.beans.factory.xml.DefaultDocumentLoader r0;

        r0 := @this: org.springframework.beans.factory.xml.DefaultDocumentLoader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.w3c.dom.Document loadDocument(org.xml.sax.InputSource, org.xml.sax.EntityResolver, org.xml.sax.ErrorHandler, int, boolean) throws java.lang.Exception
    {
        org.xml.sax.ErrorHandler r4;
        org.w3c.dom.Document $r7;
        int i0;
        java.lang.String $r11, $r14;
        org.xml.sax.EntityResolver r3;
        boolean z0, $z1;
        org.springframework.beans.factory.xml.DefaultDocumentLoader r0;
        org.xml.sax.InputSource r6;
        javax.xml.parsers.DocumentBuilder $r5;
        org.apache.commons.logging.Log $r2, $r9;
        java.lang.StringBuilder $r8, $r12, $r13;
        java.lang.Class $r10;
        javax.xml.parsers.DocumentBuilderFactory $r1;

        r0 := @this: org.springframework.beans.factory.xml.DefaultDocumentLoader;

        r6 := @parameter0: org.xml.sax.InputSource;

        r3 := @parameter1: org.xml.sax.EntityResolver;

        r4 := @parameter2: org.xml.sax.ErrorHandler;

        i0 := @parameter3: int;

        z0 := @parameter4: boolean;

        $r1 = virtualinvoke r0.<org.springframework.beans.factory.xml.DefaultDocumentLoader: javax.xml.parsers.DocumentBuilderFactory createDocumentBuilderFactory(int,boolean)>(i0, z0);

        $r2 = <org.springframework.beans.factory.xml.DefaultDocumentLoader: org.apache.commons.logging.Log logger>;

        $z1 = interfaceinvoke $r2.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z1 == 0 goto label1;

        $r9 = <org.springframework.beans.factory.xml.DefaultDocumentLoader: org.apache.commons.logging.Log logger>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("Using JAXP provider [");

        $r10 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r11 = virtualinvoke $r10.<java.lang.Class: java.lang.String getName()>();

        $r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r9.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r14);

     label1:
        $r5 = virtualinvoke r0.<org.springframework.beans.factory.xml.DefaultDocumentLoader: javax.xml.parsers.DocumentBuilder createDocumentBuilder(javax.xml.parsers.DocumentBuilderFactory,org.xml.sax.EntityResolver,org.xml.sax.ErrorHandler)>($r1, r3, r4);

        $r7 = virtualinvoke $r5.<javax.xml.parsers.DocumentBuilder: org.w3c.dom.Document parse(org.xml.sax.InputSource)>(r6);

        return $r7;
    }

    protected javax.xml.parsers.DocumentBuilderFactory createDocumentBuilderFactory(int, boolean) throws javax.xml.parsers.ParserConfigurationException
    {
        org.springframework.beans.factory.xml.DefaultDocumentLoader r8;
        java.lang.IllegalArgumentException $r1;
        javax.xml.parsers.ParserConfigurationException $r2;
        int i0;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;
        javax.xml.parsers.DocumentBuilderFactory $r0;
        java.lang.String $r7;
        boolean z0;

        r8 := @this: org.springframework.beans.factory.xml.DefaultDocumentLoader;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r0 = staticinvoke <javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilderFactory newInstance()>();

        virtualinvoke $r0.<javax.xml.parsers.DocumentBuilderFactory: void setNamespaceAware(boolean)>(z0);

        if i0 == 0 goto label4;

        virtualinvoke $r0.<javax.xml.parsers.DocumentBuilderFactory: void setValidating(boolean)>(1);

        if i0 != 3 goto label4;

        virtualinvoke $r0.<javax.xml.parsers.DocumentBuilderFactory: void setNamespaceAware(boolean)>(1);

     label1:
        virtualinvoke $r0.<javax.xml.parsers.DocumentBuilderFactory: void setAttribute(java.lang.String,java.lang.Object)>("http://java.sun.com/xml/jaxp/properties/schemaLanguage", "http://www.w3.org/2001/XMLSchema");

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        $r2 = new javax.xml.parsers.ParserConfigurationException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unable to validate using XSD: Your JAXP provider [");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] does not support XML Schema. Are you running on Java 1.4 with Apache Crimson? ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Upgrade to Apache Xerces (or Java 1.5) for full XSD support.");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<javax.xml.parsers.ParserConfigurationException: void <init>(java.lang.String)>($r7);

        virtualinvoke $r2.<javax.xml.parsers.ParserConfigurationException: java.lang.Throwable initCause(java.lang.Throwable)>($r1);

        throw $r2;

     label4:
        return $r0;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    protected javax.xml.parsers.DocumentBuilder createDocumentBuilder(javax.xml.parsers.DocumentBuilderFactory, org.xml.sax.EntityResolver, org.xml.sax.ErrorHandler) throws javax.xml.parsers.ParserConfigurationException
    {
        org.springframework.beans.factory.xml.DefaultDocumentLoader r4;
        org.xml.sax.ErrorHandler r3;
        javax.xml.parsers.DocumentBuilder $r1;
        javax.xml.parsers.DocumentBuilderFactory r0;
        org.xml.sax.EntityResolver r2;

        r4 := @this: org.springframework.beans.factory.xml.DefaultDocumentLoader;

        r0 := @parameter0: javax.xml.parsers.DocumentBuilderFactory;

        r2 := @parameter1: org.xml.sax.EntityResolver;

        r3 := @parameter2: org.xml.sax.ErrorHandler;

        $r1 = virtualinvoke r0.<javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilder newDocumentBuilder()>();

        if r2 == null goto label1;

        virtualinvoke $r1.<javax.xml.parsers.DocumentBuilder: void setEntityResolver(org.xml.sax.EntityResolver)>(r2);

     label1:
        if r3 == null goto label2;

        virtualinvoke $r1.<javax.xml.parsers.DocumentBuilder: void setErrorHandler(org.xml.sax.ErrorHandler)>(r3);

     label2:
        return $r1;
    }
}
