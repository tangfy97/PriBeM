public class org.springframework.expression.spel.ast.CompoundExpression extends org.springframework.expression.spel.ast.SpelNodeImpl
{

    public transient void <init>(int, org.springframework.expression.spel.ast.SpelNodeImpl[])
    {
        java.lang.IllegalStateException $r2;
        org.springframework.expression.spel.ast.SpelNodeImpl[] r1;
        int i0, $i1, $i2;
        org.springframework.expression.spel.ast.CompoundExpression r0;
        java.lang.StringBuilder $r3, $r4;
        java.lang.String $r5;

        r0 := @this: org.springframework.expression.spel.ast.CompoundExpression;

        i0 := @parameter0: int;

        r1 := @parameter1: org.springframework.expression.spel.ast.SpelNodeImpl[];

        specialinvoke r0.<org.springframework.expression.spel.ast.SpelNodeImpl: void <init>(int,org.springframework.expression.spel.ast.SpelNodeImpl[])>(i0, r1);

        $i1 = lengthof r1;

        if $i1 >= 2 goto label1;

        $r2 = new java.lang.IllegalStateException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("Dont build compound expression less than one entry: ");

        $i2 = lengthof r1;

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5);

        throw $r2;

     label1:
        return;
    }

    public org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState) throws org.springframework.expression.EvaluationException
    {
        org.springframework.expression.spel.SpelEvaluationException $r4;
        java.lang.Throwable $r5;
        org.springframework.expression.spel.ast.SpelNodeImpl[] $r1, $r3;
        int $i0, $i1, i2;
        org.springframework.expression.spel.ast.CompoundExpression r0;
        org.springframework.expression.spel.ExpressionState r2;
        org.springframework.expression.TypedValue r7;
        org.springframework.expression.spel.ast.SpelNodeImpl r6;

        r0 := @this: org.springframework.expression.spel.ast.CompoundExpression;

        r2 := @parameter0: org.springframework.expression.spel.ExpressionState;

     label1:
        $r1 = r0.<org.springframework.expression.spel.ast.CompoundExpression: org.springframework.expression.spel.ast.SpelNodeImpl[] children>;

        r6 = $r1[0];

        r7 = virtualinvoke r6.<org.springframework.expression.spel.ast.SpelNodeImpl: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>(r2);

        i2 = 1;

        goto label5;

     label2:
        virtualinvoke r2.<org.springframework.expression.spel.ExpressionState: void pushActiveContextObject(org.springframework.expression.TypedValue)>(r7);

        $r3 = r0.<org.springframework.expression.spel.ast.CompoundExpression: org.springframework.expression.spel.ast.SpelNodeImpl[] children>;

        r6 = $r3[i2];

        r7 = virtualinvoke r6.<org.springframework.expression.spel.ast.SpelNodeImpl: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>(r2);

        goto label4;

     label3:
        $r5 := @caughtexception;

        virtualinvoke r2.<org.springframework.expression.spel.ExpressionState: void popActiveContextObject()>();

        throw $r5;

     label4:
        virtualinvoke r2.<org.springframework.expression.spel.ExpressionState: void popActiveContextObject()>();

        i2 = i2 + 1;

     label5:
        $i0 = virtualinvoke r0.<org.springframework.expression.spel.ast.CompoundExpression: int getChildCount()>();

        if i2 < $i0 goto label2;

     label6:
        goto label8;

     label7:
        $r4 := @caughtexception;

        $i1 = virtualinvoke r6.<org.springframework.expression.spel.ast.SpelNodeImpl: int getStartPosition()>();

        virtualinvoke $r4.<org.springframework.expression.spel.SpelEvaluationException: void setPosition(int)>($i1);

        throw $r4;

     label8:
        return r7;

        catch java.lang.Throwable from label2 to label3 with label3;
        catch org.springframework.expression.spel.SpelEvaluationException from label1 to label6 with label7;
    }

    public void setValue(org.springframework.expression.spel.ExpressionState, java.lang.Object) throws org.springframework.expression.EvaluationException
    {
        java.lang.Throwable $r9, $r10;
        int $i0, $i1, $i2, $i3, $i4, i5;
        org.springframework.expression.TypedValue r11;
        org.springframework.expression.spel.ast.SpelNodeImpl[] $r1, $r4;
        org.springframework.expression.spel.ast.CompoundExpression r0;
        org.springframework.expression.spel.ExpressionState r2;
        java.lang.Object r7;
        org.springframework.expression.spel.SpelNode $r6, $r8;
        org.springframework.expression.spel.ast.SpelNodeImpl $r3, $r5;

        r0 := @this: org.springframework.expression.spel.ast.CompoundExpression;

        r2 := @parameter0: org.springframework.expression.spel.ExpressionState;

        r7 := @parameter1: java.lang.Object;

        $i0 = virtualinvoke r0.<org.springframework.expression.spel.ast.CompoundExpression: int getChildCount()>();

        if $i0 != 1 goto label1;

        $r8 = virtualinvoke r0.<org.springframework.expression.spel.ast.CompoundExpression: org.springframework.expression.spel.SpelNode getChild(int)>(0);

        interfaceinvoke $r8.<org.springframework.expression.spel.SpelNode: void setValue(org.springframework.expression.spel.ExpressionState,java.lang.Object)>(r2, r7);

        return;

     label1:
        $r1 = r0.<org.springframework.expression.spel.ast.CompoundExpression: org.springframework.expression.spel.ast.SpelNodeImpl[] children>;

        $r3 = $r1[0];

        r11 = virtualinvoke $r3.<org.springframework.expression.spel.ast.SpelNodeImpl: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>(r2);

        i5 = 1;

        goto label5;

     label2:
        virtualinvoke r2.<org.springframework.expression.spel.ExpressionState: void pushActiveContextObject(org.springframework.expression.TypedValue)>(r11);

        $r4 = r0.<org.springframework.expression.spel.ast.CompoundExpression: org.springframework.expression.spel.ast.SpelNodeImpl[] children>;

        $r5 = $r4[i5];

        r11 = virtualinvoke $r5.<org.springframework.expression.spel.ast.SpelNodeImpl: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>(r2);

        goto label4;

     label3:
        $r10 := @caughtexception;

        virtualinvoke r2.<org.springframework.expression.spel.ExpressionState: void popActiveContextObject()>();

        throw $r10;

     label4:
        virtualinvoke r2.<org.springframework.expression.spel.ExpressionState: void popActiveContextObject()>();

        i5 = i5 + 1;

     label5:
        $i1 = virtualinvoke r0.<org.springframework.expression.spel.ast.CompoundExpression: int getChildCount()>();

        $i2 = $i1 - 1;

        if i5 < $i2 goto label2;

     label6:
        virtualinvoke r2.<org.springframework.expression.spel.ExpressionState: void pushActiveContextObject(org.springframework.expression.TypedValue)>(r11);

        $i3 = virtualinvoke r0.<org.springframework.expression.spel.ast.CompoundExpression: int getChildCount()>();

        $i4 = $i3 - 1;

        $r6 = virtualinvoke r0.<org.springframework.expression.spel.ast.CompoundExpression: org.springframework.expression.spel.SpelNode getChild(int)>($i4);

        interfaceinvoke $r6.<org.springframework.expression.spel.SpelNode: void setValue(org.springframework.expression.spel.ExpressionState,java.lang.Object)>(r2, r7);

        goto label8;

     label7:
        $r9 := @caughtexception;

        virtualinvoke r2.<org.springframework.expression.spel.ExpressionState: void popActiveContextObject()>();

        throw $r9;

     label8:
        virtualinvoke r2.<org.springframework.expression.spel.ExpressionState: void popActiveContextObject()>();

        return;

        catch java.lang.Throwable from label2 to label3 with label3;
        catch java.lang.Throwable from label6 to label7 with label7;
    }

    public boolean isWritable(org.springframework.expression.spel.ExpressionState) throws org.springframework.expression.EvaluationException
    {
        java.lang.Throwable $r8, $r9;
        int $i0, $i1, $i2, $i3, $i4, i5;
        org.springframework.expression.TypedValue r10;
        boolean $z0, $z1;
        org.springframework.expression.spel.ast.SpelNodeImpl[] $r1, $r4;
        org.springframework.expression.spel.ast.CompoundExpression r0;
        org.springframework.expression.spel.ExpressionState r2;
        org.springframework.expression.spel.SpelNode $r6, $r7;
        org.springframework.expression.spel.ast.SpelNodeImpl $r3, $r5;

        r0 := @this: org.springframework.expression.spel.ast.CompoundExpression;

        r2 := @parameter0: org.springframework.expression.spel.ExpressionState;

        $i0 = virtualinvoke r0.<org.springframework.expression.spel.ast.CompoundExpression: int getChildCount()>();

        if $i0 != 1 goto label1;

        $r7 = virtualinvoke r0.<org.springframework.expression.spel.ast.CompoundExpression: org.springframework.expression.spel.SpelNode getChild(int)>(0);

        $z1 = interfaceinvoke $r7.<org.springframework.expression.spel.SpelNode: boolean isWritable(org.springframework.expression.spel.ExpressionState)>(r2);

        return $z1;

     label1:
        $r1 = r0.<org.springframework.expression.spel.ast.CompoundExpression: org.springframework.expression.spel.ast.SpelNodeImpl[] children>;

        $r3 = $r1[0];

        r10 = virtualinvoke $r3.<org.springframework.expression.spel.ast.SpelNodeImpl: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>(r2);

        i5 = 1;

        goto label5;

     label2:
        virtualinvoke r2.<org.springframework.expression.spel.ExpressionState: void pushActiveContextObject(org.springframework.expression.TypedValue)>(r10);

        $r4 = r0.<org.springframework.expression.spel.ast.CompoundExpression: org.springframework.expression.spel.ast.SpelNodeImpl[] children>;

        $r5 = $r4[i5];

        r10 = virtualinvoke $r5.<org.springframework.expression.spel.ast.SpelNodeImpl: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>(r2);

        goto label4;

     label3:
        $r9 := @caughtexception;

        virtualinvoke r2.<org.springframework.expression.spel.ExpressionState: void popActiveContextObject()>();

        throw $r9;

     label4:
        virtualinvoke r2.<org.springframework.expression.spel.ExpressionState: void popActiveContextObject()>();

        i5 = i5 + 1;

     label5:
        $i1 = virtualinvoke r0.<org.springframework.expression.spel.ast.CompoundExpression: int getChildCount()>();

        $i2 = $i1 - 1;

        if i5 < $i2 goto label2;

     label6:
        virtualinvoke r2.<org.springframework.expression.spel.ExpressionState: void pushActiveContextObject(org.springframework.expression.TypedValue)>(r10);

        $i3 = virtualinvoke r0.<org.springframework.expression.spel.ast.CompoundExpression: int getChildCount()>();

        $i4 = $i3 - 1;

        $r6 = virtualinvoke r0.<org.springframework.expression.spel.ast.CompoundExpression: org.springframework.expression.spel.SpelNode getChild(int)>($i4);

        $z0 = interfaceinvoke $r6.<org.springframework.expression.spel.SpelNode: boolean isWritable(org.springframework.expression.spel.ExpressionState)>(r2);

     label7:
        virtualinvoke r2.<org.springframework.expression.spel.ExpressionState: void popActiveContextObject()>();

        return $z0;

     label8:
        $r8 := @caughtexception;

        virtualinvoke r2.<org.springframework.expression.spel.ExpressionState: void popActiveContextObject()>();

        throw $r8;

        catch java.lang.Throwable from label2 to label3 with label3;
        catch java.lang.Throwable from label6 to label7 with label8;
    }

    public java.lang.String toStringAST()
    {
        int i0, $i1;
        org.springframework.expression.spel.ast.CompoundExpression r1;
        java.lang.StringBuilder $r0;
        java.lang.String $r3, $r4;
        org.springframework.expression.spel.SpelNode $r2;

        r1 := @this: org.springframework.expression.spel.ast.CompoundExpression;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        i0 = 0;

        goto label3;

     label1:
        if i0 <= 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

     label2:
        $r2 = virtualinvoke r1.<org.springframework.expression.spel.ast.CompoundExpression: org.springframework.expression.spel.SpelNode getChild(int)>(i0);

        $r3 = interfaceinvoke $r2.<org.springframework.expression.spel.SpelNode: java.lang.String toStringAST()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        i0 = i0 + 1;

     label3:
        $i1 = virtualinvoke r1.<org.springframework.expression.spel.ast.CompoundExpression: int getChildCount()>();

        if i0 < $i1 goto label1;

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }
}
