class com.mycila.inject.internal.asm.commons.TryCatchBlockSorter$1 extends java.lang.Object implements java.util.Comparator
{
    private final com.mycila.inject.internal.asm.commons.TryCatchBlockSorter this$0;

    void <init>(com.mycila.inject.internal.asm.commons.TryCatchBlockSorter)
    {
        com.mycila.inject.internal.asm.commons.TryCatchBlockSorter r1;
        com.mycila.inject.internal.asm.commons.TryCatchBlockSorter$1 r0;

        r0 := @this: com.mycila.inject.internal.asm.commons.TryCatchBlockSorter$1;

        r1 := @parameter0: com.mycila.inject.internal.asm.commons.TryCatchBlockSorter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.mycila.inject.internal.asm.commons.TryCatchBlockSorter$1: com.mycila.inject.internal.asm.commons.TryCatchBlockSorter this$0> = r1;

        return;
    }

    public int compare(java.lang.Object, java.lang.Object)
    {
        com.mycila.inject.internal.asm.commons.TryCatchBlockSorter$1 r0;
        int $i0, $i1, $i2;
        java.lang.Object r1, r3;
        com.mycila.inject.internal.asm.tree.TryCatchBlockNode $r2, $r4;

        r0 := @this: com.mycila.inject.internal.asm.commons.TryCatchBlockSorter$1;

        r1 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Object;

        $r2 = (com.mycila.inject.internal.asm.tree.TryCatchBlockNode) r1;

        $i0 = specialinvoke r0.<com.mycila.inject.internal.asm.commons.TryCatchBlockSorter$1: int blockLength(com.mycila.inject.internal.asm.tree.TryCatchBlockNode)>($r2);

        $r4 = (com.mycila.inject.internal.asm.tree.TryCatchBlockNode) r3;

        $i1 = specialinvoke r0.<com.mycila.inject.internal.asm.commons.TryCatchBlockSorter$1: int blockLength(com.mycila.inject.internal.asm.tree.TryCatchBlockNode)>($r4);

        $i2 = $i0 - $i1;

        return $i2;
    }

    private int blockLength(com.mycila.inject.internal.asm.tree.TryCatchBlockNode)
    {
        com.mycila.inject.internal.asm.commons.TryCatchBlockSorter$1 r0;
        com.mycila.inject.internal.asm.tree.InsnList $r4, $r7;
        com.mycila.inject.internal.asm.commons.TryCatchBlockSorter $r1, $r5;
        com.mycila.inject.internal.asm.tree.LabelNode $r3, $r6;
        int $i0, $i1, $i2;
        com.mycila.inject.internal.asm.tree.TryCatchBlockNode r2;

        r0 := @this: com.mycila.inject.internal.asm.commons.TryCatchBlockSorter$1;

        r2 := @parameter0: com.mycila.inject.internal.asm.tree.TryCatchBlockNode;

        $r1 = r0.<com.mycila.inject.internal.asm.commons.TryCatchBlockSorter$1: com.mycila.inject.internal.asm.commons.TryCatchBlockSorter this$0>;

        $r4 = $r1.<com.mycila.inject.internal.asm.commons.TryCatchBlockSorter: com.mycila.inject.internal.asm.tree.InsnList instructions>;

        $r3 = r2.<com.mycila.inject.internal.asm.tree.TryCatchBlockNode: com.mycila.inject.internal.asm.tree.LabelNode start>;

        $i0 = virtualinvoke $r4.<com.mycila.inject.internal.asm.tree.InsnList: int indexOf(com.mycila.inject.internal.asm.tree.AbstractInsnNode)>($r3);

        $r5 = r0.<com.mycila.inject.internal.asm.commons.TryCatchBlockSorter$1: com.mycila.inject.internal.asm.commons.TryCatchBlockSorter this$0>;

        $r7 = $r5.<com.mycila.inject.internal.asm.commons.TryCatchBlockSorter: com.mycila.inject.internal.asm.tree.InsnList instructions>;

        $r6 = r2.<com.mycila.inject.internal.asm.tree.TryCatchBlockNode: com.mycila.inject.internal.asm.tree.LabelNode end>;

        $i1 = virtualinvoke $r7.<com.mycila.inject.internal.asm.tree.InsnList: int indexOf(com.mycila.inject.internal.asm.tree.AbstractInsnNode)>($r6);

        $i2 = $i1 - $i0;

        return $i2;
    }
}
