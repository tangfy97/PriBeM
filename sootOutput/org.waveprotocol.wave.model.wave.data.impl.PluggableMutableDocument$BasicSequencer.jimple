final class org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument$BasicSequencer extends java.lang.Object implements org.waveprotocol.wave.model.operation.OperationSequencer
{
    private final org.waveprotocol.wave.model.document.operation.SuperSink sink;
    private final org.waveprotocol.wave.model.operation.SilentOperationSink outputSink;

    private void <init>(org.waveprotocol.wave.model.document.operation.SuperSink, org.waveprotocol.wave.model.operation.SilentOperationSink)
    {
        org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument$BasicSequencer r0;
        org.waveprotocol.wave.model.document.operation.SuperSink r1;
        org.waveprotocol.wave.model.operation.SilentOperationSink r2;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument$BasicSequencer;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.SuperSink;

        r2 := @parameter1: org.waveprotocol.wave.model.operation.SilentOperationSink;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument$BasicSequencer: org.waveprotocol.wave.model.document.operation.SuperSink sink> = r1;

        r0.<org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument$BasicSequencer: org.waveprotocol.wave.model.operation.SilentOperationSink outputSink> = r2;

        return;
    }

    public void begin()
    {
        org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument$BasicSequencer r0;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument$BasicSequencer;

        return;
    }

    public void end()
    {
        org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument$BasicSequencer r0;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument$BasicSequencer;

        return;
    }

    public void consume(org.waveprotocol.wave.model.document.operation.Nindo)
    {
        org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument$BasicSequencer r0;
        org.waveprotocol.wave.model.document.operation.SuperSink $r2;
        org.waveprotocol.wave.model.document.operation.DocOp $r3;
        org.waveprotocol.wave.model.operation.SilentOperationSink $r4, $r5;
        org.waveprotocol.wave.model.document.operation.Nindo r1;
        org.waveprotocol.wave.model.operation.OperationException $r6;
        java.lang.StringBuilder $r8, $r9, $r10;
        java.lang.String $r11;
        org.waveprotocol.wave.model.operation.OperationRuntimeException $r7;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument$BasicSequencer;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.Nindo;

     label1:
        $r2 = r0.<org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument$BasicSequencer: org.waveprotocol.wave.model.document.operation.SuperSink sink>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.operation.SuperSink: org.waveprotocol.wave.model.document.operation.DocOp consumeAndReturnInvertible(org.waveprotocol.wave.model.document.operation.Nindo)>(r1);

        $r4 = r0.<org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument$BasicSequencer: org.waveprotocol.wave.model.operation.SilentOperationSink outputSink>;

        if $r4 == null goto label2;

        $r5 = r0.<org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument$BasicSequencer: org.waveprotocol.wave.model.operation.SilentOperationSink outputSink>;

        interfaceinvoke $r5.<org.waveprotocol.wave.model.operation.SilentOperationSink: void consume(org.waveprotocol.wave.model.operation.Operation)>($r3);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        $r7 = new org.waveprotocol.wave.model.operation.OperationRuntimeException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DocumentOperationSink constructed by DocumentOperationSinkFactory generated an OperationException when attempting to apply ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<org.waveprotocol.wave.model.operation.OperationRuntimeException: void <init>(java.lang.String,org.waveprotocol.wave.model.operation.OperationException)>($r11, $r6);

        throw $r7;

     label4:
        return;

        catch org.waveprotocol.wave.model.operation.OperationException from label1 to label2 with label3;
    }

    public volatile void consume(java.lang.Object)
    {
        org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument$BasicSequencer r0;
        java.lang.Object r1;
        org.waveprotocol.wave.model.document.operation.Nindo $r2;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument$BasicSequencer;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.document.operation.Nindo) r1;

        virtualinvoke r0.<org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument$BasicSequencer: void consume(org.waveprotocol.wave.model.document.operation.Nindo)>($r2);

        return;
    }

    void <init>(org.waveprotocol.wave.model.document.operation.SuperSink, org.waveprotocol.wave.model.operation.SilentOperationSink, org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument$1)
    {
        org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument$BasicSequencer r0;
        org.waveprotocol.wave.model.operation.SilentOperationSink r2;
        org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument$1 r3;
        org.waveprotocol.wave.model.document.operation.SuperSink r1;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument$BasicSequencer;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.SuperSink;

        r2 := @parameter1: org.waveprotocol.wave.model.operation.SilentOperationSink;

        r3 := @parameter2: org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument$1;

        specialinvoke r0.<org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument$BasicSequencer: void <init>(org.waveprotocol.wave.model.document.operation.SuperSink,org.waveprotocol.wave.model.operation.SilentOperationSink)>(r1, r2);

        return;
    }
}
