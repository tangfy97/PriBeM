public class org.springframework.expression.spel.standard.SpelExpression extends java.lang.Object implements org.springframework.expression.Expression
{
    private final java.lang.String expression;
    private final org.springframework.expression.spel.ast.SpelNodeImpl ast;
    private final org.springframework.expression.spel.SpelParserConfiguration configuration;
    private org.springframework.expression.EvaluationContext defaultContext;

    public void <init>(java.lang.String, org.springframework.expression.spel.ast.SpelNodeImpl, org.springframework.expression.spel.SpelParserConfiguration)
    {
        org.springframework.expression.spel.standard.SpelExpression r0;
        java.lang.String r1;
        org.springframework.expression.spel.SpelParserConfiguration r3;
        org.springframework.expression.spel.ast.SpelNodeImpl r2;

        r0 := @this: org.springframework.expression.spel.standard.SpelExpression;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.springframework.expression.spel.ast.SpelNodeImpl;

        r3 := @parameter2: org.springframework.expression.spel.SpelParserConfiguration;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.springframework.expression.spel.standard.SpelExpression: java.lang.String expression> = r1;

        r0.<org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.spel.ast.SpelNodeImpl ast> = r2;

        r0.<org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.spel.SpelParserConfiguration configuration> = r3;

        return;
    }

    public java.lang.Object getValue() throws org.springframework.expression.EvaluationException
    {
        org.springframework.expression.spel.standard.SpelExpression r1;
        org.springframework.expression.spel.ExpressionState $r0;
        java.lang.Object $r5;
        org.springframework.expression.spel.SpelParserConfiguration $r3;
        org.springframework.expression.spel.ast.SpelNodeImpl $r4;
        org.springframework.expression.EvaluationContext $r2;

        r1 := @this: org.springframework.expression.spel.standard.SpelExpression;

        $r0 = new org.springframework.expression.spel.ExpressionState;

        $r2 = virtualinvoke r1.<org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.EvaluationContext getEvaluationContext()>();

        $r3 = r1.<org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.spel.SpelParserConfiguration configuration>;

        specialinvoke $r0.<org.springframework.expression.spel.ExpressionState: void <init>(org.springframework.expression.EvaluationContext,org.springframework.expression.spel.SpelParserConfiguration)>($r2, $r3);

        $r4 = r1.<org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.spel.ast.SpelNodeImpl ast>;

        $r5 = virtualinvoke $r4.<org.springframework.expression.spel.ast.SpelNodeImpl: java.lang.Object getValue(org.springframework.expression.spel.ExpressionState)>($r0);

        return $r5;
    }

    public java.lang.Object getValue(java.lang.Object) throws org.springframework.expression.EvaluationException
    {
        org.springframework.expression.spel.SpelParserConfiguration $r5;
        org.springframework.expression.EvaluationContext $r2;
        org.springframework.expression.spel.standard.SpelExpression r1;
        org.springframework.expression.spel.ExpressionState $r0;
        java.lang.Object r3, $r7;
        org.springframework.expression.TypedValue $r4;
        org.springframework.expression.spel.ast.SpelNodeImpl $r6;

        r1 := @this: org.springframework.expression.spel.standard.SpelExpression;

        r3 := @parameter0: java.lang.Object;

        $r0 = new org.springframework.expression.spel.ExpressionState;

        $r2 = virtualinvoke r1.<org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.EvaluationContext getEvaluationContext()>();

        $r4 = specialinvoke r1.<org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.TypedValue toTypedValue(java.lang.Object)>(r3);

        $r5 = r1.<org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.spel.SpelParserConfiguration configuration>;

        specialinvoke $r0.<org.springframework.expression.spel.ExpressionState: void <init>(org.springframework.expression.EvaluationContext,org.springframework.expression.TypedValue,org.springframework.expression.spel.SpelParserConfiguration)>($r2, $r4, $r5);

        $r6 = r1.<org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.spel.ast.SpelNodeImpl ast>;

        $r7 = virtualinvoke $r6.<org.springframework.expression.spel.ast.SpelNodeImpl: java.lang.Object getValue(org.springframework.expression.spel.ExpressionState)>($r0);

        return $r7;
    }

    public java.lang.Object getValue(java.lang.Class) throws org.springframework.expression.EvaluationException
    {
        org.springframework.expression.spel.SpelParserConfiguration $r3;
        org.springframework.expression.EvaluationContext $r2, $r6;
        org.springframework.expression.spel.standard.SpelExpression r1;
        org.springframework.expression.spel.ExpressionState $r0;
        java.lang.Class r7;
        java.lang.Object $r8;
        org.springframework.expression.TypedValue $r5;
        org.springframework.expression.spel.ast.SpelNodeImpl $r4;

        r1 := @this: org.springframework.expression.spel.standard.SpelExpression;

        r7 := @parameter0: java.lang.Class;

        $r0 = new org.springframework.expression.spel.ExpressionState;

        $r2 = virtualinvoke r1.<org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.EvaluationContext getEvaluationContext()>();

        $r3 = r1.<org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.spel.SpelParserConfiguration configuration>;

        specialinvoke $r0.<org.springframework.expression.spel.ExpressionState: void <init>(org.springframework.expression.EvaluationContext,org.springframework.expression.spel.SpelParserConfiguration)>($r2, $r3);

        $r4 = r1.<org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.spel.ast.SpelNodeImpl ast>;

        $r5 = virtualinvoke $r4.<org.springframework.expression.spel.ast.SpelNodeImpl: org.springframework.expression.TypedValue getTypedValue(org.springframework.expression.spel.ExpressionState)>($r0);

        $r6 = virtualinvoke $r0.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.EvaluationContext getEvaluationContext()>();

        $r8 = staticinvoke <org.springframework.expression.common.ExpressionUtils: java.lang.Object convertTypedValue(org.springframework.expression.EvaluationContext,org.springframework.expression.TypedValue,java.lang.Class)>($r6, $r5, r7);

        return $r8;
    }

    public java.lang.Object getValue(java.lang.Object, java.lang.Class) throws org.springframework.expression.EvaluationException
    {
        org.springframework.expression.spel.SpelParserConfiguration $r5;
        org.springframework.expression.EvaluationContext $r2, $r8;
        org.springframework.expression.spel.standard.SpelExpression r1;
        org.springframework.expression.spel.ExpressionState $r0;
        java.lang.Object r3, $r10;
        java.lang.Class r9;
        org.springframework.expression.TypedValue $r4, $r7;
        org.springframework.expression.spel.ast.SpelNodeImpl $r6;

        r1 := @this: org.springframework.expression.spel.standard.SpelExpression;

        r3 := @parameter0: java.lang.Object;

        r9 := @parameter1: java.lang.Class;

        $r0 = new org.springframework.expression.spel.ExpressionState;

        $r2 = virtualinvoke r1.<org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.EvaluationContext getEvaluationContext()>();

        $r4 = specialinvoke r1.<org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.TypedValue toTypedValue(java.lang.Object)>(r3);

        $r5 = r1.<org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.spel.SpelParserConfiguration configuration>;

        specialinvoke $r0.<org.springframework.expression.spel.ExpressionState: void <init>(org.springframework.expression.EvaluationContext,org.springframework.expression.TypedValue,org.springframework.expression.spel.SpelParserConfiguration)>($r2, $r4, $r5);

        $r6 = r1.<org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.spel.ast.SpelNodeImpl ast>;

        $r7 = virtualinvoke $r6.<org.springframework.expression.spel.ast.SpelNodeImpl: org.springframework.expression.TypedValue getTypedValue(org.springframework.expression.spel.ExpressionState)>($r0);

        $r8 = virtualinvoke $r0.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.EvaluationContext getEvaluationContext()>();

        $r10 = staticinvoke <org.springframework.expression.common.ExpressionUtils: java.lang.Object convertTypedValue(org.springframework.expression.EvaluationContext,org.springframework.expression.TypedValue,java.lang.Class)>($r8, $r7, r9);

        return $r10;
    }

    public java.lang.Object getValue(org.springframework.expression.EvaluationContext) throws org.springframework.expression.EvaluationException
    {
        org.springframework.expression.spel.standard.SpelExpression r1;
        org.springframework.expression.spel.ExpressionState $r2;
        java.lang.Object $r5;
        org.springframework.expression.spel.SpelParserConfiguration $r3;
        org.springframework.expression.spel.ast.SpelNodeImpl $r4;
        org.springframework.expression.EvaluationContext r0;

        r1 := @this: org.springframework.expression.spel.standard.SpelExpression;

        r0 := @parameter0: org.springframework.expression.EvaluationContext;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "The EvaluationContext is required");

        $r4 = r1.<org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.spel.ast.SpelNodeImpl ast>;

        $r2 = new org.springframework.expression.spel.ExpressionState;

        $r3 = r1.<org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.spel.SpelParserConfiguration configuration>;

        specialinvoke $r2.<org.springframework.expression.spel.ExpressionState: void <init>(org.springframework.expression.EvaluationContext,org.springframework.expression.spel.SpelParserConfiguration)>(r0, $r3);

        $r5 = virtualinvoke $r4.<org.springframework.expression.spel.ast.SpelNodeImpl: java.lang.Object getValue(org.springframework.expression.spel.ExpressionState)>($r2);

        return $r5;
    }

    public java.lang.Object getValue(org.springframework.expression.EvaluationContext, java.lang.Object) throws org.springframework.expression.EvaluationException
    {
        org.springframework.expression.spel.SpelParserConfiguration $r6;
        org.springframework.expression.EvaluationContext r0;
        org.springframework.expression.spel.standard.SpelExpression r1;
        org.springframework.expression.spel.ExpressionState $r2;
        java.lang.Object r3, $r7;
        org.springframework.expression.TypedValue $r5;
        org.springframework.expression.spel.ast.SpelNodeImpl $r4;

        r1 := @this: org.springframework.expression.spel.standard.SpelExpression;

        r0 := @parameter0: org.springframework.expression.EvaluationContext;

        r3 := @parameter1: java.lang.Object;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "The EvaluationContext is required");

        $r4 = r1.<org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.spel.ast.SpelNodeImpl ast>;

        $r2 = new org.springframework.expression.spel.ExpressionState;

        $r5 = specialinvoke r1.<org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.TypedValue toTypedValue(java.lang.Object)>(r3);

        $r6 = r1.<org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.spel.SpelParserConfiguration configuration>;

        specialinvoke $r2.<org.springframework.expression.spel.ExpressionState: void <init>(org.springframework.expression.EvaluationContext,org.springframework.expression.TypedValue,org.springframework.expression.spel.SpelParserConfiguration)>(r0, $r5, $r6);

        $r7 = virtualinvoke $r4.<org.springframework.expression.spel.ast.SpelNodeImpl: java.lang.Object getValue(org.springframework.expression.spel.ExpressionState)>($r2);

        return $r7;
    }

    public java.lang.Object getValue(org.springframework.expression.EvaluationContext, java.lang.Class) throws org.springframework.expression.EvaluationException
    {
        org.springframework.expression.spel.SpelParserConfiguration $r3;
        org.springframework.expression.EvaluationContext r2;
        org.springframework.expression.spel.standard.SpelExpression r0;
        org.springframework.expression.spel.ExpressionState $r1;
        java.lang.Class r6;
        java.lang.Object $r7;
        org.springframework.expression.TypedValue $r5;
        org.springframework.expression.spel.ast.SpelNodeImpl $r4;

        r0 := @this: org.springframework.expression.spel.standard.SpelExpression;

        r2 := @parameter0: org.springframework.expression.EvaluationContext;

        r6 := @parameter1: java.lang.Class;

        $r4 = r0.<org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.spel.ast.SpelNodeImpl ast>;

        $r1 = new org.springframework.expression.spel.ExpressionState;

        $r3 = r0.<org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.spel.SpelParserConfiguration configuration>;

        specialinvoke $r1.<org.springframework.expression.spel.ExpressionState: void <init>(org.springframework.expression.EvaluationContext,org.springframework.expression.spel.SpelParserConfiguration)>(r2, $r3);

        $r5 = virtualinvoke $r4.<org.springframework.expression.spel.ast.SpelNodeImpl: org.springframework.expression.TypedValue getTypedValue(org.springframework.expression.spel.ExpressionState)>($r1);

        $r7 = staticinvoke <org.springframework.expression.common.ExpressionUtils: java.lang.Object convertTypedValue(org.springframework.expression.EvaluationContext,org.springframework.expression.TypedValue,java.lang.Class)>(r2, $r5, r6);

        return $r7;
    }

    public java.lang.Object getValue(org.springframework.expression.EvaluationContext, java.lang.Object, java.lang.Class) throws org.springframework.expression.EvaluationException
    {
        org.springframework.expression.spel.SpelParserConfiguration $r6;
        org.springframework.expression.EvaluationContext r2;
        org.springframework.expression.spel.standard.SpelExpression r0;
        org.springframework.expression.spel.ExpressionState $r1;
        java.lang.Object r3, $r9;
        java.lang.Class r8;
        org.springframework.expression.TypedValue $r5, $r7;
        org.springframework.expression.spel.ast.SpelNodeImpl $r4;

        r0 := @this: org.springframework.expression.spel.standard.SpelExpression;

        r2 := @parameter0: org.springframework.expression.EvaluationContext;

        r3 := @parameter1: java.lang.Object;

        r8 := @parameter2: java.lang.Class;

        $r4 = r0.<org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.spel.ast.SpelNodeImpl ast>;

        $r1 = new org.springframework.expression.spel.ExpressionState;

        $r5 = specialinvoke r0.<org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.TypedValue toTypedValue(java.lang.Object)>(r3);

        $r6 = r0.<org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.spel.SpelParserConfiguration configuration>;

        specialinvoke $r1.<org.springframework.expression.spel.ExpressionState: void <init>(org.springframework.expression.EvaluationContext,org.springframework.expression.TypedValue,org.springframework.expression.spel.SpelParserConfiguration)>(r2, $r5, $r6);

        $r7 = virtualinvoke $r4.<org.springframework.expression.spel.ast.SpelNodeImpl: org.springframework.expression.TypedValue getTypedValue(org.springframework.expression.spel.ExpressionState)>($r1);

        $r9 = staticinvoke <org.springframework.expression.common.ExpressionUtils: java.lang.Object convertTypedValue(org.springframework.expression.EvaluationContext,org.springframework.expression.TypedValue,java.lang.Class)>(r2, $r7, r8);

        return $r9;
    }

    public java.lang.Class getValueType() throws org.springframework.expression.EvaluationException
    {
        org.springframework.expression.spel.SpelParserConfiguration $r4;
        org.springframework.expression.EvaluationContext $r3;
        org.springframework.expression.spel.standard.SpelExpression r0;
        org.springframework.core.convert.TypeDescriptor $r6;
        org.springframework.expression.spel.ExpressionState $r1;
        java.lang.Class $r7;
        org.springframework.expression.TypedValue $r5;
        org.springframework.expression.spel.ast.SpelNodeImpl $r2;

        r0 := @this: org.springframework.expression.spel.standard.SpelExpression;

        $r2 = r0.<org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.spel.ast.SpelNodeImpl ast>;

        $r1 = new org.springframework.expression.spel.ExpressionState;

        $r3 = virtualinvoke r0.<org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.EvaluationContext getEvaluationContext()>();

        $r4 = r0.<org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.spel.SpelParserConfiguration configuration>;

        specialinvoke $r1.<org.springframework.expression.spel.ExpressionState: void <init>(org.springframework.expression.EvaluationContext,org.springframework.expression.spel.SpelParserConfiguration)>($r3, $r4);

        $r5 = virtualinvoke $r2.<org.springframework.expression.spel.ast.SpelNodeImpl: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>($r1);

        $r6 = virtualinvoke $r5.<org.springframework.expression.TypedValue: org.springframework.core.convert.TypeDescriptor getTypeDescriptor()>();

        $r7 = virtualinvoke $r6.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>();

        return $r7;
    }

    public java.lang.Class getValueType(org.springframework.expression.EvaluationContext) throws org.springframework.expression.EvaluationException
    {
        org.springframework.expression.spel.SpelParserConfiguration $r3;
        org.springframework.expression.EvaluationContext r0;
        org.springframework.expression.spel.standard.SpelExpression r2;
        org.springframework.core.convert.TypeDescriptor $r6;
        org.springframework.expression.spel.ExpressionState $r1;
        java.lang.Class $r7;
        org.springframework.expression.TypedValue $r5;
        org.springframework.expression.spel.ast.SpelNodeImpl $r4;

        r2 := @this: org.springframework.expression.spel.standard.SpelExpression;

        r0 := @parameter0: org.springframework.expression.EvaluationContext;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "The EvaluationContext is required");

        $r1 = new org.springframework.expression.spel.ExpressionState;

        $r3 = r2.<org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.spel.SpelParserConfiguration configuration>;

        specialinvoke $r1.<org.springframework.expression.spel.ExpressionState: void <init>(org.springframework.expression.EvaluationContext,org.springframework.expression.spel.SpelParserConfiguration)>(r0, $r3);

        $r4 = r2.<org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.spel.ast.SpelNodeImpl ast>;

        $r5 = virtualinvoke $r4.<org.springframework.expression.spel.ast.SpelNodeImpl: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>($r1);

        $r6 = virtualinvoke $r5.<org.springframework.expression.TypedValue: org.springframework.core.convert.TypeDescriptor getTypeDescriptor()>();

        $r7 = virtualinvoke $r6.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>();

        return $r7;
    }

    public java.lang.Class getValueType(org.springframework.expression.EvaluationContext, java.lang.Object) throws org.springframework.expression.EvaluationException
    {
        org.springframework.expression.spel.SpelParserConfiguration $r5;
        org.springframework.expression.EvaluationContext r1;
        org.springframework.expression.spel.standard.SpelExpression r2;
        org.springframework.core.convert.TypeDescriptor $r8;
        org.springframework.expression.spel.ExpressionState $r0;
        java.lang.Object r3;
        java.lang.Class $r9;
        org.springframework.expression.TypedValue $r4, $r7;
        org.springframework.expression.spel.ast.SpelNodeImpl $r6;

        r2 := @this: org.springframework.expression.spel.standard.SpelExpression;

        r1 := @parameter0: org.springframework.expression.EvaluationContext;

        r3 := @parameter1: java.lang.Object;

        $r0 = new org.springframework.expression.spel.ExpressionState;

        $r4 = specialinvoke r2.<org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.TypedValue toTypedValue(java.lang.Object)>(r3);

        $r5 = r2.<org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.spel.SpelParserConfiguration configuration>;

        specialinvoke $r0.<org.springframework.expression.spel.ExpressionState: void <init>(org.springframework.expression.EvaluationContext,org.springframework.expression.TypedValue,org.springframework.expression.spel.SpelParserConfiguration)>(r1, $r4, $r5);

        $r6 = r2.<org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.spel.ast.SpelNodeImpl ast>;

        $r7 = virtualinvoke $r6.<org.springframework.expression.spel.ast.SpelNodeImpl: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>($r0);

        $r8 = virtualinvoke $r7.<org.springframework.expression.TypedValue: org.springframework.core.convert.TypeDescriptor getTypeDescriptor()>();

        $r9 = virtualinvoke $r8.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>();

        return $r9;
    }

    public java.lang.Class getValueType(java.lang.Object) throws org.springframework.expression.EvaluationException
    {
        org.springframework.expression.spel.SpelParserConfiguration $r4;
        org.springframework.expression.EvaluationContext $r3;
        org.springframework.expression.spel.standard.SpelExpression r0;
        org.springframework.core.convert.TypeDescriptor $r6;
        org.springframework.expression.spel.ExpressionState $r1;
        java.lang.Class $r7;
        java.lang.Object r8;
        org.springframework.expression.TypedValue $r5;
        org.springframework.expression.spel.ast.SpelNodeImpl $r2;

        r0 := @this: org.springframework.expression.spel.standard.SpelExpression;

        r8 := @parameter0: java.lang.Object;

        $r2 = r0.<org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.spel.ast.SpelNodeImpl ast>;

        $r1 = new org.springframework.expression.spel.ExpressionState;

        $r3 = virtualinvoke r0.<org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.EvaluationContext getEvaluationContext()>();

        $r4 = r0.<org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.spel.SpelParserConfiguration configuration>;

        specialinvoke $r1.<org.springframework.expression.spel.ExpressionState: void <init>(org.springframework.expression.EvaluationContext,org.springframework.expression.spel.SpelParserConfiguration)>($r3, $r4);

        $r5 = virtualinvoke $r2.<org.springframework.expression.spel.ast.SpelNodeImpl: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>($r1);

        $r6 = virtualinvoke $r5.<org.springframework.expression.TypedValue: org.springframework.core.convert.TypeDescriptor getTypeDescriptor()>();

        $r7 = virtualinvoke $r6.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>();

        return $r7;
    }

    public org.springframework.core.convert.TypeDescriptor getValueTypeDescriptor() throws org.springframework.expression.EvaluationException
    {
        org.springframework.expression.spel.standard.SpelExpression r0;
        org.springframework.core.convert.TypeDescriptor $r6;
        org.springframework.expression.spel.ExpressionState $r1;
        org.springframework.expression.spel.SpelParserConfiguration $r4;
        org.springframework.expression.TypedValue $r5;
        org.springframework.expression.spel.ast.SpelNodeImpl $r2;
        org.springframework.expression.EvaluationContext $r3;

        r0 := @this: org.springframework.expression.spel.standard.SpelExpression;

        $r2 = r0.<org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.spel.ast.SpelNodeImpl ast>;

        $r1 = new org.springframework.expression.spel.ExpressionState;

        $r3 = virtualinvoke r0.<org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.EvaluationContext getEvaluationContext()>();

        $r4 = r0.<org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.spel.SpelParserConfiguration configuration>;

        specialinvoke $r1.<org.springframework.expression.spel.ExpressionState: void <init>(org.springframework.expression.EvaluationContext,org.springframework.expression.spel.SpelParserConfiguration)>($r3, $r4);

        $r5 = virtualinvoke $r2.<org.springframework.expression.spel.ast.SpelNodeImpl: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>($r1);

        $r6 = virtualinvoke $r5.<org.springframework.expression.TypedValue: org.springframework.core.convert.TypeDescriptor getTypeDescriptor()>();

        return $r6;
    }

    public org.springframework.core.convert.TypeDescriptor getValueTypeDescriptor(java.lang.Object) throws org.springframework.expression.EvaluationException
    {
        org.springframework.expression.spel.SpelParserConfiguration $r5;
        org.springframework.expression.EvaluationContext $r2;
        org.springframework.expression.spel.standard.SpelExpression r1;
        org.springframework.core.convert.TypeDescriptor $r8;
        org.springframework.expression.spel.ExpressionState $r0;
        java.lang.Object r3;
        org.springframework.expression.TypedValue $r4, $r7;
        org.springframework.expression.spel.ast.SpelNodeImpl $r6;

        r1 := @this: org.springframework.expression.spel.standard.SpelExpression;

        r3 := @parameter0: java.lang.Object;

        $r0 = new org.springframework.expression.spel.ExpressionState;

        $r2 = virtualinvoke r1.<org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.EvaluationContext getEvaluationContext()>();

        $r4 = specialinvoke r1.<org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.TypedValue toTypedValue(java.lang.Object)>(r3);

        $r5 = r1.<org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.spel.SpelParserConfiguration configuration>;

        specialinvoke $r0.<org.springframework.expression.spel.ExpressionState: void <init>(org.springframework.expression.EvaluationContext,org.springframework.expression.TypedValue,org.springframework.expression.spel.SpelParserConfiguration)>($r2, $r4, $r5);

        $r6 = r1.<org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.spel.ast.SpelNodeImpl ast>;

        $r7 = virtualinvoke $r6.<org.springframework.expression.spel.ast.SpelNodeImpl: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>($r0);

        $r8 = virtualinvoke $r7.<org.springframework.expression.TypedValue: org.springframework.core.convert.TypeDescriptor getTypeDescriptor()>();

        return $r8;
    }

    public org.springframework.core.convert.TypeDescriptor getValueTypeDescriptor(org.springframework.expression.EvaluationContext) throws org.springframework.expression.EvaluationException
    {
        org.springframework.expression.spel.standard.SpelExpression r2;
        org.springframework.core.convert.TypeDescriptor $r6;
        org.springframework.expression.spel.ExpressionState $r1;
        org.springframework.expression.spel.SpelParserConfiguration $r3;
        org.springframework.expression.TypedValue $r5;
        org.springframework.expression.spel.ast.SpelNodeImpl $r4;
        org.springframework.expression.EvaluationContext r0;

        r2 := @this: org.springframework.expression.spel.standard.SpelExpression;

        r0 := @parameter0: org.springframework.expression.EvaluationContext;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "The EvaluationContext is required");

        $r1 = new org.springframework.expression.spel.ExpressionState;

        $r3 = r2.<org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.spel.SpelParserConfiguration configuration>;

        specialinvoke $r1.<org.springframework.expression.spel.ExpressionState: void <init>(org.springframework.expression.EvaluationContext,org.springframework.expression.spel.SpelParserConfiguration)>(r0, $r3);

        $r4 = r2.<org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.spel.ast.SpelNodeImpl ast>;

        $r5 = virtualinvoke $r4.<org.springframework.expression.spel.ast.SpelNodeImpl: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>($r1);

        $r6 = virtualinvoke $r5.<org.springframework.expression.TypedValue: org.springframework.core.convert.TypeDescriptor getTypeDescriptor()>();

        return $r6;
    }

    public org.springframework.core.convert.TypeDescriptor getValueTypeDescriptor(org.springframework.expression.EvaluationContext, java.lang.Object) throws org.springframework.expression.EvaluationException
    {
        org.springframework.expression.spel.SpelParserConfiguration $r5;
        org.springframework.expression.EvaluationContext r0;
        org.springframework.expression.spel.standard.SpelExpression r2;
        org.springframework.core.convert.TypeDescriptor $r8;
        org.springframework.expression.spel.ExpressionState $r1;
        java.lang.Object r3;
        org.springframework.expression.TypedValue $r4, $r7;
        org.springframework.expression.spel.ast.SpelNodeImpl $r6;

        r2 := @this: org.springframework.expression.spel.standard.SpelExpression;

        r0 := @parameter0: org.springframework.expression.EvaluationContext;

        r3 := @parameter1: java.lang.Object;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "The EvaluationContext is required");

        $r1 = new org.springframework.expression.spel.ExpressionState;

        $r4 = specialinvoke r2.<org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.TypedValue toTypedValue(java.lang.Object)>(r3);

        $r5 = r2.<org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.spel.SpelParserConfiguration configuration>;

        specialinvoke $r1.<org.springframework.expression.spel.ExpressionState: void <init>(org.springframework.expression.EvaluationContext,org.springframework.expression.TypedValue,org.springframework.expression.spel.SpelParserConfiguration)>(r0, $r4, $r5);

        $r6 = r2.<org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.spel.ast.SpelNodeImpl ast>;

        $r7 = virtualinvoke $r6.<org.springframework.expression.spel.ast.SpelNodeImpl: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>($r1);

        $r8 = virtualinvoke $r7.<org.springframework.expression.TypedValue: org.springframework.core.convert.TypeDescriptor getTypeDescriptor()>();

        return $r8;
    }

    public java.lang.String getExpressionString()
    {
        org.springframework.expression.spel.standard.SpelExpression r0;
        java.lang.String $r1;

        r0 := @this: org.springframework.expression.spel.standard.SpelExpression;

        $r1 = r0.<org.springframework.expression.spel.standard.SpelExpression: java.lang.String expression>;

        return $r1;
    }

    public boolean isWritable(org.springframework.expression.EvaluationContext) throws org.springframework.expression.EvaluationException
    {
        org.springframework.expression.spel.standard.SpelExpression r1;
        org.springframework.expression.spel.ExpressionState $r2;
        org.springframework.expression.spel.SpelParserConfiguration $r3;
        org.springframework.expression.spel.ast.SpelNodeImpl $r4;
        org.springframework.expression.EvaluationContext r0;
        boolean $z0;

        r1 := @this: org.springframework.expression.spel.standard.SpelExpression;

        r0 := @parameter0: org.springframework.expression.EvaluationContext;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "The EvaluationContext is required");

        $r4 = r1.<org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.spel.ast.SpelNodeImpl ast>;

        $r2 = new org.springframework.expression.spel.ExpressionState;

        $r3 = r1.<org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.spel.SpelParserConfiguration configuration>;

        specialinvoke $r2.<org.springframework.expression.spel.ExpressionState: void <init>(org.springframework.expression.EvaluationContext,org.springframework.expression.spel.SpelParserConfiguration)>(r0, $r3);

        $z0 = virtualinvoke $r4.<org.springframework.expression.spel.ast.SpelNodeImpl: boolean isWritable(org.springframework.expression.spel.ExpressionState)>($r2);

        return $z0;
    }

    public boolean isWritable(java.lang.Object) throws org.springframework.expression.EvaluationException
    {
        org.springframework.expression.spel.SpelParserConfiguration $r6;
        org.springframework.expression.EvaluationContext $r3;
        org.springframework.expression.spel.standard.SpelExpression r0;
        org.springframework.expression.spel.ExpressionState $r1;
        java.lang.Object r4;
        org.springframework.expression.TypedValue $r5;
        org.springframework.expression.spel.ast.SpelNodeImpl $r2;
        boolean $z0;

        r0 := @this: org.springframework.expression.spel.standard.SpelExpression;

        r4 := @parameter0: java.lang.Object;

        $r2 = r0.<org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.spel.ast.SpelNodeImpl ast>;

        $r1 = new org.springframework.expression.spel.ExpressionState;

        $r3 = virtualinvoke r0.<org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.EvaluationContext getEvaluationContext()>();

        $r5 = specialinvoke r0.<org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.TypedValue toTypedValue(java.lang.Object)>(r4);

        $r6 = r0.<org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.spel.SpelParserConfiguration configuration>;

        specialinvoke $r1.<org.springframework.expression.spel.ExpressionState: void <init>(org.springframework.expression.EvaluationContext,org.springframework.expression.TypedValue,org.springframework.expression.spel.SpelParserConfiguration)>($r3, $r5, $r6);

        $z0 = virtualinvoke $r2.<org.springframework.expression.spel.ast.SpelNodeImpl: boolean isWritable(org.springframework.expression.spel.ExpressionState)>($r1);

        return $z0;
    }

    public boolean isWritable(org.springframework.expression.EvaluationContext, java.lang.Object) throws org.springframework.expression.EvaluationException
    {
        org.springframework.expression.spel.SpelParserConfiguration $r6;
        org.springframework.expression.EvaluationContext r0;
        org.springframework.expression.spel.standard.SpelExpression r1;
        org.springframework.expression.spel.ExpressionState $r2;
        java.lang.Object r3;
        org.springframework.expression.TypedValue $r5;
        org.springframework.expression.spel.ast.SpelNodeImpl $r4;
        boolean $z0;

        r1 := @this: org.springframework.expression.spel.standard.SpelExpression;

        r0 := @parameter0: org.springframework.expression.EvaluationContext;

        r3 := @parameter1: java.lang.Object;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "The EvaluationContext is required");

        $r4 = r1.<org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.spel.ast.SpelNodeImpl ast>;

        $r2 = new org.springframework.expression.spel.ExpressionState;

        $r5 = specialinvoke r1.<org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.TypedValue toTypedValue(java.lang.Object)>(r3);

        $r6 = r1.<org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.spel.SpelParserConfiguration configuration>;

        specialinvoke $r2.<org.springframework.expression.spel.ExpressionState: void <init>(org.springframework.expression.EvaluationContext,org.springframework.expression.TypedValue,org.springframework.expression.spel.SpelParserConfiguration)>(r0, $r5, $r6);

        $z0 = virtualinvoke $r4.<org.springframework.expression.spel.ast.SpelNodeImpl: boolean isWritable(org.springframework.expression.spel.ExpressionState)>($r2);

        return $z0;
    }

    public void setValue(org.springframework.expression.EvaluationContext, java.lang.Object) throws org.springframework.expression.EvaluationException
    {
        org.springframework.expression.spel.standard.SpelExpression r1;
        org.springframework.expression.spel.ExpressionState $r2;
        java.lang.Object r5;
        org.springframework.expression.spel.SpelParserConfiguration $r3;
        org.springframework.expression.spel.ast.SpelNodeImpl $r4;
        org.springframework.expression.EvaluationContext r0;

        r1 := @this: org.springframework.expression.spel.standard.SpelExpression;

        r0 := @parameter0: org.springframework.expression.EvaluationContext;

        r5 := @parameter1: java.lang.Object;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "The EvaluationContext is required");

        $r4 = r1.<org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.spel.ast.SpelNodeImpl ast>;

        $r2 = new org.springframework.expression.spel.ExpressionState;

        $r3 = r1.<org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.spel.SpelParserConfiguration configuration>;

        specialinvoke $r2.<org.springframework.expression.spel.ExpressionState: void <init>(org.springframework.expression.EvaluationContext,org.springframework.expression.spel.SpelParserConfiguration)>(r0, $r3);

        virtualinvoke $r4.<org.springframework.expression.spel.ast.SpelNodeImpl: void setValue(org.springframework.expression.spel.ExpressionState,java.lang.Object)>($r2, r5);

        return;
    }

    public void setValue(java.lang.Object, java.lang.Object) throws org.springframework.expression.EvaluationException
    {
        org.springframework.expression.spel.SpelParserConfiguration $r6;
        org.springframework.expression.EvaluationContext $r3;
        org.springframework.expression.spel.standard.SpelExpression r0;
        org.springframework.expression.spel.ExpressionState $r1;
        java.lang.Object r4, r7;
        org.springframework.expression.TypedValue $r5;
        org.springframework.expression.spel.ast.SpelNodeImpl $r2;

        r0 := @this: org.springframework.expression.spel.standard.SpelExpression;

        r4 := @parameter0: java.lang.Object;

        r7 := @parameter1: java.lang.Object;

        $r2 = r0.<org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.spel.ast.SpelNodeImpl ast>;

        $r1 = new org.springframework.expression.spel.ExpressionState;

        $r3 = virtualinvoke r0.<org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.EvaluationContext getEvaluationContext()>();

        $r5 = specialinvoke r0.<org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.TypedValue toTypedValue(java.lang.Object)>(r4);

        $r6 = r0.<org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.spel.SpelParserConfiguration configuration>;

        specialinvoke $r1.<org.springframework.expression.spel.ExpressionState: void <init>(org.springframework.expression.EvaluationContext,org.springframework.expression.TypedValue,org.springframework.expression.spel.SpelParserConfiguration)>($r3, $r5, $r6);

        virtualinvoke $r2.<org.springframework.expression.spel.ast.SpelNodeImpl: void setValue(org.springframework.expression.spel.ExpressionState,java.lang.Object)>($r1, r7);

        return;
    }

    public void setValue(org.springframework.expression.EvaluationContext, java.lang.Object, java.lang.Object) throws org.springframework.expression.EvaluationException
    {
        org.springframework.expression.spel.SpelParserConfiguration $r6;
        org.springframework.expression.EvaluationContext r0;
        org.springframework.expression.spel.standard.SpelExpression r1;
        org.springframework.expression.spel.ExpressionState $r2;
        java.lang.Object r3, r7;
        org.springframework.expression.TypedValue $r5;
        org.springframework.expression.spel.ast.SpelNodeImpl $r4;

        r1 := @this: org.springframework.expression.spel.standard.SpelExpression;

        r0 := @parameter0: org.springframework.expression.EvaluationContext;

        r3 := @parameter1: java.lang.Object;

        r7 := @parameter2: java.lang.Object;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "The EvaluationContext is required");

        $r4 = r1.<org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.spel.ast.SpelNodeImpl ast>;

        $r2 = new org.springframework.expression.spel.ExpressionState;

        $r5 = specialinvoke r1.<org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.TypedValue toTypedValue(java.lang.Object)>(r3);

        $r6 = r1.<org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.spel.SpelParserConfiguration configuration>;

        specialinvoke $r2.<org.springframework.expression.spel.ExpressionState: void <init>(org.springframework.expression.EvaluationContext,org.springframework.expression.TypedValue,org.springframework.expression.spel.SpelParserConfiguration)>(r0, $r5, $r6);

        virtualinvoke $r4.<org.springframework.expression.spel.ast.SpelNodeImpl: void setValue(org.springframework.expression.spel.ExpressionState,java.lang.Object)>($r2, r7);

        return;
    }

    public org.springframework.expression.spel.SpelNode getAST()
    {
        org.springframework.expression.spel.standard.SpelExpression r0;
        org.springframework.expression.spel.ast.SpelNodeImpl $r1;

        r0 := @this: org.springframework.expression.spel.standard.SpelExpression;

        $r1 = r0.<org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.spel.ast.SpelNodeImpl ast>;

        return $r1;
    }

    public java.lang.String toStringAST()
    {
        org.springframework.expression.spel.standard.SpelExpression r0;
        java.lang.String $r2;
        org.springframework.expression.spel.ast.SpelNodeImpl $r1;

        r0 := @this: org.springframework.expression.spel.standard.SpelExpression;

        $r1 = r0.<org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.spel.ast.SpelNodeImpl ast>;

        $r2 = virtualinvoke $r1.<org.springframework.expression.spel.ast.SpelNodeImpl: java.lang.String toStringAST()>();

        return $r2;
    }

    public org.springframework.expression.EvaluationContext getEvaluationContext()
    {
        org.springframework.expression.spel.standard.SpelExpression r0;
        org.springframework.expression.spel.support.StandardEvaluationContext $r3;
        org.springframework.expression.EvaluationContext $r1, $r2;

        r0 := @this: org.springframework.expression.spel.standard.SpelExpression;

        $r1 = r0.<org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.EvaluationContext defaultContext>;

        if $r1 != null goto label1;

        $r3 = new org.springframework.expression.spel.support.StandardEvaluationContext;

        specialinvoke $r3.<org.springframework.expression.spel.support.StandardEvaluationContext: void <init>()>();

        r0.<org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.EvaluationContext defaultContext> = $r3;

     label1:
        $r2 = r0.<org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.EvaluationContext defaultContext>;

        return $r2;
    }

    public void setEvaluationContext(org.springframework.expression.EvaluationContext)
    {
        org.springframework.expression.spel.standard.SpelExpression r0;
        org.springframework.expression.EvaluationContext r1;

        r0 := @this: org.springframework.expression.spel.standard.SpelExpression;

        r1 := @parameter0: org.springframework.expression.EvaluationContext;

        r0.<org.springframework.expression.spel.standard.SpelExpression: org.springframework.expression.EvaluationContext defaultContext> = r1;

        return;
    }

    private org.springframework.expression.TypedValue toTypedValue(java.lang.Object)
    {
        org.springframework.expression.spel.standard.SpelExpression r3;
        java.lang.Object r0;
        org.springframework.expression.TypedValue $r1, $r2;

        r3 := @this: org.springframework.expression.spel.standard.SpelExpression;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        $r2 = <org.springframework.expression.TypedValue: org.springframework.expression.TypedValue NULL>;

        return $r2;

     label1:
        $r1 = new org.springframework.expression.TypedValue;

        specialinvoke $r1.<org.springframework.expression.TypedValue: void <init>(java.lang.Object)>(r0);

        return $r1;
    }
}
