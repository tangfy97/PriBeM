public class org.apache.lucene.search.NRTManagerReopenThread extends java.lang.Thread implements org.apache.lucene.search.NRTManager$WaitingListener, java.io.Closeable
{
    private final org.apache.lucene.search.NRTManager manager;
    private final long targetMaxStaleNS;
    private final long targetMinStaleNS;
    private boolean finish;
    private long waitingGen;

    public void <init>(org.apache.lucene.search.NRTManager, double, double)
    {
        org.apache.lucene.search.NRTManager r1;
        long $l1, $l2;
        org.apache.lucene.search.NRTManagerReopenThread r0;
        byte $b0;
        int $i3;
        java.lang.String $r9;
        double d0, d1, $d2, $d3;
        java.lang.IllegalArgumentException $r11;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8, $r10;

        r0 := @this: org.apache.lucene.search.NRTManagerReopenThread;

        r1 := @parameter0: org.apache.lucene.search.NRTManager;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        specialinvoke r0.<java.lang.Thread: void <init>()>();

        $b0 = d0 cmpg d1;

        $i3 = (int) $b0;

        if $i3 >= 0 goto label1;

        $r11 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("targetMaxScaleSec (= ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") < targetMinStaleSec (=");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r11;

     label1:
        r0.<org.apache.lucene.search.NRTManagerReopenThread: org.apache.lucene.search.NRTManager manager> = r1;

        $d2 = 1.0E9 * d0;

        $l1 = (long) $d2;

        r0.<org.apache.lucene.search.NRTManagerReopenThread: long targetMaxStaleNS> = $l1;

        $d3 = 1.0E9 * d1;

        $l2 = (long) $d3;

        r0.<org.apache.lucene.search.NRTManagerReopenThread: long targetMinStaleNS> = $l2;

        virtualinvoke r1.<org.apache.lucene.search.NRTManager: void addWaitingListener(org.apache.lucene.search.NRTManager$WaitingListener)>(r0);

        return;
    }

    public synchronized void close()
    {
        java.lang.InterruptedException $r2;
        org.apache.lucene.search.NRTManager $r1;
        org.apache.lucene.search.NRTManagerReopenThread r0;
        org.apache.lucene.util.ThreadInterruptedException $r3;

        r0 := @this: org.apache.lucene.search.NRTManagerReopenThread;

        $r1 = r0.<org.apache.lucene.search.NRTManagerReopenThread: org.apache.lucene.search.NRTManager manager>;

        virtualinvoke $r1.<org.apache.lucene.search.NRTManager: void removeWaitingListener(org.apache.lucene.search.NRTManager$WaitingListener)>(r0);

        r0.<org.apache.lucene.search.NRTManagerReopenThread: boolean finish> = 1;

        virtualinvoke r0.<java.lang.Object: void notify()>();

     label1:
        virtualinvoke r0.<org.apache.lucene.search.NRTManagerReopenThread: void join()>();

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = new org.apache.lucene.util.ThreadInterruptedException;

        specialinvoke $r3.<org.apache.lucene.util.ThreadInterruptedException: void <init>(java.lang.InterruptedException)>($r2);

        throw $r3;

     label4:
        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    public synchronized void waiting(long)
    {
        long l0, $l1, $l2;
        org.apache.lucene.search.NRTManagerReopenThread r0;

        r0 := @this: org.apache.lucene.search.NRTManagerReopenThread;

        l0 := @parameter0: long;

        $l1 = r0.<org.apache.lucene.search.NRTManagerReopenThread: long waitingGen>;

        $l2 = staticinvoke <java.lang.Math: long max(long,long)>($l1, l0);

        r0.<org.apache.lucene.search.NRTManagerReopenThread: long waitingGen> = $l2;

        virtualinvoke r0.<java.lang.Object: void notify()>();

        return;
    }

    public void run()
    {
        java.lang.Throwable $r3, $r7;
        org.apache.lucene.search.NRTManager $r1, $r2;
        long $l0, $l1, $l3, $l5, $l7, $l8, $l9, $l10, l11, $l12;
        org.apache.lucene.search.NRTManagerReopenThread r0;
        byte $b2, $b4;
        java.lang.Thread $r9;
        int $i6, $i13, $i14;
        boolean $z0, $z1, $z2;
        java.io.IOException $r5;
        java.lang.RuntimeException $r10, $r11;
        java.lang.InterruptedException $r8;

        r0 := @this: org.apache.lucene.search.NRTManagerReopenThread;

        l11 = staticinvoke <java.lang.System: long nanoTime()>();

     label01:
        entermonitor r0;

     label02:
        $z0 = r0.<org.apache.lucene.search.NRTManagerReopenThread: boolean finish>;

        if $z0 != 0 goto label11;

        $l0 = r0.<org.apache.lucene.search.NRTManagerReopenThread: long waitingGen>;

        $r2 = r0.<org.apache.lucene.search.NRTManagerReopenThread: org.apache.lucene.search.NRTManager manager>;

        $l1 = virtualinvoke $r2.<org.apache.lucene.search.NRTManager: long getCurrentSearchingGen()>();

        $b2 = $l0 cmp $l1;

        $i13 = (int) $b2;

        if $i13 <= 0 goto label03;

        $z1 = 1;

        goto label04;

     label03:
        $z1 = 0;

     label04:
        $l8 = l11;

        if $z1 == 0 goto label05;

        $l12 = r0.<org.apache.lucene.search.NRTManagerReopenThread: long targetMinStaleNS>;

        goto label06;

     label05:
        $l12 = r0.<org.apache.lucene.search.NRTManagerReopenThread: long targetMaxStaleNS>;

     label06:
        $l9 = $l8 + $l12;

        $l3 = staticinvoke <java.lang.System: long nanoTime()>();

        $l10 = $l9 - $l3;

        $b4 = $l10 cmp 0L;

        $i14 = (int) $b4;

        if $i14 <= 0 goto label11;

     label07:
        $l7 = $l10 / 1000000L;

        $l5 = $l10 % 1000000L;

        $i6 = (int) $l5;

        virtualinvoke r0.<java.lang.Object: void wait(long,int)>($l7, $i6);

     label08:
        goto label10;

     label09:
        $r8 := @caughtexception;

        $r9 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r9.<java.lang.Thread: void interrupt()>();

        r0.<org.apache.lucene.search.NRTManagerReopenThread: boolean finish> = 1;

        goto label11;

     label10:
        goto label02;

     label11:
        $z2 = r0.<org.apache.lucene.search.NRTManagerReopenThread: boolean finish>;

        if $z2 == 0 goto label13;

        exitmonitor r0;

     label12:
        return;

     label13:
        exitmonitor r0;

     label14:
        goto label17;

     label15:
        $r7 := @caughtexception;

        exitmonitor r0;

     label16:
        throw $r7;

     label17:
        l11 = staticinvoke <java.lang.System: long nanoTime()>();

     label18:
        $r1 = r0.<org.apache.lucene.search.NRTManagerReopenThread: org.apache.lucene.search.NRTManager manager>;

        virtualinvoke $r1.<org.apache.lucene.search.NRTManager: boolean maybeRefresh()>();

     label19:
        goto label21;

     label20:
        $r5 := @caughtexception;

        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r5);

        throw $r10;

     label21:
        goto label01;

     label22:
        $r3 := @caughtexception;

        $r11 = new java.lang.RuntimeException;

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r3);

        throw $r11;

        catch java.lang.InterruptedException from label07 to label08 with label09;
        catch java.lang.Throwable from label02 to label12 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label15 to label16 with label15;
        catch java.io.IOException from label18 to label19 with label20;
        catch java.lang.Throwable from label01 to label12 with label22;
        catch java.lang.Throwable from label13 to label22 with label22;
    }
}
