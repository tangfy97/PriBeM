public class org.apache.poi.hssf.record.crypto.Biff8XOR extends java.lang.Object implements org.apache.poi.hssf.record.crypto.Biff8Cipher
{
    private final org.apache.poi.hssf.record.crypto.Biff8XORKey _key;
    private java.nio.ByteBuffer _buffer;
    private boolean _shouldSkipEncryptionOnCurrentRecord;
    private final int _initialOffset;
    private int _dataLength;
    private int _xorArrayIndex;

    public void <init>(int, org.apache.poi.hssf.record.crypto.Biff8XORKey)
    {
        org.apache.poi.hssf.record.crypto.Biff8XOR r0;
        java.nio.ByteOrder $r2;
        int i0;
        java.nio.ByteBuffer $r1, $r3;
        org.apache.poi.hssf.record.crypto.Biff8XORKey r4;

        r0 := @this: org.apache.poi.hssf.record.crypto.Biff8XOR;

        i0 := @parameter0: int;

        r4 := @parameter1: org.apache.poi.hssf.record.crypto.Biff8XORKey;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(8);

        $r2 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        $r3 = virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r2);

        r0.<org.apache.poi.hssf.record.crypto.Biff8XOR: java.nio.ByteBuffer _buffer> = $r3;

        r0.<org.apache.poi.hssf.record.crypto.Biff8XOR: int _dataLength> = 0;

        r0.<org.apache.poi.hssf.record.crypto.Biff8XOR: int _xorArrayIndex> = 0;

        r0.<org.apache.poi.hssf.record.crypto.Biff8XOR: org.apache.poi.hssf.record.crypto.Biff8XORKey _key> = r4;

        r0.<org.apache.poi.hssf.record.crypto.Biff8XOR: int _initialOffset> = i0;

        return;
    }

    public void startRecord(int)
    {
        int i0;
        org.apache.poi.hssf.record.crypto.Biff8XOR r0;
        boolean $z0;

        r0 := @this: org.apache.poi.hssf.record.crypto.Biff8XOR;

        i0 := @parameter0: int;

        $z0 = staticinvoke <org.apache.poi.hssf.record.crypto.Biff8XOR: boolean isNeverEncryptedRecord(int)>(i0);

        r0.<org.apache.poi.hssf.record.crypto.Biff8XOR: boolean _shouldSkipEncryptionOnCurrentRecord> = $z0;

        return;
    }

    public void setNextRecordSize(int)
    {
        org.apache.poi.hssf.record.crypto.Biff8XOR r0;
        int $i0, $i1, i2, $i3, $i4, $i5;

        r0 := @this: org.apache.poi.hssf.record.crypto.Biff8XOR;

        i2 := @parameter0: int;

        $i1 = r0.<org.apache.poi.hssf.record.crypto.Biff8XOR: int _initialOffset>;

        $i0 = r0.<org.apache.poi.hssf.record.crypto.Biff8XOR: int _dataLength>;

        $i3 = $i1 + $i0;

        $i4 = $i3 + i2;

        $i5 = $i4 % 16;

        r0.<org.apache.poi.hssf.record.crypto.Biff8XOR: int _xorArrayIndex> = $i5;

        return;
    }

    private static boolean isNeverEncryptedRecord(int)
    {
        int i0;

        i0 := @parameter0: int;

        lookupswitch(i0)
        {
            case 47: goto label1;
            case 225: goto label1;
            case 2057: goto label1;
            default: goto label2;
        };

     label1:
        return 1;

     label2:
        return 0;
    }

    public void skipTwoBytes()
    {
        int $i0, $i1;
        org.apache.poi.hssf.record.crypto.Biff8XOR r0;

        r0 := @this: org.apache.poi.hssf.record.crypto.Biff8XOR;

        $i0 = r0.<org.apache.poi.hssf.record.crypto.Biff8XOR: int _dataLength>;

        $i1 = $i0 + 2;

        r0.<org.apache.poi.hssf.record.crypto.Biff8XOR: int _dataLength> = $i1;

        return;
    }

    public void xor(byte[], int, int)
    {
        byte[] $r3, r4;
        org.apache.poi.hssf.record.crypto.Biff8XOR r0;
        byte $b3, $b5, $b6, b16, b17;
        int i0, i1, $i2, $i4, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15;
        org.apache.poi.hssf.record.crypto.Biff8XORKey $r1;
        boolean $z0;
        javax.crypto.SecretKey $r2;

        r0 := @this: org.apache.poi.hssf.record.crypto.Biff8XOR;

        r4 := @parameter0: byte[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        $z0 = r0.<org.apache.poi.hssf.record.crypto.Biff8XOR: boolean _shouldSkipEncryptionOnCurrentRecord>;

        if $z0 == 0 goto label1;

        $i13 = r0.<org.apache.poi.hssf.record.crypto.Biff8XOR: int _dataLength>;

        $i14 = $i13 + i0;

        r0.<org.apache.poi.hssf.record.crypto.Biff8XOR: int _dataLength> = $i14;

        return;

     label1:
        $r1 = r0.<org.apache.poi.hssf.record.crypto.Biff8XOR: org.apache.poi.hssf.record.crypto.Biff8XORKey _key>;

        $r2 = $r1.<org.apache.poi.hssf.record.crypto.Biff8XORKey: javax.crypto.SecretKey _secretKey>;

        $r3 = interfaceinvoke $r2.<javax.crypto.SecretKey: byte[] getEncoded()>();

        i15 = 0;

     label2:
        if i15 >= i0 goto label3;

        $i2 = i1 + i15;

        b16 = r4[$i2];

        $b3 = staticinvoke <org.apache.poi.hssf.record.crypto.Biff8XOR: byte rotateLeft(byte,int)>(b16, 3);

        $i4 = r0.<org.apache.poi.hssf.record.crypto.Biff8XOR: int _xorArrayIndex>;

        $b5 = $r3[$i4];

        $b6 = $b3 ^ $b5;

        b17 = (byte) $b6;

        $i7 = i1 + i15;

        r4[$i7] = b17;

        $i8 = r0.<org.apache.poi.hssf.record.crypto.Biff8XOR: int _xorArrayIndex>;

        $i9 = $i8 + 1;

        $i10 = $i9 % 16;

        r0.<org.apache.poi.hssf.record.crypto.Biff8XOR: int _xorArrayIndex> = $i10;

        $i11 = r0.<org.apache.poi.hssf.record.crypto.Biff8XOR: int _dataLength>;

        $i12 = $i11 + 1;

        r0.<org.apache.poi.hssf.record.crypto.Biff8XOR: int _dataLength> = $i12;

        i15 = i15 + 1;

        goto label2;

     label3:
        return;
    }

    private static byte rotateLeft(byte, int)
    {
        short $s2, $s4, $s9, $s11;
        byte b0, $b8;
        int i1, $i3, $i5, $i6, $i7, $i10, $i12;

        b0 := @parameter0: byte;

        i1 := @parameter1: int;

        $s9 = (short) b0;

        $s2 = $s9 & 255;

        $i10 = (int) $s2;

        $i6 = $i10 << i1;

        $s11 = (short) b0;

        $s4 = $s11 & 255;

        $i3 = 8 - i1;

        $i12 = (int) $s4;

        $i5 = $i12 >>> $i3;

        $i7 = $i6 | $i5;

        $b8 = (byte) $i7;

        return $b8;
    }

    public int xorByte(int)
    {
        byte[] $r3;
        java.nio.ByteBuffer $r1, $r2, $r4;
        org.apache.poi.hssf.record.crypto.Biff8XOR r0;
        byte $b1, $b2;
        int i0, $i3;

        r0 := @this: org.apache.poi.hssf.record.crypto.Biff8XOR;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.poi.hssf.record.crypto.Biff8XOR: java.nio.ByteBuffer _buffer>;

        $b1 = (byte) i0;

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer put(int,byte)>(0, $b1);

        $r2 = r0.<org.apache.poi.hssf.record.crypto.Biff8XOR: java.nio.ByteBuffer _buffer>;

        $r3 = virtualinvoke $r2.<java.nio.ByteBuffer: byte[] array()>();

        virtualinvoke r0.<org.apache.poi.hssf.record.crypto.Biff8XOR: void xor(byte[],int,int)>($r3, 0, 1);

        $r4 = r0.<org.apache.poi.hssf.record.crypto.Biff8XOR: java.nio.ByteBuffer _buffer>;

        $b2 = virtualinvoke $r4.<java.nio.ByteBuffer: byte get(int)>(0);

        $i3 = (int) $b2;

        return $i3;
    }

    public int xorShort(int)
    {
        byte[] $r3;
        java.nio.ByteBuffer $r1, $r2, $r4;
        org.apache.poi.hssf.record.crypto.Biff8XOR r0;
        short $s1, $s2;
        int i0, $i3;

        r0 := @this: org.apache.poi.hssf.record.crypto.Biff8XOR;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.poi.hssf.record.crypto.Biff8XOR: java.nio.ByteBuffer _buffer>;

        $s1 = (short) i0;

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer putShort(int,short)>(0, $s1);

        $r2 = r0.<org.apache.poi.hssf.record.crypto.Biff8XOR: java.nio.ByteBuffer _buffer>;

        $r3 = virtualinvoke $r2.<java.nio.ByteBuffer: byte[] array()>();

        virtualinvoke r0.<org.apache.poi.hssf.record.crypto.Biff8XOR: void xor(byte[],int,int)>($r3, 0, 2);

        $r4 = r0.<org.apache.poi.hssf.record.crypto.Biff8XOR: java.nio.ByteBuffer _buffer>;

        $s2 = virtualinvoke $r4.<java.nio.ByteBuffer: short getShort(int)>(0);

        $i3 = (int) $s2;

        return $i3;
    }

    public int xorInt(int)
    {
        org.apache.poi.hssf.record.crypto.Biff8XOR r0;
        byte[] $r3;
        int i0, $i1;
        java.nio.ByteBuffer $r1, $r2, $r4;

        r0 := @this: org.apache.poi.hssf.record.crypto.Biff8XOR;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.poi.hssf.record.crypto.Biff8XOR: java.nio.ByteBuffer _buffer>;

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int,int)>(0, i0);

        $r2 = r0.<org.apache.poi.hssf.record.crypto.Biff8XOR: java.nio.ByteBuffer _buffer>;

        $r3 = virtualinvoke $r2.<java.nio.ByteBuffer: byte[] array()>();

        virtualinvoke r0.<org.apache.poi.hssf.record.crypto.Biff8XOR: void xor(byte[],int,int)>($r3, 0, 4);

        $r4 = r0.<org.apache.poi.hssf.record.crypto.Biff8XOR: java.nio.ByteBuffer _buffer>;

        $i1 = virtualinvoke $r4.<java.nio.ByteBuffer: int getInt(int)>(0);

        return $i1;
    }

    public long xorLong(long)
    {
        org.apache.poi.hssf.record.crypto.Biff8XOR r0;
        byte[] $r3;
        long l0, $l1;
        java.nio.ByteBuffer $r1, $r2, $r4;

        r0 := @this: org.apache.poi.hssf.record.crypto.Biff8XOR;

        l0 := @parameter0: long;

        $r1 = r0.<org.apache.poi.hssf.record.crypto.Biff8XOR: java.nio.ByteBuffer _buffer>;

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer putLong(int,long)>(0, l0);

        $r2 = r0.<org.apache.poi.hssf.record.crypto.Biff8XOR: java.nio.ByteBuffer _buffer>;

        $r3 = virtualinvoke $r2.<java.nio.ByteBuffer: byte[] array()>();

        virtualinvoke r0.<org.apache.poi.hssf.record.crypto.Biff8XOR: void xor(byte[],int,int)>($r3, 0, 8);

        $r4 = r0.<org.apache.poi.hssf.record.crypto.Biff8XOR: java.nio.ByteBuffer _buffer>;

        $l1 = virtualinvoke $r4.<java.nio.ByteBuffer: long getLong(int)>(0);

        return $l1;
    }
}
