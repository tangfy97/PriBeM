public class org.springframework.expression.spel.ast.FormatHelper extends java.lang.Object
{

    public void <init>()
    {
        org.springframework.expression.spel.ast.FormatHelper r0;

        r0 := @this: org.springframework.expression.spel.ast.FormatHelper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String formatMethodForMessage(java.lang.String, java.util.List)
    {
        java.util.List r2;
        org.springframework.core.convert.TypeDescriptor $r4;
        int i0, $i1;
        java.lang.StringBuilder $r0;
        java.lang.Object $r3;
        java.lang.Class $r5;
        java.lang.String r1, $r6, $r7;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.List;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        i0 = 0;

        goto label3;

     label1:
        if i0 <= 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

     label2:
        $r3 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i0);

        $r4 = (org.springframework.core.convert.TypeDescriptor) $r3;

        $r5 = virtualinvoke $r4.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>();

        $r6 = staticinvoke <org.springframework.expression.spel.ast.FormatHelper: java.lang.String formatClassNameForMessage(java.lang.Class)>($r5);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        i0 = i0 + 1;

     label3:
        $i1 = interfaceinvoke r2.<java.util.List: int size()>();

        if i0 < $i1 goto label1;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r7 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public static java.lang.String formatClassNameForMessage(java.lang.Class)
    {
        int i0, i1;
        java.lang.Class r0, r5;
        java.lang.StringBuilder $r1;
        java.lang.String $r2, $r3, $r4;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Class;

        if r0 != null goto label1;

        return "null";

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label6;

        i0 = 1;

        r5 = virtualinvoke r0.<java.lang.Class: java.lang.Class getComponentType()>();

        goto label3;

     label2:
        r5 = virtualinvoke r5.<java.lang.Class: java.lang.Class getComponentType()>();

        i0 = i0 + 1;

     label3:
        $z1 = virtualinvoke r5.<java.lang.Class: boolean isArray()>();

        if $z1 != 0 goto label2;

        $r4 = virtualinvoke r5.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        i1 = 0;

        goto label5;

     label4:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[]");

        i1 = i1 + 1;

     label5:
        if i1 < i0 goto label4;

        goto label7;

     label6:
        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

     label7:
        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }
}
