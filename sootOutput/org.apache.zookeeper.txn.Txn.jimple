public class org.apache.zookeeper.txn.Txn extends java.lang.Object implements org.apache.jute.Record
{
    private int type;
    private byte[] data;

    public void <init>()
    {
        org.apache.zookeeper.txn.Txn r0;

        r0 := @this: org.apache.zookeeper.txn.Txn;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(int, byte[])
    {
        int i0;
        byte[] r1;
        org.apache.zookeeper.txn.Txn r0;

        r0 := @this: org.apache.zookeeper.txn.Txn;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.zookeeper.txn.Txn: int type> = i0;

        r0.<org.apache.zookeeper.txn.Txn: byte[] data> = r1;

        return;
    }

    public int getType()
    {
        int $i0;
        org.apache.zookeeper.txn.Txn r0;

        r0 := @this: org.apache.zookeeper.txn.Txn;

        $i0 = r0.<org.apache.zookeeper.txn.Txn: int type>;

        return $i0;
    }

    public void setType(int)
    {
        int i0;
        org.apache.zookeeper.txn.Txn r0;

        r0 := @this: org.apache.zookeeper.txn.Txn;

        i0 := @parameter0: int;

        r0.<org.apache.zookeeper.txn.Txn: int type> = i0;

        return;
    }

    public byte[] getData()
    {
        byte[] $r1;
        org.apache.zookeeper.txn.Txn r0;

        r0 := @this: org.apache.zookeeper.txn.Txn;

        $r1 = r0.<org.apache.zookeeper.txn.Txn: byte[] data>;

        return $r1;
    }

    public void setData(byte[])
    {
        byte[] r1;
        org.apache.zookeeper.txn.Txn r0;

        r0 := @this: org.apache.zookeeper.txn.Txn;

        r1 := @parameter0: byte[];

        r0.<org.apache.zookeeper.txn.Txn: byte[] data> = r1;

        return;
    }

    public void serialize(org.apache.jute.OutputArchive, java.lang.String) throws java.io.IOException
    {
        byte[] $r3;
        org.apache.zookeeper.txn.Txn r1;
        org.apache.jute.OutputArchive r0;
        int $i0;
        java.lang.String r2;

        r1 := @this: org.apache.zookeeper.txn.Txn;

        r0 := @parameter0: org.apache.jute.OutputArchive;

        r2 := @parameter1: java.lang.String;

        interfaceinvoke r0.<org.apache.jute.OutputArchive: void startRecord(org.apache.jute.Record,java.lang.String)>(r1, r2);

        $i0 = r1.<org.apache.zookeeper.txn.Txn: int type>;

        interfaceinvoke r0.<org.apache.jute.OutputArchive: void writeInt(int,java.lang.String)>($i0, "type");

        $r3 = r1.<org.apache.zookeeper.txn.Txn: byte[] data>;

        interfaceinvoke r0.<org.apache.jute.OutputArchive: void writeBuffer(byte[],java.lang.String)>($r3, "data");

        interfaceinvoke r0.<org.apache.jute.OutputArchive: void endRecord(org.apache.jute.Record,java.lang.String)>(r1, r2);

        return;
    }

    public void deserialize(org.apache.jute.InputArchive, java.lang.String) throws java.io.IOException
    {
        byte[] $r3;
        org.apache.zookeeper.txn.Txn r2;
        org.apache.jute.InputArchive r0;
        int $i0;
        java.lang.String r1;

        r2 := @this: org.apache.zookeeper.txn.Txn;

        r0 := @parameter0: org.apache.jute.InputArchive;

        r1 := @parameter1: java.lang.String;

        interfaceinvoke r0.<org.apache.jute.InputArchive: void startRecord(java.lang.String)>(r1);

        $i0 = interfaceinvoke r0.<org.apache.jute.InputArchive: int readInt(java.lang.String)>("type");

        r2.<org.apache.zookeeper.txn.Txn: int type> = $i0;

        $r3 = interfaceinvoke r0.<org.apache.jute.InputArchive: byte[] readBuffer(java.lang.String)>("data");

        r2.<org.apache.zookeeper.txn.Txn: byte[] data> = $r3;

        interfaceinvoke r0.<org.apache.jute.InputArchive: void endRecord(java.lang.String)>(r1);

        return;
    }

    public java.lang.String toString()
    {
        java.lang.Throwable $r6;
        byte[] $r3, $r5;
        org.apache.jute.CsvOutputArchive $r1;
        java.io.ByteArrayOutputStream $r0;
        org.apache.zookeeper.txn.Txn r2;
        int $i0;
        java.lang.String $r4;

        r2 := @this: org.apache.zookeeper.txn.Txn;

     label1:
        $r0 = new java.io.ByteArrayOutputStream;

        specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>()>();

        $r1 = new org.apache.jute.CsvOutputArchive;

        specialinvoke $r1.<org.apache.jute.CsvOutputArchive: void <init>(java.io.OutputStream)>($r0);

        virtualinvoke $r1.<org.apache.jute.CsvOutputArchive: void startRecord(org.apache.jute.Record,java.lang.String)>(r2, "");

        $i0 = r2.<org.apache.zookeeper.txn.Txn: int type>;

        virtualinvoke $r1.<org.apache.jute.CsvOutputArchive: void writeInt(int,java.lang.String)>($i0, "type");

        $r3 = r2.<org.apache.zookeeper.txn.Txn: byte[] data>;

        virtualinvoke $r1.<org.apache.jute.CsvOutputArchive: void writeBuffer(byte[],java.lang.String)>($r3, "data");

        virtualinvoke $r1.<org.apache.jute.CsvOutputArchive: void endRecord(org.apache.jute.Record,java.lang.String)>(r2, "");

        $r4 = new java.lang.String;

        $r5 = virtualinvoke $r0.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r4.<java.lang.String: void <init>(byte[],java.lang.String)>($r5, "UTF-8");

     label2:
        return $r4;

     label3:
        $r6 := @caughtexception;

        virtualinvoke $r6.<java.lang.Throwable: void printStackTrace()>();

        return "ERROR";

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void write(java.io.DataOutput) throws java.io.IOException
    {
        org.apache.jute.BinaryOutputArchive $r0;
        java.io.DataOutput r1;
        org.apache.zookeeper.txn.Txn r2;

        r2 := @this: org.apache.zookeeper.txn.Txn;

        r1 := @parameter0: java.io.DataOutput;

        $r0 = new org.apache.jute.BinaryOutputArchive;

        specialinvoke $r0.<org.apache.jute.BinaryOutputArchive: void <init>(java.io.DataOutput)>(r1);

        virtualinvoke r2.<org.apache.zookeeper.txn.Txn: void serialize(org.apache.jute.OutputArchive,java.lang.String)>($r0, "");

        return;
    }

    public void readFields(java.io.DataInput) throws java.io.IOException
    {
        java.io.DataInput r1;
        org.apache.zookeeper.txn.Txn r2;
        org.apache.jute.BinaryInputArchive $r0;

        r2 := @this: org.apache.zookeeper.txn.Txn;

        r1 := @parameter0: java.io.DataInput;

        $r0 = new org.apache.jute.BinaryInputArchive;

        specialinvoke $r0.<org.apache.jute.BinaryInputArchive: void <init>(java.io.DataInput)>(r1);

        virtualinvoke r2.<org.apache.zookeeper.txn.Txn: void deserialize(org.apache.jute.InputArchive,java.lang.String)>($r0, "");

        return;
    }

    public int compareTo(java.lang.Object) throws java.lang.ClassCastException
    {
        byte[] r3, r4;
        java.lang.ClassCastException $r5;
        byte $b8, $b9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        boolean $z0;
        org.apache.zookeeper.txn.Txn r1, r2;
        java.lang.Object r0;

        r2 := @this: org.apache.zookeeper.txn.Txn;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.apache.zookeeper.txn.Txn;

        if $z0 != 0 goto label1;

        $r5 = new java.lang.ClassCastException;

        specialinvoke $r5.<java.lang.ClassCastException: void <init>(java.lang.String)>("Comparing different types of records.");

        throw $r5;

     label1:
        r1 = (org.apache.zookeeper.txn.Txn) r0;

        $i1 = r2.<org.apache.zookeeper.txn.Txn: int type>;

        $i0 = r1.<org.apache.zookeeper.txn.Txn: int type>;

        if $i1 != $i0 goto label2;

        $b9 = 0;

        $b8 = 0;

        goto label4;

     label2:
        $i3 = r2.<org.apache.zookeeper.txn.Txn: int type>;

        $i2 = r1.<org.apache.zookeeper.txn.Txn: int type>;

        if $i3 >= $i2 goto label3;

        $b9 = -1;

        $b8 = -1;

        goto label4;

     label3:
        $b9 = 1;

        $b8 = 1;

     label4:
        if $b8 == 0 goto label5;

        return $b9;

     label5:
        r3 = r2.<org.apache.zookeeper.txn.Txn: byte[] data>;

        r4 = r1.<org.apache.zookeeper.txn.Txn: byte[] data>;

        $i5 = lengthof r3;

        $i4 = lengthof r4;

        $i6 = staticinvoke <org.apache.jute.Utils: int compareBytes(byte[],int,int,byte[],int,int)>(r3, 0, $i5, r4, 0, $i4);

        if $i6 == 0 goto label6;

        return $i6;

     label6:
        return $i6;
    }

    public boolean equals(java.lang.Object)
    {
        byte[] $r3, $r4;
        org.apache.zookeeper.txn.Txn r1, r2;
        int $i0, $i1;
        java.lang.Object r0;
        boolean $z0, $z1, $z3, $z4;

        r1 := @this: org.apache.zookeeper.txn.Txn;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.apache.zookeeper.txn.Txn;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        if r0 != r1 goto label2;

        return 1;

     label2:
        r2 = (org.apache.zookeeper.txn.Txn) r0;

        $i1 = r1.<org.apache.zookeeper.txn.Txn: int type>;

        $i0 = r2.<org.apache.zookeeper.txn.Txn: int type>;

        if $i1 != $i0 goto label3;

        $z4 = 1;

        $z3 = 1;

        goto label4;

     label3:
        $z4 = 0;

        $z3 = 0;

     label4:
        if $z3 != 0 goto label5;

        return $z4;

     label5:
        $r4 = r1.<org.apache.zookeeper.txn.Txn: byte[] data>;

        $r3 = r2.<org.apache.zookeeper.txn.Txn: byte[] data>;

        $z1 = staticinvoke <org.apache.jute.Utils: boolean bufEquals(byte[],byte[])>($r4, $r3);

        if $z1 != 0 goto label6;

        return $z1;

     label6:
        return $z1;
    }

    public int hashCode()
    {
        byte[] $r1;
        org.apache.zookeeper.txn.Txn r0;
        int $i0, $i1, i2, i3, i4;
        java.lang.String $r2;

        r0 := @this: org.apache.zookeeper.txn.Txn;

        i2 = r0.<org.apache.zookeeper.txn.Txn: int type>;

        i3 = 629 + i2;

        $r1 = r0.<org.apache.zookeeper.txn.Txn: byte[] data>;

        $r2 = staticinvoke <java.util.Arrays: java.lang.String toString(byte[])>($r1);

        $i0 = virtualinvoke $r2.<java.lang.String: int hashCode()>();

        $i1 = 37 * i3;

        i4 = $i1 + $i0;

        return i4;
    }

    public static java.lang.String signature()
    {
        return "LTxn(iB)";
    }
}
