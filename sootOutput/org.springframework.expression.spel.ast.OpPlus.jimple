public class org.springframework.expression.spel.ast.OpPlus extends org.springframework.expression.spel.ast.Operator
{

    public transient void <init>(int, org.springframework.expression.spel.ast.SpelNodeImpl[])
    {
        int i0;
        org.springframework.expression.spel.ast.OpPlus r0;
        org.springframework.expression.spel.ast.SpelNodeImpl[] r1;

        r0 := @this: org.springframework.expression.spel.ast.OpPlus;

        i0 := @parameter0: int;

        r1 := @parameter1: org.springframework.expression.spel.ast.SpelNodeImpl[];

        specialinvoke r0.<org.springframework.expression.spel.ast.Operator: void <init>(java.lang.String,int,org.springframework.expression.spel.ast.SpelNodeImpl[])>("+", i0, r1);

        return;
    }

    public org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState) throws org.springframework.expression.EvaluationException
    {
        java.lang.Integer $r30, $r36, $r37;
        java.lang.Long $r28, $r39, $r40;
        org.springframework.expression.spel.ExpressionState r3;
        java.lang.StringBuilder $r10, $r14, $r19, $r22;
        org.springframework.expression.spel.ast.SpelNodeImpl $r1, $r2;
        java.lang.Double $r26, $r42, $r43;
        org.springframework.expression.Operation $r8, $r33;
        long $l0, $l1, $l2, $l7;
        java.lang.String $r11, $r13, $r15, $r17, $r20, $r21, $r23, $r45, $r46;
        org.springframework.expression.TypedValue $r4, $r6, $r9, $r12, $r16, $r18, $r25, $r27, $r29, $r31, $r34, $r35, $r38, $r41;
        java.lang.Number r24, r44;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12;
        int $i3, $i4, $i5, $i6;
        double $d0, $d1, $d2, $d3;
        org.springframework.expression.spel.ast.OpPlus r0;
        java.lang.Object $r5, $r7, $r32;

        r0 := @this: org.springframework.expression.spel.ast.OpPlus;

        r3 := @parameter0: org.springframework.expression.spel.ExpressionState;

        $r1 = virtualinvoke r0.<org.springframework.expression.spel.ast.OpPlus: org.springframework.expression.spel.ast.SpelNodeImpl getLeftOperand()>();

        $r2 = virtualinvoke r0.<org.springframework.expression.spel.ast.OpPlus: org.springframework.expression.spel.ast.SpelNodeImpl getRightOperand()>();

        if $r2 != null goto label04;

        $r31 = virtualinvoke $r1.<org.springframework.expression.spel.ast.SpelNodeImpl: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>(r3);

        $r32 = virtualinvoke $r31.<org.springframework.expression.TypedValue: java.lang.Object getValue()>();

        $z10 = $r32 instanceof java.lang.Number;

        if $z10 == 0 goto label03;

        $z11 = $r32 instanceof java.lang.Double;

        if $z11 == 0 goto label01;

        $r41 = new org.springframework.expression.TypedValue;

        $r42 = (java.lang.Double) $r32;

        $d3 = virtualinvoke $r42.<java.lang.Double: double doubleValue()>();

        $r43 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d3);

        specialinvoke $r41.<org.springframework.expression.TypedValue: void <init>(java.lang.Object)>($r43);

        return $r41;

     label01:
        $z12 = $r32 instanceof java.lang.Long;

        if $z12 == 0 goto label02;

        $r38 = new org.springframework.expression.TypedValue;

        $r39 = (java.lang.Long) $r32;

        $l7 = virtualinvoke $r39.<java.lang.Long: long longValue()>();

        $r40 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l7);

        specialinvoke $r38.<org.springframework.expression.TypedValue: void <init>(java.lang.Object)>($r40);

        return $r38;

     label02:
        $r35 = new org.springframework.expression.TypedValue;

        $r36 = (java.lang.Integer) $r32;

        $i6 = virtualinvoke $r36.<java.lang.Integer: int intValue()>();

        $r37 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

        specialinvoke $r35.<org.springframework.expression.TypedValue: void <init>(java.lang.Object)>($r37);

        return $r35;

     label03:
        $r33 = <org.springframework.expression.Operation: org.springframework.expression.Operation ADD>;

        $r34 = virtualinvoke r3.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue operate(org.springframework.expression.Operation,java.lang.Object,java.lang.Object)>($r33, $r32, null);

        return $r34;

     label04:
        $r4 = virtualinvoke $r1.<org.springframework.expression.spel.ast.SpelNodeImpl: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>(r3);

        $r5 = virtualinvoke $r4.<org.springframework.expression.TypedValue: java.lang.Object getValue()>();

        $r6 = virtualinvoke $r2.<org.springframework.expression.spel.ast.SpelNodeImpl: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>(r3);

        $r7 = virtualinvoke $r6.<org.springframework.expression.TypedValue: java.lang.Object getValue()>();

        $z0 = $r5 instanceof java.lang.Number;

        if $z0 == 0 goto label09;

        $z5 = $r7 instanceof java.lang.Number;

        if $z5 == 0 goto label09;

        r44 = (java.lang.Number) $r5;

        r24 = (java.lang.Number) $r7;

        $z6 = r44 instanceof java.lang.Double;

        if $z6 != 0 goto label05;

        $z7 = r24 instanceof java.lang.Double;

        if $z7 == 0 goto label06;

     label05:
        $r25 = new org.springframework.expression.TypedValue;

        $d0 = virtualinvoke r44.<java.lang.Number: double doubleValue()>();

        $d1 = virtualinvoke r24.<java.lang.Number: double doubleValue()>();

        $d2 = $d0 + $d1;

        $r26 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d2);

        specialinvoke $r25.<org.springframework.expression.TypedValue: void <init>(java.lang.Object)>($r26);

        return $r25;

     label06:
        $z8 = r44 instanceof java.lang.Long;

        if $z8 != 0 goto label07;

        $z9 = r24 instanceof java.lang.Long;

        if $z9 == 0 goto label08;

     label07:
        $r27 = new org.springframework.expression.TypedValue;

        $l0 = virtualinvoke r44.<java.lang.Number: long longValue()>();

        $l1 = virtualinvoke r24.<java.lang.Number: long longValue()>();

        $l2 = $l0 + $l1;

        $r28 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        specialinvoke $r27.<org.springframework.expression.TypedValue: void <init>(java.lang.Object)>($r28);

        return $r27;

     label08:
        $r29 = new org.springframework.expression.TypedValue;

        $i3 = virtualinvoke r44.<java.lang.Number: int intValue()>();

        $i4 = virtualinvoke r24.<java.lang.Number: int intValue()>();

        $i5 = $i3 + $i4;

        $r30 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        specialinvoke $r29.<org.springframework.expression.TypedValue: void <init>(java.lang.Object)>($r30);

        return $r29;

     label09:
        $z1 = $r5 instanceof java.lang.String;

        if $z1 == 0 goto label10;

        $z4 = $r7 instanceof java.lang.String;

        if $z4 == 0 goto label10;

        $r18 = new org.springframework.expression.TypedValue;

        $r19 = new java.lang.StringBuilder;

        $r20 = (java.lang.String) $r5;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>(java.lang.String)>($r20);

        $r21 = (java.lang.String) $r7;

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<org.springframework.expression.TypedValue: void <init>(java.lang.Object)>($r23);

        return $r18;

     label10:
        $z2 = $r5 instanceof java.lang.String;

        if $z2 == 0 goto label13;

        $r14 = new java.lang.StringBuilder;

        $r15 = (java.lang.String) $r5;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>($r15);

        if $r7 != null goto label11;

        $r45 = "null";

        goto label12;

     label11:
        $r45 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>();

     label12:
        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r45);

        $r16 = new org.springframework.expression.TypedValue;

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<org.springframework.expression.TypedValue: void <init>(java.lang.Object)>($r17);

        return $r16;

     label13:
        $z3 = $r7 instanceof java.lang.String;

        if $z3 == 0 goto label16;

        $r10 = new java.lang.StringBuilder;

        if $r5 != null goto label14;

        $r46 = "null";

        goto label15;

     label14:
        $r46 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

     label15:
        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>($r46);

        $r11 = (java.lang.String) $r7;

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r12 = new org.springframework.expression.TypedValue;

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<org.springframework.expression.TypedValue: void <init>(java.lang.Object)>($r13);

        return $r12;

     label16:
        $r8 = <org.springframework.expression.Operation: org.springframework.expression.Operation ADD>;

        $r9 = virtualinvoke r3.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue operate(org.springframework.expression.Operation,java.lang.Object,java.lang.Object)>($r8, $r5, $r7);

        return $r9;
    }

    public java.lang.String toStringAST()
    {
        org.springframework.expression.spel.ast.OpPlus r0;
        org.springframework.expression.spel.ast.SpelNodeImpl[] $r1;
        int $i0;
        java.lang.StringBuilder $r3, $r4, $r7;
        java.lang.String $r2, $r6, $r8;
        org.springframework.expression.spel.ast.SpelNodeImpl $r5;

        r0 := @this: org.springframework.expression.spel.ast.OpPlus;

        $r1 = r0.<org.springframework.expression.spel.ast.OpPlus: org.springframework.expression.spel.ast.SpelNodeImpl[] children>;

        $i0 = lengthof $r1;

        if $i0 >= 2 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("+");

        $r5 = virtualinvoke r0.<org.springframework.expression.spel.ast.OpPlus: org.springframework.expression.spel.ast.SpelNodeImpl getLeftOperand()>();

        $r6 = virtualinvoke $r5.<org.springframework.expression.spel.ast.SpelNodeImpl: java.lang.String toStringAST()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;

     label1:
        $r2 = specialinvoke r0.<org.springframework.expression.spel.ast.Operator: java.lang.String toStringAST()>();

        return $r2;
    }

    public org.springframework.expression.spel.ast.SpelNodeImpl getRightOperand()
    {
        org.springframework.expression.spel.ast.OpPlus r0;
        int $i0;
        org.springframework.expression.spel.ast.SpelNodeImpl $r3;
        org.springframework.expression.spel.ast.SpelNodeImpl[] $r1, $r2;

        r0 := @this: org.springframework.expression.spel.ast.OpPlus;

        $r1 = r0.<org.springframework.expression.spel.ast.OpPlus: org.springframework.expression.spel.ast.SpelNodeImpl[] children>;

        $i0 = lengthof $r1;

        if $i0 >= 2 goto label1;

        return null;

     label1:
        $r2 = r0.<org.springframework.expression.spel.ast.OpPlus: org.springframework.expression.spel.ast.SpelNodeImpl[] children>;

        $r3 = $r2[1];

        return $r3;
    }
}
