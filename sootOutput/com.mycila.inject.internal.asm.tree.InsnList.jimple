public class com.mycila.inject.internal.asm.tree.InsnList extends java.lang.Object
{
    public static boolean check;
    private int size;
    private com.mycila.inject.internal.asm.tree.AbstractInsnNode first;
    private com.mycila.inject.internal.asm.tree.AbstractInsnNode last;
    com.mycila.inject.internal.asm.tree.AbstractInsnNode[] cache;

    public void <init>()
    {
        com.mycila.inject.internal.asm.tree.InsnList r0;

        r0 := @this: com.mycila.inject.internal.asm.tree.InsnList;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public int size()
    {
        int $i0;
        com.mycila.inject.internal.asm.tree.InsnList r0;

        r0 := @this: com.mycila.inject.internal.asm.tree.InsnList;

        $i0 = r0.<com.mycila.inject.internal.asm.tree.InsnList: int size>;

        return $i0;
    }

    public com.mycila.inject.internal.asm.tree.AbstractInsnNode getFirst()
    {
        com.mycila.inject.internal.asm.tree.AbstractInsnNode $r1;
        com.mycila.inject.internal.asm.tree.InsnList r0;

        r0 := @this: com.mycila.inject.internal.asm.tree.InsnList;

        $r1 = r0.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode first>;

        return $r1;
    }

    public com.mycila.inject.internal.asm.tree.AbstractInsnNode getLast()
    {
        com.mycila.inject.internal.asm.tree.AbstractInsnNode $r1;
        com.mycila.inject.internal.asm.tree.InsnList r0;

        r0 := @this: com.mycila.inject.internal.asm.tree.InsnList;

        $r1 = r0.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode last>;

        return $r1;
    }

    public com.mycila.inject.internal.asm.tree.AbstractInsnNode get(int)
    {
        com.mycila.inject.internal.asm.tree.AbstractInsnNode $r4;
        java.lang.IndexOutOfBoundsException $r0;
        com.mycila.inject.internal.asm.tree.InsnList r1;
        com.mycila.inject.internal.asm.tree.AbstractInsnNode[] $r2, $r3, $r5;
        int i0, $i1;

        r1 := @this: com.mycila.inject.internal.asm.tree.InsnList;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $i1 = r1.<com.mycila.inject.internal.asm.tree.InsnList: int size>;

        if i0 < $i1 goto label2;

     label1:
        $r0 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r0;

     label2:
        $r2 = r1.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode[] cache>;

        if $r2 != null goto label3;

        $r5 = virtualinvoke r1.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode[] toArray()>();

        r1.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode[] cache> = $r5;

     label3:
        $r3 = r1.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode[] cache>;

        $r4 = $r3[i0];

        return $r4;
    }

    public boolean contains(com.mycila.inject.internal.asm.tree.AbstractInsnNode)
    {
        com.mycila.inject.internal.asm.tree.AbstractInsnNode r1, r2;
        com.mycila.inject.internal.asm.tree.InsnList r0;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.asm.tree.InsnList;

        r1 := @parameter0: com.mycila.inject.internal.asm.tree.AbstractInsnNode;

        r2 = r0.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode first>;

     label1:
        if r2 == null goto label2;

        if r2 == r1 goto label2;

        r2 = r2.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: com.mycila.inject.internal.asm.tree.AbstractInsnNode next>;

        goto label1;

     label2:
        if r2 == null goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    public int indexOf(com.mycila.inject.internal.asm.tree.AbstractInsnNode)
    {
        com.mycila.inject.internal.asm.tree.AbstractInsnNode r2;
        com.mycila.inject.internal.asm.tree.InsnList r0;
        java.lang.IllegalArgumentException $r4;
        com.mycila.inject.internal.asm.tree.AbstractInsnNode[] $r1, $r3;
        int $i0;
        boolean $z0, $z1;

        r0 := @this: com.mycila.inject.internal.asm.tree.InsnList;

        r2 := @parameter0: com.mycila.inject.internal.asm.tree.AbstractInsnNode;

        $z0 = <com.mycila.inject.internal.asm.tree.InsnList: boolean check>;

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<com.mycila.inject.internal.asm.tree.InsnList: boolean contains(com.mycila.inject.internal.asm.tree.AbstractInsnNode)>(r2);

        if $z1 != 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r4;

     label1:
        $r1 = r0.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode[] cache>;

        if $r1 != null goto label2;

        $r3 = virtualinvoke r0.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode[] toArray()>();

        r0.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode[] cache> = $r3;

     label2:
        $i0 = r2.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: int index>;

        return $i0;
    }

    public void accept(com.mycila.inject.internal.asm.MethodVisitor)
    {
        com.mycila.inject.internal.asm.tree.AbstractInsnNode r2;
        com.mycila.inject.internal.asm.tree.InsnList r0;
        com.mycila.inject.internal.asm.MethodVisitor r1;

        r0 := @this: com.mycila.inject.internal.asm.tree.InsnList;

        r1 := @parameter0: com.mycila.inject.internal.asm.MethodVisitor;

        r2 = r0.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode first>;

     label1:
        if r2 == null goto label2;

        virtualinvoke r2.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: void accept(com.mycila.inject.internal.asm.MethodVisitor)>(r1);

        r2 = r2.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: com.mycila.inject.internal.asm.tree.AbstractInsnNode next>;

        goto label1;

     label2:
        return;
    }

    public java.util.ListIterator iterator()
    {
        com.mycila.inject.internal.asm.tree.InsnList r0;
        java.util.ListIterator $r1;

        r0 := @this: com.mycila.inject.internal.asm.tree.InsnList;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.asm.tree.InsnList: java.util.ListIterator iterator(int)>(0);

        return $r1;
    }

    public java.util.ListIterator iterator(int)
    {
        com.mycila.inject.internal.asm.tree.InsnList$InsnListIterator $r0;
        int i0;
        com.mycila.inject.internal.asm.tree.InsnList r1;

        r1 := @this: com.mycila.inject.internal.asm.tree.InsnList;

        i0 := @parameter0: int;

        $r0 = new com.mycila.inject.internal.asm.tree.InsnList$InsnListIterator;

        specialinvoke $r0.<com.mycila.inject.internal.asm.tree.InsnList$InsnListIterator: void <init>(com.mycila.inject.internal.asm.tree.InsnList,int)>(r1, i0);

        return $r0;
    }

    public com.mycila.inject.internal.asm.tree.AbstractInsnNode[] toArray()
    {
        com.mycila.inject.internal.asm.tree.AbstractInsnNode r2;
        com.mycila.inject.internal.asm.tree.AbstractInsnNode[] r1;
        int $i0, $i1, i2;
        com.mycila.inject.internal.asm.tree.InsnList r0;

        r0 := @this: com.mycila.inject.internal.asm.tree.InsnList;

        i2 = 0;

        r2 = r0.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode first>;

        $i0 = r0.<com.mycila.inject.internal.asm.tree.InsnList: int size>;

        r1 = newarray (com.mycila.inject.internal.asm.tree.AbstractInsnNode)[$i0];

     label1:
        if r2 == null goto label2;

        r1[i2] = r2;

        $i1 = i2;

        i2 = i2 + 1;

        r2.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: int index> = $i1;

        r2 = r2.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: com.mycila.inject.internal.asm.tree.AbstractInsnNode next>;

        goto label1;

     label2:
        return r1;
    }

    public void set(com.mycila.inject.internal.asm.tree.AbstractInsnNode, com.mycila.inject.internal.asm.tree.AbstractInsnNode)
    {
        com.mycila.inject.internal.asm.tree.AbstractInsnNode r0, r1, $r5, $r7;
        com.mycila.inject.internal.asm.tree.InsnList r2;
        java.lang.IllegalArgumentException $r8;
        com.mycila.inject.internal.asm.tree.AbstractInsnNode[] $r3, $r4;
        int i0, $i1, $i3, $i5;
        boolean $z0, $z1;

        r2 := @this: com.mycila.inject.internal.asm.tree.InsnList;

        r0 := @parameter0: com.mycila.inject.internal.asm.tree.AbstractInsnNode;

        r1 := @parameter1: com.mycila.inject.internal.asm.tree.AbstractInsnNode;

        $z0 = <com.mycila.inject.internal.asm.tree.InsnList: boolean check>;

        if $z0 == 0 goto label2;

        $z1 = virtualinvoke r2.<com.mycila.inject.internal.asm.tree.InsnList: boolean contains(com.mycila.inject.internal.asm.tree.AbstractInsnNode)>(r0);

        if $z1 == 0 goto label1;

        $i1 = r1.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: int index>;

        $i3 = (int) -1;

        if $i1 == $i3 goto label2;

     label1:
        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r8;

     label2:
        $r7 = r0.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: com.mycila.inject.internal.asm.tree.AbstractInsnNode next>;

        r1.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: com.mycila.inject.internal.asm.tree.AbstractInsnNode next> = $r7;

        if $r7 == null goto label3;

        $r7.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: com.mycila.inject.internal.asm.tree.AbstractInsnNode prev> = r1;

        goto label4;

     label3:
        r2.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode last> = r1;

     label4:
        $r5 = r0.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: com.mycila.inject.internal.asm.tree.AbstractInsnNode prev>;

        r1.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: com.mycila.inject.internal.asm.tree.AbstractInsnNode prev> = $r5;

        if $r5 == null goto label5;

        $r5.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: com.mycila.inject.internal.asm.tree.AbstractInsnNode next> = r1;

        goto label6;

     label5:
        r2.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode first> = r1;

     label6:
        $r3 = r2.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode[] cache>;

        if $r3 == null goto label7;

        i0 = r0.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: int index>;

        $r4 = r2.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode[] cache>;

        $r4[i0] = r1;

        r1.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: int index> = i0;

        goto label8;

     label7:
        r1.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: int index> = 0;

     label8:
        $i5 = (int) -1;

        r0.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: int index> = $i5;

        r0.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: com.mycila.inject.internal.asm.tree.AbstractInsnNode prev> = null;

        r0.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: com.mycila.inject.internal.asm.tree.AbstractInsnNode next> = null;

        return;
    }

    public void add(com.mycila.inject.internal.asm.tree.AbstractInsnNode)
    {
        com.mycila.inject.internal.asm.tree.AbstractInsnNode $r1, r2, $r3, $r4;
        com.mycila.inject.internal.asm.tree.InsnList r0;
        java.lang.IllegalArgumentException $r6;
        int $i0, $i1, $i2, $i4;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.asm.tree.InsnList;

        r2 := @parameter0: com.mycila.inject.internal.asm.tree.AbstractInsnNode;

        $z0 = <com.mycila.inject.internal.asm.tree.InsnList: boolean check>;

        if $z0 == 0 goto label1;

        $i2 = r2.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: int index>;

        $i4 = (int) -1;

        if $i2 == $i4 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r6;

     label1:
        $i0 = r0.<com.mycila.inject.internal.asm.tree.InsnList: int size>;

        $i1 = $i0 + 1;

        r0.<com.mycila.inject.internal.asm.tree.InsnList: int size> = $i1;

        $r1 = r0.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode last>;

        if $r1 != null goto label2;

        r0.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode first> = r2;

        r0.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode last> = r2;

        goto label3;

     label2:
        $r3 = r0.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode last>;

        $r3.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: com.mycila.inject.internal.asm.tree.AbstractInsnNode next> = r2;

        $r4 = r0.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode last>;

        r2.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: com.mycila.inject.internal.asm.tree.AbstractInsnNode prev> = $r4;

     label3:
        r0.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode last> = r2;

        r0.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode[] cache> = null;

        r2.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: int index> = 0;

        return;
    }

    public void add(com.mycila.inject.internal.asm.tree.InsnList)
    {
        com.mycila.inject.internal.asm.tree.AbstractInsnNode $r2, r3, $r4, $r5, $r6, $r7, $r8;
        com.mycila.inject.internal.asm.tree.InsnList r0, r1;
        java.lang.IllegalArgumentException $r9;
        int $i0, $i1, $i2, $i3;
        boolean $z0;

        r1 := @this: com.mycila.inject.internal.asm.tree.InsnList;

        r0 := @parameter0: com.mycila.inject.internal.asm.tree.InsnList;

        $z0 = <com.mycila.inject.internal.asm.tree.InsnList: boolean check>;

        if $z0 == 0 goto label1;

        if r0 != r1 goto label1;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r9;

     label1:
        $i0 = r0.<com.mycila.inject.internal.asm.tree.InsnList: int size>;

        if $i0 != 0 goto label2;

        return;

     label2:
        $i2 = r1.<com.mycila.inject.internal.asm.tree.InsnList: int size>;

        $i1 = r0.<com.mycila.inject.internal.asm.tree.InsnList: int size>;

        $i3 = $i2 + $i1;

        r1.<com.mycila.inject.internal.asm.tree.InsnList: int size> = $i3;

        $r2 = r1.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode last>;

        if $r2 != null goto label3;

        $r7 = r0.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode first>;

        r1.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode first> = $r7;

        $r8 = r0.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode last>;

        r1.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode last> = $r8;

        goto label4;

     label3:
        r3 = r0.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode first>;

        $r4 = r1.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode last>;

        $r4.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: com.mycila.inject.internal.asm.tree.AbstractInsnNode next> = r3;

        $r5 = r1.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode last>;

        r3.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: com.mycila.inject.internal.asm.tree.AbstractInsnNode prev> = $r5;

        $r6 = r0.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode last>;

        r1.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode last> = $r6;

     label4:
        r1.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode[] cache> = null;

        specialinvoke r0.<com.mycila.inject.internal.asm.tree.InsnList: void removeAll(boolean)>(0);

        return;
    }

    public void insert(com.mycila.inject.internal.asm.tree.AbstractInsnNode)
    {
        com.mycila.inject.internal.asm.tree.AbstractInsnNode $r1, r2, $r3, $r4;
        com.mycila.inject.internal.asm.tree.InsnList r0;
        java.lang.IllegalArgumentException $r6;
        int $i0, $i1, $i2, $i4;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.asm.tree.InsnList;

        r2 := @parameter0: com.mycila.inject.internal.asm.tree.AbstractInsnNode;

        $z0 = <com.mycila.inject.internal.asm.tree.InsnList: boolean check>;

        if $z0 == 0 goto label1;

        $i2 = r2.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: int index>;

        $i4 = (int) -1;

        if $i2 == $i4 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r6;

     label1:
        $i0 = r0.<com.mycila.inject.internal.asm.tree.InsnList: int size>;

        $i1 = $i0 + 1;

        r0.<com.mycila.inject.internal.asm.tree.InsnList: int size> = $i1;

        $r1 = r0.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode first>;

        if $r1 != null goto label2;

        r0.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode first> = r2;

        r0.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode last> = r2;

        goto label3;

     label2:
        $r3 = r0.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode first>;

        $r3.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: com.mycila.inject.internal.asm.tree.AbstractInsnNode prev> = r2;

        $r4 = r0.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode first>;

        r2.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: com.mycila.inject.internal.asm.tree.AbstractInsnNode next> = $r4;

     label3:
        r0.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode first> = r2;

        r0.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode[] cache> = null;

        r2.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: int index> = 0;

        return;
    }

    public void insert(com.mycila.inject.internal.asm.tree.InsnList)
    {
        com.mycila.inject.internal.asm.tree.AbstractInsnNode $r2, r3, $r4, $r5, $r6, $r7, $r8;
        com.mycila.inject.internal.asm.tree.InsnList r0, r1;
        java.lang.IllegalArgumentException $r9;
        int $i0, $i1, $i2, $i3;
        boolean $z0;

        r1 := @this: com.mycila.inject.internal.asm.tree.InsnList;

        r0 := @parameter0: com.mycila.inject.internal.asm.tree.InsnList;

        $z0 = <com.mycila.inject.internal.asm.tree.InsnList: boolean check>;

        if $z0 == 0 goto label1;

        if r0 != r1 goto label1;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r9;

     label1:
        $i0 = r0.<com.mycila.inject.internal.asm.tree.InsnList: int size>;

        if $i0 != 0 goto label2;

        return;

     label2:
        $i2 = r1.<com.mycila.inject.internal.asm.tree.InsnList: int size>;

        $i1 = r0.<com.mycila.inject.internal.asm.tree.InsnList: int size>;

        $i3 = $i2 + $i1;

        r1.<com.mycila.inject.internal.asm.tree.InsnList: int size> = $i3;

        $r2 = r1.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode first>;

        if $r2 != null goto label3;

        $r7 = r0.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode first>;

        r1.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode first> = $r7;

        $r8 = r0.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode last>;

        r1.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode last> = $r8;

        goto label4;

     label3:
        r3 = r0.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode last>;

        $r4 = r1.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode first>;

        $r4.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: com.mycila.inject.internal.asm.tree.AbstractInsnNode prev> = r3;

        $r5 = r1.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode first>;

        r3.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: com.mycila.inject.internal.asm.tree.AbstractInsnNode next> = $r5;

        $r6 = r0.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode first>;

        r1.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode first> = $r6;

     label4:
        r1.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode[] cache> = null;

        specialinvoke r0.<com.mycila.inject.internal.asm.tree.InsnList: void removeAll(boolean)>(0);

        return;
    }

    public void insert(com.mycila.inject.internal.asm.tree.AbstractInsnNode, com.mycila.inject.internal.asm.tree.AbstractInsnNode)
    {
        com.mycila.inject.internal.asm.tree.AbstractInsnNode r1, r2, $r4;
        com.mycila.inject.internal.asm.tree.InsnList r0;
        java.lang.IllegalArgumentException $r5;
        int $i0, $i1, $i2, $i4;
        boolean $z0, $z1;

        r0 := @this: com.mycila.inject.internal.asm.tree.InsnList;

        r1 := @parameter0: com.mycila.inject.internal.asm.tree.AbstractInsnNode;

        r2 := @parameter1: com.mycila.inject.internal.asm.tree.AbstractInsnNode;

        $z0 = <com.mycila.inject.internal.asm.tree.InsnList: boolean check>;

        if $z0 == 0 goto label2;

        $z1 = virtualinvoke r0.<com.mycila.inject.internal.asm.tree.InsnList: boolean contains(com.mycila.inject.internal.asm.tree.AbstractInsnNode)>(r1);

        if $z1 == 0 goto label1;

        $i2 = r2.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: int index>;

        $i4 = (int) -1;

        if $i2 == $i4 goto label2;

     label1:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r5;

     label2:
        $i0 = r0.<com.mycila.inject.internal.asm.tree.InsnList: int size>;

        $i1 = $i0 + 1;

        r0.<com.mycila.inject.internal.asm.tree.InsnList: int size> = $i1;

        $r4 = r1.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: com.mycila.inject.internal.asm.tree.AbstractInsnNode next>;

        if $r4 != null goto label3;

        r0.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode last> = r2;

        goto label4;

     label3:
        $r4.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: com.mycila.inject.internal.asm.tree.AbstractInsnNode prev> = r2;

     label4:
        r1.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: com.mycila.inject.internal.asm.tree.AbstractInsnNode next> = r2;

        r2.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: com.mycila.inject.internal.asm.tree.AbstractInsnNode next> = $r4;

        r2.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: com.mycila.inject.internal.asm.tree.AbstractInsnNode prev> = r1;

        r0.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode[] cache> = null;

        r2.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: int index> = 0;

        return;
    }

    public void insert(com.mycila.inject.internal.asm.tree.AbstractInsnNode, com.mycila.inject.internal.asm.tree.InsnList)
    {
        com.mycila.inject.internal.asm.tree.AbstractInsnNode r2, r3, r4, r5;
        com.mycila.inject.internal.asm.tree.InsnList r0, r1;
        java.lang.IllegalArgumentException $r6;
        int $i0, $i1, $i2, $i3;
        boolean $z0, $z1;

        r1 := @this: com.mycila.inject.internal.asm.tree.InsnList;

        r4 := @parameter0: com.mycila.inject.internal.asm.tree.AbstractInsnNode;

        r0 := @parameter1: com.mycila.inject.internal.asm.tree.InsnList;

        $z0 = <com.mycila.inject.internal.asm.tree.InsnList: boolean check>;

        if $z0 == 0 goto label2;

        $z1 = virtualinvoke r1.<com.mycila.inject.internal.asm.tree.InsnList: boolean contains(com.mycila.inject.internal.asm.tree.AbstractInsnNode)>(r4);

        if $z1 == 0 goto label1;

        if r0 != r1 goto label2;

     label1:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r6;

     label2:
        $i0 = r0.<com.mycila.inject.internal.asm.tree.InsnList: int size>;

        if $i0 != 0 goto label3;

        return;

     label3:
        $i2 = r1.<com.mycila.inject.internal.asm.tree.InsnList: int size>;

        $i1 = r0.<com.mycila.inject.internal.asm.tree.InsnList: int size>;

        $i3 = $i2 + $i1;

        r1.<com.mycila.inject.internal.asm.tree.InsnList: int size> = $i3;

        r2 = r0.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode first>;

        r3 = r0.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode last>;

        r5 = r4.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: com.mycila.inject.internal.asm.tree.AbstractInsnNode next>;

        if r5 != null goto label4;

        r1.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode last> = r3;

        goto label5;

     label4:
        r5.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: com.mycila.inject.internal.asm.tree.AbstractInsnNode prev> = r3;

     label5:
        r4.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: com.mycila.inject.internal.asm.tree.AbstractInsnNode next> = r2;

        r3.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: com.mycila.inject.internal.asm.tree.AbstractInsnNode next> = r5;

        r2.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: com.mycila.inject.internal.asm.tree.AbstractInsnNode prev> = r4;

        r1.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode[] cache> = null;

        specialinvoke r0.<com.mycila.inject.internal.asm.tree.InsnList: void removeAll(boolean)>(0);

        return;
    }

    public void insertBefore(com.mycila.inject.internal.asm.tree.AbstractInsnNode, com.mycila.inject.internal.asm.tree.AbstractInsnNode)
    {
        com.mycila.inject.internal.asm.tree.AbstractInsnNode r1, r2, $r4;
        com.mycila.inject.internal.asm.tree.InsnList r0;
        java.lang.IllegalArgumentException $r5;
        int $i0, $i1, $i2, $i4;
        boolean $z0, $z1;

        r0 := @this: com.mycila.inject.internal.asm.tree.InsnList;

        r1 := @parameter0: com.mycila.inject.internal.asm.tree.AbstractInsnNode;

        r2 := @parameter1: com.mycila.inject.internal.asm.tree.AbstractInsnNode;

        $z0 = <com.mycila.inject.internal.asm.tree.InsnList: boolean check>;

        if $z0 == 0 goto label2;

        $z1 = virtualinvoke r0.<com.mycila.inject.internal.asm.tree.InsnList: boolean contains(com.mycila.inject.internal.asm.tree.AbstractInsnNode)>(r1);

        if $z1 == 0 goto label1;

        $i2 = r2.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: int index>;

        $i4 = (int) -1;

        if $i2 == $i4 goto label2;

     label1:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r5;

     label2:
        $i0 = r0.<com.mycila.inject.internal.asm.tree.InsnList: int size>;

        $i1 = $i0 + 1;

        r0.<com.mycila.inject.internal.asm.tree.InsnList: int size> = $i1;

        $r4 = r1.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: com.mycila.inject.internal.asm.tree.AbstractInsnNode prev>;

        if $r4 != null goto label3;

        r0.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode first> = r2;

        goto label4;

     label3:
        $r4.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: com.mycila.inject.internal.asm.tree.AbstractInsnNode next> = r2;

     label4:
        r1.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: com.mycila.inject.internal.asm.tree.AbstractInsnNode prev> = r2;

        r2.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: com.mycila.inject.internal.asm.tree.AbstractInsnNode next> = r1;

        r2.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: com.mycila.inject.internal.asm.tree.AbstractInsnNode prev> = $r4;

        r0.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode[] cache> = null;

        r2.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: int index> = 0;

        return;
    }

    public void insertBefore(com.mycila.inject.internal.asm.tree.AbstractInsnNode, com.mycila.inject.internal.asm.tree.InsnList)
    {
        com.mycila.inject.internal.asm.tree.AbstractInsnNode r2, r3, r4, r5;
        com.mycila.inject.internal.asm.tree.InsnList r0, r1;
        java.lang.IllegalArgumentException $r6;
        int $i0, $i1, $i2, $i3;
        boolean $z0, $z1;

        r1 := @this: com.mycila.inject.internal.asm.tree.InsnList;

        r4 := @parameter0: com.mycila.inject.internal.asm.tree.AbstractInsnNode;

        r0 := @parameter1: com.mycila.inject.internal.asm.tree.InsnList;

        $z0 = <com.mycila.inject.internal.asm.tree.InsnList: boolean check>;

        if $z0 == 0 goto label2;

        $z1 = virtualinvoke r1.<com.mycila.inject.internal.asm.tree.InsnList: boolean contains(com.mycila.inject.internal.asm.tree.AbstractInsnNode)>(r4);

        if $z1 == 0 goto label1;

        if r0 != r1 goto label2;

     label1:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r6;

     label2:
        $i0 = r0.<com.mycila.inject.internal.asm.tree.InsnList: int size>;

        if $i0 != 0 goto label3;

        return;

     label3:
        $i2 = r1.<com.mycila.inject.internal.asm.tree.InsnList: int size>;

        $i1 = r0.<com.mycila.inject.internal.asm.tree.InsnList: int size>;

        $i3 = $i2 + $i1;

        r1.<com.mycila.inject.internal.asm.tree.InsnList: int size> = $i3;

        r2 = r0.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode first>;

        r3 = r0.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode last>;

        r5 = r4.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: com.mycila.inject.internal.asm.tree.AbstractInsnNode prev>;

        if r5 != null goto label4;

        r1.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode first> = r2;

        goto label5;

     label4:
        r5.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: com.mycila.inject.internal.asm.tree.AbstractInsnNode next> = r2;

     label5:
        r4.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: com.mycila.inject.internal.asm.tree.AbstractInsnNode prev> = r3;

        r3.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: com.mycila.inject.internal.asm.tree.AbstractInsnNode next> = r4;

        r2.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: com.mycila.inject.internal.asm.tree.AbstractInsnNode prev> = r5;

        r1.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode[] cache> = null;

        specialinvoke r0.<com.mycila.inject.internal.asm.tree.InsnList: void removeAll(boolean)>(0);

        return;
    }

    public void remove(com.mycila.inject.internal.asm.tree.AbstractInsnNode)
    {
        com.mycila.inject.internal.asm.tree.AbstractInsnNode r1, $r2, $r3;
        com.mycila.inject.internal.asm.tree.InsnList r0;
        java.lang.IllegalArgumentException $r5;
        int $i0, $i1, $i3;
        boolean $z0, $z1;

        r0 := @this: com.mycila.inject.internal.asm.tree.InsnList;

        r1 := @parameter0: com.mycila.inject.internal.asm.tree.AbstractInsnNode;

        $z0 = <com.mycila.inject.internal.asm.tree.InsnList: boolean check>;

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<com.mycila.inject.internal.asm.tree.InsnList: boolean contains(com.mycila.inject.internal.asm.tree.AbstractInsnNode)>(r1);

        if $z1 != 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r5;

     label1:
        $i0 = r0.<com.mycila.inject.internal.asm.tree.InsnList: int size>;

        $i1 = $i0 - 1;

        r0.<com.mycila.inject.internal.asm.tree.InsnList: int size> = $i1;

        $r2 = r1.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: com.mycila.inject.internal.asm.tree.AbstractInsnNode next>;

        $r3 = r1.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: com.mycila.inject.internal.asm.tree.AbstractInsnNode prev>;

        if $r2 != null goto label3;

        if $r3 != null goto label2;

        r0.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode first> = null;

        r0.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode last> = null;

        goto label5;

     label2:
        $r3.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: com.mycila.inject.internal.asm.tree.AbstractInsnNode next> = null;

        r0.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode last> = $r3;

        goto label5;

     label3:
        if $r3 != null goto label4;

        r0.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode first> = $r2;

        $r2.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: com.mycila.inject.internal.asm.tree.AbstractInsnNode prev> = null;

        goto label5;

     label4:
        $r3.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: com.mycila.inject.internal.asm.tree.AbstractInsnNode next> = $r2;

        $r2.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: com.mycila.inject.internal.asm.tree.AbstractInsnNode prev> = $r3;

     label5:
        r0.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode[] cache> = null;

        $i3 = (int) -1;

        r1.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: int index> = $i3;

        r1.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: com.mycila.inject.internal.asm.tree.AbstractInsnNode prev> = null;

        r1.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: com.mycila.inject.internal.asm.tree.AbstractInsnNode next> = null;

        return;
    }

    private void removeAll(boolean)
    {
        com.mycila.inject.internal.asm.tree.AbstractInsnNode r1, r2;
        int $i1;
        com.mycila.inject.internal.asm.tree.InsnList r0;
        boolean z0;

        r0 := @this: com.mycila.inject.internal.asm.tree.InsnList;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label2;

        r2 = r0.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode first>;

     label1:
        if r2 == null goto label2;

        r1 = r2.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: com.mycila.inject.internal.asm.tree.AbstractInsnNode next>;

        $i1 = (int) -1;

        r2.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: int index> = $i1;

        r2.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: com.mycila.inject.internal.asm.tree.AbstractInsnNode prev> = null;

        r2.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: com.mycila.inject.internal.asm.tree.AbstractInsnNode next> = null;

        r2 = r1;

        goto label1;

     label2:
        r0.<com.mycila.inject.internal.asm.tree.InsnList: int size> = 0;

        r0.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode first> = null;

        r0.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode last> = null;

        r0.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode[] cache> = null;

        return;
    }

    public void clear()
    {
        com.mycila.inject.internal.asm.tree.InsnList r0;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.asm.tree.InsnList;

        $z0 = <com.mycila.inject.internal.asm.tree.InsnList: boolean check>;

        specialinvoke r0.<com.mycila.inject.internal.asm.tree.InsnList: void removeAll(boolean)>($z0);

        return;
    }

    public void resetLabels()
    {
        com.mycila.inject.internal.asm.tree.AbstractInsnNode r2;
        com.mycila.inject.internal.asm.tree.LabelNode $r1;
        com.mycila.inject.internal.asm.tree.InsnList r0;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.asm.tree.InsnList;

        r2 = r0.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode first>;

     label1:
        if r2 == null goto label3;

        $z0 = r2 instanceof com.mycila.inject.internal.asm.tree.LabelNode;

        if $z0 == 0 goto label2;

        $r1 = (com.mycila.inject.internal.asm.tree.LabelNode) r2;

        virtualinvoke $r1.<com.mycila.inject.internal.asm.tree.LabelNode: void resetLabel()>();

     label2:
        r2 = r2.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: com.mycila.inject.internal.asm.tree.AbstractInsnNode next>;

        goto label1;

     label3:
        return;
    }
}
