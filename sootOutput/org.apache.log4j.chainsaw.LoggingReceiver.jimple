class org.apache.log4j.chainsaw.LoggingReceiver extends java.lang.Thread
{
    private static final org.apache.log4j.Logger LOG;
    private org.apache.log4j.chainsaw.MyTableModel mModel;
    private java.net.ServerSocket mSvrSock;
    static java.lang.Class class$org$apache$log4j$chainsaw$LoggingReceiver;

    void <init>(org.apache.log4j.chainsaw.MyTableModel, int) throws java.io.IOException
    {
        java.net.ServerSocket $r2;
        org.apache.log4j.chainsaw.LoggingReceiver r0;
        org.apache.log4j.chainsaw.MyTableModel r1;
        int i0;

        r0 := @this: org.apache.log4j.chainsaw.LoggingReceiver;

        r1 := @parameter0: org.apache.log4j.chainsaw.MyTableModel;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Thread: void <init>()>();

        virtualinvoke r0.<java.lang.Thread: void setDaemon(boolean)>(1);

        r0.<org.apache.log4j.chainsaw.LoggingReceiver: org.apache.log4j.chainsaw.MyTableModel mModel> = r1;

        $r2 = new java.net.ServerSocket;

        specialinvoke $r2.<java.net.ServerSocket: void <init>(int)>(i0);

        r0.<org.apache.log4j.chainsaw.LoggingReceiver: java.net.ServerSocket mSvrSock> = $r2;

        return;
    }

    public void run()
    {
        java.net.Socket $r4;
        org.apache.log4j.chainsaw.LoggingReceiver$Slurper $r13;
        java.net.ServerSocket $r3;
        java.net.InetAddress $r8;
        org.apache.log4j.Logger $r0, $r1, $r6, $r15;
        org.apache.log4j.chainsaw.LoggingReceiver r2;
        java.lang.StringBuffer $r5, $r7, $r10;
        java.lang.Thread $r12;
        java.lang.String $r9, $r11;
        java.io.IOException $r14;

        r2 := @this: org.apache.log4j.chainsaw.LoggingReceiver;

        $r0 = <org.apache.log4j.chainsaw.LoggingReceiver: org.apache.log4j.Logger LOG>;

        virtualinvoke $r0.<org.apache.log4j.Category: void info(java.lang.Object)>("Thread started");

     label1:
        $r1 = <org.apache.log4j.chainsaw.LoggingReceiver: org.apache.log4j.Logger LOG>;

        virtualinvoke $r1.<org.apache.log4j.Category: void debug(java.lang.Object)>("Waiting for a connection");

        $r3 = r2.<org.apache.log4j.chainsaw.LoggingReceiver: java.net.ServerSocket mSvrSock>;

        $r4 = virtualinvoke $r3.<java.net.ServerSocket: java.net.Socket accept()>();

        $r6 = <org.apache.log4j.chainsaw.LoggingReceiver: org.apache.log4j.Logger LOG>;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Got a connection from ");

        $r8 = virtualinvoke $r4.<java.net.Socket: java.net.InetAddress getInetAddress()>();

        $r9 = virtualinvoke $r8.<java.net.InetAddress: java.lang.String getHostName()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r6.<org.apache.log4j.Category: void debug(java.lang.Object)>($r11);

        $r12 = new java.lang.Thread;

        $r13 = new org.apache.log4j.chainsaw.LoggingReceiver$Slurper;

        specialinvoke $r13.<org.apache.log4j.chainsaw.LoggingReceiver$Slurper: void <init>(org.apache.log4j.chainsaw.LoggingReceiver,java.net.Socket)>(r2, $r4);

        specialinvoke $r12.<java.lang.Thread: void <init>(java.lang.Runnable)>($r13);

        virtualinvoke $r12.<java.lang.Thread: void setDaemon(boolean)>(1);

        virtualinvoke $r12.<java.lang.Thread: void start()>();

        goto label1;

     label2:
        $r14 := @caughtexception;

        $r15 = <org.apache.log4j.chainsaw.LoggingReceiver: org.apache.log4j.Logger LOG>;

        virtualinvoke $r15.<org.apache.log4j.Category: void error(java.lang.Object,java.lang.Throwable)>("Error in accepting connections, stopping.", $r14);

        return;

        catch java.io.IOException from label1 to label2 with label2;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static org.apache.log4j.Logger access$000()
    {
        org.apache.log4j.Logger $r0;

        $r0 = <org.apache.log4j.chainsaw.LoggingReceiver: org.apache.log4j.Logger LOG>;

        return $r0;
    }

    static org.apache.log4j.chainsaw.MyTableModel access$100(org.apache.log4j.chainsaw.LoggingReceiver)
    {
        org.apache.log4j.chainsaw.LoggingReceiver r0;
        org.apache.log4j.chainsaw.MyTableModel $r1;

        r0 := @parameter0: org.apache.log4j.chainsaw.LoggingReceiver;

        $r1 = r0.<org.apache.log4j.chainsaw.LoggingReceiver: org.apache.log4j.chainsaw.MyTableModel mModel>;

        return $r1;
    }

    static void <clinit>()
    {
        org.apache.log4j.Logger $r1;
        java.lang.Class $r0, $r2;

        $r0 = <org.apache.log4j.chainsaw.LoggingReceiver: java.lang.Class class$org$apache$log4j$chainsaw$LoggingReceiver>;

        if $r0 != null goto label1;

        $r2 = staticinvoke <org.apache.log4j.chainsaw.LoggingReceiver: java.lang.Class class$(java.lang.String)>("org.apache.log4j.chainsaw.LoggingReceiver");

        <org.apache.log4j.chainsaw.LoggingReceiver: java.lang.Class class$org$apache$log4j$chainsaw$LoggingReceiver> = $r2;

        goto label2;

     label1:
        $r2 = <org.apache.log4j.chainsaw.LoggingReceiver: java.lang.Class class$org$apache$log4j$chainsaw$LoggingReceiver>;

     label2:
        $r1 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getLogger(java.lang.Class)>($r2);

        <org.apache.log4j.chainsaw.LoggingReceiver: org.apache.log4j.Logger LOG> = $r1;

        return;
    }
}
