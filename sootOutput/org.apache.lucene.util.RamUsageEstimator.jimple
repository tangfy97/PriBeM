public final class org.apache.lucene.util.RamUsageEstimator extends java.lang.Object
{
    public static final java.lang.String JVM_INFO_STRING;
    public static final long ONE_KB;
    public static final long ONE_MB;
    public static final long ONE_GB;
    public static final int NUM_BYTES_BOOLEAN;
    public static final int NUM_BYTES_BYTE;
    public static final int NUM_BYTES_CHAR;
    public static final int NUM_BYTES_SHORT;
    public static final int NUM_BYTES_INT;
    public static final int NUM_BYTES_FLOAT;
    public static final int NUM_BYTES_LONG;
    public static final int NUM_BYTES_DOUBLE;
    public static final int NUM_BYTES_OBJECT_REF;
    public static final int NUM_BYTES_OBJECT_HEADER;
    public static final int NUM_BYTES_ARRAY_HEADER;
    public static final int NUM_BYTES_OBJECT_ALIGNMENT;
    private static final java.util.Map primitiveSizes;
    private static final java.lang.Object theUnsafe;
    private static final java.lang.reflect.Method objectFieldOffsetMethod;
    private static final java.util.EnumSet supportedFeatures;

    private void <init>()
    {
        org.apache.lucene.util.RamUsageEstimator r0;

        r0 := @this: org.apache.lucene.util.RamUsageEstimator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean isSupportedJVM()
    {
        org.apache.lucene.util.RamUsageEstimator$JvmFeature[] $r1;
        int $i0, $i1;
        java.util.EnumSet $r0;
        boolean $z0;

        $r0 = <org.apache.lucene.util.RamUsageEstimator: java.util.EnumSet supportedFeatures>;

        $i0 = virtualinvoke $r0.<java.util.EnumSet: int size()>();

        $r1 = staticinvoke <org.apache.lucene.util.RamUsageEstimator$JvmFeature: org.apache.lucene.util.RamUsageEstimator$JvmFeature[] values()>();

        $i1 = lengthof $r1;

        if $i0 != $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static long alignObjectSize(long)
    {
        long $l1, $l2, $l4, $l5, $l6, l7, l8;
        int $i0, $i3;

        l7 := @parameter0: long;

        $i0 = <org.apache.lucene.util.RamUsageEstimator: int NUM_BYTES_OBJECT_ALIGNMENT>;

        $l1 = (long) $i0;

        $l2 = $l1 - 1L;

        l8 = l7 + $l2;

        $i3 = <org.apache.lucene.util.RamUsageEstimator: int NUM_BYTES_OBJECT_ALIGNMENT>;

        $l4 = (long) $i3;

        $l5 = l8 % $l4;

        $l6 = l8 - $l5;

        return $l6;
    }

    public static long sizeOf(byte[])
    {
        byte[] r0;
        int $i0, $i1;
        long $l2, $l3, $l4, $l5;

        r0 := @parameter0: byte[];

        $i0 = <org.apache.lucene.util.RamUsageEstimator: int NUM_BYTES_ARRAY_HEADER>;

        $l3 = (long) $i0;

        $i1 = lengthof r0;

        $l2 = (long) $i1;

        $l4 = $l3 + $l2;

        $l5 = staticinvoke <org.apache.lucene.util.RamUsageEstimator: long alignObjectSize(long)>($l4);

        return $l5;
    }

    public static long sizeOf(boolean[])
    {
        int $i0, $i1;
        boolean[] r0;
        long $l2, $l3, $l4, $l5;

        r0 := @parameter0: boolean[];

        $i0 = <org.apache.lucene.util.RamUsageEstimator: int NUM_BYTES_ARRAY_HEADER>;

        $l3 = (long) $i0;

        $i1 = lengthof r0;

        $l2 = (long) $i1;

        $l4 = $l3 + $l2;

        $l5 = staticinvoke <org.apache.lucene.util.RamUsageEstimator: long alignObjectSize(long)>($l4);

        return $l5;
    }

    public static long sizeOf(char[])
    {
        long $l2, $l3, $l4, $l5, $l6;
        int $i0, $i1;
        char[] r0;

        r0 := @parameter0: char[];

        $i0 = <org.apache.lucene.util.RamUsageEstimator: int NUM_BYTES_ARRAY_HEADER>;

        $l4 = (long) $i0;

        $i1 = lengthof r0;

        $l2 = (long) $i1;

        $l3 = 2L * $l2;

        $l5 = $l4 + $l3;

        $l6 = staticinvoke <org.apache.lucene.util.RamUsageEstimator: long alignObjectSize(long)>($l5);

        return $l6;
    }

    public static long sizeOf(short[])
    {
        long $l2, $l3, $l4, $l5, $l6;
        int $i0, $i1;
        short[] r0;

        r0 := @parameter0: short[];

        $i0 = <org.apache.lucene.util.RamUsageEstimator: int NUM_BYTES_ARRAY_HEADER>;

        $l4 = (long) $i0;

        $i1 = lengthof r0;

        $l2 = (long) $i1;

        $l3 = 2L * $l2;

        $l5 = $l4 + $l3;

        $l6 = staticinvoke <org.apache.lucene.util.RamUsageEstimator: long alignObjectSize(long)>($l5);

        return $l6;
    }

    public static long sizeOf(int[])
    {
        long $l2, $l3, $l4, $l5, $l6;
        int[] r0;
        int $i0, $i1;

        r0 := @parameter0: int[];

        $i0 = <org.apache.lucene.util.RamUsageEstimator: int NUM_BYTES_ARRAY_HEADER>;

        $l4 = (long) $i0;

        $i1 = lengthof r0;

        $l2 = (long) $i1;

        $l3 = 4L * $l2;

        $l5 = $l4 + $l3;

        $l6 = staticinvoke <org.apache.lucene.util.RamUsageEstimator: long alignObjectSize(long)>($l5);

        return $l6;
    }

    public static long sizeOf(float[])
    {
        float[] r0;
        long $l2, $l3, $l4, $l5, $l6;
        int $i0, $i1;

        r0 := @parameter0: float[];

        $i0 = <org.apache.lucene.util.RamUsageEstimator: int NUM_BYTES_ARRAY_HEADER>;

        $l4 = (long) $i0;

        $i1 = lengthof r0;

        $l2 = (long) $i1;

        $l3 = 4L * $l2;

        $l5 = $l4 + $l3;

        $l6 = staticinvoke <org.apache.lucene.util.RamUsageEstimator: long alignObjectSize(long)>($l5);

        return $l6;
    }

    public static long sizeOf(long[])
    {
        long $l2, $l3, $l4, $l5, $l6;
        long[] r0;
        int $i0, $i1;

        r0 := @parameter0: long[];

        $i0 = <org.apache.lucene.util.RamUsageEstimator: int NUM_BYTES_ARRAY_HEADER>;

        $l4 = (long) $i0;

        $i1 = lengthof r0;

        $l2 = (long) $i1;

        $l3 = 8L * $l2;

        $l5 = $l4 + $l3;

        $l6 = staticinvoke <org.apache.lucene.util.RamUsageEstimator: long alignObjectSize(long)>($l5);

        return $l6;
    }

    public static long sizeOf(double[])
    {
        double[] r0;
        long $l2, $l3, $l4, $l5, $l6;
        int $i0, $i1;

        r0 := @parameter0: double[];

        $i0 = <org.apache.lucene.util.RamUsageEstimator: int NUM_BYTES_ARRAY_HEADER>;

        $l4 = (long) $i0;

        $i1 = lengthof r0;

        $l2 = (long) $i1;

        $l3 = 8L * $l2;

        $l5 = $l4 + $l3;

        $l6 = staticinvoke <org.apache.lucene.util.RamUsageEstimator: long alignObjectSize(long)>($l5);

        return $l6;
    }

    public static long sizeOf(java.lang.Object)
    {
        java.lang.Object r0;
        long $l0;

        r0 := @parameter0: java.lang.Object;

        $l0 = staticinvoke <org.apache.lucene.util.RamUsageEstimator: long measureObjectSize(java.lang.Object)>(r0);

        return $l0;
    }

    public static long shallowSizeOf(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.Class $r1;
        long $l0, $l1;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        return 0L;

     label1:
        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label2;

        $l1 = staticinvoke <org.apache.lucene.util.RamUsageEstimator: long shallowSizeOfArray(java.lang.Object)>(r0);

        return $l1;

     label2:
        $l0 = staticinvoke <org.apache.lucene.util.RamUsageEstimator: long shallowSizeOfInstance(java.lang.Class)>($r1);

        return $l0;
    }

    public static long shallowSizeOfInstance(java.lang.Class)
    {
        long $l1, $l5, l6;
        java.lang.Integer $r4;
        java.util.Map $r2;
        int $i0, i2, $i3, $i4, i7;
        boolean $z0, $z1, $z2;
        java.lang.reflect.Field r1;
        java.lang.IllegalArgumentException $r5;
        java.lang.reflect.Field[] $r0;
        java.lang.Object $r3;
        java.lang.Class r6;

        r6 := @parameter0: java.lang.Class;

        $z0 = virtualinvoke r6.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("This method does not work with array classes.");

        throw $r5;

     label1:
        $z1 = virtualinvoke r6.<java.lang.Class: boolean isPrimitive()>();

        if $z1 == 0 goto label2;

        $r2 = <org.apache.lucene.util.RamUsageEstimator: java.util.Map primitiveSizes>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r6);

        $r4 = (java.lang.Integer) $r3;

        $i4 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        $l5 = (long) $i4;

        return $l5;

     label2:
        $i0 = <org.apache.lucene.util.RamUsageEstimator: int NUM_BYTES_OBJECT_HEADER>;

        l6 = (long) $i0;

     label3:
        if r6 == null goto label7;

        $r0 = virtualinvoke r6.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        i2 = lengthof $r0;

        i7 = 0;

     label4:
        if i7 >= i2 goto label6;

        r1 = $r0[i7];

        $i3 = virtualinvoke r1.<java.lang.reflect.Field: int getModifiers()>();

        $z2 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i3);

        if $z2 != 0 goto label5;

        l6 = staticinvoke <org.apache.lucene.util.RamUsageEstimator: long adjustForField(long,java.lang.reflect.Field)>(l6, r1);

     label5:
        i7 = i7 + 1;

        goto label4;

     label6:
        r6 = virtualinvoke r6.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label3;

     label7:
        $l1 = staticinvoke <org.apache.lucene.util.RamUsageEstimator: long alignObjectSize(long)>(l6);

        return $l1;
    }

    private static long shallowSizeOfArray(java.lang.Object)
    {
        long $l3, $l4, $l5, $l6, $l8, $l9, l10, $l11;
        java.lang.Integer $r5;
        java.util.Map $r3;
        int $i0, $i1, $i2, $i7;
        boolean $z0;
        java.lang.Object r0, $r4;
        java.lang.Class $r1, $r2;

        r0 := @parameter0: java.lang.Object;

        $i0 = <org.apache.lucene.util.RamUsageEstimator: int NUM_BYTES_ARRAY_HEADER>;

        l10 = (long) $i0;

        $i1 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(r0);

        if $i1 <= 0 goto label2;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.Class getComponentType()>();

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isPrimitive()>();

        if $z0 == 0 goto label1;

        $l6 = (long) $i1;

        $r3 = <org.apache.lucene.util.RamUsageEstimator: java.util.Map primitiveSizes>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        $r5 = (java.lang.Integer) $r4;

        $i7 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        $l8 = (long) $i7;

        $l9 = $l6 * $l8;

        l10 = l10 + $l9;

        goto label2;

     label1:
        $i2 = <org.apache.lucene.util.RamUsageEstimator: int NUM_BYTES_OBJECT_REF>;

        $l4 = (long) $i2;

        $l3 = (long) $i1;

        $l5 = $l4 * $l3;

        l10 = l10 + $l5;

     label2:
        $l11 = staticinvoke <org.apache.lucene.util.RamUsageEstimator: long alignObjectSize(long)>(l10);

        return $l11;
    }

    private static long measureObjectSize(java.lang.Object)
    {
        java.lang.Integer $r14;
        org.apache.lucene.util.RamUsageEstimator$IdentityHashSet $r19;
        java.util.Map $r12;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.IllegalAccessException $r15;
        java.util.IdentityHashMap $r20;
        long $l2, $l7, $l8, $l9, $l10, $l12, $l13, l14, l15, $l17;
        java.util.ArrayList $r21;
        int $i0, $i1, $i3, $i4, $i5, $i6, $i11, i16, i18, $i20;
        java.lang.RuntimeException $r22;
        java.lang.reflect.Field r18;
        java.lang.reflect.Field[] $r9;
        org.apache.lucene.util.RamUsageEstimator$ClassCache $r8, r17;
        java.lang.Object r3, $r4, $r6, $r7, $r11, $r13;
        java.lang.Class $r5, $r10;

        r3 := @parameter0: java.lang.Object;

        $r19 = new org.apache.lucene.util.RamUsageEstimator$IdentityHashSet;

        specialinvoke $r19.<org.apache.lucene.util.RamUsageEstimator$IdentityHashSet: void <init>()>();

        $r20 = new java.util.IdentityHashMap;

        specialinvoke $r20.<java.util.IdentityHashMap: void <init>()>();

        $r21 = new java.util.ArrayList;

        specialinvoke $r21.<java.util.ArrayList: void <init>()>();

        virtualinvoke $r21.<java.util.ArrayList: boolean add(java.lang.Object)>(r3);

        l14 = 0L;

     label01:
        $z5 = virtualinvoke $r21.<java.util.ArrayList: boolean isEmpty()>();

        if $z5 != 0 goto label15;

        $i0 = virtualinvoke $r21.<java.util.ArrayList: int size()>();

        $i1 = $i0 - 1;

        $r4 = virtualinvoke $r21.<java.util.ArrayList: java.lang.Object remove(int)>($i1);

        if $r4 == null goto label01;

        $z0 = virtualinvoke $r19.<org.apache.lucene.util.RamUsageEstimator$IdentityHashSet: boolean contains(java.lang.Object)>($r4);

        if $z0 == 0 goto label02;

        goto label01;

     label02:
        virtualinvoke $r19.<org.apache.lucene.util.RamUsageEstimator$IdentityHashSet: boolean add(java.lang.Object)>($r4);

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();

        $z1 = virtualinvoke $r5.<java.lang.Class: boolean isArray()>();

        if $z1 == 0 goto label07;

        $i4 = <org.apache.lucene.util.RamUsageEstimator: int NUM_BYTES_ARRAY_HEADER>;

        l15 = (long) $i4;

        $i5 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>($r4);

        if $i5 <= 0 goto label06;

        $r10 = virtualinvoke $r5.<java.lang.Class: java.lang.Class getComponentType()>();

        $z3 = virtualinvoke $r10.<java.lang.Class: boolean isPrimitive()>();

        if $z3 == 0 goto label03;

        $l10 = (long) $i5;

        $r12 = <org.apache.lucene.util.RamUsageEstimator: java.util.Map primitiveSizes>;

        $r13 = interfaceinvoke $r12.<java.util.Map: java.lang.Object get(java.lang.Object)>($r10);

        $r14 = (java.lang.Integer) $r13;

        $i11 = virtualinvoke $r14.<java.lang.Integer: int intValue()>();

        $l12 = (long) $i11;

        $l13 = $l10 * $l12;

        l15 = l15 + $l13;

        goto label06;

     label03:
        $i6 = <org.apache.lucene.util.RamUsageEstimator: int NUM_BYTES_OBJECT_REF>;

        $l8 = (long) $i6;

        $l7 = (long) $i5;

        $l9 = $l8 * $l7;

        l15 = l15 + $l9;

        i16 = $i5;

     label04:
        $i20 = (int) -1;

        i16 = i16 + $i20;

        if i16 < 0 goto label06;

        $r11 = staticinvoke <java.lang.reflect.Array: java.lang.Object get(java.lang.Object,int)>($r4, i16);

        if $r11 == null goto label05;

        $z4 = virtualinvoke $r19.<org.apache.lucene.util.RamUsageEstimator$IdentityHashSet: boolean contains(java.lang.Object)>($r11);

        if $z4 != 0 goto label05;

        virtualinvoke $r21.<java.util.ArrayList: boolean add(java.lang.Object)>($r11);

     label05:
        goto label04;

     label06:
        $l17 = staticinvoke <org.apache.lucene.util.RamUsageEstimator: long alignObjectSize(long)>(l15);

        l14 = l14 + $l17;

        goto label14;

     label07:
        $r6 = virtualinvoke $r20.<java.util.IdentityHashMap: java.lang.Object get(java.lang.Object)>($r5);

        r17 = (org.apache.lucene.util.RamUsageEstimator$ClassCache) $r6;

        if r17 != null goto label08;

        $r8 = staticinvoke <org.apache.lucene.util.RamUsageEstimator: org.apache.lucene.util.RamUsageEstimator$ClassCache createCacheEntry(java.lang.Class)>($r5);

        r17 = $r8;

        virtualinvoke $r20.<java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r8);

     label08:
        $r9 = r17.<org.apache.lucene.util.RamUsageEstimator$ClassCache: java.lang.reflect.Field[] referenceFields>;

        $i3 = lengthof $r9;

        i18 = 0;

     label09:
        if i18 >= $i3 goto label11;

        r18 = $r9[i18];

        $r7 = virtualinvoke r18.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>($r4);

        if $r7 == null goto label10;

        $z2 = virtualinvoke $r19.<org.apache.lucene.util.RamUsageEstimator$IdentityHashSet: boolean contains(java.lang.Object)>($r7);

        if $z2 != 0 goto label10;

        virtualinvoke $r21.<java.util.ArrayList: boolean add(java.lang.Object)>($r7);

     label10:
        i18 = i18 + 1;

        goto label09;

     label11:
        $l2 = r17.<org.apache.lucene.util.RamUsageEstimator$ClassCache: long alignedShallowInstanceSize>;

        l14 = l14 + $l2;

     label12:
        goto label14;

     label13:
        $r15 := @caughtexception;

        $r22 = new java.lang.RuntimeException;

        specialinvoke $r22.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Reflective field access failed?", $r15);

        throw $r22;

     label14:
        goto label01;

     label15:
        virtualinvoke $r19.<org.apache.lucene.util.RamUsageEstimator$IdentityHashSet: void clear()>();

        virtualinvoke $r21.<java.util.ArrayList: void clear()>();

        virtualinvoke $r20.<java.util.IdentityHashMap: void clear()>();

        return l14;

        catch java.lang.IllegalAccessException from label07 to label12 with label13;
    }

    private static org.apache.lucene.util.RamUsageEstimator$ClassCache createCacheEntry(java.lang.Class)
    {
        java.lang.Object[] $r4;
        long $l1, l5;
        java.util.ArrayList $r0;
        int $i0, $i2, i3, $i4, i6;
        boolean $z0, $z1;
        java.lang.reflect.Field r7;
        java.lang.reflect.Field[] $r3, $r5, $r6;
        org.apache.lucene.util.RamUsageEstimator$ClassCache $r2;
        java.lang.Class r1, $r8, r9;

        r1 := @parameter0: java.lang.Class;

        $i0 = <org.apache.lucene.util.RamUsageEstimator: int NUM_BYTES_OBJECT_HEADER>;

        l5 = (long) $i0;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>(32);

        r9 = r1;

     label1:
        if r9 == null goto label5;

        $r6 = virtualinvoke r9.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        i3 = lengthof $r6;

        i6 = 0;

     label2:
        if i6 >= i3 goto label4;

        r7 = $r6[i6];

        $i4 = virtualinvoke r7.<java.lang.reflect.Field: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i4);

        if $z0 != 0 goto label3;

        l5 = staticinvoke <org.apache.lucene.util.RamUsageEstimator: long adjustForField(long,java.lang.reflect.Field)>(l5, r7);

        $r8 = virtualinvoke r7.<java.lang.reflect.Field: java.lang.Class getType()>();

        $z1 = virtualinvoke $r8.<java.lang.Class: boolean isPrimitive()>();

        if $z1 != 0 goto label3;

        virtualinvoke r7.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        virtualinvoke $r0.<java.util.ArrayList: boolean add(java.lang.Object)>(r7);

     label3:
        i6 = i6 + 1;

        goto label2;

     label4:
        r9 = virtualinvoke r9.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label1;

     label5:
        $r2 = new org.apache.lucene.util.RamUsageEstimator$ClassCache;

        $l1 = staticinvoke <org.apache.lucene.util.RamUsageEstimator: long alignObjectSize(long)>(l5);

        $i2 = virtualinvoke $r0.<java.util.ArrayList: int size()>();

        $r3 = newarray (java.lang.reflect.Field)[$i2];

        $r4 = virtualinvoke $r0.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (java.lang.reflect.Field[]) $r4;

        specialinvoke $r2.<org.apache.lucene.util.RamUsageEstimator$ClassCache: void <init>(long,java.lang.reflect.Field[])>($l1, $r5);

        return $r2;
    }

    private static long adjustForField(long, java.lang.reflect.Field)
    {
        java.lang.Integer $r10;
        java.util.Map $r8;
        java.lang.reflect.Method $r2, $r5;
        boolean $z0, $z1, $z2;
        java.lang.IllegalAccessException $r25;
        java.lang.reflect.InvocationTargetException $r11;
        java.lang.StringBuilder $r14, $r15, $r18, $r19, $r21;
        java.lang.Throwable $r12;
        java.lang.Object[] $r3;
        java.lang.Error $r23;
        long l0, $l1, $l2, $l3, $l4, $l5, l7;
        int $i6;
        java.lang.String $r17, $r20, $r22;
        java.lang.Number $r7;
        java.lang.RuntimeException $r13, $r24, $r26;
        java.lang.reflect.Field r0;
        java.lang.Class $r1, $r16;
        java.lang.Object $r4, $r6, $r9;

        l0 := @parameter0: long;

        r0 := @parameter1: java.lang.reflect.Field;

        $r1 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.Class getType()>();

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isPrimitive()>();

        if $z0 == 0 goto label1;

        $r8 = <org.apache.lucene.util.RamUsageEstimator: java.util.Map primitiveSizes>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r10 = (java.lang.Integer) $r9;

        $i6 = virtualinvoke $r10.<java.lang.Integer: int intValue()>();

        goto label2;

     label1:
        $i6 = <org.apache.lucene.util.RamUsageEstimator: int NUM_BYTES_OBJECT_REF>;

     label2:
        $r2 = <org.apache.lucene.util.RamUsageEstimator: java.lang.reflect.Method objectFieldOffsetMethod>;

        if $r2 == null goto label9;

     label3:
        $r5 = <org.apache.lucene.util.RamUsageEstimator: java.lang.reflect.Method objectFieldOffsetMethod>;

        $r4 = <org.apache.lucene.util.RamUsageEstimator: java.lang.Object theUnsafe>;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = r0;

        $r6 = virtualinvoke $r5.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r4, $r3);

        $r7 = (java.lang.Number) $r6;

        $l3 = virtualinvoke $r7.<java.lang.Number: long longValue()>();

        $l4 = (long) $i6;

        l7 = $l3 + $l4;

        $l5 = staticinvoke <java.lang.Math: long max(long,long)>(l0, l7);

     label4:
        return $l5;

     label5:
        $r25 := @caughtexception;

        $r26 = new java.lang.RuntimeException;

        specialinvoke $r26.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Access problem with sun.misc.Unsafe", $r25);

        throw $r26;

     label6:
        $r11 := @caughtexception;

        $r12 = virtualinvoke $r11.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();

        $z1 = $r12 instanceof java.lang.RuntimeException;

        if $z1 == 0 goto label7;

        $r24 = (java.lang.RuntimeException) $r12;

        throw $r24;

     label7:
        $z2 = $r12 instanceof java.lang.Error;

        if $z2 == 0 goto label8;

        $r23 = (java.lang.Error) $r12;

        throw $r23;

     label8:
        $r13 = new java.lang.RuntimeException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Call to Unsafe\'s objectFieldOffset() throwed checked Exception when accessing field ");

        $r16 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.Class getDeclaringClass()>();

        $r17 = virtualinvoke $r16.<java.lang.Class: java.lang.String getName()>();

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("#");

        $r20 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.String getName()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r22, $r12);

        throw $r13;

     label9:
        $l1 = (long) $i6;

        $l2 = l0 + $l1;

        return $l2;

        catch java.lang.IllegalAccessException from label3 to label4 with label5;
        catch java.lang.reflect.InvocationTargetException from label3 to label4 with label6;
    }

    public static java.util.EnumSet getUnsupportedFeatures()
    {
        java.util.EnumSet $r0, $r1;

        $r0 = staticinvoke <java.util.EnumSet: java.util.EnumSet allOf(java.lang.Class)>(class "Lorg/apache/lucene/util/RamUsageEstimator$JvmFeature;");

        $r1 = <org.apache.lucene.util.RamUsageEstimator: java.util.EnumSet supportedFeatures>;

        virtualinvoke $r0.<java.util.EnumSet: boolean removeAll(java.util.Collection)>($r1);

        return $r0;
    }

    public static java.util.EnumSet getSupportedFeatures()
    {
        java.util.EnumSet $r0, $r1;

        $r0 = <org.apache.lucene.util.RamUsageEstimator: java.util.EnumSet supportedFeatures>;

        $r1 = staticinvoke <java.util.EnumSet: java.util.EnumSet copyOf(java.util.EnumSet)>($r0);

        return $r1;
    }

    public static java.lang.String humanReadableUnits(long)
    {
        java.util.Locale $r1;
        java.text.DecimalFormatSymbols $r2;
        java.text.DecimalFormat $r0;
        long l0;
        java.lang.String $r3;

        l0 := @parameter0: long;

        $r0 = new java.text.DecimalFormat;

        $r1 = <java.util.Locale: java.util.Locale ROOT>;

        $r2 = staticinvoke <java.text.DecimalFormatSymbols: java.text.DecimalFormatSymbols getInstance(java.util.Locale)>($r1);

        specialinvoke $r0.<java.text.DecimalFormat: void <init>(java.lang.String,java.text.DecimalFormatSymbols)>("0.#", $r2);

        $r3 = staticinvoke <org.apache.lucene.util.RamUsageEstimator: java.lang.String humanReadableUnits(long,java.text.DecimalFormat)>(l0, $r0);

        return $r3;
    }

    public static java.lang.String humanReadableUnits(long, java.text.DecimalFormat)
    {
        byte $b2, $b4, $b6;
        float $f0, $f1, $f2, $f3, $f4, $f5;
        java.lang.StringBuilder $r1, $r2, $r7, $r8, $r12, $r13, $r17, $r18, $r20, $r21, $r22, $r23;
        long l0, $l1, $l3, $l5;
        int $i7, $i8, $i9;
        java.lang.String $r3, $r6, $r9, $r11, $r14, $r16, $r19;
        double $d0, $d1, $d2;
        java.text.DecimalFormat r5;

        l0 := @parameter0: long;

        r5 := @parameter1: java.text.DecimalFormat;

        $l1 = l0 / 1073741824L;

        $b2 = $l1 cmp 0L;

        $i7 = (int) $b2;

        if $i7 <= 0 goto label1;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $f4 = (float) l0;

        $f5 = $f4 / 1.07374182E9F;

        $d2 = (double) $f5;

        $r16 = virtualinvoke r5.<java.text.DecimalFormat: java.lang.String format(double)>($d2);

        $r17 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" GB");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r19;

     label1:
        $l3 = l0 / 1048576L;

        $b4 = $l3 cmp 0L;

        $i8 = (int) $b4;

        if $i8 <= 0 goto label2;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $f2 = (float) l0;

        $f3 = $f2 / 1048576.0F;

        $d1 = (double) $f3;

        $r11 = virtualinvoke r5.<java.text.DecimalFormat: java.lang.String format(double)>($d1);

        $r12 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" MB");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r14;

     label2:
        $l5 = l0 / 1024L;

        $b6 = $l5 cmp 0L;

        $i9 = (int) $b6;

        if $i9 <= 0 goto label3;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $f0 = (float) l0;

        $f1 = $f0 / 1024.0F;

        $d0 = (double) $f1;

        $r6 = virtualinvoke r5.<java.text.DecimalFormat: java.lang.String format(double)>($d0);

        $r7 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" KB");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;

     label3:
        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public static java.lang.String humanSizeOf(java.lang.Object)
    {
        java.lang.Object r0;
        long $l0;
        java.lang.String $r1;

        r0 := @parameter0: java.lang.Object;

        $l0 = staticinvoke <org.apache.lucene.util.RamUsageEstimator: long sizeOf(java.lang.Object)>(r0);

        $r1 = staticinvoke <org.apache.lucene.util.RamUsageEstimator: java.lang.String humanReadableUnits(long)>($l0);

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Integer $r3, $r6, $r9, $r12, $r15, $r18, $r21, $r24;
        byte $b5;
        java.util.Map $r1, $r4, $r7, $r10, $r13, $r16, $r19, $r22;
        java.util.EnumSet $r25, $r35, $r57, $r72, $r98;
        java.lang.Exception $r99, $r100, $r101, $r102, $r103;
        java.lang.StringBuilder $r73, $r74, $r76, $r77, $r79, $r80, $r82, $r83, $r85, $r86, $r88, $r89;
        java.lang.Object[] $r30, $r40, $r46, $r52, $r63, $r68, $r93;
        java.lang.String $r70, $r75, $r78, $r81, $r84, $r87, $r90;
        java.lang.Number $r33, $r43, $r49, $r55, $r96;
        java.lang.Class[] $r28, $r36, $r50, $r61, $r66;
        java.lang.reflect.Field $r27, $r39, $r45, $r92;
        java.lang.reflect.Method $r29, $r37, $r51, $r62, $r67, r106;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.IdentityHashMap $r0;
        org.apache.lucene.util.RamUsageEstimator$JvmFeature $r34, $r56, $r71, $r97;
        javax.management.MBeanServer $r59;
        int $i0, $i1, $i2, $i3, $i4, i6, $i7, i8, $i9, i10, i11;
        java.lang.Class $r2, $r5, $r8, $r11, $r14, $r17, $r20, $r23, $r26, $r38, $r44, $r58, $r65, $r91, r104;
        java.lang.Object $r31, $r32, $r41, $r42, $r47, $r48, $r53, $r54, $r60, $r64, $r69, $r94, $r95, r105;

        <org.apache.lucene.util.RamUsageEstimator: int NUM_BYTES_DOUBLE> = 8;

        <org.apache.lucene.util.RamUsageEstimator: int NUM_BYTES_LONG> = 8;

        <org.apache.lucene.util.RamUsageEstimator: int NUM_BYTES_FLOAT> = 4;

        <org.apache.lucene.util.RamUsageEstimator: int NUM_BYTES_INT> = 4;

        <org.apache.lucene.util.RamUsageEstimator: int NUM_BYTES_SHORT> = 2;

        <org.apache.lucene.util.RamUsageEstimator: int NUM_BYTES_CHAR> = 2;

        <org.apache.lucene.util.RamUsageEstimator: int NUM_BYTES_BYTE> = 1;

        <org.apache.lucene.util.RamUsageEstimator: int NUM_BYTES_BOOLEAN> = 1;

        <org.apache.lucene.util.RamUsageEstimator: long ONE_GB> = 1073741824L;

        <org.apache.lucene.util.RamUsageEstimator: long ONE_MB> = 1048576L;

        <org.apache.lucene.util.RamUsageEstimator: long ONE_KB> = 1024L;

        $r0 = new java.util.IdentityHashMap;

        specialinvoke $r0.<java.util.IdentityHashMap: void <init>()>();

        <org.apache.lucene.util.RamUsageEstimator: java.util.Map primitiveSizes> = $r0;

        $r1 = <org.apache.lucene.util.RamUsageEstimator: java.util.Map primitiveSizes>;

        $r2 = <java.lang.Boolean: java.lang.Class TYPE>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r3);

        $r4 = <org.apache.lucene.util.RamUsageEstimator: java.util.Map primitiveSizes>;

        $r5 = <java.lang.Byte: java.lang.Class TYPE>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r6);

        $r7 = <org.apache.lucene.util.RamUsageEstimator: java.util.Map primitiveSizes>;

        $r8 = <java.lang.Character: java.lang.Class TYPE>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r9);

        $r10 = <org.apache.lucene.util.RamUsageEstimator: java.util.Map primitiveSizes>;

        $r11 = <java.lang.Short: java.lang.Class TYPE>;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, $r12);

        $r13 = <org.apache.lucene.util.RamUsageEstimator: java.util.Map primitiveSizes>;

        $r14 = <java.lang.Integer: java.lang.Class TYPE>;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, $r15);

        $r16 = <org.apache.lucene.util.RamUsageEstimator: java.util.Map primitiveSizes>;

        $r17 = <java.lang.Float: java.lang.Class TYPE>;

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        interfaceinvoke $r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r17, $r18);

        $r19 = <org.apache.lucene.util.RamUsageEstimator: java.util.Map primitiveSizes>;

        $r20 = <java.lang.Double: java.lang.Class TYPE>;

        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(8);

        interfaceinvoke $r19.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r20, $r21);

        $r22 = <org.apache.lucene.util.RamUsageEstimator: java.util.Map primitiveSizes>;

        $r23 = <java.lang.Long: java.lang.Class TYPE>;

        $r24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(8);

        interfaceinvoke $r22.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r23, $r24);

        $z0 = <org.apache.lucene.util.Constants: boolean JRE_IS_64BIT>;

        if $z0 == 0 goto label01;

        $b5 = 8;

        goto label02;

     label01:
        $b5 = 4;

     label02:
        i6 = $b5;

        $z1 = <org.apache.lucene.util.Constants: boolean JRE_IS_64BIT>;

        if $z1 == 0 goto label03;

        goto label03;

     label03:
        $z2 = <org.apache.lucene.util.Constants: boolean JRE_IS_64BIT>;

        if $z2 == 0 goto label04;

        goto label04;

     label04:
        $r25 = staticinvoke <java.util.EnumSet: java.util.EnumSet noneOf(java.lang.Class)>(class "Lorg/apache/lucene/util/RamUsageEstimator$JvmFeature;");

        <org.apache.lucene.util.RamUsageEstimator: java.util.EnumSet supportedFeatures> = $r25;

        r104 = null;

        r105 = null;

     label05:
        $r26 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("sun.misc.Unsafe");

        r104 = $r26;

        $r27 = virtualinvoke $r26.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("theUnsafe");

        virtualinvoke $r27.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        r105 = virtualinvoke $r27.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(null);

     label06:
        goto label08;

     label07:
        $r103 := @caughtexception;

     label08:
        <org.apache.lucene.util.RamUsageEstimator: java.lang.Object theUnsafe> = r105;

     label09:
        $r28 = newarray (java.lang.Class)[1];

        $r28[0] = class "Ljava/lang/Class;";

        $r29 = virtualinvoke r104.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("arrayIndexScale", $r28);

        $r31 = <org.apache.lucene.util.RamUsageEstimator: java.lang.Object theUnsafe>;

        $r30 = newarray (java.lang.Object)[1];

        $r30[0] = class "[Ljava/lang/Object;";

        $r32 = virtualinvoke $r29.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r31, $r30);

        $r33 = (java.lang.Number) $r32;

        i6 = virtualinvoke $r33.<java.lang.Number: int intValue()>();

        $r35 = <org.apache.lucene.util.RamUsageEstimator: java.util.EnumSet supportedFeatures>;

        $r34 = <org.apache.lucene.util.RamUsageEstimator$JvmFeature: org.apache.lucene.util.RamUsageEstimator$JvmFeature OBJECT_REFERENCE_SIZE>;

        virtualinvoke $r35.<java.util.EnumSet: boolean add(java.lang.Object)>($r34);

     label10:
        goto label12;

     label11:
        $r102 := @caughtexception;

     label12:
        $z3 = <org.apache.lucene.util.Constants: boolean JRE_IS_64BIT>;

        if $z3 == 0 goto label13;

        $i7 = 8 + i6;

        goto label14;

     label13:
        $i7 = 8;

     label14:
        i8 = $i7;

        $z4 = <org.apache.lucene.util.Constants: boolean JRE_IS_64BIT>;

        if $z4 == 0 goto label15;

        $i4 = 2 * i6;

        $i9 = 8 + $i4;

        goto label16;

     label15:
        $i9 = 12;

     label16:
        i10 = $i9;

        r106 = null;

     label17:
        $r36 = newarray (java.lang.Class)[1];

        $r36[0] = class "Ljava/lang/reflect/Field;";

        $r37 = virtualinvoke r104.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("objectFieldOffset", $r36);

        $r38 = class "Lorg/apache/lucene/util/RamUsageEstimator$DummyTwoLongObject;";

        $r39 = virtualinvoke $r38.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("dummy1");

        $r41 = <org.apache.lucene.util.RamUsageEstimator: java.lang.Object theUnsafe>;

        $r40 = newarray (java.lang.Object)[1];

        $r40[0] = $r39;

        $r42 = virtualinvoke $r37.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r41, $r40);

        $r43 = (java.lang.Number) $r42;

        $i0 = virtualinvoke $r43.<java.lang.Number: int intValue()>();

        $r44 = class "Lorg/apache/lucene/util/RamUsageEstimator$DummyTwoLongObject;";

        $r45 = virtualinvoke $r44.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("dummy2");

        $r47 = <org.apache.lucene.util.RamUsageEstimator: java.lang.Object theUnsafe>;

        $r46 = newarray (java.lang.Object)[1];

        $r46[0] = $r45;

        $r48 = virtualinvoke $r37.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r47, $r46);

        $r49 = (java.lang.Number) $r48;

        $i1 = virtualinvoke $r49.<java.lang.Number: int intValue()>();

        $i2 = $i1 - $i0;

        $i3 = staticinvoke <java.lang.Math: int abs(int)>($i2);

        if $i3 != 8 goto label18;

        $r91 = class "Lorg/apache/lucene/util/RamUsageEstimator$DummyOneFieldObject;";

        $r92 = virtualinvoke $r91.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("base");

        $r94 = <org.apache.lucene.util.RamUsageEstimator: java.lang.Object theUnsafe>;

        $r93 = newarray (java.lang.Object)[1];

        $r93[0] = $r92;

        $r95 = virtualinvoke $r37.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r94, $r93);

        $r96 = (java.lang.Number) $r95;

        i8 = virtualinvoke $r96.<java.lang.Number: int intValue()>();

        $r98 = <org.apache.lucene.util.RamUsageEstimator: java.util.EnumSet supportedFeatures>;

        $r97 = <org.apache.lucene.util.RamUsageEstimator$JvmFeature: org.apache.lucene.util.RamUsageEstimator$JvmFeature FIELD_OFFSETS>;

        virtualinvoke $r98.<java.util.EnumSet: boolean add(java.lang.Object)>($r97);

        r106 = $r37;

     label18:
        goto label20;

     label19:
        $r101 := @caughtexception;

     label20:
        <org.apache.lucene.util.RamUsageEstimator: java.lang.reflect.Method objectFieldOffsetMethod> = r106;

     label21:
        $r50 = newarray (java.lang.Class)[1];

        $r50[0] = class "Ljava/lang/Class;";

        $r51 = virtualinvoke r104.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("arrayBaseOffset", $r50);

        $r53 = <org.apache.lucene.util.RamUsageEstimator: java.lang.Object theUnsafe>;

        $r52 = newarray (java.lang.Object)[1];

        $r52[0] = class "[B";

        $r54 = virtualinvoke $r51.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r53, $r52);

        $r55 = (java.lang.Number) $r54;

        i10 = virtualinvoke $r55.<java.lang.Number: int intValue()>();

        $r57 = <org.apache.lucene.util.RamUsageEstimator: java.util.EnumSet supportedFeatures>;

        $r56 = <org.apache.lucene.util.RamUsageEstimator$JvmFeature: org.apache.lucene.util.RamUsageEstimator$JvmFeature ARRAY_HEADER_SIZE>;

        virtualinvoke $r57.<java.util.EnumSet: boolean add(java.lang.Object)>($r56);

     label22:
        goto label24;

     label23:
        $r100 := @caughtexception;

     label24:
        <org.apache.lucene.util.RamUsageEstimator: int NUM_BYTES_OBJECT_REF> = i6;

        <org.apache.lucene.util.RamUsageEstimator: int NUM_BYTES_OBJECT_HEADER> = i8;

        <org.apache.lucene.util.RamUsageEstimator: int NUM_BYTES_ARRAY_HEADER> = i10;

        i11 = 8;

     label25:
        $r58 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("com.sun.management.HotSpotDiagnosticMXBean");

        $r59 = staticinvoke <java.lang.management.ManagementFactory: javax.management.MBeanServer getPlatformMBeanServer()>();

        $r60 = staticinvoke <java.lang.management.ManagementFactory: java.lang.Object newPlatformMXBeanProxy(javax.management.MBeanServerConnection,java.lang.String,java.lang.Class)>($r59, "com.sun.management:type=HotSpotDiagnostic", $r58);

        $r61 = newarray (java.lang.Class)[1];

        $r61[0] = class "Ljava/lang/String;";

        $r62 = virtualinvoke $r58.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getVMOption", $r61);

        $r63 = newarray (java.lang.Object)[1];

        $r63[0] = "ObjectAlignmentInBytes";

        $r64 = virtualinvoke $r62.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r60, $r63);

        $r65 = virtualinvoke $r64.<java.lang.Object: java.lang.Class getClass()>();

        $r66 = newarray (java.lang.Class)[0];

        $r67 = virtualinvoke $r65.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getValue", $r66);

        $r68 = newarray (java.lang.Object)[0];

        $r69 = virtualinvoke $r67.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r64, $r68);

        $r70 = virtualinvoke $r69.<java.lang.Object: java.lang.String toString()>();

        i11 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r70);

        $r72 = <org.apache.lucene.util.RamUsageEstimator: java.util.EnumSet supportedFeatures>;

        $r71 = <org.apache.lucene.util.RamUsageEstimator$JvmFeature: org.apache.lucene.util.RamUsageEstimator$JvmFeature OBJECT_ALIGNMENT>;

        virtualinvoke $r72.<java.util.EnumSet: boolean add(java.lang.Object)>($r71);

     label26:
        goto label28;

     label27:
        $r99 := @caughtexception;

     label28:
        <org.apache.lucene.util.RamUsageEstimator: int NUM_BYTES_OBJECT_ALIGNMENT> = i11;

        $r73 = new java.lang.StringBuilder;

        specialinvoke $r73.<java.lang.StringBuilder: void <init>()>();

        $r74 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[JVM: ");

        $r75 = <org.apache.lucene.util.Constants: java.lang.String JVM_NAME>;

        $r76 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r75);

        $r77 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r78 = <org.apache.lucene.util.Constants: java.lang.String JVM_VERSION>;

        $r79 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r78);

        $r80 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r81 = <org.apache.lucene.util.Constants: java.lang.String JVM_VENDOR>;

        $r82 = virtualinvoke $r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r81);

        $r83 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r84 = <org.apache.lucene.util.Constants: java.lang.String JAVA_VENDOR>;

        $r85 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r84);

        $r86 = virtualinvoke $r85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r87 = <org.apache.lucene.util.Constants: java.lang.String JAVA_VERSION>;

        $r88 = virtualinvoke $r86.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r87);

        $r89 = virtualinvoke $r88.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r90 = virtualinvoke $r89.<java.lang.StringBuilder: java.lang.String toString()>();

        <org.apache.lucene.util.RamUsageEstimator: java.lang.String JVM_INFO_STRING> = $r90;

        return;

        catch java.lang.Exception from label05 to label06 with label07;
        catch java.lang.Exception from label09 to label10 with label11;
        catch java.lang.Exception from label17 to label18 with label19;
        catch java.lang.Exception from label21 to label22 with label23;
        catch java.lang.Exception from label25 to label26 with label27;
    }
}
