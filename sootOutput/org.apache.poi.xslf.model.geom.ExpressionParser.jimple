public class org.apache.poi.xslf.model.geom.ExpressionParser extends java.lang.Object
{
    static final java.util.HashMap impls;

    public void <init>()
    {
        org.apache.poi.xslf.model.geom.ExpressionParser r0;

        r0 := @this: org.apache.poi.xslf.model.geom.ExpressionParser;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.apache.poi.xslf.model.geom.Expression parse(java.lang.String)
    {
        java.lang.Object[] $r18;
        java.util.HashMap $r0, $r13;
        java.lang.reflect.Constructor $r17;
        java.util.regex.Matcher $r12;
        java.lang.String r6, $r8, r10;
        boolean $z0, $z1;
        java.util.Iterator $r2;
        java.util.Set $r1;
        java.lang.Class[] $r16;
        java.lang.RuntimeException $r3, $r22;
        java.lang.Exception $r21;
        java.lang.StringBuilder $r4, $r5, $r7;
        java.lang.Object $r9, $r14, $r19;
        java.lang.Class r15;
        java.util.regex.Pattern $r11;
        org.apache.poi.xslf.model.geom.Expression $r20;

        r6 := @parameter0: java.lang.String;

        $r0 = <org.apache.poi.xslf.model.geom.ExpressionParser: java.util.HashMap impls>;

        $r1 = virtualinvoke $r0.<java.util.HashMap: java.util.Set keySet()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r9 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r10 = (java.lang.String) $r9;

        $r11 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(r10);

        $r12 = virtualinvoke $r11.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r6);

        $z1 = virtualinvoke $r12.<java.util.regex.Matcher: boolean matches()>();

        if $z1 == 0 goto label5;

        $r13 = <org.apache.poi.xslf.model.geom.ExpressionParser: java.util.HashMap impls>;

        $r14 = virtualinvoke $r13.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r10);

        r15 = (java.lang.Class) $r14;

     label2:
        $r16 = newarray (java.lang.Class)[1];

        $r16[0] = class "Ljava/util/regex/Matcher;";

        $r17 = virtualinvoke r15.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r16);

        $r18 = newarray (java.lang.Object)[1];

        $r18[0] = $r12;

        $r19 = virtualinvoke $r17.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r18);

        $r20 = (org.apache.poi.xslf.model.geom.Expression) $r19;

     label3:
        return $r20;

     label4:
        $r21 := @caughtexception;

        $r22 = new java.lang.RuntimeException;

        specialinvoke $r22.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r21);

        throw $r22;

     label5:
        goto label1;

     label6:
        $r3 = new java.lang.RuntimeException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported formula: ");

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>($r8);

        throw $r3;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    static void <clinit>()
    {
        java.util.HashMap $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <org.apache.poi.xslf.model.geom.ExpressionParser: java.util.HashMap impls> = $r0;

        $r1 = <org.apache.poi.xslf.model.geom.ExpressionParser: java.util.HashMap impls>;

        virtualinvoke $r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("\\*/ +([\\-\\w]+) +([\\-\\w]+) +([\\-\\w]+)", class "Lorg/apache/poi/xslf/model/geom/MultiplyDivideExpression;");

        $r2 = <org.apache.poi.xslf.model.geom.ExpressionParser: java.util.HashMap impls>;

        virtualinvoke $r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("\\+- +([\\-\\w]+) +([\\-\\w]+) +([\\-\\w]+)( 0)?", class "Lorg/apache/poi/xslf/model/geom/AddSubtractExpression;");

        $r3 = <org.apache.poi.xslf.model.geom.ExpressionParser: java.util.HashMap impls>;

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("\\+/ +([\\-\\w]+) +([\\-\\w]+) +([\\-\\w]+)", class "Lorg/apache/poi/xslf/model/geom/AddDivideExpression;");

        $r4 = <org.apache.poi.xslf.model.geom.ExpressionParser: java.util.HashMap impls>;

        virtualinvoke $r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("\\?: +([\\-\\w]+) +([\\-\\w]+) +([\\-\\w]+)", class "Lorg/apache/poi/xslf/model/geom/IfElseExpression;");

        $r5 = <org.apache.poi.xslf.model.geom.ExpressionParser: java.util.HashMap impls>;

        virtualinvoke $r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("val +([\\-\\w]+)", class "Lorg/apache/poi/xslf/model/geom/LiteralValueExpression;");

        $r6 = <org.apache.poi.xslf.model.geom.ExpressionParser: java.util.HashMap impls>;

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("abs +([\\-\\w]+)", class "Lorg/apache/poi/xslf/model/geom/AbsExpression;");

        $r7 = <org.apache.poi.xslf.model.geom.ExpressionParser: java.util.HashMap impls>;

        virtualinvoke $r7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("sqrt +([\\-\\w]+)", class "Lorg/apache/poi/xslf/model/geom/SqrtExpression;");

        $r8 = <org.apache.poi.xslf.model.geom.ExpressionParser: java.util.HashMap impls>;

        virtualinvoke $r8.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("max +([\\-\\w]+) +([\\-\\w]+)", class "Lorg/apache/poi/xslf/model/geom/MaxExpression;");

        $r9 = <org.apache.poi.xslf.model.geom.ExpressionParser: java.util.HashMap impls>;

        virtualinvoke $r9.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("min +([\\-\\w]+) +([\\-\\w]+)", class "Lorg/apache/poi/xslf/model/geom/MinExpression;");

        $r10 = <org.apache.poi.xslf.model.geom.ExpressionParser: java.util.HashMap impls>;

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("at2 +([\\-\\w]+) +([\\-\\w]+)", class "Lorg/apache/poi/xslf/model/geom/ArcTanExpression;");

        $r11 = <org.apache.poi.xslf.model.geom.ExpressionParser: java.util.HashMap impls>;

        virtualinvoke $r11.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("sin +([\\-\\w]+) +([\\-\\w]+)", class "Lorg/apache/poi/xslf/model/geom/SinExpression;");

        $r12 = <org.apache.poi.xslf.model.geom.ExpressionParser: java.util.HashMap impls>;

        virtualinvoke $r12.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("cos +([\\-\\w]+) +([\\-\\w]+)", class "Lorg/apache/poi/xslf/model/geom/CosExpression;");

        $r13 = <org.apache.poi.xslf.model.geom.ExpressionParser: java.util.HashMap impls>;

        virtualinvoke $r13.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("tan +([\\-\\w]+) +([\\-\\w]+)", class "Lorg/apache/poi/xslf/model/geom/TanExpression;");

        $r14 = <org.apache.poi.xslf.model.geom.ExpressionParser: java.util.HashMap impls>;

        virtualinvoke $r14.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("cat2 +([\\-\\w]+) +([\\-\\w]+) +([\\-\\w]+)", class "Lorg/apache/poi/xslf/model/geom/CosineArcTanExpression;");

        $r15 = <org.apache.poi.xslf.model.geom.ExpressionParser: java.util.HashMap impls>;

        virtualinvoke $r15.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("sat2 +([\\-\\w]+) +([\\-\\w]+) +([\\-\\w]+)", class "Lorg/apache/poi/xslf/model/geom/SinArcTanExpression;");

        $r16 = <org.apache.poi.xslf.model.geom.ExpressionParser: java.util.HashMap impls>;

        virtualinvoke $r16.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("pin +([\\-\\w]+) +([\\-\\w]+) +([\\-\\w]+)", class "Lorg/apache/poi/xslf/model/geom/PinExpression;");

        $r17 = <org.apache.poi.xslf.model.geom.ExpressionParser: java.util.HashMap impls>;

        virtualinvoke $r17.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("mod +([\\-\\w]+) +([\\-\\w]+) +([\\-\\w]+)", class "Lorg/apache/poi/xslf/model/geom/ModExpression;");

        return;
    }
}
