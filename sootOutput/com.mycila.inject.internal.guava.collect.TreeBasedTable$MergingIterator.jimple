class com.mycila.inject.internal.guava.collect.TreeBasedTable$MergingIterator extends com.mycila.inject.internal.guava.collect.AbstractIterator
{
    private final java.util.Queue queue;
    private final java.util.Comparator comparator;
    private java.lang.Object lastValue;

    public void <init>(java.lang.Iterable, java.util.Comparator)
    {
        java.util.Iterator $r5, r7;
        java.util.PriorityQueue $r3;
        java.lang.Iterable r4;
        com.mycila.inject.internal.guava.collect.TreeBasedTable$MergingIterator$1 $r2;
        com.mycila.inject.internal.guava.collect.PeekingIterator $r9;
        int $i0, $i1;
        java.lang.Object $r6;
        com.mycila.inject.internal.guava.collect.TreeBasedTable$MergingIterator r0;
        java.util.Queue $r8;
        java.util.Comparator r1;
        boolean $z0, $z1;

        r0 := @this: com.mycila.inject.internal.guava.collect.TreeBasedTable$MergingIterator;

        r4 := @parameter0: java.lang.Iterable;

        r1 := @parameter1: java.util.Comparator;

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.AbstractIterator: void <init>()>();

        r0.<com.mycila.inject.internal.guava.collect.TreeBasedTable$MergingIterator: java.lang.Object lastValue> = null;

        r0.<com.mycila.inject.internal.guava.collect.TreeBasedTable$MergingIterator: java.util.Comparator comparator> = r1;

        $r2 = new com.mycila.inject.internal.guava.collect.TreeBasedTable$MergingIterator$1;

        specialinvoke $r2.<com.mycila.inject.internal.guava.collect.TreeBasedTable$MergingIterator$1: void <init>(com.mycila.inject.internal.guava.collect.TreeBasedTable$MergingIterator)>(r0);

        $r3 = new java.util.PriorityQueue;

        $i0 = staticinvoke <com.mycila.inject.internal.guava.collect.Iterables: int size(java.lang.Iterable)>(r4);

        $i1 = staticinvoke <java.lang.Math: int max(int,int)>(1, $i0);

        specialinvoke $r3.<java.util.PriorityQueue: void <init>(int,java.util.Comparator)>($i1, $r2);

        r0.<com.mycila.inject.internal.guava.collect.TreeBasedTable$MergingIterator: java.util.Queue queue> = $r3;

        $r5 = interfaceinvoke r4.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.Iterator) $r6;

        $z1 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r8 = r0.<com.mycila.inject.internal.guava.collect.TreeBasedTable$MergingIterator: java.util.Queue queue>;

        $r9 = staticinvoke <com.mycila.inject.internal.guava.collect.Iterators: com.mycila.inject.internal.guava.collect.PeekingIterator peekingIterator(java.util.Iterator)>(r7);

        interfaceinvoke $r8.<java.util.Queue: boolean add(java.lang.Object)>($r9);

     label2:
        goto label1;

     label3:
        return;
    }

    protected java.lang.Object computeNext()
    {
        int $i0;
        com.mycila.inject.internal.guava.collect.TreeBasedTable$MergingIterator r0;
        boolean $z0, z1, $z2, $z3;
        com.mycila.inject.internal.guava.collect.PeekingIterator r5;
        java.lang.Object $r2, $r4, $r6, $r7, $r8, $r10;
        java.util.Queue $r1, $r3, $r9;
        java.util.Comparator $r11;

        r0 := @this: com.mycila.inject.internal.guava.collect.TreeBasedTable$MergingIterator;

     label1:
        $r1 = r0.<com.mycila.inject.internal.guava.collect.TreeBasedTable$MergingIterator: java.util.Queue queue>;

        $z0 = interfaceinvoke $r1.<java.util.Queue: boolean isEmpty()>();

        if $z0 != 0 goto label6;

        $r3 = r0.<com.mycila.inject.internal.guava.collect.TreeBasedTable$MergingIterator: java.util.Queue queue>;

        $r4 = interfaceinvoke $r3.<java.util.Queue: java.lang.Object poll()>();

        r5 = (com.mycila.inject.internal.guava.collect.PeekingIterator) $r4;

        $r6 = interfaceinvoke r5.<com.mycila.inject.internal.guava.collect.PeekingIterator: java.lang.Object next()>();

        $r7 = r0.<com.mycila.inject.internal.guava.collect.TreeBasedTable$MergingIterator: java.lang.Object lastValue>;

        if $r7 == null goto label2;

        $r11 = r0.<com.mycila.inject.internal.guava.collect.TreeBasedTable$MergingIterator: java.util.Comparator comparator>;

        $r10 = r0.<com.mycila.inject.internal.guava.collect.TreeBasedTable$MergingIterator: java.lang.Object lastValue>;

        $i0 = interfaceinvoke $r11.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r6, $r10);

        if $i0 != 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        z1 = $z2;

        $z3 = interfaceinvoke r5.<com.mycila.inject.internal.guava.collect.PeekingIterator: boolean hasNext()>();

        if $z3 == 0 goto label4;

        $r9 = r0.<com.mycila.inject.internal.guava.collect.TreeBasedTable$MergingIterator: java.util.Queue queue>;

        interfaceinvoke $r9.<java.util.Queue: boolean add(java.lang.Object)>(r5);

     label4:
        if z1 != 0 goto label5;

        r0.<com.mycila.inject.internal.guava.collect.TreeBasedTable$MergingIterator: java.lang.Object lastValue> = $r6;

        $r8 = r0.<com.mycila.inject.internal.guava.collect.TreeBasedTable$MergingIterator: java.lang.Object lastValue>;

        return $r8;

     label5:
        goto label1;

     label6:
        r0.<com.mycila.inject.internal.guava.collect.TreeBasedTable$MergingIterator: java.lang.Object lastValue> = null;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.TreeBasedTable$MergingIterator: java.lang.Object endOfData()>();

        return $r2;
    }

    static java.util.Comparator access$000(com.mycila.inject.internal.guava.collect.TreeBasedTable$MergingIterator)
    {
        com.mycila.inject.internal.guava.collect.TreeBasedTable$MergingIterator r0;
        java.util.Comparator $r1;

        r0 := @parameter0: com.mycila.inject.internal.guava.collect.TreeBasedTable$MergingIterator;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.TreeBasedTable$MergingIterator: java.util.Comparator comparator>;

        return $r1;
    }
}
