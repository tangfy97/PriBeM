public final class com.mycila.inject.scope.ConcurrentSingleton extends com.mycila.inject.scope.MycilaScope
{
    final long expirationDelay;
    private final com.mycila.inject.scope.ConcurrentSingleton$FutureInjector futureInjector;
    private final java.util.concurrent.ExecutorService executor;

    public void <init>(long, java.util.concurrent.TimeUnit)
    {
        com.mycila.inject.scope.ConcurrentSingleton$DefaultThreadFactory $r6;
        java.util.concurrent.ThreadPoolExecutor $r2;
        com.mycila.inject.scope.ConcurrentSingleton r0;
        long l2, $l3;
        int $i0, $i1;
        java.util.concurrent.ThreadPoolExecutor$DiscardOldestPolicy $r14;
        java.lang.String $r10, $r13;
        java.util.concurrent.SynchronousQueue $r4;
        java.lang.Runtime $r3;
        java.util.concurrent.TimeUnit $r5, r15;
        com.mycila.inject.scope.ConcurrentSingleton$FutureInjector $r1;
        java.lang.StringBuilder $r7, $r8, $r11, $r12;
        java.lang.Class $r9;

        r0 := @this: com.mycila.inject.scope.ConcurrentSingleton;

        l2 := @parameter0: long;

        r15 := @parameter1: java.util.concurrent.TimeUnit;

        specialinvoke r0.<com.mycila.inject.scope.MycilaScope: void <init>()>();

        $r1 = new com.mycila.inject.scope.ConcurrentSingleton$FutureInjector;

        specialinvoke $r1.<com.mycila.inject.scope.ConcurrentSingleton$FutureInjector: void <init>(com.mycila.inject.scope.ConcurrentSingleton$1)>(null);

        r0.<com.mycila.inject.scope.ConcurrentSingleton: com.mycila.inject.scope.ConcurrentSingleton$FutureInjector futureInjector> = $r1;

        $r2 = new java.util.concurrent.ThreadPoolExecutor;

        $r3 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $i0 = virtualinvoke $r3.<java.lang.Runtime: int availableProcessors()>();

        $i1 = $i0 * 10;

        $r5 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $r4 = new java.util.concurrent.SynchronousQueue;

        specialinvoke $r4.<java.util.concurrent.SynchronousQueue: void <init>()>();

        $r6 = new com.mycila.inject.scope.ConcurrentSingleton$DefaultThreadFactory;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("@");

        $r9 = class "Lcom/mycila/inject/scope/ConcurrentSingleton;";

        $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.String getSimpleName()>();

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-Thread-");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<com.mycila.inject.scope.ConcurrentSingleton$DefaultThreadFactory: void <init>(java.lang.String,com.mycila.inject.scope.ConcurrentSingleton$1)>($r13, null);

        $r14 = new java.util.concurrent.ThreadPoolExecutor$DiscardOldestPolicy;

        specialinvoke $r14.<java.util.concurrent.ThreadPoolExecutor$DiscardOldestPolicy: void <init>()>();

        specialinvoke $r2.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory,java.util.concurrent.RejectedExecutionHandler)>(0, $i1, 5L, $r5, $r4, $r6, $r14);

        r0.<com.mycila.inject.scope.ConcurrentSingleton: java.util.concurrent.ExecutorService executor> = $r2;

        $l3 = virtualinvoke r15.<java.util.concurrent.TimeUnit: long toMillis(long)>(l2);

        r0.<com.mycila.inject.scope.ConcurrentSingleton: long expirationDelay> = $l3;

        return;
    }

    public void initFuture(com.google.inject.Injector)
    {
        com.google.inject.Injector r1;
        com.mycila.inject.scope.ConcurrentSingleton r0;
        com.mycila.inject.scope.ConcurrentSingleton$FutureInjector $r2;

        r0 := @this: com.mycila.inject.scope.ConcurrentSingleton;

        r1 := @parameter0: com.google.inject.Injector;

        $r2 = r0.<com.mycila.inject.scope.ConcurrentSingleton: com.mycila.inject.scope.ConcurrentSingleton$FutureInjector futureInjector>;

        virtualinvoke $r2.<com.mycila.inject.scope.ConcurrentSingleton$FutureInjector: void setInjector(com.google.inject.Injector)>(r1);

        return;
    }

    public void shutdown()
    {
        com.mycila.inject.scope.ConcurrentSingleton r0;
        java.util.concurrent.ExecutorService $r1;

        r0 := @this: com.mycila.inject.scope.ConcurrentSingleton;

        $r1 = r0.<com.mycila.inject.scope.ConcurrentSingleton: java.util.concurrent.ExecutorService executor>;

        interfaceinvoke $r1.<java.util.concurrent.ExecutorService: void shutdown()>();

        return;
    }

    public com.google.inject.Provider scope(com.google.inject.Key, com.google.inject.Provider)
    {
        com.google.inject.Provider r5;
        com.mycila.inject.scope.ConcurrentSingleton$FutureProvider $r4;
        com.google.inject.Key r2;
        com.mycila.inject.scope.ConcurrentSingleton r0;
        com.mycila.inject.scope.ConcurrentSingleton$1 $r1;
        java.util.concurrent.ExecutorService $r3;

        r0 := @this: com.mycila.inject.scope.ConcurrentSingleton;

        r2 := @parameter0: com.google.inject.Key;

        r5 := @parameter1: com.google.inject.Provider;

        $r3 = r0.<com.mycila.inject.scope.ConcurrentSingleton: java.util.concurrent.ExecutorService executor>;

        $r1 = new com.mycila.inject.scope.ConcurrentSingleton$1;

        specialinvoke $r1.<com.mycila.inject.scope.ConcurrentSingleton$1: void <init>(com.mycila.inject.scope.ConcurrentSingleton,com.google.inject.Key)>(r0, r2);

        interfaceinvoke $r3.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>($r1);

        $r4 = new com.mycila.inject.scope.ConcurrentSingleton$FutureProvider;

        specialinvoke $r4.<com.mycila.inject.scope.ConcurrentSingleton$FutureProvider: void <init>(com.google.inject.Key,com.google.inject.Provider,com.mycila.inject.scope.ConcurrentSingleton$1)>(r2, r5, null);

        return $r4;
    }

    static com.mycila.inject.scope.ConcurrentSingleton$FutureInjector access$200(com.mycila.inject.scope.ConcurrentSingleton)
    {
        com.mycila.inject.scope.ConcurrentSingleton r0;
        com.mycila.inject.scope.ConcurrentSingleton$FutureInjector $r1;

        r0 := @parameter0: com.mycila.inject.scope.ConcurrentSingleton;

        $r1 = r0.<com.mycila.inject.scope.ConcurrentSingleton: com.mycila.inject.scope.ConcurrentSingleton$FutureInjector futureInjector>;

        return $r1;
    }
}
