public class com.hp.hpl.jena.reasoner.rulesys.impl.EnvironmentFrameWithDerivation extends com.hp.hpl.jena.reasoner.rulesys.impl.EnvironmentFrame
{
    com.hp.hpl.jena.graph.Node[] argVars;
    com.hp.hpl.jena.reasoner.TriplePattern[] matches;

    public void <init>(com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode)
    {
        com.hp.hpl.jena.graph.Node[] $r2;
        com.hp.hpl.jena.reasoner.rulesys.Rule $r3, $r4;
        com.hp.hpl.jena.reasoner.TriplePattern[] $r5;
        int $i0;
        com.hp.hpl.jena.reasoner.rulesys.impl.EnvironmentFrameWithDerivation r0;
        com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode r1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.EnvironmentFrameWithDerivation;

        r1 := @parameter0: com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode;

        specialinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.EnvironmentFrame: void <init>(com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode)>(r1);

        $r2 = newarray (com.hp.hpl.jena.graph.Node)[8];

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.EnvironmentFrameWithDerivation: com.hp.hpl.jena.graph.Node[] argVars> = $r2;

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode: com.hp.hpl.jena.reasoner.rulesys.Rule getRule()>();

        if $r3 == null goto label1;

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode: com.hp.hpl.jena.reasoner.rulesys.Rule getRule()>();

        $i0 = virtualinvoke $r4.<com.hp.hpl.jena.reasoner.rulesys.Rule: int bodyLength()>();

        $r5 = newarray (com.hp.hpl.jena.reasoner.TriplePattern)[$i0];

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.EnvironmentFrameWithDerivation: com.hp.hpl.jena.reasoner.TriplePattern[] matches> = $r5;

     label1:
        return;
    }

    public void noteMatch(com.hp.hpl.jena.reasoner.TriplePattern, int)
    {
        com.hp.hpl.jena.reasoner.TriplePattern r0;
        com.hp.hpl.jena.reasoner.TriplePattern[] $r3;
        int i0, $i1;
        com.hp.hpl.jena.reasoner.rulesys.impl.EnvironmentFrameWithDerivation r1;
        com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode $r2;

        r1 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.EnvironmentFrameWithDerivation;

        r0 := @parameter0: com.hp.hpl.jena.reasoner.TriplePattern;

        i0 := @parameter1: int;

        $r2 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.EnvironmentFrameWithDerivation: com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode clause>;

        $i1 = virtualinvoke $r2.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode: int termIndex(int)>(i0);

        if $i1 < 0 goto label1;

        $r3 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.EnvironmentFrameWithDerivation: com.hp.hpl.jena.reasoner.TriplePattern[] matches>;

        $r3[$i1] = r0;

     label1:
        return;
    }

    public com.hp.hpl.jena.graph.Triple getResult()
    {
        com.hp.hpl.jena.graph.Node[] $r2, $r5, $r8;
        com.hp.hpl.jena.graph.Node $r3, $r4, $r6, $r7, $r9, $r10;
        com.hp.hpl.jena.graph.Triple $r0;
        com.hp.hpl.jena.reasoner.rulesys.impl.EnvironmentFrameWithDerivation r1;

        r1 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.EnvironmentFrameWithDerivation;

        $r0 = new com.hp.hpl.jena.graph.Triple;

        $r2 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.EnvironmentFrameWithDerivation: com.hp.hpl.jena.graph.Node[] argVars>;

        $r3 = $r2[0];

        $r4 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter: com.hp.hpl.jena.graph.Node deref(com.hp.hpl.jena.graph.Node)>($r3);

        $r5 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.EnvironmentFrameWithDerivation: com.hp.hpl.jena.graph.Node[] argVars>;

        $r6 = $r5[1];

        $r7 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter: com.hp.hpl.jena.graph.Node deref(com.hp.hpl.jena.graph.Node)>($r6);

        $r8 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.EnvironmentFrameWithDerivation: com.hp.hpl.jena.graph.Node[] argVars>;

        $r9 = $r8[2];

        $r10 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter: com.hp.hpl.jena.graph.Node derefPossFunctor(com.hp.hpl.jena.graph.Node)>($r9);

        specialinvoke $r0.<com.hp.hpl.jena.graph.Triple: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r4, $r7, $r10);

        return $r0;
    }

    public java.util.List getMatchList()
    {
        com.hp.hpl.jena.reasoner.TriplePattern[] $r2, $r3;
        java.util.ArrayList $r0;
        com.hp.hpl.jena.graph.Triple $r5;
        com.hp.hpl.jena.reasoner.TriplePattern $r4;
        int $i0, i1;
        com.hp.hpl.jena.reasoner.rulesys.impl.EnvironmentFrameWithDerivation r1;

        r1 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.EnvironmentFrameWithDerivation;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        i1 = 0;

     label1:
        $r2 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.EnvironmentFrameWithDerivation: com.hp.hpl.jena.reasoner.TriplePattern[] matches>;

        $i0 = lengthof $r2;

        if i1 >= $i0 goto label2;

        $r3 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.EnvironmentFrameWithDerivation: com.hp.hpl.jena.reasoner.TriplePattern[] matches>;

        $r4 = $r3[i1];

        $r5 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter: com.hp.hpl.jena.graph.Triple deref(com.hp.hpl.jena.reasoner.TriplePattern)>($r4);

        virtualinvoke $r0.<java.util.ArrayList: boolean add(java.lang.Object)>($r5);

        i1 = i1 + 1;

        goto label1;

     label2:
        return $r0;
    }

    public void initDerivationRecord(com.hp.hpl.jena.graph.Node[])
    {
        com.hp.hpl.jena.graph.Node[] r0, $r2;
        com.hp.hpl.jena.reasoner.rulesys.impl.EnvironmentFrameWithDerivation r1;

        r1 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.EnvironmentFrameWithDerivation;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node[];

        $r2 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.EnvironmentFrameWithDerivation: com.hp.hpl.jena.graph.Node[] argVars>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, $r2, 0, 8);

        return;
    }
}
