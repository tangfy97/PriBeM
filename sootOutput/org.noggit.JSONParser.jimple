public class org.noggit.JSONParser extends java.lang.Object
{
    public static final int STRING;
    public static final int LONG;
    public static final int NUMBER;
    public static final int BIGNUMBER;
    public static final int BOOLEAN;
    public static final int NULL;
    public static final int OBJECT_START;
    public static final int OBJECT_END;
    public static final int ARRAY_START;
    public static final int ARRAY_END;
    public static final int EOF;
    private static final org.noggit.CharArr devNull;
    final char[] buf;
    int start;
    int end;
    final java.io.Reader in;
    boolean eof;
    long gpos;
    int event;
    private final org.noggit.CharArr out;
    private byte[] stack;
    private int ptr;
    private byte state;
    private static final byte DID_OBJSTART;
    private static final byte DID_ARRSTART;
    private static final byte DID_ARRELEM;
    private static final byte DID_MEMNAME;
    private static final byte DID_MEMVAL;
    private int valstate;
    private boolean bool;
    private long lval;
    private int nstate;
    private static final int HAS_FRACTION;
    private static final int HAS_EXPONENT;
    private final org.noggit.CharArr tmp;

    public static java.lang.String getEventString(int)
    {
        int i0;
        java.lang.StringBuilder $r0, $r1, $r2;
        java.lang.String $r3;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 1: goto label01;
            case 2: goto label02;
            case 3: goto label03;
            case 4: goto label04;
            case 5: goto label05;
            case 6: goto label06;
            case 7: goto label07;
            case 8: goto label08;
            case 9: goto label09;
            case 10: goto label10;
            case 11: goto label11;
            default: goto label12;
        };

     label01:
        return "STRING";

     label02:
        return "LONG";

     label03:
        return "NUMBER";

     label04:
        return "BIGNUMBER";

     label05:
        return "BOOLEAN";

     label06:
        return "NULL";

     label07:
        return "OBJECT_START";

     label08:
        return "OBJECT_END";

     label09:
        return "ARRAY_START";

     label10:
        return "ARRAY_END";

     label11:
        return "EOF";

     label12:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown: ");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public void <init>(java.io.Reader)
    {
        char[] $r2;
        java.io.Reader r1;
        org.noggit.JSONParser r0;

        r0 := @this: org.noggit.JSONParser;

        r1 := @parameter0: java.io.Reader;

        $r2 = newarray (char)[8192];

        specialinvoke r0.<org.noggit.JSONParser: void <init>(java.io.Reader,char[])>(r1, $r2);

        return;
    }

    public void <init>(java.io.Reader, char[])
    {
        byte[] $r2;
        org.noggit.JSONParser r0;
        org.noggit.CharArr $r1, $r3;
        char[] r5;
        java.io.Reader r4;

        r0 := @this: org.noggit.JSONParser;

        r4 := @parameter0: java.io.Reader;

        r5 := @parameter1: char[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.noggit.JSONParser: boolean eof> = 0;

        $r1 = new org.noggit.CharArr;

        specialinvoke $r1.<org.noggit.CharArr: void <init>(int)>(64);

        r0.<org.noggit.JSONParser: org.noggit.CharArr out> = $r1;

        $r2 = newarray (byte)[16];

        r0.<org.noggit.JSONParser: byte[] stack> = $r2;

        r0.<org.noggit.JSONParser: int ptr> = 0;

        r0.<org.noggit.JSONParser: byte state> = 0;

        $r3 = new org.noggit.CharArr;

        specialinvoke $r3.<org.noggit.CharArr: void <init>(char[],int,int)>(null, 0, 0);

        r0.<org.noggit.JSONParser: org.noggit.CharArr tmp> = $r3;

        r0.<org.noggit.JSONParser: java.io.Reader in> = r4;

        r0.<org.noggit.JSONParser: char[] buf> = r5;

        return;
    }

    public void <init>(char[], int, int)
    {
        byte[] $r2;
        org.noggit.JSONParser r0;
        int i0, i1;
        org.noggit.CharArr $r1, $r3;
        char[] r4;

        r0 := @this: org.noggit.JSONParser;

        r4 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.noggit.JSONParser: boolean eof> = 0;

        $r1 = new org.noggit.CharArr;

        specialinvoke $r1.<org.noggit.CharArr: void <init>(int)>(64);

        r0.<org.noggit.JSONParser: org.noggit.CharArr out> = $r1;

        $r2 = newarray (byte)[16];

        r0.<org.noggit.JSONParser: byte[] stack> = $r2;

        r0.<org.noggit.JSONParser: int ptr> = 0;

        r0.<org.noggit.JSONParser: byte state> = 0;

        $r3 = new org.noggit.CharArr;

        specialinvoke $r3.<org.noggit.CharArr: void <init>(char[],int,int)>(null, 0, 0);

        r0.<org.noggit.JSONParser: org.noggit.CharArr tmp> = $r3;

        r0.<org.noggit.JSONParser: java.io.Reader in> = null;

        r0.<org.noggit.JSONParser: char[] buf> = r4;

        r0.<org.noggit.JSONParser: int start> = i0;

        r0.<org.noggit.JSONParser: int end> = i1;

        return;
    }

    public void <init>(java.lang.String)
    {
        int $i0;
        java.lang.String r1;
        org.noggit.JSONParser r0;

        r0 := @this: org.noggit.JSONParser;

        r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        specialinvoke r0.<org.noggit.JSONParser: void <init>(java.lang.String,int,int)>(r1, 0, $i0);

        return;
    }

    public void <init>(java.lang.String, int, int)
    {
        byte[] $r2;
        org.noggit.JSONParser r0;
        org.noggit.CharArr $r1, $r3;
        int i0, i1, $i2;
        char[] $r4, $r6;
        java.lang.String r5;

        r0 := @this: org.noggit.JSONParser;

        r5 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.noggit.JSONParser: boolean eof> = 0;

        $r1 = new org.noggit.CharArr;

        specialinvoke $r1.<org.noggit.CharArr: void <init>(int)>(64);

        r0.<org.noggit.JSONParser: org.noggit.CharArr out> = $r1;

        $r2 = newarray (byte)[16];

        r0.<org.noggit.JSONParser: byte[] stack> = $r2;

        r0.<org.noggit.JSONParser: int ptr> = 0;

        r0.<org.noggit.JSONParser: byte state> = 0;

        $r3 = new org.noggit.CharArr;

        specialinvoke $r3.<org.noggit.CharArr: void <init>(char[],int,int)>(null, 0, 0);

        r0.<org.noggit.JSONParser: org.noggit.CharArr tmp> = $r3;

        r0.<org.noggit.JSONParser: java.io.Reader in> = null;

        r0.<org.noggit.JSONParser: int start> = i0;

        r0.<org.noggit.JSONParser: int end> = i1;

        $i2 = i1 - i0;

        $r4 = newarray (char)[$i2];

        r0.<org.noggit.JSONParser: char[] buf> = $r4;

        $r6 = r0.<org.noggit.JSONParser: char[] buf>;

        virtualinvoke r5.<java.lang.String: void getChars(int,int,char[],int)>(i0, i1, $r6, 0);

        return;
    }

    private final void push()
    {
        byte[] $r1, $r2, $r3, r4, $r5, $r6;
        org.noggit.JSONParser r0;
        byte $b4;
        int $i0, $i1, $i2, $i3, $i5, $i6, $i7;

        r0 := @this: org.noggit.JSONParser;

        $i1 = r0.<org.noggit.JSONParser: int ptr>;

        $r1 = r0.<org.noggit.JSONParser: byte[] stack>;

        $i0 = lengthof $r1;

        if $i1 < $i0 goto label1;

        $r3 = r0.<org.noggit.JSONParser: byte[] stack>;

        $i5 = lengthof $r3;

        $i6 = $i5 << 1;

        r4 = newarray (byte)[$i6];

        $r6 = r0.<org.noggit.JSONParser: byte[] stack>;

        $r5 = r0.<org.noggit.JSONParser: byte[] stack>;

        $i7 = lengthof $r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, r4, 0, $i7);

        r0.<org.noggit.JSONParser: byte[] stack> = r4;

     label1:
        $r2 = r0.<org.noggit.JSONParser: byte[] stack>;

        $i2 = r0.<org.noggit.JSONParser: int ptr>;

        $i3 = $i2 + 1;

        r0.<org.noggit.JSONParser: int ptr> = $i3;

        $b4 = r0.<org.noggit.JSONParser: byte state>;

        $r2[$i2] = $b4;

        return;
    }

    private final void pop()
    {
        byte[] $r1;
        byte $b3;
        org.noggit.JSONParser r0;
        int $i0, $i1, $i2;
        org.noggit.JSONParser$ParseException $r2;

        r0 := @this: org.noggit.JSONParser;

        $i0 = r0.<org.noggit.JSONParser: int ptr>;

        $i1 = $i0 - 1;

        r0.<org.noggit.JSONParser: int ptr> = $i1;

        if $i1 >= 0 goto label1;

        $r2 = specialinvoke r0.<org.noggit.JSONParser: org.noggit.JSONParser$ParseException err(java.lang.String)>("Unbalanced container");

        throw $r2;

     label1:
        $r1 = r0.<org.noggit.JSONParser: byte[] stack>;

        $i2 = r0.<org.noggit.JSONParser: int ptr>;

        $b3 = $r1[$i2];

        r0.<org.noggit.JSONParser: byte state> = $b3;

        return;
    }

    protected void fill() throws java.io.IOException
    {
        org.noggit.JSONParser r0;
        long $l1, $l2, $l3;
        java.io.Reader $r1, $r4;
        int $i0, $i4, $i5, $i6, $i7, $i8;
        char[] $r2, $r3;

        r0 := @this: org.noggit.JSONParser;

        $r1 = r0.<org.noggit.JSONParser: java.io.Reader in>;

        if $r1 == null goto label3;

        $l2 = r0.<org.noggit.JSONParser: long gpos>;

        $i0 = r0.<org.noggit.JSONParser: int end>;

        $l1 = (long) $i0;

        $l3 = $l2 + $l1;

        r0.<org.noggit.JSONParser: long gpos> = $l3;

        r0.<org.noggit.JSONParser: int start> = 0;

        $r4 = r0.<org.noggit.JSONParser: java.io.Reader in>;

        $r3 = r0.<org.noggit.JSONParser: char[] buf>;

        $r2 = r0.<org.noggit.JSONParser: char[] buf>;

        $i4 = lengthof $r2;

        $i5 = virtualinvoke $r4.<java.io.Reader: int read(char[],int,int)>($r3, 0, $i4);

        if $i5 < 0 goto label1;

        $i6 = $i5;

        goto label2;

     label1:
        $i6 = 0;

     label2:
        r0.<org.noggit.JSONParser: int end> = $i6;

     label3:
        $i7 = r0.<org.noggit.JSONParser: int start>;

        $i8 = r0.<org.noggit.JSONParser: int end>;

        if $i7 < $i8 goto label4;

        r0.<org.noggit.JSONParser: boolean eof> = 1;

     label4:
        return;
    }

    private void getMore() throws java.io.IOException
    {
        org.noggit.JSONParser r0;
        int $i0, $i1;
        org.noggit.JSONParser$ParseException $r1;

        r0 := @this: org.noggit.JSONParser;

        virtualinvoke r0.<org.noggit.JSONParser: void fill()>();

        $i1 = r0.<org.noggit.JSONParser: int start>;

        $i0 = r0.<org.noggit.JSONParser: int end>;

        if $i1 < $i0 goto label1;

        $r1 = specialinvoke r0.<org.noggit.JSONParser: org.noggit.JSONParser$ParseException err(java.lang.String)>(null);

        throw $r1;

     label1:
        return;
    }

    protected int getChar() throws java.io.IOException
    {
        org.noggit.JSONParser r0;
        char $c4;
        int $i0, $i1, $i2, $i3, $i5, $i6, $i8, $i9;
        char[] $r1;

        r0 := @this: org.noggit.JSONParser;

        $i1 = r0.<org.noggit.JSONParser: int start>;

        $i0 = r0.<org.noggit.JSONParser: int end>;

        if $i1 < $i0 goto label1;

        virtualinvoke r0.<org.noggit.JSONParser: void fill()>();

        $i6 = r0.<org.noggit.JSONParser: int start>;

        $i5 = r0.<org.noggit.JSONParser: int end>;

        if $i6 < $i5 goto label1;

        $i8 = (int) -1;

        return $i8;

     label1:
        $r1 = r0.<org.noggit.JSONParser: char[] buf>;

        $i2 = r0.<org.noggit.JSONParser: int start>;

        $i3 = $i2 + 1;

        r0.<org.noggit.JSONParser: int start> = $i3;

        $c4 = $r1[$i2];

        $i9 = (int) $c4;

        return $i9;
    }

    private int getCharNWS() throws java.io.IOException
    {
        int $i0;
        org.noggit.JSONParser r0;

        r0 := @this: org.noggit.JSONParser;

     label1:
        $i0 = virtualinvoke r0.<org.noggit.JSONParser: int getChar()>();

        if $i0 == 32 goto label2;

        if $i0 == 9 goto label2;

        if $i0 == 10 goto label2;

        if $i0 == 13 goto label2;

        return $i0;

     label2:
        goto label1;
    }

    private void expect(char[]) throws java.io.IOException
    {
        org.noggit.JSONParser r1;
        char $c2;
        org.noggit.JSONParser$ParseException $r7;
        int $i0, $i1, i3, $i4;
        char[] r0;
        java.lang.StringBuilder $r3, $r5, $r8;
        java.lang.String $r6, $r9;

        r1 := @this: org.noggit.JSONParser;

        r0 := @parameter0: char[];

        i3 = 1;

     label1:
        $i0 = lengthof r0;

        if i3 >= $i0 goto label3;

        $i1 = virtualinvoke r1.<org.noggit.JSONParser: int getChar()>();

        $c2 = r0[i3];

        $i4 = (int) $c2;

        if $i1 == $i4 goto label2;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected ");

        $r9 = new java.lang.String;

        specialinvoke $r9.<java.lang.String: void <init>(char[])>(r0);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = specialinvoke r1.<org.noggit.JSONParser: org.noggit.JSONParser$ParseException err(java.lang.String)>($r6);

        throw $r7;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return;
    }

    private org.noggit.JSONParser$ParseException err(java.lang.String)
    {
        boolean $z0;
        org.noggit.JSONParser r0;
        java.lang.StringBuilder $r1, $r2, $r3, $r5, $r6, $r8, $r9, $r10, $r12, $r13, $r14, $r15, $r17, $r20, $r23, $r24, $r25, $r26;
        long $l3, $l4, $l5;
        int $i0, $i2, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        java.lang.String $r7, $r11, $r16, $r18, r19, $r21, $r27;
        char $c1;
        org.noggit.JSONParser$ParseException $r22;
        char[] $r4;

        r0 := @this: org.noggit.JSONParser;

        r19 := @parameter0: java.lang.String;

        $z0 = r0.<org.noggit.JSONParser: boolean eof>;

        if $z0 != 0 goto label1;

        $i8 = r0.<org.noggit.JSONParser: int start>;

        if $i8 <= 0 goto label1;

        $i9 = r0.<org.noggit.JSONParser: int start>;

        $i10 = $i9 - 1;

        r0.<org.noggit.JSONParser: int start> = $i10;

     label1:
        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("char=");

        $i11 = r0.<org.noggit.JSONParser: int start>;

        $i12 = r0.<org.noggit.JSONParser: int end>;

        if $i11 < $i12 goto label2;

        $r21 = "(EOF)";

        goto label3;

     label2:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r4 = r0.<org.noggit.JSONParser: char[] buf>;

        $i0 = r0.<org.noggit.JSONParser: int start>;

        $c1 = $r4[$i0];

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        $r21 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

     label3:
        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("position=");

        $l4 = r0.<org.noggit.JSONParser: long gpos>;

        $i2 = r0.<org.noggit.JSONParser: int start>;

        $l3 = (long) $i2;

        $l5 = $l4 + $l3;

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l5);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r16 = specialinvoke r0.<org.noggit.JSONParser: java.lang.String getContext()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        if r19 != null goto label5;

        $i7 = r0.<org.noggit.JSONParser: int start>;

        $i6 = r0.<org.noggit.JSONParser: int end>;

        if $i7 < $i6 goto label4;

        r19 = "Unexpected EOF";

        goto label5;

     label4:
        r19 = "JSON Parse Error";

     label5:
        $r22 = new org.noggit.JSONParser$ParseException;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r19);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<org.noggit.JSONParser$ParseException: void <init>(java.lang.String)>($r27);

        return $r22;
    }

    private java.lang.String getContext()
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        java.lang.String $r4, $r10, r13;
        org.noggit.JSONParser r0;
        java.lang.StringBuilder $r1, $r2, $r3, $r5, $r6, $r7, $r8, $r9, $r11, $r12;

        r0 := @this: org.noggit.JSONParser;

        r13 = "";

        $i0 = r0.<org.noggit.JSONParser: int start>;

        if $i0 < 0 goto label1;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" BEFORE=\'");

        $i7 = r0.<org.noggit.JSONParser: int start>;

        $i8 = $i7 - 60;

        $i9 = staticinvoke <java.lang.Math: int max(int,int)>($i8, 0);

        $i10 = r0.<org.noggit.JSONParser: int start>;

        $i11 = $i10 + 1;

        $r10 = specialinvoke r0.<org.noggit.JSONParser: java.lang.String errEscape(int,int)>($i9, $i11);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        $i2 = r0.<org.noggit.JSONParser: int start>;

        $i1 = r0.<org.noggit.JSONParser: int end>;

        if $i2 >= $i1 goto label2;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" AFTER=\'");

        $i3 = r0.<org.noggit.JSONParser: int start>;

        $i6 = $i3 + 1;

        $i4 = r0.<org.noggit.JSONParser: int start>;

        $i5 = $i4 + 40;

        $r4 = specialinvoke r0.<org.noggit.JSONParser: java.lang.String errEscape(int,int)>($i6, $i5);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        r13 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        return r13;
    }

    private java.lang.String errEscape(int, int)
    {
        org.noggit.JSONParser r0;
        int $i0, $i1, i2, $i3, i4;
        char[] $r2;
        java.lang.String $r1, $r3;

        r0 := @this: org.noggit.JSONParser;

        i2 := @parameter0: int;

        i4 := @parameter1: int;

        $i0 = r0.<org.noggit.JSONParser: int end>;

        $i1 = staticinvoke <java.lang.Math: int min(int,int)>(i4, $i0);

        if i2 < $i1 goto label1;

        return "";

     label1:
        $r1 = new java.lang.String;

        $r2 = r0.<org.noggit.JSONParser: char[] buf>;

        $i3 = $i1 - i2;

        specialinvoke $r1.<java.lang.String: void <init>(char[],int,int)>($r2, i2, $i3);

        $r3 = virtualinvoke $r1.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\s+", " ");

        return $r3;
    }

    private long readNumber(int, boolean) throws java.io.IOException
    {
        byte $b6, $b9, $b31;
        boolean z0, z1;
        org.noggit.JSONParser r0;
        org.noggit.CharArr $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        long l2, $l7, $l8, $l10, $l11, $l21, $l22, l27, $l29, $l30, $l32;
        int i0, $i1, $i3, $i4, $i5, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i23, $i24, $i25, $i26, i28, $i34, $i35, $i36, $i38;

        r0 := @this: org.noggit.JSONParser;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r1 = r0.<org.noggit.JSONParser: org.noggit.CharArr out>;

        virtualinvoke $r1.<org.noggit.CharArr: void unsafeWrite(int)>(i0);

        $i1 = 48 - i0;

        l27 = (long) $i1;

        i28 = 0;

     label01:
        if i28 >= 17 goto label10;

        $i17 = virtualinvoke r0.<org.noggit.JSONParser: int getChar()>();

        lookupswitch($i17)
        {
            case 46: goto label03;
            case 48: goto label02;
            case 49: goto label02;
            case 50: goto label02;
            case 51: goto label02;
            case 52: goto label02;
            case 53: goto label02;
            case 54: goto label02;
            case 55: goto label02;
            case 56: goto label02;
            case 57: goto label02;
            case 69: goto label04;
            case 101: goto label04;
            default: goto label05;
        };

     label02:
        $l22 = l27 * 10L;

        $i20 = $i17 - 48;

        $l21 = (long) $i20;

        l27 = $l22 - $l21;

        $r9 = r0.<org.noggit.JSONParser: org.noggit.CharArr out>;

        virtualinvoke $r9.<org.noggit.CharArr: void unsafeWrite(int)>($i17);

        goto label09;

     label03:
        $r10 = r0.<org.noggit.JSONParser: org.noggit.CharArr out>;

        virtualinvoke $r10.<org.noggit.CharArr: void unsafeWrite(char)>(46);

        $r11 = r0.<org.noggit.JSONParser: org.noggit.CharArr out>;

        $i23 = 22 - i28;

        $i24 = specialinvoke r0.<org.noggit.JSONParser: int readFrac(org.noggit.CharArr,int)>($r11, $i23);

        r0.<org.noggit.JSONParser: int valstate> = $i24;

        return 0L;

     label04:
        $r7 = r0.<org.noggit.JSONParser: org.noggit.CharArr out>;

        virtualinvoke $r7.<org.noggit.CharArr: void unsafeWrite(int)>($i17);

        r0.<org.noggit.JSONParser: int nstate> = 0;

        $r8 = r0.<org.noggit.JSONParser: org.noggit.CharArr out>;

        $i18 = 22 - i28;

        $i19 = specialinvoke r0.<org.noggit.JSONParser: int readExp(org.noggit.CharArr,int)>($r8, $i18);

        r0.<org.noggit.JSONParser: int valstate> = $i19;

        return 0L;

     label05:
        $i34 = (int) -1;

        if $i17 == $i34 goto label06;

        $i25 = r0.<org.noggit.JSONParser: int start>;

        $i26 = $i25 - 1;

        r0.<org.noggit.JSONParser: int start> = $i26;

     label06:
        r0.<org.noggit.JSONParser: int valstate> = 2;

        if z0 == 0 goto label07;

        $l29 = l27;

        goto label08;

     label07:
        $l29 = neg l27;

     label08:
        return $l29;

     label09:
        i28 = i28 + 1;

        goto label01;

     label10:
        z1 = 0;

        if z0 == 0 goto label11;

        $l30 = -9223372036854775808L;

        goto label12;

     label11:
        $l30 = -9223372036854775807L;

     label12:
        l2 = $l30;

     label13:
        if i28 >= 22 goto label26;

        $i3 = virtualinvoke r0.<org.noggit.JSONParser: int getChar()>();

        lookupswitch($i3)
        {
            case 46: goto label17;
            case 48: goto label14;
            case 49: goto label14;
            case 50: goto label14;
            case 51: goto label14;
            case 52: goto label14;
            case 53: goto label14;
            case 54: goto label14;
            case 55: goto label14;
            case 56: goto label14;
            case 57: goto label14;
            case 69: goto label18;
            case 101: goto label18;
            default: goto label19;
        };

     label14:
        $b6 = l27 cmp -922337203685477580L;

        $i35 = (int) $b6;

        if $i35 >= 0 goto label15;

        z1 = 1;

     label15:
        $l11 = l27 * 10L;

        $i12 = $i3 - 48;

        $l7 = (long) $i12;

        $l8 = l2 + $l7;

        $b9 = $l11 cmp $l8;

        $i36 = (int) $b9;

        if $i36 >= 0 goto label16;

        z1 = 1;

     label16:
        $l10 = (long) $i12;

        l27 = $l11 - $l10;

        $r4 = r0.<org.noggit.JSONParser: org.noggit.CharArr out>;

        virtualinvoke $r4.<org.noggit.CharArr: void unsafeWrite(int)>($i3);

        goto label25;

     label17:
        $r5 = r0.<org.noggit.JSONParser: org.noggit.CharArr out>;

        virtualinvoke $r5.<org.noggit.CharArr: void unsafeWrite(char)>(46);

        $r6 = r0.<org.noggit.JSONParser: org.noggit.CharArr out>;

        $i13 = 22 - i28;

        $i14 = specialinvoke r0.<org.noggit.JSONParser: int readFrac(org.noggit.CharArr,int)>($r6, $i13);

        r0.<org.noggit.JSONParser: int valstate> = $i14;

        return 0L;

     label18:
        $r2 = r0.<org.noggit.JSONParser: org.noggit.CharArr out>;

        virtualinvoke $r2.<org.noggit.CharArr: void unsafeWrite(int)>($i3);

        r0.<org.noggit.JSONParser: int nstate> = 0;

        $r3 = r0.<org.noggit.JSONParser: org.noggit.CharArr out>;

        $i4 = 22 - i28;

        $i5 = specialinvoke r0.<org.noggit.JSONParser: int readExp(org.noggit.CharArr,int)>($r3, $i4);

        r0.<org.noggit.JSONParser: int valstate> = $i5;

        return 0L;

     label19:
        $i38 = (int) -1;

        if $i3 == $i38 goto label20;

        $i15 = r0.<org.noggit.JSONParser: int start>;

        $i16 = $i15 - 1;

        r0.<org.noggit.JSONParser: int start> = $i16;

     label20:
        if z1 == 0 goto label21;

        $b31 = 4;

        goto label22;

     label21:
        $b31 = 2;

     label22:
        r0.<org.noggit.JSONParser: int valstate> = $b31;

        if z0 == 0 goto label23;

        $l32 = l27;

        goto label24;

     label23:
        $l32 = neg l27;

     label24:
        return $l32;

     label25:
        i28 = i28 + 1;

        goto label13;

     label26:
        r0.<org.noggit.JSONParser: int nstate> = 0;

        r0.<org.noggit.JSONParser: int valstate> = 4;

        return 0L;
    }

    private int readFrac(org.noggit.CharArr, int) throws java.io.IOException
    {
        org.noggit.JSONParser r0;
        org.noggit.CharArr r1;
        int $i0, $i1, $i2, $i3, i4, $i6, $i8;

        r0 := @this: org.noggit.JSONParser;

        r1 := @parameter0: org.noggit.CharArr;

        i4 := @parameter1: int;

        r0.<org.noggit.JSONParser: int nstate> = 1;

     label1:
        $i6 = (int) -1;

        i4 = i4 + $i6;

        if i4 < 0 goto label7;

        $i0 = virtualinvoke r0.<org.noggit.JSONParser: int getChar()>();

        if $i0 < 48 goto label2;

        if $i0 > 57 goto label2;

        virtualinvoke r1.<org.noggit.CharArr: void write(int)>($i0);

        goto label6;

     label2:
        if $i0 == 101 goto label3;

        if $i0 != 69 goto label4;

     label3:
        virtualinvoke r1.<org.noggit.CharArr: void write(int)>($i0);

        $i1 = specialinvoke r0.<org.noggit.JSONParser: int readExp(org.noggit.CharArr,int)>(r1, i4);

        return $i1;

     label4:
        $i8 = (int) -1;

        if $i0 == $i8 goto label5;

        $i2 = r0.<org.noggit.JSONParser: int start>;

        $i3 = $i2 - 1;

        r0.<org.noggit.JSONParser: int start> = $i3;

     label5:
        return 3;

     label6:
        goto label1;

     label7:
        return 4;
    }

    private int readExp(org.noggit.CharArr, int) throws java.io.IOException
    {
        org.noggit.JSONParser r0;
        org.noggit.CharArr r1;
        org.noggit.JSONParser$ParseException $r2;
        int $i0, $i1, $i2, $i3, i4, i5, i6, $i8, $i10;

        r0 := @this: org.noggit.JSONParser;

        r1 := @parameter0: org.noggit.CharArr;

        i4 := @parameter1: int;

        $i0 = r0.<org.noggit.JSONParser: int nstate>;

        $i1 = $i0 | 2;

        r0.<org.noggit.JSONParser: int nstate> = $i1;

        $i2 = virtualinvoke r0.<org.noggit.JSONParser: int getChar()>();

        i5 = $i2;

        $i8 = (int) -1;

        i6 = i4 + $i8;

        if $i2 == 43 goto label1;

        if $i2 != 45 goto label2;

     label1:
        virtualinvoke r1.<org.noggit.CharArr: void write(int)>($i2);

        i5 = virtualinvoke r0.<org.noggit.JSONParser: int getChar()>();

        $i10 = (int) -1;

        i6 = i6 + $i10;

     label2:
        if i5 < 48 goto label3;

        if i5 <= 57 goto label4;

     label3:
        $r2 = specialinvoke r0.<org.noggit.JSONParser: org.noggit.JSONParser$ParseException err(java.lang.String)>("missing exponent number");

        throw $r2;

     label4:
        virtualinvoke r1.<org.noggit.CharArr: void write(int)>(i5);

        $i3 = specialinvoke r0.<org.noggit.JSONParser: int readExpDigits(org.noggit.CharArr,int)>(r1, i6);

        return $i3;
    }

    private int readExpDigits(org.noggit.CharArr, int) throws java.io.IOException
    {
        org.noggit.JSONParser r0;
        org.noggit.CharArr r1;
        int $i0, $i1, $i2, i3, $i5, $i7;

        r0 := @this: org.noggit.JSONParser;

        r1 := @parameter0: org.noggit.CharArr;

        i3 := @parameter1: int;

     label1:
        $i5 = (int) -1;

        i3 = i3 + $i5;

        if i3 < 0 goto label5;

        $i0 = virtualinvoke r0.<org.noggit.JSONParser: int getChar()>();

        if $i0 < 48 goto label2;

        if $i0 > 57 goto label2;

        virtualinvoke r1.<org.noggit.CharArr: void write(int)>($i0);

        goto label4;

     label2:
        $i7 = (int) -1;

        if $i0 == $i7 goto label3;

        $i1 = r0.<org.noggit.JSONParser: int start>;

        $i2 = $i1 - 1;

        r0.<org.noggit.JSONParser: int start> = $i2;

     label3:
        return 3;

     label4:
        goto label1;

     label5:
        return 4;
    }

    private void continueNumber(org.noggit.CharArr) throws java.io.IOException
    {
        org.noggit.JSONParser r1;
        org.noggit.CharArr r0, $r2, $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7;

        r1 := @this: org.noggit.JSONParser;

        r0 := @parameter0: org.noggit.CharArr;

        $r2 = r1.<org.noggit.JSONParser: org.noggit.CharArr out>;

        if r0 == $r2 goto label1;

        $r3 = r1.<org.noggit.JSONParser: org.noggit.CharArr out>;

        virtualinvoke r0.<org.noggit.CharArr: void write(org.noggit.CharArr)>($r3);

     label1:
        $i0 = r1.<org.noggit.JSONParser: int nstate>;

        $i1 = $i0 & 2;

        if $i1 == 0 goto label2;

        specialinvoke r1.<org.noggit.JSONParser: int readExpDigits(org.noggit.CharArr,int)>(r0, 2147483647);

        return;

     label2:
        $i2 = r1.<org.noggit.JSONParser: int nstate>;

        if $i2 == 0 goto label3;

        specialinvoke r1.<org.noggit.JSONParser: int readFrac(org.noggit.CharArr,int)>(r0, 2147483647);

        return;

     label3:
        $i3 = virtualinvoke r1.<org.noggit.JSONParser: int getChar()>();

        if $i3 < 48 goto label4;

        if $i3 > 57 goto label4;

        virtualinvoke r0.<org.noggit.CharArr: void write(int)>($i3);

        goto label9;

     label4:
        if $i3 != 46 goto label5;

        virtualinvoke r0.<org.noggit.CharArr: void write(int)>($i3);

        specialinvoke r1.<org.noggit.JSONParser: int readFrac(org.noggit.CharArr,int)>(r0, 2147483647);

        return;

     label5:
        if $i3 == 101 goto label6;

        if $i3 != 69 goto label7;

     label6:
        virtualinvoke r0.<org.noggit.CharArr: void write(int)>($i3);

        specialinvoke r1.<org.noggit.JSONParser: int readExp(org.noggit.CharArr,int)>(r0, 2147483647);

        return;

     label7:
        $i7 = (int) -1;

        if $i3 == $i7 goto label8;

        $i4 = r1.<org.noggit.JSONParser: int start>;

        $i5 = $i4 - 1;

        r1.<org.noggit.JSONParser: int start> = $i5;

     label8:
        return;

     label9:
        goto label3;
    }

    private int hexval(int)
    {
        org.noggit.JSONParser r0;
        org.noggit.JSONParser$ParseException $r1;
        int i0, $i1, $i2, $i3, $i5, $i7;

        r0 := @this: org.noggit.JSONParser;

        i0 := @parameter0: int;

        if i0 < 48 goto label1;

        if i0 > 57 goto label1;

        $i3 = i0 - 48;

        return $i3;

     label1:
        if i0 < 65 goto label2;

        if i0 > 70 goto label2;

        $i5 = (int) -55;

        $i2 = i0 + $i5;

        return $i2;

     label2:
        if i0 < 97 goto label3;

        if i0 > 102 goto label3;

        $i7 = (int) -87;

        $i1 = i0 + $i7;

        return $i1;

     label3:
        $r1 = specialinvoke r0.<org.noggit.JSONParser: org.noggit.JSONParser$ParseException err(java.lang.String)>("invalid hex digit");

        throw $r1;
    }

    private char readEscapedChar() throws java.io.IOException
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        org.noggit.JSONParser r0;
        char $c15;
        org.noggit.JSONParser$ParseException $r1;

        r0 := @this: org.noggit.JSONParser;

        $i0 = virtualinvoke r0.<org.noggit.JSONParser: int getChar()>();

        lookupswitch($i0)
        {
            case 34: goto label01;
            case 47: goto label03;
            case 92: goto label02;
            case 98: goto label08;
            case 102: goto label07;
            case 110: goto label04;
            case 114: goto label05;
            case 116: goto label06;
            case 117: goto label09;
            default: goto label10;
        };

     label01:
        return 34;

     label02:
        return 92;

     label03:
        return 47;

     label04:
        return 10;

     label05:
        return 13;

     label06:
        return 9;

     label07:
        return 12;

     label08:
        return 8;

     label09:
        $i1 = virtualinvoke r0.<org.noggit.JSONParser: int getChar()>();

        $i2 = specialinvoke r0.<org.noggit.JSONParser: int hexval(int)>($i1);

        $i3 = $i2 << 12;

        $i4 = virtualinvoke r0.<org.noggit.JSONParser: int getChar()>();

        $i5 = specialinvoke r0.<org.noggit.JSONParser: int hexval(int)>($i4);

        $i6 = $i5 << 8;

        $i7 = $i3 | $i6;

        $i8 = virtualinvoke r0.<org.noggit.JSONParser: int getChar()>();

        $i9 = specialinvoke r0.<org.noggit.JSONParser: int hexval(int)>($i8);

        $i10 = $i9 << 4;

        $i11 = $i7 | $i10;

        $i12 = virtualinvoke r0.<org.noggit.JSONParser: int getChar()>();

        $i13 = specialinvoke r0.<org.noggit.JSONParser: int hexval(int)>($i12);

        $i14 = $i11 | $i13;

        $c15 = (char) $i14;

        return $c15;

     label10:
        $r1 = specialinvoke r0.<org.noggit.JSONParser: org.noggit.JSONParser$ParseException err(java.lang.String)>("Invalid character escape in string");

        throw $r1;
    }

    private org.noggit.CharArr readStringChars() throws java.io.IOException
    {
        org.noggit.JSONParser r0;
        org.noggit.CharArr $r1, $r2, $r3, $r6, $r7;
        char c4;
        int $i0, $i1, $i2, i3, $i5, $i6;
        char[] $r4, $r5;

        r0 := @this: org.noggit.JSONParser;

        i3 = r0.<org.noggit.JSONParser: int start>;

     label1:
        $i0 = r0.<org.noggit.JSONParser: int end>;

        if i3 >= $i0 goto label4;

        $r4 = r0.<org.noggit.JSONParser: char[] buf>;

        c4 = $r4[i3];

        $i5 = (int) c4;

        if $i5 != 34 goto label2;

        $r6 = r0.<org.noggit.JSONParser: org.noggit.CharArr tmp>;

        $r5 = r0.<org.noggit.JSONParser: char[] buf>;

        $i1 = r0.<org.noggit.JSONParser: int start>;

        virtualinvoke $r6.<org.noggit.CharArr: void set(char[],int,int)>($r5, $i1, i3);

        $i2 = i3 + 1;

        r0.<org.noggit.JSONParser: int start> = $i2;

        $r7 = r0.<org.noggit.JSONParser: org.noggit.CharArr tmp>;

        return $r7;

     label2:
        $i6 = (int) c4;

        if $i6 != 92 goto label3;

        goto label4;

     label3:
        i3 = i3 + 1;

        goto label1;

     label4:
        $r1 = r0.<org.noggit.JSONParser: org.noggit.CharArr out>;

        virtualinvoke $r1.<org.noggit.CharArr: void reset()>();

        $r2 = r0.<org.noggit.JSONParser: org.noggit.CharArr out>;

        specialinvoke r0.<org.noggit.JSONParser: void readStringChars2(org.noggit.CharArr,int)>($r2, i3);

        $r3 = r0.<org.noggit.JSONParser: org.noggit.CharArr out>;

        return $r3;
    }

    private void readStringChars2(org.noggit.CharArr, int) throws java.io.IOException
    {
        org.noggit.CharArr r2;
        int $i0, $i1, $i2, $i3, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i13, i14, i15, $i16, $i17;
        org.noggit.JSONParser r0;
        char $c4, $c12;
        char[] $r1, $r3, $r4, $r5;

        r0 := @this: org.noggit.JSONParser;

        r2 := @parameter0: org.noggit.CharArr;

        i13 := @parameter1: int;

     label1:
        $i0 = r0.<org.noggit.JSONParser: int end>;

        if i13 < $i0 goto label2;

        $r5 = r0.<org.noggit.JSONParser: char[] buf>;

        $i11 = r0.<org.noggit.JSONParser: int start>;

        $i9 = r0.<org.noggit.JSONParser: int start>;

        $i10 = i13 - $i9;

        virtualinvoke r2.<org.noggit.CharArr: void write(char[],int,int)>($r5, $i11, $i10);

        r0.<org.noggit.JSONParser: int start> = i13;

        specialinvoke r0.<org.noggit.JSONParser: void getMore()>();

        i13 = r0.<org.noggit.JSONParser: int start>;

     label2:
        $r1 = r0.<org.noggit.JSONParser: char[] buf>;

        $i1 = i13;

        i13 = i13 + 1;

        $c12 = $r1[$i1];

        $i16 = (int) $c12;

        if $i16 != 34 goto label4;

        $i6 = r0.<org.noggit.JSONParser: int start>;

        $i7 = i13 - $i6;

        i14 = $i7 - 1;

        if i14 <= 0 goto label3;

        $r4 = r0.<org.noggit.JSONParser: char[] buf>;

        $i8 = r0.<org.noggit.JSONParser: int start>;

        virtualinvoke r2.<org.noggit.CharArr: void write(char[],int,int)>($r4, $i8, i14);

     label3:
        r0.<org.noggit.JSONParser: int start> = i13;

        return;

     label4:
        $i17 = (int) $c12;

        if $i17 != 92 goto label6;

        $i2 = r0.<org.noggit.JSONParser: int start>;

        $i3 = i13 - $i2;

        i15 = $i3 - 1;

        if i15 <= 0 goto label5;

        $r3 = r0.<org.noggit.JSONParser: char[] buf>;

        $i5 = r0.<org.noggit.JSONParser: int start>;

        virtualinvoke r2.<org.noggit.CharArr: void write(char[],int,int)>($r3, $i5, i15);

     label5:
        r0.<org.noggit.JSONParser: int start> = i13;

        $c4 = specialinvoke r0.<org.noggit.JSONParser: char readEscapedChar()>();

        virtualinvoke r2.<org.noggit.CharArr: void write(char)>($c4);

        i13 = r0.<org.noggit.JSONParser: int start>;

     label6:
        goto label1;
    }

    private int next(int) throws java.io.IOException
    {
        org.noggit.CharArr $r4, $r5, $r6, $r8, $r9;
        long $l0, $l9;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10, $i11, i12, $i14;
        org.noggit.JSONParser r0;
        org.noggit.JSONParser$ParseException $r7, $r10, $r11, $r12;
        char[] $r1, $r2, $r3;

        r0 := @this: org.noggit.JSONParser;

        i12 := @parameter0: int;

     label01:
        lookupswitch(i12)
        {
            case -1: goto label19;
            case 9: goto label02;
            case 10: goto label03;
            case 13: goto label03;
            case 32: goto label02;
            case 34: goto label04;
            case 45: goto label13;
            case 48: goto label07;
            case 49: goto label12;
            case 50: goto label12;
            case 51: goto label12;
            case 52: goto label12;
            case 53: goto label12;
            case 54: goto label12;
            case 55: goto label12;
            case 56: goto label12;
            case 57: goto label12;
            case 91: goto label06;
            case 102: goto label17;
            case 110: goto label18;
            case 116: goto label16;
            case 123: goto label05;
            default: goto label21;
        };

     label02:
        goto label22;

     label03:
        goto label22;

     label04:
        r0.<org.noggit.JSONParser: int valstate> = 1;

        return 1;

     label05:
        specialinvoke r0.<org.noggit.JSONParser: void push()>();

        r0.<org.noggit.JSONParser: byte state> = 1;

        return 7;

     label06:
        specialinvoke r0.<org.noggit.JSONParser: void push()>();

        r0.<org.noggit.JSONParser: byte state> = 2;

        return 9;

     label07:
        $r5 = r0.<org.noggit.JSONParser: org.noggit.CharArr out>;

        virtualinvoke $r5.<org.noggit.CharArr: void reset()>();

        $i2 = virtualinvoke r0.<org.noggit.JSONParser: int getChar()>();

        if $i2 != 46 goto label08;

        $i5 = r0.<org.noggit.JSONParser: int start>;

        $i6 = $i5 - 1;

        r0.<org.noggit.JSONParser: int start> = $i6;

        specialinvoke r0.<org.noggit.JSONParser: long readNumber(int,boolean)>(48, 0);

        $i7 = r0.<org.noggit.JSONParser: int valstate>;

        return $i7;

     label08:
        if $i2 > 57 goto label09;

        if $i2 >= 48 goto label11;

     label09:
        $r6 = r0.<org.noggit.JSONParser: org.noggit.CharArr out>;

        virtualinvoke $r6.<org.noggit.CharArr: void unsafeWrite(char)>(48);

        $i14 = (int) -1;

        if $i2 == $i14 goto label10;

        $i3 = r0.<org.noggit.JSONParser: int start>;

        $i4 = $i3 - 1;

        r0.<org.noggit.JSONParser: int start> = $i4;

     label10:
        r0.<org.noggit.JSONParser: long lval> = 0L;

        r0.<org.noggit.JSONParser: int valstate> = 2;

        return 2;

     label11:
        $r7 = specialinvoke r0.<org.noggit.JSONParser: org.noggit.JSONParser$ParseException err(java.lang.String)>("Leading zeros not allowed");

        throw $r7;

     label12:
        $r4 = r0.<org.noggit.JSONParser: org.noggit.CharArr out>;

        virtualinvoke $r4.<org.noggit.CharArr: void reset()>();

        $l0 = specialinvoke r0.<org.noggit.JSONParser: long readNumber(int,boolean)>(i12, 0);

        r0.<org.noggit.JSONParser: long lval> = $l0;

        $i1 = r0.<org.noggit.JSONParser: int valstate>;

        return $i1;

     label13:
        $r8 = r0.<org.noggit.JSONParser: org.noggit.CharArr out>;

        virtualinvoke $r8.<org.noggit.CharArr: void reset()>();

        $r9 = r0.<org.noggit.JSONParser: org.noggit.CharArr out>;

        virtualinvoke $r9.<org.noggit.CharArr: void unsafeWrite(char)>(45);

        $i8 = virtualinvoke r0.<org.noggit.JSONParser: int getChar()>();

        if $i8 < 48 goto label14;

        if $i8 <= 57 goto label15;

     label14:
        $r10 = specialinvoke r0.<org.noggit.JSONParser: org.noggit.JSONParser$ParseException err(java.lang.String)>("expected digit after \'-\'");

        throw $r10;

     label15:
        $l9 = specialinvoke r0.<org.noggit.JSONParser: long readNumber(int,boolean)>($i8, 1);

        r0.<org.noggit.JSONParser: long lval> = $l9;

        $i10 = r0.<org.noggit.JSONParser: int valstate>;

        return $i10;

     label16:
        r0.<org.noggit.JSONParser: int valstate> = 5;

        $r1 = <org.noggit.JSONUtil: char[] TRUE_CHARS>;

        specialinvoke r0.<org.noggit.JSONParser: void expect(char[])>($r1);

        r0.<org.noggit.JSONParser: boolean bool> = 1;

        return 5;

     label17:
        r0.<org.noggit.JSONParser: int valstate> = 5;

        $r3 = <org.noggit.JSONUtil: char[] FALSE_CHARS>;

        specialinvoke r0.<org.noggit.JSONParser: void expect(char[])>($r3);

        r0.<org.noggit.JSONParser: boolean bool> = 0;

        return 5;

     label18:
        r0.<org.noggit.JSONParser: int valstate> = 6;

        $r2 = <org.noggit.JSONUtil: char[] NULL_CHARS>;

        specialinvoke r0.<org.noggit.JSONParser: void expect(char[])>($r2);

        return 6;

     label19:
        $i11 = virtualinvoke r0.<org.noggit.JSONParser: int getLevel()>();

        if $i11 <= 0 goto label20;

        $r11 = specialinvoke r0.<org.noggit.JSONParser: org.noggit.JSONParser$ParseException err(java.lang.String)>("Premature EOF");

        throw $r11;

     label20:
        return 11;

     label21:
        $r12 = specialinvoke r0.<org.noggit.JSONParser: org.noggit.JSONParser$ParseException err(java.lang.String)>(null);

        throw $r12;

     label22:
        i12 = virtualinvoke r0.<org.noggit.JSONParser: int getChar()>();

        goto label01;
    }

    public java.lang.String toString()
    {
        byte $b2;
        int $i0, $i1, $i3, $i4;
        java.lang.String $r10;
        org.noggit.JSONParser r2;
        java.lang.StringBuilder $r1, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r11;

        r2 := @this: org.noggit.JSONParser;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("start=");

        $i0 = r2.<org.noggit.JSONParser: int start>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",end=");

        $i1 = r2.<org.noggit.JSONParser: int end>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",state=");

        $b2 = r2.<org.noggit.JSONParser: byte state>;

        $i4 = (int) $b2;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("valstate=");

        $i3 = r2.<org.noggit.JSONParser: int valstate>;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }

    public int nextEvent() throws java.io.IOException
    {
        org.noggit.CharArr $r6, $r7;
        byte $b16;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i17;
        org.noggit.JSONParser r0;
        org.noggit.JSONParser$ParseException $r1, $r2, $r3, $r4, $r5;

        r0 := @this: org.noggit.JSONParser;

        $i0 = r0.<org.noggit.JSONParser: int valstate>;

        if $i0 != 1 goto label01;

        $r7 = <org.noggit.JSONParser: org.noggit.CharArr devNull>;

        $i15 = r0.<org.noggit.JSONParser: int start>;

        specialinvoke r0.<org.noggit.JSONParser: void readStringChars2(org.noggit.CharArr,int)>($r7, $i15);

        goto label02;

     label01:
        $i1 = r0.<org.noggit.JSONParser: int valstate>;

        if $i1 != 4 goto label02;

        $r6 = <org.noggit.JSONParser: org.noggit.CharArr devNull>;

        specialinvoke r0.<org.noggit.JSONParser: void continueNumber(org.noggit.CharArr)>($r6);

     label02:
        r0.<org.noggit.JSONParser: int valstate> = 0;

        $b16 = r0.<org.noggit.JSONParser: byte state>;

        $i17 = (int) $b16;

        tableswitch($i17)
        {
            case 0: goto label03;
            case 1: goto label04;
            case 2: goto label13;
            case 3: goto label15;
            case 4: goto label07;
            case 5: goto label09;
            default: goto label18;
        };

     label03:
        $i13 = specialinvoke r0.<org.noggit.JSONParser: int getCharNWS()>();

        $i14 = specialinvoke r0.<org.noggit.JSONParser: int next(int)>($i13);

        r0.<org.noggit.JSONParser: int event> = $i14;

        return $i14;

     label04:
        $i12 = specialinvoke r0.<org.noggit.JSONParser: int getCharNWS()>();

        if $i12 != 125 goto label05;

        specialinvoke r0.<org.noggit.JSONParser: void pop()>();

        r0.<org.noggit.JSONParser: int event> = 8;

        return 8;

     label05:
        if $i12 == 34 goto label06;

        $r5 = specialinvoke r0.<org.noggit.JSONParser: org.noggit.JSONParser$ParseException err(java.lang.String)>("Expected string");

        throw $r5;

     label06:
        r0.<org.noggit.JSONParser: byte state> = 4;

        r0.<org.noggit.JSONParser: int valstate> = 1;

        r0.<org.noggit.JSONParser: int event> = 1;

        return 1;

     label07:
        $i4 = specialinvoke r0.<org.noggit.JSONParser: int getCharNWS()>();

        if $i4 == 58 goto label08;

        $r3 = specialinvoke r0.<org.noggit.JSONParser: org.noggit.JSONParser$ParseException err(java.lang.String)>("Expected key,value separator \':\'");

        throw $r3;

     label08:
        r0.<org.noggit.JSONParser: byte state> = 5;

        $i5 = virtualinvoke r0.<org.noggit.JSONParser: int getChar()>();

        $i6 = specialinvoke r0.<org.noggit.JSONParser: int next(int)>($i5);

        r0.<org.noggit.JSONParser: int event> = $i6;

        return $i6;

     label09:
        $i2 = specialinvoke r0.<org.noggit.JSONParser: int getCharNWS()>();

        if $i2 != 125 goto label10;

        specialinvoke r0.<org.noggit.JSONParser: void pop()>();

        r0.<org.noggit.JSONParser: int event> = 8;

        return 8;

     label10:
        if $i2 == 44 goto label11;

        $r2 = specialinvoke r0.<org.noggit.JSONParser: org.noggit.JSONParser$ParseException err(java.lang.String)>("Expected \',\' or \'}\'");

        throw $r2;

     label11:
        $i3 = specialinvoke r0.<org.noggit.JSONParser: int getCharNWS()>();

        if $i3 == 34 goto label12;

        $r1 = specialinvoke r0.<org.noggit.JSONParser: org.noggit.JSONParser$ParseException err(java.lang.String)>("Expected string");

        throw $r1;

     label12:
        r0.<org.noggit.JSONParser: byte state> = 4;

        r0.<org.noggit.JSONParser: int valstate> = 1;

        r0.<org.noggit.JSONParser: int event> = 1;

        return 1;

     label13:
        $i10 = specialinvoke r0.<org.noggit.JSONParser: int getCharNWS()>();

        if $i10 != 93 goto label14;

        specialinvoke r0.<org.noggit.JSONParser: void pop()>();

        r0.<org.noggit.JSONParser: int event> = 10;

        return 10;

     label14:
        r0.<org.noggit.JSONParser: byte state> = 3;

        $i11 = specialinvoke r0.<org.noggit.JSONParser: int next(int)>($i10);

        r0.<org.noggit.JSONParser: int event> = $i11;

        return $i11;

     label15:
        $i7 = specialinvoke r0.<org.noggit.JSONParser: int getCharNWS()>();

        if $i7 != 93 goto label16;

        specialinvoke r0.<org.noggit.JSONParser: void pop()>();

        r0.<org.noggit.JSONParser: int event> = 10;

        return 10;

     label16:
        if $i7 == 44 goto label17;

        $r4 = specialinvoke r0.<org.noggit.JSONParser: org.noggit.JSONParser$ParseException err(java.lang.String)>("Expected \',\' or \']\'");

        throw $r4;

     label17:
        $i8 = virtualinvoke r0.<org.noggit.JSONParser: int getChar()>();

        $i9 = specialinvoke r0.<org.noggit.JSONParser: int next(int)>($i8);

        r0.<org.noggit.JSONParser: int event> = $i9;

        return $i9;

     label18:
        return 0;
    }

    public int lastEvent()
    {
        int $i0;
        org.noggit.JSONParser r0;

        r0 := @this: org.noggit.JSONParser;

        $i0 = r0.<org.noggit.JSONParser: int event>;

        return $i0;
    }

    public boolean wasKey()
    {
        byte $b0;
        org.noggit.JSONParser r0;
        int $i1;
        boolean $z0;

        r0 := @this: org.noggit.JSONParser;

        $b0 = r0.<org.noggit.JSONParser: byte state>;

        $i1 = (int) $b0;

        if $i1 != 4 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private void goTo(int) throws java.io.IOException
    {
        org.noggit.JSONParser r0;
        int i0, $i1, $i2, $i3;
        org.noggit.JSONParser$ParseException $r1, $r2;

        r0 := @this: org.noggit.JSONParser;

        i0 := @parameter0: int;

        $i1 = r0.<org.noggit.JSONParser: int valstate>;

        if $i1 != i0 goto label1;

        r0.<org.noggit.JSONParser: int valstate> = 0;

        return;

     label1:
        $i2 = r0.<org.noggit.JSONParser: int valstate>;

        if $i2 != 0 goto label3;

        virtualinvoke r0.<org.noggit.JSONParser: int nextEvent()>();

        $i3 = r0.<org.noggit.JSONParser: int valstate>;

        if $i3 == i0 goto label2;

        $r2 = specialinvoke r0.<org.noggit.JSONParser: org.noggit.JSONParser$ParseException err(java.lang.String)>("type mismatch");

        throw $r2;

     label2:
        r0.<org.noggit.JSONParser: int valstate> = 0;

        goto label4;

     label3:
        $r1 = specialinvoke r0.<org.noggit.JSONParser: org.noggit.JSONParser$ParseException err(java.lang.String)>("type mismatch");

        throw $r1;

     label4:
        return;
    }

    public java.lang.String getString() throws java.io.IOException
    {
        org.noggit.CharArr $r1;
        java.lang.String $r2;
        org.noggit.JSONParser r0;

        r0 := @this: org.noggit.JSONParser;

        $r1 = virtualinvoke r0.<org.noggit.JSONParser: org.noggit.CharArr getStringChars()>();

        $r2 = virtualinvoke $r1.<org.noggit.CharArr: java.lang.String toString()>();

        return $r2;
    }

    public org.noggit.CharArr getStringChars() throws java.io.IOException
    {
        org.noggit.CharArr $r1;
        org.noggit.JSONParser r0;

        r0 := @this: org.noggit.JSONParser;

        specialinvoke r0.<org.noggit.JSONParser: void goTo(int)>(1);

        $r1 = specialinvoke r0.<org.noggit.JSONParser: org.noggit.CharArr readStringChars()>();

        return $r1;
    }

    public void getString(org.noggit.CharArr) throws java.io.IOException
    {
        int $i0;
        org.noggit.CharArr r1;
        org.noggit.JSONParser r0;

        r0 := @this: org.noggit.JSONParser;

        r1 := @parameter0: org.noggit.CharArr;

        specialinvoke r0.<org.noggit.JSONParser: void goTo(int)>(1);

        $i0 = r0.<org.noggit.JSONParser: int start>;

        specialinvoke r0.<org.noggit.JSONParser: void readStringChars2(org.noggit.CharArr,int)>(r1, $i0);

        return;
    }

    public long getLong() throws java.io.IOException
    {
        long $l0;
        org.noggit.JSONParser r0;

        r0 := @this: org.noggit.JSONParser;

        specialinvoke r0.<org.noggit.JSONParser: void goTo(int)>(2);

        $l0 = r0.<org.noggit.JSONParser: long lval>;

        return $l0;
    }

    public double getDouble() throws java.io.IOException
    {
        org.noggit.JSONParser r0;
        org.noggit.CharArr $r1;
        java.lang.String $r2;
        double $d0;

        r0 := @this: org.noggit.JSONParser;

        $r1 = virtualinvoke r0.<org.noggit.JSONParser: org.noggit.CharArr getNumberChars()>();

        $r2 = virtualinvoke $r1.<org.noggit.CharArr: java.lang.String toString()>();

        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r2);

        return $d0;
    }

    public org.noggit.CharArr getNumberChars() throws java.io.IOException
    {
        org.noggit.JSONParser r0;
        org.noggit.CharArr $r1, $r7, $r8;
        org.noggit.JSONParser$ParseException $r6;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;

        r0 := @this: org.noggit.JSONParser;

        i4 = 0;

        $i0 = r0.<org.noggit.JSONParser: int valstate>;

        if $i0 != 0 goto label1;

        i4 = virtualinvoke r0.<org.noggit.JSONParser: int nextEvent()>();

     label1:
        $i1 = r0.<org.noggit.JSONParser: int valstate>;

        if $i1 == 2 goto label2;

        $i2 = r0.<org.noggit.JSONParser: int valstate>;

        if $i2 != 3 goto label3;

     label2:
        r0.<org.noggit.JSONParser: int valstate> = 0;

        $r1 = r0.<org.noggit.JSONParser: org.noggit.CharArr out>;

        return $r1;

     label3:
        $i3 = r0.<org.noggit.JSONParser: int valstate>;

        if $i3 != 4 goto label4;

        $r7 = r0.<org.noggit.JSONParser: org.noggit.CharArr out>;

        specialinvoke r0.<org.noggit.JSONParser: void continueNumber(org.noggit.CharArr)>($r7);

        r0.<org.noggit.JSONParser: int valstate> = 0;

        $r8 = r0.<org.noggit.JSONParser: org.noggit.CharArr out>;

        return $r8;

     label4:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = specialinvoke r0.<org.noggit.JSONParser: org.noggit.JSONParser$ParseException err(java.lang.String)>($r5);

        throw $r6;
    }

    public void getNumberChars(org.noggit.CharArr) throws java.io.IOException
    {
        org.noggit.JSONParser r0;
        org.noggit.CharArr r1, $r2;
        org.noggit.JSONParser$ParseException $r7;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @this: org.noggit.JSONParser;

        r1 := @parameter0: org.noggit.CharArr;

        i4 = 0;

        $i0 = r0.<org.noggit.JSONParser: int valstate>;

        if $i0 != 0 goto label1;

        i4 = virtualinvoke r0.<org.noggit.JSONParser: int nextEvent()>();

     label1:
        $i1 = r0.<org.noggit.JSONParser: int valstate>;

        if $i1 == 2 goto label2;

        $i2 = r0.<org.noggit.JSONParser: int valstate>;

        if $i2 != 3 goto label3;

     label2:
        $r2 = r0.<org.noggit.JSONParser: org.noggit.CharArr out>;

        virtualinvoke r1.<org.noggit.CharArr: void write(org.noggit.CharArr)>($r2);

        goto label5;

     label3:
        $i3 = r0.<org.noggit.JSONParser: int valstate>;

        if $i3 != 4 goto label4;

        specialinvoke r0.<org.noggit.JSONParser: void continueNumber(org.noggit.CharArr)>(r1);

        goto label5;

     label4:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = specialinvoke r0.<org.noggit.JSONParser: org.noggit.JSONParser$ParseException err(java.lang.String)>($r6);

        throw $r7;

     label5:
        r0.<org.noggit.JSONParser: int valstate> = 0;

        return;
    }

    public boolean getBoolean() throws java.io.IOException
    {
        org.noggit.JSONParser r0;
        boolean $z0;

        r0 := @this: org.noggit.JSONParser;

        specialinvoke r0.<org.noggit.JSONParser: void goTo(int)>(5);

        $z0 = r0.<org.noggit.JSONParser: boolean bool>;

        return $z0;
    }

    public void getNull() throws java.io.IOException
    {
        org.noggit.JSONParser r0;

        r0 := @this: org.noggit.JSONParser;

        specialinvoke r0.<org.noggit.JSONParser: void goTo(int)>(6);

        return;
    }

    public int getLevel()
    {
        int $i0;
        org.noggit.JSONParser r0;

        r0 := @this: org.noggit.JSONParser;

        $i0 = r0.<org.noggit.JSONParser: int ptr>;

        return $i0;
    }

    public long getPosition()
    {
        org.noggit.JSONParser r0;
        int $i0;
        long $l1, $l2, $l3;

        r0 := @this: org.noggit.JSONParser;

        $l2 = r0.<org.noggit.JSONParser: long gpos>;

        $i0 = r0.<org.noggit.JSONParser: int start>;

        $l1 = (long) $i0;

        $l3 = $l2 + $l1;

        return $l3;
    }

    static void <clinit>()
    {
        org.noggit.NullCharArr $r0;

        <org.noggit.JSONParser: int HAS_EXPONENT> = 2;

        <org.noggit.JSONParser: int HAS_FRACTION> = 1;

        <org.noggit.JSONParser: byte DID_MEMVAL> = 5;

        <org.noggit.JSONParser: byte DID_MEMNAME> = 4;

        <org.noggit.JSONParser: byte DID_ARRELEM> = 3;

        <org.noggit.JSONParser: byte DID_ARRSTART> = 2;

        <org.noggit.JSONParser: byte DID_OBJSTART> = 1;

        <org.noggit.JSONParser: int EOF> = 11;

        <org.noggit.JSONParser: int ARRAY_END> = 10;

        <org.noggit.JSONParser: int ARRAY_START> = 9;

        <org.noggit.JSONParser: int OBJECT_END> = 8;

        <org.noggit.JSONParser: int OBJECT_START> = 7;

        <org.noggit.JSONParser: int NULL> = 6;

        <org.noggit.JSONParser: int BOOLEAN> = 5;

        <org.noggit.JSONParser: int BIGNUMBER> = 4;

        <org.noggit.JSONParser: int NUMBER> = 3;

        <org.noggit.JSONParser: int LONG> = 2;

        <org.noggit.JSONParser: int STRING> = 1;

        $r0 = new org.noggit.NullCharArr;

        specialinvoke $r0.<org.noggit.NullCharArr: void <init>()>();

        <org.noggit.JSONParser: org.noggit.CharArr devNull> = $r0;

        return;
    }
}
