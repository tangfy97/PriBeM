public class org.waveprotocol.wave.concurrencycontrol.server.ConcurrencyControlCore extends java.lang.Object
{
    private final org.waveprotocol.wave.concurrencycontrol.server.DeltaHistory deltaHistory;

    public void <init>(org.waveprotocol.wave.concurrencycontrol.server.DeltaHistory)
    {
        org.waveprotocol.wave.concurrencycontrol.server.DeltaHistory r1;
        org.waveprotocol.wave.concurrencycontrol.server.ConcurrencyControlCore r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.server.ConcurrencyControlCore;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.server.DeltaHistory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.server.ConcurrencyControlCore: org.waveprotocol.wave.concurrencycontrol.server.DeltaHistory deltaHistory> = r1;

        return;
    }

    public org.waveprotocol.wave.model.operation.wave.WaveletDelta onClientDelta(org.waveprotocol.wave.model.operation.wave.WaveletDelta) throws org.waveprotocol.wave.model.operation.TransformException
    {
        java.lang.IllegalStateException $r34;
        org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta $r8;
        org.waveprotocol.wave.concurrencycontrol.server.ConcurrencyControlCore r2;
        org.waveprotocol.wave.model.operation.TransformException $r32;
        org.waveprotocol.wave.model.wave.ParticipantId $r12;
        byte $b2, $b5;
        java.util.List $r14;
        java.lang.StringBuilder $r17, $r19, $r23, $r25, $r26, $r28, $r31, $r33;
        long $l0, $l1, $l3, $l4, $l6, $l7;
        org.waveprotocol.wave.concurrencycontrol.common.DeltaPair $r10, $r35;
        org.waveprotocol.wave.model.version.HashedVersion $r1, $r4, $r7, $r13, $r18, $r24;
        int $i8, $i9;
        java.lang.String $r20, $r29;
        org.waveprotocol.wave.model.operation.wave.WaveletDelta r0, r30, $r36;
        org.waveprotocol.wave.concurrencycontrol.server.DeltaHistory $r3, $r5, $r6, $r27;

        r2 := @this: org.waveprotocol.wave.concurrencycontrol.server.ConcurrencyControlCore;

        r0 := @parameter0: org.waveprotocol.wave.model.operation.wave.WaveletDelta;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.operation.wave.WaveletDelta: org.waveprotocol.wave.model.version.HashedVersion getTargetVersion()>();

        $l0 = virtualinvoke $r1.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        $r3 = r2.<org.waveprotocol.wave.concurrencycontrol.server.ConcurrencyControlCore: org.waveprotocol.wave.concurrencycontrol.server.DeltaHistory deltaHistory>;

        $l1 = interfaceinvoke $r3.<org.waveprotocol.wave.concurrencycontrol.server.DeltaHistory: long getCurrentVersion()>();

        $b2 = $l0 cmp $l1;

        $i8 = (int) $b2;

        if $i8 <= 0 goto label1;

        $r32 = new org.waveprotocol.wave.model.operation.TransformException;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Client has a newer version than server knows. client: ");

        $r24 = virtualinvoke r0.<org.waveprotocol.wave.model.operation.wave.WaveletDelta: org.waveprotocol.wave.model.version.HashedVersion getTargetVersion()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", server: ");

        $r27 = r2.<org.waveprotocol.wave.concurrencycontrol.server.ConcurrencyControlCore: org.waveprotocol.wave.concurrencycontrol.server.DeltaHistory deltaHistory>;

        $l7 = interfaceinvoke $r27.<org.waveprotocol.wave.concurrencycontrol.server.DeltaHistory: long getCurrentVersion()>();

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l7);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r32.<org.waveprotocol.wave.model.operation.TransformException: void <init>(java.lang.String)>($r29);

        throw $r32;

     label1:
        r30 = r0;

     label2:
        $r4 = virtualinvoke r30.<org.waveprotocol.wave.model.operation.wave.WaveletDelta: org.waveprotocol.wave.model.version.HashedVersion getTargetVersion()>();

        $l3 = virtualinvoke $r4.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        $r5 = r2.<org.waveprotocol.wave.concurrencycontrol.server.ConcurrencyControlCore: org.waveprotocol.wave.concurrencycontrol.server.DeltaHistory deltaHistory>;

        $l4 = interfaceinvoke $r5.<org.waveprotocol.wave.concurrencycontrol.server.DeltaHistory: long getCurrentVersion()>();

        $b5 = $l3 cmp $l4;

        $i9 = (int) $b5;

        if $i9 >= 0 goto label4;

        $r6 = r2.<org.waveprotocol.wave.concurrencycontrol.server.ConcurrencyControlCore: org.waveprotocol.wave.concurrencycontrol.server.DeltaHistory deltaHistory>;

        $r7 = virtualinvoke r30.<org.waveprotocol.wave.model.operation.wave.WaveletDelta: org.waveprotocol.wave.model.version.HashedVersion getTargetVersion()>();

        $l6 = virtualinvoke $r7.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        $r8 = interfaceinvoke $r6.<org.waveprotocol.wave.concurrencycontrol.server.DeltaHistory: org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta getDeltaStartingAt(long)>($l6);

        if $r8 != null goto label3;

        $r34 = new java.lang.IllegalStateException;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No delta at version: ");

        $r18 = virtualinvoke r30.<org.waveprotocol.wave.model.operation.wave.WaveletDelta: org.waveprotocol.wave.model.version.HashedVersion getTargetVersion()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r34.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r20);

        throw $r34;

     label3:
        $r35 = new org.waveprotocol.wave.concurrencycontrol.common.DeltaPair;

        specialinvoke $r35.<org.waveprotocol.wave.concurrencycontrol.common.DeltaPair: void <init>(java.lang.Iterable,java.lang.Iterable)>(r30, $r8);

        $r10 = virtualinvoke $r35.<org.waveprotocol.wave.concurrencycontrol.common.DeltaPair: org.waveprotocol.wave.concurrencycontrol.common.DeltaPair transform()>();

        $r36 = new org.waveprotocol.wave.model.operation.wave.WaveletDelta;

        $r12 = virtualinvoke r0.<org.waveprotocol.wave.model.operation.wave.WaveletDelta: org.waveprotocol.wave.model.wave.ParticipantId getAuthor()>();

        $r13 = virtualinvoke $r8.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: org.waveprotocol.wave.model.version.HashedVersion getResultingVersion()>();

        $r14 = virtualinvoke $r10.<org.waveprotocol.wave.concurrencycontrol.common.DeltaPair: java.util.List getClient()>();

        specialinvoke $r36.<org.waveprotocol.wave.model.operation.wave.WaveletDelta: void <init>(org.waveprotocol.wave.model.wave.ParticipantId,org.waveprotocol.wave.model.version.HashedVersion,java.lang.Iterable)>($r12, $r13, $r14);

        r30 = $r36;

        goto label2;

     label4:
        return r30;
    }

    public org.waveprotocol.wave.concurrencycontrol.server.ConcurrencyControlCore$ReOpenInfo reopen(java.util.List)
    {
        org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta r14;
        org.waveprotocol.wave.concurrencycontrol.server.ConcurrencyControlCore r2;
        long $l1, $l2;
        java.util.ArrayList $r0;
        org.waveprotocol.wave.concurrencycontrol.server.ConcurrencyControlCore$ReOpenInfo $r15;
        int $i0, i3, $i5;
        org.waveprotocol.wave.model.version.HashedVersion $r5, $r8, $r11, $r13;
        boolean $z0;
        java.util.List r1;
        org.waveprotocol.wave.concurrencycontrol.server.DeltaHistory $r3, $r6, $r12;
        java.lang.Object $r4, $r7, $r10;

        r2 := @this: org.waveprotocol.wave.concurrencycontrol.server.ConcurrencyControlCore;

        r1 := @parameter0: java.util.List;

        $r0 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.ArrayList newArrayList()>();

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        i3 = $i0 - 1;

     label1:
        if i3 < 0 goto label5;

        $r3 = r2.<org.waveprotocol.wave.concurrencycontrol.server.ConcurrencyControlCore: org.waveprotocol.wave.concurrencycontrol.server.DeltaHistory deltaHistory>;

        $r4 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i3);

        $r5 = (org.waveprotocol.wave.model.version.HashedVersion) $r4;

        $z0 = interfaceinvoke $r3.<org.waveprotocol.wave.concurrencycontrol.server.DeltaHistory: boolean hasSignature(org.waveprotocol.wave.model.version.HashedVersion)>($r5);

        if $z0 == 0 goto label4;

        $r6 = r2.<org.waveprotocol.wave.concurrencycontrol.server.ConcurrencyControlCore: org.waveprotocol.wave.concurrencycontrol.server.DeltaHistory deltaHistory>;

        $r7 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i3);

        $r8 = (org.waveprotocol.wave.model.version.HashedVersion) $r7;

        $l1 = virtualinvoke $r8.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        r14 = interfaceinvoke $r6.<org.waveprotocol.wave.concurrencycontrol.server.DeltaHistory: org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta getDeltaStartingAt(long)>($l1);

     label2:
        if r14 == null goto label3;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r14);

        $r12 = r2.<org.waveprotocol.wave.concurrencycontrol.server.ConcurrencyControlCore: org.waveprotocol.wave.concurrencycontrol.server.DeltaHistory deltaHistory>;

        $r13 = virtualinvoke r14.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: org.waveprotocol.wave.model.version.HashedVersion getResultingVersion()>();

        $l2 = virtualinvoke $r13.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        r14 = interfaceinvoke $r12.<org.waveprotocol.wave.concurrencycontrol.server.DeltaHistory: org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta getDeltaStartingAt(long)>($l2);

        goto label2;

     label3:
        $r15 = new org.waveprotocol.wave.concurrencycontrol.server.ConcurrencyControlCore$ReOpenInfo;

        $r10 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i3);

        $r11 = (org.waveprotocol.wave.model.version.HashedVersion) $r10;

        specialinvoke $r15.<org.waveprotocol.wave.concurrencycontrol.server.ConcurrencyControlCore$ReOpenInfo: void <init>(org.waveprotocol.wave.concurrencycontrol.server.ConcurrencyControlCore,org.waveprotocol.wave.model.version.HashedVersion,java.util.List)>(r2, $r11, $r0);

        return $r15;

     label4:
        $i5 = (int) -1;

        i3 = i3 + $i5;

        goto label1;

     label5:
        return null;
    }
}
