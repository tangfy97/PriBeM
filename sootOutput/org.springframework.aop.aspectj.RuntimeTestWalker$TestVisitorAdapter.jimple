class org.springframework.aop.aspectj.RuntimeTestWalker$TestVisitorAdapter extends java.lang.Object implements org.aspectj.weaver.ast.ITestVisitor
{
    protected static final int THIS_VAR;
    protected static final int TARGET_VAR;
    protected static final int AT_THIS_VAR;
    protected static final int AT_TARGET_VAR;
    protected static final int AT_ANNOTATION_VAR;

    private void <init>()
    {
        org.springframework.aop.aspectj.RuntimeTestWalker$TestVisitorAdapter r0;

        r0 := @this: org.springframework.aop.aspectj.RuntimeTestWalker$TestVisitorAdapter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void visit(org.aspectj.weaver.ast.And)
    {
        org.aspectj.weaver.ast.Test $r1, $r3;
        org.aspectj.weaver.ast.And r0;
        org.springframework.aop.aspectj.RuntimeTestWalker$TestVisitorAdapter r2;

        r2 := @this: org.springframework.aop.aspectj.RuntimeTestWalker$TestVisitorAdapter;

        r0 := @parameter0: org.aspectj.weaver.ast.And;

        $r1 = virtualinvoke r0.<org.aspectj.weaver.ast.And: org.aspectj.weaver.ast.Test getLeft()>();

        virtualinvoke $r1.<org.aspectj.weaver.ast.Test: void accept(org.aspectj.weaver.ast.ITestVisitor)>(r2);

        $r3 = virtualinvoke r0.<org.aspectj.weaver.ast.And: org.aspectj.weaver.ast.Test getRight()>();

        virtualinvoke $r3.<org.aspectj.weaver.ast.Test: void accept(org.aspectj.weaver.ast.ITestVisitor)>(r2);

        return;
    }

    public void visit(org.aspectj.weaver.ast.Or)
    {
        org.aspectj.weaver.ast.Or r0;
        org.aspectj.weaver.ast.Test $r1, $r3;
        org.springframework.aop.aspectj.RuntimeTestWalker$TestVisitorAdapter r2;

        r2 := @this: org.springframework.aop.aspectj.RuntimeTestWalker$TestVisitorAdapter;

        r0 := @parameter0: org.aspectj.weaver.ast.Or;

        $r1 = virtualinvoke r0.<org.aspectj.weaver.ast.Or: org.aspectj.weaver.ast.Test getLeft()>();

        virtualinvoke $r1.<org.aspectj.weaver.ast.Test: void accept(org.aspectj.weaver.ast.ITestVisitor)>(r2);

        $r3 = virtualinvoke r0.<org.aspectj.weaver.ast.Or: org.aspectj.weaver.ast.Test getRight()>();

        virtualinvoke $r3.<org.aspectj.weaver.ast.Test: void accept(org.aspectj.weaver.ast.ITestVisitor)>(r2);

        return;
    }

    public void visit(org.aspectj.weaver.ast.Not)
    {
        org.aspectj.weaver.ast.Not r0;
        org.aspectj.weaver.ast.Test $r1;
        org.springframework.aop.aspectj.RuntimeTestWalker$TestVisitorAdapter r2;

        r2 := @this: org.springframework.aop.aspectj.RuntimeTestWalker$TestVisitorAdapter;

        r0 := @parameter0: org.aspectj.weaver.ast.Not;

        $r1 = virtualinvoke r0.<org.aspectj.weaver.ast.Not: org.aspectj.weaver.ast.Test getBody()>();

        virtualinvoke $r1.<org.aspectj.weaver.ast.Test: void accept(org.aspectj.weaver.ast.ITestVisitor)>(r2);

        return;
    }

    public void visit(org.aspectj.weaver.ast.Instanceof)
    {
        org.aspectj.weaver.ast.Instanceof r1;
        org.springframework.aop.aspectj.RuntimeTestWalker$TestVisitorAdapter r0;

        r0 := @this: org.springframework.aop.aspectj.RuntimeTestWalker$TestVisitorAdapter;

        r1 := @parameter0: org.aspectj.weaver.ast.Instanceof;

        return;
    }

    public void visit(org.aspectj.weaver.ast.Literal)
    {
        org.aspectj.weaver.ast.Literal r1;
        org.springframework.aop.aspectj.RuntimeTestWalker$TestVisitorAdapter r0;

        r0 := @this: org.springframework.aop.aspectj.RuntimeTestWalker$TestVisitorAdapter;

        r1 := @parameter0: org.aspectj.weaver.ast.Literal;

        return;
    }

    public void visit(org.aspectj.weaver.ast.Call)
    {
        org.aspectj.weaver.ast.Call r1;
        org.springframework.aop.aspectj.RuntimeTestWalker$TestVisitorAdapter r0;

        r0 := @this: org.springframework.aop.aspectj.RuntimeTestWalker$TestVisitorAdapter;

        r1 := @parameter0: org.aspectj.weaver.ast.Call;

        return;
    }

    public void visit(org.aspectj.weaver.ast.FieldGetCall)
    {
        org.aspectj.weaver.ast.FieldGetCall r1;
        org.springframework.aop.aspectj.RuntimeTestWalker$TestVisitorAdapter r0;

        r0 := @this: org.springframework.aop.aspectj.RuntimeTestWalker$TestVisitorAdapter;

        r1 := @parameter0: org.aspectj.weaver.ast.FieldGetCall;

        return;
    }

    public void visit(org.aspectj.weaver.ast.HasAnnotation)
    {
        org.aspectj.weaver.ast.HasAnnotation r1;
        org.springframework.aop.aspectj.RuntimeTestWalker$TestVisitorAdapter r0;

        r0 := @this: org.springframework.aop.aspectj.RuntimeTestWalker$TestVisitorAdapter;

        r1 := @parameter0: org.aspectj.weaver.ast.HasAnnotation;

        return;
    }

    public void visit(org.aspectj.weaver.internal.tools.MatchingContextBasedTest)
    {
        org.aspectj.weaver.internal.tools.MatchingContextBasedTest r1;
        org.springframework.aop.aspectj.RuntimeTestWalker$TestVisitorAdapter r0;

        r0 := @this: org.springframework.aop.aspectj.RuntimeTestWalker$TestVisitorAdapter;

        r1 := @parameter0: org.aspectj.weaver.internal.tools.MatchingContextBasedTest;

        return;
    }

    protected int getVarType(org.aspectj.weaver.reflect.ReflectionVar)
    {
        java.lang.IllegalStateException $r6, $r8;
        java.lang.IllegalAccessException $r5;
        java.lang.reflect.Field $r1;
        java.lang.Integer $r4;
        org.springframework.aop.aspectj.RuntimeTestWalker$TestVisitorAdapter r9;
        java.lang.NoSuchFieldException $r7;
        org.aspectj.weaver.reflect.ReflectionVar r2;
        int $i0;
        java.lang.Class $r0;
        java.lang.Object $r3;

        r9 := @this: org.springframework.aop.aspectj.RuntimeTestWalker$TestVisitorAdapter;

        r2 := @parameter0: org.aspectj.weaver.reflect.ReflectionVar;

     label1:
        $r0 = class "Lorg/aspectj/weaver/reflect/ReflectionVar;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("varType");

        staticinvoke <org.springframework.util.ReflectionUtils: void makeAccessible(java.lang.reflect.Field)>($r1);

        $r3 = virtualinvoke $r1.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r2);

        $r4 = (java.lang.Integer) $r3;

        $i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

     label2:
        return $i0;

     label3:
        $r7 := @caughtexception;

        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("the version of aspectjtools.jar / aspectjweaver.jar on the classpath is incompatible with this version of Spring:- expected field \'varType\' is not present on ReflectionVar class");

        throw $r8;

     label4:
        $r5 := @caughtexception;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Unable to access ReflectionVar.varType field");

        throw $r6;

        catch java.lang.NoSuchFieldException from label1 to label2 with label3;
        catch java.lang.IllegalAccessException from label1 to label2 with label4;
    }

    void <init>(org.springframework.aop.aspectj.RuntimeTestWalker$TestVisitorAdapter)
    {
        org.springframework.aop.aspectj.RuntimeTestWalker$TestVisitorAdapter r0, r1;

        r0 := @this: org.springframework.aop.aspectj.RuntimeTestWalker$TestVisitorAdapter;

        r1 := @parameter0: org.springframework.aop.aspectj.RuntimeTestWalker$TestVisitorAdapter;

        specialinvoke r0.<org.springframework.aop.aspectj.RuntimeTestWalker$TestVisitorAdapter: void <init>()>();

        return;
    }

    public static void <clinit>()
    {
        <org.springframework.aop.aspectj.RuntimeTestWalker$TestVisitorAdapter: int AT_ANNOTATION_VAR> = 8;

        <org.springframework.aop.aspectj.RuntimeTestWalker$TestVisitorAdapter: int AT_TARGET_VAR> = 4;

        <org.springframework.aop.aspectj.RuntimeTestWalker$TestVisitorAdapter: int AT_THIS_VAR> = 3;

        <org.springframework.aop.aspectj.RuntimeTestWalker$TestVisitorAdapter: int TARGET_VAR> = 1;

        <org.springframework.aop.aspectj.RuntimeTestWalker$TestVisitorAdapter: int THIS_VAR> = 0;

        return;
    }
}
