class org.apache.tika.parser.mp3.MpegStream extends java.io.PushbackInputStream
{
    private static final int[] BIT_RATE_MPEG1_L1;
    private static final int[] BIT_RATE_MPEG1_L2;
    private static final int[] BIT_RATE_MPEG1_L3;
    private static final int[] BIT_RATE_MPEG2_L1;
    private static final int[] BIT_RATE_MPEG2_L2;
    private static final int[] SAMPLE_RATE_MPEG1;
    private static final int[] SAMPLE_RATE_MPEG2;
    private static final int[] SAMPLE_RATE_MPEG2_5;
    private static final int[][] SAMPLE_RATE;
    private static final int SAMPLE_COUNT_L1;
    private static final int SAMPLE_COUNT_L2;
    private static final int HEADER_SIZE;
    private org.apache.tika.parser.mp3.AudioFrame currentHeader;
    private boolean endOfStream;

    public void <init>(java.io.InputStream)
    {
        org.apache.tika.parser.mp3.MpegStream r0;
        java.io.InputStream r1;

        r0 := @this: org.apache.tika.parser.mp3.MpegStream;

        r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<java.io.PushbackInputStream: void <init>(java.io.InputStream,int)>(r1, 8);

        return;
    }

    public org.apache.tika.parser.mp3.AudioFrame nextFrame() throws java.io.IOException
    {
        org.apache.tika.parser.mp3.MpegStream$HeaderBitField $r1;
        org.apache.tika.parser.mp3.AudioFrame $r2, r3;
        org.apache.tika.parser.mp3.MpegStream r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.tika.parser.mp3.MpegStream;

        r3 = null;

     label1:
        $z2 = r0.<org.apache.tika.parser.mp3.MpegStream: boolean endOfStream>;

        if $z2 != 0 goto label3;

        if r3 != null goto label3;

        specialinvoke r0.<org.apache.tika.parser.mp3.MpegStream: void findFrameSyncByte()>();

        $z0 = r0.<org.apache.tika.parser.mp3.MpegStream: boolean endOfStream>;

        if $z0 != 0 goto label1;

        $r1 = specialinvoke r0.<org.apache.tika.parser.mp3.MpegStream: org.apache.tika.parser.mp3.MpegStream$HeaderBitField createHeaderField()>();

        $z1 = r0.<org.apache.tika.parser.mp3.MpegStream: boolean endOfStream>;

        if $z1 != 0 goto label2;

        $r2 = specialinvoke r0.<org.apache.tika.parser.mp3.MpegStream: org.apache.tika.parser.mp3.AudioFrame createHeader(org.apache.tika.parser.mp3.MpegStream$HeaderBitField)>($r1);

        r3 = $r2;

        if $r2 != null goto label2;

        specialinvoke r0.<org.apache.tika.parser.mp3.MpegStream: void pushBack(org.apache.tika.parser.mp3.MpegStream$HeaderBitField)>($r1);

     label2:
        goto label1;

     label3:
        r0.<org.apache.tika.parser.mp3.MpegStream: org.apache.tika.parser.mp3.AudioFrame currentHeader> = r3;

        return r3;
    }

    public boolean skipFrame() throws java.io.IOException
    {
        int $i0, $i1;
        org.apache.tika.parser.mp3.AudioFrame $r1, $r2;
        org.apache.tika.parser.mp3.MpegStream r0;
        long $l2;
        java.io.InputStream $r3;

        r0 := @this: org.apache.tika.parser.mp3.MpegStream;

        $r1 = r0.<org.apache.tika.parser.mp3.MpegStream: org.apache.tika.parser.mp3.AudioFrame currentHeader>;

        if $r1 == null goto label1;

        $r3 = r0.<org.apache.tika.parser.mp3.MpegStream: java.io.InputStream in>;

        $r2 = r0.<org.apache.tika.parser.mp3.MpegStream: org.apache.tika.parser.mp3.AudioFrame currentHeader>;

        $i0 = virtualinvoke $r2.<org.apache.tika.parser.mp3.AudioFrame: int getLength()>();

        $i1 = $i0 - 4;

        $l2 = (long) $i1;

        staticinvoke <org.apache.tika.parser.mp3.MpegStream: void skipStream(java.io.InputStream,long)>($r3, $l2);

        r0.<org.apache.tika.parser.mp3.MpegStream: org.apache.tika.parser.mp3.AudioFrame currentHeader> = null;

        return 1;

     label1:
        return 0;
    }

    private void findFrameSyncByte() throws java.io.IOException
    {
        int $i0;
        org.apache.tika.parser.mp3.MpegStream r0;
        boolean $z0, z1;

        r0 := @this: org.apache.tika.parser.mp3.MpegStream;

        z1 = 0;

     label1:
        if z1 != 0 goto label2;

        $z0 = r0.<org.apache.tika.parser.mp3.MpegStream: boolean endOfStream>;

        if $z0 != 0 goto label2;

        $i0 = specialinvoke r0.<org.apache.tika.parser.mp3.MpegStream: int nextByte()>();

        if $i0 != 255 goto label1;

        z1 = 1;

        goto label1;

     label2:
        return;
    }

    private org.apache.tika.parser.mp3.MpegStream$HeaderBitField createHeaderField() throws java.io.IOException
    {
        int $i0, $i1, $i2;
        org.apache.tika.parser.mp3.MpegStream$HeaderBitField $r0;
        org.apache.tika.parser.mp3.MpegStream r1;

        r1 := @this: org.apache.tika.parser.mp3.MpegStream;

        $r0 = new org.apache.tika.parser.mp3.MpegStream$HeaderBitField;

        specialinvoke $r0.<org.apache.tika.parser.mp3.MpegStream$HeaderBitField: void <init>(org.apache.tika.parser.mp3.MpegStream$1)>(null);

        $i0 = specialinvoke r1.<org.apache.tika.parser.mp3.MpegStream: int nextByte()>();

        virtualinvoke $r0.<org.apache.tika.parser.mp3.MpegStream$HeaderBitField: void add(int)>($i0);

        $i1 = specialinvoke r1.<org.apache.tika.parser.mp3.MpegStream: int nextByte()>();

        virtualinvoke $r0.<org.apache.tika.parser.mp3.MpegStream$HeaderBitField: void add(int)>($i1);

        $i2 = specialinvoke r1.<org.apache.tika.parser.mp3.MpegStream: int nextByte()>();

        virtualinvoke $r0.<org.apache.tika.parser.mp3.MpegStream$HeaderBitField: void add(int)>($i2);

        return $r0;
    }

    private org.apache.tika.parser.mp3.AudioFrame createHeader(org.apache.tika.parser.mp3.MpegStream$HeaderBitField)
    {
        org.apache.tika.parser.mp3.MpegStream$HeaderBitField r0;
        org.apache.tika.parser.mp3.AudioFrame $r1;
        org.apache.tika.parser.mp3.MpegStream r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        float $f0;

        r2 := @this: org.apache.tika.parser.mp3.MpegStream;

        r0 := @parameter0: org.apache.tika.parser.mp3.MpegStream$HeaderBitField;

        $i0 = virtualinvoke r0.<org.apache.tika.parser.mp3.MpegStream$HeaderBitField: int get(int,int)>(21, 23);

        if $i0 == 7 goto label1;

        return null;

     label1:
        $i1 = virtualinvoke r0.<org.apache.tika.parser.mp3.MpegStream$HeaderBitField: int get(int,int)>(19, 20);

        $i2 = virtualinvoke r0.<org.apache.tika.parser.mp3.MpegStream$HeaderBitField: int get(int,int)>(17, 18);

        $i3 = virtualinvoke r0.<org.apache.tika.parser.mp3.MpegStream$HeaderBitField: int get(int,int)>(12, 15);

        $i4 = virtualinvoke r0.<org.apache.tika.parser.mp3.MpegStream$HeaderBitField: int get(int,int)>(10, 11);

        $i5 = virtualinvoke r0.<org.apache.tika.parser.mp3.MpegStream$HeaderBitField: int get(int)>(9);

        if $i1 == 1 goto label2;

        if $i2 == 0 goto label2;

        if $i3 == 0 goto label2;

        if $i3 == 15 goto label2;

        if $i4 != 3 goto label3;

     label2:
        return null;

     label3:
        $i6 = staticinvoke <org.apache.tika.parser.mp3.MpegStream: int calculateBitRate(int,int,int)>($i1, $i2, $i3);

        $i7 = staticinvoke <org.apache.tika.parser.mp3.MpegStream: int calculateSampleRate(int,int)>($i1, $i4);

        $i8 = staticinvoke <org.apache.tika.parser.mp3.MpegStream: int calculateFrameLength(int,int,int,int)>($i2, $i6, $i7, $i5);

        $f0 = staticinvoke <org.apache.tika.parser.mp3.MpegStream: float calculateDuration(int,int)>($i2, $i7);

        $i9 = virtualinvoke r0.<org.apache.tika.parser.mp3.MpegStream$HeaderBitField: int get(int,int)>(6, 7);

        $i10 = staticinvoke <org.apache.tika.parser.mp3.MpegStream: int calculateChannels(int)>($i9);

        $r1 = new org.apache.tika.parser.mp3.AudioFrame;

        specialinvoke $r1.<org.apache.tika.parser.mp3.AudioFrame: void <init>(int,int,int,int,int,int,float)>($i1, $i2, $i6, $i7, $i10, $i8, $f0);

        return $r1;
    }

    private int nextByte() throws java.io.IOException
    {
        int $i0, i1, $i2, $i4;
        org.apache.tika.parser.mp3.MpegStream r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.tika.parser.mp3.MpegStream;

        i1 = 0;

        $z0 = r0.<org.apache.tika.parser.mp3.MpegStream: boolean endOfStream>;

        if $z0 != 0 goto label1;

        $i0 = virtualinvoke r0.<org.apache.tika.parser.mp3.MpegStream: int read()>();

        i1 = $i0;

        $i4 = (int) -1;

        if $i0 != $i4 goto label1;

        r0.<org.apache.tika.parser.mp3.MpegStream: boolean endOfStream> = 1;

     label1:
        $z1 = r0.<org.apache.tika.parser.mp3.MpegStream: boolean endOfStream>;

        if $z1 == 0 goto label2;

        $i2 = 0;

        goto label3;

     label2:
        $i2 = i1;

     label3:
        return $i2;
    }

    private void pushBack(org.apache.tika.parser.mp3.MpegStream$HeaderBitField) throws java.io.IOException
    {
        org.apache.tika.parser.mp3.MpegStream$HeaderBitField r1;
        byte[] $r2;
        org.apache.tika.parser.mp3.MpegStream r0;

        r0 := @this: org.apache.tika.parser.mp3.MpegStream;

        r1 := @parameter0: org.apache.tika.parser.mp3.MpegStream$HeaderBitField;

        $r2 = virtualinvoke r1.<org.apache.tika.parser.mp3.MpegStream$HeaderBitField: byte[] toArray()>();

        virtualinvoke r0.<org.apache.tika.parser.mp3.MpegStream: void unread(byte[])>($r2);

        return;
    }

    private static void skipStream(java.io.InputStream, long) throws java.io.IOException
    {
        long l0, $l2, l4, l5;
        byte $b1, $b3, $b6;
        int $i7, $i8;
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        l0 := @parameter1: long;

        l4 = l0;

        l5 = 0L;

     label1:
        $b6 = l4 cmp 0L;

        $i7 = (int) $b6;

        if $i7 <= 0 goto label2;

        $b1 = l5 cmp 0L;

        $i8 = (int) $b1;

        if $i8 < 0 goto label2;

        $l2 = virtualinvoke r0.<java.io.InputStream: long skip(long)>(l4);

        l5 = $l2;

        $b3 = $l2 cmp -1L;

        if $b3 == 0 goto label1;

        l4 = l4 - $l2;

        goto label1;

     label2:
        return;
    }

    private static int calculateBitRate(int, int, int)
    {
        int[] r0;
        int i0, i1, i2, $i3;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r0 = null;

        if i0 != 3 goto label5;

        tableswitch(i1)
        {
            case 1: goto label3;
            case 2: goto label2;
            case 3: goto label1;
            default: goto label4;
        };

     label1:
        r0 = <org.apache.tika.parser.mp3.MpegStream: int[] BIT_RATE_MPEG1_L1>;

        goto label4;

     label2:
        r0 = <org.apache.tika.parser.mp3.MpegStream: int[] BIT_RATE_MPEG1_L2>;

        goto label4;

     label3:
        r0 = <org.apache.tika.parser.mp3.MpegStream: int[] BIT_RATE_MPEG1_L3>;

     label4:
        goto label7;

     label5:
        if i1 != 3 goto label6;

        r0 = <org.apache.tika.parser.mp3.MpegStream: int[] BIT_RATE_MPEG2_L1>;

        goto label7;

     label6:
        r0 = <org.apache.tika.parser.mp3.MpegStream: int[] BIT_RATE_MPEG2_L2>;

     label7:
        $i3 = r0[i2];

        return $i3;
    }

    private static int calculateSampleRate(int, int)
    {
        int[][] $r0;
        int[] $r1;
        int i0, i1, $i2;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r0 = <org.apache.tika.parser.mp3.MpegStream: int[][] SAMPLE_RATE>;

        $r1 = $r0[i0];

        $i2 = $r1[i1];

        return $i2;
    }

    private static int calculateFrameLength(int, int, int, int)
    {
        int i0, i1, i2, $i3, i4, $i5, $i6, $i7, $i8, $i9, $i10;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i4 := @parameter3: int;

        if i0 != 3 goto label1;

        $i7 = 12 * i1;

        $i8 = $i7 / i2;

        $i9 = $i8 + i4;

        $i10 = $i9 * 4;

        return $i10;

     label1:
        $i3 = 144 * i1;

        $i5 = $i3 / i2;

        $i6 = $i5 + i4;

        return $i6;
    }

    private static float calculateDuration(int, int)
    {
        short $s2;
        int i0, i1;
        float $f0, $f1, $f2, $f3;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 != 3 goto label1;

        $s2 = 384;

        goto label2;

     label1:
        $s2 = 1152;

     label2:
        $f0 = (float) i1;

        $f2 = 1000.0F / $f0;

        $f1 = (float) $s2;

        $f3 = $f2 * $f1;

        return $f3;
    }

    private static int calculateChannels(int)
    {
        int i0;
        byte $b1;

        i0 := @parameter0: int;

        if i0 >= 3 goto label1;

        $b1 = 2;

        goto label2;

     label1:
        $b1 = 1;

     label2:
        return $b1;
    }

    private static int[][] createSampleRateTable()
    {
        int[][] r0;
        int[] $r1, $r2, $r3;

        r0 = newarray (int[])[4];

        $r1 = <org.apache.tika.parser.mp3.MpegStream: int[] SAMPLE_RATE_MPEG1>;

        r0[3] = $r1;

        $r2 = <org.apache.tika.parser.mp3.MpegStream: int[] SAMPLE_RATE_MPEG2>;

        r0[2] = $r2;

        $r3 = <org.apache.tika.parser.mp3.MpegStream: int[] SAMPLE_RATE_MPEG2_5>;

        r0[0] = $r3;

        return r0;
    }

    static void <clinit>()
    {
        int[][] $r8;
        int[] $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7;
        int $i1, $i3, $i5, $i7, $i9, $i11, $i13, $i15, $i17, $i19, $i21, $i23, $i25, $i27, $i29, $i31, $i33;

        <org.apache.tika.parser.mp3.MpegStream: int HEADER_SIZE> = 4;

        <org.apache.tika.parser.mp3.MpegStream: int SAMPLE_COUNT_L2> = 1152;

        <org.apache.tika.parser.mp3.MpegStream: int SAMPLE_COUNT_L1> = 384;

        $r0 = newarray (int)[15];

        $r0[0] = 0;

        $r0[1] = 32000;

        $i1 = (int) 64000;

        $r0[2] = $i1;

        $r0[3] = 96000;

        $r0[4] = 128000;

        $r0[5] = 160000;

        $r0[6] = 192000;

        $r0[7] = 224000;

        $r0[8] = 256000;

        $r0[9] = 288000;

        $r0[10] = 320000;

        $r0[11] = 352000;

        $r0[12] = 384000;

        $r0[13] = 416000;

        $r0[14] = 448000;

        <org.apache.tika.parser.mp3.MpegStream: int[] BIT_RATE_MPEG1_L1> = $r0;

        $r1 = newarray (int)[15];

        $r1[0] = 0;

        $r1[1] = 32000;

        $i3 = (int) 48000;

        $r1[2] = $i3;

        $i5 = (int) 56000;

        $r1[3] = $i5;

        $i7 = (int) 64000;

        $r1[4] = $i7;

        $r1[5] = 80000;

        $r1[6] = 96000;

        $r1[7] = 112000;

        $r1[8] = 128000;

        $r1[9] = 160000;

        $r1[10] = 192000;

        $r1[11] = 224000;

        $r1[12] = 256000;

        $r1[13] = 320000;

        $r1[14] = 384000;

        <org.apache.tika.parser.mp3.MpegStream: int[] BIT_RATE_MPEG1_L2> = $r1;

        $r2 = newarray (int)[15];

        $r2[0] = 0;

        $r2[1] = 32000;

        $i9 = (int) 40000;

        $r2[2] = $i9;

        $i11 = (int) 48000;

        $r2[3] = $i11;

        $i13 = (int) 56000;

        $r2[4] = $i13;

        $i15 = (int) 64000;

        $r2[5] = $i15;

        $r2[6] = 80000;

        $r2[7] = 96000;

        $r2[8] = 112000;

        $r2[9] = 128000;

        $r2[10] = 160000;

        $r2[11] = 192000;

        $r2[12] = 224000;

        $r2[13] = 256000;

        $r2[14] = 320000;

        <org.apache.tika.parser.mp3.MpegStream: int[] BIT_RATE_MPEG1_L3> = $r2;

        $r3 = newarray (int)[15];

        $r3[0] = 0;

        $r3[1] = 32000;

        $i17 = (int) 48000;

        $r3[2] = $i17;

        $i19 = (int) 56000;

        $r3[3] = $i19;

        $i21 = (int) 64000;

        $r3[4] = $i21;

        $r3[5] = 80000;

        $r3[6] = 96000;

        $r3[7] = 112000;

        $r3[8] = 128000;

        $r3[9] = 144000;

        $r3[10] = 160000;

        $r3[11] = 176000;

        $r3[12] = 192000;

        $r3[13] = 224000;

        $r3[14] = 256000;

        <org.apache.tika.parser.mp3.MpegStream: int[] BIT_RATE_MPEG2_L1> = $r3;

        $r4 = newarray (int)[15];

        $r4[0] = 0;

        $r4[1] = 8000;

        $r4[2] = 16000;

        $r4[3] = 24000;

        $r4[4] = 32000;

        $i23 = (int) 40000;

        $r4[5] = $i23;

        $i25 = (int) 48000;

        $r4[6] = $i25;

        $i27 = (int) 56000;

        $r4[7] = $i27;

        $i29 = (int) 64000;

        $r4[8] = $i29;

        $r4[9] = 80000;

        $r4[10] = 96000;

        $r4[11] = 112000;

        $r4[12] = 128000;

        $r4[13] = 144000;

        $r4[14] = 160000;

        <org.apache.tika.parser.mp3.MpegStream: int[] BIT_RATE_MPEG2_L2> = $r4;

        $r5 = newarray (int)[3];

        $i31 = (int) 44100;

        $r5[0] = $i31;

        $i33 = (int) 48000;

        $r5[1] = $i33;

        $r5[2] = 32000;

        <org.apache.tika.parser.mp3.MpegStream: int[] SAMPLE_RATE_MPEG1> = $r5;

        $r6 = newarray (int)[3];

        $r6[0] = 22050;

        $r6[1] = 24000;

        $r6[2] = 16000;

        <org.apache.tika.parser.mp3.MpegStream: int[] SAMPLE_RATE_MPEG2> = $r6;

        $r7 = newarray (int)[3];

        $r7[0] = 11025;

        $r7[1] = 12000;

        $r7[2] = 8000;

        <org.apache.tika.parser.mp3.MpegStream: int[] SAMPLE_RATE_MPEG2_5> = $r7;

        $r8 = staticinvoke <org.apache.tika.parser.mp3.MpegStream: int[][] createSampleRateTable()>();

        <org.apache.tika.parser.mp3.MpegStream: int[][] SAMPLE_RATE> = $r8;

        return;
    }
}
