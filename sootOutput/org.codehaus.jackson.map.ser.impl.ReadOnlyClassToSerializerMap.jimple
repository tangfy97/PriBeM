public final class org.codehaus.jackson.map.ser.impl.ReadOnlyClassToSerializerMap extends java.lang.Object
{
    protected final org.codehaus.jackson.map.ser.impl.JsonSerializerMap _map;
    protected final org.codehaus.jackson.map.ser.impl.SerializerCache$TypeKey _cacheKey;

    private void <init>(org.codehaus.jackson.map.ser.impl.JsonSerializerMap)
    {
        org.codehaus.jackson.map.ser.impl.SerializerCache$TypeKey $r1;
        java.lang.Class $r2;
        org.codehaus.jackson.map.ser.impl.ReadOnlyClassToSerializerMap r0;
        org.codehaus.jackson.map.ser.impl.JsonSerializerMap r3;

        r0 := @this: org.codehaus.jackson.map.ser.impl.ReadOnlyClassToSerializerMap;

        r3 := @parameter0: org.codehaus.jackson.map.ser.impl.JsonSerializerMap;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.codehaus.jackson.map.ser.impl.SerializerCache$TypeKey;

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        specialinvoke $r1.<org.codehaus.jackson.map.ser.impl.SerializerCache$TypeKey: void <init>(java.lang.Class,boolean)>($r2, 0);

        r0.<org.codehaus.jackson.map.ser.impl.ReadOnlyClassToSerializerMap: org.codehaus.jackson.map.ser.impl.SerializerCache$TypeKey _cacheKey> = $r1;

        r0.<org.codehaus.jackson.map.ser.impl.ReadOnlyClassToSerializerMap: org.codehaus.jackson.map.ser.impl.JsonSerializerMap _map> = r3;

        return;
    }

    public org.codehaus.jackson.map.ser.impl.ReadOnlyClassToSerializerMap instance()
    {
        org.codehaus.jackson.map.ser.impl.ReadOnlyClassToSerializerMap $r0, r1;
        org.codehaus.jackson.map.ser.impl.JsonSerializerMap $r2;

        r1 := @this: org.codehaus.jackson.map.ser.impl.ReadOnlyClassToSerializerMap;

        $r0 = new org.codehaus.jackson.map.ser.impl.ReadOnlyClassToSerializerMap;

        $r2 = r1.<org.codehaus.jackson.map.ser.impl.ReadOnlyClassToSerializerMap: org.codehaus.jackson.map.ser.impl.JsonSerializerMap _map>;

        specialinvoke $r0.<org.codehaus.jackson.map.ser.impl.ReadOnlyClassToSerializerMap: void <init>(org.codehaus.jackson.map.ser.impl.JsonSerializerMap)>($r2);

        return $r0;
    }

    public static org.codehaus.jackson.map.ser.impl.ReadOnlyClassToSerializerMap 'from'(java.util.HashMap)
    {
        java.util.HashMap r2;
        org.codehaus.jackson.map.ser.impl.ReadOnlyClassToSerializerMap $r0;
        org.codehaus.jackson.map.ser.impl.JsonSerializerMap $r1;

        r2 := @parameter0: java.util.HashMap;

        $r0 = new org.codehaus.jackson.map.ser.impl.ReadOnlyClassToSerializerMap;

        $r1 = new org.codehaus.jackson.map.ser.impl.JsonSerializerMap;

        specialinvoke $r1.<org.codehaus.jackson.map.ser.impl.JsonSerializerMap: void <init>(java.util.Map)>(r2);

        specialinvoke $r0.<org.codehaus.jackson.map.ser.impl.ReadOnlyClassToSerializerMap: void <init>(org.codehaus.jackson.map.ser.impl.JsonSerializerMap)>($r1);

        return $r0;
    }

    public org.codehaus.jackson.map.JsonSerializer typedValueSerializer(org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.map.ser.impl.SerializerCache$TypeKey $r2, $r3;
        org.codehaus.jackson.type.JavaType r1;
        org.codehaus.jackson.map.JsonSerializer $r5;
        org.codehaus.jackson.map.ser.impl.ReadOnlyClassToSerializerMap r0;
        org.codehaus.jackson.map.ser.impl.JsonSerializerMap $r4;

        r0 := @this: org.codehaus.jackson.map.ser.impl.ReadOnlyClassToSerializerMap;

        r1 := @parameter0: org.codehaus.jackson.type.JavaType;

        $r2 = r0.<org.codehaus.jackson.map.ser.impl.ReadOnlyClassToSerializerMap: org.codehaus.jackson.map.ser.impl.SerializerCache$TypeKey _cacheKey>;

        virtualinvoke $r2.<org.codehaus.jackson.map.ser.impl.SerializerCache$TypeKey: void resetTyped(org.codehaus.jackson.type.JavaType)>(r1);

        $r4 = r0.<org.codehaus.jackson.map.ser.impl.ReadOnlyClassToSerializerMap: org.codehaus.jackson.map.ser.impl.JsonSerializerMap _map>;

        $r3 = r0.<org.codehaus.jackson.map.ser.impl.ReadOnlyClassToSerializerMap: org.codehaus.jackson.map.ser.impl.SerializerCache$TypeKey _cacheKey>;

        $r5 = virtualinvoke $r4.<org.codehaus.jackson.map.ser.impl.JsonSerializerMap: org.codehaus.jackson.map.JsonSerializer find(org.codehaus.jackson.map.ser.impl.SerializerCache$TypeKey)>($r3);

        return $r5;
    }

    public org.codehaus.jackson.map.JsonSerializer typedValueSerializer(java.lang.Class)
    {
        org.codehaus.jackson.map.ser.impl.SerializerCache$TypeKey $r2, $r3;
        java.lang.Class r1;
        org.codehaus.jackson.map.JsonSerializer $r5;
        org.codehaus.jackson.map.ser.impl.ReadOnlyClassToSerializerMap r0;
        org.codehaus.jackson.map.ser.impl.JsonSerializerMap $r4;

        r0 := @this: org.codehaus.jackson.map.ser.impl.ReadOnlyClassToSerializerMap;

        r1 := @parameter0: java.lang.Class;

        $r2 = r0.<org.codehaus.jackson.map.ser.impl.ReadOnlyClassToSerializerMap: org.codehaus.jackson.map.ser.impl.SerializerCache$TypeKey _cacheKey>;

        virtualinvoke $r2.<org.codehaus.jackson.map.ser.impl.SerializerCache$TypeKey: void resetTyped(java.lang.Class)>(r1);

        $r4 = r0.<org.codehaus.jackson.map.ser.impl.ReadOnlyClassToSerializerMap: org.codehaus.jackson.map.ser.impl.JsonSerializerMap _map>;

        $r3 = r0.<org.codehaus.jackson.map.ser.impl.ReadOnlyClassToSerializerMap: org.codehaus.jackson.map.ser.impl.SerializerCache$TypeKey _cacheKey>;

        $r5 = virtualinvoke $r4.<org.codehaus.jackson.map.ser.impl.JsonSerializerMap: org.codehaus.jackson.map.JsonSerializer find(org.codehaus.jackson.map.ser.impl.SerializerCache$TypeKey)>($r3);

        return $r5;
    }

    public org.codehaus.jackson.map.JsonSerializer untypedValueSerializer(java.lang.Class)
    {
        org.codehaus.jackson.map.ser.impl.SerializerCache$TypeKey $r2, $r3;
        java.lang.Class r1;
        org.codehaus.jackson.map.JsonSerializer $r5;
        org.codehaus.jackson.map.ser.impl.ReadOnlyClassToSerializerMap r0;
        org.codehaus.jackson.map.ser.impl.JsonSerializerMap $r4;

        r0 := @this: org.codehaus.jackson.map.ser.impl.ReadOnlyClassToSerializerMap;

        r1 := @parameter0: java.lang.Class;

        $r2 = r0.<org.codehaus.jackson.map.ser.impl.ReadOnlyClassToSerializerMap: org.codehaus.jackson.map.ser.impl.SerializerCache$TypeKey _cacheKey>;

        virtualinvoke $r2.<org.codehaus.jackson.map.ser.impl.SerializerCache$TypeKey: void resetUntyped(java.lang.Class)>(r1);

        $r4 = r0.<org.codehaus.jackson.map.ser.impl.ReadOnlyClassToSerializerMap: org.codehaus.jackson.map.ser.impl.JsonSerializerMap _map>;

        $r3 = r0.<org.codehaus.jackson.map.ser.impl.ReadOnlyClassToSerializerMap: org.codehaus.jackson.map.ser.impl.SerializerCache$TypeKey _cacheKey>;

        $r5 = virtualinvoke $r4.<org.codehaus.jackson.map.ser.impl.JsonSerializerMap: org.codehaus.jackson.map.JsonSerializer find(org.codehaus.jackson.map.ser.impl.SerializerCache$TypeKey)>($r3);

        return $r5;
    }

    public org.codehaus.jackson.map.JsonSerializer untypedValueSerializer(org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.map.ser.impl.SerializerCache$TypeKey $r2, $r3;
        org.codehaus.jackson.type.JavaType r1;
        org.codehaus.jackson.map.JsonSerializer $r5;
        org.codehaus.jackson.map.ser.impl.ReadOnlyClassToSerializerMap r0;
        org.codehaus.jackson.map.ser.impl.JsonSerializerMap $r4;

        r0 := @this: org.codehaus.jackson.map.ser.impl.ReadOnlyClassToSerializerMap;

        r1 := @parameter0: org.codehaus.jackson.type.JavaType;

        $r2 = r0.<org.codehaus.jackson.map.ser.impl.ReadOnlyClassToSerializerMap: org.codehaus.jackson.map.ser.impl.SerializerCache$TypeKey _cacheKey>;

        virtualinvoke $r2.<org.codehaus.jackson.map.ser.impl.SerializerCache$TypeKey: void resetUntyped(org.codehaus.jackson.type.JavaType)>(r1);

        $r4 = r0.<org.codehaus.jackson.map.ser.impl.ReadOnlyClassToSerializerMap: org.codehaus.jackson.map.ser.impl.JsonSerializerMap _map>;

        $r3 = r0.<org.codehaus.jackson.map.ser.impl.ReadOnlyClassToSerializerMap: org.codehaus.jackson.map.ser.impl.SerializerCache$TypeKey _cacheKey>;

        $r5 = virtualinvoke $r4.<org.codehaus.jackson.map.ser.impl.JsonSerializerMap: org.codehaus.jackson.map.JsonSerializer find(org.codehaus.jackson.map.ser.impl.SerializerCache$TypeKey)>($r3);

        return $r5;
    }
}
