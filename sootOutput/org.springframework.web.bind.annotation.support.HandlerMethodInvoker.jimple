public class org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker extends java.lang.Object
{
    private static final java.lang.String MODEL_KEY_PREFIX_STALE;
    private static final org.apache.commons.logging.Log logger;
    private final org.springframework.web.bind.'annotation'.support.HandlerMethodResolver methodResolver;
    private final org.springframework.web.bind.support.WebBindingInitializer bindingInitializer;
    private final org.springframework.web.bind.support.SessionAttributeStore sessionAttributeStore;
    private final org.springframework.core.ParameterNameDiscoverer parameterNameDiscoverer;
    private final org.springframework.web.bind.support.WebArgumentResolver[] customArgumentResolvers;
    private final org.springframework.http.converter.HttpMessageConverter[] messageConverters;
    private final org.springframework.web.bind.support.SimpleSessionStatus sessionStatus;

    static void <clinit>()
    {
        java.lang.StringBuilder $r0, $r4;
        java.lang.Class $r1;
        org.apache.commons.logging.Log $r6;
        java.lang.String $r2, $r3, $r5;

        $r0 = new java.lang.StringBuilder;

        $r1 = class "Lorg/springframework/web/bind/support/SessionAttributeStore;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r2);

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>($r3);

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".STALE.");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        <org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: java.lang.String MODEL_KEY_PREFIX_STALE> = $r5;

        $r6 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lorg/springframework/web/bind/annotation/support/HandlerMethodInvoker;");

        <org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: org.apache.commons.logging.Log logger> = $r6;

        return;
    }

    public void <init>(org.springframework.web.bind.'annotation'.support.HandlerMethodResolver)
    {
        org.springframework.web.bind.'annotation'.support.HandlerMethodResolver r1;
        org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker r0;

        r0 := @this: org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker;

        r1 := @parameter0: org.springframework.web.bind.'annotation'.support.HandlerMethodResolver;

        specialinvoke r0.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: void <init>(org.springframework.web.bind.'annotation'.support.HandlerMethodResolver,org.springframework.web.bind.support.WebBindingInitializer)>(r1, null);

        return;
    }

    public void <init>(org.springframework.web.bind.'annotation'.support.HandlerMethodResolver, org.springframework.web.bind.support.WebBindingInitializer)
    {
        org.springframework.web.bind.support.WebBindingInitializer r2;
        org.springframework.web.bind.support.DefaultSessionAttributeStore $r3;
        org.springframework.web.bind.'annotation'.support.HandlerMethodResolver r1;
        org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker r0;

        r0 := @this: org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker;

        r1 := @parameter0: org.springframework.web.bind.'annotation'.support.HandlerMethodResolver;

        r2 := @parameter1: org.springframework.web.bind.support.WebBindingInitializer;

        $r3 = new org.springframework.web.bind.support.DefaultSessionAttributeStore;

        specialinvoke $r3.<org.springframework.web.bind.support.DefaultSessionAttributeStore: void <init>()>();

        specialinvoke r0.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: void <init>(org.springframework.web.bind.'annotation'.support.HandlerMethodResolver,org.springframework.web.bind.support.WebBindingInitializer,org.springframework.web.bind.support.SessionAttributeStore,org.springframework.core.ParameterNameDiscoverer,org.springframework.web.bind.support.WebArgumentResolver[],org.springframework.http.converter.HttpMessageConverter[])>(r1, r2, $r3, null, null, null);

        return;
    }

    public void <init>(org.springframework.web.bind.'annotation'.support.HandlerMethodResolver, org.springframework.web.bind.support.WebBindingInitializer, org.springframework.web.bind.support.SessionAttributeStore, org.springframework.core.ParameterNameDiscoverer, org.springframework.web.bind.support.WebArgumentResolver[], org.springframework.http.converter.HttpMessageConverter[])
    {
        org.springframework.core.ParameterNameDiscoverer r5;
        org.springframework.web.bind.support.WebBindingInitializer r3;
        org.springframework.web.bind.support.WebArgumentResolver[] r6;
        org.springframework.web.bind.'annotation'.support.HandlerMethodResolver r2;
        org.springframework.http.converter.HttpMessageConverter[] r7;
        org.springframework.web.bind.support.SessionAttributeStore r4;
        org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker r0;
        org.springframework.web.bind.support.SimpleSessionStatus $r1;

        r0 := @this: org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker;

        r2 := @parameter0: org.springframework.web.bind.'annotation'.support.HandlerMethodResolver;

        r3 := @parameter1: org.springframework.web.bind.support.WebBindingInitializer;

        r4 := @parameter2: org.springframework.web.bind.support.SessionAttributeStore;

        r5 := @parameter3: org.springframework.core.ParameterNameDiscoverer;

        r6 := @parameter4: org.springframework.web.bind.support.WebArgumentResolver[];

        r7 := @parameter5: org.springframework.http.converter.HttpMessageConverter[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.springframework.web.bind.support.SimpleSessionStatus;

        specialinvoke $r1.<org.springframework.web.bind.support.SimpleSessionStatus: void <init>()>();

        r0.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: org.springframework.web.bind.support.SimpleSessionStatus sessionStatus> = $r1;

        r0.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: org.springframework.web.bind.'annotation'.support.HandlerMethodResolver methodResolver> = r2;

        r0.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: org.springframework.web.bind.support.WebBindingInitializer bindingInitializer> = r3;

        r0.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: org.springframework.web.bind.support.SessionAttributeStore sessionAttributeStore> = r4;

        r0.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: org.springframework.core.ParameterNameDiscoverer parameterNameDiscoverer> = r5;

        r0.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: org.springframework.web.bind.support.WebArgumentResolver[] customArgumentResolvers> = r6;

        r0.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: org.springframework.http.converter.HttpMessageConverter[] messageConverters> = r7;

        return;
    }

    public final java.lang.Object invokeHandlerMethod(java.lang.reflect.Method, java.lang.Object, org.springframework.web.context.request.NativeWebRequest, org.springframework.ui.ExtendedModelMap) throws java.lang.Exception
    {
        java.lang.IllegalStateException $r39;
        org.springframework.web.bind.'annotation'.support.HandlerMethodInvocationException $r40;
        org.springframework.web.bind.'annotation'.support.HandlerMethodResolver $r4, $r12;
        org.springframework.web.context.request.NativeWebRequest r8;
        java.lang.reflect.Method r0, $r1, $r16, r42;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.util.Set $r5, $r13;
        org.springframework.web.bind.support.SessionAttributeStore $r9;
        org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker r3;
        java.lang.reflect.InvocationTargetException $r37;
        java.lang.'annotation'.Annotation $r19;
        java.lang.StringBuilder $r27, $r29, $r33, $r35;
        org.springframework.ui.ExtendedModelMap r11;
        java.lang.Throwable $r38;
        java.lang.Object[] $r18, $r31;
        org.springframework.web.bind.'annotation'.ModelAttribute $r20;
        java.lang.String $r21, $r22, $r24, $r30, $r36, r41, r43;
        java.util.Iterator $r6, $r14;
        org.apache.commons.logging.Log $r2, $r28, $r34;
        java.lang.Object $r7, $r10, $r15, r17, $r23, $r32;
        java.lang.Class $r25, $r26;

        r3 := @this: org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker;

        r0 := @parameter0: java.lang.reflect.Method;

        r17 := @parameter1: java.lang.Object;

        r8 := @parameter2: org.springframework.web.context.request.NativeWebRequest;

        r11 := @parameter3: org.springframework.ui.ExtendedModelMap;

        $r1 = staticinvoke <org.springframework.core.BridgeMethodResolver: java.lang.reflect.Method findBridgedMethod(java.lang.reflect.Method)>(r0);

     label01:
        $r2 = <org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r2.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        $r4 = r3.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: org.springframework.web.bind.'annotation'.support.HandlerMethodResolver methodResolver>;

        $r5 = virtualinvoke $r4.<org.springframework.web.bind.'annotation'.support.HandlerMethodResolver: java.util.Set getActualSessionAttributeNames()>();

        $r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

        goto label03;

     label02:
        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r41 = (java.lang.String) $r7;

        $r9 = r3.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: org.springframework.web.bind.support.SessionAttributeStore sessionAttributeStore>;

        $r10 = interfaceinvoke $r9.<org.springframework.web.bind.support.SessionAttributeStore: java.lang.Object retrieveAttribute(org.springframework.web.context.request.WebRequest,java.lang.String)>(r8, r41);

        if $r10 == null goto label03;

        virtualinvoke r11.<org.springframework.ui.ExtendedModelMap: org.springframework.ui.ExtendedModelMap addAttribute(java.lang.String,java.lang.Object)>(r41, $r10);

     label03:
        $z5 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z5 != 0 goto label02;

        $r12 = r3.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: org.springframework.web.bind.'annotation'.support.HandlerMethodResolver methodResolver>;

        $r13 = virtualinvoke $r12.<org.springframework.web.bind.'annotation'.support.HandlerMethodResolver: java.util.Set getModelAttributeMethods()>();

        $r14 = interfaceinvoke $r13.<java.util.Set: java.util.Iterator iterator()>();

        goto label08;

     label04:
        $r15 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>();

        r42 = (java.lang.reflect.Method) $r15;

        $r16 = staticinvoke <org.springframework.core.BridgeMethodResolver: java.lang.reflect.Method findBridgedMethod(java.lang.reflect.Method)>(r42);

        $r18 = specialinvoke r3.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: java.lang.Object[] resolveHandlerArguments(java.lang.reflect.Method,java.lang.Object,org.springframework.web.context.request.NativeWebRequest,org.springframework.ui.ExtendedModelMap)>($r16, r17, r8, r11);

        if $z0 == 0 goto label05;

        $r28 = <org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: org.apache.commons.logging.Log logger>;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>(java.lang.String)>("Invoking model attribute method: ");

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r28.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r30);

     label05:
        $r19 = staticinvoke <org.springframework.core.'annotation'.AnnotationUtils: java.lang.'annotation'.Annotation findAnnotation(java.lang.reflect.Method,java.lang.Class)>(r42, class "Lorg/springframework/web/bind/annotation/ModelAttribute;");

        $r20 = (org.springframework.web.bind.'annotation'.ModelAttribute) $r19;

        $r21 = interfaceinvoke $r20.<org.springframework.web.bind.'annotation'.ModelAttribute: java.lang.String value()>();

        r43 = $r21;

        $r22 = "";

        $z1 = virtualinvoke $r22.<java.lang.String: boolean equals(java.lang.Object)>($r21);

        if $z1 != 0 goto label06;

        $z4 = virtualinvoke r11.<org.springframework.ui.ExtendedModelMap: boolean containsAttribute(java.lang.String)>($r21);

        if $z4 == 0 goto label06;

        goto label08;

     label06:
        staticinvoke <org.springframework.util.ReflectionUtils: void makeAccessible(java.lang.reflect.Method)>($r16);

        $r23 = virtualinvoke $r16.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r17, $r18);

        $r24 = "";

        $z2 = virtualinvoke $r24.<java.lang.String: boolean equals(java.lang.Object)>($r21);

        if $z2 == 0 goto label07;

        $r25 = virtualinvoke r17.<java.lang.Object: java.lang.Class getClass()>();

        $r26 = staticinvoke <org.springframework.core.GenericTypeResolver: java.lang.Class resolveReturnType(java.lang.reflect.Method,java.lang.Class)>($r16, $r25);

        r43 = staticinvoke <org.springframework.core.Conventions: java.lang.String getVariableNameForReturnType(java.lang.reflect.Method,java.lang.Class,java.lang.Object)>($r16, $r26, $r23);

     label07:
        $z3 = virtualinvoke r11.<org.springframework.ui.ExtendedModelMap: boolean containsAttribute(java.lang.String)>(r43);

        if $z3 != 0 goto label08;

        virtualinvoke r11.<org.springframework.ui.ExtendedModelMap: org.springframework.ui.ExtendedModelMap addAttribute(java.lang.String,java.lang.Object)>(r43, $r23);

     label08:
        $z6 = interfaceinvoke $r14.<java.util.Iterator: boolean hasNext()>();

        if $z6 != 0 goto label04;

        $r31 = specialinvoke r3.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: java.lang.Object[] resolveHandlerArguments(java.lang.reflect.Method,java.lang.Object,org.springframework.web.context.request.NativeWebRequest,org.springframework.ui.ExtendedModelMap)>($r1, r17, r8, r11);

        if $z0 == 0 goto label09;

        $r34 = <org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: org.apache.commons.logging.Log logger>;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>(java.lang.String)>("Invoking request handler method: ");

        $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r34.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r36);

     label09:
        staticinvoke <org.springframework.util.ReflectionUtils: void makeAccessible(java.lang.reflect.Method)>($r1);

        $r32 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r17, $r31);

     label10:
        return $r32;

     label11:
        $r39 := @caughtexception;

        $r40 = new org.springframework.web.bind.'annotation'.support.HandlerMethodInvocationException;

        specialinvoke $r40.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvocationException: void <init>(java.lang.reflect.Method,java.lang.Throwable)>($r1, $r39);

        throw $r40;

     label12:
        $r37 := @caughtexception;

        $r38 = virtualinvoke $r37.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        staticinvoke <org.springframework.util.ReflectionUtils: void rethrowException(java.lang.Throwable)>($r38);

        return null;

        catch java.lang.IllegalStateException from label01 to label10 with label11;
        catch java.lang.reflect.InvocationTargetException from label01 to label10 with label12;
    }

    public final void updateModelAttributes(java.lang.Object, java.util.Map, org.springframework.ui.ExtendedModelMap, org.springframework.web.context.request.NativeWebRequest) throws java.lang.Exception
    {
        org.springframework.web.bind.'annotation'.support.HandlerMethodResolver $r1, $r9, $r33;
        org.springframework.web.context.request.NativeWebRequest r15;
        java.util.Map r2, $r41, r42;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.util.Set $r4, $r34;
        org.springframework.web.bind.support.SessionAttributeStore $r25, $r37;
        org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker r0;
        java.lang.reflect.InvocationTargetException $r38;
        java.lang.StringBuilder $r10, $r13, $r20, $r23, $r26, $r29;
        org.springframework.ui.ExtendedModelMap r3;
        java.lang.Throwable $r39;
        java.lang.Object[] $r6;
        java.lang.String[] $r5, r43;
        org.springframework.validation.BindingResult $r18;
        int $i0, i1, i2;
        org.springframework.web.bind.support.SimpleSessionStatus $r19, $r32;
        java.lang.Boolean $r31;
        java.lang.String r7, $r11, $r12, $r14, $r21, $r22, $r24, $r27, $r28, $r30, r40, $r45;
        java.util.Iterator $r35;
        org.springframework.web.bind.WebDataBinder $r16;
        java.lang.Object $r8, r17, $r36;
        java.lang.Class $r44;

        r0 := @this: org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker;

        r17 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.util.Map;

        r3 := @parameter2: org.springframework.ui.ExtendedModelMap;

        r15 := @parameter3: org.springframework.web.context.request.NativeWebRequest;

        $r1 = r0.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: org.springframework.web.bind.'annotation'.support.HandlerMethodResolver methodResolver>;

        $z0 = virtualinvoke $r1.<org.springframework.web.bind.'annotation'.support.HandlerMethodResolver: boolean hasSessionAttributes()>();

        if $z0 == 0 goto label03;

        $r32 = r0.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: org.springframework.web.bind.support.SimpleSessionStatus sessionStatus>;

        $z6 = virtualinvoke $r32.<org.springframework.web.bind.support.SimpleSessionStatus: boolean isComplete()>();

        if $z6 == 0 goto label03;

        $r33 = r0.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: org.springframework.web.bind.'annotation'.support.HandlerMethodResolver methodResolver>;

        $r34 = virtualinvoke $r33.<org.springframework.web.bind.'annotation'.support.HandlerMethodResolver: java.util.Set getActualSessionAttributeNames()>();

        $r35 = interfaceinvoke $r34.<java.util.Set: java.util.Iterator iterator()>();

        goto label02;

     label01:
        $r36 = interfaceinvoke $r35.<java.util.Iterator: java.lang.Object next()>();

        r40 = (java.lang.String) $r36;

        $r37 = r0.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: org.springframework.web.bind.support.SessionAttributeStore sessionAttributeStore>;

        interfaceinvoke $r37.<org.springframework.web.bind.support.SessionAttributeStore: void cleanupAttribute(org.springframework.web.context.request.WebRequest,java.lang.String)>(r15, r40);

     label02:
        $z7 = interfaceinvoke $r35.<java.util.Iterator: boolean hasNext()>();

        if $z7 != 0 goto label01;

     label03:
        if r2 == null goto label04;

        $r41 = r2;

        goto label05;

     label04:
        $r41 = r3;

     label05:
        r42 = $r41;

        if $r41 == null goto label17;

     label06:
        $r4 = interfaceinvoke $r41.<java.util.Map: java.util.Set keySet()>();

        $i0 = interfaceinvoke $r41.<java.util.Map: int size()>();

        $r5 = newarray (java.lang.String)[$i0];

        $r6 = interfaceinvoke $r4.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r5);

        r43 = (java.lang.String[]) $r6;

        i1 = lengthof r43;

        i2 = 0;

        goto label14;

     label07:
        r7 = r43[i2];

        $r8 = interfaceinvoke r42.<java.util.Map: java.lang.Object get(java.lang.Object)>(r7);

        $r9 = r0.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: org.springframework.web.bind.'annotation'.support.HandlerMethodResolver methodResolver>;

        if $r8 == null goto label08;

        $r44 = virtualinvoke $r8.<java.lang.Object: java.lang.Class getClass()>();

        goto label09;

     label08:
        $r44 = null;

     label09:
        $z1 = virtualinvoke $r9.<org.springframework.web.bind.'annotation'.support.HandlerMethodResolver: boolean isSessionAttribute(java.lang.String,java.lang.Class)>(r7, $r44);

        if $z1 == 0 goto label11;

        $r19 = r0.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: org.springframework.web.bind.support.SimpleSessionStatus sessionStatus>;

        $z4 = virtualinvoke $r19.<org.springframework.web.bind.support.SimpleSessionStatus: boolean isComplete()>();

        if $z4 == 0 goto label10;

        $r26 = new java.lang.StringBuilder;

        $r27 = <org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: java.lang.String MODEL_KEY_PREFIX_STALE>;

        $r28 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r27);

        specialinvoke $r26.<java.lang.StringBuilder: void <init>(java.lang.String)>($r28);

        $r29 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        $r31 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        virtualinvoke r3.<org.springframework.ui.ExtendedModelMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r30, $r31);

        goto label11;

     label10:
        $r20 = new java.lang.StringBuilder;

        $r21 = <org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: java.lang.String MODEL_KEY_PREFIX_STALE>;

        $r22 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r21);

        specialinvoke $r20.<java.lang.StringBuilder: void <init>(java.lang.String)>($r22);

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        $z5 = virtualinvoke r3.<org.springframework.ui.ExtendedModelMap: boolean containsKey(java.lang.Object)>($r24);

        if $z5 != 0 goto label11;

        $r25 = r0.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: org.springframework.web.bind.support.SessionAttributeStore sessionAttributeStore>;

        interfaceinvoke $r25.<org.springframework.web.bind.support.SessionAttributeStore: void storeAttribute(org.springframework.web.context.request.WebRequest,java.lang.String,java.lang.Object)>(r15, r7, $r8);

     label11:
        $r45 = <org.springframework.validation.BindingResult: java.lang.String MODEL_KEY_PREFIX>;

        $z8 = virtualinvoke r7.<java.lang.String: boolean startsWith(java.lang.String)>($r45);

        if $z8 != 0 goto label13;

        if $z1 != 0 goto label12;

        $z3 = virtualinvoke r0.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: boolean isBindingCandidate(java.lang.Object)>($r8);

        if $z3 == 0 goto label13;

     label12:
        $r10 = new java.lang.StringBuilder;

        $r11 = <org.springframework.validation.BindingResult: java.lang.String MODEL_KEY_PREFIX>;

        $r12 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r11);

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>($r12);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        if r2 == null goto label13;

        $z2 = interfaceinvoke r42.<java.util.Map: boolean containsKey(java.lang.Object)>($r14);

        if $z2 != 0 goto label13;

        $r16 = virtualinvoke r0.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: org.springframework.web.bind.WebDataBinder createBinder(org.springframework.web.context.request.NativeWebRequest,java.lang.Object,java.lang.String)>(r15, $r8, r7);

        virtualinvoke r0.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: void initBinder(java.lang.Object,java.lang.String,org.springframework.web.bind.WebDataBinder,org.springframework.web.context.request.NativeWebRequest)>(r17, r7, $r16, r15);

        $r18 = virtualinvoke $r16.<org.springframework.web.bind.WebDataBinder: org.springframework.validation.BindingResult getBindingResult()>();

        interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, $r18);

     label13:
        i2 = i2 + 1;

     label14:
        if i2 < i1 goto label07;

     label15:
        goto label17;

     label16:
        $r38 := @caughtexception;

        $r39 = virtualinvoke $r38.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        staticinvoke <org.springframework.util.ReflectionUtils: void rethrowException(java.lang.Throwable)>($r39);

     label17:
        return;

        catch java.lang.reflect.InvocationTargetException from label06 to label15 with label16;
    }

    private java.lang.Object[] resolveHandlerArguments(java.lang.reflect.Method, java.lang.Object, org.springframework.web.context.request.NativeWebRequest, org.springframework.ui.ExtendedModelMap) throws java.lang.Exception
    {
        org.springframework.core.ParameterNameDiscoverer $r5;
        org.springframework.web.bind.'annotation'.RequestParam r59;
        org.springframework.web.context.request.NativeWebRequest r24;
        java.util.Map $r27;
        org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker r4;
        java.lang.StringBuilder $r49, $r50;
        java.lang.Object[] r2;
        org.springframework.validation.BindingResult $r26, $r28;
        org.springframework.beans.factory.'annotation'.Value $r19;
        org.springframework.web.bind.support.SimpleSessionStatus $r46;
        java.lang.String $r16, $r18, $r20, $r21, $r22, $r51, r52, r53, r54, r55, r56, r57;
        java.lang.Class[] $r1;
        java.lang.IllegalStateException $r44, $r48;
        org.springframework.web.bind.'annotation'.PathVariable r62;
        org.springframework.web.bind.'annotation'.CookieValue r61;
        org.springframework.core.MethodParameter $r3;
        java.lang.reflect.Method r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, z16, z17, z18, z20, $z21, $z22, $z23;
        org.springframework.http.HttpEntity $r45;
        java.lang.'annotation'.Annotation r58;
        org.springframework.web.bind.'annotation'.RequestHeader r60;
        org.springframework.ui.ExtendedModelMap r23;
        java.lang.'annotation'.Annotation[] $r8;
        org.springframework.web.bind.'annotation'.ModelAttribute r63;
        int $i0, i1, $i2, $i3, $i4, $i5, i6, i7, i8, $i9;
        org.springframework.web.bind.WebDataBinder $r25;
        java.lang.Object r6, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r47, $r64, $r65;
        java.lang.Class $r7, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r17, $r29, $r30, $r38, $r39, $r40, $r41, $r42, $r43;

        r4 := @this: org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker;

        r0 := @parameter0: java.lang.reflect.Method;

        r6 := @parameter1: java.lang.Object;

        r24 := @parameter2: org.springframework.web.context.request.NativeWebRequest;

        r23 := @parameter3: org.springframework.ui.ExtendedModelMap;

        $r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i0 = lengthof $r1;

        r2 = newarray (java.lang.Object)[$i0];

        i6 = 0;

        goto label34;

     label01:
        $r3 = new org.springframework.core.MethodParameter;

        specialinvoke $r3.<org.springframework.core.MethodParameter: void <init>(java.lang.reflect.Method,int)>(r0, i6);

        $r5 = r4.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: org.springframework.core.ParameterNameDiscoverer parameterNameDiscoverer>;

        virtualinvoke $r3.<org.springframework.core.MethodParameter: void initParameterNameDiscovery(org.springframework.core.ParameterNameDiscoverer)>($r5);

        $r7 = virtualinvoke r6.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.springframework.core.GenericTypeResolver: java.lang.Class resolveParameterType(org.springframework.core.MethodParameter,java.lang.Class)>($r3, $r7);

        r52 = null;

        r53 = null;

        z16 = 0;

        r54 = null;

        r55 = null;

        r56 = null;

        z17 = 0;

        r57 = null;

        z18 = 0;

        i7 = 0;

        $r8 = virtualinvoke $r3.<org.springframework.core.MethodParameter: java.lang.'annotation'.Annotation[] getParameterAnnotations()>();

        i1 = lengthof $r8;

        i8 = 0;

        goto label11;

     label02:
        r58 = $r8[i8];

        $r9 = class "Lorg/springframework/web/bind/annotation/RequestParam;";

        $z0 = virtualinvoke $r9.<java.lang.Class: boolean isInstance(java.lang.Object)>(r58);

        if $z0 == 0 goto label03;

        r59 = (org.springframework.web.bind.'annotation'.RequestParam) r58;

        r52 = interfaceinvoke r59.<org.springframework.web.bind.'annotation'.RequestParam: java.lang.String value()>();

        z17 = interfaceinvoke r59.<org.springframework.web.bind.'annotation'.RequestParam: boolean required()>();

        $r22 = interfaceinvoke r59.<org.springframework.web.bind.'annotation'.RequestParam: java.lang.String defaultValue()>();

        r57 = virtualinvoke r4.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: java.lang.String parseDefaultValueAttribute(java.lang.String)>($r22);

        i7 = i7 + 1;

        goto label10;

     label03:
        $r10 = class "Lorg/springframework/web/bind/annotation/RequestHeader;";

        $z1 = virtualinvoke $r10.<java.lang.Class: boolean isInstance(java.lang.Object)>(r58);

        if $z1 == 0 goto label04;

        r60 = (org.springframework.web.bind.'annotation'.RequestHeader) r58;

        r53 = interfaceinvoke r60.<org.springframework.web.bind.'annotation'.RequestHeader: java.lang.String value()>();

        z17 = interfaceinvoke r60.<org.springframework.web.bind.'annotation'.RequestHeader: boolean required()>();

        $r21 = interfaceinvoke r60.<org.springframework.web.bind.'annotation'.RequestHeader: java.lang.String defaultValue()>();

        r57 = virtualinvoke r4.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: java.lang.String parseDefaultValueAttribute(java.lang.String)>($r21);

        i7 = i7 + 1;

        goto label10;

     label04:
        $r11 = class "Lorg/springframework/web/bind/annotation/RequestBody;";

        $z2 = virtualinvoke $r11.<java.lang.Class: boolean isInstance(java.lang.Object)>(r58);

        if $z2 == 0 goto label05;

        z16 = 1;

        i7 = i7 + 1;

        goto label10;

     label05:
        $r12 = class "Lorg/springframework/web/bind/annotation/CookieValue;";

        $z3 = virtualinvoke $r12.<java.lang.Class: boolean isInstance(java.lang.Object)>(r58);

        if $z3 == 0 goto label06;

        r61 = (org.springframework.web.bind.'annotation'.CookieValue) r58;

        r54 = interfaceinvoke r61.<org.springframework.web.bind.'annotation'.CookieValue: java.lang.String value()>();

        z17 = interfaceinvoke r61.<org.springframework.web.bind.'annotation'.CookieValue: boolean required()>();

        $r20 = interfaceinvoke r61.<org.springframework.web.bind.'annotation'.CookieValue: java.lang.String defaultValue()>();

        r57 = virtualinvoke r4.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: java.lang.String parseDefaultValueAttribute(java.lang.String)>($r20);

        i7 = i7 + 1;

        goto label10;

     label06:
        $r13 = class "Lorg/springframework/web/bind/annotation/PathVariable;";

        $z4 = virtualinvoke $r13.<java.lang.Class: boolean isInstance(java.lang.Object)>(r58);

        if $z4 == 0 goto label07;

        r62 = (org.springframework.web.bind.'annotation'.PathVariable) r58;

        r55 = interfaceinvoke r62.<org.springframework.web.bind.'annotation'.PathVariable: java.lang.String value()>();

        i7 = i7 + 1;

        goto label10;

     label07:
        $r14 = class "Lorg/springframework/web/bind/annotation/ModelAttribute;";

        $z5 = virtualinvoke $r14.<java.lang.Class: boolean isInstance(java.lang.Object)>(r58);

        if $z5 == 0 goto label08;

        r63 = (org.springframework.web.bind.'annotation'.ModelAttribute) r58;

        r56 = interfaceinvoke r63.<org.springframework.web.bind.'annotation'.ModelAttribute: java.lang.String value()>();

        i7 = i7 + 1;

        goto label10;

     label08:
        $r15 = class "Lorg/springframework/beans/factory/annotation/Value;";

        $z6 = virtualinvoke $r15.<java.lang.Class: boolean isInstance(java.lang.Object)>(r58);

        if $z6 == 0 goto label09;

        $r19 = (org.springframework.beans.factory.'annotation'.Value) r58;

        r57 = interfaceinvoke $r19.<org.springframework.beans.factory.'annotation'.Value: java.lang.String value()>();

        goto label10;

     label09:
        $r16 = "Valid";

        $r17 = interfaceinvoke r58.<java.lang.'annotation'.Annotation: java.lang.Class annotationType()>();

        $r18 = virtualinvoke $r17.<java.lang.Class: java.lang.String getSimpleName()>();

        $z7 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>($r18);

        if $z7 == 0 goto label10;

        z18 = 1;

     label10:
        i8 = i8 + 1;

     label11:
        if i8 < i1 goto label02;

        if i7 <= 1 goto label12;

        $r48 = new java.lang.IllegalStateException;

        $r49 = new java.lang.StringBuilder;

        specialinvoke $r49.<java.lang.StringBuilder: void <init>(java.lang.String)>("Handler parameter annotations are exclusive choices - do not specify more than one such annotation on the same parameter: ");

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r48.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r51);

        throw $r48;

     label12:
        if i7 != 0 goto label21;

        $r36 = virtualinvoke r4.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: java.lang.Object resolveCommonArgument(org.springframework.core.MethodParameter,org.springframework.web.context.request.NativeWebRequest)>($r3, r24);

        $r37 = <org.springframework.web.bind.support.WebArgumentResolver: java.lang.Object UNRESOLVED>;

        if $r36 == $r37 goto label13;

        r2[i6] = $r36;

        goto label21;

     label13:
        if r57 == null goto label14;

        $r47 = virtualinvoke r4.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: java.lang.Object resolveDefaultValue(java.lang.String)>(r57);

        r2[i6] = $r47;

        goto label21;

     label14:
        $r38 = virtualinvoke $r3.<org.springframework.core.MethodParameter: java.lang.Class getParameterType()>();

        $r39 = class "Lorg/springframework/ui/Model;";

        $z10 = virtualinvoke $r39.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r38);

        if $z10 != 0 goto label15;

        $r40 = class "Ljava/util/Map;";

        $z11 = virtualinvoke $r40.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r38);

        if $z11 == 0 goto label16;

     label15:
        r2[i6] = r23;

        goto label21;

     label16:
        $r41 = class "Lorg/springframework/web/bind/support/SessionStatus;";

        $z12 = virtualinvoke $r41.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r38);

        if $z12 == 0 goto label17;

        $r46 = r4.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: org.springframework.web.bind.support.SimpleSessionStatus sessionStatus>;

        r2[i6] = $r46;

        goto label21;

     label17:
        $r42 = class "Lorg/springframework/http/HttpEntity;";

        $z13 = virtualinvoke $r42.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r38);

        if $z13 == 0 goto label18;

        $r45 = specialinvoke r4.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: org.springframework.http.HttpEntity resolveHttpEntityRequest(org.springframework.core.MethodParameter,org.springframework.web.context.request.NativeWebRequest)>($r3, r24);

        r2[i6] = $r45;

        goto label21;

     label18:
        $r43 = class "Lorg/springframework/validation/Errors;";

        $z14 = virtualinvoke $r43.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r38);

        if $z14 == 0 goto label19;

        $r44 = new java.lang.IllegalStateException;

        specialinvoke $r44.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Errors/BindingResult argument declared without preceding model attribute. Check your handler method signature!");

        throw $r44;

     label19:
        $z15 = staticinvoke <org.springframework.beans.BeanUtils: boolean isSimpleProperty(java.lang.Class)>($r38);

        if $z15 == 0 goto label20;

        r52 = "";

        goto label21;

     label20:
        r56 = "";

     label21:
        if r52 == null goto label22;

        $r35 = specialinvoke r4.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: java.lang.Object resolveRequestParam(java.lang.String,boolean,java.lang.String,org.springframework.core.MethodParameter,org.springframework.web.context.request.NativeWebRequest,java.lang.Object)>(r52, z17, r57, $r3, r24, r6);

        r2[i6] = $r35;

        goto label33;

     label22:
        if r53 == null goto label23;

        $r34 = specialinvoke r4.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: java.lang.Object resolveRequestHeader(java.lang.String,boolean,java.lang.String,org.springframework.core.MethodParameter,org.springframework.web.context.request.NativeWebRequest,java.lang.Object)>(r53, z17, r57, $r3, r24, r6);

        r2[i6] = $r34;

        goto label33;

     label23:
        if z16 == 0 goto label24;

        $r33 = virtualinvoke r4.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: java.lang.Object resolveRequestBody(org.springframework.core.MethodParameter,org.springframework.web.context.request.NativeWebRequest,java.lang.Object)>($r3, r24, r6);

        r2[i6] = $r33;

        goto label33;

     label24:
        if r54 == null goto label25;

        $r32 = specialinvoke r4.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: java.lang.Object resolveCookieValue(java.lang.String,boolean,java.lang.String,org.springframework.core.MethodParameter,org.springframework.web.context.request.NativeWebRequest,java.lang.Object)>(r54, z17, r57, $r3, r24, r6);

        r2[i6] = $r32;

        goto label33;

     label25:
        if r55 == null goto label26;

        $r31 = specialinvoke r4.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: java.lang.Object resolvePathVariable(java.lang.String,org.springframework.core.MethodParameter,org.springframework.web.context.request.NativeWebRequest,java.lang.Object)>(r55, $r3, r24, r6);

        r2[i6] = $r31;

        goto label33;

     label26:
        if r56 == null goto label33;

        $r25 = specialinvoke r4.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: org.springframework.web.bind.WebDataBinder resolveModelAttribute(java.lang.String,org.springframework.core.MethodParameter,org.springframework.ui.ExtendedModelMap,org.springframework.web.context.request.NativeWebRequest,java.lang.Object)>(r56, $r3, r23, r24, r6);

        $i3 = lengthof r2;

        $i2 = i6 + 1;

        if $i3 <= $i2 goto label27;

        $r30 = class "Lorg/springframework/validation/Errors;";

        $i5 = i6 + 1;

        $r29 = $r1[$i5];

        $z9 = virtualinvoke $r30.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r29);

        if $z9 == 0 goto label27;

        $z23 = 1;

        $z22 = 1;

        goto label28;

     label27:
        $z23 = 0;

        $z22 = 0;

     label28:
        z20 = $z23;

        $r64 = virtualinvoke $r25.<org.springframework.web.bind.WebDataBinder: java.lang.Object getTarget()>();

        if $r64 == null goto label31;

        $z8 = z18;

        if $z22 == 0 goto label29;

        $z21 = 0;

        goto label30;

     label29:
        $z21 = 1;

     label30:
        specialinvoke r4.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: void doBind(org.springframework.web.bind.WebDataBinder,org.springframework.web.context.request.NativeWebRequest,boolean,boolean)>($r25, r24, $z8, $z21);

     label31:
        $r65 = virtualinvoke $r25.<org.springframework.web.bind.WebDataBinder: java.lang.Object getTarget()>();

        r2[i6] = $r65;

        if z20 == 0 goto label32;

        $i4 = i6 + 1;

        $r28 = virtualinvoke $r25.<org.springframework.web.bind.WebDataBinder: org.springframework.validation.BindingResult getBindingResult()>();

        r2[$i4] = $r28;

        i6 = i6 + 1;

     label32:
        $r26 = virtualinvoke $r25.<org.springframework.web.bind.WebDataBinder: org.springframework.validation.BindingResult getBindingResult()>();

        $r27 = interfaceinvoke $r26.<org.springframework.validation.BindingResult: java.util.Map getModel()>();

        virtualinvoke r23.<org.springframework.ui.ExtendedModelMap: void putAll(java.util.Map)>($r27);

     label33:
        i6 = i6 + 1;

     label34:
        $i9 = lengthof r2;

        if i6 < $i9 goto label01;

        return r2;
    }

    protected void initBinder(java.lang.Object, java.lang.String, org.springframework.web.bind.WebDataBinder, org.springframework.web.context.request.NativeWebRequest) throws java.lang.Exception
    {
        java.lang.IllegalStateException $r17;
        org.springframework.web.bind.'annotation'.support.HandlerMethodResolver $r3;
        org.springframework.web.context.request.NativeWebRequest r14;
        java.lang.reflect.Method r8, $r9;
        boolean $z0, $z1, $z2, $z3;
        java.util.Set $r4;
        org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker r0;
        java.util.List $r25;
        java.lang.'annotation'.Annotation $r10;
        java.lang.StringBuilder $r18, $r19, $r21, $r23;
        org.springframework.web.bind.'annotation'.InitBinder $r11;
        java.lang.Object[] $r15;
        java.lang.String[] $r12;
        int $i0;
        java.lang.String $r20, $r24, r26;
        org.springframework.web.bind.support.WebBindingInitializer $r1, $r27;
        java.util.Iterator $r6;
        org.springframework.web.bind.WebDataBinder r13;
        java.lang.Object r2, $r7, $r16;
        org.apache.commons.logging.Log $r5, $r22;

        r0 := @this: org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker;

        r2 := @parameter0: java.lang.Object;

        r26 := @parameter1: java.lang.String;

        r13 := @parameter2: org.springframework.web.bind.WebDataBinder;

        r14 := @parameter3: org.springframework.web.context.request.NativeWebRequest;

        $r1 = r0.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: org.springframework.web.bind.support.WebBindingInitializer bindingInitializer>;

        if $r1 == null goto label1;

        $r27 = r0.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: org.springframework.web.bind.support.WebBindingInitializer bindingInitializer>;

        interfaceinvoke $r27.<org.springframework.web.bind.support.WebBindingInitializer: void initBinder(org.springframework.web.bind.WebDataBinder,org.springframework.web.context.request.WebRequest)>(r13, r14);

     label1:
        if r2 == null goto label6;

        $r3 = r0.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: org.springframework.web.bind.'annotation'.support.HandlerMethodResolver methodResolver>;

        $r4 = virtualinvoke $r3.<org.springframework.web.bind.'annotation'.support.HandlerMethodResolver: java.util.Set getInitBinderMethods()>();

        $z0 = interfaceinvoke $r4.<java.util.Set: boolean isEmpty()>();

        if $z0 != 0 goto label6;

        $r5 = <org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: org.apache.commons.logging.Log logger>;

        $z1 = interfaceinvoke $r5.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        $r6 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

        goto label5;

     label2:
        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.lang.reflect.Method) $r7;

        $r9 = staticinvoke <org.springframework.core.BridgeMethodResolver: java.lang.reflect.Method findBridgedMethod(java.lang.reflect.Method)>(r8);

        $r10 = staticinvoke <org.springframework.core.'annotation'.AnnotationUtils: java.lang.'annotation'.Annotation findAnnotation(java.lang.reflect.Method,java.lang.Class)>(r8, class "Lorg/springframework/web/bind/annotation/InitBinder;");

        $r11 = (org.springframework.web.bind.'annotation'.InitBinder) $r10;

        $r12 = interfaceinvoke $r11.<org.springframework.web.bind.'annotation'.InitBinder: java.lang.String[] value()>();

        $i0 = lengthof $r12;

        if $i0 == 0 goto label3;

        $r25 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r12);

        $z2 = interfaceinvoke $r25.<java.util.List: boolean contains(java.lang.Object)>(r26);

        if $z2 == 0 goto label5;

     label3:
        $r15 = specialinvoke r0.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: java.lang.Object[] resolveInitBinderArguments(java.lang.Object,java.lang.reflect.Method,org.springframework.web.bind.WebDataBinder,org.springframework.web.context.request.NativeWebRequest)>(r2, $r9, r13, r14);

        if $z1 == 0 goto label4;

        $r22 = <org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: org.apache.commons.logging.Log logger>;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>(java.lang.String)>("Invoking init-binder method: ");

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r22.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r24);

     label4:
        staticinvoke <org.springframework.util.ReflectionUtils: void makeAccessible(java.lang.reflect.Method)>($r9);

        $r16 = virtualinvoke $r9.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r2, $r15);

        if $r16 == null goto label5;

        $r17 = new java.lang.IllegalStateException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>(java.lang.String)>("InitBinder methods must not have a return value: ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r20);

        throw $r17;

     label5:
        $z3 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z3 != 0 goto label2;

     label6:
        return;
    }

    private java.lang.Object[] resolveInitBinderArguments(java.lang.Object, java.lang.reflect.Method, org.springframework.web.bind.WebDataBinder, org.springframework.web.context.request.NativeWebRequest) throws java.lang.Exception
    {
        org.springframework.core.ParameterNameDiscoverer $r5;
        java.lang.IllegalStateException $r12, $r23;
        org.springframework.web.bind.'annotation'.PathVariable r35;
        org.springframework.web.bind.'annotation'.RequestParam r34;
        org.springframework.web.context.request.NativeWebRequest r17;
        org.springframework.core.MethodParameter $r3;
        java.lang.reflect.Method r0;
        boolean $z0, $z1, $z2, $z3, $z4, z5;
        org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker r4;
        java.lang.'annotation'.Annotation r33;
        java.lang.StringBuilder $r13, $r14, $r24, $r26, $r27, $r28;
        java.lang.Object[] r2;
        java.lang.'annotation'.Annotation[] $r8;
        int $i0, i1, i2, i3, $i4;
        java.lang.String $r15, $r16, $r25, $r29, r30, r31, r32;
        java.lang.Class[] $r1;
        org.springframework.web.bind.WebDataBinder r22;
        java.lang.Object r6, $r18, $r19, $r20, $r21;
        java.lang.Class $r7, $r9, $r10, $r11, r36;

        r4 := @this: org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker;

        r6 := @parameter0: java.lang.Object;

        r0 := @parameter1: java.lang.reflect.Method;

        r22 := @parameter2: org.springframework.web.bind.WebDataBinder;

        r17 := @parameter3: org.springframework.web.context.request.NativeWebRequest;

        $r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i0 = lengthof $r1;

        r2 = newarray (java.lang.Object)[$i0];

        i2 = 0;

        goto label14;

     label01:
        $r3 = new org.springframework.core.MethodParameter;

        specialinvoke $r3.<org.springframework.core.MethodParameter: void <init>(java.lang.reflect.Method,int)>(r0, i2);

        $r5 = r4.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: org.springframework.core.ParameterNameDiscoverer parameterNameDiscoverer>;

        virtualinvoke $r3.<org.springframework.core.MethodParameter: void initParameterNameDiscovery(org.springframework.core.ParameterNameDiscoverer)>($r5);

        $r7 = virtualinvoke r6.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.springframework.core.GenericTypeResolver: java.lang.Class resolveParameterType(org.springframework.core.MethodParameter,java.lang.Class)>($r3, $r7);

        r30 = null;

        z5 = 0;

        r31 = null;

        r32 = null;

        $r8 = virtualinvoke $r3.<org.springframework.core.MethodParameter: java.lang.'annotation'.Annotation[] getParameterAnnotations()>();

        i1 = lengthof $r8;

        i3 = 0;

        goto label06;

     label02:
        r33 = $r8[i3];

        $r9 = class "Lorg/springframework/web/bind/annotation/RequestParam;";

        $z0 = virtualinvoke $r9.<java.lang.Class: boolean isInstance(java.lang.Object)>(r33);

        if $z0 == 0 goto label03;

        r34 = (org.springframework.web.bind.'annotation'.RequestParam) r33;

        r30 = interfaceinvoke r34.<org.springframework.web.bind.'annotation'.RequestParam: java.lang.String value()>();

        z5 = interfaceinvoke r34.<org.springframework.web.bind.'annotation'.RequestParam: boolean required()>();

        $r16 = interfaceinvoke r34.<org.springframework.web.bind.'annotation'.RequestParam: java.lang.String defaultValue()>();

        r31 = virtualinvoke r4.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: java.lang.String parseDefaultValueAttribute(java.lang.String)>($r16);

        goto label07;

     label03:
        $r10 = class "Lorg/springframework/web/bind/annotation/ModelAttribute;";

        $z1 = virtualinvoke $r10.<java.lang.Class: boolean isInstance(java.lang.Object)>(r33);

        if $z1 == 0 goto label04;

        $r12 = new java.lang.IllegalStateException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>(java.lang.String)>("@ModelAttribute is not supported on @InitBinder methods: ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r15);

        throw $r12;

     label04:
        $r11 = class "Lorg/springframework/web/bind/annotation/PathVariable;";

        $z2 = virtualinvoke $r11.<java.lang.Class: boolean isInstance(java.lang.Object)>(r33);

        if $z2 == 0 goto label05;

        r35 = (org.springframework.web.bind.'annotation'.PathVariable) r33;

        r32 = interfaceinvoke r35.<org.springframework.web.bind.'annotation'.PathVariable: java.lang.String value()>();

     label05:
        i3 = i3 + 1;

     label06:
        if i3 < i1 goto label02;

     label07:
        if r30 != null goto label11;

        if r32 != null goto label11;

        $r20 = virtualinvoke r4.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: java.lang.Object resolveCommonArgument(org.springframework.core.MethodParameter,org.springframework.web.context.request.NativeWebRequest)>($r3, r17);

        $r21 = <org.springframework.web.bind.support.WebArgumentResolver: java.lang.Object UNRESOLVED>;

        if $r20 == $r21 goto label08;

        r2[i2] = $r20;

        goto label11;

     label08:
        r36 = $r1[i2];

        $z3 = virtualinvoke r36.<java.lang.Class: boolean isInstance(java.lang.Object)>(r22);

        if $z3 == 0 goto label09;

        r2[i2] = r22;

        goto label11;

     label09:
        $z4 = staticinvoke <org.springframework.beans.BeanUtils: boolean isSimpleProperty(java.lang.Class)>(r36);

        if $z4 == 0 goto label10;

        r30 = "";

        goto label11;

     label10:
        $r23 = new java.lang.IllegalStateException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unsupported argument [");

        $r25 = virtualinvoke r36.<java.lang.Class: java.lang.String getName()>();

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] for @InitBinder method: ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r29);

        throw $r23;

     label11:
        if r30 == null goto label12;

        $r19 = specialinvoke r4.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: java.lang.Object resolveRequestParam(java.lang.String,boolean,java.lang.String,org.springframework.core.MethodParameter,org.springframework.web.context.request.NativeWebRequest,java.lang.Object)>(r30, z5, r31, $r3, r17, null);

        r2[i2] = $r19;

        goto label13;

     label12:
        if r32 == null goto label13;

        $r18 = specialinvoke r4.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: java.lang.Object resolvePathVariable(java.lang.String,org.springframework.core.MethodParameter,org.springframework.web.context.request.NativeWebRequest,java.lang.Object)>(r32, $r3, r17, null);

        r2[i2] = $r18;

     label13:
        i2 = i2 + 1;

     label14:
        $i4 = lengthof r2;

        if i2 < $i4 goto label01;

        return r2;
    }

    private java.lang.Object resolveRequestParam(java.lang.String, boolean, java.lang.String, org.springframework.core.MethodParameter, org.springframework.web.context.request.NativeWebRequest, java.lang.Object) throws java.lang.Exception
    {
        java.lang.String[] $r8;
        org.springframework.web.context.request.NativeWebRequest r3;
        org.springframework.core.MethodParameter r0;
        java.util.Map $r11;
        int $i0, $i1, $i2, $i3;
        org.springframework.web.multipart.MultipartRequest $r10;
        java.lang.String r7, r12;
        boolean $z0, z1, $z2;
        org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker r5;
        java.io.Serializable $r15;
        java.util.List $r9;
        org.springframework.web.bind.WebDataBinder $r16;
        java.lang.Class $r1, $r2;
        java.lang.Object $r4, r6, r13, $r14, $r17;

        r5 := @this: org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker;

        r12 := @parameter0: java.lang.String;

        z1 := @parameter1: boolean;

        r7 := @parameter2: java.lang.String;

        r0 := @parameter3: org.springframework.core.MethodParameter;

        r3 := @parameter4: org.springframework.web.context.request.NativeWebRequest;

        r6 := @parameter5: java.lang.Object;

        $r1 = virtualinvoke r0.<org.springframework.core.MethodParameter: java.lang.Class getParameterType()>();

        $r2 = class "Ljava/util/Map;";

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r1);

        if $z0 == 0 goto label01;

        $i3 = virtualinvoke r12.<java.lang.String: int length()>();

        if $i3 != 0 goto label01;

        $r11 = specialinvoke r5.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: java.util.Map resolveRequestParamMap(java.lang.Class,org.springframework.web.context.request.NativeWebRequest)>($r1, r3);

        return $r11;

     label01:
        $i0 = virtualinvoke r12.<java.lang.String: int length()>();

        if $i0 != 0 goto label02;

        r12 = specialinvoke r5.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: java.lang.String getRequiredParameterName(org.springframework.core.MethodParameter)>(r0);

     label02:
        r13 = null;

        $r4 = interfaceinvoke r3.<org.springframework.web.context.request.NativeWebRequest: java.lang.Object getNativeRequest(java.lang.Class)>(class "Lorg/springframework/web/multipart/MultipartRequest;");

        $r10 = (org.springframework.web.multipart.MultipartRequest) $r4;

        if $r10 == null goto label05;

        $r9 = interfaceinvoke $r10.<org.springframework.web.multipart.MultipartRequest: java.util.List getFiles(java.lang.String)>(r12);

        $z2 = interfaceinvoke $r9.<java.util.List: boolean isEmpty()>();

        if $z2 != 0 goto label05;

        $i2 = interfaceinvoke $r9.<java.util.List: int size()>();

        if $i2 != 1 goto label03;

        $r14 = interfaceinvoke $r9.<java.util.List: java.lang.Object get(int)>(0);

        goto label04;

     label03:
        $r14 = $r9;

     label04:
        r13 = $r14;

     label05:
        if r13 != null goto label08;

        $r8 = interfaceinvoke r3.<org.springframework.web.context.request.NativeWebRequest: java.lang.String[] getParameterValues(java.lang.String)>(r12);

        if $r8 == null goto label08;

        $i1 = lengthof $r8;

        if $i1 != 1 goto label06;

        $r15 = $r8[0];

        goto label07;

     label06:
        $r15 = $r8;

     label07:
        r13 = $r15;

     label08:
        if r13 != null goto label11;

        if r7 == null goto label09;

        r13 = virtualinvoke r5.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: java.lang.Object resolveDefaultValue(java.lang.String)>(r7);

        goto label10;

     label09:
        if z1 == 0 goto label10;

        virtualinvoke r5.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: void raiseMissingParameterException(java.lang.String,java.lang.Class)>(r12, $r1);

     label10:
        r13 = specialinvoke r5.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: java.lang.Object checkValue(java.lang.String,java.lang.Object,java.lang.Class)>(r12, r13, $r1);

     label11:
        $r16 = virtualinvoke r5.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: org.springframework.web.bind.WebDataBinder createBinder(org.springframework.web.context.request.NativeWebRequest,java.lang.Object,java.lang.String)>(r3, null, r12);

        virtualinvoke r5.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: void initBinder(java.lang.Object,java.lang.String,org.springframework.web.bind.WebDataBinder,org.springframework.web.context.request.NativeWebRequest)>(r6, r12, $r16, r3);

        $r17 = virtualinvoke $r16.<org.springframework.web.bind.WebDataBinder: java.lang.Object convertIfNecessary(java.lang.Object,java.lang.Class,org.springframework.core.MethodParameter)>(r13, $r1, r0);

        return $r17;
    }

    private java.util.Map resolveRequestParamMap(java.lang.Class, org.springframework.web.context.request.NativeWebRequest)
    {
        org.springframework.web.context.request.NativeWebRequest r0;
        java.util.Map $r1;
        boolean $z0, $z1, $z2;
        java.util.Set $r5, $r16;
        org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker r24;
        java.lang.String[] $r9, $r13, $r20;
        java.util.LinkedHashMap $r4;
        int $i0, $i1, $i2, i3, i4;
        java.lang.String $r11, $r14, r21, $r23;
        java.util.Map$Entry r25, r26;
        java.util.Iterator $r6, $r17;
        java.lang.Class r2, $r3;
        java.lang.Object $r7, $r8, $r10, $r12, $r18, $r19, $r22;
        org.springframework.util.LinkedMultiValueMap $r15;

        r24 := @this: org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker;

        r2 := @parameter0: java.lang.Class;

        r0 := @parameter1: org.springframework.web.context.request.NativeWebRequest;

        $r1 = interfaceinvoke r0.<org.springframework.web.context.request.NativeWebRequest: java.util.Map getParameterMap()>();

        $r3 = class "Lorg/springframework/util/MultiValueMap;";

        $z0 = virtualinvoke $r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r2);

        if $z0 == 0 goto label5;

        $r15 = new org.springframework.util.LinkedMultiValueMap;

        $i2 = interfaceinvoke $r1.<java.util.Map: int size()>();

        specialinvoke $r15.<org.springframework.util.LinkedMultiValueMap: void <init>(int)>($i2);

        $r16 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        $r17 = interfaceinvoke $r16.<java.util.Set: java.util.Iterator iterator()>();

        goto label4;

     label1:
        $r18 = interfaceinvoke $r17.<java.util.Iterator: java.lang.Object next()>();

        r25 = (java.util.Map$Entry) $r18;

        $r19 = interfaceinvoke r25.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r20 = (java.lang.String[]) $r19;

        i3 = lengthof $r20;

        i4 = 0;

        goto label3;

     label2:
        r21 = $r20[i4];

        $r22 = interfaceinvoke r25.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r23 = (java.lang.String) $r22;

        interfaceinvoke $r15.<org.springframework.util.MultiValueMap: void add(java.lang.Object,java.lang.Object)>($r23, r21);

        i4 = i4 + 1;

     label3:
        if i4 < i3 goto label2;

     label4:
        $z1 = interfaceinvoke $r17.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label1;

        return $r15;

     label5:
        $r4 = new java.util.LinkedHashMap;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        specialinvoke $r4.<java.util.LinkedHashMap: void <init>(int)>($i0);

        $r5 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        $r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

        goto label7;

     label6:
        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r26 = (java.util.Map$Entry) $r7;

        $r8 = interfaceinvoke r26.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r9 = (java.lang.String[]) $r8;

        $i1 = lengthof $r9;

        if $i1 <= 0 goto label7;

        $r10 = interfaceinvoke r26.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r11 = (java.lang.String) $r10;

        $r12 = interfaceinvoke r26.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r13 = (java.lang.String[]) $r12;

        $r14 = $r13[0];

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, $r14);

     label7:
        $z2 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label6;

        return $r4;
    }

    private java.lang.Object resolveRequestHeader(java.lang.String, boolean, java.lang.String, org.springframework.core.MethodParameter, org.springframework.web.context.request.NativeWebRequest, java.lang.Object) throws java.lang.Exception
    {
        java.lang.String[] $r4;
        org.springframework.web.context.request.NativeWebRequest r3;
        org.springframework.core.MethodParameter r0;
        java.util.Map $r8;
        int $i0, $i1;
        java.lang.String r7, r9;
        boolean $z0, z1;
        org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker r5;
        java.io.Serializable $r11;
        org.springframework.web.bind.WebDataBinder $r12;
        java.lang.Class $r1, $r2;
        java.lang.Object r6, r10, $r13;

        r5 := @this: org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker;

        r9 := @parameter0: java.lang.String;

        z1 := @parameter1: boolean;

        r7 := @parameter2: java.lang.String;

        r0 := @parameter3: org.springframework.core.MethodParameter;

        r3 := @parameter4: org.springframework.web.context.request.NativeWebRequest;

        r6 := @parameter5: java.lang.Object;

        $r1 = virtualinvoke r0.<org.springframework.core.MethodParameter: java.lang.Class getParameterType()>();

        $r2 = class "Ljava/util/Map;";

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r1);

        if $z0 == 0 goto label1;

        $r8 = specialinvoke r5.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: java.util.Map resolveRequestHeaderMap(java.lang.Class,org.springframework.web.context.request.NativeWebRequest)>($r1, r3);

        return $r8;

     label1:
        $i0 = virtualinvoke r9.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

        r9 = specialinvoke r5.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: java.lang.String getRequiredParameterName(org.springframework.core.MethodParameter)>(r0);

     label2:
        r10 = null;

        $r4 = interfaceinvoke r3.<org.springframework.web.context.request.NativeWebRequest: java.lang.String[] getHeaderValues(java.lang.String)>(r9);

        if $r4 == null goto label5;

        $i1 = lengthof $r4;

        if $i1 != 1 goto label3;

        $r11 = $r4[0];

        goto label4;

     label3:
        $r11 = $r4;

     label4:
        r10 = $r11;

     label5:
        if r10 != null goto label8;

        if r7 == null goto label6;

        r10 = virtualinvoke r5.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: java.lang.Object resolveDefaultValue(java.lang.String)>(r7);

        goto label7;

     label6:
        if z1 == 0 goto label7;

        virtualinvoke r5.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: void raiseMissingHeaderException(java.lang.String,java.lang.Class)>(r9, $r1);

     label7:
        r10 = specialinvoke r5.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: java.lang.Object checkValue(java.lang.String,java.lang.Object,java.lang.Class)>(r9, r10, $r1);

     label8:
        $r12 = virtualinvoke r5.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: org.springframework.web.bind.WebDataBinder createBinder(org.springframework.web.context.request.NativeWebRequest,java.lang.Object,java.lang.String)>(r3, null, r9);

        virtualinvoke r5.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: void initBinder(java.lang.Object,java.lang.String,org.springframework.web.bind.WebDataBinder,org.springframework.web.context.request.NativeWebRequest)>(r6, r9, $r12, r3);

        $r13 = virtualinvoke $r12.<org.springframework.web.bind.WebDataBinder: java.lang.Object convertIfNecessary(java.lang.Object,java.lang.Class,org.springframework.core.MethodParameter)>(r10, $r1, r0);

        return $r13;
    }

    private java.util.Map resolveRequestHeaderMap(java.lang.Class, org.springframework.web.context.request.NativeWebRequest)
    {
        java.lang.String[] $r11;
        org.springframework.web.context.request.NativeWebRequest r3;
        java.util.LinkedHashMap $r2;
        int i0, i1;
        java.lang.String $r6, r15, r16, r17;
        boolean $z0, $z1, $z2, $z3;
        java.util.Iterator $r4, $r9;
        org.springframework.http.HttpHeaders $r12;
        org.springframework.util.MultiValueMap r14;
        org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker r13;
        java.lang.Class r0, $r1, $r7;
        java.lang.Object $r5, $r10;
        org.springframework.util.LinkedMultiValueMap $r8;

        r13 := @this: org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker;

        r0 := @parameter0: java.lang.Class;

        r3 := @parameter1: org.springframework.web.context.request.NativeWebRequest;

        $r1 = class "Lorg/springframework/util/MultiValueMap;";

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z0 == 0 goto label7;

        $r7 = class "Lorg/springframework/http/HttpHeaders;";

        $z2 = virtualinvoke $r7.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z2 == 0 goto label1;

        $r12 = new org.springframework.http.HttpHeaders;

        specialinvoke $r12.<org.springframework.http.HttpHeaders: void <init>()>();

        r14 = $r12;

        goto label2;

     label1:
        $r8 = new org.springframework.util.LinkedMultiValueMap;

        specialinvoke $r8.<org.springframework.util.LinkedMultiValueMap: void <init>()>();

        r14 = $r8;

     label2:
        $r9 = interfaceinvoke r3.<org.springframework.web.context.request.NativeWebRequest: java.util.Iterator getHeaderNames()>();

        goto label6;

     label3:
        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r15 = (java.lang.String) $r10;

        $r11 = interfaceinvoke r3.<org.springframework.web.context.request.NativeWebRequest: java.lang.String[] getHeaderValues(java.lang.String)>(r15);

        i0 = lengthof $r11;

        i1 = 0;

        goto label5;

     label4:
        r16 = $r11[i1];

        interfaceinvoke r14.<org.springframework.util.MultiValueMap: void add(java.lang.Object,java.lang.Object)>(r15, r16);

        i1 = i1 + 1;

     label5:
        if i1 < i0 goto label4;

     label6:
        $z3 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z3 != 0 goto label3;

        return r14;

     label7:
        $r2 = new java.util.LinkedHashMap;

        specialinvoke $r2.<java.util.LinkedHashMap: void <init>()>();

        $r4 = interfaceinvoke r3.<org.springframework.web.context.request.NativeWebRequest: java.util.Iterator getHeaderNames()>();

        goto label9;

     label8:
        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r17 = (java.lang.String) $r5;

        $r6 = interfaceinvoke r3.<org.springframework.web.context.request.NativeWebRequest: java.lang.String getHeader(java.lang.String)>(r17);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r17, $r6);

     label9:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label8;

        return $r2;
    }

    protected java.lang.Object resolveRequestBody(org.springframework.core.MethodParameter, org.springframework.web.context.request.NativeWebRequest, java.lang.Object) throws java.lang.Exception
    {
        org.springframework.http.HttpInputMessage $r3;
        org.springframework.core.MethodParameter r1;
        java.lang.Class $r4;
        java.lang.Object $r5, r6;
        org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker r0;
        org.springframework.web.context.request.NativeWebRequest r2;

        r0 := @this: org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker;

        r1 := @parameter0: org.springframework.core.MethodParameter;

        r2 := @parameter1: org.springframework.web.context.request.NativeWebRequest;

        r6 := @parameter2: java.lang.Object;

        $r3 = virtualinvoke r0.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: org.springframework.http.HttpInputMessage createHttpInputMessage(org.springframework.web.context.request.NativeWebRequest)>(r2);

        $r4 = virtualinvoke r1.<org.springframework.core.MethodParameter: java.lang.Class getParameterType()>();

        $r5 = specialinvoke r0.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: java.lang.Object readWithMessageConverters(org.springframework.core.MethodParameter,org.springframework.http.HttpInputMessage,java.lang.Class)>(r1, $r3, $r4);

        return $r5;
    }

    private org.springframework.http.HttpEntity resolveHttpEntityRequest(org.springframework.core.MethodParameter, org.springframework.web.context.request.NativeWebRequest) throws java.lang.Exception
    {
        org.springframework.http.HttpHeaders $r7;
        org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker r0;
        org.springframework.web.context.request.NativeWebRequest r1;
        org.springframework.http.HttpInputMessage $r2;
        org.springframework.http.HttpEntity $r6;
        org.springframework.core.MethodParameter r3;
        java.lang.Class $r4;
        java.lang.Object $r5;

        r0 := @this: org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker;

        r3 := @parameter0: org.springframework.core.MethodParameter;

        r1 := @parameter1: org.springframework.web.context.request.NativeWebRequest;

        $r2 = virtualinvoke r0.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: org.springframework.http.HttpInputMessage createHttpInputMessage(org.springframework.web.context.request.NativeWebRequest)>(r1);

        $r4 = specialinvoke r0.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: java.lang.Class getHttpEntityType(org.springframework.core.MethodParameter)>(r3);

        $r5 = specialinvoke r0.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: java.lang.Object readWithMessageConverters(org.springframework.core.MethodParameter,org.springframework.http.HttpInputMessage,java.lang.Class)>(r3, $r2, $r4);

        $r6 = new org.springframework.http.HttpEntity;

        $r7 = interfaceinvoke $r2.<org.springframework.http.HttpInputMessage: org.springframework.http.HttpHeaders getHeaders()>();

        specialinvoke $r6.<org.springframework.http.HttpEntity: void <init>(java.lang.Object,org.springframework.util.MultiValueMap)>($r5, $r7);

        return $r6;
    }

    private java.lang.Object readWithMessageConverters(org.springframework.core.MethodParameter, org.springframework.http.HttpInputMessage, java.lang.Class) throws java.lang.Exception
    {
        org.springframework.core.MethodParameter r23;
        boolean $z0, $z1;
        org.springframework.http.HttpHeaders $r1;
        org.springframework.http.MediaType $r2;
        org.springframework.http.converter.HttpMessageConverter[] $r5, $r7;
        org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker r4;
        java.util.List $r8;
        org.springframework.http.converter.HttpMessageConverter r33;
        java.lang.StringBuilder $r12, $r15, $r16, $r17, $r18, $r19, $r20, $r22, $r28, $r30, $r31;
        java.util.ArrayList $r3;
        int i0, i1;
        java.lang.String $r14, $r21, $r25, $r26, $r29, $r32;
        org.springframework.web.HttpMediaTypeNotSupportedException $r6, $r27;
        org.springframework.http.HttpInputMessage r0;
        java.lang.Class r9, $r24;
        org.apache.commons.logging.Log $r10, $r13;
        java.lang.Object $r11;

        r4 := @this: org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker;

        r23 := @parameter0: org.springframework.core.MethodParameter;

        r0 := @parameter1: org.springframework.http.HttpInputMessage;

        r9 := @parameter2: java.lang.Class;

        $r1 = interfaceinvoke r0.<org.springframework.http.HttpInputMessage: org.springframework.http.HttpHeaders getHeaders()>();

        $r2 = virtualinvoke $r1.<org.springframework.http.HttpHeaders: org.springframework.http.MediaType getContentType()>();

        if $r2 != null goto label2;

        $r22 = new java.lang.StringBuilder;

        $r24 = virtualinvoke r23.<org.springframework.core.MethodParameter: java.lang.Class getParameterType()>();

        $r25 = staticinvoke <org.springframework.util.ClassUtils: java.lang.String getShortName(java.lang.Class)>($r24);

        specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>($r25);

        $r26 = virtualinvoke r23.<org.springframework.core.MethodParameter: java.lang.String getParameterName()>();

        if $r26 == null goto label1;

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

     label1:
        $r27 = new org.springframework.web.HttpMediaTypeNotSupportedException;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot extract parameter (");

        $r29 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): no Content-Type found");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<org.springframework.web.HttpMediaTypeNotSupportedException: void <init>(java.lang.String)>($r32);

        throw $r27;

     label2:
        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r5 = r4.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: org.springframework.http.converter.HttpMessageConverter[] messageConverters>;

        if $r5 == null goto label7;

        $r7 = r4.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: org.springframework.http.converter.HttpMessageConverter[] messageConverters>;

        i0 = lengthof $r7;

        i1 = 0;

        goto label6;

     label3:
        r33 = $r7[i1];

        $r8 = interfaceinvoke r33.<org.springframework.http.converter.HttpMessageConverter: java.util.List getSupportedMediaTypes()>();

        interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>($r8);

        $z0 = interfaceinvoke r33.<org.springframework.http.converter.HttpMessageConverter: boolean canRead(java.lang.Class,org.springframework.http.MediaType)>(r9, $r2);

        if $z0 == 0 goto label5;

        $r10 = <org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: org.apache.commons.logging.Log logger>;

        $z1 = interfaceinvoke $r10.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z1 == 0 goto label4;

        $r13 = <org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: org.apache.commons.logging.Log logger>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("Reading [");

        $r14 = virtualinvoke r9.<java.lang.Class: java.lang.String getName()>();

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] as \"");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" using [");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r33);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r13.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r21);

     label4:
        $r11 = interfaceinvoke r33.<org.springframework.http.converter.HttpMessageConverter: java.lang.Object read(java.lang.Class,org.springframework.http.HttpInputMessage)>(r9, r0);

        return $r11;

     label5:
        i1 = i1 + 1;

     label6:
        if i1 < i0 goto label3;

     label7:
        $r6 = new org.springframework.web.HttpMediaTypeNotSupportedException;

        specialinvoke $r6.<org.springframework.web.HttpMediaTypeNotSupportedException: void <init>(org.springframework.http.MediaType,java.util.List)>($r2, $r3);

        throw $r6;
    }

    private java.lang.Class getHttpEntityType(org.springframework.core.MethodParameter)
    {
        java.lang.reflect.GenericArrayType $r7;
        org.springframework.core.MethodParameter r0;
        int $i0;
        java.lang.String $r16, $r19;
        boolean $z0, $z1, $z2;
        java.lang.IllegalArgumentException $r14;
        org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker r13;
        java.lang.reflect.ParameterizedType r3;
        java.lang.reflect.Type $r2, r6, $r8;
        java.lang.reflect.Type[] $r4, $r5;
        java.lang.Class $r1, $r9, $r11, $r12;
        java.lang.Object $r10;
        java.lang.StringBuilder $r15, $r17, $r18;

        r13 := @this: org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker;

        r0 := @parameter0: org.springframework.core.MethodParameter;

        $r1 = virtualinvoke r0.<org.springframework.core.MethodParameter: java.lang.Class getParameterType()>();

        staticinvoke <org.springframework.util.Assert: void isAssignable(java.lang.Class,java.lang.Class)>(class "Lorg/springframework/http/HttpEntity;", $r1);

        $r2 = virtualinvoke r0.<org.springframework.core.MethodParameter: java.lang.reflect.Type getGenericParameterType()>();

        r3 = (java.lang.reflect.ParameterizedType) $r2;

        $r4 = interfaceinvoke r3.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        $i0 = lengthof $r4;

        if $i0 != 1 goto label2;

        $r5 = interfaceinvoke r3.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        r6 = $r5[0];

        $z0 = r6 instanceof java.lang.Class;

        if $z0 == 0 goto label1;

        $r12 = (java.lang.Class) r6;

        return $r12;

     label1:
        $z1 = r6 instanceof java.lang.reflect.GenericArrayType;

        if $z1 == 0 goto label2;

        $r7 = (java.lang.reflect.GenericArrayType) r6;

        $r8 = interfaceinvoke $r7.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();

        $z2 = $r8 instanceof java.lang.Class;

        if $z2 == 0 goto label2;

        $r9 = (java.lang.Class) $r8;

        $r10 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r9, 0);

        $r11 = virtualinvoke $r10.<java.lang.Object: java.lang.Class getClass()>();

        return $r11;

     label2:
        $r14 = new java.lang.IllegalArgumentException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>(java.lang.String)>("HttpEntity parameter (");

        $r16 = virtualinvoke r0.<org.springframework.core.MethodParameter: java.lang.String getParameterName()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") is not parameterized");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r19);

        throw $r14;
    }

    private java.lang.Object resolveCookieValue(java.lang.String, boolean, java.lang.String, org.springframework.core.MethodParameter, org.springframework.web.context.request.NativeWebRequest, java.lang.Object) throws java.lang.Exception
    {
        org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker r2;
        org.springframework.web.context.request.NativeWebRequest r3;
        org.springframework.core.MethodParameter r0;
        org.springframework.web.bind.WebDataBinder $r9;
        int $i0;
        java.lang.Class $r1;
        java.lang.Object $r4, r5, r8, $r10;
        java.lang.String r6, r7;
        boolean z0;

        r2 := @this: org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker;

        r7 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r6 := @parameter2: java.lang.String;

        r0 := @parameter3: org.springframework.core.MethodParameter;

        r3 := @parameter4: org.springframework.web.context.request.NativeWebRequest;

        r5 := @parameter5: java.lang.Object;

        $r1 = virtualinvoke r0.<org.springframework.core.MethodParameter: java.lang.Class getParameterType()>();

        $i0 = virtualinvoke r7.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        r7 = specialinvoke r2.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: java.lang.String getRequiredParameterName(org.springframework.core.MethodParameter)>(r0);

     label1:
        $r4 = virtualinvoke r2.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: java.lang.Object resolveCookieValue(java.lang.String,java.lang.Class,org.springframework.web.context.request.NativeWebRequest)>(r7, $r1, r3);

        r8 = $r4;

        if $r4 != null goto label4;

        if r6 == null goto label2;

        r8 = virtualinvoke r2.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: java.lang.Object resolveDefaultValue(java.lang.String)>(r6);

        goto label3;

     label2:
        if z0 == 0 goto label3;

        virtualinvoke r2.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: void raiseMissingCookieException(java.lang.String,java.lang.Class)>(r7, $r1);

     label3:
        r8 = specialinvoke r2.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: java.lang.Object checkValue(java.lang.String,java.lang.Object,java.lang.Class)>(r7, r8, $r1);

     label4:
        $r9 = virtualinvoke r2.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: org.springframework.web.bind.WebDataBinder createBinder(org.springframework.web.context.request.NativeWebRequest,java.lang.Object,java.lang.String)>(r3, null, r7);

        virtualinvoke r2.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: void initBinder(java.lang.Object,java.lang.String,org.springframework.web.bind.WebDataBinder,org.springframework.web.context.request.NativeWebRequest)>(r5, r7, $r9, r3);

        $r10 = virtualinvoke $r9.<org.springframework.web.bind.WebDataBinder: java.lang.Object convertIfNecessary(java.lang.Object,java.lang.Class,org.springframework.core.MethodParameter)>(r8, $r1, r0);

        return $r10;
    }

    protected java.lang.Object resolveCookieValue(java.lang.String, java.lang.Class, org.springframework.web.context.request.NativeWebRequest) throws java.lang.Exception
    {
        java.lang.UnsupportedOperationException $r0;
        java.lang.Class r3;
        java.lang.String r2;
        org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker r1;
        org.springframework.web.context.request.NativeWebRequest r4;

        r1 := @this: org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.Class;

        r4 := @parameter2: org.springframework.web.context.request.NativeWebRequest;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("@CookieValue not supported");

        throw $r0;
    }

    private java.lang.Object resolvePathVariable(java.lang.String, org.springframework.core.MethodParameter, org.springframework.web.context.request.NativeWebRequest, java.lang.Object) throws java.lang.Exception
    {
        org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker r2;
        org.springframework.web.context.request.NativeWebRequest r3;
        org.springframework.core.MethodParameter r0;
        org.springframework.web.bind.WebDataBinder $r5;
        int $i0;
        java.lang.Class $r1;
        java.lang.Object r6, $r7;
        java.lang.String $r4, r8;

        r2 := @this: org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker;

        r8 := @parameter0: java.lang.String;

        r0 := @parameter1: org.springframework.core.MethodParameter;

        r3 := @parameter2: org.springframework.web.context.request.NativeWebRequest;

        r6 := @parameter3: java.lang.Object;

        $r1 = virtualinvoke r0.<org.springframework.core.MethodParameter: java.lang.Class getParameterType()>();

        $i0 = virtualinvoke r8.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        r8 = specialinvoke r2.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: java.lang.String getRequiredParameterName(org.springframework.core.MethodParameter)>(r0);

     label1:
        $r4 = virtualinvoke r2.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: java.lang.String resolvePathVariable(java.lang.String,java.lang.Class,org.springframework.web.context.request.NativeWebRequest)>(r8, $r1, r3);

        $r5 = virtualinvoke r2.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: org.springframework.web.bind.WebDataBinder createBinder(org.springframework.web.context.request.NativeWebRequest,java.lang.Object,java.lang.String)>(r3, null, r8);

        virtualinvoke r2.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: void initBinder(java.lang.Object,java.lang.String,org.springframework.web.bind.WebDataBinder,org.springframework.web.context.request.NativeWebRequest)>(r6, r8, $r5, r3);

        $r7 = virtualinvoke $r5.<org.springframework.web.bind.WebDataBinder: java.lang.Object convertIfNecessary(java.lang.Object,java.lang.Class,org.springframework.core.MethodParameter)>($r4, $r1, r0);

        return $r7;
    }

    protected java.lang.String resolvePathVariable(java.lang.String, java.lang.Class, org.springframework.web.context.request.NativeWebRequest) throws java.lang.Exception
    {
        java.lang.UnsupportedOperationException $r0;
        java.lang.Class r3;
        java.lang.String r2;
        org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker r1;
        org.springframework.web.context.request.NativeWebRequest r4;

        r1 := @this: org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.Class;

        r4 := @parameter2: org.springframework.web.context.request.NativeWebRequest;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("@PathVariable not supported");

        throw $r0;
    }

    private java.lang.String getRequiredParameterName(org.springframework.core.MethodParameter)
    {
        java.lang.IllegalStateException $r2;
        org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker r9;
        org.springframework.core.MethodParameter r0;
        java.lang.StringBuilder $r3, $r6, $r7;
        java.lang.Class $r4;
        java.lang.String $r1, $r5, $r8;

        r9 := @this: org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker;

        r0 := @parameter0: org.springframework.core.MethodParameter;

        $r1 = virtualinvoke r0.<org.springframework.core.MethodParameter: java.lang.String getParameterName()>();

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalStateException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("No parameter name specified for argument of type [");

        $r4 = virtualinvoke r0.<org.springframework.core.MethodParameter: java.lang.Class getParameterType()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("], and no parameter name information found in class file either.");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r8);

        throw $r2;

     label1:
        return $r1;
    }

    private java.lang.Object checkValue(java.lang.String, java.lang.Object, java.lang.Class)
    {
        java.lang.IllegalStateException $r3;
        java.lang.Boolean $r12;
        java.lang.String r7, $r11;
        boolean $z0, $z1;
        org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker r13;
        java.lang.Object r0;
        java.lang.Class r1, $r2;
        java.lang.StringBuilder $r4, $r5, $r6, $r8, $r9, $r10;

        r13 := @this: org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker;

        r7 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.Object;

        r1 := @parameter2: java.lang.Class;

        if r0 != null goto label2;

        $r2 = <java.lang.Boolean: java.lang.Class TYPE>;

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r12 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        return $r12;

     label1:
        $z1 = virtualinvoke r1.<java.lang.Class: boolean isPrimitive()>();

        if $z1 == 0 goto label2;

        $r3 = new java.lang.IllegalStateException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("Optional ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" parameter \'");

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not present but cannot be translated into a null value due to being declared as a ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("primitive type. Consider declaring it as object wrapper for the corresponding primitive type.");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r11);

        throw $r3;

     label2:
        return r0;
    }

    private org.springframework.web.bind.WebDataBinder resolveModelAttribute(java.lang.String, org.springframework.core.MethodParameter, org.springframework.ui.ExtendedModelMap, org.springframework.web.context.request.NativeWebRequest, java.lang.Object) throws java.lang.Exception
    {
        org.springframework.web.bind.'annotation'.support.HandlerMethodResolver $r6;
        org.springframework.web.context.request.NativeWebRequest r7;
        org.springframework.core.MethodParameter r2;
        java.lang.String r0, $r1, $r14, r15;
        boolean $z0, $z1, $z2;
        org.springframework.web.bind.support.SessionAttributeStore $r9;
        org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker r5;
        org.springframework.web.bind.WebDataBinder $r17;
        java.lang.Class $r3;
        java.lang.Object r8, $r10, r16;
        java.lang.StringBuilder $r11, $r12, $r13;
        org.springframework.ui.ExtendedModelMap r4;

        r5 := @this: org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: org.springframework.core.MethodParameter;

        r4 := @parameter2: org.springframework.ui.ExtendedModelMap;

        r7 := @parameter3: org.springframework.web.context.request.NativeWebRequest;

        r8 := @parameter4: java.lang.Object;

        r15 = r0;

        $r1 = "";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        r15 = staticinvoke <org.springframework.core.Conventions: java.lang.String getVariableNameForParameter(org.springframework.core.MethodParameter)>(r2);

     label1:
        $r3 = virtualinvoke r2.<org.springframework.core.MethodParameter: java.lang.Class getParameterType()>();

        $z1 = virtualinvoke r4.<org.springframework.ui.ExtendedModelMap: boolean containsKey(java.lang.Object)>(r15);

        if $z1 == 0 goto label2;

        r16 = virtualinvoke r4.<org.springframework.ui.ExtendedModelMap: java.lang.Object get(java.lang.Object)>(r15);

        goto label4;

     label2:
        $r6 = r5.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: org.springframework.web.bind.'annotation'.support.HandlerMethodResolver methodResolver>;

        $z2 = virtualinvoke $r6.<org.springframework.web.bind.'annotation'.support.HandlerMethodResolver: boolean isSessionAttribute(java.lang.String,java.lang.Class)>(r15, $r3);

        if $z2 == 0 goto label3;

        $r9 = r5.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: org.springframework.web.bind.support.SessionAttributeStore sessionAttributeStore>;

        $r10 = interfaceinvoke $r9.<org.springframework.web.bind.support.SessionAttributeStore: java.lang.Object retrieveAttribute(org.springframework.web.context.request.WebRequest,java.lang.String)>(r7, r15);

        r16 = $r10;

        if $r10 != null goto label4;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>("Session attribute \'");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r15);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' required - not found in session");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r5.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: void raiseSessionRequiredException(java.lang.String)>($r14);

        goto label4;

     label3:
        r16 = staticinvoke <org.springframework.beans.BeanUtils: java.lang.Object instantiateClass(java.lang.Class)>($r3);

     label4:
        $r17 = virtualinvoke r5.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: org.springframework.web.bind.WebDataBinder createBinder(org.springframework.web.context.request.NativeWebRequest,java.lang.Object,java.lang.String)>(r7, r16, r15);

        virtualinvoke r5.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: void initBinder(java.lang.Object,java.lang.String,org.springframework.web.bind.WebDataBinder,org.springframework.web.context.request.NativeWebRequest)>(r8, r15, $r17, r7);

        return $r17;
    }

    protected boolean isBindingCandidate(java.lang.Object)
    {
        org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker r3;
        java.lang.Object r0;
        java.lang.Class $r1, $r2;
        boolean $z0, $z1, $z2, $z3;

        r3 := @this: org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker;

        r0 := @parameter0: java.lang.Object;

        if r0 == null goto label1;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isArray()>();

        if $z0 != 0 goto label1;

        $z1 = r0 instanceof java.util.Collection;

        if $z1 != 0 goto label1;

        $z2 = r0 instanceof java.util.Map;

        if $z2 != 0 goto label1;

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z3 = staticinvoke <org.springframework.beans.BeanUtils: boolean isSimpleValueType(java.lang.Class)>($r2);

        if $z3 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    protected void raiseMissingParameterException(java.lang.String, java.lang.Class) throws java.lang.Exception
    {
        java.lang.IllegalStateException $r0;
        org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker r10;
        java.lang.StringBuilder $r1, $r3, $r4, $r7, $r8;
        java.lang.Class r5;
        java.lang.String r2, $r6, $r9;

        r10 := @this: org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker;

        r2 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.Class;

        $r0 = new java.lang.IllegalStateException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("Missing parameter \'");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' of type [");

        $r6 = virtualinvoke r5.<java.lang.Class: java.lang.String getName()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9);

        throw $r0;
    }

    protected void raiseMissingHeaderException(java.lang.String, java.lang.Class) throws java.lang.Exception
    {
        java.lang.IllegalStateException $r0;
        org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker r10;
        java.lang.StringBuilder $r1, $r3, $r4, $r7, $r8;
        java.lang.Class r5;
        java.lang.String r2, $r6, $r9;

        r10 := @this: org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker;

        r2 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.Class;

        $r0 = new java.lang.IllegalStateException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("Missing header \'");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' of type [");

        $r6 = virtualinvoke r5.<java.lang.Class: java.lang.String getName()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9);

        throw $r0;
    }

    protected void raiseMissingCookieException(java.lang.String, java.lang.Class) throws java.lang.Exception
    {
        java.lang.IllegalStateException $r0;
        org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker r10;
        java.lang.StringBuilder $r1, $r3, $r4, $r7, $r8;
        java.lang.Class r5;
        java.lang.String r2, $r6, $r9;

        r10 := @this: org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker;

        r2 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.Class;

        $r0 = new java.lang.IllegalStateException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("Missing cookie value \'");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' of type [");

        $r6 = virtualinvoke r5.<java.lang.Class: java.lang.String getName()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9);

        throw $r0;
    }

    protected void raiseSessionRequiredException(java.lang.String) throws java.lang.Exception
    {
        java.lang.IllegalStateException $r0;
        java.lang.String r1;
        org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker r2;

        r2 := @this: org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.lang.IllegalStateException;

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>(r1);

        throw $r0;
    }

    protected org.springframework.web.bind.WebDataBinder createBinder(org.springframework.web.context.request.NativeWebRequest, java.lang.Object, java.lang.String) throws java.lang.Exception
    {
        java.lang.Object r1;
        org.springframework.web.bind.support.WebRequestDataBinder $r0;
        java.lang.String r2;
        org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker r3;
        org.springframework.web.context.request.NativeWebRequest r4;

        r3 := @this: org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker;

        r4 := @parameter0: org.springframework.web.context.request.NativeWebRequest;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.String;

        $r0 = new org.springframework.web.bind.support.WebRequestDataBinder;

        specialinvoke $r0.<org.springframework.web.bind.support.WebRequestDataBinder: void <init>(java.lang.Object,java.lang.String)>(r1, r2);

        return $r0;
    }

    private void doBind(org.springframework.web.bind.WebDataBinder, org.springframework.web.context.request.NativeWebRequest, boolean, boolean) throws java.lang.Exception
    {
        org.springframework.validation.BindingResult $r3, $r5;
        org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker r0;
        org.springframework.web.context.request.NativeWebRequest r2;
        org.springframework.web.bind.WebDataBinder r1;
        org.springframework.validation.BindException $r4;
        boolean z0, z1, $z2;

        r0 := @this: org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker;

        r1 := @parameter0: org.springframework.web.bind.WebDataBinder;

        r2 := @parameter1: org.springframework.web.context.request.NativeWebRequest;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        virtualinvoke r0.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: void doBind(org.springframework.web.bind.WebDataBinder,org.springframework.web.context.request.NativeWebRequest)>(r1, r2);

        if z0 == 0 goto label1;

        virtualinvoke r1.<org.springframework.web.bind.WebDataBinder: void validate()>();

     label1:
        if z1 == 0 goto label2;

        $r3 = virtualinvoke r1.<org.springframework.web.bind.WebDataBinder: org.springframework.validation.BindingResult getBindingResult()>();

        $z2 = interfaceinvoke $r3.<org.springframework.validation.BindingResult: boolean hasErrors()>();

        if $z2 == 0 goto label2;

        $r4 = new org.springframework.validation.BindException;

        $r5 = virtualinvoke r1.<org.springframework.web.bind.WebDataBinder: org.springframework.validation.BindingResult getBindingResult()>();

        specialinvoke $r4.<org.springframework.validation.BindException: void <init>(org.springframework.validation.BindingResult)>($r5);

        throw $r4;

     label2:
        return;
    }

    protected void doBind(org.springframework.web.bind.WebDataBinder, org.springframework.web.context.request.NativeWebRequest) throws java.lang.Exception
    {
        org.springframework.web.bind.WebDataBinder r0;
        org.springframework.web.bind.support.WebRequestDataBinder $r2;
        org.springframework.web.context.request.NativeWebRequest r1;
        org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker r3;

        r3 := @this: org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker;

        r0 := @parameter0: org.springframework.web.bind.WebDataBinder;

        r1 := @parameter1: org.springframework.web.context.request.NativeWebRequest;

        $r2 = (org.springframework.web.bind.support.WebRequestDataBinder) r0;

        virtualinvoke $r2.<org.springframework.web.bind.support.WebRequestDataBinder: void bind(org.springframework.web.context.request.WebRequest)>(r1);

        return;
    }

    protected org.springframework.http.HttpInputMessage createHttpInputMessage(org.springframework.web.context.request.NativeWebRequest) throws java.lang.Exception
    {
        java.lang.UnsupportedOperationException $r0;
        org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker r1;
        org.springframework.web.context.request.NativeWebRequest r2;

        r1 := @this: org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker;

        r2 := @parameter0: org.springframework.web.context.request.NativeWebRequest;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("@RequestBody not supported");

        throw $r0;
    }

    protected org.springframework.http.HttpOutputMessage createHttpOutputMessage(org.springframework.web.context.request.NativeWebRequest) throws java.lang.Exception
    {
        java.lang.UnsupportedOperationException $r0;
        org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker r1;
        org.springframework.web.context.request.NativeWebRequest r2;

        r1 := @this: org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker;

        r2 := @parameter0: org.springframework.web.context.request.NativeWebRequest;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("@ResponseBody not supported");

        throw $r0;
    }

    protected java.lang.String parseDefaultValueAttribute(java.lang.String)
    {
        java.lang.String r0, $r1, $r3;
        boolean $z0;
        org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker r2;

        r2 := @this: org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker;

        r0 := @parameter0: java.lang.String;

        $r1 = "\n\t\t\n\t\t\n\ue000\ue001\ue002\n\t\t\t\t\n";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r3 = r0;

     label2:
        return $r3;
    }

    protected java.lang.Object resolveDefaultValue(java.lang.String)
    {
        java.lang.String r0;
        org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker r1;

        r1 := @this: org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker;

        r0 := @parameter0: java.lang.String;

        return r0;
    }

    protected java.lang.Object resolveCommonArgument(org.springframework.core.MethodParameter, org.springframework.web.context.request.NativeWebRequest) throws java.lang.Exception
    {
        java.lang.IllegalStateException $r7;
        org.springframework.web.bind.support.WebArgumentResolver r18;
        org.springframework.web.context.request.NativeWebRequest r4;
        org.springframework.core.MethodParameter r2;
        int i0, i1;
        java.lang.String $r9, $r14;
        boolean $z0;
        org.springframework.web.bind.support.WebArgumentResolver[] $r1, $r15;
        org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker r0;
        java.lang.Class $r3, $r19;
        java.lang.Object $r5, $r6, $r16, $r17;
        java.lang.StringBuilder $r8, $r10, $r11, $r12, $r13;

        r0 := @this: org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker;

        r2 := @parameter0: org.springframework.core.MethodParameter;

        r4 := @parameter1: org.springframework.web.context.request.NativeWebRequest;

        $r1 = r0.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: org.springframework.web.bind.support.WebArgumentResolver[] customArgumentResolvers>;

        if $r1 == null goto label4;

        $r15 = r0.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: org.springframework.web.bind.support.WebArgumentResolver[] customArgumentResolvers>;

        i0 = lengthof $r15;

        i1 = 0;

        goto label3;

     label1:
        r18 = $r15[i1];

        $r16 = interfaceinvoke r18.<org.springframework.web.bind.support.WebArgumentResolver: java.lang.Object resolveArgument(org.springframework.core.MethodParameter,org.springframework.web.context.request.NativeWebRequest)>(r2, r4);

        $r17 = <org.springframework.web.bind.support.WebArgumentResolver: java.lang.Object UNRESOLVED>;

        if $r16 == $r17 goto label2;

        return $r16;

     label2:
        i1 = i1 + 1;

     label3:
        if i1 < i0 goto label1;

     label4:
        $r3 = virtualinvoke r2.<org.springframework.core.MethodParameter: java.lang.Class getParameterType()>();

        $r5 = virtualinvoke r0.<org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker: java.lang.Object resolveStandardArgument(java.lang.Class,org.springframework.web.context.request.NativeWebRequest)>($r3, r4);

        $r6 = <org.springframework.web.bind.support.WebArgumentResolver: java.lang.Object UNRESOLVED>;

        if $r5 == $r6 goto label7;

        $z0 = staticinvoke <org.springframework.util.ClassUtils: boolean isAssignableValue(java.lang.Class,java.lang.Object)>($r3, $r5);

        if $z0 != 0 goto label7;

        $r7 = new java.lang.IllegalStateException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("Standard argument type [");

        $r9 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] resolved to incompatible value of type [");

        if $r5 == null goto label5;

        $r19 = virtualinvoke $r5.<java.lang.Object: java.lang.Class getClass()>();

        goto label6;

     label5:
        $r19 = null;

     label6:
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r19);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]. Consider declaring the argument type in a less specific fashion.");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r14);

        throw $r7;

     label7:
        return $r5;
    }

    protected java.lang.Object resolveStandardArgument(java.lang.Class, org.springframework.web.context.request.NativeWebRequest) throws java.lang.Exception
    {
        java.lang.Class r0, $r1;
        java.lang.Object $r2;
        boolean $z0;
        org.springframework.web.context.request.NativeWebRequest r3;
        org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker r4;

        r4 := @this: org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker;

        r0 := @parameter0: java.lang.Class;

        r3 := @parameter1: org.springframework.web.context.request.NativeWebRequest;

        $r1 = class "Lorg/springframework/web/context/request/WebRequest;";

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z0 == 0 goto label1;

        return r3;

     label1:
        $r2 = <org.springframework.web.bind.support.WebArgumentResolver: java.lang.Object UNRESOLVED>;

        return $r2;
    }

    protected final void addReturnValueAsModelAttribute(java.lang.reflect.Method, java.lang.Class, java.lang.Object, org.springframework.ui.ExtendedModelMap)
    {
        org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker r8;
        org.springframework.web.bind.'annotation'.ModelAttribute r2;
        java.lang.'annotation'.Annotation $r1;
        java.lang.Object r5;
        java.lang.Class r6, $r7;
        java.lang.String $r3, $r9, r10;
        org.springframework.ui.ExtendedModelMap r4;
        java.lang.reflect.Method r0;
        boolean $z0;

        r8 := @this: org.springframework.web.bind.'annotation'.support.HandlerMethodInvoker;

        r0 := @parameter0: java.lang.reflect.Method;

        r6 := @parameter1: java.lang.Class;

        r5 := @parameter2: java.lang.Object;

        r4 := @parameter3: org.springframework.ui.ExtendedModelMap;

        $r1 = staticinvoke <org.springframework.core.'annotation'.AnnotationUtils: java.lang.'annotation'.Annotation findAnnotation(java.lang.reflect.Method,java.lang.Class)>(r0, class "Lorg/springframework/web/bind/annotation/ModelAttribute;");

        r2 = (org.springframework.web.bind.'annotation'.ModelAttribute) $r1;

        if r2 == null goto label1;

        $r9 = interfaceinvoke r2.<org.springframework.web.bind.'annotation'.ModelAttribute: java.lang.String value()>();

        goto label2;

     label1:
        $r9 = "";

     label2:
        r10 = $r9;

        $r3 = "";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z0 == 0 goto label3;

        $r7 = staticinvoke <org.springframework.core.GenericTypeResolver: java.lang.Class resolveReturnType(java.lang.reflect.Method,java.lang.Class)>(r0, r6);

        r10 = staticinvoke <org.springframework.core.Conventions: java.lang.String getVariableNameForReturnType(java.lang.reflect.Method,java.lang.Class,java.lang.Object)>(r0, $r7, r5);

     label3:
        virtualinvoke r4.<org.springframework.ui.ExtendedModelMap: org.springframework.ui.ExtendedModelMap addAttribute(java.lang.String,java.lang.Object)>(r10, r5);

        return;
    }
}
