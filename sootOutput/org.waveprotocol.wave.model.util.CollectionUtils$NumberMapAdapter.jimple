final class org.waveprotocol.wave.model.util.CollectionUtils$NumberMapAdapter extends java.lang.Object implements org.waveprotocol.wave.model.util.NumberMap
{
    private final java.util.Map backend;
    static final boolean $assertionsDisabled;

    private void <init>(java.util.Map)
    {
        org.waveprotocol.wave.model.util.CollectionUtils$NumberMapAdapter r0;
        java.util.Map r1;

        r0 := @this: org.waveprotocol.wave.model.util.CollectionUtils$NumberMapAdapter;

        r1 := @parameter0: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "Attempt to adapt a null map");

        r0.<org.waveprotocol.wave.model.util.CollectionUtils$NumberMapAdapter: java.util.Map backend> = r1;

        return;
    }

    public void putAll(org.waveprotocol.wave.model.util.ReadableNumberMap)
    {
        org.waveprotocol.wave.model.util.ReadableNumberMap r1;
        java.util.Map $r3, $r4;
        org.waveprotocol.wave.model.util.CollectionUtils$NumberMapAdapter r0, $r2;

        r0 := @this: org.waveprotocol.wave.model.util.CollectionUtils$NumberMapAdapter;

        r1 := @parameter0: org.waveprotocol.wave.model.util.ReadableNumberMap;

        $r4 = r0.<org.waveprotocol.wave.model.util.CollectionUtils$NumberMapAdapter: java.util.Map backend>;

        $r2 = (org.waveprotocol.wave.model.util.CollectionUtils$NumberMapAdapter) r1;

        $r3 = $r2.<org.waveprotocol.wave.model.util.CollectionUtils$NumberMapAdapter: java.util.Map backend>;

        interfaceinvoke $r4.<java.util.Map: void putAll(java.util.Map)>($r3);

        return;
    }

    public void putAll(java.util.Map)
    {
        org.waveprotocol.wave.model.util.CollectionUtils$NumberMapAdapter r0;
        java.util.Map r1, $r2;

        r0 := @this: org.waveprotocol.wave.model.util.CollectionUtils$NumberMapAdapter;

        r1 := @parameter0: java.util.Map;

        $r2 = r0.<org.waveprotocol.wave.model.util.CollectionUtils$NumberMapAdapter: java.util.Map backend>;

        interfaceinvoke $r2.<java.util.Map: void putAll(java.util.Map)>(r1);

        return;
    }

    public void clear()
    {
        org.waveprotocol.wave.model.util.CollectionUtils$NumberMapAdapter r0;
        java.util.Map $r1;

        r0 := @this: org.waveprotocol.wave.model.util.CollectionUtils$NumberMapAdapter;

        $r1 = r0.<org.waveprotocol.wave.model.util.CollectionUtils$NumberMapAdapter: java.util.Map backend>;

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        return;
    }

    public void put(double, java.lang.Object)
    {
        java.lang.Double $r2;
        java.util.Map $r1;
        java.lang.Object r3;
        org.waveprotocol.wave.model.util.CollectionUtils$NumberMapAdapter r0;
        double d0;

        r0 := @this: org.waveprotocol.wave.model.util.CollectionUtils$NumberMapAdapter;

        d0 := @parameter0: double;

        r3 := @parameter1: java.lang.Object;

        $r1 = r0.<org.waveprotocol.wave.model.util.CollectionUtils$NumberMapAdapter: java.util.Map backend>;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, r3);

        return;
    }

    public void remove(double)
    {
        java.lang.Double $r2;
        java.util.Map $r1;
        org.waveprotocol.wave.model.util.CollectionUtils$NumberMapAdapter r0;
        double d0;

        r0 := @this: org.waveprotocol.wave.model.util.CollectionUtils$NumberMapAdapter;

        d0 := @parameter0: double;

        $r1 = r0.<org.waveprotocol.wave.model.util.CollectionUtils$NumberMapAdapter: java.util.Map backend>;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        interfaceinvoke $r1.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r2);

        return;
    }

    public boolean containsKey(double)
    {
        java.lang.Double $r2;
        java.util.Map $r1;
        org.waveprotocol.wave.model.util.CollectionUtils$NumberMapAdapter r0;
        double d0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.util.CollectionUtils$NumberMapAdapter;

        d0 := @parameter0: double;

        $r1 = r0.<org.waveprotocol.wave.model.util.CollectionUtils$NumberMapAdapter: java.util.Map backend>;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r2);

        return $z0;
    }

    public java.lang.Object getExisting(double)
    {
        java.lang.Double $r2, $r5;
        java.lang.AssertionError $r6;
        org.waveprotocol.wave.model.util.CollectionUtils$NumberMapAdapter r0;
        java.util.Map $r1, $r4;
        java.lang.Object $r3;
        boolean $z0, $z1;
        double d0;

        r0 := @this: org.waveprotocol.wave.model.util.CollectionUtils$NumberMapAdapter;

        d0 := @parameter0: double;

        $z0 = <org.waveprotocol.wave.model.util.CollectionUtils$NumberMapAdapter: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r4 = r0.<org.waveprotocol.wave.model.util.CollectionUtils$NumberMapAdapter: java.util.Map backend>;

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $z1 = interfaceinvoke $r4.<java.util.Map: boolean containsKey(java.lang.Object)>($r5);

        if $z1 != 0 goto label1;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label1:
        $r1 = r0.<org.waveprotocol.wave.model.util.CollectionUtils$NumberMapAdapter: java.util.Map backend>;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        return $r3;
    }

    public java.lang.Object get(double)
    {
        java.lang.Double $r2;
        java.util.Map $r1;
        java.lang.Object $r3;
        org.waveprotocol.wave.model.util.CollectionUtils$NumberMapAdapter r0;
        double d0;

        r0 := @this: org.waveprotocol.wave.model.util.CollectionUtils$NumberMapAdapter;

        d0 := @parameter0: double;

        $r1 = r0.<org.waveprotocol.wave.model.util.CollectionUtils$NumberMapAdapter: java.util.Map backend>;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        return $r3;
    }

    public java.lang.Object get(double, java.lang.Object)
    {
        java.lang.Double $r2, $r5;
        org.waveprotocol.wave.model.util.CollectionUtils$NumberMapAdapter r0;
        java.util.Map $r1, $r4;
        java.lang.Object r3, $r6;
        double d0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.util.CollectionUtils$NumberMapAdapter;

        d0 := @parameter0: double;

        r3 := @parameter1: java.lang.Object;

        $r1 = r0.<org.waveprotocol.wave.model.util.CollectionUtils$NumberMapAdapter: java.util.Map backend>;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        $r4 = r0.<org.waveprotocol.wave.model.util.CollectionUtils$NumberMapAdapter: java.util.Map backend>;

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r6 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        return $r6;

     label1:
        return r3;
    }

    public boolean isEmpty()
    {
        org.waveprotocol.wave.model.util.CollectionUtils$NumberMapAdapter r0;
        java.util.Map $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.util.CollectionUtils$NumberMapAdapter;

        $r1 = r0.<org.waveprotocol.wave.model.util.CollectionUtils$NumberMapAdapter: java.util.Map backend>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();

        return $z0;
    }

    public void each(org.waveprotocol.wave.model.util.ReadableNumberMap$ProcV)
    {
        java.util.Map$Entry r5;
        java.util.Iterator $r3;
        java.lang.Double $r8;
        java.util.Set $r2;
        org.waveprotocol.wave.model.util.CollectionUtils$NumberMapAdapter r0;
        org.waveprotocol.wave.model.util.ReadableNumberMap$ProcV r6;
        java.util.Map $r1;
        java.lang.Object $r4, $r7, $r9;
        boolean $z0;
        double $d0;

        r0 := @this: org.waveprotocol.wave.model.util.CollectionUtils$NumberMapAdapter;

        r6 := @parameter0: org.waveprotocol.wave.model.util.ReadableNumberMap$ProcV;

        $r1 = r0.<org.waveprotocol.wave.model.util.CollectionUtils$NumberMapAdapter: java.util.Map backend>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r7 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = (java.lang.Double) $r7;

        $d0 = virtualinvoke $r8.<java.lang.Double: double doubleValue()>();

        $r9 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke r6.<org.waveprotocol.wave.model.util.ReadableNumberMap$ProcV: void apply(double,java.lang.Object)>($d0, $r9);

        goto label1;

     label2:
        return;
    }

    public void filter(org.waveprotocol.wave.model.util.NumberMap$EntryFilter)
    {
        java.util.Map$Entry r5;
        java.util.Iterator $r3;
        java.lang.Double $r8;
        org.waveprotocol.wave.model.util.NumberMap$EntryFilter r6;
        java.util.Set $r2;
        org.waveprotocol.wave.model.util.CollectionUtils$NumberMapAdapter r0;
        java.util.Map $r1;
        java.lang.Object $r4, $r7, $r9;
        boolean $z0, $z1;
        double $d0;

        r0 := @this: org.waveprotocol.wave.model.util.CollectionUtils$NumberMapAdapter;

        r6 := @parameter0: org.waveprotocol.wave.model.util.NumberMap$EntryFilter;

        $r1 = r0.<org.waveprotocol.wave.model.util.CollectionUtils$NumberMapAdapter: java.util.Map backend>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r7 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = (java.lang.Double) $r7;

        $d0 = virtualinvoke $r8.<java.lang.Double: double doubleValue()>();

        $r9 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $z1 = interfaceinvoke r6.<org.waveprotocol.wave.model.util.NumberMap$EntryFilter: boolean apply(double,java.lang.Object)>($d0, $r9);

        if $z1 == 0 goto label2;

        goto label3;

     label2:
        interfaceinvoke $r3.<java.util.Iterator: void remove()>();

     label3:
        goto label1;

     label4:
        return;
    }

    public int countEntries()
    {
        int $i0;
        org.waveprotocol.wave.model.util.CollectionUtils$NumberMapAdapter r0;
        java.util.Map $r1;

        r0 := @this: org.waveprotocol.wave.model.util.CollectionUtils$NumberMapAdapter;

        $r1 = r0.<org.waveprotocol.wave.model.util.CollectionUtils$NumberMapAdapter: java.util.Map backend>;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        return $i0;
    }

    public java.lang.String toString()
    {
        java.lang.String $r2;
        org.waveprotocol.wave.model.util.CollectionUtils$NumberMapAdapter r0;
        java.util.Map $r1;

        r0 := @this: org.waveprotocol.wave.model.util.CollectionUtils$NumberMapAdapter;

        $r1 = r0.<org.waveprotocol.wave.model.util.CollectionUtils$NumberMapAdapter: java.util.Map backend>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }

    void <init>(java.util.Map, org.waveprotocol.wave.model.util.CollectionUtils$1)
    {
        org.waveprotocol.wave.model.util.CollectionUtils$1 r2;
        org.waveprotocol.wave.model.util.CollectionUtils$NumberMapAdapter r0;
        java.util.Map r1;

        r0 := @this: org.waveprotocol.wave.model.util.CollectionUtils$NumberMapAdapter;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: org.waveprotocol.wave.model.util.CollectionUtils$1;

        specialinvoke r0.<org.waveprotocol.wave.model.util.CollectionUtils$NumberMapAdapter: void <init>(java.util.Map)>(r1);

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/model/util/CollectionUtils;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.model.util.CollectionUtils$NumberMapAdapter: boolean $assertionsDisabled> = $z1;

        return;
    }
}
