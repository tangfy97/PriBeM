class FreeVariableCollectionV extends kodkod.ast.visitor.AbstractCollector
{

    public java.util.HashSet newSet()
    {
        java.util.HashSet $r0;
        FreeVariableCollectionV r1;

        r1 := @this: FreeVariableCollectionV;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        return $r0;
    }

    public void <init>()
    {
        java.util.HashSet $r1;
        FreeVariableCollectionV r0;

        r0 := @this: FreeVariableCollectionV;

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        specialinvoke r0.<kodkod.ast.visitor.AbstractCollector: void <init>(java.util.Set)>($r1);

        return;
    }

    public java.util.Set visit(kodkod.ast.Variable)
    {
        java.util.Set $r3, $r5, $r6;
        FreeVariableCollectionV r0;
        kodkod.ast.Variable r1;
        java.util.HashSet $r4;
        java.util.Map $r2;
        boolean $z0;

        r0 := @this: FreeVariableCollectionV;

        r1 := @parameter0: kodkod.ast.Variable;

        $r2 = r0.<FreeVariableCollectionV: java.util.Map cache>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r6 = virtualinvoke r0.<FreeVariableCollectionV: java.util.Set lookup(kodkod.ast.Node)>(r1);

        return $r6;

     label1:
        $r3 = r0.<FreeVariableCollectionV: java.util.Set cached>;

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>(r1);

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        virtualinvoke $r4.<java.util.HashSet: boolean add(java.lang.Object)>(r1);

        $r5 = virtualinvoke r0.<FreeVariableCollectionV: java.util.Set cache(kodkod.ast.Node,java.util.Set)>(r1, $r4);

        return $r5;
    }

    public java.util.Set visit(kodkod.ast.QuantifiedFormula)
    {
        kodkod.ast.QuantifiedFormula r1;
        java.util.HashSet $r4;
        java.util.Map $r2;
        boolean $z0, $z1;
        java.util.Iterator $r9;
        kodkod.ast.Formula $r5;
        java.util.Collection $r7;
        java.util.Set $r3, $r13, $r14;
        kodkod.ast.Decl r11;
        kodkod.ast.Decls $r8;
        FreeVariableCollectionV r0;
        kodkod.ast.Variable $r12;
        java.lang.Object $r6, $r10;

        r0 := @this: FreeVariableCollectionV;

        r1 := @parameter0: kodkod.ast.QuantifiedFormula;

        $r2 = r0.<FreeVariableCollectionV: java.util.Map cache>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r14 = virtualinvoke r0.<FreeVariableCollectionV: java.util.Set lookup(kodkod.ast.Node)>(r1);

        return $r14;

     label1:
        $r3 = r0.<FreeVariableCollectionV: java.util.Set cached>;

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>(r1);

        $r4 = new java.util.HashSet;

        $r5 = virtualinvoke r1.<kodkod.ast.QuantifiedFormula: kodkod.ast.Formula formula()>();

        $r6 = virtualinvoke $r5.<kodkod.ast.Formula: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r7 = (java.util.Collection) $r6;

        specialinvoke $r4.<java.util.HashSet: void <init>(java.util.Collection)>($r7);

        $r8 = virtualinvoke r1.<kodkod.ast.QuantifiedFormula: kodkod.ast.Decls decls()>();

        $r9 = virtualinvoke $r8.<kodkod.ast.Decls: java.util.Iterator iterator()>();

        goto label3;

     label2:
        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r11 = (kodkod.ast.Decl) $r10;

        $r12 = virtualinvoke r11.<kodkod.ast.Decl: kodkod.ast.Variable variable()>();

        interfaceinvoke $r4.<java.util.Set: boolean remove(java.lang.Object)>($r12);

     label3:
        $z1 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label2;

        $r13 = virtualinvoke r0.<FreeVariableCollectionV: java.util.Set cache(kodkod.ast.Node,java.util.Set)>(r1, $r4);

        return $r13;
    }

    public volatile java.util.Set newSet()
    {
        java.util.HashSet $r1;
        FreeVariableCollectionV r0;

        r0 := @this: FreeVariableCollectionV;

        $r1 = virtualinvoke r0.<FreeVariableCollectionV: java.util.HashSet newSet()>();

        return $r1;
    }
}
