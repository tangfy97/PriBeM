public abstract class com.spatial4j.core.io.LineReader extends java.lang.Object implements java.util.Iterator
{
    private int count;
    private int lineNumber;
    private java.io.BufferedReader reader;
    private java.lang.String nextLine;

    public abstract java.lang.Object parseLine(java.lang.String);

    protected void readComment(java.lang.String)
    {
        com.spatial4j.core.io.LineReader r0;
        java.lang.String r1;

        r0 := @this: com.spatial4j.core.io.LineReader;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public void <init>(java.io.InputStream) throws java.io.IOException
    {
        com.spatial4j.core.io.LineReader r0;
        java.io.BufferedReader $r1;
        java.io.InputStreamReader $r2;
        java.io.InputStream r3;

        r0 := @this: com.spatial4j.core.io.LineReader;

        r3 := @parameter0: java.io.InputStream;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.spatial4j.core.io.LineReader: int count> = 0;

        r0.<com.spatial4j.core.io.LineReader: int lineNumber> = 0;

        $r1 = new java.io.BufferedReader;

        $r2 = new java.io.InputStreamReader;

        specialinvoke $r2.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>(r3, "UTF-8");

        specialinvoke $r1.<java.io.BufferedReader: void <init>(java.io.Reader)>($r2);

        r0.<com.spatial4j.core.io.LineReader: java.io.BufferedReader reader> = $r1;

        virtualinvoke r0.<com.spatial4j.core.io.LineReader: java.lang.Object next()>();

        return;
    }

    public void <init>(java.io.Reader) throws java.io.IOException
    {
        com.spatial4j.core.io.LineReader r0;
        java.io.Reader r1;
        java.io.BufferedReader $r2, $r3;
        boolean $z0;

        r0 := @this: com.spatial4j.core.io.LineReader;

        r1 := @parameter0: java.io.Reader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.spatial4j.core.io.LineReader: int count> = 0;

        r0.<com.spatial4j.core.io.LineReader: int lineNumber> = 0;

        $z0 = r1 instanceof java.io.BufferedReader;

        if $z0 == 0 goto label1;

        $r3 = (java.io.BufferedReader) r1;

        r0.<com.spatial4j.core.io.LineReader: java.io.BufferedReader reader> = $r3;

        goto label2;

     label1:
        $r2 = new java.io.BufferedReader;

        specialinvoke $r2.<java.io.BufferedReader: void <init>(java.io.Reader)>(r1);

        r0.<com.spatial4j.core.io.LineReader: java.io.BufferedReader reader> = $r2;

     label2:
        virtualinvoke r0.<com.spatial4j.core.io.LineReader: java.lang.Object next()>();

        return;
    }

    public void <init>(java.io.File) throws java.io.IOException
    {
        com.spatial4j.core.io.LineReader r0;
        java.io.BufferedReader $r1;
        java.io.FileInputStream $r3;
        java.io.InputStreamReader $r2;
        java.io.File r4;

        r0 := @this: com.spatial4j.core.io.LineReader;

        r4 := @parameter0: java.io.File;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.spatial4j.core.io.LineReader: int count> = 0;

        r0.<com.spatial4j.core.io.LineReader: int lineNumber> = 0;

        $r1 = new java.io.BufferedReader;

        $r2 = new java.io.InputStreamReader;

        $r3 = new java.io.FileInputStream;

        specialinvoke $r3.<java.io.FileInputStream: void <init>(java.io.File)>(r4);

        specialinvoke $r2.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r3, "UTF-8");

        specialinvoke $r1.<java.io.BufferedReader: void <init>(java.io.Reader)>($r2);

        r0.<com.spatial4j.core.io.LineReader: java.io.BufferedReader reader> = $r1;

        virtualinvoke r0.<com.spatial4j.core.io.LineReader: java.lang.Object next()>();

        return;
    }

    public boolean hasNext()
    {
        com.spatial4j.core.io.LineReader r0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: com.spatial4j.core.io.LineReader;

        $r1 = r0.<com.spatial4j.core.io.LineReader: java.lang.String nextLine>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.Object next()
    {
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.String $r1, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r12;
        boolean $z0;
        java.io.IOException $r13;
        java.lang.RuntimeException $r14;
        java.lang.Object r15;
        com.spatial4j.core.io.LineReader r0;
        java.io.BufferedReader $r2, $r3, $r11, $r16;

        r0 := @this: com.spatial4j.core.io.LineReader;

        r15 = null;

        $r1 = r0.<com.spatial4j.core.io.LineReader: java.lang.String nextLine>;

        if $r1 == null goto label1;

        $r12 = r0.<com.spatial4j.core.io.LineReader: java.lang.String nextLine>;

        r15 = virtualinvoke r0.<com.spatial4j.core.io.LineReader: java.lang.Object parseLine(java.lang.String)>($r12);

        $i3 = r0.<com.spatial4j.core.io.LineReader: int count>;

        $i4 = $i3 + 1;

        r0.<com.spatial4j.core.io.LineReader: int count> = $i4;

     label1:
        $r2 = r0.<com.spatial4j.core.io.LineReader: java.io.BufferedReader reader>;

        if $r2 == null goto label7;

     label2:
        $r16 = r0.<com.spatial4j.core.io.LineReader: java.io.BufferedReader reader>;

        if $r16 == null goto label5;

        $r3 = r0.<com.spatial4j.core.io.LineReader: java.io.BufferedReader reader>;

        $r4 = virtualinvoke $r3.<java.io.BufferedReader: java.lang.String readLine()>();

        r0.<com.spatial4j.core.io.LineReader: java.lang.String nextLine> = $r4;

        $i0 = r0.<com.spatial4j.core.io.LineReader: int lineNumber>;

        $i1 = $i0 + 1;

        r0.<com.spatial4j.core.io.LineReader: int lineNumber> = $i1;

        $r5 = r0.<com.spatial4j.core.io.LineReader: java.lang.String nextLine>;

        if $r5 != null goto label3;

        $r11 = r0.<com.spatial4j.core.io.LineReader: java.io.BufferedReader reader>;

        virtualinvoke $r11.<java.io.BufferedReader: void close()>();

        r0.<com.spatial4j.core.io.LineReader: java.io.BufferedReader reader> = null;

        goto label2;

     label3:
        $r6 = r0.<com.spatial4j.core.io.LineReader: java.lang.String nextLine>;

        $z0 = virtualinvoke $r6.<java.lang.String: boolean startsWith(java.lang.String)>("#");

        if $z0 == 0 goto label4;

        $r10 = r0.<com.spatial4j.core.io.LineReader: java.lang.String nextLine>;

        virtualinvoke r0.<com.spatial4j.core.io.LineReader: void readComment(java.lang.String)>($r10);

        goto label2;

     label4:
        $r7 = r0.<com.spatial4j.core.io.LineReader: java.lang.String nextLine>;

        $r8 = virtualinvoke $r7.<java.lang.String: java.lang.String trim()>();

        r0.<com.spatial4j.core.io.LineReader: java.lang.String nextLine> = $r8;

        $r9 = r0.<com.spatial4j.core.io.LineReader: java.lang.String nextLine>;

        $i2 = virtualinvoke $r9.<java.lang.String: int length()>();

        if $i2 <= 0 goto label2;

        goto label5;

     label5:
        goto label7;

     label6:
        $r13 := @caughtexception;

        $r14 = new java.lang.RuntimeException;

        specialinvoke $r14.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("IOException thrown while reading/closing reader", $r13);

        throw $r14;

     label7:
        return r15;

        catch java.io.IOException from label2 to label5 with label6;
    }

    public void remove()
    {
        java.lang.UnsupportedOperationException $r0;
        com.spatial4j.core.io.LineReader r1;

        r1 := @this: com.spatial4j.core.io.LineReader;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public int getLineNumber()
    {
        int $i0;
        com.spatial4j.core.io.LineReader r0;

        r0 := @this: com.spatial4j.core.io.LineReader;

        $i0 = r0.<com.spatial4j.core.io.LineReader: int lineNumber>;

        return $i0;
    }

    public int getCount()
    {
        int $i0;
        com.spatial4j.core.io.LineReader r0;

        r0 := @this: com.spatial4j.core.io.LineReader;

        $i0 = r0.<com.spatial4j.core.io.LineReader: int count>;

        return $i0;
    }
}
