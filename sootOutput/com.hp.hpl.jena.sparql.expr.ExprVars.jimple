public class com.hp.hpl.jena.sparql.expr.ExprVars extends java.lang.Object
{

    public void <init>()
    {
        com.hp.hpl.jena.sparql.expr.ExprVars r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprVars;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.Set getVarsMentioned(com.hp.hpl.jena.sparql.expr.Expr)
    {
        java.util.HashSet $r0;
        com.hp.hpl.jena.sparql.expr.Expr r1;

        r1 := @parameter0: com.hp.hpl.jena.sparql.expr.Expr;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        staticinvoke <com.hp.hpl.jena.sparql.expr.ExprVars: void varsMentioned(java.util.Collection,com.hp.hpl.jena.sparql.expr.Expr)>($r0, r1);

        return $r0;
    }

    public static java.util.Set getVarsMentioned(com.hp.hpl.jena.sparql.expr.ExprList)
    {
        java.util.HashSet $r0;
        java.util.Iterator $r2;
        com.hp.hpl.jena.sparql.expr.Expr r4;
        com.hp.hpl.jena.sparql.expr.ExprList r1;
        java.lang.Object $r3;
        boolean $z0;

        r1 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprList;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.ExprList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.hp.hpl.jena.sparql.expr.Expr) $r3;

        staticinvoke <com.hp.hpl.jena.sparql.expr.ExprVars: void varsMentioned(java.util.Collection,com.hp.hpl.jena.sparql.expr.Expr)>($r0, r4);

        goto label1;

     label2:
        return $r0;
    }

    public static void varsMentioned(java.util.Collection, com.hp.hpl.jena.sparql.expr.Expr)
    {
        com.hp.hpl.jena.sparql.expr.Expr r3;
        java.util.Collection r2;
        com.hp.hpl.jena.sparql.expr.ExprVars$1 $r0;
        com.hp.hpl.jena.sparql.expr.ExprVars$ExprVarsWorker $r1;

        r2 := @parameter0: java.util.Collection;

        r3 := @parameter1: com.hp.hpl.jena.sparql.expr.Expr;

        $r0 = new com.hp.hpl.jena.sparql.expr.ExprVars$1;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.expr.ExprVars$1: void <init>()>();

        $r1 = new com.hp.hpl.jena.sparql.expr.ExprVars$ExprVarsWorker;

        specialinvoke $r1.<com.hp.hpl.jena.sparql.expr.ExprVars$ExprVarsWorker: void <init>(java.util.Collection,com.hp.hpl.jena.sparql.expr.ExprVars$Action)>(r2, $r0);

        staticinvoke <com.hp.hpl.jena.sparql.expr.ExprWalker: void walk(com.hp.hpl.jena.sparql.expr.ExprVisitor,com.hp.hpl.jena.sparql.expr.Expr)>($r1, r3);

        return;
    }

    public static java.util.Set getVarNamesMentioned(com.hp.hpl.jena.sparql.expr.Expr)
    {
        java.util.HashSet $r0;
        com.hp.hpl.jena.sparql.expr.Expr r1;

        r1 := @parameter0: com.hp.hpl.jena.sparql.expr.Expr;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        staticinvoke <com.hp.hpl.jena.sparql.expr.ExprVars: void varNamesMentioned(java.util.Collection,com.hp.hpl.jena.sparql.expr.Expr)>($r0, r1);

        return $r0;
    }

    public static void varNamesMentioned(java.util.Collection, com.hp.hpl.jena.sparql.expr.Expr)
    {
        com.hp.hpl.jena.sparql.expr.ExprVars$2 $r0;
        com.hp.hpl.jena.sparql.expr.Expr r3;
        java.util.Collection r2;
        com.hp.hpl.jena.sparql.expr.ExprVars$ExprVarsWorker $r1;

        r2 := @parameter0: java.util.Collection;

        r3 := @parameter1: com.hp.hpl.jena.sparql.expr.Expr;

        $r0 = new com.hp.hpl.jena.sparql.expr.ExprVars$2;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.expr.ExprVars$2: void <init>()>();

        $r1 = new com.hp.hpl.jena.sparql.expr.ExprVars$ExprVarsWorker;

        specialinvoke $r1.<com.hp.hpl.jena.sparql.expr.ExprVars$ExprVarsWorker: void <init>(java.util.Collection,com.hp.hpl.jena.sparql.expr.ExprVars$Action)>(r2, $r0);

        staticinvoke <com.hp.hpl.jena.sparql.expr.ExprWalker: void walk(com.hp.hpl.jena.sparql.expr.ExprVisitor,com.hp.hpl.jena.sparql.expr.Expr)>($r1, r3);

        return;
    }
}
