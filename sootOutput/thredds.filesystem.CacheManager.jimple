public class thredds.filesystem.CacheManager extends java.lang.Object
{
    private static org.slf4j.Logger cacheLog;
    private static net.sf.ehcache.CacheManager cacheManager;
    private static boolean debugConfig;
    private net.sf.ehcache.Cache cache;
    private java.util.concurrent.atomic.AtomicLong addElements;
    private java.util.concurrent.atomic.AtomicLong hits;
    private java.util.concurrent.atomic.AtomicLong requests;
    private static java.lang.String configReadOnly;
    private static java.lang.String config;

    public static net.sf.ehcache.CacheManager getEhcache()
    {
        net.sf.ehcache.CacheManager $r0;

        $r0 = <thredds.filesystem.CacheManager: net.sf.ehcache.CacheManager cacheManager>;

        return $r0;
    }

    public static void makeStandardCacheManager(java.lang.String, java.lang.String) throws java.io.IOException
    {
        org.slf4j.Logger $r5;
        net.sf.ehcache.CacheManager $r9;
        java.io.StringBufferInputStream $r10;
        java.lang.StringBuilder $r4, $r6, $r7;
        java.lang.String r0, $r1, r2, $r3, $r8;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r1 = staticinvoke <ucar.nc2.util.IO: java.lang.String readFile(java.lang.String)>(r0);

        $r3 = staticinvoke <ucar.unidata.util.StringUtil: java.lang.String substitute(java.lang.String,java.lang.String,java.lang.String)>($r1, "${cacheDir}", r2);

        $r5 = <thredds.filesystem.CacheManager: org.slf4j.Logger cacheLog>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("thredds.filesystem.CacheManager configuraton ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r5.<org.slf4j.Logger: void info(java.lang.String)>($r8);

        $r9 = new net.sf.ehcache.CacheManager;

        $r10 = new java.io.StringBufferInputStream;

        specialinvoke $r10.<java.io.StringBufferInputStream: void <init>(java.lang.String)>($r3);

        specialinvoke $r9.<net.sf.ehcache.CacheManager: void <init>(java.io.InputStream)>($r10);

        <thredds.filesystem.CacheManager: net.sf.ehcache.CacheManager cacheManager> = $r9;

        return;
    }

    public static void makeTestCacheManager(java.lang.String)
    {
        java.io.PrintStream $r6;
        java.lang.Object[] $r5;
        net.sf.ehcache.CacheManager $r3;
        java.io.StringBufferInputStream $r4;
        java.lang.String r0, $r1, $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $r1 = <thredds.filesystem.CacheManager: java.lang.String config>;

        $r2 = staticinvoke <ucar.unidata.util.StringUtil: java.lang.String substitute(java.lang.String,java.lang.String,java.lang.String)>($r1, "${cacheDir}", r0);

        $z0 = <thredds.filesystem.CacheManager: boolean debugConfig>;

        if $z0 == 0 goto label1;

        $r6 = <java.lang.System: java.io.PrintStream out>;

        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = $r2;

        virtualinvoke $r6.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>("CacheManager test=%n %s %n", $r5);

     label1:
        $r3 = new net.sf.ehcache.CacheManager;

        $r4 = new java.io.StringBufferInputStream;

        specialinvoke $r4.<java.io.StringBufferInputStream: void <init>(java.lang.String)>($r2);

        specialinvoke $r3.<net.sf.ehcache.CacheManager: void <init>(java.io.InputStream)>($r4);

        <thredds.filesystem.CacheManager: net.sf.ehcache.CacheManager cacheManager> = $r3;

        return;
    }

    public static void makeReadOnlyCacheManager(java.lang.String, java.lang.String)
    {
        java.io.PrintStream $r8;
        java.lang.Object[] $r7;
        net.sf.ehcache.CacheManager $r5;
        java.io.StringBufferInputStream $r6;
        java.lang.String r0, $r1, $r2, r3, $r4;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r1 = <thredds.filesystem.CacheManager: java.lang.String configReadOnly>;

        $r2 = staticinvoke <ucar.unidata.util.StringUtil: java.lang.String substitute(java.lang.String,java.lang.String,java.lang.String)>($r1, "${cacheDir}", r0);

        $r4 = staticinvoke <ucar.unidata.util.StringUtil: java.lang.String substitute(java.lang.String,java.lang.String,java.lang.String)>($r2, "${cacheName}", r3);

        $z0 = <thredds.filesystem.CacheManager: boolean debugConfig>;

        if $z0 == 0 goto label1;

        $r8 = <java.lang.System: java.io.PrintStream out>;

        $r7 = newarray (java.lang.Object)[1];

        $r7[0] = $r4;

        virtualinvoke $r8.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>("CacheManager readonly =%n %s %n", $r7);

     label1:
        $r5 = new net.sf.ehcache.CacheManager;

        $r6 = new java.io.StringBufferInputStream;

        specialinvoke $r6.<java.io.StringBufferInputStream: void <init>(java.lang.String)>($r4);

        specialinvoke $r5.<net.sf.ehcache.CacheManager: void <init>(java.io.InputStream)>($r6);

        <thredds.filesystem.CacheManager: net.sf.ehcache.CacheManager cacheManager> = $r5;

        return;
    }

    public static void shutdown()
    {
        net.sf.ehcache.CacheManager $r0, $r2;
        org.slf4j.Logger $r1;

        $r0 = <thredds.filesystem.CacheManager: net.sf.ehcache.CacheManager cacheManager>;

        if $r0 == null goto label1;

        $r1 = <thredds.filesystem.CacheManager: org.slf4j.Logger cacheLog>;

        interfaceinvoke $r1.<org.slf4j.Logger: void info(java.lang.String)>("thredds.filesystem.CacheManager shutdown");

        $r2 = <thredds.filesystem.CacheManager: net.sf.ehcache.CacheManager cacheManager>;

        virtualinvoke $r2.<net.sf.ehcache.CacheManager: void shutdown()>();

     label1:
        <thredds.filesystem.CacheManager: net.sf.ehcache.CacheManager cacheManager> = null;

        return;
    }

    public void <init>(java.lang.String)
    {
        net.sf.ehcache.CacheManager $r5;
        thredds.filesystem.CacheManager r0;
        java.lang.String r4, $r12, $r18, $r20;
        net.sf.ehcache.Statistics $r17;
        org.slf4j.Logger $r8, $r14;
        java.util.concurrent.atomic.AtomicLong $r1, $r2, $r3;
        java.lang.StringBuilder $r7, $r9, $r11, $r13, $r15, $r19;
        net.sf.ehcache.Cache $r6, $r10, $r16;

        r0 := @this: thredds.filesystem.CacheManager;

        r4 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicLong: void <init>()>();

        r0.<thredds.filesystem.CacheManager: java.util.concurrent.atomic.AtomicLong addElements> = $r1;

        $r2 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicLong: void <init>()>();

        r0.<thredds.filesystem.CacheManager: java.util.concurrent.atomic.AtomicLong hits> = $r2;

        $r3 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicLong: void <init>()>();

        r0.<thredds.filesystem.CacheManager: java.util.concurrent.atomic.AtomicLong requests> = $r3;

        $r5 = <thredds.filesystem.CacheManager: net.sf.ehcache.CacheManager cacheManager>;

        $r6 = virtualinvoke $r5.<net.sf.ehcache.CacheManager: net.sf.ehcache.Cache getCache(java.lang.String)>(r4);

        r0.<thredds.filesystem.CacheManager: net.sf.ehcache.Cache cache> = $r6;

        $r8 = <thredds.filesystem.CacheManager: org.slf4j.Logger cacheLog>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("thredds.filesystem.CacheManager ");

        $r10 = r0.<thredds.filesystem.CacheManager: net.sf.ehcache.Cache cache>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r8.<org.slf4j.Logger: void info(java.lang.String)>($r12);

        $r14 = <thredds.filesystem.CacheManager: org.slf4j.Logger cacheLog>;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("thredds.filesystem.CacheManager ");

        $r16 = r0.<thredds.filesystem.CacheManager: net.sf.ehcache.Cache cache>;

        $r17 = virtualinvoke $r16.<net.sf.ehcache.Cache: net.sf.ehcache.Statistics getStatistics()>();

        $r18 = virtualinvoke $r17.<net.sf.ehcache.Statistics: java.lang.String toString()>();

        $r19 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r14.<org.slf4j.Logger: void info(java.lang.String)>($r20);

        return;
    }

    public void add(java.io.Serializable, java.io.Serializable)
    {
        java.util.concurrent.atomic.AtomicLong $r6;
        thredds.filesystem.CacheManager r0;
        net.sf.ehcache.Cache $r1, $r5;
        net.sf.ehcache.Element $r2;
        java.io.Serializable r3, r4;

        r0 := @this: thredds.filesystem.CacheManager;

        r3 := @parameter0: java.io.Serializable;

        r4 := @parameter1: java.io.Serializable;

        $r1 = r0.<thredds.filesystem.CacheManager: net.sf.ehcache.Cache cache>;

        if $r1 != null goto label1;

        return;

     label1:
        $r5 = r0.<thredds.filesystem.CacheManager: net.sf.ehcache.Cache cache>;

        $r2 = new net.sf.ehcache.Element;

        specialinvoke $r2.<net.sf.ehcache.Element: void <init>(java.io.Serializable,java.io.Serializable)>(r3, r4);

        virtualinvoke $r5.<net.sf.ehcache.Cache: void put(net.sf.ehcache.Element)>($r2);

        $r6 = r0.<thredds.filesystem.CacheManager: java.util.concurrent.atomic.AtomicLong addElements>;

        virtualinvoke $r6.<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>();

        return;
    }

    public static java.lang.String show(java.lang.String)
    {
        java.lang.Object[] $r5;
        net.sf.ehcache.CacheManager $r0, $r2;
        java.util.Formatter $r4;
        java.lang.StringBuilder $r9, $r10, $r11;
        java.lang.String r1, $r7, $r8, $r12;
        net.sf.ehcache.Statistics $r6;
        net.sf.ehcache.Cache $r3;

        r1 := @parameter0: java.lang.String;

        $r0 = <thredds.filesystem.CacheManager: net.sf.ehcache.CacheManager cacheManager>;

        if $r0 != null goto label1;

        return "no cacheManager set";

     label1:
        $r2 = <thredds.filesystem.CacheManager: net.sf.ehcache.CacheManager cacheManager>;

        $r3 = virtualinvoke $r2.<net.sf.ehcache.CacheManager: net.sf.ehcache.Cache getCache(java.lang.String)>(r1);

        if $r3 != null goto label2;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("no cache named ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r12;

     label2:
        $r4 = new java.util.Formatter;

        specialinvoke $r4.<java.util.Formatter: void <init>()>();

        $r5 = newarray (java.lang.Object)[2];

        $r5[0] = $r3;

        $r6 = virtualinvoke $r3.<net.sf.ehcache.Cache: net.sf.ehcache.Statistics getStatistics()>();

        $r7 = virtualinvoke $r6.<net.sf.ehcache.Statistics: java.lang.String toString()>();

        $r5[1] = $r7;

        virtualinvoke $r4.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("Cache %s%n %s%n", $r5);

        $r8 = virtualinvoke $r4.<java.util.Formatter: java.lang.String toString()>();

        return $r8;
    }

    public thredds.filesystem.CacheDirectory get(java.lang.String, boolean)
    {
        thredds.filesystem.CacheDirectory $r34, $r43;
        byte $b2;
        thredds.filesystem.CacheManager r0;
        boolean $z0, $z1, z2, $z3, z4, $z5, $z7, $z8, $z9;
        net.sf.ehcache.Element $r4, $r38, $r40;
        java.io.Serializable $r13;
        java.lang.StringBuilder $r9, $r10, $r22, $r23, $r24, $r25, $r31, $r32, $r36, $r39, $r42;
        net.sf.ehcache.Cache $r3, $r17, $r28;
        long $l0, $l1, $l3, $l4, $l5;
        int $i6;
        java.lang.String r2, $r11, $r15, $r26, $r33;
        org.slf4j.Logger $r5, $r8, $r12, $r19, $r21, $r30;
        java.io.File $r37, $r41;
        java.util.concurrent.atomic.AtomicLong $r1, $r18;

        r0 := @this: thredds.filesystem.CacheManager;

        r2 := @parameter0: java.lang.String;

        z2 := @parameter1: boolean;

        $r1 = r0.<thredds.filesystem.CacheManager: java.util.concurrent.atomic.AtomicLong requests>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>();

        $r3 = r0.<thredds.filesystem.CacheManager: net.sf.ehcache.Cache cache>;

        $r4 = virtualinvoke $r3.<net.sf.ehcache.Cache: net.sf.ehcache.Element get(java.io.Serializable)>(r2);

        if $r4 == null goto label08;

        $r12 = <thredds.filesystem.CacheManager: org.slf4j.Logger cacheLog>;

        $z1 = interfaceinvoke $r12.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z1 == 0 goto label01;

        $r30 = <thredds.filesystem.CacheManager: org.slf4j.Logger cacheLog>;

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("thredds.filesystem.CacheManager found in cache; path =");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r30.<org.slf4j.Logger: void debug(java.lang.String)>($r33);

     label01:
        $r13 = virtualinvoke $r4.<net.sf.ehcache.Element: java.io.Serializable getValue()>();

        $r34 = (thredds.filesystem.CacheDirectory) $r13;

        if $r34 == null goto label08;

        if z2 != 0 goto label02;

        return $r34;

     label02:
        $r37 = new java.io.File;

        $r15 = virtualinvoke $r34.<thredds.filesystem.CacheDirectory: java.lang.String getPath()>();

        specialinvoke $r37.<java.io.File: void <init>(java.lang.String)>($r15);

        $z3 = virtualinvoke $r37.<java.io.File: boolean exists()>();

        if $z3 != 0 goto label03;

        $r28 = r0.<thredds.filesystem.CacheManager: net.sf.ehcache.Cache cache>;

        $r38 = new net.sf.ehcache.Element;

        specialinvoke $r38.<net.sf.ehcache.Element: void <init>(java.io.Serializable,java.io.Serializable)>(r2, null);

        virtualinvoke $r28.<net.sf.ehcache.Cache: void put(net.sf.ehcache.Element)>($r38);

        return null;

     label03:
        $l0 = virtualinvoke $r37.<java.io.File: long lastModified()>();

        $l1 = $r34.<thredds.filesystem.CacheDirectory: long lastModified>;

        $b2 = $l0 cmp $l1;

        $i6 = (int) $b2;

        if $i6 <= 0 goto label04;

        $z9 = 1;

        $z8 = 1;

        goto label05;

     label04:
        $z9 = 0;

        $z8 = 0;

     label05:
        z4 = $z9;

        if $z8 == 0 goto label06;

        $r19 = <thredds.filesystem.CacheManager: org.slf4j.Logger cacheLog>;

        $z5 = interfaceinvoke $r19.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z5 == 0 goto label06;

        $r21 = <thredds.filesystem.CacheManager: org.slf4j.Logger cacheLog>;

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("thredds.filesystem.CacheManager modified diff = ");

        $l3 = virtualinvoke $r37.<java.io.File: long lastModified()>();

        $l4 = $r34.<thredds.filesystem.CacheDirectory: long lastModified>;

        $l5 = $l3 - $l4;

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l5);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; path=");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r21.<org.slf4j.Logger: void debug(java.lang.String)>($r26);

     label06:
        if z4 != 0 goto label07;

        $r18 = r0.<thredds.filesystem.CacheManager: java.util.concurrent.atomic.AtomicLong hits>;

        virtualinvoke $r18.<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>();

        return $r34;

     label07:
        $r17 = r0.<thredds.filesystem.CacheManager: net.sf.ehcache.Cache cache>;

        $r40 = new net.sf.ehcache.Element;

        specialinvoke $r40.<net.sf.ehcache.Element: void <init>(java.io.Serializable,java.io.Serializable)>(r2, null);

        virtualinvoke $r17.<net.sf.ehcache.Cache: void put(net.sf.ehcache.Element)>($r40);

     label08:
        $r41 = new java.io.File;

        specialinvoke $r41.<java.io.File: void <init>(java.lang.String)>(r2);

        $z7 = virtualinvoke $r41.<java.io.File: boolean exists()>();

        if $z7 != 0 goto label09;

        return null;

     label09:
        $r5 = <thredds.filesystem.CacheManager: org.slf4j.Logger cacheLog>;

        $z0 = interfaceinvoke $r5.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label10;

        $r8 = <thredds.filesystem.CacheManager: org.slf4j.Logger cacheLog>;

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("thredds.filesystem.CacheManager read from filesystem; path=");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r8.<org.slf4j.Logger: void debug(java.lang.String)>($r11);

     label10:
        $r43 = new thredds.filesystem.CacheDirectory;

        specialinvoke $r43.<thredds.filesystem.CacheDirectory: void <init>(java.io.File)>($r41);

        virtualinvoke r0.<thredds.filesystem.CacheManager: void add(java.io.Serializable,java.io.Serializable)>(r2, $r43);

        return $r43;
    }

    public void close()
    {
        org.slf4j.Logger $r1;
        net.sf.ehcache.CacheManager $r0, $r2;
        thredds.filesystem.CacheManager r3;

        r3 := @this: thredds.filesystem.CacheManager;

        $r0 = <thredds.filesystem.CacheManager: net.sf.ehcache.CacheManager cacheManager>;

        if $r0 == null goto label1;

        $r1 = <thredds.filesystem.CacheManager: org.slf4j.Logger cacheLog>;

        interfaceinvoke $r1.<org.slf4j.Logger: void info(java.lang.String)>("thredds.filesystem.CacheManager shutdown");

        $r2 = <thredds.filesystem.CacheManager: net.sf.ehcache.CacheManager cacheManager>;

        virtualinvoke $r2.<net.sf.ehcache.CacheManager: void shutdown()>();

     label1:
        <thredds.filesystem.CacheManager: net.sf.ehcache.CacheManager cacheManager> = null;

        return;
    }

    public void showKeys()
    {
        java.io.PrintStream $r8;
        java.lang.Object[] $r7;
        java.util.Iterator $r3;
        net.sf.ehcache.Element $r6;
        java.util.List $r2;
        thredds.filesystem.CacheManager r0;
        java.lang.Object $r4;
        net.sf.ehcache.Cache $r1, $r5;
        boolean $z0;

        r0 := @this: thredds.filesystem.CacheManager;

        $r1 = r0.<thredds.filesystem.CacheManager: net.sf.ehcache.Cache cache>;

        $r2 = virtualinvoke $r1.<net.sf.ehcache.Cache: java.util.List getKeys()>();

        staticinvoke <java.util.Collections: void sort(java.util.List)>($r2);

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = r0.<thredds.filesystem.CacheManager: net.sf.ehcache.Cache cache>;

        $r6 = virtualinvoke $r5.<net.sf.ehcache.Cache: net.sf.ehcache.Element get(java.lang.Object)>($r4);

        $r8 = <java.lang.System: java.io.PrintStream out>;

        $r7 = newarray (java.lang.Object)[2];

        $r7[0] = $r4;

        $r7[1] = $r6;

        virtualinvoke $r8.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>(" %40s == %s%n", $r7);

        goto label1;

     label2:
        return;
    }

    public void stats()
    {
        java.lang.Integer $r21;
        java.lang.Long $r4, $r8, $r12, $r25;
        thredds.filesystem.CacheManager r1;
        net.sf.ehcache.Statistics $r27;
        net.sf.ehcache.Cache $r13, $r15, $r19, $r23, $r26;
        java.lang.Object[] $r0, $r5, $r9, $r14, $r18, $r22, $r28;
        long $l0, $l1, $l2, $l4;
        int $i3;
        java.lang.String $r17, $r30;
        java.io.PrintStream $r3, $r7, $r11, $r16, $r20, $r24, $r29;
        java.util.concurrent.atomic.AtomicLong $r2, $r6, $r10;

        r1 := @this: thredds.filesystem.CacheManager;

        $r3 = <java.lang.System: java.io.PrintStream out>;

        $r0 = newarray (java.lang.Object)[1];

        $r2 = r1.<thredds.filesystem.CacheManager: java.util.concurrent.atomic.AtomicLong addElements>;

        $l0 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r0[0] = $r4;

        virtualinvoke $r3.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>(" elems added= %s%n", $r0);

        $r7 = <java.lang.System: java.io.PrintStream out>;

        $r5 = newarray (java.lang.Object)[1];

        $r6 = r1.<thredds.filesystem.CacheManager: java.util.concurrent.atomic.AtomicLong requests>;

        $l1 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $r5[0] = $r8;

        virtualinvoke $r7.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>(" reqs= %d%n", $r5);

        $r11 = <java.lang.System: java.io.PrintStream out>;

        $r9 = newarray (java.lang.Object)[1];

        $r10 = r1.<thredds.filesystem.CacheManager: java.util.concurrent.atomic.AtomicLong hits>;

        $l2 = virtualinvoke $r10.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $r12 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        $r9[0] = $r12;

        virtualinvoke $r11.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>(" hits= %d%n", $r9);

        $r13 = r1.<thredds.filesystem.CacheManager: net.sf.ehcache.Cache cache>;

        if $r13 == null goto label1;

        $r16 = <java.lang.System: java.io.PrintStream out>;

        $r14 = newarray (java.lang.Object)[1];

        $r15 = r1.<thredds.filesystem.CacheManager: net.sf.ehcache.Cache cache>;

        $r17 = virtualinvoke $r15.<net.sf.ehcache.Cache: java.lang.String toString()>();

        $r14[0] = $r17;

        virtualinvoke $r16.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>(" cache= %s%n", $r14);

        $r20 = <java.lang.System: java.io.PrintStream out>;

        $r18 = newarray (java.lang.Object)[1];

        $r19 = r1.<thredds.filesystem.CacheManager: net.sf.ehcache.Cache cache>;

        $i3 = virtualinvoke $r19.<net.sf.ehcache.Cache: int getSize()>();

        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r18[0] = $r21;

        virtualinvoke $r20.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>(" cache.size= %d%n", $r18);

        $r24 = <java.lang.System: java.io.PrintStream out>;

        $r22 = newarray (java.lang.Object)[1];

        $r23 = r1.<thredds.filesystem.CacheManager: net.sf.ehcache.Cache cache>;

        $l4 = virtualinvoke $r23.<net.sf.ehcache.Cache: long getMemoryStoreSize()>();

        $r25 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l4);

        $r22[0] = $r25;

        virtualinvoke $r24.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>(" cache.memorySize= %d%n", $r22);

        $r26 = r1.<thredds.filesystem.CacheManager: net.sf.ehcache.Cache cache>;

        $r27 = virtualinvoke $r26.<net.sf.ehcache.Cache: net.sf.ehcache.Statistics getStatistics()>();

        $r29 = <java.lang.System: java.io.PrintStream out>;

        $r28 = newarray (java.lang.Object)[1];

        $r30 = virtualinvoke $r27.<net.sf.ehcache.Statistics: java.lang.String toString()>();

        $r28[0] = $r30;

        virtualinvoke $r29.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>(" stats= %s%n", $r28);

     label1:
        return;
    }

    public void populateFiles(java.lang.String)
    {
        java.lang.Object[] $r5;
        long $l0, $l1, $l2, $l3, l4, $l5, $l6, $l7;
        java.lang.Long $r7, $r8;
        thredds.filesystem.CacheManager r0;
        java.lang.String r3;
        java.io.PrintStream $r6;
        java.io.File $r2;
        java.util.concurrent.atomic.AtomicLong $r1, $r4;

        r0 := @this: thredds.filesystem.CacheManager;

        r3 := @parameter0: java.lang.String;

        $r1 = r0.<thredds.filesystem.CacheManager: java.util.concurrent.atomic.AtomicLong addElements>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $l1 = staticinvoke <java.lang.System: long nanoTime()>();

        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>(r3);

        specialinvoke r0.<thredds.filesystem.CacheManager: void addRecursiveFiles(java.io.File)>($r2);

        $l2 = staticinvoke <java.lang.System: long nanoTime()>();

        $r4 = r0.<thredds.filesystem.CacheManager: java.util.concurrent.atomic.AtomicLong addElements>;

        $l3 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicLong: long get()>();

        l4 = $l3 - $l0;

        $r6 = <java.lang.System: java.io.PrintStream out>;

        $r5 = newarray (java.lang.Object)[3];

        $r5[0] = r3;

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l4);

        $r5[1] = $r7;

        $l5 = $l2 - $l1;

        $l6 = $l5 / 1000L;

        $l7 = $l6 / 1000L;

        $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l7);

        $r5[2] = $r8;

        virtualinvoke $r6.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>("populate %n%-20s total %d took %d msecs %n", $r5);

        return;
    }

    private void addRecursiveFiles(java.io.File)
    {
        java.io.File r0, r2;
        int i0, i1;
        thredds.filesystem.CacheFile $r5;
        thredds.filesystem.CacheManager r3;
        java.lang.String $r4;
        java.io.File[] $r1;
        boolean $z0;

        r3 := @this: thredds.filesystem.CacheManager;

        r0 := @parameter0: java.io.File;

        $r1 = virtualinvoke r0.<java.io.File: java.io.File[] listFiles()>();

        i0 = lengthof $r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        r2 = $r1[i1];

        $z0 = virtualinvoke r2.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label2;

        specialinvoke r3.<thredds.filesystem.CacheManager: void addRecursiveFiles(java.io.File)>(r2);

        goto label3;

     label2:
        $r4 = virtualinvoke r2.<java.io.File: java.lang.String getPath()>();

        $r5 = new thredds.filesystem.CacheFile;

        specialinvoke $r5.<thredds.filesystem.CacheFile: void <init>(java.io.File)>(r2);

        virtualinvoke r3.<thredds.filesystem.CacheManager: void add(java.io.Serializable,java.io.Serializable)>($r4, $r5);

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return;
    }

    public void populateFilesProto(java.lang.String)
    {
        java.lang.Object[] $r5;
        long $l0, $l1, $l2, $l3, l4, $l5, $l6, $l7;
        java.lang.Long $r7, $r8;
        thredds.filesystem.CacheManager r0;
        java.lang.String r3;
        java.io.PrintStream $r6;
        java.io.File $r2;
        java.util.concurrent.atomic.AtomicLong $r1, $r4;

        r0 := @this: thredds.filesystem.CacheManager;

        r3 := @parameter0: java.lang.String;

        $r1 = r0.<thredds.filesystem.CacheManager: java.util.concurrent.atomic.AtomicLong addElements>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $l1 = staticinvoke <java.lang.System: long nanoTime()>();

        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>(r3);

        specialinvoke r0.<thredds.filesystem.CacheManager: void addRecursiveFilesProto(java.io.File)>($r2);

        $l2 = staticinvoke <java.lang.System: long nanoTime()>();

        $r4 = r0.<thredds.filesystem.CacheManager: java.util.concurrent.atomic.AtomicLong addElements>;

        $l3 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicLong: long get()>();

        l4 = $l3 - $l0;

        $r6 = <java.lang.System: java.io.PrintStream out>;

        $r5 = newarray (java.lang.Object)[3];

        $r5[0] = r3;

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l4);

        $r5[1] = $r7;

        $l5 = $l2 - $l1;

        $l6 = $l5 / 1000L;

        $l7 = $l6 / 1000L;

        $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l7);

        $r5[2] = $r8;

        virtualinvoke $r6.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>("populate %n%-20s total %d took %d msecs %n", $r5);

        return;
    }

    private void addRecursiveFilesProto(java.io.File)
    {
        java.io.File r0, r2;
        thredds.filesystem.CacheFileProto $r5;
        int i0, i1;
        thredds.filesystem.CacheManager r3;
        java.lang.String $r4;
        java.io.File[] $r1;
        boolean $z0;

        r3 := @this: thredds.filesystem.CacheManager;

        r0 := @parameter0: java.io.File;

        $r1 = virtualinvoke r0.<java.io.File: java.io.File[] listFiles()>();

        i0 = lengthof $r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        r2 = $r1[i1];

        $z0 = virtualinvoke r2.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label2;

        specialinvoke r3.<thredds.filesystem.CacheManager: void addRecursiveFilesProto(java.io.File)>(r2);

        goto label3;

     label2:
        $r4 = virtualinvoke r2.<java.io.File: java.lang.String getPath()>();

        $r5 = new thredds.filesystem.CacheFileProto;

        specialinvoke $r5.<thredds.filesystem.CacheFileProto: void <init>(java.io.File)>(r2);

        virtualinvoke r3.<thredds.filesystem.CacheManager: void add(java.io.Serializable,java.io.Serializable)>($r4, $r5);

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return;
    }

    public void populateDirs(java.lang.String)
    {
        java.lang.Object[] $r5;
        long $l0, $l1, $l2, $l3, l4, $l5, $l6, $l7;
        java.lang.Long $r7, $r8;
        thredds.filesystem.CacheManager r0;
        java.lang.String r3;
        java.io.PrintStream $r6;
        java.io.File $r2;
        java.util.concurrent.atomic.AtomicLong $r1, $r4;

        r0 := @this: thredds.filesystem.CacheManager;

        r3 := @parameter0: java.lang.String;

        $r1 = r0.<thredds.filesystem.CacheManager: java.util.concurrent.atomic.AtomicLong addElements>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $l1 = staticinvoke <java.lang.System: long nanoTime()>();

        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>(r3);

        specialinvoke r0.<thredds.filesystem.CacheManager: void addRecursiveDirs(java.io.File)>($r2);

        $l2 = staticinvoke <java.lang.System: long nanoTime()>();

        $r4 = r0.<thredds.filesystem.CacheManager: java.util.concurrent.atomic.AtomicLong addElements>;

        $l3 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicLong: long get()>();

        l4 = $l3 - $l0;

        $r6 = <java.lang.System: java.io.PrintStream out>;

        $r5 = newarray (java.lang.Object)[3];

        $r5[0] = r3;

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l4);

        $r5[1] = $r7;

        $l5 = $l2 - $l1;

        $l6 = $l5 / 1000L;

        $l7 = $l6 / 1000L;

        $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l7);

        $r5[2] = $r8;

        virtualinvoke $r6.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>("populate %n%-20s total %d took %d msecs %n", $r5);

        return;
    }

    private void addRecursiveDirs(java.io.File)
    {
        thredds.filesystem.CacheDirectory $r3;
        java.io.File r1, r5;
        int i0, i1;
        thredds.filesystem.CacheManager r0;
        java.lang.String $r2;
        java.io.File[] $r4;
        boolean $z0;

        r0 := @this: thredds.filesystem.CacheManager;

        r1 := @parameter0: java.io.File;

        $r2 = virtualinvoke r1.<java.io.File: java.lang.String getPath()>();

        $r3 = new thredds.filesystem.CacheDirectory;

        specialinvoke $r3.<thredds.filesystem.CacheDirectory: void <init>(java.io.File)>(r1);

        virtualinvoke r0.<thredds.filesystem.CacheManager: void add(java.io.Serializable,java.io.Serializable)>($r2, $r3);

        $r4 = virtualinvoke r1.<java.io.File: java.io.File[] listFiles()>();

        i0 = lengthof $r4;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r5 = $r4[i1];

        $z0 = virtualinvoke r5.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label2;

        specialinvoke r0.<thredds.filesystem.CacheManager: void addRecursiveDirs(java.io.File)>(r5);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    public void populateDirsProto(java.lang.String)
    {
        java.lang.Object[] $r5;
        long $l0, $l1, $l2, $l3, l4, $l5, $l6, $l7;
        java.lang.Long $r7, $r8;
        thredds.filesystem.CacheManager r0;
        java.lang.String r3;
        java.io.PrintStream $r6;
        java.io.File $r2;
        java.util.concurrent.atomic.AtomicLong $r1, $r4;

        r0 := @this: thredds.filesystem.CacheManager;

        r3 := @parameter0: java.lang.String;

        $r1 = r0.<thredds.filesystem.CacheManager: java.util.concurrent.atomic.AtomicLong addElements>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $l1 = staticinvoke <java.lang.System: long nanoTime()>();

        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>(r3);

        specialinvoke r0.<thredds.filesystem.CacheManager: void addRecursiveDirsProto(java.io.File)>($r2);

        $l2 = staticinvoke <java.lang.System: long nanoTime()>();

        $r4 = r0.<thredds.filesystem.CacheManager: java.util.concurrent.atomic.AtomicLong addElements>;

        $l3 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicLong: long get()>();

        l4 = $l3 - $l0;

        $r6 = <java.lang.System: java.io.PrintStream out>;

        $r5 = newarray (java.lang.Object)[3];

        $r5[0] = r3;

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l4);

        $r5[1] = $r7;

        $l5 = $l2 - $l1;

        $l6 = $l5 / 1000L;

        $l7 = $l6 / 1000L;

        $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l7);

        $r5[2] = $r8;

        virtualinvoke $r6.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>("populate %n%-20s total %d took %d msecs %n", $r5);

        return;
    }

    private void addRecursiveDirsProto(java.io.File)
    {
        java.io.File r1, r5;
        thredds.filesystem.CacheDirectoryProto $r3;
        int i0, i1;
        thredds.filesystem.CacheManager r0;
        java.lang.String $r2;
        java.io.File[] $r4;
        boolean $z0;

        r0 := @this: thredds.filesystem.CacheManager;

        r1 := @parameter0: java.io.File;

        $r2 = virtualinvoke r1.<java.io.File: java.lang.String getPath()>();

        $r3 = new thredds.filesystem.CacheDirectoryProto;

        specialinvoke $r3.<thredds.filesystem.CacheDirectoryProto: void <init>(java.io.File)>(r1);

        virtualinvoke r0.<thredds.filesystem.CacheManager: void add(java.io.Serializable,java.io.Serializable)>($r2, $r3);

        $r4 = virtualinvoke r1.<java.io.File: java.io.File[] listFiles()>();

        i0 = lengthof $r4;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r5 = $r4[i1];

        $z0 = virtualinvoke r5.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label2;

        specialinvoke r0.<thredds.filesystem.CacheManager: void addRecursiveDirsProto(java.io.File)>(r5);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    public static void main(java.lang.String[]) throws java.io.IOException
    {
        java.lang.Object[] $r0, $r5, $r8;
        java.lang.String[] r10;
        java.lang.Integer $r6, $r7, $r9;
        java.util.Formatter $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        thredds.filesystem.CacheManager $r2;
        java.io.PrintStream $r1, $r4;

        r10 := @parameter0: java.lang.String[];

        staticinvoke <thredds.filesystem.CacheManager: void makeTestCacheManager(java.lang.String)>("C:/data/ehcache/");

        $r1 = <java.lang.System: java.io.PrintStream out>;

        $r0 = newarray (java.lang.Object)[0];

        virtualinvoke $r1.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>("=====================%n", $r0);

        $r2 = new thredds.filesystem.CacheManager;

        specialinvoke $r2.<thredds.filesystem.CacheManager: void <init>(java.lang.String)>("dirsProto");

        virtualinvoke $r2.<thredds.filesystem.CacheManager: void populateDirsProto(java.lang.String)>("C:/data/");

        virtualinvoke $r2.<thredds.filesystem.CacheManager: void stats()>();

        staticinvoke <thredds.filesystem.CacheManager: void shutdown()>();

        $r3 = new java.util.Formatter;

        $r4 = <java.lang.System: java.io.PrintStream out>;

        specialinvoke $r3.<java.util.Formatter: void <init>(java.io.PrintStream)>($r4);

        $r5 = newarray (java.lang.Object)[2];

        $i0 = <thredds.filesystem.CacheFileProto: int countWrite>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r5[0] = $r6;

        $i1 = <thredds.filesystem.CacheFileProto: int countWriteSize>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r5[1] = $r7;

        virtualinvoke $r3.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>(" Proto count = %d size = %d %n", $r5);

        $i2 = <thredds.filesystem.CacheFileProto: int countWrite>;

        if $i2 != 0 goto label1;

        $i5 = 0;

        goto label2;

     label1:
        $i4 = <thredds.filesystem.CacheFileProto: int countWriteSize>;

        $i3 = <thredds.filesystem.CacheFileProto: int countWrite>;

        $i5 = $i4 / $i3;

     label2:
        $r8 = newarray (java.lang.Object)[1];

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r8[0] = $r9;

        virtualinvoke $r3.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("       avg = %d %n", $r8);

        virtualinvoke $r3.<java.util.Formatter: void flush()>();

        return;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lthredds/filesystem/CacheManager;");

        <thredds.filesystem.CacheManager: org.slf4j.Logger cacheLog> = $r0;

        <thredds.filesystem.CacheManager: boolean debugConfig> = 0;

        <thredds.filesystem.CacheManager: java.lang.String configReadOnly> = "<ehcache>\n    <diskStore path=\'${cacheDir}\' />\n    <defaultCache\n              maxElementsInMemory=\'10000\'\n              eternal=\'false\'\n              timeToIdleSeconds=\'120\'\n              timeToLiveSeconds=\'120\'\n              overflowToDisk=\'true\'\n              maxElementsOnDisk=\'10000000\'\n              diskPersistent=\'false\'\n              diskExpiryThreadIntervalSeconds=\'120\'\n              memoryStoreEvictionPolicy=\'LRU\'\n              />\n    <cache name=\'${cacheName}\'\n            maxElementsInMemory=\'10000\'\n            eternal=\'false\'\n            timeToIdleSeconds=\'864000\'\n            timeToLiveSeconds=\'0\'\n            overflowToDisk=\'true\'\n            maxElementsOnDisk=\'100000\'\n            diskPersistent=\'true\'\n            diskExpiryThreadIntervalSeconds=\'3600\'\n            memoryStoreEvictionPolicy=\'LRU\'\n            />\n</ehcache>";

        <thredds.filesystem.CacheManager: java.lang.String config> = "<ehcache>\n    <diskStore path=\'${cacheDir}\' />\n    <defaultCache\n              maxElementsInMemory=\'10000\'\n              eternal=\'false\'\n              timeToIdleSeconds=\'120\'\n              timeToLiveSeconds=\'120\'\n              overflowToDisk=\'true\'\n              maxElementsOnDisk=\'10000000\'\n              diskPersistent=\'false\'\n              diskExpiryThreadIntervalSeconds=\'120\'\n              memoryStoreEvictionPolicy=\'LRU\'\n              />\n    <cache name=\'directories\'\n            maxElementsInMemory=\'1000\'\n            eternal=\'true\'\n            timeToIdleSeconds=\'864000\'\n            timeToLiveSeconds=\'0\'\n            overflowToDisk=\'true\'\n            maxElementsOnDisk=\'0\'\n            diskPersistent=\'true\'\n            diskExpiryThreadIntervalSeconds=\'3600\'\n            memoryStoreEvictionPolicy=\'LRU\'\n            />\n    <cache name=\'files\'\n            maxElementsInMemory=\'1000\'\n            eternal=\'true\'\n            timeToIdleSeconds=\'864000\'\n            timeToLiveSeconds=\'0\'\n            overflowToDisk=\'true\'\n            maxElementsOnDisk=\'0\'\n            diskPersistent=\'true\'\n            diskExpiryThreadIntervalSeconds=\'3600\'\n            memoryStoreEvictionPolicy=\'LRU\'\n            />\n    <cache name=\'filesProto\'\n            maxElementsInMemory=\'1000\'\n            eternal=\'true\'\n            timeToIdleSeconds=\'864000\'\n            timeToLiveSeconds=\'0\'\n            overflowToDisk=\'true\'\n            maxElementsOnDisk=\'0\'\n            diskPersistent=\'true\'\n            diskExpiryThreadIntervalSeconds=\'3600\'\n            memoryStoreEvictionPolicy=\'LRU\'\n            />\n    <cache name=\'dirsProto\'\n            maxElementsInMemory=\'1000\'\n            eternal=\'true\'\n            timeToIdleSeconds=\'864000\'\n            timeToLiveSeconds=\'0\'\n            overflowToDisk=\'true\'\n            maxElementsOnDisk=\'0\'\n            diskPersistent=\'true\'\n            diskExpiryThreadIntervalSeconds=\'3600\'\n            memoryStoreEvictionPolicy=\'LRU\'\n            />\n</ehcache>";

        return;
    }
}
