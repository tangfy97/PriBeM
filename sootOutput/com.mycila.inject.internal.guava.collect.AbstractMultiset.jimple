abstract class com.mycila.inject.internal.guava.collect.AbstractMultiset extends java.util.AbstractCollection implements com.mycila.inject.internal.guava.collect.Multiset
{
    private transient java.util.Set elementSet;
    private transient java.util.Set entrySet;

    void <init>()
    {
        com.mycila.inject.internal.guava.collect.AbstractMultiset r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.AbstractMultiset;

        specialinvoke r0.<java.util.AbstractCollection: void <init>()>();

        return;
    }

    public int size()
    {
        int $i0;
        com.mycila.inject.internal.guava.collect.AbstractMultiset r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.AbstractMultiset;

        $i0 = staticinvoke <com.mycila.inject.internal.guava.collect.Multisets: int sizeImpl(com.mycila.inject.internal.guava.collect.Multiset)>(r0);

        return $i0;
    }

    public boolean isEmpty()
    {
        java.util.Set $r1;
        com.mycila.inject.internal.guava.collect.AbstractMultiset r0;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.AbstractMultiset;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.AbstractMultiset: java.util.Set entrySet()>();

        $z0 = interfaceinvoke $r1.<java.util.Set: boolean isEmpty()>();

        return $z0;
    }

    public boolean contains(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.AbstractMultiset r0;
        int $i0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.AbstractMultiset;

        r1 := @parameter0: java.lang.Object;

        $i0 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.AbstractMultiset: int count(java.lang.Object)>(r1);

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.util.Iterator iterator()
    {
        com.mycila.inject.internal.guava.collect.AbstractMultiset r0;
        java.util.Iterator $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.AbstractMultiset;

        $r1 = staticinvoke <com.mycila.inject.internal.guava.collect.Multisets: java.util.Iterator iteratorImpl(com.mycila.inject.internal.guava.collect.Multiset)>(r0);

        return $r1;
    }

    public int count(java.lang.Object)
    {
        java.util.Iterator $r2;
        com.mycila.inject.internal.guava.collect.Multiset$Entry r4;
        java.util.Set $r1;
        com.mycila.inject.internal.guava.collect.AbstractMultiset r0;
        int $i0;
        java.lang.Object $r3, $r5, r6;
        boolean $z0, $z1;

        r0 := @this: com.mycila.inject.internal.guava.collect.AbstractMultiset;

        r6 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.AbstractMultiset: java.util.Set entrySet()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.mycila.inject.internal.guava.collect.Multiset$Entry) $r3;

        $r5 = interfaceinvoke r4.<com.mycila.inject.internal.guava.collect.Multiset$Entry: java.lang.Object getElement()>();

        $z1 = staticinvoke <com.mycila.inject.internal.guava.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>($r5, r6);

        if $z1 == 0 goto label2;

        $i0 = interfaceinvoke r4.<com.mycila.inject.internal.guava.collect.Multiset$Entry: int getCount()>();

        return $i0;

     label2:
        goto label1;

     label3:
        return 0;
    }

    public boolean add(java.lang.Object)
    {
        java.lang.Object r1;
        com.mycila.inject.internal.guava.collect.AbstractMultiset r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.AbstractMultiset;

        r1 := @parameter0: java.lang.Object;

        virtualinvoke r0.<com.mycila.inject.internal.guava.collect.AbstractMultiset: int add(java.lang.Object,int)>(r1, 1);

        return 1;
    }

    public int add(java.lang.Object, int)
    {
        java.lang.UnsupportedOperationException $r0;
        com.mycila.inject.internal.guava.collect.AbstractMultiset r1;
        int i0;
        java.lang.Object r2;

        r1 := @this: com.mycila.inject.internal.guava.collect.AbstractMultiset;

        r2 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public boolean remove(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.AbstractMultiset r0;
        int $i0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.AbstractMultiset;

        r1 := @parameter0: java.lang.Object;

        $i0 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.AbstractMultiset: int remove(java.lang.Object,int)>(r1, 1);

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int remove(java.lang.Object, int)
    {
        java.lang.UnsupportedOperationException $r0;
        com.mycila.inject.internal.guava.collect.AbstractMultiset r1;
        int i0;
        java.lang.Object r2;

        r1 := @this: com.mycila.inject.internal.guava.collect.AbstractMultiset;

        r2 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public int setCount(java.lang.Object, int)
    {
        com.mycila.inject.internal.guava.collect.AbstractMultiset r0;
        int i0, $i1;
        java.lang.Object r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.AbstractMultiset;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        $i1 = staticinvoke <com.mycila.inject.internal.guava.collect.Multisets: int setCountImpl(com.mycila.inject.internal.guava.collect.Multiset,java.lang.Object,int)>(r0, r1, i0);

        return $i1;
    }

    public boolean setCount(java.lang.Object, int, int)
    {
        com.mycila.inject.internal.guava.collect.AbstractMultiset r0;
        int i0, i1;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.AbstractMultiset;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = staticinvoke <com.mycila.inject.internal.guava.collect.Multisets: boolean setCountImpl(com.mycila.inject.internal.guava.collect.Multiset,java.lang.Object,int,int)>(r0, r1, i0, i1);

        return $z0;
    }

    public boolean addAll(java.util.Collection)
    {
        com.mycila.inject.internal.guava.collect.AbstractMultiset r0;
        java.util.Collection r1;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.AbstractMultiset;

        r1 := @parameter0: java.util.Collection;

        $z0 = staticinvoke <com.mycila.inject.internal.guava.collect.Multisets: boolean addAllImpl(com.mycila.inject.internal.guava.collect.Multiset,java.util.Collection)>(r0, r1);

        return $z0;
    }

    public boolean removeAll(java.util.Collection)
    {
        com.mycila.inject.internal.guava.collect.AbstractMultiset r0;
        java.util.Collection r1;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.AbstractMultiset;

        r1 := @parameter0: java.util.Collection;

        $z0 = staticinvoke <com.mycila.inject.internal.guava.collect.Multisets: boolean removeAllImpl(com.mycila.inject.internal.guava.collect.Multiset,java.util.Collection)>(r0, r1);

        return $z0;
    }

    public boolean retainAll(java.util.Collection)
    {
        com.mycila.inject.internal.guava.collect.AbstractMultiset r0;
        java.util.Collection r1;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.AbstractMultiset;

        r1 := @parameter0: java.util.Collection;

        $z0 = staticinvoke <com.mycila.inject.internal.guava.collect.Multisets: boolean retainAllImpl(com.mycila.inject.internal.guava.collect.Multiset,java.util.Collection)>(r0, r1);

        return $z0;
    }

    public void clear()
    {
        com.mycila.inject.internal.guava.collect.AbstractMultiset r0;
        java.util.Iterator $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.AbstractMultiset;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.AbstractMultiset: java.util.Iterator entryIterator()>();

        staticinvoke <com.mycila.inject.internal.guava.collect.Iterators: void clear(java.util.Iterator)>($r1);

        return;
    }

    public java.util.Set elementSet()
    {
        java.util.Set $r1, r2;
        com.mycila.inject.internal.guava.collect.AbstractMultiset r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.AbstractMultiset;

        r2 = r0.<com.mycila.inject.internal.guava.collect.AbstractMultiset: java.util.Set elementSet>;

        if r2 != null goto label1;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.AbstractMultiset: java.util.Set createElementSet()>();

        r2 = $r1;

        r0.<com.mycila.inject.internal.guava.collect.AbstractMultiset: java.util.Set elementSet> = $r1;

     label1:
        return r2;
    }

    java.util.Set createElementSet()
    {
        com.mycila.inject.internal.guava.collect.AbstractMultiset r1;
        com.mycila.inject.internal.guava.collect.AbstractMultiset$ElementSet $r0;

        r1 := @this: com.mycila.inject.internal.guava.collect.AbstractMultiset;

        $r0 = new com.mycila.inject.internal.guava.collect.AbstractMultiset$ElementSet;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.AbstractMultiset$ElementSet: void <init>(com.mycila.inject.internal.guava.collect.AbstractMultiset)>(r1);

        return $r0;
    }

    abstract java.util.Iterator entryIterator();

    abstract int distinctElements();

    public java.util.Set entrySet()
    {
        java.util.Set r1, $r2;
        com.mycila.inject.internal.guava.collect.AbstractMultiset r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.AbstractMultiset;

        r1 = r0.<com.mycila.inject.internal.guava.collect.AbstractMultiset: java.util.Set entrySet>;

        if r1 != null goto label1;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.AbstractMultiset: java.util.Set createEntrySet()>();

        r0.<com.mycila.inject.internal.guava.collect.AbstractMultiset: java.util.Set entrySet> = $r2;

        goto label2;

     label1:
        $r2 = r1;

     label2:
        return $r2;
    }

    java.util.Set createEntrySet()
    {
        com.mycila.inject.internal.guava.collect.AbstractMultiset r1;
        com.mycila.inject.internal.guava.collect.AbstractMultiset$EntrySet $r0;

        r1 := @this: com.mycila.inject.internal.guava.collect.AbstractMultiset;

        $r0 = new com.mycila.inject.internal.guava.collect.AbstractMultiset$EntrySet;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.AbstractMultiset$EntrySet: void <init>(com.mycila.inject.internal.guava.collect.AbstractMultiset)>(r1);

        return $r0;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object r1;
        com.mycila.inject.internal.guava.collect.AbstractMultiset r0;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.AbstractMultiset;

        r1 := @parameter0: java.lang.Object;

        $z0 = staticinvoke <com.mycila.inject.internal.guava.collect.Multisets: boolean equalsImpl(com.mycila.inject.internal.guava.collect.Multiset,java.lang.Object)>(r0, r1);

        return $z0;
    }

    public int hashCode()
    {
        int $i0;
        java.util.Set $r1;
        com.mycila.inject.internal.guava.collect.AbstractMultiset r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.AbstractMultiset;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.AbstractMultiset: java.util.Set entrySet()>();

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    public java.lang.String toString()
    {
        java.util.Set $r1;
        java.lang.String $r2;
        com.mycila.inject.internal.guava.collect.AbstractMultiset r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.AbstractMultiset;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.AbstractMultiset: java.util.Set entrySet()>();

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }
}
