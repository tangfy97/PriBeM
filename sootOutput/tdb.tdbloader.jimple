public class tdb.tdbloader extends tdb.cmdline.CmdTDBGraph
{
    private static final tdb.cmdline.ModModel modRDFS;
    private boolean showProgress;
    private boolean doIncremental;

    public static transient void main(java.lang.String[])
    {
        tdb.tdbloader $r0;
        java.lang.String[] r1;

        r1 := @parameter0: java.lang.String[];

        staticinvoke <tdb.cmdline.CmdTDB: void init()>();

        staticinvoke <com.hp.hpl.jena.tdb.TDB: void setOptimizerWarningFlag(boolean)>(0);

        $r0 = new tdb.tdbloader;

        specialinvoke $r0.<tdb.tdbloader: void <init>(java.lang.String[])>(r1);

        virtualinvoke $r0.<tdb.tdbloader: void mainRun()>();

        return;
    }

    protected void <init>(java.lang.String[])
    {
        tdb.tdbloader r0;
        java.lang.String[] r1;

        r0 := @this: tdb.tdbloader;

        r1 := @parameter0: java.lang.String[];

        specialinvoke r0.<tdb.cmdline.CmdTDBGraph: void <init>(java.lang.String[])>(r1);

        r0.<tdb.tdbloader: boolean showProgress> = 1;

        r0.<tdb.tdbloader: boolean doIncremental> = 0;

        return;
    }

    protected void processModulesAndArgs()
    {
        tdb.tdbloader r0;

        r0 := @this: tdb.tdbloader;

        specialinvoke r0.<tdb.cmdline.CmdTDBGraph: void processModulesAndArgs()>();

        return;
    }

    protected java.lang.String getSummary()
    {
        tdb.tdbloader r1;
        java.lang.StringBuilder $r0, $r3, $r4;
        java.lang.String $r2, $r5;

        r1 := @this: tdb.tdbloader;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r1.<tdb.tdbloader: java.lang.String getCommandName()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [--desc DATASET | -loc DIR] FILE ...");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    protected void exec()
    {
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, z7, z8, z9;
        java.lang.Runtime $r25;
        tdb.cmdline.ModModel $r2;
        com.hp.hpl.jena.sparql.util.Context $r29;
        java.util.List $r1;
        tdb.tdbloader r0;
        java.lang.StringBuilder $r10, $r11, $r12, $r14, $r15, $r16, $r22, $r24, $r26;
        long $l1;
        int $i0;
        java.lang.String $r5, $r13, $r17, $r18, $r27, r30, r31;
        java.io.PrintStream $r23, $r28;
        org.apache.jena.riot.Lang $r8, $r9, $r20, $r21;
        java.util.Iterator $r4, $r6;
        com.hp.hpl.jena.rdf.model.Model $r3;
        java.lang.Object $r7, $r19;

        r0 := @this: tdb.tdbloader;

        $z0 = virtualinvoke r0.<tdb.tdbloader: boolean isVerbose()>();

        if $z0 == 0 goto label01;

        $r23 = <java.lang.System: java.io.PrintStream out>;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Java maximum memory: ");

        $r25 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $l1 = virtualinvoke $r25.<java.lang.Runtime: long maxMemory()>();

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r23.<java.io.PrintStream: void println(java.lang.String)>($r27);

        $r28 = <java.lang.System: java.io.PrintStream out>;

        $r29 = staticinvoke <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Context getContext()>();

        virtualinvoke $r28.<java.io.PrintStream: void println(java.lang.Object)>($r29);

     label01:
        $z1 = virtualinvoke r0.<tdb.tdbloader: boolean isVerbose()>();

        if $z1 == 0 goto label02;

        r0.<tdb.tdbloader: boolean showProgress> = 1;

     label02:
        $z2 = virtualinvoke r0.<tdb.tdbloader: boolean isQuiet()>();

        if $z2 == 0 goto label03;

        r0.<tdb.tdbloader: boolean showProgress> = 0;

     label03:
        $r1 = virtualinvoke r0.<tdb.tdbloader: java.util.List getPositional()>();

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 != 0 goto label04;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>("-");

     label04:
        $r2 = <tdb.tdbloader: tdb.cmdline.ModModel modRDFS>;

        $r3 = virtualinvoke $r2.<tdb.cmdline.ModModel: com.hp.hpl.jena.rdf.model.Model getModel()>();

        if $r3 == null goto label05;

     label05:
        z7 = 1;

        z9 = 1;

        z8 = 1;

        $r4 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label06:
        $z3 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label08;

        $r19 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r30 = (java.lang.String) $r19;

        $r20 = <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang NQUADS>;

        $r21 = staticinvoke <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang filenameToLang(java.lang.String,org.apache.jena.riot.Lang)>(r30, $r20);

        if $r21 == null goto label07;

        $z6 = staticinvoke <org.apache.jena.riot.RDFLanguages: boolean isQuads(org.apache.jena.riot.Lang)>($r21);

        if $z6 == 0 goto label07;

        z7 = 0;

        z9 = 0;

        z8 = 0;

        goto label08;

     label07:
        goto label06;

     label08:
        if z9 == 0 goto label09;

        $r18 = r0.<tdb.tdbloader: java.lang.String graphName>;

        if $r18 != null goto label09;

        virtualinvoke r0.<tdb.tdbloader: void loadDefaultGraph(java.util.List)>($r1);

        return;

     label09:
        $r5 = r0.<tdb.tdbloader: java.lang.String graphName>;

        if $r5 != null goto label10;

        virtualinvoke r0.<tdb.tdbloader: void loadQuads(java.util.List)>($r1);

        return;

     label10:
        if z8 != 0 goto label15;

        $r6 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label11:
        $z4 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label14;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r31 = (java.lang.String) $r7;

        $r8 = <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang NQUADS>;

        $r9 = staticinvoke <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang filenameToLang(java.lang.String,org.apache.jena.riot.Lang)>(r31, $r8);

        if $r9 != null goto label12;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File suffix not recognized: ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r31);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<tdb.tdbloader: void cmdError(java.lang.String)>($r17);

     label12:
        if $r9 == null goto label13;

        $z5 = staticinvoke <org.apache.jena.riot.RDFLanguages: boolean isTriples(org.apache.jena.riot.Lang)>($r9);

        if $z5 != 0 goto label13;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can only load triples into a named model: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r31);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<tdb.tdbloader: void cmdError(java.lang.String)>($r13);

     label13:
        goto label11;

     label14:
        virtualinvoke r0.<tdb.tdbloader: void cmdError(java.lang.String)>("Internal error: deteched quad input but can\'t find it again");

        return;

     label15:
        virtualinvoke r0.<tdb.tdbloader: void loadNamedGraph(java.util.List)>($r1);

        return;
    }

    void loadDefaultGraph(java.util.List)
    {
        java.util.List r2;
        tdb.tdbloader r0;
        com.hp.hpl.jena.tdb.store.GraphTDB $r1;
        boolean $z0;

        r0 := @this: tdb.tdbloader;

        r2 := @parameter0: java.util.List;

        $r1 = virtualinvoke r0.<tdb.tdbloader: com.hp.hpl.jena.tdb.store.GraphTDB getGraph()>();

        $z0 = r0.<tdb.tdbloader: boolean showProgress>;

        staticinvoke <com.hp.hpl.jena.tdb.TDBLoader: void load(com.hp.hpl.jena.tdb.store.GraphTDB,java.util.List,boolean)>($r1, r2, $z0);

        return;
    }

    void loadNamedGraph(java.util.List)
    {
        java.util.List r2;
        tdb.tdbloader r0;
        com.hp.hpl.jena.tdb.store.GraphTDB $r1;
        boolean $z0;

        r0 := @this: tdb.tdbloader;

        r2 := @parameter0: java.util.List;

        $r1 = virtualinvoke r0.<tdb.tdbloader: com.hp.hpl.jena.tdb.store.GraphTDB getGraph()>();

        $z0 = r0.<tdb.tdbloader: boolean showProgress>;

        staticinvoke <com.hp.hpl.jena.tdb.TDBLoader: void load(com.hp.hpl.jena.tdb.store.GraphTDB,java.util.List,boolean)>($r1, r2, $z0);

        return;
    }

    void loadQuads(java.util.List)
    {
        java.util.List r2;
        tdb.tdbloader r0;
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB $r1;
        boolean $z0;

        r0 := @this: tdb.tdbloader;

        r2 := @parameter0: java.util.List;

        $r1 = virtualinvoke r0.<tdb.tdbloader: com.hp.hpl.jena.tdb.store.DatasetGraphTDB getDatasetGraphTDB()>();

        $z0 = r0.<tdb.tdbloader: boolean showProgress>;

        staticinvoke <com.hp.hpl.jena.tdb.TDBLoader: void load(com.hp.hpl.jena.tdb.store.DatasetGraphTDB,java.util.List,boolean)>($r1, r2, $z0);

        return;
    }

    static void <clinit>()
    {
        tdb.cmdline.ModModel $r0;
        java.lang.String[] $r1;

        $r0 = new tdb.cmdline.ModModel;

        $r1 = newarray (java.lang.String)[0];

        specialinvoke $r0.<tdb.cmdline.ModModel: void <init>(java.lang.String,java.lang.String[])>("rdfs", $r1);

        <tdb.tdbloader: tdb.cmdline.ModModel modRDFS> = $r0;

        return;
    }
}
