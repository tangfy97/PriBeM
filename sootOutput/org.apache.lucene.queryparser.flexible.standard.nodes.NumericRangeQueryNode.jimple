public class org.apache.lucene.queryparser.flexible.standard.nodes.NumericRangeQueryNode extends org.apache.lucene.queryparser.flexible.standard.nodes.AbstractRangeQueryNode
{
    public org.apache.lucene.queryparser.flexible.standard.config.NumericConfig numericConfig;

    public void <init>(org.apache.lucene.queryparser.flexible.standard.nodes.NumericQueryNode, org.apache.lucene.queryparser.flexible.standard.nodes.NumericQueryNode, boolean, boolean, org.apache.lucene.queryparser.flexible.standard.config.NumericConfig) throws org.apache.lucene.queryparser.flexible.core.QueryNodeException
    {
        org.apache.lucene.queryparser.flexible.standard.nodes.NumericRangeQueryNode r0;
        org.apache.lucene.queryparser.flexible.standard.nodes.NumericQueryNode r1, r2;
        org.apache.lucene.queryparser.flexible.standard.config.NumericConfig r3;
        boolean z0, z1;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.nodes.NumericRangeQueryNode;

        r1 := @parameter0: org.apache.lucene.queryparser.flexible.standard.nodes.NumericQueryNode;

        r2 := @parameter1: org.apache.lucene.queryparser.flexible.standard.nodes.NumericQueryNode;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        r3 := @parameter4: org.apache.lucene.queryparser.flexible.standard.config.NumericConfig;

        specialinvoke r0.<org.apache.lucene.queryparser.flexible.standard.nodes.AbstractRangeQueryNode: void <init>()>();

        virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.nodes.NumericRangeQueryNode: void setBounds(org.apache.lucene.queryparser.flexible.standard.nodes.NumericQueryNode,org.apache.lucene.queryparser.flexible.standard.nodes.NumericQueryNode,boolean,boolean,org.apache.lucene.queryparser.flexible.standard.config.NumericConfig)>(r1, r2, z0, z1, r3);

        return;
    }

    private static org.apache.lucene.document.FieldType$NumericType getNumericDataType(java.lang.Number) throws org.apache.lucene.queryparser.flexible.core.QueryNodeException
    {
        org.apache.lucene.document.FieldType$NumericType $r6, $r7, $r8, $r9;
        java.lang.Object[] $r3;
        org.apache.lucene.queryparser.flexible.core.QueryNodeException $r1;
        org.apache.lucene.queryparser.flexible.messages.MessageImpl $r2;
        java.lang.Class $r5;
        java.lang.String $r4;
        java.lang.Number r0;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: java.lang.Number;

        $z0 = r0 instanceof java.lang.Long;

        if $z0 == 0 goto label1;

        $r9 = <org.apache.lucene.document.FieldType$NumericType: org.apache.lucene.document.FieldType$NumericType LONG>;

        return $r9;

     label1:
        $z1 = r0 instanceof java.lang.Integer;

        if $z1 == 0 goto label2;

        $r8 = <org.apache.lucene.document.FieldType$NumericType: org.apache.lucene.document.FieldType$NumericType INT>;

        return $r8;

     label2:
        $z2 = r0 instanceof java.lang.Double;

        if $z2 == 0 goto label3;

        $r7 = <org.apache.lucene.document.FieldType$NumericType: org.apache.lucene.document.FieldType$NumericType DOUBLE>;

        return $r7;

     label3:
        $z3 = r0 instanceof java.lang.Float;

        if $z3 == 0 goto label4;

        $r6 = <org.apache.lucene.document.FieldType$NumericType: org.apache.lucene.document.FieldType$NumericType FLOAT>;

        return $r6;

     label4:
        $r1 = new org.apache.lucene.queryparser.flexible.core.QueryNodeException;

        $r2 = new org.apache.lucene.queryparser.flexible.messages.MessageImpl;

        $r4 = <org.apache.lucene.queryparser.flexible.core.messages.QueryParserMessages: java.lang.String NUMBER_CLASS_NOT_SUPPORTED_BY_NUMERIC_RANGE_QUERY>;

        $r3 = newarray (java.lang.Object)[1];

        $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3[0] = $r5;

        specialinvoke $r2.<org.apache.lucene.queryparser.flexible.messages.MessageImpl: void <init>(java.lang.String,java.lang.Object[])>($r4, $r3);

        specialinvoke $r1.<org.apache.lucene.queryparser.flexible.core.QueryNodeException: void <init>(org.apache.lucene.queryparser.flexible.messages.Message)>($r2);

        throw $r1;
    }

    public void setBounds(org.apache.lucene.queryparser.flexible.standard.nodes.NumericQueryNode, org.apache.lucene.queryparser.flexible.standard.nodes.NumericQueryNode, boolean, boolean, org.apache.lucene.queryparser.flexible.standard.config.NumericConfig) throws org.apache.lucene.queryparser.flexible.core.QueryNodeException
    {
        org.apache.lucene.queryparser.flexible.standard.nodes.NumericRangeQueryNode r3;
        boolean z0, z1, $z2, $z3;
        org.apache.lucene.document.FieldType$NumericType $r4, $r10, $r13, $r19, r27, r28;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r11, $r15, $r16, $r17, $r18, $r20;
        org.apache.lucene.queryparser.flexible.standard.nodes.NumericQueryNode r1, r2;
        java.lang.String $r12, $r21;
        java.lang.Number $r22, $r23, $r24, $r25;
        java.lang.IllegalArgumentException $r5, $r14, $r26;
        org.apache.lucene.queryparser.flexible.standard.config.NumericConfig r0;

        r3 := @this: org.apache.lucene.queryparser.flexible.standard.nodes.NumericRangeQueryNode;

        r1 := @parameter0: org.apache.lucene.queryparser.flexible.standard.nodes.NumericQueryNode;

        r2 := @parameter1: org.apache.lucene.queryparser.flexible.standard.nodes.NumericQueryNode;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        r0 := @parameter4: org.apache.lucene.queryparser.flexible.standard.config.NumericConfig;

        if r0 != null goto label1;

        $r26 = new java.lang.IllegalArgumentException;

        specialinvoke $r26.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("numericConfig cannot be null!");

        throw $r26;

     label1:
        if r1 == null goto label2;

        $r24 = virtualinvoke r1.<org.apache.lucene.queryparser.flexible.standard.nodes.NumericQueryNode: java.lang.Number getValue()>();

        if $r24 == null goto label2;

        $r25 = virtualinvoke r1.<org.apache.lucene.queryparser.flexible.standard.nodes.NumericQueryNode: java.lang.Number getValue()>();

        r27 = staticinvoke <org.apache.lucene.queryparser.flexible.standard.nodes.NumericRangeQueryNode: org.apache.lucene.document.FieldType$NumericType getNumericDataType(java.lang.Number)>($r25);

        goto label3;

     label2:
        r27 = null;

     label3:
        if r2 == null goto label4;

        $r22 = virtualinvoke r2.<org.apache.lucene.queryparser.flexible.standard.nodes.NumericQueryNode: java.lang.Number getValue()>();

        if $r22 == null goto label4;

        $r23 = virtualinvoke r2.<org.apache.lucene.queryparser.flexible.standard.nodes.NumericQueryNode: java.lang.Number getValue()>();

        r28 = staticinvoke <org.apache.lucene.queryparser.flexible.standard.nodes.NumericRangeQueryNode: org.apache.lucene.document.FieldType$NumericType getNumericDataType(java.lang.Number)>($r23);

        goto label5;

     label4:
        r28 = null;

     label5:
        if r27 == null goto label6;

        $r13 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.config.NumericConfig: org.apache.lucene.document.FieldType$NumericType getType()>();

        $z3 = virtualinvoke r27.<org.apache.lucene.document.FieldType$NumericType: boolean equals(java.lang.Object)>($r13);

        if $z3 != 0 goto label6;

        $r14 = new java.lang.IllegalArgumentException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("lower value\'s type should be the same as numericConfig type: ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r27);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" != ");

        $r19 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.config.NumericConfig: org.apache.lucene.document.FieldType$NumericType getType()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r21);

        throw $r14;

     label6:
        if r28 == null goto label7;

        $r4 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.config.NumericConfig: org.apache.lucene.document.FieldType$NumericType getType()>();

        $z2 = virtualinvoke r28.<org.apache.lucene.document.FieldType$NumericType: boolean equals(java.lang.Object)>($r4);

        if $z2 != 0 goto label7;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("upper value\'s type should be the same as numericConfig type: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r28);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" != ");

        $r10 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.config.NumericConfig: org.apache.lucene.document.FieldType$NumericType getType()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r5;

     label7:
        specialinvoke r3.<org.apache.lucene.queryparser.flexible.standard.nodes.AbstractRangeQueryNode: void setBounds(org.apache.lucene.queryparser.flexible.core.nodes.FieldValuePairQueryNode,org.apache.lucene.queryparser.flexible.core.nodes.FieldValuePairQueryNode,boolean,boolean)>(r1, r2, z0, z1);

        r3.<org.apache.lucene.queryparser.flexible.standard.nodes.NumericRangeQueryNode: org.apache.lucene.queryparser.flexible.standard.config.NumericConfig numericConfig> = r0;

        return;
    }

    public org.apache.lucene.queryparser.flexible.standard.config.NumericConfig getNumericConfig()
    {
        org.apache.lucene.queryparser.flexible.standard.nodes.NumericRangeQueryNode r0;
        org.apache.lucene.queryparser.flexible.standard.config.NumericConfig $r1;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.nodes.NumericRangeQueryNode;

        $r1 = r0.<org.apache.lucene.queryparser.flexible.standard.nodes.NumericRangeQueryNode: org.apache.lucene.queryparser.flexible.standard.config.NumericConfig numericConfig>;

        return $r1;
    }

    public java.lang.String toString()
    {
        org.apache.lucene.queryparser.flexible.standard.nodes.NumericRangeQueryNode r1;
        int $i0;
        java.lang.String $r9, $r16, $r22;
        boolean $z0, $z1;
        org.apache.lucene.document.FieldType$NumericType $r14;
        org.apache.lucene.queryparser.flexible.core.nodes.FieldValuePairQueryNode $r18, $r20;
        org.apache.lucene.queryparser.flexible.standard.config.NumericConfig $r7, $r13;
        java.lang.StringBuilder $r0, $r2, $r3, $r4, $r5, $r6, $r8, $r10, $r11, $r12, $r15, $r17, $r19, $r21;

        r1 := @this: org.apache.lucene.queryparser.flexible.standard.nodes.NumericRangeQueryNode;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>("<numericRange lowerInclusive=\'");

        $z0 = virtualinvoke r1.<org.apache.lucene.queryparser.flexible.standard.nodes.NumericRangeQueryNode: boolean isLowerInclusive()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' upperInclusive=\'");

        $z1 = virtualinvoke r1.<org.apache.lucene.queryparser.flexible.standard.nodes.NumericRangeQueryNode: boolean isUpperInclusive()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' precisionStep=\'");

        $r7 = r1.<org.apache.lucene.queryparser.flexible.standard.nodes.NumericRangeQueryNode: org.apache.lucene.queryparser.flexible.standard.config.NumericConfig numericConfig>;

        $i0 = virtualinvoke $r7.<org.apache.lucene.queryparser.flexible.standard.config.NumericConfig: int getPrecisionStep()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' type=\'");

        $r13 = r1.<org.apache.lucene.queryparser.flexible.standard.nodes.NumericRangeQueryNode: org.apache.lucene.queryparser.flexible.standard.config.NumericConfig numericConfig>;

        $r14 = virtualinvoke $r13.<org.apache.lucene.queryparser.flexible.standard.config.NumericConfig: org.apache.lucene.document.FieldType$NumericType getType()>();

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $r17 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'>\n");

        $r18 = virtualinvoke r1.<org.apache.lucene.queryparser.flexible.standard.nodes.NumericRangeQueryNode: org.apache.lucene.queryparser.flexible.core.nodes.FieldValuePairQueryNode getLowerBound()>();

        $r19 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18);

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $r20 = virtualinvoke r1.<org.apache.lucene.queryparser.flexible.standard.nodes.NumericRangeQueryNode: org.apache.lucene.queryparser.flexible.core.nodes.FieldValuePairQueryNode getUpperBound()>();

        $r21 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r20);

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</numericRange>");

        $r22 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r22;
    }
}
