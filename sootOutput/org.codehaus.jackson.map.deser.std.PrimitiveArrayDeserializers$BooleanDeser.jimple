final class org.codehaus.jackson.map.deser.std.PrimitiveArrayDeserializers$BooleanDeser extends org.codehaus.jackson.map.deser.std.PrimitiveArrayDeserializers$Base
{

    public void <init>()
    {
        org.codehaus.jackson.map.deser.std.PrimitiveArrayDeserializers$BooleanDeser r0;

        r0 := @this: org.codehaus.jackson.map.deser.std.PrimitiveArrayDeserializers$BooleanDeser;

        specialinvoke r0.<org.codehaus.jackson.map.deser.std.PrimitiveArrayDeserializers$Base: void <init>(java.lang.Class)>(class "[Z");

        return;
    }

    public boolean[] deserialize(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.JsonToken $r5, $r6;
        org.codehaus.jackson.map.util.ArrayBuilders$BooleanBuilder $r3;
        org.codehaus.jackson.map.DeserializationContext r1;
        int $i0, $i1, i2;
        org.codehaus.jackson.JsonParser r0;
        boolean $z0, $z1;
        org.codehaus.jackson.map.deser.std.PrimitiveArrayDeserializers$BooleanDeser r9;
        org.codehaus.jackson.map.util.ArrayBuilders $r2;
        boolean[] $r8, $r11, r12;
        java.lang.Object $r4, $r7, $r10;

        r9 := @this: org.codehaus.jackson.map.deser.std.PrimitiveArrayDeserializers$BooleanDeser;

        r0 := @parameter0: org.codehaus.jackson.JsonParser;

        r1 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: boolean isExpectedStartArrayToken()>();

        if $z0 != 0 goto label1;

        $r11 = specialinvoke r9.<org.codehaus.jackson.map.deser.std.PrimitiveArrayDeserializers$BooleanDeser: boolean[] handleNonArray(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>(r0, r1);

        return $r11;

     label1:
        $r2 = virtualinvoke r1.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.util.ArrayBuilders getArrayBuilders()>();

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.map.util.ArrayBuilders: org.codehaus.jackson.map.util.ArrayBuilders$BooleanBuilder getBooleanBuilder()>();

        $r4 = virtualinvoke $r3.<org.codehaus.jackson.map.util.ArrayBuilders$BooleanBuilder: java.lang.Object resetAndStart()>();

        r12 = (boolean[]) $r4;

        i2 = 0;

     label2:
        $r5 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken nextToken()>();

        $r6 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken END_ARRAY>;

        if $r5 == $r6 goto label4;

        $z1 = virtualinvoke r9.<org.codehaus.jackson.map.deser.std.PrimitiveArrayDeserializers$BooleanDeser: boolean _parseBooleanPrimitive(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>(r0, r1);

        $i0 = lengthof r12;

        if i2 < $i0 goto label3;

        $r10 = virtualinvoke $r3.<org.codehaus.jackson.map.util.ArrayBuilders$BooleanBuilder: java.lang.Object appendCompletedChunk(java.lang.Object,int)>(r12, i2);

        r12 = (boolean[]) $r10;

        i2 = 0;

     label3:
        $i1 = i2;

        i2 = i2 + 1;

        r12[$i1] = $z1;

        goto label2;

     label4:
        $r7 = virtualinvoke $r3.<org.codehaus.jackson.map.util.ArrayBuilders$BooleanBuilder: java.lang.Object completeAndClearBuffer(java.lang.Object,int)>(r12, i2);

        $r8 = (boolean[]) $r7;

        return $r8;
    }

    private final boolean[] handleNonArray(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.map.deser.std.PrimitiveArrayDeserializers$BooleanDeser r5;
        org.codehaus.jackson.JsonToken $r1, $r2;
        org.codehaus.jackson.map.DeserializationConfig$Feature $r8, $r10;
        boolean[] $r4;
        org.codehaus.jackson.map.DeserializationContext r3;
        org.codehaus.jackson.map.JsonMappingException $r7;
        int $i0;
        java.lang.Class $r6;
        java.lang.String $r9;
        org.codehaus.jackson.JsonParser r0;
        boolean $z0, $z1, $z2;

        r5 := @this: org.codehaus.jackson.map.deser.std.PrimitiveArrayDeserializers$BooleanDeser;

        r0 := @parameter0: org.codehaus.jackson.JsonParser;

        r3 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken getCurrentToken()>();

        $r2 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_STRING>;

        if $r1 != $r2 goto label1;

        $r8 = <org.codehaus.jackson.map.DeserializationConfig$Feature: org.codehaus.jackson.map.DeserializationConfig$Feature ACCEPT_EMPTY_STRING_AS_NULL_OBJECT>;

        $z1 = virtualinvoke r3.<org.codehaus.jackson.map.DeserializationContext: boolean isEnabled(org.codehaus.jackson.map.DeserializationConfig$Feature)>($r8);

        if $z1 == 0 goto label1;

        $r9 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: java.lang.String getText()>();

        $i0 = virtualinvoke $r9.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        return null;

     label1:
        $r10 = <org.codehaus.jackson.map.DeserializationConfig$Feature: org.codehaus.jackson.map.DeserializationConfig$Feature ACCEPT_SINGLE_VALUE_AS_ARRAY>;

        $z2 = virtualinvoke r3.<org.codehaus.jackson.map.DeserializationContext: boolean isEnabled(org.codehaus.jackson.map.DeserializationConfig$Feature)>($r10);

        if $z2 != 0 goto label2;

        $r6 = r5.<org.codehaus.jackson.map.deser.std.PrimitiveArrayDeserializers$BooleanDeser: java.lang.Class _valueClass>;

        $r7 = virtualinvoke r3.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException mappingException(java.lang.Class)>($r6);

        throw $r7;

     label2:
        $r4 = newarray (boolean)[1];

        $z0 = virtualinvoke r5.<org.codehaus.jackson.map.deser.std.PrimitiveArrayDeserializers$BooleanDeser: boolean _parseBooleanPrimitive(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>(r0, r3);

        $r4[0] = $z0;

        return $r4;
    }

    public volatile java.lang.Object deserialize(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.map.deser.std.PrimitiveArrayDeserializers$BooleanDeser r0;
        boolean[] $r3;
        org.codehaus.jackson.JsonParser r1;
        org.codehaus.jackson.map.DeserializationContext r2;

        r0 := @this: org.codehaus.jackson.map.deser.std.PrimitiveArrayDeserializers$BooleanDeser;

        r1 := @parameter0: org.codehaus.jackson.JsonParser;

        r2 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.deser.std.PrimitiveArrayDeserializers$BooleanDeser: boolean[] deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>(r1, r2);

        return $r3;
    }
}
