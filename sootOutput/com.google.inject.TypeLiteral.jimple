public class com.google.inject.TypeLiteral extends java.lang.Object
{
    final java.lang.Class rawType;
    final java.lang.reflect.Type type;
    final int hashCode;

    protected void <init>()
    {
        java.lang.reflect.Type $r2, $r3, $r5;
        int $i0;
        java.lang.Class $r1, $r4;
        com.google.inject.TypeLiteral r0;

        r0 := @this: com.google.inject.TypeLiteral;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <com.google.inject.TypeLiteral: java.lang.reflect.Type getSuperclassTypeParameter(java.lang.Class)>($r1);

        r0.<com.google.inject.TypeLiteral: java.lang.reflect.Type type> = $r2;

        $r3 = r0.<com.google.inject.TypeLiteral: java.lang.reflect.Type type>;

        $r4 = staticinvoke <com.google.inject.internal.MoreTypes: java.lang.Class getRawType(java.lang.reflect.Type)>($r3);

        r0.<com.google.inject.TypeLiteral: java.lang.Class rawType> = $r4;

        $r5 = r0.<com.google.inject.TypeLiteral: java.lang.reflect.Type type>;

        $i0 = virtualinvoke $r5.<java.lang.Object: int hashCode()>();

        r0.<com.google.inject.TypeLiteral: int hashCode> = $i0;

        return;
    }

    void <init>(java.lang.reflect.Type)
    {
        java.lang.reflect.Type r1, $r3, $r4, $r5, $r7;
        int $i0;
        java.lang.Object $r2;
        java.lang.Class $r6;
        com.google.inject.TypeLiteral r0;

        r0 := @this: com.google.inject.TypeLiteral;

        r1 := @parameter0: java.lang.reflect.Type;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <com.google.inject.internal.util.$Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "type");

        $r3 = (java.lang.reflect.Type) $r2;

        $r4 = staticinvoke <com.google.inject.internal.MoreTypes: java.lang.reflect.Type canonicalize(java.lang.reflect.Type)>($r3);

        r0.<com.google.inject.TypeLiteral: java.lang.reflect.Type type> = $r4;

        $r5 = r0.<com.google.inject.TypeLiteral: java.lang.reflect.Type type>;

        $r6 = staticinvoke <com.google.inject.internal.MoreTypes: java.lang.Class getRawType(java.lang.reflect.Type)>($r5);

        r0.<com.google.inject.TypeLiteral: java.lang.Class rawType> = $r6;

        $r7 = r0.<com.google.inject.TypeLiteral: java.lang.reflect.Type type>;

        $i0 = virtualinvoke $r7.<java.lang.Object: int hashCode()>();

        r0.<com.google.inject.TypeLiteral: int hashCode> = $i0;

        return;
    }

    static java.lang.reflect.Type getSuperclassTypeParameter(java.lang.Class)
    {
        java.lang.RuntimeException $r6;
        java.lang.reflect.ParameterizedType r2;
        java.lang.reflect.Type $r1, $r4, $r5;
        java.lang.reflect.Type[] $r3;
        java.lang.Class r0;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>();

        $z0 = $r1 instanceof java.lang.Class;

        if $z0 == 0 goto label1;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>("Missing type parameter.");

        throw $r6;

     label1:
        r2 = (java.lang.reflect.ParameterizedType) $r1;

        $r3 = interfaceinvoke r2.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        $r4 = $r3[0];

        $r5 = staticinvoke <com.google.inject.internal.MoreTypes: java.lang.reflect.Type canonicalize(java.lang.reflect.Type)>($r4);

        return $r5;
    }

    static com.google.inject.TypeLiteral fromSuperclassTypeParameter(java.lang.Class)
    {
        java.lang.Class r1;
        com.google.inject.TypeLiteral $r0;
        java.lang.reflect.Type $r2;

        r1 := @parameter0: java.lang.Class;

        $r0 = new com.google.inject.TypeLiteral;

        $r2 = staticinvoke <com.google.inject.TypeLiteral: java.lang.reflect.Type getSuperclassTypeParameter(java.lang.Class)>(r1);

        specialinvoke $r0.<com.google.inject.TypeLiteral: void <init>(java.lang.reflect.Type)>($r2);

        return $r0;
    }

    public final java.lang.Class getRawType()
    {
        java.lang.Class $r1;
        com.google.inject.TypeLiteral r0;

        r0 := @this: com.google.inject.TypeLiteral;

        $r1 = r0.<com.google.inject.TypeLiteral: java.lang.Class rawType>;

        return $r1;
    }

    public final java.lang.reflect.Type getType()
    {
        com.google.inject.TypeLiteral r0;
        java.lang.reflect.Type $r1;

        r0 := @this: com.google.inject.TypeLiteral;

        $r1 = r0.<com.google.inject.TypeLiteral: java.lang.reflect.Type type>;

        return $r1;
    }

    final com.google.inject.TypeLiteral providerType()
    {
        java.lang.reflect.ParameterizedType $r2;
        java.lang.reflect.Type $r1;
        com.google.inject.TypeLiteral r0, $r3;

        r0 := @this: com.google.inject.TypeLiteral;

        $r1 = virtualinvoke r0.<com.google.inject.TypeLiteral: java.lang.reflect.Type getType()>();

        $r2 = staticinvoke <com.google.inject.util.Types: java.lang.reflect.ParameterizedType providerOf(java.lang.reflect.Type)>($r1);

        $r3 = staticinvoke <com.google.inject.TypeLiteral: com.google.inject.TypeLiteral get(java.lang.reflect.Type)>($r2);

        return $r3;
    }

    public final int hashCode()
    {
        int $i0;
        com.google.inject.TypeLiteral r0;

        r0 := @this: com.google.inject.TypeLiteral;

        $i0 = r0.<com.google.inject.TypeLiteral: int hashCode>;

        return $i0;
    }

    public final boolean equals(java.lang.Object)
    {
        java.lang.reflect.Type $r3, $r4;
        java.lang.Object r0;
        com.google.inject.TypeLiteral r1, $r2;
        boolean $z0, $z1, $z2;

        r1 := @this: com.google.inject.TypeLiteral;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof com.google.inject.TypeLiteral;

        if $z0 == 0 goto label1;

        $r4 = r1.<com.google.inject.TypeLiteral: java.lang.reflect.Type type>;

        $r2 = (com.google.inject.TypeLiteral) r0;

        $r3 = $r2.<com.google.inject.TypeLiteral: java.lang.reflect.Type type>;

        $z1 = staticinvoke <com.google.inject.internal.MoreTypes: boolean equals(java.lang.reflect.Type,java.lang.reflect.Type)>($r4, $r3);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public final java.lang.String toString()
    {
        java.lang.String $r2;
        com.google.inject.TypeLiteral r0;
        java.lang.reflect.Type $r1;

        r0 := @this: com.google.inject.TypeLiteral;

        $r1 = r0.<com.google.inject.TypeLiteral: java.lang.reflect.Type type>;

        $r2 = staticinvoke <com.google.inject.internal.MoreTypes: java.lang.String typeToString(java.lang.reflect.Type)>($r1);

        return $r2;
    }

    public static com.google.inject.TypeLiteral get(java.lang.reflect.Type)
    {
        com.google.inject.TypeLiteral $r0;
        java.lang.reflect.Type r1;

        r1 := @parameter0: java.lang.reflect.Type;

        $r0 = new com.google.inject.TypeLiteral;

        specialinvoke $r0.<com.google.inject.TypeLiteral: void <init>(java.lang.reflect.Type)>(r1);

        return $r0;
    }

    public static com.google.inject.TypeLiteral get(java.lang.Class)
    {
        java.lang.Class r1;
        com.google.inject.TypeLiteral $r0;

        r1 := @parameter0: java.lang.Class;

        $r0 = new com.google.inject.TypeLiteral;

        specialinvoke $r0.<com.google.inject.TypeLiteral: void <init>(java.lang.reflect.Type)>(r1);

        return $r0;
    }

    private java.util.List resolveAll(java.lang.reflect.Type[])
    {
        com.google.inject.internal.util.$ImmutableList $r2;
        com.google.inject.TypeLiteral[] r1;
        java.lang.reflect.Type $r4;
        java.lang.reflect.Type[] r0;
        int $i0, $i1, i2;
        com.google.inject.TypeLiteral r3, $r5;

        r3 := @this: com.google.inject.TypeLiteral;

        r0 := @parameter0: java.lang.reflect.Type[];

        $i0 = lengthof r0;

        r1 = newarray (com.google.inject.TypeLiteral)[$i0];

        i2 = 0;

     label1:
        $i1 = lengthof r0;

        if i2 >= $i1 goto label2;

        $r4 = r0[i2];

        $r5 = virtualinvoke r3.<com.google.inject.TypeLiteral: com.google.inject.TypeLiteral resolve(java.lang.reflect.Type)>($r4);

        r1[i2] = $r5;

        i2 = i2 + 1;

        goto label1;

     label2:
        $r2 = staticinvoke <com.google.inject.internal.util.$ImmutableList: com.google.inject.internal.util.$ImmutableList of(java.lang.Object[])>(r1);

        return $r2;
    }

    com.google.inject.TypeLiteral resolve(java.lang.reflect.Type)
    {
        java.lang.reflect.Type r1, $r2;
        com.google.inject.TypeLiteral r0, $r3;

        r0 := @this: com.google.inject.TypeLiteral;

        r1 := @parameter0: java.lang.reflect.Type;

        $r2 = virtualinvoke r0.<com.google.inject.TypeLiteral: java.lang.reflect.Type resolveType(java.lang.reflect.Type)>(r1);

        $r3 = staticinvoke <com.google.inject.TypeLiteral: com.google.inject.TypeLiteral get(java.lang.reflect.Type)>($r2);

        return $r3;
    }

    java.lang.reflect.Type resolveType(java.lang.reflect.Type)
    {
        java.lang.reflect.GenericArrayType r26, $r27;
        boolean $z0, $z1, $z2, $z3, $z4, z5;
        java.lang.reflect.Type $r3, $r4, $r5, $r7, $r8, $r9, $r11, $r12, $r14, $r15, $r16, $r17, $r19, $r20, $r22, $r23, r24;
        java.lang.reflect.Type[] $r0, $r1, $r13, r29;
        com.google.inject.TypeLiteral r2;
        java.lang.reflect.WildcardType $r6, $r10, r31;
        int $i0, $i1, $i2, i3;
        java.lang.reflect.TypeVariable r25;
        java.lang.reflect.ParameterizedType r28, $r30;
        java.lang.Object $r18;
        java.lang.Class $r21;

        r2 := @this: com.google.inject.TypeLiteral;

        r24 := @parameter0: java.lang.reflect.Type;

     label01:
        $z0 = r24 instanceof java.lang.reflect.TypeVariable;

        if $z0 == 0 goto label03;

        r25 = (java.lang.reflect.TypeVariable) r24;

        $r22 = r2.<com.google.inject.TypeLiteral: java.lang.reflect.Type type>;

        $r21 = r2.<com.google.inject.TypeLiteral: java.lang.Class rawType>;

        $r23 = staticinvoke <com.google.inject.internal.MoreTypes: java.lang.reflect.Type resolveTypeVariable(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.TypeVariable)>($r22, $r21, r25);

        r24 = $r23;

        if $r23 != r25 goto label02;

        return $r23;

     label02:
        goto label01;

     label03:
        $z1 = r24 instanceof java.lang.reflect.GenericArrayType;

        if $z1 == 0 goto label06;

        r26 = (java.lang.reflect.GenericArrayType) r24;

        $r19 = interfaceinvoke r26.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();

        $r20 = virtualinvoke r2.<com.google.inject.TypeLiteral: java.lang.reflect.Type resolveType(java.lang.reflect.Type)>($r19);

        if $r19 != $r20 goto label04;

        $r27 = r26;

        goto label05;

     label04:
        $r27 = staticinvoke <com.google.inject.util.Types: java.lang.reflect.GenericArrayType arrayOf(java.lang.reflect.Type)>($r20);

     label05:
        return $r27;

     label06:
        $z2 = r24 instanceof java.lang.reflect.ParameterizedType;

        if $z2 == 0 goto label15;

        r28 = (java.lang.reflect.ParameterizedType) r24;

        $r11 = interfaceinvoke r28.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getOwnerType()>();

        $r12 = virtualinvoke r2.<com.google.inject.TypeLiteral: java.lang.reflect.Type resolveType(java.lang.reflect.Type)>($r11);

        if $r12 == $r11 goto label07;

        $z4 = 1;

        goto label08;

     label07:
        $z4 = 0;

     label08:
        z5 = $z4;

        $r13 = interfaceinvoke r28.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        r29 = $r13;

        i3 = 0;

        $i2 = lengthof $r13;

     label09:
        if i3 >= $i2 goto label12;

        $r15 = r29[i3];

        $r16 = virtualinvoke r2.<com.google.inject.TypeLiteral: java.lang.reflect.Type resolveType(java.lang.reflect.Type)>($r15);

        $r17 = r29[i3];

        if $r16 == $r17 goto label11;

        if z5 != 0 goto label10;

        $r18 = virtualinvoke r29.<java.lang.Object: java.lang.Object clone()>();

        r29 = (java.lang.reflect.Type[]) $r18;

        z5 = 1;

     label10:
        r29[i3] = $r16;

     label11:
        i3 = i3 + 1;

        goto label09;

     label12:
        if z5 == 0 goto label13;

        $r14 = interfaceinvoke r28.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();

        $r30 = staticinvoke <com.google.inject.util.Types: java.lang.reflect.ParameterizedType newParameterizedTypeWithOwner(java.lang.reflect.Type,java.lang.reflect.Type,java.lang.reflect.Type[])>($r12, $r14, r29);

        goto label14;

     label13:
        $r30 = r28;

     label14:
        return $r30;

     label15:
        $z3 = r24 instanceof java.lang.reflect.WildcardType;

        if $z3 == 0 goto label19;

        r31 = (java.lang.reflect.WildcardType) r24;

        $r0 = interfaceinvoke r31.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>();

        $r1 = interfaceinvoke r31.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>();

        $i0 = lengthof $r0;

        if $i0 != 1 goto label17;

        $r7 = $r0[0];

        $r8 = virtualinvoke r2.<com.google.inject.TypeLiteral: java.lang.reflect.Type resolveType(java.lang.reflect.Type)>($r7);

        $r9 = $r0[0];

        if $r8 == $r9 goto label16;

        $r10 = staticinvoke <com.google.inject.util.Types: java.lang.reflect.WildcardType supertypeOf(java.lang.reflect.Type)>($r8);

        return $r10;

     label16:
        goto label18;

     label17:
        $i1 = lengthof $r1;

        if $i1 != 1 goto label18;

        $r3 = $r1[0];

        $r4 = virtualinvoke r2.<com.google.inject.TypeLiteral: java.lang.reflect.Type resolveType(java.lang.reflect.Type)>($r3);

        $r5 = $r1[0];

        if $r4 == $r5 goto label18;

        $r6 = staticinvoke <com.google.inject.util.Types: java.lang.reflect.WildcardType subtypeOf(java.lang.reflect.Type)>($r4);

        return $r6;

     label18:
        return r31;

     label19:
        return r24;
    }

    public com.google.inject.TypeLiteral getSupertype(java.lang.Class)
    {
        java.lang.Object[] $r3;
        java.lang.reflect.Type $r4, $r6, $r7;
        java.lang.Class r0, $r2, $r5;
        com.google.inject.TypeLiteral r1, $r8;
        boolean $z0;

        r1 := @this: com.google.inject.TypeLiteral;

        r0 := @parameter0: java.lang.Class;

        $r2 = r1.<com.google.inject.TypeLiteral: java.lang.Class rawType>;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r2);

        $r3 = newarray (java.lang.Object)[2];

        $r3[0] = r0;

        $r4 = r1.<com.google.inject.TypeLiteral: java.lang.reflect.Type type>;

        $r3[1] = $r4;

        staticinvoke <com.google.inject.internal.util.$Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z0, "%s is not a supertype of %s", $r3);

        $r6 = r1.<com.google.inject.TypeLiteral: java.lang.reflect.Type type>;

        $r5 = r1.<com.google.inject.TypeLiteral: java.lang.Class rawType>;

        $r7 = staticinvoke <com.google.inject.internal.MoreTypes: java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class)>($r6, $r5, r0);

        $r8 = virtualinvoke r1.<com.google.inject.TypeLiteral: com.google.inject.TypeLiteral resolve(java.lang.reflect.Type)>($r7);

        return $r8;
    }

    public com.google.inject.TypeLiteral getFieldType(java.lang.reflect.Field)
    {
        java.lang.Object[] $r4;
        java.lang.reflect.Field r0;
        java.lang.reflect.Type $r5, $r6;
        java.lang.Class $r1, $r3;
        com.google.inject.TypeLiteral r2, $r7;
        boolean $z0;

        r2 := @this: com.google.inject.TypeLiteral;

        r0 := @parameter0: java.lang.reflect.Field;

        $r1 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.Class getDeclaringClass()>();

        $r3 = r2.<com.google.inject.TypeLiteral: java.lang.Class rawType>;

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r3);

        $r4 = newarray (java.lang.Object)[2];

        $r4[0] = r0;

        $r5 = r2.<com.google.inject.TypeLiteral: java.lang.reflect.Type type>;

        $r4[1] = $r5;

        staticinvoke <com.google.inject.internal.util.$Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z0, "%s is not defined by a supertype of %s", $r4);

        $r6 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();

        $r7 = virtualinvoke r2.<com.google.inject.TypeLiteral: com.google.inject.TypeLiteral resolve(java.lang.reflect.Type)>($r6);

        return $r7;
    }

    public java.util.List getParameterTypes(java.lang.reflect.Member)
    {
        java.lang.Object[] $r9, $r14;
        java.lang.reflect.Constructor r18;
        java.lang.String $r5;
        java.lang.reflect.Method r16;
        boolean $z0, $z1, $z2, $z3;
        java.lang.reflect.Member r0;
        java.lang.IllegalArgumentException $r1;
        java.util.List $r11;
        java.lang.reflect.Type $r10, $r15;
        java.lang.reflect.Type[] r17;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.Class $r6, $r8, $r12, $r13;
        com.google.inject.TypeLiteral r7;

        r7 := @this: com.google.inject.TypeLiteral;

        r0 := @parameter0: java.lang.reflect.Member;

        $z0 = r0 instanceof java.lang.reflect.Method;

        if $z0 == 0 goto label1;

        r16 = (java.lang.reflect.Method) r0;

        $r12 = virtualinvoke r16.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $r13 = r7.<com.google.inject.TypeLiteral: java.lang.Class rawType>;

        $z3 = virtualinvoke $r12.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r13);

        $r14 = newarray (java.lang.Object)[2];

        $r14[0] = r16;

        $r15 = r7.<com.google.inject.TypeLiteral: java.lang.reflect.Type type>;

        $r14[1] = $r15;

        staticinvoke <com.google.inject.internal.util.$Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z3, "%s is not defined by a supertype of %s", $r14);

        r17 = virtualinvoke r16.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>();

        goto label3;

     label1:
        $z1 = r0 instanceof java.lang.reflect.Constructor;

        if $z1 == 0 goto label2;

        r18 = (java.lang.reflect.Constructor) r0;

        $r6 = virtualinvoke r18.<java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>();

        $r8 = r7.<com.google.inject.TypeLiteral: java.lang.Class rawType>;

        $z2 = virtualinvoke $r6.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r8);

        $r9 = newarray (java.lang.Object)[2];

        $r9[0] = r18;

        $r10 = r7.<com.google.inject.TypeLiteral: java.lang.reflect.Type type>;

        $r9[1] = $r10;

        staticinvoke <com.google.inject.internal.util.$Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z2, "%s does not construct a supertype of %s", $r9);

        r17 = virtualinvoke r18.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericParameterTypes()>();

        goto label3;

     label2:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a method or a constructor: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label3:
        $r11 = specialinvoke r7.<com.google.inject.TypeLiteral: java.util.List resolveAll(java.lang.reflect.Type[])>(r17);

        return $r11;
    }

    public java.util.List getExceptionTypes(java.lang.reflect.Member)
    {
        java.lang.Object[] $r9, $r14;
        java.lang.reflect.Constructor r18;
        java.lang.String $r5;
        java.lang.reflect.Method r16;
        boolean $z0, $z1, $z2, $z3;
        java.lang.reflect.Member r0;
        java.lang.IllegalArgumentException $r1;
        java.util.List $r11;
        java.lang.reflect.Type $r10, $r15;
        java.lang.reflect.Type[] r17;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.Class $r6, $r8, $r12, $r13;
        com.google.inject.TypeLiteral r7;

        r7 := @this: com.google.inject.TypeLiteral;

        r0 := @parameter0: java.lang.reflect.Member;

        $z0 = r0 instanceof java.lang.reflect.Method;

        if $z0 == 0 goto label1;

        r16 = (java.lang.reflect.Method) r0;

        $r12 = virtualinvoke r16.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $r13 = r7.<com.google.inject.TypeLiteral: java.lang.Class rawType>;

        $z3 = virtualinvoke $r12.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r13);

        $r14 = newarray (java.lang.Object)[2];

        $r14[0] = r16;

        $r15 = r7.<com.google.inject.TypeLiteral: java.lang.reflect.Type type>;

        $r14[1] = $r15;

        staticinvoke <com.google.inject.internal.util.$Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z3, "%s is not defined by a supertype of %s", $r14);

        r17 = virtualinvoke r16.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>();

        goto label3;

     label1:
        $z1 = r0 instanceof java.lang.reflect.Constructor;

        if $z1 == 0 goto label2;

        r18 = (java.lang.reflect.Constructor) r0;

        $r6 = virtualinvoke r18.<java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>();

        $r8 = r7.<com.google.inject.TypeLiteral: java.lang.Class rawType>;

        $z2 = virtualinvoke $r6.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r8);

        $r9 = newarray (java.lang.Object)[2];

        $r9[0] = r18;

        $r10 = r7.<com.google.inject.TypeLiteral: java.lang.reflect.Type type>;

        $r9[1] = $r10;

        staticinvoke <com.google.inject.internal.util.$Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z2, "%s does not construct a supertype of %s", $r9);

        r17 = virtualinvoke r18.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>();

        goto label3;

     label2:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a method or a constructor: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label3:
        $r11 = specialinvoke r7.<com.google.inject.TypeLiteral: java.util.List resolveAll(java.lang.reflect.Type[])>(r17);

        return $r11;
    }

    public com.google.inject.TypeLiteral getReturnType(java.lang.reflect.Method)
    {
        java.lang.Object[] $r4;
        java.lang.reflect.Type $r5, $r6;
        java.lang.Class $r1, $r3;
        java.lang.reflect.Method r0;
        com.google.inject.TypeLiteral r2, $r7;
        boolean $z0;

        r2 := @this: com.google.inject.TypeLiteral;

        r0 := @parameter0: java.lang.reflect.Method;

        $r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $r3 = r2.<com.google.inject.TypeLiteral: java.lang.Class rawType>;

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r3);

        $r4 = newarray (java.lang.Object)[2];

        $r4[0] = r0;

        $r5 = r2.<com.google.inject.TypeLiteral: java.lang.reflect.Type type>;

        $r4[1] = $r5;

        staticinvoke <com.google.inject.internal.util.$Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z0, "%s is not defined by a supertype of %s", $r4);

        $r6 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>();

        $r7 = virtualinvoke r2.<com.google.inject.TypeLiteral: com.google.inject.TypeLiteral resolve(java.lang.reflect.Type)>($r6);

        return $r7;
    }
}
