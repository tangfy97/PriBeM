class ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory extends java.lang.Object implements ucar.nc2.dt.TrajectoryObsDatatype
{
    private java.lang.String id;
    private java.lang.String description;
    private int numPoints;
    private java.util.Date startDate;
    private java.util.Date endDate;
    private java.lang.String dimVarUnitsString;
    private ucar.nc2.Variable dimVar;
    private ucar.nc2.Variable latVar;
    private ucar.nc2.Variable lonVar;
    private ucar.nc2.Variable elevVar;
    private java.util.List variables;
    private java.util.HashMap variablesMap;
    final ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl this$0;

    private void <init>(ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl, java.lang.String, int, ucar.nc2.Variable, java.lang.String, ucar.nc2.Variable, ucar.nc2.Variable, ucar.nc2.Variable, java.util.List, java.util.HashMap)
    {
        java.util.HashMap r6;
        ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl r1;
        ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory r0;
        java.util.List r5;
        int i0;
        ucar.nc2.Variable r4, r7, r8, r9;
        java.lang.String r2, r3;

        r0 := @this: ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory;

        r1 := @parameter0: ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r4 := @parameter3: ucar.nc2.Variable;

        r3 := @parameter4: java.lang.String;

        r7 := @parameter5: ucar.nc2.Variable;

        r8 := @parameter6: ucar.nc2.Variable;

        r9 := @parameter7: ucar.nc2.Variable;

        r5 := @parameter8: java.util.List;

        r6 := @parameter9: java.util.HashMap;

        r0.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory: ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory: java.lang.String description> = null;

        r0.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory: java.lang.String id> = r2;

        r0.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory: int numPoints> = i0;

        r0.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory: java.lang.String dimVarUnitsString> = r3;

        r0.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory: ucar.nc2.Variable dimVar> = r4;

        r0.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory: java.util.List variables> = r5;

        r0.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory: java.util.HashMap variablesMap> = r6;

        r0.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory: ucar.nc2.Variable latVar> = r7;

        r0.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory: ucar.nc2.Variable lonVar> = r8;

        r0.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory: ucar.nc2.Variable elevVar> = r9;

        return;
    }

    protected void setNumPoints(int)
    {
        int i0;
        ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory r0;

        r0 := @this: ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory;

        i0 := @parameter0: int;

        r0.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory: int numPoints> = i0;

        return;
    }

    protected void setStartDate(java.util.Date)
    {
        ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory r0;
        java.lang.IllegalStateException $r3;
        java.util.Date $r1, r2;

        r0 := @this: ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory;

        r2 := @parameter0: java.util.Date;

        $r1 = r0.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory: java.util.Date startDate>;

        if $r1 == null goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Can only call setStartDate() once.");

        throw $r3;

     label1:
        r0.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory: java.util.Date startDate> = r2;

        return;
    }

    protected void setEndDate(java.util.Date)
    {
        ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory r0;
        java.util.Date r1;

        r0 := @this: ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory;

        r1 := @parameter0: java.util.Date;

        r0.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory: java.util.Date endDate> = r1;

        return;
    }

    public java.lang.String getId()
    {
        ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory r0;
        java.lang.String $r1;

        r0 := @this: ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory;

        $r1 = r0.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory: java.lang.String id>;

        return $r1;
    }

    public java.lang.String getDescription()
    {
        ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory r0;
        java.lang.String $r1;

        r0 := @this: ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory;

        $r1 = r0.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory: java.lang.String description>;

        return $r1;
    }

    public int getNumberPoints()
    {
        int $i0;
        ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory r0;

        r0 := @this: ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory;

        $i0 = r0.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory: int numPoints>;

        return $i0;
    }

    public java.util.List getDataVariables()
    {
        ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory r0;
        java.util.List $r1;

        r0 := @this: ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory;

        $r1 = r0.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory: java.util.List variables>;

        return $r1;
    }

    public ucar.nc2.VariableSimpleIF getDataVariable(java.lang.String)
    {
        ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory r0;
        ucar.nc2.VariableSimpleIF $r4;
        java.util.HashMap $r2;
        java.lang.Object $r3;
        java.lang.String r1;

        r0 := @this: ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory: java.util.HashMap variablesMap>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (ucar.nc2.VariableSimpleIF) $r3;

        return $r4;
    }

    public ucar.nc2.dt.PointObsDatatype getPointObsData(int) throws java.io.IOException
    {
        ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory$MyPointObsDatatype $r0;
        int i0;
        ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory r1;

        r1 := @this: ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory;

        i0 := @parameter0: int;

        $r0 = new ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory$MyPointObsDatatype;

        specialinvoke $r0.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory$MyPointObsDatatype: void <init>(ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory,int,ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$1)>(r1, i0, null);

        return $r0;
    }

    public java.util.Date getStartDate()
    {
        ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory r0;
        java.util.Date $r1;

        r0 := @this: ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory;

        $r1 = r0.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory: java.util.Date startDate>;

        return $r1;
    }

    public java.util.Date getEndDate()
    {
        ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory r0;
        java.util.Date $r1;

        r0 := @this: ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory;

        $r1 = r0.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory: java.util.Date endDate>;

        return $r1;
    }

    public ucar.unidata.geoloc.LatLonRect getBoundingBox()
    {
        ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory r0;

        r0 := @this: ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory;

        return null;
    }

    public java.util.Date getTime(int) throws java.io.IOException
    {
        java.util.Date $r2, $r9;
        ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory r0;
        int i0;
        java.lang.StringBuilder $r3, $r4, $r5, $r7;
        java.lang.String $r1, $r6, $r8;
        boolean $z0;
        double $d0;

        r0 := @this: ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory;

        i0 := @parameter0: int;

        $r1 = r0.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory: java.lang.String dimVarUnitsString>;

        $z0 = staticinvoke <ucar.nc2.units.SimpleUnit: boolean isDateUnit(java.lang.String)>($r1);

        if $z0 == 0 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $d0 = virtualinvoke r0.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory: double getTimeValue(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r6 = r0.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory: java.lang.String dimVarUnitsString>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = staticinvoke <ucar.nc2.units.DateUnit: java.util.Date getStandardDate(java.lang.String)>($r8);

        return $r9;

     label1:
        $r2 = r0.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory: java.util.Date startDate>;

        return $r2;
    }

    public ucar.unidata.geoloc.EarthLocation getLocation(int) throws java.io.IOException
    {
        int i0;
        ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory$MyEarthLocation $r0;
        ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory r1;

        r1 := @this: ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory;

        i0 := @parameter0: int;

        $r0 = new ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory$MyEarthLocation;

        specialinvoke $r0.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory$MyEarthLocation: void <init>(ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory,int,ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$1)>(r1, i0, null);

        return $r0;
    }

    public java.lang.String getTimeUnitsIdentifier()
    {
        ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory r0;
        java.lang.String $r1;

        r0 := @this: ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory;

        $r1 = r0.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory: java.lang.String dimVarUnitsString>;

        return $r1;
    }

    public double getTimeValue(int) throws java.io.IOException
    {
        boolean $z0, $z1, $z2;
        ucar.ma2.Range $r1;
        float $f0;
        java.lang.StringBuilder $r4, $r5, $r8, $r9, $r16, $r17, $r18, $r19, $r20, $r21, $r23;
        ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory r0;
        int i0, $i1, $i2, $i3;
        java.lang.String $r7, $r10, $r22, $r24;
        double $d0, $d1, $d2;
        java.io.IOException $r3;
        java.lang.IllegalArgumentException $r15;
        ucar.ma2.Array $r2;
        ucar.ma2.InvalidRangeException $r14;
        ucar.ma2.Index $r11, $r12, $r13;
        java.lang.Class $r6;

        r0 := @this: ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory;

        i0 := @parameter0: int;

     label1:
        $r1 = virtualinvoke r0.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory: ucar.ma2.Range getPointRange(int)>(i0);

        $r2 = virtualinvoke r0.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory: ucar.ma2.Array getTime(ucar.ma2.Range)>($r1);

     label2:
        goto label4;

     label3:
        $r14 := @caughtexception;

        $r15 = new java.lang.IllegalArgumentException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Point <");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> not in valid range <0, ");

        $i2 = virtualinvoke r0.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory: int getNumberPoints()>();

        $i3 = $i2 - 1;

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">: ");

        $r22 = virtualinvoke $r14.<ucar.ma2.InvalidRangeException: java.lang.String getMessage()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r24);

        virtualinvoke $r15.<java.lang.IllegalArgumentException: java.lang.Throwable initCause(java.lang.Throwable)>($r14);

        throw $r15;

     label4:
        $z0 = $r2 instanceof ucar.ma2.ArrayDouble;

        if $z0 == 0 goto label5;

        $r13 = virtualinvoke $r2.<ucar.ma2.Array: ucar.ma2.Index getIndex()>();

        $d2 = virtualinvoke $r2.<ucar.ma2.Array: double getDouble(ucar.ma2.Index)>($r13);

        return $d2;

     label5:
        $z1 = $r2 instanceof ucar.ma2.ArrayFloat;

        if $z1 == 0 goto label6;

        $r12 = virtualinvoke $r2.<ucar.ma2.Array: ucar.ma2.Index getIndex()>();

        $f0 = virtualinvoke $r2.<ucar.ma2.Array: float getFloat(ucar.ma2.Index)>($r12);

        $d1 = (double) $f0;

        return $d1;

     label6:
        $z2 = $r2 instanceof ucar.ma2.ArrayInt;

        if $z2 == 0 goto label7;

        $r11 = virtualinvoke $r2.<ucar.ma2.Array: ucar.ma2.Index getIndex()>();

        $i1 = virtualinvoke $r2.<ucar.ma2.Array: int getInt(ucar.ma2.Index)>($r11);

        $d0 = (double) $i1;

        return $d0;

     label7:
        $r3 = new java.io.IOException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Time variable not float, double, or integer <");

        $r6 = virtualinvoke $r2.<ucar.ma2.Array: java.lang.Class getElementType()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String toString()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">.");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>($r10);

        throw $r3;

        catch ucar.ma2.InvalidRangeException from label1 to label2 with label3;
    }

    public double getLatitude(int) throws java.io.IOException
    {
        boolean $z0, $z1;
        ucar.ma2.Range $r1;
        float $f0;
        java.lang.StringBuilder $r4, $r5, $r8, $r9, $r15, $r16, $r17, $r18, $r19, $r20, $r22;
        ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory r0;
        int i0, $i1, $i2;
        java.lang.String $r7, $r10, $r21, $r23;
        double $d0, $d1;
        java.io.IOException $r3;
        java.lang.IllegalArgumentException $r14;
        ucar.ma2.Array $r2;
        ucar.ma2.InvalidRangeException $r13;
        ucar.ma2.Index $r11, $r12;
        java.lang.Class $r6;

        r0 := @this: ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory;

        i0 := @parameter0: int;

     label1:
        $r1 = virtualinvoke r0.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory: ucar.ma2.Range getPointRange(int)>(i0);

        $r2 = virtualinvoke r0.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory: ucar.ma2.Array getLatitude(ucar.ma2.Range)>($r1);

     label2:
        goto label4;

     label3:
        $r13 := @caughtexception;

        $r14 = new java.lang.IllegalArgumentException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Point <");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> not in valid range <0, ");

        $i1 = virtualinvoke r0.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory: int getNumberPoints()>();

        $i2 = $i1 - 1;

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">: ");

        $r21 = virtualinvoke $r13.<ucar.ma2.InvalidRangeException: java.lang.String getMessage()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r23);

        virtualinvoke $r14.<java.lang.IllegalArgumentException: java.lang.Throwable initCause(java.lang.Throwable)>($r13);

        throw $r14;

     label4:
        $z0 = $r2 instanceof ucar.ma2.ArrayDouble;

        if $z0 == 0 goto label5;

        $r12 = virtualinvoke $r2.<ucar.ma2.Array: ucar.ma2.Index getIndex()>();

        $d1 = virtualinvoke $r2.<ucar.ma2.Array: double getDouble(ucar.ma2.Index)>($r12);

        return $d1;

     label5:
        $z1 = $r2 instanceof ucar.ma2.ArrayFloat;

        if $z1 == 0 goto label6;

        $r11 = virtualinvoke $r2.<ucar.ma2.Array: ucar.ma2.Index getIndex()>();

        $f0 = virtualinvoke $r2.<ucar.ma2.Array: float getFloat(ucar.ma2.Index)>($r11);

        $d0 = (double) $f0;

        return $d0;

     label6:
        $r3 = new java.io.IOException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Latitude variable not float or double <");

        $r6 = virtualinvoke $r2.<ucar.ma2.Array: java.lang.Class getElementType()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String toString()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">.");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>($r10);

        throw $r3;

        catch ucar.ma2.InvalidRangeException from label1 to label2 with label3;
    }

    public double getLongitude(int) throws java.io.IOException
    {
        boolean $z0, $z1;
        ucar.ma2.Range $r1;
        float $f0;
        java.lang.StringBuilder $r4, $r5, $r8, $r9, $r15, $r16, $r17, $r18, $r19, $r20, $r22;
        ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory r0;
        int i0, $i1, $i2;
        java.lang.String $r7, $r10, $r21, $r23;
        double $d0, $d1;
        java.io.IOException $r3;
        java.lang.IllegalArgumentException $r14;
        ucar.ma2.Array $r2;
        ucar.ma2.InvalidRangeException $r13;
        ucar.ma2.Index $r11, $r12;
        java.lang.Class $r6;

        r0 := @this: ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory;

        i0 := @parameter0: int;

     label1:
        $r1 = virtualinvoke r0.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory: ucar.ma2.Range getPointRange(int)>(i0);

        $r2 = virtualinvoke r0.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory: ucar.ma2.Array getLongitude(ucar.ma2.Range)>($r1);

     label2:
        goto label4;

     label3:
        $r13 := @caughtexception;

        $r14 = new java.lang.IllegalArgumentException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Point <");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> not in valid range <0, ");

        $i1 = virtualinvoke r0.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory: int getNumberPoints()>();

        $i2 = $i1 - 1;

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">: ");

        $r21 = virtualinvoke $r13.<ucar.ma2.InvalidRangeException: java.lang.String getMessage()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r23);

        virtualinvoke $r14.<java.lang.IllegalArgumentException: java.lang.Throwable initCause(java.lang.Throwable)>($r13);

        throw $r14;

     label4:
        $z0 = $r2 instanceof ucar.ma2.ArrayDouble;

        if $z0 == 0 goto label5;

        $r12 = virtualinvoke $r2.<ucar.ma2.Array: ucar.ma2.Index getIndex()>();

        $d1 = virtualinvoke $r2.<ucar.ma2.Array: double getDouble(ucar.ma2.Index)>($r12);

        return $d1;

     label5:
        $z1 = $r2 instanceof ucar.ma2.ArrayFloat;

        if $z1 == 0 goto label6;

        $r11 = virtualinvoke $r2.<ucar.ma2.Array: ucar.ma2.Index getIndex()>();

        $f0 = virtualinvoke $r2.<ucar.ma2.Array: float getFloat(ucar.ma2.Index)>($r11);

        $d0 = (double) $f0;

        return $d0;

     label6:
        $r3 = new java.io.IOException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Longitude variable not float or double <");

        $r6 = virtualinvoke $r2.<ucar.ma2.Array: java.lang.Class getElementType()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String toString()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">.");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>($r10);

        throw $r3;

        catch ucar.ma2.InvalidRangeException from label1 to label2 with label3;
    }

    public double getElevation(int) throws java.io.IOException
    {
        boolean $z0, $z1;
        ucar.ma2.Range $r1;
        float $f0;
        java.lang.StringBuilder $r4, $r5, $r8, $r9, $r15, $r16, $r17, $r18, $r19, $r20, $r22;
        ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory r0;
        int i0, $i1, $i2;
        java.lang.String $r7, $r10, $r21, $r23;
        double $d0, $d1;
        java.io.IOException $r3;
        java.lang.IllegalArgumentException $r14;
        ucar.ma2.Array $r2;
        ucar.ma2.InvalidRangeException $r13;
        ucar.ma2.Index $r11, $r12;
        java.lang.Class $r6;

        r0 := @this: ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory;

        i0 := @parameter0: int;

     label1:
        $r1 = virtualinvoke r0.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory: ucar.ma2.Range getPointRange(int)>(i0);

        $r2 = virtualinvoke r0.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory: ucar.ma2.Array getElevation(ucar.ma2.Range)>($r1);

     label2:
        goto label4;

     label3:
        $r13 := @caughtexception;

        $r14 = new java.lang.IllegalArgumentException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Point <");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> not in valid range <0, ");

        $i1 = virtualinvoke r0.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory: int getNumberPoints()>();

        $i2 = $i1 - 1;

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">: ");

        $r21 = virtualinvoke $r13.<ucar.ma2.InvalidRangeException: java.lang.String getMessage()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r23);

        virtualinvoke $r14.<java.lang.IllegalArgumentException: java.lang.Throwable initCause(java.lang.Throwable)>($r13);

        throw $r14;

     label4:
        $z0 = $r2 instanceof ucar.ma2.ArrayDouble;

        if $z0 == 0 goto label5;

        $r12 = virtualinvoke $r2.<ucar.ma2.Array: ucar.ma2.Index getIndex()>();

        $d1 = virtualinvoke $r2.<ucar.ma2.Array: double getDouble(ucar.ma2.Index)>($r12);

        return $d1;

     label5:
        $z1 = $r2 instanceof ucar.ma2.ArrayFloat;

        if $z1 == 0 goto label6;

        $r11 = virtualinvoke $r2.<ucar.ma2.Array: ucar.ma2.Index getIndex()>();

        $f0 = virtualinvoke $r2.<ucar.ma2.Array: float getFloat(ucar.ma2.Index)>($r11);

        $d0 = (double) $f0;

        return $d0;

     label6:
        $r3 = new java.io.IOException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Elevation variable not float or double <");

        $r6 = virtualinvoke $r2.<ucar.ma2.Array: java.lang.Class getElementType()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String toString()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">.");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>($r10);

        throw $r3;

        catch ucar.ma2.InvalidRangeException from label1 to label2 with label3;
    }

    public ucar.ma2.StructureData getData(int) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        ucar.ma2.StructureData $r3;
        ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory r0;
        int i0;
        ucar.nc2.Structure $r2;
        ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl $r1;

        r0 := @this: ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory;

        i0 := @parameter0: int;

        $r1 = r0.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory: ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl this$0>;

        $r2 = $r1.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl: ucar.nc2.Structure recordVar>;

        $r3 = virtualinvoke $r2.<ucar.nc2.Structure: ucar.ma2.StructureData readStructure(int)>(i0);

        return $r3;
    }

    public ucar.ma2.Array getData(int, java.lang.String) throws java.io.IOException
    {
        ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory r0;
        int i0, $i1, $i2;
        java.lang.String r2, $r12, $r14;
        ucar.ma2.Range $r1;
        java.lang.IllegalArgumentException $r5;
        ucar.ma2.Array $r3;
        ucar.ma2.InvalidRangeException $r4;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r10, $r11, $r13;

        r0 := @this: ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory;

        i0 := @parameter0: int;

        r2 := @parameter1: java.lang.String;

     label1:
        $r1 = virtualinvoke r0.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory: ucar.ma2.Range getPointRange(int)>(i0);

        $r3 = virtualinvoke r0.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory: ucar.ma2.Array getData(ucar.ma2.Range,java.lang.String)>($r1, r2);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Point <");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> not in valid range <0, ");

        $i1 = virtualinvoke r0.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory: int getNumberPoints()>();

        $i2 = $i1 - 1;

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">: ");

        $r12 = virtualinvoke $r4.<ucar.ma2.InvalidRangeException: java.lang.String getMessage()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        virtualinvoke $r5.<java.lang.IllegalArgumentException: java.lang.Throwable initCause(java.lang.Throwable)>($r4);

        throw $r5;

        catch ucar.ma2.InvalidRangeException from label1 to label2 with label3;
    }

    public ucar.ma2.Range getFullRange()
    {
        ucar.ma2.Range $r0;
        java.lang.IllegalStateException $r3;
        ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory r1;
        ucar.ma2.InvalidRangeException $r2;
        int $i0, $i1, $i2, $i3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r9;
        java.lang.String $r8, $r10;

        r1 := @this: ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory;

     label1:
        $r0 = new ucar.ma2.Range;

        $i0 = virtualinvoke r1.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory: int getNumberPoints()>();

        $i1 = $i0 - 1;

        specialinvoke $r0.<ucar.ma2.Range: void <init>(int,int)>(0, $i1);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.IllegalStateException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Full trajectory range invalid <0, ");

        $i2 = virtualinvoke r1.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory: int getNumberPoints()>();

        $i3 = $i2 - 1;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">: ");

        $r8 = virtualinvoke $r2.<ucar.ma2.InvalidRangeException: java.lang.String getMessage()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r10);

        virtualinvoke $r3.<java.lang.IllegalStateException: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r3;

     label4:
        return $r0;

        catch ucar.ma2.InvalidRangeException from label1 to label2 with label3;
    }

    public ucar.ma2.Range getPointRange(int) throws ucar.ma2.InvalidRangeException
    {
        ucar.ma2.Range $r1;
        ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory r0;
        ucar.ma2.InvalidRangeException $r2;
        int i0, $i1, $i2, $i3;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r8;
        java.lang.String $r9;

        r0 := @this: ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory: int getNumberPoints()>();

        if i0 < $i1 goto label1;

        $r2 = new ucar.ma2.InvalidRangeException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Point <");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> not in acceptible range <0, ");

        $i2 = virtualinvoke r0.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory: int getNumberPoints()>();

        $i3 = $i2 - 1;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">.");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<ucar.ma2.InvalidRangeException: void <init>(java.lang.String)>($r9);

        throw $r2;

     label1:
        $r1 = new ucar.ma2.Range;

        specialinvoke $r1.<ucar.ma2.Range: void <init>(int,int)>(i0, i0);

        return $r1;
    }

    public ucar.ma2.Range getRange(int, int, int) throws ucar.ma2.InvalidRangeException
    {
        ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory r0;
        int i0, $i1, i2, i3, $i4, $i5;
        java.lang.String $r9;
        ucar.ma2.Range $r1;
        ucar.ma2.InvalidRangeException $r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r8;

        r0 := @this: ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory;

        i2 := @parameter0: int;

        i0 := @parameter1: int;

        i3 := @parameter2: int;

        $i1 = virtualinvoke r0.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory: int getNumberPoints()>();

        if i0 < $i1 goto label1;

        $r2 = new ucar.ma2.InvalidRangeException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("End point <");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> not in acceptible range <0, ");

        $i4 = virtualinvoke r0.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory: int getNumberPoints()>();

        $i5 = $i4 - 1;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">.");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<ucar.ma2.InvalidRangeException: void <init>(java.lang.String)>($r9);

        throw $r2;

     label1:
        $r1 = new ucar.ma2.Range;

        specialinvoke $r1.<ucar.ma2.Range: void <init>(int,int,int)>(i2, i0, i3);

        return $r1;
    }

    public ucar.ma2.Array getTime(ucar.ma2.Range) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        java.util.Date $r10;
        double[] r6;
        long $l0, $l2;
        java.util.ArrayList $r0;
        ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory r2;
        int[] $r8;
        int i1, i3;
        ucar.nc2.Variable $r3;
        java.lang.String $r5;
        boolean $z0;
        double $d0;
        ucar.ma2.Range r1;
        ucar.ma2.Array $r4, $r9;
        java.lang.Class $r7;

        r2 := @this: ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory;

        r1 := @parameter0: ucar.ma2.Range;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>(1);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r1);

        $r3 = r2.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory: ucar.nc2.Variable dimVar>;

        $r4 = virtualinvoke $r3.<ucar.nc2.Variable: ucar.ma2.Array read(java.util.List)>($r0);

        $r5 = r2.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory: java.lang.String dimVarUnitsString>;

        $z0 = staticinvoke <ucar.nc2.units.SimpleUnit: boolean isDateUnit(java.lang.String)>($r5);

        if $z0 == 0 goto label1;

        return $r4;

     label1:
        $l0 = virtualinvoke $r4.<ucar.ma2.Array: long getSize()>();

        i1 = (int) $l0;

        r6 = newarray (double)[i1];

        i3 = 0;

     label2:
        if i3 >= i1 goto label3;

        $r10 = r2.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory: java.util.Date startDate>;

        $l2 = virtualinvoke $r10.<java.util.Date: long getTime()>();

        $d0 = (double) $l2;

        r6[i3] = $d0;

        i3 = i3 + 1;

        goto label2;

     label3:
        $r7 = <java.lang.Double: java.lang.Class TYPE>;

        $r8 = virtualinvoke $r4.<ucar.ma2.Array: int[] getShape()>();

        $r9 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[],java.lang.Object)>($r7, $r8, r6);

        return $r9;
    }

    public ucar.ma2.Array getLatitude(ucar.ma2.Range) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        ucar.ma2.Range r1;
        ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory r2;
        ucar.nc2.Variable $r3;
        ucar.ma2.Array $r4;
        java.util.ArrayList $r0;

        r2 := @this: ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory;

        r1 := @parameter0: ucar.ma2.Range;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>(1);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r1);

        $r3 = r2.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory: ucar.nc2.Variable latVar>;

        $r4 = virtualinvoke $r3.<ucar.nc2.Variable: ucar.ma2.Array read(java.util.List)>($r0);

        return $r4;
    }

    public ucar.ma2.Array getLongitude(ucar.ma2.Range) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        ucar.ma2.Range r1;
        ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory r2;
        ucar.nc2.Variable $r3;
        ucar.ma2.Array $r4;
        java.util.ArrayList $r0;

        r2 := @this: ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory;

        r1 := @parameter0: ucar.ma2.Range;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>(1);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r1);

        $r3 = r2.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory: ucar.nc2.Variable lonVar>;

        $r4 = virtualinvoke $r3.<ucar.nc2.Variable: ucar.ma2.Array read(java.util.List)>($r0);

        return $r4;
    }

    public ucar.ma2.Array getElevation(ucar.ma2.Range) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        java.lang.IllegalStateException $r19;
        byte $b0;
        boolean $z0;
        ucar.ma2.Range r1;
        ucar.ma2.DataType $r8, $r9, $r11, $r12, $r14, $r15, $r17, $r18, $r23;
        float $f0, $f1;
        java.lang.StringBuilder $r20, $r21, $r25, $r26;
        long $l1, $l2;
        java.util.ArrayList $r0;
        ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl $r5, $r28, $r29, $r30, $r31;
        ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory r2;
        int $i3, $i4;
        ucar.nc2.Variable $r3, $r7, $r10, $r13, $r16, $r22;
        java.lang.String $r24, $r27;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12;
        ucar.ma2.IndexIterator $r6;
        ucar.ma2.Array $r4;

        r2 := @this: ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory;

        r1 := @parameter0: ucar.ma2.Range;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>(1);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r1);

        $r3 = r2.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory: ucar.nc2.Variable elevVar>;

        $r4 = virtualinvoke $r3.<ucar.nc2.Variable: ucar.ma2.Array read(java.util.List)>($r0);

        $r5 = r2.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory: ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl this$0>;

        $d0 = $r5.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl: double elevVarUnitsConversionFactor>;

        $b0 = $d0 cmpl 1.0;

        if $b0 != 0 goto label1;

        return $r4;

     label1:
        $r6 = virtualinvoke $r4.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

     label2:
        $z0 = interfaceinvoke $r6.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r7 = r2.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory: ucar.nc2.Variable elevVar>;

        $r8 = virtualinvoke $r7.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r9 = <ucar.ma2.DataType: ucar.ma2.DataType DOUBLE>;

        if $r8 != $r9 goto label3;

        $d10 = interfaceinvoke $r6.<ucar.ma2.IndexIterator: double getDoubleNext()>();

        $r31 = r2.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory: ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl this$0>;

        $d11 = $r31.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl: double elevVarUnitsConversionFactor>;

        $d12 = $d10 * $d11;

        interfaceinvoke $r6.<ucar.ma2.IndexIterator: void setDoubleCurrent(double)>($d12);

        goto label2;

     label3:
        $r10 = r2.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory: ucar.nc2.Variable elevVar>;

        $r11 = virtualinvoke $r10.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r12 = <ucar.ma2.DataType: ucar.ma2.DataType FLOAT>;

        if $r11 != $r12 goto label4;

        $f0 = interfaceinvoke $r6.<ucar.ma2.IndexIterator: float getFloatNext()>();

        $d8 = (double) $f0;

        $r30 = r2.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory: ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl this$0>;

        $d7 = $r30.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl: double elevVarUnitsConversionFactor>;

        $d9 = $d8 * $d7;

        $f1 = (float) $d9;

        interfaceinvoke $r6.<ucar.ma2.IndexIterator: void setFloatCurrent(float)>($f1);

        goto label2;

     label4:
        $r13 = r2.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory: ucar.nc2.Variable elevVar>;

        $r14 = virtualinvoke $r13.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r15 = <ucar.ma2.DataType: ucar.ma2.DataType INT>;

        if $r14 != $r15 goto label5;

        $i3 = interfaceinvoke $r6.<ucar.ma2.IndexIterator: int getIntNext()>();

        $d5 = (double) $i3;

        $r29 = r2.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory: ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl this$0>;

        $d4 = $r29.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl: double elevVarUnitsConversionFactor>;

        $d6 = $d5 * $d4;

        $i4 = (int) $d6;

        interfaceinvoke $r6.<ucar.ma2.IndexIterator: void setIntCurrent(int)>($i4);

        goto label2;

     label5:
        $r16 = r2.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory: ucar.nc2.Variable elevVar>;

        $r17 = virtualinvoke $r16.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r18 = <ucar.ma2.DataType: ucar.ma2.DataType LONG>;

        if $r17 != $r18 goto label6;

        $l1 = interfaceinvoke $r6.<ucar.ma2.IndexIterator: long getLongNext()>();

        $d2 = (double) $l1;

        $r28 = r2.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory: ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl this$0>;

        $d1 = $r28.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl: double elevVarUnitsConversionFactor>;

        $d3 = $d2 * $d1;

        $l2 = (long) $d3;

        interfaceinvoke $r6.<ucar.ma2.IndexIterator: void setLongCurrent(long)>($l2);

        goto label2;

     label6:
        $r19 = new java.lang.IllegalStateException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Elevation variable type <");

        $r22 = r2.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory: ucar.nc2.Variable elevVar>;

        $r23 = virtualinvoke $r22.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r24 = virtualinvoke $r23.<ucar.ma2.DataType: java.lang.String toString()>();

        $r25 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> not double, float, int, or long.");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r27);

        throw $r19;

     label7:
        return $r4;
    }

    public ucar.ma2.Array getData(ucar.ma2.Range, java.lang.String) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl $r1;
        java.util.ArrayList $r7;
        ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory r0;
        int[] $r6, $r10;
        int $i0, $i1, $i2, $i3, i4;
        ucar.nc2.Variable $r5;
        java.lang.String r4;
        ucar.ma2.Range r8, $r12;
        ucar.nc2.Group $r3;
        ucar.ma2.Array $r9, $r11;
        ucar.nc2.dataset.NetcdfDataset $r2;

        r0 := @this: ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory;

        r8 := @parameter0: ucar.ma2.Range;

        r4 := @parameter1: java.lang.String;

        $r1 = r0.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory: ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl this$0>;

        $r2 = staticinvoke <ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl: ucar.nc2.dataset.NetcdfDataset access$400(ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl)>($r1);

        $r3 = virtualinvoke $r2.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Group getRootGroup()>();

        $r5 = virtualinvoke $r3.<ucar.nc2.Group: ucar.nc2.Variable findVariable(java.lang.String)>(r4);

        $i0 = virtualinvoke $r5.<ucar.nc2.Variable: int getRank()>();

        $r6 = virtualinvoke $r5.<ucar.nc2.Variable: int[] getShape()>();

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>(int)>($i0);

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>(r8);

        i4 = 1;

     label1:
        if i4 >= $i0 goto label2;

        $r12 = new ucar.ma2.Range;

        $i2 = $r6[i4];

        $i3 = $i2 - 1;

        specialinvoke $r12.<ucar.ma2.Range: void <init>(int,int)>(0, $i3);

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r12);

        i4 = i4 + 1;

        goto label1;

     label2:
        $r9 = virtualinvoke $r5.<ucar.nc2.Variable: ucar.ma2.Array read(java.util.List)>($r7);

        $r10 = virtualinvoke $r9.<ucar.ma2.Array: int[] getShape()>();

        $i1 = $r10[0];

        if $i1 != 1 goto label3;

        $r11 = virtualinvoke $r9.<ucar.ma2.Array: ucar.ma2.Array reduce(int)>(0);

        return $r11;

     label3:
        return $r9;
    }

    public ucar.nc2.dt.DataIterator getDataIterator(int) throws java.io.IOException
    {
        ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory r1;
        ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory$PointDatatypeIterator $r0;
        int i0;
        ucar.nc2.Structure $r3;
        ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl $r2;

        r1 := @this: ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory;

        i0 := @parameter0: int;

        $r0 = new ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory$PointDatatypeIterator;

        $r2 = r1.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory: ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl this$0>;

        $r3 = $r2.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl: ucar.nc2.Structure recordVar>;

        specialinvoke $r0.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory$PointDatatypeIterator: void <init>(ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory,ucar.nc2.Structure,int)>(r1, $r3, i0);

        return $r0;
    }

    void <init>(ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl, java.lang.String, int, ucar.nc2.Variable, java.lang.String, ucar.nc2.Variable, ucar.nc2.Variable, ucar.nc2.Variable, java.util.List, java.util.HashMap, ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$1)
    {
        ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$1 r10;
        java.util.HashMap r9;
        ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl r1;
        ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory r0;
        java.util.List r8;
        int i0;
        ucar.nc2.Variable r3, r5, r6, r7;
        java.lang.String r2, r4;

        r0 := @this: ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory;

        r1 := @parameter0: ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r3 := @parameter3: ucar.nc2.Variable;

        r4 := @parameter4: java.lang.String;

        r5 := @parameter5: ucar.nc2.Variable;

        r6 := @parameter6: ucar.nc2.Variable;

        r7 := @parameter7: ucar.nc2.Variable;

        r8 := @parameter8: java.util.List;

        r9 := @parameter9: java.util.HashMap;

        r10 := @parameter10: ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$1;

        specialinvoke r0.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory: void <init>(ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl,java.lang.String,int,ucar.nc2.Variable,java.lang.String,ucar.nc2.Variable,ucar.nc2.Variable,ucar.nc2.Variable,java.util.List,java.util.HashMap)>(r1, r2, i0, r3, r4, r5, r6, r7, r8, r9);

        return;
    }

    static ucar.nc2.Variable access$600(ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory)
    {
        ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory r0;
        ucar.nc2.Variable $r1;

        r0 := @parameter0: ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory;

        $r1 = r0.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory: ucar.nc2.Variable dimVar>;

        return $r1;
    }

    static java.lang.String access$800(ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory)
    {
        ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory r0;
        java.lang.String $r1;

        r0 := @parameter0: ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory;

        $r1 = r0.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory: java.lang.String dimVarUnitsString>;

        return $r1;
    }

    static ucar.nc2.Variable access$900(ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory)
    {
        ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory r0;
        ucar.nc2.Variable $r1;

        r0 := @parameter0: ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory;

        $r1 = r0.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory: ucar.nc2.Variable latVar>;

        return $r1;
    }

    static ucar.nc2.Variable access$1000(ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory)
    {
        ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory r0;
        ucar.nc2.Variable $r1;

        r0 := @parameter0: ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory;

        $r1 = r0.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory: ucar.nc2.Variable lonVar>;

        return $r1;
    }

    static ucar.nc2.Variable access$1100(ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory)
    {
        ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory r0;
        ucar.nc2.Variable $r1;

        r0 := @parameter0: ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory;

        $r1 = r0.<ucar.nc2.dt.trajectory.TrajectoryObsDatasetImpl$Trajectory: ucar.nc2.Variable elevVar>;

        return $r1;
    }
}
