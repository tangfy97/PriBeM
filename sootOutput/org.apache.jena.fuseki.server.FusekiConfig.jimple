public class org.apache.jena.fuseki.server.FusekiConfig extends java.lang.Object
{
    int port;
    int mgtPort;
    java.util.List datasets;
    private static org.slf4j.Logger log;
    private static java.lang.String prefixes;

    public void <init>()
    {
        org.apache.jena.fuseki.server.FusekiConfig r0;

        r0 := @this: org.apache.jena.fuseki.server.FusekiConfig;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.jena.fuseki.server.FusekiConfig: java.util.List datasets> = null;

        return;
    }

    public static org.apache.jena.fuseki.server.ServerConfig defaultConfiguration(java.lang.String, com.hp.hpl.jena.sparql.core.DatasetGraph, boolean, boolean)
    {
        org.apache.jena.fuseki.server.ServerConfig $r9;
        org.apache.jena.fuseki.server.ServiceRef $r3, $r5, $r7, $r13, $r15, $r17;
        org.apache.jena.fuseki.server.DatasetRef[] $r10;
        int $i0;
        java.lang.String r1, $r12;
        boolean z0, z1;
        org.apache.jena.fuseki.server.DatasetRef $r0;
        com.hp.hpl.jena.sparql.core.DatasetGraph r2;
        java.util.List $r4, $r6, $r8, $r11, $r14, $r16, $r18;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.hp.hpl.jena.sparql.core.DatasetGraph;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        $r0 = new org.apache.jena.fuseki.server.DatasetRef;

        specialinvoke $r0.<org.apache.jena.fuseki.server.DatasetRef: void <init>()>();

        $r0.<org.apache.jena.fuseki.server.DatasetRef: java.lang.String name> = r1;

        $r0.<org.apache.jena.fuseki.server.DatasetRef: com.hp.hpl.jena.sparql.core.DatasetGraph dataset> = r2;

        $r3 = $r0.<org.apache.jena.fuseki.server.DatasetRef: org.apache.jena.fuseki.server.ServiceRef query>;

        $r4 = $r3.<org.apache.jena.fuseki.server.ServiceRef: java.util.List endpoints>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>("query");

        $r5 = $r0.<org.apache.jena.fuseki.server.DatasetRef: org.apache.jena.fuseki.server.ServiceRef query>;

        $r6 = $r5.<org.apache.jena.fuseki.server.ServiceRef: java.util.List endpoints>;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>("sparql");

        if z0 == 0 goto label1;

        $r13 = $r0.<org.apache.jena.fuseki.server.DatasetRef: org.apache.jena.fuseki.server.ServiceRef update>;

        $r14 = $r13.<org.apache.jena.fuseki.server.ServiceRef: java.util.List endpoints>;

        interfaceinvoke $r14.<java.util.List: boolean add(java.lang.Object)>("update");

        $r15 = $r0.<org.apache.jena.fuseki.server.DatasetRef: org.apache.jena.fuseki.server.ServiceRef upload>;

        $r16 = $r15.<org.apache.jena.fuseki.server.ServiceRef: java.util.List endpoints>;

        interfaceinvoke $r16.<java.util.List: boolean add(java.lang.Object)>("upload");

        $r17 = $r0.<org.apache.jena.fuseki.server.DatasetRef: org.apache.jena.fuseki.server.ServiceRef readWriteGraphStore>;

        $r18 = $r17.<org.apache.jena.fuseki.server.ServiceRef: java.util.List endpoints>;

        interfaceinvoke $r18.<java.util.List: boolean add(java.lang.Object)>("data");

        $r0.<org.apache.jena.fuseki.server.DatasetRef: boolean allowDatasetUpdate> = 1;

        goto label2;

     label1:
        $r7 = $r0.<org.apache.jena.fuseki.server.DatasetRef: org.apache.jena.fuseki.server.ServiceRef readGraphStore>;

        $r8 = $r7.<org.apache.jena.fuseki.server.ServiceRef: java.util.List endpoints>;

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>("data");

     label2:
        $r9 = new org.apache.jena.fuseki.server.ServerConfig;

        specialinvoke $r9.<org.apache.jena.fuseki.server.ServerConfig: void <init>()>();

        $r10 = newarray (org.apache.jena.fuseki.server.DatasetRef)[1];

        $r10[0] = $r0;

        $r11 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r10);

        $r9.<org.apache.jena.fuseki.server.ServerConfig: java.util.List datasets> = $r11;

        $r9.<org.apache.jena.fuseki.server.ServerConfig: int port> = 3030;

        $r9.<org.apache.jena.fuseki.server.ServerConfig: int mgtPort> = 3031;

        $i0 = $r9.<org.apache.jena.fuseki.server.ServerConfig: int port>;

        $r9.<org.apache.jena.fuseki.server.ServerConfig: int pagesPort> = $i0;

        $r9.<org.apache.jena.fuseki.server.ServerConfig: boolean loopback> = z1;

        $r9.<org.apache.jena.fuseki.server.ServerConfig: java.lang.String jettyConfigFile> = null;

        $r12 = <org.apache.jena.fuseki.Fuseki: java.lang.String PagesStatic>;

        $r9.<org.apache.jena.fuseki.server.ServerConfig: java.lang.String pages> = $r12;

        $r9.<org.apache.jena.fuseki.server.ServerConfig: boolean enableCompression> = 1;

        $r9.<org.apache.jena.fuseki.server.ServerConfig: boolean verboseLogging> = 0;

        return $r9;
    }

    public static org.apache.jena.fuseki.server.ServerConfig configure(java.lang.String)
    {
        org.apache.jena.fuseki.server.ServerConfig $r9;
        boolean $z0, $z1;
        org.apache.jena.fuseki.server.DatasetRef $r13;
        com.hp.hpl.jena.query.ResultSet $r7;
        java.util.List $r4;
        java.lang.StringBuilder $r16, $r17, $r18, $r21, $r22, $r25;
        java.util.ArrayList $r8;
        com.hp.hpl.jena.util.FileManager $r0;
        int $i0, $i1, $i2, $i3;
        java.lang.String r1, $r10, $r19, $r24, $r26;
        org.slf4j.Logger $r14;
        com.hp.hpl.jena.rdf.model.Resource $r3, r6, $r12, $r23;
        org.apache.jena.fuseki.FusekiConfigException $r15, $r20;
        com.hp.hpl.jena.query.QuerySolution $r11;
        com.hp.hpl.jena.rdf.model.Model $r2;
        java.lang.Object $r5;

        r1 := @parameter0: java.lang.String;

        staticinvoke <com.hp.hpl.jena.query.ARQ: void init()>();

        staticinvoke <com.hp.hpl.jena.tdb.TDB: void init()>();

        staticinvoke <org.apache.jena.fuseki.Fuseki: void init()>();

        $r0 = staticinvoke <com.hp.hpl.jena.util.FileManager: com.hp.hpl.jena.util.FileManager get()>();

        $r2 = virtualinvoke $r0.<com.hp.hpl.jena.util.FileManager: com.hp.hpl.jena.rdf.model.Model loadModel(java.lang.String)>(r1);

        $r3 = <org.apache.jena.fuseki.server.FusekiVocab: com.hp.hpl.jena.rdf.model.Resource tServer>;

        $r4 = staticinvoke <org.apache.jena.fuseki.server.FusekiConfig: java.util.List getByType(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Model)>($r3, $r2);

        $i0 = interfaceinvoke $r4.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        $r20 = new org.apache.jena.fuseki.FusekiConfigException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No server found (no resource with type ");

        $r23 = <org.apache.jena.fuseki.server.FusekiVocab: com.hp.hpl.jena.rdf.model.Resource tServer>;

        $r24 = staticinvoke <org.apache.jena.fuseki.server.FusekiConfig: java.lang.String strForResource(com.hp.hpl.jena.rdf.model.Resource)>($r23);

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<org.apache.jena.fuseki.FusekiConfigException: void <init>(java.lang.String)>($r26);

        throw $r20;

     label1:
        $i1 = interfaceinvoke $r4.<java.util.List: int size()>();

        if $i1 <= 1 goto label2;

        $r15 = new org.apache.jena.fuseki.FusekiConfigException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $i3 = interfaceinvoke $r4.<java.util.List: int size()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" servers found (must be exactly one in a configuration file)");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<org.apache.jena.fuseki.FusekiConfigException: void <init>(java.lang.String)>($r19);

        throw $r15;

     label2:
        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(0);

        r6 = (com.hp.hpl.jena.rdf.model.Resource) $r5;

        staticinvoke <org.apache.jena.fuseki.server.FusekiConfig: void processServer(com.hp.hpl.jena.rdf.model.Resource)>(r6);

        $r7 = staticinvoke <org.apache.jena.fuseki.server.FusekiConfig: com.hp.hpl.jena.query.ResultSet query(java.lang.String,com.hp.hpl.jena.rdf.model.Model)>("SELECT * { ?s fu:services [ list:member ?member ] }", $r2);

        $z0 = interfaceinvoke $r7.<com.hp.hpl.jena.query.ResultSet: boolean hasNext()>();

        if $z0 != 0 goto label3;

        $r14 = <org.apache.jena.fuseki.server.FusekiConfig: org.slf4j.Logger log>;

        interfaceinvoke $r14.<org.slf4j.Logger: void warn(java.lang.String)>("No services found");

     label3:
        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

     label4:
        $z1 = interfaceinvoke $r7.<com.hp.hpl.jena.query.ResultSet: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r11 = interfaceinvoke $r7.<com.hp.hpl.jena.query.ResultSet: com.hp.hpl.jena.query.QuerySolution next()>();

        $r12 = interfaceinvoke $r11.<com.hp.hpl.jena.query.QuerySolution: com.hp.hpl.jena.rdf.model.Resource getResource(java.lang.String)>("member");

        $r13 = staticinvoke <org.apache.jena.fuseki.server.FusekiConfig: org.apache.jena.fuseki.server.DatasetRef processService(com.hp.hpl.jena.rdf.model.Resource)>($r12);

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r13);

        goto label4;

     label5:
        $r9 = new org.apache.jena.fuseki.server.ServerConfig;

        specialinvoke $r9.<org.apache.jena.fuseki.server.ServerConfig: void <init>()>();

        $r9.<org.apache.jena.fuseki.server.ServerConfig: java.util.List datasets> = $r8;

        $r9.<org.apache.jena.fuseki.server.ServerConfig: int port> = 3030;

        $r9.<org.apache.jena.fuseki.server.ServerConfig: int mgtPort> = 3031;

        $i2 = $r9.<org.apache.jena.fuseki.server.ServerConfig: int port>;

        $r9.<org.apache.jena.fuseki.server.ServerConfig: int pagesPort> = $i2;

        $r9.<org.apache.jena.fuseki.server.ServerConfig: java.lang.String jettyConfigFile> = null;

        $r10 = <org.apache.jena.fuseki.Fuseki: java.lang.String PagesStatic>;

        $r9.<org.apache.jena.fuseki.server.ServerConfig: java.lang.String pages> = $r10;

        $r9.<org.apache.jena.fuseki.server.ServerConfig: boolean enableCompression> = 1;

        $r9.<org.apache.jena.fuseki.server.ServerConfig: boolean verboseLogging> = 0;

        return $r9;
    }

    private static void processServer(com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.rdf.model.StmtIterator $r3;
        com.hp.hpl.jena.rdf.model.Property $r2;
        int $i0;
        java.lang.String $r8, r9, $r14, r16;
        boolean $z0, $z1, $z2, $z3;
        org.slf4j.Logger $r11, $r15;
        com.hp.hpl.jena.rdf.model.RDFNode $r5;
        com.hp.hpl.jena.sparql.util.Context $r1;
        com.hp.hpl.jena.rdf.model.Statement $r4;
        com.hp.hpl.jena.rdf.model.Resource r0, $r7;
        java.lang.StringBuilder $r10, $r12, $r13;
        com.hp.hpl.jena.rdf.model.Literal $r6;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        $r1 = staticinvoke <org.apache.jena.fuseki.Fuseki: com.hp.hpl.jena.sparql.util.Context getContext()>();

        staticinvoke <com.hp.hpl.jena.sparql.core.assembler.AssemblerUtils: void setContext(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.sparql.util.Context)>(r0, $r1);

        $r2 = <com.hp.hpl.jena.assembler.JA: com.hp.hpl.jena.rdf.model.Property loadClass>;

        $r3 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.StmtIterator listProperties(com.hp.hpl.jena.rdf.model.Property)>($r2);

     label1:
        $z3 = interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z3 == 0 goto label6;

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.StmtIterator: com.hp.hpl.jena.rdf.model.Statement nextStatement()>();

        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.RDFNode getObject()>();

        r16 = null;

        $z0 = $r5 instanceof com.hp.hpl.jena.rdf.model.Resource;

        if $z0 == 0 goto label4;

        $r7 = (com.hp.hpl.jena.rdf.model.Resource) $r5;

        $r8 = interfaceinvoke $r7.<com.hp.hpl.jena.rdf.model.Resource: java.lang.String getURI()>();

        if $r8 != null goto label2;

        $r15 = <org.apache.jena.fuseki.server.FusekiConfig: org.slf4j.Logger log>;

        interfaceinvoke $r15.<org.slf4j.Logger: void warn(java.lang.String)>("Blank node for class to load");

        goto label1;

     label2:
        r9 = "java:";

        $z2 = virtualinvoke $r8.<java.lang.String: boolean startsWith(java.lang.String)>("java:");

        if $z2 != 0 goto label3;

        $r11 = <org.apache.jena.fuseki.server.FusekiConfig: org.slf4j.Logger log>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class to load is not \'java:\': ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r11.<org.slf4j.Logger: void warn(java.lang.String)>($r14);

        goto label1;

     label3:
        $i0 = virtualinvoke r9.<java.lang.String: int length()>();

        r16 = virtualinvoke $r8.<java.lang.String: java.lang.String substring(int)>($i0);

     label4:
        $z1 = $r5 instanceof com.hp.hpl.jena.rdf.model.Literal;

        if $z1 == 0 goto label5;

        $r6 = (com.hp.hpl.jena.rdf.model.Literal) $r5;

        r16 = interfaceinvoke $r6.<com.hp.hpl.jena.rdf.model.Literal: java.lang.String getLexicalForm()>();

     label5:
        staticinvoke <org.apache.jena.fuseki.server.FusekiConfig: void loadAndInit(java.lang.String)>(r16);

        goto label1;

     label6:
        return;
    }

    private static void loadAndInit(java.lang.String)
    {
        java.lang.Object[] $r9;
        java.lang.String r0, $r6, $r17;
        java.lang.reflect.Method $r8;
        org.slf4j.Logger $r3, $r14;
        java.lang.Class[] $r7;
        java.lang.Exception $r10;
        org.apache.jena.fuseki.FusekiConfigException $r11;
        java.lang.Class $r1;
        java.lang.StringBuilder $r2, $r4, $r5, $r13, $r15, $r16;
        java.lang.ClassNotFoundException $r12;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        $r3 = <org.apache.jena.fuseki.server.FusekiConfig: org.slf4j.Logger log>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Loaded ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r3.<org.slf4j.Logger: void info(java.lang.String)>($r6);

        $r7 = newarray (java.lang.Class)[0];

        $r8 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("init", $r7);

        $r9 = newarray (java.lang.Object)[0];

        virtualinvoke $r8.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r9);

     label2:
        goto label5;

     label3:
        $r12 := @caughtexception;

        $r14 = <org.apache.jena.fuseki.server.FusekiConfig: org.slf4j.Logger log>;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class not found: ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r14.<org.slf4j.Logger: void warn(java.lang.String)>($r17);

        goto label5;

     label4:
        $r10 := @caughtexception;

        $r11 = new org.apache.jena.fuseki.FusekiConfigException;

        specialinvoke $r11.<org.apache.jena.fuseki.FusekiConfigException: void <init>(java.lang.Throwable)>($r10);

        throw $r11;

     label5:
        return;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
        catch java.lang.Exception from label1 to label2 with label4;
    }

    private static org.apache.jena.fuseki.server.DatasetRef processService(com.hp.hpl.jena.rdf.model.Resource)
    {
        org.apache.jena.fuseki.server.ServiceRef $r17, $r19, $r21, $r23, $r25;
        com.hp.hpl.jena.rdf.model.Property $r27, $r38, $r42, $r43, $r49;
        boolean $z0, $z1, $z2, $z3;
        com.hp.hpl.jena.rdf.model.RDFNode $r8, $r40, $r45, $r47;
        org.apache.jena.fuseki.server.DatasetRef $r7;
        com.hp.hpl.jena.assembler.assemblers.AssemblerGroup $r28;
        com.hp.hpl.jena.query.Dataset r30;
        float $f0, $f1;
        java.lang.StringBuilder $r0, $r2, $r5, $r11, $r13, $r15, $r33, $r34, $r36;
        com.hp.hpl.jena.rdf.model.Literal $r9, $r41, $r46;
        long $l1;
        int $i0;
        java.lang.String $r4, $r6, $r10, $r14, $r16, $r18, $r20, $r22, $r24, $r26, $r35, $r37;
        org.slf4j.Logger $r1, $r12;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r31;
        com.hp.hpl.jena.rdf.model.Statement $r39, $r44;
        com.hp.hpl.jena.rdf.model.Resource r3, $r48;
        org.apache.jena.fuseki.FusekiConfigException $r32;
        java.lang.Object $r29;

        r3 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        $r1 = <org.apache.jena.fuseki.server.FusekiConfig: org.slf4j.Logger log>;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Service: ");

        $r4 = staticinvoke <org.apache.jena.fuseki.server.FusekiConfig: java.lang.String nodeLabel(com.hp.hpl.jena.rdf.model.RDFNode)>(r3);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r1.<org.slf4j.Logger: void info(java.lang.String)>($r6);

        $r7 = new org.apache.jena.fuseki.server.DatasetRef;

        specialinvoke $r7.<org.apache.jena.fuseki.server.DatasetRef: void <init>()>();

        $r8 = staticinvoke <org.apache.jena.fuseki.server.FusekiConfig: com.hp.hpl.jena.rdf.model.RDFNode getOne(com.hp.hpl.jena.rdf.model.Resource,java.lang.String)>(r3, "fu:name");

        $r9 = (com.hp.hpl.jena.rdf.model.Literal) $r8;

        $r10 = interfaceinvoke $r9.<com.hp.hpl.jena.rdf.model.Literal: java.lang.String getLexicalForm()>();

        $r7.<org.apache.jena.fuseki.server.DatasetRef: java.lang.String name> = $r10;

        $r12 = <org.apache.jena.fuseki.server.FusekiConfig: org.slf4j.Logger log>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  name = ");

        $r14 = $r7.<org.apache.jena.fuseki.server.DatasetRef: java.lang.String name>;

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r12.<org.slf4j.Logger: void info(java.lang.String)>($r16);

        $r18 = $r7.<org.apache.jena.fuseki.server.DatasetRef: java.lang.String name>;

        $r17 = $r7.<org.apache.jena.fuseki.server.DatasetRef: org.apache.jena.fuseki.server.ServiceRef query>;

        staticinvoke <org.apache.jena.fuseki.server.FusekiConfig: void addServiceEP(java.lang.String,java.lang.String,org.apache.jena.fuseki.server.ServiceRef,com.hp.hpl.jena.rdf.model.Resource,java.lang.String)>("query", $r18, $r17, r3, "fu:serviceQuery");

        $r20 = $r7.<org.apache.jena.fuseki.server.DatasetRef: java.lang.String name>;

        $r19 = $r7.<org.apache.jena.fuseki.server.DatasetRef: org.apache.jena.fuseki.server.ServiceRef update>;

        staticinvoke <org.apache.jena.fuseki.server.FusekiConfig: void addServiceEP(java.lang.String,java.lang.String,org.apache.jena.fuseki.server.ServiceRef,com.hp.hpl.jena.rdf.model.Resource,java.lang.String)>("update", $r20, $r19, r3, "fu:serviceUpdate");

        $r22 = $r7.<org.apache.jena.fuseki.server.DatasetRef: java.lang.String name>;

        $r21 = $r7.<org.apache.jena.fuseki.server.DatasetRef: org.apache.jena.fuseki.server.ServiceRef upload>;

        staticinvoke <org.apache.jena.fuseki.server.FusekiConfig: void addServiceEP(java.lang.String,java.lang.String,org.apache.jena.fuseki.server.ServiceRef,com.hp.hpl.jena.rdf.model.Resource,java.lang.String)>("upload", $r22, $r21, r3, "fu:serviceUpload");

        $r24 = $r7.<org.apache.jena.fuseki.server.DatasetRef: java.lang.String name>;

        $r23 = $r7.<org.apache.jena.fuseki.server.DatasetRef: org.apache.jena.fuseki.server.ServiceRef readWriteGraphStore>;

        staticinvoke <org.apache.jena.fuseki.server.FusekiConfig: void addServiceEP(java.lang.String,java.lang.String,org.apache.jena.fuseki.server.ServiceRef,com.hp.hpl.jena.rdf.model.Resource,java.lang.String)>("graphStore(RW)", $r24, $r23, r3, "fu:serviceReadWriteGraphStore");

        $r26 = $r7.<org.apache.jena.fuseki.server.DatasetRef: java.lang.String name>;

        $r25 = $r7.<org.apache.jena.fuseki.server.DatasetRef: org.apache.jena.fuseki.server.ServiceRef readGraphStore>;

        staticinvoke <org.apache.jena.fuseki.server.FusekiConfig: void addServiceEP(java.lang.String,java.lang.String,org.apache.jena.fuseki.server.ServiceRef,com.hp.hpl.jena.rdf.model.Resource,java.lang.String)>("graphStore(R)", $r26, $r25, r3, "fu:serviceReadGraphStore");

        $r27 = <org.apache.jena.fuseki.server.FusekiVocab: com.hp.hpl.jena.rdf.model.Property pAllowTimeoutOverride>;

        $z0 = interfaceinvoke r3.<com.hp.hpl.jena.rdf.model.Resource: boolean hasProperty(com.hp.hpl.jena.rdf.model.Property)>($r27);

        if $z0 == 0 goto label1;

        $r38 = <org.apache.jena.fuseki.server.FusekiVocab: com.hp.hpl.jena.rdf.model.Property pAllowTimeoutOverride>;

        $r39 = interfaceinvoke r3.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.Statement getProperty(com.hp.hpl.jena.rdf.model.Property)>($r38);

        $r40 = interfaceinvoke $r39.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.RDFNode getObject()>();

        $r41 = interfaceinvoke $r40.<com.hp.hpl.jena.rdf.model.RDFNode: com.hp.hpl.jena.rdf.model.Literal asLiteral()>();

        $z1 = interfaceinvoke $r41.<com.hp.hpl.jena.rdf.model.Literal: boolean getBoolean()>();

        $r7.<org.apache.jena.fuseki.server.DatasetRef: boolean allowTimeoutOverride> = $z1;

        $r42 = <org.apache.jena.fuseki.server.FusekiVocab: com.hp.hpl.jena.rdf.model.Property pMaximumTimeoutOverride>;

        $z2 = interfaceinvoke r3.<com.hp.hpl.jena.rdf.model.Resource: boolean hasProperty(com.hp.hpl.jena.rdf.model.Property)>($r42);

        if $z2 == 0 goto label1;

        $r43 = <org.apache.jena.fuseki.server.FusekiVocab: com.hp.hpl.jena.rdf.model.Property pMaximumTimeoutOverride>;

        $r44 = interfaceinvoke r3.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.Statement getProperty(com.hp.hpl.jena.rdf.model.Property)>($r43);

        $r45 = interfaceinvoke $r44.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.RDFNode getObject()>();

        $r46 = interfaceinvoke $r45.<com.hp.hpl.jena.rdf.model.RDFNode: com.hp.hpl.jena.rdf.model.Literal asLiteral()>();

        $f0 = interfaceinvoke $r46.<com.hp.hpl.jena.rdf.model.Literal: float getFloat()>();

        $f1 = $f0 * 1000.0F;

        $i0 = (int) $f1;

        $l1 = (long) $i0;

        $r7.<org.apache.jena.fuseki.server.DatasetRef: long maximumTimeoutOverride> = $l1;

     label1:
        $r47 = staticinvoke <org.apache.jena.fuseki.server.FusekiConfig: com.hp.hpl.jena.rdf.model.RDFNode getOne(com.hp.hpl.jena.rdf.model.Resource,java.lang.String)>(r3, "fu:dataset");

        $r48 = (com.hp.hpl.jena.rdf.model.Resource) $r47;

        $r49 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property type>;

        $z3 = interfaceinvoke $r48.<com.hp.hpl.jena.rdf.model.Resource: boolean hasProperty(com.hp.hpl.jena.rdf.model.Property)>($r49);

        if $z3 != 0 goto label2;

        $r32 = new org.apache.jena.fuseki.FusekiConfigException;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No rdf:type for dataset ");

        $r35 = staticinvoke <org.apache.jena.fuseki.server.FusekiConfig: java.lang.String nodeLabel(com.hp.hpl.jena.rdf.model.RDFNode)>($r48);

        $r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r32.<org.apache.jena.fuseki.FusekiConfigException: void <init>(java.lang.String)>($r37);

        throw $r32;

     label2:
        $r28 = <com.hp.hpl.jena.assembler.Assembler: com.hp.hpl.jena.assembler.assemblers.AssemblerGroup general>;

        $r29 = virtualinvoke $r28.<com.hp.hpl.jena.assembler.assemblers.AssemblerGroup: java.lang.Object open(com.hp.hpl.jena.rdf.model.Resource)>($r48);

        r30 = (com.hp.hpl.jena.query.Dataset) $r29;

        $r31 = interfaceinvoke r30.<com.hp.hpl.jena.query.Dataset: com.hp.hpl.jena.sparql.core.DatasetGraph asDatasetGraph()>();

        $r7.<org.apache.jena.fuseki.server.DatasetRef: com.hp.hpl.jena.sparql.core.DatasetGraph dataset> = $r31;

        return $r7;
    }

    private static com.hp.hpl.jena.rdf.model.RDFNode getOne(com.hp.hpl.jena.rdf.model.Resource, java.lang.String)
    {
        boolean $z0, $z1;
        com.hp.hpl.jena.rdf.model.RDFNode $r11;
        com.hp.hpl.jena.query.ResultSet $r9;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r13, $r14, $r15, $r16, $r18, $r21, $r22, $r23, $r24, $r26;
        int $i0, $i1;
        java.lang.String r0, $r1, $r6, $r17, $r19, $r25, $r27;
        com.hp.hpl.jena.rdf.model.Resource r7;
        org.apache.jena.fuseki.FusekiConfigException $r12, $r20;
        com.hp.hpl.jena.query.QuerySolution $r10;
        com.hp.hpl.jena.rdf.model.Model $r8;

        r7 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        r0 := @parameter1: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(58);

        $i1 = $i0 + 1;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i1);

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELECT * { ?svc ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ?x}");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = interfaceinvoke r7.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.Model getModel()>();

        $r9 = staticinvoke <org.apache.jena.fuseki.server.FusekiConfig: com.hp.hpl.jena.query.ResultSet query(java.lang.String,com.hp.hpl.jena.rdf.model.Model,java.lang.String,com.hp.hpl.jena.rdf.model.RDFNode)>($r6, $r8, "svc", r7);

        $z0 = interfaceinvoke $r9.<com.hp.hpl.jena.query.ResultSet: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r20 = new org.apache.jena.fuseki.FusekiConfigException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for service ");

        $r25 = staticinvoke <org.apache.jena.fuseki.server.FusekiConfig: java.lang.String nodeLabel(com.hp.hpl.jena.rdf.model.RDFNode)>(r7);

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<org.apache.jena.fuseki.FusekiConfigException: void <init>(java.lang.String)>($r27);

        throw $r20;

     label1:
        $r10 = interfaceinvoke $r9.<com.hp.hpl.jena.query.ResultSet: com.hp.hpl.jena.query.QuerySolution next()>();

        $r11 = interfaceinvoke $r10.<com.hp.hpl.jena.query.QuerySolution: com.hp.hpl.jena.rdf.model.RDFNode get(java.lang.String)>("x");

        $z1 = interfaceinvoke $r9.<com.hp.hpl.jena.query.ResultSet: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r12 = new org.apache.jena.fuseki.FusekiConfigException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Multiple ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for service ");

        $r17 = staticinvoke <org.apache.jena.fuseki.server.FusekiConfig: java.lang.String nodeLabel(com.hp.hpl.jena.rdf.model.RDFNode)>(r7);

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<org.apache.jena.fuseki.FusekiConfigException: void <init>(java.lang.String)>($r19);

        throw $r12;

     label2:
        return $r11;
    }

    private static java.util.List getByType(com.hp.hpl.jena.rdf.model.Resource, com.hp.hpl.jena.rdf.model.Model)
    {
        java.util.List $r4;
        com.hp.hpl.jena.rdf.model.Property $r2;
        com.hp.hpl.jena.rdf.model.Model r0;
        com.hp.hpl.jena.rdf.model.ResIterator $r3;
        com.hp.hpl.jena.rdf.model.Resource r1;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        r0 := @parameter1: com.hp.hpl.jena.rdf.model.Model;

        $r2 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property type>;

        $r3 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.ResIterator listSubjectsWithProperty(com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>($r2, r1);

        $r4 = staticinvoke <org.apache.jena.atlas.iterator.Iter: java.util.List toList(java.util.Iterator)>($r3);

        return $r4;
    }

    private static void addServiceEP(java.lang.String, java.lang.String, org.apache.jena.fuseki.server.ServiceRef, com.hp.hpl.jena.rdf.model.Resource, java.lang.String)
    {
        org.apache.jena.fuseki.server.ServiceRef r12;
        java.lang.String r2, $r5, $r11, r17, r20, $r24;
        boolean $z0;
        org.slf4j.Logger $r15;
        com.hp.hpl.jena.query.ResultSet $r8;
        com.hp.hpl.jena.rdf.model.Resource r6;
        java.util.List $r13;
        com.hp.hpl.jena.query.QuerySolution $r9;
        com.hp.hpl.jena.rdf.model.Model $r7;
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r14, $r16, $r18, $r19, $r21, $r22, $r23;
        com.hp.hpl.jena.rdf.model.Literal $r10;

        r17 := @parameter0: java.lang.String;

        r20 := @parameter1: java.lang.String;

        r12 := @parameter2: org.apache.jena.fuseki.server.ServiceRef;

        r6 := @parameter3: com.hp.hpl.jena.rdf.model.Resource;

        r2 := @parameter4: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELECT * { ?svc ");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ?ep}");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = interfaceinvoke r6.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.Model getModel()>();

        $r8 = staticinvoke <org.apache.jena.fuseki.server.FusekiConfig: com.hp.hpl.jena.query.ResultSet query(java.lang.String,com.hp.hpl.jena.rdf.model.Model,java.lang.String,com.hp.hpl.jena.rdf.model.RDFNode)>($r5, $r7, "svc", r6);

     label1:
        $z0 = interfaceinvoke $r8.<com.hp.hpl.jena.query.ResultSet: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r9 = interfaceinvoke $r8.<com.hp.hpl.jena.query.ResultSet: com.hp.hpl.jena.query.QuerySolution next()>();

        $r10 = interfaceinvoke $r9.<com.hp.hpl.jena.query.QuerySolution: com.hp.hpl.jena.rdf.model.Literal getLiteral(java.lang.String)>("ep");

        $r11 = interfaceinvoke $r10.<com.hp.hpl.jena.rdf.model.Literal: java.lang.String getLexicalForm()>();

        $r13 = r12.<org.apache.jena.fuseki.server.ServiceRef: java.util.List endpoints>;

        interfaceinvoke $r13.<java.util.List: boolean add(java.lang.Object)>($r11);

        $r15 = <org.apache.jena.fuseki.server.FusekiConfig: org.slf4j.Logger log>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" = /");

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r15.<org.slf4j.Logger: void info(java.lang.String)>($r24);

        goto label1;

     label2:
        return;
    }

    private static com.hp.hpl.jena.query.ResultSet query(java.lang.String, com.hp.hpl.jena.rdf.model.Model)
    {
        com.hp.hpl.jena.rdf.model.Model r1;
        java.lang.String r0;
        com.hp.hpl.jena.query.ResultSet $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: com.hp.hpl.jena.rdf.model.Model;

        $r2 = staticinvoke <org.apache.jena.fuseki.server.FusekiConfig: com.hp.hpl.jena.query.ResultSet query(java.lang.String,com.hp.hpl.jena.rdf.model.Model,java.lang.String,com.hp.hpl.jena.rdf.model.RDFNode)>(r0, r1, null, null);

        return $r2;
    }

    private static com.hp.hpl.jena.query.ResultSet query(java.lang.String, com.hp.hpl.jena.rdf.model.Model, java.lang.String, com.hp.hpl.jena.rdf.model.RDFNode)
    {
        com.hp.hpl.jena.query.Query $r6;
        com.hp.hpl.jena.rdf.model.RDFNode r12;
        com.hp.hpl.jena.query.ResultSetRewindable $r11;
        com.hp.hpl.jena.query.ResultSet $r10;
        com.hp.hpl.jena.query.QuerySolutionMap r13;
        com.hp.hpl.jena.rdf.model.Model r8;
        java.lang.StringBuilder $r0, $r2, $r4;
        java.lang.String $r1, r3, $r5, r7;
        com.hp.hpl.jena.query.QueryExecution $r9;

        r3 := @parameter0: java.lang.String;

        r8 := @parameter1: com.hp.hpl.jena.rdf.model.Model;

        r7 := @parameter2: java.lang.String;

        r12 := @parameter3: com.hp.hpl.jena.rdf.model.RDFNode;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = <org.apache.jena.fuseki.server.FusekiConfig: java.lang.String prefixes>;

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = staticinvoke <com.hp.hpl.jena.query.QueryFactory: com.hp.hpl.jena.query.Query create(java.lang.String)>($r5);

        r13 = null;

        if r7 == null goto label1;

        r13 = staticinvoke <org.apache.jena.fuseki.server.FusekiConfig: com.hp.hpl.jena.query.QuerySolutionMap querySolution(java.lang.String,com.hp.hpl.jena.rdf.model.RDFNode)>(r7, r12);

     label1:
        $r9 = staticinvoke <com.hp.hpl.jena.query.QueryExecutionFactory: com.hp.hpl.jena.query.QueryExecution create(com.hp.hpl.jena.query.Query,com.hp.hpl.jena.rdf.model.Model,com.hp.hpl.jena.query.QuerySolution)>($r6, r8, r13);

        $r10 = interfaceinvoke $r9.<com.hp.hpl.jena.query.QueryExecution: com.hp.hpl.jena.query.ResultSet execSelect()>();

        $r11 = staticinvoke <com.hp.hpl.jena.query.ResultSetFactory: com.hp.hpl.jena.query.ResultSetRewindable copyResults(com.hp.hpl.jena.query.ResultSet)>($r10);

        interfaceinvoke $r9.<com.hp.hpl.jena.query.QueryExecution: void close()>();

        return $r11;
    }

    private static com.hp.hpl.jena.query.QuerySolutionMap querySolution(java.lang.String, com.hp.hpl.jena.rdf.model.RDFNode)
    {
        java.lang.String r1;
        com.hp.hpl.jena.query.QuerySolutionMap $r0;
        com.hp.hpl.jena.rdf.model.RDFNode r2;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.hp.hpl.jena.rdf.model.RDFNode;

        $r0 = new com.hp.hpl.jena.query.QuerySolutionMap;

        specialinvoke $r0.<com.hp.hpl.jena.query.QuerySolutionMap: void <init>()>();

        staticinvoke <org.apache.jena.fuseki.server.FusekiConfig: com.hp.hpl.jena.query.QuerySolutionMap querySolution(com.hp.hpl.jena.query.QuerySolutionMap,java.lang.String,com.hp.hpl.jena.rdf.model.RDFNode)>($r0, r1, r2);

        return $r0;
    }

    private static com.hp.hpl.jena.query.QuerySolutionMap querySolution(com.hp.hpl.jena.query.QuerySolutionMap, java.lang.String, com.hp.hpl.jena.rdf.model.RDFNode)
    {
        java.lang.String r1;
        com.hp.hpl.jena.query.QuerySolutionMap r0;
        com.hp.hpl.jena.rdf.model.RDFNode r2;

        r0 := @parameter0: com.hp.hpl.jena.query.QuerySolutionMap;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: com.hp.hpl.jena.rdf.model.RDFNode;

        virtualinvoke r0.<com.hp.hpl.jena.query.QuerySolutionMap: void add(java.lang.String,com.hp.hpl.jena.rdf.model.RDFNode)>(r1, r2);

        return r0;
    }

    private static java.lang.String nodeLabel(com.hp.hpl.jena.rdf.model.RDFNode)
    {
        com.hp.hpl.jena.rdf.model.RDFNode r0;
        java.lang.String $r2, $r4;
        com.hp.hpl.jena.rdf.model.Literal r1;
        com.hp.hpl.jena.rdf.model.Resource $r3;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.RDFNode;

        if r0 != null goto label1;

        return "<null>";

     label1:
        $z0 = r0 instanceof com.hp.hpl.jena.rdf.model.Resource;

        if $z0 == 0 goto label2;

        $r3 = (com.hp.hpl.jena.rdf.model.Resource) r0;

        $r4 = staticinvoke <org.apache.jena.fuseki.server.FusekiConfig: java.lang.String strForResource(com.hp.hpl.jena.rdf.model.Resource)>($r3);

        return $r4;

     label2:
        r1 = (com.hp.hpl.jena.rdf.model.Literal) r0;

        $r2 = interfaceinvoke r1.<com.hp.hpl.jena.rdf.model.Literal: java.lang.String getLexicalForm()>();

        return $r2;
    }

    private static java.lang.String strForResource(com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.rdf.model.Model $r1;
        java.lang.String $r2;
        com.hp.hpl.jena.rdf.model.Resource r0;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.Model getModel()>();

        $r2 = staticinvoke <org.apache.jena.fuseki.server.FusekiConfig: java.lang.String strForResource(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.shared.PrefixMapping)>(r0, $r1);

        return $r2;
    }

    private static java.lang.String strForResource(com.hp.hpl.jena.rdf.model.Resource, com.hp.hpl.jena.shared.PrefixMapping)
    {
        com.hp.hpl.jena.rdf.model.RDFNode $r6;
        com.hp.hpl.jena.rdf.model.Statement $r5;
        com.hp.hpl.jena.rdf.model.Resource r0;
        com.hp.hpl.jena.rdf.model.Property $r1, $r4;
        java.lang.String $r2, $r3, $r8;
        com.hp.hpl.jena.rdf.model.Literal $r7;
        com.hp.hpl.jena.shared.PrefixMapping r9;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        r9 := @parameter1: com.hp.hpl.jena.shared.PrefixMapping;

        if r0 != null goto label1;

        return "NULL ";

     label1:
        $r1 = <com.hp.hpl.jena.vocabulary.RDFS: com.hp.hpl.jena.rdf.model.Property label>;

        $z0 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Resource: boolean hasProperty(com.hp.hpl.jena.rdf.model.Property)>($r1);

        if $z0 == 0 goto label2;

        $r4 = <com.hp.hpl.jena.vocabulary.RDFS: com.hp.hpl.jena.rdf.model.Property label>;

        $r5 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.Statement getProperty(com.hp.hpl.jena.rdf.model.Property)>($r4);

        $r6 = interfaceinvoke $r5.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.RDFNode getObject()>();

        $z2 = $r6 instanceof com.hp.hpl.jena.rdf.model.Literal;

        if $z2 == 0 goto label2;

        $r7 = (com.hp.hpl.jena.rdf.model.Literal) $r6;

        $r8 = interfaceinvoke $r7.<com.hp.hpl.jena.rdf.model.Literal: java.lang.String getString()>();

        return $r8;

     label2:
        $z1 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Resource: boolean isAnon()>();

        if $z1 == 0 goto label3;

        return "<<blank node>>";

     label3:
        if r9 != null goto label4;

        r9 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.Model getModel()>();

     label4:
        $r2 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Resource: java.lang.String getURI()>();

        $r3 = staticinvoke <org.apache.jena.fuseki.server.FusekiConfig: java.lang.String strForURI(java.lang.String,com.hp.hpl.jena.shared.PrefixMapping)>($r2, r9);

        return $r3;
    }

    private static java.lang.String strForURI(java.lang.String, com.hp.hpl.jena.shared.PrefixMapping)
    {
        java.lang.StringBuilder $r1, $r2, $r4, $r5;
        java.lang.String r3, $r6, $r7;
        com.hp.hpl.jena.shared.PrefixMapping r0;
        boolean $z0;

        r3 := @parameter0: java.lang.String;

        r0 := @parameter1: com.hp.hpl.jena.shared.PrefixMapping;

        if r0 == null goto label1;

        $r7 = interfaceinvoke r0.<com.hp.hpl.jena.shared.PrefixMapping: java.lang.String shortForm(java.lang.String)>(r3);

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z0 != 0 goto label1;

        return $r7;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    static void <clinit>()
    {
        java.lang.String[] $r1;
        org.slf4j.Logger $r0;
        java.lang.String $r2;

        staticinvoke <org.apache.jena.fuseki.Fuseki: void init()>();

        $r0 = <org.apache.jena.fuseki.Fuseki: org.slf4j.Logger configLog>;

        <org.apache.jena.fuseki.server.FusekiConfig: org.slf4j.Logger log> = $r0;

        $r1 = newarray (java.lang.String)[10];

        $r1[0] = "PREFIX fu:     <http://jena.apache.org/fuseki#>";

        $r1[1] = "PREFIX rdf:    <http://www.w3.org/1999/02/22-rdf-syntax-ns#>";

        $r1[2] = "PREFIX rdfs:   <http://www.w3.org/2000/01/rdf-schema#>";

        $r1[3] = "PREFIX tdb:    <http://jena.hpl.hp.com/2008/tdb#>";

        $r1[4] = "PREFIX list:   <http://jena.hpl.hp.com/ARQ/list#>";

        $r1[5] = "PREFIX list:   <http://jena.hpl.hp.com/ARQ/list#>";

        $r1[6] = "PREFIX xsd:     <http://www.w3.org/2001/XMLSchema#>";

        $r1[7] = "PREFIX apf:     <http://jena.hpl.hp.com/ARQ/property#>";

        $r1[8] = "PREFIX afn:     <http://jena.hpl.hp.com/ARQ/function#>";

        $r1[9] = "";

        $r2 = staticinvoke <org.apache.jena.atlas.lib.StrUtils: java.lang.String strjoinNL(java.lang.String[])>($r1);

        <org.apache.jena.fuseki.server.FusekiConfig: java.lang.String prefixes> = $r2;

        return;
    }
}
