public class groovyjarjarantlr.debug.LLkDebuggingParser extends groovyjarjarantlr.LLkParser implements groovyjarjarantlr.debug.DebuggingParser
{
    protected groovyjarjarantlr.debug.ParserEventSupport parserEventSupport;
    private boolean _notDebugMode;
    protected java.lang.String[] ruleNames;
    protected java.lang.String[] semPredNames;
    static java.lang.Class class$antlr$debug$LLkDebuggingParser;
    static java.lang.Class class$antlr$TokenStream;
    static java.lang.Class class$antlr$TokenBuffer;

    public void <init>(int)
    {
        int i0;
        groovyjarjarantlr.debug.ParserEventSupport $r1;
        groovyjarjarantlr.debug.LLkDebuggingParser r0;

        r0 := @this: groovyjarjarantlr.debug.LLkDebuggingParser;

        i0 := @parameter0: int;

        specialinvoke r0.<groovyjarjarantlr.LLkParser: void <init>(int)>(i0);

        $r1 = new groovyjarjarantlr.debug.ParserEventSupport;

        specialinvoke $r1.<groovyjarjarantlr.debug.ParserEventSupport: void <init>(java.lang.Object)>(r0);

        r0.<groovyjarjarantlr.debug.LLkDebuggingParser: groovyjarjarantlr.debug.ParserEventSupport parserEventSupport> = $r1;

        r0.<groovyjarjarantlr.debug.LLkDebuggingParser: boolean _notDebugMode> = 0;

        return;
    }

    public void <init>(groovyjarjarantlr.ParserSharedInputState, int)
    {
        groovyjarjarantlr.debug.LLkDebuggingParser r0;
        int i0;
        groovyjarjarantlr.debug.ParserEventSupport $r2;
        groovyjarjarantlr.ParserSharedInputState r1;

        r0 := @this: groovyjarjarantlr.debug.LLkDebuggingParser;

        r1 := @parameter0: groovyjarjarantlr.ParserSharedInputState;

        i0 := @parameter1: int;

        specialinvoke r0.<groovyjarjarantlr.LLkParser: void <init>(groovyjarjarantlr.ParserSharedInputState,int)>(r1, i0);

        $r2 = new groovyjarjarantlr.debug.ParserEventSupport;

        specialinvoke $r2.<groovyjarjarantlr.debug.ParserEventSupport: void <init>(java.lang.Object)>(r0);

        r0.<groovyjarjarantlr.debug.LLkDebuggingParser: groovyjarjarantlr.debug.ParserEventSupport parserEventSupport> = $r2;

        r0.<groovyjarjarantlr.debug.LLkDebuggingParser: boolean _notDebugMode> = 0;

        return;
    }

    public void <init>(groovyjarjarantlr.TokenBuffer, int)
    {
        groovyjarjarantlr.debug.LLkDebuggingParser r0;
        int i0;
        groovyjarjarantlr.debug.ParserEventSupport $r2;
        groovyjarjarantlr.TokenBuffer r1;

        r0 := @this: groovyjarjarantlr.debug.LLkDebuggingParser;

        r1 := @parameter0: groovyjarjarantlr.TokenBuffer;

        i0 := @parameter1: int;

        specialinvoke r0.<groovyjarjarantlr.LLkParser: void <init>(groovyjarjarantlr.TokenBuffer,int)>(r1, i0);

        $r2 = new groovyjarjarantlr.debug.ParserEventSupport;

        specialinvoke $r2.<groovyjarjarantlr.debug.ParserEventSupport: void <init>(java.lang.Object)>(r0);

        r0.<groovyjarjarantlr.debug.LLkDebuggingParser: groovyjarjarantlr.debug.ParserEventSupport parserEventSupport> = $r2;

        r0.<groovyjarjarantlr.debug.LLkDebuggingParser: boolean _notDebugMode> = 0;

        return;
    }

    public void <init>(groovyjarjarantlr.TokenStream, int)
    {
        groovyjarjarantlr.debug.LLkDebuggingParser r0;
        groovyjarjarantlr.TokenStream r1;
        int i0;
        groovyjarjarantlr.debug.ParserEventSupport $r2;

        r0 := @this: groovyjarjarantlr.debug.LLkDebuggingParser;

        r1 := @parameter0: groovyjarjarantlr.TokenStream;

        i0 := @parameter1: int;

        specialinvoke r0.<groovyjarjarantlr.LLkParser: void <init>(groovyjarjarantlr.TokenStream,int)>(r1, i0);

        $r2 = new groovyjarjarantlr.debug.ParserEventSupport;

        specialinvoke $r2.<groovyjarjarantlr.debug.ParserEventSupport: void <init>(java.lang.Object)>(r0);

        r0.<groovyjarjarantlr.debug.LLkDebuggingParser: groovyjarjarantlr.debug.ParserEventSupport parserEventSupport> = $r2;

        r0.<groovyjarjarantlr.debug.LLkDebuggingParser: boolean _notDebugMode> = 0;

        return;
    }

    public void addMessageListener(groovyjarjarantlr.debug.MessageListener)
    {
        groovyjarjarantlr.debug.MessageListener r1;
        groovyjarjarantlr.debug.ParserEventSupport $r2;
        groovyjarjarantlr.debug.LLkDebuggingParser r0;

        r0 := @this: groovyjarjarantlr.debug.LLkDebuggingParser;

        r1 := @parameter0: groovyjarjarantlr.debug.MessageListener;

        $r2 = r0.<groovyjarjarantlr.debug.LLkDebuggingParser: groovyjarjarantlr.debug.ParserEventSupport parserEventSupport>;

        virtualinvoke $r2.<groovyjarjarantlr.debug.ParserEventSupport: void addMessageListener(groovyjarjarantlr.debug.MessageListener)>(r1);

        return;
    }

    public void addParserListener(groovyjarjarantlr.debug.ParserListener)
    {
        groovyjarjarantlr.debug.ParserEventSupport $r2;
        groovyjarjarantlr.debug.LLkDebuggingParser r0;
        groovyjarjarantlr.debug.ParserListener r1;

        r0 := @this: groovyjarjarantlr.debug.LLkDebuggingParser;

        r1 := @parameter0: groovyjarjarantlr.debug.ParserListener;

        $r2 = r0.<groovyjarjarantlr.debug.LLkDebuggingParser: groovyjarjarantlr.debug.ParserEventSupport parserEventSupport>;

        virtualinvoke $r2.<groovyjarjarantlr.debug.ParserEventSupport: void addParserListener(groovyjarjarantlr.debug.ParserListener)>(r1);

        return;
    }

    public void addParserMatchListener(groovyjarjarantlr.debug.ParserMatchListener)
    {
        groovyjarjarantlr.debug.ParserMatchListener r1;
        groovyjarjarantlr.debug.ParserEventSupport $r2;
        groovyjarjarantlr.debug.LLkDebuggingParser r0;

        r0 := @this: groovyjarjarantlr.debug.LLkDebuggingParser;

        r1 := @parameter0: groovyjarjarantlr.debug.ParserMatchListener;

        $r2 = r0.<groovyjarjarantlr.debug.LLkDebuggingParser: groovyjarjarantlr.debug.ParserEventSupport parserEventSupport>;

        virtualinvoke $r2.<groovyjarjarantlr.debug.ParserEventSupport: void addParserMatchListener(groovyjarjarantlr.debug.ParserMatchListener)>(r1);

        return;
    }

    public void addParserTokenListener(groovyjarjarantlr.debug.ParserTokenListener)
    {
        groovyjarjarantlr.debug.ParserEventSupport $r2;
        groovyjarjarantlr.debug.LLkDebuggingParser r0;
        groovyjarjarantlr.debug.ParserTokenListener r1;

        r0 := @this: groovyjarjarantlr.debug.LLkDebuggingParser;

        r1 := @parameter0: groovyjarjarantlr.debug.ParserTokenListener;

        $r2 = r0.<groovyjarjarantlr.debug.LLkDebuggingParser: groovyjarjarantlr.debug.ParserEventSupport parserEventSupport>;

        virtualinvoke $r2.<groovyjarjarantlr.debug.ParserEventSupport: void addParserTokenListener(groovyjarjarantlr.debug.ParserTokenListener)>(r1);

        return;
    }

    public void addSemanticPredicateListener(groovyjarjarantlr.debug.SemanticPredicateListener)
    {
        groovyjarjarantlr.debug.ParserEventSupport $r2;
        groovyjarjarantlr.debug.SemanticPredicateListener r1;
        groovyjarjarantlr.debug.LLkDebuggingParser r0;

        r0 := @this: groovyjarjarantlr.debug.LLkDebuggingParser;

        r1 := @parameter0: groovyjarjarantlr.debug.SemanticPredicateListener;

        $r2 = r0.<groovyjarjarantlr.debug.LLkDebuggingParser: groovyjarjarantlr.debug.ParserEventSupport parserEventSupport>;

        virtualinvoke $r2.<groovyjarjarantlr.debug.ParserEventSupport: void addSemanticPredicateListener(groovyjarjarantlr.debug.SemanticPredicateListener)>(r1);

        return;
    }

    public void addSyntacticPredicateListener(groovyjarjarantlr.debug.SyntacticPredicateListener)
    {
        groovyjarjarantlr.debug.SyntacticPredicateListener r1;
        groovyjarjarantlr.debug.ParserEventSupport $r2;
        groovyjarjarantlr.debug.LLkDebuggingParser r0;

        r0 := @this: groovyjarjarantlr.debug.LLkDebuggingParser;

        r1 := @parameter0: groovyjarjarantlr.debug.SyntacticPredicateListener;

        $r2 = r0.<groovyjarjarantlr.debug.LLkDebuggingParser: groovyjarjarantlr.debug.ParserEventSupport parserEventSupport>;

        virtualinvoke $r2.<groovyjarjarantlr.debug.ParserEventSupport: void addSyntacticPredicateListener(groovyjarjarantlr.debug.SyntacticPredicateListener)>(r1);

        return;
    }

    public void addTraceListener(groovyjarjarantlr.debug.TraceListener)
    {
        groovyjarjarantlr.debug.ParserEventSupport $r2;
        groovyjarjarantlr.debug.LLkDebuggingParser r0;
        groovyjarjarantlr.debug.TraceListener r1;

        r0 := @this: groovyjarjarantlr.debug.LLkDebuggingParser;

        r1 := @parameter0: groovyjarjarantlr.debug.TraceListener;

        $r2 = r0.<groovyjarjarantlr.debug.LLkDebuggingParser: groovyjarjarantlr.debug.ParserEventSupport parserEventSupport>;

        virtualinvoke $r2.<groovyjarjarantlr.debug.ParserEventSupport: void addTraceListener(groovyjarjarantlr.debug.TraceListener)>(r1);

        return;
    }

    public void consume() throws groovyjarjarantlr.TokenStreamException
    {
        int $i0;
        groovyjarjarantlr.debug.ParserEventSupport $r1;
        groovyjarjarantlr.debug.LLkDebuggingParser r0;

        r0 := @this: groovyjarjarantlr.debug.LLkDebuggingParser;

        $i0 = virtualinvoke r0.<groovyjarjarantlr.debug.LLkDebuggingParser: int LA(int)>(1);

        specialinvoke r0.<groovyjarjarantlr.LLkParser: void consume()>();

        $r1 = r0.<groovyjarjarantlr.debug.LLkDebuggingParser: groovyjarjarantlr.debug.ParserEventSupport parserEventSupport>;

        virtualinvoke $r1.<groovyjarjarantlr.debug.ParserEventSupport: void fireConsume(int)>($i0);

        return;
    }

    protected void fireEnterRule(int, int)
    {
        groovyjarjarantlr.debug.LLkDebuggingParser r0;
        int i0, i1, $i2;
        groovyjarjarantlr.debug.ParserEventSupport $r2;
        boolean $z0;
        groovyjarjarantlr.ParserSharedInputState $r1;

        r0 := @this: groovyjarjarantlr.debug.LLkDebuggingParser;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = virtualinvoke r0.<groovyjarjarantlr.debug.LLkDebuggingParser: boolean isDebugMode()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<groovyjarjarantlr.debug.LLkDebuggingParser: groovyjarjarantlr.debug.ParserEventSupport parserEventSupport>;

        $r1 = r0.<groovyjarjarantlr.debug.LLkDebuggingParser: groovyjarjarantlr.ParserSharedInputState inputState>;

        $i2 = $r1.<groovyjarjarantlr.ParserSharedInputState: int guessing>;

        virtualinvoke $r2.<groovyjarjarantlr.debug.ParserEventSupport: void fireEnterRule(int,int,int)>(i0, $i2, i1);

     label1:
        return;
    }

    protected void fireExitRule(int, int)
    {
        groovyjarjarantlr.debug.LLkDebuggingParser r0;
        int i0, i1, $i2;
        groovyjarjarantlr.debug.ParserEventSupport $r2;
        boolean $z0;
        groovyjarjarantlr.ParserSharedInputState $r1;

        r0 := @this: groovyjarjarantlr.debug.LLkDebuggingParser;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = virtualinvoke r0.<groovyjarjarantlr.debug.LLkDebuggingParser: boolean isDebugMode()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<groovyjarjarantlr.debug.LLkDebuggingParser: groovyjarjarantlr.debug.ParserEventSupport parserEventSupport>;

        $r1 = r0.<groovyjarjarantlr.debug.LLkDebuggingParser: groovyjarjarantlr.ParserSharedInputState inputState>;

        $i2 = $r1.<groovyjarjarantlr.ParserSharedInputState: int guessing>;

        virtualinvoke $r2.<groovyjarjarantlr.debug.ParserEventSupport: void fireExitRule(int,int,int)>(i0, $i2, i1);

     label1:
        return;
    }

    protected boolean fireSemanticPredicateEvaluated(int, int, boolean)
    {
        groovyjarjarantlr.debug.LLkDebuggingParser r0;
        int i0, i1, $i2;
        groovyjarjarantlr.debug.ParserEventSupport $r2;
        boolean $z0, z1, $z2;
        groovyjarjarantlr.ParserSharedInputState $r1;

        r0 := @this: groovyjarjarantlr.debug.LLkDebuggingParser;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z1 := @parameter2: boolean;

        $z0 = virtualinvoke r0.<groovyjarjarantlr.debug.LLkDebuggingParser: boolean isDebugMode()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<groovyjarjarantlr.debug.LLkDebuggingParser: groovyjarjarantlr.debug.ParserEventSupport parserEventSupport>;

        $r1 = r0.<groovyjarjarantlr.debug.LLkDebuggingParser: groovyjarjarantlr.ParserSharedInputState inputState>;

        $i2 = $r1.<groovyjarjarantlr.ParserSharedInputState: int guessing>;

        $z2 = virtualinvoke $r2.<groovyjarjarantlr.debug.ParserEventSupport: boolean fireSemanticPredicateEvaluated(int,int,boolean,int)>(i0, i1, z1, $i2);

        return $z2;

     label1:
        return z1;
    }

    protected void fireSyntacticPredicateFailed()
    {
        groovyjarjarantlr.debug.LLkDebuggingParser r0;
        int $i0;
        groovyjarjarantlr.debug.ParserEventSupport $r2;
        boolean $z0;
        groovyjarjarantlr.ParserSharedInputState $r1;

        r0 := @this: groovyjarjarantlr.debug.LLkDebuggingParser;

        $z0 = virtualinvoke r0.<groovyjarjarantlr.debug.LLkDebuggingParser: boolean isDebugMode()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<groovyjarjarantlr.debug.LLkDebuggingParser: groovyjarjarantlr.debug.ParserEventSupport parserEventSupport>;

        $r1 = r0.<groovyjarjarantlr.debug.LLkDebuggingParser: groovyjarjarantlr.ParserSharedInputState inputState>;

        $i0 = $r1.<groovyjarjarantlr.ParserSharedInputState: int guessing>;

        virtualinvoke $r2.<groovyjarjarantlr.debug.ParserEventSupport: void fireSyntacticPredicateFailed(int)>($i0);

     label1:
        return;
    }

    protected void fireSyntacticPredicateStarted()
    {
        groovyjarjarantlr.debug.LLkDebuggingParser r0;
        int $i0;
        groovyjarjarantlr.debug.ParserEventSupport $r2;
        boolean $z0;
        groovyjarjarantlr.ParserSharedInputState $r1;

        r0 := @this: groovyjarjarantlr.debug.LLkDebuggingParser;

        $z0 = virtualinvoke r0.<groovyjarjarantlr.debug.LLkDebuggingParser: boolean isDebugMode()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<groovyjarjarantlr.debug.LLkDebuggingParser: groovyjarjarantlr.debug.ParserEventSupport parserEventSupport>;

        $r1 = r0.<groovyjarjarantlr.debug.LLkDebuggingParser: groovyjarjarantlr.ParserSharedInputState inputState>;

        $i0 = $r1.<groovyjarjarantlr.ParserSharedInputState: int guessing>;

        virtualinvoke $r2.<groovyjarjarantlr.debug.ParserEventSupport: void fireSyntacticPredicateStarted(int)>($i0);

     label1:
        return;
    }

    protected void fireSyntacticPredicateSucceeded()
    {
        groovyjarjarantlr.debug.LLkDebuggingParser r0;
        int $i0;
        groovyjarjarantlr.debug.ParserEventSupport $r2;
        boolean $z0;
        groovyjarjarantlr.ParserSharedInputState $r1;

        r0 := @this: groovyjarjarantlr.debug.LLkDebuggingParser;

        $z0 = virtualinvoke r0.<groovyjarjarantlr.debug.LLkDebuggingParser: boolean isDebugMode()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<groovyjarjarantlr.debug.LLkDebuggingParser: groovyjarjarantlr.debug.ParserEventSupport parserEventSupport>;

        $r1 = r0.<groovyjarjarantlr.debug.LLkDebuggingParser: groovyjarjarantlr.ParserSharedInputState inputState>;

        $i0 = $r1.<groovyjarjarantlr.ParserSharedInputState: int guessing>;

        virtualinvoke $r2.<groovyjarjarantlr.debug.ParserEventSupport: void fireSyntacticPredicateSucceeded(int)>($i0);

     label1:
        return;
    }

    public java.lang.String getRuleName(int)
    {
        groovyjarjarantlr.debug.LLkDebuggingParser r0;
        int i0;
        java.lang.String[] $r1;
        java.lang.String $r2;

        r0 := @this: groovyjarjarantlr.debug.LLkDebuggingParser;

        i0 := @parameter0: int;

        $r1 = r0.<groovyjarjarantlr.debug.LLkDebuggingParser: java.lang.String[] ruleNames>;

        $r2 = $r1[i0];

        return $r2;
    }

    public java.lang.String getSemPredName(int)
    {
        groovyjarjarantlr.debug.LLkDebuggingParser r0;
        int i0;
        java.lang.String[] $r1;
        java.lang.String $r2;

        r0 := @this: groovyjarjarantlr.debug.LLkDebuggingParser;

        i0 := @parameter0: int;

        $r1 = r0.<groovyjarjarantlr.debug.LLkDebuggingParser: java.lang.String[] semPredNames>;

        $r2 = $r1[i0];

        return $r2;
    }

    public synchronized void goToSleep()
    {
        groovyjarjarantlr.debug.LLkDebuggingParser r0;
        java.lang.InterruptedException $r1;

        r0 := @this: groovyjarjarantlr.debug.LLkDebuggingParser;

     label1:
        virtualinvoke r0.<java.lang.Object: void wait()>();

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

     label4:
        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    public boolean isDebugMode()
    {
        groovyjarjarantlr.debug.LLkDebuggingParser r0;
        boolean $z0, $z1;

        r0 := @this: groovyjarjarantlr.debug.LLkDebuggingParser;

        $z0 = r0.<groovyjarjarantlr.debug.LLkDebuggingParser: boolean _notDebugMode>;

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public boolean isGuessing()
    {
        groovyjarjarantlr.debug.LLkDebuggingParser r0;
        int $i0;
        groovyjarjarantlr.ParserSharedInputState $r1;
        boolean $z0;

        r0 := @this: groovyjarjarantlr.debug.LLkDebuggingParser;

        $r1 = r0.<groovyjarjarantlr.debug.LLkDebuggingParser: groovyjarjarantlr.ParserSharedInputState inputState>;

        $i0 = $r1.<groovyjarjarantlr.ParserSharedInputState: int guessing>;

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int LA(int) throws groovyjarjarantlr.TokenStreamException
    {
        groovyjarjarantlr.debug.LLkDebuggingParser r0;
        int i0, $i1;
        groovyjarjarantlr.debug.ParserEventSupport $r1;

        r0 := @this: groovyjarjarantlr.debug.LLkDebuggingParser;

        i0 := @parameter0: int;

        $i1 = specialinvoke r0.<groovyjarjarantlr.LLkParser: int LA(int)>(i0);

        $r1 = r0.<groovyjarjarantlr.debug.LLkDebuggingParser: groovyjarjarantlr.debug.ParserEventSupport parserEventSupport>;

        virtualinvoke $r1.<groovyjarjarantlr.debug.ParserEventSupport: void fireLA(int,int)>(i0, $i1);

        return $i1;
    }

    public void match(int) throws groovyjarjarantlr.MismatchedTokenException, groovyjarjarantlr.TokenStreamException
    {
        groovyjarjarantlr.debug.LLkDebuggingParser r0;
        int $i0, i1, $i2, $i3, $i4;
        groovyjarjarantlr.debug.ParserEventSupport $r4, $r8;
        groovyjarjarantlr.MismatchedTokenException $r5;
        java.lang.String $r2;
        groovyjarjarantlr.Token $r1;
        groovyjarjarantlr.ParserSharedInputState $r3, $r6, $r7;

        r0 := @this: groovyjarjarantlr.debug.LLkDebuggingParser;

        i1 := @parameter0: int;

        $r1 = virtualinvoke r0.<groovyjarjarantlr.debug.LLkDebuggingParser: groovyjarjarantlr.Token LT(int)>(1);

        $r2 = virtualinvoke $r1.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $i0 = virtualinvoke r0.<groovyjarjarantlr.debug.LLkDebuggingParser: int LA(int)>(1);

     label1:
        specialinvoke r0.<groovyjarjarantlr.LLkParser: void match(int)>(i1);

        $r4 = r0.<groovyjarjarantlr.debug.LLkDebuggingParser: groovyjarjarantlr.debug.ParserEventSupport parserEventSupport>;

        $r3 = r0.<groovyjarjarantlr.debug.LLkDebuggingParser: groovyjarjarantlr.ParserSharedInputState inputState>;

        $i2 = $r3.<groovyjarjarantlr.ParserSharedInputState: int guessing>;

        virtualinvoke $r4.<groovyjarjarantlr.debug.ParserEventSupport: void fireMatch(int,java.lang.String,int)>(i1, $r2, $i2);

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        $r6 = r0.<groovyjarjarantlr.debug.LLkDebuggingParser: groovyjarjarantlr.ParserSharedInputState inputState>;

        $i3 = $r6.<groovyjarjarantlr.ParserSharedInputState: int guessing>;

        if $i3 != 0 goto label4;

        $r8 = r0.<groovyjarjarantlr.debug.LLkDebuggingParser: groovyjarjarantlr.debug.ParserEventSupport parserEventSupport>;

        $r7 = r0.<groovyjarjarantlr.debug.LLkDebuggingParser: groovyjarjarantlr.ParserSharedInputState inputState>;

        $i4 = $r7.<groovyjarjarantlr.ParserSharedInputState: int guessing>;

        virtualinvoke $r8.<groovyjarjarantlr.debug.ParserEventSupport: void fireMismatch(int,int,java.lang.String,int)>($i0, i1, $r2, $i4);

     label4:
        throw $r5;

     label5:
        return;

        catch groovyjarjarantlr.MismatchedTokenException from label1 to label2 with label3;
    }

    public void match(groovyjarjarantlr.collections.impl.BitSet) throws groovyjarjarantlr.MismatchedTokenException, groovyjarjarantlr.TokenStreamException
    {
        groovyjarjarantlr.collections.impl.BitSet r3;
        groovyjarjarantlr.debug.LLkDebuggingParser r0;
        int $i0, $i1, $i2, $i3;
        groovyjarjarantlr.debug.ParserEventSupport $r5, $r9;
        groovyjarjarantlr.MismatchedTokenException $r6;
        java.lang.String $r2;
        groovyjarjarantlr.Token $r1;
        groovyjarjarantlr.ParserSharedInputState $r4, $r7, $r8;

        r0 := @this: groovyjarjarantlr.debug.LLkDebuggingParser;

        r3 := @parameter0: groovyjarjarantlr.collections.impl.BitSet;

        $r1 = virtualinvoke r0.<groovyjarjarantlr.debug.LLkDebuggingParser: groovyjarjarantlr.Token LT(int)>(1);

        $r2 = virtualinvoke $r1.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $i0 = virtualinvoke r0.<groovyjarjarantlr.debug.LLkDebuggingParser: int LA(int)>(1);

     label1:
        specialinvoke r0.<groovyjarjarantlr.LLkParser: void match(groovyjarjarantlr.collections.impl.BitSet)>(r3);

        $r5 = r0.<groovyjarjarantlr.debug.LLkDebuggingParser: groovyjarjarantlr.debug.ParserEventSupport parserEventSupport>;

        $r4 = r0.<groovyjarjarantlr.debug.LLkDebuggingParser: groovyjarjarantlr.ParserSharedInputState inputState>;

        $i1 = $r4.<groovyjarjarantlr.ParserSharedInputState: int guessing>;

        virtualinvoke $r5.<groovyjarjarantlr.debug.ParserEventSupport: void fireMatch(int,groovyjarjarantlr.collections.impl.BitSet,java.lang.String,int)>($i0, r3, $r2, $i1);

     label2:
        goto label5;

     label3:
        $r6 := @caughtexception;

        $r7 = r0.<groovyjarjarantlr.debug.LLkDebuggingParser: groovyjarjarantlr.ParserSharedInputState inputState>;

        $i2 = $r7.<groovyjarjarantlr.ParserSharedInputState: int guessing>;

        if $i2 != 0 goto label4;

        $r9 = r0.<groovyjarjarantlr.debug.LLkDebuggingParser: groovyjarjarantlr.debug.ParserEventSupport parserEventSupport>;

        $r8 = r0.<groovyjarjarantlr.debug.LLkDebuggingParser: groovyjarjarantlr.ParserSharedInputState inputState>;

        $i3 = $r8.<groovyjarjarantlr.ParserSharedInputState: int guessing>;

        virtualinvoke $r9.<groovyjarjarantlr.debug.ParserEventSupport: void fireMismatch(int,groovyjarjarantlr.collections.impl.BitSet,java.lang.String,int)>($i0, r3, $r2, $i3);

     label4:
        throw $r6;

     label5:
        return;

        catch groovyjarjarantlr.MismatchedTokenException from label1 to label2 with label3;
    }

    public void matchNot(int) throws groovyjarjarantlr.MismatchedTokenException, groovyjarjarantlr.TokenStreamException
    {
        groovyjarjarantlr.debug.LLkDebuggingParser r0;
        int $i0, i1, $i2, $i3, $i4;
        groovyjarjarantlr.debug.ParserEventSupport $r4, $r8;
        groovyjarjarantlr.MismatchedTokenException $r5;
        java.lang.String $r2;
        groovyjarjarantlr.Token $r1;
        groovyjarjarantlr.ParserSharedInputState $r3, $r6, $r7;

        r0 := @this: groovyjarjarantlr.debug.LLkDebuggingParser;

        i1 := @parameter0: int;

        $r1 = virtualinvoke r0.<groovyjarjarantlr.debug.LLkDebuggingParser: groovyjarjarantlr.Token LT(int)>(1);

        $r2 = virtualinvoke $r1.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $i0 = virtualinvoke r0.<groovyjarjarantlr.debug.LLkDebuggingParser: int LA(int)>(1);

     label1:
        specialinvoke r0.<groovyjarjarantlr.LLkParser: void matchNot(int)>(i1);

        $r4 = r0.<groovyjarjarantlr.debug.LLkDebuggingParser: groovyjarjarantlr.debug.ParserEventSupport parserEventSupport>;

        $r3 = r0.<groovyjarjarantlr.debug.LLkDebuggingParser: groovyjarjarantlr.ParserSharedInputState inputState>;

        $i2 = $r3.<groovyjarjarantlr.ParserSharedInputState: int guessing>;

        virtualinvoke $r4.<groovyjarjarantlr.debug.ParserEventSupport: void fireMatchNot(int,int,java.lang.String,int)>($i0, i1, $r2, $i2);

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        $r6 = r0.<groovyjarjarantlr.debug.LLkDebuggingParser: groovyjarjarantlr.ParserSharedInputState inputState>;

        $i3 = $r6.<groovyjarjarantlr.ParserSharedInputState: int guessing>;

        if $i3 != 0 goto label4;

        $r8 = r0.<groovyjarjarantlr.debug.LLkDebuggingParser: groovyjarjarantlr.debug.ParserEventSupport parserEventSupport>;

        $r7 = r0.<groovyjarjarantlr.debug.LLkDebuggingParser: groovyjarjarantlr.ParserSharedInputState inputState>;

        $i4 = $r7.<groovyjarjarantlr.ParserSharedInputState: int guessing>;

        virtualinvoke $r8.<groovyjarjarantlr.debug.ParserEventSupport: void fireMismatchNot(int,int,java.lang.String,int)>($i0, i1, $r2, $i4);

     label4:
        throw $r5;

     label5:
        return;

        catch groovyjarjarantlr.MismatchedTokenException from label1 to label2 with label3;
    }

    public void removeMessageListener(groovyjarjarantlr.debug.MessageListener)
    {
        groovyjarjarantlr.debug.MessageListener r1;
        groovyjarjarantlr.debug.ParserEventSupport $r2;
        groovyjarjarantlr.debug.LLkDebuggingParser r0;

        r0 := @this: groovyjarjarantlr.debug.LLkDebuggingParser;

        r1 := @parameter0: groovyjarjarantlr.debug.MessageListener;

        $r2 = r0.<groovyjarjarantlr.debug.LLkDebuggingParser: groovyjarjarantlr.debug.ParserEventSupport parserEventSupport>;

        virtualinvoke $r2.<groovyjarjarantlr.debug.ParserEventSupport: void removeMessageListener(groovyjarjarantlr.debug.MessageListener)>(r1);

        return;
    }

    public void removeParserListener(groovyjarjarantlr.debug.ParserListener)
    {
        groovyjarjarantlr.debug.ParserEventSupport $r2;
        groovyjarjarantlr.debug.LLkDebuggingParser r0;
        groovyjarjarantlr.debug.ParserListener r1;

        r0 := @this: groovyjarjarantlr.debug.LLkDebuggingParser;

        r1 := @parameter0: groovyjarjarantlr.debug.ParserListener;

        $r2 = r0.<groovyjarjarantlr.debug.LLkDebuggingParser: groovyjarjarantlr.debug.ParserEventSupport parserEventSupport>;

        virtualinvoke $r2.<groovyjarjarantlr.debug.ParserEventSupport: void removeParserListener(groovyjarjarantlr.debug.ParserListener)>(r1);

        return;
    }

    public void removeParserMatchListener(groovyjarjarantlr.debug.ParserMatchListener)
    {
        groovyjarjarantlr.debug.ParserMatchListener r1;
        groovyjarjarantlr.debug.ParserEventSupport $r2;
        groovyjarjarantlr.debug.LLkDebuggingParser r0;

        r0 := @this: groovyjarjarantlr.debug.LLkDebuggingParser;

        r1 := @parameter0: groovyjarjarantlr.debug.ParserMatchListener;

        $r2 = r0.<groovyjarjarantlr.debug.LLkDebuggingParser: groovyjarjarantlr.debug.ParserEventSupport parserEventSupport>;

        virtualinvoke $r2.<groovyjarjarantlr.debug.ParserEventSupport: void removeParserMatchListener(groovyjarjarantlr.debug.ParserMatchListener)>(r1);

        return;
    }

    public void removeParserTokenListener(groovyjarjarantlr.debug.ParserTokenListener)
    {
        groovyjarjarantlr.debug.ParserEventSupport $r2;
        groovyjarjarantlr.debug.LLkDebuggingParser r0;
        groovyjarjarantlr.debug.ParserTokenListener r1;

        r0 := @this: groovyjarjarantlr.debug.LLkDebuggingParser;

        r1 := @parameter0: groovyjarjarantlr.debug.ParserTokenListener;

        $r2 = r0.<groovyjarjarantlr.debug.LLkDebuggingParser: groovyjarjarantlr.debug.ParserEventSupport parserEventSupport>;

        virtualinvoke $r2.<groovyjarjarantlr.debug.ParserEventSupport: void removeParserTokenListener(groovyjarjarantlr.debug.ParserTokenListener)>(r1);

        return;
    }

    public void removeSemanticPredicateListener(groovyjarjarantlr.debug.SemanticPredicateListener)
    {
        groovyjarjarantlr.debug.ParserEventSupport $r2;
        groovyjarjarantlr.debug.SemanticPredicateListener r1;
        groovyjarjarantlr.debug.LLkDebuggingParser r0;

        r0 := @this: groovyjarjarantlr.debug.LLkDebuggingParser;

        r1 := @parameter0: groovyjarjarantlr.debug.SemanticPredicateListener;

        $r2 = r0.<groovyjarjarantlr.debug.LLkDebuggingParser: groovyjarjarantlr.debug.ParserEventSupport parserEventSupport>;

        virtualinvoke $r2.<groovyjarjarantlr.debug.ParserEventSupport: void removeSemanticPredicateListener(groovyjarjarantlr.debug.SemanticPredicateListener)>(r1);

        return;
    }

    public void removeSyntacticPredicateListener(groovyjarjarantlr.debug.SyntacticPredicateListener)
    {
        groovyjarjarantlr.debug.SyntacticPredicateListener r1;
        groovyjarjarantlr.debug.ParserEventSupport $r2;
        groovyjarjarantlr.debug.LLkDebuggingParser r0;

        r0 := @this: groovyjarjarantlr.debug.LLkDebuggingParser;

        r1 := @parameter0: groovyjarjarantlr.debug.SyntacticPredicateListener;

        $r2 = r0.<groovyjarjarantlr.debug.LLkDebuggingParser: groovyjarjarantlr.debug.ParserEventSupport parserEventSupport>;

        virtualinvoke $r2.<groovyjarjarantlr.debug.ParserEventSupport: void removeSyntacticPredicateListener(groovyjarjarantlr.debug.SyntacticPredicateListener)>(r1);

        return;
    }

    public void removeTraceListener(groovyjarjarantlr.debug.TraceListener)
    {
        groovyjarjarantlr.debug.ParserEventSupport $r2;
        groovyjarjarantlr.debug.LLkDebuggingParser r0;
        groovyjarjarantlr.debug.TraceListener r1;

        r0 := @this: groovyjarjarantlr.debug.LLkDebuggingParser;

        r1 := @parameter0: groovyjarjarantlr.debug.TraceListener;

        $r2 = r0.<groovyjarjarantlr.debug.LLkDebuggingParser: groovyjarjarantlr.debug.ParserEventSupport parserEventSupport>;

        virtualinvoke $r2.<groovyjarjarantlr.debug.ParserEventSupport: void removeTraceListener(groovyjarjarantlr.debug.TraceListener)>(r1);

        return;
    }

    public void reportError(groovyjarjarantlr.RecognitionException)
    {
        groovyjarjarantlr.debug.ParserEventSupport $r2;
        groovyjarjarantlr.debug.LLkDebuggingParser r0;
        groovyjarjarantlr.RecognitionException r1;

        r0 := @this: groovyjarjarantlr.debug.LLkDebuggingParser;

        r1 := @parameter0: groovyjarjarantlr.RecognitionException;

        $r2 = r0.<groovyjarjarantlr.debug.LLkDebuggingParser: groovyjarjarantlr.debug.ParserEventSupport parserEventSupport>;

        virtualinvoke $r2.<groovyjarjarantlr.debug.ParserEventSupport: void fireReportError(java.lang.Exception)>(r1);

        specialinvoke r0.<groovyjarjarantlr.LLkParser: void reportError(groovyjarjarantlr.RecognitionException)>(r1);

        return;
    }

    public void reportError(java.lang.String)
    {
        groovyjarjarantlr.debug.ParserEventSupport $r2;
        groovyjarjarantlr.debug.LLkDebuggingParser r0;
        java.lang.String r1;

        r0 := @this: groovyjarjarantlr.debug.LLkDebuggingParser;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<groovyjarjarantlr.debug.LLkDebuggingParser: groovyjarjarantlr.debug.ParserEventSupport parserEventSupport>;

        virtualinvoke $r2.<groovyjarjarantlr.debug.ParserEventSupport: void fireReportError(java.lang.String)>(r1);

        specialinvoke r0.<groovyjarjarantlr.LLkParser: void reportError(java.lang.String)>(r1);

        return;
    }

    public void reportWarning(java.lang.String)
    {
        groovyjarjarantlr.debug.ParserEventSupport $r2;
        groovyjarjarantlr.debug.LLkDebuggingParser r0;
        java.lang.String r1;

        r0 := @this: groovyjarjarantlr.debug.LLkDebuggingParser;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<groovyjarjarantlr.debug.LLkDebuggingParser: groovyjarjarantlr.debug.ParserEventSupport parserEventSupport>;

        virtualinvoke $r2.<groovyjarjarantlr.debug.ParserEventSupport: void fireReportWarning(java.lang.String)>(r1);

        specialinvoke r0.<groovyjarjarantlr.LLkParser: void reportWarning(java.lang.String)>(r1);

        return;
    }

    public void setDebugMode(boolean)
    {
        groovyjarjarantlr.debug.LLkDebuggingParser r0;
        boolean z0, $z1;

        r0 := @this: groovyjarjarantlr.debug.LLkDebuggingParser;

        z0 := @parameter0: boolean;

        if z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        r0.<groovyjarjarantlr.debug.LLkDebuggingParser: boolean _notDebugMode> = $z1;

        return;
    }

    public void setupDebugging(groovyjarjarantlr.TokenBuffer)
    {
        groovyjarjarantlr.debug.LLkDebuggingParser r0;
        groovyjarjarantlr.TokenBuffer r1;

        r0 := @this: groovyjarjarantlr.debug.LLkDebuggingParser;

        r1 := @parameter0: groovyjarjarantlr.TokenBuffer;

        virtualinvoke r0.<groovyjarjarantlr.debug.LLkDebuggingParser: void setupDebugging(groovyjarjarantlr.TokenStream,groovyjarjarantlr.TokenBuffer)>(null, r1);

        return;
    }

    public void setupDebugging(groovyjarjarantlr.TokenStream)
    {
        groovyjarjarantlr.debug.LLkDebuggingParser r0;
        groovyjarjarantlr.TokenStream r1;

        r0 := @this: groovyjarjarantlr.debug.LLkDebuggingParser;

        r1 := @parameter0: groovyjarjarantlr.TokenStream;

        virtualinvoke r0.<groovyjarjarantlr.debug.LLkDebuggingParser: void setupDebugging(groovyjarjarantlr.TokenStream,groovyjarjarantlr.TokenBuffer)>(r1, null);

        return;
    }

    protected void setupDebugging(groovyjarjarantlr.TokenStream, groovyjarjarantlr.TokenBuffer)
    {
        java.lang.Object[] $r7;
        java.lang.reflect.Constructor $r6;
        groovyjarjarantlr.TokenBuffer r9;
        groovyjarjarantlr.debug.LLkDebuggingParser r0;
        java.lang.StringBuffer $r11, $r13, $r14;
        java.lang.String $r15;
        java.io.PrintStream $r12, $r16, $r18;
        java.lang.Class[] $r2;
        java.lang.Exception $r10;
        groovyjarjarantlr.TokenStream r8;
        java.lang.Class $r1, $r3, $r4, $r5, $r19, $r20, $r21;
        java.lang.ClassNotFoundException $r17;

        r0 := @this: groovyjarjarantlr.debug.LLkDebuggingParser;

        r8 := @parameter0: groovyjarjarantlr.TokenStream;

        r9 := @parameter1: groovyjarjarantlr.TokenBuffer;

        virtualinvoke r0.<groovyjarjarantlr.debug.LLkDebuggingParser: void setDebugMode(boolean)>(1);

     label01:
        staticinvoke <groovyjarjarantlr.Utils: java.lang.Class loadClass(java.lang.String)>("javax.swing.JButton");

     label02:
        goto label04;

     label03:
        $r17 := @caughtexception;

        $r18 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r18.<java.io.PrintStream: void println(java.lang.String)>("Swing is required to use ParseView, but is not present in your CLASSPATH");

        staticinvoke <java.lang.System: void exit(int)>(1);

     label04:
        $r1 = staticinvoke <groovyjarjarantlr.Utils: java.lang.Class loadClass(java.lang.String)>("groovyjarjarantlr.parseview.ParseView");

        $r2 = newarray (java.lang.Class)[3];

        $r3 = <groovyjarjarantlr.debug.LLkDebuggingParser: java.lang.Class class$antlr$debug$LLkDebuggingParser>;

        if $r3 != null goto label05;

        $r19 = staticinvoke <groovyjarjarantlr.debug.LLkDebuggingParser: java.lang.Class class$(java.lang.String)>("groovyjarjarantlr.debug.LLkDebuggingParser");

        <groovyjarjarantlr.debug.LLkDebuggingParser: java.lang.Class class$antlr$debug$LLkDebuggingParser> = $r19;

        goto label06;

     label05:
        $r19 = <groovyjarjarantlr.debug.LLkDebuggingParser: java.lang.Class class$antlr$debug$LLkDebuggingParser>;

     label06:
        $r2[0] = $r19;

        $r4 = <groovyjarjarantlr.debug.LLkDebuggingParser: java.lang.Class class$antlr$TokenStream>;

        if $r4 != null goto label07;

        $r20 = staticinvoke <groovyjarjarantlr.debug.LLkDebuggingParser: java.lang.Class class$(java.lang.String)>("groovyjarjarantlr.TokenStream");

        <groovyjarjarantlr.debug.LLkDebuggingParser: java.lang.Class class$antlr$TokenStream> = $r20;

        goto label08;

     label07:
        $r20 = <groovyjarjarantlr.debug.LLkDebuggingParser: java.lang.Class class$antlr$TokenStream>;

     label08:
        $r2[1] = $r20;

        $r5 = <groovyjarjarantlr.debug.LLkDebuggingParser: java.lang.Class class$antlr$TokenBuffer>;

        if $r5 != null goto label09;

        $r21 = staticinvoke <groovyjarjarantlr.debug.LLkDebuggingParser: java.lang.Class class$(java.lang.String)>("groovyjarjarantlr.TokenBuffer");

        <groovyjarjarantlr.debug.LLkDebuggingParser: java.lang.Class class$antlr$TokenBuffer> = $r21;

        goto label10;

     label09:
        $r21 = <groovyjarjarantlr.debug.LLkDebuggingParser: java.lang.Class class$antlr$TokenBuffer>;

     label10:
        $r2[2] = $r21;

        $r6 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r2);

        $r7 = newarray (java.lang.Object)[3];

        $r7[0] = r0;

        $r7[1] = r8;

        $r7[2] = r9;

        virtualinvoke $r6.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r7);

     label11:
        goto label13;

     label12:
        $r10 := @caughtexception;

        $r12 = <java.lang.System: java.io.PrintStream err>;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Error initializing ParseView: ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r10);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.String)>($r15);

        $r16 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r16.<java.io.PrintStream: void println(java.lang.String)>("Please report this to Scott Stanchfield, thetick@magelang.com");

        staticinvoke <java.lang.System: void exit(int)>(1);

     label13:
        return;

        catch java.lang.ClassNotFoundException from label01 to label02 with label03;
        catch java.lang.Exception from label01 to label11 with label12;
    }

    public synchronized void wakeUp()
    {
        groovyjarjarantlr.debug.LLkDebuggingParser r0;

        r0 := @this: groovyjarjarantlr.debug.LLkDebuggingParser;

        virtualinvoke r0.<java.lang.Object: void notify()>();

        return;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }
}
