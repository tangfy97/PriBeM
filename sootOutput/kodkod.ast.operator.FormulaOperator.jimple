public enum class kodkod.ast.operator.FormulaOperator extends java.lang.Enum
{
    public static final enum kodkod.ast.operator.FormulaOperator AND;
    public static final enum kodkod.ast.operator.FormulaOperator OR;
    public static final enum kodkod.ast.operator.FormulaOperator IFF;
    public static final enum kodkod.ast.operator.FormulaOperator IMPLIES;
    static final int nary;
    private static final kodkod.ast.operator.FormulaOperator[] ENUM$VALUES;

    static void <clinit>()
    {
        kodkod.ast.operator.FormulaOperator $r5, $r6, $r7, $r8, $r9, $r10;
        int $i0, $i1, $i2, $i3, $i4;
        kodkod.ast.operator.FormulaOperator[] $r4;
        kodkod.ast.operator.FormulaOperator$1 $r0;
        kodkod.ast.operator.FormulaOperator$2 $r1;
        kodkod.ast.operator.FormulaOperator$3 $r2;
        kodkod.ast.operator.FormulaOperator$4 $r3;

        $r0 = new kodkod.ast.operator.FormulaOperator$1;

        specialinvoke $r0.<kodkod.ast.operator.FormulaOperator$1: void <init>(java.lang.String,int)>("AND", 0);

        <kodkod.ast.operator.FormulaOperator: kodkod.ast.operator.FormulaOperator AND> = $r0;

        $r1 = new kodkod.ast.operator.FormulaOperator$2;

        specialinvoke $r1.<kodkod.ast.operator.FormulaOperator$2: void <init>(java.lang.String,int)>("OR", 1);

        <kodkod.ast.operator.FormulaOperator: kodkod.ast.operator.FormulaOperator OR> = $r1;

        $r2 = new kodkod.ast.operator.FormulaOperator$3;

        specialinvoke $r2.<kodkod.ast.operator.FormulaOperator$3: void <init>(java.lang.String,int)>("IFF", 2);

        <kodkod.ast.operator.FormulaOperator: kodkod.ast.operator.FormulaOperator IFF> = $r2;

        $r3 = new kodkod.ast.operator.FormulaOperator$4;

        specialinvoke $r3.<kodkod.ast.operator.FormulaOperator$4: void <init>(java.lang.String,int)>("IMPLIES", 3);

        <kodkod.ast.operator.FormulaOperator: kodkod.ast.operator.FormulaOperator IMPLIES> = $r3;

        $r4 = newarray (kodkod.ast.operator.FormulaOperator)[4];

        $r5 = <kodkod.ast.operator.FormulaOperator: kodkod.ast.operator.FormulaOperator AND>;

        $r4[0] = $r5;

        $r6 = <kodkod.ast.operator.FormulaOperator: kodkod.ast.operator.FormulaOperator OR>;

        $r4[1] = $r6;

        $r7 = <kodkod.ast.operator.FormulaOperator: kodkod.ast.operator.FormulaOperator IFF>;

        $r4[2] = $r7;

        $r8 = <kodkod.ast.operator.FormulaOperator: kodkod.ast.operator.FormulaOperator IMPLIES>;

        $r4[3] = $r8;

        <kodkod.ast.operator.FormulaOperator: kodkod.ast.operator.FormulaOperator[] ENUM$VALUES> = $r4;

        $r9 = <kodkod.ast.operator.FormulaOperator: kodkod.ast.operator.FormulaOperator AND>;

        $i0 = virtualinvoke $r9.<kodkod.ast.operator.FormulaOperator: int ordinal()>();

        $i1 = 1 << $i0;

        $r10 = <kodkod.ast.operator.FormulaOperator: kodkod.ast.operator.FormulaOperator OR>;

        $i2 = virtualinvoke $r10.<kodkod.ast.operator.FormulaOperator: int ordinal()>();

        $i3 = 1 << $i2;

        $i4 = $i1 | $i3;

        <kodkod.ast.operator.FormulaOperator: int nary> = $i4;

        return;
    }

    private void <init>(java.lang.String, int)
    {
        int i0;
        java.lang.String r1;
        kodkod.ast.operator.FormulaOperator r0;

        r0 := @this: kodkod.ast.operator.FormulaOperator;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    public final boolean nary()
    {
        kodkod.ast.operator.FormulaOperator r0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: kodkod.ast.operator.FormulaOperator;

        $i0 = <kodkod.ast.operator.FormulaOperator: int nary>;

        $i1 = virtualinvoke r0.<kodkod.ast.operator.FormulaOperator: int ordinal()>();

        $i2 = 1 << $i1;

        $i3 = $i0 & $i2;

        if $i3 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static kodkod.ast.operator.FormulaOperator[] values()
    {
        kodkod.ast.operator.FormulaOperator[] $r0, $r1;
        int $i0;

        $r0 = <kodkod.ast.operator.FormulaOperator: kodkod.ast.operator.FormulaOperator[] ENUM$VALUES>;

        $i0 = lengthof $r0;

        $r1 = newarray (kodkod.ast.operator.FormulaOperator)[$i0];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, $r1, 0, $i0);

        return $r1;
    }

    public static kodkod.ast.operator.FormulaOperator valueOf(java.lang.String)
    {
        kodkod.ast.operator.FormulaOperator[] $r0;
        java.lang.IllegalArgumentException $r5;
        kodkod.ast.operator.FormulaOperator $r2;
        int i0, $i2;
        java.lang.String r1, $r3;
        boolean $z0;

        r1 := @parameter0: java.lang.String;

        $r0 = <kodkod.ast.operator.FormulaOperator: kodkod.ast.operator.FormulaOperator[] ENUM$VALUES>;

        i0 = lengthof $r0;

        goto label2;

     label1:
        $r2 = $r0[i0];

        $r3 = virtualinvoke $r2.<kodkod.ast.operator.FormulaOperator: java.lang.String name()>();

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label2;

        return $r2;

     label2:
        $i2 = (int) -1;

        i0 = i0 + $i2;

        if i0 >= 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r1);

        throw $r5;
    }

    void <init>(java.lang.String, int, kodkod.ast.operator.FormulaOperator)
    {
        kodkod.ast.operator.FormulaOperator r0, r2;
        int i0;
        java.lang.String r1;

        r0 := @this: kodkod.ast.operator.FormulaOperator;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: kodkod.ast.operator.FormulaOperator;

        specialinvoke r0.<kodkod.ast.operator.FormulaOperator: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }
}
