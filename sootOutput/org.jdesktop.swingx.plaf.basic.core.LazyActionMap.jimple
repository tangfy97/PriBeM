public class org.jdesktop.swingx.plaf.basic.core.LazyActionMap extends javax.swing.plaf.ActionMapUIResource
{
    private transient java.lang.Object _loader;
    static final boolean $assertionsDisabled;

    public static void installLazyActionMap(javax.swing.JComponent, java.lang.Class, java.lang.String)
    {
        javax.swing.JComponent r2;
        javax.swing.UIDefaults $r5;
        org.jdesktop.swingx.plaf.basic.core.LazyActionMap $r3;
        java.lang.Object $r1;
        java.lang.Class r4;
        java.lang.String r0;
        javax.swing.ActionMap r6;

        r2 := @parameter0: javax.swing.JComponent;

        r4 := @parameter1: java.lang.Class;

        r0 := @parameter2: java.lang.String;

        $r1 = staticinvoke <javax.swing.UIManager: java.lang.Object get(java.lang.Object)>(r0);

        r6 = (javax.swing.ActionMap) $r1;

        if r6 != null goto label1;

        $r3 = new org.jdesktop.swingx.plaf.basic.core.LazyActionMap;

        specialinvoke $r3.<org.jdesktop.swingx.plaf.basic.core.LazyActionMap: void <init>(java.lang.Class)>(r4);

        r6 = $r3;

        $r5 = staticinvoke <javax.swing.UIManager: javax.swing.UIDefaults getLookAndFeelDefaults()>();

        virtualinvoke $r5.<javax.swing.UIDefaults: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r3);

     label1:
        staticinvoke <javax.swing.SwingUtilities: void replaceUIActionMap(javax.swing.JComponent,javax.swing.ActionMap)>(r2, r6);

        return;
    }

    static javax.swing.ActionMap getActionMap(java.lang.Class, java.lang.String)
    {
        javax.swing.UIDefaults $r4;
        org.jdesktop.swingx.plaf.basic.core.LazyActionMap $r2;
        java.lang.Object $r1;
        java.lang.Class r3;
        java.lang.String r0;
        javax.swing.ActionMap r5;

        r3 := @parameter0: java.lang.Class;

        r0 := @parameter1: java.lang.String;

        $r1 = staticinvoke <javax.swing.UIManager: java.lang.Object get(java.lang.Object)>(r0);

        r5 = (javax.swing.ActionMap) $r1;

        if r5 != null goto label1;

        $r2 = new org.jdesktop.swingx.plaf.basic.core.LazyActionMap;

        specialinvoke $r2.<org.jdesktop.swingx.plaf.basic.core.LazyActionMap: void <init>(java.lang.Class)>(r3);

        r5 = $r2;

        $r4 = staticinvoke <javax.swing.UIManager: javax.swing.UIDefaults getLookAndFeelDefaults()>();

        virtualinvoke $r4.<javax.swing.UIDefaults: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r2);

     label1:
        return r5;
    }

    private void <init>(java.lang.Class)
    {
        org.jdesktop.swingx.plaf.basic.core.LazyActionMap r0;
        java.lang.Class r1;

        r0 := @this: org.jdesktop.swingx.plaf.basic.core.LazyActionMap;

        r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<javax.swing.plaf.ActionMapUIResource: void <init>()>();

        r0.<org.jdesktop.swingx.plaf.basic.core.LazyActionMap: java.lang.Object _loader> = r1;

        return;
    }

    public void put(javax.swing.Action)
    {
        org.jdesktop.swingx.plaf.basic.core.LazyActionMap r0;
        java.lang.Object $r2;
        javax.swing.Action r1;

        r0 := @this: org.jdesktop.swingx.plaf.basic.core.LazyActionMap;

        r1 := @parameter0: javax.swing.Action;

        $r2 = interfaceinvoke r1.<javax.swing.Action: java.lang.Object getValue(java.lang.String)>("Name");

        virtualinvoke r0.<org.jdesktop.swingx.plaf.basic.core.LazyActionMap: void put(java.lang.Object,javax.swing.Action)>($r2, r1);

        return;
    }

    public void put(java.lang.Object, javax.swing.Action)
    {
        org.jdesktop.swingx.plaf.basic.core.LazyActionMap r0;
        java.lang.Object r1;
        javax.swing.Action r2;

        r0 := @this: org.jdesktop.swingx.plaf.basic.core.LazyActionMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: javax.swing.Action;

        specialinvoke r0.<org.jdesktop.swingx.plaf.basic.core.LazyActionMap: void loadIfNecessary()>();

        specialinvoke r0.<javax.swing.plaf.ActionMapUIResource: void put(java.lang.Object,javax.swing.Action)>(r1, r2);

        return;
    }

    public javax.swing.Action get(java.lang.Object)
    {
        org.jdesktop.swingx.plaf.basic.core.LazyActionMap r0;
        java.lang.Object r1;
        javax.swing.Action $r2;

        r0 := @this: org.jdesktop.swingx.plaf.basic.core.LazyActionMap;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<org.jdesktop.swingx.plaf.basic.core.LazyActionMap: void loadIfNecessary()>();

        $r2 = specialinvoke r0.<javax.swing.plaf.ActionMapUIResource: javax.swing.Action get(java.lang.Object)>(r1);

        return $r2;
    }

    public void remove(java.lang.Object)
    {
        org.jdesktop.swingx.plaf.basic.core.LazyActionMap r0;
        java.lang.Object r1;

        r0 := @this: org.jdesktop.swingx.plaf.basic.core.LazyActionMap;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<org.jdesktop.swingx.plaf.basic.core.LazyActionMap: void loadIfNecessary()>();

        specialinvoke r0.<javax.swing.plaf.ActionMapUIResource: void remove(java.lang.Object)>(r1);

        return;
    }

    public void clear()
    {
        org.jdesktop.swingx.plaf.basic.core.LazyActionMap r0;

        r0 := @this: org.jdesktop.swingx.plaf.basic.core.LazyActionMap;

        specialinvoke r0.<org.jdesktop.swingx.plaf.basic.core.LazyActionMap: void loadIfNecessary()>();

        specialinvoke r0.<javax.swing.plaf.ActionMapUIResource: void clear()>();

        return;
    }

    public java.lang.Object[] keys()
    {
        org.jdesktop.swingx.plaf.basic.core.LazyActionMap r0;
        java.lang.Object[] $r1;

        r0 := @this: org.jdesktop.swingx.plaf.basic.core.LazyActionMap;

        specialinvoke r0.<org.jdesktop.swingx.plaf.basic.core.LazyActionMap: void loadIfNecessary()>();

        $r1 = specialinvoke r0.<javax.swing.plaf.ActionMapUIResource: java.lang.Object[] keys()>();

        return $r1;
    }

    public int size()
    {
        int $i0;
        org.jdesktop.swingx.plaf.basic.core.LazyActionMap r0;

        r0 := @this: org.jdesktop.swingx.plaf.basic.core.LazyActionMap;

        specialinvoke r0.<org.jdesktop.swingx.plaf.basic.core.LazyActionMap: void loadIfNecessary()>();

        $i0 = specialinvoke r0.<javax.swing.plaf.ActionMapUIResource: int size()>();

        return $i0;
    }

    public java.lang.Object[] allKeys()
    {
        org.jdesktop.swingx.plaf.basic.core.LazyActionMap r0;
        java.lang.Object[] $r1;

        r0 := @this: org.jdesktop.swingx.plaf.basic.core.LazyActionMap;

        specialinvoke r0.<org.jdesktop.swingx.plaf.basic.core.LazyActionMap: void loadIfNecessary()>();

        $r1 = specialinvoke r0.<javax.swing.plaf.ActionMapUIResource: java.lang.Object[] allKeys()>();

        return $r1;
    }

    public void setParent(javax.swing.ActionMap)
    {
        org.jdesktop.swingx.plaf.basic.core.LazyActionMap r0;
        javax.swing.ActionMap r1;

        r0 := @this: org.jdesktop.swingx.plaf.basic.core.LazyActionMap;

        r1 := @parameter0: javax.swing.ActionMap;

        specialinvoke r0.<org.jdesktop.swingx.plaf.basic.core.LazyActionMap: void loadIfNecessary()>();

        specialinvoke r0.<javax.swing.plaf.ActionMapUIResource: void setParent(javax.swing.ActionMap)>(r1);

        return;
    }

    private void loadIfNecessary()
    {
        java.lang.NoSuchMethodException $r25;
        java.lang.reflect.Method $r5;
        boolean $z0, $z1, $z2, $z3;
        java.lang.IllegalAccessException $r19;
        org.jdesktop.swingx.plaf.basic.core.LazyActionMap r0;
        java.lang.reflect.InvocationTargetException $r13;
        java.lang.StringBuilder $r9, $r10, $r11, $r15, $r16, $r17, $r21, $r22, $r23, $r27, $r28, $r29;
        java.lang.Object[] $r6;
        java.lang.AssertionError $r8, $r14, $r20, $r26;
        java.lang.String $r12, $r18, $r24, $r30;
        java.lang.Class[] $r4;
        java.lang.IllegalArgumentException $r7;
        java.lang.Object $r1, r2;
        java.lang.Class r3;

        r0 := @this: org.jdesktop.swingx.plaf.basic.core.LazyActionMap;

        $r1 = r0.<org.jdesktop.swingx.plaf.basic.core.LazyActionMap: java.lang.Object _loader>;

        if $r1 == null goto label10;

        r2 = r0.<org.jdesktop.swingx.plaf.basic.core.LazyActionMap: java.lang.Object _loader>;

        r0.<org.jdesktop.swingx.plaf.basic.core.LazyActionMap: java.lang.Object _loader> = null;

        r3 = (java.lang.Class) r2;

     label01:
        $r4 = newarray (java.lang.Class)[1];

        $r4[0] = class "Lorg/jdesktop/swingx/plaf/basic/core/LazyActionMap;";

        $r5 = virtualinvoke r3.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("loadActionMap", $r4);

        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = r0;

        virtualinvoke $r5.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r3, $r6);

     label02:
        goto label10;

     label03:
        $r25 := @caughtexception;

        $z3 = <org.jdesktop.swingx.plaf.basic.core.LazyActionMap: boolean $assertionsDisabled>;

        if $z3 != 0 goto label04;

        $r26 = new java.lang.AssertionError;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LazyActionMap unable to load actions ");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r26.<java.lang.AssertionError: void <init>(java.lang.Object)>($r30);

        throw $r26;

     label04:
        goto label10;

     label05:
        $r19 := @caughtexception;

        $z2 = <org.jdesktop.swingx.plaf.basic.core.LazyActionMap: boolean $assertionsDisabled>;

        if $z2 != 0 goto label06;

        $r20 = new java.lang.AssertionError;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LazyActionMap unable to load actions ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r19);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.AssertionError: void <init>(java.lang.Object)>($r24);

        throw $r20;

     label06:
        goto label10;

     label07:
        $r13 := @caughtexception;

        $z1 = <org.jdesktop.swingx.plaf.basic.core.LazyActionMap: boolean $assertionsDisabled>;

        if $z1 != 0 goto label08;

        $r14 = new java.lang.AssertionError;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LazyActionMap unable to load actions ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.AssertionError: void <init>(java.lang.Object)>($r18);

        throw $r14;

     label08:
        goto label10;

     label09:
        $r7 := @caughtexception;

        $z0 = <org.jdesktop.swingx.plaf.basic.core.LazyActionMap: boolean $assertionsDisabled>;

        if $z0 != 0 goto label10;

        $r8 = new java.lang.AssertionError;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LazyActionMap unable to load actions ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.AssertionError: void <init>(java.lang.Object)>($r12);

        throw $r8;

     label10:
        return;

        catch java.lang.NoSuchMethodException from label01 to label02 with label03;
        catch java.lang.IllegalAccessException from label01 to label02 with label05;
        catch java.lang.reflect.InvocationTargetException from label01 to label02 with label07;
        catch java.lang.IllegalArgumentException from label01 to label02 with label09;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/jdesktop/swingx/plaf/basic/core/LazyActionMap;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.jdesktop.swingx.plaf.basic.core.LazyActionMap: boolean $assertionsDisabled> = $z1;

        return;
    }
}
