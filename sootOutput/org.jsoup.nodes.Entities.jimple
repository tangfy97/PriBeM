public class org.jsoup.nodes.Entities extends java.lang.Object
{
    private static final java.util.Map full;
    private static final java.util.Map xhtmlByVal;
    private static final java.util.Map base;
    private static final java.util.Map baseByVal;
    private static final java.util.Map fullByVal;
    private static final java.util.regex.Pattern unescapePattern;
    private static final java.util.regex.Pattern strictUnescapePattern;
    private static final java.lang.Object[][] xhtmlArray;

    private void <init>()
    {
        org.jsoup.nodes.Entities r0;

        r0 := @this: org.jsoup.nodes.Entities;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean isNamedEntity(java.lang.String)
    {
        java.lang.String r0;
        java.util.Map $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.jsoup.nodes.Entities: java.util.Map full>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>(r0);

        return $z0;
    }

    public static boolean isBaseNamedEntity(java.lang.String)
    {
        java.lang.String r0;
        java.util.Map $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.jsoup.nodes.Entities: java.util.Map base>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>(r0);

        return $z0;
    }

    public static java.lang.Character getCharacterByName(java.lang.String)
    {
        java.lang.Character $r3;
        java.util.Map $r1;
        java.lang.Object $r2;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.jsoup.nodes.Entities: java.util.Map full>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        $r3 = (java.lang.Character) $r2;

        return $r3;
    }

    static java.lang.String escape(java.lang.String, org.jsoup.nodes.Document$OutputSettings)
    {
        org.jsoup.nodes.Document$OutputSettings r1;
        java.nio.charset.CharsetEncoder $r2;
        org.jsoup.nodes.Entities$EscapeMode $r3;
        java.lang.String r0, $r4;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: org.jsoup.nodes.Document$OutputSettings;

        $r2 = virtualinvoke r1.<org.jsoup.nodes.Document$OutputSettings: java.nio.charset.CharsetEncoder encoder()>();

        $r3 = virtualinvoke r1.<org.jsoup.nodes.Document$OutputSettings: org.jsoup.nodes.Entities$EscapeMode escapeMode()>();

        $r4 = staticinvoke <org.jsoup.nodes.Entities: java.lang.String escape(java.lang.String,java.nio.charset.CharsetEncoder,org.jsoup.nodes.Entities$EscapeMode)>(r0, $r2, $r3);

        return $r4;
    }

    static java.lang.String escape(java.lang.String, java.nio.charset.CharsetEncoder, org.jsoup.nodes.Entities$EscapeMode)
    {
        org.jsoup.nodes.Entities$EscapeMode r2;
        java.lang.Character $r11, $r16;
        java.util.Map $r3;
        int $i0, $i1, $i2, $i3, i4, $i6;
        java.lang.String r1, $r4, $r5, $r9, $r13, $r18;
        boolean $z0, $z1, $z2;
        char c5;
        java.nio.charset.CharsetEncoder r7;
        char[] $r6;
        java.lang.StringBuilder $r0, $r8, $r10, $r12, $r14, $r15, $r19;
        java.lang.Object $r17;

        r1 := @parameter0: java.lang.String;

        r7 := @parameter1: java.nio.charset.CharsetEncoder;

        r2 := @parameter2: org.jsoup.nodes.Entities$EscapeMode;

        $r0 = new java.lang.StringBuilder;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        $i1 = $i0 * 2;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(int)>($i1);

        $r3 = virtualinvoke r2.<org.jsoup.nodes.Entities$EscapeMode: java.util.Map getMap()>();

        $i2 = virtualinvoke r1.<java.lang.String: int length()>();

        i4 = 0;

     label1:
        if i4 >= $i2 goto label8;

        $i3 = virtualinvoke r1.<java.lang.String: int codePointAt(int)>(i4);

        if $i3 >= 65536 goto label5;

        c5 = (char) $i3;

        $r11 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c5);

        $z1 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>($r11);

        if $z1 == 0 goto label2;

        $r15 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(38);

        $r16 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c5);

        $r17 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r16);

        $r18 = (java.lang.String) $r17;

        $r19 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(59);

        goto label4;

     label2:
        $z2 = virtualinvoke r7.<java.nio.charset.CharsetEncoder: boolean canEncode(char)>(c5);

        if $z2 == 0 goto label3;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c5);

        goto label4;

     label3:
        $r12 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&#x");

        $r13 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i3);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(59);

     label4:
        goto label7;

     label5:
        $r5 = new java.lang.String;

        $r6 = staticinvoke <java.lang.Character: char[] toChars(int)>($i3);

        specialinvoke $r5.<java.lang.String: void <init>(char[])>($r6);

        $z0 = virtualinvoke r7.<java.nio.charset.CharsetEncoder: boolean canEncode(java.lang.CharSequence)>($r5);

        if $z0 == 0 goto label6;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        goto label7;

     label6:
        $r8 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&#x");

        $r9 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i3);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(59);

     label7:
        $i6 = staticinvoke <java.lang.Character: int charCount(int)>($i3);

        i4 = i4 + $i6;

        goto label1;

     label8:
        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    static java.lang.String unescape(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.jsoup.nodes.Entities: java.lang.String unescape(java.lang.String,boolean)>(r0, 0);

        return $r1;
    }

    static java.lang.String unescape(java.lang.String, boolean)
    {
        java.lang.String r0, $r1;
        boolean z0;

        r0 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r1 = staticinvoke <org.jsoup.parser.Parser: java.lang.String unescapeEntities(java.lang.String,boolean)>(r0, z0);

        return $r1;
    }

    private static java.util.Map loadEntities(java.lang.String)
    {
        java.util.HashMap $r1;
        java.lang.Character $r11;
        int $i0;
        java.lang.String r2, $r10, r13, $r18, $r20;
        boolean $z0;
        java.util.Map$Entry r8;
        java.util.Properties $r0;
        java.util.Iterator $r6;
        java.util.Set $r5;
        java.util.MissingResourceException $r15;
        char $c1;
        java.io.IOException $r14;
        java.lang.Class $r3;
        java.lang.Object $r7, $r9, $r12;
        java.lang.StringBuilder $r16, $r17, $r19;
        java.io.InputStream $r4;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.util.Properties;

        specialinvoke $r0.<java.util.Properties: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

     label1:
        $r3 = class "Lorg/jsoup/nodes/Entities;";

        $r4 = virtualinvoke $r3.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>(r2);

        virtualinvoke $r0.<java.util.Properties: void load(java.io.InputStream)>($r4);

        virtualinvoke $r4.<java.io.InputStream: void close()>();

     label2:
        goto label4;

     label3:
        $r14 := @caughtexception;

        $r15 = new java.util.MissingResourceException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error loading entities resource: ");

        $r18 = virtualinvoke $r14.<java.io.IOException: java.lang.String getMessage()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.util.MissingResourceException: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r20, "Entities", r2);

        throw $r15;

     label4:
        $r5 = virtualinvoke $r0.<java.util.Properties: java.util.Set entrySet()>();

        $r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label5:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.util.Map$Entry) $r7;

        $r9 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r10 = (java.lang.String) $r9;

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r10, 16);

        $c1 = (char) $i0;

        $r11 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c1);

        $r12 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getKey()>();

        r13 = (java.lang.String) $r12;

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r13, $r11);

        goto label5;

     label6:
        return $r1;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private static java.util.Map toCharacterKey(java.util.Map)
    {
        java.util.Map$Entry r5;
        java.util.Iterator $r3;
        java.util.Set $r2;
        java.util.HashMap $r0;
        java.lang.Character r7;
        java.util.Map r1;
        java.lang.Object $r4, $r6, $r8;
        java.lang.String r9, $r10;
        boolean $z0, $z1, $z2;

        r1 := @parameter0: java.util.Map;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r2 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r6 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        r7 = (java.lang.Character) $r6;

        $r8 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        r9 = (java.lang.String) $r8;

        $z1 = interfaceinvoke $r0.<java.util.Map: boolean containsKey(java.lang.Object)>(r7);

        if $z1 == 0 goto label2;

        $r10 = virtualinvoke r9.<java.lang.String: java.lang.String toLowerCase()>();

        $z2 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>(r9);

        if $z2 == 0 goto label3;

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r7, r9);

        goto label3;

     label2:
        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r7, r9);

     label3:
        goto label1;

     label4:
        return $r0;
    }

    static java.util.Map access$000()
    {
        java.util.Map $r0;

        $r0 = <org.jsoup.nodes.Entities: java.util.Map xhtmlByVal>;

        return $r0;
    }

    static java.util.Map access$100()
    {
        java.util.Map $r0;

        $r0 = <org.jsoup.nodes.Entities: java.util.Map baseByVal>;

        return $r0;
    }

    static java.util.Map access$200()
    {
        java.util.Map $r0;

        $r0 = <org.jsoup.nodes.Entities: java.util.Map fullByVal>;

        return $r0;
    }

    static void <clinit>()
    {
        java.lang.Integer $r4, $r6, $r8, $r10, $r12, $r23;
        java.lang.Character $r24;
        java.util.Map $r14, $r15, $r16, $r17, $r18, $r19, $r27;
        java.util.regex.Pattern $r0, $r1;
        java.lang.Object[] $r3, $r5, $r7, $r9, $r11, r21;
        java.util.HashMap $r13;
        java.lang.Object[][] $r2, r20;
        int i0, $i1, i3;
        java.lang.String $r26;
        char $c2;
        java.lang.Object $r22, $r25;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("&(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+\\d*);?");

        <org.jsoup.nodes.Entities: java.util.regex.Pattern unescapePattern> = $r0;

        $r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("&(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+\\d*);");

        <org.jsoup.nodes.Entities: java.util.regex.Pattern strictUnescapePattern> = $r1;

        $r2 = newarray (java.lang.Object[])[5];

        $r3 = newarray (java.lang.Object)[2];

        $r3[0] = "quot";

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(34);

        $r3[1] = $r4;

        $r2[0] = $r3;

        $r5 = newarray (java.lang.Object)[2];

        $r5[0] = "amp";

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(38);

        $r5[1] = $r6;

        $r2[1] = $r5;

        $r7 = newarray (java.lang.Object)[2];

        $r7[0] = "apos";

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(39);

        $r7[1] = $r8;

        $r2[2] = $r7;

        $r9 = newarray (java.lang.Object)[2];

        $r9[0] = "lt";

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(60);

        $r9[1] = $r10;

        $r2[3] = $r9;

        $r11 = newarray (java.lang.Object)[2];

        $r11[0] = "gt";

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(62);

        $r11[1] = $r12;

        $r2[4] = $r11;

        <org.jsoup.nodes.Entities: java.lang.Object[][] xhtmlArray> = $r2;

        $r13 = new java.util.HashMap;

        specialinvoke $r13.<java.util.HashMap: void <init>()>();

        <org.jsoup.nodes.Entities: java.util.Map xhtmlByVal> = $r13;

        $r14 = staticinvoke <org.jsoup.nodes.Entities: java.util.Map loadEntities(java.lang.String)>("entities-base.properties");

        <org.jsoup.nodes.Entities: java.util.Map base> = $r14;

        $r15 = <org.jsoup.nodes.Entities: java.util.Map base>;

        $r16 = staticinvoke <org.jsoup.nodes.Entities: java.util.Map toCharacterKey(java.util.Map)>($r15);

        <org.jsoup.nodes.Entities: java.util.Map baseByVal> = $r16;

        $r17 = staticinvoke <org.jsoup.nodes.Entities: java.util.Map loadEntities(java.lang.String)>("entities-full.properties");

        <org.jsoup.nodes.Entities: java.util.Map full> = $r17;

        $r18 = <org.jsoup.nodes.Entities: java.util.Map full>;

        $r19 = staticinvoke <org.jsoup.nodes.Entities: java.util.Map toCharacterKey(java.util.Map)>($r18);

        <org.jsoup.nodes.Entities: java.util.Map fullByVal> = $r19;

        r20 = <org.jsoup.nodes.Entities: java.lang.Object[][] xhtmlArray>;

        i0 = lengthof r20;

        i3 = 0;

     label1:
        if i3 >= i0 goto label2;

        r21 = r20[i3];

        $r22 = r21[1];

        $r23 = (java.lang.Integer) $r22;

        $i1 = virtualinvoke $r23.<java.lang.Integer: int intValue()>();

        $c2 = (char) $i1;

        $r24 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c2);

        $r27 = <org.jsoup.nodes.Entities: java.util.Map xhtmlByVal>;

        $r25 = r21[0];

        $r26 = (java.lang.String) $r25;

        interfaceinvoke $r27.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r24, $r26);

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }
}
