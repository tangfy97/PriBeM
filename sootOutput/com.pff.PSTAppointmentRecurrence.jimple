public class com.pff.PSTAppointmentRecurrence extends java.lang.Object
{
    private short RecurFrequency;
    private short PatternType;
    private short CalendarType;
    private int FirstDateTime;
    private int Period;
    private int SlidingFlag;
    private int PatternSpecific;
    private int PatternSpecificNth;
    private int EndType;
    private int OccurrenceCount;
    private int FirstDOW;
    private int DeletedInstanceCount;
    private java.util.Calendar[] DeletedInstanceDates;
    private int ModifiedInstanceCount;
    private java.util.Calendar[] ModifiedInstanceDates;
    private int StartDate;
    private int EndDate;
    private int writerVersion2;
    private int StartTimeOffset;
    private int EndTimeOffset;
    private short ExceptionCount;
    private com.pff.PSTAppointmentException[] Exceptions;
    private com.pff.PSTTimeZone RecurrenceTimeZone;

    public short getExceptionCount()
    {
        short $s0;
        com.pff.PSTAppointmentRecurrence r0;

        r0 := @this: com.pff.PSTAppointmentRecurrence;

        $s0 = r0.<com.pff.PSTAppointmentRecurrence: short ExceptionCount>;

        return $s0;
    }

    public com.pff.PSTAppointmentException getException(int)
    {
        short $s1;
        com.pff.PSTAppointmentRecurrence r0;
        int i0, $i2;
        com.pff.PSTAppointmentException $r2;
        com.pff.PSTAppointmentException[] $r1;

        r0 := @this: com.pff.PSTAppointmentRecurrence;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $s1 = r0.<com.pff.PSTAppointmentRecurrence: short ExceptionCount>;

        $i2 = (int) $s1;

        if i0 < $i2 goto label2;

     label1:
        return null;

     label2:
        $r1 = r0.<com.pff.PSTAppointmentRecurrence: com.pff.PSTAppointmentException[] Exceptions>;

        $r2 = $r1[i0];

        return $r2;
    }

    public short getCalendarType()
    {
        short $s0;
        com.pff.PSTAppointmentRecurrence r0;

        r0 := @this: com.pff.PSTAppointmentRecurrence;

        $s0 = r0.<com.pff.PSTAppointmentRecurrence: short CalendarType>;

        return $s0;
    }

    public short getPatternType()
    {
        short $s0;
        com.pff.PSTAppointmentRecurrence r0;

        r0 := @this: com.pff.PSTAppointmentRecurrence;

        $s0 = r0.<com.pff.PSTAppointmentRecurrence: short PatternType>;

        return $s0;
    }

    public int getPeriod()
    {
        int $i0;
        com.pff.PSTAppointmentRecurrence r0;

        r0 := @this: com.pff.PSTAppointmentRecurrence;

        $i0 = r0.<com.pff.PSTAppointmentRecurrence: int Period>;

        return $i0;
    }

    public int getPatternSpecific()
    {
        int $i0;
        com.pff.PSTAppointmentRecurrence r0;

        r0 := @this: com.pff.PSTAppointmentRecurrence;

        $i0 = r0.<com.pff.PSTAppointmentRecurrence: int PatternSpecific>;

        return $i0;
    }

    public int getFirstDOW()
    {
        int $i0;
        com.pff.PSTAppointmentRecurrence r0;

        r0 := @this: com.pff.PSTAppointmentRecurrence;

        $i0 = r0.<com.pff.PSTAppointmentRecurrence: int FirstDOW>;

        return $i0;
    }

    public int getPatternSpecificNth()
    {
        int $i0;
        com.pff.PSTAppointmentRecurrence r0;

        r0 := @this: com.pff.PSTAppointmentRecurrence;

        $i0 = r0.<com.pff.PSTAppointmentRecurrence: int PatternSpecificNth>;

        return $i0;
    }

    public int getFirstDateTime()
    {
        int $i0;
        com.pff.PSTAppointmentRecurrence r0;

        r0 := @this: com.pff.PSTAppointmentRecurrence;

        $i0 = r0.<com.pff.PSTAppointmentRecurrence: int FirstDateTime>;

        return $i0;
    }

    public int getEndType()
    {
        int $i0;
        com.pff.PSTAppointmentRecurrence r0;

        r0 := @this: com.pff.PSTAppointmentRecurrence;

        $i0 = r0.<com.pff.PSTAppointmentRecurrence: int EndType>;

        return $i0;
    }

    public int getOccurrenceCount()
    {
        int $i0;
        com.pff.PSTAppointmentRecurrence r0;

        r0 := @this: com.pff.PSTAppointmentRecurrence;

        $i0 = r0.<com.pff.PSTAppointmentRecurrence: int OccurrenceCount>;

        return $i0;
    }

    public int getEndDate()
    {
        int $i0;
        com.pff.PSTAppointmentRecurrence r0;

        r0 := @this: com.pff.PSTAppointmentRecurrence;

        $i0 = r0.<com.pff.PSTAppointmentRecurrence: int EndDate>;

        return $i0;
    }

    public int getStartTimeOffset()
    {
        int $i0;
        com.pff.PSTAppointmentRecurrence r0;

        r0 := @this: com.pff.PSTAppointmentRecurrence;

        $i0 = r0.<com.pff.PSTAppointmentRecurrence: int StartTimeOffset>;

        return $i0;
    }

    public com.pff.PSTTimeZone getTimeZone()
    {
        com.pff.PSTAppointmentRecurrence r0;
        com.pff.PSTTimeZone $r1;

        r0 := @this: com.pff.PSTAppointmentRecurrence;

        $r1 = r0.<com.pff.PSTAppointmentRecurrence: com.pff.PSTTimeZone RecurrenceTimeZone>;

        return $r1;
    }

    public int getRecurFrequency()
    {
        int $i1;
        short $s0;
        com.pff.PSTAppointmentRecurrence r0;

        r0 := @this: com.pff.PSTAppointmentRecurrence;

        $s0 = r0.<com.pff.PSTAppointmentRecurrence: short RecurFrequency>;

        $i1 = (int) $s0;

        return $i1;
    }

    public int getSlidingFlag()
    {
        int $i0;
        com.pff.PSTAppointmentRecurrence r0;

        r0 := @this: com.pff.PSTAppointmentRecurrence;

        $i0 = r0.<com.pff.PSTAppointmentRecurrence: int SlidingFlag>;

        return $i0;
    }

    public int getStartDate()
    {
        int $i0;
        com.pff.PSTAppointmentRecurrence r0;

        r0 := @this: com.pff.PSTAppointmentRecurrence;

        $i0 = r0.<com.pff.PSTAppointmentRecurrence: int StartDate>;

        return $i0;
    }

    public int getEndTimeOffset()
    {
        int $i0;
        com.pff.PSTAppointmentRecurrence r0;

        r0 := @this: com.pff.PSTAppointmentRecurrence;

        $i0 = r0.<com.pff.PSTAppointmentRecurrence: int EndTimeOffset>;

        return $i0;
    }

    public void <init>(byte[], com.pff.PSTAppointment, com.pff.PSTTimeZone)
    {
        byte[] r4;
        byte b73, b108, b109, b110;
        com.pff.PSTAppointmentRecurrence r0;
        long $l0, $l3, $l6, $l9, $l11, $l13, $l17, $l22, $l25, $l28, $l31, $l34, $l37, $l56, $l62, $l65, $l67, $l70, $l75, $l79, $l83, $l87;
        short $s2, $s5, $s8, $s15, $s39, $s40, $s41, $s46, $s69, $s72, $s104;
        java.util.Calendar $r12, $r14, $r16, $r18, $r32, $r35;
        com.pff.PSTAppointmentException[] $r6, $r19, $r22, $r24, $r27, $r28;
        java.util.Date $r11;
        java.util.SimpleTimeZone $r3;
        int $i1, $i4, $i7, $i10, $i12, $i14, $i16, $i18, $i19, $i20, $i21, $i23, $i24, $i26, $i27, $i29, $i30, $i32, $i33, $i35, $i36, $i38, $i42, $i43, $i44, $i45, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i57, $i58, $i59, $i60, $i61, $i63, $i64, $i66, $i68, $i71, $i74, $i76, i77, $i78, $i80, i81, $i82, $i84, i85, $i86, $i88, i89, $i90, i91, $i92, i93, i94, i95, i96, i97, i98, i99, i100, i101, i102, i103, i105, i106, i107, $i111, $i112, $i113, $i114, $i115, $i116;
        com.pff.PSTAppointment r7, r40;
        java.lang.Exception $r36, $r37;
        com.pff.PSTMessage $r10;
        com.pff.PSTTimeZone r1, $r2, $r31, $r34;
        com.pff.PSTAttachment $r8, $r9, $r21;
        boolean $z0;
        com.pff.PSTAttachment[] r39;
        java.util.Calendar[] $r5, $r13, $r15, $r17, $r30, $r33, $r38;
        com.pff.PSTAppointmentException $r20, $r23, $r25, $r29, $r41;

        r0 := @this: com.pff.PSTAppointmentRecurrence;

        r4 := @parameter0: byte[];

        r7 := @parameter1: com.pff.PSTAppointment;

        r1 := @parameter2: com.pff.PSTTimeZone;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.pff.PSTAppointmentRecurrence: java.util.Calendar[] DeletedInstanceDates> = null;

        r0.<com.pff.PSTAppointmentRecurrence: java.util.Calendar[] ModifiedInstanceDates> = null;

        r0.<com.pff.PSTAppointmentRecurrence: com.pff.PSTAppointmentException[] Exceptions> = null;

        r0.<com.pff.PSTAppointmentRecurrence: com.pff.PSTTimeZone RecurrenceTimeZone> = null;

        r0.<com.pff.PSTAppointmentRecurrence: com.pff.PSTTimeZone RecurrenceTimeZone> = r1;

        $r2 = r0.<com.pff.PSTAppointmentRecurrence: com.pff.PSTTimeZone RecurrenceTimeZone>;

        $r3 = virtualinvoke $r2.<com.pff.PSTTimeZone: java.util.SimpleTimeZone getSimpleTimeZone()>();

        $l0 = staticinvoke <com.pff.PSTObject: long convertLittleEndianBytesToLong(byte[],int,int)>(r4, 4, 6);

        $i1 = (int) $l0;

        $s2 = (short) $i1;

        r0.<com.pff.PSTAppointmentRecurrence: short RecurFrequency> = $s2;

        $l3 = staticinvoke <com.pff.PSTObject: long convertLittleEndianBytesToLong(byte[],int,int)>(r4, 6, 8);

        $i4 = (int) $l3;

        $s5 = (short) $i4;

        r0.<com.pff.PSTAppointmentRecurrence: short PatternType> = $s5;

        $l6 = staticinvoke <com.pff.PSTObject: long convertLittleEndianBytesToLong(byte[],int,int)>(r4, 8, 10);

        $i7 = (int) $l6;

        $s8 = (short) $i7;

        r0.<com.pff.PSTAppointmentRecurrence: short CalendarType> = $s8;

        $l9 = staticinvoke <com.pff.PSTObject: long convertLittleEndianBytesToLong(byte[],int,int)>(r4, 10, 14);

        $i10 = (int) $l9;

        r0.<com.pff.PSTAppointmentRecurrence: int FirstDateTime> = $i10;

        $l11 = staticinvoke <com.pff.PSTObject: long convertLittleEndianBytesToLong(byte[],int,int)>(r4, 14, 18);

        $i12 = (int) $l11;

        r0.<com.pff.PSTAppointmentRecurrence: int Period> = $i12;

        $l13 = staticinvoke <com.pff.PSTObject: long convertLittleEndianBytesToLong(byte[],int,int)>(r4, 18, 22);

        $i14 = (int) $l13;

        r0.<com.pff.PSTAppointmentRecurrence: int SlidingFlag> = $i14;

        b73 = 22;

        b110 = 22;

        b109 = 22;

        b108 = 22;

        $s15 = r0.<com.pff.PSTAppointmentRecurrence: short PatternType>;

        if $s15 == 0 goto label02;

        $l67 = staticinvoke <com.pff.PSTObject: long convertLittleEndianBytesToLong(byte[],int,int)>(r4, 22, 26);

        $i68 = (int) $l67;

        r0.<com.pff.PSTAppointmentRecurrence: int PatternSpecific> = $i68;

        b73 = 26;

        b110 = 26;

        b109 = 26;

        b108 = 26;

        $s69 = r0.<com.pff.PSTAppointmentRecurrence: short PatternType>;

        $i111 = (int) $s69;

        if $i111 == 3 goto label01;

        $s72 = r0.<com.pff.PSTAppointmentRecurrence: short PatternType>;

        $i112 = (int) $s72;

        if $i112 != 11 goto label02;

     label01:
        $l70 = staticinvoke <com.pff.PSTObject: long convertLittleEndianBytesToLong(byte[],int,int)>(r4, 26, 30);

        $i71 = (int) $l70;

        r0.<com.pff.PSTAppointmentRecurrence: int PatternSpecificNth> = $i71;

        b73 = 30;

        b110 = 30;

        b109 = 30;

        b108 = 30;

     label02:
        $i74 = b108 + 4;

        $l75 = staticinvoke <com.pff.PSTObject: long convertLittleEndianBytesToLong(byte[],int,int)>(r4, b109, $i74);

        $i76 = (int) $l75;

        r0.<com.pff.PSTAppointmentRecurrence: int EndType> = $i76;

        i77 = b110 + 4;

        $i78 = i77 + 4;

        $l79 = staticinvoke <com.pff.PSTObject: long convertLittleEndianBytesToLong(byte[],int,int)>(r4, i77, $i78);

        $i80 = (int) $l79;

        r0.<com.pff.PSTAppointmentRecurrence: int OccurrenceCount> = $i80;

        i81 = i77 + 4;

        $i82 = i81 + 4;

        $l83 = staticinvoke <com.pff.PSTObject: long convertLittleEndianBytesToLong(byte[],int,int)>(r4, i81, $i82);

        $i84 = (int) $l83;

        r0.<com.pff.PSTAppointmentRecurrence: int FirstDOW> = $i84;

        i85 = i81 + 4;

        $i86 = i85 + 4;

        $l87 = staticinvoke <com.pff.PSTObject: long convertLittleEndianBytesToLong(byte[],int,int)>(r4, i85, $i86);

        $i88 = (int) $l87;

        r0.<com.pff.PSTAppointmentRecurrence: int DeletedInstanceCount> = $i88;

        i89 = i85 + 4;

        $i90 = r0.<com.pff.PSTAppointmentRecurrence: int DeletedInstanceCount>;

        $r38 = newarray (java.util.Calendar)[$i90];

        r0.<com.pff.PSTAppointmentRecurrence: java.util.Calendar[] DeletedInstanceDates> = $r38;

        i91 = 0;

     label03:
        $i92 = r0.<com.pff.PSTAppointmentRecurrence: int DeletedInstanceCount>;

        if i91 >= $i92 goto label04;

        $r33 = r0.<com.pff.PSTAppointmentRecurrence: java.util.Calendar[] DeletedInstanceDates>;

        $i64 = i89 + 4;

        $l65 = staticinvoke <com.pff.PSTObject: long convertLittleEndianBytesToLong(byte[],int,int)>(r4, i89, $i64);

        $i66 = (int) $l65;

        $r34 = r0.<com.pff.PSTAppointmentRecurrence: com.pff.PSTTimeZone RecurrenceTimeZone>;

        $r35 = staticinvoke <com.pff.PSTObject: java.util.Calendar apptTimeToUTC(int,com.pff.PSTTimeZone)>($i66, $r34);

        $r33[i91] = $r35;

        i89 = i89 + 4;

        i91 = i91 + 1;

        goto label03;

     label04:
        $i16 = i89 + 4;

        $l17 = staticinvoke <com.pff.PSTObject: long convertLittleEndianBytesToLong(byte[],int,int)>(r4, i89, $i16);

        $i18 = (int) $l17;

        r0.<com.pff.PSTAppointmentRecurrence: int ModifiedInstanceCount> = $i18;

        i93 = i89 + 4;

        $i19 = r0.<com.pff.PSTAppointmentRecurrence: int ModifiedInstanceCount>;

        $r5 = newarray (java.util.Calendar)[$i19];

        r0.<com.pff.PSTAppointmentRecurrence: java.util.Calendar[] ModifiedInstanceDates> = $r5;

        i94 = 0;

     label05:
        $i20 = r0.<com.pff.PSTAppointmentRecurrence: int ModifiedInstanceCount>;

        if i94 >= $i20 goto label06;

        $r30 = r0.<com.pff.PSTAppointmentRecurrence: java.util.Calendar[] ModifiedInstanceDates>;

        $i61 = i93 + 4;

        $l62 = staticinvoke <com.pff.PSTObject: long convertLittleEndianBytesToLong(byte[],int,int)>(r4, i93, $i61);

        $i63 = (int) $l62;

        $r31 = r0.<com.pff.PSTAppointmentRecurrence: com.pff.PSTTimeZone RecurrenceTimeZone>;

        $r32 = staticinvoke <com.pff.PSTObject: java.util.Calendar apptTimeToUTC(int,com.pff.PSTTimeZone)>($i63, $r31);

        $r30[i94] = $r32;

        i93 = i93 + 4;

        i94 = i94 + 1;

        goto label05;

     label06:
        $i21 = i93 + 4;

        $l22 = staticinvoke <com.pff.PSTObject: long convertLittleEndianBytesToLong(byte[],int,int)>(r4, i93, $i21);

        $i23 = (int) $l22;

        r0.<com.pff.PSTAppointmentRecurrence: int StartDate> = $i23;

        i95 = i93 + 4;

        $i24 = i95 + 4;

        $l25 = staticinvoke <com.pff.PSTObject: long convertLittleEndianBytesToLong(byte[],int,int)>(r4, i95, $i24);

        $i26 = (int) $l25;

        r0.<com.pff.PSTAppointmentRecurrence: int EndDate> = $i26;

        i96 = i95 + 8;

        $i27 = i96 + 4;

        $l28 = staticinvoke <com.pff.PSTObject: long convertLittleEndianBytesToLong(byte[],int,int)>(r4, i96, $i27);

        $i29 = (int) $l28;

        r0.<com.pff.PSTAppointmentRecurrence: int writerVersion2> = $i29;

        i97 = i96 + 4;

        $i30 = i97 + 4;

        $l31 = staticinvoke <com.pff.PSTObject: long convertLittleEndianBytesToLong(byte[],int,int)>(r4, i97, $i30);

        $i32 = (int) $l31;

        r0.<com.pff.PSTAppointmentRecurrence: int StartTimeOffset> = $i32;

        i98 = i97 + 4;

        $i33 = i98 + 4;

        $l34 = staticinvoke <com.pff.PSTObject: long convertLittleEndianBytesToLong(byte[],int,int)>(r4, i98, $i33);

        $i35 = (int) $l34;

        r0.<com.pff.PSTAppointmentRecurrence: int EndTimeOffset> = $i35;

        i99 = i98 + 4;

        $i36 = i99 + 2;

        $l37 = staticinvoke <com.pff.PSTObject: long convertLittleEndianBytesToLong(byte[],int,int)>(r4, i99, $i36);

        $i38 = (int) $l37;

        $s39 = (short) $i38;

        r0.<com.pff.PSTAppointmentRecurrence: short ExceptionCount> = $s39;

        i100 = i99 + 2;

        $s40 = r0.<com.pff.PSTAppointmentRecurrence: short ExceptionCount>;

        $i113 = (int) $s40;

        $r6 = newarray (com.pff.PSTAppointmentException)[$i113];

        r0.<com.pff.PSTAppointmentRecurrence: com.pff.PSTAppointmentException[] Exceptions> = $r6;

        i101 = 0;

     label07:
        $s41 = r0.<com.pff.PSTAppointmentRecurrence: short ExceptionCount>;

        $i114 = (int) $s41;

        if i101 >= $i114 goto label08;

        $r27 = r0.<com.pff.PSTAppointmentRecurrence: com.pff.PSTAppointmentException[] Exceptions>;

        $r41 = new com.pff.PSTAppointmentException;

        $i59 = r0.<com.pff.PSTAppointmentRecurrence: int writerVersion2>;

        specialinvoke $r41.<com.pff.PSTAppointmentException: void <init>(byte[],int,int,com.pff.PSTAppointment)>(r4, i100, $i59, r7);

        $r27[i101] = $r41;

        $r28 = r0.<com.pff.PSTAppointmentRecurrence: com.pff.PSTAppointmentException[] Exceptions>;

        $r29 = $r28[i101];

        $i60 = virtualinvoke $r29.<com.pff.PSTAppointmentException: int getLength()>();

        i100 = i100 + $i60;

        i101 = i101 + 1;

        goto label07;

     label08:
        $i43 = i100 + 4;

        $i42 = lengthof r4;

        if $i43 > $i42 goto label09;

        $i55 = i100 + 4;

        $l56 = staticinvoke <com.pff.PSTObject: long convertLittleEndianBytesToLong(byte[],int,int)>(r4, i100, $i55);

        i102 = (int) $l56;

        $i57 = i102 * 4;

        $i58 = 4 + $i57;

        i100 = i100 + $i58;

     label09:
        i103 = 0;

     label10:
        $s104 = r0.<com.pff.PSTAppointmentRecurrence: short ExceptionCount>;

        $i115 = (int) $s104;

        if i103 >= $i115 goto label11;

        $r22 = r0.<com.pff.PSTAppointmentRecurrence: com.pff.PSTAppointmentException[] Exceptions>;

        $r23 = $r22[i103];

        virtualinvoke $r23.<com.pff.PSTAppointmentException: void ExtendedException(byte[],int)>(r4, i100);

        $r24 = r0.<com.pff.PSTAppointmentRecurrence: com.pff.PSTAppointmentException[] Exceptions>;

        $r25 = $r24[i103];

        $i54 = virtualinvoke $r25.<com.pff.PSTAppointmentException: int getExtendedLength()>();

        i100 = i100 + $i54;

        i103 = i103 + 1;

        goto label10;

     label11:
        $i44 = virtualinvoke r7.<com.pff.PSTAppointment: int getNumberOfAttachments()>();

        r39 = newarray (com.pff.PSTAttachment)[$i44];

        i105 = 0;

     label12:
        $i45 = lengthof r39;

        if i105 >= $i45 goto label17;

     label13:
        $r21 = virtualinvoke r7.<com.pff.PSTAppointment: com.pff.PSTAttachment getAttachment(int)>(i105);

        r39[i105] = $r21;

     label14:
        goto label16;

     label15:
        $r37 := @caughtexception;

        virtualinvoke $r37.<java.lang.Exception: void printStackTrace()>();

        r39[i105] = null;

     label16:
        i105 = i105 + 1;

        goto label12;

     label17:
        i106 = 0;

     label18:
        $s46 = r0.<com.pff.PSTAppointmentRecurrence: short ExceptionCount>;

        $i116 = (int) $s46;

        if i106 >= $i116 goto label26;

     label19:
        i107 = 0;

     label20:
        $i47 = lengthof r39;

        if i107 >= $i47 goto label23;

        $r8 = r39[i107];

        if $r8 == null goto label22;

        $r9 = r39[i107];

        $r10 = virtualinvoke $r9.<com.pff.PSTAttachment: com.pff.PSTMessage getEmbeddedPSTMessage()>();

        $z0 = $r10 instanceof com.pff.PSTAppointment;

        if $z0 != 0 goto label21;

        goto label22;

     label21:
        r40 = (com.pff.PSTAppointment) $r10;

        $r11 = virtualinvoke r40.<com.pff.PSTAppointment: java.util.Date getRecurrenceBase()>();

        $r12 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone)>($r3);

        virtualinvoke $r12.<java.util.Calendar: void setTime(java.util.Date)>($r11);

        $i48 = virtualinvoke $r12.<java.util.Calendar: int get(int)>(1);

        $r13 = r0.<com.pff.PSTAppointmentRecurrence: java.util.Calendar[] ModifiedInstanceDates>;

        $r14 = $r13[i106];

        $i49 = virtualinvoke $r14.<java.util.Calendar: int get(int)>(1);

        if $i48 != $i49 goto label22;

        $i50 = virtualinvoke $r12.<java.util.Calendar: int get(int)>(2);

        $r15 = r0.<com.pff.PSTAppointmentRecurrence: java.util.Calendar[] ModifiedInstanceDates>;

        $r16 = $r15[i106];

        $i51 = virtualinvoke $r16.<java.util.Calendar: int get(int)>(2);

        if $i50 != $i51 goto label22;

        $i52 = virtualinvoke $r12.<java.util.Calendar: int get(int)>(1);

        $r17 = r0.<com.pff.PSTAppointmentRecurrence: java.util.Calendar[] ModifiedInstanceDates>;

        $r18 = $r17[i106];

        $i53 = virtualinvoke $r18.<java.util.Calendar: int get(int)>(1);

        if $i52 != $i53 goto label22;

        $r19 = r0.<com.pff.PSTAppointmentRecurrence: com.pff.PSTAppointmentException[] Exceptions>;

        $r20 = $r19[i106];

        virtualinvoke $r20.<com.pff.PSTAppointmentException: void setEmbeddedMessage(com.pff.PSTAppointment)>(r40);

        goto label23;

     label22:
        i107 = i107 + 1;

        goto label20;

     label23:
        goto label25;

     label24:
        $r36 := @caughtexception;

        virtualinvoke $r36.<java.lang.Exception: void printStackTrace()>();

     label25:
        i106 = i106 + 1;

        goto label18;

     label26:
        return;

        catch java.lang.Exception from label13 to label14 with label15;
        catch java.lang.Exception from label19 to label23 with label24;
    }
}
