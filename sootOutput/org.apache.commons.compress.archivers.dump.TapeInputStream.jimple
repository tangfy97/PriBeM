class org.apache.commons.compress.archivers.dump.TapeInputStream extends java.io.FilterInputStream
{
    private byte[] blockBuffer;
    private int currBlkIdx;
    private int blockSize;
    private static final int recordSize;
    private int readOffset;
    private boolean isCompressed;
    private long bytesRead;

    public void <init>(java.io.InputStream)
    {
        byte[] $r2;
        org.apache.commons.compress.archivers.dump.TapeInputStream r0;
        int $i1;
        java.io.InputStream r1;

        r0 := @this: org.apache.commons.compress.archivers.dump.TapeInputStream;

        r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<java.io.FilterInputStream: void <init>(java.io.InputStream)>(r1);

        $r2 = newarray (byte)[1024];

        r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: byte[] blockBuffer> = $r2;

        $i1 = (int) -1;

        r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: int currBlkIdx> = $i1;

        r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: int blockSize> = 1024;

        r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: int readOffset> = 1024;

        r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: boolean isCompressed> = 0;

        r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: long bytesRead> = 0L;

        return;
    }

    public void resetBlockSize(int, boolean) throws java.io.IOException
    {
        byte[] r1, $r2, $r3, $r4;
        org.apache.commons.compress.archivers.dump.TapeInputStream r0;
        int i0, $i1, $i2, $i3, $i4;
        boolean z0;

        r0 := @this: org.apache.commons.compress.archivers.dump.TapeInputStream;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: boolean isCompressed> = z0;

        $i1 = 1024 * i0;

        r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: int blockSize> = $i1;

        r1 = r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: byte[] blockBuffer>;

        $i2 = r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: int blockSize>;

        $r2 = newarray (byte)[$i2];

        r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: byte[] blockBuffer> = $r2;

        $r3 = r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: byte[] blockBuffer>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r3, 0, 1024);

        $r4 = r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: byte[] blockBuffer>;

        $i3 = r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: int blockSize>;

        $i4 = $i3 - 1024;

        specialinvoke r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: boolean readFully(byte[],int,int)>($r4, 1024, $i4);

        r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: int currBlkIdx> = 0;

        r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: int readOffset> = 1024;

        return;
    }

    public int available() throws java.io.IOException
    {
        org.apache.commons.compress.archivers.dump.TapeInputStream r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.io.InputStream $r1;

        r0 := @this: org.apache.commons.compress.archivers.dump.TapeInputStream;

        $i1 = r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: int readOffset>;

        $i0 = r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: int blockSize>;

        if $i1 >= $i0 goto label1;

        $i4 = r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: int blockSize>;

        $i3 = r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: int readOffset>;

        $i5 = $i4 - $i3;

        return $i5;

     label1:
        $r1 = r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: java.io.InputStream in>;

        $i2 = virtualinvoke $r1.<java.io.InputStream: int available()>();

        return $i2;
    }

    public int read() throws java.io.IOException
    {
        java.lang.IllegalArgumentException $r0;
        org.apache.commons.compress.archivers.dump.TapeInputStream r1;

        r1 := @this: org.apache.commons.compress.archivers.dump.TapeInputStream;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("all reads must be multiple of record size (1024 bytes.");

        throw $r0;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        byte[] r1, $r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, i14, i15, $i17;
        boolean $z0;
        java.lang.IllegalArgumentException $r4;
        org.apache.commons.compress.archivers.dump.TapeInputStream r0;

        r0 := @this: org.apache.commons.compress.archivers.dump.TapeInputStream;

        r1 := @parameter0: byte[];

        i13 := @parameter1: int;

        i0 := @parameter2: int;

        $i1 = i0 % 1024;

        if $i1 == 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("all reads must be multiple of record size (1024 bytes.");

        throw $r4;

     label1:
        i14 = 0;

     label2:
        if i14 >= i0 goto label6;

        $i3 = r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: int readOffset>;

        $i2 = r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: int blockSize>;

        if $i3 != $i2 goto label3;

        $z0 = specialinvoke r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: boolean readBlock(boolean)>(1);

        if $z0 != 0 goto label3;

        $i17 = (int) -1;

        return $i17;

     label3:
        $i5 = r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: int readOffset>;

        $i4 = i0 - i14;

        $i7 = $i5 + $i4;

        $i6 = r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: int blockSize>;

        if $i7 > $i6 goto label4;

        i15 = i0 - i14;

        goto label5;

     label4:
        $i9 = r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: int blockSize>;

        $i8 = r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: int readOffset>;

        i15 = $i9 - $i8;

     label5:
        $r2 = r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: byte[] blockBuffer>;

        $i10 = r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: int readOffset>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i10, r1, i13, i15);

        $i11 = r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: int readOffset>;

        $i12 = $i11 + i15;

        r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: int readOffset> = $i12;

        i14 = i14 + i15;

        i13 = i13 + i15;

        goto label2;

     label6:
        return i14;
    }

    public long skip(long) throws java.io.IOException
    {
        byte $b2, $b3, $b12, $b23;
        boolean $z0, $z1;
        org.apache.commons.compress.archivers.dump.TapeInputStream r0;
        long l0, $l1, $l7, $l8, $l10, $l11, $l17, $l18, $l21, $l22, l24, l25;
        int $i4, $i5, $i6, $i9, $i13, $i14, $i15, $i16, $i19, $i20, $i26, $i27, $i28;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.apache.commons.compress.archivers.dump.TapeInputStream;

        l0 := @parameter0: long;

        $l1 = l0 % 1024L;

        $b2 = $l1 cmp 0L;

        if $b2 == 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("all reads must be multiple of record size (1024 bytes.");

        throw $r2;

     label1:
        l24 = 0L;

     label2:
        $b3 = l24 cmp l0;

        $i26 = (int) $b3;

        if $i26 >= 0 goto label8;

        $i5 = r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: int readOffset>;

        $i4 = r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: int blockSize>;

        if $i5 != $i4 goto label5;

        $l22 = l0 - l24;

        $i20 = r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: int blockSize>;

        $l21 = (long) $i20;

        $b23 = $l22 cmp $l21;

        $i27 = (int) $b23;

        if $i27 >= 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        $z0 = specialinvoke r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: boolean readBlock(boolean)>($z1);

        if $z0 != 0 goto label5;

        return -1L;

     label5:
        $i6 = r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: int readOffset>;

        $l8 = (long) $i6;

        $l7 = l0 - l24;

        $l11 = $l8 + $l7;

        $i9 = r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: int blockSize>;

        $l10 = (long) $i9;

        $b12 = $l11 cmp $l10;

        $i28 = (int) $b12;

        if $i28 > 0 goto label6;

        l25 = l0 - l24;

        goto label7;

     label6:
        $i14 = r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: int blockSize>;

        $i13 = r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: int readOffset>;

        $i15 = $i14 - $i13;

        l25 = (long) $i15;

     label7:
        $i16 = r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: int readOffset>;

        $l17 = (long) $i16;

        $l18 = $l17 + l25;

        $i19 = (int) $l18;

        r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: int readOffset> = $i19;

        l24 = l24 + l25;

        goto label2;

     label8:
        return l24;
    }

    public void close() throws java.io.IOException
    {
        org.apache.commons.compress.archivers.dump.TapeInputStream r0;
        java.io.InputStream $r1, $r2, $r3, $r4;

        r0 := @this: org.apache.commons.compress.archivers.dump.TapeInputStream;

        $r1 = r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: java.io.InputStream in>;

        if $r1 == null goto label1;

        $r3 = r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: java.io.InputStream in>;

        $r2 = <java.lang.System: java.io.InputStream in>;

        if $r3 == $r2 goto label1;

        $r4 = r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: java.io.InputStream in>;

        virtualinvoke $r4.<java.io.InputStream: void close()>();

     label1:
        return;
    }

    public byte[] peek() throws java.io.IOException
    {
        byte[] $r1, $r2;
        org.apache.commons.compress.archivers.dump.TapeInputStream r0;
        int $i0, $i1, $i2, $i3;
        boolean $z0;

        r0 := @this: org.apache.commons.compress.archivers.dump.TapeInputStream;

        $i1 = r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: int readOffset>;

        $i0 = r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: int blockSize>;

        if $i1 != $i0 goto label1;

        $z0 = specialinvoke r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: boolean readBlock(boolean)>(1);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r2 = newarray (byte)[1024];

        $r1 = r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: byte[] blockBuffer>;

        $i3 = r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: int readOffset>;

        $i2 = lengthof $r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i3, $r2, 0, $i2);

        return $r2;
    }

    public byte[] readRecord() throws java.io.IOException
    {
        byte[] r0;
        org.apache.commons.compress.archivers.dump.TapeInputStream r1;
        int $i0, $i1, $i3;
        org.apache.commons.compress.archivers.dump.ShortFileException $r3;

        r1 := @this: org.apache.commons.compress.archivers.dump.TapeInputStream;

        r0 = newarray (byte)[1024];

        $i0 = lengthof r0;

        $i1 = virtualinvoke r1.<org.apache.commons.compress.archivers.dump.TapeInputStream: int read(byte[],int,int)>(r0, 0, $i0);

        $i3 = (int) -1;

        if $i3 != $i1 goto label1;

        $r3 = new org.apache.commons.compress.archivers.dump.ShortFileException;

        specialinvoke $r3.<org.apache.commons.compress.archivers.dump.ShortFileException: void <init>()>();

        throw $r3;

     label1:
        return r0;
    }

    private boolean readBlock(boolean) throws java.io.IOException
    {
        byte[] $r2, $r3, $r4, r5, $r11, $r14, $r15;
        java.util.zip.Inflater $r20;
        int[] $r6;
        org.apache.commons.compress.archivers.dump.ShortFileException $r21;
        boolean $z0, $z1, z2, z3, $z4;
        org.apache.commons.compress.archivers.dump.DumpArchiveException $r22;
        org.apache.commons.compress.archivers.dump.TapeInputStream r0;
        org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException $r23, $r24, $r25;
        long $l2, $l3, $l4, $l6, $l7, $l13, $l14, $l15, $l24, $l25, $l26;
        org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE $r7;
        int $i0, $i1, $i5, $i8, $i9, $i10, i11, $i12, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, i27, $i28, $i29, $i31;
        java.util.zip.DataFormatException $r17;
        java.io.IOException $r19;
        java.io.InputStream $r1;

        r0 := @this: org.apache.commons.compress.archivers.dump.TapeInputStream;

        z2 := @parameter0: boolean;

        $r1 = r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: java.io.InputStream in>;

        if $r1 != null goto label01;

        $r19 = new java.io.IOException;

        specialinvoke $r19.<java.io.IOException: void <init>(java.lang.String)>("input buffer is closed");

        throw $r19;

     label01:
        $z0 = r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: boolean isCompressed>;

        if $z0 == 0 goto label02;

        $i5 = r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: int currBlkIdx>;

        $i31 = (int) -1;

        if $i5 != $i31 goto label03;

     label02:
        $r2 = r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: byte[] blockBuffer>;

        $i0 = r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: int blockSize>;

        z3 = specialinvoke r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: boolean readFully(byte[],int,int)>($r2, 0, $i0);

        $l3 = r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: long bytesRead>;

        $i1 = r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: int blockSize>;

        $l2 = (long) $i1;

        $l4 = $l3 + $l2;

        r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: long bytesRead> = $l4;

        goto label16;

     label03:
        $r3 = r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: byte[] blockBuffer>;

        $z1 = specialinvoke r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: boolean readFully(byte[],int,int)>($r3, 0, 4);

        if $z1 != 0 goto label04;

        return 0;

     label04:
        $l6 = r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: long bytesRead>;

        $l7 = $l6 + 4L;

        r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: long bytesRead> = $l7;

        $r4 = r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: byte[] blockBuffer>;

        $i8 = staticinvoke <org.apache.commons.compress.archivers.dump.DumpArchiveUtil: int convert32(byte[],int)>($r4, 0);

        $i9 = $i8 & 1;

        if $i9 != 1 goto label05;

        $z4 = 1;

        goto label06;

     label05:
        $z4 = 0;

     label06:
        if $z4 != 0 goto label07;

        $r15 = r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: byte[] blockBuffer>;

        $i22 = r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: int blockSize>;

        z3 = specialinvoke r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: boolean readFully(byte[],int,int)>($r15, 0, $i22);

        $l25 = r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: long bytesRead>;

        $i23 = r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: int blockSize>;

        $l24 = (long) $i23;

        $l26 = $l25 + $l24;

        r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: long bytesRead> = $l26;

        goto label16;

     label07:
        $i10 = $i8 >> 1;

        i11 = $i10 & 7;

        $i12 = $i8 >> 4;

        i27 = $i12 & 268435455;

        r5 = newarray (byte)[i27];

        z3 = specialinvoke r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: boolean readFully(byte[],int,int)>(r5, 0, i27);

        $l14 = r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: long bytesRead>;

        $l13 = (long) i27;

        $l15 = $l14 + $l13;

        r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: long bytesRead> = $l15;

        if z2 != 0 goto label08;

        $r14 = r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: byte[] blockBuffer>;

        staticinvoke <java.util.Arrays: void fill(byte[],byte)>($r14, 0);

        goto label16;

     label08:
        $r6 = <org.apache.commons.compress.archivers.dump.TapeInputStream$1: int[] $SwitchMap$org$apache$commons$compress$archivers$dump$DumpArchiveConstants$COMPRESSION_TYPE>;

        $i16 = i11 & 3;

        $r7 = staticinvoke <org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE: org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE find(int)>($i16);

        $i17 = virtualinvoke $r7.<org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE: int ordinal()>();

        $i18 = $r6[$i17];

        tableswitch($i18)
        {
            case 1: goto label09;
            case 2: goto label13;
            case 3: goto label14;
            default: goto label15;
        };

     label09:
        $r20 = new java.util.zip.Inflater;

        specialinvoke $r20.<java.util.zip.Inflater: void <init>()>();

        $i19 = lengthof r5;

        virtualinvoke $r20.<java.util.zip.Inflater: void setInput(byte[],int,int)>(r5, 0, $i19);

        $r11 = r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: byte[] blockBuffer>;

        $i20 = virtualinvoke $r20.<java.util.zip.Inflater: int inflate(byte[])>($r11);

        $i21 = r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: int blockSize>;

        if $i20 == $i21 goto label10;

        $r21 = new org.apache.commons.compress.archivers.dump.ShortFileException;

        specialinvoke $r21.<org.apache.commons.compress.archivers.dump.ShortFileException: void <init>()>();

        throw $r21;

     label10:
        virtualinvoke $r20.<java.util.zip.Inflater: void end()>();

     label11:
        goto label16;

     label12:
        $r17 := @caughtexception;

        $r22 = new org.apache.commons.compress.archivers.dump.DumpArchiveException;

        specialinvoke $r22.<org.apache.commons.compress.archivers.dump.DumpArchiveException: void <init>(java.lang.String,java.lang.Throwable)>("bad data", $r17);

        throw $r22;

     label13:
        $r23 = new org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException;

        specialinvoke $r23.<org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException: void <init>(java.lang.String)>("BZLIB2");

        throw $r23;

     label14:
        $r24 = new org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException;

        specialinvoke $r24.<org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException: void <init>(java.lang.String)>("LZO");

        throw $r24;

     label15:
        $r25 = new org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException;

        specialinvoke $r25.<org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException: void <init>()>();

        throw $r25;

     label16:
        $i28 = r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: int currBlkIdx>;

        $i29 = $i28 + 1;

        r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: int currBlkIdx> = $i29;

        r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: int readOffset> = 0;

        return z3;

        catch java.util.zip.DataFormatException from label09 to label11 with label12;
    }

    private boolean readFully(byte[], int, int) throws java.io.IOException
    {
        byte[] r1;
        org.apache.commons.compress.archivers.dump.TapeInputStream r0;
        int i0, i1, $i2;
        org.apache.commons.compress.archivers.dump.ShortFileException $r3;
        java.io.InputStream $r2;

        r0 := @this: org.apache.commons.compress.archivers.dump.TapeInputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: java.io.InputStream in>;

        $i2 = staticinvoke <org.apache.commons.compress.utils.IOUtils: int readFully(java.io.InputStream,byte[],int,int)>($r2, r1, i0, i1);

        if $i2 >= i1 goto label1;

        $r3 = new org.apache.commons.compress.archivers.dump.ShortFileException;

        specialinvoke $r3.<org.apache.commons.compress.archivers.dump.ShortFileException: void <init>()>();

        throw $r3;

     label1:
        return 1;
    }

    public long getBytesRead()
    {
        long $l0;
        org.apache.commons.compress.archivers.dump.TapeInputStream r0;

        r0 := @this: org.apache.commons.compress.archivers.dump.TapeInputStream;

        $l0 = r0.<org.apache.commons.compress.archivers.dump.TapeInputStream: long bytesRead>;

        return $l0;
    }

    public static void <clinit>()
    {
        <org.apache.commons.compress.archivers.dump.TapeInputStream: int recordSize> = 1024;

        return;
    }
}
