public class com.hp.hpl.jena.sparql.algebra.op.OpGraph extends com.hp.hpl.jena.sparql.algebra.op.Op1
{
    private final com.hp.hpl.jena.graph.Node node;

    public void <init>(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.graph.Node r2;
        com.hp.hpl.jena.sparql.algebra.op.OpGraph r0;
        com.hp.hpl.jena.sparql.algebra.Op r1;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpGraph;

        r2 := @parameter0: com.hp.hpl.jena.graph.Node;

        r1 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.Op1: void <init>(com.hp.hpl.jena.sparql.algebra.Op)>(r1);

        r0.<com.hp.hpl.jena.sparql.algebra.op.OpGraph: com.hp.hpl.jena.graph.Node node> = r2;

        return;
    }

    public com.hp.hpl.jena.graph.Node getNode()
    {
        com.hp.hpl.jena.graph.Node $r1;
        com.hp.hpl.jena.sparql.algebra.op.OpGraph r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpGraph;

        $r1 = r0.<com.hp.hpl.jena.sparql.algebra.op.OpGraph: com.hp.hpl.jena.graph.Node node>;

        return $r1;
    }

    public java.lang.String getName()
    {
        com.hp.hpl.jena.sparql.algebra.op.OpGraph r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpGraph;

        return "graph";
    }

    public com.hp.hpl.jena.sparql.algebra.Op apply(com.hp.hpl.jena.sparql.algebra.Transform, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpGraph r1;
        com.hp.hpl.jena.sparql.algebra.Transform r0;
        com.hp.hpl.jena.sparql.algebra.Op r2, $r3;

        r1 := @this: com.hp.hpl.jena.sparql.algebra.op.OpGraph;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Transform;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r3 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.algebra.Transform: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpGraph,com.hp.hpl.jena.sparql.algebra.Op)>(r1, r2);

        return $r3;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.OpVisitor)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpGraph r1;
        com.hp.hpl.jena.sparql.algebra.OpVisitor r0;

        r1 := @this: com.hp.hpl.jena.sparql.algebra.op.OpGraph;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.OpVisitor;

        interfaceinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpVisitor: void visit(com.hp.hpl.jena.sparql.algebra.op.OpGraph)>(r1);

        return;
    }

    public com.hp.hpl.jena.sparql.algebra.op.Op1 copy(com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpGraph $r0, r1;
        com.hp.hpl.jena.graph.Node $r3;
        com.hp.hpl.jena.sparql.algebra.Op r2;

        r1 := @this: com.hp.hpl.jena.sparql.algebra.op.OpGraph;

        r2 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        $r0 = new com.hp.hpl.jena.sparql.algebra.op.OpGraph;

        $r3 = r1.<com.hp.hpl.jena.sparql.algebra.op.OpGraph: com.hp.hpl.jena.graph.Node node>;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.algebra.op.OpGraph: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.algebra.Op)>($r3, r2);

        return $r0;
    }

    public int hashCode()
    {
        com.hp.hpl.jena.sparql.algebra.op.OpGraph r0;
        int $i0, $i1, $i2;
        com.hp.hpl.jena.graph.Node $r1;
        com.hp.hpl.jena.sparql.algebra.Op $r2;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpGraph;

        $r1 = r0.<com.hp.hpl.jena.sparql.algebra.op.OpGraph: com.hp.hpl.jena.graph.Node node>;

        $i0 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: int hashCode()>();

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpGraph: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        $i2 = $i0 ^ $i1;

        return $i2;
    }

    public boolean equalTo(com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.util.NodeIsomorphismMap)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpGraph r1, r2;
        com.hp.hpl.jena.graph.Node $r3, $r4;
        com.hp.hpl.jena.sparql.util.NodeIsomorphismMap r7;
        com.hp.hpl.jena.sparql.algebra.Op r0, $r5, $r6;
        boolean $z0, $z1, $z2;

        r2 := @this: com.hp.hpl.jena.sparql.algebra.op.OpGraph;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        r7 := @parameter1: com.hp.hpl.jena.sparql.util.NodeIsomorphismMap;

        $z0 = r0 instanceof com.hp.hpl.jena.sparql.algebra.op.OpGraph;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r1 = (com.hp.hpl.jena.sparql.algebra.op.OpGraph) r0;

        $r4 = r2.<com.hp.hpl.jena.sparql.algebra.op.OpGraph: com.hp.hpl.jena.graph.Node node>;

        $r3 = r1.<com.hp.hpl.jena.sparql.algebra.op.OpGraph: com.hp.hpl.jena.graph.Node node>;

        $z1 = virtualinvoke $r4.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>($r3);

        if $z1 != 0 goto label2;

        return 0;

     label2:
        $r5 = virtualinvoke r2.<com.hp.hpl.jena.sparql.algebra.op.OpGraph: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        $r6 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpGraph: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        $z2 = interfaceinvoke $r5.<com.hp.hpl.jena.sparql.algebra.Op: boolean equalTo(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.util.NodeIsomorphismMap)>($r6, r7);

        return $z2;
    }
}
