public abstract class org.apache.commons.fileupload.FileUploadBase extends java.lang.Object
{
    public static final java.lang.String CONTENT_TYPE;
    public static final java.lang.String CONTENT_DISPOSITION;
    public static final java.lang.String CONTENT_LENGTH;
    public static final java.lang.String FORM_DATA;
    public static final java.lang.String ATTACHMENT;
    public static final java.lang.String MULTIPART;
    public static final java.lang.String MULTIPART_FORM_DATA;
    public static final java.lang.String MULTIPART_MIXED;
    public static final int MAX_HEADER_SIZE;
    private long sizeMax;
    private long fileSizeMax;
    private java.lang.String headerEncoding;
    private org.apache.commons.fileupload.ProgressListener listener;

    public void <init>()
    {
        org.apache.commons.fileupload.FileUploadBase r0;

        r0 := @this: org.apache.commons.fileupload.FileUploadBase;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.fileupload.FileUploadBase: long sizeMax> = -1L;

        r0.<org.apache.commons.fileupload.FileUploadBase: long fileSizeMax> = -1L;

        return;
    }

    public static final boolean isMultipartContent(org.apache.commons.fileupload.RequestContext)
    {
        java.lang.String $r1, $r2;
        org.apache.commons.fileupload.RequestContext r0;
        boolean $z0;

        r0 := @parameter0: org.apache.commons.fileupload.RequestContext;

        $r1 = interfaceinvoke r0.<org.apache.commons.fileupload.RequestContext: java.lang.String getContentType()>();

        if $r1 != null goto label1;

        return 0;

     label1:
        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("multipart/");

        if $z0 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    public static boolean isMultipartContent(javax.servlet.http.HttpServletRequest)
    {
        javax.servlet.http.HttpServletRequest r0;
        boolean $z0;

        r0 := @parameter0: javax.servlet.http.HttpServletRequest;

        $z0 = staticinvoke <org.apache.commons.fileupload.servlet.ServletFileUpload: boolean isMultipartContent(javax.servlet.http.HttpServletRequest)>(r0);

        return $z0;
    }

    public abstract org.apache.commons.fileupload.FileItemFactory getFileItemFactory();

    public abstract void setFileItemFactory(org.apache.commons.fileupload.FileItemFactory);

    public long getSizeMax()
    {
        long $l0;
        org.apache.commons.fileupload.FileUploadBase r0;

        r0 := @this: org.apache.commons.fileupload.FileUploadBase;

        $l0 = r0.<org.apache.commons.fileupload.FileUploadBase: long sizeMax>;

        return $l0;
    }

    public void setSizeMax(long)
    {
        long l0;
        org.apache.commons.fileupload.FileUploadBase r0;

        r0 := @this: org.apache.commons.fileupload.FileUploadBase;

        l0 := @parameter0: long;

        r0.<org.apache.commons.fileupload.FileUploadBase: long sizeMax> = l0;

        return;
    }

    public long getFileSizeMax()
    {
        long $l0;
        org.apache.commons.fileupload.FileUploadBase r0;

        r0 := @this: org.apache.commons.fileupload.FileUploadBase;

        $l0 = r0.<org.apache.commons.fileupload.FileUploadBase: long fileSizeMax>;

        return $l0;
    }

    public void setFileSizeMax(long)
    {
        long l0;
        org.apache.commons.fileupload.FileUploadBase r0;

        r0 := @this: org.apache.commons.fileupload.FileUploadBase;

        l0 := @parameter0: long;

        r0.<org.apache.commons.fileupload.FileUploadBase: long fileSizeMax> = l0;

        return;
    }

    public java.lang.String getHeaderEncoding()
    {
        org.apache.commons.fileupload.FileUploadBase r0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.fileupload.FileUploadBase;

        $r1 = r0.<org.apache.commons.fileupload.FileUploadBase: java.lang.String headerEncoding>;

        return $r1;
    }

    public void setHeaderEncoding(java.lang.String)
    {
        org.apache.commons.fileupload.FileUploadBase r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.fileupload.FileUploadBase;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.commons.fileupload.FileUploadBase: java.lang.String headerEncoding> = r1;

        return;
    }

    public java.util.List parseRequest(javax.servlet.http.HttpServletRequest) throws org.apache.commons.fileupload.FileUploadException
    {
        org.apache.commons.fileupload.servlet.ServletRequestContext $r1;
        javax.servlet.http.HttpServletRequest r2;
        java.util.List $r3;
        org.apache.commons.fileupload.FileUploadBase r0;

        r0 := @this: org.apache.commons.fileupload.FileUploadBase;

        r2 := @parameter0: javax.servlet.http.HttpServletRequest;

        $r1 = new org.apache.commons.fileupload.servlet.ServletRequestContext;

        specialinvoke $r1.<org.apache.commons.fileupload.servlet.ServletRequestContext: void <init>(javax.servlet.http.HttpServletRequest)>(r2);

        $r3 = virtualinvoke r0.<org.apache.commons.fileupload.FileUploadBase: java.util.List parseRequest(org.apache.commons.fileupload.RequestContext)>($r1);

        return $r3;
    }

    public org.apache.commons.fileupload.FileItemIterator getItemIterator(org.apache.commons.fileupload.RequestContext) throws org.apache.commons.fileupload.FileUploadException, java.io.IOException
    {
        org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl $r0;
        org.apache.commons.fileupload.FileUploadBase r1;
        org.apache.commons.fileupload.RequestContext r2;

        r1 := @this: org.apache.commons.fileupload.FileUploadBase;

        r2 := @parameter0: org.apache.commons.fileupload.RequestContext;

        $r0 = new org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl;

        specialinvoke $r0.<org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl: void <init>(org.apache.commons.fileupload.FileUploadBase,org.apache.commons.fileupload.RequestContext)>(r1, r2);

        return $r0;
    }

    public java.util.List parseRequest(org.apache.commons.fileupload.RequestContext) throws org.apache.commons.fileupload.FileUploadException
    {
        org.apache.commons.fileupload.RequestContext r2;
        java.lang.NullPointerException $r17;
        org.apache.commons.fileupload.FileUploadBase r1;
        boolean $z0, $z1, $z2, $z3, $z4, z5;
        org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl$FileItemStreamImpl $r8;
        org.apache.commons.fileupload.FileItemIterator $r3;
        java.lang.Throwable $r18, $r21, $r27, $r29, $r38;
        java.util.ArrayList $r0;
        org.apache.commons.fileupload.FileUploadBase$FileUploadIOException $r26, $r37;
        org.apache.commons.fileupload.FileItemStream $r7;
        java.lang.StringBuffer $r32, $r33, $r35;
        java.lang.String $r9, $r10, $r11, $r25, $r34, $r36;
        java.io.OutputStream $r14;
        java.util.Iterator $r5, $r22;
        org.apache.commons.fileupload.FileItem $r12, r20, r40;
        java.io.IOException $r23, $r30;
        org.apache.commons.fileupload.FileItemFactory $r4;
        org.apache.commons.fileupload.FileItemHeaders $r15;
        org.apache.commons.fileupload.FileItemHeadersSupport $r16;
        org.apache.commons.fileupload.FileUploadBase$IOFileUploadException $r31;
        java.lang.Object $r6, $r19;
        org.apache.commons.fileupload.FileUploadException $r24, $r28, $r39;
        java.io.InputStream $r13;

        r1 := @this: org.apache.commons.fileupload.FileUploadBase;

        r2 := @parameter0: org.apache.commons.fileupload.RequestContext;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        z5 = 0;

     label01:
        $r3 = virtualinvoke r1.<org.apache.commons.fileupload.FileUploadBase: org.apache.commons.fileupload.FileItemIterator getItemIterator(org.apache.commons.fileupload.RequestContext)>(r2);

        $r4 = virtualinvoke r1.<org.apache.commons.fileupload.FileUploadBase: org.apache.commons.fileupload.FileItemFactory getFileItemFactory()>();

        if $r4 != null goto label02;

        $r17 = new java.lang.NullPointerException;

        specialinvoke $r17.<java.lang.NullPointerException: void <init>(java.lang.String)>("No FileItemFactory has been set.");

        throw $r17;

     label02:
        $z0 = interfaceinvoke $r3.<org.apache.commons.fileupload.FileItemIterator: boolean hasNext()>();

        if $z0 == 0 goto label09;

        $r7 = interfaceinvoke $r3.<org.apache.commons.fileupload.FileItemIterator: org.apache.commons.fileupload.FileItemStream next()>();

        $r8 = (org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl$FileItemStreamImpl) $r7;

        $r9 = staticinvoke <org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl$FileItemStreamImpl: java.lang.String access$000(org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl$FileItemStreamImpl)>($r8);

        $r10 = interfaceinvoke $r7.<org.apache.commons.fileupload.FileItemStream: java.lang.String getFieldName()>();

        $r11 = interfaceinvoke $r7.<org.apache.commons.fileupload.FileItemStream: java.lang.String getContentType()>();

        $z2 = interfaceinvoke $r7.<org.apache.commons.fileupload.FileItemStream: boolean isFormField()>();

        $r12 = interfaceinvoke $r4.<org.apache.commons.fileupload.FileItemFactory: org.apache.commons.fileupload.FileItem createItem(java.lang.String,java.lang.String,boolean,java.lang.String)>($r10, $r11, $z2, $r9);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r12);

     label03:
        $r13 = interfaceinvoke $r7.<org.apache.commons.fileupload.FileItemStream: java.io.InputStream openStream()>();

        $r14 = interfaceinvoke $r12.<org.apache.commons.fileupload.FileItem: java.io.OutputStream getOutputStream()>();

        staticinvoke <org.apache.commons.fileupload.util.Streams: long copy(java.io.InputStream,java.io.OutputStream,boolean)>($r13, $r14, 1);

     label04:
        goto label07;

     label05:
        $r37 := @caughtexception;

        $r38 = virtualinvoke $r37.<org.apache.commons.fileupload.FileUploadBase$FileUploadIOException: java.lang.Throwable getCause()>();

        $r39 = (org.apache.commons.fileupload.FileUploadException) $r38;

        throw $r39;

     label06:
        $r30 := @caughtexception;

        $r31 = new org.apache.commons.fileupload.FileUploadBase$IOFileUploadException;

        $r32 = new java.lang.StringBuffer;

        specialinvoke $r32.<java.lang.StringBuffer: void <init>()>();

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Processing of multipart/form-data request failed. ");

        $r34 = virtualinvoke $r30.<java.io.IOException: java.lang.String getMessage()>();

        $r35 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r34);

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r31.<org.apache.commons.fileupload.FileUploadBase$IOFileUploadException: void <init>(java.lang.String,java.io.IOException)>($r36, $r30);

        throw $r31;

     label07:
        $z3 = $r12 instanceof org.apache.commons.fileupload.FileItemHeadersSupport;

        if $z3 == 0 goto label08;

        $r15 = interfaceinvoke $r7.<org.apache.commons.fileupload.FileItemStream: org.apache.commons.fileupload.FileItemHeaders getHeaders()>();

        $r16 = (org.apache.commons.fileupload.FileItemHeadersSupport) $r12;

        interfaceinvoke $r16.<org.apache.commons.fileupload.FileItemHeadersSupport: void setHeaders(org.apache.commons.fileupload.FileItemHeaders)>($r15);

     label08:
        goto label02;

     label09:
        z5 = 1;

     label10:
        if 1 != 0 goto label16;

        $r5 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

     label11:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label16;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r40 = (org.apache.commons.fileupload.FileItem) $r6;

     label12:
        interfaceinvoke r40.<org.apache.commons.fileupload.FileItem: void delete()>();

     label13:
        goto label15;

     label14:
        $r29 := @caughtexception;

     label15:
        goto label11;

     label16:
        return $r0;

     label17:
        $r26 := @caughtexception;

        $r27 = virtualinvoke $r26.<org.apache.commons.fileupload.FileUploadBase$FileUploadIOException: java.lang.Throwable getCause()>();

        $r28 = (org.apache.commons.fileupload.FileUploadException) $r27;

        throw $r28;

     label18:
        $r23 := @caughtexception;

        $r24 = new org.apache.commons.fileupload.FileUploadException;

        $r25 = virtualinvoke $r23.<java.io.IOException: java.lang.String getMessage()>();

        specialinvoke $r24.<org.apache.commons.fileupload.FileUploadException: void <init>(java.lang.String,java.lang.Throwable)>($r25, $r23);

        throw $r24;

     label19:
        $r21 := @caughtexception;

     label20:
        if 0 != 0 goto label26;

        $r22 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

     label21:
        $z4 = interfaceinvoke $r22.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label26;

        $r19 = interfaceinvoke $r22.<java.util.Iterator: java.lang.Object next()>();

        r20 = (org.apache.commons.fileupload.FileItem) $r19;

     label22:
        interfaceinvoke r20.<org.apache.commons.fileupload.FileItem: void delete()>();

     label23:
        goto label25;

     label24:
        $r18 := @caughtexception;

     label25:
        goto label21;

     label26:
        throw $r21;

        catch org.apache.commons.fileupload.FileUploadBase$FileUploadIOException from label03 to label04 with label05;
        catch java.io.IOException from label03 to label04 with label06;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch org.apache.commons.fileupload.FileUploadBase$FileUploadIOException from label01 to label10 with label17;
        catch java.io.IOException from label01 to label10 with label18;
        catch java.lang.Throwable from label01 to label10 with label19;
        catch java.lang.Throwable from label22 to label23 with label24;
        catch java.lang.Throwable from label17 to label20 with label19;
    }

    protected byte[] getBoundary(java.lang.String)
    {
        byte[] r8;
        org.apache.commons.fileupload.ParameterParser $r0;
        java.util.Map $r3;
        char[] $r2;
        java.lang.Object $r4;
        java.lang.String r1, r5;
        org.apache.commons.fileupload.FileUploadBase r7;
        java.io.UnsupportedEncodingException $r6;

        r7 := @this: org.apache.commons.fileupload.FileUploadBase;

        r1 := @parameter0: java.lang.String;

        $r0 = new org.apache.commons.fileupload.ParameterParser;

        specialinvoke $r0.<org.apache.commons.fileupload.ParameterParser: void <init>()>();

        virtualinvoke $r0.<org.apache.commons.fileupload.ParameterParser: void setLowerCaseNames(boolean)>(1);

        $r2 = newarray (char)[2];

        $r2[0] = 59;

        $r2[1] = 44;

        $r3 = virtualinvoke $r0.<org.apache.commons.fileupload.ParameterParser: java.util.Map parse(java.lang.String,char[])>(r1, $r2);

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>("boundary");

        r5 = (java.lang.String) $r4;

        if r5 != null goto label1;

        return null;

     label1:
        r8 = virtualinvoke r5.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-8859-1");

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        r8 = virtualinvoke r5.<java.lang.String: byte[] getBytes()>();

     label4:
        return r8;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    protected java.lang.String getFileName(java.util.Map)
    {
        java.util.Map r1;
        org.apache.commons.fileupload.FileUploadBase r0;
        java.lang.String $r2, $r3;

        r0 := @this: org.apache.commons.fileupload.FileUploadBase;

        r1 := @parameter0: java.util.Map;

        $r2 = virtualinvoke r0.<org.apache.commons.fileupload.FileUploadBase: java.lang.String getHeader(java.util.Map,java.lang.String)>(r1, "Content-disposition");

        $r3 = specialinvoke r0.<org.apache.commons.fileupload.FileUploadBase: java.lang.String getFileName(java.lang.String)>($r2);

        return $r3;
    }

    protected java.lang.String getFileName(org.apache.commons.fileupload.FileItemHeaders)
    {
        org.apache.commons.fileupload.FileUploadBase r0;
        org.apache.commons.fileupload.FileItemHeaders r1;
        java.lang.String $r2, $r3;

        r0 := @this: org.apache.commons.fileupload.FileUploadBase;

        r1 := @parameter0: org.apache.commons.fileupload.FileItemHeaders;

        $r2 = interfaceinvoke r1.<org.apache.commons.fileupload.FileItemHeaders: java.lang.String getHeader(java.lang.String)>("Content-disposition");

        $r3 = specialinvoke r0.<org.apache.commons.fileupload.FileUploadBase: java.lang.String getFileName(java.lang.String)>($r2);

        return $r3;
    }

    private java.lang.String getFileName(java.lang.String)
    {
        org.apache.commons.fileupload.ParameterParser $r2;
        java.util.Map $r3;
        java.lang.Object $r4;
        java.lang.String r0, $r1, r6, r7;
        org.apache.commons.fileupload.FileUploadBase r5;
        boolean $z0, $z1, $z2;

        r5 := @this: org.apache.commons.fileupload.FileUploadBase;

        r0 := @parameter0: java.lang.String;

        r6 = null;

        if r0 == null goto label3;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String toLowerCase()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("form-data");

        if $z0 != 0 goto label1;

        $z2 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("attachment");

        if $z2 == 0 goto label3;

     label1:
        $r2 = new org.apache.commons.fileupload.ParameterParser;

        specialinvoke $r2.<org.apache.commons.fileupload.ParameterParser: void <init>()>();

        virtualinvoke $r2.<org.apache.commons.fileupload.ParameterParser: void setLowerCaseNames(boolean)>(1);

        $r3 = virtualinvoke $r2.<org.apache.commons.fileupload.ParameterParser: java.util.Map parse(java.lang.String,char)>(r0, 59);

        $z1 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>("filename");

        if $z1 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>("filename");

        r7 = (java.lang.String) $r4;

        if r7 == null goto label2;

        r6 = virtualinvoke r7.<java.lang.String: java.lang.String trim()>();

        goto label3;

     label2:
        r6 = "";

     label3:
        return r6;
    }

    protected java.lang.String getFieldName(org.apache.commons.fileupload.FileItemHeaders)
    {
        org.apache.commons.fileupload.FileUploadBase r0;
        org.apache.commons.fileupload.FileItemHeaders r1;
        java.lang.String $r2, $r3;

        r0 := @this: org.apache.commons.fileupload.FileUploadBase;

        r1 := @parameter0: org.apache.commons.fileupload.FileItemHeaders;

        $r2 = interfaceinvoke r1.<org.apache.commons.fileupload.FileItemHeaders: java.lang.String getHeader(java.lang.String)>("Content-disposition");

        $r3 = specialinvoke r0.<org.apache.commons.fileupload.FileUploadBase: java.lang.String getFieldName(java.lang.String)>($r2);

        return $r3;
    }

    private java.lang.String getFieldName(java.lang.String)
    {
        org.apache.commons.fileupload.ParameterParser $r2;
        java.util.Map $r3;
        java.lang.Object $r4;
        java.lang.String r0, $r1, r6;
        org.apache.commons.fileupload.FileUploadBase r5;
        boolean $z0;

        r5 := @this: org.apache.commons.fileupload.FileUploadBase;

        r0 := @parameter0: java.lang.String;

        r6 = null;

        if r0 == null goto label1;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String toLowerCase()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("form-data");

        if $z0 == 0 goto label1;

        $r2 = new org.apache.commons.fileupload.ParameterParser;

        specialinvoke $r2.<org.apache.commons.fileupload.ParameterParser: void <init>()>();

        virtualinvoke $r2.<org.apache.commons.fileupload.ParameterParser: void setLowerCaseNames(boolean)>(1);

        $r3 = virtualinvoke $r2.<org.apache.commons.fileupload.ParameterParser: java.util.Map parse(java.lang.String,char)>(r0, 59);

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>("name");

        r6 = (java.lang.String) $r4;

        if r6 == null goto label1;

        r6 = virtualinvoke r6.<java.lang.String: java.lang.String trim()>();

     label1:
        return r6;
    }

    protected java.lang.String getFieldName(java.util.Map)
    {
        java.util.Map r1;
        org.apache.commons.fileupload.FileUploadBase r0;
        java.lang.String $r2, $r3;

        r0 := @this: org.apache.commons.fileupload.FileUploadBase;

        r1 := @parameter0: java.util.Map;

        $r2 = virtualinvoke r0.<org.apache.commons.fileupload.FileUploadBase: java.lang.String getHeader(java.util.Map,java.lang.String)>(r1, "Content-disposition");

        $r3 = specialinvoke r0.<org.apache.commons.fileupload.FileUploadBase: java.lang.String getFieldName(java.lang.String)>($r2);

        return $r3;
    }

    protected org.apache.commons.fileupload.FileItem createItem(java.util.Map, boolean) throws org.apache.commons.fileupload.FileUploadException
    {
        org.apache.commons.fileupload.FileItem $r6;
        org.apache.commons.fileupload.FileItemFactory $r1;
        java.util.Map r2;
        org.apache.commons.fileupload.FileUploadBase r0;
        java.lang.String $r3, $r4, $r5;
        boolean z0;

        r0 := @this: org.apache.commons.fileupload.FileUploadBase;

        r2 := @parameter0: java.util.Map;

        z0 := @parameter1: boolean;

        $r1 = virtualinvoke r0.<org.apache.commons.fileupload.FileUploadBase: org.apache.commons.fileupload.FileItemFactory getFileItemFactory()>();

        $r3 = virtualinvoke r0.<org.apache.commons.fileupload.FileUploadBase: java.lang.String getFieldName(java.util.Map)>(r2);

        $r4 = virtualinvoke r0.<org.apache.commons.fileupload.FileUploadBase: java.lang.String getHeader(java.util.Map,java.lang.String)>(r2, "Content-type");

        $r5 = virtualinvoke r0.<org.apache.commons.fileupload.FileUploadBase: java.lang.String getFileName(java.util.Map)>(r2);

        $r6 = interfaceinvoke $r1.<org.apache.commons.fileupload.FileItemFactory: org.apache.commons.fileupload.FileItem createItem(java.lang.String,java.lang.String,boolean,java.lang.String)>($r3, $r4, z0, $r5);

        return $r6;
    }

    protected org.apache.commons.fileupload.FileItemHeaders getParsedHeaders(java.lang.String)
    {
        java.lang.StringBuffer $r4, $r5, $r7, $r9;
        int $i0, $i1, $i2, i4, i5, $i6, $i7;
        java.lang.String r0, $r6, r8;
        org.apache.commons.fileupload.FileUploadBase r1;
        char $c3;
        org.apache.commons.fileupload.util.FileItemHeadersImpl $r2;

        r1 := @this: org.apache.commons.fileupload.FileUploadBase;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $r2 = virtualinvoke r1.<org.apache.commons.fileupload.FileUploadBase: org.apache.commons.fileupload.util.FileItemHeadersImpl newFileItemHeaders()>();

        i4 = 0;

     label1:
        $i1 = specialinvoke r1.<org.apache.commons.fileupload.FileUploadBase: int parseEndOfLine(java.lang.String,int)>(r0, i4);

        if i4 != $i1 goto label2;

        goto label9;

     label2:
        r8 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i4, $i1);

        i4 = $i1 + 2;

     label3:
        if i4 >= $i0 goto label8;

        i5 = i4;

     label4:
        if i5 >= $i0 goto label6;

        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i5);

        $i6 = (int) $c3;

        if $i6 == 32 goto label5;

        $i7 = (int) $c3;

        if $i7 == 9 goto label5;

        goto label6;

     label5:
        i5 = i5 + 1;

        goto label4;

     label6:
        if i5 != i4 goto label7;

        goto label8;

     label7:
        $i2 = specialinvoke r1.<org.apache.commons.fileupload.FileUploadBase: int parseEndOfLine(java.lang.String,int)>(r0, i5);

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r8);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r6 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i5, $i2);

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        i4 = $i2 + 2;

        goto label3;

     label8:
        specialinvoke r1.<org.apache.commons.fileupload.FileUploadBase: void parseHeaderLine(org.apache.commons.fileupload.util.FileItemHeadersImpl,java.lang.String)>($r2, r8);

        goto label1;

     label9:
        return $r2;
    }

    protected org.apache.commons.fileupload.util.FileItemHeadersImpl newFileItemHeaders()
    {
        org.apache.commons.fileupload.util.FileItemHeadersImpl $r0;
        org.apache.commons.fileupload.FileUploadBase r1;

        r1 := @this: org.apache.commons.fileupload.FileUploadBase;

        $r0 = new org.apache.commons.fileupload.util.FileItemHeadersImpl;

        specialinvoke $r0.<org.apache.commons.fileupload.util.FileItemHeadersImpl: void <init>()>();

        return $r0;
    }

    protected java.util.Map parseHeaders(java.lang.String)
    {
        java.util.HashMap $r3;
        java.lang.StringBuffer $r9, $r10, $r11, $r13;
        org.apache.commons.fileupload.FileUploadBase r0;
        java.lang.String r1, r6, r14;
        boolean $z0, $z1;
        java.util.Iterator $r4, $r7;
        org.apache.commons.fileupload.FileItemHeaders $r2;
        java.lang.Object $r5, $r8, $r12;

        r0 := @this: org.apache.commons.fileupload.FileUploadBase;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.commons.fileupload.FileUploadBase: org.apache.commons.fileupload.FileItemHeaders getParsedHeaders(java.lang.String)>(r1);

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        $r4 = interfaceinvoke $r2.<org.apache.commons.fileupload.FileItemHeaders: java.util.Iterator getHeaderNames()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.String) $r5;

        $r7 = interfaceinvoke $r2.<org.apache.commons.fileupload.FileItemHeaders: java.util.Iterator getHeaders(java.lang.String)>(r6);

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r14 = (java.lang.String) $r8;

     label2:
        $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r14);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

        $r12 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r12);

        r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label2;

     label3:
        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, r14);

        goto label1;

     label4:
        return $r3;
    }

    private int parseEndOfLine(java.lang.String, int)
    {
        java.lang.IllegalStateException $r3;
        char $c5;
        int i0, $i1, $i2, $i3, $i4, i6, $i8, $i9;
        java.lang.String r0;
        org.apache.commons.fileupload.FileUploadBase r2;

        r2 := @this: org.apache.commons.fileupload.FileUploadBase;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i6 = i0;

     label1:
        $i1 = virtualinvoke r0.<java.lang.String: int indexOf(int,int)>(13, i6);

        $i8 = (int) -1;

        if $i1 == $i8 goto label2;

        $i2 = $i1 + 1;

        $i3 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i2 < $i3 goto label3;

     label2:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Expected headers to be terminated by an empty line.");

        throw $r3;

     label3:
        $i4 = $i1 + 1;

        $c5 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i4);

        $i9 = (int) $c5;

        if $i9 != 10 goto label4;

        return $i1;

     label4:
        i6 = $i1 + 1;

        goto label1;
    }

    private void parseHeaderLine(org.apache.commons.fileupload.util.FileItemHeadersImpl, java.lang.String)
    {
        org.apache.commons.fileupload.util.FileItemHeadersImpl r5;
        int $i0, $i1, $i2, $i4;
        java.lang.String r0, $r1, $r2, $r3, $r4;
        org.apache.commons.fileupload.FileUploadBase r6;

        r6 := @this: org.apache.commons.fileupload.FileUploadBase;

        r5 := @parameter0: org.apache.commons.fileupload.util.FileItemHeadersImpl;

        r0 := @parameter1: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(58);

        $i4 = (int) -1;

        if $i0 != $i4 goto label1;

        return;

     label1:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String trim()>();

        $i1 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(58);

        $i2 = $i1 + 1;

        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i2);

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String trim()>();

        virtualinvoke r5.<org.apache.commons.fileupload.util.FileItemHeadersImpl: void addHeader(java.lang.String,java.lang.String)>($r2, $r4);

        return;
    }

    protected final java.lang.String getHeader(java.util.Map, java.lang.String)
    {
        java.util.Map r0;
        java.lang.Object $r3;
        java.lang.String r1, $r2, $r4;
        org.apache.commons.fileupload.FileUploadBase r5;

        r5 := @this: org.apache.commons.fileupload.FileUploadBase;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r1.<java.lang.String: java.lang.String toLowerCase()>();

        $r3 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        $r4 = (java.lang.String) $r3;

        return $r4;
    }

    public org.apache.commons.fileupload.ProgressListener getProgressListener()
    {
        org.apache.commons.fileupload.FileUploadBase r0;
        org.apache.commons.fileupload.ProgressListener $r1;

        r0 := @this: org.apache.commons.fileupload.FileUploadBase;

        $r1 = r0.<org.apache.commons.fileupload.FileUploadBase: org.apache.commons.fileupload.ProgressListener listener>;

        return $r1;
    }

    public void setProgressListener(org.apache.commons.fileupload.ProgressListener)
    {
        org.apache.commons.fileupload.FileUploadBase r0;
        org.apache.commons.fileupload.ProgressListener r1;

        r0 := @this: org.apache.commons.fileupload.FileUploadBase;

        r1 := @parameter0: org.apache.commons.fileupload.ProgressListener;

        r0.<org.apache.commons.fileupload.FileUploadBase: org.apache.commons.fileupload.ProgressListener listener> = r1;

        return;
    }

    static long access$300(org.apache.commons.fileupload.FileUploadBase)
    {
        long $l0;
        org.apache.commons.fileupload.FileUploadBase r0;

        r0 := @parameter0: org.apache.commons.fileupload.FileUploadBase;

        $l0 = r0.<org.apache.commons.fileupload.FileUploadBase: long fileSizeMax>;

        return $l0;
    }

    static long access$500(org.apache.commons.fileupload.FileUploadBase)
    {
        long $l0;
        org.apache.commons.fileupload.FileUploadBase r0;

        r0 := @parameter0: org.apache.commons.fileupload.FileUploadBase;

        $l0 = r0.<org.apache.commons.fileupload.FileUploadBase: long sizeMax>;

        return $l0;
    }

    static java.lang.String access$600(org.apache.commons.fileupload.FileUploadBase)
    {
        org.apache.commons.fileupload.FileUploadBase r0;
        java.lang.String $r1;

        r0 := @parameter0: org.apache.commons.fileupload.FileUploadBase;

        $r1 = r0.<org.apache.commons.fileupload.FileUploadBase: java.lang.String headerEncoding>;

        return $r1;
    }

    static org.apache.commons.fileupload.ProgressListener access$700(org.apache.commons.fileupload.FileUploadBase)
    {
        org.apache.commons.fileupload.FileUploadBase r0;
        org.apache.commons.fileupload.ProgressListener $r1;

        r0 := @parameter0: org.apache.commons.fileupload.FileUploadBase;

        $r1 = r0.<org.apache.commons.fileupload.FileUploadBase: org.apache.commons.fileupload.ProgressListener listener>;

        return $r1;
    }

    public static void <clinit>()
    {
        <org.apache.commons.fileupload.FileUploadBase: int MAX_HEADER_SIZE> = 1024;

        <org.apache.commons.fileupload.FileUploadBase: java.lang.String MULTIPART_MIXED> = "multipart/mixed";

        <org.apache.commons.fileupload.FileUploadBase: java.lang.String MULTIPART_FORM_DATA> = "multipart/form-data";

        <org.apache.commons.fileupload.FileUploadBase: java.lang.String MULTIPART> = "multipart/";

        <org.apache.commons.fileupload.FileUploadBase: java.lang.String ATTACHMENT> = "attachment";

        <org.apache.commons.fileupload.FileUploadBase: java.lang.String FORM_DATA> = "form-data";

        <org.apache.commons.fileupload.FileUploadBase: java.lang.String CONTENT_LENGTH> = "Content-length";

        <org.apache.commons.fileupload.FileUploadBase: java.lang.String CONTENT_DISPOSITION> = "Content-disposition";

        <org.apache.commons.fileupload.FileUploadBase: java.lang.String CONTENT_TYPE> = "Content-type";

        return;
    }
}
