public class org.apache.lucene.analysis.CharArrayMap extends java.util.AbstractMap
{
    private static final org.apache.lucene.analysis.CharArrayMap EMPTY_MAP;
    private static final int INIT_SIZE;
    private final org.apache.lucene.util.CharacterUtils charUtils;
    private boolean ignoreCase;
    private int count;
    final org.apache.lucene.util.Version matchVersion;
    char[][] keys;
    java.lang.Object[] values;
    private org.apache.lucene.analysis.CharArrayMap$EntrySet entrySet;
    private org.apache.lucene.analysis.CharArraySet keySet;
    static final boolean $assertionsDisabled;

    public void <init>(org.apache.lucene.util.Version, int, boolean)
    {
        java.lang.Object[] $r2, $r3;
        org.apache.lucene.util.CharacterUtils $r5;
        org.apache.lucene.analysis.CharArrayMap r0;
        char[][] $r1;
        org.apache.lucene.util.Version r4;
        int i0, $i1, $i2, i3;
        boolean z0;

        r0 := @this: org.apache.lucene.analysis.CharArrayMap;

        r4 := @parameter0: org.apache.lucene.util.Version;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        specialinvoke r0.<java.util.AbstractMap: void <init>()>();

        r0.<org.apache.lucene.analysis.CharArrayMap: org.apache.lucene.analysis.CharArrayMap$EntrySet entrySet> = null;

        r0.<org.apache.lucene.analysis.CharArrayMap: org.apache.lucene.analysis.CharArraySet keySet> = null;

        r0.<org.apache.lucene.analysis.CharArrayMap: boolean ignoreCase> = z0;

        i3 = 8;

     label1:
        $i1 = i0 >> 2;

        $i2 = i0 + $i1;

        if $i2 <= i3 goto label2;

        i3 = i3 << 1;

        goto label1;

     label2:
        $r1 = newarray (char[])[i3];

        r0.<org.apache.lucene.analysis.CharArrayMap: char[][] keys> = $r1;

        $r2 = newarray (java.lang.Object)[i3];

        $r3 = (java.lang.Object[]) $r2;

        r0.<org.apache.lucene.analysis.CharArrayMap: java.lang.Object[] values> = $r3;

        $r5 = staticinvoke <org.apache.lucene.util.CharacterUtils: org.apache.lucene.util.CharacterUtils getInstance(org.apache.lucene.util.Version)>(r4);

        r0.<org.apache.lucene.analysis.CharArrayMap: org.apache.lucene.util.CharacterUtils charUtils> = $r5;

        r0.<org.apache.lucene.analysis.CharArrayMap: org.apache.lucene.util.Version matchVersion> = r4;

        return;
    }

    public void <init>(org.apache.lucene.util.Version, java.util.Map, boolean)
    {
        java.util.Map r2;
        int $i0;
        org.apache.lucene.analysis.CharArrayMap r0;
        org.apache.lucene.util.Version r1;
        boolean z0;

        r0 := @this: org.apache.lucene.analysis.CharArrayMap;

        r1 := @parameter0: org.apache.lucene.util.Version;

        r2 := @parameter1: java.util.Map;

        z0 := @parameter2: boolean;

        $i0 = interfaceinvoke r2.<java.util.Map: int size()>();

        specialinvoke r0.<org.apache.lucene.analysis.CharArrayMap: void <init>(org.apache.lucene.util.Version,int,boolean)>(r1, $i0, z0);

        virtualinvoke r0.<org.apache.lucene.analysis.CharArrayMap: void putAll(java.util.Map)>(r2);

        return;
    }

    private void <init>(org.apache.lucene.analysis.CharArrayMap)
    {
        java.lang.Object[] $r3;
        org.apache.lucene.util.CharacterUtils $r4;
        org.apache.lucene.analysis.CharArrayMap r0, r1;
        char[][] $r2;
        org.apache.lucene.util.Version $r5;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.lucene.analysis.CharArrayMap;

        r1 := @parameter0: org.apache.lucene.analysis.CharArrayMap;

        specialinvoke r0.<java.util.AbstractMap: void <init>()>();

        r0.<org.apache.lucene.analysis.CharArrayMap: org.apache.lucene.analysis.CharArrayMap$EntrySet entrySet> = null;

        r0.<org.apache.lucene.analysis.CharArrayMap: org.apache.lucene.analysis.CharArraySet keySet> = null;

        $r2 = r1.<org.apache.lucene.analysis.CharArrayMap: char[][] keys>;

        r0.<org.apache.lucene.analysis.CharArrayMap: char[][] keys> = $r2;

        $r3 = r1.<org.apache.lucene.analysis.CharArrayMap: java.lang.Object[] values>;

        r0.<org.apache.lucene.analysis.CharArrayMap: java.lang.Object[] values> = $r3;

        $z0 = r1.<org.apache.lucene.analysis.CharArrayMap: boolean ignoreCase>;

        r0.<org.apache.lucene.analysis.CharArrayMap: boolean ignoreCase> = $z0;

        $i0 = r1.<org.apache.lucene.analysis.CharArrayMap: int count>;

        r0.<org.apache.lucene.analysis.CharArrayMap: int count> = $i0;

        $r4 = r1.<org.apache.lucene.analysis.CharArrayMap: org.apache.lucene.util.CharacterUtils charUtils>;

        r0.<org.apache.lucene.analysis.CharArrayMap: org.apache.lucene.util.CharacterUtils charUtils> = $r4;

        $r5 = r1.<org.apache.lucene.analysis.CharArrayMap: org.apache.lucene.util.Version matchVersion>;

        r0.<org.apache.lucene.analysis.CharArrayMap: org.apache.lucene.util.Version matchVersion> = $r5;

        return;
    }

    public void clear()
    {
        org.apache.lucene.analysis.CharArrayMap r0;
        java.lang.Object[] $r2;
        char[][] $r1;

        r0 := @this: org.apache.lucene.analysis.CharArrayMap;

        r0.<org.apache.lucene.analysis.CharArrayMap: int count> = 0;

        $r1 = r0.<org.apache.lucene.analysis.CharArrayMap: char[][] keys>;

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],java.lang.Object)>($r1, null);

        $r2 = r0.<org.apache.lucene.analysis.CharArrayMap: java.lang.Object[] values>;

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],java.lang.Object)>($r2, null);

        return;
    }

    public boolean containsKey(char[], int, int)
    {
        org.apache.lucene.analysis.CharArrayMap r0;
        char[][] $r2;
        int i0, i1, $i2;
        char[] r1, $r3;
        boolean $z0;

        r0 := @this: org.apache.lucene.analysis.CharArrayMap;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<org.apache.lucene.analysis.CharArrayMap: char[][] keys>;

        $i2 = specialinvoke r0.<org.apache.lucene.analysis.CharArrayMap: int getSlot(char[],int,int)>(r1, i0, i1);

        $r3 = $r2[$i2];

        if $r3 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean containsKey(java.lang.CharSequence)
    {
        java.lang.CharSequence r1;
        int $i0;
        char[] $r3;
        org.apache.lucene.analysis.CharArrayMap r0;
        char[][] $r2;
        boolean $z0;

        r0 := @this: org.apache.lucene.analysis.CharArrayMap;

        r1 := @parameter0: java.lang.CharSequence;

        $r2 = r0.<org.apache.lucene.analysis.CharArrayMap: char[][] keys>;

        $i0 = specialinvoke r0.<org.apache.lucene.analysis.CharArrayMap: int getSlot(java.lang.CharSequence)>(r1);

        $r3 = $r2[$i0];

        if $r3 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean containsKey(java.lang.Object)
    {
        org.apache.lucene.analysis.CharArrayMap r1;
        int $i0;
        char[] $r3, r4;
        java.lang.Object r0;
        java.lang.String $r2;
        boolean $z0, $z1, $z2;

        r1 := @this: org.apache.lucene.analysis.CharArrayMap;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof char[];

        if $z0 == 0 goto label1;

        $r3 = (char[]) r0;

        r4 = (char[]) $r3;

        $i0 = lengthof r4;

        $z2 = virtualinvoke r1.<org.apache.lucene.analysis.CharArrayMap: boolean containsKey(char[],int,int)>(r4, 0, $i0);

        return $z2;

     label1:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $z1 = virtualinvoke r1.<org.apache.lucene.analysis.CharArrayMap: boolean containsKey(java.lang.CharSequence)>($r2);

        return $z1;
    }

    public java.lang.Object get(char[], int, int)
    {
        java.lang.Object[] $r2;
        int i0, i1, $i2;
        char[] r1;
        java.lang.Object $r3;
        org.apache.lucene.analysis.CharArrayMap r0;

        r0 := @this: org.apache.lucene.analysis.CharArrayMap;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<org.apache.lucene.analysis.CharArrayMap: java.lang.Object[] values>;

        $i2 = specialinvoke r0.<org.apache.lucene.analysis.CharArrayMap: int getSlot(char[],int,int)>(r1, i0, i1);

        $r3 = $r2[$i2];

        return $r3;
    }

    public java.lang.Object get(java.lang.CharSequence)
    {
        java.lang.Object[] $r2;
        java.lang.CharSequence r1;
        int $i0;
        java.lang.Object $r3;
        org.apache.lucene.analysis.CharArrayMap r0;

        r0 := @this: org.apache.lucene.analysis.CharArrayMap;

        r1 := @parameter0: java.lang.CharSequence;

        $r2 = r0.<org.apache.lucene.analysis.CharArrayMap: java.lang.Object[] values>;

        $i0 = specialinvoke r0.<org.apache.lucene.analysis.CharArrayMap: int getSlot(java.lang.CharSequence)>(r1);

        $r3 = $r2[$i0];

        return $r3;
    }

    public java.lang.Object get(java.lang.Object)
    {
        org.apache.lucene.analysis.CharArrayMap r1;
        int $i0;
        char[] $r4, r5;
        java.lang.Object r0, $r3, $r6;
        java.lang.String $r2;
        boolean $z0;

        r1 := @this: org.apache.lucene.analysis.CharArrayMap;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof char[];

        if $z0 == 0 goto label1;

        $r4 = (char[]) r0;

        r5 = (char[]) $r4;

        $i0 = lengthof r5;

        $r6 = virtualinvoke r1.<org.apache.lucene.analysis.CharArrayMap: java.lang.Object get(char[],int,int)>(r5, 0, $i0);

        return $r6;

     label1:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $r3 = virtualinvoke r1.<org.apache.lucene.analysis.CharArrayMap: java.lang.Object get(java.lang.CharSequence)>($r2);

        return $r3;
    }

    private int getSlot(char[], int, int)
    {
        org.apache.lucene.analysis.CharArrayMap r0;
        char[][] $r2, $r3, $r4, $r5;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, i7, $i8, $i9, $i10, $i11, i12, i13;
        boolean $z0, $z1;
        char[] r1, $r6, r7;

        r0 := @this: org.apache.lucene.analysis.CharArrayMap;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = specialinvoke r0.<org.apache.lucene.analysis.CharArrayMap: int getHashCode(char[],int,int)>(r1, i0, i1);

        i12 = $i2;

        $r2 = r0.<org.apache.lucene.analysis.CharArrayMap: char[][] keys>;

        $i3 = lengthof $r2;

        $i4 = $i3 - 1;

        i13 = $i2 & $i4;

        $r3 = r0.<org.apache.lucene.analysis.CharArrayMap: char[][] keys>;

        r7 = $r3[i13];

        if r7 == null goto label2;

        $z0 = specialinvoke r0.<org.apache.lucene.analysis.CharArrayMap: boolean equals(char[],int,int,char[])>(r1, i0, i1, r7);

        if $z0 != 0 goto label2;

        $i5 = $i2 >> 8;

        $i6 = $i5 + $i2;

        i7 = $i6 | 1;

     label1:
        $i10 = i12 + i7;

        i12 = $i10;

        $r4 = r0.<org.apache.lucene.analysis.CharArrayMap: char[][] keys>;

        $i8 = lengthof $r4;

        $i9 = $i8 - 1;

        $i11 = $i10 & $i9;

        i13 = $i11;

        $r5 = r0.<org.apache.lucene.analysis.CharArrayMap: char[][] keys>;

        $r6 = $r5[$i11];

        if $r6 == null goto label2;

        $z1 = specialinvoke r0.<org.apache.lucene.analysis.CharArrayMap: boolean equals(char[],int,int,char[])>(r1, i0, i1, $r6);

        if $z1 == 0 goto label1;

     label2:
        return i13;
    }

    private int getSlot(java.lang.CharSequence)
    {
        org.apache.lucene.analysis.CharArrayMap r0;
        char[][] $r2, $r3, $r4, $r5;
        int $i0, $i1, $i2, $i3, $i4, i5, $i6, $i7, $i8, $i9, i10, i11;
        boolean $z0, $z1;
        java.lang.CharSequence r1;
        char[] $r6, r7;

        r0 := @this: org.apache.lucene.analysis.CharArrayMap;

        r1 := @parameter0: java.lang.CharSequence;

        $i0 = specialinvoke r0.<org.apache.lucene.analysis.CharArrayMap: int getHashCode(java.lang.CharSequence)>(r1);

        i10 = $i0;

        $r2 = r0.<org.apache.lucene.analysis.CharArrayMap: char[][] keys>;

        $i1 = lengthof $r2;

        $i2 = $i1 - 1;

        i11 = $i0 & $i2;

        $r3 = r0.<org.apache.lucene.analysis.CharArrayMap: char[][] keys>;

        r7 = $r3[i11];

        if r7 == null goto label2;

        $z0 = specialinvoke r0.<org.apache.lucene.analysis.CharArrayMap: boolean equals(java.lang.CharSequence,char[])>(r1, r7);

        if $z0 != 0 goto label2;

        $i3 = $i0 >> 8;

        $i4 = $i3 + $i0;

        i5 = $i4 | 1;

     label1:
        $i8 = i10 + i5;

        i10 = $i8;

        $r4 = r0.<org.apache.lucene.analysis.CharArrayMap: char[][] keys>;

        $i6 = lengthof $r4;

        $i7 = $i6 - 1;

        $i9 = $i8 & $i7;

        i11 = $i9;

        $r5 = r0.<org.apache.lucene.analysis.CharArrayMap: char[][] keys>;

        $r6 = $r5[$i9];

        if $r6 == null goto label2;

        $z1 = specialinvoke r0.<org.apache.lucene.analysis.CharArrayMap: boolean equals(java.lang.CharSequence,char[])>(r1, $r6);

        if $z1 == 0 goto label1;

     label2:
        return i11;
    }

    public java.lang.Object put(java.lang.CharSequence, java.lang.Object)
    {
        java.lang.CharSequence r1;
        java.lang.Object r3, $r4;
        org.apache.lucene.analysis.CharArrayMap r0;
        java.lang.String $r2;

        r0 := @this: org.apache.lucene.analysis.CharArrayMap;

        r1 := @parameter0: java.lang.CharSequence;

        r3 := @parameter1: java.lang.Object;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        $r4 = virtualinvoke r0.<org.apache.lucene.analysis.CharArrayMap: java.lang.Object put(java.lang.String,java.lang.Object)>($r2, r3);

        return $r4;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        org.apache.lucene.analysis.CharArrayMap r1;
        char[] $r5, $r6;
        java.lang.Object r0, r3, $r4, $r7;
        java.lang.String $r2;
        boolean $z0;

        r1 := @this: org.apache.lucene.analysis.CharArrayMap;

        r0 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Object;

        $z0 = r0 instanceof char[];

        if $z0 == 0 goto label1;

        $r5 = (char[]) r0;

        $r6 = (char[]) $r5;

        $r7 = virtualinvoke r1.<org.apache.lucene.analysis.CharArrayMap: java.lang.Object put(char[],java.lang.Object)>($r6, r3);

        return $r7;

     label1:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $r4 = virtualinvoke r1.<org.apache.lucene.analysis.CharArrayMap: java.lang.Object put(java.lang.String,java.lang.Object)>($r2, r3);

        return $r4;
    }

    public java.lang.Object put(java.lang.String, java.lang.Object)
    {
        char[] $r2;
        java.lang.Object r3, $r4;
        org.apache.lucene.analysis.CharArrayMap r0;
        java.lang.String r1;

        r0 := @this: org.apache.lucene.analysis.CharArrayMap;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.Object;

        $r2 = virtualinvoke r1.<java.lang.String: char[] toCharArray()>();

        $r4 = virtualinvoke r0.<org.apache.lucene.analysis.CharArrayMap: java.lang.Object put(char[],java.lang.Object)>($r2, r3);

        return $r4;
    }

    public java.lang.Object put(char[], java.lang.Object)
    {
        java.lang.Object[] $r6, $r8, $r10;
        org.apache.lucene.util.CharacterUtils $r11;
        org.apache.lucene.analysis.CharArrayMap r0;
        char[][] $r2, $r4, $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13;
        boolean $z0;
        char[] r1, $r3;
        java.lang.Object r5, r9;

        r0 := @this: org.apache.lucene.analysis.CharArrayMap;

        r1 := @parameter0: char[];

        r5 := @parameter1: java.lang.Object;

        $z0 = r0.<org.apache.lucene.analysis.CharArrayMap: boolean ignoreCase>;

        if $z0 == 0 goto label2;

        i13 = 0;

     label1:
        $i9 = lengthof r1;

        if i13 >= $i9 goto label2;

        $r11 = r0.<org.apache.lucene.analysis.CharArrayMap: org.apache.lucene.util.CharacterUtils charUtils>;

        $i10 = virtualinvoke $r11.<org.apache.lucene.util.CharacterUtils: int codePointAt(char[],int)>(r1, i13);

        $i11 = staticinvoke <java.lang.Character: int toLowerCase(int)>($i10);

        $i12 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>($i11, r1, i13);

        i13 = i13 + $i12;

        goto label1;

     label2:
        $i0 = lengthof r1;

        $i1 = specialinvoke r0.<org.apache.lucene.analysis.CharArrayMap: int getSlot(char[],int,int)>(r1, 0, $i0);

        $r2 = r0.<org.apache.lucene.analysis.CharArrayMap: char[][] keys>;

        $r3 = $r2[$i1];

        if $r3 == null goto label3;

        $r8 = r0.<org.apache.lucene.analysis.CharArrayMap: java.lang.Object[] values>;

        r9 = $r8[$i1];

        $r10 = r0.<org.apache.lucene.analysis.CharArrayMap: java.lang.Object[] values>;

        $r10[$i1] = r5;

        return r9;

     label3:
        $r4 = r0.<org.apache.lucene.analysis.CharArrayMap: char[][] keys>;

        $r4[$i1] = r1;

        $r6 = r0.<org.apache.lucene.analysis.CharArrayMap: java.lang.Object[] values>;

        $r6[$i1] = r5;

        $i2 = r0.<org.apache.lucene.analysis.CharArrayMap: int count>;

        $i3 = $i2 + 1;

        r0.<org.apache.lucene.analysis.CharArrayMap: int count> = $i3;

        $i6 = r0.<org.apache.lucene.analysis.CharArrayMap: int count>;

        $i4 = r0.<org.apache.lucene.analysis.CharArrayMap: int count>;

        $i5 = $i4 >> 2;

        $i8 = $i6 + $i5;

        $r7 = r0.<org.apache.lucene.analysis.CharArrayMap: char[][] keys>;

        $i7 = lengthof $r7;

        if $i8 <= $i7 goto label4;

        specialinvoke r0.<org.apache.lucene.analysis.CharArrayMap: void rehash()>();

     label4:
        return null;
    }

    private void rehash()
    {
        java.lang.Object[] $r3, $r4, $r8, $r10, $r12;
        org.apache.lucene.analysis.CharArrayMap r0;
        java.lang.AssertionError $r13;
        char[][] $r1, $r2, $r6, $r9, $r11;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, $i7;
        boolean $z0;
        char[] r5;
        java.lang.Object $r7;

        r0 := @this: org.apache.lucene.analysis.CharArrayMap;

        $z0 = <org.apache.lucene.analysis.CharArrayMap: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r9 = r0.<org.apache.lucene.analysis.CharArrayMap: char[][] keys>;

        $i4 = lengthof $r9;

        $r10 = r0.<org.apache.lucene.analysis.CharArrayMap: java.lang.Object[] values>;

        $i3 = lengthof $r10;

        if $i4 == $i3 goto label1;

        $r13 = new java.lang.AssertionError;

        specialinvoke $r13.<java.lang.AssertionError: void <init>()>();

        throw $r13;

     label1:
        $r1 = r0.<org.apache.lucene.analysis.CharArrayMap: char[][] keys>;

        $i0 = lengthof $r1;

        $i5 = 2 * $i0;

        $r11 = r0.<org.apache.lucene.analysis.CharArrayMap: char[][] keys>;

        $r12 = r0.<org.apache.lucene.analysis.CharArrayMap: java.lang.Object[] values>;

        $r2 = newarray (char[])[$i5];

        r0.<org.apache.lucene.analysis.CharArrayMap: char[][] keys> = $r2;

        $r3 = newarray (java.lang.Object)[$i5];

        $r4 = (java.lang.Object[]) $r3;

        r0.<org.apache.lucene.analysis.CharArrayMap: java.lang.Object[] values> = $r4;

        i6 = 0;

     label2:
        $i7 = lengthof $r11;

        if i6 >= $i7 goto label4;

        r5 = $r11[i6];

        if r5 == null goto label3;

        $i1 = lengthof r5;

        $i2 = specialinvoke r0.<org.apache.lucene.analysis.CharArrayMap: int getSlot(char[],int,int)>(r5, 0, $i1);

        $r6 = r0.<org.apache.lucene.analysis.CharArrayMap: char[][] keys>;

        $r6[$i2] = r5;

        $r8 = r0.<org.apache.lucene.analysis.CharArrayMap: java.lang.Object[] values>;

        $r7 = $r12[i6];

        $r8[$i2] = $r7;

     label3:
        i6 = i6 + 1;

        goto label2;

     label4:
        return;
    }

    private boolean equals(char[], int, int, char[])
    {
        org.apache.lucene.util.CharacterUtils $r3, $r4;
        org.apache.lucene.analysis.CharArrayMap r1;
        int i0, $i1, i2, i3, $i4, $i7, $i8, $i9, $i10, $i11, i12, i13, $i14, $i15;
        boolean $z0;
        char $c5, $c6;
        char[] r0, r2;

        r1 := @this: org.apache.lucene.analysis.CharArrayMap;

        r2 := @parameter0: char[];

        i2 := @parameter1: int;

        i0 := @parameter2: int;

        r0 := @parameter3: char[];

        $i1 = lengthof r0;

        if i0 == $i1 goto label1;

        return 0;

     label1:
        i3 = i2 + i0;

        $z0 = r1.<org.apache.lucene.analysis.CharArrayMap: boolean ignoreCase>;

        if $z0 == 0 goto label5;

        i12 = 0;

     label2:
        if i12 >= i0 goto label4;

        $r3 = r1.<org.apache.lucene.analysis.CharArrayMap: org.apache.lucene.util.CharacterUtils charUtils>;

        $i7 = i2 + i12;

        $i8 = virtualinvoke $r3.<org.apache.lucene.util.CharacterUtils: int codePointAt(char[],int,int)>(r2, $i7, i3);

        $i9 = staticinvoke <java.lang.Character: int toLowerCase(int)>($i8);

        $r4 = r1.<org.apache.lucene.analysis.CharArrayMap: org.apache.lucene.util.CharacterUtils charUtils>;

        $i10 = virtualinvoke $r4.<org.apache.lucene.util.CharacterUtils: int codePointAt(char[],int)>(r0, i12);

        if $i9 == $i10 goto label3;

        return 0;

     label3:
        $i11 = staticinvoke <java.lang.Character: int charCount(int)>($i8);

        i12 = i12 + $i11;

        goto label2;

     label4:
        goto label8;

     label5:
        i13 = 0;

     label6:
        if i13 >= i0 goto label8;

        $i4 = i2 + i13;

        $c6 = r2[$i4];

        $c5 = r0[i13];

        $i14 = (int) $c6;

        $i15 = (int) $c5;

        if $i14 == $i15 goto label7;

        return 0;

     label7:
        i13 = i13 + 1;

        goto label6;

     label8:
        return 1;
    }

    private boolean equals(java.lang.CharSequence, char[])
    {
        org.apache.lucene.util.CharacterUtils $r3, $r4;
        org.apache.lucene.analysis.CharArrayMap r2;
        int $i0, $i1, $i4, $i5, $i6, $i7, i8, i9, $i10, $i11;
        boolean $z0;
        java.lang.CharSequence r0;
        char $c2, $c3;
        char[] r1;

        r2 := @this: org.apache.lucene.analysis.CharArrayMap;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: char[];

        $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        $i1 = lengthof r1;

        if $i0 == $i1 goto label1;

        return 0;

     label1:
        $z0 = r2.<org.apache.lucene.analysis.CharArrayMap: boolean ignoreCase>;

        if $z0 == 0 goto label5;

        i8 = 0;

     label2:
        if i8 >= $i0 goto label4;

        $r3 = r2.<org.apache.lucene.analysis.CharArrayMap: org.apache.lucene.util.CharacterUtils charUtils>;

        $i4 = virtualinvoke $r3.<org.apache.lucene.util.CharacterUtils: int codePointAt(java.lang.CharSequence,int)>(r0, i8);

        $i5 = staticinvoke <java.lang.Character: int toLowerCase(int)>($i4);

        $r4 = r2.<org.apache.lucene.analysis.CharArrayMap: org.apache.lucene.util.CharacterUtils charUtils>;

        $i6 = virtualinvoke $r4.<org.apache.lucene.util.CharacterUtils: int codePointAt(char[],int)>(r1, i8);

        if $i5 == $i6 goto label3;

        return 0;

     label3:
        $i7 = staticinvoke <java.lang.Character: int charCount(int)>($i4);

        i8 = i8 + $i7;

        goto label2;

     label4:
        goto label8;

     label5:
        i9 = 0;

     label6:
        if i9 >= $i0 goto label8;

        $c2 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i9);

        $c3 = r1[i9];

        $i10 = (int) $c2;

        $i11 = (int) $c3;

        if $i10 == $i11 goto label7;

        return 0;

     label7:
        i9 = i9 + 1;

        goto label6;

     label8:
        return 1;
    }

    private int getHashCode(char[], int, int)
    {
        org.apache.lucene.util.CharacterUtils $r2;
        org.apache.lucene.analysis.CharArrayMap r1;
        java.lang.NullPointerException $r4;
        int i0, i1, i2, $i4, $i5, $i6, $i7, $i8, i9, i10, i11, $i12;
        boolean $z0;
        char $c3;
        char[] r0;

        r1 := @this: org.apache.lucene.analysis.CharArrayMap;

        r0 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r0 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>()>();

        throw $r4;

     label1:
        i9 = 0;

        i2 = i0 + i1;

        $z0 = r1.<org.apache.lucene.analysis.CharArrayMap: boolean ignoreCase>;

        if $z0 == 0 goto label4;

        i10 = i0;

     label2:
        if i10 >= i2 goto label3;

        $r2 = r1.<org.apache.lucene.analysis.CharArrayMap: org.apache.lucene.util.CharacterUtils charUtils>;

        $i5 = virtualinvoke $r2.<org.apache.lucene.util.CharacterUtils: int codePointAt(char[],int,int)>(r0, i10, i2);

        $i6 = i9 * 31;

        $i7 = staticinvoke <java.lang.Character: int toLowerCase(int)>($i5);

        i9 = $i6 + $i7;

        $i8 = staticinvoke <java.lang.Character: int charCount(int)>($i5);

        i10 = i10 + $i8;

        goto label2;

     label3:
        goto label6;

     label4:
        i11 = i0;

     label5:
        if i11 >= i2 goto label6;

        $i4 = i9 * 31;

        $c3 = r0[i11];

        $i12 = (int) $c3;

        i9 = $i4 + $i12;

        i11 = i11 + 1;

        goto label5;

     label6:
        return i9;
    }

    private int getHashCode(java.lang.CharSequence)
    {
        org.apache.lucene.util.CharacterUtils $r2;
        org.apache.lucene.analysis.CharArrayMap r1;
        java.lang.NullPointerException $r4;
        int $i0, $i1, $i3, $i4, $i5, $i6, i7, i8, i9, $i10;
        boolean $z0;
        java.lang.CharSequence r0;
        char $c2;

        r1 := @this: org.apache.lucene.analysis.CharArrayMap;

        r0 := @parameter0: java.lang.CharSequence;

        if r0 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>()>();

        throw $r4;

     label1:
        i7 = 0;

        $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        $z0 = r1.<org.apache.lucene.analysis.CharArrayMap: boolean ignoreCase>;

        if $z0 == 0 goto label4;

        i8 = 0;

     label2:
        if i8 >= $i0 goto label3;

        $r2 = r1.<org.apache.lucene.analysis.CharArrayMap: org.apache.lucene.util.CharacterUtils charUtils>;

        $i3 = virtualinvoke $r2.<org.apache.lucene.util.CharacterUtils: int codePointAt(java.lang.CharSequence,int)>(r0, i8);

        $i4 = i7 * 31;

        $i5 = staticinvoke <java.lang.Character: int toLowerCase(int)>($i3);

        i7 = $i4 + $i5;

        $i6 = staticinvoke <java.lang.Character: int charCount(int)>($i3);

        i8 = i8 + $i6;

        goto label2;

     label3:
        goto label6;

     label4:
        i9 = 0;

     label5:
        if i9 >= $i0 goto label6;

        $i1 = i7 * 31;

        $c2 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i9);

        $i10 = (int) $c2;

        i7 = $i1 + $i10;

        i9 = i9 + 1;

        goto label5;

     label6:
        return i7;
    }

    public java.lang.Object remove(java.lang.Object)
    {
        java.lang.UnsupportedOperationException $r0;
        java.lang.Object r2;
        org.apache.lucene.analysis.CharArrayMap r1;

        r1 := @this: org.apache.lucene.analysis.CharArrayMap;

        r2 := @parameter0: java.lang.Object;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public int size()
    {
        int $i0;
        org.apache.lucene.analysis.CharArrayMap r0;

        r0 := @this: org.apache.lucene.analysis.CharArrayMap;

        $i0 = r0.<org.apache.lucene.analysis.CharArrayMap: int count>;

        return $i0;
    }

    public java.lang.String toString()
    {
        java.util.Map$Entry r7;
        java.util.Iterator $r3;
        org.apache.lucene.analysis.CharArrayMap$EntrySet $r2;
        org.apache.lucene.analysis.CharArrayMap r1;
        int $i0;
        java.lang.StringBuilder $r0, $r4;
        java.lang.Object $r6;
        java.lang.String $r5;
        boolean $z0;

        r1 := @this: org.apache.lucene.analysis.CharArrayMap;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>("{");

        $r2 = virtualinvoke r1.<org.apache.lucene.analysis.CharArrayMap: org.apache.lucene.analysis.CharArrayMap$EntrySet entrySet()>();

        $r3 = virtualinvoke $r2.<org.apache.lucene.analysis.CharArrayMap$EntrySet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.Map$Entry) $r6;

        $i0 = virtualinvoke $r0.<java.lang.StringBuilder: int length()>();

        if $i0 <= 1 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label2:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        goto label1;

     label3:
        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    org.apache.lucene.analysis.CharArrayMap$EntrySet createEntrySet()
    {
        org.apache.lucene.analysis.CharArrayMap r1;
        org.apache.lucene.analysis.CharArrayMap$EntrySet $r0;

        r1 := @this: org.apache.lucene.analysis.CharArrayMap;

        $r0 = new org.apache.lucene.analysis.CharArrayMap$EntrySet;

        specialinvoke $r0.<org.apache.lucene.analysis.CharArrayMap$EntrySet: void <init>(org.apache.lucene.analysis.CharArrayMap,boolean,org.apache.lucene.analysis.CharArrayMap$1)>(r1, 1, null);

        return $r0;
    }

    public final org.apache.lucene.analysis.CharArrayMap$EntrySet entrySet()
    {
        org.apache.lucene.analysis.CharArrayMap$EntrySet $r1, $r2, $r3;
        org.apache.lucene.analysis.CharArrayMap r0;

        r0 := @this: org.apache.lucene.analysis.CharArrayMap;

        $r1 = r0.<org.apache.lucene.analysis.CharArrayMap: org.apache.lucene.analysis.CharArrayMap$EntrySet entrySet>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<org.apache.lucene.analysis.CharArrayMap: org.apache.lucene.analysis.CharArrayMap$EntrySet createEntrySet()>();

        r0.<org.apache.lucene.analysis.CharArrayMap: org.apache.lucene.analysis.CharArrayMap$EntrySet entrySet> = $r3;

     label1:
        $r2 = r0.<org.apache.lucene.analysis.CharArrayMap: org.apache.lucene.analysis.CharArrayMap$EntrySet entrySet>;

        return $r2;
    }

    final java.util.Set originalKeySet()
    {
        java.util.Set $r1;
        org.apache.lucene.analysis.CharArrayMap r0;

        r0 := @this: org.apache.lucene.analysis.CharArrayMap;

        $r1 = specialinvoke r0.<java.util.AbstractMap: java.util.Set keySet()>();

        return $r1;
    }

    public final org.apache.lucene.analysis.CharArraySet keySet()
    {
        org.apache.lucene.analysis.CharArraySet $r1, $r2;
        org.apache.lucene.analysis.CharArrayMap$1 $r3;
        org.apache.lucene.analysis.CharArrayMap r0;

        r0 := @this: org.apache.lucene.analysis.CharArrayMap;

        $r1 = r0.<org.apache.lucene.analysis.CharArrayMap: org.apache.lucene.analysis.CharArraySet keySet>;

        if $r1 != null goto label1;

        $r3 = new org.apache.lucene.analysis.CharArrayMap$1;

        specialinvoke $r3.<org.apache.lucene.analysis.CharArrayMap$1: void <init>(org.apache.lucene.analysis.CharArrayMap,org.apache.lucene.analysis.CharArrayMap)>(r0, r0);

        r0.<org.apache.lucene.analysis.CharArrayMap: org.apache.lucene.analysis.CharArraySet keySet> = $r3;

     label1:
        $r2 = r0.<org.apache.lucene.analysis.CharArrayMap: org.apache.lucene.analysis.CharArraySet keySet>;

        return $r2;
    }

    public static org.apache.lucene.analysis.CharArrayMap unmodifiableMap(org.apache.lucene.analysis.CharArrayMap)
    {
        org.apache.lucene.analysis.CharArrayMap$UnmodifiableCharArrayMap $r3;
        org.apache.lucene.analysis.CharArrayMap r0, $r1, $r2;
        java.lang.NullPointerException $r4;
        boolean $z0, $z1;

        r0 := @parameter0: org.apache.lucene.analysis.CharArrayMap;

        if r0 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("Given map is null");

        throw $r4;

     label1:
        $r1 = staticinvoke <org.apache.lucene.analysis.CharArrayMap: org.apache.lucene.analysis.CharArrayMap emptyMap()>();

        if r0 == $r1 goto label2;

        $z0 = virtualinvoke r0.<org.apache.lucene.analysis.CharArrayMap: boolean isEmpty()>();

        if $z0 == 0 goto label3;

     label2:
        $r2 = staticinvoke <org.apache.lucene.analysis.CharArrayMap: org.apache.lucene.analysis.CharArrayMap emptyMap()>();

        return $r2;

     label3:
        $z1 = r0 instanceof org.apache.lucene.analysis.CharArrayMap$UnmodifiableCharArrayMap;

        if $z1 == 0 goto label4;

        return r0;

     label4:
        $r3 = new org.apache.lucene.analysis.CharArrayMap$UnmodifiableCharArrayMap;

        specialinvoke $r3.<org.apache.lucene.analysis.CharArrayMap$UnmodifiableCharArrayMap: void <init>(org.apache.lucene.analysis.CharArrayMap)>(r0);

        return $r3;
    }

    public static org.apache.lucene.analysis.CharArrayMap copy(org.apache.lucene.util.Version, java.util.Map)
    {
        java.lang.Object[] $r7, $r8, r9, $r10;
        org.apache.lucene.analysis.CharArrayMap $r1, $r2, $r11, $r12, r13;
        char[][] $r4, r5, $r6;
        java.util.Map r0;
        int $i0, $i1, $i2, $i3;
        boolean $z0;
        org.apache.lucene.util.Version r3;

        r3 := @parameter0: org.apache.lucene.util.Version;

        r0 := @parameter1: java.util.Map;

        $r1 = <org.apache.lucene.analysis.CharArrayMap: org.apache.lucene.analysis.CharArrayMap EMPTY_MAP>;

        if r0 != $r1 goto label1;

        $r12 = staticinvoke <org.apache.lucene.analysis.CharArrayMap: org.apache.lucene.analysis.CharArrayMap emptyMap()>();

        return $r12;

     label1:
        $z0 = r0 instanceof org.apache.lucene.analysis.CharArrayMap;

        if $z0 == 0 goto label2;

        r13 = (org.apache.lucene.analysis.CharArrayMap) r0;

        $r4 = r13.<org.apache.lucene.analysis.CharArrayMap: char[][] keys>;

        $i0 = lengthof $r4;

        r5 = newarray (char[])[$i0];

        $r6 = r13.<org.apache.lucene.analysis.CharArrayMap: char[][] keys>;

        $i1 = lengthof r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, r5, 0, $i1);

        $r7 = r13.<org.apache.lucene.analysis.CharArrayMap: java.lang.Object[] values>;

        $i2 = lengthof $r7;

        $r8 = newarray (java.lang.Object)[$i2];

        r9 = (java.lang.Object[]) $r8;

        $r10 = r13.<org.apache.lucene.analysis.CharArrayMap: java.lang.Object[] values>;

        $i3 = lengthof r9;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r10, 0, r9, 0, $i3);

        $r11 = new org.apache.lucene.analysis.CharArrayMap;

        specialinvoke $r11.<org.apache.lucene.analysis.CharArrayMap: void <init>(org.apache.lucene.analysis.CharArrayMap)>(r13);

        $r11.<org.apache.lucene.analysis.CharArrayMap: char[][] keys> = r5;

        $r11.<org.apache.lucene.analysis.CharArrayMap: java.lang.Object[] values> = r9;

        return $r11;

     label2:
        $r2 = new org.apache.lucene.analysis.CharArrayMap;

        specialinvoke $r2.<org.apache.lucene.analysis.CharArrayMap: void <init>(org.apache.lucene.util.Version,java.util.Map,boolean)>(r3, r0, 0);

        return $r2;
    }

    public static org.apache.lucene.analysis.CharArrayMap emptyMap()
    {
        org.apache.lucene.analysis.CharArrayMap $r0;

        $r0 = <org.apache.lucene.analysis.CharArrayMap: org.apache.lucene.analysis.CharArrayMap EMPTY_MAP>;

        return $r0;
    }

    public volatile java.util.Set entrySet()
    {
        org.apache.lucene.analysis.CharArrayMap r0;
        org.apache.lucene.analysis.CharArrayMap$EntrySet $r1;

        r0 := @this: org.apache.lucene.analysis.CharArrayMap;

        $r1 = virtualinvoke r0.<org.apache.lucene.analysis.CharArrayMap: org.apache.lucene.analysis.CharArrayMap$EntrySet entrySet()>();

        return $r1;
    }

    public volatile java.util.Set keySet()
    {
        org.apache.lucene.analysis.CharArrayMap r0;
        org.apache.lucene.analysis.CharArraySet $r1;

        r0 := @this: org.apache.lucene.analysis.CharArrayMap;

        $r1 = virtualinvoke r0.<org.apache.lucene.analysis.CharArrayMap: org.apache.lucene.analysis.CharArraySet keySet()>();

        return $r1;
    }

    static int access$300(org.apache.lucene.analysis.CharArrayMap)
    {
        int $i0;
        org.apache.lucene.analysis.CharArrayMap r0;

        r0 := @parameter0: org.apache.lucene.analysis.CharArrayMap;

        $i0 = r0.<org.apache.lucene.analysis.CharArrayMap: int count>;

        return $i0;
    }

    void <init>(org.apache.lucene.analysis.CharArrayMap, org.apache.lucene.analysis.CharArrayMap$1)
    {
        org.apache.lucene.analysis.CharArrayMap r0, r1;
        org.apache.lucene.analysis.CharArrayMap$1 r2;

        r0 := @this: org.apache.lucene.analysis.CharArrayMap;

        r1 := @parameter0: org.apache.lucene.analysis.CharArrayMap;

        r2 := @parameter1: org.apache.lucene.analysis.CharArrayMap$1;

        specialinvoke r0.<org.apache.lucene.analysis.CharArrayMap: void <init>(org.apache.lucene.analysis.CharArrayMap)>(r1);

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        org.apache.lucene.analysis.CharArrayMap$EmptyCharArrayMap $r1;
        boolean $z0, $z1;

        <org.apache.lucene.analysis.CharArrayMap: int INIT_SIZE> = 8;

        $r0 = class "Lorg/apache/lucene/analysis/CharArrayMap;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.analysis.CharArrayMap: boolean $assertionsDisabled> = $z1;

        $r1 = new org.apache.lucene.analysis.CharArrayMap$EmptyCharArrayMap;

        specialinvoke $r1.<org.apache.lucene.analysis.CharArrayMap$EmptyCharArrayMap: void <init>()>();

        <org.apache.lucene.analysis.CharArrayMap: org.apache.lucene.analysis.CharArrayMap EMPTY_MAP> = $r1;

        return;
    }
}
