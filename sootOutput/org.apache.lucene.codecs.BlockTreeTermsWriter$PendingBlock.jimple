final class org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock extends org.apache.lucene.codecs.BlockTreeTermsWriter$PendingEntry
{
    public final org.apache.lucene.util.BytesRef prefix;
    public final long fp;
    public org.apache.lucene.util.fst.FST index;
    public java.util.List subIndices;
    public final boolean hasTerms;
    public final boolean isFloor;
    public final int floorLeadByte;
    private final org.apache.lucene.util.IntsRef scratchIntsRef;
    static final boolean $assertionsDisabled;

    public void <init>(org.apache.lucene.util.BytesRef, long, boolean, boolean, int, java.util.List)
    {
        org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock r0;
        org.apache.lucene.util.BytesRef r2;
        long l0;
        org.apache.lucene.util.IntsRef $r1;
        java.util.List r3;
        int i1;
        boolean z0, z1;

        r0 := @this: org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock;

        r2 := @parameter0: org.apache.lucene.util.BytesRef;

        l0 := @parameter1: long;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        i1 := @parameter4: int;

        r3 := @parameter5: java.util.List;

        specialinvoke r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingEntry: void <init>(boolean)>(0);

        $r1 = new org.apache.lucene.util.IntsRef;

        specialinvoke $r1.<org.apache.lucene.util.IntsRef: void <init>()>();

        r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock: org.apache.lucene.util.IntsRef scratchIntsRef> = $r1;

        r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock: org.apache.lucene.util.BytesRef prefix> = r2;

        r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock: long fp> = l0;

        r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock: boolean hasTerms> = z0;

        r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock: boolean isFloor> = z1;

        r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock: int floorLeadByte> = i1;

        r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock: java.util.List subIndices> = r3;

        return;
    }

    public java.lang.String toString()
    {
        org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock r2;
        org.apache.lucene.util.BytesRef $r3;
        java.lang.StringBuilder $r0, $r1, $r5;
        java.lang.String $r4, $r6;

        r2 := @this: org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("BLOCK: ");

        $r3 = r2.<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock: org.apache.lucene.util.BytesRef prefix>;

        $r4 = virtualinvoke $r3.<org.apache.lucene.util.BytesRef: java.lang.String utf8ToString()>();

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public void compileIndex(java.util.List, org.apache.lucene.store.RAMOutputStream) throws java.io.IOException
    {
        byte[] $r24;
        byte $b8, $b17, $b20;
        java.lang.StringBuilder $r31, $r32, $r33, $r34, $r39;
        long $l0, $l1, $l2, $l9, $l10, $l11, $l12, $l13, $l14, $l15, $l16, $l19;
        java.lang.AssertionError $r40, $r41, $r42, $r43, $r45;
        java.lang.String $r35;
        org.apache.lucene.store.RAMOutputStream r0;
        org.apache.lucene.util.fst.FST $r11, r18, r37;
        org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock r1, r36, r38;
        org.apache.lucene.util.IntsRef $r5, $r7;
        org.apache.lucene.util.fst.Builder $r44;
        org.apache.lucene.util.fst.ByteSequenceOutputs $r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16;
        org.apache.lucene.util.BytesRef $r6, $r46;
        java.util.List $r9, r10, $r14, $r15, $r19;
        int $i3, $i4, $i5, $i6, $i7, $i18, $i21, $i23, $i24;
        org.apache.lucene.util.fst.FST$INPUT_TYPE $r4;
        java.util.Iterator $r12, $r16, $r20, $r23;
        java.lang.Object $r13, $r17, $r21, $r25;

        r1 := @this: org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock;

        r10 := @parameter0: java.util.List;

        r0 := @parameter1: org.apache.lucene.store.RAMOutputStream;

        $z0 = <org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock: boolean $assertionsDisabled>;

        if $z0 != 0 goto label03;

        $z12 = r1.<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock: boolean isFloor>;

        if $z12 == 0 goto label01;

        if r10 == null goto label01;

        $i21 = interfaceinvoke r10.<java.util.List: int size()>();

        if $i21 != 0 goto label03;

     label01:
        $z14 = r1.<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock: boolean isFloor>;

        if $z14 != 0 goto label02;

        if r10 == null goto label03;

     label02:
        $r40 = new java.lang.AssertionError;

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("isFloor=");

        $z13 = r1.<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock: boolean isFloor>;

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z13);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" floorBlocks=");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r10);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r40.<java.lang.AssertionError: void <init>(java.lang.Object)>($r35);

        throw $r40;

     label03:
        $z15 = <org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock: boolean $assertionsDisabled>;

        if $z15 != 0 goto label04;

        $l19 = virtualinvoke r0.<org.apache.lucene.store.RAMOutputStream: long getFilePointer()>();

        $b20 = $l19 cmp 0L;

        if $b20 == 0 goto label04;

        $r41 = new java.lang.AssertionError;

        specialinvoke $r41.<java.lang.AssertionError: void <init>()>();

        throw $r41;

     label04:
        $l0 = r1.<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock: long fp>;

        $z2 = r1.<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock: boolean hasTerms>;

        $z1 = r1.<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock: boolean isFloor>;

        $l1 = staticinvoke <org.apache.lucene.codecs.BlockTreeTermsWriter: long encodeOutput(long,boolean,boolean)>($l0, $z2, $z1);

        virtualinvoke r0.<org.apache.lucene.store.RAMOutputStream: void writeVLong(long)>($l1);

        $z3 = r1.<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock: boolean isFloor>;

        if $z3 == 0 goto label10;

        $i6 = interfaceinvoke r10.<java.util.List: int size()>();

        virtualinvoke r0.<org.apache.lucene.store.RAMOutputStream: void writeVInt(int)>($i6);

        $r23 = interfaceinvoke r10.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $z8 = interfaceinvoke $r23.<java.util.Iterator: boolean hasNext()>();

        if $z8 == 0 goto label10;

        $r25 = interfaceinvoke $r23.<java.util.Iterator: java.lang.Object next()>();

        r36 = (org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock) $r25;

        $z9 = <org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock: boolean $assertionsDisabled>;

        if $z9 != 0 goto label06;

        $i18 = r36.<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock: int floorLeadByte>;

        $i23 = (int) -1;

        if $i18 != $i23 goto label06;

        $r42 = new java.lang.AssertionError;

        specialinvoke $r42.<java.lang.AssertionError: void <init>()>();

        throw $r42;

     label06:
        $i7 = r36.<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock: int floorLeadByte>;

        $b8 = (byte) $i7;

        virtualinvoke r0.<org.apache.lucene.store.RAMOutputStream: void writeByte(byte)>($b8);

        $z10 = <org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock: boolean $assertionsDisabled>;

        if $z10 != 0 goto label07;

        $l16 = r36.<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock: long fp>;

        $l15 = r1.<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock: long fp>;

        $b17 = $l16 cmp $l15;

        $i24 = (int) $b17;

        if $i24 > 0 goto label07;

        $r43 = new java.lang.AssertionError;

        specialinvoke $r43.<java.lang.AssertionError: void <init>()>();

        throw $r43;

     label07:
        $l10 = r36.<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock: long fp>;

        $l9 = r1.<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock: long fp>;

        $l11 = $l10 - $l9;

        $l13 = $l11 << 1;

        $z11 = r36.<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock: boolean hasTerms>;

        if $z11 == 0 goto label08;

        $z16 = 1;

        goto label09;

     label08:
        $z16 = 0;

     label09:
        $l12 = (long) $z16;

        $l14 = $l13 | $l12;

        virtualinvoke r0.<org.apache.lucene.store.RAMOutputStream: void writeVLong(long)>($l14);

        goto label05;

     label10:
        $r2 = staticinvoke <org.apache.lucene.util.fst.ByteSequenceOutputs: org.apache.lucene.util.fst.ByteSequenceOutputs getSingleton()>();

        $r44 = new org.apache.lucene.util.fst.Builder;

        $r4 = <org.apache.lucene.util.fst.FST$INPUT_TYPE: org.apache.lucene.util.fst.FST$INPUT_TYPE BYTE1>;

        specialinvoke $r44.<org.apache.lucene.util.fst.Builder: void <init>(org.apache.lucene.util.fst.FST$INPUT_TYPE,int,int,boolean,boolean,int,org.apache.lucene.util.fst.Outputs,org.apache.lucene.util.fst.Builder$FreezeTail,boolean,float,boolean,int)>($r4, 0, 0, 1, 0, 2147483647, $r2, null, 0, 0.0F, 1, 15);

        $l2 = virtualinvoke r0.<org.apache.lucene.store.RAMOutputStream: long getFilePointer()>();

        $i3 = (int) $l2;

        $r24 = newarray (byte)[$i3];

        $z4 = <org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock: boolean $assertionsDisabled>;

        if $z4 != 0 goto label11;

        $i5 = lengthof $r24;

        if $i5 > 0 goto label11;

        $r45 = new java.lang.AssertionError;

        specialinvoke $r45.<java.lang.AssertionError: void <init>()>();

        throw $r45;

     label11:
        virtualinvoke r0.<org.apache.lucene.store.RAMOutputStream: void writeTo(byte[],int)>($r24, 0);

        $r6 = r1.<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock: org.apache.lucene.util.BytesRef prefix>;

        $r5 = r1.<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock: org.apache.lucene.util.IntsRef scratchIntsRef>;

        $r7 = staticinvoke <org.apache.lucene.util.fst.Util: org.apache.lucene.util.IntsRef toIntsRef(org.apache.lucene.util.BytesRef,org.apache.lucene.util.IntsRef)>($r6, $r5);

        $r46 = new org.apache.lucene.util.BytesRef;

        $i4 = lengthof $r24;

        specialinvoke $r46.<org.apache.lucene.util.BytesRef: void <init>(byte[],int,int)>($r24, 0, $i4);

        virtualinvoke $r44.<org.apache.lucene.util.fst.Builder: void add(org.apache.lucene.util.IntsRef,java.lang.Object)>($r7, $r46);

        virtualinvoke r0.<org.apache.lucene.store.RAMOutputStream: void reset()>();

        $r9 = r1.<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock: java.util.List subIndices>;

        if $r9 == null goto label13;

        $r19 = r1.<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock: java.util.List subIndices>;

        $r20 = interfaceinvoke $r19.<java.util.List: java.util.Iterator iterator()>();

     label12:
        $z7 = interfaceinvoke $r20.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label13;

        $r21 = interfaceinvoke $r20.<java.util.Iterator: java.lang.Object next()>();

        r37 = (org.apache.lucene.util.fst.FST) $r21;

        specialinvoke r1.<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock: void append(org.apache.lucene.util.fst.Builder,org.apache.lucene.util.fst.FST)>($r44, r37);

        goto label12;

     label13:
        if r10 == null goto label17;

        $r12 = interfaceinvoke r10.<java.util.List: java.util.Iterator iterator()>();

     label14:
        $z5 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label17;

        $r13 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r38 = (org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock) $r13;

        $r14 = r38.<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock: java.util.List subIndices>;

        if $r14 == null goto label16;

        $r15 = r38.<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock: java.util.List subIndices>;

        $r16 = interfaceinvoke $r15.<java.util.List: java.util.Iterator iterator()>();

     label15:
        $z6 = interfaceinvoke $r16.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label16;

        $r17 = interfaceinvoke $r16.<java.util.Iterator: java.lang.Object next()>();

        r18 = (org.apache.lucene.util.fst.FST) $r17;

        specialinvoke r1.<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock: void append(org.apache.lucene.util.fst.Builder,org.apache.lucene.util.fst.FST)>($r44, r18);

        goto label15;

     label16:
        r38.<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock: java.util.List subIndices> = null;

        goto label14;

     label17:
        $r11 = virtualinvoke $r44.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.fst.FST finish()>();

        r1.<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock: org.apache.lucene.util.fst.FST index> = $r11;

        r1.<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock: java.util.List subIndices> = null;

        return;
    }

    private void append(org.apache.lucene.util.fst.Builder, org.apache.lucene.util.fst.FST) throws java.io.IOException
    {
        org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock r4;
        org.apache.lucene.util.fst.BytesRefFSTEnum $r0;
        org.apache.lucene.util.BytesRef $r6;
        org.apache.lucene.util.fst.BytesRefFSTEnum$InputOutput $r2;
        org.apache.lucene.util.IntsRef $r5, $r7;
        org.apache.lucene.util.fst.Builder r3;
        org.apache.lucene.util.fst.FST r1;
        java.lang.Object $r8;

        r4 := @this: org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock;

        r3 := @parameter0: org.apache.lucene.util.fst.Builder;

        r1 := @parameter1: org.apache.lucene.util.fst.FST;

        $r0 = new org.apache.lucene.util.fst.BytesRefFSTEnum;

        specialinvoke $r0.<org.apache.lucene.util.fst.BytesRefFSTEnum: void <init>(org.apache.lucene.util.fst.FST)>(r1);

     label1:
        $r2 = virtualinvoke $r0.<org.apache.lucene.util.fst.BytesRefFSTEnum: org.apache.lucene.util.fst.BytesRefFSTEnum$InputOutput next()>();

        if $r2 == null goto label2;

        $r6 = $r2.<org.apache.lucene.util.fst.BytesRefFSTEnum$InputOutput: org.apache.lucene.util.BytesRef input>;

        $r5 = r4.<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock: org.apache.lucene.util.IntsRef scratchIntsRef>;

        $r7 = staticinvoke <org.apache.lucene.util.fst.Util: org.apache.lucene.util.IntsRef toIntsRef(org.apache.lucene.util.BytesRef,org.apache.lucene.util.IntsRef)>($r6, $r5);

        $r8 = $r2.<org.apache.lucene.util.fst.BytesRefFSTEnum$InputOutput: java.lang.Object output>;

        virtualinvoke r3.<org.apache.lucene.util.fst.Builder: void add(org.apache.lucene.util.IntsRef,java.lang.Object)>($r7, $r8);

        goto label1;

     label2:
        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/codecs/BlockTreeTermsWriter;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock: boolean $assertionsDisabled> = $z1;

        return;
    }
}
