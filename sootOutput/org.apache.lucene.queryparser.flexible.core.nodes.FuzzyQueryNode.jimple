public class org.apache.lucene.queryparser.flexible.core.nodes.FuzzyQueryNode extends org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode
{
    private float similarity;
    private int prefixLength;

    public void <init>(java.lang.CharSequence, java.lang.CharSequence, float, int, int)
    {
        org.apache.lucene.queryparser.flexible.core.nodes.FuzzyQueryNode r0;
        java.lang.CharSequence r1, r2;
        int i0, i1;
        float f0;

        r0 := @this: org.apache.lucene.queryparser.flexible.core.nodes.FuzzyQueryNode;

        r1 := @parameter0: java.lang.CharSequence;

        r2 := @parameter1: java.lang.CharSequence;

        f0 := @parameter2: float;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        specialinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode: void <init>(java.lang.CharSequence,java.lang.CharSequence,int,int)>(r1, r2, i0, i1);

        r0.<org.apache.lucene.queryparser.flexible.core.nodes.FuzzyQueryNode: float similarity> = f0;

        virtualinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.FuzzyQueryNode: void setLeaf(boolean)>(1);

        return;
    }

    public void setPrefixLength(int)
    {
        int i0;
        org.apache.lucene.queryparser.flexible.core.nodes.FuzzyQueryNode r0;

        r0 := @this: org.apache.lucene.queryparser.flexible.core.nodes.FuzzyQueryNode;

        i0 := @parameter0: int;

        r0.<org.apache.lucene.queryparser.flexible.core.nodes.FuzzyQueryNode: int prefixLength> = i0;

        return;
    }

    public int getPrefixLength()
    {
        int $i0;
        org.apache.lucene.queryparser.flexible.core.nodes.FuzzyQueryNode r0;

        r0 := @this: org.apache.lucene.queryparser.flexible.core.nodes.FuzzyQueryNode;

        $i0 = r0.<org.apache.lucene.queryparser.flexible.core.nodes.FuzzyQueryNode: int prefixLength>;

        return $i0;
    }

    public java.lang.CharSequence toQueryString(org.apache.lucene.queryparser.flexible.core.parser.EscapeQuerySyntax)
    {
        org.apache.lucene.queryparser.flexible.core.nodes.FuzzyQueryNode r0;
        java.lang.String $r11, $r17;
        boolean $z0;
        java.lang.CharSequence $r1, $r3, $r7, $r13;
        org.apache.lucene.queryparser.flexible.core.parser.EscapeQuerySyntax r6;
        float $f0, $f1;
        java.lang.StringBuilder $r2, $r4, $r5, $r8, $r9, $r10, $r12, $r14, $r15, $r16;

        r0 := @this: org.apache.lucene.queryparser.flexible.core.nodes.FuzzyQueryNode;

        r6 := @parameter0: org.apache.lucene.queryparser.flexible.core.parser.EscapeQuerySyntax;

        $r1 = r0.<org.apache.lucene.queryparser.flexible.core.nodes.FuzzyQueryNode: java.lang.CharSequence field>;

        $z0 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.FuzzyQueryNode: boolean isDefaultField(java.lang.CharSequence)>($r1);

        if $z0 == 0 goto label1;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.FuzzyQueryNode: java.lang.CharSequence getTermEscaped(org.apache.lucene.queryparser.flexible.core.parser.EscapeQuerySyntax)>(r6);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("~");

        $f1 = r0.<org.apache.lucene.queryparser.flexible.core.nodes.FuzzyQueryNode: float similarity>;

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f1);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r17;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = r0.<org.apache.lucene.queryparser.flexible.core.nodes.FuzzyQueryNode: java.lang.CharSequence field>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r7 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.FuzzyQueryNode: java.lang.CharSequence getTermEscaped(org.apache.lucene.queryparser.flexible.core.parser.EscapeQuerySyntax)>(r6);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("~");

        $f0 = r0.<org.apache.lucene.queryparser.flexible.core.nodes.FuzzyQueryNode: float similarity>;

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;
    }

    public java.lang.String toString()
    {
        java.lang.CharSequence $r3, $r8;
        org.apache.lucene.queryparser.flexible.core.nodes.FuzzyQueryNode r2;
        float $f0;
        java.lang.StringBuilder $r0, $r1, $r4, $r5, $r6, $r7, $r9, $r10;
        java.lang.String $r11;

        r2 := @this: org.apache.lucene.queryparser.flexible.core.nodes.FuzzyQueryNode;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<fuzzy field=\'");

        $r3 = r2.<org.apache.lucene.queryparser.flexible.core.nodes.FuzzyQueryNode: java.lang.CharSequence field>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' similarity=\'");

        $f0 = r2.<org.apache.lucene.queryparser.flexible.core.nodes.FuzzyQueryNode: float similarity>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' term=\'");

        $r8 = r2.<org.apache.lucene.queryparser.flexible.core.nodes.FuzzyQueryNode: java.lang.CharSequence text>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'/>");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;
    }

    public void setSimilarity(float)
    {
        org.apache.lucene.queryparser.flexible.core.nodes.FuzzyQueryNode r0;
        float f0;

        r0 := @this: org.apache.lucene.queryparser.flexible.core.nodes.FuzzyQueryNode;

        f0 := @parameter0: float;

        r0.<org.apache.lucene.queryparser.flexible.core.nodes.FuzzyQueryNode: float similarity> = f0;

        return;
    }

    public org.apache.lucene.queryparser.flexible.core.nodes.FuzzyQueryNode cloneTree() throws java.lang.CloneNotSupportedException
    {
        org.apache.lucene.queryparser.flexible.core.nodes.FuzzyQueryNode r0, r2;
        float $f0;
        org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode $r1;

        r0 := @this: org.apache.lucene.queryparser.flexible.core.nodes.FuzzyQueryNode;

        $r1 = specialinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode: org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode cloneTree()>();

        r2 = (org.apache.lucene.queryparser.flexible.core.nodes.FuzzyQueryNode) $r1;

        $f0 = r0.<org.apache.lucene.queryparser.flexible.core.nodes.FuzzyQueryNode: float similarity>;

        r2.<org.apache.lucene.queryparser.flexible.core.nodes.FuzzyQueryNode: float similarity> = $f0;

        return r2;
    }

    public float getSimilarity()
    {
        org.apache.lucene.queryparser.flexible.core.nodes.FuzzyQueryNode r0;
        float $f0;

        r0 := @this: org.apache.lucene.queryparser.flexible.core.nodes.FuzzyQueryNode;

        $f0 = r0.<org.apache.lucene.queryparser.flexible.core.nodes.FuzzyQueryNode: float similarity>;

        return $f0;
    }

    public volatile org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode cloneTree() throws java.lang.CloneNotSupportedException
    {
        org.apache.lucene.queryparser.flexible.core.nodes.FuzzyQueryNode r0, $r1;

        r0 := @this: org.apache.lucene.queryparser.flexible.core.nodes.FuzzyQueryNode;

        $r1 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.FuzzyQueryNode: org.apache.lucene.queryparser.flexible.core.nodes.FuzzyQueryNode cloneTree()>();

        return $r1;
    }

    public volatile org.apache.lucene.queryparser.flexible.core.nodes.QueryNode cloneTree() throws java.lang.CloneNotSupportedException
    {
        org.apache.lucene.queryparser.flexible.core.nodes.FuzzyQueryNode r0, $r1;

        r0 := @this: org.apache.lucene.queryparser.flexible.core.nodes.FuzzyQueryNode;

        $r1 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.FuzzyQueryNode: org.apache.lucene.queryparser.flexible.core.nodes.FuzzyQueryNode cloneTree()>();

        return $r1;
    }
}
