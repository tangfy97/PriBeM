class org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl extends java.lang.Object implements org.aspectj.lang.reflect.MethodSignature
{
    private volatile java.lang.String[] parameterNames;
    final org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint this$0;

    private void <init>(org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint)
    {
        org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint r1;
        org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl r0;

        r0 := @this: org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl;

        r1 := @parameter0: org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint;

        r0.<org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl: org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.String getName()
    {
        org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint $r1;
        java.lang.String $r4;
        org.springframework.aop.ProxyMethodInvocation $r2;
        org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl r0;
        java.lang.reflect.Method $r3;

        r0 := @this: org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl;

        $r1 = r0.<org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl: org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint this$0>;

        $r2 = staticinvoke <org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint: org.springframework.aop.ProxyMethodInvocation access$0(org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint)>($r1);

        $r3 = interfaceinvoke $r2.<org.springframework.aop.ProxyMethodInvocation: java.lang.reflect.Method getMethod()>();

        $r4 = virtualinvoke $r3.<java.lang.reflect.Method: java.lang.String getName()>();

        return $r4;
    }

    public int getModifiers()
    {
        org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint $r1;
        int $i0;
        org.springframework.aop.ProxyMethodInvocation $r2;
        org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl r0;
        java.lang.reflect.Method $r3;

        r0 := @this: org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl;

        $r1 = r0.<org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl: org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint this$0>;

        $r2 = staticinvoke <org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint: org.springframework.aop.ProxyMethodInvocation access$0(org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint)>($r1);

        $r3 = interfaceinvoke $r2.<org.springframework.aop.ProxyMethodInvocation: java.lang.reflect.Method getMethod()>();

        $i0 = virtualinvoke $r3.<java.lang.reflect.Method: int getModifiers()>();

        return $i0;
    }

    public java.lang.Class getDeclaringType()
    {
        org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint $r1;
        java.lang.Class $r4;
        org.springframework.aop.ProxyMethodInvocation $r2;
        org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl r0;
        java.lang.reflect.Method $r3;

        r0 := @this: org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl;

        $r1 = r0.<org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl: org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint this$0>;

        $r2 = staticinvoke <org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint: org.springframework.aop.ProxyMethodInvocation access$0(org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint)>($r1);

        $r3 = interfaceinvoke $r2.<org.springframework.aop.ProxyMethodInvocation: java.lang.reflect.Method getMethod()>();

        $r4 = virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        return $r4;
    }

    public java.lang.String getDeclaringTypeName()
    {
        org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint $r1;
        java.lang.Class $r4;
        java.lang.String $r5;
        org.springframework.aop.ProxyMethodInvocation $r2;
        org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl r0;
        java.lang.reflect.Method $r3;

        r0 := @this: org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl;

        $r1 = r0.<org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl: org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint this$0>;

        $r2 = staticinvoke <org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint: org.springframework.aop.ProxyMethodInvocation access$0(org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint)>($r1);

        $r3 = interfaceinvoke $r2.<org.springframework.aop.ProxyMethodInvocation: java.lang.reflect.Method getMethod()>();

        $r4 = virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        return $r5;
    }

    public java.lang.Class getReturnType()
    {
        org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint $r1;
        java.lang.Class $r4;
        org.springframework.aop.ProxyMethodInvocation $r2;
        org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl r0;
        java.lang.reflect.Method $r3;

        r0 := @this: org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl;

        $r1 = r0.<org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl: org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint this$0>;

        $r2 = staticinvoke <org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint: org.springframework.aop.ProxyMethodInvocation access$0(org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint)>($r1);

        $r3 = interfaceinvoke $r2.<org.springframework.aop.ProxyMethodInvocation: java.lang.reflect.Method getMethod()>();

        $r4 = virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        return $r4;
    }

    public java.lang.reflect.Method getMethod()
    {
        org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint $r1;
        org.springframework.aop.ProxyMethodInvocation $r2;
        org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl r0;
        java.lang.reflect.Method $r3;

        r0 := @this: org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl;

        $r1 = r0.<org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl: org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint this$0>;

        $r2 = staticinvoke <org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint: org.springframework.aop.ProxyMethodInvocation access$0(org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint)>($r1);

        $r3 = interfaceinvoke $r2.<org.springframework.aop.ProxyMethodInvocation: java.lang.reflect.Method getMethod()>();

        return $r3;
    }

    public java.lang.Class[] getParameterTypes()
    {
        org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint $r1;
        java.lang.Class[] $r4;
        org.springframework.aop.ProxyMethodInvocation $r2;
        org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl r0;
        java.lang.reflect.Method $r3;

        r0 := @this: org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl;

        $r1 = r0.<org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl: org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint this$0>;

        $r2 = staticinvoke <org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint: org.springframework.aop.ProxyMethodInvocation access$0(org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint)>($r1);

        $r3 = interfaceinvoke $r2.<org.springframework.aop.ProxyMethodInvocation: java.lang.reflect.Method getMethod()>();

        $r4 = virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        return $r4;
    }

    public java.lang.String[] getParameterNames()
    {
        java.lang.String[] $r1, $r2, $r5;
        org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl r0;
        java.lang.reflect.Method $r4;
        org.springframework.core.LocalVariableTableParameterNameDiscoverer $r3;

        r0 := @this: org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl;

        $r1 = r0.<org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl: java.lang.String[] parameterNames>;

        if $r1 != null goto label1;

        $r3 = new org.springframework.core.LocalVariableTableParameterNameDiscoverer;

        specialinvoke $r3.<org.springframework.core.LocalVariableTableParameterNameDiscoverer: void <init>()>();

        $r4 = virtualinvoke r0.<org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl: java.lang.reflect.Method getMethod()>();

        $r5 = virtualinvoke $r3.<org.springframework.core.LocalVariableTableParameterNameDiscoverer: java.lang.String[] getParameterNames(java.lang.reflect.Method)>($r4);

        r0.<org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl: java.lang.String[] parameterNames> = $r5;

     label1:
        $r2 = r0.<org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl: java.lang.String[] parameterNames>;

        return $r2;
    }

    public java.lang.Class[] getExceptionTypes()
    {
        org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint $r1;
        java.lang.Class[] $r4;
        org.springframework.aop.ProxyMethodInvocation $r2;
        org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl r0;
        java.lang.reflect.Method $r3;

        r0 := @this: org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl;

        $r1 = r0.<org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl: org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint this$0>;

        $r2 = staticinvoke <org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint: org.springframework.aop.ProxyMethodInvocation access$0(org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint)>($r1);

        $r3 = interfaceinvoke $r2.<org.springframework.aop.ProxyMethodInvocation: java.lang.reflect.Method getMethod()>();

        $r4 = virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Class[] getExceptionTypes()>();

        return $r4;
    }

    public java.lang.String toShortString()
    {
        java.lang.String $r1;
        org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl r0;

        r0 := @this: org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl;

        $r1 = specialinvoke r0.<org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl: java.lang.String toString(boolean,boolean,boolean,boolean)>(0, 0, 0, 0);

        return $r1;
    }

    public java.lang.String toLongString()
    {
        java.lang.String $r1;
        org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl r0;

        r0 := @this: org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl;

        $r1 = specialinvoke r0.<org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl: java.lang.String toString(boolean,boolean,boolean,boolean)>(1, 1, 1, 1);

        return $r1;
    }

    public java.lang.String toString()
    {
        java.lang.String $r1;
        org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl r0;

        r0 := @this: org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl;

        $r1 = specialinvoke r0.<org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl: java.lang.String toString(boolean,boolean,boolean,boolean)>(0, 1, 0, 1);

        return $r1;
    }

    private java.lang.String toString(boolean, boolean, boolean, boolean)
    {
        java.lang.Class[] $r5;
        int $i0;
        java.lang.StringBuilder $r0;
        java.lang.Class $r2, $r7;
        java.lang.String $r4, $r6, $r8;
        org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl r1;
        java.lang.reflect.Method $r3;
        boolean z0, z1, z2, z3;

        r1 := @this: org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        z3 := @parameter2: boolean;

        z2 := @parameter3: boolean;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        if z0 == 0 goto label1;

        $i0 = virtualinvoke r1.<org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl: int getModifiers()>();

        $r8 = staticinvoke <java.lang.reflect.Modifier: java.lang.String toString(int)>($i0);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

     label1:
        if z1 == 0 goto label2;

        $r7 = virtualinvoke r1.<org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl: java.lang.Class getReturnType()>();

        specialinvoke r1.<org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl: void appendType(java.lang.StringBuilder,java.lang.Class,boolean)>($r0, $r7, z3);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

     label2:
        $r2 = virtualinvoke r1.<org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl: java.lang.Class getDeclaringType()>();

        specialinvoke r1.<org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl: void appendType(java.lang.StringBuilder,java.lang.Class,boolean)>($r0, $r2, z2);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r3 = virtualinvoke r1.<org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl: java.lang.reflect.Method getMethod()>();

        $r4 = virtualinvoke $r3.<java.lang.reflect.Method: java.lang.String getName()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r5 = virtualinvoke r1.<org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl: java.lang.Class[] getParameterTypes()>();

        specialinvoke r1.<org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl: void appendTypes(java.lang.StringBuilder,java.lang.Class[],boolean,boolean)>($r0, $r5, z1, z3);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r6 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    private void appendTypes(java.lang.StringBuilder, java.lang.Class[], boolean, boolean)
    {
        java.lang.Class[] r0;
        int $i0, i1, $i2, i3;
        java.lang.StringBuilder r1;
        java.lang.Class $r3;
        org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl r2;
        boolean z0, z1;

        r2 := @this: org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl;

        r1 := @parameter0: java.lang.StringBuilder;

        r0 := @parameter1: java.lang.Class[];

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        if z0 == 0 goto label4;

        i1 = lengthof r0;

        i3 = 0;

        goto label3;

     label1:
        $r3 = r0[i3];

        specialinvoke r2.<org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl: void appendType(java.lang.StringBuilder,java.lang.Class,boolean)>(r1, $r3, z1);

        $i2 = i1 - 1;

        if i3 >= $i2 goto label2;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

     label2:
        i3 = i3 + 1;

     label3:
        if i3 < i1 goto label1;

        goto label5;

     label4:
        $i0 = lengthof r0;

        if $i0 == 0 goto label5;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("..");

     label5:
        return;
    }

    private void appendType(java.lang.StringBuilder, java.lang.Class, boolean)
    {
        java.lang.Class r0, $r3;
        java.lang.StringBuilder r1;
        java.lang.String $r4;
        org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl r2;
        boolean $z0, z1;

        r2 := @this: org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl;

        r1 := @parameter0: java.lang.StringBuilder;

        r0 := @parameter1: java.lang.Class;

        z1 := @parameter2: boolean;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke r0.<java.lang.Class: java.lang.Class getComponentType()>();

        specialinvoke r2.<org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl: void appendType(java.lang.StringBuilder,java.lang.Class,boolean)>(r1, $r3, z1);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[]");

        goto label4;

     label1:
        if z1 == 0 goto label2;

        $r4 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        goto label3;

     label2:
        $r4 = virtualinvoke r0.<java.lang.Class: java.lang.String getSimpleName()>();

     label3:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

     label4:
        return;
    }

    void <init>(org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint, org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl)
    {
        org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint r1;
        org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl r0, r2;

        r0 := @this: org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl;

        r1 := @parameter0: org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint;

        r2 := @parameter1: org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl;

        specialinvoke r0.<org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl: void <init>(org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint)>(r1);

        return;
    }
}
