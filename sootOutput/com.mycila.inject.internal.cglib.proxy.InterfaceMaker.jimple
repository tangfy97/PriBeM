public class com.mycila.inject.internal.cglib.proxy.InterfaceMaker extends com.mycila.inject.internal.cglib.core.AbstractClassGenerator
{
    private static final com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source SOURCE;
    private java.util.Map signatures;
    static java.lang.Class class$net$sf$cglib$proxy$InterfaceMaker;

    public void <init>()
    {
        com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source $r1;
        java.util.HashMap $r2;
        com.mycila.inject.internal.cglib.proxy.InterfaceMaker r0;

        r0 := @this: com.mycila.inject.internal.cglib.proxy.InterfaceMaker;

        $r1 = <com.mycila.inject.internal.cglib.proxy.InterfaceMaker: com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source SOURCE>;

        specialinvoke r0.<com.mycila.inject.internal.cglib.core.AbstractClassGenerator: void <init>(com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source)>($r1);

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<com.mycila.inject.internal.cglib.proxy.InterfaceMaker: java.util.Map signatures> = $r2;

        return;
    }

    public void add(com.mycila.inject.internal.cglib.core.Signature, com.mycila.inject.internal.asm.Type[])
    {
        com.mycila.inject.internal.cglib.proxy.InterfaceMaker r0;
        com.mycila.inject.internal.cglib.core.Signature r1;
        java.util.Map $r3;
        com.mycila.inject.internal.asm.Type[] r2;

        r0 := @this: com.mycila.inject.internal.cglib.proxy.InterfaceMaker;

        r1 := @parameter0: com.mycila.inject.internal.cglib.core.Signature;

        r2 := @parameter1: com.mycila.inject.internal.asm.Type[];

        $r3 = r0.<com.mycila.inject.internal.cglib.proxy.InterfaceMaker: java.util.Map signatures>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    public void add(java.lang.reflect.Method)
    {
        com.mycila.inject.internal.cglib.proxy.InterfaceMaker r0;
        com.mycila.inject.internal.cglib.core.Signature $r2;
        com.mycila.inject.internal.asm.Type[] $r3;
        java.lang.reflect.Method r1;

        r0 := @this: com.mycila.inject.internal.cglib.proxy.InterfaceMaker;

        r1 := @parameter0: java.lang.reflect.Method;

        $r2 = staticinvoke <com.mycila.inject.internal.cglib.core.ReflectUtils: com.mycila.inject.internal.cglib.core.Signature getSignature(java.lang.reflect.Member)>(r1);

        $r3 = staticinvoke <com.mycila.inject.internal.cglib.core.ReflectUtils: com.mycila.inject.internal.asm.Type[] getExceptionTypes(java.lang.reflect.Member)>(r1);

        virtualinvoke r0.<com.mycila.inject.internal.cglib.proxy.InterfaceMaker: void add(com.mycila.inject.internal.cglib.core.Signature,com.mycila.inject.internal.asm.Type[])>($r2, $r3);

        return;
    }

    public void add(java.lang.Class)
    {
        com.mycila.inject.internal.cglib.proxy.InterfaceMaker r5;
        java.lang.reflect.Method[] $r1;
        int $i0, i1;
        java.lang.Class r0, $r3;
        java.lang.String $r4;
        java.lang.reflect.Method r2;
        boolean $z0;

        r5 := @this: com.mycila.inject.internal.cglib.proxy.InterfaceMaker;

        r0 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        i1 = 0;

     label1:
        $i0 = lengthof $r1;

        if i1 >= $i0 goto label3;

        r2 = $r1[i1];

        $r3 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("java.lang.Object");

        if $z0 != 0 goto label2;

        virtualinvoke r5.<com.mycila.inject.internal.cglib.proxy.InterfaceMaker: void add(java.lang.reflect.Method)>(r2);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    public java.lang.Class create()
    {
        java.lang.Object $r1;
        java.lang.Class $r2;
        com.mycila.inject.internal.cglib.proxy.InterfaceMaker r0;

        r0 := @this: com.mycila.inject.internal.cglib.proxy.InterfaceMaker;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.proxy.InterfaceMaker: void setUseCache(boolean)>(0);

        $r1 = specialinvoke r0.<com.mycila.inject.internal.cglib.core.AbstractClassGenerator: java.lang.Object create(java.lang.Object)>(r0);

        $r2 = (java.lang.Class) $r1;

        return $r2;
    }

    protected java.lang.ClassLoader getDefaultClassLoader()
    {
        com.mycila.inject.internal.cglib.proxy.InterfaceMaker r0;

        r0 := @this: com.mycila.inject.internal.cglib.proxy.InterfaceMaker;

        return null;
    }

    protected java.lang.Object firstInstance(java.lang.Class)
    {
        java.lang.Class r0;
        com.mycila.inject.internal.cglib.proxy.InterfaceMaker r1;

        r1 := @this: com.mycila.inject.internal.cglib.proxy.InterfaceMaker;

        r0 := @parameter0: java.lang.Class;

        return r0;
    }

    protected java.lang.Object nextInstance(java.lang.Object)
    {
        java.lang.IllegalStateException $r0;
        java.lang.Object r2;
        com.mycila.inject.internal.cglib.proxy.InterfaceMaker r1;

        r1 := @this: com.mycila.inject.internal.cglib.proxy.InterfaceMaker;

        r2 := @parameter0: java.lang.Object;

        $r0 = new java.lang.IllegalStateException;

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>("InterfaceMaker does not cache");

        throw $r0;
    }

    public void generateClass(com.mycila.inject.internal.asm.ClassVisitor) throws java.lang.Exception
    {
        java.util.Iterator $r6;
        com.mycila.inject.internal.cglib.proxy.InterfaceMaker r2;
        com.mycila.inject.internal.cglib.core.Signature r8;
        java.util.Set $r5;
        com.mycila.inject.internal.cglib.core.CodeEmitter $r13;
        com.mycila.inject.internal.cglib.core.ClassEmitter $r0;
        java.util.Map $r4, $r9;
        java.lang.Object $r7, $r10;
        java.lang.String $r3;
        com.mycila.inject.internal.asm.Type[] $r11, r12;
        com.mycila.inject.internal.asm.ClassVisitor r1;
        boolean $z0;

        r2 := @this: com.mycila.inject.internal.cglib.proxy.InterfaceMaker;

        r1 := @parameter0: com.mycila.inject.internal.asm.ClassVisitor;

        $r0 = new com.mycila.inject.internal.cglib.core.ClassEmitter;

        specialinvoke $r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: void <init>(com.mycila.inject.internal.asm.ClassVisitor)>(r1);

        $r3 = virtualinvoke r2.<com.mycila.inject.internal.cglib.proxy.InterfaceMaker: java.lang.String getClassName()>();

        virtualinvoke $r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: void begin_class(int,int,java.lang.String,com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Type[],java.lang.String)>(46, 513, $r3, null, null, "<generated>");

        $r4 = r2.<com.mycila.inject.internal.cglib.proxy.InterfaceMaker: java.util.Map signatures>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Set keySet()>();

        $r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (com.mycila.inject.internal.cglib.core.Signature) $r7;

        $r9 = r2.<com.mycila.inject.internal.cglib.proxy.InterfaceMaker: java.util.Map signatures>;

        $r10 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>(r8);

        $r11 = (com.mycila.inject.internal.asm.Type[]) $r10;

        r12 = (com.mycila.inject.internal.asm.Type[]) $r11;

        $r13 = virtualinvoke $r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter begin_method(int,com.mycila.inject.internal.cglib.core.Signature,com.mycila.inject.internal.asm.Type[])>(1025, r8, r12);

        virtualinvoke $r13.<com.mycila.inject.internal.cglib.core.CodeEmitter: void end_method()>();

        goto label1;

     label2:
        virtualinvoke $r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: void end_class()>();

        return;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source $r0;
        java.lang.Class $r1, $r3;
        java.lang.String $r2;

        $r0 = new com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source;

        $r1 = <com.mycila.inject.internal.cglib.proxy.InterfaceMaker: java.lang.Class class$net$sf$cglib$proxy$InterfaceMaker>;

        if $r1 != null goto label1;

        $r3 = staticinvoke <com.mycila.inject.internal.cglib.proxy.InterfaceMaker: java.lang.Class class$(java.lang.String)>("com.mycila.inject.internal.cglib.proxy.InterfaceMaker");

        <com.mycila.inject.internal.cglib.proxy.InterfaceMaker: java.lang.Class class$net$sf$cglib$proxy$InterfaceMaker> = $r3;

        goto label2;

     label1:
        $r3 = <com.mycila.inject.internal.cglib.proxy.InterfaceMaker: java.lang.Class class$net$sf$cglib$proxy$InterfaceMaker>;

     label2:
        $r2 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        specialinvoke $r0.<com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source: void <init>(java.lang.String)>($r2);

        <com.mycila.inject.internal.cglib.proxy.InterfaceMaker: com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source SOURCE> = $r0;

        return;
    }
}
