public class org.waveprotocol.wave.model.supplement.SupplementedWaveImpl extends java.lang.Object implements org.waveprotocol.wave.model.supplement.SupplementedWave
{
    static final int INBOX_FOLDER;
    static final int ALL_FOLDER;
    public static final int TRASH_FOLDER;
    private final org.waveprotocol.wave.model.supplement.Supplement supplement;
    private final org.waveprotocol.wave.model.supplement.SupplementWaveView wave;
    private final org.waveprotocol.wave.model.supplement.SupplementedWaveImpl$DefaultFollow followPolicy;

    public static org.waveprotocol.wave.model.supplement.SupplementedWave create(org.waveprotocol.wave.model.supplement.PrimitiveSupplement, org.waveprotocol.wave.model.conversation.ConversationView, org.waveprotocol.wave.model.wave.ParticipantId, org.waveprotocol.wave.model.supplement.SupplementedWaveImpl$DefaultFollow)
    {
        org.waveprotocol.wave.model.supplement.SupplementedWaveImpl$DefaultFollow r5;
        org.waveprotocol.wave.model.supplement.SupplementedWaveImpl$WaveViewAdapter $r2;
        org.waveprotocol.wave.model.wave.ParticipantId r4;
        org.waveprotocol.wave.model.supplement.PrimitiveSupplement r1;
        org.waveprotocol.wave.model.supplement.SupplementedWaveImpl $r0;
        org.waveprotocol.wave.model.conversation.ConversationView r3;

        r1 := @parameter0: org.waveprotocol.wave.model.supplement.PrimitiveSupplement;

        r3 := @parameter1: org.waveprotocol.wave.model.conversation.ConversationView;

        r4 := @parameter2: org.waveprotocol.wave.model.wave.ParticipantId;

        r5 := @parameter3: org.waveprotocol.wave.model.supplement.SupplementedWaveImpl$DefaultFollow;

        $r0 = new org.waveprotocol.wave.model.supplement.SupplementedWaveImpl;

        $r2 = new org.waveprotocol.wave.model.supplement.SupplementedWaveImpl$WaveViewAdapter;

        specialinvoke $r2.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl$WaveViewAdapter: void <init>(org.waveprotocol.wave.model.conversation.ConversationView,org.waveprotocol.wave.model.wave.ParticipantId)>(r3, r4);

        specialinvoke $r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl: void <init>(org.waveprotocol.wave.model.supplement.PrimitiveSupplement,org.waveprotocol.wave.model.supplement.SupplementWaveView,org.waveprotocol.wave.model.supplement.SupplementedWaveImpl$DefaultFollow)>(r1, $r2, r5);

        return $r0;
    }

    public static org.waveprotocol.wave.model.supplement.SupplementedWave create(org.waveprotocol.wave.model.supplement.PrimitiveSupplement, org.waveprotocol.wave.model.supplement.SupplementWaveView, org.waveprotocol.wave.model.supplement.SupplementedWaveImpl$DefaultFollow)
    {
        org.waveprotocol.wave.model.supplement.SupplementWaveView r3;
        org.waveprotocol.wave.model.supplement.SupplementedWaveImpl$DefaultFollow r4;
        org.waveprotocol.wave.model.supplement.PrimitiveSupplement r1;
        org.waveprotocol.wave.model.supplement.SupplementedWaveImpl$CheckingSupplementWaveView $r2;
        org.waveprotocol.wave.model.supplement.SupplementedWaveImpl $r0;

        r1 := @parameter0: org.waveprotocol.wave.model.supplement.PrimitiveSupplement;

        r3 := @parameter1: org.waveprotocol.wave.model.supplement.SupplementWaveView;

        r4 := @parameter2: org.waveprotocol.wave.model.supplement.SupplementedWaveImpl$DefaultFollow;

        $r0 = new org.waveprotocol.wave.model.supplement.SupplementedWaveImpl;

        $r2 = new org.waveprotocol.wave.model.supplement.SupplementedWaveImpl$CheckingSupplementWaveView;

        specialinvoke $r2.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl$CheckingSupplementWaveView: void <init>(org.waveprotocol.wave.model.supplement.SupplementWaveView,org.waveprotocol.wave.model.supplement.SupplementedWaveImpl$1)>(r3, null);

        specialinvoke $r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl: void <init>(org.waveprotocol.wave.model.supplement.PrimitiveSupplement,org.waveprotocol.wave.model.supplement.SupplementWaveView,org.waveprotocol.wave.model.supplement.SupplementedWaveImpl$DefaultFollow)>(r1, $r2, r4);

        return $r0;
    }

    protected void <init>(org.waveprotocol.wave.model.supplement.PrimitiveSupplement, org.waveprotocol.wave.model.supplement.SupplementWaveView, org.waveprotocol.wave.model.supplement.SupplementedWaveImpl$DefaultFollow)
    {
        org.waveprotocol.wave.model.supplement.SupplementWaveView r3;
        org.waveprotocol.wave.model.supplement.SupplementedWaveImpl$DefaultFollow r4;
        org.waveprotocol.wave.model.supplement.SupplementImpl $r1;
        org.waveprotocol.wave.model.supplement.PrimitiveSupplement r2;
        org.waveprotocol.wave.model.supplement.SupplementedWaveImpl r0;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementedWaveImpl;

        r2 := @parameter0: org.waveprotocol.wave.model.supplement.PrimitiveSupplement;

        r3 := @parameter1: org.waveprotocol.wave.model.supplement.SupplementWaveView;

        r4 := @parameter2: org.waveprotocol.wave.model.supplement.SupplementedWaveImpl$DefaultFollow;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.waveprotocol.wave.model.supplement.SupplementImpl;

        specialinvoke $r1.<org.waveprotocol.wave.model.supplement.SupplementImpl: void <init>(org.waveprotocol.wave.model.supplement.PrimitiveSupplement)>(r2);

        r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl: org.waveprotocol.wave.model.supplement.Supplement supplement> = $r1;

        r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl: org.waveprotocol.wave.model.supplement.SupplementWaveView wave> = r3;

        r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl: org.waveprotocol.wave.model.supplement.SupplementedWaveImpl$DefaultFollow followPolicy> = r4;

        return;
    }

    public org.waveprotocol.wave.model.supplement.ThreadState getThreadState(org.waveprotocol.wave.model.conversation.ConversationThread)
    {
        org.waveprotocol.wave.model.conversation.ConversationThread r0;
        org.waveprotocol.wave.model.id.WaveletId $r5;
        org.waveprotocol.wave.model.conversation.Conversation $r1;
        java.lang.String $r2, $r6;
        org.waveprotocol.wave.model.supplement.Supplement $r4;
        org.waveprotocol.wave.model.supplement.SupplementedWaveImpl r3;
        org.waveprotocol.wave.model.supplement.ThreadState $r7;

        r3 := @this: org.waveprotocol.wave.model.supplement.SupplementedWaveImpl;

        r0 := @parameter0: org.waveprotocol.wave.model.conversation.ConversationThread;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.conversation.ConversationThread: org.waveprotocol.wave.model.conversation.Conversation getConversation()>();

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.conversation.Conversation: java.lang.String getId()>();

        $r4 = r3.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl: org.waveprotocol.wave.model.supplement.Supplement supplement>;

        $r5 = staticinvoke <org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.id.WaveletId widFor(java.lang.String)>($r2);

        $r6 = interfaceinvoke r0.<org.waveprotocol.wave.model.conversation.ConversationThread: java.lang.String getId()>();

        $r7 = interfaceinvoke $r4.<org.waveprotocol.wave.model.supplement.Supplement: org.waveprotocol.wave.model.supplement.ThreadState getThreadState(org.waveprotocol.wave.model.id.WaveletId,java.lang.String)>($r5, $r6);

        return $r7;
    }

    public boolean isUnread(org.waveprotocol.wave.model.conversation.ConversationBlip)
    {
        org.waveprotocol.wave.model.wave.Blip $r1;
        org.waveprotocol.wave.model.id.WaveletId $r5;
        org.waveprotocol.wave.model.conversation.ConversationBlip r0;
        org.waveprotocol.wave.model.wave.Wavelet $r4;
        java.lang.Long $r7;
        int $i0;
        java.lang.String $r6;
        org.waveprotocol.wave.model.supplement.Supplement $r3;
        org.waveprotocol.wave.model.supplement.SupplementedWaveImpl r2;
        boolean $z0;

        r2 := @this: org.waveprotocol.wave.model.supplement.SupplementedWaveImpl;

        r0 := @parameter0: org.waveprotocol.wave.model.conversation.ConversationBlip;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.conversation.ConversationBlip: org.waveprotocol.wave.model.wave.Blip hackGetRaw()>();

        $r3 = r2.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl: org.waveprotocol.wave.model.supplement.Supplement supplement>;

        $r4 = interfaceinvoke $r1.<org.waveprotocol.wave.model.wave.Blip: org.waveprotocol.wave.model.wave.Wavelet getWavelet()>();

        $r5 = interfaceinvoke $r4.<org.waveprotocol.wave.model.wave.Wavelet: org.waveprotocol.wave.model.id.WaveletId getId()>();

        $r6 = interfaceinvoke $r1.<org.waveprotocol.wave.model.wave.Blip: java.lang.String getId()>();

        $r7 = interfaceinvoke $r1.<org.waveprotocol.wave.model.wave.Blip: java.lang.Long getLastModifiedVersion()>();

        $i0 = virtualinvoke $r7.<java.lang.Long: int intValue()>();

        $z0 = interfaceinvoke $r3.<org.waveprotocol.wave.model.supplement.Supplement: boolean isBlipUnread(org.waveprotocol.wave.model.id.WaveletId,java.lang.String,int)>($r5, $r6, $i0);

        return $z0;
    }

    public boolean isParticipantsUnread(org.waveprotocol.wave.model.wave.Wavelet)
    {
        org.waveprotocol.wave.model.wave.Wavelet r1;
        int $i1;
        org.waveprotocol.wave.model.id.WaveletId $r3;
        long $l0;
        org.waveprotocol.wave.model.supplement.Supplement $r2;
        org.waveprotocol.wave.model.supplement.SupplementedWaveImpl r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementedWaveImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.Wavelet;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl: org.waveprotocol.wave.model.supplement.Supplement supplement>;

        $r3 = interfaceinvoke r1.<org.waveprotocol.wave.model.wave.Wavelet: org.waveprotocol.wave.model.id.WaveletId getId()>();

        $l0 = interfaceinvoke r1.<org.waveprotocol.wave.model.wave.Wavelet: long getVersion()>();

        $i1 = (int) $l0;

        $z0 = interfaceinvoke $r2.<org.waveprotocol.wave.model.supplement.Supplement: boolean isParticipantsUnread(org.waveprotocol.wave.model.id.WaveletId,int)>($r3, $i1);

        return $z0;
    }

    public boolean haveParticipantsEverBeenRead(org.waveprotocol.wave.model.wave.Wavelet)
    {
        org.waveprotocol.wave.model.wave.Wavelet r1;
        org.waveprotocol.wave.model.id.WaveletId $r3;
        org.waveprotocol.wave.model.supplement.Supplement $r2;
        org.waveprotocol.wave.model.supplement.SupplementedWaveImpl r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementedWaveImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.Wavelet;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl: org.waveprotocol.wave.model.supplement.Supplement supplement>;

        $r3 = interfaceinvoke r1.<org.waveprotocol.wave.model.wave.Wavelet: org.waveprotocol.wave.model.id.WaveletId getId()>();

        $z0 = interfaceinvoke $r2.<org.waveprotocol.wave.model.supplement.Supplement: boolean haveParticipantsEverBeenRead(org.waveprotocol.wave.model.id.WaveletId)>($r3);

        return $z0;
    }

    public boolean isTagsUnread(org.waveprotocol.wave.model.wave.Wavelet)
    {
        org.waveprotocol.wave.model.wave.Wavelet r1;
        int $i1;
        org.waveprotocol.wave.model.id.WaveletId $r3;
        long $l0;
        org.waveprotocol.wave.model.supplement.Supplement $r2;
        org.waveprotocol.wave.model.supplement.SupplementedWaveImpl r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementedWaveImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.Wavelet;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl: org.waveprotocol.wave.model.supplement.Supplement supplement>;

        $r3 = interfaceinvoke r1.<org.waveprotocol.wave.model.wave.Wavelet: org.waveprotocol.wave.model.id.WaveletId getId()>();

        $l0 = interfaceinvoke r1.<org.waveprotocol.wave.model.wave.Wavelet: long getVersion()>();

        $i1 = (int) $l0;

        $z0 = interfaceinvoke $r2.<org.waveprotocol.wave.model.supplement.Supplement: boolean isTagsUnread(org.waveprotocol.wave.model.id.WaveletId,int)>($r3, $i1);

        return $z0;
    }

    public void setThreadState(org.waveprotocol.wave.model.conversation.ConversationThread, org.waveprotocol.wave.model.supplement.ThreadState)
    {
        org.waveprotocol.wave.model.conversation.ConversationThread r1;
        org.waveprotocol.wave.model.id.WaveletId $r5;
        org.waveprotocol.wave.model.conversation.Conversation $r3;
        java.lang.String $r4, $r6;
        org.waveprotocol.wave.model.supplement.Supplement $r2;
        org.waveprotocol.wave.model.supplement.SupplementedWaveImpl r0;
        org.waveprotocol.wave.model.supplement.ThreadState r7;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementedWaveImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.conversation.ConversationThread;

        r7 := @parameter1: org.waveprotocol.wave.model.supplement.ThreadState;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl: org.waveprotocol.wave.model.supplement.Supplement supplement>;

        $r3 = interfaceinvoke r1.<org.waveprotocol.wave.model.conversation.ConversationThread: org.waveprotocol.wave.model.conversation.Conversation getConversation()>();

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.model.conversation.Conversation: java.lang.String getId()>();

        $r5 = staticinvoke <org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.id.WaveletId widFor(java.lang.String)>($r4);

        $r6 = interfaceinvoke r1.<org.waveprotocol.wave.model.conversation.ConversationThread: java.lang.String getId()>();

        interfaceinvoke $r2.<org.waveprotocol.wave.model.supplement.Supplement: void setThreadState(org.waveprotocol.wave.model.id.WaveletId,java.lang.String,org.waveprotocol.wave.model.supplement.ThreadState)>($r5, $r6, r7);

        return;
    }

    public void markAsRead()
    {
        org.waveprotocol.wave.model.supplement.SupplementWaveView $r1, $r6;
        java.util.Iterator $r3;
        org.waveprotocol.wave.model.id.WaveletId r5;
        long $l0;
        java.lang.Iterable $r2;
        int $i1;
        java.lang.Object $r4;
        org.waveprotocol.wave.model.supplement.Supplement $r7;
        org.waveprotocol.wave.model.supplement.SupplementedWaveImpl r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementedWaveImpl;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl: org.waveprotocol.wave.model.supplement.SupplementWaveView wave>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.supplement.SupplementWaveView: java.lang.Iterable getWavelets()>();

        $r3 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.waveprotocol.wave.model.id.WaveletId) $r4;

        $r7 = r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl: org.waveprotocol.wave.model.supplement.Supplement supplement>;

        $r6 = r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl: org.waveprotocol.wave.model.supplement.SupplementWaveView wave>;

        $l0 = interfaceinvoke $r6.<org.waveprotocol.wave.model.supplement.SupplementWaveView: long getVersion(org.waveprotocol.wave.model.id.WaveletId)>(r5);

        $i1 = (int) $l0;

        interfaceinvoke $r7.<org.waveprotocol.wave.model.supplement.Supplement: void markWaveletAsRead(org.waveprotocol.wave.model.id.WaveletId,int)>(r5, $i1);

        goto label1;

     label2:
        return;
    }

    public void markParticipantAsRead(org.waveprotocol.wave.model.wave.Wavelet)
    {
        org.waveprotocol.wave.model.wave.Wavelet r1;
        int $i1;
        org.waveprotocol.wave.model.id.WaveletId $r3;
        long $l0;
        org.waveprotocol.wave.model.supplement.Supplement $r2;
        org.waveprotocol.wave.model.supplement.SupplementedWaveImpl r0;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementedWaveImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.Wavelet;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl: org.waveprotocol.wave.model.supplement.Supplement supplement>;

        $r3 = interfaceinvoke r1.<org.waveprotocol.wave.model.wave.Wavelet: org.waveprotocol.wave.model.id.WaveletId getId()>();

        $l0 = interfaceinvoke r1.<org.waveprotocol.wave.model.wave.Wavelet: long getVersion()>();

        $i1 = (int) $l0;

        interfaceinvoke $r2.<org.waveprotocol.wave.model.supplement.Supplement: void markParticipantsAsRead(org.waveprotocol.wave.model.id.WaveletId,int)>($r3, $i1);

        return;
    }

    public void markTagsAsRead(org.waveprotocol.wave.model.wave.Wavelet)
    {
        org.waveprotocol.wave.model.wave.Wavelet r1;
        int $i1;
        org.waveprotocol.wave.model.id.WaveletId $r3;
        long $l0;
        org.waveprotocol.wave.model.supplement.Supplement $r2;
        org.waveprotocol.wave.model.supplement.SupplementedWaveImpl r0;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementedWaveImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.Wavelet;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl: org.waveprotocol.wave.model.supplement.Supplement supplement>;

        $r3 = interfaceinvoke r1.<org.waveprotocol.wave.model.wave.Wavelet: org.waveprotocol.wave.model.id.WaveletId getId()>();

        $l0 = interfaceinvoke r1.<org.waveprotocol.wave.model.wave.Wavelet: long getVersion()>();

        $i1 = (int) $l0;

        interfaceinvoke $r2.<org.waveprotocol.wave.model.supplement.Supplement: void markTagsAsRead(org.waveprotocol.wave.model.id.WaveletId,int)>($r3, $i1);

        return;
    }

    public void markAsRead(org.waveprotocol.wave.model.conversation.ConversationBlip)
    {
        org.waveprotocol.wave.model.wave.Blip $r2;
        org.waveprotocol.wave.model.id.WaveletId $r5;
        long $l0, $l1, $l2;
        org.waveprotocol.wave.model.conversation.ConversationBlip r1;
        org.waveprotocol.wave.model.wave.Wavelet $r3;
        java.lang.Long $r7;
        int $i3;
        java.lang.String $r6;
        org.waveprotocol.wave.model.supplement.Supplement $r4;
        org.waveprotocol.wave.model.supplement.SupplementedWaveImpl r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementedWaveImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.conversation.ConversationBlip;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl: boolean isUnread(org.waveprotocol.wave.model.conversation.ConversationBlip)>(r1);

        if $z0 == 0 goto label1;

        $r2 = interfaceinvoke r1.<org.waveprotocol.wave.model.conversation.ConversationBlip: org.waveprotocol.wave.model.wave.Blip hackGetRaw()>();

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.wave.Blip: org.waveprotocol.wave.model.wave.Wavelet getWavelet()>();

        $r4 = r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl: org.waveprotocol.wave.model.supplement.Supplement supplement>;

        $r5 = interfaceinvoke $r3.<org.waveprotocol.wave.model.wave.Wavelet: org.waveprotocol.wave.model.id.WaveletId getId()>();

        $r6 = interfaceinvoke $r2.<org.waveprotocol.wave.model.wave.Blip: java.lang.String getId()>();

        $r7 = interfaceinvoke $r2.<org.waveprotocol.wave.model.wave.Blip: java.lang.Long getLastModifiedVersion()>();

        $l0 = virtualinvoke $r7.<java.lang.Long: long longValue()>();

        $l1 = interfaceinvoke $r3.<org.waveprotocol.wave.model.wave.Wavelet: long getVersion()>();

        $l2 = staticinvoke <java.lang.Math: long max(long,long)>($l0, $l1);

        $i3 = (int) $l2;

        interfaceinvoke $r4.<org.waveprotocol.wave.model.supplement.Supplement: void markBlipAsRead(org.waveprotocol.wave.model.id.WaveletId,java.lang.String,int)>($r5, $r6, $i3);

     label1:
        return;
    }

    public void markAsUnread()
    {
        org.waveprotocol.wave.model.supplement.Supplement $r1;
        org.waveprotocol.wave.model.supplement.SupplementedWaveImpl r0;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementedWaveImpl;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl: org.waveprotocol.wave.model.supplement.Supplement supplement>;

        interfaceinvoke $r1.<org.waveprotocol.wave.model.supplement.Supplement: void markAsUnread()>();

        return;
    }

    public void mute()
    {
        org.waveprotocol.wave.model.supplement.SupplementedWaveImpl r0;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementedWaveImpl;

        virtualinvoke r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl: void unfollow()>();

        return;
    }

    public void follow()
    {
        org.waveprotocol.wave.model.supplement.Supplement $r1;
        org.waveprotocol.wave.model.supplement.SupplementedWaveImpl r0;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementedWaveImpl;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl: org.waveprotocol.wave.model.supplement.Supplement supplement>;

        interfaceinvoke $r1.<org.waveprotocol.wave.model.supplement.Supplement: void follow()>();

        return;
    }

    public void unfollow()
    {
        org.waveprotocol.wave.model.supplement.Supplement $r1;
        org.waveprotocol.wave.model.supplement.SupplementedWaveImpl r0;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementedWaveImpl;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl: org.waveprotocol.wave.model.supplement.Supplement supplement>;

        interfaceinvoke $r1.<org.waveprotocol.wave.model.supplement.Supplement: void unfollow()>();

        return;
    }

    public java.util.Set getFolders()
    {
        java.util.Set $r2;
        org.waveprotocol.wave.model.supplement.Supplement $r1;
        org.waveprotocol.wave.model.supplement.SupplementedWaveImpl r0;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementedWaveImpl;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl: org.waveprotocol.wave.model.supplement.Supplement supplement>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.supplement.Supplement: java.util.Set getFolders()>();

        return $r2;
    }

    public void moveToFolder(int)
    {
        int i0;
        org.waveprotocol.wave.model.supplement.Supplement $r1, $r2;
        org.waveprotocol.wave.model.supplement.SupplementedWaveImpl r0;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementedWaveImpl;

        i0 := @parameter0: int;

        lookupswitch(i0)
        {
            case 1: goto label1;
            case 3: goto label2;
            default: goto label3;
        };

     label1:
        virtualinvoke r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl: void inbox()>();

        goto label4;

     label2:
        virtualinvoke r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl: void archive()>();

        $r1 = r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl: org.waveprotocol.wave.model.supplement.Supplement supplement>;

        interfaceinvoke $r1.<org.waveprotocol.wave.model.supplement.Supplement: void removeAllFolders()>();

        goto label4;

     label3:
        virtualinvoke r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl: void archive()>();

        $r2 = r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl: org.waveprotocol.wave.model.supplement.Supplement supplement>;

        interfaceinvoke $r2.<org.waveprotocol.wave.model.supplement.Supplement: void moveToFolder(int)>(i0);

     label4:
        return;
    }

    public void inbox()
    {
        org.waveprotocol.wave.model.supplement.Supplement $r1, $r2;
        org.waveprotocol.wave.model.supplement.SupplementedWaveImpl r0;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementedWaveImpl;

        virtualinvoke r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl: void follow()>();

        $r1 = r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl: org.waveprotocol.wave.model.supplement.Supplement supplement>;

        interfaceinvoke $r1.<org.waveprotocol.wave.model.supplement.Supplement: void removeAllFolders()>();

        $r2 = r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl: org.waveprotocol.wave.model.supplement.Supplement supplement>;

        interfaceinvoke $r2.<org.waveprotocol.wave.model.supplement.Supplement: void clearArchive()>();

        return;
    }

    public void see()
    {
        org.waveprotocol.wave.model.supplement.SupplementWaveView $r1, $r7;
        java.util.Iterator $r3;
        org.waveprotocol.wave.model.id.WaveletId r6;
        java.lang.Iterable $r2;
        org.waveprotocol.wave.model.version.HashedVersion $r9;
        java.lang.Object $r5;
        org.waveprotocol.wave.model.supplement.Supplement $r4, $r8;
        org.waveprotocol.wave.model.supplement.SupplementedWaveImpl r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementedWaveImpl;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl: org.waveprotocol.wave.model.supplement.SupplementWaveView wave>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.supplement.SupplementWaveView: java.lang.Iterable getWavelets()>();

        $r3 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.waveprotocol.wave.model.id.WaveletId) $r5;

        $r8 = r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl: org.waveprotocol.wave.model.supplement.Supplement supplement>;

        $r7 = r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl: org.waveprotocol.wave.model.supplement.SupplementWaveView wave>;

        $r9 = interfaceinvoke $r7.<org.waveprotocol.wave.model.supplement.SupplementWaveView: org.waveprotocol.wave.model.version.HashedVersion getSignature(org.waveprotocol.wave.model.id.WaveletId)>(r6);

        interfaceinvoke $r8.<org.waveprotocol.wave.model.supplement.Supplement: void setSeenVersion(org.waveprotocol.wave.model.id.WaveletId,org.waveprotocol.wave.model.version.HashedVersion)>(r6, $r9);

        goto label1;

     label2:
        $r4 = r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl: org.waveprotocol.wave.model.supplement.Supplement supplement>;

        interfaceinvoke $r4.<org.waveprotocol.wave.model.supplement.Supplement: void clearPendingNotification()>();

        return;
    }

    public void see(org.waveprotocol.wave.model.wave.Wavelet)
    {
        org.waveprotocol.wave.model.wave.Wavelet r1;
        org.waveprotocol.wave.model.version.HashedVersion $r4;
        org.waveprotocol.wave.model.id.WaveletId $r3;
        org.waveprotocol.wave.model.supplement.Supplement $r2, $r5;
        org.waveprotocol.wave.model.supplement.SupplementedWaveImpl r0;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementedWaveImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.Wavelet;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl: org.waveprotocol.wave.model.supplement.Supplement supplement>;

        $r3 = interfaceinvoke r1.<org.waveprotocol.wave.model.wave.Wavelet: org.waveprotocol.wave.model.id.WaveletId getId()>();

        $r4 = interfaceinvoke r1.<org.waveprotocol.wave.model.wave.Wavelet: org.waveprotocol.wave.model.version.HashedVersion getHashedVersion()>();

        interfaceinvoke $r2.<org.waveprotocol.wave.model.supplement.Supplement: void setSeenVersion(org.waveprotocol.wave.model.id.WaveletId,org.waveprotocol.wave.model.version.HashedVersion)>($r3, $r4);

        $r5 = r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl: org.waveprotocol.wave.model.supplement.Supplement supplement>;

        interfaceinvoke $r5.<org.waveprotocol.wave.model.supplement.Supplement: void clearPendingNotification()>();

        return;
    }

    public void archive()
    {
        org.waveprotocol.wave.model.supplement.SupplementWaveView $r1, $r6;
        java.util.Iterator $r3;
        org.waveprotocol.wave.model.id.WaveletId r5;
        long $l0;
        java.lang.Iterable $r2;
        int $i1;
        java.lang.Object $r4;
        org.waveprotocol.wave.model.supplement.Supplement $r7;
        org.waveprotocol.wave.model.supplement.SupplementedWaveImpl r0;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementedWaveImpl;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl: boolean isFollowed()>();

        if $z0 == 0 goto label2;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl: org.waveprotocol.wave.model.supplement.SupplementWaveView wave>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.supplement.SupplementWaveView: java.lang.Iterable getWavelets()>();

        $r3 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.waveprotocol.wave.model.id.WaveletId) $r4;

        $r7 = r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl: org.waveprotocol.wave.model.supplement.Supplement supplement>;

        $r6 = r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl: org.waveprotocol.wave.model.supplement.SupplementWaveView wave>;

        $l0 = interfaceinvoke $r6.<org.waveprotocol.wave.model.supplement.SupplementWaveView: long getVersion(org.waveprotocol.wave.model.id.WaveletId)>(r5);

        $i1 = (int) $l0;

        interfaceinvoke $r7.<org.waveprotocol.wave.model.supplement.Supplement: void archive(org.waveprotocol.wave.model.id.WaveletId,int)>(r5, $i1);

        goto label1;

     label2:
        return;
    }

    public boolean isInbox()
    {
        org.waveprotocol.wave.model.supplement.SupplementedWaveImpl r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementedWaveImpl;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl: boolean isFollowed()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl: boolean isArchived()>();

        if $z1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public boolean isArchived()
    {
        org.waveprotocol.wave.model.supplement.SupplementWaveView $r1, $r6;
        java.util.Iterator $r3;
        org.waveprotocol.wave.model.id.WaveletId r5;
        long $l0;
        java.lang.Iterable $r2;
        int $i1;
        java.lang.Object $r4;
        org.waveprotocol.wave.model.supplement.Supplement $r7;
        org.waveprotocol.wave.model.supplement.SupplementedWaveImpl r0;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementedWaveImpl;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl: org.waveprotocol.wave.model.supplement.SupplementWaveView wave>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.supplement.SupplementWaveView: java.lang.Iterable getWavelets()>();

        $r3 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.waveprotocol.wave.model.id.WaveletId) $r4;

        $r7 = r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl: org.waveprotocol.wave.model.supplement.Supplement supplement>;

        $r6 = r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl: org.waveprotocol.wave.model.supplement.SupplementWaveView wave>;

        $l0 = interfaceinvoke $r6.<org.waveprotocol.wave.model.supplement.SupplementWaveView: long getVersion(org.waveprotocol.wave.model.id.WaveletId)>(r5);

        $i1 = (int) $l0;

        $z1 = interfaceinvoke $r7.<org.waveprotocol.wave.model.supplement.Supplement: boolean isArchived(org.waveprotocol.wave.model.id.WaveletId,int)>(r5, $i1);

        if $z1 != 0 goto label2;

        return 0;

     label2:
        goto label1;

     label3:
        return 1;
    }

    public boolean isMute()
    {
        org.waveprotocol.wave.model.supplement.SupplementedWaveImpl r0;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementedWaveImpl;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl: boolean isFollowed()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public boolean isFollowed()
    {
        org.waveprotocol.wave.model.supplement.SupplementWaveView $r1;
        org.waveprotocol.wave.model.supplement.SupplementedWaveImpl$DefaultFollow $r2;
        org.waveprotocol.wave.model.supplement.Supplement $r3;
        org.waveprotocol.wave.model.supplement.SupplementedWaveImpl r0;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementedWaveImpl;

        $r3 = r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl: org.waveprotocol.wave.model.supplement.Supplement supplement>;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl: org.waveprotocol.wave.model.supplement.SupplementedWaveImpl$DefaultFollow followPolicy>;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl: org.waveprotocol.wave.model.supplement.SupplementWaveView wave>;

        $z0 = interfaceinvoke $r2.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl$DefaultFollow: boolean isFollowed(org.waveprotocol.wave.model.supplement.SupplementWaveView)>($r1);

        $z1 = interfaceinvoke $r3.<org.waveprotocol.wave.model.supplement.Supplement: boolean isFollowed(boolean)>($z0);

        return $z1;
    }

    public boolean isTrashed()
    {
        java.util.Set $r2;
        org.waveprotocol.wave.model.supplement.Supplement $r1;
        java.lang.Integer $r3;
        org.waveprotocol.wave.model.supplement.SupplementedWaveImpl r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementedWaveImpl;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl: org.waveprotocol.wave.model.supplement.Supplement supplement>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.supplement.Supplement: java.util.Set getFolders()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(8);

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>($r3);

        return $z0;
    }

    public org.waveprotocol.wave.model.supplement.WantedEvaluationSet getWantedEvaluationSet(org.waveprotocol.wave.model.wave.Wavelet)
    {
        org.waveprotocol.wave.model.wave.Wavelet r1;
        org.waveprotocol.wave.model.supplement.WantedEvaluationSet $r4;
        org.waveprotocol.wave.model.id.WaveletId $r3;
        org.waveprotocol.wave.model.supplement.Supplement $r2;
        org.waveprotocol.wave.model.supplement.SupplementedWaveImpl r0;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementedWaveImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.Wavelet;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl: org.waveprotocol.wave.model.supplement.Supplement supplement>;

        $r3 = interfaceinvoke r1.<org.waveprotocol.wave.model.wave.Wavelet: org.waveprotocol.wave.model.id.WaveletId getId()>();

        $r4 = interfaceinvoke $r2.<org.waveprotocol.wave.model.supplement.Supplement: org.waveprotocol.wave.model.supplement.WantedEvaluationSet getWantedEvaluationSet(org.waveprotocol.wave.model.id.WaveletId)>($r3);

        return $r4;
    }

    public void addWantedEvaluation(org.waveprotocol.wave.model.supplement.WantedEvaluation)
    {
        org.waveprotocol.wave.model.supplement.WantedEvaluation r1;
        org.waveprotocol.wave.model.supplement.Supplement $r2;
        org.waveprotocol.wave.model.supplement.SupplementedWaveImpl r0;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementedWaveImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.supplement.WantedEvaluation;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl: org.waveprotocol.wave.model.supplement.Supplement supplement>;

        interfaceinvoke $r2.<org.waveprotocol.wave.model.supplement.Supplement: void addWantedEvaluation(org.waveprotocol.wave.model.supplement.WantedEvaluation)>(r1);

        return;
    }

    public org.waveprotocol.wave.model.version.HashedVersion getSeenVersion(org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.wave.model.version.HashedVersion $r3;
        org.waveprotocol.wave.model.id.WaveletId r1;
        org.waveprotocol.wave.model.supplement.Supplement $r2;
        org.waveprotocol.wave.model.supplement.SupplementedWaveImpl r0;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementedWaveImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl: org.waveprotocol.wave.model.supplement.Supplement supplement>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.supplement.Supplement: org.waveprotocol.wave.model.version.HashedVersion getSeenVersion(org.waveprotocol.wave.model.id.WaveletId)>(r1);

        return $r3;
    }

    public boolean hasBeenSeen()
    {
        org.waveprotocol.wave.model.supplement.SupplementWaveView $r1;
        java.util.Iterator $r3;
        org.waveprotocol.wave.model.id.WaveletId r5;
        long $l0;
        java.lang.Iterable $r2;
        byte $b1;
        org.waveprotocol.wave.model.version.HashedVersion $r7;
        int $i2;
        java.lang.Object $r4;
        org.waveprotocol.wave.model.supplement.Supplement $r6;
        org.waveprotocol.wave.model.supplement.SupplementedWaveImpl r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementedWaveImpl;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl: org.waveprotocol.wave.model.supplement.SupplementWaveView wave>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.supplement.SupplementWaveView: java.lang.Iterable getWavelets()>();

        $r3 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.waveprotocol.wave.model.id.WaveletId) $r4;

        $r6 = r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl: org.waveprotocol.wave.model.supplement.Supplement supplement>;

        $r7 = interfaceinvoke $r6.<org.waveprotocol.wave.model.supplement.Supplement: org.waveprotocol.wave.model.version.HashedVersion getSeenVersion(org.waveprotocol.wave.model.id.WaveletId)>(r5);

        if $r7 == null goto label2;

        $l0 = virtualinvoke $r7.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        $b1 = $l0 cmp 0L;

        $i2 = (int) $b1;

        if $i2 <= 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    public boolean hasPendingNotification()
    {
        org.waveprotocol.wave.model.supplement.SupplementWaveView $r2;
        java.util.Iterator $r4;
        org.waveprotocol.wave.model.id.WaveletId r6;
        java.lang.Iterable $r3;
        java.lang.Object $r5;
        org.waveprotocol.wave.model.supplement.Supplement $r1, $r7, $r8;
        org.waveprotocol.wave.model.supplement.SupplementedWaveImpl r0;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementedWaveImpl;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl: org.waveprotocol.wave.model.supplement.Supplement supplement>;

        $z0 = interfaceinvoke $r1.<org.waveprotocol.wave.model.supplement.Supplement: boolean hasNotifiedVersion()>();

        if $z0 != 0 goto label1;

        $r8 = r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl: org.waveprotocol.wave.model.supplement.Supplement supplement>;

        $z3 = interfaceinvoke $r8.<org.waveprotocol.wave.model.supplement.Supplement: boolean hasPendingNotification()>();

        return $z3;

     label1:
        $r2 = r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl: org.waveprotocol.wave.model.supplement.SupplementWaveView wave>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.supplement.SupplementWaveView: java.lang.Iterable getWavelets()>();

        $r4 = interfaceinvoke $r3.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.waveprotocol.wave.model.id.WaveletId) $r5;

        $r7 = r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl: org.waveprotocol.wave.model.supplement.Supplement supplement>;

        $z2 = interfaceinvoke $r7.<org.waveprotocol.wave.model.supplement.Supplement: boolean hasPendingNotification(org.waveprotocol.wave.model.id.WaveletId)>(r6);

        if $z2 == 0 goto label3;

        return 1;

     label3:
        goto label2;

     label4:
        return 0;
    }

    public void markAsNotified()
    {
        org.waveprotocol.wave.model.supplement.SupplementWaveView $r1, $r6;
        java.util.Iterator $r3;
        org.waveprotocol.wave.model.id.WaveletId r5;
        long $l0;
        java.lang.Iterable $r2;
        int $i1;
        java.lang.Object $r4;
        org.waveprotocol.wave.model.supplement.Supplement $r7;
        org.waveprotocol.wave.model.supplement.SupplementedWaveImpl r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementedWaveImpl;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl: org.waveprotocol.wave.model.supplement.SupplementWaveView wave>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.supplement.SupplementWaveView: java.lang.Iterable getWavelets()>();

        $r3 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.waveprotocol.wave.model.id.WaveletId) $r4;

        $r7 = r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl: org.waveprotocol.wave.model.supplement.Supplement supplement>;

        $r6 = r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl: org.waveprotocol.wave.model.supplement.SupplementWaveView wave>;

        $l0 = interfaceinvoke $r6.<org.waveprotocol.wave.model.supplement.SupplementWaveView: long getVersion(org.waveprotocol.wave.model.id.WaveletId)>(r5);

        $i1 = (int) $l0;

        interfaceinvoke $r7.<org.waveprotocol.wave.model.supplement.Supplement: void markWaveletAsNotified(org.waveprotocol.wave.model.id.WaveletId,int)>(r5, $i1);

        goto label1;

     label2:
        return;
    }

    public org.waveprotocol.wave.model.util.ReadableStringMap getGadgetState(java.lang.String)
    {
        java.lang.String r1;
        org.waveprotocol.wave.model.util.ReadableStringMap $r3;
        org.waveprotocol.wave.model.supplement.Supplement $r2;
        org.waveprotocol.wave.model.supplement.SupplementedWaveImpl r0;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementedWaveImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl: org.waveprotocol.wave.model.supplement.Supplement supplement>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.supplement.Supplement: org.waveprotocol.wave.model.util.ReadableStringMap getGadgetState(java.lang.String)>(r1);

        return $r3;
    }

    public java.lang.String getGadgetStateValue(java.lang.String, java.lang.String)
    {
        java.lang.Object $r5;
        java.lang.String r1, r4, $r6;
        org.waveprotocol.wave.model.util.ReadableStringMap $r3;
        org.waveprotocol.wave.model.supplement.Supplement $r2;
        org.waveprotocol.wave.model.supplement.SupplementedWaveImpl r0;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementedWaveImpl;

        r1 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl: org.waveprotocol.wave.model.supplement.Supplement supplement>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.supplement.Supplement: org.waveprotocol.wave.model.util.ReadableStringMap getGadgetState(java.lang.String)>(r1);

        $r5 = interfaceinvoke $r3.<org.waveprotocol.wave.model.util.ReadableStringMap: java.lang.Object get(java.lang.String)>(r4);

        $r6 = (java.lang.String) $r5;

        return $r6;
    }

    public void setGadgetState(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2, r3;
        org.waveprotocol.wave.model.supplement.Supplement $r4;
        org.waveprotocol.wave.model.supplement.SupplementedWaveImpl r0;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementedWaveImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r4 = r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl: org.waveprotocol.wave.model.supplement.Supplement supplement>;

        interfaceinvoke $r4.<org.waveprotocol.wave.model.supplement.Supplement: void setGadgetState(java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3);

        return;
    }

    public static void <clinit>()
    {
        <org.waveprotocol.wave.model.supplement.SupplementedWaveImpl: int TRASH_FOLDER> = 8;

        <org.waveprotocol.wave.model.supplement.SupplementedWaveImpl: int ALL_FOLDER> = 3;

        <org.waveprotocol.wave.model.supplement.SupplementedWaveImpl: int INBOX_FOLDER> = 1;

        return;
    }
}
