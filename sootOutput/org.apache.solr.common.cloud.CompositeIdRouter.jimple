public class org.apache.solr.common.cloud.CompositeIdRouter extends org.apache.solr.common.cloud.HashBasedRouter
{
    public static final java.lang.String NAME;
    private int separator;
    private int bitsSeparator;
    private int bits;
    private int mask1;
    private int mask2;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        int $i1;
        org.apache.solr.common.cloud.CompositeIdRouter r0;

        r0 := @this: org.apache.solr.common.cloud.CompositeIdRouter;

        specialinvoke r0.<org.apache.solr.common.cloud.HashBasedRouter: void <init>()>();

        r0.<org.apache.solr.common.cloud.CompositeIdRouter: int separator> = 33;

        r0.<org.apache.solr.common.cloud.CompositeIdRouter: int bitsSeparator> = 47;

        r0.<org.apache.solr.common.cloud.CompositeIdRouter: int bits> = 16;

        r0.<org.apache.solr.common.cloud.CompositeIdRouter: int mask1> = -65536;

        $i1 = (int) 65535;

        r0.<org.apache.solr.common.cloud.CompositeIdRouter: int mask2> = $i1;

        return;
    }

    protected void setBits(int)
    {
        org.apache.solr.common.cloud.CompositeIdRouter r0;
        int i0, $i1, $i2, $i3, $i5, $i7;

        r0 := @this: org.apache.solr.common.cloud.CompositeIdRouter;

        i0 := @parameter0: int;

        r0.<org.apache.solr.common.cloud.CompositeIdRouter: int bits> = i0;

        if i0 != 0 goto label1;

        $i2 = 0;

        goto label2;

     label1:
        $i1 = 32 - i0;

        $i5 = (int) -1;

        $i2 = $i5 << $i1;

     label2:
        r0.<org.apache.solr.common.cloud.CompositeIdRouter: int mask1> = $i2;

        if i0 != 32 goto label3;

        $i3 = 0;

        goto label4;

     label3:
        $i7 = (int) -1;

        $i3 = $i7 >>> i0;

     label4:
        r0.<org.apache.solr.common.cloud.CompositeIdRouter: int mask2> = $i3;

        return;
    }

    protected int getBits(java.lang.String, int)
    {
        org.apache.solr.common.cloud.CompositeIdRouter r1;
        char $c2;
        int i0, $i1, $i3, $i4, i5, i6, $i7, $i8, $i9, $i11, $i12, $i14;
        java.lang.String r0;

        r1 := @this: org.apache.solr.common.cloud.CompositeIdRouter;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i5 = 0;

        i6 = i0 + 1;

     label1:
        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if i6 >= $i1 goto label4;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i6);

        $i8 = (int) $c2;

        if $i8 < 48 goto label2;

        $i9 = (int) $c2;

        if $i9 <= 57 goto label3;

     label2:
        $i11 = (int) -1;

        return $i11;

     label3:
        $i4 = i5 * 10;

        $i12 = (int) $c2;

        $i3 = $i12 - 48;

        i5 = $i4 + $i3;

        i6 = i6 + 1;

        goto label1;

     label4:
        if i5 <= 32 goto label5;

        $i14 = (int) -1;

        $i7 = $i14;

        goto label6;

     label5:
        $i7 = i5;

     label6:
        return $i7;
    }

    public int sliceHash(java.lang.String, org.apache.solr.common.SolrInputDocument, org.apache.solr.common.params.SolrParams)
    {
        org.apache.solr.common.params.SolrParams r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i21, $i23;
        java.lang.String r0, $r2, r5, $r6;
        org.apache.solr.common.cloud.CompositeIdRouter r1;
        org.apache.solr.common.SolrInputDocument r3;

        r1 := @this: org.apache.solr.common.cloud.CompositeIdRouter;

        r0 := @parameter0: java.lang.String;

        r3 := @parameter1: org.apache.solr.common.SolrInputDocument;

        r4 := @parameter2: org.apache.solr.common.params.SolrParams;

        $i0 = r1.<org.apache.solr.common.cloud.CompositeIdRouter: int separator>;

        $i1 = virtualinvoke r0.<java.lang.String: int indexOf(int)>($i0);

        if $i1 >= 0 goto label1;

        $i6 = virtualinvoke r0.<java.lang.String: int length()>();

        $i7 = staticinvoke <org.apache.solr.common.util.Hash: int murmurhash3_x86_32(java.lang.CharSequence,int,int,int)>(r0, 0, $i6, 0);

        return $i7;

     label1:
        i8 = r1.<org.apache.solr.common.cloud.CompositeIdRouter: int mask1>;

        i9 = r1.<org.apache.solr.common.cloud.CompositeIdRouter: int mask2>;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        r5 = $r2;

        $i2 = r1.<org.apache.solr.common.cloud.CompositeIdRouter: int bitsSeparator>;

        $i3 = virtualinvoke $r2.<java.lang.String: int indexOf(int)>($i2);

        if $i3 <= 0 goto label6;

        $i4 = virtualinvoke r1.<org.apache.solr.common.cloud.CompositeIdRouter: int getBits(java.lang.String,int)>($r2, $i3);

        if $i4 < 0 goto label6;

        if $i4 != 0 goto label2;

        $i10 = 0;

        goto label3;

     label2:
        $i5 = 32 - $i4;

        $i21 = (int) -1;

        $i10 = $i21 << $i5;

     label3:
        i8 = $i10;

        if $i4 != 32 goto label4;

        $i11 = 0;

        goto label5;

     label4:
        $i23 = (int) -1;

        $i11 = $i23 >>> $i4;

     label5:
        i9 = $i11;

        r5 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(0, $i3);

     label6:
        $i12 = $i1 + 1;

        $r6 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i12);

        $i13 = virtualinvoke r5.<java.lang.String: int length()>();

        $i14 = staticinvoke <org.apache.solr.common.util.Hash: int murmurhash3_x86_32(java.lang.CharSequence,int,int,int)>(r5, 0, $i13, 0);

        $i15 = virtualinvoke $r6.<java.lang.String: int length()>();

        $i16 = staticinvoke <org.apache.solr.common.util.Hash: int murmurhash3_x86_32(java.lang.CharSequence,int,int,int)>($r6, 0, $i15, 0);

        $i17 = $i14 & i8;

        $i18 = $i16 & i9;

        $i19 = $i17 | $i18;

        return $i19;
    }

    public java.util.Collection getSearchSlicesSingle(java.lang.String, org.apache.solr.common.params.SolrParams, org.apache.solr.common.cloud.DocCollection)
    {
        org.apache.solr.common.cloud.DocCollection r5;
        org.apache.solr.common.params.SolrParams r14;
        boolean $z0, $z1;
        org.apache.solr.common.cloud.CompositeIdRouter r1;
        java.util.Collection $r6, $r13;
        java.util.List $r12;
        org.apache.solr.common.cloud.DocRouter$Range $r10, $r16;
        java.util.ArrayList $r17;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, $i10, $i11, $i12, $i13, $i14, i15, i16, $i18, $i20;
        java.lang.String r0, $r2, r15;
        org.apache.solr.common.cloud.Slice r9, $r11;
        java.util.Iterator $r7;
        java.lang.Object $r8;

        r1 := @this: org.apache.solr.common.cloud.CompositeIdRouter;

        r0 := @parameter0: java.lang.String;

        r14 := @parameter1: org.apache.solr.common.params.SolrParams;

        r5 := @parameter2: org.apache.solr.common.cloud.DocCollection;

        if r0 != null goto label01;

        $r13 = virtualinvoke r5.<org.apache.solr.common.cloud.DocCollection: java.util.Collection getActiveSlices()>();

        return $r13;

     label01:
        $i0 = r1.<org.apache.solr.common.cloud.CompositeIdRouter: int separator>;

        $i1 = virtualinvoke r0.<java.lang.String: int indexOf(int)>($i0);

        if $i1 >= 0 goto label02;

        $i6 = virtualinvoke r0.<java.lang.String: int length()>();

        $i7 = staticinvoke <org.apache.solr.common.util.Hash: int murmurhash3_x86_32(java.lang.CharSequence,int,int,int)>(r0, 0, $i6, 0);

        $r11 = virtualinvoke r1.<org.apache.solr.common.cloud.CompositeIdRouter: org.apache.solr.common.cloud.Slice hashToSlice(int,org.apache.solr.common.cloud.DocCollection)>($i7, r5);

        $r12 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r11);

        return $r12;

     label02:
        i8 = r1.<org.apache.solr.common.cloud.CompositeIdRouter: int mask1>;

        i9 = r1.<org.apache.solr.common.cloud.CompositeIdRouter: int mask2>;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        r15 = $r2;

        $i2 = r1.<org.apache.solr.common.cloud.CompositeIdRouter: int bitsSeparator>;

        $i3 = virtualinvoke $r2.<java.lang.String: int indexOf(int)>($i2);

        if $i3 <= 0 goto label07;

        $i4 = virtualinvoke r1.<org.apache.solr.common.cloud.CompositeIdRouter: int getBits(java.lang.String,int)>($r2, $i3);

        if $i4 < 0 goto label07;

        if $i4 != 0 goto label03;

        $i10 = 0;

        goto label04;

     label03:
        $i5 = 32 - $i4;

        $i18 = (int) -1;

        $i10 = $i18 << $i5;

     label04:
        i8 = $i10;

        if $i4 != 32 goto label05;

        $i11 = 0;

        goto label06;

     label05:
        $i20 = (int) -1;

        $i11 = $i20 >>> $i4;

     label06:
        i9 = $i11;

        r15 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(0, $i3);

     label07:
        $i12 = virtualinvoke r15.<java.lang.String: int length()>();

        $i13 = staticinvoke <org.apache.solr.common.util.Hash: int murmurhash3_x86_32(java.lang.CharSequence,int,int,int)>(r15, 0, $i12, 0);

        $i14 = $i13 & i8;

        i15 = $i14;

        i16 = $i14 | i9;

        if i8 != 0 goto label08;

        i15 = -2147483648;

        i16 = 2147483647;

     label08:
        $r16 = new org.apache.solr.common.cloud.DocRouter$Range;

        specialinvoke $r16.<org.apache.solr.common.cloud.DocRouter$Range: void <init>(int,int)>(i15, i16);

        $r17 = new java.util.ArrayList;

        specialinvoke $r17.<java.util.ArrayList: void <init>(int)>(1);

        $r6 = virtualinvoke r5.<org.apache.solr.common.cloud.DocCollection: java.util.Collection getActiveSlices()>();

        $r7 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();

     label09:
        $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label11;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (org.apache.solr.common.cloud.Slice) $r8;

        $r10 = virtualinvoke r9.<org.apache.solr.common.cloud.Slice: org.apache.solr.common.cloud.DocRouter$Range getRange()>();

        if $r10 == null goto label10;

        $z0 = virtualinvoke $r10.<org.apache.solr.common.cloud.DocRouter$Range: boolean overlaps(org.apache.solr.common.cloud.DocRouter$Range)>($r16);

        if $z0 == 0 goto label10;

        interfaceinvoke $r17.<java.util.List: boolean add(java.lang.Object)>(r9);

     label10:
        goto label09;

     label11:
        return $r17;
    }

    public java.util.List partitionRange(int, org.apache.solr.common.cloud.DocRouter$Range)
    {
        byte $b13, $b21, $b36, $b37, $b42;
        boolean $z0, z1, $z2;
        org.apache.solr.common.cloud.CompositeIdRouter r2;
        java.util.List $r4;
        org.apache.solr.common.cloud.DocRouter$Range r0, $r8;
        long $l3, $l4, l5, $l6, $l7, $l8, $l12, $l17, $l19, $l20, $l25, $l26, $l27, l28, $l30, $l31, $l32, l33, $l34, $l35, l38, l39, l40, $l41, l43;
        java.lang.AssertionError $r6;
        java.util.ArrayList $r7;
        int i0, i1, i2, $i9, $i10, $i11, $i14, $i15, $i16, $i18, $i22, i23, $i24, $i29, $i44, $i45, $i46, $i47, $i48, $i49;

        r2 := @this: org.apache.solr.common.cloud.CompositeIdRouter;

        i2 := @parameter0: int;

        r0 := @parameter1: org.apache.solr.common.cloud.DocRouter$Range;

        i0 = r0.<org.apache.solr.common.cloud.DocRouter$Range: int min>;

        i1 = r0.<org.apache.solr.common.cloud.DocRouter$Range: int max>;

        $z0 = <org.apache.solr.common.cloud.CompositeIdRouter: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i1 >= i0 goto label1;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label1:
        if i2 != 0 goto label2;

        $r4 = <java.util.Collections: java.util.List EMPTY_LIST>;

        return $r4;

     label2:
        $l4 = (long) i1;

        $l3 = (long) i0;

        l5 = $l4 - $l3;

        $l6 = (long) i2;

        $l7 = l5 / $l6;

        $l8 = staticinvoke <java.lang.Math: long max(long,long)>(1L, $l7);

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>(int)>(i2);

        l38 = (long) i0;

        l39 = l38;

        l40 = (long) i0;

        $i9 = r2.<org.apache.solr.common.cloud.CompositeIdRouter: int bits>;

        $i10 = 1 << $i9;

        $i11 = $i10 * 16;

        $l12 = (long) $i11;

        $b13 = $l8 cmp $l12;

        $i46 = (int) $b13;

        if $i46 < 0 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        z1 = $z2;

     label5:
        $l41 = (long) i1;

        $b42 = l39 cmp $l41;

        $i47 = (int) $b42;

        if $i47 >= 0 goto label9;

        l43 = l40 + $l8;

        l39 = l43;

        if z1 == 0 goto label7;

        $i16 = r2.<org.apache.solr.common.cloud.CompositeIdRouter: int mask2>;

        $l17 = (long) $i16;

        $l20 = l43 & $l17;

        $i18 = r2.<org.apache.solr.common.cloud.CompositeIdRouter: int mask2>;

        $l19 = (long) $i18;

        $b21 = $l20 cmp $l19;

        if $b21 == 0 goto label7;

        $i22 = r2.<org.apache.solr.common.cloud.CompositeIdRouter: int bits>;

        i23 = 1 << $i22;

        $i24 = r2.<org.apache.solr.common.cloud.CompositeIdRouter: int mask2>;

        $l25 = (long) $i24;

        $l27 = l43 | $l25;

        $l26 = (long) i23;

        l28 = $l27 - $l26;

        $i29 = r2.<org.apache.solr.common.cloud.CompositeIdRouter: int mask2>;

        $l30 = (long) $i29;

        $l32 = l43 | $l30;

        $l31 = (long) i23;

        l33 = $l32 + $l31;

        $l35 = l43 - l28;

        $l34 = l33 - l43;

        $b36 = $l35 cmp $l34;

        $i48 = (int) $b36;

        if $i48 >= 0 goto label6;

        $b37 = l28 cmp l38;

        $i49 = (int) $b37;

        if $i49 <= 0 goto label6;

        l39 = l28;

        goto label7;

     label6:
        l39 = l33;

     label7:
        $i44 = interfaceinvoke $r7.<java.util.List: int size()>();

        $i45 = i2 - 1;

        if $i44 != $i45 goto label8;

        l39 = (long) i1;

     label8:
        $r8 = new org.apache.solr.common.cloud.DocRouter$Range;

        $i15 = (int) l38;

        $i14 = (int) l39;

        specialinvoke $r8.<org.apache.solr.common.cloud.DocRouter$Range: void <init>(int,int)>($i15, $i14);

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r8);

        l38 = l39 + 1L;

        l40 = l43 + 1L;

        goto label5;

     label9:
        return $r7;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        <org.apache.solr.common.cloud.CompositeIdRouter: java.lang.String NAME> = "compositeId";

        $r0 = class "Lorg/apache/solr/common/cloud/CompositeIdRouter;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.solr.common.cloud.CompositeIdRouter: boolean $assertionsDisabled> = $z1;

        return;
    }
}
