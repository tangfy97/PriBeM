public class org.objectweb.asm.tree.MethodNode extends org.objectweb.asm.MethodVisitor
{
    public int access;
    public java.lang.String name;
    public java.lang.String desc;
    public java.lang.String signature;
    public java.util.List exceptions;
    public java.util.List visibleAnnotations;
    public java.util.List invisibleAnnotations;
    public java.util.List attrs;
    public java.lang.Object annotationDefault;
    public java.util.List[] visibleParameterAnnotations;
    public java.util.List[] invisibleParameterAnnotations;
    public org.objectweb.asm.tree.InsnList instructions;
    public java.util.List tryCatchBlocks;
    public int maxStack;
    public int maxLocals;
    public java.util.List localVariables;
    private boolean visited;

    public void <init>()
    {
        org.objectweb.asm.tree.MethodNode r0;

        r0 := @this: org.objectweb.asm.tree.MethodNode;

        specialinvoke r0.<org.objectweb.asm.tree.MethodNode: void <init>(int)>(262144);

        return;
    }

    public void <init>(int)
    {
        int i0;
        org.objectweb.asm.tree.MethodNode r0;
        org.objectweb.asm.tree.InsnList $r1;

        r0 := @this: org.objectweb.asm.tree.MethodNode;

        i0 := @parameter0: int;

        specialinvoke r0.<org.objectweb.asm.MethodVisitor: void <init>(int)>(i0);

        $r1 = new org.objectweb.asm.tree.InsnList;

        specialinvoke $r1.<org.objectweb.asm.tree.InsnList: void <init>()>();

        r0.<org.objectweb.asm.tree.MethodNode: org.objectweb.asm.tree.InsnList instructions> = $r1;

        return;
    }

    public void <init>(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])
    {
        org.objectweb.asm.tree.MethodNode r0;
        int i0;
        java.lang.String[] r4;
        java.lang.String r1, r2, r3;

        r0 := @this: org.objectweb.asm.tree.MethodNode;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: java.lang.String[];

        specialinvoke r0.<org.objectweb.asm.tree.MethodNode: void <init>(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>(262144, i0, r1, r2, r3, r4);

        return;
    }

    public void <init>(int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])
    {
        java.lang.String[] r5;
        java.util.ArrayList $r4, $r6, $r10;
        org.objectweb.asm.tree.MethodNode r0;
        int i0, i1, $i2, $i3;
        java.lang.String r1, r2, r3;
        boolean $z0;
        org.objectweb.asm.tree.InsnList $r7;
        java.util.List $r8, $r9;

        r0 := @this: org.objectweb.asm.tree.MethodNode;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.String;

        r3 := @parameter4: java.lang.String;

        r5 := @parameter5: java.lang.String[];

        specialinvoke r0.<org.objectweb.asm.MethodVisitor: void <init>(int)>(i0);

        r0.<org.objectweb.asm.tree.MethodNode: int access> = i1;

        r0.<org.objectweb.asm.tree.MethodNode: java.lang.String name> = r1;

        r0.<org.objectweb.asm.tree.MethodNode: java.lang.String desc> = r2;

        r0.<org.objectweb.asm.tree.MethodNode: java.lang.String signature> = r3;

        $r4 = new java.util.ArrayList;

        if r5 != null goto label1;

        $i3 = 0;

        goto label2;

     label1:
        $i3 = lengthof r5;

     label2:
        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>($i3);

        r0.<org.objectweb.asm.tree.MethodNode: java.util.List exceptions> = $r4;

        $i2 = i1 & 1024;

        if $i2 == 0 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        if $z0 != 0 goto label5;

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>(int)>(5);

        r0.<org.objectweb.asm.tree.MethodNode: java.util.List localVariables> = $r10;

     label5:
        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r0.<org.objectweb.asm.tree.MethodNode: java.util.List tryCatchBlocks> = $r6;

        if r5 == null goto label6;

        $r8 = r0.<org.objectweb.asm.tree.MethodNode: java.util.List exceptions>;

        $r9 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r5);

        interfaceinvoke $r8.<java.util.List: boolean addAll(java.util.Collection)>($r9);

     label6:
        $r7 = new org.objectweb.asm.tree.InsnList;

        specialinvoke $r7.<org.objectweb.asm.tree.InsnList: void <init>()>();

        r0.<org.objectweb.asm.tree.MethodNode: org.objectweb.asm.tree.InsnList instructions> = $r7;

        return;
    }

    public org.objectweb.asm.AnnotationVisitor visitAnnotationDefault()
    {
        org.objectweb.asm.tree.AnnotationNode $r0;
        org.objectweb.asm.tree.MethodNode r2;
        org.objectweb.asm.tree.MethodNode$1 $r1;

        r2 := @this: org.objectweb.asm.tree.MethodNode;

        $r0 = new org.objectweb.asm.tree.AnnotationNode;

        $r1 = new org.objectweb.asm.tree.MethodNode$1;

        specialinvoke $r1.<org.objectweb.asm.tree.MethodNode$1: void <init>(org.objectweb.asm.tree.MethodNode,int)>(r2, 0);

        specialinvoke $r0.<org.objectweb.asm.tree.AnnotationNode: void <init>(java.util.List)>($r1);

        return $r0;
    }

    public org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String, boolean)
    {
        org.objectweb.asm.tree.AnnotationNode $r0;
        java.util.ArrayList $r5, $r8;
        org.objectweb.asm.tree.MethodNode r2;
        java.util.List $r3, $r4, $r6, $r7;
        java.lang.String r1;
        boolean z0;

        r2 := @this: org.objectweb.asm.tree.MethodNode;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r0 = new org.objectweb.asm.tree.AnnotationNode;

        specialinvoke $r0.<org.objectweb.asm.tree.AnnotationNode: void <init>(java.lang.String)>(r1);

        if z0 == 0 goto label2;

        $r6 = r2.<org.objectweb.asm.tree.MethodNode: java.util.List visibleAnnotations>;

        if $r6 != null goto label1;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>(int)>(1);

        r2.<org.objectweb.asm.tree.MethodNode: java.util.List visibleAnnotations> = $r8;

     label1:
        $r7 = r2.<org.objectweb.asm.tree.MethodNode: java.util.List visibleAnnotations>;

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r0);

        goto label4;

     label2:
        $r3 = r2.<org.objectweb.asm.tree.MethodNode: java.util.List invisibleAnnotations>;

        if $r3 != null goto label3;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>(int)>(1);

        r2.<org.objectweb.asm.tree.MethodNode: java.util.List invisibleAnnotations> = $r5;

     label3:
        $r4 = r2.<org.objectweb.asm.tree.MethodNode: java.util.List invisibleAnnotations>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r0);

     label4:
        return $r0;
    }

    public org.objectweb.asm.AnnotationVisitor visitParameterAnnotation(int, java.lang.String, boolean)
    {
        org.objectweb.asm.tree.AnnotationNode $r0;
        java.util.List[] $r3, $r4, $r6, $r9, $r12, $r13, $r14, $r15, $r17, $r20, $r23, $r24;
        java.util.ArrayList $r8, $r19;
        org.objectweb.asm.tree.MethodNode r2;
        int i0, i1, i2;
        org.objectweb.asm.Type[] $r11, $r22;
        java.lang.String r1, $r10, $r21;
        boolean z0;
        java.util.List $r5, $r7, $r16, $r18;

        r2 := @this: org.objectweb.asm.tree.MethodNode;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        $r0 = new org.objectweb.asm.tree.AnnotationNode;

        specialinvoke $r0.<org.objectweb.asm.tree.AnnotationNode: void <init>(java.lang.String)>(r1);

        if z0 == 0 goto label3;

        $r14 = r2.<org.objectweb.asm.tree.MethodNode: java.util.List[] visibleParameterAnnotations>;

        if $r14 != null goto label1;

        $r21 = r2.<org.objectweb.asm.tree.MethodNode: java.lang.String desc>;

        $r22 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type[] getArgumentTypes(java.lang.String)>($r21);

        i1 = lengthof $r22;

        $r23 = newarray (java.util.List)[i1];

        $r24 = (java.util.List[]) $r23;

        r2.<org.objectweb.asm.tree.MethodNode: java.util.List[] visibleParameterAnnotations> = $r24;

     label1:
        $r15 = r2.<org.objectweb.asm.tree.MethodNode: java.util.List[] visibleParameterAnnotations>;

        $r16 = $r15[i0];

        if $r16 != null goto label2;

        $r20 = r2.<org.objectweb.asm.tree.MethodNode: java.util.List[] visibleParameterAnnotations>;

        $r19 = new java.util.ArrayList;

        specialinvoke $r19.<java.util.ArrayList: void <init>(int)>(1);

        $r20[i0] = $r19;

     label2:
        $r17 = r2.<org.objectweb.asm.tree.MethodNode: java.util.List[] visibleParameterAnnotations>;

        $r18 = $r17[i0];

        interfaceinvoke $r18.<java.util.List: boolean add(java.lang.Object)>($r0);

        goto label6;

     label3:
        $r3 = r2.<org.objectweb.asm.tree.MethodNode: java.util.List[] invisibleParameterAnnotations>;

        if $r3 != null goto label4;

        $r10 = r2.<org.objectweb.asm.tree.MethodNode: java.lang.String desc>;

        $r11 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type[] getArgumentTypes(java.lang.String)>($r10);

        i2 = lengthof $r11;

        $r12 = newarray (java.util.List)[i2];

        $r13 = (java.util.List[]) $r12;

        r2.<org.objectweb.asm.tree.MethodNode: java.util.List[] invisibleParameterAnnotations> = $r13;

     label4:
        $r4 = r2.<org.objectweb.asm.tree.MethodNode: java.util.List[] invisibleParameterAnnotations>;

        $r5 = $r4[i0];

        if $r5 != null goto label5;

        $r9 = r2.<org.objectweb.asm.tree.MethodNode: java.util.List[] invisibleParameterAnnotations>;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>(int)>(1);

        $r9[i0] = $r8;

     label5:
        $r6 = r2.<org.objectweb.asm.tree.MethodNode: java.util.List[] invisibleParameterAnnotations>;

        $r7 = $r6[i0];

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r0);

     label6:
        return $r0;
    }

    public void visitAttribute(org.objectweb.asm.Attribute)
    {
        org.objectweb.asm.tree.MethodNode r0;
        java.util.List $r1, $r3;
        org.objectweb.asm.Attribute r2;
        java.util.ArrayList $r4;

        r0 := @this: org.objectweb.asm.tree.MethodNode;

        r2 := @parameter0: org.objectweb.asm.Attribute;

        $r1 = r0.<org.objectweb.asm.tree.MethodNode: java.util.List attrs>;

        if $r1 != null goto label1;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>(1);

        r0.<org.objectweb.asm.tree.MethodNode: java.util.List attrs> = $r4;

     label1:
        $r3 = r0.<org.objectweb.asm.tree.MethodNode: java.util.List attrs>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r2);

        return;
    }

    public void visitCode()
    {
        org.objectweb.asm.tree.MethodNode r0;

        r0 := @this: org.objectweb.asm.tree.MethodNode;

        return;
    }

    public void visitFrame(int, int, java.lang.Object[], int, java.lang.Object[])
    {
        java.lang.Object[] r1, r2, $r5, $r6;
        org.objectweb.asm.tree.InsnList $r3;
        org.objectweb.asm.tree.MethodNode r0;
        int i0, i1, i2;
        org.objectweb.asm.tree.FrameNode $r4;

        r0 := @this: org.objectweb.asm.tree.MethodNode;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.Object[];

        i2 := @parameter3: int;

        r2 := @parameter4: java.lang.Object[];

        $r3 = r0.<org.objectweb.asm.tree.MethodNode: org.objectweb.asm.tree.InsnList instructions>;

        $r4 = new org.objectweb.asm.tree.FrameNode;

        if r1 != null goto label1;

        $r5 = null;

        goto label2;

     label1:
        $r5 = specialinvoke r0.<org.objectweb.asm.tree.MethodNode: java.lang.Object[] getLabelNodes(java.lang.Object[])>(r1);

     label2:
        if r2 != null goto label3;

        $r6 = null;

        goto label4;

     label3:
        $r6 = specialinvoke r0.<org.objectweb.asm.tree.MethodNode: java.lang.Object[] getLabelNodes(java.lang.Object[])>(r2);

     label4:
        specialinvoke $r4.<org.objectweb.asm.tree.FrameNode: void <init>(int,int,java.lang.Object[],int,java.lang.Object[])>(i0, i1, $r5, i2, $r6);

        virtualinvoke $r3.<org.objectweb.asm.tree.InsnList: void add(org.objectweb.asm.tree.AbstractInsnNode)>($r4);

        return;
    }

    public void visitInsn(int)
    {
        org.objectweb.asm.tree.MethodNode r0;
        org.objectweb.asm.tree.InsnList $r2;
        int i0;
        org.objectweb.asm.tree.InsnNode $r1;

        r0 := @this: org.objectweb.asm.tree.MethodNode;

        i0 := @parameter0: int;

        $r2 = r0.<org.objectweb.asm.tree.MethodNode: org.objectweb.asm.tree.InsnList instructions>;

        $r1 = new org.objectweb.asm.tree.InsnNode;

        specialinvoke $r1.<org.objectweb.asm.tree.InsnNode: void <init>(int)>(i0);

        virtualinvoke $r2.<org.objectweb.asm.tree.InsnList: void add(org.objectweb.asm.tree.AbstractInsnNode)>($r1);

        return;
    }

    public void visitIntInsn(int, int)
    {
        org.objectweb.asm.tree.MethodNode r0;
        org.objectweb.asm.tree.InsnList $r2;
        org.objectweb.asm.tree.IntInsnNode $r1;
        int i0, i1;

        r0 := @this: org.objectweb.asm.tree.MethodNode;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = r0.<org.objectweb.asm.tree.MethodNode: org.objectweb.asm.tree.InsnList instructions>;

        $r1 = new org.objectweb.asm.tree.IntInsnNode;

        specialinvoke $r1.<org.objectweb.asm.tree.IntInsnNode: void <init>(int,int)>(i0, i1);

        virtualinvoke $r2.<org.objectweb.asm.tree.InsnList: void add(org.objectweb.asm.tree.AbstractInsnNode)>($r1);

        return;
    }

    public void visitVarInsn(int, int)
    {
        org.objectweb.asm.tree.MethodNode r0;
        org.objectweb.asm.tree.VarInsnNode $r1;
        org.objectweb.asm.tree.InsnList $r2;
        int i0, i1;

        r0 := @this: org.objectweb.asm.tree.MethodNode;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = r0.<org.objectweb.asm.tree.MethodNode: org.objectweb.asm.tree.InsnList instructions>;

        $r1 = new org.objectweb.asm.tree.VarInsnNode;

        specialinvoke $r1.<org.objectweb.asm.tree.VarInsnNode: void <init>(int,int)>(i0, i1);

        virtualinvoke $r2.<org.objectweb.asm.tree.InsnList: void add(org.objectweb.asm.tree.AbstractInsnNode)>($r1);

        return;
    }

    public void visitTypeInsn(int, java.lang.String)
    {
        org.objectweb.asm.tree.MethodNode r0;
        org.objectweb.asm.tree.TypeInsnNode $r1;
        org.objectweb.asm.tree.InsnList $r3;
        int i0;
        java.lang.String r2;

        r0 := @this: org.objectweb.asm.tree.MethodNode;

        i0 := @parameter0: int;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.objectweb.asm.tree.MethodNode: org.objectweb.asm.tree.InsnList instructions>;

        $r1 = new org.objectweb.asm.tree.TypeInsnNode;

        specialinvoke $r1.<org.objectweb.asm.tree.TypeInsnNode: void <init>(int,java.lang.String)>(i0, r2);

        virtualinvoke $r3.<org.objectweb.asm.tree.InsnList: void add(org.objectweb.asm.tree.AbstractInsnNode)>($r1);

        return;
    }

    public void visitFieldInsn(int, java.lang.String, java.lang.String, java.lang.String)
    {
        org.objectweb.asm.tree.MethodNode r0;
        org.objectweb.asm.tree.FieldInsnNode $r1;
        org.objectweb.asm.tree.InsnList $r5;
        int i0;
        java.lang.String r2, r3, r4;

        r0 := @this: org.objectweb.asm.tree.MethodNode;

        i0 := @parameter0: int;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        $r5 = r0.<org.objectweb.asm.tree.MethodNode: org.objectweb.asm.tree.InsnList instructions>;

        $r1 = new org.objectweb.asm.tree.FieldInsnNode;

        specialinvoke $r1.<org.objectweb.asm.tree.FieldInsnNode: void <init>(int,java.lang.String,java.lang.String,java.lang.String)>(i0, r2, r3, r4);

        virtualinvoke $r5.<org.objectweb.asm.tree.InsnList: void add(org.objectweb.asm.tree.AbstractInsnNode)>($r1);

        return;
    }

    public void visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String)
    {
        org.objectweb.asm.tree.MethodNode r0;
        org.objectweb.asm.tree.MethodInsnNode $r1;
        org.objectweb.asm.tree.InsnList $r5;
        int i0;
        java.lang.String r2, r3, r4;

        r0 := @this: org.objectweb.asm.tree.MethodNode;

        i0 := @parameter0: int;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        $r5 = r0.<org.objectweb.asm.tree.MethodNode: org.objectweb.asm.tree.InsnList instructions>;

        $r1 = new org.objectweb.asm.tree.MethodInsnNode;

        specialinvoke $r1.<org.objectweb.asm.tree.MethodInsnNode: void <init>(int,java.lang.String,java.lang.String,java.lang.String)>(i0, r2, r3, r4);

        virtualinvoke $r5.<org.objectweb.asm.tree.InsnList: void add(org.objectweb.asm.tree.AbstractInsnNode)>($r1);

        return;
    }

    public transient void visitInvokeDynamicInsn(java.lang.String, java.lang.String, org.objectweb.asm.Handle, java.lang.Object[])
    {
        org.objectweb.asm.tree.MethodNode r0;
        org.objectweb.asm.Handle r4;
        java.lang.Object[] r5;
        org.objectweb.asm.tree.InsnList $r6;
        org.objectweb.asm.tree.InvokeDynamicInsnNode $r1;
        java.lang.String r2, r3;

        r0 := @this: org.objectweb.asm.tree.MethodNode;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: org.objectweb.asm.Handle;

        r5 := @parameter3: java.lang.Object[];

        $r6 = r0.<org.objectweb.asm.tree.MethodNode: org.objectweb.asm.tree.InsnList instructions>;

        $r1 = new org.objectweb.asm.tree.InvokeDynamicInsnNode;

        specialinvoke $r1.<org.objectweb.asm.tree.InvokeDynamicInsnNode: void <init>(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])>(r2, r3, r4, r5);

        virtualinvoke $r6.<org.objectweb.asm.tree.InsnList: void add(org.objectweb.asm.tree.AbstractInsnNode)>($r1);

        return;
    }

    public void visitJumpInsn(int, org.objectweb.asm.Label)
    {
        org.objectweb.asm.tree.MethodNode r0;
        org.objectweb.asm.tree.InsnList $r3;
        int i0;
        org.objectweb.asm.tree.JumpInsnNode $r1;
        org.objectweb.asm.Label r2;
        org.objectweb.asm.tree.LabelNode $r4;

        r0 := @this: org.objectweb.asm.tree.MethodNode;

        i0 := @parameter0: int;

        r2 := @parameter1: org.objectweb.asm.Label;

        $r3 = r0.<org.objectweb.asm.tree.MethodNode: org.objectweb.asm.tree.InsnList instructions>;

        $r1 = new org.objectweb.asm.tree.JumpInsnNode;

        $r4 = virtualinvoke r0.<org.objectweb.asm.tree.MethodNode: org.objectweb.asm.tree.LabelNode getLabelNode(org.objectweb.asm.Label)>(r2);

        specialinvoke $r1.<org.objectweb.asm.tree.JumpInsnNode: void <init>(int,org.objectweb.asm.tree.LabelNode)>(i0, $r4);

        virtualinvoke $r3.<org.objectweb.asm.tree.InsnList: void add(org.objectweb.asm.tree.AbstractInsnNode)>($r1);

        return;
    }

    public void visitLabel(org.objectweb.asm.Label)
    {
        org.objectweb.asm.tree.MethodNode r0;
        org.objectweb.asm.tree.InsnList $r2;
        org.objectweb.asm.Label r1;
        org.objectweb.asm.tree.LabelNode $r3;

        r0 := @this: org.objectweb.asm.tree.MethodNode;

        r1 := @parameter0: org.objectweb.asm.Label;

        $r2 = r0.<org.objectweb.asm.tree.MethodNode: org.objectweb.asm.tree.InsnList instructions>;

        $r3 = virtualinvoke r0.<org.objectweb.asm.tree.MethodNode: org.objectweb.asm.tree.LabelNode getLabelNode(org.objectweb.asm.Label)>(r1);

        virtualinvoke $r2.<org.objectweb.asm.tree.InsnList: void add(org.objectweb.asm.tree.AbstractInsnNode)>($r3);

        return;
    }

    public void visitLdcInsn(java.lang.Object)
    {
        org.objectweb.asm.tree.LdcInsnNode $r1;
        org.objectweb.asm.tree.MethodNode r0;
        org.objectweb.asm.tree.InsnList $r3;
        java.lang.Object r2;

        r0 := @this: org.objectweb.asm.tree.MethodNode;

        r2 := @parameter0: java.lang.Object;

        $r3 = r0.<org.objectweb.asm.tree.MethodNode: org.objectweb.asm.tree.InsnList instructions>;

        $r1 = new org.objectweb.asm.tree.LdcInsnNode;

        specialinvoke $r1.<org.objectweb.asm.tree.LdcInsnNode: void <init>(java.lang.Object)>(r2);

        virtualinvoke $r3.<org.objectweb.asm.tree.InsnList: void add(org.objectweb.asm.tree.AbstractInsnNode)>($r1);

        return;
    }

    public void visitIincInsn(int, int)
    {
        org.objectweb.asm.tree.MethodNode r0;
        org.objectweb.asm.tree.InsnList $r2;
        org.objectweb.asm.tree.IincInsnNode $r1;
        int i0, i1;

        r0 := @this: org.objectweb.asm.tree.MethodNode;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = r0.<org.objectweb.asm.tree.MethodNode: org.objectweb.asm.tree.InsnList instructions>;

        $r1 = new org.objectweb.asm.tree.IincInsnNode;

        specialinvoke $r1.<org.objectweb.asm.tree.IincInsnNode: void <init>(int,int)>(i0, i1);

        virtualinvoke $r2.<org.objectweb.asm.tree.InsnList: void add(org.objectweb.asm.tree.AbstractInsnNode)>($r1);

        return;
    }

    public transient void visitTableSwitchInsn(int, int, org.objectweb.asm.Label, org.objectweb.asm.Label[])
    {
        org.objectweb.asm.tree.TableSwitchInsnNode $r1;
        org.objectweb.asm.tree.InsnList $r3;
        org.objectweb.asm.Label r2;
        org.objectweb.asm.tree.LabelNode $r4;
        org.objectweb.asm.tree.MethodNode r0;
        int i0, i1;
        org.objectweb.asm.Label[] r5;
        org.objectweb.asm.tree.LabelNode[] $r6;

        r0 := @this: org.objectweb.asm.tree.MethodNode;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r2 := @parameter2: org.objectweb.asm.Label;

        r5 := @parameter3: org.objectweb.asm.Label[];

        $r3 = r0.<org.objectweb.asm.tree.MethodNode: org.objectweb.asm.tree.InsnList instructions>;

        $r1 = new org.objectweb.asm.tree.TableSwitchInsnNode;

        $r4 = virtualinvoke r0.<org.objectweb.asm.tree.MethodNode: org.objectweb.asm.tree.LabelNode getLabelNode(org.objectweb.asm.Label)>(r2);

        $r6 = specialinvoke r0.<org.objectweb.asm.tree.MethodNode: org.objectweb.asm.tree.LabelNode[] getLabelNodes(org.objectweb.asm.Label[])>(r5);

        specialinvoke $r1.<org.objectweb.asm.tree.TableSwitchInsnNode: void <init>(int,int,org.objectweb.asm.tree.LabelNode,org.objectweb.asm.tree.LabelNode[])>(i0, i1, $r4, $r6);

        virtualinvoke $r3.<org.objectweb.asm.tree.InsnList: void add(org.objectweb.asm.tree.AbstractInsnNode)>($r1);

        return;
    }

    public void visitLookupSwitchInsn(org.objectweb.asm.Label, int[], org.objectweb.asm.Label[])
    {
        org.objectweb.asm.tree.InsnList $r3;
        org.objectweb.asm.Label r2;
        org.objectweb.asm.tree.LabelNode $r4;
        org.objectweb.asm.tree.MethodNode r0;
        int[] r5;
        org.objectweb.asm.Label[] r6;
        org.objectweb.asm.tree.LookupSwitchInsnNode $r1;
        org.objectweb.asm.tree.LabelNode[] $r7;

        r0 := @this: org.objectweb.asm.tree.MethodNode;

        r2 := @parameter0: org.objectweb.asm.Label;

        r5 := @parameter1: int[];

        r6 := @parameter2: org.objectweb.asm.Label[];

        $r3 = r0.<org.objectweb.asm.tree.MethodNode: org.objectweb.asm.tree.InsnList instructions>;

        $r1 = new org.objectweb.asm.tree.LookupSwitchInsnNode;

        $r4 = virtualinvoke r0.<org.objectweb.asm.tree.MethodNode: org.objectweb.asm.tree.LabelNode getLabelNode(org.objectweb.asm.Label)>(r2);

        $r7 = specialinvoke r0.<org.objectweb.asm.tree.MethodNode: org.objectweb.asm.tree.LabelNode[] getLabelNodes(org.objectweb.asm.Label[])>(r6);

        specialinvoke $r1.<org.objectweb.asm.tree.LookupSwitchInsnNode: void <init>(org.objectweb.asm.tree.LabelNode,int[],org.objectweb.asm.tree.LabelNode[])>($r4, r5, $r7);

        virtualinvoke $r3.<org.objectweb.asm.tree.InsnList: void add(org.objectweb.asm.tree.AbstractInsnNode)>($r1);

        return;
    }

    public void visitMultiANewArrayInsn(java.lang.String, int)
    {
        org.objectweb.asm.tree.MethodNode r0;
        org.objectweb.asm.tree.InsnList $r3;
        int i0;
        java.lang.String r2;
        org.objectweb.asm.tree.MultiANewArrayInsnNode $r1;

        r0 := @this: org.objectweb.asm.tree.MethodNode;

        r2 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r3 = r0.<org.objectweb.asm.tree.MethodNode: org.objectweb.asm.tree.InsnList instructions>;

        $r1 = new org.objectweb.asm.tree.MultiANewArrayInsnNode;

        specialinvoke $r1.<org.objectweb.asm.tree.MultiANewArrayInsnNode: void <init>(java.lang.String,int)>(r2, i0);

        virtualinvoke $r3.<org.objectweb.asm.tree.InsnList: void add(org.objectweb.asm.tree.AbstractInsnNode)>($r1);

        return;
    }

    public void visitTryCatchBlock(org.objectweb.asm.Label, org.objectweb.asm.Label, org.objectweb.asm.Label, java.lang.String)
    {
        org.objectweb.asm.Label r2, r5, r7;
        org.objectweb.asm.tree.LabelNode $r4, $r6, $r8;
        org.objectweb.asm.tree.MethodNode r0;
        java.util.List $r3;
        org.objectweb.asm.tree.TryCatchBlockNode $r1;
        java.lang.String r9;

        r0 := @this: org.objectweb.asm.tree.MethodNode;

        r2 := @parameter0: org.objectweb.asm.Label;

        r5 := @parameter1: org.objectweb.asm.Label;

        r7 := @parameter2: org.objectweb.asm.Label;

        r9 := @parameter3: java.lang.String;

        $r3 = r0.<org.objectweb.asm.tree.MethodNode: java.util.List tryCatchBlocks>;

        $r1 = new org.objectweb.asm.tree.TryCatchBlockNode;

        $r4 = virtualinvoke r0.<org.objectweb.asm.tree.MethodNode: org.objectweb.asm.tree.LabelNode getLabelNode(org.objectweb.asm.Label)>(r2);

        $r6 = virtualinvoke r0.<org.objectweb.asm.tree.MethodNode: org.objectweb.asm.tree.LabelNode getLabelNode(org.objectweb.asm.Label)>(r5);

        $r8 = virtualinvoke r0.<org.objectweb.asm.tree.MethodNode: org.objectweb.asm.tree.LabelNode getLabelNode(org.objectweb.asm.Label)>(r7);

        specialinvoke $r1.<org.objectweb.asm.tree.TryCatchBlockNode: void <init>(org.objectweb.asm.tree.LabelNode,org.objectweb.asm.tree.LabelNode,org.objectweb.asm.tree.LabelNode,java.lang.String)>($r4, $r6, $r8, r9);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r1);

        return;
    }

    public void visitLocalVariable(java.lang.String, java.lang.String, java.lang.String, org.objectweb.asm.Label, org.objectweb.asm.Label, int)
    {
        org.objectweb.asm.Label r5, r8;
        org.objectweb.asm.tree.LabelNode $r7, $r9;
        org.objectweb.asm.tree.MethodNode r0;
        java.util.List $r6;
        org.objectweb.asm.tree.LocalVariableNode $r1;
        int i0;
        java.lang.String r2, r3, r4;

        r0 := @this: org.objectweb.asm.tree.MethodNode;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        r5 := @parameter3: org.objectweb.asm.Label;

        r8 := @parameter4: org.objectweb.asm.Label;

        i0 := @parameter5: int;

        $r6 = r0.<org.objectweb.asm.tree.MethodNode: java.util.List localVariables>;

        $r1 = new org.objectweb.asm.tree.LocalVariableNode;

        $r7 = virtualinvoke r0.<org.objectweb.asm.tree.MethodNode: org.objectweb.asm.tree.LabelNode getLabelNode(org.objectweb.asm.Label)>(r5);

        $r9 = virtualinvoke r0.<org.objectweb.asm.tree.MethodNode: org.objectweb.asm.tree.LabelNode getLabelNode(org.objectweb.asm.Label)>(r8);

        specialinvoke $r1.<org.objectweb.asm.tree.LocalVariableNode: void <init>(java.lang.String,java.lang.String,java.lang.String,org.objectweb.asm.tree.LabelNode,org.objectweb.asm.tree.LabelNode,int)>(r2, r3, r4, $r7, $r9, i0);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r1);

        return;
    }

    public void visitLineNumber(int, org.objectweb.asm.Label)
    {
        org.objectweb.asm.tree.MethodNode r0;
        org.objectweb.asm.tree.LineNumberNode $r1;
        org.objectweb.asm.tree.InsnList $r3;
        int i0;
        org.objectweb.asm.Label r2;
        org.objectweb.asm.tree.LabelNode $r4;

        r0 := @this: org.objectweb.asm.tree.MethodNode;

        i0 := @parameter0: int;

        r2 := @parameter1: org.objectweb.asm.Label;

        $r3 = r0.<org.objectweb.asm.tree.MethodNode: org.objectweb.asm.tree.InsnList instructions>;

        $r1 = new org.objectweb.asm.tree.LineNumberNode;

        $r4 = virtualinvoke r0.<org.objectweb.asm.tree.MethodNode: org.objectweb.asm.tree.LabelNode getLabelNode(org.objectweb.asm.Label)>(r2);

        specialinvoke $r1.<org.objectweb.asm.tree.LineNumberNode: void <init>(int,org.objectweb.asm.tree.LabelNode)>(i0, $r4);

        virtualinvoke $r3.<org.objectweb.asm.tree.InsnList: void add(org.objectweb.asm.tree.AbstractInsnNode)>($r1);

        return;
    }

    public void visitMaxs(int, int)
    {
        int i0, i1;
        org.objectweb.asm.tree.MethodNode r0;

        r0 := @this: org.objectweb.asm.tree.MethodNode;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0.<org.objectweb.asm.tree.MethodNode: int maxStack> = i0;

        r0.<org.objectweb.asm.tree.MethodNode: int maxLocals> = i1;

        return;
    }

    public void visitEnd()
    {
        org.objectweb.asm.tree.MethodNode r0;

        r0 := @this: org.objectweb.asm.tree.MethodNode;

        return;
    }

    protected org.objectweb.asm.tree.LabelNode getLabelNode(org.objectweb.asm.Label)
    {
        org.objectweb.asm.tree.MethodNode r5;
        org.objectweb.asm.Label r0;
        org.objectweb.asm.tree.LabelNode $r3, $r4;
        java.lang.Object $r1, $r2;
        boolean $z0;

        r5 := @this: org.objectweb.asm.tree.MethodNode;

        r0 := @parameter0: org.objectweb.asm.Label;

        $r1 = r0.<org.objectweb.asm.Label: java.lang.Object info>;

        $z0 = $r1 instanceof org.objectweb.asm.tree.LabelNode;

        if $z0 != 0 goto label1;

        $r4 = new org.objectweb.asm.tree.LabelNode;

        specialinvoke $r4.<org.objectweb.asm.tree.LabelNode: void <init>()>();

        r0.<org.objectweb.asm.Label: java.lang.Object info> = $r4;

     label1:
        $r2 = r0.<org.objectweb.asm.Label: java.lang.Object info>;

        $r3 = (org.objectweb.asm.tree.LabelNode) $r2;

        return $r3;
    }

    private org.objectweb.asm.tree.LabelNode[] getLabelNodes(org.objectweb.asm.Label[])
    {
        org.objectweb.asm.Label $r3;
        org.objectweb.asm.tree.LabelNode $r4;
        org.objectweb.asm.tree.MethodNode r2;
        int $i0, $i1, i2;
        org.objectweb.asm.Label[] r0;
        org.objectweb.asm.tree.LabelNode[] r1;

        r2 := @this: org.objectweb.asm.tree.MethodNode;

        r0 := @parameter0: org.objectweb.asm.Label[];

        $i0 = lengthof r0;

        r1 = newarray (org.objectweb.asm.tree.LabelNode)[$i0];

        i2 = 0;

     label1:
        $i1 = lengthof r0;

        if i2 >= $i1 goto label2;

        $r3 = r0[i2];

        $r4 = virtualinvoke r2.<org.objectweb.asm.tree.MethodNode: org.objectweb.asm.tree.LabelNode getLabelNode(org.objectweb.asm.Label)>($r3);

        r1[i2] = $r4;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r1;
    }

    private java.lang.Object[] getLabelNodes(java.lang.Object[])
    {
        java.lang.Object[] r0, r1;
        org.objectweb.asm.Label $r3;
        org.objectweb.asm.tree.MethodNode r2;
        int $i0, $i1, i2;
        java.lang.Object r4;
        boolean $z0;

        r2 := @this: org.objectweb.asm.tree.MethodNode;

        r0 := @parameter0: java.lang.Object[];

        $i0 = lengthof r0;

        r1 = newarray (java.lang.Object)[$i0];

        i2 = 0;

     label1:
        $i1 = lengthof r0;

        if i2 >= $i1 goto label3;

        r4 = r0[i2];

        $z0 = r4 instanceof org.objectweb.asm.Label;

        if $z0 == 0 goto label2;

        $r3 = (org.objectweb.asm.Label) r4;

        r4 = virtualinvoke r2.<org.objectweb.asm.tree.MethodNode: org.objectweb.asm.tree.LabelNode getLabelNode(org.objectweb.asm.Label)>($r3);

     label2:
        r1[i2] = r4;

        i2 = i2 + 1;

        goto label1;

     label3:
        return r1;
    }

    public void check(int)
    {
        int i0;
        org.objectweb.asm.tree.MethodNode r0;

        r0 := @this: org.objectweb.asm.tree.MethodNode;

        i0 := @parameter0: int;

        return;
    }

    public void accept(org.objectweb.asm.ClassVisitor)
    {
        org.objectweb.asm.MethodVisitor $r8;
        java.lang.String[] r2;
        org.objectweb.asm.tree.MethodNode r0;
        java.util.List $r1, $r3;
        int $i0, $i1;
        java.lang.String $r5, $r6, $r7;
        org.objectweb.asm.ClassVisitor r4;

        r0 := @this: org.objectweb.asm.tree.MethodNode;

        r4 := @parameter0: org.objectweb.asm.ClassVisitor;

        $r1 = r0.<org.objectweb.asm.tree.MethodNode: java.util.List exceptions>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        r2 = newarray (java.lang.String)[$i0];

        $r3 = r0.<org.objectweb.asm.tree.MethodNode: java.util.List exceptions>;

        interfaceinvoke $r3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r2);

        $i1 = r0.<org.objectweb.asm.tree.MethodNode: int access>;

        $r7 = r0.<org.objectweb.asm.tree.MethodNode: java.lang.String name>;

        $r6 = r0.<org.objectweb.asm.tree.MethodNode: java.lang.String desc>;

        $r5 = r0.<org.objectweb.asm.tree.MethodNode: java.lang.String signature>;

        $r8 = virtualinvoke r4.<org.objectweb.asm.ClassVisitor: org.objectweb.asm.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>($i1, $r7, $r6, $r5, r2);

        if $r8 == null goto label1;

        virtualinvoke r0.<org.objectweb.asm.tree.MethodNode: void accept(org.objectweb.asm.MethodVisitor)>($r8);

     label1:
        return;
    }

    public void accept(org.objectweb.asm.MethodVisitor)
    {
        org.objectweb.asm.tree.AnnotationNode r47, r48, r50, r52;
        org.objectweb.asm.AnnotationVisitor $r31, $r35, $r39, $r43, $r44;
        org.objectweb.asm.tree.LocalVariableNode $r20;
        org.objectweb.asm.Attribute $r26;
        java.lang.String $r30, $r34, $r38, $r42;
        org.objectweb.asm.tree.InsnList $r11, $r15, $r27;
        org.objectweb.asm.MethodVisitor r12;
        java.util.List[] $r5, $r6, $r7, $r8, $r28, $r32;
        boolean $z0;
        java.util.List $r2, $r3, $r4, $r9, $r10, $r13, $r14, $r16, $r17, $r18, $r21, $r24, $r36, $r40, $r46, r49, r51;
        org.objectweb.asm.tree.TryCatchBlockNode $r23;
        org.objectweb.asm.tree.MethodNode r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7, $i8, i9, i10, $i11, i12, i13, i14, $i15, i16, i17, i18, $i19, i20, i21, $i22, i23, i24, $i25, i26, i27;
        java.lang.Object $r1, $r19, $r22, $r25, $r29, $r33, $r37, $r41, $r45;

        r0 := @this: org.objectweb.asm.tree.MethodNode;

        r12 := @parameter0: org.objectweb.asm.MethodVisitor;

        $r1 = r0.<org.objectweb.asm.tree.MethodNode: java.lang.Object annotationDefault>;

        if $r1 == null goto label01;

        $r44 = virtualinvoke r12.<org.objectweb.asm.MethodVisitor: org.objectweb.asm.AnnotationVisitor visitAnnotationDefault()>();

        $r45 = r0.<org.objectweb.asm.tree.MethodNode: java.lang.Object annotationDefault>;

        staticinvoke <org.objectweb.asm.tree.AnnotationNode: void accept(org.objectweb.asm.AnnotationVisitor,java.lang.String,java.lang.Object)>($r44, null, $r45);

        if $r44 == null goto label01;

        virtualinvoke $r44.<org.objectweb.asm.AnnotationVisitor: void visitEnd()>();

     label01:
        $r46 = r0.<org.objectweb.asm.tree.MethodNode: java.util.List visibleAnnotations>;

        if $r46 != null goto label02;

        $i5 = 0;

        goto label03;

     label02:
        $r2 = r0.<org.objectweb.asm.tree.MethodNode: java.util.List visibleAnnotations>;

        $i5 = interfaceinvoke $r2.<java.util.List: int size()>();

     label03:
        i6 = $i5;

        i7 = 0;

     label04:
        if i7 >= i6 goto label05;

        $r40 = r0.<org.objectweb.asm.tree.MethodNode: java.util.List visibleAnnotations>;

        $r41 = interfaceinvoke $r40.<java.util.List: java.lang.Object get(int)>(i7);

        r47 = (org.objectweb.asm.tree.AnnotationNode) $r41;

        $r42 = r47.<org.objectweb.asm.tree.AnnotationNode: java.lang.String desc>;

        $r43 = virtualinvoke r12.<org.objectweb.asm.MethodVisitor: org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)>($r42, 1);

        virtualinvoke r47.<org.objectweb.asm.tree.AnnotationNode: void accept(org.objectweb.asm.AnnotationVisitor)>($r43);

        i7 = i7 + 1;

        goto label04;

     label05:
        $r3 = r0.<org.objectweb.asm.tree.MethodNode: java.util.List invisibleAnnotations>;

        if $r3 != null goto label06;

        $i8 = 0;

        goto label07;

     label06:
        $r4 = r0.<org.objectweb.asm.tree.MethodNode: java.util.List invisibleAnnotations>;

        $i8 = interfaceinvoke $r4.<java.util.List: int size()>();

     label07:
        i9 = $i8;

        i10 = 0;

     label08:
        if i10 >= i9 goto label09;

        $r36 = r0.<org.objectweb.asm.tree.MethodNode: java.util.List invisibleAnnotations>;

        $r37 = interfaceinvoke $r36.<java.util.List: java.lang.Object get(int)>(i10);

        r48 = (org.objectweb.asm.tree.AnnotationNode) $r37;

        $r38 = r48.<org.objectweb.asm.tree.AnnotationNode: java.lang.String desc>;

        $r39 = virtualinvoke r12.<org.objectweb.asm.MethodVisitor: org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)>($r38, 0);

        virtualinvoke r48.<org.objectweb.asm.tree.AnnotationNode: void accept(org.objectweb.asm.AnnotationVisitor)>($r39);

        i10 = i10 + 1;

        goto label08;

     label09:
        $r5 = r0.<org.objectweb.asm.tree.MethodNode: java.util.List[] visibleParameterAnnotations>;

        if $r5 != null goto label10;

        $i11 = 0;

        goto label11;

     label10:
        $r6 = r0.<org.objectweb.asm.tree.MethodNode: java.util.List[] visibleParameterAnnotations>;

        $i11 = lengthof $r6;

     label11:
        i12 = $i11;

        i13 = 0;

     label12:
        if i13 >= i12 goto label16;

        $r32 = r0.<org.objectweb.asm.tree.MethodNode: java.util.List[] visibleParameterAnnotations>;

        r49 = $r32[i13];

        if r49 != null goto label13;

        goto label15;

     label13:
        i14 = 0;

     label14:
        $i4 = interfaceinvoke r49.<java.util.List: int size()>();

        if i14 >= $i4 goto label15;

        $r33 = interfaceinvoke r49.<java.util.List: java.lang.Object get(int)>(i14);

        r50 = (org.objectweb.asm.tree.AnnotationNode) $r33;

        $r34 = r50.<org.objectweb.asm.tree.AnnotationNode: java.lang.String desc>;

        $r35 = virtualinvoke r12.<org.objectweb.asm.MethodVisitor: org.objectweb.asm.AnnotationVisitor visitParameterAnnotation(int,java.lang.String,boolean)>(i13, $r34, 1);

        virtualinvoke r50.<org.objectweb.asm.tree.AnnotationNode: void accept(org.objectweb.asm.AnnotationVisitor)>($r35);

        i14 = i14 + 1;

        goto label14;

     label15:
        i13 = i13 + 1;

        goto label12;

     label16:
        $r7 = r0.<org.objectweb.asm.tree.MethodNode: java.util.List[] invisibleParameterAnnotations>;

        if $r7 != null goto label17;

        $i15 = 0;

        goto label18;

     label17:
        $r8 = r0.<org.objectweb.asm.tree.MethodNode: java.util.List[] invisibleParameterAnnotations>;

        $i15 = lengthof $r8;

     label18:
        i16 = $i15;

        i17 = 0;

     label19:
        if i17 >= i16 goto label23;

        $r28 = r0.<org.objectweb.asm.tree.MethodNode: java.util.List[] invisibleParameterAnnotations>;

        r51 = $r28[i17];

        if r51 != null goto label20;

        goto label22;

     label20:
        i18 = 0;

     label21:
        $i3 = interfaceinvoke r51.<java.util.List: int size()>();

        if i18 >= $i3 goto label22;

        $r29 = interfaceinvoke r51.<java.util.List: java.lang.Object get(int)>(i18);

        r52 = (org.objectweb.asm.tree.AnnotationNode) $r29;

        $r30 = r52.<org.objectweb.asm.tree.AnnotationNode: java.lang.String desc>;

        $r31 = virtualinvoke r12.<org.objectweb.asm.MethodVisitor: org.objectweb.asm.AnnotationVisitor visitParameterAnnotation(int,java.lang.String,boolean)>(i17, $r30, 0);

        virtualinvoke r52.<org.objectweb.asm.tree.AnnotationNode: void accept(org.objectweb.asm.AnnotationVisitor)>($r31);

        i18 = i18 + 1;

        goto label21;

     label22:
        i17 = i17 + 1;

        goto label19;

     label23:
        $z0 = r0.<org.objectweb.asm.tree.MethodNode: boolean visited>;

        if $z0 == 0 goto label24;

        $r27 = r0.<org.objectweb.asm.tree.MethodNode: org.objectweb.asm.tree.InsnList instructions>;

        virtualinvoke $r27.<org.objectweb.asm.tree.InsnList: void resetLabels()>();

     label24:
        $r9 = r0.<org.objectweb.asm.tree.MethodNode: java.util.List attrs>;

        if $r9 != null goto label25;

        $i19 = 0;

        goto label26;

     label25:
        $r10 = r0.<org.objectweb.asm.tree.MethodNode: java.util.List attrs>;

        $i19 = interfaceinvoke $r10.<java.util.List: int size()>();

     label26:
        i20 = $i19;

        i21 = 0;

     label27:
        if i21 >= i20 goto label28;

        $r24 = r0.<org.objectweb.asm.tree.MethodNode: java.util.List attrs>;

        $r25 = interfaceinvoke $r24.<java.util.List: java.lang.Object get(int)>(i21);

        $r26 = (org.objectweb.asm.Attribute) $r25;

        virtualinvoke r12.<org.objectweb.asm.MethodVisitor: void visitAttribute(org.objectweb.asm.Attribute)>($r26);

        i21 = i21 + 1;

        goto label27;

     label28:
        $r11 = r0.<org.objectweb.asm.tree.MethodNode: org.objectweb.asm.tree.InsnList instructions>;

        $i0 = virtualinvoke $r11.<org.objectweb.asm.tree.InsnList: int size()>();

        if $i0 <= 0 goto label37;

        virtualinvoke r12.<org.objectweb.asm.MethodVisitor: void visitCode()>();

        $r13 = r0.<org.objectweb.asm.tree.MethodNode: java.util.List tryCatchBlocks>;

        if $r13 != null goto label29;

        $i22 = 0;

        goto label30;

     label29:
        $r14 = r0.<org.objectweb.asm.tree.MethodNode: java.util.List tryCatchBlocks>;

        $i22 = interfaceinvoke $r14.<java.util.List: int size()>();

     label30:
        i23 = $i22;

        i24 = 0;

     label31:
        if i24 >= i23 goto label32;

        $r21 = r0.<org.objectweb.asm.tree.MethodNode: java.util.List tryCatchBlocks>;

        $r22 = interfaceinvoke $r21.<java.util.List: java.lang.Object get(int)>(i24);

        $r23 = (org.objectweb.asm.tree.TryCatchBlockNode) $r22;

        virtualinvoke $r23.<org.objectweb.asm.tree.TryCatchBlockNode: void accept(org.objectweb.asm.MethodVisitor)>(r12);

        i24 = i24 + 1;

        goto label31;

     label32:
        $r15 = r0.<org.objectweb.asm.tree.MethodNode: org.objectweb.asm.tree.InsnList instructions>;

        virtualinvoke $r15.<org.objectweb.asm.tree.InsnList: void accept(org.objectweb.asm.MethodVisitor)>(r12);

        $r16 = r0.<org.objectweb.asm.tree.MethodNode: java.util.List localVariables>;

        if $r16 != null goto label33;

        $i25 = 0;

        goto label34;

     label33:
        $r17 = r0.<org.objectweb.asm.tree.MethodNode: java.util.List localVariables>;

        $i25 = interfaceinvoke $r17.<java.util.List: int size()>();

     label34:
        i26 = $i25;

        i27 = 0;

     label35:
        if i27 >= i26 goto label36;

        $r18 = r0.<org.objectweb.asm.tree.MethodNode: java.util.List localVariables>;

        $r19 = interfaceinvoke $r18.<java.util.List: java.lang.Object get(int)>(i27);

        $r20 = (org.objectweb.asm.tree.LocalVariableNode) $r19;

        virtualinvoke $r20.<org.objectweb.asm.tree.LocalVariableNode: void accept(org.objectweb.asm.MethodVisitor)>(r12);

        i27 = i27 + 1;

        goto label35;

     label36:
        $i2 = r0.<org.objectweb.asm.tree.MethodNode: int maxStack>;

        $i1 = r0.<org.objectweb.asm.tree.MethodNode: int maxLocals>;

        virtualinvoke r12.<org.objectweb.asm.MethodVisitor: void visitMaxs(int,int)>($i2, $i1);

        r0.<org.objectweb.asm.tree.MethodNode: boolean visited> = 1;

     label37:
        virtualinvoke r12.<org.objectweb.asm.MethodVisitor: void visitEnd()>();

        return;
    }
}
