class org.joda.time.convert.StringConverter extends org.joda.time.convert.AbstractConverter implements org.joda.time.convert.InstantConverter, org.joda.time.convert.PartialConverter, org.joda.time.convert.DurationConverter, org.joda.time.convert.PeriodConverter, org.joda.time.convert.IntervalConverter
{
    static final org.joda.time.convert.StringConverter INSTANCE;
    static java.lang.Class class$java$lang$String;

    protected void <init>()
    {
        org.joda.time.convert.StringConverter r0;

        r0 := @this: org.joda.time.convert.StringConverter;

        specialinvoke r0.<org.joda.time.convert.AbstractConverter: void <init>()>();

        return;
    }

    public long getInstantMillis(java.lang.Object, org.joda.time.Chronology)
    {
        org.joda.time.format.DateTimeFormatter $r2, $r4;
        org.joda.time.Chronology r3;
        java.lang.Object r0;
        long $l0;
        org.joda.time.convert.StringConverter r5;
        java.lang.String r1;

        r5 := @this: org.joda.time.convert.StringConverter;

        r0 := @parameter0: java.lang.Object;

        r3 := @parameter1: org.joda.time.Chronology;

        r1 = (java.lang.String) r0;

        $r2 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateTimeParser()>();

        $r4 = virtualinvoke $r2.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withChronology(org.joda.time.Chronology)>(r3);

        $l0 = virtualinvoke $r4.<org.joda.time.format.DateTimeFormatter: long parseMillis(java.lang.String)>(r1);

        return $l0;
    }

    public int[] getPartialValues(org.joda.time.ReadablePartial, java.lang.Object, org.joda.time.Chronology, org.joda.time.format.DateTimeFormatter)
    {
        org.joda.time.DateTimeZone $r1, $r7;
        org.joda.time.format.DateTimeFormatter r0, $r2;
        org.joda.time.Chronology r9;
        long $l0;
        org.joda.time.convert.StringConverter r8;
        int[] $r6;
        org.joda.time.ReadablePartial r5;
        java.lang.Object r3;
        java.lang.String $r4;

        r8 := @this: org.joda.time.convert.StringConverter;

        r5 := @parameter0: org.joda.time.ReadablePartial;

        r3 := @parameter1: java.lang.Object;

        r9 := @parameter2: org.joda.time.Chronology;

        r0 := @parameter3: org.joda.time.format.DateTimeFormatter;

        $r1 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone getZone()>();

        if $r1 == null goto label1;

        $r7 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone getZone()>();

        r9 = virtualinvoke r9.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>($r7);

     label1:
        $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withChronology(org.joda.time.Chronology)>(r9);

        $r4 = (java.lang.String) r3;

        $l0 = virtualinvoke $r2.<org.joda.time.format.DateTimeFormatter: long parseMillis(java.lang.String)>($r4);

        $r6 = virtualinvoke r9.<org.joda.time.Chronology: int[] get(org.joda.time.ReadablePartial,long)>(r5, $l0);

        return $r6;
    }

    public long getDurationMillis(java.lang.Object)
    {
        byte $b6;
        long $l7, $l8, $l9, $l10, $l11, l26, l27;
        java.lang.StringBuffer $r6, $r7, $r12, $r13, $r14, $r18, $r19, $r20, $r23, $r25, $r27;
        java.lang.String r1, $r2, $r3, $r4, $r8, $r15, $r21, r22;
        org.joda.time.convert.StringConverter r9;
        int $i0, $i3, $i5, $i12, $i13, $i14, $i19, i23, i24, $i25, $i28, $i29, $i30, $i31, $i32, $i33, $i35, $i36, $i37, $i38, $i39, $i41, $i42;
        char $c1, $c2, $c4, $c15, $c16, $c17, $c18, $c20, $c21, $c22;
        java.lang.IllegalArgumentException $r24, $r26;
        java.lang.Object r0;

        r9 := @this: org.joda.time.convert.StringConverter;

        r0 := @parameter0: java.lang.Object;

        r1 = (java.lang.String) r0;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 < 4 goto label03;

        $c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(0);

        $i28 = (int) $c1;

        if $i28 == 80 goto label01;

        $c22 = virtualinvoke r1.<java.lang.String: char charAt(int)>(0);

        $i29 = (int) $c22;

        if $i29 != 112 goto label03;

     label01:
        $c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(1);

        $i30 = (int) $c2;

        if $i30 == 84 goto label02;

        $c21 = virtualinvoke r1.<java.lang.String: char charAt(int)>(1);

        $i31 = (int) $c21;

        if $i31 != 116 goto label03;

     label02:
        $i3 = $i0 - 1;

        $c4 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i3);

        $i32 = (int) $c4;

        if $i32 == 83 goto label04;

        $i19 = $i0 - 1;

        $c20 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i19);

        $i33 = (int) $c20;

        if $i33 != 115 goto label03;

        goto label04;

     label03:
        $r24 = new java.lang.IllegalArgumentException;

        $r23 = new java.lang.StringBuffer;

        specialinvoke $r23.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid format: \"");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(34);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r24.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r24;

     label04:
        $i5 = $i0 - 1;

        $r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(2, $i5);

        $i35 = (int) -1;

        i23 = $i35;

        i24 = 0;

     label05:
        $i25 = virtualinvoke $r2.<java.lang.String: int length()>();

        if i24 >= $i25 goto label10;

        $c15 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(i24);

        $i36 = (int) $c15;

        if $i36 < 48 goto label06;

        $c18 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(i24);

        $i37 = (int) $c18;

        if $i37 <= 57 goto label09;

     label06:
        if i24 != 0 goto label07;

        $c17 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(0);

        $i38 = (int) $c17;

        if $i38 != 45 goto label07;

        goto label09;

     label07:
        if i24 <= 0 goto label08;

        $c16 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(i24);

        $i39 = (int) $c16;

        if $i39 != 46 goto label08;

        $i41 = (int) -1;

        if i23 != $i41 goto label08;

        i23 = i24;

        goto label09;

     label08:
        $r26 = new java.lang.IllegalArgumentException;

        $r25 = new java.lang.StringBuffer;

        specialinvoke $r25.<java.lang.StringBuffer: void <init>()>();

        $r18 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid format: \"");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(34);

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r26.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r21);

        throw $r26;

     label09:
        i24 = i24 + 1;

        goto label05;

     label10:
        l26 = 0L;

        if i23 <= 0 goto label12;

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(0, i23);

        l27 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r3);

        $i12 = i23 + 1;

        $r4 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int)>($i12);

        r22 = $r4;

        $i13 = virtualinvoke $r4.<java.lang.String: int length()>();

        if $i13 == 3 goto label11;

        $r27 = new java.lang.StringBuffer;

        specialinvoke $r27.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("000");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        r22 = virtualinvoke $r8.<java.lang.String: java.lang.String substring(int,int)>(0, 3);

     label11:
        $i14 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r22);

        l26 = (long) $i14;

        goto label13;

     label12:
        l27 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r2);

     label13:
        $b6 = l27 cmp 0L;

        $i42 = (int) $b6;

        if $i42 >= 0 goto label14;

        $l9 = staticinvoke <org.joda.time.field.FieldUtils: long safeMultiply(long,int)>(l27, 1000);

        $l10 = neg l26;

        $l11 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>($l9, $l10);

        return $l11;

     label14:
        $l7 = staticinvoke <org.joda.time.field.FieldUtils: long safeMultiply(long,int)>(l27, 1000);

        $l8 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>($l7, l26);

        return $l8;
    }

    public void setInto(org.joda.time.ReadWritablePeriod, java.lang.Object, org.joda.time.Chronology)
    {
        org.joda.time.convert.StringConverter r12;
        org.joda.time.format.PeriodFormatter $r2, $r11;
        org.joda.time.PeriodType $r10;
        java.lang.StringBuffer $r5, $r6, $r7, $r8;
        int $i0, $i1;
        java.lang.String r1, $r9;
        org.joda.time.ReadWritablePeriod r3;
        org.joda.time.Chronology r13;
        java.lang.IllegalArgumentException $r4;
        java.lang.Object r0;

        r12 := @this: org.joda.time.convert.StringConverter;

        r3 := @parameter0: org.joda.time.ReadWritablePeriod;

        r0 := @parameter1: java.lang.Object;

        r13 := @parameter2: org.joda.time.Chronology;

        r1 = (java.lang.String) r0;

        $r2 = staticinvoke <org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>();

        interfaceinvoke r3.<org.joda.time.ReadWritablePeriod: void clear()>();

        $i0 = virtualinvoke $r2.<org.joda.time.format.PeriodFormatter: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int)>(r3, r1, 0);

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 >= $i1 goto label2;

        if $i0 >= 0 goto label1;

        $r10 = interfaceinvoke r3.<org.joda.time.ReadWritablePeriod: org.joda.time.PeriodType getPeriodType()>();

        $r11 = virtualinvoke $r2.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodFormatter withParseType(org.joda.time.PeriodType)>($r10);

        virtualinvoke $r11.<org.joda.time.format.PeriodFormatter: org.joda.time.MutablePeriod parseMutablePeriod(java.lang.String)>(r1);

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid format: \"");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(34);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r4;

     label2:
        return;
    }

    public void setInto(org.joda.time.ReadWritableInterval, java.lang.Object, org.joda.time.Chronology)
    {
        org.joda.time.ReadWritableInterval r13;
        org.joda.time.convert.StringConverter r7;
        long $l6, l7, l8;
        org.joda.time.format.PeriodFormatter $r6, $r9, $r11;
        org.joda.time.PeriodType $r8, $r10;
        java.lang.StringBuffer $r16, $r17, $r23, $r24, $r28, $r29, $r33, $r34, $r43, $r45, $r47, $r49;
        int $i0, $i1, $i2, $i3, $i9, $i10, $i11, $i12, $i14;
        java.lang.String r1, $r2, $r3, $r18, $r25, $r30, $r35;
        org.joda.time.Period $r12, r37;
        org.joda.time.format.DateTimeFormatter $r4, $r5;
        org.joda.time.DateTime $r19, $r20;
        org.joda.time.Chronology r36, r38, $r39, r40, $r41, $r42;
        char $c4, $c5;
        java.lang.IllegalArgumentException $r44, $r46, $r48, $r50;
        java.lang.Object r0;

        r7 := @this: org.joda.time.convert.StringConverter;

        r13 := @parameter0: org.joda.time.ReadWritableInterval;

        r0 := @parameter1: java.lang.Object;

        r36 := @parameter2: org.joda.time.Chronology;

        r1 = (java.lang.String) r0;

        $i0 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(47);

        if $i0 >= 0 goto label01;

        $r44 = new java.lang.IllegalArgumentException;

        $r43 = new java.lang.StringBuffer;

        specialinvoke $r43.<java.lang.StringBuffer: void <init>()>();

        $r33 = virtualinvoke $r43.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Format requires a \'/\' separator: ");

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r44.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r35);

        throw $r44;

     label01:
        $r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i1 > 0 goto label02;

        $r46 = new java.lang.IllegalArgumentException;

        $r45 = new java.lang.StringBuffer;

        specialinvoke $r45.<java.lang.StringBuffer: void <init>()>();

        $r28 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Format invalid: ");

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r46.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r30);

        throw $r46;

     label02:
        $i2 = $i0 + 1;

        $r3 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i2);

        $i3 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i3 > 0 goto label03;

        $r48 = new java.lang.IllegalArgumentException;

        $r47 = new java.lang.StringBuffer;

        specialinvoke $r47.<java.lang.StringBuffer: void <init>()>();

        $r23 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Format invalid: ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r48.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r25);

        throw $r48;

     label03:
        $r4 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateTimeParser()>();

        $r5 = virtualinvoke $r4.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withChronology(org.joda.time.Chronology)>(r36);

        $r6 = staticinvoke <org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>();

        l7 = 0L;

        r37 = null;

        r38 = null;

        $c4 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(0);

        $i9 = (int) $c4;

        if $i9 == 80 goto label04;

        $i10 = (int) $c4;

        if $i10 != 112 goto label05;

     label04:
        $r8 = virtualinvoke r7.<org.joda.time.convert.StringConverter: org.joda.time.PeriodType getPeriodType(java.lang.Object)>($r2);

        $r9 = virtualinvoke $r6.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodFormatter withParseType(org.joda.time.PeriodType)>($r8);

        r37 = virtualinvoke $r9.<org.joda.time.format.PeriodFormatter: org.joda.time.Period parsePeriod(java.lang.String)>($r2);

        goto label06;

     label05:
        $r20 = virtualinvoke $r5.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>($r2);

        l7 = virtualinvoke $r20.<org.joda.time.DateTime: long getMillis()>();

        r38 = virtualinvoke $r20.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>();

     label06:
        $c5 = virtualinvoke $r3.<java.lang.String: char charAt(int)>(0);

        $i11 = (int) $c5;

        if $i11 == 80 goto label07;

        $i12 = (int) $c5;

        if $i12 != 112 goto label11;

     label07:
        if r37 == null goto label08;

        $r50 = new java.lang.IllegalArgumentException;

        $r49 = new java.lang.StringBuffer;

        specialinvoke $r49.<java.lang.StringBuffer: void <init>()>();

        $r16 = virtualinvoke $r49.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Interval composed of two durations: ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r50.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r18);

        throw $r50;

     label08:
        $r10 = virtualinvoke r7.<org.joda.time.convert.StringConverter: org.joda.time.PeriodType getPeriodType(java.lang.Object)>($r3);

        $r11 = virtualinvoke $r6.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodFormatter withParseType(org.joda.time.PeriodType)>($r10);

        $r12 = virtualinvoke $r11.<org.joda.time.format.PeriodFormatter: org.joda.time.Period parsePeriod(java.lang.String)>($r3);

        if r36 == null goto label09;

        $r39 = r36;

        goto label10;

     label09:
        $r39 = r38;

     label10:
        r40 = $r39;

        l8 = virtualinvoke $r39.<org.joda.time.Chronology: long add(org.joda.time.ReadablePeriod,long,int)>($r12, l7, 1);

        goto label16;

     label11:
        $r19 = virtualinvoke $r5.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>($r3);

        $l6 = virtualinvoke $r19.<org.joda.time.DateTime: long getMillis()>();

        l8 = $l6;

        if r38 == null goto label12;

        $r41 = r38;

        goto label13;

     label12:
        $r41 = virtualinvoke $r19.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>();

     label13:
        if r36 == null goto label14;

        $r42 = r36;

        goto label15;

     label14:
        $r42 = $r41;

     label15:
        r40 = $r42;

        if r37 == null goto label16;

        $i14 = (int) -1;

        l7 = virtualinvoke $r42.<org.joda.time.Chronology: long add(org.joda.time.ReadablePeriod,long,int)>(r37, $l6, $i14);

     label16:
        interfaceinvoke r13.<org.joda.time.ReadWritableInterval: void setInterval(long,long)>(l7, l8);

        interfaceinvoke r13.<org.joda.time.ReadWritableInterval: void setChronology(org.joda.time.Chronology)>(r40);

        return;
    }

    public java.lang.Class getSupportedType()
    {
        java.lang.Class $r0, $r2;
        org.joda.time.convert.StringConverter r1;

        r1 := @this: org.joda.time.convert.StringConverter;

        $r0 = <org.joda.time.convert.StringConverter: java.lang.Class class$java$lang$String>;

        if $r0 != null goto label1;

        $r2 = staticinvoke <org.joda.time.convert.StringConverter: java.lang.Class class$(java.lang.String)>("java.lang.String");

        <org.joda.time.convert.StringConverter: java.lang.Class class$java$lang$String> = $r2;

        goto label2;

     label1:
        $r2 = <org.joda.time.convert.StringConverter: java.lang.Class class$java$lang$String>;

     label2:
        return $r2;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        org.joda.time.convert.StringConverter $r0;

        $r0 = new org.joda.time.convert.StringConverter;

        specialinvoke $r0.<org.joda.time.convert.StringConverter: void <init>()>();

        <org.joda.time.convert.StringConverter: org.joda.time.convert.StringConverter INSTANCE> = $r0;

        return;
    }
}
