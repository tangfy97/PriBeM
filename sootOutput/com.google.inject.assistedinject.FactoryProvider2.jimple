final class com.google.inject.assistedinject.FactoryProvider2 extends java.lang.Object implements java.lang.reflect.InvocationHandler, com.google.inject.spi.ProviderWithExtensionVisitor, com.google.inject.spi.HasDependencies, com.google.inject.assistedinject.AssistedInjectBinding
{
    static final com.google.inject.assistedinject.Assisted DEFAULT_ANNOTATION;
    private final com.google.inject.internal.util.$ImmutableMap assistDataByMethod;
    private com.google.inject.Injector injector;
    private final java.lang.Object factory;
    private final com.google.inject.Key factoryKey;

    void <init>(com.google.inject.Key, com.google.inject.assistedinject.BindingCollector)
    {
        java.lang.Integer $r40;
        java.util.Map $r25;
        com.google.inject.assistedinject.FactoryProvider2 r0;
        java.lang.reflect.Member $r28;
        java.util.Set $r29, $r31;
        java.lang.ClassLoader $r8;
        com.google.inject.TypeLiteral $r2, $r14, $r17, $r37, $r51, r54, r56;
        java.lang.Object[] $r39, $r41;
        com.google.inject.internal.util.$ImmutableList$Builder $r32;
        java.lang.reflect.Constructor r57;
        java.util.ArrayList $r21;
        com.google.inject.assistedinject.BindingCollector r24;
        java.lang.'annotation'.Annotation[][] $r20;
        java.lang.Class[] $r9;
        com.google.inject.assistedinject.FactoryProvider2$ThreadLocalProvider $r33;
        com.google.inject.Key r1, $r16, $r36, $r55;
        java.lang.reflect.Method[] $r6;
        java.lang.reflect.Method r13;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, z7;
        com.google.inject.internal.util.$ImmutableList $r23;
        com.google.inject.ConfigurationException $r45, $r50;
        java.util.List $r19, $r47, r58;
        java.lang.'annotation'.Annotation[] $r15, $r35;
        com.google.inject.internal.util.$ImmutableMap $r7;
        com.google.inject.assistedinject.FactoryProvider2$AssistData $r30;
        com.google.inject.internal.ErrorsException $r12, $r43, $r44, $r48, $r53;
        int i0, $i1, $i2, i3, i4, i5;
        com.google.inject.internal.util.$ImmutableMap$Builder $r5;
        java.util.Iterator $r22;
        com.google.inject.internal.Errors $r3, $r42, $r46, $r49, $r52;
        com.google.inject.spi.InjectionPoint $r27;
        java.lang.Class $r4, $r18, $r38;
        java.lang.Object $r10, $r11, $r26, $r34;

        r0 := @this: com.google.inject.assistedinject.FactoryProvider2;

        r1 := @parameter0: com.google.inject.Key;

        r24 := @parameter1: com.google.inject.assistedinject.BindingCollector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.google.inject.assistedinject.FactoryProvider2: com.google.inject.Key factoryKey> = r1;

        $r2 = virtualinvoke r1.<com.google.inject.Key: com.google.inject.TypeLiteral getTypeLiteral()>();

        $r3 = new com.google.inject.internal.Errors;

        specialinvoke $r3.<com.google.inject.internal.Errors: void <init>()>();

        $r4 = virtualinvoke $r2.<com.google.inject.TypeLiteral: java.lang.Class getRawType()>();

     label01:
        $z0 = virtualinvoke $r4.<java.lang.Class: boolean isInterface()>();

        if $z0 != 0 goto label02;

        $r41 = newarray (java.lang.Object)[1];

        $r41[0] = $r4;

        $r42 = virtualinvoke $r3.<com.google.inject.internal.Errors: com.google.inject.internal.Errors addMessage(java.lang.String,java.lang.Object[])>("%s must be an interface.", $r41);

        $r43 = virtualinvoke $r42.<com.google.inject.internal.Errors: com.google.inject.internal.ErrorsException toException()>();

        throw $r43;

     label02:
        $r5 = staticinvoke <com.google.inject.internal.util.$ImmutableMap: com.google.inject.internal.util.$ImmutableMap$Builder builder()>();

        $r6 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        i0 = lengthof $r6;

        i3 = 0;

     label03:
        if i3 >= i0 goto label21;

        r13 = $r6[i3];

        $r14 = virtualinvoke $r2.<com.google.inject.TypeLiteral: com.google.inject.TypeLiteral getReturnType(java.lang.reflect.Method)>(r13);

     label04:
        $r15 = virtualinvoke r13.<java.lang.reflect.Method: java.lang.'annotation'.Annotation[] getAnnotations()>();

        $r16 = staticinvoke <com.google.inject.internal.Annotations: com.google.inject.Key getKey(com.google.inject.TypeLiteral,java.lang.reflect.Member,java.lang.'annotation'.Annotation[],com.google.inject.internal.Errors)>($r14, r13, $r15, $r3);

     label05:
        goto label08;

     label06:
        $r50 := @caughtexception;

        $z6 = specialinvoke r0.<com.google.inject.assistedinject.FactoryProvider2: boolean isTypeNotSpecified(com.google.inject.TypeLiteral,com.google.inject.ConfigurationException)>($r14, $r50);

        if $z6 == 0 goto label07;

        $r51 = staticinvoke <com.google.inject.TypeLiteral: com.google.inject.TypeLiteral get(java.lang.Class)>($r4);

        $r52 = virtualinvoke $r3.<com.google.inject.internal.Errors: com.google.inject.internal.Errors keyNotFullySpecified(com.google.inject.TypeLiteral)>($r51);

        $r53 = virtualinvoke $r52.<com.google.inject.internal.Errors: com.google.inject.internal.ErrorsException toException()>();

        throw $r53;

     label07:
        throw $r50;

     label08:
        $r17 = virtualinvoke $r16.<com.google.inject.Key: com.google.inject.TypeLiteral getTypeLiteral()>();

        $r18 = virtualinvoke $r17.<com.google.inject.TypeLiteral: java.lang.Class getRawType()>();

        specialinvoke r0.<com.google.inject.assistedinject.FactoryProvider2: void validateFactoryReturnType(com.google.inject.internal.Errors,java.lang.Class,java.lang.Class)>($r3, $r18, $r4);

        $r19 = virtualinvoke $r2.<com.google.inject.TypeLiteral: java.util.List getParameterTypes(java.lang.reflect.Member)>(r13);

        $r20 = virtualinvoke r13.<java.lang.reflect.Method: java.lang.'annotation'.Annotation[][] getParameterAnnotations()>();

        i4 = 0;

        $r21 = staticinvoke <com.google.inject.internal.util.$Lists: java.util.ArrayList newArrayList()>();

        $r22 = interfaceinvoke $r19.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z2 = interfaceinvoke $r22.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label12;

        $r34 = interfaceinvoke $r22.<java.util.Iterator: java.lang.Object next()>();

        r54 = (com.google.inject.TypeLiteral) $r34;

        $i2 = i4;

        i4 = i4 + 1;

        $r35 = $r20[$i2];

        $r36 = staticinvoke <com.google.inject.internal.Annotations: com.google.inject.Key getKey(com.google.inject.TypeLiteral,java.lang.reflect.Member,java.lang.'annotation'.Annotation[],com.google.inject.internal.Errors)>(r54, r13, $r35, $r3);

        $r37 = virtualinvoke $r36.<com.google.inject.Key: com.google.inject.TypeLiteral getTypeLiteral()>();

        $r38 = virtualinvoke $r37.<com.google.inject.TypeLiteral: java.lang.Class getRawType()>();

        $z4 = virtualinvoke $r38.<java.lang.Object: boolean equals(java.lang.Object)>(class "Lcom/google/inject/Provider;");

        if $z4 != 0 goto label10;

        $z5 = virtualinvoke $r38.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljavax/inject/Provider;");

        if $z5 == 0 goto label11;

     label10:
        $r39 = newarray (java.lang.Object)[3];

        $r40 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i4);

        $r39[0] = $r40;

        $r39[1] = $r36;

        $r39[2] = r13;

        virtualinvoke $r3.<com.google.inject.internal.Errors: com.google.inject.internal.Errors addMessage(java.lang.String,java.lang.Object[])>("A Provider may not be a type in a factory method of an AssistedInject.\n  Offending instance is parameter [%s] with key [%s] on method [%s]", $r39);

     label11:
        $r55 = specialinvoke r0.<com.google.inject.assistedinject.FactoryProvider2: com.google.inject.Key assistKey(java.lang.reflect.Method,com.google.inject.Key,com.google.inject.internal.Errors)>(r13, $r36, $r3);

        interfaceinvoke $r21.<java.util.List: boolean add(java.lang.Object)>($r55);

        goto label09;

     label12:
        $r23 = staticinvoke <com.google.inject.internal.util.$ImmutableList: com.google.inject.internal.util.$ImmutableList copyOf(java.lang.Iterable)>($r21);

        $r25 = virtualinvoke r24.<com.google.inject.assistedinject.BindingCollector: java.util.Map getBindings()>();

        $r26 = interfaceinvoke $r25.<java.util.Map: java.lang.Object get(java.lang.Object)>($r16);

        r56 = (com.google.inject.TypeLiteral) $r26;

        if r56 != null goto label13;

        r56 = virtualinvoke $r16.<com.google.inject.Key: com.google.inject.TypeLiteral getTypeLiteral()>();

     label13:
        $r27 = specialinvoke r0.<com.google.inject.assistedinject.FactoryProvider2: com.google.inject.spi.InjectionPoint findMatchingConstructorInjectionPoint(java.lang.reflect.Method,com.google.inject.Key,com.google.inject.TypeLiteral,java.util.List)>(r13, $r16, r56, $r23);

     label14:
        goto label16;

     label15:
        $r48 := @caughtexception;

        $r49 = virtualinvoke $r48.<com.google.inject.internal.ErrorsException: com.google.inject.internal.Errors getErrors()>();

        virtualinvoke $r3.<com.google.inject.internal.Errors: com.google.inject.internal.Errors merge(com.google.inject.internal.Errors)>($r49);

        goto label20;

     label16:
        $r28 = virtualinvoke $r27.<com.google.inject.spi.InjectionPoint: java.lang.reflect.Member getMember()>();

        r57 = (java.lang.reflect.Constructor) $r28;

        r58 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        $r29 = specialinvoke r0.<com.google.inject.assistedinject.FactoryProvider2: java.util.Set getDependencies(com.google.inject.spi.InjectionPoint,com.google.inject.TypeLiteral)>($r27, r56);

        z7 = 0;

        $z3 = specialinvoke r0.<com.google.inject.assistedinject.FactoryProvider2: boolean isValidForOptimizedAssistedInject(java.util.Set)>($r29);

        if $z3 == 0 goto label19;

        $r32 = staticinvoke <com.google.inject.internal.util.$ImmutableList: com.google.inject.internal.util.$ImmutableList$Builder builder()>();

        i5 = 0;

     label17:
        $i1 = interfaceinvoke $r19.<java.util.List: int size()>();

        if i5 >= $i1 goto label18;

        $r33 = new com.google.inject.assistedinject.FactoryProvider2$ThreadLocalProvider;

        specialinvoke $r33.<com.google.inject.assistedinject.FactoryProvider2$ThreadLocalProvider: void <init>(com.google.inject.assistedinject.FactoryProvider2$1)>(null);

        virtualinvoke $r32.<com.google.inject.internal.util.$ImmutableList$Builder: com.google.inject.internal.util.$ImmutableList$Builder add(java.lang.Object)>($r33);

        i5 = i5 + 1;

        goto label17;

     label18:
        r58 = virtualinvoke $r32.<com.google.inject.internal.util.$ImmutableList$Builder: com.google.inject.internal.util.$ImmutableList build()>();

        z7 = 1;

     label19:
        $r30 = new com.google.inject.assistedinject.FactoryProvider2$AssistData;

        $r31 = specialinvoke r0.<com.google.inject.assistedinject.FactoryProvider2: java.util.Set removeAssistedDeps(java.util.Set)>($r29);

        specialinvoke $r30.<com.google.inject.assistedinject.FactoryProvider2$AssistData: void <init>(java.lang.reflect.Constructor,com.google.inject.Key,com.google.inject.internal.util.$ImmutableList,com.google.inject.TypeLiteral,java.lang.reflect.Method,java.util.Set,boolean,java.util.List)>(r57, $r16, $r23, r56, r13, $r31, z7, r58);

        virtualinvoke $r5.<com.google.inject.internal.util.$ImmutableMap$Builder: com.google.inject.internal.util.$ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(r13, $r30);

     label20:
        i3 = i3 + 1;

        goto label03;

     label21:
        $z1 = virtualinvoke $r3.<com.google.inject.internal.Errors: boolean hasErrors()>();

        if $z1 == 0 goto label22;

        $r12 = virtualinvoke $r3.<com.google.inject.internal.Errors: com.google.inject.internal.ErrorsException toException()>();

        throw $r12;

     label22:
        $r7 = virtualinvoke $r5.<com.google.inject.internal.util.$ImmutableMap$Builder: com.google.inject.internal.util.$ImmutableMap build()>();

        r0.<com.google.inject.assistedinject.FactoryProvider2: com.google.inject.internal.util.$ImmutableMap assistDataByMethod> = $r7;

     label23:
        goto label25;

     label24:
        $r44 := @caughtexception;

        $r45 = new com.google.inject.ConfigurationException;

        $r46 = virtualinvoke $r44.<com.google.inject.internal.ErrorsException: com.google.inject.internal.Errors getErrors()>();

        $r47 = virtualinvoke $r46.<com.google.inject.internal.Errors: java.util.List getMessages()>();

        specialinvoke $r45.<com.google.inject.ConfigurationException: void <init>(java.lang.Iterable)>($r47);

        throw $r45;

     label25:
        $r8 = staticinvoke <com.google.inject.internal.BytecodeGen: java.lang.ClassLoader getClassLoader(java.lang.Class)>($r4);

        $r9 = newarray (java.lang.Class)[1];

        $r9[0] = $r4;

        $r10 = staticinvoke <java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>($r8, $r9, r0);

        $r11 = virtualinvoke $r4.<java.lang.Class: java.lang.Object cast(java.lang.Object)>($r10);

        r0.<com.google.inject.assistedinject.FactoryProvider2: java.lang.Object factory> = $r11;

        return;

        catch com.google.inject.ConfigurationException from label04 to label05 with label06;
        catch com.google.inject.internal.ErrorsException from label13 to label14 with label15;
        catch com.google.inject.internal.ErrorsException from label01 to label23 with label24;
    }

    public java.lang.Object get()
    {
        com.google.inject.assistedinject.FactoryProvider2 r0;
        java.lang.Object $r1;

        r0 := @this: com.google.inject.assistedinject.FactoryProvider2;

        $r1 = r0.<com.google.inject.assistedinject.FactoryProvider2: java.lang.Object factory>;

        return $r1;
    }

    public java.util.Set getDependencies()
    {
        java.util.Iterator $r4;
        java.util.Set $r8;
        com.google.inject.internal.util.$ImmutableMap $r2;
        java.util.HashSet $r0;
        com.google.inject.internal.util.$ImmutableCollection $r3;
        com.google.inject.assistedinject.FactoryProvider2$AssistData r7;
        com.google.inject.internal.util.$ImmutableSet $r5;
        com.google.inject.assistedinject.FactoryProvider2 r1;
        java.lang.Object $r6;
        boolean $z0;

        r1 := @this: com.google.inject.assistedinject.FactoryProvider2;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        $r2 = r1.<com.google.inject.assistedinject.FactoryProvider2: com.google.inject.internal.util.$ImmutableMap assistDataByMethod>;

        $r3 = virtualinvoke $r2.<com.google.inject.internal.util.$ImmutableMap: com.google.inject.internal.util.$ImmutableCollection values()>();

        $r4 = virtualinvoke $r3.<com.google.inject.internal.util.$ImmutableCollection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r7 = (com.google.inject.assistedinject.FactoryProvider2$AssistData) $r6;

        $r8 = r7.<com.google.inject.assistedinject.FactoryProvider2$AssistData: java.util.Set dependencies>;

        interfaceinvoke $r0.<java.util.Set: boolean addAll(java.util.Collection)>($r8);

        goto label1;

     label2:
        $r5 = staticinvoke <com.google.inject.internal.util.$ImmutableSet: com.google.inject.internal.util.$ImmutableSet copyOf(java.lang.Iterable)>($r0);

        return $r5;
    }

    public com.google.inject.Key getKey()
    {
        com.google.inject.Key $r1;
        com.google.inject.assistedinject.FactoryProvider2 r0;

        r0 := @this: com.google.inject.assistedinject.FactoryProvider2;

        $r1 = r0.<com.google.inject.assistedinject.FactoryProvider2: com.google.inject.Key factoryKey>;

        return $r1;
    }

    public java.util.Collection getAssistedMethods()
    {
        com.google.inject.internal.util.$ImmutableCollection $r2;
        com.google.inject.assistedinject.FactoryProvider2 r0;
        com.google.inject.internal.util.$ImmutableMap $r1;

        r0 := @this: com.google.inject.assistedinject.FactoryProvider2;

        $r1 = r0.<com.google.inject.assistedinject.FactoryProvider2: com.google.inject.internal.util.$ImmutableMap assistDataByMethod>;

        $r2 = virtualinvoke $r1.<com.google.inject.internal.util.$ImmutableMap: com.google.inject.internal.util.$ImmutableCollection values()>();

        return $r2;
    }

    public java.lang.Object acceptExtensionVisitor(com.google.inject.spi.BindingTargetVisitor, com.google.inject.spi.ProviderInstanceBinding)
    {
        com.google.inject.spi.ProviderInstanceBinding r1;
        com.google.inject.spi.BindingTargetVisitor r0;
        java.lang.Object $r2, $r5;
        com.google.inject.assistedinject.FactoryProvider2 r3;
        boolean $z0;
        com.google.inject.assistedinject.AssistedInjectTargetVisitor $r4;

        r3 := @this: com.google.inject.assistedinject.FactoryProvider2;

        r0 := @parameter0: com.google.inject.spi.BindingTargetVisitor;

        r1 := @parameter1: com.google.inject.spi.ProviderInstanceBinding;

        $z0 = r0 instanceof com.google.inject.assistedinject.AssistedInjectTargetVisitor;

        if $z0 == 0 goto label1;

        $r4 = (com.google.inject.assistedinject.AssistedInjectTargetVisitor) r0;

        $r5 = interfaceinvoke $r4.<com.google.inject.assistedinject.AssistedInjectTargetVisitor: java.lang.Object visit(com.google.inject.assistedinject.AssistedInjectBinding)>(r3);

        return $r5;

     label1:
        $r2 = interfaceinvoke r0.<com.google.inject.spi.BindingTargetVisitor: java.lang.Object visit(com.google.inject.spi.ProviderInstanceBinding)>(r1);

        return $r2;
    }

    private void validateFactoryReturnType(com.google.inject.internal.Errors, java.lang.Class, java.lang.Class)
    {
        java.lang.Object[] $r3;
        com.google.inject.internal.Errors r2;
        int $i0, $i1;
        java.lang.Class r0, r1;
        com.google.inject.assistedinject.FactoryProvider2 r4;
        boolean $z0, $z1;

        r4 := @this: com.google.inject.assistedinject.FactoryProvider2;

        r2 := @parameter0: com.google.inject.internal.Errors;

        r1 := @parameter1: java.lang.Class;

        r0 := @parameter2: java.lang.Class;

        $i0 = virtualinvoke r0.<java.lang.Class: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i0);

        if $z0 == 0 goto label1;

        $i1 = virtualinvoke r1.<java.lang.Class: int getModifiers()>();

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i1);

        if $z1 != 0 goto label1;

        $r3 = newarray (java.lang.Object)[2];

        $r3[0] = r0;

        $r3[1] = r1;

        virtualinvoke r2.<com.google.inject.internal.Errors: com.google.inject.internal.Errors addMessage(java.lang.String,java.lang.Object[])>("%s is public, but has a method that returns a non-public type: %s. Due to limitations with java.lang.reflect.Proxy, this is not allowed. Please either make the factory non-public or the return type public.", $r3);

     label1:
        return;
    }

    private boolean isTypeNotSpecified(com.google.inject.TypeLiteral, com.google.inject.ConfigurationException)
    {
        java.util.Collection $r1;
        com.google.inject.ConfigurationException r0;
        com.google.inject.internal.Errors $r2, $r4;
        java.util.List $r5;
        com.google.inject.spi.Message r7, $r10;
        int $i0;
        java.lang.Object $r6, $r9;
        com.google.inject.assistedinject.FactoryProvider2 r12;
        java.lang.String $r8, $r11;
        com.google.inject.TypeLiteral r3;
        boolean $z0;

        r12 := @this: com.google.inject.assistedinject.FactoryProvider2;

        r3 := @parameter0: com.google.inject.TypeLiteral;

        r0 := @parameter1: com.google.inject.ConfigurationException;

        $r1 = virtualinvoke r0.<com.google.inject.ConfigurationException: java.util.Collection getErrorMessages()>();

        $i0 = interfaceinvoke $r1.<java.util.Collection: int size()>();

        if $i0 != 1 goto label1;

        $r2 = new com.google.inject.internal.Errors;

        specialinvoke $r2.<com.google.inject.internal.Errors: void <init>()>();

        $r4 = virtualinvoke $r2.<com.google.inject.internal.Errors: com.google.inject.internal.Errors keyNotFullySpecified(com.google.inject.TypeLiteral)>(r3);

        $r5 = virtualinvoke $r4.<com.google.inject.internal.Errors: java.util.List getMessages()>();

        $r6 = staticinvoke <com.google.inject.internal.util.$Iterables: java.lang.Object getOnlyElement(java.lang.Iterable)>($r5);

        r7 = (com.google.inject.spi.Message) $r6;

        $r8 = virtualinvoke r7.<com.google.inject.spi.Message: java.lang.String getMessage()>();

        $r9 = staticinvoke <com.google.inject.internal.util.$Iterables: java.lang.Object getOnlyElement(java.lang.Iterable)>($r1);

        $r10 = (com.google.inject.spi.Message) $r9;

        $r11 = virtualinvoke $r10.<com.google.inject.spi.Message: java.lang.String getMessage()>();

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        return $z0;

     label1:
        return 0;
    }

    private com.google.inject.spi.InjectionPoint findMatchingConstructorInjectionPoint(java.lang.reflect.Method, com.google.inject.Key, com.google.inject.TypeLiteral, java.util.List) throws com.google.inject.internal.ErrorsException
    {
        com.google.inject.Key r2;
        com.google.inject.assistedinject.FactoryProvider2 r13;
        java.lang.reflect.Method r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, z6;
        java.util.Collection $r23;
        com.google.inject.ConfigurationException $r22;
        java.util.List r14;
        com.google.inject.TypeLiteral $r3, r4;
        java.lang.Object[] $r8, $r15, $r18, $r20;
        java.lang.reflect.Constructor r12, r26;
        java.lang.reflect.Constructor[] $r7;
        com.google.inject.internal.ErrorsException $r9, $r16, $r17, $r19, $r21, $r24;
        int $i0, $i1, i2, i3;
        com.google.inject.internal.Errors $r0, $r5, r25;
        com.google.inject.spi.InjectionPoint $r10, $r11;
        java.lang.Class $r6;

        r13 := @this: com.google.inject.assistedinject.FactoryProvider2;

        r1 := @parameter0: java.lang.reflect.Method;

        r2 := @parameter1: com.google.inject.Key;

        r4 := @parameter2: com.google.inject.TypeLiteral;

        r14 := @parameter3: java.util.List;

        $r0 = new com.google.inject.internal.Errors;

        specialinvoke $r0.<com.google.inject.internal.Errors: void <init>(java.lang.Object)>(r1);

        $r3 = virtualinvoke r2.<com.google.inject.Key: com.google.inject.TypeLiteral getTypeLiteral()>();

        $z0 = virtualinvoke $r3.<com.google.inject.TypeLiteral: boolean equals(java.lang.Object)>(r4);

        if $z0 == 0 goto label01;

        r25 = virtualinvoke $r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors withSource(java.lang.Object)>(r4);

        goto label02;

     label01:
        $r5 = virtualinvoke $r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors withSource(java.lang.Object)>(r2);

        r25 = virtualinvoke $r5.<com.google.inject.internal.Errors: com.google.inject.internal.Errors withSource(java.lang.Object)>(r4);

     label02:
        $r6 = virtualinvoke r4.<com.google.inject.TypeLiteral: java.lang.Class getRawType()>();

        $i0 = virtualinvoke $r6.<java.lang.Class: int getModifiers()>();

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isInterface(int)>($i0);

        if $z1 == 0 goto label03;

        $r20 = newarray (java.lang.Object)[1];

        $r20[0] = r4;

        virtualinvoke r25.<com.google.inject.internal.Errors: com.google.inject.internal.Errors addMessage(java.lang.String,java.lang.Object[])>("%s is an interface, not a concrete class.  Unable to create AssistedInject factory.", $r20);

        $r21 = virtualinvoke r25.<com.google.inject.internal.Errors: com.google.inject.internal.ErrorsException toException()>();

        throw $r21;

     label03:
        $i1 = virtualinvoke $r6.<java.lang.Class: int getModifiers()>();

        $z2 = staticinvoke <java.lang.reflect.Modifier: boolean isAbstract(int)>($i1);

        if $z2 == 0 goto label04;

        $r18 = newarray (java.lang.Object)[1];

        $r18[0] = r4;

        virtualinvoke r25.<com.google.inject.internal.Errors: com.google.inject.internal.Errors addMessage(java.lang.String,java.lang.Object[])>("%s is abstract, not a concrete class.  Unable to create AssistedInject factory.", $r18);

        $r19 = virtualinvoke r25.<com.google.inject.internal.Errors: com.google.inject.internal.ErrorsException toException()>();

        throw $r19;

     label04:
        $z3 = staticinvoke <com.google.inject.internal.util.$Classes: boolean isInnerClass(java.lang.Class)>($r6);

        if $z3 == 0 goto label05;

        virtualinvoke r25.<com.google.inject.internal.Errors: com.google.inject.internal.Errors cannotInjectInnerClass(java.lang.Class)>($r6);

        $r17 = virtualinvoke r25.<com.google.inject.internal.Errors: com.google.inject.internal.ErrorsException toException()>();

        throw $r17;

     label05:
        r26 = null;

        z6 = 0;

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()>();

        i2 = lengthof $r7;

        i3 = 0;

     label06:
        if i3 >= i2 goto label09;

        r12 = $r7[i3];

        $z4 = virtualinvoke r12.<java.lang.reflect.Constructor: boolean isAnnotationPresent(java.lang.Class)>(class "Lcom/google/inject/assistedinject/AssistedInject;");

        if $z4 == 0 goto label08;

        z6 = 1;

        $z5 = specialinvoke r13.<com.google.inject.assistedinject.FactoryProvider2: boolean constructorHasMatchingParams(com.google.inject.TypeLiteral,java.lang.reflect.Constructor,java.util.List,com.google.inject.internal.Errors)>(r4, r12, r14, r25);

        if $z5 == 0 goto label08;

        if r26 == null goto label07;

        $r15 = newarray (java.lang.Object)[2];

        $r15[0] = r4;

        $r15[1] = r1;

        virtualinvoke r25.<com.google.inject.internal.Errors: com.google.inject.internal.Errors addMessage(java.lang.String,java.lang.Object[])>("%s has more than one constructor annotated with @AssistedInject that matches the parameters in method %s.  Unable to create AssistedInject factory.", $r15);

        $r16 = virtualinvoke r25.<com.google.inject.internal.Errors: com.google.inject.internal.ErrorsException toException()>();

        throw $r16;

     label07:
        r26 = r12;

     label08:
        i3 = i3 + 1;

        goto label06;

     label09:
        if z6 != 0 goto label13;

     label10:
        $r11 = staticinvoke <com.google.inject.spi.InjectionPoint: com.google.inject.spi.InjectionPoint forConstructorOf(com.google.inject.TypeLiteral)>(r4);

     label11:
        return $r11;

     label12:
        $r22 := @caughtexception;

        $r23 = virtualinvoke $r22.<com.google.inject.ConfigurationException: java.util.Collection getErrorMessages()>();

        virtualinvoke r25.<com.google.inject.internal.Errors: com.google.inject.internal.Errors merge(java.util.Collection)>($r23);

        $r24 = virtualinvoke r25.<com.google.inject.internal.Errors: com.google.inject.internal.ErrorsException toException()>();

        throw $r24;

     label13:
        if r26 == null goto label14;

        $r10 = staticinvoke <com.google.inject.spi.InjectionPoint: com.google.inject.spi.InjectionPoint forConstructor(java.lang.reflect.Constructor,com.google.inject.TypeLiteral)>(r26, r4);

        return $r10;

     label14:
        $r8 = newarray (java.lang.Object)[2];

        $r8[0] = r4;

        $r8[1] = r1;

        virtualinvoke r25.<com.google.inject.internal.Errors: com.google.inject.internal.Errors addMessage(java.lang.String,java.lang.Object[])>("%s has @AssistedInject constructors, but none of them match the parameters in method %s.  Unable to create AssistedInject factory.", $r8);

        $r9 = virtualinvoke r25.<com.google.inject.internal.Errors: com.google.inject.internal.ErrorsException toException()>();

        throw $r9;

        catch com.google.inject.ConfigurationException from label10 to label11 with label12;
    }

    private boolean constructorHasMatchingParams(com.google.inject.TypeLiteral, java.lang.reflect.Constructor, java.util.List, com.google.inject.internal.Errors) throws com.google.inject.internal.ErrorsException
    {
        com.google.inject.Key $r15, r18, r19;
        java.lang.'annotation'.Annotation[] $r14;
        java.lang.reflect.Constructor r1;
        java.util.ArrayList $r4;
        int $i0, i1;
        com.google.inject.assistedinject.FactoryProvider2 r16;
        boolean $z0, $z1, $z2, $z3;
        java.lang.'annotation'.Annotation[][] $r3;
        java.util.Iterator $r5, $r7, $r8;
        com.google.inject.internal.Errors r13;
        java.util.List $r2, r6;
        java.lang.Object $r9, $r11, $r12;
        java.lang.Class $r10;
        com.google.inject.TypeLiteral r0, r17;

        r16 := @this: com.google.inject.assistedinject.FactoryProvider2;

        r0 := @parameter0: com.google.inject.TypeLiteral;

        r1 := @parameter1: java.lang.reflect.Constructor;

        r6 := @parameter2: java.util.List;

        r13 := @parameter3: com.google.inject.internal.Errors;

        $r2 = virtualinvoke r0.<com.google.inject.TypeLiteral: java.util.List getParameterTypes(java.lang.reflect.Member)>(r1);

        $r3 = virtualinvoke r1.<java.lang.reflect.Constructor: java.lang.'annotation'.Annotation[][] getParameterAnnotations()>();

        i1 = 0;

        $r4 = staticinvoke <com.google.inject.internal.util.$Lists: java.util.ArrayList newArrayList()>();

        $r5 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r12 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r17 = (com.google.inject.TypeLiteral) $r12;

        $i0 = i1;

        i1 = i1 + 1;

        $r14 = $r3[$i0];

        $r15 = staticinvoke <com.google.inject.internal.Annotations: com.google.inject.Key getKey(com.google.inject.TypeLiteral,java.lang.reflect.Member,java.lang.'annotation'.Annotation[],com.google.inject.internal.Errors)>(r17, r1, $r14, r13);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r15);

        goto label1;

     label2:
        $r7 = interfaceinvoke r6.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r11 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r18 = (com.google.inject.Key) $r11;

        $z3 = interfaceinvoke $r4.<java.util.List: boolean remove(java.lang.Object)>(r18);

        if $z3 != 0 goto label4;

        return 0;

     label4:
        goto label3;

     label5:
        $r8 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label6:
        $z2 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label8;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r19 = (com.google.inject.Key) $r9;

        $r10 = virtualinvoke r19.<com.google.inject.Key: java.lang.Class getAnnotationType()>();

        if $r10 != class "Lcom/google/inject/assistedinject/Assisted;" goto label7;

        return 0;

     label7:
        goto label6;

     label8:
        return 1;
    }

    private java.util.Set getDependencies(com.google.inject.spi.InjectionPoint, com.google.inject.TypeLiteral)
    {
        java.util.Iterator $r7;
        java.util.Set $r6;
        java.util.List $r2, $r10;
        com.google.inject.spi.InjectionPoint r1, r9;
        com.google.inject.internal.util.$ImmutableSet $r5;
        com.google.inject.internal.util.$ImmutableSet$Builder $r0;
        java.lang.Class $r4;
        java.lang.Object $r8;
        com.google.inject.assistedinject.FactoryProvider2 r11;
        com.google.inject.TypeLiteral r3;
        boolean $z0, $z1;

        r11 := @this: com.google.inject.assistedinject.FactoryProvider2;

        r1 := @parameter0: com.google.inject.spi.InjectionPoint;

        r3 := @parameter1: com.google.inject.TypeLiteral;

        $r0 = staticinvoke <com.google.inject.internal.util.$ImmutableSet: com.google.inject.internal.util.$ImmutableSet$Builder builder()>();

        $r2 = virtualinvoke r1.<com.google.inject.spi.InjectionPoint: java.util.List getDependencies()>();

        virtualinvoke $r0.<com.google.inject.internal.util.$ImmutableSet$Builder: com.google.inject.internal.util.$ImmutableSet$Builder addAll(java.lang.Iterable)>($r2);

        $r4 = virtualinvoke r3.<com.google.inject.TypeLiteral: java.lang.Class getRawType()>();

        $z0 = virtualinvoke $r4.<java.lang.Class: boolean isInterface()>();

        if $z0 != 0 goto label2;

        $r6 = staticinvoke <com.google.inject.spi.InjectionPoint: java.util.Set forInstanceMethodsAndFields(com.google.inject.TypeLiteral)>(r3);

        $r7 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (com.google.inject.spi.InjectionPoint) $r8;

        $r10 = virtualinvoke r9.<com.google.inject.spi.InjectionPoint: java.util.List getDependencies()>();

        virtualinvoke $r0.<com.google.inject.internal.util.$ImmutableSet$Builder: com.google.inject.internal.util.$ImmutableSet$Builder addAll(java.lang.Iterable)>($r10);

        goto label1;

     label2:
        $r5 = virtualinvoke $r0.<com.google.inject.internal.util.$ImmutableSet$Builder: com.google.inject.internal.util.$ImmutableSet build()>();

        return $r5;
    }

    private java.util.Set removeAssistedDeps(java.util.Set)
    {
        java.util.Iterator $r2;
        com.google.inject.spi.Dependency r5;
        com.google.inject.Key $r6;
        java.util.Set r1;
        com.google.inject.internal.util.$ImmutableSet $r3;
        com.google.inject.internal.util.$ImmutableSet$Builder $r0;
        java.lang.Object $r4;
        java.lang.Class $r7;
        com.google.inject.assistedinject.FactoryProvider2 r8;
        boolean $z0, $z1;

        r8 := @this: com.google.inject.assistedinject.FactoryProvider2;

        r1 := @parameter0: java.util.Set;

        $r0 = staticinvoke <com.google.inject.internal.util.$ImmutableSet: com.google.inject.internal.util.$ImmutableSet$Builder builder()>();

        $r2 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.google.inject.spi.Dependency) $r4;

        $r6 = virtualinvoke r5.<com.google.inject.spi.Dependency: com.google.inject.Key getKey()>();

        $r7 = virtualinvoke $r6.<com.google.inject.Key: java.lang.Class getAnnotationType()>();

        if $r7 == null goto label2;

        $z1 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>(class "Lcom/google/inject/assistedinject/Assisted;");

        if $z1 != 0 goto label3;

     label2:
        virtualinvoke $r0.<com.google.inject.internal.util.$ImmutableSet$Builder: com.google.inject.internal.util.$ImmutableSet$Builder add(java.lang.Object)>(r5);

     label3:
        goto label1;

     label4:
        $r3 = virtualinvoke $r0.<com.google.inject.internal.util.$ImmutableSet$Builder: com.google.inject.internal.util.$ImmutableSet build()>();

        return $r3;
    }

    private boolean isValidForOptimizedAssistedInject(java.util.Set)
    {
        java.util.Iterator $r1;
        com.google.inject.spi.Dependency r3;
        java.util.Set r0;
        java.lang.Object $r2;
        com.google.inject.assistedinject.FactoryProvider2 r4;
        boolean $z0, $z1;

        r4 := @this: com.google.inject.assistedinject.FactoryProvider2;

        r0 := @parameter0: java.util.Set;

        $r1 = interfaceinvoke r0.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.google.inject.spi.Dependency) $r2;

        $z1 = specialinvoke r4.<com.google.inject.assistedinject.FactoryProvider2: boolean isInjectorOrAssistedProvider(com.google.inject.spi.Dependency)>(r3);

        if $z1 == 0 goto label2;

        return 0;

     label2:
        goto label1;

     label3:
        return 1;
    }

    private boolean isInjectorOrAssistedProvider(com.google.inject.spi.Dependency)
    {
        com.google.inject.spi.Dependency r0;
        com.google.inject.Key $r1, $r3, $r6;
        java.lang.Class $r2, $r5, $r8;
        com.google.inject.assistedinject.FactoryProvider2 r9;
        com.google.inject.TypeLiteral $r4, $r7;
        boolean $z0, $z1, $z2;

        r9 := @this: com.google.inject.assistedinject.FactoryProvider2;

        r0 := @parameter0: com.google.inject.spi.Dependency;

        $r1 = virtualinvoke r0.<com.google.inject.spi.Dependency: com.google.inject.Key getKey()>();

        $r2 = virtualinvoke $r1.<com.google.inject.Key: java.lang.Class getAnnotationType()>();

        if $r2 == null goto label1;

        $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(class "Lcom/google/inject/assistedinject/Assisted;");

        if $z1 == 0 goto label1;

        $r6 = virtualinvoke r0.<com.google.inject.spi.Dependency: com.google.inject.Key getKey()>();

        $r7 = virtualinvoke $r6.<com.google.inject.Key: com.google.inject.TypeLiteral getTypeLiteral()>();

        $r8 = virtualinvoke $r7.<com.google.inject.TypeLiteral: java.lang.Class getRawType()>();

        $z2 = virtualinvoke $r8.<java.lang.Object: boolean equals(java.lang.Object)>(class "Lcom/google/inject/Provider;");

        if $z2 == 0 goto label2;

        return 1;

     label1:
        $r3 = virtualinvoke r0.<com.google.inject.spi.Dependency: com.google.inject.Key getKey()>();

        $r4 = virtualinvoke $r3.<com.google.inject.Key: com.google.inject.TypeLiteral getTypeLiteral()>();

        $r5 = virtualinvoke $r4.<com.google.inject.TypeLiteral: java.lang.Class getRawType()>();

        $z0 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>(class "Lcom/google/inject/Injector;");

        if $z0 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    private com.google.inject.Key assistKey(java.lang.reflect.Method, com.google.inject.Key, com.google.inject.internal.Errors) throws com.google.inject.internal.ErrorsException
    {
        java.lang.Object[] $r6;
        com.google.inject.Key r0, $r11;
        com.google.inject.assistedinject.Assisted $r10;
        com.google.inject.internal.Errors r3, $r5;
        com.google.inject.internal.ErrorsException $r8;
        java.lang.Class $r1, $r2, $r7;
        com.google.inject.assistedinject.FactoryProvider2 r12;
        java.lang.reflect.Method r4;
        com.google.inject.TypeLiteral $r9;

        r12 := @this: com.google.inject.assistedinject.FactoryProvider2;

        r4 := @parameter0: java.lang.reflect.Method;

        r0 := @parameter1: com.google.inject.Key;

        r3 := @parameter2: com.google.inject.internal.Errors;

        $r1 = virtualinvoke r0.<com.google.inject.Key: java.lang.Class getAnnotationType()>();

        if $r1 != null goto label1;

        $r9 = virtualinvoke r0.<com.google.inject.Key: com.google.inject.TypeLiteral getTypeLiteral()>();

        $r10 = <com.google.inject.assistedinject.FactoryProvider2: com.google.inject.assistedinject.Assisted DEFAULT_ANNOTATION>;

        $r11 = staticinvoke <com.google.inject.Key: com.google.inject.Key get(com.google.inject.TypeLiteral,java.lang.'annotation'.Annotation)>($r9, $r10);

        return $r11;

     label1:
        $r2 = virtualinvoke r0.<com.google.inject.Key: java.lang.Class getAnnotationType()>();

        if $r2 != class "Lcom/google/inject/assistedinject/Assisted;" goto label2;

        return r0;

     label2:
        $r5 = virtualinvoke r3.<com.google.inject.internal.Errors: com.google.inject.internal.Errors withSource(java.lang.Object)>(r4);

        $r6 = newarray (java.lang.Object)[1];

        $r7 = virtualinvoke r0.<com.google.inject.Key: java.lang.Class getAnnotationType()>();

        $r6[0] = $r7;

        virtualinvoke $r5.<com.google.inject.internal.Errors: com.google.inject.internal.Errors addMessage(java.lang.String,java.lang.Object[])>("Only @Assisted is allowed for factory parameters, but found @%s", $r6);

        $r8 = virtualinvoke r3.<com.google.inject.internal.Errors: com.google.inject.internal.ErrorsException toException()>();

        throw $r8;
    }

    void initialize(com.google.inject.Injector)
    {
        java.lang.Object[] r16;
        com.google.inject.internal.util.$ImmutableMap $r3;
        com.google.inject.assistedinject.FactoryProvider2$AssistData r11;
        com.google.inject.internal.util.$ImmutableSet $r4;
        com.google.inject.spi.Message $r14;
        int $i0;
        com.google.inject.assistedinject.FactoryProvider2 r0;
        java.lang.reflect.Method r9;
        boolean $z0, $z1;
        java.util.Map$Entry r7;
        com.google.inject.internal.util.$ImmutableList $r15;
        java.util.Iterator $r5;
        java.lang.Class[] $r12;
        com.google.inject.ConfigurationException $r13;
        com.google.inject.Injector $r1, r2;
        java.lang.Object $r6, $r8, $r10;

        r0 := @this: com.google.inject.assistedinject.FactoryProvider2;

        r2 := @parameter0: com.google.inject.Injector;

        $r1 = r0.<com.google.inject.assistedinject.FactoryProvider2: com.google.inject.Injector injector>;

        if $r1 == null goto label1;

        $r13 = new com.google.inject.ConfigurationException;

        $r14 = new com.google.inject.spi.Message;

        specialinvoke $r14.<com.google.inject.spi.Message: void <init>(java.lang.Object,java.lang.String)>(class "Lcom/google/inject/assistedinject/FactoryProvider2;", "Factories.create() factories may only be used in one Injector!");

        $r15 = staticinvoke <com.google.inject.internal.util.$ImmutableList: com.google.inject.internal.util.$ImmutableList of(java.lang.Object)>($r14);

        specialinvoke $r13.<com.google.inject.ConfigurationException: void <init>(java.lang.Iterable)>($r15);

        throw $r13;

     label1:
        r0.<com.google.inject.assistedinject.FactoryProvider2: com.google.inject.Injector injector> = r2;

        $r3 = r0.<com.google.inject.assistedinject.FactoryProvider2: com.google.inject.internal.util.$ImmutableMap assistDataByMethod>;

        $r4 = virtualinvoke $r3.<com.google.inject.internal.util.$ImmutableMap: com.google.inject.internal.util.$ImmutableSet entrySet()>();

        $r5 = virtualinvoke $r4.<com.google.inject.internal.util.$ImmutableSet: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.Map$Entry) $r6;

        $r8 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        r9 = (java.lang.reflect.Method) $r8;

        $r10 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        r11 = (com.google.inject.assistedinject.FactoryProvider2$AssistData) $r10;

        $z1 = r11.<com.google.inject.assistedinject.FactoryProvider2$AssistData: boolean optimized>;

        if $z1 != 0 goto label3;

        $r12 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i0 = lengthof $r12;

        r16 = newarray (java.lang.Object)[$i0];

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],java.lang.Object)>(r16, "dummy object for validating Factories");

        goto label4;

     label3:
        r16 = null;

     label4:
        virtualinvoke r0.<com.google.inject.assistedinject.FactoryProvider2: com.google.inject.Binding getBindingFromNewInjector(java.lang.reflect.Method,java.lang.Object[],com.google.inject.assistedinject.FactoryProvider2$AssistData)>(r9, r16, r11);

        goto label2;

     label5:
        return;
    }

    public com.google.inject.Binding getBindingFromNewInjector(java.lang.reflect.Method, java.lang.Object[], com.google.inject.assistedinject.FactoryProvider2$AssistData)
    {
        java.lang.Object[] r7;
        com.google.inject.Key $r4, $r12;
        com.google.inject.Module[] $r8;
        com.google.inject.assistedinject.FactoryProvider2$2 $r5;
        com.google.inject.Binding $r11;
        com.google.inject.Injector $r1, $r9, $r10;
        com.google.inject.assistedinject.FactoryProvider2$AssistData r2;
        com.google.inject.assistedinject.FactoryProvider2 r0;
        com.google.inject.TypeLiteral $r3;
        java.lang.reflect.Method r6;
        boolean $z0, $z1;

        r0 := @this: com.google.inject.assistedinject.FactoryProvider2;

        r6 := @parameter0: java.lang.reflect.Method;

        r7 := @parameter1: java.lang.Object[];

        r2 := @parameter2: com.google.inject.assistedinject.FactoryProvider2$AssistData;

        $r1 = r0.<com.google.inject.assistedinject.FactoryProvider2: com.google.inject.Injector injector>;

        if $r1 == null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <com.google.inject.internal.util.$Preconditions: void checkState(boolean,java.lang.Object)>($z1, "Factories.create() factories cannot be used until they\'re initialized by Guice.");

        $r12 = r2.<com.google.inject.assistedinject.FactoryProvider2$AssistData: com.google.inject.Key returnType>;

        $r3 = virtualinvoke $r12.<com.google.inject.Key: com.google.inject.TypeLiteral getTypeLiteral()>();

        $r4 = staticinvoke <com.google.inject.Key: com.google.inject.Key get(com.google.inject.TypeLiteral,java.lang.Class)>($r3, class "Lcom/google/inject/assistedinject/Assisted;");

        $r5 = new com.google.inject.assistedinject.FactoryProvider2$2;

        specialinvoke $r5.<com.google.inject.assistedinject.FactoryProvider2$2: void <init>(com.google.inject.assistedinject.FactoryProvider2,java.lang.reflect.Method,com.google.inject.assistedinject.FactoryProvider2$AssistData,java.lang.Object[],com.google.inject.Key)>(r0, r6, r2, r7, $r4);

        $r9 = r0.<com.google.inject.assistedinject.FactoryProvider2: com.google.inject.Injector injector>;

        $r8 = newarray (com.google.inject.Module)[1];

        $r8[0] = $r5;

        $r10 = interfaceinvoke $r9.<com.google.inject.Injector: com.google.inject.Injector createChildInjector(com.google.inject.Module[])>($r8);

        $r11 = interfaceinvoke $r10.<com.google.inject.Injector: com.google.inject.Binding getBinding(com.google.inject.Key)>($r4);

        $z0 = r2.<com.google.inject.assistedinject.FactoryProvider2$AssistData: boolean optimized>;

        if $z0 == 0 goto label3;

        r2.<com.google.inject.assistedinject.FactoryProvider2$AssistData: com.google.inject.Binding cachedBinding> = $r11;

     label3:
        return $r11;
    }

    public java.lang.Object invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]) throws java.lang.Throwable
    {
        com.google.inject.assistedinject.FactoryProvider2$ThreadLocalProvider r15, r24, r32;
        com.google.inject.spi.Message r33;
        com.google.inject.assistedinject.FactoryProvider2 r2;
        com.google.inject.ProvisionException $r25;
        java.lang.reflect.Method r0;
        boolean $z0, $z1, $z2, $z3;
        java.util.Collection $r26, $r27;
        com.google.inject.Binding $r6, $r8, $r18;
        java.util.List $r9, $r12, $r21;
        java.lang.Throwable $r20, $r29;
        java.lang.Object[] r7;
        com.google.inject.internal.util.$ImmutableMap $r3;
        com.google.inject.assistedinject.FactoryProvider2$AssistData r5;
        int $i0, $i1, i2;
        java.util.Iterator $r10, $r13, $r22;
        com.google.inject.Provider r31;
        java.lang.Class $r1;
        java.lang.Object $r4, $r11, $r14, $r16, $r17, $r19, $r23, $r28, r30;

        r2 := @this: com.google.inject.assistedinject.FactoryProvider2;

        r30 := @parameter0: java.lang.Object;

        r0 := @parameter1: java.lang.reflect.Method;

        r7 := @parameter2: java.lang.Object[];

        $r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        if $r1 != class "Ljava/lang/Object;" goto label01;

        $r19 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r2, r7);

        return $r19;

     label01:
        $r3 = r2.<com.google.inject.assistedinject.FactoryProvider2: com.google.inject.internal.util.$ImmutableMap assistDataByMethod>;

        $r4 = virtualinvoke $r3.<com.google.inject.internal.util.$ImmutableMap: java.lang.Object get(java.lang.Object)>(r0);

        r5 = (com.google.inject.assistedinject.FactoryProvider2$AssistData) $r4;

        $r6 = r5.<com.google.inject.assistedinject.FactoryProvider2$AssistData: com.google.inject.Binding cachedBinding>;

        if $r6 == null goto label02;

        $r18 = r5.<com.google.inject.assistedinject.FactoryProvider2$AssistData: com.google.inject.Binding cachedBinding>;

        r31 = interfaceinvoke $r18.<com.google.inject.Binding: com.google.inject.Provider getProvider()>();

        goto label03;

     label02:
        $r8 = virtualinvoke r2.<com.google.inject.assistedinject.FactoryProvider2: com.google.inject.Binding getBindingFromNewInjector(java.lang.reflect.Method,java.lang.Object[],com.google.inject.assistedinject.FactoryProvider2$AssistData)>(r0, r7, r5);

        r31 = interfaceinvoke $r8.<com.google.inject.Binding: com.google.inject.Provider getProvider()>();

     label03:
        i2 = 0;

        $r9 = r5.<com.google.inject.assistedinject.FactoryProvider2$AssistData: java.util.List providers>;

        $r10 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z3 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label05;

        $r16 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r32 = (com.google.inject.assistedinject.FactoryProvider2$ThreadLocalProvider) $r16;

        $i0 = i2;

        i2 = i2 + 1;

        $r17 = r7[$i0];

        virtualinvoke r32.<com.google.inject.assistedinject.FactoryProvider2$ThreadLocalProvider: void set(java.lang.Object)>($r17);

        goto label04;

     label05:
        $r11 = interfaceinvoke r31.<com.google.inject.Provider: java.lang.Object get()>();

     label06:
        $r12 = r5.<com.google.inject.assistedinject.FactoryProvider2$AssistData: java.util.List providers>;

        $r13 = interfaceinvoke $r12.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z0 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label08;

        $r14 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r15 = (com.google.inject.assistedinject.FactoryProvider2$ThreadLocalProvider) $r14;

        virtualinvoke r15.<com.google.inject.assistedinject.FactoryProvider2$ThreadLocalProvider: void remove()>();

        goto label07;

     label08:
        return $r11;

     label09:
        $r25 := @caughtexception;

        $r26 = virtualinvoke $r25.<com.google.inject.ProvisionException: java.util.Collection getErrorMessages()>();

        $i1 = interfaceinvoke $r26.<java.util.Collection: int size()>();

        if $i1 != 1 goto label10;

        $r27 = virtualinvoke $r25.<com.google.inject.ProvisionException: java.util.Collection getErrorMessages()>();

        $r28 = staticinvoke <com.google.inject.internal.util.$Iterables: java.lang.Object getOnlyElement(java.lang.Iterable)>($r27);

        r33 = (com.google.inject.spi.Message) $r28;

        $r29 = virtualinvoke r33.<com.google.inject.spi.Message: java.lang.Throwable getCause()>();

        if $r29 == null goto label10;

        $z2 = staticinvoke <com.google.inject.assistedinject.FactoryProvider2: boolean canRethrow(java.lang.reflect.Method,java.lang.Throwable)>(r0, $r29);

        if $z2 == 0 goto label10;

        throw $r29;

     label10:
        throw $r25;

     label11:
        $r20 := @caughtexception;

     label12:
        $r21 = r5.<com.google.inject.assistedinject.FactoryProvider2$AssistData: java.util.List providers>;

        $r22 = interfaceinvoke $r21.<java.util.List: java.util.Iterator iterator()>();

     label13:
        $z1 = interfaceinvoke $r22.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label14;

        $r23 = interfaceinvoke $r22.<java.util.Iterator: java.lang.Object next()>();

        r24 = (com.google.inject.assistedinject.FactoryProvider2$ThreadLocalProvider) $r23;

        virtualinvoke r24.<com.google.inject.assistedinject.FactoryProvider2$ThreadLocalProvider: void remove()>();

        goto label13;

     label14:
        throw $r20;

        catch com.google.inject.ProvisionException from label03 to label06 with label09;
        catch java.lang.Throwable from label03 to label06 with label11;
        catch java.lang.Throwable from label09 to label12 with label11;
    }

    public java.lang.String toString()
    {
        java.lang.Class[] $r3;
        com.google.inject.assistedinject.FactoryProvider2 r0;
        java.lang.Object $r1;
        java.lang.Class $r2, $r4;
        java.lang.String $r5;

        r0 := @this: com.google.inject.assistedinject.FactoryProvider2;

        $r1 = r0.<com.google.inject.assistedinject.FactoryProvider2: java.lang.Object factory>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        $r4 = $r3[0];

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        return $r5;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object r0, $r2;
        com.google.inject.assistedinject.FactoryProvider2 r1;
        boolean $z0;

        r1 := @this: com.google.inject.assistedinject.FactoryProvider2;

        r0 := @parameter0: java.lang.Object;

        if r0 == r1 goto label1;

        $r2 = r1.<com.google.inject.assistedinject.FactoryProvider2: java.lang.Object factory>;

        if r0 != $r2 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    static boolean canRethrow(java.lang.reflect.Method, java.lang.Throwable)
    {
        java.lang.Throwable r0;
        java.lang.Class[] $r2;
        int i0, i1;
        java.lang.Class r3;
        java.lang.reflect.Method r1;
        boolean $z0, $z1, $z2;

        r1 := @parameter0: java.lang.reflect.Method;

        r0 := @parameter1: java.lang.Throwable;

        $z0 = r0 instanceof java.lang.Error;

        if $z0 != 0 goto label1;

        $z1 = r0 instanceof java.lang.RuntimeException;

        if $z1 == 0 goto label2;

     label1:
        return 1;

     label2:
        $r2 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.Class[] getExceptionTypes()>();

        i0 = lengthof $r2;

        i1 = 0;

     label3:
        if i1 >= i0 goto label5;

        r3 = $r2[i1];

        $z2 = virtualinvoke r3.<java.lang.Class: boolean isInstance(java.lang.Object)>(r0);

        if $z2 == 0 goto label4;

        return 1;

     label4:
        i1 = i1 + 1;

        goto label3;

     label5:
        return 0;
    }

    static void <clinit>()
    {
        com.google.inject.assistedinject.FactoryProvider2$1 $r0;

        $r0 = new com.google.inject.assistedinject.FactoryProvider2$1;

        specialinvoke $r0.<com.google.inject.assistedinject.FactoryProvider2$1: void <init>()>();

        <com.google.inject.assistedinject.FactoryProvider2: com.google.inject.assistedinject.Assisted DEFAULT_ANNOTATION> = $r0;

        return;
    }
}
