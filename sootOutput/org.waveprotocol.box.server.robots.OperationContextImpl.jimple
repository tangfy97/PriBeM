public class org.waveprotocol.box.server.robots.OperationContextImpl extends java.lang.Object implements org.waveprotocol.box.server.robots.OperationContext, org.waveprotocol.box.server.robots.OperationResults
{
    private static final org.waveprotocol.wave.util.logging.Log LOG;
    private static final org.waveprotocol.wave.model.wave.data.ObservableWaveletData$Factory FACTORY;
    private final java.util.Map responses;
    private final org.waveprotocol.box.server.waveserver.WaveletProvider waveletProvider;
    private final com.google.wave.api.data.converter.EventDataConverter converter;
    private final org.waveprotocol.box.server.robots.RobotWaveletData boundWavelet;
    private final java.util.Map openedWavelets;
    private final java.util.Map tempBlipIdMap;
    private final java.util.Map tempWaveletNameMap;
    private final java.util.Map openedConversations;
    private final org.waveprotocol.box.server.robots.util.ConversationUtil conversationUtil;

    public void <init>(org.waveprotocol.box.server.waveserver.WaveletProvider, com.google.wave.api.data.converter.EventDataConverter, org.waveprotocol.box.server.robots.util.ConversationUtil)
    {
        org.waveprotocol.box.server.robots.util.ConversationUtil r3;
        org.waveprotocol.box.server.robots.OperationContextImpl r0;
        org.waveprotocol.box.server.waveserver.WaveletProvider r1;
        com.google.wave.api.data.converter.EventDataConverter r2;

        r0 := @this: org.waveprotocol.box.server.robots.OperationContextImpl;

        r1 := @parameter0: org.waveprotocol.box.server.waveserver.WaveletProvider;

        r2 := @parameter1: com.google.wave.api.data.converter.EventDataConverter;

        r3 := @parameter2: org.waveprotocol.box.server.robots.util.ConversationUtil;

        specialinvoke r0.<org.waveprotocol.box.server.robots.OperationContextImpl: void <init>(org.waveprotocol.box.server.waveserver.WaveletProvider,com.google.wave.api.data.converter.EventDataConverter,org.waveprotocol.box.server.robots.util.ConversationUtil,org.waveprotocol.box.server.robots.RobotWaveletData)>(r1, r2, r3, null);

        return;
    }

    public void <init>(org.waveprotocol.box.server.waveserver.WaveletProvider, com.google.wave.api.data.converter.EventDataConverter, org.waveprotocol.box.server.robots.util.ConversationUtil, org.waveprotocol.box.server.robots.RobotWaveletData)
    {
        org.waveprotocol.wave.model.id.WaveletName $r11;
        org.waveprotocol.box.server.robots.util.ConversationUtil r7;
        org.waveprotocol.box.server.robots.RobotWaveletData r8;
        org.waveprotocol.box.server.robots.OperationContextImpl r0;
        org.waveprotocol.box.server.waveserver.WaveletProvider r5;
        java.util.HashMap $r1, $r2, $r3, $r4, $r9;
        com.google.wave.api.data.converter.EventDataConverter r6;
        java.util.Map $r10;

        r0 := @this: org.waveprotocol.box.server.robots.OperationContextImpl;

        r5 := @parameter0: org.waveprotocol.box.server.waveserver.WaveletProvider;

        r6 := @parameter1: com.google.wave.api.data.converter.EventDataConverter;

        r7 := @parameter2: org.waveprotocol.box.server.robots.util.ConversationUtil;

        r8 := @parameter3: org.waveprotocol.box.server.robots.RobotWaveletData;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <com.google.common.collect.Maps: java.util.HashMap newHashMap()>();

        r0.<org.waveprotocol.box.server.robots.OperationContextImpl: java.util.Map responses> = $r1;

        $r2 = staticinvoke <com.google.common.collect.Maps: java.util.HashMap newHashMap()>();

        r0.<org.waveprotocol.box.server.robots.OperationContextImpl: java.util.Map openedWavelets> = $r2;

        $r3 = staticinvoke <com.google.common.collect.Maps: java.util.HashMap newHashMap()>();

        r0.<org.waveprotocol.box.server.robots.OperationContextImpl: java.util.Map tempBlipIdMap> = $r3;

        $r4 = staticinvoke <com.google.common.collect.Maps: java.util.HashMap newHashMap()>();

        r0.<org.waveprotocol.box.server.robots.OperationContextImpl: java.util.Map tempWaveletNameMap> = $r4;

        r0.<org.waveprotocol.box.server.robots.OperationContextImpl: org.waveprotocol.box.server.waveserver.WaveletProvider waveletProvider> = r5;

        r0.<org.waveprotocol.box.server.robots.OperationContextImpl: com.google.wave.api.data.converter.EventDataConverter converter> = r6;

        r0.<org.waveprotocol.box.server.robots.OperationContextImpl: org.waveprotocol.box.server.robots.util.ConversationUtil conversationUtil> = r7;

        r0.<org.waveprotocol.box.server.robots.OperationContextImpl: org.waveprotocol.box.server.robots.RobotWaveletData boundWavelet> = r8;

        $r9 = staticinvoke <com.google.common.collect.Maps: java.util.HashMap newHashMap()>();

        r0.<org.waveprotocol.box.server.robots.OperationContextImpl: java.util.Map openedConversations> = $r9;

        if r8 == null goto label1;

        $r10 = r0.<org.waveprotocol.box.server.robots.OperationContextImpl: java.util.Map openedWavelets>;

        $r11 = virtualinvoke r8.<org.waveprotocol.box.server.robots.RobotWaveletData: org.waveprotocol.wave.model.id.WaveletName getWaveletName()>();

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, r8);

     label1:
        return;
    }

    public com.google.wave.api.data.converter.EventDataConverter getConverter()
    {
        org.waveprotocol.box.server.robots.OperationContextImpl r0;
        com.google.wave.api.data.converter.EventDataConverter $r1;

        r0 := @this: org.waveprotocol.box.server.robots.OperationContextImpl;

        $r1 = r0.<org.waveprotocol.box.server.robots.OperationContextImpl: com.google.wave.api.data.converter.EventDataConverter converter>;

        return $r1;
    }

    public boolean isBound()
    {
        org.waveprotocol.box.server.robots.RobotWaveletData $r1;
        org.waveprotocol.box.server.robots.OperationContextImpl r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.box.server.robots.OperationContextImpl;

        $r1 = r0.<org.waveprotocol.box.server.robots.OperationContextImpl: org.waveprotocol.box.server.robots.RobotWaveletData boundWavelet>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.util.Map getOpenWavelets()
    {
        org.waveprotocol.box.server.robots.OperationContextImpl r0;
        java.util.Map $r1, $r2;

        r0 := @this: org.waveprotocol.box.server.robots.OperationContextImpl;

        $r1 = r0.<org.waveprotocol.box.server.robots.OperationContextImpl: java.util.Map openedWavelets>;

        $r2 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r1);

        return $r2;
    }

    public void constructResponse(com.google.wave.api.OperationRequest, java.util.Map)
    {
        com.google.wave.api.OperationRequest r1;
        org.waveprotocol.box.server.robots.OperationContextImpl r0;
        java.util.Map r4;
        com.google.wave.api.JsonRpcResponse $r5;
        java.lang.String $r2, $r3;

        r0 := @this: org.waveprotocol.box.server.robots.OperationContextImpl;

        r1 := @parameter0: com.google.wave.api.OperationRequest;

        r4 := @parameter1: java.util.Map;

        $r2 = virtualinvoke r1.<com.google.wave.api.OperationRequest: java.lang.String getId()>();

        $r3 = virtualinvoke r1.<com.google.wave.api.OperationRequest: java.lang.String getId()>();

        $r5 = staticinvoke <com.google.wave.api.JsonRpcResponse: com.google.wave.api.JsonRpcResponse result(java.lang.String,java.util.Map)>($r3, r4);

        specialinvoke r0.<org.waveprotocol.box.server.robots.OperationContextImpl: void setResponse(java.lang.String,com.google.wave.api.JsonRpcResponse)>($r2, $r5);

        return;
    }

    public void constructErrorResponse(com.google.wave.api.OperationRequest, java.lang.String)
    {
        com.google.wave.api.OperationRequest r1;
        org.waveprotocol.box.server.robots.OperationContextImpl r0;
        com.google.wave.api.JsonRpcResponse $r5;
        java.lang.String $r2, $r3, r4;

        r0 := @this: org.waveprotocol.box.server.robots.OperationContextImpl;

        r1 := @parameter0: com.google.wave.api.OperationRequest;

        r4 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r1.<com.google.wave.api.OperationRequest: java.lang.String getId()>();

        $r3 = virtualinvoke r1.<com.google.wave.api.OperationRequest: java.lang.String getId()>();

        $r5 = staticinvoke <com.google.wave.api.JsonRpcResponse: com.google.wave.api.JsonRpcResponse error(java.lang.String,java.lang.String)>($r3, r4);

        specialinvoke r0.<org.waveprotocol.box.server.robots.OperationContextImpl: void setResponse(java.lang.String,com.google.wave.api.JsonRpcResponse)>($r2, $r5);

        return;
    }

    public void processEvent(com.google.wave.api.OperationRequest, com.google.wave.api.event.Event) throws com.google.wave.api.InvalidRequestException
    {
        com.google.wave.api.OperationRequest r4;
        org.waveprotocol.box.server.robots.OperationContextImpl r3;
        com.google.wave.api.event.Event r0;
        com.google.wave.api.event.EventType $r1, $r2;
        com.google.wave.api.event.OperationErrorEvent $r6;
        com.google.wave.api.event.EventSerializationException $r8;
        java.util.Map $r5;
        org.waveprotocol.wave.util.logging.Log $r9;
        java.lang.String $r7;
        com.google.wave.api.InvalidRequestException $r10;

        r3 := @this: org.waveprotocol.box.server.robots.OperationContextImpl;

        r4 := @parameter0: com.google.wave.api.OperationRequest;

        r0 := @parameter1: com.google.wave.api.event.Event;

        $r1 = interfaceinvoke r0.<com.google.wave.api.event.Event: com.google.wave.api.event.EventType getType()>();

        $r2 = <com.google.wave.api.event.EventType: com.google.wave.api.event.EventType OPERATION_ERROR>;

        if $r1 != $r2 goto label1;

        $r6 = staticinvoke <com.google.wave.api.event.OperationErrorEvent: com.google.wave.api.event.OperationErrorEvent as(com.google.wave.api.event.Event)>(r0);

        $r7 = virtualinvoke $r6.<com.google.wave.api.event.OperationErrorEvent: java.lang.String getMessage()>();

        virtualinvoke r3.<org.waveprotocol.box.server.robots.OperationContextImpl: void constructErrorResponse(com.google.wave.api.OperationRequest,java.lang.String)>(r4, $r7);

        return;

     label1:
        $r5 = staticinvoke <com.google.wave.api.event.EventSerializer: java.util.Map extractPropertiesToParamsPropertyMap(com.google.wave.api.event.Event)>(r0);

        virtualinvoke r3.<org.waveprotocol.box.server.robots.OperationContextImpl: void constructResponse(com.google.wave.api.OperationRequest,java.util.Map)>(r4, $r5);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        $r9 = <org.waveprotocol.box.server.robots.OperationContextImpl: org.waveprotocol.wave.util.logging.Log LOG>;

        virtualinvoke $r9.<org.waveprotocol.wave.util.logging.Log: void severe(java.lang.String,java.lang.Throwable)>("Internal Error occurred, when serializing events", $r8);

        $r10 = new com.google.wave.api.InvalidRequestException;

        specialinvoke $r10.<com.google.wave.api.InvalidRequestException: void <init>(java.lang.String,com.google.wave.api.OperationRequest)>("Unable to serialize events", r4);

        throw $r10;

     label4:
        return;

        catch com.google.wave.api.event.EventSerializationException from label1 to label2 with label3;
    }

    public void putWavelet(org.waveprotocol.wave.model.id.WaveId, org.waveprotocol.wave.model.id.WaveletId, org.waveprotocol.box.server.robots.RobotWaveletData)
    {
        org.waveprotocol.wave.model.id.WaveletName $r1, $r9;
        org.waveprotocol.box.server.robots.RobotWaveletData r0;
        org.waveprotocol.wave.model.id.WaveId r4;
        org.waveprotocol.box.server.robots.OperationContextImpl r2;
        org.waveprotocol.wave.model.id.WaveletId r7;
        java.util.Map $r3, $r6, $r8;
        java.lang.String $r5;
        boolean $z0, $z1, $z2;

        r2 := @this: org.waveprotocol.box.server.robots.OperationContextImpl;

        r4 := @parameter0: org.waveprotocol.wave.model.id.WaveId;

        r7 := @parameter1: org.waveprotocol.wave.model.id.WaveletId;

        r0 := @parameter2: org.waveprotocol.box.server.robots.RobotWaveletData;

        $r1 = virtualinvoke r0.<org.waveprotocol.box.server.robots.RobotWaveletData: org.waveprotocol.wave.model.id.WaveletName getWaveletName()>();

        $r3 = r2.<org.waveprotocol.box.server.robots.OperationContextImpl: java.util.Map openedWavelets>;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

        if $z0 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z2, "Not allowed to put an already open wavelet in as a new wavelet");

        $r5 = virtualinvoke r4.<org.waveprotocol.wave.model.id.WaveId: java.lang.String getId()>();

        $z1 = virtualinvoke $r5.<java.lang.String: boolean startsWith(java.lang.String)>("TBD_");

        if $z1 == 0 goto label3;

        $r8 = r2.<org.waveprotocol.box.server.robots.OperationContextImpl: java.util.Map tempWaveletNameMap>;

        $r9 = staticinvoke <org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveletName of(org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.model.id.WaveletId)>(r4, r7);

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r1);

     label3:
        $r6 = r2.<org.waveprotocol.box.server.robots.OperationContextImpl: java.util.Map openedWavelets>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, r0);

        return;
    }

    public org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet openWavelet(org.waveprotocol.wave.model.id.WaveId, org.waveprotocol.wave.model.id.WaveletId, org.waveprotocol.wave.model.wave.ParticipantId) throws com.google.wave.api.InvalidRequestException
    {
        org.waveprotocol.wave.model.wave.ParticipantId r6;
        java.util.Map $r4, $r14, $r24;
        boolean $z0, $z1;
        org.waveprotocol.wave.model.id.WaveletName $r23, r27;
        org.waveprotocol.box.server.robots.RobotWaveletData $r12, $r26, r28;
        org.waveprotocol.wave.model.id.WaveId r0;
        java.lang.StringBuilder $r18, $r19, $r20, $r21;
        org.waveprotocol.wave.model.id.WaveletId r2, $r15, $r16;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet $r29;
        org.waveprotocol.wave.model.wave.data.ReadableWaveletData $r8, $r10;
        org.waveprotocol.wave.model.version.HashedVersion $r13;
        java.lang.String $r1, $r22;
        com.google.wave.api.InvalidRequestException $r17;
        org.waveprotocol.box.server.robots.OperationContextImpl r3;
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData r11;
        org.waveprotocol.box.server.frontend.CommittedWaveletSnapshot $r7;
        java.lang.Object $r5, $r25;
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData$Factory $r9;

        r3 := @this: org.waveprotocol.box.server.robots.OperationContextImpl;

        r0 := @parameter0: org.waveprotocol.wave.model.id.WaveId;

        r2 := @parameter1: org.waveprotocol.wave.model.id.WaveletId;

        r6 := @parameter2: org.waveprotocol.wave.model.wave.ParticipantId;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.id.WaveId: java.lang.String getId()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("TBD_");

        if $z0 == 0 goto label1;

        $r23 = staticinvoke <org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveletName of(org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.model.id.WaveletId)>(r0, r2);

        $r24 = r3.<org.waveprotocol.box.server.robots.OperationContextImpl: java.util.Map tempWaveletNameMap>;

        $r25 = interfaceinvoke $r24.<java.util.Map: java.lang.Object get(java.lang.Object)>($r23);

        r27 = (org.waveprotocol.wave.model.id.WaveletName) $r25;

        goto label2;

     label1:
        r27 = staticinvoke <org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveletName of(org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.model.id.WaveletId)>(r0, r2);

     label2:
        $r4 = r3.<org.waveprotocol.box.server.robots.OperationContextImpl: java.util.Map openedWavelets>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r27);

        $r26 = (org.waveprotocol.box.server.robots.RobotWaveletData) $r5;

        r28 = $r26;

        if $r26 != null goto label6;

        $r7 = specialinvoke r3.<org.waveprotocol.box.server.robots.OperationContextImpl: org.waveprotocol.box.server.frontend.CommittedWaveletSnapshot getWaveletSnapshot(org.waveprotocol.wave.model.id.WaveletName,org.waveprotocol.wave.model.wave.ParticipantId)>(r27, r6);

        if $r7 != null goto label4;

        $r15 = r27.<org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveletId waveletId>;

        $r16 = staticinvoke <org.waveprotocol.box.server.robots.util.OperationUtil: org.waveprotocol.wave.model.id.WaveletId buildUserDataWaveletId(org.waveprotocol.wave.model.wave.ParticipantId)>(r6);

        $z1 = virtualinvoke $r15.<org.waveprotocol.wave.model.id.WaveletId: boolean equals(java.lang.Object)>($r16);

        if $z1 == 0 goto label3;

        r28 = staticinvoke <org.waveprotocol.box.server.robots.util.RobotsUtil: org.waveprotocol.box.server.robots.RobotWaveletData createEmptyRobotWavelet(org.waveprotocol.wave.model.wave.ParticipantId,org.waveprotocol.wave.model.id.WaveletName)>(r6, r27);

        goto label5;

     label3:
        $r17 = new com.google.wave.api.InvalidRequestException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Wavelet ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r27);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" couldn\'t be retrieved");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<com.google.wave.api.InvalidRequestException: void <init>(java.lang.String)>($r22);

        throw $r17;

     label4:
        $r9 = <org.waveprotocol.box.server.robots.OperationContextImpl: org.waveprotocol.wave.model.wave.data.ObservableWaveletData$Factory FACTORY>;

        $r8 = $r7.<org.waveprotocol.box.server.frontend.CommittedWaveletSnapshot: org.waveprotocol.wave.model.wave.data.ReadableWaveletData snapshot>;

        $r10 = interfaceinvoke $r9.<org.waveprotocol.wave.model.wave.data.ObservableWaveletData$Factory: org.waveprotocol.wave.model.wave.data.ReadableWaveletData create(org.waveprotocol.wave.model.wave.data.ReadableWaveletData)>($r8);

        r11 = (org.waveprotocol.wave.model.wave.data.ObservableWaveletData) $r10;

        $r12 = new org.waveprotocol.box.server.robots.RobotWaveletData;

        $r13 = $r7.<org.waveprotocol.box.server.frontend.CommittedWaveletSnapshot: org.waveprotocol.wave.model.version.HashedVersion committedVersion>;

        specialinvoke $r12.<org.waveprotocol.box.server.robots.RobotWaveletData: void <init>(org.waveprotocol.wave.model.wave.data.ReadableWaveletData,org.waveprotocol.wave.model.version.HashedVersion)>(r11, $r13);

        r28 = $r12;

     label5:
        $r14 = r3.<org.waveprotocol.box.server.robots.OperationContextImpl: java.util.Map openedWavelets>;

        interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r27, r28);

     label6:
        $r29 = virtualinvoke r28.<org.waveprotocol.box.server.robots.RobotWaveletData: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet getOpBasedWavelet(org.waveprotocol.wave.model.wave.ParticipantId)>(r6);

        return $r29;
    }

    public org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet openWavelet(com.google.wave.api.OperationRequest, org.waveprotocol.wave.model.wave.ParticipantId) throws com.google.wave.api.InvalidRequestException
    {
        com.google.wave.api.OperationRequest r1;
        org.waveprotocol.wave.model.id.WaveletId $r10;
        org.waveprotocol.wave.model.wave.ParticipantId r12;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet $r13;
        java.lang.String $r4, $r9;
        org.waveprotocol.wave.model.id.IdSerialiser $r0, $r6;
        com.google.wave.api.InvalidRequestException $r15;
        com.google.wave.api.JsonRpcConstant$ParamsProperty $r2, $r7;
        org.waveprotocol.wave.model.id.WaveId $r5;
        org.waveprotocol.box.server.robots.OperationContextImpl r11;
        org.waveprotocol.wave.model.id.InvalidIdException $r14;
        java.lang.Object $r3, $r8;

        r11 := @this: org.waveprotocol.box.server.robots.OperationContextImpl;

        r1 := @parameter0: com.google.wave.api.OperationRequest;

        r12 := @parameter1: org.waveprotocol.wave.model.wave.ParticipantId;

     label1:
        $r0 = staticinvoke <com.google.wave.api.ApiIdSerializer: org.waveprotocol.wave.model.id.IdSerialiser instance()>();

        $r2 = <com.google.wave.api.JsonRpcConstant$ParamsProperty: com.google.wave.api.JsonRpcConstant$ParamsProperty WAVE_ID>;

        $r3 = staticinvoke <org.waveprotocol.box.server.robots.util.OperationUtil: java.lang.Object getRequiredParameter(com.google.wave.api.OperationRequest,com.google.wave.api.JsonRpcConstant$ParamsProperty)>(r1, $r2);

        $r4 = (java.lang.String) $r3;

        $r5 = interfaceinvoke $r0.<org.waveprotocol.wave.model.id.IdSerialiser: org.waveprotocol.wave.model.id.WaveId deserialiseWaveId(java.lang.String)>($r4);

        $r6 = staticinvoke <com.google.wave.api.ApiIdSerializer: org.waveprotocol.wave.model.id.IdSerialiser instance()>();

        $r7 = <com.google.wave.api.JsonRpcConstant$ParamsProperty: com.google.wave.api.JsonRpcConstant$ParamsProperty WAVELET_ID>;

        $r8 = staticinvoke <org.waveprotocol.box.server.robots.util.OperationUtil: java.lang.Object getRequiredParameter(com.google.wave.api.OperationRequest,com.google.wave.api.JsonRpcConstant$ParamsProperty)>(r1, $r7);

        $r9 = (java.lang.String) $r8;

        $r10 = interfaceinvoke $r6.<org.waveprotocol.wave.model.id.IdSerialiser: org.waveprotocol.wave.model.id.WaveletId deserialiseWaveletId(java.lang.String)>($r9);

        $r13 = virtualinvoke r11.<org.waveprotocol.box.server.robots.OperationContextImpl: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet openWavelet(org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.model.id.WaveletId,org.waveprotocol.wave.model.wave.ParticipantId)>($r5, $r10, r12);

     label2:
        return $r13;

     label3:
        $r14 := @caughtexception;

        $r15 = new com.google.wave.api.InvalidRequestException;

        specialinvoke $r15.<com.google.wave.api.InvalidRequestException: void <init>(java.lang.String,com.google.wave.api.OperationRequest,java.lang.Exception)>("Invalid id", r1, $r14);

        throw $r15;

        catch org.waveprotocol.wave.model.id.InvalidIdException from label1 to label2 with label3;
    }

    public org.waveprotocol.wave.model.conversation.ObservableConversationView openConversation(org.waveprotocol.wave.model.id.WaveId, org.waveprotocol.wave.model.id.WaveletId, org.waveprotocol.wave.model.wave.ParticipantId) throws com.google.wave.api.InvalidRequestException
    {
        org.waveprotocol.wave.model.id.WaveletId r1;
        java.util.HashMap $r14;
        org.waveprotocol.wave.model.wave.ParticipantId r7;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet $r10;
        java.util.Map $r4, $r5, $r13, $r15;
        org.waveprotocol.wave.model.conversation.ObservableConversationView $r9, $r12;
        boolean $z0, $z1;
        org.waveprotocol.wave.model.id.WaveletName $r2;
        org.waveprotocol.box.server.robots.util.ConversationUtil $r11;
        org.waveprotocol.wave.model.id.WaveId r0;
        org.waveprotocol.box.server.robots.OperationContextImpl r3;
        java.lang.Object $r6, $r8;

        r3 := @this: org.waveprotocol.box.server.robots.OperationContextImpl;

        r0 := @parameter0: org.waveprotocol.wave.model.id.WaveId;

        r1 := @parameter1: org.waveprotocol.wave.model.id.WaveletId;

        r7 := @parameter2: org.waveprotocol.wave.model.wave.ParticipantId;

        $r2 = staticinvoke <org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveletName of(org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.model.id.WaveletId)>(r0, r1);

        $r4 = r3.<org.waveprotocol.box.server.robots.OperationContextImpl: java.util.Map openedConversations>;

        $z0 = interfaceinvoke $r4.<java.util.Map: boolean containsKey(java.lang.Object)>($r2);

        if $z0 != 0 goto label1;

        $r13 = r3.<org.waveprotocol.box.server.robots.OperationContextImpl: java.util.Map openedConversations>;

        $r14 = staticinvoke <com.google.common.collect.Maps: java.util.HashMap newHashMap()>();

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r14);

     label1:
        $r5 = r3.<org.waveprotocol.box.server.robots.OperationContextImpl: java.util.Map openedConversations>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        $r15 = (java.util.Map) $r6;

        $z1 = interfaceinvoke $r15.<java.util.Map: boolean containsKey(java.lang.Object)>(r7);

        if $z1 != 0 goto label2;

        $r10 = virtualinvoke r3.<org.waveprotocol.box.server.robots.OperationContextImpl: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet openWavelet(org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.model.id.WaveletId,org.waveprotocol.wave.model.wave.ParticipantId)>(r0, r1, r7);

        $r11 = r3.<org.waveprotocol.box.server.robots.OperationContextImpl: org.waveprotocol.box.server.robots.util.ConversationUtil conversationUtil>;

        $r12 = virtualinvoke $r11.<org.waveprotocol.box.server.robots.util.ConversationUtil: org.waveprotocol.wave.model.conversation.ObservableConversationView buildConversation(org.waveprotocol.wave.model.wave.ObservableWavelet)>($r10);

        interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r7, $r12);

     label2:
        $r8 = interfaceinvoke $r15.<java.util.Map: java.lang.Object get(java.lang.Object)>(r7);

        $r9 = (org.waveprotocol.wave.model.conversation.ObservableConversationView) $r8;

        return $r9;
    }

    public org.waveprotocol.wave.model.conversation.ObservableConversationView openConversation(com.google.wave.api.OperationRequest, org.waveprotocol.wave.model.wave.ParticipantId) throws com.google.wave.api.InvalidRequestException
    {
        com.google.wave.api.OperationRequest r1;
        org.waveprotocol.wave.model.id.WaveletId $r10;
        org.waveprotocol.wave.model.wave.ParticipantId r12;
        org.waveprotocol.wave.model.conversation.ObservableConversationView $r13;
        java.lang.String $r4, $r9;
        org.waveprotocol.wave.model.id.IdSerialiser $r0, $r6;
        com.google.wave.api.InvalidRequestException $r15;
        com.google.wave.api.JsonRpcConstant$ParamsProperty $r2, $r7;
        org.waveprotocol.wave.model.id.WaveId $r5;
        org.waveprotocol.box.server.robots.OperationContextImpl r11;
        org.waveprotocol.wave.model.id.InvalidIdException $r14;
        java.lang.Object $r3, $r8;

        r11 := @this: org.waveprotocol.box.server.robots.OperationContextImpl;

        r1 := @parameter0: com.google.wave.api.OperationRequest;

        r12 := @parameter1: org.waveprotocol.wave.model.wave.ParticipantId;

     label1:
        $r0 = staticinvoke <com.google.wave.api.ApiIdSerializer: org.waveprotocol.wave.model.id.IdSerialiser instance()>();

        $r2 = <com.google.wave.api.JsonRpcConstant$ParamsProperty: com.google.wave.api.JsonRpcConstant$ParamsProperty WAVE_ID>;

        $r3 = staticinvoke <org.waveprotocol.box.server.robots.util.OperationUtil: java.lang.Object getRequiredParameter(com.google.wave.api.OperationRequest,com.google.wave.api.JsonRpcConstant$ParamsProperty)>(r1, $r2);

        $r4 = (java.lang.String) $r3;

        $r5 = interfaceinvoke $r0.<org.waveprotocol.wave.model.id.IdSerialiser: org.waveprotocol.wave.model.id.WaveId deserialiseWaveId(java.lang.String)>($r4);

        $r6 = staticinvoke <com.google.wave.api.ApiIdSerializer: org.waveprotocol.wave.model.id.IdSerialiser instance()>();

        $r7 = <com.google.wave.api.JsonRpcConstant$ParamsProperty: com.google.wave.api.JsonRpcConstant$ParamsProperty WAVELET_ID>;

        $r8 = staticinvoke <org.waveprotocol.box.server.robots.util.OperationUtil: java.lang.Object getRequiredParameter(com.google.wave.api.OperationRequest,com.google.wave.api.JsonRpcConstant$ParamsProperty)>(r1, $r7);

        $r9 = (java.lang.String) $r8;

        $r10 = interfaceinvoke $r6.<org.waveprotocol.wave.model.id.IdSerialiser: org.waveprotocol.wave.model.id.WaveletId deserialiseWaveletId(java.lang.String)>($r9);

        $r13 = virtualinvoke r11.<org.waveprotocol.box.server.robots.OperationContextImpl: org.waveprotocol.wave.model.conversation.ObservableConversationView openConversation(org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.model.id.WaveletId,org.waveprotocol.wave.model.wave.ParticipantId)>($r5, $r10, r12);

     label2:
        return $r13;

     label3:
        $r14 := @caughtexception;

        $r15 = new com.google.wave.api.InvalidRequestException;

        specialinvoke $r15.<com.google.wave.api.InvalidRequestException: void <init>(java.lang.String,com.google.wave.api.OperationRequest,java.lang.Exception)>("Invalid id", r1, $r14);

        throw $r15;

        catch org.waveprotocol.wave.model.id.InvalidIdException from label1 to label2 with label3;
    }

    public void putBlip(java.lang.String, org.waveprotocol.wave.model.conversation.ConversationBlip)
    {
        org.waveprotocol.wave.model.conversation.ConversationBlip r2;
        org.waveprotocol.box.server.robots.OperationContextImpl r1;
        java.util.Map $r3;
        java.lang.String r0, $r4;
        boolean $z0;

        r1 := @this: org.waveprotocol.box.server.robots.OperationContextImpl;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: org.waveprotocol.wave.model.conversation.ConversationBlip;

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("TBD_");

        if $z0 == 0 goto label1;

        $r3 = r1.<org.waveprotocol.box.server.robots.OperationContextImpl: java.util.Map tempBlipIdMap>;

        $r4 = interfaceinvoke r2.<org.waveprotocol.wave.model.conversation.ConversationBlip: java.lang.String getId()>();

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r4);

     label1:
        return;
    }

    public org.waveprotocol.wave.model.conversation.ConversationBlip getBlip(org.waveprotocol.wave.model.conversation.Conversation, java.lang.String) throws com.google.wave.api.InvalidRequestException
    {
        org.waveprotocol.box.server.robots.OperationContextImpl r9;
        org.waveprotocol.wave.model.conversation.ConversationBlip $r2;
        org.waveprotocol.wave.model.conversation.Conversation r1;
        java.util.Map $r10;
        java.lang.StringBuilder $r4, $r5, $r6, $r7;
        java.lang.Object $r11;
        java.lang.String r0, $r8, $r12;
        com.google.wave.api.InvalidRequestException $r3;
        boolean $z0;

        r9 := @this: org.waveprotocol.box.server.robots.OperationContextImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.conversation.Conversation;

        r0 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("TBD_");

        if $z0 == 0 goto label1;

        $r10 = r9.<org.waveprotocol.box.server.robots.OperationContextImpl: java.util.Map tempBlipIdMap>;

        $r11 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        $r12 = (java.lang.String) $r11;

        goto label2;

     label1:
        $r12 = r0;

     label2:
        $r2 = interfaceinvoke r1.<org.waveprotocol.wave.model.conversation.Conversation: org.waveprotocol.wave.model.conversation.ConversationBlip getBlip(java.lang.String)>($r12);

        if $r2 != null goto label3;

        $r3 = new com.google.wave.api.InvalidRequestException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Blip with id ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not exist or has been deleted");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<com.google.wave.api.InvalidRequestException: void <init>(java.lang.String)>($r8);

        throw $r3;

     label3:
        return $r2;
    }

    public org.waveprotocol.box.server.robots.util.ConversationUtil getConversationUtil()
    {
        org.waveprotocol.box.server.robots.util.ConversationUtil $r1;
        org.waveprotocol.box.server.robots.OperationContextImpl r0;

        r0 := @this: org.waveprotocol.box.server.robots.OperationContextImpl;

        $r1 = r0.<org.waveprotocol.box.server.robots.OperationContextImpl: org.waveprotocol.box.server.robots.util.ConversationUtil conversationUtil>;

        return $r1;
    }

    public java.util.Map getResponses()
    {
        org.waveprotocol.box.server.robots.OperationContextImpl r0;
        java.util.Map $r1, $r2;

        r0 := @this: org.waveprotocol.box.server.robots.OperationContextImpl;

        $r1 = r0.<org.waveprotocol.box.server.robots.OperationContextImpl: java.util.Map responses>;

        $r2 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r1);

        return $r2;
    }

    public com.google.wave.api.JsonRpcResponse getResponse(java.lang.String)
    {
        org.waveprotocol.box.server.robots.OperationContextImpl r0;
        java.util.Map $r2;
        com.google.wave.api.JsonRpcResponse $r4;
        java.lang.Object $r3;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.box.server.robots.OperationContextImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.waveprotocol.box.server.robots.OperationContextImpl: java.util.Map responses>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (com.google.wave.api.JsonRpcResponse) $r3;

        return $r4;
    }

    public boolean hasResponse(java.lang.String)
    {
        org.waveprotocol.box.server.robots.OperationContextImpl r0;
        java.util.Map $r2;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.box.server.robots.OperationContextImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.waveprotocol.box.server.robots.OperationContextImpl: java.util.Map responses>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    private void setResponse(java.lang.String, com.google.wave.api.JsonRpcResponse)
    {
        org.waveprotocol.box.server.robots.OperationContextImpl r0;
        java.util.Map $r2, $r4;
        com.google.wave.api.JsonRpcResponse r3;
        java.lang.String r1;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.box.server.robots.OperationContextImpl;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: com.google.wave.api.JsonRpcResponse;

        $r2 = r0.<org.waveprotocol.box.server.robots.OperationContextImpl: java.util.Map responses>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z1, "Overwriting an existing response");

        $r4 = r0.<org.waveprotocol.box.server.robots.OperationContextImpl: java.util.Map responses>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r3);

        return;
    }

    private org.waveprotocol.box.server.frontend.CommittedWaveletSnapshot getWaveletSnapshot(org.waveprotocol.wave.model.id.WaveletName, org.waveprotocol.wave.model.wave.ParticipantId)
    {
        org.waveprotocol.box.server.waveserver.WaveletProvider $r3, $r4;
        org.waveprotocol.wave.model.wave.ParticipantId r2;
        org.waveprotocol.wave.util.logging.Log $r7, $r15;
        java.lang.String $r12, $r18;
        boolean $z0;
        org.waveprotocol.wave.model.id.WaveletName r1;
        org.waveprotocol.box.server.robots.OperationContextImpl r0;
        org.waveprotocol.box.server.frontend.CommittedWaveletSnapshot $r5;
        java.lang.StringBuilder $r6, $r8, $r9, $r10, $r11, $r14, $r16, $r17;
        org.waveprotocol.box.server.waveserver.WaveServerException $r13;

        r0 := @this: org.waveprotocol.box.server.robots.OperationContextImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        r2 := @parameter1: org.waveprotocol.wave.model.wave.ParticipantId;

     label1:
        $r3 = r0.<org.waveprotocol.box.server.robots.OperationContextImpl: org.waveprotocol.box.server.waveserver.WaveletProvider waveletProvider>;

        $z0 = interfaceinvoke $r3.<org.waveprotocol.box.server.waveserver.WaveletProvider: boolean checkAccessPermission(org.waveprotocol.wave.model.id.WaveletName,org.waveprotocol.wave.model.wave.ParticipantId)>(r1, r2);

        if $z0 != 0 goto label3;

        $r7 = <org.waveprotocol.box.server.robots.OperationContextImpl: org.waveprotocol.wave.util.logging.Log LOG>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" tried to open ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" which it isn\'t participating in");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<org.waveprotocol.wave.util.logging.Log: void severe(java.lang.String)>($r12);

     label2:
        return null;

     label3:
        $r4 = r0.<org.waveprotocol.box.server.robots.OperationContextImpl: org.waveprotocol.box.server.waveserver.WaveletProvider waveletProvider>;

        $r5 = interfaceinvoke $r4.<org.waveprotocol.box.server.waveserver.WaveletProvider: org.waveprotocol.box.server.frontend.CommittedWaveletSnapshot getSnapshot(org.waveprotocol.wave.model.id.WaveletName)>(r1);

     label4:
        return $r5;

     label5:
        $r13 := @caughtexception;

        $r15 = <org.waveprotocol.box.server.robots.OperationContextImpl: org.waveprotocol.wave.util.logging.Log LOG>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot access wavelet ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r15.<org.waveprotocol.wave.util.logging.Log: void severe(java.lang.String,java.lang.Throwable)>($r18, $r13);

        return null;

        catch org.waveprotocol.box.server.waveserver.WaveServerException from label1 to label2 with label5;
        catch org.waveprotocol.box.server.waveserver.WaveServerException from label3 to label4 with label5;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl$Factory $r3;
        org.waveprotocol.wave.model.wave.data.DocumentFactory $r2;
        org.waveprotocol.wave.util.logging.Log $r0;
        org.waveprotocol.wave.model.schema.SchemaCollection $r1;

        $r0 = staticinvoke <org.waveprotocol.wave.util.logging.Log: org.waveprotocol.wave.util.logging.Log get(java.lang.Class)>(class "Lorg/waveprotocol/box/server/robots/OperationContextImpl;");

        <org.waveprotocol.box.server.robots.OperationContextImpl: org.waveprotocol.wave.util.logging.Log LOG> = $r0;

        $r1 = staticinvoke <org.waveprotocol.wave.model.schema.SchemaCollection: org.waveprotocol.wave.model.schema.SchemaCollection empty()>();

        $r2 = staticinvoke <org.waveprotocol.wave.model.wave.data.impl.ObservablePluggableMutableDocument: org.waveprotocol.wave.model.wave.data.DocumentFactory createFactory(org.waveprotocol.wave.model.schema.SchemaProvider)>($r1);

        $r3 = staticinvoke <org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl$Factory: org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl$Factory create(org.waveprotocol.wave.model.wave.data.DocumentFactory)>($r2);

        <org.waveprotocol.box.server.robots.OperationContextImpl: org.waveprotocol.wave.model.wave.data.ObservableWaveletData$Factory FACTORY> = $r3;

        return;
    }
}
