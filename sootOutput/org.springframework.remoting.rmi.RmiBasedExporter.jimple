public abstract class org.springframework.remoting.rmi.RmiBasedExporter extends org.springframework.remoting.support.RemoteInvocationBasedExporter
{

    public void <init>()
    {
        org.springframework.remoting.rmi.RmiBasedExporter r0;

        r0 := @this: org.springframework.remoting.rmi.RmiBasedExporter;

        specialinvoke r0.<org.springframework.remoting.support.RemoteInvocationBasedExporter: void <init>()>();

        return;
    }

    protected java.rmi.Remote getObjectToExport()
    {
        java.lang.String $r10;
        boolean $z0, $z1, $z2;
        org.springframework.remoting.rmi.RmiInvocationWrapper $r3;
        java.rmi.Remote $r13;
        java.lang.Object $r1, $r4, $r7, $r12;
        org.apache.commons.logging.Log $r2, $r6;
        java.lang.StringBuilder $r5, $r8, $r9;
        java.lang.Class $r11, $r14, $r15;
        org.springframework.remoting.rmi.RmiBasedExporter r0;

        r0 := @this: org.springframework.remoting.rmi.RmiBasedExporter;

        $r1 = virtualinvoke r0.<org.springframework.remoting.rmi.RmiBasedExporter: java.lang.Object getService()>();

        $z0 = $r1 instanceof java.rmi.Remote;

        if $z0 == 0 goto label2;

        $r11 = virtualinvoke r0.<org.springframework.remoting.rmi.RmiBasedExporter: java.lang.Class getServiceInterface()>();

        if $r11 == null goto label1;

        $r14 = class "Ljava/rmi/Remote;";

        $r15 = virtualinvoke r0.<org.springframework.remoting.rmi.RmiBasedExporter: java.lang.Class getServiceInterface()>();

        $z2 = virtualinvoke $r14.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r15);

        if $z2 == 0 goto label2;

     label1:
        $r12 = virtualinvoke r0.<org.springframework.remoting.rmi.RmiBasedExporter: java.lang.Object getService()>();

        $r13 = (java.rmi.Remote) $r12;

        return $r13;

     label2:
        $r2 = r0.<org.springframework.remoting.rmi.RmiBasedExporter: org.apache.commons.logging.Log logger>;

        $z1 = interfaceinvoke $r2.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z1 == 0 goto label3;

        $r6 = r0.<org.springframework.remoting.rmi.RmiBasedExporter: org.apache.commons.logging.Log logger>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("RMI service [");

        $r7 = virtualinvoke r0.<org.springframework.remoting.rmi.RmiBasedExporter: java.lang.Object getService()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] is an RMI invoker");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r6.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r10);

     label3:
        $r3 = new org.springframework.remoting.rmi.RmiInvocationWrapper;

        $r4 = virtualinvoke r0.<org.springframework.remoting.rmi.RmiBasedExporter: java.lang.Object getProxyForService()>();

        specialinvoke $r3.<org.springframework.remoting.rmi.RmiInvocationWrapper: void <init>(java.lang.Object,org.springframework.remoting.rmi.RmiBasedExporter)>($r4, r0);

        return $r3;
    }

    protected java.lang.Object invoke(org.springframework.remoting.support.RemoteInvocation, java.lang.Object) throws java.lang.NoSuchMethodException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException
    {
        org.springframework.remoting.support.RemoteInvocation r1;
        java.lang.Object r2, $r3;
        org.springframework.remoting.rmi.RmiBasedExporter r0;

        r0 := @this: org.springframework.remoting.rmi.RmiBasedExporter;

        r1 := @parameter0: org.springframework.remoting.support.RemoteInvocation;

        r2 := @parameter1: java.lang.Object;

        $r3 = specialinvoke r0.<org.springframework.remoting.support.RemoteInvocationBasedExporter: java.lang.Object invoke(org.springframework.remoting.support.RemoteInvocation,java.lang.Object)>(r1, r2);

        return $r3;
    }
}
