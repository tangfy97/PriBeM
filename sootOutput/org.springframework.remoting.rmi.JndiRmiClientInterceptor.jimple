public class org.springframework.remoting.rmi.JndiRmiClientInterceptor extends org.springframework.jndi.JndiObjectLocator implements org.aopalliance.intercept.MethodInterceptor, org.springframework.beans.factory.InitializingBean
{
    private java.lang.Class serviceInterface;
    private org.springframework.remoting.support.RemoteInvocationFactory remoteInvocationFactory;
    private boolean lookupStubOnStartup;
    private boolean cacheStub;
    private boolean refreshStubOnConnectFailure;
    private java.lang.Object cachedStub;
    private final java.lang.Object stubMonitor;

    public void <init>()
    {
        org.springframework.remoting.support.DefaultRemoteInvocationFactory $r1;
        org.springframework.remoting.rmi.JndiRmiClientInterceptor r0;
        java.lang.Object $r2;

        r0 := @this: org.springframework.remoting.rmi.JndiRmiClientInterceptor;

        specialinvoke r0.<org.springframework.jndi.JndiObjectLocator: void <init>()>();

        $r1 = new org.springframework.remoting.support.DefaultRemoteInvocationFactory;

        specialinvoke $r1.<org.springframework.remoting.support.DefaultRemoteInvocationFactory: void <init>()>();

        r0.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: org.springframework.remoting.support.RemoteInvocationFactory remoteInvocationFactory> = $r1;

        r0.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: boolean lookupStubOnStartup> = 1;

        r0.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: boolean cacheStub> = 1;

        r0.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: boolean refreshStubOnConnectFailure> = 0;

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: java.lang.Object stubMonitor> = $r2;

        return;
    }

    public void setServiceInterface(java.lang.Class)
    {
        java.lang.Class r0;
        org.springframework.remoting.rmi.JndiRmiClientInterceptor r1;
        java.lang.IllegalArgumentException $r2;
        boolean $z0;

        r1 := @this: org.springframework.remoting.rmi.JndiRmiClientInterceptor;

        r0 := @parameter0: java.lang.Class;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isInterface()>();

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'serviceInterface\' must be an interface");

        throw $r2;

     label1:
        r1.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: java.lang.Class serviceInterface> = r0;

        return;
    }

    public java.lang.Class getServiceInterface()
    {
        org.springframework.remoting.rmi.JndiRmiClientInterceptor r0;
        java.lang.Class $r1;

        r0 := @this: org.springframework.remoting.rmi.JndiRmiClientInterceptor;

        $r1 = r0.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: java.lang.Class serviceInterface>;

        return $r1;
    }

    public void setRemoteInvocationFactory(org.springframework.remoting.support.RemoteInvocationFactory)
    {
        org.springframework.remoting.rmi.JndiRmiClientInterceptor r0;
        org.springframework.remoting.support.RemoteInvocationFactory r1;

        r0 := @this: org.springframework.remoting.rmi.JndiRmiClientInterceptor;

        r1 := @parameter0: org.springframework.remoting.support.RemoteInvocationFactory;

        r0.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: org.springframework.remoting.support.RemoteInvocationFactory remoteInvocationFactory> = r1;

        return;
    }

    public org.springframework.remoting.support.RemoteInvocationFactory getRemoteInvocationFactory()
    {
        org.springframework.remoting.rmi.JndiRmiClientInterceptor r0;
        org.springframework.remoting.support.RemoteInvocationFactory $r1;

        r0 := @this: org.springframework.remoting.rmi.JndiRmiClientInterceptor;

        $r1 = r0.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: org.springframework.remoting.support.RemoteInvocationFactory remoteInvocationFactory>;

        return $r1;
    }

    public void setLookupStubOnStartup(boolean)
    {
        org.springframework.remoting.rmi.JndiRmiClientInterceptor r0;
        boolean z0;

        r0 := @this: org.springframework.remoting.rmi.JndiRmiClientInterceptor;

        z0 := @parameter0: boolean;

        r0.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: boolean lookupStubOnStartup> = z0;

        return;
    }

    public void setCacheStub(boolean)
    {
        org.springframework.remoting.rmi.JndiRmiClientInterceptor r0;
        boolean z0;

        r0 := @this: org.springframework.remoting.rmi.JndiRmiClientInterceptor;

        z0 := @parameter0: boolean;

        r0.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: boolean cacheStub> = z0;

        return;
    }

    public void setRefreshStubOnConnectFailure(boolean)
    {
        org.springframework.remoting.rmi.JndiRmiClientInterceptor r0;
        boolean z0;

        r0 := @this: org.springframework.remoting.rmi.JndiRmiClientInterceptor;

        z0 := @parameter0: boolean;

        r0.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: boolean refreshStubOnConnectFailure> = z0;

        return;
    }

    public void afterPropertiesSet() throws javax.naming.NamingException
    {
        org.springframework.remoting.rmi.JndiRmiClientInterceptor r0;

        r0 := @this: org.springframework.remoting.rmi.JndiRmiClientInterceptor;

        specialinvoke r0.<org.springframework.jndi.JndiObjectLocator: void afterPropertiesSet()>();

        virtualinvoke r0.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: void prepare()>();

        return;
    }

    public void prepare() throws org.springframework.remoting.RemoteLookupFailureException
    {
        java.lang.String $r8, $r11, $r16, $r19, $r22, $r23;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.springframework.remoting.rmi.JndiRmiClientInterceptor r0;
        java.lang.Object $r1;
        org.apache.commons.logging.Log $r2, $r6, $r18;
        java.lang.Class $r3, $r4, $r7;
        java.lang.StringBuilder $r5, $r9, $r10, $r12, $r13, $r14, $r15, $r17, $r20, $r21;

        r0 := @this: org.springframework.remoting.rmi.JndiRmiClientInterceptor;

        $z0 = r0.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: boolean lookupStubOnStartup>;

        if $z0 == 0 goto label5;

        $r1 = virtualinvoke r0.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: java.lang.Object lookupStub()>();

        $r2 = r0.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: org.apache.commons.logging.Log logger>;

        $z1 = interfaceinvoke $r2.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z1 == 0 goto label4;

        $z2 = $r1 instanceof org.springframework.remoting.rmi.RmiInvocationHandler;

        if $z2 == 0 goto label1;

        $r18 = r0.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: org.apache.commons.logging.Log logger>;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>("JNDI RMI object [");

        $r19 = virtualinvoke r0.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: java.lang.String getJndiName()>();

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] is an RMI invoker");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r18.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r22);

        goto label4;

     label1:
        $r3 = virtualinvoke r0.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: java.lang.Class getServiceInterface()>();

        if $r3 == null goto label4;

        $r4 = virtualinvoke r0.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: java.lang.Class getServiceInterface()>();

        $z3 = virtualinvoke $r4.<java.lang.Class: boolean isInstance(java.lang.Object)>($r1);

        $r6 = r0.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: org.apache.commons.logging.Log logger>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Using service interface [");

        $r7 = virtualinvoke r0.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: java.lang.Class getServiceInterface()>();

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] for JNDI RMI object [");

        $r11 = virtualinvoke r0.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: java.lang.String getJndiName()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] - ");

        if $z3 != 0 goto label2;

        $r23 = "not ";

        goto label3;

     label2:
        $r23 = "";

     label3:
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("directly implemented");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r6.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r16);

     label4:
        $z4 = r0.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: boolean cacheStub>;

        if $z4 == 0 goto label5;

        r0.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: java.lang.Object cachedStub> = $r1;

     label5:
        return;
    }

    protected java.lang.Object lookupStub() throws org.springframework.remoting.RemoteLookupFailureException
    {
        javax.naming.NamingException $r4;
        java.lang.ClassCastException $r11;
        org.springframework.remoting.RemoteLookupFailureException $r5, $r12;
        java.lang.String $r7, $r10, $r15, $r18;
        boolean $z0;
        org.springframework.remoting.rmi.JndiRmiClientInterceptor r0;
        java.lang.Object $r1, r19;
        java.lang.Class $r2, $r3, $r14;
        java.lang.StringBuilder $r6, $r8, $r9, $r13, $r16, $r17;

        r0 := @this: org.springframework.remoting.rmi.JndiRmiClientInterceptor;

     label1:
        $r1 = virtualinvoke r0.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: java.lang.Object lookup()>();

        r19 = $r1;

        $r2 = virtualinvoke r0.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: java.lang.Class getServiceInterface()>();

        if $r2 == null goto label5;

        $z0 = $r1 instanceof org.springframework.remoting.rmi.RmiInvocationHandler;

        if $z0 != 0 goto label5;

     label2:
        $r3 = virtualinvoke r0.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: java.lang.Class getServiceInterface()>();

        r19 = staticinvoke <javax.rmi.PortableRemoteObject: java.lang.Object narrow(java.lang.Object,java.lang.Class)>($r1, $r3);

     label3:
        goto label5;

     label4:
        $r11 := @caughtexception;

        $r12 = new org.springframework.remoting.RemoteLookupFailureException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not narrow RMI stub to service interface [");

        $r14 = virtualinvoke r0.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: java.lang.Class getServiceInterface()>();

        $r15 = virtualinvoke $r14.<java.lang.Class: java.lang.String getName()>();

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<org.springframework.remoting.RemoteLookupFailureException: void <init>(java.lang.String,java.lang.Throwable)>($r18, $r11);

        throw $r12;

     label5:
        return r19;

     label6:
        $r4 := @caughtexception;

        $r5 = new org.springframework.remoting.RemoteLookupFailureException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("JNDI lookup for RMI service [");

        $r7 = virtualinvoke r0.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: java.lang.String getJndiName()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] failed");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<org.springframework.remoting.RemoteLookupFailureException: void <init>(java.lang.String,java.lang.Throwable)>($r10, $r4);

        throw $r5;

        catch java.lang.ClassCastException from label2 to label3 with label4;
        catch javax.naming.NamingException from label1 to label5 with label6;
    }

    protected java.lang.Object getStub() throws javax.naming.NamingException, org.springframework.remoting.RemoteLookupFailureException
    {
        java.lang.Throwable $r6;
        org.springframework.remoting.rmi.JndiRmiClientInterceptor r0;
        java.lang.Object $r1, $r2, $r3, $r4, $r5, $r7;
        boolean $z0, $z1, $z2;

        r0 := @this: org.springframework.remoting.rmi.JndiRmiClientInterceptor;

        $z0 = r0.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: boolean cacheStub>;

        if $z0 == 0 goto label1;

        $z1 = r0.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: boolean lookupStubOnStartup>;

        if $z1 == 0 goto label4;

        $z2 = r0.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: boolean refreshStubOnConnectFailure>;

        if $z2 != 0 goto label4;

     label1:
        $r1 = r0.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: java.lang.Object cachedStub>;

        if $r1 == null goto label2;

        $r7 = r0.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: java.lang.Object cachedStub>;

        goto label3;

     label2:
        $r7 = virtualinvoke r0.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: java.lang.Object lookupStub()>();

     label3:
        return $r7;

     label4:
        $r2 = r0.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: java.lang.Object stubMonitor>;

        entermonitor $r2;

     label5:
        $r3 = r0.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: java.lang.Object cachedStub>;

        if $r3 != null goto label6;

        $r5 = virtualinvoke r0.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: java.lang.Object lookupStub()>();

        r0.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: java.lang.Object cachedStub> = $r5;

     label6:
        $r4 = r0.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: java.lang.Object cachedStub>;

        exitmonitor $r2;

     label7:
        return $r4;

     label8:
        $r6 := @caughtexception;

        exitmonitor $r2;

     label9:
        throw $r6;

        catch java.lang.Throwable from label5 to label7 with label8;
        catch java.lang.Throwable from label8 to label9 with label8;
    }

    public java.lang.Object invoke(org.aopalliance.intercept.MethodInvocation) throws java.lang.Throwable
    {
        org.omg.CORBA.SystemException $r4;
        javax.naming.NamingException $r10;
        org.aopalliance.intercept.MethodInvocation r2;
        org.springframework.remoting.RemoteLookupFailureException $r11;
        org.springframework.remoting.RemoteConnectFailureException $r8;
        java.lang.String $r13, $r16;
        boolean $z0, $z1;
        org.springframework.remoting.rmi.JndiRmiClientInterceptor r0;
        java.rmi.RemoteException $r6;
        java.lang.Object $r1, $r3, $r5, $r7, $r9;
        java.lang.StringBuilder $r12, $r14, $r15;

        r0 := @this: org.springframework.remoting.rmi.JndiRmiClientInterceptor;

        r2 := @parameter0: org.aopalliance.intercept.MethodInvocation;

     label01:
        $r1 = virtualinvoke r0.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: java.lang.Object getStub()>();

     label02:
        goto label04;

     label03:
        $r10 := @caughtexception;

        $r11 = new org.springframework.remoting.RemoteLookupFailureException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("JNDI lookup for RMI service [");

        $r13 = virtualinvoke r0.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: java.lang.String getJndiName()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] failed");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<org.springframework.remoting.RemoteLookupFailureException: void <init>(java.lang.String,java.lang.Throwable)>($r16, $r10);

        throw $r11;

     label04:
        $r3 = virtualinvoke r0.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: java.lang.Object doInvoke(org.aopalliance.intercept.MethodInvocation,java.lang.Object)>(r2, $r1);

     label05:
        return $r3;

     label06:
        $r8 := @caughtexception;

        $r9 = specialinvoke r0.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: java.lang.Object handleRemoteConnectFailure(org.aopalliance.intercept.MethodInvocation,java.lang.Exception)>(r2, $r8);

        return $r9;

     label07:
        $r6 := @caughtexception;

        $z1 = virtualinvoke r0.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: boolean isConnectFailure(java.rmi.RemoteException)>($r6);

        if $z1 == 0 goto label08;

        $r7 = specialinvoke r0.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: java.lang.Object handleRemoteConnectFailure(org.aopalliance.intercept.MethodInvocation,java.lang.Exception)>(r2, $r6);

        return $r7;

     label08:
        throw $r6;

     label09:
        $r4 := @caughtexception;

        $z0 = virtualinvoke r0.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: boolean isConnectFailure(org.omg.CORBA.SystemException)>($r4);

        if $z0 == 0 goto label10;

        $r5 = specialinvoke r0.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: java.lang.Object handleRemoteConnectFailure(org.aopalliance.intercept.MethodInvocation,java.lang.Exception)>(r2, $r4);

        return $r5;

     label10:
        throw $r4;

        catch javax.naming.NamingException from label01 to label02 with label03;
        catch org.springframework.remoting.RemoteConnectFailureException from label04 to label05 with label06;
        catch java.rmi.RemoteException from label04 to label05 with label07;
        catch org.omg.CORBA.SystemException from label04 to label05 with label09;
    }

    protected boolean isConnectFailure(java.rmi.RemoteException)
    {
        org.springframework.remoting.rmi.JndiRmiClientInterceptor r1;
        java.rmi.RemoteException r0;
        boolean $z0;

        r1 := @this: org.springframework.remoting.rmi.JndiRmiClientInterceptor;

        r0 := @parameter0: java.rmi.RemoteException;

        $z0 = staticinvoke <org.springframework.remoting.rmi.RmiClientInterceptorUtils: boolean isConnectFailure(java.rmi.RemoteException)>(r0);

        return $z0;
    }

    protected boolean isConnectFailure(org.omg.CORBA.SystemException)
    {
        org.springframework.remoting.rmi.JndiRmiClientInterceptor r1;
        org.omg.CORBA.SystemException r0;
        boolean $z0;

        r1 := @this: org.springframework.remoting.rmi.JndiRmiClientInterceptor;

        r0 := @parameter0: org.omg.CORBA.SystemException;

        $z0 = r0 instanceof org.omg.CORBA.OBJECT_NOT_EXIST;

        return $z0;
    }

    private java.lang.Object handleRemoteConnectFailure(org.aopalliance.intercept.MethodInvocation, java.lang.Exception) throws java.lang.Throwable
    {
        org.aopalliance.intercept.MethodInvocation r4;
        java.lang.String $r7, $r10, $r13, $r16;
        boolean $z0, $z1, $z2;
        org.springframework.remoting.rmi.JndiRmiClientInterceptor r0;
        java.lang.Exception r1;
        org.apache.commons.logging.Log $r2, $r3, $r6, $r12;
        java.lang.StringBuilder $r5, $r8, $r9, $r11, $r14, $r15;
        java.lang.Object $r17;

        r0 := @this: org.springframework.remoting.rmi.JndiRmiClientInterceptor;

        r4 := @parameter0: org.aopalliance.intercept.MethodInvocation;

        r1 := @parameter1: java.lang.Exception;

        $z0 = r0.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: boolean refreshStubOnConnectFailure>;

        if $z0 == 0 goto label3;

        $r2 = r0.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: org.apache.commons.logging.Log logger>;

        $z1 = interfaceinvoke $r2.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z1 == 0 goto label1;

        $r12 = r0.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: org.apache.commons.logging.Log logger>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not connect to RMI service [");

        $r13 = virtualinvoke r0.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: java.lang.String getJndiName()>();

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] - retrying");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r12.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>($r16, r1);

        goto label2;

     label1:
        $r3 = r0.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: org.apache.commons.logging.Log logger>;

        $z2 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isWarnEnabled()>();

        if $z2 == 0 goto label2;

        $r6 = r0.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: org.apache.commons.logging.Log logger>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not connect to RMI service [");

        $r7 = virtualinvoke r0.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: java.lang.String getJndiName()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] - retrying");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r6.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r10);

     label2:
        $r17 = virtualinvoke r0.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: java.lang.Object refreshAndRetry(org.aopalliance.intercept.MethodInvocation)>(r4);

        return $r17;

     label3:
        throw r1;
    }

    protected java.lang.Object refreshAndRetry(org.aopalliance.intercept.MethodInvocation) throws java.lang.Throwable
    {
        java.lang.Throwable $r5;
        org.aopalliance.intercept.MethodInvocation r3;
        org.springframework.remoting.rmi.JndiRmiClientInterceptor r0;
        java.lang.Object $r1, $r2, $r4;
        boolean $z0;

        r0 := @this: org.springframework.remoting.rmi.JndiRmiClientInterceptor;

        r3 := @parameter0: org.aopalliance.intercept.MethodInvocation;

        $r1 = r0.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: java.lang.Object stubMonitor>;

        entermonitor $r1;

     label1:
        r0.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: java.lang.Object cachedStub> = null;

        $r2 = virtualinvoke r0.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: java.lang.Object lookupStub()>();

        $z0 = r0.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: boolean cacheStub>;

        if $z0 == 0 goto label2;

        r0.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: java.lang.Object cachedStub> = $r2;

     label2:
        exitmonitor $r1;

     label3:
        goto label6;

     label4:
        $r5 := @caughtexception;

        exitmonitor $r1;

     label5:
        throw $r5;

     label6:
        $r4 = virtualinvoke r0.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: java.lang.Object doInvoke(org.aopalliance.intercept.MethodInvocation,java.lang.Object)>(r3, $r2);

        return $r4;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    protected java.lang.Object doInvoke(org.aopalliance.intercept.MethodInvocation, java.lang.Object) throws java.lang.Throwable
    {
        org.omg.CORBA.SystemException $r8, $r26;
        org.aopalliance.intercept.MethodInvocation r1;
        java.lang.reflect.Method $r9, $r12, $r17, $r27, $r30;
        boolean $z0, $z1, $z2;
        org.springframework.remoting.RemoteInvocationFailureException $r15;
        org.springframework.remoting.rmi.JndiRmiClientInterceptor r3;
        java.lang.Exception $r10, $r13, $r28, $r31;
        java.lang.reflect.InvocationTargetException $r6, $r24;
        java.rmi.RemoteException $r11, $r29;
        java.lang.StringBuilder $r16, $r18, $r19, $r21, $r22;
        java.lang.Throwable $r7, $r14, $r25;
        java.lang.String $r20, $r23;
        org.springframework.remoting.rmi.RmiInvocationHandler $r4;
        java.lang.Object r0, $r2, $r5;

        r3 := @this: org.springframework.remoting.rmi.JndiRmiClientInterceptor;

        r1 := @parameter0: org.aopalliance.intercept.MethodInvocation;

        r0 := @parameter1: java.lang.Object;

        $z0 = r0 instanceof org.springframework.remoting.rmi.RmiInvocationHandler;

        if $z0 == 0 goto label07;

     label01:
        $r4 = (org.springframework.remoting.rmi.RmiInvocationHandler) r0;

        $r5 = virtualinvoke r3.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: java.lang.Object doInvoke(org.aopalliance.intercept.MethodInvocation,org.springframework.remoting.rmi.RmiInvocationHandler)>(r1, $r4);

     label02:
        return $r5;

     label03:
        $r29 := @caughtexception;

        $r30 = interfaceinvoke r1.<org.aopalliance.intercept.MethodInvocation: java.lang.reflect.Method getMethod()>();

        $r31 = specialinvoke r3.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: java.lang.Exception convertRmiAccessException(java.rmi.RemoteException,java.lang.reflect.Method)>($r29, $r30);

        throw $r31;

     label04:
        $r26 := @caughtexception;

        $r27 = interfaceinvoke r1.<org.aopalliance.intercept.MethodInvocation: java.lang.reflect.Method getMethod()>();

        $r28 = specialinvoke r3.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: java.lang.Exception convertCorbaAccessException(org.omg.CORBA.SystemException,java.lang.reflect.Method)>($r26, $r27);

        throw $r28;

     label05:
        $r24 := @caughtexception;

        $r25 = virtualinvoke $r24.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        throw $r25;

     label06:
        $r14 := @caughtexception;

        $r15 = new org.springframework.remoting.RemoteInvocationFailureException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>(java.lang.String)>("Invocation of method [");

        $r17 = interfaceinvoke r1.<org.aopalliance.intercept.MethodInvocation: java.lang.reflect.Method getMethod()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] failed in RMI service [");

        $r20 = virtualinvoke r3.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: java.lang.String getJndiName()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<org.springframework.remoting.RemoteInvocationFailureException: void <init>(java.lang.String,java.lang.Throwable)>($r23, $r14);

        throw $r15;

     label07:
        $r2 = staticinvoke <org.springframework.remoting.rmi.RmiClientInterceptorUtils: java.lang.Object invokeRemoteMethod(org.aopalliance.intercept.MethodInvocation,java.lang.Object)>(r1, r0);

     label08:
        return $r2;

     label09:
        $r6 := @caughtexception;

        $r7 = virtualinvoke $r6.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $z1 = $r7 instanceof java.rmi.RemoteException;

        if $z1 == 0 goto label10;

        $r11 = (java.rmi.RemoteException) $r7;

        $r12 = interfaceinvoke r1.<org.aopalliance.intercept.MethodInvocation: java.lang.reflect.Method getMethod()>();

        $r13 = specialinvoke r3.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: java.lang.Exception convertRmiAccessException(java.rmi.RemoteException,java.lang.reflect.Method)>($r11, $r12);

        throw $r13;

     label10:
        $z2 = $r7 instanceof org.omg.CORBA.SystemException;

        if $z2 == 0 goto label11;

        $r8 = (org.omg.CORBA.SystemException) $r7;

        $r9 = interfaceinvoke r1.<org.aopalliance.intercept.MethodInvocation: java.lang.reflect.Method getMethod()>();

        $r10 = specialinvoke r3.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: java.lang.Exception convertCorbaAccessException(org.omg.CORBA.SystemException,java.lang.reflect.Method)>($r8, $r9);

        throw $r10;

     label11:
        throw $r7;

        catch java.rmi.RemoteException from label01 to label02 with label03;
        catch org.omg.CORBA.SystemException from label01 to label02 with label04;
        catch java.lang.reflect.InvocationTargetException from label01 to label02 with label05;
        catch java.lang.Throwable from label01 to label02 with label06;
        catch java.lang.reflect.InvocationTargetException from label07 to label08 with label09;
    }

    protected java.lang.Object doInvoke(org.aopalliance.intercept.MethodInvocation, org.springframework.remoting.rmi.RmiInvocationHandler) throws java.rmi.RemoteException, java.lang.NoSuchMethodException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException
    {
        org.springframework.remoting.rmi.RmiInvocationHandler r2;
        org.springframework.remoting.support.RemoteInvocation $r4;
        org.springframework.remoting.rmi.JndiRmiClientInterceptor r3;
        org.aopalliance.intercept.MethodInvocation r0;
        java.lang.Object $r5;
        java.lang.StringBuilder $r6, $r8, $r9;
        java.lang.String $r7, $r10;
        java.lang.reflect.Method $r1;
        boolean $z0;

        r3 := @this: org.springframework.remoting.rmi.JndiRmiClientInterceptor;

        r0 := @parameter0: org.aopalliance.intercept.MethodInvocation;

        r2 := @parameter1: org.springframework.remoting.rmi.RmiInvocationHandler;

        $r1 = interfaceinvoke r0.<org.aopalliance.intercept.MethodInvocation: java.lang.reflect.Method getMethod()>();

        $z0 = staticinvoke <org.springframework.aop.support.AopUtils: boolean isToStringMethod(java.lang.reflect.Method)>($r1);

        if $z0 == 0 goto label1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("RMI invoker proxy for service URL [");

        $r7 = virtualinvoke r3.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: java.lang.String getJndiName()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;

     label1:
        $r4 = virtualinvoke r3.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: org.springframework.remoting.support.RemoteInvocation createRemoteInvocation(org.aopalliance.intercept.MethodInvocation)>(r0);

        $r5 = interfaceinvoke r2.<org.springframework.remoting.rmi.RmiInvocationHandler: java.lang.Object invoke(org.springframework.remoting.support.RemoteInvocation)>($r4);

        return $r5;
    }

    protected org.springframework.remoting.support.RemoteInvocation createRemoteInvocation(org.aopalliance.intercept.MethodInvocation)
    {
        org.springframework.remoting.support.RemoteInvocationFactory $r1;
        org.aopalliance.intercept.MethodInvocation r2;
        org.springframework.remoting.support.RemoteInvocation $r3;
        org.springframework.remoting.rmi.JndiRmiClientInterceptor r0;

        r0 := @this: org.springframework.remoting.rmi.JndiRmiClientInterceptor;

        r2 := @parameter0: org.aopalliance.intercept.MethodInvocation;

        $r1 = virtualinvoke r0.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: org.springframework.remoting.support.RemoteInvocationFactory getRemoteInvocationFactory()>();

        $r3 = interfaceinvoke $r1.<org.springframework.remoting.support.RemoteInvocationFactory: org.springframework.remoting.support.RemoteInvocation createRemoteInvocation(org.aopalliance.intercept.MethodInvocation)>(r2);

        return $r3;
    }

    private java.lang.Exception convertRmiAccessException(java.rmi.RemoteException, java.lang.reflect.Method)
    {
        org.springframework.remoting.rmi.JndiRmiClientInterceptor r2;
        java.lang.String $r3;
        java.lang.reflect.Method r0;
        java.lang.Exception $r4;
        java.rmi.RemoteException r1;
        boolean $z0;

        r2 := @this: org.springframework.remoting.rmi.JndiRmiClientInterceptor;

        r1 := @parameter0: java.rmi.RemoteException;

        r0 := @parameter1: java.lang.reflect.Method;

        $z0 = virtualinvoke r2.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: boolean isConnectFailure(java.rmi.RemoteException)>(r1);

        $r3 = virtualinvoke r2.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: java.lang.String getJndiName()>();

        $r4 = staticinvoke <org.springframework.remoting.rmi.RmiClientInterceptorUtils: java.lang.Exception convertRmiAccessException(java.lang.reflect.Method,java.rmi.RemoteException,boolean,java.lang.String)>(r0, r1, $z0, $r3);

        return $r4;
    }

    private java.lang.Exception convertCorbaAccessException(org.omg.CORBA.SystemException, java.lang.reflect.Method)
    {
        org.omg.CORBA.SystemException r2;
        org.springframework.remoting.RemoteAccessException $r3;
        java.lang.String $r5, $r8, $r11, $r14, $r17, $r20;
        org.springframework.remoting.RemoteConnectFailureException $r9;
        java.lang.reflect.Method r0;
        boolean $z0, $z1;
        org.springframework.remoting.rmi.JndiRmiClientInterceptor r1;
        java.rmi.RemoteException $r15;
        java.lang.StringBuilder $r4, $r6, $r7, $r10, $r12, $r13, $r16, $r18, $r19;

        r1 := @this: org.springframework.remoting.rmi.JndiRmiClientInterceptor;

        r2 := @parameter0: org.omg.CORBA.SystemException;

        r0 := @parameter1: java.lang.reflect.Method;

        $z0 = staticinvoke <org.springframework.util.ReflectionUtils: boolean declaresException(java.lang.reflect.Method,java.lang.Class)>(r0, class "Ljava/rmi/RemoteException;");

        if $z0 == 0 goto label1;

        $r15 = new java.rmi.RemoteException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>(java.lang.String)>("Failed to access CORBA service [");

        $r17 = virtualinvoke r1.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: java.lang.String getJndiName()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.rmi.RemoteException: void <init>(java.lang.String,java.lang.Throwable)>($r20, r2);

        return $r15;

     label1:
        $z1 = virtualinvoke r1.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: boolean isConnectFailure(org.omg.CORBA.SystemException)>(r2);

        if $z1 == 0 goto label2;

        $r9 = new org.springframework.remoting.RemoteConnectFailureException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not connect to CORBA service [");

        $r11 = virtualinvoke r1.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: java.lang.String getJndiName()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<org.springframework.remoting.RemoteConnectFailureException: void <init>(java.lang.String,java.lang.Throwable)>($r14, r2);

        return $r9;

     label2:
        $r3 = new org.springframework.remoting.RemoteAccessException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not access CORBA service [");

        $r5 = virtualinvoke r1.<org.springframework.remoting.rmi.JndiRmiClientInterceptor: java.lang.String getJndiName()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<org.springframework.remoting.RemoteAccessException: void <init>(java.lang.String,java.lang.Throwable)>($r8, r2);

        return $r3;
    }
}
