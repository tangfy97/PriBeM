public class org.bson.io.PoolOutputBuffer extends org.bson.io.OutputBuffer
{
    public static final int BUF_SIZE;
    final byte[] _mine;
    final java.util.List _fromPool;
    private final org.bson.io.PoolOutputBuffer$Position _cur;
    private final org.bson.io.PoolOutputBuffer$Position _end;
    private static org.bson.util.SimplePool _extra;

    public void <init>()
    {
        byte[] $r1;
        org.bson.io.PoolOutputBuffer r0;
        org.bson.io.PoolOutputBuffer$Position $r3, $r4;
        java.util.ArrayList $r2;

        r0 := @this: org.bson.io.PoolOutputBuffer;

        specialinvoke r0.<org.bson.io.OutputBuffer: void <init>()>();

        $r1 = newarray (byte)[16384];

        r0.<org.bson.io.PoolOutputBuffer: byte[] _mine> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.bson.io.PoolOutputBuffer: java.util.List _fromPool> = $r2;

        $r3 = new org.bson.io.PoolOutputBuffer$Position;

        specialinvoke $r3.<org.bson.io.PoolOutputBuffer$Position: void <init>()>();

        r0.<org.bson.io.PoolOutputBuffer: org.bson.io.PoolOutputBuffer$Position _cur> = $r3;

        $r4 = new org.bson.io.PoolOutputBuffer$Position;

        specialinvoke $r4.<org.bson.io.PoolOutputBuffer$Position: void <init>()>();

        r0.<org.bson.io.PoolOutputBuffer: org.bson.io.PoolOutputBuffer$Position _end> = $r4;

        virtualinvoke r0.<org.bson.io.PoolOutputBuffer: void reset()>();

        return;
    }

    public void reset()
    {
        org.bson.util.SimplePool $r6;
        org.bson.io.PoolOutputBuffer r0;
        java.util.List $r3, $r4, $r5;
        org.bson.io.PoolOutputBuffer$Position $r1, $r2;
        int $i0, i1;
        java.lang.Object $r7;

        r0 := @this: org.bson.io.PoolOutputBuffer;

        $r1 = r0.<org.bson.io.PoolOutputBuffer: org.bson.io.PoolOutputBuffer$Position _cur>;

        virtualinvoke $r1.<org.bson.io.PoolOutputBuffer$Position: void reset()>();

        $r2 = r0.<org.bson.io.PoolOutputBuffer: org.bson.io.PoolOutputBuffer$Position _end>;

        virtualinvoke $r2.<org.bson.io.PoolOutputBuffer$Position: void reset()>();

        i1 = 0;

     label1:
        $r3 = r0.<org.bson.io.PoolOutputBuffer: java.util.List _fromPool>;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        if i1 >= $i0 goto label2;

        $r6 = <org.bson.io.PoolOutputBuffer: org.bson.util.SimplePool _extra>;

        $r5 = r0.<org.bson.io.PoolOutputBuffer: java.util.List _fromPool>;

        $r7 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i1);

        virtualinvoke $r6.<org.bson.util.SimplePool: void done(java.lang.Object)>($r7);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r4 = r0.<org.bson.io.PoolOutputBuffer: java.util.List _fromPool>;

        interfaceinvoke $r4.<java.util.List: void clear()>();

        return;
    }

    public int getPosition()
    {
        int $i0;
        org.bson.io.PoolOutputBuffer r0;
        org.bson.io.PoolOutputBuffer$Position $r1;

        r0 := @this: org.bson.io.PoolOutputBuffer;

        $r1 = r0.<org.bson.io.PoolOutputBuffer: org.bson.io.PoolOutputBuffer$Position _cur>;

        $i0 = virtualinvoke $r1.<org.bson.io.PoolOutputBuffer$Position: int pos()>();

        return $i0;
    }

    public void setPosition(int)
    {
        int i0;
        org.bson.io.PoolOutputBuffer r0;
        org.bson.io.PoolOutputBuffer$Position $r1;

        r0 := @this: org.bson.io.PoolOutputBuffer;

        i0 := @parameter0: int;

        $r1 = r0.<org.bson.io.PoolOutputBuffer: org.bson.io.PoolOutputBuffer$Position _cur>;

        virtualinvoke $r1.<org.bson.io.PoolOutputBuffer$Position: void reset(int)>(i0);

        return;
    }

    public void seekEnd()
    {
        org.bson.io.PoolOutputBuffer r0;
        org.bson.io.PoolOutputBuffer$Position $r1, $r2;

        r0 := @this: org.bson.io.PoolOutputBuffer;

        $r2 = r0.<org.bson.io.PoolOutputBuffer: org.bson.io.PoolOutputBuffer$Position _cur>;

        $r1 = r0.<org.bson.io.PoolOutputBuffer: org.bson.io.PoolOutputBuffer$Position _end>;

        virtualinvoke $r2.<org.bson.io.PoolOutputBuffer$Position: void reset(org.bson.io.PoolOutputBuffer$Position)>($r1);

        return;
    }

    public void seekStart()
    {
        org.bson.io.PoolOutputBuffer r0;
        org.bson.io.PoolOutputBuffer$Position $r1;

        r0 := @this: org.bson.io.PoolOutputBuffer;

        $r1 = r0.<org.bson.io.PoolOutputBuffer: org.bson.io.PoolOutputBuffer$Position _cur>;

        virtualinvoke $r1.<org.bson.io.PoolOutputBuffer$Position: void reset()>();

        return;
    }

    public int size()
    {
        int $i0;
        org.bson.io.PoolOutputBuffer r0;
        org.bson.io.PoolOutputBuffer$Position $r1;

        r0 := @this: org.bson.io.PoolOutputBuffer;

        $r1 = r0.<org.bson.io.PoolOutputBuffer: org.bson.io.PoolOutputBuffer$Position _end>;

        $i0 = virtualinvoke $r1.<org.bson.io.PoolOutputBuffer$Position: int pos()>();

        return $i0;
    }

    public void write(byte[])
    {
        int $i0;
        byte[] r1;
        org.bson.io.PoolOutputBuffer r0;

        r0 := @this: org.bson.io.PoolOutputBuffer;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        virtualinvoke r0.<org.bson.io.PoolOutputBuffer: void write(byte[],int,int)>(r1, 0, $i0);

        return;
    }

    public void write(byte[], int, int)
    {
        byte[] $r1, r3;
        org.bson.io.PoolOutputBuffer r0;
        org.bson.io.PoolOutputBuffer$Position $r2, $r4, $r5;
        int $i0, $i1, $i2, $i3, $i4, i5, i6;

        r0 := @this: org.bson.io.PoolOutputBuffer;

        r3 := @parameter0: byte[];

        i5 := @parameter1: int;

        i6 := @parameter2: int;

     label1:
        if i6 <= 0 goto label2;

        $r1 = virtualinvoke r0.<org.bson.io.PoolOutputBuffer: byte[] _cur()>();

        $i1 = lengthof $r1;

        $r2 = r0.<org.bson.io.PoolOutputBuffer: org.bson.io.PoolOutputBuffer$Position _cur>;

        $i0 = $r2.<org.bson.io.PoolOutputBuffer$Position: int y>;

        $i2 = $i1 - $i0;

        $i3 = staticinvoke <java.lang.Math: int min(int,int)>($i2, i6);

        $r4 = r0.<org.bson.io.PoolOutputBuffer: org.bson.io.PoolOutputBuffer$Position _cur>;

        $i4 = $r4.<org.bson.io.PoolOutputBuffer$Position: int y>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, i5, $r1, $i4, $i3);

        $r5 = r0.<org.bson.io.PoolOutputBuffer: org.bson.io.PoolOutputBuffer$Position _cur>;

        virtualinvoke $r5.<org.bson.io.PoolOutputBuffer$Position: void inc(int)>($i3);

        i6 = i6 - $i3;

        i5 = i5 + $i3;

        virtualinvoke r0.<org.bson.io.PoolOutputBuffer: void _afterWrite()>();

        goto label1;

     label2:
        return;
    }

    public void write(int)
    {
        byte[] $r1;
        org.bson.io.PoolOutputBuffer r0;
        org.bson.io.PoolOutputBuffer$Position $r2;
        byte $b3;
        int $i0, i1, $i2;

        r0 := @this: org.bson.io.PoolOutputBuffer;

        i1 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.bson.io.PoolOutputBuffer: byte[] _cur()>();

        $r2 = r0.<org.bson.io.PoolOutputBuffer: org.bson.io.PoolOutputBuffer$Position _cur>;

        $i0 = virtualinvoke $r2.<org.bson.io.PoolOutputBuffer$Position: int getAndInc()>();

        $i2 = i1 & 255;

        $b3 = (byte) $i2;

        $r1[$i0] = $b3;

        virtualinvoke r0.<org.bson.io.PoolOutputBuffer: void _afterWrite()>();

        return;
    }

    void _afterWrite()
    {
        org.bson.util.SimplePool $r6;
        int $i0, $i1, $i2, $i3;
        org.bson.io.PoolOutputBuffer r0;
        java.util.List $r7;
        org.bson.io.PoolOutputBuffer$Position $r1, $r2, $r3, $r4, $r5, $r9, $r10, $r11, $r12, $r13;
        java.lang.Object $r8;

        r0 := @this: org.bson.io.PoolOutputBuffer;

        $r1 = r0.<org.bson.io.PoolOutputBuffer: org.bson.io.PoolOutputBuffer$Position _cur>;

        $i0 = virtualinvoke $r1.<org.bson.io.PoolOutputBuffer$Position: int pos()>();

        $r2 = r0.<org.bson.io.PoolOutputBuffer: org.bson.io.PoolOutputBuffer$Position _end>;

        $i1 = virtualinvoke $r2.<org.bson.io.PoolOutputBuffer$Position: int pos()>();

        if $i0 >= $i1 goto label2;

        $r12 = r0.<org.bson.io.PoolOutputBuffer: org.bson.io.PoolOutputBuffer$Position _cur>;

        $i3 = $r12.<org.bson.io.PoolOutputBuffer$Position: int y>;

        if $i3 != 16384 goto label1;

        $r13 = r0.<org.bson.io.PoolOutputBuffer: org.bson.io.PoolOutputBuffer$Position _cur>;

        virtualinvoke $r13.<org.bson.io.PoolOutputBuffer$Position: void nextBuffer()>();

     label1:
        return;

     label2:
        $r4 = r0.<org.bson.io.PoolOutputBuffer: org.bson.io.PoolOutputBuffer$Position _end>;

        $r3 = r0.<org.bson.io.PoolOutputBuffer: org.bson.io.PoolOutputBuffer$Position _cur>;

        virtualinvoke $r4.<org.bson.io.PoolOutputBuffer$Position: void reset(org.bson.io.PoolOutputBuffer$Position)>($r3);

        $r5 = r0.<org.bson.io.PoolOutputBuffer: org.bson.io.PoolOutputBuffer$Position _end>;

        $i2 = $r5.<org.bson.io.PoolOutputBuffer$Position: int y>;

        if $i2 >= 16384 goto label3;

        return;

     label3:
        $r7 = r0.<org.bson.io.PoolOutputBuffer: java.util.List _fromPool>;

        $r6 = <org.bson.io.PoolOutputBuffer: org.bson.util.SimplePool _extra>;

        $r8 = virtualinvoke $r6.<org.bson.util.SimplePool: java.lang.Object get()>();

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r8);

        $r9 = r0.<org.bson.io.PoolOutputBuffer: org.bson.io.PoolOutputBuffer$Position _end>;

        virtualinvoke $r9.<org.bson.io.PoolOutputBuffer$Position: void nextBuffer()>();

        $r11 = r0.<org.bson.io.PoolOutputBuffer: org.bson.io.PoolOutputBuffer$Position _cur>;

        $r10 = r0.<org.bson.io.PoolOutputBuffer: org.bson.io.PoolOutputBuffer$Position _end>;

        virtualinvoke $r11.<org.bson.io.PoolOutputBuffer$Position: void reset(org.bson.io.PoolOutputBuffer$Position)>($r10);

        return;
    }

    byte[] _cur()
    {
        byte[] $r2;
        org.bson.io.PoolOutputBuffer r0;
        org.bson.io.PoolOutputBuffer$Position $r1;
        int $i0;

        r0 := @this: org.bson.io.PoolOutputBuffer;

        $r1 = r0.<org.bson.io.PoolOutputBuffer: org.bson.io.PoolOutputBuffer$Position _cur>;

        $i0 = $r1.<org.bson.io.PoolOutputBuffer$Position: int x>;

        $r2 = virtualinvoke r0.<org.bson.io.PoolOutputBuffer: byte[] _get(int)>($i0);

        return $r2;
    }

    byte[] _get(int)
    {
        byte[] $r3, $r4;
        org.bson.io.PoolOutputBuffer r0;
        java.util.List $r1;
        int i0;
        java.lang.Object $r2;

        r0 := @this: org.bson.io.PoolOutputBuffer;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r4 = r0.<org.bson.io.PoolOutputBuffer: byte[] _mine>;

        return $r4;

     label1:
        $r1 = r0.<org.bson.io.PoolOutputBuffer: java.util.List _fromPool>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r3 = (byte[]) $r2;

        return $r3;
    }

    public int pipe(java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r0;
        byte[] $r3;
        java.lang.NullPointerException $r6;
        org.bson.io.PoolOutputBuffer r1;
        java.util.List $r2;
        org.bson.io.PoolOutputBuffer$Position $r4;
        int $i0, $i1, i2, i3, $i5;

        r1 := @this: org.bson.io.PoolOutputBuffer;

        r0 := @parameter0: java.io.OutputStream;

        if r0 != null goto label1;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("out is null");

        throw $r6;

     label1:
        i2 = 0;

        $i5 = (int) -1;

        i3 = $i5;

     label2:
        $r2 = r1.<org.bson.io.PoolOutputBuffer: java.util.List _fromPool>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if i3 >= $i0 goto label3;

        $r3 = virtualinvoke r1.<org.bson.io.PoolOutputBuffer: byte[] _get(int)>(i3);

        $r4 = r1.<org.bson.io.PoolOutputBuffer: org.bson.io.PoolOutputBuffer$Position _end>;

        $i1 = virtualinvoke $r4.<org.bson.io.PoolOutputBuffer$Position: int len(int)>(i3);

        virtualinvoke r0.<java.io.OutputStream: void write(byte[],int,int)>($r3, 0, $i1);

        i2 = i2 + $i1;

        i3 = i3 + 1;

        goto label2;

     label3:
        return i2;
    }

    public java.lang.String asString()
    {
        byte[] $r3;
        org.bson.io.PoolOutputBuffer r0;
        java.util.List $r1;
        int $i0, $i1;
        java.lang.String $r2, $r4;

        r0 := @this: org.bson.io.PoolOutputBuffer;

        $r1 = r0.<org.bson.io.PoolOutputBuffer: java.util.List _fromPool>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 <= 0 goto label1;

        $r4 = specialinvoke r0.<org.bson.io.OutputBuffer: java.lang.String asString()>();

        return $r4;

     label1:
        $r2 = new java.lang.String;

        $r3 = r0.<org.bson.io.PoolOutputBuffer: byte[] _mine>;

        $i1 = virtualinvoke r0.<org.bson.io.PoolOutputBuffer: int size()>();

        specialinvoke $r2.<java.lang.String: void <init>(byte[],int,int)>($r3, 0, $i1);

        return $r2;
    }

    public java.lang.String asString(java.lang.String) throws java.io.UnsupportedEncodingException
    {
        byte[] $r3;
        org.bson.io.PoolOutputBuffer r0;
        java.util.List $r1;
        int $i0, $i1;
        java.lang.String $r2, r4, $r5;

        r0 := @this: org.bson.io.PoolOutputBuffer;

        r4 := @parameter0: java.lang.String;

        $r1 = r0.<org.bson.io.PoolOutputBuffer: java.util.List _fromPool>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 <= 0 goto label1;

        $r5 = specialinvoke r0.<org.bson.io.OutputBuffer: java.lang.String asString(java.lang.String)>(r4);

        return $r5;

     label1:
        $r2 = new java.lang.String;

        $r3 = r0.<org.bson.io.PoolOutputBuffer: byte[] _mine>;

        $i1 = virtualinvoke r0.<org.bson.io.PoolOutputBuffer: int size()>();

        specialinvoke $r2.<java.lang.String: void <init>(byte[],int,int,java.lang.String)>($r3, 0, $i1, r4);

        return $r2;
    }

    static void <clinit>()
    {
        org.bson.io.PoolOutputBuffer$1 $r0;

        <org.bson.io.PoolOutputBuffer: int BUF_SIZE> = 16384;

        $r0 = new org.bson.io.PoolOutputBuffer$1;

        specialinvoke $r0.<org.bson.io.PoolOutputBuffer$1: void <init>(int)>(640);

        <org.bson.io.PoolOutputBuffer: org.bson.util.SimplePool _extra> = $r0;

        return;
    }
}
