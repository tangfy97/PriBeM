public class org.codehaus.groovy.classgen.AsmClassGenerator extends org.codehaus.groovy.classgen.ClassGenerator
{
    private final groovyjarjarasm.asm.ClassVisitor cv;
    private groovyjarjarasm.asm.MethodVisitor mv;
    private org.codehaus.groovy.classgen.GeneratorContext context;
    private java.lang.String sourceFile;
    private org.codehaus.groovy.ast.ClassNode classNode;
    private org.codehaus.groovy.ast.ClassNode outermostClass;
    private java.lang.String internalClassName;
    private java.lang.String internalBaseClassName;
    private org.codehaus.groovy.classgen.CompileStack compileStack;
    private boolean outputReturn;
    private boolean leftHandExpression;
    static final org.codehaus.groovy.classgen.MethodCallerMultiAdapter invokeMethodOnCurrent;
    static final org.codehaus.groovy.classgen.MethodCallerMultiAdapter invokeMethodOnSuper;
    static final org.codehaus.groovy.classgen.MethodCallerMultiAdapter invokeMethod;
    static final org.codehaus.groovy.classgen.MethodCallerMultiAdapter invokeStaticMethod;
    static final org.codehaus.groovy.classgen.MethodCallerMultiAdapter invokeNew;
    static final org.codehaus.groovy.classgen.MethodCallerMultiAdapter setField;
    static final org.codehaus.groovy.classgen.MethodCallerMultiAdapter getField;
    static final org.codehaus.groovy.classgen.MethodCallerMultiAdapter setGroovyObjectField;
    static final org.codehaus.groovy.classgen.MethodCallerMultiAdapter getGroovyObjectField;
    static final org.codehaus.groovy.classgen.MethodCallerMultiAdapter setFieldOnSuper;
    static final org.codehaus.groovy.classgen.MethodCallerMultiAdapter getFieldOnSuper;
    static final org.codehaus.groovy.classgen.MethodCallerMultiAdapter setProperty;
    static final org.codehaus.groovy.classgen.MethodCallerMultiAdapter getProperty;
    static final org.codehaus.groovy.classgen.MethodCallerMultiAdapter setGroovyObjectProperty;
    static final org.codehaus.groovy.classgen.MethodCallerMultiAdapter getGroovyObjectProperty;
    static final org.codehaus.groovy.classgen.MethodCallerMultiAdapter setPropertyOnSuper;
    static final org.codehaus.groovy.classgen.MethodCallerMultiAdapter getPropertyOnSuper;
    static final org.codehaus.groovy.classgen.MethodCaller iteratorNextMethod;
    static final org.codehaus.groovy.classgen.MethodCaller iteratorHasNextMethod;
    static final org.codehaus.groovy.classgen.MethodCaller assertFailedMethod;
    static final org.codehaus.groovy.classgen.MethodCaller isCaseMethod;
    static final org.codehaus.groovy.classgen.MethodCaller compareIdenticalMethod;
    static final org.codehaus.groovy.classgen.MethodCaller compareEqualMethod;
    static final org.codehaus.groovy.classgen.MethodCaller compareNotEqualMethod;
    static final org.codehaus.groovy.classgen.MethodCaller compareToMethod;
    static final org.codehaus.groovy.classgen.MethodCaller compareLessThanMethod;
    static final org.codehaus.groovy.classgen.MethodCaller compareLessThanEqualMethod;
    static final org.codehaus.groovy.classgen.MethodCaller compareGreaterThanMethod;
    static final org.codehaus.groovy.classgen.MethodCaller compareGreaterThanEqualMethod;
    static final org.codehaus.groovy.classgen.MethodCaller findRegexMethod;
    static final org.codehaus.groovy.classgen.MethodCaller matchRegexMethod;
    static final org.codehaus.groovy.classgen.MethodCaller regexPattern;
    static final org.codehaus.groovy.classgen.MethodCaller spreadMap;
    static final org.codehaus.groovy.classgen.MethodCaller despreadList;
    static final org.codehaus.groovy.classgen.MethodCaller getMethodPointer;
    static final org.codehaus.groovy.classgen.MethodCaller invokeClosureMethod;
    static final org.codehaus.groovy.classgen.MethodCaller unaryPlus;
    static final org.codehaus.groovy.classgen.MethodCaller unaryMinus;
    static final org.codehaus.groovy.classgen.MethodCaller bitwiseNegate;
    static final org.codehaus.groovy.classgen.MethodCaller asTypeMethod;
    static final org.codehaus.groovy.classgen.MethodCaller castToTypeMethod;
    static final org.codehaus.groovy.classgen.MethodCaller createListMethod;
    static final org.codehaus.groovy.classgen.MethodCaller createTupleMethod;
    static final org.codehaus.groovy.classgen.MethodCaller createMapMethod;
    static final org.codehaus.groovy.classgen.MethodCaller createRangeMethod;
    static final org.codehaus.groovy.classgen.MethodCaller createPojoWrapperMethod;
    static final org.codehaus.groovy.classgen.MethodCaller createGroovyObjectWrapperMethod;
    static final org.codehaus.groovy.classgen.MethodCaller selectConstructorAndTransformArguments;
    private java.util.List exceptionBlocks;
    private java.util.Set syntheticStaticFields;
    private boolean passingClosureParams;
    private org.codehaus.groovy.ast.ConstructorNode constructorNode;
    private org.codehaus.groovy.ast.MethodNode methodNode;
    private org.codehaus.groovy.classgen.BytecodeHelper helper;
    public static final boolean CREATE_DEBUG_INFO;
    public static final boolean CREATE_LINE_NUMBER_INFO;
    private static final boolean MARK_START;
    public static final boolean ASM_DEBUG;
    private int lineNumber;
    private int columnNumber;
    private org.codehaus.groovy.ast.ASTNode currentASTNode;
    private org.codehaus.groovy.classgen.DummyClassGenerator dummyGen;
    private groovyjarjarasm.asm.ClassWriter dummyClassWriter;
    private org.codehaus.groovy.ast.ClassNode interfaceClassLoadingClass;
    private boolean implicitThis;
    private java.util.Map genericParameterNames;
    private org.codehaus.groovy.ast.ClassNode rightHandType;
    private java.util.HashMap closureClassMap;
    static java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter;
    static java.lang.Class class$java$util$Iterator;
    static java.lang.Class class$groovy$lang$GroovyObject;
    static java.lang.Class class$java$lang$IllegalArgumentException;
    static java.lang.Class class$org$codehaus$groovy$ast$expr$PropertyExpression;

    public void <init>(org.codehaus.groovy.classgen.GeneratorContext, groovyjarjarasm.asm.ClassVisitor, java.lang.ClassLoader, java.lang.String)
    {
        org.codehaus.groovy.classgen.BytecodeHelper $r16;
        groovyjarjarasm.asm.ClassWriter $r10, $r17;
        java.util.HashMap $r20, $r21;
        java.util.ArrayList $r14;
        java.util.HashSet $r15;
        groovyjarjarasm.asm.ClassVisitor r6;
        int $i1, $i3;
        java.lang.String r7;
        org.codehaus.groovy.classgen.GeneratorContext r5;
        org.codehaus.groovy.classgen.DummyClassGenerator $r18;
        org.codehaus.groovy.classgen.AsmClassGenerator r0;
        org.codehaus.groovy.classgen.CompileStack $r19;
        java.lang.ClassLoader r1;

        r0 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r5 := @parameter0: org.codehaus.groovy.classgen.GeneratorContext;

        r6 := @parameter1: groovyjarjarasm.asm.ClassVisitor;

        r1 := @parameter2: java.lang.ClassLoader;

        r7 := @parameter3: java.lang.String;

        specialinvoke r0.<org.codehaus.groovy.classgen.ClassGenerator: void <init>(java.lang.ClassLoader)>(r1);

        r0.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean leftHandExpression> = 0;

        $r14 = new java.util.ArrayList;

        specialinvoke $r14.<java.util.ArrayList: void <init>()>();

        r0.<org.codehaus.groovy.classgen.AsmClassGenerator: java.util.List exceptionBlocks> = $r14;

        $r15 = new java.util.HashSet;

        specialinvoke $r15.<java.util.HashSet: void <init>()>();

        r0.<org.codehaus.groovy.classgen.AsmClassGenerator: java.util.Set syntheticStaticFields> = $r15;

        $r16 = new org.codehaus.groovy.classgen.BytecodeHelper;

        specialinvoke $r16.<org.codehaus.groovy.classgen.BytecodeHelper: void <init>(groovyjarjarasm.asm.MethodVisitor)>(null);

        r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.BytecodeHelper helper> = $r16;

        $i1 = (int) -1;

        r0.<org.codehaus.groovy.classgen.AsmClassGenerator: int lineNumber> = $i1;

        $i3 = (int) -1;

        r0.<org.codehaus.groovy.classgen.AsmClassGenerator: int columnNumber> = $i3;

        r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ASTNode currentASTNode> = null;

        r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.DummyClassGenerator dummyGen> = null;

        r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.ClassWriter dummyClassWriter> = null;

        r0.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean implicitThis> = 0;

        r0.<org.codehaus.groovy.classgen.AsmClassGenerator: java.util.Map genericParameterNames> = null;

        r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.GeneratorContext context> = r5;

        r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.ClassVisitor cv> = r6;

        r0.<org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.String sourceFile> = r7;

        $r17 = new groovyjarjarasm.asm.ClassWriter;

        specialinvoke $r17.<groovyjarjarasm.asm.ClassWriter: void <init>(boolean)>(1);

        r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.ClassWriter dummyClassWriter> = $r17;

        $r18 = new org.codehaus.groovy.classgen.DummyClassGenerator;

        $r10 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.ClassWriter dummyClassWriter>;

        specialinvoke $r18.<org.codehaus.groovy.classgen.DummyClassGenerator: void <init>(org.codehaus.groovy.classgen.GeneratorContext,groovyjarjarasm.asm.ClassVisitor,java.lang.ClassLoader,java.lang.String)>(r5, $r10, r1, r7);

        r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.DummyClassGenerator dummyGen> = $r18;

        $r19 = new org.codehaus.groovy.classgen.CompileStack;

        specialinvoke $r19.<org.codehaus.groovy.classgen.CompileStack: void <init>()>();

        r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack> = $r19;

        $r20 = new java.util.HashMap;

        specialinvoke $r20.<java.util.HashMap: void <init>()>();

        r0.<org.codehaus.groovy.classgen.AsmClassGenerator: java.util.Map genericParameterNames> = $r20;

        $r21 = new java.util.HashMap;

        specialinvoke $r21.<java.util.HashMap: void <init>()>();

        r0.<org.codehaus.groovy.classgen.AsmClassGenerator: java.util.HashMap closureClassMap> = $r21;

        return;
    }

    protected org.codehaus.groovy.control.SourceUnit getSourceUnit()
    {
        org.codehaus.groovy.classgen.AsmClassGenerator r0;

        r0 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        return null;
    }

    public void visitClass(org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.ast.ModuleNode $r32;
        org.codehaus.groovy.classgen.GeneratorContext $r26;
        boolean $z0, $z1, $z2, $z3;
        groovy.lang.GroovyRuntimeException $r31;
        java.util.Set $r1;
        org.codehaus.groovy.ast.InnerClassNode $r29;
        java.lang.String[] $r11;
        groovyjarjarasm.asm.ClassVisitor $r6, $r13, $r14, $r16, $r21;
        org.codehaus.groovy.ast.MethodNode $r20;
        java.lang.StringBuffer $r23, $r24, $r25, $r27;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.codehaus.groovy.ast.ClassNode[] $r10;
        java.lang.String $r3, $r5, $r7, $r8, $r9, $r12, $r18, $r19, $r22, $r28, r37, r38;
        java.util.LinkedList $r34;
        java.util.Iterator $r35;
        org.codehaus.groovy.ast.ClassNode r2, $r4, $r15, $r30, r33, r36;
        org.codehaus.groovy.classgen.AsmClassGenerator r0;
        java.lang.Object $r17;

        r0 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r2 := @parameter0: org.codehaus.groovy.ast.ClassNode;

     label01:
        $r1 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: java.util.Set syntheticStaticFields>;

        interfaceinvoke $r1.<java.util.Set: void clear()>();

        r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode classNode> = r2;

        r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode outermostClass> = null;

        $r3 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getClassInternalName(org.codehaus.groovy.ast.ClassNode)>(r2);

        r0.<org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.String internalClassName> = $r3;

        $r4 = virtualinvoke r2.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode getSuperClass()>();

        $r5 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getClassInternalName(org.codehaus.groovy.ast.ClassNode)>($r4);

        r0.<org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.String internalBaseClassName> = $r5;

        $r6 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.ClassVisitor cv>;

        $i0 = virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: int getBytecodeVersion()>();

        $i1 = virtualinvoke r2.<org.codehaus.groovy.ast.ClassNode: int getModifiers()>();

        $r7 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.String internalClassName>;

        $r8 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getGenericsSignature(org.codehaus.groovy.ast.ClassNode)>(r2);

        $r9 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.String internalBaseClassName>;

        $r10 = virtualinvoke r2.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode[] getInterfaces()>();

        $r11 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String[] getClassInternalNames(org.codehaus.groovy.ast.ClassNode[])>($r10);

        interfaceinvoke $r6.<groovyjarjarasm.asm.ClassVisitor: void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>($i0, $i1, $r7, $r8, $r9, $r11);

        $r13 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.ClassVisitor cv>;

        $r12 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.String sourceFile>;

        interfaceinvoke $r13.<groovyjarjarasm.asm.ClassVisitor: void visitSource(java.lang.String,java.lang.String)>($r12, null);

        $r14 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.ClassVisitor cv>;

        specialinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitAnnotations(org.codehaus.groovy.ast.AnnotatedNode,java.lang.Object)>(r2, $r14);

        $z0 = virtualinvoke r2.<org.codehaus.groovy.ast.ClassNode: boolean isInterface()>();

        if $z0 == 0 goto label03;

        r33 = r2;

        $z2 = r2 instanceof org.codehaus.groovy.ast.InnerClassNode;

        if $z2 == 0 goto label02;

        r33 = virtualinvoke r2.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode getOuterClass()>();

     label02:
        $r22 = virtualinvoke r33.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $r23 = new java.lang.StringBuffer;

        specialinvoke $r23.<java.lang.StringBuffer: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r22);

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("$");

        $r26 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.GeneratorContext context>;

        $i5 = virtualinvoke $r26.<org.codehaus.groovy.classgen.GeneratorContext: int getNextInnerClassIdx()>();

        $r27 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i5);

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.String toString()>();

        $r29 = new org.codehaus.groovy.ast.InnerClassNode;

        $r30 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode OBJECT_TYPE>;

        specialinvoke $r29.<org.codehaus.groovy.ast.InnerClassNode: void <init>(org.codehaus.groovy.ast.ClassNode,java.lang.String,int,org.codehaus.groovy.ast.ClassNode)>(r33, $r28, 4128, $r30);

        r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode interfaceClassLoadingClass> = $r29;

        specialinvoke r0.<org.codehaus.groovy.classgen.ClassGenerator: void visitClass(org.codehaus.groovy.ast.ClassNode)>(r2);

        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void createInterfaceSyntheticStaticFields()>();

        goto label05;

     label03:
        specialinvoke r0.<org.codehaus.groovy.classgen.ClassGenerator: void visitClass(org.codehaus.groovy.ast.ClassNode)>(r2);

        $r15 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode GENERATED_CLOSURE_Type>;

        $z1 = virtualinvoke r2.<org.codehaus.groovy.ast.ClassNode: boolean declaresInterface(org.codehaus.groovy.ast.ClassNode)>($r15);

        if $z1 != 0 goto label04;

        specialinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void createMopMethods()>();

     label04:
        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void createSyntheticStaticFields()>();

     label05:
        $r34 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: java.util.LinkedList innerClasses>;

        $r35 = virtualinvoke $r34.<java.util.LinkedList: java.util.Iterator iterator()>();

     label06:
        $z3 = interfaceinvoke $r35.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label09;

        $r17 = interfaceinvoke $r35.<java.util.Iterator: java.lang.Object next()>();

        r36 = (org.codehaus.groovy.ast.ClassNode) $r17;

        $r18 = virtualinvoke r36.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        r37 = $r18;

        $r19 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getClassInternalName(java.lang.String)>($r18);

        $i2 = virtualinvoke $r18.<java.lang.String: int lastIndexOf(int)>(36);

        if $i2 < 0 goto label07;

        $i4 = $i2 + 1;

        r37 = virtualinvoke $r18.<java.lang.String: java.lang.String substring(int)>($i4);

     label07:
        r38 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.String internalClassName>;

        $r20 = virtualinvoke r36.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.MethodNode getEnclosingMethod()>();

        if $r20 == null goto label08;

        r38 = null;

        r37 = null;

     label08:
        $r21 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.ClassVisitor cv>;

        $i3 = virtualinvoke r36.<org.codehaus.groovy.ast.ClassNode: int getModifiers()>();

        interfaceinvoke $r21.<groovyjarjarasm.asm.ClassVisitor: void visitInnerClass(java.lang.String,java.lang.String,java.lang.String,int)>($r19, r38, r37, $i3);

        goto label06;

     label09:
        $r16 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.ClassVisitor cv>;

        interfaceinvoke $r16.<groovyjarjarasm.asm.ClassVisitor: void visitEnd()>();

     label10:
        goto label12;

     label11:
        $r31 := @caughtexception;

        $r32 = virtualinvoke r2.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ModuleNode getModule()>();

        virtualinvoke $r31.<groovy.lang.GroovyRuntimeException: void setModule(org.codehaus.groovy.ast.ModuleNode)>($r32);

        throw $r31;

     label12:
        return;

        catch groovy.lang.GroovyRuntimeException from label01 to label10 with label11;
    }

    public void visitGenericType(org.codehaus.groovy.ast.GenericsType)
    {
        org.codehaus.groovy.ast.ClassNode $r1;
        java.util.Map $r3;
        org.codehaus.groovy.classgen.AsmClassGenerator r2;
        org.codehaus.groovy.ast.GenericsType r0;
        java.lang.String $r4;

        r2 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r0 := @parameter0: org.codehaus.groovy.ast.GenericsType;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.GenericsType: org.codehaus.groovy.ast.ClassNode getType()>();

        $r3 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: java.util.Map genericParameterNames>;

        $r4 = virtualinvoke $r1.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, r0);

        return;
    }

    private void createMopMethods()
    {
        java.util.List $r2, $r5;
        org.codehaus.groovy.ast.ClassNode $r1, $r3, $r4;
        org.codehaus.groovy.classgen.AsmClassGenerator r0;

        r0 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        $r1 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode classNode>;

        $r2 = virtualinvoke $r1.<org.codehaus.groovy.ast.ClassNode: java.util.List getMethods()>();

        specialinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitMopMethodList(java.util.List,boolean)>($r2, 1);

        $r3 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode classNode>;

        $r4 = virtualinvoke $r3.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode getSuperClass()>();

        $r5 = virtualinvoke $r4.<org.codehaus.groovy.ast.ClassNode: java.util.List getAllDeclaredMethods()>();

        specialinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitMopMethodList(java.util.List,boolean)>($r5, 0);

        return;
    }

    private java.lang.String[] buildExceptions(org.codehaus.groovy.ast.ClassNode[])
    {
        org.codehaus.groovy.ast.ClassNode $r2;
        org.codehaus.groovy.classgen.AsmClassGenerator r4;
        java.lang.String[] r1;
        org.codehaus.groovy.ast.ClassNode[] r0;
        int $i0, $i1, i2;
        java.lang.String $r3;

        r4 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r0 := @parameter0: org.codehaus.groovy.ast.ClassNode[];

        if r0 != null goto label1;

        return null;

     label1:
        $i0 = lengthof r0;

        r1 = newarray (java.lang.String)[$i0];

        i2 = 0;

     label2:
        $i1 = lengthof r0;

        if i2 >= $i1 goto label3;

        $r2 = r0[i2];

        $r3 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getClassInternalName(org.codehaus.groovy.ast.ClassNode)>($r2);

        r1[i2] = $r3;

        i2 = i2 + 1;

        goto label2;

     label3:
        return r1;
    }

    private void visitMopMethodList(java.util.List, boolean)
    {
        java.util.HashMap $r0;
        org.codehaus.groovy.classgen.AsmClassGenerator$1Key $r9, $r11;
        org.codehaus.groovy.ast.MethodNode r6;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r7, $r8;
        java.util.LinkedList $r1;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.util.Iterator $r3;
        org.codehaus.groovy.classgen.AsmClassGenerator r4;
        java.util.List r2;
        org.codehaus.groovy.ast.Parameter[] $r10, $r12;
        java.lang.Object $r5;

        r4 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r2 := @parameter0: java.util.List;

        z0 := @parameter1: boolean;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r1 = new java.util.LinkedList;

        specialinvoke $r1.<java.util.LinkedList: void <init>()>();

        $r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z6 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label10;

        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.codehaus.groovy.ast.MethodNode) $r5;

        $i0 = virtualinvoke r6.<org.codehaus.groovy.ast.MethodNode: int getModifiers()>();

        $i1 = $i0 & 1024;

        if $i1 == 0 goto label02;

        goto label01;

     label02:
        $z1 = virtualinvoke r6.<org.codehaus.groovy.ast.MethodNode: boolean isStatic()>();

        if $z1 == 0 goto label03;

        goto label01;

     label03:
        $i2 = virtualinvoke r6.<org.codehaus.groovy.ast.MethodNode: int getModifiers()>();

        $i3 = $i2 & 5;

        if $i3 != 0 goto label04;

        $z7 = 1;

        goto label05;

     label04:
        $z7 = 0;

     label05:
        $z2 = z0 ^ $z7;

        if $z2 == 0 goto label06;

        goto label01;

     label06:
        $r7 = virtualinvoke r6.<org.codehaus.groovy.ast.MethodNode: java.lang.String getName()>();

        $z3 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: boolean isMopMethod(java.lang.String)>($r7);

        if $z3 == 0 goto label07;

        $r11 = new org.codehaus.groovy.classgen.AsmClassGenerator$1Key;

        $r12 = virtualinvoke r6.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.Parameter[] getParameters()>();

        specialinvoke $r11.<org.codehaus.groovy.classgen.AsmClassGenerator$1Key: void <init>(org.codehaus.groovy.classgen.AsmClassGenerator,java.lang.String,org.codehaus.groovy.ast.Parameter[])>(r4, $r7, $r12);

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, r6);

        goto label01;

     label07:
        $z4 = virtualinvoke $r7.<java.lang.String: boolean startsWith(java.lang.String)>("<");

        if $z4 == 0 goto label08;

        goto label01;

     label08:
        $r8 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.String getMopMethodName(org.codehaus.groovy.ast.MethodNode,boolean)>(r6, z0);

        $r9 = new org.codehaus.groovy.classgen.AsmClassGenerator$1Key;

        $r10 = virtualinvoke r6.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.Parameter[] getParameters()>();

        specialinvoke $r9.<org.codehaus.groovy.classgen.AsmClassGenerator$1Key: void <init>(org.codehaus.groovy.classgen.AsmClassGenerator,java.lang.String,org.codehaus.groovy.ast.Parameter[])>(r4, $r8, $r10);

        $z5 = virtualinvoke $r0.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r9);

        if $z5 == 0 goto label09;

        goto label01;

     label09:
        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, r6);

        virtualinvoke $r1.<java.util.LinkedList: boolean add(java.lang.Object)>(r6);

        goto label01;

     label10:
        specialinvoke r4.<org.codehaus.groovy.classgen.AsmClassGenerator: void generateMopCalls(java.util.LinkedList,boolean)>($r1, z0);

        virtualinvoke $r1.<java.util.LinkedList: void clear()>();

        virtualinvoke $r0.<java.util.HashMap: void clear()>();

        return;
    }

    private boolean equalParameterTypes(org.codehaus.groovy.ast.Parameter[], org.codehaus.groovy.ast.Parameter[])
    {
        org.codehaus.groovy.ast.Parameter $r2, $r4;
        org.codehaus.groovy.ast.ClassNode $r3, $r5;
        org.codehaus.groovy.classgen.AsmClassGenerator r6;
        org.codehaus.groovy.ast.Parameter[] r0, r1;
        int $i0, $i1, $i2, i3;
        boolean $z0;

        r6 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r0 := @parameter0: org.codehaus.groovy.ast.Parameter[];

        r1 := @parameter1: org.codehaus.groovy.ast.Parameter[];

        $i1 = lengthof r0;

        $i0 = lengthof r1;

        if $i1 == $i0 goto label1;

        return 0;

     label1:
        i3 = 0;

     label2:
        $i2 = lengthof r0;

        if i3 >= $i2 goto label4;

        $r2 = r0[i3];

        $r3 = virtualinvoke $r2.<org.codehaus.groovy.ast.Parameter: org.codehaus.groovy.ast.ClassNode getType()>();

        $r4 = r1[i3];

        $r5 = virtualinvoke $r4.<org.codehaus.groovy.ast.Parameter: org.codehaus.groovy.ast.ClassNode getType()>();

        $z0 = virtualinvoke $r3.<org.codehaus.groovy.ast.ClassNode: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label3;

        return 0;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        return 1;
    }

    private void generateMopCalls(java.util.LinkedList, boolean)
    {
        groovyjarjarasm.asm.MethodVisitor $r11, $r12, $r14, $r15, $r20, $r21;
        boolean $z0, z1;
        org.codehaus.groovy.classgen.BytecodeHelper $r13;
        groovyjarjarasm.asm.ClassVisitor $r10;
        org.codehaus.groovy.ast.MethodNode r3;
        int $i0, i1, i2;
        java.lang.String $r4, $r8, $r17, $r18;
        java.util.LinkedList r0;
        org.codehaus.groovy.ast.Parameter $r24, $r26;
        java.util.Iterator $r1;
        org.codehaus.groovy.ast.ClassNode $r6, $r16, $r19, $r22, $r23, $r25, $r27, $r28, $r29;
        org.codehaus.groovy.classgen.AsmClassGenerator r9;
        org.codehaus.groovy.ast.Parameter[] $r5, $r7;
        java.lang.Object $r2;

        r9 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r0 := @parameter0: java.util.LinkedList;

        z1 := @parameter1: boolean;

        $r1 = virtualinvoke r0.<java.util.LinkedList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.codehaus.groovy.ast.MethodNode) $r2;

        $r4 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.String getMopMethodName(org.codehaus.groovy.ast.MethodNode,boolean)>(r3, z1);

        $r5 = virtualinvoke r3.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.Parameter[] getParameters()>();

        $r6 = virtualinvoke r3.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.ClassNode getReturnType()>();

        $r7 = virtualinvoke r3.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.Parameter[] getParameters()>();

        $r8 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getMethodDescriptor(org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.Parameter[])>($r6, $r7);

        $r10 = r9.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.ClassVisitor cv>;

        $r11 = interfaceinvoke $r10.<groovyjarjarasm.asm.ClassVisitor: groovyjarjarasm.asm.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>(0, $r4, $r8, null, null);

        r9.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv> = $r11;

        $r12 = r9.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r12.<groovyjarjarasm.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 0);

        i1 = 1;

        $r13 = new org.codehaus.groovy.classgen.BytecodeHelper;

        $r14 = r9.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        specialinvoke $r13.<org.codehaus.groovy.classgen.BytecodeHelper: void <init>(groovyjarjarasm.asm.MethodVisitor)>($r14);

        i2 = 0;

     label2:
        $i0 = lengthof $r5;

        if i2 >= $i0 goto label5;

        $r24 = $r5[i2];

        $r25 = virtualinvoke $r24.<org.codehaus.groovy.ast.Parameter: org.codehaus.groovy.ast.ClassNode getType()>();

        $r26 = $r5[i2];

        $r27 = virtualinvoke $r26.<org.codehaus.groovy.ast.Parameter: org.codehaus.groovy.ast.ClassNode getType()>();

        virtualinvoke $r13.<org.codehaus.groovy.classgen.BytecodeHelper: void load(org.codehaus.groovy.ast.ClassNode,int)>($r27, i1);

        i1 = i1 + 1;

        $r28 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode double_TYPE>;

        if $r25 == $r28 goto label3;

        $r29 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode long_TYPE>;

        if $r25 != $r29 goto label4;

     label3:
        i1 = i1 + 1;

     label4:
        i2 = i2 + 1;

        goto label2;

     label5:
        $r15 = r9.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        $r16 = virtualinvoke r3.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.ClassNode getDeclaringClass()>();

        $r17 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getClassInternalName(org.codehaus.groovy.ast.ClassNode)>($r16);

        $r18 = virtualinvoke r3.<org.codehaus.groovy.ast.MethodNode: java.lang.String getName()>();

        interfaceinvoke $r15.<groovyjarjarasm.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)>(183, $r17, $r18, $r8);

        $r19 = virtualinvoke r3.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.ClassNode getReturnType()>();

        virtualinvoke $r13.<org.codehaus.groovy.classgen.BytecodeHelper: void doReturn(org.codehaus.groovy.ast.ClassNode)>($r19);

        $r20 = r9.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r20.<groovyjarjarasm.asm.MethodVisitor: void visitMaxs(int,int)>(0, 0);

        $r21 = r9.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r21.<groovyjarjarasm.asm.MethodVisitor: void visitEnd()>();

        $r22 = r9.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode classNode>;

        $r23 = virtualinvoke r3.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.ClassNode getReturnType()>();

        virtualinvoke $r22.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.MethodNode addMethod(java.lang.String,int,org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.Parameter[],org.codehaus.groovy.ast.ClassNode[],org.codehaus.groovy.ast.stmt.Statement)>($r4, 0, $r23, $r5, null, null);

        goto label1;

     label6:
        return;
    }

    public static java.lang.String getMopMethodName(org.codehaus.groovy.ast.MethodNode, boolean)
    {
        org.codehaus.groovy.ast.ClassNode r9;
        org.codehaus.groovy.ast.MethodNode r0;
        java.lang.StringBuffer $r1, $r2, $r3, $r4, $r5, $r7;
        int i0;
        java.lang.String $r6, $r8, $r10;
        boolean z0;

        r0 := @parameter0: org.codehaus.groovy.ast.MethodNode;

        z0 := @parameter1: boolean;

        r9 = virtualinvoke r0.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.ClassNode getDeclaringClass()>();

        i0 = 0;

     label1:
        if r9 == null goto label2;

        i0 = i0 + 1;

        r9 = virtualinvoke r9.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode getSuperClass()>();

        goto label1;

     label2:
        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        if z0 == 0 goto label3;

        $r10 = "this";

        goto label4;

     label3:
        $r10 = "super";

     label4:
        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("$");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("$");

        $r6 = virtualinvoke r0.<org.codehaus.groovy.ast.MethodNode: java.lang.String getName()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r8;
    }

    public static boolean isMopMethod(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("this$");

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("super$");

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    protected void visitConstructorOrMethod(org.codehaus.groovy.ast.MethodNode, boolean)
    {
        java.lang.Runnable r21;
        groovyjarjarasm.asm.MethodVisitor $r11, $r12, $r14, $r15, $r17, $r19, $r22, $r24, $r28, $r32, $r36, $r39;
        boolean $z0, $z1, z2, $z3, $z4, $z5, $z6;
        org.codehaus.groovy.classgen.CompileStack $r30, $r40;
        java.util.List $r18, $r41;
        org.codehaus.groovy.ast.stmt.Statement $r16;
        org.codehaus.groovy.ast.VariableScope $r31;
        org.codehaus.groovy.classgen.BytecodeHelper $r13;
        java.lang.String[] $r10;
        groovyjarjarasm.asm.ClassVisitor $r7;
        org.codehaus.groovy.ast.MethodNode r0;
        int $i0, i1, i2, $i3;
        org.codehaus.groovy.ast.ClassNode[] $r9;
        java.lang.String $r3, $r4, $r8, $r26;
        org.codehaus.groovy.ast.Parameter $r29;
        java.util.Iterator $r42;
        org.codehaus.groovy.ast.ClassNode $r2, $r23, $r25, $r33, $r35, $r38;
        org.codehaus.groovy.classgen.AsmClassGenerator r5;
        org.codehaus.groovy.ast.expr.ClassExpression $r34, $r37;
        org.codehaus.groovy.ast.Parameter[] $r1, $r6;
        java.lang.Object $r20;
        org.codehaus.groovy.ast.ConstructorNode $r27;

        r5 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r0 := @parameter0: org.codehaus.groovy.ast.MethodNode;

        z2 := @parameter1: boolean;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.Parameter[] getParameters()>();

        $r2 = virtualinvoke r0.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.ClassNode getReturnType()>();

        $r3 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getMethodDescriptor(org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.Parameter[])>($r2, $r1);

        $r4 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getGenericsMethodSignature(org.codehaus.groovy.ast.MethodNode)>(r0);

        $i0 = virtualinvoke r0.<org.codehaus.groovy.ast.MethodNode: int getModifiers()>();

        i1 = $i0;

        $r6 = virtualinvoke r0.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.Parameter[] getParameters()>();

        $z0 = specialinvoke r5.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean isVargs(org.codehaus.groovy.ast.Parameter[])>($r6);

        if $z0 == 0 goto label01;

        i1 = $i0 | 128;

     label01:
        $r7 = r5.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.ClassVisitor cv>;

        $r8 = virtualinvoke r0.<org.codehaus.groovy.ast.MethodNode: java.lang.String getName()>();

        $r9 = virtualinvoke r0.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.ClassNode[] getExceptions()>();

        $r10 = specialinvoke r5.<org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.String[] buildExceptions(org.codehaus.groovy.ast.ClassNode[])>($r9);

        $r11 = interfaceinvoke $r7.<groovyjarjarasm.asm.ClassVisitor: groovyjarjarasm.asm.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>(i1, $r8, $r3, $r4, $r10);

        r5.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv> = $r11;

        $r12 = r5.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        specialinvoke r5.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitAnnotations(org.codehaus.groovy.ast.AnnotatedNode,java.lang.Object)>(r0, $r12);

        i2 = 0;

     label02:
        $i3 = lengthof $r1;

        if i2 >= $i3 goto label03;

        $r29 = $r1[i2];

        $r28 = r5.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        specialinvoke r5.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitParameterAnnotations(org.codehaus.groovy.ast.Parameter,int,groovyjarjarasm.asm.MethodVisitor)>($r29, i2, $r28);

        i2 = i2 + 1;

        goto label02;

     label03:
        $r13 = new org.codehaus.groovy.classgen.BytecodeHelper;

        $r14 = r5.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        specialinvoke $r13.<org.codehaus.groovy.classgen.BytecodeHelper: void <init>(groovyjarjarasm.asm.MethodVisitor)>($r14);

        r5.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.BytecodeHelper helper> = $r13;

        $z1 = virtualinvoke r0.<org.codehaus.groovy.ast.MethodNode: boolean isAbstract()>();

        if $z1 != 0 goto label10;

        $r16 = virtualinvoke r0.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.stmt.Statement getCode()>();

        if z2 == 0 goto label05;

        if $r16 == null goto label04;

        $r27 = (org.codehaus.groovy.ast.ConstructorNode) r0;

        $z4 = virtualinvoke $r27.<org.codehaus.groovy.ast.ConstructorNode: boolean firstStatementIsSpecialConstructorCall()>();

        if $z4 != 0 goto label05;

     label04:
        $r22 = r5.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r22.<groovyjarjarasm.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 0);

        $r24 = r5.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        $r23 = r5.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode classNode>;

        $r25 = virtualinvoke $r23.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode getSuperClass()>();

        $r26 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getClassInternalName(org.codehaus.groovy.ast.ClassNode)>($r25);

        interfaceinvoke $r24.<groovyjarjarasm.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)>(183, $r26, "<init>", "()V");

     label05:
        $r30 = r5.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        $r31 = virtualinvoke r0.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.VariableScope getVariableScope()>();

        $r32 = r5.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        $r33 = r5.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode classNode>;

        virtualinvoke $r30.<org.codehaus.groovy.classgen.CompileStack: void init(org.codehaus.groovy.ast.VariableScope,org.codehaus.groovy.ast.Parameter[],groovyjarjarasm.asm.MethodVisitor,org.codehaus.groovy.ast.ClassNode)>($r31, $r1, $r32, $r33);

        $r34 = new org.codehaus.groovy.ast.expr.ClassExpression;

        $r35 = r5.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode classNode>;

        specialinvoke $r34.<org.codehaus.groovy.ast.expr.ClassExpression: void <init>(org.codehaus.groovy.ast.ClassNode)>($r35);

        virtualinvoke $r34.<org.codehaus.groovy.ast.expr.ClassExpression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r5);

        $r36 = r5.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r36.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(87);

        $r37 = new org.codehaus.groovy.ast.expr.ClassExpression;

        $r38 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode METACLASS_TYPE>;

        specialinvoke $r37.<org.codehaus.groovy.ast.expr.ClassExpression: void <init>(org.codehaus.groovy.ast.ClassNode)>($r38);

        virtualinvoke $r37.<org.codehaus.groovy.ast.expr.ClassExpression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r5);

        $r39 = r5.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r39.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(87);

        specialinvoke r5.<org.codehaus.groovy.classgen.ClassGenerator: void visitConstructorOrMethod(org.codehaus.groovy.ast.MethodNode,boolean)>(r0, z2);

        $z5 = r5.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean outputReturn>;

        if $z5 == 0 goto label06;

        $z3 = virtualinvoke r0.<org.codehaus.groovy.ast.MethodNode: boolean isVoidMethod()>();

        if $z3 == 0 goto label07;

     label06:
        $r17 = r5.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r17.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(177);

     label07:
        $r40 = r5.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        virtualinvoke $r40.<org.codehaus.groovy.classgen.CompileStack: void clear()>();

        $r41 = r5.<org.codehaus.groovy.classgen.AsmClassGenerator: java.util.List exceptionBlocks>;

        $r42 = interfaceinvoke $r41.<java.util.List: java.util.Iterator iterator()>();

     label08:
        $z6 = interfaceinvoke $r42.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label09;

        $r20 = interfaceinvoke $r42.<java.util.Iterator: java.lang.Object next()>();

        r21 = (java.lang.Runnable) $r20;

        interfaceinvoke r21.<java.lang.Runnable: void run()>();

        goto label08;

     label09:
        $r18 = r5.<org.codehaus.groovy.classgen.AsmClassGenerator: java.util.List exceptionBlocks>;

        interfaceinvoke $r18.<java.util.List: void clear()>();

        $r19 = r5.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r19.<groovyjarjarasm.asm.MethodVisitor: void visitMaxs(int,int)>(0, 0);

     label10:
        $r15 = r5.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r15.<groovyjarjarasm.asm.MethodVisitor: void visitEnd()>();

        return;
    }

    private boolean isVargs(org.codehaus.groovy.ast.Parameter[])
    {
        org.codehaus.groovy.ast.Parameter $r1;
        org.codehaus.groovy.ast.ClassNode $r2;
        org.codehaus.groovy.classgen.AsmClassGenerator r3;
        org.codehaus.groovy.ast.Parameter[] r0;
        int $i0, $i1, $i2;
        boolean $z0;

        r3 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r0 := @parameter0: org.codehaus.groovy.ast.Parameter[];

        $i0 = lengthof r0;

        if $i0 != 0 goto label1;

        return 0;

     label1:
        $i1 = lengthof r0;

        $i2 = $i1 - 1;

        $r1 = r0[$i2];

        $r2 = virtualinvoke $r1.<org.codehaus.groovy.ast.Parameter: org.codehaus.groovy.ast.ClassNode getType()>();

        $z0 = virtualinvoke $r2.<org.codehaus.groovy.ast.ClassNode: boolean isArray()>();

        return $z0;
    }

    public void visitConstructor(org.codehaus.groovy.ast.ConstructorNode)
    {
        org.codehaus.groovy.classgen.AsmClassGenerator r0;
        org.codehaus.groovy.ast.ConstructorNode r1;

        r0 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r1 := @parameter0: org.codehaus.groovy.ast.ConstructorNode;

        r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ConstructorNode constructorNode> = r1;

        r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.MethodNode methodNode> = null;

        r0.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean outputReturn> = 0;

        specialinvoke r0.<org.codehaus.groovy.classgen.ClassGenerator: void visitConstructor(org.codehaus.groovy.ast.ConstructorNode)>(r1);

        return;
    }

    public void visitMethod(org.codehaus.groovy.ast.MethodNode)
    {
        org.codehaus.groovy.classgen.AsmClassGenerator r0;
        org.codehaus.groovy.ast.MethodNode r1;

        r0 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r1 := @parameter0: org.codehaus.groovy.ast.MethodNode;

        r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ConstructorNode constructorNode> = null;

        r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.MethodNode methodNode> = r1;

        r0.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean outputReturn> = 0;

        specialinvoke r0.<org.codehaus.groovy.classgen.ClassGenerator: void visitMethod(org.codehaus.groovy.ast.MethodNode)>(r1);

        return;
    }

    public void visitField(org.codehaus.groovy.ast.FieldNode)
    {
        org.codehaus.groovy.ast.ClassNode $r7;
        org.codehaus.groovy.classgen.AsmClassGenerator r0;
        groovyjarjarasm.asm.ClassVisitor $r9;
        org.codehaus.groovy.ast.FieldNode r1;
        java.lang.StringBuffer $r2, $r3, $r5;
        int $i0;
        java.lang.String $r4, $r6, $r8, $r10, $r11;
        groovyjarjarasm.asm.FieldVisitor $r12;

        r0 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r1 := @parameter0: org.codehaus.groovy.ast.FieldNode;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("visitField: ");

        $r4 = virtualinvoke r1.<org.codehaus.groovy.ast.FieldNode: java.lang.String getName()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void onLineNumber(org.codehaus.groovy.ast.ASTNode,java.lang.String)>(r1, $r6);

        $r7 = virtualinvoke r1.<org.codehaus.groovy.ast.FieldNode: org.codehaus.groovy.ast.ClassNode getType()>();

        $r8 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getGenericsBounds(org.codehaus.groovy.ast.ClassNode)>($r7);

        $r9 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.ClassVisitor cv>;

        $i0 = virtualinvoke r1.<org.codehaus.groovy.ast.FieldNode: int getModifiers()>();

        $r10 = virtualinvoke r1.<org.codehaus.groovy.ast.FieldNode: java.lang.String getName()>();

        $r11 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getTypeDescription(org.codehaus.groovy.ast.ClassNode)>($r7);

        $r12 = interfaceinvoke $r9.<groovyjarjarasm.asm.ClassVisitor: groovyjarjarasm.asm.FieldVisitor visitField(int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)>($i0, $r10, $r11, $r8, null);

        specialinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitAnnotations(org.codehaus.groovy.ast.AnnotatedNode,java.lang.Object)>(r1, $r12);

        interfaceinvoke $r12.<groovyjarjarasm.asm.FieldVisitor: void visitEnd()>();

        return;
    }

    public void visitProperty(org.codehaus.groovy.ast.PropertyNode)
    {
        org.codehaus.groovy.classgen.AsmClassGenerator r0;
        java.lang.StringBuffer $r2, $r3, $r6;
        org.codehaus.groovy.ast.FieldNode $r4;
        java.lang.String $r5, $r7;
        org.codehaus.groovy.ast.PropertyNode r1;

        r0 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r1 := @parameter0: org.codehaus.groovy.ast.PropertyNode;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("visitProperty:");

        $r4 = virtualinvoke r1.<org.codehaus.groovy.ast.PropertyNode: org.codehaus.groovy.ast.FieldNode getField()>();

        $r5 = virtualinvoke $r4.<org.codehaus.groovy.ast.FieldNode: java.lang.String getName()>();

        $r6 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void onLineNumber(org.codehaus.groovy.ast.ASTNode,java.lang.String)>(r1, $r7);

        r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.MethodNode methodNode> = null;

        return;
    }

    protected void visitStatement(org.codehaus.groovy.ast.stmt.Statement)
    {
        org.codehaus.groovy.ast.stmt.Statement r0;
        org.codehaus.groovy.classgen.CompileStack $r3;
        org.codehaus.groovy.classgen.AsmClassGenerator r2;
        java.lang.String $r1;
        groovyjarjarasm.asm.Label $r4;
        groovyjarjarasm.asm.MethodVisitor $r5;

        r2 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r0 := @parameter0: org.codehaus.groovy.ast.stmt.Statement;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.stmt.Statement: java.lang.String getStatementLabel()>();

        if $r1 == null goto label1;

        $r3 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        $r4 = virtualinvoke $r3.<org.codehaus.groovy.classgen.CompileStack: groovyjarjarasm.asm.Label createLocalLabel(java.lang.String)>($r1);

        $r5 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r5.<groovyjarjarasm.asm.MethodVisitor: void visitLabel(groovyjarjarasm.asm.Label)>($r4);

     label1:
        return;
    }

    public void visitBlockStatement(org.codehaus.groovy.ast.stmt.BlockStatement)
    {
        org.codehaus.groovy.classgen.CompileStack $r2, $r4;
        org.codehaus.groovy.ast.VariableScope $r3;
        org.codehaus.groovy.ast.stmt.BlockStatement r1;
        org.codehaus.groovy.classgen.AsmClassGenerator r0;

        r0 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r1 := @parameter0: org.codehaus.groovy.ast.stmt.BlockStatement;

        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void onLineNumber(org.codehaus.groovy.ast.ASTNode,java.lang.String)>(r1, "visitBlockStatement");

        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitStatement(org.codehaus.groovy.ast.stmt.Statement)>(r1);

        $r2 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        $r3 = virtualinvoke r1.<org.codehaus.groovy.ast.stmt.BlockStatement: org.codehaus.groovy.ast.VariableScope getVariableScope()>();

        virtualinvoke $r2.<org.codehaus.groovy.classgen.CompileStack: void pushVariableScope(org.codehaus.groovy.ast.VariableScope)>($r3);

        specialinvoke r0.<org.codehaus.groovy.classgen.ClassGenerator: void visitBlockStatement(org.codehaus.groovy.ast.stmt.BlockStatement)>(r1);

        $r4 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        virtualinvoke $r4.<org.codehaus.groovy.classgen.CompileStack: void pop()>();

        return;
    }

    private void visitExpressionOrStatement(java.lang.Object)
    {
        org.codehaus.groovy.ast.stmt.Statement $r3;
        org.codehaus.groovy.classgen.AsmClassGenerator r2;
        groovyjarjarasm.asm.MethodVisitor $r5;
        java.lang.Object r0;
        org.codehaus.groovy.ast.expr.EmptyExpression $r1;
        org.codehaus.groovy.ast.expr.Expression r4;
        boolean $z0, $z1;

        r2 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r0 := @parameter0: java.lang.Object;

        $r1 = <org.codehaus.groovy.ast.expr.EmptyExpression: org.codehaus.groovy.ast.expr.EmptyExpression INSTANCE>;

        if r0 != $r1 goto label1;

        return;

     label1:
        $z0 = r0 instanceof org.codehaus.groovy.ast.expr.Expression;

        if $z0 == 0 goto label3;

        r4 = (org.codehaus.groovy.ast.expr.Expression) r0;

        virtualinvoke r2.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitAndAutoboxBoolean(org.codehaus.groovy.ast.expr.Expression)>(r4);

        $z1 = virtualinvoke r2.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean isPopRequired(org.codehaus.groovy.ast.expr.Expression)>(r4);

        if $z1 == 0 goto label2;

        $r5 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r5.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(87);

     label2:
        goto label4;

     label3:
        $r3 = (org.codehaus.groovy.ast.stmt.Statement) r0;

        virtualinvoke $r3.<org.codehaus.groovy.ast.stmt.Statement: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r2);

     label4:
        return;
    }

    private void visitForLoopWithClosureList(org.codehaus.groovy.ast.stmt.ForStatement)
    {
        groovyjarjarasm.asm.MethodVisitor $r15, $r20, $r21, $r25, $r28, $r30;
        org.codehaus.groovy.ast.stmt.ForStatement r1;
        boolean $z0;
        org.codehaus.groovy.ast.expr.ClosureListExpression r6;
        org.codehaus.groovy.classgen.CompileStack $r2, $r7, $r10, $r12, $r22, $r23;
        java.util.List $r9;
        org.codehaus.groovy.ast.stmt.Statement $r29;
        org.codehaus.groovy.ast.VariableScope $r3, $r8;
        org.codehaus.groovy.classgen.BytecodeHelper $r19;
        int $i0, $i1, i2, i3, i4;
        java.lang.String $r4;
        org.codehaus.groovy.ast.expr.Expression $r5, r27;
        org.codehaus.groovy.ast.expr.EmptyExpression $r17;
        groovyjarjarasm.asm.Label $r11, $r13, $r14;
        org.codehaus.groovy.ast.ClassNode $r18;
        org.codehaus.groovy.classgen.AsmClassGenerator r0;
        java.lang.Object $r16, $r24, $r26;

        r0 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r1 := @parameter0: org.codehaus.groovy.ast.stmt.ForStatement;

        $r2 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        $r3 = virtualinvoke r1.<org.codehaus.groovy.ast.stmt.ForStatement: org.codehaus.groovy.ast.VariableScope getVariableScope()>();

        $r4 = virtualinvoke r1.<org.codehaus.groovy.ast.stmt.ForStatement: java.lang.String getStatementLabel()>();

        virtualinvoke $r2.<org.codehaus.groovy.classgen.CompileStack: void pushLoop(org.codehaus.groovy.ast.VariableScope,java.lang.String)>($r3, $r4);

        $r5 = virtualinvoke r1.<org.codehaus.groovy.ast.stmt.ForStatement: org.codehaus.groovy.ast.expr.Expression getCollectionExpression()>();

        r6 = (org.codehaus.groovy.ast.expr.ClosureListExpression) $r5;

        $r7 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        $r8 = virtualinvoke r6.<org.codehaus.groovy.ast.expr.ClosureListExpression: org.codehaus.groovy.ast.VariableScope getVariableScope()>();

        virtualinvoke $r7.<org.codehaus.groovy.classgen.CompileStack: void pushVariableScope(org.codehaus.groovy.ast.VariableScope)>($r8);

        $r9 = virtualinvoke r6.<org.codehaus.groovy.ast.expr.ClosureListExpression: java.util.List getExpressions()>();

        $i0 = interfaceinvoke $r9.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        i2 = $i1 / 2;

        i3 = 0;

     label1:
        if i3 >= i2 goto label2;

        $r26 = interfaceinvoke $r9.<java.util.List: java.lang.Object get(int)>(i3);

        specialinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitExpressionOrStatement(java.lang.Object)>($r26);

        i3 = i3 + 1;

        goto label1;

     label2:
        $r10 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        $r11 = virtualinvoke $r10.<org.codehaus.groovy.classgen.CompileStack: groovyjarjarasm.asm.Label getContinueLabel()>();

        $r12 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        $r13 = virtualinvoke $r12.<org.codehaus.groovy.classgen.CompileStack: groovyjarjarasm.asm.Label getBreakLabel()>();

        $r14 = new groovyjarjarasm.asm.Label;

        specialinvoke $r14.<groovyjarjarasm.asm.Label: void <init>()>();

        $r15 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r15.<groovyjarjarasm.asm.MethodVisitor: void visitLabel(groovyjarjarasm.asm.Label)>($r14);

        $r16 = interfaceinvoke $r9.<java.util.List: java.lang.Object get(int)>(i2);

        r27 = (org.codehaus.groovy.ast.expr.Expression) $r16;

        $r17 = <org.codehaus.groovy.ast.expr.EmptyExpression: org.codehaus.groovy.ast.expr.EmptyExpression INSTANCE>;

        if r27 != $r17 goto label3;

        $r25 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r25.<groovyjarjarasm.asm.MethodVisitor: void visitIntInsn(int,int)>(16, 1);

        goto label5;

     label3:
        $z0 = virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean isComparisonExpression(org.codehaus.groovy.ast.expr.Expression)>(r27);

        if $z0 == 0 goto label4;

        virtualinvoke r27.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r0);

        goto label5;

     label4:
        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitAndAutoboxBoolean(org.codehaus.groovy.ast.expr.Expression)>(r27);

        $r19 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.BytecodeHelper helper>;

        $r18 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode boolean_TYPE>;

        virtualinvoke $r19.<org.codehaus.groovy.classgen.BytecodeHelper: void unbox(org.codehaus.groovy.ast.ClassNode)>($r18);

     label5:
        $r28 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r28.<groovyjarjarasm.asm.MethodVisitor: void visitJumpInsn(int,groovyjarjarasm.asm.Label)>(153, $r13);

        $r29 = virtualinvoke r1.<org.codehaus.groovy.ast.stmt.ForStatement: org.codehaus.groovy.ast.stmt.Statement getLoopBlock()>();

        virtualinvoke $r29.<org.codehaus.groovy.ast.stmt.Statement: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r0);

        $r30 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r30.<groovyjarjarasm.asm.MethodVisitor: void visitLabel(groovyjarjarasm.asm.Label)>($r11);

        i4 = i2 + 1;

     label6:
        if i4 >= $i0 goto label7;

        $r24 = interfaceinvoke $r9.<java.util.List: java.lang.Object get(int)>(i4);

        specialinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitExpressionOrStatement(java.lang.Object)>($r24);

        i4 = i4 + 1;

        goto label6;

     label7:
        $r20 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r20.<groovyjarjarasm.asm.MethodVisitor: void visitJumpInsn(int,groovyjarjarasm.asm.Label)>(167, $r14);

        $r21 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r21.<groovyjarjarasm.asm.MethodVisitor: void visitLabel(groovyjarjarasm.asm.Label)>($r13);

        $r22 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        virtualinvoke $r22.<org.codehaus.groovy.classgen.CompileStack: void pop()>();

        $r23 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        virtualinvoke $r23.<org.codehaus.groovy.classgen.CompileStack: void pop()>();

        return;
    }

    public void visitForLoop(org.codehaus.groovy.ast.stmt.ForStatement)
    {
        groovyjarjarasm.asm.MethodVisitor $r20, $r21, $r22, $r24, $r25, $r26, $r30, $r31;
        org.codehaus.groovy.classgen.Variable $r9;
        org.codehaus.groovy.ast.stmt.ForStatement r1;
        org.codehaus.groovy.ast.expr.ArgumentListExpression $r12;
        org.codehaus.groovy.classgen.MethodCaller $r23, $r27;
        org.codehaus.groovy.classgen.CompileStack $r4, $r7, $r14, $r16, $r18, $r32;
        org.codehaus.groovy.ast.stmt.Statement $r29;
        org.codehaus.groovy.ast.VariableScope $r5;
        org.codehaus.groovy.classgen.BytecodeHelper $r28;
        int $i0;
        org.codehaus.groovy.ast.expr.MethodCallExpression $r10;
        java.lang.String $r6;
        org.codehaus.groovy.ast.expr.Expression $r11;
        groovyjarjarasm.asm.Label $r17, $r19;
        org.codehaus.groovy.ast.Parameter $r2, $r3, $r8;
        org.codehaus.groovy.ast.ClassNode $r15;
        org.codehaus.groovy.classgen.AsmClassGenerator r0;
        java.lang.Class $r13, $r33;

        r0 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r1 := @parameter0: org.codehaus.groovy.ast.stmt.ForStatement;

        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void onLineNumber(org.codehaus.groovy.ast.ASTNode,java.lang.String)>(r1, "visitForLoop");

        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitStatement(org.codehaus.groovy.ast.stmt.Statement)>(r1);

        $r2 = virtualinvoke r1.<org.codehaus.groovy.ast.stmt.ForStatement: org.codehaus.groovy.ast.Parameter getVariable()>();

        $r3 = <org.codehaus.groovy.ast.stmt.ForStatement: org.codehaus.groovy.ast.Parameter FOR_LOOP_DUMMY>;

        if $r2 != $r3 goto label1;

        specialinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitForLoopWithClosureList(org.codehaus.groovy.ast.stmt.ForStatement)>(r1);

        return;

     label1:
        $r4 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        $r5 = virtualinvoke r1.<org.codehaus.groovy.ast.stmt.ForStatement: org.codehaus.groovy.ast.VariableScope getVariableScope()>();

        $r6 = virtualinvoke r1.<org.codehaus.groovy.ast.stmt.ForStatement: java.lang.String getStatementLabel()>();

        virtualinvoke $r4.<org.codehaus.groovy.classgen.CompileStack: void pushLoop(org.codehaus.groovy.ast.VariableScope,java.lang.String)>($r5, $r6);

        $r7 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        $r8 = virtualinvoke r1.<org.codehaus.groovy.ast.stmt.ForStatement: org.codehaus.groovy.ast.Parameter getVariable()>();

        $r9 = virtualinvoke $r7.<org.codehaus.groovy.classgen.CompileStack: org.codehaus.groovy.classgen.Variable defineVariable(org.codehaus.groovy.ast.Variable,boolean)>($r8, 0);

        $r10 = new org.codehaus.groovy.ast.expr.MethodCallExpression;

        $r11 = virtualinvoke r1.<org.codehaus.groovy.ast.stmt.ForStatement: org.codehaus.groovy.ast.expr.Expression getCollectionExpression()>();

        $r12 = new org.codehaus.groovy.ast.expr.ArgumentListExpression;

        specialinvoke $r12.<org.codehaus.groovy.ast.expr.ArgumentListExpression: void <init>()>();

        specialinvoke $r10.<org.codehaus.groovy.ast.expr.MethodCallExpression: void <init>(org.codehaus.groovy.ast.expr.Expression,java.lang.String,org.codehaus.groovy.ast.expr.Expression)>($r11, "iterator", $r12);

        virtualinvoke $r10.<org.codehaus.groovy.ast.expr.MethodCallExpression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r0);

        $r14 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        $r13 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$java$util$Iterator>;

        if $r13 != null goto label2;

        $r33 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$(java.lang.String)>("java.util.Iterator");

        <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$java$util$Iterator> = $r33;

        goto label3;

     label2:
        $r33 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$java$util$Iterator>;

     label3:
        $r15 = staticinvoke <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode make(java.lang.Class)>($r33);

        $i0 = virtualinvoke $r14.<org.codehaus.groovy.classgen.CompileStack: int defineTemporaryVariable(java.lang.String,org.codehaus.groovy.ast.ClassNode,boolean)>("iterator", $r15, 1);

        $r16 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        $r17 = virtualinvoke $r16.<org.codehaus.groovy.classgen.CompileStack: groovyjarjarasm.asm.Label getContinueLabel()>();

        $r18 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        $r19 = virtualinvoke $r18.<org.codehaus.groovy.classgen.CompileStack: groovyjarjarasm.asm.Label getBreakLabel()>();

        $r20 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r20.<groovyjarjarasm.asm.MethodVisitor: void visitLabel(groovyjarjarasm.asm.Label)>($r17);

        $r21 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r21.<groovyjarjarasm.asm.MethodVisitor: void visitVarInsn(int,int)>(25, $i0);

        $r23 = <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCaller iteratorHasNextMethod>;

        $r22 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        virtualinvoke $r23.<org.codehaus.groovy.classgen.MethodCaller: void call(groovyjarjarasm.asm.MethodVisitor)>($r22);

        $r24 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r24.<groovyjarjarasm.asm.MethodVisitor: void visitJumpInsn(int,groovyjarjarasm.asm.Label)>(153, $r19);

        $r25 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r25.<groovyjarjarasm.asm.MethodVisitor: void visitVarInsn(int,int)>(25, $i0);

        $r27 = <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCaller iteratorNextMethod>;

        $r26 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        virtualinvoke $r27.<org.codehaus.groovy.classgen.MethodCaller: void call(groovyjarjarasm.asm.MethodVisitor)>($r26);

        $r28 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.BytecodeHelper helper>;

        virtualinvoke $r28.<org.codehaus.groovy.classgen.BytecodeHelper: void storeVar(org.codehaus.groovy.classgen.Variable)>($r9);

        $r29 = virtualinvoke r1.<org.codehaus.groovy.ast.stmt.ForStatement: org.codehaus.groovy.ast.stmt.Statement getLoopBlock()>();

        virtualinvoke $r29.<org.codehaus.groovy.ast.stmt.Statement: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r0);

        $r30 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r30.<groovyjarjarasm.asm.MethodVisitor: void visitJumpInsn(int,groovyjarjarasm.asm.Label)>(167, $r17);

        $r31 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r31.<groovyjarjarasm.asm.MethodVisitor: void visitLabel(groovyjarjarasm.asm.Label)>($r19);

        $r32 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        virtualinvoke $r32.<org.codehaus.groovy.classgen.CompileStack: void pop()>();

        return;
    }

    public void visitWhileLoop(org.codehaus.groovy.ast.stmt.WhileStatement)
    {
        org.codehaus.groovy.ast.stmt.Statement $r10;
        org.codehaus.groovy.ast.expr.BooleanExpression $r9;
        org.codehaus.groovy.ast.expr.ConstantExpression r15;
        org.codehaus.groovy.ast.stmt.WhileStatement r1;
        groovyjarjarasm.asm.MethodVisitor $r8, $r11, $r12, $r14, $r20;
        java.lang.Boolean $r17, $r19;
        java.lang.String $r3;
        groovyjarjarasm.asm.Label $r5, $r7;
        boolean $z0, z1;
        org.codehaus.groovy.classgen.AsmClassGenerator r0;
        org.codehaus.groovy.classgen.CompileStack $r2, $r4, $r6, $r13;
        java.lang.Object $r16, $r18;

        r0 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r1 := @parameter0: org.codehaus.groovy.ast.stmt.WhileStatement;

        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void onLineNumber(org.codehaus.groovy.ast.ASTNode,java.lang.String)>(r1, "visitWhileLoop");

        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitStatement(org.codehaus.groovy.ast.stmt.Statement)>(r1);

        $r2 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        $r3 = virtualinvoke r1.<org.codehaus.groovy.ast.stmt.WhileStatement: java.lang.String getStatementLabel()>();

        virtualinvoke $r2.<org.codehaus.groovy.classgen.CompileStack: void pushLoop(java.lang.String)>($r3);

        $r4 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        $r5 = virtualinvoke $r4.<org.codehaus.groovy.classgen.CompileStack: groovyjarjarasm.asm.Label getContinueLabel()>();

        $r6 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        $r7 = virtualinvoke $r6.<org.codehaus.groovy.classgen.CompileStack: groovyjarjarasm.asm.Label getBreakLabel()>();

        $r8 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r8.<groovyjarjarasm.asm.MethodVisitor: void visitLabel(groovyjarjarasm.asm.Label)>($r5);

        $r9 = virtualinvoke r1.<org.codehaus.groovy.ast.stmt.WhileStatement: org.codehaus.groovy.ast.expr.BooleanExpression getBooleanExpression()>();

        z1 = 0;

        $z0 = $r9 instanceof org.codehaus.groovy.ast.expr.ConstantExpression;

        if $z0 == 0 goto label2;

        r15 = (org.codehaus.groovy.ast.expr.ConstantExpression) $r9;

        $r16 = virtualinvoke r15.<org.codehaus.groovy.ast.expr.ConstantExpression: java.lang.Object getValue()>();

        $r17 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        if $r16 != $r17 goto label1;

        z1 = 1;

        goto label2;

     label1:
        $r18 = virtualinvoke r15.<org.codehaus.groovy.ast.expr.ConstantExpression: java.lang.Object getValue()>();

        $r19 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        if $r18 != $r19 goto label2;

        z1 = 1;

        $r20 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r20.<groovyjarjarasm.asm.MethodVisitor: void visitJumpInsn(int,groovyjarjarasm.asm.Label)>(167, $r7);

     label2:
        if z1 != 0 goto label3;

        virtualinvoke $r9.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r0);

        $r14 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r14.<groovyjarjarasm.asm.MethodVisitor: void visitJumpInsn(int,groovyjarjarasm.asm.Label)>(153, $r7);

     label3:
        $r10 = virtualinvoke r1.<org.codehaus.groovy.ast.stmt.WhileStatement: org.codehaus.groovy.ast.stmt.Statement getLoopBlock()>();

        virtualinvoke $r10.<org.codehaus.groovy.ast.stmt.Statement: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r0);

        $r11 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r11.<groovyjarjarasm.asm.MethodVisitor: void visitJumpInsn(int,groovyjarjarasm.asm.Label)>(167, $r5);

        $r12 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r12.<groovyjarjarasm.asm.MethodVisitor: void visitLabel(groovyjarjarasm.asm.Label)>($r7);

        $r13 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        virtualinvoke $r13.<org.codehaus.groovy.classgen.CompileStack: void pop()>();

        return;
    }

    public void visitDoWhileLoop(org.codehaus.groovy.ast.stmt.DoWhileStatement)
    {
        org.codehaus.groovy.ast.stmt.Statement $r9;
        org.codehaus.groovy.ast.expr.BooleanExpression $r10;
        org.codehaus.groovy.classgen.AsmClassGenerator r0;
        groovyjarjarasm.asm.MethodVisitor $r8, $r11, $r12;
        org.codehaus.groovy.classgen.CompileStack $r2, $r4, $r6, $r13;
        org.codehaus.groovy.ast.stmt.DoWhileStatement r1;
        java.lang.String $r3;
        groovyjarjarasm.asm.Label $r5, $r7;

        r0 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r1 := @parameter0: org.codehaus.groovy.ast.stmt.DoWhileStatement;

        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void onLineNumber(org.codehaus.groovy.ast.ASTNode,java.lang.String)>(r1, "visitDoWhileLoop");

        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitStatement(org.codehaus.groovy.ast.stmt.Statement)>(r1);

        $r2 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        $r3 = virtualinvoke r1.<org.codehaus.groovy.ast.stmt.DoWhileStatement: java.lang.String getStatementLabel()>();

        virtualinvoke $r2.<org.codehaus.groovy.classgen.CompileStack: void pushLoop(java.lang.String)>($r3);

        $r4 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        $r5 = virtualinvoke $r4.<org.codehaus.groovy.classgen.CompileStack: groovyjarjarasm.asm.Label getBreakLabel()>();

        $r6 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        $r7 = virtualinvoke $r6.<org.codehaus.groovy.classgen.CompileStack: groovyjarjarasm.asm.Label getContinueLabel()>();

        $r8 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r8.<groovyjarjarasm.asm.MethodVisitor: void visitLabel(groovyjarjarasm.asm.Label)>($r7);

        $r9 = virtualinvoke r1.<org.codehaus.groovy.ast.stmt.DoWhileStatement: org.codehaus.groovy.ast.stmt.Statement getLoopBlock()>();

        virtualinvoke $r9.<org.codehaus.groovy.ast.stmt.Statement: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r0);

        $r10 = virtualinvoke r1.<org.codehaus.groovy.ast.stmt.DoWhileStatement: org.codehaus.groovy.ast.expr.BooleanExpression getBooleanExpression()>();

        virtualinvoke $r10.<org.codehaus.groovy.ast.expr.BooleanExpression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r0);

        $r11 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r11.<groovyjarjarasm.asm.MethodVisitor: void visitJumpInsn(int,groovyjarjarasm.asm.Label)>(153, $r7);

        $r12 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r12.<groovyjarjarasm.asm.MethodVisitor: void visitLabel(groovyjarjarasm.asm.Label)>($r5);

        $r13 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        virtualinvoke $r13.<org.codehaus.groovy.classgen.CompileStack: void pop()>();

        return;
    }

    public void visitIfElse(org.codehaus.groovy.ast.stmt.IfStatement)
    {
        org.codehaus.groovy.ast.stmt.Statement $r6, $r12;
        org.codehaus.groovy.ast.expr.BooleanExpression $r2;
        org.codehaus.groovy.classgen.AsmClassGenerator r0;
        groovyjarjarasm.asm.MethodVisitor $r4, $r9, $r10, $r14;
        org.codehaus.groovy.classgen.CompileStack $r5, $r7, $r11, $r13;
        org.codehaus.groovy.ast.stmt.IfStatement r1;
        groovyjarjarasm.asm.Label $r3, $r8;

        r0 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r1 := @parameter0: org.codehaus.groovy.ast.stmt.IfStatement;

        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void onLineNumber(org.codehaus.groovy.ast.ASTNode,java.lang.String)>(r1, "visitIfElse");

        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitStatement(org.codehaus.groovy.ast.stmt.Statement)>(r1);

        $r2 = virtualinvoke r1.<org.codehaus.groovy.ast.stmt.IfStatement: org.codehaus.groovy.ast.expr.BooleanExpression getBooleanExpression()>();

        virtualinvoke $r2.<org.codehaus.groovy.ast.expr.BooleanExpression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r0);

        $r3 = new groovyjarjarasm.asm.Label;

        specialinvoke $r3.<groovyjarjarasm.asm.Label: void <init>()>();

        $r4 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r4.<groovyjarjarasm.asm.MethodVisitor: void visitJumpInsn(int,groovyjarjarasm.asm.Label)>(153, $r3);

        $r5 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        virtualinvoke $r5.<org.codehaus.groovy.classgen.CompileStack: void pushBooleanExpression()>();

        $r6 = virtualinvoke r1.<org.codehaus.groovy.ast.stmt.IfStatement: org.codehaus.groovy.ast.stmt.Statement getIfBlock()>();

        virtualinvoke $r6.<org.codehaus.groovy.ast.stmt.Statement: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r0);

        $r7 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        virtualinvoke $r7.<org.codehaus.groovy.classgen.CompileStack: void pop()>();

        $r8 = new groovyjarjarasm.asm.Label;

        specialinvoke $r8.<groovyjarjarasm.asm.Label: void <init>()>();

        $r9 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r9.<groovyjarjarasm.asm.MethodVisitor: void visitJumpInsn(int,groovyjarjarasm.asm.Label)>(167, $r8);

        $r10 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r10.<groovyjarjarasm.asm.MethodVisitor: void visitLabel(groovyjarjarasm.asm.Label)>($r3);

        $r11 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        virtualinvoke $r11.<org.codehaus.groovy.classgen.CompileStack: void pushBooleanExpression()>();

        $r12 = virtualinvoke r1.<org.codehaus.groovy.ast.stmt.IfStatement: org.codehaus.groovy.ast.stmt.Statement getElseBlock()>();

        virtualinvoke $r12.<org.codehaus.groovy.ast.stmt.Statement: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r0);

        $r13 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        virtualinvoke $r13.<org.codehaus.groovy.classgen.CompileStack: void pop()>();

        $r14 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r14.<groovyjarjarasm.asm.MethodVisitor: void visitLabel(groovyjarjarasm.asm.Label)>($r8);

        return;
    }

    public void visitTernaryExpression(org.codehaus.groovy.ast.expr.TernaryExpression)
    {
        org.codehaus.groovy.ast.expr.BooleanExpression $r14, r17;
        groovyjarjarasm.asm.MethodVisitor $r4, $r8, $r9, $r12;
        org.codehaus.groovy.ast.expr.Expression $r2, $r13, r18, r19;
        boolean $z0;
        groovyjarjarasm.asm.Label $r3, $r7;
        org.codehaus.groovy.classgen.AsmClassGenerator r0;
        org.codehaus.groovy.classgen.AsmClassGenerator$2 $r16;
        org.codehaus.groovy.classgen.AsmClassGenerator$1 $r15;
        org.codehaus.groovy.classgen.CompileStack $r5, $r6, $r10, $r11;
        org.codehaus.groovy.ast.expr.TernaryExpression r1;

        r0 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.TernaryExpression;

        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void onLineNumber(org.codehaus.groovy.ast.ASTNode,java.lang.String)>(r1, "visitTernaryExpression");

        r17 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.TernaryExpression: org.codehaus.groovy.ast.expr.BooleanExpression getBooleanExpression()>();

        r18 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.TernaryExpression: org.codehaus.groovy.ast.expr.Expression getTrueExpression()>();

        $r2 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.TernaryExpression: org.codehaus.groovy.ast.expr.Expression getFalseExpression()>();

        r19 = $r2;

        $z0 = r1 instanceof org.codehaus.groovy.ast.expr.ElvisOperatorExpression;

        if $z0 == 0 goto label1;

        $r13 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.TernaryExpression: org.codehaus.groovy.ast.expr.Expression getTrueExpression()>();

        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitAndAutoboxBoolean(org.codehaus.groovy.ast.expr.Expression)>($r13);

        $r14 = new org.codehaus.groovy.ast.expr.BooleanExpression;

        $r15 = new org.codehaus.groovy.classgen.AsmClassGenerator$1;

        specialinvoke $r15.<org.codehaus.groovy.classgen.AsmClassGenerator$1: void <init>(org.codehaus.groovy.classgen.AsmClassGenerator)>(r0);

        specialinvoke $r14.<org.codehaus.groovy.ast.expr.BooleanExpression: void <init>(org.codehaus.groovy.ast.expr.Expression)>($r15);

        r17 = $r14;

        r18 = <org.codehaus.groovy.classgen.BytecodeExpression: org.codehaus.groovy.classgen.BytecodeExpression NOP>;

        $r16 = new org.codehaus.groovy.classgen.AsmClassGenerator$2;

        specialinvoke $r16.<org.codehaus.groovy.classgen.AsmClassGenerator$2: void <init>(org.codehaus.groovy.classgen.AsmClassGenerator,org.codehaus.groovy.ast.expr.Expression)>(r0, $r2);

        r19 = $r16;

     label1:
        virtualinvoke r17.<org.codehaus.groovy.ast.expr.BooleanExpression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r0);

        $r3 = new groovyjarjarasm.asm.Label;

        specialinvoke $r3.<groovyjarjarasm.asm.Label: void <init>()>();

        $r4 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r4.<groovyjarjarasm.asm.MethodVisitor: void visitJumpInsn(int,groovyjarjarasm.asm.Label)>(153, $r3);

        $r5 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        virtualinvoke $r5.<org.codehaus.groovy.classgen.CompileStack: void pushBooleanExpression()>();

        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitAndAutoboxBoolean(org.codehaus.groovy.ast.expr.Expression)>(r18);

        $r6 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        virtualinvoke $r6.<org.codehaus.groovy.classgen.CompileStack: void pop()>();

        $r7 = new groovyjarjarasm.asm.Label;

        specialinvoke $r7.<groovyjarjarasm.asm.Label: void <init>()>();

        $r8 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r8.<groovyjarjarasm.asm.MethodVisitor: void visitJumpInsn(int,groovyjarjarasm.asm.Label)>(167, $r7);

        $r9 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r9.<groovyjarjarasm.asm.MethodVisitor: void visitLabel(groovyjarjarasm.asm.Label)>($r3);

        $r10 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        virtualinvoke $r10.<org.codehaus.groovy.classgen.CompileStack: void pushBooleanExpression()>();

        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitAndAutoboxBoolean(org.codehaus.groovy.ast.expr.Expression)>(r19);

        $r11 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        virtualinvoke $r11.<org.codehaus.groovy.classgen.CompileStack: void pop()>();

        $r12 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r12.<groovyjarjarasm.asm.MethodVisitor: void visitLabel(groovyjarjarasm.asm.Label)>($r7);

        return;
    }

    public void visitAssertStatement(org.codehaus.groovy.ast.stmt.AssertStatement)
    {
        groovyjarjarasm.asm.MethodVisitor $r4, $r6, $r7, $r10, $r11, $r13, $r17, $r20, $r23, $r25, $r35, $r36, $r37, $r38, $r39, $r41, $r42, $r43;
        boolean $z0, $z1, z2;
        org.codehaus.groovy.ast.expr.VariableExpression $r40;
        org.codehaus.groovy.classgen.MethodCaller $r24;
        org.codehaus.groovy.classgen.CompileStack $r18, $r21;
        org.codehaus.groovy.ast.stmt.AssertStatement r1;
        org.codehaus.groovy.ast.expr.BooleanExpression $r2;
        java.util.ArrayList $r9;
        java.lang.StringBuffer $r12, $r14, $r15, $r28, $r29, $r30, $r32, $r33, $r34;
        int $i0;
        java.lang.String $r8, $r16, r27, $r31, r44;
        org.codehaus.groovy.ast.expr.Expression $r22;
        groovyjarjarasm.asm.Label $r3, $r5;
        java.util.Iterator $r19;
        org.codehaus.groovy.classgen.AsmClassGenerator r0;
        java.lang.Object $r26;

        r0 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r1 := @parameter0: org.codehaus.groovy.ast.stmt.AssertStatement;

        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void onLineNumber(org.codehaus.groovy.ast.ASTNode,java.lang.String)>(r1, "visitAssertStatement");

        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitStatement(org.codehaus.groovy.ast.stmt.Statement)>(r1);

        $r2 = virtualinvoke r1.<org.codehaus.groovy.ast.stmt.AssertStatement: org.codehaus.groovy.ast.expr.BooleanExpression getBooleanExpression()>();

        virtualinvoke $r2.<org.codehaus.groovy.ast.expr.BooleanExpression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r0);

        $r3 = new groovyjarjarasm.asm.Label;

        specialinvoke $r3.<groovyjarjarasm.asm.Label: void <init>()>();

        $r4 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r4.<groovyjarjarasm.asm.MethodVisitor: void visitJumpInsn(int,groovyjarjarasm.asm.Label)>(153, $r3);

        $r5 = new groovyjarjarasm.asm.Label;

        specialinvoke $r5.<groovyjarjarasm.asm.Label: void <init>()>();

        $r6 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r6.<groovyjarjarasm.asm.MethodVisitor: void visitJumpInsn(int,groovyjarjarasm.asm.Label)>(167, $r5);

        $r7 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r7.<groovyjarjarasm.asm.MethodVisitor: void visitLabel(groovyjarjarasm.asm.Label)>($r3);

        $r8 = virtualinvoke $r2.<org.codehaus.groovy.ast.expr.BooleanExpression: java.lang.String getText()>();

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        specialinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void addVariableNames(org.codehaus.groovy.ast.expr.Expression,java.util.List)>($r2, $r9);

        $z0 = interfaceinvoke $r9.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r43 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r43.<groovyjarjarasm.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>($r8);

        goto label6;

     label1:
        z2 = 1;

        $r10 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r10.<groovyjarjarasm.asm.MethodVisitor: void visitTypeInsn(int,java.lang.String)>(187, "java/lang/StringBuffer");

        $r11 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r11.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(89);

        $r13 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(". Values: ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r13.<groovyjarjarasm.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>($r16);

        $r17 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r17.<groovyjarjarasm.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)>(183, "java/lang/StringBuffer", "<init>", "(Ljava/lang/String;)V");

        $r18 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        $i0 = virtualinvoke $r18.<org.codehaus.groovy.classgen.CompileStack: int defineTemporaryVariable(java.lang.String,boolean)>("assert", 1);

        $r19 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r19.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r26 = interfaceinvoke $r19.<java.util.Iterator: java.lang.Object next()>();

        r27 = (java.lang.String) $r26;

        $r28 = new java.lang.StringBuffer;

        specialinvoke $r28.<java.lang.StringBuffer: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r27);

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = ");

        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.String toString()>();

        r44 = $r31;

        if z2 == 0 goto label3;

        z2 = 0;

        goto label4;

     label3:
        $r32 = new java.lang.StringBuffer;

        specialinvoke $r32.<java.lang.StringBuffer: void <init>()>();

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r31);

        r44 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.String toString()>();

     label4:
        $r35 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r35.<groovyjarjarasm.asm.MethodVisitor: void visitVarInsn(int,int)>(25, $i0);

        $r36 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r36.<groovyjarjarasm.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>(r44);

        $r37 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r37.<groovyjarjarasm.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)>(182, "java/lang/StringBuffer", "append", "(Ljava/lang/Object;)Ljava/lang/StringBuffer;");

        $r38 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r38.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(87);

        $r39 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r39.<groovyjarjarasm.asm.MethodVisitor: void visitVarInsn(int,int)>(25, $i0);

        $r40 = new org.codehaus.groovy.ast.expr.VariableExpression;

        specialinvoke $r40.<org.codehaus.groovy.ast.expr.VariableExpression: void <init>(java.lang.String)>(r27);

        virtualinvoke $r40.<org.codehaus.groovy.ast.expr.VariableExpression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r0);

        $r41 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r41.<groovyjarjarasm.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)>(182, "java/lang/StringBuffer", "append", "(Ljava/lang/Object;)Ljava/lang/StringBuffer;");

        $r42 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r42.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(87);

        goto label2;

     label5:
        $r20 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r20.<groovyjarjarasm.asm.MethodVisitor: void visitVarInsn(int,int)>(25, $i0);

        $r21 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        virtualinvoke $r21.<org.codehaus.groovy.classgen.CompileStack: void removeVar(int)>($i0);

     label6:
        $r22 = virtualinvoke r1.<org.codehaus.groovy.ast.stmt.AssertStatement: org.codehaus.groovy.ast.expr.Expression getMessageExpression()>();

        virtualinvoke $r22.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r0);

        $r24 = <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCaller assertFailedMethod>;

        $r23 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        virtualinvoke $r24.<org.codehaus.groovy.classgen.MethodCaller: void call(groovyjarjarasm.asm.MethodVisitor)>($r23);

        $r25 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r25.<groovyjarjarasm.asm.MethodVisitor: void visitLabel(groovyjarjarasm.asm.Label)>($r5);

        return;
    }

    private void addVariableNames(org.codehaus.groovy.ast.expr.Expression, java.util.List)
    {
        org.codehaus.groovy.ast.expr.BooleanExpression r7;
        org.codehaus.groovy.ast.expr.VariableExpression r9;
        org.codehaus.groovy.classgen.AsmClassGenerator r3;
        java.util.List r1;
        org.codehaus.groovy.ast.expr.BinaryExpression r8;
        org.codehaus.groovy.ast.expr.Expression r0, $r4, $r5, $r6;
        java.lang.String $r2;
        boolean $z0, $z1, $z2;

        r3 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.Expression;

        r1 := @parameter1: java.util.List;

        $z0 = r0 instanceof org.codehaus.groovy.ast.expr.BooleanExpression;

        if $z0 == 0 goto label1;

        r7 = (org.codehaus.groovy.ast.expr.BooleanExpression) r0;

        $r6 = virtualinvoke r7.<org.codehaus.groovy.ast.expr.BooleanExpression: org.codehaus.groovy.ast.expr.Expression getExpression()>();

        specialinvoke r3.<org.codehaus.groovy.classgen.AsmClassGenerator: void addVariableNames(org.codehaus.groovy.ast.expr.Expression,java.util.List)>($r6, r1);

        goto label3;

     label1:
        $z1 = r0 instanceof org.codehaus.groovy.ast.expr.BinaryExpression;

        if $z1 == 0 goto label2;

        r8 = (org.codehaus.groovy.ast.expr.BinaryExpression) r0;

        $r4 = virtualinvoke r8.<org.codehaus.groovy.ast.expr.BinaryExpression: org.codehaus.groovy.ast.expr.Expression getLeftExpression()>();

        specialinvoke r3.<org.codehaus.groovy.classgen.AsmClassGenerator: void addVariableNames(org.codehaus.groovy.ast.expr.Expression,java.util.List)>($r4, r1);

        $r5 = virtualinvoke r8.<org.codehaus.groovy.ast.expr.BinaryExpression: org.codehaus.groovy.ast.expr.Expression getRightExpression()>();

        specialinvoke r3.<org.codehaus.groovy.classgen.AsmClassGenerator: void addVariableNames(org.codehaus.groovy.ast.expr.Expression,java.util.List)>($r5, r1);

        goto label3;

     label2:
        $z2 = r0 instanceof org.codehaus.groovy.ast.expr.VariableExpression;

        if $z2 == 0 goto label3;

        r9 = (org.codehaus.groovy.ast.expr.VariableExpression) r0;

        $r2 = virtualinvoke r9.<org.codehaus.groovy.ast.expr.VariableExpression: java.lang.String getName()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r2);

     label3:
        return;
    }

    public void visitTryCatchFinally(org.codehaus.groovy.ast.stmt.TryCatchStatement)
    {
        groovyjarjarasm.asm.MethodVisitor $r6, $r8, $r10, $r14, $r15, $r17, $r19, $r20, $r21, $r22, $r23, $r30, $r35;
        boolean $z0, $z1, $z2;
        org.codehaus.groovy.ast.stmt.CatchStatement r41;
        org.codehaus.groovy.classgen.CompileStack $r4, $r26, $r31, $r32, $r34, $r40;
        java.util.List $r11, $r25, $r38;
        org.codehaus.groovy.ast.stmt.Statement $r2, $r3;
        int $i0;
        java.lang.String $r36;
        groovyjarjarasm.asm.Label $r5, $r7, $r9, $r13, $r16, $r18, $r29;
        org.codehaus.groovy.ast.Parameter $r33;
        java.util.Iterator $r12;
        org.codehaus.groovy.ast.ClassNode $r28;
        org.codehaus.groovy.classgen.AsmClassGenerator r0;
        org.codehaus.groovy.classgen.AsmClassGenerator$3 $r39;
        org.codehaus.groovy.ast.stmt.TryCatchStatement r1;
        org.codehaus.groovy.classgen.AsmClassGenerator$4 $r37;
        org.codehaus.groovy.classgen.AsmClassGenerator$5 $r24;
        java.lang.Object $r27;

        r0 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r1 := @parameter0: org.codehaus.groovy.ast.stmt.TryCatchStatement;

        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void onLineNumber(org.codehaus.groovy.ast.ASTNode,java.lang.String)>(r1, "visitTryCatchFinally");

        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitStatement(org.codehaus.groovy.ast.stmt.Statement)>(r1);

        virtualinvoke r1.<org.codehaus.groovy.ast.stmt.TryCatchStatement: org.codehaus.groovy.ast.stmt.CatchStatement getCatchStatement(int)>(0);

        $r2 = virtualinvoke r1.<org.codehaus.groovy.ast.stmt.TryCatchStatement: org.codehaus.groovy.ast.stmt.Statement getTryStatement()>();

        $r3 = virtualinvoke r1.<org.codehaus.groovy.ast.stmt.TryCatchStatement: org.codehaus.groovy.ast.stmt.Statement getFinallyStatement()>();

        $r4 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        $i0 = virtualinvoke $r4.<org.codehaus.groovy.classgen.CompileStack: int defineTemporaryVariable(java.lang.String,boolean)>("exception", 0);

        $z0 = virtualinvoke $r3.<org.codehaus.groovy.ast.stmt.Statement: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r40 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        $r39 = new org.codehaus.groovy.classgen.AsmClassGenerator$3;

        specialinvoke $r39.<org.codehaus.groovy.classgen.AsmClassGenerator$3: void <init>(org.codehaus.groovy.classgen.AsmClassGenerator,org.codehaus.groovy.ast.stmt.Statement)>(r0, $r3);

        virtualinvoke $r40.<org.codehaus.groovy.classgen.CompileStack: void pushFinallyBlock(java.lang.Runnable)>($r39);

     label1:
        $r5 = new groovyjarjarasm.asm.Label;

        specialinvoke $r5.<groovyjarjarasm.asm.Label: void <init>()>();

        $r6 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r6.<groovyjarjarasm.asm.MethodVisitor: void visitLabel(groovyjarjarasm.asm.Label)>($r5);

        virtualinvoke $r2.<org.codehaus.groovy.ast.stmt.Statement: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r0);

        $r7 = new groovyjarjarasm.asm.Label;

        specialinvoke $r7.<groovyjarjarasm.asm.Label: void <init>()>();

        $r8 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r8.<groovyjarjarasm.asm.MethodVisitor: void visitJumpInsn(int,groovyjarjarasm.asm.Label)>(167, $r7);

        $r9 = new groovyjarjarasm.asm.Label;

        specialinvoke $r9.<groovyjarjarasm.asm.Label: void <init>()>();

        $r10 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r10.<groovyjarjarasm.asm.MethodVisitor: void visitLabel(groovyjarjarasm.asm.Label)>($r9);

        $r11 = virtualinvoke r1.<org.codehaus.groovy.ast.stmt.TryCatchStatement: java.util.List getCatchStatements()>();

        $r12 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z2 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label3;

        $r27 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r41 = (org.codehaus.groovy.ast.stmt.CatchStatement) $r27;

        $r28 = virtualinvoke r41.<org.codehaus.groovy.ast.stmt.CatchStatement: org.codehaus.groovy.ast.ClassNode getExceptionType()>();

        $r29 = new groovyjarjarasm.asm.Label;

        specialinvoke $r29.<groovyjarjarasm.asm.Label: void <init>()>();

        $r30 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r30.<groovyjarjarasm.asm.MethodVisitor: void visitLabel(groovyjarjarasm.asm.Label)>($r29);

        $r31 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        virtualinvoke $r31.<org.codehaus.groovy.classgen.CompileStack: void pushState()>();

        $r32 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        $r33 = virtualinvoke r41.<org.codehaus.groovy.ast.stmt.CatchStatement: org.codehaus.groovy.ast.Parameter getVariable()>();

        virtualinvoke $r32.<org.codehaus.groovy.classgen.CompileStack: org.codehaus.groovy.classgen.Variable defineVariable(org.codehaus.groovy.ast.Variable,boolean)>($r33, 1);

        virtualinvoke r41.<org.codehaus.groovy.ast.stmt.CatchStatement: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r0);

        $r34 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        virtualinvoke $r34.<org.codehaus.groovy.classgen.CompileStack: void pop()>();

        $r35 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r35.<groovyjarjarasm.asm.MethodVisitor: void visitJumpInsn(int,groovyjarjarasm.asm.Label)>(167, $r7);

        $r36 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getClassInternalName(org.codehaus.groovy.ast.ClassNode)>($r28);

        $r38 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: java.util.List exceptionBlocks>;

        $r37 = new org.codehaus.groovy.classgen.AsmClassGenerator$4;

        specialinvoke $r37.<org.codehaus.groovy.classgen.AsmClassGenerator$4: void <init>(org.codehaus.groovy.classgen.AsmClassGenerator,groovyjarjarasm.asm.Label,groovyjarjarasm.asm.Label,groovyjarjarasm.asm.Label,java.lang.String)>(r0, $r5, $r9, $r29, $r36);

        interfaceinvoke $r38.<java.util.List: boolean add(java.lang.Object)>($r37);

        goto label2;

     label3:
        $r13 = new groovyjarjarasm.asm.Label;

        specialinvoke $r13.<groovyjarjarasm.asm.Label: void <init>()>();

        $r14 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r14.<groovyjarjarasm.asm.MethodVisitor: void visitLabel(groovyjarjarasm.asm.Label)>($r13);

        $z1 = virtualinvoke $r3.<org.codehaus.groovy.ast.stmt.Statement: boolean isEmpty()>();

        if $z1 != 0 goto label4;

        $r26 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        virtualinvoke $r26.<org.codehaus.groovy.classgen.CompileStack: void popFinallyBlock()>();

     label4:
        $r15 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r15.<groovyjarjarasm.asm.MethodVisitor: void visitLabel(groovyjarjarasm.asm.Label)>($r7);

        virtualinvoke $r3.<org.codehaus.groovy.ast.stmt.Statement: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r0);

        $r16 = new groovyjarjarasm.asm.Label;

        specialinvoke $r16.<groovyjarjarasm.asm.Label: void <init>()>();

        $r17 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r17.<groovyjarjarasm.asm.MethodVisitor: void visitJumpInsn(int,groovyjarjarasm.asm.Label)>(167, $r16);

        $r18 = new groovyjarjarasm.asm.Label;

        specialinvoke $r18.<groovyjarjarasm.asm.Label: void <init>()>();

        $r19 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r19.<groovyjarjarasm.asm.MethodVisitor: void visitLabel(groovyjarjarasm.asm.Label)>($r18);

        $r20 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r20.<groovyjarjarasm.asm.MethodVisitor: void visitVarInsn(int,int)>(58, $i0);

        virtualinvoke $r3.<org.codehaus.groovy.ast.stmt.Statement: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r0);

        $r21 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r21.<groovyjarjarasm.asm.MethodVisitor: void visitVarInsn(int,int)>(25, $i0);

        $r22 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r22.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(191);

        $r23 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r23.<groovyjarjarasm.asm.MethodVisitor: void visitLabel(groovyjarjarasm.asm.Label)>($r16);

        $r25 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: java.util.List exceptionBlocks>;

        $r24 = new org.codehaus.groovy.classgen.AsmClassGenerator$5;

        specialinvoke $r24.<org.codehaus.groovy.classgen.AsmClassGenerator$5: void <init>(org.codehaus.groovy.classgen.AsmClassGenerator,groovyjarjarasm.asm.Label,groovyjarjarasm.asm.Label,groovyjarjarasm.asm.Label)>(r0, $r5, $r13, $r18);

        interfaceinvoke $r25.<java.util.List: boolean add(java.lang.Object)>($r24);

        return;
    }

    public void visitSwitch(org.codehaus.groovy.ast.stmt.SwitchStatement)
    {
        org.codehaus.groovy.ast.stmt.Statement $r9;
        groovyjarjarasm.asm.Label[] r7;
        groovyjarjarasm.asm.MethodVisitor $r10;
        int $i0, $i1, $i2, $i3, i4, i5;
        org.codehaus.groovy.ast.stmt.CaseStatement r13;
        org.codehaus.groovy.ast.expr.Expression $r2;
        groovyjarjarasm.asm.Label $r4, $r14, $r15, $r16;
        boolean $z0;
        java.util.Iterator $r8;
        org.codehaus.groovy.classgen.AsmClassGenerator r0;
        org.codehaus.groovy.classgen.CompileStack $r3, $r5, $r11;
        org.codehaus.groovy.ast.stmt.SwitchStatement r1;
        java.util.List $r6;
        java.lang.Object $r12;

        r0 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r1 := @parameter0: org.codehaus.groovy.ast.stmt.SwitchStatement;

        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void onLineNumber(org.codehaus.groovy.ast.ASTNode,java.lang.String)>(r1, "visitSwitch");

        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitStatement(org.codehaus.groovy.ast.stmt.Statement)>(r1);

        $r2 = virtualinvoke r1.<org.codehaus.groovy.ast.stmt.SwitchStatement: org.codehaus.groovy.ast.expr.Expression getExpression()>();

        virtualinvoke $r2.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r0);

        $r3 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        $r4 = virtualinvoke $r3.<org.codehaus.groovy.classgen.CompileStack: groovyjarjarasm.asm.Label pushSwitch()>();

        $r5 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        $i0 = virtualinvoke $r5.<org.codehaus.groovy.classgen.CompileStack: int defineTemporaryVariable(java.lang.String,boolean)>("switch", 1);

        $r6 = virtualinvoke r1.<org.codehaus.groovy.ast.stmt.SwitchStatement: java.util.List getCaseStatements()>();

        $i1 = interfaceinvoke $r6.<java.util.List: int size()>();

        $i2 = $i1 + 1;

        r7 = newarray (groovyjarjarasm.asm.Label)[$i2];

        i4 = 0;

     label1:
        if i4 >= $i1 goto label2;

        $r16 = new groovyjarjarasm.asm.Label;

        specialinvoke $r16.<groovyjarjarasm.asm.Label: void <init>()>();

        r7[i4] = $r16;

        i4 = i4 + 1;

        goto label1;

     label2:
        i5 = 0;

        $r8 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r12 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r13 = (org.codehaus.groovy.ast.stmt.CaseStatement) $r12;

        $r15 = r7[i5];

        $i3 = i5 + 1;

        $r14 = r7[$i3];

        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitCaseStatement(org.codehaus.groovy.ast.stmt.CaseStatement,int,groovyjarjarasm.asm.Label,groovyjarjarasm.asm.Label)>(r13, $i0, $r15, $r14);

        i5 = i5 + 1;

        goto label3;

     label4:
        $r9 = virtualinvoke r1.<org.codehaus.groovy.ast.stmt.SwitchStatement: org.codehaus.groovy.ast.stmt.Statement getDefaultStatement()>();

        virtualinvoke $r9.<org.codehaus.groovy.ast.stmt.Statement: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r0);

        $r10 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r10.<groovyjarjarasm.asm.MethodVisitor: void visitLabel(groovyjarjarasm.asm.Label)>($r4);

        $r11 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        virtualinvoke $r11.<org.codehaus.groovy.classgen.CompileStack: void pop()>();

        return;
    }

    public void visitCaseStatement(org.codehaus.groovy.ast.stmt.CaseStatement)
    {
        org.codehaus.groovy.classgen.AsmClassGenerator r0;
        org.codehaus.groovy.ast.stmt.CaseStatement r1;

        r0 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r1 := @parameter0: org.codehaus.groovy.ast.stmt.CaseStatement;

        return;
    }

    public void visitCaseStatement(org.codehaus.groovy.ast.stmt.CaseStatement, int, groovyjarjarasm.asm.Label, groovyjarjarasm.asm.Label)
    {
        org.codehaus.groovy.ast.stmt.Statement $r10;
        org.codehaus.groovy.classgen.AsmClassGenerator r0;
        org.codehaus.groovy.classgen.MethodCaller $r5;
        groovyjarjarasm.asm.MethodVisitor $r2, $r4, $r7, $r9, $r12, $r13;
        int i0;
        org.codehaus.groovy.ast.stmt.CaseStatement r1;
        org.codehaus.groovy.ast.expr.Expression $r3;
        groovyjarjarasm.asm.Label $r6, r8, r11;

        r0 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r1 := @parameter0: org.codehaus.groovy.ast.stmt.CaseStatement;

        i0 := @parameter1: int;

        r8 := @parameter2: groovyjarjarasm.asm.Label;

        r11 := @parameter3: groovyjarjarasm.asm.Label;

        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void onLineNumber(org.codehaus.groovy.ast.ASTNode,java.lang.String)>(r1, "visitCaseStatement");

        $r2 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r2.<groovyjarjarasm.asm.MethodVisitor: void visitVarInsn(int,int)>(25, i0);

        $r3 = virtualinvoke r1.<org.codehaus.groovy.ast.stmt.CaseStatement: org.codehaus.groovy.ast.expr.Expression getExpression()>();

        virtualinvoke $r3.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r0);

        $r5 = <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCaller isCaseMethod>;

        $r4 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        virtualinvoke $r5.<org.codehaus.groovy.classgen.MethodCaller: void call(groovyjarjarasm.asm.MethodVisitor)>($r4);

        $r6 = new groovyjarjarasm.asm.Label;

        specialinvoke $r6.<groovyjarjarasm.asm.Label: void <init>()>();

        $r7 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r7.<groovyjarjarasm.asm.MethodVisitor: void visitJumpInsn(int,groovyjarjarasm.asm.Label)>(153, $r6);

        $r9 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r9.<groovyjarjarasm.asm.MethodVisitor: void visitLabel(groovyjarjarasm.asm.Label)>(r8);

        $r10 = virtualinvoke r1.<org.codehaus.groovy.ast.stmt.CaseStatement: org.codehaus.groovy.ast.stmt.Statement getCode()>();

        virtualinvoke $r10.<org.codehaus.groovy.ast.stmt.Statement: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r0);

        if r11 == null goto label1;

        $r13 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r13.<groovyjarjarasm.asm.MethodVisitor: void visitJumpInsn(int,groovyjarjarasm.asm.Label)>(167, r11);

     label1:
        $r12 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r12.<groovyjarjarasm.asm.MethodVisitor: void visitLabel(groovyjarjarasm.asm.Label)>($r6);

        return;
    }

    public void visitBreakStatement(org.codehaus.groovy.ast.stmt.BreakStatement)
    {
        org.codehaus.groovy.classgen.CompileStack $r3, $r5;
        org.codehaus.groovy.classgen.AsmClassGenerator r0;
        org.codehaus.groovy.ast.stmt.BreakStatement r1;
        java.lang.String $r2;
        groovyjarjarasm.asm.Label $r4;
        groovyjarjarasm.asm.MethodVisitor $r6;

        r0 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r1 := @parameter0: org.codehaus.groovy.ast.stmt.BreakStatement;

        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void onLineNumber(org.codehaus.groovy.ast.ASTNode,java.lang.String)>(r1, "visitBreakStatement");

        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitStatement(org.codehaus.groovy.ast.stmt.Statement)>(r1);

        $r2 = virtualinvoke r1.<org.codehaus.groovy.ast.stmt.BreakStatement: java.lang.String getLabel()>();

        $r3 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        $r4 = virtualinvoke $r3.<org.codehaus.groovy.classgen.CompileStack: groovyjarjarasm.asm.Label getNamedBreakLabel(java.lang.String)>($r2);

        $r5 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        virtualinvoke $r5.<org.codehaus.groovy.classgen.CompileStack: void applyFinallyBlocks(groovyjarjarasm.asm.Label,boolean)>($r4, 1);

        $r6 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r6.<groovyjarjarasm.asm.MethodVisitor: void visitJumpInsn(int,groovyjarjarasm.asm.Label)>(167, $r4);

        return;
    }

    public void visitContinueStatement(org.codehaus.groovy.ast.stmt.ContinueStatement)
    {
        org.codehaus.groovy.classgen.AsmClassGenerator r0;
        groovyjarjarasm.asm.MethodVisitor $r5;
        org.codehaus.groovy.classgen.CompileStack $r3, $r4, $r6;
        java.lang.String $r2;
        org.codehaus.groovy.ast.stmt.ContinueStatement r1;
        groovyjarjarasm.asm.Label r7;

        r0 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r1 := @parameter0: org.codehaus.groovy.ast.stmt.ContinueStatement;

        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void onLineNumber(org.codehaus.groovy.ast.ASTNode,java.lang.String)>(r1, "visitContinueStatement");

        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitStatement(org.codehaus.groovy.ast.stmt.Statement)>(r1);

        $r2 = virtualinvoke r1.<org.codehaus.groovy.ast.stmt.ContinueStatement: java.lang.String getLabel()>();

        $r3 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        r7 = virtualinvoke $r3.<org.codehaus.groovy.classgen.CompileStack: groovyjarjarasm.asm.Label getContinueLabel()>();

        if $r2 == null goto label1;

        $r6 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        r7 = virtualinvoke $r6.<org.codehaus.groovy.classgen.CompileStack: groovyjarjarasm.asm.Label getNamedContinueLabel(java.lang.String)>($r2);

     label1:
        $r4 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        virtualinvoke $r4.<org.codehaus.groovy.classgen.CompileStack: void applyFinallyBlocks(groovyjarjarasm.asm.Label,boolean)>(r7, 0);

        $r5 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r5.<groovyjarjarasm.asm.MethodVisitor: void visitJumpInsn(int,groovyjarjarasm.asm.Label)>(167, r7);

        return;
    }

    public void visitSynchronizedStatement(org.codehaus.groovy.ast.stmt.SynchronizedStatement)
    {
        org.codehaus.groovy.ast.stmt.Statement $r13;
        groovyjarjarasm.asm.MethodVisitor $r8, $r9, $r10, $r14, $r15, $r16, $r17;
        int $i0;
        org.codehaus.groovy.ast.expr.Expression $r2;
        groovyjarjarasm.asm.Label $r5, $r6, $r7;
        org.codehaus.groovy.ast.ClassNode $r3;
        org.codehaus.groovy.classgen.AsmClassGenerator r0;
        org.codehaus.groovy.ast.stmt.SynchronizedStatement r1;
        org.codehaus.groovy.classgen.CompileStack $r4, $r12, $r18;
        java.util.List $r20;
        org.codehaus.groovy.classgen.AsmClassGenerator$6 $r11;
        org.codehaus.groovy.classgen.AsmClassGenerator$7 $r19;

        r0 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r1 := @parameter0: org.codehaus.groovy.ast.stmt.SynchronizedStatement;

        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void onLineNumber(org.codehaus.groovy.ast.ASTNode,java.lang.String)>(r1, "visitSynchronizedStatement");

        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitStatement(org.codehaus.groovy.ast.stmt.Statement)>(r1);

        $r2 = virtualinvoke r1.<org.codehaus.groovy.ast.stmt.SynchronizedStatement: org.codehaus.groovy.ast.expr.Expression getExpression()>();

        virtualinvoke $r2.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r0);

        $r4 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        $r3 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode Integer_TYPE>;

        $i0 = virtualinvoke $r4.<org.codehaus.groovy.classgen.CompileStack: int defineTemporaryVariable(java.lang.String,org.codehaus.groovy.ast.ClassNode,boolean)>("synchronized", $r3, 1);

        $r5 = new groovyjarjarasm.asm.Label;

        specialinvoke $r5.<groovyjarjarasm.asm.Label: void <init>()>();

        $r6 = new groovyjarjarasm.asm.Label;

        specialinvoke $r6.<groovyjarjarasm.asm.Label: void <init>()>();

        $r7 = new groovyjarjarasm.asm.Label;

        specialinvoke $r7.<groovyjarjarasm.asm.Label: void <init>()>();

        $r8 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r8.<groovyjarjarasm.asm.MethodVisitor: void visitVarInsn(int,int)>(25, $i0);

        $r9 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r9.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(194);

        $r10 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r10.<groovyjarjarasm.asm.MethodVisitor: void visitLabel(groovyjarjarasm.asm.Label)>($r5);

        $r11 = new org.codehaus.groovy.classgen.AsmClassGenerator$6;

        specialinvoke $r11.<org.codehaus.groovy.classgen.AsmClassGenerator$6: void <init>(org.codehaus.groovy.classgen.AsmClassGenerator,int)>(r0, $i0);

        $r12 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        virtualinvoke $r12.<org.codehaus.groovy.classgen.CompileStack: void pushFinallyBlock(java.lang.Runnable)>($r11);

        $r13 = virtualinvoke r1.<org.codehaus.groovy.ast.stmt.SynchronizedStatement: org.codehaus.groovy.ast.stmt.Statement getCode()>();

        virtualinvoke $r13.<org.codehaus.groovy.ast.stmt.Statement: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r0);

        interfaceinvoke $r11.<java.lang.Runnable: void run()>();

        $r14 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r14.<groovyjarjarasm.asm.MethodVisitor: void visitJumpInsn(int,groovyjarjarasm.asm.Label)>(167, $r6);

        $r15 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r15.<groovyjarjarasm.asm.MethodVisitor: void visitLabel(groovyjarjarasm.asm.Label)>($r7);

        interfaceinvoke $r11.<java.lang.Runnable: void run()>();

        $r16 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r16.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(191);

        $r17 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r17.<groovyjarjarasm.asm.MethodVisitor: void visitLabel(groovyjarjarasm.asm.Label)>($r6);

        $r18 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        virtualinvoke $r18.<org.codehaus.groovy.classgen.CompileStack: void popFinallyBlock()>();

        $r20 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: java.util.List exceptionBlocks>;

        $r19 = new org.codehaus.groovy.classgen.AsmClassGenerator$7;

        specialinvoke $r19.<org.codehaus.groovy.classgen.AsmClassGenerator$7: void <init>(org.codehaus.groovy.classgen.AsmClassGenerator,groovyjarjarasm.asm.Label,groovyjarjarasm.asm.Label)>(r0, $r5, $r7);

        interfaceinvoke $r20.<java.util.List: boolean add(java.lang.Object)>($r19);

        return;
    }

    public void visitThrowStatement(org.codehaus.groovy.ast.stmt.ThrowStatement)
    {
        org.codehaus.groovy.ast.stmt.ThrowStatement r1;
        org.codehaus.groovy.classgen.AsmClassGenerator r0;
        org.codehaus.groovy.ast.expr.Expression $r2;
        groovyjarjarasm.asm.MethodVisitor $r3, $r4;

        r0 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r1 := @parameter0: org.codehaus.groovy.ast.stmt.ThrowStatement;

        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void onLineNumber(org.codehaus.groovy.ast.ASTNode,java.lang.String)>(r1, "visitThrowStatement");

        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitStatement(org.codehaus.groovy.ast.stmt.Statement)>(r1);

        $r2 = virtualinvoke r1.<org.codehaus.groovy.ast.stmt.ThrowStatement: org.codehaus.groovy.ast.expr.Expression getExpression()>();

        virtualinvoke $r2.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r0);

        $r3 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r3.<groovyjarjarasm.asm.MethodVisitor: void visitTypeInsn(int,java.lang.String)>(192, "java/lang/Throwable");

        $r4 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r4.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(191);

        return;
    }

    public void visitReturnStatement(org.codehaus.groovy.ast.stmt.ReturnStatement)
    {
        org.codehaus.groovy.classgen.BytecodeHelper $r9, $r10, $r15;
        groovyjarjarasm.asm.MethodVisitor $r19, $r22;
        org.codehaus.groovy.ast.MethodNode $r2, $r23;
        int $i0;
        org.codehaus.groovy.ast.expr.Expression $r7;
        boolean $z0;
        org.codehaus.groovy.ast.ClassNode $r6, $r8, $r11, $r14, $r16, $r17, $r18, r24;
        org.codehaus.groovy.classgen.AsmClassGenerator r0;
        org.codehaus.groovy.ast.stmt.ReturnStatement r1, $r20;
        org.codehaus.groovy.GroovyBugError $r4;
        org.codehaus.groovy.classgen.CompileStack $r12, $r13, $r21, $r25;
        org.codehaus.groovy.ast.ConstructorNode $r3, $r5;

        r0 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r1 := @parameter0: org.codehaus.groovy.ast.stmt.ReturnStatement;

        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void onLineNumber(org.codehaus.groovy.ast.ASTNode,java.lang.String)>(r1, "visitReturnStatement");

        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitStatement(org.codehaus.groovy.ast.stmt.Statement)>(r1);

        $r2 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.MethodNode methodNode>;

        if $r2 == null goto label1;

        $r23 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.MethodNode methodNode>;

        r24 = virtualinvoke $r23.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.ClassNode getReturnType()>();

        goto label3;

     label1:
        $r3 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ConstructorNode constructorNode>;

        if $r3 == null goto label2;

        $r5 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ConstructorNode constructorNode>;

        r24 = virtualinvoke $r5.<org.codehaus.groovy.ast.ConstructorNode: org.codehaus.groovy.ast.ClassNode getReturnType()>();

        goto label3;

     label2:
        $r4 = new org.codehaus.groovy.GroovyBugError;

        specialinvoke $r4.<org.codehaus.groovy.GroovyBugError: void <init>(java.lang.String)>("I spotted a return that is neither in a method nor in a constructor... I can not handle that");

        throw $r4;

     label3:
        $r6 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode VOID_TYPE>;

        if r24 != $r6 goto label5;

        $r20 = <org.codehaus.groovy.ast.stmt.ReturnStatement: org.codehaus.groovy.ast.stmt.ReturnStatement RETURN_NULL_OR_VOID>;

        if r1 == $r20 goto label4;

        specialinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void throwException(java.lang.String)>("Cannot use return statement with an expression on a method that returns void");

     label4:
        $r21 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        virtualinvoke $r21.<org.codehaus.groovy.classgen.CompileStack: void applyFinallyBlocks()>();

        $r22 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r22.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(177);

        r0.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean outputReturn> = 1;

        return;

     label5:
        $r7 = virtualinvoke r1.<org.codehaus.groovy.ast.stmt.ReturnStatement: org.codehaus.groovy.ast.expr.Expression getExpression()>();

        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void evaluateExpression(org.codehaus.groovy.ast.expr.Expression)>($r7);

        $r8 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode OBJECT_TYPE>;

        if r24 != $r8 goto label6;

        $r16 = virtualinvoke $r7.<org.codehaus.groovy.ast.expr.Expression: org.codehaus.groovy.ast.ClassNode getType()>();

        if $r16 == null goto label6;

        $r17 = virtualinvoke $r7.<org.codehaus.groovy.ast.expr.Expression: org.codehaus.groovy.ast.ClassNode getType()>();

        $r18 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode VOID_TYPE>;

        if $r17 != $r18 goto label6;

        $r19 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r19.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(1);

        goto label7;

     label6:
        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void doConvertAndCast(org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.expr.Expression,boolean,boolean,boolean)>(r24, $r7, 0, 1, 0);

     label7:
        $r25 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        $z0 = virtualinvoke $r25.<org.codehaus.groovy.classgen.CompileStack: boolean hasFinallyBlocks()>();

        if $z0 == 0 goto label8;

        $r12 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        $r11 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode OBJECT_TYPE>;

        $i0 = virtualinvoke $r12.<org.codehaus.groovy.classgen.CompileStack: int defineTemporaryVariable(java.lang.String,org.codehaus.groovy.ast.ClassNode,boolean)>("returnValue", $r11, 1);

        $r13 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        virtualinvoke $r13.<org.codehaus.groovy.classgen.CompileStack: void applyFinallyBlocks()>();

        $r15 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.BytecodeHelper helper>;

        $r14 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode OBJECT_TYPE>;

        virtualinvoke $r15.<org.codehaus.groovy.classgen.BytecodeHelper: void load(org.codehaus.groovy.ast.ClassNode,int)>($r14, $i0);

     label8:
        $r9 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.BytecodeHelper helper>;

        virtualinvoke $r9.<org.codehaus.groovy.classgen.BytecodeHelper: void unbox(org.codehaus.groovy.ast.ClassNode)>(r24);

        $r10 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.BytecodeHelper helper>;

        virtualinvoke $r10.<org.codehaus.groovy.classgen.BytecodeHelper: void doReturn(org.codehaus.groovy.ast.ClassNode)>(r24);

        r0.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean outputReturn> = 1;

        return;
    }

    protected void doConvertAndCast(org.codehaus.groovy.ast.ClassNode, org.codehaus.groovy.ast.expr.Expression, boolean, boolean, boolean)
    {
        org.codehaus.groovy.ast.ClassNode $r2, r3;
        org.codehaus.groovy.classgen.AsmClassGenerator r0;
        org.codehaus.groovy.ast.expr.Expression r1;
        boolean z0, z1, z2, $z3, $z4, $z5;

        r0 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r3 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        r1 := @parameter1: org.codehaus.groovy.ast.expr.Expression;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        z2 := @parameter4: boolean;

        $r2 = virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode getExpressionType(org.codehaus.groovy.ast.expr.Expression)>(r1);

        if z0 != 0 goto label1;

        $z5 = staticinvoke <org.codehaus.groovy.ast.ClassHelper: boolean isPrimitiveType(org.codehaus.groovy.ast.ClassNode)>(r3);

        if $z5 == 0 goto label1;

        r3 = staticinvoke <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode getWrapper(org.codehaus.groovy.ast.ClassNode)>(r3);

     label1:
        if z1 != 0 goto label2;

        if r3 == null goto label3;

        $z3 = virtualinvoke $r2.<org.codehaus.groovy.ast.ClassNode: boolean isDerivedFrom(org.codehaus.groovy.ast.ClassNode)>(r3);

        if $z3 != 0 goto label3;

        $z4 = virtualinvoke $r2.<org.codehaus.groovy.ast.ClassNode: boolean implementsInterface(org.codehaus.groovy.ast.ClassNode)>(r3);

        if $z4 != 0 goto label3;

     label2:
        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void doConvertAndCast(org.codehaus.groovy.ast.ClassNode,boolean)>(r3, z2);

     label3:
        return;
    }

    protected void evaluateExpression(org.codehaus.groovy.ast.expr.Expression)
    {
        org.codehaus.groovy.classgen.AsmClassGenerator r0;
        org.codehaus.groovy.ast.expr.Expression r1, $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.Expression;

        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitAndAutoboxBoolean(org.codehaus.groovy.ast.expr.Expression)>(r1);

        $z0 = virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean isPopRequired(org.codehaus.groovy.ast.expr.Expression)>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.expr.Expression createReturnLHSExpression(org.codehaus.groovy.ast.expr.Expression)>(r1);

        if $r2 == null goto label2;

        r0.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean leftHandExpression> = 0;

        virtualinvoke $r2.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r0);

     label2:
        return;
    }

    public void visitExpressionStatement(org.codehaus.groovy.ast.stmt.ExpressionStatement)
    {
        org.codehaus.groovy.classgen.AsmClassGenerator r0;
        groovyjarjarasm.asm.MethodVisitor $r10;
        org.codehaus.groovy.ast.stmt.ExpressionStatement r1;
        java.lang.StringBuffer $r2, $r3, $r7;
        java.lang.Class $r5;
        org.codehaus.groovy.ast.expr.Expression $r4, $r9;
        java.lang.String $r6, $r8;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r1 := @parameter0: org.codehaus.groovy.ast.stmt.ExpressionStatement;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("visitExpressionStatement: ");

        $r4 = virtualinvoke r1.<org.codehaus.groovy.ast.stmt.ExpressionStatement: org.codehaus.groovy.ast.expr.Expression getExpression()>();

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r7 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void onLineNumber(org.codehaus.groovy.ast.ASTNode,java.lang.String)>(r1, $r8);

        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitStatement(org.codehaus.groovy.ast.stmt.Statement)>(r1);

        $r9 = virtualinvoke r1.<org.codehaus.groovy.ast.stmt.ExpressionStatement: org.codehaus.groovy.ast.expr.Expression getExpression()>();

        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitAndAutoboxBoolean(org.codehaus.groovy.ast.expr.Expression)>($r9);

        $z0 = virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean isPopRequired(org.codehaus.groovy.ast.expr.Expression)>($r9);

        if $z0 == 0 goto label1;

        $r10 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r10.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(87);

     label1:
        return;
    }

    public void visitDeclarationExpression(org.codehaus.groovy.ast.expr.DeclarationExpression)
    {
        java.lang.StringBuffer $r2, $r3, $r6, $r7;
        java.lang.String $r5, $r8;
        org.codehaus.groovy.ast.expr.Expression $r9;
        boolean $z0;
        org.codehaus.groovy.ast.expr.VariableExpression $r4, $r10;
        org.codehaus.groovy.ast.ClassNode $r11, $r12;
        org.codehaus.groovy.classgen.AsmClassGenerator r0;
        org.codehaus.groovy.ast.expr.DeclarationExpression r1;
        org.codehaus.groovy.classgen.CompileStack $r14;
        org.codehaus.groovy.ast.expr.CastExpression $r13;

        r0 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.DeclarationExpression;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("visitDeclarationExpression: \"");

        $r4 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.DeclarationExpression: org.codehaus.groovy.ast.expr.VariableExpression getVariableExpression()>();

        $r5 = virtualinvoke $r4.<org.codehaus.groovy.ast.expr.VariableExpression: java.lang.String getName()>();

        $r6 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void onLineNumber(org.codehaus.groovy.ast.ASTNode,java.lang.String)>(r1, $r8);

        $r9 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.DeclarationExpression: org.codehaus.groovy.ast.expr.Expression getRightExpression()>();

        $r10 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.DeclarationExpression: org.codehaus.groovy.ast.expr.VariableExpression getVariableExpression()>();

        $r11 = virtualinvoke $r10.<org.codehaus.groovy.ast.expr.VariableExpression: org.codehaus.groovy.ast.ClassNode getType()>();

        $z0 = staticinvoke <org.codehaus.groovy.ast.ClassHelper: boolean isPrimitiveType(org.codehaus.groovy.ast.ClassNode)>($r11);

        if $z0 == 0 goto label1;

        virtualinvoke $r9.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r0);

        goto label3;

     label1:
        $r12 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode OBJECT_TYPE>;

        if $r11 == $r12 goto label2;

        $r13 = new org.codehaus.groovy.ast.expr.CastExpression;

        specialinvoke $r13.<org.codehaus.groovy.ast.expr.CastExpression: void <init>(org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.expr.Expression)>($r11, $r9);

        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitCastExpression(org.codehaus.groovy.ast.expr.CastExpression)>($r13);

        goto label3;

     label2:
        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitAndAutoboxBoolean(org.codehaus.groovy.ast.expr.Expression)>($r9);

     label3:
        $r14 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        virtualinvoke $r14.<org.codehaus.groovy.classgen.CompileStack: org.codehaus.groovy.classgen.Variable defineVariable(org.codehaus.groovy.ast.Variable,boolean)>($r10, 1);

        return;
    }

    public void visitBinaryExpression(org.codehaus.groovy.ast.expr.BinaryExpression)
    {
        java.lang.StringBuffer $r2, $r3, $r6, $r7, $r20, $r21, $r23, $r24;
        int $i0;
        java.lang.String $r5, $r8, $r25;
        boolean $z0;
        org.codehaus.groovy.classgen.AsmClassGenerator r0;
        org.codehaus.groovy.syntax.Token $r4, $r9, $r22;
        org.codehaus.groovy.classgen.MethodCaller $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19;
        org.codehaus.groovy.ast.expr.BinaryExpression r1;

        r0 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.BinaryExpression;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("visitBinaryExpression: \"");

        $r4 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.BinaryExpression: org.codehaus.groovy.syntax.Token getOperation()>();

        $r5 = virtualinvoke $r4.<org.codehaus.groovy.syntax.Token: java.lang.String getText()>();

        $r6 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\" ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void onLineNumber(org.codehaus.groovy.ast.ASTNode,java.lang.String)>(r1, $r8);

        $r9 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.BinaryExpression: org.codehaus.groovy.syntax.Token getOperation()>();

        $i0 = virtualinvoke $r9.<org.codehaus.groovy.syntax.Token: int getType()>();

        lookupswitch($i0)
        {
            case 30: goto label41;
            case 90: goto label39;
            case 94: goto label40;
            case 100: goto label01;
            case 120: goto label04;
            case 121: goto label02;
            case 123: goto label03;
            case 124: goto label08;
            case 125: goto label09;
            case 126: goto label06;
            case 127: goto label07;
            case 128: goto label05;
            case 162: goto label11;
            case 164: goto label10;
            case 200: goto label18;
            case 201: goto label20;
            case 202: goto label22;
            case 203: goto label24;
            case 204: goto label26;
            case 205: goto label28;
            case 206: goto label30;
            case 210: goto label19;
            case 211: goto label21;
            case 212: goto label23;
            case 213: goto label25;
            case 214: goto label27;
            case 215: goto label29;
            case 216: goto label31;
            case 280: goto label32;
            case 281: goto label34;
            case 282: goto label36;
            case 285: goto label33;
            case 286: goto label35;
            case 287: goto label37;
            case 340: goto label14;
            case 341: goto label12;
            case 342: goto label16;
            case 350: goto label15;
            case 351: goto label13;
            case 352: goto label17;
            case 544: goto label38;
            case 573: goto label43;
            default: goto label44;
        };

     label01:
        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void evaluateEqual(org.codehaus.groovy.ast.expr.BinaryExpression)>(r1);

        goto label45;

     label02:
        $r16 = <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCaller compareIdenticalMethod>;

        specialinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void evaluateBinaryExpression(org.codehaus.groovy.classgen.MethodCaller,org.codehaus.groovy.ast.expr.BinaryExpression)>($r16, r1);

        goto label45;

     label03:
        $r15 = <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCaller compareEqualMethod>;

        specialinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void evaluateBinaryExpression(org.codehaus.groovy.classgen.MethodCaller,org.codehaus.groovy.ast.expr.BinaryExpression)>($r15, r1);

        goto label45;

     label04:
        $r17 = <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCaller compareNotEqualMethod>;

        specialinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void evaluateBinaryExpression(org.codehaus.groovy.classgen.MethodCaller,org.codehaus.groovy.ast.expr.BinaryExpression)>($r17, r1);

        goto label45;

     label05:
        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void evaluateCompareTo(org.codehaus.groovy.ast.expr.BinaryExpression)>(r1);

        goto label45;

     label06:
        $r12 = <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCaller compareGreaterThanMethod>;

        specialinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void evaluateBinaryExpression(org.codehaus.groovy.classgen.MethodCaller,org.codehaus.groovy.ast.expr.BinaryExpression)>($r12, r1);

        goto label45;

     label07:
        $r11 = <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCaller compareGreaterThanEqualMethod>;

        specialinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void evaluateBinaryExpression(org.codehaus.groovy.classgen.MethodCaller,org.codehaus.groovy.ast.expr.BinaryExpression)>($r11, r1);

        goto label45;

     label08:
        $r14 = <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCaller compareLessThanMethod>;

        specialinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void evaluateBinaryExpression(org.codehaus.groovy.classgen.MethodCaller,org.codehaus.groovy.ast.expr.BinaryExpression)>($r14, r1);

        goto label45;

     label09:
        $r13 = <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCaller compareLessThanEqualMethod>;

        specialinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void evaluateBinaryExpression(org.codehaus.groovy.classgen.MethodCaller,org.codehaus.groovy.ast.expr.BinaryExpression)>($r13, r1);

        goto label45;

     label10:
        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void evaluateLogicalAndExpression(org.codehaus.groovy.ast.expr.BinaryExpression)>(r1);

        goto label45;

     label11:
        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void evaluateLogicalOrExpression(org.codehaus.groovy.ast.expr.BinaryExpression)>(r1);

        goto label45;

     label12:
        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void evaluateBinaryExpression(java.lang.String,org.codehaus.groovy.ast.expr.BinaryExpression)>("and", r1);

        goto label45;

     label13:
        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void evaluateBinaryExpressionWithAssignment(java.lang.String,org.codehaus.groovy.ast.expr.BinaryExpression)>("and", r1);

        goto label45;

     label14:
        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void evaluateBinaryExpression(java.lang.String,org.codehaus.groovy.ast.expr.BinaryExpression)>("or", r1);

        goto label45;

     label15:
        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void evaluateBinaryExpressionWithAssignment(java.lang.String,org.codehaus.groovy.ast.expr.BinaryExpression)>("or", r1);

        goto label45;

     label16:
        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void evaluateBinaryExpression(java.lang.String,org.codehaus.groovy.ast.expr.BinaryExpression)>("xor", r1);

        goto label45;

     label17:
        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void evaluateBinaryExpressionWithAssignment(java.lang.String,org.codehaus.groovy.ast.expr.BinaryExpression)>("xor", r1);

        goto label45;

     label18:
        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void evaluateBinaryExpression(java.lang.String,org.codehaus.groovy.ast.expr.BinaryExpression)>("plus", r1);

        goto label45;

     label19:
        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void evaluateBinaryExpressionWithAssignment(java.lang.String,org.codehaus.groovy.ast.expr.BinaryExpression)>("plus", r1);

        goto label45;

     label20:
        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void evaluateBinaryExpression(java.lang.String,org.codehaus.groovy.ast.expr.BinaryExpression)>("minus", r1);

        goto label45;

     label21:
        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void evaluateBinaryExpressionWithAssignment(java.lang.String,org.codehaus.groovy.ast.expr.BinaryExpression)>("minus", r1);

        goto label45;

     label22:
        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void evaluateBinaryExpression(java.lang.String,org.codehaus.groovy.ast.expr.BinaryExpression)>("multiply", r1);

        goto label45;

     label23:
        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void evaluateBinaryExpressionWithAssignment(java.lang.String,org.codehaus.groovy.ast.expr.BinaryExpression)>("multiply", r1);

        goto label45;

     label24:
        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void evaluateBinaryExpression(java.lang.String,org.codehaus.groovy.ast.expr.BinaryExpression)>("div", r1);

        goto label45;

     label25:
        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void evaluateBinaryExpressionWithAssignment(java.lang.String,org.codehaus.groovy.ast.expr.BinaryExpression)>("div", r1);

        goto label45;

     label26:
        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void evaluateBinaryExpression(java.lang.String,org.codehaus.groovy.ast.expr.BinaryExpression)>("intdiv", r1);

        goto label45;

     label27:
        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void evaluateBinaryExpressionWithAssignment(java.lang.String,org.codehaus.groovy.ast.expr.BinaryExpression)>("intdiv", r1);

        goto label45;

     label28:
        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void evaluateBinaryExpression(java.lang.String,org.codehaus.groovy.ast.expr.BinaryExpression)>("mod", r1);

        goto label45;

     label29:
        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void evaluateBinaryExpressionWithAssignment(java.lang.String,org.codehaus.groovy.ast.expr.BinaryExpression)>("mod", r1);

        goto label45;

     label30:
        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void evaluateBinaryExpression(java.lang.String,org.codehaus.groovy.ast.expr.BinaryExpression)>("power", r1);

        goto label45;

     label31:
        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void evaluateBinaryExpressionWithAssignment(java.lang.String,org.codehaus.groovy.ast.expr.BinaryExpression)>("power", r1);

        goto label45;

     label32:
        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void evaluateBinaryExpression(java.lang.String,org.codehaus.groovy.ast.expr.BinaryExpression)>("leftShift", r1);

        goto label45;

     label33:
        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void evaluateBinaryExpressionWithAssignment(java.lang.String,org.codehaus.groovy.ast.expr.BinaryExpression)>("leftShift", r1);

        goto label45;

     label34:
        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void evaluateBinaryExpression(java.lang.String,org.codehaus.groovy.ast.expr.BinaryExpression)>("rightShift", r1);

        goto label45;

     label35:
        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void evaluateBinaryExpressionWithAssignment(java.lang.String,org.codehaus.groovy.ast.expr.BinaryExpression)>("rightShift", r1);

        goto label45;

     label36:
        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void evaluateBinaryExpression(java.lang.String,org.codehaus.groovy.ast.expr.BinaryExpression)>("rightShiftUnsigned", r1);

        goto label45;

     label37:
        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void evaluateBinaryExpressionWithAssignment(java.lang.String,org.codehaus.groovy.ast.expr.BinaryExpression)>("rightShiftUnsigned", r1);

        goto label45;

     label38:
        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void evaluateInstanceof(org.codehaus.groovy.ast.expr.BinaryExpression)>(r1);

        goto label45;

     label39:
        $r19 = <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCaller findRegexMethod>;

        specialinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void evaluateBinaryExpression(org.codehaus.groovy.classgen.MethodCaller,org.codehaus.groovy.ast.expr.BinaryExpression)>($r19, r1);

        goto label45;

     label40:
        $r18 = <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCaller matchRegexMethod>;

        specialinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void evaluateBinaryExpression(org.codehaus.groovy.classgen.MethodCaller,org.codehaus.groovy.ast.expr.BinaryExpression)>($r18, r1);

        goto label45;

     label41:
        $z0 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean leftHandExpression>;

        if $z0 == 0 goto label42;

        specialinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void throwException(java.lang.String)>("Should not be called here. Possible reason: postfix operation on array.");

        goto label45;

     label42:
        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void evaluateBinaryExpression(java.lang.String,org.codehaus.groovy.ast.expr.BinaryExpression)>("getAt", r1);

        goto label45;

     label43:
        $r10 = <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCaller isCaseMethod>;

        specialinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void evaluateBinaryExpression(org.codehaus.groovy.classgen.MethodCaller,org.codehaus.groovy.ast.expr.BinaryExpression)>($r10, r1);

        goto label45;

     label44:
        $r20 = new java.lang.StringBuffer;

        specialinvoke $r20.<java.lang.StringBuffer: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Operation: ");

        $r22 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.BinaryExpression: org.codehaus.groovy.syntax.Token getOperation()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" not supported");

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void throwException(java.lang.String)>($r25);

     label45:
        return;
    }

    private void load(org.codehaus.groovy.ast.expr.Expression)
    {
        org.codehaus.groovy.classgen.AsmClassGenerator r0;
        org.codehaus.groovy.ast.expr.Expression r1;
        boolean z0;

        r0 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.Expression;

        z0 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean leftHandExpression>;

        r0.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean leftHandExpression> = 0;

        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitAndAutoboxBoolean(org.codehaus.groovy.ast.expr.Expression)>(r1);

        r0.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean leftHandExpression> = z0;

        return;
    }

    public void visitPostfixExpression(org.codehaus.groovy.ast.expr.PostfixExpression)
    {
        org.codehaus.groovy.ast.expr.PostfixExpression r0;
        int $i0;
        org.codehaus.groovy.classgen.AsmClassGenerator r2;
        org.codehaus.groovy.ast.expr.Expression $r3, $r4;
        org.codehaus.groovy.syntax.Token $r1;

        r2 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.PostfixExpression;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.PostfixExpression: org.codehaus.groovy.syntax.Token getOperation()>();

        $i0 = virtualinvoke $r1.<org.codehaus.groovy.syntax.Token: int getType()>();

        lookupswitch($i0)
        {
            case 250: goto label1;
            case 260: goto label2;
            default: goto label3;
        };

     label1:
        $r4 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.PostfixExpression: org.codehaus.groovy.ast.expr.Expression getExpression()>();

        virtualinvoke r2.<org.codehaus.groovy.classgen.AsmClassGenerator: void evaluatePostfixMethod(java.lang.String,org.codehaus.groovy.ast.expr.Expression)>("next", $r4);

        goto label3;

     label2:
        $r3 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.PostfixExpression: org.codehaus.groovy.ast.expr.Expression getExpression()>();

        virtualinvoke r2.<org.codehaus.groovy.classgen.AsmClassGenerator: void evaluatePostfixMethod(java.lang.String,org.codehaus.groovy.ast.expr.Expression)>("previous", $r3);

     label3:
        return;
    }

    private void throwException(java.lang.String)
    {
        org.codehaus.groovy.ast.ASTNode $r3;
        org.codehaus.groovy.syntax.RuntimeParserException $r0;
        org.codehaus.groovy.classgen.AsmClassGenerator r2;
        java.lang.String r1;

        r2 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r1 := @parameter0: java.lang.String;

        $r0 = new org.codehaus.groovy.syntax.RuntimeParserException;

        $r3 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ASTNode currentASTNode>;

        specialinvoke $r0.<org.codehaus.groovy.syntax.RuntimeParserException: void <init>(java.lang.String,org.codehaus.groovy.ast.ASTNode)>(r1, $r3);

        throw $r0;
    }

    public void visitPrefixExpression(org.codehaus.groovy.ast.expr.PrefixExpression)
    {
        org.codehaus.groovy.ast.expr.PrefixExpression r0;
        int $i0;
        org.codehaus.groovy.classgen.AsmClassGenerator r2;
        org.codehaus.groovy.ast.expr.Expression $r3, $r4;
        org.codehaus.groovy.syntax.Token $r1;

        r2 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.PrefixExpression;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.PrefixExpression: org.codehaus.groovy.syntax.Token getOperation()>();

        $i0 = virtualinvoke $r1.<org.codehaus.groovy.syntax.Token: int getType()>();

        lookupswitch($i0)
        {
            case 250: goto label1;
            case 260: goto label2;
            default: goto label3;
        };

     label1:
        $r4 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.PrefixExpression: org.codehaus.groovy.ast.expr.Expression getExpression()>();

        virtualinvoke r2.<org.codehaus.groovy.classgen.AsmClassGenerator: void evaluatePrefixMethod(java.lang.String,org.codehaus.groovy.ast.expr.Expression)>("next", $r4);

        goto label3;

     label2:
        $r3 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.PrefixExpression: org.codehaus.groovy.ast.expr.Expression getExpression()>();

        virtualinvoke r2.<org.codehaus.groovy.classgen.AsmClassGenerator: void evaluatePrefixMethod(java.lang.String,org.codehaus.groovy.ast.expr.Expression)>("previous", $r3);

     label3:
        return;
    }

    public void visitClosureExpression(org.codehaus.groovy.ast.expr.ClosureExpression)
    {
        groovyjarjarasm.asm.MethodVisitor $r8, $r9, $r10, $r12, $r22, $r25, $r26;
        org.codehaus.groovy.classgen.Variable $r21, $r31, r48;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.codehaus.groovy.classgen.CompileStack $r16, $r18, $r30, $r32;
        java.util.List $r5;
        org.codehaus.groovy.ast.expr.FieldExpression $r34;
        org.codehaus.groovy.ast.VariableScope $r33;
        java.util.HashMap $r2, $r44;
        int $i0, i1, $i2;
        java.lang.String $r4, $r13, $r15, $r27, $r29;
        org.codehaus.groovy.ast.Parameter r14;
        org.codehaus.groovy.ast.ClassNode $r11, $r17, $r19, $r20, $r23, $r28, $r35, $r37, $r38, $r40, $r42, $r43, $r45, r47;
        org.codehaus.groovy.classgen.AsmClassGenerator r0;
        org.codehaus.groovy.ast.expr.ClosureExpression r1;
        org.codehaus.groovy.ast.expr.ClassExpression $r39, $r41;
        org.codehaus.groovy.ast.Parameter[] $r7;
        org.codehaus.groovy.ast.FieldNode $r24, $r36;
        java.lang.Object $r3, $r6;
        org.codehaus.groovy.ast.ConstructorNode $r46;

        r0 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.ClosureExpression;

        $r2 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: java.util.HashMap closureClassMap>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r47 = (org.codehaus.groovy.ast.ClassNode) $r3;

        if r47 != null goto label01;

        $r43 = virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode createClosureClass(org.codehaus.groovy.ast.expr.ClosureExpression)>(r1);

        r47 = $r43;

        $r44 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: java.util.HashMap closureClassMap>;

        virtualinvoke $r44.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r43);

        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean addInnerClass(org.codehaus.groovy.ast.ClassNode)>($r43);

        $r45 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode GENERATED_CLOSURE_Type>;

        virtualinvoke $r43.<org.codehaus.groovy.ast.ClassNode: void addInterface(org.codehaus.groovy.ast.ClassNode)>($r45);

     label01:
        $r4 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getClassInternalName(org.codehaus.groovy.ast.ClassNode)>(r47);

        r0.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean passingClosureParams> = 1;

        $r5 = virtualinvoke r47.<org.codehaus.groovy.ast.ClassNode: java.util.List getDeclaredConstructors()>();

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(0);

        $r46 = (org.codehaus.groovy.ast.ConstructorNode) $r6;

        $r7 = virtualinvoke $r46.<org.codehaus.groovy.ast.ConstructorNode: org.codehaus.groovy.ast.Parameter[] getParameters()>();

        $r8 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r8.<groovyjarjarasm.asm.MethodVisitor: void visitTypeInsn(int,java.lang.String)>(187, $r4);

        $r9 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r9.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(89);

        $z0 = virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean isStaticMethod()>();

        if $z0 == 0 goto label02;

        $r38 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode classNode>;

        $r37 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode GENERATED_CLOSURE_Type>;

        $z3 = virtualinvoke $r38.<org.codehaus.groovy.ast.ClassNode: boolean declaresInterface(org.codehaus.groovy.ast.ClassNode)>($r37);

        if $z3 != 0 goto label02;

        $r39 = new org.codehaus.groovy.ast.expr.ClassExpression;

        $r40 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode classNode>;

        specialinvoke $r39.<org.codehaus.groovy.ast.expr.ClassExpression: void <init>(org.codehaus.groovy.ast.ClassNode)>($r40);

        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitClassExpression(org.codehaus.groovy.ast.expr.ClassExpression)>($r39);

        $r41 = new org.codehaus.groovy.ast.expr.ClassExpression;

        $r42 = virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode getOutermostClass()>();

        specialinvoke $r41.<org.codehaus.groovy.ast.expr.ClassExpression: void <init>(org.codehaus.groovy.ast.ClassNode)>($r42);

        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitClassExpression(org.codehaus.groovy.ast.expr.ClassExpression)>($r41);

        goto label03;

     label02:
        $r10 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r10.<groovyjarjarasm.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 0);

        specialinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void loadThis()>();

     label03:
        i1 = 2;

     label04:
        $i2 = lengthof $r7;

        if i1 >= $i2 goto label10;

        r14 = $r7[i1];

        $r15 = virtualinvoke r14.<org.codehaus.groovy.ast.Parameter: java.lang.String getName()>();

        $r16 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        $z1 = virtualinvoke $r16.<org.codehaus.groovy.classgen.CompileStack: boolean containsVariable(java.lang.String)>($r15);

        if $z1 != 0 goto label05;

        $r32 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        $r33 = virtualinvoke $r32.<org.codehaus.groovy.classgen.CompileStack: org.codehaus.groovy.ast.VariableScope getScope()>();

        $z2 = virtualinvoke $r33.<org.codehaus.groovy.ast.VariableScope: boolean isReferencedClassVariable(java.lang.String)>($r15);

        if $z2 == 0 goto label05;

        $r34 = new org.codehaus.groovy.ast.expr.FieldExpression;

        $r35 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode classNode>;

        $r36 = virtualinvoke $r35.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.FieldNode getDeclaredField(java.lang.String)>($r15);

        specialinvoke $r34.<org.codehaus.groovy.ast.expr.FieldExpression: void <init>(org.codehaus.groovy.ast.FieldNode)>($r36);

        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitFieldExpression(org.codehaus.groovy.ast.expr.FieldExpression)>($r34);

        goto label09;

     label05:
        $r18 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        $r17 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode classNode>;

        $r19 = virtualinvoke $r17.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode getSuperClass()>();

        $r20 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode CLOSURE_TYPE>;

        if $r19 == $r20 goto label06;

        $z4 = 1;

        goto label07;

     label06:
        $z4 = 0;

     label07:
        $r21 = virtualinvoke $r18.<org.codehaus.groovy.classgen.CompileStack: org.codehaus.groovy.classgen.Variable getVariable(java.lang.String,boolean)>($r15, $z4);

        r48 = $r21;

        if $r21 != null goto label08;

        $r23 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode classNode>;

        $r24 = virtualinvoke $r23.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.FieldNode getDeclaredField(java.lang.String)>($r15);

        $r25 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r25.<groovyjarjarasm.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 0);

        $r26 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        $r27 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.String internalClassName>;

        $r28 = virtualinvoke $r24.<org.codehaus.groovy.ast.FieldNode: org.codehaus.groovy.ast.ClassNode getType()>();

        $r29 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getTypeDescription(org.codehaus.groovy.ast.ClassNode)>($r28);

        interfaceinvoke $r26.<groovyjarjarasm.asm.MethodVisitor: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)>(180, $r27, $r15, $r29);

        virtualinvoke r14.<org.codehaus.groovy.ast.Parameter: void setClosureSharedVariable(boolean)>(0);

        $r30 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        $r31 = virtualinvoke $r30.<org.codehaus.groovy.classgen.CompileStack: org.codehaus.groovy.classgen.Variable defineVariable(org.codehaus.groovy.ast.Variable,boolean)>(r14, 1);

        r48 = $r31;

        virtualinvoke r14.<org.codehaus.groovy.ast.Parameter: void setClosureSharedVariable(boolean)>(1);

        virtualinvoke $r31.<org.codehaus.groovy.classgen.Variable: void setHolder(boolean)>(1);

     label08:
        $r22 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        $i0 = virtualinvoke r48.<org.codehaus.groovy.classgen.Variable: int getIndex()>();

        interfaceinvoke $r22.<groovyjarjarasm.asm.MethodVisitor: void visitVarInsn(int,int)>(25, $i0);

     label09:
        i1 = i1 + 1;

        goto label04;

     label10:
        r0.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean passingClosureParams> = 0;

        $r12 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        $r11 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode VOID_TYPE>;

        $r13 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getMethodDescriptor(org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.Parameter[])>($r11, $r7);

        interfaceinvoke $r12.<groovyjarjarasm.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)>(183, $r4, "<init>", $r13);

        return;
    }

    protected void loadThisOrOwner()
    {
        org.codehaus.groovy.ast.expr.FieldExpression $r1;
        org.codehaus.groovy.ast.ClassNode $r2;
        org.codehaus.groovy.ast.FieldNode $r3;
        org.codehaus.groovy.classgen.AsmClassGenerator r0;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        $z0 = specialinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean isInnerClass()>();

        if $z0 == 0 goto label1;

        $r1 = new org.codehaus.groovy.ast.expr.FieldExpression;

        $r2 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode classNode>;

        $r3 = virtualinvoke $r2.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.FieldNode getDeclaredField(java.lang.String)>("owner");

        specialinvoke $r1.<org.codehaus.groovy.ast.expr.FieldExpression: void <init>(org.codehaus.groovy.ast.FieldNode)>($r3);

        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitFieldExpression(org.codehaus.groovy.ast.expr.FieldExpression)>($r1);

        goto label2;

     label1:
        specialinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void loadThis()>();

     label2:
        return;
    }

    public void visitRegexExpression(org.codehaus.groovy.ast.expr.RegexExpression)
    {
        org.codehaus.groovy.ast.expr.RegexExpression r0;
        org.codehaus.groovy.classgen.AsmClassGenerator r2;
        org.codehaus.groovy.ast.expr.Expression $r1;
        org.codehaus.groovy.classgen.MethodCaller $r4;
        groovyjarjarasm.asm.MethodVisitor $r3;

        r2 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.RegexExpression;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.RegexExpression: org.codehaus.groovy.ast.expr.Expression getRegex()>();

        virtualinvoke $r1.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r2);

        $r4 = <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCaller regexPattern>;

        $r3 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        virtualinvoke $r4.<org.codehaus.groovy.classgen.MethodCaller: void call(groovyjarjarasm.asm.MethodVisitor)>($r3);

        return;
    }

    public void visitConstantExpression(org.codehaus.groovy.ast.expr.ConstantExpression)
    {
        org.codehaus.groovy.classgen.AsmClassGenerator r2;
        org.codehaus.groovy.classgen.BytecodeHelper $r3;
        java.lang.Object $r1;
        org.codehaus.groovy.ast.expr.ConstantExpression r0;

        r2 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.ConstantExpression;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.ConstantExpression: java.lang.Object getValue()>();

        $r3 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.BytecodeHelper helper>;

        virtualinvoke $r3.<org.codehaus.groovy.classgen.BytecodeHelper: void loadConstant(java.lang.Object)>($r1);

        return;
    }

    public void visitSpreadExpression(org.codehaus.groovy.ast.expr.SpreadExpression)
    {
        org.codehaus.groovy.GroovyBugError $r0;
        org.codehaus.groovy.classgen.AsmClassGenerator r1;
        org.codehaus.groovy.ast.expr.SpreadExpression r2;

        r1 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r2 := @parameter0: org.codehaus.groovy.ast.expr.SpreadExpression;

        $r0 = new org.codehaus.groovy.GroovyBugError;

        specialinvoke $r0.<org.codehaus.groovy.GroovyBugError: void <init>(java.lang.String)>("SpreadExpression should not be visited here");

        throw $r0;
    }

    public void visitSpreadMapExpression(org.codehaus.groovy.ast.expr.SpreadMapExpression)
    {
        org.codehaus.groovy.ast.expr.SpreadMapExpression r0;
        org.codehaus.groovy.classgen.AsmClassGenerator r2;
        org.codehaus.groovy.ast.expr.Expression $r1;
        org.codehaus.groovy.classgen.MethodCaller $r4;
        groovyjarjarasm.asm.MethodVisitor $r3;

        r2 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.SpreadMapExpression;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.SpreadMapExpression: org.codehaus.groovy.ast.expr.Expression getExpression()>();

        virtualinvoke $r1.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r2);

        $r4 = <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCaller spreadMap>;

        $r3 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        virtualinvoke $r4.<org.codehaus.groovy.classgen.MethodCaller: void call(groovyjarjarasm.asm.MethodVisitor)>($r3);

        return;
    }

    public void visitMethodPointerExpression(org.codehaus.groovy.ast.expr.MethodPointerExpression)
    {
        org.codehaus.groovy.ast.expr.MethodPointerExpression r0;
        org.codehaus.groovy.classgen.AsmClassGenerator r2;
        org.codehaus.groovy.ast.expr.Expression $r1, $r3;
        org.codehaus.groovy.classgen.MethodCaller $r5;
        groovyjarjarasm.asm.MethodVisitor $r4;

        r2 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.MethodPointerExpression;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.MethodPointerExpression: org.codehaus.groovy.ast.expr.Expression getExpression()>();

        virtualinvoke $r1.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r2);

        $r3 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.MethodPointerExpression: org.codehaus.groovy.ast.expr.Expression getMethodName()>();

        specialinvoke r2.<org.codehaus.groovy.classgen.AsmClassGenerator: void loadDynamicName(org.codehaus.groovy.ast.expr.Expression)>($r3);

        $r5 = <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCaller getMethodPointer>;

        $r4 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        virtualinvoke $r5.<org.codehaus.groovy.classgen.MethodCaller: void call(groovyjarjarasm.asm.MethodVisitor)>($r4);

        return;
    }

    private void loadDynamicName(org.codehaus.groovy.ast.expr.Expression)
    {
        org.codehaus.groovy.ast.ClassNode $r2;
        org.codehaus.groovy.classgen.AsmClassGenerator r3;
        org.codehaus.groovy.classgen.BytecodeHelper $r6;
        org.codehaus.groovy.ast.expr.ConstantExpression r4;
        java.lang.Object $r5;
        org.codehaus.groovy.ast.expr.Expression r0;
        org.codehaus.groovy.ast.expr.CastExpression $r1;
        boolean $z0, $z1;

        r3 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.Expression;

        $z0 = r0 instanceof org.codehaus.groovy.ast.expr.ConstantExpression;

        if $z0 == 0 goto label1;

        r4 = (org.codehaus.groovy.ast.expr.ConstantExpression) r0;

        $r5 = virtualinvoke r4.<org.codehaus.groovy.ast.expr.ConstantExpression: java.lang.Object getValue()>();

        $z1 = $r5 instanceof java.lang.String;

        if $z1 == 0 goto label1;

        $r6 = r3.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.BytecodeHelper helper>;

        virtualinvoke $r6.<org.codehaus.groovy.classgen.BytecodeHelper: void loadConstant(java.lang.Object)>($r5);

        return;

     label1:
        $r1 = new org.codehaus.groovy.ast.expr.CastExpression;

        $r2 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode STRING_TYPE>;

        specialinvoke $r1.<org.codehaus.groovy.ast.expr.CastExpression: void <init>(org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.expr.Expression)>($r2, r0);

        virtualinvoke $r1.<org.codehaus.groovy.ast.expr.CastExpression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r3);

        return;
    }

    public void visitUnaryMinusExpression(org.codehaus.groovy.ast.expr.UnaryMinusExpression)
    {
        org.codehaus.groovy.ast.expr.UnaryMinusExpression r0;
        org.codehaus.groovy.classgen.AsmClassGenerator r2;
        org.codehaus.groovy.ast.expr.Expression $r1;
        org.codehaus.groovy.classgen.MethodCaller $r4;
        groovyjarjarasm.asm.MethodVisitor $r3;

        r2 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.UnaryMinusExpression;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.UnaryMinusExpression: org.codehaus.groovy.ast.expr.Expression getExpression()>();

        virtualinvoke $r1.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r2);

        $r4 = <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCaller unaryMinus>;

        $r3 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        virtualinvoke $r4.<org.codehaus.groovy.classgen.MethodCaller: void call(groovyjarjarasm.asm.MethodVisitor)>($r3);

        return;
    }

    public void visitUnaryPlusExpression(org.codehaus.groovy.ast.expr.UnaryPlusExpression)
    {
        org.codehaus.groovy.ast.expr.UnaryPlusExpression r0;
        org.codehaus.groovy.classgen.AsmClassGenerator r2;
        org.codehaus.groovy.ast.expr.Expression $r1;
        org.codehaus.groovy.classgen.MethodCaller $r4;
        groovyjarjarasm.asm.MethodVisitor $r3;

        r2 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.UnaryPlusExpression;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.UnaryPlusExpression: org.codehaus.groovy.ast.expr.Expression getExpression()>();

        virtualinvoke $r1.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r2);

        $r4 = <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCaller unaryPlus>;

        $r3 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        virtualinvoke $r4.<org.codehaus.groovy.classgen.MethodCaller: void call(groovyjarjarasm.asm.MethodVisitor)>($r3);

        return;
    }

    public void visitBitwiseNegationExpression(org.codehaus.groovy.ast.expr.BitwiseNegationExpression)
    {
        org.codehaus.groovy.ast.expr.BitwiseNegationExpression r0;
        org.codehaus.groovy.classgen.AsmClassGenerator r2;
        org.codehaus.groovy.ast.expr.Expression $r1;
        org.codehaus.groovy.classgen.MethodCaller $r4;
        groovyjarjarasm.asm.MethodVisitor $r3;

        r2 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.BitwiseNegationExpression;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.BitwiseNegationExpression: org.codehaus.groovy.ast.expr.Expression getExpression()>();

        virtualinvoke $r1.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r2);

        $r4 = <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCaller bitwiseNegate>;

        $r3 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        virtualinvoke $r4.<org.codehaus.groovy.classgen.MethodCaller: void call(groovyjarjarasm.asm.MethodVisitor)>($r3);

        return;
    }

    public void visitCastExpression(org.codehaus.groovy.ast.expr.CastExpression)
    {
        org.codehaus.groovy.ast.ClassNode $r1, r4, $r6;
        org.codehaus.groovy.classgen.AsmClassGenerator r2;
        org.codehaus.groovy.ast.expr.CastExpression r0;
        org.codehaus.groovy.ast.expr.Expression $r3, $r5, $r7;
        boolean $z0, $z1;

        r2 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.CastExpression;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.CastExpression: org.codehaus.groovy.ast.ClassNode getType()>();

        $r3 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.CastExpression: org.codehaus.groovy.ast.expr.Expression getExpression()>();

        virtualinvoke r2.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitAndAutoboxBoolean(org.codehaus.groovy.ast.expr.Expression)>($r3);

        r4 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode rightHandType>;

        $r5 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.CastExpression: org.codehaus.groovy.ast.expr.Expression getExpression()>();

        $r6 = virtualinvoke $r5.<org.codehaus.groovy.ast.expr.Expression: org.codehaus.groovy.ast.ClassNode getType()>();

        r2.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode rightHandType> = $r6;

        $r7 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.CastExpression: org.codehaus.groovy.ast.expr.Expression getExpression()>();

        $z0 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.CastExpression: boolean isIgnoringAutoboxing()>();

        $z1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.CastExpression: boolean isCoerce()>();

        virtualinvoke r2.<org.codehaus.groovy.classgen.AsmClassGenerator: void doConvertAndCast(org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.expr.Expression,boolean,boolean,boolean)>($r1, $r7, $z0, 0, $z1);

        r2.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode rightHandType> = r4;

        return;
    }

    public void visitNotExpression(org.codehaus.groovy.ast.expr.NotExpression)
    {
        org.codehaus.groovy.classgen.AsmClassGenerator r2;
        org.codehaus.groovy.classgen.BytecodeHelper $r4, $r5;
        org.codehaus.groovy.ast.expr.NotExpression r0;
        java.lang.Class $r3;
        org.codehaus.groovy.ast.expr.Expression $r1;
        boolean $z0, $z1;

        r2 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.NotExpression;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.NotExpression: org.codehaus.groovy.ast.expr.Expression getExpression()>();

        virtualinvoke $r1.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r2);

        $z0 = virtualinvoke r2.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean isComparisonExpression(org.codehaus.groovy.ast.expr.Expression)>($r1);

        if $z0 != 0 goto label1;

        $z1 = $r1 instanceof org.codehaus.groovy.ast.expr.BooleanExpression;

        if $z1 != 0 goto label1;

        $r4 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.BytecodeHelper helper>;

        $r3 = <java.lang.Boolean: java.lang.Class TYPE>;

        virtualinvoke $r4.<org.codehaus.groovy.classgen.BytecodeHelper: void unbox(java.lang.Class)>($r3);

     label1:
        $r5 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.BytecodeHelper helper>;

        virtualinvoke $r5.<org.codehaus.groovy.classgen.BytecodeHelper: void negateBoolean()>();

        return;
    }

    public void visitBooleanExpression(org.codehaus.groovy.ast.expr.BooleanExpression)
    {
        org.codehaus.groovy.ast.expr.BooleanExpression r2;
        org.codehaus.groovy.classgen.AsmClassGenerator r0;
        org.codehaus.groovy.classgen.BytecodeHelper $r7;
        org.codehaus.groovy.classgen.CompileStack $r1, $r5;
        java.lang.Class $r6;
        org.codehaus.groovy.ast.expr.Expression $r3, $r4;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r2 := @parameter0: org.codehaus.groovy.ast.expr.BooleanExpression;

        $r1 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        virtualinvoke $r1.<org.codehaus.groovy.classgen.CompileStack: void pushBooleanExpression()>();

        $r3 = virtualinvoke r2.<org.codehaus.groovy.ast.expr.BooleanExpression: org.codehaus.groovy.ast.expr.Expression getExpression()>();

        virtualinvoke $r3.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r0);

        $r4 = virtualinvoke r2.<org.codehaus.groovy.ast.expr.BooleanExpression: org.codehaus.groovy.ast.expr.Expression getExpression()>();

        $z0 = virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean isComparisonExpression(org.codehaus.groovy.ast.expr.Expression)>($r4);

        if $z0 != 0 goto label1;

        $r7 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.BytecodeHelper helper>;

        $r6 = <java.lang.Boolean: java.lang.Class TYPE>;

        virtualinvoke $r7.<org.codehaus.groovy.classgen.BytecodeHelper: void unbox(java.lang.Class)>($r6);

     label1:
        $r5 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        virtualinvoke $r5.<org.codehaus.groovy.classgen.CompileStack: void pop()>();

        return;
    }

    private void makeInvokeMethodCall(org.codehaus.groovy.ast.expr.MethodCallExpression, boolean, org.codehaus.groovy.classgen.MethodCallerMultiAdapter)
    {
        org.codehaus.groovy.classgen.MethodCallerMultiAdapter r4;
        org.codehaus.groovy.ast.expr.MethodCallExpression r0;
        org.codehaus.groovy.ast.expr.Expression $r1, $r3, $r8, $r9, r13, $r17;
        boolean $z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        org.codehaus.groovy.ast.ClassNode $r6, $r7, $r12, $r16;
        org.codehaus.groovy.classgen.AsmClassGenerator r2;
        org.codehaus.groovy.ast.expr.ClassExpression $r5;
        java.lang.Class $r11, $r14;
        org.codehaus.groovy.ast.expr.CastExpression $r10, $r15;

        r2 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.MethodCallExpression;

        z1 := @parameter1: boolean;

        r4 := @parameter2: org.codehaus.groovy.classgen.MethodCallerMultiAdapter;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.MethodCallExpression: org.codehaus.groovy.ast.expr.Expression getObjectExpression()>();

        r13 = $r1;

        $z0 = virtualinvoke r2.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean isStaticMethod()>();

        if $z0 != 0 goto label3;

        $z7 = specialinvoke r2.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean isStaticContext()>();

        if $z7 != 0 goto label3;

        $r9 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.MethodCallExpression: org.codehaus.groovy.ast.expr.Expression getObjectExpression()>();

        $z8 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: boolean isThisExpression(org.codehaus.groovy.ast.expr.Expression)>($r9);

        if $z8 == 0 goto label3;

        $r10 = new org.codehaus.groovy.ast.expr.CastExpression;

        $r11 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$groovy$lang$GroovyObject>;

        if $r11 != null goto label1;

        $r14 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$(java.lang.String)>("groovy.lang.GroovyObject");

        <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$groovy$lang$GroovyObject> = $r14;

        goto label2;

     label1:
        $r14 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$groovy$lang$GroovyObject>;

     label2:
        $r12 = staticinvoke <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode make(java.lang.Class)>($r14);

        specialinvoke $r10.<org.codehaus.groovy.ast.expr.CastExpression: void <init>(org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.expr.Expression)>($r12, $r1);

        r13 = $r10;

     label3:
        $r15 = new org.codehaus.groovy.ast.expr.CastExpression;

        $r16 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode STRING_TYPE>;

        $r17 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.MethodCallExpression: org.codehaus.groovy.ast.expr.Expression getMethod()>();

        specialinvoke $r15.<org.codehaus.groovy.ast.expr.CastExpression: void <init>(org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.expr.Expression)>($r16, $r17);

        if z1 == 0 goto label4;

        $r5 = new org.codehaus.groovy.ast.expr.ClassExpression;

        $r6 = virtualinvoke r2.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode getOutermostClass()>();

        $r7 = virtualinvoke $r6.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode getSuperClass()>();

        specialinvoke $r5.<org.codehaus.groovy.ast.expr.ClassExpression: void <init>(org.codehaus.groovy.ast.ClassNode)>($r7);

        $r8 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.MethodCallExpression: org.codehaus.groovy.ast.expr.Expression getArguments()>();

        $z5 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.MethodCallExpression: boolean isSafe()>();

        $z6 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.MethodCallExpression: boolean isSpreadSafe()>();

        specialinvoke r2.<org.codehaus.groovy.classgen.AsmClassGenerator: void makeCall(org.codehaus.groovy.ast.expr.ClassExpression,org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.classgen.MethodCallerMultiAdapter,boolean,boolean,boolean)>($r5, r13, $r15, $r8, r4, $z5, $z6, 0);

        goto label5;

     label4:
        $r3 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.MethodCallExpression: org.codehaus.groovy.ast.expr.Expression getArguments()>();

        $z2 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.MethodCallExpression: boolean isSafe()>();

        $z3 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.MethodCallExpression: boolean isSpreadSafe()>();

        $z4 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.MethodCallExpression: boolean isImplicitThis()>();

        specialinvoke r2.<org.codehaus.groovy.classgen.AsmClassGenerator: void makeCall(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.classgen.MethodCallerMultiAdapter,boolean,boolean,boolean)>(r13, $r15, $r3, r4, $z2, $z3, $z4);

     label5:
        return;
    }

    private void makeCall(org.codehaus.groovy.ast.expr.Expression, org.codehaus.groovy.ast.expr.Expression, org.codehaus.groovy.ast.expr.Expression, org.codehaus.groovy.classgen.MethodCallerMultiAdapter, boolean, boolean, boolean)
    {
        org.codehaus.groovy.ast.ClassNode r5;
        org.codehaus.groovy.classgen.MethodCallerMultiAdapter r4;
        org.codehaus.groovy.classgen.AsmClassGenerator r0;
        org.codehaus.groovy.ast.expr.ClassExpression $r6;
        org.codehaus.groovy.ast.expr.Expression r1, r2, r3;
        boolean $z0, z1, z2, z3;

        r0 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.Expression;

        r2 := @parameter1: org.codehaus.groovy.ast.expr.Expression;

        r3 := @parameter2: org.codehaus.groovy.ast.expr.Expression;

        r4 := @parameter3: org.codehaus.groovy.classgen.MethodCallerMultiAdapter;

        z1 := @parameter4: boolean;

        z2 := @parameter5: boolean;

        z3 := @parameter6: boolean;

        r5 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode classNode>;

        $z0 = virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean isInClosure()>();

        if $z0 == 0 goto label1;

        if z3 != 0 goto label1;

        r5 = virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode getOutermostClass()>();

     label1:
        $r6 = new org.codehaus.groovy.ast.expr.ClassExpression;

        specialinvoke $r6.<org.codehaus.groovy.ast.expr.ClassExpression: void <init>(org.codehaus.groovy.ast.ClassNode)>(r5);

        specialinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void makeCall(org.codehaus.groovy.ast.expr.ClassExpression,org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.classgen.MethodCallerMultiAdapter,boolean,boolean,boolean)>($r6, r1, r2, r3, r4, z1, z2, z3);

        return;
    }

    private void makeCall(org.codehaus.groovy.ast.expr.ClassExpression, org.codehaus.groovy.ast.expr.Expression, org.codehaus.groovy.ast.expr.Expression, org.codehaus.groovy.ast.expr.Expression, org.codehaus.groovy.classgen.MethodCallerMultiAdapter, boolean, boolean, boolean)
    {
        org.codehaus.groovy.classgen.MethodCallerMultiAdapter r5;
        groovyjarjarasm.asm.MethodVisitor $r14;
        int i0, $i1, i2, $i4;
        org.codehaus.groovy.ast.expr.Expression r2, r3, r4, $r10;
        boolean z0, z1, z2, $z3, $z4, $z5, z6, z7, $z8;
        org.codehaus.groovy.classgen.AsmClassGenerator r0;
        org.codehaus.groovy.ast.expr.ArgumentListExpression r11, $r15, $r16;
        org.codehaus.groovy.ast.expr.ClassExpression r1;
        java.util.List $r7, $r9;
        org.codehaus.groovy.ast.expr.TupleExpression r12, r13;

        r0 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.ClassExpression;

        r2 := @parameter1: org.codehaus.groovy.ast.expr.Expression;

        r3 := @parameter2: org.codehaus.groovy.ast.expr.Expression;

        r4 := @parameter3: org.codehaus.groovy.ast.expr.Expression;

        r5 := @parameter4: org.codehaus.groovy.classgen.MethodCallerMultiAdapter;

        z6 := @parameter5: boolean;

        z7 := @parameter6: boolean;

        z2 := @parameter7: boolean;

        z0 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean leftHandExpression>;

        r0.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean leftHandExpression> = 0;

        virtualinvoke r1.<org.codehaus.groovy.ast.expr.ClassExpression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r0);

        z1 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean implicitThis>;

        r0.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean implicitThis> = z2;

        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitAndAutoboxBoolean(org.codehaus.groovy.ast.expr.Expression)>(r2);

        r0.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean implicitThis> = z1;

        if r3 == null goto label01;

        virtualinvoke r3.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r0);

     label01:
        $z3 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: boolean containsSpreadExpression(org.codehaus.groovy.ast.expr.Expression)>(r4);

        if $z3 == 0 goto label02;

        $i4 = (int) -1;

        $i1 = $i4;

        goto label03;

     label02:
        $i1 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: int argumentSize(org.codehaus.groovy.ast.expr.Expression)>(r4);

     label03:
        i0 = $i1;

        if $i1 > 0 goto label04;

        if $z3 == 0 goto label10;

     label04:
        $z4 = r4 instanceof org.codehaus.groovy.ast.expr.ArgumentListExpression;

        if $z4 == 0 goto label05;

        r11 = (org.codehaus.groovy.ast.expr.ArgumentListExpression) r4;

        goto label07;

     label05:
        $z5 = r4 instanceof org.codehaus.groovy.ast.expr.TupleExpression;

        if $z5 == 0 goto label06;

        r12 = (org.codehaus.groovy.ast.expr.TupleExpression) r4;

        $r15 = new org.codehaus.groovy.ast.expr.ArgumentListExpression;

        $r9 = virtualinvoke r12.<org.codehaus.groovy.ast.expr.TupleExpression: java.util.List getExpressions()>();

        specialinvoke $r15.<org.codehaus.groovy.ast.expr.ArgumentListExpression: void <init>(java.util.List)>($r9);

        r11 = $r15;

        goto label07;

     label06:
        $r16 = new org.codehaus.groovy.ast.expr.ArgumentListExpression;

        specialinvoke $r16.<org.codehaus.groovy.ast.expr.ArgumentListExpression: void <init>()>();

        r11 = $r16;

        virtualinvoke $r16.<org.codehaus.groovy.ast.expr.ArgumentListExpression: org.codehaus.groovy.ast.expr.TupleExpression addExpression(org.codehaus.groovy.ast.expr.Expression)>(r4);

     label07:
        if $z3 == 0 goto label08;

        $r7 = virtualinvoke r11.<org.codehaus.groovy.ast.expr.ArgumentListExpression: java.util.List getExpressions()>();

        specialinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void despreadList(java.util.List,boolean)>($r7, 1);

        goto label09;

     label08:
        virtualinvoke r11.<org.codehaus.groovy.ast.expr.ArgumentListExpression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r0);

     label09:
        goto label13;

     label10:
        if $i1 <= 0 goto label13;

        r13 = (org.codehaus.groovy.ast.expr.TupleExpression) r4;

        i2 = 0;

     label11:
        if i2 >= i0 goto label13;

        $r10 = virtualinvoke r13.<org.codehaus.groovy.ast.expr.TupleExpression: org.codehaus.groovy.ast.expr.Expression getExpression(int)>(i2);

        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitAndAutoboxBoolean(org.codehaus.groovy.ast.expr.Expression)>($r10);

        $z8 = $r10 instanceof org.codehaus.groovy.ast.expr.CastExpression;

        if $z8 == 0 goto label12;

        specialinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void loadWrapper(org.codehaus.groovy.ast.expr.Expression)>($r10);

     label12:
        i2 = i2 + 1;

        goto label11;

     label13:
        $r14 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        virtualinvoke r5.<org.codehaus.groovy.classgen.MethodCallerMultiAdapter: void call(groovyjarjarasm.asm.MethodVisitor,int,boolean,boolean)>($r14, i0, z6, z7);

        r0.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean leftHandExpression> = z0;

        return;
    }

    private void despreadList(java.util.List, boolean)
    {
        org.codehaus.groovy.ast.expr.ConstantExpression $r12;
        java.lang.Integer $r13;
        java.util.ArrayList $r0, $r1, $r2;
        groovyjarjarasm.asm.MethodVisitor $r9;
        int $i0, $i1, $i2, i3;
        org.codehaus.groovy.ast.expr.Expression $r15;
        boolean z0, $z1;
        org.codehaus.groovy.ast.expr.SpreadExpression $r14;
        org.codehaus.groovy.ast.expr.ArrayExpression $r7;
        org.codehaus.groovy.ast.ClassNode $r8;
        org.codehaus.groovy.classgen.AsmClassGenerator r4;
        org.codehaus.groovy.ast.expr.ArgumentListExpression $r5;
        org.codehaus.groovy.classgen.MethodCaller $r10;
        java.util.List r3;
        org.codehaus.groovy.ast.expr.TupleExpression $r6;
        java.lang.Object $r11;

        r4 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r3 := @parameter0: java.util.List;

        z0 := @parameter1: boolean;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        i3 = 0;

     label1:
        $i0 = interfaceinvoke r3.<java.util.List: int size()>();

        if i3 >= $i0 goto label4;

        $r11 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(i3);

        $z1 = $r11 instanceof org.codehaus.groovy.ast.expr.SpreadExpression;

        if $z1 != 0 goto label2;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r11);

        goto label3;

     label2:
        $r12 = new org.codehaus.groovy.ast.expr.ConstantExpression;

        $r13 = new java.lang.Integer;

        $i1 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        $i2 = i3 - $i1;

        specialinvoke $r13.<java.lang.Integer: void <init>(int)>($i2);

        specialinvoke $r12.<org.codehaus.groovy.ast.expr.ConstantExpression: void <init>(java.lang.Object)>($r13);

        virtualinvoke $r0.<java.util.ArrayList: boolean add(java.lang.Object)>($r12);

        $r14 = (org.codehaus.groovy.ast.expr.SpreadExpression) $r11;

        $r15 = virtualinvoke $r14.<org.codehaus.groovy.ast.expr.SpreadExpression: org.codehaus.groovy.ast.expr.Expression getExpression()>();

        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r15);

     label3:
        i3 = i3 + 1;

        goto label1;

     label4:
        $r5 = new org.codehaus.groovy.ast.expr.ArgumentListExpression;

        specialinvoke $r5.<org.codehaus.groovy.ast.expr.ArgumentListExpression: void <init>(java.util.List)>($r2);

        specialinvoke r4.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitTupleExpression(org.codehaus.groovy.ast.expr.TupleExpression,boolean)>($r5, z0);

        $r6 = new org.codehaus.groovy.ast.expr.TupleExpression;

        specialinvoke $r6.<org.codehaus.groovy.ast.expr.TupleExpression: void <init>(java.util.List)>($r1);

        virtualinvoke $r6.<org.codehaus.groovy.ast.expr.TupleExpression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r4);

        $r7 = new org.codehaus.groovy.ast.expr.ArrayExpression;

        $r8 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode int_TYPE>;

        specialinvoke $r7.<org.codehaus.groovy.ast.expr.ArrayExpression: void <init>(org.codehaus.groovy.ast.ClassNode,java.util.List,java.util.List)>($r8, $r0, null);

        virtualinvoke $r7.<org.codehaus.groovy.ast.expr.ArrayExpression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r4);

        $r10 = <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCaller despreadList>;

        $r9 = r4.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        virtualinvoke $r10.<org.codehaus.groovy.classgen.MethodCaller: void call(groovyjarjarasm.asm.MethodVisitor)>($r9);

        return;
    }

    public void visitMethodCallExpression(org.codehaus.groovy.ast.expr.MethodCallExpression)
    {
        org.codehaus.groovy.classgen.MethodCallerMultiAdapter r11;
        java.lang.StringBuffer $r2, $r3, $r5, $r6;
        org.codehaus.groovy.ast.expr.MethodCallExpression r1;
        org.codehaus.groovy.ast.expr.Expression $r4, $r8, $r9;
        java.lang.String $r7, $r10;
        boolean $z0, $z1, $z2, $z3;
        org.codehaus.groovy.classgen.AsmClassGenerator r0;

        r0 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.MethodCallExpression;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("visitMethodCallExpression: \"");

        $r4 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.MethodCallExpression: org.codehaus.groovy.ast.expr.Expression getMethod()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\":");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void onLineNumber(org.codehaus.groovy.ast.ASTNode,java.lang.String)>(r1, $r7);

        $z0 = specialinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean isClosureCall(org.codehaus.groovy.ast.expr.MethodCallExpression)>(r1);

        if $z0 == 0 goto label1;

        $r9 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.MethodCallExpression: org.codehaus.groovy.ast.expr.Expression getArguments()>();

        $r10 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.MethodCallExpression: java.lang.String getMethodAsString()>();

        specialinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void invokeClosure(org.codehaus.groovy.ast.expr.Expression,java.lang.String)>($r9, $r10);

        goto label5;

     label1:
        $z1 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: boolean usesSuper(org.codehaus.groovy.ast.expr.MethodCallExpression)>(r1);

        r11 = <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCallerMultiAdapter invokeMethod>;

        $r8 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.MethodCallExpression: org.codehaus.groovy.ast.expr.Expression getObjectExpression()>();

        $z2 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: boolean isThisExpression(org.codehaus.groovy.ast.expr.Expression)>($r8);

        if $z2 == 0 goto label2;

        r11 = <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCallerMultiAdapter invokeMethodOnCurrent>;

     label2:
        if $z1 == 0 goto label3;

        r11 = <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCallerMultiAdapter invokeMethodOnSuper>;

     label3:
        $z3 = specialinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean isStaticInvocation(org.codehaus.groovy.ast.expr.MethodCallExpression)>(r1);

        if $z3 == 0 goto label4;

        r11 = <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCallerMultiAdapter invokeStaticMethod>;

     label4:
        specialinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void makeInvokeMethodCall(org.codehaus.groovy.ast.expr.MethodCallExpression,boolean,org.codehaus.groovy.classgen.MethodCallerMultiAdapter)>(r1, $z1, r11);

     label5:
        return;
    }

    private boolean isClosureCall(org.codehaus.groovy.ast.expr.MethodCallExpression)
    {
        org.codehaus.groovy.ast.ClassNode $r4, $r7;
        org.codehaus.groovy.classgen.AsmClassGenerator r3;
        org.codehaus.groovy.ast.FieldNode $r5;
        org.codehaus.groovy.ast.expr.MethodCallExpression r0;
        java.lang.String $r1;
        org.codehaus.groovy.ast.expr.Expression $r2, $r6;
        boolean $z0, $z1, $z2, $z3;

        r3 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.MethodCallExpression;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.MethodCallExpression: java.lang.String getMethodAsString()>();

        if $r1 != null goto label1;

        return 0;

     label1:
        $z0 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.MethodCallExpression: boolean isImplicitThis()>();

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $r2 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.MethodCallExpression: org.codehaus.groovy.ast.expr.Expression getObjectExpression()>();

        $z1 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: boolean isThisExpression(org.codehaus.groovy.ast.expr.Expression)>($r2);

        if $z1 != 0 goto label3;

        return 0;

     label3:
        $r4 = r3.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode classNode>;

        $r5 = virtualinvoke $r4.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.FieldNode getDeclaredField(java.lang.String)>($r1);

        if $r5 != null goto label4;

        return 0;

     label4:
        $r6 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.MethodCallExpression: org.codehaus.groovy.ast.expr.Expression getArguments()>();

        $r7 = r3.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode classNode>;

        $z2 = virtualinvoke $r7.<org.codehaus.groovy.ast.ClassNode: boolean hasPossibleMethod(java.lang.String,org.codehaus.groovy.ast.expr.Expression)>($r1, $r6);

        if $z2 != 0 goto label5;

        $z3 = 1;

        goto label6;

     label5:
        $z3 = 0;

     label6:
        return $z3;
    }

    private void invokeClosure(org.codehaus.groovy.ast.expr.Expression, java.lang.String)
    {
        org.codehaus.groovy.ast.expr.VariableExpression $r1;
        org.codehaus.groovy.classgen.AsmClassGenerator r0;
        org.codehaus.groovy.classgen.MethodCaller $r6;
        groovyjarjarasm.asm.MethodVisitor $r5;
        org.codehaus.groovy.ast.expr.TupleExpression $r4;
        java.lang.String r2;
        org.codehaus.groovy.ast.expr.Expression r3;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r3 := @parameter0: org.codehaus.groovy.ast.expr.Expression;

        r2 := @parameter1: java.lang.String;

        $r1 = new org.codehaus.groovy.ast.expr.VariableExpression;

        specialinvoke $r1.<org.codehaus.groovy.ast.expr.VariableExpression: void <init>(java.lang.String)>(r2);

        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitVariableExpression(org.codehaus.groovy.ast.expr.VariableExpression)>($r1);

        $z0 = r3 instanceof org.codehaus.groovy.ast.expr.TupleExpression;

        if $z0 == 0 goto label1;

        virtualinvoke r3.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r0);

        goto label2;

     label1:
        $r4 = new org.codehaus.groovy.ast.expr.TupleExpression;

        specialinvoke $r4.<org.codehaus.groovy.ast.expr.TupleExpression: void <init>(org.codehaus.groovy.ast.expr.Expression)>(r3);

        virtualinvoke $r4.<org.codehaus.groovy.ast.expr.TupleExpression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r0);

     label2:
        $r6 = <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCaller invokeClosureMethod>;

        $r5 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        virtualinvoke $r6.<org.codehaus.groovy.classgen.MethodCaller: void call(groovyjarjarasm.asm.MethodVisitor)>($r5);

        return;
    }

    private boolean isStaticInvocation(org.codehaus.groovy.ast.expr.MethodCallExpression)
    {
        org.codehaus.groovy.classgen.AsmClassGenerator r2;
        org.codehaus.groovy.ast.expr.MethodCallExpression r0;
        org.codehaus.groovy.ast.expr.Expression $r1;
        boolean $z0, $z1, $z2, $z3, $z4;

        r2 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.MethodCallExpression;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.MethodCallExpression: org.codehaus.groovy.ast.expr.Expression getObjectExpression()>();

        $z0 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: boolean isThisExpression(org.codehaus.groovy.ast.expr.Expression)>($r1);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $z1 = virtualinvoke r2.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean isStaticMethod()>();

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $z2 = specialinvoke r2.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean isStaticContext()>();

        if $z2 == 0 goto label3;

        $z3 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.MethodCallExpression: boolean isImplicitThis()>();

        if $z3 != 0 goto label3;

        $z4 = 1;

        goto label4;

     label3:
        $z4 = 0;

     label4:
        return $z4;
    }

    protected boolean emptyArguments(org.codehaus.groovy.ast.expr.Expression)
    {
        int $i0;
        org.codehaus.groovy.classgen.AsmClassGenerator r1;
        org.codehaus.groovy.ast.expr.Expression r0;
        boolean $z0;

        r1 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.Expression;

        $i0 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: int argumentSize(org.codehaus.groovy.ast.expr.Expression)>(r0);

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected static boolean containsSpreadExpression(org.codehaus.groovy.ast.expr.Expression)
    {
        org.codehaus.groovy.ast.expr.ListExpression r5;
        java.util.Iterator $r1;
        org.codehaus.groovy.ast.expr.TupleExpression r3;
        java.util.List r4;
        java.lang.Object $r2;
        org.codehaus.groovy.ast.expr.Expression r0;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.Expression;

        $z0 = r0 instanceof org.codehaus.groovy.ast.expr.TupleExpression;

        if $z0 == 0 goto label1;

        r3 = (org.codehaus.groovy.ast.expr.TupleExpression) r0;

        r4 = virtualinvoke r3.<org.codehaus.groovy.ast.expr.TupleExpression: java.util.List getExpressions()>();

        goto label3;

     label1:
        $z1 = r0 instanceof org.codehaus.groovy.ast.expr.ListExpression;

        if $z1 == 0 goto label2;

        r5 = (org.codehaus.groovy.ast.expr.ListExpression) r0;

        r4 = virtualinvoke r5.<org.codehaus.groovy.ast.expr.ListExpression: java.util.List getExpressions()>();

        goto label3;

     label2:
        $z2 = r0 instanceof org.codehaus.groovy.ast.expr.SpreadExpression;

        return $z2;

     label3:
        $r1 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z4 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label5;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $z3 = $r2 instanceof org.codehaus.groovy.ast.expr.SpreadExpression;

        if $z3 == 0 goto label4;

        return 1;

     label5:
        return 0;
    }

    protected static int argumentSize(org.codehaus.groovy.ast.expr.Expression)
    {
        org.codehaus.groovy.ast.expr.TupleExpression r1;
        java.util.List $r2;
        int $i0;
        org.codehaus.groovy.ast.expr.Expression r0;
        boolean $z0;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.Expression;

        $z0 = r0 instanceof org.codehaus.groovy.ast.expr.TupleExpression;

        if $z0 == 0 goto label1;

        r1 = (org.codehaus.groovy.ast.expr.TupleExpression) r0;

        $r2 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.TupleExpression: java.util.List getExpressions()>();

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        return $i0;

     label1:
        return 1;
    }

    public void visitStaticMethodCallExpression(org.codehaus.groovy.ast.expr.StaticMethodCallExpression)
    {
        org.codehaus.groovy.ast.expr.StaticMethodCallExpression r1;
        org.codehaus.groovy.ast.ClassNode $r9;
        org.codehaus.groovy.classgen.MethodCallerMultiAdapter $r13;
        org.codehaus.groovy.classgen.AsmClassGenerator r0;
        org.codehaus.groovy.ast.expr.ConstantExpression $r10;
        org.codehaus.groovy.ast.expr.ClassExpression $r8;
        java.lang.StringBuffer $r2, $r3, $r5, $r6;
        java.lang.String $r4, $r7, $r11;
        org.codehaus.groovy.ast.expr.Expression $r12;

        r0 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.StaticMethodCallExpression;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("visitStaticMethodCallExpression: \"");

        $r4 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.StaticMethodCallExpression: java.lang.String getMethod()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\":");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void onLineNumber(org.codehaus.groovy.ast.ASTNode,java.lang.String)>(r1, $r7);

        $r8 = new org.codehaus.groovy.ast.expr.ClassExpression;

        $r9 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.StaticMethodCallExpression: org.codehaus.groovy.ast.ClassNode getOwnerType()>();

        specialinvoke $r8.<org.codehaus.groovy.ast.expr.ClassExpression: void <init>(org.codehaus.groovy.ast.ClassNode)>($r9);

        $r10 = new org.codehaus.groovy.ast.expr.ConstantExpression;

        $r11 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.StaticMethodCallExpression: java.lang.String getMethod()>();

        specialinvoke $r10.<org.codehaus.groovy.ast.expr.ConstantExpression: void <init>(java.lang.Object)>($r11);

        $r12 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.StaticMethodCallExpression: org.codehaus.groovy.ast.expr.Expression getArguments()>();

        $r13 = <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCallerMultiAdapter invokeStaticMethod>;

        specialinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void makeCall(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.classgen.MethodCallerMultiAdapter,boolean,boolean,boolean)>($r8, $r10, $r12, $r13, 0, 0, 0);

        return;
    }

    private void addGeneratedClosureConstructorCall(org.codehaus.groovy.ast.expr.ConstructorCallExpression)
    {
        groovyjarjarasm.asm.MethodVisitor $r1, $r15;
        java.lang.StringBuffer $r18, $r19, $r21;
        int $i0, $i1;
        org.codehaus.groovy.ast.expr.Expression $r5, $r8, $r9;
        java.lang.String $r14, $r16, $r22;
        org.codehaus.groovy.ast.Parameter $r10;
        org.codehaus.groovy.ast.expr.ConstructorCallExpression r4;
        org.codehaus.groovy.ast.ClassNode $r2, $r3, $r11, $r13;
        org.codehaus.groovy.classgen.AsmClassGenerator r0;
        org.codehaus.groovy.GroovyBugError $r17;
        org.codehaus.groovy.ast.expr.TupleExpression r6;
        java.util.List $r7, $r20;
        org.codehaus.groovy.ast.Parameter[] $r12;

        r0 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r4 := @parameter0: org.codehaus.groovy.ast.expr.ConstructorCallExpression;

        $r1 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r1.<groovyjarjarasm.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 0);

        $r2 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode classNode>;

        $r3 = virtualinvoke $r2.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode getSuperClass()>();

        $r5 = virtualinvoke r4.<org.codehaus.groovy.ast.expr.ConstructorCallExpression: org.codehaus.groovy.ast.expr.Expression getArguments()>();

        r6 = (org.codehaus.groovy.ast.expr.TupleExpression) $r5;

        $r7 = virtualinvoke r6.<org.codehaus.groovy.ast.expr.TupleExpression: java.util.List getExpressions()>();

        $i0 = interfaceinvoke $r7.<java.util.List: int size()>();

        if $i0 == 2 goto label1;

        $r17 = new org.codehaus.groovy.GroovyBugError;

        $r18 = new java.lang.StringBuffer;

        specialinvoke $r18.<java.lang.StringBuffer: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("expected 2 arguments for closure constructor super call, but got");

        $r20 = virtualinvoke r6.<org.codehaus.groovy.ast.expr.TupleExpression: java.util.List getExpressions()>();

        $i1 = interfaceinvoke $r20.<java.util.List: int size()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r17.<org.codehaus.groovy.GroovyBugError: void <init>(java.lang.String)>($r22);

        throw $r17;

     label1:
        $r8 = virtualinvoke r6.<org.codehaus.groovy.ast.expr.TupleExpression: org.codehaus.groovy.ast.expr.Expression getExpression(int)>(0);

        virtualinvoke $r8.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r0);

        $r9 = virtualinvoke r6.<org.codehaus.groovy.ast.expr.TupleExpression: org.codehaus.groovy.ast.expr.Expression getExpression(int)>(1);

        virtualinvoke $r9.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r0);

        $r10 = new org.codehaus.groovy.ast.Parameter;

        $r11 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode OBJECT_TYPE>;

        specialinvoke $r10.<org.codehaus.groovy.ast.Parameter: void <init>(org.codehaus.groovy.ast.ClassNode,java.lang.String)>($r11, "_p");

        $r13 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode VOID_TYPE>;

        $r12 = newarray (org.codehaus.groovy.ast.Parameter)[2];

        $r12[0] = $r10;

        $r12[1] = $r10;

        $r14 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getMethodDescriptor(org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.Parameter[])>($r13, $r12);

        $r15 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        $r16 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getClassInternalName(org.codehaus.groovy.ast.ClassNode)>($r3);

        interfaceinvoke $r15.<groovyjarjarasm.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)>(183, $r16, "<init>", $r14);

        return;
    }

    private void visitSpecialConstructorCall(org.codehaus.groovy.ast.expr.ConstructorCallExpression)
    {
        groovyjarjarasm.asm.MethodVisitor $r6, $r9, $r11, $r12, $r13, $r15, $r16, $r17, $r18, $r19, $r20, $r22, $r24, $r25, $r26, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r38, $r39, $r41, $r43, $r44, $r45, $r51, $r52, $r54, $r55, $r57, $r63, $r64, $r67;
        org.codehaus.groovy.classgen.BytecodeHelper $r7, $r56, $r60, $r61, $r62;
        org.codehaus.groovy.ast.expr.Expression $r5;
        java.lang.String $r23, $r49, $r53;
        groovyjarjarasm.asm.Label $r14, $r27, $r28, $r40, $r66;
        org.codehaus.groovy.ast.Parameter $r58;
        org.codehaus.groovy.ast.ClassNode $r1, $r2, $r47, $r59, r70;
        int[] $r69;
        boolean $z0, $z1, $z2;
        org.codehaus.groovy.classgen.MethodCaller $r10;
        java.util.List $r4;
        groovyjarjarasm.asm.Label[] $r68;
        int $i0, $i1, $i2, $i3, i4, $i5, i6, i7, $i8;
        org.codehaus.groovy.ast.expr.ConstructorCallExpression r3;
        org.codehaus.groovy.classgen.AsmClassGenerator r0;
        org.codehaus.groovy.ast.expr.ClassExpression $r8;
        org.codehaus.groovy.ast.Parameter[] $r48, $r50;
        java.lang.Object $r46;
        org.codehaus.groovy.ast.ConstructorNode $r21, $r37, $r42, $r65;

        r0 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r3 := @parameter0: org.codehaus.groovy.ast.expr.ConstructorCallExpression;

        $r2 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode classNode>;

        $r1 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode GENERATED_CLOSURE_Type>;

        $z0 = virtualinvoke $r2.<org.codehaus.groovy.ast.ClassNode: boolean declaresInterface(org.codehaus.groovy.ast.ClassNode)>($r1);

        if $z0 == 0 goto label01;

        specialinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void addGeneratedClosureConstructorCall(org.codehaus.groovy.ast.expr.ConstructorCallExpression)>(r3);

        return;

     label01:
        r70 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode classNode>;

        $z1 = virtualinvoke r3.<org.codehaus.groovy.ast.expr.ConstructorCallExpression: boolean isSuperCall()>();

        if $z1 == 0 goto label02;

        r70 = virtualinvoke r70.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode getSuperClass()>();

     label02:
        $r4 = specialinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: java.util.List sortConstructors(org.codehaus.groovy.ast.expr.ConstructorCallExpression,org.codehaus.groovy.ast.ClassNode)>(r3, r70);

        $r5 = virtualinvoke r3.<org.codehaus.groovy.ast.expr.ConstructorCallExpression: org.codehaus.groovy.ast.expr.Expression getArguments()>();

        virtualinvoke $r5.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r0);

        $r6 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r6.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(89);

        $r7 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.BytecodeHelper helper>;

        $i0 = interfaceinvoke $r4.<java.util.List: int size()>();

        virtualinvoke $r7.<org.codehaus.groovy.classgen.BytecodeHelper: void pushConstant(int)>($i0);

        $r8 = new org.codehaus.groovy.ast.expr.ClassExpression;

        specialinvoke $r8.<org.codehaus.groovy.ast.expr.ClassExpression: void <init>(org.codehaus.groovy.ast.ClassNode)>(r70);

        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitClassExpression(org.codehaus.groovy.ast.expr.ClassExpression)>($r8);

        $r10 = <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCaller selectConstructorAndTransformArguments>;

        $r9 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        virtualinvoke $r10.<org.codehaus.groovy.classgen.MethodCaller: void call(groovyjarjarasm.asm.MethodVisitor)>($r9);

        $r11 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r11.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(90);

        $r12 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r12.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(4);

        $r13 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r13.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(126);

        $r14 = new groovyjarjarasm.asm.Label;

        specialinvoke $r14.<groovyjarjarasm.asm.Label: void <init>()>();

        $r15 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r15.<groovyjarjarasm.asm.MethodVisitor: void visitJumpInsn(int,groovyjarjarasm.asm.Label)>(153, $r14);

        $r16 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r16.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(3);

        $r17 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r17.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(50);

        $r18 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r18.<groovyjarjarasm.asm.MethodVisitor: void visitTypeInsn(int,java.lang.String)>(192, "[Ljava/lang/Object;");

        $r19 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r19.<groovyjarjarasm.asm.MethodVisitor: void visitLabel(groovyjarjarasm.asm.Label)>($r14);

        $r20 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r20.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(95);

        $r21 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ConstructorNode constructorNode>;

        if $r21 == null goto label03;

        $r67 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r67.<groovyjarjarasm.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 0);

        goto label04;

     label03:
        $r22 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        $r23 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getClassInternalName(org.codehaus.groovy.ast.ClassNode)>(r70);

        interfaceinvoke $r22.<groovyjarjarasm.asm.MethodVisitor: void visitTypeInsn(int,java.lang.String)>(187, $r23);

     label04:
        $r24 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r24.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(95);

        $r25 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r25.<groovyjarjarasm.asm.MethodVisitor: void visitIntInsn(int,int)>(16, 8);

        $r26 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r26.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(122);

        $i1 = interfaceinvoke $r4.<java.util.List: int size()>();

        $r68 = newarray (groovyjarjarasm.asm.Label)[$i1];

        $i2 = interfaceinvoke $r4.<java.util.List: int size()>();

        $r69 = newarray (int)[$i2];

        i4 = 0;

     label05:
        $i5 = lengthof $r68;

        if i4 >= $i5 goto label06;

        $r66 = new groovyjarjarasm.asm.Label;

        specialinvoke $r66.<groovyjarjarasm.asm.Label: void <init>()>();

        $r68[i4] = $r66;

        $r69[i4] = i4;

        i4 = i4 + 1;

        goto label05;

     label06:
        $r27 = new groovyjarjarasm.asm.Label;

        specialinvoke $r27.<groovyjarjarasm.asm.Label: void <init>()>();

        $r28 = new groovyjarjarasm.asm.Label;

        specialinvoke $r28.<groovyjarjarasm.asm.Label: void <init>()>();

        $r29 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r29.<groovyjarjarasm.asm.MethodVisitor: void visitLookupSwitchInsn(groovyjarjarasm.asm.Label,int[],groovyjarjarasm.asm.Label[])>($r27, $r69, $r68);

        i6 = 0;

     label07:
        $i3 = lengthof $r68;

        if i6 >= $i3 goto label14;

        $r41 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        $r40 = $r68[i6];

        interfaceinvoke $r41.<groovyjarjarasm.asm.MethodVisitor: void visitLabel(groovyjarjarasm.asm.Label)>($r40);

        $r42 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ConstructorNode constructorNode>;

        if $r42 == null goto label08;

        $r63 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r63.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(95);

        $r64 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r64.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(90);

        goto label09;

     label08:
        $r43 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r43.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(90);

        $r44 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r44.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(93);

        $r45 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r45.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(87);

     label09:
        $r46 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i6);

        $r65 = (org.codehaus.groovy.ast.ConstructorNode) $r46;

        $r47 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode VOID_TYPE>;

        $r48 = virtualinvoke $r65.<org.codehaus.groovy.ast.ConstructorNode: org.codehaus.groovy.ast.Parameter[] getParameters()>();

        $r49 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getMethodDescriptor(org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.Parameter[])>($r47, $r48);

        $r50 = virtualinvoke $r65.<org.codehaus.groovy.ast.ConstructorNode: org.codehaus.groovy.ast.Parameter[] getParameters()>();

        i7 = 0;

     label10:
        $i8 = lengthof $r50;

        if i7 >= $i8 goto label13;

        $r55 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r55.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(89);

        $r56 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.BytecodeHelper helper>;

        virtualinvoke $r56.<org.codehaus.groovy.classgen.BytecodeHelper: void pushConstant(int)>(i7);

        $r57 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r57.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(50);

        $r58 = $r50[i7];

        $r59 = virtualinvoke $r58.<org.codehaus.groovy.ast.Parameter: org.codehaus.groovy.ast.ClassNode getType()>();

        $z2 = staticinvoke <org.codehaus.groovy.ast.ClassHelper: boolean isPrimitiveType(org.codehaus.groovy.ast.ClassNode)>($r59);

        if $z2 == 0 goto label11;

        $r62 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.BytecodeHelper helper>;

        virtualinvoke $r62.<org.codehaus.groovy.classgen.BytecodeHelper: void unbox(org.codehaus.groovy.ast.ClassNode)>($r59);

        goto label12;

     label11:
        $r60 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.BytecodeHelper helper>;

        virtualinvoke $r60.<org.codehaus.groovy.classgen.BytecodeHelper: void doCast(org.codehaus.groovy.ast.ClassNode)>($r59);

     label12:
        $r61 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.BytecodeHelper helper>;

        virtualinvoke $r61.<org.codehaus.groovy.classgen.BytecodeHelper: void swapWithObject(org.codehaus.groovy.ast.ClassNode)>($r59);

        i7 = i7 + 1;

        goto label10;

     label13:
        $r51 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r51.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(87);

        $r52 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        $r53 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getClassInternalName(org.codehaus.groovy.ast.ClassNode)>(r70);

        interfaceinvoke $r52.<groovyjarjarasm.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)>(183, $r53, "<init>", $r49);

        $r54 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r54.<groovyjarjarasm.asm.MethodVisitor: void visitJumpInsn(int,groovyjarjarasm.asm.Label)>(167, $r28);

        i6 = i6 + 1;

        goto label07;

     label14:
        $r30 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r30.<groovyjarjarasm.asm.MethodVisitor: void visitLabel(groovyjarjarasm.asm.Label)>($r27);

        $r31 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r31.<groovyjarjarasm.asm.MethodVisitor: void visitTypeInsn(int,java.lang.String)>(187, "java/lang/IllegalArgumentException");

        $r32 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r32.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(89);

        $r33 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r33.<groovyjarjarasm.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>("illegal constructor number");

        $r34 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r34.<groovyjarjarasm.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)>(183, "java/lang/IllegalArgumentException", "<init>", "(Ljava/lang/String;)V");

        $r35 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r35.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(191);

        $r36 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r36.<groovyjarjarasm.asm.MethodVisitor: void visitLabel(groovyjarjarasm.asm.Label)>($r28);

        $r37 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ConstructorNode constructorNode>;

        if $r37 != null goto label15;

        $r39 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r39.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(95);

     label15:
        $r38 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r38.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(87);

        return;
    }

    private java.util.List sortConstructors(org.codehaus.groovy.ast.expr.ConstructorCallExpression, org.codehaus.groovy.ast.ClassNode)
    {
        java.util.List $r2;
        org.codehaus.groovy.classgen.AsmClassGenerator$8 $r3;
        org.codehaus.groovy.ast.expr.ConstructorCallExpression r5;
        org.codehaus.groovy.ast.ClassNode r1;
        org.codehaus.groovy.classgen.AsmClassGenerator r4;
        java.util.ArrayList $r0;

        r4 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r5 := @parameter0: org.codehaus.groovy.ast.expr.ConstructorCallExpression;

        r1 := @parameter1: org.codehaus.groovy.ast.ClassNode;

        $r0 = new java.util.ArrayList;

        $r2 = virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: java.util.List getDeclaredConstructors()>();

        specialinvoke $r0.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

        $r3 = new org.codehaus.groovy.classgen.AsmClassGenerator$8;

        specialinvoke $r3.<org.codehaus.groovy.classgen.AsmClassGenerator$8: void <init>(org.codehaus.groovy.classgen.AsmClassGenerator)>(r4);

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r0, $r3);

        return $r0;
    }

    public void visitConstructorCallExpression(org.codehaus.groovy.ast.expr.ConstructorCallExpression)
    {
        org.codehaus.groovy.classgen.MethodCallerMultiAdapter $r15;
        java.lang.StringBuffer $r2, $r3, $r6, $r7;
        int $i0;
        java.lang.String $r5, $r8;
        org.codehaus.groovy.ast.expr.Expression $r9, r11;
        boolean $z0, $z1;
        org.codehaus.groovy.ast.expr.ConstructorCallExpression r1;
        org.codehaus.groovy.ast.ClassNode $r4, $r14;
        org.codehaus.groovy.classgen.AsmClassGenerator r0;
        org.codehaus.groovy.ast.expr.ClassExpression $r13;
        java.util.List $r10;
        org.codehaus.groovy.ast.expr.TupleExpression r12;

        r0 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.ConstructorCallExpression;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("visitConstructorCallExpression: \"");

        $r4 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.ConstructorCallExpression: org.codehaus.groovy.ast.ClassNode getType()>();

        $r5 = virtualinvoke $r4.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $r6 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\":");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void onLineNumber(org.codehaus.groovy.ast.ASTNode,java.lang.String)>(r1, $r8);

        $z0 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.ConstructorCallExpression: boolean isSpecialCall()>();

        if $z0 == 0 goto label1;

        specialinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitSpecialConstructorCall(org.codehaus.groovy.ast.expr.ConstructorCallExpression)>(r1);

        return;

     label1:
        $r9 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.ConstructorCallExpression: org.codehaus.groovy.ast.expr.Expression getArguments()>();

        r11 = $r9;

        $z1 = $r9 instanceof org.codehaus.groovy.ast.expr.TupleExpression;

        if $z1 == 0 goto label2;

        r12 = (org.codehaus.groovy.ast.expr.TupleExpression) $r9;

        $r10 = virtualinvoke r12.<org.codehaus.groovy.ast.expr.TupleExpression: java.util.List getExpressions()>();

        $i0 = interfaceinvoke $r10.<java.util.List: int size()>();

        if $i0 != 0 goto label2;

        r11 = <org.codehaus.groovy.ast.expr.MethodCallExpression: org.codehaus.groovy.ast.expr.Expression NO_ARGUMENTS>;

     label2:
        $r13 = new org.codehaus.groovy.ast.expr.ClassExpression;

        $r14 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.ConstructorCallExpression: org.codehaus.groovy.ast.ClassNode getType()>();

        specialinvoke $r13.<org.codehaus.groovy.ast.expr.ClassExpression: void <init>(org.codehaus.groovy.ast.ClassNode)>($r14);

        $r15 = <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCallerMultiAdapter invokeNew>;

        specialinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void makeCall(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.classgen.MethodCallerMultiAdapter,boolean,boolean,boolean)>($r13, null, r11, $r15, 0, 0, 0);

        return;
    }

    private static java.lang.String makeFieldClassName(org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.ast.ClassNode r0;
        char $c2;
        java.lang.StringBuffer $r4;
        int $i0, $i1, i3, $i4, $i5;
        java.lang.String $r1, $r3;

        r0 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        $r1 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getClassInternalName(org.codehaus.groovy.ast.ClassNode)>(r0);

        $r4 = new java.lang.StringBuffer;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        specialinvoke $r4.<java.lang.StringBuffer: void <init>(int)>($i0);

        i3 = 0;

     label1:
        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        if i3 >= $i1 goto label5;

        $c2 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(i3);

        $i4 = (int) $c2;

        if $i4 != 47 goto label2;

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(36);

        goto label4;

     label2:
        $i5 = (int) $c2;

        if $i5 != 59 goto label3;

        goto label4;

     label3:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c2);

     label4:
        i3 = i3 + 1;

        goto label1;

     label5:
        $r3 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    private static java.lang.String getStaticFieldName(org.codehaus.groovy.ast.ClassNode)
    {
        java.lang.StringBuffer $r1, $r2, $r3, $r5, $r7, $r8, $r9, $r10, $r11, $r12;
        int $i0;
        java.lang.String $r4, $r6, r14;
        boolean $z0;
        org.codehaus.groovy.ast.ClassNode r0, r13;

        r0 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        r13 = r0;

        r14 = "";

     label1:
        $z0 = virtualinvoke r13.<org.codehaus.groovy.ast.ClassNode: boolean isArray()>();

        if $z0 == 0 goto label2;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r14);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("$");

        r14 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        r13 = virtualinvoke r13.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode getComponentType()>();

        goto label1;

     label2:
        $i0 = virtualinvoke r14.<java.lang.String: int length()>();

        if $i0 == 0 goto label3;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("array");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r14);

        r14 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

     label3:
        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r14);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("class$");

        $r4 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.String makeFieldClassName(org.codehaus.groovy.ast.ClassNode)>(r13);

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r6;
    }

    private void visitAttributeOrProperty(org.codehaus.groovy.ast.expr.PropertyExpression, org.codehaus.groovy.classgen.MethodCallerMultiAdapter)
    {
        org.codehaus.groovy.ast.expr.PropertyExpression r0;
        org.codehaus.groovy.classgen.MethodCallerMultiAdapter r6;
        java.lang.StringBuffer $r9, $r10, $r12;
        org.codehaus.groovy.ast.expr.MethodCallExpression $r14;
        org.codehaus.groovy.ast.expr.Expression $r1, $r5, $r7, $r15;
        java.lang.String $r8, $r11, $r13, r21;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        org.codehaus.groovy.ast.ClassNode $r4, $r17, $r18, $r19;
        org.codehaus.groovy.classgen.AsmClassGenerator r2;
        org.codehaus.groovy.ast.expr.FieldExpression $r16;
        org.codehaus.groovy.ast.FieldNode r20;
        org.codehaus.groovy.ast.expr.CastExpression $r3;

        r2 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.PropertyExpression;

        r6 := @parameter1: org.codehaus.groovy.classgen.MethodCallerMultiAdapter;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.PropertyExpression: org.codehaus.groovy.ast.expr.Expression getObjectExpression()>();

        $z0 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: boolean isThisOrSuper(org.codehaus.groovy.ast.expr.Expression)>($r1);

        if $z0 == 0 goto label6;

        $r8 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.PropertyExpression: java.lang.String getPropertyAsString()>();

        if $r8 == null goto label3;

        r20 = null;

        $z6 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: boolean isSuperExpression(org.codehaus.groovy.ast.expr.Expression)>($r1);

        if $z6 == 0 goto label1;

        $r18 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode classNode>;

        $r19 = virtualinvoke $r18.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode getSuperClass()>();

        r20 = virtualinvoke $r19.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.FieldNode getDeclaredField(java.lang.String)>($r8);

        goto label2;

     label1:
        $z7 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.PropertyExpression: boolean isImplicitThis()>();

        $z8 = virtualinvoke r2.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean isNotExplicitThisInClosure(boolean)>($z7);

        if $z8 == 0 goto label2;

        $r17 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode classNode>;

        r20 = virtualinvoke $r17.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.FieldNode getDeclaredField(java.lang.String)>($r8);

     label2:
        if r20 == null goto label3;

        $r16 = new org.codehaus.groovy.ast.expr.FieldExpression;

        specialinvoke $r16.<org.codehaus.groovy.ast.expr.FieldExpression: void <init>(org.codehaus.groovy.ast.FieldNode)>(r20);

        virtualinvoke r2.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitFieldExpression(org.codehaus.groovy.ast.expr.FieldExpression)>($r16);

        return;

     label3:
        $z4 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: boolean isSuperExpression(org.codehaus.groovy.ast.expr.Expression)>($r1);

        if $z4 == 0 goto label6;

        $z5 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean leftHandExpression>;

        if $z5 == 0 goto label4;

        r21 = "set";

        goto label5;

     label4:
        r21 = "get";

     label5:
        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r21);

        $r11 = staticinvoke <org.codehaus.groovy.runtime.MetaClassHelper: java.lang.String capitalize(java.lang.String)>($r8);

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        $r14 = new org.codehaus.groovy.ast.expr.MethodCallExpression;

        $r15 = <org.codehaus.groovy.ast.expr.MethodCallExpression: org.codehaus.groovy.ast.expr.Expression NO_ARGUMENTS>;

        specialinvoke $r14.<org.codehaus.groovy.ast.expr.MethodCallExpression: void <init>(org.codehaus.groovy.ast.expr.Expression,java.lang.String,org.codehaus.groovy.ast.expr.Expression)>($r1, $r13, $r15);

        virtualinvoke r2.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitMethodCallExpression(org.codehaus.groovy.ast.expr.MethodCallExpression)>($r14);

        return;

     label6:
        $r3 = new org.codehaus.groovy.ast.expr.CastExpression;

        $r4 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode STRING_TYPE>;

        $r5 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.PropertyExpression: org.codehaus.groovy.ast.expr.Expression getProperty()>();

        specialinvoke $r3.<org.codehaus.groovy.ast.expr.CastExpression: void <init>(org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.expr.Expression)>($r4, $r5);

        $r7 = <org.codehaus.groovy.ast.expr.MethodCallExpression: org.codehaus.groovy.ast.expr.Expression NO_ARGUMENTS>;

        $z1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.PropertyExpression: boolean isSafe()>();

        $z2 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.PropertyExpression: boolean isSpreadSafe()>();

        $z3 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.PropertyExpression: boolean isImplicitThis()>();

        specialinvoke r2.<org.codehaus.groovy.classgen.AsmClassGenerator: void makeCall(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.classgen.MethodCallerMultiAdapter,boolean,boolean,boolean)>($r1, $r3, $r7, r6, $z1, $z2, $z3);

        return;
    }

    private boolean isStaticContext()
    {
        org.codehaus.groovy.ast.ClassNode $r2;
        org.codehaus.groovy.classgen.AsmClassGenerator r0;
        org.codehaus.groovy.ast.MethodNode $r3;
        org.codehaus.groovy.ast.ConstructorNode $r1;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        $z0 = virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean isInClosure()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r1 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ConstructorNode constructorNode>;

        if $r1 == null goto label2;

        return 0;

     label2:
        $r2 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode classNode>;

        $z1 = virtualinvoke $r2.<org.codehaus.groovy.ast.ClassNode: boolean isStaticClass()>();

        if $z1 != 0 goto label3;

        $r3 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.MethodNode methodNode>;

        $z2 = virtualinvoke $r3.<org.codehaus.groovy.ast.MethodNode: boolean isStatic()>();

        if $z2 == 0 goto label4;

     label3:
        $z3 = 1;

        goto label5;

     label4:
        $z3 = 0;

     label5:
        return $z3;
    }

    public void visitPropertyExpression(org.codehaus.groovy.ast.expr.PropertyExpression)
    {
        org.codehaus.groovy.ast.expr.PropertyExpression r0;
        org.codehaus.groovy.classgen.MethodCallerMultiAdapter r3;
        org.codehaus.groovy.classgen.AsmClassGenerator r2;
        org.codehaus.groovy.ast.expr.Expression $r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;

        r2 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.PropertyExpression;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.PropertyExpression: org.codehaus.groovy.ast.expr.Expression getObjectExpression()>();

        $z0 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean leftHandExpression>;

        if $z0 == 0 goto label2;

        r3 = <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCallerMultiAdapter setProperty>;

        $z4 = virtualinvoke r2.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean isGroovyObject(org.codehaus.groovy.ast.expr.Expression)>($r1);

        if $z4 == 0 goto label1;

        r3 = <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCallerMultiAdapter setGroovyObjectProperty>;

     label1:
        $z5 = specialinvoke r2.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean isStaticContext()>();

        if $z5 == 0 goto label4;

        $z6 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: boolean isThisOrSuper(org.codehaus.groovy.ast.expr.Expression)>($r1);

        if $z6 == 0 goto label4;

        r3 = <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCallerMultiAdapter setProperty>;

        goto label4;

     label2:
        r3 = <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCallerMultiAdapter getProperty>;

        $z1 = virtualinvoke r2.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean isGroovyObject(org.codehaus.groovy.ast.expr.Expression)>($r1);

        if $z1 == 0 goto label3;

        r3 = <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCallerMultiAdapter getGroovyObjectProperty>;

     label3:
        $z2 = specialinvoke r2.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean isStaticContext()>();

        if $z2 == 0 goto label4;

        $z3 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: boolean isThisOrSuper(org.codehaus.groovy.ast.expr.Expression)>($r1);

        if $z3 == 0 goto label4;

        r3 = <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCallerMultiAdapter getProperty>;

     label4:
        specialinvoke r2.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitAttributeOrProperty(org.codehaus.groovy.ast.expr.PropertyExpression,org.codehaus.groovy.classgen.MethodCallerMultiAdapter)>(r0, r3);

        return;
    }

    public void visitAttributeExpression(org.codehaus.groovy.ast.expr.AttributeExpression)
    {
        org.codehaus.groovy.classgen.MethodCallerMultiAdapter r3;
        org.codehaus.groovy.classgen.AsmClassGenerator r2;
        org.codehaus.groovy.ast.expr.AttributeExpression r0;
        org.codehaus.groovy.ast.expr.Expression $r1;
        boolean $z0, $z1, $z2, $z3, $z4;

        r2 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.AttributeExpression;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.AttributeExpression: org.codehaus.groovy.ast.expr.Expression getObjectExpression()>();

        $z0 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean leftHandExpression>;

        if $z0 == 0 goto label2;

        r3 = <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCallerMultiAdapter setField>;

        $z3 = virtualinvoke r2.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean isGroovyObject(org.codehaus.groovy.ast.expr.Expression)>($r1);

        if $z3 == 0 goto label1;

        r3 = <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCallerMultiAdapter setGroovyObjectField>;

     label1:
        $z4 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: boolean usesSuper(org.codehaus.groovy.ast.expr.PropertyExpression)>(r0);

        if $z4 == 0 goto label4;

        r3 = <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCallerMultiAdapter setFieldOnSuper>;

        goto label4;

     label2:
        r3 = <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCallerMultiAdapter getField>;

        $z1 = virtualinvoke r2.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean isGroovyObject(org.codehaus.groovy.ast.expr.Expression)>($r1);

        if $z1 == 0 goto label3;

        r3 = <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCallerMultiAdapter getGroovyObjectField>;

     label3:
        $z2 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: boolean usesSuper(org.codehaus.groovy.ast.expr.PropertyExpression)>(r0);

        if $z2 == 0 goto label4;

        r3 = <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCallerMultiAdapter getFieldOnSuper>;

     label4:
        specialinvoke r2.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitAttributeOrProperty(org.codehaus.groovy.ast.expr.PropertyExpression,org.codehaus.groovy.classgen.MethodCallerMultiAdapter)>(r0, r3);

        return;
    }

    protected boolean isGroovyObject(org.codehaus.groovy.ast.expr.Expression)
    {
        org.codehaus.groovy.classgen.AsmClassGenerator r1;
        org.codehaus.groovy.ast.expr.Expression r0;
        boolean $z0;

        r1 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.Expression;

        $z0 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: boolean isThisExpression(org.codehaus.groovy.ast.expr.Expression)>(r0);

        return $z0;
    }

    public void visitFieldExpression(org.codehaus.groovy.ast.expr.FieldExpression)
    {
        org.codehaus.groovy.ast.expr.FieldExpression r0;
        org.codehaus.groovy.ast.FieldNode $r1;
        org.codehaus.groovy.classgen.AsmClassGenerator r2;
        boolean $z0, $z1, $z2;

        r2 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.FieldExpression;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.FieldExpression: org.codehaus.groovy.ast.FieldNode getField()>();

        $z0 = virtualinvoke $r1.<org.codehaus.groovy.ast.FieldNode: boolean isStatic()>();

        if $z0 == 0 goto label2;

        $z2 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean leftHandExpression>;

        if $z2 == 0 goto label1;

        virtualinvoke r2.<org.codehaus.groovy.classgen.AsmClassGenerator: void storeStaticField(org.codehaus.groovy.ast.expr.FieldExpression)>(r0);

        goto label4;

     label1:
        virtualinvoke r2.<org.codehaus.groovy.classgen.AsmClassGenerator: void loadStaticField(org.codehaus.groovy.ast.expr.FieldExpression)>(r0);

        goto label4;

     label2:
        $z1 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean leftHandExpression>;

        if $z1 == 0 goto label3;

        virtualinvoke r2.<org.codehaus.groovy.classgen.AsmClassGenerator: void storeThisInstanceField(org.codehaus.groovy.ast.expr.FieldExpression)>(r0);

        goto label4;

     label3:
        virtualinvoke r2.<org.codehaus.groovy.classgen.AsmClassGenerator: void loadInstanceField(org.codehaus.groovy.ast.expr.FieldExpression)>(r0);

     label4:
        return;
    }

    public void loadStaticField(org.codehaus.groovy.ast.expr.FieldExpression)
    {
        org.codehaus.groovy.classgen.BytecodeHelper $r7;
        groovyjarjarasm.asm.MethodVisitor $r4, $r8, $r11;
        java.lang.String $r5, $r6, $r9, $r10, $r15;
        boolean $z0, z1, $z2, $z3, $z4, $z5;
        org.codehaus.groovy.ast.ClassNode $r3, $r12, $r13, $r14;
        org.codehaus.groovy.classgen.AsmClassGenerator r2;
        org.codehaus.groovy.ast.expr.FieldExpression r0;
        org.codehaus.groovy.ast.FieldNode $r1;

        r2 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.FieldExpression;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.FieldExpression: org.codehaus.groovy.ast.FieldNode getField()>();

        $z0 = virtualinvoke $r1.<org.codehaus.groovy.ast.FieldNode: boolean isHolder()>();

        if $z0 == 0 goto label1;

        $z3 = virtualinvoke r2.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean isInClosureConstructor()>();

        if $z3 != 0 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        z1 = $z4;

        $r12 = virtualinvoke $r1.<org.codehaus.groovy.ast.FieldNode: org.codehaus.groovy.ast.ClassNode getType()>();

        $r13 = virtualinvoke $r1.<org.codehaus.groovy.ast.FieldNode: org.codehaus.groovy.ast.ClassNode getOwner()>();

        $r14 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode classNode>;

        $z5 = virtualinvoke $r13.<org.codehaus.groovy.ast.ClassNode: boolean equals(java.lang.Object)>($r14);

        if $z5 == 0 goto label3;

        $r15 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.String internalClassName>;

        goto label4;

     label3:
        $r3 = virtualinvoke $r1.<org.codehaus.groovy.ast.FieldNode: org.codehaus.groovy.ast.ClassNode getOwner()>();

        $r15 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getClassInternalName(org.codehaus.groovy.ast.ClassNode)>($r3);

     label4:
        if z1 == 0 goto label5;

        $r8 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        $r9 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.FieldExpression: java.lang.String getFieldName()>();

        $r10 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getTypeDescription(org.codehaus.groovy.ast.ClassNode)>($r12);

        interfaceinvoke $r8.<groovyjarjarasm.asm.MethodVisitor: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)>(178, $r15, $r9, $r10);

        $r11 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r11.<groovyjarjarasm.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)>(182, "groovy/lang/Reference", "get", "()Ljava/lang/Object;");

        goto label6;

     label5:
        $r4 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        $r5 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.FieldExpression: java.lang.String getFieldName()>();

        $r6 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getTypeDescription(org.codehaus.groovy.ast.ClassNode)>($r12);

        interfaceinvoke $r4.<groovyjarjarasm.asm.MethodVisitor: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)>(178, $r15, $r5, $r6);

        $z2 = staticinvoke <org.codehaus.groovy.ast.ClassHelper: boolean isPrimitiveType(org.codehaus.groovy.ast.ClassNode)>($r12);

        if $z2 == 0 goto label6;

        $r7 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.BytecodeHelper helper>;

        virtualinvoke $r7.<org.codehaus.groovy.classgen.BytecodeHelper: void box(org.codehaus.groovy.ast.ClassNode)>($r12);

     label6:
        return;
    }

    public void loadInstanceField(org.codehaus.groovy.ast.expr.FieldExpression)
    {
        org.codehaus.groovy.classgen.BytecodeHelper $r8;
        groovyjarjarasm.asm.MethodVisitor $r4, $r5, $r9;
        java.lang.String $r6, $r7, $r13;
        boolean $z0, z1, $z2, $z3, $z4, $z5;
        org.codehaus.groovy.ast.ClassNode $r3, $r10, $r11, $r12;
        org.codehaus.groovy.classgen.AsmClassGenerator r2;
        org.codehaus.groovy.ast.expr.FieldExpression r0;
        org.codehaus.groovy.ast.FieldNode $r1;

        r2 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.FieldExpression;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.FieldExpression: org.codehaus.groovy.ast.FieldNode getField()>();

        $z0 = virtualinvoke $r1.<org.codehaus.groovy.ast.FieldNode: boolean isHolder()>();

        if $z0 == 0 goto label1;

        $z3 = virtualinvoke r2.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean isInClosureConstructor()>();

        if $z3 != 0 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        z1 = $z4;

        $r10 = virtualinvoke $r1.<org.codehaus.groovy.ast.FieldNode: org.codehaus.groovy.ast.ClassNode getType()>();

        $r11 = virtualinvoke $r1.<org.codehaus.groovy.ast.FieldNode: org.codehaus.groovy.ast.ClassNode getOwner()>();

        $r12 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode classNode>;

        $z5 = virtualinvoke $r11.<org.codehaus.groovy.ast.ClassNode: boolean equals(java.lang.Object)>($r12);

        if $z5 == 0 goto label3;

        $r13 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.String internalClassName>;

        goto label4;

     label3:
        $r3 = virtualinvoke $r1.<org.codehaus.groovy.ast.FieldNode: org.codehaus.groovy.ast.ClassNode getOwner()>();

        $r13 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getClassInternalName(org.codehaus.groovy.ast.ClassNode)>($r3);

     label4:
        $r4 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r4.<groovyjarjarasm.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 0);

        $r5 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        $r6 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.FieldExpression: java.lang.String getFieldName()>();

        $r7 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getTypeDescription(org.codehaus.groovy.ast.ClassNode)>($r10);

        interfaceinvoke $r5.<groovyjarjarasm.asm.MethodVisitor: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)>(180, $r13, $r6, $r7);

        if z1 == 0 goto label5;

        $r9 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r9.<groovyjarjarasm.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)>(182, "groovy/lang/Reference", "get", "()Ljava/lang/Object;");

        goto label6;

     label5:
        $z2 = staticinvoke <org.codehaus.groovy.ast.ClassHelper: boolean isPrimitiveType(org.codehaus.groovy.ast.ClassNode)>($r10);

        if $z2 == 0 goto label6;

        $r8 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.BytecodeHelper helper>;

        virtualinvoke $r8.<org.codehaus.groovy.classgen.BytecodeHelper: void box(org.codehaus.groovy.ast.ClassNode)>($r10);

     label6:
        return;
    }

    public void storeThisInstanceField(org.codehaus.groovy.ast.expr.FieldExpression)
    {
        org.codehaus.groovy.classgen.BytecodeHelper $r5, $r18, $r19;
        groovyjarjarasm.asm.MethodVisitor $r6, $r7, $r10, $r11, $r16, $r17;
        java.lang.String r4, $r8, $r9, $r15;
        boolean $z0, z1, $z2, $z3, $z4, $z5, $z6;
        org.codehaus.groovy.ast.ClassNode $r3, $r12, $r13, $r14;
        org.codehaus.groovy.classgen.AsmClassGenerator r2;
        org.codehaus.groovy.ast.expr.FieldExpression r0;
        org.codehaus.groovy.ast.FieldNode $r1;

        r2 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.FieldExpression;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.FieldExpression: org.codehaus.groovy.ast.FieldNode getField()>();

        $z0 = virtualinvoke $r1.<org.codehaus.groovy.ast.FieldNode: boolean isHolder()>();

        if $z0 == 0 goto label1;

        $z4 = virtualinvoke r2.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean isInClosureConstructor()>();

        if $z4 != 0 goto label1;

        $z5 = 1;

        goto label2;

     label1:
        $z5 = 0;

     label2:
        z1 = $z5;

        $r12 = virtualinvoke $r1.<org.codehaus.groovy.ast.FieldNode: org.codehaus.groovy.ast.ClassNode getType()>();

        $r13 = virtualinvoke $r1.<org.codehaus.groovy.ast.FieldNode: org.codehaus.groovy.ast.ClassNode getOwner()>();

        $r14 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode classNode>;

        $z6 = virtualinvoke $r13.<org.codehaus.groovy.ast.ClassNode: boolean equals(java.lang.Object)>($r14);

        if $z6 == 0 goto label3;

        $r15 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.String internalClassName>;

        goto label4;

     label3:
        $r3 = virtualinvoke $r1.<org.codehaus.groovy.ast.FieldNode: org.codehaus.groovy.ast.ClassNode getOwner()>();

        $r15 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getClassInternalName(org.codehaus.groovy.ast.ClassNode)>($r3);

     label4:
        r4 = $r15;

        if z1 == 0 goto label5;

        $r6 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r6.<groovyjarjarasm.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 0);

        $r7 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        $r8 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.FieldExpression: java.lang.String getFieldName()>();

        $r9 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getTypeDescription(org.codehaus.groovy.ast.ClassNode)>($r12);

        interfaceinvoke $r7.<groovyjarjarasm.asm.MethodVisitor: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)>(180, $r15, $r8, $r9);

        $r10 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r10.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(95);

        $r11 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r11.<groovyjarjarasm.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)>(182, "groovy/lang/Reference", "set", "(Ljava/lang/Object;)V");

        goto label8;

     label5:
        $z2 = virtualinvoke r2.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean isInClosureConstructor()>();

        if $z2 == 0 goto label6;

        $r5 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.BytecodeHelper helper>;

        virtualinvoke $r5.<org.codehaus.groovy.classgen.BytecodeHelper: void doCast(org.codehaus.groovy.ast.ClassNode)>($r12);

        goto label7;

     label6:
        $z3 = staticinvoke <org.codehaus.groovy.ast.ClassHelper: boolean isPrimitiveType(org.codehaus.groovy.ast.ClassNode)>($r12);

        if $z3 != 0 goto label7;

        virtualinvoke r2.<org.codehaus.groovy.classgen.AsmClassGenerator: void doConvertAndCast(org.codehaus.groovy.ast.ClassNode)>($r12);

     label7:
        $r16 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r16.<groovyjarjarasm.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 0);

        $r17 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r17.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(95);

        $r18 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.BytecodeHelper helper>;

        virtualinvoke $r18.<org.codehaus.groovy.classgen.BytecodeHelper: void unbox(org.codehaus.groovy.ast.ClassNode)>($r12);

        $r19 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.BytecodeHelper helper>;

        virtualinvoke $r19.<org.codehaus.groovy.classgen.BytecodeHelper: void putField(org.codehaus.groovy.ast.FieldNode,java.lang.String)>($r1, r4);

     label8:
        return;
    }

    public void storeStaticField(org.codehaus.groovy.ast.expr.FieldExpression)
    {
        org.codehaus.groovy.classgen.BytecodeHelper $r4;
        groovyjarjarasm.asm.MethodVisitor $r5, $r8, $r11, $r12;
        java.lang.String $r6, $r7, $r9, $r10, $r16;
        boolean $z0, z1, $z2, $z3, $z4;
        org.codehaus.groovy.ast.ClassNode $r3, $r13, $r14, $r15;
        org.codehaus.groovy.classgen.AsmClassGenerator r2;
        org.codehaus.groovy.ast.expr.FieldExpression r0;
        org.codehaus.groovy.ast.FieldNode $r1;

        r2 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.FieldExpression;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.FieldExpression: org.codehaus.groovy.ast.FieldNode getField()>();

        $z0 = virtualinvoke $r1.<org.codehaus.groovy.ast.FieldNode: boolean isHolder()>();

        if $z0 == 0 goto label1;

        $z2 = virtualinvoke r2.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean isInClosureConstructor()>();

        if $z2 != 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        z1 = $z3;

        $r13 = virtualinvoke $r1.<org.codehaus.groovy.ast.FieldNode: org.codehaus.groovy.ast.ClassNode getType()>();

        $r14 = virtualinvoke $r1.<org.codehaus.groovy.ast.FieldNode: org.codehaus.groovy.ast.ClassNode getOwner()>();

        $r15 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode classNode>;

        $z4 = virtualinvoke $r14.<org.codehaus.groovy.ast.ClassNode: boolean equals(java.lang.Object)>($r15);

        if $z4 == 0 goto label3;

        $r16 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.String internalClassName>;

        goto label4;

     label3:
        $r3 = virtualinvoke $r1.<org.codehaus.groovy.ast.FieldNode: org.codehaus.groovy.ast.ClassNode getOwner()>();

        $r16 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getClassInternalName(org.codehaus.groovy.ast.ClassNode)>($r3);

     label4:
        if z1 == 0 goto label5;

        $r8 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        $r9 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.FieldExpression: java.lang.String getFieldName()>();

        $r10 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getTypeDescription(org.codehaus.groovy.ast.ClassNode)>($r13);

        interfaceinvoke $r8.<groovyjarjarasm.asm.MethodVisitor: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)>(178, $r16, $r9, $r10);

        $r11 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r11.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(95);

        $r12 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r12.<groovyjarjarasm.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)>(182, "groovy/lang/Reference", "set", "(Ljava/lang/Object;)V");

        goto label6;

     label5:
        $r4 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.BytecodeHelper helper>;

        virtualinvoke $r4.<org.codehaus.groovy.classgen.BytecodeHelper: void doCast(org.codehaus.groovy.ast.ClassNode)>($r13);

        $r5 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        $r6 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.FieldExpression: java.lang.String getFieldName()>();

        $r7 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getTypeDescription(org.codehaus.groovy.ast.ClassNode)>($r13);

        interfaceinvoke $r5.<groovyjarjarasm.asm.MethodVisitor: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)>(179, $r16, $r6, $r7);

     label6:
        return;
    }

    protected void visitOuterFieldExpression(org.codehaus.groovy.ast.expr.FieldExpression, org.codehaus.groovy.ast.ClassNode, int, boolean)
    {
        groovyjarjarasm.asm.MethodVisitor $r3, $r5, $r12, $r16;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, z6, $z7, $z8, $z9, $z10;
        org.codehaus.groovy.classgen.CompileStack $r14;
        org.codehaus.groovy.ast.expr.FieldExpression r0;
        org.codehaus.groovy.classgen.BytecodeHelper $r10;
        short s2, $s4;
        int i0, $i1, $i3;
        java.lang.String $r6, $r7, $r15, $r17, $r19;
        org.codehaus.groovy.ast.ClassNode r4, $r8, $r9, $r11, $r13, $r18;
        org.codehaus.groovy.classgen.AsmClassGenerator r2;
        org.codehaus.groovy.ast.FieldNode $r1;

        r2 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.FieldExpression;

        r4 := @parameter1: org.codehaus.groovy.ast.ClassNode;

        i0 := @parameter2: int;

        z6 := @parameter3: boolean;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.FieldExpression: org.codehaus.groovy.ast.FieldNode getField()>();

        $z0 = virtualinvoke $r1.<org.codehaus.groovy.ast.FieldNode: boolean isStatic()>();

        $r14 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        $z1 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean leftHandExpression>;

        if $z1 == 0 goto label01;

        if z6 == 0 goto label01;

        $z7 = 1;

        goto label02;

     label01:
        $z7 = 0;

     label02:
        $i3 = virtualinvoke $r14.<org.codehaus.groovy.classgen.CompileStack: int defineTemporaryVariable(org.codehaus.groovy.ast.Variable,boolean)>($r1, $z7);

        if i0 > 1 goto label03;

        if $z0 != 0 goto label04;

     label03:
        $r3 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r3.<groovyjarjarasm.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 0);

        $r5 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        $r6 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.String internalClassName>;

        $r7 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getTypeDescription(org.codehaus.groovy.ast.ClassNode)>(r4);

        interfaceinvoke $r5.<groovyjarjarasm.asm.MethodVisitor: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)>(180, $r6, "owner", $r7);

     label04:
        if i0 != 1 goto label13;

        $z2 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean leftHandExpression>;

        if $z2 == 0 goto label06;

        if $z0 == 0 goto label05;

        $s4 = 179;

        goto label08;

     label05:
        $s4 = 181;

        goto label08;

     label06:
        if $z0 == 0 goto label07;

        $s4 = 178;

        goto label08;

     label07:
        $s4 = 180;

     label08:
        s2 = $s4;

        $r15 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getClassInternalName(org.codehaus.groovy.ast.ClassNode)>(r4);

        $z8 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean leftHandExpression>;

        if $z8 == 0 goto label11;

        $r12 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r12.<groovyjarjarasm.asm.MethodVisitor: void visitVarInsn(int,int)>(25, $i3);

        $z4 = virtualinvoke $r1.<org.codehaus.groovy.ast.FieldNode: boolean isHolder()>();

        if $z4 == 0 goto label09;

        $z5 = virtualinvoke r2.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean isInClosureConstructor()>();

        if $z5 != 0 goto label09;

        $z9 = 1;

        goto label10;

     label09:
        $z9 = 0;

     label10:
        if $z9 != 0 goto label11;

        $r13 = virtualinvoke $r1.<org.codehaus.groovy.ast.FieldNode: org.codehaus.groovy.ast.ClassNode getType()>();

        virtualinvoke r2.<org.codehaus.groovy.classgen.AsmClassGenerator: void doConvertAndCast(org.codehaus.groovy.ast.ClassNode)>($r13);

     label11:
        $r16 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        $r17 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.FieldExpression: java.lang.String getFieldName()>();

        $r18 = virtualinvoke $r1.<org.codehaus.groovy.ast.FieldNode: org.codehaus.groovy.ast.ClassNode getType()>();

        $r19 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getTypeDescription(org.codehaus.groovy.ast.ClassNode)>($r18);

        interfaceinvoke $r16.<groovyjarjarasm.asm.MethodVisitor: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)>(s2, $r15, $r17, $r19);

        $z10 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean leftHandExpression>;

        if $z10 != 0 goto label12;

        $r9 = virtualinvoke $r1.<org.codehaus.groovy.ast.FieldNode: org.codehaus.groovy.ast.ClassNode getType()>();

        $z3 = staticinvoke <org.codehaus.groovy.ast.ClassHelper: boolean isPrimitiveType(org.codehaus.groovy.ast.ClassNode)>($r9);

        if $z3 == 0 goto label12;

        $r10 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.BytecodeHelper helper>;

        $r11 = virtualinvoke $r1.<org.codehaus.groovy.ast.FieldNode: org.codehaus.groovy.ast.ClassNode getType()>();

        virtualinvoke $r10.<org.codehaus.groovy.classgen.BytecodeHelper: void box(org.codehaus.groovy.ast.ClassNode)>($r11);

     label12:
        goto label14;

     label13:
        $r8 = virtualinvoke r4.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode getOuterClass()>();

        $i1 = i0 - 1;

        virtualinvoke r2.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitOuterFieldExpression(org.codehaus.groovy.ast.expr.FieldExpression,org.codehaus.groovy.ast.ClassNode,int,boolean)>(r0, $r8, $i1, 0);

     label14:
        return;
    }

    public void visitVariableExpression(org.codehaus.groovy.ast.expr.VariableExpression)
    {
        org.codehaus.groovy.classgen.Variable $r4;
        java.lang.String $r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.codehaus.groovy.ast.expr.VariableExpression r0;
        org.codehaus.groovy.ast.ClassNode $r7, r9;
        org.codehaus.groovy.classgen.AsmClassGenerator r2;
        org.codehaus.groovy.classgen.CompileStack $r3, $r5;
        org.codehaus.groovy.ast.expr.ClassExpression $r6, $r8;

        r2 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.VariableExpression;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.VariableExpression: java.lang.String getName()>();

        r9 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode classNode>;

        $z0 = virtualinvoke r2.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean isInClosure()>();

        if $z0 == 0 goto label01;

        r9 = virtualinvoke r2.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode getOutermostClass()>();

     label01:
        $z1 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("this");

        if $z1 == 0 goto label05;

        $z4 = virtualinvoke r2.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean isStaticMethod()>();

        if $z4 != 0 goto label02;

        $z5 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean implicitThis>;

        if $z5 != 0 goto label03;

        $z6 = specialinvoke r2.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean isStaticContext()>();

        if $z6 == 0 goto label03;

     label02:
        $r8 = new org.codehaus.groovy.ast.expr.ClassExpression;

        specialinvoke $r8.<org.codehaus.groovy.ast.expr.ClassExpression: void <init>(org.codehaus.groovy.ast.ClassNode)>(r9);

        virtualinvoke r2.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitClassExpression(org.codehaus.groovy.ast.expr.ClassExpression)>($r8);

        goto label04;

     label03:
        specialinvoke r2.<org.codehaus.groovy.classgen.AsmClassGenerator: void loadThis()>();

     label04:
        return;

     label05:
        $z2 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("super");

        if $z2 == 0 goto label08;

        $z3 = virtualinvoke r2.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean isStaticMethod()>();

        if $z3 == 0 goto label06;

        $r6 = new org.codehaus.groovy.ast.expr.ClassExpression;

        $r7 = virtualinvoke r9.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode getSuperClass()>();

        specialinvoke $r6.<org.codehaus.groovy.ast.expr.ClassExpression: void <init>(org.codehaus.groovy.ast.ClassNode)>($r7);

        virtualinvoke r2.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitClassExpression(org.codehaus.groovy.ast.expr.ClassExpression)>($r6);

        goto label07;

     label06:
        specialinvoke r2.<org.codehaus.groovy.classgen.AsmClassGenerator: void loadThis()>();

     label07:
        return;

     label08:
        $r3 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        $r4 = virtualinvoke $r3.<org.codehaus.groovy.classgen.CompileStack: org.codehaus.groovy.classgen.Variable getVariable(java.lang.String,boolean)>($r1, 0);

        $r5 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        virtualinvoke $r5.<org.codehaus.groovy.classgen.CompileStack: org.codehaus.groovy.ast.VariableScope getScope()>();

        if $r4 != null goto label09;

        virtualinvoke r2.<org.codehaus.groovy.classgen.AsmClassGenerator: void processClassVariable(java.lang.String)>($r1);

        goto label10;

     label09:
        virtualinvoke r2.<org.codehaus.groovy.classgen.AsmClassGenerator: void processStackVariable(org.codehaus.groovy.classgen.Variable)>($r4);

     label10:
        return;
    }

    private void loadThis()
    {
        org.codehaus.groovy.classgen.AsmClassGenerator r0;
        groovyjarjarasm.asm.MethodVisitor $r1, $r2;
        boolean $z0, $z1;

        r0 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        $r1 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r1.<groovyjarjarasm.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 0);

        $z0 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean implicitThis>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean isInClosure()>();

        if $z1 == 0 goto label1;

        $r2 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r2.<groovyjarjarasm.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)>(182, "groovy/lang/Closure", "getThisObject", "()Ljava/lang/Object;");

     label1:
        return;
    }

    protected void processStackVariable(org.codehaus.groovy.classgen.Variable)
    {
        org.codehaus.groovy.classgen.Variable r1;
        org.codehaus.groovy.classgen.AsmClassGenerator r0;
        org.codehaus.groovy.classgen.BytecodeHelper $r2, $r3;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r1 := @parameter0: org.codehaus.groovy.classgen.Variable;

        $z0 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean leftHandExpression>;

        if $z0 == 0 goto label1;

        $r3 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.BytecodeHelper helper>;

        virtualinvoke $r3.<org.codehaus.groovy.classgen.BytecodeHelper: void storeVar(org.codehaus.groovy.classgen.Variable)>(r1);

        goto label2;

     label1:
        $r2 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.BytecodeHelper helper>;

        virtualinvoke $r2.<org.codehaus.groovy.classgen.BytecodeHelper: void loadVar(org.codehaus.groovy.classgen.Variable)>(r1);

     label2:
        return;
    }

    protected void processClassVariable(java.lang.String)
    {
        org.codehaus.groovy.ast.expr.PropertyExpression $r1;
        org.codehaus.groovy.ast.expr.VariableExpression $r3;
        org.codehaus.groovy.classgen.AsmClassGenerator r0;
        groovyjarjarasm.asm.MethodVisitor $r4, $r5, $r6, $r7;
        java.lang.String r2;
        boolean $z0, $z1;

        r0 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r2 := @parameter0: java.lang.String;

        $z0 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean passingClosureParams>;

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean isInScriptBody()>();

        if $z1 == 0 goto label1;

        $r4 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r4.<groovyjarjarasm.asm.MethodVisitor: void visitTypeInsn(int,java.lang.String)>(187, "org/codehaus/groovy/runtime/ScriptReference");

        $r5 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r5.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(89);

        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void loadThisOrOwner()>();

        $r6 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r6.<groovyjarjarasm.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>(r2);

        $r7 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r7.<groovyjarjarasm.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)>(183, "org/codehaus/groovy/runtime/ScriptReference", "<init>", "(Lgroovy/lang/Script;Ljava/lang/String;)V");

        goto label2;

     label1:
        $r1 = new org.codehaus.groovy.ast.expr.PropertyExpression;

        $r3 = <org.codehaus.groovy.ast.expr.VariableExpression: org.codehaus.groovy.ast.expr.VariableExpression THIS_EXPRESSION>;

        specialinvoke $r1.<org.codehaus.groovy.ast.expr.PropertyExpression: void <init>(org.codehaus.groovy.ast.expr.Expression,java.lang.String)>($r3, r2);

        virtualinvoke $r1.<org.codehaus.groovy.ast.expr.PropertyExpression: void setImplicitThis(boolean)>(1);

        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitPropertyExpression(org.codehaus.groovy.ast.expr.PropertyExpression)>($r1);

     label2:
        return;
    }

    protected void processFieldAccess(java.lang.String, org.codehaus.groovy.ast.FieldNode, int)
    {
        org.codehaus.groovy.ast.expr.FieldExpression $r0;
        org.codehaus.groovy.ast.FieldNode r1;
        org.codehaus.groovy.ast.ClassNode $r3, $r4;
        int i0;
        org.codehaus.groovy.classgen.AsmClassGenerator r2;
        java.lang.String r5;

        r2 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r5 := @parameter0: java.lang.String;

        r1 := @parameter1: org.codehaus.groovy.ast.FieldNode;

        i0 := @parameter2: int;

        $r0 = new org.codehaus.groovy.ast.expr.FieldExpression;

        specialinvoke $r0.<org.codehaus.groovy.ast.expr.FieldExpression: void <init>(org.codehaus.groovy.ast.FieldNode)>(r1);

        if i0 != 0 goto label1;

        virtualinvoke r2.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitFieldExpression(org.codehaus.groovy.ast.expr.FieldExpression)>($r0);

        goto label2;

     label1:
        $r3 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode classNode>;

        $r4 = virtualinvoke $r3.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode getOuterClass()>();

        virtualinvoke r2.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitOuterFieldExpression(org.codehaus.groovy.ast.expr.FieldExpression,org.codehaus.groovy.ast.ClassNode,int,boolean)>($r0, $r4, i0, 1);

     label2:
        return;
    }

    protected boolean isInScriptBody()
    {
        org.codehaus.groovy.ast.ClassNode $r1, $r2;
        org.codehaus.groovy.classgen.AsmClassGenerator r0;
        org.codehaus.groovy.ast.MethodNode $r3, $r4;
        java.lang.String $r5;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        $r1 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode classNode>;

        $z0 = virtualinvoke $r1.<org.codehaus.groovy.ast.ClassNode: boolean isScriptBody()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r2 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode classNode>;

        $z1 = virtualinvoke $r2.<org.codehaus.groovy.ast.ClassNode: boolean isScript()>();

        if $z1 == 0 goto label2;

        $r3 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.MethodNode methodNode>;

        if $r3 == null goto label2;

        $r4 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.MethodNode methodNode>;

        $r5 = virtualinvoke $r4.<org.codehaus.groovy.ast.MethodNode: java.lang.String getName()>();

        $z2 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("run");

        if $z2 == 0 goto label2;

        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;
    }

    protected boolean isPopRequired(org.codehaus.groovy.ast.expr.Expression)
    {
        org.codehaus.groovy.ast.expr.ConstructorCallExpression r6;
        org.codehaus.groovy.ast.ClassNode $r2, $r3;
        org.codehaus.groovy.classgen.AsmClassGenerator r4;
        org.codehaus.groovy.syntax.Token $r1;
        org.codehaus.groovy.ast.expr.BinaryExpression r5;
        org.codehaus.groovy.ast.expr.Expression r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r4 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.Expression;

        $z0 = r0 instanceof org.codehaus.groovy.ast.expr.MethodCallExpression;

        if $z0 == 0 goto label2;

        $r2 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.Expression: org.codehaus.groovy.ast.ClassNode getType()>();

        $r3 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode VOID_TYPE>;

        if $r2 != $r3 goto label1;

        return 0;

     label1:
        return 1;

     label2:
        $z1 = r0 instanceof org.codehaus.groovy.ast.expr.DeclarationExpression;

        if $z1 == 0 goto label3;

        return 0;

     label3:
        $z2 = r0 instanceof org.codehaus.groovy.ast.expr.BinaryExpression;

        if $z2 == 0 goto label4;

        r5 = (org.codehaus.groovy.ast.expr.BinaryExpression) r0;

        $r1 = virtualinvoke r5.<org.codehaus.groovy.ast.expr.BinaryExpression: org.codehaus.groovy.syntax.Token getOperation()>();

        virtualinvoke $r1.<org.codehaus.groovy.syntax.Token: int getType()>();

     label4:
        $z3 = r0 instanceof org.codehaus.groovy.ast.expr.ConstructorCallExpression;

        if $z3 == 0 goto label7;

        r6 = (org.codehaus.groovy.ast.expr.ConstructorCallExpression) r0;

        $z4 = virtualinvoke r6.<org.codehaus.groovy.ast.expr.ConstructorCallExpression: boolean isSpecialCall()>();

        if $z4 != 0 goto label5;

        $z5 = 1;

        goto label6;

     label5:
        $z5 = 0;

     label6:
        return $z5;

     label7:
        return 1;
    }

    protected void createInterfaceSyntheticStaticFields()
    {
        java.util.Iterator $r4;
        org.codehaus.groovy.ast.ClassNode $r2, $r7, $r8;
        org.codehaus.groovy.classgen.AsmClassGenerator r0;
        java.util.Set $r1, $r3;
        java.lang.Object $r5;
        java.lang.String r6;
        boolean $z0, $z1;

        r0 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        $r1 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: java.util.Set syntheticStaticFields>;

        $z0 = interfaceinvoke $r1.<java.util.Set: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode interfaceClassLoadingClass>;

        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean addInnerClass(org.codehaus.groovy.ast.ClassNode)>($r2);

        $r3 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: java.util.Set syntheticStaticFields>;

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.String) $r5;

        $r8 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode interfaceClassLoadingClass>;

        $r7 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode CLASS_Type>;

        virtualinvoke $r8.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.FieldNode addField(java.lang.String,int,org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.expr.Expression)>(r6, 4104, $r7, null);

        goto label2;

     label3:
        return;
    }

    protected void createSyntheticStaticFields()
    {
        groovyjarjarasm.asm.MethodVisitor $r4, $r6, $r7, $r8, $r10, $r11, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22;
        boolean z0, z1, $z2, $z3, $z5, $z6;
        java.util.Set $r1;
        groovyjarjarasm.asm.ClassVisitor $r3, $r26;
        java.lang.StringBuffer $r29, $r30, $r31, $r32, $r35, $r36, $r37, $r38, $r40, $r41, $r42, $r43, $r44, $r45, $r46, $r47, $r49, $r50;
        int $i0, $i1;
        java.lang.String $r34, $r39, r51, r52;
        groovyjarjarasm.asm.Label $r5, $r9, $r12;
        java.util.Iterator $r2;
        org.codehaus.groovy.ast.ClassNode $r24, $r27, $r28, $r33, $r48;
        org.codehaus.groovy.classgen.AsmClassGenerator r0;
        org.codehaus.groovy.ast.FieldNode $r25;
        java.lang.Object $r23;

        r0 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        $r1 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: java.util.Set syntheticStaticFields>;

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label01:
        $z2 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label11;

        $r23 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r51 = (java.lang.String) $r23;

        $r24 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode classNode>;

        $r25 = virtualinvoke $r24.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.FieldNode getDeclaredField(java.lang.String)>(r51);

        if $r25 == null goto label09;

        $r27 = virtualinvoke $r25.<org.codehaus.groovy.ast.FieldNode: org.codehaus.groovy.ast.ClassNode getType()>();

        $r28 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode CLASS_Type>;

        if $r27 != $r28 goto label02;

        $z3 = 1;

        goto label03;

     label02:
        $z3 = 0;

     label03:
        z0 = $z3;

        $i0 = virtualinvoke $r25.<org.codehaus.groovy.ast.FieldNode: int getModifiers()>();

        if $i0 != 4104 goto label04;

        $z6 = 1;

        $z5 = 1;

        goto label05;

     label04:
        $z6 = 0;

        $z5 = 0;

     label05:
        z1 = $z6;

        if z0 == 0 goto label06;

        if $z5 == 0 goto label06;

        goto label01;

     label06:
        r52 = "";

        if z0 != 0 goto label07;

        $r46 = new java.lang.StringBuffer;

        specialinvoke $r46.<java.lang.StringBuffer: void <init>()>();

        $r47 = virtualinvoke $r46.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" with wrong type: ");

        $r48 = virtualinvoke $r25.<org.codehaus.groovy.ast.FieldNode: org.codehaus.groovy.ast.ClassNode getType()>();

        $r49 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r48);

        $r50 = virtualinvoke $r49.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" (java.lang.Class needed)");

        r52 = virtualinvoke $r50.<java.lang.StringBuffer: java.lang.String toString()>();

     label07:
        if z1 != 0 goto label08;

        $r40 = new java.lang.StringBuffer;

        specialinvoke $r40.<java.lang.StringBuffer: void <init>()>();

        $r41 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" with wrong modifiers: ");

        $i1 = virtualinvoke $r25.<org.codehaus.groovy.ast.FieldNode: int getModifiers()>();

        $r42 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r43 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" (");

        $r44 = virtualinvoke $r43.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(4104);

        $r45 = virtualinvoke $r44.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" needed)");

        r52 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.String toString()>();

     label08:
        $r29 = new java.lang.StringBuffer;

        specialinvoke $r29.<java.lang.StringBuffer: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("tried to set a static syntethic field ");

        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r51);

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" in ");

        $r33 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode classNode>;

        $r34 = virtualinvoke $r33.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $r35 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r34);

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" for class resolving, but found alreeady a node of that");

        $r37 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" name ");

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r52);

        $r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void throwException(java.lang.String)>($r39);

        goto label10;

     label09:
        $r26 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.ClassVisitor cv>;

        interfaceinvoke $r26.<groovyjarjarasm.asm.ClassVisitor: groovyjarjarasm.asm.FieldVisitor visitField(int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)>(4104, r51, "Ljava/lang/Class;", null, null);

     label10:
        goto label01;

     label11:
        $r3 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.ClassVisitor cv>;

        $r4 = interfaceinvoke $r3.<groovyjarjarasm.asm.ClassVisitor: groovyjarjarasm.asm.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>(4104, "class$", "(Ljava/lang/String;)Ljava/lang/Class;", null, null);

        r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv> = $r4;

        $r5 = new groovyjarjarasm.asm.Label;

        specialinvoke $r5.<groovyjarjarasm.asm.Label: void <init>()>();

        $r6 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r6.<groovyjarjarasm.asm.MethodVisitor: void visitLabel(groovyjarjarasm.asm.Label)>($r5);

        $r7 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r7.<groovyjarjarasm.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 0);

        $r8 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r8.<groovyjarjarasm.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)>(184, "java/lang/Class", "forName", "(Ljava/lang/String;)Ljava/lang/Class;");

        $r9 = new groovyjarjarasm.asm.Label;

        specialinvoke $r9.<groovyjarjarasm.asm.Label: void <init>()>();

        $r10 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r10.<groovyjarjarasm.asm.MethodVisitor: void visitLabel(groovyjarjarasm.asm.Label)>($r9);

        $r11 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r11.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(176);

        $r12 = new groovyjarjarasm.asm.Label;

        specialinvoke $r12.<groovyjarjarasm.asm.Label: void <init>()>();

        $r13 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r13.<groovyjarjarasm.asm.MethodVisitor: void visitLabel(groovyjarjarasm.asm.Label)>($r12);

        $r14 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r14.<groovyjarjarasm.asm.MethodVisitor: void visitVarInsn(int,int)>(58, 1);

        $r15 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r15.<groovyjarjarasm.asm.MethodVisitor: void visitTypeInsn(int,java.lang.String)>(187, "java/lang/NoClassDefFoundError");

        $r16 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r16.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(89);

        $r17 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r17.<groovyjarjarasm.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 1);

        $r18 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r18.<groovyjarjarasm.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)>(182, "java/lang/ClassNotFoundException", "getMessage", "()Ljava/lang/String;");

        $r19 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r19.<groovyjarjarasm.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)>(183, "java/lang/NoClassDefFoundError", "<init>", "(Ljava/lang/String;)V");

        $r20 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r20.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(191);

        $r21 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r21.<groovyjarjarasm.asm.MethodVisitor: void visitTryCatchBlock(groovyjarjarasm.asm.Label,groovyjarjarasm.asm.Label,groovyjarjarasm.asm.Label,java.lang.String)>($r5, $r12, $r12, "java/lang/ClassNotFoundException");

        $r22 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r22.<groovyjarjarasm.asm.MethodVisitor: void visitMaxs(int,int)>(3, 2);

        return;
    }

    public void visitClassExpression(org.codehaus.groovy.ast.expr.ClassExpression)
    {
        groovyjarjarasm.asm.MethodVisitor $r5, $r7, $r8, $r10, $r11, $r12, $r14, $r15, $r16, $r17, $r20, $r24, $r31, $r34, $r36;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.Set $r39;
        org.codehaus.groovy.classgen.CompileStack $r22, $r23, $r26, $r27, $r29, $r30, $r32, $r33;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7, $i9;
        java.lang.String $r9, $r37, r38, r40;
        groovyjarjarasm.asm.Label $r42, $r43;
        org.codehaus.groovy.ast.ClassNode $r1, $r3, $r4, $r18, $r19, $r21, $r25, $r28, $r35, $r41;
        org.codehaus.groovy.classgen.AsmClassGenerator r2;
        org.codehaus.groovy.ast.expr.ClassExpression r0;

        r2 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.ClassExpression;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.ClassExpression: org.codehaus.groovy.ast.ClassNode getType()>();

        $z0 = staticinvoke <org.codehaus.groovy.ast.ClassHelper: boolean isPrimitiveType(org.codehaus.groovy.ast.ClassNode)>($r1);

        if $z0 == 0 goto label1;

        $r35 = staticinvoke <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode getWrapper(org.codehaus.groovy.ast.ClassNode)>($r1);

        $r36 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        $r37 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getClassInternalName(org.codehaus.groovy.ast.ClassNode)>($r35);

        interfaceinvoke $r36.<groovyjarjarasm.asm.MethodVisitor: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)>(178, $r37, "TYPE", "Ljava/lang/Class;");

        goto label7;

     label1:
        $r3 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode classNode>;

        $z1 = virtualinvoke $r1.<org.codehaus.groovy.ast.ClassNode: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label2;

        r38 = "class$0";

        $r32 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        $i4 = virtualinvoke $r32.<org.codehaus.groovy.classgen.CompileStack: int getCurrentClassIndex()>();

        $i7 = (int) -1;

        if $i4 == $i7 goto label4;

        $r34 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        $r33 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        $i5 = virtualinvoke $r33.<org.codehaus.groovy.classgen.CompileStack: int getCurrentClassIndex()>();

        interfaceinvoke $r34.<groovyjarjarasm.asm.MethodVisitor: void visitVarInsn(int,int)>(25, $i5);

        return;

     label2:
        $r4 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode METACLASS_TYPE>;

        $z2 = virtualinvoke $r1.<org.codehaus.groovy.ast.ClassNode: boolean equals(java.lang.Object)>($r4);

        if $z2 == 0 goto label3;

        r38 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.String getStaticFieldName(org.codehaus.groovy.ast.ClassNode)>($r1);

        $r29 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        $i2 = virtualinvoke $r29.<org.codehaus.groovy.classgen.CompileStack: int getCurrentMetaClassIndex()>();

        $i9 = (int) -1;

        if $i2 == $i9 goto label4;

        $r31 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        $r30 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        $i3 = virtualinvoke $r30.<org.codehaus.groovy.classgen.CompileStack: int getCurrentMetaClassIndex()>();

        interfaceinvoke $r31.<groovyjarjarasm.asm.MethodVisitor: void visitVarInsn(int,int)>(25, $i3);

        return;

     label3:
        r38 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.String getStaticFieldName(org.codehaus.groovy.ast.ClassNode)>($r1);

     label4:
        $r39 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: java.util.Set syntheticStaticFields>;

        interfaceinvoke $r39.<java.util.Set: boolean add(java.lang.Object)>(r38);

        r40 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.String internalClassName>;

        $r41 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode classNode>;

        $z5 = virtualinvoke $r41.<org.codehaus.groovy.ast.ClassNode: boolean isInterface()>();

        if $z5 == 0 goto label5;

        $r28 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode interfaceClassLoadingClass>;

        r40 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getClassInternalName(org.codehaus.groovy.ast.ClassNode)>($r28);

     label5:
        $r5 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r5.<groovyjarjarasm.asm.MethodVisitor: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)>(178, r40, r38, "Ljava/lang/Class;");

        $r42 = new groovyjarjarasm.asm.Label;

        specialinvoke $r42.<groovyjarjarasm.asm.Label: void <init>()>();

        $r7 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r7.<groovyjarjarasm.asm.MethodVisitor: void visitJumpInsn(int,groovyjarjarasm.asm.Label)>(199, $r42);

        $r8 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        $r9 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getClassLoadingTypeDescription(org.codehaus.groovy.ast.ClassNode)>($r1);

        interfaceinvoke $r8.<groovyjarjarasm.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>($r9);

        $r10 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r10.<groovyjarjarasm.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)>(184, r40, "class$", "(Ljava/lang/String;)Ljava/lang/Class;");

        $r11 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r11.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(89);

        $r12 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r12.<groovyjarjarasm.asm.MethodVisitor: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)>(179, r40, r38, "Ljava/lang/Class;");

        $r43 = new groovyjarjarasm.asm.Label;

        specialinvoke $r43.<groovyjarjarasm.asm.Label: void <init>()>();

        $r14 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r14.<groovyjarjarasm.asm.MethodVisitor: void visitJumpInsn(int,groovyjarjarasm.asm.Label)>(167, $r43);

        $r15 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r15.<groovyjarjarasm.asm.MethodVisitor: void visitLabel(groovyjarjarasm.asm.Label)>($r42);

        $r16 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r16.<groovyjarjarasm.asm.MethodVisitor: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)>(178, r40, r38, "Ljava/lang/Class;");

        $r17 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r17.<groovyjarjarasm.asm.MethodVisitor: void visitLabel(groovyjarjarasm.asm.Label)>($r43);

        $r18 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode classNode>;

        $z3 = virtualinvoke $r1.<org.codehaus.groovy.ast.ClassNode: boolean equals(java.lang.Object)>($r18);

        if $z3 == 0 goto label6;

        $r24 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r24.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(89);

        $r26 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        $r25 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode CLASS_Type>;

        $i1 = virtualinvoke $r26.<org.codehaus.groovy.classgen.CompileStack: int defineTemporaryVariable(java.lang.String,org.codehaus.groovy.ast.ClassNode,boolean)>("class$0", $r25, 1);

        $r27 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        virtualinvoke $r27.<org.codehaus.groovy.classgen.CompileStack: void setCurrentClassIndex(int)>($i1);

        goto label7;

     label6:
        $r19 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode METACLASS_TYPE>;

        $z4 = virtualinvoke $r1.<org.codehaus.groovy.ast.ClassNode: boolean equals(java.lang.Object)>($r19);

        if $z4 == 0 goto label7;

        $r20 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r20.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(89);

        $r22 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        $r21 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode CLASS_Type>;

        $i0 = virtualinvoke $r22.<org.codehaus.groovy.classgen.CompileStack: int defineTemporaryVariable(java.lang.String,org.codehaus.groovy.ast.ClassNode,boolean)>("meta$class$0", $r21, 1);

        $r23 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        virtualinvoke $r23.<org.codehaus.groovy.classgen.CompileStack: void setCurrentMetaClassIndex(int)>($i0);

     label7:
        return;
    }

    public void visitRangeExpression(org.codehaus.groovy.ast.expr.RangeExpression)
    {
        org.codehaus.groovy.classgen.AsmClassGenerator r2;
        org.codehaus.groovy.classgen.BytecodeHelper $r4;
        org.codehaus.groovy.classgen.MethodCaller $r6;
        groovyjarjarasm.asm.MethodVisitor $r5;
        org.codehaus.groovy.ast.expr.RangeExpression r0;
        org.codehaus.groovy.ast.expr.Expression $r1, $r3;
        boolean $z0;

        r2 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.RangeExpression;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.RangeExpression: org.codehaus.groovy.ast.expr.Expression getFrom()>();

        virtualinvoke $r1.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r2);

        $r3 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.RangeExpression: org.codehaus.groovy.ast.expr.Expression getTo()>();

        virtualinvoke $r3.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r2);

        $r4 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.BytecodeHelper helper>;

        $z0 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.RangeExpression: boolean isInclusive()>();

        virtualinvoke $r4.<org.codehaus.groovy.classgen.BytecodeHelper: void pushConstant(boolean)>($z0);

        $r6 = <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCaller createRangeMethod>;

        $r5 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        virtualinvoke $r6.<org.codehaus.groovy.classgen.MethodCaller: void call(groovyjarjarasm.asm.MethodVisitor)>($r5);

        return;
    }

    public void visitMapEntryExpression(org.codehaus.groovy.ast.expr.MapEntryExpression)
    {
        org.codehaus.groovy.GroovyBugError $r0;
        org.codehaus.groovy.classgen.AsmClassGenerator r1;
        org.codehaus.groovy.ast.expr.MapEntryExpression r2;

        r1 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r2 := @parameter0: org.codehaus.groovy.ast.expr.MapEntryExpression;

        $r0 = new org.codehaus.groovy.GroovyBugError;

        specialinvoke $r0.<org.codehaus.groovy.GroovyBugError: void <init>(java.lang.String)>("MapEntryExpression should not be visited here");

        throw $r0;
    }

    public void visitMapExpression(org.codehaus.groovy.ast.expr.MapExpression)
    {
        org.codehaus.groovy.ast.expr.MapExpression r0;
        org.codehaus.groovy.classgen.BytecodeHelper $r3, $r11, $r15;
        groovyjarjarasm.asm.MethodVisitor $r4, $r6, $r10, $r13, $r14, $r17;
        int $i0, $i1, i2, i3;
        org.codehaus.groovy.ast.expr.Expression $r12, $r16;
        boolean $z0;
        java.util.Iterator $r5;
        org.codehaus.groovy.classgen.AsmClassGenerator r2;
        org.codehaus.groovy.classgen.MethodCaller $r7;
        java.util.List $r1;
        java.lang.Object $r8;
        org.codehaus.groovy.ast.expr.MapEntryExpression r9;

        r2 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.MapExpression;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.MapExpression: java.util.List getMapEntryExpressions()>();

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $r3 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.BytecodeHelper helper>;

        $i1 = $i0 * 2;

        virtualinvoke $r3.<org.codehaus.groovy.classgen.BytecodeHelper: void pushConstant(int)>($i1);

        $r4 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r4.<groovyjarjarasm.asm.MethodVisitor: void visitTypeInsn(int,java.lang.String)>(189, "java/lang/Object");

        i2 = 0;

        $r5 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r9 = (org.codehaus.groovy.ast.expr.MapEntryExpression) $r8;

        $r10 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r10.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(89);

        $r11 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.BytecodeHelper helper>;

        i3 = i2 + 1;

        virtualinvoke $r11.<org.codehaus.groovy.classgen.BytecodeHelper: void pushConstant(int)>(i2);

        $r12 = virtualinvoke r9.<org.codehaus.groovy.ast.expr.MapEntryExpression: org.codehaus.groovy.ast.expr.Expression getKeyExpression()>();

        virtualinvoke r2.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitAndAutoboxBoolean(org.codehaus.groovy.ast.expr.Expression)>($r12);

        $r13 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r13.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(83);

        $r14 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r14.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(89);

        $r15 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.BytecodeHelper helper>;

        i2 = i3 + 1;

        virtualinvoke $r15.<org.codehaus.groovy.classgen.BytecodeHelper: void pushConstant(int)>(i3);

        $r16 = virtualinvoke r9.<org.codehaus.groovy.ast.expr.MapEntryExpression: org.codehaus.groovy.ast.expr.Expression getValueExpression()>();

        virtualinvoke r2.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitAndAutoboxBoolean(org.codehaus.groovy.ast.expr.Expression)>($r16);

        $r17 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r17.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(83);

        goto label1;

     label2:
        $r7 = <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCaller createMapMethod>;

        $r6 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        virtualinvoke $r7.<org.codehaus.groovy.classgen.MethodCaller: void call(groovyjarjarasm.asm.MethodVisitor)>($r6);

        return;
    }

    public void visitArgumentlistExpression(org.codehaus.groovy.ast.expr.ArgumentListExpression)
    {
        java.util.List $r2;
        org.codehaus.groovy.classgen.AsmClassGenerator r1;
        org.codehaus.groovy.ast.expr.ArgumentListExpression r0;
        boolean $z0;

        r1 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.ArgumentListExpression;

        $z0 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: boolean containsSpreadExpression(org.codehaus.groovy.ast.expr.Expression)>(r0);

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.ArgumentListExpression: java.util.List getExpressions()>();

        specialinvoke r1.<org.codehaus.groovy.classgen.AsmClassGenerator: void despreadList(java.util.List,boolean)>($r2, 1);

        goto label2;

     label1:
        specialinvoke r1.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitTupleExpression(org.codehaus.groovy.ast.expr.TupleExpression,boolean)>(r0, 1);

     label2:
        return;
    }

    public void visitTupleExpression(org.codehaus.groovy.ast.expr.TupleExpression)
    {
        org.codehaus.groovy.classgen.AsmClassGenerator r0;
        org.codehaus.groovy.ast.expr.TupleExpression r1;

        r0 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.TupleExpression;

        specialinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitTupleExpression(org.codehaus.groovy.ast.expr.TupleExpression,boolean)>(r1, 0);

        return;
    }

    private void visitTupleExpression(org.codehaus.groovy.ast.expr.TupleExpression, boolean)
    {
        org.codehaus.groovy.classgen.AsmClassGenerator r2;
        org.codehaus.groovy.classgen.BytecodeHelper $r3, $r6;
        groovyjarjarasm.asm.MethodVisitor $r4, $r5, $r8;
        org.codehaus.groovy.ast.expr.TupleExpression r0;
        java.util.List $r1;
        int $i0, i1;
        org.codehaus.groovy.ast.expr.Expression $r7;
        boolean z0, $z1;

        r2 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.TupleExpression;

        z0 := @parameter1: boolean;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.TupleExpression: java.util.List getExpressions()>();

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $r3 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.BytecodeHelper helper>;

        virtualinvoke $r3.<org.codehaus.groovy.classgen.BytecodeHelper: void pushConstant(int)>($i0);

        $r4 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r4.<groovyjarjarasm.asm.MethodVisitor: void visitTypeInsn(int,java.lang.String)>(189, "java/lang/Object");

        i1 = 0;

     label1:
        if i1 >= $i0 goto label3;

        $r5 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r5.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(89);

        $r6 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.BytecodeHelper helper>;

        virtualinvoke $r6.<org.codehaus.groovy.classgen.BytecodeHelper: void pushConstant(int)>(i1);

        $r7 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.TupleExpression: org.codehaus.groovy.ast.expr.Expression getExpression(int)>(i1);

        virtualinvoke r2.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitAndAutoboxBoolean(org.codehaus.groovy.ast.expr.Expression)>($r7);

        if z0 == 0 goto label2;

        $z1 = $r7 instanceof org.codehaus.groovy.ast.expr.CastExpression;

        if $z1 == 0 goto label2;

        specialinvoke r2.<org.codehaus.groovy.classgen.AsmClassGenerator: void loadWrapper(org.codehaus.groovy.ast.expr.Expression)>($r7);

     label2:
        $r8 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r8.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(83);

        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    private void loadWrapper(org.codehaus.groovy.ast.expr.Expression)
    {
        org.codehaus.groovy.ast.ClassNode $r1;
        org.codehaus.groovy.classgen.AsmClassGenerator r2;
        org.codehaus.groovy.classgen.MethodCaller $r5, $r7;
        groovyjarjarasm.asm.MethodVisitor $r4, $r6;
        org.codehaus.groovy.ast.expr.ClassExpression $r3;
        org.codehaus.groovy.ast.expr.Expression r0;
        boolean $z0;

        r2 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.Expression;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.Expression: org.codehaus.groovy.ast.ClassNode getType()>();

        $r3 = new org.codehaus.groovy.ast.expr.ClassExpression;

        specialinvoke $r3.<org.codehaus.groovy.ast.expr.ClassExpression: void <init>(org.codehaus.groovy.ast.ClassNode)>($r1);

        virtualinvoke r2.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitClassExpression(org.codehaus.groovy.ast.expr.ClassExpression)>($r3);

        $z0 = virtualinvoke $r1.<org.codehaus.groovy.ast.ClassNode: boolean isDerivedFromGroovyObject()>();

        if $z0 == 0 goto label1;

        $r7 = <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCaller createGroovyObjectWrapperMethod>;

        $r6 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        virtualinvoke $r7.<org.codehaus.groovy.classgen.MethodCaller: void call(groovyjarjarasm.asm.MethodVisitor)>($r6);

        goto label2;

     label1:
        $r5 = <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCaller createPojoWrapperMethod>;

        $r4 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        virtualinvoke $r5.<org.codehaus.groovy.classgen.MethodCaller: void call(groovyjarjarasm.asm.MethodVisitor)>($r4);

     label2:
        return;
    }

    public void visitArrayExpression(org.codehaus.groovy.ast.expr.ArrayExpression)
    {
        org.codehaus.groovy.ast.expr.ConstantExpression $r15, $r29;
        groovyjarjarasm.asm.MethodVisitor $r7, $r9, $r10, $r26, $r33, $r34;
        byte b4, b5;
        boolean $z0, $z1, $z2, $z3;
        org.codehaus.groovy.ast.expr.ArrayExpression r0;
        org.codehaus.groovy.classgen.CompileStack $r8;
        java.util.List $r3, $r4;
        org.codehaus.groovy.ast.expr.CastExpression $r14;
        org.codehaus.groovy.classgen.BytecodeHelper $r6, $r11, $r31;
        int $i0, $i1, i2, i3, i6;
        java.lang.String $r2, $r25;
        org.codehaus.groovy.ast.expr.Expression $r12, r32;
        java.util.Iterator $r27;
        org.codehaus.groovy.ast.ClassNode $r1, $r13, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24;
        org.codehaus.groovy.classgen.AsmClassGenerator r5;
        java.lang.Object $r28;
        java.lang.Class $r30;

        r5 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.ArrayExpression;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.ArrayExpression: org.codehaus.groovy.ast.ClassNode getElementType()>();

        $r2 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getClassInternalName(org.codehaus.groovy.ast.ClassNode)>($r1);

        $r3 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.ArrayExpression: java.util.List getSizeExpression()>();

        i2 = 0;

        i3 = 0;

        if $r3 == null goto label04;

        $r27 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z3 = interfaceinvoke $r27.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label03;

        $r28 = interfaceinvoke $r27.<java.util.Iterator: java.lang.Object next()>();

        r32 = (org.codehaus.groovy.ast.expr.Expression) $r28;

        $r29 = <org.codehaus.groovy.ast.expr.ConstantExpression: org.codehaus.groovy.ast.expr.ConstantExpression EMTPY_EXPRESSION>;

        if r32 != $r29 goto label02;

        goto label03;

     label02:
        i3 = i3 + 1;

        virtualinvoke r5.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitAndAutoboxBoolean(org.codehaus.groovy.ast.expr.Expression)>(r32);

        $r31 = r5.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.BytecodeHelper helper>;

        $r30 = <java.lang.Integer: java.lang.Class TYPE>;

        virtualinvoke $r31.<org.codehaus.groovy.classgen.BytecodeHelper: void unbox(java.lang.Class)>($r30);

        goto label01;

     label03:
        goto label05;

     label04:
        $r4 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.ArrayExpression: java.util.List getExpressions()>();

        $i0 = interfaceinvoke $r4.<java.util.List: int size()>();

        i2 = $i0;

        $r6 = r5.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.BytecodeHelper helper>;

        virtualinvoke $r6.<org.codehaus.groovy.classgen.BytecodeHelper: void pushConstant(int)>($i0);

     label05:
        b4 = 83;

        if $r3 == null goto label06;

        $r24 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.ArrayExpression: org.codehaus.groovy.ast.ClassNode getType()>();

        $r25 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getTypeDescription(org.codehaus.groovy.ast.ClassNode)>($r24);

        $r26 = r5.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r26.<groovyjarjarasm.asm.MethodVisitor: void visitMultiANewArrayInsn(java.lang.String,int)>($r25, i3);

        goto label16;

     label06:
        $z0 = staticinvoke <org.codehaus.groovy.ast.ClassHelper: boolean isPrimitiveType(org.codehaus.groovy.ast.ClassNode)>($r1);

        if $z0 == 0 goto label15;

        b5 = 0;

        $r16 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode boolean_TYPE>;

        if $r1 != $r16 goto label07;

        b5 = 4;

        b4 = 84;

        goto label14;

     label07:
        $r17 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode char_TYPE>;

        if $r1 != $r17 goto label08;

        b5 = 5;

        b4 = 85;

        goto label14;

     label08:
        $r18 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode float_TYPE>;

        if $r1 != $r18 goto label09;

        b5 = 6;

        b4 = 81;

        goto label14;

     label09:
        $r19 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode double_TYPE>;

        if $r1 != $r19 goto label10;

        b5 = 7;

        b4 = 82;

        goto label14;

     label10:
        $r20 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode byte_TYPE>;

        if $r1 != $r20 goto label11;

        b5 = 8;

        b4 = 84;

        goto label14;

     label11:
        $r21 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode short_TYPE>;

        if $r1 != $r21 goto label12;

        b5 = 9;

        b4 = 86;

        goto label14;

     label12:
        $r22 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode int_TYPE>;

        if $r1 != $r22 goto label13;

        b5 = 10;

        b4 = 79;

        goto label14;

     label13:
        $r23 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode long_TYPE>;

        if $r1 != $r23 goto label14;

        b5 = 11;

        b4 = 80;

     label14:
        $r33 = r5.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r33.<groovyjarjarasm.asm.MethodVisitor: void visitIntInsn(int,int)>(188, b5);

        goto label16;

     label15:
        $r7 = r5.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r7.<groovyjarjarasm.asm.MethodVisitor: void visitTypeInsn(int,java.lang.String)>(189, $r2);

     label16:
        i6 = 0;

     label17:
        if i6 >= i2 goto label21;

        $r10 = r5.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r10.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(89);

        $r11 = r5.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.BytecodeHelper helper>;

        virtualinvoke $r11.<org.codehaus.groovy.classgen.BytecodeHelper: void pushConstant(int)>(i6);

        $r12 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.ArrayExpression: org.codehaus.groovy.ast.expr.Expression getExpression(int)>(i6);

        if $r12 != null goto label18;

        $r15 = <org.codehaus.groovy.ast.expr.ConstantExpression: org.codehaus.groovy.ast.expr.ConstantExpression NULL>;

        virtualinvoke $r15.<org.codehaus.groovy.ast.expr.ConstantExpression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r5);

        goto label20;

     label18:
        $r13 = virtualinvoke $r12.<org.codehaus.groovy.ast.expr.Expression: org.codehaus.groovy.ast.ClassNode getType()>();

        $z2 = virtualinvoke $r1.<org.codehaus.groovy.ast.ClassNode: boolean equals(java.lang.Object)>($r13);

        if $z2 != 0 goto label19;

        $r14 = new org.codehaus.groovy.ast.expr.CastExpression;

        specialinvoke $r14.<org.codehaus.groovy.ast.expr.CastExpression: void <init>(org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.expr.Expression,boolean)>($r1, $r12, 1);

        virtualinvoke r5.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitCastExpression(org.codehaus.groovy.ast.expr.CastExpression)>($r14);

        goto label20;

     label19:
        virtualinvoke r5.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitAndAutoboxBoolean(org.codehaus.groovy.ast.expr.Expression)>($r12);

     label20:
        $r34 = r5.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r34.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(b4);

        i6 = i6 + 1;

        goto label17;

     label21:
        if $r3 != null goto label22;

        $z1 = staticinvoke <org.codehaus.groovy.ast.ClassHelper: boolean isPrimitiveType(org.codehaus.groovy.ast.ClassNode)>($r1);

        if $z1 == 0 goto label22;

        $r8 = r5.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        $i1 = virtualinvoke $r8.<org.codehaus.groovy.classgen.CompileStack: int defineTemporaryVariable(java.lang.String,boolean)>("par", 1);

        $r9 = r5.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r9.<groovyjarjarasm.asm.MethodVisitor: void visitVarInsn(int,int)>(25, $i1);

     label22:
        return;
    }

    public void visitClosureListExpression(org.codehaus.groovy.ast.expr.ClosureListExpression)
    {
        groovyjarjarasm.asm.MethodVisitor $r27, $r29, $r30, $r31, $r35, $r36, $r37, $r39, $r40, $r41, $r43, $r44;
        org.codehaus.groovy.ast.expr.ClosureListExpression r1;
        org.codehaus.groovy.syntax.Token $r52;
        org.codehaus.groovy.classgen.AsmClassGenerator$11 $r48;
        org.codehaus.groovy.classgen.AsmClassGenerator$12 $r19;
        org.codehaus.groovy.classgen.AsmClassGenerator$13 $r25;
        org.codehaus.groovy.classgen.AsmClassGenerator$10 $r47;
        org.codehaus.groovy.ast.VariableScope $r3, $r13;
        org.codehaus.groovy.classgen.BytecodeHelper $r26, $r38, $r42;
        org.codehaus.groovy.ast.expr.Expression $r51, $r53;
        groovyjarjarasm.asm.Label $r15, $r16, $r45;
        org.codehaus.groovy.ast.Parameter $r9;
        org.codehaus.groovy.ast.ClassNode $r10, $r23;
        org.codehaus.groovy.classgen.BytecodeSequence $r7;
        org.codehaus.groovy.ast.expr.ConstantExpression $r14, $r20, $r54;
        boolean z0, $z1;
        org.codehaus.groovy.classgen.MethodCaller $r32;
        org.codehaus.groovy.classgen.CompileStack $r2, $r28, $r33, $r34;
        java.util.List $r4;
        org.codehaus.groovy.ast.expr.BinaryExpression $r50;
        org.codehaus.groovy.ast.stmt.BlockStatement $r8;
        groovyjarjarasm.asm.Label[] r17;
        org.codehaus.groovy.ast.stmt.ThrowStatement $r24;
        int $i0, $i1, i2, i3, i4;
        java.util.LinkedList $r5, $r6;
        org.codehaus.groovy.ast.expr.ConstructorCallExpression $r21;
        org.codehaus.groovy.classgen.AsmClassGenerator r0;
        org.codehaus.groovy.ast.expr.DeclarationExpression r55;
        org.codehaus.groovy.ast.expr.ClosureExpression $r11;
        org.codehaus.groovy.ast.Parameter[] $r12;
        org.codehaus.groovy.classgen.AsmClassGenerator$9 $r18;
        java.lang.Class $r22, $r56;
        java.lang.Object $r46, $r49;

        r0 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.ClosureListExpression;

        $r2 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        $r3 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.ClosureListExpression: org.codehaus.groovy.ast.VariableScope getVariableScope()>();

        virtualinvoke $r2.<org.codehaus.groovy.classgen.CompileStack: void pushVariableScope(org.codehaus.groovy.ast.VariableScope)>($r3);

        $r4 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.ClosureListExpression: java.util.List getExpressions()>();

        $i0 = interfaceinvoke $r4.<java.util.List: int size()>();

        $r5 = new java.util.LinkedList;

        specialinvoke $r5.<java.util.LinkedList: void <init>()>();

        i2 = 0;

     label1:
        if i2 >= $i0 goto label3;

        $r49 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i2);

        $z1 = $r49 instanceof org.codehaus.groovy.ast.expr.DeclarationExpression;

        if $z1 == 0 goto label2;

        virtualinvoke $r5.<java.util.LinkedList: boolean add(java.lang.Object)>($r49);

        r55 = (org.codehaus.groovy.ast.expr.DeclarationExpression) $r49;

        $r50 = new org.codehaus.groovy.ast.expr.BinaryExpression;

        $r51 = virtualinvoke r55.<org.codehaus.groovy.ast.expr.DeclarationExpression: org.codehaus.groovy.ast.expr.Expression getLeftExpression()>();

        $r52 = virtualinvoke r55.<org.codehaus.groovy.ast.expr.DeclarationExpression: org.codehaus.groovy.syntax.Token getOperation()>();

        $r53 = virtualinvoke r55.<org.codehaus.groovy.ast.expr.DeclarationExpression: org.codehaus.groovy.ast.expr.Expression getRightExpression()>();

        specialinvoke $r50.<org.codehaus.groovy.ast.expr.BinaryExpression: void <init>(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.syntax.Token,org.codehaus.groovy.ast.expr.Expression)>($r51, $r52, $r53);

        interfaceinvoke $r4.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i2, $r50);

        $r54 = <org.codehaus.groovy.ast.expr.ConstantExpression: org.codehaus.groovy.ast.expr.ConstantExpression NULL>;

        virtualinvoke r55.<org.codehaus.groovy.ast.expr.DeclarationExpression: void setRightExpression(org.codehaus.groovy.ast.expr.Expression)>($r54);

        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitDeclarationExpression(org.codehaus.groovy.ast.expr.DeclarationExpression)>(r55);

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        $r6 = new java.util.LinkedList;

        specialinvoke $r6.<java.util.LinkedList: void <init>()>();

        $r7 = new org.codehaus.groovy.classgen.BytecodeSequence;

        specialinvoke $r7.<org.codehaus.groovy.classgen.BytecodeSequence: void <init>(java.util.List)>($r6);

        $r8 = new org.codehaus.groovy.ast.stmt.BlockStatement;

        specialinvoke $r8.<org.codehaus.groovy.ast.stmt.BlockStatement: void <init>()>();

        virtualinvoke $r8.<org.codehaus.groovy.ast.stmt.BlockStatement: void addStatement(org.codehaus.groovy.ast.stmt.Statement)>($r7);

        $r9 = new org.codehaus.groovy.ast.Parameter;

        $r10 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode int_TYPE>;

        specialinvoke $r9.<org.codehaus.groovy.ast.Parameter: void <init>(org.codehaus.groovy.ast.ClassNode,java.lang.String)>($r10, "__closureIndex");

        $r11 = new org.codehaus.groovy.ast.expr.ClosureExpression;

        $r12 = newarray (org.codehaus.groovy.ast.Parameter)[1];

        $r12[0] = $r9;

        specialinvoke $r11.<org.codehaus.groovy.ast.expr.ClosureExpression: void <init>(org.codehaus.groovy.ast.Parameter[],org.codehaus.groovy.ast.stmt.Statement)>($r12, $r8);

        $r13 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.ClosureListExpression: org.codehaus.groovy.ast.VariableScope getVariableScope()>();

        virtualinvoke $r11.<org.codehaus.groovy.ast.expr.ClosureExpression: void setVariableScope(org.codehaus.groovy.ast.VariableScope)>($r13);

        $r14 = <org.codehaus.groovy.ast.expr.ConstantExpression: org.codehaus.groovy.ast.expr.ConstantExpression NULL>;

        virtualinvoke $r6.<java.util.LinkedList: boolean add(java.lang.Object)>($r14);

        $r15 = new groovyjarjarasm.asm.Label;

        specialinvoke $r15.<groovyjarjarasm.asm.Label: void <init>()>();

        $r16 = new groovyjarjarasm.asm.Label;

        specialinvoke $r16.<groovyjarjarasm.asm.Label: void <init>()>();

        r17 = newarray (groovyjarjarasm.asm.Label)[$i0];

        $r18 = new org.codehaus.groovy.classgen.AsmClassGenerator$9;

        specialinvoke $r18.<org.codehaus.groovy.classgen.AsmClassGenerator$9: void <init>(org.codehaus.groovy.classgen.AsmClassGenerator,int,groovyjarjarasm.asm.Label,groovyjarjarasm.asm.Label[])>(r0, $i0, $r15, r17);

        virtualinvoke $r6.<java.util.LinkedList: boolean add(java.lang.Object)>($r18);

        i3 = 0;

     label4:
        if i3 >= $i0 goto label5;

        $r45 = new groovyjarjarasm.asm.Label;

        specialinvoke $r45.<groovyjarjarasm.asm.Label: void <init>()>();

        $r46 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i3);

        z0 = $r46 instanceof org.codehaus.groovy.ast.stmt.Statement;

        r17[i3] = $r45;

        $r47 = new org.codehaus.groovy.classgen.AsmClassGenerator$10;

        specialinvoke $r47.<org.codehaus.groovy.classgen.AsmClassGenerator$10: void <init>(org.codehaus.groovy.classgen.AsmClassGenerator,groovyjarjarasm.asm.Label,boolean)>(r0, $r45, z0);

        virtualinvoke $r6.<java.util.LinkedList: boolean add(java.lang.Object)>($r47);

        virtualinvoke $r6.<java.util.LinkedList: boolean add(java.lang.Object)>($r46);

        $r48 = new org.codehaus.groovy.classgen.AsmClassGenerator$11;

        specialinvoke $r48.<org.codehaus.groovy.classgen.AsmClassGenerator$11: void <init>(org.codehaus.groovy.classgen.AsmClassGenerator,groovyjarjarasm.asm.Label)>(r0, $r16);

        virtualinvoke $r6.<java.util.LinkedList: boolean add(java.lang.Object)>($r48);

        i3 = i3 + 1;

        goto label4;

     label5:
        $r19 = new org.codehaus.groovy.classgen.AsmClassGenerator$12;

        specialinvoke $r19.<org.codehaus.groovy.classgen.AsmClassGenerator$12: void <init>(org.codehaus.groovy.classgen.AsmClassGenerator,groovyjarjarasm.asm.Label)>(r0, $r15);

        virtualinvoke $r6.<java.util.LinkedList: boolean add(java.lang.Object)>($r19);

        $r20 = new org.codehaus.groovy.ast.expr.ConstantExpression;

        specialinvoke $r20.<org.codehaus.groovy.ast.expr.ConstantExpression: void <init>(java.lang.Object)>("invalid index for closure");

        $r21 = new org.codehaus.groovy.ast.expr.ConstructorCallExpression;

        $r22 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$java$lang$IllegalArgumentException>;

        if $r22 != null goto label6;

        $r56 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$(java.lang.String)>("java.lang.IllegalArgumentException");

        <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$java$lang$IllegalArgumentException> = $r56;

        goto label7;

     label6:
        $r56 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$java$lang$IllegalArgumentException>;

     label7:
        $r23 = staticinvoke <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode make(java.lang.Class)>($r56);

        specialinvoke $r21.<org.codehaus.groovy.ast.expr.ConstructorCallExpression: void <init>(org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.expr.Expression)>($r23, $r20);

        $r24 = new org.codehaus.groovy.ast.stmt.ThrowStatement;

        specialinvoke $r24.<org.codehaus.groovy.ast.stmt.ThrowStatement: void <init>(org.codehaus.groovy.ast.expr.Expression)>($r21);

        virtualinvoke $r6.<java.util.LinkedList: boolean add(java.lang.Object)>($r24);

        $r25 = new org.codehaus.groovy.classgen.AsmClassGenerator$13;

        specialinvoke $r25.<org.codehaus.groovy.classgen.AsmClassGenerator$13: void <init>(org.codehaus.groovy.classgen.AsmClassGenerator,groovyjarjarasm.asm.Label)>(r0, $r16);

        virtualinvoke $r6.<java.util.LinkedList: boolean add(java.lang.Object)>($r25);

        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitClosureExpression(org.codehaus.groovy.ast.expr.ClosureExpression)>($r11);

        $r26 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.BytecodeHelper helper>;

        virtualinvoke $r26.<org.codehaus.groovy.classgen.BytecodeHelper: void pushConstant(int)>($i0);

        $r27 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r27.<groovyjarjarasm.asm.MethodVisitor: void visitTypeInsn(int,java.lang.String)>(189, "java/lang/Object");

        $r28 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        $i1 = virtualinvoke $r28.<org.codehaus.groovy.classgen.CompileStack: int defineTemporaryVariable(java.lang.String,boolean)>("_listOfClosures", 1);

        i4 = 0;

     label8:
        if i4 >= $i0 goto label9;

        $r35 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r35.<groovyjarjarasm.asm.MethodVisitor: void visitTypeInsn(int,java.lang.String)>(187, "org/codehaus/groovy/runtime/CurriedClosure");

        $r36 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r36.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(92);

        $r37 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r37.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(95);

        $r38 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.BytecodeHelper helper>;

        virtualinvoke $r38.<org.codehaus.groovy.classgen.BytecodeHelper: void pushConstant(int)>(i4);

        $r39 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r39.<groovyjarjarasm.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)>(183, "org/codehaus/groovy/runtime/CurriedClosure", "<init>", "(Lgroovy/lang/Closure;I)V");

        $r40 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r40.<groovyjarjarasm.asm.MethodVisitor: void visitVarInsn(int,int)>(25, $i1);

        $r41 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r41.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(95);

        $r42 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.BytecodeHelper helper>;

        virtualinvoke $r42.<org.codehaus.groovy.classgen.BytecodeHelper: void pushConstant(int)>(i4);

        $r43 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r43.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(95);

        $r44 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r44.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(83);

        i4 = i4 + 1;

        goto label8;

     label9:
        $r29 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r29.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(87);

        $r30 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r30.<groovyjarjarasm.asm.MethodVisitor: void visitVarInsn(int,int)>(25, $i1);

        $r32 = <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCaller createListMethod>;

        $r31 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        virtualinvoke $r32.<org.codehaus.groovy.classgen.MethodCaller: void call(groovyjarjarasm.asm.MethodVisitor)>($r31);

        $r33 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        virtualinvoke $r33.<org.codehaus.groovy.classgen.CompileStack: void removeVar(int)>($i1);

        $r34 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        virtualinvoke $r34.<org.codehaus.groovy.classgen.CompileStack: void pop()>();

        return;
    }

    public void visitBytecodeSequence(org.codehaus.groovy.classgen.BytecodeSequence)
    {
        org.codehaus.groovy.ast.stmt.Statement r10;
        org.codehaus.groovy.classgen.BytecodeInstruction r11;
        java.util.Iterator $r2;
        org.codehaus.groovy.classgen.AsmClassGenerator r5;
        groovyjarjarasm.asm.MethodVisitor $r6, $r7, $r9;
        java.util.List $r1;
        java.lang.Object $r3;
        org.codehaus.groovy.classgen.BytecodeSequence r0;
        org.codehaus.groovy.ast.expr.EmptyExpression $r4;
        org.codehaus.groovy.ast.expr.Expression $r8;
        boolean $z0, $z1, $z2;

        r5 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r0 := @parameter0: org.codehaus.groovy.classgen.BytecodeSequence;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.classgen.BytecodeSequence: java.util.List getInstructions()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = <org.codehaus.groovy.ast.expr.EmptyExpression: org.codehaus.groovy.ast.expr.EmptyExpression INSTANCE>;

        if $r3 != $r4 goto label2;

        $r9 = r5.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r9.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(1);

        goto label5;

     label2:
        $z1 = $r3 instanceof org.codehaus.groovy.ast.expr.Expression;

        if $z1 == 0 goto label3;

        $r8 = (org.codehaus.groovy.ast.expr.Expression) $r3;

        virtualinvoke r5.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitAndAutoboxBoolean(org.codehaus.groovy.ast.expr.Expression)>($r8);

        goto label5;

     label3:
        $z2 = $r3 instanceof org.codehaus.groovy.ast.stmt.Statement;

        if $z2 == 0 goto label4;

        r10 = (org.codehaus.groovy.ast.stmt.Statement) $r3;

        virtualinvoke r10.<org.codehaus.groovy.ast.stmt.Statement: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r5);

        $r7 = r5.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r7.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(1);

        goto label5;

     label4:
        r11 = (org.codehaus.groovy.classgen.BytecodeInstruction) $r3;

        $r6 = r5.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        virtualinvoke r11.<org.codehaus.groovy.classgen.BytecodeInstruction: void visit(groovyjarjarasm.asm.MethodVisitor)>($r6);

     label5:
        goto label1;

     label6:
        return;
    }

    public void visitListExpression(org.codehaus.groovy.ast.expr.ListExpression)
    {
        org.codehaus.groovy.ast.expr.ListExpression r1;
        org.codehaus.groovy.classgen.AsmClassGenerator r0;
        org.codehaus.groovy.classgen.BytecodeHelper $r6, $r9;
        org.codehaus.groovy.classgen.MethodCaller $r5;
        groovyjarjarasm.asm.MethodVisitor $r4, $r7, $r8, $r11;
        java.util.List $r2, $r3;
        int $i0, i1;
        org.codehaus.groovy.ast.expr.Expression $r10;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.ListExpression;

        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void onLineNumber(org.codehaus.groovy.ast.ASTNode,java.lang.String)>(r1, "ListExpression");

        $r2 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.ListExpression: java.util.List getExpressions()>();

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $z0 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: boolean containsSpreadExpression(org.codehaus.groovy.ast.expr.Expression)>(r1);

        if $z0 != 0 goto label3;

        $r6 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.BytecodeHelper helper>;

        virtualinvoke $r6.<org.codehaus.groovy.classgen.BytecodeHelper: void pushConstant(int)>($i0);

        $r7 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r7.<groovyjarjarasm.asm.MethodVisitor: void visitTypeInsn(int,java.lang.String)>(189, "java/lang/Object");

        i1 = 0;

     label1:
        if i1 >= $i0 goto label2;

        $r8 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r8.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(89);

        $r9 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.BytecodeHelper helper>;

        virtualinvoke $r9.<org.codehaus.groovy.classgen.BytecodeHelper: void pushConstant(int)>(i1);

        $r10 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.ListExpression: org.codehaus.groovy.ast.expr.Expression getExpression(int)>(i1);

        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitAndAutoboxBoolean(org.codehaus.groovy.ast.expr.Expression)>($r10);

        $r11 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r11.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(83);

        i1 = i1 + 1;

        goto label1;

     label2:
        goto label4;

     label3:
        $r3 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.ListExpression: java.util.List getExpressions()>();

        specialinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void despreadList(java.util.List,boolean)>($r3, 0);

     label4:
        $r5 = <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCaller createListMethod>;

        $r4 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        virtualinvoke $r5.<org.codehaus.groovy.classgen.MethodCaller: void call(groovyjarjarasm.asm.MethodVisitor)>($r4);

        return;
    }

    public void visitGStringExpression(org.codehaus.groovy.ast.expr.GStringExpression)
    {
        org.codehaus.groovy.classgen.BytecodeHelper $r5, $r8, $r12, $r19;
        org.codehaus.groovy.ast.expr.ConstantExpression $r15;
        groovyjarjarasm.asm.MethodVisitor $r1, $r2, $r6, $r9, $r10, $r11, $r13, $r17, $r18, $r21;
        int $i0, $i1, i2, i3;
        org.codehaus.groovy.ast.expr.Expression $r20;
        org.codehaus.groovy.classgen.AsmClassGenerator r0;
        java.util.List $r4, $r7;
        org.codehaus.groovy.ast.expr.GStringExpression r3;
        java.lang.Object $r14, $r16;

        r0 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r3 := @parameter0: org.codehaus.groovy.ast.expr.GStringExpression;

        $r1 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r1.<groovyjarjarasm.asm.MethodVisitor: void visitTypeInsn(int,java.lang.String)>(187, "org/codehaus/groovy/runtime/GStringImpl");

        $r2 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r2.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(89);

        $r4 = virtualinvoke r3.<org.codehaus.groovy.ast.expr.GStringExpression: java.util.List getValues()>();

        $i0 = interfaceinvoke $r4.<java.util.List: int size()>();

        $r5 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.BytecodeHelper helper>;

        virtualinvoke $r5.<org.codehaus.groovy.classgen.BytecodeHelper: void pushConstant(int)>($i0);

        $r6 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r6.<groovyjarjarasm.asm.MethodVisitor: void visitTypeInsn(int,java.lang.String)>(189, "java/lang/Object");

        i2 = 0;

     label1:
        if i2 >= $i0 goto label2;

        $r18 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r18.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(89);

        $r19 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.BytecodeHelper helper>;

        virtualinvoke $r19.<org.codehaus.groovy.classgen.BytecodeHelper: void pushConstant(int)>(i2);

        $r20 = virtualinvoke r3.<org.codehaus.groovy.ast.expr.GStringExpression: org.codehaus.groovy.ast.expr.Expression getValue(int)>(i2);

        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitAndAutoboxBoolean(org.codehaus.groovy.ast.expr.Expression)>($r20);

        $r21 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r21.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(83);

        i2 = i2 + 1;

        goto label1;

     label2:
        $r7 = virtualinvoke r3.<org.codehaus.groovy.ast.expr.GStringExpression: java.util.List getStrings()>();

        $i1 = interfaceinvoke $r7.<java.util.List: int size()>();

        $r8 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.BytecodeHelper helper>;

        virtualinvoke $r8.<org.codehaus.groovy.classgen.BytecodeHelper: void pushConstant(int)>($i1);

        $r9 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r9.<groovyjarjarasm.asm.MethodVisitor: void visitTypeInsn(int,java.lang.String)>(189, "java/lang/String");

        i3 = 0;

     label3:
        if i3 >= $i1 goto label4;

        $r11 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r11.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(89);

        $r12 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.BytecodeHelper helper>;

        virtualinvoke $r12.<org.codehaus.groovy.classgen.BytecodeHelper: void pushConstant(int)>(i3);

        $r13 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        $r14 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>(i3);

        $r15 = (org.codehaus.groovy.ast.expr.ConstantExpression) $r14;

        $r16 = virtualinvoke $r15.<org.codehaus.groovy.ast.expr.ConstantExpression: java.lang.Object getValue()>();

        interfaceinvoke $r13.<groovyjarjarasm.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>($r16);

        $r17 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r17.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(83);

        i3 = i3 + 1;

        goto label3;

     label4:
        $r10 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r10.<groovyjarjarasm.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)>(183, "org/codehaus/groovy/runtime/GStringImpl", "<init>", "([Ljava/lang/Object;[Ljava/lang/String;)V");

        return;
    }

    public void visitAnnotations(org.codehaus.groovy.ast.AnnotatedNode)
    {
        org.codehaus.groovy.classgen.AsmClassGenerator r0;
        org.codehaus.groovy.ast.AnnotatedNode r1;

        r0 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r1 := @parameter0: org.codehaus.groovy.ast.AnnotatedNode;

        return;
    }

    private void visitAnnotations(org.codehaus.groovy.ast.AnnotatedNode, java.lang.Object)
    {
        java.util.Iterator $r3;
        org.codehaus.groovy.ast.AnnotationNode r5;
        java.util.Collection $r2;
        org.codehaus.groovy.classgen.AsmClassGenerator r6;
        org.codehaus.groovy.ast.AnnotatedNode r0;
        java.util.Map $r1;
        java.lang.Object $r4, r7;
        groovyjarjarasm.asm.AnnotationVisitor $r8;
        boolean $z0, $z1, $z2, $z3;

        r6 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r0 := @parameter0: org.codehaus.groovy.ast.AnnotatedNode;

        r7 := @parameter1: java.lang.Object;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.AnnotatedNode: java.util.Map getAnnotations()>();

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z3 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label5;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.codehaus.groovy.ast.AnnotationNode) $r4;

        $z1 = virtualinvoke r5.<org.codehaus.groovy.ast.AnnotationNode: boolean isBuiltIn()>();

        if $z1 == 0 goto label3;

        goto label2;

     label3:
        $z2 = virtualinvoke r5.<org.codehaus.groovy.ast.AnnotationNode: boolean hasSourceRetention()>();

        if $z2 == 0 goto label4;

        goto label2;

     label4:
        $r8 = specialinvoke r6.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.AnnotationVisitor getAnnotationVisitor(org.codehaus.groovy.ast.AnnotatedNode,org.codehaus.groovy.ast.AnnotationNode,java.lang.Object)>(r0, r5, r7);

        specialinvoke r6.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitAnnotationAttributes(org.codehaus.groovy.ast.AnnotationNode,groovyjarjarasm.asm.AnnotationVisitor)>(r5, $r8);

        interfaceinvoke $r8.<groovyjarjarasm.asm.AnnotationVisitor: void visitEnd()>();

        goto label2;

     label5:
        return;
    }

    private void visitParameterAnnotations(org.codehaus.groovy.ast.Parameter, int, groovyjarjarasm.asm.MethodVisitor)
    {
        org.codehaus.groovy.ast.AnnotationNode r5;
        groovyjarjarasm.asm.MethodVisitor r8;
        java.util.Map $r1;
        int i0;
        java.lang.String $r7;
        groovyjarjarasm.asm.AnnotationVisitor $r9;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.codehaus.groovy.ast.Parameter r0;
        java.util.Iterator $r3;
        org.codehaus.groovy.ast.ClassNode $r6;
        java.util.Collection $r2;
        org.codehaus.groovy.classgen.AsmClassGenerator r10;
        java.lang.Object $r4;

        r10 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r0 := @parameter0: org.codehaus.groovy.ast.Parameter;

        i0 := @parameter1: int;

        r8 := @parameter2: groovyjarjarasm.asm.MethodVisitor;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.Parameter: java.util.Map getAnnotations()>();

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z4 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label5;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.codehaus.groovy.ast.AnnotationNode) $r4;

        $z1 = virtualinvoke r5.<org.codehaus.groovy.ast.AnnotationNode: boolean isBuiltIn()>();

        if $z1 == 0 goto label3;

        goto label2;

     label3:
        $z2 = virtualinvoke r5.<org.codehaus.groovy.ast.AnnotationNode: boolean hasSourceRetention()>();

        if $z2 == 0 goto label4;

        goto label2;

     label4:
        $r6 = virtualinvoke r5.<org.codehaus.groovy.ast.AnnotationNode: org.codehaus.groovy.ast.ClassNode getClassNode()>();

        $r7 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getTypeDescription(org.codehaus.groovy.ast.ClassNode)>($r6);

        $z3 = virtualinvoke r5.<org.codehaus.groovy.ast.AnnotationNode: boolean hasRuntimeRetention()>();

        $r9 = interfaceinvoke r8.<groovyjarjarasm.asm.MethodVisitor: groovyjarjarasm.asm.AnnotationVisitor visitParameterAnnotation(int,java.lang.String,boolean)>(i0, $r7, $z3);

        specialinvoke r10.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitAnnotationAttributes(org.codehaus.groovy.ast.AnnotationNode,groovyjarjarasm.asm.AnnotationVisitor)>(r5, $r9);

        interfaceinvoke $r9.<groovyjarjarasm.asm.AnnotationVisitor: void visitEnd()>();

        goto label2;

     label5:
        return;
    }

    private groovyjarjarasm.asm.AnnotationVisitor getAnnotationVisitor(org.codehaus.groovy.ast.AnnotatedNode, org.codehaus.groovy.ast.AnnotationNode, java.lang.Object)
    {
        org.codehaus.groovy.ast.AnnotationNode r0;
        org.codehaus.groovy.ast.AnnotatedNode r3;
        groovyjarjarasm.asm.MethodVisitor $r10;
        groovyjarjarasm.asm.ClassVisitor $r6;
        java.lang.String $r2;
        groovyjarjarasm.asm.FieldVisitor $r8;
        groovyjarjarasm.asm.AnnotationVisitor $r7, $r9, $r11;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.codehaus.groovy.ast.ClassNode $r1;
        org.codehaus.groovy.classgen.AsmClassGenerator r4;
        java.lang.Object r5;

        r4 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r3 := @parameter0: org.codehaus.groovy.ast.AnnotatedNode;

        r0 := @parameter1: org.codehaus.groovy.ast.AnnotationNode;

        r5 := @parameter2: java.lang.Object;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.AnnotationNode: org.codehaus.groovy.ast.ClassNode getClassNode()>();

        $r2 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getTypeDescription(org.codehaus.groovy.ast.ClassNode)>($r1);

        $z0 = r3 instanceof org.codehaus.groovy.ast.MethodNode;

        if $z0 == 0 goto label1;

        $r10 = (groovyjarjarasm.asm.MethodVisitor) r5;

        $z5 = virtualinvoke r0.<org.codehaus.groovy.ast.AnnotationNode: boolean hasRuntimeRetention()>();

        $r11 = interfaceinvoke $r10.<groovyjarjarasm.asm.MethodVisitor: groovyjarjarasm.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)>($r2, $z5);

        return $r11;

     label1:
        $z1 = r3 instanceof org.codehaus.groovy.ast.FieldNode;

        if $z1 == 0 goto label2;

        $r8 = (groovyjarjarasm.asm.FieldVisitor) r5;

        $z4 = virtualinvoke r0.<org.codehaus.groovy.ast.AnnotationNode: boolean hasRuntimeRetention()>();

        $r9 = interfaceinvoke $r8.<groovyjarjarasm.asm.FieldVisitor: groovyjarjarasm.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)>($r2, $z4);

        return $r9;

     label2:
        $z2 = r3 instanceof org.codehaus.groovy.ast.ClassNode;

        if $z2 == 0 goto label3;

        $r6 = (groovyjarjarasm.asm.ClassVisitor) r5;

        $z3 = virtualinvoke r0.<org.codehaus.groovy.ast.AnnotationNode: boolean hasRuntimeRetention()>();

        $r7 = interfaceinvoke $r6.<groovyjarjarasm.asm.ClassVisitor: groovyjarjarasm.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)>($r2, $z3);

        return $r7;

     label3:
        specialinvoke r4.<org.codehaus.groovy.classgen.AsmClassGenerator: void throwException(java.lang.String)>("Cannot create an AnnotationVisitor. Please report Groovy bug");

        return null;
    }

    private void visitAnnotationAttributes(org.codehaus.groovy.ast.AnnotationNode, groovyjarjarasm.asm.AnnotationVisitor)
    {
        groovyjarjarasm.asm.Type $r42;
        org.codehaus.groovy.ast.expr.ConstantExpression $r31, $r43;
        java.util.Map $r5;
        groovyjarjarasm.asm.AnnotationVisitor r15, $r22;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.util.Set $r6, $r8, $r10, $r12;
        org.codehaus.groovy.ast.AnnotationNode r4, r52;
        org.codehaus.groovy.ast.expr.PropertyExpression r50;
        java.util.HashMap $r0, $r1, $r2, $r3;
        java.lang.String $r19, $r21, $r26, $r29, $r33, $r36, $r41, r47;
        org.codehaus.groovy.ast.expr.Expression $r27, $r30, $r39;
        java.util.Map$Entry r48, r49, r51;
        java.util.Iterator $r7, $r9, $r11, $r13;
        org.codehaus.groovy.ast.ClassNode $r20, $r28, $r40;
        org.codehaus.groovy.classgen.AsmClassGenerator r14;
        org.codehaus.groovy.ast.expr.AnnotationConstantExpression $r45;
        java.lang.Object $r16, $r17, $r18, $r23, $r24, $r25, $r32, $r34, $r35, $r37, $r38, $r44, $r46;

        r14 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r4 := @parameter0: org.codehaus.groovy.ast.AnnotationNode;

        r15 := @parameter1: groovyjarjarasm.asm.AnnotationVisitor;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        $r5 = virtualinvoke r4.<org.codehaus.groovy.ast.AnnotationNode: java.util.Map getMembers()>();

        $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set keySet()>();

        $r7 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label07;

        $r38 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r47 = (java.lang.String) $r38;

        $r39 = virtualinvoke r4.<org.codehaus.groovy.ast.AnnotationNode: org.codehaus.groovy.ast.expr.Expression getMember(java.lang.String)>(r47);

        $z4 = $r39 instanceof org.codehaus.groovy.ast.expr.AnnotationConstantExpression;

        if $z4 == 0 goto label02;

        $r45 = (org.codehaus.groovy.ast.expr.AnnotationConstantExpression) $r39;

        $r46 = virtualinvoke $r45.<org.codehaus.groovy.ast.expr.AnnotationConstantExpression: java.lang.Object getValue()>();

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r47, $r46);

        goto label06;

     label02:
        $z5 = $r39 instanceof org.codehaus.groovy.ast.expr.ConstantExpression;

        if $z5 == 0 goto label03;

        $r43 = (org.codehaus.groovy.ast.expr.ConstantExpression) $r39;

        $r44 = virtualinvoke $r43.<org.codehaus.groovy.ast.expr.ConstantExpression: java.lang.Object getValue()>();

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r47, $r44);

        goto label06;

     label03:
        $z6 = $r39 instanceof org.codehaus.groovy.ast.expr.ClassExpression;

        if $z6 == 0 goto label04;

        $r40 = virtualinvoke $r39.<org.codehaus.groovy.ast.expr.Expression: org.codehaus.groovy.ast.ClassNode getType()>();

        $r41 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getTypeDescription(org.codehaus.groovy.ast.ClassNode)>($r40);

        $r42 = staticinvoke <groovyjarjarasm.asm.Type: groovyjarjarasm.asm.Type getType(java.lang.String)>($r41);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r47, $r42);

        goto label06;

     label04:
        $z7 = $r39 instanceof org.codehaus.groovy.ast.expr.PropertyExpression;

        if $z7 == 0 goto label05;

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r47, $r39);

        goto label06;

     label05:
        $z8 = $r39 instanceof org.codehaus.groovy.ast.expr.ListExpression;

        if $z8 == 0 goto label06;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r47, $r39);

     label06:
        goto label01;

     label07:
        $r8 = interfaceinvoke $r0.<java.util.Map: java.util.Set entrySet()>();

        $r9 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label08:
        $z1 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label09;

        $r34 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r48 = (java.util.Map$Entry) $r34;

        $r35 = interfaceinvoke r48.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r36 = (java.lang.String) $r35;

        $r37 = interfaceinvoke r48.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke r15.<groovyjarjarasm.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>($r36, $r37);

        goto label08;

     label09:
        $r10 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        $r11 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();

     label10:
        $z2 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label11;

        $r23 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r49 = (java.util.Map$Entry) $r23;

        $r24 = interfaceinvoke r49.<java.util.Map$Entry: java.lang.Object getValue()>();

        r50 = (org.codehaus.groovy.ast.expr.PropertyExpression) $r24;

        $r25 = interfaceinvoke r49.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r26 = (java.lang.String) $r25;

        $r27 = virtualinvoke r50.<org.codehaus.groovy.ast.expr.PropertyExpression: org.codehaus.groovy.ast.expr.Expression getObjectExpression()>();

        $r28 = virtualinvoke $r27.<org.codehaus.groovy.ast.expr.Expression: org.codehaus.groovy.ast.ClassNode getType()>();

        $r29 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getTypeDescription(org.codehaus.groovy.ast.ClassNode)>($r28);

        $r30 = virtualinvoke r50.<org.codehaus.groovy.ast.expr.PropertyExpression: org.codehaus.groovy.ast.expr.Expression getProperty()>();

        $r31 = (org.codehaus.groovy.ast.expr.ConstantExpression) $r30;

        $r32 = virtualinvoke $r31.<org.codehaus.groovy.ast.expr.ConstantExpression: java.lang.Object getValue()>();

        $r33 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r32);

        interfaceinvoke r15.<groovyjarjarasm.asm.AnnotationVisitor: void visitEnum(java.lang.String,java.lang.String,java.lang.String)>($r26, $r29, $r33);

        goto label10;

     label11:
        $r12 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();

        $r13 = interfaceinvoke $r12.<java.util.Set: java.util.Iterator iterator()>();

     label12:
        $z3 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label13;

        $r16 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r51 = (java.util.Map$Entry) $r16;

        $r17 = interfaceinvoke r51.<java.util.Map$Entry: java.lang.Object getValue()>();

        r52 = (org.codehaus.groovy.ast.AnnotationNode) $r17;

        $r18 = interfaceinvoke r51.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r19 = (java.lang.String) $r18;

        $r20 = virtualinvoke r52.<org.codehaus.groovy.ast.AnnotationNode: org.codehaus.groovy.ast.ClassNode getClassNode()>();

        $r21 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getTypeDescription(org.codehaus.groovy.ast.ClassNode)>($r20);

        $r22 = interfaceinvoke r15.<groovyjarjarasm.asm.AnnotationVisitor: groovyjarjarasm.asm.AnnotationVisitor visitAnnotation(java.lang.String,java.lang.String)>($r19, $r21);

        specialinvoke r14.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitAnnotationAttributes(org.codehaus.groovy.ast.AnnotationNode,groovyjarjarasm.asm.AnnotationVisitor)>(r52, $r22);

        interfaceinvoke $r22.<groovyjarjarasm.asm.AnnotationVisitor: void visitEnd()>();

        goto label12;

     label13:
        specialinvoke r14.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitArrayAttributes(org.codehaus.groovy.ast.AnnotationNode,java.util.Map,groovyjarjarasm.asm.AnnotationVisitor)>(r4, $r3, r15);

        return;
    }

    private void visitArrayAttributes(org.codehaus.groovy.ast.AnnotationNode, java.util.Map, groovyjarjarasm.asm.AnnotationVisitor)
    {
        org.codehaus.groovy.ast.expr.ListExpression r8;
        groovyjarjarasm.asm.Type $r27;
        org.codehaus.groovy.ast.expr.ConstantExpression $r20, $r29;
        byte b0;
        java.util.Map r0;
        groovyjarjarasm.asm.AnnotationVisitor r9, $r10, $r37;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.util.Set $r1;
        java.util.List $r11, $r40;
        org.codehaus.groovy.ast.expr.PropertyExpression r15;
        org.codehaus.groovy.ast.AnnotationNode r34, r39;
        java.lang.String r6, $r18, $r22, $r26, $r36;
        org.codehaus.groovy.ast.expr.Expression r13, $r16, $r19, $r24;
        java.util.Map$Entry r4;
        java.util.Iterator $r2, $r41;
        org.codehaus.groovy.ast.ClassNode $r17, $r25, $r35;
        org.codehaus.groovy.classgen.AsmClassGenerator r38;
        org.codehaus.groovy.ast.expr.AnnotationConstantExpression $r32;
        java.lang.Object $r3, $r5, $r7, $r12, $r14, $r21, $r23, $r28, $r30, $r31, $r33;

        r38 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r39 := @parameter0: org.codehaus.groovy.ast.AnnotationNode;

        r0 := @parameter1: java.util.Map;

        r9 := @parameter2: groovyjarjarasm.asm.AnnotationVisitor;

        $z0 = interfaceinvoke r0.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label01;

        return;

     label01:
        $r1 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label02:
        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label14;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r3;

        $r5 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        r6 = (java.lang.String) $r5;

        $r7 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        r8 = (org.codehaus.groovy.ast.expr.ListExpression) $r7;

        $r10 = interfaceinvoke r9.<groovyjarjarasm.asm.AnnotationVisitor: groovyjarjarasm.asm.AnnotationVisitor visitArray(java.lang.String)>(r6);

        $r11 = virtualinvoke r8.<org.codehaus.groovy.ast.expr.ListExpression: java.util.List getExpressions()>();

        $z2 = interfaceinvoke $r11.<java.util.List: boolean isEmpty()>();

        if $z2 != 0 goto label13;

        $r12 = interfaceinvoke $r11.<java.util.List: java.lang.Object get(int)>(0);

        r13 = (org.codehaus.groovy.ast.expr.Expression) $r12;

        b0 = -1;

        $z3 = r13 instanceof org.codehaus.groovy.ast.expr.AnnotationConstantExpression;

        if $z3 == 0 goto label03;

        b0 = 1;

        goto label06;

     label03:
        $z4 = r13 instanceof org.codehaus.groovy.ast.expr.ConstantExpression;

        if $z4 == 0 goto label04;

        b0 = 2;

        goto label06;

     label04:
        $z5 = r13 instanceof org.codehaus.groovy.ast.expr.ClassExpression;

        if $z5 == 0 goto label05;

        b0 = 3;

        goto label06;

     label05:
        $z6 = r13 instanceof org.codehaus.groovy.ast.expr.PropertyExpression;

        if $z6 == 0 goto label06;

        b0 = 4;

     label06:
        $r40 = virtualinvoke r8.<org.codehaus.groovy.ast.expr.ListExpression: java.util.List getExpressions()>();

        $r41 = interfaceinvoke $r40.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z7 = interfaceinvoke $r41.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label13;

        tableswitch(b0)
        {
            case 1: goto label08;
            case 2: goto label09;
            case 3: goto label10;
            case 4: goto label11;
            default: goto label12;
        };

     label08:
        $r31 = interfaceinvoke $r41.<java.util.Iterator: java.lang.Object next()>();

        $r32 = (org.codehaus.groovy.ast.expr.AnnotationConstantExpression) $r31;

        $r33 = virtualinvoke $r32.<org.codehaus.groovy.ast.expr.AnnotationConstantExpression: java.lang.Object getValue()>();

        r34 = (org.codehaus.groovy.ast.AnnotationNode) $r33;

        $r35 = virtualinvoke r34.<org.codehaus.groovy.ast.AnnotationNode: org.codehaus.groovy.ast.ClassNode getClassNode()>();

        $r36 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getTypeDescription(org.codehaus.groovy.ast.ClassNode)>($r35);

        $r37 = interfaceinvoke $r10.<groovyjarjarasm.asm.AnnotationVisitor: groovyjarjarasm.asm.AnnotationVisitor visitAnnotation(java.lang.String,java.lang.String)>(null, $r36);

        specialinvoke r38.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitAnnotationAttributes(org.codehaus.groovy.ast.AnnotationNode,groovyjarjarasm.asm.AnnotationVisitor)>(r34, $r37);

        interfaceinvoke $r37.<groovyjarjarasm.asm.AnnotationVisitor: void visitEnd()>();

        goto label12;

     label09:
        $r28 = interfaceinvoke $r41.<java.util.Iterator: java.lang.Object next()>();

        $r29 = (org.codehaus.groovy.ast.expr.ConstantExpression) $r28;

        $r30 = virtualinvoke $r29.<org.codehaus.groovy.ast.expr.ConstantExpression: java.lang.Object getValue()>();

        interfaceinvoke $r10.<groovyjarjarasm.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(null, $r30);

        goto label12;

     label10:
        $r23 = interfaceinvoke $r41.<java.util.Iterator: java.lang.Object next()>();

        $r24 = (org.codehaus.groovy.ast.expr.Expression) $r23;

        $r25 = virtualinvoke $r24.<org.codehaus.groovy.ast.expr.Expression: org.codehaus.groovy.ast.ClassNode getType()>();

        $r26 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getTypeDescription(org.codehaus.groovy.ast.ClassNode)>($r25);

        $r27 = staticinvoke <groovyjarjarasm.asm.Type: groovyjarjarasm.asm.Type getType(java.lang.String)>($r26);

        interfaceinvoke $r10.<groovyjarjarasm.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(null, $r27);

        goto label12;

     label11:
        $r14 = interfaceinvoke $r41.<java.util.Iterator: java.lang.Object next()>();

        r15 = (org.codehaus.groovy.ast.expr.PropertyExpression) $r14;

        $r16 = virtualinvoke r15.<org.codehaus.groovy.ast.expr.PropertyExpression: org.codehaus.groovy.ast.expr.Expression getObjectExpression()>();

        $r17 = virtualinvoke $r16.<org.codehaus.groovy.ast.expr.Expression: org.codehaus.groovy.ast.ClassNode getType()>();

        $r18 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getTypeDescription(org.codehaus.groovy.ast.ClassNode)>($r17);

        $r19 = virtualinvoke r15.<org.codehaus.groovy.ast.expr.PropertyExpression: org.codehaus.groovy.ast.expr.Expression getProperty()>();

        $r20 = (org.codehaus.groovy.ast.expr.ConstantExpression) $r19;

        $r21 = virtualinvoke $r20.<org.codehaus.groovy.ast.expr.ConstantExpression: java.lang.Object getValue()>();

        $r22 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r21);

        interfaceinvoke $r10.<groovyjarjarasm.asm.AnnotationVisitor: void visitEnum(java.lang.String,java.lang.String,java.lang.String)>(null, $r18, $r22);

     label12:
        goto label07;

     label13:
        interfaceinvoke $r10.<groovyjarjarasm.asm.AnnotationVisitor: void visitEnd()>();

        goto label02;

     label14:
        return;
    }

    protected boolean addInnerClass(org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.ast.ClassNode r0, $r2;
        org.codehaus.groovy.classgen.AsmClassGenerator r1;
        java.util.LinkedList $r4;
        org.codehaus.groovy.ast.ModuleNode $r3;
        boolean $z0;

        r1 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r0 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        $r2 = r1.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode classNode>;

        $r3 = virtualinvoke $r2.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ModuleNode getModule()>();

        virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: void setModule(org.codehaus.groovy.ast.ModuleNode)>($r3);

        $r4 = r1.<org.codehaus.groovy.classgen.AsmClassGenerator: java.util.LinkedList innerClasses>;

        $z0 = virtualinvoke $r4.<java.util.LinkedList: boolean add(java.lang.Object)>(r0);

        return $z0;
    }

    protected org.codehaus.groovy.ast.ClassNode createClosureClass(org.codehaus.groovy.ast.expr.ClosureExpression)
    {
        org.codehaus.groovy.classgen.GeneratorContext $r8;
        org.codehaus.groovy.ast.expr.VariableExpression $r25, $r35, $r73, $r75;
        org.codehaus.groovy.ast.expr.ArgumentListExpression $r22;
        org.codehaus.groovy.ast.VariableScope $r18, $r19, $r64, $r74, $r76;
        org.codehaus.groovy.ast.MethodNode $r6, $r17, $r26, $r71;
        org.codehaus.groovy.ast.stmt.ExpressionStatement $r78;
        java.lang.StringBuffer $r2, $r4, $r5, $r10, $r41, $r42, $r43, $r54, $r55, $r56, $r57, $r58;
        java.lang.String $r3, $r9, $r11, $r33, $r39, $r44, $r59;
        org.codehaus.groovy.ast.Parameter $r27, $r29, $r48, $r50, $r60, r81;
        org.codehaus.groovy.ast.ClassNode $r1, $r7, $r14, $r23, $r28, $r30, $r34, $r36, $r37, $r49, $r51, $r52, $r62, $r66, $r70, $r80;
        org.codehaus.groovy.ast.stmt.ReturnStatement $r20, $r45;
        java.lang.RuntimeException $r53;
        org.codehaus.groovy.ast.expr.ConstantExpression $r61;
        org.codehaus.groovy.ast.Variable $r65;
        boolean $z0, z1, $z2, $z3, $z4, $z5;
        org.codehaus.groovy.ast.InnerClassNode $r69;
        org.codehaus.groovy.ast.expr.FieldExpression $r40;
        org.codehaus.groovy.ast.stmt.BlockStatement $r72;
        org.codehaus.groovy.ast.stmt.Statement $r16;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, $i7;
        org.codehaus.groovy.ast.ClassNode[] $r15, $r24, $r31, $r47;
        org.codehaus.groovy.ast.expr.MethodCallExpression $r21;
        org.codehaus.groovy.ast.expr.ConstructorCallExpression $r79;
        org.codehaus.groovy.classgen.AsmClassGenerator r0;
        org.codehaus.groovy.ast.expr.ClosureExpression r12;
        org.codehaus.groovy.ast.Parameter[] $r13, $r46, $r63, r67, $r68, r82;
        org.codehaus.groovy.ast.expr.TupleExpression $r77;
        org.codehaus.groovy.ast.FieldNode $r38;
        org.codehaus.groovy.ast.ConstructorNode $r32;

        r0 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r12 := @parameter0: org.codehaus.groovy.ast.expr.ClosureExpression;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode getOutermostClass()>();

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r1.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("$");

        $r8 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.GeneratorContext context>;

        $r7 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode classNode>;

        $r6 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.MethodNode methodNode>;

        $r9 = virtualinvoke $r8.<org.codehaus.groovy.classgen.GeneratorContext: java.lang.String getNextClosureInnerName(org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.MethodNode)>($r1, $r7, $r6);

        $r10 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        $z0 = virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean isStaticMethod()>();

        if $z0 != 0 goto label01;

        $r66 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode classNode>;

        $z4 = virtualinvoke $r66.<org.codehaus.groovy.ast.ClassNode: boolean isStaticClass()>();

        if $z4 == 0 goto label02;

     label01:
        $z5 = 1;

        goto label03;

     label02:
        $z5 = 0;

     label03:
        z1 = $z5;

        $r13 = virtualinvoke r12.<org.codehaus.groovy.ast.expr.ClosureExpression: org.codehaus.groovy.ast.Parameter[] getParameters()>();

        r67 = $r13;

        if $r13 != null goto label04;

        r67 = <org.codehaus.groovy.ast.Parameter: org.codehaus.groovy.ast.Parameter[] EMPTY_ARRAY>;

        goto label05;

     label04:
        $i0 = lengthof $r13;

        if $i0 != 0 goto label05;

        $r60 = new org.codehaus.groovy.ast.Parameter;

        $r62 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode OBJECT_TYPE>;

        $r61 = <org.codehaus.groovy.ast.expr.ConstantExpression: org.codehaus.groovy.ast.expr.ConstantExpression NULL>;

        specialinvoke $r60.<org.codehaus.groovy.ast.Parameter: void <init>(org.codehaus.groovy.ast.ClassNode,java.lang.String,org.codehaus.groovy.ast.expr.Expression)>($r62, "it", $r61);

        $r63 = newarray (org.codehaus.groovy.ast.Parameter)[1];

        $r63[0] = $r60;

        r67 = $r63;

        $r64 = virtualinvoke r12.<org.codehaus.groovy.ast.expr.ClosureExpression: org.codehaus.groovy.ast.VariableScope getVariableScope()>();

        $r65 = virtualinvoke $r64.<org.codehaus.groovy.ast.VariableScope: org.codehaus.groovy.ast.Variable getDeclaredVariable(java.lang.String)>("it");

        if $r65 == null goto label05;

        $z3 = interfaceinvoke $r65.<org.codehaus.groovy.ast.Variable: boolean isClosureSharedVariable()>();

        virtualinvoke $r60.<org.codehaus.groovy.ast.Parameter: void setClosureSharedVariable(boolean)>($z3);

     label05:
        $r68 = virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.Parameter[] getClosureSharedVariables(org.codehaus.groovy.ast.expr.ClosureExpression)>(r12);

        specialinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void removeInitialValues(org.codehaus.groovy.ast.Parameter[])>($r68);

        $r69 = new org.codehaus.groovy.ast.InnerClassNode;

        $r70 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode CLOSURE_TYPE>;

        specialinvoke $r69.<org.codehaus.groovy.ast.InnerClassNode: void <init>(org.codehaus.groovy.ast.ClassNode,java.lang.String,int,org.codehaus.groovy.ast.ClassNode)>($r1, $r11, 0, $r70);

        $r71 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.MethodNode methodNode>;

        virtualinvoke $r69.<org.codehaus.groovy.ast.InnerClassNode: void setEnclosingMethod(org.codehaus.groovy.ast.MethodNode)>($r71);

        virtualinvoke $r69.<org.codehaus.groovy.ast.InnerClassNode: void setSynthetic(boolean)>(1);

        if z1 == 0 goto label06;

        virtualinvoke $r69.<org.codehaus.groovy.ast.InnerClassNode: void setStaticClass(boolean)>(1);

     label06:
        $z2 = virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean isInScriptBody()>();

        if $z2 == 0 goto label07;

        virtualinvoke $r69.<org.codehaus.groovy.ast.InnerClassNode: void setScriptBody(boolean)>(1);

     label07:
        $r14 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode OBJECT_TYPE>;

        $r15 = <org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode[] EMPTY_ARRAY>;

        $r16 = virtualinvoke r12.<org.codehaus.groovy.ast.expr.ClosureExpression: org.codehaus.groovy.ast.stmt.Statement getCode()>();

        $r17 = virtualinvoke $r69.<org.codehaus.groovy.ast.InnerClassNode: org.codehaus.groovy.ast.MethodNode addMethod(java.lang.String,int,org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.Parameter[],org.codehaus.groovy.ast.ClassNode[],org.codehaus.groovy.ast.stmt.Statement)>("doCall", 1, $r14, r67, $r15, $r16);

        virtualinvoke $r17.<org.codehaus.groovy.ast.MethodNode: void setSourcePosition(org.codehaus.groovy.ast.ASTNode)>(r12);

        $r18 = virtualinvoke r12.<org.codehaus.groovy.ast.expr.ClosureExpression: org.codehaus.groovy.ast.VariableScope getVariableScope()>();

        if $r18 != null goto label08;

        $r53 = new java.lang.RuntimeException;

        $r54 = new java.lang.StringBuffer;

        specialinvoke $r54.<java.lang.StringBuffer: void <init>()>();

        $r55 = virtualinvoke $r54.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Must have a VariableScope by now! for expression: ");

        $r56 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r12);

        $r57 = virtualinvoke $r56.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" class: ");

        $r58 = virtualinvoke $r57.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r59 = virtualinvoke $r58.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r53.<java.lang.RuntimeException: void <init>(java.lang.String)>($r59);

        throw $r53;

     label08:
        $r19 = virtualinvoke $r18.<org.codehaus.groovy.ast.VariableScope: org.codehaus.groovy.ast.VariableScope copy()>();

        virtualinvoke $r17.<org.codehaus.groovy.ast.MethodNode: void setVariableScope(org.codehaus.groovy.ast.VariableScope)>($r19);

        $i1 = lengthof r67;

        if $i1 > 1 goto label09;

        $i5 = lengthof r67;

        if $i5 != 1 goto label10;

        $r48 = r67[0];

        $r49 = virtualinvoke $r48.<org.codehaus.groovy.ast.Parameter: org.codehaus.groovy.ast.ClassNode getType()>();

        if $r49 == null goto label10;

        $r50 = r67[0];

        $r51 = virtualinvoke $r50.<org.codehaus.groovy.ast.Parameter: org.codehaus.groovy.ast.ClassNode getType()>();

        $r52 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode OBJECT_TYPE>;

        if $r51 == $r52 goto label10;

     label09:
        $r23 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode OBJECT_TYPE>;

        $r24 = <org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode[] EMPTY_ARRAY>;

        $r20 = new org.codehaus.groovy.ast.stmt.ReturnStatement;

        $r21 = new org.codehaus.groovy.ast.expr.MethodCallExpression;

        $r25 = <org.codehaus.groovy.ast.expr.VariableExpression: org.codehaus.groovy.ast.expr.VariableExpression THIS_EXPRESSION>;

        $r22 = new org.codehaus.groovy.ast.expr.ArgumentListExpression;

        specialinvoke $r22.<org.codehaus.groovy.ast.expr.ArgumentListExpression: void <init>(org.codehaus.groovy.ast.Parameter[])>(r67);

        specialinvoke $r21.<org.codehaus.groovy.ast.expr.MethodCallExpression: void <init>(org.codehaus.groovy.ast.expr.Expression,java.lang.String,org.codehaus.groovy.ast.expr.Expression)>($r25, "doCall", $r22);

        specialinvoke $r20.<org.codehaus.groovy.ast.stmt.ReturnStatement: void <init>(org.codehaus.groovy.ast.expr.Expression)>($r21);

        $r26 = virtualinvoke $r69.<org.codehaus.groovy.ast.InnerClassNode: org.codehaus.groovy.ast.MethodNode addMethod(java.lang.String,int,org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.Parameter[],org.codehaus.groovy.ast.ClassNode[],org.codehaus.groovy.ast.stmt.Statement)>("call", 1, $r23, r67, $r24, $r20);

        virtualinvoke $r26.<org.codehaus.groovy.ast.MethodNode: void setSourcePosition(org.codehaus.groovy.ast.ASTNode)>(r12);

     label10:
        $r72 = new org.codehaus.groovy.ast.stmt.BlockStatement;

        specialinvoke $r72.<org.codehaus.groovy.ast.stmt.BlockStatement: void <init>()>();

        $r73 = new org.codehaus.groovy.ast.expr.VariableExpression;

        specialinvoke $r73.<org.codehaus.groovy.ast.expr.VariableExpression: void <init>(java.lang.String)>("_outerInstance");

        virtualinvoke $r73.<org.codehaus.groovy.ast.expr.VariableExpression: void setSourcePosition(org.codehaus.groovy.ast.ASTNode)>(r12);

        $r74 = virtualinvoke $r72.<org.codehaus.groovy.ast.stmt.BlockStatement: org.codehaus.groovy.ast.VariableScope getVariableScope()>();

        virtualinvoke $r74.<org.codehaus.groovy.ast.VariableScope: void putReferencedLocalVariable(org.codehaus.groovy.ast.Variable)>($r73);

        $r75 = new org.codehaus.groovy.ast.expr.VariableExpression;

        specialinvoke $r75.<org.codehaus.groovy.ast.expr.VariableExpression: void <init>(java.lang.String)>("_thisObject");

        virtualinvoke $r75.<org.codehaus.groovy.ast.expr.VariableExpression: void setSourcePosition(org.codehaus.groovy.ast.ASTNode)>(r12);

        $r76 = virtualinvoke $r72.<org.codehaus.groovy.ast.stmt.BlockStatement: org.codehaus.groovy.ast.VariableScope getVariableScope()>();

        virtualinvoke $r76.<org.codehaus.groovy.ast.VariableScope: void putReferencedLocalVariable(org.codehaus.groovy.ast.Variable)>($r75);

        $r77 = new org.codehaus.groovy.ast.expr.TupleExpression;

        specialinvoke $r77.<org.codehaus.groovy.ast.expr.TupleExpression: void <init>(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.expr.Expression)>($r73, $r75);

        $r78 = new org.codehaus.groovy.ast.stmt.ExpressionStatement;

        $r79 = new org.codehaus.groovy.ast.expr.ConstructorCallExpression;

        $r80 = <org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode SUPER>;

        specialinvoke $r79.<org.codehaus.groovy.ast.expr.ConstructorCallExpression: void <init>(org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.expr.Expression)>($r80, $r77);

        specialinvoke $r78.<org.codehaus.groovy.ast.stmt.ExpressionStatement: void <init>(org.codehaus.groovy.ast.expr.Expression)>($r79);

        virtualinvoke $r72.<org.codehaus.groovy.ast.stmt.BlockStatement: void addStatement(org.codehaus.groovy.ast.stmt.Statement)>($r78);

        i6 = 0;

     label11:
        $i7 = lengthof $r68;

        if i6 >= $i7 goto label12;

        r81 = $r68[i6];

        $r33 = virtualinvoke r81.<org.codehaus.groovy.ast.Parameter: java.lang.String getName()>();

        $r34 = virtualinvoke r81.<org.codehaus.groovy.ast.Parameter: org.codehaus.groovy.ast.ClassNode getType()>();

        $r35 = new org.codehaus.groovy.ast.expr.VariableExpression;

        specialinvoke $r35.<org.codehaus.groovy.ast.expr.VariableExpression: void <init>(java.lang.String)>($r33);

        $r36 = staticinvoke <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode makeReference()>();

        $r37 = staticinvoke <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode makeReference()>();

        virtualinvoke r81.<org.codehaus.groovy.ast.Parameter: void setType(org.codehaus.groovy.ast.ClassNode)>($r37);

        $r38 = virtualinvoke $r69.<org.codehaus.groovy.ast.InnerClassNode: org.codehaus.groovy.ast.FieldNode addField(java.lang.String,int,org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.expr.Expression)>($r33, 2, $r36, $r35);

        virtualinvoke $r38.<org.codehaus.groovy.ast.FieldNode: void setHolder(boolean)>(1);

        $r39 = staticinvoke <org.codehaus.groovy.classgen.Verifier: java.lang.String capitalize(java.lang.String)>($r33);

        $r40 = new org.codehaus.groovy.ast.expr.FieldExpression;

        specialinvoke $r40.<org.codehaus.groovy.ast.expr.FieldExpression: void <init>(org.codehaus.groovy.ast.FieldNode)>($r38);

        $r41 = new java.lang.StringBuffer;

        specialinvoke $r41.<java.lang.StringBuffer: void <init>()>();

        $r42 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("get");

        $r43 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r39);

        $r44 = virtualinvoke $r43.<java.lang.StringBuffer: java.lang.String toString()>();

        $r46 = <org.codehaus.groovy.ast.Parameter: org.codehaus.groovy.ast.Parameter[] EMPTY_ARRAY>;

        $r47 = <org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode[] EMPTY_ARRAY>;

        $r45 = new org.codehaus.groovy.ast.stmt.ReturnStatement;

        specialinvoke $r45.<org.codehaus.groovy.ast.stmt.ReturnStatement: void <init>(org.codehaus.groovy.ast.expr.Expression)>($r40);

        virtualinvoke $r69.<org.codehaus.groovy.ast.InnerClassNode: org.codehaus.groovy.ast.MethodNode addMethod(java.lang.String,int,org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.Parameter[],org.codehaus.groovy.ast.ClassNode[],org.codehaus.groovy.ast.stmt.Statement)>($r44, 1, $r34, $r46, $r47, $r45);

        i6 = i6 + 1;

        goto label11;

     label12:
        $i2 = lengthof $r68;

        $i3 = 2 + $i2;

        r82 = newarray (org.codehaus.groovy.ast.Parameter)[$i3];

        $r27 = new org.codehaus.groovy.ast.Parameter;

        $r28 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode OBJECT_TYPE>;

        specialinvoke $r27.<org.codehaus.groovy.ast.Parameter: void <init>(org.codehaus.groovy.ast.ClassNode,java.lang.String)>($r28, "_outerInstance");

        r82[0] = $r27;

        $r29 = new org.codehaus.groovy.ast.Parameter;

        $r30 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode OBJECT_TYPE>;

        specialinvoke $r29.<org.codehaus.groovy.ast.Parameter: void <init>(org.codehaus.groovy.ast.ClassNode,java.lang.String)>($r30, "_thisObject");

        r82[1] = $r29;

        $i4 = lengthof $r68;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r68, 0, r82, 2, $i4);

        $r31 = <org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode[] EMPTY_ARRAY>;

        $r32 = virtualinvoke $r69.<org.codehaus.groovy.ast.InnerClassNode: org.codehaus.groovy.ast.ConstructorNode addConstructor(int,org.codehaus.groovy.ast.Parameter[],org.codehaus.groovy.ast.ClassNode[],org.codehaus.groovy.ast.stmt.Statement)>(1, r82, $r31, $r72);

        virtualinvoke $r32.<org.codehaus.groovy.ast.ASTNode: void setSourcePosition(org.codehaus.groovy.ast.ASTNode)>(r12);

        return $r69;
    }

    private void removeInitialValues(org.codehaus.groovy.ast.Parameter[])
    {
        org.codehaus.groovy.ast.Parameter $r1, $r2, $r3, $r5;
        org.codehaus.groovy.ast.ClassNode $r4;
        org.codehaus.groovy.classgen.AsmClassGenerator r7;
        org.codehaus.groovy.ast.Parameter[] r0;
        int $i0, i1;
        java.lang.String $r6;
        boolean $z0;

        r7 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r0 := @parameter0: org.codehaus.groovy.ast.Parameter[];

        i1 = 0;

     label1:
        $i0 = lengthof r0;

        if i1 >= $i0 goto label3;

        $r1 = r0[i1];

        $z0 = virtualinvoke $r1.<org.codehaus.groovy.ast.Parameter: boolean hasInitialExpression()>();

        if $z0 == 0 goto label2;

        $r2 = new org.codehaus.groovy.ast.Parameter;

        $r3 = r0[i1];

        $r4 = virtualinvoke $r3.<org.codehaus.groovy.ast.Parameter: org.codehaus.groovy.ast.ClassNode getType()>();

        $r5 = r0[i1];

        $r6 = virtualinvoke $r5.<org.codehaus.groovy.ast.Parameter: java.lang.String getName()>();

        specialinvoke $r2.<org.codehaus.groovy.ast.Parameter: void <init>(org.codehaus.groovy.ast.ClassNode,java.lang.String)>($r4, $r6);

        r0[i1] = $r2;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    protected org.codehaus.groovy.ast.Parameter[] getClosureSharedVariables(org.codehaus.groovy.ast.expr.ClosureExpression)
    {
        org.codehaus.groovy.ast.VariableScope $r1;
        org.codehaus.groovy.ast.Parameter $r6;
        java.util.Iterator $r3;
        org.codehaus.groovy.ast.ClassNode $r7;
        org.codehaus.groovy.classgen.AsmClassGenerator r9;
        org.codehaus.groovy.ast.expr.ClosureExpression r0;
        org.codehaus.groovy.ast.Variable r5;
        org.codehaus.groovy.ast.Parameter[] r2;
        int $i0, i1;
        java.lang.Object $r4;
        java.lang.String $r8;
        boolean $z0;

        r9 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.ClosureExpression;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.ClosureExpression: org.codehaus.groovy.ast.VariableScope getVariableScope()>();

        $i0 = virtualinvoke $r1.<org.codehaus.groovy.ast.VariableScope: int getReferencedLocalVariablesCount()>();

        r2 = newarray (org.codehaus.groovy.ast.Parameter)[$i0];

        i1 = 0;

        $r3 = virtualinvoke $r1.<org.codehaus.groovy.ast.VariableScope: java.util.Iterator getReferencedLocalVariablesIterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.codehaus.groovy.ast.Variable) $r4;

        $r6 = new org.codehaus.groovy.ast.Parameter;

        $r7 = interfaceinvoke r5.<org.codehaus.groovy.ast.Variable: org.codehaus.groovy.ast.ClassNode getType()>();

        $r8 = interfaceinvoke r5.<org.codehaus.groovy.ast.Variable: java.lang.String getName()>();

        specialinvoke $r6.<org.codehaus.groovy.ast.Parameter: void <init>(org.codehaus.groovy.ast.ClassNode,java.lang.String)>($r7, $r8);

        r2[i1] = $r6;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r2;
    }

    protected org.codehaus.groovy.ast.ClassNode getOutermostClass()
    {
        org.codehaus.groovy.ast.ClassNode $r1, $r2, $r3, $r4, $r5, $r6;
        org.codehaus.groovy.classgen.AsmClassGenerator r0;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        $r1 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode outermostClass>;

        if $r1 != null goto label2;

        $r3 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode classNode>;

        r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode outermostClass> = $r3;

     label1:
        $r4 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode outermostClass>;

        $z0 = $r4 instanceof org.codehaus.groovy.ast.InnerClassNode;

        if $z0 == 0 goto label2;

        $r5 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode outermostClass>;

        $r6 = virtualinvoke $r5.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode getOuterClass()>();

        r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode outermostClass> = $r6;

        goto label1;

     label2:
        $r2 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode outermostClass>;

        return $r2;
    }

    protected void doConvertAndCast(org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.classgen.AsmClassGenerator r0;
        org.codehaus.groovy.ast.ClassNode r1;

        r0 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r1 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void doConvertAndCast(org.codehaus.groovy.ast.ClassNode,boolean)>(r1, 0);

        return;
    }

    protected void doConvertAndCast(org.codehaus.groovy.ast.ClassNode, boolean)
    {
        org.codehaus.groovy.classgen.BytecodeHelper $r11;
        groovyjarjarasm.asm.MethodVisitor $r5, $r7;
        boolean z0, $z1, $z2, $z3;
        org.codehaus.groovy.ast.ClassNode r0, $r1, $r3, $r9, $r10;
        org.codehaus.groovy.classgen.AsmClassGenerator r2;
        org.codehaus.groovy.classgen.MethodCaller $r6, $r8;
        org.codehaus.groovy.ast.expr.ClassExpression $r4;

        r2 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r0 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        z0 := @parameter1: boolean;

        $r1 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode OBJECT_TYPE>;

        if r0 != $r1 goto label1;

        return;

     label1:
        $r3 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode rightHandType>;

        if $r3 == null goto label2;

        $r9 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode rightHandType>;

        $z1 = virtualinvoke $r9.<org.codehaus.groovy.ast.ClassNode: boolean isDerivedFrom(org.codehaus.groovy.ast.ClassNode)>(r0);

        if $z1 == 0 goto label2;

        $r10 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode rightHandType>;

        $z2 = virtualinvoke $r10.<org.codehaus.groovy.ast.ClassNode: boolean implementsInterface(org.codehaus.groovy.ast.ClassNode)>(r0);

        if $z2 != 0 goto label4;

     label2:
        $z3 = virtualinvoke r2.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean isValidTypeForCast(org.codehaus.groovy.ast.ClassNode)>(r0);

        if $z3 == 0 goto label4;

        $r4 = new org.codehaus.groovy.ast.expr.ClassExpression;

        specialinvoke $r4.<org.codehaus.groovy.ast.expr.ClassExpression: void <init>(org.codehaus.groovy.ast.ClassNode)>(r0);

        virtualinvoke r2.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitClassExpression(org.codehaus.groovy.ast.expr.ClassExpression)>($r4);

        if z0 == 0 goto label3;

        $r8 = <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCaller asTypeMethod>;

        $r7 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        virtualinvoke $r8.<org.codehaus.groovy.classgen.MethodCaller: void call(groovyjarjarasm.asm.MethodVisitor)>($r7);

        goto label4;

     label3:
        $r6 = <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCaller castToTypeMethod>;

        $r5 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        virtualinvoke $r6.<org.codehaus.groovy.classgen.MethodCaller: void call(groovyjarjarasm.asm.MethodVisitor)>($r5);

     label4:
        $r11 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.BytecodeHelper helper>;

        virtualinvoke $r11.<org.codehaus.groovy.classgen.BytecodeHelper: void doCast(org.codehaus.groovy.ast.ClassNode)>(r0);

        return;
    }

    protected void evaluateLogicalOrExpression(org.codehaus.groovy.ast.expr.BinaryExpression)
    {
        org.codehaus.groovy.ast.expr.BooleanExpression $r1, $r12;
        org.codehaus.groovy.ast.expr.ConstantExpression $r8, $r15;
        groovyjarjarasm.asm.MethodVisitor $r6, $r7, $r10, $r11, $r14, $r16;
        org.codehaus.groovy.ast.expr.Expression $r3, $r13;
        groovyjarjarasm.asm.Label $r4, $r5, $r9;
        org.codehaus.groovy.classgen.AsmClassGenerator r0;
        org.codehaus.groovy.ast.expr.BinaryExpression r2;

        r0 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r2 := @parameter0: org.codehaus.groovy.ast.expr.BinaryExpression;

        $r1 = new org.codehaus.groovy.ast.expr.BooleanExpression;

        $r3 = virtualinvoke r2.<org.codehaus.groovy.ast.expr.BinaryExpression: org.codehaus.groovy.ast.expr.Expression getLeftExpression()>();

        specialinvoke $r1.<org.codehaus.groovy.ast.expr.BooleanExpression: void <init>(org.codehaus.groovy.ast.expr.Expression)>($r3);

        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitBooleanExpression(org.codehaus.groovy.ast.expr.BooleanExpression)>($r1);

        $r4 = new groovyjarjarasm.asm.Label;

        specialinvoke $r4.<groovyjarjarasm.asm.Label: void <init>()>();

        $r5 = new groovyjarjarasm.asm.Label;

        specialinvoke $r5.<groovyjarjarasm.asm.Label: void <init>()>();

        $r6 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r6.<groovyjarjarasm.asm.MethodVisitor: void visitJumpInsn(int,groovyjarjarasm.asm.Label)>(153, $r4);

        $r7 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r7.<groovyjarjarasm.asm.MethodVisitor: void visitLabel(groovyjarjarasm.asm.Label)>($r5);

        $r8 = <org.codehaus.groovy.ast.expr.ConstantExpression: org.codehaus.groovy.ast.expr.ConstantExpression TRUE>;

        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitConstantExpression(org.codehaus.groovy.ast.expr.ConstantExpression)>($r8);

        $r9 = new groovyjarjarasm.asm.Label;

        specialinvoke $r9.<groovyjarjarasm.asm.Label: void <init>()>();

        $r10 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r10.<groovyjarjarasm.asm.MethodVisitor: void visitJumpInsn(int,groovyjarjarasm.asm.Label)>(167, $r9);

        $r11 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r11.<groovyjarjarasm.asm.MethodVisitor: void visitLabel(groovyjarjarasm.asm.Label)>($r4);

        $r12 = new org.codehaus.groovy.ast.expr.BooleanExpression;

        $r13 = virtualinvoke r2.<org.codehaus.groovy.ast.expr.BinaryExpression: org.codehaus.groovy.ast.expr.Expression getRightExpression()>();

        specialinvoke $r12.<org.codehaus.groovy.ast.expr.BooleanExpression: void <init>(org.codehaus.groovy.ast.expr.Expression)>($r13);

        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitBooleanExpression(org.codehaus.groovy.ast.expr.BooleanExpression)>($r12);

        $r14 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r14.<groovyjarjarasm.asm.MethodVisitor: void visitJumpInsn(int,groovyjarjarasm.asm.Label)>(154, $r5);

        $r15 = <org.codehaus.groovy.ast.expr.ConstantExpression: org.codehaus.groovy.ast.expr.ConstantExpression FALSE>;

        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitConstantExpression(org.codehaus.groovy.ast.expr.ConstantExpression)>($r15);

        $r16 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r16.<groovyjarjarasm.asm.MethodVisitor: void visitLabel(groovyjarjarasm.asm.Label)>($r9);

        return;
    }

    protected void evaluateLogicalAndExpression(org.codehaus.groovy.ast.expr.BinaryExpression)
    {
        org.codehaus.groovy.ast.expr.BooleanExpression $r1, $r6;
        org.codehaus.groovy.classgen.AsmClassGenerator r0;
        org.codehaus.groovy.ast.expr.ConstantExpression $r9, $r13;
        groovyjarjarasm.asm.MethodVisitor $r5, $r8, $r11, $r12, $r14;
        org.codehaus.groovy.ast.expr.BinaryExpression r2;
        org.codehaus.groovy.ast.expr.Expression $r3, $r7;
        groovyjarjarasm.asm.Label $r4, $r10;

        r0 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r2 := @parameter0: org.codehaus.groovy.ast.expr.BinaryExpression;

        $r1 = new org.codehaus.groovy.ast.expr.BooleanExpression;

        $r3 = virtualinvoke r2.<org.codehaus.groovy.ast.expr.BinaryExpression: org.codehaus.groovy.ast.expr.Expression getLeftExpression()>();

        specialinvoke $r1.<org.codehaus.groovy.ast.expr.BooleanExpression: void <init>(org.codehaus.groovy.ast.expr.Expression)>($r3);

        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitBooleanExpression(org.codehaus.groovy.ast.expr.BooleanExpression)>($r1);

        $r4 = new groovyjarjarasm.asm.Label;

        specialinvoke $r4.<groovyjarjarasm.asm.Label: void <init>()>();

        $r5 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r5.<groovyjarjarasm.asm.MethodVisitor: void visitJumpInsn(int,groovyjarjarasm.asm.Label)>(153, $r4);

        $r6 = new org.codehaus.groovy.ast.expr.BooleanExpression;

        $r7 = virtualinvoke r2.<org.codehaus.groovy.ast.expr.BinaryExpression: org.codehaus.groovy.ast.expr.Expression getRightExpression()>();

        specialinvoke $r6.<org.codehaus.groovy.ast.expr.BooleanExpression: void <init>(org.codehaus.groovy.ast.expr.Expression)>($r7);

        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitBooleanExpression(org.codehaus.groovy.ast.expr.BooleanExpression)>($r6);

        $r8 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r8.<groovyjarjarasm.asm.MethodVisitor: void visitJumpInsn(int,groovyjarjarasm.asm.Label)>(153, $r4);

        $r9 = <org.codehaus.groovy.ast.expr.ConstantExpression: org.codehaus.groovy.ast.expr.ConstantExpression TRUE>;

        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitConstantExpression(org.codehaus.groovy.ast.expr.ConstantExpression)>($r9);

        $r10 = new groovyjarjarasm.asm.Label;

        specialinvoke $r10.<groovyjarjarasm.asm.Label: void <init>()>();

        $r11 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r11.<groovyjarjarasm.asm.MethodVisitor: void visitJumpInsn(int,groovyjarjarasm.asm.Label)>(167, $r10);

        $r12 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r12.<groovyjarjarasm.asm.MethodVisitor: void visitLabel(groovyjarjarasm.asm.Label)>($r4);

        $r13 = <org.codehaus.groovy.ast.expr.ConstantExpression: org.codehaus.groovy.ast.expr.ConstantExpression FALSE>;

        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitConstantExpression(org.codehaus.groovy.ast.expr.ConstantExpression)>($r13);

        $r14 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r14.<groovyjarjarasm.asm.MethodVisitor: void visitLabel(groovyjarjarasm.asm.Label)>($r10);

        return;
    }

    protected void evaluateBinaryExpression(java.lang.String, org.codehaus.groovy.ast.expr.BinaryExpression)
    {
        org.codehaus.groovy.classgen.MethodCallerMultiAdapter $r7;
        org.codehaus.groovy.classgen.AsmClassGenerator r0;
        org.codehaus.groovy.ast.expr.ArgumentListExpression $r5;
        org.codehaus.groovy.ast.expr.ConstantExpression $r3;
        org.codehaus.groovy.ast.expr.BinaryExpression r1;
        org.codehaus.groovy.ast.expr.Expression $r2, $r6;
        java.lang.String r4;

        r0 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r4 := @parameter0: java.lang.String;

        r1 := @parameter1: org.codehaus.groovy.ast.expr.BinaryExpression;

        $r2 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.BinaryExpression: org.codehaus.groovy.ast.expr.Expression getLeftExpression()>();

        $r3 = new org.codehaus.groovy.ast.expr.ConstantExpression;

        specialinvoke $r3.<org.codehaus.groovy.ast.expr.ConstantExpression: void <init>(java.lang.Object)>(r4);

        $r5 = new org.codehaus.groovy.ast.expr.ArgumentListExpression;

        $r6 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.BinaryExpression: org.codehaus.groovy.ast.expr.Expression getRightExpression()>();

        specialinvoke $r5.<org.codehaus.groovy.ast.expr.ArgumentListExpression: void <init>(org.codehaus.groovy.ast.expr.Expression)>($r6);

        $r7 = <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCallerMultiAdapter invokeMethod>;

        specialinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void makeCall(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.classgen.MethodCallerMultiAdapter,boolean,boolean,boolean)>($r2, $r3, $r5, $r7, 0, 0, 0);

        return;
    }

    protected void evaluateCompareTo(org.codehaus.groovy.ast.expr.BinaryExpression)
    {
        org.codehaus.groovy.classgen.AsmClassGenerator r2;
        org.codehaus.groovy.classgen.BytecodeHelper $r6, $r7;
        org.codehaus.groovy.classgen.MethodCaller $r5;
        groovyjarjarasm.asm.MethodVisitor $r4;
        org.codehaus.groovy.ast.expr.BinaryExpression r0;
        org.codehaus.groovy.ast.expr.Expression $r1, $r3;
        boolean $z0, $z1;

        r2 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.BinaryExpression;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.BinaryExpression: org.codehaus.groovy.ast.expr.Expression getLeftExpression()>();

        virtualinvoke $r1.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r2);

        $z0 = virtualinvoke r2.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean isComparisonExpression(org.codehaus.groovy.ast.expr.Expression)>($r1);

        if $z0 == 0 goto label1;

        $r7 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.BytecodeHelper helper>;

        virtualinvoke $r7.<org.codehaus.groovy.classgen.BytecodeHelper: void boxBoolean()>();

     label1:
        $r3 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.BinaryExpression: org.codehaus.groovy.ast.expr.Expression getRightExpression()>();

        virtualinvoke $r3.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r2);

        $z1 = virtualinvoke r2.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean isComparisonExpression(org.codehaus.groovy.ast.expr.Expression)>($r3);

        if $z1 == 0 goto label2;

        $r6 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.BytecodeHelper helper>;

        virtualinvoke $r6.<org.codehaus.groovy.classgen.BytecodeHelper: void boxBoolean()>();

     label2:
        $r5 = <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCaller compareToMethod>;

        $r4 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        virtualinvoke $r5.<org.codehaus.groovy.classgen.MethodCaller: void call(groovyjarjarasm.asm.MethodVisitor)>($r4);

        return;
    }

    protected void evaluateBinaryExpressionWithAssignment(java.lang.String, org.codehaus.groovy.ast.expr.BinaryExpression)
    {
        groovyjarjarasm.asm.MethodVisitor $r4, $r25, $r26;
        boolean $z0;
        org.codehaus.groovy.ast.expr.ArgumentListExpression $r33, $r36;
        org.codehaus.groovy.syntax.Token $r8, $r16;
        org.codehaus.groovy.classgen.CompileStack $r10, $r13, $r20, $r27, $r28, $r29;
        org.codehaus.groovy.ast.expr.BinaryExpression r0, r7, $r32;
        org.codehaus.groovy.classgen.AsmClassGenerator$14 $r30;
        org.codehaus.groovy.classgen.AsmClassGenerator$15 $r31;
        org.codehaus.groovy.classgen.AsmClassGenerator$16 $r35;
        org.codehaus.groovy.ast.expr.Expression[] $r24;
        int $i0, $i1, $i2, $i3, $i5, $i7;
        org.codehaus.groovy.ast.expr.MethodCallExpression $r34, $r37;
        org.codehaus.groovy.ast.expr.Expression $r1, $r9, $r12, $r19;
        java.lang.String r3;
        org.codehaus.groovy.ast.ClassNode $r5, $r6;
        org.codehaus.groovy.classgen.AsmClassGenerator r2;

        r2 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r3 := @parameter0: java.lang.String;

        r0 := @parameter1: org.codehaus.groovy.ast.expr.BinaryExpression;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.BinaryExpression: org.codehaus.groovy.ast.expr.Expression getLeftExpression()>();

        $z0 = $r1 instanceof org.codehaus.groovy.ast.expr.BinaryExpression;

        if $z0 == 0 goto label1;

        r7 = (org.codehaus.groovy.ast.expr.BinaryExpression) $r1;

        $r8 = virtualinvoke r7.<org.codehaus.groovy.ast.expr.BinaryExpression: org.codehaus.groovy.syntax.Token getOperation()>();

        $i0 = virtualinvoke $r8.<org.codehaus.groovy.syntax.Token: int getType()>();

        if $i0 != 30 goto label1;

        $r9 = virtualinvoke r7.<org.codehaus.groovy.ast.expr.BinaryExpression: org.codehaus.groovy.ast.expr.Expression getLeftExpression()>();

        virtualinvoke r2.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitAndAutoboxBoolean(org.codehaus.groovy.ast.expr.Expression)>($r9);

        $r10 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        $i1 = virtualinvoke $r10.<org.codehaus.groovy.classgen.CompileStack: int defineTemporaryVariable(java.lang.String,boolean)>("$object", 1);

        $r30 = new org.codehaus.groovy.classgen.AsmClassGenerator$14;

        specialinvoke $r30.<org.codehaus.groovy.classgen.AsmClassGenerator$14: void <init>(org.codehaus.groovy.classgen.AsmClassGenerator,int)>(r2, $i1);

        $r12 = virtualinvoke r7.<org.codehaus.groovy.ast.expr.BinaryExpression: org.codehaus.groovy.ast.expr.Expression getRightExpression()>();

        virtualinvoke r2.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitAndAutoboxBoolean(org.codehaus.groovy.ast.expr.Expression)>($r12);

        $r13 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        $i2 = virtualinvoke $r13.<org.codehaus.groovy.classgen.CompileStack: int defineTemporaryVariable(java.lang.String,boolean)>("$index", 1);

        $r31 = new org.codehaus.groovy.classgen.AsmClassGenerator$15;

        specialinvoke $r31.<org.codehaus.groovy.classgen.AsmClassGenerator$15: void <init>(org.codehaus.groovy.classgen.AsmClassGenerator,int)>(r2, $i2);

        $r32 = new org.codehaus.groovy.ast.expr.BinaryExpression;

        $i5 = (int) -1;

        $i7 = (int) -1;

        $r16 = staticinvoke <org.codehaus.groovy.syntax.Token: org.codehaus.groovy.syntax.Token newSymbol(int,int,int)>(30, $i5, $i7);

        specialinvoke $r32.<org.codehaus.groovy.ast.expr.BinaryExpression: void <init>(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.syntax.Token,org.codehaus.groovy.ast.expr.Expression)>($r30, $r16, $r31);

        virtualinvoke $r32.<org.codehaus.groovy.ast.expr.BinaryExpression: void setSourcePosition(org.codehaus.groovy.ast.ASTNode)>($r1);

        $r34 = new org.codehaus.groovy.ast.expr.MethodCallExpression;

        $r33 = new org.codehaus.groovy.ast.expr.ArgumentListExpression;

        $r19 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.BinaryExpression: org.codehaus.groovy.ast.expr.Expression getRightExpression()>();

        specialinvoke $r33.<org.codehaus.groovy.ast.expr.ArgumentListExpression: void <init>(org.codehaus.groovy.ast.expr.Expression)>($r19);

        specialinvoke $r34.<org.codehaus.groovy.ast.expr.MethodCallExpression: void <init>(org.codehaus.groovy.ast.expr.Expression,java.lang.String,org.codehaus.groovy.ast.expr.Expression)>($r32, r3, $r33);

        virtualinvoke $r34.<org.codehaus.groovy.ast.expr.MethodCallExpression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r2);

        $r20 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        $i3 = virtualinvoke $r20.<org.codehaus.groovy.classgen.CompileStack: int defineTemporaryVariable(java.lang.String,boolean)>("$result", 1);

        $r35 = new org.codehaus.groovy.classgen.AsmClassGenerator$16;

        specialinvoke $r35.<org.codehaus.groovy.classgen.AsmClassGenerator$16: void <init>(org.codehaus.groovy.classgen.AsmClassGenerator,int)>(r2, $i3);

        $r37 = new org.codehaus.groovy.ast.expr.MethodCallExpression;

        $r36 = new org.codehaus.groovy.ast.expr.ArgumentListExpression;

        $r24 = newarray (org.codehaus.groovy.ast.expr.Expression)[2];

        $r24[0] = $r31;

        $r24[1] = $r35;

        specialinvoke $r36.<org.codehaus.groovy.ast.expr.ArgumentListExpression: void <init>(org.codehaus.groovy.ast.expr.Expression[])>($r24);

        specialinvoke $r37.<org.codehaus.groovy.ast.expr.MethodCallExpression: void <init>(org.codehaus.groovy.ast.expr.Expression,java.lang.String,org.codehaus.groovy.ast.expr.Expression)>($r30, "putAt", $r36);

        virtualinvoke r2.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitMethodCallExpression(org.codehaus.groovy.ast.expr.MethodCallExpression)>($r37);

        $r25 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r25.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(87);

        $r26 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r26.<groovyjarjarasm.asm.MethodVisitor: void visitVarInsn(int,int)>(25, $i3);

        $r27 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        virtualinvoke $r27.<org.codehaus.groovy.classgen.CompileStack: void removeVar(int)>($i3);

        $r28 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        virtualinvoke $r28.<org.codehaus.groovy.classgen.CompileStack: void removeVar(int)>($i2);

        $r29 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        virtualinvoke $r29.<org.codehaus.groovy.classgen.CompileStack: void removeVar(int)>($i1);

        return;

     label1:
        virtualinvoke r2.<org.codehaus.groovy.classgen.AsmClassGenerator: void evaluateBinaryExpression(java.lang.String,org.codehaus.groovy.ast.expr.BinaryExpression)>(r3, r0);

        $r4 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r4.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(89);

        $r5 = virtualinvoke $r1.<org.codehaus.groovy.ast.expr.Expression: org.codehaus.groovy.ast.ClassNode getType()>();

        $r6 = staticinvoke <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode getWrapper(org.codehaus.groovy.ast.ClassNode)>($r5);

        virtualinvoke r2.<org.codehaus.groovy.classgen.AsmClassGenerator: void doConvertAndCast(org.codehaus.groovy.ast.ClassNode)>($r6);

        r2.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean leftHandExpression> = 1;

        virtualinvoke r2.<org.codehaus.groovy.classgen.AsmClassGenerator: void evaluateExpression(org.codehaus.groovy.ast.expr.Expression)>($r1);

        r2.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean leftHandExpression> = 0;

        return;
    }

    private void evaluateBinaryExpression(org.codehaus.groovy.classgen.MethodCaller, org.codehaus.groovy.ast.expr.BinaryExpression)
    {
        org.codehaus.groovy.ast.expr.BinaryExpression r0;
        org.codehaus.groovy.classgen.AsmClassGenerator r3;
        org.codehaus.groovy.ast.expr.Expression $r1, $r2;
        org.codehaus.groovy.classgen.MethodCaller r4;
        groovyjarjarasm.asm.MethodVisitor $r5;

        r3 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r4 := @parameter0: org.codehaus.groovy.classgen.MethodCaller;

        r0 := @parameter1: org.codehaus.groovy.ast.expr.BinaryExpression;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.BinaryExpression: org.codehaus.groovy.ast.expr.Expression getLeftExpression()>();

        $r2 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.BinaryExpression: org.codehaus.groovy.ast.expr.Expression getRightExpression()>();

        specialinvoke r3.<org.codehaus.groovy.classgen.AsmClassGenerator: void load(org.codehaus.groovy.ast.expr.Expression)>($r1);

        specialinvoke r3.<org.codehaus.groovy.classgen.AsmClassGenerator: void load(org.codehaus.groovy.ast.expr.Expression)>($r2);

        $r5 = r3.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        virtualinvoke r4.<org.codehaus.groovy.classgen.MethodCaller: void call(groovyjarjarasm.asm.MethodVisitor)>($r5);

        return;
    }

    protected void evaluateEqual(org.codehaus.groovy.ast.expr.BinaryExpression)
    {
        org.codehaus.groovy.ast.expr.Expression[] $r15;
        groovyjarjarasm.asm.MethodVisitor $r17, $r18, $r21;
        int $i0, $i1;
        org.codehaus.groovy.ast.expr.MethodCallExpression $r12;
        org.codehaus.groovy.ast.expr.Expression $r1, $r2, $r8, $r13, $r16;
        boolean $z0, $z1, $z2;
        org.codehaus.groovy.ast.ClassNode $r4, $r5, $r10, $r22;
        org.codehaus.groovy.classgen.AsmClassGenerator r3;
        org.codehaus.groovy.ast.expr.ArgumentListExpression $r14;
        org.codehaus.groovy.syntax.Token $r7;
        org.codehaus.groovy.classgen.CompileStack $r9, $r19;
        org.codehaus.groovy.ast.expr.BinaryExpression r0, r20;
        org.codehaus.groovy.ast.expr.CastExpression $r6;
        org.codehaus.groovy.classgen.AsmClassGenerator$17 $r11;

        r3 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.BinaryExpression;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.BinaryExpression: org.codehaus.groovy.ast.expr.Expression getLeftExpression()>();

        $z0 = $r1 instanceof org.codehaus.groovy.ast.expr.BinaryExpression;

        if $z0 == 0 goto label1;

        r20 = (org.codehaus.groovy.ast.expr.BinaryExpression) $r1;

        $r7 = virtualinvoke r20.<org.codehaus.groovy.ast.expr.BinaryExpression: org.codehaus.groovy.syntax.Token getOperation()>();

        $i0 = virtualinvoke $r7.<org.codehaus.groovy.syntax.Token: int getType()>();

        if $i0 != 30 goto label1;

        $r8 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.BinaryExpression: org.codehaus.groovy.ast.expr.Expression getRightExpression()>();

        virtualinvoke r3.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitAndAutoboxBoolean(org.codehaus.groovy.ast.expr.Expression)>($r8);

        $r9 = r3.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        $r10 = virtualinvoke $r8.<org.codehaus.groovy.ast.expr.Expression: org.codehaus.groovy.ast.ClassNode getType()>();

        $i1 = virtualinvoke $r9.<org.codehaus.groovy.classgen.CompileStack: int defineTemporaryVariable(java.lang.String,org.codehaus.groovy.ast.ClassNode,boolean)>("$rhs", $r10, 1);

        $r11 = new org.codehaus.groovy.classgen.AsmClassGenerator$17;

        specialinvoke $r11.<org.codehaus.groovy.classgen.AsmClassGenerator$17: void <init>(org.codehaus.groovy.classgen.AsmClassGenerator,int)>(r3, $i1);

        $r12 = new org.codehaus.groovy.ast.expr.MethodCallExpression;

        $r13 = virtualinvoke r20.<org.codehaus.groovy.ast.expr.BinaryExpression: org.codehaus.groovy.ast.expr.Expression getLeftExpression()>();

        $r14 = new org.codehaus.groovy.ast.expr.ArgumentListExpression;

        $r15 = newarray (org.codehaus.groovy.ast.expr.Expression)[2];

        $r16 = virtualinvoke r20.<org.codehaus.groovy.ast.expr.BinaryExpression: org.codehaus.groovy.ast.expr.Expression getRightExpression()>();

        $r15[0] = $r16;

        $r15[1] = $r11;

        specialinvoke $r14.<org.codehaus.groovy.ast.expr.ArgumentListExpression: void <init>(org.codehaus.groovy.ast.expr.Expression[])>($r15);

        specialinvoke $r12.<org.codehaus.groovy.ast.expr.MethodCallExpression: void <init>(org.codehaus.groovy.ast.expr.Expression,java.lang.String,org.codehaus.groovy.ast.expr.Expression)>($r13, "putAt", $r14);

        virtualinvoke r3.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitMethodCallExpression(org.codehaus.groovy.ast.expr.MethodCallExpression)>($r12);

        $r17 = r3.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r17.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(87);

        $r18 = r3.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r18.<groovyjarjarasm.asm.MethodVisitor: void visitVarInsn(int,int)>(25, $i1);

        $r19 = r3.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        virtualinvoke $r19.<org.codehaus.groovy.classgen.CompileStack: void removeVar(int)>($i1);

        return;

     label1:
        $r2 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.BinaryExpression: org.codehaus.groovy.ast.expr.Expression getRightExpression()>();

        $r4 = virtualinvoke r3.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode getLHSType(org.codehaus.groovy.ast.expr.Expression)>($r1);

        $z1 = staticinvoke <org.codehaus.groovy.ast.ClassHelper: boolean isPrimitiveType(org.codehaus.groovy.ast.ClassNode)>($r4);

        if $z1 == 0 goto label2;

        virtualinvoke r3.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitAndAutoboxBoolean(org.codehaus.groovy.ast.expr.Expression)>($r2);

        goto label4;

     label2:
        $r5 = virtualinvoke $r2.<org.codehaus.groovy.ast.expr.Expression: org.codehaus.groovy.ast.ClassNode getType()>();

        $z2 = virtualinvoke $r5.<org.codehaus.groovy.ast.ClassNode: boolean isDerivedFrom(org.codehaus.groovy.ast.ClassNode)>($r4);

        if $z2 != 0 goto label3;

        $r6 = new org.codehaus.groovy.ast.expr.CastExpression;

        specialinvoke $r6.<org.codehaus.groovy.ast.expr.CastExpression: void <init>(org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.expr.Expression)>($r4, $r2);

        virtualinvoke r3.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitCastExpression(org.codehaus.groovy.ast.expr.CastExpression)>($r6);

        goto label4;

     label3:
        virtualinvoke r3.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitAndAutoboxBoolean(org.codehaus.groovy.ast.expr.Expression)>($r2);

     label4:
        $r21 = r3.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r21.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(89);

        r3.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean leftHandExpression> = 1;

        $r22 = virtualinvoke $r2.<org.codehaus.groovy.ast.expr.Expression: org.codehaus.groovy.ast.ClassNode getType()>();

        r3.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode rightHandType> = $r22;

        virtualinvoke $r1.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r3);

        r3.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode rightHandType> = null;

        r3.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean leftHandExpression> = 0;

        return;
    }

    protected org.codehaus.groovy.ast.ClassNode getLHSType(org.codehaus.groovy.ast.expr.Expression)
    {
        org.codehaus.groovy.classgen.Variable $r6;
        org.codehaus.groovy.ast.expr.Expression r0;
        java.lang.String $r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        org.codehaus.groovy.ast.expr.VariableExpression r13;
        org.codehaus.groovy.ast.ClassNode $r1, $r3, $r7, $r9, $r10, $r11, $r12, $r16;
        org.codehaus.groovy.classgen.AsmClassGenerator r2;
        org.codehaus.groovy.classgen.CompileStack $r5;
        org.codehaus.groovy.ast.expr.FieldExpression r15;
        org.codehaus.groovy.ast.FieldNode $r8, r14;

        r2 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.Expression;

        $z0 = r0 instanceof org.codehaus.groovy.ast.expr.VariableExpression;

        if $z0 == 0 goto label7;

        r13 = (org.codehaus.groovy.ast.expr.VariableExpression) r0;

        $r3 = virtualinvoke r13.<org.codehaus.groovy.ast.expr.VariableExpression: org.codehaus.groovy.ast.ClassNode getType()>();

        $z3 = virtualinvoke r2.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean isValidTypeForCast(org.codehaus.groovy.ast.ClassNode)>($r3);

        if $z3 == 0 goto label1;

        return $r3;

     label1:
        $r4 = virtualinvoke r13.<org.codehaus.groovy.ast.expr.VariableExpression: java.lang.String getName()>();

        $r5 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        $r6 = virtualinvoke $r5.<org.codehaus.groovy.classgen.CompileStack: org.codehaus.groovy.classgen.Variable getVariable(java.lang.String,boolean)>($r4, 0);

        if $r6 == null goto label4;

        $z6 = virtualinvoke $r6.<org.codehaus.groovy.classgen.Variable: boolean isHolder()>();

        if $z6 == 0 goto label2;

        return $r3;

     label2:
        $z7 = virtualinvoke $r6.<org.codehaus.groovy.classgen.Variable: boolean isProperty()>();

        if $z7 == 0 goto label3;

        $r12 = virtualinvoke $r6.<org.codehaus.groovy.classgen.Variable: org.codehaus.groovy.ast.ClassNode getType()>();

        return $r12;

     label3:
        $r11 = virtualinvoke $r6.<org.codehaus.groovy.classgen.Variable: org.codehaus.groovy.ast.ClassNode getType()>();

        $z8 = virtualinvoke r2.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean isValidTypeForCast(org.codehaus.groovy.ast.ClassNode)>($r11);

        if $z8 == 0 goto label6;

        return $r11;

     label4:
        $r7 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode classNode>;

        $r8 = virtualinvoke $r7.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.FieldNode getDeclaredField(java.lang.String)>($r4);

        r14 = $r8;

        if $r8 != null goto label5;

        $r10 = r2.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode classNode>;

        r14 = virtualinvoke $r10.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.FieldNode getOuterField(java.lang.String)>($r4);

     label5:
        if r14 == null goto label6;

        $r9 = virtualinvoke r14.<org.codehaus.groovy.ast.FieldNode: org.codehaus.groovy.ast.ClassNode getType()>();

        $z4 = virtualinvoke r14.<org.codehaus.groovy.ast.FieldNode: boolean isHolder()>();

        if $z4 != 0 goto label6;

        $z5 = virtualinvoke r2.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean isValidTypeForCast(org.codehaus.groovy.ast.ClassNode)>($r9);

        if $z5 == 0 goto label6;

        return $r9;

     label6:
        goto label8;

     label7:
        $z1 = r0 instanceof org.codehaus.groovy.ast.expr.FieldExpression;

        if $z1 == 0 goto label8;

        r15 = (org.codehaus.groovy.ast.expr.FieldExpression) r0;

        $r1 = virtualinvoke r15.<org.codehaus.groovy.ast.expr.FieldExpression: org.codehaus.groovy.ast.ClassNode getType()>();

        $z2 = virtualinvoke r2.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean isValidTypeForCast(org.codehaus.groovy.ast.ClassNode)>($r1);

        if $z2 == 0 goto label8;

        return $r1;

     label8:
        $r16 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode DYNAMIC_TYPE>;

        return $r16;
    }

    protected boolean isValidTypeForCast(org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.ast.ClassNode r0, $r1, $r2;
        org.codehaus.groovy.classgen.AsmClassGenerator r3;
        boolean $z0;

        r3 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r0 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        $r1 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode DYNAMIC_TYPE>;

        if r0 == $r1 goto label1;

        $r2 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode REFERENCE_TYPE>;

        if r0 == $r2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected void visitAndAutoboxBoolean(org.codehaus.groovy.ast.expr.Expression)
    {
        org.codehaus.groovy.classgen.AsmClassGenerator r1;
        org.codehaus.groovy.classgen.BytecodeHelper $r2;
        org.codehaus.groovy.ast.expr.Expression r0;
        boolean $z0;

        r1 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.Expression;

        virtualinvoke r0.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r1);

        $z0 = virtualinvoke r1.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean isComparisonExpression(org.codehaus.groovy.ast.expr.Expression)>(r0);

        if $z0 == 0 goto label1;

        $r2 = r1.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.BytecodeHelper helper>;

        virtualinvoke $r2.<org.codehaus.groovy.classgen.BytecodeHelper: void boxBoolean()>();

     label1:
        return;
    }

    private void execMethodAndStoreForSubscriptOperator(java.lang.String, org.codehaus.groovy.ast.expr.Expression)
    {
        org.codehaus.groovy.classgen.MethodCallerMultiAdapter $r4, $r19;
        org.codehaus.groovy.ast.expr.ConstantExpression $r2, $r18;
        groovyjarjarasm.asm.MethodVisitor $r8, $r20, $r22;
        java.lang.StringBuffer $r9, $r11, $r12;
        int $i0, $i1;
        org.codehaus.groovy.ast.expr.Expression r1, $r5, $r16, $r17;
        java.lang.String r3, $r13;
        boolean $z0, $z1, $z2, $z3;
        org.codehaus.groovy.classgen.AsmClassGenerator r0;
        org.codehaus.groovy.ast.expr.ArgumentListExpression $r15;
        org.codehaus.groovy.syntax.Token $r7;
        org.codehaus.groovy.classgen.CompileStack $r10, $r21;
        org.codehaus.groovy.ast.expr.BinaryExpression r6;
        org.codehaus.groovy.classgen.AsmClassGenerator$18 $r14;

        r0 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r3 := @parameter0: java.lang.String;

        r1 := @parameter1: org.codehaus.groovy.ast.expr.Expression;

        $r2 = new org.codehaus.groovy.ast.expr.ConstantExpression;

        specialinvoke $r2.<org.codehaus.groovy.ast.expr.ConstantExpression: void <init>(java.lang.Object)>(r3);

        $r5 = <org.codehaus.groovy.ast.expr.MethodCallExpression: org.codehaus.groovy.ast.expr.Expression NO_ARGUMENTS>;

        $r4 = <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCallerMultiAdapter invokeMethod>;

        specialinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void makeCall(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.classgen.MethodCallerMultiAdapter,boolean,boolean,boolean)>(r1, $r2, $r5, $r4, 0, 0, 0);

        $z0 = r1 instanceof org.codehaus.groovy.ast.expr.BinaryExpression;

        if $z0 == 0 goto label1;

        r6 = (org.codehaus.groovy.ast.expr.BinaryExpression) r1;

        $r7 = virtualinvoke r6.<org.codehaus.groovy.ast.expr.BinaryExpression: org.codehaus.groovy.syntax.Token getOperation()>();

        $i0 = virtualinvoke $r7.<org.codehaus.groovy.syntax.Token: int getType()>();

        if $i0 != 30 goto label1;

        $r8 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r8.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(89);

        $r10 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("postfix_");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        $i1 = virtualinvoke $r10.<org.codehaus.groovy.classgen.CompileStack: int defineTemporaryVariable(java.lang.String,boolean)>($r13, 1);

        $r14 = new org.codehaus.groovy.classgen.AsmClassGenerator$18;

        specialinvoke $r14.<org.codehaus.groovy.classgen.AsmClassGenerator$18: void <init>(org.codehaus.groovy.classgen.AsmClassGenerator,int)>(r0, $i1);

        $r15 = new org.codehaus.groovy.ast.expr.ArgumentListExpression;

        specialinvoke $r15.<org.codehaus.groovy.ast.expr.ArgumentListExpression: void <init>()>();

        $r16 = virtualinvoke r6.<org.codehaus.groovy.ast.expr.BinaryExpression: org.codehaus.groovy.ast.expr.Expression getRightExpression()>();

        virtualinvoke $r15.<org.codehaus.groovy.ast.expr.TupleExpression: org.codehaus.groovy.ast.expr.TupleExpression addExpression(org.codehaus.groovy.ast.expr.Expression)>($r16);

        virtualinvoke $r15.<org.codehaus.groovy.ast.expr.TupleExpression: org.codehaus.groovy.ast.expr.TupleExpression addExpression(org.codehaus.groovy.ast.expr.Expression)>($r14);

        $r17 = virtualinvoke r6.<org.codehaus.groovy.ast.expr.BinaryExpression: org.codehaus.groovy.ast.expr.Expression getLeftExpression()>();

        $r18 = new org.codehaus.groovy.ast.expr.ConstantExpression;

        specialinvoke $r18.<org.codehaus.groovy.ast.expr.ConstantExpression: void <init>(java.lang.Object)>("putAt");

        $r19 = <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCallerMultiAdapter invokeMethod>;

        specialinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void makeCall(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.classgen.MethodCallerMultiAdapter,boolean,boolean,boolean)>($r17, $r18, $r15, $r19, 0, 0, 0);

        $r20 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r20.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(87);

        $r21 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        virtualinvoke $r21.<org.codehaus.groovy.classgen.CompileStack: void removeVar(int)>($i1);

     label1:
        $z3 = r1 instanceof org.codehaus.groovy.ast.expr.VariableExpression;

        if $z3 != 0 goto label2;

        $z1 = r1 instanceof org.codehaus.groovy.ast.expr.FieldExpression;

        if $z1 != 0 goto label2;

        $z2 = r1 instanceof org.codehaus.groovy.ast.expr.PropertyExpression;

        if $z2 == 0 goto label3;

     label2:
        $r22 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r22.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(89);

        r0.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean leftHandExpression> = 1;

        virtualinvoke r1.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r0);

        r0.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean leftHandExpression> = 0;

     label3:
        return;
    }

    protected void evaluatePrefixMethod(java.lang.String, org.codehaus.groovy.ast.expr.Expression)
    {
        org.codehaus.groovy.classgen.AsmClassGenerator r0;
        java.lang.String r1;
        org.codehaus.groovy.ast.expr.Expression r2;

        r0 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.codehaus.groovy.ast.expr.Expression;

        specialinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void execMethodAndStoreForSubscriptOperator(java.lang.String,org.codehaus.groovy.ast.expr.Expression)>(r1, r2);

        return;
    }

    protected void evaluatePostfixMethod(java.lang.String, org.codehaus.groovy.ast.expr.Expression)
    {
        org.codehaus.groovy.classgen.AsmClassGenerator r1;
        groovyjarjarasm.asm.MethodVisitor $r8, $r9;
        org.codehaus.groovy.classgen.CompileStack $r3, $r10;
        java.lang.StringBuffer $r2, $r4, $r6;
        int $i0;
        org.codehaus.groovy.ast.expr.Expression r0;
        java.lang.String r5, $r7;

        r1 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r5 := @parameter0: java.lang.String;

        r0 := @parameter1: org.codehaus.groovy.ast.expr.Expression;

        virtualinvoke r0.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r1);

        $r3 = r1.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("postfix_");

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        $i0 = virtualinvoke $r3.<org.codehaus.groovy.classgen.CompileStack: int defineTemporaryVariable(java.lang.String,boolean)>($r7, 1);

        specialinvoke r1.<org.codehaus.groovy.classgen.AsmClassGenerator: void execMethodAndStoreForSubscriptOperator(java.lang.String,org.codehaus.groovy.ast.expr.Expression)>(r5, r0);

        $r8 = r1.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r8.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(87);

        $r9 = r1.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r9.<groovyjarjarasm.asm.MethodVisitor: void visitVarInsn(int,int)>(25, $i0);

        $r10 = r1.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        virtualinvoke $r10.<org.codehaus.groovy.classgen.CompileStack: void removeVar(int)>($i0);

        return;
    }

    protected void evaluateInstanceof(org.codehaus.groovy.ast.expr.BinaryExpression)
    {
        org.codehaus.groovy.ast.ClassNode $r9, r12;
        org.codehaus.groovy.classgen.AsmClassGenerator r0;
        java.lang.RuntimeException $r4;
        groovyjarjarasm.asm.MethodVisitor $r11;
        org.codehaus.groovy.ast.expr.ClassExpression r13;
        org.codehaus.groovy.ast.expr.BinaryExpression r1;
        java.lang.StringBuffer $r5, $r6, $r7;
        org.codehaus.groovy.ast.expr.Expression $r2, $r3;
        java.lang.String $r8, $r10;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.BinaryExpression;

        $r2 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.BinaryExpression: org.codehaus.groovy.ast.expr.Expression getLeftExpression()>();

        virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: void visitAndAutoboxBoolean(org.codehaus.groovy.ast.expr.Expression)>($r2);

        $r3 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.BinaryExpression: org.codehaus.groovy.ast.expr.Expression getRightExpression()>();

        r12 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode DYNAMIC_TYPE>;

        $z0 = $r3 instanceof org.codehaus.groovy.ast.expr.ClassExpression;

        if $z0 == 0 goto label1;

        r13 = (org.codehaus.groovy.ast.expr.ClassExpression) $r3;

        $r9 = virtualinvoke r13.<org.codehaus.groovy.ast.expr.ClassExpression: org.codehaus.groovy.ast.ClassNode getType()>();

        goto label2;

     label1:
        $r4 = new java.lang.RuntimeException;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Right hand side of the instanceof keyword must be a class name, not: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r3);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label2:
        $r10 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getClassInternalName(org.codehaus.groovy.ast.ClassNode)>($r9);

        $r11 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r11.<groovyjarjarasm.asm.MethodVisitor: void visitTypeInsn(int,java.lang.String)>(193, $r10);

        return;
    }

    protected boolean argumentsUseStack(org.codehaus.groovy.ast.expr.Expression)
    {
        org.codehaus.groovy.classgen.AsmClassGenerator r1;
        org.codehaus.groovy.ast.expr.Expression r0;
        boolean $z0, $z1, $z2;

        r1 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.Expression;

        $z0 = r0 instanceof org.codehaus.groovy.ast.expr.TupleExpression;

        if $z0 != 0 goto label1;

        $z1 = r0 instanceof org.codehaus.groovy.ast.expr.ClosureExpression;

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    protected boolean isNonStaticField(org.codehaus.groovy.ast.expr.Expression)
    {
        org.codehaus.groovy.ast.expr.PropertyExpression r14;
        org.codehaus.groovy.ast.expr.Expression r0;
        java.lang.String $r3, $r7, $r9;
        boolean $z0, $z1, $z2, $z3;
        org.codehaus.groovy.ast.expr.VariableExpression r11;
        org.codehaus.groovy.ast.ClassNode $r5, $r6, $r8;
        org.codehaus.groovy.classgen.AsmClassGenerator r4;
        org.codehaus.groovy.ast.expr.FieldExpression r12;
        org.codehaus.groovy.ast.FieldNode r10;
        java.lang.Class $r1, $r2, $r13;

        r4 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.Expression;

        r10 = null;

        $z0 = r0 instanceof org.codehaus.groovy.ast.expr.VariableExpression;

        if $z0 == 0 goto label1;

        r11 = (org.codehaus.groovy.ast.expr.VariableExpression) r0;

        $r8 = r4.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode classNode>;

        $r9 = virtualinvoke r11.<org.codehaus.groovy.ast.expr.VariableExpression: java.lang.String getName()>();

        r10 = virtualinvoke $r8.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.FieldNode getDeclaredField(java.lang.String)>($r9);

        goto label5;

     label1:
        $z1 = r0 instanceof org.codehaus.groovy.ast.expr.FieldExpression;

        if $z1 == 0 goto label2;

        r12 = (org.codehaus.groovy.ast.expr.FieldExpression) r0;

        $r6 = r4.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode classNode>;

        $r7 = virtualinvoke r12.<org.codehaus.groovy.ast.expr.FieldExpression: java.lang.String getFieldName()>();

        r10 = virtualinvoke $r6.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.FieldNode getDeclaredField(java.lang.String)>($r7);

        goto label5;

     label2:
        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$ast$expr$PropertyExpression>;

        if $r2 != null goto label3;

        $r13 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.ast.expr.PropertyExpression");

        <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$ast$expr$PropertyExpression> = $r13;

        goto label4;

     label3:
        $r13 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$ast$expr$PropertyExpression>;

     label4:
        if $r1 != $r13 goto label5;

        r14 = (org.codehaus.groovy.ast.expr.PropertyExpression) r0;

        $r3 = virtualinvoke r14.<org.codehaus.groovy.ast.expr.PropertyExpression: java.lang.String getPropertyAsString()>();

        if $r3 == null goto label5;

        $r5 = r4.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode classNode>;

        r10 = virtualinvoke $r5.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.FieldNode getDeclaredField(java.lang.String)>($r3);

     label5:
        if r10 == null goto label6;

        $z2 = virtualinvoke r10.<org.codehaus.groovy.ast.FieldNode: boolean isStatic()>();

        if $z2 != 0 goto label6;

        $z3 = 1;

        goto label7;

     label6:
        $z3 = 0;

     label7:
        return $z3;
    }

    private static boolean isThisExpression(org.codehaus.groovy.ast.expr.Expression)
    {
        org.codehaus.groovy.ast.expr.VariableExpression r1;
        org.codehaus.groovy.ast.expr.Expression r0;
        java.lang.String $r2;
        boolean $z0, $z1;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.Expression;

        $z0 = r0 instanceof org.codehaus.groovy.ast.expr.VariableExpression;

        if $z0 == 0 goto label1;

        r1 = (org.codehaus.groovy.ast.expr.VariableExpression) r0;

        $r2 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.VariableExpression: java.lang.String getName()>();

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("this");

        return $z1;

     label1:
        return 0;
    }

    private static boolean isSuperExpression(org.codehaus.groovy.ast.expr.Expression)
    {
        org.codehaus.groovy.ast.expr.VariableExpression r1;
        org.codehaus.groovy.ast.expr.Expression r0;
        java.lang.String $r2;
        boolean $z0, $z1;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.Expression;

        $z0 = r0 instanceof org.codehaus.groovy.ast.expr.VariableExpression;

        if $z0 == 0 goto label1;

        r1 = (org.codehaus.groovy.ast.expr.VariableExpression) r0;

        $r2 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.VariableExpression: java.lang.String getName()>();

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("super");

        return $z1;

     label1:
        return 0;
    }

    private static boolean isThisOrSuper(org.codehaus.groovy.ast.expr.Expression)
    {
        org.codehaus.groovy.ast.expr.Expression r0;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.Expression;

        $z0 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: boolean isThisExpression(org.codehaus.groovy.ast.expr.Expression)>(r0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: boolean isSuperExpression(org.codehaus.groovy.ast.expr.Expression)>(r0);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    protected org.codehaus.groovy.ast.expr.Expression createReturnLHSExpression(org.codehaus.groovy.ast.expr.Expression)
    {
        org.codehaus.groovy.classgen.AsmClassGenerator r3;
        org.codehaus.groovy.syntax.Token $r2;
        org.codehaus.groovy.ast.expr.BinaryExpression r1;
        org.codehaus.groovy.ast.expr.Expression r0, $r4, $r5;
        boolean $z0, $z1;

        r3 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.Expression;

        $z0 = r0 instanceof org.codehaus.groovy.ast.expr.BinaryExpression;

        if $z0 == 0 goto label1;

        r1 = (org.codehaus.groovy.ast.expr.BinaryExpression) r0;

        $r2 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.BinaryExpression: org.codehaus.groovy.syntax.Token getOperation()>();

        $z1 = virtualinvoke $r2.<org.codehaus.groovy.syntax.Token: boolean isA(int)>(1100);

        if $z1 == 0 goto label1;

        $r4 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.BinaryExpression: org.codehaus.groovy.ast.expr.Expression getLeftExpression()>();

        $r5 = virtualinvoke r3.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.expr.Expression createReusableExpression(org.codehaus.groovy.ast.expr.Expression)>($r4);

        return $r5;

     label1:
        return null;
    }

    protected org.codehaus.groovy.ast.expr.Expression createReusableExpression(org.codehaus.groovy.ast.expr.Expression)
    {
        org.codehaus.groovy.classgen.AsmClassGenerator$19 $r0;
        org.codehaus.groovy.classgen.AsmClassGenerator r1;
        org.codehaus.groovy.ast.expr.Expression r2, $r3, $r4;

        r1 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r2 := @parameter0: org.codehaus.groovy.ast.expr.Expression;

        $r0 = new org.codehaus.groovy.classgen.AsmClassGenerator$19;

        specialinvoke $r0.<org.codehaus.groovy.classgen.AsmClassGenerator$19: void <init>(org.codehaus.groovy.classgen.AsmClassGenerator)>(r1);

        $r3 = virtualinvoke r2.<org.codehaus.groovy.ast.expr.Expression: org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer)>($r0);

        $r4 = interfaceinvoke $r0.<org.codehaus.groovy.ast.expr.ExpressionTransformer: org.codehaus.groovy.ast.expr.Expression transform(org.codehaus.groovy.ast.expr.Expression)>($r3);

        return $r4;
    }

    protected boolean isComparisonExpression(org.codehaus.groovy.ast.expr.Expression)
    {
        org.codehaus.groovy.ast.expr.BinaryExpression r1;
        int $i0;
        org.codehaus.groovy.classgen.AsmClassGenerator r3;
        org.codehaus.groovy.ast.expr.Expression r0;
        org.codehaus.groovy.syntax.Token $r2;
        boolean $z0, $z1;

        r3 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.Expression;

        $z0 = r0 instanceof org.codehaus.groovy.ast.expr.BinaryExpression;

        if $z0 == 0 goto label3;

        r1 = (org.codehaus.groovy.ast.expr.BinaryExpression) r0;

        $r2 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.BinaryExpression: org.codehaus.groovy.syntax.Token getOperation()>();

        $i0 = virtualinvoke $r2.<org.codehaus.groovy.syntax.Token: int getType()>();

        lookupswitch($i0)
        {
            case 94: goto label1;
            case 120: goto label1;
            case 121: goto label1;
            case 123: goto label1;
            case 124: goto label1;
            case 125: goto label1;
            case 126: goto label1;
            case 127: goto label1;
            case 544: goto label1;
            case 573: goto label1;
            default: goto label2;
        };

     label1:
        return 1;

     label2:
        goto label4;

     label3:
        $z1 = r0 instanceof org.codehaus.groovy.ast.expr.BooleanExpression;

        if $z1 == 0 goto label4;

        return 1;

     label4:
        return 0;
    }

    protected void onLineNumber(org.codehaus.groovy.ast.ASTNode, java.lang.String)
    {
        org.codehaus.groovy.classgen.AsmClassGenerator r1;
        groovyjarjarasm.asm.MethodVisitor $r2, $r4, $r5;
        org.codehaus.groovy.ast.ASTNode r0;
        int $i0, $i1;
        java.lang.String r6;
        groovyjarjarasm.asm.Label $r3;

        r1 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r0 := @parameter0: org.codehaus.groovy.ast.ASTNode;

        r6 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        return;

     label1:
        $i0 = virtualinvoke r0.<org.codehaus.groovy.ast.ASTNode: int getLineNumber()>();

        $i1 = virtualinvoke r0.<org.codehaus.groovy.ast.ASTNode: int getColumnNumber()>();

        r1.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ASTNode currentASTNode> = r0;

        if $i0 < 0 goto label2;

        r1.<org.codehaus.groovy.classgen.AsmClassGenerator: int lineNumber> = $i0;

        r1.<org.codehaus.groovy.classgen.AsmClassGenerator: int columnNumber> = $i1;

     label2:
        if $i0 < 0 goto label3;

        $r2 = r1.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        if $r2 == null goto label3;

        $r3 = new groovyjarjarasm.asm.Label;

        specialinvoke $r3.<groovyjarjarasm.asm.Label: void <init>()>();

        $r4 = r1.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r4.<groovyjarjarasm.asm.MethodVisitor: void visitLabel(groovyjarjarasm.asm.Label)>($r3);

        $r5 = r1.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r5.<groovyjarjarasm.asm.MethodVisitor: void visitLineNumber(int,groovyjarjarasm.asm.Label)>($i0, $r3);

     label3:
        return;
    }

    private boolean isInnerClass()
    {
        org.codehaus.groovy.classgen.AsmClassGenerator r0;
        org.codehaus.groovy.ast.ClassNode $r1;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        $r1 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode classNode>;

        $z0 = $r1 instanceof org.codehaus.groovy.ast.InnerClassNode;

        return $z0;
    }

    protected boolean isFieldOrVariable(java.lang.String)
    {
        org.codehaus.groovy.classgen.CompileStack $r2;
        org.codehaus.groovy.ast.ClassNode $r3;
        org.codehaus.groovy.ast.FieldNode $r4;
        org.codehaus.groovy.classgen.AsmClassGenerator r0;
        java.lang.String r1;
        boolean $z0, $z1;

        r0 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        $z0 = virtualinvoke $r2.<org.codehaus.groovy.classgen.CompileStack: boolean containsVariable(java.lang.String)>(r1);

        if $z0 != 0 goto label1;

        $r3 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode classNode>;

        $r4 = virtualinvoke $r3.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.FieldNode getDeclaredField(java.lang.String)>(r1);

        if $r4 == null goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    protected org.codehaus.groovy.ast.ClassNode getExpressionType(org.codehaus.groovy.ast.expr.Expression)
    {
        org.codehaus.groovy.ast.VariableScope $r9;
        org.codehaus.groovy.ast.Variable $r11;
        org.codehaus.groovy.classgen.Variable $r7;
        org.codehaus.groovy.ast.expr.Expression r1;
        java.lang.String $r6, $r10;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.codehaus.groovy.ast.expr.VariableExpression $r2, $r3, r4;
        org.codehaus.groovy.ast.ClassNode $r12, $r13, $r14, $r15, $r16, $r17, $r18;
        org.codehaus.groovy.classgen.AsmClassGenerator r0;
        org.codehaus.groovy.classgen.CompileStack $r5, $r8;

        r0 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.Expression;

        $z0 = virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean isComparisonExpression(org.codehaus.groovy.ast.expr.Expression)>(r1);

        if $z0 == 0 goto label1;

        $r17 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode boolean_TYPE>;

        return $r17;

     label1:
        $z1 = r1 instanceof org.codehaus.groovy.ast.expr.VariableExpression;

        if $z1 == 0 goto label5;

        $r2 = <org.codehaus.groovy.ast.expr.VariableExpression: org.codehaus.groovy.ast.expr.VariableExpression THIS_EXPRESSION>;

        if r1 != $r2 goto label2;

        $r16 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode classNode>;

        return $r16;

     label2:
        $r3 = <org.codehaus.groovy.ast.expr.VariableExpression: org.codehaus.groovy.ast.expr.VariableExpression SUPER_EXPRESSION>;

        if r1 != $r3 goto label3;

        $r14 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode classNode>;

        $r15 = virtualinvoke $r14.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode getSuperClass()>();

        return $r15;

     label3:
        r4 = (org.codehaus.groovy.ast.expr.VariableExpression) r1;

        $r5 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        $r6 = virtualinvoke r4.<org.codehaus.groovy.ast.expr.VariableExpression: java.lang.String getName()>();

        $r7 = virtualinvoke $r5.<org.codehaus.groovy.classgen.CompileStack: org.codehaus.groovy.classgen.Variable getVariable(java.lang.String,boolean)>($r6, 0);

        if $r7 == null goto label4;

        $z3 = virtualinvoke $r7.<org.codehaus.groovy.classgen.Variable: boolean isHolder()>();

        if $z3 != 0 goto label4;

        $r13 = virtualinvoke $r7.<org.codehaus.groovy.classgen.Variable: org.codehaus.groovy.ast.ClassNode getType()>();

        $z4 = virtualinvoke $r7.<org.codehaus.groovy.classgen.Variable: boolean isDynamicTyped()>();

        if $z4 != 0 goto label4;

        return $r13;

     label4:
        if $r7 != null goto label5;

        $r8 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        $r9 = virtualinvoke $r8.<org.codehaus.groovy.classgen.CompileStack: org.codehaus.groovy.ast.VariableScope getScope()>();

        $r10 = virtualinvoke r4.<org.codehaus.groovy.ast.expr.VariableExpression: java.lang.String getName()>();

        $r11 = virtualinvoke $r9.<org.codehaus.groovy.ast.VariableScope: org.codehaus.groovy.ast.Variable getReferencedClassVariable(java.lang.String)>($r10);

        if $r11 == null goto label5;

        $z2 = interfaceinvoke $r11.<org.codehaus.groovy.ast.Variable: boolean isDynamicTyped()>();

        if $z2 != 0 goto label5;

        $r12 = interfaceinvoke $r11.<org.codehaus.groovy.ast.Variable: org.codehaus.groovy.ast.ClassNode getType()>();

        return $r12;

     label5:
        $r18 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.Expression: org.codehaus.groovy.ast.ClassNode getType()>();

        return $r18;
    }

    protected boolean isInClosureConstructor()
    {
        org.codehaus.groovy.ast.ClassNode $r2, $r3, $r4, $r5, $r6;
        org.codehaus.groovy.classgen.AsmClassGenerator r0;
        org.codehaus.groovy.ast.ConstructorNode $r1;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        $r1 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ConstructorNode constructorNode>;

        if $r1 == null goto label1;

        $r2 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode classNode>;

        $r3 = virtualinvoke $r2.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode getOuterClass()>();

        if $r3 == null goto label1;

        $r4 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode classNode>;

        $r5 = virtualinvoke $r4.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode getSuperClass()>();

        $r6 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode CLOSURE_TYPE>;

        if $r5 != $r6 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected boolean isInClosure()
    {
        org.codehaus.groovy.ast.ClassNode $r1, $r2, $r3, $r4, $r5;
        org.codehaus.groovy.classgen.AsmClassGenerator r0;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        $r1 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode classNode>;

        $r2 = virtualinvoke $r1.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode getOuterClass()>();

        if $r2 == null goto label1;

        $r3 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode classNode>;

        $r4 = virtualinvoke $r3.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode getSuperClass()>();

        $r5 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode CLOSURE_TYPE>;

        if $r4 != $r5 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected boolean isNotExplicitThisInClosure(boolean)
    {
        org.codehaus.groovy.classgen.AsmClassGenerator r0;
        boolean z0, $z1, $z2;

        r0 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        z0 := @parameter0: boolean;

        if z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean isInClosure()>();

        if $z1 != 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    protected boolean isStaticMethod()
    {
        org.codehaus.groovy.ast.MethodNode $r1, $r2;
        org.codehaus.groovy.classgen.AsmClassGenerator r0;
        boolean $z0, $z1;

        r0 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        $r1 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.MethodNode methodNode>;

        if $r1 == null goto label1;

        $r2 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.MethodNode methodNode>;

        $z0 = virtualinvoke $r2.<org.codehaus.groovy.ast.MethodNode: boolean isStatic()>();

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    protected org.codehaus.groovy.ast.CompileUnit getCompileUnit()
    {
        org.codehaus.groovy.ast.ClassNode $r1;
        org.codehaus.groovy.classgen.AsmClassGenerator r0;
        org.codehaus.groovy.ast.CompileUnit $r2, r4;
        org.codehaus.groovy.classgen.GeneratorContext $r3;

        r0 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        $r1 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode classNode>;

        $r2 = virtualinvoke $r1.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.CompileUnit getCompileUnit()>();

        r4 = $r2;

        if $r2 != null goto label1;

        $r3 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.GeneratorContext context>;

        r4 = virtualinvoke $r3.<org.codehaus.groovy.classgen.GeneratorContext: org.codehaus.groovy.ast.CompileUnit getCompileUnit()>();

     label1:
        return r4;
    }

    protected boolean isHolderVariable(org.codehaus.groovy.ast.expr.Expression)
    {
        org.codehaus.groovy.classgen.Variable $r4;
        org.codehaus.groovy.ast.expr.Expression r0;
        java.lang.String $r3, $r6;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.codehaus.groovy.ast.expr.VariableExpression r10;
        org.codehaus.groovy.ast.ClassNode $r5;
        org.codehaus.groovy.classgen.AsmClassGenerator r1;
        org.codehaus.groovy.classgen.CompileStack $r2;
        org.codehaus.groovy.ast.expr.FieldExpression r9;
        org.codehaus.groovy.ast.FieldNode $r7, $r8;

        r1 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.Expression;

        $z0 = r0 instanceof org.codehaus.groovy.ast.expr.FieldExpression;

        if $z0 == 0 goto label1;

        r9 = (org.codehaus.groovy.ast.expr.FieldExpression) r0;

        $r8 = virtualinvoke r9.<org.codehaus.groovy.ast.expr.FieldExpression: org.codehaus.groovy.ast.FieldNode getField()>();

        $z4 = virtualinvoke $r8.<org.codehaus.groovy.ast.FieldNode: boolean isHolder()>();

        return $z4;

     label1:
        $z1 = r0 instanceof org.codehaus.groovy.ast.expr.VariableExpression;

        if $z1 == 0 goto label3;

        r10 = (org.codehaus.groovy.ast.expr.VariableExpression) r0;

        $r2 = r1.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        $r3 = virtualinvoke r10.<org.codehaus.groovy.ast.expr.VariableExpression: java.lang.String getName()>();

        $r4 = virtualinvoke $r2.<org.codehaus.groovy.classgen.CompileStack: org.codehaus.groovy.classgen.Variable getVariable(java.lang.String,boolean)>($r3, 0);

        if $r4 == null goto label2;

        $z3 = virtualinvoke $r4.<org.codehaus.groovy.classgen.Variable: boolean isHolder()>();

        return $z3;

     label2:
        $r5 = r1.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode classNode>;

        $r6 = virtualinvoke r10.<org.codehaus.groovy.ast.expr.VariableExpression: java.lang.String getName()>();

        $r7 = virtualinvoke $r5.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.FieldNode getDeclaredField(java.lang.String)>($r6);

        if $r7 == null goto label3;

        $z2 = virtualinvoke $r7.<org.codehaus.groovy.ast.FieldNode: boolean isHolder()>();

        return $z2;

     label3:
        return 0;
    }

    public static boolean usesSuper(org.codehaus.groovy.ast.expr.MethodCallExpression)
    {
        org.codehaus.groovy.ast.expr.VariableExpression r2;
        org.codehaus.groovy.ast.expr.MethodCallExpression r0;
        org.codehaus.groovy.ast.expr.Expression $r1;
        java.lang.String $r3;
        boolean $z0, $z1;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.MethodCallExpression;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.MethodCallExpression: org.codehaus.groovy.ast.expr.Expression getObjectExpression()>();

        $z0 = $r1 instanceof org.codehaus.groovy.ast.expr.VariableExpression;

        if $z0 == 0 goto label1;

        r2 = (org.codehaus.groovy.ast.expr.VariableExpression) $r1;

        $r3 = virtualinvoke r2.<org.codehaus.groovy.ast.expr.VariableExpression: java.lang.String getName()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("super");

        return $z1;

     label1:
        return 0;
    }

    public static boolean usesSuper(org.codehaus.groovy.ast.expr.PropertyExpression)
    {
        org.codehaus.groovy.ast.expr.PropertyExpression r0;
        org.codehaus.groovy.ast.expr.VariableExpression r2;
        org.codehaus.groovy.ast.expr.Expression $r1;
        java.lang.String $r3;
        boolean $z0, $z1;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.PropertyExpression;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.PropertyExpression: org.codehaus.groovy.ast.expr.Expression getObjectExpression()>();

        $z0 = $r1 instanceof org.codehaus.groovy.ast.expr.VariableExpression;

        if $z0 == 0 goto label1;

        r2 = (org.codehaus.groovy.ast.expr.VariableExpression) $r1;

        $r3 = virtualinvoke r2.<org.codehaus.groovy.ast.expr.VariableExpression: java.lang.String getName()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("super");

        return $z1;

     label1:
        return 0;
    }

    protected int getBytecodeVersion()
    {
        org.codehaus.groovy.ast.ClassNode $r1, $r6;
        org.codehaus.groovy.classgen.AsmClassGenerator r0;
        org.codehaus.groovy.control.CompilerConfiguration $r3;
        byte $b0;
        org.codehaus.groovy.ast.CompileUnit $r2;
        java.lang.String $r4, $r5;
        boolean $z0, $z1, $z2;

        r0 := @this: org.codehaus.groovy.classgen.AsmClassGenerator;

        $r1 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode classNode>;

        $z0 = virtualinvoke $r1.<org.codehaus.groovy.ast.ClassNode: boolean isUsingGenerics()>();

        if $z0 != 0 goto label1;

        $r6 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.ClassNode classNode>;

        $z2 = virtualinvoke $r6.<org.codehaus.groovy.ast.ClassNode: boolean isAnnotated()>();

        if $z2 != 0 goto label1;

        return 47;

     label1:
        $r2 = virtualinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.ast.CompileUnit getCompileUnit()>();

        $r3 = virtualinvoke $r2.<org.codehaus.groovy.ast.CompileUnit: org.codehaus.groovy.control.CompilerConfiguration getConfig()>();

        $r4 = virtualinvoke $r3.<org.codehaus.groovy.control.CompilerConfiguration: java.lang.String getTargetBytecode()>();

        $r5 = "1.5";

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label2;

        $b0 = 49;

        goto label3;

     label2:
        $b0 = 47;

     label3:
        return $b0;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static boolean access$000(org.codehaus.groovy.classgen.AsmClassGenerator, org.codehaus.groovy.ast.Parameter[], org.codehaus.groovy.ast.Parameter[])
    {
        org.codehaus.groovy.ast.Parameter[] r1, r2;
        org.codehaus.groovy.classgen.AsmClassGenerator r0;
        boolean $z0;

        r0 := @parameter0: org.codehaus.groovy.classgen.AsmClassGenerator;

        r1 := @parameter1: org.codehaus.groovy.ast.Parameter[];

        r2 := @parameter2: org.codehaus.groovy.ast.Parameter[];

        $z0 = specialinvoke r0.<org.codehaus.groovy.classgen.AsmClassGenerator: boolean equalParameterTypes(org.codehaus.groovy.ast.Parameter[],org.codehaus.groovy.ast.Parameter[])>(r1, r2);

        return $z0;
    }

    static groovyjarjarasm.asm.MethodVisitor access$100(org.codehaus.groovy.classgen.AsmClassGenerator)
    {
        org.codehaus.groovy.classgen.AsmClassGenerator r0;
        groovyjarjarasm.asm.MethodVisitor $r1;

        r0 := @parameter0: org.codehaus.groovy.classgen.AsmClassGenerator;

        $r1 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: groovyjarjarasm.asm.MethodVisitor mv>;

        return $r1;
    }

    static org.codehaus.groovy.classgen.CompileStack access$200(org.codehaus.groovy.classgen.AsmClassGenerator)
    {
        org.codehaus.groovy.classgen.AsmClassGenerator r0;
        org.codehaus.groovy.classgen.CompileStack $r1;

        r0 := @parameter0: org.codehaus.groovy.classgen.AsmClassGenerator;

        $r1 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.CompileStack compileStack>;

        return $r1;
    }

    static org.codehaus.groovy.classgen.BytecodeHelper access$300(org.codehaus.groovy.classgen.AsmClassGenerator)
    {
        org.codehaus.groovy.classgen.AsmClassGenerator r0;
        org.codehaus.groovy.classgen.BytecodeHelper $r1;

        r0 := @parameter0: org.codehaus.groovy.classgen.AsmClassGenerator;

        $r1 = r0.<org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.BytecodeHelper helper>;

        return $r1;
    }

    static void <clinit>()
    {
        org.codehaus.groovy.classgen.MethodCallerMultiAdapter $r1, $r3, $r5, $r7, $r9, $r11, $r13, $r15, $r17, $r19, $r21, $r23, $r25, $r27, $r29, $r31, $r33;
        org.codehaus.groovy.classgen.MethodCaller $r35, $r37, $r39, $r41, $r43, $r45, $r47, $r49, $r51, $r53, $r55, $r57, $r59, $r61, $r63, $r65, $r67, $r69, $r71, $r73, $r75, $r77, $r79, $r81, $r83, $r85, $r87, $r89, $r91, $r93, $r95;
        java.lang.Class $r0, $r2, $r4, $r6, $r8, $r10, $r12, $r14, $r16, $r18, $r20, $r22, $r24, $r26, $r28, $r30, $r32, $r34, $r36, $r38, $r40, $r42, $r44, $r46, $r48, $r50, $r52, $r54, $r56, $r58, $r60, $r62, $r64, $r66, $r68, $r70, $r72, $r74, $r76, $r78, $r80, $r82, $r84, $r86, $r88, $r90, $r92, $r94, $r96, $r97, $r98, $r99, $r100, $r101, $r102, $r103, $r104, $r105, $r106, $r107, $r108, $r109, $r110, $r111, $r112, $r113, $r114, $r115, $r116, $r117, $r118, $r119, $r120, $r121, $r122, $r123, $r124, $r125, $r126, $r127, $r128, $r129, $r130, $r131, $r132, $r133, $r134, $r135, $r136, $r137, $r138, $r139, $r140, $r141, $r142, $r143;

        <org.codehaus.groovy.classgen.AsmClassGenerator: boolean ASM_DEBUG> = 0;

        <org.codehaus.groovy.classgen.AsmClassGenerator: boolean MARK_START> = 1;

        <org.codehaus.groovy.classgen.AsmClassGenerator: boolean CREATE_LINE_NUMBER_INFO> = 1;

        <org.codehaus.groovy.classgen.AsmClassGenerator: boolean CREATE_DEBUG_INFO> = 1;

        $r0 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

        if $r0 != null goto label01;

        $r96 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.runtime.ScriptBytecodeAdapter");

        <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter> = $r96;

        goto label02;

     label01:
        $r96 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

     label02:
        $r1 = staticinvoke <org.codehaus.groovy.classgen.MethodCallerMultiAdapter: org.codehaus.groovy.classgen.MethodCallerMultiAdapter newStatic(java.lang.Class,java.lang.String,boolean,boolean)>($r96, "invokeMethodOnCurrent", 1, 0);

        <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCallerMultiAdapter invokeMethodOnCurrent> = $r1;

        $r2 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

        if $r2 != null goto label03;

        $r97 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.runtime.ScriptBytecodeAdapter");

        <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter> = $r97;

        goto label04;

     label03:
        $r97 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

     label04:
        $r3 = staticinvoke <org.codehaus.groovy.classgen.MethodCallerMultiAdapter: org.codehaus.groovy.classgen.MethodCallerMultiAdapter newStatic(java.lang.Class,java.lang.String,boolean,boolean)>($r97, "invokeMethodOnSuper", 1, 0);

        <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCallerMultiAdapter invokeMethodOnSuper> = $r3;

        $r4 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

        if $r4 != null goto label05;

        $r98 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.runtime.ScriptBytecodeAdapter");

        <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter> = $r98;

        goto label06;

     label05:
        $r98 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

     label06:
        $r5 = staticinvoke <org.codehaus.groovy.classgen.MethodCallerMultiAdapter: org.codehaus.groovy.classgen.MethodCallerMultiAdapter newStatic(java.lang.Class,java.lang.String,boolean,boolean)>($r98, "invokeMethod", 1, 0);

        <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCallerMultiAdapter invokeMethod> = $r5;

        $r6 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

        if $r6 != null goto label07;

        $r99 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.runtime.ScriptBytecodeAdapter");

        <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter> = $r99;

        goto label08;

     label07:
        $r99 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

     label08:
        $r7 = staticinvoke <org.codehaus.groovy.classgen.MethodCallerMultiAdapter: org.codehaus.groovy.classgen.MethodCallerMultiAdapter newStatic(java.lang.Class,java.lang.String,boolean,boolean)>($r99, "invokeStaticMethod", 1, 1);

        <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCallerMultiAdapter invokeStaticMethod> = $r7;

        $r8 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

        if $r8 != null goto label09;

        $r100 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.runtime.ScriptBytecodeAdapter");

        <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter> = $r100;

        goto label10;

     label09:
        $r100 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

     label10:
        $r9 = staticinvoke <org.codehaus.groovy.classgen.MethodCallerMultiAdapter: org.codehaus.groovy.classgen.MethodCallerMultiAdapter newStatic(java.lang.Class,java.lang.String,boolean,boolean)>($r100, "invokeNew", 1, 1);

        <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCallerMultiAdapter invokeNew> = $r9;

        $r10 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

        if $r10 != null goto label11;

        $r101 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.runtime.ScriptBytecodeAdapter");

        <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter> = $r101;

        goto label12;

     label11:
        $r101 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

     label12:
        $r11 = staticinvoke <org.codehaus.groovy.classgen.MethodCallerMultiAdapter: org.codehaus.groovy.classgen.MethodCallerMultiAdapter newStatic(java.lang.Class,java.lang.String,boolean,boolean)>($r101, "setField", 0, 0);

        <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCallerMultiAdapter setField> = $r11;

        $r12 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

        if $r12 != null goto label13;

        $r102 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.runtime.ScriptBytecodeAdapter");

        <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter> = $r102;

        goto label14;

     label13:
        $r102 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

     label14:
        $r13 = staticinvoke <org.codehaus.groovy.classgen.MethodCallerMultiAdapter: org.codehaus.groovy.classgen.MethodCallerMultiAdapter newStatic(java.lang.Class,java.lang.String,boolean,boolean)>($r102, "getField", 0, 0);

        <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCallerMultiAdapter getField> = $r13;

        $r14 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

        if $r14 != null goto label15;

        $r103 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.runtime.ScriptBytecodeAdapter");

        <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter> = $r103;

        goto label16;

     label15:
        $r103 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

     label16:
        $r15 = staticinvoke <org.codehaus.groovy.classgen.MethodCallerMultiAdapter: org.codehaus.groovy.classgen.MethodCallerMultiAdapter newStatic(java.lang.Class,java.lang.String,boolean,boolean)>($r103, "setGroovyObjectField", 0, 0);

        <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCallerMultiAdapter setGroovyObjectField> = $r15;

        $r16 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

        if $r16 != null goto label17;

        $r104 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.runtime.ScriptBytecodeAdapter");

        <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter> = $r104;

        goto label18;

     label17:
        $r104 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

     label18:
        $r17 = staticinvoke <org.codehaus.groovy.classgen.MethodCallerMultiAdapter: org.codehaus.groovy.classgen.MethodCallerMultiAdapter newStatic(java.lang.Class,java.lang.String,boolean,boolean)>($r104, "getGroovyObjectField", 0, 0);

        <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCallerMultiAdapter getGroovyObjectField> = $r17;

        $r18 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

        if $r18 != null goto label19;

        $r105 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.runtime.ScriptBytecodeAdapter");

        <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter> = $r105;

        goto label20;

     label19:
        $r105 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

     label20:
        $r19 = staticinvoke <org.codehaus.groovy.classgen.MethodCallerMultiAdapter: org.codehaus.groovy.classgen.MethodCallerMultiAdapter newStatic(java.lang.Class,java.lang.String,boolean,boolean)>($r105, "setFieldOnSuper", 0, 0);

        <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCallerMultiAdapter setFieldOnSuper> = $r19;

        $r20 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

        if $r20 != null goto label21;

        $r106 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.runtime.ScriptBytecodeAdapter");

        <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter> = $r106;

        goto label22;

     label21:
        $r106 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

     label22:
        $r21 = staticinvoke <org.codehaus.groovy.classgen.MethodCallerMultiAdapter: org.codehaus.groovy.classgen.MethodCallerMultiAdapter newStatic(java.lang.Class,java.lang.String,boolean,boolean)>($r106, "getFieldOnSuper", 0, 0);

        <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCallerMultiAdapter getFieldOnSuper> = $r21;

        $r22 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

        if $r22 != null goto label23;

        $r107 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.runtime.ScriptBytecodeAdapter");

        <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter> = $r107;

        goto label24;

     label23:
        $r107 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

     label24:
        $r23 = staticinvoke <org.codehaus.groovy.classgen.MethodCallerMultiAdapter: org.codehaus.groovy.classgen.MethodCallerMultiAdapter newStatic(java.lang.Class,java.lang.String,boolean,boolean)>($r107, "setProperty", 0, 0);

        <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCallerMultiAdapter setProperty> = $r23;

        $r24 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

        if $r24 != null goto label25;

        $r108 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.runtime.ScriptBytecodeAdapter");

        <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter> = $r108;

        goto label26;

     label25:
        $r108 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

     label26:
        $r25 = staticinvoke <org.codehaus.groovy.classgen.MethodCallerMultiAdapter: org.codehaus.groovy.classgen.MethodCallerMultiAdapter newStatic(java.lang.Class,java.lang.String,boolean,boolean)>($r108, "getProperty", 0, 0);

        <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCallerMultiAdapter getProperty> = $r25;

        $r26 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

        if $r26 != null goto label27;

        $r109 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.runtime.ScriptBytecodeAdapter");

        <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter> = $r109;

        goto label28;

     label27:
        $r109 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

     label28:
        $r27 = staticinvoke <org.codehaus.groovy.classgen.MethodCallerMultiAdapter: org.codehaus.groovy.classgen.MethodCallerMultiAdapter newStatic(java.lang.Class,java.lang.String,boolean,boolean)>($r109, "setGroovyObjectProperty", 0, 0);

        <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCallerMultiAdapter setGroovyObjectProperty> = $r27;

        $r28 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

        if $r28 != null goto label29;

        $r110 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.runtime.ScriptBytecodeAdapter");

        <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter> = $r110;

        goto label30;

     label29:
        $r110 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

     label30:
        $r29 = staticinvoke <org.codehaus.groovy.classgen.MethodCallerMultiAdapter: org.codehaus.groovy.classgen.MethodCallerMultiAdapter newStatic(java.lang.Class,java.lang.String,boolean,boolean)>($r110, "getGroovyObjectProperty", 0, 0);

        <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCallerMultiAdapter getGroovyObjectProperty> = $r29;

        $r30 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

        if $r30 != null goto label31;

        $r111 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.runtime.ScriptBytecodeAdapter");

        <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter> = $r111;

        goto label32;

     label31:
        $r111 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

     label32:
        $r31 = staticinvoke <org.codehaus.groovy.classgen.MethodCallerMultiAdapter: org.codehaus.groovy.classgen.MethodCallerMultiAdapter newStatic(java.lang.Class,java.lang.String,boolean,boolean)>($r111, "setPropertyOnSuper", 0, 0);

        <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCallerMultiAdapter setPropertyOnSuper> = $r31;

        $r32 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

        if $r32 != null goto label33;

        $r112 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.runtime.ScriptBytecodeAdapter");

        <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter> = $r112;

        goto label34;

     label33:
        $r112 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

     label34:
        $r33 = staticinvoke <org.codehaus.groovy.classgen.MethodCallerMultiAdapter: org.codehaus.groovy.classgen.MethodCallerMultiAdapter newStatic(java.lang.Class,java.lang.String,boolean,boolean)>($r112, "getPropertyOnSuper", 0, 0);

        <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCallerMultiAdapter getPropertyOnSuper> = $r33;

        $r34 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$java$util$Iterator>;

        if $r34 != null goto label35;

        $r113 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$(java.lang.String)>("java.util.Iterator");

        <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$java$util$Iterator> = $r113;

        goto label36;

     label35:
        $r113 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$java$util$Iterator>;

     label36:
        $r35 = staticinvoke <org.codehaus.groovy.classgen.MethodCaller: org.codehaus.groovy.classgen.MethodCaller newInterface(java.lang.Class,java.lang.String)>($r113, "next");

        <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCaller iteratorNextMethod> = $r35;

        $r36 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$java$util$Iterator>;

        if $r36 != null goto label37;

        $r114 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$(java.lang.String)>("java.util.Iterator");

        <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$java$util$Iterator> = $r114;

        goto label38;

     label37:
        $r114 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$java$util$Iterator>;

     label38:
        $r37 = staticinvoke <org.codehaus.groovy.classgen.MethodCaller: org.codehaus.groovy.classgen.MethodCaller newInterface(java.lang.Class,java.lang.String)>($r114, "hasNext");

        <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCaller iteratorHasNextMethod> = $r37;

        $r38 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

        if $r38 != null goto label39;

        $r115 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.runtime.ScriptBytecodeAdapter");

        <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter> = $r115;

        goto label40;

     label39:
        $r115 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

     label40:
        $r39 = staticinvoke <org.codehaus.groovy.classgen.MethodCaller: org.codehaus.groovy.classgen.MethodCaller newStatic(java.lang.Class,java.lang.String)>($r115, "assertFailed");

        <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCaller assertFailedMethod> = $r39;

        $r40 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

        if $r40 != null goto label41;

        $r116 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.runtime.ScriptBytecodeAdapter");

        <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter> = $r116;

        goto label42;

     label41:
        $r116 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

     label42:
        $r41 = staticinvoke <org.codehaus.groovy.classgen.MethodCaller: org.codehaus.groovy.classgen.MethodCaller newStatic(java.lang.Class,java.lang.String)>($r116, "isCase");

        <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCaller isCaseMethod> = $r41;

        $r42 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

        if $r42 != null goto label43;

        $r117 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.runtime.ScriptBytecodeAdapter");

        <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter> = $r117;

        goto label44;

     label43:
        $r117 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

     label44:
        $r43 = staticinvoke <org.codehaus.groovy.classgen.MethodCaller: org.codehaus.groovy.classgen.MethodCaller newStatic(java.lang.Class,java.lang.String)>($r117, "compareIdentical");

        <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCaller compareIdenticalMethod> = $r43;

        $r44 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

        if $r44 != null goto label45;

        $r118 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.runtime.ScriptBytecodeAdapter");

        <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter> = $r118;

        goto label46;

     label45:
        $r118 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

     label46:
        $r45 = staticinvoke <org.codehaus.groovy.classgen.MethodCaller: org.codehaus.groovy.classgen.MethodCaller newStatic(java.lang.Class,java.lang.String)>($r118, "compareEqual");

        <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCaller compareEqualMethod> = $r45;

        $r46 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

        if $r46 != null goto label47;

        $r119 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.runtime.ScriptBytecodeAdapter");

        <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter> = $r119;

        goto label48;

     label47:
        $r119 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

     label48:
        $r47 = staticinvoke <org.codehaus.groovy.classgen.MethodCaller: org.codehaus.groovy.classgen.MethodCaller newStatic(java.lang.Class,java.lang.String)>($r119, "compareNotEqual");

        <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCaller compareNotEqualMethod> = $r47;

        $r48 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

        if $r48 != null goto label49;

        $r120 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.runtime.ScriptBytecodeAdapter");

        <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter> = $r120;

        goto label50;

     label49:
        $r120 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

     label50:
        $r49 = staticinvoke <org.codehaus.groovy.classgen.MethodCaller: org.codehaus.groovy.classgen.MethodCaller newStatic(java.lang.Class,java.lang.String)>($r120, "compareTo");

        <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCaller compareToMethod> = $r49;

        $r50 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

        if $r50 != null goto label51;

        $r121 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.runtime.ScriptBytecodeAdapter");

        <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter> = $r121;

        goto label52;

     label51:
        $r121 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

     label52:
        $r51 = staticinvoke <org.codehaus.groovy.classgen.MethodCaller: org.codehaus.groovy.classgen.MethodCaller newStatic(java.lang.Class,java.lang.String)>($r121, "compareLessThan");

        <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCaller compareLessThanMethod> = $r51;

        $r52 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

        if $r52 != null goto label53;

        $r122 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.runtime.ScriptBytecodeAdapter");

        <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter> = $r122;

        goto label54;

     label53:
        $r122 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

     label54:
        $r53 = staticinvoke <org.codehaus.groovy.classgen.MethodCaller: org.codehaus.groovy.classgen.MethodCaller newStatic(java.lang.Class,java.lang.String)>($r122, "compareLessThanEqual");

        <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCaller compareLessThanEqualMethod> = $r53;

        $r54 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

        if $r54 != null goto label55;

        $r123 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.runtime.ScriptBytecodeAdapter");

        <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter> = $r123;

        goto label56;

     label55:
        $r123 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

     label56:
        $r55 = staticinvoke <org.codehaus.groovy.classgen.MethodCaller: org.codehaus.groovy.classgen.MethodCaller newStatic(java.lang.Class,java.lang.String)>($r123, "compareGreaterThan");

        <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCaller compareGreaterThanMethod> = $r55;

        $r56 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

        if $r56 != null goto label57;

        $r124 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.runtime.ScriptBytecodeAdapter");

        <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter> = $r124;

        goto label58;

     label57:
        $r124 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

     label58:
        $r57 = staticinvoke <org.codehaus.groovy.classgen.MethodCaller: org.codehaus.groovy.classgen.MethodCaller newStatic(java.lang.Class,java.lang.String)>($r124, "compareGreaterThanEqual");

        <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCaller compareGreaterThanEqualMethod> = $r57;

        $r58 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

        if $r58 != null goto label59;

        $r125 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.runtime.ScriptBytecodeAdapter");

        <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter> = $r125;

        goto label60;

     label59:
        $r125 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

     label60:
        $r59 = staticinvoke <org.codehaus.groovy.classgen.MethodCaller: org.codehaus.groovy.classgen.MethodCaller newStatic(java.lang.Class,java.lang.String)>($r125, "findRegex");

        <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCaller findRegexMethod> = $r59;

        $r60 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

        if $r60 != null goto label61;

        $r126 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.runtime.ScriptBytecodeAdapter");

        <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter> = $r126;

        goto label62;

     label61:
        $r126 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

     label62:
        $r61 = staticinvoke <org.codehaus.groovy.classgen.MethodCaller: org.codehaus.groovy.classgen.MethodCaller newStatic(java.lang.Class,java.lang.String)>($r126, "matchRegex");

        <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCaller matchRegexMethod> = $r61;

        $r62 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

        if $r62 != null goto label63;

        $r127 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.runtime.ScriptBytecodeAdapter");

        <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter> = $r127;

        goto label64;

     label63:
        $r127 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

     label64:
        $r63 = staticinvoke <org.codehaus.groovy.classgen.MethodCaller: org.codehaus.groovy.classgen.MethodCaller newStatic(java.lang.Class,java.lang.String)>($r127, "regexPattern");

        <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCaller regexPattern> = $r63;

        $r64 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

        if $r64 != null goto label65;

        $r128 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.runtime.ScriptBytecodeAdapter");

        <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter> = $r128;

        goto label66;

     label65:
        $r128 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

     label66:
        $r65 = staticinvoke <org.codehaus.groovy.classgen.MethodCaller: org.codehaus.groovy.classgen.MethodCaller newStatic(java.lang.Class,java.lang.String)>($r128, "spreadMap");

        <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCaller spreadMap> = $r65;

        $r66 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

        if $r66 != null goto label67;

        $r129 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.runtime.ScriptBytecodeAdapter");

        <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter> = $r129;

        goto label68;

     label67:
        $r129 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

     label68:
        $r67 = staticinvoke <org.codehaus.groovy.classgen.MethodCaller: org.codehaus.groovy.classgen.MethodCaller newStatic(java.lang.Class,java.lang.String)>($r129, "despreadList");

        <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCaller despreadList> = $r67;

        $r68 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

        if $r68 != null goto label69;

        $r130 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.runtime.ScriptBytecodeAdapter");

        <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter> = $r130;

        goto label70;

     label69:
        $r130 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

     label70:
        $r69 = staticinvoke <org.codehaus.groovy.classgen.MethodCaller: org.codehaus.groovy.classgen.MethodCaller newStatic(java.lang.Class,java.lang.String)>($r130, "getMethodPointer");

        <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCaller getMethodPointer> = $r69;

        $r70 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

        if $r70 != null goto label71;

        $r131 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.runtime.ScriptBytecodeAdapter");

        <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter> = $r131;

        goto label72;

     label71:
        $r131 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

     label72:
        $r71 = staticinvoke <org.codehaus.groovy.classgen.MethodCaller: org.codehaus.groovy.classgen.MethodCaller newStatic(java.lang.Class,java.lang.String)>($r131, "invokeClosure");

        <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCaller invokeClosureMethod> = $r71;

        $r72 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

        if $r72 != null goto label73;

        $r132 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.runtime.ScriptBytecodeAdapter");

        <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter> = $r132;

        goto label74;

     label73:
        $r132 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

     label74:
        $r73 = staticinvoke <org.codehaus.groovy.classgen.MethodCaller: org.codehaus.groovy.classgen.MethodCaller newStatic(java.lang.Class,java.lang.String)>($r132, "unaryPlus");

        <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCaller unaryPlus> = $r73;

        $r74 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

        if $r74 != null goto label75;

        $r133 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.runtime.ScriptBytecodeAdapter");

        <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter> = $r133;

        goto label76;

     label75:
        $r133 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

     label76:
        $r75 = staticinvoke <org.codehaus.groovy.classgen.MethodCaller: org.codehaus.groovy.classgen.MethodCaller newStatic(java.lang.Class,java.lang.String)>($r133, "unaryMinus");

        <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCaller unaryMinus> = $r75;

        $r76 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

        if $r76 != null goto label77;

        $r134 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.runtime.ScriptBytecodeAdapter");

        <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter> = $r134;

        goto label78;

     label77:
        $r134 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

     label78:
        $r77 = staticinvoke <org.codehaus.groovy.classgen.MethodCaller: org.codehaus.groovy.classgen.MethodCaller newStatic(java.lang.Class,java.lang.String)>($r134, "bitwiseNegate");

        <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCaller bitwiseNegate> = $r77;

        $r78 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

        if $r78 != null goto label79;

        $r135 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.runtime.ScriptBytecodeAdapter");

        <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter> = $r135;

        goto label80;

     label79:
        $r135 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

     label80:
        $r79 = staticinvoke <org.codehaus.groovy.classgen.MethodCaller: org.codehaus.groovy.classgen.MethodCaller newStatic(java.lang.Class,java.lang.String)>($r135, "asType");

        <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCaller asTypeMethod> = $r79;

        $r80 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

        if $r80 != null goto label81;

        $r136 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.runtime.ScriptBytecodeAdapter");

        <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter> = $r136;

        goto label82;

     label81:
        $r136 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

     label82:
        $r81 = staticinvoke <org.codehaus.groovy.classgen.MethodCaller: org.codehaus.groovy.classgen.MethodCaller newStatic(java.lang.Class,java.lang.String)>($r136, "castToType");

        <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCaller castToTypeMethod> = $r81;

        $r82 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

        if $r82 != null goto label83;

        $r137 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.runtime.ScriptBytecodeAdapter");

        <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter> = $r137;

        goto label84;

     label83:
        $r137 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

     label84:
        $r83 = staticinvoke <org.codehaus.groovy.classgen.MethodCaller: org.codehaus.groovy.classgen.MethodCaller newStatic(java.lang.Class,java.lang.String)>($r137, "createList");

        <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCaller createListMethod> = $r83;

        $r84 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

        if $r84 != null goto label85;

        $r138 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.runtime.ScriptBytecodeAdapter");

        <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter> = $r138;

        goto label86;

     label85:
        $r138 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

     label86:
        $r85 = staticinvoke <org.codehaus.groovy.classgen.MethodCaller: org.codehaus.groovy.classgen.MethodCaller newStatic(java.lang.Class,java.lang.String)>($r138, "createTuple");

        <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCaller createTupleMethod> = $r85;

        $r86 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

        if $r86 != null goto label87;

        $r139 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.runtime.ScriptBytecodeAdapter");

        <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter> = $r139;

        goto label88;

     label87:
        $r139 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

     label88:
        $r87 = staticinvoke <org.codehaus.groovy.classgen.MethodCaller: org.codehaus.groovy.classgen.MethodCaller newStatic(java.lang.Class,java.lang.String)>($r139, "createMap");

        <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCaller createMapMethod> = $r87;

        $r88 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

        if $r88 != null goto label89;

        $r140 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.runtime.ScriptBytecodeAdapter");

        <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter> = $r140;

        goto label90;

     label89:
        $r140 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

     label90:
        $r89 = staticinvoke <org.codehaus.groovy.classgen.MethodCaller: org.codehaus.groovy.classgen.MethodCaller newStatic(java.lang.Class,java.lang.String)>($r140, "createRange");

        <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCaller createRangeMethod> = $r89;

        $r90 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

        if $r90 != null goto label91;

        $r141 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.runtime.ScriptBytecodeAdapter");

        <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter> = $r141;

        goto label92;

     label91:
        $r141 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

     label92:
        $r91 = staticinvoke <org.codehaus.groovy.classgen.MethodCaller: org.codehaus.groovy.classgen.MethodCaller newStatic(java.lang.Class,java.lang.String)>($r141, "createPojoWrapper");

        <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCaller createPojoWrapperMethod> = $r91;

        $r92 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

        if $r92 != null goto label93;

        $r142 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.runtime.ScriptBytecodeAdapter");

        <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter> = $r142;

        goto label94;

     label93:
        $r142 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

     label94:
        $r93 = staticinvoke <org.codehaus.groovy.classgen.MethodCaller: org.codehaus.groovy.classgen.MethodCaller newStatic(java.lang.Class,java.lang.String)>($r142, "createGroovyObjectWrapper");

        <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCaller createGroovyObjectWrapperMethod> = $r93;

        $r94 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

        if $r94 != null goto label95;

        $r143 = staticinvoke <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.runtime.ScriptBytecodeAdapter");

        <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter> = $r143;

        goto label96;

     label95:
        $r143 = <org.codehaus.groovy.classgen.AsmClassGenerator: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

     label96:
        $r95 = staticinvoke <org.codehaus.groovy.classgen.MethodCaller: org.codehaus.groovy.classgen.MethodCaller newStatic(java.lang.Class,java.lang.String)>($r143, "selectConstructorAndTransformArguments");

        <org.codehaus.groovy.classgen.AsmClassGenerator: org.codehaus.groovy.classgen.MethodCaller selectConstructorAndTransformArguments> = $r95;

        return;
    }
}
