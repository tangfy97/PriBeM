public class com.hp.hpl.jena.sparql.syntax.Template extends java.lang.Object
{
    static final int HashTemplateGroup;
    private final com.hp.hpl.jena.sparql.core.BasicPattern bgp;
    private int calcHashCode;

    public void <init>(com.hp.hpl.jena.sparql.core.BasicPattern)
    {
        com.hp.hpl.jena.sparql.syntax.Template r0;
        com.hp.hpl.jena.sparql.core.BasicPattern r1;
        int $i1;

        r0 := @this: com.hp.hpl.jena.sparql.syntax.Template;

        r1 := @parameter0: com.hp.hpl.jena.sparql.core.BasicPattern;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i1 = (int) -1;

        r0.<com.hp.hpl.jena.sparql.syntax.Template: int calcHashCode> = $i1;

        r0.<com.hp.hpl.jena.sparql.syntax.Template: com.hp.hpl.jena.sparql.core.BasicPattern bgp> = r1;

        return;
    }

    public com.hp.hpl.jena.sparql.core.BasicPattern getBGP()
    {
        com.hp.hpl.jena.sparql.syntax.Template r0;
        com.hp.hpl.jena.sparql.core.BasicPattern $r1;

        r0 := @this: com.hp.hpl.jena.sparql.syntax.Template;

        $r1 = r0.<com.hp.hpl.jena.sparql.syntax.Template: com.hp.hpl.jena.sparql.core.BasicPattern bgp>;

        return $r1;
    }

    public java.util.List getTriples()
    {
        com.hp.hpl.jena.sparql.syntax.Template r0;
        com.hp.hpl.jena.sparql.core.BasicPattern $r1;
        java.util.List $r2;

        r0 := @this: com.hp.hpl.jena.sparql.syntax.Template;

        $r1 = r0.<com.hp.hpl.jena.sparql.syntax.Template: com.hp.hpl.jena.sparql.core.BasicPattern bgp>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.core.BasicPattern: java.util.List getList()>();

        return $r2;
    }

    public void subst(java.util.Collection, java.util.Map, com.hp.hpl.jena.sparql.engine.binding.Binding)
    {
        java.util.Iterator $r3;
        java.util.Collection r8;
        com.hp.hpl.jena.sparql.syntax.Template r0;
        com.hp.hpl.jena.sparql.core.BasicPattern $r1;
        com.hp.hpl.jena.graph.Triple $r7, r9;
        java.util.List $r2;
        com.hp.hpl.jena.sparql.engine.binding.Binding r5;
        java.util.Map r6;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.syntax.Template;

        r8 := @parameter0: java.util.Collection;

        r6 := @parameter1: java.util.Map;

        r5 := @parameter2: com.hp.hpl.jena.sparql.engine.binding.Binding;

        $r1 = r0.<com.hp.hpl.jena.sparql.syntax.Template: com.hp.hpl.jena.sparql.core.BasicPattern bgp>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.core.BasicPattern: java.util.List getList()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r9 = (com.hp.hpl.jena.graph.Triple) $r4;

        $r7 = staticinvoke <com.hp.hpl.jena.sparql.modify.TemplateLib: com.hp.hpl.jena.graph.Triple subst(com.hp.hpl.jena.graph.Triple,com.hp.hpl.jena.sparql.engine.binding.Binding,java.util.Map)>(r9, r5, r6);

        interfaceinvoke r8.<java.util.Collection: boolean add(java.lang.Object)>($r7);

        goto label1;

     label2:
        return;
    }

    public int hashCode()
    {
        java.util.Iterator $r3;
        com.hp.hpl.jena.sparql.syntax.Template r0;
        com.hp.hpl.jena.sparql.core.BasicPattern $r1;
        com.hp.hpl.jena.graph.Triple r5;
        java.util.List $r2;
        int $i0, $i1, $i2, i3;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.syntax.Template;

        i3 = 177;

        $r1 = r0.<com.hp.hpl.jena.sparql.syntax.Template: com.hp.hpl.jena.sparql.core.BasicPattern bgp>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.core.BasicPattern: java.util.List getList()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.hp.hpl.jena.graph.Triple) $r4;

        $i0 = staticinvoke <com.hp.hpl.jena.sparql.syntax.Template: int hash(com.hp.hpl.jena.graph.Triple)>(r5);

        $i1 = i3 << 1;

        $i2 = $i0 ^ $i1;

        i3 = i3 ^ $i2;

        goto label1;

     label2:
        return i3;
    }

    private static int hash(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.graph.Node $r1, $r2, $r3;
        com.hp.hpl.jena.graph.Triple r0;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, i7;

        r0 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        $i0 = staticinvoke <com.hp.hpl.jena.sparql.syntax.Template: int hashNode(com.hp.hpl.jena.graph.Node)>($r1);

        i5 = $i0 ^ 0;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        $i1 = staticinvoke <com.hp.hpl.jena.sparql.syntax.Template: int hashNode(com.hp.hpl.jena.graph.Node)>($r2);

        $i2 = i5 << 1;

        i6 = $i1 ^ $i2;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        $i3 = staticinvoke <com.hp.hpl.jena.sparql.syntax.Template: int hashNode(com.hp.hpl.jena.graph.Node)>($r3);

        $i4 = i6 << 1;

        i7 = $i3 ^ $i4;

        return i7;
    }

    private static int hashNode(com.hp.hpl.jena.graph.Node)
    {
        int $i0;
        com.hp.hpl.jena.graph.Node r0;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isBlank()>();

        if $z0 == 0 goto label1;

        return 59;

     label1:
        $i0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: int hashCode()>();

        return $i0;
    }

    public boolean equalIso(java.lang.Object, com.hp.hpl.jena.sparql.util.NodeIsomorphismMap)
    {
        com.hp.hpl.jena.sparql.syntax.Template r1, r2;
        int $i0, $i1, $i2, i3;
        boolean $z0;
        com.hp.hpl.jena.sparql.core.BasicPattern $r3, $r5;
        com.hp.hpl.jena.graph.Triple r8, r10;
        java.util.List $r4, $r6;
        com.hp.hpl.jena.sparql.util.NodeIsomorphismMap r11;
        java.lang.Object r0, $r7, $r9;

        r2 := @this: com.hp.hpl.jena.sparql.syntax.Template;

        r0 := @parameter0: java.lang.Object;

        r11 := @parameter1: com.hp.hpl.jena.sparql.util.NodeIsomorphismMap;

        $z0 = r0 instanceof com.hp.hpl.jena.sparql.syntax.Template;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r1 = (com.hp.hpl.jena.sparql.syntax.Template) r0;

        $r3 = r2.<com.hp.hpl.jena.sparql.syntax.Template: com.hp.hpl.jena.sparql.core.BasicPattern bgp>;

        $r4 = virtualinvoke $r3.<com.hp.hpl.jena.sparql.core.BasicPattern: java.util.List getList()>();

        $r5 = r1.<com.hp.hpl.jena.sparql.syntax.Template: com.hp.hpl.jena.sparql.core.BasicPattern bgp>;

        $r6 = virtualinvoke $r5.<com.hp.hpl.jena.sparql.core.BasicPattern: java.util.List getList()>();

        $i0 = interfaceinvoke $r4.<java.util.List: int size()>();

        $i1 = interfaceinvoke $r6.<java.util.List: int size()>();

        if $i0 == $i1 goto label2;

        return 0;

     label2:
        i3 = 0;

     label3:
        $i2 = interfaceinvoke $r4.<java.util.List: int size()>();

        if i3 >= $i2 goto label4;

        $r7 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i3);

        r8 = (com.hp.hpl.jena.graph.Triple) $r7;

        $r9 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>(i3);

        r10 = (com.hp.hpl.jena.graph.Triple) $r9;

        staticinvoke <com.hp.hpl.jena.sparql.util.Iso: boolean tripleIso(com.hp.hpl.jena.graph.Triple,com.hp.hpl.jena.graph.Triple,com.hp.hpl.jena.sparql.util.NodeIsomorphismMap)>(r8, r10, r11);

        i3 = i3 + 1;

        goto label3;

     label4:
        return 1;
    }

    public void format(com.hp.hpl.jena.sparql.serializer.FormatterTemplate)
    {
        com.hp.hpl.jena.sparql.syntax.Template r1;
        com.hp.hpl.jena.sparql.serializer.FormatterTemplate r0;

        r1 := @this: com.hp.hpl.jena.sparql.syntax.Template;

        r0 := @parameter0: com.hp.hpl.jena.sparql.serializer.FormatterTemplate;

        interfaceinvoke r0.<com.hp.hpl.jena.sparql.serializer.FormatterTemplate: void format(com.hp.hpl.jena.sparql.syntax.Template)>(r1);

        return;
    }

    public static void <clinit>()
    {
        <com.hp.hpl.jena.sparql.syntax.Template: int HashTemplateGroup> = 177;

        return;
    }
}
