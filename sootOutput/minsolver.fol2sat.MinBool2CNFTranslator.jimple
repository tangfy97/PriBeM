final class minsolver.fol2sat.MinBool2CNFTranslator extends java.lang.Object implements kodkod.engine.bool.BooleanVisitor
{
    private final minsolver.MinSATSolver solver;
    private final kodkod.util.ints.IntSet visited;
    private final minsolver.fol2sat.MinBool2CNFTranslator$PolarityDetector pdetector;
    private final boolean forSBP;
    private final int[] unaryClause;
    private final int[] binaryClause;
    private final int[] ternaryClause;
    static final boolean $assertionsDisabled;

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lminsolver/fol2sat/MinBool2CNFTranslator;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <minsolver.fol2sat.MinBool2CNFTranslator: boolean $assertionsDisabled> = $z1;

        return;
    }

    static boolean addClause(minsolver.MinSATSolver, boolean, int[])
    {
        int[] r1;
        minsolver.MinSATSolver r0;
        boolean z0, $z1, $z2;

        r0 := @parameter0: minsolver.MinSATSolver;

        z0 := @parameter1: boolean;

        r1 := @parameter2: int[];

        if z0 == 0 goto label1;

        $z2 = virtualinvoke r0.<minsolver.MinSATSolver: boolean addSBPClause(int[])>(r1);

        return $z2;

     label1:
        $z1 = virtualinvoke r0.<minsolver.MinSATSolver: boolean addClause(int[])>(r1);

        return $z1;
    }

    static void addCircuitToSolver(minsolver.MinSATSolver, boolean, kodkod.engine.bool.BooleanFormula, kodkod.engine.satlab.SATFactory, int)
    {
        kodkod.engine.bool.Operator$Nary $r4;
        kodkod.engine.bool.BooleanFormula r2, r14, r15;
        kodkod.engine.bool.Operator $r3;
        int[] $r6, $r11, $r12;
        int i0, $i1;
        minsolver.MinSATSolver r1;
        minsolver.fol2sat.MinBool2CNFTranslator $r0;
        boolean z0, $z1, $z2;
        kodkod.engine.satlab.SATFactory r13;
        java.util.Iterator $r7, $r9;
        java.lang.Object $r5, $r8, $r10;

        r1 := @parameter0: minsolver.MinSATSolver;

        z0 := @parameter1: boolean;

        r2 := @parameter2: kodkod.engine.bool.BooleanFormula;

        r13 := @parameter3: kodkod.engine.satlab.SATFactory;

        i0 := @parameter4: int;

        $r0 = new minsolver.fol2sat.MinBool2CNFTranslator;

        specialinvoke $r0.<minsolver.fol2sat.MinBool2CNFTranslator: void <init>(minsolver.MinSATSolver,boolean,int,kodkod.engine.bool.BooleanFormula)>(r1, z0, i0, r2);

        $r3 = virtualinvoke r2.<kodkod.engine.bool.BooleanFormula: kodkod.engine.bool.Operator op()>();

        $r4 = <kodkod.engine.bool.Operator: kodkod.engine.bool.Operator$Nary AND>;

        if $r3 != $r4 goto label5;

        $r7 = virtualinvoke r2.<kodkod.engine.bool.BooleanFormula: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r14 = (kodkod.engine.bool.BooleanFormula) $r8;

        virtualinvoke r14.<kodkod.engine.bool.BooleanFormula: java.lang.Object accept(kodkod.engine.bool.BooleanVisitor,java.lang.Object)>($r0, null);

     label2:
        $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label1;

        $r9 = virtualinvoke r2.<kodkod.engine.bool.BooleanFormula: java.util.Iterator iterator()>();

        goto label4;

     label3:
        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r15 = (kodkod.engine.bool.BooleanFormula) $r10;

        $r11 = $r0.<minsolver.fol2sat.MinBool2CNFTranslator: int[] unaryClause>;

        $i1 = virtualinvoke r15.<kodkod.engine.bool.BooleanFormula: int label()>();

        $r11[0] = $i1;

        $r12 = $r0.<minsolver.fol2sat.MinBool2CNFTranslator: int[] unaryClause>;

        staticinvoke <minsolver.fol2sat.MinBool2CNFTranslator: boolean addClause(minsolver.MinSATSolver,boolean,int[])>(r1, z0, $r12);

     label4:
        $z2 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label3;

        goto label6;

     label5:
        $r5 = virtualinvoke r2.<kodkod.engine.bool.BooleanFormula: java.lang.Object accept(kodkod.engine.bool.BooleanVisitor,java.lang.Object)>($r0, null);

        $r6 = (int[]) $r5;

        staticinvoke <minsolver.fol2sat.MinBool2CNFTranslator: boolean addClause(minsolver.MinSATSolver,boolean,int[])>(r1, z0, $r6);

     label6:
        return;
    }

    static minsolver.MinSATSolver translate(kodkod.engine.bool.BooleanFormula, kodkod.engine.bool.BooleanValue, kodkod.engine.satlab.SATFactory, int)
    {
        kodkod.engine.satlab.SATFactory r0;
        kodkod.engine.bool.BooleanValue r3;
        kodkod.engine.bool.BooleanFormula r2, $r4;
        java.lang.AssertionError $r6;
        int i0;
        minsolver.MinSATSolver $r5;
        kodkod.engine.satlab.SATSolver $r1;
        boolean $z0, $z1, $z2;

        r2 := @parameter0: kodkod.engine.bool.BooleanFormula;

        r3 := @parameter1: kodkod.engine.bool.BooleanValue;

        r0 := @parameter2: kodkod.engine.satlab.SATFactory;

        i0 := @parameter3: int;

        $r1 = virtualinvoke r0.<kodkod.engine.satlab.SATFactory: kodkod.engine.satlab.SATSolver instance()>();

        $z0 = <minsolver.fol2sat.MinBool2CNFTranslator: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z2 = $r1 instanceof minsolver.MinSATSolver;

        if $z2 != 0 goto label1;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label1:
        $r5 = (minsolver.MinSATSolver) $r1;

        staticinvoke <minsolver.fol2sat.MinBool2CNFTranslator: void addCircuitToSolver(minsolver.MinSATSolver,boolean,kodkod.engine.bool.BooleanFormula,kodkod.engine.satlab.SATFactory,int)>($r5, 0, r2, r0, i0);

        $z1 = r3 instanceof kodkod.engine.bool.BooleanFormula;

        if $z1 == 0 goto label2;

        $r4 = (kodkod.engine.bool.BooleanFormula) r3;

        staticinvoke <minsolver.fol2sat.MinBool2CNFTranslator: void addCircuitToSolver(minsolver.MinSATSolver,boolean,kodkod.engine.bool.BooleanFormula,kodkod.engine.satlab.SATFactory,int)>($r5, 1, $r4, r0, i0);

     label2:
        return $r5;
    }

    private void <init>(minsolver.MinSATSolver, boolean, int, kodkod.engine.bool.BooleanFormula)
    {
        kodkod.engine.bool.BooleanFormula r4;
        int[] $r1, $r2, $r3;
        int $i0, $i1, i2, $i3, $i4, i5, $i6, $i7, $i8;
        minsolver.MinSATSolver r5, $r11;
        minsolver.fol2sat.MinBool2CNFTranslator r0;
        boolean z0;
        kodkod.util.ints.IntSet $r10;
        minsolver.fol2sat.MinBool2CNFTranslator$PolarityDetector $r6, $r7, $r8, $r9;

        r0 := @this: minsolver.fol2sat.MinBool2CNFTranslator;

        r5 := @parameter0: minsolver.MinSATSolver;

        z0 := @parameter1: boolean;

        i2 := @parameter2: int;

        r4 := @parameter3: kodkod.engine.bool.BooleanFormula;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (int)[1];

        r0.<minsolver.fol2sat.MinBool2CNFTranslator: int[] unaryClause> = $r1;

        $r2 = newarray (int)[2];

        r0.<minsolver.fol2sat.MinBool2CNFTranslator: int[] binaryClause> = $r2;

        $r3 = newarray (int)[3];

        r0.<minsolver.fol2sat.MinBool2CNFTranslator: int[] ternaryClause> = $r3;

        $i0 = virtualinvoke r4.<kodkod.engine.bool.BooleanFormula: int label()>();

        $i1 = staticinvoke <java.lang.StrictMath: int abs(int)>($i0);

        r0.<minsolver.fol2sat.MinBool2CNFTranslator: minsolver.MinSATSolver solver> = r5;

        r0.<minsolver.fol2sat.MinBool2CNFTranslator: boolean forSBP> = z0;

        $i3 = staticinvoke <java.lang.StrictMath: int max(int,int)>(i2, $i1);

        $i4 = virtualinvoke r5.<minsolver.MinSATSolver: int numberOfVariables()>();

        i5 = $i3 - $i4;

        if i5 <= 0 goto label1;

        $r11 = r0.<minsolver.fol2sat.MinBool2CNFTranslator: minsolver.MinSATSolver solver>;

        virtualinvoke $r11.<minsolver.MinSATSolver: void addVariables(int)>(i5);

     label1:
        $r6 = new minsolver.fol2sat.MinBool2CNFTranslator$PolarityDetector;

        specialinvoke $r6.<minsolver.fol2sat.MinBool2CNFTranslator$PolarityDetector: void <init>(int,int)>(i2, $i1);

        $r7 = virtualinvoke $r6.<minsolver.fol2sat.MinBool2CNFTranslator$PolarityDetector: minsolver.fol2sat.MinBool2CNFTranslator$PolarityDetector apply(kodkod.engine.bool.BooleanFormula)>(r4);

        r0.<minsolver.fol2sat.MinBool2CNFTranslator: minsolver.fol2sat.MinBool2CNFTranslator$PolarityDetector pdetector> = $r7;

        $r8 = r0.<minsolver.fol2sat.MinBool2CNFTranslator: minsolver.fol2sat.MinBool2CNFTranslator$PolarityDetector pdetector>;

        $i7 = $r8.<minsolver.fol2sat.MinBool2CNFTranslator$PolarityDetector: int offset>;

        $r9 = r0.<minsolver.fol2sat.MinBool2CNFTranslator: minsolver.fol2sat.MinBool2CNFTranslator$PolarityDetector pdetector>;

        $i6 = $r9.<minsolver.fol2sat.MinBool2CNFTranslator$PolarityDetector: int offset>;

        $i8 = staticinvoke <java.lang.StrictMath: int max(int,int)>($i6, $i1);

        $r10 = staticinvoke <kodkod.util.ints.Ints: kodkod.util.ints.IntSet bestSet(int,int)>($i7, $i8);

        r0.<minsolver.fol2sat.MinBool2CNFTranslator: kodkod.util.ints.IntSet visited> = $r10;

        return;
    }

    final int[] clause(int)
    {
        int[] $r1, $r2;
        int i0;
        minsolver.fol2sat.MinBool2CNFTranslator r0;

        r0 := @this: minsolver.fol2sat.MinBool2CNFTranslator;

        i0 := @parameter0: int;

        $r1 = r0.<minsolver.fol2sat.MinBool2CNFTranslator: int[] unaryClause>;

        $r1[0] = i0;

        $r2 = r0.<minsolver.fol2sat.MinBool2CNFTranslator: int[] unaryClause>;

        return $r2;
    }

    final int[] clause(int, int)
    {
        int[] $r1, $r2, $r3;
        int i0, i1;
        minsolver.fol2sat.MinBool2CNFTranslator r0;

        r0 := @this: minsolver.fol2sat.MinBool2CNFTranslator;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<minsolver.fol2sat.MinBool2CNFTranslator: int[] binaryClause>;

        $r1[0] = i0;

        $r2 = r0.<minsolver.fol2sat.MinBool2CNFTranslator: int[] binaryClause>;

        $r2[1] = i1;

        $r3 = r0.<minsolver.fol2sat.MinBool2CNFTranslator: int[] binaryClause>;

        return $r3;
    }

    final int[] clause(int, int, int)
    {
        int[] $r1, $r2, $r3, $r4;
        int i0, i1, i2;
        minsolver.fol2sat.MinBool2CNFTranslator r0;

        r0 := @this: minsolver.fol2sat.MinBool2CNFTranslator;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $r1 = r0.<minsolver.fol2sat.MinBool2CNFTranslator: int[] ternaryClause>;

        $r1[0] = i0;

        $r2 = r0.<minsolver.fol2sat.MinBool2CNFTranslator: int[] ternaryClause>;

        $r2[1] = i1;

        $r3 = r0.<minsolver.fol2sat.MinBool2CNFTranslator: int[] ternaryClause>;

        $r3[2] = i2;

        $r4 = r0.<minsolver.fol2sat.MinBool2CNFTranslator: int[] ternaryClause>;

        return $r4;
    }

    public int[] visit(kodkod.engine.bool.MultiGate, java.lang.Object)
    {
        byte b11, b13, b14, b15, b16;
        int[] r7, $r13, $r15, $r19, $r20;
        minsolver.MinSATSolver $r14, $r16;
        boolean $z0, $z1, $z2, z3, z4, $z5;
        minsolver.fol2sat.MinBool2CNFTranslator$PolarityDetector $r5, $r6, $r17, $r18;
        kodkod.engine.bool.Operator$Nary $r3, $r4;
        kodkod.engine.bool.BooleanFormula r10;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i12;
        minsolver.fol2sat.MinBool2CNFTranslator r1;
        java.util.Iterator $r8;
        kodkod.util.ints.IntSet $r2;
        kodkod.engine.bool.MultiGate r0;
        java.lang.Object $r9, r11, $r12;

        r1 := @this: minsolver.fol2sat.MinBool2CNFTranslator;

        r0 := @parameter0: kodkod.engine.bool.MultiGate;

        r11 := @parameter1: java.lang.Object;

        $i0 = virtualinvoke r0.<kodkod.engine.bool.MultiGate: int label()>();

        $r2 = r1.<minsolver.fol2sat.MinBool2CNFTranslator: kodkod.util.ints.IntSet visited>;

        $z0 = interfaceinvoke $r2.<kodkod.util.ints.IntSet: boolean add(int)>($i0);

        if $z0 == 0 goto label8;

        $r3 = virtualinvoke r0.<kodkod.engine.bool.MultiGate: kodkod.engine.bool.Operator$Nary op()>();

        $r4 = <kodkod.engine.bool.Operator: kodkod.engine.bool.Operator$Nary AND>;

        if $r3 != $r4 goto label1;

        b11 = 1;

        b16 = 1;

        b15 = 1;

        b14 = 1;

        b13 = 1;

        $r17 = r1.<minsolver.fol2sat.MinBool2CNFTranslator: minsolver.fol2sat.MinBool2CNFTranslator$PolarityDetector pdetector>;

        z3 = virtualinvoke $r17.<minsolver.fol2sat.MinBool2CNFTranslator$PolarityDetector: boolean positive(int)>($i0);

        $r18 = r1.<minsolver.fol2sat.MinBool2CNFTranslator: minsolver.fol2sat.MinBool2CNFTranslator$PolarityDetector pdetector>;

        z4 = virtualinvoke $r18.<minsolver.fol2sat.MinBool2CNFTranslator$PolarityDetector: boolean negative(int)>($i0);

        goto label2;

     label1:
        b11 = -1;

        b16 = -1;

        b15 = -1;

        b14 = -1;

        b13 = -1;

        $r5 = r1.<minsolver.fol2sat.MinBool2CNFTranslator: minsolver.fol2sat.MinBool2CNFTranslator$PolarityDetector pdetector>;

        z4 = virtualinvoke $r5.<minsolver.fol2sat.MinBool2CNFTranslator$PolarityDetector: boolean positive(int)>($i0);

        $r6 = r1.<minsolver.fol2sat.MinBool2CNFTranslator: minsolver.fol2sat.MinBool2CNFTranslator$PolarityDetector pdetector>;

        z3 = virtualinvoke $r6.<minsolver.fol2sat.MinBool2CNFTranslator$PolarityDetector: boolean negative(int)>($i0);

     label2:
        if z4 == 0 goto label3;

        $i8 = virtualinvoke r0.<kodkod.engine.bool.MultiGate: int size()>();

        $i9 = $i8 + 1;

        $r19 = newarray (int)[$i9];

        goto label4;

     label3:
        $r19 = null;

     label4:
        r7 = $r19;

        $i1 = neg b16;

        $i10 = $i0 * $i1;

        i12 = 0;

        $r8 = virtualinvoke r0.<kodkod.engine.bool.MultiGate: java.util.Iterator iterator()>();

        goto label7;

     label5:
        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (kodkod.engine.bool.BooleanFormula) $r9;

        $r12 = virtualinvoke r10.<kodkod.engine.bool.BooleanFormula: java.lang.Object accept(kodkod.engine.bool.BooleanVisitor,java.lang.Object)>(r1, r11);

        $r13 = (int[]) $r12;

        i2 = $r13[0];

        if z3 == 0 goto label6;

        $r14 = r1.<minsolver.fol2sat.MinBool2CNFTranslator: minsolver.MinSATSolver solver>;

        $z1 = r1.<minsolver.fol2sat.MinBool2CNFTranslator: boolean forSBP>;

        $i6 = i2 * b15;

        $r15 = virtualinvoke r1.<minsolver.fol2sat.MinBool2CNFTranslator: int[] clause(int,int)>($i6, $i10);

        staticinvoke <minsolver.fol2sat.MinBool2CNFTranslator: boolean addClause(minsolver.MinSATSolver,boolean,int[])>($r14, $z1, $r15);

     label6:
        if z4 == 0 goto label7;

        $i3 = i12;

        i12 = i12 + 1;

        $i4 = neg b13;

        $i5 = i2 * $i4;

        r7[$i3] = $i5;

     label7:
        $z5 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z5 != 0 goto label5;

        if z4 == 0 goto label8;

        $i7 = $i0 * b14;

        r7[i12] = $i7;

        $r16 = r1.<minsolver.fol2sat.MinBool2CNFTranslator: minsolver.MinSATSolver solver>;

        $z2 = r1.<minsolver.fol2sat.MinBool2CNFTranslator: boolean forSBP>;

        staticinvoke <minsolver.fol2sat.MinBool2CNFTranslator: boolean addClause(minsolver.MinSATSolver,boolean,int[])>($r16, $z2, r7);

     label8:
        $r20 = virtualinvoke r1.<minsolver.fol2sat.MinBool2CNFTranslator: int[] clause(int)>($i0);

        return $r20;
    }

    public int[] visit(kodkod.engine.bool.ITEGate, java.lang.Object)
    {
        kodkod.engine.bool.ITEGate r0;
        int[] $r6, $r9, $r12, $r16, $r18, $r20, $r22, $r24, $r26, $r27;
        minsolver.MinSATSolver $r15, $r17, $r19, $r21, $r23, $r25;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        minsolver.fol2sat.MinBool2CNFTranslator$PolarityDetector $r13, $r14;
        kodkod.engine.bool.BooleanFormula $r3, $r7, $r10;
        int $i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        minsolver.fol2sat.MinBool2CNFTranslator r1;
        kodkod.util.ints.IntSet $r2;
        java.lang.Object r4, $r5, $r8, $r11;

        r1 := @this: minsolver.fol2sat.MinBool2CNFTranslator;

        r0 := @parameter0: kodkod.engine.bool.ITEGate;

        r4 := @parameter1: java.lang.Object;

        $i0 = virtualinvoke r0.<kodkod.engine.bool.ITEGate: int label()>();

        $r2 = r1.<minsolver.fol2sat.MinBool2CNFTranslator: kodkod.util.ints.IntSet visited>;

        $z0 = interfaceinvoke $r2.<kodkod.util.ints.IntSet: boolean add(int)>($i0);

        if $z0 == 0 goto label2;

        $r3 = virtualinvoke r0.<kodkod.engine.bool.ITEGate: kodkod.engine.bool.BooleanFormula input(int)>(0);

        $r5 = virtualinvoke $r3.<kodkod.engine.bool.BooleanFormula: java.lang.Object accept(kodkod.engine.bool.BooleanVisitor,java.lang.Object)>(r1, r4);

        $r6 = (int[]) $r5;

        i1 = $r6[0];

        $r7 = virtualinvoke r0.<kodkod.engine.bool.ITEGate: kodkod.engine.bool.BooleanFormula input(int)>(1);

        $r8 = virtualinvoke $r7.<kodkod.engine.bool.BooleanFormula: java.lang.Object accept(kodkod.engine.bool.BooleanVisitor,java.lang.Object)>(r1, r4);

        $r9 = (int[]) $r8;

        i2 = $r9[0];

        $r10 = virtualinvoke r0.<kodkod.engine.bool.ITEGate: kodkod.engine.bool.BooleanFormula input(int)>(2);

        $r11 = virtualinvoke $r10.<kodkod.engine.bool.BooleanFormula: java.lang.Object accept(kodkod.engine.bool.BooleanVisitor,java.lang.Object)>(r1, r4);

        $r12 = (int[]) $r11;

        i3 = $r12[0];

        $r13 = r1.<minsolver.fol2sat.MinBool2CNFTranslator: minsolver.fol2sat.MinBool2CNFTranslator$PolarityDetector pdetector>;

        $z1 = virtualinvoke $r13.<minsolver.fol2sat.MinBool2CNFTranslator$PolarityDetector: boolean positive(int)>($i0);

        $r14 = r1.<minsolver.fol2sat.MinBool2CNFTranslator: minsolver.fol2sat.MinBool2CNFTranslator$PolarityDetector pdetector>;

        $z2 = virtualinvoke $r14.<minsolver.fol2sat.MinBool2CNFTranslator$PolarityDetector: boolean negative(int)>($i0);

        if $z1 == 0 goto label1;

        $r21 = r1.<minsolver.fol2sat.MinBool2CNFTranslator: minsolver.MinSATSolver solver>;

        $z6 = r1.<minsolver.fol2sat.MinBool2CNFTranslator: boolean forSBP>;

        $i10 = neg i1;

        $i9 = neg $i0;

        $r22 = virtualinvoke r1.<minsolver.fol2sat.MinBool2CNFTranslator: int[] clause(int,int,int)>($i10, i2, $i9);

        staticinvoke <minsolver.fol2sat.MinBool2CNFTranslator: boolean addClause(minsolver.MinSATSolver,boolean,int[])>($r21, $z6, $r22);

        $r23 = r1.<minsolver.fol2sat.MinBool2CNFTranslator: minsolver.MinSATSolver solver>;

        $z7 = r1.<minsolver.fol2sat.MinBool2CNFTranslator: boolean forSBP>;

        $i11 = neg $i0;

        $r24 = virtualinvoke r1.<minsolver.fol2sat.MinBool2CNFTranslator: int[] clause(int,int,int)>(i1, i3, $i11);

        staticinvoke <minsolver.fol2sat.MinBool2CNFTranslator: boolean addClause(minsolver.MinSATSolver,boolean,int[])>($r23, $z7, $r24);

        $r25 = r1.<minsolver.fol2sat.MinBool2CNFTranslator: minsolver.MinSATSolver solver>;

        $z8 = r1.<minsolver.fol2sat.MinBool2CNFTranslator: boolean forSBP>;

        $i12 = neg $i0;

        $r26 = virtualinvoke r1.<minsolver.fol2sat.MinBool2CNFTranslator: int[] clause(int,int,int)>(i2, i3, $i12);

        staticinvoke <minsolver.fol2sat.MinBool2CNFTranslator: boolean addClause(minsolver.MinSATSolver,boolean,int[])>($r25, $z8, $r26);

     label1:
        if $z2 == 0 goto label2;

        $r15 = r1.<minsolver.fol2sat.MinBool2CNFTranslator: minsolver.MinSATSolver solver>;

        $z3 = r1.<minsolver.fol2sat.MinBool2CNFTranslator: boolean forSBP>;

        $i5 = neg i1;

        $i4 = neg i2;

        $r16 = virtualinvoke r1.<minsolver.fol2sat.MinBool2CNFTranslator: int[] clause(int,int,int)>($i5, $i4, $i0);

        staticinvoke <minsolver.fol2sat.MinBool2CNFTranslator: boolean addClause(minsolver.MinSATSolver,boolean,int[])>($r15, $z3, $r16);

        $r17 = r1.<minsolver.fol2sat.MinBool2CNFTranslator: minsolver.MinSATSolver solver>;

        $z4 = r1.<minsolver.fol2sat.MinBool2CNFTranslator: boolean forSBP>;

        $i6 = neg i3;

        $r18 = virtualinvoke r1.<minsolver.fol2sat.MinBool2CNFTranslator: int[] clause(int,int,int)>(i1, $i6, $i0);

        staticinvoke <minsolver.fol2sat.MinBool2CNFTranslator: boolean addClause(minsolver.MinSATSolver,boolean,int[])>($r17, $z4, $r18);

        $r19 = r1.<minsolver.fol2sat.MinBool2CNFTranslator: minsolver.MinSATSolver solver>;

        $z5 = r1.<minsolver.fol2sat.MinBool2CNFTranslator: boolean forSBP>;

        $i8 = neg i2;

        $i7 = neg i3;

        $r20 = virtualinvoke r1.<minsolver.fol2sat.MinBool2CNFTranslator: int[] clause(int,int,int)>($i8, $i7, $i0);

        staticinvoke <minsolver.fol2sat.MinBool2CNFTranslator: boolean addClause(minsolver.MinSATSolver,boolean,int[])>($r19, $z5, $r20);

     label2:
        $r27 = virtualinvoke r1.<minsolver.fol2sat.MinBool2CNFTranslator: int[] clause(int)>($i0);

        return $r27;
    }

    public int[] visit(kodkod.engine.bool.NotGate, java.lang.Object)
    {
        kodkod.engine.bool.BooleanFormula $r2;
        int[] $r5, $r6;
        int $i0, $i1;
        kodkod.engine.bool.NotGate r1;
        java.lang.Object r3, $r4;
        minsolver.fol2sat.MinBool2CNFTranslator r0;

        r0 := @this: minsolver.fol2sat.MinBool2CNFTranslator;

        r1 := @parameter0: kodkod.engine.bool.NotGate;

        r3 := @parameter1: java.lang.Object;

        $r2 = virtualinvoke r1.<kodkod.engine.bool.NotGate: kodkod.engine.bool.BooleanFormula input(int)>(0);

        $r4 = virtualinvoke $r2.<kodkod.engine.bool.BooleanFormula: java.lang.Object accept(kodkod.engine.bool.BooleanVisitor,java.lang.Object)>(r0, r3);

        $r5 = (int[]) $r4;

        $i0 = $r5[0];

        $i1 = neg $i0;

        $r6 = virtualinvoke r0.<minsolver.fol2sat.MinBool2CNFTranslator: int[] clause(int)>($i1);

        return $r6;
    }

    public int[] visit(kodkod.engine.bool.BooleanVariable, java.lang.Object)
    {
        kodkod.engine.bool.BooleanVariable r1;
        int[] $r2;
        int $i0;
        java.lang.Object r3;
        minsolver.fol2sat.MinBool2CNFTranslator r0;

        r0 := @this: minsolver.fol2sat.MinBool2CNFTranslator;

        r1 := @parameter0: kodkod.engine.bool.BooleanVariable;

        r3 := @parameter1: java.lang.Object;

        $i0 = virtualinvoke r1.<kodkod.engine.bool.BooleanVariable: int label()>();

        $r2 = virtualinvoke r0.<minsolver.fol2sat.MinBool2CNFTranslator: int[] clause(int)>($i0);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.engine.bool.BooleanVariable, java.lang.Object)
    {
        kodkod.engine.bool.BooleanVariable r1;
        int[] $r4;
        java.lang.Object r2, $r3;
        minsolver.fol2sat.MinBool2CNFTranslator r0;

        r0 := @this: minsolver.fol2sat.MinBool2CNFTranslator;

        r1 := @parameter0: kodkod.engine.bool.BooleanVariable;

        r2 := @parameter1: java.lang.Object;

        $r3 = (java.lang.Object) r2;

        $r4 = virtualinvoke r0.<minsolver.fol2sat.MinBool2CNFTranslator: int[] visit(kodkod.engine.bool.BooleanVariable,java.lang.Object)>(r1, $r3);

        return $r4;
    }

    public volatile java.lang.Object visit(kodkod.engine.bool.NotGate, java.lang.Object)
    {
        int[] $r4;
        kodkod.engine.bool.NotGate r1;
        java.lang.Object r2, $r3;
        minsolver.fol2sat.MinBool2CNFTranslator r0;

        r0 := @this: minsolver.fol2sat.MinBool2CNFTranslator;

        r1 := @parameter0: kodkod.engine.bool.NotGate;

        r2 := @parameter1: java.lang.Object;

        $r3 = (java.lang.Object) r2;

        $r4 = virtualinvoke r0.<minsolver.fol2sat.MinBool2CNFTranslator: int[] visit(kodkod.engine.bool.NotGate,java.lang.Object)>(r1, $r3);

        return $r4;
    }

    public volatile java.lang.Object visit(kodkod.engine.bool.ITEGate, java.lang.Object)
    {
        int[] $r4;
        kodkod.engine.bool.ITEGate r1;
        java.lang.Object r2, $r3;
        minsolver.fol2sat.MinBool2CNFTranslator r0;

        r0 := @this: minsolver.fol2sat.MinBool2CNFTranslator;

        r1 := @parameter0: kodkod.engine.bool.ITEGate;

        r2 := @parameter1: java.lang.Object;

        $r3 = (java.lang.Object) r2;

        $r4 = virtualinvoke r0.<minsolver.fol2sat.MinBool2CNFTranslator: int[] visit(kodkod.engine.bool.ITEGate,java.lang.Object)>(r1, $r3);

        return $r4;
    }

    public volatile java.lang.Object visit(kodkod.engine.bool.MultiGate, java.lang.Object)
    {
        int[] $r4;
        java.lang.Object r2, $r3;
        minsolver.fol2sat.MinBool2CNFTranslator r0;
        kodkod.engine.bool.MultiGate r1;

        r0 := @this: minsolver.fol2sat.MinBool2CNFTranslator;

        r1 := @parameter0: kodkod.engine.bool.MultiGate;

        r2 := @parameter1: java.lang.Object;

        $r3 = (java.lang.Object) r2;

        $r4 = virtualinvoke r0.<minsolver.fol2sat.MinBool2CNFTranslator: int[] visit(kodkod.engine.bool.MultiGate,java.lang.Object)>(r1, $r3);

        return $r4;
    }
}
