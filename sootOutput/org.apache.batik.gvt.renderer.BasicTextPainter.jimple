public abstract class org.apache.batik.gvt.renderer.BasicTextPainter extends java.lang.Object implements org.apache.batik.gvt.TextPainter
{
    private static org.apache.batik.gvt.text.TextLayoutFactory textLayoutFactory;
    protected java.awt.font.FontRenderContext fontRenderContext;
    protected java.awt.font.FontRenderContext aaOffFontRenderContext;

    public void <init>()
    {
        java.awt.font.FontRenderContext $r1, $r3;
        org.apache.batik.gvt.renderer.BasicTextPainter r0;
        java.awt.geom.AffineTransform $r2, $r4;

        r0 := @this: org.apache.batik.gvt.renderer.BasicTextPainter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.awt.font.FontRenderContext;

        $r2 = new java.awt.geom.AffineTransform;

        specialinvoke $r2.<java.awt.geom.AffineTransform: void <init>()>();

        specialinvoke $r1.<java.awt.font.FontRenderContext: void <init>(java.awt.geom.AffineTransform,boolean,boolean)>($r2, 1, 1);

        r0.<org.apache.batik.gvt.renderer.BasicTextPainter: java.awt.font.FontRenderContext fontRenderContext> = $r1;

        $r3 = new java.awt.font.FontRenderContext;

        $r4 = new java.awt.geom.AffineTransform;

        specialinvoke $r4.<java.awt.geom.AffineTransform: void <init>()>();

        specialinvoke $r3.<java.awt.font.FontRenderContext: void <init>(java.awt.geom.AffineTransform,boolean,boolean)>($r4, 0, 1);

        r0.<org.apache.batik.gvt.renderer.BasicTextPainter: java.awt.font.FontRenderContext aaOffFontRenderContext> = $r3;

        return;
    }

    protected org.apache.batik.gvt.text.TextLayoutFactory getTextLayoutFactory()
    {
        org.apache.batik.gvt.renderer.BasicTextPainter r1;
        org.apache.batik.gvt.text.TextLayoutFactory $r0;

        r1 := @this: org.apache.batik.gvt.renderer.BasicTextPainter;

        $r0 = <org.apache.batik.gvt.renderer.BasicTextPainter: org.apache.batik.gvt.text.TextLayoutFactory textLayoutFactory>;

        return $r0;
    }

    public org.apache.batik.gvt.text.Mark selectAt(double, double, org.apache.batik.gvt.TextNode)
    {
        org.apache.batik.gvt.TextNode r1;
        org.apache.batik.gvt.text.Mark $r2;
        org.apache.batik.gvt.renderer.BasicTextPainter r0;
        double d0, d1;

        r0 := @this: org.apache.batik.gvt.renderer.BasicTextPainter;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        r1 := @parameter2: org.apache.batik.gvt.TextNode;

        $r2 = virtualinvoke r0.<org.apache.batik.gvt.renderer.BasicTextPainter: org.apache.batik.gvt.text.Mark hitTest(double,double,org.apache.batik.gvt.TextNode)>(d0, d1, r1);

        return $r2;
    }

    public org.apache.batik.gvt.text.Mark selectTo(double, double, org.apache.batik.gvt.text.Mark)
    {
        org.apache.batik.gvt.TextNode $r2;
        org.apache.batik.gvt.text.Mark r0, $r3;
        org.apache.batik.gvt.renderer.BasicTextPainter r1;
        double d0, d1;

        r1 := @this: org.apache.batik.gvt.renderer.BasicTextPainter;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        r0 := @parameter2: org.apache.batik.gvt.text.Mark;

        if r0 != null goto label1;

        return null;

     label1:
        $r2 = interfaceinvoke r0.<org.apache.batik.gvt.text.Mark: org.apache.batik.gvt.TextNode getTextNode()>();

        $r3 = virtualinvoke r1.<org.apache.batik.gvt.renderer.BasicTextPainter: org.apache.batik.gvt.text.Mark hitTest(double,double,org.apache.batik.gvt.TextNode)>(d0, d1, $r2);

        return $r3;
    }

    public java.awt.geom.Rectangle2D getGeometryBounds(org.apache.batik.gvt.TextNode)
    {
        java.awt.Shape $r2;
        org.apache.batik.gvt.TextNode r1;
        java.awt.geom.Rectangle2D $r3;
        org.apache.batik.gvt.renderer.BasicTextPainter r0;

        r0 := @this: org.apache.batik.gvt.renderer.BasicTextPainter;

        r1 := @parameter0: org.apache.batik.gvt.TextNode;

        $r2 = virtualinvoke r0.<org.apache.batik.gvt.renderer.BasicTextPainter: java.awt.Shape getOutline(org.apache.batik.gvt.TextNode)>(r1);

        $r3 = interfaceinvoke $r2.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        return $r3;
    }

    protected abstract org.apache.batik.gvt.text.Mark hitTest(double, double, org.apache.batik.gvt.TextNode);

    public abstract java.awt.geom.Rectangle2D getBounds2D(org.apache.batik.gvt.TextNode);

    public abstract java.awt.Shape getOutline(org.apache.batik.gvt.TextNode);

    public abstract java.awt.Shape getHighlightShape(org.apache.batik.gvt.text.Mark, org.apache.batik.gvt.text.Mark);

    public abstract int[] getSelected(org.apache.batik.gvt.text.Mark, org.apache.batik.gvt.text.Mark);

    public abstract org.apache.batik.gvt.text.Mark getMark(org.apache.batik.gvt.TextNode, int, boolean);

    public abstract org.apache.batik.gvt.text.Mark selectLast(org.apache.batik.gvt.TextNode);

    public abstract org.apache.batik.gvt.text.Mark selectFirst(org.apache.batik.gvt.TextNode);

    public abstract void paint(org.apache.batik.gvt.TextNode, java.awt.Graphics2D);

    static void <clinit>()
    {
        org.apache.batik.gvt.text.ConcreteTextLayoutFactory $r0;

        $r0 = new org.apache.batik.gvt.text.ConcreteTextLayoutFactory;

        specialinvoke $r0.<org.apache.batik.gvt.text.ConcreteTextLayoutFactory: void <init>()>();

        <org.apache.batik.gvt.renderer.BasicTextPainter: org.apache.batik.gvt.text.TextLayoutFactory textLayoutFactory> = $r0;

        return;
    }
}
