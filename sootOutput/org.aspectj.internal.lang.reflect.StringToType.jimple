public class org.aspectj.internal.lang.reflect.StringToType extends java.lang.Object
{

    public void <init>()
    {
        org.aspectj.internal.lang.reflect.StringToType r0;

        r0 := @this: org.aspectj.internal.lang.reflect.StringToType;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.reflect.Type[] commaSeparatedListToTypeArray(java.lang.String, java.lang.Class) throws java.lang.ClassNotFoundException
    {
        java.lang.reflect.Type $r6;
        java.util.StringTokenizer $r0;
        int $i0, $i1, i2;
        java.lang.reflect.Type[] r2;
        java.lang.Class r5;
        java.lang.String r1, $r3, $r4;
        boolean $z0;

        r1 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.Class;

        $r0 = new java.util.StringTokenizer;

        specialinvoke $r0.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r1, ",");

        $i0 = virtualinvoke $r0.<java.util.StringTokenizer: int countTokens()>();

        r2 = newarray (java.lang.reflect.Type)[$i0];

        i2 = 0;

     label1:
        $z0 = virtualinvoke $r0.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label2;

        $r3 = virtualinvoke $r0.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String trim()>();

        $i1 = i2;

        i2 = i2 + 1;

        $r6 = staticinvoke <org.aspectj.internal.lang.reflect.StringToType: java.lang.reflect.Type stringToType(java.lang.String,java.lang.Class)>($r4, r5);

        r2[$i1] = $r6;

        goto label1;

     label2:
        return r2;
    }

    public static java.lang.reflect.Type stringToType(java.lang.String, java.lang.Class) throws java.lang.ClassNotFoundException
    {
        org.aspectj.lang.reflect.AjType $r5;
        int $i0, $i1, i2, $i4;
        java.lang.String r0, $r10;
        boolean $z0;
        java.lang.reflect.TypeVariable $r9, $r11;
        java.lang.reflect.Type $r2;
        java.lang.reflect.TypeVariable[] $r7;
        java.lang.Class r1, $r4;
        java.lang.ClassNotFoundException $r6, $r12;
        java.lang.ClassLoader $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Class;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>("<");

        $i4 = (int) -1;

        if $i0 != $i4 goto label3;

        $r3 = virtualinvoke r1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r4 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(r0, 0, $r3);

        $r5 = staticinvoke <org.aspectj.lang.reflect.AjTypeSystem: org.aspectj.lang.reflect.AjType getAjType(java.lang.Class)>($r4);

     label2:
        return $r5;

     label3:
        $r2 = staticinvoke <org.aspectj.internal.lang.reflect.StringToType: java.lang.reflect.Type makeParameterizedType(java.lang.String,java.lang.Class)>(r0, r1);

     label4:
        return $r2;

     label5:
        $r6 := @caughtexception;

        $r7 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>();

        i2 = 0;

     label6:
        $i1 = lengthof $r7;

        if i2 >= $i1 goto label8;

        $r9 = $r7[i2];

        $r10 = interfaceinvoke $r9.<java.lang.reflect.TypeVariable: java.lang.String getName()>();

        $z0 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label7;

        $r11 = $r7[i2];

        return $r11;

     label7:
        i2 = i2 + 1;

        goto label6;

     label8:
        $r12 = new java.lang.ClassNotFoundException;

        specialinvoke $r12.<java.lang.ClassNotFoundException: void <init>(java.lang.String)>(r0);

        throw $r12;

        catch java.lang.ClassNotFoundException from label1 to label2 with label5;
        catch java.lang.ClassNotFoundException from label3 to label4 with label5;
    }

    private static java.lang.reflect.Type makeParameterizedType(java.lang.String, java.lang.Class) throws java.lang.ClassNotFoundException
    {
        int $i0, $i1, $i2;
        java.lang.reflect.Type[] $r6;
        java.lang.Class r2, $r4;
        java.lang.String r0, $r1, $r5;
        java.lang.ClassLoader $r3;
        org.aspectj.internal.lang.reflect.StringToType$1 $r7;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Class;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(60);

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $r3 = virtualinvoke r2.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r4 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>($r1, 0, $r3);

        $i1 = virtualinvoke r0.<java.lang.String: int lastIndexOf(int)>(62);

        $i2 = $i0 + 1;

        $r5 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>($i2, $i1);

        $r6 = staticinvoke <org.aspectj.internal.lang.reflect.StringToType: java.lang.reflect.Type[] commaSeparatedListToTypeArray(java.lang.String,java.lang.Class)>($r5, r2);

        $r7 = new org.aspectj.internal.lang.reflect.StringToType$1;

        specialinvoke $r7.<org.aspectj.internal.lang.reflect.StringToType$1: void <init>(java.lang.reflect.Type[],java.lang.Class)>($r6, $r4);

        return $r7;
    }
}
