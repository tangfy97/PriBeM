class org.springframework.jndi.JndiObjectFactoryBean$JndiContextExposingInterceptor extends java.lang.Object implements org.aopalliance.intercept.MethodInterceptor
{
    private final org.springframework.jndi.JndiTemplate jndiTemplate;

    public void <init>(org.springframework.jndi.JndiTemplate)
    {
        org.springframework.jndi.JndiObjectFactoryBean$JndiContextExposingInterceptor r0;
        org.springframework.jndi.JndiTemplate r1;

        r0 := @this: org.springframework.jndi.JndiObjectFactoryBean$JndiContextExposingInterceptor;

        r1 := @parameter0: org.springframework.jndi.JndiTemplate;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.springframework.jndi.JndiObjectFactoryBean$JndiContextExposingInterceptor: org.springframework.jndi.JndiTemplate jndiTemplate> = r1;

        return;
    }

    public java.lang.Object invoke(org.aopalliance.intercept.MethodInvocation) throws java.lang.Throwable
    {
        java.lang.Throwable $r7;
        org.springframework.jndi.JndiTemplate $r5, $r6, $r8;
        org.springframework.jndi.JndiObjectFactoryBean$JndiContextExposingInterceptor r0;
        org.aopalliance.intercept.MethodInvocation r1;
        java.lang.Object $r4;
        javax.naming.Context r3, $r9;
        java.lang.reflect.Method $r2;
        boolean $z0;

        r0 := @this: org.springframework.jndi.JndiObjectFactoryBean$JndiContextExposingInterceptor;

        r1 := @parameter0: org.aopalliance.intercept.MethodInvocation;

        $r2 = interfaceinvoke r1.<org.aopalliance.intercept.MethodInvocation: java.lang.reflect.Method getMethod()>();

        $z0 = virtualinvoke r0.<org.springframework.jndi.JndiObjectFactoryBean$JndiContextExposingInterceptor: boolean isEligible(java.lang.reflect.Method)>($r2);

        if $z0 == 0 goto label1;

        $r6 = r0.<org.springframework.jndi.JndiObjectFactoryBean$JndiContextExposingInterceptor: org.springframework.jndi.JndiTemplate jndiTemplate>;

        $r9 = virtualinvoke $r6.<org.springframework.jndi.JndiTemplate: javax.naming.Context getContext()>();

        goto label2;

     label1:
        $r9 = null;

     label2:
        r3 = $r9;

     label3:
        $r4 = interfaceinvoke r1.<org.aopalliance.intercept.MethodInvocation: java.lang.Object proceed()>();

     label4:
        $r5 = r0.<org.springframework.jndi.JndiObjectFactoryBean$JndiContextExposingInterceptor: org.springframework.jndi.JndiTemplate jndiTemplate>;

        virtualinvoke $r5.<org.springframework.jndi.JndiTemplate: void releaseContext(javax.naming.Context)>($r9);

        return $r4;

     label5:
        $r7 := @caughtexception;

        $r8 = r0.<org.springframework.jndi.JndiObjectFactoryBean$JndiContextExposingInterceptor: org.springframework.jndi.JndiTemplate jndiTemplate>;

        virtualinvoke $r8.<org.springframework.jndi.JndiTemplate: void releaseContext(javax.naming.Context)>(r3);

        throw $r7;

        catch java.lang.Throwable from label3 to label4 with label5;
    }

    protected boolean isEligible(java.lang.reflect.Method)
    {
        org.springframework.jndi.JndiObjectFactoryBean$JndiContextExposingInterceptor r3;
        java.lang.Class $r1, $r2;
        java.lang.reflect.Method r0;
        boolean $z0, $z1;

        r3 := @this: org.springframework.jndi.JndiObjectFactoryBean$JndiContextExposingInterceptor;

        r0 := @parameter0: java.lang.reflect.Method;

        $r1 = class "Ljava/lang/Object;";

        $r2 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        $z1 = 0;

        goto label2;

     label1:
        $z1 = 1;

     label2:
        return $z1;
    }
}
