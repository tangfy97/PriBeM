public abstract class org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase extends org.apache.lucene.analysis.TokenFilter
{
    public static final int DEFAULT_MIN_WORD_SIZE;
    public static final int DEFAULT_MIN_SUBWORD_SIZE;
    public static final int DEFAULT_MAX_SUBWORD_SIZE;
    protected final org.apache.lucene.analysis.util.CharArraySet dictionary;
    protected final java.util.LinkedList tokens;
    protected final int minWordSize;
    protected final int minSubwordSize;
    protected final int maxSubwordSize;
    protected final boolean onlyLongestMatch;
    protected final org.apache.lucene.analysis.tokenattributes.CharTermAttribute termAtt;
    protected final org.apache.lucene.analysis.tokenattributes.OffsetAttribute offsetAtt;
    private final org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute posIncAtt;
    private org.apache.lucene.util.AttributeSource$State current;
    static final boolean $assertionsDisabled;

    protected void <init>(org.apache.lucene.util.Version, org.apache.lucene.analysis.TokenStream, org.apache.lucene.analysis.util.CharArraySet, boolean)
    {
        org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase r0;
        org.apache.lucene.analysis.TokenStream r2;
        org.apache.lucene.analysis.util.CharArraySet r3;
        org.apache.lucene.util.Version r1;
        boolean z0;

        r0 := @this: org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase;

        r1 := @parameter0: org.apache.lucene.util.Version;

        r2 := @parameter1: org.apache.lucene.analysis.TokenStream;

        r3 := @parameter2: org.apache.lucene.analysis.util.CharArraySet;

        z0 := @parameter3: boolean;

        specialinvoke r0.<org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase: void <init>(org.apache.lucene.util.Version,org.apache.lucene.analysis.TokenStream,org.apache.lucene.analysis.util.CharArraySet,int,int,int,boolean)>(r1, r2, r3, 5, 2, 15, z0);

        return;
    }

    protected void <init>(org.apache.lucene.util.Version, org.apache.lucene.analysis.TokenStream, org.apache.lucene.analysis.util.CharArraySet)
    {
        org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase r0;
        org.apache.lucene.analysis.TokenStream r2;
        org.apache.lucene.analysis.util.CharArraySet r3;
        org.apache.lucene.util.Version r1;

        r0 := @this: org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase;

        r1 := @parameter0: org.apache.lucene.util.Version;

        r2 := @parameter1: org.apache.lucene.analysis.TokenStream;

        r3 := @parameter2: org.apache.lucene.analysis.util.CharArraySet;

        specialinvoke r0.<org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase: void <init>(org.apache.lucene.util.Version,org.apache.lucene.analysis.TokenStream,org.apache.lucene.analysis.util.CharArraySet,int,int,int,boolean)>(r1, r2, r3, 5, 2, 15, 0);

        return;
    }

    protected void <init>(org.apache.lucene.util.Version, org.apache.lucene.analysis.TokenStream, org.apache.lucene.analysis.util.CharArraySet, int, int, int, boolean)
    {
        org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase r0;
        int i0, i1, i2;
        java.util.LinkedList $r8;
        boolean z0;
        org.apache.lucene.analysis.tokenattributes.CharTermAttribute $r3;
        org.apache.lucene.analysis.TokenStream r1;
        org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute $r7;
        org.apache.lucene.analysis.tokenattributes.OffsetAttribute $r5;
        java.lang.IllegalArgumentException $r10, $r11, $r12;
        org.apache.lucene.util.Version r13;
        org.apache.lucene.analysis.util.CharArraySet r9;
        org.apache.lucene.util.Attribute $r2, $r4, $r6;

        r0 := @this: org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase;

        r13 := @parameter0: org.apache.lucene.util.Version;

        r1 := @parameter1: org.apache.lucene.analysis.TokenStream;

        r9 := @parameter2: org.apache.lucene.analysis.util.CharArraySet;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        i2 := @parameter5: int;

        z0 := @parameter6: boolean;

        specialinvoke r0.<org.apache.lucene.analysis.TokenFilter: void <init>(org.apache.lucene.analysis.TokenStream)>(r1);

        $r2 = virtualinvoke r0.<org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase: org.apache.lucene.util.Attribute addAttribute(java.lang.Class)>(class "Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");

        $r3 = (org.apache.lucene.analysis.tokenattributes.CharTermAttribute) $r2;

        r0.<org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase: org.apache.lucene.analysis.tokenattributes.CharTermAttribute termAtt> = $r3;

        $r4 = virtualinvoke r0.<org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase: org.apache.lucene.util.Attribute addAttribute(java.lang.Class)>(class "Lorg/apache/lucene/analysis/tokenattributes/OffsetAttribute;");

        $r5 = (org.apache.lucene.analysis.tokenattributes.OffsetAttribute) $r4;

        r0.<org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase: org.apache.lucene.analysis.tokenattributes.OffsetAttribute offsetAtt> = $r5;

        $r6 = virtualinvoke r0.<org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase: org.apache.lucene.util.Attribute addAttribute(java.lang.Class)>(class "Lorg/apache/lucene/analysis/tokenattributes/PositionIncrementAttribute;");

        $r7 = (org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute) $r6;

        r0.<org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase: org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute posIncAtt> = $r7;

        $r8 = new java.util.LinkedList;

        specialinvoke $r8.<java.util.LinkedList: void <init>()>();

        r0.<org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase: java.util.LinkedList tokens> = $r8;

        if i0 >= 0 goto label1;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("minWordSize cannot be negative");

        throw $r12;

     label1:
        r0.<org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase: int minWordSize> = i0;

        if i1 >= 0 goto label2;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("minSubwordSize cannot be negative");

        throw $r11;

     label2:
        r0.<org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase: int minSubwordSize> = i1;

        if i2 >= 0 goto label3;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("maxSubwordSize cannot be negative");

        throw $r10;

     label3:
        r0.<org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase: int maxSubwordSize> = i2;

        r0.<org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase: boolean onlyLongestMatch> = z0;

        r0.<org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase: org.apache.lucene.analysis.util.CharArraySet dictionary> = r9;

        return;
    }

    public final boolean incrementToken() throws java.io.IOException
    {
        java.lang.AssertionError $r16;
        org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase r0;
        int $i0, $i1, $i2, $i3;
        org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase$CompoundToken $r15;
        java.util.LinkedList $r1, $r4, $r6;
        boolean $z0, $z1, $z2, $z3;
        org.apache.lucene.analysis.tokenattributes.CharTermAttribute $r3, $r9, $r10;
        org.apache.lucene.analysis.TokenStream $r2;
        java.lang.CharSequence $r11;
        org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute $r13;
        org.apache.lucene.util.AttributeSource$State $r5, $r8, $r14;
        org.apache.lucene.analysis.tokenattributes.OffsetAttribute $r12;
        java.lang.Object $r7;

        r0 := @this: org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase;

        $r1 = r0.<org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase: java.util.LinkedList tokens>;

        $z0 = virtualinvoke $r1.<java.util.LinkedList: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $z3 = <org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase: boolean $assertionsDisabled>;

        if $z3 != 0 goto label1;

        $r14 = r0.<org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase: org.apache.lucene.util.AttributeSource$State current>;

        if $r14 != null goto label1;

        $r16 = new java.lang.AssertionError;

        specialinvoke $r16.<java.lang.AssertionError: void <init>()>();

        throw $r16;

     label1:
        $r6 = r0.<org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase: java.util.LinkedList tokens>;

        $r7 = virtualinvoke $r6.<java.util.LinkedList: java.lang.Object removeFirst()>();

        $r15 = (org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase$CompoundToken) $r7;

        $r8 = r0.<org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase: org.apache.lucene.util.AttributeSource$State current>;

        virtualinvoke r0.<org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase: void restoreState(org.apache.lucene.util.AttributeSource$State)>($r8);

        $r9 = r0.<org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase: org.apache.lucene.analysis.tokenattributes.CharTermAttribute termAtt>;

        $r10 = interfaceinvoke $r9.<org.apache.lucene.analysis.tokenattributes.CharTermAttribute: org.apache.lucene.analysis.tokenattributes.CharTermAttribute setEmpty()>();

        $r11 = $r15.<org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase$CompoundToken: java.lang.CharSequence txt>;

        interfaceinvoke $r10.<org.apache.lucene.analysis.tokenattributes.CharTermAttribute: org.apache.lucene.analysis.tokenattributes.CharTermAttribute append(java.lang.CharSequence)>($r11);

        $r12 = r0.<org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase: org.apache.lucene.analysis.tokenattributes.OffsetAttribute offsetAtt>;

        $i3 = $r15.<org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase$CompoundToken: int startOffset>;

        $i2 = $r15.<org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase$CompoundToken: int endOffset>;

        interfaceinvoke $r12.<org.apache.lucene.analysis.tokenattributes.OffsetAttribute: void setOffset(int,int)>($i3, $i2);

        $r13 = r0.<org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase: org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute posIncAtt>;

        interfaceinvoke $r13.<org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute: void setPositionIncrement(int)>(0);

        return 1;

     label2:
        r0.<org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase: org.apache.lucene.util.AttributeSource$State current> = null;

        $r2 = r0.<org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase: org.apache.lucene.analysis.TokenStream input>;

        $z1 = virtualinvoke $r2.<org.apache.lucene.analysis.TokenStream: boolean incrementToken()>();

        if $z1 == 0 goto label4;

        $r3 = r0.<org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase: org.apache.lucene.analysis.tokenattributes.CharTermAttribute termAtt>;

        $i0 = interfaceinvoke $r3.<org.apache.lucene.analysis.tokenattributes.CharTermAttribute: int length()>();

        $i1 = r0.<org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase: int minWordSize>;

        if $i0 < $i1 goto label3;

        virtualinvoke r0.<org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase: void decompose()>();

        $r4 = r0.<org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase: java.util.LinkedList tokens>;

        $z2 = virtualinvoke $r4.<java.util.LinkedList: boolean isEmpty()>();

        if $z2 != 0 goto label3;

        $r5 = virtualinvoke r0.<org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase: org.apache.lucene.util.AttributeSource$State captureState()>();

        r0.<org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase: org.apache.lucene.util.AttributeSource$State current> = $r5;

     label3:
        return 1;

     label4:
        return 0;
    }

    protected abstract void decompose();

    public void reset() throws java.io.IOException
    {
        org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase r0;
        java.util.LinkedList $r1;

        r0 := @this: org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase;

        specialinvoke r0.<org.apache.lucene.analysis.TokenFilter: void reset()>();

        $r1 = r0.<org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase: java.util.LinkedList tokens>;

        virtualinvoke $r1.<java.util.LinkedList: void clear()>();

        r0.<org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase: org.apache.lucene.util.AttributeSource$State current> = null;

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        <org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase: int DEFAULT_MAX_SUBWORD_SIZE> = 15;

        <org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase: int DEFAULT_MIN_SUBWORD_SIZE> = 2;

        <org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase: int DEFAULT_MIN_WORD_SIZE> = 5;

        $r0 = class "Lorg/apache/lucene/analysis/compound/CompoundWordTokenFilterBase;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase: boolean $assertionsDisabled> = $z1;

        return;
    }
}
