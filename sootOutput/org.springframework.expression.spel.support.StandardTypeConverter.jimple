public class org.springframework.expression.spel.support.StandardTypeConverter extends java.lang.Object implements org.springframework.expression.TypeConverter
{
    private static org.springframework.core.convert.ConversionService defaultConversionService;
    private final org.springframework.core.convert.ConversionService conversionService;

    public void <init>()
    {
        org.springframework.expression.spel.support.StandardTypeConverter r0;
        java.lang.Throwable $r4;
        org.springframework.core.convert.support.GenericConversionService $r3;
        org.springframework.core.convert.ConversionService $r1, $r2;

        r0 := @this: org.springframework.expression.spel.support.StandardTypeConverter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        entermonitor r0;

     label1:
        $r1 = <org.springframework.expression.spel.support.StandardTypeConverter: org.springframework.core.convert.ConversionService defaultConversionService>;

        if $r1 != null goto label2;

        $r3 = staticinvoke <org.springframework.core.convert.support.ConversionServiceFactory: org.springframework.core.convert.support.GenericConversionService createDefaultConversionService()>();

        <org.springframework.expression.spel.support.StandardTypeConverter: org.springframework.core.convert.ConversionService defaultConversionService> = $r3;

     label2:
        exitmonitor r0;

     label3:
        goto label6;

     label4:
        $r4 := @caughtexception;

        exitmonitor r0;

     label5:
        throw $r4;

     label6:
        $r2 = <org.springframework.expression.spel.support.StandardTypeConverter: org.springframework.core.convert.ConversionService defaultConversionService>;

        r0.<org.springframework.expression.spel.support.StandardTypeConverter: org.springframework.core.convert.ConversionService conversionService> = $r2;

        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void <init>(org.springframework.core.convert.ConversionService)
    {
        org.springframework.expression.spel.support.StandardTypeConverter r0;
        org.springframework.core.convert.ConversionService r1;

        r0 := @this: org.springframework.expression.spel.support.StandardTypeConverter;

        r1 := @parameter0: org.springframework.core.convert.ConversionService;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "ConversionService must not be null");

        r0.<org.springframework.expression.spel.support.StandardTypeConverter: org.springframework.core.convert.ConversionService conversionService> = r1;

        return;
    }

    public boolean canConvert(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)
    {
        org.springframework.expression.spel.support.StandardTypeConverter r0;
        org.springframework.core.convert.TypeDescriptor r1, r2;
        org.springframework.core.convert.ConversionService $r3;
        boolean $z0;

        r0 := @this: org.springframework.expression.spel.support.StandardTypeConverter;

        r1 := @parameter0: org.springframework.core.convert.TypeDescriptor;

        r2 := @parameter1: org.springframework.core.convert.TypeDescriptor;

        $r3 = r0.<org.springframework.expression.spel.support.StandardTypeConverter: org.springframework.core.convert.ConversionService conversionService>;

        $z0 = interfaceinvoke $r3.<org.springframework.core.convert.ConversionService: boolean canConvert(org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>(r1, r2);

        return $z0;
    }

    public java.lang.Object convertValue(java.lang.Object, org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)
    {
        org.springframework.expression.spel.SpelEvaluationException $r7, $r13;
        java.lang.Object[] $r8, $r14;
        org.springframework.core.convert.ConverterNotFoundException $r12;
        org.springframework.expression.spel.support.StandardTypeConverter r0;
        org.springframework.core.convert.TypeDescriptor r2, r3;
        java.lang.String $r10, $r11, $r16, $r17;
        org.springframework.core.convert.ConversionService $r4;
        org.springframework.expression.spel.SpelMessage $r9, $r15;
        org.springframework.core.convert.ConversionException $r6;
        java.lang.Object r1, $r5;

        r0 := @this: org.springframework.expression.spel.support.StandardTypeConverter;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.springframework.core.convert.TypeDescriptor;

        r3 := @parameter2: org.springframework.core.convert.TypeDescriptor;

     label1:
        $r4 = r0.<org.springframework.expression.spel.support.StandardTypeConverter: org.springframework.core.convert.ConversionService conversionService>;

        $r5 = interfaceinvoke $r4.<org.springframework.core.convert.ConversionService: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>(r1, r2, r3);

     label2:
        return $r5;

     label3:
        $r12 := @caughtexception;

        $r13 = new org.springframework.expression.spel.SpelEvaluationException;

        $r15 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage TYPE_CONVERSION_ERROR>;

        $r14 = newarray (java.lang.Object)[2];

        $r16 = virtualinvoke r2.<org.springframework.core.convert.TypeDescriptor: java.lang.String toString()>();

        $r14[0] = $r16;

        $r17 = virtualinvoke r3.<org.springframework.core.convert.TypeDescriptor: java.lang.String asString()>();

        $r14[1] = $r17;

        specialinvoke $r13.<org.springframework.expression.spel.SpelEvaluationException: void <init>(java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($r12, $r15, $r14);

        throw $r13;

     label4:
        $r6 := @caughtexception;

        $r7 = new org.springframework.expression.spel.SpelEvaluationException;

        $r9 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage TYPE_CONVERSION_ERROR>;

        $r8 = newarray (java.lang.Object)[2];

        $r10 = virtualinvoke r2.<org.springframework.core.convert.TypeDescriptor: java.lang.String toString()>();

        $r8[0] = $r10;

        $r11 = virtualinvoke r3.<org.springframework.core.convert.TypeDescriptor: java.lang.String asString()>();

        $r8[1] = $r11;

        specialinvoke $r7.<org.springframework.expression.spel.SpelEvaluationException: void <init>(java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($r6, $r9, $r8);

        throw $r7;

        catch org.springframework.core.convert.ConverterNotFoundException from label1 to label2 with label3;
        catch org.springframework.core.convert.ConversionException from label1 to label2 with label4;
    }
}
