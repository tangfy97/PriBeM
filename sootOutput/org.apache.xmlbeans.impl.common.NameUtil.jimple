public class org.apache.xmlbeans.impl.common.NameUtil extends java.lang.Object
{
    public static final char HYPHEN;
    public static final char PERIOD;
    public static final char COLON;
    public static final char USCORE;
    public static final char DOT;
    public static final char TELEIA;
    public static final char AYAH;
    public static final char ELHIZB;
    private static final boolean DEBUG;
    private static final java.util.Set javaWords;
    private static final java.util.Set extraWords;
    private static final java.util.Set javaNames;
    private static final java.lang.String JAVA_NS_PREFIX;
    private static final java.lang.String LANG_PREFIX;
    private static final int START;
    private static final int PUNCT;
    private static final int DIGIT;
    private static final int MARK;
    private static final int UPPER;
    private static final int LOWER;
    private static final int NOCASE;

    public void <init>()
    {
        org.apache.xmlbeans.impl.common.NameUtil r0;

        r0 := @this: org.apache.xmlbeans.impl.common.NameUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean isValidJavaIdentifier(java.lang.String)
    {
        java.util.Set $r1;
        char $c1, $c2;
        java.lang.IllegalArgumentException $r2;
        int $i0, i3;
        java.lang.String r0;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("id cannot be null");

        throw $r2;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

        return 0;

     label2:
        $r1 = <org.apache.xmlbeans.impl.common.NameUtil: java.util.Set javaWords>;

        $z0 = interfaceinvoke $r1.<java.util.Set: boolean contains(java.lang.Object)>(r0);

        if $z0 == 0 goto label3;

        return 0;

     label3:
        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $z1 = staticinvoke <java.lang.Character: boolean isJavaIdentifierStart(char)>($c1);

        if $z1 != 0 goto label4;

        return 0;

     label4:
        i3 = 1;

     label5:
        if i3 >= $i0 goto label7;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i3);

        $z2 = staticinvoke <java.lang.Character: boolean isJavaIdentifierPart(char)>($c2);

        if $z2 != 0 goto label6;

        return 0;

     label6:
        i3 = i3 + 1;

        goto label5;

     label7:
        return 1;
    }

    public static java.lang.String getClassNameFromQName(javax.xml.namespace.QName)
    {
        javax.xml.namespace.QName r0;
        java.lang.String $r1;

        r0 := @parameter0: javax.xml.namespace.QName;

        $r1 = staticinvoke <org.apache.xmlbeans.impl.common.NameUtil: java.lang.String getClassNameFromQName(javax.xml.namespace.QName,boolean)>(r0, 0);

        return $r1;
    }

    public static java.lang.String getClassNameFromQName(javax.xml.namespace.QName, boolean)
    {
        java.lang.StringBuffer $r5, $r6, $r7, $r8;
        javax.xml.namespace.QName r0;
        java.lang.String $r1, $r2, $r3, $r4, $r9;
        boolean z0;

        r0 := @parameter0: javax.xml.namespace.QName;

        z0 := @parameter1: boolean;

        $r1 = virtualinvoke r0.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $r2 = staticinvoke <org.apache.xmlbeans.impl.common.NameUtil: java.lang.String upperCamelCase(java.lang.String,boolean)>($r1, z0);

        $r3 = virtualinvoke r0.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $r4 = staticinvoke <org.apache.xmlbeans.impl.common.NameUtil: java.lang.String getPackageFromNamespace(java.lang.String,boolean)>($r3, z0);

        if $r4 == null goto label1;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r9;

     label1:
        return $r2;
    }

    public static java.lang.String getNamespaceFromPackage(java.lang.Class)
    {
        java.lang.StringBuffer $r2, $r3, $r4;
        int $i0;
        java.lang.Class r0, r6;
        java.lang.String $r1, $r5, $r7;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        r6 = r0;

     label1:
        $z0 = virtualinvoke r6.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label2;

        r6 = virtualinvoke r6.<java.lang.Class: java.lang.Class getComponentType()>();

        goto label1;

     label2:
        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int lastIndexOf(int)>(46);

        if $i0 >= 0 goto label3;

        $r7 = "";

        goto label4;

     label3:
        $r7 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

     label4:
        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("java:");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r5;
    }

    private static boolean isUriSchemeChar(char)
    {
        char c0;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        boolean $z0;

        c0 := @parameter0: char;

        $i1 = (int) c0;

        if $i1 < 97 goto label1;

        $i2 = (int) c0;

        if $i2 <= 122 goto label4;

     label1:
        $i3 = (int) c0;

        if $i3 < 65 goto label2;

        $i4 = (int) c0;

        if $i4 <= 90 goto label4;

     label2:
        $i5 = (int) c0;

        if $i5 < 48 goto label3;

        $i6 = (int) c0;

        if $i6 <= 57 goto label4;

     label3:
        $i7 = (int) c0;

        if $i7 == 45 goto label4;

        $i8 = (int) c0;

        if $i8 == 46 goto label4;

        $i9 = (int) c0;

        if $i9 != 43 goto label5;

     label4:
        $z0 = 1;

        goto label6;

     label5:
        $z0 = 0;

     label6:
        return $z0;
    }

    private static boolean isUriAlphaChar(char)
    {
        int $i1, $i2, $i3, $i4;
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        $i1 = (int) c0;

        if $i1 < 97 goto label1;

        $i2 = (int) c0;

        if $i2 <= 122 goto label2;

     label1:
        $i3 = (int) c0;

        if $i3 < 65 goto label3;

        $i4 = (int) c0;

        if $i4 > 90 goto label3;

     label2:
        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    private static int findSchemeColon(java.lang.String)
    {
        int $i0, $i3, i6, $i8, $i10, $i12, $i13, $i15, $i16;
        java.lang.String r0;
        boolean $z0, $z1;
        char $c1, $c2, $c4, $c5;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        $i8 = (int) -1;

        return $i8;

     label1:
        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $z0 = staticinvoke <org.apache.xmlbeans.impl.common.NameUtil: boolean isUriAlphaChar(char)>($c1);

        if $z0 != 0 goto label2;

        $i10 = (int) -1;

        return $i10;

     label2:
        i6 = 1;

     label3:
        if i6 >= $i0 goto label5;

        $c5 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i6);

        $z1 = staticinvoke <org.apache.xmlbeans.impl.common.NameUtil: boolean isUriSchemeChar(char)>($c5);

        if $z1 != 0 goto label4;

        goto label5;

     label4:
        i6 = i6 + 1;

        goto label3;

     label5:
        if i6 != $i0 goto label6;

        $i12 = (int) -1;

        return $i12;

     label6:
        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i6);

        $i13 = (int) $c2;

        if $i13 == 58 goto label7;

        $i15 = (int) -1;

        return $i15;

     label7:
        if i6 >= $i0 goto label9;

        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i6);

        $i16 = (int) $c4;

        if $i16 == 58 goto label8;

        goto label9;

     label8:
        i6 = i6 + 1;

        goto label7;

     label9:
        $i3 = i6 - 1;

        return $i3;
    }

    private static java.lang.String jls77String(java.lang.String)
    {
        char $c2, $c3, $c4;
        java.lang.StringBuffer $r3;
        int $i0, $i1, i5, $i6;
        java.lang.String r1, $r2;
        boolean $z0, $z1, $z2;

        r1 := @parameter0: java.lang.String;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>(java.lang.String)>(r1);

        i5 = 0;

     label1:
        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if i5 >= $i0 goto label4;

        $c3 = virtualinvoke $r3.<java.lang.StringBuffer: char charAt(int)>(i5);

        $z1 = staticinvoke <java.lang.Character: boolean isJavaIdentifierPart(char)>($c3);

        if $z1 == 0 goto label2;

        $c4 = virtualinvoke $r3.<java.lang.StringBuffer: char charAt(int)>(i5);

        $i6 = (int) $c4;

        if 36 != $i6 goto label3;

     label2:
        virtualinvoke $r3.<java.lang.StringBuffer: void setCharAt(int,char)>(i5, 95);

     label3:
        i5 = i5 + 1;

        goto label1;

     label4:
        $i1 = virtualinvoke $r3.<java.lang.StringBuffer: int length()>();

        if $i1 == 0 goto label5;

        $c2 = virtualinvoke $r3.<java.lang.StringBuffer: char charAt(int)>(0);

        $z0 = staticinvoke <java.lang.Character: boolean isJavaIdentifierStart(char)>($c2);

        if $z0 != 0 goto label6;

     label5:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer insert(int,char)>(0, 95);

     label6:
        $z2 = staticinvoke <org.apache.xmlbeans.impl.common.NameUtil: boolean isJavaReservedWord(java.lang.String)>(r1);

        if $z2 == 0 goto label7;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(95);

     label7:
        $r2 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    private static java.util.List splitDNS(java.lang.String)
    {
        java.util.ArrayList $r9;
        int $i0, $i1, $i2, $i3, $i4, $i6, i7, i8, $i10, $i11, $i13;
        java.lang.String r1, $r2, $r3, $r5, $r6, $r7, $r8;
        boolean $z0;
        char $c5;
        java.lang.Object $r4;

        r1 := @parameter0: java.lang.String;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        i7 = virtualinvoke r1.<java.lang.String: int length()>();

        i8 = virtualinvoke r1.<java.lang.String: int lastIndexOf(int)>(46);

     label1:
        $i10 = (int) -1;

        if i8 == $i10 goto label3;

        $c5 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i8);

        $i11 = (int) $c5;

        if $i11 != 46 goto label2;

        $i6 = i8 + 1;

        $r7 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>($i6, i7);

        $r8 = staticinvoke <org.apache.xmlbeans.impl.common.NameUtil: java.lang.String jls77String(java.lang.String)>($r7);

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r8);

        i7 = i8;

     label2:
        $i13 = (int) -1;

        i8 = i8 + $i13;

        goto label1;

     label3:
        $r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, i7);

        $r3 = staticinvoke <org.apache.xmlbeans.impl.common.NameUtil: java.lang.String jls77String(java.lang.String)>($r2);

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r3);

        $i0 = interfaceinvoke $r9.<java.util.List: int size()>();

        if $i0 < 3 goto label4;

        $i1 = interfaceinvoke $r9.<java.util.List: int size()>();

        $i2 = $i1 - 1;

        $r4 = interfaceinvoke $r9.<java.util.List: java.lang.Object get(int)>($i2);

        $r5 = (java.lang.String) $r4;

        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String toLowerCase()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("www");

        if $z0 == 0 goto label4;

        $i3 = interfaceinvoke $r9.<java.util.List: int size()>();

        $i4 = $i3 - 1;

        interfaceinvoke $r9.<java.util.List: java.lang.Object remove(int)>($i4);

     label4:
        return $r9;
    }

    private static java.lang.String processFilename(java.lang.String)
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.String r0, $r1, $r2, $r3;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int lastIndexOf(int)>(46);

        if $i0 <= 0 goto label2;

        $i1 = $i0 + 1;

        $i2 = $i1 + 2;

        $i3 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i2 == $i3 goto label1;

        $i4 = $i0 + 1;

        $i5 = $i4 + 3;

        $i6 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i5 == $i6 goto label1;

        $i7 = $i0 + 1;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i7);

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>();

        if $r2 != "html" goto label2;

     label1:
        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        return $r3;

     label2:
        return r0;
    }

    public static java.lang.String getPackageFromNamespace(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.xmlbeans.impl.common.NameUtil: java.lang.String getPackageFromNamespace(java.lang.String,boolean)>(r0, 0);

        return $r1;
    }

    public static java.lang.String getPackageFromNamespace(java.lang.String, boolean)
    {
        boolean z0, $z1, $z2;
        java.util.List $r11, r21;
        java.lang.String[] $r18;
        java.util.ArrayList $r24, $r25;
        java.lang.StringBuffer $r26;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i18, i19, i20, $i21, $i22;
        java.lang.String r0, $r2, $r3, $r4, $r6, $r7, $r8, $r10, $r13, $r14, $r15, $r16, $r17, $r20;
        java.util.Iterator $r23;
        char $c16, $c17;
        java.lang.Object $r5, $r9, $r12;

        r0 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        if r0 == null goto label01;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label02;

     label01:
        return "noNamespace";

     label02:
        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        $i2 = staticinvoke <org.apache.xmlbeans.impl.common.NameUtil: int findSchemeColon(java.lang.String)>(r0);

        $i3 = $i1 - 1;

        if $i2 != $i3 goto label03;

        $r24 = new java.util.ArrayList;

        specialinvoke $r24.<java.util.ArrayList: void <init>()>();

        r21 = $r24;

        $r20 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i2);

        interfaceinvoke $r24.<java.util.List: boolean add(java.lang.Object)>($r20);

        goto label12;

     label03:
        if $i2 < 0 goto label04;

        $r16 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i2);

        $z1 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>("java");

        if $z1 == 0 goto label04;

        $i18 = $i2 + 1;

        $r17 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i18);

        $r18 = virtualinvoke $r17.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\.");

        r21 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r18);

        goto label12;

     label04:
        $r25 = new java.util.ArrayList;

        specialinvoke $r25.<java.util.ArrayList: void <init>()>();

        r21 = $r25;

        i19 = $i2 + 1;

     label05:
        if i19 >= $i1 goto label10;

     label06:
        $c16 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i19);

        $i21 = (int) $c16;

        if $i21 != 47 goto label07;

        i19 = i19 + 1;

        if i19 < $i1 goto label06;

        goto label10;

     label07:
        i20 = i19;

     label08:
        $c17 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i19);

        $i22 = (int) $c17;

        if $i22 == 47 goto label09;

        i19 = i19 + 1;

        if i19 < $i1 goto label08;

        goto label09;

     label09:
        $r15 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i20, i19);

        interfaceinvoke $r25.<java.util.List: boolean add(java.lang.Object)>($r15);

        goto label05;

     label10:
        $i4 = interfaceinvoke $r25.<java.util.List: int size()>();

        if $i4 <= 1 goto label11;

        $i12 = interfaceinvoke $r25.<java.util.List: int size()>();

        $i13 = $i12 - 1;

        $i14 = interfaceinvoke $r25.<java.util.List: int size()>();

        $i15 = $i14 - 1;

        $r12 = interfaceinvoke $r25.<java.util.List: java.lang.Object get(int)>($i15);

        $r13 = (java.lang.String) $r12;

        $r14 = staticinvoke <org.apache.xmlbeans.impl.common.NameUtil: java.lang.String processFilename(java.lang.String)>($r13);

        interfaceinvoke $r25.<java.util.List: java.lang.Object set(int,java.lang.Object)>($i13, $r14);

     label11:
        $i5 = interfaceinvoke $r25.<java.util.List: int size()>();

        if $i5 <= 0 goto label12;

        $r9 = interfaceinvoke $r25.<java.util.List: java.lang.Object get(int)>(0);

        $r10 = (java.lang.String) $r9;

        $r11 = staticinvoke <org.apache.xmlbeans.impl.common.NameUtil: java.util.List splitDNS(java.lang.String)>($r10);

        interfaceinvoke $r25.<java.util.List: java.lang.Object remove(int)>(0);

        interfaceinvoke $r25.<java.util.List: boolean addAll(int,java.util.Collection)>(0, $r11);

     label12:
        $r26 = new java.lang.StringBuffer;

        specialinvoke $r26.<java.lang.StringBuffer: void <init>()>();

        $r23 = interfaceinvoke r21.<java.util.List: java.util.Iterator iterator()>();

     label13:
        $z2 = interfaceinvoke $r23.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label15;

        $r5 = interfaceinvoke $r23.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.lang.String) $r5;

        $r7 = staticinvoke <org.apache.xmlbeans.impl.common.NameUtil: java.lang.String lowerCamelCase(java.lang.String,boolean,boolean)>($r6, z0, 1);

        $r8 = staticinvoke <org.apache.xmlbeans.impl.common.NameUtil: java.lang.String nonJavaKeyword(java.lang.String)>($r7);

        $i11 = virtualinvoke $r8.<java.lang.String: int length()>();

        if $i11 <= 0 goto label14;

        virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(46);

     label14:
        goto label13;

     label15:
        $i6 = virtualinvoke $r26.<java.lang.StringBuffer: int length()>();

        if $i6 != 0 goto label16;

        return "noNamespace";

     label16:
        if z0 == 0 goto label17;

        $i9 = virtualinvoke $r26.<java.lang.StringBuffer: int length()>();

        $i10 = $i9 - 1;

        $r3 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.String substring(int,int)>(0, $i10);

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String toLowerCase()>();

        return $r4;

     label17:
        $i7 = virtualinvoke $r26.<java.lang.StringBuffer: int length()>();

        $i8 = $i7 - 1;

        $r2 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.String substring(int,int)>(0, $i8);

        return $r2;
    }

    public static void main(java.lang.String[])
    {
        java.io.PrintStream $r2;
        int $i0, i1;
        java.lang.String[] r0;
        java.lang.String $r1, $r3;

        r0 := @parameter0: java.lang.String[];

        i1 = 0;

     label1:
        $i0 = lengthof r0;

        if i1 >= $i0 goto label2;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r1 = r0[i1];

        $r3 = staticinvoke <org.apache.xmlbeans.impl.common.NameUtil: java.lang.String upperCaseUnderbar(java.lang.String)>($r1);

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r3);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public static java.lang.String upperCaseUnderbar(java.lang.String)
    {
        java.lang.StringBuffer $r0;
        int $i0, i1, $i2, i6, i7;
        java.lang.String r1, $r3, $r5, $r7, $r9;
        boolean $z0;
        char $c3, $c4, $c5;
        java.util.List $r2;
        java.lang.Object $r4, $r6, $r8;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = staticinvoke <org.apache.xmlbeans.impl.common.NameUtil: java.util.List splitWords(java.lang.String,boolean)>(r1, 0);

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        i1 = $i0 - 1;

        if i1 < 0 goto label1;

        $r8 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(0);

        $r9 = (java.lang.String) $r8;

        $c5 = virtualinvoke $r9.<java.lang.String: char charAt(int)>(0);

        $z0 = staticinvoke <java.lang.Character: boolean isJavaIdentifierStart(char)>($c5);

        if $z0 != 0 goto label1;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("X_");

     label1:
        i6 = 0;

     label2:
        if i6 >= i1 goto label3;

        $r6 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i6);

        $r7 = (java.lang.String) $r6;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(95);

        i6 = i6 + 1;

        goto label2;

     label3:
        if i1 < 0 goto label4;

        $r4 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i1);

        $r5 = (java.lang.String) $r4;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

     label4:
        $i2 = virtualinvoke $r0.<java.lang.StringBuffer: int length()>();

        i7 = 0;

     label5:
        if i7 >= $i2 goto label6;

        $c3 = virtualinvoke $r0.<java.lang.StringBuffer: char charAt(int)>(i7);

        $c4 = staticinvoke <java.lang.Character: char toUpperCase(char)>($c3);

        virtualinvoke $r0.<java.lang.StringBuffer: void setCharAt(int,char)>(i7, $c4);

        i7 = i7 + 1;

        goto label5;

     label6:
        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    public static java.lang.String upperCamelCase(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.xmlbeans.impl.common.NameUtil: java.lang.String upperCamelCase(java.lang.String,boolean)>(r0, 0);

        return $r1;
    }

    public static java.lang.String upperCamelCase(java.lang.String, boolean)
    {
        java.util.Iterator $r6;
        char $c1;
        java.util.List $r2;
        java.lang.StringBuffer $r0;
        int $i0;
        java.lang.Object $r4, $r7;
        java.lang.String r1, $r3, $r5, $r8;
        boolean z0, $z1, $z2;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = staticinvoke <org.apache.xmlbeans.impl.common.NameUtil: java.util.List splitWords(java.lang.String,boolean)>(r1, z0);

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 <= 0 goto label3;

        $r4 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(0);

        $r5 = (java.lang.String) $r4;

        $c1 = virtualinvoke $r5.<java.lang.String: char charAt(int)>(0);

        $z1 = staticinvoke <java.lang.Character: boolean isJavaIdentifierStart(char)>($c1);

        if $z1 != 0 goto label1;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("X");

     label1:
        $r6 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z2 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label3;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (java.lang.String) $r7;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        goto label2;

     label3:
        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    public static java.lang.String lowerCamelCase(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.xmlbeans.impl.common.NameUtil: java.lang.String lowerCamelCase(java.lang.String,boolean,boolean)>(r0, 0, 1);

        return $r1;
    }

    public static java.lang.String lowerCamelCase(java.lang.String, boolean, boolean)
    {
        java.lang.StringBuffer $r0;
        int $i0;
        java.lang.String r1, $r3, $r5, $r6, $r8;
        boolean z0, $z1, z2, $z3;
        java.util.Iterator $r9;
        char $c1;
        java.util.List $r2;
        java.lang.Object $r4, $r7;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        z2 := @parameter2: boolean;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = staticinvoke <org.apache.xmlbeans.impl.common.NameUtil: java.util.List splitWords(java.lang.String,boolean)>(r1, z0);

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 <= 0 goto label3;

        $r4 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(0);

        $r5 = (java.lang.String) $r4;

        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String toLowerCase()>();

        $c1 = virtualinvoke $r6.<java.lang.String: char charAt(int)>(0);

        $z1 = staticinvoke <java.lang.Character: boolean isJavaIdentifierStart(char)>($c1);

        if $z1 != 0 goto label1;

        if z2 == 0 goto label1;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("x");

     label1:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r9 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

        interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

     label2:
        $z3 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label3;

        $r7 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (java.lang.String) $r7;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        goto label2;

     label3:
        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    public static java.lang.String upperCaseFirstLetter(java.lang.String)
    {
        char $c1, $c2, $c3;
        java.lang.StringBuffer $r1;
        int $i0;
        java.lang.String r0, $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 == 0 goto label1;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $z0 = staticinvoke <java.lang.Character: boolean isUpperCase(char)>($c1);

        if $z0 == 0 goto label2;

     label1:
        return r0;

     label2:
        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>(java.lang.String)>(r0);

        $c2 = virtualinvoke $r1.<java.lang.StringBuffer: char charAt(int)>(0);

        $c3 = staticinvoke <java.lang.Character: char toUpperCase(char)>($c2);

        virtualinvoke $r1.<java.lang.StringBuffer: void setCharAt(int,char)>(0, $c3);

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    private static void addCapped(java.util.List, java.lang.String)
    {
        java.util.List r1;
        int $i0;
        java.lang.String r0, $r2;

        r1 := @parameter0: java.util.List;

        r0 := @parameter1: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 <= 0 goto label1;

        $r2 = staticinvoke <org.apache.xmlbeans.impl.common.NameUtil: java.lang.String upperCaseFirstLetter(java.lang.String)>(r0);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r2);

     label1:
        return;
    }

    public static java.util.List splitWords(java.lang.String, boolean)
    {
        java.util.ArrayList $r0;
        int $i0, $i2, $i3, $i4, $i6, i7, i8, i9, i10;
        java.lang.String r1, $r2, $r3, $r4, $r5;
        boolean z0, $z1, $z2, $z3, $z4;
        char $c1, $c5;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        i7 = 0;

        i8 = 0;

        i9 = 0;

     label01:
        if i9 >= $i0 goto label13;

        $c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i9);

        $i2 = staticinvoke <org.apache.xmlbeans.impl.common.NameUtil: int getCharClass(char,boolean)>($c1, z0);

        i10 = $i2;

        if i8 == 1 goto label04;

        if $i2 != 1 goto label04;

        $r4 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i7, i9);

        staticinvoke <org.apache.xmlbeans.impl.common.NameUtil: void addCapped(java.util.List,java.lang.String)>($r0, $r4);

     label02:
        $c5 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i9);

        $i6 = staticinvoke <org.apache.xmlbeans.impl.common.NameUtil: int getCharClass(char,boolean)>($c5, z0);

        i10 = $i6;

        if $i6 != 1 goto label03;

        i9 = i9 + 1;

        if i9 < $i0 goto label02;

        return $r0;

     label03:
        i7 = i9;

        goto label12;

     label04:
        if i8 != 2 goto label05;

        $z3 = 1;

        goto label06;

     label05:
        $z3 = 0;

     label06:
        if $i2 != 2 goto label07;

        $z4 = 1;

        goto label08;

     label07:
        $z4 = 0;

     label08:
        if $z3 != $z4 goto label10;

        if i8 != 5 goto label09;

        if $i2 != 5 goto label10;

     label09:
        $z1 = staticinvoke <org.apache.xmlbeans.impl.common.NameUtil: boolean isLetter(int)>(i8);

        $z2 = staticinvoke <org.apache.xmlbeans.impl.common.NameUtil: boolean isLetter(int)>($i2);

        if $z1 == $z2 goto label11;

     label10:
        $r5 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i7, i9);

        staticinvoke <org.apache.xmlbeans.impl.common.NameUtil: void addCapped(java.util.List,java.lang.String)>($r0, $r5);

        i7 = i9;

        goto label12;

     label11:
        if i8 != 4 goto label12;

        if $i2 != 5 goto label12;

        $i3 = i7 + 1;

        if i9 <= $i3 goto label12;

        $i4 = i9 - 1;

        $r3 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i7, $i4);

        staticinvoke <org.apache.xmlbeans.impl.common.NameUtil: void addCapped(java.util.List,java.lang.String)>($r0, $r3);

        i7 = i9 - 1;

     label12:
        i8 = i10;

        i9 = i9 + 1;

        goto label01;

     label13:
        $r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>(i7);

        staticinvoke <org.apache.xmlbeans.impl.common.NameUtil: void addCapped(java.util.List,java.lang.String)>($r0, $r2);

        return $r0;
    }

    public static int getCharClass(char, boolean)
    {
        char c0;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6;

        c0 := @parameter0: char;

        z0 := @parameter1: boolean;

        $z1 = staticinvoke <org.apache.xmlbeans.impl.common.NameUtil: boolean isPunctuation(char,boolean)>(c0, z0);

        if $z1 == 0 goto label1;

        return 1;

     label1:
        $z2 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c0);

        if $z2 == 0 goto label2;

        return 2;

     label2:
        $z3 = staticinvoke <java.lang.Character: boolean isUpperCase(char)>(c0);

        if $z3 == 0 goto label3;

        return 4;

     label3:
        $z4 = staticinvoke <java.lang.Character: boolean isLowerCase(char)>(c0);

        if $z4 == 0 goto label4;

        return 5;

     label4:
        $z5 = staticinvoke <java.lang.Character: boolean isLetter(char)>(c0);

        if $z5 == 0 goto label5;

        return 6;

     label5:
        $z6 = staticinvoke <java.lang.Character: boolean isJavaIdentifierPart(char)>(c0);

        if $z6 == 0 goto label6;

        return 3;

     label6:
        return 1;
    }

    private static boolean isLetter(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;

        if i0 == 4 goto label1;

        if i0 == 5 goto label1;

        if i0 != 6 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public static boolean isPunctuation(char, boolean)
    {
        char c0;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        boolean z0, $z1;

        c0 := @parameter0: char;

        z0 := @parameter1: boolean;

        $i1 = (int) c0;

        if $i1 == 45 goto label2;

        $i2 = (int) c0;

        if $i2 == 46 goto label2;

        $i3 = (int) c0;

        if $i3 == 58 goto label2;

        $i4 = (int) c0;

        if $i4 == 183 goto label2;

        $i5 = (int) c0;

        if $i5 != 95 goto label1;

        if z0 == 0 goto label2;

     label1:
        $i6 = (int) c0;

        if $i6 == 903 goto label2;

        $i7 = (int) c0;

        if $i7 == 1757 goto label2;

        $i8 = (int) c0;

        if $i8 != 1758 goto label3;

     label2:
        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        return $z1;
    }

    public static java.lang.String nonJavaKeyword(java.lang.String)
    {
        java.lang.StringBuffer $r1, $r2, $r3;
        java.lang.String r0, $r4;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.apache.xmlbeans.impl.common.NameUtil: boolean isJavaReservedWord(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(120);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;

     label1:
        return r0;
    }

    public static java.lang.String nonExtraKeyword(java.lang.String)
    {
        java.lang.StringBuffer $r1, $r2, $r3;
        java.lang.String r0, $r4;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.apache.xmlbeans.impl.common.NameUtil: boolean isExtraReservedWord(java.lang.String,boolean)>(r0, 1);

        if $z0 == 0 goto label1;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Value");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;

     label1:
        return r0;
    }

    public static java.lang.String nonJavaCommonClassName(java.lang.String)
    {
        java.lang.StringBuffer $r1, $r2, $r3;
        java.lang.String r0, $r4;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.apache.xmlbeans.impl.common.NameUtil: boolean isJavaCommonClassName(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("X");

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;

     label1:
        return r0;
    }

    private static boolean isJavaReservedWord(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.apache.xmlbeans.impl.common.NameUtil: boolean isJavaReservedWord(java.lang.String,boolean)>(r0, 1);

        return $z0;
    }

    private static boolean isJavaReservedWord(java.lang.String, boolean)
    {
        java.util.Set $r0;
        java.lang.String r1;
        boolean z0, $z1;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        r1 = virtualinvoke r1.<java.lang.String: java.lang.String toLowerCase()>();

     label1:
        $r0 = <org.apache.xmlbeans.impl.common.NameUtil: java.util.Set javaWords>;

        $z1 = interfaceinvoke $r0.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        return $z1;
    }

    private static boolean isExtraReservedWord(java.lang.String, boolean)
    {
        java.util.Set $r0;
        java.lang.String r1;
        boolean z0, $z1;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        r1 = virtualinvoke r1.<java.lang.String: java.lang.String toLowerCase()>();

     label1:
        $r0 = <org.apache.xmlbeans.impl.common.NameUtil: java.util.Set extraWords>;

        $z1 = interfaceinvoke $r0.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        return $z1;
    }

    public static boolean isJavaCommonClassName(java.lang.String)
    {
        java.util.Set $r1;
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.apache.xmlbeans.impl.common.NameUtil: java.util.Set javaNames>;

        $z0 = interfaceinvoke $r1.<java.util.Set: boolean contains(java.lang.Object)>(r0);

        return $z0;
    }

    static void <clinit>()
    {
        java.lang.String[] $r1, $r4, $r7;
        java.util.HashSet $r0, $r3, $r6;
        java.util.List $r2, $r5, $r8;

        <org.apache.xmlbeans.impl.common.NameUtil: int NOCASE> = 6;

        <org.apache.xmlbeans.impl.common.NameUtil: int LOWER> = 5;

        <org.apache.xmlbeans.impl.common.NameUtil: int UPPER> = 4;

        <org.apache.xmlbeans.impl.common.NameUtil: int MARK> = 3;

        <org.apache.xmlbeans.impl.common.NameUtil: int DIGIT> = 2;

        <org.apache.xmlbeans.impl.common.NameUtil: int PUNCT> = 1;

        <org.apache.xmlbeans.impl.common.NameUtil: int START> = 0;

        <org.apache.xmlbeans.impl.common.NameUtil: java.lang.String LANG_PREFIX> = "java.";

        <org.apache.xmlbeans.impl.common.NameUtil: java.lang.String JAVA_NS_PREFIX> = "java:";

        <org.apache.xmlbeans.impl.common.NameUtil: boolean DEBUG> = 0;

        <org.apache.xmlbeans.impl.common.NameUtil: char ELHIZB> = 1758;

        <org.apache.xmlbeans.impl.common.NameUtil: char AYAH> = 1757;

        <org.apache.xmlbeans.impl.common.NameUtil: char TELEIA> = 903;

        <org.apache.xmlbeans.impl.common.NameUtil: char DOT> = 183;

        <org.apache.xmlbeans.impl.common.NameUtil: char USCORE> = 95;

        <org.apache.xmlbeans.impl.common.NameUtil: char COLON> = 58;

        <org.apache.xmlbeans.impl.common.NameUtil: char PERIOD> = 46;

        <org.apache.xmlbeans.impl.common.NameUtil: char HYPHEN> = 45;

        $r0 = new java.util.HashSet;

        $r1 = newarray (java.lang.String)[54];

        $r1[0] = "assert";

        $r1[1] = "abstract";

        $r1[2] = "boolean";

        $r1[3] = "break";

        $r1[4] = "byte";

        $r1[5] = "case";

        $r1[6] = "catch";

        $r1[7] = "char";

        $r1[8] = "class";

        $r1[9] = "const";

        $r1[10] = "continue";

        $r1[11] = "default";

        $r1[12] = "do";

        $r1[13] = "double";

        $r1[14] = "else";

        $r1[15] = "enum";

        $r1[16] = "extends";

        $r1[17] = "false";

        $r1[18] = "final";

        $r1[19] = "finally";

        $r1[20] = "float";

        $r1[21] = "for";

        $r1[22] = "goto";

        $r1[23] = "if";

        $r1[24] = "implements";

        $r1[25] = "import";

        $r1[26] = "instanceof";

        $r1[27] = "int";

        $r1[28] = "interface";

        $r1[29] = "long";

        $r1[30] = "native";

        $r1[31] = "new";

        $r1[32] = "null";

        $r1[33] = "package";

        $r1[34] = "private";

        $r1[35] = "protected";

        $r1[36] = "public";

        $r1[37] = "return";

        $r1[38] = "short";

        $r1[39] = "static";

        $r1[40] = "strictfp";

        $r1[41] = "super";

        $r1[42] = "switch";

        $r1[43] = "synchronized";

        $r1[44] = "this";

        $r1[45] = "threadsafe";

        $r1[46] = "throw";

        $r1[47] = "throws";

        $r1[48] = "transient";

        $r1[49] = "true";

        $r1[50] = "try";

        $r1[51] = "void";

        $r1[52] = "volatile";

        $r1[53] = "while";

        $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1);

        specialinvoke $r0.<java.util.HashSet: void <init>(java.util.Collection)>($r2);

        <org.apache.xmlbeans.impl.common.NameUtil: java.util.Set javaWords> = $r0;

        $r3 = new java.util.HashSet;

        $r4 = newarray (java.lang.String)[4];

        $r4[0] = "i";

        $r4[1] = "target";

        $r4[2] = "org";

        $r4[3] = "com";

        $r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4);

        specialinvoke $r3.<java.util.HashSet: void <init>(java.util.Collection)>($r5);

        <org.apache.xmlbeans.impl.common.NameUtil: java.util.Set extraWords> = $r3;

        $r6 = new java.util.HashSet;

        $r7 = newarray (java.lang.String)[92];

        $r7[0] = "CharSequence";

        $r7[1] = "Cloneable";

        $r7[2] = "Comparable";

        $r7[3] = "Runnable";

        $r7[4] = "Boolean";

        $r7[5] = "Byte";

        $r7[6] = "Character";

        $r7[7] = "Class";

        $r7[8] = "ClassLoader";

        $r7[9] = "Compiler";

        $r7[10] = "Double";

        $r7[11] = "Float";

        $r7[12] = "InheritableThreadLocal";

        $r7[13] = "Integer";

        $r7[14] = "Long";

        $r7[15] = "Math";

        $r7[16] = "Number";

        $r7[17] = "Object";

        $r7[18] = "Package";

        $r7[19] = "Process";

        $r7[20] = "Runtime";

        $r7[21] = "RuntimePermission";

        $r7[22] = "SecurityManager";

        $r7[23] = "Short";

        $r7[24] = "StackTraceElement";

        $r7[25] = "StrictMath";

        $r7[26] = "String";

        $r7[27] = "StringBuffer";

        $r7[28] = "System";

        $r7[29] = "Thread";

        $r7[30] = "ThreadGroup";

        $r7[31] = "ThreadLocal";

        $r7[32] = "Throwable";

        $r7[33] = "Void";

        $r7[34] = "ArithmeticException";

        $r7[35] = "ArrayIndexOutOfBoundsException";

        $r7[36] = "ArrayStoreException";

        $r7[37] = "ClassCastException";

        $r7[38] = "ClassNotFoundException";

        $r7[39] = "CloneNotSupportedException";

        $r7[40] = "Exception";

        $r7[41] = "IllegalAccessException";

        $r7[42] = "IllegalArgumentException";

        $r7[43] = "IllegalMonitorStateException";

        $r7[44] = "IllegalStateException";

        $r7[45] = "IllegalThreadStateException";

        $r7[46] = "IndexOutOfBoundsException";

        $r7[47] = "InstantiationException";

        $r7[48] = "InterruptedException";

        $r7[49] = "NegativeArraySizeException";

        $r7[50] = "NoSuchFieldException";

        $r7[51] = "NoSuchMethodException";

        $r7[52] = "NullPointerException";

        $r7[53] = "NumberFormatException";

        $r7[54] = "RuntimeException";

        $r7[55] = "SecurityException";

        $r7[56] = "StringIndexOutOfBoundsException";

        $r7[57] = "UnsupportedOperationException";

        $r7[58] = "AbstractMethodError";

        $r7[59] = "AssertionError";

        $r7[60] = "ClassCircularityError";

        $r7[61] = "ClassFormatError";

        $r7[62] = "Error";

        $r7[63] = "ExceptionInInitializerError";

        $r7[64] = "IllegalAccessError";

        $r7[65] = "IncompatibleClassChangeError";

        $r7[66] = "InstantiationError";

        $r7[67] = "InternalError";

        $r7[68] = "LinkageError";

        $r7[69] = "NoClassDefFoundError";

        $r7[70] = "NoSuchFieldError";

        $r7[71] = "NoSuchMethodError";

        $r7[72] = "OutOfMemoryError";

        $r7[73] = "StackOverflowError";

        $r7[74] = "ThreadDeath";

        $r7[75] = "UnknownError";

        $r7[76] = "UnsatisfiedLinkError";

        $r7[77] = "UnsupportedClassVersionError";

        $r7[78] = "VerifyError";

        $r7[79] = "VirtualMachineError";

        $r7[80] = "BigInteger";

        $r7[81] = "BigDecimal";

        $r7[82] = "Enum";

        $r7[83] = "Date";

        $r7[84] = "GDate";

        $r7[85] = "GDuration";

        $r7[86] = "QName";

        $r7[87] = "List";

        $r7[88] = "XmlObject";

        $r7[89] = "XmlCursor";

        $r7[90] = "XmlBeans";

        $r7[91] = "SchemaType";

        $r8 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r7);

        specialinvoke $r6.<java.util.HashSet: void <init>(java.util.Collection)>($r8);

        <org.apache.xmlbeans.impl.common.NameUtil: java.util.Set javaNames> = $r6;

        return;
    }
}
