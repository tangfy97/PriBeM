class org.springframework.expression.spel.standard.Tokenizer extends java.lang.Object
{
    java.lang.String expressionString;
    char[] toProcess;
    int pos;
    int max;
    java.util.List tokens;
    private static final java.lang.String[] alternativeOperatorNames;
    private static final byte[] flags;
    private static final byte IS_DIGIT;
    private static final byte IS_HEXDIGIT;
    private static final byte IS_ALPHA;

    static void <clinit>()
    {
        byte[] $r1, $r2, $r3, $r4, $r5, $r6;
        java.lang.String[] $r0;
        byte $b0, $b1, $b2, $b3, $b4, $b5, $b6, $b7, $b8, $b9, $b10, $b11, $b12, $b13, $b14;
        int i15, i16, i17, i18, i19;

        <org.springframework.expression.spel.standard.Tokenizer: byte IS_ALPHA> = 4;

        <org.springframework.expression.spel.standard.Tokenizer: byte IS_HEXDIGIT> = 2;

        <org.springframework.expression.spel.standard.Tokenizer: byte IS_DIGIT> = 1;

        $r0 = newarray (java.lang.String)[9];

        $r0[0] = "DIV";

        $r0[1] = "EQ";

        $r0[2] = "GE";

        $r0[3] = "GT";

        $r0[4] = "LE";

        $r0[5] = "LT";

        $r0[6] = "MOD";

        $r0[7] = "NE";

        $r0[8] = "NOT";

        <org.springframework.expression.spel.standard.Tokenizer: java.lang.String[] alternativeOperatorNames> = $r0;

        $r1 = newarray (byte)[256];

        <org.springframework.expression.spel.standard.Tokenizer: byte[] flags> = $r1;

        i15 = 48;

        goto label02;

     label01:
        $r2 = <org.springframework.expression.spel.standard.Tokenizer: byte[] flags>;

        $b0 = $r2[i15];

        $b1 = $b0 | 3;

        $b2 = (byte) $b1;

        $r2[i15] = $b2;

        i15 = i15 + 1;

     label02:
        if i15 <= 57 goto label01;

        i16 = 65;

        goto label04;

     label03:
        $r3 = <org.springframework.expression.spel.standard.Tokenizer: byte[] flags>;

        $b3 = $r3[i16];

        $b4 = $b3 | 2;

        $b5 = (byte) $b4;

        $r3[i16] = $b5;

        i16 = i16 + 1;

     label04:
        if i16 <= 70 goto label03;

        i17 = 97;

        goto label06;

     label05:
        $r4 = <org.springframework.expression.spel.standard.Tokenizer: byte[] flags>;

        $b6 = $r4[i17];

        $b7 = $b6 | 2;

        $b8 = (byte) $b7;

        $r4[i17] = $b8;

        i17 = i17 + 1;

     label06:
        if i17 <= 102 goto label05;

        i18 = 65;

        goto label08;

     label07:
        $r5 = <org.springframework.expression.spel.standard.Tokenizer: byte[] flags>;

        $b9 = $r5[i18];

        $b10 = $b9 | 4;

        $b11 = (byte) $b10;

        $r5[i18] = $b11;

        i18 = i18 + 1;

     label08:
        if i18 <= 90 goto label07;

        i19 = 97;

        goto label10;

     label09:
        $r6 = <org.springframework.expression.spel.standard.Tokenizer: byte[] flags>;

        $b12 = $r6[i19];

        $b13 = $b12 | 4;

        $b14 = (byte) $b13;

        $r6[i19] = $b14;

        i19 = i19 + 1;

     label10:
        if i19 <= 122 goto label09;

        return;
    }

    public void <init>(java.lang.String)
    {
        java.util.ArrayList $r1;
        org.springframework.expression.spel.standard.Tokenizer r0;
        int $i0;
        char[] $r7, $r8;
        java.lang.StringBuilder $r3, $r5;
        java.lang.String r2, $r4, $r6;

        r0 := @this: org.springframework.expression.spel.standard.Tokenizer;

        r2 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.springframework.expression.spel.standard.Tokenizer: java.util.List tokens> = $r1;

        r0.<org.springframework.expression.spel.standard.Tokenizer: java.lang.String expressionString> = r2;

        $r3 = new java.lang.StringBuilder;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r2);

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>($r4);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\u0000");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = virtualinvoke $r6.<java.lang.String: char[] toCharArray()>();

        r0.<org.springframework.expression.spel.standard.Tokenizer: char[] toProcess> = $r7;

        $r8 = r0.<org.springframework.expression.spel.standard.Tokenizer: char[] toProcess>;

        $i0 = lengthof $r8;

        r0.<org.springframework.expression.spel.standard.Tokenizer: int max> = $i0;

        r0.<org.springframework.expression.spel.standard.Tokenizer: int pos> = 0;

        virtualinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: void process()>();

        return;
    }

    public void process()
    {
        java.lang.Integer $r46;
        org.springframework.expression.spel.standard.Tokenizer r0;
        java.lang.StringBuilder $r47, $r48, $r49, $r50, $r52;
        org.springframework.expression.spel.standard.TokenKind $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r43;
        java.lang.String $r51;
        char[] $r1;
        java.lang.IllegalStateException $r53;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        int $i0, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        char c1;

        r0 := @this: org.springframework.expression.spel.standard.Tokenizer;

        goto label45;

     label01:
        $r1 = r0.<org.springframework.expression.spel.standard.Tokenizer: char[] toProcess>;

        $i0 = r0.<org.springframework.expression.spel.standard.Tokenizer: int pos>;

        c1 = $r1[$i0];

        $z0 = specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: boolean isAlphabetic(char)>(c1);

        if $z0 == 0 goto label02;

        specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: void lexIdentifier()>();

        goto label45;

     label02:
        $i8 = (int) c1;

        lookupswitch($i8)
        {
            case 0: goto label43;
            case 9: goto label40;
            case 10: goto label40;
            case 13: goto label40;
            case 32: goto label40;
            case 33: goto label22;
            case 34: goto label42;
            case 35: goto label15;
            case 36: goto label31;
            case 37: goto label11;
            case 39: goto label41;
            case 40: goto label12;
            case 41: goto label13;
            case 42: goto label09;
            case 43: goto label03;
            case 44: goto label08;
            case 45: goto label05;
            case 46: goto label07;
            case 47: goto label10;
            case 48: goto label37;
            case 49: goto label37;
            case 50: goto label37;
            case 51: goto label37;
            case 52: goto label37;
            case 53: goto label37;
            case 54: goto label37;
            case 55: goto label37;
            case 56: goto label37;
            case 57: goto label37;
            case 58: goto label06;
            case 60: goto label35;
            case 61: goto label25;
            case 62: goto label33;
            case 63: goto label27;
            case 64: goto label19;
            case 91: goto label14;
            case 93: goto label16;
            case 94: goto label20;
            case 95: goto label04;
            case 123: goto label17;
            case 125: goto label18;
            default: goto label44;
        };

     label03:
        $r31 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind PLUS>;

        specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: void pushCharToken(org.springframework.expression.spel.standard.TokenKind)>($r31);

        goto label45;

     label04:
        specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: void lexIdentifier()>();

        goto label45;

     label05:
        $r29 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind MINUS>;

        specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: void pushCharToken(org.springframework.expression.spel.standard.TokenKind)>($r29);

        goto label45;

     label06:
        $r26 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind COLON>;

        specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: void pushCharToken(org.springframework.expression.spel.standard.TokenKind)>($r26);

        goto label45;

     label07:
        $r28 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind DOT>;

        specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: void pushCharToken(org.springframework.expression.spel.standard.TokenKind)>($r28);

        goto label45;

     label08:
        $r30 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind COMMA>;

        specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: void pushCharToken(org.springframework.expression.spel.standard.TokenKind)>($r30);

        goto label45;

     label09:
        $r32 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind STAR>;

        specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: void pushCharToken(org.springframework.expression.spel.standard.TokenKind)>($r32);

        goto label45;

     label10:
        $r27 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind DIV>;

        specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: void pushCharToken(org.springframework.expression.spel.standard.TokenKind)>($r27);

        goto label45;

     label11:
        $r35 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind MOD>;

        specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: void pushCharToken(org.springframework.expression.spel.standard.TokenKind)>($r35);

        goto label45;

     label12:
        $r34 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind LPAREN>;

        specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: void pushCharToken(org.springframework.expression.spel.standard.TokenKind)>($r34);

        goto label45;

     label13:
        $r33 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind RPAREN>;

        specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: void pushCharToken(org.springframework.expression.spel.standard.TokenKind)>($r33);

        goto label45;

     label14:
        $r8 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind LSQUARE>;

        specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: void pushCharToken(org.springframework.expression.spel.standard.TokenKind)>($r8);

        goto label45;

     label15:
        $r38 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind HASH>;

        specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: void pushCharToken(org.springframework.expression.spel.standard.TokenKind)>($r38);

        goto label45;

     label16:
        $r7 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind RSQUARE>;

        specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: void pushCharToken(org.springframework.expression.spel.standard.TokenKind)>($r7);

        goto label45;

     label17:
        $r3 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind LCURLY>;

        specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: void pushCharToken(org.springframework.expression.spel.standard.TokenKind)>($r3);

        goto label45;

     label18:
        $r2 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind RCURLY>;

        specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: void pushCharToken(org.springframework.expression.spel.standard.TokenKind)>($r2);

        goto label45;

     label19:
        $r9 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind BEAN_REF>;

        specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: void pushCharToken(org.springframework.expression.spel.standard.TokenKind)>($r9);

        goto label45;

     label20:
        $r4 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind SELECT_FIRST>;

        $z1 = specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: boolean isTwoCharToken(org.springframework.expression.spel.standard.TokenKind)>($r4);

        if $z1 == 0 goto label21;

        $r6 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind SELECT_FIRST>;

        specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: void pushPairToken(org.springframework.expression.spel.standard.TokenKind)>($r6);

        goto label45;

     label21:
        $r5 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind POWER>;

        specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: void pushCharToken(org.springframework.expression.spel.standard.TokenKind)>($r5);

        goto label45;

     label22:
        $r39 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind NE>;

        $z9 = specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: boolean isTwoCharToken(org.springframework.expression.spel.standard.TokenKind)>($r39);

        if $z9 == 0 goto label23;

        $r43 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind NE>;

        specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: void pushPairToken(org.springframework.expression.spel.standard.TokenKind)>($r43);

        goto label45;

     label23:
        $r40 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind PROJECT>;

        $z10 = specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: boolean isTwoCharToken(org.springframework.expression.spel.standard.TokenKind)>($r40);

        if $z10 == 0 goto label24;

        $r42 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind PROJECT>;

        specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: void pushPairToken(org.springframework.expression.spel.standard.TokenKind)>($r42);

        goto label45;

     label24:
        $r41 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind NOT>;

        specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: void pushCharToken(org.springframework.expression.spel.standard.TokenKind)>($r41);

        goto label45;

     label25:
        $r20 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind EQ>;

        $z6 = specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: boolean isTwoCharToken(org.springframework.expression.spel.standard.TokenKind)>($r20);

        if $z6 == 0 goto label26;

        $r22 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind EQ>;

        specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: void pushPairToken(org.springframework.expression.spel.standard.TokenKind)>($r22);

        goto label45;

     label26:
        $r21 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind ASSIGN>;

        specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: void pushCharToken(org.springframework.expression.spel.standard.TokenKind)>($r21);

        goto label45;

     label27:
        $r10 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind SELECT>;

        $z2 = specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: boolean isTwoCharToken(org.springframework.expression.spel.standard.TokenKind)>($r10);

        if $z2 == 0 goto label28;

        $r16 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind SELECT>;

        specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: void pushPairToken(org.springframework.expression.spel.standard.TokenKind)>($r16);

        goto label45;

     label28:
        $r11 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind ELVIS>;

        $z3 = specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: boolean isTwoCharToken(org.springframework.expression.spel.standard.TokenKind)>($r11);

        if $z3 == 0 goto label29;

        $r15 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind ELVIS>;

        specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: void pushPairToken(org.springframework.expression.spel.standard.TokenKind)>($r15);

        goto label45;

     label29:
        $r12 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind SAFE_NAVI>;

        $z4 = specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: boolean isTwoCharToken(org.springframework.expression.spel.standard.TokenKind)>($r12);

        if $z4 == 0 goto label30;

        $r14 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind SAFE_NAVI>;

        specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: void pushPairToken(org.springframework.expression.spel.standard.TokenKind)>($r14);

        goto label45;

     label30:
        $r13 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind QMARK>;

        specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: void pushCharToken(org.springframework.expression.spel.standard.TokenKind)>($r13);

        goto label45;

     label31:
        $r36 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind SELECT_LAST>;

        $z8 = specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: boolean isTwoCharToken(org.springframework.expression.spel.standard.TokenKind)>($r36);

        if $z8 == 0 goto label32;

        $r37 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind SELECT_LAST>;

        specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: void pushPairToken(org.springframework.expression.spel.standard.TokenKind)>($r37);

        goto label45;

     label32:
        specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: void lexIdentifier()>();

        goto label45;

     label33:
        $r17 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind GE>;

        $z5 = specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: boolean isTwoCharToken(org.springframework.expression.spel.standard.TokenKind)>($r17);

        if $z5 == 0 goto label34;

        $r19 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind GE>;

        specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: void pushPairToken(org.springframework.expression.spel.standard.TokenKind)>($r19);

        goto label45;

     label34:
        $r18 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind GT>;

        specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: void pushCharToken(org.springframework.expression.spel.standard.TokenKind)>($r18);

        goto label45;

     label35:
        $r23 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind LE>;

        $z7 = specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: boolean isTwoCharToken(org.springframework.expression.spel.standard.TokenKind)>($r23);

        if $z7 == 0 goto label36;

        $r25 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind LE>;

        specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: void pushPairToken(org.springframework.expression.spel.standard.TokenKind)>($r25);

        goto label45;

     label36:
        $r24 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind LT>;

        specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: void pushCharToken(org.springframework.expression.spel.standard.TokenKind)>($r24);

        goto label45;

     label37:
        $i9 = (int) c1;

        if $i9 != 48 goto label38;

        $z11 = 1;

        goto label39;

     label38:
        $z11 = 0;

     label39:
        specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: void lexNumericLiteral(boolean)>($z11);

        goto label45;

     label40:
        $i2 = r0.<org.springframework.expression.spel.standard.Tokenizer: int pos>;

        $i3 = $i2 + 1;

        r0.<org.springframework.expression.spel.standard.Tokenizer: int pos> = $i3;

        goto label45;

     label41:
        specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: void lexQuotedStringLiteral()>();

        goto label45;

     label42:
        specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: void lexDoubleQuotedStringLiteral()>();

        goto label45;

     label43:
        $i4 = r0.<org.springframework.expression.spel.standard.Tokenizer: int pos>;

        $i5 = $i4 + 1;

        r0.<org.springframework.expression.spel.standard.Tokenizer: int pos> = $i5;

        goto label45;

     label44:
        $r53 = new java.lang.IllegalStateException;

        $r52 = new java.lang.StringBuilder;

        specialinvoke $r52.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot handle (");

        $i10 = (int) c1;

        $r46 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i10);

        $r47 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r46);

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") \'");

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c1);

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r53.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r51);

        throw $r53;

     label45:
        $i6 = r0.<org.springframework.expression.spel.standard.Tokenizer: int pos>;

        $i7 = r0.<org.springframework.expression.spel.standard.Tokenizer: int max>;

        if $i6 < $i7 goto label01;

        return;
    }

    public java.util.List getTokens()
    {
        java.util.List $r1;
        org.springframework.expression.spel.standard.Tokenizer r0;

        r0 := @this: org.springframework.expression.spel.standard.Tokenizer;

        $r1 = r0.<org.springframework.expression.spel.standard.Tokenizer: java.util.List tokens>;

        return $r1;
    }

    private void lexQuotedStringLiteral()
    {
        java.lang.Object[] $r4;
        org.springframework.expression.spel.standard.Token $r14;
        org.springframework.expression.spel.SpelParseException $r12;
        org.springframework.expression.spel.InternalParseException $r13;
        int i0, $i1, $i2, $i3, $i5, $i6, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        java.lang.String $r6;
        boolean z0;
        org.springframework.expression.spel.SpelMessage $r5;
        char c4, $c7;
        java.util.List $r9;
        org.springframework.expression.spel.standard.Tokenizer r0;
        char[] $r1, $r7, $r11;
        org.springframework.expression.spel.standard.TokenKind $r10;

        r0 := @this: org.springframework.expression.spel.standard.Tokenizer;

        i0 = r0.<org.springframework.expression.spel.standard.Tokenizer: int pos>;

        z0 = 0;

        goto label4;

     label1:
        $i1 = r0.<org.springframework.expression.spel.standard.Tokenizer: int pos>;

        $i2 = $i1 + 1;

        r0.<org.springframework.expression.spel.standard.Tokenizer: int pos> = $i2;

        $r1 = r0.<org.springframework.expression.spel.standard.Tokenizer: char[] toProcess>;

        $i3 = r0.<org.springframework.expression.spel.standard.Tokenizer: int pos>;

        c4 = $r1[$i3];

        $i14 = (int) c4;

        if $i14 != 39 goto label3;

        $r7 = r0.<org.springframework.expression.spel.standard.Tokenizer: char[] toProcess>;

        $i5 = r0.<org.springframework.expression.spel.standard.Tokenizer: int pos>;

        $i6 = $i5 + 1;

        $c7 = $r7[$i6];

        $i15 = (int) $c7;

        if $i15 != 39 goto label2;

        $i8 = r0.<org.springframework.expression.spel.standard.Tokenizer: int pos>;

        $i9 = $i8 + 1;

        r0.<org.springframework.expression.spel.standard.Tokenizer: int pos> = $i9;

        goto label3;

     label2:
        z0 = 1;

     label3:
        if c4 != 0 goto label4;

        $r13 = new org.springframework.expression.spel.InternalParseException;

        $r12 = new org.springframework.expression.spel.SpelParseException;

        $r6 = r0.<org.springframework.expression.spel.standard.Tokenizer: java.lang.String expressionString>;

        $r5 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage NON_TERMINATING_QUOTED_STRING>;

        $r4 = newarray (java.lang.Object)[0];

        specialinvoke $r12.<org.springframework.expression.spel.SpelParseException: void <init>(java.lang.String,int,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($r6, i0, $r5, $r4);

        specialinvoke $r13.<org.springframework.expression.spel.InternalParseException: void <init>(org.springframework.expression.spel.SpelParseException)>($r12);

        throw $r13;

     label4:
        if z0 == 0 goto label1;

        $i10 = r0.<org.springframework.expression.spel.standard.Tokenizer: int pos>;

        $i11 = $i10 + 1;

        r0.<org.springframework.expression.spel.standard.Tokenizer: int pos> = $i11;

        $r9 = r0.<org.springframework.expression.spel.standard.Tokenizer: java.util.List tokens>;

        $r14 = new org.springframework.expression.spel.standard.Token;

        $r10 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind LITERAL_STRING>;

        $i12 = r0.<org.springframework.expression.spel.standard.Tokenizer: int pos>;

        $r11 = specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: char[] subarray(int,int)>(i0, $i12);

        $i13 = r0.<org.springframework.expression.spel.standard.Tokenizer: int pos>;

        specialinvoke $r14.<org.springframework.expression.spel.standard.Token: void <init>(org.springframework.expression.spel.standard.TokenKind,char[],int,int)>($r10, $r11, i0, $i13);

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r14);

        return;
    }

    private void lexDoubleQuotedStringLiteral()
    {
        java.lang.Object[] $r4;
        org.springframework.expression.spel.standard.Token $r13;
        org.springframework.expression.spel.SpelParseException $r11;
        org.springframework.expression.spel.InternalParseException $r12;
        int i0, $i1, $i2, $i3, $i5, $i6, $i7, $i8, $i9;
        java.lang.String $r6;
        boolean z0;
        org.springframework.expression.spel.SpelMessage $r5;
        char c4;
        java.util.List $r8;
        org.springframework.expression.spel.standard.Tokenizer r0;
        char[] $r1, $r10;
        org.springframework.expression.spel.standard.TokenKind $r9;

        r0 := @this: org.springframework.expression.spel.standard.Tokenizer;

        i0 = r0.<org.springframework.expression.spel.standard.Tokenizer: int pos>;

        z0 = 0;

        goto label3;

     label1:
        $i1 = r0.<org.springframework.expression.spel.standard.Tokenizer: int pos>;

        $i2 = $i1 + 1;

        r0.<org.springframework.expression.spel.standard.Tokenizer: int pos> = $i2;

        $r1 = r0.<org.springframework.expression.spel.standard.Tokenizer: char[] toProcess>;

        $i3 = r0.<org.springframework.expression.spel.standard.Tokenizer: int pos>;

        c4 = $r1[$i3];

        $i9 = (int) c4;

        if $i9 != 34 goto label2;

        z0 = 1;

     label2:
        if c4 != 0 goto label3;

        $r12 = new org.springframework.expression.spel.InternalParseException;

        $r11 = new org.springframework.expression.spel.SpelParseException;

        $r6 = r0.<org.springframework.expression.spel.standard.Tokenizer: java.lang.String expressionString>;

        $r5 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage NON_TERMINATING_DOUBLE_QUOTED_STRING>;

        $r4 = newarray (java.lang.Object)[0];

        specialinvoke $r11.<org.springframework.expression.spel.SpelParseException: void <init>(java.lang.String,int,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($r6, i0, $r5, $r4);

        specialinvoke $r12.<org.springframework.expression.spel.InternalParseException: void <init>(org.springframework.expression.spel.SpelParseException)>($r11);

        throw $r12;

     label3:
        if z0 == 0 goto label1;

        $i5 = r0.<org.springframework.expression.spel.standard.Tokenizer: int pos>;

        $i6 = $i5 + 1;

        r0.<org.springframework.expression.spel.standard.Tokenizer: int pos> = $i6;

        $r8 = r0.<org.springframework.expression.spel.standard.Tokenizer: java.util.List tokens>;

        $r13 = new org.springframework.expression.spel.standard.Token;

        $r9 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind LITERAL_STRING>;

        $i7 = r0.<org.springframework.expression.spel.standard.Tokenizer: int pos>;

        $r10 = specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: char[] subarray(int,int)>(i0, $i7);

        $i8 = r0.<org.springframework.expression.spel.standard.Tokenizer: int pos>;

        specialinvoke $r13.<org.springframework.expression.spel.standard.Token: void <init>(org.springframework.expression.spel.standard.TokenKind,char[],int,int)>($r9, $r10, i0, $i8);

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r13);

        return;
    }

    private void lexNumericLiteral(boolean)
    {
        org.springframework.expression.spel.standard.Tokenizer r0;
        java.lang.Object[] $r13;
        java.lang.String $r15;
        org.springframework.expression.spel.SpelMessage $r14;
        char[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r16, $r17, $r18, $r19, $r20, $r21, $r22;
        org.springframework.expression.spel.SpelParseException $r23;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, z11, $z12, $z13, $z14, z15, z16, z17, z18;
        org.springframework.expression.spel.InternalParseException $r24;
        int i0, $i1, $i2, $i3, $i4, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i16, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i30, $i31, $i32, $i33, $i34, $i35, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i46, $i47, $i48, i51, $i53, $i54, $i55, $i57, $i58, $i60, $i61, $i62;
        char $c5, $c15, $c17, $c29, $c36, c45, $c49, c50, c52, $c56, c59;

        r0 := @this: org.springframework.expression.spel.standard.Tokenizer;

        z0 := @parameter0: boolean;

        z11 = 0;

        z18 = 0;

        z17 = 0;

        i0 = r0.<org.springframework.expression.spel.standard.Tokenizer: int pos>;

        $r1 = r0.<org.springframework.expression.spel.standard.Tokenizer: char[] toProcess>;

        $i1 = r0.<org.springframework.expression.spel.standard.Tokenizer: int pos>;

        $i2 = $i1 + 1;

        c45 = $r1[$i2];

        $i60 = (int) c45;

        if $i60 == 120 goto label01;

        $i61 = (int) c45;

        if $i61 == 88 goto label01;

        $z12 = 0;

        goto label02;

     label01:
        $z12 = 1;

     label02:
        if z0 == 0 goto label06;

        if $z12 == 0 goto label06;

        $i31 = r0.<org.springframework.expression.spel.standard.Tokenizer: int pos>;

        $i32 = $i31 + 1;

        r0.<org.springframework.expression.spel.standard.Tokenizer: int pos> = $i32;

     label03:
        $i33 = r0.<org.springframework.expression.spel.standard.Tokenizer: int pos>;

        $i34 = $i33 + 1;

        r0.<org.springframework.expression.spel.standard.Tokenizer: int pos> = $i34;

        $r17 = r0.<org.springframework.expression.spel.standard.Tokenizer: char[] toProcess>;

        $i35 = r0.<org.springframework.expression.spel.standard.Tokenizer: int pos>;

        $c36 = $r17[$i35];

        $z9 = specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: boolean isHexadecimalDigit(char)>($c36);

        if $z9 != 0 goto label03;

        $z10 = specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: boolean isChar(char,char)>(76, 108);

        if $z10 == 0 goto label04;

        $i41 = i0 + 2;

        $i40 = r0.<org.springframework.expression.spel.standard.Tokenizer: int pos>;

        $r19 = specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: char[] subarray(int,int)>($i41, $i40);

        $i42 = r0.<org.springframework.expression.spel.standard.Tokenizer: int pos>;

        specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: void pushHexIntToken(char[],boolean,int,int)>($r19, 1, i0, $i42);

        $i43 = r0.<org.springframework.expression.spel.standard.Tokenizer: int pos>;

        $i44 = $i43 + 1;

        r0.<org.springframework.expression.spel.standard.Tokenizer: int pos> = $i44;

        goto label05;

     label04:
        $i38 = i0 + 2;

        $i37 = r0.<org.springframework.expression.spel.standard.Tokenizer: int pos>;

        $r18 = specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: char[] subarray(int,int)>($i38, $i37);

        $i39 = r0.<org.springframework.expression.spel.standard.Tokenizer: int pos>;

        specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: void pushHexIntToken(char[],boolean,int,int)>($r18, 0, i0, $i39);

     label05:
        return;

     label06:
        $i46 = r0.<org.springframework.expression.spel.standard.Tokenizer: int pos>;

        $i47 = $i46 + 1;

        r0.<org.springframework.expression.spel.standard.Tokenizer: int pos> = $i47;

        $r20 = r0.<org.springframework.expression.spel.standard.Tokenizer: char[] toProcess>;

        $i48 = r0.<org.springframework.expression.spel.standard.Tokenizer: int pos>;

        $c49 = $r20[$i48];

        $z13 = specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: boolean isDigit(char)>($c49);

        if $z13 != 0 goto label06;

        $r2 = r0.<org.springframework.expression.spel.standard.Tokenizer: char[] toProcess>;

        $i3 = r0.<org.springframework.expression.spel.standard.Tokenizer: int pos>;

        c50 = $r2[$i3];

        $i62 = (int) c50;

        if $i62 != 46 goto label08;

        z11 = 1;

        z18 = 1;

        z17 = 1;

     label07:
        $i26 = r0.<org.springframework.expression.spel.standard.Tokenizer: int pos>;

        $i27 = $i26 + 1;

        r0.<org.springframework.expression.spel.standard.Tokenizer: int pos> = $i27;

        $r16 = r0.<org.springframework.expression.spel.standard.Tokenizer: char[] toProcess>;

        $i28 = r0.<org.springframework.expression.spel.standard.Tokenizer: int pos>;

        $c29 = $r16[$i28];

        $z8 = specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: boolean isDigit(char)>($c29);

        if $z8 != 0 goto label07;

     label08:
        $i30 = r0.<org.springframework.expression.spel.standard.Tokenizer: int pos>;

        i51 = $i30;

        $z1 = specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: boolean isChar(char,char)>(76, 108);

        if $z1 == 0 goto label10;

        if z17 == 0 goto label09;

        $r24 = new org.springframework.expression.spel.InternalParseException;

        $r23 = new org.springframework.expression.spel.SpelParseException;

        $r15 = r0.<org.springframework.expression.spel.standard.Tokenizer: java.lang.String expressionString>;

        $r14 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage REAL_CANNOT_BE_LONG>;

        $r13 = newarray (java.lang.Object)[0];

        specialinvoke $r23.<org.springframework.expression.spel.SpelParseException: void <init>(java.lang.String,int,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($r15, i0, $r14, $r13);

        specialinvoke $r24.<org.springframework.expression.spel.InternalParseException: void <init>(org.springframework.expression.spel.SpelParseException)>($r23);

        throw $r24;

     label09:
        $r10 = specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: char[] subarray(int,int)>(i0, $i30);

        specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: void pushIntToken(char[],boolean,int,int)>($r10, 1, i0, $i30);

        $i24 = r0.<org.springframework.expression.spel.standard.Tokenizer: int pos>;

        $i25 = $i24 + 1;

        r0.<org.springframework.expression.spel.standard.Tokenizer: int pos> = $i25;

        goto label18;

     label10:
        $r3 = r0.<org.springframework.expression.spel.standard.Tokenizer: char[] toProcess>;

        $i4 = r0.<org.springframework.expression.spel.standard.Tokenizer: int pos>;

        $c5 = $r3[$i4];

        $z2 = specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: boolean isExponentChar(char)>($c5);

        if $z2 == 0 goto label14;

        $i11 = r0.<org.springframework.expression.spel.standard.Tokenizer: int pos>;

        $i12 = $i11 + 1;

        r0.<org.springframework.expression.spel.standard.Tokenizer: int pos> = $i12;

        $r7 = r0.<org.springframework.expression.spel.standard.Tokenizer: char[] toProcess>;

        $i13 = r0.<org.springframework.expression.spel.standard.Tokenizer: int pos>;

        c52 = $r7[$i13];

        $z5 = specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: boolean isSign(char)>(c52);

        if $z5 == 0 goto label11;

        $i22 = r0.<org.springframework.expression.spel.standard.Tokenizer: int pos>;

        $i23 = $i22 + 1;

        r0.<org.springframework.expression.spel.standard.Tokenizer: int pos> = $i23;

     label11:
        $i53 = r0.<org.springframework.expression.spel.standard.Tokenizer: int pos>;

        $i54 = $i53 + 1;

        r0.<org.springframework.expression.spel.standard.Tokenizer: int pos> = $i54;

        $r21 = r0.<org.springframework.expression.spel.standard.Tokenizer: char[] toProcess>;

        $i55 = r0.<org.springframework.expression.spel.standard.Tokenizer: int pos>;

        $c56 = $r21[$i55];

        $z14 = specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: boolean isDigit(char)>($c56);

        if $z14 != 0 goto label11;

        z15 = 0;

        $r8 = r0.<org.springframework.expression.spel.standard.Tokenizer: char[] toProcess>;

        $i14 = r0.<org.springframework.expression.spel.standard.Tokenizer: int pos>;

        $c15 = $r8[$i14];

        $z6 = specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: boolean isFloatSuffix(char)>($c15);

        if $z6 == 0 goto label12;

        z15 = 1;

        $i20 = r0.<org.springframework.expression.spel.standard.Tokenizer: int pos>;

        $i21 = $i20 + 1;

        r0.<org.springframework.expression.spel.standard.Tokenizer: int pos> = $i21;

        goto label13;

     label12:
        $r9 = r0.<org.springframework.expression.spel.standard.Tokenizer: char[] toProcess>;

        $i16 = r0.<org.springframework.expression.spel.standard.Tokenizer: int pos>;

        $c17 = $r9[$i16];

        $z7 = specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: boolean isDoubleSuffix(char)>($c17);

        if $z7 == 0 goto label13;

        $i18 = r0.<org.springframework.expression.spel.standard.Tokenizer: int pos>;

        $i19 = $i18 + 1;

        r0.<org.springframework.expression.spel.standard.Tokenizer: int pos> = $i19;

     label13:
        $i57 = r0.<org.springframework.expression.spel.standard.Tokenizer: int pos>;

        $r22 = specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: char[] subarray(int,int)>(i0, $i57);

        $i58 = r0.<org.springframework.expression.spel.standard.Tokenizer: int pos>;

        specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: void pushRealToken(char[],boolean,int,int)>($r22, z15, i0, $i58);

        goto label18;

     label14:
        $r4 = r0.<org.springframework.expression.spel.standard.Tokenizer: char[] toProcess>;

        $i6 = r0.<org.springframework.expression.spel.standard.Tokenizer: int pos>;

        c59 = $r4[$i6];

        z16 = 0;

        $z3 = specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: boolean isFloatSuffix(char)>(c59);

        if $z3 == 0 goto label15;

        z11 = 1;

        z18 = 1;

        z16 = 1;

        $i9 = r0.<org.springframework.expression.spel.standard.Tokenizer: int pos>;

        $i10 = $i9 + 1;

        r0.<org.springframework.expression.spel.standard.Tokenizer: int pos> = $i10;

        i51 = $i10;

        goto label16;

     label15:
        $z4 = specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: boolean isDoubleSuffix(char)>(c59);

        if $z4 == 0 goto label16;

        z11 = 1;

        z18 = 1;

        $i7 = r0.<org.springframework.expression.spel.standard.Tokenizer: int pos>;

        $i8 = $i7 + 1;

        r0.<org.springframework.expression.spel.standard.Tokenizer: int pos> = $i8;

        i51 = $i8;

     label16:
        if z18 == 0 goto label17;

        $r6 = specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: char[] subarray(int,int)>(i0, i51);

        specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: void pushRealToken(char[],boolean,int,int)>($r6, z16, i0, i51);

        goto label18;

     label17:
        $r5 = specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: char[] subarray(int,int)>(i0, i51);

        specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: void pushIntToken(char[],boolean,int,int)>($r5, 0, i0, i51);

     label18:
        return;
    }

    private void lexIdentifier()
    {
        org.springframework.expression.spel.standard.Token $r6;
        java.lang.String[] $r5;
        int i0, $i1, $i2, $i3, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        java.lang.String $r3, $r4;
        boolean $z0;
        char $c4;
        java.util.List $r8;
        org.springframework.expression.spel.standard.Tokenizer r0;
        char[] $r1, $r2;
        org.springframework.expression.spel.standard.TokenKind $r7, $r9;

        r0 := @this: org.springframework.expression.spel.standard.Tokenizer;

        i0 = r0.<org.springframework.expression.spel.standard.Tokenizer: int pos>;

     label1:
        $i1 = r0.<org.springframework.expression.spel.standard.Tokenizer: int pos>;

        $i2 = $i1 + 1;

        r0.<org.springframework.expression.spel.standard.Tokenizer: int pos> = $i2;

        $r1 = r0.<org.springframework.expression.spel.standard.Tokenizer: char[] toProcess>;

        $i3 = r0.<org.springframework.expression.spel.standard.Tokenizer: int pos>;

        $c4 = $r1[$i3];

        $z0 = specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: boolean isIdentifier(char)>($c4);

        if $z0 != 0 goto label1;

        $i5 = r0.<org.springframework.expression.spel.standard.Tokenizer: int pos>;

        $r2 = specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: char[] subarray(int,int)>(i0, $i5);

        $i6 = r0.<org.springframework.expression.spel.standard.Tokenizer: int pos>;

        $i7 = $i6 - i0;

        if $i7 == 2 goto label2;

        $i10 = r0.<org.springframework.expression.spel.standard.Tokenizer: int pos>;

        $i11 = $i10 - i0;

        if $i11 != 3 goto label3;

     label2:
        $r3 = new java.lang.String;

        specialinvoke $r3.<java.lang.String: void <init>(char[])>($r2);

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String toUpperCase()>();

        $r5 = <org.springframework.expression.spel.standard.Tokenizer: java.lang.String[] alternativeOperatorNames>;

        $i8 = staticinvoke <java.util.Arrays: int binarySearch(java.lang.Object[],java.lang.Object)>($r5, $r4);

        if $i8 < 0 goto label3;

        $r9 = staticinvoke <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind valueOf(java.lang.String)>($r4);

        specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: void pushOneCharOrTwoCharToken(org.springframework.expression.spel.standard.TokenKind,int)>($r9, i0);

        return;

     label3:
        $r8 = r0.<org.springframework.expression.spel.standard.Tokenizer: java.util.List tokens>;

        $r6 = new org.springframework.expression.spel.standard.Token;

        $r7 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind IDENTIFIER>;

        $i9 = r0.<org.springframework.expression.spel.standard.Tokenizer: int pos>;

        specialinvoke $r6.<org.springframework.expression.spel.standard.Token: void <init>(org.springframework.expression.spel.standard.TokenKind,char[],int,int)>($r7, $r2, i0, $i9);

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r6);

        return;
    }

    private void pushIntToken(char[], boolean, int, int)
    {
        org.springframework.expression.spel.standard.Token $r1, $r5;
        java.util.List $r4, $r7;
        org.springframework.expression.spel.standard.Tokenizer r0;
        int i0, i1;
        char[] r2;
        org.springframework.expression.spel.standard.TokenKind $r3, $r6;
        boolean z0;

        r0 := @this: org.springframework.expression.spel.standard.Tokenizer;

        r2 := @parameter0: char[];

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        if z0 == 0 goto label1;

        $r7 = r0.<org.springframework.expression.spel.standard.Tokenizer: java.util.List tokens>;

        $r5 = new org.springframework.expression.spel.standard.Token;

        $r6 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind LITERAL_LONG>;

        specialinvoke $r5.<org.springframework.expression.spel.standard.Token: void <init>(org.springframework.expression.spel.standard.TokenKind,char[],int,int)>($r6, r2, i0, i1);

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r5);

        goto label2;

     label1:
        $r4 = r0.<org.springframework.expression.spel.standard.Tokenizer: java.util.List tokens>;

        $r1 = new org.springframework.expression.spel.standard.Token;

        $r3 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind LITERAL_INT>;

        specialinvoke $r1.<org.springframework.expression.spel.standard.Token: void <init>(org.springframework.expression.spel.standard.TokenKind,char[],int,int)>($r3, r2, i0, i1);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r1);

     label2:
        return;
    }

    private void pushHexIntToken(char[], boolean, int, int)
    {
        java.lang.Object[] $r10, $r17;
        org.springframework.expression.spel.standard.Token $r2, $r5;
        org.springframework.expression.spel.SpelParseException $r9, $r16;
        org.springframework.expression.spel.InternalParseException $r8, $r15;
        int $i0, i1, i2, $i3;
        java.lang.String $r11, $r12, $r14, $r18, $r19, $r21;
        boolean z0;
        org.springframework.expression.spel.SpelMessage $r13, $r20;
        java.util.List $r4, $r7;
        org.springframework.expression.spel.standard.Tokenizer r1;
        char[] r0;
        org.springframework.expression.spel.standard.TokenKind $r3, $r6;

        r1 := @this: org.springframework.expression.spel.standard.Tokenizer;

        r0 := @parameter0: char[];

        z0 := @parameter1: boolean;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

        if z0 == 0 goto label1;

        $r15 = new org.springframework.expression.spel.InternalParseException;

        $r16 = new org.springframework.expression.spel.SpelParseException;

        $r19 = r1.<org.springframework.expression.spel.standard.Tokenizer: java.lang.String expressionString>;

        $r20 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage NOT_A_LONG>;

        $r17 = newarray (java.lang.Object)[1];

        $r18 = r1.<org.springframework.expression.spel.standard.Tokenizer: java.lang.String expressionString>;

        $i3 = i2 + 1;

        $r21 = virtualinvoke $r18.<java.lang.String: java.lang.String substring(int,int)>(i1, $i3);

        $r17[0] = $r21;

        specialinvoke $r16.<org.springframework.expression.spel.SpelParseException: void <init>(java.lang.String,int,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($r19, i1, $r20, $r17);

        specialinvoke $r15.<org.springframework.expression.spel.InternalParseException: void <init>(org.springframework.expression.spel.SpelParseException)>($r16);

        throw $r15;

     label1:
        $r8 = new org.springframework.expression.spel.InternalParseException;

        $r9 = new org.springframework.expression.spel.SpelParseException;

        $r12 = r1.<org.springframework.expression.spel.standard.Tokenizer: java.lang.String expressionString>;

        $r13 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage NOT_AN_INTEGER>;

        $r10 = newarray (java.lang.Object)[1];

        $r11 = r1.<org.springframework.expression.spel.standard.Tokenizer: java.lang.String expressionString>;

        $r14 = virtualinvoke $r11.<java.lang.String: java.lang.String substring(int,int)>(i1, i2);

        $r10[0] = $r14;

        specialinvoke $r9.<org.springframework.expression.spel.SpelParseException: void <init>(java.lang.String,int,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($r12, i1, $r13, $r10);

        specialinvoke $r8.<org.springframework.expression.spel.InternalParseException: void <init>(org.springframework.expression.spel.SpelParseException)>($r9);

        throw $r8;

     label2:
        if z0 == 0 goto label3;

        $r7 = r1.<org.springframework.expression.spel.standard.Tokenizer: java.util.List tokens>;

        $r5 = new org.springframework.expression.spel.standard.Token;

        $r6 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind LITERAL_HEXLONG>;

        specialinvoke $r5.<org.springframework.expression.spel.standard.Token: void <init>(org.springframework.expression.spel.standard.TokenKind,char[],int,int)>($r6, r0, i1, i2);

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r5);

        goto label4;

     label3:
        $r4 = r1.<org.springframework.expression.spel.standard.Tokenizer: java.util.List tokens>;

        $r2 = new org.springframework.expression.spel.standard.Token;

        $r3 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind LITERAL_HEXINT>;

        specialinvoke $r2.<org.springframework.expression.spel.standard.Token: void <init>(org.springframework.expression.spel.standard.TokenKind,char[],int,int)>($r3, r0, i1, i2);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r2);

     label4:
        return;
    }

    private void pushRealToken(char[], boolean, int, int)
    {
        org.springframework.expression.spel.standard.Token $r1, $r5;
        java.util.List $r4, $r7;
        org.springframework.expression.spel.standard.Tokenizer r0;
        int i0, i1;
        char[] r2;
        org.springframework.expression.spel.standard.TokenKind $r3, $r6;
        boolean z0;

        r0 := @this: org.springframework.expression.spel.standard.Tokenizer;

        r2 := @parameter0: char[];

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        if z0 == 0 goto label1;

        $r7 = r0.<org.springframework.expression.spel.standard.Tokenizer: java.util.List tokens>;

        $r5 = new org.springframework.expression.spel.standard.Token;

        $r6 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind LITERAL_REAL_FLOAT>;

        specialinvoke $r5.<org.springframework.expression.spel.standard.Token: void <init>(org.springframework.expression.spel.standard.TokenKind,char[],int,int)>($r6, r2, i0, i1);

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r5);

        goto label2;

     label1:
        $r4 = r0.<org.springframework.expression.spel.standard.Tokenizer: java.util.List tokens>;

        $r1 = new org.springframework.expression.spel.standard.Token;

        $r3 = <org.springframework.expression.spel.standard.TokenKind: org.springframework.expression.spel.standard.TokenKind LITERAL_REAL>;

        specialinvoke $r1.<org.springframework.expression.spel.standard.Token: void <init>(org.springframework.expression.spel.standard.TokenKind,char[],int,int)>($r3, r2, i0, i1);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r1);

     label2:
        return;
    }

    private char[] subarray(int, int)
    {
        org.springframework.expression.spel.standard.Tokenizer r1;
        int i0, i1, $i2, $i3;
        char[] r0, $r2;

        r1 := @this: org.springframework.expression.spel.standard.Tokenizer;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        $i2 = i0 - i1;

        r0 = newarray (char)[$i2];

        $r2 = r1.<org.springframework.expression.spel.standard.Tokenizer: char[] toProcess>;

        $i3 = i0 - i1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, i1, r0, 0, $i3);

        return r0;
    }

    private boolean isTwoCharToken(org.springframework.expression.spel.standard.TokenKind)
    {
        int $i0, $i1, $i4, $i5, $i8, $i9, $i10, $i11;
        boolean $z0, $z1;
        char $c2, $c3, $c6, $c7;
        org.springframework.expression.spel.standard.Tokenizer r2;
        char[] $r1, $r3, $r4, $r5, $r6;
        org.springframework.expression.spel.standard.TokenKind r0;

        r2 := @this: org.springframework.expression.spel.standard.Tokenizer;

        r0 := @parameter0: org.springframework.expression.spel.standard.TokenKind;

        $r1 = r0.<org.springframework.expression.spel.standard.TokenKind: char[] tokenChars>;

        $i0 = lengthof $r1;

        if $i0 != 2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.springframework.util.Assert: void isTrue(boolean)>($z0);

        $r3 = r2.<org.springframework.expression.spel.standard.Tokenizer: char[] toProcess>;

        $i1 = r2.<org.springframework.expression.spel.standard.Tokenizer: int pos>;

        $c3 = $r3[$i1];

        $r4 = r0.<org.springframework.expression.spel.standard.TokenKind: char[] tokenChars>;

        $c2 = $r4[0];

        $i8 = (int) $c3;

        $i9 = (int) $c2;

        if $i8 != $i9 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        staticinvoke <org.springframework.util.Assert: void isTrue(boolean)>($z1);

        $r5 = r2.<org.springframework.expression.spel.standard.Tokenizer: char[] toProcess>;

        $i4 = r2.<org.springframework.expression.spel.standard.Tokenizer: int pos>;

        $i5 = $i4 + 1;

        $c7 = $r5[$i5];

        $r6 = r0.<org.springframework.expression.spel.standard.TokenKind: char[] tokenChars>;

        $c6 = $r6[1];

        $i10 = (int) $c7;

        $i11 = (int) $c6;

        if $i10 != $i11 goto label5;

        return 1;

     label5:
        return 0;
    }

    private void pushCharToken(org.springframework.expression.spel.standard.TokenKind)
    {
        org.springframework.expression.spel.standard.Token $r1;
        java.util.List $r3;
        org.springframework.expression.spel.standard.Tokenizer r0;
        int $i0, $i1, $i2, $i3, $i4;
        org.springframework.expression.spel.standard.TokenKind r2;

        r0 := @this: org.springframework.expression.spel.standard.Tokenizer;

        r2 := @parameter0: org.springframework.expression.spel.standard.TokenKind;

        $r3 = r0.<org.springframework.expression.spel.standard.Tokenizer: java.util.List tokens>;

        $r1 = new org.springframework.expression.spel.standard.Token;

        $i2 = r0.<org.springframework.expression.spel.standard.Tokenizer: int pos>;

        $i0 = r0.<org.springframework.expression.spel.standard.Tokenizer: int pos>;

        $i1 = $i0 + 1;

        specialinvoke $r1.<org.springframework.expression.spel.standard.Token: void <init>(org.springframework.expression.spel.standard.TokenKind,int,int)>(r2, $i2, $i1);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r1);

        $i3 = r0.<org.springframework.expression.spel.standard.Tokenizer: int pos>;

        $i4 = $i3 + 1;

        r0.<org.springframework.expression.spel.standard.Tokenizer: int pos> = $i4;

        return;
    }

    private void pushPairToken(org.springframework.expression.spel.standard.TokenKind)
    {
        org.springframework.expression.spel.standard.Token $r1;
        java.util.List $r3;
        org.springframework.expression.spel.standard.Tokenizer r0;
        int $i0, $i1, $i2, $i3, $i4;
        org.springframework.expression.spel.standard.TokenKind r2;

        r0 := @this: org.springframework.expression.spel.standard.Tokenizer;

        r2 := @parameter0: org.springframework.expression.spel.standard.TokenKind;

        $r3 = r0.<org.springframework.expression.spel.standard.Tokenizer: java.util.List tokens>;

        $r1 = new org.springframework.expression.spel.standard.Token;

        $i2 = r0.<org.springframework.expression.spel.standard.Tokenizer: int pos>;

        $i0 = r0.<org.springframework.expression.spel.standard.Tokenizer: int pos>;

        $i1 = $i0 + 2;

        specialinvoke $r1.<org.springframework.expression.spel.standard.Token: void <init>(org.springframework.expression.spel.standard.TokenKind,int,int)>(r2, $i2, $i1);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r1);

        $i3 = r0.<org.springframework.expression.spel.standard.Tokenizer: int pos>;

        $i4 = $i3 + 2;

        r0.<org.springframework.expression.spel.standard.Tokenizer: int pos> = $i4;

        return;
    }

    private void pushOneCharOrTwoCharToken(org.springframework.expression.spel.standard.TokenKind, int)
    {
        java.util.List $r3;
        org.springframework.expression.spel.standard.Tokenizer r0;
        org.springframework.expression.spel.standard.Token $r1;
        int i0, $i1, $i2;
        org.springframework.expression.spel.standard.TokenKind r2;

        r0 := @this: org.springframework.expression.spel.standard.Tokenizer;

        r2 := @parameter0: org.springframework.expression.spel.standard.TokenKind;

        i0 := @parameter1: int;

        $r3 = r0.<org.springframework.expression.spel.standard.Tokenizer: java.util.List tokens>;

        $r1 = new org.springframework.expression.spel.standard.Token;

        $i1 = virtualinvoke r2.<org.springframework.expression.spel.standard.TokenKind: int getLength()>();

        $i2 = i0 + $i1;

        specialinvoke $r1.<org.springframework.expression.spel.standard.Token: void <init>(org.springframework.expression.spel.standard.TokenKind,int,int)>(r2, i0, $i2);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r1);

        return;
    }

    private boolean isIdentifier(char)
    {
        org.springframework.expression.spel.standard.Tokenizer r0;
        int $i1, $i2;
        char c0;
        boolean $z0, $z1;

        r0 := @this: org.springframework.expression.spel.standard.Tokenizer;

        c0 := @parameter0: char;

        $z0 = specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: boolean isAlphabetic(char)>(c0);

        if $z0 != 0 goto label1;

        $z1 = specialinvoke r0.<org.springframework.expression.spel.standard.Tokenizer: boolean isDigit(char)>(c0);

        if $z1 != 0 goto label1;

        $i1 = (int) c0;

        if $i1 == 95 goto label1;

        $i2 = (int) c0;

        if $i2 == 36 goto label1;

        return 0;

     label1:
        return 1;
    }

    private boolean isChar(char, char)
    {
        char c1, c2, c3;
        org.springframework.expression.spel.standard.Tokenizer r0;
        int $i0, $i4, $i5, $i6, $i7;
        char[] $r1;

        r0 := @this: org.springframework.expression.spel.standard.Tokenizer;

        c2 := @parameter0: char;

        c3 := @parameter1: char;

        $r1 = r0.<org.springframework.expression.spel.standard.Tokenizer: char[] toProcess>;

        $i0 = r0.<org.springframework.expression.spel.standard.Tokenizer: int pos>;

        c1 = $r1[$i0];

        $i4 = (int) c1;

        $i5 = (int) c2;

        if $i4 == $i5 goto label1;

        $i6 = (int) c1;

        $i7 = (int) c3;

        if $i6 == $i7 goto label1;

        return 0;

     label1:
        return 1;
    }

    private boolean isExponentChar(char)
    {
        org.springframework.expression.spel.standard.Tokenizer r0;
        int $i1, $i2;
        char c0;

        r0 := @this: org.springframework.expression.spel.standard.Tokenizer;

        c0 := @parameter0: char;

        $i1 = (int) c0;

        if $i1 == 101 goto label1;

        $i2 = (int) c0;

        if $i2 == 69 goto label1;

        return 0;

     label1:
        return 1;
    }

    private boolean isFloatSuffix(char)
    {
        org.springframework.expression.spel.standard.Tokenizer r0;
        int $i1, $i2;
        char c0;

        r0 := @this: org.springframework.expression.spel.standard.Tokenizer;

        c0 := @parameter0: char;

        $i1 = (int) c0;

        if $i1 == 102 goto label1;

        $i2 = (int) c0;

        if $i2 == 70 goto label1;

        return 0;

     label1:
        return 1;
    }

    private boolean isDoubleSuffix(char)
    {
        org.springframework.expression.spel.standard.Tokenizer r0;
        int $i1, $i2;
        char c0;

        r0 := @this: org.springframework.expression.spel.standard.Tokenizer;

        c0 := @parameter0: char;

        $i1 = (int) c0;

        if $i1 == 100 goto label1;

        $i2 = (int) c0;

        if $i2 == 68 goto label1;

        return 0;

     label1:
        return 1;
    }

    private boolean isSign(char)
    {
        org.springframework.expression.spel.standard.Tokenizer r0;
        int $i1, $i2;
        char c0;

        r0 := @this: org.springframework.expression.spel.standard.Tokenizer;

        c0 := @parameter0: char;

        $i1 = (int) c0;

        if $i1 == 43 goto label1;

        $i2 = (int) c0;

        if $i2 == 45 goto label1;

        return 0;

     label1:
        return 1;
    }

    private boolean isDigit(char)
    {
        byte[] $r0;
        byte $b1, $b2;
        org.springframework.expression.spel.standard.Tokenizer r1;
        int $i3, $i4;
        char c0;

        r1 := @this: org.springframework.expression.spel.standard.Tokenizer;

        c0 := @parameter0: char;

        $i3 = (int) c0;

        if $i3 <= 255 goto label1;

        return 0;

     label1:
        $r0 = <org.springframework.expression.spel.standard.Tokenizer: byte[] flags>;

        $i4 = (int) c0;

        $b1 = $r0[$i4];

        $b2 = $b1 & 1;

        if $b2 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    private boolean isAlphabetic(char)
    {
        byte[] $r0;
        byte $b1, $b2;
        org.springframework.expression.spel.standard.Tokenizer r1;
        int $i3, $i4;
        char c0;

        r1 := @this: org.springframework.expression.spel.standard.Tokenizer;

        c0 := @parameter0: char;

        $i3 = (int) c0;

        if $i3 <= 255 goto label1;

        return 0;

     label1:
        $r0 = <org.springframework.expression.spel.standard.Tokenizer: byte[] flags>;

        $i4 = (int) c0;

        $b1 = $r0[$i4];

        $b2 = $b1 & 4;

        if $b2 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    private boolean isHexadecimalDigit(char)
    {
        byte[] $r0;
        byte $b1, $b2;
        org.springframework.expression.spel.standard.Tokenizer r1;
        int $i3, $i4;
        char c0;

        r1 := @this: org.springframework.expression.spel.standard.Tokenizer;

        c0 := @parameter0: char;

        $i3 = (int) c0;

        if $i3 <= 255 goto label1;

        return 0;

     label1:
        $r0 = <org.springframework.expression.spel.standard.Tokenizer: byte[] flags>;

        $i4 = (int) c0;

        $b1 = $r0[$i4];

        $b2 = $b1 & 2;

        if $b2 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }
}
