public class com.hp.hpl.jena.sparql.function.user.UserDefinedFunction extends com.hp.hpl.jena.sparql.function.user.UserDefinedFunctionDefinition implements com.hp.hpl.jena.sparql.function.Function
{
    private com.hp.hpl.jena.sparql.expr.Expr actualExpr;

    public void <init>(com.hp.hpl.jena.sparql.function.user.UserDefinedFunctionDefinition)
    {
        com.hp.hpl.jena.sparql.function.user.UserDefinedFunction r0;
        java.util.List $r4;
        com.hp.hpl.jena.sparql.expr.Expr $r3;
        java.lang.String $r2;
        com.hp.hpl.jena.sparql.function.user.UserDefinedFunctionDefinition r1;

        r0 := @this: com.hp.hpl.jena.sparql.function.user.UserDefinedFunction;

        r1 := @parameter0: com.hp.hpl.jena.sparql.function.user.UserDefinedFunctionDefinition;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.function.user.UserDefinedFunctionDefinition: java.lang.String getUri()>();

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.function.user.UserDefinedFunctionDefinition: com.hp.hpl.jena.sparql.expr.Expr getBaseExpr()>();

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.sparql.function.user.UserDefinedFunctionDefinition: java.util.List getArgList()>();

        specialinvoke r0.<com.hp.hpl.jena.sparql.function.user.UserDefinedFunctionDefinition: void <init>(java.lang.String,com.hp.hpl.jena.sparql.expr.Expr,java.util.List)>($r2, $r3, $r4);

        return;
    }

    public void <init>(java.lang.String, com.hp.hpl.jena.sparql.expr.Expr, java.util.List)
    {
        com.hp.hpl.jena.sparql.function.user.UserDefinedFunction r0;
        java.util.List r3;
        com.hp.hpl.jena.sparql.expr.Expr r2;
        java.lang.String r1;

        r0 := @this: com.hp.hpl.jena.sparql.function.user.UserDefinedFunction;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.hp.hpl.jena.sparql.expr.Expr;

        r3 := @parameter2: java.util.List;

        specialinvoke r0.<com.hp.hpl.jena.sparql.function.user.UserDefinedFunctionDefinition: void <init>(java.lang.String,com.hp.hpl.jena.sparql.expr.Expr,java.util.List)>(r1, r2, r3);

        return;
    }

    public void build(java.lang.String, com.hp.hpl.jena.sparql.expr.ExprList)
    {
        com.hp.hpl.jena.sparql.expr.Expr $r17, $r18, $r23;
        com.hp.hpl.jena.sparql.expr.ExprList r13;
        boolean $z0;
        com.hp.hpl.jena.sparql.expr.ExprTransformSubstitute $r16;
        java.util.List $r12, $r15, $r19;
        java.lang.StringBuilder $r2, $r3, $r6, $r7, $r8, $r9, $r25, $r26, $r28, $r29;
        com.hp.hpl.jena.sparql.sse.builders.ExprBuildException $r1, $r24;
        java.util.HashMap $r14;
        int $i0, $i1, $i2, i3;
        java.lang.String r0, $r5, $r10, $r11, $r22, $r27, $r30;
        com.hp.hpl.jena.sparql.function.user.UserDefinedFunction r4;
        com.hp.hpl.jena.sparql.core.Var $r21;
        java.lang.Object $r20;

        r4 := @this: com.hp.hpl.jena.sparql.function.user.UserDefinedFunction;

        r0 := @parameter0: java.lang.String;

        r13 := @parameter1: com.hp.hpl.jena.sparql.expr.ExprList;

        if r0 == null goto label1;

        $r11 = virtualinvoke r4.<com.hp.hpl.jena.sparql.function.user.UserDefinedFunction: java.lang.String getUri()>();

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z0 != 0 goto label2;

     label1:
        $r1 = new com.hp.hpl.jena.sparql.sse.builders.ExprBuildException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Incorrect URI passed to build() call, expected <");

        $r5 = virtualinvoke r4.<com.hp.hpl.jena.sparql.function.user.UserDefinedFunction: java.lang.String getUri()>();

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> but got <");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<com.hp.hpl.jena.sparql.sse.builders.ExprBuildException: void <init>(java.lang.String)>($r10);

        throw $r1;

     label2:
        $r12 = virtualinvoke r4.<com.hp.hpl.jena.sparql.function.user.UserDefinedFunction: java.util.List getArgList()>();

        $i0 = interfaceinvoke $r12.<java.util.List: int size()>();

        $i1 = virtualinvoke r13.<com.hp.hpl.jena.sparql.expr.ExprList: int size()>();

        if $i0 == $i1 goto label3;

        $r24 = new com.hp.hpl.jena.sparql.sse.builders.ExprBuildException;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Incorrect number of arguments for user defined <");

        $r27 = virtualinvoke r4.<com.hp.hpl.jena.sparql.function.user.UserDefinedFunction: java.lang.String getUri()>();

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> function");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<com.hp.hpl.jena.sparql.sse.builders.ExprBuildException: void <init>(java.lang.String)>($r30);

        throw $r24;

     label3:
        $r14 = new java.util.HashMap;

        specialinvoke $r14.<java.util.HashMap: void <init>()>();

        i3 = 0;

     label4:
        $r15 = virtualinvoke r4.<com.hp.hpl.jena.sparql.function.user.UserDefinedFunction: java.util.List getArgList()>();

        $i2 = interfaceinvoke $r15.<java.util.List: int size()>();

        if i3 >= $i2 goto label5;

        $r19 = virtualinvoke r4.<com.hp.hpl.jena.sparql.function.user.UserDefinedFunction: java.util.List getArgList()>();

        $r20 = interfaceinvoke $r19.<java.util.List: java.lang.Object get(int)>(i3);

        $r21 = (com.hp.hpl.jena.sparql.core.Var) $r20;

        $r22 = virtualinvoke $r21.<com.hp.hpl.jena.sparql.core.Var: java.lang.String getVarName()>();

        $r23 = virtualinvoke r13.<com.hp.hpl.jena.sparql.expr.ExprList: com.hp.hpl.jena.sparql.expr.Expr get(int)>(i3);

        interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r22, $r23);

        i3 = i3 + 1;

        goto label4;

     label5:
        $r16 = new com.hp.hpl.jena.sparql.expr.ExprTransformSubstitute;

        specialinvoke $r16.<com.hp.hpl.jena.sparql.expr.ExprTransformSubstitute: void <init>(java.util.Map)>($r14);

        $r17 = virtualinvoke r4.<com.hp.hpl.jena.sparql.function.user.UserDefinedFunction: com.hp.hpl.jena.sparql.expr.Expr getBaseExpr()>();

        $r18 = staticinvoke <com.hp.hpl.jena.sparql.expr.ExprTransformer: com.hp.hpl.jena.sparql.expr.Expr transform(com.hp.hpl.jena.sparql.expr.ExprTransform,com.hp.hpl.jena.sparql.expr.Expr)>($r16, $r17);

        r4.<com.hp.hpl.jena.sparql.function.user.UserDefinedFunction: com.hp.hpl.jena.sparql.expr.Expr actualExpr> = $r18;

        return;
    }

    public com.hp.hpl.jena.sparql.expr.NodeValue exec(com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.sparql.expr.ExprList, java.lang.String, com.hp.hpl.jena.sparql.function.FunctionEnv)
    {
        com.hp.hpl.jena.sparql.function.user.UserDefinedFunction r0;
        com.hp.hpl.jena.sparql.engine.binding.Binding r1;
        com.hp.hpl.jena.sparql.expr.NodeValue $r4;
        com.hp.hpl.jena.sparql.expr.Expr $r3;
        com.hp.hpl.jena.sparql.expr.ExprList r5;
        java.lang.String r6;
        com.hp.hpl.jena.sparql.function.FunctionEnv r2;

        r0 := @this: com.hp.hpl.jena.sparql.function.user.UserDefinedFunction;

        r1 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r5 := @parameter1: com.hp.hpl.jena.sparql.expr.ExprList;

        r6 := @parameter2: java.lang.String;

        r2 := @parameter3: com.hp.hpl.jena.sparql.function.FunctionEnv;

        $r3 = r0.<com.hp.hpl.jena.sparql.function.user.UserDefinedFunction: com.hp.hpl.jena.sparql.expr.Expr actualExpr>;

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.sparql.expr.Expr: com.hp.hpl.jena.sparql.expr.NodeValue eval(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.function.FunctionEnv)>(r1, r2);

        return $r4;
    }

    public com.hp.hpl.jena.sparql.expr.Expr getActualExpr()
    {
        com.hp.hpl.jena.sparql.function.user.UserDefinedFunction r0;
        com.hp.hpl.jena.sparql.expr.Expr $r1;

        r0 := @this: com.hp.hpl.jena.sparql.function.user.UserDefinedFunction;

        $r1 = r0.<com.hp.hpl.jena.sparql.function.user.UserDefinedFunction: com.hp.hpl.jena.sparql.expr.Expr actualExpr>;

        return $r1;
    }
}
