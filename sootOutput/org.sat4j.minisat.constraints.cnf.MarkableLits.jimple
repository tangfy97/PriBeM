public class org.sat4j.minisat.constraints.cnf.MarkableLits extends org.sat4j.minisat.constraints.cnf.Lits implements org.sat4j.minisat.core.IMarkableLits
{
    private static final long serialVersionUID;
    private int[] marks;
    private static final int DEFAULTMARK;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        org.sat4j.minisat.constraints.cnf.MarkableLits r0;

        r0 := @this: org.sat4j.minisat.constraints.cnf.MarkableLits;

        specialinvoke r0.<org.sat4j.minisat.constraints.cnf.Lits: void <init>()>();

        return;
    }

    public void init(int)
    {
        int[] $r1;
        int i0, $i1, $i2;
        org.sat4j.minisat.constraints.cnf.MarkableLits r0;

        r0 := @this: org.sat4j.minisat.constraints.cnf.MarkableLits;

        i0 := @parameter0: int;

        specialinvoke r0.<org.sat4j.minisat.constraints.cnf.Lits: void init(int)>(i0);

        $i1 = i0 << 1;

        $i2 = $i1 + 2;

        $r1 = newarray (int)[$i2];

        r0.<org.sat4j.minisat.constraints.cnf.MarkableLits: int[] marks> = $r1;

        return;
    }

    public void setMark(int, int)
    {
        java.lang.AssertionError $r3, $r4, $r6;
        org.sat4j.minisat.constraints.cnf.MarkableLits r0;
        int[] $r1, $r2, $r5;
        int i0, i1, $i2;
        boolean $z0, $z1, $z2;

        r0 := @this: org.sat4j.minisat.constraints.cnf.MarkableLits;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = <org.sat4j.minisat.constraints.cnf.MarkableLits: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r5 = r0.<org.sat4j.minisat.constraints.cnf.MarkableLits: int[] marks>;

        if $r5 != null goto label1;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label1:
        $z1 = <org.sat4j.minisat.constraints.cnf.MarkableLits: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        if i0 > 1 goto label2;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label2:
        $z2 = <org.sat4j.minisat.constraints.cnf.MarkableLits: boolean $assertionsDisabled>;

        if $z2 != 0 goto label3;

        $r2 = r0.<org.sat4j.minisat.constraints.cnf.MarkableLits: int[] marks>;

        $i2 = lengthof $r2;

        if i0 < $i2 goto label3;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label3:
        $r1 = r0.<org.sat4j.minisat.constraints.cnf.MarkableLits: int[] marks>;

        $r1[i0] = i1;

        return;
    }

    public void setMark(int)
    {
        int i0;
        org.sat4j.minisat.constraints.cnf.MarkableLits r0;

        r0 := @this: org.sat4j.minisat.constraints.cnf.MarkableLits;

        i0 := @parameter0: int;

        virtualinvoke r0.<org.sat4j.minisat.constraints.cnf.MarkableLits: void setMark(int,int)>(i0, 1);

        return;
    }

    public int getMark(int)
    {
        int[] $r1;
        int i0, $i1;
        org.sat4j.minisat.constraints.cnf.MarkableLits r0;

        r0 := @this: org.sat4j.minisat.constraints.cnf.MarkableLits;

        i0 := @parameter0: int;

        $r1 = r0.<org.sat4j.minisat.constraints.cnf.MarkableLits: int[] marks>;

        $i1 = $r1[i0];

        return $i1;
    }

    public boolean isMarked(int)
    {
        int[] $r1;
        int i0, $i1;
        org.sat4j.minisat.constraints.cnf.MarkableLits r0;
        boolean $z0;

        r0 := @this: org.sat4j.minisat.constraints.cnf.MarkableLits;

        i0 := @parameter0: int;

        $r1 = r0.<org.sat4j.minisat.constraints.cnf.MarkableLits: int[] marks>;

        $i1 = $r1[i0];

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void resetMark(int)
    {
        int i0;
        org.sat4j.minisat.constraints.cnf.MarkableLits r0;
        int[] $r1;

        r0 := @this: org.sat4j.minisat.constraints.cnf.MarkableLits;

        i0 := @parameter0: int;

        $r1 = r0.<org.sat4j.minisat.constraints.cnf.MarkableLits: int[] marks>;

        $r1[i0] = 0;

        return;
    }

    public void resetAllMarks()
    {
        int[] $r1;
        int $i0, i1;
        org.sat4j.minisat.constraints.cnf.MarkableLits r0;

        r0 := @this: org.sat4j.minisat.constraints.cnf.MarkableLits;

        i1 = 2;

     label1:
        $r1 = r0.<org.sat4j.minisat.constraints.cnf.MarkableLits: int[] marks>;

        $i0 = lengthof $r1;

        if i1 >= $i0 goto label2;

        virtualinvoke r0.<org.sat4j.minisat.constraints.cnf.MarkableLits: void resetMark(int)>(i1);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public org.sat4j.specs.IVecInt getMarkedLiterals()
    {
        int[] $r2;
        int $i0, i1;
        org.sat4j.core.VecInt $r0;
        org.sat4j.minisat.constraints.cnf.MarkableLits r1;
        boolean $z0;

        r1 := @this: org.sat4j.minisat.constraints.cnf.MarkableLits;

        $r0 = new org.sat4j.core.VecInt;

        specialinvoke $r0.<org.sat4j.core.VecInt: void <init>()>();

        i1 = 2;

     label1:
        $r2 = r1.<org.sat4j.minisat.constraints.cnf.MarkableLits: int[] marks>;

        $i0 = lengthof $r2;

        if i1 >= $i0 goto label3;

        $z0 = virtualinvoke r1.<org.sat4j.minisat.constraints.cnf.MarkableLits: boolean isMarked(int)>(i1);

        if $z0 == 0 goto label2;

        interfaceinvoke $r0.<org.sat4j.specs.IVecInt: org.sat4j.specs.IVecInt push(int)>(i1);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return $r0;
    }

    public org.sat4j.specs.IVecInt getMarkedLiterals(int)
    {
        int[] $r2;
        int $i0, $i1, i2, i3;
        org.sat4j.core.VecInt $r0;
        org.sat4j.minisat.constraints.cnf.MarkableLits r1;

        r1 := @this: org.sat4j.minisat.constraints.cnf.MarkableLits;

        i2 := @parameter0: int;

        $r0 = new org.sat4j.core.VecInt;

        specialinvoke $r0.<org.sat4j.core.VecInt: void <init>()>();

        i3 = 2;

     label1:
        $r2 = r1.<org.sat4j.minisat.constraints.cnf.MarkableLits: int[] marks>;

        $i0 = lengthof $r2;

        if i3 >= $i0 goto label3;

        $i1 = virtualinvoke r1.<org.sat4j.minisat.constraints.cnf.MarkableLits: int getMark(int)>(i3);

        if $i1 != i2 goto label2;

        interfaceinvoke $r0.<org.sat4j.specs.IVecInt: org.sat4j.specs.IVecInt push(int)>(i3);

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return $r0;
    }

    public org.sat4j.specs.IVecInt getMarkedVariables()
    {
        org.sat4j.minisat.constraints.cnf.MarkableLits r1;
        int[] $r2;
        int $i0, $i1, $i2, i3;
        org.sat4j.core.VecInt $r0;
        boolean $z0, $z1;

        r1 := @this: org.sat4j.minisat.constraints.cnf.MarkableLits;

        $r0 = new org.sat4j.core.VecInt;

        specialinvoke $r0.<org.sat4j.core.VecInt: void <init>()>();

        i3 = 2;

     label1:
        $r2 = r1.<org.sat4j.minisat.constraints.cnf.MarkableLits: int[] marks>;

        $i0 = lengthof $r2;

        if i3 >= $i0 goto label4;

        $z0 = virtualinvoke r1.<org.sat4j.minisat.constraints.cnf.MarkableLits: boolean isMarked(int)>(i3);

        if $z0 != 0 goto label2;

        $i2 = i3 + 1;

        $z1 = virtualinvoke r1.<org.sat4j.minisat.constraints.cnf.MarkableLits: boolean isMarked(int)>($i2);

        if $z1 == 0 goto label3;

     label2:
        $i1 = i3 >> 1;

        interfaceinvoke $r0.<org.sat4j.specs.IVecInt: org.sat4j.specs.IVecInt push(int)>($i1);

     label3:
        i3 = i3 + 2;

        goto label1;

     label4:
        return $r0;
    }

    public org.sat4j.specs.IVecInt getMarkedVariables(int)
    {
        org.sat4j.minisat.constraints.cnf.MarkableLits r1;
        int[] $r2;
        int $i0, $i1, i2, $i3, $i4, $i5, i6;
        org.sat4j.core.VecInt $r0;

        r1 := @this: org.sat4j.minisat.constraints.cnf.MarkableLits;

        i2 := @parameter0: int;

        $r0 = new org.sat4j.core.VecInt;

        specialinvoke $r0.<org.sat4j.core.VecInt: void <init>()>();

        i6 = 2;

     label1:
        $r2 = r1.<org.sat4j.minisat.constraints.cnf.MarkableLits: int[] marks>;

        $i0 = lengthof $r2;

        if i6 >= $i0 goto label4;

        $i1 = virtualinvoke r1.<org.sat4j.minisat.constraints.cnf.MarkableLits: int getMark(int)>(i6);

        if $i1 == i2 goto label2;

        $i4 = i6 + 1;

        $i5 = virtualinvoke r1.<org.sat4j.minisat.constraints.cnf.MarkableLits: int getMark(int)>($i4);

        if $i5 != i2 goto label3;

     label2:
        $i3 = i6 >> 1;

        interfaceinvoke $r0.<org.sat4j.specs.IVecInt: org.sat4j.specs.IVecInt push(int)>($i3);

     label3:
        i6 = i6 + 2;

        goto label1;

     label4:
        return $r0;
    }

    public java.util.Set getMarks()
    {
        java.util.HashSet $r0;
        int[] r2;
        int i0, i1, i2;
        org.sat4j.minisat.constraints.cnf.MarkableLits r1;
        java.lang.Integer $r3;

        r1 := @this: org.sat4j.minisat.constraints.cnf.MarkableLits;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        r2 = r1.<org.sat4j.minisat.constraints.cnf.MarkableLits: int[] marks>;

        i0 = lengthof r2;

        i2 = 0;

     label1:
        if i2 >= i0 goto label3;

        i1 = r2[i2];

        if i1 == 0 goto label2;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r3);

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return $r0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        <org.sat4j.minisat.constraints.cnf.MarkableLits: int DEFAULTMARK> = 1;

        <org.sat4j.minisat.constraints.cnf.MarkableLits: long serialVersionUID> = 1L;

        $r0 = class "Lorg/sat4j/minisat/constraints/cnf/MarkableLits;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.sat4j.minisat.constraints.cnf.MarkableLits: boolean $assertionsDisabled> = $z1;

        return;
    }
}
