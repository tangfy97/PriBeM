final class org.apache.lucene.index.MultipleTermPositions$IntQueue extends java.lang.Object
{
    private int _arraySize;
    private int _index;
    private int _lastIndex;
    private int[] _array;

    private void <init>()
    {
        org.apache.lucene.index.MultipleTermPositions$IntQueue r0;
        int $i0;
        int[] $r1;

        r0 := @this: org.apache.lucene.index.MultipleTermPositions$IntQueue;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.lucene.index.MultipleTermPositions$IntQueue: int _arraySize> = 16;

        r0.<org.apache.lucene.index.MultipleTermPositions$IntQueue: int _index> = 0;

        r0.<org.apache.lucene.index.MultipleTermPositions$IntQueue: int _lastIndex> = 0;

        $i0 = r0.<org.apache.lucene.index.MultipleTermPositions$IntQueue: int _arraySize>;

        $r1 = newarray (int)[$i0];

        r0.<org.apache.lucene.index.MultipleTermPositions$IntQueue: int[] _array> = $r1;

        return;
    }

    final void add(int)
    {
        org.apache.lucene.index.MultipleTermPositions$IntQueue r0;
        int[] $r1;
        int $i0, $i1, $i2, $i3, i4;

        r0 := @this: org.apache.lucene.index.MultipleTermPositions$IntQueue;

        i4 := @parameter0: int;

        $i1 = r0.<org.apache.lucene.index.MultipleTermPositions$IntQueue: int _lastIndex>;

        $i0 = r0.<org.apache.lucene.index.MultipleTermPositions$IntQueue: int _arraySize>;

        if $i1 != $i0 goto label1;

        specialinvoke r0.<org.apache.lucene.index.MultipleTermPositions$IntQueue: void growArray()>();

     label1:
        $r1 = r0.<org.apache.lucene.index.MultipleTermPositions$IntQueue: int[] _array>;

        $i2 = r0.<org.apache.lucene.index.MultipleTermPositions$IntQueue: int _lastIndex>;

        $i3 = $i2 + 1;

        r0.<org.apache.lucene.index.MultipleTermPositions$IntQueue: int _lastIndex> = $i3;

        $r1[$i2] = i4;

        return;
    }

    final int next()
    {
        org.apache.lucene.index.MultipleTermPositions$IntQueue r0;
        int[] $r1;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.lucene.index.MultipleTermPositions$IntQueue;

        $r1 = r0.<org.apache.lucene.index.MultipleTermPositions$IntQueue: int[] _array>;

        $i0 = r0.<org.apache.lucene.index.MultipleTermPositions$IntQueue: int _index>;

        $i1 = $i0 + 1;

        r0.<org.apache.lucene.index.MultipleTermPositions$IntQueue: int _index> = $i1;

        $i2 = $r1[$i0];

        return $i2;
    }

    final void sort()
    {
        org.apache.lucene.index.MultipleTermPositions$IntQueue r0;
        int[] $r1;
        int $i0, $i1;

        r0 := @this: org.apache.lucene.index.MultipleTermPositions$IntQueue;

        $r1 = r0.<org.apache.lucene.index.MultipleTermPositions$IntQueue: int[] _array>;

        $i1 = r0.<org.apache.lucene.index.MultipleTermPositions$IntQueue: int _index>;

        $i0 = r0.<org.apache.lucene.index.MultipleTermPositions$IntQueue: int _lastIndex>;

        staticinvoke <java.util.Arrays: void sort(int[],int,int)>($r1, $i1, $i0);

        return;
    }

    final void clear()
    {
        org.apache.lucene.index.MultipleTermPositions$IntQueue r0;

        r0 := @this: org.apache.lucene.index.MultipleTermPositions$IntQueue;

        r0.<org.apache.lucene.index.MultipleTermPositions$IntQueue: int _index> = 0;

        r0.<org.apache.lucene.index.MultipleTermPositions$IntQueue: int _lastIndex> = 0;

        return;
    }

    final int size()
    {
        org.apache.lucene.index.MultipleTermPositions$IntQueue r0;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.lucene.index.MultipleTermPositions$IntQueue;

        $i1 = r0.<org.apache.lucene.index.MultipleTermPositions$IntQueue: int _lastIndex>;

        $i0 = r0.<org.apache.lucene.index.MultipleTermPositions$IntQueue: int _index>;

        $i2 = $i1 - $i0;

        return $i2;
    }

    private void growArray()
    {
        org.apache.lucene.index.MultipleTermPositions$IntQueue r0;
        int[] $r1, $r2, $r3;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.lucene.index.MultipleTermPositions$IntQueue;

        $r1 = r0.<org.apache.lucene.index.MultipleTermPositions$IntQueue: int[] _array>;

        $i0 = r0.<org.apache.lucene.index.MultipleTermPositions$IntQueue: int _arraySize>;

        $i1 = $i0 + 1;

        $r2 = staticinvoke <org.apache.lucene.util.ArrayUtil: int[] grow(int[],int)>($r1, $i1);

        r0.<org.apache.lucene.index.MultipleTermPositions$IntQueue: int[] _array> = $r2;

        $r3 = r0.<org.apache.lucene.index.MultipleTermPositions$IntQueue: int[] _array>;

        $i2 = lengthof $r3;

        r0.<org.apache.lucene.index.MultipleTermPositions$IntQueue: int _arraySize> = $i2;

        return;
    }

    void <init>(org.apache.lucene.index.MultipleTermPositions$1)
    {
        org.apache.lucene.index.MultipleTermPositions$IntQueue r0;
        org.apache.lucene.index.MultipleTermPositions$1 r1;

        r0 := @this: org.apache.lucene.index.MultipleTermPositions$IntQueue;

        r1 := @parameter0: org.apache.lucene.index.MultipleTermPositions$1;

        specialinvoke r0.<org.apache.lucene.index.MultipleTermPositions$IntQueue: void <init>()>();

        return;
    }
}
