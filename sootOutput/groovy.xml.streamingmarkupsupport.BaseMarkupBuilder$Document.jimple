class groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document extends groovy.xml.streamingmarkupsupport.Builder$Built implements groovy.lang.GroovyInterceptable
{
    private java.lang.Object out;
    private final java.util.Map pendingNamespaces;
    private final java.util.Map namespaces;
    private final java.util.Map specialProperties;
    private java.lang.String prefix;

    public void <init>(groovy.lang.Closure, java.util.Map)
    {
        groovy.lang.Closure r1;
        java.util.HashMap $r3, $r4, $r5;
        groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document$5 $r16;
        java.util.Map r2, $r6, $r7, $r9, $r11, $r13, $r15, $r17;
        groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document r0;
        groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document$4 $r14;
        groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document$3 $r12;
        groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document$2 $r10;
        groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document$1 $r8;

        r0 := @this: groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document;

        r1 := @parameter0: groovy.lang.Closure;

        r2 := @parameter1: java.util.Map;

        specialinvoke r0.<groovy.xml.streamingmarkupsupport.Builder$Built: void <init>(groovy.lang.Closure,java.util.Map)>(r1, r2);

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document: java.util.Map pendingNamespaces> = $r3;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document: java.util.Map namespaces> = $r4;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        r0.<groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document: java.util.Map specialProperties> = $r5;

        r0.<groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document: java.lang.String prefix> = "";

        $r6 = r0.<groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document: java.util.Map namespaces>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("xml", "http://www.w3.org/XML/1998/namespace");

        $r7 = r0.<groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document: java.util.Map namespaces>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("mkp", "http://www.codehaus.org/Groovy/markup/keywords");

        $r9 = r0.<groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document: java.util.Map specialProperties>;

        $r8 = new groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document$1;

        specialinvoke $r8.<groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document$1: void <init>(groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document,java.lang.String)>(r0, "out");

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("out", $r8);

        $r11 = r0.<groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document: java.util.Map specialProperties>;

        $r10 = new groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document$2;

        specialinvoke $r10.<groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document$2: void <init>(groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document,java.lang.String)>(r0, "unescaped");

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("unescaped", $r10);

        $r13 = r0.<groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document: java.util.Map specialProperties>;

        $r12 = new groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document$3;

        specialinvoke $r12.<groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document$3: void <init>(groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document,java.lang.String)>(r0, "namespaces");

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("namespaces", $r12);

        $r15 = r0.<groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document: java.util.Map specialProperties>;

        $r14 = new groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document$4;

        specialinvoke $r14.<groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document$4: void <init>(groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document,java.lang.String)>(r0, "pi");

        interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("pi", $r14);

        $r17 = r0.<groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document: java.util.Map specialProperties>;

        $r16 = new groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document$5;

        specialinvoke $r16.<groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document$5: void <init>(groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document,java.lang.String)>(r0, "comment");

        interfaceinvoke $r17.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("comment", $r16);

        return;
    }

    public java.lang.Object invokeMethod(java.lang.String, java.lang.Object)
    {
        groovy.lang.Closure $r21, r30, $r39;
        java.util.Map $r5, $r7, $r10, $r11, $r12, $r17, $r18, $r19, $r24, $r26, r27, $r32, $r37;
        boolean $z0, $z1, $z2, $z3, $z4;
        groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document r3;
        java.lang.Object[] $r1, r2, $r9, $r16, $r34, $r35;
        int $i0, i1;
        java.lang.String $r4, $r6, r8, $r23, $r25, $r40;
        java.lang.Object r0, $r13, $r14, $r15, $r20, $r22, r28, r29, r31, $r33, $r36, $r38;

        r3 := @this: groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document;

        r8 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.Object;

        $r1 = (java.lang.Object[]) r0;

        r2 = (java.lang.Object[]) $r1;

        r27 = <java.util.Collections: java.util.Map EMPTY_MAP>;

        r28 = null;

        i1 = 0;

     label1:
        $i0 = lengthof r2;

        if i1 == $i0 goto label5;

        r29 = r2[i1];

        $z2 = r29 instanceof java.util.Map;

        if $z2 == 0 goto label2;

        r27 = (java.util.Map) r29;

        goto label4;

     label2:
        $z3 = r29 instanceof groovy.lang.Closure;

        if $z3 == 0 goto label3;

        r30 = (groovy.lang.Closure) r29;

        virtualinvoke r30.<groovy.lang.Closure: void setDelegate(java.lang.Object)>(r3);

        r28 = virtualinvoke r30.<groovy.lang.Closure: groovy.lang.Closure asWritable()>();

        goto label4;

     label3:
        r28 = r29;

     label4:
        i1 = i1 + 1;

        goto label1;

     label5:
        $r5 = r3.<groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document: java.util.Map pendingNamespaces>;

        $r4 = r3.<groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document: java.lang.String prefix>;

        $z0 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>($r4);

        if $z0 == 0 goto label6;

        $r26 = r3.<groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document: java.util.Map pendingNamespaces>;

        $r25 = r3.<groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document: java.lang.String prefix>;

        r31 = interfaceinvoke $r26.<java.util.Map: java.lang.Object get(java.lang.Object)>($r25);

        goto label8;

     label6:
        $r7 = r3.<groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document: java.util.Map namespaces>;

        $r6 = r3.<groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document: java.lang.String prefix>;

        $z1 = interfaceinvoke $r7.<java.util.Map: boolean containsKey(java.lang.Object)>($r6);

        if $z1 == 0 goto label7;

        $r24 = r3.<groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document: java.util.Map namespaces>;

        $r23 = r3.<groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document: java.lang.String prefix>;

        r31 = interfaceinvoke $r24.<java.util.Map: java.lang.Object get(java.lang.Object)>($r23);

        goto label8;

     label7:
        r31 = ":";

     label8:
        $r32 = r3.<groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document: java.util.Map namespaceSpecificTags>;

        $r33 = interfaceinvoke $r32.<java.util.Map: java.lang.Object get(java.lang.Object)>(r31);

        $r34 = (java.lang.Object[]) $r33;

        $r35 = (java.lang.Object[]) $r34;

        $r36 = $r35[2];

        $r37 = (java.util.Map) $r36;

        $r38 = $r35[0];

        $r39 = (groovy.lang.Closure) $r38;

        $r40 = r3.<groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document: java.lang.String prefix>;

        r3.<groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document: java.lang.String prefix> = "";

        $z4 = interfaceinvoke $r37.<java.util.Map: boolean containsKey(java.lang.Object)>(r8);

        if $z4 == 0 goto label9;

        $r15 = interfaceinvoke $r37.<java.util.Map: java.lang.Object get(java.lang.Object)>(r8);

        $r21 = (groovy.lang.Closure) $r15;

        $r16 = newarray (java.lang.Object)[8];

        $r16[0] = r3;

        $r17 = r3.<groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document: java.util.Map pendingNamespaces>;

        $r16[1] = $r17;

        $r18 = r3.<groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document: java.util.Map namespaces>;

        $r16[2] = $r18;

        $r19 = r3.<groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document: java.util.Map namespaceSpecificTags>;

        $r16[3] = $r19;

        $r16[4] = $r40;

        $r16[5] = r27;

        $r16[6] = r28;

        $r20 = r3.<groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document: java.lang.Object out>;

        $r16[7] = $r20;

        $r22 = virtualinvoke $r21.<groovy.lang.Closure: java.lang.Object call(java.lang.Object[])>($r16);

        return $r22;

     label9:
        $r9 = newarray (java.lang.Object)[9];

        $r9[0] = r8;

        $r9[1] = r3;

        $r10 = r3.<groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document: java.util.Map pendingNamespaces>;

        $r9[2] = $r10;

        $r11 = r3.<groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document: java.util.Map namespaces>;

        $r9[3] = $r11;

        $r12 = r3.<groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document: java.util.Map namespaceSpecificTags>;

        $r9[4] = $r12;

        $r9[5] = $r40;

        $r9[6] = r27;

        $r9[7] = r28;

        $r13 = r3.<groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document: java.lang.Object out>;

        $r9[8] = $r13;

        $r14 = virtualinvoke $r39.<groovy.lang.Closure: java.lang.Object call(java.lang.Object[])>($r9);

        return $r14;
    }

    public java.lang.Object getProperty(java.lang.String)
    {
        groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document r0;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.String r1;

        r0 := @this: groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document: java.util.Map specialProperties>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        if $r3 != null goto label1;

        r0.<groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document: java.lang.String prefix> = r1;

        return r0;

     label1:
        return $r3;
    }

    public void setProperty(java.lang.String, java.lang.Object)
    {
        groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document r2;
        groovy.lang.Closure $r4;
        java.lang.Object r3;
        java.lang.String r0, $r1;
        boolean $z0;

        r2 := @this: groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document;

        r0 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.Object;

        $r1 = "trigger";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        r2.<groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document: java.lang.Object out> = r3;

        $r4 = r2.<groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document: groovy.lang.Closure root>;

        virtualinvoke $r4.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>(r2);

        goto label2;

     label1:
        specialinvoke r2.<groovy.xml.streamingmarkupsupport.Builder$Built: void setProperty(java.lang.String,java.lang.Object)>(r0, r3);

     label2:
        return;
    }

    static java.lang.String access$002(groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document, java.lang.String)
    {
        java.lang.String r1;
        groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document r0;

        r0 := @parameter0: groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document;

        r1 := @parameter1: java.lang.String;

        r0.<groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document: java.lang.String prefix> = r1;

        return r1;
    }
}
