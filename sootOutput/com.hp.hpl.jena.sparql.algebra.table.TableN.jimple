public class com.hp.hpl.jena.sparql.algebra.table.TableN extends com.hp.hpl.jena.sparql.algebra.table.TableBase
{
    protected java.util.List rows;
    protected java.util.List vars;

    public void <init>()
    {
        com.hp.hpl.jena.sparql.algebra.table.TableN r0;
        java.util.ArrayList $r1, $r2;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.table.TableN;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.table.TableBase: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.algebra.table.TableN: java.util.List rows> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.algebra.table.TableN: java.util.List vars> = $r2;

        return;
    }

    public void <init>(java.util.List)
    {
        java.util.List r3;
        com.hp.hpl.jena.sparql.algebra.table.TableN r0;
        java.util.ArrayList $r1, $r2;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.table.TableN;

        r3 := @parameter0: java.util.List;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.table.TableBase: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.algebra.table.TableN: java.util.List rows> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.algebra.table.TableN: java.util.List vars> = $r2;

        if r3 == null goto label1;

        r0.<com.hp.hpl.jena.sparql.algebra.table.TableN: java.util.List vars> = r3;

     label1:
        return;
    }

    public void <init>(com.hp.hpl.jena.sparql.engine.QueryIterator)
    {
        com.hp.hpl.jena.sparql.algebra.table.TableN r0;
        com.hp.hpl.jena.sparql.engine.QueryIterator r3;
        java.util.ArrayList $r1, $r2;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.table.TableN;

        r3 := @parameter0: com.hp.hpl.jena.sparql.engine.QueryIterator;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.table.TableBase: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.algebra.table.TableN: java.util.List rows> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.algebra.table.TableN: java.util.List vars> = $r2;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.table.TableN: void materialize(com.hp.hpl.jena.sparql.engine.QueryIterator)>(r3);

        return;
    }

    protected void <init>(java.util.List, java.util.List)
    {
        java.util.List r3, r4;
        com.hp.hpl.jena.sparql.algebra.table.TableN r0;
        java.util.ArrayList $r1, $r2;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.table.TableN;

        r3 := @parameter0: java.util.List;

        r4 := @parameter1: java.util.List;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.table.TableBase: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.algebra.table.TableN: java.util.List rows> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.algebra.table.TableN: java.util.List vars> = $r2;

        r0.<com.hp.hpl.jena.sparql.algebra.table.TableN: java.util.List vars> = r3;

        r0.<com.hp.hpl.jena.sparql.algebra.table.TableN: java.util.List rows> = r4;

        return;
    }

    private void materialize(com.hp.hpl.jena.sparql.engine.QueryIterator)
    {
        com.hp.hpl.jena.sparql.engine.binding.Binding $r1;
        com.hp.hpl.jena.sparql.algebra.table.TableN r2;
        com.hp.hpl.jena.sparql.engine.QueryIterator r0;
        boolean $z0;

        r2 := @this: com.hp.hpl.jena.sparql.algebra.table.TableN;

        r0 := @parameter0: com.hp.hpl.jena.sparql.engine.QueryIterator;

     label1:
        $z0 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.engine.QueryIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.engine.QueryIterator: com.hp.hpl.jena.sparql.engine.binding.Binding nextBinding()>();

        virtualinvoke r2.<com.hp.hpl.jena.sparql.algebra.table.TableN: void addBinding(com.hp.hpl.jena.sparql.engine.binding.Binding)>($r1);

        goto label1;

     label2:
        interfaceinvoke r0.<com.hp.hpl.jena.sparql.engine.QueryIterator: void close()>();

        return;
    }

    public void addBinding(com.hp.hpl.jena.sparql.engine.binding.Binding)
    {
        java.util.Iterator $r1;
        com.hp.hpl.jena.sparql.algebra.table.TableN r2;
        com.hp.hpl.jena.sparql.core.Var r5;
        com.hp.hpl.jena.sparql.engine.binding.Binding r0;
        java.util.List $r3, $r6, $r7;
        java.lang.Object $r4;
        boolean $z0, $z1;

        r2 := @this: com.hp.hpl.jena.sparql.algebra.table.TableN;

        r0 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.engine.binding.Binding: java.util.Iterator vars()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.hp.hpl.jena.sparql.core.Var) $r4;

        $r6 = r2.<com.hp.hpl.jena.sparql.algebra.table.TableN: java.util.List vars>;

        $z1 = interfaceinvoke $r6.<java.util.List: boolean contains(java.lang.Object)>(r5);

        if $z1 != 0 goto label2;

        $r7 = r2.<com.hp.hpl.jena.sparql.algebra.table.TableN: java.util.List vars>;

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>(r5);

     label2:
        goto label1;

     label3:
        $r3 = r2.<com.hp.hpl.jena.sparql.algebra.table.TableN: java.util.List rows>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r0);

        return;
    }

    public int size()
    {
        int $i0;
        java.util.List $r1;
        com.hp.hpl.jena.sparql.algebra.table.TableN r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.table.TableN;

        $r1 = r0.<com.hp.hpl.jena.sparql.algebra.table.TableN: java.util.List rows>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public boolean isEmpty()
    {
        java.util.List $r1;
        com.hp.hpl.jena.sparql.algebra.table.TableN r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.table.TableN;

        $r1 = r0.<com.hp.hpl.jena.sparql.algebra.table.TableN: java.util.List rows>;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        return $z0;
    }

    public com.hp.hpl.jena.sparql.engine.QueryIterator matchRightLeft(com.hp.hpl.jena.sparql.engine.binding.Binding, boolean, com.hp.hpl.jena.sparql.expr.ExprList, com.hp.hpl.jena.sparql.engine.ExecutionContext)
    {
        java.util.ArrayList $r0;
        com.hp.hpl.jena.sparql.expr.ExprList r12;
        int $i0, $i1;
        com.hp.hpl.jena.sparql.engine.ExecutionContext r6;
        boolean z0, $z1, $z2;
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterPlainWrapper $r4;
        java.util.Iterator $r3, $r5;
        com.hp.hpl.jena.sparql.algebra.table.TableN r1;
        java.util.List $r2;
        com.hp.hpl.jena.sparql.engine.binding.Binding r8, r10, $r11;
        java.lang.Object $r9;
        com.hp.hpl.jena.sparql.engine.QueryIterator $r7;

        r1 := @this: com.hp.hpl.jena.sparql.algebra.table.TableN;

        r8 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        z0 := @parameter1: boolean;

        r12 := @parameter2: com.hp.hpl.jena.sparql.expr.ExprList;

        r6 := @parameter3: com.hp.hpl.jena.sparql.engine.ExecutionContext;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = r1.<com.hp.hpl.jena.sparql.algebra.table.TableN: java.util.List rows>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label5;

        $r9 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r10 = (com.hp.hpl.jena.sparql.engine.binding.Binding) $r9;

        $r11 = staticinvoke <com.hp.hpl.jena.sparql.algebra.Algebra: com.hp.hpl.jena.sparql.engine.binding.Binding merge(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.engine.binding.Binding)>(r8, r10);

        if $r11 != null goto label2;

        goto label1;

     label2:
        if r12 == null goto label3;

        $z1 = virtualinvoke r12.<com.hp.hpl.jena.sparql.expr.ExprList: boolean isSatisfied(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r11, r6);

        if $z1 == 0 goto label4;

     label3:
        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r11);

     label4:
        goto label1;

     label5:
        $i0 = interfaceinvoke $r0.<java.util.List: int size()>();

        if $i0 != 0 goto label6;

        if z0 == 0 goto label6;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r8);

     label6:
        $i1 = interfaceinvoke $r0.<java.util.List: int size()>();

        if $i1 != 0 goto label7;

        $r7 = staticinvoke <com.hp.hpl.jena.sparql.engine.iterator.QueryIterNullIterator: com.hp.hpl.jena.sparql.engine.QueryIterator create(com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r6);

        return $r7;

     label7:
        $r4 = new com.hp.hpl.jena.sparql.engine.iterator.QueryIterPlainWrapper;

        $r5 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

        specialinvoke $r4.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterPlainWrapper: void <init>(java.util.Iterator,com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r5, r6);

        return $r4;
    }

    public java.util.Iterator rows()
    {
        java.util.List $r1;
        com.hp.hpl.jena.sparql.algebra.table.TableN r0;
        java.util.Iterator $r2;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.table.TableN;

        $r1 = r0.<com.hp.hpl.jena.sparql.algebra.table.TableN: java.util.List rows>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

        return $r2;
    }

    public com.hp.hpl.jena.sparql.engine.QueryIterator iterator(com.hp.hpl.jena.sparql.engine.ExecutionContext)
    {
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterPlainWrapper $r0;
        java.util.List $r2;
        java.util.Iterator $r3;
        com.hp.hpl.jena.sparql.engine.ExecutionContext r4;
        com.hp.hpl.jena.sparql.algebra.table.TableN r1;

        r1 := @this: com.hp.hpl.jena.sparql.algebra.table.TableN;

        r4 := @parameter0: com.hp.hpl.jena.sparql.engine.ExecutionContext;

        $r0 = new com.hp.hpl.jena.sparql.engine.iterator.QueryIterPlainWrapper;

        $r2 = r1.<com.hp.hpl.jena.sparql.algebra.table.TableN: java.util.List rows>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

        specialinvoke $r0.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterPlainWrapper: void <init>(java.util.Iterator,com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r3, r4);

        return $r0;
    }

    public void closeTable()
    {
        com.hp.hpl.jena.sparql.algebra.table.TableN r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.table.TableN;

        r0.<com.hp.hpl.jena.sparql.algebra.table.TableN: java.util.List rows> = null;

        return;
    }

    public java.util.List getVarNames()
    {
        java.util.List $r1, $r2;
        com.hp.hpl.jena.sparql.algebra.table.TableN r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.table.TableN;

        $r1 = r0.<com.hp.hpl.jena.sparql.algebra.table.TableN: java.util.List vars>;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: java.util.List varNames(java.util.Collection)>($r1);

        return $r2;
    }

    public java.util.List getVars()
    {
        java.util.List $r1;
        com.hp.hpl.jena.sparql.algebra.table.TableN r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.table.TableN;

        $r1 = r0.<com.hp.hpl.jena.sparql.algebra.table.TableN: java.util.List vars>;

        return $r1;
    }
}
