class com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset$EntrySet extends com.mycila.inject.internal.guava.collect.AbstractMultiset$EntrySet
{
    final com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset this$0;

    private void <init>(com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset)
    {
        com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset$EntrySet r0;
        com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset$EntrySet;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset;

        r0.<com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset$EntrySet: com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset this$0> = r1;

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.AbstractMultiset$EntrySet: void <init>(com.mycila.inject.internal.guava.collect.AbstractMultiset)>(r1);

        return;
    }

    com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset multiset()
    {
        com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset$EntrySet r0;
        com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset$EntrySet;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset$EntrySet: com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset this$0>;

        return $r1;
    }

    public java.lang.Object[] toArray()
    {
        java.util.List $r1;
        java.lang.Object[] $r2;
        com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset$EntrySet r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset$EntrySet;

        $r1 = specialinvoke r0.<com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset$EntrySet: java.util.List snapshot()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object[] toArray()>();

        return $r2;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        java.util.List $r1;
        java.lang.Object[] r2, $r3;
        com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset$EntrySet r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset$EntrySet;

        r2 := @parameter0: java.lang.Object[];

        $r1 = specialinvoke r0.<com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset$EntrySet: java.util.List snapshot()>();

        $r3 = interfaceinvoke $r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r2);

        return $r3;
    }

    private java.util.List snapshot()
    {
        java.util.Iterator $r2;
        int $i0;
        com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset$EntrySet r0;
        java.util.ArrayList $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset$EntrySet;

        $i0 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset$EntrySet: int size()>();

        $r1 = staticinvoke <com.mycila.inject.internal.guava.collect.Lists: java.util.ArrayList newArrayListWithExpectedSize(int)>($i0);

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset$EntrySet: java.util.Iterator iterator()>();

        staticinvoke <com.mycila.inject.internal.guava.collect.Iterators: boolean addAll(java.util.Collection,java.util.Iterator)>($r1, $r2);

        return $r1;
    }

    public boolean remove(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.Multiset$Entry r1;
        int $i0;
        java.lang.Object r0, $r2;
        com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset$EntrySet r3;
        com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset $r4;
        boolean $z0, $z1;

        r3 := @this: com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset$EntrySet;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof com.mycila.inject.internal.guava.collect.Multiset$Entry;

        if $z0 == 0 goto label1;

        r1 = (com.mycila.inject.internal.guava.collect.Multiset$Entry) r0;

        $r2 = interfaceinvoke r1.<com.mycila.inject.internal.guava.collect.Multiset$Entry: java.lang.Object getElement()>();

        $i0 = interfaceinvoke r1.<com.mycila.inject.internal.guava.collect.Multiset$Entry: int getCount()>();

        if $i0 == 0 goto label1;

        $r4 = virtualinvoke r3.<com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset$EntrySet: com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset multiset()>();

        $z1 = interfaceinvoke $r4.<com.mycila.inject.internal.guava.collect.Multiset: boolean setCount(java.lang.Object,int,int)>($r2, $i0, 0);

        return $z1;

     label1:
        return 0;
    }

    volatile com.mycila.inject.internal.guava.collect.Multiset multiset()
    {
        com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset$EntrySet r0;
        com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset$EntrySet;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset$EntrySet: com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset multiset()>();

        return $r1;
    }

    void <init>(com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset, com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset$1)
    {
        com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset$EntrySet r0;
        com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset r1;
        com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset$1 r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset$EntrySet;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset;

        r2 := @parameter1: com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset$1;

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset$EntrySet: void <init>(com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset)>(r1);

        return;
    }
}
