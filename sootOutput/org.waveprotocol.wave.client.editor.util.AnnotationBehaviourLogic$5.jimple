class org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic$5 extends java.lang.Object implements org.waveprotocol.wave.model.util.ReadableStringSet$Proc
{
    final org.waveprotocol.wave.model.util.StringMap val$leftValues;
    final org.waveprotocol.wave.model.util.StringMap val$rightValues;
    final org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic this$0;

    void <init>(org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic, org.waveprotocol.wave.model.util.StringMap, org.waveprotocol.wave.model.util.StringMap)
    {
        org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic r1;
        org.waveprotocol.wave.model.util.StringMap r2, r3;
        org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic$5 r0;

        r0 := @this: org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic$5;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic;

        r2 := @parameter1: org.waveprotocol.wave.model.util.StringMap;

        r3 := @parameter2: org.waveprotocol.wave.model.util.StringMap;

        r0.<org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic$5: org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic this$0> = r1;

        r0.<org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic$5: org.waveprotocol.wave.model.util.StringMap val$leftValues> = r2;

        r0.<org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic$5: org.waveprotocol.wave.model.util.StringMap val$rightValues> = r3;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void apply(java.lang.String)
    {
        org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic $r8, $r10;
        org.waveprotocol.wave.model.util.StringMap $r2, $r5, $r9, $r11;
        java.lang.Object $r3, $r6;
        java.lang.String r1, r4, r7;
        org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic$5 r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic$5;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic$5: org.waveprotocol.wave.model.util.StringMap val$leftValues>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.util.StringMap: java.lang.Object get(java.lang.String)>(r1);

        r4 = (java.lang.String) $r3;

        $r5 = r0.<org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic$5: org.waveprotocol.wave.model.util.StringMap val$rightValues>;

        $r6 = interfaceinvoke $r5.<org.waveprotocol.wave.model.util.StringMap: java.lang.Object get(java.lang.String)>(r1);

        r7 = (java.lang.String) $r6;

        $z0 = staticinvoke <org.waveprotocol.wave.model.util.ValueUtils: boolean notEqual(java.lang.Object,java.lang.Object)>(r4, r7);

        if $z0 == 0 goto label1;

        $r8 = r0.<org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic$5: org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic this$0>;

        $r9 = $r8.<org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic: org.waveprotocol.wave.model.util.StringMap leftSide>;

        interfaceinvoke $r9.<org.waveprotocol.wave.model.util.StringMap: void put(java.lang.String,java.lang.Object)>(r1, r4);

        $r10 = r0.<org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic$5: org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic this$0>;

        $r11 = $r10.<org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic: org.waveprotocol.wave.model.util.StringMap rightSide>;

        interfaceinvoke $r11.<org.waveprotocol.wave.model.util.StringMap: void put(java.lang.String,java.lang.Object)>(r1, r7);

     label1:
        return;
    }
}
