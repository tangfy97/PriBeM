public class org.apache.commons.configuration.beanutils.BeanHelper extends java.lang.Object
{
    private static java.util.Map beanFactories;
    private static org.apache.commons.configuration.beanutils.BeanFactory defaultBeanFactory;

    private void <init>()
    {
        org.apache.commons.configuration.beanutils.BeanHelper r0;

        r0 := @this: org.apache.commons.configuration.beanutils.BeanHelper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void registerBeanFactory(java.lang.String, org.apache.commons.configuration.beanutils.BeanFactory)
    {
        org.apache.commons.configuration.beanutils.BeanFactory r1;
        java.util.Map $r2;
        java.lang.String r0;
        java.lang.IllegalArgumentException $r3, $r4;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: org.apache.commons.configuration.beanutils.BeanFactory;

        if r0 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Name for bean factory must not be null!");

        throw $r4;

     label1:
        if r1 != null goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Bean factory must not be null!");

        throw $r3;

     label2:
        $r2 = <org.apache.commons.configuration.beanutils.BeanHelper: java.util.Map beanFactories>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r1);

        return;
    }

    public static org.apache.commons.configuration.beanutils.BeanFactory deregisterBeanFactory(java.lang.String)
    {
        org.apache.commons.configuration.beanutils.BeanFactory $r3;
        java.util.Map $r1;
        java.lang.Object $r2;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.apache.commons.configuration.beanutils.BeanHelper: java.util.Map beanFactories>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r0);

        $r3 = (org.apache.commons.configuration.beanutils.BeanFactory) $r2;

        return $r3;
    }

    public static java.util.Set registeredFactoryNames()
    {
        java.util.Set $r1;
        java.util.Map $r0;

        $r0 = <org.apache.commons.configuration.beanutils.BeanHelper: java.util.Map beanFactories>;

        $r1 = interfaceinvoke $r0.<java.util.Map: java.util.Set keySet()>();

        return $r1;
    }

    public static org.apache.commons.configuration.beanutils.BeanFactory getDefaultBeanFactory()
    {
        org.apache.commons.configuration.beanutils.BeanFactory $r0;

        $r0 = <org.apache.commons.configuration.beanutils.BeanHelper: org.apache.commons.configuration.beanutils.BeanFactory defaultBeanFactory>;

        return $r0;
    }

    public static void setDefaultBeanFactory(org.apache.commons.configuration.beanutils.BeanFactory)
    {
        org.apache.commons.configuration.beanutils.BeanFactory r0;
        java.lang.IllegalArgumentException $r1;

        r0 := @parameter0: org.apache.commons.configuration.beanutils.BeanFactory;

        if r0 != null goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Default bean factory must not be null!");

        throw $r1;

     label1:
        <org.apache.commons.configuration.beanutils.BeanHelper: org.apache.commons.configuration.beanutils.BeanFactory defaultBeanFactory> = r0;

        return;
    }

    public static void initBean(java.lang.Object, org.apache.commons.configuration.beanutils.BeanDeclaration) throws org.apache.commons.configuration.ConfigurationRuntimeException
    {
        org.apache.commons.configuration.beanutils.BeanDeclaration r0, $r10;
        java.util.Map $r1, $r2;
        java.lang.String r7, r18;
        boolean $z0, $z1;
        java.util.Map$Entry r17, r19;
        java.util.Iterator $r4, $r13;
        java.util.Set $r3, $r12;
        java.lang.Object $r5, $r6, r8, $r9, $r11, $r14, $r15, $r16;

        r8 := @parameter0: java.lang.Object;

        r0 := @parameter1: org.apache.commons.configuration.beanutils.BeanDeclaration;

        $r1 = interfaceinvoke r0.<org.apache.commons.configuration.beanutils.BeanDeclaration: java.util.Map getBeanProperties()>();

        if $r1 == null goto label2;

        $r12 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        $r13 = interfaceinvoke $r12.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r14 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r17 = (java.util.Map$Entry) $r14;

        $r15 = interfaceinvoke r17.<java.util.Map$Entry: java.lang.Object getKey()>();

        r18 = (java.lang.String) $r15;

        $r16 = interfaceinvoke r17.<java.util.Map$Entry: java.lang.Object getValue()>();

        staticinvoke <org.apache.commons.configuration.beanutils.BeanHelper: void initProperty(java.lang.Object,java.lang.String,java.lang.Object)>(r8, r18, $r16);

        goto label1;

     label2:
        $r2 = interfaceinvoke r0.<org.apache.commons.configuration.beanutils.BeanDeclaration: java.util.Map getNestedBeanDeclarations()>();

        if $r2 == null goto label4;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r19 = (java.util.Map$Entry) $r5;

        $r6 = interfaceinvoke r19.<java.util.Map$Entry: java.lang.Object getKey()>();

        r7 = (java.lang.String) $r6;

        $r9 = interfaceinvoke r19.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r10 = (org.apache.commons.configuration.beanutils.BeanDeclaration) $r9;

        $r11 = staticinvoke <org.apache.commons.configuration.beanutils.BeanHelper: java.lang.Object createBean(org.apache.commons.configuration.beanutils.BeanDeclaration,java.lang.Class)>($r10, null);

        staticinvoke <org.apache.commons.configuration.beanutils.BeanHelper: void initProperty(java.lang.Object,java.lang.String,java.lang.Object)>(r8, r7, $r11);

        goto label3;

     label4:
        return;
    }

    private static void initProperty(java.lang.Object, java.lang.String, java.lang.Object) throws org.apache.commons.configuration.ConfigurationRuntimeException
    {
        java.lang.IllegalAccessException $r11;
        java.lang.reflect.InvocationTargetException $r9;
        org.apache.commons.configuration.ConfigurationRuntimeException $r3, $r10, $r12;
        java.lang.StringBuffer $r4, $r5, $r6, $r7;
        java.lang.Object r0, r2;
        java.lang.String r1, $r8;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Object;

        $z0 = staticinvoke <org.apache.commons.beanutils.PropertyUtils: boolean isWriteable(java.lang.Object,java.lang.String)>(r0, r1);

        if $z0 != 0 goto label1;

        $r3 = new org.apache.commons.configuration.ConfigurationRuntimeException;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Property ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" cannot be set!");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r3.<org.apache.commons.configuration.ConfigurationRuntimeException: void <init>(java.lang.String)>($r8);

        throw $r3;

     label1:
        staticinvoke <org.apache.commons.beanutils.BeanUtils: void setProperty(java.lang.Object,java.lang.String,java.lang.Object)>(r0, r1, r2);

     label2:
        goto label5;

     label3:
        $r11 := @caughtexception;

        $r12 = new org.apache.commons.configuration.ConfigurationRuntimeException;

        specialinvoke $r12.<org.apache.commons.configuration.ConfigurationRuntimeException: void <init>(java.lang.Throwable)>($r11);

        throw $r12;

     label4:
        $r9 := @caughtexception;

        $r10 = new org.apache.commons.configuration.ConfigurationRuntimeException;

        specialinvoke $r10.<org.apache.commons.configuration.ConfigurationRuntimeException: void <init>(java.lang.Throwable)>($r9);

        throw $r10;

     label5:
        return;

        catch java.lang.IllegalAccessException from label1 to label2 with label3;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label4;
    }

    public static java.lang.Object createBean(org.apache.commons.configuration.beanutils.BeanDeclaration, java.lang.Class, java.lang.Object) throws org.apache.commons.configuration.ConfigurationRuntimeException
    {
        java.lang.IllegalArgumentException $r6;
        org.apache.commons.configuration.beanutils.BeanDeclaration r0;
        java.lang.Exception $r7;
        org.apache.commons.configuration.beanutils.BeanFactory $r1;
        org.apache.commons.configuration.ConfigurationRuntimeException $r8;
        java.lang.Class r2, $r3;
        java.lang.Object r4, $r5;

        r0 := @parameter0: org.apache.commons.configuration.beanutils.BeanDeclaration;

        r2 := @parameter1: java.lang.Class;

        r4 := @parameter2: java.lang.Object;

        if r0 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Bean declaration must not be null!");

        throw $r6;

     label1:
        $r1 = staticinvoke <org.apache.commons.configuration.beanutils.BeanHelper: org.apache.commons.configuration.beanutils.BeanFactory fetchBeanFactory(org.apache.commons.configuration.beanutils.BeanDeclaration)>(r0);

     label2:
        $r3 = staticinvoke <org.apache.commons.configuration.beanutils.BeanHelper: java.lang.Class fetchBeanClass(org.apache.commons.configuration.beanutils.BeanDeclaration,java.lang.Class,org.apache.commons.configuration.beanutils.BeanFactory)>(r0, r2, $r1);

        $r5 = interfaceinvoke $r1.<org.apache.commons.configuration.beanutils.BeanFactory: java.lang.Object createBean(java.lang.Class,org.apache.commons.configuration.beanutils.BeanDeclaration,java.lang.Object)>($r3, r0, r4);

     label3:
        return $r5;

     label4:
        $r7 := @caughtexception;

        $r8 = new org.apache.commons.configuration.ConfigurationRuntimeException;

        specialinvoke $r8.<org.apache.commons.configuration.ConfigurationRuntimeException: void <init>(java.lang.Throwable)>($r7);

        throw $r8;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    public static java.lang.Object createBean(org.apache.commons.configuration.beanutils.BeanDeclaration, java.lang.Class) throws org.apache.commons.configuration.ConfigurationRuntimeException
    {
        java.lang.Class r1;
        java.lang.Object $r2;
        org.apache.commons.configuration.beanutils.BeanDeclaration r0;

        r0 := @parameter0: org.apache.commons.configuration.beanutils.BeanDeclaration;

        r1 := @parameter1: java.lang.Class;

        $r2 = staticinvoke <org.apache.commons.configuration.beanutils.BeanHelper: java.lang.Object createBean(org.apache.commons.configuration.beanutils.BeanDeclaration,java.lang.Class,java.lang.Object)>(r0, r1, null);

        return $r2;
    }

    public static java.lang.Object createBean(org.apache.commons.configuration.beanutils.BeanDeclaration) throws org.apache.commons.configuration.ConfigurationRuntimeException
    {
        java.lang.Object $r1;
        org.apache.commons.configuration.beanutils.BeanDeclaration r0;

        r0 := @parameter0: org.apache.commons.configuration.beanutils.BeanDeclaration;

        $r1 = staticinvoke <org.apache.commons.configuration.beanutils.BeanHelper: java.lang.Object createBean(org.apache.commons.configuration.beanutils.BeanDeclaration,java.lang.Class)>(r0, null);

        return $r1;
    }

    static java.lang.Class loadClass(java.lang.String, java.lang.Class) throws java.lang.ClassNotFoundException
    {
        java.lang.Class $r1, r2;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Class;

        $r1 = staticinvoke <org.apache.commons.lang.ClassUtils: java.lang.Class getClass(java.lang.String)>(r0);

        return $r1;
    }

    private static java.lang.Class fetchBeanClass(org.apache.commons.configuration.beanutils.BeanDeclaration, java.lang.Class, org.apache.commons.configuration.beanutils.BeanFactory) throws org.apache.commons.configuration.ConfigurationRuntimeException
    {
        org.apache.commons.configuration.beanutils.BeanDeclaration r0;
        org.apache.commons.configuration.beanutils.BeanFactory r3;
        org.apache.commons.configuration.ConfigurationRuntimeException $r5, $r9;
        java.lang.Class r2, $r4, $r6, $r7;
        java.lang.ClassNotFoundException $r8;
        java.lang.String $r1;

        r0 := @parameter0: org.apache.commons.configuration.beanutils.BeanDeclaration;

        r2 := @parameter1: java.lang.Class;

        r3 := @parameter2: org.apache.commons.configuration.beanutils.BeanFactory;

        $r1 = interfaceinvoke r0.<org.apache.commons.configuration.beanutils.BeanDeclaration: java.lang.String getBeanClassName()>();

        if $r1 == null goto label4;

     label1:
        $r6 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = staticinvoke <org.apache.commons.configuration.beanutils.BeanHelper: java.lang.Class loadClass(java.lang.String,java.lang.Class)>($r1, $r6);

     label2:
        return $r7;

     label3:
        $r8 := @caughtexception;

        $r9 = new org.apache.commons.configuration.ConfigurationRuntimeException;

        specialinvoke $r9.<org.apache.commons.configuration.ConfigurationRuntimeException: void <init>(java.lang.Throwable)>($r8);

        throw $r9;

     label4:
        if r2 == null goto label5;

        return r2;

     label5:
        $r4 = interfaceinvoke r3.<org.apache.commons.configuration.beanutils.BeanFactory: java.lang.Class getDefaultBeanClass()>();

        if $r4 != null goto label6;

        $r5 = new org.apache.commons.configuration.ConfigurationRuntimeException;

        specialinvoke $r5.<org.apache.commons.configuration.ConfigurationRuntimeException: void <init>(java.lang.String)>("Bean class is not specified!");

        throw $r5;

     label6:
        return $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    private static org.apache.commons.configuration.beanutils.BeanFactory fetchBeanFactory(org.apache.commons.configuration.beanutils.BeanDeclaration) throws org.apache.commons.configuration.ConfigurationRuntimeException
    {
        org.apache.commons.configuration.beanutils.BeanDeclaration r0;
        org.apache.commons.configuration.beanutils.BeanFactory $r2, r5;
        org.apache.commons.configuration.ConfigurationRuntimeException $r6;
        java.lang.StringBuffer $r7, $r8, $r9;
        java.util.Map $r3;
        java.lang.Object $r4;
        java.lang.String $r1, $r10;

        r0 := @parameter0: org.apache.commons.configuration.beanutils.BeanDeclaration;

        $r1 = interfaceinvoke r0.<org.apache.commons.configuration.beanutils.BeanDeclaration: java.lang.String getBeanFactoryName()>();

        if $r1 == null goto label2;

        $r3 = <org.apache.commons.configuration.beanutils.BeanHelper: java.util.Map beanFactories>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        r5 = (org.apache.commons.configuration.beanutils.BeanFactory) $r4;

        if r5 != null goto label1;

        $r6 = new org.apache.commons.configuration.ConfigurationRuntimeException;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unknown bean factory: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r6.<org.apache.commons.configuration.ConfigurationRuntimeException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label1:
        return r5;

     label2:
        $r2 = staticinvoke <org.apache.commons.configuration.beanutils.BeanHelper: org.apache.commons.configuration.beanutils.BeanFactory getDefaultBeanFactory()>();

        return $r2;
    }

    static void <clinit>()
    {
        java.util.HashMap $r0;
        java.util.Map $r1;
        org.apache.commons.configuration.beanutils.DefaultBeanFactory $r2;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r1 = staticinvoke <java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>($r0);

        <org.apache.commons.configuration.beanutils.BeanHelper: java.util.Map beanFactories> = $r1;

        $r2 = <org.apache.commons.configuration.beanutils.DefaultBeanFactory: org.apache.commons.configuration.beanutils.DefaultBeanFactory INSTANCE>;

        <org.apache.commons.configuration.beanutils.BeanHelper: org.apache.commons.configuration.beanutils.BeanFactory defaultBeanFactory> = $r2;

        return;
    }
}
