public final class kodkod.ast.ProjectExpression extends kodkod.ast.Expression
{
    private final kodkod.ast.Expression expr;
    private final kodkod.ast.IntExpression[] columns;

    transient void <init>(kodkod.ast.Expression, kodkod.ast.IntExpression[])
    {
        kodkod.ast.ProjectExpression r0;
        kodkod.ast.Expression r2;
        java.lang.IllegalArgumentException $r5;
        kodkod.ast.IntExpression[] r1, $r3, $r4;
        int $i0, $i1, $i2;

        r0 := @this: kodkod.ast.ProjectExpression;

        r2 := @parameter0: kodkod.ast.Expression;

        r1 := @parameter1: kodkod.ast.IntExpression[];

        specialinvoke r0.<kodkod.ast.Expression: void <init>()>();

        $i0 = lengthof r1;

        if $i0 != 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No columns specified for projection.");

        throw $r5;

     label1:
        r0.<kodkod.ast.ProjectExpression: kodkod.ast.Expression expr> = r2;

        $i1 = lengthof r1;

        $r3 = newarray (kodkod.ast.IntExpression)[$i1];

        r0.<kodkod.ast.ProjectExpression: kodkod.ast.IntExpression[] columns> = $r3;

        $r4 = r0.<kodkod.ast.ProjectExpression: kodkod.ast.IntExpression[] columns>;

        $i2 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r4, 0, $i2);

        return;
    }

    public int arity()
    {
        int $i0;
        kodkod.ast.ProjectExpression r0;
        kodkod.ast.IntExpression[] $r1;

        r0 := @this: kodkod.ast.ProjectExpression;

        $r1 = r0.<kodkod.ast.ProjectExpression: kodkod.ast.IntExpression[] columns>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public kodkod.ast.Expression expression()
    {
        kodkod.ast.ProjectExpression r0;
        kodkod.ast.Expression $r1;

        r0 := @this: kodkod.ast.ProjectExpression;

        $r1 = r0.<kodkod.ast.ProjectExpression: kodkod.ast.Expression expr>;

        return $r1;
    }

    public java.util.Iterator columns()
    {
        kodkod.ast.ProjectExpression r0;
        kodkod.ast.IntExpression[] $r1;
        java.util.Iterator $r2;

        r0 := @this: kodkod.ast.ProjectExpression;

        $r1 = r0.<kodkod.ast.ProjectExpression: kodkod.ast.IntExpression[] columns>;

        $r2 = staticinvoke <kodkod.util.collections.Containers: java.util.Iterator iterate(java.lang.Object[])>($r1);

        return $r2;
    }

    public kodkod.ast.IntExpression column(int)
    {
        kodkod.ast.ProjectExpression r0;
        kodkod.ast.IntExpression[] $r1;
        kodkod.ast.IntExpression $r2;
        int i0;

        r0 := @this: kodkod.ast.ProjectExpression;

        i0 := @parameter0: int;

        $r1 = r0.<kodkod.ast.ProjectExpression: kodkod.ast.IntExpression[] columns>;

        $r2 = $r1[i0];

        return $r2;
    }

    public java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)
    {
        kodkod.ast.ProjectExpression r1;
        java.lang.Object $r2;
        kodkod.ast.visitor.ReturnVisitor r0;

        r1 := @this: kodkod.ast.ProjectExpression;

        r0 := @parameter0: kodkod.ast.visitor.ReturnVisitor;

        $r2 = interfaceinvoke r0.<kodkod.ast.visitor.ReturnVisitor: java.lang.Object visit(kodkod.ast.ProjectExpression)>(r1);

        return $r2;
    }

    public void accept(kodkod.ast.visitor.VoidVisitor)
    {
        kodkod.ast.ProjectExpression r1;
        kodkod.ast.visitor.VoidVisitor r0;

        r1 := @this: kodkod.ast.ProjectExpression;

        r0 := @parameter0: kodkod.ast.visitor.VoidVisitor;

        interfaceinvoke r0.<kodkod.ast.visitor.VoidVisitor: void visit(kodkod.ast.ProjectExpression)>(r1);

        return;
    }

    public java.lang.String toString()
    {
        kodkod.ast.ProjectExpression r1;
        kodkod.ast.Expression $r2;
        kodkod.ast.IntExpression[] $r5;
        java.lang.StringBuilder $r0, $r7;
        java.lang.String $r3, $r4, $r6, $r8;

        r1 := @this: kodkod.ast.ProjectExpression;

        $r0 = new java.lang.StringBuilder;

        $r2 = r1.<kodkod.ast.ProjectExpression: kodkod.ast.Expression expr>;

        $r3 = virtualinvoke $r2.<kodkod.ast.Expression: java.lang.String toString()>();

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>($r4);

        $r5 = r1.<kodkod.ast.ProjectExpression: kodkod.ast.IntExpression[] columns>;

        $r6 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r5);

        $r7 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }
}
