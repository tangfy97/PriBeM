class kodkod.engine.fol2sat.MemoryLogger$MemoryLog extends kodkod.engine.fol2sat.TranslationLog
{
    private final java.util.Set roots;
    private final kodkod.instance.Bounds bounds;
    private final kodkod.ast.Node[] original;
    private final int[] transl;
    static final boolean $assertionsDisabled;

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lkodkod/engine/fol2sat/MemoryLogger$MemoryLog;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <kodkod.engine.fol2sat.MemoryLogger$MemoryLog: boolean $assertionsDisabled> = $z1;

        return;
    }

    void <init>(kodkod.util.nodes.AnnotatedNode, kodkod.util.collections.FixedMap, kodkod.instance.Bounds)
    {
        kodkod.engine.bool.BooleanValue $r18;
        java.lang.AssertionError $r22;
        kodkod.engine.fol2sat.MemoryLogger$MemoryLog r0;
        kodkod.instance.Bounds r1;
        int[] $r7, $r12, $r16;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6;
        kodkod.util.nodes.AnnotatedNode r2;
        boolean $z0;
        java.util.Iterator $r11;
        kodkod.util.collections.FixedMap r15;
        kodkod.ast.Formula $r4, r14;
        java.util.Set $r5, $r6, $r8, $r10, $r21;
        kodkod.ast.Node $r3, $r20;
        java.lang.Object $r13, $r17;
        kodkod.ast.Node[] $r9, $r19;

        r0 := @this: kodkod.engine.fol2sat.MemoryLogger$MemoryLog;

        r2 := @parameter0: kodkod.util.nodes.AnnotatedNode;

        r15 := @parameter1: kodkod.util.collections.FixedMap;

        r1 := @parameter2: kodkod.instance.Bounds;

        specialinvoke r0.<kodkod.engine.fol2sat.TranslationLog: void <init>()>();

        r0.<kodkod.engine.fol2sat.MemoryLogger$MemoryLog: kodkod.instance.Bounds bounds> = r1;

        $r3 = virtualinvoke r2.<kodkod.util.nodes.AnnotatedNode: kodkod.ast.Node node()>();

        $r4 = (kodkod.ast.Formula) $r3;

        $r5 = staticinvoke <kodkod.util.nodes.Nodes: java.util.Set conjuncts(kodkod.ast.Formula)>($r4);

        r0.<kodkod.engine.fol2sat.MemoryLogger$MemoryLog: java.util.Set roots> = $r5;

        $z0 = <kodkod.engine.fol2sat.MemoryLogger$MemoryLog: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r21 = r0.<kodkod.engine.fol2sat.MemoryLogger$MemoryLog: java.util.Set roots>;

        $i4 = interfaceinvoke $r21.<java.util.Set: int size()>();

        $i5 = virtualinvoke r15.<kodkod.util.collections.FixedMap: int size()>();

        if $i4 == $i5 goto label1;

        $r22 = new java.lang.AssertionError;

        specialinvoke $r22.<java.lang.AssertionError: void <init>()>();

        throw $r22;

     label1:
        $r6 = r0.<kodkod.engine.fol2sat.MemoryLogger$MemoryLog: java.util.Set roots>;

        $i0 = interfaceinvoke $r6.<java.util.Set: int size()>();

        $r7 = newarray (int)[$i0];

        r0.<kodkod.engine.fol2sat.MemoryLogger$MemoryLog: int[] transl> = $r7;

        $r8 = r0.<kodkod.engine.fol2sat.MemoryLogger$MemoryLog: java.util.Set roots>;

        $i1 = interfaceinvoke $r8.<java.util.Set: int size()>();

        $r9 = newarray (kodkod.ast.Node)[$i1];

        r0.<kodkod.engine.fol2sat.MemoryLogger$MemoryLog: kodkod.ast.Node[] original> = $r9;

        $r10 = r0.<kodkod.engine.fol2sat.MemoryLogger$MemoryLog: java.util.Set roots>;

        $r11 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();

        i6 = 0;

        goto label3;

     label2:
        $r13 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r14 = (kodkod.ast.Formula) $r13;

        $r16 = r0.<kodkod.engine.fol2sat.MemoryLogger$MemoryLog: int[] transl>;

        $r17 = virtualinvoke r15.<kodkod.util.collections.FixedMap: java.lang.Object get(java.lang.Object)>(r14);

        $r18 = (kodkod.engine.bool.BooleanValue) $r17;

        $i3 = virtualinvoke $r18.<kodkod.engine.bool.BooleanValue: int label()>();

        $r16[i6] = $i3;

        $r19 = r0.<kodkod.engine.fol2sat.MemoryLogger$MemoryLog: kodkod.ast.Node[] original>;

        $r20 = virtualinvoke r2.<kodkod.util.nodes.AnnotatedNode: kodkod.ast.Node sourceOf(kodkod.ast.Node)>(r14);

        $r19[i6] = $r20;

        i6 = i6 + 1;

     label3:
        $r12 = r0.<kodkod.engine.fol2sat.MemoryLogger$MemoryLog: int[] transl>;

        $i2 = lengthof $r12;

        if i6 < $i2 goto label2;

        return;
    }

    public kodkod.instance.Bounds bounds()
    {
        kodkod.instance.Bounds $r1;
        kodkod.engine.fol2sat.MemoryLogger$MemoryLog r0;

        r0 := @this: kodkod.engine.fol2sat.MemoryLogger$MemoryLog;

        $r1 = r0.<kodkod.engine.fol2sat.MemoryLogger$MemoryLog: kodkod.instance.Bounds bounds>;

        return $r1;
    }

    public java.util.Iterator replay(kodkod.engine.fol2sat.RecordFilter)
    {
        kodkod.engine.fol2sat.RecordFilter r2;
        kodkod.engine.fol2sat.MemoryLogger$MemoryLog r1;
        kodkod.engine.fol2sat.MemoryLogger$MemoryLog$1 $r0;

        r1 := @this: kodkod.engine.fol2sat.MemoryLogger$MemoryLog;

        r2 := @parameter0: kodkod.engine.fol2sat.RecordFilter;

        $r0 = new kodkod.engine.fol2sat.MemoryLogger$MemoryLog$1;

        specialinvoke $r0.<kodkod.engine.fol2sat.MemoryLogger$MemoryLog$1: void <init>(kodkod.engine.fol2sat.MemoryLogger$MemoryLog,kodkod.engine.fol2sat.RecordFilter)>(r1, r2);

        return $r0;
    }

    public java.util.Set roots()
    {
        java.util.Set $r1;
        kodkod.engine.fol2sat.MemoryLogger$MemoryLog r0;

        r0 := @this: kodkod.engine.fol2sat.MemoryLogger$MemoryLog;

        $r1 = r0.<kodkod.engine.fol2sat.MemoryLogger$MemoryLog: java.util.Set roots>;

        return $r1;
    }

    static java.util.Set access$0(kodkod.engine.fol2sat.MemoryLogger$MemoryLog)
    {
        java.util.Set $r1;
        kodkod.engine.fol2sat.MemoryLogger$MemoryLog r0;

        r0 := @parameter0: kodkod.engine.fol2sat.MemoryLogger$MemoryLog;

        $r1 = r0.<kodkod.engine.fol2sat.MemoryLogger$MemoryLog: java.util.Set roots>;

        return $r1;
    }

    static int[] access$1(kodkod.engine.fol2sat.MemoryLogger$MemoryLog)
    {
        kodkod.engine.fol2sat.MemoryLogger$MemoryLog r0;
        int[] $r1;

        r0 := @parameter0: kodkod.engine.fol2sat.MemoryLogger$MemoryLog;

        $r1 = r0.<kodkod.engine.fol2sat.MemoryLogger$MemoryLog: int[] transl>;

        return $r1;
    }

    static kodkod.ast.Node[] access$2(kodkod.engine.fol2sat.MemoryLogger$MemoryLog)
    {
        kodkod.engine.fol2sat.MemoryLogger$MemoryLog r0;
        kodkod.ast.Node[] $r1;

        r0 := @parameter0: kodkod.engine.fol2sat.MemoryLogger$MemoryLog;

        $r1 = r0.<kodkod.engine.fol2sat.MemoryLogger$MemoryLog: kodkod.ast.Node[] original>;

        return $r1;
    }
}
