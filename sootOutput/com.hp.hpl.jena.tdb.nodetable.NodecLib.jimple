public class com.hp.hpl.jena.tdb.nodetable.NodecLib extends java.lang.Object
{
    private static final char MarkerChar;
    private static final char[] invalidIRIChars;

    public void <init>()
    {
        com.hp.hpl.jena.tdb.nodetable.NodecLib r0;

        r0 := @this: com.hp.hpl.jena.tdb.nodetable.NodecLib;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String encode(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0;
        java.lang.String $r1;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        $r1 = staticinvoke <com.hp.hpl.jena.tdb.nodetable.NodecLib: java.lang.String encode(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.shared.PrefixMapping)>(r0, null);

        return $r1;
    }

    public static java.lang.String encode(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.shared.PrefixMapping)
    {
        com.hp.hpl.jena.graph.Node r10;
        char[] $r1;
        java.lang.StringBuilder $r4, $r5, $r7;
        java.lang.String $r0, $r2, $r3, $r6, $r8, $r11;
        com.hp.hpl.jena.shared.PrefixMapping r9;
        boolean $z0, $z1;

        r10 := @parameter0: com.hp.hpl.jena.graph.Node;

        r9 := @parameter1: com.hp.hpl.jena.shared.PrefixMapping;

        $z0 = virtualinvoke r10.<com.hp.hpl.jena.graph.Node: boolean isBlank()>();

        if $z0 == 0 goto label1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_:");

        $r6 = virtualinvoke r10.<com.hp.hpl.jena.graph.Node: java.lang.String getBlankNodeLabel()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;

     label1:
        $z1 = virtualinvoke r10.<com.hp.hpl.jena.graph.Node: boolean isURI()>();

        if $z1 == 0 goto label2;

        $r0 = virtualinvoke r10.<com.hp.hpl.jena.graph.Node: java.lang.String getURI()>();

        $r1 = <com.hp.hpl.jena.tdb.nodetable.NodecLib: char[] invalidIRIChars>;

        $r2 = staticinvoke <org.apache.jena.atlas.lib.StrUtils: java.lang.String encodeHex(java.lang.String,char,char[])>($r0, 95, $r1);

        $r3 = virtualinvoke r10.<com.hp.hpl.jena.graph.Node: java.lang.String getURI()>();

        if $r2 == $r3 goto label2;

        r10 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createURI(java.lang.String)>($r2);

     label2:
        $r11 = staticinvoke <com.hp.hpl.jena.tdb.lib.NodeFmtLib: java.lang.String serialize(com.hp.hpl.jena.graph.Node)>(r10);

        return $r11;
    }

    public static com.hp.hpl.jena.graph.Node decode(java.lang.String)
    {
        java.lang.String r0;
        com.hp.hpl.jena.graph.Node $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.hp.hpl.jena.tdb.nodetable.NodecLib: com.hp.hpl.jena.graph.Node decode(java.lang.String,com.hp.hpl.jena.shared.PrefixMapping)>(r0, null);

        return $r1;
    }

    public static com.hp.hpl.jena.graph.Node decode(java.lang.String, com.hp.hpl.jena.shared.PrefixMapping)
    {
        com.hp.hpl.jena.graph.Node $r1, $r4, $r7;
        com.hp.hpl.jena.sparql.sse.SSEParseException $r8;
        com.hp.hpl.jena.rdf.model.AnonId $r6;
        int $i0, $i1;
        java.lang.String $r2, $r3, $r5, $r12, r13;
        boolean $z0, $z1;
        java.lang.StringBuilder $r9, $r10, $r11;
        com.hp.hpl.jena.shared.PrefixMapping r0;

        r13 := @parameter0: java.lang.String;

        r0 := @parameter1: com.hp.hpl.jena.shared.PrefixMapping;

        $z0 = virtualinvoke r13.<java.lang.String: boolean startsWith(java.lang.String)>("_:");

        if $z0 == 0 goto label1;

        $r5 = virtualinvoke r13.<java.lang.String: java.lang.String substring(int)>(2);

        $r6 = new com.hp.hpl.jena.rdf.model.AnonId;

        specialinvoke $r6.<com.hp.hpl.jena.rdf.model.AnonId: void <init>(java.lang.String)>($r5);

        $r7 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createAnon(com.hp.hpl.jena.rdf.model.AnonId)>($r6);

        return $r7;

     label1:
        $z1 = virtualinvoke r13.<java.lang.String: boolean startsWith(java.lang.String)>("<");

        if $z1 == 0 goto label2;

        $i0 = virtualinvoke r13.<java.lang.String: int length()>();

        $i1 = $i0 - 1;

        $r2 = virtualinvoke r13.<java.lang.String: java.lang.String substring(int,int)>(1, $i1);

        $r3 = staticinvoke <org.apache.jena.atlas.lib.StrUtils: java.lang.String decodeHex(java.lang.String,char)>($r2, 95);

        $r4 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createURI(java.lang.String)>($r3);

        return $r4;

     label2:
        $r1 = staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.graph.Node parseNode(java.lang.String,com.hp.hpl.jena.shared.PrefixMapping)>(r13, r0);

     label3:
        return $r1;

     label4:
        $r8 := @caughtexception;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("decode: Failed to parse: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.jena.atlas.logging.Log: void fatal(java.lang.Class,java.lang.String)>(class "Lcom/hp/hpl/jena/tdb/lib/NodeLib;", $r12);

        throw $r8;

        catch com.hp.hpl.jena.sparql.sse.SSEParseException from label2 to label3 with label4;
    }

    static void <clinit>()
    {
        char[] $r0;

        <com.hp.hpl.jena.tdb.nodetable.NodecLib: char MarkerChar> = 95;

        $r0 = newarray (char)[2];

        $r0[0] = 95;

        $r0[1] = 32;

        <com.hp.hpl.jena.tdb.nodetable.NodecLib: char[] invalidIRIChars> = $r0;

        return;
    }
}
