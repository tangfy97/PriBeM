public class org.bouncycastle.crypto.BufferedAsymmetricBlockCipher extends java.lang.Object
{
    protected byte[] buf;
    protected int bufOff;
    private final org.bouncycastle.crypto.AsymmetricBlockCipher cipher;

    public void <init>(org.bouncycastle.crypto.AsymmetricBlockCipher)
    {
        org.bouncycastle.crypto.BufferedAsymmetricBlockCipher r0;
        org.bouncycastle.crypto.AsymmetricBlockCipher r1;

        r0 := @this: org.bouncycastle.crypto.BufferedAsymmetricBlockCipher;

        r1 := @parameter0: org.bouncycastle.crypto.AsymmetricBlockCipher;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.bouncycastle.crypto.BufferedAsymmetricBlockCipher: org.bouncycastle.crypto.AsymmetricBlockCipher cipher> = r1;

        return;
    }

    public org.bouncycastle.crypto.AsymmetricBlockCipher getUnderlyingCipher()
    {
        org.bouncycastle.crypto.BufferedAsymmetricBlockCipher r0;
        org.bouncycastle.crypto.AsymmetricBlockCipher $r1;

        r0 := @this: org.bouncycastle.crypto.BufferedAsymmetricBlockCipher;

        $r1 = r0.<org.bouncycastle.crypto.BufferedAsymmetricBlockCipher: org.bouncycastle.crypto.AsymmetricBlockCipher cipher>;

        return $r1;
    }

    public int getBufferPosition()
    {
        org.bouncycastle.crypto.BufferedAsymmetricBlockCipher r0;
        int $i0;

        r0 := @this: org.bouncycastle.crypto.BufferedAsymmetricBlockCipher;

        $i0 = r0.<org.bouncycastle.crypto.BufferedAsymmetricBlockCipher: int bufOff>;

        return $i0;
    }

    public void init(boolean, org.bouncycastle.crypto.CipherParameters)
    {
        org.bouncycastle.crypto.BufferedAsymmetricBlockCipher r0;
        byte[] $r4;
        org.bouncycastle.crypto.AsymmetricBlockCipher $r2, $r3;
        int $i0, $i1;
        boolean z0, $z1;
        org.bouncycastle.crypto.CipherParameters r1;

        r0 := @this: org.bouncycastle.crypto.BufferedAsymmetricBlockCipher;

        z0 := @parameter0: boolean;

        r1 := @parameter1: org.bouncycastle.crypto.CipherParameters;

        virtualinvoke r0.<org.bouncycastle.crypto.BufferedAsymmetricBlockCipher: void reset()>();

        $r2 = r0.<org.bouncycastle.crypto.BufferedAsymmetricBlockCipher: org.bouncycastle.crypto.AsymmetricBlockCipher cipher>;

        interfaceinvoke $r2.<org.bouncycastle.crypto.AsymmetricBlockCipher: void init(boolean,org.bouncycastle.crypto.CipherParameters)>(z0, r1);

        $r3 = r0.<org.bouncycastle.crypto.BufferedAsymmetricBlockCipher: org.bouncycastle.crypto.AsymmetricBlockCipher cipher>;

        $i0 = interfaceinvoke $r3.<org.bouncycastle.crypto.AsymmetricBlockCipher: int getInputBlockSize()>();

        if z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $i1 = $i0 + $z1;

        $r4 = newarray (byte)[$i1];

        r0.<org.bouncycastle.crypto.BufferedAsymmetricBlockCipher: byte[] buf> = $r4;

        r0.<org.bouncycastle.crypto.BufferedAsymmetricBlockCipher: int bufOff> = 0;

        return;
    }

    public int getInputBlockSize()
    {
        org.bouncycastle.crypto.BufferedAsymmetricBlockCipher r0;
        int $i0;
        org.bouncycastle.crypto.AsymmetricBlockCipher $r1;

        r0 := @this: org.bouncycastle.crypto.BufferedAsymmetricBlockCipher;

        $r1 = r0.<org.bouncycastle.crypto.BufferedAsymmetricBlockCipher: org.bouncycastle.crypto.AsymmetricBlockCipher cipher>;

        $i0 = interfaceinvoke $r1.<org.bouncycastle.crypto.AsymmetricBlockCipher: int getInputBlockSize()>();

        return $i0;
    }

    public int getOutputBlockSize()
    {
        org.bouncycastle.crypto.BufferedAsymmetricBlockCipher r0;
        int $i0;
        org.bouncycastle.crypto.AsymmetricBlockCipher $r1;

        r0 := @this: org.bouncycastle.crypto.BufferedAsymmetricBlockCipher;

        $r1 = r0.<org.bouncycastle.crypto.BufferedAsymmetricBlockCipher: org.bouncycastle.crypto.AsymmetricBlockCipher cipher>;

        $i0 = interfaceinvoke $r1.<org.bouncycastle.crypto.AsymmetricBlockCipher: int getOutputBlockSize()>();

        return $i0;
    }

    public void processByte(byte)
    {
        org.bouncycastle.crypto.BufferedAsymmetricBlockCipher r0;
        byte[] $r1, $r2;
        org.bouncycastle.crypto.DataLengthException $r3;
        byte b4;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.bouncycastle.crypto.BufferedAsymmetricBlockCipher;

        b4 := @parameter0: byte;

        $i1 = r0.<org.bouncycastle.crypto.BufferedAsymmetricBlockCipher: int bufOff>;

        $r1 = r0.<org.bouncycastle.crypto.BufferedAsymmetricBlockCipher: byte[] buf>;

        $i0 = lengthof $r1;

        if $i1 < $i0 goto label1;

        $r3 = new org.bouncycastle.crypto.DataLengthException;

        specialinvoke $r3.<org.bouncycastle.crypto.DataLengthException: void <init>(java.lang.String)>("attempt to process message too long for cipher");

        throw $r3;

     label1:
        $r2 = r0.<org.bouncycastle.crypto.BufferedAsymmetricBlockCipher: byte[] buf>;

        $i2 = r0.<org.bouncycastle.crypto.BufferedAsymmetricBlockCipher: int bufOff>;

        $i3 = $i2 + 1;

        r0.<org.bouncycastle.crypto.BufferedAsymmetricBlockCipher: int bufOff> = $i3;

        $r2[$i2] = b4;

        return;
    }

    public void processBytes(byte[], int, int)
    {
        org.bouncycastle.crypto.BufferedAsymmetricBlockCipher r0;
        byte[] $r1, r2, $r3;
        java.lang.IllegalArgumentException $r5;
        org.bouncycastle.crypto.DataLengthException $r4;
        int i0, $i1, $i2, $i3, i4, $i5, $i6, $i7;

        r0 := @this: org.bouncycastle.crypto.BufferedAsymmetricBlockCipher;

        r2 := @parameter0: byte[];

        i4 := @parameter1: int;

        i0 := @parameter2: int;

        if i0 != 0 goto label1;

        return;

     label1:
        if i0 >= 0 goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can\'t have a negative input length!");

        throw $r5;

     label2:
        $i1 = r0.<org.bouncycastle.crypto.BufferedAsymmetricBlockCipher: int bufOff>;

        $i3 = $i1 + i0;

        $r1 = r0.<org.bouncycastle.crypto.BufferedAsymmetricBlockCipher: byte[] buf>;

        $i2 = lengthof $r1;

        if $i3 <= $i2 goto label3;

        $r4 = new org.bouncycastle.crypto.DataLengthException;

        specialinvoke $r4.<org.bouncycastle.crypto.DataLengthException: void <init>(java.lang.String)>("attempt to process message too long for cipher");

        throw $r4;

     label3:
        $r3 = r0.<org.bouncycastle.crypto.BufferedAsymmetricBlockCipher: byte[] buf>;

        $i5 = r0.<org.bouncycastle.crypto.BufferedAsymmetricBlockCipher: int bufOff>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, i4, $r3, $i5, i0);

        $i6 = r0.<org.bouncycastle.crypto.BufferedAsymmetricBlockCipher: int bufOff>;

        $i7 = $i6 + i0;

        r0.<org.bouncycastle.crypto.BufferedAsymmetricBlockCipher: int bufOff> = $i7;

        return;
    }

    public byte[] doFinal() throws org.bouncycastle.crypto.InvalidCipherTextException
    {
        org.bouncycastle.crypto.BufferedAsymmetricBlockCipher r0;
        byte[] $r1, $r3;
        int $i0;
        org.bouncycastle.crypto.AsymmetricBlockCipher $r2;

        r0 := @this: org.bouncycastle.crypto.BufferedAsymmetricBlockCipher;

        $r2 = r0.<org.bouncycastle.crypto.BufferedAsymmetricBlockCipher: org.bouncycastle.crypto.AsymmetricBlockCipher cipher>;

        $r1 = r0.<org.bouncycastle.crypto.BufferedAsymmetricBlockCipher: byte[] buf>;

        $i0 = r0.<org.bouncycastle.crypto.BufferedAsymmetricBlockCipher: int bufOff>;

        $r3 = interfaceinvoke $r2.<org.bouncycastle.crypto.AsymmetricBlockCipher: byte[] processBlock(byte[],int,int)>($r1, 0, $i0);

        virtualinvoke r0.<org.bouncycastle.crypto.BufferedAsymmetricBlockCipher: void reset()>();

        return $r3;
    }

    public void reset()
    {
        org.bouncycastle.crypto.BufferedAsymmetricBlockCipher r0;
        byte[] $r1, $r2, $r3;
        int $i0, i1;

        r0 := @this: org.bouncycastle.crypto.BufferedAsymmetricBlockCipher;

        $r1 = r0.<org.bouncycastle.crypto.BufferedAsymmetricBlockCipher: byte[] buf>;

        if $r1 == null goto label2;

        i1 = 0;

     label1:
        $r2 = r0.<org.bouncycastle.crypto.BufferedAsymmetricBlockCipher: byte[] buf>;

        $i0 = lengthof $r2;

        if i1 >= $i0 goto label2;

        $r3 = r0.<org.bouncycastle.crypto.BufferedAsymmetricBlockCipher: byte[] buf>;

        $r3[i1] = 0;

        i1 = i1 + 1;

        goto label1;

     label2:
        r0.<org.bouncycastle.crypto.BufferedAsymmetricBlockCipher: int bufOff> = 0;

        return;
    }
}
