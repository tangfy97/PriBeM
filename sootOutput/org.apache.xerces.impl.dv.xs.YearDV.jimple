public class org.apache.xerces.impl.dv.xs.YearDV extends org.apache.xerces.impl.dv.xs.AbstractDateTimeDV
{

    public void <init>()
    {
        org.apache.xerces.impl.dv.xs.YearDV r0;

        r0 := @this: org.apache.xerces.impl.dv.xs.YearDV;

        specialinvoke r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV: void <init>()>();

        return;
    }

    public java.lang.Object getActualValue(java.lang.String, org.apache.xerces.impl.dv.ValidationContext) throws org.apache.xerces.impl.dv.InvalidDatatypeValueException
    {
        org.apache.xerces.impl.dv.ValidationContext r6;
        org.apache.xerces.impl.dv.InvalidDatatypeValueException $r4;
        java.lang.Object[] $r5;
        org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData $r2;
        org.apache.xerces.impl.dv.xs.YearDV r0;
        java.lang.String r1;
        java.lang.Exception $r3;

        r0 := @this: org.apache.xerces.impl.dv.xs.YearDV;

        r1 := @parameter0: java.lang.String;

        r6 := @parameter1: org.apache.xerces.impl.dv.ValidationContext;

     label1:
        $r2 = virtualinvoke r0.<org.apache.xerces.impl.dv.xs.YearDV: org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData parse(java.lang.String)>(r1);

        return $r2;

     label2:
        $r3 := @caughtexception;

        $r4 = new org.apache.xerces.impl.dv.InvalidDatatypeValueException;

        $r5 = newarray (java.lang.Object)[2];

        $r5[0] = r1;

        $r5[1] = "gYear";

        specialinvoke $r4.<org.apache.xerces.impl.dv.InvalidDatatypeValueException: void <init>(java.lang.String,java.lang.Object[])>("cvc-datatype-valid.1.2.1", $r5);

        throw $r4;

        catch java.lang.Exception from label1 to label2 with label2;
    }

    protected org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData parse(java.lang.String) throws org.apache.xerces.impl.dv.xs.SchemaDateTimeException
    {
        byte b10, b11;
        int $i0, $i2, $i3, $i4, $i5, $i6, $i8, $i9, $i12, $i14, $i15, $i17;
        java.lang.String r1;
        boolean z0, z1;
        org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData $r5;
        org.apache.xerces.impl.dv.xs.YearDV r2;
        char $c1, $c7;
        java.lang.RuntimeException $r6, $r7;

        r2 := @this: org.apache.xerces.impl.dv.xs.YearDV;

        r1 := @parameter0: java.lang.String;

        $r5 = new org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData;

        specialinvoke $r5.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: void <init>(java.lang.String,org.apache.xerces.impl.dv.xs.AbstractDateTimeDV)>(r1, r2);

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        z0 = 0;

        b11 = 0;

        z1 = 0;

        b10 = 0;

        $c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(0);

        $i12 = (int) $c1;

        if $i12 != 45 goto label1;

        z0 = 1;

        b11 = 1;

        z1 = 1;

        b10 = 1;

     label1:
        $i2 = virtualinvoke r2.<org.apache.xerces.impl.dv.xs.YearDV: int findUTCSign(java.lang.String,int,int)>(r1, b10, $i0);

        $i14 = (int) -1;

        if $i2 != $i14 goto label2;

        $i9 = $i0;

        goto label3;

     label2:
        $i9 = $i2;

     label3:
        $i8 = $i9 - z1;

        if $i8 >= 4 goto label4;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>("Year must have \'CCYY\' format");

        throw $r6;

     label4:
        if $i8 <= 4 goto label5;

        $c7 = virtualinvoke r1.<java.lang.String: char charAt(int)>(b11);

        $i15 = (int) $c7;

        if $i15 != 48 goto label5;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>("Leading zeros are required if the year value would otherwise have fewer than four digits; otherwise they are forbidden");

        throw $r7;

     label5:
        $i17 = (int) -1;

        if $i2 != $i17 goto label6;

        $i6 = virtualinvoke r2.<org.apache.xerces.impl.dv.xs.YearDV: int parseIntYear(java.lang.String,int)>(r1, $i0);

        $r5.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int year> = $i6;

        goto label7;

     label6:
        $i3 = virtualinvoke r2.<org.apache.xerces.impl.dv.xs.YearDV: int parseIntYear(java.lang.String,int)>(r1, $i2);

        $r5.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int year> = $i3;

        virtualinvoke r2.<org.apache.xerces.impl.dv.xs.YearDV: void getTimeZone(java.lang.String,org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData,int,int)>(r1, $r5, $i2, $i0);

     label7:
        $r5.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int month> = 1;

        $r5.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int day> = 1;

        virtualinvoke r2.<org.apache.xerces.impl.dv.xs.YearDV: void validateDateTime(org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData)>($r5);

        virtualinvoke r2.<org.apache.xerces.impl.dv.xs.YearDV: void saveUnnormalized(org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData)>($r5);

        $i4 = $r5.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int utc>;

        if $i4 == 0 goto label8;

        $i5 = $r5.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int utc>;

        if $i5 == 90 goto label8;

        virtualinvoke r2.<org.apache.xerces.impl.dv.xs.YearDV: void normalize(org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData)>($r5);

     label8:
        $r5.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int position> = 0;

        return $r5;
    }

    protected java.lang.String dateToString(org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData)
    {
        org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData r2;
        org.apache.xerces.impl.dv.xs.YearDV r1;
        char $c2;
        java.lang.StringBuffer $r4;
        int $i0, $i1, $i3;
        java.lang.String $r3;

        r1 := @this: org.apache.xerces.impl.dv.xs.YearDV;

        r2 := @parameter0: org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>(int)>(5);

        $i0 = r2.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int year>;

        virtualinvoke r1.<org.apache.xerces.impl.dv.xs.YearDV: void append(java.lang.StringBuffer,int,int)>($r4, $i0, 4);

        $i1 = r2.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int utc>;

        $c2 = (char) $i1;

        $i3 = (int) $c2;

        virtualinvoke r1.<org.apache.xerces.impl.dv.xs.YearDV: void append(java.lang.StringBuffer,int,int)>($r4, $i3, 0);

        $r3 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    protected javax.xml.datatype.XMLGregorianCalendar getXMLGregorianCalendar(org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData)
    {
        org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData r0;
        org.apache.xerces.impl.dv.xs.YearDV r3;
        javax.xml.datatype.DatatypeFactory $r1;
        javax.xml.datatype.XMLGregorianCalendar $r2;
        int $i0, $i1, $i2, $i3, $i4;
        boolean $z0;

        r3 := @this: org.apache.xerces.impl.dv.xs.YearDV;

        r0 := @parameter0: org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData;

        $r1 = <org.apache.xerces.impl.dv.xs.AbstractDateTimeDV: javax.xml.datatype.DatatypeFactory datatypeFactory>;

        $i0 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int unNormYear>;

        $z0 = virtualinvoke r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: boolean hasTimeZone()>();

        if $z0 == 0 goto label1;

        $i1 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int timezoneHr>;

        $i3 = $i1 * 60;

        $i2 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int timezoneMin>;

        $i4 = $i3 + $i2;

        goto label2;

     label1:
        $i4 = -2147483648;

     label2:
        $r2 = virtualinvoke $r1.<javax.xml.datatype.DatatypeFactory: javax.xml.datatype.XMLGregorianCalendar newXMLGregorianCalendar(int,int,int,int,int,int,int,int)>($i0, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, $i4);

        return $r2;
    }
}
