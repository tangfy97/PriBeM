final class com.mycila.inject.scope.ConcurrentSingleton$DefaultThreadFactory extends java.lang.Object implements java.util.concurrent.ThreadFactory
{
    private final java.lang.ThreadGroup group;
    private final java.util.concurrent.atomic.AtomicLong threadNumber;
    private final java.lang.String namePrefix;

    private void <init>(java.lang.String)
    {
        java.util.concurrent.atomic.AtomicLong $r1;
        com.mycila.inject.scope.ConcurrentSingleton$DefaultThreadFactory r0;
        java.lang.Thread $r3;
        java.lang.String r4;
        java.lang.ThreadGroup $r5;
        java.lang.SecurityManager $r2;

        r0 := @this: com.mycila.inject.scope.ConcurrentSingleton$DefaultThreadFactory;

        r4 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicLong: void <init>()>();

        r0.<com.mycila.inject.scope.ConcurrentSingleton$DefaultThreadFactory: java.util.concurrent.atomic.AtomicLong threadNumber> = $r1;

        $r2 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        if $r2 == null goto label1;

        $r5 = virtualinvoke $r2.<java.lang.SecurityManager: java.lang.ThreadGroup getThreadGroup()>();

        goto label2;

     label1:
        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r5 = virtualinvoke $r3.<java.lang.Thread: java.lang.ThreadGroup getThreadGroup()>();

     label2:
        r0.<com.mycila.inject.scope.ConcurrentSingleton$DefaultThreadFactory: java.lang.ThreadGroup group> = $r5;

        r0.<com.mycila.inject.scope.ConcurrentSingleton$DefaultThreadFactory: java.lang.String namePrefix> = r4;

        return;
    }

    public java.lang.Thread newThread(java.lang.Runnable)
    {
        com.mycila.inject.scope.ConcurrentSingleton$DefaultThreadFactory r1;
        long $l0;
        java.lang.ThreadGroup $r4;
        java.lang.Runnable r2;
        java.util.concurrent.atomic.AtomicLong $r7;
        java.lang.Thread $r0;
        int $i1;
        java.lang.StringBuilder $r3, $r6, $r8;
        java.lang.String $r5, $r9;
        boolean $z0;

        r1 := @this: com.mycila.inject.scope.ConcurrentSingleton$DefaultThreadFactory;

        r2 := @parameter0: java.lang.Runnable;

        $r0 = new java.lang.Thread;

        $r4 = r1.<com.mycila.inject.scope.ConcurrentSingleton$DefaultThreadFactory: java.lang.ThreadGroup group>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r5 = r1.<com.mycila.inject.scope.ConcurrentSingleton$DefaultThreadFactory: java.lang.String namePrefix>;

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = r1.<com.mycila.inject.scope.ConcurrentSingleton$DefaultThreadFactory: java.util.concurrent.atomic.AtomicLong threadNumber>;

        $l0 = virtualinvoke $r7.<java.util.concurrent.atomic.AtomicLong: long getAndIncrement()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long)>($r4, r2, $r9, 0L);

        $z0 = virtualinvoke $r0.<java.lang.Thread: boolean isDaemon()>();

        if $z0 == 0 goto label1;

        virtualinvoke $r0.<java.lang.Thread: void setDaemon(boolean)>(0);

     label1:
        $i1 = virtualinvoke $r0.<java.lang.Thread: int getPriority()>();

        if $i1 == 5 goto label2;

        virtualinvoke $r0.<java.lang.Thread: void setPriority(int)>(5);

     label2:
        return $r0;
    }

    void <init>(java.lang.String, com.mycila.inject.scope.ConcurrentSingleton$1)
    {
        com.mycila.inject.scope.ConcurrentSingleton$DefaultThreadFactory r0;
        java.lang.String r1;
        com.mycila.inject.scope.ConcurrentSingleton$1 r2;

        r0 := @this: com.mycila.inject.scope.ConcurrentSingleton$DefaultThreadFactory;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.mycila.inject.scope.ConcurrentSingleton$1;

        specialinvoke r0.<com.mycila.inject.scope.ConcurrentSingleton$DefaultThreadFactory: void <init>(java.lang.String)>(r1);

        return;
    }
}
