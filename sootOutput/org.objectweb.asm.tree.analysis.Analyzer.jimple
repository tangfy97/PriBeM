public class org.objectweb.asm.tree.analysis.Analyzer extends java.lang.Object implements org.objectweb.asm.Opcodes
{
    private final org.objectweb.asm.tree.analysis.Interpreter interpreter;
    private int n;
    private org.objectweb.asm.tree.InsnList insns;
    private java.util.List[] handlers;
    private org.objectweb.asm.tree.analysis.Frame[] frames;
    private org.objectweb.asm.tree.analysis.Subroutine[] subroutines;
    private boolean[] queued;
    private int[] queue;
    private int top;

    public void <init>(org.objectweb.asm.tree.analysis.Interpreter)
    {
        org.objectweb.asm.tree.analysis.Interpreter r1;
        org.objectweb.asm.tree.analysis.Analyzer r0;

        r0 := @this: org.objectweb.asm.tree.analysis.Analyzer;

        r1 := @parameter0: org.objectweb.asm.tree.analysis.Interpreter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.objectweb.asm.tree.analysis.Analyzer: org.objectweb.asm.tree.analysis.Interpreter interpreter> = r1;

        return;
    }

    public org.objectweb.asm.tree.analysis.Frame[] analyze(java.lang.String, org.objectweb.asm.tree.MethodNode) throws org.objectweb.asm.tree.analysis.AnalyzerException
    {
        org.objectweb.asm.tree.analysis.AnalyzerException $r56, $r110, $r118, $r119;
        org.objectweb.asm.tree.analysis.Frame $r15, $r16, r27, $r39, $r50, $r55;
        org.objectweb.asm.tree.analysis.Frame[] $r6, $r7, $r24, $r26, $r49, $r51, $r106, $r107, $r108;
        org.objectweb.asm.tree.analysis.Subroutine[] $r8, $r28, $r52, $r82, $r84, $r87;
        java.lang.StringBuilder $r111, $r112, $r113, $r114, $r116, $r120, $r122, $r123, $r124, $r126;
        org.objectweb.asm.tree.analysis.Subroutine $r12, $r54, $r69, $r83, $r85, $r92, r131, r132, $r134;
        org.objectweb.asm.tree.InsnList $r2, $r3, $r30, $r36, $r48, $r58, $r62, $r64, $r68, $r96, $r100, $r102, $r136;
        boolean[] $r9, $r29, $r42, $r44, $r53, $r143;
        org.objectweb.asm.tree.LookupSwitchInsnNode r138;
        java.util.List[] $r4, $r5, $r103, $r105, $r144;
        org.objectweb.asm.tree.IincInsnNode $r41;
        int[] $r10, $r25;
        org.objectweb.asm.Type[] $r22;
        org.objectweb.asm.tree.MethodNode r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, i46, i47, i48, i49, i50, $i51, i52, $i53, $i54, $i55, i56, i57, i58, i59, $i60, i61, $i62, $i63, i64;
        java.lang.Object $r32, $r47, $r61, $r67, $r88, $r90, $r98;
        java.lang.Exception $r109;
        org.objectweb.asm.tree.VarInsnNode $r43;
        org.objectweb.asm.tree.analysis.Analyzer r1;
        java.util.ArrayList $r13, $r104;
        org.objectweb.asm.tree.JumpInsnNode r130, r135, r142;
        java.lang.String $r17, $r21, r23, $r33, $r34, $r115, $r117, $r125, $r127;
        org.objectweb.asm.tree.analysis.Value $r20, $r38, $r72, $r75, $r78, $r81;
        org.objectweb.asm.tree.TableSwitchInsnNode r140;
        org.objectweb.asm.Type $r19, $r73, $r76, $r79, r147;
        org.objectweb.asm.tree.analysis.Interpreter $r18, $r37, $r40, $r71, $r74, $r77, $r80;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.util.List $r11, $r45, $r46, $r59, $r60, $r65, $r66, $r91, $r97, r129, $r145;
        org.objectweb.asm.tree.TryCatchBlockNode r128, r146;
        java.util.HashMap $r14;
        org.objectweb.asm.tree.LabelNode $r35, $r57, $r63, $r70, $r86, $r89, $r93, $r94, $r95, $r99, $r101, $r137, r139, r141;
        org.objectweb.asm.tree.AbstractInsnNode $r31, $r121, r133;

        r1 := @this: org.objectweb.asm.tree.analysis.Analyzer;

        r23 := @parameter0: java.lang.String;

        r0 := @parameter1: org.objectweb.asm.tree.MethodNode;

        $i0 = r0.<org.objectweb.asm.tree.MethodNode: int access>;

        $i1 = $i0 & 1280;

        if $i1 == 0 goto label01;

        $r106 = newarray (org.objectweb.asm.tree.analysis.Frame)[0];

        $r107 = (org.objectweb.asm.tree.analysis.Frame[]) $r106;

        r1.<org.objectweb.asm.tree.analysis.Analyzer: org.objectweb.asm.tree.analysis.Frame[] frames> = $r107;

        $r108 = r1.<org.objectweb.asm.tree.analysis.Analyzer: org.objectweb.asm.tree.analysis.Frame[] frames>;

        return $r108;

     label01:
        $r2 = r0.<org.objectweb.asm.tree.MethodNode: org.objectweb.asm.tree.InsnList instructions>;

        $i2 = virtualinvoke $r2.<org.objectweb.asm.tree.InsnList: int size()>();

        r1.<org.objectweb.asm.tree.analysis.Analyzer: int n> = $i2;

        $r3 = r0.<org.objectweb.asm.tree.MethodNode: org.objectweb.asm.tree.InsnList instructions>;

        r1.<org.objectweb.asm.tree.analysis.Analyzer: org.objectweb.asm.tree.InsnList insns> = $r3;

        $i3 = r1.<org.objectweb.asm.tree.analysis.Analyzer: int n>;

        $r4 = newarray (java.util.List)[$i3];

        $r5 = (java.util.List[]) $r4;

        r1.<org.objectweb.asm.tree.analysis.Analyzer: java.util.List[] handlers> = $r5;

        $i4 = r1.<org.objectweb.asm.tree.analysis.Analyzer: int n>;

        $r6 = newarray (org.objectweb.asm.tree.analysis.Frame)[$i4];

        $r7 = (org.objectweb.asm.tree.analysis.Frame[]) $r6;

        r1.<org.objectweb.asm.tree.analysis.Analyzer: org.objectweb.asm.tree.analysis.Frame[] frames> = $r7;

        $i5 = r1.<org.objectweb.asm.tree.analysis.Analyzer: int n>;

        $r8 = newarray (org.objectweb.asm.tree.analysis.Subroutine)[$i5];

        r1.<org.objectweb.asm.tree.analysis.Analyzer: org.objectweb.asm.tree.analysis.Subroutine[] subroutines> = $r8;

        $i6 = r1.<org.objectweb.asm.tree.analysis.Analyzer: int n>;

        $r9 = newarray (boolean)[$i6];

        r1.<org.objectweb.asm.tree.analysis.Analyzer: boolean[] queued> = $r9;

        $i7 = r1.<org.objectweb.asm.tree.analysis.Analyzer: int n>;

        $r10 = newarray (int)[$i7];

        r1.<org.objectweb.asm.tree.analysis.Analyzer: int[] queue> = $r10;

        r1.<org.objectweb.asm.tree.analysis.Analyzer: int top> = 0;

        i46 = 0;

     label02:
        $r11 = r0.<org.objectweb.asm.tree.MethodNode: java.util.List tryCatchBlocks>;

        $i8 = interfaceinvoke $r11.<java.util.List: int size()>();

        if i46 >= $i8 goto label06;

        $r97 = r0.<org.objectweb.asm.tree.MethodNode: java.util.List tryCatchBlocks>;

        $r98 = interfaceinvoke $r97.<java.util.List: java.lang.Object get(int)>(i46);

        r128 = (org.objectweb.asm.tree.TryCatchBlockNode) $r98;

        $r100 = r1.<org.objectweb.asm.tree.analysis.Analyzer: org.objectweb.asm.tree.InsnList insns>;

        $r99 = r128.<org.objectweb.asm.tree.TryCatchBlockNode: org.objectweb.asm.tree.LabelNode start>;

        $i44 = virtualinvoke $r100.<org.objectweb.asm.tree.InsnList: int indexOf(org.objectweb.asm.tree.AbstractInsnNode)>($r99);

        $r102 = r1.<org.objectweb.asm.tree.analysis.Analyzer: org.objectweb.asm.tree.InsnList insns>;

        $r101 = r128.<org.objectweb.asm.tree.TryCatchBlockNode: org.objectweb.asm.tree.LabelNode end>;

        $i45 = virtualinvoke $r102.<org.objectweb.asm.tree.InsnList: int indexOf(org.objectweb.asm.tree.AbstractInsnNode)>($r101);

        i47 = $i44;

     label03:
        if i47 >= $i45 goto label05;

        $r103 = r1.<org.objectweb.asm.tree.analysis.Analyzer: java.util.List[] handlers>;

        r129 = $r103[i47];

        if r129 != null goto label04;

        $r104 = new java.util.ArrayList;

        specialinvoke $r104.<java.util.ArrayList: void <init>()>();

        r129 = $r104;

        $r105 = r1.<org.objectweb.asm.tree.analysis.Analyzer: java.util.List[] handlers>;

        $r105[i47] = $r104;

     label04:
        interfaceinvoke r129.<java.util.List: boolean add(java.lang.Object)>(r128);

        i47 = i47 + 1;

        goto label03;

     label05:
        i46 = i46 + 1;

        goto label02;

     label06:
        $r12 = new org.objectweb.asm.tree.analysis.Subroutine;

        $i9 = r0.<org.objectweb.asm.tree.MethodNode: int maxLocals>;

        specialinvoke $r12.<org.objectweb.asm.tree.analysis.Subroutine: void <init>(org.objectweb.asm.tree.LabelNode,int,org.objectweb.asm.tree.JumpInsnNode)>(null, $i9, null);

        $r13 = new java.util.ArrayList;

        specialinvoke $r13.<java.util.ArrayList: void <init>()>();

        $r14 = new java.util.HashMap;

        specialinvoke $r14.<java.util.HashMap: void <init>()>();

        specialinvoke r1.<org.objectweb.asm.tree.analysis.Analyzer: void findSubroutine(int,org.objectweb.asm.tree.analysis.Subroutine,java.util.List)>(0, $r12, $r13);

     label07:
        $z0 = interfaceinvoke $r13.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label10;

        $r88 = interfaceinvoke $r13.<java.util.List: java.lang.Object remove(int)>(0);

        r130 = (org.objectweb.asm.tree.JumpInsnNode) $r88;

        $r89 = r130.<org.objectweb.asm.tree.JumpInsnNode: org.objectweb.asm.tree.LabelNode label>;

        $r90 = interfaceinvoke $r14.<java.util.Map: java.lang.Object get(java.lang.Object)>($r89);

        r131 = (org.objectweb.asm.tree.analysis.Subroutine) $r90;

        if r131 != null goto label08;

        $r92 = new org.objectweb.asm.tree.analysis.Subroutine;

        $r93 = r130.<org.objectweb.asm.tree.JumpInsnNode: org.objectweb.asm.tree.LabelNode label>;

        $i42 = r0.<org.objectweb.asm.tree.MethodNode: int maxLocals>;

        specialinvoke $r92.<org.objectweb.asm.tree.analysis.Subroutine: void <init>(org.objectweb.asm.tree.LabelNode,int,org.objectweb.asm.tree.JumpInsnNode)>($r93, $i42, r130);

        $r94 = r130.<org.objectweb.asm.tree.JumpInsnNode: org.objectweb.asm.tree.LabelNode label>;

        interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r94, $r92);

        $r96 = r1.<org.objectweb.asm.tree.analysis.Analyzer: org.objectweb.asm.tree.InsnList insns>;

        $r95 = r130.<org.objectweb.asm.tree.JumpInsnNode: org.objectweb.asm.tree.LabelNode label>;

        $i43 = virtualinvoke $r96.<org.objectweb.asm.tree.InsnList: int indexOf(org.objectweb.asm.tree.AbstractInsnNode)>($r95);

        specialinvoke r1.<org.objectweb.asm.tree.analysis.Analyzer: void findSubroutine(int,org.objectweb.asm.tree.analysis.Subroutine,java.util.List)>($i43, $r92, $r13);

        goto label09;

     label08:
        $r91 = r131.<org.objectweb.asm.tree.analysis.Subroutine: java.util.List callers>;

        interfaceinvoke $r91.<java.util.List: boolean add(java.lang.Object)>(r130);

     label09:
        goto label07;

     label10:
        i48 = 0;

     label11:
        $i10 = r1.<org.objectweb.asm.tree.analysis.Analyzer: int n>;

        if i48 >= $i10 goto label13;

        $r82 = r1.<org.objectweb.asm.tree.analysis.Analyzer: org.objectweb.asm.tree.analysis.Subroutine[] subroutines>;

        $r83 = $r82[i48];

        if $r83 == null goto label12;

        $r84 = r1.<org.objectweb.asm.tree.analysis.Analyzer: org.objectweb.asm.tree.analysis.Subroutine[] subroutines>;

        $r85 = $r84[i48];

        $r86 = $r85.<org.objectweb.asm.tree.analysis.Subroutine: org.objectweb.asm.tree.LabelNode start>;

        if $r86 != null goto label12;

        $r87 = r1.<org.objectweb.asm.tree.analysis.Analyzer: org.objectweb.asm.tree.analysis.Subroutine[] subroutines>;

        $r87[i48] = null;

     label12:
        i48 = i48 + 1;

        goto label11;

     label13:
        $i12 = r0.<org.objectweb.asm.tree.MethodNode: int maxLocals>;

        $i11 = r0.<org.objectweb.asm.tree.MethodNode: int maxStack>;

        $r15 = virtualinvoke r1.<org.objectweb.asm.tree.analysis.Analyzer: org.objectweb.asm.tree.analysis.Frame newFrame(int,int)>($i12, $i11);

        $i14 = r0.<org.objectweb.asm.tree.MethodNode: int maxLocals>;

        $i13 = r0.<org.objectweb.asm.tree.MethodNode: int maxStack>;

        $r16 = virtualinvoke r1.<org.objectweb.asm.tree.analysis.Analyzer: org.objectweb.asm.tree.analysis.Frame newFrame(int,int)>($i14, $i13);

        $r18 = r1.<org.objectweb.asm.tree.analysis.Analyzer: org.objectweb.asm.tree.analysis.Interpreter interpreter>;

        $r17 = r0.<org.objectweb.asm.tree.MethodNode: java.lang.String desc>;

        $r19 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getReturnType(java.lang.String)>($r17);

        $r20 = virtualinvoke $r18.<org.objectweb.asm.tree.analysis.Interpreter: org.objectweb.asm.tree.analysis.Value newValue(org.objectweb.asm.Type)>($r19);

        virtualinvoke $r15.<org.objectweb.asm.tree.analysis.Frame: void setReturn(org.objectweb.asm.tree.analysis.Value)>($r20);

        $r21 = r0.<org.objectweb.asm.tree.MethodNode: java.lang.String desc>;

        $r22 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type[] getArgumentTypes(java.lang.String)>($r21);

        i49 = 0;

        $i15 = r0.<org.objectweb.asm.tree.MethodNode: int access>;

        $i16 = $i15 & 8;

        if $i16 != 0 goto label14;

        $r79 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getObjectType(java.lang.String)>(r23);

        i49 = 1;

        $r80 = r1.<org.objectweb.asm.tree.analysis.Analyzer: org.objectweb.asm.tree.analysis.Interpreter interpreter>;

        $r81 = virtualinvoke $r80.<org.objectweb.asm.tree.analysis.Interpreter: org.objectweb.asm.tree.analysis.Value newValue(org.objectweb.asm.Type)>($r79);

        virtualinvoke $r15.<org.objectweb.asm.tree.analysis.Frame: void setLocal(int,org.objectweb.asm.tree.analysis.Value)>(0, $r81);

     label14:
        i50 = 0;

     label15:
        $i51 = lengthof $r22;

        if i50 >= $i51 goto label17;

        $i39 = i49;

        i49 = i49 + 1;

        $r74 = r1.<org.objectweb.asm.tree.analysis.Analyzer: org.objectweb.asm.tree.analysis.Interpreter interpreter>;

        $r73 = $r22[i50];

        $r75 = virtualinvoke $r74.<org.objectweb.asm.tree.analysis.Interpreter: org.objectweb.asm.tree.analysis.Value newValue(org.objectweb.asm.Type)>($r73);

        virtualinvoke $r15.<org.objectweb.asm.tree.analysis.Frame: void setLocal(int,org.objectweb.asm.tree.analysis.Value)>($i39, $r75);

        $r76 = $r22[i50];

        $i40 = virtualinvoke $r76.<org.objectweb.asm.Type: int getSize()>();

        if $i40 != 2 goto label16;

        $i41 = i49;

        i49 = i49 + 1;

        $r77 = r1.<org.objectweb.asm.tree.analysis.Analyzer: org.objectweb.asm.tree.analysis.Interpreter interpreter>;

        $r78 = virtualinvoke $r77.<org.objectweb.asm.tree.analysis.Interpreter: org.objectweb.asm.tree.analysis.Value newValue(org.objectweb.asm.Type)>(null);

        virtualinvoke $r15.<org.objectweb.asm.tree.analysis.Frame: void setLocal(int,org.objectweb.asm.tree.analysis.Value)>($i41, $r78);

     label16:
        i50 = i50 + 1;

        goto label15;

     label17:
        $i17 = r0.<org.objectweb.asm.tree.MethodNode: int maxLocals>;

        if i49 >= $i17 goto label18;

        $i38 = i49;

        i49 = i49 + 1;

        $r71 = r1.<org.objectweb.asm.tree.analysis.Analyzer: org.objectweb.asm.tree.analysis.Interpreter interpreter>;

        $r72 = virtualinvoke $r71.<org.objectweb.asm.tree.analysis.Interpreter: org.objectweb.asm.tree.analysis.Value newValue(org.objectweb.asm.Type)>(null);

        virtualinvoke $r15.<org.objectweb.asm.tree.analysis.Frame: void setLocal(int,org.objectweb.asm.tree.analysis.Value)>($i38, $r72);

        goto label17;

     label18:
        specialinvoke r1.<org.objectweb.asm.tree.analysis.Analyzer: void merge(int,org.objectweb.asm.tree.analysis.Frame,org.objectweb.asm.tree.analysis.Subroutine)>(0, $r15, null);

        virtualinvoke r1.<org.objectweb.asm.tree.analysis.Analyzer: void init(java.lang.String,org.objectweb.asm.tree.MethodNode)>(r23, r0);

     label19:
        $i18 = r1.<org.objectweb.asm.tree.analysis.Analyzer: int top>;

        if $i18 <= 0 goto label54;

        $r25 = r1.<org.objectweb.asm.tree.analysis.Analyzer: int[] queue>;

        $i19 = r1.<org.objectweb.asm.tree.analysis.Analyzer: int top>;

        $i20 = $i19 - 1;

        r1.<org.objectweb.asm.tree.analysis.Analyzer: int top> = $i20;

        i52 = $r25[$i20];

        $r26 = r1.<org.objectweb.asm.tree.analysis.Analyzer: org.objectweb.asm.tree.analysis.Frame[] frames>;

        r27 = $r26[i52];

        $r28 = r1.<org.objectweb.asm.tree.analysis.Analyzer: org.objectweb.asm.tree.analysis.Subroutine[] subroutines>;

        r132 = $r28[i52];

        $r29 = r1.<org.objectweb.asm.tree.analysis.Analyzer: boolean[] queued>;

        $r29[i52] = 0;

        r133 = null;

     label20:
        $r30 = r0.<org.objectweb.asm.tree.MethodNode: org.objectweb.asm.tree.InsnList instructions>;

        $r31 = virtualinvoke $r30.<org.objectweb.asm.tree.InsnList: org.objectweb.asm.tree.AbstractInsnNode get(int)>(i52);

        r133 = $r31;

        $i21 = virtualinvoke $r31.<org.objectweb.asm.tree.AbstractInsnNode: int getOpcode()>();

        $i22 = virtualinvoke $r31.<org.objectweb.asm.tree.AbstractInsnNode: int getType()>();

        if $i22 == 8 goto label21;

        if $i22 == 15 goto label21;

        if $i22 != 14 goto label22;

     label21:
        $i53 = i52 + 1;

        specialinvoke r1.<org.objectweb.asm.tree.analysis.Analyzer: void merge(int,org.objectweb.asm.tree.analysis.Frame,org.objectweb.asm.tree.analysis.Subroutine)>($i53, r27, r132);

        $i54 = i52 + 1;

        virtualinvoke r1.<org.objectweb.asm.tree.analysis.Analyzer: void newControlFlowEdge(int,int)>(i52, $i54);

        goto label45;

     label22:
        $r39 = virtualinvoke $r15.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Frame init(org.objectweb.asm.tree.analysis.Frame)>(r27);

        $r40 = r1.<org.objectweb.asm.tree.analysis.Analyzer: org.objectweb.asm.tree.analysis.Interpreter interpreter>;

        virtualinvoke $r39.<org.objectweb.asm.tree.analysis.Frame: void execute(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.Interpreter)>($r31, $r40);

        if r132 != null goto label23;

        $r134 = null;

        goto label24;

     label23:
        $r134 = virtualinvoke r132.<org.objectweb.asm.tree.analysis.Subroutine: org.objectweb.asm.tree.analysis.Subroutine copy()>();

     label24:
        r132 = $r134;

        $z2 = $r31 instanceof org.objectweb.asm.tree.JumpInsnNode;

        if $z2 == 0 goto label28;

        r135 = (org.objectweb.asm.tree.JumpInsnNode) $r31;

        if $i21 == 167 goto label25;

        if $i21 == 168 goto label25;

        $i36 = i52 + 1;

        specialinvoke r1.<org.objectweb.asm.tree.analysis.Analyzer: void merge(int,org.objectweb.asm.tree.analysis.Frame,org.objectweb.asm.tree.analysis.Subroutine)>($i36, $r15, $r134);

        $i37 = i52 + 1;

        virtualinvoke r1.<org.objectweb.asm.tree.analysis.Analyzer: void newControlFlowEdge(int,int)>(i52, $i37);

     label25:
        $r136 = r1.<org.objectweb.asm.tree.analysis.Analyzer: org.objectweb.asm.tree.InsnList insns>;

        $r137 = r135.<org.objectweb.asm.tree.JumpInsnNode: org.objectweb.asm.tree.LabelNode label>;

        $i55 = virtualinvoke $r136.<org.objectweb.asm.tree.InsnList: int indexOf(org.objectweb.asm.tree.AbstractInsnNode)>($r137);

        if $i21 != 168 goto label26;

        $r69 = new org.objectweb.asm.tree.analysis.Subroutine;

        $r70 = r135.<org.objectweb.asm.tree.JumpInsnNode: org.objectweb.asm.tree.LabelNode label>;

        $i35 = r0.<org.objectweb.asm.tree.MethodNode: int maxLocals>;

        specialinvoke $r69.<org.objectweb.asm.tree.analysis.Subroutine: void <init>(org.objectweb.asm.tree.LabelNode,int,org.objectweb.asm.tree.JumpInsnNode)>($r70, $i35, r135);

        specialinvoke r1.<org.objectweb.asm.tree.analysis.Analyzer: void merge(int,org.objectweb.asm.tree.analysis.Frame,org.objectweb.asm.tree.analysis.Subroutine)>($i55, $r15, $r69);

        goto label27;

     label26:
        specialinvoke r1.<org.objectweb.asm.tree.analysis.Analyzer: void merge(int,org.objectweb.asm.tree.analysis.Frame,org.objectweb.asm.tree.analysis.Subroutine)>($i55, $r15, r132);

     label27:
        virtualinvoke r1.<org.objectweb.asm.tree.analysis.Analyzer: void newControlFlowEdge(int,int)>(i52, $i55);

        goto label45;

     label28:
        $z3 = $r31 instanceof org.objectweb.asm.tree.LookupSwitchInsnNode;

        if $z3 == 0 goto label31;

        r138 = (org.objectweb.asm.tree.LookupSwitchInsnNode) $r31;

        $r64 = r1.<org.objectweb.asm.tree.analysis.Analyzer: org.objectweb.asm.tree.InsnList insns>;

        $r63 = r138.<org.objectweb.asm.tree.LookupSwitchInsnNode: org.objectweb.asm.tree.LabelNode dflt>;

        $i32 = virtualinvoke $r64.<org.objectweb.asm.tree.InsnList: int indexOf(org.objectweb.asm.tree.AbstractInsnNode)>($r63);

        specialinvoke r1.<org.objectweb.asm.tree.analysis.Analyzer: void merge(int,org.objectweb.asm.tree.analysis.Frame,org.objectweb.asm.tree.analysis.Subroutine)>($i32, $r15, $r134);

        virtualinvoke r1.<org.objectweb.asm.tree.analysis.Analyzer: void newControlFlowEdge(int,int)>(i52, $i32);

        i56 = 0;

     label29:
        $r65 = r138.<org.objectweb.asm.tree.LookupSwitchInsnNode: java.util.List labels>;

        $i33 = interfaceinvoke $r65.<java.util.List: int size()>();

        if i56 >= $i33 goto label30;

        $r66 = r138.<org.objectweb.asm.tree.LookupSwitchInsnNode: java.util.List labels>;

        $r67 = interfaceinvoke $r66.<java.util.List: java.lang.Object get(int)>(i56);

        r139 = (org.objectweb.asm.tree.LabelNode) $r67;

        $r68 = r1.<org.objectweb.asm.tree.analysis.Analyzer: org.objectweb.asm.tree.InsnList insns>;

        $i34 = virtualinvoke $r68.<org.objectweb.asm.tree.InsnList: int indexOf(org.objectweb.asm.tree.AbstractInsnNode)>(r139);

        specialinvoke r1.<org.objectweb.asm.tree.analysis.Analyzer: void merge(int,org.objectweb.asm.tree.analysis.Frame,org.objectweb.asm.tree.analysis.Subroutine)>($i34, $r15, r132);

        virtualinvoke r1.<org.objectweb.asm.tree.analysis.Analyzer: void newControlFlowEdge(int,int)>(i52, $i34);

        i56 = i56 + 1;

        goto label29;

     label30:
        goto label45;

     label31:
        $z4 = $r31 instanceof org.objectweb.asm.tree.TableSwitchInsnNode;

        if $z4 == 0 goto label34;

        r140 = (org.objectweb.asm.tree.TableSwitchInsnNode) $r31;

        $r58 = r1.<org.objectweb.asm.tree.analysis.Analyzer: org.objectweb.asm.tree.InsnList insns>;

        $r57 = r140.<org.objectweb.asm.tree.TableSwitchInsnNode: org.objectweb.asm.tree.LabelNode dflt>;

        $i29 = virtualinvoke $r58.<org.objectweb.asm.tree.InsnList: int indexOf(org.objectweb.asm.tree.AbstractInsnNode)>($r57);

        specialinvoke r1.<org.objectweb.asm.tree.analysis.Analyzer: void merge(int,org.objectweb.asm.tree.analysis.Frame,org.objectweb.asm.tree.analysis.Subroutine)>($i29, $r15, $r134);

        virtualinvoke r1.<org.objectweb.asm.tree.analysis.Analyzer: void newControlFlowEdge(int,int)>(i52, $i29);

        i57 = 0;

     label32:
        $r59 = r140.<org.objectweb.asm.tree.TableSwitchInsnNode: java.util.List labels>;

        $i30 = interfaceinvoke $r59.<java.util.List: int size()>();

        if i57 >= $i30 goto label33;

        $r60 = r140.<org.objectweb.asm.tree.TableSwitchInsnNode: java.util.List labels>;

        $r61 = interfaceinvoke $r60.<java.util.List: java.lang.Object get(int)>(i57);

        r141 = (org.objectweb.asm.tree.LabelNode) $r61;

        $r62 = r1.<org.objectweb.asm.tree.analysis.Analyzer: org.objectweb.asm.tree.InsnList insns>;

        $i31 = virtualinvoke $r62.<org.objectweb.asm.tree.InsnList: int indexOf(org.objectweb.asm.tree.AbstractInsnNode)>(r141);

        specialinvoke r1.<org.objectweb.asm.tree.analysis.Analyzer: void merge(int,org.objectweb.asm.tree.analysis.Frame,org.objectweb.asm.tree.analysis.Subroutine)>($i31, $r15, r132);

        virtualinvoke r1.<org.objectweb.asm.tree.analysis.Analyzer: void newControlFlowEdge(int,int)>(i52, $i31);

        i57 = i57 + 1;

        goto label32;

     label33:
        goto label45;

     label34:
        if $i21 != 169 goto label39;

        if $r134 != null goto label35;

        $r56 = new org.objectweb.asm.tree.analysis.AnalyzerException;

        specialinvoke $r56.<org.objectweb.asm.tree.analysis.AnalyzerException: void <init>(org.objectweb.asm.tree.AbstractInsnNode,java.lang.String)>($r31, "RET instruction outside of a sub routine");

        throw $r56;

     label35:
        i58 = 0;

     label36:
        $r45 = r132.<org.objectweb.asm.tree.analysis.Subroutine: java.util.List callers>;

        $i25 = interfaceinvoke $r45.<java.util.List: int size()>();

        if i58 >= $i25 goto label38;

        $r46 = r132.<org.objectweb.asm.tree.analysis.Subroutine: java.util.List callers>;

        $r47 = interfaceinvoke $r46.<java.util.List: java.lang.Object get(int)>(i58);

        r142 = (org.objectweb.asm.tree.JumpInsnNode) $r47;

        $r48 = r1.<org.objectweb.asm.tree.analysis.Analyzer: org.objectweb.asm.tree.InsnList insns>;

        $i26 = virtualinvoke $r48.<org.objectweb.asm.tree.InsnList: int indexOf(org.objectweb.asm.tree.AbstractInsnNode)>(r142);

        $r49 = r1.<org.objectweb.asm.tree.analysis.Analyzer: org.objectweb.asm.tree.analysis.Frame[] frames>;

        $r50 = $r49[$i26];

        if $r50 == null goto label37;

        $i27 = $i26 + 1;

        $r51 = r1.<org.objectweb.asm.tree.analysis.Analyzer: org.objectweb.asm.tree.analysis.Frame[] frames>;

        $r55 = $r51[$i26];

        $r52 = r1.<org.objectweb.asm.tree.analysis.Analyzer: org.objectweb.asm.tree.analysis.Subroutine[] subroutines>;

        $r54 = $r52[$i26];

        $r53 = r132.<org.objectweb.asm.tree.analysis.Subroutine: boolean[] access>;

        specialinvoke r1.<org.objectweb.asm.tree.analysis.Analyzer: void merge(int,org.objectweb.asm.tree.analysis.Frame,org.objectweb.asm.tree.analysis.Frame,org.objectweb.asm.tree.analysis.Subroutine,boolean[])>($i27, $r55, $r15, $r54, $r53);

        $i28 = $i26 + 1;

        virtualinvoke r1.<org.objectweb.asm.tree.analysis.Analyzer: void newControlFlowEdge(int,int)>(i52, $i28);

     label37:
        i58 = i58 + 1;

        goto label36;

     label38:
        goto label45;

     label39:
        if $i21 == 191 goto label45;

        if $i21 < 172 goto label40;

        if $i21 <= 177 goto label45;

     label40:
        if r132 == null goto label44;

        $z5 = $r31 instanceof org.objectweb.asm.tree.VarInsnNode;

        if $z5 == 0 goto label43;

        $r43 = (org.objectweb.asm.tree.VarInsnNode) $r31;

        i59 = $r43.<org.objectweb.asm.tree.VarInsnNode: int var>;

        $r44 = r132.<org.objectweb.asm.tree.analysis.Subroutine: boolean[] access>;

        $r44[i59] = 1;

        if $i21 == 22 goto label41;

        if $i21 == 24 goto label41;

        if $i21 == 55 goto label41;

        if $i21 != 57 goto label42;

     label41:
        $r143 = r132.<org.objectweb.asm.tree.analysis.Subroutine: boolean[] access>;

        $i60 = i59 + 1;

        $r143[$i60] = 1;

     label42:
        goto label44;

     label43:
        $z6 = $r31 instanceof org.objectweb.asm.tree.IincInsnNode;

        if $z6 == 0 goto label44;

        $r41 = (org.objectweb.asm.tree.IincInsnNode) $r31;

        i61 = $r41.<org.objectweb.asm.tree.IincInsnNode: int var>;

        $r42 = r132.<org.objectweb.asm.tree.analysis.Subroutine: boolean[] access>;

        $r42[i61] = 1;

     label44:
        $i62 = i52 + 1;

        specialinvoke r1.<org.objectweb.asm.tree.analysis.Analyzer: void merge(int,org.objectweb.asm.tree.analysis.Frame,org.objectweb.asm.tree.analysis.Subroutine)>($i62, $r15, r132);

        $i63 = i52 + 1;

        virtualinvoke r1.<org.objectweb.asm.tree.analysis.Analyzer: void newControlFlowEdge(int,int)>(i52, $i63);

     label45:
        $r144 = r1.<org.objectweb.asm.tree.analysis.Analyzer: java.util.List[] handlers>;

        $r145 = $r144[i52];

        if $r145 == null goto label50;

        i64 = 0;

     label46:
        $i23 = interfaceinvoke $r145.<java.util.List: int size()>();

        if i64 >= $i23 goto label50;

        $r32 = interfaceinvoke $r145.<java.util.List: java.lang.Object get(int)>(i64);

        r146 = (org.objectweb.asm.tree.TryCatchBlockNode) $r32;

        $r33 = r146.<org.objectweb.asm.tree.TryCatchBlockNode: java.lang.String type>;

        if $r33 != null goto label47;

        r147 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getObjectType(java.lang.String)>("java/lang/Throwable");

        goto label48;

     label47:
        $r34 = r146.<org.objectweb.asm.tree.TryCatchBlockNode: java.lang.String type>;

        r147 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getObjectType(java.lang.String)>($r34);

     label48:
        $r36 = r1.<org.objectweb.asm.tree.analysis.Analyzer: org.objectweb.asm.tree.InsnList insns>;

        $r35 = r146.<org.objectweb.asm.tree.TryCatchBlockNode: org.objectweb.asm.tree.LabelNode handler>;

        $i24 = virtualinvoke $r36.<org.objectweb.asm.tree.InsnList: int indexOf(org.objectweb.asm.tree.AbstractInsnNode)>($r35);

        $z1 = virtualinvoke r1.<org.objectweb.asm.tree.analysis.Analyzer: boolean newControlFlowExceptionEdge(int,org.objectweb.asm.tree.TryCatchBlockNode)>(i52, r146);

        if $z1 == 0 goto label49;

        virtualinvoke $r16.<org.objectweb.asm.tree.analysis.Frame: org.objectweb.asm.tree.analysis.Frame init(org.objectweb.asm.tree.analysis.Frame)>(r27);

        virtualinvoke $r16.<org.objectweb.asm.tree.analysis.Frame: void clearStack()>();

        $r37 = r1.<org.objectweb.asm.tree.analysis.Analyzer: org.objectweb.asm.tree.analysis.Interpreter interpreter>;

        $r38 = virtualinvoke $r37.<org.objectweb.asm.tree.analysis.Interpreter: org.objectweb.asm.tree.analysis.Value newValue(org.objectweb.asm.Type)>(r147);

        virtualinvoke $r16.<org.objectweb.asm.tree.analysis.Frame: void push(org.objectweb.asm.tree.analysis.Value)>($r38);

        specialinvoke r1.<org.objectweb.asm.tree.analysis.Analyzer: void merge(int,org.objectweb.asm.tree.analysis.Frame,org.objectweb.asm.tree.analysis.Subroutine)>($i24, $r16, r132);

     label49:
        i64 = i64 + 1;

        goto label46;

     label50:
        goto label53;

     label51:
        $r118 := @caughtexception;

        $r119 = new org.objectweb.asm.tree.analysis.AnalyzerException;

        $r121 = $r118.<org.objectweb.asm.tree.analysis.AnalyzerException: org.objectweb.asm.tree.AbstractInsnNode node>;

        $r120 = new java.lang.StringBuilder;

        specialinvoke $r120.<java.lang.StringBuilder: void <init>()>();

        $r122 = virtualinvoke $r120.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error at instruction ");

        $r123 = virtualinvoke $r122.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i52);

        $r124 = virtualinvoke $r123.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r125 = virtualinvoke $r118.<org.objectweb.asm.tree.analysis.AnalyzerException: java.lang.String getMessage()>();

        $r126 = virtualinvoke $r124.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r125);

        $r127 = virtualinvoke $r126.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r119.<org.objectweb.asm.tree.analysis.AnalyzerException: void <init>(org.objectweb.asm.tree.AbstractInsnNode,java.lang.String,java.lang.Throwable)>($r121, $r127, $r118);

        throw $r119;

     label52:
        $r109 := @caughtexception;

        $r110 = new org.objectweb.asm.tree.analysis.AnalyzerException;

        $r111 = new java.lang.StringBuilder;

        specialinvoke $r111.<java.lang.StringBuilder: void <init>()>();

        $r112 = virtualinvoke $r111.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error at instruction ");

        $r113 = virtualinvoke $r112.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i52);

        $r114 = virtualinvoke $r113.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r115 = virtualinvoke $r109.<java.lang.Exception: java.lang.String getMessage()>();

        $r116 = virtualinvoke $r114.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r115);

        $r117 = virtualinvoke $r116.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r110.<org.objectweb.asm.tree.analysis.AnalyzerException: void <init>(org.objectweb.asm.tree.AbstractInsnNode,java.lang.String,java.lang.Throwable)>(r133, $r117, $r109);

        throw $r110;

     label53:
        goto label19;

     label54:
        $r24 = r1.<org.objectweb.asm.tree.analysis.Analyzer: org.objectweb.asm.tree.analysis.Frame[] frames>;

        return $r24;

        catch org.objectweb.asm.tree.analysis.AnalyzerException from label20 to label50 with label51;
        catch java.lang.Exception from label20 to label50 with label52;
    }

    private void findSubroutine(int, org.objectweb.asm.tree.analysis.Subroutine, java.util.List) throws org.objectweb.asm.tree.analysis.AnalyzerException
    {
        org.objectweb.asm.tree.TableSwitchInsnNode r28;
        java.util.List[] $r32;
        org.objectweb.asm.tree.analysis.AnalyzerException $r35;
        boolean $z0, $z1, $z2;
        org.objectweb.asm.tree.analysis.Subroutine[] $r2, $r5;
        java.util.List r12, $r15, $r16, $r21, $r22, $r33;
        org.objectweb.asm.tree.TryCatchBlockNode r34;
        org.objectweb.asm.tree.analysis.Analyzer r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, i14, i15, $i17, $i19;
        org.objectweb.asm.tree.JumpInsnNode r27;
        org.objectweb.asm.tree.analysis.Subroutine $r3, r4, $r6;
        org.objectweb.asm.tree.InsnList $r7, $r11, $r14, $r18, $r20, $r24, $r26;
        org.objectweb.asm.tree.LabelNode $r10, $r13, $r19, $r25, r29, r31;
        org.objectweb.asm.tree.AbstractInsnNode $r8;
        java.lang.Object $r9, $r17, $r23;
        org.objectweb.asm.tree.LookupSwitchInsnNode r30;

        r1 := @this: org.objectweb.asm.tree.analysis.Analyzer;

        i12 := @parameter0: int;

        r4 := @parameter1: org.objectweb.asm.tree.analysis.Subroutine;

        r12 := @parameter2: java.util.List;

     label01:
        if i12 < 0 goto label02;

        $i0 = r1.<org.objectweb.asm.tree.analysis.Analyzer: int n>;

        if i12 < $i0 goto label03;

     label02:
        $r35 = new org.objectweb.asm.tree.analysis.AnalyzerException;

        specialinvoke $r35.<org.objectweb.asm.tree.analysis.AnalyzerException: void <init>(org.objectweb.asm.tree.AbstractInsnNode,java.lang.String)>(null, "Execution can fall off end of the code");

        throw $r35;

     label03:
        $r2 = r1.<org.objectweb.asm.tree.analysis.Analyzer: org.objectweb.asm.tree.analysis.Subroutine[] subroutines>;

        $r3 = $r2[i12];

        if $r3 == null goto label04;

        return;

     label04:
        $r5 = r1.<org.objectweb.asm.tree.analysis.Analyzer: org.objectweb.asm.tree.analysis.Subroutine[] subroutines>;

        $r6 = virtualinvoke r4.<org.objectweb.asm.tree.analysis.Subroutine: org.objectweb.asm.tree.analysis.Subroutine copy()>();

        $r5[i12] = $r6;

        $r7 = r1.<org.objectweb.asm.tree.analysis.Analyzer: org.objectweb.asm.tree.InsnList insns>;

        $r8 = virtualinvoke $r7.<org.objectweb.asm.tree.InsnList: org.objectweb.asm.tree.AbstractInsnNode get(int)>(i12);

        $z0 = $r8 instanceof org.objectweb.asm.tree.JumpInsnNode;

        if $z0 == 0 goto label06;

        $i10 = virtualinvoke $r8.<org.objectweb.asm.tree.AbstractInsnNode: int getOpcode()>();

        if $i10 != 168 goto label05;

        interfaceinvoke r12.<java.util.List: boolean add(java.lang.Object)>($r8);

        goto label11;

     label05:
        r27 = (org.objectweb.asm.tree.JumpInsnNode) $r8;

        $r26 = r1.<org.objectweb.asm.tree.analysis.Analyzer: org.objectweb.asm.tree.InsnList insns>;

        $r25 = r27.<org.objectweb.asm.tree.JumpInsnNode: org.objectweb.asm.tree.LabelNode label>;

        $i11 = virtualinvoke $r26.<org.objectweb.asm.tree.InsnList: int indexOf(org.objectweb.asm.tree.AbstractInsnNode)>($r25);

        specialinvoke r1.<org.objectweb.asm.tree.analysis.Analyzer: void findSubroutine(int,org.objectweb.asm.tree.analysis.Subroutine,java.util.List)>($i11, r4, r12);

        goto label11;

     label06:
        $z1 = $r8 instanceof org.objectweb.asm.tree.TableSwitchInsnNode;

        if $z1 == 0 goto label09;

        r28 = (org.objectweb.asm.tree.TableSwitchInsnNode) $r8;

        $r20 = r1.<org.objectweb.asm.tree.analysis.Analyzer: org.objectweb.asm.tree.InsnList insns>;

        $r19 = r28.<org.objectweb.asm.tree.TableSwitchInsnNode: org.objectweb.asm.tree.LabelNode dflt>;

        $i7 = virtualinvoke $r20.<org.objectweb.asm.tree.InsnList: int indexOf(org.objectweb.asm.tree.AbstractInsnNode)>($r19);

        specialinvoke r1.<org.objectweb.asm.tree.analysis.Analyzer: void findSubroutine(int,org.objectweb.asm.tree.analysis.Subroutine,java.util.List)>($i7, r4, r12);

        $r21 = r28.<org.objectweb.asm.tree.TableSwitchInsnNode: java.util.List labels>;

        $i8 = interfaceinvoke $r21.<java.util.List: int size()>();

        i13 = $i8 - 1;

     label07:
        if i13 < 0 goto label08;

        $r22 = r28.<org.objectweb.asm.tree.TableSwitchInsnNode: java.util.List labels>;

        $r23 = interfaceinvoke $r22.<java.util.List: java.lang.Object get(int)>(i13);

        r29 = (org.objectweb.asm.tree.LabelNode) $r23;

        $r24 = r1.<org.objectweb.asm.tree.analysis.Analyzer: org.objectweb.asm.tree.InsnList insns>;

        $i9 = virtualinvoke $r24.<org.objectweb.asm.tree.InsnList: int indexOf(org.objectweb.asm.tree.AbstractInsnNode)>(r29);

        specialinvoke r1.<org.objectweb.asm.tree.analysis.Analyzer: void findSubroutine(int,org.objectweb.asm.tree.analysis.Subroutine,java.util.List)>($i9, r4, r12);

        $i17 = (int) -1;

        i13 = i13 + $i17;

        goto label07;

     label08:
        goto label11;

     label09:
        $z2 = $r8 instanceof org.objectweb.asm.tree.LookupSwitchInsnNode;

        if $z2 == 0 goto label11;

        r30 = (org.objectweb.asm.tree.LookupSwitchInsnNode) $r8;

        $r14 = r1.<org.objectweb.asm.tree.analysis.Analyzer: org.objectweb.asm.tree.InsnList insns>;

        $r13 = r30.<org.objectweb.asm.tree.LookupSwitchInsnNode: org.objectweb.asm.tree.LabelNode dflt>;

        $i4 = virtualinvoke $r14.<org.objectweb.asm.tree.InsnList: int indexOf(org.objectweb.asm.tree.AbstractInsnNode)>($r13);

        specialinvoke r1.<org.objectweb.asm.tree.analysis.Analyzer: void findSubroutine(int,org.objectweb.asm.tree.analysis.Subroutine,java.util.List)>($i4, r4, r12);

        $r15 = r30.<org.objectweb.asm.tree.LookupSwitchInsnNode: java.util.List labels>;

        $i5 = interfaceinvoke $r15.<java.util.List: int size()>();

        i14 = $i5 - 1;

     label10:
        if i14 < 0 goto label11;

        $r16 = r30.<org.objectweb.asm.tree.LookupSwitchInsnNode: java.util.List labels>;

        $r17 = interfaceinvoke $r16.<java.util.List: java.lang.Object get(int)>(i14);

        r31 = (org.objectweb.asm.tree.LabelNode) $r17;

        $r18 = r1.<org.objectweb.asm.tree.analysis.Analyzer: org.objectweb.asm.tree.InsnList insns>;

        $i6 = virtualinvoke $r18.<org.objectweb.asm.tree.InsnList: int indexOf(org.objectweb.asm.tree.AbstractInsnNode)>(r31);

        specialinvoke r1.<org.objectweb.asm.tree.analysis.Analyzer: void findSubroutine(int,org.objectweb.asm.tree.analysis.Subroutine,java.util.List)>($i6, r4, r12);

        $i19 = (int) -1;

        i14 = i14 + $i19;

        goto label10;

     label11:
        $r32 = r1.<org.objectweb.asm.tree.analysis.Analyzer: java.util.List[] handlers>;

        $r33 = $r32[i12];

        if $r33 == null goto label13;

        i15 = 0;

     label12:
        $i2 = interfaceinvoke $r33.<java.util.List: int size()>();

        if i15 >= $i2 goto label13;

        $r9 = interfaceinvoke $r33.<java.util.List: java.lang.Object get(int)>(i15);

        r34 = (org.objectweb.asm.tree.TryCatchBlockNode) $r9;

        $r11 = r1.<org.objectweb.asm.tree.analysis.Analyzer: org.objectweb.asm.tree.InsnList insns>;

        $r10 = r34.<org.objectweb.asm.tree.TryCatchBlockNode: org.objectweb.asm.tree.LabelNode handler>;

        $i3 = virtualinvoke $r11.<org.objectweb.asm.tree.InsnList: int indexOf(org.objectweb.asm.tree.AbstractInsnNode)>($r10);

        specialinvoke r1.<org.objectweb.asm.tree.analysis.Analyzer: void findSubroutine(int,org.objectweb.asm.tree.analysis.Subroutine,java.util.List)>($i3, r4, r12);

        i15 = i15 + 1;

        goto label12;

     label13:
        $i1 = virtualinvoke $r8.<org.objectweb.asm.tree.AbstractInsnNode: int getOpcode()>();

        tableswitch($i1)
        {
            case 167: goto label14;
            case 168: goto label15;
            case 169: goto label14;
            case 170: goto label14;
            case 171: goto label14;
            case 172: goto label14;
            case 173: goto label14;
            case 174: goto label14;
            case 175: goto label14;
            case 176: goto label14;
            case 177: goto label14;
            case 178: goto label15;
            case 179: goto label15;
            case 180: goto label15;
            case 181: goto label15;
            case 182: goto label15;
            case 183: goto label15;
            case 184: goto label15;
            case 185: goto label15;
            case 186: goto label15;
            case 187: goto label15;
            case 188: goto label15;
            case 189: goto label15;
            case 190: goto label15;
            case 191: goto label14;
            default: goto label15;
        };

     label14:
        return;

     label15:
        i12 = i12 + 1;

        goto label01;
    }

    public org.objectweb.asm.tree.analysis.Frame[] getFrames()
    {
        org.objectweb.asm.tree.analysis.Frame[] $r1;
        org.objectweb.asm.tree.analysis.Analyzer r0;

        r0 := @this: org.objectweb.asm.tree.analysis.Analyzer;

        $r1 = r0.<org.objectweb.asm.tree.analysis.Analyzer: org.objectweb.asm.tree.analysis.Frame[] frames>;

        return $r1;
    }

    public java.util.List getHandlers(int)
    {
        java.util.List $r2;
        java.util.List[] $r1;
        int i0;
        org.objectweb.asm.tree.analysis.Analyzer r0;

        r0 := @this: org.objectweb.asm.tree.analysis.Analyzer;

        i0 := @parameter0: int;

        $r1 = r0.<org.objectweb.asm.tree.analysis.Analyzer: java.util.List[] handlers>;

        $r2 = $r1[i0];

        return $r2;
    }

    protected void init(java.lang.String, org.objectweb.asm.tree.MethodNode) throws org.objectweb.asm.tree.analysis.AnalyzerException
    {
        org.objectweb.asm.tree.MethodNode r2;
        java.lang.String r1;
        org.objectweb.asm.tree.analysis.Analyzer r0;

        r0 := @this: org.objectweb.asm.tree.analysis.Analyzer;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.objectweb.asm.tree.MethodNode;

        return;
    }

    protected org.objectweb.asm.tree.analysis.Frame newFrame(int, int)
    {
        org.objectweb.asm.tree.analysis.Frame $r0;
        int i0, i1;
        org.objectweb.asm.tree.analysis.Analyzer r1;

        r1 := @this: org.objectweb.asm.tree.analysis.Analyzer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r0 = new org.objectweb.asm.tree.analysis.Frame;

        specialinvoke $r0.<org.objectweb.asm.tree.analysis.Frame: void <init>(int,int)>(i0, i1);

        return $r0;
    }

    protected org.objectweb.asm.tree.analysis.Frame newFrame(org.objectweb.asm.tree.analysis.Frame)
    {
        org.objectweb.asm.tree.analysis.Frame $r0, r1;
        org.objectweb.asm.tree.analysis.Analyzer r2;

        r2 := @this: org.objectweb.asm.tree.analysis.Analyzer;

        r1 := @parameter0: org.objectweb.asm.tree.analysis.Frame;

        $r0 = new org.objectweb.asm.tree.analysis.Frame;

        specialinvoke $r0.<org.objectweb.asm.tree.analysis.Frame: void <init>(org.objectweb.asm.tree.analysis.Frame)>(r1);

        return $r0;
    }

    protected void newControlFlowEdge(int, int)
    {
        int i0, i1;
        org.objectweb.asm.tree.analysis.Analyzer r0;

        r0 := @this: org.objectweb.asm.tree.analysis.Analyzer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        return;
    }

    protected boolean newControlFlowExceptionEdge(int, int)
    {
        int i0, i1;
        org.objectweb.asm.tree.analysis.Analyzer r0;

        r0 := @this: org.objectweb.asm.tree.analysis.Analyzer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        return 1;
    }

    protected boolean newControlFlowExceptionEdge(int, org.objectweb.asm.tree.TryCatchBlockNode)
    {
        org.objectweb.asm.tree.TryCatchBlockNode r1;
        org.objectweb.asm.tree.InsnList $r3;
        int i0, $i1;
        org.objectweb.asm.tree.LabelNode $r2;
        org.objectweb.asm.tree.analysis.Analyzer r0;
        boolean $z0;

        r0 := @this: org.objectweb.asm.tree.analysis.Analyzer;

        i0 := @parameter0: int;

        r1 := @parameter1: org.objectweb.asm.tree.TryCatchBlockNode;

        $r3 = r0.<org.objectweb.asm.tree.analysis.Analyzer: org.objectweb.asm.tree.InsnList insns>;

        $r2 = r1.<org.objectweb.asm.tree.TryCatchBlockNode: org.objectweb.asm.tree.LabelNode handler>;

        $i1 = virtualinvoke $r3.<org.objectweb.asm.tree.InsnList: int indexOf(org.objectweb.asm.tree.AbstractInsnNode)>($r2);

        $z0 = virtualinvoke r0.<org.objectweb.asm.tree.analysis.Analyzer: boolean newControlFlowExceptionEdge(int,int)>(i0, $i1);

        return $z0;
    }

    private void merge(int, org.objectweb.asm.tree.analysis.Frame, org.objectweb.asm.tree.analysis.Subroutine) throws org.objectweb.asm.tree.analysis.AnalyzerException
    {
        org.objectweb.asm.tree.analysis.Frame r2, r5, $r14;
        org.objectweb.asm.tree.analysis.Analyzer r0;
        int[] $r10;
        org.objectweb.asm.tree.analysis.Frame[] $r1, $r13;
        int i0, $i1, $i2;
        org.objectweb.asm.tree.analysis.Interpreter $r6;
        org.objectweb.asm.tree.analysis.Subroutine r4, r7, $r12;
        boolean $z0, $z1, z2;
        boolean[] $r8, $r9;
        org.objectweb.asm.tree.analysis.Subroutine[] $r3, $r11;

        r0 := @this: org.objectweb.asm.tree.analysis.Analyzer;

        i0 := @parameter0: int;

        r5 := @parameter1: org.objectweb.asm.tree.analysis.Frame;

        r7 := @parameter2: org.objectweb.asm.tree.analysis.Subroutine;

        $r1 = r0.<org.objectweb.asm.tree.analysis.Analyzer: org.objectweb.asm.tree.analysis.Frame[] frames>;

        r2 = $r1[i0];

        $r3 = r0.<org.objectweb.asm.tree.analysis.Analyzer: org.objectweb.asm.tree.analysis.Subroutine[] subroutines>;

        r4 = $r3[i0];

        if r2 != null goto label1;

        $r13 = r0.<org.objectweb.asm.tree.analysis.Analyzer: org.objectweb.asm.tree.analysis.Frame[] frames>;

        $r14 = virtualinvoke r0.<org.objectweb.asm.tree.analysis.Analyzer: org.objectweb.asm.tree.analysis.Frame newFrame(org.objectweb.asm.tree.analysis.Frame)>(r5);

        $r13[i0] = $r14;

        z2 = 1;

        goto label2;

     label1:
        $r6 = r0.<org.objectweb.asm.tree.analysis.Analyzer: org.objectweb.asm.tree.analysis.Interpreter interpreter>;

        z2 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: boolean merge(org.objectweb.asm.tree.analysis.Frame,org.objectweb.asm.tree.analysis.Interpreter)>(r5, $r6);

     label2:
        if r4 != null goto label3;

        if r7 == null goto label4;

        $r11 = r0.<org.objectweb.asm.tree.analysis.Analyzer: org.objectweb.asm.tree.analysis.Subroutine[] subroutines>;

        $r12 = virtualinvoke r7.<org.objectweb.asm.tree.analysis.Subroutine: org.objectweb.asm.tree.analysis.Subroutine copy()>();

        $r11[i0] = $r12;

        z2 = 1;

        goto label4;

     label3:
        if r7 == null goto label4;

        $z1 = virtualinvoke r4.<org.objectweb.asm.tree.analysis.Subroutine: boolean merge(org.objectweb.asm.tree.analysis.Subroutine)>(r7);

        z2 = z2 | $z1;

     label4:
        if z2 == 0 goto label5;

        $r8 = r0.<org.objectweb.asm.tree.analysis.Analyzer: boolean[] queued>;

        $z0 = $r8[i0];

        if $z0 != 0 goto label5;

        $r9 = r0.<org.objectweb.asm.tree.analysis.Analyzer: boolean[] queued>;

        $r9[i0] = 1;

        $r10 = r0.<org.objectweb.asm.tree.analysis.Analyzer: int[] queue>;

        $i1 = r0.<org.objectweb.asm.tree.analysis.Analyzer: int top>;

        $i2 = $i1 + 1;

        r0.<org.objectweb.asm.tree.analysis.Analyzer: int top> = $i2;

        $r10[$i1] = i0;

     label5:
        return;
    }

    private void merge(int, org.objectweb.asm.tree.analysis.Frame, org.objectweb.asm.tree.analysis.Frame, org.objectweb.asm.tree.analysis.Subroutine, boolean[]) throws org.objectweb.asm.tree.analysis.AnalyzerException
    {
        org.objectweb.asm.tree.analysis.Frame r2, r5, r6, $r14;
        org.objectweb.asm.tree.analysis.Analyzer r0;
        int[] $r11;
        org.objectweb.asm.tree.analysis.Frame[] $r1, $r13;
        int i0, $i1, $i2;
        org.objectweb.asm.tree.analysis.Interpreter $r8;
        org.objectweb.asm.tree.analysis.Subroutine r4, r12;
        boolean $z0, $z1, z2;
        boolean[] r7, $r9, $r10;
        org.objectweb.asm.tree.analysis.Subroutine[] $r3;

        r0 := @this: org.objectweb.asm.tree.analysis.Analyzer;

        i0 := @parameter0: int;

        r6 := @parameter1: org.objectweb.asm.tree.analysis.Frame;

        r5 := @parameter2: org.objectweb.asm.tree.analysis.Frame;

        r12 := @parameter3: org.objectweb.asm.tree.analysis.Subroutine;

        r7 := @parameter4: boolean[];

        $r1 = r0.<org.objectweb.asm.tree.analysis.Analyzer: org.objectweb.asm.tree.analysis.Frame[] frames>;

        r2 = $r1[i0];

        $r3 = r0.<org.objectweb.asm.tree.analysis.Analyzer: org.objectweb.asm.tree.analysis.Subroutine[] subroutines>;

        r4 = $r3[i0];

        virtualinvoke r5.<org.objectweb.asm.tree.analysis.Frame: boolean merge(org.objectweb.asm.tree.analysis.Frame,boolean[])>(r6, r7);

        if r2 != null goto label1;

        $r13 = r0.<org.objectweb.asm.tree.analysis.Analyzer: org.objectweb.asm.tree.analysis.Frame[] frames>;

        $r14 = virtualinvoke r0.<org.objectweb.asm.tree.analysis.Analyzer: org.objectweb.asm.tree.analysis.Frame newFrame(org.objectweb.asm.tree.analysis.Frame)>(r5);

        $r13[i0] = $r14;

        z2 = 1;

        goto label2;

     label1:
        $r8 = r0.<org.objectweb.asm.tree.analysis.Analyzer: org.objectweb.asm.tree.analysis.Interpreter interpreter>;

        z2 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.Frame: boolean merge(org.objectweb.asm.tree.analysis.Frame,org.objectweb.asm.tree.analysis.Interpreter)>(r5, $r8);

     label2:
        if r4 == null goto label3;

        if r12 == null goto label3;

        $z1 = virtualinvoke r4.<org.objectweb.asm.tree.analysis.Subroutine: boolean merge(org.objectweb.asm.tree.analysis.Subroutine)>(r12);

        z2 = z2 | $z1;

     label3:
        if z2 == 0 goto label4;

        $r9 = r0.<org.objectweb.asm.tree.analysis.Analyzer: boolean[] queued>;

        $z0 = $r9[i0];

        if $z0 != 0 goto label4;

        $r10 = r0.<org.objectweb.asm.tree.analysis.Analyzer: boolean[] queued>;

        $r10[i0] = 1;

        $r11 = r0.<org.objectweb.asm.tree.analysis.Analyzer: int[] queue>;

        $i1 = r0.<org.objectweb.asm.tree.analysis.Analyzer: int top>;

        $i2 = $i1 + 1;

        r0.<org.objectweb.asm.tree.analysis.Analyzer: int top> = $i2;

        $r11[$i1] = i0;

     label4:
        return;
    }
}
