public interface  org.waveprotocol.wave.model.supplement.ReadableSupplement extends java.lang.Object
{

    public abstract org.waveprotocol.wave.model.supplement.ThreadState getThreadState(org.waveprotocol.wave.model.id.WaveletId, java.lang.String);

    public abstract boolean isBlipUnread(org.waveprotocol.wave.model.id.WaveletId, java.lang.String, int);

    public abstract boolean isParticipantsUnread(org.waveprotocol.wave.model.id.WaveletId, int);

    public abstract boolean isTagsUnread(org.waveprotocol.wave.model.id.WaveletId, int);

    public abstract boolean haveParticipantsEverBeenRead(org.waveprotocol.wave.model.id.WaveletId);

    public abstract java.util.Set getFolders();

    public abstract boolean isArchived(org.waveprotocol.wave.model.id.WaveletId, int);

    public abstract org.waveprotocol.wave.model.version.HashedVersion getSeenVersion(org.waveprotocol.wave.model.id.WaveletId);

    public abstract int getNotifiedVersion(org.waveprotocol.wave.model.id.WaveletId);

    public abstract boolean hasNotifiedVersion();

    public abstract boolean hasSeenVersion();

    public abstract java.util.Set getSeenWavelets();

    public abstract boolean isFollowed(boolean);

    public abstract org.waveprotocol.wave.model.supplement.WantedEvaluationSet getWantedEvaluationSet(org.waveprotocol.wave.model.id.WaveletId);

    public abstract boolean hasPendingNotification();

    public abstract boolean hasPendingNotification(org.waveprotocol.wave.model.id.WaveletId);

    public abstract org.waveprotocol.wave.model.util.ReadableStringMap getGadgetState(java.lang.String);
}
