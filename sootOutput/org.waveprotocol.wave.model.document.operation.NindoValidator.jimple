public final class org.waveprotocol.wave.model.document.operation.NindoValidator extends java.lang.Object
{

    private void <init>()
    {
        org.waveprotocol.wave.model.document.operation.NindoValidator r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoValidator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static org.waveprotocol.wave.model.document.indexed.IndexedDocument getEmptyDocument()
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocument $r3;
        org.waveprotocol.wave.model.document.indexed.IndexedDocProvider $r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema $r0;
        org.waveprotocol.wave.model.document.operation.DocInitialization $r1;

        $r2 = <org.waveprotocol.wave.model.document.util.DocProviders: org.waveprotocol.wave.model.document.indexed.IndexedDocProvider POJO>;

        $r1 = <org.waveprotocol.wave.model.document.util.EmptyDocument: org.waveprotocol.wave.model.document.operation.DocInitialization EMPTY_DOCUMENT>;

        $r0 = <org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema NO_SCHEMA_CONSTRAINTS>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.document.indexed.IndexedDocProvider: org.waveprotocol.wave.model.document.indexed.IndexedDocument build(org.waveprotocol.wave.model.document.operation.DocInitialization,org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema)>($r1, $r0);

        return $r3;
    }

    public static org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector validate(org.waveprotocol.wave.model.document.operation.Nindo, org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema)
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocument $r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector $r3;
        org.waveprotocol.wave.model.document.operation.Nindo r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema r2;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.Nindo;

        r2 := @parameter1: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema;

        $r0 = staticinvoke <org.waveprotocol.wave.model.document.operation.NindoValidator: org.waveprotocol.wave.model.document.indexed.IndexedDocument getEmptyDocument()>();

        $r3 = staticinvoke <org.waveprotocol.wave.model.document.operation.NindoValidator: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector validate(org.waveprotocol.wave.model.document.indexed.IndexedDocument,org.waveprotocol.wave.model.document.operation.Nindo,org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema)>($r0, r1, r2);

        return $r3;
    }

    public static org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector validate(org.waveprotocol.wave.model.document.indexed.IndexedDocument, org.waveprotocol.wave.model.document.operation.Nindo, org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema)
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocument r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema r0;
        org.waveprotocol.wave.model.document.operation.NindoValidator$1 $r5;
        org.waveprotocol.wave.model.document.operation.NindoValidator$IllFormed $r8;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector $r3;
        org.waveprotocol.wave.model.document.operation.Nindo r4;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r6, $r7;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton $r1;

        r2 := @parameter0: org.waveprotocol.wave.model.document.indexed.IndexedDocument;

        r4 := @parameter1: org.waveprotocol.wave.model.document.operation.Nindo;

        r0 := @parameter2: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "Schema constraints required, if not, use DocumentSchema.NO_SCHEMA_CONSTRAINTS");

        $r1 = new org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        specialinvoke $r1.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: void <init>(org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema,org.waveprotocol.wave.model.document.indexed.IndexedDocument)>(r0, r2);

        $r3 = new org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        specialinvoke $r3.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector: void <init>()>();

     label1:
        $r5 = new org.waveprotocol.wave.model.document.operation.NindoValidator$1;

        specialinvoke $r5.<org.waveprotocol.wave.model.document.operation.NindoValidator$1: void <init>(org.waveprotocol.wave.model.document.operation.NindoAutomaton,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>($r1, $r3);

        virtualinvoke r4.<org.waveprotocol.wave.model.document.operation.Nindo: void apply(org.waveprotocol.wave.model.document.operation.Nindo$NindoCursor)>($r5);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        return $r3;

     label4:
        $r6 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkFinish(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>($r3);

        $r7 = <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult ILL_FORMED>;

        if $r6 != $r7 goto label5;

        return $r3;

     label5:
        virtualinvoke $r1.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: void doFinish()>();

        return $r3;

        catch org.waveprotocol.wave.model.document.operation.NindoValidator$IllFormed from label1 to label2 with label3;
    }
}
