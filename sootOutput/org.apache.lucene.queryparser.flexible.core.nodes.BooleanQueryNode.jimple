public class org.apache.lucene.queryparser.flexible.core.nodes.BooleanQueryNode extends org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl
{

    public void <init>(java.util.List)
    {
        org.apache.lucene.queryparser.flexible.core.nodes.BooleanQueryNode r0;
        java.util.List r1;

        r0 := @this: org.apache.lucene.queryparser.flexible.core.nodes.BooleanQueryNode;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl: void <init>()>();

        virtualinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.BooleanQueryNode: void setLeaf(boolean)>(0);

        virtualinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.BooleanQueryNode: void allocate()>();

        virtualinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.BooleanQueryNode: void set(java.util.List)>(r1);

        return;
    }

    public java.lang.String toString()
    {
        java.util.Iterator $r5;
        org.apache.lucene.queryparser.flexible.core.nodes.BooleanQueryNode r0;
        java.util.List $r1, $r2, $r4;
        int $i0;
        java.lang.StringBuilder $r3;
        java.lang.Object $r7;
        java.lang.String $r6, $r9;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode r8;
        boolean $z0;

        r0 := @this: org.apache.lucene.queryparser.flexible.core.nodes.BooleanQueryNode;

        $r1 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.BooleanQueryNode: java.util.List getChildren()>();

        if $r1 == null goto label1;

        $r2 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.BooleanQueryNode: java.util.List getChildren()>();

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 != 0 goto label2;

     label1:
        return "<boolean operation=\'default\'/>";

     label2:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<boolean operation=\'default\'>");

        $r4 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.BooleanQueryNode: java.util.List getChildren()>();

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r7 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) $r7;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r9 = virtualinvoke r8.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        goto label3;

     label4:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n</boolean>");

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public java.lang.CharSequence toQueryString(org.apache.lucene.queryparser.flexible.core.parser.EscapeQuerySyntax)
    {
        org.apache.lucene.queryparser.flexible.core.nodes.BooleanQueryNode r0;
        int $i0;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode $r6, $r14, r16;
        java.lang.String $r9, $r12, $r13, r20;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r5;
        java.lang.CharSequence $r19;
        org.apache.lucene.queryparser.flexible.core.parser.EscapeQuerySyntax r18;
        java.util.List $r1, $r2, $r4;
        java.lang.StringBuilder $r3, $r7, $r8, $r10, $r11, $r17;
        java.lang.Object $r15;

        r0 := @this: org.apache.lucene.queryparser.flexible.core.nodes.BooleanQueryNode;

        r18 := @parameter0: org.apache.lucene.queryparser.flexible.core.parser.EscapeQuerySyntax;

        $r1 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.BooleanQueryNode: java.util.List getChildren()>();

        if $r1 == null goto label1;

        $r2 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.BooleanQueryNode: java.util.List getChildren()>();

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 != 0 goto label2;

     label1:
        return "";

     label2:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        r20 = "";

        $r4 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.BooleanQueryNode: java.util.List getChildren()>();

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r15 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r16 = (org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) $r15;

        $r17 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r20);

        $r19 = interfaceinvoke r16.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNode: java.lang.CharSequence toQueryString(org.apache.lucene.queryparser.flexible.core.parser.EscapeQuerySyntax)>(r18);

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r19);

        r20 = " ";

        goto label3;

     label4:
        $r6 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.BooleanQueryNode: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode getParent()>();

        if $r6 == null goto label5;

        $r14 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.BooleanQueryNode: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode getParent()>();

        $z2 = $r14 instanceof org.apache.lucene.queryparser.flexible.core.nodes.GroupQueryNode;

        if $z2 != 0 goto label6;

     label5:
        $z1 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.BooleanQueryNode: boolean isRoot()>();

        if $z1 == 0 goto label7;

     label6:
        $r13 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r13;

     label7:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("( ");

        $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" )");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r12;
    }

    public org.apache.lucene.queryparser.flexible.core.nodes.QueryNode cloneTree() throws java.lang.CloneNotSupportedException
    {
        org.apache.lucene.queryparser.flexible.core.nodes.BooleanQueryNode r0, r2;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode $r1;

        r0 := @this: org.apache.lucene.queryparser.flexible.core.nodes.BooleanQueryNode;

        $r1 = specialinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode cloneTree()>();

        r2 = (org.apache.lucene.queryparser.flexible.core.nodes.BooleanQueryNode) $r1;

        return r2;
    }
}
