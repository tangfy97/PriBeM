public abstract class org.apache.pdfbox.pdmodel.font.PDSimpleFont extends org.apache.pdfbox.pdmodel.font.PDFont
{
    private final java.util.HashMap mFontSizes;
    private float avgFontWidth;
    private float avgFontHeight;
    private float fontWidthOfSpace;
    private static final byte[] SPACE_BYTES;
    private static final org.apache.commons.logging.Log LOG;
    private boolean isFontSubstituted;

    public void <init>()
    {
        java.util.HashMap $r1;
        org.apache.pdfbox.pdmodel.font.PDSimpleFont r0;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDSimpleFont;

        specialinvoke r0.<org.apache.pdfbox.pdmodel.font.PDFont: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>(int)>(128);

        r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: java.util.HashMap mFontSizes> = $r1;

        r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: float avgFontWidth> = 0.0F;

        r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: float avgFontHeight> = 0.0F;

        r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: float fontWidthOfSpace> = -1.0F;

        r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: boolean isFontSubstituted> = 0;

        return;
    }

    public void <init>(org.apache.pdfbox.cos.COSDictionary)
    {
        org.apache.pdfbox.cos.COSDictionary r1;
        java.util.HashMap $r2;
        org.apache.pdfbox.pdmodel.font.PDSimpleFont r0;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDSimpleFont;

        r1 := @parameter0: org.apache.pdfbox.cos.COSDictionary;

        specialinvoke r0.<org.apache.pdfbox.pdmodel.font.PDFont: void <init>(org.apache.pdfbox.cos.COSDictionary)>(r1);

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>(int)>(128);

        r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: java.util.HashMap mFontSizes> = $r2;

        r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: float avgFontWidth> = 0.0F;

        r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: float avgFontHeight> = 0.0F;

        r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: float fontWidthOfSpace> = -1.0F;

        r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: boolean isFontSubstituted> = 0;

        return;
    }

    public java.awt.Font getawtFont() throws java.io.IOException
    {
        java.lang.StringBuilder $r0, $r2, $r6;
        org.apache.commons.logging.Log $r1;
        java.lang.Class $r4;
        org.apache.pdfbox.pdmodel.font.PDSimpleFont r3;
        java.lang.String $r5, $r7;

        r3 := @this: org.apache.pdfbox.pdmodel.font.PDSimpleFont;

        $r1 = <org.apache.pdfbox.pdmodel.font.PDSimpleFont: org.apache.commons.logging.Log LOG>;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not yet implemented:");

        $r4 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void error(java.lang.Object)>($r7);

        return null;
    }

    public void drawString(java.lang.String, int[], java.awt.Graphics, float, java.awt.geom.AffineTransform, float, float) throws java.io.IOException
    {
        int[] r4;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z8, $z9;
        java.awt.Font $r1, $r17, r20;
        java.awt.geom.AffineTransform r7, $r27;
        java.awt.Graphics r6;
        float f0, f1, f2;
        java.lang.StringBuilder $r10, $r11, $r12, $r14, $r15, $r29;
        org.apache.pdfbox.pdmodel.font.PDSimpleFont r0;
        org.apache.pdfbox.pdmodel.font.PDType0Font $r19;
        org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font r22;
        org.apache.pdfbox.pdmodel.font.PDFontDescriptor $r18;
        org.apache.pdfbox.pdmodel.font.PDFont $r21;
        java.awt.Graphics2D $r24;
        int $i0, $i2;
        java.lang.String r5, $r13, $r16;
        java.awt.font.GlyphVector r23;
        java.awt.font.FontRenderContext $r28;
        java.awt.RenderingHints$Key $r25;
        org.apache.commons.logging.Log $r9;
        java.lang.Object $r26;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDSimpleFont;

        r5 := @parameter0: java.lang.String;

        r4 := @parameter1: int[];

        r6 := @parameter2: java.awt.Graphics;

        f2 := @parameter3: float;

        r7 := @parameter4: java.awt.geom.AffineTransform;

        f0 := @parameter5: float;

        f1 := @parameter6: float;

        $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: java.awt.Font getawtFont()>();

        r20 = $r1;

        $r28 = new java.awt.font.FontRenderContext;

        $r27 = new java.awt.geom.AffineTransform;

        specialinvoke $r27.<java.awt.geom.AffineTransform: void <init>()>();

        specialinvoke $r28.<java.awt.font.FontRenderContext: void <init>(java.awt.geom.AffineTransform,boolean,boolean)>($r27, 1, 1);

        if r4 == null goto label01;

        $z6 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: boolean isType0Font()>();

        if $z6 == 0 goto label01;

        $z9 = 1;

        $z8 = 1;

        goto label02;

     label01:
        $z9 = 0;

        $z8 = 0;

     label02:
        z0 = $z8;

        if $z9 == 0 goto label03;

        $r19 = (org.apache.pdfbox.pdmodel.font.PDType0Font) r0;

        $r21 = virtualinvoke $r19.<org.apache.pdfbox.pdmodel.font.PDType0Font: org.apache.pdfbox.pdmodel.font.PDFont getDescendantFont()>();

        goto label04;

     label03:
        $r21 = null;

     label04:
        if z0 == 0 goto label10;

        $r18 = virtualinvoke $r21.<org.apache.pdfbox.pdmodel.font.PDFont: org.apache.pdfbox.pdmodel.font.PDFontDescriptor getFontDescriptor()>();

        $z2 = virtualinvoke $r18.<org.apache.pdfbox.pdmodel.font.PDFontDescriptor: boolean isSymbolic()>();

        if $z2 != 0 goto label10;

        r22 = null;

        $z3 = $r21 instanceof org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font;

        if $z3 == 0 goto label05;

        r22 = (org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font) $r21;

     label05:
        if r22 == null goto label06;

        $z5 = virtualinvoke r22.<org.apache.pdfbox.pdmodel.font.PDCIDFontType2Font: boolean hasCIDToGIDMap()>();

        if $z5 != 0 goto label07;

     label06:
        $z4 = r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: boolean isFontSubstituted>;

        if $z4 == 0 goto label08;

     label07:
        r23 = virtualinvoke $r1.<java.awt.Font: java.awt.font.GlyphVector createGlyphVector(java.awt.font.FontRenderContext,java.lang.String)>($r28, r5);

        goto label09;

     label08:
        r23 = virtualinvoke $r1.<java.awt.Font: java.awt.font.GlyphVector createGlyphVector(java.awt.font.FontRenderContext,int[])>($r28, r4);

     label09:
        goto label12;

     label10:
        $z1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: boolean isType1Font()>();

        if $z1 != 0 goto label11;

        $i0 = virtualinvoke $r1.<java.awt.Font: int canDisplayUpTo(java.lang.String)>(r5);

        $i2 = (int) -1;

        if $i0 == $i2 goto label11;

        $r9 = <org.apache.pdfbox.pdmodel.font.PDSimpleFont: org.apache.commons.logging.Log LOG>;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Changing font on <");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> from <");

        $r13 = virtualinvoke $r1.<java.awt.Font: java.lang.String getName()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> to the default font");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r9.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r16);

        $r17 = staticinvoke <java.awt.Font: java.awt.Font decode(java.lang.String)>(null);

        r20 = virtualinvoke $r17.<java.awt.Font: java.awt.Font deriveFont(float)>(1.0F);

     label11:
        r23 = virtualinvoke r20.<java.awt.Font: java.awt.font.GlyphVector createGlyphVector(java.awt.font.FontRenderContext,java.lang.String)>($r28, r5);

     label12:
        $r24 = (java.awt.Graphics2D) r6;

        $r25 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_ANTIALIASING>;

        $r26 = <java.awt.RenderingHints: java.lang.Object VALUE_ANTIALIAS_ON>;

        virtualinvoke $r24.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($r25, $r26);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: void writeFont(java.awt.Graphics2D,java.awt.geom.AffineTransform,float,float,java.awt.font.GlyphVector)>($r24, r7, f0, f1, r23);

        return;
    }

    public float getFontHeight(byte[], int, int) throws java.io.IOException
    {
        byte[] r4;
        org.apache.pdfbox.encoding.Encoding $r5;
        org.apache.pdfbox.pdmodel.font.PDFontDescriptor $r2;
        byte $b0, $b1, $b2, $b3, $b4;
        int i5, i6, $i7, $i8, $i9;
        org.apache.fontbox.afm.FontMetric $r1;
        java.lang.String $r6;
        org.apache.pdfbox.pdmodel.common.PDRectangle $r3;
        float $f0, $f1, $f2, $f3, $f4, f5;
        org.apache.pdfbox.pdmodel.font.PDSimpleFont r0;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDSimpleFont;

        r4 := @parameter0: byte[];

        i5 := @parameter1: int;

        i6 := @parameter2: int;

        $f0 = r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: float avgFontHeight>;

        $b0 = $f0 cmpl 0.0F;

        $i8 = (int) $b0;

        if $i8 <= 0 goto label1;

        $f4 = r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: float avgFontHeight>;

        return $f4;

     label1:
        f5 = 0.0F;

        $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: org.apache.fontbox.afm.FontMetric getAFM()>();

        if $r1 == null goto label2;

        $i7 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: int getCodeFromArray(byte[],int,int)>(r4, i5, i6);

        $r5 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: org.apache.pdfbox.encoding.Encoding getFontEncoding()>();

        $r6 = virtualinvoke $r5.<org.apache.pdfbox.encoding.Encoding: java.lang.String getName(int)>($i7);

        f5 = virtualinvoke $r1.<org.apache.fontbox.afm.FontMetric: float getCharacterHeight(java.lang.String)>($r6);

        goto label7;

     label2:
        $r2 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: org.apache.pdfbox.pdmodel.font.PDFontDescriptor getFontDescriptor()>();

        if $r2 == null goto label7;

        $r3 = virtualinvoke $r2.<org.apache.pdfbox.pdmodel.font.PDFontDescriptor: org.apache.pdfbox.pdmodel.common.PDRectangle getFontBoundingBox()>();

        if $r3 == null goto label3;

        $f3 = virtualinvoke $r3.<org.apache.pdfbox.pdmodel.common.PDRectangle: float getHeight()>();

        f5 = $f3 / 2.0F;

     label3:
        $b1 = f5 cmpl 0.0F;

        if $b1 != 0 goto label4;

        f5 = virtualinvoke $r2.<org.apache.pdfbox.pdmodel.font.PDFontDescriptor: float getCapHeight()>();

     label4:
        $b2 = f5 cmpl 0.0F;

        if $b2 != 0 goto label5;

        f5 = virtualinvoke $r2.<org.apache.pdfbox.pdmodel.font.PDFontDescriptor: float getAscent()>();

     label5:
        $b3 = f5 cmpl 0.0F;

        if $b3 != 0 goto label6;

        $f1 = virtualinvoke $r2.<org.apache.pdfbox.pdmodel.font.PDFontDescriptor: float getXHeight()>();

        f5 = $f1;

        $b4 = $f1 cmpl 0.0F;

        $i9 = (int) $b4;

        if $i9 <= 0 goto label6;

        $f2 = virtualinvoke $r2.<org.apache.pdfbox.pdmodel.font.PDFontDescriptor: float getDescent()>();

        f5 = $f1 - $f2;

     label6:
        r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: float avgFontHeight> = f5;

     label7:
        return f5;
    }

    public float getFontWidth(byte[], int, int) throws java.io.IOException
    {
        byte[] r1;
        java.lang.Float $r5, r8;
        java.util.HashMap $r2, $r6;
        java.lang.Integer $r3, $r7;
        byte $b3;
        int i0, i1, $i2, $i4;
        float $f0, $f1, $f2, $f3;
        java.lang.Object $r4;
        org.apache.pdfbox.pdmodel.font.PDSimpleFont r0;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDSimpleFont;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: int getCodeFromArray(byte[],int,int)>(r1, i0, i1);

        $r2 = r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: java.util.HashMap mFontSizes>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r4 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r3);

        r8 = (java.lang.Float) $r4;

        if r8 != null goto label2;

        $f0 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: float getFontWidth(int)>($i2);

        $r5 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        r8 = $r5;

        $f1 = virtualinvoke $r5.<java.lang.Float: float floatValue()>();

        $b3 = $f1 cmpg 0.0F;

        $i4 = (int) $b3;

        if $i4 > 0 goto label1;

        $f2 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: float getFontWidthFromAFMFile(int)>($i2);

        r8 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f2);

     label1:
        $r6 = r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: java.util.HashMap mFontSizes>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, r8);

     label2:
        $f3 = virtualinvoke r8.<java.lang.Float: float floatValue()>();

        return $f3;
    }

    public float getAverageFontWidth() throws java.io.IOException
    {
        org.apache.pdfbox.cos.COSArray r4;
        byte $b0, $b1, $b3;
        org.apache.pdfbox.cos.COSNumber r6;
        int $i2, i4, $i5, $i6;
        org.apache.pdfbox.cos.COSName $r1;
        org.apache.pdfbox.cos.COSDictionary $r2;
        org.apache.pdfbox.cos.COSBase $r3, $r5;
        float $f0, $f1, $f2, f3, f4, f5;
        org.apache.pdfbox.pdmodel.font.PDSimpleFont r0;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDSimpleFont;

        $f0 = r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: float avgFontWidth>;

        $b0 = $f0 cmpl 0.0F;

        if $b0 == 0 goto label1;

        f3 = r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: float avgFontWidth>;

        goto label7;

     label1:
        f4 = 0.0F;

        f5 = 0.0F;

        $r2 = r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: org.apache.pdfbox.cos.COSDictionary font>;

        $r1 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName WIDTHS>;

        $r3 = virtualinvoke $r2.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r1);

        r4 = (org.apache.pdfbox.cos.COSArray) $r3;

        if r4 == null goto label4;

        i4 = 0;

     label2:
        $i2 = virtualinvoke r4.<org.apache.pdfbox.cos.COSArray: int size()>();

        if i4 >= $i2 goto label4;

        $r5 = virtualinvoke r4.<org.apache.pdfbox.cos.COSArray: org.apache.pdfbox.cos.COSBase getObject(int)>(i4);

        r6 = (org.apache.pdfbox.cos.COSNumber) $r5;

        $f1 = virtualinvoke r6.<org.apache.pdfbox.cos.COSNumber: float floatValue()>();

        $b3 = $f1 cmpl 0.0F;

        $i5 = (int) $b3;

        if $i5 <= 0 goto label3;

        $f2 = virtualinvoke r6.<org.apache.pdfbox.cos.COSNumber: float floatValue()>();

        f4 = f4 + $f2;

        f5 = f5 + 1.0F;

     label3:
        i4 = i4 + 1;

        goto label2;

     label4:
        $b1 = f4 cmpl 0.0F;

        $i6 = (int) $b1;

        if $i6 <= 0 goto label5;

        f3 = f4 / f5;

        goto label6;

     label5:
        f3 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: float getAverageFontWidthFromAFMFile()>();

     label6:
        r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: float avgFontWidth> = f3;

     label7:
        return f3;
    }

    public org.apache.pdfbox.cos.COSBase getToUnicode()
    {
        org.apache.pdfbox.cos.COSName $r1;
        org.apache.pdfbox.cos.COSDictionary $r2;
        org.apache.pdfbox.cos.COSBase $r3;
        org.apache.pdfbox.pdmodel.font.PDSimpleFont r0;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDSimpleFont;

        $r2 = r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: org.apache.pdfbox.cos.COSDictionary font>;

        $r1 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName TO_UNICODE>;

        $r3 = virtualinvoke $r2.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r1);

        return $r3;
    }

    public void setToUnicode(org.apache.pdfbox.cos.COSBase)
    {
        org.apache.pdfbox.cos.COSName $r2;
        org.apache.pdfbox.cos.COSDictionary $r3;
        org.apache.pdfbox.cos.COSBase r1;
        org.apache.pdfbox.pdmodel.font.PDSimpleFont r0;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDSimpleFont;

        r1 := @parameter0: org.apache.pdfbox.cos.COSBase;

        $r3 = r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: org.apache.pdfbox.cos.COSDictionary font>;

        $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName TO_UNICODE>;

        virtualinvoke $r3.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>($r2, r1);

        return;
    }

    public org.apache.pdfbox.pdmodel.common.PDRectangle getFontBoundingBox() throws java.io.IOException
    {
        org.apache.pdfbox.pdmodel.common.PDRectangle $r2;
        org.apache.pdfbox.pdmodel.font.PDSimpleFont r0;
        org.apache.pdfbox.pdmodel.font.PDFontDescriptor $r1;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDSimpleFont;

        $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: org.apache.pdfbox.pdmodel.font.PDFontDescriptor getFontDescriptor()>();

        $r2 = virtualinvoke $r1.<org.apache.pdfbox.pdmodel.font.PDFontDescriptor: org.apache.pdfbox.pdmodel.common.PDRectangle getFontBoundingBox()>();

        return $r2;
    }

    protected void writeFont(java.awt.Graphics2D, java.awt.geom.AffineTransform, float, float, java.awt.font.GlyphVector)
    {
        java.awt.Graphics2D r1;
        java.awt.geom.NoninvertibleTransformException $r6;
        java.lang.String $r12, $r15;
        boolean $z0;
        double $d0, $d1;
        java.awt.font.GlyphVector r2;
        java.awt.geom.AffineTransform r0, $r3;
        java.awt.geom.Point2D$Float $r4, $r5;
        float f0, f1, $f2, $f3;
        java.lang.StringBuilder $r7, $r9, $r13, $r14;
        org.apache.commons.logging.Log $r8;
        java.lang.Class $r11;
        org.apache.pdfbox.pdmodel.font.PDSimpleFont r10;

        r10 := @this: org.apache.pdfbox.pdmodel.font.PDSimpleFont;

        r1 := @parameter0: java.awt.Graphics2D;

        r0 := @parameter1: java.awt.geom.AffineTransform;

        f0 := @parameter2: float;

        f1 := @parameter3: float;

        r2 := @parameter4: java.awt.font.GlyphVector;

        $z0 = virtualinvoke r0.<java.awt.geom.AffineTransform: boolean isIdentity()>();

        if $z0 != 0 goto label4;

     label1:
        $r3 = virtualinvoke r0.<java.awt.geom.AffineTransform: java.awt.geom.AffineTransform createInverse()>();

        virtualinvoke r1.<java.awt.Graphics2D: void transform(java.awt.geom.AffineTransform)>(r0);

        $r4 = new java.awt.geom.Point2D$Float;

        specialinvoke $r4.<java.awt.geom.Point2D$Float: void <init>(float,float)>(f0, f1);

        $r5 = new java.awt.geom.Point2D$Float;

        specialinvoke $r5.<java.awt.geom.Point2D$Float: void <init>(float,float)>(f0, f1);

        virtualinvoke $r3.<java.awt.geom.AffineTransform: java.awt.geom.Point2D transform(java.awt.geom.Point2D,java.awt.geom.Point2D)>($r5, $r4);

        $d0 = virtualinvoke $r4.<java.awt.geom.Point2D$Float: double getX()>();

        $f2 = (float) $d0;

        $d1 = virtualinvoke $r4.<java.awt.geom.Point2D$Float: double getY()>();

        $f3 = (float) $d1;

        virtualinvoke r1.<java.awt.Graphics2D: void drawGlyphVector(java.awt.font.GlyphVector,float,float)>(r2, $f2, $f3);

        virtualinvoke r1.<java.awt.Graphics2D: void transform(java.awt.geom.AffineTransform)>($r3);

     label2:
        goto label5;

     label3:
        $r6 := @caughtexception;

        $r8 = <org.apache.pdfbox.pdmodel.font.PDSimpleFont: org.apache.commons.logging.Log LOG>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error in ");

        $r11 = virtualinvoke r10.<java.lang.Object: java.lang.Class getClass()>();

        $r12 = virtualinvoke $r11.<java.lang.Class: java.lang.String getName()>();

        $r13 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".writeFont");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r8.<org.apache.commons.logging.Log: void error(java.lang.Object,java.lang.Throwable)>($r15, $r6);

        goto label5;

     label4:
        virtualinvoke r1.<java.awt.Graphics2D: void drawGlyphVector(java.awt.font.GlyphVector,float,float)>(r2, f0, f1);

     label5:
        return;

        catch java.awt.geom.NoninvertibleTransformException from label1 to label2 with label3;
    }

    protected void determineEncoding()
    {
        org.apache.pdfbox.encoding.Encoding r53;
        java.util.Map $r28;
        boolean $z0, $z1, $z2;
        org.apache.pdfbox.encoding.EncodingManager $r27;
        org.apache.pdfbox.cos.COSDictionary $r22;
        org.apache.pdfbox.cos.COSBase $r1;
        org.apache.pdfbox.encoding.DictionaryEncoding $r21;
        java.lang.StringBuilder $r2, $r3, $r4, $r7, $r9, $r10, $r11, $r15, $r17, $r18, $r19, $r35, $r37, $r38, $r39, $r46, $r48, $r49;
        org.apache.pdfbox.pdmodel.font.PDSimpleFont r0;
        java.lang.Throwable $r33;
        java.lang.String $r5, $r12, $r20, $r29, $r40, $r50, r51;
        org.apache.pdfbox.cos.COSStream r55;
        org.apache.pdfbox.cos.COSName r52;
        java.io.IOException $r34, $r41, $r43, $r45;
        org.apache.fontbox.cmap.CMap $r13, $r14, $r23, $r25, $r26, $r31, $r32, $r54, $r56;
        org.apache.commons.logging.Log $r8, $r16, $r36, $r42, $r44, $r47;
        java.lang.Object $r30;
        java.io.InputStream $r6, $r24, r57;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDSimpleFont;

        r51 = null;

        r52 = null;

        $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: org.apache.pdfbox.cos.COSBase getEncoding()>();

        r53 = null;

        if $r1 == null goto label14;

        $z0 = $r1 instanceof org.apache.pdfbox.cos.COSName;

        if $z0 == 0 goto label05;

        $r26 = r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: org.apache.fontbox.cmap.CMap cmap>;

        if $r26 != null goto label01;

        r52 = (org.apache.pdfbox.cos.COSName) $r1;

        $r28 = <org.apache.pdfbox.pdmodel.font.PDSimpleFont: java.util.Map cmapObjects>;

        $r29 = virtualinvoke r52.<org.apache.pdfbox.cos.COSName: java.lang.String getName()>();

        $r30 = interfaceinvoke $r28.<java.util.Map: java.lang.Object get(java.lang.Object)>($r29);

        $r31 = (org.apache.fontbox.cmap.CMap) $r30;

        r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: org.apache.fontbox.cmap.CMap cmap> = $r31;

        $r32 = r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: org.apache.fontbox.cmap.CMap cmap>;

        if $r32 != null goto label01;

        r51 = virtualinvoke r52.<org.apache.pdfbox.cos.COSName: java.lang.String getName()>();

     label01:
        $r54 = r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: org.apache.fontbox.cmap.CMap cmap>;

        if $r54 != null goto label14;

        if r51 == null goto label14;

     label02:
        $r27 = <org.apache.pdfbox.encoding.EncodingManager: org.apache.pdfbox.encoding.EncodingManager INSTANCE>;

        r53 = virtualinvoke $r27.<org.apache.pdfbox.encoding.EncodingManager: org.apache.pdfbox.encoding.Encoding getEncoding(org.apache.pdfbox.cos.COSName)>(r52);

     label03:
        goto label14;

     label04:
        $r45 := @caughtexception;

        $r47 = <org.apache.pdfbox.pdmodel.font.PDSimpleFont: org.apache.commons.logging.Log LOG>;

        $r46 = new java.lang.StringBuilder;

        specialinvoke $r46.<java.lang.StringBuilder: void <init>()>();

        $r48 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Debug: Could not find encoding for ");

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r52);

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r47.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r50);

        goto label14;

     label05:
        $z1 = $r1 instanceof org.apache.pdfbox.cos.COSStream;

        if $z1 == 0 goto label10;

        $r23 = r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: org.apache.fontbox.cmap.CMap cmap>;

        if $r23 != null goto label14;

        r55 = (org.apache.pdfbox.cos.COSStream) $r1;

     label06:
        $r24 = virtualinvoke r55.<org.apache.pdfbox.cos.COSStream: java.io.InputStream getUnfilteredStream()>();

        $r25 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: org.apache.fontbox.cmap.CMap parseCmap(java.lang.String,java.io.InputStream)>(null, $r24);

        r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: org.apache.fontbox.cmap.CMap cmap> = $r25;

        staticinvoke <org.apache.pdfbox.io.IOUtils: void closeQuietly(java.io.InputStream)>($r24);

     label07:
        goto label09;

     label08:
        $r43 := @caughtexception;

        $r44 = <org.apache.pdfbox.pdmodel.font.PDSimpleFont: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r44.<org.apache.commons.logging.Log: void error(java.lang.Object)>("Error: Could not parse the embedded CMAP");

     label09:
        goto label14;

     label10:
        $z2 = $r1 instanceof org.apache.pdfbox.cos.COSDictionary;

        if $z2 == 0 goto label14;

     label11:
        $r21 = new org.apache.pdfbox.encoding.DictionaryEncoding;

        $r22 = (org.apache.pdfbox.cos.COSDictionary) $r1;

        specialinvoke $r21.<org.apache.pdfbox.encoding.DictionaryEncoding: void <init>(org.apache.pdfbox.cos.COSDictionary)>($r22);

        r53 = $r21;

     label12:
        goto label14;

     label13:
        $r41 := @caughtexception;

        $r42 = <org.apache.pdfbox.pdmodel.font.PDSimpleFont: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r42.<org.apache.commons.logging.Log: void error(java.lang.Object)>("Error: Could not create the DictionaryEncoding");

     label14:
        virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: void setFontEncoding(org.apache.pdfbox.encoding.Encoding)>(r53);

        specialinvoke r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: void extractToUnicodeEncoding()>();

        $r56 = r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: org.apache.fontbox.cmap.CMap cmap>;

        if $r56 != null goto label22;

        if r51 == null goto label22;

        r57 = null;

     label15:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("org/apache/pdfbox/resources/cmap/");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r51);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = staticinvoke <org.apache.pdfbox.util.ResourceLoader: java.io.InputStream loadResource(java.lang.String)>($r5);

        r57 = $r6;

        if $r6 == null goto label16;

        $r13 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: org.apache.fontbox.cmap.CMap parseCmap(java.lang.String,java.io.InputStream)>("org/apache/pdfbox/resources/cmap/", $r6);

        r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: org.apache.fontbox.cmap.CMap cmap> = $r13;

        $r14 = r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: org.apache.fontbox.cmap.CMap cmap>;

        if $r14 != null goto label17;

        if r52 != null goto label17;

        $r16 = <org.apache.pdfbox.pdmodel.font.PDSimpleFont: org.apache.commons.logging.Log LOG>;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: Could not parse predefined CMAP file for \'");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r51);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r16.<org.apache.commons.logging.Log: void error(java.lang.Object)>($r20);

        goto label17;

     label16:
        $r8 = <org.apache.pdfbox.pdmodel.font.PDSimpleFont: org.apache.commons.logging.Log LOG>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Debug: \'");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r51);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' isn\'t a predefined map, most likely it\'s embedded in the pdf itself.");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r8.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r12);

     label17:
        staticinvoke <org.apache.pdfbox.io.IOUtils: void closeQuietly(java.io.InputStream)>($r6);

        goto label22;

     label18:
        $r34 := @caughtexception;

        $r36 = <org.apache.pdfbox.pdmodel.font.PDSimpleFont: org.apache.commons.logging.Log LOG>;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r37 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: Could not find predefined CMAP file for \'");

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r51);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r36.<org.apache.commons.logging.Log: void error(java.lang.Object)>($r40);

     label19:
        staticinvoke <org.apache.pdfbox.io.IOUtils: void closeQuietly(java.io.InputStream)>(r57);

        goto label22;

     label20:
        $r33 := @caughtexception;

     label21:
        staticinvoke <org.apache.pdfbox.io.IOUtils: void closeQuietly(java.io.InputStream)>(r57);

        throw $r33;

     label22:
        return;

        catch java.io.IOException from label02 to label03 with label04;
        catch java.io.IOException from label06 to label07 with label08;
        catch java.io.IOException from label11 to label12 with label13;
        catch java.io.IOException from label15 to label17 with label18;
        catch java.lang.Throwable from label15 to label17 with label20;
        catch java.lang.Throwable from label18 to label19 with label20;
        catch java.lang.Throwable from label20 to label21 with label20;
    }

    private void extractToUnicodeEncoding()
    {
        java.util.Map $r2;
        boolean $z0, $z1;
        org.apache.pdfbox.cos.COSBase $r1;
        java.lang.StringBuilder $r8, $r9, $r10, $r15, $r17, $r18, $r19, $r25, $r27, $r28, $r29;
        org.apache.pdfbox.pdmodel.font.PDSimpleFont r0;
        java.lang.String $r3, $r7, $r11, $r20, $r30;
        org.apache.pdfbox.cos.COSStream $r21;
        org.apache.pdfbox.cos.COSName r33;
        java.io.IOException $r24, $r31;
        org.apache.fontbox.cmap.CMap $r5, $r6, $r13, $r14, $r23;
        java.lang.Object $r4;
        org.apache.commons.logging.Log $r16, $r26, $r32;
        java.io.InputStream $r12, $r22;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDSimpleFont;

        $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: org.apache.pdfbox.cos.COSBase getToUnicode()>();

        if $r1 == null goto label9;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: void setHasToUnicode(boolean)>(1);

        $z0 = $r1 instanceof org.apache.pdfbox.cos.COSStream;

        if $z0 == 0 goto label4;

     label1:
        $r21 = (org.apache.pdfbox.cos.COSStream) $r1;

        $r22 = virtualinvoke $r21.<org.apache.pdfbox.cos.COSStream: java.io.InputStream getUnfilteredStream()>();

        $r23 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: org.apache.fontbox.cmap.CMap parseCmap(java.lang.String,java.io.InputStream)>("org/apache/pdfbox/resources/cmap/", $r22);

        r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: org.apache.fontbox.cmap.CMap toUnicodeCmap> = $r23;

        staticinvoke <org.apache.pdfbox.io.IOUtils: void closeQuietly(java.io.InputStream)>($r22);

     label2:
        goto label9;

     label3:
        $r31 := @caughtexception;

        $r32 = <org.apache.pdfbox.pdmodel.font.PDSimpleFont: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r32.<org.apache.commons.logging.Log: void error(java.lang.Object)>("Error: Could not load embedded ToUnicode CMap");

        goto label9;

     label4:
        $z1 = $r1 instanceof org.apache.pdfbox.cos.COSName;

        if $z1 == 0 goto label9;

        r33 = (org.apache.pdfbox.cos.COSName) $r1;

        $r2 = <org.apache.pdfbox.pdmodel.font.PDSimpleFont: java.util.Map cmapObjects>;

        $r3 = virtualinvoke r33.<org.apache.pdfbox.cos.COSName: java.lang.String getName()>();

        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        $r5 = (org.apache.fontbox.cmap.CMap) $r4;

        r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: org.apache.fontbox.cmap.CMap toUnicodeCmap> = $r5;

        $r6 = r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: org.apache.fontbox.cmap.CMap toUnicodeCmap>;

        if $r6 != null goto label9;

        $r7 = virtualinvoke r33.<org.apache.pdfbox.cos.COSName: java.lang.String getName()>();

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("org/apache/pdfbox/resources/cmap/");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

     label5:
        $r12 = staticinvoke <org.apache.pdfbox.util.ResourceLoader: java.io.InputStream loadResource(java.lang.String)>($r11);

        $r13 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: org.apache.fontbox.cmap.CMap parseCmap(java.lang.String,java.io.InputStream)>("org/apache/pdfbox/resources/cmap/", $r12);

        r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: org.apache.fontbox.cmap.CMap toUnicodeCmap> = $r13;

     label6:
        goto label8;

     label7:
        $r24 := @caughtexception;

        $r26 = <org.apache.pdfbox.pdmodel.font.PDSimpleFont: org.apache.commons.logging.Log LOG>;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: Could not find predefined ToUnicode CMap file for \'");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r26.<org.apache.commons.logging.Log: void error(java.lang.Object)>($r30);

     label8:
        $r14 = r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: org.apache.fontbox.cmap.CMap toUnicodeCmap>;

        if $r14 != null goto label9;

        $r16 = <org.apache.pdfbox.pdmodel.font.PDSimpleFont: org.apache.commons.logging.Log LOG>;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: Could not parse predefined ToUnicode CMap file for \'");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r16.<org.apache.commons.logging.Log: void error(java.lang.Object)>($r20);

     label9:
        return;

        catch java.io.IOException from label1 to label2 with label3;
        catch java.io.IOException from label5 to label6 with label7;
    }

    protected boolean isFontSubstituted()
    {
        org.apache.pdfbox.pdmodel.font.PDSimpleFont r0;
        boolean $z0;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDSimpleFont;

        $z0 = r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: boolean isFontSubstituted>;

        return $z0;
    }

    protected void setIsFontSubstituted(boolean)
    {
        org.apache.pdfbox.pdmodel.font.PDSimpleFont r0;
        boolean z0;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDSimpleFont;

        z0 := @parameter0: boolean;

        r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: boolean isFontSubstituted> = z0;

        return;
    }

    public float getSpaceWidth()
    {
        byte[] $r2;
        byte $b0, $b1;
        int $i2, $i4, $i5;
        java.lang.Exception $r4;
        org.apache.fontbox.cmap.CMap $r3;
        org.apache.pdfbox.cos.COSBase $r1;
        float $f0, $f1, $f2, $f3, $f4, $f5;
        org.apache.commons.logging.Log $r5;
        org.apache.pdfbox.pdmodel.font.PDSimpleFont r0;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDSimpleFont;

        $f0 = r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: float fontWidthOfSpace>;

        $b0 = $f0 cmpl -1.0F;

        if $b0 != 0 goto label7;

        $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: org.apache.pdfbox.cos.COSBase getToUnicode()>();

     label1:
        if $r1 == null goto label3;

        $r3 = r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: org.apache.fontbox.cmap.CMap toUnicodeCmap>;

        $i2 = virtualinvoke $r3.<org.apache.fontbox.cmap.CMap: int getSpaceMapping()>();

        $i4 = (int) -1;

        if $i2 <= $i4 goto label2;

        $f4 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: float getFontWidth(int)>($i2);

        r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: float fontWidthOfSpace> = $f4;

     label2:
        goto label4;

     label3:
        $r2 = <org.apache.pdfbox.pdmodel.font.PDSimpleFont: byte[] SPACE_BYTES>;

        $f1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: float getFontWidth(byte[],int,int)>($r2, 0, 1);

        r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: float fontWidthOfSpace> = $f1;

     label4:
        $f2 = r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: float fontWidthOfSpace>;

        $b1 = $f2 cmpg 0.0F;

        $i5 = (int) $b1;

        if $i5 > 0 goto label5;

        $f3 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: float getAverageFontWidth()>();

        r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: float fontWidthOfSpace> = $f3;

     label5:
        goto label7;

     label6:
        $r4 := @caughtexception;

        $r5 = <org.apache.pdfbox.pdmodel.font.PDSimpleFont: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r5.<org.apache.commons.logging.Log: void error(java.lang.Object,java.lang.Throwable)>("Can\'t determine the width of the space character using 250 as default", $r4);

        r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: float fontWidthOfSpace> = 250.0F;

     label7:
        $f5 = r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: float fontWidthOfSpace>;

        return $f5;

        catch java.lang.Exception from label1 to label5 with label6;
    }

    static void <clinit>()
    {
        byte[] $r0;
        org.apache.commons.logging.Log $r1;

        $r0 = newarray (byte)[1];

        $r0[0] = 32;

        <org.apache.pdfbox.pdmodel.font.PDSimpleFont: byte[] SPACE_BYTES> = $r0;

        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lorg/apache/pdfbox/pdmodel/font/PDSimpleFont;");

        <org.apache.pdfbox.pdmodel.font.PDSimpleFont: org.apache.commons.logging.Log LOG> = $r1;

        return;
    }
}
