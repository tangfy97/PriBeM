public class org.apache.tika.server.TarWriter extends java.lang.Object implements javax.ws.rs.ext.MessageBodyWriter
{

    public void <init>()
    {
        org.apache.tika.server.TarWriter r0;

        r0 := @this: org.apache.tika.server.TarWriter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static void tarStoreBuffer(org.apache.commons.compress.archivers.tar.TarArchiveOutputStream, java.lang.String, byte[]) throws java.io.IOException
    {
        byte[] r2;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream r3;
        org.apache.commons.compress.archivers.tar.TarArchiveEntry $r0;
        int $i0;
        long $l1;
        java.lang.String r1;

        r3 := @parameter0: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: byte[];

        $r0 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry;

        specialinvoke $r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: void <init>(java.lang.String)>(r1);

        $i0 = lengthof r2;

        $l1 = (long) $i0;

        virtualinvoke $r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: void setSize(long)>($l1);

        virtualinvoke r3.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry)>($r0);

        virtualinvoke r3.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: void write(byte[])>(r2);

        virtualinvoke r3.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: void closeArchiveEntry()>();

        return;
    }

    public boolean isWriteable(java.lang.Class, java.lang.reflect.Type, java.lang.'annotation'.Annotation[], javax.ws.rs.core.MediaType)
    {
        javax.ws.rs.core.MediaType r5;
        java.lang.reflect.Type r3;
        org.apache.tika.server.TarWriter r2;
        java.lang.Class r0, $r1;
        java.lang.'annotation'.Annotation[] r4;
        boolean $z0;

        r2 := @this: org.apache.tika.server.TarWriter;

        r0 := @parameter0: java.lang.Class;

        r3 := @parameter1: java.lang.reflect.Type;

        r4 := @parameter2: java.lang.'annotation'.Annotation[];

        r5 := @parameter3: javax.ws.rs.core.MediaType;

        $r1 = class "Ljava/util/Map;";

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        return $z0;
    }

    public long getSize(java.util.Map, java.lang.Class, java.lang.reflect.Type, java.lang.'annotation'.Annotation[], javax.ws.rs.core.MediaType)
    {
        javax.ws.rs.core.MediaType r5;
        java.lang.reflect.Type r3;
        java.util.Map r1;
        org.apache.tika.server.TarWriter r0;
        java.lang.Class r2;
        java.lang.'annotation'.Annotation[] r4;

        r0 := @this: org.apache.tika.server.TarWriter;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: java.lang.Class;

        r3 := @parameter2: java.lang.reflect.Type;

        r4 := @parameter3: java.lang.'annotation'.Annotation[];

        r5 := @parameter4: javax.ws.rs.core.MediaType;

        return -1L;
    }

    public void writeTo(java.util.Map, java.lang.Class, java.lang.reflect.Type, java.lang.'annotation'.Annotation[], javax.ws.rs.core.MediaType, javax.ws.rs.core.MultivaluedMap, java.io.OutputStream) throws java.io.IOException, javax.ws.rs.WebApplicationException
    {
        byte[] $r10;
        java.lang.'annotation'.Annotation[] r14;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream $r0;
        javax.ws.rs.core.MediaType r15;
        java.util.Map r2;
        java.lang.String $r8;
        boolean $z0;
        java.io.OutputStream r1;
        java.util.Map$Entry r6;
        java.util.Iterator $r4;
        java.util.Set $r3;
        javax.ws.rs.core.MultivaluedMap r16;
        java.lang.reflect.Type r13;
        org.apache.tika.server.TarWriter r11;
        java.lang.Object $r5, $r7, $r9;
        java.lang.Class r12;

        r11 := @this: org.apache.tika.server.TarWriter;

        r2 := @parameter0: java.util.Map;

        r12 := @parameter1: java.lang.Class;

        r13 := @parameter2: java.lang.reflect.Type;

        r14 := @parameter3: java.lang.'annotation'.Annotation[];

        r15 := @parameter4: javax.ws.rs.core.MediaType;

        r16 := @parameter5: javax.ws.rs.core.MultivaluedMap;

        r1 := @parameter6: java.io.OutputStream;

        $r0 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;

        specialinvoke $r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: void <init>(java.io.OutputStream)>(r1);

        $r3 = interfaceinvoke r2.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.Map$Entry) $r5;

        $r7 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = (java.lang.String) $r7;

        $r9 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r10 = (byte[]) $r9;

        staticinvoke <org.apache.tika.server.TarWriter: void tarStoreBuffer(org.apache.commons.compress.archivers.tar.TarArchiveOutputStream,java.lang.String,byte[])>($r0, $r8, $r10);

        goto label1;

     label2:
        virtualinvoke $r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: void close()>();

        return;
    }

    public volatile void writeTo(java.lang.Object, java.lang.Class, java.lang.reflect.Type, java.lang.'annotation'.Annotation[], javax.ws.rs.core.MediaType, javax.ws.rs.core.MultivaluedMap, java.io.OutputStream) throws java.io.IOException, javax.ws.rs.WebApplicationException
    {
        java.io.OutputStream r7;
        java.lang.'annotation'.Annotation[] r4;
        javax.ws.rs.core.MultivaluedMap r6;
        javax.ws.rs.core.MediaType r5;
        java.lang.reflect.Type r3;
        java.util.Map $r8;
        org.apache.tika.server.TarWriter r0;
        java.lang.Object r1;
        java.lang.Class r2;

        r0 := @this: org.apache.tika.server.TarWriter;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Class;

        r3 := @parameter2: java.lang.reflect.Type;

        r4 := @parameter3: java.lang.'annotation'.Annotation[];

        r5 := @parameter4: javax.ws.rs.core.MediaType;

        r6 := @parameter5: javax.ws.rs.core.MultivaluedMap;

        r7 := @parameter6: java.io.OutputStream;

        $r8 = (java.util.Map) r1;

        virtualinvoke r0.<org.apache.tika.server.TarWriter: void writeTo(java.util.Map,java.lang.Class,java.lang.reflect.Type,java.lang.'annotation'.Annotation[],javax.ws.rs.core.MediaType,javax.ws.rs.core.MultivaluedMap,java.io.OutputStream)>($r8, r2, r3, r4, r5, r6, r7);

        return;
    }

    public volatile long getSize(java.lang.Object, java.lang.Class, java.lang.reflect.Type, java.lang.'annotation'.Annotation[], javax.ws.rs.core.MediaType)
    {
        long $l0;
        java.lang.'annotation'.Annotation[] r4;
        javax.ws.rs.core.MediaType r5;
        java.lang.reflect.Type r3;
        java.util.Map $r6;
        org.apache.tika.server.TarWriter r0;
        java.lang.Object r1;
        java.lang.Class r2;

        r0 := @this: org.apache.tika.server.TarWriter;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Class;

        r3 := @parameter2: java.lang.reflect.Type;

        r4 := @parameter3: java.lang.'annotation'.Annotation[];

        r5 := @parameter4: javax.ws.rs.core.MediaType;

        $r6 = (java.util.Map) r1;

        $l0 = virtualinvoke r0.<org.apache.tika.server.TarWriter: long getSize(java.util.Map,java.lang.Class,java.lang.reflect.Type,java.lang.'annotation'.Annotation[],javax.ws.rs.core.MediaType)>($r6, r2, r3, r4, r5);

        return $l0;
    }
}
