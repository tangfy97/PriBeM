public class org.apache.zookeeper.server.SnapshotFormatter extends java.lang.Object
{

    public void <init>()
    {
        org.apache.zookeeper.server.SnapshotFormatter r0;

        r0 := @this: org.apache.zookeeper.server.SnapshotFormatter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void main(java.lang.String[]) throws java.lang.Exception
    {
        java.io.PrintStream $r3;
        int $i0;
        org.apache.zookeeper.server.SnapshotFormatter $r1;
        java.lang.String[] r0;
        java.lang.String $r2;

        r0 := @parameter0: java.lang.String[];

        $i0 = lengthof r0;

        if $i0 == 1 goto label1;

        $r3 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("USAGE: SnapshotFormatter snapshot_file");

        staticinvoke <java.lang.System: void exit(int)>(2);

     label1:
        $r1 = new org.apache.zookeeper.server.SnapshotFormatter;

        specialinvoke $r1.<org.apache.zookeeper.server.SnapshotFormatter: void <init>()>();

        $r2 = r0[0];

        virtualinvoke $r1.<org.apache.zookeeper.server.SnapshotFormatter: void run(java.lang.String)>($r2);

        return;
    }

    public void run(java.lang.String) throws java.io.IOException
    {
        java.util.zip.CheckedInputStream $r0;
        java.io.BufferedInputStream $r1;
        java.util.HashMap $r8;
        java.io.FileInputStream $r2;
        org.apache.jute.BinaryInputArchive $r5;
        java.util.zip.Adler32 $r4;
        org.apache.zookeeper.server.DataTree $r7;
        org.apache.zookeeper.server.SnapshotFormatter r9;
        java.lang.String r3;
        org.apache.zookeeper.server.persistence.FileSnap $r6;

        r9 := @this: org.apache.zookeeper.server.SnapshotFormatter;

        r3 := @parameter0: java.lang.String;

        $r0 = new java.util.zip.CheckedInputStream;

        $r1 = new java.io.BufferedInputStream;

        $r2 = new java.io.FileInputStream;

        specialinvoke $r2.<java.io.FileInputStream: void <init>(java.lang.String)>(r3);

        specialinvoke $r1.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r2);

        $r4 = new java.util.zip.Adler32;

        specialinvoke $r4.<java.util.zip.Adler32: void <init>()>();

        specialinvoke $r0.<java.util.zip.CheckedInputStream: void <init>(java.io.InputStream,java.util.zip.Checksum)>($r1, $r4);

        $r5 = staticinvoke <org.apache.jute.BinaryInputArchive: org.apache.jute.BinaryInputArchive getArchive(java.io.InputStream)>($r0);

        $r6 = new org.apache.zookeeper.server.persistence.FileSnap;

        specialinvoke $r6.<org.apache.zookeeper.server.persistence.FileSnap: void <init>(java.io.File)>(null);

        $r7 = new org.apache.zookeeper.server.DataTree;

        specialinvoke $r7.<org.apache.zookeeper.server.DataTree: void <init>()>();

        $r8 = new java.util.HashMap;

        specialinvoke $r8.<java.util.HashMap: void <init>()>();

        virtualinvoke $r6.<org.apache.zookeeper.server.persistence.FileSnap: void deserialize(org.apache.zookeeper.server.DataTree,java.util.Map,org.apache.jute.InputArchive)>($r7, $r8, $r5);

        specialinvoke r9.<org.apache.zookeeper.server.SnapshotFormatter: void printDetails(org.apache.zookeeper.server.DataTree,java.util.Map)>($r7, $r8);

        return;
    }

    private void printDetails(org.apache.zookeeper.server.DataTree, java.util.Map)
    {
        org.apache.zookeeper.server.DataTree r1;
        org.apache.zookeeper.server.SnapshotFormatter r0;
        java.util.Map r2;

        r0 := @this: org.apache.zookeeper.server.SnapshotFormatter;

        r1 := @parameter0: org.apache.zookeeper.server.DataTree;

        r2 := @parameter1: java.util.Map;

        specialinvoke r0.<org.apache.zookeeper.server.SnapshotFormatter: void printZnodeDetails(org.apache.zookeeper.server.DataTree)>(r1);

        specialinvoke r0.<org.apache.zookeeper.server.SnapshotFormatter: void printSessionDetails(org.apache.zookeeper.server.DataTree,java.util.Map)>(r1, r2);

        return;
    }

    private void printZnodeDetails(org.apache.zookeeper.server.DataTree)
    {
        java.io.PrintStream $r2, $r6;
        java.lang.Object[] $r0;
        java.lang.Integer $r3;
        org.apache.zookeeper.server.DataTree r1;
        int $i0;
        org.apache.zookeeper.server.SnapshotFormatter r5;
        java.lang.String $r4;

        r5 := @this: org.apache.zookeeper.server.SnapshotFormatter;

        r1 := @parameter0: org.apache.zookeeper.server.DataTree;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r0 = newarray (java.lang.Object)[1];

        $i0 = virtualinvoke r1.<org.apache.zookeeper.server.DataTree: int getNodeCount()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r0[0] = $r3;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("ZNode Details (count=%d):", $r0);

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r4);

        specialinvoke r5.<org.apache.zookeeper.server.SnapshotFormatter: void printZnode(org.apache.zookeeper.server.DataTree,java.lang.String)>(r1, "/");

        $r6 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>("----");

        return;
    }

    private void printZnode(org.apache.zookeeper.server.DataTree, java.lang.String)
    {
        java.lang.Throwable $r21;
        byte[] $r10;
        org.apache.zookeeper.data.StatPersisted $r6;
        int $i0;
        java.lang.String r2, $r12, $r20, r22, $r23;
        org.apache.zookeeper.server.DataNode $r3;
        boolean $z0, $z1;
        java.io.PrintStream $r0, $r4, $r8;
        java.util.Iterator $r14;
        java.util.Set $r13;
        org.apache.zookeeper.server.DataTree r1;
        org.apache.zookeeper.server.SnapshotFormatter r5;
        java.lang.StringBuilder $r7, $r9, $r11, $r16, $r17, $r18, $r19;
        java.lang.Object $r15;

        r5 := @this: org.apache.zookeeper.server.SnapshotFormatter;

        r1 := @parameter0: org.apache.zookeeper.server.DataTree;

        r2 := @parameter1: java.lang.String;

        $r0 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("----");

        $r3 = virtualinvoke r1.<org.apache.zookeeper.server.DataTree: org.apache.zookeeper.server.DataNode getNode(java.lang.String)>(r2);

        entermonitor $r3;

     label1:
        $r4 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>(r2);

        $r6 = $r3.<org.apache.zookeeper.server.DataNode: org.apache.zookeeper.data.StatPersisted stat>;

        specialinvoke r5.<org.apache.zookeeper.server.SnapshotFormatter: void printStat(org.apache.zookeeper.data.StatPersisted)>($r6);

        $r8 = <java.lang.System: java.io.PrintStream out>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  dataLength = ");

        $r10 = $r3.<org.apache.zookeeper.server.DataNode: byte[] data>;

        $i0 = lengthof $r10;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r12);

        $r13 = virtualinvoke $r3.<org.apache.zookeeper.server.DataNode: java.util.Set getChildren()>();

        exitmonitor $r3;

     label2:
        goto label5;

     label3:
        $r21 := @caughtexception;

        exitmonitor $r3;

     label4:
        throw $r21;

     label5:
        if $r13 == null goto label9;

        $r14 = interfaceinvoke $r13.<java.util.Set: java.util.Iterator iterator()>();

     label6:
        $z0 = interfaceinvoke $r14.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label9;

        $r15 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>();

        r22 = (java.lang.String) $r15;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("/");

        if $z1 == 0 goto label7;

        $r23 = "";

        goto label8;

     label7:
        $r23 = "/";

     label8:
        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r22);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r5.<org.apache.zookeeper.server.SnapshotFormatter: void printZnode(org.apache.zookeeper.server.DataTree,java.lang.String)>(r1, $r20);

        goto label6;

     label9:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void printSessionDetails(org.apache.zookeeper.server.DataTree, java.util.Map)
    {
        java.lang.Object[] $r8;
        long $l0;
        java.lang.Integer $r14;
        java.util.HashSet $r13;
        java.lang.Long $r7, $r10;
        java.util.Map r1;
        int $i1;
        java.lang.String $r15;
        boolean $z0;
        java.io.PrintStream $r0, $r9;
        java.util.Map$Entry r5;
        java.util.Iterator $r3;
        java.util.Set $r2;
        org.apache.zookeeper.server.DataTree r12;
        org.apache.zookeeper.server.SnapshotFormatter r16;
        java.lang.Object $r4, $r6, $r11;

        r16 := @this: org.apache.zookeeper.server.SnapshotFormatter;

        r12 := @parameter0: org.apache.zookeeper.server.DataTree;

        r1 := @parameter1: java.util.Map;

        $r0 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("Session Details (sid, timeout, ephemeralCount):");

        $r2 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r6 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = (java.lang.Long) $r6;

        $l0 = virtualinvoke $r7.<java.lang.Long: long longValue()>();

        $r9 = <java.lang.System: java.io.PrintStream out>;

        $r8 = newarray (java.lang.Object)[3];

        $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r8[0] = $r10;

        $r11 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r8[1] = $r11;

        $r13 = virtualinvoke r12.<org.apache.zookeeper.server.DataTree: java.util.HashSet getEphemerals(long)>($l0);

        $i1 = virtualinvoke $r13.<java.util.HashSet: int size()>();

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r8[2] = $r14;

        $r15 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%#016x, %d, %d", $r8);

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r15);

        goto label1;

     label2:
        return;
    }

    private void printStat(org.apache.zookeeper.data.StatPersisted)
    {
        java.util.Date $r5, $r12;
        java.lang.StringBuilder $r2, $r4, $r7, $r9, $r11, $r14, $r16, $r18, $r19, $r21, $r23, $r24, $r26, $r28, $r29;
        long $l0, $l1, $l2, $l3, $l4, $l8;
        org.apache.zookeeper.data.StatPersisted r1;
        int $i5, $i6, $i7;
        java.lang.String $r6, $r8, $r13, $r15, $r20, $r25, $r30;
        java.io.PrintStream $r3, $r10, $r17, $r22, $r27;
        org.apache.zookeeper.server.SnapshotFormatter r0;

        r0 := @this: org.apache.zookeeper.server.SnapshotFormatter;

        r1 := @parameter0: org.apache.zookeeper.data.StatPersisted;

        $l0 = virtualinvoke r1.<org.apache.zookeeper.data.StatPersisted: long getCzxid()>();

        specialinvoke r0.<org.apache.zookeeper.server.SnapshotFormatter: void printHex(java.lang.String,long)>("cZxid", $l0);

        $r3 = <java.lang.System: java.io.PrintStream out>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ctime = ");

        $r5 = new java.util.Date;

        $l1 = virtualinvoke r1.<org.apache.zookeeper.data.StatPersisted: long getCtime()>();

        specialinvoke $r5.<java.util.Date: void <init>(long)>($l1);

        $r6 = virtualinvoke $r5.<java.util.Date: java.lang.String toString()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r8);

        $l2 = virtualinvoke r1.<org.apache.zookeeper.data.StatPersisted: long getMzxid()>();

        specialinvoke r0.<org.apache.zookeeper.server.SnapshotFormatter: void printHex(java.lang.String,long)>("mZxid", $l2);

        $r10 = <java.lang.System: java.io.PrintStream out>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mtime = ");

        $r12 = new java.util.Date;

        $l3 = virtualinvoke r1.<org.apache.zookeeper.data.StatPersisted: long getMtime()>();

        specialinvoke $r12.<java.util.Date: void <init>(long)>($l3);

        $r13 = virtualinvoke $r12.<java.util.Date: java.lang.String toString()>();

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r15);

        $l4 = virtualinvoke r1.<org.apache.zookeeper.data.StatPersisted: long getPzxid()>();

        specialinvoke r0.<org.apache.zookeeper.server.SnapshotFormatter: void printHex(java.lang.String,long)>("pZxid", $l4);

        $r17 = <java.lang.System: java.io.PrintStream out>;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  cversion = ");

        $i5 = virtualinvoke r1.<org.apache.zookeeper.data.StatPersisted: int getCversion()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r17.<java.io.PrintStream: void println(java.lang.String)>($r20);

        $r22 = <java.lang.System: java.io.PrintStream out>;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  dataVersion = ");

        $i6 = virtualinvoke r1.<org.apache.zookeeper.data.StatPersisted: int getVersion()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r22.<java.io.PrintStream: void println(java.lang.String)>($r25);

        $r27 = <java.lang.System: java.io.PrintStream out>;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  aclVersion = ");

        $i7 = virtualinvoke r1.<org.apache.zookeeper.data.StatPersisted: int getAversion()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r27.<java.io.PrintStream: void println(java.lang.String)>($r30);

        $l8 = virtualinvoke r1.<org.apache.zookeeper.data.StatPersisted: long getEphemeralOwner()>();

        specialinvoke r0.<org.apache.zookeeper.server.SnapshotFormatter: void printHex(java.lang.String,long)>("ephemeralOwner", $l8);

        return;
    }

    private void printHex(java.lang.String, long)
    {
        java.io.PrintStream $r2;
        java.lang.Object[] $r0;
        java.lang.Long $r3;
        org.apache.zookeeper.server.SnapshotFormatter r5;
        long l0;
        java.lang.String r1, $r4;

        r5 := @this: org.apache.zookeeper.server.SnapshotFormatter;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r0 = newarray (java.lang.Object)[2];

        $r0[0] = r1;

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r0[1] = $r3;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("  %s = %#016x", $r0);

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r4);

        return;
    }
}
