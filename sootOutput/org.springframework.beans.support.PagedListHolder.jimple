public class org.springframework.beans.support.PagedListHolder extends java.lang.Object implements java.io.Serializable
{
    public static final int DEFAULT_PAGE_SIZE;
    public static final int DEFAULT_MAX_LINKED_PAGES;
    private java.util.List source;
    private java.util.Date refreshDate;
    private org.springframework.beans.support.SortDefinition sort;
    private org.springframework.beans.support.SortDefinition sortUsed;
    private int pageSize;
    private int page;
    private boolean newPageSet;
    private int maxLinkedPages;

    public void <init>()
    {
        org.springframework.beans.support.PagedListHolder r0;
        java.util.ArrayList $r1;

        r0 := @this: org.springframework.beans.support.PagedListHolder;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>(0);

        specialinvoke r0.<org.springframework.beans.support.PagedListHolder: void <init>(java.util.List)>($r1);

        return;
    }

    public void <init>(java.util.List)
    {
        org.springframework.beans.support.MutableSortDefinition $r2;
        java.util.List r1;
        org.springframework.beans.support.PagedListHolder r0;

        r0 := @this: org.springframework.beans.support.PagedListHolder;

        r1 := @parameter0: java.util.List;

        $r2 = new org.springframework.beans.support.MutableSortDefinition;

        specialinvoke $r2.<org.springframework.beans.support.MutableSortDefinition: void <init>(boolean)>(1);

        specialinvoke r0.<org.springframework.beans.support.PagedListHolder: void <init>(java.util.List,org.springframework.beans.support.SortDefinition)>(r1, $r2);

        return;
    }

    public void <init>(java.util.List, org.springframework.beans.support.SortDefinition)
    {
        java.util.List r1;
        org.springframework.beans.support.SortDefinition r2;
        org.springframework.beans.support.PagedListHolder r0;

        r0 := @this: org.springframework.beans.support.PagedListHolder;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: org.springframework.beans.support.SortDefinition;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.springframework.beans.support.PagedListHolder: int pageSize> = 10;

        r0.<org.springframework.beans.support.PagedListHolder: int page> = 0;

        r0.<org.springframework.beans.support.PagedListHolder: int maxLinkedPages> = 10;

        virtualinvoke r0.<org.springframework.beans.support.PagedListHolder: void setSource(java.util.List)>(r1);

        virtualinvoke r0.<org.springframework.beans.support.PagedListHolder: void setSort(org.springframework.beans.support.SortDefinition)>(r2);

        return;
    }

    public void setSource(java.util.List)
    {
        java.util.List r0;
        java.util.Date $r2;
        org.springframework.beans.support.PagedListHolder r1;

        r1 := @this: org.springframework.beans.support.PagedListHolder;

        r0 := @parameter0: java.util.List;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Source List must not be null");

        r1.<org.springframework.beans.support.PagedListHolder: java.util.List source> = r0;

        $r2 = new java.util.Date;

        specialinvoke $r2.<java.util.Date: void <init>()>();

        r1.<org.springframework.beans.support.PagedListHolder: java.util.Date refreshDate> = $r2;

        r1.<org.springframework.beans.support.PagedListHolder: org.springframework.beans.support.SortDefinition sortUsed> = null;

        return;
    }

    public java.util.List getSource()
    {
        java.util.List $r1;
        org.springframework.beans.support.PagedListHolder r0;

        r0 := @this: org.springframework.beans.support.PagedListHolder;

        $r1 = r0.<org.springframework.beans.support.PagedListHolder: java.util.List source>;

        return $r1;
    }

    public java.util.Date getRefreshDate()
    {
        java.util.Date $r1;
        org.springframework.beans.support.PagedListHolder r0;

        r0 := @this: org.springframework.beans.support.PagedListHolder;

        $r1 = r0.<org.springframework.beans.support.PagedListHolder: java.util.Date refreshDate>;

        return $r1;
    }

    public void setSort(org.springframework.beans.support.SortDefinition)
    {
        org.springframework.beans.support.SortDefinition r1;
        org.springframework.beans.support.PagedListHolder r0;

        r0 := @this: org.springframework.beans.support.PagedListHolder;

        r1 := @parameter0: org.springframework.beans.support.SortDefinition;

        r0.<org.springframework.beans.support.PagedListHolder: org.springframework.beans.support.SortDefinition sort> = r1;

        return;
    }

    public org.springframework.beans.support.SortDefinition getSort()
    {
        org.springframework.beans.support.SortDefinition $r1;
        org.springframework.beans.support.PagedListHolder r0;

        r0 := @this: org.springframework.beans.support.PagedListHolder;

        $r1 = r0.<org.springframework.beans.support.PagedListHolder: org.springframework.beans.support.SortDefinition sort>;

        return $r1;
    }

    public void setPageSize(int)
    {
        org.springframework.beans.support.PagedListHolder r0;
        int i0, $i1;
        boolean $z0;

        r0 := @this: org.springframework.beans.support.PagedListHolder;

        i0 := @parameter0: int;

        $i1 = r0.<org.springframework.beans.support.PagedListHolder: int pageSize>;

        if i0 == $i1 goto label1;

        r0.<org.springframework.beans.support.PagedListHolder: int pageSize> = i0;

        $z0 = r0.<org.springframework.beans.support.PagedListHolder: boolean newPageSet>;

        if $z0 != 0 goto label1;

        r0.<org.springframework.beans.support.PagedListHolder: int page> = 0;

     label1:
        return;
    }

    public int getPageSize()
    {
        int $i0;
        org.springframework.beans.support.PagedListHolder r0;

        r0 := @this: org.springframework.beans.support.PagedListHolder;

        $i0 = r0.<org.springframework.beans.support.PagedListHolder: int pageSize>;

        return $i0;
    }

    public void setPage(int)
    {
        int i0;
        org.springframework.beans.support.PagedListHolder r0;

        r0 := @this: org.springframework.beans.support.PagedListHolder;

        i0 := @parameter0: int;

        r0.<org.springframework.beans.support.PagedListHolder: int page> = i0;

        r0.<org.springframework.beans.support.PagedListHolder: boolean newPageSet> = 1;

        return;
    }

    public int getPage()
    {
        org.springframework.beans.support.PagedListHolder r0;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: org.springframework.beans.support.PagedListHolder;

        r0.<org.springframework.beans.support.PagedListHolder: boolean newPageSet> = 0;

        $i0 = r0.<org.springframework.beans.support.PagedListHolder: int page>;

        $i1 = virtualinvoke r0.<org.springframework.beans.support.PagedListHolder: int getPageCount()>();

        if $i0 < $i1 goto label1;

        $i3 = virtualinvoke r0.<org.springframework.beans.support.PagedListHolder: int getPageCount()>();

        $i4 = $i3 - 1;

        r0.<org.springframework.beans.support.PagedListHolder: int page> = $i4;

     label1:
        $i2 = r0.<org.springframework.beans.support.PagedListHolder: int page>;

        return $i2;
    }

    public void setMaxLinkedPages(int)
    {
        int i0;
        org.springframework.beans.support.PagedListHolder r0;

        r0 := @this: org.springframework.beans.support.PagedListHolder;

        i0 := @parameter0: int;

        r0.<org.springframework.beans.support.PagedListHolder: int maxLinkedPages> = i0;

        return;
    }

    public int getMaxLinkedPages()
    {
        int $i0;
        org.springframework.beans.support.PagedListHolder r0;

        r0 := @this: org.springframework.beans.support.PagedListHolder;

        $i0 = r0.<org.springframework.beans.support.PagedListHolder: int maxLinkedPages>;

        return $i0;
    }

    public int getPageCount()
    {
        org.springframework.beans.support.PagedListHolder r0;
        byte $b3, $b5;
        int $i0, $i1, $i2, $i4, $i6, $i7;
        float $f0, $f1, f2, $f3, $f4;
        double $d0;

        r0 := @this: org.springframework.beans.support.PagedListHolder;

        $i0 = virtualinvoke r0.<org.springframework.beans.support.PagedListHolder: int getNrOfElements()>();

        $f0 = (float) $i0;

        $i1 = virtualinvoke r0.<org.springframework.beans.support.PagedListHolder: int getPageSize()>();

        $f1 = (float) $i1;

        f2 = $f0 / $f1;

        $i2 = (int) f2;

        $f3 = (float) $i2;

        $b3 = f2 cmpl $f3;

        $i7 = (int) $b3;

        if $i7 > 0 goto label1;

        $d0 = (double) f2;

        $b5 = $d0 cmpl 0.0;

        if $b5 != 0 goto label2;

     label1:
        $f4 = f2 + 1.0F;

        $i6 = (int) $f4;

        return $i6;

     label2:
        $i4 = (int) f2;

        return $i4;
    }

    public boolean isFirstPage()
    {
        int $i0;
        org.springframework.beans.support.PagedListHolder r0;

        r0 := @this: org.springframework.beans.support.PagedListHolder;

        $i0 = virtualinvoke r0.<org.springframework.beans.support.PagedListHolder: int getPage()>();

        if $i0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isLastPage()
    {
        org.springframework.beans.support.PagedListHolder r0;
        int $i0, $i1, $i2;

        r0 := @this: org.springframework.beans.support.PagedListHolder;

        $i0 = virtualinvoke r0.<org.springframework.beans.support.PagedListHolder: int getPage()>();

        $i1 = virtualinvoke r0.<org.springframework.beans.support.PagedListHolder: int getPageCount()>();

        $i2 = $i1 - 1;

        if $i0 != $i2 goto label1;

        return 1;

     label1:
        return 0;
    }

    public void previousPage()
    {
        org.springframework.beans.support.PagedListHolder r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.springframework.beans.support.PagedListHolder;

        $z0 = virtualinvoke r0.<org.springframework.beans.support.PagedListHolder: boolean isFirstPage()>();

        if $z0 != 0 goto label1;

        $i0 = r0.<org.springframework.beans.support.PagedListHolder: int page>;

        $i1 = $i0 - 1;

        r0.<org.springframework.beans.support.PagedListHolder: int page> = $i1;

     label1:
        return;
    }

    public void nextPage()
    {
        org.springframework.beans.support.PagedListHolder r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.springframework.beans.support.PagedListHolder;

        $z0 = virtualinvoke r0.<org.springframework.beans.support.PagedListHolder: boolean isLastPage()>();

        if $z0 != 0 goto label1;

        $i0 = r0.<org.springframework.beans.support.PagedListHolder: int page>;

        $i1 = $i0 + 1;

        r0.<org.springframework.beans.support.PagedListHolder: int page> = $i1;

     label1:
        return;
    }

    public int getNrOfElements()
    {
        int $i0;
        java.util.List $r1;
        org.springframework.beans.support.PagedListHolder r0;

        r0 := @this: org.springframework.beans.support.PagedListHolder;

        $r1 = virtualinvoke r0.<org.springframework.beans.support.PagedListHolder: java.util.List getSource()>();

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public int getFirstElementOnPage()
    {
        org.springframework.beans.support.PagedListHolder r0;
        int $i0, $i1, $i2;

        r0 := @this: org.springframework.beans.support.PagedListHolder;

        $i0 = virtualinvoke r0.<org.springframework.beans.support.PagedListHolder: int getPageSize()>();

        $i1 = virtualinvoke r0.<org.springframework.beans.support.PagedListHolder: int getPage()>();

        $i2 = $i0 * $i1;

        return $i2;
    }

    public int getLastElementOnPage()
    {
        org.springframework.beans.support.PagedListHolder r0;
        int $i0, $i1, $i2, i3, $i4, $i5, $i6;

        r0 := @this: org.springframework.beans.support.PagedListHolder;

        $i0 = virtualinvoke r0.<org.springframework.beans.support.PagedListHolder: int getPageSize()>();

        $i1 = virtualinvoke r0.<org.springframework.beans.support.PagedListHolder: int getPage()>();

        $i2 = $i1 + 1;

        i3 = $i0 * $i2;

        $i4 = virtualinvoke r0.<org.springframework.beans.support.PagedListHolder: int getNrOfElements()>();

        if i3 <= $i4 goto label1;

        $i6 = $i4;

        goto label2;

     label1:
        $i6 = i3;

     label2:
        $i5 = $i6 - 1;

        return $i5;
    }

    public java.util.List getPageList()
    {
        java.util.List $r1, $r2;
        org.springframework.beans.support.PagedListHolder r0;
        int $i0, $i1, $i2;

        r0 := @this: org.springframework.beans.support.PagedListHolder;

        $r1 = virtualinvoke r0.<org.springframework.beans.support.PagedListHolder: java.util.List getSource()>();

        $i0 = virtualinvoke r0.<org.springframework.beans.support.PagedListHolder: int getFirstElementOnPage()>();

        $i1 = virtualinvoke r0.<org.springframework.beans.support.PagedListHolder: int getLastElementOnPage()>();

        $i2 = $i1 + 1;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.List subList(int,int)>($i0, $i2);

        return $r2;
    }

    public int getFirstLinkedPage()
    {
        org.springframework.beans.support.PagedListHolder r0;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: org.springframework.beans.support.PagedListHolder;

        $i0 = virtualinvoke r0.<org.springframework.beans.support.PagedListHolder: int getPage()>();

        $i1 = virtualinvoke r0.<org.springframework.beans.support.PagedListHolder: int getMaxLinkedPages()>();

        $i2 = $i1 / 2;

        $i3 = $i0 - $i2;

        $i4 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i3);

        return $i4;
    }

    public int getLastLinkedPage()
    {
        org.springframework.beans.support.PagedListHolder r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;

        r0 := @this: org.springframework.beans.support.PagedListHolder;

        $i0 = virtualinvoke r0.<org.springframework.beans.support.PagedListHolder: int getFirstLinkedPage()>();

        $i1 = virtualinvoke r0.<org.springframework.beans.support.PagedListHolder: int getMaxLinkedPages()>();

        $i2 = $i0 + $i1;

        $i3 = $i2 - 1;

        $i4 = virtualinvoke r0.<org.springframework.beans.support.PagedListHolder: int getPageCount()>();

        $i5 = $i4 - 1;

        $i6 = staticinvoke <java.lang.Math: int min(int,int)>($i3, $i5);

        return $i6;
    }

    public void resort()
    {
        java.util.List $r4;
        org.springframework.beans.support.PagedListHolder r0;
        org.springframework.beans.support.SortDefinition $r1, $r2, $r3;
        boolean $z0;

        r0 := @this: org.springframework.beans.support.PagedListHolder;

        $r1 = virtualinvoke r0.<org.springframework.beans.support.PagedListHolder: org.springframework.beans.support.SortDefinition getSort()>();

        if $r1 == null goto label1;

        $r2 = r0.<org.springframework.beans.support.PagedListHolder: org.springframework.beans.support.SortDefinition sortUsed>;

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label1;

        $r3 = virtualinvoke r0.<org.springframework.beans.support.PagedListHolder: org.springframework.beans.support.SortDefinition copySortDefinition(org.springframework.beans.support.SortDefinition)>($r1);

        r0.<org.springframework.beans.support.PagedListHolder: org.springframework.beans.support.SortDefinition sortUsed> = $r3;

        $r4 = virtualinvoke r0.<org.springframework.beans.support.PagedListHolder: java.util.List getSource()>();

        virtualinvoke r0.<org.springframework.beans.support.PagedListHolder: void doSort(java.util.List,org.springframework.beans.support.SortDefinition)>($r4, $r1);

        virtualinvoke r0.<org.springframework.beans.support.PagedListHolder: void setPage(int)>(0);

     label1:
        return;
    }

    protected org.springframework.beans.support.SortDefinition copySortDefinition(org.springframework.beans.support.SortDefinition)
    {
        org.springframework.beans.support.MutableSortDefinition $r0;
        org.springframework.beans.support.SortDefinition r1;
        org.springframework.beans.support.PagedListHolder r2;

        r2 := @this: org.springframework.beans.support.PagedListHolder;

        r1 := @parameter0: org.springframework.beans.support.SortDefinition;

        $r0 = new org.springframework.beans.support.MutableSortDefinition;

        specialinvoke $r0.<org.springframework.beans.support.MutableSortDefinition: void <init>(org.springframework.beans.support.SortDefinition)>(r1);

        return $r0;
    }

    protected void doSort(java.util.List, org.springframework.beans.support.SortDefinition)
    {
        java.util.List r0;
        org.springframework.beans.support.SortDefinition r1;
        org.springframework.beans.support.PagedListHolder r2;

        r2 := @this: org.springframework.beans.support.PagedListHolder;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: org.springframework.beans.support.SortDefinition;

        staticinvoke <org.springframework.beans.support.PropertyComparator: void sort(java.util.List,org.springframework.beans.support.SortDefinition)>(r0, r1);

        return;
    }

    public static void <clinit>()
    {
        <org.springframework.beans.support.PagedListHolder: int DEFAULT_MAX_LINKED_PAGES> = 10;

        <org.springframework.beans.support.PagedListHolder: int DEFAULT_PAGE_SIZE> = 10;

        return;
    }
}
