public class org.eclipse.jdt.internal.compiler.ast.ThrowStatement extends org.eclipse.jdt.internal.compiler.ast.Statement
{
    public org.eclipse.jdt.internal.compiler.ast.Expression exception;
    public org.eclipse.jdt.internal.compiler.lookup.TypeBinding exceptionType;

    public void <init>(org.eclipse.jdt.internal.compiler.ast.Expression, int, int)
    {
        org.eclipse.jdt.internal.compiler.ast.Expression r1;
        org.eclipse.jdt.internal.compiler.ast.ThrowStatement r0;
        int i0, i1;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.ThrowStatement;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.ast.Expression;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.ast.Statement: void <init>()>();

        r0.<org.eclipse.jdt.internal.compiler.ast.ThrowStatement: org.eclipse.jdt.internal.compiler.ast.Expression exception> = r1;

        r0.<org.eclipse.jdt.internal.compiler.ast.ThrowStatement: int sourceStart> = i0;

        r0.<org.eclipse.jdt.internal.compiler.ast.ThrowStatement: int sourceEnd> = i1;

        return;
    }

    public org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.flow.FlowContext, org.eclipse.jdt.internal.compiler.flow.FlowInfo)
    {
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r1;
        org.eclipse.jdt.internal.compiler.ast.ThrowStatement r0;
        org.eclipse.jdt.internal.compiler.flow.FlowInfo r3;
        org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo $r7;
        org.eclipse.jdt.internal.compiler.ast.Expression $r4, $r5;
        org.eclipse.jdt.internal.compiler.flow.FlowContext r2;
        org.eclipse.jdt.internal.compiler.lookup.TypeBinding $r6;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.ThrowStatement;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.flow.FlowContext;

        r3 := @parameter2: org.eclipse.jdt.internal.compiler.flow.FlowInfo;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.ast.ThrowStatement: org.eclipse.jdt.internal.compiler.ast.Expression exception>;

        virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>(r1, r2, r3);

        $r5 = r0.<org.eclipse.jdt.internal.compiler.ast.ThrowStatement: org.eclipse.jdt.internal.compiler.ast.Expression exception>;

        virtualinvoke $r5.<org.eclipse.jdt.internal.compiler.ast.Expression: void checkNPE(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>(r1, r2, r3);

        $r6 = r0.<org.eclipse.jdt.internal.compiler.ast.ThrowStatement: org.eclipse.jdt.internal.compiler.lookup.TypeBinding exceptionType>;

        virtualinvoke r2.<org.eclipse.jdt.internal.compiler.flow.FlowContext: void checkExceptionHandlers(org.eclipse.jdt.internal.compiler.lookup.TypeBinding,org.eclipse.jdt.internal.compiler.ast.ASTNode,org.eclipse.jdt.internal.compiler.flow.FlowInfo,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>($r6, r0, r3, r1);

        $r7 = <org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo DEAD_END>;

        return $r7;
    }

    public void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.codegen.CodeStream)
    {
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r2;
        org.eclipse.jdt.internal.compiler.ast.ThrowStatement r0;
        org.eclipse.jdt.internal.compiler.codegen.CodeStream r1;
        org.eclipse.jdt.internal.compiler.ast.Expression $r3;
        int $i0, $i1, i2, $i3;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.ThrowStatement;

        r2 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r1 := @parameter1: org.eclipse.jdt.internal.compiler.codegen.CodeStream;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.ast.ThrowStatement: int bits>;

        $i1 = $i0 & -2147483648;

        if $i1 != 0 goto label1;

        return;

     label1:
        i2 = r1.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: int position>;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.ast.ThrowStatement: org.eclipse.jdt.internal.compiler.ast.Expression exception>;

        virtualinvoke $r3.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r2, r1, 1);

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void athrow()>();

        $i3 = r0.<org.eclipse.jdt.internal.compiler.ast.ThrowStatement: int sourceStart>;

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void recordPositionsFrom(int,int)>(i2, $i3);

        return;
    }

    public java.lang.StringBuffer printStatement(int, java.lang.StringBuffer)
    {
        org.eclipse.jdt.internal.compiler.ast.Expression $r3;
        java.lang.StringBuffer r0, $r1, $r4;
        org.eclipse.jdt.internal.compiler.ast.ThrowStatement r2;
        int i0;

        r2 := @this: org.eclipse.jdt.internal.compiler.ast.ThrowStatement;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.StringBuffer;

        $r1 = staticinvoke <org.eclipse.jdt.internal.compiler.ast.ThrowStatement: java.lang.StringBuffer printIndent(int,java.lang.StringBuffer)>(i0, r0);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("throw ");

        $r3 = r2.<org.eclipse.jdt.internal.compiler.ast.ThrowStatement: org.eclipse.jdt.internal.compiler.ast.Expression exception>;

        virtualinvoke $r3.<org.eclipse.jdt.internal.compiler.ast.Expression: java.lang.StringBuffer printExpression(int,java.lang.StringBuffer)>(0, r0);

        $r4 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(59);

        return $r4;
    }

    public void resolve(org.eclipse.jdt.internal.compiler.lookup.BlockScope)
    {
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r1;
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r10, $r14;
        long $l0;
        org.eclipse.jdt.internal.compiler.ast.Expression $r2, $r12, $r15, $r16;
        byte $b1;
        org.eclipse.jdt.internal.compiler.lookup.TypeBinding $r3, $r4, $r5, $r7, $r8, $r11, $r17, $r18;
        int $i2;
        boolean $z0;
        org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding $r9;
        org.eclipse.jdt.internal.compiler.ast.ThrowStatement r0;
        org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding $r6;
        org.eclipse.jdt.internal.compiler.impl.CompilerOptions $r13;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.ThrowStatement;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.ast.ThrowStatement: org.eclipse.jdt.internal.compiler.ast.Expression exception>;

        $r3 = virtualinvoke $r2.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolveType(org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r1);

        r0.<org.eclipse.jdt.internal.compiler.ast.ThrowStatement: org.eclipse.jdt.internal.compiler.lookup.TypeBinding exceptionType> = $r3;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.ast.ThrowStatement: org.eclipse.jdt.internal.compiler.lookup.TypeBinding exceptionType>;

        if $r4 == null goto label3;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.ast.ThrowStatement: org.eclipse.jdt.internal.compiler.lookup.TypeBinding exceptionType>;

        $z0 = virtualinvoke $r5.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: boolean isValidBinding()>();

        if $z0 == 0 goto label3;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.ast.ThrowStatement: org.eclipse.jdt.internal.compiler.lookup.TypeBinding exceptionType>;

        $r6 = <org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding NULL>;

        if $r7 != $r6 goto label1;

        $r13 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.impl.CompilerOptions compilerOptions()>();

        $l0 = $r13.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long complianceLevel>;

        $b1 = $l0 cmp 3080192L;

        $i2 = (int) $b1;

        if $i2 > 0 goto label2;

        $r14 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        $r15 = r0.<org.eclipse.jdt.internal.compiler.ast.ThrowStatement: org.eclipse.jdt.internal.compiler.ast.Expression exception>;

        virtualinvoke $r14.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void cannotThrowNull(org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r15);

        goto label2;

     label1:
        $r8 = r0.<org.eclipse.jdt.internal.compiler.ast.ThrowStatement: org.eclipse.jdt.internal.compiler.lookup.TypeBinding exceptionType>;

        $r9 = virtualinvoke $r8.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding findSuperTypeOriginatingFrom(int,boolean)>(21, 1);

        if $r9 != null goto label2;

        $r10 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        $r12 = r0.<org.eclipse.jdt.internal.compiler.ast.ThrowStatement: org.eclipse.jdt.internal.compiler.ast.Expression exception>;

        $r11 = r0.<org.eclipse.jdt.internal.compiler.ast.ThrowStatement: org.eclipse.jdt.internal.compiler.lookup.TypeBinding exceptionType>;

        virtualinvoke $r10.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void cannotThrowType(org.eclipse.jdt.internal.compiler.ast.ASTNode,org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>($r12, $r11);

     label2:
        $r16 = r0.<org.eclipse.jdt.internal.compiler.ast.ThrowStatement: org.eclipse.jdt.internal.compiler.ast.Expression exception>;

        $r17 = r0.<org.eclipse.jdt.internal.compiler.ast.ThrowStatement: org.eclipse.jdt.internal.compiler.lookup.TypeBinding exceptionType>;

        $r18 = r0.<org.eclipse.jdt.internal.compiler.ast.ThrowStatement: org.eclipse.jdt.internal.compiler.lookup.TypeBinding exceptionType>;

        virtualinvoke $r16.<org.eclipse.jdt.internal.compiler.ast.Expression: void computeConversion(org.eclipse.jdt.internal.compiler.lookup.Scope,org.eclipse.jdt.internal.compiler.lookup.TypeBinding,org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>(r1, $r17, $r18);

     label3:
        return;
    }

    public void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor, org.eclipse.jdt.internal.compiler.lookup.BlockScope)
    {
        org.eclipse.jdt.internal.compiler.ASTVisitor r0;
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r2;
        org.eclipse.jdt.internal.compiler.ast.Expression $r3;
        org.eclipse.jdt.internal.compiler.ast.ThrowStatement r1;
        boolean $z0;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.ThrowStatement;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.ASTVisitor;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        $z0 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: boolean visit(org.eclipse.jdt.internal.compiler.ast.ThrowStatement,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r1, r2);

        if $z0 == 0 goto label1;

        $r3 = r1.<org.eclipse.jdt.internal.compiler.ast.ThrowStatement: org.eclipse.jdt.internal.compiler.ast.Expression exception>;

        virtualinvoke $r3.<org.eclipse.jdt.internal.compiler.ast.Expression: void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r0, r2);

     label1:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: void endVisit(org.eclipse.jdt.internal.compiler.ast.ThrowStatement,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r1, r2);

        return;
    }
}
