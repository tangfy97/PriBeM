public class com.hp.hpl.jena.sparql.expr.E_Scalar extends com.hp.hpl.jena.sparql.expr.ExprFunctionOp
{
    private static final java.lang.String symbol;

    protected void <init>(com.hp.hpl.jena.sparql.syntax.Element, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.expr.E_Scalar r0;
        com.hp.hpl.jena.sparql.syntax.Element r1;
        com.hp.hpl.jena.sparql.algebra.Op r2;

        r0 := @this: com.hp.hpl.jena.sparql.expr.E_Scalar;

        r1 := @parameter0: com.hp.hpl.jena.sparql.syntax.Element;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        specialinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprFunctionOp: void <init>(java.lang.String,com.hp.hpl.jena.sparql.syntax.Element,com.hp.hpl.jena.sparql.algebra.Op)>("scalar", r1, r2);

        return;
    }

    public com.hp.hpl.jena.sparql.expr.ExprFunctionOp copy(com.hp.hpl.jena.sparql.expr.ExprList, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.expr.E_Scalar r0;
        com.hp.hpl.jena.sparql.expr.ExprList r1;
        com.hp.hpl.jena.sparql.algebra.Op r2;

        r0 := @this: com.hp.hpl.jena.sparql.expr.E_Scalar;

        r1 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprList;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        return null;
    }

    protected com.hp.hpl.jena.sparql.expr.NodeValue eval(com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.sparql.engine.QueryIterator, com.hp.hpl.jena.sparql.function.FunctionEnv)
    {
        com.hp.hpl.jena.sparql.engine.binding.Binding r1;
        com.hp.hpl.jena.sparql.expr.E_Scalar r0;
        com.hp.hpl.jena.sparql.function.FunctionEnv r3;
        com.hp.hpl.jena.sparql.engine.QueryIterator r2;

        r0 := @this: com.hp.hpl.jena.sparql.expr.E_Scalar;

        r1 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r2 := @parameter1: com.hp.hpl.jena.sparql.engine.QueryIterator;

        r3 := @parameter2: com.hp.hpl.jena.sparql.function.FunctionEnv;

        return null;
    }

    public com.hp.hpl.jena.sparql.expr.Expr applyNodeTransform(com.hp.hpl.jena.sparql.graph.NodeTransform)
    {
        com.hp.hpl.jena.sparql.expr.E_Scalar r0;
        com.hp.hpl.jena.sparql.graph.NodeTransform r1;

        r0 := @this: com.hp.hpl.jena.sparql.expr.E_Scalar;

        r1 := @parameter0: com.hp.hpl.jena.sparql.graph.NodeTransform;

        return null;
    }

    public com.hp.hpl.jena.sparql.expr.Expr copySubstitute(com.hp.hpl.jena.sparql.engine.binding.Binding, boolean)
    {
        com.hp.hpl.jena.sparql.expr.E_Scalar r0;
        com.hp.hpl.jena.sparql.engine.binding.Binding r1;
        boolean z0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.E_Scalar;

        r1 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        z0 := @parameter1: boolean;

        return null;
    }

    public static void <clinit>()
    {
        <com.hp.hpl.jena.sparql.expr.E_Scalar: java.lang.String symbol> = "scalar";

        return;
    }
}
