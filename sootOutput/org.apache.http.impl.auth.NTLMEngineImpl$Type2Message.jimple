class org.apache.http.impl.auth.NTLMEngineImpl$Type2Message extends org.apache.http.impl.auth.NTLMEngineImpl$NTLMMessage
{
    protected byte[] challenge;
    protected java.lang.String target;
    protected byte[] targetInfo;
    protected int flags;

    void <init>(java.lang.String) throws org.apache.http.impl.auth.NTLMEngineException
    {
        byte[] $r2, $r3, $r4, $r5;
        org.apache.http.impl.auth.NTLMEngineException $r7, $r14;
        org.apache.http.impl.auth.NTLMEngineImpl$Type2Message r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.String r1, $r6, $r10, $r12, $r15;
        java.lang.StringBuilder $r8, $r9, $r11;
        java.io.UnsupportedEncodingException $r13;

        r0 := @this: org.apache.http.impl.auth.NTLMEngineImpl$Type2Message;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.http.impl.auth.NTLMEngineImpl$NTLMMessage: void <init>(java.lang.String,int)>(r1, 2);

        $r2 = newarray (byte)[8];

        r0.<org.apache.http.impl.auth.NTLMEngineImpl$Type2Message: byte[] challenge> = $r2;

        $r3 = r0.<org.apache.http.impl.auth.NTLMEngineImpl$Type2Message: byte[] challenge>;

        virtualinvoke r0.<org.apache.http.impl.auth.NTLMEngineImpl$Type2Message: void readBytes(byte[],int)>($r3, 24);

        $i0 = virtualinvoke r0.<org.apache.http.impl.auth.NTLMEngineImpl$Type2Message: int readULong(int)>(20);

        r0.<org.apache.http.impl.auth.NTLMEngineImpl$Type2Message: int flags> = $i0;

        $i1 = r0.<org.apache.http.impl.auth.NTLMEngineImpl$Type2Message: int flags>;

        $i2 = $i1 & 1;

        if $i2 != 0 goto label1;

        $r7 = new org.apache.http.impl.auth.NTLMEngineException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NTLM type 2 message has flags that make no sense: ");

        $i6 = r0.<org.apache.http.impl.auth.NTLMEngineImpl$Type2Message: int flags>;

        $r10 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i6);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<org.apache.http.impl.auth.NTLMEngineException: void <init>(java.lang.String)>($r12);

        throw $r7;

     label1:
        r0.<org.apache.http.impl.auth.NTLMEngineImpl$Type2Message: java.lang.String target> = null;

        $i3 = virtualinvoke r0.<org.apache.http.impl.auth.NTLMEngineImpl$Type2Message: int getMessageLength()>();

        if $i3 < 20 goto label5;

        $r5 = virtualinvoke r0.<org.apache.http.impl.auth.NTLMEngineImpl$Type2Message: byte[] readSecurityBuffer(int)>(12);

        $i5 = lengthof $r5;

        if $i5 == 0 goto label5;

     label2:
        $r6 = new java.lang.String;

        specialinvoke $r6.<java.lang.String: void <init>(byte[],java.lang.String)>($r5, "UnicodeLittleUnmarked");

        r0.<org.apache.http.impl.auth.NTLMEngineImpl$Type2Message: java.lang.String target> = $r6;

     label3:
        goto label5;

     label4:
        $r13 := @caughtexception;

        $r14 = new org.apache.http.impl.auth.NTLMEngineException;

        $r15 = virtualinvoke $r13.<java.io.UnsupportedEncodingException: java.lang.String getMessage()>();

        specialinvoke $r14.<org.apache.http.impl.auth.NTLMEngineException: void <init>(java.lang.String,java.lang.Throwable)>($r15, $r13);

        throw $r14;

     label5:
        r0.<org.apache.http.impl.auth.NTLMEngineImpl$Type2Message: byte[] targetInfo> = null;

        $i7 = virtualinvoke r0.<org.apache.http.impl.auth.NTLMEngineImpl$Type2Message: int getMessageLength()>();

        if $i7 < 48 goto label6;

        $r4 = virtualinvoke r0.<org.apache.http.impl.auth.NTLMEngineImpl$Type2Message: byte[] readSecurityBuffer(int)>(40);

        $i4 = lengthof $r4;

        if $i4 == 0 goto label6;

        r0.<org.apache.http.impl.auth.NTLMEngineImpl$Type2Message: byte[] targetInfo> = $r4;

     label6:
        return;

        catch java.io.UnsupportedEncodingException from label2 to label3 with label4;
    }

    byte[] getChallenge()
    {
        byte[] $r1;
        org.apache.http.impl.auth.NTLMEngineImpl$Type2Message r0;

        r0 := @this: org.apache.http.impl.auth.NTLMEngineImpl$Type2Message;

        $r1 = r0.<org.apache.http.impl.auth.NTLMEngineImpl$Type2Message: byte[] challenge>;

        return $r1;
    }

    java.lang.String getTarget()
    {
        java.lang.String $r1;
        org.apache.http.impl.auth.NTLMEngineImpl$Type2Message r0;

        r0 := @this: org.apache.http.impl.auth.NTLMEngineImpl$Type2Message;

        $r1 = r0.<org.apache.http.impl.auth.NTLMEngineImpl$Type2Message: java.lang.String target>;

        return $r1;
    }

    byte[] getTargetInfo()
    {
        byte[] $r1;
        org.apache.http.impl.auth.NTLMEngineImpl$Type2Message r0;

        r0 := @this: org.apache.http.impl.auth.NTLMEngineImpl$Type2Message;

        $r1 = r0.<org.apache.http.impl.auth.NTLMEngineImpl$Type2Message: byte[] targetInfo>;

        return $r1;
    }

    int getFlags()
    {
        int $i0;
        org.apache.http.impl.auth.NTLMEngineImpl$Type2Message r0;

        r0 := @this: org.apache.http.impl.auth.NTLMEngineImpl$Type2Message;

        $i0 = r0.<org.apache.http.impl.auth.NTLMEngineImpl$Type2Message: int flags>;

        return $i0;
    }
}
