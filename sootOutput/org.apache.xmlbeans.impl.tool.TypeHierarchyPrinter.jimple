public class org.apache.xmlbeans.impl.tool.TypeHierarchyPrinter extends java.lang.Object
{

    public void <init>()
    {
        org.apache.xmlbeans.impl.tool.TypeHierarchyPrinter r0;

        r0 := @this: org.apache.xmlbeans.impl.tool.TypeHierarchyPrinter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void printUsage()
    {
        java.io.PrintStream $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;

        $r0 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("Prints the inheritance hierarchy of types defined in a schema.\n");

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("Usage: xsdtree [-noanon] [-nopvr] [-noupa] [-partial] [-license] schemafile.xsd*");

        $r2 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>("    -noanon - Don\'t include anonymous types in the tree.");

        $r3 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("    -noupa - do not enforce the unique particle attribution rule");

        $r4 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>("    -nopvr - do not enforce the particle valid (restriction) rule");

        $r5 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>("    -partial - Print only part of the hierarchy.");

        $r6 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>("    -license - prints license information");

        $r7 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>("    schemafile.xsd - File containing the schema for which to print a tree.");

        $r8 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r8.<java.io.PrintStream: void println()>();

        return;
    }

    public static void main(java.lang.String[]) throws java.lang.Exception
    {
        org.apache.xmlbeans.SchemaType[] $r47, $r91, $r93, $r95;
        org.apache.xmlbeans.SchemaType $r24, $r40, $r41, $r44, $r45, $r46, r97, r99;
        java.lang.Object[] $r19;
        java.lang.StringBuffer $r25, $r27, $r29, $r30, $r32, $r34, $r58, $r60, $r62, $r65, $r67, $r68, $r76, $r79, $r80, $r81;
        org.apache.xmlbeans.XmlException $r64;
        java.util.Collection r37, r98;
        org.apache.xmlbeans.impl.tool.CommandLine $r1;
        org.apache.xmlbeans.ResourceLoader $r53;
        java.util.HashSet $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, i14, $i15, i16, $i17;
        java.io.PrintStream $r28, $r49, $r51, $r59, $r66, $r71, $r73, $r77, $r88;
        org.apache.xmlbeans.XmlOptions $r22, $r54, $r56;
        java.lang.Object $r26, $r36, $r38, $r39, $r42, $r52, $r72;
        java.io.File[] $r15, $r16;
        java.util.Set $r3;
        java.lang.Exception $r75;
        org.apache.xmlbeans.XmlObject[] $r18, $r20, r83;
        java.util.ArrayList $r17, $r21, $r23, $r43, $r90;
        org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument $r57;
        java.lang.String $r4, $r5, $r6, $r8, $r9, $r11, $r12, $r13, $r14, $r31, $r33, $r35, $r61, $r63, $r69, $r74, $r82, $r86, $r100;
        org.apache.xmlbeans.SchemaTypeLoader r84;
        java.io.File $r55, $r78;
        boolean z0, z1, z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, z12, $z13, $z14, $z15;
        java.util.List $r48, $r92, $r94, $r96;
        org.apache.xmlbeans.SchemaTypeSystem $r85;
        java.lang.String[] r2, $r7, $r10;
        java.util.HashMap $r87, $r89;
        java.util.Iterator $r50, $r70;

        r2 := @parameter0: java.lang.String[];

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("h");

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("help");

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("usage");

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("license");

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("version");

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("noanon");

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("noupr");

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("noupa");

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("partial");

        $r1 = new org.apache.xmlbeans.impl.tool.CommandLine;

        $r3 = <java.util.Collections: java.util.Set EMPTY_SET>;

        specialinvoke $r1.<org.apache.xmlbeans.impl.tool.CommandLine: void <init>(java.lang.String[],java.util.Collection,java.util.Collection)>(r2, $r0, $r3);

        $r4 = virtualinvoke $r1.<org.apache.xmlbeans.impl.tool.CommandLine: java.lang.String getOpt(java.lang.String)>("h");

        if $r4 != null goto label01;

        $r5 = virtualinvoke $r1.<org.apache.xmlbeans.impl.tool.CommandLine: java.lang.String getOpt(java.lang.String)>("help");

        if $r5 != null goto label01;

        $r6 = virtualinvoke $r1.<org.apache.xmlbeans.impl.tool.CommandLine: java.lang.String getOpt(java.lang.String)>("usage");

        if $r6 == null goto label02;

     label01:
        staticinvoke <org.apache.xmlbeans.impl.tool.TypeHierarchyPrinter: void printUsage()>();

        staticinvoke <java.lang.System: void exit(int)>(0);

        return;

     label02:
        $r7 = virtualinvoke $r1.<org.apache.xmlbeans.impl.tool.CommandLine: java.lang.String[] getBadOpts()>();

        $i0 = lengthof $r7;

        if $i0 <= 0 goto label05;

        i13 = 0;

     label03:
        $i12 = lengthof $r7;

        if i13 >= $i12 goto label04;

        $r59 = <java.lang.System: java.io.PrintStream out>;

        $r58 = new java.lang.StringBuffer;

        specialinvoke $r58.<java.lang.StringBuffer: void <init>()>();

        $r60 = virtualinvoke $r58.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unrecognized option: ");

        $r61 = $r7[i13];

        $r62 = virtualinvoke $r60.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r61);

        $r63 = virtualinvoke $r62.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r59.<java.io.PrintStream: void println(java.lang.String)>($r63);

        i13 = i13 + 1;

        goto label03;

     label04:
        staticinvoke <org.apache.xmlbeans.impl.tool.TypeHierarchyPrinter: void printUsage()>();

        staticinvoke <java.lang.System: void exit(int)>(0);

        return;

     label05:
        $r8 = virtualinvoke $r1.<org.apache.xmlbeans.impl.tool.CommandLine: java.lang.String getOpt(java.lang.String)>("license");

        if $r8 == null goto label06;

        staticinvoke <org.apache.xmlbeans.impl.tool.CommandLine: void printLicense()>();

        staticinvoke <java.lang.System: void exit(int)>(0);

        return;

     label06:
        $r9 = virtualinvoke $r1.<org.apache.xmlbeans.impl.tool.CommandLine: java.lang.String getOpt(java.lang.String)>("version");

        if $r9 == null goto label07;

        staticinvoke <org.apache.xmlbeans.impl.tool.CommandLine: void printVersion()>();

        staticinvoke <java.lang.System: void exit(int)>(0);

        return;

     label07:
        $r10 = virtualinvoke $r1.<org.apache.xmlbeans.impl.tool.CommandLine: java.lang.String[] args()>();

        $i1 = lengthof $r10;

        if $i1 != 0 goto label08;

        staticinvoke <org.apache.xmlbeans.impl.tool.TypeHierarchyPrinter: void printUsage()>();

        return;

     label08:
        $r11 = virtualinvoke $r1.<org.apache.xmlbeans.impl.tool.CommandLine: java.lang.String getOpt(java.lang.String)>("noanon");

        if $r11 == null goto label09;

        $z11 = 1;

        goto label10;

     label09:
        $z11 = 0;

     label10:
        z12 = $z11;

        $r12 = virtualinvoke $r1.<org.apache.xmlbeans.impl.tool.CommandLine: java.lang.String getOpt(java.lang.String)>("nopvr");

        if $r12 == null goto label11;

        $z13 = 1;

        goto label12;

     label11:
        $z13 = 0;

     label12:
        z0 = $z13;

        $r13 = virtualinvoke $r1.<org.apache.xmlbeans.impl.tool.CommandLine: java.lang.String getOpt(java.lang.String)>("noupa");

        if $r13 == null goto label13;

        $z14 = 1;

        goto label14;

     label13:
        $z14 = 0;

     label14:
        z1 = $z14;

        $r14 = virtualinvoke $r1.<org.apache.xmlbeans.impl.tool.CommandLine: java.lang.String getOpt(java.lang.String)>("partial");

        if $r14 == null goto label15;

        $z15 = 1;

        goto label16;

     label15:
        $z15 = 0;

     label16:
        z2 = $z15;

        $r15 = virtualinvoke $r1.<org.apache.xmlbeans.impl.tool.CommandLine: java.io.File[] filesEndingWith(java.lang.String)>(".xsd");

        $r16 = virtualinvoke $r1.<org.apache.xmlbeans.impl.tool.CommandLine: java.io.File[] filesEndingWith(java.lang.String)>(".jar");

        $r17 = new java.util.ArrayList;

        specialinvoke $r17.<java.util.ArrayList: void <init>()>();

        i14 = 0;

     label17:
        $i15 = lengthof $r15;

        if i14 >= $i15 goto label22;

     label18:
        $r55 = $r15[i14];

        $r54 = new org.apache.xmlbeans.XmlOptions;

        specialinvoke $r54.<org.apache.xmlbeans.XmlOptions: void <init>()>();

        $r56 = virtualinvoke $r54.<org.apache.xmlbeans.XmlOptions: org.apache.xmlbeans.XmlOptions setLoadLineNumbers()>();

        $r57 = staticinvoke <org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Factory: org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument parse(java.io.File,org.apache.xmlbeans.XmlOptions)>($r55, $r56);

        interfaceinvoke $r17.<java.util.List: boolean add(java.lang.Object)>($r57);

     label19:
        goto label21;

     label20:
        $r75 := @caughtexception;

        $r77 = <java.lang.System: java.io.PrintStream err>;

        $r76 = new java.lang.StringBuffer;

        specialinvoke $r76.<java.lang.StringBuffer: void <init>()>();

        $r78 = $r15[i14];

        $r79 = virtualinvoke $r76.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r78);

        $r80 = virtualinvoke $r79.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" not loadable: ");

        $r81 = virtualinvoke $r80.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r75);

        $r82 = virtualinvoke $r81.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r77.<java.io.PrintStream: void println(java.lang.String)>($r82);

     label21:
        i14 = i14 + 1;

        goto label17;

     label22:
        $r18 = newarray (org.apache.xmlbeans.XmlObject)[0];

        $r19 = interfaceinvoke $r17.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r18);

        $r20 = (org.apache.xmlbeans.XmlObject[]) $r19;

        r83 = (org.apache.xmlbeans.XmlObject[]) $r20;

        r84 = null;

        $r21 = new java.util.ArrayList;

        specialinvoke $r21.<java.util.ArrayList: void <init>()>();

        $r22 = new org.apache.xmlbeans.XmlOptions;

        specialinvoke $r22.<org.apache.xmlbeans.XmlOptions: void <init>()>();

        virtualinvoke $r22.<org.apache.xmlbeans.XmlOptions: org.apache.xmlbeans.XmlOptions setErrorListener(java.util.Collection)>($r21);

        virtualinvoke $r22.<org.apache.xmlbeans.XmlOptions: org.apache.xmlbeans.XmlOptions setCompileDownloadUrls()>();

        if z0 == 0 goto label23;

        virtualinvoke $r22.<org.apache.xmlbeans.XmlOptions: org.apache.xmlbeans.XmlOptions setCompileNoPvrRule()>();

     label23:
        if z1 == 0 goto label24;

        virtualinvoke $r22.<org.apache.xmlbeans.XmlOptions: org.apache.xmlbeans.XmlOptions setCompileNoUpaRule()>();

     label24:
        if z2 == 0 goto label25;

        virtualinvoke $r22.<org.apache.xmlbeans.XmlOptions: void put(java.lang.Object)>("COMPILE_PARTIAL_TYPESYSTEM");

     label25:
        if $r16 == null goto label26;

        $i11 = lengthof $r16;

        if $i11 <= 0 goto label26;

        $r53 = staticinvoke <org.apache.xmlbeans.XmlBeans: org.apache.xmlbeans.ResourceLoader resourceLoaderForPath(java.io.File[])>($r16);

        r84 = staticinvoke <org.apache.xmlbeans.XmlBeans: org.apache.xmlbeans.SchemaTypeLoader typeLoaderForResource(org.apache.xmlbeans.ResourceLoader)>($r53);

     label26:
        $r85 = staticinvoke <org.apache.xmlbeans.XmlBeans: org.apache.xmlbeans.SchemaTypeSystem compileXsd(org.apache.xmlbeans.XmlObject[],org.apache.xmlbeans.SchemaTypeLoader,org.apache.xmlbeans.XmlOptions)>(r83, r84, $r22);

     label27:
        goto label34;

     label28:
        $r64 := @caughtexception;

        $r66 = <java.lang.System: java.io.PrintStream out>;

        $r65 = new java.lang.StringBuffer;

        specialinvoke $r65.<java.lang.StringBuffer: void <init>()>();

        $r67 = virtualinvoke $r65.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Schema invalid:");

        if z2 == 0 goto label29;

        $r86 = " couldn\'t recover from errors";

        goto label30;

     label29:
        $r86 = "";

     label30:
        $r68 = virtualinvoke $r67.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r86);

        $r69 = virtualinvoke $r68.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r66.<java.io.PrintStream: void println(java.lang.String)>($r69);

        $z9 = interfaceinvoke $r21.<java.util.Collection: boolean isEmpty()>();

        if $z9 == 0 goto label31;

        $r73 = <java.lang.System: java.io.PrintStream out>;

        $r74 = virtualinvoke $r64.<org.apache.xmlbeans.XmlException: java.lang.String getMessage()>();

        virtualinvoke $r73.<java.io.PrintStream: void println(java.lang.String)>($r74);

        goto label33;

     label31:
        $r70 = interfaceinvoke $r21.<java.util.Collection: java.util.Iterator iterator()>();

     label32:
        $z10 = interfaceinvoke $r70.<java.util.Iterator: boolean hasNext()>();

        if $z10 == 0 goto label33;

        $r71 = <java.lang.System: java.io.PrintStream out>;

        $r72 = interfaceinvoke $r70.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke $r71.<java.io.PrintStream: void println(java.lang.Object)>($r72);

        goto label32;

     label33:
        return;

     label34:
        if z2 == 0 goto label36;

        $z7 = interfaceinvoke $r21.<java.util.Collection: boolean isEmpty()>();

        if $z7 != 0 goto label36;

        $r49 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r49.<java.io.PrintStream: void println(java.lang.String)>("Schema invalid: partial schema type system recovered");

        $r50 = interfaceinvoke $r21.<java.util.Collection: java.util.Iterator iterator()>();

     label35:
        $z8 = interfaceinvoke $r50.<java.util.Iterator: boolean hasNext()>();

        if $z8 == 0 goto label36;

        $r51 = <java.lang.System: java.io.PrintStream out>;

        $r52 = interfaceinvoke $r50.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke $r51.<java.io.PrintStream: void println(java.lang.Object)>($r52);

        goto label35;

     label36:
        $r87 = new java.util.HashMap;

        specialinvoke $r87.<java.util.HashMap: void <init>()>();

        interfaceinvoke $r87.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("http://www.w3.org/XML/1998/namespace", "xml");

        interfaceinvoke $r87.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("http://www.w3.org/2001/XMLSchema", "xs");

        $r88 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r88.<java.io.PrintStream: void println(java.lang.String)>("xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"");

        $r89 = new java.util.HashMap;

        specialinvoke $r89.<java.util.HashMap: void <init>()>();

        $r90 = new java.util.ArrayList;

        specialinvoke $r90.<java.util.ArrayList: void <init>()>();

        $r91 = interfaceinvoke $r85.<org.apache.xmlbeans.SchemaTypeSystem: org.apache.xmlbeans.SchemaType[] documentTypes()>();

        $r92 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r91);

        interfaceinvoke $r90.<java.util.List: boolean addAll(java.util.Collection)>($r92);

        $r93 = interfaceinvoke $r85.<org.apache.xmlbeans.SchemaTypeSystem: org.apache.xmlbeans.SchemaType[] attributeTypes()>();

        $r94 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r93);

        interfaceinvoke $r90.<java.util.List: boolean addAll(java.util.Collection)>($r94);

        $r95 = interfaceinvoke $r85.<org.apache.xmlbeans.SchemaTypeSystem: org.apache.xmlbeans.SchemaType[] globalTypes()>();

        $r96 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r95);

        interfaceinvoke $r90.<java.util.List: boolean addAll(java.util.Collection)>($r96);

        i16 = 0;

     label37:
        $i17 = interfaceinvoke $r90.<java.util.List: int size()>();

        if i16 >= $i17 goto label42;

        $r39 = interfaceinvoke $r90.<java.util.List: java.lang.Object get(int)>(i16);

        r97 = (org.apache.xmlbeans.SchemaType) $r39;

        if z12 != 0 goto label38;

        $r47 = interfaceinvoke r97.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType[] getAnonymousTypes()>();

        $r48 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r47);

        interfaceinvoke $r90.<java.util.List: boolean addAll(java.util.Collection)>($r48);

     label38:
        $z4 = interfaceinvoke r97.<org.apache.xmlbeans.SchemaType: boolean isDocumentType()>();

        if $z4 != 0 goto label41;

        $z5 = interfaceinvoke r97.<org.apache.xmlbeans.SchemaType: boolean isAttributeType()>();

        if $z5 != 0 goto label41;

        $r40 = <org.apache.xmlbeans.XmlObject: org.apache.xmlbeans.SchemaType type>;

        if r97 != $r40 goto label39;

        goto label41;

     label39:
        staticinvoke <org.apache.xmlbeans.impl.tool.TypeHierarchyPrinter: void noteNamespace(java.util.Map,org.apache.xmlbeans.SchemaType)>($r87, r97);

        $r41 = interfaceinvoke r97.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType getBaseType()>();

        $r42 = interfaceinvoke $r89.<java.util.Map: java.lang.Object get(java.lang.Object)>($r41);

        r98 = (java.util.Collection) $r42;

        if r98 != null goto label40;

        $r43 = new java.util.ArrayList;

        specialinvoke $r43.<java.util.ArrayList: void <init>()>();

        r98 = $r43;

        $r44 = interfaceinvoke r97.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType getBaseType()>();

        interfaceinvoke $r89.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r44, $r43);

        $r45 = interfaceinvoke r97.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType getBaseType()>();

        $z6 = interfaceinvoke $r45.<org.apache.xmlbeans.SchemaType: boolean isBuiltinType()>();

        if $z6 == 0 goto label40;

        $r46 = interfaceinvoke r97.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType getBaseType()>();

        interfaceinvoke $r90.<java.util.List: boolean add(java.lang.Object)>($r46);

     label40:
        interfaceinvoke r98.<java.util.Collection: boolean add(java.lang.Object)>(r97);

     label41:
        i16 = i16 + 1;

        goto label37;

     label42:
        $r23 = new java.util.ArrayList;

        specialinvoke $r23.<java.util.ArrayList: void <init>()>();

        $r24 = <org.apache.xmlbeans.XmlObject: org.apache.xmlbeans.SchemaType type>;

        interfaceinvoke $r23.<java.util.List: boolean add(java.lang.Object)>($r24);

        $r25 = new java.lang.StringBuffer;

        specialinvoke $r25.<java.lang.StringBuffer: void <init>()>();

     label43:
        $z3 = interfaceinvoke $r23.<java.util.List: boolean isEmpty()>();

        if $z3 != 0 goto label49;

        $i2 = interfaceinvoke $r23.<java.util.List: int size()>();

        $i3 = $i2 - 1;

        $r26 = interfaceinvoke $r23.<java.util.List: java.lang.Object remove(int)>($i3);

        r99 = (org.apache.xmlbeans.SchemaType) $r26;

        if r99 != null goto label44;

        $i8 = virtualinvoke $r25.<java.lang.StringBuffer: int length()>();

        $i9 = $i8 - 2;

        $i10 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i9);

        virtualinvoke $r25.<java.lang.StringBuffer: void setLength(int)>($i10);

        goto label48;

     label44:
        $r28 = <java.lang.System: java.io.PrintStream out>;

        $r27 = new java.lang.StringBuffer;

        specialinvoke $r27.<java.lang.StringBuffer: void <init>()>();

        $r29 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r25);

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("+-");

        $r31 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String readable(org.apache.xmlbeans.SchemaType,java.util.Map)>(r99, $r87);

        $r32 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r31);

        $r33 = staticinvoke <org.apache.xmlbeans.impl.tool.TypeHierarchyPrinter: java.lang.String notes(org.apache.xmlbeans.SchemaType)>(r99);

        $r34 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r33);

        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r28.<java.io.PrintStream: void println(java.lang.String)>($r35);

        $r36 = interfaceinvoke $r89.<java.util.Map: java.lang.Object get(java.lang.Object)>(r99);

        r37 = (java.util.Collection) $r36;

        if r37 == null goto label48;

        $i4 = interfaceinvoke r37.<java.util.Collection: int size()>();

        if $i4 <= 0 goto label48;

        $i5 = interfaceinvoke $r23.<java.util.List: int size()>();

        if $i5 == 0 goto label45;

        $i6 = interfaceinvoke $r23.<java.util.List: int size()>();

        $i7 = $i6 - 1;

        $r38 = interfaceinvoke $r23.<java.util.List: java.lang.Object get(int)>($i7);

        if $r38 != null goto label46;

     label45:
        $r100 = "  ";

        goto label47;

     label46:
        $r100 = "| ";

     label47:
        virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r100);

        interfaceinvoke $r23.<java.util.List: boolean add(java.lang.Object)>(null);

        interfaceinvoke $r23.<java.util.List: boolean addAll(java.util.Collection)>(r37);

     label48:
        goto label43;

     label49:
        return;

        catch java.lang.Exception from label18 to label19 with label20;
        catch org.apache.xmlbeans.XmlException from label26 to label27 with label28;
    }

    private static java.lang.String notes(org.apache.xmlbeans.SchemaType)
    {
        org.apache.xmlbeans.XmlAnySimpleType[] $r1;
        int $i0, $i1;
        org.apache.xmlbeans.SchemaType r0;
        boolean $z0, $z1;

        r0 := @parameter0: org.apache.xmlbeans.SchemaType;

        $z0 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaType: boolean isBuiltinType()>();

        if $z0 == 0 goto label1;

        return " (builtin)";

     label1:
        $z1 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaType: boolean isSimpleType()>();

        if $z1 == 0 goto label6;

        $i1 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaType: int getSimpleVariety()>();

        lookupswitch($i1)
        {
            case 2: goto label3;
            case 3: goto label2;
            default: goto label4;
        };

     label2:
        return " (list)";

     label3:
        return " (union)";

     label4:
        $r1 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.XmlAnySimpleType[] getEnumerationValues()>();

        if $r1 == null goto label5;

        return " (enumeration)";

     label5:
        return "";

     label6:
        $i0 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaType: int getContentType()>();

        lookupswitch($i0)
        {
            case 2: goto label8;
            case 4: goto label7;
            default: goto label9;
        };

     label7:
        return " (mixed)";

     label8:
        return " (complex)";

     label9:
        return "";
    }

    private static void noteNamespace(java.util.Map, org.apache.xmlbeans.SchemaType)
    {
        java.lang.StringBuffer $r4, $r6, $r7, $r8, $r9, $r10, $r12, $r13, $r14;
        java.util.Map r2;
        int i0;
        java.lang.String $r1, $r3, $r11, r15;
        org.apache.xmlbeans.SchemaType r0;
        boolean $z0, $z1, $z2;
        java.io.PrintStream $r5;

        r2 := @parameter0: java.util.Map;

        r0 := @parameter1: org.apache.xmlbeans.SchemaType;

        $r1 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String namespace(org.apache.xmlbeans.SchemaType)>(r0);

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 != 0 goto label1;

        $z1 = interfaceinvoke r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

        if $z1 == 0 goto label2;

     label1:
        return;

     label2:
        $r3 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String suggestPrefix(java.lang.String)>($r1);

        r15 = $r3;

        i0 = 0;

     label3:
        $z2 = interfaceinvoke r2.<java.util.Map: boolean containsValue(java.lang.Object)>(r15);

        if $z2 == 0 goto label4;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        i0 = i0 + 1;

        goto label3;

     label4:
        interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, r15);

        $r5 = <java.lang.System: java.io.PrintStream out>;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("xmlns:");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r15);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("=\"");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r11);

        return;
    }
}
