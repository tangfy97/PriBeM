public class groovyjarjarantlr.PythonCodeGenerator extends groovyjarjarantlr.CodeGenerator
{
    protected int syntacticPredLevel;
    protected boolean genAST;
    protected boolean saveText;
    java.lang.String labeledElementType;
    java.lang.String labeledElementASTType;
    java.lang.String labeledElementInit;
    java.lang.String commonExtraArgs;
    java.lang.String commonExtraParams;
    java.lang.String commonLocalVars;
    java.lang.String lt1Value;
    java.lang.String exceptionThrown;
    java.lang.String throwNoViable;
    public static final java.lang.String initHeaderAction;
    public static final java.lang.String mainHeaderAction;
    java.lang.String lexerClassName;
    java.lang.String parserClassName;
    java.lang.String treeWalkerClassName;
    groovyjarjarantlr.RuleBlock currentRule;
    java.lang.String currentASTResult;
    java.util.Hashtable treeVariableMap;
    java.util.Hashtable declaredASTVariables;
    int astVarNumber;
    protected static final java.lang.String NONUNIQUE;
    public static final int caseSizeThreshold;
    private groovyjarjarantlr.collections.impl.Vector semPreds;

    protected void printTabs()
    {
        java.io.PrintWriter $r1;
        int $i0, i1;
        groovyjarjarantlr.PythonCodeGenerator r0;

        r0 := @this: groovyjarjarantlr.PythonCodeGenerator;

        i1 = 0;

     label1:
        $i0 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        if i1 >= $i0 goto label2;

        $r1 = r0.<groovyjarjarantlr.PythonCodeGenerator: java.io.PrintWriter currentOutput>;

        virtualinvoke $r1.<java.io.PrintWriter: void print(java.lang.String)>("    ");

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public void <init>()
    {
        groovyjarjarantlr.PythonCodeGenerator r0;
        java.util.Hashtable $r1, $r2;
        groovyjarjarantlr.PythonCharFormatter $r3;

        r0 := @this: groovyjarjarantlr.PythonCodeGenerator;

        specialinvoke r0.<groovyjarjarantlr.CodeGenerator: void <init>()>();

        r0.<groovyjarjarantlr.PythonCodeGenerator: int syntacticPredLevel> = 0;

        r0.<groovyjarjarantlr.PythonCodeGenerator: boolean genAST> = 0;

        r0.<groovyjarjarantlr.PythonCodeGenerator: boolean saveText> = 0;

        $r1 = new java.util.Hashtable;

        specialinvoke $r1.<java.util.Hashtable: void <init>()>();

        r0.<groovyjarjarantlr.PythonCodeGenerator: java.util.Hashtable treeVariableMap> = $r1;

        $r2 = new java.util.Hashtable;

        specialinvoke $r2.<java.util.Hashtable: void <init>()>();

        r0.<groovyjarjarantlr.PythonCodeGenerator: java.util.Hashtable declaredASTVariables> = $r2;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int astVarNumber> = 1;

        $r3 = new groovyjarjarantlr.PythonCharFormatter;

        specialinvoke $r3.<groovyjarjarantlr.PythonCharFormatter: void <init>()>();

        r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.CharFormatter charFormatter> = $r3;

        r0.<groovyjarjarantlr.PythonCodeGenerator: boolean DEBUG_CODE_GENERATOR> = 1;

        return;
    }

    protected int addSemPred(java.lang.String)
    {
        int $i0, $i1;
        java.lang.String r1;
        groovyjarjarantlr.PythonCodeGenerator r0;
        groovyjarjarantlr.collections.impl.Vector $r2, $r3;

        r0 := @this: groovyjarjarantlr.PythonCodeGenerator;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.collections.impl.Vector semPreds>;

        virtualinvoke $r2.<groovyjarjarantlr.collections.impl.Vector: void appendElement(java.lang.Object)>(r1);

        $r3 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.collections.impl.Vector semPreds>;

        $i0 = virtualinvoke $r3.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        $i1 = $i0 - 1;

        return $i1;
    }

    public void exitIfError()
    {
        groovyjarjarantlr.Tool $r1, $r2;
        groovyjarjarantlr.PythonCodeGenerator r0;
        boolean $z0;

        r0 := @this: groovyjarjarantlr.PythonCodeGenerator;

        $r1 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $z0 = virtualinvoke $r1.<groovyjarjarantlr.Tool: boolean hasError()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        virtualinvoke $r2.<groovyjarjarantlr.Tool: void fatalError(java.lang.String)>("Exiting due to errors.");

     label1:
        return;
    }

    protected void checkCurrentOutputStream()
    {
        java.io.PrintWriter $r1;
        groovyjarjarantlr.PythonCodeGenerator r0;
        java.lang.NullPointerException $r2;
        java.lang.Exception $r3;

        r0 := @this: groovyjarjarantlr.PythonCodeGenerator;

     label1:
        $r1 = r0.<groovyjarjarantlr.PythonCodeGenerator: java.io.PrintWriter currentOutput>;

        if $r1 != null goto label2;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();

        throw $r2;

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        staticinvoke <groovyjarjarantlr.Utils: void error(java.lang.String)>("current output is not set");

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    protected java.lang.String extractIdOfAction(java.lang.String, int, int)
    {
        int i0, i1;
        java.lang.String $r1, $r2, r3;
        groovyjarjarantlr.PythonCodeGenerator r0;

        r0 := @this: groovyjarjarantlr.PythonCodeGenerator;

        r3 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String removeAssignmentFromDeclaration(java.lang.String)>(r3);

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String trim()>();

        return $r2;
    }

    protected java.lang.String extractTypeOfAction(java.lang.String, int, int)
    {
        int i0, i1;
        java.lang.String r1;
        groovyjarjarantlr.PythonCodeGenerator r0;

        r0 := @this: groovyjarjarantlr.PythonCodeGenerator;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        return "";
    }

    protected void flushTokens()
    {
        java.io.PrintWriter r1;
        java.util.Enumeration $r4;
        groovyjarjarantlr.PythonCodeGenerator r0;
        java.lang.Exception $r7;
        java.lang.Object $r5;
        groovyjarjarantlr.DefineGrammarSymbols $r2;
        groovyjarjarantlr.TokenManager r6;
        java.util.Hashtable $r3;
        boolean $z0, $z1, z2;

        r0 := @this: groovyjarjarantlr.PythonCodeGenerator;

     label1:
        z2 = 0;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void checkCurrentOutputStream()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("");

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("### import antlr.Token ");

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("from antlr import Token");

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("### >>>The Known Token Types <<<");

        r1 = r0.<groovyjarjarantlr.PythonCodeGenerator: java.io.PrintWriter currentOutput>;

        $r2 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.DefineGrammarSymbols behavior>;

        $r3 = $r2.<groovyjarjarantlr.DefineGrammarSymbols: java.util.Hashtable tokenManagers>;

        $r4 = virtualinvoke $r3.<java.util.Hashtable: java.util.Enumeration elements()>();

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label5;

        $r5 = interfaceinvoke $r4.<java.util.Enumeration: java.lang.Object nextElement()>();

        r6 = (groovyjarjarantlr.TokenManager) $r5;

        $z1 = interfaceinvoke r6.<groovyjarjarantlr.TokenManager: boolean isReadOnly()>();

        if $z1 != 0 goto label4;

        if z2 != 0 goto label3;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void genTokenTypes(groovyjarjarantlr.TokenManager)>(r6);

        z2 = 1;

     label3:
        r0.<groovyjarjarantlr.PythonCodeGenerator: java.io.PrintWriter currentOutput> = r1;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void genTokenInterchange(groovyjarjarantlr.TokenManager)>(r6);

        r0.<groovyjarjarantlr.PythonCodeGenerator: java.io.PrintWriter currentOutput> = r1;

     label4:
        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void exitIfError()>();

        goto label2;

     label5:
        goto label7;

     label6:
        $r7 := @caughtexception;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void exitIfError()>();

     label7:
        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void checkCurrentOutputStream()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("");

        return;

        catch java.lang.Exception from label1 to label5 with label6;
    }

    public void gen()
    {
        java.util.Enumeration $r3;
        groovyjarjarantlr.LLkGrammarAnalyzer $r6, $r7;
        java.io.IOException $r8;
        groovyjarjarantlr.PythonCodeGenerator r0;
        groovyjarjarantlr.Grammar r5;
        groovyjarjarantlr.Tool $r9;
        java.lang.Object $r4;
        groovyjarjarantlr.DefineGrammarSymbols $r1;
        java.util.Hashtable $r2;
        boolean $z0;

        r0 := @this: groovyjarjarantlr.PythonCodeGenerator;

     label1:
        $r1 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.DefineGrammarSymbols behavior>;

        $r2 = $r1.<groovyjarjarantlr.DefineGrammarSymbols: java.util.Hashtable grammars>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.util.Enumeration elements()>();

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Enumeration: java.lang.Object nextElement()>();

        r5 = (groovyjarjarantlr.Grammar) $r4;

        $r6 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.LLkGrammarAnalyzer analyzer>;

        virtualinvoke r5.<groovyjarjarantlr.Grammar: void setGrammarAnalyzer(groovyjarjarantlr.LLkGrammarAnalyzer)>($r6);

        virtualinvoke r5.<groovyjarjarantlr.Grammar: void setCodeGenerator(groovyjarjarantlr.CodeGenerator)>(r0);

        $r7 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.LLkGrammarAnalyzer analyzer>;

        interfaceinvoke $r7.<groovyjarjarantlr.LLkGrammarAnalyzer: void setGrammar(groovyjarjarantlr.Grammar)>(r5);

        specialinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void setupGrammarParameters(groovyjarjarantlr.Grammar)>(r5);

        virtualinvoke r5.<groovyjarjarantlr.Grammar: void generate()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void exitIfError()>();

        goto label2;

     label3:
        goto label5;

     label4:
        $r8 := @caughtexception;

        $r9 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        virtualinvoke $r9.<groovyjarjarantlr.Tool: void reportException(java.lang.Exception,java.lang.String)>($r8, null);

     label5:
        return;

        catch java.io.IOException from label1 to label3 with label4;
    }

    public void gen(groovyjarjarantlr.ActionElement)
    {
        groovyjarjarantlr.Grammar $r2, $r8;
        boolean $z0, $z1, $z2, $z3;
        groovyjarjarantlr.RuleBlock $r5;
        groovyjarjarantlr.PythonCodeGenerator r1;
        java.lang.StringBuffer $r9, $r10, $r12, $r13, $r15, $r16, $r18, $r19, $r21, $r22, $r24, $r25, $r27, $r28, $r30, $r31, $r33, $r35, $r37, $r38;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        groovyjarjarantlr.ActionElement r0;
        groovyjarjarantlr.ActionTransInfo $r3;
        java.lang.String $r4, $r6, $r7, $r11, $r14, $r17, $r20, $r23, $r26, $r29, $r32, $r34, $r36, $r39, $r40;

        r1 := @this: groovyjarjarantlr.PythonCodeGenerator;

        r0 := @parameter0: groovyjarjarantlr.ActionElement;

        $z0 = r0.<groovyjarjarantlr.ActionElement: boolean isSemPred>;

        if $z0 == 0 goto label1;

        $r40 = r0.<groovyjarjarantlr.ActionElement: java.lang.String actionText>;

        $i13 = r0.<groovyjarjarantlr.ActionElement: int line>;

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void genSemPred(java.lang.String,int)>($r40, $i13);

        goto label5;

     label1:
        $r2 = r1.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z1 = $r2.<groovyjarjarantlr.Grammar: boolean hasSyntacticPredicate>;

        if $z1 == 0 goto label2;

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("if not self.inputState.guessing:");

        $i11 = r1.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i12 = $i11 + 1;

        r1.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i12;

     label2:
        $r3 = new groovyjarjarantlr.ActionTransInfo;

        specialinvoke $r3.<groovyjarjarantlr.ActionTransInfo: void <init>()>();

        $r4 = r0.<groovyjarjarantlr.ActionElement: java.lang.String actionText>;

        $i0 = virtualinvoke r0.<groovyjarjarantlr.ActionElement: int getLine()>();

        $r5 = r1.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.RuleBlock currentRule>;

        $r6 = virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String processActionForSpecialSymbols(java.lang.String,int,groovyjarjarantlr.RuleBlock,groovyjarjarantlr.ActionTransInfo)>($r4, $i0, $r5, $r3);

        $r7 = $r3.<groovyjarjarantlr.ActionTransInfo: java.lang.String refRuleRoot>;

        if $r7 == null goto label3;

        $r35 = new java.lang.StringBuffer;

        specialinvoke $r35.<java.lang.StringBuffer: void <init>()>();

        $r36 = $r3.<groovyjarjarantlr.ActionTransInfo: java.lang.String refRuleRoot>;

        $r37 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r36);

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = currentAST.root");

        $r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r39);

     label3:
        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void printAction(java.lang.String)>($r6);

        $z2 = $r3.<groovyjarjarantlr.ActionTransInfo: boolean assignToRoot>;

        if $z2 == 0 goto label4;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("currentAST.root = ");

        $r11 = $r3.<groovyjarjarantlr.ActionTransInfo: java.lang.String refRuleRoot>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r14);

        $r15 = new java.lang.StringBuffer;

        specialinvoke $r15.<java.lang.StringBuffer: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("if (");

        $r17 = $r3.<groovyjarjarantlr.ActionTransInfo: java.lang.String refRuleRoot>;

        $r18 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" != None) and (");

        $r20 = $r3.<groovyjarjarantlr.ActionTransInfo: java.lang.String refRuleRoot>;

        $r21 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".getFirstChild() != None):");

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r23);

        $i3 = r1.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i4 = $i3 + 1;

        r1.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i4;

        $r24 = new java.lang.StringBuffer;

        specialinvoke $r24.<java.lang.StringBuffer: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("currentAST.child = ");

        $r26 = $r3.<groovyjarjarantlr.ActionTransInfo: java.lang.String refRuleRoot>;

        $r27 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".getFirstChild()");

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r29);

        $i5 = r1.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i6 = $i5 - 1;

        r1.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i6;

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("else:");

        $i7 = r1.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i8 = $i7 + 1;

        r1.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i8;

        $r30 = new java.lang.StringBuffer;

        specialinvoke $r30.<java.lang.StringBuffer: void <init>()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("currentAST.child = ");

        $r32 = $r3.<groovyjarjarantlr.ActionTransInfo: java.lang.String refRuleRoot>;

        $r33 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r32);

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r34);

        $i9 = r1.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i10 = $i9 - 1;

        r1.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i10;

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("currentAST.advanceChildToEnd()");

     label4:
        $r8 = r1.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z3 = $r8.<groovyjarjarantlr.Grammar: boolean hasSyntacticPredicate>;

        if $z3 == 0 goto label5;

        $i1 = r1.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i2 = $i1 - 1;

        r1.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i2;

     label5:
        return;
    }

    public void gen(groovyjarjarantlr.AlternativeBlock)
    {
        groovyjarjarantlr.AlternativeBlock r1;
        groovyjarjarantlr.LLkGrammarAnalyzer $r4;
        groovyjarjarantlr.Grammar $r3;
        groovyjarjarantlr.PythonBlockFinishingInfo $r5;
        java.lang.StringBuffer $r8, $r10, $r11, $r12;
        int $i0;
        java.lang.String $r2, $r6, $r7, $r13, $r14;
        boolean $z0;
        java.io.PrintStream $r9;
        groovyjarjarantlr.PythonCodeGenerator r0;

        r0 := @this: groovyjarjarantlr.PythonCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.AlternativeBlock;

        $z0 = r0.<groovyjarjarantlr.PythonCodeGenerator: boolean DEBUG_CODE_GENERATOR>;

        if $z0 == 0 goto label1;

        $r9 = <java.lang.System: java.io.PrintStream out>;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("gen(");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r13);

     label1:
        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void genBlockPreamble(groovyjarjarantlr.AlternativeBlock)>(r1);

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void genBlockInitAction(groovyjarjarantlr.AlternativeBlock)>(r1);

        $r14 = r0.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String currentASTResult>;

        $r2 = virtualinvoke r1.<groovyjarjarantlr.AlternativeBlock: java.lang.String getLabel()>();

        if $r2 == null goto label2;

        $r7 = virtualinvoke r1.<groovyjarjarantlr.AlternativeBlock: java.lang.String getLabel()>();

        r0.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String currentASTResult> = $r7;

     label2:
        $r3 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r4 = $r3.<groovyjarjarantlr.Grammar: groovyjarjarantlr.LLkGrammarAnalyzer theLLkAnalyzer>;

        interfaceinvoke $r4.<groovyjarjarantlr.LLkGrammarAnalyzer: boolean deterministic(groovyjarjarantlr.AlternativeBlock)>(r1);

        $i0 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $r5 = virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.PythonBlockFinishingInfo genCommonBlock(groovyjarjarantlr.AlternativeBlock,boolean)>(r1, 1);

        $r6 = r0.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String throwNoViable>;

        specialinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void genBlockFinish(groovyjarjarantlr.PythonBlockFinishingInfo,java.lang.String)>($r5, $r6);

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i0;

        r0.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String currentASTResult> = $r14;

        return;
    }

    public void gen(groovyjarjarantlr.BlockEndElement)
    {
        java.io.PrintStream $r2;
        groovyjarjarantlr.BlockEndElement r4;
        groovyjarjarantlr.PythonCodeGenerator r0;
        java.lang.StringBuffer $r1, $r3, $r5, $r6;
        java.lang.String $r7;
        boolean $z0;

        r0 := @this: groovyjarjarantlr.PythonCodeGenerator;

        r4 := @parameter0: groovyjarjarantlr.BlockEndElement;

        $z0 = r0.<groovyjarjarantlr.PythonCodeGenerator: boolean DEBUG_CODE_GENERATOR>;

        if $z0 == 0 goto label1;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("genRuleEnd(");

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r7);

     label1:
        return;
    }

    public void gen(groovyjarjarantlr.CharLiteralElement)
    {
        groovyjarjarantlr.CharLiteralElement r1;
        java.lang.StringBuffer $r3, $r5, $r6, $r8, $r10, $r12, $r13, $r14;
        int $i0;
        java.lang.String $r2, $r4, $r7, $r9, $r15;
        boolean $z0, $z1, $z2, $z3;
        java.io.PrintStream $r11;
        groovyjarjarantlr.PythonCodeGenerator r0;

        r0 := @this: groovyjarjarantlr.PythonCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.CharLiteralElement;

        $z0 = r0.<groovyjarjarantlr.PythonCodeGenerator: boolean DEBUG_CODE_GENERATOR>;

        if $z0 == 0 goto label1;

        $r11 = <java.lang.System: java.io.PrintStream out>;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("genChar(");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>($r15);

     label1:
        $r2 = virtualinvoke r1.<groovyjarjarantlr.CharLiteralElement: java.lang.String getLabel()>();

        if $r2 == null goto label2;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke r1.<groovyjarjarantlr.CharLiteralElement: java.lang.String getLabel()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = ");

        $r7 = r0.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String lt1Value>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r9);

     label2:
        $z2 = r0.<groovyjarjarantlr.PythonCodeGenerator: boolean saveText>;

        $z1 = r0.<groovyjarjarantlr.PythonCodeGenerator: boolean saveText>;

        if $z1 == 0 goto label3;

        $i0 = virtualinvoke r1.<groovyjarjarantlr.CharLiteralElement: int getAutoGenType()>();

        if $i0 != 1 goto label3;

        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        r0.<groovyjarjarantlr.PythonCodeGenerator: boolean saveText> = $z3;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void genMatch(groovyjarjarantlr.GrammarAtom)>(r1);

        r0.<groovyjarjarantlr.PythonCodeGenerator: boolean saveText> = $z2;

        return;
    }

    java.lang.String toString(boolean)
    {
        java.lang.String r1;
        groovyjarjarantlr.PythonCodeGenerator r0;
        boolean z0;

        r0 := @this: groovyjarjarantlr.PythonCodeGenerator;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        r1 = "True";

        goto label2;

     label1:
        r1 = "False";

     label2:
        return r1;
    }

    public void gen(groovyjarjarantlr.CharRangeElement)
    {
        groovyjarjarantlr.CharRangeElement r0;
        groovyjarjarantlr.Grammar $r19;
        java.lang.StringBuffer $r3, $r4, $r6, $r7, $r9, $r10, $r12, $r14, $r15, $r17;
        int $i0, $i1;
        java.lang.String $r1, $r5, $r8, $r11, $r13, $r16, $r18;
        boolean z0, $z1, $z2, $z4, $z5;
        groovyjarjarantlr.PythonCodeGenerator r2;

        r2 := @this: groovyjarjarantlr.PythonCodeGenerator;

        r0 := @parameter0: groovyjarjarantlr.CharRangeElement;

        $r1 = virtualinvoke r0.<groovyjarjarantlr.CharRangeElement: java.lang.String getLabel()>();

        if $r1 == null goto label1;

        $i1 = r2.<groovyjarjarantlr.PythonCodeGenerator: int syntacticPredLevel>;

        if $i1 != 0 goto label1;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke r0.<groovyjarjarantlr.CharRangeElement: java.lang.String getLabel()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = ");

        $r16 = r2.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String lt1Value>;

        $r17 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r2.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r18);

     label1:
        $r19 = r2.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z2 = $r19 instanceof groovyjarjarantlr.LexerGrammar;

        if $z2 == 0 goto label3;

        $z1 = r2.<groovyjarjarantlr.PythonCodeGenerator: boolean saveText>;

        if $z1 == 0 goto label2;

        $i0 = virtualinvoke r0.<groovyjarjarantlr.CharRangeElement: int getAutoGenType()>();

        if $i0 != 3 goto label3;

     label2:
        $z5 = 1;

        $z4 = 1;

        goto label4;

     label3:
        $z5 = 0;

        $z4 = 0;

     label4:
        z0 = $z4;

        if $z5 == 0 goto label5;

        virtualinvoke r2.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("_saveIndex = self.text.length()");

     label5:
        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("self.matchRange(u");

        $r5 = r0.<groovyjarjarantlr.CharRangeElement: java.lang.String beginText>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", u");

        $r8 = r0.<groovyjarjarantlr.CharRangeElement: java.lang.String endText>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r2.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r11);

        if z0 == 0 goto label6;

        virtualinvoke r2.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("self.text.setLength(_saveIndex)");

     label6:
        return;
    }

    public void gen(groovyjarjarantlr.LexerGrammar) throws java.io.IOException
    {
        java.util.Enumeration $r49, $r61, $r90;
        groovyjarjarantlr.PythonCodeGenerator r1;
        java.lang.StringBuffer $r13, $r16, $r22, $r24, $r25, $r26, $r27, $r31, $r32, $r35, $r37, $r40, $r42, $r43, $r64, $r67, $r68, $r75, $r77, $r78, $r79, $r96, $r97, $r98, $r99, $r100, $r101, $r102;
        groovyjarjarantlr.DefineGrammarSymbols $r5;
        groovyjarjarantlr.StringLiteralSymbol r92;
        groovyjarjarantlr.Grammar $r2, $r3, $r7, $r10, $r14, $r17, $r20, $r29, $r45, $r46, $r47, $r50, $r51, $r55, $r59, $r71, $r83, $r88;
        groovyjarjarantlr.Token $r8, $r84;
        groovyjarjarantlr.TokenSymbol $r73;
        groovyjarjarantlr.LexerGrammar r0, $r52;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i21, i22, $i23;
        java.lang.Object $r19, $r57, $r62, $r70;
        groovyjarjarantlr.TokenManager $r72, $r89;
        groovyjarjarantlr.collections.impl.Vector $r48, $r54, $r60, $r95;
        java.io.PrintWriter $r56;
        groovyjarjarantlr.GrammarSymbol r93;
        groovyjarjarantlr.Tool $r85;
        java.lang.String $r4, $r6, $r9, $r11, $r15, $r23, $r28, $r33, $r36, $r38, $r41, $r44, $r58, $r66, $r69, $r76, $r80, $r81, $r82, r87, r91;
        groovyjarjarantlr.RuleSymbol $r65, r94;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        groovyjarjarantlr.collections.impl.BitSet $r53;
        java.util.Hashtable $r18;
        char $c20;

        r1 := @this: groovyjarjarantlr.PythonCodeGenerator;

        r0 := @parameter0: groovyjarjarantlr.LexerGrammar;

        $z0 = r0.<groovyjarjarantlr.LexerGrammar: boolean debuggingOutput>;

        if $z0 == 0 goto label01;

        $r95 = new groovyjarjarantlr.collections.impl.Vector;

        specialinvoke $r95.<groovyjarjarantlr.collections.impl.Vector: void <init>()>();

        r1.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.collections.impl.Vector semPreds> = $r95;

     label01:
        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void setGrammar(groovyjarjarantlr.Grammar)>(r0);

        $r2 = r1.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z1 = $r2 instanceof groovyjarjarantlr.LexerGrammar;

        if $z1 != 0 goto label02;

        $r85 = r1.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        virtualinvoke $r85.<groovyjarjarantlr.Tool: void panic(java.lang.String)>("Internal error generating lexer");

     label02:
        $r3 = r1.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r4 = virtualinvoke $r3.<groovyjarjarantlr.Grammar: java.lang.String getClassName()>();

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void setupOutput(java.lang.String)>($r4);

        r1.<groovyjarjarantlr.PythonCodeGenerator: boolean genAST> = 0;

        r1.<groovyjarjarantlr.PythonCodeGenerator: boolean saveText> = 1;

        r1.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = 0;

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void genHeader()>();

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("### import antlr and other modules ..");

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("import sys");

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("import antlr");

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("");

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("version = sys.version.split()[0]");

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("if version < \'2.2.1\':");

        $i0 = r1.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i1 = $i0 + 1;

        r1.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i1;

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("False = 0");

        $i2 = r1.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i3 = $i2 - 1;

        r1.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i3;

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("if version < \'2.3\':");

        $i4 = r1.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i5 = $i4 + 1;

        r1.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i5;

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("True = not False");

        $i6 = r1.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i7 = $i6 - 1;

        r1.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i7;

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("### header action >>> ");

        $r5 = r1.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.DefineGrammarSymbols behavior>;

        $r6 = virtualinvoke $r5.<groovyjarjarantlr.DefineGrammarSymbols: java.lang.String getHeaderAction(java.lang.String)>("");

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void printActionCode(java.lang.String,int)>($r6, 0);

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("### header action <<< ");

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("### preamble action >>> ");

        $r7 = r1.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r8 = $r7.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Token preambleAction>;

        $r9 = virtualinvoke $r8.<groovyjarjarantlr.Token: java.lang.String getText()>();

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void printActionCode(java.lang.String,int)>($r9, 0);

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("### preamble action <<< ");

        $r10 = r1.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r11 = $r10.<groovyjarjarantlr.Grammar: java.lang.String superClass>;

        if $r11 == null goto label03;

        $r83 = r1.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        r87 = $r83.<groovyjarjarantlr.Grammar: java.lang.String superClass>;

        goto label04;

     label03:
        $r96 = new java.lang.StringBuffer;

        specialinvoke $r96.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r96.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("antlr.");

        $r14 = r1.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r15 = virtualinvoke $r14.<groovyjarjarantlr.Grammar: java.lang.String getSuperClass()>();

        $r16 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        r87 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

     label04:
        $r17 = r1.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r18 = $r17.<groovyjarjarantlr.Grammar: java.util.Hashtable options>;

        $r19 = virtualinvoke $r18.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>("classHeaderPrefix");

        $r84 = (groovyjarjarantlr.Token) $r19;

        if $r84 == null goto label05;

        $r81 = virtualinvoke $r84.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r82 = staticinvoke <groovyjarjarantlr.StringUtils: java.lang.String stripFrontBack(java.lang.String,java.lang.String,java.lang.String)>($r81, "\"", "\"");

        if $r82 == null goto label05;

     label05:
        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("### >>>The Literals<<<");

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("literals = {}");

        $r88 = r1.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r89 = $r88.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager>;

        $r90 = interfaceinvoke $r89.<groovyjarjarantlr.TokenManager: java.util.Enumeration getTokenSymbolKeys()>();

     label06:
        $z9 = interfaceinvoke $r90.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z9 == 0 goto label08;

        $r70 = interfaceinvoke $r90.<java.util.Enumeration: java.lang.Object nextElement()>();

        r91 = (java.lang.String) $r70;

        $c20 = virtualinvoke r91.<java.lang.String: char charAt(int)>(0);

        $i23 = (int) $c20;

        if $i23 == 34 goto label07;

        goto label06;

     label07:
        $r71 = r1.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r72 = $r71.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager>;

        $r73 = interfaceinvoke $r72.<groovyjarjarantlr.TokenManager: groovyjarjarantlr.TokenSymbol getTokenSymbol(java.lang.String)>(r91);

        $z8 = $r73 instanceof groovyjarjarantlr.StringLiteralSymbol;

        if $z8 == 0 goto label06;

        r92 = (groovyjarjarantlr.StringLiteralSymbol) $r73;

        $r97 = new java.lang.StringBuffer;

        specialinvoke $r97.<java.lang.StringBuffer: void <init>()>();

        $r75 = virtualinvoke $r97.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("literals[u");

        $r76 = virtualinvoke r92.<groovyjarjarantlr.StringLiteralSymbol: java.lang.String getId()>();

        $r77 = virtualinvoke $r75.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r76);

        $r78 = virtualinvoke $r77.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] = ");

        $i21 = virtualinvoke r92.<groovyjarjarantlr.StringLiteralSymbol: int getTokenType()>();

        $r79 = virtualinvoke $r78.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i21);

        $r80 = virtualinvoke $r79.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r80);

        goto label06;

     label08:
        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("");

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void flushTokens()>();

        $r20 = r1.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void genJavadocComment(groovyjarjarantlr.Grammar)>($r20);

        $r98 = new java.lang.StringBuffer;

        specialinvoke $r98.<java.lang.StringBuffer: void <init>()>();

        $r22 = virtualinvoke $r98.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("class ");

        $r23 = r1.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String lexerClassName>;

        $r24 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(");

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r87);

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") :");

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r28);

        $i8 = r1.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i9 = $i8 + 1;

        r1.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i9;

        $r29 = r1.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void printGrammarAction(groovyjarjarantlr.Grammar)>($r29);

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("def __init__(self, *argv, **kwargs) :");

        $i10 = r1.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i11 = $i10 + 1;

        r1.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i11;

        $r99 = new java.lang.StringBuffer;

        specialinvoke $r99.<java.lang.StringBuffer: void <init>()>();

        $r31 = virtualinvoke $r99.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r87);

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".__init__(self, *argv, **kwargs)");

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r33);

        $r100 = new java.lang.StringBuffer;

        specialinvoke $r100.<java.lang.StringBuffer: void <init>()>();

        $r35 = virtualinvoke $r100.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("self.caseSensitiveLiterals = ");

        $z2 = r0.<groovyjarjarantlr.LexerGrammar: boolean caseSensitiveLiterals>;

        $r36 = virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String toString(boolean)>($z2);

        $r37 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r36);

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r38);

        $r101 = new java.lang.StringBuffer;

        specialinvoke $r101.<java.lang.StringBuffer: void <init>()>();

        $r40 = virtualinvoke $r101.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("self.setCaseSensitive(");

        $z3 = r0.<groovyjarjarantlr.LexerGrammar: boolean caseSensitive>;

        $r41 = virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String toString(boolean)>($z3);

        $r42 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r41);

        $r43 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r44 = virtualinvoke $r43.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r44);

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("self.literals = literals");

        $r45 = r1.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z4 = $r45.<groovyjarjarantlr.Grammar: boolean debuggingOutput>;

        if $z4 == 0 goto label11;

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("ruleNames[] = [");

        $r59 = r1.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r60 = $r59.<groovyjarjarantlr.Grammar: groovyjarjarantlr.collections.impl.Vector rules>;

        $r61 = virtualinvoke $r60.<groovyjarjarantlr.collections.impl.Vector: java.util.Enumeration elements()>();

        $i16 = r1.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i17 = $i16 + 1;

        r1.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i17;

     label09:
        $z10 = interfaceinvoke $r61.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z10 == 0 goto label10;

        $r62 = interfaceinvoke $r61.<java.util.Enumeration: java.lang.Object nextElement()>();

        r93 = (groovyjarjarantlr.GrammarSymbol) $r62;

        $z7 = r93 instanceof groovyjarjarantlr.RuleSymbol;

        if $z7 == 0 goto label09;

        $r102 = new java.lang.StringBuffer;

        specialinvoke $r102.<java.lang.StringBuffer: void <init>()>();

        $r64 = virtualinvoke $r102.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"");

        $r65 = (groovyjarjarantlr.RuleSymbol) r93;

        $r66 = virtualinvoke $r65.<groovyjarjarantlr.RuleSymbol: java.lang.String getId()>();

        $r67 = virtualinvoke $r64.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r66);

        $r68 = virtualinvoke $r67.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\",");

        $r69 = virtualinvoke $r68.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r69);

        goto label09;

     label10:
        $i18 = r1.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i19 = $i18 - 1;

        r1.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i19;

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("]");

     label11:
        $r46 = r1.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void genHeaderInit(groovyjarjarantlr.Grammar)>($r46);

        $i12 = r1.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i13 = $i12 - 1;

        r1.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i13;

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void genNextToken()>();

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("");

        $r47 = r1.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r48 = $r47.<groovyjarjarantlr.Grammar: groovyjarjarantlr.collections.impl.Vector rules>;

        $r49 = virtualinvoke $r48.<groovyjarjarantlr.collections.impl.Vector: java.util.Enumeration elements()>();

        i22 = 0;

     label12:
        $z11 = interfaceinvoke $r49.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z11 == 0 goto label14;

        $r57 = interfaceinvoke $r49.<java.util.Enumeration: java.lang.Object nextElement()>();

        r94 = (groovyjarjarantlr.RuleSymbol) $r57;

        $r58 = virtualinvoke r94.<groovyjarjarantlr.RuleSymbol: java.lang.String getId()>();

        $z6 = virtualinvoke $r58.<java.lang.String: boolean equals(java.lang.Object)>("mnextToken");

        if $z6 != 0 goto label13;

        $i15 = i22;

        i22 = i22 + 1;

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void genRule(groovyjarjarantlr.RuleSymbol,boolean,int)>(r94, 0, $i15);

     label13:
        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void exitIfError()>();

        goto label12;

     label14:
        $r50 = r1.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z5 = $r50.<groovyjarjarantlr.Grammar: boolean debuggingOutput>;

        if $z5 == 0 goto label15;

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void genSemPredMap()>();

     label15:
        $r54 = r1.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.collections.impl.Vector bitsetsUsed>;

        $r51 = r1.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r52 = (groovyjarjarantlr.LexerGrammar) $r51;

        $r53 = $r52.<groovyjarjarantlr.LexerGrammar: groovyjarjarantlr.collections.impl.BitSet charVocabulary>;

        $i14 = virtualinvoke $r53.<groovyjarjarantlr.collections.impl.BitSet: int size()>();

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void genBitsets(groovyjarjarantlr.collections.impl.Vector,int)>($r54, $i14);

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("");

        $r55 = r1.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void genHeaderMain(groovyjarjarantlr.Grammar)>($r55);

        $r56 = r1.<groovyjarjarantlr.PythonCodeGenerator: java.io.PrintWriter currentOutput>;

        virtualinvoke $r56.<java.io.PrintWriter: void close()>();

        r1.<groovyjarjarantlr.PythonCodeGenerator: java.io.PrintWriter currentOutput> = null;

        return;
    }

    protected void genHeaderMain(groovyjarjarantlr.Grammar)
    {
        groovyjarjarantlr.Grammar r1;
        java.lang.StringBuffer $r0, $r3, $r4, $r5;
        int i0, i1;
        java.lang.String $r2, $r6, $r9, r11;
        boolean $z0, $z1, $z2;
        groovyjarjarantlr.PythonCodeGenerator r7;
        groovyjarjarantlr.DefineGrammarSymbols $r8, $r10;

        r7 := @this: groovyjarjarantlr.PythonCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.Grammar;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke r1.<groovyjarjarantlr.Grammar: java.lang.String getClassName()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("__main__");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        $r8 = r7.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.DefineGrammarSymbols behavior>;

        $r9 = virtualinvoke $r8.<groovyjarjarantlr.DefineGrammarSymbols: java.lang.String getHeaderAction(java.lang.String)>($r6);

        r11 = $r9;

        $z0 = staticinvoke <groovyjarjarantlr.PythonCodeGenerator: boolean isEmpty(java.lang.String)>($r9);

        if $z0 == 0 goto label1;

        $r10 = r7.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.DefineGrammarSymbols behavior>;

        r11 = virtualinvoke $r10.<groovyjarjarantlr.DefineGrammarSymbols: java.lang.String getHeaderAction(java.lang.String)>("__main__");

     label1:
        $z1 = staticinvoke <groovyjarjarantlr.PythonCodeGenerator: boolean isEmpty(java.lang.String)>(r11);

        if $z1 == 0 goto label2;

        $z2 = r1 instanceof groovyjarjarantlr.LexerGrammar;

        if $z2 == 0 goto label3;

        i0 = r7.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        r7.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = 0;

        virtualinvoke r7.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("### __main__ header action >>> ");

        virtualinvoke r7.<groovyjarjarantlr.PythonCodeGenerator: void genLexerTest()>();

        r7.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = 0;

        virtualinvoke r7.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("### __main__ header action <<< ");

        r7.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = i0;

        goto label3;

     label2:
        i1 = r7.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        r7.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = 0;

        virtualinvoke r7.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("");

        virtualinvoke r7.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("### __main__ header action >>> ");

        virtualinvoke r7.<groovyjarjarantlr.PythonCodeGenerator: void printMainFunc(java.lang.String)>(r11);

        r7.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = 0;

        virtualinvoke r7.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("### __main__ header action <<< ");

        r7.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = i1;

     label3:
        return;
    }

    protected void genHeaderInit(groovyjarjarantlr.Grammar)
    {
        groovyjarjarantlr.Grammar r1;
        groovyjarjarantlr.PythonCodeGenerator r7;
        java.lang.StringBuffer $r0, $r3, $r4, $r5;
        int i0;
        java.lang.String $r2, $r6, $r9, r11;
        groovyjarjarantlr.DefineGrammarSymbols $r8, $r10;
        boolean $z0, $z1;

        r7 := @this: groovyjarjarantlr.PythonCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.Grammar;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke r1.<groovyjarjarantlr.Grammar: java.lang.String getClassName()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("__init__");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        $r8 = r7.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.DefineGrammarSymbols behavior>;

        $r9 = virtualinvoke $r8.<groovyjarjarantlr.DefineGrammarSymbols: java.lang.String getHeaderAction(java.lang.String)>($r6);

        r11 = $r9;

        $z0 = staticinvoke <groovyjarjarantlr.PythonCodeGenerator: boolean isEmpty(java.lang.String)>($r9);

        if $z0 == 0 goto label1;

        $r10 = r7.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.DefineGrammarSymbols behavior>;

        r11 = virtualinvoke $r10.<groovyjarjarantlr.DefineGrammarSymbols: java.lang.String getHeaderAction(java.lang.String)>("__init__");

     label1:
        $z1 = staticinvoke <groovyjarjarantlr.PythonCodeGenerator: boolean isEmpty(java.lang.String)>(r11);

        if $z1 == 0 goto label2;

        goto label3;

     label2:
        i0 = r7.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        virtualinvoke r7.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("### __init__ header action >>> ");

        virtualinvoke r7.<groovyjarjarantlr.PythonCodeGenerator: void printActionCode(java.lang.String,int)>(r11, 0);

        r7.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = i0;

        virtualinvoke r7.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("### __init__ header action <<< ");

     label3:
        return;
    }

    protected void printMainFunc(java.lang.String)
    {
        int i0, $i1, $i2, $i3, $i4;
        java.lang.String r1;
        groovyjarjarantlr.PythonCodeGenerator r0;

        r0 := @this: groovyjarjarantlr.PythonCodeGenerator;

        r1 := @parameter0: java.lang.String;

        i0 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = 0;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("if __name__ == \'__main__\':");

        $i1 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i2 = $i1 + 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i2;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void printActionCode(java.lang.String,int)>(r1, 0);

        $i3 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i4 = $i3 - 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i4;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = i0;

        return;
    }

    public void gen(groovyjarjarantlr.OneOrMoreBlock)
    {
        groovyjarjarantlr.Lookahead[] $r30, $r40;
        groovyjarjarantlr.LLkGrammarAnalyzer $r13;
        groovyjarjarantlr.PythonCodeGenerator r0;
        groovyjarjarantlr.OneOrMoreBlock r1;
        java.lang.StringBuffer $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r16, $r17, $r18, $r20, $r21, $r22, $r23, $r26, $r27, $r28, $r32, $r33, $r34, $r35, $r36, $r37, $r43, $r44, $r46;
        java.lang.String $r2, $r10, $r11, $r19, $r24, $r25, $r29, $r31, $r38, $r42, $r45, $r47, r48;
        groovyjarjarantlr.Grammar $r12, $r14, $r39;
        groovyjarjarantlr.PythonBlockFinishingInfo $r15;
        boolean $z0, $z1, z2, $z3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, i20;
        groovyjarjarantlr.Lookahead $r41;

        r0 := @this: groovyjarjarantlr.PythonCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.OneOrMoreBlock;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void genBlockPreamble(groovyjarjarantlr.AlternativeBlock)>(r1);

        $r2 = virtualinvoke r1.<groovyjarjarantlr.OneOrMoreBlock: java.lang.String getLabel()>();

        if $r2 == null goto label1;

        $r43 = new java.lang.StringBuffer;

        specialinvoke $r43.<java.lang.StringBuffer: void <init>()>();

        $r44 = virtualinvoke $r43.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_cnt_");

        $r45 = virtualinvoke r1.<groovyjarjarantlr.OneOrMoreBlock: java.lang.String getLabel()>();

        $r46 = virtualinvoke $r44.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r45);

        r48 = virtualinvoke $r46.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label2;

     label1:
        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_cnt");

        $i0 = r1.<groovyjarjarantlr.OneOrMoreBlock: int ID>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        r48 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

     label2:
        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r48);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("= 0");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r10);

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("while True:");

        $i1 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i2 = $i1 + 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i2;

        $i19 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void genBlockInitAction(groovyjarjarantlr.AlternativeBlock)>(r1);

        $r47 = r0.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String currentASTResult>;

        $r11 = virtualinvoke r1.<groovyjarjarantlr.OneOrMoreBlock: java.lang.String getLabel()>();

        if $r11 == null goto label3;

        $r42 = virtualinvoke r1.<groovyjarjarantlr.OneOrMoreBlock: java.lang.String getLabel()>();

        r0.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String currentASTResult> = $r42;

     label3:
        $r12 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r13 = $r12.<groovyjarjarantlr.Grammar: groovyjarjarantlr.LLkGrammarAnalyzer theLLkAnalyzer>;

        interfaceinvoke $r13.<groovyjarjarantlr.LLkGrammarAnalyzer: boolean deterministic(groovyjarjarantlr.OneOrMoreBlock)>(r1);

        z2 = 0;

        $r14 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        i20 = $r14.<groovyjarjarantlr.Grammar: int maxk>;

        $z0 = r1.<groovyjarjarantlr.OneOrMoreBlock: boolean greedy>;

        if $z0 != 0 goto label4;

        $i17 = r1.<groovyjarjarantlr.OneOrMoreBlock: int exitLookaheadDepth>;

        $r39 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $i16 = $r39.<groovyjarjarantlr.Grammar: int maxk>;

        if $i17 > $i16 goto label4;

        $r40 = r1.<groovyjarjarantlr.OneOrMoreBlock: groovyjarjarantlr.Lookahead[] exitCache>;

        $i18 = r1.<groovyjarjarantlr.OneOrMoreBlock: int exitLookaheadDepth>;

        $r41 = $r40[$i18];

        $z1 = virtualinvoke $r41.<groovyjarjarantlr.Lookahead: boolean containsEpsilon()>();

        if $z1 == 0 goto label4;

        z2 = 1;

        i20 = r1.<groovyjarjarantlr.OneOrMoreBlock: int exitLookaheadDepth>;

        goto label5;

     label4:
        $z3 = r1.<groovyjarjarantlr.OneOrMoreBlock: boolean greedy>;

        if $z3 != 0 goto label5;

        $i15 = r1.<groovyjarjarantlr.OneOrMoreBlock: int exitLookaheadDepth>;

        if $i15 != 2147483647 goto label5;

        z2 = 1;

     label5:
        if z2 == 0 goto label6;

        $r26 = new java.lang.StringBuffer;

        specialinvoke $r26.<java.lang.StringBuffer: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("### nongreedy (...)+ loop; exit depth is ");

        $i9 = r1.<groovyjarjarantlr.OneOrMoreBlock: int exitLookaheadDepth>;

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i9);

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r29);

        $r30 = r1.<groovyjarjarantlr.OneOrMoreBlock: groovyjarjarantlr.Lookahead[] exitCache>;

        $r31 = virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String getLookaheadTestExpression(groovyjarjarantlr.Lookahead[],int)>($r30, i20);

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("### nongreedy exit test");

        $r32 = new java.lang.StringBuffer;

        specialinvoke $r32.<java.lang.StringBuffer: void <init>()>();

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("if ");

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r48);

        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" >= 1 and ");

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r31);

        $r37 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r38);

        $i10 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i11 = $i10 + 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i11;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("break");

        $i12 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i13 = $i12 - 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i13;

     label6:
        $i14 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $r15 = virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.PythonBlockFinishingInfo genCommonBlock(groovyjarjarantlr.AlternativeBlock,boolean)>(r1, 0);

        specialinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void genBlockFinish(groovyjarjarantlr.PythonBlockFinishingInfo,java.lang.String)>($r15, "break");

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i14;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i19;

        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r48);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" += 1");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r19);

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i19;

        $i3 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i4 = $i3 - 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i4;

        $r20 = new java.lang.StringBuffer;

        specialinvoke $r20.<java.lang.StringBuffer: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("if ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r48);

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" < 1:");

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r24);

        $i5 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i6 = $i5 + 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i6;

        $r25 = r0.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String throwNoViable>;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r25);

        $i7 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i8 = $i7 - 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i8;

        r0.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String currentASTResult> = $r47;

        return;
    }

    public void gen(groovyjarjarantlr.ParserGrammar) throws java.io.IOException
    {
        java.util.Enumeration $r48, $r76;
        groovyjarjarantlr.TokenManager $r31;
        groovyjarjarantlr.collections.impl.Vector $r32, $r38, $r47, $r62, $r75;
        java.io.PrintWriter $r35;
        groovyjarjarantlr.PythonCodeGenerator r1;
        groovyjarjarantlr.GrammarSymbol r72, r77;
        groovyjarjarantlr.Tool $r61;
        java.lang.StringBuffer $r13, $r14, $r17, $r23, $r24, $r25, $r40, $r41, $r43, $r44, $r50, $r51, $r54, $r55, $r64, $r65, $r67, $r68, $r69;
        java.lang.String $r4, $r7, $r10, $r12, $r16, $r26, $r39, $r42, $r45, $r53, $r56, $r57, $r58, r63, $r66, $r70;
        groovyjarjarantlr.RuleSymbol r37, $r52;
        groovyjarjarantlr.DefineGrammarSymbols $r6;
        groovyjarjarantlr.Grammar $r2, $r3, $r5, $r8, $r11, $r15, $r18, $r19, $r22, $r27, $r28, $r29, $r30, $r33, $r34, $r46, $r59, $r71, $r73, $r74;
        groovyjarjarantlr.Token $r9, $r60;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, i19;
        java.util.Hashtable $r20;
        groovyjarjarantlr.ParserGrammar r0;
        java.lang.Object $r21, $r36, $r49;

        r1 := @this: groovyjarjarantlr.PythonCodeGenerator;

        r0 := @parameter0: groovyjarjarantlr.ParserGrammar;

        $z0 = r0.<groovyjarjarantlr.ParserGrammar: boolean debuggingOutput>;

        if $z0 == 0 goto label01;

        $r62 = new groovyjarjarantlr.collections.impl.Vector;

        specialinvoke $r62.<groovyjarjarantlr.collections.impl.Vector: void <init>()>();

        r1.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.collections.impl.Vector semPreds> = $r62;

     label01:
        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void setGrammar(groovyjarjarantlr.Grammar)>(r0);

        $r2 = r1.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z1 = $r2 instanceof groovyjarjarantlr.ParserGrammar;

        if $z1 != 0 goto label02;

        $r61 = r1.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        virtualinvoke $r61.<groovyjarjarantlr.Tool: void panic(java.lang.String)>("Internal error generating parser");

     label02:
        $r3 = r1.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r4 = virtualinvoke $r3.<groovyjarjarantlr.Grammar: java.lang.String getClassName()>();

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void setupOutput(java.lang.String)>($r4);

        $r5 = r1.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z2 = $r5.<groovyjarjarantlr.Grammar: boolean buildAST>;

        r1.<groovyjarjarantlr.PythonCodeGenerator: boolean genAST> = $z2;

        r1.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = 0;

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void genHeader()>();

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("### import antlr and other modules ..");

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("import sys");

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("import antlr");

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("");

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("version = sys.version.split()[0]");

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("if version < \'2.2.1\':");

        $i0 = r1.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i1 = $i0 + 1;

        r1.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i1;

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("False = 0");

        $i2 = r1.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i3 = $i2 - 1;

        r1.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i3;

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("if version < \'2.3\':");

        $i4 = r1.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i5 = $i4 + 1;

        r1.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i5;

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("True = not False");

        $i6 = r1.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i7 = $i6 - 1;

        r1.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i7;

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("### header action >>> ");

        $r6 = r1.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.DefineGrammarSymbols behavior>;

        $r7 = virtualinvoke $r6.<groovyjarjarantlr.DefineGrammarSymbols: java.lang.String getHeaderAction(java.lang.String)>("");

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void printActionCode(java.lang.String,int)>($r7, 0);

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("### header action <<< ");

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("### preamble action>>>");

        $r8 = r1.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r9 = $r8.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Token preambleAction>;

        $r10 = virtualinvoke $r9.<groovyjarjarantlr.Token: java.lang.String getText()>();

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void printActionCode(java.lang.String,int)>($r10, 0);

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("### preamble action <<<");

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void flushTokens()>();

        $r11 = r1.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r12 = $r11.<groovyjarjarantlr.Grammar: java.lang.String superClass>;

        if $r12 == null goto label03;

        $r59 = r1.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        r63 = $r59.<groovyjarjarantlr.Grammar: java.lang.String superClass>;

        goto label04;

     label03:
        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("antlr.");

        $r15 = r1.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r16 = virtualinvoke $r15.<groovyjarjarantlr.Grammar: java.lang.String getSuperClass()>();

        $r17 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r16);

        r63 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

     label04:
        $r18 = r1.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void genJavadocComment(groovyjarjarantlr.Grammar)>($r18);

        $r19 = r1.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r20 = $r19.<groovyjarjarantlr.Grammar: java.util.Hashtable options>;

        $r21 = virtualinvoke $r20.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>("classHeaderPrefix");

        $r60 = (groovyjarjarantlr.Token) $r21;

        if $r60 == null goto label05;

        $r57 = virtualinvoke $r60.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r58 = staticinvoke <groovyjarjarantlr.StringUtils: java.lang.String stripFrontBack(java.lang.String,java.lang.String,java.lang.String)>($r57, "\"", "\"");

        if $r58 == null goto label05;

     label05:
        $r64 = new java.lang.StringBuffer;

        specialinvoke $r64.<java.lang.StringBuffer: void <init>()>();

        $r65 = virtualinvoke $r64.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("class ");

        $r66 = r1.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String parserClassName>;

        $r67 = virtualinvoke $r65.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r66);

        $r68 = virtualinvoke $r67.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(");

        $r69 = virtualinvoke $r68.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r63);

        $r70 = virtualinvoke $r69.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void print(java.lang.String)>($r70);

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("):");

        $i17 = r1.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i18 = $i17 + 1;

        r1.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i18;

        $r71 = r1.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z9 = $r71.<groovyjarjarantlr.Grammar: boolean debuggingOutput>;

        if $z9 == 0 goto label08;

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("_ruleNames = [");

        $r46 = r1.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r47 = $r46.<groovyjarjarantlr.Grammar: groovyjarjarantlr.collections.impl.Vector rules>;

        $r48 = virtualinvoke $r47.<groovyjarjarantlr.collections.impl.Vector: java.util.Enumeration elements()>();

        $i13 = r1.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i14 = $i13 + 1;

        r1.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i14;

     label06:
        $z10 = interfaceinvoke $r48.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z10 == 0 goto label07;

        $r49 = interfaceinvoke $r48.<java.util.Enumeration: java.lang.Object nextElement()>();

        r72 = (groovyjarjarantlr.GrammarSymbol) $r49;

        $z8 = r72 instanceof groovyjarjarantlr.RuleSymbol;

        if $z8 == 0 goto label06;

        $r50 = new java.lang.StringBuffer;

        specialinvoke $r50.<java.lang.StringBuffer: void <init>()>();

        $r51 = virtualinvoke $r50.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"");

        $r52 = (groovyjarjarantlr.RuleSymbol) r72;

        $r53 = virtualinvoke $r52.<groovyjarjarantlr.RuleSymbol: java.lang.String getId()>();

        $r54 = virtualinvoke $r51.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r53);

        $r55 = virtualinvoke $r54.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\",");

        $r56 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r56);

        goto label06;

     label07:
        $i15 = r1.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i16 = $i15 - 1;

        r1.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i16;

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("]");

     label08:
        $r22 = r1.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void printGrammarAction(groovyjarjarantlr.Grammar)>($r22);

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("");

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("def __init__(self, *args, **kwargs):");

        $i8 = r1.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i9 = $i8 + 1;

        r1.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i9;

        $r23 = new java.lang.StringBuffer;

        specialinvoke $r23.<java.lang.StringBuffer: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r63);

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".__init__(self, *args, **kwargs)");

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r26);

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("self.tokenNames = _tokenNames");

        $r27 = r1.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z3 = $r27.<groovyjarjarantlr.Grammar: boolean debuggingOutput>;

        if $z3 == 0 goto label09;

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("self.ruleNames  = _ruleNames");

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("self.semPredNames = _semPredNames");

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("self.setupDebugging(self.tokenBuf)");

     label09:
        $r28 = r1.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z4 = $r28.<groovyjarjarantlr.Grammar: boolean buildAST>;

        if $z4 == 0 goto label10;

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("self.buildTokenTypeASTClassMap()");

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("self.astFactory = antlr.ASTFactory(self.getTokenTypeToASTClassMap())");

        $r39 = r1.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String labeledElementASTType>;

        if $r39 == null goto label10;

        $r40 = new java.lang.StringBuffer;

        specialinvoke $r40.<java.lang.StringBuffer: void <init>()>();

        $r41 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("self.astFactory.setASTNodeClass(");

        $r42 = r1.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String labeledElementASTType>;

        $r43 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r42);

        $r44 = virtualinvoke $r43.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r45 = virtualinvoke $r44.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r45);

     label10:
        $r73 = r1.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void genHeaderInit(groovyjarjarantlr.Grammar)>($r73);

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("");

        $r74 = r1.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r75 = $r74.<groovyjarjarantlr.Grammar: groovyjarjarantlr.collections.impl.Vector rules>;

        $r76 = virtualinvoke $r75.<groovyjarjarantlr.collections.impl.Vector: java.util.Enumeration elements()>();

        i19 = 0;

     label11:
        $z11 = interfaceinvoke $r76.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z11 == 0 goto label15;

        $r36 = interfaceinvoke $r76.<java.util.Enumeration: java.lang.Object nextElement()>();

        r77 = (groovyjarjarantlr.GrammarSymbol) $r36;

        $z7 = r77 instanceof groovyjarjarantlr.RuleSymbol;

        if $z7 == 0 goto label14;

        r37 = (groovyjarjarantlr.RuleSymbol) r77;

        $r38 = r37.<groovyjarjarantlr.RuleSymbol: groovyjarjarantlr.collections.impl.Vector references>;

        $i11 = virtualinvoke $r38.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if $i11 != 0 goto label12;

        $z12 = 1;

        goto label13;

     label12:
        $z12 = 0;

     label13:
        $i12 = i19;

        i19 = i19 + 1;

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void genRule(groovyjarjarantlr.RuleSymbol,boolean,int)>(r37, $z12, $i12);

     label14:
        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void exitIfError()>();

        goto label11;

     label15:
        $r29 = r1.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z5 = $r29.<groovyjarjarantlr.Grammar: boolean buildAST>;

        if $z5 == 0 goto label16;

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void genTokenASTNodeMap()>();

     label16:
        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void genTokenStrings()>();

        $r32 = r1.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.collections.impl.Vector bitsetsUsed>;

        $r30 = r1.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r31 = $r30.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager>;

        $i10 = interfaceinvoke $r31.<groovyjarjarantlr.TokenManager: int maxTokenType()>();

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void genBitsets(groovyjarjarantlr.collections.impl.Vector,int)>($r32, $i10);

        $r33 = r1.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z6 = $r33.<groovyjarjarantlr.Grammar: boolean debuggingOutput>;

        if $z6 == 0 goto label17;

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void genSemPredMap()>();

     label17:
        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("");

        r1.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = 0;

        $r34 = r1.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void genHeaderMain(groovyjarjarantlr.Grammar)>($r34);

        $r35 = r1.<groovyjarjarantlr.PythonCodeGenerator: java.io.PrintWriter currentOutput>;

        virtualinvoke $r35.<java.io.PrintWriter: void close()>();

        r1.<groovyjarjarantlr.PythonCodeGenerator: java.io.PrintWriter currentOutput> = null;

        return;
    }

    public void gen(groovyjarjarantlr.RuleRefElement)
    {
        groovyjarjarantlr.RuleBlock $r33, $r44;
        groovyjarjarantlr.PythonCodeGenerator r0;
        groovyjarjarantlr.GrammarSymbol $r4;
        groovyjarjarantlr.Tool $r6, $r24, $r36, $r52, $r70;
        java.lang.StringBuffer $r5, $r7, $r9, $r10, $r19, $r21, $r22, $r26, $r28, $r29, $r35, $r37, $r39, $r40, $r46, $r48, $r49, $r51, $r53, $r55, $r56, $r61, $r63, $r64, $r66, $r67, $r69, $r71, $r73, $r74, $r78, $r80, $r81, $r82;
        java.lang.String $r2, $r8, $r11, $r13, $r18, $r20, $r23, $r25, $r27, $r30, $r32, $r34, $r38, $r41, $r43, $r45, $r47, $r50, $r54, $r57, $r59, $r60, $r62, $r65, $r68, $r72, $r75, $r77, $r83, $r86;
        groovyjarjarantlr.RuleSymbol $r84;
        groovyjarjarantlr.Grammar $r3, $r12, $r14, $r15, $r16, $r17, $r31, $r42, $r58, $r76, $r85, $r87, $r88;
        groovyjarjarantlr.RuleRefElement r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z15, $z16, $z17, $z18;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        java.io.PrintStream $r79;

        r0 := @this: groovyjarjarantlr.PythonCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.RuleRefElement;

        $z0 = r0.<groovyjarjarantlr.PythonCodeGenerator: boolean DEBUG_CODE_GENERATOR>;

        if $z0 == 0 goto label01;

        $r79 = <java.lang.System: java.io.PrintStream out>;

        $r78 = new java.lang.StringBuffer;

        specialinvoke $r78.<java.lang.StringBuffer: void <init>()>();

        $r80 = virtualinvoke $r78.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("genRR(");

        $r81 = virtualinvoke $r80.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r82 = virtualinvoke $r81.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r83 = virtualinvoke $r82.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r79.<java.io.PrintStream: void println(java.lang.String)>($r83);

     label01:
        $r3 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r2 = r1.<groovyjarjarantlr.RuleRefElement: java.lang.String targetRule>;

        $r4 = virtualinvoke $r3.<groovyjarjarantlr.Grammar: groovyjarjarantlr.GrammarSymbol getSymbol(java.lang.String)>($r2);

        $r84 = (groovyjarjarantlr.RuleSymbol) $r4;

        if $r84 == null goto label02;

        $z1 = virtualinvoke $r84.<groovyjarjarantlr.RuleSymbol: boolean isDefined()>();

        if $z1 != 0 goto label03;

     label02:
        $r6 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Rule \'");

        $r8 = r1.<groovyjarjarantlr.RuleRefElement: java.lang.String targetRule>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' is not defined");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        $r12 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r13 = virtualinvoke $r12.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i0 = virtualinvoke r1.<groovyjarjarantlr.RuleRefElement: int getLine()>();

        $i1 = virtualinvoke r1.<groovyjarjarantlr.RuleRefElement: int getColumn()>();

        virtualinvoke $r6.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>($r11, $r13, $i0, $i1);

        return;

     label03:
        $z2 = $r84 instanceof groovyjarjarantlr.RuleSymbol;

        if $z2 != 0 goto label04;

        $r70 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r69 = new java.lang.StringBuffer;

        specialinvoke $r69.<java.lang.StringBuffer: void <init>()>();

        $r71 = virtualinvoke $r69.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r72 = r1.<groovyjarjarantlr.RuleRefElement: java.lang.String targetRule>;

        $r73 = virtualinvoke $r71.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r72);

        $r74 = virtualinvoke $r73.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' does not name a grammar rule");

        $r75 = virtualinvoke $r74.<java.lang.StringBuffer: java.lang.String toString()>();

        $r76 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r77 = virtualinvoke $r76.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i12 = virtualinvoke r1.<groovyjarjarantlr.RuleRefElement: int getLine()>();

        $i13 = virtualinvoke r1.<groovyjarjarantlr.RuleRefElement: int getColumn()>();

        virtualinvoke $r70.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>($r75, $r77, $i12, $i13);

        return;

     label04:
        specialinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void genErrorTryForElement(groovyjarjarantlr.AlternativeElement)>(r1);

        $r14 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z3 = $r14 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z3 == 0 goto label05;

        $r60 = virtualinvoke r1.<groovyjarjarantlr.RuleRefElement: java.lang.String getLabel()>();

        if $r60 == null goto label05;

        $i11 = r0.<groovyjarjarantlr.PythonCodeGenerator: int syntacticPredLevel>;

        if $i11 != 0 goto label05;

        $r61 = new java.lang.StringBuffer;

        specialinvoke $r61.<java.lang.StringBuffer: void <init>()>();

        $r62 = virtualinvoke r1.<groovyjarjarantlr.RuleRefElement: java.lang.String getLabel()>();

        $r63 = virtualinvoke $r61.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r62);

        $r64 = virtualinvoke $r63.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = antlr.ifelse(_t == antlr.ASTNULL, None, ");

        $r65 = r0.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String lt1Value>;

        $r66 = virtualinvoke $r64.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r65);

        $r67 = virtualinvoke $r66.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r68 = virtualinvoke $r67.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r68);

     label05:
        $r85 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z12 = $r85 instanceof groovyjarjarantlr.LexerGrammar;

        if $z12 == 0 goto label07;

        $z11 = r0.<groovyjarjarantlr.PythonCodeGenerator: boolean saveText>;

        if $z11 == 0 goto label06;

        $i10 = virtualinvoke r1.<groovyjarjarantlr.RuleRefElement: int getAutoGenType()>();

        if $i10 != 3 goto label07;

     label06:
        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("_saveIndex = self.text.length()");

     label07:
        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void printTabs()>();

        $r86 = r1.<groovyjarjarantlr.RuleRefElement: java.lang.String idAssign>;

        if $r86 == null goto label09;

        $r44 = $r84.<groovyjarjarantlr.RuleSymbol: groovyjarjarantlr.RuleBlock block>;

        $r45 = $r44.<groovyjarjarantlr.RuleBlock: java.lang.String returnAction>;

        if $r45 != null goto label08;

        $r52 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r51 = new java.lang.StringBuffer;

        specialinvoke $r51.<java.lang.StringBuffer: void <init>()>();

        $r53 = virtualinvoke $r51.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Rule \'");

        $r54 = r1.<groovyjarjarantlr.RuleRefElement: java.lang.String targetRule>;

        $r55 = virtualinvoke $r53.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r54);

        $r56 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' has no return type");

        $r57 = virtualinvoke $r56.<java.lang.StringBuffer: java.lang.String toString()>();

        $r58 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r59 = virtualinvoke $r58.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i8 = virtualinvoke r1.<groovyjarjarantlr.RuleRefElement: int getLine()>();

        $i9 = virtualinvoke r1.<groovyjarjarantlr.RuleRefElement: int getColumn()>();

        virtualinvoke $r52.<groovyjarjarantlr.Tool: void warning(java.lang.String,java.lang.String,int,int)>($r57, $r59, $i8, $i9);

     label08:
        $r46 = new java.lang.StringBuffer;

        specialinvoke $r46.<java.lang.StringBuffer: void <init>()>();

        $r47 = r1.<groovyjarjarantlr.RuleRefElement: java.lang.String idAssign>;

        $r48 = virtualinvoke $r46.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r47);

        $r49 = virtualinvoke $r48.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("=");

        $r50 = virtualinvoke $r49.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void _print(java.lang.String)>($r50);

        goto label10;

     label09:
        $r15 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z4 = $r15 instanceof groovyjarjarantlr.LexerGrammar;

        if $z4 != 0 goto label10;

        $i5 = r0.<groovyjarjarantlr.PythonCodeGenerator: int syntacticPredLevel>;

        if $i5 != 0 goto label10;

        $r33 = $r84.<groovyjarjarantlr.RuleSymbol: groovyjarjarantlr.RuleBlock block>;

        $r34 = $r33.<groovyjarjarantlr.RuleBlock: java.lang.String returnAction>;

        if $r34 == null goto label10;

        $r36 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r35 = new java.lang.StringBuffer;

        specialinvoke $r35.<java.lang.StringBuffer: void <init>()>();

        $r37 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Rule \'");

        $r38 = r1.<groovyjarjarantlr.RuleRefElement: java.lang.String targetRule>;

        $r39 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r38);

        $r40 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' returns a value");

        $r41 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.String toString()>();

        $r42 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r43 = virtualinvoke $r42.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i6 = virtualinvoke r1.<groovyjarjarantlr.RuleRefElement: int getLine()>();

        $i7 = virtualinvoke r1.<groovyjarjarantlr.RuleRefElement: int getColumn()>();

        virtualinvoke $r36.<groovyjarjarantlr.Tool: void warning(java.lang.String,java.lang.String,int,int)>($r41, $r43, $i6, $i7);

     label10:
        specialinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void GenRuleInvocation(groovyjarjarantlr.RuleRefElement)>(r1);

        $r87 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z13 = $r87 instanceof groovyjarjarantlr.LexerGrammar;

        if $z13 == 0 goto label12;

        $z10 = r0.<groovyjarjarantlr.PythonCodeGenerator: boolean saveText>;

        if $z10 == 0 goto label11;

        $i4 = virtualinvoke r1.<groovyjarjarantlr.RuleRefElement: int getAutoGenType()>();

        if $i4 != 3 goto label12;

     label11:
        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("self.text.setLength(_saveIndex)");

     label12:
        $i14 = r0.<groovyjarjarantlr.PythonCodeGenerator: int syntacticPredLevel>;

        if $i14 != 0 goto label23;

        $r16 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z5 = $r16.<groovyjarjarantlr.Grammar: boolean hasSyntacticPredicate>;

        if $z5 == 0 goto label15;

        $r31 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z8 = $r31.<groovyjarjarantlr.Grammar: boolean buildAST>;

        if $z8 == 0 goto label13;

        $r32 = virtualinvoke r1.<groovyjarjarantlr.RuleRefElement: java.lang.String getLabel()>();

        if $r32 != null goto label14;

     label13:
        $z9 = r0.<groovyjarjarantlr.PythonCodeGenerator: boolean genAST>;

        if $z9 == 0 goto label15;

        $i3 = virtualinvoke r1.<groovyjarjarantlr.RuleRefElement: int getAutoGenType()>();

        if $i3 != 1 goto label15;

     label14:
        $z18 = 1;

        $z17 = 1;

        goto label16;

     label15:
        $z18 = 0;

        $z17 = 0;

     label16:
        z6 = $z18;

        if $z17 == 0 goto label17;

     label17:
        $r17 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z7 = $r17.<groovyjarjarantlr.Grammar: boolean buildAST>;

        if $z7 == 0 goto label18;

        $r25 = virtualinvoke r1.<groovyjarjarantlr.RuleRefElement: java.lang.String getLabel()>();

        if $r25 == null goto label18;

        $r26 = new java.lang.StringBuffer;

        specialinvoke $r26.<java.lang.StringBuffer: void <init>()>();

        $r27 = virtualinvoke r1.<groovyjarjarantlr.RuleRefElement: java.lang.String getLabel()>();

        $r28 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_AST = self.returnAST");

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r30);

     label18:
        $z15 = r0.<groovyjarjarantlr.PythonCodeGenerator: boolean genAST>;

        if $z15 == 0 goto label21;

        $i2 = virtualinvoke r1.<groovyjarjarantlr.RuleRefElement: int getAutoGenType()>();

        lookupswitch($i2)
        {
            case 1: goto label19;
            case 2: goto label20;
            default: goto label21;
        };

     label19:
        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("self.addASTChild(currentAST, self.returnAST)");

        goto label21;

     label20:
        $r24 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        virtualinvoke $r24.<groovyjarjarantlr.Tool: void error(java.lang.String)>("Internal: encountered ^ after rule reference");

        goto label21;

     label21:
        $r88 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z16 = $r88 instanceof groovyjarjarantlr.LexerGrammar;

        if $z16 == 0 goto label22;

        $r18 = virtualinvoke r1.<groovyjarjarantlr.RuleRefElement: java.lang.String getLabel()>();

        if $r18 == null goto label22;

        $r19 = new java.lang.StringBuffer;

        specialinvoke $r19.<java.lang.StringBuffer: void <init>()>();

        $r20 = virtualinvoke r1.<groovyjarjarantlr.RuleRefElement: java.lang.String getLabel()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = self._returnToken");

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r23);

     label22:
        if z6 == 0 goto label23;

     label23:
        specialinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void genErrorCatchForElement(groovyjarjarantlr.AlternativeElement)>(r1);

        return;
    }

    public void gen(groovyjarjarantlr.StringLiteralElement)
    {
        groovyjarjarantlr.Grammar $r17;
        java.lang.StringBuffer $r3, $r5, $r6, $r8, $r9, $r11, $r13, $r14, $r15;
        int $i0, $i1;
        java.lang.String $r2, $r4, $r7, $r10, $r16;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.io.PrintStream $r12;
        groovyjarjarantlr.PythonCodeGenerator r0;
        groovyjarjarantlr.StringLiteralElement r1;

        r0 := @this: groovyjarjarantlr.PythonCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.StringLiteralElement;

        $z0 = r0.<groovyjarjarantlr.PythonCodeGenerator: boolean DEBUG_CODE_GENERATOR>;

        if $z0 == 0 goto label1;

        $r12 = <java.lang.System: java.io.PrintStream out>;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("genString(");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.String)>($r16);

     label1:
        $r2 = virtualinvoke r1.<groovyjarjarantlr.StringLiteralElement: java.lang.String getLabel()>();

        if $r2 == null goto label2;

        $i1 = r0.<groovyjarjarantlr.PythonCodeGenerator: int syntacticPredLevel>;

        if $i1 != 0 goto label2;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke r1.<groovyjarjarantlr.StringLiteralElement: java.lang.String getLabel()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = ");

        $r7 = r0.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String lt1Value>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r10);

     label2:
        specialinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void genElementAST(groovyjarjarantlr.AlternativeElement)>(r1);

        $z1 = r0.<groovyjarjarantlr.PythonCodeGenerator: boolean saveText>;

        $z2 = r0.<groovyjarjarantlr.PythonCodeGenerator: boolean saveText>;

        if $z2 == 0 goto label3;

        $i0 = virtualinvoke r1.<groovyjarjarantlr.StringLiteralElement: int getAutoGenType()>();

        if $i0 != 1 goto label3;

        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        r0.<groovyjarjarantlr.PythonCodeGenerator: boolean saveText> = $z3;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void genMatch(groovyjarjarantlr.GrammarAtom)>(r1);

        r0.<groovyjarjarantlr.PythonCodeGenerator: boolean saveText> = $z1;

        $r17 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z4 = $r17 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z4 == 0 goto label5;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("_t = _t.getNextSibling()");

     label5:
        return;
    }

    public void gen(groovyjarjarantlr.TokenRangeElement)
    {
        groovyjarjarantlr.TokenRangeElement r1;
        java.lang.StringBuffer $r3, $r5, $r6, $r8, $r10, $r11, $r13, $r14, $r16, $r17;
        int $i0;
        java.lang.String $r2, $r4, $r7, $r9, $r12, $r15, $r18;
        groovyjarjarantlr.PythonCodeGenerator r0;

        r0 := @this: groovyjarjarantlr.PythonCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.TokenRangeElement;

        specialinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void genErrorTryForElement(groovyjarjarantlr.AlternativeElement)>(r1);

        $r2 = virtualinvoke r1.<groovyjarjarantlr.TokenRangeElement: java.lang.String getLabel()>();

        if $r2 == null goto label1;

        $i0 = r0.<groovyjarjarantlr.PythonCodeGenerator: int syntacticPredLevel>;

        if $i0 != 0 goto label1;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke r1.<groovyjarjarantlr.TokenRangeElement: java.lang.String getLabel()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = ");

        $r7 = r0.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String lt1Value>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r9);

     label1:
        specialinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void genElementAST(groovyjarjarantlr.AlternativeElement)>(r1);

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("self.matchRange(u");

        $r12 = r1.<groovyjarjarantlr.TokenRangeElement: java.lang.String beginText>;

        $r13 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", u");

        $r15 = r1.<groovyjarjarantlr.TokenRangeElement: java.lang.String endText>;

        $r16 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r18);

        specialinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void genErrorCatchForElement(groovyjarjarantlr.AlternativeElement)>(r1);

        return;
    }

    public void gen(groovyjarjarantlr.TokenRefElement)
    {
        groovyjarjarantlr.Grammar $r1, $r19;
        groovyjarjarantlr.Tool $r12;
        java.lang.StringBuffer $r4, $r6, $r7, $r9, $r10, $r13, $r15, $r16, $r17;
        int $i0;
        java.lang.String $r3, $r5, $r8, $r11, $r18;
        boolean $z0, $z1, $z2;
        java.io.PrintStream $r14;
        groovyjarjarantlr.TokenRefElement r2;
        groovyjarjarantlr.PythonCodeGenerator r0;

        r0 := @this: groovyjarjarantlr.PythonCodeGenerator;

        r2 := @parameter0: groovyjarjarantlr.TokenRefElement;

        $z0 = r0.<groovyjarjarantlr.PythonCodeGenerator: boolean DEBUG_CODE_GENERATOR>;

        if $z0 == 0 goto label1;

        $r14 = <java.lang.System: java.io.PrintStream out>;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("genTokenRef(");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r2);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r14.<java.io.PrintStream: void println(java.lang.String)>($r18);

     label1:
        $r1 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z1 = $r1 instanceof groovyjarjarantlr.LexerGrammar;

        if $z1 == 0 goto label2;

        $r12 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        virtualinvoke $r12.<groovyjarjarantlr.Tool: void panic(java.lang.String)>("Token reference found in lexer");

     label2:
        specialinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void genErrorTryForElement(groovyjarjarantlr.AlternativeElement)>(r2);

        $r3 = virtualinvoke r2.<groovyjarjarantlr.TokenRefElement: java.lang.String getLabel()>();

        if $r3 == null goto label3;

        $i0 = r0.<groovyjarjarantlr.PythonCodeGenerator: int syntacticPredLevel>;

        if $i0 != 0 goto label3;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke r2.<groovyjarjarantlr.TokenRefElement: java.lang.String getLabel()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = ");

        $r8 = r0.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String lt1Value>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r11);

     label3:
        specialinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void genElementAST(groovyjarjarantlr.AlternativeElement)>(r2);

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void genMatch(groovyjarjarantlr.GrammarAtom)>(r2);

        specialinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void genErrorCatchForElement(groovyjarjarantlr.AlternativeElement)>(r2);

        $r19 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z2 = $r19 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z2 == 0 goto label4;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("_t = _t.getNextSibling()");

     label4:
        return;
    }

    public void gen(groovyjarjarantlr.TreeElement)
    {
        groovyjarjarantlr.Grammar $r12, $r15, $r32, $r36;
        groovyjarjarantlr.collections.impl.Vector $r46;
        boolean $z0, $z1, $z2;
        groovyjarjarantlr.PythonCodeGenerator r0;
        groovyjarjarantlr.Alternative $r26;
        groovyjarjarantlr.AlternativeElement r47;
        groovyjarjarantlr.Tool $r33, $r37;
        java.lang.StringBuffer $r1, $r2, $r4, $r5, $r16, $r17, $r18, $r19, $r21, $r22, $r23, $r24, $r27, $r28, $r29, $r30, $r40, $r43, $r44;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, $i11;
        groovyjarjarantlr.TreeElement r3;
        java.lang.String $r6, $r8, $r20, $r25, $r31, $r34, $r38, $r42, $r45;
        groovyjarjarantlr.GrammarAtom $r7, $r9, $r10, $r11, $r13, $r14, $r35, $r39, $r41;

        r0 := @this: groovyjarjarantlr.PythonCodeGenerator;

        r3 := @parameter0: groovyjarjarantlr.TreeElement;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_t");

        $i0 = r3.<groovyjarjarantlr.TreeElement: int ID>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = _t");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r6);

        $r7 = r3.<groovyjarjarantlr.TreeElement: groovyjarjarantlr.GrammarAtom root>;

        $r8 = virtualinvoke $r7.<groovyjarjarantlr.GrammarAtom: java.lang.String getLabel()>();

        if $r8 == null goto label01;

        $r40 = new java.lang.StringBuffer;

        specialinvoke $r40.<java.lang.StringBuffer: void <init>()>();

        $r41 = r3.<groovyjarjarantlr.TreeElement: groovyjarjarantlr.GrammarAtom root>;

        $r42 = virtualinvoke $r41.<groovyjarjarantlr.GrammarAtom: java.lang.String getLabel()>();

        $r43 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r42);

        $r44 = virtualinvoke $r43.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = antlr.ifelse(_t == antlr.ASTNULL, None, _t)");

        $r45 = virtualinvoke $r44.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r45);

     label01:
        $r9 = r3.<groovyjarjarantlr.TreeElement: groovyjarjarantlr.GrammarAtom root>;

        $i1 = virtualinvoke $r9.<groovyjarjarantlr.GrammarAtom: int getAutoGenType()>();

        if $i1 != 3 goto label02;

        $r37 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r36 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r38 = virtualinvoke $r36.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i8 = virtualinvoke r3.<groovyjarjarantlr.TreeElement: int getLine()>();

        $i9 = virtualinvoke r3.<groovyjarjarantlr.TreeElement: int getColumn()>();

        virtualinvoke $r37.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>("Suffixing a root node with \'!\' is not implemented", $r38, $i8, $i9);

        $r39 = r3.<groovyjarjarantlr.TreeElement: groovyjarjarantlr.GrammarAtom root>;

        virtualinvoke $r39.<groovyjarjarantlr.GrammarAtom: void setAutoGenType(int)>(1);

     label02:
        $r10 = r3.<groovyjarjarantlr.TreeElement: groovyjarjarantlr.GrammarAtom root>;

        $i2 = virtualinvoke $r10.<groovyjarjarantlr.GrammarAtom: int getAutoGenType()>();

        if $i2 != 2 goto label03;

        $r33 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r32 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r34 = virtualinvoke $r32.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i6 = virtualinvoke r3.<groovyjarjarantlr.TreeElement: int getLine()>();

        $i7 = virtualinvoke r3.<groovyjarjarantlr.TreeElement: int getColumn()>();

        virtualinvoke $r33.<groovyjarjarantlr.Tool: void warning(java.lang.String,java.lang.String,int,int)>("Suffixing a root node with \'^\' is redundant; already a root", $r34, $i6, $i7);

        $r35 = r3.<groovyjarjarantlr.TreeElement: groovyjarjarantlr.GrammarAtom root>;

        virtualinvoke $r35.<groovyjarjarantlr.GrammarAtom: void setAutoGenType(int)>(1);

     label03:
        $r11 = r3.<groovyjarjarantlr.TreeElement: groovyjarjarantlr.GrammarAtom root>;

        specialinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void genElementAST(groovyjarjarantlr.AlternativeElement)>($r11);

        $r12 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z0 = $r12.<groovyjarjarantlr.Grammar: boolean buildAST>;

        if $z0 == 0 goto label04;

        $r27 = new java.lang.StringBuffer;

        specialinvoke $r27.<java.lang.StringBuffer: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_currentAST");

        $i5 = r3.<groovyjarjarantlr.TreeElement: int ID>;

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i5);

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = currentAST.copy()");

        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r31);

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("currentAST.root = currentAST.child");

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("currentAST.child = None");

     label04:
        $r13 = r3.<groovyjarjarantlr.TreeElement: groovyjarjarantlr.GrammarAtom root>;

        $z1 = $r13 instanceof groovyjarjarantlr.WildcardElement;

        if $z1 == 0 goto label05;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("if not _t: raise antlr.MismatchedTokenException()");

        goto label06;

     label05:
        $r14 = r3.<groovyjarjarantlr.TreeElement: groovyjarjarantlr.GrammarAtom root>;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void genMatch(groovyjarjarantlr.GrammarAtom)>($r14);

     label06:
        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("_t = _t.getFirstChild()");

        i10 = 0;

     label07:
        $r46 = virtualinvoke r3.<groovyjarjarantlr.TreeElement: groovyjarjarantlr.collections.impl.Vector getAlternatives()>();

        $i11 = virtualinvoke $r46.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if i10 >= $i11 goto label10;

        $r26 = virtualinvoke r3.<groovyjarjarantlr.TreeElement: groovyjarjarantlr.Alternative getAlternativeAt(int)>(i10);

        r47 = $r26.<groovyjarjarantlr.Alternative: groovyjarjarantlr.AlternativeElement head>;

     label08:
        if r47 == null goto label09;

        virtualinvoke r47.<groovyjarjarantlr.AlternativeElement: void generate()>();

        r47 = r47.<groovyjarjarantlr.AlternativeElement: groovyjarjarantlr.AlternativeElement next>;

        goto label08;

     label09:
        i10 = i10 + 1;

        goto label07;

     label10:
        $r15 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z2 = $r15.<groovyjarjarantlr.Grammar: boolean buildAST>;

        if $z2 == 0 goto label11;

        $r21 = new java.lang.StringBuffer;

        specialinvoke $r21.<java.lang.StringBuffer: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("currentAST = _currentAST");

        $i4 = r3.<groovyjarjarantlr.TreeElement: int ID>;

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i4);

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("");

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r25);

     label11:
        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_t = _t");

        $i3 = r3.<groovyjarjarantlr.TreeElement: int ID>;

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i3);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("");

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r20);

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("_t = _t.getNextSibling()");

        return;
    }

    public void gen(groovyjarjarantlr.TreeWalkerGrammar) throws java.io.IOException
    {
        java.util.Enumeration $r53;
        groovyjarjarantlr.TokenManager $r22;
        groovyjarjarantlr.collections.impl.Vector $r23, $r29, $r52;
        java.io.PrintWriter $r25;
        groovyjarjarantlr.PythonCodeGenerator r0;
        groovyjarjarantlr.GrammarSymbol r27;
        groovyjarjarantlr.Tool $r34;
        java.lang.StringBuffer $r13, $r14, $r17, $r37, $r38, $r40, $r41, $r42, $r43, $r45, $r46, $r47;
        java.lang.String $r4, $r7, $r10, $r12, $r16, $r30, $r31, r35, $r39, $r44, $r48;
        groovyjarjarantlr.RuleSymbol r28;
        groovyjarjarantlr.DefineGrammarSymbols $r6;
        groovyjarjarantlr.Grammar $r2, $r3, $r5, $r8, $r11, $r15, $r18, $r21, $r24, $r32, $r36, $r49, $r50, $r51;
        groovyjarjarantlr.Token $r9, $r33;
        boolean $z0, $z1, $z2, $z3, $z4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, i17;
        java.util.Hashtable $r19;
        groovyjarjarantlr.TreeWalkerGrammar r1;
        java.lang.Object $r20, $r26;

        r0 := @this: groovyjarjarantlr.PythonCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.TreeWalkerGrammar;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void setGrammar(groovyjarjarantlr.Grammar)>(r1);

        $r2 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z0 = $r2 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z0 != 0 goto label1;

        $r34 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        virtualinvoke $r34.<groovyjarjarantlr.Tool: void panic(java.lang.String)>("Internal error generating tree-walker");

     label1:
        $r3 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r4 = virtualinvoke $r3.<groovyjarjarantlr.Grammar: java.lang.String getClassName()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void setupOutput(java.lang.String)>($r4);

        $r5 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z1 = $r5.<groovyjarjarantlr.Grammar: boolean buildAST>;

        r0.<groovyjarjarantlr.PythonCodeGenerator: boolean genAST> = $z1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = 0;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void genHeader()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("### import antlr and other modules ..");

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("import sys");

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("import antlr");

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("");

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("version = sys.version.split()[0]");

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("if version < \'2.2.1\':");

        $i0 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i1 = $i0 + 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i1;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("False = 0");

        $i2 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i3 = $i2 - 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i3;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("if version < \'2.3\':");

        $i4 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i5 = $i4 + 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i5;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("True = not False");

        $i6 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i7 = $i6 - 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i7;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("### header action >>> ");

        $r6 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.DefineGrammarSymbols behavior>;

        $r7 = virtualinvoke $r6.<groovyjarjarantlr.DefineGrammarSymbols: java.lang.String getHeaderAction(java.lang.String)>("");

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void printActionCode(java.lang.String,int)>($r7, 0);

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("### header action <<< ");

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void flushTokens()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("### user code>>>");

        $r8 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r9 = $r8.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Token preambleAction>;

        $r10 = virtualinvoke $r9.<groovyjarjarantlr.Token: java.lang.String getText()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void printActionCode(java.lang.String,int)>($r10, 0);

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("### user code<<<");

        $r11 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r12 = $r11.<groovyjarjarantlr.Grammar: java.lang.String superClass>;

        if $r12 == null goto label2;

        $r32 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        r35 = $r32.<groovyjarjarantlr.Grammar: java.lang.String superClass>;

        goto label3;

     label2:
        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("antlr.");

        $r15 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r16 = virtualinvoke $r15.<groovyjarjarantlr.Grammar: java.lang.String getSuperClass()>();

        $r17 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r16);

        r35 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

     label3:
        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("");

        $r18 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r19 = $r18.<groovyjarjarantlr.Grammar: java.util.Hashtable options>;

        $r20 = virtualinvoke $r19.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>("classHeaderPrefix");

        $r33 = (groovyjarjarantlr.Token) $r20;

        if $r33 == null goto label4;

        $r30 = virtualinvoke $r33.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r31 = staticinvoke <groovyjarjarantlr.StringUtils: java.lang.String stripFrontBack(java.lang.String,java.lang.String,java.lang.String)>($r30, "\"", "\"");

        if $r31 == null goto label4;

     label4:
        $r36 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void genJavadocComment(groovyjarjarantlr.Grammar)>($r36);

        $r37 = new java.lang.StringBuffer;

        specialinvoke $r37.<java.lang.StringBuffer: void <init>()>();

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("class ");

        $r39 = r0.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String treeWalkerClassName>;

        $r40 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r39);

        $r41 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(");

        $r42 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r35);

        $r43 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("):");

        $r44 = virtualinvoke $r43.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r44);

        $i11 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i12 = $i11 + 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i12;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("");

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("# ctor ..");

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("def __init__(self, *args, **kwargs):");

        $i13 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i14 = $i13 + 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i14;

        $r45 = new java.lang.StringBuffer;

        specialinvoke $r45.<java.lang.StringBuffer: void <init>()>();

        $r46 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r35);

        $r47 = virtualinvoke $r46.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".__init__(self, *args, **kwargs)");

        $r48 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r48);

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("self.tokenNames = _tokenNames");

        $r49 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void genHeaderInit(groovyjarjarantlr.Grammar)>($r49);

        $i15 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i16 = $i15 - 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i16;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("");

        $r50 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void printGrammarAction(groovyjarjarantlr.Grammar)>($r50);

        $r51 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r52 = $r51.<groovyjarjarantlr.Grammar: groovyjarjarantlr.collections.impl.Vector rules>;

        $r53 = virtualinvoke $r52.<groovyjarjarantlr.collections.impl.Vector: java.util.Enumeration elements()>();

        i17 = 0;

     label5:
        $z3 = interfaceinvoke $r53.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z3 == 0 goto label9;

        $r26 = interfaceinvoke $r53.<java.util.Enumeration: java.lang.Object nextElement()>();

        r27 = (groovyjarjarantlr.GrammarSymbol) $r26;

        $z2 = r27 instanceof groovyjarjarantlr.RuleSymbol;

        if $z2 == 0 goto label8;

        r28 = (groovyjarjarantlr.RuleSymbol) r27;

        $r29 = r28.<groovyjarjarantlr.RuleSymbol: groovyjarjarantlr.collections.impl.Vector references>;

        $i9 = virtualinvoke $r29.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if $i9 != 0 goto label6;

        $z4 = 1;

        goto label7;

     label6:
        $z4 = 0;

     label7:
        $i10 = i17;

        i17 = i17 + 1;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void genRule(groovyjarjarantlr.RuleSymbol,boolean,int)>(r28, $z4, $i10);

     label8:
        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void exitIfError()>();

        goto label5;

     label9:
        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void genTokenStrings()>();

        $r23 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.collections.impl.Vector bitsetsUsed>;

        $r21 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r22 = $r21.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager>;

        $i8 = interfaceinvoke $r22.<groovyjarjarantlr.TokenManager: int maxTokenType()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void genBitsets(groovyjarjarantlr.collections.impl.Vector,int)>($r23, $i8);

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = 0;

        $r24 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void genHeaderMain(groovyjarjarantlr.Grammar)>($r24);

        $r25 = r0.<groovyjarjarantlr.PythonCodeGenerator: java.io.PrintWriter currentOutput>;

        virtualinvoke $r25.<java.io.PrintWriter: void close()>();

        r0.<groovyjarjarantlr.PythonCodeGenerator: java.io.PrintWriter currentOutput> = null;

        return;
    }

    public void gen(groovyjarjarantlr.WildcardElement)
    {
        groovyjarjarantlr.Grammar $r3, $r10, $r19, $r20, $r21;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        groovyjarjarantlr.PythonCodeGenerator r2;
        groovyjarjarantlr.WildcardElement r0;
        java.lang.StringBuffer $r4, $r5, $r7, $r8, $r11, $r13, $r14, $r16, $r17;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.String $r1, $r6, $r9, $r12, $r15, $r18;

        r2 := @this: groovyjarjarantlr.PythonCodeGenerator;

        r0 := @parameter0: groovyjarjarantlr.WildcardElement;

        $r1 = virtualinvoke r0.<groovyjarjarantlr.WildcardElement: java.lang.String getLabel()>();

        if $r1 == null goto label1;

        $i6 = r2.<groovyjarjarantlr.PythonCodeGenerator: int syntacticPredLevel>;

        if $i6 != 0 goto label1;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke r0.<groovyjarjarantlr.WildcardElement: java.lang.String getLabel()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = ");

        $r15 = r2.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String lt1Value>;

        $r16 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("");

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r2.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r18);

     label1:
        specialinvoke r2.<groovyjarjarantlr.PythonCodeGenerator: void genElementAST(groovyjarjarantlr.AlternativeElement)>(r0);

        $r19 = r2.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z4 = $r19 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z4 == 0 goto label2;

        virtualinvoke r2.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("if not _t:");

        $i2 = r2.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i3 = $i2 + 1;

        r2.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i3;

        virtualinvoke r2.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("raise antlr.MismatchedTokenException()");

        $i4 = r2.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i5 = $i4 - 1;

        r2.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i5;

        goto label7;

     label2:
        $r3 = r2.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z0 = $r3 instanceof groovyjarjarantlr.LexerGrammar;

        if $z0 == 0 goto label6;

        $r10 = r2.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z1 = $r10 instanceof groovyjarjarantlr.LexerGrammar;

        if $z1 == 0 goto label4;

        $z3 = r2.<groovyjarjarantlr.PythonCodeGenerator: boolean saveText>;

        if $z3 == 0 goto label3;

        $i1 = virtualinvoke r0.<groovyjarjarantlr.WildcardElement: int getAutoGenType()>();

        if $i1 != 3 goto label4;

     label3:
        virtualinvoke r2.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("_saveIndex = self.text.length()");

     label4:
        virtualinvoke r2.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("self.matchNot(antlr.EOF_CHAR)");

        $r20 = r2.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z5 = $r20 instanceof groovyjarjarantlr.LexerGrammar;

        if $z5 == 0 goto label7;

        $z2 = r2.<groovyjarjarantlr.PythonCodeGenerator: boolean saveText>;

        if $z2 == 0 goto label5;

        $i0 = virtualinvoke r0.<groovyjarjarantlr.WildcardElement: int getAutoGenType()>();

        if $i0 != 3 goto label7;

     label5:
        virtualinvoke r2.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("self.text.setLength(_saveIndex)");

        goto label7;

     label6:
        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("self.matchNot(");

        $r6 = specialinvoke r2.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String getValueString(int,boolean)>(1, 0);

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r2.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r9);

     label7:
        $r21 = r2.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z6 = $r21 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z6 == 0 goto label8;

        virtualinvoke r2.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("_t = _t.getNextSibling()");

     label8:
        return;
    }

    public void gen(groovyjarjarantlr.ZeroOrMoreBlock)
    {
        groovyjarjarantlr.Lookahead[] $r7, $r20;
        groovyjarjarantlr.LLkGrammarAnalyzer $r5;
        groovyjarjarantlr.ZeroOrMoreBlock r1;
        groovyjarjarantlr.Grammar $r4, $r6, $r19;
        groovyjarjarantlr.PythonBlockFinishingInfo $r23;
        boolean $z0, $z1, $z2, z3, $z4;
        groovyjarjarantlr.PythonCodeGenerator r0;
        java.lang.StringBuffer $r9, $r10, $r11, $r12, $r14, $r16, $r17;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12, $i13, $i14, $i15;
        java.lang.String r2, $r3, $r8, $r13, $r18, $r22;
        java.io.PrintStream $r15;
        groovyjarjarantlr.Lookahead $r21;

        r0 := @this: groovyjarjarantlr.PythonCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.ZeroOrMoreBlock;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void genBlockPreamble(groovyjarjarantlr.AlternativeBlock)>(r1);

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("while True:");

        $i0 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i1 = $i0 + 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i1;

        i11 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void genBlockInitAction(groovyjarjarantlr.AlternativeBlock)>(r1);

        r2 = r0.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String currentASTResult>;

        $r3 = virtualinvoke r1.<groovyjarjarantlr.ZeroOrMoreBlock: java.lang.String getLabel()>();

        if $r3 == null goto label1;

        $r22 = virtualinvoke r1.<groovyjarjarantlr.ZeroOrMoreBlock: java.lang.String getLabel()>();

        r0.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String currentASTResult> = $r22;

     label1:
        $r4 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r5 = $r4.<groovyjarjarantlr.Grammar: groovyjarjarantlr.LLkGrammarAnalyzer theLLkAnalyzer>;

        interfaceinvoke $r5.<groovyjarjarantlr.LLkGrammarAnalyzer: boolean deterministic(groovyjarjarantlr.ZeroOrMoreBlock)>(r1);

        z3 = 0;

        $r6 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        i12 = $r6.<groovyjarjarantlr.Grammar: int maxk>;

        $z0 = r1.<groovyjarjarantlr.ZeroOrMoreBlock: boolean greedy>;

        if $z0 != 0 goto label2;

        $i9 = r1.<groovyjarjarantlr.ZeroOrMoreBlock: int exitLookaheadDepth>;

        $r19 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $i8 = $r19.<groovyjarjarantlr.Grammar: int maxk>;

        if $i9 > $i8 goto label2;

        $r20 = r1.<groovyjarjarantlr.ZeroOrMoreBlock: groovyjarjarantlr.Lookahead[] exitCache>;

        $i10 = r1.<groovyjarjarantlr.ZeroOrMoreBlock: int exitLookaheadDepth>;

        $r21 = $r20[$i10];

        $z2 = virtualinvoke $r21.<groovyjarjarantlr.Lookahead: boolean containsEpsilon()>();

        if $z2 == 0 goto label2;

        z3 = 1;

        i12 = r1.<groovyjarjarantlr.ZeroOrMoreBlock: int exitLookaheadDepth>;

        goto label3;

     label2:
        $z4 = r1.<groovyjarjarantlr.ZeroOrMoreBlock: boolean greedy>;

        if $z4 != 0 goto label3;

        $i7 = r1.<groovyjarjarantlr.ZeroOrMoreBlock: int exitLookaheadDepth>;

        if $i7 != 2147483647 goto label3;

        z3 = 1;

     label3:
        if z3 == 0 goto label5;

        $z1 = r0.<groovyjarjarantlr.PythonCodeGenerator: boolean DEBUG_CODE_GENERATOR>;

        if $z1 == 0 goto label4;

        $r15 = <java.lang.System: java.io.PrintStream out>;

        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("nongreedy (...)* loop; exit depth is ");

        $i6 = r1.<groovyjarjarantlr.ZeroOrMoreBlock: int exitLookaheadDepth>;

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i6);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>($r18);

     label4:
        $r7 = r1.<groovyjarjarantlr.ZeroOrMoreBlock: groovyjarjarantlr.Lookahead[] exitCache>;

        $r8 = virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String getLookaheadTestExpression(groovyjarjarantlr.Lookahead[],int)>($r7, i12);

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("###  nongreedy exit test");

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("if (");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("):");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r13);

        $i2 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i3 = $i2 + 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i3;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("break");

        $i4 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i5 = $i4 - 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i5;

     label5:
        $i13 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $r23 = virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.PythonBlockFinishingInfo genCommonBlock(groovyjarjarantlr.AlternativeBlock,boolean)>(r1, 0);

        specialinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void genBlockFinish(groovyjarjarantlr.PythonBlockFinishingInfo,java.lang.String)>($r23, "break");

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i13;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = i11;

        $i14 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i15 = $i14 - 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i15;

        r0.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String currentASTResult> = r2;

        return;
    }

    protected void genAlt(groovyjarjarantlr.Alternative, groovyjarjarantlr.AlternativeBlock)
    {
        groovyjarjarantlr.Grammar $r5, $r9, $r15;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12;
        groovyjarjarantlr.RuleBlock r8;
        groovyjarjarantlr.PythonCodeGenerator r0;
        groovyjarjarantlr.Alternative r1;
        groovyjarjarantlr.AlternativeElement r19;
        groovyjarjarantlr.AlternativeBlock r3;
        groovyjarjarantlr.ExceptionSpec $r2, $r18, $r20;
        groovyjarjarantlr.Tool $r6;
        java.lang.StringBuffer $r10, $r12, $r13;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String $r4, $r7, $r11, $r14;
        java.util.Hashtable $r16, $r17;

        r0 := @this: groovyjarjarantlr.PythonCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.Alternative;

        r3 := @parameter1: groovyjarjarantlr.AlternativeBlock;

        z0 = r0.<groovyjarjarantlr.PythonCodeGenerator: boolean genAST>;

        $z1 = r0.<groovyjarjarantlr.PythonCodeGenerator: boolean genAST>;

        if $z1 == 0 goto label01;

        $z7 = virtualinvoke r1.<groovyjarjarantlr.Alternative: boolean getAutoGen()>();

        if $z7 == 0 goto label01;

        $z8 = 1;

        goto label02;

     label01:
        $z8 = 0;

     label02:
        r0.<groovyjarjarantlr.PythonCodeGenerator: boolean genAST> = $z8;

        $z9 = r0.<groovyjarjarantlr.PythonCodeGenerator: boolean saveText>;

        $z10 = r0.<groovyjarjarantlr.PythonCodeGenerator: boolean saveText>;

        if $z10 == 0 goto label03;

        $z6 = virtualinvoke r1.<groovyjarjarantlr.Alternative: boolean getAutoGen()>();

        if $z6 == 0 goto label03;

        $z11 = 1;

        goto label04;

     label03:
        $z11 = 0;

     label04:
        r0.<groovyjarjarantlr.PythonCodeGenerator: boolean saveText> = $z11;

        $r16 = r0.<groovyjarjarantlr.PythonCodeGenerator: java.util.Hashtable treeVariableMap>;

        $r17 = new java.util.Hashtable;

        specialinvoke $r17.<java.util.Hashtable: void <init>()>();

        r0.<groovyjarjarantlr.PythonCodeGenerator: java.util.Hashtable treeVariableMap> = $r17;

        $r18 = r1.<groovyjarjarantlr.Alternative: groovyjarjarantlr.ExceptionSpec exceptionSpec>;

        if $r18 == null goto label05;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("try:");

        $i4 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i5 = $i4 + 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i5;

     label05:
        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("pass");

        r19 = r1.<groovyjarjarantlr.Alternative: groovyjarjarantlr.AlternativeElement head>;

     label06:
        $z12 = r19 instanceof groovyjarjarantlr.BlockEndElement;

        if $z12 != 0 goto label07;

        virtualinvoke r19.<groovyjarjarantlr.AlternativeElement: void generate()>();

        r19 = r19.<groovyjarjarantlr.AlternativeElement: groovyjarjarantlr.AlternativeElement next>;

        goto label06;

     label07:
        $z2 = r0.<groovyjarjarantlr.PythonCodeGenerator: boolean genAST>;

        if $z2 == 0 goto label10;

        $z3 = r3 instanceof groovyjarjarantlr.RuleBlock;

        if $z3 == 0 goto label09;

        r8 = (groovyjarjarantlr.RuleBlock) r3;

        $r9 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z4 = $r9.<groovyjarjarantlr.Grammar: boolean hasSyntacticPredicate>;

        if $z4 == 0 goto label08;

     label08:
        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke r8.<groovyjarjarantlr.RuleBlock: java.lang.String getRuleName()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_AST = currentAST.root");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r14);

        $r15 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z5 = $r15.<groovyjarjarantlr.Grammar: boolean hasSyntacticPredicate>;

        if $z5 == 0 goto label10;

        goto label10;

     label09:
        $r4 = virtualinvoke r3.<groovyjarjarantlr.AlternativeBlock: java.lang.String getLabel()>();

        if $r4 == null goto label10;

        $r6 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r5 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r7 = virtualinvoke $r5.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i2 = virtualinvoke r3.<groovyjarjarantlr.AlternativeBlock: int getLine()>();

        $i3 = virtualinvoke r3.<groovyjarjarantlr.AlternativeBlock: int getColumn()>();

        virtualinvoke $r6.<groovyjarjarantlr.Tool: void warning(java.lang.String,java.lang.String,int,int)>("Labeled subrules not yet supported", $r7, $i2, $i3);

     label10:
        $r20 = r1.<groovyjarjarantlr.Alternative: groovyjarjarantlr.ExceptionSpec exceptionSpec>;

        if $r20 == null goto label11;

        $i0 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i1 = $i0 - 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i1;

        $r2 = r1.<groovyjarjarantlr.Alternative: groovyjarjarantlr.ExceptionSpec exceptionSpec>;

        specialinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void genErrorHandler(groovyjarjarantlr.ExceptionSpec)>($r2);

     label11:
        r0.<groovyjarjarantlr.PythonCodeGenerator: boolean genAST> = z0;

        r0.<groovyjarjarantlr.PythonCodeGenerator: boolean saveText> = $z9;

        r0.<groovyjarjarantlr.PythonCodeGenerator: java.util.Hashtable treeVariableMap> = $r16;

        return;
    }

    protected void genBitsets(groovyjarjarantlr.collections.impl.Vector, int)
    {
        int $i0, i1, i2;
        java.lang.Object $r2;
        groovyjarjarantlr.collections.impl.BitSet r3;
        groovyjarjarantlr.PythonCodeGenerator r0;
        groovyjarjarantlr.collections.impl.Vector r1;

        r0 := @this: groovyjarjarantlr.PythonCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.collections.impl.Vector;

        i1 := @parameter1: int;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("");

        i2 = 0;

     label1:
        $i0 = virtualinvoke r1.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if i2 >= $i0 goto label2;

        $r2 = virtualinvoke r1.<groovyjarjarantlr.collections.impl.Vector: java.lang.Object elementAt(int)>(i2);

        r3 = (groovyjarjarantlr.collections.impl.BitSet) $r2;

        virtualinvoke r3.<groovyjarjarantlr.collections.impl.BitSet: void growToInclude(int)>(i1);

        specialinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void genBitSet(groovyjarjarantlr.collections.impl.BitSet,int)>(r3, i2);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    private void genBitSet(groovyjarjarantlr.collections.impl.BitSet, int)
    {
        byte $b8, $b15, $b23;
        groovyjarjarantlr.PythonCodeGenerator r0;
        long $l7, $l11, $l13, $l14, $l21, $l22, $l24;
        java.lang.StringBuffer $r1, $r2, $r4, $r5, $r8, $r9, $r10, $r11, $r14, $r16, $r17, $r19, $r20, $r22, $r23, $r24, $r25, $r26, $r27, $r29, $r30, $r31, $r32, $r33, $r34, $r36, $r37, $r38, $r39, $r41, $r42, $r44, $r45;
        java.lang.String $r3, $r6, $r12, $r15, $r18, $r21, $r28, $r35, $r40, $r43, $r46;
        groovyjarjarantlr.collections.impl.BitSet r7;
        long[] $r13;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i9, $i10, $i12, $i16, $i17, $i18, $i19, $i20, i25, $i26, i27;

        r0 := @this: groovyjarjarantlr.PythonCodeGenerator;

        r7 := @parameter0: groovyjarjarantlr.collections.impl.BitSet;

        i1 := @parameter1: int;

        i0 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = 0;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("");

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("### generate bit set");

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("def mk");

        $r3 = virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String getBitsetName(int)>(i1);

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(): ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r6);

        $i2 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i3 = $i2 + 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i3;

        $i4 = virtualinvoke r7.<groovyjarjarantlr.collections.impl.BitSet: int lengthInLongWords()>();

        if $i4 >= 8 goto label1;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("### var1");

        $r41 = new java.lang.StringBuffer;

        specialinvoke $r41.<java.lang.StringBuffer: void <init>()>();

        $r42 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("data = [ ");

        $r43 = virtualinvoke r7.<groovyjarjarantlr.collections.impl.BitSet: java.lang.String toStringOfWords()>();

        $r44 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r43);

        $r45 = virtualinvoke $r44.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r46 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r46);

        goto label8;

     label1:
        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("data = [0L] * ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i4);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ### init list");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r12);

        $r13 = virtualinvoke r7.<groovyjarjarantlr.collections.impl.BitSet: long[] toPackedArray()>();

        i25 = 0;

     label2:
        $i26 = lengthof $r13;

        if i25 >= $i26 goto label8;

        $l7 = $r13[i25];

        $b8 = $l7 cmp 0L;

        if $b8 != 0 goto label3;

        i25 = i25 + 1;

        goto label2;

     label3:
        $i10 = i25 + 1;

        $i9 = lengthof $r13;

        if $i10 == $i9 goto label4;

        $l14 = $r13[i25];

        $i12 = i25 + 1;

        $l13 = $r13[$i12];

        $b15 = $l14 cmp $l13;

        if $b15 == 0 goto label5;

     label4:
        $r22 = new java.lang.StringBuffer;

        specialinvoke $r22.<java.lang.StringBuffer: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("data[");

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i25);

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] =");

        $l11 = $r13[i25];

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>($l11);

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("L");

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r28);

        i25 = i25 + 1;

        goto label2;

     label5:
        i27 = i25 + 1;

     label6:
        $i16 = lengthof $r13;

        if i27 >= $i16 goto label7;

        $l22 = $r13[i27];

        $l21 = $r13[i25];

        $b23 = $l22 cmp $l21;

        if $b23 != 0 goto label7;

        i27 = i27 + 1;

        goto label6;

     label7:
        $l24 = $r13[i25];

        $r29 = new java.lang.StringBuffer;

        specialinvoke $r29.<java.lang.StringBuffer: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("for x in xrange(");

        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i25);

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i27);

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("):");

        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r35);

        $i17 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i18 = $i17 + 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i18;

        $r36 = new java.lang.StringBuffer;

        specialinvoke $r36.<java.lang.StringBuffer: void <init>()>();

        $r37 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("data[x] = ");

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>($l24);

        $r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("L");

        $r40 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r40);

        $i19 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i20 = $i19 - 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i20;

        i25 = i27;

        goto label2;

     label8:
        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("return data");

        $i5 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i6 = $i5 - 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i6;

        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();

        $r15 = virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String getBitsetName(int)>(i1);

        $r16 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = antlr.BitSet(mk");

        $r18 = virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String getBitsetName(int)>(i1);

        $r19 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("())");

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r21);

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = i0;

        return;
    }

    private void genBlockFinish(groovyjarjarantlr.PythonBlockFinishingInfo, java.lang.String)
    {
        groovyjarjarantlr.PythonCodeGenerator r1;
        groovyjarjarantlr.PythonBlockFinishingInfo r0;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r2, r3, $r4;
        boolean $z0, $z1, $z2, $z3;

        r1 := @this: groovyjarjarantlr.PythonCodeGenerator;

        r0 := @parameter0: groovyjarjarantlr.PythonBlockFinishingInfo;

        r3 := @parameter1: java.lang.String;

        $z0 = r0.<groovyjarjarantlr.PythonBlockFinishingInfo: boolean needAnErrorClause>;

        if $z0 == 0 goto label3;

        $z1 = r0.<groovyjarjarantlr.PythonBlockFinishingInfo: boolean generatedAnIf>;

        if $z1 != 0 goto label1;

        $z3 = r0.<groovyjarjarantlr.PythonBlockFinishingInfo: boolean generatedSwitch>;

        if $z3 == 0 goto label3;

     label1:
        $z2 = r0.<groovyjarjarantlr.PythonBlockFinishingInfo: boolean generatedAnIf>;

        if $z2 == 0 goto label2;

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("else:");

     label2:
        $i0 = r1.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i1 = $i0 + 1;

        r1.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i1;

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>(r3);

        $i2 = r1.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i3 = $i2 - 1;

        r1.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i3;

     label3:
        $r4 = r0.<groovyjarjarantlr.PythonBlockFinishingInfo: java.lang.String postscript>;

        if $r4 == null goto label4;

        $r2 = r0.<groovyjarjarantlr.PythonBlockFinishingInfo: java.lang.String postscript>;

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r2);

     label4:
        return;
    }

    private void genBlockFinish1(groovyjarjarantlr.PythonBlockFinishingInfo, java.lang.String)
    {
        groovyjarjarantlr.PythonCodeGenerator r1;
        groovyjarjarantlr.PythonBlockFinishingInfo r0;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r2, r3, $r4;
        boolean $z0, $z1, $z2, $z3, $z4;

        r1 := @this: groovyjarjarantlr.PythonCodeGenerator;

        r0 := @parameter0: groovyjarjarantlr.PythonBlockFinishingInfo;

        r3 := @parameter1: java.lang.String;

        $z0 = r0.<groovyjarjarantlr.PythonBlockFinishingInfo: boolean needAnErrorClause>;

        if $z0 == 0 goto label3;

        $z1 = r0.<groovyjarjarantlr.PythonBlockFinishingInfo: boolean generatedAnIf>;

        if $z1 != 0 goto label1;

        $z4 = r0.<groovyjarjarantlr.PythonBlockFinishingInfo: boolean generatedSwitch>;

        if $z4 == 0 goto label3;

     label1:
        $z2 = r0.<groovyjarjarantlr.PythonBlockFinishingInfo: boolean generatedAnIf>;

        if $z2 == 0 goto label2;

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("else:");

     label2:
        $i0 = r1.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i1 = $i0 + 1;

        r1.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i1;

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>(r3);

        $i2 = r1.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i3 = $i2 - 1;

        r1.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i3;

        $z3 = r0.<groovyjarjarantlr.PythonBlockFinishingInfo: boolean generatedAnIf>;

        if $z3 == 0 goto label3;

     label3:
        $r4 = r0.<groovyjarjarantlr.PythonBlockFinishingInfo: java.lang.String postscript>;

        if $r4 == null goto label4;

        $r2 = r0.<groovyjarjarantlr.PythonBlockFinishingInfo: java.lang.String postscript>;

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r2);

     label4:
        return;
    }

    protected void genBlockInitAction(groovyjarjarantlr.AlternativeBlock)
    {
        groovyjarjarantlr.AlternativeBlock r0;
        groovyjarjarantlr.RuleBlock $r4;
        int $i0;
        java.lang.String $r1, $r3, $r5;
        groovyjarjarantlr.PythonCodeGenerator r2;

        r2 := @this: groovyjarjarantlr.PythonCodeGenerator;

        r0 := @parameter0: groovyjarjarantlr.AlternativeBlock;

        $r1 = r0.<groovyjarjarantlr.AlternativeBlock: java.lang.String initAction>;

        if $r1 == null goto label1;

        $r3 = r0.<groovyjarjarantlr.AlternativeBlock: java.lang.String initAction>;

        $i0 = virtualinvoke r0.<groovyjarjarantlr.AlternativeBlock: int getLine()>();

        $r4 = r2.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.RuleBlock currentRule>;

        $r5 = virtualinvoke r2.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String processActionForSpecialSymbols(java.lang.String,int,groovyjarjarantlr.RuleBlock,groovyjarjarantlr.ActionTransInfo)>($r3, $i0, $r4, null);

        virtualinvoke r2.<groovyjarjarantlr.PythonCodeGenerator: void printAction(java.lang.String)>($r5);

     label1:
        return;
    }

    protected void genBlockPreamble(groovyjarjarantlr.AlternativeBlock)
    {
        groovyjarjarantlr.LLkGrammarAnalyzer $r25;
        groovyjarjarantlr.collections.impl.Vector $r2, $r3, $r4;
        groovyjarjarantlr.RuleBlock r1;
        groovyjarjarantlr.PythonCodeGenerator r7;
        java.lang.StringBuffer $r10, $r12, $r13, $r15, $r17, $r19, $r20, $r26, $r28, $r29, $r31, $r39, $r41, $r42, $r44;
        java.lang.String $r11, $r14, $r16, $r18, $r21, $r27, $r30, $r32, $r35, $r37, $r40, $r43, $r45;
        groovyjarjarantlr.GrammarAtom $r34, r36;
        groovyjarjarantlr.Grammar $r8, $r9, $r23, $r33, $r38, $r46;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14;
        groovyjarjarantlr.AlternativeElement r6;
        groovyjarjarantlr.AlternativeBlock r0, $r22, $r24;
        int $i0, i1;
        java.lang.Object $r5;

        r7 := @this: groovyjarjarantlr.PythonCodeGenerator;

        r0 := @parameter0: groovyjarjarantlr.AlternativeBlock;

        $z0 = r0 instanceof groovyjarjarantlr.RuleBlock;

        if $z0 == 0 goto label9;

        r1 = (groovyjarjarantlr.RuleBlock) r0;

        $r2 = r1.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.collections.impl.Vector labeledElements>;

        if $r2 == null goto label9;

        i1 = 0;

     label1:
        $r3 = r1.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.collections.impl.Vector labeledElements>;

        $i0 = virtualinvoke $r3.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if i1 >= $i0 goto label9;

        $r4 = r1.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.collections.impl.Vector labeledElements>;

        $r5 = virtualinvoke $r4.<groovyjarjarantlr.collections.impl.Vector: java.lang.Object elementAt(int)>(i1);

        r6 = (groovyjarjarantlr.AlternativeElement) $r5;

        $z1 = r6 instanceof groovyjarjarantlr.RuleRefElement;

        if $z1 != 0 goto label2;

        $z9 = r6 instanceof groovyjarjarantlr.AlternativeBlock;

        if $z9 == 0 goto label6;

        $z11 = r6 instanceof groovyjarjarantlr.RuleBlock;

        if $z11 != 0 goto label6;

        $z12 = r6 instanceof groovyjarjarantlr.SynPredBlock;

        if $z12 != 0 goto label6;

     label2:
        $z2 = r6 instanceof groovyjarjarantlr.RuleRefElement;

        if $z2 != 0 goto label3;

        $r22 = (groovyjarjarantlr.AlternativeBlock) r6;

        $z5 = $r22.<groovyjarjarantlr.AlternativeBlock: boolean not>;

        if $z5 == 0 goto label3;

        $r25 = r7.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.LLkGrammarAnalyzer analyzer>;

        $r24 = (groovyjarjarantlr.AlternativeBlock) r6;

        $r23 = r7.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z6 = $r23 instanceof groovyjarjarantlr.LexerGrammar;

        $z7 = interfaceinvoke $r25.<groovyjarjarantlr.LLkGrammarAnalyzer: boolean subruleCanBeInverted(groovyjarjarantlr.AlternativeBlock,boolean)>($r24, $z6);

        if $z7 == 0 goto label3;

        $r26 = new java.lang.StringBuffer;

        specialinvoke $r26.<java.lang.StringBuffer: void <init>()>();

        $r27 = virtualinvoke r6.<groovyjarjarantlr.AlternativeElement: java.lang.String getLabel()>();

        $r28 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = ");

        $r30 = r7.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String labeledElementInit>;

        $r31 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r7.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r32);

        $r33 = r7.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z8 = $r33.<groovyjarjarantlr.Grammar: boolean buildAST>;

        if $z8 == 0 goto label8;

        virtualinvoke r7.<groovyjarjarantlr.PythonCodeGenerator: void genASTDeclaration(groovyjarjarantlr.AlternativeElement)>(r6);

        goto label8;

     label3:
        $r38 = r7.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z13 = $r38.<groovyjarjarantlr.Grammar: boolean buildAST>;

        if $z13 == 0 goto label4;

        virtualinvoke r7.<groovyjarjarantlr.PythonCodeGenerator: void genASTDeclaration(groovyjarjarantlr.AlternativeElement)>(r6);

     label4:
        $r8 = r7.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z3 = $r8 instanceof groovyjarjarantlr.LexerGrammar;

        if $z3 == 0 goto label5;

        $r17 = new java.lang.StringBuffer;

        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        $r18 = virtualinvoke r6.<groovyjarjarantlr.AlternativeElement: java.lang.String getLabel()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = None");

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r7.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r21);

     label5:
        $r9 = r7.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z4 = $r9 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z4 == 0 goto label8;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke r6.<groovyjarjarantlr.AlternativeElement: java.lang.String getLabel()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = ");

        $r14 = r7.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String labeledElementInit>;

        $r15 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r7.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r16);

        goto label8;

     label6:
        $r39 = new java.lang.StringBuffer;

        specialinvoke $r39.<java.lang.StringBuffer: void <init>()>();

        $r40 = virtualinvoke r6.<groovyjarjarantlr.AlternativeElement: java.lang.String getLabel()>();

        $r41 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r40);

        $r42 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = ");

        $r43 = r7.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String labeledElementInit>;

        $r44 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r43);

        $r45 = virtualinvoke $r44.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r7.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r45);

        $r46 = r7.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z14 = $r46.<groovyjarjarantlr.Grammar: boolean buildAST>;

        if $z14 == 0 goto label8;

        $z10 = r6 instanceof groovyjarjarantlr.GrammarAtom;

        if $z10 == 0 goto label7;

        $r34 = (groovyjarjarantlr.GrammarAtom) r6;

        $r35 = virtualinvoke $r34.<groovyjarjarantlr.GrammarAtom: java.lang.String getASTNodeType()>();

        if $r35 == null goto label7;

        r36 = (groovyjarjarantlr.GrammarAtom) r6;

        $r37 = virtualinvoke r36.<groovyjarjarantlr.GrammarAtom: java.lang.String getASTNodeType()>();

        virtualinvoke r7.<groovyjarjarantlr.PythonCodeGenerator: void genASTDeclaration(groovyjarjarantlr.AlternativeElement,java.lang.String)>(r6, $r37);

        goto label8;

     label7:
        virtualinvoke r7.<groovyjarjarantlr.PythonCodeGenerator: void genASTDeclaration(groovyjarjarantlr.AlternativeElement)>(r6);

     label8:
        i1 = i1 + 1;

        goto label1;

     label9:
        return;
    }

    protected void genCases(groovyjarjarantlr.collections.impl.BitSet)
    {
        groovyjarjarantlr.Grammar $r3, $r4;
        int[] $r2;
        java.lang.StringBuffer $r7, $r9, $r10, $r11;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7;
        java.lang.String $r5, $r6, $r12;
        boolean $z0, $z1, $z2;
        java.io.PrintStream $r8;
        groovyjarjarantlr.collections.impl.BitSet r1;
        groovyjarjarantlr.PythonCodeGenerator r0;

        r0 := @this: groovyjarjarantlr.PythonCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.collections.impl.BitSet;

        $z0 = r0.<groovyjarjarantlr.PythonCodeGenerator: boolean DEBUG_CODE_GENERATOR>;

        if $z0 == 0 goto label1;

        $r8 = <java.lang.System: java.io.PrintStream out>;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("genCases(");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r12);

     label1:
        $r2 = virtualinvoke r1.<groovyjarjarantlr.collections.impl.BitSet: int[] toArray()>();

        $r3 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z1 = $r3 instanceof groovyjarjarantlr.LexerGrammar;

        if $z1 == 0 goto label2;

        goto label2;

     label2:
        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void print(java.lang.String)>("elif la1 and la1 in ");

        $r4 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z2 = $r4 instanceof groovyjarjarantlr.LexerGrammar;

        if $z2 == 0 goto label5;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void _print(java.lang.String)>("u\'");

        i6 = 0;

     label3:
        $i4 = lengthof $r2;

        if i6 >= $i4 goto label4;

        $i5 = $r2[i6];

        $r6 = specialinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String getValueString(int,boolean)>($i5, 0);

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void _print(java.lang.String)>($r6);

        i6 = i6 + 1;

        goto label3;

     label4:
        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void _print(java.lang.String)>("\':\n");

        return;

     label5:
        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void _print(java.lang.String)>("[");

        i7 = 0;

     label6:
        $i0 = lengthof $r2;

        if i7 >= $i0 goto label8;

        $i1 = $r2[i7];

        $r5 = specialinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String getValueString(int,boolean)>($i1, 0);

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void _print(java.lang.String)>($r5);

        $i3 = i7 + 1;

        $i2 = lengthof $r2;

        if $i3 >= $i2 goto label7;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void _print(java.lang.String)>(",");

     label7:
        i7 = i7 + 1;

        goto label6;

     label8:
        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void _print(java.lang.String)>("]:\n");

        return;
    }

    public groovyjarjarantlr.PythonBlockFinishingInfo genCommonBlock(groovyjarjarantlr.AlternativeBlock, boolean)
    {
        groovyjarjarantlr.LLkGrammarAnalyzer $r108, $r109;
        groovyjarjarantlr.PythonCodeGenerator r0;
        groovyjarjarantlr.SynPredBlock $r13, $r20, $r21, $r27, $r52, $r97, $r104, $r106;
        java.lang.StringBuffer $r16, $r17, $r18, $r23, $r24, $r25, $r35, $r36, $r37, $r38, $r39, $r41, $r42, $r43, $r46, $r47, $r48, $r49, $r54, $r55, $r56, $r59, $r60, $r61, $r65, $r66, $r67, $r68, $r76, $r77, $r83, $r84, $r113, $r114, $r117, $r118, $r123, $r124, $r126, $r137, $r138, $r139, $r140, $r141, $r142, $r143, $r145, $r146, $r147, $r148;
        groovyjarjarantlr.Grammar $r4, $r7, $r8, $r9, $r14, $r32, $r33, $r50, $r72, $r79, $r81, $r90, $r100, $r107, $r120, $r130;
        groovyjarjarantlr.CharFormatter $r44;
        groovyjarjarantlr.AlternativeElement $r93, $r94;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, i38, i39, i40, $i41, i42, $i43, $i44, i45, i46, i47, $i48, $i49, $i50, $i51, $i53, $i55;
        java.io.PrintStream $r64, $r73, $r75, $r128;
        groovyjarjarantlr.Lookahead $r11, $r71, $r110, r133;
        groovyjarjarantlr.Lookahead[] $r10, $r70, $r87;
        groovyjarjarantlr.collections.impl.Vector $r3, $r5, $r131, $r132;
        groovyjarjarantlr.RuleBlock $r29;
        groovyjarjarantlr.Tool $r91, $r101;
        java.lang.String $r19, $r26, $r30, $r31, $r45, $r51, $r57, $r62, $r69, $r78, $r80, $r85, $r92, $r98, $r99, $r102, $r111, $r116, $r119, $r122, $r125, $r127, r129, r134, $r135;
        groovyjarjarantlr.ActionTransInfo $r144;
        groovyjarjarantlr.PythonBlockFinishingInfo $r136;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, z18, $z19, $z20, $z21, $z22, $z23, $z24, z25, $z26, $z27, $z28, $z29, $z30, $z31, z32, $z33, $z34, z35, z36;
        groovyjarjarantlr.collections.impl.BitSet $r12, $r88, $r89, $r115;
        groovyjarjarantlr.Alternative $r6, $r86, $r95, $r96, $r103, $r105;
        groovyjarjarantlr.AlternativeBlock r2;

        r0 := @this: groovyjarjarantlr.PythonCodeGenerator;

        r2 := @parameter0: groovyjarjarantlr.AlternativeBlock;

        z18 := @parameter1: boolean;

        i38 = 0;

        z25 = 0;

        z36 = 0;

        z35 = 0;

        $r136 = new groovyjarjarantlr.PythonBlockFinishingInfo;

        specialinvoke $r136.<groovyjarjarantlr.PythonBlockFinishingInfo: void <init>()>();

        z0 = r0.<groovyjarjarantlr.PythonCodeGenerator: boolean genAST>;

        $z1 = r0.<groovyjarjarantlr.PythonCodeGenerator: boolean genAST>;

        if $z1 == 0 goto label01;

        $z24 = virtualinvoke r2.<groovyjarjarantlr.AlternativeBlock: boolean getAutoGen()>();

        if $z24 == 0 goto label01;

        $z26 = 1;

        goto label02;

     label01:
        $z26 = 0;

     label02:
        r0.<groovyjarjarantlr.PythonCodeGenerator: boolean genAST> = $z26;

        $z27 = r0.<groovyjarjarantlr.PythonCodeGenerator: boolean saveText>;

        $z28 = r0.<groovyjarjarantlr.PythonCodeGenerator: boolean saveText>;

        if $z28 == 0 goto label03;

        $z23 = virtualinvoke r2.<groovyjarjarantlr.AlternativeBlock: boolean getAutoGen()>();

        if $z23 == 0 goto label03;

        $z29 = 1;

        goto label04;

     label03:
        $z29 = 0;

     label04:
        r0.<groovyjarjarantlr.PythonCodeGenerator: boolean saveText> = $z29;

        $z30 = r2.<groovyjarjarantlr.AlternativeBlock: boolean not>;

        if $z30 == 0 goto label09;

        $r108 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.LLkGrammarAnalyzer analyzer>;

        $r107 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z19 = $r107 instanceof groovyjarjarantlr.LexerGrammar;

        $z20 = interfaceinvoke $r108.<groovyjarjarantlr.LLkGrammarAnalyzer: boolean subruleCanBeInverted(groovyjarjarantlr.AlternativeBlock,boolean)>(r2, $z19);

        if $z20 == 0 goto label09;

        $z21 = r0.<groovyjarjarantlr.PythonCodeGenerator: boolean DEBUG_CODE_GENERATOR>;

        if $z21 == 0 goto label05;

        $r128 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r128.<java.io.PrintStream: void println(java.lang.String)>("special case: ~(subrule)");

     label05:
        $r109 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.LLkGrammarAnalyzer analyzer>;

        $r110 = interfaceinvoke $r109.<groovyjarjarantlr.LLkGrammarAnalyzer: groovyjarjarantlr.Lookahead look(int,groovyjarjarantlr.AlternativeBlock)>(1, r2);

        $r111 = virtualinvoke r2.<groovyjarjarantlr.AlternativeBlock: java.lang.String getLabel()>();

        if $r111 == null goto label06;

        $i37 = r0.<groovyjarjarantlr.PythonCodeGenerator: int syntacticPredLevel>;

        if $i37 != 0 goto label06;

        $r137 = new java.lang.StringBuffer;

        specialinvoke $r137.<java.lang.StringBuffer: void <init>()>();

        $r122 = virtualinvoke r2.<groovyjarjarantlr.AlternativeBlock: java.lang.String getLabel()>();

        $r123 = virtualinvoke $r137.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r122);

        $r124 = virtualinvoke $r123.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = ");

        $r125 = r0.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String lt1Value>;

        $r126 = virtualinvoke $r124.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r125);

        $r127 = virtualinvoke $r126.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r127);

     label06:
        specialinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void genElementAST(groovyjarjarantlr.AlternativeElement)>(r2);

        r129 = "";

        $r130 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z31 = $r130 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z31 == 0 goto label07;

        r129 = "_t, ";

     label07:
        $r138 = new java.lang.StringBuffer;

        specialinvoke $r138.<java.lang.StringBuffer: void <init>()>();

        $r113 = virtualinvoke $r138.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("self.match(");

        $r114 = virtualinvoke $r113.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r129);

        $r115 = $r110.<groovyjarjarantlr.Lookahead: groovyjarjarantlr.collections.impl.BitSet fset>;

        $i36 = virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: int markBitsetForGen(groovyjarjarantlr.collections.impl.BitSet)>($r115);

        $r116 = virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String getBitsetName(int)>($i36);

        $r117 = virtualinvoke $r114.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r116);

        $r118 = virtualinvoke $r117.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r119 = virtualinvoke $r118.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r119);

        $r120 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z22 = $r120 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z22 == 0 goto label08;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("_t = _t.getNextSibling()");

     label08:
        return $r136;

     label09:
        $r3 = virtualinvoke r2.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.collections.impl.Vector getAlternatives()>();

        $i0 = virtualinvoke $r3.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if $i0 != 1 goto label12;

        $r96 = virtualinvoke r2.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.Alternative getAlternativeAt(int)>(0);

        $r97 = $r96.<groovyjarjarantlr.Alternative: groovyjarjarantlr.SynPredBlock synPred>;

        if $r97 == null goto label10;

        $r101 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r100 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r102 = virtualinvoke $r100.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $r103 = virtualinvoke r2.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.Alternative getAlternativeAt(int)>(0);

        $r104 = $r103.<groovyjarjarantlr.Alternative: groovyjarjarantlr.SynPredBlock synPred>;

        $i34 = virtualinvoke $r104.<groovyjarjarantlr.SynPredBlock: int getLine()>();

        $r105 = virtualinvoke r2.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.Alternative getAlternativeAt(int)>(0);

        $r106 = $r105.<groovyjarjarantlr.Alternative: groovyjarjarantlr.SynPredBlock synPred>;

        $i35 = virtualinvoke $r106.<groovyjarjarantlr.SynPredBlock: int getColumn()>();

        virtualinvoke $r101.<groovyjarjarantlr.Tool: void warning(java.lang.String,java.lang.String,int,int)>("Syntactic predicate superfluous for single alternative", $r102, $i34, $i35);

     label10:
        if z18 == 0 goto label12;

        $r98 = $r96.<groovyjarjarantlr.Alternative: java.lang.String semPred>;

        if $r98 == null goto label11;

        $r99 = $r96.<groovyjarjarantlr.Alternative: java.lang.String semPred>;

        $i33 = r2.<groovyjarjarantlr.AlternativeBlock: int line>;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void genSemPred(java.lang.String,int)>($r99, $i33);

     label11:
        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void genAlt(groovyjarjarantlr.Alternative,groovyjarjarantlr.AlternativeBlock)>($r96, r2);

        return $r136;

     label12:
        i39 = 0;

        i40 = 0;

     label13:
        $r131 = virtualinvoke r2.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.collections.impl.Vector getAlternatives()>();

        $i41 = virtualinvoke $r131.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if i40 >= $i41 goto label15;

        $r95 = virtualinvoke r2.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.Alternative getAlternativeAt(int)>(i40);

        $z17 = staticinvoke <groovyjarjarantlr.PythonCodeGenerator: boolean suitableForCaseExpression(groovyjarjarantlr.Alternative)>($r95);

        if $z17 == 0 goto label14;

        i39 = i39 + 1;

     label14:
        i40 = i40 + 1;

        goto label13;

     label15:
        $i1 = r0.<groovyjarjarantlr.PythonCodeGenerator: int makeSwitchThreshold>;

        if i39 < $i1 goto label22;

        $r80 = specialinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String lookaheadString(int)>(1);

        z25 = 1;

        z36 = 1;

        z35 = 1;

        $r81 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z14 = $r81 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z14 == 0 goto label16;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("if not _t:");

        $i29 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i30 = $i29 + 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i30;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("_t = antlr.ASTNULL");

        $i31 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i32 = $i31 - 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i32;

     label16:
        $r139 = new java.lang.StringBuffer;

        specialinvoke $r139.<java.lang.StringBuffer: void <init>()>();

        $r83 = virtualinvoke $r139.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("la1 = ");

        $r84 = virtualinvoke $r83.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r80);

        $r85 = virtualinvoke $r84.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r85);

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("if False:");

        $i16 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i17 = $i16 + 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i17;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("pass");

        $i18 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i19 = $i18 - 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i19;

        i42 = 0;

     label17:
        $r132 = r2.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.collections.impl.Vector alternatives>;

        $i43 = virtualinvoke $r132.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if i42 >= $i43 goto label21;

        $r86 = virtualinvoke r2.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.Alternative getAlternativeAt(int)>(i42);

        $z15 = staticinvoke <groovyjarjarantlr.PythonCodeGenerator: boolean suitableForCaseExpression(groovyjarjarantlr.Alternative)>($r86);

        if $z15 != 0 goto label18;

        goto label20;

     label18:
        $r87 = $r86.<groovyjarjarantlr.Alternative: groovyjarjarantlr.Lookahead[] cache>;

        r133 = $r87[1];

        $r88 = r133.<groovyjarjarantlr.Lookahead: groovyjarjarantlr.collections.impl.BitSet fset>;

        $i22 = virtualinvoke $r88.<groovyjarjarantlr.collections.impl.BitSet: int degree()>();

        if $i22 != 0 goto label19;

        $z16 = virtualinvoke r133.<groovyjarjarantlr.Lookahead: boolean containsEpsilon()>();

        if $z16 != 0 goto label19;

        $r91 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r90 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r92 = virtualinvoke $r90.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $r93 = $r86.<groovyjarjarantlr.Alternative: groovyjarjarantlr.AlternativeElement head>;

        $i27 = virtualinvoke $r93.<groovyjarjarantlr.AlternativeElement: int getLine()>();

        $r94 = $r86.<groovyjarjarantlr.Alternative: groovyjarjarantlr.AlternativeElement head>;

        $i28 = virtualinvoke $r94.<groovyjarjarantlr.AlternativeElement: int getColumn()>();

        virtualinvoke $r91.<groovyjarjarantlr.Tool: void warning(java.lang.String,java.lang.String,int,int)>("Alternate omitted due to empty prediction set", $r92, $i27, $i28);

        goto label20;

     label19:
        $r89 = r133.<groovyjarjarantlr.Lookahead: groovyjarjarantlr.collections.impl.BitSet fset>;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void genCases(groovyjarjarantlr.collections.impl.BitSet)>($r89);

        $i23 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i24 = $i23 + 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i24;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void genAlt(groovyjarjarantlr.Alternative,groovyjarjarantlr.AlternativeBlock)>($r86, r2);

        $i25 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i26 = $i25 - 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i26;

     label20:
        i42 = i42 + 1;

        goto label17;

     label21:
        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("else:");

        $i20 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i21 = $i20 + 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i21;

     label22:
        $r4 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z2 = $r4 instanceof groovyjarjarantlr.LexerGrammar;

        if $z2 == 0 goto label23;

        $r79 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $i44 = $r79.<groovyjarjarantlr.Grammar: int maxk>;

        goto label24;

     label23:
        $i44 = 0;

     label24:
        i45 = $i44;

     label25:
        if i45 < 0 goto label49;

        i46 = 0;

     label26:
        $r5 = r2.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.collections.impl.Vector alternatives>;

        $i2 = virtualinvoke $r5.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if i46 >= $i2 goto label48;

        $r6 = virtualinvoke r2.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.Alternative getAlternativeAt(int)>(i46);

        $z3 = r0.<groovyjarjarantlr.PythonCodeGenerator: boolean DEBUG_CODE_GENERATOR>;

        if $z3 == 0 goto label27;

        $r75 = <java.lang.System: java.io.PrintStream out>;

        $r140 = new java.lang.StringBuffer;

        specialinvoke $r140.<java.lang.StringBuffer: void <init>()>();

        $r76 = virtualinvoke $r140.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("genAlt: ");

        $r77 = virtualinvoke $r76.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i46);

        $r78 = virtualinvoke $r77.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r75.<java.io.PrintStream: void println(java.lang.String)>($r78);

     label27:
        if z35 == 0 goto label28;

        $z12 = staticinvoke <groovyjarjarantlr.PythonCodeGenerator: boolean suitableForCaseExpression(groovyjarjarantlr.Alternative)>($r6);

        if $z12 == 0 goto label28;

        $z13 = r0.<groovyjarjarantlr.PythonCodeGenerator: boolean DEBUG_CODE_GENERATOR>;

        if $z13 == 0 goto label47;

        $r73 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r73.<java.io.PrintStream: void println(java.lang.String)>("ignoring alt because it was in the switch");

        goto label47;

     label28:
        $r7 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z4 = $r7 instanceof groovyjarjarantlr.LexerGrammar;

        if $z4 == 0 goto label32;

        i47 = $r6.<groovyjarjarantlr.Alternative: int lookaheadDepth>;

        if i47 != 2147483647 goto label29;

        $r72 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        i47 = $r72.<groovyjarjarantlr.Grammar: int maxk>;

     label29:
        if i47 < 1 goto label30;

        $r70 = $r6.<groovyjarjarantlr.Alternative: groovyjarjarantlr.Lookahead[] cache>;

        $r71 = $r70[i47];

        $z11 = virtualinvoke $r71.<groovyjarjarantlr.Lookahead: boolean containsEpsilon()>();

        if $z11 == 0 goto label30;

        $i53 = (int) -1;

        i47 = i47 + $i53;

        goto label29;

     label30:
        if i47 == i45 goto label31;

        $z10 = r0.<groovyjarjarantlr.PythonCodeGenerator: boolean DEBUG_CODE_GENERATOR>;

        if $z10 == 0 goto label47;

        $r64 = <java.lang.System: java.io.PrintStream out>;

        $r141 = new java.lang.StringBuffer;

        specialinvoke $r141.<java.lang.StringBuffer: void <init>()>();

        $r65 = virtualinvoke $r141.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("ignoring alt because effectiveDepth!=altDepth");

        $r66 = virtualinvoke $r65.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i47);

        $r67 = virtualinvoke $r66.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("!=");

        $r68 = virtualinvoke $r67.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i45);

        $r69 = virtualinvoke $r68.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r64.<java.io.PrintStream: void println(java.lang.String)>($r69);

        goto label47;

     label31:
        z32 = virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: boolean lookaheadIsEmpty(groovyjarjarantlr.Alternative,int)>($r6, i47);

        r134 = virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String getLookaheadTestExpression(groovyjarjarantlr.Alternative,int)>($r6, i47);

        goto label33;

     label32:
        $r8 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $i3 = $r8.<groovyjarjarantlr.Grammar: int maxk>;

        z32 = virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: boolean lookaheadIsEmpty(groovyjarjarantlr.Alternative,int)>($r6, $i3);

        $r9 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $i4 = $r9.<groovyjarjarantlr.Grammar: int maxk>;

        r134 = virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String getLookaheadTestExpression(groovyjarjarantlr.Alternative,int)>($r6, $i4);

     label33:
        $r10 = $r6.<groovyjarjarantlr.Alternative: groovyjarjarantlr.Lookahead[] cache>;

        $r11 = $r10[1];

        $r12 = $r11.<groovyjarjarantlr.Lookahead: groovyjarjarantlr.collections.impl.BitSet fset>;

        $i5 = virtualinvoke $r12.<groovyjarjarantlr.collections.impl.BitSet: int degree()>();

        if $i5 <= 127 goto label35;

        $z9 = staticinvoke <groovyjarjarantlr.PythonCodeGenerator: boolean suitableForCaseExpression(groovyjarjarantlr.Alternative)>($r6);

        if $z9 == 0 goto label35;

        if i38 != 0 goto label34;

        $r142 = new java.lang.StringBuffer;

        specialinvoke $r142.<java.lang.StringBuffer: void <init>()>();

        $r59 = virtualinvoke $r142.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("<m1> if ");

        $r60 = virtualinvoke $r59.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r134);

        $r61 = virtualinvoke $r60.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        $r62 = virtualinvoke $r61.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r62);

        goto label46;

     label34:
        $r143 = new java.lang.StringBuffer;

        specialinvoke $r143.<java.lang.StringBuffer: void <init>()>();

        $r54 = virtualinvoke $r143.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("<m2> elif ");

        $r55 = virtualinvoke $r54.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r134);

        $r56 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        $r57 = virtualinvoke $r56.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r57);

        goto label46;

     label35:
        if z32 == 0 goto label38;

        $r51 = $r6.<groovyjarjarantlr.Alternative: java.lang.String semPred>;

        if $r51 != null goto label38;

        $r52 = $r6.<groovyjarjarantlr.Alternative: groovyjarjarantlr.SynPredBlock synPred>;

        if $r52 != null goto label38;

        if i38 != 0 goto label36;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("##<m3> <closing");

        goto label37;

     label36:
        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("else: ## <m4>");

        $i14 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i15 = $i14 + 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i15;

     label37:
        $r136.<groovyjarjarantlr.PythonBlockFinishingInfo: boolean needAnErrorClause> = 0;

        goto label46;

     label38:
        $r135 = $r6.<groovyjarjarantlr.Alternative: java.lang.String semPred>;

        if $r135 == null goto label41;

        $r144 = new groovyjarjarantlr.ActionTransInfo;

        specialinvoke $r144.<groovyjarjarantlr.ActionTransInfo: void <init>()>();

        $r30 = $r6.<groovyjarjarantlr.Alternative: java.lang.String semPred>;

        $i12 = r2.<groovyjarjarantlr.AlternativeBlock: int line>;

        $r29 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.RuleBlock currentRule>;

        $r31 = virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String processActionForSpecialSymbols(java.lang.String,int,groovyjarjarantlr.RuleBlock,groovyjarjarantlr.ActionTransInfo)>($r30, $i12, $r29, $r144);

        $r32 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z6 = $r32 instanceof groovyjarjarantlr.ParserGrammar;

        if $z6 != 0 goto label39;

        $r50 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z8 = $r50 instanceof groovyjarjarantlr.LexerGrammar;

        if $z8 == 0 goto label40;

     label39:
        $r33 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z7 = $r33.<groovyjarjarantlr.Grammar: boolean debuggingOutput>;

        if $z7 == 0 goto label40;

        $r145 = new java.lang.StringBuffer;

        specialinvoke $r145.<java.lang.StringBuffer: void <init>()>();

        $r41 = virtualinvoke $r145.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(");

        $r42 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r134);

        $r43 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" and fireSemanticPredicateEvaluated(antlr.debug.SemanticPredicateEvent.PREDICTING, ");

        $r44 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.CharFormatter charFormatter>;

        $r45 = interfaceinvoke $r44.<groovyjarjarantlr.CharFormatter: java.lang.String escapeString(java.lang.String)>($r31);

        $i13 = virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: int addSemPred(java.lang.String)>($r45);

        $r46 = virtualinvoke $r43.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i13);

        $r47 = virtualinvoke $r46.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        $r48 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r31);

        $r49 = virtualinvoke $r48.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("))");

        r134 = virtualinvoke $r49.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label41;

     label40:
        $r146 = new java.lang.StringBuffer;

        specialinvoke $r146.<java.lang.StringBuffer: void <init>()>();

        $r35 = virtualinvoke $r146.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(");

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r134);

        $r37 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" and (");

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r31);

        $r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("))");

        r134 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.String toString()>();

     label41:
        if i38 <= 0 goto label43;

        $r21 = $r6.<groovyjarjarantlr.Alternative: groovyjarjarantlr.SynPredBlock synPred>;

        if $r21 == null goto label42;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("else:");

        $i10 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i11 = $i10 + 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i11;

        $r27 = $r6.<groovyjarjarantlr.Alternative: groovyjarjarantlr.SynPredBlock synPred>;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void genSynPred(groovyjarjarantlr.SynPredBlock,java.lang.String)>($r27, r134);

        goto label46;

     label42:
        $r147 = new java.lang.StringBuffer;

        specialinvoke $r147.<java.lang.StringBuffer: void <init>()>();

        $r23 = virtualinvoke $r147.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("elif ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r134);

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r26);

        goto label46;

     label43:
        $r13 = $r6.<groovyjarjarantlr.Alternative: groovyjarjarantlr.SynPredBlock synPred>;

        if $r13 == null goto label44;

        $r20 = $r6.<groovyjarjarantlr.Alternative: groovyjarjarantlr.SynPredBlock synPred>;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void genSynPred(groovyjarjarantlr.SynPredBlock,java.lang.String)>($r20, r134);

        goto label46;

     label44:
        $r14 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z5 = $r14 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z5 == 0 goto label45;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("if not _t:");

        $i6 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i7 = $i6 + 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i7;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("_t = antlr.ASTNULL");

        $i8 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i9 = $i8 - 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i9;

     label45:
        $r148 = new java.lang.StringBuffer;

        specialinvoke $r148.<java.lang.StringBuffer: void <init>()>();

        $r16 = virtualinvoke $r148.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("if ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r134);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r19);

     label46:
        i38 = i38 + 1;

        $i48 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i49 = $i48 + 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i49;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void genAlt(groovyjarjarantlr.Alternative,groovyjarjarantlr.AlternativeBlock)>($r6, r2);

        $i50 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i51 = $i50 - 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i51;

     label47:
        i46 = i46 + 1;

        goto label26;

     label48:
        $i55 = (int) -1;

        i45 = i45 + $i55;

        goto label25;

     label49:
        r0.<groovyjarjarantlr.PythonCodeGenerator: boolean genAST> = z0;

        r0.<groovyjarjarantlr.PythonCodeGenerator: boolean saveText> = $z27;

        if z36 == 0 goto label52;

        $r136.<groovyjarjarantlr.PythonBlockFinishingInfo: java.lang.String postscript> = "";

        $r136.<groovyjarjarantlr.PythonBlockFinishingInfo: boolean generatedSwitch> = 1;

        if i38 <= 0 goto label50;

        $z33 = 1;

        goto label51;

     label50:
        $z33 = 0;

     label51:
        $r136.<groovyjarjarantlr.PythonBlockFinishingInfo: boolean generatedAnIf> = $z33;

        goto label55;

     label52:
        $r136.<groovyjarjarantlr.PythonBlockFinishingInfo: java.lang.String postscript> = "";

        $r136.<groovyjarjarantlr.PythonBlockFinishingInfo: boolean generatedSwitch> = 0;

        if i38 <= 0 goto label53;

        $z34 = 1;

        goto label54;

     label53:
        $z34 = 0;

     label54:
        $r136.<groovyjarjarantlr.PythonBlockFinishingInfo: boolean generatedAnIf> = $z34;

     label55:
        return $r136;
    }

    private static boolean suitableForCaseExpression(groovyjarjarantlr.Alternative)
    {
        groovyjarjarantlr.Lookahead[] $r2, $r4;
        groovyjarjarantlr.collections.impl.BitSet $r6;
        groovyjarjarantlr.Alternative r0;
        groovyjarjarantlr.Lookahead $r3, $r5;
        int $i0, $i1;
        java.lang.String $r1;
        boolean $z0, $z1;

        r0 := @parameter0: groovyjarjarantlr.Alternative;

        $i0 = r0.<groovyjarjarantlr.Alternative: int lookaheadDepth>;

        if $i0 != 1 goto label1;

        $r1 = r0.<groovyjarjarantlr.Alternative: java.lang.String semPred>;

        if $r1 != null goto label1;

        $r2 = r0.<groovyjarjarantlr.Alternative: groovyjarjarantlr.Lookahead[] cache>;

        $r3 = $r2[1];

        $z0 = virtualinvoke $r3.<groovyjarjarantlr.Lookahead: boolean containsEpsilon()>();

        if $z0 != 0 goto label1;

        $r4 = r0.<groovyjarjarantlr.Alternative: groovyjarjarantlr.Lookahead[] cache>;

        $r5 = $r4[1];

        $r6 = $r5.<groovyjarjarantlr.Lookahead: groovyjarjarantlr.collections.impl.BitSet fset>;

        $i1 = virtualinvoke $r6.<groovyjarjarantlr.collections.impl.BitSet: int degree()>();

        if $i1 > 127 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private void genElementAST(groovyjarjarantlr.AlternativeElement)
    {
        groovyjarjarantlr.PythonCodeGenerator r0;
        java.lang.StringBuffer $r4, $r5, $r6, $r8, $r9, $r10, $r11, $r13, $r14, $r15, $r16, $r18, $r19, $r20, $r22, $r23, $r26, $r27, $r28, $r29, $r30, $r32, $r33, $r34, $r37, $r38, $r40, $r41, $r42, $r44, $r45, $r47, $r48, $r49, $r52, $r53, $r55, $r56, $r57, $r66, $r67, $r68, $r69, $r71, $r72, $r73, $r74, $r82, $r83, $r84;
        java.lang.String $r7, $r12, $r17, $r21, $r24, $r31, $r36, $r39, $r43, $r46, $r51, $r54, $r58, $r59, $r60, $r61, $r62, $r63, $r65, $r70, $r75, r76, $r78, r79, r80, $r85, $r87, r88;
        groovyjarjarantlr.GrammarAtom $r35, $r50, r81;
        groovyjarjarantlr.Grammar $r1, $r2, $r25, $r64, $r77, $r86;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, z10, $z11, $z12, z13, $z14, $z15;
        groovyjarjarantlr.AlternativeElement r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;

        r0 := @this: groovyjarjarantlr.PythonCodeGenerator;

        r3 := @parameter0: groovyjarjarantlr.AlternativeElement;

        $r1 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z0 = $r1 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z0 == 0 goto label02;

        $r64 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z8 = $r64.<groovyjarjarantlr.Grammar: boolean buildAST>;

        if $z8 != 0 goto label02;

        $r65 = virtualinvoke r3.<groovyjarjarantlr.AlternativeElement: java.lang.String getLabel()>();

        if $r65 != null goto label01;

        r76 = r0.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String lt1Value>;

        $r66 = new java.lang.StringBuffer;

        specialinvoke $r66.<java.lang.StringBuffer: void <init>()>();

        $r67 = virtualinvoke $r66.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("tmp");

        $i6 = r0.<groovyjarjarantlr.PythonCodeGenerator: int astVarNumber>;

        $r68 = virtualinvoke $r67.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i6);

        $r69 = virtualinvoke $r68.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_AST");

        $r70 = virtualinvoke $r69.<java.lang.StringBuffer: java.lang.String toString()>();

        $i7 = r0.<groovyjarjarantlr.PythonCodeGenerator: int astVarNumber>;

        $i8 = $i7 + 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int astVarNumber> = $i8;

        specialinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void mapTreeVariable(groovyjarjarantlr.AlternativeElement,java.lang.String)>(r3, $r70);

        $r71 = new java.lang.StringBuffer;

        specialinvoke $r71.<java.lang.StringBuffer: void <init>()>();

        $r72 = virtualinvoke $r71.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r70);

        $r73 = virtualinvoke $r72.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_in = ");

        $r74 = virtualinvoke $r73.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r76);

        $r75 = virtualinvoke $r74.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r75);

     label01:
        return;

     label02:
        $r2 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z1 = $r2.<groovyjarjarantlr.Grammar: boolean buildAST>;

        if $z1 == 0 goto label24;

        $i0 = r0.<groovyjarjarantlr.PythonCodeGenerator: int syntacticPredLevel>;

        if $i0 != 0 goto label24;

        $z2 = r0.<groovyjarjarantlr.PythonCodeGenerator: boolean genAST>;

        if $z2 == 0 goto label04;

        $r63 = virtualinvoke r3.<groovyjarjarantlr.AlternativeElement: java.lang.String getLabel()>();

        if $r63 != null goto label03;

        $i5 = virtualinvoke r3.<groovyjarjarantlr.AlternativeElement: int getAutoGenType()>();

        if $i5 == 3 goto label04;

     label03:
        $z9 = 1;

        goto label05;

     label04:
        $z9 = 0;

     label05:
        z10 = $z9;

        $i9 = virtualinvoke r3.<groovyjarjarantlr.AlternativeElement: int getAutoGenType()>();

        if $i9 == 3 goto label06;

        $z7 = r3 instanceof groovyjarjarantlr.TokenRefElement;

        if $z7 == 0 goto label06;

        z10 = 1;

     label06:
        $r77 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z11 = $r77.<groovyjarjarantlr.Grammar: boolean hasSyntacticPredicate>;

        if $z11 == 0 goto label07;

        if z10 == 0 goto label07;

        $z12 = 1;

        goto label08;

     label07:
        $z12 = 0;

     label08:
        z13 = $z12;

        $r78 = virtualinvoke r3.<groovyjarjarantlr.AlternativeElement: java.lang.String getLabel()>();

        if $r78 == null goto label09;

        r79 = virtualinvoke r3.<groovyjarjarantlr.AlternativeElement: java.lang.String getLabel()>();

        r80 = virtualinvoke r3.<groovyjarjarantlr.AlternativeElement: java.lang.String getLabel()>();

        goto label10;

     label09:
        r79 = r0.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String lt1Value>;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("tmp");

        $i1 = r0.<groovyjarjarantlr.PythonCodeGenerator: int astVarNumber>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        r80 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        $i2 = r0.<groovyjarjarantlr.PythonCodeGenerator: int astVarNumber>;

        $i3 = $i2 + 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int astVarNumber> = $i3;

     label10:
        if z10 == 0 goto label13;

        $z6 = r3 instanceof groovyjarjarantlr.GrammarAtom;

        if $z6 == 0 goto label12;

        r81 = (groovyjarjarantlr.GrammarAtom) r3;

        $r60 = virtualinvoke r81.<groovyjarjarantlr.GrammarAtom: java.lang.String getASTNodeType()>();

        if $r60 == null goto label11;

        $r62 = virtualinvoke r81.<groovyjarjarantlr.GrammarAtom: java.lang.String getASTNodeType()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void genASTDeclaration(groovyjarjarantlr.AlternativeElement,java.lang.String,java.lang.String)>(r3, r80, $r62);

        goto label13;

     label11:
        $r61 = r0.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String labeledElementASTType>;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void genASTDeclaration(groovyjarjarantlr.AlternativeElement,java.lang.String,java.lang.String)>(r3, r80, $r61);

        goto label13;

     label12:
        $r59 = r0.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String labeledElementASTType>;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void genASTDeclaration(groovyjarjarantlr.AlternativeElement,java.lang.String,java.lang.String)>(r3, r80, $r59);

     label13:
        $r82 = new java.lang.StringBuffer;

        specialinvoke $r82.<java.lang.StringBuffer: void <init>()>();

        $r83 = virtualinvoke $r82.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r80);

        $r84 = virtualinvoke $r83.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_AST");

        $r85 = virtualinvoke $r84.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void mapTreeVariable(groovyjarjarantlr.AlternativeElement,java.lang.String)>(r3, $r85);

        $r86 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z14 = $r86 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z14 == 0 goto label14;

        $r55 = new java.lang.StringBuffer;

        specialinvoke $r55.<java.lang.StringBuffer: void <init>()>();

        $r56 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r85);

        $r57 = virtualinvoke $r56.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_in = None");

        $r58 = virtualinvoke $r57.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r58);

     label14:
        if z13 == 0 goto label15;

     label15:
        $r7 = virtualinvoke r3.<groovyjarjarantlr.AlternativeElement: java.lang.String getLabel()>();

        if $r7 == null goto label17;

        $z5 = r3 instanceof groovyjarjarantlr.GrammarAtom;

        if $z5 == 0 goto label16;

        $r47 = new java.lang.StringBuffer;

        specialinvoke $r47.<java.lang.StringBuffer: void <init>()>();

        $r48 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r85);

        $r49 = virtualinvoke $r48.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = ");

        $r50 = (groovyjarjarantlr.GrammarAtom) r3;

        $r51 = virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String getASTCreateString(groovyjarjarantlr.GrammarAtom,java.lang.String)>($r50, r79);

        $r52 = virtualinvoke $r49.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r51);

        $r53 = virtualinvoke $r52.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("");

        $r54 = virtualinvoke $r53.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r54);

        goto label17;

     label16:
        $r40 = new java.lang.StringBuffer;

        specialinvoke $r40.<java.lang.StringBuffer: void <init>()>();

        $r41 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r85);

        $r42 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = ");

        $r43 = virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String getASTCreateString(java.lang.String)>(r79);

        $r44 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r43);

        $r45 = virtualinvoke $r44.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("");

        $r46 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r46);

     label17:
        $r87 = virtualinvoke r3.<groovyjarjarantlr.AlternativeElement: java.lang.String getLabel()>();

        if $r87 != null goto label20;

        if z10 == 0 goto label20;

        r88 = r0.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String lt1Value>;

        $z3 = r3 instanceof groovyjarjarantlr.GrammarAtom;

        if $z3 == 0 goto label18;

        $r32 = new java.lang.StringBuffer;

        specialinvoke $r32.<java.lang.StringBuffer: void <init>()>();

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r85);

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = ");

        $r35 = (groovyjarjarantlr.GrammarAtom) r3;

        $r36 = virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String getASTCreateString(groovyjarjarantlr.GrammarAtom,java.lang.String)>($r35, r88);

        $r37 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r36);

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("");

        $r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r39);

        goto label19;

     label18:
        $r18 = new java.lang.StringBuffer;

        specialinvoke $r18.<java.lang.StringBuffer: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r85);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = ");

        $r21 = virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String getASTCreateString(java.lang.String)>(r88);

        $r22 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("");

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r24);

     label19:
        $r25 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z4 = $r25 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z4 == 0 goto label20;

        $r26 = new java.lang.StringBuffer;

        specialinvoke $r26.<java.lang.StringBuffer: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r85);

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_in = ");

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r88);

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("");

        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r31);

     label20:
        $z15 = r0.<groovyjarjarantlr.PythonCodeGenerator: boolean genAST>;

        if $z15 == 0 goto label23;

        $i4 = virtualinvoke r3.<groovyjarjarantlr.AlternativeElement: int getAutoGenType()>();

        lookupswitch($i4)
        {
            case 1: goto label21;
            case 2: goto label22;
            default: goto label23;
        };

     label21:
        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("self.addASTChild(currentAST, ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r85);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r17);

        goto label23;

     label22:
        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("self.makeASTRoot(currentAST, ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r85);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r12);

        goto label23;

     label23:
        if z13 == 0 goto label24;

     label24:
        return;
    }

    private void genErrorCatchForElement(groovyjarjarantlr.AlternativeElement)
    {
        groovyjarjarantlr.ExceptionSpec $r8;
        groovyjarjarantlr.Grammar $r3, $r4;
        groovyjarjarantlr.Tool $r9;
        int $i0, $i1;
        java.lang.String $r1, $r7, $r10, r12;
        boolean $z0;
        groovyjarjarantlr.RuleBlock $r6;
        groovyjarjarantlr.PythonCodeGenerator r2;
        groovyjarjarantlr.RuleSymbol $r11;
        groovyjarjarantlr.GrammarSymbol $r5;
        groovyjarjarantlr.AlternativeElement r0;

        r2 := @this: groovyjarjarantlr.PythonCodeGenerator;

        r0 := @parameter0: groovyjarjarantlr.AlternativeElement;

        $r1 = virtualinvoke r0.<groovyjarjarantlr.AlternativeElement: java.lang.String getLabel()>();

        if $r1 != null goto label1;

        return;

     label1:
        r12 = r0.<groovyjarjarantlr.AlternativeElement: java.lang.String enclosingRuleName>;

        $r3 = r2.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z0 = $r3 instanceof groovyjarjarantlr.LexerGrammar;

        if $z0 == 0 goto label2;

        $r10 = r0.<groovyjarjarantlr.AlternativeElement: java.lang.String enclosingRuleName>;

        r12 = staticinvoke <groovyjarjarantlr.CodeGenerator: java.lang.String encodeLexerRuleName(java.lang.String)>($r10);

     label2:
        $r4 = r2.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r5 = virtualinvoke $r4.<groovyjarjarantlr.Grammar: groovyjarjarantlr.GrammarSymbol getSymbol(java.lang.String)>(r12);

        $r11 = (groovyjarjarantlr.RuleSymbol) $r5;

        if $r11 != null goto label3;

        $r9 = r2.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        virtualinvoke $r9.<groovyjarjarantlr.Tool: void panic(java.lang.String)>("Enclosing rule not found!");

     label3:
        $r6 = $r11.<groovyjarjarantlr.RuleSymbol: groovyjarjarantlr.RuleBlock block>;

        $r7 = virtualinvoke r0.<groovyjarjarantlr.AlternativeElement: java.lang.String getLabel()>();

        $r8 = virtualinvoke $r6.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.ExceptionSpec findExceptionSpec(java.lang.String)>($r7);

        if $r8 == null goto label4;

        $i0 = r2.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i1 = $i0 - 1;

        r2.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i1;

        specialinvoke r2.<groovyjarjarantlr.PythonCodeGenerator: void genErrorHandler(groovyjarjarantlr.ExceptionSpec)>($r8);

     label4:
        return;
    }

    private void genErrorHandler(groovyjarjarantlr.ExceptionSpec)
    {
        groovyjarjarantlr.ExceptionHandler r4;
        groovyjarjarantlr.Grammar $r17, $r24;
        groovyjarjarantlr.collections.impl.Vector $r1, $r2;
        groovyjarjarantlr.Token $r5, $r19, $r21;
        boolean $z0, $z1, $z2;
        groovyjarjarantlr.RuleBlock $r22;
        groovyjarjarantlr.PythonCodeGenerator r7;
        groovyjarjarantlr.ExceptionSpec r0;
        java.lang.StringBuffer $r11, $r12, $r13, $r14, $r15, $r26, $r27, $r31, $r33;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i17, i18, i19, $i20, $i22;
        java.lang.String $r6, $r8, $r9, $r16, $r20, $r23, $r28, r29, r30;
        groovyjarjarantlr.ActionTransInfo $r32;
        char $c15, $c16;
        java.lang.Object $r3;

        r7 := @this: groovyjarjarantlr.PythonCodeGenerator;

        r0 := @parameter0: groovyjarjarantlr.ExceptionSpec;

        i18 = 0;

     label1:
        $r1 = r0.<groovyjarjarantlr.ExceptionSpec: groovyjarjarantlr.collections.impl.Vector handlers>;

        $i0 = virtualinvoke $r1.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if i18 >= $i0 goto label7;

        $r2 = r0.<groovyjarjarantlr.ExceptionSpec: groovyjarjarantlr.collections.impl.Vector handlers>;

        $r3 = virtualinvoke $r2.<groovyjarjarantlr.collections.impl.Vector: java.lang.Object elementAt(int)>(i18);

        r4 = (groovyjarjarantlr.ExceptionHandler) $r3;

        r29 = "";

        r30 = "";

        $r5 = r4.<groovyjarjarantlr.ExceptionHandler: groovyjarjarantlr.Token exceptionTypeAndName>;

        $r6 = virtualinvoke $r5.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r8 = virtualinvoke r7.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String removeAssignmentFromDeclaration(java.lang.String)>($r6);

        $r9 = virtualinvoke $r8.<java.lang.String: java.lang.String trim()>();

        $i1 = virtualinvoke $r9.<java.lang.String: int length()>();

        i19 = $i1 - 1;

     label2:
        if i19 < 0 goto label4;

        $c15 = virtualinvoke $r9.<java.lang.String: char charAt(int)>(i19);

        $z2 = staticinvoke <java.lang.Character: boolean isLetterOrDigit(char)>($c15);

        if $z2 != 0 goto label3;

        $c16 = virtualinvoke $r9.<java.lang.String: char charAt(int)>(i19);

        $i20 = (int) $c16;

        if $i20 == 95 goto label3;

        r29 = virtualinvoke $r9.<java.lang.String: java.lang.String substring(int,int)>(0, i19);

        $i17 = i19 + 1;

        r30 = virtualinvoke $r9.<java.lang.String: java.lang.String substring(int)>($i17);

        goto label4;

     label3:
        $i22 = (int) -1;

        i19 = i19 + $i22;

        goto label2;

     label4:
        $r31 = new java.lang.StringBuffer;

        specialinvoke $r31.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("except ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r29);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r30);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r7.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r16);

        $i2 = r7.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i3 = $i2 + 1;

        r7.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i3;

        $r17 = r7.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z0 = $r17.<groovyjarjarantlr.Grammar: boolean hasSyntacticPredicate>;

        if $z0 == 0 goto label5;

        virtualinvoke r7.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("if not self.inputState.guessing:");

        $i13 = r7.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i14 = $i13 + 1;

        r7.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i14;

     label5:
        $r32 = new groovyjarjarantlr.ActionTransInfo;

        specialinvoke $r32.<groovyjarjarantlr.ActionTransInfo: void <init>()>();

        $r19 = r4.<groovyjarjarantlr.ExceptionHandler: groovyjarjarantlr.Token action>;

        $r20 = virtualinvoke $r19.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r21 = r4.<groovyjarjarantlr.ExceptionHandler: groovyjarjarantlr.Token action>;

        $i4 = virtualinvoke $r21.<groovyjarjarantlr.Token: int getLine()>();

        $r22 = r7.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.RuleBlock currentRule>;

        $r23 = virtualinvoke r7.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String processActionForSpecialSymbols(java.lang.String,int,groovyjarjarantlr.RuleBlock,groovyjarjarantlr.ActionTransInfo)>($r20, $i4, $r22, $r32);

        virtualinvoke r7.<groovyjarjarantlr.PythonCodeGenerator: void printAction(java.lang.String)>($r23);

        $r24 = r7.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z1 = $r24.<groovyjarjarantlr.Grammar: boolean hasSyntacticPredicate>;

        if $z1 == 0 goto label6;

        $i7 = r7.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i8 = $i7 - 1;

        r7.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i8;

        virtualinvoke r7.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("else:");

        $i9 = r7.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i10 = $i9 + 1;

        r7.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i10;

        $r33 = new java.lang.StringBuffer;

        specialinvoke $r33.<java.lang.StringBuffer: void <init>()>();

        $r26 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("raise ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r30);

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r7.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r28);

        $i11 = r7.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i12 = $i11 - 1;

        r7.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i12;

     label6:
        $i5 = r7.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i6 = $i5 - 1;

        r7.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i6;

        i18 = i18 + 1;

        goto label1;

     label7:
        return;
    }

    private void genErrorTryForElement(groovyjarjarantlr.AlternativeElement)
    {
        groovyjarjarantlr.ExceptionSpec $r8;
        groovyjarjarantlr.Grammar $r3, $r4;
        groovyjarjarantlr.Tool $r9;
        int $i0, $i1;
        java.lang.String $r1, $r7, $r10, r12;
        boolean $z0;
        groovyjarjarantlr.RuleBlock $r6;
        groovyjarjarantlr.PythonCodeGenerator r2;
        groovyjarjarantlr.RuleSymbol $r11;
        groovyjarjarantlr.GrammarSymbol $r5;
        groovyjarjarantlr.AlternativeElement r0;

        r2 := @this: groovyjarjarantlr.PythonCodeGenerator;

        r0 := @parameter0: groovyjarjarantlr.AlternativeElement;

        $r1 = virtualinvoke r0.<groovyjarjarantlr.AlternativeElement: java.lang.String getLabel()>();

        if $r1 != null goto label1;

        return;

     label1:
        r12 = r0.<groovyjarjarantlr.AlternativeElement: java.lang.String enclosingRuleName>;

        $r3 = r2.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z0 = $r3 instanceof groovyjarjarantlr.LexerGrammar;

        if $z0 == 0 goto label2;

        $r10 = r0.<groovyjarjarantlr.AlternativeElement: java.lang.String enclosingRuleName>;

        r12 = staticinvoke <groovyjarjarantlr.CodeGenerator: java.lang.String encodeLexerRuleName(java.lang.String)>($r10);

     label2:
        $r4 = r2.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r5 = virtualinvoke $r4.<groovyjarjarantlr.Grammar: groovyjarjarantlr.GrammarSymbol getSymbol(java.lang.String)>(r12);

        $r11 = (groovyjarjarantlr.RuleSymbol) $r5;

        if $r11 != null goto label3;

        $r9 = r2.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        virtualinvoke $r9.<groovyjarjarantlr.Tool: void panic(java.lang.String)>("Enclosing rule not found!");

     label3:
        $r6 = $r11.<groovyjarjarantlr.RuleSymbol: groovyjarjarantlr.RuleBlock block>;

        $r7 = virtualinvoke r0.<groovyjarjarantlr.AlternativeElement: java.lang.String getLabel()>();

        $r8 = virtualinvoke $r6.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.ExceptionSpec findExceptionSpec(java.lang.String)>($r7);

        if $r8 == null goto label4;

        virtualinvoke r2.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("try: # for error handling");

        $i0 = r2.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i1 = $i0 + 1;

        r2.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i1;

     label4:
        return;
    }

    protected void genASTDeclaration(groovyjarjarantlr.AlternativeElement)
    {
        java.lang.String $r2;
        groovyjarjarantlr.PythonCodeGenerator r0;
        groovyjarjarantlr.AlternativeElement r1;

        r0 := @this: groovyjarjarantlr.PythonCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.AlternativeElement;

        $r2 = r0.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String labeledElementASTType>;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void genASTDeclaration(groovyjarjarantlr.AlternativeElement,java.lang.String)>(r1, $r2);

        return;
    }

    protected void genASTDeclaration(groovyjarjarantlr.AlternativeElement, java.lang.String)
    {
        java.lang.String $r2, r3;
        groovyjarjarantlr.PythonCodeGenerator r0;
        groovyjarjarantlr.AlternativeElement r1;

        r0 := @this: groovyjarjarantlr.PythonCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.AlternativeElement;

        r3 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r1.<groovyjarjarantlr.AlternativeElement: java.lang.String getLabel()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void genASTDeclaration(groovyjarjarantlr.AlternativeElement,java.lang.String,java.lang.String)>(r1, $r2, r3);

        return;
    }

    protected void genASTDeclaration(groovyjarjarantlr.AlternativeElement, java.lang.String, java.lang.String)
    {
        groovyjarjarantlr.PythonCodeGenerator r0;
        java.lang.StringBuffer $r3, $r5, $r6;
        java.lang.String r4, $r7, r9;
        java.util.Hashtable $r2, $r8;
        groovyjarjarantlr.AlternativeElement r1;
        boolean $z0;

        r0 := @this: groovyjarjarantlr.PythonCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.AlternativeElement;

        r4 := @parameter1: java.lang.String;

        r9 := @parameter2: java.lang.String;

        $r2 = r0.<groovyjarjarantlr.PythonCodeGenerator: java.util.Hashtable declaredASTVariables>;

        $z0 = virtualinvoke $r2.<java.util.Hashtable: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_AST = None");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r7);

        $r8 = r0.<groovyjarjarantlr.PythonCodeGenerator: java.util.Hashtable declaredASTVariables>;

        virtualinvoke $r8.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r1);

        return;
    }

    protected void genHeader()
    {
        groovyjarjarantlr.Grammar $r15;
        groovyjarjarantlr.Tool $r7, $r9;
        java.lang.StringBuffer $r1, $r2, $r4, $r5, $r6, $r11, $r12, $r13, $r14, $r17, $r18;
        java.lang.String $r3, $r8, $r10, $r16, $r19;
        groovyjarjarantlr.PythonCodeGenerator r0;

        r0 := @this: groovyjarjarantlr.PythonCodeGenerator;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("### $ANTLR ");

        $r3 = <groovyjarjarantlr.Tool: java.lang.String version>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"");

        $r9 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r7 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r8 = $r7.<groovyjarjarantlr.Tool: java.lang.String grammarFile>;

        $r10 = virtualinvoke $r9.<groovyjarjarantlr.Tool: java.lang.String fileMinusPath(java.lang.String)>($r8);

        $r11 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" -> ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"");

        $r15 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r16 = virtualinvoke $r15.<groovyjarjarantlr.Grammar: java.lang.String getClassName()>();

        $r17 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".py\"$");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r19);

        return;
    }

    protected void genLexerTest()
    {
        groovyjarjarantlr.Grammar $r1;
        java.lang.StringBuffer $r3, $r4, $r5, $r7, $r8, $r9, $r10;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        java.lang.String $r2, $r6, $r11;
        groovyjarjarantlr.PythonCodeGenerator r0;

        r0 := @this: groovyjarjarantlr.PythonCodeGenerator;

        $r1 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r2 = virtualinvoke $r1.<groovyjarjarantlr.Grammar: java.lang.String getClassName()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("if __name__ == \'__main__\' :");

        $i0 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i1 = $i0 + 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i1;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("import sys");

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("import antlr");

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("import ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r6);

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("");

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("### create lexer - shall read from stdin");

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("try:");

        $i2 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i3 = $i2 + 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i3;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("for token in ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".Lexer():");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r11);

        $i4 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i5 = $i4 + 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i5;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("print token");

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("");

        $i6 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i7 = $i6 - 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i7;

        $i8 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i9 = $i8 - 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i9;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("except antlr.TokenStreamException, e:");

        $i10 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i11 = $i10 + 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i11;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("print \"error: exception caught while lexing: \", e");

        $i12 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i13 = $i12 - 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i13;

        $i14 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i15 = $i14 - 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i15;

        return;
    }

    private void genLiteralsTest()
    {
        groovyjarjarantlr.PythonCodeGenerator r0;

        r0 := @this: groovyjarjarantlr.PythonCodeGenerator;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("### option { testLiterals=true } ");

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("_ttype = self.testLiteralsTable(_ttype)");

        return;
    }

    private void genLiteralsTestForPartialToken()
    {
        groovyjarjarantlr.PythonCodeGenerator r0;

        r0 := @this: groovyjarjarantlr.PythonCodeGenerator;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("_ttype = self.testLiteralsTable(self.text.getString(), _begin, self.text.length()-_begin, _ttype)");

        return;
    }

    protected void genMatch(groovyjarjarantlr.collections.impl.BitSet)
    {
        groovyjarjarantlr.collections.impl.BitSet r1;
        groovyjarjarantlr.PythonCodeGenerator r0;

        r0 := @this: groovyjarjarantlr.PythonCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.collections.impl.BitSet;

        return;
    }

    protected void genMatch(groovyjarjarantlr.GrammarAtom)
    {
        groovyjarjarantlr.Grammar $r3, $r9;
        groovyjarjarantlr.WildcardElement $r2;
        groovyjarjarantlr.Tool $r5;
        java.lang.StringBuffer $r4, $r6, $r7;
        java.lang.String $r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        groovyjarjarantlr.PythonCodeGenerator r1;
        groovyjarjarantlr.GrammarAtom r0;

        r1 := @this: groovyjarjarantlr.PythonCodeGenerator;

        r0 := @parameter0: groovyjarjarantlr.GrammarAtom;

        $z0 = r0 instanceof groovyjarjarantlr.StringLiteralElement;

        if $z0 == 0 goto label2;

        $r9 = r1.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z5 = $r9 instanceof groovyjarjarantlr.LexerGrammar;

        if $z5 == 0 goto label1;

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void genMatchUsingAtomText(groovyjarjarantlr.GrammarAtom)>(r0);

        goto label6;

     label1:
        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void genMatchUsingAtomTokenType(groovyjarjarantlr.GrammarAtom)>(r0);

        goto label6;

     label2:
        $z1 = r0 instanceof groovyjarjarantlr.CharLiteralElement;

        if $z1 == 0 goto label4;

        $r3 = r1.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z4 = $r3 instanceof groovyjarjarantlr.LexerGrammar;

        if $z4 == 0 goto label3;

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void genMatchUsingAtomText(groovyjarjarantlr.GrammarAtom)>(r0);

        goto label6;

     label3:
        $r5 = r1.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("cannot ref character literals in grammar: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r5.<groovyjarjarantlr.Tool: void error(java.lang.String)>($r8);

        goto label6;

     label4:
        $z2 = r0 instanceof groovyjarjarantlr.TokenRefElement;

        if $z2 == 0 goto label5;

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void genMatchUsingAtomText(groovyjarjarantlr.GrammarAtom)>(r0);

        goto label6;

     label5:
        $z3 = r0 instanceof groovyjarjarantlr.WildcardElement;

        if $z3 == 0 goto label6;

        $r2 = (groovyjarjarantlr.WildcardElement) r0;

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void gen(groovyjarjarantlr.WildcardElement)>($r2);

     label6:
        return;
    }

    protected void genMatchUsingAtomText(groovyjarjarantlr.GrammarAtom)
    {
        groovyjarjarantlr.Grammar $r1, $r2, $r6;
        int $i0, $i1;
        java.lang.String $r4, $r5, r7, $r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        groovyjarjarantlr.PythonCodeGenerator r0;
        groovyjarjarantlr.GrammarAtom r3;

        r0 := @this: groovyjarjarantlr.PythonCodeGenerator;

        r3 := @parameter0: groovyjarjarantlr.GrammarAtom;

        r7 = "";

        $r1 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z0 = $r1 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z0 == 0 goto label1;

        r7 = "_t,";

     label1:
        $r2 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z1 = $r2 instanceof groovyjarjarantlr.LexerGrammar;

        if $z1 == 0 goto label3;

        $z5 = r0.<groovyjarjarantlr.PythonCodeGenerator: boolean saveText>;

        if $z5 == 0 goto label2;

        $i1 = virtualinvoke r3.<groovyjarjarantlr.GrammarAtom: int getAutoGenType()>();

        if $i1 != 3 goto label3;

     label2:
        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("_saveIndex = self.text.length()");

     label3:
        $z6 = r3.<groovyjarjarantlr.GrammarAtom: boolean not>;

        if $z6 == 0 goto label4;

        $r8 = "self.matchNot(";

        goto label5;

     label4:
        $r8 = "self.match(";

     label5:
        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void print(java.lang.String)>($r8);

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void _print(java.lang.String)>(r7);

        $r4 = r3.<groovyjarjarantlr.GrammarAtom: java.lang.String atomText>;

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("EOF");

        if $z2 == 0 goto label6;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void _print(java.lang.String)>("EOF_TYPE");

        goto label7;

     label6:
        $r5 = r3.<groovyjarjarantlr.GrammarAtom: java.lang.String atomText>;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void _print(java.lang.String)>($r5);

     label7:
        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void _println(java.lang.String)>(")");

        $r6 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z3 = $r6 instanceof groovyjarjarantlr.LexerGrammar;

        if $z3 == 0 goto label9;

        $z4 = r0.<groovyjarjarantlr.PythonCodeGenerator: boolean saveText>;

        if $z4 == 0 goto label8;

        $i0 = virtualinvoke r3.<groovyjarjarantlr.GrammarAtom: int getAutoGenType()>();

        if $i0 != 3 goto label9;

     label8:
        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("self.text.setLength(_saveIndex)");

     label9:
        return;
    }

    protected void genMatchUsingAtomTokenType(groovyjarjarantlr.GrammarAtom)
    {
        groovyjarjarantlr.Grammar $r1;
        java.lang.StringBuffer $r2, $r3, $r6, $r8, $r9, $r10, $r11;
        int $i0;
        java.lang.String $r5, $r7, $r12, r13, $r14;
        boolean $z0, $z1;
        groovyjarjarantlr.PythonCodeGenerator r0;
        groovyjarjarantlr.GrammarAtom r4;

        r0 := @this: groovyjarjarantlr.PythonCodeGenerator;

        r4 := @parameter0: groovyjarjarantlr.GrammarAtom;

        r13 = "";

        $r1 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z0 = $r1 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z0 == 0 goto label1;

        r13 = "_t,";

     label1:
        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r13);

        $i0 = virtualinvoke r4.<groovyjarjarantlr.GrammarAtom: int getType()>();

        $r5 = specialinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String getValueString(int,boolean)>($i0, 1);

        $r6 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $z1 = r4.<groovyjarjarantlr.GrammarAtom: boolean not>;

        if $z1 == 0 goto label2;

        $r14 = "self.matchNot(";

        goto label3;

     label2:
        $r14 = "self.match(";

     label3:
        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r12);

        return;
    }

    public void genNextToken()
    {
        groovyjarjarantlr.LLkGrammarAnalyzer $r10;
        groovyjarjarantlr.PythonCodeGenerator r0;
        java.lang.StringBuffer $r20, $r21, $r22, $r23, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r39, $r41, $r42, $r43, $r52, $r54, $r55, $r56, $r59, $r61, $r62, $r63, $r66, $r68, $r69, $r70;
        groovyjarjarantlr.Grammar $r1, $r3, $r5, $r8, $r9, $r11, $r13, $r16, $r18, $r45, $r47, $r51, $r58, $r65, $r72, $r74, $r84, $r86;
        groovyjarjarantlr.AlternativeElement $r36;
        groovyjarjarantlr.LexerGrammar $r12, $r14, $r17, $r19, $r73, $r85, $r87;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, i71, $i72, $i73, $i74, $i75, $i76, i77, $i78, $i79, $i80, $i81, $i82;
        groovyjarjarantlr.Lookahead $r35;
        java.lang.Object $r76;
        groovyjarjarantlr.Lookahead[] $r34;
        groovyjarjarantlr.collections.impl.Vector $r2, $r4, $r75, $r81;
        groovyjarjarantlr.RuleBlock $r6;
        groovyjarjarantlr.GrammarSymbol $r49;
        groovyjarjarantlr.Tool $r40, $r53, $r60, $r67;
        java.lang.String $r24, $r37, $r38, $r44, $r46, $r48, $r50, $r57, $r64, $r71, $r77, r79, r83;
        groovyjarjarantlr.RuleSymbol $r7, r78, r80;
        groovyjarjarantlr.PythonBlockFinishingInfo $r15;
        groovyjarjarantlr.RuleRefElement r82;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, z10, $z11, $z12, $z13;
        groovyjarjarantlr.Alternative $r33;

        r0 := @this: groovyjarjarantlr.PythonCodeGenerator;

        z10 = 0;

        i71 = 0;

     label01:
        $r1 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r2 = $r1.<groovyjarjarantlr.Grammar: groovyjarjarantlr.collections.impl.Vector rules>;

        $i0 = virtualinvoke $r2.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if i71 >= $i0 goto label03;

        $r74 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r75 = $r74.<groovyjarjarantlr.Grammar: groovyjarjarantlr.collections.impl.Vector rules>;

        $r76 = virtualinvoke $r75.<groovyjarjarantlr.collections.impl.Vector: java.lang.Object elementAt(int)>(i71);

        r78 = (groovyjarjarantlr.RuleSymbol) $r76;

        $z8 = virtualinvoke r78.<groovyjarjarantlr.RuleSymbol: boolean isDefined()>();

        if $z8 == 0 goto label02;

        $r77 = r78.<groovyjarjarantlr.RuleSymbol: java.lang.String access>;

        $z9 = virtualinvoke $r77.<java.lang.String: boolean equals(java.lang.Object)>("public");

        if $z9 == 0 goto label02;

        z10 = 1;

        goto label03;

     label02:
        i71 = i71 + 1;

        goto label01;

     label03:
        if z10 != 0 goto label04;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("");

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("def nextToken(self): ");

        $i55 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i56 = $i55 + 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i56;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("try:");

        $i57 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i58 = $i57 + 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i58;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("self.uponEOF()");

        $i59 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i60 = $i59 - 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i60;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("except antlr.CharStreamIOException, csioe:");

        $i61 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i62 = $i61 + 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i62;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("raise antlr.TokenStreamIOException(csioe.io)");

        $i63 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i64 = $i63 - 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i64;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("except antlr.CharStreamException, cse:");

        $i65 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i66 = $i65 + 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i66;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("raise antlr.TokenStreamException(str(cse))");

        $i67 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i68 = $i67 - 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i68;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("return antlr.CommonToken(type=EOF_TYPE, text=\"\")");

        $i69 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i70 = $i69 - 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i70;

        return;

     label04:
        $r5 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r3 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r4 = $r3.<groovyjarjarantlr.Grammar: groovyjarjarantlr.collections.impl.Vector rules>;

        $r6 = staticinvoke <groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.RuleBlock createNextTokenRule(groovyjarjarantlr.Grammar,groovyjarjarantlr.collections.impl.Vector,java.lang.String)>($r5, $r4, "nextToken");

        $r7 = new groovyjarjarantlr.RuleSymbol;

        specialinvoke $r7.<groovyjarjarantlr.RuleSymbol: void <init>(java.lang.String)>("mnextToken");

        virtualinvoke $r7.<groovyjarjarantlr.RuleSymbol: void setDefined()>();

        virtualinvoke $r7.<groovyjarjarantlr.RuleSymbol: void setBlock(groovyjarjarantlr.RuleBlock)>($r6);

        $r7.<groovyjarjarantlr.RuleSymbol: java.lang.String access> = "private";

        $r8 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        virtualinvoke $r8.<groovyjarjarantlr.Grammar: void define(groovyjarjarantlr.RuleSymbol)>($r7);

        $r9 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r10 = $r9.<groovyjarjarantlr.Grammar: groovyjarjarantlr.LLkGrammarAnalyzer theLLkAnalyzer>;

        interfaceinvoke $r10.<groovyjarjarantlr.LLkGrammarAnalyzer: boolean deterministic(groovyjarjarantlr.AlternativeBlock)>($r6);

        r79 = null;

        $r11 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r12 = (groovyjarjarantlr.LexerGrammar) $r11;

        $z0 = $r12.<groovyjarjarantlr.LexerGrammar: boolean filterMode>;

        if $z0 == 0 goto label05;

        $r72 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r73 = (groovyjarjarantlr.LexerGrammar) $r72;

        r79 = $r73.<groovyjarjarantlr.LexerGrammar: java.lang.String filterRule>;

     label05:
        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("");

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("def nextToken(self):");

        $i1 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i2 = $i1 + 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i2;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("while True:");

        $i3 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i4 = $i3 + 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i4;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("try: ### try again ..");

        $i5 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i6 = $i5 + 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i6;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("while True:");

        $i7 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i8 = $i7 + 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i8;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("_token = None");

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("_ttype = INVALID_TYPE");

        $r13 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r14 = (groovyjarjarantlr.LexerGrammar) $r13;

        $z1 = $r14.<groovyjarjarantlr.LexerGrammar: boolean filterMode>;

        if $z1 == 0 goto label09;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("self.setCommitToPath(False)");

        if r79 == null goto label09;

        $r45 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r46 = staticinvoke <groovyjarjarantlr.CodeGenerator: java.lang.String encodeLexerRuleName(java.lang.String)>(r79);

        $z5 = virtualinvoke $r45.<groovyjarjarantlr.Grammar: boolean isDefined(java.lang.String)>($r46);

        if $z5 != 0 goto label06;

        $r65 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r67 = $r65.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Tool antlrTool>;

        $r66 = new java.lang.StringBuffer;

        specialinvoke $r66.<java.lang.StringBuffer: void <init>()>();

        $r68 = virtualinvoke $r66.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Filter rule ");

        $r69 = virtualinvoke $r68.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r79);

        $r70 = virtualinvoke $r69.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" does not exist in this lexer");

        $r71 = virtualinvoke $r70.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r67.<groovyjarjarantlr.Tool: void error(java.lang.String)>($r71);

        goto label08;

     label06:
        $r47 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r48 = staticinvoke <groovyjarjarantlr.CodeGenerator: java.lang.String encodeLexerRuleName(java.lang.String)>(r79);

        $r49 = virtualinvoke $r47.<groovyjarjarantlr.Grammar: groovyjarjarantlr.GrammarSymbol getSymbol(java.lang.String)>($r48);

        r80 = (groovyjarjarantlr.RuleSymbol) $r49;

        $z6 = virtualinvoke r80.<groovyjarjarantlr.RuleSymbol: boolean isDefined()>();

        if $z6 != 0 goto label07;

        $r58 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r60 = $r58.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Tool antlrTool>;

        $r59 = new java.lang.StringBuffer;

        specialinvoke $r59.<java.lang.StringBuffer: void <init>()>();

        $r61 = virtualinvoke $r59.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Filter rule ");

        $r62 = virtualinvoke $r61.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r79);

        $r63 = virtualinvoke $r62.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" does not exist in this lexer");

        $r64 = virtualinvoke $r63.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r60.<groovyjarjarantlr.Tool: void error(java.lang.String)>($r64);

        goto label08;

     label07:
        $r50 = r80.<groovyjarjarantlr.RuleSymbol: java.lang.String access>;

        $z7 = virtualinvoke $r50.<java.lang.String: boolean equals(java.lang.Object)>("public");

        if $z7 == 0 goto label08;

        $r51 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r53 = $r51.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Tool antlrTool>;

        $r52 = new java.lang.StringBuffer;

        specialinvoke $r52.<java.lang.StringBuffer: void <init>()>();

        $r54 = virtualinvoke $r52.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Filter rule ");

        $r55 = virtualinvoke $r54.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r79);

        $r56 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" must be protected");

        $r57 = virtualinvoke $r56.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r53.<groovyjarjarantlr.Tool: void error(java.lang.String)>($r57);

     label08:
        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("_m = self.mark()");

     label09:
        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("self.resetText()");

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("try: ## for char stream error handling");

        $i72 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i73 = $i72 + 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i73;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("try: ##for lexical error handling");

        $i74 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i75 = $i74 + 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i75;

        $i76 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        i77 = 0;

     label10:
        $r81 = virtualinvoke $r6.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.collections.impl.Vector getAlternatives()>();

        $i78 = virtualinvoke $r81.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if i77 >= $i78 goto label12;

        $r33 = virtualinvoke $r6.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.Alternative getAlternativeAt(int)>(i77);

        $r34 = $r33.<groovyjarjarantlr.Alternative: groovyjarjarantlr.Lookahead[] cache>;

        $r35 = $r34[1];

        $z4 = virtualinvoke $r35.<groovyjarjarantlr.Lookahead: boolean containsEpsilon()>();

        if $z4 == 0 goto label11;

        $r36 = $r33.<groovyjarjarantlr.Alternative: groovyjarjarantlr.AlternativeElement head>;

        r82 = (groovyjarjarantlr.RuleRefElement) $r36;

        $r37 = r82.<groovyjarjarantlr.RuleRefElement: java.lang.String targetRule>;

        $r38 = staticinvoke <groovyjarjarantlr.CodeGenerator: java.lang.String decodeLexerRuleName(java.lang.String)>($r37);

        $r40 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r39 = new java.lang.StringBuffer;

        specialinvoke $r39.<java.lang.StringBuffer: void <init>()>();

        $r41 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("public lexical rule ");

        $r42 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r38);

        $r43 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is optional (can match \"nothing\")");

        $r44 = virtualinvoke $r43.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r40.<groovyjarjarantlr.Tool: void warning(java.lang.String)>($r44);

     label11:
        i77 = i77 + 1;

        goto label10;

     label12:
        staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator");

        $r15 = virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.PythonBlockFinishingInfo genCommonBlock(groovyjarjarantlr.AlternativeBlock,boolean)>($r6, 0);

        $r16 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r17 = (groovyjarjarantlr.LexerGrammar) $r16;

        $z2 = $r17.<groovyjarjarantlr.LexerGrammar: boolean filterMode>;

        if $z2 == 0 goto label14;

        if r79 != null goto label13;

        $r30 = new java.lang.StringBuffer;

        specialinvoke $r30.<java.lang.StringBuffer: void <init>()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("");

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("self.filterdefault(self.LA(1))");

        r83 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label15;

     label13:
        $r25 = new java.lang.StringBuffer;

        specialinvoke $r25.<java.lang.StringBuffer: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("");

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("self.filterdefault(self.LA(1), self.m");

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r79);

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", False)");

        r83 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label15;

     label14:
        r83 = "self.default(self.LA(1))";

     label15:
        specialinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void genBlockFinish1(groovyjarjarantlr.PythonBlockFinishingInfo,java.lang.String)>($r15, r83);

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i76;

        $r84 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r85 = (groovyjarjarantlr.LexerGrammar) $r84;

        $z11 = $r85.<groovyjarjarantlr.LexerGrammar: boolean filterMode>;

        if $z11 == 0 goto label16;

        if r79 == null goto label16;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("self.commit()");

     label16:
        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("if not self._returnToken:");

        $i79 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i80 = $i79 + 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i80;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("raise antlr.TryAgain ### found SKIP token");

        $i81 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i82 = $i81 - 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i82;

        $r86 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r87 = (groovyjarjarantlr.LexerGrammar) $r86;

        $z12 = virtualinvoke $r87.<groovyjarjarantlr.LexerGrammar: boolean getTestLiterals()>();

        if $z12 == 0 goto label17;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("### option { testLiterals=true } ");

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("self.testForLiteral(self._returnToken)");

     label17:
        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("### return token to caller");

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("return self._returnToken");

        $i9 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i10 = $i9 - 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i10;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("### handle lexical errors ....");

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("except antlr.RecognitionException, e:");

        $i11 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i12 = $i11 + 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i12;

        $r18 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r19 = (groovyjarjarantlr.LexerGrammar) $r18;

        $z3 = $r19.<groovyjarjarantlr.LexerGrammar: boolean filterMode>;

        if $z3 == 0 goto label19;

        if r79 != null goto label18;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("if not self.getCommitToPath():");

        $i51 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i52 = $i51 + 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i52;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("self.consume()");

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("raise antlr.TryAgain()");

        $i53 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i54 = $i53 - 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i54;

        goto label19;

     label18:
        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("if not self.getCommitToPath(): ");

        $i39 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i40 = $i39 + 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i40;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("self.rewind(_m)");

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("self.resetText()");

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("try:");

        $i41 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i42 = $i41 + 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i42;

        $r20 = new java.lang.StringBuffer;

        specialinvoke $r20.<java.lang.StringBuffer: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("self.m");

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r79);

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(False)");

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r24);

        $i43 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i44 = $i43 - 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i44;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("except antlr.RecognitionException, ee:");

        $i45 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i46 = $i45 + 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i46;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("### horrendous failure: error in filter rule");

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("self.reportError(ee)");

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("self.consume()");

        $i47 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i48 = $i47 - 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i48;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("raise antlr.TryAgain()");

        $i49 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i50 = $i49 - 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i50;

     label19:
        $z13 = virtualinvoke $r6.<groovyjarjarantlr.RuleBlock: boolean getDefaultErrorHandler()>();

        if $z13 == 0 goto label20;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("self.reportError(e)");

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("self.consume()");

        goto label21;

     label20:
        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("raise antlr.TokenStreamRecognitionException(e)");

     label21:
        $i13 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i14 = $i13 - 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i14;

        $i15 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i16 = $i15 - 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i16;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("### handle char stream errors ...");

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("except antlr.CharStreamException,cse:");

        $i17 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i18 = $i17 + 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i18;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("if isinstance(cse, antlr.CharStreamIOException):");

        $i19 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i20 = $i19 + 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i20;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("raise antlr.TokenStreamIOException(cse.io)");

        $i21 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i22 = $i21 - 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i22;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("else:");

        $i23 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i24 = $i23 + 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i24;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("raise antlr.TokenStreamException(str(cse))");

        $i25 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i26 = $i25 - 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i26;

        $i27 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i28 = $i27 - 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i28;

        $i29 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i30 = $i29 - 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i30;

        $i31 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i32 = $i31 - 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i32;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("except antlr.TryAgain:");

        $i33 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i34 = $i33 + 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i34;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("pass");

        $i35 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i36 = $i35 - 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i36;

        $i37 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i38 = $i37 - 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i38;

        return;
    }

    public void genRule(groovyjarjarantlr.RuleSymbol, boolean, int)
    {
        groovyjarjarantlr.PythonCodeGenerator r0;
        java.lang.StringBuffer $r17, $r18, $r20, $r21, $r23, $r24, $r26, $r27, $r31, $r32, $r33, $r34, $r36, $r37, $r38, $r39, $r42, $r43, $r46, $r47, $r50, $r51, $r53, $r54, $r56, $r57, $r59, $r60, $r71, $r72, $r73, $r74, $r84, $r86, $r87, $r89, $r91, $r92, $r94, $r96, $r97, $r102, $r103, $r104, $r105, $r107, $r108, $r109, $r110, $r113, $r114, $r117, $r120, $r121, $r123, $r124, $r126, $r127, $r129, $r130, $r133, $r136, $r137, $r142, $r144, $r146, $r148, $r149, $r151, $r152;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52;
        groovyjarjarantlr.collections.impl.Vector $r163;
        groovyjarjarantlr.Tool $r79, $r143;
        java.lang.String $r3, $r5, $r11, $r13, $r19, $r22, $r25, $r28, $r35, $r40, $r44, $r45, $r48, $r49, $r52, $r55, $r58, $r61, $r70, $r75, $r80, $r85, $r88, $r90, $r93, $r95, $r98, $r106, $r111, $r112, $r115, $r116, $r118, $r122, $r125, $r128, $r131, $r132, $r134, $r135, $r138, $r139, $r140, $r141, $r145, $r147, $r150, $r153, $r154, $r155, $r156, $r157, r164;
        groovyjarjarantlr.PythonBlockFinishingInfo $r10;
        boolean $z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, z25, $z26, $z27, $z28, $z29, $z30, $z31, $z32, $z33, $z34, $z35;
        groovyjarjarantlr.LLkGrammarAnalyzer $r9, $r67;
        groovyjarjarantlr.SynPredBlock $r77, $r81, $r82;
        groovyjarjarantlr.RuleEndElement $r66;
        groovyjarjarantlr.Grammar $r6, $r8, $r12, $r14, $r15, $r16, $r29, $r30, $r41, $r62, $r63, $r64, $r65, $r78, $r99, $r100, $r101, $r119, $r158, $r159, $r160, $r161, $r162, $r165, $r166, $r167;
        groovyjarjarantlr.Lookahead $r68;
        groovyjarjarantlr.RuleBlock $r2, $r83;
        groovyjarjarantlr.RuleSymbol r1;
        groovyjarjarantlr.collections.impl.BitSet $r69;
        groovyjarjarantlr.Alternative $r76;
        groovyjarjarantlr.ExceptionSpec $r7;
        java.util.Hashtable $r4;

        r0 := @this: groovyjarjarantlr.PythonCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.RuleSymbol;

        z25 := @parameter1: boolean;

        i12 := @parameter2: int;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = 1;

        $z0 = virtualinvoke r1.<groovyjarjarantlr.RuleSymbol: boolean isDefined()>();

        if $z0 != 0 goto label01;

        $r143 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r142 = new java.lang.StringBuffer;

        specialinvoke $r142.<java.lang.StringBuffer: void <init>()>();

        $r144 = virtualinvoke $r142.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("undefined rule: ");

        $r145 = virtualinvoke r1.<groovyjarjarantlr.RuleSymbol: java.lang.String getId()>();

        $r146 = virtualinvoke $r144.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r145);

        $r147 = virtualinvoke $r146.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r143.<groovyjarjarantlr.Tool: void error(java.lang.String)>($r147);

        return;

     label01:
        $r2 = virtualinvoke r1.<groovyjarjarantlr.RuleSymbol: groovyjarjarantlr.RuleBlock getBlock()>();

        r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.RuleBlock currentRule> = $r2;

        $r3 = virtualinvoke r1.<groovyjarjarantlr.RuleSymbol: java.lang.String getId()>();

        r0.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String currentASTResult> = $r3;

        $r4 = r0.<groovyjarjarantlr.PythonCodeGenerator: java.util.Hashtable declaredASTVariables>;

        virtualinvoke $r4.<java.util.Hashtable: void clear()>();

        z1 = r0.<groovyjarjarantlr.PythonCodeGenerator: boolean genAST>;

        $z2 = r0.<groovyjarjarantlr.PythonCodeGenerator: boolean genAST>;

        if $z2 == 0 goto label02;

        $z24 = virtualinvoke $r2.<groovyjarjarantlr.RuleBlock: boolean getAutoGen()>();

        if $z24 == 0 goto label02;

        $z26 = 1;

        goto label03;

     label02:
        $z26 = 0;

     label03:
        r0.<groovyjarjarantlr.PythonCodeGenerator: boolean genAST> = $z26;

        $z27 = virtualinvoke $r2.<groovyjarjarantlr.RuleBlock: boolean getAutoGen()>();

        r0.<groovyjarjarantlr.PythonCodeGenerator: boolean saveText> = $z27;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void genJavadocComment(groovyjarjarantlr.RuleSymbol)>(r1);

        $r148 = new java.lang.StringBuffer;

        specialinvoke $r148.<java.lang.StringBuffer: void <init>()>();

        $r149 = virtualinvoke $r148.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("def ");

        $r150 = virtualinvoke r1.<groovyjarjarantlr.RuleSymbol: java.lang.String getId()>();

        $r151 = virtualinvoke $r149.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r150);

        $r152 = virtualinvoke $r151.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(");

        $r153 = virtualinvoke $r152.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void print(java.lang.String)>($r153);

        $r154 = r0.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String commonExtraParams>;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void _print(java.lang.String)>($r154);

        $r155 = r0.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String commonExtraParams>;

        $i46 = virtualinvoke $r155.<java.lang.String: int length()>();

        if $i46 == 0 goto label04;

        $r141 = $r2.<groovyjarjarantlr.RuleBlock: java.lang.String argAction>;

        if $r141 == null goto label04;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void _print(java.lang.String)>(",");

     label04:
        $r156 = $r2.<groovyjarjarantlr.RuleBlock: java.lang.String argAction>;

        if $r156 == null goto label05;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void _println(java.lang.String)>("");

        $i42 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i43 = $i42 + 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i43;

        $r140 = $r2.<groovyjarjarantlr.RuleBlock: java.lang.String argAction>;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r140);

        $i44 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i45 = $i44 - 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i45;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void print(java.lang.String)>("):");

        goto label06;

     label05:
        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void _print(java.lang.String)>("):");

     label06:
        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("");

        $i0 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i1 = $i0 + 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i1;

        $r5 = $r2.<groovyjarjarantlr.RuleBlock: java.lang.String returnAction>;

        if $r5 == null goto label08;

        $r132 = $r2.<groovyjarjarantlr.RuleBlock: java.lang.String returnAction>;

        $i39 = virtualinvoke $r132.<java.lang.String: int indexOf(int)>(61);

        if $i39 < 0 goto label07;

        $r139 = $r2.<groovyjarjarantlr.RuleBlock: java.lang.String returnAction>;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r139);

        goto label08;

     label07:
        $r133 = new java.lang.StringBuffer;

        specialinvoke $r133.<java.lang.StringBuffer: void <init>()>();

        $r134 = $r2.<groovyjarjarantlr.RuleBlock: java.lang.String returnAction>;

        $i40 = virtualinvoke $r2.<groovyjarjarantlr.RuleBlock: int getLine()>();

        $i41 = virtualinvoke $r2.<groovyjarjarantlr.RuleBlock: int getColumn()>();

        $r135 = virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String extractIdOfAction(java.lang.String,int,int)>($r134, $i40, $i41);

        $r136 = virtualinvoke $r133.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r135);

        $r137 = virtualinvoke $r136.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = None");

        $r138 = virtualinvoke $r137.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r138);

     label08:
        $r157 = r0.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String commonLocalVars>;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r157);

        $r158 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z28 = $r158.<groovyjarjarantlr.Grammar: boolean traceRules>;

        if $z28 == 0 goto label10;

        $r119 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z23 = $r119 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z23 == 0 goto label09;

        $r126 = new java.lang.StringBuffer;

        specialinvoke $r126.<java.lang.StringBuffer: void <init>()>();

        $r127 = virtualinvoke $r126.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("self.traceIn(\"");

        $r128 = virtualinvoke r1.<groovyjarjarantlr.RuleSymbol: java.lang.String getId()>();

        $r129 = virtualinvoke $r127.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r128);

        $r130 = virtualinvoke $r129.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\",_t)");

        $r131 = virtualinvoke $r130.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r131);

        goto label10;

     label09:
        $r120 = new java.lang.StringBuffer;

        specialinvoke $r120.<java.lang.StringBuffer: void <init>()>();

        $r121 = virtualinvoke $r120.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("self.traceIn(\"");

        $r122 = virtualinvoke r1.<groovyjarjarantlr.RuleSymbol: java.lang.String getId()>();

        $r123 = virtualinvoke $r121.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r122);

        $r124 = virtualinvoke $r123.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\")");

        $r125 = virtualinvoke $r124.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r125);

     label10:
        $r159 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z29 = $r159 instanceof groovyjarjarantlr.LexerGrammar;

        if $z29 == 0 goto label13;

        $r112 = virtualinvoke r1.<groovyjarjarantlr.RuleSymbol: java.lang.String getId()>();

        $z22 = virtualinvoke $r112.<java.lang.String: boolean equals(java.lang.Object)>("mEOF");

        if $z22 == 0 goto label11;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("_ttype = EOF_TYPE");

        goto label12;

     label11:
        $r113 = new java.lang.StringBuffer;

        specialinvoke $r113.<java.lang.StringBuffer: void <init>()>();

        $r114 = virtualinvoke $r113.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_ttype = ");

        $r115 = virtualinvoke r1.<groovyjarjarantlr.RuleSymbol: java.lang.String getId()>();

        $r116 = virtualinvoke $r115.<java.lang.String: java.lang.String substring(int)>(1);

        $r117 = virtualinvoke $r114.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r116);

        $r118 = virtualinvoke $r117.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r118);

     label12:
        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("_saveIndex = 0");

     label13:
        $r160 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z30 = $r160.<groovyjarjarantlr.Grammar: boolean debuggingOutput>;

        if $z30 == 0 goto label15;

        $r100 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z20 = $r100 instanceof groovyjarjarantlr.ParserGrammar;

        if $z20 == 0 goto label14;

        $r107 = new java.lang.StringBuffer;

        specialinvoke $r107.<java.lang.StringBuffer: void <init>()>();

        $r108 = virtualinvoke $r107.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("self.fireEnterRule(");

        $r109 = virtualinvoke $r108.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i12);

        $r110 = virtualinvoke $r109.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", 0)");

        $r111 = virtualinvoke $r110.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r111);

        goto label15;

     label14:
        $r101 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z21 = $r101 instanceof groovyjarjarantlr.LexerGrammar;

        if $z21 == 0 goto label15;

        $r102 = new java.lang.StringBuffer;

        specialinvoke $r102.<java.lang.StringBuffer: void <init>()>();

        $r103 = virtualinvoke $r102.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("self.fireEnterRule(");

        $r104 = virtualinvoke $r103.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i12);

        $r105 = virtualinvoke $r104.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", _ttype)");

        $r106 = virtualinvoke $r105.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r106);

     label15:
        $r161 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z31 = $r161.<groovyjarjarantlr.Grammar: boolean debuggingOutput>;

        if $z31 != 0 goto label16;

        $r99 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z19 = $r99.<groovyjarjarantlr.Grammar: boolean traceRules>;

        if $z19 == 0 goto label17;

     label16:
        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("try: ### debugging");

        $i2 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i3 = $i2 + 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i3;

     label17:
        $r162 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z32 = $r162 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z32 == 0 goto label18;

        $r89 = new java.lang.StringBuffer;

        specialinvoke $r89.<java.lang.StringBuffer: void <init>()>();

        $r90 = virtualinvoke r1.<groovyjarjarantlr.RuleSymbol: java.lang.String getId()>();

        $r91 = virtualinvoke $r89.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r90);

        $r92 = virtualinvoke $r91.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_AST_in = None");

        $r93 = virtualinvoke $r92.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r93);

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("if _t != antlr.ASTNULL:");

        $i35 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i36 = $i35 + 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i36;

        $r94 = new java.lang.StringBuffer;

        specialinvoke $r94.<java.lang.StringBuffer: void <init>()>();

        $r95 = virtualinvoke r1.<groovyjarjarantlr.RuleSymbol: java.lang.String getId()>();

        $r96 = virtualinvoke $r94.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r95);

        $r97 = virtualinvoke $r96.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_AST_in = _t");

        $r98 = virtualinvoke $r97.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r98);

        $i37 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i38 = $i37 - 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i38;

     label18:
        $r6 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z3 = $r6.<groovyjarjarantlr.Grammar: boolean buildAST>;

        if $z3 == 0 goto label19;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("self.returnAST = None");

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("currentAST = antlr.ASTPair()");

        $r84 = new java.lang.StringBuffer;

        specialinvoke $r84.<java.lang.StringBuffer: void <init>()>();

        $r85 = virtualinvoke r1.<groovyjarjarantlr.RuleSymbol: java.lang.String getId()>();

        $r86 = virtualinvoke $r84.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r85);

        $r87 = virtualinvoke $r86.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_AST = None");

        $r88 = virtualinvoke $r87.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r88);

     label19:
        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void genBlockPreamble(groovyjarjarantlr.AlternativeBlock)>($r2);

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void genBlockInitAction(groovyjarjarantlr.AlternativeBlock)>($r2);

        $r7 = virtualinvoke $r2.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.ExceptionSpec findExceptionSpec(java.lang.String)>("");

        if $r7 != null goto label20;

        $z18 = virtualinvoke $r2.<groovyjarjarantlr.RuleBlock: boolean getDefaultErrorHandler()>();

        if $z18 == 0 goto label21;

     label20:
        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("try:      ## for error handling");

        $i4 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i5 = $i4 + 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i5;

     label21:
        $i47 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $r163 = $r2.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.collections.impl.Vector alternatives>;

        $i48 = virtualinvoke $r163.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if $i48 != 1 goto label24;

        $r76 = virtualinvoke $r2.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.Alternative getAlternativeAt(int)>(0);

        r164 = $r76.<groovyjarjarantlr.Alternative: java.lang.String semPred>;

        if r164 == null goto label22;

        $r83 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.RuleBlock currentRule>;

        $i34 = $r83.<groovyjarjarantlr.RuleBlock: int line>;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void genSemPred(java.lang.String,int)>(r164, $i34);

     label22:
        $r77 = $r76.<groovyjarjarantlr.Alternative: groovyjarjarantlr.SynPredBlock synPred>;

        if $r77 == null goto label23;

        $r79 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r78 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r80 = virtualinvoke $r78.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $r81 = $r76.<groovyjarjarantlr.Alternative: groovyjarjarantlr.SynPredBlock synPred>;

        $i32 = virtualinvoke $r81.<groovyjarjarantlr.SynPredBlock: int getLine()>();

        $r82 = $r76.<groovyjarjarantlr.Alternative: groovyjarjarantlr.SynPredBlock synPred>;

        $i33 = virtualinvoke $r82.<groovyjarjarantlr.SynPredBlock: int getColumn()>();

        virtualinvoke $r79.<groovyjarjarantlr.Tool: void warning(java.lang.String,java.lang.String,int,int)>("Syntactic predicate ignored for single alternative", $r80, $i32, $i33);

     label23:
        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void genAlt(groovyjarjarantlr.Alternative,groovyjarjarantlr.AlternativeBlock)>($r76, $r2);

        goto label25;

     label24:
        $r8 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r9 = $r8.<groovyjarjarantlr.Grammar: groovyjarjarantlr.LLkGrammarAnalyzer theLLkAnalyzer>;

        interfaceinvoke $r9.<groovyjarjarantlr.LLkGrammarAnalyzer: boolean deterministic(groovyjarjarantlr.AlternativeBlock)>($r2);

        $r10 = virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.PythonBlockFinishingInfo genCommonBlock(groovyjarjarantlr.AlternativeBlock,boolean)>($r2, 0);

        $r11 = r0.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String throwNoViable>;

        specialinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void genBlockFinish(groovyjarjarantlr.PythonBlockFinishingInfo,java.lang.String)>($r10, $r11);

     label25:
        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i47;

        if $r7 != null goto label26;

        $z17 = virtualinvoke $r2.<groovyjarjarantlr.RuleBlock: boolean getDefaultErrorHandler()>();

        if $z17 == 0 goto label27;

     label26:
        $i6 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i7 = $i6 - 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i7;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("");

     label27:
        if $r7 == null goto label28;

        specialinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void genErrorHandler(groovyjarjarantlr.ExceptionSpec)>($r7);

        goto label33;

     label28:
        $z4 = virtualinvoke $r2.<groovyjarjarantlr.RuleBlock: boolean getDefaultErrorHandler()>();

        if $z4 == 0 goto label33;

        $r56 = new java.lang.StringBuffer;

        specialinvoke $r56.<java.lang.StringBuffer: void <init>()>();

        $r57 = virtualinvoke $r56.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("except ");

        $r58 = r0.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String exceptionThrown>;

        $r59 = virtualinvoke $r57.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r58);

        $r60 = virtualinvoke $r59.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ex:");

        $r61 = virtualinvoke $r60.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r61);

        $i15 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i16 = $i15 + 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i16;

        $r62 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z14 = $r62.<groovyjarjarantlr.Grammar: boolean hasSyntacticPredicate>;

        if $z14 == 0 goto label29;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("if not self.inputState.guessing:");

        $i30 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i31 = $i30 + 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i31;

     label29:
        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("self.reportError(ex)");

        $r63 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z15 = $r63 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z15 != 0 goto label30;

        $r65 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r67 = $r65.<groovyjarjarantlr.Grammar: groovyjarjarantlr.LLkGrammarAnalyzer theLLkAnalyzer>;

        $r66 = $r2.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.RuleEndElement endNode>;

        $r68 = interfaceinvoke $r67.<groovyjarjarantlr.LLkGrammarAnalyzer: groovyjarjarantlr.Lookahead FOLLOW(int,groovyjarjarantlr.RuleEndElement)>(1, $r66);

        $r69 = $r68.<groovyjarjarantlr.Lookahead: groovyjarjarantlr.collections.impl.BitSet fset>;

        $i29 = virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: int markBitsetForGen(groovyjarjarantlr.collections.impl.BitSet)>($r69);

        $r70 = virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String getBitsetName(int)>($i29);

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("self.consume()");

        $r71 = new java.lang.StringBuffer;

        specialinvoke $r71.<java.lang.StringBuffer: void <init>()>();

        $r72 = virtualinvoke $r71.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("self.consumeUntil(");

        $r73 = virtualinvoke $r72.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r70);

        $r74 = virtualinvoke $r73.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r75 = virtualinvoke $r74.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r75);

        goto label31;

     label30:
        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("if _t:");

        $i17 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i18 = $i17 + 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i18;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("_t = _t.getNextSibling()");

        $i19 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i20 = $i19 - 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i20;

     label31:
        $r64 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z16 = $r64.<groovyjarjarantlr.Grammar: boolean hasSyntacticPredicate>;

        if $z16 == 0 goto label32;

        $i23 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i24 = $i23 - 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i24;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("else:");

        $i25 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i26 = $i25 + 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i26;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("raise ex");

        $i27 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i28 = $i27 - 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i28;

     label32:
        $i21 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i22 = $i21 - 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i22;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("");

     label33:
        $r165 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z33 = $r165.<groovyjarjarantlr.Grammar: boolean buildAST>;

        if $z33 == 0 goto label34;

        $r50 = new java.lang.StringBuffer;

        specialinvoke $r50.<java.lang.StringBuffer: void <init>()>();

        $r51 = virtualinvoke $r50.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("self.returnAST = ");

        $r52 = virtualinvoke r1.<groovyjarjarantlr.RuleSymbol: java.lang.String getId()>();

        $r53 = virtualinvoke $r51.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r52);

        $r54 = virtualinvoke $r53.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_AST");

        $r55 = virtualinvoke $r54.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r55);

     label34:
        $r12 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z5 = $r12 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z5 == 0 goto label35;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("self._retTree = _t");

     label35:
        $z6 = virtualinvoke $r2.<groovyjarjarantlr.RuleBlock: boolean getTestLiterals()>();

        if $z6 == 0 goto label37;

        $r49 = r1.<groovyjarjarantlr.RuleSymbol: java.lang.String access>;

        $z13 = virtualinvoke $r49.<java.lang.String: boolean equals(java.lang.Object)>("protected");

        if $z13 == 0 goto label36;

        specialinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void genLiteralsTestForPartialToken()>();

        goto label37;

     label36:
        specialinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void genLiteralsTest()>();

     label37:
        $r166 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z34 = $r166 instanceof groovyjarjarantlr.LexerGrammar;

        if $z34 == 0 goto label38;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("self.set_return_token(_createToken, _token, _ttype, _begin)");

     label38:
        $r13 = $r2.<groovyjarjarantlr.RuleBlock: java.lang.String returnAction>;

        if $r13 == null goto label39;

        $r42 = new java.lang.StringBuffer;

        specialinvoke $r42.<java.lang.StringBuffer: void <init>()>();

        $r43 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("return ");

        $r44 = $r2.<groovyjarjarantlr.RuleBlock: java.lang.String returnAction>;

        $i13 = virtualinvoke $r2.<groovyjarjarantlr.RuleBlock: int getLine()>();

        $i14 = virtualinvoke $r2.<groovyjarjarantlr.RuleBlock: int getColumn()>();

        $r45 = virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String extractIdOfAction(java.lang.String,int,int)>($r44, $i13, $i14);

        $r46 = virtualinvoke $r43.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r45);

        $r47 = virtualinvoke $r46.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("");

        $r48 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r48);

     label39:
        $r14 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z7 = $r14.<groovyjarjarantlr.Grammar: boolean debuggingOutput>;

        if $z7 != 0 goto label40;

        $r41 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z12 = $r41.<groovyjarjarantlr.Grammar: boolean traceRules>;

        if $z12 == 0 goto label45;

     label40:
        $i8 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i9 = $i8 - 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i9;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("finally:  ### debugging");

        $i10 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i11 = $i10 + 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i11;

        $r15 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z8 = $r15.<groovyjarjarantlr.Grammar: boolean debuggingOutput>;

        if $z8 == 0 goto label42;

        $r29 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z10 = $r29 instanceof groovyjarjarantlr.ParserGrammar;

        if $z10 == 0 goto label41;

        $r36 = new java.lang.StringBuffer;

        specialinvoke $r36.<java.lang.StringBuffer: void <init>()>();

        $r37 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("self.fireExitRule(");

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i12);

        $r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", 0)");

        $r40 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r40);

        goto label42;

     label41:
        $r30 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z11 = $r30 instanceof groovyjarjarantlr.LexerGrammar;

        if $z11 == 0 goto label42;

        $r31 = new java.lang.StringBuffer;

        specialinvoke $r31.<java.lang.StringBuffer: void <init>()>();

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("self.fireExitRule(");

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i12);

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", _ttype)");

        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r35);

     label42:
        $r167 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z35 = $r167.<groovyjarjarantlr.Grammar: boolean traceRules>;

        if $z35 == 0 goto label44;

        $r16 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z9 = $r16 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z9 == 0 goto label43;

        $r23 = new java.lang.StringBuffer;

        specialinvoke $r23.<java.lang.StringBuffer: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("self.traceOut(\"");

        $r25 = virtualinvoke r1.<groovyjarjarantlr.RuleSymbol: java.lang.String getId()>();

        $r26 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\", _t)");

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r28);

        goto label44;

     label43:
        $r17 = new java.lang.StringBuffer;

        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("self.traceOut(\"");

        $r19 = virtualinvoke r1.<groovyjarjarantlr.RuleSymbol: java.lang.String getId()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\")");

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r22);

     label44:
        $i49 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i50 = $i49 - 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i50;

     label45:
        $i51 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i52 = $i51 - 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i52;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("");

        r0.<groovyjarjarantlr.PythonCodeGenerator: boolean genAST> = z1;

        return;
    }

    private void GenRuleInvocation(groovyjarjarantlr.RuleRefElement)
    {
        groovyjarjarantlr.RuleBlock $r9, $r20, $r29, $r56;
        groovyjarjarantlr.PythonCodeGenerator r0;
        groovyjarjarantlr.GrammarSymbol $r53;
        groovyjarjarantlr.Tool $r12, $r24, $r36;
        java.lang.StringBuffer $r1, $r2, $r5, $r6, $r11, $r13, $r15, $r23, $r25, $r27, $r28, $r31, $r35, $r37, $r39, $r40;
        java.lang.String $r4, $r7, $r10, $r14, $r16, $r18, $r21, $r22, $r26, $r30, $r32, $r34, $r38, $r41, $r43, $r44, $r45, $r46, $r47, $r48, $r49, $r50, $r52, $r55, $r57;
        groovyjarjarantlr.ActionTransInfo $r19;
        groovyjarjarantlr.RuleSymbol $r54;
        groovyjarjarantlr.Grammar $r8, $r17, $r33, $r42, $r51, $r58;
        groovyjarjarantlr.RuleRefElement r3;
        boolean $z0, $z1, $z2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;

        r0 := @this: groovyjarjarantlr.PythonCodeGenerator;

        r3 := @parameter0: groovyjarjarantlr.RuleRefElement;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("self.");

        $r4 = r3.<groovyjarjarantlr.RuleRefElement: java.lang.String targetRule>;

        $r5 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void _print(java.lang.String)>($r7);

        $r8 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z0 = $r8 instanceof groovyjarjarantlr.LexerGrammar;

        if $z0 == 0 goto label04;

        $r46 = virtualinvoke r3.<groovyjarjarantlr.RuleRefElement: java.lang.String getLabel()>();

        if $r46 == null goto label01;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void _print(java.lang.String)>("True");

        goto label02;

     label01:
        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void _print(java.lang.String)>("False");

     label02:
        $r47 = r0.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String commonExtraArgs>;

        $i6 = virtualinvoke $r47.<java.lang.String: int length()>();

        if $i6 != 0 goto label03;

        $r48 = r3.<groovyjarjarantlr.RuleRefElement: java.lang.String args>;

        if $r48 == null goto label04;

     label03:
        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void _print(java.lang.String)>(", ");

     label04:
        $r49 = r0.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String commonExtraArgs>;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void _print(java.lang.String)>($r49);

        $r50 = r0.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String commonExtraArgs>;

        $i7 = virtualinvoke $r50.<java.lang.String: int length()>();

        if $i7 == 0 goto label05;

        $r45 = r3.<groovyjarjarantlr.RuleRefElement: java.lang.String args>;

        if $r45 == null goto label05;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void _print(java.lang.String)>(", ");

     label05:
        $r51 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r52 = r3.<groovyjarjarantlr.RuleRefElement: java.lang.String targetRule>;

        $r53 = virtualinvoke $r51.<groovyjarjarantlr.Grammar: groovyjarjarantlr.GrammarSymbol getSymbol(java.lang.String)>($r52);

        $r54 = (groovyjarjarantlr.RuleSymbol) $r53;

        $r55 = r3.<groovyjarjarantlr.RuleRefElement: java.lang.String args>;

        if $r55 == null goto label08;

        $r19 = new groovyjarjarantlr.ActionTransInfo;

        specialinvoke $r19.<groovyjarjarantlr.ActionTransInfo: void <init>()>();

        $r21 = r3.<groovyjarjarantlr.RuleRefElement: java.lang.String args>;

        $r20 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.RuleBlock currentRule>;

        $r22 = virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String processActionForSpecialSymbols(java.lang.String,int,groovyjarjarantlr.RuleBlock,groovyjarjarantlr.ActionTransInfo)>($r21, 0, $r20, $r19);

        $z1 = $r19.<groovyjarjarantlr.ActionTransInfo: boolean assignToRoot>;

        if $z1 != 0 goto label06;

        $r44 = $r19.<groovyjarjarantlr.ActionTransInfo: java.lang.String refRuleRoot>;

        if $r44 == null goto label07;

     label06:
        $r24 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r23 = new java.lang.StringBuffer;

        specialinvoke $r23.<java.lang.StringBuffer: void <init>()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Arguments of rule reference \'");

        $r26 = r3.<groovyjarjarantlr.RuleRefElement: java.lang.String targetRule>;

        $r27 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' cannot set or ref #");

        $r29 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.RuleBlock currentRule>;

        $r30 = virtualinvoke $r29.<groovyjarjarantlr.RuleBlock: java.lang.String getRuleName()>();

        $r31 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.String toString()>();

        $r33 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r34 = virtualinvoke $r33.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i2 = virtualinvoke r3.<groovyjarjarantlr.RuleRefElement: int getLine()>();

        $i3 = virtualinvoke r3.<groovyjarjarantlr.RuleRefElement: int getColumn()>();

        virtualinvoke $r24.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>($r32, $r34, $i2, $i3);

     label07:
        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void _print(java.lang.String)>($r22);

        $r56 = $r54.<groovyjarjarantlr.RuleSymbol: groovyjarjarantlr.RuleBlock block>;

        $r57 = $r56.<groovyjarjarantlr.RuleBlock: java.lang.String argAction>;

        if $r57 != null goto label09;

        $r36 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r35 = new java.lang.StringBuffer;

        specialinvoke $r35.<java.lang.StringBuffer: void <init>()>();

        $r37 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Rule \'");

        $r38 = r3.<groovyjarjarantlr.RuleRefElement: java.lang.String targetRule>;

        $r39 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r38);

        $r40 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' accepts no arguments");

        $r41 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.String toString()>();

        $r42 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r43 = virtualinvoke $r42.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i4 = virtualinvoke r3.<groovyjarjarantlr.RuleRefElement: int getLine()>();

        $i5 = virtualinvoke r3.<groovyjarjarantlr.RuleRefElement: int getColumn()>();

        virtualinvoke $r36.<groovyjarjarantlr.Tool: void warning(java.lang.String,java.lang.String,int,int)>($r41, $r43, $i4, $i5);

        goto label09;

     label08:
        $r9 = $r54.<groovyjarjarantlr.RuleSymbol: groovyjarjarantlr.RuleBlock block>;

        $r10 = $r9.<groovyjarjarantlr.RuleBlock: java.lang.String argAction>;

        if $r10 == null goto label09;

        $r12 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Missing parameters on reference to rule ");

        $r14 = r3.<groovyjarjarantlr.RuleRefElement: java.lang.String targetRule>;

        $r15 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        $r17 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r18 = virtualinvoke $r17.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i0 = virtualinvoke r3.<groovyjarjarantlr.RuleRefElement: int getLine()>();

        $i1 = virtualinvoke r3.<groovyjarjarantlr.RuleRefElement: int getColumn()>();

        virtualinvoke $r12.<groovyjarjarantlr.Tool: void warning(java.lang.String,java.lang.String,int,int)>($r16, $r18, $i0, $i1);

     label09:
        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void _println(java.lang.String)>(")");

        $r58 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z2 = $r58 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z2 == 0 goto label10;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("_t = self._retTree");

     label10:
        return;
    }

    protected void genSemPred(java.lang.String, int)
    {
        groovyjarjarantlr.CharFormatter $r4;
        groovyjarjarantlr.Grammar $r6, $r7, $r14;
        boolean $z0, $z1, $z2;
        groovyjarjarantlr.RuleBlock $r2;
        groovyjarjarantlr.PythonCodeGenerator r1;
        java.lang.StringBuffer $r8, $r9, $r10, $r11, $r12, $r13, $r17, $r18, $r19, $r20, $r22, $r23, $r24, $r25;
        int i0, $i1, $i2, $i3, $i4, $i5;
        groovyjarjarantlr.ActionTransInfo $r0;
        java.lang.String $r3, $r5, r15, r16, $r21, $r26;

        r1 := @this: groovyjarjarantlr.PythonCodeGenerator;

        r15 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r0 = new groovyjarjarantlr.ActionTransInfo;

        specialinvoke $r0.<groovyjarjarantlr.ActionTransInfo: void <init>()>();

        $r2 = r1.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.RuleBlock currentRule>;

        $r3 = virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String processActionForSpecialSymbols(java.lang.String,int,groovyjarjarantlr.RuleBlock,groovyjarjarantlr.ActionTransInfo)>(r15, i0, $r2, $r0);

        r16 = $r3;

        $r4 = r1.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.CharFormatter charFormatter>;

        $r5 = interfaceinvoke $r4.<groovyjarjarantlr.CharFormatter: java.lang.String escapeString(java.lang.String)>($r3);

        $r6 = r1.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z0 = $r6.<groovyjarjarantlr.Grammar: boolean debuggingOutput>;

        if $z0 == 0 goto label2;

        $r7 = r1.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z1 = $r7 instanceof groovyjarjarantlr.ParserGrammar;

        if $z1 != 0 goto label1;

        $r14 = r1.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z2 = $r14 instanceof groovyjarjarantlr.LexerGrammar;

        if $z2 == 0 goto label2;

     label1:
        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("fireSemanticPredicateEvaluated(antlr.debug.SemanticPredicateEvent.VALIDATING,");

        $i1 = virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: int addSemPred(java.lang.String)>($r5);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        r16 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

     label2:
        $r17 = new java.lang.StringBuffer;

        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("if not ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r16);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r21);

        $i2 = r1.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i3 = $i2 + 1;

        r1.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i3;

        $r22 = new java.lang.StringBuffer;

        specialinvoke $r22.<java.lang.StringBuffer: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("raise antlr.SemanticException(\"");

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\")");

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r26);

        $i4 = r1.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i5 = $i4 - 1;

        r1.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i5;

        return;
    }

    protected void genSemPredMap()
    {
        java.util.Enumeration $r2;
        groovyjarjarantlr.PythonCodeGenerator r0;
        java.lang.StringBuffer $r3, $r4, $r6, $r7;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r5;
        java.lang.String $r8;
        groovyjarjarantlr.collections.impl.Vector $r1;
        boolean $z0;

        r0 := @this: groovyjarjarantlr.PythonCodeGenerator;

        $r1 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.collections.impl.Vector semPreds>;

        $r2 = virtualinvoke $r1.<groovyjarjarantlr.collections.impl.Vector: java.util.Enumeration elements()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("_semPredNames = [");

        $i0 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i1 = $i0 + 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i1;

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label2;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"");

        $r5 = interfaceinvoke $r2.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\",");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r8);

        goto label1;

     label2:
        $i2 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i3 = $i2 - 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i3;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("]");

        return;
    }

    protected void genSynPred(groovyjarjarantlr.SynPredBlock, java.lang.String)
    {
        groovyjarjarantlr.PythonCodeGenerator r0;
        groovyjarjarantlr.SynPredBlock r3;
        java.lang.StringBuffer $r1, $r2, $r4, $r5, $r7, $r8, $r10, $r11, $r14, $r15, $r16, $r17, $r19, $r20, $r21, $r22, $r25, $r26, $r27, $r28, $r32, $r33, $r34, $r35, $r38, $r39, $r40, $r41, $r45, $r46, $r47, $r48, $r50, $r52, $r53, $r54, $r56, $r57, $r59, $r60, $r62, $r63, $r64, $r65, $r68, $r69, $r70, $r71;
        java.lang.String $r6, r9, $r12, $r18, $r23, $r29, $r36, $r42, $r49, $r55, $r58, $r61, $r66, $r72;
        groovyjarjarantlr.Grammar $r13, $r24, $r30, $r31, $r37, $r43, $r44, $r67;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32;
        java.io.PrintStream $r51;

        r0 := @this: groovyjarjarantlr.PythonCodeGenerator;

        r3 := @parameter0: groovyjarjarantlr.SynPredBlock;

        r9 := @parameter1: java.lang.String;

        $z0 = r0.<groovyjarjarantlr.PythonCodeGenerator: boolean DEBUG_CODE_GENERATOR>;

        if $z0 == 0 goto label1;

        $r51 = <java.lang.System: java.io.PrintStream out>;

        $r50 = new java.lang.StringBuffer;

        specialinvoke $r50.<java.lang.StringBuffer: void <init>()>();

        $r52 = virtualinvoke $r50.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("gen=>(");

        $r53 = virtualinvoke $r52.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r3);

        $r54 = virtualinvoke $r53.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r55 = virtualinvoke $r54.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r51.<java.io.PrintStream: void println(java.lang.String)>($r55);

     label1:
        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("synPredMatched");

        $i0 = r3.<groovyjarjarantlr.SynPredBlock: int ID>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = False");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r6);

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("if ");

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r12);

        $i1 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i2 = $i1 + 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i2;

        $r13 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z1 = $r13 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z1 == 0 goto label2;

        $r45 = new java.lang.StringBuffer;

        specialinvoke $r45.<java.lang.StringBuffer: void <init>()>();

        $r46 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_t");

        $i16 = r3.<groovyjarjarantlr.SynPredBlock: int ID>;

        $r47 = virtualinvoke $r46.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i16);

        $r48 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = _t");

        $r49 = virtualinvoke $r48.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r49);

        goto label3;

     label2:
        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_m");

        $i3 = r3.<groovyjarjarantlr.SynPredBlock: int ID>;

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i3);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = self.mark()");

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r18);

     label3:
        $r19 = new java.lang.StringBuffer;

        specialinvoke $r19.<java.lang.StringBuffer: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("synPredMatched");

        $i4 = r3.<groovyjarjarantlr.SynPredBlock: int ID>;

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i4);

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = True");

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r23);

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("self.inputState.guessing += 1");

        $r24 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z2 = $r24.<groovyjarjarantlr.Grammar: boolean debuggingOutput>;

        if $z2 == 0 goto label5;

        $r43 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z6 = $r43 instanceof groovyjarjarantlr.ParserGrammar;

        if $z6 != 0 goto label4;

        $r44 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z7 = $r44 instanceof groovyjarjarantlr.LexerGrammar;

        if $z7 == 0 goto label5;

     label4:
        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("self.fireSyntacticPredicateStarted()");

     label5:
        $i17 = r0.<groovyjarjarantlr.PythonCodeGenerator: int syntacticPredLevel>;

        $i18 = $i17 + 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int syntacticPredLevel> = $i18;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("try:");

        $i19 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i20 = $i19 + 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i20;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void gen(groovyjarjarantlr.AlternativeBlock)>(r3);

        $i21 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i22 = $i21 - 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i22;

        $r56 = new java.lang.StringBuffer;

        specialinvoke $r56.<java.lang.StringBuffer: void <init>()>();

        $r57 = virtualinvoke $r56.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("except ");

        $r58 = r0.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String exceptionThrown>;

        $r59 = virtualinvoke $r57.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r58);

        $r60 = virtualinvoke $r59.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", pe:");

        $r61 = virtualinvoke $r60.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r61);

        $i23 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i24 = $i23 + 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i24;

        $r62 = new java.lang.StringBuffer;

        specialinvoke $r62.<java.lang.StringBuffer: void <init>()>();

        $r63 = virtualinvoke $r62.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("synPredMatched");

        $i25 = r3.<groovyjarjarantlr.SynPredBlock: int ID>;

        $r64 = virtualinvoke $r63.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i25);

        $r65 = virtualinvoke $r64.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = False");

        $r66 = virtualinvoke $r65.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r66);

        $i26 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i27 = $i26 - 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i27;

        $r67 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z8 = $r67 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z8 == 0 goto label6;

        $r38 = new java.lang.StringBuffer;

        specialinvoke $r38.<java.lang.StringBuffer: void <init>()>();

        $r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_t = _t");

        $i15 = r3.<groovyjarjarantlr.SynPredBlock: int ID>;

        $r40 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i15);

        $r41 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("");

        $r42 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r42);

        goto label7;

     label6:
        $r25 = new java.lang.StringBuffer;

        specialinvoke $r25.<java.lang.StringBuffer: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("self.rewind(_m");

        $i5 = r3.<groovyjarjarantlr.SynPredBlock: int ID>;

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i5);

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r29);

     label7:
        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("self.inputState.guessing -= 1");

        $r30 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z3 = $r30.<groovyjarjarantlr.Grammar: boolean debuggingOutput>;

        if $z3 == 0 goto label9;

        $r31 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z4 = $r31 instanceof groovyjarjarantlr.ParserGrammar;

        if $z4 != 0 goto label8;

        $r37 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z5 = $r37 instanceof groovyjarjarantlr.LexerGrammar;

        if $z5 == 0 goto label9;

     label8:
        $r32 = new java.lang.StringBuffer;

        specialinvoke $r32.<java.lang.StringBuffer: void <init>()>();

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("if synPredMatched");

        $i6 = r3.<groovyjarjarantlr.SynPredBlock: int ID>;

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i6);

        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r36);

        $i7 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i8 = $i7 + 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i8;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("self.fireSyntacticPredicateSucceeded()");

        $i9 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i10 = $i9 - 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i10;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("else:");

        $i11 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i12 = $i11 + 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i12;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("self.fireSyntacticPredicateFailed()");

        $i13 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i14 = $i13 - 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i14;

     label9:
        $i28 = r0.<groovyjarjarantlr.PythonCodeGenerator: int syntacticPredLevel>;

        $i29 = $i28 - 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int syntacticPredLevel> = $i29;

        $i30 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i31 = $i30 - 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i31;

        $r68 = new java.lang.StringBuffer;

        specialinvoke $r68.<java.lang.StringBuffer: void <init>()>();

        $r69 = virtualinvoke $r68.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("if synPredMatched");

        $i32 = r3.<groovyjarjarantlr.SynPredBlock: int ID>;

        $r70 = virtualinvoke $r69.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i32);

        $r71 = virtualinvoke $r70.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        $r72 = virtualinvoke $r71.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r72);

        return;
    }

    public void genTokenStrings()
    {
        groovyjarjarantlr.Grammar $r1, $r5;
        groovyjarjarantlr.CharFormatter $r16;
        java.lang.StringBuffer $r10, $r11, $r13, $r14;
        int i0, $i1, $i2, $i3, $i4, $i5, i6, $i7, $i8;
        java.lang.String $r8, $r9, $r12, r15, $r17;
        groovyjarjarantlr.TokenManager $r2, $r6;
        groovyjarjarantlr.collections.impl.Vector $r3;
        boolean $z0, $z1;
        groovyjarjarantlr.TokenSymbol $r7;
        groovyjarjarantlr.PythonCodeGenerator r0;
        java.lang.Object $r4;

        r0 := @this: groovyjarjarantlr.PythonCodeGenerator;

        i0 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = 0;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("");

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("_tokenNames = [");

        $i1 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i2 = $i1 + 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i2;

        $r1 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r2 = $r1.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager>;

        $r3 = interfaceinvoke $r2.<groovyjarjarantlr.TokenManager: groovyjarjarantlr.collections.impl.Vector getVocabulary()>();

        i6 = 0;

     label1:
        $i3 = virtualinvoke $r3.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if i6 >= $i3 goto label5;

        $r4 = virtualinvoke $r3.<groovyjarjarantlr.collections.impl.Vector: java.lang.Object elementAt(int)>(i6);

        r15 = (java.lang.String) $r4;

        if r15 != null goto label2;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("<");

        $r12 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i6);

        $r13 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(">");

        r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

     label2:
        $z0 = virtualinvoke r15.<java.lang.String: boolean startsWith(java.lang.String)>("\"");

        if $z0 != 0 goto label3;

        $z1 = virtualinvoke r15.<java.lang.String: boolean startsWith(java.lang.String)>("<");

        if $z1 != 0 goto label3;

        $r5 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r6 = $r5.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager>;

        $r7 = interfaceinvoke $r6.<groovyjarjarantlr.TokenManager: groovyjarjarantlr.TokenSymbol getTokenSymbol(java.lang.String)>(r15);

        if $r7 == null goto label3;

        $r8 = virtualinvoke $r7.<groovyjarjarantlr.TokenSymbol: java.lang.String getParaphrase()>();

        if $r8 == null goto label3;

        $r9 = virtualinvoke $r7.<groovyjarjarantlr.TokenSymbol: java.lang.String getParaphrase()>();

        r15 = staticinvoke <groovyjarjarantlr.StringUtils: java.lang.String stripFrontBack(java.lang.String,java.lang.String,java.lang.String)>($r9, "\"", "\"");

     label3:
        $r16 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.CharFormatter charFormatter>;

        $r17 = interfaceinvoke $r16.<groovyjarjarantlr.CharFormatter: java.lang.String literalString(java.lang.String)>(r15);

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void print(java.lang.String)>($r17);

        $i7 = virtualinvoke $r3.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        $i8 = $i7 - 1;

        if i6 == $i8 goto label4;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void _print(java.lang.String)>(", ");

     label4:
        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void _println(java.lang.String)>("");

        i6 = i6 + 1;

        goto label1;

     label5:
        $i4 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i5 = $i4 - 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i5;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("]");

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = i0;

        return;
    }

    protected void genTokenASTNodeMap()
    {
        groovyjarjarantlr.Grammar $r1, $r6;
        java.lang.StringBuffer $r10, $r11, $r12, $r13, $r15;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7;
        java.lang.String r5, $r9, $r14, $r16;
        groovyjarjarantlr.TokenManager $r2, $r7;
        groovyjarjarantlr.collections.impl.Vector $r3;
        boolean z0;
        groovyjarjarantlr.TokenSymbol $r8;
        groovyjarjarantlr.PythonCodeGenerator r0;
        java.lang.Object $r4;

        r0 := @this: groovyjarjarantlr.PythonCodeGenerator;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("");

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("def buildTokenTypeASTClassMap(self):");

        $i0 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i1 = $i0 + 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i1;

        z0 = 0;

        i6 = 0;

        $r1 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r2 = $r1.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager>;

        $r3 = interfaceinvoke $r2.<groovyjarjarantlr.TokenManager: groovyjarjarantlr.collections.impl.Vector getVocabulary()>();

        i7 = 0;

     label1:
        $i2 = virtualinvoke $r3.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if i7 >= $i2 goto label4;

        $r4 = virtualinvoke $r3.<groovyjarjarantlr.collections.impl.Vector: java.lang.Object elementAt(int)>(i7);

        r5 = (java.lang.String) $r4;

        if r5 == null goto label3;

        $r6 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r7 = $r6.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager>;

        $r8 = interfaceinvoke $r7.<groovyjarjarantlr.TokenManager: groovyjarjarantlr.TokenSymbol getTokenSymbol(java.lang.String)>(r5);

        if $r8 == null goto label3;

        $r9 = virtualinvoke $r8.<groovyjarjarantlr.TokenSymbol: java.lang.String getASTNodeType()>();

        if $r9 == null goto label3;

        i6 = i6 + 1;

        if z0 != 0 goto label2;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("self.tokenTypeToASTClassMap = {}");

        z0 = 1;

     label2:
        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("self.tokenTypeToASTClassMap[");

        $i5 = virtualinvoke $r8.<groovyjarjarantlr.TokenSymbol: int getTokenType()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i5);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] = ");

        $r14 = virtualinvoke $r8.<groovyjarjarantlr.TokenSymbol: java.lang.String getASTNodeType()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r16);

     label3:
        i7 = i7 + 1;

        goto label1;

     label4:
        if i6 != 0 goto label5;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("self.tokenTypeToASTClassMap = None");

     label5:
        $i3 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i4 = $i3 - 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i4;

        return;
    }

    protected void genTokenTypes(groovyjarjarantlr.TokenManager) throws java.io.IOException
    {
        groovyjarjarantlr.StringLiteralSymbol r11;
        groovyjarjarantlr.TokenManager r1;
        groovyjarjarantlr.collections.impl.Vector $r2;
        boolean $z0, $z1;
        groovyjarjarantlr.TokenSymbol $r10;
        groovyjarjarantlr.PythonCodeGenerator r0;
        groovyjarjarantlr.Tool $r32;
        java.lang.StringBuffer $r5, $r6, $r7, $r8, $r14, $r15, $r16, $r17, $r18, $r20, $r21, $r22, $r23, $r25, $r27, $r28, $r29, $r31, $r33, $r34, $r35;
        int $i0, $i1, $i2, i3;
        java.lang.String r4, $r9, $r12, $r13, $r19, $r24, $r26, $r30, $r36;
        java.lang.Object $r3;

        r0 := @this: groovyjarjarantlr.PythonCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.TokenManager;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = 0;

        $r2 = interfaceinvoke r1.<groovyjarjarantlr.TokenManager: groovyjarjarantlr.collections.impl.Vector getVocabulary()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("SKIP                = antlr.SKIP");

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("INVALID_TYPE        = antlr.INVALID_TYPE");

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("EOF_TYPE            = antlr.EOF_TYPE");

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("EOF                 = antlr.EOF");

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("NULL_TREE_LOOKAHEAD = antlr.NULL_TREE_LOOKAHEAD");

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("MIN_USER_TYPE       = antlr.MIN_USER_TYPE");

        i3 = 4;

     label1:
        $i0 = virtualinvoke $r2.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if i3 >= $i0 goto label7;

        $r3 = virtualinvoke $r2.<groovyjarjarantlr.collections.impl.Vector: java.lang.Object elementAt(int)>(i3);

        r4 = (java.lang.String) $r3;

        if r4 == null goto label6;

        $z0 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>("\"");

        if $z0 == 0 goto label5;

        $r10 = interfaceinvoke r1.<groovyjarjarantlr.TokenManager: groovyjarjarantlr.TokenSymbol getTokenSymbol(java.lang.String)>(r4);

        r11 = (groovyjarjarantlr.StringLiteralSymbol) $r10;

        if r11 != null goto label2;

        $r32 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r31 = new java.lang.StringBuffer;

        specialinvoke $r31.<java.lang.StringBuffer: void <init>()>();

        $r33 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("String literal ");

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" not in symbol table");

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r32.<groovyjarjarantlr.Tool: void panic(java.lang.String)>($r36);

     label2:
        $r12 = r11.<groovyjarjarantlr.StringLiteralSymbol: java.lang.String label>;

        if $r12 == null goto label3;

        $r25 = new java.lang.StringBuffer;

        specialinvoke $r25.<java.lang.StringBuffer: void <init>()>();

        $r26 = r11.<groovyjarjarantlr.StringLiteralSymbol: java.lang.String label>;

        $r27 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = ");

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i3);

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r30);

        goto label6;

     label3:
        $r13 = specialinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String mangleLiteral(java.lang.String)>(r4);

        if $r13 == null goto label4;

        $r20 = new java.lang.StringBuffer;

        specialinvoke $r20.<java.lang.StringBuffer: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i3);

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r24);

        r11.<groovyjarjarantlr.StringLiteralSymbol: java.lang.String label> = $r13;

        goto label6;

     label4:
        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("### ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i3);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r19);

        goto label6;

     label5:
        $z1 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>("<");

        if $z1 != 0 goto label6;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>($r9);

     label6:
        i3 = i3 + 1;

        goto label1;

     label7:
        $i1 = r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs>;

        $i2 = $i1 - 1;

        r0.<groovyjarjarantlr.PythonCodeGenerator: int tabs> = $i2;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void exitIfError()>();

        return;
    }

    public java.lang.String getASTCreateString(groovyjarjarantlr.collections.impl.Vector)
    {
        groovyjarjarantlr.PythonCodeGenerator r4;
        java.lang.StringBuffer $r1;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.Object $r3;
        java.lang.String $r2;
        groovyjarjarantlr.collections.impl.Vector r0;

        r4 := @this: groovyjarjarantlr.PythonCodeGenerator;

        r0 := @parameter0: groovyjarjarantlr.collections.impl.Vector;

        $i0 = virtualinvoke r0.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if $i0 != 0 goto label1;

        return "";

     label1:
        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("antlr.make(");

        i4 = 0;

     label2:
        $i1 = virtualinvoke r0.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if i4 >= $i1 goto label4;

        $r3 = virtualinvoke r0.<groovyjarjarantlr.collections.impl.Vector: java.lang.Object elementAt(int)>(i4);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r3);

        $i2 = i4 + 1;

        $i3 = virtualinvoke r0.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if $i2 >= $i3 goto label3;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

     label3:
        i4 = i4 + 1;

        goto label2;

     label4:
        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    public java.lang.String getASTCreateString(groovyjarjarantlr.GrammarAtom, java.lang.String)
    {
        groovyjarjarantlr.PythonCodeGenerator r1;
        groovyjarjarantlr.GrammarAtom r0;
        java.lang.StringBuffer $r5, $r6, $r7, $r8, $r10, $r11;
        java.lang.String r2, $r3, $r4, $r9, $r12;

        r1 := @this: groovyjarjarantlr.PythonCodeGenerator;

        r0 := @parameter0: groovyjarjarantlr.GrammarAtom;

        r2 := @parameter1: java.lang.String;

        if r0 == null goto label1;

        $r4 = virtualinvoke r0.<groovyjarjarantlr.GrammarAtom: java.lang.String getASTNodeType()>();

        if $r4 == null goto label1;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("self.astFactory.create(");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        $r9 = virtualinvoke r0.<groovyjarjarantlr.GrammarAtom: java.lang.String getASTNodeType()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r12;

     label1:
        $r3 = virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String getASTCreateString(java.lang.String)>(r2);

        return $r3;
    }

    public java.lang.String getASTCreateString(java.lang.String)
    {
        groovyjarjarantlr.Grammar $r6;
        groovyjarjarantlr.TokenManager $r7;
        boolean $z0;
        groovyjarjarantlr.TokenSymbol $r8;
        groovyjarjarantlr.PythonCodeGenerator r5;
        java.lang.StringBuffer $r1, $r2, $r3, $r11, $r12, $r13, $r16, $r17, $r18, $r22, $r23, $r24, $r25, $r26, $r27, $r32, $r33, $r34, $r35;
        int $i0, i2, i3, $i4, $i5;
        java.lang.String $r4, $r9, $r14, $r19, $r20, $r28, r29, r30, r31;
        char $c1;

        r5 := @this: groovyjarjarantlr.PythonCodeGenerator;

        r29 := @parameter0: java.lang.String;

        if r29 != null goto label1;

        r29 = "";

     label1:
        i2 = 0;

        i3 = 0;

     label2:
        $i4 = virtualinvoke r29.<java.lang.String: int length()>();

        if i3 >= $i4 goto label4;

        $c1 = virtualinvoke r29.<java.lang.String: char charAt(int)>(i3);

        $i5 = (int) $c1;

        if $i5 != 44 goto label3;

        i2 = i2 + 1;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        if i2 >= 2 goto label9;

        $i0 = virtualinvoke r29.<java.lang.String: int indexOf(int)>(44);

        virtualinvoke r29.<java.lang.String: int lastIndexOf(int)>(44);

        r30 = r29;

        if i2 <= 0 goto label5;

        r30 = virtualinvoke r29.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

     label5:
        $r6 = r5.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r7 = $r6.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager>;

        $r8 = interfaceinvoke $r7.<groovyjarjarantlr.TokenManager: groovyjarjarantlr.TokenSymbol getTokenSymbol(java.lang.String)>(r30);

        if $r8 == null goto label7;

        $r20 = virtualinvoke $r8.<groovyjarjarantlr.TokenSymbol: java.lang.String getASTNodeType()>();

        r31 = "";

        if i2 != 0 goto label6;

        r31 = ", \"\"";

     label6:
        if $r20 == null goto label7;

        $r32 = new java.lang.StringBuffer;

        specialinvoke $r32.<java.lang.StringBuffer: void <init>()>();

        $r22 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("self.astFactory.create(");

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r29);

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r31);

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20);

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r28;

     label7:
        $r9 = r5.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String labeledElementASTType>;

        $z0 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>("AST");

        if $z0 == 0 goto label8;

        $r33 = new java.lang.StringBuffer;

        specialinvoke $r33.<java.lang.StringBuffer: void <init>()>();

        $r16 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("self.astFactory.create(");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r29);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r19;

     label8:
        $r34 = new java.lang.StringBuffer;

        specialinvoke $r34.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("self.astFactory.create(");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r29);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r14;

     label9:
        $r35 = new java.lang.StringBuffer;

        specialinvoke $r35.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("self.astFactory.create(");

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r29);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    protected java.lang.String getLookaheadTestExpression(groovyjarjarantlr.Lookahead[], int)
    {
        groovyjarjarantlr.Lookahead[] r2;
        groovyjarjarantlr.collections.impl.BitSet r4;
        groovyjarjarantlr.PythonCodeGenerator r6;
        java.lang.StringBuffer $r0;
        groovyjarjarantlr.Lookahead $r3, $r5;
        int i0, i1;
        java.lang.String $r1, $r7;
        boolean $z0, z1;

        r6 := @this: groovyjarjarantlr.PythonCodeGenerator;

        r2 := @parameter0: groovyjarjarantlr.Lookahead[];

        i0 := @parameter1: int;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>(int)>(100);

        z1 = 1;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(");

        i1 = 1;

     label1:
        if i1 > i0 goto label5;

        $r3 = r2[i1];

        r4 = $r3.<groovyjarjarantlr.Lookahead: groovyjarjarantlr.collections.impl.BitSet fset>;

        if z1 != 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") and (");

     label2:
        z1 = 0;

        $r5 = r2[i1];

        $z0 = virtualinvoke $r5.<groovyjarjarantlr.Lookahead: boolean containsEpsilon()>();

        if $z0 == 0 goto label3;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("True");

        goto label4;

     label3:
        $r7 = virtualinvoke r6.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String getLookaheadTestTerm(int,groovyjarjarantlr.collections.impl.BitSet)>(i1, r4);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

     label4:
        i1 = i1 + 1;

        goto label1;

     label5:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r1;
    }

    protected java.lang.String getLookaheadTestExpression(groovyjarjarantlr.Alternative, int)
    {
        groovyjarjarantlr.Lookahead[] $r2;
        int i0, i1;
        java.lang.String $r3;
        groovyjarjarantlr.PythonCodeGenerator r1;
        groovyjarjarantlr.Grammar $r4;
        groovyjarjarantlr.Alternative r0;

        r1 := @this: groovyjarjarantlr.PythonCodeGenerator;

        r0 := @parameter0: groovyjarjarantlr.Alternative;

        i0 := @parameter1: int;

        i1 = r0.<groovyjarjarantlr.Alternative: int lookaheadDepth>;

        if i1 != 2147483647 goto label1;

        $r4 = r1.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        i1 = $r4.<groovyjarjarantlr.Grammar: int maxk>;

     label1:
        if i0 != 0 goto label2;

        return "True";

     label2:
        $r2 = r0.<groovyjarjarantlr.Alternative: groovyjarjarantlr.Lookahead[] cache>;

        $r3 = virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String getLookaheadTestExpression(groovyjarjarantlr.Lookahead[],int)>($r2, i1);

        return $r3;
    }

    protected java.lang.String getLookaheadTestTerm(int, groovyjarjarantlr.collections.impl.BitSet)
    {
        int[] $r3;
        java.lang.StringBuffer $r4, $r7, $r9, $r10, $r11, $r12;
        int i0, $i1, $i2, $i3, $i4, $i5, i6;
        java.lang.String $r1, $r5, $r6, $r8, $r13, $r14;
        boolean $z0;
        groovyjarjarantlr.collections.impl.BitSet r2;
        groovyjarjarantlr.PythonCodeGenerator r0;

        r0 := @this: groovyjarjarantlr.PythonCodeGenerator;

        i0 := @parameter0: int;

        r2 := @parameter1: groovyjarjarantlr.collections.impl.BitSet;

        $r1 = specialinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String lookaheadString(int)>(i0);

        $r3 = virtualinvoke r2.<groovyjarjarantlr.collections.impl.BitSet: int[] toArray()>();

        $z0 = staticinvoke <groovyjarjarantlr.PythonCodeGenerator: boolean elementsAreRange(int[])>($r3);

        if $z0 == 0 goto label1;

        $r14 = virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String getRangeExpression(int,int[])>(i0, $r3);

        return $r14;

     label1:
        $i1 = virtualinvoke r2.<groovyjarjarantlr.collections.impl.BitSet: int degree()>();

        if $i1 != 0 goto label2;

        return "True";

     label2:
        $i2 = r0.<groovyjarjarantlr.PythonCodeGenerator: int bitsetTestThreshold>;

        if $i1 < $i2 goto label3;

        $i5 = virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: int markBitsetForGen(groovyjarjarantlr.collections.impl.BitSet)>(r2);

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String getBitsetName(int)>($i5);

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".member(");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r13;

     label3:
        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        i6 = 0;

     label4:
        $i3 = lengthof $r3;

        if i6 >= $i3 goto label6;

        $i4 = $r3[i6];

        $r6 = specialinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String getValueString(int,boolean)>($i4, 1);

        if i6 <= 0 goto label5;

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" or ");

     label5:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("==");

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        i6 = i6 + 1;

        goto label4;

     label6:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r5;
    }

    public java.lang.String getRangeExpression(int, int[])
    {
        int[] r0;
        groovyjarjarantlr.Tool $r17;
        java.lang.StringBuffer $r1, $r2, $r5, $r6, $r8, $r9, $r11, $r12, $r14, $r15;
        int $i0, $i1, i2, $i3, $i4;
        java.lang.String $r4, $r7, $r10, $r13, $r16;
        boolean $z0;
        groovyjarjarantlr.PythonCodeGenerator r3;

        r3 := @this: groovyjarjarantlr.PythonCodeGenerator;

        i2 := @parameter0: int;

        r0 := @parameter1: int[];

        $z0 = staticinvoke <groovyjarjarantlr.PythonCodeGenerator: boolean elementsAreRange(int[])>(r0);

        if $z0 != 0 goto label1;

        $r17 = r3.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        virtualinvoke $r17.<groovyjarjarantlr.Tool: void panic(java.lang.String)>("getRangeExpression called with non-range");

     label1:
        $i3 = r0[0];

        $i0 = lengthof r0;

        $i1 = $i0 - 1;

        $i4 = r0[$i1];

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(");

        $r4 = specialinvoke r3.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String lookaheadString(int)>(i2);

        $r5 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" >= ");

        $r7 = specialinvoke r3.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String getValueString(int,boolean)>($i3, 1);

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" and ");

        $r10 = specialinvoke r3.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String lookaheadString(int)>(i2);

        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" <= ");

        $r13 = specialinvoke r3.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String getValueString(int,boolean)>($i4, 1);

        $r14 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r16;
    }

    private java.lang.String getValueString(int, boolean)
    {
        groovyjarjarantlr.StringLiteralSymbol r6;
        groovyjarjarantlr.Grammar $r1, $r2;
        groovyjarjarantlr.CharFormatter $r13;
        java.lang.StringBuffer $r9, $r10, $r11, $r15, $r16, $r17, $r18;
        int i0;
        java.lang.String $r5, $r7, $r8, $r12, $r14, r19, r20;
        groovyjarjarantlr.TokenManager $r3;
        boolean $z0, $z1, z2;
        groovyjarjarantlr.TokenSymbol $r4;
        groovyjarjarantlr.PythonCodeGenerator r0;

        r0 := @this: groovyjarjarantlr.PythonCodeGenerator;

        i0 := @parameter0: int;

        z2 := @parameter1: boolean;

        $r1 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z0 = $r1 instanceof groovyjarjarantlr.LexerGrammar;

        if $z0 == 0 goto label2;

        $r13 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.CharFormatter charFormatter>;

        $r14 = interfaceinvoke $r13.<groovyjarjarantlr.CharFormatter: java.lang.String literalChar(int)>(i0);

        r19 = $r14;

        if z2 == 0 goto label1;

        $r15 = new java.lang.StringBuffer;

        specialinvoke $r15.<java.lang.StringBuffer: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("u\'");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

     label1:
        return r19;

     label2:
        $r2 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r3 = $r2.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager>;

        $r4 = interfaceinvoke $r3.<groovyjarjarantlr.TokenManager: groovyjarjarantlr.TokenSymbol getTokenSymbolAt(int)>(i0);

        if $r4 != null goto label3;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r12;

     label3:
        $r5 = virtualinvoke $r4.<groovyjarjarantlr.TokenSymbol: java.lang.String getId()>();

        $z1 = $r4 instanceof groovyjarjarantlr.StringLiteralSymbol;

        if $z1 != 0 goto label4;

        return $r5;

     label4:
        r6 = (groovyjarjarantlr.StringLiteralSymbol) $r4;

        $r7 = virtualinvoke r6.<groovyjarjarantlr.StringLiteralSymbol: java.lang.String getLabel()>();

        if $r7 == null goto label5;

        r20 = $r7;

        goto label6;

     label5:
        $r8 = specialinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String mangleLiteral(java.lang.String)>($r5);

        r20 = $r8;

        if $r8 != null goto label6;

        r20 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

     label6:
        return r20;
    }

    protected boolean lookaheadIsEmpty(groovyjarjarantlr.Alternative, int)
    {
        groovyjarjarantlr.Lookahead[] $r1;
        groovyjarjarantlr.collections.impl.BitSet r3;
        groovyjarjarantlr.PythonCodeGenerator r4;
        groovyjarjarantlr.Grammar $r5;
        groovyjarjarantlr.Alternative r0;
        groovyjarjarantlr.Lookahead $r2;
        int i0, $i1, i2, i3;

        r4 := @this: groovyjarjarantlr.PythonCodeGenerator;

        r0 := @parameter0: groovyjarjarantlr.Alternative;

        i0 := @parameter1: int;

        i2 = r0.<groovyjarjarantlr.Alternative: int lookaheadDepth>;

        if i2 != 2147483647 goto label1;

        $r5 = r4.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        i2 = $r5.<groovyjarjarantlr.Grammar: int maxk>;

     label1:
        i3 = 1;

     label2:
        if i3 > i2 goto label4;

        if i3 > i0 goto label4;

        $r1 = r0.<groovyjarjarantlr.Alternative: groovyjarjarantlr.Lookahead[] cache>;

        $r2 = $r1[i3];

        r3 = $r2.<groovyjarjarantlr.Lookahead: groovyjarjarantlr.collections.impl.BitSet fset>;

        $i1 = virtualinvoke r3.<groovyjarjarantlr.collections.impl.BitSet: int degree()>();

        if $i1 == 0 goto label3;

        return 0;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        return 1;
    }

    private java.lang.String lookaheadString(int)
    {
        groovyjarjarantlr.PythonCodeGenerator r0;
        groovyjarjarantlr.Grammar $r1;
        java.lang.StringBuffer $r2, $r3, $r4, $r5;
        int i0;
        java.lang.String $r6;
        boolean $z0;

        r0 := @this: groovyjarjarantlr.PythonCodeGenerator;

        i0 := @parameter0: int;

        $r1 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z0 = $r1 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z0 == 0 goto label1;

        return "_t.getType()";

     label1:
        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("self.LA(");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r6;
    }

    private java.lang.String mangleLiteral(java.lang.String)
    {
        groovyjarjarantlr.Tool $r1, $r3;
        java.lang.StringBuffer $r5, $r6, $r8;
        int $i0, $i1, i5, $i6;
        java.lang.String r2, r7;
        boolean $z0, $z1;
        char $c2, $c3, $c4;
        groovyjarjarantlr.PythonCodeGenerator r0;

        r0 := @this: groovyjarjarantlr.PythonCodeGenerator;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        r7 = $r1.<groovyjarjarantlr.Tool: java.lang.String literalsPrefix>;

        i5 = 1;

     label1:
        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

        $i1 = $i0 - 1;

        if i5 >= $i1 goto label3;

        $c2 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i5);

        $z1 = staticinvoke <java.lang.Character: boolean isLetter(char)>($c2);

        if $z1 != 0 goto label2;

        $c4 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i5);

        $i6 = (int) $c4;

        if $i6 == 95 goto label2;

        return null;

     label2:
        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r7);

        $c3 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i5);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c3);

        r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        i5 = i5 + 1;

        goto label1;

     label3:
        $r3 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $z0 = $r3.<groovyjarjarantlr.Tool: boolean upperCaseMangledLiterals>;

        if $z0 == 0 goto label4;

        r7 = virtualinvoke r7.<java.lang.String: java.lang.String toUpperCase()>();

     label4:
        return r7;
    }

    public java.lang.String mapTreeId(java.lang.String, groovyjarjarantlr.ActionTransInfo)
    {
        groovyjarjarantlr.collections.impl.Vector $r40, $r49;
        groovyjarjarantlr.RuleBlock $r1, $r6, $r16, $r26, $r35, $r39, $r48;
        groovyjarjarantlr.PythonCodeGenerator r0;
        groovyjarjarantlr.Tool $r22, $r31;
        java.lang.StringBuffer $r8, $r9, $r10, $r12, $r13, $r14, $r18, $r19, $r20, $r21, $r23, $r24, $r25, $r28, $r30, $r32, $r33, $r34, $r37, $r43, $r44, $r45;
        java.lang.String r2, $r7, $r15, $r17, $r27, $r29, $r36, $r38, $r42, r47, $r51, r52, $r53, $r54, r55;
        groovyjarjarantlr.ActionTransInfo r11;
        groovyjarjarantlr.Grammar $r3, $r46;
        boolean $z0, $z1, $z2, $z3, $z4, z5, z6, z7, z8, z9;
        groovyjarjarantlr.AlternativeElement r50;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, $i7;
        java.util.Hashtable $r4;
        java.lang.Object $r5, $r41;

        r0 := @this: groovyjarjarantlr.PythonCodeGenerator;

        r2 := @parameter0: java.lang.String;

        r11 := @parameter1: groovyjarjarantlr.ActionTransInfo;

        $r1 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.RuleBlock currentRule>;

        if $r1 != null goto label01;

        return r2;

     label01:
        z5 = 0;

        z9 = 0;

        z8 = 0;

        z7 = 0;

        z6 = 0;

        r47 = r2;

        $r3 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z0 = $r3 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z0 == 0 goto label03;

        $r46 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z4 = $r46.<groovyjarjarantlr.Grammar: boolean buildAST>;

        if $z4 != 0 goto label02;

        z5 = 1;

        z9 = 1;

        z8 = 1;

        z7 = 1;

        z6 = 1;

        goto label03;

     label02:
        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i0 <= 3 goto label03;

        $i1 = virtualinvoke r2.<java.lang.String: int lastIndexOf(java.lang.String)>("_in");

        $i2 = virtualinvoke r2.<java.lang.String: int length()>();

        $i3 = $i2 - 3;

        if $i1 != $i3 goto label03;

        $i4 = virtualinvoke r2.<java.lang.String: int length()>();

        $i5 = $i4 - 3;

        r47 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, $i5);

        z5 = 1;

        z9 = 1;

        z8 = 1;

        z7 = 1;

        z6 = 1;

     label03:
        i6 = 0;

     label04:
        $r48 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.RuleBlock currentRule>;

        $r49 = $r48.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.collections.impl.Vector labeledElements>;

        $i7 = virtualinvoke $r49.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if i6 >= $i7 goto label08;

        $r39 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.RuleBlock currentRule>;

        $r40 = $r39.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.collections.impl.Vector labeledElements>;

        $r41 = virtualinvoke $r40.<groovyjarjarantlr.collections.impl.Vector: java.lang.Object elementAt(int)>(i6);

        r50 = (groovyjarjarantlr.AlternativeElement) $r41;

        $r42 = virtualinvoke r50.<groovyjarjarantlr.AlternativeElement: java.lang.String getLabel()>();

        $z3 = virtualinvoke $r42.<java.lang.String: boolean equals(java.lang.Object)>(r47);

        if $z3 == 0 goto label07;

        if z6 == 0 goto label05;

        $r51 = r47;

        goto label06;

     label05:
        $r43 = new java.lang.StringBuffer;

        specialinvoke $r43.<java.lang.StringBuffer: void <init>()>();

        $r44 = virtualinvoke $r43.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r47);

        $r45 = virtualinvoke $r44.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_AST");

        $r51 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.String toString()>();

     label06:
        return $r51;

     label07:
        i6 = i6 + 1;

        goto label04;

     label08:
        $r4 = r0.<groovyjarjarantlr.PythonCodeGenerator: java.util.Hashtable treeVariableMap>;

        $r5 = virtualinvoke $r4.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r47);

        r52 = (java.lang.String) $r5;

        if r52 == null goto label13;

        $r15 = <groovyjarjarantlr.PythonCodeGenerator: java.lang.String NONUNIQUE>;

        if r52 != $r15 goto label09;

        $r31 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r30 = new java.lang.StringBuffer;

        specialinvoke $r30.<java.lang.StringBuffer: void <init>()>();

        $r32 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Ambiguous reference to AST element ");

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r47);

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" in rule ");

        $r35 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.RuleBlock currentRule>;

        $r36 = virtualinvoke $r35.<groovyjarjarantlr.RuleBlock: java.lang.String getRuleName()>();

        $r37 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r36);

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r31.<groovyjarjarantlr.Tool: void error(java.lang.String)>($r38);

        return null;

     label09:
        $r16 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.RuleBlock currentRule>;

        $r17 = virtualinvoke $r16.<groovyjarjarantlr.RuleBlock: java.lang.String getRuleName()>();

        $z2 = virtualinvoke r52.<java.lang.String: boolean equals(java.lang.Object)>($r17);

        if $z2 == 0 goto label10;

        $r22 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r21 = new java.lang.StringBuffer;

        specialinvoke $r21.<java.lang.StringBuffer: void <init>()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Ambiguous reference to AST element ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r47);

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" in rule ");

        $r26 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.RuleBlock currentRule>;

        $r27 = virtualinvoke $r26.<groovyjarjarantlr.RuleBlock: java.lang.String getRuleName()>();

        $r28 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r22.<groovyjarjarantlr.Tool: void error(java.lang.String)>($r29);

        return null;

     label10:
        if z9 == 0 goto label11;

        $r18 = new java.lang.StringBuffer;

        specialinvoke $r18.<java.lang.StringBuffer: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r52);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_in");

        $r53 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label12;

     label11:
        $r53 = r52;

     label12:
        return $r53;

     label13:
        $r6 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.RuleBlock currentRule>;

        $r7 = virtualinvoke $r6.<groovyjarjarantlr.RuleBlock: java.lang.String getRuleName()>();

        $z1 = virtualinvoke r47.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z1 == 0 goto label17;

        if z8 == 0 goto label14;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r47);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_AST_in");

        $r54 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label15;

     label14:
        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r47);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_AST");

        $r54 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

     label15:
        r55 = $r54;

        if r11 == null goto label16;

        if z7 != 0 goto label16;

        r11.<groovyjarjarantlr.ActionTransInfo: java.lang.String refRuleRoot> = $r54;

     label16:
        return r55;

     label17:
        return r47;
    }

    private void mapTreeVariable(groovyjarjarantlr.AlternativeElement, java.lang.String)
    {
        groovyjarjarantlr.RuleRefElement $r10;
        java.lang.String $r1, r5, $r8, r14;
        groovyjarjarantlr.TreeElement $r12;
        java.util.Hashtable $r3, $r6, $r7, $r9;
        boolean $z0, $z1, $z2;
        groovyjarjarantlr.TokenRefElement $r11;
        groovyjarjarantlr.PythonCodeGenerator r2;
        groovyjarjarantlr.GrammarAtom $r13;
        java.lang.Object $r4;
        groovyjarjarantlr.AlternativeElement r0;

        r2 := @this: groovyjarjarantlr.PythonCodeGenerator;

        r0 := @parameter0: groovyjarjarantlr.AlternativeElement;

        r5 := @parameter1: java.lang.String;

        $z0 = r0 instanceof groovyjarjarantlr.TreeElement;

        if $z0 == 0 goto label1;

        $r12 = (groovyjarjarantlr.TreeElement) r0;

        $r13 = $r12.<groovyjarjarantlr.TreeElement: groovyjarjarantlr.GrammarAtom root>;

        specialinvoke r2.<groovyjarjarantlr.PythonCodeGenerator: void mapTreeVariable(groovyjarjarantlr.AlternativeElement,java.lang.String)>($r13, r5);

        return;

     label1:
        r14 = null;

        $r1 = virtualinvoke r0.<groovyjarjarantlr.AlternativeElement: java.lang.String getLabel()>();

        if $r1 != null goto label3;

        $z1 = r0 instanceof groovyjarjarantlr.TokenRefElement;

        if $z1 == 0 goto label2;

        $r11 = (groovyjarjarantlr.TokenRefElement) r0;

        r14 = $r11.<groovyjarjarantlr.TokenRefElement: java.lang.String atomText>;

        goto label3;

     label2:
        $z2 = r0 instanceof groovyjarjarantlr.RuleRefElement;

        if $z2 == 0 goto label3;

        $r10 = (groovyjarjarantlr.RuleRefElement) r0;

        r14 = $r10.<groovyjarjarantlr.RuleRefElement: java.lang.String targetRule>;

     label3:
        if r14 == null goto label5;

        $r3 = r2.<groovyjarjarantlr.PythonCodeGenerator: java.util.Hashtable treeVariableMap>;

        $r4 = virtualinvoke $r3.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r14);

        if $r4 == null goto label4;

        $r7 = r2.<groovyjarjarantlr.PythonCodeGenerator: java.util.Hashtable treeVariableMap>;

        virtualinvoke $r7.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>(r14);

        $r9 = r2.<groovyjarjarantlr.PythonCodeGenerator: java.util.Hashtable treeVariableMap>;

        $r8 = <groovyjarjarantlr.PythonCodeGenerator: java.lang.String NONUNIQUE>;

        virtualinvoke $r9.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r14, $r8);

        goto label5;

     label4:
        $r6 = r2.<groovyjarjarantlr.PythonCodeGenerator: java.util.Hashtable treeVariableMap>;

        virtualinvoke $r6.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r14, r5);

     label5:
        return;
    }

    protected java.lang.String processActionForSpecialSymbols(java.lang.String, int, groovyjarjarantlr.RuleBlock, groovyjarjarantlr.ActionTransInfo)
    {
        groovyjarjarantlr.Grammar $r1, $r5;
        groovyjarjarantlr.Tool $r7, $r11, $r17;
        java.lang.StringBuffer $r10, $r12, $r13, $r16, $r18, $r19;
        int $i0, i1;
        groovyjarjarantlr.ActionTransInfo r4;
        java.lang.String $r6, $r14, $r20, r22;
        groovyjarjarantlr.Token $r8;
        boolean $z0;
        groovyjarjarantlr.RuleBlock r3;
        groovyjarjarantlr.PythonCodeGenerator r0;
        groovyjarjarantlr.CharStreamException $r9;
        groovyjarjarantlr.actions.python.ActionLexer $r2;
        groovyjarjarantlr.TokenStreamException $r15;
        groovyjarjarantlr.RecognitionException $r21;

        r0 := @this: groovyjarjarantlr.PythonCodeGenerator;

        r22 := @parameter0: java.lang.String;

        i1 := @parameter1: int;

        r3 := @parameter2: groovyjarjarantlr.RuleBlock;

        r4 := @parameter3: groovyjarjarantlr.ActionTransInfo;

        if r22 == null goto label01;

        $i0 = virtualinvoke r22.<java.lang.String: int length()>();

        if $i0 != 0 goto label02;

     label01:
        return null;

     label02:
        $z0 = staticinvoke <groovyjarjarantlr.PythonCodeGenerator: boolean isEmpty(java.lang.String)>(r22);

        if $z0 == 0 goto label03;

        return "";

     label03:
        $r1 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        if $r1 != null goto label04;

        return r22;

     label04:
        $r2 = new groovyjarjarantlr.actions.python.ActionLexer;

        specialinvoke $r2.<groovyjarjarantlr.actions.python.ActionLexer: void <init>(java.lang.String,groovyjarjarantlr.RuleBlock,groovyjarjarantlr.CodeGenerator,groovyjarjarantlr.ActionTransInfo)>(r22, r3, r0, r4);

        virtualinvoke $r2.<groovyjarjarantlr.actions.python.ActionLexer: void setLineOffset(int)>(i1);

        $r5 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r6 = virtualinvoke $r5.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        virtualinvoke $r2.<groovyjarjarantlr.actions.python.ActionLexer: void setFilename(java.lang.String)>($r6);

        $r7 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        virtualinvoke $r2.<groovyjarjarantlr.actions.python.ActionLexer: void setTool(groovyjarjarantlr.Tool)>($r7);

     label05:
        virtualinvoke $r2.<groovyjarjarantlr.actions.python.ActionLexer: void mACTION(boolean)>(1);

        $r8 = virtualinvoke $r2.<groovyjarjarantlr.actions.python.ActionLexer: groovyjarjarantlr.Token getTokenObject()>();

        r22 = virtualinvoke $r8.<groovyjarjarantlr.Token: java.lang.String getText()>();

     label06:
        goto label10;

     label07:
        $r21 := @caughtexception;

        virtualinvoke $r2.<groovyjarjarantlr.actions.python.ActionLexer: void reportError(groovyjarjarantlr.RecognitionException)>($r21);

        goto label10;

     label08:
        $r15 := @caughtexception;

        $r17 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Error reading action:");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r22);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r17.<groovyjarjarantlr.Tool: void panic(java.lang.String)>($r20);

        goto label10;

     label09:
        $r9 := @caughtexception;

        $r11 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Error reading action:");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r22);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r11.<groovyjarjarantlr.Tool: void panic(java.lang.String)>($r14);

     label10:
        return r22;

        catch groovyjarjarantlr.RecognitionException from label05 to label06 with label07;
        catch groovyjarjarantlr.TokenStreamException from label05 to label06 with label08;
        catch groovyjarjarantlr.CharStreamException from label05 to label06 with label09;
    }

    static boolean isEmpty(java.lang.String)
    {
        char $c1;
        int $i0, i2, $i3;
        java.lang.String r0;
        boolean z0, z1, z2;

        r0 := @parameter0: java.lang.String;

        z0 = 1;

        z2 = 1;

        z1 = 1;

        i2 = 0;

     label1:
        if z1 == 0 goto label5;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if i2 >= $i0 goto label5;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);

        $i3 = (int) $c1;

        lookupswitch($i3)
        {
            case 9: goto label2;
            case 10: goto label2;
            case 12: goto label2;
            case 13: goto label2;
            case 32: goto label2;
            default: goto label3;
        };

     label2:
        goto label4;

     label3:
        z0 = 0;

        z2 = 0;

        z1 = 0;

     label4:
        i2 = i2 + 1;

        goto label1;

     label5:
        return z2;
    }

    protected java.lang.String processActionCode(java.lang.String, int)
    {
        groovyjarjarantlr.Grammar $r2;
        groovyjarjarantlr.Tool $r4, $r8, $r14;
        java.lang.StringBuffer $r7, $r9, $r10, $r13, $r15, $r16;
        int i0;
        java.lang.String $r3, $r11, $r17, r19;
        groovyjarjarantlr.Token $r5;
        boolean $z0;
        groovyjarjarantlr.actions.python.CodeLexer $r0;
        groovyjarjarantlr.PythonCodeGenerator r1;
        groovyjarjarantlr.CharStreamException $r6;
        groovyjarjarantlr.TokenStreamException $r12;
        groovyjarjarantlr.RecognitionException $r18;

        r1 := @this: groovyjarjarantlr.PythonCodeGenerator;

        r19 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        if r19 == null goto label1;

        $z0 = staticinvoke <groovyjarjarantlr.PythonCodeGenerator: boolean isEmpty(java.lang.String)>(r19);

        if $z0 == 0 goto label2;

     label1:
        return "";

     label2:
        $r0 = new groovyjarjarantlr.actions.python.CodeLexer;

        $r2 = r1.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r3 = virtualinvoke $r2.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $r4 = r1.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        specialinvoke $r0.<groovyjarjarantlr.actions.python.CodeLexer: void <init>(java.lang.String,java.lang.String,int,groovyjarjarantlr.Tool)>(r19, $r3, i0, $r4);

     label3:
        virtualinvoke $r0.<groovyjarjarantlr.actions.python.CodeLexer: void mACTION(boolean)>(1);

        $r5 = virtualinvoke $r0.<groovyjarjarantlr.actions.python.CodeLexer: groovyjarjarantlr.Token getTokenObject()>();

        r19 = virtualinvoke $r5.<groovyjarjarantlr.Token: java.lang.String getText()>();

     label4:
        goto label8;

     label5:
        $r18 := @caughtexception;

        virtualinvoke $r0.<groovyjarjarantlr.actions.python.CodeLexer: void reportError(groovyjarjarantlr.RecognitionException)>($r18);

        goto label8;

     label6:
        $r12 := @caughtexception;

        $r14 = r1.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Error reading action:");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r19);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r14.<groovyjarjarantlr.Tool: void panic(java.lang.String)>($r17);

        goto label8;

     label7:
        $r6 := @caughtexception;

        $r8 = r1.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Error reading action:");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r19);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r8.<groovyjarjarantlr.Tool: void panic(java.lang.String)>($r11);

     label8:
        return r19;

        catch groovyjarjarantlr.RecognitionException from label3 to label4 with label5;
        catch groovyjarjarantlr.TokenStreamException from label3 to label4 with label6;
        catch groovyjarjarantlr.CharStreamException from label3 to label4 with label7;
    }

    protected void printActionCode(java.lang.String, int)
    {
        int i0;
        java.lang.String $r1, r2;
        groovyjarjarantlr.PythonCodeGenerator r0;

        r0 := @this: groovyjarjarantlr.PythonCodeGenerator;

        r2 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r1 = virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String processActionCode(java.lang.String,int)>(r2, i0);

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void printAction(java.lang.String)>($r1);

        return;
    }

    private void setupGrammarParameters(groovyjarjarantlr.Grammar)
    {
        groovyjarjarantlr.Grammar r0;
        groovyjarjarantlr.Tool $r2;
        java.lang.String $r4, $r5, $r8, $r9, $r11, $r12, $r14, $r15, $r17, $r18;
        groovyjarjarantlr.Token $r3, $r6, $r7, $r10, $r13, $r16;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        groovyjarjarantlr.PythonCodeGenerator r1;

        r1 := @this: groovyjarjarantlr.PythonCodeGenerator;

        r0 := @parameter0: groovyjarjarantlr.Grammar;

        $z0 = r0 instanceof groovyjarjarantlr.ParserGrammar;

        if $z0 == 0 goto label3;

        r1.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String labeledElementASTType> = "";

        $z6 = virtualinvoke r0.<groovyjarjarantlr.Grammar: boolean hasOption(java.lang.String)>("ASTLabelType");

        if $z6 == 0 goto label1;

        $r16 = virtualinvoke r0.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Token getOption(java.lang.String)>("ASTLabelType");

        if $r16 == null goto label1;

        $r17 = virtualinvoke $r16.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r18 = staticinvoke <groovyjarjarantlr.StringUtils: java.lang.String stripFrontBack(java.lang.String,java.lang.String,java.lang.String)>($r17, "\"", "\"");

        if $r18 == null goto label1;

        r1.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String labeledElementASTType> = $r18;

     label1:
        r1.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String labeledElementType> = "";

        r1.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String labeledElementInit> = "None";

        r1.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String commonExtraArgs> = "";

        r1.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String commonExtraParams> = "self";

        r1.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String commonLocalVars> = "";

        r1.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String lt1Value> = "self.LT(1)";

        r1.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String exceptionThrown> = "groovyjarjarantlr.RecognitionException";

        r1.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String throwNoViable> = "raise antlr.NoViableAltException(self.LT(1), self.getFilename())";

        r1.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String parserClassName> = "Parser";

        $z7 = virtualinvoke r0.<groovyjarjarantlr.Grammar: boolean hasOption(java.lang.String)>("className");

        if $z7 == 0 goto label2;

        $r13 = virtualinvoke r0.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Token getOption(java.lang.String)>("className");

        if $r13 == null goto label2;

        $r14 = virtualinvoke $r13.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r15 = staticinvoke <groovyjarjarantlr.StringUtils: java.lang.String stripFrontBack(java.lang.String,java.lang.String,java.lang.String)>($r14, "\"", "\"");

        if $r15 == null goto label2;

        r1.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String parserClassName> = $r15;

     label2:
        return;

     label3:
        $z1 = r0 instanceof groovyjarjarantlr.LexerGrammar;

        if $z1 == 0 goto label5;

        r1.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String labeledElementType> = "char ";

        r1.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String labeledElementInit> = "\'\\0\'";

        r1.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String commonExtraArgs> = "";

        r1.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String commonExtraParams> = "self, _createToken";

        r1.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String commonLocalVars> = "_ttype = 0\n        _token = None\n        _begin = self.text.length()";

        r1.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String lt1Value> = "self.LA(1)";

        r1.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String exceptionThrown> = "groovyjarjarantlr.RecognitionException";

        r1.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String throwNoViable> = "self.raise_NoViableAlt(self.LA(1))";

        r1.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String lexerClassName> = "Lexer";

        $z5 = virtualinvoke r0.<groovyjarjarantlr.Grammar: boolean hasOption(java.lang.String)>("className");

        if $z5 == 0 goto label4;

        $r10 = virtualinvoke r0.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Token getOption(java.lang.String)>("className");

        if $r10 == null goto label4;

        $r11 = virtualinvoke $r10.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r12 = staticinvoke <groovyjarjarantlr.StringUtils: java.lang.String stripFrontBack(java.lang.String,java.lang.String,java.lang.String)>($r11, "\"", "\"");

        if $r12 == null goto label4;

        r1.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String lexerClassName> = $r12;

     label4:
        return;

     label5:
        $z2 = r0 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z2 == 0 goto label9;

        r1.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String labeledElementASTType> = "";

        r1.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String labeledElementType> = "";

        $z3 = virtualinvoke r0.<groovyjarjarantlr.Grammar: boolean hasOption(java.lang.String)>("ASTLabelType");

        if $z3 == 0 goto label6;

        $r7 = virtualinvoke r0.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Token getOption(java.lang.String)>("ASTLabelType");

        if $r7 == null goto label6;

        $r8 = virtualinvoke $r7.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r9 = staticinvoke <groovyjarjarantlr.StringUtils: java.lang.String stripFrontBack(java.lang.String,java.lang.String,java.lang.String)>($r8, "\"", "\"");

        if $r9 == null goto label6;

        r1.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String labeledElementASTType> = $r9;

        r1.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String labeledElementType> = $r9;

     label6:
        $z8 = virtualinvoke r0.<groovyjarjarantlr.Grammar: boolean hasOption(java.lang.String)>("ASTLabelType");

        if $z8 != 0 goto label7;

        $r6 = new groovyjarjarantlr.Token;

        specialinvoke $r6.<groovyjarjarantlr.Token: void <init>(int,java.lang.String)>(6, "<4>AST");

        virtualinvoke r0.<groovyjarjarantlr.Grammar: boolean setOption(java.lang.String,groovyjarjarantlr.Token)>("ASTLabelType", $r6);

     label7:
        r1.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String labeledElementInit> = "None";

        r1.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String commonExtraArgs> = "_t";

        r1.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String commonExtraParams> = "self, _t";

        r1.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String commonLocalVars> = "";

        r1.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String lt1Value> = "_t";

        r1.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String exceptionThrown> = "groovyjarjarantlr.RecognitionException";

        r1.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String throwNoViable> = "raise antlr.NoViableAltException(_t)";

        r1.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String treeWalkerClassName> = "Walker";

        $z4 = virtualinvoke r0.<groovyjarjarantlr.Grammar: boolean hasOption(java.lang.String)>("className");

        if $z4 == 0 goto label8;

        $r3 = virtualinvoke r0.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Token getOption(java.lang.String)>("className");

        if $r3 == null goto label8;

        $r4 = virtualinvoke $r3.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r5 = staticinvoke <groovyjarjarantlr.StringUtils: java.lang.String stripFrontBack(java.lang.String,java.lang.String,java.lang.String)>($r4, "\"", "\"");

        if $r5 == null goto label8;

        r1.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String treeWalkerClassName> = $r5;

     label8:
        return;

     label9:
        $r2 = r1.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        virtualinvoke $r2.<groovyjarjarantlr.Tool: void panic(java.lang.String)>("Unknown grammar type");

        return;
    }

    public void setupOutput(java.lang.String) throws java.io.IOException
    {
        java.io.PrintWriter $r7;
        groovyjarjarantlr.PythonCodeGenerator r0;
        groovyjarjarantlr.Tool $r2;
        java.lang.StringBuffer $r1, $r4, $r5;
        java.lang.String r3, $r6;

        r0 := @this: groovyjarjarantlr.PythonCodeGenerator;

        r3 := @parameter0: java.lang.String;

        $r2 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".py");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        $r7 = virtualinvoke $r2.<groovyjarjarantlr.Tool: java.io.PrintWriter openOutputFile(java.lang.String)>($r6);

        r0.<groovyjarjarantlr.PythonCodeGenerator: java.io.PrintWriter currentOutput> = $r7;

        return;
    }

    protected boolean isspace(char)
    {
        int $i1;
        char c0;
        groovyjarjarantlr.PythonCodeGenerator r0;
        boolean z0;

        r0 := @this: groovyjarjarantlr.PythonCodeGenerator;

        c0 := @parameter0: char;

        z0 = 1;

        $i1 = (int) c0;

        lookupswitch($i1)
        {
            case 9: goto label1;
            case 10: goto label1;
            case 13: goto label1;
            case 32: goto label1;
            default: goto label2;
        };

     label1:
        goto label3;

     label2:
        z0 = 0;

     label3:
        return z0;
    }

    protected void _printAction(java.lang.String)
    {
        boolean $z0, $z1, z2, z3, z4, z5, z6, z7;
        java.io.PrintWriter $r2, $r3, $r4, $r5, $r7, $r8;
        groovyjarjarantlr.PythonCodeGenerator r1;
        int $i0, $i3, $i4, $i6, $i7, $i10, $i11, i14, i15, i16, i17, i18, $i19, $i20, $i22, $i24, $i25, $i26, $i28, $i29, $i30;
        java.lang.String r0;
        java.io.PrintStream $r6;
        char $c1, $c2, $c5, $c8, $c9, $c12, $c13;

        r1 := @this: groovyjarjarantlr.PythonCodeGenerator;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label01;

        return;

     label01:
        i14 = 0;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i15 = 0;

        z2 = 1;

        z7 = 1;

        z6 = 1;

     label02:
        if i14 >= $i0 goto label08;

        if z6 == 0 goto label08;

        $i11 = i14;

        i14 = i14 + 1;

        $c12 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i11);

        $i19 = (int) $c12;

        lookupswitch($i19)
        {
            case 9: goto label07;
            case 10: goto label03;
            case 13: goto label04;
            case 32: goto label06;
            default: goto label07;
        };

     label03:
        i15 = i14;

        goto label02;

     label04:
        if i14 > $i0 goto label05;

        $c13 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i14);

        $i20 = (int) $c13;

        if $i20 != 10 goto label05;

        i14 = i14 + 1;

     label05:
        i15 = i14;

        goto label02;

     label06:
        goto label02;

     label07:
        z2 = 0;

        z7 = 0;

        z6 = 0;

        goto label02;

     label08:
        if z7 != 0 goto label09;

        $i22 = (int) -1;

        i14 = i14 + $i22;

     label09:
        $i10 = i14 - i15;

        i16 = $i0 - 1;

     label10:
        if i16 <= i14 goto label11;

        $c9 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i16);

        $z1 = virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: boolean isspace(char)>($c9);

        if $z1 == 0 goto label11;

        $i24 = (int) -1;

        i16 = i16 + $i24;

        goto label10;

     label11:
        z3 = 0;

        z4 = 0;

        i17 = i14;

     label12:
        if i17 > i16 goto label28;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i17);

        $i25 = (int) $c1;

        lookupswitch($i25)
        {
            case 9: goto label15;
            case 10: goto label13;
            case 13: goto label14;
            case 32: goto label16;
            default: goto label17;
        };

     label13:
        z3 = 1;

        z4 = 1;

        goto label18;

     label14:
        z3 = 1;

        z4 = 1;

        $i6 = i17 + 1;

        if $i6 > i16 goto label18;

        $i7 = i17 + 1;

        $c8 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i7);

        $i26 = (int) $c8;

        if $i26 != 10 goto label18;

        i17 = i17 + 1;

        goto label18;

     label15:
        $r6 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>("warning: tab characters used in Python action");

        $r7 = r1.<groovyjarjarantlr.PythonCodeGenerator: java.io.PrintWriter currentOutput>;

        virtualinvoke $r7.<java.io.PrintWriter: void print(java.lang.String)>("        ");

        goto label18;

     label16:
        $r3 = r1.<groovyjarjarantlr.PythonCodeGenerator: java.io.PrintWriter currentOutput>;

        virtualinvoke $r3.<java.io.PrintWriter: void print(java.lang.String)>(" ");

        goto label18;

     label17:
        $r8 = r1.<groovyjarjarantlr.PythonCodeGenerator: java.io.PrintWriter currentOutput>;

        virtualinvoke $r8.<java.io.PrintWriter: void print(char)>($c1);

     label18:
        if z4 == 0 goto label27;

        $r4 = r1.<groovyjarjarantlr.PythonCodeGenerator: java.io.PrintWriter currentOutput>;

        virtualinvoke $r4.<java.io.PrintWriter: void print(java.lang.String)>("\n");

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void printTabs()>();

        i18 = 0;

        z3 = 0;

        z5 = 0;

        z4 = 0;

        i17 = i17 + 1;

     label19:
        if i17 > i16 goto label27;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i17);

        $z0 = virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: boolean isspace(char)>($c2);

        if $z0 != 0 goto label20;

        $i28 = (int) -1;

        i17 = i17 + $i28;

        goto label27;

     label20:
        $i29 = (int) $c2;

        lookupswitch($i29)
        {
            case 10: goto label21;
            case 13: goto label22;
            default: goto label24;
        };

     label21:
        z3 = 1;

        z5 = 1;

        z4 = 1;

        goto label24;

     label22:
        $i3 = i17 + 1;

        if $i3 > i16 goto label23;

        $i4 = i17 + 1;

        $c5 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i4);

        $i30 = (int) $c5;

        if $i30 != 10 goto label23;

        i17 = i17 + 1;

     label23:
        z3 = 1;

        z5 = 1;

        z4 = 1;

     label24:
        if z5 == 0 goto label25;

        $r5 = r1.<groovyjarjarantlr.PythonCodeGenerator: java.io.PrintWriter currentOutput>;

        virtualinvoke $r5.<java.io.PrintWriter: void print(java.lang.String)>("\n");

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void printTabs()>();

        i18 = 0;

        z3 = 0;

        z5 = 0;

        z4 = 0;

        goto label26;

     label25:
        if i18 >= $i10 goto label27;

        i18 = i18 + 1;

     label26:
        i17 = i17 + 1;

        goto label19;

     label27:
        i17 = i17 + 1;

        goto label12;

     label28:
        $r2 = r1.<groovyjarjarantlr.PythonCodeGenerator: java.io.PrintWriter currentOutput>;

        virtualinvoke $r2.<java.io.PrintWriter: void println()>();

        return;
    }

    protected void od(java.lang.String, int, int, java.lang.String)
    {
        java.lang.StringBuffer $r9, $r10, $r11, $r14;
        int i0, i1, i3, $i4;
        java.lang.String r0, r3, $r12;
        java.io.PrintStream $r1, $r2, $r4, $r5, $r6, $r8;
        char $c2;
        groovyjarjarantlr.PythonCodeGenerator r13;

        r13 := @this: groovyjarjarantlr.PythonCodeGenerator;

        r3 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r0 := @parameter3: java.lang.String;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>(r0);

        i3 = i0;

     label1:
        if i3 > i1 goto label7;

        $c2 = virtualinvoke r3.<java.lang.String: char charAt(int)>(i3);

        $i4 = (int) $c2;

        lookupswitch($i4)
        {
            case 9: goto label3;
            case 10: goto label2;
            case 32: goto label4;
            default: goto label5;
        };

     label2:
        $r5 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r5.<java.io.PrintStream: void print(java.lang.String)>(" nl ");

        goto label6;

     label3:
        $r6 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r6.<java.io.PrintStream: void print(java.lang.String)>(" ht ");

        goto label6;

     label4:
        $r4 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r4.<java.io.PrintStream: void print(java.lang.String)>(" sp ");

        goto label6;

     label5:
        $r8 = <java.lang.System: java.io.PrintStream out>;

        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r8.<java.io.PrintStream: void print(java.lang.String)>($r12);

     label6:
        i3 = i3 + 1;

        goto label1;

     label7:
        $r2 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>("");

        return;
    }

    protected void printAction(java.lang.String)
    {
        java.lang.String r0;
        groovyjarjarantlr.PythonCodeGenerator r1;

        r1 := @this: groovyjarjarantlr.PythonCodeGenerator;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void printTabs()>();

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void _printAction(java.lang.String)>(r0);

     label1:
        return;
    }

    protected void printGrammarAction(groovyjarjarantlr.Grammar)
    {
        groovyjarjarantlr.RuleBlock $r5;
        groovyjarjarantlr.PythonCodeGenerator r0;
        groovyjarjarantlr.Grammar r1;
        int $i0;
        java.lang.String $r3, $r6;
        groovyjarjarantlr.Token $r2, $r4;

        r0 := @this: groovyjarjarantlr.PythonCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.Grammar;

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("### user action >>>");

        $r2 = r1.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Token classMemberAction>;

        $r3 = virtualinvoke $r2.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r4 = r1.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Token classMemberAction>;

        $i0 = virtualinvoke $r4.<groovyjarjarantlr.Token: int getLine()>();

        $r5 = r0.<groovyjarjarantlr.PythonCodeGenerator: groovyjarjarantlr.RuleBlock currentRule>;

        $r6 = virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: java.lang.String processActionForSpecialSymbols(java.lang.String,int,groovyjarjarantlr.RuleBlock,groovyjarjarantlr.ActionTransInfo)>($r3, $i0, $r5, null);

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void printAction(java.lang.String)>($r6);

        virtualinvoke r0.<groovyjarjarantlr.PythonCodeGenerator: void println(java.lang.String)>("### user action <<<");

        return;
    }

    protected void _printJavadoc(java.lang.String)
    {
        int $i0, $i2, $i3, i5, $i6, $i7;
        java.lang.String r0;
        boolean z0;
        java.io.PrintWriter $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        char $c1, $c4;
        groovyjarjarantlr.PythonCodeGenerator r1;

        r1 := @this: groovyjarjarantlr.PythonCodeGenerator;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        z0 = 0;

        $r2 = r1.<groovyjarjarantlr.PythonCodeGenerator: java.io.PrintWriter currentOutput>;

        virtualinvoke $r2.<java.io.PrintWriter: void print(java.lang.String)>("\n");

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void printTabs()>();

        $r3 = r1.<groovyjarjarantlr.PythonCodeGenerator: java.io.PrintWriter currentOutput>;

        virtualinvoke $r3.<java.io.PrintWriter: void print(java.lang.String)>("###");

        i5 = 0;

     label1:
        if i5 >= $i0 goto label9;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i5);

        $i6 = (int) $c1;

        lookupswitch($i6)
        {
            case 9: goto label4;
            case 10: goto label2;
            case 13: goto label3;
            case 32: goto label5;
            default: goto label6;
        };

     label2:
        z0 = 1;

        goto label7;

     label3:
        z0 = 1;

        $i2 = i5 + 1;

        if $i2 > $i0 goto label7;

        $i3 = i5 + 1;

        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i3);

        $i7 = (int) $c4;

        if $i7 != 10 goto label7;

        i5 = i5 + 1;

        goto label7;

     label4:
        $r8 = r1.<groovyjarjarantlr.PythonCodeGenerator: java.io.PrintWriter currentOutput>;

        virtualinvoke $r8.<java.io.PrintWriter: void print(java.lang.String)>("\t");

        goto label7;

     label5:
        $r5 = r1.<groovyjarjarantlr.PythonCodeGenerator: java.io.PrintWriter currentOutput>;

        virtualinvoke $r5.<java.io.PrintWriter: void print(java.lang.String)>(" ");

        goto label7;

     label6:
        $r9 = r1.<groovyjarjarantlr.PythonCodeGenerator: java.io.PrintWriter currentOutput>;

        virtualinvoke $r9.<java.io.PrintWriter: void print(char)>($c1);

     label7:
        if z0 == 0 goto label8;

        $r6 = r1.<groovyjarjarantlr.PythonCodeGenerator: java.io.PrintWriter currentOutput>;

        virtualinvoke $r6.<java.io.PrintWriter: void print(java.lang.String)>("\n");

        virtualinvoke r1.<groovyjarjarantlr.PythonCodeGenerator: void printTabs()>();

        $r7 = r1.<groovyjarjarantlr.PythonCodeGenerator: java.io.PrintWriter currentOutput>;

        virtualinvoke $r7.<java.io.PrintWriter: void print(java.lang.String)>("###");

        z0 = 0;

     label8:
        i5 = i5 + 1;

        goto label1;

     label9:
        $r4 = r1.<groovyjarjarantlr.PythonCodeGenerator: java.io.PrintWriter currentOutput>;

        virtualinvoke $r4.<java.io.PrintWriter: void println()>();

        return;
    }

    protected void genJavadocComment(groovyjarjarantlr.Grammar)
    {
        java.lang.String $r1, $r3;
        groovyjarjarantlr.Grammar r0;
        groovyjarjarantlr.PythonCodeGenerator r2;

        r2 := @this: groovyjarjarantlr.PythonCodeGenerator;

        r0 := @parameter0: groovyjarjarantlr.Grammar;

        $r1 = r0.<groovyjarjarantlr.Grammar: java.lang.String comment>;

        if $r1 == null goto label1;

        $r3 = r0.<groovyjarjarantlr.Grammar: java.lang.String comment>;

        virtualinvoke r2.<groovyjarjarantlr.PythonCodeGenerator: void _printJavadoc(java.lang.String)>($r3);

     label1:
        return;
    }

    protected void genJavadocComment(groovyjarjarantlr.RuleSymbol)
    {
        java.lang.String $r1, $r3;
        groovyjarjarantlr.RuleSymbol r0;
        groovyjarjarantlr.PythonCodeGenerator r2;

        r2 := @this: groovyjarjarantlr.PythonCodeGenerator;

        r0 := @parameter0: groovyjarjarantlr.RuleSymbol;

        $r1 = r0.<groovyjarjarantlr.RuleSymbol: java.lang.String comment>;

        if $r1 == null goto label1;

        $r3 = r0.<groovyjarjarantlr.RuleSymbol: java.lang.String comment>;

        virtualinvoke r2.<groovyjarjarantlr.PythonCodeGenerator: void _printJavadoc(java.lang.String)>($r3);

     label1:
        return;
    }

    static void <clinit>()
    {
        java.lang.String $r0;

        <groovyjarjarantlr.PythonCodeGenerator: int caseSizeThreshold> = 127;

        <groovyjarjarantlr.PythonCodeGenerator: java.lang.String mainHeaderAction> = "__main__";

        <groovyjarjarantlr.PythonCodeGenerator: java.lang.String initHeaderAction> = "__init__";

        $r0 = new java.lang.String;

        specialinvoke $r0.<java.lang.String: void <init>()>();

        <groovyjarjarantlr.PythonCodeGenerator: java.lang.String NONUNIQUE> = $r0;

        return;
    }
}
