public class com.jidesoft.icons.TintFilter extends java.awt.image.RGBImageFilter
{
    private int _alpha;
    private int _red;
    private int _green;
    private int _blue;
    private int _width;
    private int _height;
    private java.awt.Insets _insets;

    public void <init>(java.awt.Color, int, int, java.awt.Insets)
    {
        java.awt.Color r1;
        java.awt.Insets r2;
        com.jidesoft.icons.TintFilter r0;
        int $i0, $i1, $i2, $i3, i4, i5;

        r0 := @this: com.jidesoft.icons.TintFilter;

        r1 := @parameter0: java.awt.Color;

        i4 := @parameter1: int;

        i5 := @parameter2: int;

        r2 := @parameter3: java.awt.Insets;

        specialinvoke r0.<java.awt.image.RGBImageFilter: void <init>()>();

        $i0 = virtualinvoke r1.<java.awt.Color: int getAlpha()>();

        r0.<com.jidesoft.icons.TintFilter: int _alpha> = $i0;

        $i1 = virtualinvoke r1.<java.awt.Color: int getRed()>();

        r0.<com.jidesoft.icons.TintFilter: int _red> = $i1;

        $i2 = virtualinvoke r1.<java.awt.Color: int getGreen()>();

        r0.<com.jidesoft.icons.TintFilter: int _green> = $i2;

        $i3 = virtualinvoke r1.<java.awt.Color: int getBlue()>();

        r0.<com.jidesoft.icons.TintFilter: int _blue> = $i3;

        r0.<com.jidesoft.icons.TintFilter: int _width> = i4;

        r0.<com.jidesoft.icons.TintFilter: int _height> = i5;

        r0.<com.jidesoft.icons.TintFilter: java.awt.Insets _insets> = r2;

        r0.<com.jidesoft.icons.TintFilter: boolean canFilterIndexColorModel> = 1;

        return;
    }

    public int filterRGB(int, int, int)
    {
        java.awt.Color $r2;
        com.jidesoft.icons.TintFilter r0;
        java.awt.Insets $r1, $r3, $r4, $r5, $r6;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, i39, $i40, $i41, $i42, $i43, $i44, i45, $i46, $i47, $i48, $i49, $i50;

        r0 := @this: com.jidesoft.icons.TintFilter;

        i39 := @parameter0: int;

        i45 := @parameter1: int;

        i0 := @parameter2: int;

        $r1 = r0.<com.jidesoft.icons.TintFilter: java.awt.Insets _insets>;

        if $r1 == null goto label2;

        $r3 = r0.<com.jidesoft.icons.TintFilter: java.awt.Insets _insets>;

        $i40 = $r3.<java.awt.Insets: int left>;

        if i39 < $i40 goto label1;

        $i42 = r0.<com.jidesoft.icons.TintFilter: int _width>;

        $r4 = r0.<com.jidesoft.icons.TintFilter: java.awt.Insets _insets>;

        $i41 = $r4.<java.awt.Insets: int right>;

        $i43 = $i42 - $i41;

        $i44 = $i43 - 1;

        if i39 > $i44 goto label1;

        $r5 = r0.<com.jidesoft.icons.TintFilter: java.awt.Insets _insets>;

        $i46 = $r5.<java.awt.Insets: int top>;

        if i45 < $i46 goto label1;

        $i48 = r0.<com.jidesoft.icons.TintFilter: int _height>;

        $r6 = r0.<com.jidesoft.icons.TintFilter: java.awt.Insets _insets>;

        $i47 = $r6.<java.awt.Insets: int bottom>;

        $i49 = $i48 - $i47;

        $i50 = $i49 - 1;

        if i45 <= $i50 goto label2;

     label1:
        return i0;

     label2:
        $r2 = new java.awt.Color;

        specialinvoke $r2.<java.awt.Color: void <init>(int,boolean)>(i0, 1);

        $i1 = virtualinvoke $r2.<java.awt.Color: int getRed()>();

        $i2 = virtualinvoke $r2.<java.awt.Color: int getRed()>();

        $i3 = r0.<com.jidesoft.icons.TintFilter: int _red>;

        $i4 = $i2 * $i3;

        $i5 = $i4 / 100;

        $i6 = $i1 + $i5;

        $i7 = staticinvoke <java.lang.Math: int max(int,int)>($i6, 0);

        $i8 = staticinvoke <java.lang.Math: int min(int,int)>($i7, 255);

        $i9 = virtualinvoke $r2.<java.awt.Color: int getGreen()>();

        $i10 = virtualinvoke $r2.<java.awt.Color: int getGreen()>();

        $i11 = r0.<com.jidesoft.icons.TintFilter: int _green>;

        $i12 = $i10 * $i11;

        $i13 = $i12 / 100;

        $i14 = $i9 + $i13;

        $i15 = staticinvoke <java.lang.Math: int max(int,int)>($i14, 0);

        $i16 = staticinvoke <java.lang.Math: int min(int,int)>($i15, 255);

        $i17 = virtualinvoke $r2.<java.awt.Color: int getBlue()>();

        $i18 = virtualinvoke $r2.<java.awt.Color: int getBlue()>();

        $i19 = r0.<com.jidesoft.icons.TintFilter: int _blue>;

        $i20 = $i18 * $i19;

        $i21 = $i20 / 100;

        $i22 = $i17 + $i21;

        $i23 = staticinvoke <java.lang.Math: int max(int,int)>($i22, 0);

        $i24 = staticinvoke <java.lang.Math: int min(int,int)>($i23, 255);

        $i25 = virtualinvoke $r2.<java.awt.Color: int getAlpha()>();

        $i26 = virtualinvoke $r2.<java.awt.Color: int getAlpha()>();

        $i27 = r0.<com.jidesoft.icons.TintFilter: int _alpha>;

        $i28 = $i26 * $i27;

        $i29 = $i28 / 100;

        $i30 = $i25 + $i29;

        $i31 = staticinvoke <java.lang.Math: int max(int,int)>($i30, 0);

        $i32 = staticinvoke <java.lang.Math: int min(int,int)>($i31, 255);

        $i34 = $i32 << 24;

        $i33 = $i8 << 16;

        $i36 = $i34 | $i33;

        $i35 = $i16 << 8;

        $i37 = $i36 | $i35;

        $i38 = $i37 | $i24;

        return $i38;
    }

    public static java.awt.Image createTintedImage(java.awt.Image, java.awt.Color, java.awt.Insets)
    {
        java.awt.Color r1;
        java.awt.Insets r3;
        com.jidesoft.icons.TintFilter $r0;
        java.awt.Image r2, $r7;
        java.awt.image.FilteredImageSource $r4;
        java.awt.image.ImageProducer $r5;
        int $i0, $i1;
        java.awt.Toolkit $r6;

        r2 := @parameter0: java.awt.Image;

        r1 := @parameter1: java.awt.Color;

        r3 := @parameter2: java.awt.Insets;

        $r0 = new com.jidesoft.icons.TintFilter;

        $i0 = virtualinvoke r2.<java.awt.Image: int getWidth(java.awt.image.ImageObserver)>(null);

        $i1 = virtualinvoke r2.<java.awt.Image: int getHeight(java.awt.image.ImageObserver)>(null);

        specialinvoke $r0.<com.jidesoft.icons.TintFilter: void <init>(java.awt.Color,int,int,java.awt.Insets)>(r1, $i0, $i1, r3);

        $r4 = new java.awt.image.FilteredImageSource;

        $r5 = virtualinvoke r2.<java.awt.Image: java.awt.image.ImageProducer getSource()>();

        specialinvoke $r4.<java.awt.image.FilteredImageSource: void <init>(java.awt.image.ImageProducer,java.awt.image.ImageFilter)>($r5, $r0);

        $r6 = staticinvoke <java.awt.Toolkit: java.awt.Toolkit getDefaultToolkit()>();

        $r7 = virtualinvoke $r6.<java.awt.Toolkit: java.awt.Image createImage(java.awt.image.ImageProducer)>($r4);

        return $r7;
    }
}
