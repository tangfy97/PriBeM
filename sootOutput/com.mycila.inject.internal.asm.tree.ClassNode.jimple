public class com.mycila.inject.internal.asm.tree.ClassNode extends com.mycila.inject.internal.asm.tree.MemberNode implements com.mycila.inject.internal.asm.ClassVisitor
{
    public int version;
    public int access;
    public java.lang.String name;
    public java.lang.String signature;
    public java.lang.String superName;
    public java.util.List interfaces;
    public java.lang.String sourceFile;
    public java.lang.String sourceDebug;
    public java.lang.String outerClass;
    public java.lang.String outerMethod;
    public java.lang.String outerMethodDesc;
    public java.util.List innerClasses;
    public java.util.List fields;
    public java.util.List methods;

    public void <init>()
    {
        com.mycila.inject.internal.asm.tree.ClassNode r0;
        java.util.ArrayList $r1, $r2, $r3, $r4;

        r0 := @this: com.mycila.inject.internal.asm.tree.ClassNode;

        specialinvoke r0.<com.mycila.inject.internal.asm.tree.MemberNode: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<com.mycila.inject.internal.asm.tree.ClassNode: java.util.List interfaces> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<com.mycila.inject.internal.asm.tree.ClassNode: java.util.List innerClasses> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<com.mycila.inject.internal.asm.tree.ClassNode: java.util.List fields> = $r3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<com.mycila.inject.internal.asm.tree.ClassNode: java.util.List methods> = $r4;

        return;
    }

    public void visit(int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])
    {
        java.lang.String[] r4;
        java.util.List $r5, $r6;
        com.mycila.inject.internal.asm.tree.ClassNode r0;
        int i0, i1;
        java.lang.String r1, r2, r3;

        r0 := @this: com.mycila.inject.internal.asm.tree.ClassNode;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.String;

        r3 := @parameter4: java.lang.String;

        r4 := @parameter5: java.lang.String[];

        r0.<com.mycila.inject.internal.asm.tree.ClassNode: int version> = i0;

        r0.<com.mycila.inject.internal.asm.tree.ClassNode: int access> = i1;

        r0.<com.mycila.inject.internal.asm.tree.ClassNode: java.lang.String name> = r1;

        r0.<com.mycila.inject.internal.asm.tree.ClassNode: java.lang.String signature> = r2;

        r0.<com.mycila.inject.internal.asm.tree.ClassNode: java.lang.String superName> = r3;

        if r4 == null goto label1;

        $r5 = r0.<com.mycila.inject.internal.asm.tree.ClassNode: java.util.List interfaces>;

        $r6 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r4);

        interfaceinvoke $r5.<java.util.List: boolean addAll(java.util.Collection)>($r6);

     label1:
        return;
    }

    public void visitSource(java.lang.String, java.lang.String)
    {
        com.mycila.inject.internal.asm.tree.ClassNode r0;
        java.lang.String r1, r2;

        r0 := @this: com.mycila.inject.internal.asm.tree.ClassNode;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r0.<com.mycila.inject.internal.asm.tree.ClassNode: java.lang.String sourceFile> = r1;

        r0.<com.mycila.inject.internal.asm.tree.ClassNode: java.lang.String sourceDebug> = r2;

        return;
    }

    public void visitOuterClass(java.lang.String, java.lang.String, java.lang.String)
    {
        com.mycila.inject.internal.asm.tree.ClassNode r0;
        java.lang.String r1, r2, r3;

        r0 := @this: com.mycila.inject.internal.asm.tree.ClassNode;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r0.<com.mycila.inject.internal.asm.tree.ClassNode: java.lang.String outerClass> = r1;

        r0.<com.mycila.inject.internal.asm.tree.ClassNode: java.lang.String outerMethod> = r2;

        r0.<com.mycila.inject.internal.asm.tree.ClassNode: java.lang.String outerMethodDesc> = r3;

        return;
    }

    public void visitInnerClass(java.lang.String, java.lang.String, java.lang.String, int)
    {
        java.util.List $r5;
        com.mycila.inject.internal.asm.tree.ClassNode r4;
        int i0;
        java.lang.String r1, r2, r3;
        com.mycila.inject.internal.asm.tree.InnerClassNode $r0;

        r4 := @this: com.mycila.inject.internal.asm.tree.ClassNode;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        $r0 = new com.mycila.inject.internal.asm.tree.InnerClassNode;

        specialinvoke $r0.<com.mycila.inject.internal.asm.tree.InnerClassNode: void <init>(java.lang.String,java.lang.String,java.lang.String,int)>(r1, r2, r3, i0);

        $r5 = r4.<com.mycila.inject.internal.asm.tree.ClassNode: java.util.List innerClasses>;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r0);

        return;
    }

    public com.mycila.inject.internal.asm.FieldVisitor visitField(int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object)
    {
        java.util.List $r6;
        com.mycila.inject.internal.asm.tree.ClassNode r5;
        int i0;
        java.lang.Object r4;
        com.mycila.inject.internal.asm.tree.FieldNode $r0;
        java.lang.String r1, r2, r3;

        r5 := @this: com.mycila.inject.internal.asm.tree.ClassNode;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: java.lang.Object;

        $r0 = new com.mycila.inject.internal.asm.tree.FieldNode;

        specialinvoke $r0.<com.mycila.inject.internal.asm.tree.FieldNode: void <init>(int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)>(i0, r1, r2, r3, r4);

        $r6 = r5.<com.mycila.inject.internal.asm.tree.ClassNode: java.util.List fields>;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r0);

        return $r0;
    }

    public com.mycila.inject.internal.asm.MethodVisitor visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])
    {
        java.lang.String[] r4;
        com.mycila.inject.internal.asm.tree.MethodNode $r0;
        java.util.List $r6;
        com.mycila.inject.internal.asm.tree.ClassNode r5;
        int i0;
        java.lang.String r1, r2, r3;

        r5 := @this: com.mycila.inject.internal.asm.tree.ClassNode;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: java.lang.String[];

        $r0 = new com.mycila.inject.internal.asm.tree.MethodNode;

        specialinvoke $r0.<com.mycila.inject.internal.asm.tree.MethodNode: void <init>(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>(i0, r1, r2, r3, r4);

        $r6 = r5.<com.mycila.inject.internal.asm.tree.ClassNode: java.util.List methods>;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r0);

        return $r0;
    }

    public void accept(com.mycila.inject.internal.asm.ClassVisitor)
    {
        com.mycila.inject.internal.asm.tree.InnerClassNode $r28;
        java.lang.String $r5, $r6, $r7, $r8, $r9, $r10, $r34, $r38, $r40, $r41, $r42, $r43, $r44;
        com.mycila.inject.internal.asm.ClassVisitor r4;
        com.mycila.inject.internal.asm.tree.MethodNode $r22;
        com.mycila.inject.internal.asm.tree.FieldNode $r25;
        java.util.List $r1, $r3, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r23, $r26, $r29, $r32, $r36;
        com.mycila.inject.internal.asm.Attribute $r31;
        java.lang.String[] r2;
        com.mycila.inject.internal.asm.tree.AnnotationNode r45, r46;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, $i9, i10, i11, $i12, i13, i14, i15, i16, i17;
        com.mycila.inject.internal.asm.AnnotationVisitor $r35, $r39;
        com.mycila.inject.internal.asm.tree.ClassNode r0;
        java.lang.Object $r21, $r24, $r27, $r30, $r33, $r37;

        r0 := @this: com.mycila.inject.internal.asm.tree.ClassNode;

        r4 := @parameter0: com.mycila.inject.internal.asm.ClassVisitor;

        $r1 = r0.<com.mycila.inject.internal.asm.tree.ClassNode: java.util.List interfaces>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        r2 = newarray (java.lang.String)[$i0];

        $r3 = r0.<com.mycila.inject.internal.asm.tree.ClassNode: java.util.List interfaces>;

        interfaceinvoke $r3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r2);

        $i2 = r0.<com.mycila.inject.internal.asm.tree.ClassNode: int version>;

        $i1 = r0.<com.mycila.inject.internal.asm.tree.ClassNode: int access>;

        $r7 = r0.<com.mycila.inject.internal.asm.tree.ClassNode: java.lang.String name>;

        $r6 = r0.<com.mycila.inject.internal.asm.tree.ClassNode: java.lang.String signature>;

        $r5 = r0.<com.mycila.inject.internal.asm.tree.ClassNode: java.lang.String superName>;

        interfaceinvoke r4.<com.mycila.inject.internal.asm.ClassVisitor: void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>($i2, $i1, $r7, $r6, $r5, r2);

        $r8 = r0.<com.mycila.inject.internal.asm.tree.ClassNode: java.lang.String sourceFile>;

        if $r8 != null goto label01;

        $r43 = r0.<com.mycila.inject.internal.asm.tree.ClassNode: java.lang.String sourceDebug>;

        if $r43 == null goto label02;

     label01:
        $r10 = r0.<com.mycila.inject.internal.asm.tree.ClassNode: java.lang.String sourceFile>;

        $r9 = r0.<com.mycila.inject.internal.asm.tree.ClassNode: java.lang.String sourceDebug>;

        interfaceinvoke r4.<com.mycila.inject.internal.asm.ClassVisitor: void visitSource(java.lang.String,java.lang.String)>($r10, $r9);

     label02:
        $r44 = r0.<com.mycila.inject.internal.asm.tree.ClassNode: java.lang.String outerClass>;

        if $r44 == null goto label03;

        $r42 = r0.<com.mycila.inject.internal.asm.tree.ClassNode: java.lang.String outerClass>;

        $r41 = r0.<com.mycila.inject.internal.asm.tree.ClassNode: java.lang.String outerMethod>;

        $r40 = r0.<com.mycila.inject.internal.asm.tree.ClassNode: java.lang.String outerMethodDesc>;

        interfaceinvoke r4.<com.mycila.inject.internal.asm.ClassVisitor: void visitOuterClass(java.lang.String,java.lang.String,java.lang.String)>($r42, $r41, $r40);

     label03:
        $r11 = r0.<com.mycila.inject.internal.asm.tree.ClassNode: java.util.List visibleAnnotations>;

        if $r11 != null goto label04;

        $i6 = 0;

        goto label05;

     label04:
        $r12 = r0.<com.mycila.inject.internal.asm.tree.ClassNode: java.util.List visibleAnnotations>;

        $i6 = interfaceinvoke $r12.<java.util.List: int size()>();

     label05:
        i7 = $i6;

        i8 = 0;

     label06:
        if i8 >= i7 goto label07;

        $r36 = r0.<com.mycila.inject.internal.asm.tree.ClassNode: java.util.List visibleAnnotations>;

        $r37 = interfaceinvoke $r36.<java.util.List: java.lang.Object get(int)>(i8);

        r45 = (com.mycila.inject.internal.asm.tree.AnnotationNode) $r37;

        $r38 = r45.<com.mycila.inject.internal.asm.tree.AnnotationNode: java.lang.String desc>;

        $r39 = interfaceinvoke r4.<com.mycila.inject.internal.asm.ClassVisitor: com.mycila.inject.internal.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)>($r38, 1);

        virtualinvoke r45.<com.mycila.inject.internal.asm.tree.AnnotationNode: void accept(com.mycila.inject.internal.asm.AnnotationVisitor)>($r39);

        i8 = i8 + 1;

        goto label06;

     label07:
        $r13 = r0.<com.mycila.inject.internal.asm.tree.ClassNode: java.util.List invisibleAnnotations>;

        if $r13 != null goto label08;

        $i9 = 0;

        goto label09;

     label08:
        $r14 = r0.<com.mycila.inject.internal.asm.tree.ClassNode: java.util.List invisibleAnnotations>;

        $i9 = interfaceinvoke $r14.<java.util.List: int size()>();

     label09:
        i10 = $i9;

        i11 = 0;

     label10:
        if i11 >= i10 goto label11;

        $r32 = r0.<com.mycila.inject.internal.asm.tree.ClassNode: java.util.List invisibleAnnotations>;

        $r33 = interfaceinvoke $r32.<java.util.List: java.lang.Object get(int)>(i11);

        r46 = (com.mycila.inject.internal.asm.tree.AnnotationNode) $r33;

        $r34 = r46.<com.mycila.inject.internal.asm.tree.AnnotationNode: java.lang.String desc>;

        $r35 = interfaceinvoke r4.<com.mycila.inject.internal.asm.ClassVisitor: com.mycila.inject.internal.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)>($r34, 0);

        virtualinvoke r46.<com.mycila.inject.internal.asm.tree.AnnotationNode: void accept(com.mycila.inject.internal.asm.AnnotationVisitor)>($r35);

        i11 = i11 + 1;

        goto label10;

     label11:
        $r15 = r0.<com.mycila.inject.internal.asm.tree.ClassNode: java.util.List attrs>;

        if $r15 != null goto label12;

        $i12 = 0;

        goto label13;

     label12:
        $r16 = r0.<com.mycila.inject.internal.asm.tree.ClassNode: java.util.List attrs>;

        $i12 = interfaceinvoke $r16.<java.util.List: int size()>();

     label13:
        i13 = $i12;

        i14 = 0;

     label14:
        if i14 >= i13 goto label15;

        $r29 = r0.<com.mycila.inject.internal.asm.tree.ClassNode: java.util.List attrs>;

        $r30 = interfaceinvoke $r29.<java.util.List: java.lang.Object get(int)>(i14);

        $r31 = (com.mycila.inject.internal.asm.Attribute) $r30;

        interfaceinvoke r4.<com.mycila.inject.internal.asm.ClassVisitor: void visitAttribute(com.mycila.inject.internal.asm.Attribute)>($r31);

        i14 = i14 + 1;

        goto label14;

     label15:
        i15 = 0;

     label16:
        $r17 = r0.<com.mycila.inject.internal.asm.tree.ClassNode: java.util.List innerClasses>;

        $i3 = interfaceinvoke $r17.<java.util.List: int size()>();

        if i15 >= $i3 goto label17;

        $r26 = r0.<com.mycila.inject.internal.asm.tree.ClassNode: java.util.List innerClasses>;

        $r27 = interfaceinvoke $r26.<java.util.List: java.lang.Object get(int)>(i15);

        $r28 = (com.mycila.inject.internal.asm.tree.InnerClassNode) $r27;

        virtualinvoke $r28.<com.mycila.inject.internal.asm.tree.InnerClassNode: void accept(com.mycila.inject.internal.asm.ClassVisitor)>(r4);

        i15 = i15 + 1;

        goto label16;

     label17:
        i16 = 0;

     label18:
        $r18 = r0.<com.mycila.inject.internal.asm.tree.ClassNode: java.util.List fields>;

        $i4 = interfaceinvoke $r18.<java.util.List: int size()>();

        if i16 >= $i4 goto label19;

        $r23 = r0.<com.mycila.inject.internal.asm.tree.ClassNode: java.util.List fields>;

        $r24 = interfaceinvoke $r23.<java.util.List: java.lang.Object get(int)>(i16);

        $r25 = (com.mycila.inject.internal.asm.tree.FieldNode) $r24;

        virtualinvoke $r25.<com.mycila.inject.internal.asm.tree.FieldNode: void accept(com.mycila.inject.internal.asm.ClassVisitor)>(r4);

        i16 = i16 + 1;

        goto label18;

     label19:
        i17 = 0;

     label20:
        $r19 = r0.<com.mycila.inject.internal.asm.tree.ClassNode: java.util.List methods>;

        $i5 = interfaceinvoke $r19.<java.util.List: int size()>();

        if i17 >= $i5 goto label21;

        $r20 = r0.<com.mycila.inject.internal.asm.tree.ClassNode: java.util.List methods>;

        $r21 = interfaceinvoke $r20.<java.util.List: java.lang.Object get(int)>(i17);

        $r22 = (com.mycila.inject.internal.asm.tree.MethodNode) $r21;

        virtualinvoke $r22.<com.mycila.inject.internal.asm.tree.MethodNode: void accept(com.mycila.inject.internal.asm.ClassVisitor)>(r4);

        i17 = i17 + 1;

        goto label20;

     label21:
        interfaceinvoke r4.<com.mycila.inject.internal.asm.ClassVisitor: void visitEnd()>();

        return;
    }
}
