public abstract class org.codehaus.jettison.AbstractXMLStreamReader extends java.lang.Object implements javax.xml.stream.XMLStreamReader
{
    protected int event;
    protected org.codehaus.jettison.Node node;

    public void <init>()
    {
        org.codehaus.jettison.AbstractXMLStreamReader r0;

        r0 := @this: org.codehaus.jettison.AbstractXMLStreamReader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean isAttributeSpecified(int)
    {
        int i0;
        org.codehaus.jettison.AbstractXMLStreamReader r0;

        r0 := @this: org.codehaus.jettison.AbstractXMLStreamReader;

        i0 := @parameter0: int;

        return 0;
    }

    public boolean isCharacters()
    {
        int $i0;
        org.codehaus.jettison.AbstractXMLStreamReader r0;
        boolean $z0;

        r0 := @this: org.codehaus.jettison.AbstractXMLStreamReader;

        $i0 = r0.<org.codehaus.jettison.AbstractXMLStreamReader: int event>;

        if $i0 != 4 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isEndElement()
    {
        int $i0;
        org.codehaus.jettison.AbstractXMLStreamReader r0;
        boolean $z0;

        r0 := @this: org.codehaus.jettison.AbstractXMLStreamReader;

        $i0 = r0.<org.codehaus.jettison.AbstractXMLStreamReader: int event>;

        if $i0 != 2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isStandalone()
    {
        org.codehaus.jettison.AbstractXMLStreamReader r0;

        r0 := @this: org.codehaus.jettison.AbstractXMLStreamReader;

        return 0;
    }

    public boolean isStartElement()
    {
        int $i0;
        org.codehaus.jettison.AbstractXMLStreamReader r0;
        boolean $z0;

        r0 := @this: org.codehaus.jettison.AbstractXMLStreamReader;

        $i0 = r0.<org.codehaus.jettison.AbstractXMLStreamReader: int event>;

        if $i0 != 1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isWhiteSpace()
    {
        org.codehaus.jettison.AbstractXMLStreamReader r0;

        r0 := @this: org.codehaus.jettison.AbstractXMLStreamReader;

        return 0;
    }

    public int nextTag() throws javax.xml.stream.XMLStreamException
    {
        int i0;
        org.codehaus.jettison.AbstractXMLStreamReader r0;

        r0 := @this: org.codehaus.jettison.AbstractXMLStreamReader;

        i0 = virtualinvoke r0.<org.codehaus.jettison.AbstractXMLStreamReader: int next()>();

     label1:
        if i0 == 1 goto label2;

        if i0 == 2 goto label2;

        i0 = virtualinvoke r0.<org.codehaus.jettison.AbstractXMLStreamReader: int next()>();

        goto label1;

     label2:
        return i0;
    }

    public int getEventType()
    {
        int $i0;
        org.codehaus.jettison.AbstractXMLStreamReader r0;

        r0 := @this: org.codehaus.jettison.AbstractXMLStreamReader;

        $i0 = r0.<org.codehaus.jettison.AbstractXMLStreamReader: int event>;

        return $i0;
    }

    public void require(int, java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        org.codehaus.jettison.AbstractXMLStreamReader r0;
        int i0;
        java.lang.String r1, r2;

        r0 := @this: org.codehaus.jettison.AbstractXMLStreamReader;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        return;
    }

    public int getAttributeCount()
    {
        org.codehaus.jettison.AbstractXMLStreamReader r0;
        java.util.Map $r2;
        int $i0;
        org.codehaus.jettison.Node $r1;

        r0 := @this: org.codehaus.jettison.AbstractXMLStreamReader;

        $r1 = r0.<org.codehaus.jettison.AbstractXMLStreamReader: org.codehaus.jettison.Node node>;

        $r2 = virtualinvoke $r1.<org.codehaus.jettison.Node: java.util.Map getAttributes()>();

        $i0 = interfaceinvoke $r2.<java.util.Map: int size()>();

        return $i0;
    }

    public java.lang.String getAttributeLocalName(int)
    {
        org.codehaus.jettison.AbstractXMLStreamReader r0;
        int i0;
        javax.xml.namespace.QName $r1;
        java.lang.String $r2;

        r0 := @this: org.codehaus.jettison.AbstractXMLStreamReader;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.codehaus.jettison.AbstractXMLStreamReader: javax.xml.namespace.QName getAttributeName(int)>(i0);

        $r2 = virtualinvoke $r1.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        return $r2;
    }

    public javax.xml.namespace.QName getAttributeName(int)
    {
        java.util.Iterator $r4;
        org.codehaus.jettison.AbstractXMLStreamReader r0;
        org.codehaus.jettison.Node $r1;
        java.util.Set $r3;
        java.util.Map $r2;
        int i0, i1;
        java.lang.Object $r5;
        javax.xml.namespace.QName r6;

        r0 := @this: org.codehaus.jettison.AbstractXMLStreamReader;

        i0 := @parameter0: int;

        $r1 = r0.<org.codehaus.jettison.AbstractXMLStreamReader: org.codehaus.jettison.Node node>;

        $r2 = virtualinvoke $r1.<org.codehaus.jettison.Node: java.util.Map getAttributes()>();

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

        r6 = null;

        i1 = 0;

     label1:
        if i1 > i0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (javax.xml.namespace.QName) $r5;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r6;
    }

    public java.lang.String getAttributeNamespace(int)
    {
        org.codehaus.jettison.AbstractXMLStreamReader r0;
        int i0;
        javax.xml.namespace.QName $r1;
        java.lang.String $r2;

        r0 := @this: org.codehaus.jettison.AbstractXMLStreamReader;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.codehaus.jettison.AbstractXMLStreamReader: javax.xml.namespace.QName getAttributeName(int)>(i0);

        $r2 = virtualinvoke $r1.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        return $r2;
    }

    public java.lang.String getAttributePrefix(int)
    {
        org.codehaus.jettison.AbstractXMLStreamReader r0;
        int i0;
        javax.xml.namespace.QName $r1;
        java.lang.String $r2;

        r0 := @this: org.codehaus.jettison.AbstractXMLStreamReader;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.codehaus.jettison.AbstractXMLStreamReader: javax.xml.namespace.QName getAttributeName(int)>(i0);

        $r2 = virtualinvoke $r1.<javax.xml.namespace.QName: java.lang.String getPrefix()>();

        return $r2;
    }

    public java.lang.String getAttributeValue(int)
    {
        java.util.Iterator $r4;
        org.codehaus.jettison.AbstractXMLStreamReader r0;
        java.util.Collection $r3;
        org.codehaus.jettison.Node $r1;
        java.util.Map $r2;
        int i0, i1;
        java.lang.Object $r5;
        java.lang.String r6;

        r0 := @this: org.codehaus.jettison.AbstractXMLStreamReader;

        i0 := @parameter0: int;

        $r1 = r0.<org.codehaus.jettison.AbstractXMLStreamReader: org.codehaus.jettison.Node node>;

        $r2 = virtualinvoke $r1.<org.codehaus.jettison.Node: java.util.Map getAttributes()>();

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>();

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

        r6 = null;

        i1 = 0;

     label1:
        if i1 > i0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.String) $r5;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r6;
    }

    public java.lang.String getAttributeValue(java.lang.String, java.lang.String)
    {
        org.codehaus.jettison.AbstractXMLStreamReader r0;
        org.codehaus.jettison.Node $r1;
        java.util.Map $r2;
        java.lang.Object $r6;
        javax.xml.namespace.QName $r3;
        java.lang.String r4, r5, $r7;

        r0 := @this: org.codehaus.jettison.AbstractXMLStreamReader;

        r4 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.String;

        $r1 = r0.<org.codehaus.jettison.AbstractXMLStreamReader: org.codehaus.jettison.Node node>;

        $r2 = virtualinvoke $r1.<org.codehaus.jettison.Node: java.util.Map getAttributes()>();

        $r3 = new javax.xml.namespace.QName;

        specialinvoke $r3.<javax.xml.namespace.QName: void <init>(java.lang.String,java.lang.String)>(r4, r5);

        $r6 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        $r7 = (java.lang.String) $r6;

        return $r7;
    }

    public java.lang.String getAttributeType(int)
    {
        int i0;
        org.codehaus.jettison.AbstractXMLStreamReader r0;

        r0 := @this: org.codehaus.jettison.AbstractXMLStreamReader;

        i0 := @parameter0: int;

        return null;
    }

    public java.lang.String getLocalName()
    {
        javax.xml.namespace.QName $r1;
        java.lang.String $r2;
        org.codehaus.jettison.AbstractXMLStreamReader r0;

        r0 := @this: org.codehaus.jettison.AbstractXMLStreamReader;

        $r1 = virtualinvoke r0.<org.codehaus.jettison.AbstractXMLStreamReader: javax.xml.namespace.QName getName()>();

        $r2 = virtualinvoke $r1.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        return $r2;
    }

    public javax.xml.namespace.QName getName()
    {
        org.codehaus.jettison.Node $r1;
        javax.xml.namespace.QName $r2;
        org.codehaus.jettison.AbstractXMLStreamReader r0;

        r0 := @this: org.codehaus.jettison.AbstractXMLStreamReader;

        $r1 = r0.<org.codehaus.jettison.AbstractXMLStreamReader: org.codehaus.jettison.Node node>;

        $r2 = virtualinvoke $r1.<org.codehaus.jettison.Node: javax.xml.namespace.QName getName()>();

        return $r2;
    }

    public java.lang.String getNamespaceURI()
    {
        javax.xml.namespace.QName $r1;
        java.lang.String $r2;
        org.codehaus.jettison.AbstractXMLStreamReader r0;

        r0 := @this: org.codehaus.jettison.AbstractXMLStreamReader;

        $r1 = virtualinvoke r0.<org.codehaus.jettison.AbstractXMLStreamReader: javax.xml.namespace.QName getName()>();

        $r2 = virtualinvoke $r1.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        return $r2;
    }

    public int getNamespaceCount()
    {
        int $i0;
        org.codehaus.jettison.Node $r1;
        org.codehaus.jettison.AbstractXMLStreamReader r0;

        r0 := @this: org.codehaus.jettison.AbstractXMLStreamReader;

        $r1 = r0.<org.codehaus.jettison.AbstractXMLStreamReader: org.codehaus.jettison.Node node>;

        $i0 = virtualinvoke $r1.<org.codehaus.jettison.Node: int getNamespaceCount()>();

        return $i0;
    }

    public java.lang.String getNamespacePrefix(int)
    {
        org.codehaus.jettison.AbstractXMLStreamReader r0;
        int i0;
        org.codehaus.jettison.Node $r1;
        java.lang.String $r2;

        r0 := @this: org.codehaus.jettison.AbstractXMLStreamReader;

        i0 := @parameter0: int;

        $r1 = r0.<org.codehaus.jettison.AbstractXMLStreamReader: org.codehaus.jettison.Node node>;

        $r2 = virtualinvoke $r1.<org.codehaus.jettison.Node: java.lang.String getNamespacePrefix(int)>(i0);

        return $r2;
    }

    public java.lang.String getNamespaceURI(int)
    {
        org.codehaus.jettison.AbstractXMLStreamReader r0;
        int i0;
        org.codehaus.jettison.Node $r1;
        java.lang.String $r2;

        r0 := @this: org.codehaus.jettison.AbstractXMLStreamReader;

        i0 := @parameter0: int;

        $r1 = r0.<org.codehaus.jettison.AbstractXMLStreamReader: org.codehaus.jettison.Node node>;

        $r2 = virtualinvoke $r1.<org.codehaus.jettison.Node: java.lang.String getNamespaceURI(int)>(i0);

        return $r2;
    }

    public java.lang.String getNamespaceURI(java.lang.String)
    {
        org.codehaus.jettison.AbstractXMLStreamReader r0;
        org.codehaus.jettison.Node $r2;
        java.lang.String r1, $r3;

        r0 := @this: org.codehaus.jettison.AbstractXMLStreamReader;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.codehaus.jettison.AbstractXMLStreamReader: org.codehaus.jettison.Node node>;

        $r3 = virtualinvoke $r2.<org.codehaus.jettison.Node: java.lang.String getNamespaceURI(java.lang.String)>(r1);

        return $r3;
    }

    public boolean hasName()
    {
        org.codehaus.jettison.AbstractXMLStreamReader r0;

        r0 := @this: org.codehaus.jettison.AbstractXMLStreamReader;

        return 0;
    }

    public boolean hasNext() throws javax.xml.stream.XMLStreamException
    {
        int $i0;
        org.codehaus.jettison.AbstractXMLStreamReader r0;
        boolean $z0;

        r0 := @this: org.codehaus.jettison.AbstractXMLStreamReader;

        $i0 = r0.<org.codehaus.jettison.AbstractXMLStreamReader: int event>;

        if $i0 == 8 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean hasText()
    {
        int $i0;
        org.codehaus.jettison.AbstractXMLStreamReader r0;
        boolean $z0;

        r0 := @this: org.codehaus.jettison.AbstractXMLStreamReader;

        $i0 = r0.<org.codehaus.jettison.AbstractXMLStreamReader: int event>;

        if $i0 != 4 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean standaloneSet()
    {
        org.codehaus.jettison.AbstractXMLStreamReader r0;

        r0 := @this: org.codehaus.jettison.AbstractXMLStreamReader;

        return 0;
    }

    public java.lang.String getCharacterEncodingScheme()
    {
        org.codehaus.jettison.AbstractXMLStreamReader r0;

        r0 := @this: org.codehaus.jettison.AbstractXMLStreamReader;

        return null;
    }

    public java.lang.String getEncoding()
    {
        org.codehaus.jettison.AbstractXMLStreamReader r0;

        r0 := @this: org.codehaus.jettison.AbstractXMLStreamReader;

        return null;
    }

    public javax.xml.stream.Location getLocation()
    {
        org.codehaus.jettison.AbstractXMLStreamReader$1 $r0;
        org.codehaus.jettison.AbstractXMLStreamReader r1;

        r1 := @this: org.codehaus.jettison.AbstractXMLStreamReader;

        $r0 = new org.codehaus.jettison.AbstractXMLStreamReader$1;

        specialinvoke $r0.<org.codehaus.jettison.AbstractXMLStreamReader$1: void <init>(org.codehaus.jettison.AbstractXMLStreamReader)>(r1);

        return $r0;
    }

    public java.lang.String getPIData()
    {
        org.codehaus.jettison.AbstractXMLStreamReader r0;

        r0 := @this: org.codehaus.jettison.AbstractXMLStreamReader;

        return null;
    }

    public java.lang.String getPITarget()
    {
        org.codehaus.jettison.AbstractXMLStreamReader r0;

        r0 := @this: org.codehaus.jettison.AbstractXMLStreamReader;

        return null;
    }

    public java.lang.String getPrefix()
    {
        javax.xml.namespace.QName $r1;
        java.lang.String $r2;
        org.codehaus.jettison.AbstractXMLStreamReader r0;

        r0 := @this: org.codehaus.jettison.AbstractXMLStreamReader;

        $r1 = virtualinvoke r0.<org.codehaus.jettison.AbstractXMLStreamReader: javax.xml.namespace.QName getName()>();

        $r2 = virtualinvoke $r1.<javax.xml.namespace.QName: java.lang.String getPrefix()>();

        return $r2;
    }

    public java.lang.Object getProperty(java.lang.String) throws java.lang.IllegalArgumentException
    {
        java.lang.String r1;
        org.codehaus.jettison.AbstractXMLStreamReader r0;

        r0 := @this: org.codehaus.jettison.AbstractXMLStreamReader;

        r1 := @parameter0: java.lang.String;

        return null;
    }

    public java.lang.String getVersion()
    {
        org.codehaus.jettison.AbstractXMLStreamReader r0;

        r0 := @this: org.codehaus.jettison.AbstractXMLStreamReader;

        return null;
    }

    public char[] getTextCharacters()
    {
        char[] $r2;
        java.lang.String $r1;
        org.codehaus.jettison.AbstractXMLStreamReader r0;

        r0 := @this: org.codehaus.jettison.AbstractXMLStreamReader;

        $r1 = virtualinvoke r0.<org.codehaus.jettison.AbstractXMLStreamReader: java.lang.String getText()>();

        $r2 = virtualinvoke $r1.<java.lang.String: char[] toCharArray()>();

        return $r2;
    }

    public int getTextCharacters(int, char[], int, int) throws javax.xml.stream.XMLStreamException
    {
        org.codehaus.jettison.AbstractXMLStreamReader r0;
        int i0, i1, i2, $i3;
        char[] r2;
        java.lang.String $r1;

        r0 := @this: org.codehaus.jettison.AbstractXMLStreamReader;

        i0 := @parameter0: int;

        r2 := @parameter1: char[];

        i2 := @parameter2: int;

        i1 := @parameter3: int;

        $r1 = virtualinvoke r0.<org.codehaus.jettison.AbstractXMLStreamReader: java.lang.String getText()>();

        $i3 = i0 + i1;

        virtualinvoke $r1.<java.lang.String: void getChars(int,int,char[],int)>(i0, $i3, r2, i2);

        return i1;
    }

    public int getTextLength()
    {
        int $i0;
        java.lang.String $r1;
        org.codehaus.jettison.AbstractXMLStreamReader r0;

        r0 := @this: org.codehaus.jettison.AbstractXMLStreamReader;

        $r1 = virtualinvoke r0.<org.codehaus.jettison.AbstractXMLStreamReader: java.lang.String getText()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        return $i0;
    }

    public int getTextStart()
    {
        org.codehaus.jettison.AbstractXMLStreamReader r0;

        r0 := @this: org.codehaus.jettison.AbstractXMLStreamReader;

        return 0;
    }
}
