public class org.apache.commons.httpclient.methods.HeadMethod extends org.apache.commons.httpclient.HttpMethodBase
{
    private static final org.apache.commons.logging.Log LOG;
    static java.lang.Class class$org$apache$commons$httpclient$methods$HeadMethod;

    public void <init>()
    {
        org.apache.commons.httpclient.methods.HeadMethod r0;

        r0 := @this: org.apache.commons.httpclient.methods.HeadMethod;

        specialinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: void <init>()>();

        virtualinvoke r0.<org.apache.commons.httpclient.methods.HeadMethod: void setFollowRedirects(boolean)>(1);

        return;
    }

    public void <init>(java.lang.String)
    {
        org.apache.commons.httpclient.methods.HeadMethod r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.httpclient.methods.HeadMethod;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: void <init>(java.lang.String)>(r1);

        virtualinvoke r0.<org.apache.commons.httpclient.methods.HeadMethod: void setFollowRedirects(boolean)>(1);

        return;
    }

    public java.lang.String getName()
    {
        org.apache.commons.httpclient.methods.HeadMethod r0;

        r0 := @this: org.apache.commons.httpclient.methods.HeadMethod;

        return "HEAD";
    }

    public void recycle()
    {
        org.apache.commons.httpclient.methods.HeadMethod r0;

        r0 := @this: org.apache.commons.httpclient.methods.HeadMethod;

        specialinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: void recycle()>();

        virtualinvoke r0.<org.apache.commons.httpclient.methods.HeadMethod: void setFollowRedirects(boolean)>(1);

        return;
    }

    protected void readResponseBody(org.apache.commons.httpclient.HttpState, org.apache.commons.httpclient.HttpConnection) throws org.apache.commons.httpclient.HttpException, java.io.IOException
    {
        org.apache.commons.httpclient.HttpConnection r4;
        org.apache.commons.httpclient.params.HttpMethodParams $r2, $r5;
        org.apache.commons.httpclient.HttpState r7;
        java.lang.StringBuffer $r11, $r12, $r13, $r17;
        int $i0, $i2;
        java.lang.String $r14;
        boolean $z0, $z1, z2;
        java.io.IOException $r15;
        org.apache.commons.httpclient.ProtocolException $r18;
        org.apache.commons.logging.Log $r0, $r3, $r6, $r10, $r16;
        org.apache.commons.httpclient.methods.HeadMethod r1;

        r1 := @this: org.apache.commons.httpclient.methods.HeadMethod;

        r7 := @parameter0: org.apache.commons.httpclient.HttpState;

        r4 := @parameter1: org.apache.commons.httpclient.HttpConnection;

        $r0 = <org.apache.commons.httpclient.methods.HeadMethod: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HeadMethod.readResponseBody(HttpState, HttpConnection)");

        $r2 = virtualinvoke r1.<org.apache.commons.httpclient.methods.HeadMethod: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        $i2 = (int) -1;

        $i0 = virtualinvoke $r2.<org.apache.commons.httpclient.params.HttpMethodParams: int getIntParameter(java.lang.String,int)>("http.protocol.head-body-timeout", $i2);

        if $i0 >= 0 goto label1;

        virtualinvoke r1.<org.apache.commons.httpclient.methods.HeadMethod: void responseBodyConsumed()>();

        goto label7;

     label1:
        $r3 = <org.apache.commons.httpclient.methods.HeadMethod: org.apache.commons.logging.Log LOG>;

        $z0 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label2;

        $r10 = <org.apache.commons.httpclient.methods.HeadMethod: org.apache.commons.logging.Log LOG>;

        $r17 = new java.lang.StringBuffer;

        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Check for non-compliant response body. Timeout in ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ms");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r10.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r14);

     label2:
        z2 = virtualinvoke r4.<org.apache.commons.httpclient.HttpConnection: boolean isResponseAvailable(int)>($i0);

     label3:
        goto label5;

     label4:
        $r15 := @caughtexception;

        $r16 = <org.apache.commons.httpclient.methods.HeadMethod: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r16.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>("An IOException occurred while testing if a response was available, we will assume one is not.", $r15);

        z2 = 0;

     label5:
        if z2 == 0 goto label7;

        $r5 = virtualinvoke r1.<org.apache.commons.httpclient.methods.HeadMethod: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        $z1 = virtualinvoke $r5.<org.apache.commons.httpclient.params.HttpMethodParams: boolean isParameterTrue(java.lang.String)>("http.protocol.reject-head-body");

        if $z1 == 0 goto label6;

        $r18 = new org.apache.commons.httpclient.ProtocolException;

        specialinvoke $r18.<org.apache.commons.httpclient.ProtocolException: void <init>(java.lang.String)>("Body content may not be sent in response to HTTP HEAD request");

        throw $r18;

     label6:
        $r6 = <org.apache.commons.httpclient.methods.HeadMethod: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r6.<org.apache.commons.logging.Log: void warn(java.lang.Object)>("Body content returned in response to HTTP HEAD");

        specialinvoke r1.<org.apache.commons.httpclient.HttpMethodBase: void readResponseBody(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>(r7, r4);

     label7:
        return;

        catch java.io.IOException from label2 to label3 with label4;
    }

    public int getBodyCheckTimeout()
    {
        org.apache.commons.httpclient.params.HttpMethodParams $r1;
        int $i0, $i2;
        org.apache.commons.httpclient.methods.HeadMethod r0;

        r0 := @this: org.apache.commons.httpclient.methods.HeadMethod;

        $r1 = virtualinvoke r0.<org.apache.commons.httpclient.methods.HeadMethod: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        $i2 = (int) -1;

        $i0 = virtualinvoke $r1.<org.apache.commons.httpclient.params.HttpMethodParams: int getIntParameter(java.lang.String,int)>("http.protocol.head-body-timeout", $i2);

        return $i0;
    }

    public void setBodyCheckTimeout(int)
    {
        org.apache.commons.httpclient.params.HttpMethodParams $r1;
        int i0;
        org.apache.commons.httpclient.methods.HeadMethod r0;

        r0 := @this: org.apache.commons.httpclient.methods.HeadMethod;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.commons.httpclient.methods.HeadMethod: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        virtualinvoke $r1.<org.apache.commons.httpclient.params.HttpMethodParams: void setIntParameter(java.lang.String,int)>("http.protocol.head-body-timeout", i0);

        return;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.Class $r0, $r2;
        org.apache.commons.logging.Log $r1;

        $r0 = <org.apache.commons.httpclient.methods.HeadMethod: java.lang.Class class$org$apache$commons$httpclient$methods$HeadMethod>;

        if $r0 != null goto label1;

        $r2 = staticinvoke <org.apache.commons.httpclient.methods.HeadMethod: java.lang.Class class$(java.lang.String)>("org.apache.commons.httpclient.methods.HeadMethod");

        <org.apache.commons.httpclient.methods.HeadMethod: java.lang.Class class$org$apache$commons$httpclient$methods$HeadMethod> = $r2;

        goto label2;

     label1:
        $r2 = <org.apache.commons.httpclient.methods.HeadMethod: java.lang.Class class$org$apache$commons$httpclient$methods$HeadMethod>;

     label2:
        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r2);

        <org.apache.commons.httpclient.methods.HeadMethod: org.apache.commons.logging.Log LOG> = $r1;

        return;
    }
}
