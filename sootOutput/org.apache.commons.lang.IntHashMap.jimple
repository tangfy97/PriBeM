class org.apache.commons.lang.IntHashMap extends java.lang.Object
{
    private transient org.apache.commons.lang.IntHashMap$Entry[] table;
    private transient int count;
    private int threshold;
    private float loadFactor;

    public void <init>()
    {
        org.apache.commons.lang.IntHashMap r0;

        r0 := @this: org.apache.commons.lang.IntHashMap;

        specialinvoke r0.<org.apache.commons.lang.IntHashMap: void <init>(int,float)>(20, 0.75F);

        return;
    }

    public void <init>(int)
    {
        int i0;
        org.apache.commons.lang.IntHashMap r0;

        r0 := @this: org.apache.commons.lang.IntHashMap;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.commons.lang.IntHashMap: void <init>(int,float)>(i0, 0.75F);

        return;
    }

    public void <init>(int, float)
    {
        org.apache.commons.lang.IntHashMap r0;
        byte $b0;
        org.apache.commons.lang.IntHashMap$Entry[] $r1;
        java.lang.StringBuffer $r4, $r5, $r9, $r10, $r12, $r14;
        int $i1, i2, $i3;
        java.lang.String $r6, $r11;
        java.lang.IllegalArgumentException $r13, $r15;
        float f0, $f1, $f2;

        r0 := @this: org.apache.commons.lang.IntHashMap;

        i2 := @parameter0: int;

        f0 := @parameter1: float;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if i2 >= 0 goto label1;

        $r13 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Illegal Capacity: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r13;

     label1:
        $b0 = f0 cmpg 0.0F;

        $i3 = (int) $b0;

        if $i3 > 0 goto label2;

        $r15 = new java.lang.IllegalArgumentException;

        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Illegal Load: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(float)>(f0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r15;

     label2:
        if i2 != 0 goto label3;

        i2 = 1;

     label3:
        r0.<org.apache.commons.lang.IntHashMap: float loadFactor> = f0;

        $r1 = newarray (org.apache.commons.lang.IntHashMap$Entry)[i2];

        r0.<org.apache.commons.lang.IntHashMap: org.apache.commons.lang.IntHashMap$Entry[] table> = $r1;

        $f1 = (float) i2;

        $f2 = $f1 * f0;

        $i1 = (int) $f2;

        r0.<org.apache.commons.lang.IntHashMap: int threshold> = $i1;

        return;
    }

    public int size()
    {
        int $i0;
        org.apache.commons.lang.IntHashMap r0;

        r0 := @this: org.apache.commons.lang.IntHashMap;

        $i0 = r0.<org.apache.commons.lang.IntHashMap: int count>;

        return $i0;
    }

    public boolean isEmpty()
    {
        int $i0;
        org.apache.commons.lang.IntHashMap r0;
        boolean $z0;

        r0 := @this: org.apache.commons.lang.IntHashMap;

        $i0 = r0.<org.apache.commons.lang.IntHashMap: int count>;

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean contains(java.lang.Object)
    {
        org.apache.commons.lang.IntHashMap$Entry r5;
        java.lang.NullPointerException $r4;
        org.apache.commons.lang.IntHashMap r1;
        org.apache.commons.lang.IntHashMap$Entry[] r2;
        int $i0, $i1, i2;
        java.lang.Object r0, $r3;
        boolean $z0;

        r1 := @this: org.apache.commons.lang.IntHashMap;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>()>();

        throw $r4;

     label1:
        r2 = r1.<org.apache.commons.lang.IntHashMap: org.apache.commons.lang.IntHashMap$Entry[] table>;

        i2 = lengthof r2;

     label2:
        $i0 = i2;

        $i1 = i2 - 1;

        i2 = $i1;

        if $i0 <= 0 goto label6;

        r5 = r2[$i1];

     label3:
        if r5 == null goto label5;

        $r3 = r5.<org.apache.commons.lang.IntHashMap$Entry: java.lang.Object value>;

        $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label4;

        return 1;

     label4:
        r5 = r5.<org.apache.commons.lang.IntHashMap$Entry: org.apache.commons.lang.IntHashMap$Entry next>;

        goto label3;

     label5:
        goto label2;

     label6:
        return 0;
    }

    public boolean containsValue(java.lang.Object)
    {
        java.lang.Object r1;
        org.apache.commons.lang.IntHashMap r0;
        boolean $z0;

        r0 := @this: org.apache.commons.lang.IntHashMap;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<org.apache.commons.lang.IntHashMap: boolean contains(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean containsKey(int)
    {
        org.apache.commons.lang.IntHashMap$Entry r2;
        org.apache.commons.lang.IntHashMap r0;
        org.apache.commons.lang.IntHashMap$Entry[] r1;
        int i0, $i1, $i2, i3, $i4;

        r0 := @this: org.apache.commons.lang.IntHashMap;

        i0 := @parameter0: int;

        r1 = r0.<org.apache.commons.lang.IntHashMap: org.apache.commons.lang.IntHashMap$Entry[] table>;

        $i2 = i0 & 2147483647;

        $i1 = lengthof r1;

        i3 = $i2 % $i1;

        r2 = r1[i3];

     label1:
        if r2 == null goto label3;

        $i4 = r2.<org.apache.commons.lang.IntHashMap$Entry: int hash>;

        if $i4 != i0 goto label2;

        return 1;

     label2:
        r2 = r2.<org.apache.commons.lang.IntHashMap$Entry: org.apache.commons.lang.IntHashMap$Entry next>;

        goto label1;

     label3:
        return 0;
    }

    public java.lang.Object get(int)
    {
        org.apache.commons.lang.IntHashMap$Entry r3;
        org.apache.commons.lang.IntHashMap r0;
        org.apache.commons.lang.IntHashMap$Entry[] r1;
        int i0, $i1, $i2, i3, $i4;
        java.lang.Object $r2;

        r0 := @this: org.apache.commons.lang.IntHashMap;

        i0 := @parameter0: int;

        r1 = r0.<org.apache.commons.lang.IntHashMap: org.apache.commons.lang.IntHashMap$Entry[] table>;

        $i2 = i0 & 2147483647;

        $i1 = lengthof r1;

        i3 = $i2 % $i1;

        r3 = r1[i3];

     label1:
        if r3 == null goto label3;

        $i4 = r3.<org.apache.commons.lang.IntHashMap$Entry: int hash>;

        if $i4 != i0 goto label2;

        $r2 = r3.<org.apache.commons.lang.IntHashMap$Entry: java.lang.Object value>;

        return $r2;

     label2:
        r3 = r3.<org.apache.commons.lang.IntHashMap$Entry: org.apache.commons.lang.IntHashMap$Entry next>;

        goto label1;

     label3:
        return null;
    }

    protected void rehash()
    {
        org.apache.commons.lang.IntHashMap$Entry r4, $r5, r6;
        org.apache.commons.lang.IntHashMap r0;
        org.apache.commons.lang.IntHashMap$Entry[] $r1, r2, r3;
        int i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, i8, i9;
        float $f0, $f1, $f2;

        r0 := @this: org.apache.commons.lang.IntHashMap;

        $r1 = r0.<org.apache.commons.lang.IntHashMap: org.apache.commons.lang.IntHashMap$Entry[] table>;

        i0 = lengthof $r1;

        r2 = r0.<org.apache.commons.lang.IntHashMap: org.apache.commons.lang.IntHashMap$Entry[] table>;

        $i1 = i0 * 2;

        i2 = $i1 + 1;

        r3 = newarray (org.apache.commons.lang.IntHashMap$Entry)[i2];

        $f1 = (float) i2;

        $f0 = r0.<org.apache.commons.lang.IntHashMap: float loadFactor>;

        $f2 = $f1 * $f0;

        $i3 = (int) $f2;

        r0.<org.apache.commons.lang.IntHashMap: int threshold> = $i3;

        r0.<org.apache.commons.lang.IntHashMap: org.apache.commons.lang.IntHashMap$Entry[] table> = r3;

        i9 = i0;

     label1:
        $i4 = i9;

        $i5 = i9 - 1;

        i9 = $i5;

        if $i4 <= 0 goto label4;

        r6 = r2[$i5];

     label2:
        if r6 == null goto label3;

        r4 = r6;

        r6 = r6.<org.apache.commons.lang.IntHashMap$Entry: org.apache.commons.lang.IntHashMap$Entry next>;

        $i6 = r4.<org.apache.commons.lang.IntHashMap$Entry: int hash>;

        $i7 = $i6 & 2147483647;

        i8 = $i7 % i2;

        $r5 = r3[i8];

        r4.<org.apache.commons.lang.IntHashMap$Entry: org.apache.commons.lang.IntHashMap$Entry next> = $r5;

        r3[i8] = r4;

        goto label2;

     label3:
        goto label1;

     label4:
        return;
    }

    public java.lang.Object put(int, java.lang.Object)
    {
        org.apache.commons.lang.IntHashMap$Entry $r1, $r3, r6;
        org.apache.commons.lang.IntHashMap r0;
        org.apache.commons.lang.IntHashMap$Entry[] r5;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10;
        java.lang.Object r2, r4;

        r0 := @this: org.apache.commons.lang.IntHashMap;

        i0 := @parameter0: int;

        r2 := @parameter1: java.lang.Object;

        r5 = r0.<org.apache.commons.lang.IntHashMap: org.apache.commons.lang.IntHashMap$Entry[] table>;

        $i2 = i0 & 2147483647;

        $i1 = lengthof r5;

        i10 = $i2 % $i1;

        r6 = r5[i10];

     label1:
        if r6 == null goto label3;

        $i9 = r6.<org.apache.commons.lang.IntHashMap$Entry: int hash>;

        if $i9 != i0 goto label2;

        r4 = r6.<org.apache.commons.lang.IntHashMap$Entry: java.lang.Object value>;

        r6.<org.apache.commons.lang.IntHashMap$Entry: java.lang.Object value> = r2;

        return r4;

     label2:
        r6 = r6.<org.apache.commons.lang.IntHashMap$Entry: org.apache.commons.lang.IntHashMap$Entry next>;

        goto label1;

     label3:
        $i4 = r0.<org.apache.commons.lang.IntHashMap: int count>;

        $i3 = r0.<org.apache.commons.lang.IntHashMap: int threshold>;

        if $i4 < $i3 goto label4;

        virtualinvoke r0.<org.apache.commons.lang.IntHashMap: void rehash()>();

        r5 = r0.<org.apache.commons.lang.IntHashMap: org.apache.commons.lang.IntHashMap$Entry[] table>;

        $i8 = i0 & 2147483647;

        $i7 = lengthof r5;

        i10 = $i8 % $i7;

     label4:
        $r1 = new org.apache.commons.lang.IntHashMap$Entry;

        $r3 = r5[i10];

        specialinvoke $r1.<org.apache.commons.lang.IntHashMap$Entry: void <init>(int,int,java.lang.Object,org.apache.commons.lang.IntHashMap$Entry)>(i0, i0, r2, $r3);

        r5[i10] = $r1;

        $i5 = r0.<org.apache.commons.lang.IntHashMap: int count>;

        $i6 = $i5 + 1;

        r0.<org.apache.commons.lang.IntHashMap: int count> = $i6;

        return null;
    }

    public java.lang.Object remove(int)
    {
        org.apache.commons.lang.IntHashMap$Entry $r2, $r3, r5, r6;
        org.apache.commons.lang.IntHashMap r0;
        org.apache.commons.lang.IntHashMap$Entry[] r1;
        int i0, $i1, $i2, i3, $i4, $i5, $i6;
        java.lang.Object $r4;

        r0 := @this: org.apache.commons.lang.IntHashMap;

        i0 := @parameter0: int;

        r1 = r0.<org.apache.commons.lang.IntHashMap: org.apache.commons.lang.IntHashMap$Entry[] table>;

        $i2 = i0 & 2147483647;

        $i1 = lengthof r1;

        i3 = $i2 % $i1;

        r5 = r1[i3];

        r6 = null;

     label1:
        if r5 == null goto label5;

        $i4 = r5.<org.apache.commons.lang.IntHashMap$Entry: int hash>;

        if $i4 != i0 goto label4;

        if r6 == null goto label2;

        $r3 = r5.<org.apache.commons.lang.IntHashMap$Entry: org.apache.commons.lang.IntHashMap$Entry next>;

        r6.<org.apache.commons.lang.IntHashMap$Entry: org.apache.commons.lang.IntHashMap$Entry next> = $r3;

        goto label3;

     label2:
        $r2 = r5.<org.apache.commons.lang.IntHashMap$Entry: org.apache.commons.lang.IntHashMap$Entry next>;

        r1[i3] = $r2;

     label3:
        $i5 = r0.<org.apache.commons.lang.IntHashMap: int count>;

        $i6 = $i5 - 1;

        r0.<org.apache.commons.lang.IntHashMap: int count> = $i6;

        $r4 = r5.<org.apache.commons.lang.IntHashMap$Entry: java.lang.Object value>;

        r5.<org.apache.commons.lang.IntHashMap$Entry: java.lang.Object value> = null;

        return $r4;

     label4:
        r6 = r5;

        r5 = r5.<org.apache.commons.lang.IntHashMap$Entry: org.apache.commons.lang.IntHashMap$Entry next>;

        goto label1;

     label5:
        return null;
    }

    public synchronized void clear()
    {
        org.apache.commons.lang.IntHashMap r0;
        org.apache.commons.lang.IntHashMap$Entry[] r1;
        int i0, $i2;

        r0 := @this: org.apache.commons.lang.IntHashMap;

        r1 = r0.<org.apache.commons.lang.IntHashMap: org.apache.commons.lang.IntHashMap$Entry[] table>;

        i0 = lengthof r1;

     label1:
        $i2 = (int) -1;

        i0 = i0 + $i2;

        if i0 < 0 goto label2;

        r1[i0] = null;

        goto label1;

     label2:
        r0.<org.apache.commons.lang.IntHashMap: int count> = 0;

        return;
    }
}
