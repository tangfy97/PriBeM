class org.apache.ws.commons.schema.SchemaBuilder$2 extends java.lang.Object implements org.apache.ws.commons.schema.utils.TargetNamespaceValidator
{
    final org.apache.ws.commons.schema.XmlSchema val$schema;
    final org.apache.ws.commons.schema.SchemaBuilder this$0;

    void <init>(org.apache.ws.commons.schema.SchemaBuilder, org.apache.ws.commons.schema.XmlSchema)
    {
        org.apache.ws.commons.schema.SchemaBuilder$2 r0;
        org.apache.ws.commons.schema.XmlSchema r2;
        org.apache.ws.commons.schema.SchemaBuilder r1;

        r0 := @this: org.apache.ws.commons.schema.SchemaBuilder$2;

        r1 := @parameter0: org.apache.ws.commons.schema.SchemaBuilder;

        r2 := @parameter1: org.apache.ws.commons.schema.XmlSchema;

        r0.<org.apache.ws.commons.schema.SchemaBuilder$2: org.apache.ws.commons.schema.SchemaBuilder this$0> = r1;

        r0.<org.apache.ws.commons.schema.SchemaBuilder$2: org.apache.ws.commons.schema.XmlSchema val$schema> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void validate(org.apache.ws.commons.schema.XmlSchema)
    {
        org.apache.ws.commons.schema.SchemaBuilder$2 r0;
        org.apache.ws.commons.schema.XmlSchemaException $r8;
        org.apache.ws.commons.schema.XmlSchema r1, $r4, $r6, $r18, $r21;
        java.lang.String $r2, $r3, $r5, $r7, $r12, $r14, $r19, $r22, r23;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r9, $r10, $r11, $r13, $r15, $r16, $r17, $r20;

        r0 := @this: org.apache.ws.commons.schema.SchemaBuilder$2;

        r1 := @parameter0: org.apache.ws.commons.schema.XmlSchema;

        $r2 = virtualinvoke r1.<org.apache.ws.commons.schema.XmlSchema: java.lang.String getSyntacticalTargetNamespace()>();

        $z0 = specialinvoke r0.<org.apache.ws.commons.schema.SchemaBuilder$2: boolean isEmpty(java.lang.String)>($r2);

        if $z0 == 0 goto label1;

        $r21 = r0.<org.apache.ws.commons.schema.SchemaBuilder$2: org.apache.ws.commons.schema.XmlSchema val$schema>;

        $r22 = virtualinvoke $r21.<org.apache.ws.commons.schema.XmlSchema: java.lang.String getLogicalTargetNamespace()>();

        virtualinvoke r1.<org.apache.ws.commons.schema.XmlSchema: void setLogicalTargetNamespace(java.lang.String)>($r22);

        goto label3;

     label1:
        $r3 = virtualinvoke r1.<org.apache.ws.commons.schema.XmlSchema: java.lang.String getSyntacticalTargetNamespace()>();

        $r4 = r0.<org.apache.ws.commons.schema.SchemaBuilder$2: org.apache.ws.commons.schema.XmlSchema val$schema>;

        $r5 = virtualinvoke $r4.<org.apache.ws.commons.schema.XmlSchema: java.lang.String getLogicalTargetNamespace()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z1 != 0 goto label3;

        r23 = "An included schema was announced to have the default target namespace";

        $r6 = r0.<org.apache.ws.commons.schema.SchemaBuilder$2: org.apache.ws.commons.schema.XmlSchema val$schema>;

        $r7 = virtualinvoke $r6.<org.apache.ws.commons.schema.XmlSchema: java.lang.String getLogicalTargetNamespace()>();

        $z2 = specialinvoke r0.<org.apache.ws.commons.schema.SchemaBuilder$2: boolean isEmpty(java.lang.String)>($r7);

        if $z2 != 0 goto label2;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("An included schema was announced to have the default target namespace");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" or the target namespace ");

        $r18 = r0.<org.apache.ws.commons.schema.SchemaBuilder$2: org.apache.ws.commons.schema.XmlSchema val$schema>;

        $r19 = virtualinvoke $r18.<org.apache.ws.commons.schema.XmlSchema: java.lang.String getLogicalTargetNamespace()>();

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        $r8 = new org.apache.ws.commons.schema.XmlSchemaException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r23);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", but has the target namespace ");

        $r12 = virtualinvoke r1.<org.apache.ws.commons.schema.XmlSchema: java.lang.String getLogicalTargetNamespace()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<org.apache.ws.commons.schema.XmlSchemaException: void <init>(java.lang.String)>($r14);

        throw $r8;

     label3:
        return;
    }

    private boolean isEmpty(java.lang.String)
    {
        org.apache.ws.commons.schema.SchemaBuilder$2 r2;
        java.lang.String r0, $r1;
        boolean $z0, $z1;

        r2 := @this: org.apache.ws.commons.schema.SchemaBuilder$2;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $r1 = "";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }
}
