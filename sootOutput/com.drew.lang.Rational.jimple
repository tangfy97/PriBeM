public class com.drew.lang.Rational extends java.lang.Number implements java.io.Serializable
{
    private static final long serialVersionUID;
    private final long _numerator;
    private final long _denominator;

    public void <init>(long, long)
    {
        com.drew.lang.Rational r0;
        long l0, l1;

        r0 := @this: com.drew.lang.Rational;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        specialinvoke r0.<java.lang.Number: void <init>()>();

        r0.<com.drew.lang.Rational: long _numerator> = l0;

        r0.<com.drew.lang.Rational: long _denominator> = l1;

        return;
    }

    public double doubleValue()
    {
        com.drew.lang.Rational r0;
        long $l0, $l1;
        double $d0, $d1, $d2;

        r0 := @this: com.drew.lang.Rational;

        $l0 = r0.<com.drew.lang.Rational: long _numerator>;

        $d1 = (double) $l0;

        $l1 = r0.<com.drew.lang.Rational: long _denominator>;

        $d0 = (double) $l1;

        $d2 = $d1 / $d0;

        return $d2;
    }

    public float floatValue()
    {
        com.drew.lang.Rational r0;
        float $f0, $f1, $f2;
        long $l0, $l1;

        r0 := @this: com.drew.lang.Rational;

        $l0 = r0.<com.drew.lang.Rational: long _numerator>;

        $f1 = (float) $l0;

        $l1 = r0.<com.drew.lang.Rational: long _denominator>;

        $f0 = (float) $l1;

        $f2 = $f1 / $f0;

        return $f2;
    }

    public final byte byteValue()
    {
        byte $b1;
        int $i0;
        com.drew.lang.Rational r0;
        double $d0;

        r0 := @this: com.drew.lang.Rational;

        $d0 = virtualinvoke r0.<com.drew.lang.Rational: double doubleValue()>();

        $i0 = (int) $d0;

        $b1 = (byte) $i0;

        return $b1;
    }

    public final int intValue()
    {
        int $i0;
        com.drew.lang.Rational r0;
        double $d0;

        r0 := @this: com.drew.lang.Rational;

        $d0 = virtualinvoke r0.<com.drew.lang.Rational: double doubleValue()>();

        $i0 = (int) $d0;

        return $i0;
    }

    public final long longValue()
    {
        com.drew.lang.Rational r0;
        long $l0;
        double $d0;

        r0 := @this: com.drew.lang.Rational;

        $d0 = virtualinvoke r0.<com.drew.lang.Rational: double doubleValue()>();

        $l0 = (long) $d0;

        return $l0;
    }

    public final short shortValue()
    {
        short $s1;
        int $i0;
        com.drew.lang.Rational r0;
        double $d0;

        r0 := @this: com.drew.lang.Rational;

        $d0 = virtualinvoke r0.<com.drew.lang.Rational: double doubleValue()>();

        $i0 = (int) $d0;

        $s1 = (short) $i0;

        return $s1;
    }

    public final long getDenominator()
    {
        com.drew.lang.Rational r0;
        long $l0;

        r0 := @this: com.drew.lang.Rational;

        $l0 = r0.<com.drew.lang.Rational: long _denominator>;

        return $l0;
    }

    public final long getNumerator()
    {
        com.drew.lang.Rational r0;
        long $l0;

        r0 := @this: com.drew.lang.Rational;

        $l0 = r0.<com.drew.lang.Rational: long _numerator>;

        return $l0;
    }

    public com.drew.lang.Rational getReciprocal()
    {
        com.drew.lang.Rational $r0, r1;
        long $l0, $l1;

        r1 := @this: com.drew.lang.Rational;

        $r0 = new com.drew.lang.Rational;

        $l1 = r1.<com.drew.lang.Rational: long _denominator>;

        $l0 = r1.<com.drew.lang.Rational: long _numerator>;

        specialinvoke $r0.<com.drew.lang.Rational: void <init>(long,long)>($l1, $l0);

        return $r0;
    }

    public boolean isInteger()
    {
        long $l0, $l2, $l4, $l6, $l8, $l9, $l10;
        byte $b1, $b3, $b5, $b7, $b11;
        com.drew.lang.Rational r0;
        boolean $z0;

        r0 := @this: com.drew.lang.Rational;

        $l0 = r0.<com.drew.lang.Rational: long _denominator>;

        $b1 = $l0 cmp 1L;

        if $b1 == 0 goto label2;

        $l2 = r0.<com.drew.lang.Rational: long _denominator>;

        $b3 = $l2 cmp 0L;

        if $b3 == 0 goto label1;

        $l9 = r0.<com.drew.lang.Rational: long _numerator>;

        $l8 = r0.<com.drew.lang.Rational: long _denominator>;

        $l10 = $l9 % $l8;

        $b11 = $l10 cmp 0L;

        if $b11 == 0 goto label2;

     label1:
        $l4 = r0.<com.drew.lang.Rational: long _denominator>;

        $b5 = $l4 cmp 0L;

        if $b5 != 0 goto label3;

        $l6 = r0.<com.drew.lang.Rational: long _numerator>;

        $b7 = $l6 cmp 0L;

        if $b7 != 0 goto label3;

     label2:
        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    public java.lang.String toString()
    {
        long $l0, $l1;
        com.drew.lang.Rational r1;
        java.lang.StringBuilder $r0, $r2, $r3, $r4;
        java.lang.String $r5;

        r1 := @this: com.drew.lang.Rational;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $l0 = r1.<com.drew.lang.Rational: long _numerator>;

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $l1 = r1.<com.drew.lang.Rational: long _denominator>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public java.lang.String toSimpleString(boolean)
    {
        long $l0, $l2, $l5, $l6, $l7, $l9, $l10, $l12, l14;
        byte $b1, $b3, $b8, $b13;
        int $i4, $i11;
        java.lang.String $r2, $r3, $r5, $r6, $r7;
        boolean $z0, z1;
        double $d0;
        com.drew.lang.Rational r0, $r1, $r4;

        r0 := @this: com.drew.lang.Rational;

        z1 := @parameter0: boolean;

        $l0 = r0.<com.drew.lang.Rational: long _denominator>;

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        $l12 = r0.<com.drew.lang.Rational: long _numerator>;

        $b13 = $l12 cmp 0L;

        if $b13 == 0 goto label1;

        $r7 = virtualinvoke r0.<com.drew.lang.Rational: java.lang.String toString()>();

        return $r7;

     label1:
        $z0 = virtualinvoke r0.<com.drew.lang.Rational: boolean isInteger()>();

        if $z0 == 0 goto label2;

        $i11 = virtualinvoke r0.<com.drew.lang.Rational: int intValue()>();

        $r6 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i11);

        return $r6;

     label2:
        $l2 = r0.<com.drew.lang.Rational: long _numerator>;

        $b3 = $l2 cmp 1L;

        if $b3 == 0 goto label3;

        $l6 = r0.<com.drew.lang.Rational: long _denominator>;

        $l5 = r0.<com.drew.lang.Rational: long _numerator>;

        $l7 = $l6 % $l5;

        $b8 = $l7 cmp 0L;

        if $b8 != 0 goto label3;

        $l10 = r0.<com.drew.lang.Rational: long _denominator>;

        $l9 = r0.<com.drew.lang.Rational: long _numerator>;

        l14 = $l10 / $l9;

        $r4 = new com.drew.lang.Rational;

        specialinvoke $r4.<com.drew.lang.Rational: void <init>(long,long)>(1L, l14);

        $r5 = virtualinvoke $r4.<com.drew.lang.Rational: java.lang.String toSimpleString(boolean)>(z1);

        return $r5;

     label3:
        $r1 = virtualinvoke r0.<com.drew.lang.Rational: com.drew.lang.Rational getSimplifiedInstance()>();

        if z1 == 0 goto label4;

        $d0 = virtualinvoke $r1.<com.drew.lang.Rational: double doubleValue()>();

        $r3 = staticinvoke <java.lang.Double: java.lang.String toString(double)>($d0);

        $i4 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i4 >= 5 goto label4;

        return $r3;

     label4:
        $r2 = virtualinvoke $r1.<com.drew.lang.Rational: java.lang.String toString()>();

        return $r2;
    }

    private boolean tooComplexForSimplification()
    {
        long $l0, $l1, $l2, $l3;
        byte $b4;
        int $i5;
        com.drew.lang.Rational r0;
        double $d0, $d1, d2;
        boolean $z0;

        r0 := @this: com.drew.lang.Rational;

        $l1 = r0.<com.drew.lang.Rational: long _denominator>;

        $l0 = r0.<com.drew.lang.Rational: long _numerator>;

        $l2 = staticinvoke <java.lang.Math: long min(long,long)>($l1, $l0);

        $l3 = $l2 - 1L;

        $d0 = (double) $l3;

        $d1 = $d0 / 5.0;

        d2 = $d1 + 2.0;

        $b4 = d2 cmpl 1000.0;

        $i5 = (int) $b4;

        if $i5 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean equals(java.lang.Object)
    {
        byte $b0;
        com.drew.lang.Rational r1, r2;
        java.lang.Object r0;
        boolean $z0, $z1;
        double $d0, $d1;

        r2 := @this: com.drew.lang.Rational;

        r0 := @parameter0: java.lang.Object;

        if r0 == null goto label1;

        $z0 = r0 instanceof com.drew.lang.Rational;

        if $z0 != 0 goto label2;

     label1:
        return 0;

     label2:
        r1 = (com.drew.lang.Rational) r0;

        $d0 = virtualinvoke r2.<com.drew.lang.Rational: double doubleValue()>();

        $d1 = virtualinvoke r1.<com.drew.lang.Rational: double doubleValue()>();

        $b0 = $d0 cmpl $d1;

        if $b0 != 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        return $z1;
    }

    public int hashCode()
    {
        int $i1, $i3, $i4, $i5;
        com.drew.lang.Rational r0;
        long $l0, $l2;

        r0 := @this: com.drew.lang.Rational;

        $l0 = r0.<com.drew.lang.Rational: long _denominator>;

        $i1 = (int) $l0;

        $i4 = 23 * $i1;

        $l2 = r0.<com.drew.lang.Rational: long _numerator>;

        $i3 = (int) $l2;

        $i5 = $i4 + $i3;

        return $i5;
    }

    public com.drew.lang.Rational getSimplifiedInstance()
    {
        long $l0, $l1, $l2, $l3, $l7, $l8, $l9, $l11, $l12, $l13, $l15, $l16, $l17, $l18, $l19, $l20;
        byte $b4, $b10, $b14;
        int $i5, $i6, i21, $i22;
        boolean $z0;
        com.drew.lang.Rational r0, $r2;

        r0 := @this: com.drew.lang.Rational;

        $z0 = specialinvoke r0.<com.drew.lang.Rational: boolean tooComplexForSimplification()>();

        if $z0 == 0 goto label1;

        return r0;

     label1:
        i21 = 2;

     label2:
        $l2 = (long) i21;

        $l1 = r0.<com.drew.lang.Rational: long _denominator>;

        $l0 = r0.<com.drew.lang.Rational: long _numerator>;

        $l3 = staticinvoke <java.lang.Math: long min(long,long)>($l1, $l0);

        $b4 = $l2 cmp $l3;

        $i22 = (int) $b4;

        if $i22 > 0 goto label6;

        $i5 = i21 % 2;

        if $i5 != 0 goto label3;

        if i21 > 2 goto label5;

     label3:
        $i6 = i21 % 5;

        if $i6 != 0 goto label4;

        if i21 <= 5 goto label4;

        goto label5;

     label4:
        $l8 = r0.<com.drew.lang.Rational: long _denominator>;

        $l7 = (long) i21;

        $l9 = $l8 % $l7;

        $b10 = $l9 cmp 0L;

        if $b10 != 0 goto label5;

        $l12 = r0.<com.drew.lang.Rational: long _numerator>;

        $l11 = (long) i21;

        $l13 = $l12 % $l11;

        $b14 = $l13 cmp 0L;

        if $b14 != 0 goto label5;

        $r2 = new com.drew.lang.Rational;

        $l16 = r0.<com.drew.lang.Rational: long _numerator>;

        $l15 = (long) i21;

        $l20 = $l16 / $l15;

        $l18 = r0.<com.drew.lang.Rational: long _denominator>;

        $l17 = (long) i21;

        $l19 = $l18 / $l17;

        specialinvoke $r2.<com.drew.lang.Rational: void <init>(long,long)>($l20, $l19);

        return $r2;

     label5:
        i21 = i21 + 1;

        goto label2;

     label6:
        return r0;
    }

    public static void <clinit>()
    {
        <com.drew.lang.Rational: long serialVersionUID> = 510688928138848770L;

        return;
    }
}
