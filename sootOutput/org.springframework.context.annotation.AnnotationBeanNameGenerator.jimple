public class org.springframework.context.'annotation'.AnnotationBeanNameGenerator extends java.lang.Object implements org.springframework.beans.factory.support.BeanNameGenerator
{
    private static final java.lang.String COMPONENT_ANNOTATION_CLASSNAME;

    public void <init>()
    {
        org.springframework.context.'annotation'.AnnotationBeanNameGenerator r0;

        r0 := @this: org.springframework.context.'annotation'.AnnotationBeanNameGenerator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.String generateBeanName(org.springframework.beans.factory.config.BeanDefinition, org.springframework.beans.factory.support.BeanDefinitionRegistry)
    {
        org.springframework.beans.factory.'annotation'.AnnotatedBeanDefinition $r3;
        org.springframework.beans.factory.support.BeanDefinitionRegistry r5;
        org.springframework.context.'annotation'.AnnotationBeanNameGenerator r1;
        org.springframework.beans.factory.config.BeanDefinition r0;
        java.lang.String $r2, $r4;
        boolean $z0, $z1;

        r1 := @this: org.springframework.context.'annotation'.AnnotationBeanNameGenerator;

        r0 := @parameter0: org.springframework.beans.factory.config.BeanDefinition;

        r5 := @parameter1: org.springframework.beans.factory.support.BeanDefinitionRegistry;

        $z0 = r0 instanceof org.springframework.beans.factory.'annotation'.AnnotatedBeanDefinition;

        if $z0 == 0 goto label1;

        $r3 = (org.springframework.beans.factory.'annotation'.AnnotatedBeanDefinition) r0;

        $r4 = virtualinvoke r1.<org.springframework.context.'annotation'.AnnotationBeanNameGenerator: java.lang.String determineBeanNameFromAnnotation(org.springframework.beans.factory.'annotation'.AnnotatedBeanDefinition)>($r3);

        $z1 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>($r4);

        if $z1 == 0 goto label1;

        return $r4;

     label1:
        $r2 = virtualinvoke r1.<org.springframework.context.'annotation'.AnnotationBeanNameGenerator: java.lang.String buildDefaultBeanName(org.springframework.beans.factory.config.BeanDefinition)>(r0);

        return $r2;
    }

    protected java.lang.String determineBeanNameFromAnnotation(org.springframework.beans.factory.'annotation'.AnnotatedBeanDefinition)
    {
        java.lang.IllegalStateException $r11;
        org.springframework.beans.factory.'annotation'.AnnotatedBeanDefinition r0;
        org.springframework.context.'annotation'.AnnotationBeanNameGenerator r7;
        java.util.Map $r6;
        java.lang.String r5, r10, $r17, r18;
        boolean $z0, $z1, $z2, $z3;
        java.util.Iterator $r3;
        org.springframework.core.type.AnnotationMetadata $r1;
        java.util.Set $r2, $r8;
        java.lang.Object $r4, $r9;
        java.lang.StringBuilder $r12, $r13, $r14, $r15, $r16;

        r7 := @this: org.springframework.context.'annotation'.AnnotationBeanNameGenerator;

        r0 := @parameter0: org.springframework.beans.factory.'annotation'.AnnotatedBeanDefinition;

        $r1 = interfaceinvoke r0.<org.springframework.beans.factory.'annotation'.AnnotatedBeanDefinition: org.springframework.core.type.AnnotationMetadata getMetadata()>();

        $r2 = interfaceinvoke $r1.<org.springframework.core.type.AnnotationMetadata: java.util.Set getAnnotationTypes()>();

        r18 = null;

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        goto label3;

     label1:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r4;

        $r6 = interfaceinvoke $r1.<org.springframework.core.type.AnnotationMetadata: java.util.Map getAnnotationAttributes(java.lang.String)>(r5);

        $r8 = interfaceinvoke $r1.<org.springframework.core.type.AnnotationMetadata: java.util.Set getMetaAnnotationTypes(java.lang.String)>(r5);

        $z0 = virtualinvoke r7.<org.springframework.context.'annotation'.AnnotationBeanNameGenerator: boolean isStereotypeWithNameValue(java.lang.String,java.util.Set,java.util.Map)>(r5, $r8, $r6);

        if $z0 == 0 goto label3;

        $r9 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>("value");

        r10 = (java.lang.String) $r9;

        $z1 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>(r10);

        if $z1 == 0 goto label3;

        if r18 == null goto label2;

        $z2 = virtualinvoke r10.<java.lang.String: boolean equals(java.lang.Object)>(r18);

        if $z2 != 0 goto label2;

        $r11 = new java.lang.IllegalStateException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("Stereotype annotations suggest inconsistent component names: \'");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r18);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' versus \'");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r17);

        throw $r11;

     label2:
        r18 = r10;

     label3:
        $z3 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z3 != 0 goto label1;

        return r18;
    }

    protected boolean isStereotypeWithNameValue(java.lang.String, java.util.Set, java.util.Map)
    {
        java.util.Set r2;
        org.springframework.context.'annotation'.AnnotationBeanNameGenerator r3;
        java.util.Map r1;
        java.lang.String r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r3 := @this: org.springframework.context.'annotation'.AnnotationBeanNameGenerator;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Set;

        r1 := @parameter2: java.util.Map;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("org.springframework.stereotype.Component");

        if $z0 != 0 goto label2;

        if r2 == null goto label1;

        $z4 = interfaceinvoke r2.<java.util.Set: boolean contains(java.lang.Object)>("org.springframework.stereotype.Component");

        if $z4 != 0 goto label2;

     label1:
        $z2 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("javax.annotation.ManagedBean");

        if $z2 != 0 goto label2;

        $z3 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("javax.inject.Named");

        if $z3 != 0 goto label2;

        $z5 = 0;

        goto label3;

     label2:
        $z5 = 1;

     label3:
        if $z5 == 0 goto label4;

        if r1 == null goto label4;

        $z1 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>("value");

        if $z1 == 0 goto label4;

        return 1;

     label4:
        return 0;
    }

    protected java.lang.String buildDefaultBeanName(org.springframework.beans.factory.config.BeanDefinition)
    {
        org.springframework.context.'annotation'.AnnotationBeanNameGenerator r4;
        org.springframework.beans.factory.config.BeanDefinition r0;
        java.lang.String $r1, $r2, $r3;

        r4 := @this: org.springframework.context.'annotation'.AnnotationBeanNameGenerator;

        r0 := @parameter0: org.springframework.beans.factory.config.BeanDefinition;

        $r1 = interfaceinvoke r0.<org.springframework.beans.factory.config.BeanDefinition: java.lang.String getBeanClassName()>();

        $r2 = staticinvoke <org.springframework.util.ClassUtils: java.lang.String getShortName(java.lang.String)>($r1);

        $r3 = staticinvoke <java.beans.Introspector: java.lang.String decapitalize(java.lang.String)>($r2);

        return $r3;
    }

    public static void <clinit>()
    {
        <org.springframework.context.'annotation'.AnnotationBeanNameGenerator: java.lang.String COMPONENT_ANNOTATION_CLASSNAME> = "org.springframework.stereotype.Component";

        return;
    }
}
