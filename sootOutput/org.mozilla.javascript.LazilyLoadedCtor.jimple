public final class org.mozilla.javascript.LazilyLoadedCtor extends java.lang.Object
{
    private static java.lang.reflect.Method getter;
    private static java.lang.reflect.Method setter;
    private java.lang.String ctorName;
    private java.lang.String className;
    private boolean sealed;
    private boolean isReplaced;

    public void <init>(org.mozilla.javascript.ScriptableObject, java.lang.String, java.lang.String, boolean)
    {
        org.mozilla.javascript.LazilyLoadedCtor r0;
        java.lang.reflect.Method[] $r8;
        org.mozilla.javascript.ScriptableObject r4;
        java.lang.Class $r7;
        java.lang.String r1, r2;
        java.lang.reflect.Method $r3, $r5, $r6, $r9, $r10;
        boolean z0;

        r0 := @this: org.mozilla.javascript.LazilyLoadedCtor;

        r4 := @parameter0: org.mozilla.javascript.ScriptableObject;

        r2 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.mozilla.javascript.LazilyLoadedCtor: java.lang.String className> = r1;

        r0.<org.mozilla.javascript.LazilyLoadedCtor: java.lang.String ctorName> = r2;

        r0.<org.mozilla.javascript.LazilyLoadedCtor: boolean sealed> = z0;

        $r3 = <org.mozilla.javascript.LazilyLoadedCtor: java.lang.reflect.Method getter>;

        if $r3 != null goto label1;

        $r7 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = staticinvoke <org.mozilla.javascript.FunctionObject: java.lang.reflect.Method[] getMethodList(java.lang.Class)>($r7);

        $r9 = staticinvoke <org.mozilla.javascript.FunctionObject: java.lang.reflect.Method findSingleMethod(java.lang.reflect.Method[],java.lang.String)>($r8, "getProperty");

        <org.mozilla.javascript.LazilyLoadedCtor: java.lang.reflect.Method getter> = $r9;

        $r10 = staticinvoke <org.mozilla.javascript.FunctionObject: java.lang.reflect.Method findSingleMethod(java.lang.reflect.Method[],java.lang.String)>($r8, "setProperty");

        <org.mozilla.javascript.LazilyLoadedCtor: java.lang.reflect.Method setter> = $r10;

     label1:
        $r6 = <org.mozilla.javascript.LazilyLoadedCtor: java.lang.reflect.Method getter>;

        $r5 = <org.mozilla.javascript.LazilyLoadedCtor: java.lang.reflect.Method setter>;

        virtualinvoke r4.<org.mozilla.javascript.ScriptableObject: void defineProperty(java.lang.String,java.lang.Object,java.lang.reflect.Method,java.lang.reflect.Method,int)>(r2, r0, $r6, $r5, 2);

        return;
    }

    public java.lang.Object getProperty(org.mozilla.javascript.ScriptableObject)
    {
        java.lang.Throwable $r8, $r15;
        org.mozilla.javascript.RhinoException $r13;
        java.lang.InstantiationException $r12;
        java.lang.SecurityException $r10;
        java.lang.String $r2, $r4, $r6;
        boolean $z0, $z1, $z2, z3;
        java.lang.IllegalAccessException $r11;
        java.lang.LinkageError $r9;
        java.lang.RuntimeException $r16;
        org.mozilla.javascript.LazilyLoadedCtor r1;
        java.lang.reflect.InvocationTargetException $r14;
        org.mozilla.javascript.ScriptableObject r0;
        java.lang.Object $r3, $r7;
        java.lang.Class $r5;

        r1 := @this: org.mozilla.javascript.LazilyLoadedCtor;

        r0 := @parameter0: org.mozilla.javascript.ScriptableObject;

        entermonitor r0;

     label01:
        $z0 = r1.<org.mozilla.javascript.LazilyLoadedCtor: boolean isReplaced>;

        if $z0 != 0 goto label13;

        z3 = 0;

        $r4 = r1.<org.mozilla.javascript.LazilyLoadedCtor: java.lang.String className>;

        $r5 = staticinvoke <org.mozilla.javascript.Kit: java.lang.Class classOrNull(java.lang.String)>($r4);

        if $r5 != null goto label02;

        z3 = 1;

        goto label11;

     label02:
        $z1 = r1.<org.mozilla.javascript.LazilyLoadedCtor: boolean sealed>;

        staticinvoke <org.mozilla.javascript.ScriptableObject: void defineClass(org.mozilla.javascript.Scriptable,java.lang.Class,boolean)>(r0, $r5, $z1);

        r1.<org.mozilla.javascript.LazilyLoadedCtor: boolean isReplaced> = 1;

     label03:
        goto label11;

     label04:
        $r14 := @caughtexception;

        $r15 = virtualinvoke $r14.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $z2 = $r15 instanceof java.lang.RuntimeException;

        if $z2 == 0 goto label05;

        $r16 = (java.lang.RuntimeException) $r15;

        throw $r16;

     label05:
        z3 = 1;

        goto label11;

     label06:
        $r13 := @caughtexception;

        z3 = 1;

        goto label11;

     label07:
        $r12 := @caughtexception;

        z3 = 1;

        goto label11;

     label08:
        $r11 := @caughtexception;

        z3 = 1;

        goto label11;

     label09:
        $r10 := @caughtexception;

        z3 = 1;

        goto label11;

     label10:
        $r9 := @caughtexception;

        z3 = 1;

     label11:
        if z3 == 0 goto label13;

        $r6 = r1.<org.mozilla.javascript.LazilyLoadedCtor: java.lang.String ctorName>;

        virtualinvoke r0.<org.mozilla.javascript.ScriptableObject: void delete(java.lang.String)>($r6);

        $r7 = <org.mozilla.javascript.Scriptable: java.lang.Object NOT_FOUND>;

        exitmonitor r0;

     label12:
        return $r7;

     label13:
        exitmonitor r0;

     label14:
        goto label17;

     label15:
        $r8 := @caughtexception;

        exitmonitor r0;

     label16:
        throw $r8;

     label17:
        $r2 = r1.<org.mozilla.javascript.LazilyLoadedCtor: java.lang.String ctorName>;

        $r3 = virtualinvoke r0.<org.mozilla.javascript.ScriptableObject: java.lang.Object get(java.lang.String,org.mozilla.javascript.Scriptable)>($r2, r0);

        return $r3;

        catch java.lang.reflect.InvocationTargetException from label02 to label03 with label04;
        catch org.mozilla.javascript.RhinoException from label02 to label03 with label06;
        catch java.lang.InstantiationException from label02 to label03 with label07;
        catch java.lang.IllegalAccessException from label02 to label03 with label08;
        catch java.lang.SecurityException from label02 to label03 with label09;
        catch java.lang.LinkageError from label02 to label03 with label10;
        catch java.lang.Throwable from label01 to label12 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label15 to label16 with label15;
    }

    public java.lang.Object setProperty(org.mozilla.javascript.ScriptableObject, java.lang.Object)
    {
        java.lang.Throwable $r3;
        org.mozilla.javascript.ScriptableObject r0;
        java.lang.Object r2;
        org.mozilla.javascript.LazilyLoadedCtor r1;

        r1 := @this: org.mozilla.javascript.LazilyLoadedCtor;

        r0 := @parameter0: org.mozilla.javascript.ScriptableObject;

        r2 := @parameter1: java.lang.Object;

        entermonitor r0;

     label1:
        r1.<org.mozilla.javascript.LazilyLoadedCtor: boolean isReplaced> = 1;

        exitmonitor r0;

     label2:
        return r2;

     label3:
        $r3 := @caughtexception;

        exitmonitor r0;

     label4:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
}
