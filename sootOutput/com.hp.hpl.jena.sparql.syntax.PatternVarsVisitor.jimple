public class com.hp.hpl.jena.sparql.syntax.PatternVarsVisitor extends com.hp.hpl.jena.sparql.syntax.ElementVisitorBase
{
    public java.util.Collection acc;

    public void <init>(java.util.Collection)
    {
        com.hp.hpl.jena.sparql.syntax.PatternVarsVisitor r0;
        java.util.Collection r1;

        r0 := @this: com.hp.hpl.jena.sparql.syntax.PatternVarsVisitor;

        r1 := @parameter0: java.util.Collection;

        specialinvoke r0.<com.hp.hpl.jena.sparql.syntax.ElementVisitorBase: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.syntax.PatternVarsVisitor: java.util.Collection acc> = r1;

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.syntax.ElementTriplesBlock)
    {
        java.util.Iterator $r1;
        com.hp.hpl.jena.sparql.syntax.ElementTriplesBlock r0;
        java.util.Collection $r5;
        com.hp.hpl.jena.sparql.syntax.PatternVarsVisitor r4;
        java.lang.Object $r2;
        boolean $z0;
        com.hp.hpl.jena.graph.Triple r3;

        r4 := @this: com.hp.hpl.jena.sparql.syntax.PatternVarsVisitor;

        r0 := @parameter0: com.hp.hpl.jena.sparql.syntax.ElementTriplesBlock;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.syntax.ElementTriplesBlock: java.util.Iterator patternElts()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.hp.hpl.jena.graph.Triple) $r2;

        $r5 = r4.<com.hp.hpl.jena.sparql.syntax.PatternVarsVisitor: java.util.Collection acc>;

        staticinvoke <com.hp.hpl.jena.sparql.util.VarUtils: void addVarsFromTriple(java.util.Collection,com.hp.hpl.jena.graph.Triple)>($r5, r3);

        goto label1;

     label2:
        return;
    }

    public void visit(com.hp.hpl.jena.sparql.syntax.ElementPathBlock)
    {
        java.util.Iterator $r1;
        java.util.Collection $r5, $r6;
        com.hp.hpl.jena.sparql.core.TriplePath r3;
        com.hp.hpl.jena.sparql.syntax.ElementPathBlock r0;
        com.hp.hpl.jena.graph.Triple $r7;
        com.hp.hpl.jena.sparql.syntax.PatternVarsVisitor r4;
        java.lang.Object $r2;
        boolean $z0, $z1;

        r4 := @this: com.hp.hpl.jena.sparql.syntax.PatternVarsVisitor;

        r0 := @parameter0: com.hp.hpl.jena.sparql.syntax.ElementPathBlock;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.syntax.ElementPathBlock: java.util.Iterator patternElts()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.hp.hpl.jena.sparql.core.TriplePath) $r2;

        $z1 = virtualinvoke r3.<com.hp.hpl.jena.sparql.core.TriplePath: boolean isTriple()>();

        if $z1 == 0 goto label2;

        $r6 = r4.<com.hp.hpl.jena.sparql.syntax.PatternVarsVisitor: java.util.Collection acc>;

        $r7 = virtualinvoke r3.<com.hp.hpl.jena.sparql.core.TriplePath: com.hp.hpl.jena.graph.Triple asTriple()>();

        staticinvoke <com.hp.hpl.jena.sparql.util.VarUtils: void addVarsFromTriple(java.util.Collection,com.hp.hpl.jena.graph.Triple)>($r6, $r7);

        goto label3;

     label2:
        $r5 = r4.<com.hp.hpl.jena.sparql.syntax.PatternVarsVisitor: java.util.Collection acc>;

        staticinvoke <com.hp.hpl.jena.sparql.util.VarUtils: void addVarsFromTriplePath(java.util.Collection,com.hp.hpl.jena.sparql.core.TriplePath)>($r5, r3);

     label3:
        goto label1;

     label4:
        return;
    }

    public void visit(com.hp.hpl.jena.sparql.syntax.ElementExists)
    {
        com.hp.hpl.jena.sparql.syntax.PatternVarsVisitor r0;
        com.hp.hpl.jena.sparql.syntax.ElementExists r1;

        r0 := @this: com.hp.hpl.jena.sparql.syntax.PatternVarsVisitor;

        r1 := @parameter0: com.hp.hpl.jena.sparql.syntax.ElementExists;

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.syntax.ElementNotExists)
    {
        com.hp.hpl.jena.sparql.syntax.PatternVarsVisitor r0;
        com.hp.hpl.jena.sparql.syntax.ElementNotExists r1;

        r0 := @this: com.hp.hpl.jena.sparql.syntax.PatternVarsVisitor;

        r1 := @parameter0: com.hp.hpl.jena.sparql.syntax.ElementNotExists;

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.syntax.ElementMinus)
    {
        com.hp.hpl.jena.sparql.syntax.PatternVarsVisitor r0;
        com.hp.hpl.jena.sparql.syntax.ElementMinus r1;

        r0 := @this: com.hp.hpl.jena.sparql.syntax.PatternVarsVisitor;

        r1 := @parameter0: com.hp.hpl.jena.sparql.syntax.ElementMinus;

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.syntax.ElementFilter)
    {
        com.hp.hpl.jena.sparql.syntax.PatternVarsVisitor r0;
        com.hp.hpl.jena.sparql.syntax.ElementFilter r1;

        r0 := @this: com.hp.hpl.jena.sparql.syntax.PatternVarsVisitor;

        r1 := @parameter0: com.hp.hpl.jena.sparql.syntax.ElementFilter;

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.syntax.ElementNamedGraph)
    {
        com.hp.hpl.jena.sparql.syntax.ElementNamedGraph r1;
        java.util.Collection $r2;
        com.hp.hpl.jena.sparql.syntax.PatternVarsVisitor r0;
        com.hp.hpl.jena.graph.Node $r3;

        r0 := @this: com.hp.hpl.jena.sparql.syntax.PatternVarsVisitor;

        r1 := @parameter0: com.hp.hpl.jena.sparql.syntax.ElementNamedGraph;

        $r2 = r0.<com.hp.hpl.jena.sparql.syntax.PatternVarsVisitor: java.util.Collection acc>;

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.syntax.ElementNamedGraph: com.hp.hpl.jena.graph.Node getGraphNameNode()>();

        staticinvoke <com.hp.hpl.jena.sparql.util.VarUtils: void addVar(java.util.Collection,com.hp.hpl.jena.graph.Node)>($r2, $r3);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.syntax.ElementSubQuery)
    {
        com.hp.hpl.jena.query.Query $r1, $r2;
        java.util.List $r6;
        java.util.Collection $r5;
        com.hp.hpl.jena.sparql.syntax.PatternVarsVisitor r4;
        com.hp.hpl.jena.sparql.core.VarExprList $r3;
        com.hp.hpl.jena.sparql.syntax.ElementSubQuery r0;

        r4 := @this: com.hp.hpl.jena.sparql.syntax.PatternVarsVisitor;

        r0 := @parameter0: com.hp.hpl.jena.sparql.syntax.ElementSubQuery;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.syntax.ElementSubQuery: com.hp.hpl.jena.query.Query getQuery()>();

        virtualinvoke $r1.<com.hp.hpl.jena.query.Query: void setResultVars()>();

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.syntax.ElementSubQuery: com.hp.hpl.jena.query.Query getQuery()>();

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.sparql.core.VarExprList getProject()>();

        $r5 = r4.<com.hp.hpl.jena.sparql.syntax.PatternVarsVisitor: java.util.Collection acc>;

        $r6 = virtualinvoke $r3.<com.hp.hpl.jena.sparql.core.VarExprList: java.util.List getVars()>();

        interfaceinvoke $r5.<java.util.Collection: boolean addAll(java.util.Collection)>($r6);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.syntax.ElementAssign)
    {
        com.hp.hpl.jena.sparql.syntax.ElementAssign r1;
        java.util.Collection $r2;
        com.hp.hpl.jena.sparql.syntax.PatternVarsVisitor r0;
        com.hp.hpl.jena.sparql.core.Var $r3;

        r0 := @this: com.hp.hpl.jena.sparql.syntax.PatternVarsVisitor;

        r1 := @parameter0: com.hp.hpl.jena.sparql.syntax.ElementAssign;

        $r2 = r0.<com.hp.hpl.jena.sparql.syntax.PatternVarsVisitor: java.util.Collection acc>;

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.syntax.ElementAssign: com.hp.hpl.jena.sparql.core.Var getVar()>();

        interfaceinvoke $r2.<java.util.Collection: boolean add(java.lang.Object)>($r3);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.syntax.ElementBind)
    {
        com.hp.hpl.jena.sparql.syntax.ElementBind r1;
        java.util.Collection $r2;
        com.hp.hpl.jena.sparql.syntax.PatternVarsVisitor r0;
        com.hp.hpl.jena.sparql.core.Var $r3;

        r0 := @this: com.hp.hpl.jena.sparql.syntax.PatternVarsVisitor;

        r1 := @parameter0: com.hp.hpl.jena.sparql.syntax.ElementBind;

        $r2 = r0.<com.hp.hpl.jena.sparql.syntax.PatternVarsVisitor: java.util.Collection acc>;

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.syntax.ElementBind: com.hp.hpl.jena.sparql.core.Var getVar()>();

        interfaceinvoke $r2.<java.util.Collection: boolean add(java.lang.Object)>($r3);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.syntax.ElementData)
    {
        java.util.List $r3;
        com.hp.hpl.jena.sparql.syntax.ElementData r1;
        java.util.Collection $r2;
        com.hp.hpl.jena.sparql.syntax.PatternVarsVisitor r0;

        r0 := @this: com.hp.hpl.jena.sparql.syntax.PatternVarsVisitor;

        r1 := @parameter0: com.hp.hpl.jena.sparql.syntax.ElementData;

        $r2 = r0.<com.hp.hpl.jena.sparql.syntax.PatternVarsVisitor: java.util.Collection acc>;

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.syntax.ElementData: java.util.List getVars()>();

        interfaceinvoke $r2.<java.util.Collection: boolean addAll(java.util.Collection)>($r3);

        return;
    }
}
