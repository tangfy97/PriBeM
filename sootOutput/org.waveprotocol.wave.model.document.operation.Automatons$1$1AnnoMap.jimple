class org.waveprotocol.wave.model.document.operation.Automatons$1$1AnnoMap extends java.util.HashMap implements org.waveprotocol.wave.model.document.operation.impl.AnnotationMap
{
    final org.waveprotocol.wave.model.document.operation.Automatons$1 this$0;

    void <init>(org.waveprotocol.wave.model.document.operation.Automatons$1)
    {
        org.waveprotocol.wave.model.document.operation.Automatons$1$1AnnoMap r0;
        org.waveprotocol.wave.model.document.operation.Automatons$1 r1;

        r0 := @this: org.waveprotocol.wave.model.document.operation.Automatons$1$1AnnoMap;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.Automatons$1;

        r0.<org.waveprotocol.wave.model.document.operation.Automatons$1$1AnnoMap: org.waveprotocol.wave.model.document.operation.Automatons$1 this$0> = r1;

        specialinvoke r0.<java.util.HashMap: void <init>()>();

        return;
    }

    public org.waveprotocol.wave.model.document.operation.impl.AnnotationMap updateWith(org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdate)
    {
        org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap $r3;
        org.waveprotocol.wave.model.document.operation.impl.AnnotationMapImpl $r0;
        org.waveprotocol.wave.model.document.operation.Automatons$1$1AnnoMap r1;
        org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdate r2;
        org.waveprotocol.wave.model.document.operation.impl.AnnotationMap $r4;

        r1 := @this: org.waveprotocol.wave.model.document.operation.Automatons$1$1AnnoMap;

        r2 := @parameter0: org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdate;

        $r0 = new org.waveprotocol.wave.model.document.operation.impl.AnnotationMapImpl;

        specialinvoke $r0.<org.waveprotocol.wave.model.document.operation.impl.AnnotationMapImpl: void <init>(java.util.Map)>(r1);

        $r3 = virtualinvoke $r0.<org.waveprotocol.wave.model.document.operation.impl.AnnotationMapImpl: org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap updateWith(org.waveprotocol.wave.model.document.operation.util.UpdateMap)>(r2);

        $r4 = (org.waveprotocol.wave.model.document.operation.impl.AnnotationMap) $r3;

        return $r4;
    }

    public org.waveprotocol.wave.model.document.operation.impl.AnnotationMap updateWithNoCompatibilityCheck(org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdate)
    {
        org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap $r3;
        org.waveprotocol.wave.model.document.operation.impl.AnnotationMapImpl $r0;
        org.waveprotocol.wave.model.document.operation.Automatons$1$1AnnoMap r1;
        org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdate r2;
        org.waveprotocol.wave.model.document.operation.impl.AnnotationMap $r4;

        r1 := @this: org.waveprotocol.wave.model.document.operation.Automatons$1$1AnnoMap;

        r2 := @parameter0: org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdate;

        $r0 = new org.waveprotocol.wave.model.document.operation.impl.AnnotationMapImpl;

        specialinvoke $r0.<org.waveprotocol.wave.model.document.operation.impl.AnnotationMapImpl: void <init>(java.util.Map)>(r1);

        $r3 = virtualinvoke $r0.<org.waveprotocol.wave.model.document.operation.impl.AnnotationMapImpl: org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap updateWithNoCompatibilityCheck(org.waveprotocol.wave.model.document.operation.util.UpdateMap)>(r2);

        $r4 = (org.waveprotocol.wave.model.document.operation.impl.AnnotationMap) $r3;

        return $r4;
    }
}
