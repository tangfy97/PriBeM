public abstract class org.apache.jena.query.spatial.pfunction.SpatialOperationWithCircleBase extends org.apache.jena.query.spatial.pfunction.SpatialOperationPFBase
{
    private static org.slf4j.Logger log;

    public void <init>()
    {
        org.apache.jena.query.spatial.pfunction.SpatialOperationWithCircleBase r0;

        r0 := @this: org.apache.jena.query.spatial.pfunction.SpatialOperationWithCircleBase;

        specialinvoke r0.<org.apache.jena.query.spatial.pfunction.SpatialOperationPFBase: void <init>()>();

        return;
    }

    public void build(com.hp.hpl.jena.sparql.pfunction.PropFuncArg, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.sparql.pfunction.PropFuncArg, com.hp.hpl.jena.sparql.engine.ExecutionContext)
    {
        com.hp.hpl.jena.query.QueryBuildException $r6, $r11, $r12;
        com.hp.hpl.jena.graph.Node r2;
        com.hp.hpl.jena.sparql.pfunction.PropFuncArg r1, r3;
        int $i0, $i1;
        com.hp.hpl.jena.sparql.engine.ExecutionContext r4;
        java.lang.String $r10, $r16;
        boolean $z0, $z1;
        java.util.List $r5;
        org.apache.jena.query.spatial.pfunction.SpatialOperationWithCircleBase r0;
        java.lang.StringBuilder $r7, $r8, $r9, $r13, $r14, $r15;

        r0 := @this: org.apache.jena.query.spatial.pfunction.SpatialOperationWithCircleBase;

        r1 := @parameter0: com.hp.hpl.jena.sparql.pfunction.PropFuncArg;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        r3 := @parameter2: com.hp.hpl.jena.sparql.pfunction.PropFuncArg;

        r4 := @parameter3: com.hp.hpl.jena.sparql.engine.ExecutionContext;

        specialinvoke r0.<org.apache.jena.query.spatial.pfunction.SpatialOperationPFBase: void build(com.hp.hpl.jena.sparql.pfunction.PropFuncArg,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.pfunction.PropFuncArg,com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r1, r2, r3, r4);

        $z0 = virtualinvoke r1.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: boolean isNode()>();

        if $z0 != 0 goto label1;

        $r12 = new com.hp.hpl.jena.query.QueryBuildException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Subject is not a single node: ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<com.hp.hpl.jena.query.QueryBuildException: void <init>(java.lang.String)>($r16);

        throw $r12;

     label1:
        $z1 = virtualinvoke r3.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: boolean isList()>();

        if $z1 == 0 goto label3;

        $r5 = virtualinvoke r3.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: java.util.List getArgList()>();

        $i0 = interfaceinvoke $r5.<java.util.List: int size()>();

        if $i0 >= 3 goto label2;

        $r11 = new com.hp.hpl.jena.query.QueryBuildException;

        specialinvoke $r11.<com.hp.hpl.jena.query.QueryBuildException: void <init>(java.lang.String)>("Not enough arguments in list");

        throw $r11;

     label2:
        $i1 = interfaceinvoke $r5.<java.util.List: int size()>();

        if $i1 <= 5 goto label3;

        $r6 = new com.hp.hpl.jena.query.QueryBuildException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Too many arguments in list : ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<com.hp.hpl.jena.query.QueryBuildException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label3:
        return;
    }

    protected org.apache.jena.query.spatial.pfunction.SpatialMatch objectToStruct(com.hp.hpl.jena.sparql.pfunction.PropFuncArg)
    {
        byte $b2, b7, b11, b12, b13;
        java.lang.StringBuilder $r21, $r23, $r30, $r31, $r35, $r36, $r40, $r41, $r48, $r49, $r55, $r56, $r60, $r61, $r65, $r66, $r70, $r71, $r75, $r76, $r80, $r81, $r85, $r86, $r90, $r91, $r95, $r96, $r104, $r106, $r107, $r108, $r109, $r110, $r111, $r112, $r113, $r114, $r115, $r116, $r117, $r119;
        org.apache.lucene.spatial.query.SpatialOperation $r17;
        com.hp.hpl.jena.graph.impl.LiteralLabel $r4, $r8, $r12, $r26;
        int $i0, $i1, $i3, $i4, $i5, i6, $i8, $i9, i10, $i14, $i16, $i18;
        org.apache.jena.query.spatial.SpatialIndexException $r105;
        org.slf4j.Logger $r18, $r20, $r29, $r34, $r39, $r47, $r54, $r59, $r64, $r69, $r74, $r79, $r84, $r89, $r94;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r27, $r52;
        java.lang.Object $r3, $r7, $r11, $r25, $r43;
        org.apache.jena.query.spatial.pfunction.SpatialMatch $r118;
        com.hp.hpl.jena.graph.Node r98, r99, r100, r102, r103;
        java.lang.Double $r6, $r10, $r14;
        com.hp.hpl.jena.sparql.pfunction.PropFuncArg r0;
        java.lang.String $r5, $r9, $r13, $r22, $r24, $r32, $r37, $r42, $r45, $r50, $r57, $r62, $r67, $r72, $r77, $r82, $r87, $r92, $r97, r101;
        com.hp.hpl.jena.datatypes.RDFDatatype $r44, $r51;
        org.apache.jena.query.spatial.pfunction.SpatialOperationWithCircleBase r16;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12;
        java.util.List $r1;
        double $d0, $d1, $d2, $d3;

        r16 := @this: org.apache.jena.query.spatial.pfunction.SpatialOperationWithCircleBase;

        r0 := @parameter0: com.hp.hpl.jena.sparql.pfunction.PropFuncArg;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: boolean isNode()>();

        if $z0 == 0 goto label01;

        $r94 = <org.apache.jena.query.spatial.pfunction.SpatialOperationWithCircleBase: org.slf4j.Logger log>;

        $r104 = new java.lang.StringBuilder;

        specialinvoke $r104.<java.lang.StringBuilder: void <init>()>();

        $r95 = virtualinvoke $r104.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Object not a List: ");

        $r96 = virtualinvoke $r95.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r97 = virtualinvoke $r96.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r94.<org.slf4j.Logger: void warn(java.lang.String)>($r97);

        return null;

     label01:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: java.util.List getArgList()>();

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 < 3 goto label02;

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i1 <= 5 goto label03;

     label02:
        $r105 = new org.apache.jena.query.spatial.SpatialIndexException;

        specialinvoke $r105.<org.apache.jena.query.spatial.SpatialIndexException: void <init>(java.lang.String)>("Change in object list size");

        throw $r105;

     label03:
        $r3 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        r98 = (com.hp.hpl.jena.graph.Node) $r3;

        $z1 = virtualinvoke r98.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z1 != 0 goto label04;

        $r89 = <org.apache.jena.query.spatial.pfunction.SpatialOperationWithCircleBase: org.slf4j.Logger log>;

        $r106 = new java.lang.StringBuilder;

        specialinvoke $r106.<java.lang.StringBuilder: void <init>()>();

        $r90 = virtualinvoke $r106.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Latitude is not a literal ");

        $r91 = virtualinvoke $r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r92 = virtualinvoke $r91.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r89.<org.slf4j.Logger: void warn(java.lang.String)>($r92);

        return null;

     label04:
        $r4 = virtualinvoke r98.<com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.impl.LiteralLabel getLiteral()>();

        $z2 = staticinvoke <org.apache.jena.query.spatial.SpatialValueUtil: boolean isDecimal(com.hp.hpl.jena.graph.impl.LiteralLabel)>($r4);

        if $z2 != 0 goto label05;

        $r84 = <org.apache.jena.query.spatial.pfunction.SpatialOperationWithCircleBase: org.slf4j.Logger log>;

        $r107 = new java.lang.StringBuilder;

        specialinvoke $r107.<java.lang.StringBuilder: void <init>()>();

        $r85 = virtualinvoke $r107.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Latitude is not a decimal ");

        $r86 = virtualinvoke $r85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r87 = virtualinvoke $r86.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r84.<org.slf4j.Logger: void warn(java.lang.String)>($r87);

        return null;

     label05:
        $r5 = virtualinvoke r98.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r5);

        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r7 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(1);

        r99 = (com.hp.hpl.jena.graph.Node) $r7;

        $z3 = virtualinvoke r99.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z3 != 0 goto label06;

        $r79 = <org.apache.jena.query.spatial.pfunction.SpatialOperationWithCircleBase: org.slf4j.Logger log>;

        $r108 = new java.lang.StringBuilder;

        specialinvoke $r108.<java.lang.StringBuilder: void <init>()>();

        $r80 = virtualinvoke $r108.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Longitude is not a literal ");

        $r81 = virtualinvoke $r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r82 = virtualinvoke $r81.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r79.<org.slf4j.Logger: void warn(java.lang.String)>($r82);

        return null;

     label06:
        $r8 = virtualinvoke r99.<com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.impl.LiteralLabel getLiteral()>();

        $z4 = staticinvoke <org.apache.jena.query.spatial.SpatialValueUtil: boolean isDecimal(com.hp.hpl.jena.graph.impl.LiteralLabel)>($r8);

        if $z4 != 0 goto label07;

        $r74 = <org.apache.jena.query.spatial.pfunction.SpatialOperationWithCircleBase: org.slf4j.Logger log>;

        $r109 = new java.lang.StringBuilder;

        specialinvoke $r109.<java.lang.StringBuilder: void <init>()>();

        $r75 = virtualinvoke $r109.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Longitude is not a decimal ");

        $r76 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r77 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r74.<org.slf4j.Logger: void warn(java.lang.String)>($r77);

        return null;

     label07:
        $r9 = virtualinvoke r99.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        $d1 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r9);

        $r10 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        $r11 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(2);

        r100 = (com.hp.hpl.jena.graph.Node) $r11;

        $z5 = virtualinvoke r100.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z5 != 0 goto label08;

        $r69 = <org.apache.jena.query.spatial.pfunction.SpatialOperationWithCircleBase: org.slf4j.Logger log>;

        $r110 = new java.lang.StringBuilder;

        specialinvoke $r110.<java.lang.StringBuilder: void <init>()>();

        $r70 = virtualinvoke $r110.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Radius is not a literal ");

        $r71 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r72 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r69.<org.slf4j.Logger: void warn(java.lang.String)>($r72);

        return null;

     label08:
        $r12 = virtualinvoke r100.<com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.impl.LiteralLabel getLiteral()>();

        $z6 = staticinvoke <org.apache.jena.query.spatial.SpatialValueUtil: boolean isDecimal(com.hp.hpl.jena.graph.impl.LiteralLabel)>($r12);

        if $z6 != 0 goto label09;

        $r64 = <org.apache.jena.query.spatial.pfunction.SpatialOperationWithCircleBase: org.slf4j.Logger log>;

        $r111 = new java.lang.StringBuilder;

        specialinvoke $r111.<java.lang.StringBuilder: void <init>()>();

        $r65 = virtualinvoke $r111.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Radius is not a decimal ");

        $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r64.<org.slf4j.Logger: void warn(java.lang.String)>($r67);

        return null;

     label09:
        $r13 = virtualinvoke r100.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        $d2 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r13);

        $r14 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d2);

        $d3 = virtualinvoke $r14.<java.lang.Double: double doubleValue()>();

        $b2 = $d3 cmpg 0.0;

        $i14 = (int) $b2;

        if $i14 > 0 goto label10;

        $r59 = <org.apache.jena.query.spatial.pfunction.SpatialOperationWithCircleBase: org.slf4j.Logger log>;

        $r112 = new java.lang.StringBuilder;

        specialinvoke $r112.<java.lang.StringBuilder: void <init>()>();

        $r60 = virtualinvoke $r112.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Radius is not a correct decimal ");

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r59.<org.slf4j.Logger: void warn(java.lang.String)>($r62);

        return null;

     label10:
        r101 = "miles";

        $i16 = (int) -1;

        i6 = $i16;

        b7 = 3;

        b13 = 3;

        b12 = 3;

        b11 = 3;

        $i3 = interfaceinvoke $r1.<java.util.List: int size()>();

        if 3 >= $i3 goto label14;

        $r43 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(3);

        r102 = (com.hp.hpl.jena.graph.Node) $r43;

        $z10 = virtualinvoke r102.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z10 != 0 goto label11;

        $r54 = <org.apache.jena.query.spatial.pfunction.SpatialOperationWithCircleBase: org.slf4j.Logger log>;

        $r113 = new java.lang.StringBuilder;

        specialinvoke $r113.<java.lang.StringBuilder: void <init>()>();

        $r55 = virtualinvoke $r113.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Units or limit is not a literal ");

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r54.<org.slf4j.Logger: void warn(java.lang.String)>($r57);

        return null;

     label11:
        $r44 = virtualinvoke r102.<com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.datatypes.RDFDatatype getLiteralDatatype()>();

        if $r44 == null goto label12;

        $r51 = virtualinvoke r102.<com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.datatypes.RDFDatatype getLiteralDatatype()>();

        $r52 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDstring>;

        $z12 = virtualinvoke $r51.<java.lang.Object: boolean equals(java.lang.Object)>($r52);

        if $z12 == 0 goto label14;

     label12:
        $r45 = virtualinvoke r102.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        $z11 = staticinvoke <org.apache.jena.query.spatial.DistanceUnitsUtils: boolean isSupportedUnits(java.lang.String)>($r45);

        if $z11 == 0 goto label13;

        b7 = 4;

        b13 = 4;

        b12 = 4;

        b11 = 4;

        r101 = $r45;

        goto label14;

     label13:
        $r47 = <org.apache.jena.query.spatial.pfunction.SpatialOperationWithCircleBase: org.slf4j.Logger log>;

        $r114 = new java.lang.StringBuilder;

        specialinvoke $r114.<java.lang.StringBuilder: void <init>()>();

        $r48 = virtualinvoke $r114.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Units are not a supported ");

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r47.<org.slf4j.Logger: void warn(java.lang.String)>($r50);

        return null;

     label14:
        $i8 = interfaceinvoke $r1.<java.util.List: int size()>();

        if b11 >= $i8 goto label19;

        $r25 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(b13);

        r103 = (com.hp.hpl.jena.graph.Node) $r25;

        $z8 = virtualinvoke r103.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z8 != 0 goto label15;

        $r39 = <org.apache.jena.query.spatial.pfunction.SpatialOperationWithCircleBase: org.slf4j.Logger log>;

        $r115 = new java.lang.StringBuilder;

        specialinvoke $r115.<java.lang.StringBuilder: void <init>()>();

        $r40 = virtualinvoke $r115.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Limit is not a literal ");

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r39.<org.slf4j.Logger: void warn(java.lang.String)>($r42);

        return null;

     label15:
        $r26 = virtualinvoke r103.<com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.impl.LiteralLabel getLiteral()>();

        $r27 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDinteger>;

        $z9 = virtualinvoke $r27.<com.hp.hpl.jena.datatypes.xsd.XSDDatatype: boolean isValidLiteral(com.hp.hpl.jena.graph.impl.LiteralLabel)>($r26);

        if $z9 != 0 goto label16;

        $r34 = <org.apache.jena.query.spatial.pfunction.SpatialOperationWithCircleBase: org.slf4j.Logger log>;

        $r116 = new java.lang.StringBuilder;

        specialinvoke $r116.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r116.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Limit is not an integer ");

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r34.<org.slf4j.Logger: void warn(java.lang.String)>($r37);

        return null;

     label16:
        $i4 = staticinvoke <com.hp.hpl.jena.sparql.util.NodeFactoryExtra: int nodeToInt(com.hp.hpl.jena.graph.Node)>(r103);

        if $i4 >= 0 goto label17;

        $i18 = (int) -1;

        $i9 = $i18;

        goto label18;

     label17:
        $i9 = $i4;

     label18:
        i6 = $i9;

        i10 = b12 + 1;

        $i5 = interfaceinvoke $r1.<java.util.List: int size()>();

        if i10 >= $i5 goto label19;

        $r29 = <org.apache.jena.query.spatial.pfunction.SpatialOperationWithCircleBase: org.slf4j.Logger log>;

        $r117 = new java.lang.StringBuilder;

        specialinvoke $r117.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r117.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Limit is not the last parameter ");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r29.<org.slf4j.Logger: void warn(java.lang.String)>($r32);

        return null;

     label19:
        $r118 = new org.apache.jena.query.spatial.pfunction.SpatialMatch;

        $r17 = virtualinvoke r16.<org.apache.jena.query.spatial.pfunction.SpatialOperationWithCircleBase: org.apache.lucene.spatial.query.SpatialOperation getSpatialOperation()>();

        specialinvoke $r118.<org.apache.jena.query.spatial.pfunction.SpatialMatch: void <init>(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.String,int,org.apache.lucene.spatial.query.SpatialOperation)>($r6, $r10, $r14, r101, i6, $r17);

        $r18 = <org.apache.jena.query.spatial.pfunction.SpatialOperationWithCircleBase: org.slf4j.Logger log>;

        $z7 = interfaceinvoke $r18.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z7 == 0 goto label20;

        $r20 = <org.apache.jena.query.spatial.pfunction.SpatialOperationWithCircleBase: org.slf4j.Logger log>;

        $r119 = new java.lang.StringBuilder;

        specialinvoke $r119.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r119.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Trying SpatialMatch: ");

        $r22 = virtualinvoke $r118.<org.apache.jena.query.spatial.pfunction.SpatialMatch: java.lang.String toString()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r20.<org.slf4j.Logger: void debug(java.lang.String)>($r24);

     label20:
        return $r118;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/jena/query/spatial/pfunction/SpatialOperationWithCircleBase;");

        <org.apache.jena.query.spatial.pfunction.SpatialOperationWithCircleBase: org.slf4j.Logger log> = $r0;

        return;
    }
}
