public class org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess extends org.eclipse.jdt.internal.compiler.ast.Expression
{
    public org.eclipse.jdt.internal.compiler.ast.TypeReference type;
    public org.eclipse.jdt.internal.compiler.lookup.TypeBinding targetType;
    org.eclipse.jdt.internal.compiler.lookup.FieldBinding syntheticField;

    public void <init>(int, org.eclipse.jdt.internal.compiler.ast.TypeReference)
    {
        org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess r0;
        int $i0, $i1, $i2, i3;
        org.eclipse.jdt.internal.compiler.ast.TypeReference r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess;

        i3 := @parameter0: int;

        r1 := @parameter1: org.eclipse.jdt.internal.compiler.ast.TypeReference;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.ast.Expression: void <init>()>();

        r0.<org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess: org.eclipse.jdt.internal.compiler.ast.TypeReference type> = r1;

        $i0 = r1.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int bits>;

        $i1 = $i0 | 1073741824;

        r1.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int bits> = $i1;

        $i2 = r1.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int sourceStart>;

        r0.<org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess: int sourceStart> = $i2;

        r0.<org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess: int sourceEnd> = i3;

        return;
    }

    public org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.flow.FlowContext, org.eclipse.jdt.internal.compiler.flow.FlowInfo)
    {
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r0;
        org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding $r2;
        org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess r4;
        org.eclipse.jdt.internal.compiler.flow.FlowInfo r3;
        long $l0;
        org.eclipse.jdt.internal.compiler.lookup.FieldBinding $r8;
        org.eclipse.jdt.internal.compiler.lookup.ClassScope $r1;
        byte $b1;
        org.eclipse.jdt.internal.compiler.flow.FlowContext r9;
        org.eclipse.jdt.internal.compiler.lookup.TypeBinding $r5, $r7;
        int $i2;
        org.eclipse.jdt.internal.compiler.impl.CompilerOptions $r6;
        boolean $z0, $z1;

        r4 := @this: org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r9 := @parameter1: org.eclipse.jdt.internal.compiler.flow.FlowContext;

        r3 := @parameter2: org.eclipse.jdt.internal.compiler.flow.FlowInfo;

        $r1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.lookup.ClassScope outerMostClassScope()>();

        $r2 = virtualinvoke $r1.<org.eclipse.jdt.internal.compiler.lookup.ClassScope: org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding enclosingSourceType()>();

        $z0 = virtualinvoke $r2.<org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding: boolean isInterface()>();

        if $z0 != 0 goto label1;

        $r5 = r4.<org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess: org.eclipse.jdt.internal.compiler.lookup.TypeBinding targetType>;

        $z1 = virtualinvoke $r5.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: boolean isBaseType()>();

        if $z1 != 0 goto label1;

        $r6 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.impl.CompilerOptions compilerOptions()>();

        $l0 = $r6.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long sourceLevel>;

        $b1 = $l0 cmp 3211264L;

        $i2 = (int) $b1;

        if $i2 >= 0 goto label1;

        $r7 = r4.<org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess: org.eclipse.jdt.internal.compiler.lookup.TypeBinding targetType>;

        $r8 = virtualinvoke $r2.<org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding: org.eclipse.jdt.internal.compiler.lookup.FieldBinding addSyntheticFieldForClassLiteral(org.eclipse.jdt.internal.compiler.lookup.TypeBinding,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>($r7, r0);

        r4.<org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess: org.eclipse.jdt.internal.compiler.lookup.FieldBinding syntheticField> = $r8;

     label1:
        return r3;
    }

    public void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.codegen.CodeStream, boolean)
    {
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r5;
        org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess r1;
        org.eclipse.jdt.internal.compiler.codegen.CodeStream r0;
        org.eclipse.jdt.internal.compiler.lookup.FieldBinding $r3;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r2;
        int i0, $i1, $i2;
        org.eclipse.jdt.internal.compiler.lookup.TypeBinding $r4;
        boolean z0;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess;

        r5 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r0 := @parameter1: org.eclipse.jdt.internal.compiler.codegen.CodeStream;

        z0 := @parameter2: boolean;

        i0 = r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: int position>;

        if z0 == 0 goto label1;

        $r2 = r1.<org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess: org.eclipse.jdt.internal.compiler.ast.TypeReference type>;

        $r4 = $r2.<org.eclipse.jdt.internal.compiler.ast.TypeReference: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType>;

        $r3 = r1.<org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess: org.eclipse.jdt.internal.compiler.lookup.FieldBinding syntheticField>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void generateClassLiteralAccessForType(org.eclipse.jdt.internal.compiler.lookup.TypeBinding,org.eclipse.jdt.internal.compiler.lookup.FieldBinding)>($r4, $r3);

        $i2 = r1.<org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess: int implicitConversion>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void generateImplicitConversion(int)>($i2);

     label1:
        $i1 = r1.<org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess: int sourceStart>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void recordPositionsFrom(int,int)>(i0, $i1);

        return;
    }

    public java.lang.StringBuffer printExpression(int, java.lang.StringBuffer)
    {
        java.lang.StringBuffer r1, $r3, $r4;
        org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess r0;
        int i0;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r2;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.StringBuffer;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess: org.eclipse.jdt.internal.compiler.ast.TypeReference type>;

        $r3 = virtualinvoke $r2.<org.eclipse.jdt.internal.compiler.ast.TypeReference: java.lang.StringBuffer print(int,java.lang.StringBuffer)>(0, r1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".class");

        return $r4;
    }

    public org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolveType(org.eclipse.jdt.internal.compiler.lookup.BlockScope)
    {
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r15, $r20, $r22;
        org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess r0;
        char[][] $r14;
        org.eclipse.jdt.internal.compiler.lookup.TypeBinding $r4, $r5, $r6, $r7, $r8, $r9, $r16, $r18, r24, r26;
        org.eclipse.jdt.internal.compiler.lookup.ParameterizedTypeBinding $r12;
        boolean $z0, $z1, $z2, $z3;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r3;
        org.eclipse.jdt.internal.compiler.lookup.ArrayBinding r23;
        org.eclipse.jdt.internal.compiler.impl.Constant $r1;
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r2;
        int $i0;
        org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment $r10, $r13;
        org.eclipse.jdt.internal.compiler.lookup.TypeVariableBinding $r17, $r21;
        org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding $r25;
        org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding $r19;
        org.eclipse.jdt.internal.compiler.lookup.TypeBinding[] $r11;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess;

        r2 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        $r1 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        r0.<org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess: org.eclipse.jdt.internal.compiler.impl.Constant constant> = $r1;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess: org.eclipse.jdt.internal.compiler.ast.TypeReference type>;

        $r4 = virtualinvoke $r3.<org.eclipse.jdt.internal.compiler.ast.TypeReference: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolveType(org.eclipse.jdt.internal.compiler.lookup.BlockScope,boolean)>(r2, 1);

        r0.<org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess: org.eclipse.jdt.internal.compiler.lookup.TypeBinding targetType> = $r4;

        if $r4 != null goto label1;

        return null;

     label1:
        $r5 = r0.<org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess: org.eclipse.jdt.internal.compiler.lookup.TypeBinding targetType>;

        $z0 = virtualinvoke $r5.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: boolean isArrayType()>();

        if $z0 == 0 goto label3;

        $r18 = r0.<org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess: org.eclipse.jdt.internal.compiler.lookup.TypeBinding targetType>;

        r23 = (org.eclipse.jdt.internal.compiler.lookup.ArrayBinding) $r18;

        r24 = r23.<org.eclipse.jdt.internal.compiler.lookup.ArrayBinding: org.eclipse.jdt.internal.compiler.lookup.TypeBinding leafComponentType>;

        $r19 = <org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding VOID>;

        if r24 != $r19 goto label2;

        $r22 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        virtualinvoke $r22.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void cannotAllocateVoidArray(org.eclipse.jdt.internal.compiler.ast.Expression)>(r0);

        return null;

     label2:
        $z2 = virtualinvoke r24.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: boolean isTypeVariable()>();

        if $z2 == 0 goto label4;

        $r20 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        $r21 = (org.eclipse.jdt.internal.compiler.lookup.TypeVariableBinding) r24;

        virtualinvoke $r20.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void illegalClassLiteralForTypeVariable(org.eclipse.jdt.internal.compiler.lookup.TypeVariableBinding,org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r21, r0);

        goto label4;

     label3:
        $r6 = r0.<org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess: org.eclipse.jdt.internal.compiler.lookup.TypeBinding targetType>;

        $z1 = virtualinvoke $r6.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: boolean isTypeVariable()>();

        if $z1 == 0 goto label4;

        $r15 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        $r16 = r0.<org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess: org.eclipse.jdt.internal.compiler.lookup.TypeBinding targetType>;

        $r17 = (org.eclipse.jdt.internal.compiler.lookup.TypeVariableBinding) $r16;

        virtualinvoke $r15.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void illegalClassLiteralForTypeVariable(org.eclipse.jdt.internal.compiler.lookup.TypeVariableBinding,org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r17, r0);

     label4:
        $r25 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding getJavaLangClass()>();

        $z3 = virtualinvoke $r25.<org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding: boolean isGenericType()>();

        if $z3 == 0 goto label7;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess: org.eclipse.jdt.internal.compiler.lookup.TypeBinding targetType>;

        $i0 = $r8.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: int id>;

        if $i0 != 6 goto label5;

        $r13 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment environment()>();

        $r14 = <org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess: char[][] JAVA_LANG_VOID>;

        r26 = virtualinvoke $r13.<org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment: org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding getResolvedType(char[][],org.eclipse.jdt.internal.compiler.lookup.Scope)>($r14, r2);

        goto label6;

     label5:
        $r9 = r0.<org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess: org.eclipse.jdt.internal.compiler.lookup.TypeBinding targetType>;

        r26 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.lookup.TypeBinding boxing(org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>($r9);

     label6:
        $r10 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment environment()>();

        $r11 = newarray (org.eclipse.jdt.internal.compiler.lookup.TypeBinding)[1];

        $r11[0] = r26;

        $r12 = virtualinvoke $r10.<org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment: org.eclipse.jdt.internal.compiler.lookup.ParameterizedTypeBinding createParameterizedType(org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding,org.eclipse.jdt.internal.compiler.lookup.TypeBinding[],org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding)>($r25, $r11, null);

        r0.<org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType> = $r12;

        goto label8;

     label7:
        r0.<org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType> = $r25;

     label8:
        $r7 = r0.<org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType>;

        return $r7;
    }

    public void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor, org.eclipse.jdt.internal.compiler.lookup.BlockScope)
    {
        org.eclipse.jdt.internal.compiler.ASTVisitor r0;
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r2;
        org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess r1;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r3;
        boolean $z0;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.ASTVisitor;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        $z0 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: boolean visit(org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r1, r2);

        if $z0 == 0 goto label1;

        $r3 = r1.<org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess: org.eclipse.jdt.internal.compiler.ast.TypeReference type>;

        virtualinvoke $r3.<org.eclipse.jdt.internal.compiler.ast.TypeReference: void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r0, r2);

     label1:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: void endVisit(org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r1, r2);

        return;
    }
}
