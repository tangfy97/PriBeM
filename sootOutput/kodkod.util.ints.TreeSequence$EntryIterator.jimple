abstract class kodkod.util.ints.TreeSequence$EntryIterator extends java.lang.Object implements java.util.Iterator
{
    final int endIndex;
    kodkod.util.ints.TreeSequence$Entry lastReturned;
    kodkod.util.ints.TreeSequence$Entry next;
    final kodkod.util.ints.TreeSequence this$0;

    void <init>(kodkod.util.ints.TreeSequence, kodkod.util.ints.TreeSequence$Entry, int)
    {
        kodkod.util.ints.TreeSequence$EntryIterator r0;
        kodkod.util.ints.TreeSequence$Entry r2;
        kodkod.util.ints.TreeSequence r1;
        int i0;

        r0 := @this: kodkod.util.ints.TreeSequence$EntryIterator;

        r1 := @parameter0: kodkod.util.ints.TreeSequence;

        r2 := @parameter1: kodkod.util.ints.TreeSequence$Entry;

        i0 := @parameter2: int;

        r0.<kodkod.util.ints.TreeSequence$EntryIterator: kodkod.util.ints.TreeSequence this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kodkod.util.ints.TreeSequence$EntryIterator: kodkod.util.ints.TreeSequence$Entry next> = r2;

        r0.<kodkod.util.ints.TreeSequence$EntryIterator: kodkod.util.ints.TreeSequence$Entry lastReturned> = null;

        r0.<kodkod.util.ints.TreeSequence$EntryIterator: int endIndex> = i0;

        return;
    }

    abstract void advance();

    public abstract boolean hasNext();

    public kodkod.util.ints.IndexedEntry next()
    {
        kodkod.util.ints.TreeSequence$EntryIterator r0;
        kodkod.util.ints.TreeSequence$Entry $r1, $r2;
        java.util.NoSuchElementException $r3;
        boolean $z0;

        r0 := @this: kodkod.util.ints.TreeSequence$EntryIterator;

        $z0 = virtualinvoke r0.<kodkod.util.ints.TreeSequence$EntryIterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r3 = new java.util.NoSuchElementException;

        specialinvoke $r3.<java.util.NoSuchElementException: void <init>()>();

        throw $r3;

     label1:
        $r1 = r0.<kodkod.util.ints.TreeSequence$EntryIterator: kodkod.util.ints.TreeSequence$Entry next>;

        r0.<kodkod.util.ints.TreeSequence$EntryIterator: kodkod.util.ints.TreeSequence$Entry lastReturned> = $r1;

        virtualinvoke r0.<kodkod.util.ints.TreeSequence$EntryIterator: void advance()>();

        $r2 = r0.<kodkod.util.ints.TreeSequence$EntryIterator: kodkod.util.ints.TreeSequence$Entry lastReturned>;

        return $r2;
    }

    public final void remove()
    {
        java.lang.IllegalStateException $r12;
        kodkod.util.ints.TreeSequence$EntryIterator r0;
        kodkod.util.ints.TreeSequence $r5, $r6, $r11;
        int i0, $i1, $i2;
        kodkod.util.ints.IntTree $r7;
        kodkod.util.ints.IntTree$Node $r8;
        kodkod.util.ints.TreeSequence$Entry $r1, $r2, $r3, $r4, $r9, $r10;

        r0 := @this: kodkod.util.ints.TreeSequence$EntryIterator;

        $r1 = r0.<kodkod.util.ints.TreeSequence$EntryIterator: kodkod.util.ints.TreeSequence$Entry lastReturned>;

        if $r1 != null goto label1;

        $r12 = new java.lang.IllegalStateException;

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>()>();

        throw $r12;

     label1:
        $r2 = r0.<kodkod.util.ints.TreeSequence$EntryIterator: kodkod.util.ints.TreeSequence$Entry next>;

        if $r2 != null goto label2;

        $r11 = r0.<kodkod.util.ints.TreeSequence$EntryIterator: kodkod.util.ints.TreeSequence this$0>;

        $r10 = r0.<kodkod.util.ints.TreeSequence$EntryIterator: kodkod.util.ints.TreeSequence$Entry lastReturned>;

        $i2 = $r10.<kodkod.util.ints.TreeSequence$Entry: int key>;

        virtualinvoke $r11.<kodkod.util.ints.TreeSequence: java.lang.Object remove(int)>($i2);

        goto label3;

     label2:
        $r3 = r0.<kodkod.util.ints.TreeSequence$EntryIterator: kodkod.util.ints.TreeSequence$Entry next>;

        i0 = $r3.<kodkod.util.ints.TreeSequence$Entry: int key>;

        $r5 = r0.<kodkod.util.ints.TreeSequence$EntryIterator: kodkod.util.ints.TreeSequence this$0>;

        $r4 = r0.<kodkod.util.ints.TreeSequence$EntryIterator: kodkod.util.ints.TreeSequence$Entry lastReturned>;

        $i1 = $r4.<kodkod.util.ints.TreeSequence$Entry: int key>;

        virtualinvoke $r5.<kodkod.util.ints.TreeSequence: java.lang.Object remove(int)>($i1);

        $r6 = r0.<kodkod.util.ints.TreeSequence$EntryIterator: kodkod.util.ints.TreeSequence this$0>;

        $r7 = staticinvoke <kodkod.util.ints.TreeSequence: kodkod.util.ints.IntTree access$1(kodkod.util.ints.TreeSequence)>($r6);

        $r8 = virtualinvoke $r7.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node search(int)>(i0);

        $r9 = (kodkod.util.ints.TreeSequence$Entry) $r8;

        r0.<kodkod.util.ints.TreeSequence$EntryIterator: kodkod.util.ints.TreeSequence$Entry next> = $r9;

     label3:
        r0.<kodkod.util.ints.TreeSequence$EntryIterator: kodkod.util.ints.TreeSequence$Entry lastReturned> = null;

        return;
    }

    public volatile java.lang.Object next()
    {
        kodkod.util.ints.TreeSequence$EntryIterator r0;
        kodkod.util.ints.IndexedEntry $r1;

        r0 := @this: kodkod.util.ints.TreeSequence$EntryIterator;

        $r1 = virtualinvoke r0.<kodkod.util.ints.TreeSequence$EntryIterator: kodkod.util.ints.IndexedEntry next()>();

        return $r1;
    }
}
