public class com.jidesoft.range.NumericRange extends com.jidesoft.range.AbstractNumericRange
{
    protected double _min;
    protected double _max;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        com.jidesoft.range.NumericRange r0;

        r0 := @this: com.jidesoft.range.NumericRange;

        specialinvoke r0.<com.jidesoft.range.NumericRange: void <init>(double,double)>(0.0, 1.0);

        return;
    }

    public void <init>(double, double)
    {
        com.jidesoft.range.NumericRange r0;
        double d0, d1, $d2, $d3;

        r0 := @this: com.jidesoft.range.NumericRange;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        specialinvoke r0.<com.jidesoft.range.AbstractNumericRange: void <init>()>();

        $d2 = staticinvoke <java.lang.Math: double min(double,double)>(d0, d1);

        r0.<com.jidesoft.range.NumericRange: double _min> = $d2;

        $d3 = staticinvoke <java.lang.Math: double max(double,double)>(d0, d1);

        r0.<com.jidesoft.range.NumericRange: double _max> = $d3;

        return;
    }

    public void <init>(com.jidesoft.range.NumericRange)
    {
        com.jidesoft.range.NumericRange r0, r1;
        double $d0, $d1;

        r0 := @this: com.jidesoft.range.NumericRange;

        r1 := @parameter0: com.jidesoft.range.NumericRange;

        $d0 = virtualinvoke r1.<com.jidesoft.range.NumericRange: double minimum()>();

        $d1 = virtualinvoke r1.<com.jidesoft.range.NumericRange: double maximum()>();

        specialinvoke r0.<com.jidesoft.range.NumericRange: void <init>(double,double)>($d0, $d1);

        return;
    }

    public com.jidesoft.range.Range copy()
    {
        com.jidesoft.range.NumericRange $r0, r1;

        r1 := @this: com.jidesoft.range.NumericRange;

        $r0 = new com.jidesoft.range.NumericRange;

        specialinvoke $r0.<com.jidesoft.range.NumericRange: void <init>(com.jidesoft.range.NumericRange)>(r1);

        return $r0;
    }

    public double minimum()
    {
        com.jidesoft.range.NumericRange r0;
        double $d0;

        r0 := @this: com.jidesoft.range.NumericRange;

        $d0 = r0.<com.jidesoft.range.NumericRange: double _min>;

        return $d0;
    }

    public double maximum()
    {
        com.jidesoft.range.NumericRange r0;
        double $d0;

        r0 := @this: com.jidesoft.range.NumericRange;

        $d0 = r0.<com.jidesoft.range.NumericRange: double _max>;

        return $d0;
    }

    public double getMin()
    {
        com.jidesoft.range.NumericRange r0;
        double $d0;

        r0 := @this: com.jidesoft.range.NumericRange;

        $d0 = r0.<com.jidesoft.range.NumericRange: double _min>;

        return $d0;
    }

    public void setMin(double)
    {
        java.lang.Double $r1, $r2;
        java.lang.AssertionError $r4;
        byte $b0, $b1;
        int $i2;
        com.jidesoft.range.NumericRange r0;
        double d0, d1, $d2;
        boolean $z0;

        r0 := @this: com.jidesoft.range.NumericRange;

        d1 := @parameter0: double;

        d0 = r0.<com.jidesoft.range.NumericRange: double _min>;

        $b0 = d0 cmpl d1;

        if $b0 != 0 goto label1;

        return;

     label1:
        $z0 = <com.jidesoft.range.NumericRange: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $d2 = r0.<com.jidesoft.range.NumericRange: double _max>;

        $b1 = d1 cmpg $d2;

        $i2 = (int) $b1;

        if $i2 <= 0 goto label2;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label2:
        r0.<com.jidesoft.range.NumericRange: double _min> = d1;

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        virtualinvoke r0.<com.jidesoft.range.NumericRange: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("min", $r1, $r2);

        return;
    }

    public double getMax()
    {
        com.jidesoft.range.NumericRange r0;
        double $d0;

        r0 := @this: com.jidesoft.range.NumericRange;

        $d0 = r0.<com.jidesoft.range.NumericRange: double _max>;

        return $d0;
    }

    public void setMax(double)
    {
        java.lang.Double $r1, $r2;
        java.lang.AssertionError $r4;
        byte $b0, $b1;
        int $i2;
        com.jidesoft.range.NumericRange r0;
        double d0, d1, $d2;
        boolean $z0;

        r0 := @this: com.jidesoft.range.NumericRange;

        d1 := @parameter0: double;

        d0 = r0.<com.jidesoft.range.NumericRange: double _max>;

        $b0 = d0 cmpl d1;

        if $b0 != 0 goto label1;

        return;

     label1:
        $z0 = <com.jidesoft.range.NumericRange: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $d2 = r0.<com.jidesoft.range.NumericRange: double _min>;

        $b1 = d1 cmpl $d2;

        $i2 = (int) $b1;

        if $i2 >= 0 goto label2;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label2:
        r0.<com.jidesoft.range.NumericRange: double _max> = d1;

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        virtualinvoke r0.<com.jidesoft.range.NumericRange: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("max", $r1, $r2);

        return;
    }

    public double size()
    {
        com.jidesoft.range.NumericRange r0;
        double $d0, $d1, $d2;

        r0 := @this: com.jidesoft.range.NumericRange;

        $d1 = r0.<com.jidesoft.range.NumericRange: double _max>;

        $d0 = r0.<com.jidesoft.range.NumericRange: double _min>;

        $d2 = $d1 - $d0;

        return $d2;
    }

    public java.lang.Double lower()
    {
        com.jidesoft.range.NumericRange r0;
        java.lang.Double $r1;
        double $d0;

        r0 := @this: com.jidesoft.range.NumericRange;

        $d0 = virtualinvoke r0.<com.jidesoft.range.NumericRange: double minimum()>();

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r1;
    }

    public void adjust(java.lang.Double, java.lang.Double)
    {
        java.lang.Double r1, r2;
        com.jidesoft.range.NumericRange r0;
        double $d0, $d1;

        r0 := @this: com.jidesoft.range.NumericRange;

        r1 := @parameter0: java.lang.Double;

        r2 := @parameter1: java.lang.Double;

        $d0 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        virtualinvoke r0.<com.jidesoft.range.NumericRange: void setMin(double)>($d0);

        $d1 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        virtualinvoke r0.<com.jidesoft.range.NumericRange: void setMax(double)>($d1);

        return;
    }

    public java.lang.Double upper()
    {
        com.jidesoft.range.NumericRange r0;
        java.lang.Double $r1;
        double $d0;

        r0 := @this: com.jidesoft.range.NumericRange;

        $d0 = virtualinvoke r0.<com.jidesoft.range.NumericRange: double maximum()>();

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r1;
    }

    public boolean contains(java.lang.Double)
    {
        java.lang.Double r0;
        byte $b0, $b1;
        int $i2, $i3;
        com.jidesoft.range.NumericRange r1;
        double $d0, $d1, $d2, $d3;
        boolean $z0;

        r1 := @this: com.jidesoft.range.NumericRange;

        r0 := @parameter0: java.lang.Double;

        if r0 == null goto label1;

        $d0 = virtualinvoke r0.<java.lang.Double: double doubleValue()>();

        $d1 = r1.<com.jidesoft.range.NumericRange: double _min>;

        $b0 = $d0 cmpl $d1;

        $i2 = (int) $b0;

        if $i2 < 0 goto label1;

        $d2 = virtualinvoke r0.<java.lang.Double: double doubleValue()>();

        $d3 = r1.<com.jidesoft.range.NumericRange: double _max>;

        $b1 = $d2 cmpg $d3;

        $i3 = (int) $b1;

        if $i3 > 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public com.jidesoft.range.NumericRange stretch(double)
    {
        com.jidesoft.range.NumericRange r0, $r1;
        double d0;

        r0 := @this: com.jidesoft.range.NumericRange;

        d0 := @parameter0: double;

        $r1 = virtualinvoke r0.<com.jidesoft.range.NumericRange: com.jidesoft.range.NumericRange stretch(double,double)>(d0, d0);

        return $r1;
    }

    public com.jidesoft.range.NumericRange stretch(double, double)
    {
        com.jidesoft.range.NumericRange r0, $r1;
        double $d0, $d1, $d2, d3, $d4, d5, d6, $d7, d8, $d9, $d10, $d11;

        r0 := @this: com.jidesoft.range.NumericRange;

        d6 := @parameter0: double;

        d8 := @parameter1: double;

        $d1 = r0.<com.jidesoft.range.NumericRange: double _max>;

        $d0 = r0.<com.jidesoft.range.NumericRange: double _min>;

        $d2 = $d1 + $d0;

        d3 = $d2 / 2.0;

        $d4 = virtualinvoke r0.<com.jidesoft.range.NumericRange: double size()>();

        d5 = $d4 / 2.0;

        $r1 = new com.jidesoft.range.NumericRange;

        $d7 = d5 * d6;

        $d11 = d3 - $d7;

        $d9 = d5 * d8;

        $d10 = d3 + $d9;

        specialinvoke $r1.<com.jidesoft.range.NumericRange: void <init>(double,double)>($d11, $d10);

        return $r1;
    }

    public boolean equals(java.lang.Object)
    {
        byte $b0, $b1;
        java.lang.Object r0;
        com.jidesoft.range.NumericRange r1, r2;
        boolean $z0, $z1;
        double $d0, $d1, $d2, $d3;

        r2 := @this: com.jidesoft.range.NumericRange;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof com.jidesoft.range.NumericRange;

        if $z0 == 0 goto label3;

        r1 = (com.jidesoft.range.NumericRange) r0;

        $d1 = r2.<com.jidesoft.range.NumericRange: double _min>;

        $d0 = r1.<com.jidesoft.range.NumericRange: double _min>;

        $b0 = $d1 cmpl $d0;

        if $b0 != 0 goto label1;

        $d3 = r2.<com.jidesoft.range.NumericRange: double _max>;

        $d2 = r1.<com.jidesoft.range.NumericRange: double _max>;

        $b1 = $d3 cmpl $d2;

        if $b1 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;

     label3:
        return 0;
    }

    public int hashCode()
    {
        int $i0;
        com.jidesoft.range.NumericRange r0;
        double $d0, $d1, $d2, $d3;

        r0 := @this: com.jidesoft.range.NumericRange;

        $d0 = r0.<com.jidesoft.range.NumericRange: double _max>;

        $d2 = $d0 * 29.0;

        $d1 = r0.<com.jidesoft.range.NumericRange: double _min>;

        $d3 = $d2 + $d1;

        $i0 = (int) $d3;

        return $i0;
    }

    public java.lang.String toString()
    {
        java.lang.Object[] $r0;
        java.lang.Double $r2, $r3;
        java.lang.String $r4;
        com.jidesoft.range.NumericRange r1;
        double $d0, $d1;

        r1 := @this: com.jidesoft.range.NumericRange;

        $r0 = newarray (java.lang.Object)[2];

        $d0 = r1.<com.jidesoft.range.NumericRange: double _min>;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r0[0] = $r2;

        $d1 = r1.<com.jidesoft.range.NumericRange: double _max>;

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        $r0[1] = $r3;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("#<NumericRange min=%f max=%f>", $r0);

        return $r4;
    }

    public static com.jidesoft.range.NumericRange union(com.jidesoft.range.NumericRange, com.jidesoft.range.NumericRange)
    {
        com.jidesoft.range.NumericRange r0, r1, $r2;
        double d0, d1, d2, d3, $d4, $d5;

        r0 := @parameter0: com.jidesoft.range.NumericRange;

        r1 := @parameter1: com.jidesoft.range.NumericRange;

        if r0 != null goto label1;

        return r1;

     label1:
        if r1 != null goto label2;

        return r0;

     label2:
        d0 = r0.<com.jidesoft.range.NumericRange: double _min>;

        d1 = r1.<com.jidesoft.range.NumericRange: double _min>;

        d2 = r0.<com.jidesoft.range.NumericRange: double _max>;

        d3 = r1.<com.jidesoft.range.NumericRange: double _max>;

        $d4 = staticinvoke <java.lang.Math: double min(double,double)>(d0, d1);

        $d5 = staticinvoke <java.lang.Math: double max(double,double)>(d2, d3);

        $r2 = new com.jidesoft.range.NumericRange;

        specialinvoke $r2.<com.jidesoft.range.NumericRange: void <init>(double,double)>($d4, $d5);

        return $r2;
    }

    public volatile boolean contains(java.lang.Object)
    {
        java.lang.Double $r2;
        java.lang.Object r1;
        com.jidesoft.range.NumericRange r0;
        boolean $z0;

        r0 := @this: com.jidesoft.range.NumericRange;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Double) r1;

        $z0 = virtualinvoke r0.<com.jidesoft.range.NumericRange: boolean contains(java.lang.Double)>($r2);

        return $z0;
    }

    public volatile void adjust(java.lang.Object, java.lang.Object)
    {
        java.lang.Double $r3, $r4;
        java.lang.Object r1, r2;
        com.jidesoft.range.NumericRange r0;

        r0 := @this: com.jidesoft.range.NumericRange;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (java.lang.Double) r1;

        $r3 = (java.lang.Double) r2;

        virtualinvoke r0.<com.jidesoft.range.NumericRange: void adjust(java.lang.Double,java.lang.Double)>($r4, $r3);

        return;
    }

    public volatile java.lang.Object upper()
    {
        com.jidesoft.range.NumericRange r0;
        java.lang.Double $r1;

        r0 := @this: com.jidesoft.range.NumericRange;

        $r1 = virtualinvoke r0.<com.jidesoft.range.NumericRange: java.lang.Double upper()>();

        return $r1;
    }

    public volatile java.lang.Object lower()
    {
        com.jidesoft.range.NumericRange r0;
        java.lang.Double $r1;

        r0 := @this: com.jidesoft.range.NumericRange;

        $r1 = virtualinvoke r0.<com.jidesoft.range.NumericRange: java.lang.Double lower()>();

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lcom/jidesoft/range/NumericRange;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.jidesoft.range.NumericRange: boolean $assertionsDisabled> = $z1;

        return;
    }
}
