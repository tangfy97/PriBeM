public class ucar.nc2.iosp.IospHelper extends java.lang.Object
{
    private static boolean showLayoutTypes;

    public void <init>()
    {
        ucar.nc2.iosp.IospHelper r0;

        r0 := @this: ucar.nc2.iosp.IospHelper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.Object readDataFill(ucar.unidata.io.RandomAccessFile, ucar.nc2.iosp.Layout, ucar.ma2.DataType, java.lang.Object, int) throws java.io.IOException
    {
        ucar.unidata.io.RandomAccessFile r3;
        ucar.nc2.iosp.Layout r1;
        ucar.ma2.DataType r2;
        long $l0, $l3;
        int $i1, i2, $i4;
        java.lang.Object r0, $r4, $r5;

        r3 := @parameter0: ucar.unidata.io.RandomAccessFile;

        r1 := @parameter1: ucar.nc2.iosp.Layout;

        r2 := @parameter2: ucar.ma2.DataType;

        r0 := @parameter3: java.lang.Object;

        i2 := @parameter4: int;

        if r0 != null goto label1;

        $l3 = interfaceinvoke r1.<ucar.nc2.iosp.Layout: long getTotalNelems()>();

        $i4 = (int) $l3;

        $r5 = staticinvoke <ucar.nc2.iosp.IospHelper: java.lang.Object makePrimitiveArray(int,ucar.ma2.DataType)>($i4, r2);

        goto label2;

     label1:
        $l0 = interfaceinvoke r1.<ucar.nc2.iosp.Layout: long getTotalNelems()>();

        $i1 = (int) $l0;

        $r5 = staticinvoke <ucar.nc2.iosp.IospHelper: java.lang.Object makePrimitiveArray(int,ucar.ma2.DataType,java.lang.Object)>($i1, r2, r0);

     label2:
        $r4 = staticinvoke <ucar.nc2.iosp.IospHelper: java.lang.Object readData(ucar.unidata.io.RandomAccessFile,ucar.nc2.iosp.Layout,ucar.ma2.DataType,java.lang.Object,int,boolean)>(r3, r1, r2, $r5, i2, 1);

        return $r4;
    }

    public static java.lang.Object readDataFill(ucar.unidata.io.RandomAccessFile, ucar.nc2.iosp.Layout, ucar.ma2.DataType, java.lang.Object, int, boolean) throws java.io.IOException
    {
        ucar.unidata.io.RandomAccessFile r3;
        ucar.nc2.iosp.Layout r1;
        ucar.ma2.DataType r2;
        long $l0, $l3;
        int $i1, i2, $i4;
        java.lang.Object r0, $r4, $r5;
        boolean z0;

        r3 := @parameter0: ucar.unidata.io.RandomAccessFile;

        r1 := @parameter1: ucar.nc2.iosp.Layout;

        r2 := @parameter2: ucar.ma2.DataType;

        r0 := @parameter3: java.lang.Object;

        i2 := @parameter4: int;

        z0 := @parameter5: boolean;

        if r0 != null goto label1;

        $l3 = interfaceinvoke r1.<ucar.nc2.iosp.Layout: long getTotalNelems()>();

        $i4 = (int) $l3;

        $r5 = staticinvoke <ucar.nc2.iosp.IospHelper: java.lang.Object makePrimitiveArray(int,ucar.ma2.DataType)>($i4, r2);

        goto label2;

     label1:
        $l0 = interfaceinvoke r1.<ucar.nc2.iosp.Layout: long getTotalNelems()>();

        $i1 = (int) $l0;

        $r5 = staticinvoke <ucar.nc2.iosp.IospHelper: java.lang.Object makePrimitiveArray(int,ucar.ma2.DataType,java.lang.Object)>($i1, r2, r0);

     label2:
        $r4 = staticinvoke <ucar.nc2.iosp.IospHelper: java.lang.Object readData(ucar.unidata.io.RandomAccessFile,ucar.nc2.iosp.Layout,ucar.ma2.DataType,java.lang.Object,int,boolean)>(r3, r1, r2, $r5, i2, z0);

        return $r4;
    }

    public static java.lang.Object readData(ucar.unidata.io.RandomAccessFile, ucar.nc2.iosp.Layout, ucar.ma2.DataType, java.lang.Object, int, boolean) throws java.io.IOException
    {
        byte[] $r27, $r44, $r45, r49;
        java.lang.StringBuilder $r23, $r24, $r25, $r37, $r39, $r42;
        double[] $r31, r47;
        long $l1, $l2, $l5, $l6, $l9, $l10, $l14, $l15, $l20, $l21, $l24, $l25, $l28, $l29;
        float[] $r33, r46;
        java.lang.String $r26, $r41, $r43;
        char[] $r5;
        java.lang.IllegalStateException $r22;
        ucar.unidata.io.RandomAccessFile r7;
        ucar.nc2.iosp.Layout r3;
        int[] $r15, $r35;
        ucar.nc2.iosp.Layout$Chunk $r6, $r12, $r16, $r28, $r30, $r32, $r34;
        boolean $z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        ucar.ma2.DataType r0, $r1, $r4, $r8, $r9, $r10, $r13, $r14, $r17, $r18, $r19, $r20, $r21;
        short[] $r11, $r36;
        long[] $r29, r48;
        int i0, $i3, $i4, $i7, $i8, $i11, $i12, $i13, $i16, $i17, $i18, $i19, $i22, $i23, $i26, $i27, $i30, $i31;
        java.io.PrintStream $r38;
        java.lang.Object r2;
        java.lang.Class $r40;

        r7 := @parameter0: ucar.unidata.io.RandomAccessFile;

        r3 := @parameter1: ucar.nc2.iosp.Layout;

        r0 := @parameter2: ucar.ma2.DataType;

        r2 := @parameter3: java.lang.Object;

        i0 := @parameter4: int;

        z1 := @parameter5: boolean;

        $z0 = <ucar.nc2.iosp.IospHelper: boolean showLayoutTypes>;

        if $z0 == 0 goto label01;

        $r38 = <java.lang.System: java.io.PrintStream out>;

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r39 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("***RAF LayoutType=");

        $r40 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        $r41 = virtualinvoke $r40.<java.lang.Class: java.lang.String getName()>();

        $r42 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r41);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r38.<java.io.PrintStream: void println(java.lang.String)>($r43);

     label01:
        $r1 = <ucar.ma2.DataType: ucar.ma2.DataType BYTE>;

        if r0 == $r1 goto label02;

        $r8 = <ucar.ma2.DataType: ucar.ma2.DataType CHAR>;

        if r0 == $r8 goto label02;

        $r9 = <ucar.ma2.DataType: ucar.ma2.DataType ENUM1>;

        if r0 != $r9 goto label06;

     label02:
        $r44 = (byte[]) r2;

        $r45 = (byte[]) $r44;

     label03:
        $z6 = interfaceinvoke r3.<ucar.nc2.iosp.Layout: boolean hasNext()>();

        if $z6 == 0 goto label04;

        $r6 = interfaceinvoke r3.<ucar.nc2.iosp.Layout: ucar.nc2.iosp.Layout$Chunk next()>();

        virtualinvoke r7.<ucar.unidata.io.RandomAccessFile: void order(int)>(i0);

        $l1 = interfaceinvoke $r6.<ucar.nc2.iosp.Layout$Chunk: long getSrcPos()>();

        virtualinvoke r7.<ucar.unidata.io.RandomAccessFile: void seek(long)>($l1);

        $l2 = interfaceinvoke $r6.<ucar.nc2.iosp.Layout$Chunk: long getDestElem()>();

        $i3 = (int) $l2;

        $i4 = interfaceinvoke $r6.<ucar.nc2.iosp.Layout$Chunk: int getNelems()>();

        virtualinvoke r7.<ucar.unidata.io.RandomAccessFile: int read(byte[],int,int)>($r45, $i3, $i4);

        goto label03;

     label04:
        if z1 == 0 goto label05;

        $r4 = <ucar.ma2.DataType: ucar.ma2.DataType CHAR>;

        if r0 != $r4 goto label05;

        $r5 = staticinvoke <ucar.nc2.iosp.IospHelper: char[] convertByteToChar(byte[])>($r45);

        return $r5;

     label05:
        return $r45;

     label06:
        $r10 = <ucar.ma2.DataType: ucar.ma2.DataType SHORT>;

        if r0 == $r10 goto label07;

        $r13 = <ucar.ma2.DataType: ucar.ma2.DataType ENUM2>;

        if r0 != $r13 goto label10;

     label07:
        $r11 = (short[]) r2;

        $r36 = (short[]) $r11;

     label08:
        $z7 = interfaceinvoke r3.<ucar.nc2.iosp.Layout: boolean hasNext()>();

        if $z7 == 0 goto label09;

        $r12 = interfaceinvoke r3.<ucar.nc2.iosp.Layout: ucar.nc2.iosp.Layout$Chunk next()>();

        virtualinvoke r7.<ucar.unidata.io.RandomAccessFile: void order(int)>(i0);

        $l5 = interfaceinvoke $r12.<ucar.nc2.iosp.Layout$Chunk: long getSrcPos()>();

        virtualinvoke r7.<ucar.unidata.io.RandomAccessFile: void seek(long)>($l5);

        $l6 = interfaceinvoke $r12.<ucar.nc2.iosp.Layout$Chunk: long getDestElem()>();

        $i7 = (int) $l6;

        $i8 = interfaceinvoke $r12.<ucar.nc2.iosp.Layout$Chunk: int getNelems()>();

        virtualinvoke r7.<ucar.unidata.io.RandomAccessFile: void readShort(short[],int,int)>($r36, $i7, $i8);

        goto label08;

     label09:
        return $r36;

     label10:
        $r14 = <ucar.ma2.DataType: ucar.ma2.DataType INT>;

        if r0 == $r14 goto label11;

        $r17 = <ucar.ma2.DataType: ucar.ma2.DataType ENUM4>;

        if r0 != $r17 goto label14;

     label11:
        $r15 = (int[]) r2;

        $r35 = (int[]) $r15;

     label12:
        $z8 = interfaceinvoke r3.<ucar.nc2.iosp.Layout: boolean hasNext()>();

        if $z8 == 0 goto label13;

        $r16 = interfaceinvoke r3.<ucar.nc2.iosp.Layout: ucar.nc2.iosp.Layout$Chunk next()>();

        virtualinvoke r7.<ucar.unidata.io.RandomAccessFile: void order(int)>(i0);

        $l9 = interfaceinvoke $r16.<ucar.nc2.iosp.Layout$Chunk: long getSrcPos()>();

        virtualinvoke r7.<ucar.unidata.io.RandomAccessFile: void seek(long)>($l9);

        $l10 = interfaceinvoke $r16.<ucar.nc2.iosp.Layout$Chunk: long getDestElem()>();

        $i11 = (int) $l10;

        $i12 = interfaceinvoke $r16.<ucar.nc2.iosp.Layout$Chunk: int getNelems()>();

        virtualinvoke r7.<ucar.unidata.io.RandomAccessFile: void readInt(int[],int,int)>($r35, $i11, $i12);

        goto label12;

     label13:
        return $r35;

     label14:
        $r18 = <ucar.ma2.DataType: ucar.ma2.DataType FLOAT>;

        if r0 != $r18 goto label17;

        $r33 = (float[]) r2;

        r46 = (float[]) $r33;

     label15:
        $z5 = interfaceinvoke r3.<ucar.nc2.iosp.Layout: boolean hasNext()>();

        if $z5 == 0 goto label16;

        $r34 = interfaceinvoke r3.<ucar.nc2.iosp.Layout: ucar.nc2.iosp.Layout$Chunk next()>();

        virtualinvoke r7.<ucar.unidata.io.RandomAccessFile: void order(int)>(i0);

        $l28 = interfaceinvoke $r34.<ucar.nc2.iosp.Layout$Chunk: long getSrcPos()>();

        virtualinvoke r7.<ucar.unidata.io.RandomAccessFile: void seek(long)>($l28);

        $l29 = interfaceinvoke $r34.<ucar.nc2.iosp.Layout$Chunk: long getDestElem()>();

        $i30 = (int) $l29;

        $i31 = interfaceinvoke $r34.<ucar.nc2.iosp.Layout$Chunk: int getNelems()>();

        virtualinvoke r7.<ucar.unidata.io.RandomAccessFile: void readFloat(float[],int,int)>(r46, $i30, $i31);

        goto label15;

     label16:
        return r46;

     label17:
        $r19 = <ucar.ma2.DataType: ucar.ma2.DataType DOUBLE>;

        if r0 != $r19 goto label20;

        $r31 = (double[]) r2;

        r47 = (double[]) $r31;

     label18:
        $z4 = interfaceinvoke r3.<ucar.nc2.iosp.Layout: boolean hasNext()>();

        if $z4 == 0 goto label19;

        $r32 = interfaceinvoke r3.<ucar.nc2.iosp.Layout: ucar.nc2.iosp.Layout$Chunk next()>();

        virtualinvoke r7.<ucar.unidata.io.RandomAccessFile: void order(int)>(i0);

        $l24 = interfaceinvoke $r32.<ucar.nc2.iosp.Layout$Chunk: long getSrcPos()>();

        virtualinvoke r7.<ucar.unidata.io.RandomAccessFile: void seek(long)>($l24);

        $l25 = interfaceinvoke $r32.<ucar.nc2.iosp.Layout$Chunk: long getDestElem()>();

        $i26 = (int) $l25;

        $i27 = interfaceinvoke $r32.<ucar.nc2.iosp.Layout$Chunk: int getNelems()>();

        virtualinvoke r7.<ucar.unidata.io.RandomAccessFile: void readDouble(double[],int,int)>(r47, $i26, $i27);

        goto label18;

     label19:
        return r47;

     label20:
        $r20 = <ucar.ma2.DataType: ucar.ma2.DataType LONG>;

        if r0 != $r20 goto label23;

        $r29 = (long[]) r2;

        r48 = (long[]) $r29;

     label21:
        $z3 = interfaceinvoke r3.<ucar.nc2.iosp.Layout: boolean hasNext()>();

        if $z3 == 0 goto label22;

        $r30 = interfaceinvoke r3.<ucar.nc2.iosp.Layout: ucar.nc2.iosp.Layout$Chunk next()>();

        virtualinvoke r7.<ucar.unidata.io.RandomAccessFile: void order(int)>(i0);

        $l20 = interfaceinvoke $r30.<ucar.nc2.iosp.Layout$Chunk: long getSrcPos()>();

        virtualinvoke r7.<ucar.unidata.io.RandomAccessFile: void seek(long)>($l20);

        $l21 = interfaceinvoke $r30.<ucar.nc2.iosp.Layout$Chunk: long getDestElem()>();

        $i22 = (int) $l21;

        $i23 = interfaceinvoke $r30.<ucar.nc2.iosp.Layout$Chunk: int getNelems()>();

        virtualinvoke r7.<ucar.unidata.io.RandomAccessFile: void readLong(long[],int,int)>(r48, $i22, $i23);

        goto label21;

     label22:
        return r48;

     label23:
        $r21 = <ucar.ma2.DataType: ucar.ma2.DataType STRUCTURE>;

        if r0 != $r21 goto label26;

        $r27 = (byte[]) r2;

        r49 = (byte[]) $r27;

        $i13 = interfaceinvoke r3.<ucar.nc2.iosp.Layout: int getElemSize()>();

     label24:
        $z2 = interfaceinvoke r3.<ucar.nc2.iosp.Layout: boolean hasNext()>();

        if $z2 == 0 goto label25;

        $r28 = interfaceinvoke r3.<ucar.nc2.iosp.Layout: ucar.nc2.iosp.Layout$Chunk next()>();

        virtualinvoke r7.<ucar.unidata.io.RandomAccessFile: void order(int)>(i0);

        $l14 = interfaceinvoke $r28.<ucar.nc2.iosp.Layout$Chunk: long getSrcPos()>();

        virtualinvoke r7.<ucar.unidata.io.RandomAccessFile: void seek(long)>($l14);

        $l15 = interfaceinvoke $r28.<ucar.nc2.iosp.Layout$Chunk: long getDestElem()>();

        $i16 = (int) $l15;

        $i17 = $i16 * $i13;

        $i18 = interfaceinvoke $r28.<ucar.nc2.iosp.Layout$Chunk: int getNelems()>();

        $i19 = $i18 * $i13;

        virtualinvoke r7.<ucar.unidata.io.RandomAccessFile: int read(byte[],int,int)>(r49, $i17, $i19);

        goto label24;

     label25:
        return r49;

     label26:
        $r22 = new java.lang.IllegalStateException;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unknown type= ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r26);

        throw $r22;
    }

    public static java.lang.Object readDataFill(ucar.unidata.io.PositioningDataInputStream, ucar.nc2.iosp.Layout, ucar.ma2.DataType, java.lang.Object) throws java.io.IOException
    {
        ucar.nc2.iosp.Layout r1;
        ucar.ma2.DataType r2;
        long $l0, $l2;
        ucar.unidata.io.PositioningDataInputStream r3;
        int $i1, $i3;
        java.lang.Object r0, $r4, $r5;

        r3 := @parameter0: ucar.unidata.io.PositioningDataInputStream;

        r1 := @parameter1: ucar.nc2.iosp.Layout;

        r2 := @parameter2: ucar.ma2.DataType;

        r0 := @parameter3: java.lang.Object;

        if r0 != null goto label1;

        $l2 = interfaceinvoke r1.<ucar.nc2.iosp.Layout: long getTotalNelems()>();

        $i3 = (int) $l2;

        $r5 = staticinvoke <ucar.nc2.iosp.IospHelper: java.lang.Object makePrimitiveArray(int,ucar.ma2.DataType)>($i3, r2);

        goto label2;

     label1:
        $l0 = interfaceinvoke r1.<ucar.nc2.iosp.Layout: long getTotalNelems()>();

        $i1 = (int) $l0;

        $r5 = staticinvoke <ucar.nc2.iosp.IospHelper: java.lang.Object makePrimitiveArray(int,ucar.ma2.DataType,java.lang.Object)>($i1, r2, r0);

     label2:
        $r4 = staticinvoke <ucar.nc2.iosp.IospHelper: java.lang.Object readData(ucar.unidata.io.PositioningDataInputStream,ucar.nc2.iosp.Layout,ucar.ma2.DataType,java.lang.Object)>(r3, r1, r2, $r5);

        return $r4;
    }

    public static java.lang.Object readData(ucar.unidata.io.PositioningDataInputStream, ucar.nc2.iosp.Layout, ucar.ma2.DataType, java.lang.Object) throws java.io.IOException
    {
        byte[] $r24, $r41, $r42, r46;
        java.lang.StringBuilder $r34, $r36, $r39;
        double[] $r28, r44;
        long $l0, $l1, $l4, $l5, $l8, $l9, $l13, $l14, $l19, $l20, $l23, $l24, $l27, $l28;
        float[] $r30, r43;
        java.lang.String $r38, $r40;
        char[] $r5;
        java.lang.IllegalStateException $r23;
        ucar.nc2.iosp.Layout r3;
        int[] $r16, $r32;
        ucar.nc2.iosp.Layout$Chunk $r6, $r13, $r17, $r25, $r27, $r29, $r31;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        ucar.ma2.DataType r0, $r1, $r4, $r8, $r9, $r10, $r11, $r14, $r15, $r18, $r19, $r20, $r21, $r22;
        ucar.unidata.io.PositioningDataInputStream r7;
        short[] $r12, $r33;
        long[] $r26, r45;
        int $i2, $i3, $i6, $i7, $i10, $i11, $i12, $i15, $i16, $i17, $i18, $i21, $i22, $i25, $i26, $i29, $i30;
        java.io.PrintStream $r35;
        java.lang.Object r2;
        java.lang.Class $r37;

        r7 := @parameter0: ucar.unidata.io.PositioningDataInputStream;

        r3 := @parameter1: ucar.nc2.iosp.Layout;

        r0 := @parameter2: ucar.ma2.DataType;

        r2 := @parameter3: java.lang.Object;

        $z0 = <ucar.nc2.iosp.IospHelper: boolean showLayoutTypes>;

        if $z0 == 0 goto label01;

        $r35 = <java.lang.System: java.io.PrintStream out>;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("***PositioningDataInputStream LayoutType=");

        $r37 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        $r38 = virtualinvoke $r37.<java.lang.Class: java.lang.String getName()>();

        $r39 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r38);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r35.<java.io.PrintStream: void println(java.lang.String)>($r40);

     label01:
        $r1 = <ucar.ma2.DataType: ucar.ma2.DataType BYTE>;

        if r0 == $r1 goto label02;

        $r8 = <ucar.ma2.DataType: ucar.ma2.DataType CHAR>;

        if r0 == $r8 goto label02;

        $r9 = <ucar.ma2.DataType: ucar.ma2.DataType OPAQUE>;

        if r0 == $r9 goto label02;

        $r10 = <ucar.ma2.DataType: ucar.ma2.DataType ENUM1>;

        if r0 != $r10 goto label06;

     label02:
        $r41 = (byte[]) r2;

        $r42 = (byte[]) $r41;

     label03:
        $z5 = interfaceinvoke r3.<ucar.nc2.iosp.Layout: boolean hasNext()>();

        if $z5 == 0 goto label04;

        $r6 = interfaceinvoke r3.<ucar.nc2.iosp.Layout: ucar.nc2.iosp.Layout$Chunk next()>();

        $l0 = interfaceinvoke $r6.<ucar.nc2.iosp.Layout$Chunk: long getSrcPos()>();

        $l1 = interfaceinvoke $r6.<ucar.nc2.iosp.Layout$Chunk: long getDestElem()>();

        $i2 = (int) $l1;

        $i3 = interfaceinvoke $r6.<ucar.nc2.iosp.Layout$Chunk: int getNelems()>();

        virtualinvoke r7.<ucar.unidata.io.PositioningDataInputStream: void read(long,byte[],int,int)>($l0, $r42, $i2, $i3);

        goto label03;

     label04:
        $r4 = <ucar.ma2.DataType: ucar.ma2.DataType CHAR>;

        if r0 != $r4 goto label05;

        $r5 = staticinvoke <ucar.nc2.iosp.IospHelper: char[] convertByteToChar(byte[])>($r42);

        return $r5;

     label05:
        return $r42;

     label06:
        $r11 = <ucar.ma2.DataType: ucar.ma2.DataType SHORT>;

        if r0 == $r11 goto label07;

        $r14 = <ucar.ma2.DataType: ucar.ma2.DataType ENUM2>;

        if r0 != $r14 goto label10;

     label07:
        $r12 = (short[]) r2;

        $r33 = (short[]) $r12;

     label08:
        $z6 = interfaceinvoke r3.<ucar.nc2.iosp.Layout: boolean hasNext()>();

        if $z6 == 0 goto label09;

        $r13 = interfaceinvoke r3.<ucar.nc2.iosp.Layout: ucar.nc2.iosp.Layout$Chunk next()>();

        $l4 = interfaceinvoke $r13.<ucar.nc2.iosp.Layout$Chunk: long getSrcPos()>();

        $l5 = interfaceinvoke $r13.<ucar.nc2.iosp.Layout$Chunk: long getDestElem()>();

        $i6 = (int) $l5;

        $i7 = interfaceinvoke $r13.<ucar.nc2.iosp.Layout$Chunk: int getNelems()>();

        virtualinvoke r7.<ucar.unidata.io.PositioningDataInputStream: void readShort(long,short[],int,int)>($l4, $r33, $i6, $i7);

        goto label08;

     label09:
        return $r33;

     label10:
        $r15 = <ucar.ma2.DataType: ucar.ma2.DataType INT>;

        if r0 == $r15 goto label11;

        $r18 = <ucar.ma2.DataType: ucar.ma2.DataType ENUM4>;

        if r0 != $r18 goto label14;

     label11:
        $r16 = (int[]) r2;

        $r32 = (int[]) $r16;

     label12:
        $z7 = interfaceinvoke r3.<ucar.nc2.iosp.Layout: boolean hasNext()>();

        if $z7 == 0 goto label13;

        $r17 = interfaceinvoke r3.<ucar.nc2.iosp.Layout: ucar.nc2.iosp.Layout$Chunk next()>();

        $l8 = interfaceinvoke $r17.<ucar.nc2.iosp.Layout$Chunk: long getSrcPos()>();

        $l9 = interfaceinvoke $r17.<ucar.nc2.iosp.Layout$Chunk: long getDestElem()>();

        $i10 = (int) $l9;

        $i11 = interfaceinvoke $r17.<ucar.nc2.iosp.Layout$Chunk: int getNelems()>();

        virtualinvoke r7.<ucar.unidata.io.PositioningDataInputStream: void readInt(long,int[],int,int)>($l8, $r32, $i10, $i11);

        goto label12;

     label13:
        return $r32;

     label14:
        $r19 = <ucar.ma2.DataType: ucar.ma2.DataType FLOAT>;

        if r0 != $r19 goto label17;

        $r30 = (float[]) r2;

        r43 = (float[]) $r30;

     label15:
        $z4 = interfaceinvoke r3.<ucar.nc2.iosp.Layout: boolean hasNext()>();

        if $z4 == 0 goto label16;

        $r31 = interfaceinvoke r3.<ucar.nc2.iosp.Layout: ucar.nc2.iosp.Layout$Chunk next()>();

        $l27 = interfaceinvoke $r31.<ucar.nc2.iosp.Layout$Chunk: long getSrcPos()>();

        $l28 = interfaceinvoke $r31.<ucar.nc2.iosp.Layout$Chunk: long getDestElem()>();

        $i29 = (int) $l28;

        $i30 = interfaceinvoke $r31.<ucar.nc2.iosp.Layout$Chunk: int getNelems()>();

        virtualinvoke r7.<ucar.unidata.io.PositioningDataInputStream: void readFloat(long,float[],int,int)>($l27, r43, $i29, $i30);

        goto label15;

     label16:
        return r43;

     label17:
        $r20 = <ucar.ma2.DataType: ucar.ma2.DataType DOUBLE>;

        if r0 != $r20 goto label20;

        $r28 = (double[]) r2;

        r44 = (double[]) $r28;

     label18:
        $z3 = interfaceinvoke r3.<ucar.nc2.iosp.Layout: boolean hasNext()>();

        if $z3 == 0 goto label19;

        $r29 = interfaceinvoke r3.<ucar.nc2.iosp.Layout: ucar.nc2.iosp.Layout$Chunk next()>();

        $l23 = interfaceinvoke $r29.<ucar.nc2.iosp.Layout$Chunk: long getSrcPos()>();

        $l24 = interfaceinvoke $r29.<ucar.nc2.iosp.Layout$Chunk: long getDestElem()>();

        $i25 = (int) $l24;

        $i26 = interfaceinvoke $r29.<ucar.nc2.iosp.Layout$Chunk: int getNelems()>();

        virtualinvoke r7.<ucar.unidata.io.PositioningDataInputStream: void readDouble(long,double[],int,int)>($l23, r44, $i25, $i26);

        goto label18;

     label19:
        return r44;

     label20:
        $r21 = <ucar.ma2.DataType: ucar.ma2.DataType LONG>;

        if r0 != $r21 goto label23;

        $r26 = (long[]) r2;

        r45 = (long[]) $r26;

     label21:
        $z2 = interfaceinvoke r3.<ucar.nc2.iosp.Layout: boolean hasNext()>();

        if $z2 == 0 goto label22;

        $r27 = interfaceinvoke r3.<ucar.nc2.iosp.Layout: ucar.nc2.iosp.Layout$Chunk next()>();

        $l19 = interfaceinvoke $r27.<ucar.nc2.iosp.Layout$Chunk: long getSrcPos()>();

        $l20 = interfaceinvoke $r27.<ucar.nc2.iosp.Layout$Chunk: long getDestElem()>();

        $i21 = (int) $l20;

        $i22 = interfaceinvoke $r27.<ucar.nc2.iosp.Layout$Chunk: int getNelems()>();

        virtualinvoke r7.<ucar.unidata.io.PositioningDataInputStream: void readLong(long,long[],int,int)>($l19, r45, $i21, $i22);

        goto label21;

     label22:
        return r45;

     label23:
        $r22 = <ucar.ma2.DataType: ucar.ma2.DataType STRUCTURE>;

        if r0 != $r22 goto label26;

        $i12 = interfaceinvoke r3.<ucar.nc2.iosp.Layout: int getElemSize()>();

        $r24 = (byte[]) r2;

        r46 = (byte[]) $r24;

     label24:
        $z1 = interfaceinvoke r3.<ucar.nc2.iosp.Layout: boolean hasNext()>();

        if $z1 == 0 goto label25;

        $r25 = interfaceinvoke r3.<ucar.nc2.iosp.Layout: ucar.nc2.iosp.Layout$Chunk next()>();

        $l13 = interfaceinvoke $r25.<ucar.nc2.iosp.Layout$Chunk: long getSrcPos()>();

        $l14 = interfaceinvoke $r25.<ucar.nc2.iosp.Layout$Chunk: long getDestElem()>();

        $i15 = (int) $l14;

        $i16 = $i15 * $i12;

        $i17 = interfaceinvoke $r25.<ucar.nc2.iosp.Layout$Chunk: int getNelems()>();

        $i18 = $i17 * $i12;

        virtualinvoke r7.<ucar.unidata.io.PositioningDataInputStream: void read(long,byte[],int,int)>($l13, r46, $i16, $i18);

        goto label24;

     label25:
        return r46;

     label26:
        $r23 = new java.lang.IllegalStateException;

        specialinvoke $r23.<java.lang.IllegalStateException: void <init>()>();

        throw $r23;
    }

    public static java.lang.Object readDataFill(ucar.nc2.iosp.LayoutBB, ucar.ma2.DataType, java.lang.Object) throws java.io.IOException
    {
        ucar.ma2.DataType r1, $r2;
        long $l0, $l4, l5;
        ucar.nc2.iosp.LayoutBB r0;
        int $i1, $i2, $i3;
        java.lang.Object r3, $r4, $r5;

        r0 := @parameter0: ucar.nc2.iosp.LayoutBB;

        r1 := @parameter1: ucar.ma2.DataType;

        r3 := @parameter2: java.lang.Object;

        $l0 = interfaceinvoke r0.<ucar.nc2.iosp.LayoutBB: long getTotalNelems()>();

        l5 = $l0;

        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType STRUCTURE>;

        if r1 != $r2 goto label1;

        $i3 = interfaceinvoke r0.<ucar.nc2.iosp.LayoutBB: int getElemSize()>();

        $l4 = (long) $i3;

        l5 = $l0 * $l4;

     label1:
        if r3 != null goto label2;

        $i2 = (int) l5;

        $r5 = staticinvoke <ucar.nc2.iosp.IospHelper: java.lang.Object makePrimitiveArray(int,ucar.ma2.DataType)>($i2, r1);

        goto label3;

     label2:
        $i1 = (int) l5;

        $r5 = staticinvoke <ucar.nc2.iosp.IospHelper: java.lang.Object makePrimitiveArray(int,ucar.ma2.DataType,java.lang.Object)>($i1, r1, r3);

     label3:
        $r4 = staticinvoke <ucar.nc2.iosp.IospHelper: java.lang.Object readData(ucar.nc2.iosp.LayoutBB,ucar.ma2.DataType,java.lang.Object)>(r0, r1, $r5);

        return $r4;
    }

    public static java.lang.Object readData(ucar.nc2.iosp.LayoutBB, ucar.ma2.DataType, java.lang.Object) throws java.io.IOException
    {
        byte[] $r25, $r46, $r47, r51;
        ucar.nc2.iosp.LayoutBB r3;
        byte $b4, $b23;
        java.lang.StringBuilder $r39, $r41, $r44;
        double[] $r31, r49;
        long $l1, $l6, $l11, $l18, $l25, $l28, $l30, $l34;
        float[] $r34, r48;
        short $s9;
        java.lang.String $r43, $r45;
        char[] $r5;
        java.nio.LongBuffer $r30;
        java.lang.IllegalStateException $r24;
        java.nio.FloatBuffer $r36;
        java.nio.ByteBuffer $r7, $r27;
        int[] $r16, $r37;
        java.nio.IntBuffer $r18;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        ucar.ma2.DataType r0, $r1, $r4, $r8, $r9, $r10, $r14, $r15, $r19, $r20, $r21, $r22, $r23;
        float $f0;
        short[] $r11, $r38;
        java.nio.ShortBuffer $r13;
        long[] $r28, r50;
        int $i0, $i2, $i3, $i5, $i7, $i8, $i10, $i12, $i13, $i14, $i15, $i16, $i17, $i19, $i20, $i21, $i22, $i24, $i26, $i27, $i29, $i31, $i32, $i33, $i35, $i36, i37, i38, i39, i40, i41, i42, i43, i44, i45, i46, i47, i48, i49, i50;
        double $d0;
        java.io.PrintStream $r40;
        ucar.nc2.iosp.LayoutBB$Chunk $r6, $r12, $r17, $r26, $r29, $r32, $r35;
        java.nio.DoubleBuffer $r33;
        java.lang.Object r2;
        java.lang.Class $r42;

        r3 := @parameter0: ucar.nc2.iosp.LayoutBB;

        r0 := @parameter1: ucar.ma2.DataType;

        r2 := @parameter2: java.lang.Object;

        $z0 = <ucar.nc2.iosp.IospHelper: boolean showLayoutTypes>;

        if $z0 == 0 goto label01;

        $r40 = <java.lang.System: java.io.PrintStream out>;

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        $r41 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("***BB LayoutType=");

        $r42 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        $r43 = virtualinvoke $r42.<java.lang.Class: java.lang.String getName()>();

        $r44 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r43);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r40.<java.io.PrintStream: void println(java.lang.String)>($r45);

     label01:
        $r1 = <ucar.ma2.DataType: ucar.ma2.DataType BYTE>;

        if r0 == $r1 goto label02;

        $r8 = <ucar.ma2.DataType: ucar.ma2.DataType CHAR>;

        if r0 == $r8 goto label02;

        $r9 = <ucar.ma2.DataType: ucar.ma2.DataType ENUM1>;

        if r0 != $r9 goto label08;

     label02:
        $r46 = (byte[]) r2;

        $r47 = (byte[]) $r46;

     label03:
        $z5 = interfaceinvoke r3.<ucar.nc2.iosp.LayoutBB: boolean hasNext()>();

        if $z5 == 0 goto label06;

        $r6 = interfaceinvoke r3.<ucar.nc2.iosp.LayoutBB: ucar.nc2.iosp.LayoutBB$Chunk next()>();

        $r7 = interfaceinvoke $r6.<ucar.nc2.iosp.LayoutBB$Chunk: java.nio.ByteBuffer getByteBuffer()>();

        $i0 = interfaceinvoke $r6.<ucar.nc2.iosp.LayoutBB$Chunk: int getSrcElem()>();

        virtualinvoke $r7.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i0);

        $l1 = interfaceinvoke $r6.<ucar.nc2.iosp.LayoutBB$Chunk: long getDestElem()>();

        i37 = (int) $l1;

        i38 = 0;

     label04:
        $i2 = interfaceinvoke $r6.<ucar.nc2.iosp.LayoutBB$Chunk: int getNelems()>();

        if i38 >= $i2 goto label05;

        $i3 = i37;

        i37 = i37 + 1;

        $b4 = virtualinvoke $r7.<java.nio.ByteBuffer: byte get()>();

        $r47[$i3] = $b4;

        i38 = i38 + 1;

        goto label04;

     label05:
        goto label03;

     label06:
        $r4 = <ucar.ma2.DataType: ucar.ma2.DataType CHAR>;

        if r0 != $r4 goto label07;

        $r5 = staticinvoke <ucar.nc2.iosp.IospHelper: char[] convertByteToChar(byte[])>($r47);

        return $r5;

     label07:
        return $r47;

     label08:
        $r10 = <ucar.ma2.DataType: ucar.ma2.DataType SHORT>;

        if r0 == $r10 goto label09;

        $r14 = <ucar.ma2.DataType: ucar.ma2.DataType ENUM2>;

        if r0 != $r14 goto label14;

     label09:
        $r11 = (short[]) r2;

        $r38 = (short[]) $r11;

     label10:
        $z6 = interfaceinvoke r3.<ucar.nc2.iosp.LayoutBB: boolean hasNext()>();

        if $z6 == 0 goto label13;

        $r12 = interfaceinvoke r3.<ucar.nc2.iosp.LayoutBB: ucar.nc2.iosp.LayoutBB$Chunk next()>();

        $r13 = interfaceinvoke $r12.<ucar.nc2.iosp.LayoutBB$Chunk: java.nio.ShortBuffer getShortBuffer()>();

        $i5 = interfaceinvoke $r12.<ucar.nc2.iosp.LayoutBB$Chunk: int getSrcElem()>();

        virtualinvoke $r13.<java.nio.ShortBuffer: java.nio.Buffer position(int)>($i5);

        $l6 = interfaceinvoke $r12.<ucar.nc2.iosp.LayoutBB$Chunk: long getDestElem()>();

        i39 = (int) $l6;

        i40 = 0;

     label11:
        $i7 = interfaceinvoke $r12.<ucar.nc2.iosp.LayoutBB$Chunk: int getNelems()>();

        if i40 >= $i7 goto label12;

        $i8 = i39;

        i39 = i39 + 1;

        $s9 = virtualinvoke $r13.<java.nio.ShortBuffer: short get()>();

        $r38[$i8] = $s9;

        i40 = i40 + 1;

        goto label11;

     label12:
        goto label10;

     label13:
        return $r38;

     label14:
        $r15 = <ucar.ma2.DataType: ucar.ma2.DataType INT>;

        if r0 == $r15 goto label15;

        $r19 = <ucar.ma2.DataType: ucar.ma2.DataType ENUM4>;

        if r0 != $r19 goto label20;

     label15:
        $r16 = (int[]) r2;

        $r37 = (int[]) $r16;

     label16:
        $z7 = interfaceinvoke r3.<ucar.nc2.iosp.LayoutBB: boolean hasNext()>();

        if $z7 == 0 goto label19;

        $r17 = interfaceinvoke r3.<ucar.nc2.iosp.LayoutBB: ucar.nc2.iosp.LayoutBB$Chunk next()>();

        $r18 = interfaceinvoke $r17.<ucar.nc2.iosp.LayoutBB$Chunk: java.nio.IntBuffer getIntBuffer()>();

        $i10 = interfaceinvoke $r17.<ucar.nc2.iosp.LayoutBB$Chunk: int getSrcElem()>();

        virtualinvoke $r18.<java.nio.IntBuffer: java.nio.Buffer position(int)>($i10);

        $l11 = interfaceinvoke $r17.<ucar.nc2.iosp.LayoutBB$Chunk: long getDestElem()>();

        i41 = (int) $l11;

        i42 = 0;

     label17:
        $i12 = interfaceinvoke $r17.<ucar.nc2.iosp.LayoutBB$Chunk: int getNelems()>();

        if i42 >= $i12 goto label18;

        $i13 = i41;

        i41 = i41 + 1;

        $i14 = virtualinvoke $r18.<java.nio.IntBuffer: int get()>();

        $r37[$i13] = $i14;

        i42 = i42 + 1;

        goto label17;

     label18:
        goto label16;

     label19:
        return $r37;

     label20:
        $r20 = <ucar.ma2.DataType: ucar.ma2.DataType FLOAT>;

        if r0 != $r20 goto label25;

        $r34 = (float[]) r2;

        r48 = (float[]) $r34;

     label21:
        $z4 = interfaceinvoke r3.<ucar.nc2.iosp.LayoutBB: boolean hasNext()>();

        if $z4 == 0 goto label24;

        $r35 = interfaceinvoke r3.<ucar.nc2.iosp.LayoutBB: ucar.nc2.iosp.LayoutBB$Chunk next()>();

        $r36 = interfaceinvoke $r35.<ucar.nc2.iosp.LayoutBB$Chunk: java.nio.FloatBuffer getFloatBuffer()>();

        $i33 = interfaceinvoke $r35.<ucar.nc2.iosp.LayoutBB$Chunk: int getSrcElem()>();

        virtualinvoke $r36.<java.nio.FloatBuffer: java.nio.Buffer position(int)>($i33);

        $l34 = interfaceinvoke $r35.<ucar.nc2.iosp.LayoutBB$Chunk: long getDestElem()>();

        i43 = (int) $l34;

        i44 = 0;

     label22:
        $i35 = interfaceinvoke $r35.<ucar.nc2.iosp.LayoutBB$Chunk: int getNelems()>();

        if i44 >= $i35 goto label23;

        $i36 = i43;

        i43 = i43 + 1;

        $f0 = virtualinvoke $r36.<java.nio.FloatBuffer: float get()>();

        r48[$i36] = $f0;

        i44 = i44 + 1;

        goto label22;

     label23:
        goto label21;

     label24:
        return r48;

     label25:
        $r21 = <ucar.ma2.DataType: ucar.ma2.DataType DOUBLE>;

        if r0 != $r21 goto label30;

        $r31 = (double[]) r2;

        r49 = (double[]) $r31;

     label26:
        $z3 = interfaceinvoke r3.<ucar.nc2.iosp.LayoutBB: boolean hasNext()>();

        if $z3 == 0 goto label29;

        $r32 = interfaceinvoke r3.<ucar.nc2.iosp.LayoutBB: ucar.nc2.iosp.LayoutBB$Chunk next()>();

        $r33 = interfaceinvoke $r32.<ucar.nc2.iosp.LayoutBB$Chunk: java.nio.DoubleBuffer getDoubleBuffer()>();

        $i29 = interfaceinvoke $r32.<ucar.nc2.iosp.LayoutBB$Chunk: int getSrcElem()>();

        virtualinvoke $r33.<java.nio.DoubleBuffer: java.nio.Buffer position(int)>($i29);

        $l30 = interfaceinvoke $r32.<ucar.nc2.iosp.LayoutBB$Chunk: long getDestElem()>();

        i45 = (int) $l30;

        i46 = 0;

     label27:
        $i31 = interfaceinvoke $r32.<ucar.nc2.iosp.LayoutBB$Chunk: int getNelems()>();

        if i46 >= $i31 goto label28;

        $i32 = i45;

        i45 = i45 + 1;

        $d0 = virtualinvoke $r33.<java.nio.DoubleBuffer: double get()>();

        r49[$i32] = $d0;

        i46 = i46 + 1;

        goto label27;

     label28:
        goto label26;

     label29:
        return r49;

     label30:
        $r22 = <ucar.ma2.DataType: ucar.ma2.DataType LONG>;

        if r0 != $r22 goto label35;

        $r28 = (long[]) r2;

        r50 = (long[]) $r28;

     label31:
        $z2 = interfaceinvoke r3.<ucar.nc2.iosp.LayoutBB: boolean hasNext()>();

        if $z2 == 0 goto label34;

        $r29 = interfaceinvoke r3.<ucar.nc2.iosp.LayoutBB: ucar.nc2.iosp.LayoutBB$Chunk next()>();

        $r30 = interfaceinvoke $r29.<ucar.nc2.iosp.LayoutBB$Chunk: java.nio.LongBuffer getLongBuffer()>();

        $i24 = interfaceinvoke $r29.<ucar.nc2.iosp.LayoutBB$Chunk: int getSrcElem()>();

        virtualinvoke $r30.<java.nio.LongBuffer: java.nio.Buffer position(int)>($i24);

        $l25 = interfaceinvoke $r29.<ucar.nc2.iosp.LayoutBB$Chunk: long getDestElem()>();

        i47 = (int) $l25;

        i48 = 0;

     label32:
        $i26 = interfaceinvoke $r29.<ucar.nc2.iosp.LayoutBB$Chunk: int getNelems()>();

        if i48 >= $i26 goto label33;

        $i27 = i47;

        i47 = i47 + 1;

        $l28 = virtualinvoke $r30.<java.nio.LongBuffer: long get()>();

        r50[$i27] = $l28;

        i48 = i48 + 1;

        goto label32;

     label33:
        goto label31;

     label34:
        return r50;

     label35:
        $r23 = <ucar.ma2.DataType: ucar.ma2.DataType STRUCTURE>;

        if r0 != $r23 goto label40;

        $r25 = (byte[]) r2;

        r51 = (byte[]) $r25;

        $i15 = interfaceinvoke r3.<ucar.nc2.iosp.LayoutBB: int getElemSize()>();

     label36:
        $z1 = interfaceinvoke r3.<ucar.nc2.iosp.LayoutBB: boolean hasNext()>();

        if $z1 == 0 goto label39;

        $r26 = interfaceinvoke r3.<ucar.nc2.iosp.LayoutBB: ucar.nc2.iosp.LayoutBB$Chunk next()>();

        $r27 = interfaceinvoke $r26.<ucar.nc2.iosp.LayoutBB$Chunk: java.nio.ByteBuffer getByteBuffer()>();

        $i16 = interfaceinvoke $r26.<ucar.nc2.iosp.LayoutBB$Chunk: int getSrcElem()>();

        $i17 = $i16 * $i15;

        virtualinvoke $r27.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i17);

        $l18 = interfaceinvoke $r26.<ucar.nc2.iosp.LayoutBB$Chunk: long getDestElem()>();

        $i19 = (int) $l18;

        i49 = $i19 * $i15;

        i50 = 0;

     label37:
        $i20 = interfaceinvoke $r26.<ucar.nc2.iosp.LayoutBB$Chunk: int getNelems()>();

        $i21 = $i20 * $i15;

        if i50 >= $i21 goto label38;

        $i22 = i49;

        i49 = i49 + 1;

        $b23 = virtualinvoke $r27.<java.nio.ByteBuffer: byte get()>();

        r51[$i22] = $b23;

        i50 = i50 + 1;

        goto label37;

     label38:
        goto label36;

     label39:
        return r51;

     label40:
        $r24 = new java.lang.IllegalStateException;

        specialinvoke $r24.<java.lang.IllegalStateException: void <init>()>();

        throw $r24;
    }

    public static long copyToByteChannel(ucar.ma2.Array, java.nio.channels.WritableByteChannel) throws java.io.IOException
    {
        byte[] $r22, $r27;
        byte $b10;
        java.io.DataOutputStream $r33, $r34;
        java.lang.StringBuilder $r16, $r18, $r35;
        long $l2, $l4, $l7, $l9, $l14, $l15, l16, l17, l18, l19, $l20;
        short $s12;
        java.lang.String $r17, $r19, r31;
        java.lang.UnsupportedOperationException $r36;
        ucar.ma2.Array r0;
        java.nio.channels.WritableByteChannel r2;
        char[] $r25, $r26;
        ucar.ma2.ArrayStructure $r30;
        java.nio.ByteBuffer r32;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        float $f0;
        int $i0, $i1, $i3, $i5, $i6, $i8, $i11, $i13, $i21, $i22;
        double $d0;
        java.io.OutputStream $r3, $r29;
        ucar.ma2.IndexIterator $r4;
        java.lang.Class $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r23;
        java.lang.Object $r20, $r21, $r24;

        r0 := @parameter0: ucar.ma2.Array;

        r2 := @parameter1: java.nio.channels.WritableByteChannel;

        $z0 = r0 instanceof ucar.ma2.ArrayStructure;

        if $z0 == 0 goto label01;

        $r33 = new java.io.DataOutputStream;

        $r29 = staticinvoke <java.nio.channels.Channels: java.io.OutputStream newOutputStream(java.nio.channels.WritableByteChannel)>(r2);

        specialinvoke $r33.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r29);

        $r30 = (ucar.ma2.ArrayStructure) r0;

        $l15 = staticinvoke <ucar.nc2.stream.NcStream: long encodeArrayStructure(ucar.ma2.ArrayStructure,java.io.OutputStream)>($r30, $r33);

        return $l15;

     label01:
        $r34 = new java.io.DataOutputStream;

        $r3 = staticinvoke <java.nio.channels.Channels: java.io.OutputStream newOutputStream(java.nio.channels.WritableByteChannel)>(r2);

        specialinvoke $r34.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r3);

        $r4 = virtualinvoke r0.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

        $r5 = virtualinvoke r0.<ucar.ma2.Array: java.lang.Class getElementType()>();

        $r6 = <java.lang.Double: java.lang.Class TYPE>;

        if $r5 != $r6 goto label03;

     label02:
        $z10 = interfaceinvoke $r4.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z10 == 0 goto label23;

        $d0 = interfaceinvoke $r4.<ucar.ma2.IndexIterator: double getDoubleNext()>();

        virtualinvoke $r34.<java.io.DataOutputStream: void writeDouble(double)>($d0);

        goto label02;

     label03:
        $r7 = <java.lang.Float: java.lang.Class TYPE>;

        if $r5 != $r7 goto label05;

     label04:
        $z9 = interfaceinvoke $r4.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z9 == 0 goto label23;

        $f0 = interfaceinvoke $r4.<ucar.ma2.IndexIterator: float getFloatNext()>();

        virtualinvoke $r34.<java.io.DataOutputStream: void writeFloat(float)>($f0);

        goto label04;

     label05:
        $r8 = <java.lang.Long: java.lang.Class TYPE>;

        if $r5 != $r8 goto label07;

     label06:
        $z8 = interfaceinvoke $r4.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z8 == 0 goto label23;

        $l14 = interfaceinvoke $r4.<ucar.ma2.IndexIterator: long getLongNext()>();

        virtualinvoke $r34.<java.io.DataOutputStream: void writeLong(long)>($l14);

        goto label06;

     label07:
        $r9 = <java.lang.Integer: java.lang.Class TYPE>;

        if $r5 != $r9 goto label09;

     label08:
        $z7 = interfaceinvoke $r4.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z7 == 0 goto label23;

        $i13 = interfaceinvoke $r4.<ucar.ma2.IndexIterator: int getIntNext()>();

        virtualinvoke $r34.<java.io.DataOutputStream: void writeInt(int)>($i13);

        goto label08;

     label09:
        $r10 = <java.lang.Short: java.lang.Class TYPE>;

        if $r5 != $r10 goto label11;

     label10:
        $z6 = interfaceinvoke $r4.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z6 == 0 goto label23;

        $s12 = interfaceinvoke $r4.<ucar.ma2.IndexIterator: short getShortNext()>();

        $i21 = (int) $s12;

        virtualinvoke $r34.<java.io.DataOutputStream: void writeShort(int)>($i21);

        goto label10;

     label11:
        $r11 = <java.lang.Character: java.lang.Class TYPE>;

        if $r5 != $r11 goto label12;

        $r23 = <java.lang.Character: java.lang.Class TYPE>;

        $r24 = virtualinvoke r0.<ucar.ma2.Array: java.lang.Object get1DJavaArray(java.lang.Class)>($r23);

        $r25 = (char[]) $r24;

        $r26 = (char[]) $r25;

        $r27 = staticinvoke <ucar.nc2.iosp.IospHelper: byte[] convertCharToByte(char[])>($r26);

        $i11 = lengthof $r27;

        virtualinvoke $r34.<java.io.DataOutputStream: void write(byte[],int,int)>($r27, 0, $i11);

        goto label23;

     label12:
        $r12 = <java.lang.Byte: java.lang.Class TYPE>;

        if $r5 != $r12 goto label14;

     label13:
        $z5 = interfaceinvoke $r4.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z5 == 0 goto label23;

        $b10 = interfaceinvoke $r4.<ucar.ma2.IndexIterator: byte getByteNext()>();

        $i22 = (int) $b10;

        virtualinvoke $r34.<java.io.DataOutputStream: void writeByte(int)>($i22);

        goto label13;

     label14:
        $r13 = <java.lang.Boolean: java.lang.Class TYPE>;

        if $r5 != $r13 goto label16;

     label15:
        $z3 = interfaceinvoke $r4.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z3 == 0 goto label23;

        $z4 = interfaceinvoke $r4.<ucar.ma2.IndexIterator: boolean getBooleanNext()>();

        virtualinvoke $r34.<java.io.DataOutputStream: void writeBoolean(boolean)>($z4);

        goto label15;

     label16:
        if $r5 != class "Ljava/lang/String;" goto label19;

        l16 = 0L;

     label17:
        $z2 = interfaceinvoke $r4.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z2 == 0 goto label18;

        $r21 = interfaceinvoke $r4.<ucar.ma2.IndexIterator: java.lang.Object getObjectNext()>();

        r31 = (java.lang.String) $r21;

        $i5 = virtualinvoke r31.<java.lang.String: int length()>();

        $i6 = staticinvoke <ucar.nc2.stream.NcStream: int writeVInt(java.io.OutputStream,int)>($r34, $i5);

        $l7 = (long) $i6;

        l17 = l16 + $l7;

        $r22 = virtualinvoke r31.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        virtualinvoke $r34.<java.io.DataOutputStream: void write(byte[])>($r22);

        $i8 = lengthof $r22;

        $l9 = (long) $i8;

        l16 = l17 + $l9;

        goto label17;

     label18:
        return l16;

     label19:
        if $r5 != class "Ljava/nio/ByteBuffer;" goto label22;

        l18 = 0L;

     label20:
        $z1 = interfaceinvoke $r4.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z1 == 0 goto label21;

        $r20 = interfaceinvoke $r4.<ucar.ma2.IndexIterator: java.lang.Object getObjectNext()>();

        r32 = (java.nio.ByteBuffer) $r20;

        $i0 = virtualinvoke r32.<java.nio.ByteBuffer: int limit()>();

        $i1 = staticinvoke <ucar.nc2.stream.NcStream: int writeVInt(java.io.OutputStream,int)>($r34, $i0);

        $l2 = (long) $i1;

        l19 = l18 + $l2;

        virtualinvoke r32.<java.nio.ByteBuffer: java.nio.Buffer rewind()>();

        interfaceinvoke r2.<java.nio.channels.WritableByteChannel: int write(java.nio.ByteBuffer)>(r32);

        $i3 = virtualinvoke r32.<java.nio.ByteBuffer: int limit()>();

        $l4 = (long) $i3;

        l18 = l19 + $l4;

        goto label20;

     label21:
        return l18;

     label22:
        $r36 = new java.lang.UnsupportedOperationException;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class type = ");

        $r17 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r36.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r19);

        throw $r36;

     label23:
        $l20 = virtualinvoke r0.<ucar.ma2.Array: long getSizeBytes()>();

        return $l20;
    }

    public static ucar.ma2.ArrayStructureBB makeArrayBB(ucar.ma2.ArrayStructure) throws java.io.IOException
    {
        ucar.ma2.ArrayStructure r0;
        ucar.ma2.StructureDataIterator $r5;
        ucar.ma2.StructureData $r6;
        ucar.ma2.StructureMembers $r1, $r2;
        ucar.ma2.ArrayStructureBB $r3, $r7;
        int[] $r4;
        boolean $z0, $z1;

        r0 := @parameter0: ucar.ma2.ArrayStructure;

        $z0 = r0 instanceof ucar.ma2.ArrayStructureBB;

        if $z0 == 0 goto label1;

        $r7 = (ucar.ma2.ArrayStructureBB) r0;

        return $r7;

     label1:
        $r1 = virtualinvoke r0.<ucar.ma2.ArrayStructure: ucar.ma2.StructureMembers getStructureMembers()>();

        $r2 = new ucar.ma2.StructureMembers;

        specialinvoke $r2.<ucar.ma2.StructureMembers: void <init>(ucar.ma2.StructureMembers)>($r1);

        $r3 = new ucar.ma2.ArrayStructureBB;

        $r4 = virtualinvoke r0.<ucar.ma2.ArrayStructure: int[] getShape()>();

        specialinvoke $r3.<ucar.ma2.ArrayStructureBB: void <init>(ucar.ma2.StructureMembers,int[])>($r2, $r4);

        staticinvoke <ucar.ma2.ArrayStructureBB: int setOffsets(ucar.ma2.StructureMembers)>($r2);

        $r5 = virtualinvoke r0.<ucar.ma2.ArrayStructure: ucar.ma2.StructureDataIterator getStructureDataIterator()>();

     label2:
        $z1 = interfaceinvoke $r5.<ucar.ma2.StructureDataIterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r6 = interfaceinvoke $r5.<ucar.ma2.StructureDataIterator: ucar.ma2.StructureData next()>();

        staticinvoke <ucar.nc2.iosp.IospHelper: int copyToArrayBB(ucar.ma2.StructureData,ucar.ma2.ArrayStructureBB)>($r6, $r3);

        goto label2;

     label3:
        return $r3;
    }

    public static ucar.ma2.ArrayStructureBB copyToArrayBB(ucar.ma2.StructureData)
    {
        ucar.ma2.StructureData r0;
        ucar.ma2.StructureMembers $r1, $r2;
        ucar.ma2.ArrayStructureBB $r4;
        int[] $r5;
        int $i0;
        java.nio.ByteBuffer $r3;

        r0 := @parameter0: ucar.ma2.StructureData;

        $r1 = virtualinvoke r0.<ucar.ma2.StructureData: ucar.ma2.StructureMembers getStructureMembers()>();

        $r2 = new ucar.ma2.StructureMembers;

        specialinvoke $r2.<ucar.ma2.StructureMembers: void <init>(ucar.ma2.StructureMembers)>($r1);

        $i0 = virtualinvoke $r2.<ucar.ma2.StructureMembers: int getStructureSize()>();

        $r3 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i0);

        $r4 = new ucar.ma2.ArrayStructureBB;

        $r5 = newarray (int)[1];

        $r5[0] = 1;

        specialinvoke $r4.<ucar.ma2.ArrayStructureBB: void <init>(ucar.ma2.StructureMembers,int[],java.nio.ByteBuffer,int)>($r2, $r5, $r3, 0);

        staticinvoke <ucar.ma2.ArrayStructureBB: int setOffsets(ucar.ma2.StructureMembers)>($r2);

        staticinvoke <ucar.nc2.iosp.IospHelper: int copyToArrayBB(ucar.ma2.StructureData,ucar.ma2.ArrayStructureBB)>(r0, $r4);

        return $r4;
    }

    private static int copyToArrayBB(ucar.ma2.StructureData, ucar.ma2.ArrayStructureBB)
    {
        byte[] $r12, $r13;
        ucar.ma2.StructureMembers$Member r7;
        byte $b7, $b15, $b16;
        ucar.ma2.StructureMembers $r1;
        java.lang.StringBuilder $r20, $r21, $r23, $r28, $r29, $r31;
        double[] $r16;
        long $l6, $l13;
        float[] $r17;
        short $s8, $s17;
        java.lang.String $r22, $r24, $r26, $r30, $r32;
        char[] $r11;
        java.lang.IllegalStateException $r19, $r27;
        java.nio.ByteBuffer $r3;
        ucar.ma2.StructureData r0;
        ucar.ma2.ArrayStructureBB r2;
        int[] $r9, $r15, $r25;
        boolean $z0, $z1;
        ucar.ma2.DataType $r8;
        java.util.List $r4;
        float $f0, $f1;
        short[] $r14;
        java.lang.String[] $r18;
        long[] $r10;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i9, $i10, $i11, $i12, $i18, $i19, i20, i21, i22, i23, i24, i25;
        double $d0, $d1;
        java.util.Iterator $r5;
        char $c14;
        java.lang.Object $r6;

        r0 := @parameter0: ucar.ma2.StructureData;

        r2 := @parameter1: ucar.ma2.ArrayStructureBB;

        $r1 = virtualinvoke r0.<ucar.ma2.StructureData: ucar.ma2.StructureMembers getStructureMembers()>();

        $r3 = virtualinvoke r2.<ucar.ma2.ArrayStructureBB: java.nio.ByteBuffer getByteBuffer()>();

        $i0 = virtualinvoke $r3.<java.nio.ByteBuffer: int limit()>();

        $r4 = virtualinvoke $r1.<ucar.ma2.StructureMembers: java.util.List getMembers()>();

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label34;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (ucar.ma2.StructureMembers$Member) $r6;

        $r8 = virtualinvoke r7.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $z1 = virtualinvoke r7.<ucar.ma2.StructureMembers$Member: boolean isScalar()>();

        if $z1 == 0 goto label11;

        $r25 = <ucar.nc2.iosp.IospHelper$1: int[] $SwitchMap$ucar$ma2$DataType>;

        $i11 = virtualinvoke $r8.<ucar.ma2.DataType: int ordinal()>();

        $i12 = $r25[$i11];

        tableswitch($i12)
        {
            case 1: goto label02;
            case 2: goto label03;
            case 3: goto label04;
            case 4: goto label05;
            case 5: goto label05;
            case 6: goto label06;
            case 7: goto label06;
            case 8: goto label07;
            case 9: goto label07;
            case 10: goto label08;
            case 11: goto label09;
            default: goto label10;
        };

     label02:
        $r26 = virtualinvoke r0.<ucar.ma2.StructureData: java.lang.String getScalarString(ucar.ma2.StructureMembers$Member)>(r7);

        $i19 = virtualinvoke r2.<ucar.ma2.ArrayStructureBB: int addObjectToHeap(java.lang.Object)>($r26);

        virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i19);

        goto label33;

     label03:
        $f1 = virtualinvoke r0.<ucar.ma2.StructureData: float getScalarFloat(ucar.ma2.StructureMembers$Member)>(r7);

        virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.ByteBuffer putFloat(float)>($f1);

        goto label33;

     label04:
        $d1 = virtualinvoke r0.<ucar.ma2.StructureData: double getScalarDouble(ucar.ma2.StructureMembers$Member)>(r7);

        virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.ByteBuffer putDouble(double)>($d1);

        goto label33;

     label05:
        $i18 = virtualinvoke r0.<ucar.ma2.StructureData: int getScalarInt(ucar.ma2.StructureMembers$Member)>(r7);

        virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i18);

        goto label33;

     label06:
        $s17 = virtualinvoke r0.<ucar.ma2.StructureData: short getScalarShort(ucar.ma2.StructureMembers$Member)>(r7);

        virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.ByteBuffer putShort(short)>($s17);

        goto label33;

     label07:
        $b16 = virtualinvoke r0.<ucar.ma2.StructureData: byte getScalarByte(ucar.ma2.StructureMembers$Member)>(r7);

        virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>($b16);

        goto label33;

     label08:
        $c14 = virtualinvoke r0.<ucar.ma2.StructureData: char getScalarChar(ucar.ma2.StructureMembers$Member)>(r7);

        $b15 = (byte) $c14;

        virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>($b15);

        goto label33;

     label09:
        $l13 = virtualinvoke r0.<ucar.ma2.StructureData: long getScalarLong(ucar.ma2.StructureMembers$Member)>(r7);

        virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.ByteBuffer putLong(long)>($l13);

        goto label33;

     label10:
        $r27 = new java.lang.IllegalStateException;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("scalar ");

        $r30 = virtualinvoke $r8.<ucar.ma2.DataType: java.lang.String toString()>();

        $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r32);

        throw $r27;

     label11:
        $i3 = virtualinvoke r7.<ucar.ma2.StructureMembers$Member: int getSize()>();

        $r9 = <ucar.nc2.iosp.IospHelper$1: int[] $SwitchMap$ucar$ma2$DataType>;

        $i4 = virtualinvoke $r8.<ucar.ma2.DataType: int ordinal()>();

        $i5 = $r9[$i4];

        tableswitch($i5)
        {
            case 1: goto label12;
            case 2: goto label13;
            case 3: goto label16;
            case 4: goto label19;
            case 5: goto label19;
            case 6: goto label22;
            case 7: goto label22;
            case 8: goto label25;
            case 9: goto label25;
            case 10: goto label28;
            case 11: goto label29;
            case 12: goto label33;
            default: goto label32;
        };

     label12:
        $r18 = virtualinvoke r0.<ucar.ma2.StructureData: java.lang.String[] getJavaArrayString(ucar.ma2.StructureMembers$Member)>(r7);

        $i10 = virtualinvoke r2.<ucar.ma2.ArrayStructureBB: int addObjectToHeap(java.lang.Object)>($r18);

        virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i10);

        goto label33;

     label13:
        $r17 = virtualinvoke r0.<ucar.ma2.StructureData: float[] getJavaArrayFloat(ucar.ma2.StructureMembers$Member)>(r7);

        i20 = 0;

     label14:
        if i20 >= $i3 goto label15;

        $f0 = $r17[i20];

        virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.ByteBuffer putFloat(float)>($f0);

        i20 = i20 + 1;

        goto label14;

     label15:
        goto label33;

     label16:
        $r16 = virtualinvoke r0.<ucar.ma2.StructureData: double[] getJavaArrayDouble(ucar.ma2.StructureMembers$Member)>(r7);

        i21 = 0;

     label17:
        if i21 >= $i3 goto label18;

        $d0 = $r16[i21];

        virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.ByteBuffer putDouble(double)>($d0);

        i21 = i21 + 1;

        goto label17;

     label18:
        goto label33;

     label19:
        $r15 = virtualinvoke r0.<ucar.ma2.StructureData: int[] getJavaArrayInt(ucar.ma2.StructureMembers$Member)>(r7);

        i22 = 0;

     label20:
        if i22 >= $i3 goto label21;

        $i9 = $r15[i22];

        virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i9);

        i22 = i22 + 1;

        goto label20;

     label21:
        goto label33;

     label22:
        $r14 = virtualinvoke r0.<ucar.ma2.StructureData: short[] getJavaArrayShort(ucar.ma2.StructureMembers$Member)>(r7);

        i23 = 0;

     label23:
        if i23 >= $i3 goto label24;

        $s8 = $r14[i23];

        virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.ByteBuffer putShort(short)>($s8);

        i23 = i23 + 1;

        goto label23;

     label24:
        goto label33;

     label25:
        $r13 = virtualinvoke r0.<ucar.ma2.StructureData: byte[] getJavaArrayByte(ucar.ma2.StructureMembers$Member)>(r7);

        i24 = 0;

     label26:
        if i24 >= $i3 goto label27;

        $b7 = $r13[i24];

        virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>($b7);

        i24 = i24 + 1;

        goto label26;

     label27:
        goto label33;

     label28:
        $r11 = virtualinvoke r0.<ucar.ma2.StructureData: char[] getJavaArrayChar(ucar.ma2.StructureMembers$Member)>(r7);

        $r12 = staticinvoke <ucar.nc2.iosp.IospHelper: byte[] convertCharToByte(char[])>($r11);

        virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>($r12);

        goto label33;

     label29:
        $r10 = virtualinvoke r0.<ucar.ma2.StructureData: long[] getJavaArrayLong(ucar.ma2.StructureMembers$Member)>(r7);

        i25 = 0;

     label30:
        if i25 >= $i3 goto label31;

        $l6 = $r10[i25];

        virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.ByteBuffer putLong(long)>($l6);

        i25 = i25 + 1;

        goto label30;

     label31:
        goto label33;

     label32:
        $r19 = new java.lang.IllegalStateException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("array ");

        $r22 = virtualinvoke $r8.<ucar.ma2.DataType: java.lang.String toString()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r24);

        throw $r19;

     label33:
        goto label01;

     label34:
        $i1 = virtualinvoke $r3.<java.nio.ByteBuffer: int limit()>();

        $i2 = $i1 - $i0;

        return $i2;
    }

    public static java.lang.Object makePrimitiveArray(int, ucar.ma2.DataType)
    {
        byte[] $r14;
        double[] $r24;
        float[] $r22;
        long[] $r20;
        int[] $r18;
        int i0;
        ucar.ma2.DataType r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        java.lang.Object r13, $r15, $r17, $r19, $r21, $r23, $r25;
        short[] $r16;

        i0 := @parameter0: int;

        r0 := @parameter1: ucar.ma2.DataType;

        r13 = null;

        $r1 = <ucar.ma2.DataType: ucar.ma2.DataType BYTE>;

        if r0 == $r1 goto label1;

        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType CHAR>;

        if r0 == $r2 goto label1;

        $r3 = <ucar.ma2.DataType: ucar.ma2.DataType ENUM1>;

        if r0 == $r3 goto label1;

        $r4 = <ucar.ma2.DataType: ucar.ma2.DataType OPAQUE>;

        if r0 == $r4 goto label1;

        $r5 = <ucar.ma2.DataType: ucar.ma2.DataType STRUCTURE>;

        if r0 != $r5 goto label2;

     label1:
        $r14 = newarray (byte)[i0];

        $r15 = (java.lang.Object) $r14;

        r13 = $r15;

        goto label9;

     label2:
        $r6 = <ucar.ma2.DataType: ucar.ma2.DataType SHORT>;

        if r0 == $r6 goto label3;

        $r7 = <ucar.ma2.DataType: ucar.ma2.DataType ENUM2>;

        if r0 != $r7 goto label4;

     label3:
        $r16 = newarray (short)[i0];

        $r17 = (java.lang.Object) $r16;

        r13 = $r17;

        goto label9;

     label4:
        $r8 = <ucar.ma2.DataType: ucar.ma2.DataType INT>;

        if r0 == $r8 goto label5;

        $r9 = <ucar.ma2.DataType: ucar.ma2.DataType ENUM4>;

        if r0 != $r9 goto label6;

     label5:
        $r18 = newarray (int)[i0];

        $r19 = (java.lang.Object) $r18;

        r13 = $r19;

        goto label9;

     label6:
        $r10 = <ucar.ma2.DataType: ucar.ma2.DataType LONG>;

        if r0 != $r10 goto label7;

        $r20 = newarray (long)[i0];

        $r21 = (java.lang.Object) $r20;

        r13 = $r21;

        goto label9;

     label7:
        $r11 = <ucar.ma2.DataType: ucar.ma2.DataType FLOAT>;

        if r0 != $r11 goto label8;

        $r22 = newarray (float)[i0];

        $r23 = (java.lang.Object) $r22;

        r13 = $r23;

        goto label9;

     label8:
        $r12 = <ucar.ma2.DataType: ucar.ma2.DataType DOUBLE>;

        if r0 != $r12 goto label9;

        $r24 = newarray (double)[i0];

        $r25 = (java.lang.Object) $r24;

        r13 = $r25;

     label9:
        return r13;
    }

    public static java.lang.Object makePrimitiveArray(int, ucar.ma2.DataType, java.lang.Object)
    {
        java.lang.IllegalStateException $r17;
        byte[] $r18, $r25, $r26, r32, r33;
        java.lang.Float $r21;
        java.lang.Integer $r10;
        byte $b5, $b6, $b7, $b9, $b10;
        java.lang.Long $r22;
        int[] $r23;
        java.lang.Short $r7;
        java.lang.Byte $r27;
        ucar.ma2.DataType r0, $r1, $r3, $r4, $r5, $r6, $r8, $r9, $r11, $r12, $r13, $r14, $r15, $r16;
        float $f0;
        short[] $r24;
        java.lang.Double $r20;
        double[] r30;
        long $l8;
        float[] r29;
        java.lang.String[] r31;
        short $s1;
        long[] r28;
        int i0, $i2, $i3, $i4, i11, i12, i13, i14, i15, i16, i17, i18, i19;
        java.lang.String $r19;
        double $d0, $d1;
        java.lang.Object r2;

        i0 := @parameter0: int;

        r0 := @parameter1: ucar.ma2.DataType;

        r2 := @parameter2: java.lang.Object;

        $r1 = <ucar.ma2.DataType: ucar.ma2.DataType BYTE>;

        if r0 == $r1 goto label01;

        $r3 = <ucar.ma2.DataType: ucar.ma2.DataType CHAR>;

        if r0 == $r3 goto label01;

        $r4 = <ucar.ma2.DataType: ucar.ma2.DataType ENUM1>;

        if r0 != $r4 goto label04;

     label01:
        $r26 = newarray (byte)[i0];

        $r27 = (java.lang.Byte) r2;

        $b10 = virtualinvoke $r27.<java.lang.Byte: byte byteValue()>();

        if $b10 == 0 goto label03;

        i11 = 0;

     label02:
        if i11 >= i0 goto label03;

        $r26[i11] = $b10;

        i11 = i11 + 1;

        goto label02;

     label03:
        return $r26;

     label04:
        $r5 = <ucar.ma2.DataType: ucar.ma2.DataType OPAQUE>;

        if r0 != $r5 goto label05;

        $r25 = newarray (byte)[i0];

        return $r25;

     label05:
        $r6 = <ucar.ma2.DataType: ucar.ma2.DataType SHORT>;

        if r0 == $r6 goto label06;

        $r8 = <ucar.ma2.DataType: ucar.ma2.DataType ENUM2>;

        if r0 != $r8 goto label09;

     label06:
        $r24 = newarray (short)[i0];

        $r7 = (java.lang.Short) r2;

        $s1 = virtualinvoke $r7.<java.lang.Short: short shortValue()>();

        if $s1 == 0 goto label08;

        i12 = 0;

     label07:
        if i12 >= i0 goto label08;

        $r24[i12] = $s1;

        i12 = i12 + 1;

        goto label07;

     label08:
        return $r24;

     label09:
        $r9 = <ucar.ma2.DataType: ucar.ma2.DataType INT>;

        if r0 == $r9 goto label10;

        $r11 = <ucar.ma2.DataType: ucar.ma2.DataType ENUM4>;

        if r0 != $r11 goto label13;

     label10:
        $r23 = newarray (int)[i0];

        $r10 = (java.lang.Integer) r2;

        $i2 = virtualinvoke $r10.<java.lang.Integer: int intValue()>();

        if $i2 == 0 goto label12;

        i13 = 0;

     label11:
        if i13 >= i0 goto label12;

        $r23[i13] = $i2;

        i13 = i13 + 1;

        goto label11;

     label12:
        return $r23;

     label13:
        $r12 = <ucar.ma2.DataType: ucar.ma2.DataType LONG>;

        if r0 != $r12 goto label16;

        r28 = newarray (long)[i0];

        $r22 = (java.lang.Long) r2;

        $l8 = virtualinvoke $r22.<java.lang.Long: long longValue()>();

        $b9 = $l8 cmp 0L;

        if $b9 == 0 goto label15;

        i14 = 0;

     label14:
        if i14 >= i0 goto label15;

        r28[i14] = $l8;

        i14 = i14 + 1;

        goto label14;

     label15:
        return r28;

     label16:
        $r13 = <ucar.ma2.DataType: ucar.ma2.DataType FLOAT>;

        if r0 != $r13 goto label19;

        r29 = newarray (float)[i0];

        $r21 = (java.lang.Float) r2;

        $f0 = virtualinvoke $r21.<java.lang.Float: float floatValue()>();

        $d1 = (double) $f0;

        $b7 = $d1 cmpl 0.0;

        if $b7 == 0 goto label18;

        i15 = 0;

     label17:
        if i15 >= i0 goto label18;

        r29[i15] = $f0;

        i15 = i15 + 1;

        goto label17;

     label18:
        return r29;

     label19:
        $r14 = <ucar.ma2.DataType: ucar.ma2.DataType DOUBLE>;

        if r0 != $r14 goto label22;

        r30 = newarray (double)[i0];

        $r20 = (java.lang.Double) r2;

        $d0 = virtualinvoke $r20.<java.lang.Double: double doubleValue()>();

        $b6 = $d0 cmpl 0.0;

        if $b6 == 0 goto label21;

        i16 = 0;

     label20:
        if i16 >= i0 goto label21;

        r30[i16] = $d0;

        i16 = i16 + 1;

        goto label20;

     label21:
        return r30;

     label22:
        $r15 = <ucar.ma2.DataType: ucar.ma2.DataType STRING>;

        if r0 != $r15 goto label25;

        r31 = newarray (java.lang.String)[i0];

        i17 = 0;

     label23:
        if i17 >= i0 goto label24;

        $r19 = (java.lang.String) r2;

        r31[i17] = $r19;

        i17 = i17 + 1;

        goto label23;

     label24:
        return r31;

     label25:
        $r16 = <ucar.ma2.DataType: ucar.ma2.DataType STRUCTURE>;

        if r0 != $r16 goto label30;

        r32 = newarray (byte)[i0];

        $r18 = (byte[]) r2;

        r33 = (byte[]) $r18;

        i18 = 0;

     label26:
        if i18 >= i0 goto label29;

        i19 = 0;

     label27:
        $i3 = lengthof r33;

        if i19 >= $i3 goto label28;

        $i4 = i18;

        i18 = i18 + 1;

        $b5 = r33[i19];

        r32[$i4] = $b5;

        i19 = i19 + 1;

        goto label27;

     label28:
        goto label26;

     label29:
        return r32;

     label30:
        $r17 = new java.lang.IllegalStateException;

        specialinvoke $r17.<java.lang.IllegalStateException: void <init>()>();

        throw $r17;
    }

    public static char[] convertByteToChar(byte[])
    {
        byte[] r0;
        short $s2;
        byte $b1;
        int i0, i4;
        char[] r1;
        char $c3;

        r0 := @parameter0: byte[];

        i0 = lengthof r0;

        r1 = newarray (char)[i0];

        i4 = 0;

     label1:
        if i4 >= i0 goto label2;

        $b1 = r0[i4];

        $s2 = staticinvoke <ucar.ma2.DataType: short unsignedByteToShort(byte)>($b1);

        $c3 = (char) $s2;

        r1[i4] = $c3;

        i4 = i4 + 1;

        goto label1;

     label2:
        return r1;
    }

    public static byte[] convertCharToByte(char[])
    {
        byte[] r1;
        byte $b2;
        int i0, i3;
        char[] r0;
        char $c1;

        r0 := @parameter0: char[];

        i0 = lengthof r0;

        r1 = newarray (byte)[i0];

        i3 = 0;

     label1:
        if i3 >= i0 goto label2;

        $c1 = r0[i3];

        $b2 = (byte) $c1;

        r1[i3] = $b2;

        i3 = i3 + 1;

        goto label1;

     label2:
        return r1;
    }

    public static long transferData(ucar.ma2.Array, java.nio.channels.WritableByteChannel) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        byte $b0;
        java.io.DataOutputStream $r20;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        float $f0;
        java.lang.StringBuilder $r16, $r18, $r21;
        long $l4;
        short $s2;
        int $i3, $i5, $i6, $i7;
        java.lang.String $r17, $r19;
        double $d0;
        java.io.OutputStream $r2;
        java.lang.UnsupportedOperationException $r22;
        ucar.ma2.IndexIterator $r4;
        char $c1;
        ucar.ma2.Array r3;
        java.nio.channels.WritableByteChannel r1;
        java.lang.Class $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13;

        r3 := @parameter0: ucar.ma2.Array;

        r1 := @parameter1: java.nio.channels.WritableByteChannel;

        $r20 = new java.io.DataOutputStream;

        $r2 = staticinvoke <java.nio.channels.Channels: java.io.OutputStream newOutputStream(java.nio.channels.WritableByteChannel)>(r1);

        specialinvoke $r20.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r2);

        $r4 = virtualinvoke r3.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

        $r5 = virtualinvoke r3.<ucar.ma2.Array: java.lang.Class getElementType()>();

        $r6 = <java.lang.Double: java.lang.Class TYPE>;

        if $r5 != $r6 goto label02;

     label01:
        $z8 = interfaceinvoke $r4.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z8 == 0 goto label17;

        $d0 = interfaceinvoke $r4.<ucar.ma2.IndexIterator: double getDoubleNext()>();

        virtualinvoke $r20.<java.io.DataOutputStream: void writeDouble(double)>($d0);

        goto label01;

     label02:
        $r7 = <java.lang.Float: java.lang.Class TYPE>;

        if $r5 != $r7 goto label04;

     label03:
        $z7 = interfaceinvoke $r4.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z7 == 0 goto label17;

        $f0 = interfaceinvoke $r4.<ucar.ma2.IndexIterator: float getFloatNext()>();

        virtualinvoke $r20.<java.io.DataOutputStream: void writeFloat(float)>($f0);

        goto label03;

     label04:
        $r8 = <java.lang.Long: java.lang.Class TYPE>;

        if $r5 != $r8 goto label06;

     label05:
        $z6 = interfaceinvoke $r4.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z6 == 0 goto label17;

        $l4 = interfaceinvoke $r4.<ucar.ma2.IndexIterator: long getLongNext()>();

        virtualinvoke $r20.<java.io.DataOutputStream: void writeLong(long)>($l4);

        goto label05;

     label06:
        $r9 = <java.lang.Integer: java.lang.Class TYPE>;

        if $r5 != $r9 goto label08;

     label07:
        $z5 = interfaceinvoke $r4.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z5 == 0 goto label17;

        $i3 = interfaceinvoke $r4.<ucar.ma2.IndexIterator: int getIntNext()>();

        virtualinvoke $r20.<java.io.DataOutputStream: void writeInt(int)>($i3);

        goto label07;

     label08:
        $r10 = <java.lang.Short: java.lang.Class TYPE>;

        if $r5 != $r10 goto label10;

     label09:
        $z4 = interfaceinvoke $r4.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z4 == 0 goto label17;

        $s2 = interfaceinvoke $r4.<ucar.ma2.IndexIterator: short getShortNext()>();

        $i5 = (int) $s2;

        virtualinvoke $r20.<java.io.DataOutputStream: void writeShort(int)>($i5);

        goto label09;

     label10:
        $r11 = <java.lang.Character: java.lang.Class TYPE>;

        if $r5 != $r11 goto label12;

     label11:
        $z3 = interfaceinvoke $r4.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z3 == 0 goto label17;

        $c1 = interfaceinvoke $r4.<ucar.ma2.IndexIterator: char getCharNext()>();

        $i6 = (int) $c1;

        virtualinvoke $r20.<java.io.DataOutputStream: void writeChar(int)>($i6);

        goto label11;

     label12:
        $r12 = <java.lang.Byte: java.lang.Class TYPE>;

        if $r5 != $r12 goto label14;

     label13:
        $z2 = interfaceinvoke $r4.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z2 == 0 goto label17;

        $b0 = interfaceinvoke $r4.<ucar.ma2.IndexIterator: byte getByteNext()>();

        $i7 = (int) $b0;

        virtualinvoke $r20.<java.io.DataOutputStream: void writeByte(int)>($i7);

        goto label13;

     label14:
        $r13 = <java.lang.Boolean: java.lang.Class TYPE>;

        if $r5 != $r13 goto label16;

     label15:
        $z0 = interfaceinvoke $r4.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z0 == 0 goto label17;

        $z1 = interfaceinvoke $r4.<ucar.ma2.IndexIterator: boolean getBooleanNext()>();

        virtualinvoke $r20.<java.io.DataOutputStream: void writeBoolean(boolean)>($z1);

        goto label15;

     label16:
        $r22 = new java.lang.UnsupportedOperationException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class type = ");

        $r17 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r19);

        throw $r22;

     label17:
        return 0L;
    }

    public static ucar.ma2.Array readSection(ucar.nc2.ParsedSectionSpec) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        ucar.ma2.Section $r2, $r12, $r18;
        ucar.ma2.ArrayStructure r14;
        ucar.nc2.Structure r7, $r11;
        java.util.ArrayList $r0;
        int[] $r4;
        ucar.nc2.Variable $r6, $r9, $r17, r20;
        java.lang.String $r10;
        boolean $z0;
        ucar.ma2.IndexIterator $r16;
        ucar.ma2.DataType $r3;
        ucar.ma2.Array $r5, $r13;
        java.util.List $r19;
        ucar.nc2.ParsedSectionSpec r1, $r8, $r15, r21;

        r1 := @parameter0: ucar.nc2.ParsedSectionSpec;

        r20 = null;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        r21 = r1;

     label1:
        if r21 == null goto label2;

        $r18 = r21.<ucar.nc2.ParsedSectionSpec: ucar.ma2.Section section>;

        $r19 = virtualinvoke $r18.<ucar.ma2.Section: java.util.List getRanges()>();

        interfaceinvoke $r0.<java.util.List: boolean addAll(java.util.Collection)>($r19);

        r20 = r21.<ucar.nc2.ParsedSectionSpec: ucar.nc2.Variable v>;

        r21 = r21.<ucar.nc2.ParsedSectionSpec: ucar.nc2.ParsedSectionSpec child>;

        goto label1;

     label2:
        $r2 = new ucar.ma2.Section;

        specialinvoke $r2.<ucar.ma2.Section: void <init>(java.util.List)>($r0);

        $r3 = virtualinvoke r20.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r4 = virtualinvoke $r2.<ucar.ma2.Section: int[] getShape()>();

        $r5 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(ucar.ma2.DataType,int[])>($r3, $r4);

        $r6 = r1.<ucar.nc2.ParsedSectionSpec: ucar.nc2.Variable v>;

        r7 = (ucar.nc2.Structure) $r6;

        $r8 = r1.<ucar.nc2.ParsedSectionSpec: ucar.nc2.ParsedSectionSpec child>;

        $r9 = $r8.<ucar.nc2.ParsedSectionSpec: ucar.nc2.Variable v>;

        $r10 = virtualinvoke $r9.<ucar.nc2.Variable: java.lang.String getShortName()>();

        $r11 = virtualinvoke r7.<ucar.nc2.Structure: ucar.nc2.Structure select(java.lang.String)>($r10);

        $r12 = r1.<ucar.nc2.ParsedSectionSpec: ucar.ma2.Section section>;

        $r13 = virtualinvoke $r11.<ucar.nc2.Structure: ucar.ma2.Array read(ucar.ma2.Section)>($r12);

        r14 = (ucar.ma2.ArrayStructure) $r13;

        $r15 = r1.<ucar.nc2.ParsedSectionSpec: ucar.nc2.ParsedSectionSpec child>;

        $r16 = virtualinvoke $r5.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

        staticinvoke <ucar.nc2.iosp.IospHelper: void extractSection(ucar.nc2.ParsedSectionSpec,ucar.ma2.ArrayStructure,ucar.ma2.IndexIterator)>($r15, r14, $r16);

        $r17 = r1.<ucar.nc2.ParsedSectionSpec: ucar.nc2.Variable v>;

        $z0 = virtualinvoke $r17.<ucar.nc2.Variable: boolean isUnsigned()>();

        virtualinvoke $r5.<ucar.ma2.Array: void setUnsigned(boolean)>($z0);

        return $r5;
    }

    private static void extractSection(ucar.nc2.ParsedSectionSpec, ucar.ma2.ArrayStructure, ucar.ma2.IndexIterator) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        ucar.ma2.Section $r1, $r17;
        ucar.ma2.ArrayStructure r2, $r9, $r11;
        long $l0, $l1, $l2, $l4, $l6;
        ucar.ma2.StructureMembers$Member $r5;
        byte $b3, $b5, $b7;
        int i8, $i9;
        ucar.nc2.Variable $r3, $r14;
        java.lang.String $r4;
        boolean $z0;
        ucar.ma2.IndexIterator r8, $r16;
        ucar.ma2.DataType $r15;
        ucar.ma2.Array $r6, r19;
        ucar.ma2.ArraySequence $r12;
        java.util.List $r18;
        ucar.nc2.ParsedSectionSpec r0, $r7, $r10, $r13;

        r0 := @parameter0: ucar.nc2.ParsedSectionSpec;

        r2 := @parameter1: ucar.ma2.ArrayStructure;

        r8 := @parameter2: ucar.ma2.IndexIterator;

        $r1 = r0.<ucar.nc2.ParsedSectionSpec: ucar.ma2.Section section>;

        $l0 = virtualinvoke $r1.<ucar.ma2.Section: long computeSize()>();

        $r3 = r0.<ucar.nc2.ParsedSectionSpec: ucar.nc2.Variable v>;

        $r4 = virtualinvoke $r3.<ucar.nc2.Variable: java.lang.String getShortName()>();

        $r5 = virtualinvoke r2.<ucar.ma2.ArrayStructure: ucar.ma2.StructureMembers$Member findMember(java.lang.String)>($r4);

        i8 = 0;

     label1:
        $l1 = (long) i8;

        $l2 = virtualinvoke r2.<ucar.ma2.ArrayStructure: long getSize()>();

        $b3 = $l1 cmp $l2;

        $i9 = (int) $b3;

        if $i9 >= 0 goto label7;

        $r6 = virtualinvoke r2.<ucar.ma2.ArrayStructure: ucar.ma2.Array getArray(int,ucar.ma2.StructureMembers$Member)>(i8, $r5);

        r19 = $r6;

        $r7 = r0.<ucar.nc2.ParsedSectionSpec: ucar.nc2.ParsedSectionSpec child>;

        if $r7 != null goto label3;

        $l6 = virtualinvoke $r6.<ucar.ma2.Array: long getSize()>();

        $b7 = $l0 cmp $l6;

        if $b7 == 0 goto label2;

        $r17 = r0.<ucar.nc2.ParsedSectionSpec: ucar.ma2.Section section>;

        $r18 = virtualinvoke $r17.<ucar.ma2.Section: java.util.List getRanges()>();

        r19 = virtualinvoke $r6.<ucar.ma2.Array: ucar.ma2.Array section(java.util.List)>($r18);

     label2:
        $r14 = r0.<ucar.nc2.ParsedSectionSpec: ucar.nc2.Variable v>;

        $r15 = virtualinvoke $r14.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r16 = virtualinvoke r19.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

        staticinvoke <ucar.ma2.MAMath: void copy(ucar.ma2.DataType,ucar.ma2.IndexIterator,ucar.ma2.IndexIterator)>($r15, $r16, r8);

        goto label6;

     label3:
        $z0 = $r6 instanceof ucar.ma2.ArraySequence;

        if $z0 == 0 goto label4;

        $r13 = r0.<ucar.nc2.ParsedSectionSpec: ucar.nc2.ParsedSectionSpec child>;

        $r12 = (ucar.ma2.ArraySequence) $r6;

        staticinvoke <ucar.nc2.iosp.IospHelper: void extractSectionFromSequence(ucar.nc2.ParsedSectionSpec,ucar.ma2.ArraySequence,ucar.ma2.IndexIterator)>($r13, $r12, r8);

        goto label6;

     label4:
        $l4 = virtualinvoke $r6.<ucar.ma2.Array: long getSize()>();

        $b5 = $l0 cmp $l4;

        if $b5 == 0 goto label5;

        $r11 = (ucar.ma2.ArrayStructure) $r6;

        r19 = staticinvoke <ucar.nc2.iosp.IospHelper: ucar.ma2.ArrayStructure sectionArrayStructure(ucar.nc2.ParsedSectionSpec,ucar.ma2.ArrayStructure,ucar.ma2.StructureMembers$Member)>(r0, $r11, $r5);

     label5:
        $r10 = r0.<ucar.nc2.ParsedSectionSpec: ucar.nc2.ParsedSectionSpec child>;

        $r9 = (ucar.ma2.ArrayStructure) r19;

        staticinvoke <ucar.nc2.iosp.IospHelper: void extractSection(ucar.nc2.ParsedSectionSpec,ucar.ma2.ArrayStructure,ucar.ma2.IndexIterator)>($r10, $r9, r8);

     label6:
        i8 = i8 + 1;

        goto label1;

     label7:
        return;
    }

    private static void extractSectionFromSequence(ucar.nc2.ParsedSectionSpec, ucar.ma2.ArraySequence, ucar.ma2.IndexIterator) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        ucar.ma2.IndexIterator $r11, r12;
        ucar.ma2.StructureDataIterator $r1;
        ucar.ma2.DataType $r10;
        ucar.ma2.Array $r9;
        ucar.ma2.StructureMembers$Member $r6;
        ucar.ma2.StructureData $r2;
        ucar.ma2.ArraySequence r0;
        ucar.nc2.ParsedSectionSpec r3;
        ucar.nc2.Variable $r4, $r7;
        java.lang.String $r5, $r8;
        boolean $z0;

        r3 := @parameter0: ucar.nc2.ParsedSectionSpec;

        r0 := @parameter1: ucar.ma2.ArraySequence;

        r12 := @parameter2: ucar.ma2.IndexIterator;

        $r1 = virtualinvoke r0.<ucar.ma2.ArraySequence: ucar.ma2.StructureDataIterator getStructureDataIterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<ucar.ma2.StructureDataIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<ucar.ma2.StructureDataIterator: ucar.ma2.StructureData next()>();

        $r4 = r3.<ucar.nc2.ParsedSectionSpec: ucar.nc2.Variable v>;

        $r5 = virtualinvoke $r4.<ucar.nc2.Variable: java.lang.String getShortName()>();

        $r6 = virtualinvoke r0.<ucar.ma2.ArraySequence: ucar.ma2.StructureMembers$Member findMember(java.lang.String)>($r5);

        $r7 = r3.<ucar.nc2.ParsedSectionSpec: ucar.nc2.Variable v>;

        $r8 = virtualinvoke $r7.<ucar.nc2.Variable: java.lang.String getShortName()>();

        $r9 = virtualinvoke $r2.<ucar.ma2.StructureData: ucar.ma2.Array getArray(java.lang.String)>($r8);

        $r10 = virtualinvoke $r6.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r11 = virtualinvoke $r9.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

        staticinvoke <ucar.ma2.MAMath: void copy(ucar.ma2.DataType,ucar.ma2.IndexIterator,ucar.ma2.IndexIterator)>($r10, $r11, r12);

        goto label1;

     label2:
        return;
    }

    private static ucar.ma2.ArrayStructure sectionArrayStructure(ucar.nc2.ParsedSectionSpec, ucar.ma2.ArrayStructure, ucar.ma2.StructureMembers$Member) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        ucar.ma2.Section $r5, $r8;
        ucar.ma2.ArrayStructure r11;
        ucar.ma2.StructureMembers$Member r1;
        ucar.ma2.StructureData $r12;
        ucar.ma2.ArrayStructureW $r3;
        int[] $r6, $r9;
        int $i0, $i1, i2;
        ucar.nc2.Variable $r7;
        boolean $z0;
        ucar.ma2.Section$Iterator $r10;
        ucar.ma2.StructureMembers $r0, $r2;
        ucar.nc2.ParsedSectionSpec r4;

        r4 := @parameter0: ucar.nc2.ParsedSectionSpec;

        r11 := @parameter1: ucar.ma2.ArrayStructure;

        r1 := @parameter2: ucar.ma2.StructureMembers$Member;

        $r0 = new ucar.ma2.StructureMembers;

        $r2 = virtualinvoke r1.<ucar.ma2.StructureMembers$Member: ucar.ma2.StructureMembers getStructureMembers()>();

        specialinvoke $r0.<ucar.ma2.StructureMembers: void <init>(ucar.ma2.StructureMembers)>($r2);

        $r3 = new ucar.ma2.ArrayStructureW;

        $r5 = r4.<ucar.nc2.ParsedSectionSpec: ucar.ma2.Section section>;

        $r6 = virtualinvoke $r5.<ucar.ma2.Section: int[] getShape()>();

        specialinvoke $r3.<ucar.ma2.ArrayStructureW: void <init>(ucar.ma2.StructureMembers,int[])>($r0, $r6);

        i2 = 0;

        $r8 = r4.<ucar.nc2.ParsedSectionSpec: ucar.ma2.Section section>;

        $r7 = r4.<ucar.nc2.ParsedSectionSpec: ucar.nc2.Variable v>;

        $r9 = virtualinvoke $r7.<ucar.nc2.Variable: int[] getShape()>();

        $r10 = virtualinvoke $r8.<ucar.ma2.Section: ucar.ma2.Section$Iterator getIterator(int[])>($r9);

     label1:
        $z0 = virtualinvoke $r10.<ucar.ma2.Section$Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $i0 = virtualinvoke $r10.<ucar.ma2.Section$Iterator: int next()>();

        $r12 = virtualinvoke r11.<ucar.ma2.ArrayStructure: ucar.ma2.StructureData getStructureData(int)>($i0);

        $i1 = i2;

        i2 = i2 + 1;

        virtualinvoke $r3.<ucar.ma2.ArrayStructureW: void setStructureData(ucar.ma2.StructureData,int)>($r12, $i1);

        goto label1;

     label2:
        return $r3;
    }

    static void <clinit>()
    {
        <ucar.nc2.iosp.IospHelper: boolean showLayoutTypes> = 0;

        return;
    }
}
