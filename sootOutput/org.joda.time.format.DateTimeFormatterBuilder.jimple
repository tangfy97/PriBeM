public class org.joda.time.format.DateTimeFormatterBuilder extends java.lang.Object
{
    private java.util.ArrayList iElementPairs;
    private java.lang.Object iFormatter;

    public void <init>()
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        java.util.ArrayList $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs> = $r1;

        return;
    }

    public org.joda.time.format.DateTimeFormatter toFormatter()
    {
        java.lang.UnsupportedOperationException $r3;
        org.joda.time.format.DateTimeFormatterBuilder r0;
        org.joda.time.format.DateTimeParser r5;
        org.joda.time.format.DateTimeFormatter $r2;
        org.joda.time.format.DateTimePrinter r4;
        java.lang.Object $r1;
        boolean $z0, $z1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $r1 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object getFormatter()>();

        r4 = null;

        $z0 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: boolean isPrinter(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        r4 = (org.joda.time.format.DateTimePrinter) $r1;

     label1:
        r5 = null;

        $z1 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: boolean isParser(java.lang.Object)>($r1);

        if $z1 == 0 goto label2;

        r5 = (org.joda.time.format.DateTimeParser) $r1;

     label2:
        if r4 != null goto label3;

        if r5 == null goto label4;

     label3:
        $r2 = new org.joda.time.format.DateTimeFormatter;

        specialinvoke $r2.<org.joda.time.format.DateTimeFormatter: void <init>(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser)>(r4, r5);

        return $r2;

     label4:
        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Both printing and parsing not supported");

        throw $r3;
    }

    public org.joda.time.format.DateTimePrinter toPrinter()
    {
        java.lang.UnsupportedOperationException $r2;
        org.joda.time.format.DateTimeFormatterBuilder r0;
        org.joda.time.format.DateTimePrinter $r3;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $r1 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object getFormatter()>();

        $z0 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: boolean isPrinter(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $r3 = (org.joda.time.format.DateTimePrinter) $r1;

        return $r3;

     label1:
        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Printing is not supported");

        throw $r2;
    }

    public org.joda.time.format.DateTimeParser toParser()
    {
        java.lang.UnsupportedOperationException $r2;
        org.joda.time.format.DateTimeFormatterBuilder r0;
        org.joda.time.format.DateTimeParser $r3;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $r1 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object getFormatter()>();

        $z0 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: boolean isParser(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $r3 = (org.joda.time.format.DateTimeParser) $r1;

        return $r3;

     label1:
        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Parsing is not supported");

        throw $r2;
    }

    public boolean canBuildFormatter()
    {
        java.lang.Object $r1;
        org.joda.time.format.DateTimeFormatterBuilder r0;
        boolean $z0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $r1 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object getFormatter()>();

        $z0 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: boolean isFormatter(java.lang.Object)>($r1);

        return $z0;
    }

    public boolean canBuildPrinter()
    {
        java.lang.Object $r1;
        org.joda.time.format.DateTimeFormatterBuilder r0;
        boolean $z0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $r1 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object getFormatter()>();

        $z0 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: boolean isPrinter(java.lang.Object)>($r1);

        return $z0;
    }

    public boolean canBuildParser()
    {
        java.lang.Object $r1;
        org.joda.time.format.DateTimeFormatterBuilder r0;
        boolean $z0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $r1 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object getFormatter()>();

        $z0 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: boolean isParser(java.lang.Object)>($r1);

        return $z0;
    }

    public void clear()
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        java.util.ArrayList $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object iFormatter> = null;

        $r1 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs>;

        virtualinvoke $r1.<java.util.ArrayList: void clear()>();

        return;
    }

    public org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)
    {
        org.joda.time.format.DateTimeFormatterBuilder r1, $r4;
        org.joda.time.format.DateTimeParser $r3;
        org.joda.time.format.DateTimeFormatter r0;
        org.joda.time.format.DateTimePrinter $r2;
        java.lang.IllegalArgumentException $r5;

        r1 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        r0 := @parameter0: org.joda.time.format.DateTimeFormatter;

        if r0 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No formatter supplied");

        throw $r5;

     label1:
        $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter getPrinter()>();

        $r3 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser getParser()>();

        $r4 = specialinvoke r1.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser)>($r2, $r3);

        return $r4;
    }

    public org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0, $r2;
        org.joda.time.format.DateTimePrinter r1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        r1 := @parameter0: org.joda.time.format.DateTimePrinter;

        specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: void checkPrinter(org.joda.time.format.DateTimePrinter)>(r1);

        $r2 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser)>(r1, null);

        return $r2;
    }

    public org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeParser)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0, $r2;
        org.joda.time.format.DateTimeParser r1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        r1 := @parameter0: org.joda.time.format.DateTimeParser;

        specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: void checkParser(org.joda.time.format.DateTimeParser)>(r1);

        $r2 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser)>(null, r1);

        return $r2;
    }

    public org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter, org.joda.time.format.DateTimeParser)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0, $r3;
        org.joda.time.format.DateTimeParser r2;
        org.joda.time.format.DateTimePrinter r1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        r1 := @parameter0: org.joda.time.format.DateTimePrinter;

        r2 := @parameter1: org.joda.time.format.DateTimeParser;

        specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: void checkPrinter(org.joda.time.format.DateTimePrinter)>(r1);

        specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: void checkParser(org.joda.time.format.DateTimeParser)>(r2);

        $r3 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser)>(r1, r2);

        return $r3;
    }

    public org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter, org.joda.time.format.DateTimeParser[])
    {
        org.joda.time.format.DateTimeParser $r3, $r7, $r9, $r10;
        org.joda.time.format.DateTimeFormatterBuilder r4, $r6, $r11;
        org.joda.time.format.DateTimeParser[] r1, r2;
        int i0, $i1, i2;
        org.joda.time.format.DateTimeFormatterBuilder$MatchingParser $r5;
        java.lang.IllegalArgumentException $r8, $r12, $r13;
        org.joda.time.format.DateTimePrinter r0;

        r4 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        r0 := @parameter0: org.joda.time.format.DateTimePrinter;

        r1 := @parameter1: org.joda.time.format.DateTimeParser[];

        if r0 == null goto label1;

        specialinvoke r4.<org.joda.time.format.DateTimeFormatterBuilder: void checkPrinter(org.joda.time.format.DateTimePrinter)>(r0);

     label1:
        if r1 != null goto label2;

        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No parsers supplied");

        throw $r13;

     label2:
        i0 = lengthof r1;

        if i0 != 1 goto label4;

        $r9 = r1[0];

        if $r9 != null goto label3;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No parser supplied");

        throw $r12;

     label3:
        $r10 = r1[0];

        $r11 = specialinvoke r4.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser)>(r0, $r10);

        return $r11;

     label4:
        r2 = newarray (org.joda.time.format.DateTimeParser)[i0];

        i2 = 0;

     label5:
        $i1 = i0 - 1;

        if i2 >= $i1 goto label7;

        $r7 = r1[i2];

        r2[i2] = $r7;

        if $r7 != null goto label6;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Incomplete parser array");

        throw $r8;

     label6:
        i2 = i2 + 1;

        goto label5;

     label7:
        $r3 = r1[i2];

        r2[i2] = $r3;

        $r5 = new org.joda.time.format.DateTimeFormatterBuilder$MatchingParser;

        specialinvoke $r5.<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: void <init>(org.joda.time.format.DateTimeParser[])>(r2);

        $r6 = specialinvoke r4.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser)>(r0, $r5);

        return $r6;
    }

    public org.joda.time.format.DateTimeFormatterBuilder appendOptional(org.joda.time.format.DateTimeParser)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0, $r4;
        org.joda.time.format.DateTimeParser r1;
        org.joda.time.format.DateTimeParser[] $r2;
        org.joda.time.format.DateTimeFormatterBuilder$MatchingParser $r3;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        r1 := @parameter0: org.joda.time.format.DateTimeParser;

        specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: void checkParser(org.joda.time.format.DateTimeParser)>(r1);

        $r2 = newarray (org.joda.time.format.DateTimeParser)[2];

        $r2[0] = r1;

        $r2[1] = null;

        $r3 = new org.joda.time.format.DateTimeFormatterBuilder$MatchingParser;

        specialinvoke $r3.<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: void <init>(org.joda.time.format.DateTimeParser[])>($r2);

        $r4 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser)>(null, $r3);

        return $r4;
    }

    private void checkParser(org.joda.time.format.DateTimeParser)
    {
        org.joda.time.format.DateTimeParser r0;
        java.lang.IllegalArgumentException $r1;
        org.joda.time.format.DateTimeFormatterBuilder r2;

        r2 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        r0 := @parameter0: org.joda.time.format.DateTimeParser;

        if r0 != null goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No parser supplied");

        throw $r1;

     label1:
        return;
    }

    private void checkPrinter(org.joda.time.format.DateTimePrinter)
    {
        java.lang.IllegalArgumentException $r1;
        org.joda.time.format.DateTimeFormatterBuilder r2;
        org.joda.time.format.DateTimePrinter r0;

        r2 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        r0 := @parameter0: org.joda.time.format.DateTimePrinter;

        if r0 != null goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No printer supplied");

        throw $r1;

     label1:
        return;
    }

    private org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        java.lang.Object r1;
        java.util.ArrayList $r2, $r3;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        r1 := @parameter0: java.lang.Object;

        r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object iFormatter> = null;

        $r2 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs>;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        $r3 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs>;

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        return r0;
    }

    private org.joda.time.format.DateTimeFormatterBuilder append0(org.joda.time.format.DateTimePrinter, org.joda.time.format.DateTimeParser)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        org.joda.time.format.DateTimeParser r3;
        org.joda.time.format.DateTimePrinter r1;
        java.util.ArrayList $r2, $r4;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        r1 := @parameter0: org.joda.time.format.DateTimePrinter;

        r3 := @parameter1: org.joda.time.format.DateTimeParser;

        r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object iFormatter> = null;

        $r2 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs>;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        $r4 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs>;

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r3);

        return r0;
    }

    public org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0, $r2;
        org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral $r1;
        char c0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        c0 := @parameter0: char;

        $r1 = new org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral;

        specialinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: void <init>(char)>(c0);

        $r2 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>($r1);

        return $r2;
    }

    public org.joda.time.format.DateTimeFormatterBuilder appendLiteral(java.lang.String)
    {
        org.joda.time.format.DateTimeFormatterBuilder r1, $r3, $r5;
        org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral $r2;
        org.joda.time.format.DateTimeFormatterBuilder$StringLiteral $r4;
        char $c1;
        java.lang.IllegalArgumentException $r6;
        int $i0;
        java.lang.String r0;

        r1 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Literal must not be null");

        throw $r6;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        lookupswitch($i0)
        {
            case 0: goto label2;
            case 1: goto label3;
            default: goto label4;
        };

     label2:
        return r1;

     label3:
        $r2 = new org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        specialinvoke $r2.<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: void <init>(char)>($c1);

        $r3 = specialinvoke r1.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>($r2);

        return $r3;

     label4:
        $r4 = new org.joda.time.format.DateTimeFormatterBuilder$StringLiteral;

        specialinvoke $r4.<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: void <init>(java.lang.String)>(r0);

        $r5 = specialinvoke r1.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>($r4);

        return $r5;
    }

    public org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType, int, int)
    {
        org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber $r3;
        org.joda.time.format.DateTimeFormatterBuilder r2, $r4, $r6;
        java.lang.IllegalArgumentException $r1, $r7;
        org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber $r5;
        int i0, i1;
        org.joda.time.DateTimeFieldType r0;

        r2 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        r0 := @parameter0: org.joda.time.DateTimeFieldType;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r0 != null goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Field type must not be null");

        throw $r7;

     label1:
        if i1 >= i0 goto label2;

        i1 = i0;

     label2:
        if i0 < 0 goto label3;

        if i1 > 0 goto label4;

     label3:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r1;

     label4:
        if i0 > 1 goto label5;

        $r5 = new org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber;

        specialinvoke $r5.<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void <init>(org.joda.time.DateTimeFieldType,int,boolean)>(r0, i1, 0);

        $r6 = specialinvoke r2.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>($r5);

        return $r6;

     label5:
        $r3 = new org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber;

        specialinvoke $r3.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void <init>(org.joda.time.DateTimeFieldType,int,boolean,int)>(r0, i1, 0, i0);

        $r4 = specialinvoke r2.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>($r3);

        return $r4;
    }

    public org.joda.time.format.DateTimeFormatterBuilder appendFixedDecimal(org.joda.time.DateTimeFieldType, int)
    {
        org.joda.time.format.DateTimeFormatterBuilder r1, $r3;
        java.lang.IllegalArgumentException $r4, $r9;
        java.lang.StringBuffer $r5, $r6, $r7;
        int i0;
        org.joda.time.DateTimeFieldType r0;
        java.lang.String $r8;
        org.joda.time.format.DateTimeFormatterBuilder$FixedNumber $r2;

        r1 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        r0 := @parameter0: org.joda.time.DateTimeFieldType;

        i0 := @parameter1: int;

        if r0 != null goto label1;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Field type must not be null");

        throw $r9;

     label1:
        if i0 > 0 goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Illegal number of digits: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label2:
        $r2 = new org.joda.time.format.DateTimeFormatterBuilder$FixedNumber;

        specialinvoke $r2.<org.joda.time.format.DateTimeFormatterBuilder$FixedNumber: void <init>(org.joda.time.DateTimeFieldType,int,boolean)>(r0, i0, 0);

        $r3 = specialinvoke r1.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>($r2);

        return $r3;
    }

    public org.joda.time.format.DateTimeFormatterBuilder appendSignedDecimal(org.joda.time.DateTimeFieldType, int, int)
    {
        org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber $r3;
        org.joda.time.format.DateTimeFormatterBuilder r2, $r4, $r6;
        java.lang.IllegalArgumentException $r1, $r7;
        org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber $r5;
        int i0, i1;
        org.joda.time.DateTimeFieldType r0;

        r2 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        r0 := @parameter0: org.joda.time.DateTimeFieldType;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r0 != null goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Field type must not be null");

        throw $r7;

     label1:
        if i1 >= i0 goto label2;

        i1 = i0;

     label2:
        if i0 < 0 goto label3;

        if i1 > 0 goto label4;

     label3:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r1;

     label4:
        if i0 > 1 goto label5;

        $r5 = new org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber;

        specialinvoke $r5.<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void <init>(org.joda.time.DateTimeFieldType,int,boolean)>(r0, i1, 1);

        $r6 = specialinvoke r2.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>($r5);

        return $r6;

     label5:
        $r3 = new org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber;

        specialinvoke $r3.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void <init>(org.joda.time.DateTimeFieldType,int,boolean,int)>(r0, i1, 1, i0);

        $r4 = specialinvoke r2.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>($r3);

        return $r4;
    }

    public org.joda.time.format.DateTimeFormatterBuilder appendFixedSignedDecimal(org.joda.time.DateTimeFieldType, int)
    {
        org.joda.time.format.DateTimeFormatterBuilder r1, $r3;
        java.lang.IllegalArgumentException $r4, $r9;
        java.lang.StringBuffer $r5, $r6, $r7;
        int i0;
        org.joda.time.DateTimeFieldType r0;
        java.lang.String $r8;
        org.joda.time.format.DateTimeFormatterBuilder$FixedNumber $r2;

        r1 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        r0 := @parameter0: org.joda.time.DateTimeFieldType;

        i0 := @parameter1: int;

        if r0 != null goto label1;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Field type must not be null");

        throw $r9;

     label1:
        if i0 > 0 goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Illegal number of digits: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label2:
        $r2 = new org.joda.time.format.DateTimeFormatterBuilder$FixedNumber;

        specialinvoke $r2.<org.joda.time.format.DateTimeFormatterBuilder$FixedNumber: void <init>(org.joda.time.DateTimeFieldType,int,boolean)>(r0, i0, 1);

        $r3 = specialinvoke r1.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>($r2);

        return $r3;
    }

    public org.joda.time.format.DateTimeFormatterBuilder appendText(org.joda.time.DateTimeFieldType)
    {
        org.joda.time.format.DateTimeFormatterBuilder r1, $r3;
        org.joda.time.format.DateTimeFormatterBuilder$TextField $r2;
        org.joda.time.DateTimeFieldType r0;
        java.lang.IllegalArgumentException $r4;

        r1 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        r0 := @parameter0: org.joda.time.DateTimeFieldType;

        if r0 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Field type must not be null");

        throw $r4;

     label1:
        $r2 = new org.joda.time.format.DateTimeFormatterBuilder$TextField;

        specialinvoke $r2.<org.joda.time.format.DateTimeFormatterBuilder$TextField: void <init>(org.joda.time.DateTimeFieldType,boolean)>(r0, 0);

        $r3 = specialinvoke r1.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>($r2);

        return $r3;
    }

    public org.joda.time.format.DateTimeFormatterBuilder appendShortText(org.joda.time.DateTimeFieldType)
    {
        org.joda.time.format.DateTimeFormatterBuilder r1, $r3;
        org.joda.time.format.DateTimeFormatterBuilder$TextField $r2;
        org.joda.time.DateTimeFieldType r0;
        java.lang.IllegalArgumentException $r4;

        r1 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        r0 := @parameter0: org.joda.time.DateTimeFieldType;

        if r0 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Field type must not be null");

        throw $r4;

     label1:
        $r2 = new org.joda.time.format.DateTimeFormatterBuilder$TextField;

        specialinvoke $r2.<org.joda.time.format.DateTimeFormatterBuilder$TextField: void <init>(org.joda.time.DateTimeFieldType,boolean)>(r0, 1);

        $r3 = specialinvoke r1.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>($r2);

        return $r3;
    }

    public org.joda.time.format.DateTimeFormatterBuilder appendFraction(org.joda.time.DateTimeFieldType, int, int)
    {
        org.joda.time.format.DateTimeFormatterBuilder r2, $r4;
        java.lang.IllegalArgumentException $r1, $r5;
        int i0, i1;
        org.joda.time.DateTimeFieldType r0;
        org.joda.time.format.DateTimeFormatterBuilder$Fraction $r3;

        r2 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        r0 := @parameter0: org.joda.time.DateTimeFieldType;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r0 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Field type must not be null");

        throw $r5;

     label1:
        if i1 >= i0 goto label2;

        i1 = i0;

     label2:
        if i0 < 0 goto label3;

        if i1 > 0 goto label4;

     label3:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r1;

     label4:
        $r3 = new org.joda.time.format.DateTimeFormatterBuilder$Fraction;

        specialinvoke $r3.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void <init>(org.joda.time.DateTimeFieldType,int,int)>(r0, i0, i1);

        $r4 = specialinvoke r2.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>($r3);

        return $r4;
    }

    public org.joda.time.format.DateTimeFormatterBuilder appendFractionOfSecond(int, int)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0, $r2;
        int i0, i1;
        org.joda.time.DateTimeFieldType $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfDay()>();

        $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFraction(org.joda.time.DateTimeFieldType,int,int)>($r1, i0, i1);

        return $r2;
    }

    public org.joda.time.format.DateTimeFormatterBuilder appendFractionOfMinute(int, int)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0, $r2;
        int i0, i1;
        org.joda.time.DateTimeFieldType $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfDay()>();

        $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFraction(org.joda.time.DateTimeFieldType,int,int)>($r1, i0, i1);

        return $r2;
    }

    public org.joda.time.format.DateTimeFormatterBuilder appendFractionOfHour(int, int)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0, $r2;
        int i0, i1;
        org.joda.time.DateTimeFieldType $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfDay()>();

        $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFraction(org.joda.time.DateTimeFieldType,int,int)>($r1, i0, i1);

        return $r2;
    }

    public org.joda.time.format.DateTimeFormatterBuilder appendFractionOfDay(int, int)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0, $r2;
        int i0, i1;
        org.joda.time.DateTimeFieldType $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfYear()>();

        $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFraction(org.joda.time.DateTimeFieldType,int,int)>($r1, i0, i1);

        return $r2;
    }

    public org.joda.time.format.DateTimeFormatterBuilder appendMillisOfSecond(int)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0, $r2;
        int i0;
        org.joda.time.DateTimeFieldType $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        i0 := @parameter0: int;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfSecond()>();

        $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>($r1, i0, 3);

        return $r2;
    }

    public org.joda.time.format.DateTimeFormatterBuilder appendMillisOfDay(int)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0, $r2;
        int i0;
        org.joda.time.DateTimeFieldType $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        i0 := @parameter0: int;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfDay()>();

        $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>($r1, i0, 8);

        return $r2;
    }

    public org.joda.time.format.DateTimeFormatterBuilder appendSecondOfMinute(int)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0, $r2;
        int i0;
        org.joda.time.DateTimeFieldType $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        i0 := @parameter0: int;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfMinute()>();

        $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>($r1, i0, 2);

        return $r2;
    }

    public org.joda.time.format.DateTimeFormatterBuilder appendSecondOfDay(int)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0, $r2;
        int i0;
        org.joda.time.DateTimeFieldType $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        i0 := @parameter0: int;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfDay()>();

        $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>($r1, i0, 5);

        return $r2;
    }

    public org.joda.time.format.DateTimeFormatterBuilder appendMinuteOfHour(int)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0, $r2;
        int i0;
        org.joda.time.DateTimeFieldType $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        i0 := @parameter0: int;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfHour()>();

        $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>($r1, i0, 2);

        return $r2;
    }

    public org.joda.time.format.DateTimeFormatterBuilder appendMinuteOfDay(int)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0, $r2;
        int i0;
        org.joda.time.DateTimeFieldType $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        i0 := @parameter0: int;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfDay()>();

        $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>($r1, i0, 4);

        return $r2;
    }

    public org.joda.time.format.DateTimeFormatterBuilder appendHourOfDay(int)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0, $r2;
        int i0;
        org.joda.time.DateTimeFieldType $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        i0 := @parameter0: int;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfDay()>();

        $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>($r1, i0, 2);

        return $r2;
    }

    public org.joda.time.format.DateTimeFormatterBuilder appendClockhourOfDay(int)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0, $r2;
        int i0;
        org.joda.time.DateTimeFieldType $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        i0 := @parameter0: int;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType clockhourOfDay()>();

        $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>($r1, i0, 2);

        return $r2;
    }

    public org.joda.time.format.DateTimeFormatterBuilder appendHourOfHalfday(int)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0, $r2;
        int i0;
        org.joda.time.DateTimeFieldType $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        i0 := @parameter0: int;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfHalfday()>();

        $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>($r1, i0, 2);

        return $r2;
    }

    public org.joda.time.format.DateTimeFormatterBuilder appendClockhourOfHalfday(int)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0, $r2;
        int i0;
        org.joda.time.DateTimeFieldType $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        i0 := @parameter0: int;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType clockhourOfHalfday()>();

        $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>($r1, i0, 2);

        return $r2;
    }

    public org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeek(int)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0, $r2;
        int i0;
        org.joda.time.DateTimeFieldType $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        i0 := @parameter0: int;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfWeek()>();

        $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>($r1, i0, 1);

        return $r2;
    }

    public org.joda.time.format.DateTimeFormatterBuilder appendDayOfMonth(int)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0, $r2;
        int i0;
        org.joda.time.DateTimeFieldType $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        i0 := @parameter0: int;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>();

        $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>($r1, i0, 2);

        return $r2;
    }

    public org.joda.time.format.DateTimeFormatterBuilder appendDayOfYear(int)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0, $r2;
        int i0;
        org.joda.time.DateTimeFieldType $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        i0 := @parameter0: int;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfYear()>();

        $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>($r1, i0, 3);

        return $r2;
    }

    public org.joda.time.format.DateTimeFormatterBuilder appendWeekOfWeekyear(int)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0, $r2;
        int i0;
        org.joda.time.DateTimeFieldType $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        i0 := @parameter0: int;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekOfWeekyear()>();

        $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>($r1, i0, 2);

        return $r2;
    }

    public org.joda.time.format.DateTimeFormatterBuilder appendWeekyear(int, int)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0, $r2;
        int i0, i1;
        org.joda.time.DateTimeFieldType $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyear()>();

        $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSignedDecimal(org.joda.time.DateTimeFieldType,int,int)>($r1, i0, i1);

        return $r2;
    }

    public org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYear(int)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0, $r2;
        int i0;
        org.joda.time.DateTimeFieldType $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        i0 := @parameter0: int;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>();

        $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>($r1, i0, 2);

        return $r2;
    }

    public org.joda.time.format.DateTimeFormatterBuilder appendYear(int, int)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0, $r2;
        int i0, i1;
        org.joda.time.DateTimeFieldType $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>();

        $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSignedDecimal(org.joda.time.DateTimeFieldType,int,int)>($r1, i0, i1);

        return $r2;
    }

    public org.joda.time.format.DateTimeFormatterBuilder appendTwoDigitYear(int)
    {
        int i0;
        org.joda.time.format.DateTimeFormatterBuilder r0, $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTwoDigitYear(int,boolean)>(i0, 0);

        return $r1;
    }

    public org.joda.time.format.DateTimeFormatterBuilder appendTwoDigitYear(int, boolean)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0, $r3;
        int i0;
        org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear $r1;
        org.joda.time.DateTimeFieldType $r2;
        boolean z0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r1 = new org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear;

        $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>();

        specialinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void <init>(org.joda.time.DateTimeFieldType,int,boolean)>($r2, i0, z0);

        $r3 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>($r1);

        return $r3;
    }

    public org.joda.time.format.DateTimeFormatterBuilder appendTwoDigitWeekyear(int)
    {
        int i0;
        org.joda.time.format.DateTimeFormatterBuilder r0, $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTwoDigitWeekyear(int,boolean)>(i0, 0);

        return $r1;
    }

    public org.joda.time.format.DateTimeFormatterBuilder appendTwoDigitWeekyear(int, boolean)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0, $r3;
        int i0;
        org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear $r1;
        org.joda.time.DateTimeFieldType $r2;
        boolean z0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r1 = new org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear;

        $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyear()>();

        specialinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void <init>(org.joda.time.DateTimeFieldType,int,boolean)>($r2, i0, z0);

        $r3 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>($r1);

        return $r3;
    }

    public org.joda.time.format.DateTimeFormatterBuilder appendYearOfEra(int, int)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0, $r2;
        int i0, i1;
        org.joda.time.DateTimeFieldType $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfEra()>();

        $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>($r1, i0, i1);

        return $r2;
    }

    public org.joda.time.format.DateTimeFormatterBuilder appendYearOfCentury(int, int)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0, $r2;
        int i0, i1;
        org.joda.time.DateTimeFieldType $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfCentury()>();

        $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>($r1, i0, i1);

        return $r2;
    }

    public org.joda.time.format.DateTimeFormatterBuilder appendCenturyOfEra(int, int)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0, $r2;
        int i0, i1;
        org.joda.time.DateTimeFieldType $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType centuryOfEra()>();

        $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSignedDecimal(org.joda.time.DateTimeFieldType,int,int)>($r1, i0, i1);

        return $r2;
    }

    public org.joda.time.format.DateTimeFormatterBuilder appendHalfdayOfDayText()
    {
        org.joda.time.DateTimeFieldType $r1;
        org.joda.time.format.DateTimeFormatterBuilder r0, $r2;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType halfdayOfDay()>();

        $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendText(org.joda.time.DateTimeFieldType)>($r1);

        return $r2;
    }

    public org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeekText()
    {
        org.joda.time.DateTimeFieldType $r1;
        org.joda.time.format.DateTimeFormatterBuilder r0, $r2;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfWeek()>();

        $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendText(org.joda.time.DateTimeFieldType)>($r1);

        return $r2;
    }

    public org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeekShortText()
    {
        org.joda.time.DateTimeFieldType $r1;
        org.joda.time.format.DateTimeFormatterBuilder r0, $r2;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfWeek()>();

        $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendShortText(org.joda.time.DateTimeFieldType)>($r1);

        return $r2;
    }

    public org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYearText()
    {
        org.joda.time.DateTimeFieldType $r1;
        org.joda.time.format.DateTimeFormatterBuilder r0, $r2;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>();

        $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendText(org.joda.time.DateTimeFieldType)>($r1);

        return $r2;
    }

    public org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYearShortText()
    {
        org.joda.time.DateTimeFieldType $r1;
        org.joda.time.format.DateTimeFormatterBuilder r0, $r2;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>();

        $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendShortText(org.joda.time.DateTimeFieldType)>($r1);

        return $r2;
    }

    public org.joda.time.format.DateTimeFormatterBuilder appendEraText()
    {
        org.joda.time.DateTimeFieldType $r1;
        org.joda.time.format.DateTimeFormatterBuilder r0, $r2;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType era()>();

        $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendText(org.joda.time.DateTimeFieldType)>($r1);

        return $r2;
    }

    public org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneName()
    {
        org.joda.time.format.DateTimeFormatterBuilder r0, $r2;
        org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $r1 = new org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName;

        specialinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: void <init>(int)>(0);

        $r2 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser)>($r1, null);

        return $r2;
    }

    public org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneShortName()
    {
        org.joda.time.format.DateTimeFormatterBuilder r0, $r2;
        org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $r1 = new org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName;

        specialinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: void <init>(int)>(1);

        $r2 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser)>($r1, null);

        return $r2;
    }

    public org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneId()
    {
        org.joda.time.format.DateTimeFormatterBuilder r0, $r2;
        org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $r1 = new org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName;

        specialinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: void <init>(int)>(2);

        $r2 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser)>($r1, null);

        return $r2;
    }

    public org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneOffset(java.lang.String, boolean, int, int)
    {
        org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset $r1;
        org.joda.time.format.DateTimeFormatterBuilder r0, $r3;
        int i0, i1;
        java.lang.String r2;
        boolean z0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        r2 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r1 = new org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset;

        specialinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void <init>(java.lang.String,boolean,int,int)>(r2, z0, i0, i1);

        $r3 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>($r1);

        return $r3;
    }

    public org.joda.time.format.DateTimeFormatterBuilder appendPattern(java.lang.String)
    {
        java.lang.String r1;
        org.joda.time.format.DateTimeFormatterBuilder r0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        r1 := @parameter0: java.lang.String;

        staticinvoke <org.joda.time.format.DateTimeFormat: void appendPatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>(r0, r1);

        return r0;
    }

    private java.lang.Object getFormatter()
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        org.joda.time.format.DateTimeFormatterBuilder$Composite $r2;
        java.util.ArrayList $r1, $r3, $r4, $r6;
        int $i0;
        java.lang.Object $r5, $r7, r8;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        r8 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object iFormatter>;

        if r8 != null goto label5;

        $r1 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        if $i0 != 2 goto label3;

        $r4 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs>;

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>(0);

        $r6 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs>;

        $r7 = virtualinvoke $r6.<java.util.ArrayList: java.lang.Object get(int)>(1);

        if $r5 == null goto label2;

        if $r5 == $r7 goto label1;

        if $r7 != null goto label3;

     label1:
        r8 = $r5;

        goto label3;

     label2:
        r8 = $r7;

     label3:
        if r8 != null goto label4;

        $r2 = new org.joda.time.format.DateTimeFormatterBuilder$Composite;

        $r3 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs>;

        specialinvoke $r2.<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>($r3);

        r8 = $r2;

     label4:
        r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object iFormatter> = r8;

     label5:
        return r8;
    }

    private boolean isPrinter(java.lang.Object)
    {
        org.joda.time.format.DateTimeFormatterBuilder r2;
        java.lang.Object r0;
        org.joda.time.format.DateTimeFormatterBuilder$Composite $r1;
        boolean $z0, $z1, $z2;

        r2 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.joda.time.format.DateTimePrinter;

        if $z0 == 0 goto label2;

        $z1 = r0 instanceof org.joda.time.format.DateTimeFormatterBuilder$Composite;

        if $z1 == 0 goto label1;

        $r1 = (org.joda.time.format.DateTimeFormatterBuilder$Composite) r0;

        $z2 = virtualinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder$Composite: boolean isPrinter()>();

        return $z2;

     label1:
        return 1;

     label2:
        return 0;
    }

    private boolean isParser(java.lang.Object)
    {
        org.joda.time.format.DateTimeFormatterBuilder r2;
        java.lang.Object r0;
        org.joda.time.format.DateTimeFormatterBuilder$Composite $r1;
        boolean $z0, $z1, $z2;

        r2 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.joda.time.format.DateTimeParser;

        if $z0 == 0 goto label2;

        $z1 = r0 instanceof org.joda.time.format.DateTimeFormatterBuilder$Composite;

        if $z1 == 0 goto label1;

        $r1 = (org.joda.time.format.DateTimeFormatterBuilder$Composite) r0;

        $z2 = virtualinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder$Composite: boolean isParser()>();

        return $z2;

     label1:
        return 1;

     label2:
        return 0;
    }

    private boolean isFormatter(java.lang.Object)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        java.lang.Object r1;
        boolean $z0, $z1, $z2;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: boolean isPrinter(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $z1 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: boolean isParser(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    static void appendUnknownString(java.lang.StringBuffer, int)
    {
        java.lang.StringBuffer r0;
        int i0, i1, $i3;

        r0 := @parameter0: java.lang.StringBuffer;

        i0 := @parameter1: int;

        i1 = i0;

     label1:
        $i3 = (int) -1;

        i1 = i1 + $i3;

        if i1 < 0 goto label2;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(65533);

        goto label1;

     label2:
        return;
    }

    static void printUnknownString(java.io.Writer, int) throws java.io.IOException
    {
        int i0, i1, $i3, $i5;
        java.io.Writer r0;

        r0 := @parameter0: java.io.Writer;

        i0 := @parameter1: int;

        i1 = i0;

     label1:
        $i3 = (int) -1;

        i1 = i1 + $i3;

        if i1 < 0 goto label2;

        $i5 = (int) 65533;

        virtualinvoke r0.<java.io.Writer: void write(int)>($i5);

        goto label1;

     label2:
        return;
    }
}
