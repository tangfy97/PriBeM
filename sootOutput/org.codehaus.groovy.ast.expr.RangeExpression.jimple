public class org.codehaus.groovy.ast.expr.RangeExpression extends org.codehaus.groovy.ast.expr.Expression
{
    private org.codehaus.groovy.ast.expr.Expression 'from';
    private org.codehaus.groovy.ast.expr.Expression 'to';
    private boolean inclusive;

    public void <init>(org.codehaus.groovy.ast.expr.Expression, org.codehaus.groovy.ast.expr.Expression, boolean)
    {
        org.codehaus.groovy.ast.expr.RangeExpression r0;
        org.codehaus.groovy.ast.expr.Expression r1, r2;
        boolean z0;

        r0 := @this: org.codehaus.groovy.ast.expr.RangeExpression;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.Expression;

        r2 := @parameter1: org.codehaus.groovy.ast.expr.Expression;

        z0 := @parameter2: boolean;

        specialinvoke r0.<org.codehaus.groovy.ast.expr.Expression: void <init>()>();

        r0.<org.codehaus.groovy.ast.expr.RangeExpression: org.codehaus.groovy.ast.expr.Expression 'from'> = r1;

        r0.<org.codehaus.groovy.ast.expr.RangeExpression: org.codehaus.groovy.ast.expr.Expression 'to'> = r2;

        r0.<org.codehaus.groovy.ast.expr.RangeExpression: boolean inclusive> = z0;

        return;
    }

    public void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)
    {
        org.codehaus.groovy.ast.expr.RangeExpression r1;
        org.codehaus.groovy.ast.GroovyCodeVisitor r0;

        r1 := @this: org.codehaus.groovy.ast.expr.RangeExpression;

        r0 := @parameter0: org.codehaus.groovy.ast.GroovyCodeVisitor;

        interfaceinvoke r0.<org.codehaus.groovy.ast.GroovyCodeVisitor: void visitRangeExpression(org.codehaus.groovy.ast.expr.RangeExpression)>(r1);

        return;
    }

    public org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer)
    {
        org.codehaus.groovy.ast.expr.RangeExpression $r0, r2;
        org.codehaus.groovy.ast.expr.ExpressionTransformer r1;
        org.codehaus.groovy.ast.expr.Expression $r3, $r4, $r5, $r6;
        boolean $z0;

        r2 := @this: org.codehaus.groovy.ast.expr.RangeExpression;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.ExpressionTransformer;

        $r0 = new org.codehaus.groovy.ast.expr.RangeExpression;

        $r3 = r2.<org.codehaus.groovy.ast.expr.RangeExpression: org.codehaus.groovy.ast.expr.Expression 'from'>;

        $r4 = interfaceinvoke r1.<org.codehaus.groovy.ast.expr.ExpressionTransformer: org.codehaus.groovy.ast.expr.Expression transform(org.codehaus.groovy.ast.expr.Expression)>($r3);

        $r5 = r2.<org.codehaus.groovy.ast.expr.RangeExpression: org.codehaus.groovy.ast.expr.Expression 'to'>;

        $r6 = interfaceinvoke r1.<org.codehaus.groovy.ast.expr.ExpressionTransformer: org.codehaus.groovy.ast.expr.Expression transform(org.codehaus.groovy.ast.expr.Expression)>($r5);

        $z0 = r2.<org.codehaus.groovy.ast.expr.RangeExpression: boolean inclusive>;

        specialinvoke $r0.<org.codehaus.groovy.ast.expr.RangeExpression: void <init>(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.expr.Expression,boolean)>($r4, $r6, $z0);

        virtualinvoke $r0.<org.codehaus.groovy.ast.expr.Expression: void setSourcePosition(org.codehaus.groovy.ast.ASTNode)>(r2);

        return $r0;
    }

    public org.codehaus.groovy.ast.expr.Expression getFrom()
    {
        org.codehaus.groovy.ast.expr.RangeExpression r0;
        org.codehaus.groovy.ast.expr.Expression $r1;

        r0 := @this: org.codehaus.groovy.ast.expr.RangeExpression;

        $r1 = r0.<org.codehaus.groovy.ast.expr.RangeExpression: org.codehaus.groovy.ast.expr.Expression 'from'>;

        return $r1;
    }

    public org.codehaus.groovy.ast.expr.Expression getTo()
    {
        org.codehaus.groovy.ast.expr.RangeExpression r0;
        org.codehaus.groovy.ast.expr.Expression $r1;

        r0 := @this: org.codehaus.groovy.ast.expr.RangeExpression;

        $r1 = r0.<org.codehaus.groovy.ast.expr.RangeExpression: org.codehaus.groovy.ast.expr.Expression 'to'>;

        return $r1;
    }

    public boolean isInclusive()
    {
        org.codehaus.groovy.ast.expr.RangeExpression r0;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.ast.expr.RangeExpression;

        $z0 = r0.<org.codehaus.groovy.ast.expr.RangeExpression: boolean inclusive>;

        return $z0;
    }

    public java.lang.String getText()
    {
        org.codehaus.groovy.ast.expr.RangeExpression r2;
        java.lang.StringBuffer $r0, $r1, $r5, $r6, $r9, $r10;
        org.codehaus.groovy.ast.expr.Expression $r3, $r7;
        java.lang.String $r4, $r8, $r11, $r12;
        boolean $z0;

        r2 := @this: org.codehaus.groovy.ast.expr.RangeExpression;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(");

        $r3 = r2.<org.codehaus.groovy.ast.expr.RangeExpression: org.codehaus.groovy.ast.expr.Expression 'from'>;

        $r4 = virtualinvoke $r3.<org.codehaus.groovy.ast.expr.Expression: java.lang.String getText()>();

        $r5 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $z0 = virtualinvoke r2.<org.codehaus.groovy.ast.expr.RangeExpression: boolean isInclusive()>();

        if $z0 != 0 goto label1;

        $r12 = "..<";

        goto label2;

     label1:
        $r12 = "..";

     label2:
        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        $r7 = r2.<org.codehaus.groovy.ast.expr.RangeExpression: org.codehaus.groovy.ast.expr.Expression 'to'>;

        $r8 = virtualinvoke $r7.<org.codehaus.groovy.ast.expr.Expression: java.lang.String getText()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r11;
    }
}
