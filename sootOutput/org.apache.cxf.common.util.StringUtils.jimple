public final class org.apache.cxf.common.util.StringUtils extends java.lang.Object
{
    public static final java.util.Map PATTERN_MAP;

    private void <init>()
    {
        org.apache.cxf.common.util.StringUtils r0;

        r0 := @this: org.apache.cxf.common.util.StringUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String[] split(java.lang.String, java.lang.String)
    {
        java.util.Map $r1;
        java.lang.Object $r2;
        java.lang.String[] $r5, $r6;
        java.lang.String r0, r4;
        java.util.regex.Pattern r3;

        r4 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        $r1 = <org.apache.cxf.common.util.StringUtils: java.util.Map PATTERN_MAP>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r3 = (java.util.regex.Pattern) $r2;

        if r3 == null goto label1;

        $r6 = virtualinvoke r3.<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence)>(r4);

        return $r6;

     label1:
        $r5 = virtualinvoke r4.<java.lang.String: java.lang.String[] split(java.lang.String)>(r0);

        return $r5;
    }

    public static java.lang.String[] split(java.lang.String, java.lang.String, int)
    {
        java.lang.String[] $r5, $r6;
        java.util.Map $r1;
        int i0;
        java.lang.Object $r2;
        java.lang.String r0, r4;
        java.util.regex.Pattern r3;

        r4 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r1 = <org.apache.cxf.common.util.StringUtils: java.util.Map PATTERN_MAP>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r3 = (java.util.regex.Pattern) $r2;

        if r3 == null goto label1;

        $r6 = virtualinvoke r3.<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>(r4, i0);

        return $r6;

     label1:
        $r5 = virtualinvoke r4.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(r0, i0);

        return $r5;
    }

    public static java.lang.String extract(java.lang.String, java.lang.String, java.lang.String)
    {
        int $i0, $i1, i2, $i3, $i5, $i7;
        java.lang.String r0, r1, r2, $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>(r1);

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        i2 = $i0 + $i1;

        $i3 = virtualinvoke r0.<java.lang.String: int lastIndexOf(java.lang.String)>(r2);

        $i5 = (int) -1;

        if i2 == $i5 goto label1;

        $i7 = (int) -1;

        if $i3 != $i7 goto label2;

     label1:
        return null;

     label2:
        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i2, $i3);

        return $r3;
    }

    public static java.lang.String wrapper(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.StringBuilder $r0;
        java.lang.String r1, r2, r3, $r4;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    public static boolean isFileExist(java.lang.String)
    {
        java.lang.String r1;
        java.io.File $r0, $r2;
        boolean $z0, $z1, $z2;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.io.File;

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>(r1);

        $z0 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label1;

        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>(r1);

        $z1 = virtualinvoke $r2.<java.io.File: boolean isFile()>();

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public static boolean isFileAbsolute(java.lang.String)
    {
        java.lang.String r0;
        java.io.File $r1;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.apache.cxf.common.util.StringUtils: boolean isFileExist(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        $r1 = new java.io.File;

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>(r0);

        $z1 = virtualinvoke $r1.<java.io.File: boolean isAbsolute()>();

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public static java.net.URL getURL(java.lang.String) throws java.net.MalformedURLException
    {
        java.net.MalformedURLException $r2;
        java.net.URL $r0, $r5;
        java.lang.String r1;
        java.net.URI $r4;
        java.io.File $r3;

        r1 := @parameter0: java.lang.String;

     label1:
        $r0 = new java.net.URL;

        specialinvoke $r0.<java.net.URL: void <init>(java.lang.String)>(r1);

     label2:
        return $r0;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.io.File;

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>(r1);

        $r4 = virtualinvoke $r3.<java.io.File: java.net.URI toURI()>();

        $r5 = virtualinvoke $r4.<java.net.URI: java.net.URL toURL()>();

        return $r5;

        catch java.net.MalformedURLException from label1 to label2 with label3;
    }

    public static boolean isEmpty(java.lang.String)
    {
        int $i0, i2, $i3;
        char $c1;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label3;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i2 = 0;

     label1:
        if i2 >= $i0 goto label3;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);

        $i3 = (int) $c1;

        if $i3 <= 32 goto label2;

        return 0;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return 1;
    }

    public static boolean isEmpty(java.util.List)
    {
        java.util.List r0;
        int $i0, $i1;
        java.lang.Object $r1;
        java.lang.String $r2;
        boolean $z0;

        r0 := @parameter0: java.util.List;

        if r0 == null goto label1;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 != 0 goto label2;

     label1:
        return 1;

     label2:
        $i1 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i1 != 1 goto label3;

        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        $r2 = (java.lang.String) $r1;

        $z0 = staticinvoke <org.apache.cxf.common.util.StringUtils: boolean isEmpty(java.lang.String)>($r2);

        if $z0 == 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    public static boolean isEqualUri(java.lang.String, java.lang.String)
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        java.lang.String r0, $r1, r2, $r3, $r4, $r5, $r6, $r7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $i1 = $i0 - 1;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i1);

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("/");

        if $z0 == 0 goto label1;

        $i8 = virtualinvoke r2.<java.lang.String: int length()>();

        $i9 = $i8 - 1;

        $r6 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>($i9);

        $z5 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("/");

        if $z5 != 0 goto label1;

        $i10 = virtualinvoke r0.<java.lang.String: int length()>();

        $i11 = $i10 - 1;

        $r7 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i11);

        $z6 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        return $z6;

     label1:
        $i2 = virtualinvoke r2.<java.lang.String: int length()>();

        $i3 = $i2 - 1;

        $r3 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>($i3);

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("/");

        if $z1 == 0 goto label2;

        $i4 = virtualinvoke r0.<java.lang.String: int length()>();

        $i5 = $i4 - 1;

        $r4 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i5);

        $z3 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("/");

        if $z3 != 0 goto label2;

        $i6 = virtualinvoke r2.<java.lang.String: int length()>();

        $i7 = $i6 - 1;

        $r5 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, $i7);

        $z4 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        return $z4;

     label2:
        $z2 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        return $z2;
    }

    public static java.lang.String diff(java.lang.String, java.lang.String)
    {
        int $i0, $i1, $i3;
        java.lang.String r0, r1, $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int lastIndexOf(java.lang.String)>(r1);

        $i3 = (int) -1;

        if $i0 <= $i3 goto label1;

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i1);

        return $r2;

     label1:
        return r0;
    }

    public static java.util.List getParts(java.lang.String, java.lang.String)
    {
        java.util.Iterator $r5;
        java.lang.String[] $r3;
        java.util.ArrayList $r0;
        java.util.List $r4;
        java.lang.Object $r6;
        java.lang.String r1, r2, r7;
        boolean $z0, $z1;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r3 = staticinvoke <org.apache.cxf.common.util.StringUtils: java.lang.String[] split(java.lang.String,java.lang.String)>(r1, r2);

        $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r3);

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.lang.String) $r6;

        $z1 = staticinvoke <org.apache.cxf.common.util.StringUtils: boolean isEmpty(java.lang.String)>(r7);

        if $z1 != 0 goto label2;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r7);

     label2:
        goto label1;

     label3:
        return $r0;
    }

    public static java.lang.String getFirstNotEmpty(java.lang.String, java.lang.String)
    {
        java.util.Iterator $r4;
        java.lang.String[] $r2;
        java.util.List $r3;
        java.lang.Object $r5;
        java.lang.String r0, r1, r6;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <org.apache.cxf.common.util.StringUtils: java.lang.String[] split(java.lang.String,java.lang.String)>(r0, r1);

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.String) $r5;

        $z1 = staticinvoke <org.apache.cxf.common.util.StringUtils: boolean isEmpty(java.lang.String)>(r6);

        if $z1 != 0 goto label2;

        return r6;

     label2:
        goto label1;

     label3:
        return r0;
    }

    public static java.lang.String getFirstNotEmpty(java.util.List)
    {
        java.util.List r0;
        java.util.Iterator $r1;
        java.lang.Object $r2;
        java.lang.String r3;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.util.List;

        $z0 = staticinvoke <org.apache.cxf.common.util.StringUtils: boolean isEmpty(java.util.List)>(r0);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r2;

        $z2 = staticinvoke <org.apache.cxf.common.util.StringUtils: boolean isEmpty(java.lang.String)>(r3);

        if $z2 != 0 goto label3;

        return r3;

     label3:
        goto label2;

     label4:
        return null;
    }

    public static java.util.List getFound(java.lang.String, java.lang.String)
    {
        java.util.ArrayList $r2;
        java.util.regex.Matcher $r4;
        int $i0;
        java.lang.String r0, r1, $r5, $r6;
        java.util.regex.Pattern $r3;
        boolean $z0, $z1, $z2;

        r1 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        $z0 = staticinvoke <org.apache.cxf.common.util.StringUtils: boolean isEmpty(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.apache.cxf.common.util.StringUtils: boolean isEmpty(java.lang.String)>(r1);

        if $z1 == 0 goto label2;

     label1:
        return null;

     label2:
        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>(r0, 64);

        $r4 = virtualinvoke $r3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);

     label3:
        $z2 = virtualinvoke $r4.<java.util.regex.Matcher: boolean find()>();

        if $z2 == 0 goto label5;

        $i0 = virtualinvoke $r4.<java.util.regex.Matcher: int groupCount()>();

        if $i0 <= 0 goto label4;

        $r6 = virtualinvoke $r4.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r6);

        goto label3;

     label4:
        $r5 = virtualinvoke $r4.<java.util.regex.Matcher: java.lang.String group()>();

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r5);

        goto label3;

     label5:
        return $r2;
    }

    public static java.lang.String getFirstFound(java.lang.String, java.lang.String)
    {
        java.util.List $r2;
        java.lang.Object $r3;
        java.lang.String r0, r1, $r4;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <org.apache.cxf.common.util.StringUtils: java.util.List getFound(java.lang.String,java.lang.String)>(r0, r1);

        $z0 = staticinvoke <org.apache.cxf.common.util.StringUtils: boolean isEmpty(java.util.List)>($r2);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(0);

        $r4 = (java.lang.String) $r3;

        return $r4;
    }

    public static java.lang.String formatVersionNumber(java.lang.String)
    {
        java.util.List $r1;
        java.lang.String r0, $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.cxf.common.util.StringUtils: java.util.List getFound(java.lang.String,java.lang.String)>(r0, "\\d+\\.\\d+\\.?\\d*");

        $z0 = staticinvoke <org.apache.cxf.common.util.StringUtils: boolean isEmpty(java.util.List)>($r1);

        if $z0 == 0 goto label1;

        return r0;

     label1:
        $r2 = staticinvoke <org.apache.cxf.common.util.StringUtils: java.lang.String getFirstNotEmpty(java.util.List)>($r1);

        return $r2;
    }

    public static java.lang.String addDefaultPortIfMissing(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.cxf.common.util.StringUtils: java.lang.String addDefaultPortIfMissing(java.lang.String,java.lang.String)>(r0, "80");

        return $r1;
    }

    public static java.lang.String addDefaultPortIfMissing(java.lang.String, java.lang.String)
    {
        java.net.MalformedURLException $r9;
        java.net.URL $r11;
        int $i0, $i2;
        java.lang.StringBuilder $r3, $r4, $r5, $r7, $r12;
        java.lang.String $r1, r6, $r8, r10;
        boolean $z0;

        r10 := @parameter0: java.lang.String;

        r6 := @parameter1: java.lang.String;

     label1:
        $r11 = new java.net.URL;

        specialinvoke $r11.<java.net.URL: void <init>(java.lang.String)>(r10);

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        return r10;

     label4:
        $i0 = virtualinvoke $r11.<java.net.URL: int getPort()>();

        $i2 = (int) -1;

        if $i0 == $i2 goto label5;

        return r10;

     label5:
        $r1 = staticinvoke <org.apache.cxf.common.util.StringUtils: java.lang.String getFirstFound(java.lang.String,java.lang.String)>(r10, "http://([^/]+)");

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("http://");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $z0 = staticinvoke <org.apache.cxf.common.util.StringUtils: boolean isEmpty(java.lang.String)>($r1);

        if $z0 != 0 goto label6;

        r10 = virtualinvoke r10.<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>("http://([^/]+)", $r8);

     label6:
        return r10;

        catch java.net.MalformedURLException from label1 to label2 with label3;
    }

    public static java.lang.String capitalize(java.lang.String)
    {
        int $i0;
        char[] $r1;
        char $c1, $c2;
        java.lang.String r0, $r2;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        return r0;

     label2:
        $r1 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>();

        $c1 = $r1[0];

        $c2 = staticinvoke <java.lang.Character: char toUpperCase(char)>($c1);

        $r1[0] = $c2;

        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(char[])>($r1);

        return $r2;
    }

    public static java.lang.String uncapitalize(java.lang.String)
    {
        char $c2, $c3;
        int $i0, $i1;
        java.lang.StringBuilder $r1, $r2, $r4;
        java.lang.String r0, $r3, $r5;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        return r0;

     label2:
        $r1 = new java.lang.StringBuilder;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>($i1);

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $c3 = staticinvoke <java.lang.Character: char toLowerCase(char)>($c2);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3);

        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(1);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    static void <clinit>()
    {
        java.util.Map $r3;
        int i0, i1;
        java.util.HashMap $r0;
        java.lang.String[] $r1;
        java.lang.String r2;
        java.util.regex.Pattern $r4;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <org.apache.cxf.common.util.StringUtils: java.util.Map PATTERN_MAP> = $r0;

        $r1 = newarray (java.lang.String)[6];

        $r1[0] = "/";

        $r1[1] = " ";

        $r1[2] = ":";

        $r1[3] = ",";

        $r1[4] = ";";

        $r1[5] = "=";

        i0 = lengthof $r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r2 = $r1[i1];

        $r3 = <org.apache.cxf.common.util.StringUtils: java.util.Map PATTERN_MAP>;

        $r4 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(r2);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r4);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
}
