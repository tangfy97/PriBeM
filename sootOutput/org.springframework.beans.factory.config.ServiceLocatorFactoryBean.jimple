public class org.springframework.beans.factory.config.ServiceLocatorFactoryBean extends java.lang.Object implements org.springframework.beans.factory.FactoryBean, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.InitializingBean
{
    private java.lang.Class serviceLocatorInterface;
    private java.lang.reflect.Constructor serviceLocatorExceptionConstructor;
    private java.util.Properties serviceMappings;
    private org.springframework.beans.factory.ListableBeanFactory beanFactory;
    private java.lang.Object proxy;

    public void <init>()
    {
        org.springframework.beans.factory.config.ServiceLocatorFactoryBean r0;

        r0 := @this: org.springframework.beans.factory.config.ServiceLocatorFactoryBean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void setServiceLocatorInterface(java.lang.Class)
    {
        org.springframework.beans.factory.config.ServiceLocatorFactoryBean r0;
        java.lang.Class r1;

        r0 := @this: org.springframework.beans.factory.config.ServiceLocatorFactoryBean;

        r1 := @parameter0: java.lang.Class;

        r0.<org.springframework.beans.factory.config.ServiceLocatorFactoryBean: java.lang.Class serviceLocatorInterface> = r1;

        return;
    }

    public void setServiceLocatorExceptionClass(java.lang.Class)
    {
        java.lang.IllegalArgumentException $r4;
        java.lang.reflect.Constructor $r2;
        org.springframework.beans.factory.config.ServiceLocatorFactoryBean r1;
        java.lang.Class r0, $r3;
        java.lang.StringBuilder $r5, $r7, $r8;
        java.lang.String $r6, $r9;
        boolean $z0;

        r1 := @this: org.springframework.beans.factory.config.ServiceLocatorFactoryBean;

        r0 := @parameter0: java.lang.Class;

        if r0 == null goto label1;

        $r3 = class "Ljava/lang/Exception;";

        $z0 = virtualinvoke $r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("serviceLocatorException [");

        $r6 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] is not a subclass of Exception");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r4;

     label1:
        $r2 = virtualinvoke r1.<org.springframework.beans.factory.config.ServiceLocatorFactoryBean: java.lang.reflect.Constructor determineServiceLocatorExceptionConstructor(java.lang.Class)>(r0);

        r1.<org.springframework.beans.factory.config.ServiceLocatorFactoryBean: java.lang.reflect.Constructor serviceLocatorExceptionConstructor> = $r2;

        return;
    }

    public void setServiceMappings(java.util.Properties)
    {
        org.springframework.beans.factory.config.ServiceLocatorFactoryBean r0;
        java.util.Properties r1;

        r0 := @this: org.springframework.beans.factory.config.ServiceLocatorFactoryBean;

        r1 := @parameter0: java.util.Properties;

        r0.<org.springframework.beans.factory.config.ServiceLocatorFactoryBean: java.util.Properties serviceMappings> = r1;

        return;
    }

    public void setBeanFactory(org.springframework.beans.factory.BeanFactory) throws org.springframework.beans.BeansException
    {
        org.springframework.beans.FatalBeanException $r3;
        org.springframework.beans.factory.BeanFactory r0;
        org.springframework.beans.factory.config.ServiceLocatorFactoryBean r1;
        boolean $z0;
        org.springframework.beans.factory.ListableBeanFactory $r2;

        r1 := @this: org.springframework.beans.factory.config.ServiceLocatorFactoryBean;

        r0 := @parameter0: org.springframework.beans.factory.BeanFactory;

        $z0 = r0 instanceof org.springframework.beans.factory.ListableBeanFactory;

        if $z0 != 0 goto label1;

        $r3 = new org.springframework.beans.FatalBeanException;

        specialinvoke $r3.<org.springframework.beans.FatalBeanException: void <init>(java.lang.String)>("ServiceLocatorFactoryBean needs to run in a BeanFactory that is a ListableBeanFactory");

        throw $r3;

     label1:
        $r2 = (org.springframework.beans.factory.ListableBeanFactory) r0;

        r1.<org.springframework.beans.factory.config.ServiceLocatorFactoryBean: org.springframework.beans.factory.ListableBeanFactory beanFactory> = $r2;

        return;
    }

    public void afterPropertiesSet()
    {
        java.lang.Class[] $r4;
        java.lang.IllegalArgumentException $r8;
        org.springframework.beans.factory.config.ServiceLocatorFactoryBean r0;
        java.lang.Class $r1, $r2, $r5;
        java.lang.Object $r7;
        java.lang.ClassLoader $r3;
        org.springframework.beans.factory.config.ServiceLocatorFactoryBean$ServiceLocatorInvocationHandler $r6;

        r0 := @this: org.springframework.beans.factory.config.ServiceLocatorFactoryBean;

        $r1 = r0.<org.springframework.beans.factory.config.ServiceLocatorFactoryBean: java.lang.Class serviceLocatorInterface>;

        if $r1 != null goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Property \'serviceLocatorInterface\' is required");

        throw $r8;

     label1:
        $r2 = r0.<org.springframework.beans.factory.config.ServiceLocatorFactoryBean: java.lang.Class serviceLocatorInterface>;

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r4 = newarray (java.lang.Class)[1];

        $r5 = r0.<org.springframework.beans.factory.config.ServiceLocatorFactoryBean: java.lang.Class serviceLocatorInterface>;

        $r4[0] = $r5;

        $r6 = new org.springframework.beans.factory.config.ServiceLocatorFactoryBean$ServiceLocatorInvocationHandler;

        specialinvoke $r6.<org.springframework.beans.factory.config.ServiceLocatorFactoryBean$ServiceLocatorInvocationHandler: void <init>(org.springframework.beans.factory.config.ServiceLocatorFactoryBean,org.springframework.beans.factory.config.ServiceLocatorFactoryBean$ServiceLocatorInvocationHandler)>(r0, null);

        $r7 = staticinvoke <java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>($r3, $r4, $r6);

        r0.<org.springframework.beans.factory.config.ServiceLocatorFactoryBean: java.lang.Object proxy> = $r7;

        return;
    }

    protected java.lang.reflect.Constructor determineServiceLocatorExceptionConstructor(java.lang.Class)
    {
        java.lang.NoSuchMethodException $r3, $r10, $r13;
        java.lang.reflect.Constructor $r2, $r12, $r15;
        org.springframework.beans.factory.config.ServiceLocatorFactoryBean r16;
        java.lang.String $r6, $r9;
        java.lang.Class[] $r1, $r11, $r14;
        java.lang.IllegalArgumentException $r4;
        java.lang.Class r0;
        java.lang.StringBuilder $r5, $r7, $r8;

        r16 := @this: org.springframework.beans.factory.config.ServiceLocatorFactoryBean;

        r0 := @parameter0: java.lang.Class;

     label1:
        $r1 = newarray (java.lang.Class)[2];

        $r1[0] = class "Ljava/lang/String;";

        $r1[1] = class "Ljava/lang/Throwable;";

        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r1);

     label2:
        return $r2;

     label3:
        $r13 := @caughtexception;

     label4:
        $r14 = newarray (java.lang.Class)[1];

        $r14[0] = class "Ljava/lang/Throwable;";

        $r15 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r14);

     label5:
        return $r15;

     label6:
        $r10 := @caughtexception;

     label7:
        $r11 = newarray (java.lang.Class)[1];

        $r11[0] = class "Ljava/lang/String;";

        $r12 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r11);

     label8:
        return $r12;

     label9:
        $r3 := @caughtexception;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Service locator exception [");

        $r6 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] neither has a (String, Throwable) constructor nor a (String) constructor");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r4;

        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
        catch java.lang.NoSuchMethodException from label4 to label5 with label6;
        catch java.lang.NoSuchMethodException from label7 to label8 with label9;
    }

    protected java.lang.Exception createServiceLocatorException(java.lang.reflect.Constructor, org.springframework.beans.BeansException)
    {
        java.lang.Object[] r2;
        java.lang.Class[] $r1;
        org.springframework.beans.BeansException r4;
        java.lang.reflect.Constructor r0;
        java.lang.Exception $r8;
        int $i0, i1, $i2;
        org.springframework.beans.factory.config.ServiceLocatorFactoryBean r9;
        java.lang.Class $r3, $r5;
        java.lang.Object $r7;
        java.lang.String $r6;
        boolean $z0, $z1;

        r9 := @this: org.springframework.beans.factory.config.ServiceLocatorFactoryBean;

        r0 := @parameter0: java.lang.reflect.Constructor;

        r4 := @parameter1: org.springframework.beans.BeansException;

        $r1 = virtualinvoke r0.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();

        $i0 = lengthof $r1;

        r2 = newarray (java.lang.Object)[$i0];

        i1 = 0;

        goto label4;

     label1:
        $r3 = $r1[i1];

        $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/lang/String;");

        if $z0 == 0 goto label2;

        $r6 = virtualinvoke r4.<org.springframework.beans.BeansException: java.lang.String getMessage()>();

        r2[i1] = $r6;

        goto label3;

     label2:
        $r5 = $r1[i1];

        $z1 = virtualinvoke $r5.<java.lang.Class: boolean isInstance(java.lang.Object)>(r4);

        if $z1 == 0 goto label3;

        r2[i1] = r4;

     label3:
        i1 = i1 + 1;

     label4:
        $i2 = lengthof $r1;

        if i1 < $i2 goto label1;

        $r7 = staticinvoke <org.springframework.beans.BeanUtils: java.lang.Object instantiateClass(java.lang.reflect.Constructor,java.lang.Object[])>(r0, r2);

        $r8 = (java.lang.Exception) $r7;

        return $r8;
    }

    public java.lang.Object getObject()
    {
        org.springframework.beans.factory.config.ServiceLocatorFactoryBean r0;
        java.lang.Object $r1;

        r0 := @this: org.springframework.beans.factory.config.ServiceLocatorFactoryBean;

        $r1 = r0.<org.springframework.beans.factory.config.ServiceLocatorFactoryBean: java.lang.Object proxy>;

        return $r1;
    }

    public java.lang.Class getObjectType()
    {
        org.springframework.beans.factory.config.ServiceLocatorFactoryBean r0;
        java.lang.Class $r1;

        r0 := @this: org.springframework.beans.factory.config.ServiceLocatorFactoryBean;

        $r1 = r0.<org.springframework.beans.factory.config.ServiceLocatorFactoryBean: java.lang.Class serviceLocatorInterface>;

        return $r1;
    }

    public boolean isSingleton()
    {
        org.springframework.beans.factory.config.ServiceLocatorFactoryBean r0;

        r0 := @this: org.springframework.beans.factory.config.ServiceLocatorFactoryBean;

        return 1;
    }

    static java.lang.Class access$0(org.springframework.beans.factory.config.ServiceLocatorFactoryBean)
    {
        org.springframework.beans.factory.config.ServiceLocatorFactoryBean r0;
        java.lang.Class $r1;

        r0 := @parameter0: org.springframework.beans.factory.config.ServiceLocatorFactoryBean;

        $r1 = r0.<org.springframework.beans.factory.config.ServiceLocatorFactoryBean: java.lang.Class serviceLocatorInterface>;

        return $r1;
    }

    static org.springframework.beans.factory.ListableBeanFactory access$1(org.springframework.beans.factory.config.ServiceLocatorFactoryBean)
    {
        org.springframework.beans.factory.config.ServiceLocatorFactoryBean r0;
        org.springframework.beans.factory.ListableBeanFactory $r1;

        r0 := @parameter0: org.springframework.beans.factory.config.ServiceLocatorFactoryBean;

        $r1 = r0.<org.springframework.beans.factory.config.ServiceLocatorFactoryBean: org.springframework.beans.factory.ListableBeanFactory beanFactory>;

        return $r1;
    }

    static java.lang.reflect.Constructor access$2(org.springframework.beans.factory.config.ServiceLocatorFactoryBean)
    {
        org.springframework.beans.factory.config.ServiceLocatorFactoryBean r0;
        java.lang.reflect.Constructor $r1;

        r0 := @parameter0: org.springframework.beans.factory.config.ServiceLocatorFactoryBean;

        $r1 = r0.<org.springframework.beans.factory.config.ServiceLocatorFactoryBean: java.lang.reflect.Constructor serviceLocatorExceptionConstructor>;

        return $r1;
    }

    static java.util.Properties access$3(org.springframework.beans.factory.config.ServiceLocatorFactoryBean)
    {
        org.springframework.beans.factory.config.ServiceLocatorFactoryBean r0;
        java.util.Properties $r1;

        r0 := @parameter0: org.springframework.beans.factory.config.ServiceLocatorFactoryBean;

        $r1 = r0.<org.springframework.beans.factory.config.ServiceLocatorFactoryBean: java.util.Properties serviceMappings>;

        return $r1;
    }
}
