public class org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream extends java.io.InputStream implements org.apache.pdfbox.io.ccitt.CCITTFaxConstants
{
    private static final int CODE_WORD;
    private static final int SIGNAL_EOD;
    private static final int SIGNAL_EOL;
    private java.io.InputStream source;
    private int columns;
    private int rows;
    private boolean encodedByteAlign;
    private int bits;
    private int bitPos;
    private org.apache.pdfbox.io.ccitt.PackedBitArray decodedLine;
    private int decodedWritePos;
    private int decodedReadPos;
    private int y;
    private int accumulatedRunLength;
    private static final org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$NonLeafLookupTreeNode WHITE_LOOKUP_TREE_ROOT;
    private static final org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$NonLeafLookupTreeNode BLACK_LOOKUP_TREE_ROOT;
    private static final int[] BIT_POS_MASKS;
    private static final short EOL_STARTER;

    public void <init>(java.io.InputStream, int, int, boolean)
    {
        org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream r0;
        int i0, i1, $i2, $i4;
        org.apache.pdfbox.io.ccitt.PackedBitArray $r3, $r4;
        java.io.InputStream r1;
        boolean z0;

        r0 := @this: org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream;

        r1 := @parameter0: java.io.InputStream;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        r0.<org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: int bitPos> = 8;

        $i4 = (int) -1;

        r0.<org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: int y> = $i4;

        r0.<org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: java.io.InputStream source> = r1;

        r0.<org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: int columns> = i0;

        r0.<org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: int rows> = i1;

        $r4 = new org.apache.pdfbox.io.ccitt.PackedBitArray;

        specialinvoke $r4.<org.apache.pdfbox.io.ccitt.PackedBitArray: void <init>(int)>(i0);

        r0.<org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: org.apache.pdfbox.io.ccitt.PackedBitArray decodedLine> = $r4;

        $r3 = r0.<org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: org.apache.pdfbox.io.ccitt.PackedBitArray decodedLine>;

        $i2 = virtualinvoke $r3.<org.apache.pdfbox.io.ccitt.PackedBitArray: int getByteCount()>();

        r0.<org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: int decodedReadPos> = $i2;

        r0.<org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: boolean encodedByteAlign> = z0;

        return;
    }

    public void <init>(java.io.InputStream, int, boolean)
    {
        int i0;
        org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream r0;
        java.io.InputStream r1;
        boolean z0;

        r0 := @this: org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream;

        r1 := @parameter0: java.io.InputStream;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        specialinvoke r0.<org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: void <init>(java.io.InputStream,int,int,boolean)>(r1, i0, 0, z0);

        return;
    }

    public boolean markSupported()
    {
        org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream r0;

        r0 := @this: org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream;

        return 0;
    }

    public int read() throws java.io.IOException
    {
        byte[] $r3;
        org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream r0;
        short $s4, $s8;
        byte $b5;
        int $i0, $i1, $i2, $i3, $i7, $i9;
        org.apache.pdfbox.io.ccitt.PackedBitArray $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream;

        $i0 = r0.<org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: int decodedReadPos>;

        $r1 = r0.<org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: org.apache.pdfbox.io.ccitt.PackedBitArray decodedLine>;

        $i1 = virtualinvoke $r1.<org.apache.pdfbox.io.ccitt.PackedBitArray: int getByteCount()>();

        if $i0 < $i1 goto label1;

        $z0 = specialinvoke r0.<org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: boolean decodeLine()>();

        if $z0 != 0 goto label1;

        $i7 = (int) -1;

        return $i7;

     label1:
        $r2 = r0.<org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: org.apache.pdfbox.io.ccitt.PackedBitArray decodedLine>;

        $r3 = virtualinvoke $r2.<org.apache.pdfbox.io.ccitt.PackedBitArray: byte[] getData()>();

        $i2 = r0.<org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: int decodedReadPos>;

        $i3 = $i2 + 1;

        r0.<org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: int decodedReadPos> = $i3;

        $b5 = $r3[$i2];

        $s8 = (short) $b5;

        $s4 = $s8 & 255;

        $i9 = (int) $s4;

        return $i9;
    }

    private boolean decodeLine() throws java.io.IOException
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12, $i13, $i15, $i17, $i19;
        boolean $z0, z1, $z2;
        org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream r0;
        org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$CodeWord $r2;
        org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$NonLeafLookupTreeNode $r3;
        org.apache.pdfbox.io.ccitt.PackedBitArray $r1;

        r0 := @this: org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream;

        $z0 = r0.<org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: boolean encodedByteAlign>;

        if $z0 == 0 goto label01;

        $i9 = r0.<org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: int bitPos>;

        if $i9 == 0 goto label01;

        specialinvoke r0.<org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: void readByte()>();

     label01:
        $i10 = r0.<org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: int bits>;

        if $i10 >= 0 goto label02;

        return 0;

     label02:
        $i0 = r0.<org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: int y>;

        $i1 = $i0 + 1;

        r0.<org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: int y> = $i1;

        i11 = 0;

        $i2 = r0.<org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: int rows>;

        if $i2 <= 0 goto label03;

        $i8 = r0.<org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: int y>;

        $i7 = r0.<org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: int rows>;

        if $i8 < $i7 goto label03;

        return 0;

     label03:
        $r1 = r0.<org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: org.apache.pdfbox.io.ccitt.PackedBitArray decodedLine>;

        virtualinvoke $r1.<org.apache.pdfbox.io.ccitt.PackedBitArray: void clear()>();

        r0.<org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: int decodedWritePos> = 0;

        i12 = 6;

        z1 = 1;

     label04:
        $i13 = r0.<org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: int columns>;

        if i11 < $i13 goto label05;

        $i6 = r0.<org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: int accumulatedRunLength>;

        if $i6 <= 0 goto label15;

     label05:
        if z1 == 0 goto label06;

        $r3 = <org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$NonLeafLookupTreeNode WHITE_LOOKUP_TREE_ROOT>;

        goto label07;

     label06:
        $r3 = <org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$NonLeafLookupTreeNode BLACK_LOOKUP_TREE_ROOT>;

     label07:
        $r2 = virtualinvoke $r3.<org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$LookupTreeNode: org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$CodeWord getNextCodeWord(org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream)>(r0);

        if $r2 != null goto label09;

        if i11 <= 0 goto label08;

        r0.<org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: int decodedReadPos> = 0;

        return 1;

     label08:
        return 0;

     label09:
        $i3 = interfaceinvoke $r2.<org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$CodeWord: int getType()>();

        $i15 = (int) -2;

        if $i3 != $i15 goto label11;

        $i17 = (int) -1;

        i12 = i12 + $i17;

        if i12 != 0 goto label10;

        return 0;

     label10:
        if i11 != 0 goto label14;

        goto label04;

     label11:
        $i19 = (int) -1;

        i12 = $i19;

        $i4 = interfaceinvoke $r2.<org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$CodeWord: int execute(org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream)>(r0);

        i11 = i11 + $i4;

        $i5 = r0.<org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: int accumulatedRunLength>;

        if $i5 != 0 goto label14;

        if z1 != 0 goto label12;

        $z2 = 1;

        goto label13;

     label12:
        $z2 = 0;

     label13:
        z1 = $z2;

     label14:
        goto label04;

     label15:
        r0.<org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: int decodedReadPos> = 0;

        return 1;
    }

    private void writeRun(int, int)
    {
        org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream r0;
        int i0, $i1, $i2, i3, $i4, $i5, $i6, $i7, $i8;
        org.apache.pdfbox.io.ccitt.PackedBitArray $r1;

        r0 := @this: org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream;

        i3 := @parameter0: int;

        i0 := @parameter1: int;

        $i1 = r0.<org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: int accumulatedRunLength>;

        $i2 = $i1 + i0;

        r0.<org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: int accumulatedRunLength> = $i2;

        if i3 == 0 goto label1;

        $r1 = r0.<org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: org.apache.pdfbox.io.ccitt.PackedBitArray decodedLine>;

        $i8 = r0.<org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: int decodedWritePos>;

        $i7 = r0.<org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: int accumulatedRunLength>;

        virtualinvoke $r1.<org.apache.pdfbox.io.ccitt.PackedBitArray: void setBits(int,int)>($i8, $i7);

     label1:
        $i5 = r0.<org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: int decodedWritePos>;

        $i4 = r0.<org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: int accumulatedRunLength>;

        $i6 = $i5 + $i4;

        r0.<org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: int decodedWritePos> = $i6;

        r0.<org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: int accumulatedRunLength> = 0;

        return;
    }

    private void writeNonTerminating(int)
    {
        int i0, $i1, $i2;
        org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream r0;

        r0 := @this: org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: int accumulatedRunLength>;

        $i2 = $i1 + i0;

        r0.<org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: int accumulatedRunLength> = $i2;

        return;
    }

    private int readBit() throws java.io.IOException
    {
        org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream r0;
        byte $b7;
        int[] $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i9;

        r0 := @this: org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream;

        $i0 = r0.<org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: int bitPos>;

        if $i0 < 8 goto label1;

        specialinvoke r0.<org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: void readByte()>();

        $i6 = r0.<org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: int bits>;

        if $i6 >= 0 goto label1;

        $i9 = (int) -1;

        return $i9;

     label1:
        $i3 = r0.<org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: int bits>;

        $r1 = <org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: int[] BIT_POS_MASKS>;

        $i1 = r0.<org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: int bitPos>;

        $i2 = $i1 + 1;

        r0.<org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: int bitPos> = $i2;

        $i4 = $r1[$i1];

        $i5 = $i3 & $i4;

        if $i5 != 0 goto label2;

        $b7 = 0;

        goto label3;

     label2:
        $b7 = 1;

     label3:
        return $b7;
    }

    private void readByte() throws java.io.IOException
    {
        int $i0;
        org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream r0;
        java.io.InputStream $r1;

        r0 := @this: org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream;

        $r1 = r0.<org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: java.io.InputStream source>;

        $i0 = virtualinvoke $r1.<java.io.InputStream: int read()>();

        r0.<org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: int bits> = $i0;

        r0.<org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: int bitPos> = 0;

        return;
    }

    private static void buildLookupTree()
    {
        org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$EndOfLineTreeNode $r12;
        org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$NonLeafLookupTreeNode $r0, $r2, $r4, $r6, $r8, $r10, $r13, $r14;
        short[] $r1, $r3, $r5, $r7, $r9, $r11;

        $r1 = <org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: short[] WHITE_TERMINATING>;

        $r0 = <org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$NonLeafLookupTreeNode WHITE_LOOKUP_TREE_ROOT>;

        staticinvoke <org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: void buildUpTerminating(short[],org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$NonLeafLookupTreeNode,boolean)>($r1, $r0, 1);

        $r3 = <org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: short[] BLACK_TERMINATING>;

        $r2 = <org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$NonLeafLookupTreeNode BLACK_LOOKUP_TREE_ROOT>;

        staticinvoke <org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: void buildUpTerminating(short[],org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$NonLeafLookupTreeNode,boolean)>($r3, $r2, 0);

        $r5 = <org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: short[] WHITE_MAKE_UP>;

        $r4 = <org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$NonLeafLookupTreeNode WHITE_LOOKUP_TREE_ROOT>;

        staticinvoke <org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: void buildUpMakeUp(short[],org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$NonLeafLookupTreeNode)>($r5, $r4);

        $r7 = <org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: short[] BLACK_MAKE_UP>;

        $r6 = <org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$NonLeafLookupTreeNode BLACK_LOOKUP_TREE_ROOT>;

        staticinvoke <org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: void buildUpMakeUp(short[],org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$NonLeafLookupTreeNode)>($r7, $r6);

        $r9 = <org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: short[] LONG_MAKE_UP>;

        $r8 = <org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$NonLeafLookupTreeNode WHITE_LOOKUP_TREE_ROOT>;

        staticinvoke <org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: void buildUpMakeUpLong(short[],org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$NonLeafLookupTreeNode)>($r9, $r8);

        $r11 = <org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: short[] LONG_MAKE_UP>;

        $r10 = <org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$NonLeafLookupTreeNode BLACK_LOOKUP_TREE_ROOT>;

        staticinvoke <org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: void buildUpMakeUpLong(short[],org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$NonLeafLookupTreeNode)>($r11, $r10);

        $r12 = new org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$EndOfLineTreeNode;

        specialinvoke $r12.<org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$EndOfLineTreeNode: void <init>(org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$1)>(null);

        $r13 = <org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$NonLeafLookupTreeNode WHITE_LOOKUP_TREE_ROOT>;

        staticinvoke <org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: void addLookupTreeNode(short,org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$NonLeafLookupTreeNode,org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$LookupTreeNode)>(2816, $r13, $r12);

        $r14 = <org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$NonLeafLookupTreeNode BLACK_LOOKUP_TREE_ROOT>;

        staticinvoke <org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: void addLookupTreeNode(short,org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$NonLeafLookupTreeNode,org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$LookupTreeNode)>(2816, $r14, $r12);

        return;
    }

    private static void buildUpTerminating(short[], org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$NonLeafLookupTreeNode, boolean)
    {
        short $s1;
        byte $b3;
        org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$NonLeafLookupTreeNode r2;
        int i0, i2;
        org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$RunLengthTreeNode $r1;
        short[] r0;
        boolean z0;

        r0 := @parameter0: short[];

        r2 := @parameter1: org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$NonLeafLookupTreeNode;

        z0 := @parameter2: boolean;

        i2 = 0;

        i0 = lengthof r0;

     label1:
        if i2 >= i0 goto label4;

        $r1 = new org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$RunLengthTreeNode;

        if z0 == 0 goto label2;

        $b3 = 0;

        goto label3;

     label2:
        $b3 = 1;

     label3:
        specialinvoke $r1.<org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$RunLengthTreeNode: void <init>(int,int)>($b3, i2);

        $s1 = r0[i2];

        staticinvoke <org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: void addLookupTreeNode(short,org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$NonLeafLookupTreeNode,org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$LookupTreeNode)>($s1, r2, $r1);

        i2 = i2 + 1;

        goto label1;

     label4:
        return;
    }

    private static void buildUpMakeUp(short[], org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$NonLeafLookupTreeNode)
    {
        org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$MakeUpTreeNode $r1;
        short $s3;
        org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$NonLeafLookupTreeNode r2;
        int i0, $i1, $i2, i4;
        short[] r0;

        r0 := @parameter0: short[];

        r2 := @parameter1: org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$NonLeafLookupTreeNode;

        i4 = 0;

        i0 = lengthof r0;

     label1:
        if i4 >= i0 goto label2;

        $r1 = new org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$MakeUpTreeNode;

        $i1 = i4 + 1;

        $i2 = $i1 * 64;

        specialinvoke $r1.<org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$MakeUpTreeNode: void <init>(int)>($i2);

        $s3 = r0[i4];

        staticinvoke <org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: void addLookupTreeNode(short,org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$NonLeafLookupTreeNode,org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$LookupTreeNode)>($s3, r2, $r1);

        i4 = i4 + 1;

        goto label1;

     label2:
        return;
    }

    private static void buildUpMakeUpLong(short[], org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$NonLeafLookupTreeNode)
    {
        org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$MakeUpTreeNode $r1;
        short $s3;
        org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$NonLeafLookupTreeNode r2;
        int i0, $i1, $i2, i4;
        short[] r0;

        r0 := @parameter0: short[];

        r2 := @parameter1: org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$NonLeafLookupTreeNode;

        i4 = 0;

        i0 = lengthof r0;

     label1:
        if i4 >= i0 goto label2;

        $r1 = new org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$MakeUpTreeNode;

        $i1 = i4 + 28;

        $i2 = $i1 * 64;

        specialinvoke $r1.<org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$MakeUpTreeNode: void <init>(int)>($i2);

        $s3 = r0[i4];

        staticinvoke <org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: void addLookupTreeNode(short,org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$NonLeafLookupTreeNode,org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$LookupTreeNode)>($s3, r2, $r1);

        i4 = i4 + 1;

        goto label1;

     label2:
        return;
    }

    private static void addLookupTreeNode(short, org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$NonLeafLookupTreeNode, org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$LookupTreeNode)
    {
        java.lang.IllegalStateException $r17, $r18;
        short s0, s2, s6;
        int i1, $i3, i4, i5, $i7, $i8, $i10, $i11, $i12;
        org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$LookupTreeNode $r1, r2, $r4, r14;
        java.lang.String $r9, $r11;
        boolean $z0;
        org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$NonLeafLookupTreeNode r0, r13, $r15;
        java.lang.StringBuilder $r7, $r10, $r16;
        java.lang.Class $r8;

        s0 := @parameter0: short;

        r0 := @parameter1: org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$NonLeafLookupTreeNode;

        r2 := @parameter2: org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$LookupTreeNode;

        $i7 = (int) s0;

        i1 = $i7 >> 8;

        s2 = s0 & 255;

        r13 = r0;

        i5 = i1 - 1;

     label1:
        if i5 <= 0 goto label5;

        $i8 = (int) s2;

        $i3 = $i8 >> i5;

        i4 = $i3 & 1;

        $r4 = virtualinvoke r13.<org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$NonLeafLookupTreeNode: org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$LookupTreeNode get(int)>(i4);

        r14 = $r4;

        if $r4 != null goto label2;

        $r15 = new org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$NonLeafLookupTreeNode;

        specialinvoke $r15.<org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$NonLeafLookupTreeNode: void <init>(org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$1)>(null);

        r14 = $r15;

        virtualinvoke r13.<org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$NonLeafLookupTreeNode: void set(int,org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$LookupTreeNode)>(i4, $r15);

     label2:
        $z0 = r14 instanceof org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$NonLeafLookupTreeNode;

        if $z0 == 0 goto label3;

        r13 = (org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$NonLeafLookupTreeNode) r14;

        goto label4;

     label3:
        $r17 = new java.lang.IllegalStateException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NonLeafLookupTreeNode expected, was ");

        $r8 = virtualinvoke r14.<java.lang.Object: java.lang.Class getClass()>();

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r11);

        throw $r17;

     label4:
        $i10 = (int) -1;

        i5 = i5 + $i10;

        goto label1;

     label5:
        s6 = s2 & 1;

        $i11 = (int) s6;

        $r1 = virtualinvoke r13.<org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$NonLeafLookupTreeNode: org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$LookupTreeNode get(int)>($i11);

        if $r1 == null goto label6;

        $r18 = new java.lang.IllegalStateException;

        specialinvoke $r18.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Two codes conflicting in lookup tree");

        throw $r18;

     label6:
        $i12 = (int) s6;

        virtualinvoke r13.<org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$NonLeafLookupTreeNode: void set(int,org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$LookupTreeNode)>($i12, r2);

        return;
    }

    static int access$300(org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream) throws java.io.IOException
    {
        int $i0;
        org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream r0;

        r0 := @parameter0: org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream;

        $i0 = specialinvoke r0.<org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: int readBit()>();

        return $i0;
    }

    static void access$400(org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream, int, int)
    {
        int i0, i1;
        org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream r0;

        r0 := @parameter0: org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: void writeRun(int,int)>(i0, i1);

        return;
    }

    static void access$500(org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream, int)
    {
        int i0;
        org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream r0;

        r0 := @parameter0: org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream;

        i0 := @parameter1: int;

        specialinvoke r0.<org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: void writeNonTerminating(int)>(i0);

        return;
    }

    static void <clinit>()
    {
        int[] $r2;
        org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$NonLeafLookupTreeNode $r0, $r1;

        <org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: short EOL_STARTER> = 2816;

        <org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: int SIGNAL_EOL> = -2;

        <org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: int SIGNAL_EOD> = -1;

        <org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: int CODE_WORD> = 0;

        $r0 = new org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$NonLeafLookupTreeNode;

        specialinvoke $r0.<org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$NonLeafLookupTreeNode: void <init>(org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$1)>(null);

        <org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$NonLeafLookupTreeNode WHITE_LOOKUP_TREE_ROOT> = $r0;

        $r1 = new org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$NonLeafLookupTreeNode;

        specialinvoke $r1.<org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$NonLeafLookupTreeNode: void <init>(org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$1)>(null);

        <org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream$NonLeafLookupTreeNode BLACK_LOOKUP_TREE_ROOT> = $r1;

        staticinvoke <org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: void buildLookupTree()>();

        $r2 = newarray (int)[8];

        $r2[0] = 128;

        $r2[1] = 64;

        $r2[2] = 32;

        $r2[3] = 16;

        $r2[4] = 8;

        $r2[5] = 4;

        $r2[6] = 2;

        $r2[7] = 1;

        <org.apache.pdfbox.io.ccitt.CCITTFaxG31DDecodeInputStream: int[] BIT_POS_MASKS> = $r2;

        return;
    }
}
