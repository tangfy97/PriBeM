public class com.hp.hpl.jena.sparql.sse.builders.BuilderNode extends java.lang.Object
{

    public void <init>()
    {
        com.hp.hpl.jena.sparql.sse.builders.BuilderNode r0;

        r0 := @this: com.hp.hpl.jena.sparql.sse.builders.BuilderNode;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.hp.hpl.jena.graph.Node buildNode(com.hp.hpl.jena.sparql.sse.Item)
    {
        com.hp.hpl.jena.sparql.sse.Item r0;
        com.hp.hpl.jena.graph.Node $r1, $r2, $r3;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: com.hp.hpl.jena.sparql.sse.Item;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: boolean isSymbol(java.lang.String)>("true");

        if $z0 == 0 goto label1;

        $r3 = <com.hp.hpl.jena.sparql.graph.NodeConst: com.hp.hpl.jena.graph.Node nodeTrue>;

        return $r3;

     label1:
        $z1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: boolean isSymbol(java.lang.String)>("false");

        if $z1 == 0 goto label2;

        $r2 = <com.hp.hpl.jena.sparql.graph.NodeConst: com.hp.hpl.jena.graph.Node nodeFalse>;

        return $r2;

     label2:
        $z2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: boolean isNode()>();

        if $z2 != 0 goto label3;

        staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderLib: void broken(com.hp.hpl.jena.sparql.sse.ItemLocation,java.lang.String,com.hp.hpl.jena.sparql.sse.Item)>(r0, "Not a node", r0);

     label3:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.graph.Node getNode()>();

        return $r1;
    }

    public static java.util.List buildNodeList(com.hp.hpl.jena.sparql.sse.Item)
    {
        com.hp.hpl.jena.sparql.sse.Item r0;
        java.util.List $r2;
        com.hp.hpl.jena.sparql.sse.ItemList $r1;

        r0 := @parameter0: com.hp.hpl.jena.sparql.sse.Item;

        staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderLib: void checkList(com.hp.hpl.jena.sparql.sse.Item)>(r0);

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.ItemList getList()>();

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderNode: java.util.List buildNodeList(com.hp.hpl.jena.sparql.sse.ItemList)>($r1);

        return $r2;
    }

    public static java.util.List buildNodeList(com.hp.hpl.jena.sparql.sse.ItemList)
    {
        com.hp.hpl.jena.sparql.sse.ItemList r1;
        java.util.Iterator $r2;
        java.lang.Object $r3;
        com.hp.hpl.jena.sparql.sse.Item r4;
        com.hp.hpl.jena.graph.Node $r5;
        java.util.ArrayList $r0;
        boolean $z0;

        r1 := @parameter0: com.hp.hpl.jena.sparql.sse.ItemList;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.sse.ItemList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.hp.hpl.jena.sparql.sse.Item) $r3;

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderNode: com.hp.hpl.jena.graph.Node buildNode(com.hp.hpl.jena.sparql.sse.Item)>(r4);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r5);

        goto label1;

     label2:
        return $r0;
    }

    public static com.hp.hpl.jena.sparql.core.Var buildVar(com.hp.hpl.jena.sparql.sse.Item)
    {
        com.hp.hpl.jena.sparql.sse.Item r0;
        com.hp.hpl.jena.graph.Node $r1, $r2;
        com.hp.hpl.jena.sparql.core.Var $r3;
        boolean $z0, $z1;

        r0 := @parameter0: com.hp.hpl.jena.sparql.sse.Item;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: boolean isNode()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.graph.Node getNode()>();

        $z1 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: boolean isVar(com.hp.hpl.jena.graph.Node)>($r1);

        if $z1 != 0 goto label2;

     label1:
        staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderLib: void broken(com.hp.hpl.jena.sparql.sse.ItemLocation,java.lang.String,com.hp.hpl.jena.sparql.sse.Item)>(r0, "Not a variable", r0);

     label2:
        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.graph.Node getNode()>();

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: com.hp.hpl.jena.sparql.core.Var alloc(com.hp.hpl.jena.graph.Node)>($r2);

        return $r3;
    }

    public static java.util.List buildVarList(com.hp.hpl.jena.sparql.sse.Item)
    {
        com.hp.hpl.jena.sparql.sse.Item r0;
        java.util.List $r2;
        com.hp.hpl.jena.sparql.sse.ItemList $r1;

        r0 := @parameter0: com.hp.hpl.jena.sparql.sse.Item;

        staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderLib: void checkList(com.hp.hpl.jena.sparql.sse.Item)>(r0);

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.ItemList getList()>();

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderNode: java.util.List buildVarList(com.hp.hpl.jena.sparql.sse.ItemList)>($r1);

        return $r2;
    }

    public static java.util.List buildVarList(com.hp.hpl.jena.sparql.sse.ItemList)
    {
        com.hp.hpl.jena.sparql.sse.ItemList r4;
        java.util.Iterator $r6;
        com.hp.hpl.jena.sparql.sse.Item r1, $r3;
        com.hp.hpl.jena.sparql.core.Var $r2;
        java.util.ArrayList $r5;
        int $i0;
        java.lang.Object $r0;
        boolean $z0, $z1;

        r4 := @parameter0: com.hp.hpl.jena.sparql.sse.ItemList;

        $i0 = virtualinvoke r4.<com.hp.hpl.jena.sparql.sse.ItemList: int size()>();

        if $i0 <= 0 goto label1;

        $r3 = virtualinvoke r4.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.Item getFirst()>();

        $z0 = virtualinvoke $r3.<com.hp.hpl.jena.sparql.sse.Item: boolean isSymbol(java.lang.String)>("vars");

        if $z0 == 0 goto label1;

        r4 = virtualinvoke r4.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.ItemList cdr()>();

     label1:
        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $r6 = virtualinvoke r4.<com.hp.hpl.jena.sparql.sse.ItemList: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r0 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r1 = (com.hp.hpl.jena.sparql.sse.Item) $r0;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderNode: com.hp.hpl.jena.sparql.core.Var buildVar(com.hp.hpl.jena.sparql.sse.Item)>(r1);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r2);

        goto label2;

     label3:
        return $r5;
    }

    public static java.lang.String buildSymbol(com.hp.hpl.jena.sparql.sse.Item)
    {
        com.hp.hpl.jena.sparql.sse.Item r0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.sse.Item;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: boolean isSymbol()>();

        if $z0 != 0 goto label1;

        staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderLib: void broken(com.hp.hpl.jena.sparql.sse.ItemLocation,java.lang.String,com.hp.hpl.jena.sparql.sse.Item)>(r0, "Not a symbol", r0);

     label1:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: java.lang.String getSymbol()>();

        return $r1;
    }

    public static java.util.List buildVars(com.hp.hpl.jena.sparql.sse.ItemList)
    {
        com.hp.hpl.jena.sparql.sse.ItemList $r0, r5;
        com.hp.hpl.jena.sparql.sse.Item $r2;
        com.hp.hpl.jena.graph.Node $r3;
        com.hp.hpl.jena.sparql.core.Var $r4;
        java.util.ArrayList $r1;
        int $i0, i1;

        r5 := @parameter0: com.hp.hpl.jena.sparql.sse.ItemList;

        $r0 = staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderLib: com.hp.hpl.jena.sparql.sse.ItemList skipTag(com.hp.hpl.jena.sparql.sse.ItemList,java.lang.String)>(r5, "vars");

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        i1 = 0;

     label1:
        $i0 = virtualinvoke $r0.<com.hp.hpl.jena.sparql.sse.ItemList: int size()>();

        if i1 >= $i0 goto label2;

        $r2 = virtualinvoke $r0.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.Item get(int)>(i1);

        staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderNode: com.hp.hpl.jena.sparql.core.Var buildVar(com.hp.hpl.jena.sparql.sse.Item)>($r2);

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.graph.Node getNode()>();

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: com.hp.hpl.jena.sparql.core.Var alloc(com.hp.hpl.jena.graph.Node)>($r3);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r4);

        i1 = i1 + 1;

        goto label1;

     label2:
        return $r1;
    }

    private static java.math.BigInteger buildInteger(com.hp.hpl.jena.sparql.sse.Item, boolean)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue $r2;
        com.hp.hpl.jena.graph.Node $r1;
        java.math.BigInteger $r3;
        java.lang.String $r7, $r11, $r15;
        boolean z0, $z1, $z2, $z3, $z4;
        com.hp.hpl.jena.sparql.sse.Item r0, $r16;
        java.lang.StringBuilder $r4, $r5, $r6, $r8, $r9, $r10, $r12, $r13, $r14;

        r0 := @parameter0: com.hp.hpl.jena.sparql.sse.Item;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $r16 = <com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.Item defaultItem>;

        $z4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: boolean equals(java.lang.Object)>($r16);

        if $z4 == 0 goto label1;

        return null;

     label1:
        $z1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: boolean isNode()>();

        if $z1 != 0 goto label2;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not an integer: ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderLib: void broken(com.hp.hpl.jena.sparql.sse.Item,java.lang.String)>(r0, $r15);

     label2:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.graph.Node getNode()>();

        $z2 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z2 != 0 goto label3;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not an integer: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderLib: void broken(com.hp.hpl.jena.sparql.sse.Item,java.lang.String)>(r0, $r11);

     label3:
        $r2 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(com.hp.hpl.jena.graph.Node)>($r1);

        $z3 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isInteger()>();

        if $z3 != 0 goto label4;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not an integer: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderLib: void broken(com.hp.hpl.jena.sparql.sse.Item,java.lang.String)>(r0, $r7);

     label4:
        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.expr.NodeValue: java.math.BigInteger getInteger()>();

        return $r3;
    }

    public static long buildLong(com.hp.hpl.jena.sparql.sse.Item)
    {
        com.hp.hpl.jena.sparql.sse.Item r0;
        java.math.BigInteger $r1;
        long $l0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.sse.Item;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderNode: java.math.BigInteger buildInteger(com.hp.hpl.jena.sparql.sse.Item,boolean)>(r0, 0);

        $l0 = virtualinvoke $r1.<java.math.BigInteger: long longValue()>();

        return $l0;
    }

    public static long buildLong(com.hp.hpl.jena.sparql.sse.Item, int)
    {
        int i1;
        com.hp.hpl.jena.sparql.sse.Item r0;
        java.math.BigInteger $r1;
        long $l0, $l2;

        r0 := @parameter0: com.hp.hpl.jena.sparql.sse.Item;

        i1 := @parameter1: int;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderNode: java.math.BigInteger buildInteger(com.hp.hpl.jena.sparql.sse.Item,boolean)>(r0, 1);

        if $r1 != null goto label1;

        $l2 = (long) i1;

        return $l2;

     label1:
        $l0 = virtualinvoke $r1.<java.math.BigInteger: long longValue()>();

        return $l0;
    }

    public static long buildLong(com.hp.hpl.jena.sparql.sse.ItemList, int)
    {
        com.hp.hpl.jena.sparql.sse.ItemList r0;
        int i0;
        com.hp.hpl.jena.sparql.sse.Item $r1;
        long $l1;

        r0 := @parameter0: com.hp.hpl.jena.sparql.sse.ItemList;

        i0 := @parameter1: int;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.Item get(int)>(i0);

        $l1 = staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderNode: long buildLong(com.hp.hpl.jena.sparql.sse.Item)>($r1);

        return $l1;
    }

    public static long buildLong(com.hp.hpl.jena.sparql.sse.ItemList, int, int)
    {
        com.hp.hpl.jena.sparql.sse.ItemList r0;
        int i0, i1;
        com.hp.hpl.jena.sparql.sse.Item $r1;
        long $l2;

        r0 := @parameter0: com.hp.hpl.jena.sparql.sse.ItemList;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.Item get(int)>(i0);

        $l2 = staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderNode: long buildLong(com.hp.hpl.jena.sparql.sse.Item,int)>($r1, i1);

        return $l2;
    }

    public static int buildInt(com.hp.hpl.jena.sparql.sse.Item)
    {
        int $i0;
        com.hp.hpl.jena.sparql.sse.Item r0;
        java.math.BigInteger $r1;

        r0 := @parameter0: com.hp.hpl.jena.sparql.sse.Item;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderNode: java.math.BigInteger buildInteger(com.hp.hpl.jena.sparql.sse.Item,boolean)>(r0, 0);

        $i0 = virtualinvoke $r1.<java.math.BigInteger: int intValue()>();

        return $i0;
    }

    public static int buildInt(com.hp.hpl.jena.sparql.sse.Item, int)
    {
        int $i0, i1;
        com.hp.hpl.jena.sparql.sse.Item r0;
        java.math.BigInteger $r1;

        r0 := @parameter0: com.hp.hpl.jena.sparql.sse.Item;

        i1 := @parameter1: int;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderNode: java.math.BigInteger buildInteger(com.hp.hpl.jena.sparql.sse.Item,boolean)>(r0, 1);

        if $r1 != null goto label1;

        return i1;

     label1:
        $i0 = virtualinvoke $r1.<java.math.BigInteger: int intValue()>();

        return $i0;
    }

    public static int buildInt(com.hp.hpl.jena.sparql.sse.ItemList, int)
    {
        com.hp.hpl.jena.sparql.sse.ItemList r0;
        int i0, $i1;
        com.hp.hpl.jena.sparql.sse.Item $r1;

        r0 := @parameter0: com.hp.hpl.jena.sparql.sse.ItemList;

        i0 := @parameter1: int;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.Item get(int)>(i0);

        $i1 = staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderNode: int buildInt(com.hp.hpl.jena.sparql.sse.Item)>($r1);

        return $i1;
    }

    public static int buildInt(com.hp.hpl.jena.sparql.sse.ItemList, int, int)
    {
        com.hp.hpl.jena.sparql.sse.ItemList r0;
        int i0, i1, $i2;
        com.hp.hpl.jena.sparql.sse.Item $r1;

        r0 := @parameter0: com.hp.hpl.jena.sparql.sse.ItemList;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.Item get(int)>(i0);

        $i2 = staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderNode: int buildInt(com.hp.hpl.jena.sparql.sse.Item,int)>($r1, i1);

        return $i2;
    }
}
