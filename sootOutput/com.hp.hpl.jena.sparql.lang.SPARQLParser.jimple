public abstract class com.hp.hpl.jena.sparql.lang.SPARQLParser extends java.lang.Object
{

    public void <init>()
    {
        com.hp.hpl.jena.sparql.lang.SPARQLParser r0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.SPARQLParser;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final com.hp.hpl.jena.query.Query parse(com.hp.hpl.jena.query.Query, java.lang.String) throws com.hp.hpl.jena.query.QueryParseException
    {
        com.hp.hpl.jena.query.Query r1, $r2;
        java.lang.String r3;
        com.hp.hpl.jena.sparql.lang.SPARQLParser r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.SPARQLParser;

        r1 := @parameter0: com.hp.hpl.jena.query.Query;

        r3 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r3.<java.lang.String: boolean startsWith(java.lang.String)>("\ufeff");

        if $z0 == 0 goto label1;

        r3 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int)>(1);

     label1:
        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.lang.SPARQLParser: com.hp.hpl.jena.query.Query parse$(com.hp.hpl.jena.query.Query,java.lang.String)>(r1, r3);

        return $r2;
    }

    protected abstract com.hp.hpl.jena.query.Query parse$(com.hp.hpl.jena.query.Query, java.lang.String) throws com.hp.hpl.jena.query.QueryParseException;

    public static boolean canParse(com.hp.hpl.jena.query.Syntax)
    {
        com.hp.hpl.jena.query.Syntax r1;
        com.hp.hpl.jena.sparql.lang.SPARQLParserRegistry $r0;
        boolean $z0;

        r1 := @parameter0: com.hp.hpl.jena.query.Syntax;

        $r0 = staticinvoke <com.hp.hpl.jena.sparql.lang.SPARQLParserRegistry: com.hp.hpl.jena.sparql.lang.SPARQLParserRegistry get()>();

        $z0 = virtualinvoke $r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserRegistry: boolean containsFactory(com.hp.hpl.jena.query.Syntax)>(r1);

        return $z0;
    }

    public static com.hp.hpl.jena.sparql.lang.SPARQLParser createParser(com.hp.hpl.jena.query.Syntax)
    {
        com.hp.hpl.jena.query.Syntax r1;
        com.hp.hpl.jena.sparql.lang.SPARQLParserRegistry $r0;
        com.hp.hpl.jena.sparql.lang.SPARQLParser $r2;

        r1 := @parameter0: com.hp.hpl.jena.query.Syntax;

        $r0 = staticinvoke <com.hp.hpl.jena.sparql.lang.SPARQLParserRegistry: com.hp.hpl.jena.sparql.lang.SPARQLParserRegistry get()>();

        $r2 = virtualinvoke $r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserRegistry: com.hp.hpl.jena.sparql.lang.SPARQLParser createParser(com.hp.hpl.jena.query.Syntax)>(r1);

        return $r2;
    }

    protected void validateParsedQuery(com.hp.hpl.jena.query.Query)
    {
        com.hp.hpl.jena.query.Query r0;
        com.hp.hpl.jena.sparql.lang.SPARQLParser r1;

        r1 := @this: com.hp.hpl.jena.sparql.lang.SPARQLParser;

        r0 := @parameter0: com.hp.hpl.jena.query.Query;

        staticinvoke <com.hp.hpl.jena.sparql.lang.SyntaxVarScope: void check(com.hp.hpl.jena.query.Query)>(r0);

        return;
    }
}
