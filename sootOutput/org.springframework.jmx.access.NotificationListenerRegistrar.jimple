public class org.springframework.jmx.access.NotificationListenerRegistrar extends org.springframework.jmx.support.NotificationListenerHolder implements org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean
{
    protected final org.apache.commons.logging.Log logger;
    private javax.management.MBeanServerConnection server;
    private javax.management.remote.JMXServiceURL serviceUrl;
    private java.util.Map environment;
    private java.lang.String agentId;
    private final org.springframework.jmx.access.ConnectorDelegate connector;
    private javax.management.ObjectName[] actualObjectNames;

    public void <init>()
    {
        org.springframework.jmx.access.ConnectorDelegate $r3;
        org.springframework.jmx.access.NotificationListenerRegistrar r0;
        java.lang.Class $r1;
        org.apache.commons.logging.Log $r2;

        r0 := @this: org.springframework.jmx.access.NotificationListenerRegistrar;

        specialinvoke r0.<org.springframework.jmx.support.NotificationListenerHolder: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        r0.<org.springframework.jmx.access.NotificationListenerRegistrar: org.apache.commons.logging.Log logger> = $r2;

        $r3 = new org.springframework.jmx.access.ConnectorDelegate;

        specialinvoke $r3.<org.springframework.jmx.access.ConnectorDelegate: void <init>()>();

        r0.<org.springframework.jmx.access.NotificationListenerRegistrar: org.springframework.jmx.access.ConnectorDelegate connector> = $r3;

        return;
    }

    public void setServer(javax.management.MBeanServerConnection)
    {
        javax.management.MBeanServerConnection r1;
        org.springframework.jmx.access.NotificationListenerRegistrar r0;

        r0 := @this: org.springframework.jmx.access.NotificationListenerRegistrar;

        r1 := @parameter0: javax.management.MBeanServerConnection;

        r0.<org.springframework.jmx.access.NotificationListenerRegistrar: javax.management.MBeanServerConnection server> = r1;

        return;
    }

    public void setEnvironment(java.util.Map)
    {
        org.springframework.jmx.access.NotificationListenerRegistrar r0;
        java.util.Map r1;

        r0 := @this: org.springframework.jmx.access.NotificationListenerRegistrar;

        r1 := @parameter0: java.util.Map;

        r0.<org.springframework.jmx.access.NotificationListenerRegistrar: java.util.Map environment> = r1;

        return;
    }

    public java.util.Map getEnvironment()
    {
        org.springframework.jmx.access.NotificationListenerRegistrar r0;
        java.util.Map $r1;

        r0 := @this: org.springframework.jmx.access.NotificationListenerRegistrar;

        $r1 = r0.<org.springframework.jmx.access.NotificationListenerRegistrar: java.util.Map environment>;

        return $r1;
    }

    public void setServiceUrl(java.lang.String) throws java.net.MalformedURLException
    {
        javax.management.remote.JMXServiceURL $r1;
        java.lang.String r2;
        org.springframework.jmx.access.NotificationListenerRegistrar r0;

        r0 := @this: org.springframework.jmx.access.NotificationListenerRegistrar;

        r2 := @parameter0: java.lang.String;

        $r1 = new javax.management.remote.JMXServiceURL;

        specialinvoke $r1.<javax.management.remote.JMXServiceURL: void <init>(java.lang.String)>(r2);

        r0.<org.springframework.jmx.access.NotificationListenerRegistrar: javax.management.remote.JMXServiceURL serviceUrl> = $r1;

        return;
    }

    public void setAgentId(java.lang.String)
    {
        java.lang.String r1;
        org.springframework.jmx.access.NotificationListenerRegistrar r0;

        r0 := @this: org.springframework.jmx.access.NotificationListenerRegistrar;

        r1 := @parameter0: java.lang.String;

        r0.<org.springframework.jmx.access.NotificationListenerRegistrar: java.lang.String agentId> = r1;

        return;
    }

    public void afterPropertiesSet()
    {
        javax.management.NotificationListener $r1;
        org.springframework.jmx.access.NotificationListenerRegistrar r0;
        java.util.Set $r2;
        java.lang.IllegalArgumentException $r3, $r4;
        boolean $z0;

        r0 := @this: org.springframework.jmx.access.NotificationListenerRegistrar;

        $r1 = virtualinvoke r0.<org.springframework.jmx.access.NotificationListenerRegistrar: javax.management.NotificationListener getNotificationListener()>();

        if $r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Property \'notificationListener\' is required");

        throw $r4;

     label1:
        $r2 = r0.<org.springframework.jmx.access.NotificationListenerRegistrar: java.util.Set mappedObjectNames>;

        $z0 = staticinvoke <org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>($r2);

        if $z0 == 0 goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Property \'mappedObjectName\' is required");

        throw $r3;

     label2:
        virtualinvoke r0.<org.springframework.jmx.access.NotificationListenerRegistrar: void prepare()>();

        return;
    }

    public void prepare()
    {
        javax.management.NotificationListener $r6;
        org.springframework.jmx.JmxException $r21;
        org.springframework.jmx.access.ConnectorDelegate $r18;
        java.util.Map $r16;
        boolean $z0;
        javax.management.MBeanServerConnection $r1, $r5, $r19;
        javax.management.remote.JMXServiceURL $r17, $r25;
        javax.management.ObjectName r29;
        java.lang.Exception $r20;
        java.util.List $r12;
        javax.management.NotificationFilter $r7;
        javax.management.ObjectName[] $r2, $r4, $r11;
        java.lang.StringBuilder $r9, $r13, $r24, $r26, $r27;
        org.springframework.jmx.MBeanServerNotFoundException $r23;
        int $i0, i1;
        java.lang.String $r14, $r15, $r28;
        org.springframework.jmx.access.NotificationListenerRegistrar r0;
        java.io.IOException $r22;
        org.apache.commons.logging.Log $r3, $r10;
        java.lang.Object $r8;

        r0 := @this: org.springframework.jmx.access.NotificationListenerRegistrar;

        $r1 = r0.<org.springframework.jmx.access.NotificationListenerRegistrar: javax.management.MBeanServerConnection server>;

        if $r1 != null goto label1;

        $r18 = r0.<org.springframework.jmx.access.NotificationListenerRegistrar: org.springframework.jmx.access.ConnectorDelegate connector>;

        $r17 = r0.<org.springframework.jmx.access.NotificationListenerRegistrar: javax.management.remote.JMXServiceURL serviceUrl>;

        $r16 = r0.<org.springframework.jmx.access.NotificationListenerRegistrar: java.util.Map environment>;

        $r15 = r0.<org.springframework.jmx.access.NotificationListenerRegistrar: java.lang.String agentId>;

        $r19 = virtualinvoke $r18.<org.springframework.jmx.access.ConnectorDelegate: javax.management.MBeanServerConnection connect(javax.management.remote.JMXServiceURL,java.util.Map,java.lang.String)>($r17, $r16, $r15);

        r0.<org.springframework.jmx.access.NotificationListenerRegistrar: javax.management.MBeanServerConnection server> = $r19;

     label1:
        $r2 = virtualinvoke r0.<org.springframework.jmx.access.NotificationListenerRegistrar: javax.management.ObjectName[] getResolvedObjectNames()>();

        r0.<org.springframework.jmx.access.NotificationListenerRegistrar: javax.management.ObjectName[] actualObjectNames> = $r2;

        $r3 = r0.<org.springframework.jmx.access.NotificationListenerRegistrar: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label2;

        $r10 = r0.<org.springframework.jmx.access.NotificationListenerRegistrar: org.apache.commons.logging.Log logger>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("Registering NotificationListener for MBeans ");

        $r11 = r0.<org.springframework.jmx.access.NotificationListenerRegistrar: javax.management.ObjectName[] actualObjectNames>;

        $r12 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r11);

        $r13 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r10.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r14);

     label2:
        $r4 = r0.<org.springframework.jmx.access.NotificationListenerRegistrar: javax.management.ObjectName[] actualObjectNames>;

        $i0 = lengthof $r4;

        i1 = 0;

        goto label4;

     label3:
        r29 = $r4[i1];

        $r5 = r0.<org.springframework.jmx.access.NotificationListenerRegistrar: javax.management.MBeanServerConnection server>;

        $r6 = virtualinvoke r0.<org.springframework.jmx.access.NotificationListenerRegistrar: javax.management.NotificationListener getNotificationListener()>();

        $r7 = virtualinvoke r0.<org.springframework.jmx.access.NotificationListenerRegistrar: javax.management.NotificationFilter getNotificationFilter()>();

        $r8 = virtualinvoke r0.<org.springframework.jmx.access.NotificationListenerRegistrar: java.lang.Object getHandback()>();

        interfaceinvoke $r5.<javax.management.MBeanServerConnection: void addNotificationListener(javax.management.ObjectName,javax.management.NotificationListener,javax.management.NotificationFilter,java.lang.Object)>(r29, $r6, $r7, $r8);

        i1 = i1 + 1;

     label4:
        if i1 < $i0 goto label3;

     label5:
        goto label8;

     label6:
        $r22 := @caughtexception;

        $r23 = new org.springframework.jmx.MBeanServerNotFoundException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not connect to remote MBeanServer at URL [");

        $r25 = r0.<org.springframework.jmx.access.NotificationListenerRegistrar: javax.management.remote.JMXServiceURL serviceUrl>;

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<org.springframework.jmx.MBeanServerNotFoundException: void <init>(java.lang.String,java.lang.Throwable)>($r28, $r22);

        throw $r23;

     label7:
        $r20 := @caughtexception;

        $r21 = new org.springframework.jmx.JmxException;

        specialinvoke $r21.<org.springframework.jmx.JmxException: void <init>(java.lang.String,java.lang.Throwable)>("Unable to register NotificationListener", $r20);

        throw $r21;

     label8:
        return;

        catch java.io.IOException from label1 to label5 with label6;
        catch java.lang.Exception from label1 to label5 with label7;
    }

    public void destroy()
    {
        java.lang.Throwable $r9;
        javax.management.NotificationListener $r6;
        org.springframework.jmx.access.ConnectorDelegate $r2, $r10;
        int i0, i1;
        boolean $z0;
        javax.management.MBeanServerConnection $r5;
        org.springframework.jmx.access.NotificationListenerRegistrar r0;
        javax.management.ObjectName r4;
        java.lang.Exception $r11;
        javax.management.NotificationFilter $r7;
        javax.management.ObjectName[] $r1, $r3;
        java.lang.Object $r8;
        org.apache.commons.logging.Log $r12, $r13;

        r0 := @this: org.springframework.jmx.access.NotificationListenerRegistrar;

     label1:
        $r1 = r0.<org.springframework.jmx.access.NotificationListenerRegistrar: javax.management.ObjectName[] actualObjectNames>;

        if $r1 == null goto label9;

        $r3 = r0.<org.springframework.jmx.access.NotificationListenerRegistrar: javax.management.ObjectName[] actualObjectNames>;

        i0 = lengthof $r3;

        i1 = 0;

        goto label7;

     label2:
        r4 = $r3[i1];

     label3:
        $r5 = r0.<org.springframework.jmx.access.NotificationListenerRegistrar: javax.management.MBeanServerConnection server>;

        $r6 = virtualinvoke r0.<org.springframework.jmx.access.NotificationListenerRegistrar: javax.management.NotificationListener getNotificationListener()>();

        $r7 = virtualinvoke r0.<org.springframework.jmx.access.NotificationListenerRegistrar: javax.management.NotificationFilter getNotificationFilter()>();

        $r8 = virtualinvoke r0.<org.springframework.jmx.access.NotificationListenerRegistrar: java.lang.Object getHandback()>();

        interfaceinvoke $r5.<javax.management.MBeanServerConnection: void removeNotificationListener(javax.management.ObjectName,javax.management.NotificationListener,javax.management.NotificationFilter,java.lang.Object)>(r4, $r6, $r7, $r8);

     label4:
        goto label6;

     label5:
        $r11 := @caughtexception;

        $r12 = r0.<org.springframework.jmx.access.NotificationListenerRegistrar: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r12.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label6;

        $r13 = r0.<org.springframework.jmx.access.NotificationListenerRegistrar: org.apache.commons.logging.Log logger>;

        interfaceinvoke $r13.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>("Unable to unregister NotificationListener", $r11);

     label6:
        i1 = i1 + 1;

     label7:
        if i1 < i0 goto label2;

        goto label9;

     label8:
        $r9 := @caughtexception;

        $r10 = r0.<org.springframework.jmx.access.NotificationListenerRegistrar: org.springframework.jmx.access.ConnectorDelegate connector>;

        virtualinvoke $r10.<org.springframework.jmx.access.ConnectorDelegate: void close()>();

        throw $r9;

     label9:
        $r2 = r0.<org.springframework.jmx.access.NotificationListenerRegistrar: org.springframework.jmx.access.ConnectorDelegate connector>;

        virtualinvoke $r2.<org.springframework.jmx.access.ConnectorDelegate: void close()>();

        return;

        catch java.lang.Exception from label3 to label4 with label5;
        catch java.lang.Throwable from label1 to label8 with label8;
    }
}
