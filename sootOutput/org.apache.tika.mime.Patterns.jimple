class org.apache.tika.mime.Patterns extends java.lang.Object implements java.io.Serializable
{
    private static final long serialVersionUID;
    private final org.apache.tika.mime.MediaTypeRegistry registry;
    private final java.util.Map names;
    private final java.util.Map extensions;
    private int minExtensionLength;
    private int maxExtensionLength;
    private final java.util.SortedMap globs;

    public void <init>(org.apache.tika.mime.MediaTypeRegistry)
    {
        org.apache.tika.mime.Patterns r0;
        java.util.TreeMap $r3;
        org.apache.tika.mime.MediaTypeRegistry r5;
        java.util.HashMap $r1, $r2;
        org.apache.tika.mime.Patterns$LengthComparator $r4;

        r0 := @this: org.apache.tika.mime.Patterns;

        r5 := @parameter0: org.apache.tika.mime.MediaTypeRegistry;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.apache.tika.mime.Patterns: java.util.Map names> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<org.apache.tika.mime.Patterns: java.util.Map extensions> = $r2;

        r0.<org.apache.tika.mime.Patterns: int minExtensionLength> = 2147483647;

        r0.<org.apache.tika.mime.Patterns: int maxExtensionLength> = 0;

        $r3 = new java.util.TreeMap;

        $r4 = new org.apache.tika.mime.Patterns$LengthComparator;

        specialinvoke $r4.<org.apache.tika.mime.Patterns$LengthComparator: void <init>(org.apache.tika.mime.Patterns$1)>(null);

        specialinvoke $r3.<java.util.TreeMap: void <init>(java.util.Comparator)>($r4);

        r0.<org.apache.tika.mime.Patterns: java.util.SortedMap globs> = $r3;

        r0.<org.apache.tika.mime.Patterns: org.apache.tika.mime.MediaTypeRegistry registry> = r5;

        return;
    }

    public void add(java.lang.String, org.apache.tika.mime.MimeType) throws org.apache.tika.mime.MimeTypeException
    {
        org.apache.tika.mime.Patterns r0;
        java.lang.String r1;
        org.apache.tika.mime.MimeType r2;

        r0 := @this: org.apache.tika.mime.Patterns;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.tika.mime.MimeType;

        virtualinvoke r0.<org.apache.tika.mime.Patterns: void add(java.lang.String,boolean,org.apache.tika.mime.MimeType)>(r1, 0, r2);

        return;
    }

    public void add(java.lang.String, boolean, org.apache.tika.mime.MimeType) throws org.apache.tika.mime.MimeTypeException
    {
        org.apache.tika.mime.Patterns r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7, $i9, $i11, $i13, $i15, $i17;
        java.lang.String r0, $r4, $r5;
        boolean z0, $z1;
        java.lang.IllegalArgumentException $r6;
        org.apache.tika.mime.MimeType r2;

        r3 := @this: org.apache.tika.mime.Patterns;

        r0 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r2 := @parameter2: org.apache.tika.mime.MimeType;

        if r0 == null goto label1;

        if r2 != null goto label2;

     label1:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Pattern and/or mime type is missing");

        throw $r6;

     label2:
        if z0 == 0 goto label3;

        specialinvoke r3.<org.apache.tika.mime.Patterns: void addGlob(java.lang.String,org.apache.tika.mime.MimeType)>(r0, r2);

        goto label6;

     label3:
        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(42);

        $i7 = (int) -1;

        if $i0 != $i7 goto label4;

        $i4 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(63);

        $i9 = (int) -1;

        if $i4 != $i9 goto label4;

        $i5 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(91);

        $i11 = (int) -1;

        if $i5 != $i11 goto label4;

        specialinvoke r3.<org.apache.tika.mime.Patterns: void addName(java.lang.String,org.apache.tika.mime.MimeType)>(r0, r2);

        goto label6;

     label4:
        $z1 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("*");

        if $z1 == 0 goto label5;

        $i1 = virtualinvoke r0.<java.lang.String: int indexOf(int,int)>(42, 1);

        $i13 = (int) -1;

        if $i1 != $i13 goto label5;

        $i2 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(63);

        $i15 = (int) -1;

        if $i2 != $i15 goto label5;

        $i3 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(91);

        $i17 = (int) -1;

        if $i3 != $i17 goto label5;

        $r4 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(1);

        specialinvoke r3.<org.apache.tika.mime.Patterns: void addExtension(java.lang.String,org.apache.tika.mime.MimeType)>($r4, r2);

        virtualinvoke r2.<org.apache.tika.mime.MimeType: void addExtension(java.lang.String)>($r4);

        goto label6;

     label5:
        $r5 = specialinvoke r3.<org.apache.tika.mime.Patterns: java.lang.String compile(java.lang.String)>(r0);

        specialinvoke r3.<org.apache.tika.mime.Patterns: void addGlob(java.lang.String,org.apache.tika.mime.MimeType)>($r5, r2);

     label6:
        return;
    }

    private void addName(java.lang.String, org.apache.tika.mime.MimeType) throws org.apache.tika.mime.MimeTypeException
    {
        org.apache.tika.mime.MediaTypeRegistry $r7, $r10;
        org.apache.tika.mime.MediaType $r8, $r9, $r11, $r12;
        org.apache.tika.mime.Patterns r0;
        java.util.Map $r2, $r6;
        java.lang.String r1, $r17;
        boolean $z0, $z1;
        java.lang.Object $r3;
        java.lang.StringBuilder $r14, $r15, $r16;
        org.apache.tika.mime.MimeTypeException $r13;
        org.apache.tika.mime.MimeType r4, r5;

        r0 := @this: org.apache.tika.mime.Patterns;

        r1 := @parameter0: java.lang.String;

        r5 := @parameter1: org.apache.tika.mime.MimeType;

        $r2 = r0.<org.apache.tika.mime.Patterns: java.util.Map names>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (org.apache.tika.mime.MimeType) $r3;

        if r4 == null goto label1;

        $r7 = r0.<org.apache.tika.mime.Patterns: org.apache.tika.mime.MediaTypeRegistry registry>;

        $r8 = virtualinvoke r4.<org.apache.tika.mime.MimeType: org.apache.tika.mime.MediaType getType()>();

        $r9 = virtualinvoke r5.<org.apache.tika.mime.MimeType: org.apache.tika.mime.MediaType getType()>();

        $z0 = virtualinvoke $r7.<org.apache.tika.mime.MediaTypeRegistry: boolean isSpecializationOf(org.apache.tika.mime.MediaType,org.apache.tika.mime.MediaType)>($r8, $r9);

        if $z0 == 0 goto label2;

     label1:
        $r6 = r0.<org.apache.tika.mime.Patterns: java.util.Map names>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r5);

        goto label4;

     label2:
        if r4 == r5 goto label4;

        $r10 = r0.<org.apache.tika.mime.Patterns: org.apache.tika.mime.MediaTypeRegistry registry>;

        $r11 = virtualinvoke r5.<org.apache.tika.mime.MimeType: org.apache.tika.mime.MediaType getType()>();

        $r12 = virtualinvoke r4.<org.apache.tika.mime.MimeType: org.apache.tika.mime.MediaType getType()>();

        $z1 = virtualinvoke $r10.<org.apache.tika.mime.MediaTypeRegistry: boolean isSpecializationOf(org.apache.tika.mime.MediaType,org.apache.tika.mime.MediaType)>($r11, $r12);

        if $z1 == 0 goto label3;

        goto label4;

     label3:
        $r13 = new org.apache.tika.mime.MimeTypeException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Conflicting name pattern: ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<org.apache.tika.mime.MimeTypeException: void <init>(java.lang.String)>($r17);

        throw $r13;

     label4:
        return;
    }

    private void addExtension(java.lang.String, org.apache.tika.mime.MimeType) throws org.apache.tika.mime.MimeTypeException
    {
        org.apache.tika.mime.MediaTypeRegistry $r7, $r10;
        org.apache.tika.mime.MediaType $r8, $r9, $r11, $r12;
        org.apache.tika.mime.Patterns r0;
        java.util.Map $r2, $r6;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.String r1, $r17;
        boolean $z0, $z1;
        java.lang.Object $r3;
        java.lang.StringBuilder $r14, $r15, $r16;
        org.apache.tika.mime.MimeTypeException $r13;
        org.apache.tika.mime.MimeType r4, r5;

        r0 := @this: org.apache.tika.mime.Patterns;

        r1 := @parameter0: java.lang.String;

        r5 := @parameter1: org.apache.tika.mime.MimeType;

        $r2 = r0.<org.apache.tika.mime.Patterns: java.util.Map extensions>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (org.apache.tika.mime.MimeType) $r3;

        if r4 == null goto label1;

        $r7 = r0.<org.apache.tika.mime.Patterns: org.apache.tika.mime.MediaTypeRegistry registry>;

        $r8 = virtualinvoke r4.<org.apache.tika.mime.MimeType: org.apache.tika.mime.MediaType getType()>();

        $r9 = virtualinvoke r5.<org.apache.tika.mime.MimeType: org.apache.tika.mime.MediaType getType()>();

        $z0 = virtualinvoke $r7.<org.apache.tika.mime.MediaTypeRegistry: boolean isSpecializationOf(org.apache.tika.mime.MediaType,org.apache.tika.mime.MediaType)>($r8, $r9);

        if $z0 == 0 goto label2;

     label1:
        $r6 = r0.<org.apache.tika.mime.Patterns: java.util.Map extensions>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r5);

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        $i1 = r0.<org.apache.tika.mime.Patterns: int minExtensionLength>;

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i0);

        r0.<org.apache.tika.mime.Patterns: int minExtensionLength> = $i2;

        $i3 = r0.<org.apache.tika.mime.Patterns: int maxExtensionLength>;

        $i4 = staticinvoke <java.lang.Math: int max(int,int)>($i3, $i0);

        r0.<org.apache.tika.mime.Patterns: int maxExtensionLength> = $i4;

        goto label4;

     label2:
        if r4 == r5 goto label4;

        $r10 = r0.<org.apache.tika.mime.Patterns: org.apache.tika.mime.MediaTypeRegistry registry>;

        $r11 = virtualinvoke r5.<org.apache.tika.mime.MimeType: org.apache.tika.mime.MediaType getType()>();

        $r12 = virtualinvoke r4.<org.apache.tika.mime.MimeType: org.apache.tika.mime.MediaType getType()>();

        $z1 = virtualinvoke $r10.<org.apache.tika.mime.MediaTypeRegistry: boolean isSpecializationOf(org.apache.tika.mime.MediaType,org.apache.tika.mime.MediaType)>($r11, $r12);

        if $z1 == 0 goto label3;

        goto label4;

     label3:
        $r13 = new org.apache.tika.mime.MimeTypeException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Conflicting extension pattern: ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<org.apache.tika.mime.MimeTypeException: void <init>(java.lang.String)>($r17);

        throw $r13;

     label4:
        return;
    }

    private void addGlob(java.lang.String, org.apache.tika.mime.MimeType) throws org.apache.tika.mime.MimeTypeException
    {
        org.apache.tika.mime.MediaTypeRegistry $r7, $r10;
        org.apache.tika.mime.MediaType $r8, $r9, $r11, $r12;
        org.apache.tika.mime.Patterns r0;
        java.lang.String r1, $r17;
        boolean $z0, $z1;
        java.lang.Object $r3;
        java.lang.StringBuilder $r14, $r15, $r16;
        org.apache.tika.mime.MimeTypeException $r13;
        java.util.SortedMap $r2, $r6;
        org.apache.tika.mime.MimeType r4, r5;

        r0 := @this: org.apache.tika.mime.Patterns;

        r1 := @parameter0: java.lang.String;

        r5 := @parameter1: org.apache.tika.mime.MimeType;

        $r2 = r0.<org.apache.tika.mime.Patterns: java.util.SortedMap globs>;

        $r3 = interfaceinvoke $r2.<java.util.SortedMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (org.apache.tika.mime.MimeType) $r3;

        if r4 == null goto label1;

        $r7 = r0.<org.apache.tika.mime.Patterns: org.apache.tika.mime.MediaTypeRegistry registry>;

        $r8 = virtualinvoke r4.<org.apache.tika.mime.MimeType: org.apache.tika.mime.MediaType getType()>();

        $r9 = virtualinvoke r5.<org.apache.tika.mime.MimeType: org.apache.tika.mime.MediaType getType()>();

        $z0 = virtualinvoke $r7.<org.apache.tika.mime.MediaTypeRegistry: boolean isSpecializationOf(org.apache.tika.mime.MediaType,org.apache.tika.mime.MediaType)>($r8, $r9);

        if $z0 == 0 goto label2;

     label1:
        $r6 = r0.<org.apache.tika.mime.Patterns: java.util.SortedMap globs>;

        interfaceinvoke $r6.<java.util.SortedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r5);

        goto label4;

     label2:
        if r4 == r5 goto label4;

        $r10 = r0.<org.apache.tika.mime.Patterns: org.apache.tika.mime.MediaTypeRegistry registry>;

        $r11 = virtualinvoke r5.<org.apache.tika.mime.MimeType: org.apache.tika.mime.MediaType getType()>();

        $r12 = virtualinvoke r4.<org.apache.tika.mime.MimeType: org.apache.tika.mime.MediaType getType()>();

        $z1 = virtualinvoke $r10.<org.apache.tika.mime.MediaTypeRegistry: boolean isSpecializationOf(org.apache.tika.mime.MediaType,org.apache.tika.mime.MediaType)>($r11, $r12);

        if $z1 == 0 goto label3;

        goto label4;

     label3:
        $r13 = new org.apache.tika.mime.MimeTypeException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Conflicting glob pattern: ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<org.apache.tika.mime.MimeTypeException: void <init>(java.lang.String)>($r17);

        throw $r13;

     label4:
        return;
    }

    public org.apache.tika.mime.MimeType matches(java.lang.String)
    {
        java.util.Map $r2, $r12, $r13, $r16;
        boolean $z0, $z1, $z2, $z3;
        java.util.Set $r4;
        java.util.SortedMap $r3;
        org.apache.tika.mime.Patterns r1;
        int $i0, $i1, $i2, $i3, $i4, i5, $i7;
        java.lang.String r0, $r8, $r11;
        java.util.Map$Entry r20;
        java.util.Iterator $r5;
        java.lang.IllegalArgumentException $r21;
        java.lang.Object $r6, $r7, $r9, $r14, $r17;
        org.apache.tika.mime.MimeType $r10, $r15, $r18;

        r1 := @this: org.apache.tika.mime.Patterns;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r21 = new java.lang.IllegalArgumentException;

        specialinvoke $r21.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Name is missing");

        throw $r21;

     label1:
        $r2 = r1.<org.apache.tika.mime.Patterns: java.util.Map names>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r0);

        if $z0 == 0 goto label2;

        $r16 = r1.<org.apache.tika.mime.Patterns: java.util.Map names>;

        $r17 = interfaceinvoke $r16.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        $r18 = (org.apache.tika.mime.MimeType) $r17;

        return $r18;

     label2:
        $i0 = r1.<org.apache.tika.mime.Patterns: int maxExtensionLength>;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        i5 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

     label3:
        $i2 = r1.<org.apache.tika.mime.Patterns: int minExtensionLength>;

        if i5 < $i2 goto label5;

        $i3 = virtualinvoke r0.<java.lang.String: int length()>();

        $i4 = $i3 - i5;

        $r11 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i4);

        $r12 = r1.<org.apache.tika.mime.Patterns: java.util.Map extensions>;

        $z3 = interfaceinvoke $r12.<java.util.Map: boolean containsKey(java.lang.Object)>($r11);

        if $z3 == 0 goto label4;

        $r13 = r1.<org.apache.tika.mime.Patterns: java.util.Map extensions>;

        $r14 = interfaceinvoke $r13.<java.util.Map: java.lang.Object get(java.lang.Object)>($r11);

        $r15 = (org.apache.tika.mime.MimeType) $r14;

        return $r15;

     label4:
        $i7 = (int) -1;

        i5 = i5 + $i7;

        goto label3;

     label5:
        $r3 = r1.<org.apache.tika.mime.Patterns: java.util.SortedMap globs>;

        $r4 = interfaceinvoke $r3.<java.util.SortedMap: java.util.Set entrySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label6:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label8;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r20 = (java.util.Map$Entry) $r6;

        $r7 = interfaceinvoke r20.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = (java.lang.String) $r7;

        $z2 = virtualinvoke r0.<java.lang.String: boolean matches(java.lang.String)>($r8);

        if $z2 == 0 goto label7;

        $r9 = interfaceinvoke r20.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r10 = (org.apache.tika.mime.MimeType) $r9;

        return $r10;

     label7:
        goto label6;

     label8:
        return null;
    }

    private java.lang.String compile(java.lang.String)
    {
        char $c1;
        org.apache.tika.mime.Patterns r4;
        int $i0, $i2, i3, $i4, $i5, $i6, $i8;
        java.lang.StringBuilder $r5;
        java.lang.String r1, $r2, $r3;

        r4 := @this: org.apache.tika.mime.Patterns;

        r1 := @parameter0: java.lang.String;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\A");

        i3 = 0;

     label1:
        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if i3 >= $i0 goto label6;

        $c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i3);

        $i4 = (int) $c1;

        if $i4 != 63 goto label2;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        goto label5;

     label2:
        $i5 = (int) $c1;

        if $i5 != 42 goto label3;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".*");

        goto label5;

     label3:
        $r3 = "\\[]^.-$+(){}|";

        $i6 = (int) $c1;

        $i2 = virtualinvoke $r3.<java.lang.String: int indexOf(int)>($i6);

        $i8 = (int) -1;

        if $i2 == $i8 goto label4;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(92);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        goto label5;

     label4:
        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

     label5:
        i3 = i3 + 1;

        goto label1;

     label6:
        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\z");

        $r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public static void <clinit>()
    {
        <org.apache.tika.mime.Patterns: long serialVersionUID> = -5778015347278111140L;

        return;
    }
}
