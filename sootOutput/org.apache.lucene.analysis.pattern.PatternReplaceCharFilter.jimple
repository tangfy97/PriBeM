public class org.apache.lucene.analysis.pattern.PatternReplaceCharFilter extends org.apache.lucene.analysis.charfilter.BaseCharFilter
{
    public static final int DEFAULT_MAX_BLOCK_CHARS;
    private final java.util.regex.Pattern pattern;
    private final java.lang.String replacement;
    private java.io.Reader transformedInput;

    public void <init>(java.util.regex.Pattern, java.lang.String, java.io.Reader)
    {
        org.apache.lucene.analysis.pattern.PatternReplaceCharFilter r0;
        java.io.Reader r1;
        java.util.regex.Pattern r2;
        java.lang.String r3;

        r0 := @this: org.apache.lucene.analysis.pattern.PatternReplaceCharFilter;

        r2 := @parameter0: java.util.regex.Pattern;

        r3 := @parameter1: java.lang.String;

        r1 := @parameter2: java.io.Reader;

        specialinvoke r0.<org.apache.lucene.analysis.charfilter.BaseCharFilter: void <init>(java.io.Reader)>(r1);

        r0.<org.apache.lucene.analysis.pattern.PatternReplaceCharFilter: java.util.regex.Pattern pattern> = r2;

        r0.<org.apache.lucene.analysis.pattern.PatternReplaceCharFilter: java.lang.String replacement> = r3;

        return;
    }

    public void <init>(java.util.regex.Pattern, java.lang.String, int, java.lang.String, java.io.Reader)
    {
        org.apache.lucene.analysis.pattern.PatternReplaceCharFilter r0;
        int i0;
        java.util.regex.Pattern r1;
        java.lang.String r2, r4;
        java.io.Reader r3;

        r0 := @this: org.apache.lucene.analysis.pattern.PatternReplaceCharFilter;

        r1 := @parameter0: java.util.regex.Pattern;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r4 := @parameter3: java.lang.String;

        r3 := @parameter4: java.io.Reader;

        specialinvoke r0.<org.apache.lucene.analysis.pattern.PatternReplaceCharFilter: void <init>(java.util.regex.Pattern,java.lang.String,java.io.Reader)>(r1, r2, r3);

        return;
    }

    public int read(char[], int, int) throws java.io.IOException
    {
        org.apache.lucene.analysis.pattern.PatternReplaceCharFilter r0;
        int i0, i1, $i2;
        char[] r2;
        java.io.Reader $r1, $r3;

        r0 := @this: org.apache.lucene.analysis.pattern.PatternReplaceCharFilter;

        r2 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = r0.<org.apache.lucene.analysis.pattern.PatternReplaceCharFilter: java.io.Reader transformedInput>;

        if $r1 != null goto label1;

        specialinvoke r0.<org.apache.lucene.analysis.pattern.PatternReplaceCharFilter: void fill()>();

     label1:
        $r3 = r0.<org.apache.lucene.analysis.pattern.PatternReplaceCharFilter: java.io.Reader transformedInput>;

        $i2 = virtualinvoke $r3.<java.io.Reader: int read(char[],int,int)>(r2, i0, i1);

        return $i2;
    }

    private void fill() throws java.io.IOException
    {
        java.lang.CharSequence $r5;
        java.io.Reader $r3, $r7;
        org.apache.lucene.analysis.pattern.PatternReplaceCharFilter r2;
        java.io.StringReader $r4;
        int i0;
        char[] r1;
        java.lang.StringBuilder $r0;
        java.lang.String $r6;

        r2 := @this: org.apache.lucene.analysis.pattern.PatternReplaceCharFilter;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        r1 = newarray (char)[1024];

        $r3 = r2.<org.apache.lucene.analysis.pattern.PatternReplaceCharFilter: java.io.Reader input>;

        i0 = virtualinvoke $r3.<java.io.Reader: int read(char[])>(r1);

     label1:
        if i0 <= 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>(r1, 0, i0);

        $r7 = r2.<org.apache.lucene.analysis.pattern.PatternReplaceCharFilter: java.io.Reader input>;

        i0 = virtualinvoke $r7.<java.io.Reader: int read(char[])>(r1);

        goto label1;

     label2:
        $r4 = new java.io.StringReader;

        $r5 = virtualinvoke r2.<org.apache.lucene.analysis.pattern.PatternReplaceCharFilter: java.lang.CharSequence processPattern(java.lang.CharSequence)>($r0);

        $r6 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r4.<java.io.StringReader: void <init>(java.lang.String)>($r6);

        r2.<org.apache.lucene.analysis.pattern.PatternReplaceCharFilter: java.io.Reader transformedInput> = $r4;

        return;
    }

    public int read() throws java.io.IOException
    {
        org.apache.lucene.analysis.pattern.PatternReplaceCharFilter r0;
        int $i0;
        java.io.Reader $r1, $r2;

        r0 := @this: org.apache.lucene.analysis.pattern.PatternReplaceCharFilter;

        $r1 = r0.<org.apache.lucene.analysis.pattern.PatternReplaceCharFilter: java.io.Reader transformedInput>;

        if $r1 != null goto label1;

        specialinvoke r0.<org.apache.lucene.analysis.pattern.PatternReplaceCharFilter: void fill()>();

     label1:
        $r2 = r0.<org.apache.lucene.analysis.pattern.PatternReplaceCharFilter: java.io.Reader transformedInput>;

        $i0 = virtualinvoke $r2.<java.io.Reader: int read()>();

        return $i0;
    }

    protected int correct(int)
    {
        org.apache.lucene.analysis.pattern.PatternReplaceCharFilter r0;
        int i0, $i1, $i2;

        r0 := @this: org.apache.lucene.analysis.pattern.PatternReplaceCharFilter;

        i0 := @parameter0: int;

        $i1 = specialinvoke r0.<org.apache.lucene.analysis.charfilter.BaseCharFilter: int correct(int)>(i0);

        $i2 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i1);

        return $i2;
    }

    java.lang.CharSequence processPattern(java.lang.CharSequence)
    {
        org.apache.lucene.analysis.pattern.PatternReplaceCharFilter r0;
        java.util.regex.Matcher $r3;
        java.lang.StringBuffer $r6;
        int $i0, $i1, i2, $i3, i4, $i5, i6, $i7, i8, $i9, $i10, i11, i12, i13, i14, $i16;
        java.lang.String $r5;
        boolean $z0;
        java.lang.CharSequence r1;
        java.util.regex.Pattern $r2;

        r0 := @this: org.apache.lucene.analysis.pattern.PatternReplaceCharFilter;

        r1 := @parameter0: java.lang.CharSequence;

        $r2 = r0.<org.apache.lucene.analysis.pattern.PatternReplaceCharFilter: java.util.regex.Pattern pattern>;

        $r3 = virtualinvoke $r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        i11 = 0;

        i12 = 0;

     label1:
        $z0 = virtualinvoke $r3.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label5;

        $i0 = virtualinvoke $r3.<java.util.regex.Matcher: int end()>();

        $i1 = virtualinvoke $r3.<java.util.regex.Matcher: int start()>();

        i2 = $i0 - $i1;

        $i3 = virtualinvoke $r3.<java.util.regex.Matcher: int start()>();

        i4 = $i3 - i12;

        i12 = virtualinvoke $r3.<java.util.regex.Matcher: int end()>();

        $i5 = virtualinvoke $r6.<java.lang.StringBuffer: int length()>();

        i6 = $i5 + i4;

        $r5 = r0.<org.apache.lucene.analysis.pattern.PatternReplaceCharFilter: java.lang.String replacement>;

        virtualinvoke $r3.<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>($r6, $r5);

        $i7 = virtualinvoke $r6.<java.lang.StringBuffer: int length()>();

        i8 = $i7 - i6;

        if i2 == i8 goto label4;

        if i8 >= i2 goto label2;

        $i10 = i2 - i8;

        i11 = i11 + $i10;

        i13 = i6 + i8;

        virtualinvoke r0.<org.apache.lucene.analysis.pattern.PatternReplaceCharFilter: void addOffCorrectMap(int,int)>(i13, i11);

        goto label4;

     label2:
        i14 = i2;

     label3:
        if i14 >= i8 goto label4;

        $i9 = i6 + i14;

        $i16 = (int) -1;

        i11 = i11 + $i16;

        virtualinvoke r0.<org.apache.lucene.analysis.pattern.PatternReplaceCharFilter: void addOffCorrectMap(int,int)>($i9, i11);

        i14 = i14 + 1;

        goto label3;

     label4:
        goto label1;

     label5:
        virtualinvoke $r3.<java.util.regex.Matcher: java.lang.StringBuffer appendTail(java.lang.StringBuffer)>($r6);

        return $r6;
    }

    public static void <clinit>()
    {
        <org.apache.lucene.analysis.pattern.PatternReplaceCharFilter: int DEFAULT_MAX_BLOCK_CHARS> = 10000;

        return;
    }
}
