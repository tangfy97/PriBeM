public class minalloy.IsomorphicSolutionBuilder extends java.lang.Object
{

    public void <init>()
    {
        minalloy.IsomorphicSolutionBuilder r0;

        r0 := @this: minalloy.IsomorphicSolutionBuilder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.Set getIsomorphicSolutions(minsolver.MinSolution, kodkod.instance.Bounds)
    {
        int[][] $r2;
        kodkod.instance.Bounds r1;
        int[] $r21, $r28;
        minalloy.IsomorphicSolutionBuilder$1 $r31;
        boolean $z0, $z1, $z2;
        java.util.Set $r10, $r13;
        minsolver.MinSolution$MinimizationHistory $r27;
        minsolver.MinSolution r3, $r29;
        kodkod.ast.Relation r32;
        java.util.TreeSet $r30;
        java.util.ArrayList $r20;
        java.util.HashSet $r0, $r16;
        kodkod.instance.Instance $r4, $r7, $r8, $r9, $r14;
        int $i0, $i1, $i2, i3, $i4, i5, i6;
        kodkod.instance.Universe $r5, $r22;
        minsolver.MinStatistics $r26;
        kodkod.instance.TupleFactory $r6;
        kodkod.instance.TupleSet $r15, $r25;
        kodkod.instance.Tuple r19, $r24;
        java.util.Iterator $r11, $r17;
        java.lang.Object $r12, $r18, $r23;

        r3 := @parameter0: minsolver.MinSolution;

        r1 := @parameter1: kodkod.instance.Bounds;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        $r2 = staticinvoke <minalloy.IsomorphicSolutionBuilder: int[][] getSolutionPermutations(kodkod.instance.Bounds)>(r1);

        $r4 = virtualinvoke r3.<minsolver.MinSolution: kodkod.instance.Instance instance()>();

        $r5 = virtualinvoke $r4.<kodkod.instance.Instance: kodkod.instance.Universe universe()>();

        $r6 = virtualinvoke $r5.<kodkod.instance.Universe: kodkod.instance.TupleFactory factory()>();

        i5 = 0;

        goto label9;

     label1:
        $r7 = new kodkod.instance.Instance;

        specialinvoke $r7.<kodkod.instance.Instance: void <init>(kodkod.instance.Universe)>($r5);

        $r8 = staticinvoke <minalloy.IsomorphicSolutionBuilder: kodkod.instance.Instance padInstance(kodkod.instance.Instance,kodkod.instance.Bounds)>($r7, r1);

        $r9 = virtualinvoke r3.<minsolver.MinSolution: kodkod.instance.Instance instance()>();

        $r10 = virtualinvoke $r9.<kodkod.instance.Instance: java.util.Set relations()>();

        $r11 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();

        goto label8;

     label2:
        $r12 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r32 = (kodkod.ast.Relation) $r12;

        $r13 = virtualinvoke r1.<kodkod.instance.Bounds: java.util.Set relations()>();

        $z0 = interfaceinvoke $r13.<java.util.Set: boolean contains(java.lang.Object)>(r32);

        if $z0 != 0 goto label3;

        goto label8;

     label3:
        $r14 = virtualinvoke r3.<minsolver.MinSolution: kodkod.instance.Instance instance()>();

        $r15 = virtualinvoke $r14.<kodkod.instance.Instance: kodkod.instance.TupleSet tuples(kodkod.ast.Relation)>(r32);

        $r16 = new java.util.HashSet;

        specialinvoke $r16.<java.util.HashSet: void <init>()>();

        $r17 = virtualinvoke $r15.<kodkod.instance.TupleSet: java.util.Iterator iterator()>();

        goto label7;

     label4:
        $r18 = interfaceinvoke $r17.<java.util.Iterator: java.lang.Object next()>();

        r19 = (kodkod.instance.Tuple) $r18;

        $r20 = new java.util.ArrayList;

        specialinvoke $r20.<java.util.ArrayList: void <init>()>();

        i6 = 0;

        goto label6;

     label5:
        $i2 = virtualinvoke r19.<kodkod.instance.Tuple: int atomIndex(int)>(i6);

        $r21 = $r2[i5];

        i3 = $r21[$i2];

        $r22 = virtualinvoke r1.<kodkod.instance.Bounds: kodkod.instance.Universe universe()>();

        $r23 = virtualinvoke $r22.<kodkod.instance.Universe: java.lang.Object atom(int)>(i3);

        interfaceinvoke $r20.<java.util.List: boolean add(java.lang.Object)>($r23);

        i6 = i6 + 1;

     label6:
        $i1 = virtualinvoke r19.<kodkod.instance.Tuple: int arity()>();

        if i6 < $i1 goto label5;

        $r24 = virtualinvoke $r6.<kodkod.instance.TupleFactory: kodkod.instance.Tuple tuple(java.util.List)>($r20);

        interfaceinvoke $r16.<java.util.Set: boolean add(java.lang.Object)>($r24);

     label7:
        $z1 = interfaceinvoke $r17.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label4;

        $i4 = interfaceinvoke $r16.<java.util.Set: int size()>();

        if $i4 <= 0 goto label8;

        $r25 = virtualinvoke $r6.<kodkod.instance.TupleFactory: kodkod.instance.TupleSet setOf(java.util.Collection)>($r16);

        virtualinvoke $r8.<kodkod.instance.Instance: void add(kodkod.ast.Relation,kodkod.instance.TupleSet)>(r32, $r25);

     label8:
        $z2 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label2;

        $r26 = virtualinvoke r3.<minsolver.MinSolution: minsolver.MinStatistics stats()>();

        $r27 = r3.<minsolver.MinSolution: minsolver.MinSolution$MinimizationHistory minimizationHistory>;

        $r28 = virtualinvoke r3.<minsolver.MinSolution: int[] getPropositionalModel()>();

        $r29 = staticinvoke <minsolver.MinSolutionFactory: minsolver.MinSolution satisfiable(minsolver.MinStatistics,kodkod.instance.Instance,minsolver.MinSolution$MinimizationHistory,int[])>($r26, $r8, $r27, $r28);

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r29);

        i5 = i5 + 1;

     label9:
        $i0 = lengthof $r2;

        if i5 < $i0 goto label1;

        $r30 = new java.util.TreeSet;

        $r31 = new minalloy.IsomorphicSolutionBuilder$1;

        specialinvoke $r31.<minalloy.IsomorphicSolutionBuilder$1: void <init>()>();

        specialinvoke $r30.<java.util.TreeSet: void <init>(java.util.Comparator)>($r31);

        interfaceinvoke $r30.<java.util.Set: boolean addAll(java.util.Collection)>($r0);

        return $r30;
    }

    public static kodkod.instance.Instance padInstance(kodkod.instance.Instance, kodkod.instance.Bounds)
    {
        java.util.Iterator $r2;
        kodkod.util.ints.IntSet $r6;
        java.util.Set $r1;
        kodkod.util.ints.IntIterator $r7;
        kodkod.instance.Instance r4;
        kodkod.instance.Bounds r0;
        int $i0;
        java.lang.Object $r3;
        kodkod.ast.Relation r9;
        boolean $z0, $z1, $z2;
        kodkod.instance.TupleSet $r5, $r8;

        r4 := @parameter0: kodkod.instance.Instance;

        r0 := @parameter1: kodkod.instance.Bounds;

        $r1 = virtualinvoke r0.<kodkod.instance.Bounds: java.util.Set relations()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r9 = (kodkod.ast.Relation) $r3;

        $z0 = virtualinvoke r4.<kodkod.instance.Instance: boolean contains(kodkod.ast.Relation)>(r9);

        if $z0 != 0 goto label2;

        $r5 = virtualinvoke r0.<kodkod.instance.Bounds: kodkod.instance.TupleSet lowerBound(kodkod.ast.Relation)>(r9);

        virtualinvoke r4.<kodkod.instance.Instance: void add(kodkod.ast.Relation,kodkod.instance.TupleSet)>(r9, $r5);

     label2:
        $z2 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label1;

        $r6 = virtualinvoke r0.<kodkod.instance.Bounds: kodkod.util.ints.IntSet ints()>();

        $r7 = interfaceinvoke $r6.<kodkod.util.ints.IntSet: kodkod.util.ints.IntIterator iterator()>();

        goto label4;

     label3:
        $i0 = interfaceinvoke $r7.<kodkod.util.ints.IntIterator: int next()>();

        $r8 = virtualinvoke r0.<kodkod.instance.Bounds: kodkod.instance.TupleSet exactBound(int)>($i0);

        virtualinvoke r4.<kodkod.instance.Instance: void add(int,kodkod.instance.TupleSet)>($i0, $r8);

     label4:
        $z1 = interfaceinvoke $r7.<kodkod.util.ints.IntIterator: boolean hasNext()>();

        if $z1 != 0 goto label3;

        return r4;
    }

    private static int[][] getSolutionPermutations(kodkod.instance.Bounds)
    {
        int[][] $r4, $r11, $r12, r17;
        kodkod.instance.Bounds r0;
        int[] $r9, $r10, $r13, $r14, $r15;
        boolean $z0, $z1;
        java.util.Set $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12, i13, i14;
        kodkod.instance.Universe $r5;
        java.util.Iterator $r2, $r6;
        minalloy.IsomorphicSolutionBuilder$Permutations r8, r16;
        java.lang.Object $r3, $r7;

        r0 := @parameter0: kodkod.instance.Bounds;

        $r1 = staticinvoke <minalloy.IsomorphicSolutionBuilder: java.util.Set getSymmetryPermutations(kodkod.instance.Bounds)>(r0);

        i11 = 1;

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r16 = (minalloy.IsomorphicSolutionBuilder$Permutations) $r3;

        $r4 = r16.<minalloy.IsomorphicSolutionBuilder$Permutations: int[][] permutations>;

        $i0 = lengthof $r4;

        i11 = i11 * $i0;

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r5 = virtualinvoke r0.<kodkod.instance.Bounds: kodkod.instance.Universe universe()>();

        $i1 = virtualinvoke $r5.<kodkod.instance.Universe: int size()>();

        r17 = newmultiarray (int)[i11][$i1];

        i12 = 1;

        $r6 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

        goto label8;

     label3:
        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (minalloy.IsomorphicSolutionBuilder$Permutations) $r7;

        i13 = 0;

        goto label7;

     label4:
        i14 = 0;

        goto label6;

     label5:
        $r14 = r17[i13];

        $r10 = r8.<minalloy.IsomorphicSolutionBuilder$Permutations: int[] atoms>;

        $i8 = $r10[i14];

        $r12 = r8.<minalloy.IsomorphicSolutionBuilder$Permutations: int[][] permutations>;

        $i5 = i13 / i12;

        $r11 = r8.<minalloy.IsomorphicSolutionBuilder$Permutations: int[][] permutations>;

        $i4 = lengthof $r11;

        $i6 = $i5 % $i4;

        $r13 = $r12[$i6];

        $i7 = $r13[i14];

        $r14[$i8] = $i7;

        i14 = i14 + 1;

     label6:
        $r9 = r8.<minalloy.IsomorphicSolutionBuilder$Permutations: int[] atoms>;

        $i3 = lengthof $r9;

        if i14 < $i3 goto label5;

        i13 = i13 + 1;

     label7:
        $i2 = lengthof r17;

        if i13 < $i2 goto label4;

        $r15 = r8.<minalloy.IsomorphicSolutionBuilder$Permutations: int[] atoms>;

        $i9 = lengthof $r15;

        $i10 = staticinvoke <minalloy.IsomorphicSolutionBuilder$Permutations: int factorial(int)>($i9);

        i12 = i12 * $i10;

     label8:
        $z1 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label3;

        return r17;
    }

    private static java.util.Set getSymmetryPermutations(kodkod.instance.Bounds)
    {
        java.util.Iterator $r3;
        kodkod.util.ints.IntSet r5;
        java.util.Set $r2;
        java.util.HashSet $r0;
        kodkod.instance.Bounds r1;
        minalloy.IsomorphicSolutionBuilder$Permutations $r6;
        java.lang.Object $r4;
        boolean $z0;

        r1 := @parameter0: kodkod.instance.Bounds;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        $r2 = staticinvoke <minsolver.fol2sat.MinSymmetryDetectorDelegate: java.util.Set partition(kodkod.instance.Bounds)>(r1);

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (kodkod.util.ints.IntSet) $r4;

        $r6 = new minalloy.IsomorphicSolutionBuilder$Permutations;

        specialinvoke $r6.<minalloy.IsomorphicSolutionBuilder$Permutations: void <init>(kodkod.util.ints.IntSet)>(r5);

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r6);

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return $r0;
    }
}
