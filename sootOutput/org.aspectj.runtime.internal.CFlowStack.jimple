public class org.aspectj.runtime.internal.CFlowStack extends java.lang.Object
{
    private static org.aspectj.runtime.internal.cflowstack.ThreadStackFactory tsFactory;
    private org.aspectj.runtime.internal.cflowstack.ThreadStack stackProxy;

    public void <init>()
    {
        org.aspectj.runtime.internal.cflowstack.ThreadStackFactory $r1;
        org.aspectj.runtime.internal.CFlowStack r0;
        org.aspectj.runtime.internal.cflowstack.ThreadStack $r2;

        r0 := @this: org.aspectj.runtime.internal.CFlowStack;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = <org.aspectj.runtime.internal.CFlowStack: org.aspectj.runtime.internal.cflowstack.ThreadStackFactory tsFactory>;

        $r2 = interfaceinvoke $r1.<org.aspectj.runtime.internal.cflowstack.ThreadStackFactory: org.aspectj.runtime.internal.cflowstack.ThreadStack getNewThreadStack()>();

        r0.<org.aspectj.runtime.internal.CFlowStack: org.aspectj.runtime.internal.cflowstack.ThreadStack stackProxy> = $r2;

        return;
    }

    private java.util.Stack getThreadStack()
    {
        org.aspectj.runtime.internal.CFlowStack r0;
        org.aspectj.runtime.internal.cflowstack.ThreadStack $r1;
        java.util.Stack $r2;

        r0 := @this: org.aspectj.runtime.internal.CFlowStack;

        $r1 = r0.<org.aspectj.runtime.internal.CFlowStack: org.aspectj.runtime.internal.cflowstack.ThreadStack stackProxy>;

        $r2 = interfaceinvoke $r1.<org.aspectj.runtime.internal.cflowstack.ThreadStack: java.util.Stack getThreadStack()>();

        return $r2;
    }

    public void push(java.lang.Object)
    {
        java.lang.Object r2;
        org.aspectj.runtime.internal.CFlowStack r0;
        java.util.Stack $r1;

        r0 := @this: org.aspectj.runtime.internal.CFlowStack;

        r2 := @parameter0: java.lang.Object;

        $r1 = specialinvoke r0.<org.aspectj.runtime.internal.CFlowStack: java.util.Stack getThreadStack()>();

        virtualinvoke $r1.<java.util.Stack: java.lang.Object push(java.lang.Object)>(r2);

        return;
    }

    public void pushInstance(java.lang.Object)
    {
        org.aspectj.runtime.internal.CFlowStack r0;
        java.lang.Object r3;
        java.util.Stack $r1;
        org.aspectj.runtime.CFlow $r2;

        r0 := @this: org.aspectj.runtime.internal.CFlowStack;

        r3 := @parameter0: java.lang.Object;

        $r1 = specialinvoke r0.<org.aspectj.runtime.internal.CFlowStack: java.util.Stack getThreadStack()>();

        $r2 = new org.aspectj.runtime.CFlow;

        specialinvoke $r2.<org.aspectj.runtime.CFlow: void <init>(java.lang.Object)>(r3);

        virtualinvoke $r1.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r2);

        return;
    }

    public void push(java.lang.Object[])
    {
        java.lang.Object[] r3;
        org.aspectj.runtime.internal.CFlowStack r0;
        org.aspectj.runtime.internal.CFlowPlusState $r2;
        java.util.Stack $r1;

        r0 := @this: org.aspectj.runtime.internal.CFlowStack;

        r3 := @parameter0: java.lang.Object[];

        $r1 = specialinvoke r0.<org.aspectj.runtime.internal.CFlowStack: java.util.Stack getThreadStack()>();

        $r2 = new org.aspectj.runtime.internal.CFlowPlusState;

        specialinvoke $r2.<org.aspectj.runtime.internal.CFlowPlusState: void <init>(java.lang.Object[])>(r3);

        virtualinvoke $r1.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r2);

        return;
    }

    public void pop()
    {
        org.aspectj.runtime.internal.CFlowStack r0;
        org.aspectj.runtime.internal.cflowstack.ThreadStack $r2;
        java.util.Stack $r1;
        boolean $z0;

        r0 := @this: org.aspectj.runtime.internal.CFlowStack;

        $r1 = specialinvoke r0.<org.aspectj.runtime.internal.CFlowStack: java.util.Stack getThreadStack()>();

        virtualinvoke $r1.<java.util.Stack: java.lang.Object pop()>();

        $z0 = virtualinvoke $r1.<java.util.Vector: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<org.aspectj.runtime.internal.CFlowStack: org.aspectj.runtime.internal.cflowstack.ThreadStack stackProxy>;

        interfaceinvoke $r2.<org.aspectj.runtime.internal.cflowstack.ThreadStack: void removeThreadStack()>();

     label1:
        return;
    }

    public java.lang.Object peek()
    {
        org.aspectj.runtime.internal.CFlowStack r0;
        java.lang.Object $r2;
        java.util.Stack $r1;
        org.aspectj.lang.NoAspectBoundException $r3;
        boolean $z0;

        r0 := @this: org.aspectj.runtime.internal.CFlowStack;

        $r1 = specialinvoke r0.<org.aspectj.runtime.internal.CFlowStack: java.util.Stack getThreadStack()>();

        $z0 = virtualinvoke $r1.<java.util.Vector: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r3 = new org.aspectj.lang.NoAspectBoundException;

        specialinvoke $r3.<org.aspectj.lang.NoAspectBoundException: void <init>()>();

        throw $r3;

     label1:
        $r2 = virtualinvoke $r1.<java.util.Stack: java.lang.Object peek()>();

        return $r2;
    }

    public java.lang.Object get(int)
    {
        org.aspectj.runtime.internal.CFlowStack r0;
        int i0;
        java.lang.Object $r2;
        org.aspectj.runtime.CFlow $r1;

        r0 := @this: org.aspectj.runtime.internal.CFlowStack;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.aspectj.runtime.internal.CFlowStack: org.aspectj.runtime.CFlow peekCFlow()>();

        if null != $r1 goto label1;

        $r2 = null;

        goto label2;

     label1:
        $r2 = virtualinvoke $r1.<org.aspectj.runtime.CFlow: java.lang.Object get(int)>(i0);

     label2:
        return $r2;
    }

    public java.lang.Object peekInstance()
    {
        org.aspectj.runtime.internal.CFlowStack r0;
        java.lang.Object $r3;
        org.aspectj.runtime.CFlow $r1;
        org.aspectj.lang.NoAspectBoundException $r2;

        r0 := @this: org.aspectj.runtime.internal.CFlowStack;

        $r1 = virtualinvoke r0.<org.aspectj.runtime.internal.CFlowStack: org.aspectj.runtime.CFlow peekCFlow()>();

        if $r1 == null goto label1;

        $r3 = virtualinvoke $r1.<org.aspectj.runtime.CFlow: java.lang.Object getAspect()>();

        return $r3;

     label1:
        $r2 = new org.aspectj.lang.NoAspectBoundException;

        specialinvoke $r2.<org.aspectj.lang.NoAspectBoundException: void <init>()>();

        throw $r2;
    }

    public org.aspectj.runtime.CFlow peekCFlow()
    {
        org.aspectj.runtime.internal.CFlowStack r0;
        java.lang.Object $r2;
        java.util.Stack $r1;
        org.aspectj.runtime.CFlow $r3;
        boolean $z0;

        r0 := @this: org.aspectj.runtime.internal.CFlowStack;

        $r1 = specialinvoke r0.<org.aspectj.runtime.internal.CFlowStack: java.util.Stack getThreadStack()>();

        $z0 = virtualinvoke $r1.<java.util.Vector: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r2 = virtualinvoke $r1.<java.util.Stack: java.lang.Object peek()>();

        $r3 = (org.aspectj.runtime.CFlow) $r2;

        return $r3;
    }

    public org.aspectj.runtime.CFlow peekTopCFlow()
    {
        org.aspectj.runtime.internal.CFlowStack r0;
        java.lang.Object $r2;
        java.util.Stack $r1;
        org.aspectj.runtime.CFlow $r3;
        boolean $z0;

        r0 := @this: org.aspectj.runtime.internal.CFlowStack;

        $r1 = specialinvoke r0.<org.aspectj.runtime.internal.CFlowStack: java.util.Stack getThreadStack()>();

        $z0 = virtualinvoke $r1.<java.util.Vector: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r2 = virtualinvoke $r1.<java.util.Vector: java.lang.Object elementAt(int)>(0);

        $r3 = (org.aspectj.runtime.CFlow) $r2;

        return $r3;
    }

    public boolean isValid()
    {
        org.aspectj.runtime.internal.CFlowStack r0;
        java.util.Stack $r1;
        boolean $z0, $z1;

        r0 := @this: org.aspectj.runtime.internal.CFlowStack;

        $r1 = specialinvoke r0.<org.aspectj.runtime.internal.CFlowStack: java.util.Stack getThreadStack()>();

        $z0 = virtualinvoke $r1.<java.util.Vector: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private static org.aspectj.runtime.internal.cflowstack.ThreadStackFactory getThreadLocalStackFactory()
    {
        org.aspectj.runtime.internal.cflowstack.ThreadStackFactoryImpl $r0;

        $r0 = new org.aspectj.runtime.internal.cflowstack.ThreadStackFactoryImpl;

        specialinvoke $r0.<org.aspectj.runtime.internal.cflowstack.ThreadStackFactoryImpl: void <init>()>();

        return $r0;
    }

    private static org.aspectj.runtime.internal.cflowstack.ThreadStackFactory getThreadLocalStackFactoryFor11()
    {
        org.aspectj.runtime.internal.cflowstack.ThreadStackFactoryImpl11 $r0;

        $r0 = new org.aspectj.runtime.internal.cflowstack.ThreadStackFactoryImpl11;

        specialinvoke $r0.<org.aspectj.runtime.internal.cflowstack.ThreadStackFactoryImpl11: void <init>()>();

        return $r0;
    }

    private static void selectFactoryForVMVersion()
    {
        org.aspectj.runtime.internal.cflowstack.ThreadStackFactory $r1, $r2;
        int $i0;
        java.lang.String $r0, $r3;
        boolean $z0, $z1, $z2, $z3, z4, $z5;

        $r0 = staticinvoke <org.aspectj.runtime.internal.CFlowStack: java.lang.String getSystemPropertyWithoutSecurityException(java.lang.String,java.lang.String)>("aspectj.runtime.cflowstack.usethreadlocal", "unspecified");

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("unspecified");

        if $z0 == 0 goto label3;

        $r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("java.class.version", "0.0");

        $i0 = virtualinvoke $r3.<java.lang.String: int compareTo(java.lang.String)>("46.0");

        if $i0 < 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        z4 = $z3;

        goto label7;

     label3:
        $z1 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("yes");

        if $z1 != 0 goto label4;

        $z2 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("true");

        if $z2 == 0 goto label5;

     label4:
        $z5 = 1;

        goto label6;

     label5:
        $z5 = 0;

     label6:
        z4 = $z5;

     label7:
        if z4 == 0 goto label8;

        $r2 = staticinvoke <org.aspectj.runtime.internal.CFlowStack: org.aspectj.runtime.internal.cflowstack.ThreadStackFactory getThreadLocalStackFactory()>();

        <org.aspectj.runtime.internal.CFlowStack: org.aspectj.runtime.internal.cflowstack.ThreadStackFactory tsFactory> = $r2;

        goto label9;

     label8:
        $r1 = staticinvoke <org.aspectj.runtime.internal.CFlowStack: org.aspectj.runtime.internal.cflowstack.ThreadStackFactory getThreadLocalStackFactoryFor11()>();

        <org.aspectj.runtime.internal.CFlowStack: org.aspectj.runtime.internal.cflowstack.ThreadStackFactory tsFactory> = $r1;

     label9:
        return;
    }

    private static java.lang.String getSystemPropertyWithoutSecurityException(java.lang.String, java.lang.String)
    {
        java.lang.SecurityException $r3;
        java.lang.String r0, r1, $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

     label1:
        $r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>(r0, r1);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        return r1;

        catch java.lang.SecurityException from label1 to label2 with label3;
    }

    public static java.lang.String getThreadStackFactoryClassName()
    {
        org.aspectj.runtime.internal.cflowstack.ThreadStackFactory $r0;
        java.lang.Class $r1;
        java.lang.String $r2;

        $r0 = <org.aspectj.runtime.internal.CFlowStack: org.aspectj.runtime.internal.cflowstack.ThreadStackFactory tsFactory>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        return $r2;
    }

    static void <clinit>()
    {
        staticinvoke <org.aspectj.runtime.internal.CFlowStack: void selectFactoryForVMVersion()>();

        return;
    }
}
