public class thredds.catalog.query.DqcFactory extends java.lang.Object
{
    public static boolean debugURL;
    public static boolean debugVersion;
    public static boolean showParsedXML;
    private static ucar.nc2.util.DiskCache2 diskCache;
    private static int buffer_size;
    private org.jdom.input.SAXBuilder builder;
    private thredds.catalog.query.DqcConvertIF defaultConverter;
    private java.util.HashMap versionToNamespaceHash;
    private java.util.HashMap namespaceToDqcConverterHash;
    private java.lang.StringBuilder warnMessages;
    private java.lang.StringBuilder errMessages;
    private java.lang.StringBuilder fatalMessages;

    public static void setPersistenceCache(ucar.nc2.util.DiskCache2)
    {
        ucar.nc2.util.DiskCache2 r0;

        r0 := @parameter0: ucar.nc2.util.DiskCache2;

        <thredds.catalog.query.DqcFactory: ucar.nc2.util.DiskCache2 diskCache> = r0;

        return;
    }

    public void <init>(boolean)
    {
        org.jdom.input.SAXBuilder $r4;
        java.util.HashMap $r1, $r2;
        thredds.catalog.XMLEntityResolver $r3;
        thredds.catalog.query.DqcFactory r0;
        java.lang.StringBuilder $r5, $r6, $r7;
        boolean z0;

        r0 := @this: thredds.catalog.query.DqcFactory;

        z0 := @parameter0: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>(int)>(10);

        r0.<thredds.catalog.query.DqcFactory: java.util.HashMap versionToNamespaceHash> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>(int)>(10);

        r0.<thredds.catalog.query.DqcFactory: java.util.HashMap namespaceToDqcConverterHash> = $r2;

        $r3 = new thredds.catalog.XMLEntityResolver;

        specialinvoke $r3.<thredds.catalog.XMLEntityResolver: void <init>(boolean)>(z0);

        $r4 = virtualinvoke $r3.<thredds.catalog.XMLEntityResolver: org.jdom.input.SAXBuilder getSAXBuilder()>();

        r0.<thredds.catalog.query.DqcFactory: org.jdom.input.SAXBuilder builder> = $r4;

        $r5 = virtualinvoke $r3.<thredds.catalog.XMLEntityResolver: java.lang.StringBuilder getWarningMessages()>();

        r0.<thredds.catalog.query.DqcFactory: java.lang.StringBuilder warnMessages> = $r5;

        $r6 = virtualinvoke $r3.<thredds.catalog.XMLEntityResolver: java.lang.StringBuilder getErrorMessages()>();

        r0.<thredds.catalog.query.DqcFactory: java.lang.StringBuilder errMessages> = $r6;

        $r7 = virtualinvoke $r3.<thredds.catalog.XMLEntityResolver: java.lang.StringBuilder getFatalMessages()>();

        r0.<thredds.catalog.query.DqcFactory: java.lang.StringBuilder fatalMessages> = $r7;

        specialinvoke r0.<thredds.catalog.query.DqcFactory: void setDefaults()>();

        return;
    }

    private void setDefaults()
    {
        java.lang.InstantiationException $r18;
        java.lang.IllegalAccessException $r11;
        java.lang.StringBuilder $r13, $r14, $r16, $r20, $r21, $r23, $r27, $r28, $r30;
        java.lang.String $r15, $r17, $r22, $r24, $r29, $r31;
        java.lang.RuntimeException $r12, $r19, $r26;
        thredds.catalog.query.DqcConvertIF $r3, $r6, $r9, $r10;
        java.lang.Class $r0, $r4, $r7;
        java.lang.Object $r1, $r5, $r8;
        thredds.catalog.query.DqcFactory r2;
        java.lang.ClassNotFoundException $r25;

        r2 := @this: thredds.catalog.query.DqcFactory;

     label1:
        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("thredds.catalog.parser.jdom.DqcConvert2");

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.Object newInstance()>();

        $r3 = (thredds.catalog.query.DqcConvertIF) $r1;

        specialinvoke r2.<thredds.catalog.query.DqcFactory: void registerConverter(java.lang.String,java.lang.String,thredds.catalog.query.DqcConvertIF)>("0.2", "http://www.unidata.ucar.edu/schemas/thredds/queryCapability", $r3);

        $r4 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("thredds.catalog.parser.jdom.DqcConvert3");

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.Object newInstance()>();

        $r6 = (thredds.catalog.query.DqcConvertIF) $r5;

        specialinvoke r2.<thredds.catalog.query.DqcFactory: void registerConverter(java.lang.String,java.lang.String,thredds.catalog.query.DqcConvertIF)>("0.3", "http://www.unidata.ucar.edu/namespaces/thredds/queryCapability/v0.3", $r6);

        $r7 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("thredds.catalog.parser.jdom.DqcConvert4");

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.Object newInstance()>();

        $r9 = (thredds.catalog.query.DqcConvertIF) $r8;

        r2.<thredds.catalog.query.DqcFactory: thredds.catalog.query.DqcConvertIF defaultConverter> = $r9;

        $r10 = (thredds.catalog.query.DqcConvertIF) $r8;

        specialinvoke r2.<thredds.catalog.query.DqcFactory: void registerConverter(java.lang.String,java.lang.String,thredds.catalog.query.DqcConvertIF)>("0.4", "http://www.unidata.ucar.edu/namespaces/thredds/queryCapability/v0.4", $r10);

     label2:
        goto label6;

     label3:
        $r25 := @caughtexception;

        $r26 = new java.lang.RuntimeException;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DqcFactory: no implementing class found: ");

        $r29 = virtualinvoke $r25.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r26.<java.lang.RuntimeException: void <init>(java.lang.String)>($r31);

        throw $r26;

     label4:
        $r18 := @caughtexception;

        $r19 = new java.lang.RuntimeException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DqcFactory: instantition failed: ");

        $r22 = virtualinvoke $r18.<java.lang.InstantiationException: java.lang.String getMessage()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.RuntimeException: void <init>(java.lang.String)>($r24);

        throw $r19;

     label5:
        $r11 := @caughtexception;

        $r12 = new java.lang.RuntimeException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DqcFactory: access failed: ");

        $r15 = virtualinvoke $r11.<java.lang.IllegalAccessException: java.lang.String getMessage()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.String)>($r17);

        throw $r12;

     label6:
        return;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
        catch java.lang.InstantiationException from label1 to label2 with label4;
        catch java.lang.IllegalAccessException from label1 to label2 with label5;
    }

    private void registerConverter(java.lang.String, java.lang.String, thredds.catalog.query.DqcConvertIF)
    {
        thredds.catalog.query.DqcFactory r0;
        java.util.HashMap $r3, $r5;
        java.lang.String r1, r4;
        thredds.catalog.query.DqcConvertIF r2;

        r0 := @this: thredds.catalog.query.DqcFactory;

        r4 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: thredds.catalog.query.DqcConvertIF;

        $r3 = r0.<thredds.catalog.query.DqcFactory: java.util.HashMap namespaceToDqcConverterHash>;

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        $r5 = r0.<thredds.catalog.query.DqcFactory: java.util.HashMap versionToNamespaceHash>;

        virtualinvoke $r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r1);

        return;
    }

    public void appendErr(java.lang.String)
    {
        thredds.catalog.query.DqcFactory r0;
        java.lang.StringBuilder $r2;
        java.lang.String r1;

        r0 := @this: thredds.catalog.query.DqcFactory;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<thredds.catalog.query.DqcFactory: java.lang.StringBuilder errMessages>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        return;
    }

    public void appendFatalErr(java.lang.String)
    {
        thredds.catalog.query.DqcFactory r0;
        java.lang.StringBuilder $r2;
        java.lang.String r1;

        r0 := @this: thredds.catalog.query.DqcFactory;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<thredds.catalog.query.DqcFactory: java.lang.StringBuilder fatalMessages>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        return;
    }

    public void appendWarning(java.lang.String)
    {
        thredds.catalog.query.DqcFactory r0;
        java.lang.StringBuilder $r2;
        java.lang.String r1;

        r0 := @this: thredds.catalog.query.DqcFactory;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<thredds.catalog.query.DqcFactory: java.lang.StringBuilder warnMessages>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        return;
    }

    public thredds.catalog.query.QueryCapability readXML(java.lang.String, java.net.URI) throws java.io.IOException
    {
        org.jdom.input.SAXBuilder $r6;
        thredds.catalog.query.QueryCapability $r8;
        org.jdom.Document r12;
        org.jdom.JDOMException $r9;
        java.io.StringReader $r4;
        thredds.catalog.query.DqcFactory r0;
        java.lang.StringBuilder $r1, $r2, $r3, $r10;
        java.lang.String r5, $r11;
        java.net.URI r7;

        r0 := @this: thredds.catalog.query.DqcFactory;

        r5 := @parameter0: java.lang.String;

        r7 := @parameter1: java.net.URI;

        $r1 = r0.<thredds.catalog.query.DqcFactory: java.lang.StringBuilder warnMessages>;

        virtualinvoke $r1.<java.lang.StringBuilder: void setLength(int)>(0);

        $r2 = r0.<thredds.catalog.query.DqcFactory: java.lang.StringBuilder errMessages>;

        virtualinvoke $r2.<java.lang.StringBuilder: void setLength(int)>(0);

        $r3 = r0.<thredds.catalog.query.DqcFactory: java.lang.StringBuilder fatalMessages>;

        virtualinvoke $r3.<java.lang.StringBuilder: void setLength(int)>(0);

        r12 = null;

     label1:
        $r6 = r0.<thredds.catalog.query.DqcFactory: org.jdom.input.SAXBuilder builder>;

        $r4 = new java.io.StringReader;

        specialinvoke $r4.<java.io.StringReader: void <init>(java.lang.String)>(r5);

        r12 = virtualinvoke $r6.<org.jdom.input.SAXBuilder: org.jdom.Document build(java.io.Reader)>($r4);

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        $r10 = r0.<thredds.catalog.query.DqcFactory: java.lang.StringBuilder fatalMessages>;

        $r11 = virtualinvoke $r9.<org.jdom.JDOMException: java.lang.String getMessage()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

     label4:
        $r8 = specialinvoke r0.<thredds.catalog.query.DqcFactory: thredds.catalog.query.QueryCapability readXML(org.jdom.Document,java.net.URI)>(r12, r7);

        return $r8;

        catch org.jdom.JDOMException from label1 to label2 with label3;
    }

    public thredds.catalog.query.QueryCapability readXML(java.lang.String) throws java.io.IOException
    {
        java.net.HttpURLConnection r30;
        java.io.BufferedInputStream $r39, $r42;
        java.net.URL $r11;
        java.net.URISyntaxException $r27;
        thredds.catalog.query.QueryCapability $r8, $r14, $r19, $r33;
        org.jdom.Document r34;
        org.jdom.JDOMException $r20;
        java.net.URI $r35;
        java.lang.StringBuilder $r4, $r5, $r6, $r21;
        java.lang.Throwable $r23, $r24, $r25, $r26;
        org.jdom.input.SAXBuilder $r7;
        long $l0;
        java.net.URLConnection $r12;
        int $i1, $i2, $i3, $i5, $i7;
        ucar.nc2.util.DiskCache2 $r2, $r9;
        java.lang.String r1, $r22, $r29;
        java.net.MalformedURLException $r36;
        java.io.FileOutputStream $r37;
        java.io.FileInputStream $r38, $r40, $r41;
        java.io.File $r10;
        thredds.catalog.query.DqcFactory r3;
        java.io.InputStream $r15;

        r3 := @this: thredds.catalog.query.DqcFactory;

        r1 := @parameter0: java.lang.String;

     label01:
        $r35 = new java.net.URI;

        specialinvoke $r35.<java.net.URI: void <init>(java.lang.String)>(r1);

     label02:
        goto label04;

     label03:
        $r27 := @caughtexception;

        $r36 = new java.net.MalformedURLException;

        $r29 = virtualinvoke $r27.<java.net.URISyntaxException: java.lang.String getMessage()>();

        specialinvoke $r36.<java.net.MalformedURLException: void <init>(java.lang.String)>($r29);

        throw $r36;

     label04:
        $r2 = <thredds.catalog.query.DqcFactory: ucar.nc2.util.DiskCache2 diskCache>;

        if $r2 == null goto label28;

        $r9 = <thredds.catalog.query.DqcFactory: ucar.nc2.util.DiskCache2 diskCache>;

        $r10 = virtualinvoke $r9.<ucar.nc2.util.DiskCache2: java.io.File getCacheFile(java.lang.String)>(r1);

        if $r10 == null goto label23;

        r30 = null;

     label05:
        $r11 = virtualinvoke $r35.<java.net.URI: java.net.URL toURL()>();

        $r12 = virtualinvoke $r11.<java.net.URL: java.net.URLConnection openConnection()>();

        r30 = (java.net.HttpURLConnection) $r12;

        virtualinvoke r30.<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>("GET");

        $l0 = virtualinvoke $r10.<java.io.File: long lastModified()>();

        virtualinvoke r30.<java.net.HttpURLConnection: void setIfModifiedSince(long)>($l0);

        $i1 = virtualinvoke r30.<java.net.HttpURLConnection: int getResponseCode()>();

        if $i1 != 200 goto label12;

        $r15 = virtualinvoke r30.<java.net.HttpURLConnection: java.io.InputStream getInputStream()>();

        if $r15 == null goto label19;

        $r37 = new java.io.FileOutputStream;

        specialinvoke $r37.<java.io.FileOutputStream: void <init>(java.io.File)>($r10);

        $i2 = <thredds.catalog.query.DqcFactory: int buffer_size>;

        staticinvoke <ucar.nc2.util.IO: long copyB(java.io.InputStream,java.io.OutputStream,int)>($r15, $r37, $i2);

        virtualinvoke $r37.<java.io.FileOutputStream: void close()>();

        $r39 = new java.io.BufferedInputStream;

        $r38 = new java.io.FileInputStream;

        specialinvoke $r38.<java.io.FileInputStream: void <init>(java.io.File)>($r10);

        $i5 = (int) 50000;

        specialinvoke $r39.<java.io.BufferedInputStream: void <init>(java.io.InputStream,int)>($r38, $i5);

     label06:
        $r19 = virtualinvoke r3.<thredds.catalog.query.DqcFactory: thredds.catalog.query.QueryCapability readXML(java.io.InputStream,java.net.URI)>($r39, $r35);

     label07:
        virtualinvoke $r39.<java.io.InputStream: void close()>();

     label08:
        if r30 == null goto label09;

        virtualinvoke r30.<java.net.HttpURLConnection: void disconnect()>();

     label09:
        return $r19;

     label10:
        $r26 := @caughtexception;

     label11:
        virtualinvoke $r39.<java.io.InputStream: void close()>();

        throw $r26;

     label12:
        $r40 = new java.io.FileInputStream;

        specialinvoke $r40.<java.io.FileInputStream: void <init>(java.io.File)>($r10);

     label13:
        $r14 = virtualinvoke r3.<thredds.catalog.query.DqcFactory: thredds.catalog.query.QueryCapability readXML(java.io.InputStream,java.net.URI)>($r40, $r35);

     label14:
        virtualinvoke $r40.<java.io.FileInputStream: void close()>();

     label15:
        if r30 == null goto label16;

        virtualinvoke r30.<java.net.HttpURLConnection: void disconnect()>();

     label16:
        return $r14;

     label17:
        $r25 := @caughtexception;

     label18:
        virtualinvoke $r40.<java.io.FileInputStream: void close()>();

        throw $r25;

     label19:
        if r30 == null goto label23;

        virtualinvoke r30.<java.net.HttpURLConnection: void disconnect()>();

        goto label23;

     label20:
        $r24 := @caughtexception;

     label21:
        if r30 == null goto label22;

        virtualinvoke r30.<java.net.HttpURLConnection: void disconnect()>();

     label22:
        throw $r24;

     label23:
        $i3 = <thredds.catalog.query.DqcFactory: int buffer_size>;

        staticinvoke <ucar.nc2.util.IO: java.lang.String readURLtoFileWithExceptions(java.lang.String,java.io.File,int)>(r1, $r10, $i3);

        $r42 = new java.io.BufferedInputStream;

        $r41 = new java.io.FileInputStream;

        specialinvoke $r41.<java.io.FileInputStream: void <init>(java.io.File)>($r10);

        $i7 = (int) 50000;

        specialinvoke $r42.<java.io.BufferedInputStream: void <init>(java.io.InputStream,int)>($r41, $i7);

     label24:
        $r33 = virtualinvoke r3.<thredds.catalog.query.DqcFactory: thredds.catalog.query.QueryCapability readXML(java.io.InputStream,java.net.URI)>($r42, $r35);

     label25:
        virtualinvoke $r42.<java.io.InputStream: void close()>();

        return $r33;

     label26:
        $r23 := @caughtexception;

     label27:
        virtualinvoke $r42.<java.io.InputStream: void close()>();

        throw $r23;

     label28:
        $r4 = r3.<thredds.catalog.query.DqcFactory: java.lang.StringBuilder warnMessages>;

        virtualinvoke $r4.<java.lang.StringBuilder: void setLength(int)>(0);

        $r5 = r3.<thredds.catalog.query.DqcFactory: java.lang.StringBuilder errMessages>;

        virtualinvoke $r5.<java.lang.StringBuilder: void setLength(int)>(0);

        $r6 = r3.<thredds.catalog.query.DqcFactory: java.lang.StringBuilder fatalMessages>;

        virtualinvoke $r6.<java.lang.StringBuilder: void setLength(int)>(0);

        r34 = null;

     label29:
        $r7 = r3.<thredds.catalog.query.DqcFactory: org.jdom.input.SAXBuilder builder>;

        r34 = virtualinvoke $r7.<org.jdom.input.SAXBuilder: org.jdom.Document build(java.lang.String)>(r1);

     label30:
        goto label32;

     label31:
        $r20 := @caughtexception;

        $r21 = r3.<thredds.catalog.query.DqcFactory: java.lang.StringBuilder fatalMessages>;

        $r22 = virtualinvoke $r20.<org.jdom.JDOMException: java.lang.String getMessage()>();

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

     label32:
        $r8 = specialinvoke r3.<thredds.catalog.query.DqcFactory: thredds.catalog.query.QueryCapability readXML(org.jdom.Document,java.net.URI)>(r34, $r35);

        return $r8;

        catch java.net.URISyntaxException from label01 to label02 with label03;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
        catch java.lang.Throwable from label13 to label14 with label17;
        catch java.lang.Throwable from label17 to label18 with label17;
        catch java.lang.Throwable from label05 to label08 with label20;
        catch java.lang.Throwable from label10 to label15 with label20;
        catch java.lang.Throwable from label17 to label19 with label20;
        catch java.lang.Throwable from label20 to label21 with label20;
        catch java.lang.Throwable from label24 to label25 with label26;
        catch java.lang.Throwable from label26 to label27 with label26;
        catch org.jdom.JDOMException from label29 to label30 with label31;
    }

    public thredds.catalog.query.QueryCapability readXML(java.io.InputStream, java.net.URI) throws java.io.IOException
    {
        org.jdom.input.SAXBuilder $r5;
        thredds.catalog.query.QueryCapability $r7;
        org.jdom.Document r11;
        org.jdom.JDOMException $r8;
        thredds.catalog.query.DqcFactory r0;
        java.lang.StringBuilder $r1, $r2, $r3, $r9;
        java.net.URI r6;
        java.lang.String $r10;
        java.io.InputStream r4;

        r0 := @this: thredds.catalog.query.DqcFactory;

        r4 := @parameter0: java.io.InputStream;

        r6 := @parameter1: java.net.URI;

        $r1 = r0.<thredds.catalog.query.DqcFactory: java.lang.StringBuilder warnMessages>;

        virtualinvoke $r1.<java.lang.StringBuilder: void setLength(int)>(0);

        $r2 = r0.<thredds.catalog.query.DqcFactory: java.lang.StringBuilder errMessages>;

        virtualinvoke $r2.<java.lang.StringBuilder: void setLength(int)>(0);

        $r3 = r0.<thredds.catalog.query.DqcFactory: java.lang.StringBuilder fatalMessages>;

        virtualinvoke $r3.<java.lang.StringBuilder: void setLength(int)>(0);

        r11 = null;

     label1:
        $r5 = r0.<thredds.catalog.query.DqcFactory: org.jdom.input.SAXBuilder builder>;

        r11 = virtualinvoke $r5.<org.jdom.input.SAXBuilder: org.jdom.Document build(java.io.InputStream)>(r4);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        $r9 = r0.<thredds.catalog.query.DqcFactory: java.lang.StringBuilder fatalMessages>;

        $r10 = virtualinvoke $r8.<org.jdom.JDOMException: java.lang.String getMessage()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

     label4:
        $r7 = specialinvoke r0.<thredds.catalog.query.DqcFactory: thredds.catalog.query.QueryCapability readXML(org.jdom.Document,java.net.URI)>(r11, r6);

        return $r7;

        catch org.jdom.JDOMException from label1 to label2 with label3;
    }

    private thredds.catalog.query.QueryCapability readXML(org.jdom.Document, java.net.URI) throws java.io.IOException
    {
        thredds.catalog.query.QueryCapability $r33, $r44;
        org.jdom.Document r0;
        java.net.URI r6;
        boolean $z0, $z1;
        java.lang.StringBuilder $r7, $r8, $r9, $r11, $r13, $r15, $r17, $r20, $r21, $r22, $r24, $r26, $r29, $r30, $r31, $r34, $r35, $r36, $r37, $r39, $r41, $r45;
        java.util.HashMap $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String $r2, $r10, $r12, $r14, $r19, $r23, $r28, $r32, $r38, $r40, $r42;
        java.io.PrintStream $r16, $r25;
        thredds.catalog.query.DqcConvertIF r43;
        thredds.catalog.query.DqcFactory r3;
        java.lang.Object $r5;
        java.lang.Class $r18, $r27;
        org.jdom.Element $r1;

        r3 := @this: thredds.catalog.query.DqcFactory;

        r0 := @parameter0: org.jdom.Document;

        r6 := @parameter1: java.net.URI;

        if r0 != null goto label4;

        $r33 = new thredds.catalog.query.QueryCapability;

        specialinvoke $r33.<thredds.catalog.query.QueryCapability: void <init>()>();

        $r34 = r3.<thredds.catalog.query.DqcFactory: java.lang.StringBuilder fatalMessages>;

        $i2 = virtualinvoke $r34.<java.lang.StringBuilder: int length()>();

        if $i2 <= 0 goto label1;

        $r41 = r3.<thredds.catalog.query.DqcFactory: java.lang.StringBuilder fatalMessages>;

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r33.<thredds.catalog.query.QueryCapability: void appendErrorMessage(java.lang.String,boolean)>($r42, 1);

     label1:
        $r35 = r3.<thredds.catalog.query.DqcFactory: java.lang.StringBuilder errMessages>;

        $i3 = virtualinvoke $r35.<java.lang.StringBuilder: int length()>();

        if $i3 <= 0 goto label2;

        $r39 = r3.<thredds.catalog.query.DqcFactory: java.lang.StringBuilder errMessages>;

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r33.<thredds.catalog.query.QueryCapability: void appendErrorMessage(java.lang.String,boolean)>($r40, 0);

     label2:
        $r36 = r3.<thredds.catalog.query.DqcFactory: java.lang.StringBuilder errMessages>;

        $i4 = virtualinvoke $r36.<java.lang.StringBuilder: int length()>();

        if $i4 <= 0 goto label3;

        $r37 = r3.<thredds.catalog.query.DqcFactory: java.lang.StringBuilder warnMessages>;

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r33.<thredds.catalog.query.QueryCapability: void appendErrorMessage(java.lang.String,boolean)>($r38, 0);

     label3:
        return $r33;

     label4:
        $r1 = virtualinvoke r0.<org.jdom.Document: org.jdom.Element getRootElement()>();

        $r2 = virtualinvoke $r1.<org.jdom.Element: java.lang.String getNamespaceURI()>();

        $r4 = r3.<thredds.catalog.query.DqcFactory: java.util.HashMap namespaceToDqcConverterHash>;

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r2);

        r43 = (thredds.catalog.query.DqcConvertIF) $r5;

        if r43 != null goto label5;

        r43 = r3.<thredds.catalog.query.DqcFactory: thredds.catalog.query.DqcConvertIF defaultConverter>;

        $z1 = <thredds.catalog.query.DqcFactory: boolean debugVersion>;

        if $z1 == 0 goto label6;

        $r25 = <java.lang.System: java.io.PrintStream out>;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("use default converter ");

        $r27 = virtualinvoke r43.<java.lang.Object: java.lang.Class getClass()>();

        $r28 = virtualinvoke $r27.<java.lang.Class: java.lang.String getName()>();

        $r29 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; no namespace ");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r25.<java.io.PrintStream: void println(java.lang.String)>($r32);

        goto label6;

     label5:
        $z0 = <thredds.catalog.query.DqcFactory: boolean debugVersion>;

        if $z0 == 0 goto label6;

        $r16 = <java.lang.System: java.io.PrintStream out>;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("use converter ");

        $r18 = virtualinvoke r43.<java.lang.Object: java.lang.Class getClass()>();

        $r19 = virtualinvoke $r18.<java.lang.Class: java.lang.String getName()>();

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" based on namespace ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r16.<java.io.PrintStream: void println(java.lang.String)>($r23);

     label6:
        $r44 = interfaceinvoke r43.<thredds.catalog.query.DqcConvertIF: thredds.catalog.query.QueryCapability parseXML(thredds.catalog.query.DqcFactory,org.jdom.Document,java.net.URI)>(r3, r0, r6);

        $r45 = r3.<thredds.catalog.query.DqcFactory: java.lang.StringBuilder fatalMessages>;

        $i5 = virtualinvoke $r45.<java.lang.StringBuilder: int length()>();

        if $i5 <= 0 goto label7;

        $r13 = r3.<thredds.catalog.query.DqcFactory: java.lang.StringBuilder fatalMessages>;

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r44.<thredds.catalog.query.QueryCapability: void appendErrorMessage(java.lang.String,boolean)>($r14, 1);

     label7:
        $r7 = r3.<thredds.catalog.query.DqcFactory: java.lang.StringBuilder errMessages>;

        $i0 = virtualinvoke $r7.<java.lang.StringBuilder: int length()>();

        if $i0 <= 0 goto label8;

        $r11 = r3.<thredds.catalog.query.DqcFactory: java.lang.StringBuilder errMessages>;

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r44.<thredds.catalog.query.QueryCapability: void appendErrorMessage(java.lang.String,boolean)>($r12, 0);

     label8:
        $r8 = r3.<thredds.catalog.query.DqcFactory: java.lang.StringBuilder errMessages>;

        $i1 = virtualinvoke $r8.<java.lang.StringBuilder: int length()>();

        if $i1 <= 0 goto label9;

        $r9 = r3.<thredds.catalog.query.DqcFactory: java.lang.StringBuilder warnMessages>;

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r44.<thredds.catalog.query.QueryCapability: void appendErrorMessage(java.lang.String,boolean)>($r10, 0);

     label9:
        return $r44;
    }

    public java.lang.String writeXML(thredds.catalog.query.QueryCapability) throws java.io.IOException
    {
        java.io.ByteArrayOutputStream $r0;
        thredds.catalog.query.DqcFactory r1;
        java.lang.String $r3;
        thredds.catalog.query.QueryCapability r2;

        r1 := @this: thredds.catalog.query.DqcFactory;

        r2 := @parameter0: thredds.catalog.query.QueryCapability;

        $r0 = new java.io.ByteArrayOutputStream;

        specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>(int)>(10000);

        virtualinvoke r1.<thredds.catalog.query.DqcFactory: void writeXML(thredds.catalog.query.QueryCapability,java.io.OutputStream)>(r2, $r0);

        $r3 = virtualinvoke $r0.<java.io.ByteArrayOutputStream: java.lang.String toString()>();

        return $r3;
    }

    public void writeXML(thredds.catalog.query.QueryCapability, java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r8;
        java.util.HashMap $r2, $r6;
        thredds.catalog.query.QueryCapability r1;
        thredds.catalog.query.DqcConvertIF r9;
        thredds.catalog.query.DqcFactory r0;
        java.lang.Object $r4, $r7;
        java.lang.String $r3, r5;

        r0 := @this: thredds.catalog.query.DqcFactory;

        r1 := @parameter0: thredds.catalog.query.QueryCapability;

        r8 := @parameter1: java.io.OutputStream;

        $r2 = r0.<thredds.catalog.query.DqcFactory: java.util.HashMap versionToNamespaceHash>;

        $r3 = virtualinvoke r1.<thredds.catalog.query.QueryCapability: java.lang.String getVersion()>();

        $r4 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r3);

        r5 = (java.lang.String) $r4;

        $r6 = r0.<thredds.catalog.query.DqcFactory: java.util.HashMap namespaceToDqcConverterHash>;

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r5);

        r9 = (thredds.catalog.query.DqcConvertIF) $r7;

        if r9 != null goto label1;

        r9 = r0.<thredds.catalog.query.DqcFactory: thredds.catalog.query.DqcConvertIF defaultConverter>;

     label1:
        interfaceinvoke r9.<thredds.catalog.query.DqcConvertIF: void writeXML(thredds.catalog.query.QueryCapability,java.io.OutputStream)>(r1, r8);

        return;
    }

    public boolean writeXML(thredds.catalog.query.QueryCapability, java.lang.String)
    {
        java.io.FileOutputStream $r1;
        thredds.catalog.query.DqcFactory r3;
        java.io.IOException $r5;
        java.lang.String r2;
        java.io.BufferedOutputStream $r0;
        thredds.catalog.query.QueryCapability r4;

        r3 := @this: thredds.catalog.query.DqcFactory;

        r4 := @parameter0: thredds.catalog.query.QueryCapability;

        r2 := @parameter1: java.lang.String;

     label1:
        $r0 = new java.io.BufferedOutputStream;

        $r1 = new java.io.FileOutputStream;

        specialinvoke $r1.<java.io.FileOutputStream: void <init>(java.lang.String)>(r2);

        specialinvoke $r0.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r1);

        virtualinvoke r3.<thredds.catalog.query.DqcFactory: void writeXML(thredds.catalog.query.QueryCapability,java.io.OutputStream)>(r4, $r0);

        virtualinvoke $r0.<java.io.BufferedOutputStream: void close()>();

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        virtualinvoke $r5.<java.io.IOException: void printStackTrace()>();

        return 0;

     label4:
        return 1;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private static void doOne(thredds.catalog.query.DqcFactory, java.lang.String)
    {
        thredds.catalog.query.QueryCapability $r7;
        java.lang.String r3, $r5, $r12, $r16, $r18;
        boolean $z0;
        java.io.PrintStream $r1, $r9, $r14, $r19;
        java.lang.Exception $r20;
        java.lang.StringBuilder $r0, $r2, $r4, $r8, $r10, $r11, $r13, $r15, $r17;
        thredds.catalog.query.DqcFactory r6;

        r6 := @parameter0: thredds.catalog.query.DqcFactory;

        r3 := @parameter1: java.lang.String;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("***read ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r5);

     label1:
        $r7 = virtualinvoke r6.<thredds.catalog.query.DqcFactory: thredds.catalog.query.QueryCapability readXML(java.lang.String)>(r3);

        $r9 = <java.lang.System: java.io.PrintStream out>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" dqc hasFatalError= ");

        $z0 = virtualinvoke $r7.<thredds.catalog.query.QueryCapability: boolean hasFatalError()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r12);

        $r14 = <java.lang.System: java.io.PrintStream out>;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" dqc messages= \n");

        $r16 = virtualinvoke $r7.<thredds.catalog.query.QueryCapability: java.lang.String getErrorMessages()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r14.<java.io.PrintStream: void println(java.lang.String)>($r18);

        $r19 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke r6.<thredds.catalog.query.DqcFactory: void writeXML(thredds.catalog.query.QueryCapability,java.io.OutputStream)>($r7, $r19);

     label2:
        goto label4;

     label3:
        $r20 := @caughtexception;

        virtualinvoke $r20.<java.lang.Exception: void printStackTrace()>();

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static void main(java.lang.String[]) throws java.lang.Exception
    {
        thredds.catalog.query.DqcFactory $r0;
        java.lang.String[] r1;

        r1 := @parameter0: java.lang.String[];

        $r0 = new thredds.catalog.query.DqcFactory;

        specialinvoke $r0.<thredds.catalog.query.DqcFactory: void <init>(boolean)>(1);

        staticinvoke <thredds.catalog.query.DqcFactory: void doOne(thredds.catalog.query.DqcFactory,java.lang.String)>($r0, "file:///C:/data/dqc/metarDQC.xml");

        return;
    }

    static void <clinit>()
    {
        <thredds.catalog.query.DqcFactory: boolean debugURL> = 0;

        <thredds.catalog.query.DqcFactory: boolean debugVersion> = 0;

        <thredds.catalog.query.DqcFactory: boolean showParsedXML> = 0;

        <thredds.catalog.query.DqcFactory: ucar.nc2.util.DiskCache2 diskCache> = null;

        <thredds.catalog.query.DqcFactory: int buffer_size> = 64000;

        return;
    }
}
