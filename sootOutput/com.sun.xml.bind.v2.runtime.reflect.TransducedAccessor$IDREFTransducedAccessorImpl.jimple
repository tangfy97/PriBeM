final class com.sun.xml.bind.v2.runtime.reflect.TransducedAccessor$IDREFTransducedAccessorImpl extends com.sun.xml.bind.v2.runtime.reflect.DefaultTransducedAccessor
{
    private final com.sun.xml.bind.v2.runtime.reflect.Accessor acc;
    private final java.lang.Class targetType;

    public void <init>(com.sun.xml.bind.v2.runtime.reflect.Accessor)
    {
        com.sun.xml.bind.v2.runtime.reflect.TransducedAccessor$IDREFTransducedAccessorImpl r0;
        java.lang.Class $r2;
        com.sun.xml.bind.v2.runtime.reflect.Accessor r1;

        r0 := @this: com.sun.xml.bind.v2.runtime.reflect.TransducedAccessor$IDREFTransducedAccessorImpl;

        r1 := @parameter0: com.sun.xml.bind.v2.runtime.reflect.Accessor;

        specialinvoke r0.<com.sun.xml.bind.v2.runtime.reflect.DefaultTransducedAccessor: void <init>()>();

        r0.<com.sun.xml.bind.v2.runtime.reflect.TransducedAccessor$IDREFTransducedAccessorImpl: com.sun.xml.bind.v2.runtime.reflect.Accessor acc> = r1;

        $r2 = virtualinvoke r1.<com.sun.xml.bind.v2.runtime.reflect.Accessor: java.lang.Class getValueType()>();

        r0.<com.sun.xml.bind.v2.runtime.reflect.TransducedAccessor$IDREFTransducedAccessorImpl: java.lang.Class targetType> = $r2;

        return;
    }

    public java.lang.String print(java.lang.Object) throws com.sun.xml.bind.api.AccessorException, org.xml.sax.SAXException
    {
        com.sun.xml.bind.v2.runtime.reflect.TransducedAccessor$IDREFTransducedAccessorImpl r0;
        javax.xml.bind.JAXBException $r8;
        com.sun.xml.bind.v2.runtime.reflect.Accessor $r2;
        com.sun.xml.bind.v2.runtime.XMLSerializer $r4;
        java.lang.Object r1, $r3;
        java.lang.String $r7;
        com.sun.xml.bind.v2.runtime.JaxBeanInfo $r6;
        com.sun.xml.bind.v2.runtime.JAXBContextImpl $r5;

        r0 := @this: com.sun.xml.bind.v2.runtime.reflect.TransducedAccessor$IDREFTransducedAccessorImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.sun.xml.bind.v2.runtime.reflect.TransducedAccessor$IDREFTransducedAccessorImpl: com.sun.xml.bind.v2.runtime.reflect.Accessor acc>;

        $r3 = virtualinvoke $r2.<com.sun.xml.bind.v2.runtime.reflect.Accessor: java.lang.Object get(java.lang.Object)>(r1);

        if $r3 != null goto label1;

        return null;

     label1:
        $r4 = staticinvoke <com.sun.xml.bind.v2.runtime.XMLSerializer: com.sun.xml.bind.v2.runtime.XMLSerializer getInstance()>();

     label2:
        $r5 = $r4.<com.sun.xml.bind.v2.runtime.XMLSerializer: com.sun.xml.bind.v2.runtime.JAXBContextImpl grammar>;

        $r6 = virtualinvoke $r5.<com.sun.xml.bind.v2.runtime.JAXBContextImpl: com.sun.xml.bind.v2.runtime.JaxBeanInfo getBeanInfo(java.lang.Object,boolean)>($r3, 1);

        $r7 = virtualinvoke $r6.<com.sun.xml.bind.v2.runtime.JaxBeanInfo: java.lang.String getId(java.lang.Object,com.sun.xml.bind.v2.runtime.XMLSerializer)>($r3, $r4);

        if $r7 != null goto label3;

        virtualinvoke $r4.<com.sun.xml.bind.v2.runtime.XMLSerializer: void errorMissingId(java.lang.Object)>($r3);

     label3:
        return $r7;

     label4:
        $r8 := @caughtexception;

        virtualinvoke $r4.<com.sun.xml.bind.v2.runtime.XMLSerializer: void reportError(java.lang.String,java.lang.Throwable)>(null, $r8);

        return null;

        catch javax.xml.bind.JAXBException from label2 to label3 with label4;
    }

    private void assign(java.lang.Object, java.lang.Object, com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext) throws com.sun.xml.bind.api.AccessorException
    {
        com.sun.xml.bind.v2.runtime.reflect.TransducedAccessor$IDREFTransducedAccessorImpl r0;
        java.lang.Object[] $r6;
        com.sun.xml.bind.v2.runtime.reflect.Messages $r8;
        com.sun.xml.bind.v2.runtime.reflect.Accessor $r4;
        com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext r5;
        java.lang.Object r1, r3;
        java.lang.Class $r2, $r7, $r9;
        java.lang.String $r10;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.runtime.reflect.TransducedAccessor$IDREFTransducedAccessorImpl;

        r3 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        r5 := @parameter2: com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext;

        $r2 = r0.<com.sun.xml.bind.v2.runtime.reflect.TransducedAccessor$IDREFTransducedAccessorImpl: java.lang.Class targetType>;

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isInstance(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r8 = <com.sun.xml.bind.v2.runtime.reflect.Messages: com.sun.xml.bind.v2.runtime.reflect.Messages UNASSIGNABLE_TYPE>;

        $r6 = newarray (java.lang.Object)[2];

        $r7 = r0.<com.sun.xml.bind.v2.runtime.reflect.TransducedAccessor$IDREFTransducedAccessorImpl: java.lang.Class targetType>;

        $r6[0] = $r7;

        $r9 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r6[1] = $r9;

        $r10 = virtualinvoke $r8.<com.sun.xml.bind.v2.runtime.reflect.Messages: java.lang.String format(java.lang.Object[])>($r6);

        virtualinvoke r5.<com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext: void handleError(java.lang.String)>($r10);

        goto label2;

     label1:
        $r4 = r0.<com.sun.xml.bind.v2.runtime.reflect.TransducedAccessor$IDREFTransducedAccessorImpl: com.sun.xml.bind.v2.runtime.reflect.Accessor acc>;

        virtualinvoke $r4.<com.sun.xml.bind.v2.runtime.reflect.Accessor: void set(java.lang.Object,java.lang.Object)>(r3, r1);

     label2:
        return;
    }

    public void parse(java.lang.Object, java.lang.CharSequence) throws com.sun.xml.bind.api.AccessorException, org.xml.sax.SAXException
    {
        java.util.concurrent.Callable $r7;
        com.sun.xml.bind.v2.runtime.unmarshaller.LocatorEx $r10, $r13;
        com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext $r3;
        com.sun.xml.bind.v2.runtime.reflect.TransducedAccessor$IDREFTransducedAccessorImpl$1 $r11;
        java.lang.String $r2;
        com.sun.xml.bind.v2.runtime.reflect.TransducedAccessor$IDREFTransducedAccessorImpl r4;
        com.sun.istack.SAXException2 $r15;
        java.lang.CharSequence r0, $r1;
        java.lang.RuntimeException $r16;
        java.lang.Exception $r14;
        com.sun.xml.bind.v2.runtime.reflect.Accessor $r5;
        org.xml.sax.SAXException $r17;
        java.lang.Class $r6;
        java.lang.Object $r8, r12;
        com.sun.xml.bind.v2.runtime.unmarshaller.LocatorEx$Snapshot $r9;

        r4 := @this: com.sun.xml.bind.v2.runtime.reflect.TransducedAccessor$IDREFTransducedAccessorImpl;

        r12 := @parameter0: java.lang.Object;

        r0 := @parameter1: java.lang.CharSequence;

        $r1 = staticinvoke <com.sun.xml.bind.WhiteSpaceProcessor: java.lang.CharSequence trim(java.lang.CharSequence)>(r0);

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        $r3 = staticinvoke <com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext: com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext getInstance()>();

        $r5 = r4.<com.sun.xml.bind.v2.runtime.reflect.TransducedAccessor$IDREFTransducedAccessorImpl: com.sun.xml.bind.v2.runtime.reflect.Accessor acc>;

        $r6 = $r5.<com.sun.xml.bind.v2.runtime.reflect.Accessor: java.lang.Class valueType>;

        $r7 = virtualinvoke $r3.<com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext: java.util.concurrent.Callable getObjectFromId(java.lang.String,java.lang.Class)>($r2, $r6);

        if $r7 != null goto label1;

        $r13 = virtualinvoke $r3.<com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext: com.sun.xml.bind.v2.runtime.unmarshaller.LocatorEx getLocator()>();

        virtualinvoke $r3.<com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext: void errorUnresolvedIDREF(java.lang.Object,java.lang.String,com.sun.xml.bind.v2.runtime.unmarshaller.LocatorEx)>(r12, $r2, $r13);

        return;

     label1:
        $r8 = interfaceinvoke $r7.<java.util.concurrent.Callable: java.lang.Object call()>();

     label2:
        goto label6;

     label3:
        $r17 := @caughtexception;

        throw $r17;

     label4:
        $r16 := @caughtexception;

        throw $r16;

     label5:
        $r14 := @caughtexception;

        $r15 = new com.sun.istack.SAXException2;

        specialinvoke $r15.<com.sun.istack.SAXException2: void <init>(java.lang.Exception)>($r14);

        throw $r15;

     label6:
        if $r8 == null goto label7;

        specialinvoke r4.<com.sun.xml.bind.v2.runtime.reflect.TransducedAccessor$IDREFTransducedAccessorImpl: void assign(java.lang.Object,java.lang.Object,com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext)>(r12, $r8, $r3);

        goto label8;

     label7:
        $r9 = new com.sun.xml.bind.v2.runtime.unmarshaller.LocatorEx$Snapshot;

        $r10 = virtualinvoke $r3.<com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext: com.sun.xml.bind.v2.runtime.unmarshaller.LocatorEx getLocator()>();

        specialinvoke $r9.<com.sun.xml.bind.v2.runtime.unmarshaller.LocatorEx$Snapshot: void <init>(com.sun.xml.bind.v2.runtime.unmarshaller.LocatorEx)>($r10);

        $r11 = new com.sun.xml.bind.v2.runtime.reflect.TransducedAccessor$IDREFTransducedAccessorImpl$1;

        specialinvoke $r11.<com.sun.xml.bind.v2.runtime.reflect.TransducedAccessor$IDREFTransducedAccessorImpl$1: void <init>(com.sun.xml.bind.v2.runtime.reflect.TransducedAccessor$IDREFTransducedAccessorImpl,java.util.concurrent.Callable,com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext,java.lang.Object,java.lang.String,com.sun.xml.bind.v2.runtime.unmarshaller.LocatorEx)>(r4, $r7, $r3, r12, $r2, $r9);

        virtualinvoke $r3.<com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext: void addPatcher(com.sun.xml.bind.v2.runtime.unmarshaller.Patcher)>($r11);

     label8:
        return;

        catch org.xml.sax.SAXException from label1 to label2 with label3;
        catch java.lang.RuntimeException from label1 to label2 with label4;
        catch java.lang.Exception from label1 to label2 with label5;
    }

    public boolean hasValue(java.lang.Object) throws com.sun.xml.bind.api.AccessorException
    {
        com.sun.xml.bind.v2.runtime.reflect.TransducedAccessor$IDREFTransducedAccessorImpl r0;
        com.sun.xml.bind.v2.runtime.reflect.Accessor $r2;
        java.lang.Object r1, $r3;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.runtime.reflect.TransducedAccessor$IDREFTransducedAccessorImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.sun.xml.bind.v2.runtime.reflect.TransducedAccessor$IDREFTransducedAccessorImpl: com.sun.xml.bind.v2.runtime.reflect.Accessor acc>;

        $r3 = virtualinvoke $r2.<com.sun.xml.bind.v2.runtime.reflect.Accessor: java.lang.Object get(java.lang.Object)>(r1);

        if $r3 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public volatile java.lang.CharSequence print(java.lang.Object) throws com.sun.xml.bind.api.AccessorException, org.xml.sax.SAXException
    {
        com.sun.xml.bind.v2.runtime.reflect.TransducedAccessor$IDREFTransducedAccessorImpl r0;
        java.lang.Object r1;
        java.lang.String $r2;

        r0 := @this: com.sun.xml.bind.v2.runtime.reflect.TransducedAccessor$IDREFTransducedAccessorImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.sun.xml.bind.v2.runtime.reflect.TransducedAccessor$IDREFTransducedAccessorImpl: java.lang.String print(java.lang.Object)>(r1);

        return $r2;
    }

    static void access$000(com.sun.xml.bind.v2.runtime.reflect.TransducedAccessor$IDREFTransducedAccessorImpl, java.lang.Object, java.lang.Object, com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext) throws com.sun.xml.bind.api.AccessorException
    {
        com.sun.xml.bind.v2.runtime.reflect.TransducedAccessor$IDREFTransducedAccessorImpl r0;
        com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext r3;
        java.lang.Object r1, r2;

        r0 := @parameter0: com.sun.xml.bind.v2.runtime.reflect.TransducedAccessor$IDREFTransducedAccessorImpl;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext;

        specialinvoke r0.<com.sun.xml.bind.v2.runtime.reflect.TransducedAccessor$IDREFTransducedAccessorImpl: void assign(java.lang.Object,java.lang.Object,com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext)>(r1, r2, r3);

        return;
    }
}
