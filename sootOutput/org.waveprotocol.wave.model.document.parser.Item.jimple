class org.waveprotocol.wave.model.document.parser.Item extends java.lang.Object
{
    final org.waveprotocol.wave.model.document.parser.ItemType type;
    final java.lang.String name;
    final org.waveprotocol.wave.model.util.StringMap attrs;
    final java.lang.String data;

    public static org.waveprotocol.wave.model.document.parser.Item elementStart(java.lang.String, org.waveprotocol.wave.model.util.StringMap)
    {
        org.waveprotocol.wave.model.document.parser.ItemType $r3;
        java.lang.String r1;
        org.waveprotocol.wave.model.util.StringMap r2;
        org.waveprotocol.wave.model.document.parser.Item $r0;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.waveprotocol.wave.model.util.StringMap;

        $r0 = new org.waveprotocol.wave.model.document.parser.Item;

        $r3 = <org.waveprotocol.wave.model.document.parser.ItemType: org.waveprotocol.wave.model.document.parser.ItemType START_ELEMENT>;

        specialinvoke $r0.<org.waveprotocol.wave.model.document.parser.Item: void <init>(org.waveprotocol.wave.model.document.parser.ItemType,java.lang.String,org.waveprotocol.wave.model.util.StringMap,java.lang.String)>($r3, r1, r2, null);

        return $r0;
    }

    public static org.waveprotocol.wave.model.document.parser.Item elementEnd(java.lang.String)
    {
        java.lang.String r1;
        org.waveprotocol.wave.model.document.parser.Item $r0;
        org.waveprotocol.wave.model.document.parser.ItemType $r2;

        r1 := @parameter0: java.lang.String;

        $r0 = new org.waveprotocol.wave.model.document.parser.Item;

        $r2 = <org.waveprotocol.wave.model.document.parser.ItemType: org.waveprotocol.wave.model.document.parser.ItemType END_ELEMENT>;

        specialinvoke $r0.<org.waveprotocol.wave.model.document.parser.Item: void <init>(org.waveprotocol.wave.model.document.parser.ItemType,java.lang.String,org.waveprotocol.wave.model.util.StringMap,java.lang.String)>($r2, r1, null, null);

        return $r0;
    }

    public static org.waveprotocol.wave.model.document.parser.Item processingInstruction(java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.model.document.parser.ItemType $r3;
        java.lang.String r1, r2;
        org.waveprotocol.wave.model.document.parser.Item $r0;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r0 = new org.waveprotocol.wave.model.document.parser.Item;

        $r3 = <org.waveprotocol.wave.model.document.parser.ItemType: org.waveprotocol.wave.model.document.parser.ItemType PROCESSING_INSTRUCTION>;

        specialinvoke $r0.<org.waveprotocol.wave.model.document.parser.Item: void <init>(org.waveprotocol.wave.model.document.parser.ItemType,java.lang.String,org.waveprotocol.wave.model.util.StringMap,java.lang.String)>($r3, r1, null, r2);

        return $r0;
    }

    public static org.waveprotocol.wave.model.document.parser.Item text(java.lang.String)
    {
        java.lang.String r1;
        org.waveprotocol.wave.model.document.parser.Item $r0;
        org.waveprotocol.wave.model.document.parser.ItemType $r2;

        r1 := @parameter0: java.lang.String;

        $r0 = new org.waveprotocol.wave.model.document.parser.Item;

        $r2 = <org.waveprotocol.wave.model.document.parser.ItemType: org.waveprotocol.wave.model.document.parser.ItemType TEXT>;

        specialinvoke $r0.<org.waveprotocol.wave.model.document.parser.Item: void <init>(org.waveprotocol.wave.model.document.parser.ItemType,java.lang.String,org.waveprotocol.wave.model.util.StringMap,java.lang.String)>($r2, null, null, r1);

        return $r0;
    }

    public org.waveprotocol.wave.model.document.parser.Item startElementToEndElement()
    {
        org.waveprotocol.wave.model.document.parser.ItemType $r1, $r2, $r5;
        java.lang.String $r4;
        org.waveprotocol.wave.model.document.parser.Item r0, $r3;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.parser.Item;

        $r2 = r0.<org.waveprotocol.wave.model.document.parser.Item: org.waveprotocol.wave.model.document.parser.ItemType type>;

        $r1 = <org.waveprotocol.wave.model.document.parser.ItemType: org.waveprotocol.wave.model.document.parser.ItemType START_ELEMENT>;

        if $r2 != $r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "Can only convert start elements to end elements");

        $r3 = new org.waveprotocol.wave.model.document.parser.Item;

        $r5 = <org.waveprotocol.wave.model.document.parser.ItemType: org.waveprotocol.wave.model.document.parser.ItemType END_ELEMENT>;

        $r4 = r0.<org.waveprotocol.wave.model.document.parser.Item: java.lang.String name>;

        specialinvoke $r3.<org.waveprotocol.wave.model.document.parser.Item: void <init>(org.waveprotocol.wave.model.document.parser.ItemType,java.lang.String,org.waveprotocol.wave.model.util.StringMap,java.lang.String)>($r5, $r4, null, null);

        return $r3;
    }

    public void <init>(org.waveprotocol.wave.model.document.parser.ItemType, java.lang.String, org.waveprotocol.wave.model.util.StringMap, java.lang.String)
    {
        org.waveprotocol.wave.model.document.parser.ItemType r1;
        java.lang.String r2, r4;
        org.waveprotocol.wave.model.util.StringMap r3, $r5;
        org.waveprotocol.wave.model.document.parser.Item r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.parser.Item;

        r1 := @parameter0: org.waveprotocol.wave.model.document.parser.ItemType;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.waveprotocol.wave.model.util.StringMap;

        r4 := @parameter3: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.model.document.parser.Item: org.waveprotocol.wave.model.document.parser.ItemType type> = r1;

        r0.<org.waveprotocol.wave.model.document.parser.Item: java.lang.String name> = r2;

        if r3 == null goto label1;

        $z0 = interfaceinvoke r3.<org.waveprotocol.wave.model.util.StringMap: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $r5 = null;

        goto label3;

     label2:
        $r5 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringMap copyStringMap(org.waveprotocol.wave.model.util.ReadableStringMap)>(r3);

     label3:
        r0.<org.waveprotocol.wave.model.document.parser.Item: org.waveprotocol.wave.model.util.StringMap attrs> = $r5;

        r0.<org.waveprotocol.wave.model.document.parser.Item: java.lang.String data> = r4;

        return;
    }

    java.lang.String getProcessingInstructionName()
    {
        java.lang.String $r1;
        org.waveprotocol.wave.model.document.parser.Item r0;

        r0 := @this: org.waveprotocol.wave.model.document.parser.Item;

        specialinvoke r0.<org.waveprotocol.wave.model.document.parser.Item: void checkAtProcessingInstruction()>();

        $r1 = r0.<org.waveprotocol.wave.model.document.parser.Item: java.lang.String name>;

        return $r1;
    }

    java.lang.String getProcessingInstructionValue()
    {
        java.lang.String $r1;
        org.waveprotocol.wave.model.document.parser.Item r0;

        r0 := @this: org.waveprotocol.wave.model.document.parser.Item;

        specialinvoke r0.<org.waveprotocol.wave.model.document.parser.Item: void checkAtProcessingInstruction()>();

        $r1 = r0.<org.waveprotocol.wave.model.document.parser.Item: java.lang.String data>;

        return $r1;
    }

    java.lang.String getTagName()
    {
        java.lang.String $r1;
        org.waveprotocol.wave.model.document.parser.Item r0;

        r0 := @this: org.waveprotocol.wave.model.document.parser.Item;

        specialinvoke r0.<org.waveprotocol.wave.model.document.parser.Item: void checkAtElement()>();

        $r1 = r0.<org.waveprotocol.wave.model.document.parser.Item: java.lang.String name>;

        return $r1;
    }

    java.lang.String getText()
    {
        java.lang.String $r1;
        org.waveprotocol.wave.model.document.parser.Item r0;

        r0 := @this: org.waveprotocol.wave.model.document.parser.Item;

        specialinvoke r0.<org.waveprotocol.wave.model.document.parser.Item: void checkAtText()>();

        $r1 = r0.<org.waveprotocol.wave.model.document.parser.Item: java.lang.String data>;

        return $r1;
    }

    org.waveprotocol.wave.model.document.parser.Item copy()
    {
        org.waveprotocol.wave.model.document.parser.ItemType $r5;
        java.lang.String $r2, $r4;
        org.waveprotocol.wave.model.util.StringMap $r3;
        org.waveprotocol.wave.model.document.parser.Item $r0, r1;

        r1 := @this: org.waveprotocol.wave.model.document.parser.Item;

        $r0 = new org.waveprotocol.wave.model.document.parser.Item;

        $r5 = r1.<org.waveprotocol.wave.model.document.parser.Item: org.waveprotocol.wave.model.document.parser.ItemType type>;

        $r4 = r1.<org.waveprotocol.wave.model.document.parser.Item: java.lang.String name>;

        $r3 = r1.<org.waveprotocol.wave.model.document.parser.Item: org.waveprotocol.wave.model.util.StringMap attrs>;

        $r2 = r1.<org.waveprotocol.wave.model.document.parser.Item: java.lang.String data>;

        specialinvoke $r0.<org.waveprotocol.wave.model.document.parser.Item: void <init>(org.waveprotocol.wave.model.document.parser.ItemType,java.lang.String,org.waveprotocol.wave.model.util.StringMap,java.lang.String)>($r5, $r4, $r3, $r2);

        return $r0;
    }

    org.waveprotocol.wave.model.util.StringMap getAttributes()
    {
        org.waveprotocol.wave.model.util.StringMap $r1, $r2, $r3;
        org.waveprotocol.wave.model.document.parser.Item r0;

        r0 := @this: org.waveprotocol.wave.model.document.parser.Item;

        specialinvoke r0.<org.waveprotocol.wave.model.document.parser.Item: void checkAtElementStart()>();

        $r1 = r0.<org.waveprotocol.wave.model.document.parser.Item: org.waveprotocol.wave.model.util.StringMap attrs>;

        if $r1 != null goto label1;

        $r3 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringMap emptyMap()>();

        return $r3;

     label1:
        $r2 = r0.<org.waveprotocol.wave.model.document.parser.Item: org.waveprotocol.wave.model.util.StringMap attrs>;

        return $r2;
    }

    private void checkAtProcessingInstruction()
    {
        org.waveprotocol.wave.model.document.parser.ItemType $r1, $r2;
        org.waveprotocol.wave.model.document.parser.Item r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.parser.Item;

        $r2 = r0.<org.waveprotocol.wave.model.document.parser.Item: org.waveprotocol.wave.model.document.parser.ItemType type>;

        $r1 = <org.waveprotocol.wave.model.document.parser.ItemType: org.waveprotocol.wave.model.document.parser.ItemType PROCESSING_INSTRUCTION>;

        if $r2 != $r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "Cursor not at processing instruction");

        return;
    }

    private void checkAtElement()
    {
        org.waveprotocol.wave.model.document.parser.ItemType $r1, $r2, $r3, $r4;
        org.waveprotocol.wave.model.document.parser.Item r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.parser.Item;

        $r2 = r0.<org.waveprotocol.wave.model.document.parser.Item: org.waveprotocol.wave.model.document.parser.ItemType type>;

        $r1 = <org.waveprotocol.wave.model.document.parser.ItemType: org.waveprotocol.wave.model.document.parser.ItemType START_ELEMENT>;

        if $r2 == $r1 goto label1;

        $r4 = r0.<org.waveprotocol.wave.model.document.parser.Item: org.waveprotocol.wave.model.document.parser.ItemType type>;

        $r3 = <org.waveprotocol.wave.model.document.parser.ItemType: org.waveprotocol.wave.model.document.parser.ItemType END_ELEMENT>;

        if $r4 != $r3 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "Cursor not at element");

        return;
    }

    private void checkAtElementStart()
    {
        org.waveprotocol.wave.model.document.parser.ItemType $r1, $r2;
        org.waveprotocol.wave.model.document.parser.Item r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.parser.Item;

        $r2 = r0.<org.waveprotocol.wave.model.document.parser.Item: org.waveprotocol.wave.model.document.parser.ItemType type>;

        $r1 = <org.waveprotocol.wave.model.document.parser.ItemType: org.waveprotocol.wave.model.document.parser.ItemType START_ELEMENT>;

        if $r2 != $r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "Cursor not at element start");

        return;
    }

    private void checkAtText()
    {
        org.waveprotocol.wave.model.document.parser.ItemType $r1, $r2;
        org.waveprotocol.wave.model.document.parser.Item r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.parser.Item;

        $r2 = r0.<org.waveprotocol.wave.model.document.parser.Item: org.waveprotocol.wave.model.document.parser.ItemType type>;

        $r1 = <org.waveprotocol.wave.model.document.parser.ItemType: org.waveprotocol.wave.model.document.parser.ItemType TEXT>;

        if $r2 != $r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "Cursor not at text");

        return;
    }
}
