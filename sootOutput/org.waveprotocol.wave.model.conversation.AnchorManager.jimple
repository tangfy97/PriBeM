public final class org.waveprotocol.wave.model.conversation.AnchorManager extends java.lang.Object implements org.waveprotocol.wave.model.wave.SourcesEvents
{
    private final org.waveprotocol.wave.model.wave.ObservableMap locationResolver;
    private final java.util.Map attached;
    private final java.util.Map unattached;
    private final org.waveprotocol.wave.model.wave.ObservableMap$Listener itemObserver;
    private final org.waveprotocol.wave.model.util.CopyOnWriteSet listeners;

    private void <init>(org.waveprotocol.wave.model.wave.ObservableMap)
    {
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r4;
        org.waveprotocol.wave.model.conversation.AnchorManager$1 $r3;
        java.util.HashMap $r1, $r2;
        org.waveprotocol.wave.model.wave.ObservableMap r5;
        org.waveprotocol.wave.model.conversation.AnchorManager r0;

        r0 := @this: org.waveprotocol.wave.model.conversation.AnchorManager;

        r5 := @parameter0: org.waveprotocol.wave.model.wave.ObservableMap;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.HashMap newHashMap()>();

        r0.<org.waveprotocol.wave.model.conversation.AnchorManager: java.util.Map attached> = $r1;

        $r2 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.HashMap newHashMap()>();

        r0.<org.waveprotocol.wave.model.conversation.AnchorManager: java.util.Map unattached> = $r2;

        $r3 = new org.waveprotocol.wave.model.conversation.AnchorManager$1;

        specialinvoke $r3.<org.waveprotocol.wave.model.conversation.AnchorManager$1: void <init>(org.waveprotocol.wave.model.conversation.AnchorManager)>(r0);

        r0.<org.waveprotocol.wave.model.conversation.AnchorManager: org.waveprotocol.wave.model.wave.ObservableMap$Listener itemObserver> = $r3;

        $r4 = staticinvoke <org.waveprotocol.wave.model.util.CopyOnWriteSet: org.waveprotocol.wave.model.util.CopyOnWriteSet create()>();

        r0.<org.waveprotocol.wave.model.conversation.AnchorManager: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners> = $r4;

        r0.<org.waveprotocol.wave.model.conversation.AnchorManager: org.waveprotocol.wave.model.wave.ObservableMap locationResolver> = r5;

        return;
    }

    public static org.waveprotocol.wave.model.conversation.AnchorManager create(org.waveprotocol.wave.model.wave.ObservableMap)
    {
        org.waveprotocol.wave.model.wave.ObservableMap r1;
        org.waveprotocol.wave.model.conversation.AnchorManager $r0;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.ObservableMap;

        $r0 = new org.waveprotocol.wave.model.conversation.AnchorManager;

        specialinvoke $r0.<org.waveprotocol.wave.model.conversation.AnchorManager: void <init>(org.waveprotocol.wave.model.wave.ObservableMap)>(r1);

        specialinvoke $r0.<org.waveprotocol.wave.model.conversation.AnchorManager: void init()>();

        return $r0;
    }

    private void init()
    {
        org.waveprotocol.wave.model.wave.ObservableMap $r2;
        org.waveprotocol.wave.model.conversation.AnchorManager r0;
        org.waveprotocol.wave.model.wave.ObservableMap$Listener $r1;

        r0 := @this: org.waveprotocol.wave.model.conversation.AnchorManager;

        $r2 = r0.<org.waveprotocol.wave.model.conversation.AnchorManager: org.waveprotocol.wave.model.wave.ObservableMap locationResolver>;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.AnchorManager: org.waveprotocol.wave.model.wave.ObservableMap$Listener itemObserver>;

        interfaceinvoke $r2.<org.waveprotocol.wave.model.wave.ObservableMap: void addListener(java.lang.Object)>($r1);

        return;
    }

    public void destroy()
    {
        org.waveprotocol.wave.model.wave.ObservableMap $r2;
        org.waveprotocol.wave.model.conversation.AnchorManager r0;
        org.waveprotocol.wave.model.wave.ObservableMap$Listener $r1;

        r0 := @this: org.waveprotocol.wave.model.conversation.AnchorManager;

        $r2 = r0.<org.waveprotocol.wave.model.conversation.AnchorManager: org.waveprotocol.wave.model.wave.ObservableMap locationResolver>;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.AnchorManager: org.waveprotocol.wave.model.wave.ObservableMap$Listener itemObserver>;

        interfaceinvoke $r2.<org.waveprotocol.wave.model.wave.ObservableMap: void removeListener(java.lang.Object)>($r1);

        return;
    }

    public void attachParasite(java.lang.Object, java.lang.Object)
    {
        java.util.Map $r5, $r6;
        java.lang.Object r1, $r3, r4;
        org.waveprotocol.wave.model.wave.ObservableMap $r2;
        org.waveprotocol.wave.model.conversation.AnchorManager r0;

        r0 := @this: org.waveprotocol.wave.model.conversation.AnchorManager;

        r1 := @parameter0: java.lang.Object;

        r4 := @parameter1: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.model.conversation.AnchorManager: org.waveprotocol.wave.model.wave.ObservableMap locationResolver>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.wave.ObservableMap: java.lang.Object get(java.lang.Object)>(r1);

        if $r3 == null goto label1;

        $r6 = r0.<org.waveprotocol.wave.model.conversation.AnchorManager: java.util.Map attached>;

        staticinvoke <org.waveprotocol.wave.model.conversation.AnchorManager: void put(java.util.Map,java.lang.Object,java.lang.Object)>($r6, $r3, r4);

        goto label2;

     label1:
        $r5 = r0.<org.waveprotocol.wave.model.conversation.AnchorManager: java.util.Map unattached>;

        staticinvoke <org.waveprotocol.wave.model.conversation.AnchorManager: void put(java.util.Map,java.lang.Object,java.lang.Object)>($r5, r1, r4);

     label2:
        specialinvoke r0.<org.waveprotocol.wave.model.conversation.AnchorManager: void triggerOnAttached(java.lang.Object,java.lang.Object)>($r3, r4);

        return;
    }

    public void detachParasite(java.lang.Object, java.lang.Object)
    {
        java.util.Map $r5, $r6;
        java.lang.Object r1, $r3, r4;
        org.waveprotocol.wave.model.wave.ObservableMap $r2;
        org.waveprotocol.wave.model.conversation.AnchorManager r0;

        r0 := @this: org.waveprotocol.wave.model.conversation.AnchorManager;

        r1 := @parameter0: java.lang.Object;

        r4 := @parameter1: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.model.conversation.AnchorManager: org.waveprotocol.wave.model.wave.ObservableMap locationResolver>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.wave.ObservableMap: java.lang.Object get(java.lang.Object)>(r1);

        if $r3 == null goto label1;

        $r6 = r0.<org.waveprotocol.wave.model.conversation.AnchorManager: java.util.Map attached>;

        staticinvoke <org.waveprotocol.wave.model.conversation.AnchorManager: void remove(java.util.Map,java.lang.Object,java.lang.Object)>($r6, $r3, r4);

        goto label2;

     label1:
        $r5 = r0.<org.waveprotocol.wave.model.conversation.AnchorManager: java.util.Map unattached>;

        staticinvoke <org.waveprotocol.wave.model.conversation.AnchorManager: void remove(java.util.Map,java.lang.Object,java.lang.Object)>($r5, r1, r4);

     label2:
        specialinvoke r0.<org.waveprotocol.wave.model.conversation.AnchorManager: void triggerOnDetached(java.lang.Object,java.lang.Object)>($r3, r4);

        return;
    }

    private static void put(java.util.Map, java.lang.Object, java.lang.Object)
    {
        java.util.HashSet $r4;
        java.util.Map r0;
        java.util.Collection r5;
        java.lang.Object r1, $r2, r3;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r2 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r5 = (java.util.Collection) $r2;

        if r5 != null goto label1;

        $r4 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.HashSet newHashSet()>();

        r5 = $r4;

        interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4);

     label1:
        interfaceinvoke r5.<java.util.Collection: boolean add(java.lang.Object)>(r3);

        return;
    }

    private static void remove(java.util.Map, java.lang.Object, java.lang.Object)
    {
        java.util.Map r0;
        java.util.Collection r3;
        java.lang.Object r1, $r2, r4;
        boolean $z0;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        r4 := @parameter2: java.lang.Object;

        $r2 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (java.util.Collection) $r2;

        interfaceinvoke r3.<java.util.Collection: boolean remove(java.lang.Object)>(r4);

        $z0 = interfaceinvoke r3.<java.util.Collection: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        interfaceinvoke r0.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

     label1:
        return;
    }

    private void onEntryAdded(java.lang.Object, java.lang.Object)
    {
        java.util.Map $r2, $r6;
        java.util.Collection r4;
        java.lang.Object r1, $r3, r5;
        org.waveprotocol.wave.model.conversation.AnchorManager r0;

        r0 := @this: org.waveprotocol.wave.model.conversation.AnchorManager;

        r1 := @parameter0: java.lang.Object;

        r5 := @parameter1: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.model.conversation.AnchorManager: java.util.Map unattached>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        r4 = (java.util.Collection) $r3;

        if r4 == null goto label1;

        $r6 = r0.<org.waveprotocol.wave.model.conversation.AnchorManager: java.util.Map attached>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, r4);

        specialinvoke r0.<org.waveprotocol.wave.model.conversation.AnchorManager: void triggerOnDetached(java.lang.Object,java.util.Collection)>(null, r4);

        specialinvoke r0.<org.waveprotocol.wave.model.conversation.AnchorManager: void triggerOnAttached(java.lang.Object,java.util.Collection)>(r5, r4);

     label1:
        return;
    }

    private void onEntryRemoved(java.lang.Object, java.lang.Object)
    {
        java.util.Map $r2, $r6;
        java.util.Collection r4;
        java.lang.Object r1, $r3, r5;
        org.waveprotocol.wave.model.conversation.AnchorManager r0;

        r0 := @this: org.waveprotocol.wave.model.conversation.AnchorManager;

        r5 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.model.conversation.AnchorManager: java.util.Map attached>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        r4 = (java.util.Collection) $r3;

        if r4 == null goto label1;

        $r6 = r0.<org.waveprotocol.wave.model.conversation.AnchorManager: java.util.Map unattached>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, r4);

        specialinvoke r0.<org.waveprotocol.wave.model.conversation.AnchorManager: void triggerOnDetached(java.lang.Object,java.util.Collection)>(r1, r4);

        specialinvoke r0.<org.waveprotocol.wave.model.conversation.AnchorManager: void triggerOnAttached(java.lang.Object,java.util.Collection)>(null, r4);

     label1:
        return;
    }

    public java.util.Map getAttached()
    {
        org.waveprotocol.wave.model.conversation.AnchorManager r0;
        java.util.Map $r1, $r2;

        r0 := @this: org.waveprotocol.wave.model.conversation.AnchorManager;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.AnchorManager: java.util.Map attached>;

        $r2 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r1);

        return $r2;
    }

    public java.util.Collection getUnattached()
    {
        java.util.Iterator $r4;
        java.util.Collection $r3, r6;
        java.util.ArrayList $r0;
        java.util.Map $r2;
        java.lang.Object $r5;
        org.waveprotocol.wave.model.conversation.AnchorManager r1;
        boolean $z0;

        r1 := @this: org.waveprotocol.wave.model.conversation.AnchorManager;

        $r0 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.ArrayList newArrayList()>();

        $r2 = r1.<org.waveprotocol.wave.model.conversation.AnchorManager: java.util.Map unattached>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>();

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.Collection) $r5;

        interfaceinvoke $r0.<java.util.Collection: boolean addAll(java.util.Collection)>(r6);

        goto label1;

     label2:
        return $r0;
    }

    public void addListener(org.waveprotocol.wave.model.conversation.AnchorManager$Listener)
    {
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;
        org.waveprotocol.wave.model.conversation.AnchorManager r0;
        org.waveprotocol.wave.model.conversation.AnchorManager$Listener r1;

        r0 := @this: org.waveprotocol.wave.model.conversation.AnchorManager;

        r1 := @parameter0: org.waveprotocol.wave.model.conversation.AnchorManager$Listener;

        $r2 = r0.<org.waveprotocol.wave.model.conversation.AnchorManager: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.util.CopyOnWriteSet: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void removeListener(org.waveprotocol.wave.model.conversation.AnchorManager$Listener)
    {
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;
        org.waveprotocol.wave.model.conversation.AnchorManager r0;
        org.waveprotocol.wave.model.conversation.AnchorManager$Listener r1;

        r0 := @this: org.waveprotocol.wave.model.conversation.AnchorManager;

        r1 := @parameter0: org.waveprotocol.wave.model.conversation.AnchorManager$Listener;

        $r2 = r0.<org.waveprotocol.wave.model.conversation.AnchorManager: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.util.CopyOnWriteSet: boolean remove(java.lang.Object)>(r1);

        return;
    }

    private void triggerOnAttached(java.lang.Object, java.lang.Object)
    {
        java.util.Set $r3;
        java.lang.Object r1, r2;
        org.waveprotocol.wave.model.conversation.AnchorManager r0;

        r0 := @this: org.waveprotocol.wave.model.conversation.AnchorManager;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(r2);

        specialinvoke r0.<org.waveprotocol.wave.model.conversation.AnchorManager: void triggerOnAttached(java.lang.Object,java.util.Collection)>(r1, $r3);

        return;
    }

    private void triggerOnDetached(java.lang.Object, java.lang.Object)
    {
        java.util.Set $r3;
        java.lang.Object r1, r2;
        org.waveprotocol.wave.model.conversation.AnchorManager r0;

        r0 := @this: org.waveprotocol.wave.model.conversation.AnchorManager;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(r2);

        specialinvoke r0.<org.waveprotocol.wave.model.conversation.AnchorManager: void triggerOnDetached(java.lang.Object,java.util.Collection)>(r1, $r3);

        return;
    }

    private void triggerOnAttached(java.lang.Object, java.util.Collection)
    {
        java.util.Iterator $r2;
        java.util.Collection r6;
        org.waveprotocol.wave.model.conversation.AnchorManager$Listener r4;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        java.lang.Object $r3, r5;
        org.waveprotocol.wave.model.conversation.AnchorManager r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.conversation.AnchorManager;

        r5 := @parameter0: java.lang.Object;

        r6 := @parameter1: java.util.Collection;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.AnchorManager: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.conversation.AnchorManager$Listener) $r3;

        interfaceinvoke r4.<org.waveprotocol.wave.model.conversation.AnchorManager$Listener: void onAttached(java.lang.Object,java.util.Collection)>(r5, r6);

        goto label1;

     label2:
        return;
    }

    private void triggerOnDetached(java.lang.Object, java.util.Collection)
    {
        java.util.Iterator $r2;
        java.util.Collection r6;
        org.waveprotocol.wave.model.conversation.AnchorManager$Listener r4;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        java.lang.Object $r3, r5;
        org.waveprotocol.wave.model.conversation.AnchorManager r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.conversation.AnchorManager;

        r5 := @parameter0: java.lang.Object;

        r6 := @parameter1: java.util.Collection;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.AnchorManager: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.conversation.AnchorManager$Listener) $r3;

        interfaceinvoke r4.<org.waveprotocol.wave.model.conversation.AnchorManager$Listener: void onDetached(java.lang.Object,java.util.Collection)>(r5, r6);

        goto label1;

     label2:
        return;
    }

    public volatile void removeListener(java.lang.Object)
    {
        java.lang.Object r1;
        org.waveprotocol.wave.model.conversation.AnchorManager r0;
        org.waveprotocol.wave.model.conversation.AnchorManager$Listener $r2;

        r0 := @this: org.waveprotocol.wave.model.conversation.AnchorManager;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.conversation.AnchorManager$Listener) r1;

        virtualinvoke r0.<org.waveprotocol.wave.model.conversation.AnchorManager: void removeListener(org.waveprotocol.wave.model.conversation.AnchorManager$Listener)>($r2);

        return;
    }

    public volatile void addListener(java.lang.Object)
    {
        java.lang.Object r1;
        org.waveprotocol.wave.model.conversation.AnchorManager r0;
        org.waveprotocol.wave.model.conversation.AnchorManager$Listener $r2;

        r0 := @this: org.waveprotocol.wave.model.conversation.AnchorManager;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.conversation.AnchorManager$Listener) r1;

        virtualinvoke r0.<org.waveprotocol.wave.model.conversation.AnchorManager: void addListener(org.waveprotocol.wave.model.conversation.AnchorManager$Listener)>($r2);

        return;
    }

    static void access$000(org.waveprotocol.wave.model.conversation.AnchorManager, java.lang.Object, java.lang.Object)
    {
        java.lang.Object r1, r2;
        org.waveprotocol.wave.model.conversation.AnchorManager r0;

        r0 := @parameter0: org.waveprotocol.wave.model.conversation.AnchorManager;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        specialinvoke r0.<org.waveprotocol.wave.model.conversation.AnchorManager: void onEntryAdded(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    static void access$100(org.waveprotocol.wave.model.conversation.AnchorManager, java.lang.Object, java.lang.Object)
    {
        java.lang.Object r1, r2;
        org.waveprotocol.wave.model.conversation.AnchorManager r0;

        r0 := @parameter0: org.waveprotocol.wave.model.conversation.AnchorManager;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        specialinvoke r0.<org.waveprotocol.wave.model.conversation.AnchorManager: void onEntryRemoved(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }
}
