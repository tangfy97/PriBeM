class com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedBiMap extends com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedMap implements com.mycila.inject.internal.guava.collect.BiMap
{
    volatile com.mycila.inject.internal.guava.collect.BiMap inverse;

    void <init>(com.mycila.inject.internal.guava.collect.BiMap, com.mycila.inject.internal.guava.collect.BiMap, com.mycila.inject.internal.guava.collect.MapConstraint)
    {
        com.mycila.inject.internal.guava.collect.BiMap r1, r3;
        com.mycila.inject.internal.guava.collect.MapConstraint r2;
        com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedBiMap r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedBiMap;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.BiMap;

        r3 := @parameter1: com.mycila.inject.internal.guava.collect.BiMap;

        r2 := @parameter2: com.mycila.inject.internal.guava.collect.MapConstraint;

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedMap: void <init>(java.util.Map,com.mycila.inject.internal.guava.collect.MapConstraint)>(r1, r2);

        r0.<com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedBiMap: com.mycila.inject.internal.guava.collect.BiMap inverse> = r3;

        return;
    }

    protected com.mycila.inject.internal.guava.collect.BiMap delegate()
    {
        com.mycila.inject.internal.guava.collect.BiMap $r2;
        com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedBiMap r0;
        java.util.Map $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedBiMap;

        $r1 = specialinvoke r0.<com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedMap: java.util.Map delegate()>();

        $r2 = (com.mycila.inject.internal.guava.collect.BiMap) $r1;

        return $r2;
    }

    public java.lang.Object forcePut(java.lang.Object, java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.BiMap $r4;
        java.lang.Object r1, r2, $r5;
        com.mycila.inject.internal.guava.collect.MapConstraint $r3;
        com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedBiMap r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedBiMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = r0.<com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedBiMap: com.mycila.inject.internal.guava.collect.MapConstraint constraint>;

        interfaceinvoke $r3.<com.mycila.inject.internal.guava.collect.MapConstraint: void checkKeyValue(java.lang.Object,java.lang.Object)>(r1, r2);

        $r4 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedBiMap: com.mycila.inject.internal.guava.collect.BiMap delegate()>();

        $r5 = interfaceinvoke $r4.<com.mycila.inject.internal.guava.collect.BiMap: java.lang.Object forcePut(java.lang.Object,java.lang.Object)>(r1, r2);

        return $r5;
    }

    public com.mycila.inject.internal.guava.collect.BiMap inverse()
    {
        com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedBiMap r0, $r3;
        com.mycila.inject.internal.guava.collect.MapConstraints$InverseConstraint $r6;
        com.mycila.inject.internal.guava.collect.BiMap $r1, $r2, $r4, $r5;
        com.mycila.inject.internal.guava.collect.MapConstraint $r7;

        r0 := @this: com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedBiMap;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedBiMap: com.mycila.inject.internal.guava.collect.BiMap inverse>;

        if $r1 != null goto label1;

        $r3 = new com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedBiMap;

        $r4 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedBiMap: com.mycila.inject.internal.guava.collect.BiMap delegate()>();

        $r5 = interfaceinvoke $r4.<com.mycila.inject.internal.guava.collect.BiMap: com.mycila.inject.internal.guava.collect.BiMap inverse()>();

        $r6 = new com.mycila.inject.internal.guava.collect.MapConstraints$InverseConstraint;

        $r7 = r0.<com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedBiMap: com.mycila.inject.internal.guava.collect.MapConstraint constraint>;

        specialinvoke $r6.<com.mycila.inject.internal.guava.collect.MapConstraints$InverseConstraint: void <init>(com.mycila.inject.internal.guava.collect.MapConstraint)>($r7);

        specialinvoke $r3.<com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedBiMap: void <init>(com.mycila.inject.internal.guava.collect.BiMap,com.mycila.inject.internal.guava.collect.BiMap,com.mycila.inject.internal.guava.collect.MapConstraint)>($r5, r0, $r6);

        r0.<com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedBiMap: com.mycila.inject.internal.guava.collect.BiMap inverse> = $r3;

     label1:
        $r2 = r0.<com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedBiMap: com.mycila.inject.internal.guava.collect.BiMap inverse>;

        return $r2;
    }

    public java.util.Set values()
    {
        com.mycila.inject.internal.guava.collect.BiMap $r1;
        java.util.Set $r2;
        com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedBiMap r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedBiMap;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedBiMap: com.mycila.inject.internal.guava.collect.BiMap delegate()>();

        $r2 = interfaceinvoke $r1.<com.mycila.inject.internal.guava.collect.BiMap: java.util.Set values()>();

        return $r2;
    }

    protected volatile java.util.Map delegate()
    {
        com.mycila.inject.internal.guava.collect.BiMap $r1;
        com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedBiMap r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedBiMap;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedBiMap: com.mycila.inject.internal.guava.collect.BiMap delegate()>();

        return $r1;
    }

    public volatile java.util.Collection values()
    {
        java.util.Set $r1;
        com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedBiMap r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedBiMap;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedBiMap: java.util.Set values()>();

        return $r1;
    }

    protected volatile java.lang.Object delegate()
    {
        com.mycila.inject.internal.guava.collect.BiMap $r1;
        com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedBiMap r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedBiMap;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedBiMap: com.mycila.inject.internal.guava.collect.BiMap delegate()>();

        return $r1;
    }
}
