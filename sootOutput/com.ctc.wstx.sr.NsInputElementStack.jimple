public final class com.ctc.wstx.sr.NsInputElementStack extends com.ctc.wstx.sr.InputElementStack
{
    static final java.lang.String DEFAULT_NAMESPACE_URI;
    static final int IX_PREFIX;
    static final int IX_LOCALNAME;
    static final int IX_URI;
    static final int IX_DEFAULT_NS;
    static final int ENTRY_SIZE;
    protected static final com.ctc.wstx.util.InternCache sInternCache;
    protected final com.ctc.wstx.sr.NsAttributeCollector mAttrCollector;
    protected com.ctc.wstx.sr.NsDefaultProvider mNsDefaultProvider;
    protected final com.ctc.wstx.util.StringVector mNamespaces;
    protected java.lang.String[] mElements;
    protected int mSize;
    protected int[] mNsCounts;
    protected boolean mMayHaveNsDefaults;
    protected java.lang.String mLastLocalName;
    protected java.lang.String mLastPrefix;
    protected java.lang.String mLastNsURI;
    protected javax.xml.namespace.QName mLastName;
    protected com.ctc.wstx.util.BaseNsContext mLastNsContext;

    public void <init>(int, com.ctc.wstx.api.ReaderConfig)
    {
        java.lang.String[] $r3;
        com.ctc.wstx.api.ReaderConfig r1;
        com.ctc.wstx.sr.NsInputElementStack r0;
        com.ctc.wstx.sr.NsAttributeCollector $r5;
        com.ctc.wstx.util.StringVector $r2;
        int[] $r4;
        int $i0, i1;

        r0 := @this: com.ctc.wstx.sr.NsInputElementStack;

        i1 := @parameter0: int;

        r1 := @parameter1: com.ctc.wstx.api.ReaderConfig;

        specialinvoke r0.<com.ctc.wstx.sr.InputElementStack: void <init>(com.ctc.wstx.api.ReaderConfig)>(r1);

        $r2 = new com.ctc.wstx.util.StringVector;

        specialinvoke $r2.<com.ctc.wstx.util.StringVector: void <init>(int)>(64);

        r0.<com.ctc.wstx.sr.NsInputElementStack: com.ctc.wstx.util.StringVector mNamespaces> = $r2;

        r0.<com.ctc.wstx.sr.NsInputElementStack: boolean mMayHaveNsDefaults> = 0;

        r0.<com.ctc.wstx.sr.NsInputElementStack: java.lang.String mLastLocalName> = null;

        r0.<com.ctc.wstx.sr.NsInputElementStack: java.lang.String mLastPrefix> = null;

        r0.<com.ctc.wstx.sr.NsInputElementStack: java.lang.String mLastNsURI> = null;

        r0.<com.ctc.wstx.sr.NsInputElementStack: javax.xml.namespace.QName mLastName> = null;

        r0.<com.ctc.wstx.sr.NsInputElementStack: com.ctc.wstx.util.BaseNsContext mLastNsContext> = null;

        r0.<com.ctc.wstx.sr.NsInputElementStack: int mSize> = 0;

        if i1 >= 4 goto label1;

        i1 = 4;

     label1:
        $i0 = i1 << 2;

        $r3 = newarray (java.lang.String)[$i0];

        r0.<com.ctc.wstx.sr.NsInputElementStack: java.lang.String[] mElements> = $r3;

        $r4 = newarray (int)[i1];

        r0.<com.ctc.wstx.sr.NsInputElementStack: int[] mNsCounts> = $r4;

        $r5 = new com.ctc.wstx.sr.NsAttributeCollector;

        specialinvoke $r5.<com.ctc.wstx.sr.NsAttributeCollector: void <init>(com.ctc.wstx.api.ReaderConfig)>(r1);

        r0.<com.ctc.wstx.sr.NsInputElementStack: com.ctc.wstx.sr.NsAttributeCollector mAttrCollector> = $r5;

        return;
    }

    protected void setAutomaticDTDValidator(org.codehaus.stax2.validation.XMLValidator, com.ctc.wstx.sr.NsDefaultProvider)
    {
        com.ctc.wstx.sr.NsInputElementStack r0;
        org.codehaus.stax2.validation.XMLValidator r2;
        com.ctc.wstx.sr.NsDefaultProvider r1;

        r0 := @this: com.ctc.wstx.sr.NsInputElementStack;

        r2 := @parameter0: org.codehaus.stax2.validation.XMLValidator;

        r1 := @parameter1: com.ctc.wstx.sr.NsDefaultProvider;

        r0.<com.ctc.wstx.sr.NsInputElementStack: com.ctc.wstx.sr.NsDefaultProvider mNsDefaultProvider> = r1;

        virtualinvoke r0.<com.ctc.wstx.sr.NsInputElementStack: org.codehaus.stax2.validation.XMLValidator addValidator(org.codehaus.stax2.validation.XMLValidator)>(r2);

        return;
    }

    public final void push(java.lang.String, java.lang.String)
    {
        com.ctc.wstx.sr.NsDefaultProvider $r13, $r14;
        int[] $r9, $r11, $r15, $r16, r22;
        boolean $z0;
        java.lang.String[] $r1, $r3, $r5, $r6, $r8, $r18, $r19, $r20, r21;
        com.ctc.wstx.sr.NsInputElementStack r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14;
        java.lang.String r2, r4, $r7, $r17;
        com.ctc.wstx.sr.NsAttributeCollector $r12;
        com.ctc.wstx.util.StringVector $r10;

        r0 := @this: com.ctc.wstx.sr.NsInputElementStack;

        r2 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        i14 = r0.<com.ctc.wstx.sr.NsInputElementStack: int mSize>;

        $r1 = r0.<com.ctc.wstx.sr.NsInputElementStack: java.lang.String[] mElements>;

        $i0 = lengthof $r1;

        if i14 != $i0 goto label1;

        r21 = r0.<com.ctc.wstx.sr.NsInputElementStack: java.lang.String[] mElements>;

        $i11 = lengthof r21;

        $i12 = $i11 + 64;

        $r19 = newarray (java.lang.String)[$i12];

        r0.<com.ctc.wstx.sr.NsInputElementStack: java.lang.String[] mElements> = $r19;

        $r20 = r0.<com.ctc.wstx.sr.NsInputElementStack: java.lang.String[] mElements>;

        $i13 = lengthof r21;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r21, 0, $r20, 0, $i13);

     label1:
        $r3 = r0.<com.ctc.wstx.sr.NsInputElementStack: java.lang.String[] mElements>;

        $r3[i14] = r2;

        $r5 = r0.<com.ctc.wstx.sr.NsInputElementStack: java.lang.String[] mElements>;

        $i1 = i14 + 1;

        $r5[$i1] = r4;

        if i14 != 0 goto label2;

        $r18 = r0.<com.ctc.wstx.sr.NsInputElementStack: java.lang.String[] mElements>;

        $r17 = <com.ctc.wstx.sr.NsInputElementStack: java.lang.String DEFAULT_NAMESPACE_URI>;

        $r18[3] = $r17;

        goto label3;

     label2:
        $r8 = r0.<com.ctc.wstx.sr.NsInputElementStack: java.lang.String[] mElements>;

        $i3 = i14 + 3;

        $r6 = r0.<com.ctc.wstx.sr.NsInputElementStack: java.lang.String[] mElements>;

        $i2 = i14 - 1;

        $r7 = $r6[$i2];

        $r8[$i3] = $r7;

     label3:
        $i4 = i14 + 4;

        r0.<com.ctc.wstx.sr.NsInputElementStack: int mSize> = $i4;

        $i10 = i14 >> 2;

        $r9 = r0.<com.ctc.wstx.sr.NsInputElementStack: int[] mNsCounts>;

        $i5 = lengthof $r9;

        if $i10 != $i5 goto label4;

        r22 = r0.<com.ctc.wstx.sr.NsInputElementStack: int[] mNsCounts>;

        $i7 = lengthof r22;

        $i8 = $i7 + 16;

        $r15 = newarray (int)[$i8];

        r0.<com.ctc.wstx.sr.NsInputElementStack: int[] mNsCounts> = $r15;

        $r16 = r0.<com.ctc.wstx.sr.NsInputElementStack: int[] mNsCounts>;

        $i9 = lengthof r22;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r22, 0, $r16, 0, $i9);

     label4:
        $r11 = r0.<com.ctc.wstx.sr.NsInputElementStack: int[] mNsCounts>;

        $r10 = r0.<com.ctc.wstx.sr.NsInputElementStack: com.ctc.wstx.util.StringVector mNamespaces>;

        $i6 = virtualinvoke $r10.<com.ctc.wstx.util.StringVector: int size()>();

        $r11[$i10] = $i6;

        $r12 = r0.<com.ctc.wstx.sr.NsInputElementStack: com.ctc.wstx.sr.NsAttributeCollector mAttrCollector>;

        virtualinvoke $r12.<com.ctc.wstx.sr.NsAttributeCollector: void reset()>();

        $r13 = r0.<com.ctc.wstx.sr.NsInputElementStack: com.ctc.wstx.sr.NsDefaultProvider mNsDefaultProvider>;

        if $r13 == null goto label5;

        $r14 = r0.<com.ctc.wstx.sr.NsInputElementStack: com.ctc.wstx.sr.NsDefaultProvider mNsDefaultProvider>;

        $z0 = interfaceinvoke $r14.<com.ctc.wstx.sr.NsDefaultProvider: boolean mayHaveNsDefaults(java.lang.String,java.lang.String)>(r2, r4);

        r0.<com.ctc.wstx.sr.NsInputElementStack: boolean mMayHaveNsDefaults> = $z0;

     label5:
        return;
    }

    public final void push(java.lang.String)
    {
        java.lang.Error $r0;
        com.ctc.wstx.sr.NsInputElementStack r1;
        java.lang.String r2;

        r1 := @this: com.ctc.wstx.sr.NsInputElementStack;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.lang.Error;

        specialinvoke $r0.<java.lang.Error: void <init>(java.lang.String)>("Internal error: push(fullName) shouldn\'t be called for namespace aware element stack.");

        throw $r0;
    }

    public int pop() throws javax.xml.stream.XMLStreamException
    {
        java.lang.IllegalStateException $r17;
        java.lang.String[] $r2, $r3, $r4, $r9, $r10, $r11, $r12;
        com.ctc.wstx.sr.NsInputElementStack r0;
        int[] $r14;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11, i12, $i14;
        java.lang.String $r5, $r6, $r7;
        org.codehaus.stax2.validation.XMLValidator $r1, $r8;
        com.ctc.wstx.util.StringVector $r13, $r15;

        r0 := @this: com.ctc.wstx.sr.NsInputElementStack;

        i10 = r0.<com.ctc.wstx.sr.NsInputElementStack: int mSize>;

        if i10 != 0 goto label1;

        $r17 = new java.lang.IllegalStateException;

        specialinvoke $r17.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Popping from empty stack.");

        throw $r17;

     label1:
        $i14 = (int) -4;

        i11 = i10 + $i14;

        $r1 = r0.<com.ctc.wstx.sr.NsInputElementStack: org.codehaus.stax2.validation.XMLValidator mValidator>;

        if $r1 != null goto label2;

        i12 = 3;

        goto label3;

     label2:
        $r8 = r0.<com.ctc.wstx.sr.NsInputElementStack: org.codehaus.stax2.validation.XMLValidator mValidator>;

        $r2 = r0.<com.ctc.wstx.sr.NsInputElementStack: java.lang.String[] mElements>;

        $i0 = i11 + 1;

        $r7 = $r2[$i0];

        $r3 = r0.<com.ctc.wstx.sr.NsInputElementStack: java.lang.String[] mElements>;

        $i1 = i11 + 2;

        $r6 = $r3[$i1];

        $r4 = r0.<com.ctc.wstx.sr.NsInputElementStack: java.lang.String[] mElements>;

        $i2 = i11 + 0;

        $r5 = $r4[$i2];

        i12 = virtualinvoke $r8.<org.codehaus.stax2.validation.XMLValidator: int validateElementEnd(java.lang.String,java.lang.String,java.lang.String)>($r7, $r6, $r5);

     label3:
        r0.<com.ctc.wstx.sr.NsInputElementStack: int mSize> = i11;

        $r9 = r0.<com.ctc.wstx.sr.NsInputElementStack: java.lang.String[] mElements>;

        $r9[i11] = null;

        $r10 = r0.<com.ctc.wstx.sr.NsInputElementStack: java.lang.String[] mElements>;

        $i3 = i11 + 1;

        $r10[$i3] = null;

        $r11 = r0.<com.ctc.wstx.sr.NsInputElementStack: java.lang.String[] mElements>;

        $i4 = i11 + 2;

        $r11[$i4] = null;

        $r12 = r0.<com.ctc.wstx.sr.NsInputElementStack: java.lang.String[] mElements>;

        $i5 = i11 + 3;

        $r12[$i5] = null;

        $r13 = r0.<com.ctc.wstx.sr.NsInputElementStack: com.ctc.wstx.util.StringVector mNamespaces>;

        $i6 = virtualinvoke $r13.<com.ctc.wstx.util.StringVector: int size()>();

        $r14 = r0.<com.ctc.wstx.sr.NsInputElementStack: int[] mNsCounts>;

        $i7 = i11 >> 2;

        $i8 = $r14[$i7];

        $i9 = $i6 - $i8;

        if $i9 <= 0 goto label4;

        r0.<com.ctc.wstx.sr.NsInputElementStack: com.ctc.wstx.util.BaseNsContext mLastNsContext> = null;

        $r15 = r0.<com.ctc.wstx.sr.NsInputElementStack: com.ctc.wstx.util.StringVector mNamespaces>;

        virtualinvoke $r15.<com.ctc.wstx.util.StringVector: void removeLast(int)>($i9);

     label4:
        return i12;
    }

    public int resolveAndValidateElement() throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.api.ReaderConfig $r26;
        com.ctc.wstx.sr.NsDefaultProvider $r22;
        com.ctc.wstx.sr.InputProblemReporter $r21, $r29, $r31, $r33, $r35, $r38, $r40, $r48;
        com.ctc.wstx.sr.NsInputElementStack r0;
        java.lang.String $r6, $r7, r14, $r16, $r17, $r19, $r20, $r23, $r27, $r28, $r30, $r32, $r34, $r37, $r39, r43, $r44, r46, r51;
        com.ctc.wstx.sr.NsAttributeCollector r1;
        org.codehaus.stax2.validation.XMLValidator $r9, $r15, $r50;
        com.ctc.wstx.util.StringVector $r8, $r18, $r45, $r49;
        char[] $r13;
        java.lang.IllegalStateException $r42;
        boolean $z0, $z1, $z2, $z3, $z4;
        com.ctc.wstx.util.TextBuilder $r12, $r25;
        java.lang.String[] $r2, $r3, $r4, $r5, $r10, $r11, $r24, $r36, $r47;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, i21, $i22, $i23, $i24, i25, i26, i27;
        com.ctc.wstx.util.InternCache $r41;

        r0 := @this: com.ctc.wstx.sr.NsInputElementStack;

        $i0 = r0.<com.ctc.wstx.sr.NsInputElementStack: int mSize>;

        if $i0 != 0 goto label01;

        $r42 = new java.lang.IllegalStateException;

        specialinvoke $r42.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Calling validate() on empty stack.");

        throw $r42;

     label01:
        r1 = r0.<com.ctc.wstx.sr.NsInputElementStack: com.ctc.wstx.sr.NsAttributeCollector mAttrCollector>;

        $i1 = virtualinvoke r1.<com.ctc.wstx.sr.NsAttributeCollector: int getNsCount()>();

        if $i1 <= 0 goto label14;

        r0.<com.ctc.wstx.sr.NsInputElementStack: com.ctc.wstx.util.BaseNsContext mLastNsContext> = null;

        $r24 = virtualinvoke r1.<com.ctc.wstx.sr.NsAttributeCollector: java.lang.String[] getNsPrefixes()>();

        $r25 = virtualinvoke r1.<com.ctc.wstx.sr.NsAttributeCollector: com.ctc.wstx.util.TextBuilder getNsURIs()>();

        $r26 = r0.<com.ctc.wstx.sr.NsInputElementStack: com.ctc.wstx.api.ReaderConfig mConfig>;

        $z1 = virtualinvoke $r26.<com.ctc.wstx.api.ReaderConfig: boolean willInternNsURIs()>();

        i21 = 0;

     label02:
        if i21 >= $i1 goto label14;

        $r27 = virtualinvoke $r25.<com.ctc.wstx.util.TextBuilder: java.lang.String getEntry(int)>(i21);

        r43 = $r27;

        if $z1 == 0 goto label03;

        $i20 = virtualinvoke $r27.<java.lang.String: int length()>();

        if $i20 <= 0 goto label03;

        $r41 = <com.ctc.wstx.sr.NsInputElementStack: com.ctc.wstx.util.InternCache sInternCache>;

        r43 = virtualinvoke $r41.<com.ctc.wstx.util.InternCache: java.lang.String intern(java.lang.String)>($r27);

     label03:
        $r44 = $r24[i21];

        if $r44 != "xmlns" goto label04;

        $r40 = r0.<com.ctc.wstx.sr.NsInputElementStack: com.ctc.wstx.sr.InputProblemReporter mReporter>;

        $r39 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_NS_REDECL_XMLNS>;

        interfaceinvoke $r40.<com.ctc.wstx.sr.InputProblemReporter: void throwParseError(java.lang.String)>($r39);

        goto label13;

     label04:
        if $r44 != "xml" goto label05;

        $z4 = virtualinvoke r43.<java.lang.String: boolean equals(java.lang.Object)>("http://www.w3.org/XML/1998/namespace");

        if $z4 != 0 goto label13;

        $r38 = r0.<com.ctc.wstx.sr.NsInputElementStack: com.ctc.wstx.sr.InputProblemReporter mReporter>;

        $r37 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_NS_REDECL_XML>;

        interfaceinvoke $r38.<com.ctc.wstx.sr.InputProblemReporter: void throwParseError(java.lang.String,java.lang.Object)>($r37, r43);

        goto label13;

     label05:
        if r43 == null goto label06;

        $i19 = virtualinvoke r43.<java.lang.String: int length()>();

        if $i19 != 0 goto label07;

     label06:
        r43 = <com.ctc.wstx.sr.NsInputElementStack: java.lang.String DEFAULT_NAMESPACE_URI>;

     label07:
        if $r44 != null goto label08;

        $r36 = r0.<com.ctc.wstx.sr.NsInputElementStack: java.lang.String[] mElements>;

        $i17 = r0.<com.ctc.wstx.sr.NsInputElementStack: int mSize>;

        $i18 = $i17 - 1;

        $r36[$i18] = r43;

     label08:
        if $z1 == 0 goto label10;

        if r43 != "http://www.w3.org/XML/1998/namespace" goto label09;

        $r35 = r0.<com.ctc.wstx.sr.NsInputElementStack: com.ctc.wstx.sr.InputProblemReporter mReporter>;

        $r34 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_NS_REDECL_XML_URI>;

        interfaceinvoke $r35.<com.ctc.wstx.sr.InputProblemReporter: void throwParseError(java.lang.String,java.lang.Object)>($r34, $r44);

        goto label12;

     label09:
        if r43 != "http://www.w3.org/2000/xmlns/" goto label12;

        $r33 = r0.<com.ctc.wstx.sr.NsInputElementStack: com.ctc.wstx.sr.InputProblemReporter mReporter>;

        $r32 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_NS_REDECL_XMLNS_URI>;

        interfaceinvoke $r33.<com.ctc.wstx.sr.InputProblemReporter: void throwParseError(java.lang.String)>($r32);

        goto label12;

     label10:
        $z2 = virtualinvoke r43.<java.lang.String: boolean equals(java.lang.Object)>("http://www.w3.org/XML/1998/namespace");

        if $z2 == 0 goto label11;

        $r31 = r0.<com.ctc.wstx.sr.NsInputElementStack: com.ctc.wstx.sr.InputProblemReporter mReporter>;

        $r30 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_NS_REDECL_XML_URI>;

        interfaceinvoke $r31.<com.ctc.wstx.sr.InputProblemReporter: void throwParseError(java.lang.String,java.lang.Object)>($r30, $r44);

        goto label12;

     label11:
        $z3 = virtualinvoke r43.<java.lang.String: boolean equals(java.lang.Object)>("http://www.w3.org/2000/xmlns/");

        if $z3 == 0 goto label12;

        $r29 = r0.<com.ctc.wstx.sr.NsInputElementStack: com.ctc.wstx.sr.InputProblemReporter mReporter>;

        $r28 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_NS_REDECL_XMLNS_URI>;

        interfaceinvoke $r29.<com.ctc.wstx.sr.InputProblemReporter: void throwParseError(java.lang.String)>($r28);

     label12:
        $r45 = r0.<com.ctc.wstx.sr.NsInputElementStack: com.ctc.wstx.util.StringVector mNamespaces>;

        virtualinvoke $r45.<com.ctc.wstx.util.StringVector: void addStrings(java.lang.String,java.lang.String)>($r44, r43);

     label13:
        i21 = i21 + 1;

        goto label02;

     label14:
        $z0 = r0.<com.ctc.wstx.sr.NsInputElementStack: boolean mMayHaveNsDefaults>;

        if $z0 == 0 goto label15;

        $r22 = r0.<com.ctc.wstx.sr.NsInputElementStack: com.ctc.wstx.sr.NsDefaultProvider mNsDefaultProvider>;

        interfaceinvoke $r22.<com.ctc.wstx.sr.NsDefaultProvider: void checkNsDefaults(com.ctc.wstx.sr.InputElementStack)>(r0);

     label15:
        $r2 = r0.<com.ctc.wstx.sr.NsInputElementStack: java.lang.String[] mElements>;

        $i2 = r0.<com.ctc.wstx.sr.NsInputElementStack: int mSize>;

        $i3 = $i2 - 4;

        $r23 = $r2[$i3];

        if $r23 == null goto label16;

        $i16 = virtualinvoke $r23.<java.lang.String: int length()>();

        if $i16 != 0 goto label17;

     label16:
        $r3 = r0.<com.ctc.wstx.sr.NsInputElementStack: java.lang.String[] mElements>;

        $i4 = r0.<com.ctc.wstx.sr.NsInputElementStack: int mSize>;

        $i5 = $i4 - 1;

        r46 = $r3[$i5];

        goto label19;

     label17:
        if $r23 != "xml" goto label18;

        r46 = "http://www.w3.org/XML/1998/namespace";

        goto label19;

     label18:
        $r18 = r0.<com.ctc.wstx.sr.NsInputElementStack: com.ctc.wstx.util.StringVector mNamespaces>;

        $r19 = virtualinvoke $r18.<com.ctc.wstx.util.StringVector: java.lang.String findLastFromMap(java.lang.String)>($r23);

        r46 = $r19;

        if $r19 != null goto label19;

        $r21 = r0.<com.ctc.wstx.sr.NsInputElementStack: com.ctc.wstx.sr.InputProblemReporter mReporter>;

        $r20 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_NS_UNDECLARED>;

        interfaceinvoke $r21.<com.ctc.wstx.sr.InputProblemReporter: void throwParseError(java.lang.String,java.lang.Object)>($r20, $r23);

     label19:
        $r47 = r0.<com.ctc.wstx.sr.NsInputElementStack: java.lang.String[] mElements>;

        $i22 = r0.<com.ctc.wstx.sr.NsInputElementStack: int mSize>;

        $i23 = $i22 - 2;

        $r47[$i23] = r46;

        $r48 = r0.<com.ctc.wstx.sr.NsInputElementStack: com.ctc.wstx.sr.InputProblemReporter mReporter>;

        $r49 = r0.<com.ctc.wstx.sr.NsInputElementStack: com.ctc.wstx.util.StringVector mNamespaces>;

        $i24 = virtualinvoke r1.<com.ctc.wstx.sr.NsAttributeCollector: int resolveNamespaces(com.ctc.wstx.sr.InputProblemReporter,com.ctc.wstx.util.StringVector)>($r48, $r49);

        r0.<com.ctc.wstx.sr.NsInputElementStack: int mIdAttrIndex> = $i24;

        $r50 = r0.<com.ctc.wstx.sr.NsInputElementStack: org.codehaus.stax2.validation.XMLValidator mValidator>;

        if $r50 != null goto label21;

        if $i24 < 0 goto label20;

        virtualinvoke r0.<com.ctc.wstx.sr.NsInputElementStack: void normalizeXmlIdAttr(com.ctc.wstx.sr.AttributeCollector,int)>(r1, $i24);

     label20:
        return 3;

     label21:
        $r4 = r0.<com.ctc.wstx.sr.NsInputElementStack: java.lang.String[] mElements>;

        $i6 = r0.<com.ctc.wstx.sr.NsInputElementStack: int mSize>;

        $i7 = $i6 - 3;

        $r7 = $r4[$i7];

        $r5 = r0.<com.ctc.wstx.sr.NsInputElementStack: java.lang.String[] mElements>;

        $i8 = r0.<com.ctc.wstx.sr.NsInputElementStack: int mSize>;

        $i9 = $i8 - 2;

        $r6 = $r5[$i9];

        virtualinvoke $r50.<org.codehaus.stax2.validation.XMLValidator: void validateElementStart(java.lang.String,java.lang.String,java.lang.String)>($r7, $r6, $r23);

        $r8 = virtualinvoke r1.<com.ctc.wstx.sr.NsAttributeCollector: com.ctc.wstx.util.StringVector getNameList()>();

        $i10 = virtualinvoke r1.<com.ctc.wstx.sr.NsAttributeCollector: int getCount()>();

        if $i10 <= 0 goto label24;

        i25 = $i10 + $i10;

        $r10 = virtualinvoke r1.<com.ctc.wstx.sr.NsAttributeCollector: java.lang.String[] getAttrURIs()>();

        $r11 = virtualinvoke $r8.<com.ctc.wstx.util.StringVector: java.lang.String[] getInternalArray()>();

        $r12 = virtualinvoke r1.<com.ctc.wstx.sr.NsAttributeCollector: com.ctc.wstx.util.TextBuilder getAttrBuilder()>();

        $r13 = virtualinvoke $r12.<com.ctc.wstx.util.TextBuilder: char[] getCharBuffer()>();

        i26 = 0;

        i27 = 0;

     label22:
        if i26 >= i25 goto label24;

        r51 = $r11[i26];

        $i12 = i26 + 1;

        r14 = $r11[$i12];

        $r15 = r0.<com.ctc.wstx.sr.NsInputElementStack: org.codehaus.stax2.validation.XMLValidator mValidator>;

        $r16 = $r10[i27];

        $i13 = virtualinvoke $r12.<com.ctc.wstx.util.TextBuilder: int getOffset(int)>(i27);

        $i14 = i27 + 1;

        $i15 = virtualinvoke $r12.<com.ctc.wstx.util.TextBuilder: int getOffset(int)>($i14);

        $r17 = virtualinvoke $r15.<org.codehaus.stax2.validation.XMLValidator: java.lang.String validateAttribute(java.lang.String,java.lang.String,java.lang.String,char[],int,int)>(r14, $r16, r51, $r13, $i13, $i15);

        if $r17 == null goto label23;

        virtualinvoke r1.<com.ctc.wstx.sr.NsAttributeCollector: void setNormalizedValue(int,java.lang.String)>(i27, $r17);

     label23:
        i26 = i26 + 2;

        i27 = i27 + 1;

        goto label22;

     label24:
        $r9 = r0.<com.ctc.wstx.sr.NsInputElementStack: org.codehaus.stax2.validation.XMLValidator mValidator>;

        $i11 = virtualinvoke $r9.<org.codehaus.stax2.validation.XMLValidator: int validateElementAndAttributes()>();

        return $i11;
    }

    public final boolean isNamespaceAware()
    {
        com.ctc.wstx.sr.NsInputElementStack r0;

        r0 := @this: com.ctc.wstx.sr.NsInputElementStack;

        return 1;
    }

    public final int getDepth()
    {
        int $i0, $i1;
        com.ctc.wstx.sr.NsInputElementStack r0;

        r0 := @this: com.ctc.wstx.sr.NsInputElementStack;

        $i0 = r0.<com.ctc.wstx.sr.NsInputElementStack: int mSize>;

        $i1 = $i0 >> 2;

        return $i1;
    }

    public final com.ctc.wstx.sr.AttributeCollector getAttrCollector()
    {
        com.ctc.wstx.sr.NsInputElementStack r0;
        com.ctc.wstx.sr.NsAttributeCollector $r1;

        r0 := @this: com.ctc.wstx.sr.NsInputElementStack;

        $r1 = r0.<com.ctc.wstx.sr.NsInputElementStack: com.ctc.wstx.sr.NsAttributeCollector mAttrCollector>;

        return $r1;
    }

    public final com.ctc.wstx.util.BaseNsContext createNonTransientNsContext(javax.xml.stream.Location)
    {
        com.ctc.wstx.util.EmptyNamespaceContext $r8;
        com.ctc.wstx.sr.CompactNsContext $r3;
        java.lang.String[] $r7;
        com.ctc.wstx.sr.NsInputElementStack r0;
        com.ctc.wstx.util.StringVector $r2, $r6;
        javax.xml.stream.Location r4;
        int $i0, $i1, i2, $i3;
        java.lang.String $r5;
        com.ctc.wstx.util.BaseNsContext $r1, $r9;

        r0 := @this: com.ctc.wstx.sr.NsInputElementStack;

        r4 := @parameter0: javax.xml.stream.Location;

        $r1 = r0.<com.ctc.wstx.sr.NsInputElementStack: com.ctc.wstx.util.BaseNsContext mLastNsContext>;

        if $r1 == null goto label1;

        $r9 = r0.<com.ctc.wstx.sr.NsInputElementStack: com.ctc.wstx.util.BaseNsContext mLastNsContext>;

        return $r9;

     label1:
        $r2 = r0.<com.ctc.wstx.sr.NsInputElementStack: com.ctc.wstx.util.StringVector mNamespaces>;

        $i0 = virtualinvoke $r2.<com.ctc.wstx.util.StringVector: int size()>();

        if $i0 >= 1 goto label2;

        $r8 = staticinvoke <com.ctc.wstx.util.EmptyNamespaceContext: com.ctc.wstx.util.EmptyNamespaceContext getInstance()>();

        r0.<com.ctc.wstx.sr.NsInputElementStack: com.ctc.wstx.util.BaseNsContext mLastNsContext> = $r8;

        return $r8;

     label2:
        $i1 = virtualinvoke r0.<com.ctc.wstx.sr.NsInputElementStack: int getCurrentNsCount()>();

        i2 = $i1 << 1;

        $r3 = new com.ctc.wstx.sr.CompactNsContext;

        $r5 = virtualinvoke r0.<com.ctc.wstx.sr.NsInputElementStack: java.lang.String getDefaultNsURI()>();

        $r6 = r0.<com.ctc.wstx.sr.NsInputElementStack: com.ctc.wstx.util.StringVector mNamespaces>;

        $r7 = virtualinvoke $r6.<com.ctc.wstx.util.StringVector: java.lang.String[] asArray()>();

        $i3 = $i0 - i2;

        specialinvoke $r3.<com.ctc.wstx.sr.CompactNsContext: void <init>(javax.xml.stream.Location,java.lang.String,java.lang.String[],int,int)>(r4, $r5, $r7, $i0, $i3);

        if i2 != 0 goto label3;

        r0.<com.ctc.wstx.sr.NsInputElementStack: com.ctc.wstx.util.BaseNsContext mLastNsContext> = $r3;

     label3:
        return $r3;
    }

    public final java.lang.String getNamespaceURI(java.lang.String)
    {
        java.lang.String[] $r4;
        java.lang.IllegalArgumentException $r6;
        com.ctc.wstx.sr.NsInputElementStack r1;
        com.ctc.wstx.util.StringVector $r2;
        int $i0, $i1, $i2, $i3;
        java.lang.String r0, $r3, $r5, $r7;
        boolean $z0, $z1;

        r1 := @this: com.ctc.wstx.sr.NsInputElementStack;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_NULL_ARG>;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r6;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label3;

        $i1 = r1.<com.ctc.wstx.sr.NsInputElementStack: int mSize>;

        if $i1 != 0 goto label2;

        return null;

     label2:
        $r4 = r1.<com.ctc.wstx.sr.NsInputElementStack: java.lang.String[] mElements>;

        $i2 = r1.<com.ctc.wstx.sr.NsInputElementStack: int mSize>;

        $i3 = $i2 - 1;

        $r5 = $r4[$i3];

        return $r5;

     label3:
        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("xml");

        if $z0 == 0 goto label4;

        return "http://www.w3.org/XML/1998/namespace";

     label4:
        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("xmlns");

        if $z1 == 0 goto label5;

        return "http://www.w3.org/2000/xmlns/";

     label5:
        $r2 = r1.<com.ctc.wstx.sr.NsInputElementStack: com.ctc.wstx.util.StringVector mNamespaces>;

        $r3 = virtualinvoke $r2.<com.ctc.wstx.util.StringVector: java.lang.String findLastNonInterned(java.lang.String)>(r0);

        return $r3;
    }

    public final java.lang.String getPrefix(java.lang.String)
    {
        java.lang.String[] $r4;
        com.ctc.wstx.sr.NsInputElementStack r2;
        int $i0, $i1, $i2, i3, i4, $i6;
        java.lang.String r0, $r6, $r7, r8;
        boolean $z0, $z1, $z2;
        java.lang.IllegalArgumentException $r9;
        com.ctc.wstx.util.StringVector $r3, $r5;

        r2 := @this: com.ctc.wstx.sr.NsInputElementStack;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label01;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label02;

     label01:
        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal to pass null/empty prefix as argument.");

        throw $r9;

     label02:
        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("http://www.w3.org/XML/1998/namespace");

        if $z0 == 0 goto label03;

        return "xml";

     label03:
        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("http://www.w3.org/2000/xmlns/");

        if $z1 == 0 goto label04;

        return "xmlns";

     label04:
        r8 = null;

        $r3 = r2.<com.ctc.wstx.sr.NsInputElementStack: com.ctc.wstx.util.StringVector mNamespaces>;

        $r4 = virtualinvoke $r3.<com.ctc.wstx.util.StringVector: java.lang.String[] getInternalArray()>();

        $r5 = r2.<com.ctc.wstx.sr.NsInputElementStack: com.ctc.wstx.util.StringVector mNamespaces>;

        $i1 = virtualinvoke $r5.<com.ctc.wstx.util.StringVector: int size()>();

        i3 = $i1 - 1;

     label05:
        if i3 <= 0 goto label10;

        $r6 = $r4[i3];

        $z2 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z2 == 0 goto label09;

        $i2 = i3 - 1;

        r8 = $r4[$i2];

        i4 = i3 + 1;

     label06:
        if i4 >= $i1 goto label08;

        $r7 = $r4[i4];

        if $r7 != r8 goto label07;

        r8 = null;

        goto label09;

     label07:
        i4 = i4 + 2;

        goto label06;

     label08:
        if r8 != null goto label10;

        r8 = "";

        goto label10;

     label09:
        $i6 = (int) -2;

        i3 = i3 + $i6;

        goto label05;

     label10:
        return r8;
    }

    public final java.util.Iterator getPrefixes(java.lang.String)
    {
        com.ctc.wstx.util.SingletonIterator $r15, $r16;
        java.lang.String[] $r4;
        java.util.ArrayList r12, $r17;
        com.ctc.wstx.sr.NsInputElementStack r2;
        int $i0, $i1, $i2, i3, i4, $i6;
        java.lang.String r0, $r6, r7, $r9;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r13;
        java.lang.IllegalArgumentException $r14;
        com.ctc.wstx.util.StringVector $r3, $r5;

        r2 := @this: com.ctc.wstx.sr.NsInputElementStack;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label01;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label02;

     label01:
        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal to pass null/empty prefix as argument.");

        throw $r14;

     label02:
        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("http://www.w3.org/XML/1998/namespace");

        if $z0 == 0 goto label03;

        $r15 = new com.ctc.wstx.util.SingletonIterator;

        specialinvoke $r15.<com.ctc.wstx.util.SingletonIterator: void <init>(java.lang.Object)>("xml");

        return $r15;

     label03:
        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("http://www.w3.org/2000/xmlns/");

        if $z1 == 0 goto label04;

        $r16 = new com.ctc.wstx.util.SingletonIterator;

        specialinvoke $r16.<com.ctc.wstx.util.SingletonIterator: void <init>(java.lang.Object)>("xmlns");

        return $r16;

     label04:
        $r3 = r2.<com.ctc.wstx.sr.NsInputElementStack: com.ctc.wstx.util.StringVector mNamespaces>;

        $r4 = virtualinvoke $r3.<com.ctc.wstx.util.StringVector: java.lang.String[] getInternalArray()>();

        $r5 = r2.<com.ctc.wstx.sr.NsInputElementStack: com.ctc.wstx.util.StringVector mNamespaces>;

        $i1 = virtualinvoke $r5.<com.ctc.wstx.util.StringVector: int size()>();

        r12 = null;

        i3 = $i1 - 1;

     label05:
        if i3 <= 0 goto label11;

        $r6 = $r4[i3];

        $z2 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z2 == 0 goto label10;

        $i2 = i3 - 1;

        r7 = $r4[$i2];

        i4 = i3 + 1;

     label06:
        if i4 >= $i1 goto label08;

        $r9 = $r4[i4];

        if $r9 != r7 goto label07;

        goto label10;

     label07:
        i4 = i4 + 2;

        goto label06;

     label08:
        if r12 != null goto label09;

        $r17 = new java.util.ArrayList;

        specialinvoke $r17.<java.util.ArrayList: void <init>()>();

        r12 = $r17;

     label09:
        virtualinvoke r12.<java.util.ArrayList: boolean add(java.lang.Object)>(r7);

     label10:
        $i6 = (int) -2;

        i3 = i3 + $i6;

        goto label05;

     label11:
        if r12 != null goto label12;

        $r13 = staticinvoke <com.ctc.wstx.util.EmptyIterator: com.ctc.wstx.util.EmptyIterator getInstance()>();

        goto label13;

     label12:
        $r13 = virtualinvoke r12.<java.util.ArrayList: java.util.Iterator iterator()>();

     label13:
        return $r13;
    }

    public final int getAttributeCount()
    {
        int $i0;
        com.ctc.wstx.sr.NsInputElementStack r0;
        com.ctc.wstx.sr.NsAttributeCollector $r1;

        r0 := @this: com.ctc.wstx.sr.NsInputElementStack;

        $r1 = r0.<com.ctc.wstx.sr.NsInputElementStack: com.ctc.wstx.sr.NsAttributeCollector mAttrCollector>;

        $i0 = virtualinvoke $r1.<com.ctc.wstx.sr.NsAttributeCollector: int getCount()>();

        return $i0;
    }

    public final int findAttributeIndex(java.lang.String, java.lang.String)
    {
        com.ctc.wstx.sr.NsInputElementStack r0;
        com.ctc.wstx.sr.NsAttributeCollector $r3;
        int $i0;
        java.lang.String r1, r2;

        r0 := @this: com.ctc.wstx.sr.NsInputElementStack;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<com.ctc.wstx.sr.NsInputElementStack: com.ctc.wstx.sr.NsAttributeCollector mAttrCollector>;

        $i0 = virtualinvoke $r3.<com.ctc.wstx.sr.NsAttributeCollector: int findIndex(java.lang.String,java.lang.String)>(r1, r2);

        return $i0;
    }

    public final javax.xml.namespace.QName getCurrentElementName()
    {
        java.lang.String[] $r1, $r2, $r3;
        com.ctc.wstx.sr.NsInputElementStack r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.String $r4, $r5, $r6, $r8, $r9, r10;
        javax.xml.namespace.QName $r7, $r11;

        r0 := @this: com.ctc.wstx.sr.NsInputElementStack;

        $i0 = r0.<com.ctc.wstx.sr.NsInputElementStack: int mSize>;

        if $i0 != 0 goto label1;

        return null;

     label1:
        $r1 = r0.<com.ctc.wstx.sr.NsInputElementStack: java.lang.String[] mElements>;

        $i1 = r0.<com.ctc.wstx.sr.NsInputElementStack: int mSize>;

        $i2 = $i1 - 4;

        r10 = $r1[$i2];

        if r10 != null goto label2;

        r10 = "";

     label2:
        $r2 = r0.<com.ctc.wstx.sr.NsInputElementStack: java.lang.String[] mElements>;

        $i3 = r0.<com.ctc.wstx.sr.NsInputElementStack: int mSize>;

        $i4 = $i3 - 2;

        $r8 = $r2[$i4];

        $r3 = r0.<com.ctc.wstx.sr.NsInputElementStack: java.lang.String[] mElements>;

        $i5 = r0.<com.ctc.wstx.sr.NsInputElementStack: int mSize>;

        $i6 = $i5 - 3;

        $r9 = $r3[$i6];

        $r4 = r0.<com.ctc.wstx.sr.NsInputElementStack: java.lang.String mLastLocalName>;

        if $r9 == $r4 goto label3;

        r0.<com.ctc.wstx.sr.NsInputElementStack: java.lang.String mLastLocalName> = $r9;

        r0.<com.ctc.wstx.sr.NsInputElementStack: java.lang.String mLastPrefix> = r10;

        r0.<com.ctc.wstx.sr.NsInputElementStack: java.lang.String mLastNsURI> = $r8;

        goto label6;

     label3:
        $r5 = r0.<com.ctc.wstx.sr.NsInputElementStack: java.lang.String mLastPrefix>;

        if r10 == $r5 goto label4;

        r0.<com.ctc.wstx.sr.NsInputElementStack: java.lang.String mLastPrefix> = r10;

        r0.<com.ctc.wstx.sr.NsInputElementStack: java.lang.String mLastNsURI> = $r8;

        goto label6;

     label4:
        $r6 = r0.<com.ctc.wstx.sr.NsInputElementStack: java.lang.String mLastNsURI>;

        if $r8 == $r6 goto label5;

        r0.<com.ctc.wstx.sr.NsInputElementStack: java.lang.String mLastNsURI> = $r8;

        goto label6;

     label5:
        $r7 = r0.<com.ctc.wstx.sr.NsInputElementStack: javax.xml.namespace.QName mLastName>;

        return $r7;

     label6:
        $r11 = new javax.xml.namespace.QName;

        specialinvoke $r11.<javax.xml.namespace.QName: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r8, $r9, r10);

        r0.<com.ctc.wstx.sr.NsInputElementStack: javax.xml.namespace.QName mLastName> = $r11;

        return $r11;
    }

    public int addDefaultAttribute(java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        com.ctc.wstx.sr.NsInputElementStack r0;
        com.ctc.wstx.sr.NsAttributeCollector $r5;
        int $i0;
        java.lang.String r1, r2, r3, r4;

        r0 := @this: com.ctc.wstx.sr.NsInputElementStack;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        $r5 = r0.<com.ctc.wstx.sr.NsInputElementStack: com.ctc.wstx.sr.NsAttributeCollector mAttrCollector>;

        $i0 = virtualinvoke $r5.<com.ctc.wstx.sr.NsAttributeCollector: int addDefaultAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3, r4);

        return $i0;
    }

    public boolean isPrefixLocallyDeclared(java.lang.String)
    {
        com.ctc.wstx.sr.NsInputElementStack r0;
        com.ctc.wstx.util.StringVector $r1, $r5;
        int[] $r4;
        int $i0, $i1, $i2, $i3, i4, $i5;
        java.lang.String $r2, r3;

        r0 := @this: com.ctc.wstx.sr.NsInputElementStack;

        r3 := @parameter0: java.lang.String;

        if r3 == null goto label1;

        $i0 = virtualinvoke r3.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        r3 = null;

     label1:
        $r4 = r0.<com.ctc.wstx.sr.NsInputElementStack: int[] mNsCounts>;

        $i1 = r0.<com.ctc.wstx.sr.NsInputElementStack: int mSize>;

        $i2 = $i1 - 1;

        $i3 = $i2 >> 2;

        i4 = $r4[$i3];

        $r5 = r0.<com.ctc.wstx.sr.NsInputElementStack: com.ctc.wstx.util.StringVector mNamespaces>;

        $i5 = virtualinvoke $r5.<com.ctc.wstx.util.StringVector: int size()>();

     label2:
        if i4 >= $i5 goto label4;

        $r1 = r0.<com.ctc.wstx.sr.NsInputElementStack: com.ctc.wstx.util.StringVector mNamespaces>;

        $r2 = virtualinvoke $r1.<com.ctc.wstx.util.StringVector: java.lang.String getString(int)>(i4);

        if $r2 != r3 goto label3;

        return 1;

     label3:
        i4 = i4 + 2;

        goto label2;

     label4:
        return 0;
    }

    public void addNsBinding(java.lang.String, java.lang.String)
    {
        java.lang.String[] $r1;
        com.ctc.wstx.sr.NsInputElementStack r0;
        com.ctc.wstx.util.StringVector $r4;
        int $i0, $i1, $i2, $i3;
        java.lang.String r2, r3;

        r0 := @this: com.ctc.wstx.sr.NsInputElementStack;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        if r3 == null goto label1;

        $i3 = virtualinvoke r3.<java.lang.String: int length()>();

        if $i3 != 0 goto label2;

     label1:
        r3 = null;

     label2:
        if r2 == null goto label3;

        $i2 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i2 != 0 goto label4;

     label3:
        r2 = null;

        $r1 = r0.<com.ctc.wstx.sr.NsInputElementStack: java.lang.String[] mElements>;

        $i0 = r0.<com.ctc.wstx.sr.NsInputElementStack: int mSize>;

        $i1 = $i0 - 1;

        $r1[$i1] = r3;

     label4:
        $r4 = r0.<com.ctc.wstx.sr.NsInputElementStack: com.ctc.wstx.util.StringVector mNamespaces>;

        virtualinvoke $r4.<com.ctc.wstx.util.StringVector: void addStrings(java.lang.String,java.lang.String)>(r2, r3);

        return;
    }

    public final boolean isEmpty()
    {
        int $i0;
        com.ctc.wstx.sr.NsInputElementStack r0;
        boolean $z0;

        r0 := @this: com.ctc.wstx.sr.NsInputElementStack;

        $i0 = r0.<com.ctc.wstx.sr.NsInputElementStack: int mSize>;

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final java.lang.String getDefaultNsURI()
    {
        java.lang.IllegalStateException $r3;
        com.ctc.wstx.sr.NsInputElementStack r0;
        int $i0, $i1, $i2;
        java.lang.String[] $r1;
        java.lang.String $r2;

        r0 := @this: com.ctc.wstx.sr.NsInputElementStack;

        $i0 = r0.<com.ctc.wstx.sr.NsInputElementStack: int mSize>;

        if $i0 != 0 goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Illegal access, empty stack.");

        throw $r3;

     label1:
        $r1 = r0.<com.ctc.wstx.sr.NsInputElementStack: java.lang.String[] mElements>;

        $i1 = r0.<com.ctc.wstx.sr.NsInputElementStack: int mSize>;

        $i2 = $i1 - 1;

        $r2 = $r1[$i2];

        return $r2;
    }

    public final java.lang.String getNsURI()
    {
        java.lang.IllegalStateException $r3;
        com.ctc.wstx.sr.NsInputElementStack r0;
        int $i0, $i1, $i2;
        java.lang.String[] $r1;
        java.lang.String $r2;

        r0 := @this: com.ctc.wstx.sr.NsInputElementStack;

        $i0 = r0.<com.ctc.wstx.sr.NsInputElementStack: int mSize>;

        if $i0 != 0 goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Illegal access, empty stack.");

        throw $r3;

     label1:
        $r1 = r0.<com.ctc.wstx.sr.NsInputElementStack: java.lang.String[] mElements>;

        $i1 = r0.<com.ctc.wstx.sr.NsInputElementStack: int mSize>;

        $i2 = $i1 - 2;

        $r2 = $r1[$i2];

        return $r2;
    }

    public final java.lang.String getPrefix()
    {
        java.lang.IllegalStateException $r3;
        com.ctc.wstx.sr.NsInputElementStack r0;
        int $i0, $i1, $i2;
        java.lang.String[] $r1;
        java.lang.String $r2;

        r0 := @this: com.ctc.wstx.sr.NsInputElementStack;

        $i0 = r0.<com.ctc.wstx.sr.NsInputElementStack: int mSize>;

        if $i0 != 0 goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Illegal access, empty stack.");

        throw $r3;

     label1:
        $r1 = r0.<com.ctc.wstx.sr.NsInputElementStack: java.lang.String[] mElements>;

        $i1 = r0.<com.ctc.wstx.sr.NsInputElementStack: int mSize>;

        $i2 = $i1 - 4;

        $r2 = $r1[$i2];

        return $r2;
    }

    public final java.lang.String getLocalName()
    {
        java.lang.IllegalStateException $r3;
        com.ctc.wstx.sr.NsInputElementStack r0;
        int $i0, $i1, $i2;
        java.lang.String[] $r1;
        java.lang.String $r2;

        r0 := @this: com.ctc.wstx.sr.NsInputElementStack;

        $i0 = r0.<com.ctc.wstx.sr.NsInputElementStack: int mSize>;

        if $i0 != 0 goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Illegal access, empty stack.");

        throw $r3;

     label1:
        $r1 = r0.<com.ctc.wstx.sr.NsInputElementStack: java.lang.String[] mElements>;

        $i1 = r0.<com.ctc.wstx.sr.NsInputElementStack: int mSize>;

        $i2 = $i1 - 3;

        $r2 = $r1[$i2];

        return $r2;
    }

    public final boolean matches(java.lang.String, java.lang.String)
    {
        java.lang.IllegalStateException $r5;
        java.lang.String[] $r1, $r6;
        com.ctc.wstx.sr.NsInputElementStack r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.String r2, r3, r4, $r7;
        boolean $z0, $z1, $z2;

        r0 := @this: com.ctc.wstx.sr.NsInputElementStack;

        r3 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        $i0 = r0.<com.ctc.wstx.sr.NsInputElementStack: int mSize>;

        if $i0 != 0 goto label1;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Illegal access, empty stack.");

        throw $r5;

     label1:
        $r1 = r0.<com.ctc.wstx.sr.NsInputElementStack: java.lang.String[] mElements>;

        $i1 = r0.<com.ctc.wstx.sr.NsInputElementStack: int mSize>;

        $i2 = $i1 - 4;

        r2 = $r1[$i2];

        if r3 == null goto label2;

        $i4 = virtualinvoke r3.<java.lang.String: int length()>();

        if $i4 != 0 goto label3;

     label2:
        if r2 == null goto label4;

        $i3 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i3 <= 0 goto label4;

        return 0;

     label3:
        if r2 == r3 goto label4;

        $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z1 != 0 goto label4;

        return 0;

     label4:
        $r6 = r0.<com.ctc.wstx.sr.NsInputElementStack: java.lang.String[] mElements>;

        $i5 = r0.<com.ctc.wstx.sr.NsInputElementStack: int mSize>;

        $i6 = $i5 - 3;

        $r7 = $r6[$i6];

        if $r7 == r4 goto label5;

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z0 == 0 goto label6;

     label5:
        $z2 = 1;

        goto label7;

     label6:
        $z2 = 0;

     label7:
        return $z2;
    }

    public final java.lang.String getTopElementDesc()
    {
        java.lang.IllegalStateException $r10;
        java.lang.String[] $r1, $r3;
        com.ctc.wstx.sr.NsInputElementStack r0;
        java.lang.StringBuffer $r5, $r6, $r7, $r8;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String r2, r4, $r9;

        r0 := @this: com.ctc.wstx.sr.NsInputElementStack;

        $i0 = r0.<com.ctc.wstx.sr.NsInputElementStack: int mSize>;

        if $i0 != 0 goto label1;

        $r10 = new java.lang.IllegalStateException;

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Illegal access, empty stack.");

        throw $r10;

     label1:
        $r1 = r0.<com.ctc.wstx.sr.NsInputElementStack: java.lang.String[] mElements>;

        $i1 = r0.<com.ctc.wstx.sr.NsInputElementStack: int mSize>;

        $i2 = $i1 - 3;

        r2 = $r1[$i2];

        $r3 = r0.<com.ctc.wstx.sr.NsInputElementStack: java.lang.String[] mElements>;

        $i3 = r0.<com.ctc.wstx.sr.NsInputElementStack: int mSize>;

        $i4 = $i3 - 4;

        r4 = $r3[$i4];

        if r4 == null goto label2;

        $i5 = virtualinvoke r4.<java.lang.String: int length()>();

        if $i5 != 0 goto label3;

     label2:
        return r2;

     label3:
        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r9;
    }

    public final int getTotalNsCount()
    {
        com.ctc.wstx.sr.NsInputElementStack r0;
        com.ctc.wstx.util.StringVector $r1;
        int $i0, $i1;

        r0 := @this: com.ctc.wstx.sr.NsInputElementStack;

        $r1 = r0.<com.ctc.wstx.sr.NsInputElementStack: com.ctc.wstx.util.StringVector mNamespaces>;

        $i0 = virtualinvoke $r1.<com.ctc.wstx.util.StringVector: int size()>();

        $i1 = $i0 >> 1;

        return $i1;
    }

    public final int getCurrentNsCount()
    {
        com.ctc.wstx.sr.NsInputElementStack r0;
        com.ctc.wstx.util.StringVector $r1;
        int[] $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;

        r0 := @this: com.ctc.wstx.sr.NsInputElementStack;

        $r1 = r0.<com.ctc.wstx.sr.NsInputElementStack: com.ctc.wstx.util.StringVector mNamespaces>;

        $i0 = virtualinvoke $r1.<com.ctc.wstx.util.StringVector: int size()>();

        $r2 = r0.<com.ctc.wstx.sr.NsInputElementStack: int[] mNsCounts>;

        $i1 = r0.<com.ctc.wstx.sr.NsInputElementStack: int mSize>;

        $i2 = $i1 - 1;

        $i3 = $i2 >> 2;

        $i4 = $r2[$i3];

        $i5 = $i0 - $i4;

        $i6 = $i5 >> 1;

        return $i6;
    }

    public final java.lang.String getLocalNsPrefix(int)
    {
        com.ctc.wstx.sr.NsInputElementStack r0;
        int[] $r1;
        int $i0, $i1, $i2, i3, $i4, i5, $i6, $i7, i8, i9, $i10;
        java.lang.String $r4;
        com.ctc.wstx.util.StringVector $r2, $r3;

        r0 := @this: com.ctc.wstx.sr.NsInputElementStack;

        i8 := @parameter0: int;

        $r1 = r0.<com.ctc.wstx.sr.NsInputElementStack: int[] mNsCounts>;

        $i0 = r0.<com.ctc.wstx.sr.NsInputElementStack: int mSize>;

        $i1 = $i0 - 1;

        $i2 = $i1 >> 2;

        i3 = $r1[$i2];

        $r2 = r0.<com.ctc.wstx.sr.NsInputElementStack: com.ctc.wstx.util.StringVector mNamespaces>;

        $i4 = virtualinvoke $r2.<com.ctc.wstx.util.StringVector: int size()>();

        i5 = $i4 - i3;

        i9 = i8 << 1;

        if i9 < 0 goto label1;

        if i9 < i5 goto label2;

     label1:
        $i7 = i9 >> 1;

        $i6 = i5 >> 1;

        specialinvoke r0.<com.ctc.wstx.sr.NsInputElementStack: void throwIllegalIndex(int,int)>($i7, $i6);

     label2:
        $r3 = r0.<com.ctc.wstx.sr.NsInputElementStack: com.ctc.wstx.util.StringVector mNamespaces>;

        $i10 = i3 + i9;

        $r4 = virtualinvoke $r3.<com.ctc.wstx.util.StringVector: java.lang.String getString(int)>($i10);

        return $r4;
    }

    public final java.lang.String getLocalNsURI(int)
    {
        com.ctc.wstx.sr.NsInputElementStack r0;
        int[] $r1;
        int $i0, $i1, $i2, i3, $i4, i5, $i6, $i7, i8, i9, $i10, $i11;
        java.lang.String $r4;
        com.ctc.wstx.util.StringVector $r2, $r3;

        r0 := @this: com.ctc.wstx.sr.NsInputElementStack;

        i8 := @parameter0: int;

        $r1 = r0.<com.ctc.wstx.sr.NsInputElementStack: int[] mNsCounts>;

        $i0 = r0.<com.ctc.wstx.sr.NsInputElementStack: int mSize>;

        $i1 = $i0 - 1;

        $i2 = $i1 >> 2;

        i3 = $r1[$i2];

        $r2 = r0.<com.ctc.wstx.sr.NsInputElementStack: com.ctc.wstx.util.StringVector mNamespaces>;

        $i4 = virtualinvoke $r2.<com.ctc.wstx.util.StringVector: int size()>();

        i5 = $i4 - i3;

        i9 = i8 << 1;

        if i9 < 0 goto label1;

        if i9 < i5 goto label2;

     label1:
        $i7 = i9 >> 1;

        $i6 = i5 >> 1;

        specialinvoke r0.<com.ctc.wstx.sr.NsInputElementStack: void throwIllegalIndex(int,int)>($i7, $i6);

     label2:
        $r3 = r0.<com.ctc.wstx.sr.NsInputElementStack: com.ctc.wstx.util.StringVector mNamespaces>;

        $i10 = i3 + i9;

        $i11 = $i10 + 1;

        $r4 = virtualinvoke $r3.<com.ctc.wstx.util.StringVector: java.lang.String getString(int)>($i11);

        return $r4;
    }

    private void throwIllegalIndex(int, int)
    {
        java.lang.IllegalArgumentException $r0;
        com.ctc.wstx.sr.NsInputElementStack r8;
        java.lang.StringBuffer $r1, $r2, $r3, $r4, $r5, $r6;
        int i0, $i1, i2, $i3;
        java.lang.String $r7;

        r8 := @this: com.ctc.wstx.sr.NsInputElementStack;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Illegal namespace index ");

        $i1 = i0 >> 1;

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("; current scope only has ");

        $i3 = i2 >> 1;

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i3);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" namespace declarations.");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r0;
    }

    static void <clinit>()
    {
        com.ctc.wstx.util.InternCache $r0;

        <com.ctc.wstx.sr.NsInputElementStack: int ENTRY_SIZE> = 4;

        <com.ctc.wstx.sr.NsInputElementStack: int IX_DEFAULT_NS> = 3;

        <com.ctc.wstx.sr.NsInputElementStack: int IX_URI> = 2;

        <com.ctc.wstx.sr.NsInputElementStack: int IX_LOCALNAME> = 1;

        <com.ctc.wstx.sr.NsInputElementStack: int IX_PREFIX> = 0;

        <com.ctc.wstx.sr.NsInputElementStack: java.lang.String DEFAULT_NAMESPACE_URI> = null;

        $r0 = staticinvoke <com.ctc.wstx.util.InternCache: com.ctc.wstx.util.InternCache getInstance()>();

        <com.ctc.wstx.sr.NsInputElementStack: com.ctc.wstx.util.InternCache sInternCache> = $r0;

        return;
    }
}
