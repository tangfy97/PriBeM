public class org.hamcrest.core.CombinableMatcher extends org.hamcrest.TypeSafeDiagnosingMatcher
{
    private final org.hamcrest.Matcher matcher;

    public void <init>(org.hamcrest.Matcher)
    {
        org.hamcrest.core.CombinableMatcher r0;
        org.hamcrest.Matcher r1;

        r0 := @this: org.hamcrest.core.CombinableMatcher;

        r1 := @parameter0: org.hamcrest.Matcher;

        specialinvoke r0.<org.hamcrest.TypeSafeDiagnosingMatcher: void <init>()>();

        r0.<org.hamcrest.core.CombinableMatcher: org.hamcrest.Matcher matcher> = r1;

        return;
    }

    protected boolean matchesSafely(java.lang.Object, org.hamcrest.Description)
    {
        org.hamcrest.Description r3;
        org.hamcrest.Matcher $r2, $r4;
        java.lang.Object r1;
        org.hamcrest.core.CombinableMatcher r0;
        boolean $z0;

        r0 := @this: org.hamcrest.core.CombinableMatcher;

        r1 := @parameter0: java.lang.Object;

        r3 := @parameter1: org.hamcrest.Description;

        $r2 = r0.<org.hamcrest.core.CombinableMatcher: org.hamcrest.Matcher matcher>;

        $z0 = interfaceinvoke $r2.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r4 = r0.<org.hamcrest.core.CombinableMatcher: org.hamcrest.Matcher matcher>;

        interfaceinvoke $r4.<org.hamcrest.Matcher: void describeMismatch(java.lang.Object,org.hamcrest.Description)>(r1, r3);

        return 0;

     label1:
        return 1;
    }

    public void describeTo(org.hamcrest.Description)
    {
        org.hamcrest.Description r0;
        org.hamcrest.core.CombinableMatcher r1;
        org.hamcrest.Matcher $r2;

        r1 := @this: org.hamcrest.core.CombinableMatcher;

        r0 := @parameter0: org.hamcrest.Description;

        $r2 = r1.<org.hamcrest.core.CombinableMatcher: org.hamcrest.Matcher matcher>;

        interfaceinvoke r0.<org.hamcrest.Description: org.hamcrest.Description appendDescriptionOf(org.hamcrest.SelfDescribing)>($r2);

        return;
    }

    public org.hamcrest.core.CombinableMatcher and(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r3;
        org.hamcrest.core.CombinableMatcher $r0, r2;
        org.hamcrest.core.AllOf $r1;
        java.util.ArrayList $r4;

        r2 := @this: org.hamcrest.core.CombinableMatcher;

        r3 := @parameter0: org.hamcrest.Matcher;

        $r0 = new org.hamcrest.core.CombinableMatcher;

        $r1 = new org.hamcrest.core.AllOf;

        $r4 = specialinvoke r2.<org.hamcrest.core.CombinableMatcher: java.util.ArrayList templatedListWith(org.hamcrest.Matcher)>(r3);

        specialinvoke $r1.<org.hamcrest.core.AllOf: void <init>(java.lang.Iterable)>($r4);

        specialinvoke $r0.<org.hamcrest.core.CombinableMatcher: void <init>(org.hamcrest.Matcher)>($r1);

        return $r0;
    }

    public org.hamcrest.core.CombinableMatcher or(org.hamcrest.Matcher)
    {
        org.hamcrest.core.AnyOf $r1;
        org.hamcrest.Matcher r3;
        org.hamcrest.core.CombinableMatcher $r0, r2;
        java.util.ArrayList $r4;

        r2 := @this: org.hamcrest.core.CombinableMatcher;

        r3 := @parameter0: org.hamcrest.Matcher;

        $r0 = new org.hamcrest.core.CombinableMatcher;

        $r1 = new org.hamcrest.core.AnyOf;

        $r4 = specialinvoke r2.<org.hamcrest.core.CombinableMatcher: java.util.ArrayList templatedListWith(org.hamcrest.Matcher)>(r3);

        specialinvoke $r1.<org.hamcrest.core.AnyOf: void <init>(java.lang.Iterable)>($r4);

        specialinvoke $r0.<org.hamcrest.core.CombinableMatcher: void <init>(org.hamcrest.Matcher)>($r1);

        return $r0;
    }

    private java.util.ArrayList templatedListWith(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher $r2, r3;
        org.hamcrest.core.CombinableMatcher r1;
        java.util.ArrayList $r0;

        r1 := @this: org.hamcrest.core.CombinableMatcher;

        r3 := @parameter0: org.hamcrest.Matcher;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = r1.<org.hamcrest.core.CombinableMatcher: org.hamcrest.Matcher matcher>;

        virtualinvoke $r0.<java.util.ArrayList: boolean add(java.lang.Object)>($r2);

        virtualinvoke $r0.<java.util.ArrayList: boolean add(java.lang.Object)>(r3);

        return $r0;
    }

    public static org.hamcrest.core.CombinableMatcher$CombinableBothMatcher both(org.hamcrest.Matcher)
    {
        org.hamcrest.core.CombinableMatcher$CombinableBothMatcher $r0;
        org.hamcrest.Matcher r1;

        r1 := @parameter0: org.hamcrest.Matcher;

        $r0 = new org.hamcrest.core.CombinableMatcher$CombinableBothMatcher;

        specialinvoke $r0.<org.hamcrest.core.CombinableMatcher$CombinableBothMatcher: void <init>(org.hamcrest.Matcher)>(r1);

        return $r0;
    }

    public static org.hamcrest.core.CombinableMatcher$CombinableEitherMatcher either(org.hamcrest.Matcher)
    {
        org.hamcrest.core.CombinableMatcher$CombinableEitherMatcher $r0;
        org.hamcrest.Matcher r1;

        r1 := @parameter0: org.hamcrest.Matcher;

        $r0 = new org.hamcrest.core.CombinableMatcher$CombinableEitherMatcher;

        specialinvoke $r0.<org.hamcrest.core.CombinableMatcher$CombinableEitherMatcher: void <init>(org.hamcrest.Matcher)>(r1);

        return $r0;
    }
}
