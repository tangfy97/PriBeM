public abstract class org.springframework.beans.factory.'annotation'.InjectionMetadata$InjectedElement extends java.lang.Object
{
    protected final java.lang.reflect.Member member;
    protected final boolean isField;
    protected final java.beans.PropertyDescriptor pd;
    protected volatile java.lang.Boolean skip;

    protected void <init>(java.lang.reflect.Member, java.beans.PropertyDescriptor)
    {
        org.springframework.beans.factory.'annotation'.InjectionMetadata$InjectedElement r0;
        java.beans.PropertyDescriptor r2;
        java.lang.reflect.Member r1;
        boolean $z0;

        r0 := @this: org.springframework.beans.factory.'annotation'.InjectionMetadata$InjectedElement;

        r1 := @parameter0: java.lang.reflect.Member;

        r2 := @parameter1: java.beans.PropertyDescriptor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.springframework.beans.factory.'annotation'.InjectionMetadata$InjectedElement: java.lang.reflect.Member member> = r1;

        $z0 = r1 instanceof java.lang.reflect.Field;

        r0.<org.springframework.beans.factory.'annotation'.InjectionMetadata$InjectedElement: boolean isField> = $z0;

        r0.<org.springframework.beans.factory.'annotation'.InjectionMetadata$InjectedElement: java.beans.PropertyDescriptor pd> = r2;

        return;
    }

    public final java.lang.reflect.Member getMember()
    {
        org.springframework.beans.factory.'annotation'.InjectionMetadata$InjectedElement r0;
        java.lang.reflect.Member $r1;

        r0 := @this: org.springframework.beans.factory.'annotation'.InjectionMetadata$InjectedElement;

        $r1 = r0.<org.springframework.beans.factory.'annotation'.InjectionMetadata$InjectedElement: java.lang.reflect.Member member>;

        return $r1;
    }

    protected final java.lang.Class getResourceType()
    {
        org.springframework.beans.factory.'annotation'.InjectionMetadata$InjectedElement r0;
        java.lang.reflect.Member $r2, $r8;
        java.lang.Class[] $r4;
        java.lang.reflect.Field $r9;
        java.beans.PropertyDescriptor $r1, $r6;
        java.lang.Class $r5, $r7, $r10;
        java.lang.reflect.Method $r3;
        boolean $z0;

        r0 := @this: org.springframework.beans.factory.'annotation'.InjectionMetadata$InjectedElement;

        $z0 = r0.<org.springframework.beans.factory.'annotation'.InjectionMetadata$InjectedElement: boolean isField>;

        if $z0 == 0 goto label1;

        $r8 = r0.<org.springframework.beans.factory.'annotation'.InjectionMetadata$InjectedElement: java.lang.reflect.Member member>;

        $r9 = (java.lang.reflect.Field) $r8;

        $r10 = virtualinvoke $r9.<java.lang.reflect.Field: java.lang.Class getType()>();

        return $r10;

     label1:
        $r1 = r0.<org.springframework.beans.factory.'annotation'.InjectionMetadata$InjectedElement: java.beans.PropertyDescriptor pd>;

        if $r1 == null goto label2;

        $r6 = r0.<org.springframework.beans.factory.'annotation'.InjectionMetadata$InjectedElement: java.beans.PropertyDescriptor pd>;

        $r7 = virtualinvoke $r6.<java.beans.PropertyDescriptor: java.lang.Class getPropertyType()>();

        return $r7;

     label2:
        $r2 = r0.<org.springframework.beans.factory.'annotation'.InjectionMetadata$InjectedElement: java.lang.reflect.Member member>;

        $r3 = (java.lang.reflect.Method) $r2;

        $r4 = virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $r5 = $r4[0];

        return $r5;
    }

    protected final void checkResourceType(java.lang.Class)
    {
        java.lang.IllegalStateException $r6, $r18;
        java.lang.reflect.Method $r3;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.reflect.Member $r2, $r15;
        java.beans.PropertyDescriptor $r1, $r14;
        java.lang.StringBuilder $r7, $r8, $r9, $r11, $r12, $r19, $r20, $r21, $r23, $r24;
        java.lang.String $r10, $r13, $r22, $r25;
        org.springframework.beans.factory.'annotation'.InjectionMetadata$InjectedElement r0;
        java.lang.Class[] $r4;
        java.lang.reflect.Field $r16;
        java.lang.Class r5, $r17, $r26;

        r0 := @this: org.springframework.beans.factory.'annotation'.InjectionMetadata$InjectedElement;

        r5 := @parameter0: java.lang.Class;

        $z0 = r0.<org.springframework.beans.factory.'annotation'.InjectionMetadata$InjectedElement: boolean isField>;

        if $z0 == 0 goto label1;

        $r15 = r0.<org.springframework.beans.factory.'annotation'.InjectionMetadata$InjectedElement: java.lang.reflect.Member member>;

        $r16 = (java.lang.reflect.Field) $r15;

        $r17 = virtualinvoke $r16.<java.lang.reflect.Field: java.lang.Class getType()>();

        $z3 = virtualinvoke r5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r17);

        if $z3 != 0 goto label4;

        $z4 = virtualinvoke $r17.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r5);

        if $z4 != 0 goto label4;

        $r18 = new java.lang.IllegalStateException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>(java.lang.String)>("Specified field type [");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r17);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] is incompatible with resource type [");

        $r22 = virtualinvoke r5.<java.lang.Class: java.lang.String getName()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r25);

        throw $r18;

     label1:
        $r1 = r0.<org.springframework.beans.factory.'annotation'.InjectionMetadata$InjectedElement: java.beans.PropertyDescriptor pd>;

        if $r1 == null goto label2;

        $r14 = r0.<org.springframework.beans.factory.'annotation'.InjectionMetadata$InjectedElement: java.beans.PropertyDescriptor pd>;

        $r26 = virtualinvoke $r14.<java.beans.PropertyDescriptor: java.lang.Class getPropertyType()>();

        goto label3;

     label2:
        $r2 = r0.<org.springframework.beans.factory.'annotation'.InjectionMetadata$InjectedElement: java.lang.reflect.Member member>;

        $r3 = (java.lang.reflect.Method) $r2;

        $r4 = virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $r26 = $r4[0];

     label3:
        $z1 = virtualinvoke r5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r26);

        if $z1 != 0 goto label4;

        $z2 = virtualinvoke $r26.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r5);

        if $z2 != 0 goto label4;

        $r6 = new java.lang.IllegalStateException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("Specified parameter type [");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r26);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] is incompatible with resource type [");

        $r10 = virtualinvoke r5.<java.lang.Class: java.lang.String getName()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r13);

        throw $r6;

     label4:
        return;
    }

    protected void inject(java.lang.Object, java.lang.String, org.springframework.beans.PropertyValues) throws java.lang.Throwable
    {
        java.lang.Throwable $r10;
        org.springframework.beans.factory.'annotation'.InjectionMetadata$InjectedElement r0;
        java.lang.Object[] $r4;
        java.lang.reflect.Member $r2, $r7;
        java.lang.reflect.Field r11;
        java.lang.reflect.InvocationTargetException $r9;
        java.lang.Object r3, $r6, $r8;
        java.lang.String r5;
        org.springframework.beans.PropertyValues r1;
        java.lang.reflect.Method r12;
        boolean $z0, $z1;

        r0 := @this: org.springframework.beans.factory.'annotation'.InjectionMetadata$InjectedElement;

        r3 := @parameter0: java.lang.Object;

        r5 := @parameter1: java.lang.String;

        r1 := @parameter2: org.springframework.beans.PropertyValues;

        $z0 = r0.<org.springframework.beans.factory.'annotation'.InjectionMetadata$InjectedElement: boolean isField>;

        if $z0 == 0 goto label1;

        $r7 = r0.<org.springframework.beans.factory.'annotation'.InjectionMetadata$InjectedElement: java.lang.reflect.Member member>;

        r11 = (java.lang.reflect.Field) $r7;

        staticinvoke <org.springframework.util.ReflectionUtils: void makeAccessible(java.lang.reflect.Field)>(r11);

        $r8 = virtualinvoke r0.<org.springframework.beans.factory.'annotation'.InjectionMetadata$InjectedElement: java.lang.Object getResourceToInject(java.lang.Object,java.lang.String)>(r3, r5);

        virtualinvoke r11.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(r3, $r8);

        goto label5;

     label1:
        $z1 = virtualinvoke r0.<org.springframework.beans.factory.'annotation'.InjectionMetadata$InjectedElement: boolean checkPropertySkipping(org.springframework.beans.PropertyValues)>(r1);

        if $z1 == 0 goto label2;

        return;

     label2:
        $r2 = r0.<org.springframework.beans.factory.'annotation'.InjectionMetadata$InjectedElement: java.lang.reflect.Member member>;

        r12 = (java.lang.reflect.Method) $r2;

        staticinvoke <org.springframework.util.ReflectionUtils: void makeAccessible(java.lang.reflect.Method)>(r12);

        $r4 = newarray (java.lang.Object)[1];

        $r6 = virtualinvoke r0.<org.springframework.beans.factory.'annotation'.InjectionMetadata$InjectedElement: java.lang.Object getResourceToInject(java.lang.Object,java.lang.String)>(r3, r5);

        $r4[0] = $r6;

        virtualinvoke r12.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r3, $r4);

     label3:
        goto label5;

     label4:
        $r9 := @caughtexception;

        $r10 = virtualinvoke $r9.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        throw $r10;

     label5:
        return;

        catch java.lang.reflect.InvocationTargetException from label2 to label3 with label4;
    }

    protected boolean checkPropertySkipping(org.springframework.beans.PropertyValues)
    {
        java.lang.Throwable $r12;
        java.lang.Boolean $r1, $r3, $r4, $r11, $r13;
        java.lang.String $r7, $r10;
        boolean $z0, $z1, $z2;
        org.springframework.beans.factory.'annotation'.InjectionMetadata$InjectedElement r0;
        org.springframework.beans.MutablePropertyValues $r9;
        java.beans.PropertyDescriptor $r5, $r6, $r8;
        org.springframework.beans.PropertyValues r2;

        r0 := @this: org.springframework.beans.factory.'annotation'.InjectionMetadata$InjectedElement;

        r2 := @parameter0: org.springframework.beans.PropertyValues;

        $r1 = r0.<org.springframework.beans.factory.'annotation'.InjectionMetadata$InjectedElement: java.lang.Boolean skip>;

        if $r1 != null goto label9;

        if r2 == null goto label8;

        entermonitor r2;

     label1:
        $r4 = r0.<org.springframework.beans.factory.'annotation'.InjectionMetadata$InjectedElement: java.lang.Boolean skip>;

        if $r4 != null goto label4;

        $r5 = r0.<org.springframework.beans.factory.'annotation'.InjectionMetadata$InjectedElement: java.beans.PropertyDescriptor pd>;

        if $r5 == null goto label4;

        $r6 = r0.<org.springframework.beans.factory.'annotation'.InjectionMetadata$InjectedElement: java.beans.PropertyDescriptor pd>;

        $r7 = virtualinvoke $r6.<java.beans.PropertyDescriptor: java.lang.String getName()>();

        $z0 = interfaceinvoke r2.<org.springframework.beans.PropertyValues: boolean contains(java.lang.String)>($r7);

        if $z0 == 0 goto label3;

        $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        r0.<org.springframework.beans.factory.'annotation'.InjectionMetadata$InjectedElement: java.lang.Boolean skip> = $r11;

        exitmonitor r2;

     label2:
        return 1;

     label3:
        $z1 = r2 instanceof org.springframework.beans.MutablePropertyValues;

        if $z1 == 0 goto label4;

        $r9 = (org.springframework.beans.MutablePropertyValues) r2;

        $r8 = r0.<org.springframework.beans.factory.'annotation'.InjectionMetadata$InjectedElement: java.beans.PropertyDescriptor pd>;

        $r10 = virtualinvoke $r8.<java.beans.PropertyDescriptor: java.lang.String getName()>();

        virtualinvoke $r9.<org.springframework.beans.MutablePropertyValues: void registerProcessedProperty(java.lang.String)>($r10);

     label4:
        exitmonitor r2;

     label5:
        goto label8;

     label6:
        $r12 := @caughtexception;

        exitmonitor r2;

     label7:
        throw $r12;

     label8:
        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        r0.<org.springframework.beans.factory.'annotation'.InjectionMetadata$InjectedElement: java.lang.Boolean skip> = $r3;

     label9:
        $r13 = r0.<org.springframework.beans.factory.'annotation'.InjectionMetadata$InjectedElement: java.lang.Boolean skip>;

        $z2 = virtualinvoke $r13.<java.lang.Boolean: boolean booleanValue()>();

        return $z2;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    protected java.lang.Object getResourceToInject(java.lang.Object, java.lang.String)
    {
        org.springframework.beans.factory.'annotation'.InjectionMetadata$InjectedElement r0;
        java.lang.Object r1;
        java.lang.String r2;

        r0 := @this: org.springframework.beans.factory.'annotation'.InjectionMetadata$InjectedElement;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        return null;
    }

    public boolean equals(java.lang.Object)
    {
        org.springframework.beans.factory.'annotation'.InjectionMetadata$InjectedElement r0, r2;
        java.lang.reflect.Member $r3, $r4;
        java.lang.Object r1;
        boolean $z0, $z1;

        r0 := @this: org.springframework.beans.factory.'annotation'.InjectionMetadata$InjectedElement;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.springframework.beans.factory.'annotation'.InjectionMetadata$InjectedElement;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (org.springframework.beans.factory.'annotation'.InjectionMetadata$InjectedElement) r1;

        $r4 = r0.<org.springframework.beans.factory.'annotation'.InjectionMetadata$InjectedElement: java.lang.reflect.Member member>;

        $r3 = r2.<org.springframework.beans.factory.'annotation'.InjectionMetadata$InjectedElement: java.lang.reflect.Member member>;

        $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        return $z1;
    }

    public int hashCode()
    {
        org.springframework.beans.factory.'annotation'.InjectionMetadata$InjectedElement r0;
        java.lang.reflect.Member $r1, $r3;
        int $i0, $i1, $i2, $i3;
        java.lang.Class $r2;
        java.lang.String $r4;

        r0 := @this: org.springframework.beans.factory.'annotation'.InjectionMetadata$InjectedElement;

        $r1 = r0.<org.springframework.beans.factory.'annotation'.InjectionMetadata$InjectedElement: java.lang.reflect.Member member>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $i0 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        $i1 = $i0 * 29;

        $r3 = r0.<org.springframework.beans.factory.'annotation'.InjectionMetadata$InjectedElement: java.lang.reflect.Member member>;

        $r4 = interfaceinvoke $r3.<java.lang.reflect.Member: java.lang.String getName()>();

        $i2 = virtualinvoke $r4.<java.lang.String: int hashCode()>();

        $i3 = $i1 + $i2;

        return $i3;
    }

    public java.lang.String toString()
    {
        org.springframework.beans.factory.'annotation'.InjectionMetadata$InjectedElement r1;
        java.lang.reflect.Member $r6;
        java.lang.StringBuilder $r0, $r5, $r7;
        java.lang.Class $r2;
        java.lang.String $r3, $r4, $r8;

        r1 := @this: org.springframework.beans.factory.'annotation'.InjectionMetadata$InjectedElement;

        $r0 = new java.lang.StringBuilder;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getSimpleName()>();

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>($r4);

        $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for ");

        $r6 = r1.<org.springframework.beans.factory.'annotation'.InjectionMetadata$InjectedElement: java.lang.reflect.Member member>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }
}
