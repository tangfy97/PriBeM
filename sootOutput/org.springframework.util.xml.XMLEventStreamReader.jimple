class org.springframework.util.xml.XMLEventStreamReader extends org.springframework.util.xml.AbstractXMLStreamReader
{
    private javax.xml.stream.events.XMLEvent event;
    private final javax.xml.stream.XMLEventReader eventReader;

    void <init>(javax.xml.stream.XMLEventReader) throws javax.xml.stream.XMLStreamException
    {
        org.springframework.util.xml.XMLEventStreamReader r0;
        javax.xml.stream.XMLEventReader r1;
        javax.xml.stream.events.XMLEvent $r2;

        r0 := @this: org.springframework.util.xml.XMLEventStreamReader;

        r1 := @parameter0: javax.xml.stream.XMLEventReader;

        specialinvoke r0.<org.springframework.util.xml.AbstractXMLStreamReader: void <init>()>();

        r0.<org.springframework.util.xml.XMLEventStreamReader: javax.xml.stream.XMLEventReader eventReader> = r1;

        $r2 = interfaceinvoke r1.<javax.xml.stream.XMLEventReader: javax.xml.stream.events.XMLEvent nextEvent()>();

        r0.<org.springframework.util.xml.XMLEventStreamReader: javax.xml.stream.events.XMLEvent event> = $r2;

        return;
    }

    public boolean isStandalone()
    {
        java.lang.IllegalStateException $r2;
        javax.xml.stream.events.XMLEvent $r1, $r3;
        javax.xml.stream.events.StartDocument $r4;
        org.springframework.util.xml.XMLEventStreamReader r0;
        boolean $z0, $z1;

        r0 := @this: org.springframework.util.xml.XMLEventStreamReader;

        $r1 = r0.<org.springframework.util.xml.XMLEventStreamReader: javax.xml.stream.events.XMLEvent event>;

        $z0 = interfaceinvoke $r1.<javax.xml.stream.events.XMLEvent: boolean isStartDocument()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<org.springframework.util.xml.XMLEventStreamReader: javax.xml.stream.events.XMLEvent event>;

        $r4 = (javax.xml.stream.events.StartDocument) $r3;

        $z1 = interfaceinvoke $r4.<javax.xml.stream.events.StartDocument: boolean isStandalone()>();

        return $z1;

     label1:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>()>();

        throw $r2;
    }

    public java.lang.String getVersion()
    {
        javax.xml.stream.events.XMLEvent $r1, $r2;
        javax.xml.stream.events.StartDocument $r3;
        org.springframework.util.xml.XMLEventStreamReader r0;
        java.lang.String $r4;
        boolean $z0;

        r0 := @this: org.springframework.util.xml.XMLEventStreamReader;

        $r1 = r0.<org.springframework.util.xml.XMLEventStreamReader: javax.xml.stream.events.XMLEvent event>;

        $z0 = interfaceinvoke $r1.<javax.xml.stream.events.XMLEvent: boolean isStartDocument()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<org.springframework.util.xml.XMLEventStreamReader: javax.xml.stream.events.XMLEvent event>;

        $r3 = (javax.xml.stream.events.StartDocument) $r2;

        $r4 = interfaceinvoke $r3.<javax.xml.stream.events.StartDocument: java.lang.String getVersion()>();

        return $r4;

     label1:
        return null;
    }

    public int getTextStart()
    {
        org.springframework.util.xml.XMLEventStreamReader r0;

        r0 := @this: org.springframework.util.xml.XMLEventStreamReader;

        return 0;
    }

    public java.lang.String getText()
    {
        java.lang.IllegalStateException $r2;
        javax.xml.stream.events.XMLEvent $r1, $r3;
        javax.xml.stream.events.Characters $r4;
        org.springframework.util.xml.XMLEventStreamReader r0;
        java.lang.String $r5;
        boolean $z0;

        r0 := @this: org.springframework.util.xml.XMLEventStreamReader;

        $r1 = r0.<org.springframework.util.xml.XMLEventStreamReader: javax.xml.stream.events.XMLEvent event>;

        $z0 = interfaceinvoke $r1.<javax.xml.stream.events.XMLEvent: boolean isCharacters()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<org.springframework.util.xml.XMLEventStreamReader: javax.xml.stream.events.XMLEvent event>;

        $r4 = interfaceinvoke $r3.<javax.xml.stream.events.XMLEvent: javax.xml.stream.events.Characters asCharacters()>();

        $r5 = interfaceinvoke $r4.<javax.xml.stream.events.Characters: java.lang.String getData()>();

        return $r5;

     label1:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>()>();

        throw $r2;
    }

    public java.lang.String getPITarget()
    {
        java.lang.IllegalStateException $r2;
        javax.xml.stream.events.ProcessingInstruction $r4;
        javax.xml.stream.events.XMLEvent $r1, $r3;
        org.springframework.util.xml.XMLEventStreamReader r0;
        java.lang.String $r5;
        boolean $z0;

        r0 := @this: org.springframework.util.xml.XMLEventStreamReader;

        $r1 = r0.<org.springframework.util.xml.XMLEventStreamReader: javax.xml.stream.events.XMLEvent event>;

        $z0 = interfaceinvoke $r1.<javax.xml.stream.events.XMLEvent: boolean isProcessingInstruction()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<org.springframework.util.xml.XMLEventStreamReader: javax.xml.stream.events.XMLEvent event>;

        $r4 = (javax.xml.stream.events.ProcessingInstruction) $r3;

        $r5 = interfaceinvoke $r4.<javax.xml.stream.events.ProcessingInstruction: java.lang.String getTarget()>();

        return $r5;

     label1:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>()>();

        throw $r2;
    }

    public java.lang.String getPIData()
    {
        java.lang.IllegalStateException $r2;
        javax.xml.stream.events.ProcessingInstruction $r4;
        javax.xml.stream.events.XMLEvent $r1, $r3;
        org.springframework.util.xml.XMLEventStreamReader r0;
        java.lang.String $r5;
        boolean $z0;

        r0 := @this: org.springframework.util.xml.XMLEventStreamReader;

        $r1 = r0.<org.springframework.util.xml.XMLEventStreamReader: javax.xml.stream.events.XMLEvent event>;

        $z0 = interfaceinvoke $r1.<javax.xml.stream.events.XMLEvent: boolean isProcessingInstruction()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<org.springframework.util.xml.XMLEventStreamReader: javax.xml.stream.events.XMLEvent event>;

        $r4 = (javax.xml.stream.events.ProcessingInstruction) $r3;

        $r5 = interfaceinvoke $r4.<javax.xml.stream.events.ProcessingInstruction: java.lang.String getData()>();

        return $r5;

     label1:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>()>();

        throw $r2;
    }

    public int getNamespaceCount()
    {
        java.lang.IllegalStateException $r3;
        java.util.Iterator r8;
        javax.xml.stream.events.XMLEvent $r1, $r2, $r4, $r6;
        int $i0;
        org.springframework.util.xml.XMLEventStreamReader r0;
        javax.xml.stream.events.EndElement $r5;
        javax.xml.stream.events.StartElement $r7;
        boolean $z0, $z1;

        r0 := @this: org.springframework.util.xml.XMLEventStreamReader;

        $r1 = r0.<org.springframework.util.xml.XMLEventStreamReader: javax.xml.stream.events.XMLEvent event>;

        $z0 = interfaceinvoke $r1.<javax.xml.stream.events.XMLEvent: boolean isStartElement()>();

        if $z0 == 0 goto label1;

        $r6 = r0.<org.springframework.util.xml.XMLEventStreamReader: javax.xml.stream.events.XMLEvent event>;

        $r7 = interfaceinvoke $r6.<javax.xml.stream.events.XMLEvent: javax.xml.stream.events.StartElement asStartElement()>();

        r8 = interfaceinvoke $r7.<javax.xml.stream.events.StartElement: java.util.Iterator getNamespaces()>();

        goto label3;

     label1:
        $r2 = r0.<org.springframework.util.xml.XMLEventStreamReader: javax.xml.stream.events.XMLEvent event>;

        $z1 = interfaceinvoke $r2.<javax.xml.stream.events.XMLEvent: boolean isEndElement()>();

        if $z1 == 0 goto label2;

        $r4 = r0.<org.springframework.util.xml.XMLEventStreamReader: javax.xml.stream.events.XMLEvent event>;

        $r5 = interfaceinvoke $r4.<javax.xml.stream.events.XMLEvent: javax.xml.stream.events.EndElement asEndElement()>();

        r8 = interfaceinvoke $r5.<javax.xml.stream.events.EndElement: java.util.Iterator getNamespaces()>();

        goto label3;

     label2:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>()>();

        throw $r3;

     label3:
        $i0 = specialinvoke r0.<org.springframework.util.xml.XMLEventStreamReader: int countIterator(java.util.Iterator)>(r8);

        return $i0;
    }

    public javax.xml.namespace.NamespaceContext getNamespaceContext()
    {
        java.lang.IllegalStateException $r2;
        javax.xml.stream.events.XMLEvent $r1, $r3;
        org.springframework.util.xml.XMLEventStreamReader r0;
        javax.xml.namespace.NamespaceContext $r5;
        javax.xml.stream.events.StartElement $r4;
        boolean $z0;

        r0 := @this: org.springframework.util.xml.XMLEventStreamReader;

        $r1 = r0.<org.springframework.util.xml.XMLEventStreamReader: javax.xml.stream.events.XMLEvent event>;

        $z0 = interfaceinvoke $r1.<javax.xml.stream.events.XMLEvent: boolean isStartElement()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<org.springframework.util.xml.XMLEventStreamReader: javax.xml.stream.events.XMLEvent event>;

        $r4 = interfaceinvoke $r3.<javax.xml.stream.events.XMLEvent: javax.xml.stream.events.StartElement asStartElement()>();

        $r5 = interfaceinvoke $r4.<javax.xml.stream.events.StartElement: javax.xml.namespace.NamespaceContext getNamespaceContext()>();

        return $r5;

     label1:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>()>();

        throw $r2;
    }

    public javax.xml.namespace.QName getName()
    {
        java.lang.IllegalStateException $r3;
        javax.xml.stream.events.XMLEvent $r1, $r2, $r4, $r7;
        org.springframework.util.xml.XMLEventStreamReader r0;
        javax.xml.stream.events.EndElement $r5;
        javax.xml.namespace.QName $r6, $r9;
        javax.xml.stream.events.StartElement $r8;
        boolean $z0, $z1;

        r0 := @this: org.springframework.util.xml.XMLEventStreamReader;

        $r1 = r0.<org.springframework.util.xml.XMLEventStreamReader: javax.xml.stream.events.XMLEvent event>;

        $z0 = interfaceinvoke $r1.<javax.xml.stream.events.XMLEvent: boolean isStartElement()>();

        if $z0 == 0 goto label1;

        $r7 = r0.<org.springframework.util.xml.XMLEventStreamReader: javax.xml.stream.events.XMLEvent event>;

        $r8 = interfaceinvoke $r7.<javax.xml.stream.events.XMLEvent: javax.xml.stream.events.StartElement asStartElement()>();

        $r9 = interfaceinvoke $r8.<javax.xml.stream.events.StartElement: javax.xml.namespace.QName getName()>();

        return $r9;

     label1:
        $r2 = r0.<org.springframework.util.xml.XMLEventStreamReader: javax.xml.stream.events.XMLEvent event>;

        $z1 = interfaceinvoke $r2.<javax.xml.stream.events.XMLEvent: boolean isEndElement()>();

        if $z1 == 0 goto label2;

        $r4 = r0.<org.springframework.util.xml.XMLEventStreamReader: javax.xml.stream.events.XMLEvent event>;

        $r5 = interfaceinvoke $r4.<javax.xml.stream.events.XMLEvent: javax.xml.stream.events.EndElement asEndElement()>();

        $r6 = interfaceinvoke $r5.<javax.xml.stream.events.EndElement: javax.xml.namespace.QName getName()>();

        return $r6;

     label2:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>()>();

        throw $r3;
    }

    public javax.xml.stream.Location getLocation()
    {
        org.springframework.util.xml.XMLEventStreamReader r0;
        javax.xml.stream.events.XMLEvent $r1;
        javax.xml.stream.Location $r2;

        r0 := @this: org.springframework.util.xml.XMLEventStreamReader;

        $r1 = r0.<org.springframework.util.xml.XMLEventStreamReader: javax.xml.stream.events.XMLEvent event>;

        $r2 = interfaceinvoke $r1.<javax.xml.stream.events.XMLEvent: javax.xml.stream.Location getLocation()>();

        return $r2;
    }

    public int getEventType()
    {
        int $i0;
        org.springframework.util.xml.XMLEventStreamReader r0;
        javax.xml.stream.events.XMLEvent $r1;

        r0 := @this: org.springframework.util.xml.XMLEventStreamReader;

        $r1 = r0.<org.springframework.util.xml.XMLEventStreamReader: javax.xml.stream.events.XMLEvent event>;

        $i0 = interfaceinvoke $r1.<javax.xml.stream.events.XMLEvent: int getEventType()>();

        return $i0;
    }

    public java.lang.String getEncoding()
    {
        org.springframework.util.xml.XMLEventStreamReader r0;

        r0 := @this: org.springframework.util.xml.XMLEventStreamReader;

        return null;
    }

    public java.lang.String getCharacterEncodingScheme()
    {
        org.springframework.util.xml.XMLEventStreamReader r0;

        r0 := @this: org.springframework.util.xml.XMLEventStreamReader;

        return null;
    }

    public int getAttributeCount()
    {
        java.lang.IllegalStateException $r5;
        java.util.Iterator $r4;
        javax.xml.stream.events.XMLEvent $r1, $r2;
        int $i0;
        org.springframework.util.xml.XMLEventStreamReader r0;
        javax.xml.stream.events.StartElement $r3;
        boolean $z0;

        r0 := @this: org.springframework.util.xml.XMLEventStreamReader;

        $r1 = r0.<org.springframework.util.xml.XMLEventStreamReader: javax.xml.stream.events.XMLEvent event>;

        $z0 = interfaceinvoke $r1.<javax.xml.stream.events.XMLEvent: boolean isStartElement()>();

        if $z0 != 0 goto label1;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>()>();

        throw $r5;

     label1:
        $r2 = r0.<org.springframework.util.xml.XMLEventStreamReader: javax.xml.stream.events.XMLEvent event>;

        $r3 = interfaceinvoke $r2.<javax.xml.stream.events.XMLEvent: javax.xml.stream.events.StartElement asStartElement()>();

        $r4 = interfaceinvoke $r3.<javax.xml.stream.events.StartElement: java.util.Iterator getAttributes()>();

        $i0 = specialinvoke r0.<org.springframework.util.xml.XMLEventStreamReader: int countIterator(java.util.Iterator)>($r4);

        return $i0;
    }

    public void close() throws javax.xml.stream.XMLStreamException
    {
        org.springframework.util.xml.XMLEventStreamReader r0;
        javax.xml.stream.XMLEventReader $r1;

        r0 := @this: org.springframework.util.xml.XMLEventStreamReader;

        $r1 = r0.<org.springframework.util.xml.XMLEventStreamReader: javax.xml.stream.XMLEventReader eventReader>;

        interfaceinvoke $r1.<javax.xml.stream.XMLEventReader: void close()>();

        return;
    }

    public javax.xml.namespace.QName getAttributeName(int)
    {
        javax.xml.stream.events.Attribute $r1;
        int i0;
        org.springframework.util.xml.XMLEventStreamReader r0;
        javax.xml.namespace.QName $r2;

        r0 := @this: org.springframework.util.xml.XMLEventStreamReader;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<org.springframework.util.xml.XMLEventStreamReader: javax.xml.stream.events.Attribute getAttribute(int)>(i0);

        $r2 = interfaceinvoke $r1.<javax.xml.stream.events.Attribute: javax.xml.namespace.QName getName()>();

        return $r2;
    }

    public java.lang.String getAttributeType(int)
    {
        javax.xml.stream.events.Attribute $r1;
        int i0;
        org.springframework.util.xml.XMLEventStreamReader r0;
        java.lang.String $r2;

        r0 := @this: org.springframework.util.xml.XMLEventStreamReader;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<org.springframework.util.xml.XMLEventStreamReader: javax.xml.stream.events.Attribute getAttribute(int)>(i0);

        $r2 = interfaceinvoke $r1.<javax.xml.stream.events.Attribute: java.lang.String getDTDType()>();

        return $r2;
    }

    public java.lang.String getAttributeValue(int)
    {
        javax.xml.stream.events.Attribute $r1;
        int i0;
        org.springframework.util.xml.XMLEventStreamReader r0;
        java.lang.String $r2;

        r0 := @this: org.springframework.util.xml.XMLEventStreamReader;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<org.springframework.util.xml.XMLEventStreamReader: javax.xml.stream.events.Attribute getAttribute(int)>(i0);

        $r2 = interfaceinvoke $r1.<javax.xml.stream.events.Attribute: java.lang.String getValue()>();

        return $r2;
    }

    public java.lang.String getNamespacePrefix(int)
    {
        javax.xml.stream.events.Namespace $r1;
        int i0;
        org.springframework.util.xml.XMLEventStreamReader r0;
        java.lang.String $r2;

        r0 := @this: org.springframework.util.xml.XMLEventStreamReader;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<org.springframework.util.xml.XMLEventStreamReader: javax.xml.stream.events.Namespace getNamespace(int)>(i0);

        $r2 = interfaceinvoke $r1.<javax.xml.stream.events.Namespace: java.lang.String getPrefix()>();

        return $r2;
    }

    public java.lang.String getNamespaceURI(int)
    {
        javax.xml.stream.events.Namespace $r1;
        int i0;
        org.springframework.util.xml.XMLEventStreamReader r0;
        java.lang.String $r2;

        r0 := @this: org.springframework.util.xml.XMLEventStreamReader;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<org.springframework.util.xml.XMLEventStreamReader: javax.xml.stream.events.Namespace getNamespace(int)>(i0);

        $r2 = interfaceinvoke $r1.<javax.xml.stream.events.Namespace: java.lang.String getNamespaceURI()>();

        return $r2;
    }

    public java.lang.Object getProperty(java.lang.String) throws java.lang.IllegalArgumentException
    {
        javax.xml.stream.XMLEventReader $r2;
        org.springframework.util.xml.XMLEventStreamReader r0;
        java.lang.Object $r3;
        java.lang.String r1;

        r0 := @this: org.springframework.util.xml.XMLEventStreamReader;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.springframework.util.xml.XMLEventStreamReader: javax.xml.stream.XMLEventReader eventReader>;

        $r3 = interfaceinvoke $r2.<javax.xml.stream.XMLEventReader: java.lang.Object getProperty(java.lang.String)>(r1);

        return $r3;
    }

    public boolean isAttributeSpecified(int)
    {
        javax.xml.stream.events.Attribute $r1;
        int i0;
        org.springframework.util.xml.XMLEventStreamReader r0;
        boolean $z0;

        r0 := @this: org.springframework.util.xml.XMLEventStreamReader;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<org.springframework.util.xml.XMLEventStreamReader: javax.xml.stream.events.Attribute getAttribute(int)>(i0);

        $z0 = interfaceinvoke $r1.<javax.xml.stream.events.Attribute: boolean isSpecified()>();

        return $z0;
    }

    public int next() throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.XMLEventReader $r1;
        javax.xml.stream.events.XMLEvent $r2, $r3;
        int $i0;
        org.springframework.util.xml.XMLEventStreamReader r0;

        r0 := @this: org.springframework.util.xml.XMLEventStreamReader;

        $r1 = r0.<org.springframework.util.xml.XMLEventStreamReader: javax.xml.stream.XMLEventReader eventReader>;

        $r2 = interfaceinvoke $r1.<javax.xml.stream.XMLEventReader: javax.xml.stream.events.XMLEvent nextEvent()>();

        r0.<org.springframework.util.xml.XMLEventStreamReader: javax.xml.stream.events.XMLEvent event> = $r2;

        $r3 = r0.<org.springframework.util.xml.XMLEventStreamReader: javax.xml.stream.events.XMLEvent event>;

        $i0 = interfaceinvoke $r3.<javax.xml.stream.events.XMLEvent: int getEventType()>();

        return $i0;
    }

    public boolean standaloneSet()
    {
        java.lang.IllegalStateException $r2;
        javax.xml.stream.events.XMLEvent $r1, $r3;
        javax.xml.stream.events.StartDocument $r4;
        org.springframework.util.xml.XMLEventStreamReader r0;
        boolean $z0, $z1;

        r0 := @this: org.springframework.util.xml.XMLEventStreamReader;

        $r1 = r0.<org.springframework.util.xml.XMLEventStreamReader: javax.xml.stream.events.XMLEvent event>;

        $z0 = interfaceinvoke $r1.<javax.xml.stream.events.XMLEvent: boolean isStartDocument()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<org.springframework.util.xml.XMLEventStreamReader: javax.xml.stream.events.XMLEvent event>;

        $r4 = (javax.xml.stream.events.StartDocument) $r3;

        $z1 = interfaceinvoke $r4.<javax.xml.stream.events.StartDocument: boolean standaloneSet()>();

        return $z1;

     label1:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>()>();

        throw $r2;
    }

    private int countIterator(java.util.Iterator)
    {
        java.util.Iterator r0;
        int i0;
        org.springframework.util.xml.XMLEventStreamReader r1;
        boolean $z0;

        r1 := @this: org.springframework.util.xml.XMLEventStreamReader;

        r0 := @parameter0: java.util.Iterator;

        i0 = 0;

        goto label2;

     label1:
        interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        i0 = i0 + 1;

     label2:
        $z0 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return i0;
    }

    private javax.xml.stream.events.Attribute getAttribute(int)
    {
        java.lang.IllegalStateException $r8;
        java.util.Iterator $r4;
        java.lang.IllegalArgumentException $r7;
        javax.xml.stream.events.Attribute r6;
        javax.xml.stream.events.XMLEvent $r1, $r2;
        int i0, i1;
        org.springframework.util.xml.XMLEventStreamReader r0;
        java.lang.Object $r5;
        javax.xml.stream.events.StartElement $r3;
        boolean $z0, $z1;

        r0 := @this: org.springframework.util.xml.XMLEventStreamReader;

        i0 := @parameter0: int;

        $r1 = r0.<org.springframework.util.xml.XMLEventStreamReader: javax.xml.stream.events.XMLEvent event>;

        $z0 = interfaceinvoke $r1.<javax.xml.stream.events.XMLEvent: boolean isStartElement()>();

        if $z0 != 0 goto label1;

        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>()>();

        throw $r8;

     label1:
        i1 = 0;

        $r2 = r0.<org.springframework.util.xml.XMLEventStreamReader: javax.xml.stream.events.XMLEvent event>;

        $r3 = interfaceinvoke $r2.<javax.xml.stream.events.XMLEvent: javax.xml.stream.events.StartElement asStartElement()>();

        $r4 = interfaceinvoke $r3.<javax.xml.stream.events.StartElement: java.util.Iterator getAttributes()>();

        goto label4;

     label2:
        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (javax.xml.stream.events.Attribute) $r5;

        if i1 != i0 goto label3;

        return r6;

     label3:
        i1 = i1 + 1;

     label4:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label2;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r7;
    }

    private javax.xml.stream.events.Namespace getNamespace(int)
    {
        java.lang.IllegalStateException $r3;
        javax.xml.stream.events.XMLEvent $r1, $r2, $r4, $r9;
        int i0, i1;
        org.springframework.util.xml.XMLEventStreamReader r0;
        javax.xml.stream.events.EndElement $r5;
        javax.xml.stream.events.StartElement $r10;
        boolean $z0, $z1, $z2;
        java.util.Iterator r11;
        java.lang.IllegalArgumentException $r8;
        javax.xml.stream.events.Namespace r7;
        java.lang.Object $r6;

        r0 := @this: org.springframework.util.xml.XMLEventStreamReader;

        i0 := @parameter0: int;

        $r1 = r0.<org.springframework.util.xml.XMLEventStreamReader: javax.xml.stream.events.XMLEvent event>;

        $z0 = interfaceinvoke $r1.<javax.xml.stream.events.XMLEvent: boolean isStartElement()>();

        if $z0 == 0 goto label1;

        $r9 = r0.<org.springframework.util.xml.XMLEventStreamReader: javax.xml.stream.events.XMLEvent event>;

        $r10 = interfaceinvoke $r9.<javax.xml.stream.events.XMLEvent: javax.xml.stream.events.StartElement asStartElement()>();

        r11 = interfaceinvoke $r10.<javax.xml.stream.events.StartElement: java.util.Iterator getNamespaces()>();

        goto label3;

     label1:
        $r2 = r0.<org.springframework.util.xml.XMLEventStreamReader: javax.xml.stream.events.XMLEvent event>;

        $z1 = interfaceinvoke $r2.<javax.xml.stream.events.XMLEvent: boolean isEndElement()>();

        if $z1 == 0 goto label2;

        $r4 = r0.<org.springframework.util.xml.XMLEventStreamReader: javax.xml.stream.events.XMLEvent event>;

        $r5 = interfaceinvoke $r4.<javax.xml.stream.events.XMLEvent: javax.xml.stream.events.EndElement asEndElement()>();

        r11 = interfaceinvoke $r5.<javax.xml.stream.events.EndElement: java.util.Iterator getNamespaces()>();

        goto label3;

     label2:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>()>();

        throw $r3;

     label3:
        i1 = 0;

        goto label6;

     label4:
        $r6 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>();

        r7 = (javax.xml.stream.events.Namespace) $r6;

        if i1 != i0 goto label5;

        return r7;

     label5:
        i1 = i1 + 1;

     label6:
        $z2 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label4;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r8;
    }
}
