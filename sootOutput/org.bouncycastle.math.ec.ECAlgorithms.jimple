public class org.bouncycastle.math.ec.ECAlgorithms extends java.lang.Object
{

    public void <init>()
    {
        org.bouncycastle.math.ec.ECAlgorithms r0;

        r0 := @this: org.bouncycastle.math.ec.ECAlgorithms;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.bouncycastle.math.ec.ECPoint sumOfTwoMultiplies(org.bouncycastle.math.ec.ECPoint, java.math.BigInteger, org.bouncycastle.math.ec.ECPoint, java.math.BigInteger)
    {
        org.bouncycastle.math.ec.ECCurve $r1, $r3;
        java.lang.IllegalArgumentException $r7;
        org.bouncycastle.math.ec.ECPoint r0, r2, $r6;
        java.math.BigInteger r4, r5;
        boolean $z0;

        r0 := @parameter0: org.bouncycastle.math.ec.ECPoint;

        r4 := @parameter1: java.math.BigInteger;

        r2 := @parameter2: org.bouncycastle.math.ec.ECPoint;

        r5 := @parameter3: java.math.BigInteger;

        $r1 = virtualinvoke r0.<org.bouncycastle.math.ec.ECPoint: org.bouncycastle.math.ec.ECCurve getCurve()>();

        $r3 = virtualinvoke r2.<org.bouncycastle.math.ec.ECPoint: org.bouncycastle.math.ec.ECCurve getCurve()>();

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("P and Q must be on same curve");

        throw $r7;

     label1:
        $r6 = staticinvoke <org.bouncycastle.math.ec.ECAlgorithms: org.bouncycastle.math.ec.ECPoint implShamirsTrick(org.bouncycastle.math.ec.ECPoint,java.math.BigInteger,org.bouncycastle.math.ec.ECPoint,java.math.BigInteger)>(r0, r4, r2, r5);

        return $r6;
    }

    public static org.bouncycastle.math.ec.ECPoint shamirsTrick(org.bouncycastle.math.ec.ECPoint, java.math.BigInteger, org.bouncycastle.math.ec.ECPoint, java.math.BigInteger)
    {
        org.bouncycastle.math.ec.ECCurve $r1, $r3;
        java.lang.IllegalArgumentException $r7;
        org.bouncycastle.math.ec.ECPoint r0, r2, $r6;
        java.math.BigInteger r4, r5;
        boolean $z0;

        r0 := @parameter0: org.bouncycastle.math.ec.ECPoint;

        r4 := @parameter1: java.math.BigInteger;

        r2 := @parameter2: org.bouncycastle.math.ec.ECPoint;

        r5 := @parameter3: java.math.BigInteger;

        $r1 = virtualinvoke r0.<org.bouncycastle.math.ec.ECPoint: org.bouncycastle.math.ec.ECCurve getCurve()>();

        $r3 = virtualinvoke r2.<org.bouncycastle.math.ec.ECPoint: org.bouncycastle.math.ec.ECCurve getCurve()>();

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("P and Q must be on same curve");

        throw $r7;

     label1:
        $r6 = staticinvoke <org.bouncycastle.math.ec.ECAlgorithms: org.bouncycastle.math.ec.ECPoint implShamirsTrick(org.bouncycastle.math.ec.ECPoint,java.math.BigInteger,org.bouncycastle.math.ec.ECPoint,java.math.BigInteger)>(r0, r4, r2, r5);

        return $r6;
    }

    private static org.bouncycastle.math.ec.ECPoint implShamirsTrick(org.bouncycastle.math.ec.ECPoint, java.math.BigInteger, org.bouncycastle.math.ec.ECPoint, java.math.BigInteger)
    {
        org.bouncycastle.math.ec.ECPoint r2, r3, $r4, $r6, r7;
        int $i0, $i1, $i2, i3, $i5;
        java.math.BigInteger r0, r1;
        boolean $z0, $z1, $z2;
        org.bouncycastle.math.ec.ECCurve $r5;

        r2 := @parameter0: org.bouncycastle.math.ec.ECPoint;

        r0 := @parameter1: java.math.BigInteger;

        r3 := @parameter2: org.bouncycastle.math.ec.ECPoint;

        r1 := @parameter3: java.math.BigInteger;

        $i0 = virtualinvoke r0.<java.math.BigInteger: int bitLength()>();

        $i1 = virtualinvoke r1.<java.math.BigInteger: int bitLength()>();

        $i2 = staticinvoke <java.lang.Math: int max(int,int)>($i0, $i1);

        $r4 = virtualinvoke r2.<org.bouncycastle.math.ec.ECPoint: org.bouncycastle.math.ec.ECPoint add(org.bouncycastle.math.ec.ECPoint)>(r3);

        $r5 = virtualinvoke r2.<org.bouncycastle.math.ec.ECPoint: org.bouncycastle.math.ec.ECCurve getCurve()>();

        r7 = virtualinvoke $r5.<org.bouncycastle.math.ec.ECCurve: org.bouncycastle.math.ec.ECPoint getInfinity()>();

        i3 = $i2 - 1;

     label1:
        if i3 < 0 goto label5;

        $r6 = virtualinvoke r7.<org.bouncycastle.math.ec.ECPoint: org.bouncycastle.math.ec.ECPoint twice()>();

        r7 = $r6;

        $z0 = virtualinvoke r0.<java.math.BigInteger: boolean testBit(int)>(i3);

        if $z0 == 0 goto label3;

        $z2 = virtualinvoke r1.<java.math.BigInteger: boolean testBit(int)>(i3);

        if $z2 == 0 goto label2;

        r7 = virtualinvoke $r6.<org.bouncycastle.math.ec.ECPoint: org.bouncycastle.math.ec.ECPoint add(org.bouncycastle.math.ec.ECPoint)>($r4);

        goto label4;

     label2:
        r7 = virtualinvoke $r6.<org.bouncycastle.math.ec.ECPoint: org.bouncycastle.math.ec.ECPoint add(org.bouncycastle.math.ec.ECPoint)>(r2);

        goto label4;

     label3:
        $z1 = virtualinvoke r1.<java.math.BigInteger: boolean testBit(int)>(i3);

        if $z1 == 0 goto label4;

        r7 = virtualinvoke $r6.<org.bouncycastle.math.ec.ECPoint: org.bouncycastle.math.ec.ECPoint add(org.bouncycastle.math.ec.ECPoint)>(r3);

     label4:
        $i5 = (int) -1;

        i3 = i3 + $i5;

        goto label1;

     label5:
        return r7;
    }
}
