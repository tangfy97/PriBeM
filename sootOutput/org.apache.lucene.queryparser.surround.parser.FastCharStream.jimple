public final class org.apache.lucene.queryparser.surround.parser.FastCharStream extends java.lang.Object implements org.apache.lucene.queryparser.surround.parser.CharStream
{
    char[] buffer;
    int bufferLength;
    int bufferPosition;
    int tokenStart;
    int bufferStart;
    java.io.Reader input;

    public void <init>(java.io.Reader)
    {
        org.apache.lucene.queryparser.surround.parser.FastCharStream r0;
        java.io.Reader r1;

        r0 := @this: org.apache.lucene.queryparser.surround.parser.FastCharStream;

        r1 := @parameter0: java.io.Reader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.lucene.queryparser.surround.parser.FastCharStream: char[] buffer> = null;

        r0.<org.apache.lucene.queryparser.surround.parser.FastCharStream: int bufferLength> = 0;

        r0.<org.apache.lucene.queryparser.surround.parser.FastCharStream: int bufferPosition> = 0;

        r0.<org.apache.lucene.queryparser.surround.parser.FastCharStream: int tokenStart> = 0;

        r0.<org.apache.lucene.queryparser.surround.parser.FastCharStream: int bufferStart> = 0;

        r0.<org.apache.lucene.queryparser.surround.parser.FastCharStream: java.io.Reader input> = r1;

        return;
    }

    public final char readChar() throws java.io.IOException
    {
        org.apache.lucene.queryparser.surround.parser.FastCharStream r0;
        int $i0, $i1, $i2, $i3;
        char[] $r1;
        char $c4;

        r0 := @this: org.apache.lucene.queryparser.surround.parser.FastCharStream;

        $i1 = r0.<org.apache.lucene.queryparser.surround.parser.FastCharStream: int bufferPosition>;

        $i0 = r0.<org.apache.lucene.queryparser.surround.parser.FastCharStream: int bufferLength>;

        if $i1 < $i0 goto label1;

        specialinvoke r0.<org.apache.lucene.queryparser.surround.parser.FastCharStream: void refill()>();

     label1:
        $r1 = r0.<org.apache.lucene.queryparser.surround.parser.FastCharStream: char[] buffer>;

        $i2 = r0.<org.apache.lucene.queryparser.surround.parser.FastCharStream: int bufferPosition>;

        $i3 = $i2 + 1;

        r0.<org.apache.lucene.queryparser.surround.parser.FastCharStream: int bufferPosition> = $i3;

        $c4 = $r1[$i2];

        return $c4;
    }

    private final void refill() throws java.io.IOException
    {
        org.apache.lucene.queryparser.surround.parser.FastCharStream r0;
        java.io.Reader $r10;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i19;
        java.io.IOException $r13;
        char[] $r1, $r2, $r4, $r5, $r6, $r7, $r8, r9, $r11, $r12;

        r0 := @this: org.apache.lucene.queryparser.surround.parser.FastCharStream;

        $i1 = r0.<org.apache.lucene.queryparser.surround.parser.FastCharStream: int bufferLength>;

        $i0 = r0.<org.apache.lucene.queryparser.surround.parser.FastCharStream: int tokenStart>;

        i2 = $i1 - $i0;

        $i3 = r0.<org.apache.lucene.queryparser.surround.parser.FastCharStream: int tokenStart>;

        if $i3 != 0 goto label2;

        $r4 = r0.<org.apache.lucene.queryparser.surround.parser.FastCharStream: char[] buffer>;

        if $r4 != null goto label1;

        $r8 = newarray (char)[2048];

        r0.<org.apache.lucene.queryparser.surround.parser.FastCharStream: char[] buffer> = $r8;

        goto label3;

     label1:
        $i8 = r0.<org.apache.lucene.queryparser.surround.parser.FastCharStream: int bufferLength>;

        $r5 = r0.<org.apache.lucene.queryparser.surround.parser.FastCharStream: char[] buffer>;

        $i7 = lengthof $r5;

        if $i8 != $i7 goto label3;

        $r6 = r0.<org.apache.lucene.queryparser.surround.parser.FastCharStream: char[] buffer>;

        $i9 = lengthof $r6;

        $i10 = $i9 * 2;

        r9 = newarray (char)[$i10];

        $r7 = r0.<org.apache.lucene.queryparser.surround.parser.FastCharStream: char[] buffer>;

        $i11 = r0.<org.apache.lucene.queryparser.surround.parser.FastCharStream: int bufferLength>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, r9, 0, $i11);

        r0.<org.apache.lucene.queryparser.surround.parser.FastCharStream: char[] buffer> = r9;

        goto label3;

     label2:
        $r2 = r0.<org.apache.lucene.queryparser.surround.parser.FastCharStream: char[] buffer>;

        $i4 = r0.<org.apache.lucene.queryparser.surround.parser.FastCharStream: int tokenStart>;

        $r1 = r0.<org.apache.lucene.queryparser.surround.parser.FastCharStream: char[] buffer>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i4, $r1, 0, i2);

     label3:
        r0.<org.apache.lucene.queryparser.surround.parser.FastCharStream: int bufferLength> = i2;

        r0.<org.apache.lucene.queryparser.surround.parser.FastCharStream: int bufferPosition> = i2;

        $i12 = r0.<org.apache.lucene.queryparser.surround.parser.FastCharStream: int bufferStart>;

        $i13 = r0.<org.apache.lucene.queryparser.surround.parser.FastCharStream: int tokenStart>;

        $i14 = $i12 + $i13;

        r0.<org.apache.lucene.queryparser.surround.parser.FastCharStream: int bufferStart> = $i14;

        r0.<org.apache.lucene.queryparser.surround.parser.FastCharStream: int tokenStart> = 0;

        $r10 = r0.<org.apache.lucene.queryparser.surround.parser.FastCharStream: java.io.Reader input>;

        $r11 = r0.<org.apache.lucene.queryparser.surround.parser.FastCharStream: char[] buffer>;

        $r12 = r0.<org.apache.lucene.queryparser.surround.parser.FastCharStream: char[] buffer>;

        $i15 = lengthof $r12;

        $i16 = $i15 - i2;

        $i17 = virtualinvoke $r10.<java.io.Reader: int read(char[],int,int)>($r11, i2, $i16);

        $i19 = (int) -1;

        if $i17 != $i19 goto label4;

        $r13 = new java.io.IOException;

        specialinvoke $r13.<java.io.IOException: void <init>(java.lang.String)>("read past eof");

        throw $r13;

     label4:
        $i5 = r0.<org.apache.lucene.queryparser.surround.parser.FastCharStream: int bufferLength>;

        $i6 = $i5 + $i17;

        r0.<org.apache.lucene.queryparser.surround.parser.FastCharStream: int bufferLength> = $i6;

        return;
    }

    public final char BeginToken() throws java.io.IOException
    {
        org.apache.lucene.queryparser.surround.parser.FastCharStream r0;
        int $i0;
        char $c1;

        r0 := @this: org.apache.lucene.queryparser.surround.parser.FastCharStream;

        $i0 = r0.<org.apache.lucene.queryparser.surround.parser.FastCharStream: int bufferPosition>;

        r0.<org.apache.lucene.queryparser.surround.parser.FastCharStream: int tokenStart> = $i0;

        $c1 = virtualinvoke r0.<org.apache.lucene.queryparser.surround.parser.FastCharStream: char readChar()>();

        return $c1;
    }

    public final void backup(int)
    {
        org.apache.lucene.queryparser.surround.parser.FastCharStream r0;
        int i0, $i1, $i2;

        r0 := @this: org.apache.lucene.queryparser.surround.parser.FastCharStream;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.lucene.queryparser.surround.parser.FastCharStream: int bufferPosition>;

        $i2 = $i1 - i0;

        r0.<org.apache.lucene.queryparser.surround.parser.FastCharStream: int bufferPosition> = $i2;

        return;
    }

    public final java.lang.String GetImage()
    {
        org.apache.lucene.queryparser.surround.parser.FastCharStream r1;
        int $i0, $i1, $i2, $i3;
        char[] $r2;
        java.lang.String $r0;

        r1 := @this: org.apache.lucene.queryparser.surround.parser.FastCharStream;

        $r0 = new java.lang.String;

        $r2 = r1.<org.apache.lucene.queryparser.surround.parser.FastCharStream: char[] buffer>;

        $i3 = r1.<org.apache.lucene.queryparser.surround.parser.FastCharStream: int tokenStart>;

        $i1 = r1.<org.apache.lucene.queryparser.surround.parser.FastCharStream: int bufferPosition>;

        $i0 = r1.<org.apache.lucene.queryparser.surround.parser.FastCharStream: int tokenStart>;

        $i2 = $i1 - $i0;

        specialinvoke $r0.<java.lang.String: void <init>(char[],int,int)>($r2, $i3, $i2);

        return $r0;
    }

    public final char[] GetSuffix(int)
    {
        org.apache.lucene.queryparser.surround.parser.FastCharStream r1;
        int i0, $i1, $i2;
        char[] r0, $r2;

        r1 := @this: org.apache.lucene.queryparser.surround.parser.FastCharStream;

        i0 := @parameter0: int;

        r0 = newarray (char)[i0];

        $r2 = r1.<org.apache.lucene.queryparser.surround.parser.FastCharStream: char[] buffer>;

        $i1 = r1.<org.apache.lucene.queryparser.surround.parser.FastCharStream: int bufferPosition>;

        $i2 = $i1 - i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i2, r0, 0, i0);

        return r0;
    }

    public final void Done()
    {
        org.apache.lucene.queryparser.surround.parser.FastCharStream r0;
        java.io.IOException $r2;
        java.io.Reader $r1;

        r0 := @this: org.apache.lucene.queryparser.surround.parser.FastCharStream;

     label1:
        $r1 = r0.<org.apache.lucene.queryparser.surround.parser.FastCharStream: java.io.Reader input>;

        virtualinvoke $r1.<java.io.Reader: void close()>();

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public final int getColumn()
    {
        org.apache.lucene.queryparser.surround.parser.FastCharStream r0;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.lucene.queryparser.surround.parser.FastCharStream;

        $i1 = r0.<org.apache.lucene.queryparser.surround.parser.FastCharStream: int bufferStart>;

        $i0 = r0.<org.apache.lucene.queryparser.surround.parser.FastCharStream: int bufferPosition>;

        $i2 = $i1 + $i0;

        return $i2;
    }

    public final int getLine()
    {
        org.apache.lucene.queryparser.surround.parser.FastCharStream r0;

        r0 := @this: org.apache.lucene.queryparser.surround.parser.FastCharStream;

        return 1;
    }

    public final int getEndColumn()
    {
        org.apache.lucene.queryparser.surround.parser.FastCharStream r0;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.lucene.queryparser.surround.parser.FastCharStream;

        $i1 = r0.<org.apache.lucene.queryparser.surround.parser.FastCharStream: int bufferStart>;

        $i0 = r0.<org.apache.lucene.queryparser.surround.parser.FastCharStream: int bufferPosition>;

        $i2 = $i1 + $i0;

        return $i2;
    }

    public final int getEndLine()
    {
        org.apache.lucene.queryparser.surround.parser.FastCharStream r0;

        r0 := @this: org.apache.lucene.queryparser.surround.parser.FastCharStream;

        return 1;
    }

    public final int getBeginColumn()
    {
        org.apache.lucene.queryparser.surround.parser.FastCharStream r0;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.lucene.queryparser.surround.parser.FastCharStream;

        $i1 = r0.<org.apache.lucene.queryparser.surround.parser.FastCharStream: int bufferStart>;

        $i0 = r0.<org.apache.lucene.queryparser.surround.parser.FastCharStream: int tokenStart>;

        $i2 = $i1 + $i0;

        return $i2;
    }

    public final int getBeginLine()
    {
        org.apache.lucene.queryparser.surround.parser.FastCharStream r0;

        r0 := @this: org.apache.lucene.queryparser.surround.parser.FastCharStream;

        return 1;
    }
}
