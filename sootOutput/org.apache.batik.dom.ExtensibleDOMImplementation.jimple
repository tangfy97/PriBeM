public abstract class org.apache.batik.dom.ExtensibleDOMImplementation extends org.apache.batik.dom.AbstractDOMImplementation implements org.w3c.dom.css.DOMImplementationCSS, org.apache.batik.dom.StyleSheetFactory, org.apache.batik.i18n.Localizable
{
    protected org.apache.batik.util.DoublyIndexedTable customFactories;
    protected java.util.List customValueManagers;
    protected java.util.List customShorthandManagers;
    protected static final java.lang.String RESOURCES;
    protected org.apache.batik.i18n.LocalizableSupport localizableSupport;
    protected static java.util.List extensions;
    static java.lang.Class class$org$apache$batik$dom$DomExtension;

    public void <init>()
    {
        org.apache.batik.dom.ExtensibleDOMImplementation r0;
        java.util.List $r1;
        java.util.Iterator $r2;
        java.lang.Object $r3;
        org.apache.batik.dom.DomExtension r4;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.ExtensibleDOMImplementation;

        specialinvoke r0.<org.apache.batik.dom.AbstractDOMImplementation: void <init>()>();

        virtualinvoke r0.<org.apache.batik.dom.ExtensibleDOMImplementation: void initLocalizable()>();

        $r1 = staticinvoke <org.apache.batik.dom.ExtensibleDOMImplementation: java.util.List getDomExtensions()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.batik.dom.DomExtension) $r3;

        interfaceinvoke r4.<org.apache.batik.dom.DomExtension: void registerTags(org.apache.batik.dom.ExtensibleDOMImplementation)>(r0);

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return;
    }

    public void setLocale(java.util.Locale)
    {
        org.apache.batik.dom.ExtensibleDOMImplementation r0;
        java.util.Locale r1;
        org.apache.batik.i18n.LocalizableSupport $r2;

        r0 := @this: org.apache.batik.dom.ExtensibleDOMImplementation;

        r1 := @parameter0: java.util.Locale;

        $r2 = r0.<org.apache.batik.dom.ExtensibleDOMImplementation: org.apache.batik.i18n.LocalizableSupport localizableSupport>;

        virtualinvoke $r2.<org.apache.batik.i18n.LocalizableSupport: void setLocale(java.util.Locale)>(r1);

        return;
    }

    public java.util.Locale getLocale()
    {
        org.apache.batik.dom.ExtensibleDOMImplementation r0;
        java.util.Locale $r2;
        org.apache.batik.i18n.LocalizableSupport $r1;

        r0 := @this: org.apache.batik.dom.ExtensibleDOMImplementation;

        $r1 = r0.<org.apache.batik.dom.ExtensibleDOMImplementation: org.apache.batik.i18n.LocalizableSupport localizableSupport>;

        $r2 = virtualinvoke $r1.<org.apache.batik.i18n.LocalizableSupport: java.util.Locale getLocale()>();

        return $r2;
    }

    protected void initLocalizable()
    {
        org.apache.batik.dom.ExtensibleDOMImplementation r0;
        java.lang.Class $r2;
        java.lang.ClassLoader $r3;
        org.apache.batik.i18n.LocalizableSupport $r1;

        r0 := @this: org.apache.batik.dom.ExtensibleDOMImplementation;

        $r1 = new org.apache.batik.i18n.LocalizableSupport;

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        specialinvoke $r1.<org.apache.batik.i18n.LocalizableSupport: void <init>(java.lang.String,java.lang.ClassLoader)>("org.apache.batik.dom.resources.Messages", $r3);

        r0.<org.apache.batik.dom.ExtensibleDOMImplementation: org.apache.batik.i18n.LocalizableSupport localizableSupport> = $r1;

        return;
    }

    public java.lang.String formatMessage(java.lang.String, java.lang.Object[]) throws java.util.MissingResourceException
    {
        org.apache.batik.dom.ExtensibleDOMImplementation r0;
        java.lang.Object[] r2;
        java.lang.String r1, $r4;
        org.apache.batik.i18n.LocalizableSupport $r3;

        r0 := @this: org.apache.batik.dom.ExtensibleDOMImplementation;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object[];

        $r3 = r0.<org.apache.batik.dom.ExtensibleDOMImplementation: org.apache.batik.i18n.LocalizableSupport localizableSupport>;

        $r4 = virtualinvoke $r3.<org.apache.batik.i18n.LocalizableSupport: java.lang.String formatMessage(java.lang.String,java.lang.Object[])>(r1, r2);

        return $r4;
    }

    public void registerCustomElementFactory(java.lang.String, java.lang.String, org.apache.batik.dom.ExtensibleDOMImplementation$ElementFactory)
    {
        org.apache.batik.dom.ExtensibleDOMImplementation r0;
        org.apache.batik.util.DoublyIndexedTable $r1, $r5, $r6;
        java.lang.String r2, r3;
        org.apache.batik.dom.ExtensibleDOMImplementation$ElementFactory r4;

        r0 := @this: org.apache.batik.dom.ExtensibleDOMImplementation;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: org.apache.batik.dom.ExtensibleDOMImplementation$ElementFactory;

        $r1 = r0.<org.apache.batik.dom.ExtensibleDOMImplementation: org.apache.batik.util.DoublyIndexedTable customFactories>;

        if $r1 != null goto label1;

        $r6 = new org.apache.batik.util.DoublyIndexedTable;

        specialinvoke $r6.<org.apache.batik.util.DoublyIndexedTable: void <init>()>();

        r0.<org.apache.batik.dom.ExtensibleDOMImplementation: org.apache.batik.util.DoublyIndexedTable customFactories> = $r6;

     label1:
        $r5 = r0.<org.apache.batik.dom.ExtensibleDOMImplementation: org.apache.batik.util.DoublyIndexedTable customFactories>;

        virtualinvoke $r5.<org.apache.batik.util.DoublyIndexedTable: java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object)>(r2, r3, r4);

        return;
    }

    public void registerCustomCSSValueManager(org.apache.batik.css.engine.value.ValueManager)
    {
        org.apache.batik.dom.ExtensibleDOMImplementation r0;
        java.util.List $r1, $r3;
        org.apache.batik.css.engine.value.ValueManager r2;
        java.util.LinkedList $r4;

        r0 := @this: org.apache.batik.dom.ExtensibleDOMImplementation;

        r2 := @parameter0: org.apache.batik.css.engine.value.ValueManager;

        $r1 = r0.<org.apache.batik.dom.ExtensibleDOMImplementation: java.util.List customValueManagers>;

        if $r1 != null goto label1;

        $r4 = new java.util.LinkedList;

        specialinvoke $r4.<java.util.LinkedList: void <init>()>();

        r0.<org.apache.batik.dom.ExtensibleDOMImplementation: java.util.List customValueManagers> = $r4;

     label1:
        $r3 = r0.<org.apache.batik.dom.ExtensibleDOMImplementation: java.util.List customValueManagers>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r2);

        return;
    }

    public void registerCustomCSSShorthandManager(org.apache.batik.css.engine.value.ShorthandManager)
    {
        org.apache.batik.dom.ExtensibleDOMImplementation r0;
        java.util.List $r1, $r3;
        org.apache.batik.css.engine.value.ShorthandManager r2;
        java.util.LinkedList $r4;

        r0 := @this: org.apache.batik.dom.ExtensibleDOMImplementation;

        r2 := @parameter0: org.apache.batik.css.engine.value.ShorthandManager;

        $r1 = r0.<org.apache.batik.dom.ExtensibleDOMImplementation: java.util.List customShorthandManagers>;

        if $r1 != null goto label1;

        $r4 = new java.util.LinkedList;

        specialinvoke $r4.<java.util.LinkedList: void <init>()>();

        r0.<org.apache.batik.dom.ExtensibleDOMImplementation: java.util.List customShorthandManagers> = $r4;

     label1:
        $r3 = r0.<org.apache.batik.dom.ExtensibleDOMImplementation: java.util.List customShorthandManagers>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r2);

        return;
    }

    public org.apache.batik.css.engine.CSSEngine createCSSEngine(org.apache.batik.dom.AbstractStylableDocument, org.apache.batik.css.engine.CSSContext)
    {
        org.apache.batik.css.parser.ExtendedParser $r4;
        org.apache.batik.dom.ExtensibleDOMImplementation r5;
        java.lang.InstantiationException $r25;
        org.apache.batik.dom.AbstractStylableDocument r18;
        boolean $z0, $z1;
        java.lang.IllegalAccessException $r21;
        org.apache.batik.css.engine.value.ValueManager[] r33;
        org.apache.batik.css.engine.CSSContext r19;
        java.util.List $r6, $r7, $r8, $r12, $r13, $r14;
        org.apache.batik.css.engine.value.ValueManager $r11;
        java.lang.Object[] $r23, $r27, $r31;
        org.apache.batik.css.engine.CSSEngine $r20;
        org.w3c.css.sac.Parser r3;
        org.apache.batik.css.engine.value.ShorthandManager $r17;
        org.w3c.dom.DOMException $r22, $r26, $r30;
        int $i0, $i1, $i2, $i3, i4, i5;
        java.lang.String $r0, $r24, $r28, $r32;
        org.apache.batik.css.engine.value.ShorthandManager[] r34;
        java.util.Iterator $r9, $r15;
        java.lang.Class $r1;
        java.lang.Object $r2, $r10, $r16;
        java.lang.ClassNotFoundException $r29;

        r5 := @this: org.apache.batik.dom.ExtensibleDOMImplementation;

        r18 := @parameter0: org.apache.batik.dom.AbstractStylableDocument;

        r19 := @parameter1: org.apache.batik.css.engine.CSSContext;

        $r0 = staticinvoke <org.apache.batik.util.XMLResourceDescriptor: java.lang.String getCSSParserClassName()>();

     label01:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r0);

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.Object newInstance()>();

        r3 = (org.w3c.css.sac.Parser) $r2;

     label02:
        goto label06;

     label03:
        $r29 := @caughtexception;

        $r30 = new org.w3c.dom.DOMException;

        $r31 = newarray (java.lang.Object)[1];

        $r31[0] = $r0;

        $r32 = virtualinvoke r5.<org.apache.batik.dom.ExtensibleDOMImplementation: java.lang.String formatMessage(java.lang.String,java.lang.Object[])>("css.parser.class", $r31);

        specialinvoke $r30.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(15, $r32);

        throw $r30;

     label04:
        $r25 := @caughtexception;

        $r26 = new org.w3c.dom.DOMException;

        $r27 = newarray (java.lang.Object)[1];

        $r27[0] = $r0;

        $r28 = virtualinvoke r5.<org.apache.batik.dom.ExtensibleDOMImplementation: java.lang.String formatMessage(java.lang.String,java.lang.Object[])>("css.parser.creation", $r27);

        specialinvoke $r26.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(15, $r28);

        throw $r26;

     label05:
        $r21 := @caughtexception;

        $r22 = new org.w3c.dom.DOMException;

        $r23 = newarray (java.lang.Object)[1];

        $r23[0] = $r0;

        $r24 = virtualinvoke r5.<org.apache.batik.dom.ExtensibleDOMImplementation: java.lang.String formatMessage(java.lang.String,java.lang.Object[])>("css.parser.access", $r23);

        specialinvoke $r22.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(15, $r24);

        throw $r22;

     label06:
        $r4 = staticinvoke <org.apache.batik.css.parser.ExtendedParserWrapper: org.apache.batik.css.parser.ExtendedParser wrap(org.w3c.css.sac.Parser)>(r3);

        $r6 = r5.<org.apache.batik.dom.ExtensibleDOMImplementation: java.util.List customValueManagers>;

        if $r6 != null goto label07;

        r33 = newarray (org.apache.batik.css.engine.value.ValueManager)[0];

        goto label10;

     label07:
        $r7 = r5.<org.apache.batik.dom.ExtensibleDOMImplementation: java.util.List customValueManagers>;

        $i0 = interfaceinvoke $r7.<java.util.List: int size()>();

        r33 = newarray (org.apache.batik.css.engine.value.ValueManager)[$i0];

        $r8 = r5.<org.apache.batik.dom.ExtensibleDOMImplementation: java.util.List customValueManagers>;

        $r9 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

        i4 = 0;

        goto label09;

     label08:
        $i1 = i4;

        i4 = i4 + 1;

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        $r11 = (org.apache.batik.css.engine.value.ValueManager) $r10;

        r33[$i1] = $r11;

     label09:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label08;

     label10:
        $r12 = r5.<org.apache.batik.dom.ExtensibleDOMImplementation: java.util.List customShorthandManagers>;

        if $r12 != null goto label11;

        r34 = newarray (org.apache.batik.css.engine.value.ShorthandManager)[0];

        goto label14;

     label11:
        $r13 = r5.<org.apache.batik.dom.ExtensibleDOMImplementation: java.util.List customShorthandManagers>;

        $i2 = interfaceinvoke $r13.<java.util.List: int size()>();

        r34 = newarray (org.apache.batik.css.engine.value.ShorthandManager)[$i2];

        $r14 = r5.<org.apache.batik.dom.ExtensibleDOMImplementation: java.util.List customShorthandManagers>;

        $r15 = interfaceinvoke $r14.<java.util.List: java.util.Iterator iterator()>();

        i5 = 0;

        goto label13;

     label12:
        $i3 = i5;

        i5 = i5 + 1;

        $r16 = interfaceinvoke $r15.<java.util.Iterator: java.lang.Object next()>();

        $r17 = (org.apache.batik.css.engine.value.ShorthandManager) $r16;

        r34[$i3] = $r17;

     label13:
        $z1 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label12;

     label14:
        $r20 = virtualinvoke r5.<org.apache.batik.dom.ExtensibleDOMImplementation: org.apache.batik.css.engine.CSSEngine createCSSEngine(org.apache.batik.dom.AbstractStylableDocument,org.apache.batik.css.engine.CSSContext,org.apache.batik.css.parser.ExtendedParser,org.apache.batik.css.engine.value.ValueManager[],org.apache.batik.css.engine.value.ShorthandManager[])>(r18, r19, $r4, r33, r34);

        virtualinvoke r18.<org.apache.batik.dom.AbstractStylableDocument: void setCSSEngine(org.apache.batik.css.engine.CSSEngine)>($r20);

        return $r20;

        catch java.lang.ClassNotFoundException from label01 to label02 with label03;
        catch java.lang.InstantiationException from label01 to label02 with label04;
        catch java.lang.IllegalAccessException from label01 to label02 with label05;
    }

    public abstract org.apache.batik.css.engine.CSSEngine createCSSEngine(org.apache.batik.dom.AbstractStylableDocument, org.apache.batik.css.engine.CSSContext, org.apache.batik.css.parser.ExtendedParser, org.apache.batik.css.engine.value.ValueManager[], org.apache.batik.css.engine.value.ShorthandManager[]);

    public abstract org.w3c.dom.css.ViewCSS createViewCSS(org.apache.batik.dom.AbstractStylableDocument);

    public org.w3c.dom.Element createElementNS(org.apache.batik.dom.AbstractDocument, java.lang.String, java.lang.String)
    {
        org.apache.batik.dom.ExtensibleDOMImplementation r0;
        org.apache.batik.dom.GenericElementNS $r2;
        int $i0;
        java.lang.String $r3, r4, $r5, $r7, $r11, $r14, r15;
        org.apache.batik.dom.AbstractDocument r6;
        org.apache.batik.util.DoublyIndexedTable $r1, $r8;
        org.apache.batik.dom.ExtensibleDOMImplementation$ElementFactory r10;
        org.apache.batik.dom.GenericElement $r13;
        org.w3c.dom.Element $r12;
        java.lang.Object $r9;

        r0 := @this: org.apache.batik.dom.ExtensibleDOMImplementation;

        r6 := @parameter0: org.apache.batik.dom.AbstractDocument;

        r15 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        if r15 == null goto label1;

        $i0 = virtualinvoke r15.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        r15 = null;

     label1:
        if r15 != null goto label2;

        $r13 = new org.apache.batik.dom.GenericElement;

        $r14 = virtualinvoke r4.<java.lang.String: java.lang.String intern()>();

        specialinvoke $r13.<org.apache.batik.dom.GenericElement: void <init>(java.lang.String,org.apache.batik.dom.AbstractDocument)>($r14, r6);

        return $r13;

     label2:
        $r1 = r0.<org.apache.batik.dom.ExtensibleDOMImplementation: org.apache.batik.util.DoublyIndexedTable customFactories>;

        if $r1 == null goto label3;

        $r7 = staticinvoke <org.apache.batik.dom.util.DOMUtilities: java.lang.String getLocalName(java.lang.String)>(r4);

        $r8 = r0.<org.apache.batik.dom.ExtensibleDOMImplementation: org.apache.batik.util.DoublyIndexedTable customFactories>;

        $r9 = virtualinvoke $r8.<org.apache.batik.util.DoublyIndexedTable: java.lang.Object get(java.lang.Object,java.lang.Object)>(r15, $r7);

        r10 = (org.apache.batik.dom.ExtensibleDOMImplementation$ElementFactory) $r9;

        if r10 == null goto label3;

        $r11 = staticinvoke <org.apache.batik.dom.util.DOMUtilities: java.lang.String getPrefix(java.lang.String)>(r4);

        $r12 = interfaceinvoke r10.<org.apache.batik.dom.ExtensibleDOMImplementation$ElementFactory: org.w3c.dom.Element create(java.lang.String,org.w3c.dom.Document)>($r11, r6);

        return $r12;

     label3:
        $r2 = new org.apache.batik.dom.GenericElementNS;

        $r3 = virtualinvoke r15.<java.lang.String: java.lang.String intern()>();

        $r5 = virtualinvoke r4.<java.lang.String: java.lang.String intern()>();

        specialinvoke $r2.<org.apache.batik.dom.GenericElementNS: void <init>(java.lang.String,java.lang.String,org.apache.batik.dom.AbstractDocument)>($r3, $r5, r6);

        return $r2;
    }

    protected static synchronized java.util.List getDomExtensions()
    {
        java.util.ListIterator $r7;
        org.apache.batik.dom.DomExtension r5, r9;
        byte $b0;
        int $i1;
        java.util.LinkedList $r13;
        boolean $z0, $z1;
        java.util.Iterator $r3;
        java.util.List $r0, $r6, $r10, $r11;
        float $f0, $f1;
        java.lang.Class $r2, $r12;
        java.lang.Object $r4, $r8;

        $r0 = <org.apache.batik.dom.ExtensibleDOMImplementation: java.util.List extensions>;

        if $r0 == null goto label1;

        $r11 = <org.apache.batik.dom.ExtensibleDOMImplementation: java.util.List extensions>;

        return $r11;

     label1:
        $r13 = new java.util.LinkedList;

        specialinvoke $r13.<java.util.LinkedList: void <init>()>();

        <org.apache.batik.dom.ExtensibleDOMImplementation: java.util.List extensions> = $r13;

        $r2 = <org.apache.batik.dom.ExtensibleDOMImplementation: java.lang.Class class$org$apache$batik$dom$DomExtension>;

        if $r2 != null goto label2;

        $r12 = staticinvoke <org.apache.batik.dom.ExtensibleDOMImplementation: java.lang.Class class$(java.lang.String)>("org.apache.batik.dom.DomExtension");

        <org.apache.batik.dom.ExtensibleDOMImplementation: java.lang.Class class$org$apache$batik$dom$DomExtension> = $r12;

        goto label3;

     label2:
        $r12 = <org.apache.batik.dom.ExtensibleDOMImplementation: java.lang.Class class$org$apache$batik$dom$DomExtension>;

     label3:
        $r3 = staticinvoke <org.apache.batik.util.Service: java.util.Iterator providers(java.lang.Class)>($r12);

        goto label8;

     label4:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.batik.dom.DomExtension) $r4;

        $f0 = interfaceinvoke r5.<org.apache.batik.dom.DomExtension: float getPriority()>();

        $r6 = <org.apache.batik.dom.ExtensibleDOMImplementation: java.util.List extensions>;

        $r7 = interfaceinvoke $r6.<java.util.List: java.util.ListIterator listIterator()>();

        goto label5;

     label5:
        $z0 = interfaceinvoke $r7.<java.util.ListIterator: boolean hasNext()>();

        if $z0 != 0 goto label6;

        interfaceinvoke $r7.<java.util.ListIterator: void add(java.lang.Object)>(r5);

        goto label8;

     label6:
        $r8 = interfaceinvoke $r7.<java.util.ListIterator: java.lang.Object next()>();

        r9 = (org.apache.batik.dom.DomExtension) $r8;

        $f1 = interfaceinvoke r9.<org.apache.batik.dom.DomExtension: float getPriority()>();

        $b0 = $f1 cmpl $f0;

        $i1 = (int) $b0;

        if $i1 <= 0 goto label7;

        interfaceinvoke $r7.<java.util.ListIterator: java.lang.Object previous()>();

        interfaceinvoke $r7.<java.util.ListIterator: void add(java.lang.Object)>(r5);

        goto label8;

     label7:
        goto label5;

     label8:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label4;

        $r10 = <org.apache.batik.dom.ExtensibleDOMImplementation: java.util.List extensions>;

        return $r10;
    }

    public abstract org.w3c.dom.css.CSSStyleSheet createCSSStyleSheet(java.lang.String, java.lang.String) throws org.w3c.dom.DOMException;

    public abstract org.w3c.dom.stylesheets.StyleSheet createStyleSheet(org.w3c.dom.Node, org.apache.batik.dom.util.HashTable);

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        return $r1;

     label2:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label2;
    }

    static void <clinit>()
    {
        <org.apache.batik.dom.ExtensibleDOMImplementation: java.lang.String RESOURCES> = "org.apache.batik.dom.resources.Messages";

        <org.apache.batik.dom.ExtensibleDOMImplementation: java.util.List extensions> = null;

        return;
    }
}
