public class org.wiztools.restclient.TestUtil extends java.lang.Object
{
    private static final java.util.logging.Logger LOG;

    public void <init>()
    {
        org.wiztools.restclient.TestUtil r0;

        r0 := @this: org.wiztools.restclient.TestUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static junit.framework.TestSuite getTestSuite(org.wiztools.restclient.bean.Request, org.wiztools.restclient.bean.Response) throws org.wiztools.restclient.bean.TestException
    {
        java.lang.reflect.Method[] $r8;
        groovy.util.GroovyTestSuite $r7;
        java.lang.reflect.Method $r9, $r10, $r12, $r14;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.codehaus.groovy.control.CompilationFailedException $r23;
        java.lang.ClassLoader $r4;
        groovy.lang.GroovyClassLoader $r2;
        junit.framework.Test $r17;
        org.wiztools.restclient.bean.Request r0;
        java.lang.ClassCastException $r21;
        org.wiztools.restclient.bean.TestException $r22, $r24;
        int $i0, $i1, $i2, i3, i4, i5;
        java.lang.String $r1, $r13, $r20;
        org.wiztools.restclient.RESTTestCase r18;
        java.lang.Class[] $r15;
        java.io.File r25;
        java.lang.Class $r3, $r6, $r11, $r16;
        org.wiztools.restclient.bean.Response r19;
        java.io.File[] $r5;

        r0 := @parameter0: org.wiztools.restclient.bean.Request;

        r19 := @parameter1: org.wiztools.restclient.bean.Response;

        $r1 = interfaceinvoke r0.<org.wiztools.restclient.bean.Request: java.lang.String getTestScript()>();

        $z0 = staticinvoke <org.wiztools.commons.StringUtil: boolean isEmpty(java.lang.String)>($r1);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r2 = new groovy.lang.GroovyClassLoader;

        $r3 = class "Lorg/wiztools/restclient/TestUtil;";

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        specialinvoke $r2.<groovy.lang.GroovyClassLoader: void <init>(java.lang.ClassLoader)>($r4);

        $r5 = staticinvoke <org.wiztools.restclient.util.ConfigUtil: java.io.File[] getTestDependencies()>();

        i3 = lengthof $r5;

        i4 = 0;

     label2:
        if i4 >= i3 goto label3;

        r25 = $r5[i4];

        $r20 = virtualinvoke r25.<java.io.File: java.lang.String getAbsolutePath()>();

        virtualinvoke $r2.<groovy.lang.GroovyClassLoader: void addClasspath(java.lang.String)>($r20);

        i4 = i4 + 1;

        goto label2;

     label3:
        $r6 = virtualinvoke $r2.<groovy.lang.GroovyClassLoader: java.lang.Class parseClass(java.lang.String,java.lang.String)>($r1, "__GenRESTTestCase__");

        $r7 = new groovy.util.GroovyTestSuite;

        specialinvoke $r7.<groovy.util.GroovyTestSuite: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        i5 = 0;

     label4:
        $i0 = lengthof $r8;

        if i5 >= $i0 goto label7;

        $r9 = $r8[i5];

        $i1 = virtualinvoke $r9.<java.lang.reflect.Method: int getModifiers()>();

        $r10 = $r8[i5];

        $r11 = virtualinvoke $r10.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $r12 = $r8[i5];

        $r13 = virtualinvoke $r12.<java.lang.reflect.Method: java.lang.String getName()>();

        $r14 = $r8[i5];

        $r15 = virtualinvoke $r14.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i1);

        if $z1 == 0 goto label6;

        $z2 = staticinvoke <java.lang.reflect.Modifier: boolean isAbstract(int)>($i1);

        if $z2 != 0 goto label6;

        $r16 = <java.lang.Void: java.lang.Class TYPE>;

        $z3 = virtualinvoke $r11.<java.lang.Object: boolean equals(java.lang.Object)>($r16);

        if $z3 == 0 goto label6;

        $z4 = virtualinvoke $r13.<java.lang.String: boolean startsWith(java.lang.String)>("test");

        if $z4 == 0 goto label6;

        $i2 = lengthof $r15;

        if $i2 == 0 goto label5;

        goto label6;

     label5:
        $r17 = staticinvoke <groovy.util.GroovyTestSuite: junit.framework.Test createTest(java.lang.Class,java.lang.String)>($r6, $r13);

        r18 = (org.wiztools.restclient.RESTTestCase) $r17;

        virtualinvoke r18.<org.wiztools.restclient.RESTTestCase: void setRequest(org.wiztools.restclient.bean.Request)>(r0);

        virtualinvoke r18.<org.wiztools.restclient.RESTTestCase: void setResponse(org.wiztools.restclient.bean.Response)>(r19);

        virtualinvoke $r7.<junit.framework.TestSuite: void addTest(junit.framework.Test)>(r18);

     label6:
        i5 = i5 + 1;

        goto label4;

     label7:
        return $r7;

     label8:
        $r23 := @caughtexception;

        $r24 = new org.wiztools.restclient.bean.TestException;

        specialinvoke $r24.<org.wiztools.restclient.bean.TestException: void <init>(java.lang.String,java.lang.Throwable)>("", $r23);

        throw $r24;

     label9:
        $r21 := @caughtexception;

        $r22 = new org.wiztools.restclient.bean.TestException;

        specialinvoke $r22.<org.wiztools.restclient.bean.TestException: void <init>(java.lang.String,java.lang.Throwable)>("", $r21);

        throw $r22;

        catch org.codehaus.groovy.control.CompilationFailedException from label1 to label7 with label8;
        catch java.lang.ClassCastException from label1 to label7 with label9;
    }

    private static final int getLineNumber(java.lang.String)
    {
        java.util.regex.Matcher $r2;
        int $i0;
        java.util.regex.Pattern $r0;
        java.lang.String r1, $r3;
        boolean $z0;

        r1 := @parameter0: java.lang.String;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("\\(__GenRESTTestCase__:([0-9]+)\\)");

        $r2 = virtualinvoke $r0.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);

        $z0 = virtualinvoke $r2.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke $r2.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

        return $i0;

     label1:
        return 0;
    }

    public static org.wiztools.restclient.bean.TestResult execute(junit.framework.TestSuite)
    {
        byte[] $r6;
        java.io.ByteArrayOutputStream $r0;
        java.util.Enumeration $r9, $r15;
        junit.textui.TestRunner $r1;
        org.wiztools.restclient.bean.TestExceptionResultBean $r11, $r17;
        java.util.ArrayList $r8, $r14;
        junit.framework.TestSuite r3;
        junit.framework.TestResult $r4;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.String $r7, $r12, $r13, $r18, $r19;
        boolean $z0, $z1;
        java.io.PrintStream $r2;
        org.wiztools.restclient.bean.TestResultBean $r5;
        junit.framework.TestFailure r20, r21;
        java.lang.Object $r10, $r16;

        r3 := @parameter0: junit.framework.TestSuite;

        $r0 = new java.io.ByteArrayOutputStream;

        specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>()>();

        $r1 = new junit.textui.TestRunner;

        $r2 = new java.io.PrintStream;

        specialinvoke $r2.<java.io.PrintStream: void <init>(java.io.OutputStream)>($r0);

        specialinvoke $r1.<junit.textui.TestRunner: void <init>(java.io.PrintStream)>($r2);

        $r4 = virtualinvoke $r1.<junit.textui.TestRunner: junit.framework.TestResult doRun(junit.framework.Test)>(r3);

        $r5 = new org.wiztools.restclient.bean.TestResultBean;

        specialinvoke $r5.<org.wiztools.restclient.bean.TestResultBean: void <init>()>();

        $i0 = virtualinvoke $r4.<junit.framework.TestResult: int runCount()>();

        $i1 = virtualinvoke $r4.<junit.framework.TestResult: int failureCount()>();

        $i2 = virtualinvoke $r4.<junit.framework.TestResult: int errorCount()>();

        virtualinvoke $r5.<org.wiztools.restclient.bean.TestResultBean: void setRunCount(int)>($i0);

        virtualinvoke $r5.<org.wiztools.restclient.bean.TestResultBean: void setFailureCount(int)>($i1);

        virtualinvoke $r5.<org.wiztools.restclient.bean.TestResultBean: void setErrorCount(int)>($i2);

        if $i1 <= 0 goto label3;

        $r14 = new java.util.ArrayList;

        specialinvoke $r14.<java.util.ArrayList: void <init>()>();

        $r15 = virtualinvoke $r4.<junit.framework.TestResult: java.util.Enumeration failures()>();

     label1:
        $z1 = interfaceinvoke $r15.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z1 == 0 goto label2;

        $r16 = interfaceinvoke $r15.<java.util.Enumeration: java.lang.Object nextElement()>();

        r20 = (junit.framework.TestFailure) $r16;

        $r17 = new org.wiztools.restclient.bean.TestExceptionResultBean;

        specialinvoke $r17.<org.wiztools.restclient.bean.TestExceptionResultBean: void <init>()>();

        $r18 = virtualinvoke r20.<junit.framework.TestFailure: java.lang.String exceptionMessage()>();

        virtualinvoke $r17.<org.wiztools.restclient.bean.TestExceptionResultBean: void setExceptionMessage(java.lang.String)>($r18);

        $r19 = virtualinvoke r20.<junit.framework.TestFailure: java.lang.String trace()>();

        $i4 = staticinvoke <org.wiztools.restclient.TestUtil: int getLineNumber(java.lang.String)>($r19);

        virtualinvoke $r17.<org.wiztools.restclient.bean.TestExceptionResultBean: void setLineNumber(int)>($i4);

        interfaceinvoke $r14.<java.util.List: boolean add(java.lang.Object)>($r17);

        goto label1;

     label2:
        virtualinvoke $r5.<org.wiztools.restclient.bean.TestResultBean: void setFailures(java.util.List)>($r14);

     label3:
        if $i2 <= 0 goto label6;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        $r9 = virtualinvoke $r4.<junit.framework.TestResult: java.util.Enumeration errors()>();

     label4:
        $z0 = interfaceinvoke $r9.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label5;

        $r10 = interfaceinvoke $r9.<java.util.Enumeration: java.lang.Object nextElement()>();

        r21 = (junit.framework.TestFailure) $r10;

        $r11 = new org.wiztools.restclient.bean.TestExceptionResultBean;

        specialinvoke $r11.<org.wiztools.restclient.bean.TestExceptionResultBean: void <init>()>();

        $r12 = virtualinvoke r21.<junit.framework.TestFailure: java.lang.String exceptionMessage()>();

        virtualinvoke $r11.<org.wiztools.restclient.bean.TestExceptionResultBean: void setExceptionMessage(java.lang.String)>($r12);

        $r13 = virtualinvoke r21.<junit.framework.TestFailure: java.lang.String trace()>();

        $i3 = staticinvoke <org.wiztools.restclient.TestUtil: int getLineNumber(java.lang.String)>($r13);

        virtualinvoke $r11.<org.wiztools.restclient.bean.TestExceptionResultBean: void setLineNumber(int)>($i3);

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r11);

        goto label4;

     label5:
        virtualinvoke $r5.<org.wiztools.restclient.bean.TestResultBean: void setErrors(java.util.List)>($r8);

     label6:
        $r6 = virtualinvoke $r0.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $r7 = new java.lang.String;

        specialinvoke $r7.<java.lang.String: void <init>(byte[])>($r6);

        virtualinvoke $r5.<org.wiztools.restclient.bean.TestResultBean: void setMessage(java.lang.String)>($r7);

        return $r5;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        java.util.logging.Logger $r2;

        $r0 = class "Lorg/wiztools/restclient/TestUtil;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <org.wiztools.restclient.TestUtil: java.util.logging.Logger LOG> = $r2;

        return;
    }
}
