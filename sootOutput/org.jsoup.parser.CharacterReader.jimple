class org.jsoup.parser.CharacterReader extends java.lang.Object
{
    static final char EOF;
    private final char[] input;
    private final int length;
    private int pos;
    private int mark;

    void <init>(java.lang.String)
    {
        org.jsoup.parser.CharacterReader r0;
        int $i0;
        char[] $r2, $r3;
        java.lang.String r1;

        r0 := @this: org.jsoup.parser.CharacterReader;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.jsoup.parser.CharacterReader: int pos> = 0;

        r0.<org.jsoup.parser.CharacterReader: int mark> = 0;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>(r1);

        $r2 = virtualinvoke r1.<java.lang.String: char[] toCharArray()>();

        r0.<org.jsoup.parser.CharacterReader: char[] input> = $r2;

        $r3 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

        $i0 = lengthof $r3;

        r0.<org.jsoup.parser.CharacterReader: int length> = $i0;

        return;
    }

    int pos()
    {
        int $i0;
        org.jsoup.parser.CharacterReader r0;

        r0 := @this: org.jsoup.parser.CharacterReader;

        $i0 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        return $i0;
    }

    boolean isEmpty()
    {
        org.jsoup.parser.CharacterReader r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.jsoup.parser.CharacterReader;

        $i1 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i0 = r0.<org.jsoup.parser.CharacterReader: int length>;

        if $i1 < $i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    char current()
    {
        org.jsoup.parser.CharacterReader r0;
        int $i0;
        char[] $r1;
        char $c1;
        boolean $z0;

        r0 := @this: org.jsoup.parser.CharacterReader;

        $z0 = virtualinvoke r0.<org.jsoup.parser.CharacterReader: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $c1 = 65535;

        goto label2;

     label1:
        $r1 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

        $i0 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $c1 = $r1[$i0];

     label2:
        return $c1;
    }

    char consume()
    {
        org.jsoup.parser.CharacterReader r0;
        int $i0, $i1, $i2;
        char[] $r1;
        char $c3;
        boolean $z0;

        r0 := @this: org.jsoup.parser.CharacterReader;

        $z0 = virtualinvoke r0.<org.jsoup.parser.CharacterReader: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $c3 = 65535;

        goto label2;

     label1:
        $r1 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

        $i0 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $c3 = $r1[$i0];

     label2:
        $i1 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i2 = $i1 + 1;

        r0.<org.jsoup.parser.CharacterReader: int pos> = $i2;

        return $c3;
    }

    void unconsume()
    {
        int $i0, $i1;
        org.jsoup.parser.CharacterReader r0;

        r0 := @this: org.jsoup.parser.CharacterReader;

        $i0 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i1 = $i0 - 1;

        r0.<org.jsoup.parser.CharacterReader: int pos> = $i1;

        return;
    }

    void advance()
    {
        int $i0, $i1;
        org.jsoup.parser.CharacterReader r0;

        r0 := @this: org.jsoup.parser.CharacterReader;

        $i0 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i1 = $i0 + 1;

        r0.<org.jsoup.parser.CharacterReader: int pos> = $i1;

        return;
    }

    void mark()
    {
        int $i0;
        org.jsoup.parser.CharacterReader r0;

        r0 := @this: org.jsoup.parser.CharacterReader;

        $i0 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        r0.<org.jsoup.parser.CharacterReader: int mark> = $i0;

        return;
    }

    void rewindToMark()
    {
        int $i0;
        org.jsoup.parser.CharacterReader r0;

        r0 := @this: org.jsoup.parser.CharacterReader;

        $i0 = r0.<org.jsoup.parser.CharacterReader: int mark>;

        r0.<org.jsoup.parser.CharacterReader: int pos> = $i0;

        return;
    }

    java.lang.String consumeAsString()
    {
        org.jsoup.parser.CharacterReader r1;
        int $i0, $i1;
        char[] $r2;
        java.lang.String $r0;

        r1 := @this: org.jsoup.parser.CharacterReader;

        $r0 = new java.lang.String;

        $r2 = r1.<org.jsoup.parser.CharacterReader: char[] input>;

        $i0 = r1.<org.jsoup.parser.CharacterReader: int pos>;

        $i1 = $i0 + 1;

        r1.<org.jsoup.parser.CharacterReader: int pos> = $i1;

        specialinvoke $r0.<java.lang.String: void <init>(char[],int,int)>($r2, $i0, 1);

        return $r0;
    }

    int nextIndexOf(char)
    {
        char c1, $c2;
        org.jsoup.parser.CharacterReader r0;
        int $i0, $i3, $i4, i5, $i6, $i7, $i9;
        char[] $r1;

        r0 := @this: org.jsoup.parser.CharacterReader;

        c1 := @parameter0: char;

        i5 = r0.<org.jsoup.parser.CharacterReader: int pos>;

     label1:
        $i0 = r0.<org.jsoup.parser.CharacterReader: int length>;

        if i5 >= $i0 goto label3;

        $r1 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

        $c2 = $r1[i5];

        $i6 = (int) c1;

        $i7 = (int) $c2;

        if $i6 != $i7 goto label2;

        $i3 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i4 = i5 - $i3;

        return $i4;

     label2:
        i5 = i5 + 1;

        goto label1;

     label3:
        $i9 = (int) -1;

        return $i9;
    }

    int nextIndexOf(java.lang.CharSequence)
    {
        int $i1, $i3, $i4, i5, $i6, $i7, $i10, i12, $i13, i14, i15, $i16, $i17, $i18, $i19, $i20, $i21, $i23;
        java.lang.CharSequence r0;
        char $c0, $c2, $c8, $c9, $c11;
        org.jsoup.parser.CharacterReader r1;
        char[] $r2, $r3, $r4;

        r1 := @this: org.jsoup.parser.CharacterReader;

        r0 := @parameter0: java.lang.CharSequence;

        $c0 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(0);

        i12 = r1.<org.jsoup.parser.CharacterReader: int pos>;

     label1:
        $i1 = r1.<org.jsoup.parser.CharacterReader: int length>;

        if i12 >= $i1 goto label7;

        $r2 = r1.<org.jsoup.parser.CharacterReader: char[] input>;

        $c2 = $r2[i12];

        $i16 = (int) $c0;

        $i17 = (int) $c2;

        if $i16 == $i17 goto label3;

     label2:
        i12 = i12 + 1;

        $i10 = r1.<org.jsoup.parser.CharacterReader: int length>;

        if i12 >= $i10 goto label3;

        $r4 = r1.<org.jsoup.parser.CharacterReader: char[] input>;

        $c11 = $r4[i12];

        $i18 = (int) $c0;

        $i19 = (int) $c11;

        if $i18 == $i19 goto label3;

        goto label2;

     label3:
        $i13 = r1.<org.jsoup.parser.CharacterReader: int length>;

        if i12 >= $i13 goto label6;

        i14 = i12 + 1;

        $i3 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        $i4 = i14 + $i3;

        i5 = $i4 - 1;

        i15 = 1;

     label4:
        if i14 >= i5 goto label5;

        $c8 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i15);

        $r3 = r1.<org.jsoup.parser.CharacterReader: char[] input>;

        $c9 = $r3[i14];

        $i20 = (int) $c8;

        $i21 = (int) $c9;

        if $i20 != $i21 goto label5;

        i14 = i14 + 1;

        i15 = i15 + 1;

        goto label4;

     label5:
        if i14 != i5 goto label6;

        $i6 = r1.<org.jsoup.parser.CharacterReader: int pos>;

        $i7 = i12 - $i6;

        return $i7;

     label6:
        i12 = i12 + 1;

        goto label1;

     label7:
        $i23 = (int) -1;

        return $i23;
    }

    java.lang.String consumeTo(char)
    {
        char c0;
        org.jsoup.parser.CharacterReader r0;
        int $i1, $i2, $i3, $i4, $i6;
        char[] $r3;
        java.lang.String $r1, $r4;

        r0 := @this: org.jsoup.parser.CharacterReader;

        c0 := @parameter0: char;

        $i1 = virtualinvoke r0.<org.jsoup.parser.CharacterReader: int nextIndexOf(char)>(c0);

        $i6 = (int) -1;

        if $i1 == $i6 goto label1;

        $r4 = new java.lang.String;

        $r3 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

        $i2 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        specialinvoke $r4.<java.lang.String: void <init>(char[],int,int)>($r3, $i2, $i1);

        $i3 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i4 = $i3 + $i1;

        r0.<org.jsoup.parser.CharacterReader: int pos> = $i4;

        return $r4;

     label1:
        $r1 = virtualinvoke r0.<org.jsoup.parser.CharacterReader: java.lang.String consumeToEnd()>();

        return $r1;
    }

    java.lang.String consumeTo(java.lang.String)
    {
        org.jsoup.parser.CharacterReader r0;
        int $i0, $i1, $i2, $i3, $i5;
        char[] $r4;
        java.lang.String r1, $r2, $r5;

        r0 := @this: org.jsoup.parser.CharacterReader;

        r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<org.jsoup.parser.CharacterReader: int nextIndexOf(java.lang.CharSequence)>(r1);

        $i5 = (int) -1;

        if $i0 == $i5 goto label1;

        $r5 = new java.lang.String;

        $r4 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

        $i1 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        specialinvoke $r5.<java.lang.String: void <init>(char[],int,int)>($r4, $i1, $i0);

        $i2 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i3 = $i2 + $i0;

        r0.<org.jsoup.parser.CharacterReader: int pos> = $i3;

        return $r5;

     label1:
        $r2 = virtualinvoke r0.<org.jsoup.parser.CharacterReader: java.lang.String consumeToEnd()>();

        return $r2;
    }

    transient java.lang.String consumeToAny(char[])
    {
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i12, $i13, $i14;
        java.lang.String $r4, $r5;
        char $c10, $c11;
        org.jsoup.parser.CharacterReader r0;
        char[] $r1, r2, $r3;

        r0 := @this: org.jsoup.parser.CharacterReader;

        r2 := @parameter0: char[];

        i0 = r0.<org.jsoup.parser.CharacterReader: int pos>;

     label1:
        $i2 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i1 = r0.<org.jsoup.parser.CharacterReader: int length>;

        if $i2 >= $i1 goto label5;

        i12 = 0;

     label2:
        $i6 = lengthof r2;

        if i12 >= $i6 goto label4;

        $r3 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

        $i9 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $c11 = $r3[$i9];

        $c10 = r2[i12];

        $i13 = (int) $c11;

        $i14 = (int) $c10;

        if $i13 != $i14 goto label3;

        goto label5;

     label3:
        i12 = i12 + 1;

        goto label2;

     label4:
        $i7 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i8 = $i7 + 1;

        r0.<org.jsoup.parser.CharacterReader: int pos> = $i8;

        goto label1;

     label5:
        $i3 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        if $i3 <= i0 goto label6;

        $r5 = new java.lang.String;

        $r4 = $r5;

        $r1 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

        $i4 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i5 = $i4 - i0;

        specialinvoke $r5.<java.lang.String: void <init>(char[],int,int)>($r1, i0, $i5);

        goto label7;

     label6:
        $r4 = "";

     label7:
        return $r4;
    }

    java.lang.String consumeToEnd()
    {
        org.jsoup.parser.CharacterReader r1;
        int $i0, $i1, $i2, $i3, $i4;
        char[] $r2;
        java.lang.String $r0;

        r1 := @this: org.jsoup.parser.CharacterReader;

        $r0 = new java.lang.String;

        $r2 = r1.<org.jsoup.parser.CharacterReader: char[] input>;

        $i3 = r1.<org.jsoup.parser.CharacterReader: int pos>;

        $i1 = r1.<org.jsoup.parser.CharacterReader: int length>;

        $i0 = r1.<org.jsoup.parser.CharacterReader: int pos>;

        $i2 = $i1 - $i0;

        specialinvoke $r0.<java.lang.String: void <init>(char[],int,int)>($r2, $i3, $i2);

        $i4 = r1.<org.jsoup.parser.CharacterReader: int length>;

        r1.<org.jsoup.parser.CharacterReader: int pos> = $i4;

        return $r0;
    }

    java.lang.String consumeLetterSequence()
    {
        int i0, $i1, $i2, $i3, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        java.lang.String $r4;
        char c4;
        org.jsoup.parser.CharacterReader r0;
        char[] $r1, $r3;

        r0 := @this: org.jsoup.parser.CharacterReader;

        i0 = r0.<org.jsoup.parser.CharacterReader: int pos>;

     label1:
        $i2 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i1 = r0.<org.jsoup.parser.CharacterReader: int length>;

        if $i2 >= $i1 goto label4;

        $r1 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

        $i3 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        c4 = $r1[$i3];

        $i9 = (int) c4;

        if $i9 < 65 goto label2;

        $i10 = (int) c4;

        if $i10 <= 90 goto label3;

     label2:
        $i11 = (int) c4;

        if $i11 < 97 goto label4;

        $i12 = (int) c4;

        if $i12 > 122 goto label4;

     label3:
        $i5 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i6 = $i5 + 1;

        r0.<org.jsoup.parser.CharacterReader: int pos> = $i6;

        goto label1;

     label4:
        $r4 = new java.lang.String;

        $r3 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

        $i7 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i8 = $i7 - i0;

        specialinvoke $r4.<java.lang.String: void <init>(char[],int,int)>($r3, i0, $i8);

        return $r4;
    }

    java.lang.String consumeLetterThenDigitSequence()
    {
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18;
        java.lang.String $r5;
        boolean $z0;
        char c9, c10;
        org.jsoup.parser.CharacterReader r0;
        char[] $r1, $r2, $r4;

        r0 := @this: org.jsoup.parser.CharacterReader;

        i0 = r0.<org.jsoup.parser.CharacterReader: int pos>;

     label1:
        $i2 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i1 = r0.<org.jsoup.parser.CharacterReader: int length>;

        if $i2 >= $i1 goto label4;

        $r2 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

        $i6 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        c9 = $r2[$i6];

        $i13 = (int) c9;

        if $i13 < 65 goto label2;

        $i14 = (int) c9;

        if $i14 <= 90 goto label3;

     label2:
        $i15 = (int) c9;

        if $i15 < 97 goto label4;

        $i16 = (int) c9;

        if $i16 > 122 goto label4;

     label3:
        $i7 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i8 = $i7 + 1;

        r0.<org.jsoup.parser.CharacterReader: int pos> = $i8;

        goto label1;

     label4:
        $z0 = virtualinvoke r0.<org.jsoup.parser.CharacterReader: boolean isEmpty()>();

        if $z0 != 0 goto label5;

        $r1 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

        $i3 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        c10 = $r1[$i3];

        $i17 = (int) c10;

        if $i17 < 48 goto label5;

        $i18 = (int) c10;

        if $i18 > 57 goto label5;

        $i4 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i5 = $i4 + 1;

        r0.<org.jsoup.parser.CharacterReader: int pos> = $i5;

        goto label4;

     label5:
        $r5 = new java.lang.String;

        $r4 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

        $i11 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i12 = $i11 - i0;

        specialinvoke $r5.<java.lang.String: void <init>(char[],int,int)>($r4, i0, $i12);

        return $r5;
    }

    java.lang.String consumeHexSequence()
    {
        int i0, $i1, $i2, $i3, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        java.lang.String $r4;
        char c4;
        org.jsoup.parser.CharacterReader r0;
        char[] $r1, $r3;

        r0 := @this: org.jsoup.parser.CharacterReader;

        i0 = r0.<org.jsoup.parser.CharacterReader: int pos>;

     label1:
        $i2 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i1 = r0.<org.jsoup.parser.CharacterReader: int length>;

        if $i2 >= $i1 goto label5;

        $r1 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

        $i3 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        c4 = $r1[$i3];

        $i9 = (int) c4;

        if $i9 < 48 goto label2;

        $i10 = (int) c4;

        if $i10 <= 57 goto label4;

     label2:
        $i11 = (int) c4;

        if $i11 < 65 goto label3;

        $i12 = (int) c4;

        if $i12 <= 70 goto label4;

     label3:
        $i13 = (int) c4;

        if $i13 < 97 goto label5;

        $i14 = (int) c4;

        if $i14 > 102 goto label5;

     label4:
        $i5 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i6 = $i5 + 1;

        r0.<org.jsoup.parser.CharacterReader: int pos> = $i6;

        goto label1;

     label5:
        $r4 = new java.lang.String;

        $r3 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

        $i7 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i8 = $i7 - i0;

        specialinvoke $r4.<java.lang.String: void <init>(char[],int,int)>($r3, i0, $i8);

        return $r4;
    }

    java.lang.String consumeDigitSequence()
    {
        char c4;
        org.jsoup.parser.CharacterReader r0;
        int i0, $i1, $i2, $i3, $i5, $i6, $i7, $i8, $i9, $i10;
        char[] $r1, $r3;
        java.lang.String $r4;

        r0 := @this: org.jsoup.parser.CharacterReader;

        i0 = r0.<org.jsoup.parser.CharacterReader: int pos>;

     label1:
        $i2 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i1 = r0.<org.jsoup.parser.CharacterReader: int length>;

        if $i2 >= $i1 goto label2;

        $r1 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

        $i3 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        c4 = $r1[$i3];

        $i9 = (int) c4;

        if $i9 < 48 goto label2;

        $i10 = (int) c4;

        if $i10 > 57 goto label2;

        $i5 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i6 = $i5 + 1;

        r0.<org.jsoup.parser.CharacterReader: int pos> = $i6;

        goto label1;

     label2:
        $r4 = new java.lang.String;

        $r3 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

        $i7 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i8 = $i7 - i0;

        specialinvoke $r4.<java.lang.String: void <init>(char[],int,int)>($r3, i0, $i8);

        return $r4;
    }

    boolean matches(char)
    {
        char c1, $c2;
        org.jsoup.parser.CharacterReader r0;
        int $i0, $i3, $i4;
        char[] $r1;
        boolean $z0, $z1;

        r0 := @this: org.jsoup.parser.CharacterReader;

        c1 := @parameter0: char;

        $z0 = virtualinvoke r0.<org.jsoup.parser.CharacterReader: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r1 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

        $i0 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $c2 = $r1[$i0];

        $i3 = (int) $c2;

        $i4 = (int) c1;

        if $i3 != $i4 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    boolean matches(java.lang.String)
    {
        char $c4, $c7;
        org.jsoup.parser.CharacterReader r1;
        int $i0, $i1, $i2, $i3, $i5, $i6, i8, $i9, $i10;
        char[] $r2;
        java.lang.String r0;

        r1 := @this: org.jsoup.parser.CharacterReader;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $i2 = r1.<org.jsoup.parser.CharacterReader: int length>;

        $i1 = r1.<org.jsoup.parser.CharacterReader: int pos>;

        $i3 = $i2 - $i1;

        if $i0 <= $i3 goto label1;

        return 0;

     label1:
        i8 = 0;

     label2:
        if i8 >= $i0 goto label4;

        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i8);

        $r2 = r1.<org.jsoup.parser.CharacterReader: char[] input>;

        $i5 = r1.<org.jsoup.parser.CharacterReader: int pos>;

        $i6 = $i5 + i8;

        $c7 = $r2[$i6];

        $i9 = (int) $c4;

        $i10 = (int) $c7;

        if $i9 == $i10 goto label3;

        return 0;

     label3:
        i8 = i8 + 1;

        goto label2;

     label4:
        return 1;
    }

    boolean matchesIgnoreCase(java.lang.String)
    {
        int $i0, $i1, $i2, $i3, $i6, $i7, i10, $i11, $i12;
        java.lang.String r0;
        char $c4, $c5, $c8, $c9;
        org.jsoup.parser.CharacterReader r1;
        char[] $r2;

        r1 := @this: org.jsoup.parser.CharacterReader;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $i2 = r1.<org.jsoup.parser.CharacterReader: int length>;

        $i1 = r1.<org.jsoup.parser.CharacterReader: int pos>;

        $i3 = $i2 - $i1;

        if $i0 <= $i3 goto label1;

        return 0;

     label1:
        i10 = 0;

     label2:
        if i10 >= $i0 goto label4;

        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i10);

        $c5 = staticinvoke <java.lang.Character: char toUpperCase(char)>($c4);

        $r2 = r1.<org.jsoup.parser.CharacterReader: char[] input>;

        $i6 = r1.<org.jsoup.parser.CharacterReader: int pos>;

        $i7 = $i6 + i10;

        $c8 = $r2[$i7];

        $c9 = staticinvoke <java.lang.Character: char toUpperCase(char)>($c8);

        $i11 = (int) $c5;

        $i12 = (int) $c9;

        if $i11 == $i12 goto label3;

        return 0;

     label3:
        i10 = i10 + 1;

        goto label2;

     label4:
        return 1;
    }

    transient boolean matchesAny(char[])
    {
        char c1, c3;
        org.jsoup.parser.CharacterReader r0;
        int $i0, i2, i4, $i5, $i6;
        char[] $r1, r2;
        boolean $z0;

        r0 := @this: org.jsoup.parser.CharacterReader;

        r2 := @parameter0: char[];

        $z0 = virtualinvoke r0.<org.jsoup.parser.CharacterReader: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r1 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

        $i0 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        c1 = $r1[$i0];

        i2 = lengthof r2;

        i4 = 0;

     label2:
        if i4 >= i2 goto label4;

        c3 = r2[i4];

        $i5 = (int) c3;

        $i6 = (int) c1;

        if $i5 != $i6 goto label3;

        return 1;

     label3:
        i4 = i4 + 1;

        goto label2;

     label4:
        return 0;
    }

    boolean matchesLetter()
    {
        char c1;
        org.jsoup.parser.CharacterReader r0;
        int $i0, $i2, $i3, $i4, $i5;
        char[] $r1;
        boolean $z0, $z1;

        r0 := @this: org.jsoup.parser.CharacterReader;

        $z0 = virtualinvoke r0.<org.jsoup.parser.CharacterReader: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r1 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

        $i0 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        c1 = $r1[$i0];

        $i2 = (int) c1;

        if $i2 < 65 goto label2;

        $i3 = (int) c1;

        if $i3 <= 90 goto label3;

     label2:
        $i4 = (int) c1;

        if $i4 < 97 goto label4;

        $i5 = (int) c1;

        if $i5 > 122 goto label4;

     label3:
        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        return $z1;
    }

    boolean matchesDigit()
    {
        char c1;
        org.jsoup.parser.CharacterReader r0;
        int $i0, $i2, $i3;
        char[] $r1;
        boolean $z0, $z1;

        r0 := @this: org.jsoup.parser.CharacterReader;

        $z0 = virtualinvoke r0.<org.jsoup.parser.CharacterReader: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r1 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

        $i0 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        c1 = $r1[$i0];

        $i2 = (int) c1;

        if $i2 < 48 goto label2;

        $i3 = (int) c1;

        if $i3 > 57 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    boolean matchConsume(java.lang.String)
    {
        org.jsoup.parser.CharacterReader r0;
        int $i0, $i1, $i2;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.jsoup.parser.CharacterReader;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<org.jsoup.parser.CharacterReader: boolean matches(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        $i0 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        $i2 = $i0 + $i1;

        r0.<org.jsoup.parser.CharacterReader: int pos> = $i2;

        return 1;

     label1:
        return 0;
    }

    boolean matchConsumeIgnoreCase(java.lang.String)
    {
        org.jsoup.parser.CharacterReader r0;
        int $i0, $i1, $i2;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.jsoup.parser.CharacterReader;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<org.jsoup.parser.CharacterReader: boolean matchesIgnoreCase(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        $i0 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        $i2 = $i0 + $i1;

        r0.<org.jsoup.parser.CharacterReader: int pos> = $i2;

        return 1;

     label1:
        return 0;
    }

    boolean containsIgnoreCase(java.lang.String)
    {
        org.jsoup.parser.CharacterReader r5;
        java.util.Locale $r1, $r3;
        int $i0, $i1, $i3, $i5;
        java.lang.String r0, $r2, $r4;
        boolean $z0;

        r5 := @this: org.jsoup.parser.CharacterReader;

        r0 := @parameter0: java.lang.String;

        $r1 = <java.util.Locale: java.util.Locale ENGLISH>;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r1);

        $r3 = <java.util.Locale: java.util.Locale ENGLISH>;

        $r4 = virtualinvoke r0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r3);

        $i0 = virtualinvoke r5.<org.jsoup.parser.CharacterReader: int nextIndexOf(java.lang.CharSequence)>($r2);

        $i3 = (int) -1;

        if $i0 > $i3 goto label1;

        $i1 = virtualinvoke r5.<org.jsoup.parser.CharacterReader: int nextIndexOf(java.lang.CharSequence)>($r4);

        $i5 = (int) -1;

        if $i1 <= $i5 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public java.lang.String toString()
    {
        org.jsoup.parser.CharacterReader r1;
        int $i0, $i1, $i2, $i3;
        char[] $r2;
        java.lang.String $r0;

        r1 := @this: org.jsoup.parser.CharacterReader;

        $r0 = new java.lang.String;

        $r2 = r1.<org.jsoup.parser.CharacterReader: char[] input>;

        $i3 = r1.<org.jsoup.parser.CharacterReader: int pos>;

        $i1 = r1.<org.jsoup.parser.CharacterReader: int length>;

        $i0 = r1.<org.jsoup.parser.CharacterReader: int pos>;

        $i2 = $i1 - $i0;

        specialinvoke $r0.<java.lang.String: void <init>(char[],int,int)>($r2, $i3, $i2);

        return $r0;
    }

    public static void <clinit>()
    {
        <org.jsoup.parser.CharacterReader: char EOF> = 65535;

        return;
    }
}
