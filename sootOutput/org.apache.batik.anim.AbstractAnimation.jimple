public abstract class org.apache.batik.anim.AbstractAnimation extends java.lang.Object
{
    public static final short CALC_MODE_DISCRETE;
    public static final short CALC_MODE_LINEAR;
    public static final short CALC_MODE_PACED;
    public static final short CALC_MODE_SPLINE;
    protected org.apache.batik.anim.timing.TimedElement timedElement;
    protected org.apache.batik.dom.anim.AnimatableElement animatableElement;
    protected org.apache.batik.anim.AbstractAnimation lowerAnimation;
    protected org.apache.batik.anim.AbstractAnimation higherAnimation;
    protected boolean isDirty;
    protected boolean isActive;
    protected boolean isFrozen;
    protected float beginTime;
    protected org.apache.batik.anim.values.AnimatableValue value;
    protected org.apache.batik.anim.values.AnimatableValue composedValue;
    protected boolean usesUnderlyingValue;
    protected boolean toAnimation;

    protected void <init>(org.apache.batik.anim.timing.TimedElement, org.apache.batik.dom.anim.AnimatableElement)
    {
        org.apache.batik.anim.timing.TimedElement r1;
        org.apache.batik.dom.anim.AnimatableElement r2;
        org.apache.batik.anim.AbstractAnimation r0;

        r0 := @this: org.apache.batik.anim.AbstractAnimation;

        r1 := @parameter0: org.apache.batik.anim.timing.TimedElement;

        r2 := @parameter1: org.apache.batik.dom.anim.AnimatableElement;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.batik.anim.AbstractAnimation: org.apache.batik.anim.timing.TimedElement timedElement> = r1;

        r0.<org.apache.batik.anim.AbstractAnimation: org.apache.batik.dom.anim.AnimatableElement animatableElement> = r2;

        return;
    }

    public org.apache.batik.anim.timing.TimedElement getTimedElement()
    {
        org.apache.batik.anim.timing.TimedElement $r1;
        org.apache.batik.anim.AbstractAnimation r0;

        r0 := @this: org.apache.batik.anim.AbstractAnimation;

        $r1 = r0.<org.apache.batik.anim.AbstractAnimation: org.apache.batik.anim.timing.TimedElement timedElement>;

        return $r1;
    }

    public org.apache.batik.anim.values.AnimatableValue getValue()
    {
        org.apache.batik.anim.AbstractAnimation r0;
        org.apache.batik.anim.values.AnimatableValue $r1;
        boolean $z0, $z1;

        r0 := @this: org.apache.batik.anim.AbstractAnimation;

        $z0 = r0.<org.apache.batik.anim.AbstractAnimation: boolean isActive>;

        if $z0 != 0 goto label1;

        $z1 = r0.<org.apache.batik.anim.AbstractAnimation: boolean isFrozen>;

        if $z1 != 0 goto label1;

        return null;

     label1:
        $r1 = r0.<org.apache.batik.anim.AbstractAnimation: org.apache.batik.anim.values.AnimatableValue value>;

        return $r1;
    }

    public org.apache.batik.anim.values.AnimatableValue getComposedValue()
    {
        org.apache.batik.anim.AbstractAnimation r0, $r1, $r2;
        org.apache.batik.dom.anim.AnimatableElement $r3;
        org.apache.batik.anim.values.AnimatableValue r4, $r5, $r6, $r7, $r8;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.apache.batik.anim.AbstractAnimation;

        $z0 = r0.<org.apache.batik.anim.AbstractAnimation: boolean isActive>;

        if $z0 != 0 goto label1;

        $z3 = r0.<org.apache.batik.anim.AbstractAnimation: boolean isFrozen>;

        if $z3 != 0 goto label1;

        return null;

     label1:
        $z1 = r0.<org.apache.batik.anim.AbstractAnimation: boolean isDirty>;

        if $z1 == 0 goto label4;

        r4 = null;

        $z2 = virtualinvoke r0.<org.apache.batik.anim.AbstractAnimation: boolean willReplace()>();

        if $z2 != 0 goto label3;

        $r1 = r0.<org.apache.batik.anim.AbstractAnimation: org.apache.batik.anim.AbstractAnimation lowerAnimation>;

        if $r1 != null goto label2;

        $r3 = r0.<org.apache.batik.anim.AbstractAnimation: org.apache.batik.dom.anim.AnimatableElement animatableElement>;

        r4 = interfaceinvoke $r3.<org.apache.batik.dom.anim.AnimatableElement: org.apache.batik.anim.values.AnimatableValue getUnderlyingValue()>();

        r0.<org.apache.batik.anim.AbstractAnimation: boolean usesUnderlyingValue> = 1;

        goto label3;

     label2:
        $r2 = r0.<org.apache.batik.anim.AbstractAnimation: org.apache.batik.anim.AbstractAnimation lowerAnimation>;

        r4 = virtualinvoke $r2.<org.apache.batik.anim.AbstractAnimation: org.apache.batik.anim.values.AnimatableValue getComposedValue()>();

        r0.<org.apache.batik.anim.AbstractAnimation: boolean usesUnderlyingValue> = 0;

     label3:
        $r5 = r0.<org.apache.batik.anim.AbstractAnimation: org.apache.batik.anim.values.AnimatableValue value>;

        $r6 = r0.<org.apache.batik.anim.AbstractAnimation: org.apache.batik.anim.values.AnimatableValue composedValue>;

        $r7 = virtualinvoke $r5.<org.apache.batik.anim.values.AnimatableValue: org.apache.batik.anim.values.AnimatableValue interpolate(org.apache.batik.anim.values.AnimatableValue,org.apache.batik.anim.values.AnimatableValue,float,org.apache.batik.anim.values.AnimatableValue,int)>($r6, null, 0.0F, r4, 1);

        r0.<org.apache.batik.anim.AbstractAnimation: org.apache.batik.anim.values.AnimatableValue composedValue> = $r7;

        r0.<org.apache.batik.anim.AbstractAnimation: boolean isDirty> = 0;

     label4:
        $r8 = r0.<org.apache.batik.anim.AbstractAnimation: org.apache.batik.anim.values.AnimatableValue composedValue>;

        return $r8;
    }

    public java.lang.String toString()
    {
        java.lang.String $r2;
        org.apache.batik.anim.timing.TimedElement $r1;
        org.apache.batik.anim.AbstractAnimation r0;

        r0 := @this: org.apache.batik.anim.AbstractAnimation;

        $r1 = r0.<org.apache.batik.anim.AbstractAnimation: org.apache.batik.anim.timing.TimedElement timedElement>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }

    public boolean usesUnderlyingValue()
    {
        org.apache.batik.anim.AbstractAnimation r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.batik.anim.AbstractAnimation;

        $z0 = r0.<org.apache.batik.anim.AbstractAnimation: boolean usesUnderlyingValue>;

        if $z0 != 0 goto label1;

        $z1 = r0.<org.apache.batik.anim.AbstractAnimation: boolean toAnimation>;

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    protected boolean willReplace()
    {
        org.apache.batik.anim.AbstractAnimation r0;

        r0 := @this: org.apache.batik.anim.AbstractAnimation;

        return 1;
    }

    protected void markDirty()
    {
        org.apache.batik.anim.AbstractAnimation r0, $r1, $r2, $r3, $r4;
        boolean $z0, $z1;

        r0 := @this: org.apache.batik.anim.AbstractAnimation;

        r0.<org.apache.batik.anim.AbstractAnimation: boolean isDirty> = 1;

        $r1 = r0.<org.apache.batik.anim.AbstractAnimation: org.apache.batik.anim.AbstractAnimation higherAnimation>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.batik.anim.AbstractAnimation: org.apache.batik.anim.AbstractAnimation higherAnimation>;

        $z0 = virtualinvoke $r2.<org.apache.batik.anim.AbstractAnimation: boolean willReplace()>();

        if $z0 != 0 goto label1;

        $r3 = r0.<org.apache.batik.anim.AbstractAnimation: org.apache.batik.anim.AbstractAnimation higherAnimation>;

        $z1 = $r3.<org.apache.batik.anim.AbstractAnimation: boolean isDirty>;

        if $z1 != 0 goto label1;

        $r4 = r0.<org.apache.batik.anim.AbstractAnimation: org.apache.batik.anim.AbstractAnimation higherAnimation>;

        virtualinvoke $r4.<org.apache.batik.anim.AbstractAnimation: void markDirty()>();

     label1:
        return;
    }

    protected void sampledLastValue(int)
    {
        int i0;
        org.apache.batik.anim.AbstractAnimation r0;

        r0 := @this: org.apache.batik.anim.AbstractAnimation;

        i0 := @parameter0: int;

        return;
    }

    protected abstract void sampledAt(float, float, int);

    public static void <clinit>()
    {
        <org.apache.batik.anim.AbstractAnimation: short CALC_MODE_SPLINE> = 3;

        <org.apache.batik.anim.AbstractAnimation: short CALC_MODE_PACED> = 2;

        <org.apache.batik.anim.AbstractAnimation: short CALC_MODE_LINEAR> = 1;

        <org.apache.batik.anim.AbstractAnimation: short CALC_MODE_DISCRETE> = 0;

        return;
    }
}
