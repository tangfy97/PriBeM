public class org.apache.poi.poifs.crypt.agile.AgileDecryptor extends org.apache.poi.poifs.crypt.Decryptor
{
    private final org.apache.poi.poifs.crypt.agile.AgileEncryptionInfoBuilder builder;
    private long _length;
    protected static final byte[] kVerifierInputBlock;
    protected static final byte[] kHashedVerifierBlock;
    protected static final byte[] kCryptoKeyBlock;
    protected static final byte[] kIntegrityKeyBlock;
    protected static final byte[] kIntegrityValueBlock;

    protected void <init>(org.apache.poi.poifs.crypt.agile.AgileEncryptionInfoBuilder)
    {
        org.apache.poi.poifs.crypt.agile.AgileDecryptor r0;
        org.apache.poi.poifs.crypt.agile.AgileEncryptionInfoBuilder r1;
        org.apache.poi.poifs.crypt.EncryptionInfo $r2;

        r0 := @this: org.apache.poi.poifs.crypt.agile.AgileDecryptor;

        r1 := @parameter0: org.apache.poi.poifs.crypt.agile.AgileEncryptionInfoBuilder;

        $r2 = virtualinvoke r1.<org.apache.poi.poifs.crypt.agile.AgileEncryptionInfoBuilder: org.apache.poi.poifs.crypt.EncryptionInfo getInfo()>();

        specialinvoke r0.<org.apache.poi.poifs.crypt.Decryptor: void <init>(org.apache.poi.poifs.crypt.EncryptionInfo)>($r2);

        r0.<org.apache.poi.poifs.crypt.agile.AgileDecryptor: long _length> = -1L;

        r0.<org.apache.poi.poifs.crypt.agile.AgileDecryptor: org.apache.poi.poifs.crypt.agile.AgileEncryptionInfoBuilder builder> = r1;

        return;
    }

    public boolean verifyPassword(java.lang.String) throws java.security.GeneralSecurityException
    {
        byte[] $r9, $r10, $r12, $r13, $r14, $r16, $r18, $r19, $r20, $r21, $r23, $r24, $r25, $r26, $r30, $r31, $r32, $r35, $r36, $r37, $r38, $r39, $r40, $r43, $r44, $r45;
        org.apache.poi.poifs.crypt.ChainingMode $r33, $r41;
        javax.crypto.spec.SecretKeySpec $r27;
        boolean $z0;
        org.apache.poi.poifs.crypt.agile.AgileEncryptionInfoBuilder $r1, $r3, $r11, $r17, $r22;
        org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier $r2;
        java.security.MessageDigest $r15;
        javax.crypto.Cipher $r34, $r42;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6;
        java.lang.String r7, $r29;
        org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader $r4;
        org.apache.poi.poifs.crypt.HashAlgorithm $r5, $r8;
        org.apache.poi.poifs.crypt.agile.AgileDecryptor r0;
        org.apache.poi.poifs.crypt.CipherAlgorithm $r6, $r28;

        r0 := @this: org.apache.poi.poifs.crypt.agile.AgileDecryptor;

        r7 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.poi.poifs.crypt.agile.AgileDecryptor: org.apache.poi.poifs.crypt.agile.AgileEncryptionInfoBuilder builder>;

        $r2 = virtualinvoke $r1.<org.apache.poi.poifs.crypt.agile.AgileEncryptionInfoBuilder: org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier getVerifier()>();

        $r3 = r0.<org.apache.poi.poifs.crypt.agile.AgileDecryptor: org.apache.poi.poifs.crypt.agile.AgileEncryptionInfoBuilder builder>;

        $r4 = virtualinvoke $r3.<org.apache.poi.poifs.crypt.agile.AgileEncryptionInfoBuilder: org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader getHeader()>();

        $r5 = virtualinvoke $r4.<org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader: org.apache.poi.poifs.crypt.HashAlgorithm getHashAlgorithmEx()>();

        $r6 = virtualinvoke $r4.<org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader: org.apache.poi.poifs.crypt.CipherAlgorithm getCipherAlgorithm()>();

        $i0 = virtualinvoke $r4.<org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader: int getBlockSize()>();

        $i1 = virtualinvoke $r4.<org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader: int getKeySize()>();

        i2 = $i1 / 8;

        $r8 = virtualinvoke $r2.<org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier: org.apache.poi.poifs.crypt.HashAlgorithm getHashAlgorithm()>();

        $r9 = virtualinvoke $r2.<org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier: byte[] getSalt()>();

        $i3 = virtualinvoke $r2.<org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier: int getSpinCount()>();

        $r10 = staticinvoke <org.apache.poi.poifs.crypt.CryptoFunctions: byte[] hashPassword(java.lang.String,org.apache.poi.poifs.crypt.HashAlgorithm,byte[],int)>(r7, $r8, $r9, $i3);

        $r11 = r0.<org.apache.poi.poifs.crypt.agile.AgileDecryptor: org.apache.poi.poifs.crypt.agile.AgileEncryptionInfoBuilder builder>;

        $r12 = <org.apache.poi.poifs.crypt.agile.AgileDecryptor: byte[] kVerifierInputBlock>;

        $r13 = virtualinvoke $r2.<org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier: byte[] getEncryptedVerifier()>();

        $r14 = staticinvoke <org.apache.poi.poifs.crypt.agile.AgileDecryptor: byte[] hashInput(org.apache.poi.poifs.crypt.agile.AgileEncryptionInfoBuilder,byte[],byte[],byte[],int)>($r11, $r10, $r12, $r13, 2);

        virtualinvoke r0.<org.apache.poi.poifs.crypt.agile.AgileDecryptor: void setVerifier(byte[])>($r14);

        $r15 = staticinvoke <org.apache.poi.poifs.crypt.CryptoFunctions: java.security.MessageDigest getMessageDigest(org.apache.poi.poifs.crypt.HashAlgorithm)>($r5);

        $r16 = virtualinvoke $r15.<java.security.MessageDigest: byte[] digest(byte[])>($r14);

        $r17 = r0.<org.apache.poi.poifs.crypt.agile.AgileDecryptor: org.apache.poi.poifs.crypt.agile.AgileEncryptionInfoBuilder builder>;

        $r18 = <org.apache.poi.poifs.crypt.agile.AgileDecryptor: byte[] kHashedVerifierBlock>;

        $r19 = virtualinvoke $r2.<org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier: byte[] getEncryptedVerifierHash()>();

        $r20 = staticinvoke <org.apache.poi.poifs.crypt.agile.AgileDecryptor: byte[] hashInput(org.apache.poi.poifs.crypt.agile.AgileEncryptionInfoBuilder,byte[],byte[],byte[],int)>($r17, $r10, $r18, $r19, 2);

        $i4 = $r5.<org.apache.poi.poifs.crypt.HashAlgorithm: int hashSize>;

        $r21 = staticinvoke <org.apache.poi.poifs.crypt.CryptoFunctions: byte[] getBlock0(byte[],int)>($r20, $i4);

        $r22 = r0.<org.apache.poi.poifs.crypt.agile.AgileDecryptor: org.apache.poi.poifs.crypt.agile.AgileEncryptionInfoBuilder builder>;

        $r23 = <org.apache.poi.poifs.crypt.agile.AgileDecryptor: byte[] kCryptoKeyBlock>;

        $r24 = virtualinvoke $r2.<org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier: byte[] getEncryptedKey()>();

        $r25 = staticinvoke <org.apache.poi.poifs.crypt.agile.AgileDecryptor: byte[] hashInput(org.apache.poi.poifs.crypt.agile.AgileEncryptionInfoBuilder,byte[],byte[],byte[],int)>($r22, $r10, $r23, $r24, 2);

        $r26 = staticinvoke <org.apache.poi.poifs.crypt.CryptoFunctions: byte[] getBlock0(byte[],int)>($r25, i2);

        $r27 = new javax.crypto.spec.SecretKeySpec;

        $r28 = virtualinvoke $r2.<org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier: org.apache.poi.poifs.crypt.CipherAlgorithm getCipherAlgorithm()>();

        $r29 = $r28.<org.apache.poi.poifs.crypt.CipherAlgorithm: java.lang.String jceId>;

        specialinvoke $r27.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r26, $r29);

        $r30 = virtualinvoke $r4.<org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader: byte[] getKeySalt()>();

        $r31 = <org.apache.poi.poifs.crypt.agile.AgileDecryptor: byte[] kIntegrityKeyBlock>;

        $r32 = staticinvoke <org.apache.poi.poifs.crypt.CryptoFunctions: byte[] generateIv(org.apache.poi.poifs.crypt.HashAlgorithm,byte[],byte[],int)>($r5, $r30, $r31, $i0);

        $r33 = virtualinvoke $r2.<org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier: org.apache.poi.poifs.crypt.ChainingMode getChainingMode()>();

        $r34 = staticinvoke <org.apache.poi.poifs.crypt.CryptoFunctions: javax.crypto.Cipher getCipher(javax.crypto.SecretKey,org.apache.poi.poifs.crypt.CipherAlgorithm,org.apache.poi.poifs.crypt.ChainingMode,byte[],int)>($r27, $r6, $r33, $r32, 2);

        $r35 = virtualinvoke $r4.<org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader: byte[] getEncryptedHmacKey()>();

        $r36 = virtualinvoke $r34.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r35);

        $i5 = $r5.<org.apache.poi.poifs.crypt.HashAlgorithm: int hashSize>;

        $r37 = staticinvoke <org.apache.poi.poifs.crypt.CryptoFunctions: byte[] getBlock0(byte[],int)>($r36, $i5);

        $r38 = virtualinvoke $r4.<org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader: byte[] getKeySalt()>();

        $r39 = <org.apache.poi.poifs.crypt.agile.AgileDecryptor: byte[] kIntegrityValueBlock>;

        $r40 = staticinvoke <org.apache.poi.poifs.crypt.CryptoFunctions: byte[] generateIv(org.apache.poi.poifs.crypt.HashAlgorithm,byte[],byte[],int)>($r5, $r38, $r39, $i0);

        $r41 = virtualinvoke $r2.<org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier: org.apache.poi.poifs.crypt.ChainingMode getChainingMode()>();

        $r42 = staticinvoke <org.apache.poi.poifs.crypt.CryptoFunctions: javax.crypto.Cipher getCipher(javax.crypto.SecretKey,org.apache.poi.poifs.crypt.CipherAlgorithm,org.apache.poi.poifs.crypt.ChainingMode,byte[],int)>($r27, $r6, $r41, $r40, 2);

        $r43 = virtualinvoke $r4.<org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader: byte[] getEncryptedHmacValue()>();

        $r44 = virtualinvoke $r42.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r43);

        $i6 = $r5.<org.apache.poi.poifs.crypt.HashAlgorithm: int hashSize>;

        $r45 = staticinvoke <org.apache.poi.poifs.crypt.CryptoFunctions: byte[] getBlock0(byte[],int)>($r44, $i6);

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r21, $r16);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.poi.poifs.crypt.agile.AgileDecryptor: void setSecretKey(javax.crypto.SecretKey)>($r27);

        virtualinvoke r0.<org.apache.poi.poifs.crypt.agile.AgileDecryptor: void setIntegrityHmacKey(byte[])>($r37);

        virtualinvoke r0.<org.apache.poi.poifs.crypt.agile.AgileDecryptor: void setIntegrityHmacValue(byte[])>($r45);

        return 1;

     label1:
        return 0;
    }

    public boolean verifyPassword(java.security.KeyPair, java.security.cert.X509Certificate) throws java.security.GeneralSecurityException
    {
        java.security.cert.X509Certificate $r18, r39, $r40;
        java.security.KeyPair r10;
        byte[] $r12, $r13, $r19, $r20, $r21, $r22, $r23, $r26, $r27, $r28, $r29, $r30, $r31, $r34, $r35, $r36, $r37;
        org.apache.poi.poifs.crypt.ChainingMode $r24, $r32;
        javax.crypto.spec.SecretKeySpec $r14;
        org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier$AgileCertificateEntry r41, r42;
        boolean $z0, $z1, $z2;
        org.apache.poi.poifs.crypt.agile.AgileEncryptionInfoBuilder $r1, $r3;
        javax.crypto.Mac $r17;
        java.util.List $r7;
        java.security.PrivateKey $r11;
        org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier $r2;
        javax.crypto.Cipher $r9, $r25, $r33;
        int $i0, $i1, $i2;
        java.lang.String $r16;
        org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader $r4;
        java.util.Iterator $r8;
        org.apache.poi.poifs.crypt.HashAlgorithm $r5;
        org.apache.poi.poifs.crypt.agile.AgileDecryptor r0;
        java.lang.Object $r38;
        org.apache.poi.poifs.crypt.CipherAlgorithm $r6, $r15;

        r0 := @this: org.apache.poi.poifs.crypt.agile.AgileDecryptor;

        r10 := @parameter0: java.security.KeyPair;

        r39 := @parameter1: java.security.cert.X509Certificate;

        $r1 = r0.<org.apache.poi.poifs.crypt.agile.AgileDecryptor: org.apache.poi.poifs.crypt.agile.AgileEncryptionInfoBuilder builder>;

        $r2 = virtualinvoke $r1.<org.apache.poi.poifs.crypt.agile.AgileEncryptionInfoBuilder: org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier getVerifier()>();

        $r3 = r0.<org.apache.poi.poifs.crypt.agile.AgileDecryptor: org.apache.poi.poifs.crypt.agile.AgileEncryptionInfoBuilder builder>;

        $r4 = virtualinvoke $r3.<org.apache.poi.poifs.crypt.agile.AgileEncryptionInfoBuilder: org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader getHeader()>();

        $r5 = virtualinvoke $r4.<org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader: org.apache.poi.poifs.crypt.HashAlgorithm getHashAlgorithmEx()>();

        $r6 = virtualinvoke $r4.<org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader: org.apache.poi.poifs.crypt.CipherAlgorithm getCipherAlgorithm()>();

        $i0 = virtualinvoke $r4.<org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader: int getBlockSize()>();

        r41 = null;

        $r7 = virtualinvoke $r2.<org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier: java.util.List getCertificates()>();

        $r8 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r38 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r42 = (org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier$AgileCertificateEntry) $r38;

        $r40 = r42.<org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier$AgileCertificateEntry: java.security.cert.X509Certificate x509>;

        $z2 = virtualinvoke r39.<java.security.cert.X509Certificate: boolean equals(java.lang.Object)>($r40);

        if $z2 == 0 goto label2;

        r41 = r42;

        goto label3;

     label2:
        goto label1;

     label3:
        if r41 != null goto label4;

        return 0;

     label4:
        $r9 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("RSA");

        $r11 = virtualinvoke r10.<java.security.KeyPair: java.security.PrivateKey getPrivate()>();

        virtualinvoke $r9.<javax.crypto.Cipher: void init(int,java.security.Key)>(2, $r11);

        $r12 = r41.<org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier$AgileCertificateEntry: byte[] encryptedKey>;

        $r13 = virtualinvoke $r9.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r12);

        $r14 = new javax.crypto.spec.SecretKeySpec;

        $r15 = virtualinvoke $r2.<org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier: org.apache.poi.poifs.crypt.CipherAlgorithm getCipherAlgorithm()>();

        $r16 = $r15.<org.apache.poi.poifs.crypt.CipherAlgorithm: java.lang.String jceId>;

        specialinvoke $r14.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r13, $r16);

        $r17 = staticinvoke <org.apache.poi.poifs.crypt.CryptoFunctions: javax.crypto.Mac getMac(org.apache.poi.poifs.crypt.HashAlgorithm)>($r5);

        virtualinvoke $r17.<javax.crypto.Mac: void init(java.security.Key)>($r14);

        $r18 = r41.<org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier$AgileCertificateEntry: java.security.cert.X509Certificate x509>;

        $r19 = virtualinvoke $r18.<java.security.cert.X509Certificate: byte[] getEncoded()>();

        $r20 = virtualinvoke $r17.<javax.crypto.Mac: byte[] doFinal(byte[])>($r19);

        $r21 = virtualinvoke $r4.<org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader: byte[] getKeySalt()>();

        $r22 = <org.apache.poi.poifs.crypt.agile.AgileDecryptor: byte[] kIntegrityKeyBlock>;

        $r23 = staticinvoke <org.apache.poi.poifs.crypt.CryptoFunctions: byte[] generateIv(org.apache.poi.poifs.crypt.HashAlgorithm,byte[],byte[],int)>($r5, $r21, $r22, $i0);

        $r24 = virtualinvoke $r2.<org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier: org.apache.poi.poifs.crypt.ChainingMode getChainingMode()>();

        $r25 = staticinvoke <org.apache.poi.poifs.crypt.CryptoFunctions: javax.crypto.Cipher getCipher(javax.crypto.SecretKey,org.apache.poi.poifs.crypt.CipherAlgorithm,org.apache.poi.poifs.crypt.ChainingMode,byte[],int)>($r14, $r6, $r24, $r23, 2);

        $r26 = virtualinvoke $r4.<org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader: byte[] getEncryptedHmacKey()>();

        $r27 = virtualinvoke $r25.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r26);

        $i1 = $r5.<org.apache.poi.poifs.crypt.HashAlgorithm: int hashSize>;

        $r28 = staticinvoke <org.apache.poi.poifs.crypt.CryptoFunctions: byte[] getBlock0(byte[],int)>($r27, $i1);

        $r29 = virtualinvoke $r4.<org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader: byte[] getKeySalt()>();

        $r30 = <org.apache.poi.poifs.crypt.agile.AgileDecryptor: byte[] kIntegrityValueBlock>;

        $r31 = staticinvoke <org.apache.poi.poifs.crypt.CryptoFunctions: byte[] generateIv(org.apache.poi.poifs.crypt.HashAlgorithm,byte[],byte[],int)>($r5, $r29, $r30, $i0);

        $r32 = virtualinvoke $r2.<org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier: org.apache.poi.poifs.crypt.ChainingMode getChainingMode()>();

        $r33 = staticinvoke <org.apache.poi.poifs.crypt.CryptoFunctions: javax.crypto.Cipher getCipher(javax.crypto.SecretKey,org.apache.poi.poifs.crypt.CipherAlgorithm,org.apache.poi.poifs.crypt.ChainingMode,byte[],int)>($r14, $r6, $r32, $r31, 2);

        $r34 = virtualinvoke $r4.<org.apache.poi.poifs.crypt.agile.AgileEncryptionHeader: byte[] getEncryptedHmacValue()>();

        $r35 = virtualinvoke $r33.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r34);

        $i2 = $r5.<org.apache.poi.poifs.crypt.HashAlgorithm: int hashSize>;

        $r36 = staticinvoke <org.apache.poi.poifs.crypt.CryptoFunctions: byte[] getBlock0(byte[],int)>($r35, $i2);

        $r37 = r41.<org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier$AgileCertificateEntry: byte[] certVerifier>;

        $z1 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r37, $r20);

        if $z1 == 0 goto label5;

        virtualinvoke r0.<org.apache.poi.poifs.crypt.agile.AgileDecryptor: void setSecretKey(javax.crypto.SecretKey)>($r14);

        virtualinvoke r0.<org.apache.poi.poifs.crypt.agile.AgileDecryptor: void setIntegrityHmacKey(byte[])>($r28);

        virtualinvoke r0.<org.apache.poi.poifs.crypt.agile.AgileDecryptor: void setIntegrityHmacValue(byte[])>($r36);

        return 1;

     label5:
        return 0;
    }

    protected static int getNextBlockSize(int, int)
    {
        int i0, i1, i2;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        i2 = i0;

     label1:
        if i2 >= i1 goto label2;

        i2 = i2 + i0;

        goto label1;

     label2:
        return i2;
    }

    protected static byte[] hashInput(org.apache.poi.poifs.crypt.agile.AgileEncryptionInfoBuilder, byte[], byte[], byte[], int)
    {
        byte[] $r5, r6, r7, $r8, $r12, $r16, $r17, r20;
        org.apache.poi.poifs.crypt.ChainingMode $r14;
        javax.crypto.spec.SecretKeySpec $r9;
        javax.crypto.Cipher $r15;
        java.security.GeneralSecurityException $r18;
        int $i0, $i1, i2, $i3, $i4;
        java.lang.String $r11;
        org.apache.poi.poifs.crypt.agile.AgileEncryptionInfoBuilder r0;
        org.apache.poi.poifs.crypt.HashAlgorithm $r4;
        org.apache.poi.poifs.crypt.agile.AgileDecryptor $r2, $r3;
        org.apache.poi.EncryptedDocumentException $r19;
        org.apache.poi.poifs.crypt.CipherAlgorithm $r10, $r13;
        org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier $r1;

        r0 := @parameter0: org.apache.poi.poifs.crypt.agile.AgileEncryptionInfoBuilder;

        r6 := @parameter1: byte[];

        r7 := @parameter2: byte[];

        r20 := @parameter3: byte[];

        i2 := @parameter4: int;

        $r1 = virtualinvoke r0.<org.apache.poi.poifs.crypt.agile.AgileEncryptionInfoBuilder: org.apache.poi.poifs.crypt.agile.AgileEncryptionVerifier getVerifier()>();

        $r2 = virtualinvoke r0.<org.apache.poi.poifs.crypt.agile.AgileEncryptionInfoBuilder: org.apache.poi.poifs.crypt.agile.AgileDecryptor getDecryptor()>();

        $i0 = virtualinvoke $r2.<org.apache.poi.poifs.crypt.agile.AgileDecryptor: int getKeySizeInBytes()>();

        $r3 = virtualinvoke r0.<org.apache.poi.poifs.crypt.agile.AgileEncryptionInfoBuilder: org.apache.poi.poifs.crypt.agile.AgileDecryptor getDecryptor()>();

        $i1 = virtualinvoke $r3.<org.apache.poi.poifs.crypt.agile.AgileDecryptor: int getBlockSizeInBytes()>();

        $r4 = virtualinvoke $r1.<org.apache.poi.poifs.crypt.EncryptionVerifier: org.apache.poi.poifs.crypt.HashAlgorithm getHashAlgorithm()>();

        $r5 = virtualinvoke $r1.<org.apache.poi.poifs.crypt.EncryptionVerifier: byte[] getSalt()>();

        $r8 = staticinvoke <org.apache.poi.poifs.crypt.CryptoFunctions: byte[] generateKey(byte[],org.apache.poi.poifs.crypt.HashAlgorithm,byte[],int)>(r6, $r4, r7, $i0);

        $r9 = new javax.crypto.spec.SecretKeySpec;

        $r10 = virtualinvoke $r1.<org.apache.poi.poifs.crypt.EncryptionVerifier: org.apache.poi.poifs.crypt.CipherAlgorithm getCipherAlgorithm()>();

        $r11 = $r10.<org.apache.poi.poifs.crypt.CipherAlgorithm: java.lang.String jceId>;

        specialinvoke $r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r8, $r11);

        $r12 = staticinvoke <org.apache.poi.poifs.crypt.CryptoFunctions: byte[] generateIv(org.apache.poi.poifs.crypt.HashAlgorithm,byte[],byte[],int)>($r4, $r5, null, $i1);

        $r13 = virtualinvoke $r1.<org.apache.poi.poifs.crypt.EncryptionVerifier: org.apache.poi.poifs.crypt.CipherAlgorithm getCipherAlgorithm()>();

        $r14 = virtualinvoke $r1.<org.apache.poi.poifs.crypt.EncryptionVerifier: org.apache.poi.poifs.crypt.ChainingMode getChainingMode()>();

        $r15 = staticinvoke <org.apache.poi.poifs.crypt.CryptoFunctions: javax.crypto.Cipher getCipher(javax.crypto.SecretKey,org.apache.poi.poifs.crypt.CipherAlgorithm,org.apache.poi.poifs.crypt.ChainingMode,byte[],int)>($r9, $r13, $r14, $r12, i2);

     label1:
        $i3 = lengthof r20;

        $i4 = staticinvoke <org.apache.poi.poifs.crypt.agile.AgileDecryptor: int getNextBlockSize(int,int)>($i3, $i1);

        $r16 = staticinvoke <org.apache.poi.poifs.crypt.CryptoFunctions: byte[] getBlock0(byte[],int)>(r20, $i4);

        $r17 = virtualinvoke $r15.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r16);

     label2:
        return $r17;

     label3:
        $r18 := @caughtexception;

        $r19 = new org.apache.poi.EncryptedDocumentException;

        specialinvoke $r19.<org.apache.poi.EncryptedDocumentException: void <init>(java.lang.Throwable)>($r18);

        throw $r19;

        catch java.security.GeneralSecurityException from label1 to label2 with label3;
    }

    public java.io.InputStream getDataStream(org.apache.poi.poifs.filesystem.DirectoryNode) throws java.io.IOException, java.security.GeneralSecurityException
    {
        org.apache.poi.poifs.filesystem.DirectoryNode r0;
        org.apache.poi.poifs.crypt.agile.AgileDecryptor r2;
        org.apache.poi.poifs.crypt.agile.AgileDecryptor$ChunkedCipherInputStream $r3;
        long $l0, $l1;
        org.apache.poi.poifs.filesystem.DocumentInputStream $r1;

        r2 := @this: org.apache.poi.poifs.crypt.agile.AgileDecryptor;

        r0 := @parameter0: org.apache.poi.poifs.filesystem.DirectoryNode;

        $r1 = virtualinvoke r0.<org.apache.poi.poifs.filesystem.DirectoryNode: org.apache.poi.poifs.filesystem.DocumentInputStream createDocumentInputStream(java.lang.String)>("EncryptedPackage");

        $l0 = virtualinvoke $r1.<org.apache.poi.poifs.filesystem.DocumentInputStream: long readLong()>();

        r2.<org.apache.poi.poifs.crypt.agile.AgileDecryptor: long _length> = $l0;

        $r3 = new org.apache.poi.poifs.crypt.agile.AgileDecryptor$ChunkedCipherInputStream;

        $l1 = r2.<org.apache.poi.poifs.crypt.agile.AgileDecryptor: long _length>;

        specialinvoke $r3.<org.apache.poi.poifs.crypt.agile.AgileDecryptor$ChunkedCipherInputStream: void <init>(org.apache.poi.poifs.crypt.agile.AgileDecryptor,org.apache.poi.poifs.filesystem.DocumentInputStream,long)>(r2, $r1, $l1);

        return $r3;
    }

    public long getLength()
    {
        org.apache.poi.poifs.crypt.agile.AgileDecryptor r0;
        java.lang.IllegalStateException $r1;
        byte $b1;
        long $l0, $l2;

        r0 := @this: org.apache.poi.poifs.crypt.agile.AgileDecryptor;

        $l0 = r0.<org.apache.poi.poifs.crypt.agile.AgileDecryptor: long _length>;

        $b1 = $l0 cmp -1L;

        if $b1 != 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("EcmaDecryptor.getDataStream() was not called");

        throw $r1;

     label1:
        $l2 = r0.<org.apache.poi.poifs.crypt.agile.AgileDecryptor: long _length>;

        return $l2;
    }

    protected int getBlockSizeInBytes()
    {
        org.apache.poi.poifs.crypt.agile.AgileDecryptor r0;
        org.apache.poi.poifs.crypt.EncryptionHeader $r2;
        int $i0;
        org.apache.poi.poifs.crypt.EncryptionInfo $r1;

        r0 := @this: org.apache.poi.poifs.crypt.agile.AgileDecryptor;

        $r1 = r0.<org.apache.poi.poifs.crypt.agile.AgileDecryptor: org.apache.poi.poifs.crypt.EncryptionInfo info>;

        $r2 = virtualinvoke $r1.<org.apache.poi.poifs.crypt.EncryptionInfo: org.apache.poi.poifs.crypt.EncryptionHeader getHeader()>();

        $i0 = virtualinvoke $r2.<org.apache.poi.poifs.crypt.EncryptionHeader: int getBlockSize()>();

        return $i0;
    }

    protected int getKeySizeInBytes()
    {
        org.apache.poi.poifs.crypt.agile.AgileDecryptor r0;
        org.apache.poi.poifs.crypt.EncryptionHeader $r2;
        int $i0, $i1;
        org.apache.poi.poifs.crypt.EncryptionInfo $r1;

        r0 := @this: org.apache.poi.poifs.crypt.agile.AgileDecryptor;

        $r1 = r0.<org.apache.poi.poifs.crypt.agile.AgileDecryptor: org.apache.poi.poifs.crypt.EncryptionInfo info>;

        $r2 = virtualinvoke $r1.<org.apache.poi.poifs.crypt.EncryptionInfo: org.apache.poi.poifs.crypt.EncryptionHeader getHeader()>();

        $i0 = virtualinvoke $r2.<org.apache.poi.poifs.crypt.EncryptionHeader: int getKeySize()>();

        $i1 = $i0 / 8;

        return $i1;
    }

    static org.apache.poi.poifs.crypt.EncryptionInfo access$000(org.apache.poi.poifs.crypt.agile.AgileDecryptor)
    {
        org.apache.poi.poifs.crypt.agile.AgileDecryptor r0;
        org.apache.poi.poifs.crypt.EncryptionInfo $r1;

        r0 := @parameter0: org.apache.poi.poifs.crypt.agile.AgileDecryptor;

        $r1 = r0.<org.apache.poi.poifs.crypt.agile.AgileDecryptor: org.apache.poi.poifs.crypt.EncryptionInfo info>;

        return $r1;
    }

    static org.apache.poi.poifs.crypt.EncryptionInfo access$100(org.apache.poi.poifs.crypt.agile.AgileDecryptor)
    {
        org.apache.poi.poifs.crypt.agile.AgileDecryptor r0;
        org.apache.poi.poifs.crypt.EncryptionInfo $r1;

        r0 := @parameter0: org.apache.poi.poifs.crypt.agile.AgileDecryptor;

        $r1 = r0.<org.apache.poi.poifs.crypt.agile.AgileDecryptor: org.apache.poi.poifs.crypt.EncryptionInfo info>;

        return $r1;
    }

    static void <clinit>()
    {
        byte[] $r0, $r1, $r2, $r3, $r4;

        $r0 = newarray (byte)[8];

        $r0[0] = -2;

        $r0[1] = -89;

        $r0[2] = -46;

        $r0[3] = 118;

        $r0[4] = 59;

        $r0[5] = 75;

        $r0[6] = -98;

        $r0[7] = 121;

        <org.apache.poi.poifs.crypt.agile.AgileDecryptor: byte[] kVerifierInputBlock> = $r0;

        $r1 = newarray (byte)[8];

        $r1[0] = -41;

        $r1[1] = -86;

        $r1[2] = 15;

        $r1[3] = 109;

        $r1[4] = 48;

        $r1[5] = 97;

        $r1[6] = 52;

        $r1[7] = 78;

        <org.apache.poi.poifs.crypt.agile.AgileDecryptor: byte[] kHashedVerifierBlock> = $r1;

        $r2 = newarray (byte)[8];

        $r2[0] = 20;

        $r2[1] = 110;

        $r2[2] = 11;

        $r2[3] = -25;

        $r2[4] = -85;

        $r2[5] = -84;

        $r2[6] = -48;

        $r2[7] = -42;

        <org.apache.poi.poifs.crypt.agile.AgileDecryptor: byte[] kCryptoKeyBlock> = $r2;

        $r3 = newarray (byte)[8];

        $r3[0] = 95;

        $r3[1] = -78;

        $r3[2] = -83;

        $r3[3] = 1;

        $r3[4] = 12;

        $r3[5] = -71;

        $r3[6] = -31;

        $r3[7] = -10;

        <org.apache.poi.poifs.crypt.agile.AgileDecryptor: byte[] kIntegrityKeyBlock> = $r3;

        $r4 = newarray (byte)[8];

        $r4[0] = -96;

        $r4[1] = 103;

        $r4[2] = 127;

        $r4[3] = 2;

        $r4[4] = -78;

        $r4[5] = 44;

        $r4[6] = -124;

        $r4[7] = 51;

        <org.apache.poi.poifs.crypt.agile.AgileDecryptor: byte[] kIntegrityValueBlock> = $r4;

        return;
    }
}
