class groovy.util.slurpersupport.NodeChildren extends groovy.util.slurpersupport.GPathResult
{
    private int size;

    public void <init>(groovy.util.slurpersupport.GPathResult, java.lang.String, java.lang.String, java.util.Map)
    {
        groovy.util.slurpersupport.NodeChildren r0;
        java.util.Map r4;
        int $i1;
        java.lang.String r2, r3;
        groovy.util.slurpersupport.GPathResult r1;

        r0 := @this: groovy.util.slurpersupport.NodeChildren;

        r1 := @parameter0: groovy.util.slurpersupport.GPathResult;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.util.Map;

        specialinvoke r0.<groovy.util.slurpersupport.GPathResult: void <init>(groovy.util.slurpersupport.GPathResult,java.lang.String,java.lang.String,java.util.Map)>(r1, r2, r3, r4);

        $i1 = (int) -1;

        r0.<groovy.util.slurpersupport.NodeChildren: int size> = $i1;

        return;
    }

    public void <init>(groovy.util.slurpersupport.GPathResult, java.lang.String, java.util.Map)
    {
        groovy.util.slurpersupport.NodeChildren r0;
        java.util.Map r3;
        java.lang.String r2;
        groovy.util.slurpersupport.GPathResult r1;

        r0 := @this: groovy.util.slurpersupport.NodeChildren;

        r1 := @parameter0: groovy.util.slurpersupport.GPathResult;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.Map;

        specialinvoke r0.<groovy.util.slurpersupport.NodeChildren: void <init>(groovy.util.slurpersupport.GPathResult,java.lang.String,java.lang.String,java.util.Map)>(r1, r2, "*", r3);

        return;
    }

    public void <init>(groovy.util.slurpersupport.GPathResult, java.util.Map)
    {
        groovy.util.slurpersupport.NodeChildren r0;
        groovy.util.slurpersupport.GPathResult r1;
        java.util.Map r2;

        r0 := @this: groovy.util.slurpersupport.NodeChildren;

        r1 := @parameter0: groovy.util.slurpersupport.GPathResult;

        r2 := @parameter1: java.util.Map;

        specialinvoke r0.<groovy.util.slurpersupport.NodeChildren: void <init>(groovy.util.slurpersupport.GPathResult,java.lang.String,java.util.Map)>(r1, "*", r2);

        return;
    }

    public java.util.Iterator childNodes()
    {
        groovy.util.slurpersupport.NodeChildren$1 $r0;
        groovy.util.slurpersupport.NodeChildren r1;

        r1 := @this: groovy.util.slurpersupport.NodeChildren;

        $r0 = new groovy.util.slurpersupport.NodeChildren$1;

        specialinvoke $r0.<groovy.util.slurpersupport.NodeChildren$1: void <init>(groovy.util.slurpersupport.NodeChildren)>(r1);

        return $r0;
    }

    public java.util.Iterator iterator()
    {
        groovy.util.slurpersupport.NodeChildren$2 $r0;
        groovy.util.slurpersupport.NodeChildren r1;

        r1 := @this: groovy.util.slurpersupport.NodeChildren;

        $r0 = new groovy.util.slurpersupport.NodeChildren$2;

        specialinvoke $r0.<groovy.util.slurpersupport.NodeChildren$2: void <init>(groovy.util.slurpersupport.NodeChildren)>(r1);

        return $r0;
    }

    public java.util.Iterator nodeIterator()
    {
        java.util.Iterator $r5, $r7;
        groovy.util.slurpersupport.GPathResult $r4, $r6;
        groovy.util.slurpersupport.NodeChildren$3 $r3;
        groovy.util.slurpersupport.NodeChildren r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: groovy.util.slurpersupport.NodeChildren;

        $r2 = "*";

        $r1 = r0.<groovy.util.slurpersupport.NodeChildren: java.lang.String name>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $r6 = r0.<groovy.util.slurpersupport.NodeChildren: groovy.util.slurpersupport.GPathResult parent>;

        $r7 = virtualinvoke $r6.<groovy.util.slurpersupport.GPathResult: java.util.Iterator childNodes()>();

        return $r7;

     label1:
        $r3 = new groovy.util.slurpersupport.NodeChildren$3;

        $r4 = r0.<groovy.util.slurpersupport.NodeChildren: groovy.util.slurpersupport.GPathResult parent>;

        $r5 = virtualinvoke $r4.<groovy.util.slurpersupport.GPathResult: java.util.Iterator childNodes()>();

        specialinvoke $r3.<groovy.util.slurpersupport.NodeChildren$3: void <init>(groovy.util.slurpersupport.NodeChildren,java.util.Iterator)>(r0, $r5);

        return $r3;
    }

    public groovy.util.slurpersupport.GPathResult parents()
    {
        groovy.lang.GroovyRuntimeException $r0;
        groovy.util.slurpersupport.NodeChildren r1;

        r1 := @this: groovy.util.slurpersupport.NodeChildren;

        $r0 = new groovy.lang.GroovyRuntimeException;

        specialinvoke $r0.<groovy.lang.GroovyRuntimeException: void <init>(java.lang.String)>("parents() not implemented yet");

        throw $r0;
    }

    public synchronized int size()
    {
        java.util.Iterator $r1;
        groovy.util.slurpersupport.NodeChildren r0;
        int $i0, $i1, $i2, $i3, $i5;
        boolean $z0;

        r0 := @this: groovy.util.slurpersupport.NodeChildren;

        $i0 = r0.<groovy.util.slurpersupport.NodeChildren: int size>;

        $i5 = (int) -1;

        if $i0 != $i5 goto label2;

        $r1 = virtualinvoke r0.<groovy.util.slurpersupport.NodeChildren: java.util.Iterator iterator()>();

        r0.<groovy.util.slurpersupport.NodeChildren: int size> = 0;

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $i2 = r0.<groovy.util.slurpersupport.NodeChildren: int size>;

        $i3 = $i2 + 1;

        r0.<groovy.util.slurpersupport.NodeChildren: int size> = $i3;

        goto label1;

     label2:
        $i1 = r0.<groovy.util.slurpersupport.NodeChildren: int size>;

        return $i1;
    }

    public java.lang.String text()
    {
        java.util.Iterator $r2;
        groovy.util.slurpersupport.Node $r5;
        groovy.util.slurpersupport.NodeChildren r1;
        java.lang.StringBuffer $r0;
        java.lang.Object $r4;
        java.lang.String $r3, $r6;
        boolean $z0;

        r1 := @this: groovy.util.slurpersupport.NodeChildren;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke r1.<groovy.util.slurpersupport.NodeChildren: java.util.Iterator nodeIterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (groovy.util.slurpersupport.Node) $r4;

        $r6 = virtualinvoke $r5.<groovy.util.slurpersupport.Node: java.lang.String text()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        goto label1;

     label2:
        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    public groovy.util.slurpersupport.GPathResult find(groovy.lang.Closure)
    {
        groovy.util.slurpersupport.NoChildren $r2;
        java.lang.Object[] $r7;
        java.util.Iterator $r1;
        groovy.lang.Closure r6;
        groovy.util.slurpersupport.GPathResult $r9;
        groovy.util.slurpersupport.NodeChildren r0;
        java.util.Map $r3;
        java.lang.Object $r5, $r8;
        java.lang.String $r4;
        boolean $z0, $z1;

        r0 := @this: groovy.util.slurpersupport.NodeChildren;

        r6 := @parameter0: groovy.lang.Closure;

        $r1 = virtualinvoke r0.<groovy.util.slurpersupport.NodeChildren: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r7 = newarray (java.lang.Object)[1];

        $r7[0] = $r5;

        $r8 = virtualinvoke r6.<groovy.lang.Closure: java.lang.Object call(java.lang.Object[])>($r7);

        $z1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean castToBoolean(java.lang.Object)>($r8);

        if $z1 == 0 goto label2;

        $r9 = (groovy.util.slurpersupport.GPathResult) $r5;

        return $r9;

     label2:
        goto label1;

     label3:
        $r2 = new groovy.util.slurpersupport.NoChildren;

        $r4 = r0.<groovy.util.slurpersupport.NodeChildren: java.lang.String name>;

        $r3 = r0.<groovy.util.slurpersupport.NodeChildren: java.util.Map namespaceTagHints>;

        specialinvoke $r2.<groovy.util.slurpersupport.NoChildren: void <init>(groovy.util.slurpersupport.GPathResult,java.lang.String,java.util.Map)>(r0, $r4, $r3);

        return $r2;
    }

    public groovy.util.slurpersupport.GPathResult findAll(groovy.lang.Closure)
    {
        groovy.util.slurpersupport.FilteredNodeChildren $r0;
        groovy.util.slurpersupport.NodeChildren r1;
        java.util.Map $r3;
        groovy.lang.Closure r2;

        r1 := @this: groovy.util.slurpersupport.NodeChildren;

        r2 := @parameter0: groovy.lang.Closure;

        $r0 = new groovy.util.slurpersupport.FilteredNodeChildren;

        $r3 = r1.<groovy.util.slurpersupport.NodeChildren: java.util.Map namespaceTagHints>;

        specialinvoke $r0.<groovy.util.slurpersupport.FilteredNodeChildren: void <init>(groovy.util.slurpersupport.GPathResult,groovy.lang.Closure,java.util.Map)>(r1, r2, $r3);

        return $r0;
    }

    public void build(groovy.lang.GroovyObject)
    {
        java.util.Iterator $r1;
        groovy.lang.Buildable $r7;
        groovy.lang.GroovyObject r3;
        groovy.util.slurpersupport.Node $r6;
        groovy.util.slurpersupport.NodeChildren r0;
        java.util.Map $r4, $r5;
        java.lang.Object $r2;
        boolean $z0, $z1;

        r0 := @this: groovy.util.slurpersupport.NodeChildren;

        r3 := @parameter0: groovy.lang.GroovyObject;

        $r1 = virtualinvoke r0.<groovy.util.slurpersupport.NodeChildren: java.util.Iterator nodeIterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $z1 = $r2 instanceof groovy.lang.Buildable;

        if $z1 == 0 goto label2;

        $r7 = (groovy.lang.Buildable) $r2;

        interfaceinvoke $r7.<groovy.lang.Buildable: void build(groovy.lang.GroovyObject)>(r3);

        goto label3;

     label2:
        $r6 = (groovy.util.slurpersupport.Node) $r2;

        $r5 = r0.<groovy.util.slurpersupport.NodeChildren: java.util.Map namespaceMap>;

        $r4 = r0.<groovy.util.slurpersupport.NodeChildren: java.util.Map namespaceTagHints>;

        virtualinvoke $r6.<groovy.util.slurpersupport.Node: void build(groovy.lang.GroovyObject,java.util.Map,java.util.Map)>(r3, $r5, $r4);

     label3:
        goto label1;

     label4:
        return;
    }

    public java.io.Writer writeTo(java.io.Writer) throws java.io.IOException
    {
        groovy.util.slurpersupport.Node $r4;
        java.util.Iterator $r1;
        groovy.util.slurpersupport.NodeChildren r0;
        java.io.Writer r2;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: groovy.util.slurpersupport.NodeChildren;

        r2 := @parameter0: java.io.Writer;

        $r1 = virtualinvoke r0.<groovy.util.slurpersupport.NodeChildren: java.util.Iterator nodeIterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (groovy.util.slurpersupport.Node) $r3;

        virtualinvoke $r4.<groovy.util.slurpersupport.Node: java.io.Writer writeTo(java.io.Writer)>(r2);

        goto label1;

     label2:
        return r2;
    }

    protected void replaceNode(groovy.lang.Closure)
    {
        java.util.Iterator $r1;
        groovy.util.slurpersupport.NodeChildren r0;
        groovy.util.slurpersupport.NodeChild r3;
        groovy.lang.Closure r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: groovy.util.slurpersupport.NodeChildren;

        r4 := @parameter0: groovy.lang.Closure;

        $r1 = virtualinvoke r0.<groovy.util.slurpersupport.NodeChildren: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (groovy.util.slurpersupport.NodeChild) $r2;

        virtualinvoke r3.<groovy.util.slurpersupport.NodeChild: void replaceNode(groovy.lang.Closure)>(r4);

        goto label1;

     label2:
        return;
    }

    protected void replaceBody(java.lang.Object)
    {
        java.util.Iterator $r1;
        groovy.util.slurpersupport.NodeChildren r0;
        groovy.util.slurpersupport.NodeChild r3;
        java.lang.Object $r2, r4;
        boolean $z0;

        r0 := @this: groovy.util.slurpersupport.NodeChildren;

        r4 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<groovy.util.slurpersupport.NodeChildren: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (groovy.util.slurpersupport.NodeChild) $r2;

        virtualinvoke r3.<groovy.util.slurpersupport.NodeChild: void replaceBody(java.lang.Object)>(r4);

        goto label1;

     label2:
        return;
    }

    protected void appendNode(java.lang.Object)
    {
        java.util.Iterator $r1;
        groovy.util.slurpersupport.NodeChildren r0;
        groovy.util.slurpersupport.NodeChild r3;
        java.lang.Object $r2, r4;
        boolean $z0;

        r0 := @this: groovy.util.slurpersupport.NodeChildren;

        r4 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<groovy.util.slurpersupport.NodeChildren: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (groovy.util.slurpersupport.NodeChild) $r2;

        virtualinvoke r3.<groovy.util.slurpersupport.NodeChild: void appendNode(java.lang.Object)>(r4);

        goto label1;

     label2:
        return;
    }
}
