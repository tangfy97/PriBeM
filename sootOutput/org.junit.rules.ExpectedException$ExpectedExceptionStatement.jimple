class org.junit.rules.ExpectedException$ExpectedExceptionStatement extends org.junit.runners.model.Statement
{
    private final org.junit.runners.model.Statement fNext;
    final org.junit.rules.ExpectedException this$0;

    public void <init>(org.junit.rules.ExpectedException, org.junit.runners.model.Statement)
    {
        org.junit.runners.model.Statement r2;
        org.junit.rules.ExpectedException$ExpectedExceptionStatement r0;
        org.junit.rules.ExpectedException r1;

        r0 := @this: org.junit.rules.ExpectedException$ExpectedExceptionStatement;

        r1 := @parameter0: org.junit.rules.ExpectedException;

        r2 := @parameter1: org.junit.runners.model.Statement;

        r0.<org.junit.rules.ExpectedException$ExpectedExceptionStatement: org.junit.rules.ExpectedException this$0> = r1;

        specialinvoke r0.<org.junit.runners.model.Statement: void <init>()>();

        r0.<org.junit.rules.ExpectedException$ExpectedExceptionStatement: org.junit.runners.model.Statement fNext> = r2;

        return;
    }

    public void evaluate() throws java.lang.Throwable
    {
        java.lang.Throwable $r5;
        org.junit.runners.model.Statement $r1;
        java.lang.AssertionError $r7;
        org.junit.internal.AssumptionViolatedException $r10;
        org.junit.rules.ExpectedException$ExpectedExceptionStatement r0;
        org.junit.rules.ExpectedExceptionMatcherBuilder $r3;
        org.junit.rules.ExpectedException $r2, $r4, $r6, $r8, $r9, $r11, $r12;
        boolean $z0, $z1, $z2;

        r0 := @this: org.junit.rules.ExpectedException$ExpectedExceptionStatement;

     label1:
        $r1 = r0.<org.junit.rules.ExpectedException$ExpectedExceptionStatement: org.junit.runners.model.Statement fNext>;

        virtualinvoke $r1.<org.junit.runners.model.Statement: void evaluate()>();

        $r2 = r0.<org.junit.rules.ExpectedException$ExpectedExceptionStatement: org.junit.rules.ExpectedException this$0>;

        $r3 = staticinvoke <org.junit.rules.ExpectedException: org.junit.rules.ExpectedExceptionMatcherBuilder access$000(org.junit.rules.ExpectedException)>($r2);

        $z0 = virtualinvoke $r3.<org.junit.rules.ExpectedExceptionMatcherBuilder: boolean expectsThrowable()>();

        if $z0 == 0 goto label2;

        $r4 = r0.<org.junit.rules.ExpectedException$ExpectedExceptionStatement: org.junit.rules.ExpectedException this$0>;

        staticinvoke <org.junit.rules.ExpectedException: void access$100(org.junit.rules.ExpectedException)>($r4);

     label2:
        goto label6;

     label3:
        $r10 := @caughtexception;

        $r12 = r0.<org.junit.rules.ExpectedException$ExpectedExceptionStatement: org.junit.rules.ExpectedException this$0>;

        $r11 = r0.<org.junit.rules.ExpectedException$ExpectedExceptionStatement: org.junit.rules.ExpectedException this$0>;

        $z2 = staticinvoke <org.junit.rules.ExpectedException: boolean access$200(org.junit.rules.ExpectedException)>($r11);

        staticinvoke <org.junit.rules.ExpectedException: void access$300(org.junit.rules.ExpectedException,java.lang.Throwable,boolean)>($r12, $r10, $z2);

        goto label6;

     label4:
        $r7 := @caughtexception;

        $r9 = r0.<org.junit.rules.ExpectedException$ExpectedExceptionStatement: org.junit.rules.ExpectedException this$0>;

        $r8 = r0.<org.junit.rules.ExpectedException$ExpectedExceptionStatement: org.junit.rules.ExpectedException this$0>;

        $z1 = staticinvoke <org.junit.rules.ExpectedException: boolean access$400(org.junit.rules.ExpectedException)>($r8);

        staticinvoke <org.junit.rules.ExpectedException: void access$300(org.junit.rules.ExpectedException,java.lang.Throwable,boolean)>($r9, $r7, $z1);

        goto label6;

     label5:
        $r5 := @caughtexception;

        $r6 = r0.<org.junit.rules.ExpectedException$ExpectedExceptionStatement: org.junit.rules.ExpectedException this$0>;

        staticinvoke <org.junit.rules.ExpectedException: void access$500(org.junit.rules.ExpectedException,java.lang.Throwable)>($r6, $r5);

     label6:
        return;

        catch org.junit.internal.AssumptionViolatedException from label1 to label2 with label3;
        catch java.lang.AssertionError from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label5;
    }
}
