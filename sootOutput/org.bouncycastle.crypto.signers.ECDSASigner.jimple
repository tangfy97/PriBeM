public class org.bouncycastle.crypto.signers.ECDSASigner extends java.lang.Object implements org.bouncycastle.math.ec.ECConstants, org.bouncycastle.crypto.DSA
{
    org.bouncycastle.crypto.params.ECKeyParameters key;
    java.security.SecureRandom random;

    public void <init>()
    {
        org.bouncycastle.crypto.signers.ECDSASigner r0;

        r0 := @this: org.bouncycastle.crypto.signers.ECDSASigner;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void init(boolean, org.bouncycastle.crypto.CipherParameters)
    {
        org.bouncycastle.crypto.params.ECPublicKeyParameters $r2;
        org.bouncycastle.crypto.params.ECPrivateKeyParameters $r4, $r8;
        java.security.SecureRandom $r3, $r6;
        org.bouncycastle.crypto.params.ParametersWithRandom r5;
        boolean z0, $z1;
        org.bouncycastle.crypto.signers.ECDSASigner r0;
        org.bouncycastle.crypto.CipherParameters r1, $r7;

        r0 := @this: org.bouncycastle.crypto.signers.ECDSASigner;

        z0 := @parameter0: boolean;

        r1 := @parameter1: org.bouncycastle.crypto.CipherParameters;

        if z0 == 0 goto label2;

        $z1 = r1 instanceof org.bouncycastle.crypto.params.ParametersWithRandom;

        if $z1 == 0 goto label1;

        r5 = (org.bouncycastle.crypto.params.ParametersWithRandom) r1;

        $r6 = virtualinvoke r5.<org.bouncycastle.crypto.params.ParametersWithRandom: java.security.SecureRandom getRandom()>();

        r0.<org.bouncycastle.crypto.signers.ECDSASigner: java.security.SecureRandom random> = $r6;

        $r7 = virtualinvoke r5.<org.bouncycastle.crypto.params.ParametersWithRandom: org.bouncycastle.crypto.CipherParameters getParameters()>();

        $r8 = (org.bouncycastle.crypto.params.ECPrivateKeyParameters) $r7;

        r0.<org.bouncycastle.crypto.signers.ECDSASigner: org.bouncycastle.crypto.params.ECKeyParameters key> = $r8;

        goto label3;

     label1:
        $r3 = new java.security.SecureRandom;

        specialinvoke $r3.<java.security.SecureRandom: void <init>()>();

        r0.<org.bouncycastle.crypto.signers.ECDSASigner: java.security.SecureRandom random> = $r3;

        $r4 = (org.bouncycastle.crypto.params.ECPrivateKeyParameters) r1;

        r0.<org.bouncycastle.crypto.signers.ECDSASigner: org.bouncycastle.crypto.params.ECKeyParameters key> = $r4;

        goto label3;

     label2:
        $r2 = (org.bouncycastle.crypto.params.ECPublicKeyParameters) r1;

        r0.<org.bouncycastle.crypto.signers.ECDSASigner: org.bouncycastle.crypto.params.ECKeyParameters key> = $r2;

     label3:
        return;
    }

    public java.math.BigInteger[] generateSignature(byte[])
    {
        byte[] r4;
        org.bouncycastle.math.ec.ECFieldElement $r10;
        org.bouncycastle.crypto.params.ECPrivateKeyParameters $r15;
        java.security.SecureRandom $r24;
        org.bouncycastle.math.ec.ECPoint $r8, $r9;
        org.bouncycastle.crypto.params.ECDomainParameters $r2, $r7;
        int $i0;
        java.math.BigInteger $r3, $r5, $r11, $r12, $r13, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r25;
        boolean $z0, $z1, $z2;
        java.math.BigInteger[] r26;
        org.bouncycastle.crypto.params.ECKeyParameters $r1, $r6, $r14;
        org.bouncycastle.crypto.signers.ECDSASigner r0;

        r0 := @this: org.bouncycastle.crypto.signers.ECDSASigner;

        r4 := @parameter0: byte[];

        $r1 = r0.<org.bouncycastle.crypto.signers.ECDSASigner: org.bouncycastle.crypto.params.ECKeyParameters key>;

        $r2 = virtualinvoke $r1.<org.bouncycastle.crypto.params.ECKeyParameters: org.bouncycastle.crypto.params.ECDomainParameters getParameters()>();

        $r3 = virtualinvoke $r2.<org.bouncycastle.crypto.params.ECDomainParameters: java.math.BigInteger getN()>();

        $r5 = specialinvoke r0.<org.bouncycastle.crypto.signers.ECDSASigner: java.math.BigInteger calculateE(java.math.BigInteger,byte[])>($r3, r4);

     label1:
        $i0 = virtualinvoke $r3.<java.math.BigInteger: int bitLength()>();

     label2:
        $r23 = new java.math.BigInteger;

        $r24 = r0.<org.bouncycastle.crypto.signers.ECDSASigner: java.security.SecureRandom random>;

        specialinvoke $r23.<java.math.BigInteger: void <init>(int,java.util.Random)>($i0, $r24);

        $r25 = <org.bouncycastle.crypto.signers.ECDSASigner: java.math.BigInteger ZERO>;

        $z2 = virtualinvoke $r23.<java.math.BigInteger: boolean equals(java.lang.Object)>($r25);

        if $z2 != 0 goto label2;

        $r6 = r0.<org.bouncycastle.crypto.signers.ECDSASigner: org.bouncycastle.crypto.params.ECKeyParameters key>;

        $r7 = virtualinvoke $r6.<org.bouncycastle.crypto.params.ECKeyParameters: org.bouncycastle.crypto.params.ECDomainParameters getParameters()>();

        $r8 = virtualinvoke $r7.<org.bouncycastle.crypto.params.ECDomainParameters: org.bouncycastle.math.ec.ECPoint getG()>();

        $r9 = virtualinvoke $r8.<org.bouncycastle.math.ec.ECPoint: org.bouncycastle.math.ec.ECPoint multiply(java.math.BigInteger)>($r23);

        $r10 = virtualinvoke $r9.<org.bouncycastle.math.ec.ECPoint: org.bouncycastle.math.ec.ECFieldElement getX()>();

        $r11 = virtualinvoke $r10.<org.bouncycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        $r12 = virtualinvoke $r11.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r3);

        $r13 = <org.bouncycastle.crypto.signers.ECDSASigner: java.math.BigInteger ZERO>;

        $z0 = virtualinvoke $r12.<java.math.BigInteger: boolean equals(java.lang.Object)>($r13);

        if $z0 != 0 goto label2;

        $r14 = r0.<org.bouncycastle.crypto.signers.ECDSASigner: org.bouncycastle.crypto.params.ECKeyParameters key>;

        $r15 = (org.bouncycastle.crypto.params.ECPrivateKeyParameters) $r14;

        $r16 = virtualinvoke $r15.<org.bouncycastle.crypto.params.ECPrivateKeyParameters: java.math.BigInteger getD()>();

        $r17 = virtualinvoke $r23.<java.math.BigInteger: java.math.BigInteger modInverse(java.math.BigInteger)>($r3);

        $r18 = virtualinvoke $r16.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r12);

        $r19 = virtualinvoke $r5.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r18);

        $r20 = virtualinvoke $r17.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r19);

        $r21 = virtualinvoke $r20.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r3);

        $r22 = <org.bouncycastle.crypto.signers.ECDSASigner: java.math.BigInteger ZERO>;

        $z1 = virtualinvoke $r21.<java.math.BigInteger: boolean equals(java.lang.Object)>($r22);

        if $z1 != 0 goto label1;

        r26 = newarray (java.math.BigInteger)[2];

        r26[0] = $r12;

        r26[1] = $r21;

        return r26;
    }

    public boolean verifySignature(byte[], java.math.BigInteger, java.math.BigInteger)
    {
        byte[] r4;
        org.bouncycastle.math.ec.ECFieldElement $r22;
        org.bouncycastle.crypto.params.ECPublicKeyParameters $r19;
        org.bouncycastle.math.ec.ECPoint $r17, $r20, $r21;
        org.bouncycastle.crypto.params.ECDomainParameters $r2, $r16;
        int $i0, $i1, $i2, $i3;
        java.math.BigInteger $r3, $r5, r6, $r7, r8, $r9, $r10, $r11, $r12, $r13, $r14, $r23, $r24;
        boolean $z0;
        org.bouncycastle.crypto.params.ECKeyParameters $r1, $r15, $r18;
        org.bouncycastle.crypto.signers.ECDSASigner r0;

        r0 := @this: org.bouncycastle.crypto.signers.ECDSASigner;

        r4 := @parameter0: byte[];

        r6 := @parameter1: java.math.BigInteger;

        r8 := @parameter2: java.math.BigInteger;

        $r1 = r0.<org.bouncycastle.crypto.signers.ECDSASigner: org.bouncycastle.crypto.params.ECKeyParameters key>;

        $r2 = virtualinvoke $r1.<org.bouncycastle.crypto.params.ECKeyParameters: org.bouncycastle.crypto.params.ECDomainParameters getParameters()>();

        $r3 = virtualinvoke $r2.<org.bouncycastle.crypto.params.ECDomainParameters: java.math.BigInteger getN()>();

        $r5 = specialinvoke r0.<org.bouncycastle.crypto.signers.ECDSASigner: java.math.BigInteger calculateE(java.math.BigInteger,byte[])>($r3, r4);

        $r7 = <org.bouncycastle.crypto.signers.ECDSASigner: java.math.BigInteger ONE>;

        $i0 = virtualinvoke r6.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r7);

        if $i0 < 0 goto label1;

        $i1 = virtualinvoke r6.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r3);

        if $i1 < 0 goto label2;

     label1:
        return 0;

     label2:
        $r9 = <org.bouncycastle.crypto.signers.ECDSASigner: java.math.BigInteger ONE>;

        $i2 = virtualinvoke r8.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r9);

        if $i2 < 0 goto label3;

        $i3 = virtualinvoke r8.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r3);

        if $i3 < 0 goto label4;

     label3:
        return 0;

     label4:
        $r10 = virtualinvoke r8.<java.math.BigInteger: java.math.BigInteger modInverse(java.math.BigInteger)>($r3);

        $r11 = virtualinvoke $r5.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r10);

        $r12 = virtualinvoke $r11.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r3);

        $r13 = virtualinvoke r6.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r10);

        $r14 = virtualinvoke $r13.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r3);

        $r15 = r0.<org.bouncycastle.crypto.signers.ECDSASigner: org.bouncycastle.crypto.params.ECKeyParameters key>;

        $r16 = virtualinvoke $r15.<org.bouncycastle.crypto.params.ECKeyParameters: org.bouncycastle.crypto.params.ECDomainParameters getParameters()>();

        $r17 = virtualinvoke $r16.<org.bouncycastle.crypto.params.ECDomainParameters: org.bouncycastle.math.ec.ECPoint getG()>();

        $r18 = r0.<org.bouncycastle.crypto.signers.ECDSASigner: org.bouncycastle.crypto.params.ECKeyParameters key>;

        $r19 = (org.bouncycastle.crypto.params.ECPublicKeyParameters) $r18;

        $r20 = virtualinvoke $r19.<org.bouncycastle.crypto.params.ECPublicKeyParameters: org.bouncycastle.math.ec.ECPoint getQ()>();

        $r21 = staticinvoke <org.bouncycastle.math.ec.ECAlgorithms: org.bouncycastle.math.ec.ECPoint sumOfTwoMultiplies(org.bouncycastle.math.ec.ECPoint,java.math.BigInteger,org.bouncycastle.math.ec.ECPoint,java.math.BigInteger)>($r17, $r12, $r20, $r14);

        $r22 = virtualinvoke $r21.<org.bouncycastle.math.ec.ECPoint: org.bouncycastle.math.ec.ECFieldElement getX()>();

        $r23 = virtualinvoke $r22.<org.bouncycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        $r24 = virtualinvoke $r23.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r3);

        $z0 = virtualinvoke $r24.<java.math.BigInteger: boolean equals(java.lang.Object)>(r6);

        return $z0;
    }

    private java.math.BigInteger calculateE(java.math.BigInteger, byte[])
    {
        byte[] r1;
        int $i0, $i1, $i2, $i3, i4, $i5, $i6, $i7, $i8;
        java.math.BigInteger r0, $r2, $r3, r5;
        org.bouncycastle.crypto.signers.ECDSASigner r4;

        r4 := @this: org.bouncycastle.crypto.signers.ECDSASigner;

        r0 := @parameter0: java.math.BigInteger;

        r1 := @parameter1: byte[];

        $i0 = virtualinvoke r0.<java.math.BigInteger: int bitLength()>();

        $i1 = lengthof r1;

        $i2 = $i1 * 8;

        if $i0 <= $i2 goto label1;

        $r3 = new java.math.BigInteger;

        specialinvoke $r3.<java.math.BigInteger: void <init>(int,byte[])>(1, r1);

        return $r3;

     label1:
        $i3 = lengthof r1;

        i4 = $i3 * 8;

        $r2 = new java.math.BigInteger;

        specialinvoke $r2.<java.math.BigInteger: void <init>(int,byte[])>(1, r1);

        r5 = $r2;

        $i5 = virtualinvoke r0.<java.math.BigInteger: int bitLength()>();

        $i6 = i4 - $i5;

        if $i6 <= 0 goto label2;

        $i7 = virtualinvoke r0.<java.math.BigInteger: int bitLength()>();

        $i8 = i4 - $i7;

        r5 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>($i8);

     label2:
        return r5;
    }
}
