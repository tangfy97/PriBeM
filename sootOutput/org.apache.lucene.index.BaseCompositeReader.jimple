public abstract class org.apache.lucene.index.BaseCompositeReader extends org.apache.lucene.index.CompositeReader
{
    private final org.apache.lucene.index.IndexReader[] subReaders;
    private final int[] starts;
    private final int maxDoc;
    private final int numDocs;
    private final java.util.List subReadersList;

    protected void <init>(org.apache.lucene.index.IndexReader[])
    {
        int[] $r4, $r5, $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7, i8;
        java.lang.IllegalArgumentException $r8;
        org.apache.lucene.index.IndexReader[] r1;
        java.util.List $r2, $r3;
        org.apache.lucene.index.BaseCompositeReader r0;
        org.apache.lucene.index.IndexReader r7;

        r0 := @this: org.apache.lucene.index.BaseCompositeReader;

        r1 := @parameter0: org.apache.lucene.index.IndexReader[];

        specialinvoke r0.<org.apache.lucene.index.CompositeReader: void <init>()>();

        r0.<org.apache.lucene.index.BaseCompositeReader: org.apache.lucene.index.IndexReader[] subReaders> = r1;

        $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1);

        $r3 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r2);

        r0.<org.apache.lucene.index.BaseCompositeReader: java.util.List subReadersList> = $r3;

        $i0 = lengthof r1;

        $i1 = $i0 + 1;

        $r4 = newarray (int)[$i1];

        r0.<org.apache.lucene.index.BaseCompositeReader: int[] starts> = $r4;

        i6 = 0;

        i7 = 0;

        i8 = 0;

     label1:
        $i2 = lengthof r1;

        if i8 >= $i2 goto label3;

        $r6 = r0.<org.apache.lucene.index.BaseCompositeReader: int[] starts>;

        $r6[i8] = i6;

        r7 = r1[i8];

        $i4 = virtualinvoke r7.<org.apache.lucene.index.IndexReader: int maxDoc()>();

        i6 = i6 + $i4;

        if i6 >= 0 goto label2;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Too many documents, composite IndexReaders cannot exceed 2147483647");

        throw $r8;

     label2:
        $i5 = virtualinvoke r7.<org.apache.lucene.index.IndexReader: int numDocs()>();

        i7 = i7 + $i5;

        virtualinvoke r7.<org.apache.lucene.index.IndexReader: void registerParentReader(org.apache.lucene.index.IndexReader)>(r0);

        i8 = i8 + 1;

        goto label1;

     label3:
        $r5 = r0.<org.apache.lucene.index.BaseCompositeReader: int[] starts>;

        $i3 = lengthof r1;

        $r5[$i3] = i6;

        r0.<org.apache.lucene.index.BaseCompositeReader: int maxDoc> = i6;

        r0.<org.apache.lucene.index.BaseCompositeReader: int numDocs> = i7;

        return;
    }

    public final org.apache.lucene.index.Fields getTermVectors(int) throws java.io.IOException
    {
        org.apache.lucene.index.Fields $r4;
        org.apache.lucene.index.IndexReader[] $r1;
        int[] $r2;
        int i0, $i1, $i2, $i3;
        org.apache.lucene.index.BaseCompositeReader r0;
        org.apache.lucene.index.IndexReader $r3;

        r0 := @this: org.apache.lucene.index.BaseCompositeReader;

        i0 := @parameter0: int;

        virtualinvoke r0.<org.apache.lucene.index.BaseCompositeReader: void ensureOpen()>();

        $i1 = virtualinvoke r0.<org.apache.lucene.index.BaseCompositeReader: int readerIndex(int)>(i0);

        $r1 = r0.<org.apache.lucene.index.BaseCompositeReader: org.apache.lucene.index.IndexReader[] subReaders>;

        $r3 = $r1[$i1];

        $r2 = r0.<org.apache.lucene.index.BaseCompositeReader: int[] starts>;

        $i2 = $r2[$i1];

        $i3 = i0 - $i2;

        $r4 = virtualinvoke $r3.<org.apache.lucene.index.IndexReader: org.apache.lucene.index.Fields getTermVectors(int)>($i3);

        return $r4;
    }

    public final int numDocs()
    {
        int $i0;
        org.apache.lucene.index.BaseCompositeReader r0;

        r0 := @this: org.apache.lucene.index.BaseCompositeReader;

        $i0 = r0.<org.apache.lucene.index.BaseCompositeReader: int numDocs>;

        return $i0;
    }

    public final int maxDoc()
    {
        int $i0;
        org.apache.lucene.index.BaseCompositeReader r0;

        r0 := @this: org.apache.lucene.index.BaseCompositeReader;

        $i0 = r0.<org.apache.lucene.index.BaseCompositeReader: int maxDoc>;

        return $i0;
    }

    public final void document(int, org.apache.lucene.index.StoredFieldVisitor) throws java.io.IOException
    {
        org.apache.lucene.index.StoredFieldVisitor r3;
        org.apache.lucene.index.IndexReader[] $r1;
        int[] $r2;
        int i0, $i1, $i2, $i3;
        org.apache.lucene.index.BaseCompositeReader r0;
        org.apache.lucene.index.IndexReader $r4;

        r0 := @this: org.apache.lucene.index.BaseCompositeReader;

        i0 := @parameter0: int;

        r3 := @parameter1: org.apache.lucene.index.StoredFieldVisitor;

        virtualinvoke r0.<org.apache.lucene.index.BaseCompositeReader: void ensureOpen()>();

        $i1 = virtualinvoke r0.<org.apache.lucene.index.BaseCompositeReader: int readerIndex(int)>(i0);

        $r1 = r0.<org.apache.lucene.index.BaseCompositeReader: org.apache.lucene.index.IndexReader[] subReaders>;

        $r4 = $r1[$i1];

        $r2 = r0.<org.apache.lucene.index.BaseCompositeReader: int[] starts>;

        $i2 = $r2[$i1];

        $i3 = i0 - $i2;

        virtualinvoke $r4.<org.apache.lucene.index.IndexReader: void document(int,org.apache.lucene.index.StoredFieldVisitor)>($i3, r3);

        return;
    }

    public final int docFreq(org.apache.lucene.index.Term) throws java.io.IOException
    {
        org.apache.lucene.index.Term r3;
        org.apache.lucene.index.IndexReader[] $r1, $r2;
        int $i0, $i1, i2, i3;
        org.apache.lucene.index.BaseCompositeReader r0;
        org.apache.lucene.index.IndexReader $r4;

        r0 := @this: org.apache.lucene.index.BaseCompositeReader;

        r3 := @parameter0: org.apache.lucene.index.Term;

        virtualinvoke r0.<org.apache.lucene.index.BaseCompositeReader: void ensureOpen()>();

        i2 = 0;

        i3 = 0;

     label1:
        $r1 = r0.<org.apache.lucene.index.BaseCompositeReader: org.apache.lucene.index.IndexReader[] subReaders>;

        $i0 = lengthof $r1;

        if i3 >= $i0 goto label2;

        $r2 = r0.<org.apache.lucene.index.BaseCompositeReader: org.apache.lucene.index.IndexReader[] subReaders>;

        $r4 = $r2[i3];

        $i1 = virtualinvoke $r4.<org.apache.lucene.index.IndexReader: int docFreq(org.apache.lucene.index.Term)>(r3);

        i2 = i2 + $i1;

        i3 = i3 + 1;

        goto label1;

     label2:
        return i2;
    }

    public final long totalTermFreq(org.apache.lucene.index.Term) throws java.io.IOException
    {
        org.apache.lucene.index.Term r3;
        long $l1, l3;
        org.apache.lucene.index.IndexReader[] $r1, $r2;
        byte $b2;
        int $i0, i4;
        org.apache.lucene.index.BaseCompositeReader r0;
        org.apache.lucene.index.IndexReader $r4;

        r0 := @this: org.apache.lucene.index.BaseCompositeReader;

        r3 := @parameter0: org.apache.lucene.index.Term;

        virtualinvoke r0.<org.apache.lucene.index.BaseCompositeReader: void ensureOpen()>();

        l3 = 0L;

        i4 = 0;

     label1:
        $r1 = r0.<org.apache.lucene.index.BaseCompositeReader: org.apache.lucene.index.IndexReader[] subReaders>;

        $i0 = lengthof $r1;

        if i4 >= $i0 goto label3;

        $r2 = r0.<org.apache.lucene.index.BaseCompositeReader: org.apache.lucene.index.IndexReader[] subReaders>;

        $r4 = $r2[i4];

        $l1 = virtualinvoke $r4.<org.apache.lucene.index.IndexReader: long totalTermFreq(org.apache.lucene.index.Term)>(r3);

        $b2 = $l1 cmp -1L;

        if $b2 != 0 goto label2;

        return -1L;

     label2:
        l3 = l3 + $l1;

        i4 = i4 + 1;

        goto label1;

     label3:
        return l3;
    }

    public final long getSumDocFreq(java.lang.String) throws java.io.IOException
    {
        long $l1, l3;
        org.apache.lucene.index.IndexReader[] r1;
        byte $b2;
        int i0, i4;
        java.lang.String r3;
        org.apache.lucene.index.BaseCompositeReader r0;
        org.apache.lucene.index.IndexReader r2;

        r0 := @this: org.apache.lucene.index.BaseCompositeReader;

        r3 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.apache.lucene.index.BaseCompositeReader: void ensureOpen()>();

        l3 = 0L;

        r1 = r0.<org.apache.lucene.index.BaseCompositeReader: org.apache.lucene.index.IndexReader[] subReaders>;

        i0 = lengthof r1;

        i4 = 0;

     label1:
        if i4 >= i0 goto label3;

        r2 = r1[i4];

        $l1 = virtualinvoke r2.<org.apache.lucene.index.IndexReader: long getSumDocFreq(java.lang.String)>(r3);

        $b2 = $l1 cmp -1L;

        if $b2 != 0 goto label2;

        return -1L;

     label2:
        l3 = l3 + $l1;

        i4 = i4 + 1;

        goto label1;

     label3:
        return l3;
    }

    public final int getDocCount(java.lang.String) throws java.io.IOException
    {
        org.apache.lucene.index.IndexReader[] r1;
        int i0, $i1, i2, i3, $i5, $i7;
        java.lang.String r3;
        org.apache.lucene.index.BaseCompositeReader r0;
        org.apache.lucene.index.IndexReader r2;

        r0 := @this: org.apache.lucene.index.BaseCompositeReader;

        r3 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.apache.lucene.index.BaseCompositeReader: void ensureOpen()>();

        i2 = 0;

        r1 = r0.<org.apache.lucene.index.BaseCompositeReader: org.apache.lucene.index.IndexReader[] subReaders>;

        i0 = lengthof r1;

        i3 = 0;

     label1:
        if i3 >= i0 goto label3;

        r2 = r1[i3];

        $i1 = virtualinvoke r2.<org.apache.lucene.index.IndexReader: int getDocCount(java.lang.String)>(r3);

        $i5 = (int) -1;

        if $i1 != $i5 goto label2;

        $i7 = (int) -1;

        return $i7;

     label2:
        i2 = i2 + $i1;

        i3 = i3 + 1;

        goto label1;

     label3:
        return i2;
    }

    public final long getSumTotalTermFreq(java.lang.String) throws java.io.IOException
    {
        long $l1, l3;
        org.apache.lucene.index.IndexReader[] r1;
        byte $b2;
        int i0, i4;
        java.lang.String r3;
        org.apache.lucene.index.BaseCompositeReader r0;
        org.apache.lucene.index.IndexReader r2;

        r0 := @this: org.apache.lucene.index.BaseCompositeReader;

        r3 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.apache.lucene.index.BaseCompositeReader: void ensureOpen()>();

        l3 = 0L;

        r1 = r0.<org.apache.lucene.index.BaseCompositeReader: org.apache.lucene.index.IndexReader[] subReaders>;

        i0 = lengthof r1;

        i4 = 0;

     label1:
        if i4 >= i0 goto label3;

        r2 = r1[i4];

        $l1 = virtualinvoke r2.<org.apache.lucene.index.IndexReader: long getSumTotalTermFreq(java.lang.String)>(r3);

        $b2 = $l1 cmp -1L;

        if $b2 != 0 goto label2;

        return -1L;

     label2:
        l3 = l3 + $l1;

        i4 = i4 + 1;

        goto label1;

     label3:
        return l3;
    }

    protected final int readerIndex(int)
    {
        java.lang.IllegalArgumentException $r0;
        int[] $r9;
        int i0, $i1, $i2, $i3;
        java.lang.StringBuilder $r1, $r2, $r4, $r5, $r6, $r7;
        java.lang.String $r8;
        org.apache.lucene.index.BaseCompositeReader r3;

        r3 := @this: org.apache.lucene.index.BaseCompositeReader;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $i2 = r3.<org.apache.lucene.index.BaseCompositeReader: int maxDoc>;

        if i0 < $i2 goto label2;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("docID must be >= 0 and < maxDoc=");

        $i1 = r3.<org.apache.lucene.index.BaseCompositeReader: int maxDoc>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (got docID=");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r0;

     label2:
        $r9 = r3.<org.apache.lucene.index.BaseCompositeReader: int[] starts>;

        $i3 = staticinvoke <org.apache.lucene.index.ReaderUtil: int subIndex(int,int[])>(i0, $r9);

        return $i3;
    }

    protected final int readerBase(int)
    {
        int[] $r3;
        int i0, $i1, $i2;
        java.lang.IllegalArgumentException $r0;
        org.apache.lucene.index.BaseCompositeReader r1;
        org.apache.lucene.index.IndexReader[] $r2;

        r1 := @this: org.apache.lucene.index.BaseCompositeReader;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $r2 = r1.<org.apache.lucene.index.BaseCompositeReader: org.apache.lucene.index.IndexReader[] subReaders>;

        $i1 = lengthof $r2;

        if i0 < $i1 goto label2;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("readerIndex must be >= 0 and < getSequentialSubReaders().size()");

        throw $r0;

     label2:
        $r3 = r1.<org.apache.lucene.index.BaseCompositeReader: int[] starts>;

        $i2 = $r3[i0];

        return $i2;
    }

    protected final java.util.List getSequentialSubReaders()
    {
        java.util.List $r1;
        org.apache.lucene.index.BaseCompositeReader r0;

        r0 := @this: org.apache.lucene.index.BaseCompositeReader;

        $r1 = r0.<org.apache.lucene.index.BaseCompositeReader: java.util.List subReadersList>;

        return $r1;
    }
}
