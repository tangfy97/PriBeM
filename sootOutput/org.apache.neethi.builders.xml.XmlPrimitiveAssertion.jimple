public class org.apache.neethi.builders.xml.XmlPrimitiveAssertion extends org.apache.neethi.builders.PrimitiveAssertion implements org.apache.neethi.Assertion
{
    protected org.w3c.dom.Element element;

    public void <init>(org.w3c.dom.Element)
    {
        org.w3c.dom.Element r2;
        javax.xml.namespace.QName $r1;
        java.lang.String $r3, $r4;
        org.apache.neethi.builders.xml.XmlPrimitiveAssertion r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.neethi.builders.xml.XmlPrimitiveAssertion;

        r2 := @parameter0: org.w3c.dom.Element;

        $r1 = new javax.xml.namespace.QName;

        $r3 = interfaceinvoke r2.<org.w3c.dom.Element: java.lang.String getNamespaceURI()>();

        $r4 = interfaceinvoke r2.<org.w3c.dom.Element: java.lang.String getLocalName()>();

        specialinvoke $r1.<javax.xml.namespace.QName: void <init>(java.lang.String,java.lang.String)>($r3, $r4);

        $z0 = staticinvoke <org.apache.neethi.builders.xml.XMLPrimitiveAssertionBuilder: boolean isOptional(org.w3c.dom.Element)>(r2);

        $z1 = staticinvoke <org.apache.neethi.builders.xml.XMLPrimitiveAssertionBuilder: boolean isIgnorable(org.w3c.dom.Element)>(r2);

        specialinvoke r0.<org.apache.neethi.builders.PrimitiveAssertion: void <init>(javax.xml.namespace.QName,boolean,boolean)>($r1, $z0, $z1);

        r0.<org.apache.neethi.builders.xml.XmlPrimitiveAssertion: org.w3c.dom.Element element> = r2;

        return;
    }

    public void setValue(org.w3c.dom.Element)
    {
        org.w3c.dom.Element r1;
        org.apache.neethi.builders.xml.XmlPrimitiveAssertion r0;

        r0 := @this: org.apache.neethi.builders.xml.XmlPrimitiveAssertion;

        r1 := @parameter0: org.w3c.dom.Element;

        r0.<org.apache.neethi.builders.xml.XmlPrimitiveAssertion: org.w3c.dom.Element element> = r1;

        return;
    }

    public org.w3c.dom.Element getValue()
    {
        org.w3c.dom.Element $r1;
        org.apache.neethi.builders.xml.XmlPrimitiveAssertion r0;

        r0 := @this: org.apache.neethi.builders.xml.XmlPrimitiveAssertion;

        $r1 = r0.<org.apache.neethi.builders.xml.XmlPrimitiveAssertion: org.w3c.dom.Element element>;

        return $r1;
    }

    public org.apache.neethi.PolicyComponent normalize()
    {
        org.apache.neethi.All $r3, $r10;
        org.w3c.dom.Attr $r7, $r8;
        org.apache.neethi.Policy $r1;
        org.apache.neethi.ExactlyOne $r2;
        org.apache.neethi.builders.xml.XmlPrimitiveAssertion r0, $r9;
        org.w3c.dom.Element $r4, r6;
        org.w3c.dom.Node $r5;
        boolean $z0;

        r0 := @this: org.apache.neethi.builders.xml.XmlPrimitiveAssertion;

        $z0 = r0.<org.apache.neethi.builders.xml.XmlPrimitiveAssertion: boolean optional>;

        if $z0 == 0 goto label3;

        $r1 = new org.apache.neethi.Policy;

        specialinvoke $r1.<org.apache.neethi.Policy: void <init>()>();

        $r2 = new org.apache.neethi.ExactlyOne;

        specialinvoke $r2.<org.apache.neethi.ExactlyOne: void <init>()>();

        $r3 = new org.apache.neethi.All;

        specialinvoke $r3.<org.apache.neethi.All: void <init>()>();

        $r4 = r0.<org.apache.neethi.builders.xml.XmlPrimitiveAssertion: org.w3c.dom.Element element>;

        $r5 = interfaceinvoke $r4.<org.w3c.dom.Element: org.w3c.dom.Node cloneNode(boolean)>(1);

        r6 = (org.w3c.dom.Element) $r5;

        $r7 = interfaceinvoke r6.<org.w3c.dom.Element: org.w3c.dom.Attr getAttributeNodeNS(java.lang.String,java.lang.String)>("http://schemas.xmlsoap.org/ws/2004/09/policy", "Optional");

        if $r7 == null goto label1;

        interfaceinvoke r6.<org.w3c.dom.Element: org.w3c.dom.Attr removeAttributeNode(org.w3c.dom.Attr)>($r7);

     label1:
        $r8 = interfaceinvoke r6.<org.w3c.dom.Element: org.w3c.dom.Attr getAttributeNodeNS(java.lang.String,java.lang.String)>("http://www.w3.org/ns/ws-policy", "Optional");

        if $r8 == null goto label2;

        interfaceinvoke r6.<org.w3c.dom.Element: org.w3c.dom.Attr removeAttributeNode(org.w3c.dom.Attr)>($r8);

     label2:
        $r9 = new org.apache.neethi.builders.xml.XmlPrimitiveAssertion;

        specialinvoke $r9.<org.apache.neethi.builders.xml.XmlPrimitiveAssertion: void <init>(org.w3c.dom.Element)>(r6);

        virtualinvoke $r3.<org.apache.neethi.All: void addPolicyComponent(org.apache.neethi.PolicyComponent)>($r9);

        virtualinvoke $r2.<org.apache.neethi.ExactlyOne: void addPolicyComponent(org.apache.neethi.PolicyComponent)>($r3);

        $r10 = new org.apache.neethi.All;

        specialinvoke $r10.<org.apache.neethi.All: void <init>()>();

        virtualinvoke $r2.<org.apache.neethi.ExactlyOne: void addPolicyComponent(org.apache.neethi.PolicyComponent)>($r10);

        virtualinvoke $r1.<org.apache.neethi.Policy: void addPolicyComponent(org.apache.neethi.PolicyComponent)>($r2);

        return $r1;

     label3:
        return r0;
    }

    public void serialize(javax.xml.stream.XMLStreamWriter) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.transform.dom.DOMSource $r4;
        javax.xml.stream.XMLEventReader $r6;
        javax.xml.stream.XMLInputFactory $r3;
        java.lang.RuntimeException $r2;
        org.apache.neethi.builders.xml.XmlPrimitiveAssertion r0;
        org.w3c.dom.Element $r1, $r5;
        javax.xml.stream.XMLStreamWriter r7;

        r0 := @this: org.apache.neethi.builders.xml.XmlPrimitiveAssertion;

        r7 := @parameter0: javax.xml.stream.XMLStreamWriter;

        $r1 = r0.<org.apache.neethi.builders.xml.XmlPrimitiveAssertion: org.w3c.dom.Element element>;

        if $r1 == null goto label1;

        $r3 = staticinvoke <javax.xml.stream.XMLInputFactory: javax.xml.stream.XMLInputFactory newInstance()>();

        $r4 = new javax.xml.transform.dom.DOMSource;

        $r5 = r0.<org.apache.neethi.builders.xml.XmlPrimitiveAssertion: org.w3c.dom.Element element>;

        specialinvoke $r4.<javax.xml.transform.dom.DOMSource: void <init>(org.w3c.dom.Node)>($r5);

        $r6 = virtualinvoke $r3.<javax.xml.stream.XMLInputFactory: javax.xml.stream.XMLEventReader createXMLEventReader(javax.xml.transform.Source)>($r4);

        specialinvoke r0.<org.apache.neethi.builders.xml.XmlPrimitiveAssertion: void copyEvents(javax.xml.stream.XMLEventReader,javax.xml.stream.XMLStreamWriter)>($r6, r7);

        goto label2;

     label1:
        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Wrapped Element is not set");

        throw $r2;

     label2:
        return;
    }

    public final short getType()
    {
        org.apache.neethi.builders.xml.XmlPrimitiveAssertion r0;

        r0 := @this: org.apache.neethi.builders.xml.XmlPrimitiveAssertion;

        return 5;
    }

    public boolean equal(org.apache.neethi.PolicyComponent)
    {
        org.apache.neethi.Assertion $r3;
        org.apache.neethi.builders.xml.XmlPrimitiveAssertion r1;
        short $s0;
        org.apache.neethi.PolicyComponent r0;
        int $i1;
        javax.xml.namespace.QName $r2, $r4;
        boolean $z0;

        r1 := @this: org.apache.neethi.builders.xml.XmlPrimitiveAssertion;

        r0 := @parameter0: org.apache.neethi.PolicyComponent;

        $s0 = interfaceinvoke r0.<org.apache.neethi.PolicyComponent: short getType()>();

        $i1 = (int) $s0;

        if $i1 == 5 goto label1;

        return 0;

     label1:
        $r2 = virtualinvoke r1.<org.apache.neethi.builders.xml.XmlPrimitiveAssertion: javax.xml.namespace.QName getName()>();

        $r3 = (org.apache.neethi.Assertion) r0;

        $r4 = interfaceinvoke $r3.<org.apache.neethi.Assertion: javax.xml.namespace.QName getName()>();

        $z0 = virtualinvoke $r2.<javax.xml.namespace.QName: boolean equals(java.lang.Object)>($r4);

        return $z0;
    }

    private void copyEvents(javax.xml.stream.XMLEventReader, javax.xml.stream.XMLStreamWriter) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.events.XMLEvent $r1;
        javax.xml.stream.XMLStreamWriter r2;
        boolean $z0, $z1, $z2, $z3;
        javax.xml.stream.events.Namespace r34, r35;
        javax.xml.stream.events.Comment $r12;
        javax.xml.namespace.QName $r7, $r17, $r24;
        javax.xml.stream.events.Attribute r33, r36;
        int $i0;
        java.lang.String $r3, $r4, $r6, $r8, $r9, $r10, $r11, $r13, $r15, $r18, $r19, $r20, $r25, $r26, $r27, $r28, $r30, $r31;
        javax.xml.stream.events.StartElement $r16;
        javax.xml.stream.XMLEventReader r0;
        java.util.Iterator $r21, $r22;
        org.apache.neethi.builders.xml.XmlPrimitiveAssertion r32;
        javax.xml.stream.events.Characters $r5, $r14;
        java.lang.Object $r23, $r29;

        r32 := @this: org.apache.neethi.builders.xml.XmlPrimitiveAssertion;

        r0 := @parameter0: javax.xml.stream.XMLEventReader;

        r2 := @parameter1: javax.xml.stream.XMLStreamWriter;

     label01:
        $z0 = interfaceinvoke r0.<javax.xml.stream.XMLEventReader: boolean hasNext()>();

        if $z0 == 0 goto label15;

        $r1 = interfaceinvoke r0.<javax.xml.stream.XMLEventReader: javax.xml.stream.events.XMLEvent nextEvent()>();

        $i0 = interfaceinvoke $r1.<javax.xml.stream.events.XMLEvent: int getEventType()>();

        tableswitch($i0)
        {
            case 1: goto label06;
            case 2: goto label04;
            case 3: goto label14;
            case 4: goto label10;
            case 5: goto label13;
            case 6: goto label14;
            case 7: goto label03;
            case 8: goto label03;
            case 9: goto label14;
            case 10: goto label02;
            case 11: goto label14;
            case 12: goto label12;
            case 13: goto label05;
            default: goto label14;
        };

     label02:
        r33 = (javax.xml.stream.events.Attribute) $r1;

        $r7 = interfaceinvoke r33.<javax.xml.stream.events.Attribute: javax.xml.namespace.QName getName()>();

        $r8 = virtualinvoke $r7.<javax.xml.namespace.QName: java.lang.String getPrefix()>();

        $r9 = virtualinvoke $r7.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $r10 = virtualinvoke $r7.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $r11 = interfaceinvoke r33.<javax.xml.stream.events.Attribute: java.lang.String getValue()>();

        interfaceinvoke r2.<javax.xml.stream.XMLStreamWriter: void writeAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r8, $r9, $r10, $r11);

        goto label14;

     label03:
        goto label14;

     label04:
        interfaceinvoke r2.<javax.xml.stream.XMLStreamWriter: void writeEndElement()>();

        goto label14;

     label05:
        r34 = (javax.xml.stream.events.Namespace) $r1;

        $r3 = interfaceinvoke r34.<javax.xml.stream.events.Namespace: java.lang.String getPrefix()>();

        $r4 = interfaceinvoke r34.<javax.xml.stream.events.Namespace: java.lang.String getNamespaceURI()>();

        interfaceinvoke r2.<javax.xml.stream.XMLStreamWriter: void writeNamespace(java.lang.String,java.lang.String)>($r3, $r4);

        goto label14;

     label06:
        $r16 = interfaceinvoke $r1.<javax.xml.stream.events.XMLEvent: javax.xml.stream.events.StartElement asStartElement()>();

        $r17 = interfaceinvoke $r16.<javax.xml.stream.events.StartElement: javax.xml.namespace.QName getName()>();

        $r18 = virtualinvoke $r17.<javax.xml.namespace.QName: java.lang.String getPrefix()>();

        $r19 = virtualinvoke $r17.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $r20 = virtualinvoke $r17.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        interfaceinvoke r2.<javax.xml.stream.XMLStreamWriter: void writeStartElement(java.lang.String,java.lang.String,java.lang.String)>($r18, $r19, $r20);

        $r21 = interfaceinvoke $r16.<javax.xml.stream.events.StartElement: java.util.Iterator getNamespaces()>();

     label07:
        $z2 = interfaceinvoke $r21.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label08;

        $r29 = interfaceinvoke $r21.<java.util.Iterator: java.lang.Object next()>();

        r35 = (javax.xml.stream.events.Namespace) $r29;

        $r30 = interfaceinvoke r35.<javax.xml.stream.events.Namespace: java.lang.String getPrefix()>();

        $r31 = interfaceinvoke r35.<javax.xml.stream.events.Namespace: java.lang.String getNamespaceURI()>();

        interfaceinvoke r2.<javax.xml.stream.XMLStreamWriter: void writeNamespace(java.lang.String,java.lang.String)>($r30, $r31);

        goto label07;

     label08:
        $r22 = interfaceinvoke $r16.<javax.xml.stream.events.StartElement: java.util.Iterator getAttributes()>();

     label09:
        $z3 = interfaceinvoke $r22.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label14;

        $r23 = interfaceinvoke $r22.<java.util.Iterator: java.lang.Object next()>();

        r36 = (javax.xml.stream.events.Attribute) $r23;

        $r24 = interfaceinvoke r36.<javax.xml.stream.events.Attribute: javax.xml.namespace.QName getName()>();

        $r25 = virtualinvoke $r24.<javax.xml.namespace.QName: java.lang.String getPrefix()>();

        $r26 = virtualinvoke $r24.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $r27 = virtualinvoke $r24.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $r28 = interfaceinvoke r36.<javax.xml.stream.events.Attribute: java.lang.String getValue()>();

        interfaceinvoke r2.<javax.xml.stream.XMLStreamWriter: void writeAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r25, $r26, $r27, $r28);

        goto label09;

     label10:
        $r14 = interfaceinvoke $r1.<javax.xml.stream.events.XMLEvent: javax.xml.stream.events.Characters asCharacters()>();

        $r15 = interfaceinvoke $r14.<javax.xml.stream.events.Characters: java.lang.String getData()>();

        $z1 = interfaceinvoke $r14.<javax.xml.stream.events.Characters: boolean isCData()>();

        if $z1 == 0 goto label11;

        interfaceinvoke r2.<javax.xml.stream.XMLStreamWriter: void writeCData(java.lang.String)>($r15);

        goto label14;

     label11:
        interfaceinvoke r2.<javax.xml.stream.XMLStreamWriter: void writeCharacters(java.lang.String)>($r15);

        goto label14;

     label12:
        $r5 = interfaceinvoke $r1.<javax.xml.stream.events.XMLEvent: javax.xml.stream.events.Characters asCharacters()>();

        $r6 = interfaceinvoke $r5.<javax.xml.stream.events.Characters: java.lang.String getData()>();

        interfaceinvoke r2.<javax.xml.stream.XMLStreamWriter: void writeCData(java.lang.String)>($r6);

        goto label14;

     label13:
        $r12 = (javax.xml.stream.events.Comment) $r1;

        $r13 = interfaceinvoke $r12.<javax.xml.stream.events.Comment: java.lang.String getText()>();

        interfaceinvoke r2.<javax.xml.stream.XMLStreamWriter: void writeComment(java.lang.String)>($r13);

        goto label14;

     label14:
        goto label01;

     label15:
        return;
    }
}
