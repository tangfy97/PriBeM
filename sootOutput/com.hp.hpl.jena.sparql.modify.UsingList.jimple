public class com.hp.hpl.jena.sparql.modify.UsingList extends java.lang.Object
{
    private java.util.List using;
    private java.util.List usingNamed;

    public void <init>()
    {
        com.hp.hpl.jena.sparql.modify.UsingList r0;
        java.util.ArrayList $r1, $r2;

        r0 := @this: com.hp.hpl.jena.sparql.modify.UsingList;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.modify.UsingList: java.util.List using> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.modify.UsingList: java.util.List usingNamed> = $r2;

        return;
    }

    public void addUsing(com.hp.hpl.jena.graph.Node)
    {
        java.util.List $r2;
        com.hp.hpl.jena.graph.Node r1;
        com.hp.hpl.jena.sparql.modify.UsingList r0;

        r0 := @this: com.hp.hpl.jena.sparql.modify.UsingList;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        $r2 = r0.<com.hp.hpl.jena.sparql.modify.UsingList: java.util.List using>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void addAllUsing(java.util.Collection)
    {
        java.util.List $r2;
        com.hp.hpl.jena.sparql.modify.UsingList r0;
        java.util.Collection r1;

        r0 := @this: com.hp.hpl.jena.sparql.modify.UsingList;

        r1 := @parameter0: java.util.Collection;

        $r2 = r0.<com.hp.hpl.jena.sparql.modify.UsingList: java.util.List using>;

        interfaceinvoke $r2.<java.util.List: boolean addAll(java.util.Collection)>(r1);

        return;
    }

    public void addUsingNamed(com.hp.hpl.jena.graph.Node)
    {
        java.util.List $r2;
        com.hp.hpl.jena.graph.Node r1;
        com.hp.hpl.jena.sparql.modify.UsingList r0;

        r0 := @this: com.hp.hpl.jena.sparql.modify.UsingList;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        $r2 = r0.<com.hp.hpl.jena.sparql.modify.UsingList: java.util.List usingNamed>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void addAllUsingNamed(java.util.Collection)
    {
        java.util.List $r2;
        com.hp.hpl.jena.sparql.modify.UsingList r0;
        java.util.Collection r1;

        r0 := @this: com.hp.hpl.jena.sparql.modify.UsingList;

        r1 := @parameter0: java.util.Collection;

        $r2 = r0.<com.hp.hpl.jena.sparql.modify.UsingList: java.util.List usingNamed>;

        interfaceinvoke $r2.<java.util.List: boolean addAll(java.util.Collection)>(r1);

        return;
    }

    public java.util.List getUsing()
    {
        java.util.List $r1, $r2;
        com.hp.hpl.jena.sparql.modify.UsingList r0;

        r0 := @this: com.hp.hpl.jena.sparql.modify.UsingList;

        $r1 = r0.<com.hp.hpl.jena.sparql.modify.UsingList: java.util.List using>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r2;
    }

    public java.util.List getUsingNamed()
    {
        java.util.List $r1, $r2;
        com.hp.hpl.jena.sparql.modify.UsingList r0;

        r0 := @this: com.hp.hpl.jena.sparql.modify.UsingList;

        $r1 = r0.<com.hp.hpl.jena.sparql.modify.UsingList: java.util.List usingNamed>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r2;
    }

    public boolean usingIsPresent()
    {
        java.util.List $r1, $r2;
        int $i0, $i1;
        com.hp.hpl.jena.sparql.modify.UsingList r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.modify.UsingList;

        $r1 = r0.<com.hp.hpl.jena.sparql.modify.UsingList: java.util.List using>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 > 0 goto label1;

        $r2 = r0.<com.hp.hpl.jena.sparql.modify.UsingList: java.util.List usingNamed>;

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i1 <= 0 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }
}
