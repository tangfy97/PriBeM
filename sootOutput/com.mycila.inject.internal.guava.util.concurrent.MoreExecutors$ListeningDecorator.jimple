class com.mycila.inject.internal.guava.util.concurrent.MoreExecutors$ListeningDecorator extends com.mycila.inject.internal.guava.util.concurrent.AbstractListeningExecutorService
{
    final java.util.concurrent.ExecutorService delegate;

    void <init>(java.util.concurrent.ExecutorService)
    {
        java.lang.Object $r2;
        com.mycila.inject.internal.guava.util.concurrent.MoreExecutors$ListeningDecorator r0;
        java.util.concurrent.ExecutorService r1, $r3;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.MoreExecutors$ListeningDecorator;

        r1 := @parameter0: java.util.concurrent.ExecutorService;

        specialinvoke r0.<com.mycila.inject.internal.guava.util.concurrent.AbstractListeningExecutorService: void <init>()>();

        $r2 = staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (java.util.concurrent.ExecutorService) $r2;

        r0.<com.mycila.inject.internal.guava.util.concurrent.MoreExecutors$ListeningDecorator: java.util.concurrent.ExecutorService delegate> = $r3;

        return;
    }

    public boolean awaitTermination(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException
    {
        java.util.concurrent.TimeUnit r1;
        long l0;
        com.mycila.inject.internal.guava.util.concurrent.MoreExecutors$ListeningDecorator r0;
        java.util.concurrent.ExecutorService $r2;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.MoreExecutors$ListeningDecorator;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.concurrent.TimeUnit;

        $r2 = r0.<com.mycila.inject.internal.guava.util.concurrent.MoreExecutors$ListeningDecorator: java.util.concurrent.ExecutorService delegate>;

        $z0 = interfaceinvoke $r2.<java.util.concurrent.ExecutorService: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>(l0, r1);

        return $z0;
    }

    public boolean isShutdown()
    {
        com.mycila.inject.internal.guava.util.concurrent.MoreExecutors$ListeningDecorator r0;
        java.util.concurrent.ExecutorService $r1;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.MoreExecutors$ListeningDecorator;

        $r1 = r0.<com.mycila.inject.internal.guava.util.concurrent.MoreExecutors$ListeningDecorator: java.util.concurrent.ExecutorService delegate>;

        $z0 = interfaceinvoke $r1.<java.util.concurrent.ExecutorService: boolean isShutdown()>();

        return $z0;
    }

    public boolean isTerminated()
    {
        com.mycila.inject.internal.guava.util.concurrent.MoreExecutors$ListeningDecorator r0;
        java.util.concurrent.ExecutorService $r1;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.MoreExecutors$ListeningDecorator;

        $r1 = r0.<com.mycila.inject.internal.guava.util.concurrent.MoreExecutors$ListeningDecorator: java.util.concurrent.ExecutorService delegate>;

        $z0 = interfaceinvoke $r1.<java.util.concurrent.ExecutorService: boolean isTerminated()>();

        return $z0;
    }

    public void shutdown()
    {
        com.mycila.inject.internal.guava.util.concurrent.MoreExecutors$ListeningDecorator r0;
        java.util.concurrent.ExecutorService $r1;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.MoreExecutors$ListeningDecorator;

        $r1 = r0.<com.mycila.inject.internal.guava.util.concurrent.MoreExecutors$ListeningDecorator: java.util.concurrent.ExecutorService delegate>;

        interfaceinvoke $r1.<java.util.concurrent.ExecutorService: void shutdown()>();

        return;
    }

    public java.util.List shutdownNow()
    {
        java.util.List $r2;
        com.mycila.inject.internal.guava.util.concurrent.MoreExecutors$ListeningDecorator r0;
        java.util.concurrent.ExecutorService $r1;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.MoreExecutors$ListeningDecorator;

        $r1 = r0.<com.mycila.inject.internal.guava.util.concurrent.MoreExecutors$ListeningDecorator: java.util.concurrent.ExecutorService delegate>;

        $r2 = interfaceinvoke $r1.<java.util.concurrent.ExecutorService: java.util.List shutdownNow()>();

        return $r2;
    }

    public void execute(java.lang.Runnable)
    {
        java.lang.Runnable r1;
        com.mycila.inject.internal.guava.util.concurrent.MoreExecutors$ListeningDecorator r0;
        java.util.concurrent.ExecutorService $r2;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.MoreExecutors$ListeningDecorator;

        r1 := @parameter0: java.lang.Runnable;

        $r2 = r0.<com.mycila.inject.internal.guava.util.concurrent.MoreExecutors$ListeningDecorator: java.util.concurrent.ExecutorService delegate>;

        interfaceinvoke $r2.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>(r1);

        return;
    }
}
