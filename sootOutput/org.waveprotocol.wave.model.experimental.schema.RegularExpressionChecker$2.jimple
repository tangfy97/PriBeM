final class org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$2 extends org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$State
{

    void <init>()
    {
        org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$2 r0;

        r0 := @this: org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$2;

        specialinvoke r0.<org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$State: void <init>(org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$1)>(null);

        return;
    }

    org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$State nextState(int, char) throws org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException
    {
        org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException $r11;
        org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$EscapeState $r8;
        char c0;
        org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$HeadState $r9;
        int i1, $i2;
        java.lang.StringBuilder $r4, $r5, $r10;
        java.lang.String $r6;
        org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$2 r1;

        r1 := @this: org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$2;

        i1 := @parameter0: int;

        c0 := @parameter1: char;

        $i2 = (int) c0;

        lookupswitch($i2)
        {
            case 40: goto label2;
            case 41: goto label3;
            case 92: goto label1;
            default: goto label4;
        };

     label1:
        $r8 = new org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$EscapeState;

        specialinvoke $r8.<org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$EscapeState: void <init>(org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$State)>(r1);

        return $r8;

     label2:
        $r9 = new org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$HeadState;

        specialinvoke $r9.<org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$HeadState: void <init>(org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$State)>(r1);

        return $r9;

     label3:
        $r11 = new org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected \')\' at position ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException: void <init>(java.lang.String)>($r6);

        throw $r11;

     label4:
        return r1;
    }

    void endOfInput()
    {
        org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$2 r0;

        r0 := @this: org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$2;

        return;
    }
}
