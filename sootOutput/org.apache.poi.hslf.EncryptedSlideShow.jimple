public final class org.apache.poi.hslf.EncryptedSlideShow extends java.lang.Object
{

    public void <init>()
    {
        org.apache.poi.hslf.EncryptedSlideShow r0;

        r0 := @this: org.apache.poi.hslf.EncryptedSlideShow;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean checkIfEncrypted(org.apache.poi.hslf.HSLFSlideShow)
    {
        org.apache.poi.poifs.filesystem.DirectoryNode $r1;
        org.apache.poi.hslf.record.DocumentEncryptionAtom $r3;
        org.apache.poi.hslf.HSLFSlideShow r0;
        java.io.FileNotFoundException $r2;

        r0 := @parameter0: org.apache.poi.hslf.HSLFSlideShow;

     label1:
        $r1 = virtualinvoke r0.<org.apache.poi.hslf.HSLFSlideShow: org.apache.poi.poifs.filesystem.DirectoryNode getPOIFSDirectory()>();

        virtualinvoke $r1.<org.apache.poi.poifs.filesystem.DirectoryNode: org.apache.poi.poifs.filesystem.Entry getEntry(java.lang.String)>("EncryptedSummary");

     label2:
        return 1;

     label3:
        $r2 := @caughtexception;

        $r3 = staticinvoke <org.apache.poi.hslf.EncryptedSlideShow: org.apache.poi.hslf.record.DocumentEncryptionAtom fetchDocumentEncryptionAtom(org.apache.poi.hslf.HSLFSlideShow)>(r0);

        if $r3 == null goto label4;

        return 1;

     label4:
        return 0;

        catch java.io.FileNotFoundException from label1 to label2 with label3;
    }

    public static org.apache.poi.hslf.record.DocumentEncryptionAtom fetchDocumentEncryptionAtom(org.apache.poi.hslf.HSLFSlideShow)
    {
        byte[] $r2, $r3, $r5, $r13;
        org.apache.poi.hslf.record.UserEditAtom r18;
        org.apache.poi.hslf.record.DocumentEncryptionAtom $r15;
        java.lang.Integer $r10, $r12;
        byte $b1, $b5;
        int[] $r8;
        org.apache.poi.hslf.record.CurrentUserAtom $r1;
        boolean $z0, $z1, $z2;
        org.apache.poi.hslf.HSLFSlideShow r0;
        org.apache.poi.hslf.record.Record $r4, $r6, $r14;
        org.apache.poi.hslf.record.PersistPtrHolder r7;
        long $l0, $l2, $l4, $l6;
        int $i3, $i7, $i8, $i9, $i10, $i11, i12, i13, $i14, $i16, $i18;
        java.util.Hashtable $r9;
        java.lang.ArrayIndexOutOfBoundsException $r17;
        org.apache.poi.hslf.exceptions.CorruptPowerPointFileException $r19;
        java.lang.Object $r11;

        r0 := @parameter0: org.apache.poi.hslf.HSLFSlideShow;

        $r1 = virtualinvoke r0.<org.apache.poi.hslf.HSLFSlideShow: org.apache.poi.hslf.record.CurrentUserAtom getCurrentUserAtom()>();

        $l0 = virtualinvoke $r1.<org.apache.poi.hslf.record.CurrentUserAtom: long getCurrentEditOffset()>();

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label12;

        $l2 = virtualinvoke $r1.<org.apache.poi.hslf.record.CurrentUserAtom: long getCurrentEditOffset()>();

        $r2 = virtualinvoke r0.<org.apache.poi.hslf.HSLFSlideShow: byte[] getUnderlyingBytes()>();

        $i3 = lengthof $r2;

        $l4 = (long) $i3;

        $b5 = $l2 cmp $l4;

        $i14 = (int) $b5;

        if $i14 <= 0 goto label01;

        $r19 = new org.apache.poi.hslf.exceptions.CorruptPowerPointFileException;

        specialinvoke $r19.<org.apache.poi.hslf.exceptions.CorruptPowerPointFileException: void <init>(java.lang.String)>("The CurrentUserAtom claims that the offset of last edit details are past the end of the file");

        throw $r19;

     label01:
        $r3 = virtualinvoke r0.<org.apache.poi.hslf.HSLFSlideShow: byte[] getUnderlyingBytes()>();

        $l6 = virtualinvoke $r1.<org.apache.poi.hslf.record.CurrentUserAtom: long getCurrentEditOffset()>();

        $i7 = (int) $l6;

        $r4 = staticinvoke <org.apache.poi.hslf.record.Record: org.apache.poi.hslf.record.Record buildRecordAtOffset(byte[],int)>($r3, $i7);

     label02:
        goto label04;

     label03:
        $r17 := @caughtexception;

        return null;

     label04:
        if $r4 != null goto label05;

        return null;

     label05:
        $z0 = $r4 instanceof org.apache.poi.hslf.record.UserEditAtom;

        if $z0 != 0 goto label06;

        return null;

     label06:
        r18 = (org.apache.poi.hslf.record.UserEditAtom) $r4;

        $r5 = virtualinvoke r0.<org.apache.poi.hslf.HSLFSlideShow: byte[] getUnderlyingBytes()>();

        $i8 = virtualinvoke r18.<org.apache.poi.hslf.record.UserEditAtom: int getPersistPointersOffset()>();

        $r6 = staticinvoke <org.apache.poi.hslf.record.Record: org.apache.poi.hslf.record.Record buildRecordAtOffset(byte[],int)>($r5, $i8);

        $z1 = $r6 instanceof org.apache.poi.hslf.record.PersistPtrHolder;

        if $z1 != 0 goto label07;

        return null;

     label07:
        r7 = (org.apache.poi.hslf.record.PersistPtrHolder) $r6;

        $r8 = virtualinvoke r7.<org.apache.poi.hslf.record.PersistPtrHolder: int[] getKnownSlideIDs()>();

        $i16 = (int) -1;

        i12 = $i16;

        i13 = 0;

     label08:
        $i9 = lengthof $r8;

        if i13 >= $i9 goto label10;

        $i11 = $r8[i13];

        if $i11 <= i12 goto label09;

        i12 = $r8[i13];

     label09:
        i13 = i13 + 1;

        goto label08;

     label10:
        $i18 = (int) -1;

        if i12 != $i18 goto label11;

        return null;

     label11:
        $r9 = virtualinvoke r7.<org.apache.poi.hslf.record.PersistPtrHolder: java.util.Hashtable getSlideLocationsLookup()>();

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i12);

        $r11 = virtualinvoke $r9.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r10);

        $r12 = (java.lang.Integer) $r11;

        $i10 = virtualinvoke $r12.<java.lang.Integer: int intValue()>();

        $r13 = virtualinvoke r0.<org.apache.poi.hslf.HSLFSlideShow: byte[] getUnderlyingBytes()>();

        $r14 = staticinvoke <org.apache.poi.hslf.record.Record: org.apache.poi.hslf.record.Record buildRecordAtOffset(byte[],int)>($r13, $i10);

        $z2 = $r14 instanceof org.apache.poi.hslf.record.DocumentEncryptionAtom;

        if $z2 == 0 goto label12;

        $r15 = (org.apache.poi.hslf.record.DocumentEncryptionAtom) $r14;

        return $r15;

     label12:
        return null;

        catch java.lang.ArrayIndexOutOfBoundsException from label01 to label02 with label03;
    }
}
