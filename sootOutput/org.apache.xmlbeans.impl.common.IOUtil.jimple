public class org.apache.xmlbeans.impl.common.IOUtil extends java.lang.Object
{
    static final boolean $assertionsDisabled;
    static java.lang.Class class$org$apache$xmlbeans$impl$common$IOUtil;

    public void <init>()
    {
        org.apache.xmlbeans.impl.common.IOUtil r0;

        r0 := @this: org.apache.xmlbeans.impl.common.IOUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void copyCompletely(java.io.InputStream, java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r0;
        byte[] $r9;
        java.io.FileOutputStream $r2;
        java.io.IOException $r6, $r7;
        java.io.FileInputStream $r4;
        java.lang.Exception $r8;
        int $i0;
        java.nio.channels.FileChannel $r3, $r5;
        boolean $z0, $z1;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        r0 := @parameter1: java.io.OutputStream;

        $z0 = r0 instanceof java.io.FileOutputStream;

        if $z0 == 0 goto label04;

        $z1 = r1 instanceof java.io.FileInputStream;

        if $z1 == 0 goto label04;

     label01:
        $r2 = (java.io.FileOutputStream) r0;

        $r3 = virtualinvoke $r2.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>();

        $r4 = (java.io.FileInputStream) r1;

        $r5 = virtualinvoke $r4.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>();

        virtualinvoke $r5.<java.nio.channels.FileChannel: long transferTo(long,long,java.nio.channels.WritableByteChannel)>(0L, 2147483647L, $r3);

        virtualinvoke $r5.<java.nio.channels.FileChannel: void close()>();

        virtualinvoke $r3.<java.nio.channels.FileChannel: void close()>();

     label02:
        return;

     label03:
        $r8 := @caughtexception;

     label04:
        $r9 = newarray (byte)[8192];

     label05:
        $i0 = virtualinvoke r1.<java.io.InputStream: int read(byte[])>($r9);

        if $i0 >= 0 goto label06;

        goto label07;

     label06:
        virtualinvoke r0.<java.io.OutputStream: void write(byte[],int,int)>($r9, 0, $i0);

        goto label05;

     label07:
        virtualinvoke r1.<java.io.InputStream: void close()>();

     label08:
        goto label10;

     label09:
        $r7 := @caughtexception;

     label10:
        virtualinvoke r0.<java.io.OutputStream: void close()>();

     label11:
        goto label13;

     label12:
        $r6 := @caughtexception;

     label13:
        return;

        catch java.lang.Exception from label01 to label02 with label03;
        catch java.io.IOException from label07 to label08 with label09;
        catch java.io.IOException from label10 to label11 with label12;
    }

    public static void copyCompletely(java.io.Reader, java.io.Writer) throws java.io.IOException
    {
        int $i0;
        java.io.Writer r2;
        char[] r0;
        java.io.IOException $r3, $r4;
        java.io.Reader r1;

        r1 := @parameter0: java.io.Reader;

        r2 := @parameter1: java.io.Writer;

        r0 = newarray (char)[8192];

     label1:
        $i0 = virtualinvoke r1.<java.io.Reader: int read(char[])>(r0);

        if $i0 >= 0 goto label2;

        goto label3;

     label2:
        virtualinvoke r2.<java.io.Writer: void write(char[],int,int)>(r0, 0, $i0);

        goto label1;

     label3:
        virtualinvoke r1.<java.io.Reader: void close()>();

     label4:
        goto label6;

     label5:
        $r4 := @caughtexception;

     label6:
        virtualinvoke r2.<java.io.Writer: void close()>();

     label7:
        goto label9;

     label8:
        $r3 := @caughtexception;

     label9:
        return;

        catch java.io.IOException from label3 to label4 with label5;
        catch java.io.IOException from label6 to label7 with label8;
    }

    public static void copyCompletely(java.net.URI, java.net.URI) throws java.io.IOException
    {
        java.net.URL $r6;
        java.lang.StringBuffer $r10, $r11, $r12;
        java.net.URI r1, r3;
        java.lang.String $r13;
        boolean $z0;
        java.io.FileOutputStream $r5;
        java.io.IOException $r9;
        java.io.FileInputStream $r7;
        java.lang.IllegalArgumentException $r8;
        java.io.File $r0, $r2, $r4;
        java.lang.Exception $r14;
        java.io.InputStream r15;

        r1 := @parameter0: java.net.URI;

        r3 := @parameter1: java.net.URI;

     label1:
        r15 = null;

     label2:
        $r0 = new java.io.File;

        specialinvoke $r0.<java.io.File: void <init>(java.net.URI)>(r1);

        $z0 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label3;

        $r7 = new java.io.FileInputStream;

        specialinvoke $r7.<java.io.FileInputStream: void <init>(java.io.File)>($r0);

        r15 = $r7;

     label3:
        goto label5;

     label4:
        $r14 := @caughtexception;

     label5:
        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.net.URI)>(r3);

        $r4 = virtualinvoke $r2.<java.io.File: java.io.File getParentFile()>();

        virtualinvoke $r4.<java.io.File: boolean mkdirs()>();

        if r15 != null goto label6;

        $r6 = virtualinvoke r1.<java.net.URI: java.net.URL toURL()>();

        r15 = virtualinvoke $r6.<java.net.URL: java.io.InputStream openStream()>();

     label6:
        $r5 = new java.io.FileOutputStream;

        specialinvoke $r5.<java.io.FileOutputStream: void <init>(java.io.File)>($r2);

        staticinvoke <org.apache.xmlbeans.impl.common.IOUtil: void copyCompletely(java.io.InputStream,java.io.OutputStream)>(r15, $r5);

     label7:
        goto label9;

     label8:
        $r8 := @caughtexception;

        $r9 = new java.io.IOException;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Cannot copy to ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r3);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>($r13);

        throw $r9;

     label9:
        return;

        catch java.lang.Exception from label2 to label3 with label4;
        catch java.lang.IllegalArgumentException from label1 to label7 with label8;
    }

    public static java.io.File createDir(java.io.File, java.lang.String)
    {
        java.lang.AssertionError $r3;
        java.io.File r1, r2, $r9;
        java.lang.StringBuffer $r4, $r5, $r7;
        java.lang.String r0, $r6, $r8;
        boolean $z0, $z1, $z2, $z3, $z4;

        r1 := @parameter0: java.io.File;

        r0 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        $r9 = r1;

        goto label2;

     label1:
        $r9 = new java.io.File;

        specialinvoke $r9.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, r0);

     label2:
        r2 = $r9;

        $z0 = virtualinvoke $r9.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label3;

        $z3 = virtualinvoke $r9.<java.io.File: boolean isDirectory()>();

        if $z3 != 0 goto label4;

     label3:
        $z1 = virtualinvoke r2.<java.io.File: boolean mkdirs()>();

        if $z1 == 0 goto label5;

     label4:
        $z4 = 1;

        goto label6;

     label5:
        $z4 = 0;

     label6:
        $z2 = <org.apache.xmlbeans.impl.common.IOUtil: boolean $assertionsDisabled>;

        if $z2 != 0 goto label7;

        if $z4 != 0 goto label7;

        $r3 = new java.lang.AssertionError;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Could not create ");

        $r6 = virtualinvoke r2.<java.io.File: java.lang.String getAbsolutePath()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.AssertionError: void <init>(java.lang.Object)>($r8);

        throw $r3;

     label7:
        return r2;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.Class $r0, $r1;
        boolean $z0, $z1;

        $r0 = <org.apache.xmlbeans.impl.common.IOUtil: java.lang.Class class$org$apache$xmlbeans$impl$common$IOUtil>;

        if $r0 != null goto label1;

        $r1 = staticinvoke <org.apache.xmlbeans.impl.common.IOUtil: java.lang.Class class$(java.lang.String)>("org.apache.xmlbeans.impl.common.IOUtil");

        <org.apache.xmlbeans.impl.common.IOUtil: java.lang.Class class$org$apache$xmlbeans$impl$common$IOUtil> = $r1;

        goto label2;

     label1:
        $r1 = <org.apache.xmlbeans.impl.common.IOUtil: java.lang.Class class$org$apache$xmlbeans$impl$common$IOUtil>;

     label2:
        $z0 = virtualinvoke $r1.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        <org.apache.xmlbeans.impl.common.IOUtil: boolean $assertionsDisabled> = $z1;

        return;
    }
}
