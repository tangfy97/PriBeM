public abstract class org.codehaus.jackson.map.type.TypeBase extends org.codehaus.jackson.type.JavaType implements org.codehaus.jackson.map.JsonSerializableWithType
{
    volatile java.lang.String _canonicalName;

    protected void <init>(java.lang.Class, int)
    {
        int i0;
        java.lang.Class r1;
        org.codehaus.jackson.map.type.TypeBase r0;

        r0 := @this: org.codehaus.jackson.map.type.TypeBase;

        r1 := @parameter0: java.lang.Class;

        i0 := @parameter1: int;

        specialinvoke r0.<org.codehaus.jackson.type.JavaType: void <init>(java.lang.Class,int)>(r1, i0);

        return;
    }

    protected void <init>(java.lang.Class, int, java.lang.Object, java.lang.Object)
    {
        org.codehaus.jackson.map.type.TypeBase r0;
        int i0;
        java.lang.Class r1;
        java.lang.Object r2, r3;

        r0 := @this: org.codehaus.jackson.map.type.TypeBase;

        r1 := @parameter0: java.lang.Class;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.Object;

        specialinvoke r0.<org.codehaus.jackson.type.JavaType: void <init>(java.lang.Class,int)>(r1, i0);

        r0.<org.codehaus.jackson.map.type.TypeBase: java.lang.Object _valueHandler> = r2;

        r0.<org.codehaus.jackson.map.type.TypeBase: java.lang.Object _typeHandler> = r3;

        return;
    }

    public java.lang.String toCanonical()
    {
        java.lang.String r1;
        org.codehaus.jackson.map.type.TypeBase r0;

        r0 := @this: org.codehaus.jackson.map.type.TypeBase;

        r1 = r0.<org.codehaus.jackson.map.type.TypeBase: java.lang.String _canonicalName>;

        if r1 != null goto label1;

        r1 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeBase: java.lang.String buildCanonicalName()>();

     label1:
        return r1;
    }

    protected abstract java.lang.String buildCanonicalName();

    public abstract java.lang.StringBuilder getGenericSignature(java.lang.StringBuilder);

    public abstract java.lang.StringBuilder getErasedSignature(java.lang.StringBuilder);

    public java.lang.Object getValueHandler()
    {
        java.lang.Object $r1;
        org.codehaus.jackson.map.type.TypeBase r0;

        r0 := @this: org.codehaus.jackson.map.type.TypeBase;

        $r1 = r0.<org.codehaus.jackson.map.type.TypeBase: java.lang.Object _valueHandler>;

        return $r1;
    }

    public java.lang.Object getTypeHandler()
    {
        java.lang.Object $r1;
        org.codehaus.jackson.map.type.TypeBase r0;

        r0 := @this: org.codehaus.jackson.map.type.TypeBase;

        $r1 = r0.<org.codehaus.jackson.map.type.TypeBase: java.lang.Object _typeHandler>;

        return $r1;
    }

    public void serializeWithType(org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider, org.codehaus.jackson.map.TypeSerializer) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.map.TypeSerializer r0;
        org.codehaus.jackson.JsonGenerator r2;
        org.codehaus.jackson.map.type.TypeBase r1;
        org.codehaus.jackson.map.SerializerProvider r3;

        r1 := @this: org.codehaus.jackson.map.type.TypeBase;

        r2 := @parameter0: org.codehaus.jackson.JsonGenerator;

        r3 := @parameter1: org.codehaus.jackson.map.SerializerProvider;

        r0 := @parameter2: org.codehaus.jackson.map.TypeSerializer;

        virtualinvoke r0.<org.codehaus.jackson.map.TypeSerializer: void writeTypePrefixForScalar(java.lang.Object,org.codehaus.jackson.JsonGenerator)>(r1, r2);

        virtualinvoke r1.<org.codehaus.jackson.map.type.TypeBase: void serialize(org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>(r2, r3);

        virtualinvoke r0.<org.codehaus.jackson.map.TypeSerializer: void writeTypeSuffixForScalar(java.lang.Object,org.codehaus.jackson.JsonGenerator)>(r1, r2);

        return;
    }

    public void serialize(org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.JsonGenerator r0;
        org.codehaus.jackson.map.type.TypeBase r1;
        org.codehaus.jackson.map.SerializerProvider r3;
        java.lang.String $r2;

        r1 := @this: org.codehaus.jackson.map.type.TypeBase;

        r0 := @parameter0: org.codehaus.jackson.JsonGenerator;

        r3 := @parameter1: org.codehaus.jackson.map.SerializerProvider;

        $r2 = virtualinvoke r1.<org.codehaus.jackson.map.type.TypeBase: java.lang.String toCanonical()>();

        virtualinvoke r0.<org.codehaus.jackson.JsonGenerator: void writeString(java.lang.String)>($r2);

        return;
    }

    protected static java.lang.StringBuilder _classSignature(java.lang.Class, java.lang.StringBuilder, boolean)
    {
        java.lang.IllegalStateException $r19;
        int $i0, i2, $i4;
        java.lang.String $r2, $r15, $r17;
        boolean $z0, z1;
        char $c1, c3;
        java.lang.Class r0, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        java.lang.StringBuilder r1, $r14, $r16, $r18;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.StringBuilder;

        z1 := @parameter2: boolean;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isPrimitive()>();

        if $z0 == 0 goto label10;

        $r3 = <java.lang.Boolean: java.lang.Class TYPE>;

        if r0 != $r3 goto label01;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(90);

        goto label14;

     label01:
        $r4 = <java.lang.Byte: java.lang.Class TYPE>;

        if r0 != $r4 goto label02;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(66);

        goto label14;

     label02:
        $r5 = <java.lang.Short: java.lang.Class TYPE>;

        if r0 != $r5 goto label03;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(83);

        goto label14;

     label03:
        $r6 = <java.lang.Character: java.lang.Class TYPE>;

        if r0 != $r6 goto label04;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(67);

        goto label14;

     label04:
        $r7 = <java.lang.Integer: java.lang.Class TYPE>;

        if r0 != $r7 goto label05;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(73);

        goto label14;

     label05:
        $r8 = <java.lang.Long: java.lang.Class TYPE>;

        if r0 != $r8 goto label06;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(74);

        goto label14;

     label06:
        $r9 = <java.lang.Float: java.lang.Class TYPE>;

        if r0 != $r9 goto label07;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(70);

        goto label14;

     label07:
        $r10 = <java.lang.Double: java.lang.Class TYPE>;

        if r0 != $r10 goto label08;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(68);

        goto label14;

     label08:
        $r11 = <java.lang.Void: java.lang.Class TYPE>;

        if r0 != $r11 goto label09;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(86);

        goto label14;

     label09:
        $r19 = new java.lang.IllegalStateException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized primitive type: ");

        $r15 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r17);

        throw $r19;

     label10:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(76);

        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        i2 = 0;

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

     label11:
        if i2 >= $i0 goto label13;

        $c1 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(i2);

        c3 = $c1;

        $i4 = (int) $c1;

        if $i4 != 46 goto label12;

        c3 = 47;

     label12:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c3);

        i2 = i2 + 1;

        goto label11;

     label13:
        if z1 == 0 goto label14;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(59);

     label14:
        return r1;
    }
}
