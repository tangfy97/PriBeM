public abstract class org.codehaus.jackson.map.deser.std.StdDeserializer extends org.codehaus.jackson.map.JsonDeserializer
{
    protected final java.lang.Class _valueClass;

    protected void <init>(java.lang.Class)
    {
        java.lang.Class r1;
        org.codehaus.jackson.map.deser.std.StdDeserializer r0;

        r0 := @this: org.codehaus.jackson.map.deser.std.StdDeserializer;

        r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<org.codehaus.jackson.map.JsonDeserializer: void <init>()>();

        r0.<org.codehaus.jackson.map.deser.std.StdDeserializer: java.lang.Class _valueClass> = r1;

        return;
    }

    protected void <init>(org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.type.JavaType r1;
        java.lang.Class $r2;
        org.codehaus.jackson.map.deser.std.StdDeserializer r0;

        r0 := @this: org.codehaus.jackson.map.deser.std.StdDeserializer;

        r1 := @parameter0: org.codehaus.jackson.type.JavaType;

        specialinvoke r0.<org.codehaus.jackson.map.JsonDeserializer: void <init>()>();

        if r1 != null goto label1;

        $r2 = null;

        goto label2;

     label1:
        $r2 = virtualinvoke r1.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

     label2:
        r0.<org.codehaus.jackson.map.deser.std.StdDeserializer: java.lang.Class _valueClass> = $r2;

        return;
    }

    public java.lang.Class getValueClass()
    {
        java.lang.Class $r1;
        org.codehaus.jackson.map.deser.std.StdDeserializer r0;

        r0 := @this: org.codehaus.jackson.map.deser.std.StdDeserializer;

        $r1 = r0.<org.codehaus.jackson.map.deser.std.StdDeserializer: java.lang.Class _valueClass>;

        return $r1;
    }

    public org.codehaus.jackson.type.JavaType getValueType()
    {
        org.codehaus.jackson.map.deser.std.StdDeserializer r0;

        r0 := @this: org.codehaus.jackson.map.deser.std.StdDeserializer;

        return null;
    }

    protected boolean isDefaultSerializer(org.codehaus.jackson.map.JsonDeserializer)
    {
        org.codehaus.jackson.map.deser.std.StdDeserializer r3;
        java.lang.'annotation'.Annotation $r2;
        org.codehaus.jackson.map.JsonDeserializer r0;
        java.lang.Class $r1;
        boolean $z0;

        r3 := @this: org.codehaus.jackson.map.deser.std.StdDeserializer;

        r0 := @parameter0: org.codehaus.jackson.map.JsonDeserializer;

        if r0 == null goto label1;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/codehaus/jackson/map/annotate/JacksonStdImpl;");

        if $r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.Object deserializeWithType(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext, org.codehaus.jackson.map.TypeDeserializer) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.map.TypeDeserializer r0;
        org.codehaus.jackson.map.deser.std.StdDeserializer r4;
        java.lang.Object $r3;
        org.codehaus.jackson.JsonParser r1;
        org.codehaus.jackson.map.DeserializationContext r2;

        r4 := @this: org.codehaus.jackson.map.deser.std.StdDeserializer;

        r1 := @parameter0: org.codehaus.jackson.JsonParser;

        r2 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        r0 := @parameter2: org.codehaus.jackson.map.TypeDeserializer;

        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.TypeDeserializer: java.lang.Object deserializeTypedFromAny(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>(r1, r2);

        return $r3;
    }

    protected final boolean _parseBooleanPrimitive(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.JsonToken $r1, $r2, $r3, $r4, $r5, $r6;
        org.codehaus.jackson.map.DeserializationContext r7;
        org.codehaus.jackson.map.JsonMappingException $r10, $r17;
        int $i0, $i1;
        java.lang.Boolean $r15;
        java.lang.String $r11, $r12, $r13, $r14;
        org.codehaus.jackson.JsonParser r0;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.codehaus.jackson.JsonParser$NumberType $r18, $r19;
        org.codehaus.jackson.map.deser.std.StdDeserializer r8;
        java.lang.Class $r9, $r16;

        r8 := @this: org.codehaus.jackson.map.deser.std.StdDeserializer;

        r0 := @parameter0: org.codehaus.jackson.JsonParser;

        r7 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken getCurrentToken()>();

        $r2 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_TRUE>;

        if $r1 != $r2 goto label01;

        return 1;

     label01:
        $r3 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_FALSE>;

        if $r1 != $r3 goto label02;

        return 0;

     label02:
        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NULL>;

        if $r1 != $r4 goto label03;

        return 0;

     label03:
        $r5 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_INT>;

        if $r1 != $r5 goto label07;

        $r18 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonParser$NumberType getNumberType()>();

        $r19 = <org.codehaus.jackson.JsonParser$NumberType: org.codehaus.jackson.JsonParser$NumberType INT>;

        if $r18 != $r19 goto label06;

        $i1 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: int getIntValue()>();

        if $i1 == 0 goto label04;

        $z4 = 1;

        goto label05;

     label04:
        $z4 = 0;

     label05:
        return $z4;

     label06:
        $z3 = virtualinvoke r8.<org.codehaus.jackson.map.deser.std.StdDeserializer: boolean _parseBooleanFromNumber(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>(r0, r7);

        return $z3;

     label07:
        $r6 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_STRING>;

        if $r1 != $r6 goto label11;

        $r11 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: java.lang.String getText()>();

        $r12 = virtualinvoke $r11.<java.lang.String: java.lang.String trim()>();

        $r13 = "true";

        $z0 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z0 == 0 goto label08;

        return 1;

     label08:
        $r14 = "false";

        $z1 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z1 != 0 goto label09;

        $i0 = virtualinvoke $r12.<java.lang.String: int length()>();

        if $i0 != 0 goto label10;

     label09:
        $r15 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        $z2 = virtualinvoke $r15.<java.lang.Boolean: boolean booleanValue()>();

        return $z2;

     label10:
        $r16 = r8.<org.codehaus.jackson.map.deser.std.StdDeserializer: java.lang.Class _valueClass>;

        $r17 = virtualinvoke r7.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException weirdStringException(java.lang.Class,java.lang.String)>($r16, "only \"true\" or \"false\" recognized");

        throw $r17;

     label11:
        $r9 = r8.<org.codehaus.jackson.map.deser.std.StdDeserializer: java.lang.Class _valueClass>;

        $r10 = virtualinvoke r7.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException mappingException(java.lang.Class,org.codehaus.jackson.JsonToken)>($r9, $r1);

        throw $r10;
    }

    protected final java.lang.Boolean _parseBoolean(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.JsonToken $r1, $r2, $r3, $r4, $r5, $r6;
        boolean $z0, $z1, $z2;
        org.codehaus.jackson.map.DeserializationContext r7;
        org.codehaus.jackson.map.JsonMappingException $r10, $r16;
        int $i0, $i1;
        java.lang.Boolean $r18, $r19, $r20, $r22, $r25, $r26, $r27, $r28;
        java.lang.String $r11, $r12, $r13, $r14;
        org.codehaus.jackson.JsonParser r0;
        org.codehaus.jackson.JsonParser$NumberType $r23, $r24;
        org.codehaus.jackson.map.deser.std.StdDeserializer r8;
        java.lang.Class $r9, $r15;
        java.lang.Object $r17, $r21;

        r8 := @this: org.codehaus.jackson.map.deser.std.StdDeserializer;

        r0 := @parameter0: org.codehaus.jackson.JsonParser;

        r7 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken getCurrentToken()>();

        $r2 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_TRUE>;

        if $r1 != $r2 goto label01;

        $r27 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        return $r27;

     label01:
        $r3 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_FALSE>;

        if $r1 != $r3 goto label02;

        $r26 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        return $r26;

     label02:
        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_INT>;

        if $r1 != $r4 goto label06;

        $r23 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonParser$NumberType getNumberType()>();

        $r24 = <org.codehaus.jackson.JsonParser$NumberType: org.codehaus.jackson.JsonParser$NumberType INT>;

        if $r23 != $r24 goto label05;

        $i1 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: int getIntValue()>();

        if $i1 != 0 goto label03;

        $r28 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        goto label04;

     label03:
        $r28 = <java.lang.Boolean: java.lang.Boolean TRUE>;

     label04:
        return $r28;

     label05:
        $z2 = virtualinvoke r8.<org.codehaus.jackson.map.deser.std.StdDeserializer: boolean _parseBooleanFromNumber(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>(r0, r7);

        $r25 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        return $r25;

     label06:
        $r5 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NULL>;

        if $r1 != $r5 goto label07;

        $r21 = virtualinvoke r8.<org.codehaus.jackson.map.deser.std.StdDeserializer: java.lang.Object getNullValue()>();

        $r22 = (java.lang.Boolean) $r21;

        return $r22;

     label07:
        $r6 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_STRING>;

        if $r1 != $r6 goto label11;

        $r11 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: java.lang.String getText()>();

        $r12 = virtualinvoke $r11.<java.lang.String: java.lang.String trim()>();

        $r13 = "true";

        $z0 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z0 == 0 goto label08;

        $r20 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        return $r20;

     label08:
        $r14 = "false";

        $z1 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z1 == 0 goto label09;

        $r19 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        return $r19;

     label09:
        $i0 = virtualinvoke $r12.<java.lang.String: int length()>();

        if $i0 != 0 goto label10;

        $r17 = virtualinvoke r8.<org.codehaus.jackson.map.deser.std.StdDeserializer: java.lang.Object getEmptyValue()>();

        $r18 = (java.lang.Boolean) $r17;

        return $r18;

     label10:
        $r15 = r8.<org.codehaus.jackson.map.deser.std.StdDeserializer: java.lang.Class _valueClass>;

        $r16 = virtualinvoke r7.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException weirdStringException(java.lang.Class,java.lang.String)>($r15, "only \"true\" or \"false\" recognized");

        throw $r16;

     label11:
        $r9 = r8.<org.codehaus.jackson.map.deser.std.StdDeserializer: java.lang.Class _valueClass>;

        $r10 = virtualinvoke r7.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException mappingException(java.lang.Class,org.codehaus.jackson.JsonToken)>($r9, $r1);

        throw $r10;
    }

    protected final boolean _parseBooleanFromNumber(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        long $l0;
        org.codehaus.jackson.map.DeserializationContext r9;
        byte $b1;
        java.lang.Boolean $r5, $r7, $r10;
        java.lang.String $r3, $r4, $r6;
        org.codehaus.jackson.JsonParser r0;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.codehaus.jackson.JsonParser$NumberType $r1, $r2;
        org.codehaus.jackson.map.deser.std.StdDeserializer r8;

        r8 := @this: org.codehaus.jackson.map.deser.std.StdDeserializer;

        r0 := @parameter0: org.codehaus.jackson.JsonParser;

        r9 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonParser$NumberType getNumberType()>();

        $r2 = <org.codehaus.jackson.JsonParser$NumberType: org.codehaus.jackson.JsonParser$NumberType LONG>;

        if $r1 != $r2 goto label3;

        $l0 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: long getLongValue()>();

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        $r10 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        goto label2;

     label1:
        $r10 = <java.lang.Boolean: java.lang.Boolean TRUE>;

     label2:
        $z4 = virtualinvoke $r10.<java.lang.Boolean: boolean booleanValue()>();

        return $z4;

     label3:
        $r3 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: java.lang.String getText()>();

        $r4 = "0.0";

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label4;

        $r6 = "0";

        $z2 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z2 == 0 goto label5;

     label4:
        $r5 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        $z1 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        return $z1;

     label5:
        $r7 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $z3 = virtualinvoke $r7.<java.lang.Boolean: boolean booleanValue()>();

        return $z3;
    }

    protected java.lang.Byte _parseByte(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.JsonToken $r1, $r2, $r4, $r5, $r6;
        org.codehaus.jackson.map.DeserializationContext r7;
        org.codehaus.jackson.map.JsonMappingException $r10, $r16, $r22;
        byte $b0, $b3;
        int $i1, $i2, $i5;
        java.lang.String $r13, $r14;
        java.lang.Byte $r3, $r12, $r17, $r19;
        org.codehaus.jackson.JsonParser r0;
        java.lang.IllegalArgumentException $r20;
        org.codehaus.jackson.map.deser.std.StdDeserializer r8;
        java.lang.Class $r9, $r15, $r21;
        java.lang.Object $r11, $r18;

        r8 := @this: org.codehaus.jackson.map.deser.std.StdDeserializer;

        r0 := @parameter0: org.codehaus.jackson.JsonParser;

        r7 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken getCurrentToken()>();

        $r2 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_INT>;

        if $r1 == $r2 goto label01;

        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_FLOAT>;

        if $r1 != $r4 goto label02;

     label01:
        $b0 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: byte getByteValue()>();

        $r3 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b0);

        return $r3;

     label02:
        $r5 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_STRING>;

        if $r1 != $r5 goto label11;

        $r13 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: java.lang.String getText()>();

        $r14 = virtualinvoke $r13.<java.lang.String: java.lang.String trim()>();

     label03:
        $i1 = virtualinvoke $r14.<java.lang.String: int length()>();

        if $i1 != 0 goto label05;

        $r18 = virtualinvoke r8.<org.codehaus.jackson.map.deser.std.StdDeserializer: java.lang.Object getEmptyValue()>();

        $r19 = (java.lang.Byte) $r18;

     label04:
        return $r19;

     label05:
        $i2 = staticinvoke <org.codehaus.jackson.io.NumberInput: int parseInt(java.lang.String)>($r14);

     label06:
        goto label08;

     label07:
        $r20 := @caughtexception;

        $r21 = r8.<org.codehaus.jackson.map.deser.std.StdDeserializer: java.lang.Class _valueClass>;

        $r22 = virtualinvoke r7.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException weirdStringException(java.lang.Class,java.lang.String)>($r21, "not a valid Byte value");

        throw $r22;

     label08:
        $i5 = (int) -128;

        if $i2 < $i5 goto label09;

        if $i2 <= 255 goto label10;

     label09:
        $r15 = r8.<org.codehaus.jackson.map.deser.std.StdDeserializer: java.lang.Class _valueClass>;

        $r16 = virtualinvoke r7.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException weirdStringException(java.lang.Class,java.lang.String)>($r15, "overflow, value can not be represented as 8-bit value");

        throw $r16;

     label10:
        $b3 = (byte) $i2;

        $r17 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b3);

        return $r17;

     label11:
        $r6 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NULL>;

        if $r1 != $r6 goto label12;

        $r11 = virtualinvoke r8.<org.codehaus.jackson.map.deser.std.StdDeserializer: java.lang.Object getNullValue()>();

        $r12 = (java.lang.Byte) $r11;

        return $r12;

     label12:
        $r9 = r8.<org.codehaus.jackson.map.deser.std.StdDeserializer: java.lang.Class _valueClass>;

        $r10 = virtualinvoke r7.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException mappingException(java.lang.Class,org.codehaus.jackson.JsonToken)>($r9, $r1);

        throw $r10;

        catch java.lang.IllegalArgumentException from label03 to label04 with label07;
        catch java.lang.IllegalArgumentException from label05 to label06 with label07;
    }

    protected java.lang.Short _parseShort(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.JsonToken $r1, $r2, $r4, $r5, $r6;
        org.codehaus.jackson.map.DeserializationContext r7;
        short $s0, $s3;
        org.codehaus.jackson.map.JsonMappingException $r10, $r16, $r22;
        java.lang.Short $r3, $r12, $r17, $r19;
        int $i1, $i2, $i5;
        java.lang.String $r13, $r14;
        org.codehaus.jackson.JsonParser r0;
        java.lang.IllegalArgumentException $r20;
        org.codehaus.jackson.map.deser.std.StdDeserializer r8;
        java.lang.Class $r9, $r15, $r21;
        java.lang.Object $r11, $r18;

        r8 := @this: org.codehaus.jackson.map.deser.std.StdDeserializer;

        r0 := @parameter0: org.codehaus.jackson.JsonParser;

        r7 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken getCurrentToken()>();

        $r2 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_INT>;

        if $r1 == $r2 goto label01;

        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_FLOAT>;

        if $r1 != $r4 goto label02;

     label01:
        $s0 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: short getShortValue()>();

        $r3 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>($s0);

        return $r3;

     label02:
        $r5 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_STRING>;

        if $r1 != $r5 goto label11;

        $r13 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: java.lang.String getText()>();

        $r14 = virtualinvoke $r13.<java.lang.String: java.lang.String trim()>();

     label03:
        $i1 = virtualinvoke $r14.<java.lang.String: int length()>();

        if $i1 != 0 goto label05;

        $r18 = virtualinvoke r8.<org.codehaus.jackson.map.deser.std.StdDeserializer: java.lang.Object getEmptyValue()>();

        $r19 = (java.lang.Short) $r18;

     label04:
        return $r19;

     label05:
        $i2 = staticinvoke <org.codehaus.jackson.io.NumberInput: int parseInt(java.lang.String)>($r14);

     label06:
        goto label08;

     label07:
        $r20 := @caughtexception;

        $r21 = r8.<org.codehaus.jackson.map.deser.std.StdDeserializer: java.lang.Class _valueClass>;

        $r22 = virtualinvoke r7.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException weirdStringException(java.lang.Class,java.lang.String)>($r21, "not a valid Short value");

        throw $r22;

     label08:
        $i5 = (int) -32768;

        if $i2 < $i5 goto label09;

        if $i2 <= 32767 goto label10;

     label09:
        $r15 = r8.<org.codehaus.jackson.map.deser.std.StdDeserializer: java.lang.Class _valueClass>;

        $r16 = virtualinvoke r7.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException weirdStringException(java.lang.Class,java.lang.String)>($r15, "overflow, value can not be represented as 16-bit value");

        throw $r16;

     label10:
        $s3 = (short) $i2;

        $r17 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>($s3);

        return $r17;

     label11:
        $r6 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NULL>;

        if $r1 != $r6 goto label12;

        $r11 = virtualinvoke r8.<org.codehaus.jackson.map.deser.std.StdDeserializer: java.lang.Object getNullValue()>();

        $r12 = (java.lang.Short) $r11;

        return $r12;

     label12:
        $r9 = r8.<org.codehaus.jackson.map.deser.std.StdDeserializer: java.lang.Class _valueClass>;

        $r10 = virtualinvoke r7.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException mappingException(java.lang.Class,org.codehaus.jackson.JsonToken)>($r9, $r1);

        throw $r10;

        catch java.lang.IllegalArgumentException from label03 to label04 with label07;
        catch java.lang.IllegalArgumentException from label05 to label06 with label07;
    }

    protected final short _parseShortPrimitive(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.map.DeserializationContext r2;
        org.codehaus.jackson.map.JsonMappingException $r4;
        short $s1;
        org.codehaus.jackson.map.deser.std.StdDeserializer r0;
        int $i0, $i3;
        java.lang.Class $r3;
        org.codehaus.jackson.JsonParser r1;

        r0 := @this: org.codehaus.jackson.map.deser.std.StdDeserializer;

        r1 := @parameter0: org.codehaus.jackson.JsonParser;

        r2 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $i0 = virtualinvoke r0.<org.codehaus.jackson.map.deser.std.StdDeserializer: int _parseIntPrimitive(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>(r1, r2);

        $i3 = (int) -32768;

        if $i0 < $i3 goto label1;

        if $i0 <= 32767 goto label2;

     label1:
        $r3 = r0.<org.codehaus.jackson.map.deser.std.StdDeserializer: java.lang.Class _valueClass>;

        $r4 = virtualinvoke r2.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException weirdStringException(java.lang.Class,java.lang.String)>($r3, "overflow, value can not be represented as 16-bit value");

        throw $r4;

     label2:
        $s1 = (short) $i0;

        return $s1;
    }

    protected final int _parseIntPrimitive(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.JsonToken $r1, $r2, $r3, $r4, $r5;
        byte $b4, $b5;
        java.lang.StringBuilder $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r26;
        long $l3;
        org.codehaus.jackson.map.DeserializationContext r6;
        org.codehaus.jackson.map.JsonMappingException $r9, $r22, $r25;
        int $i0, $i1, $i2, $i6, $i7, $i8;
        java.lang.String $r10, $r11, $r21;
        org.codehaus.jackson.JsonParser r0;
        java.lang.IllegalArgumentException $r23;
        org.codehaus.jackson.map.deser.std.StdDeserializer r7;
        java.lang.Class $r8, $r13, $r24;

        r7 := @this: org.codehaus.jackson.map.deser.std.StdDeserializer;

        r0 := @parameter0: org.codehaus.jackson.JsonParser;

        r6 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken getCurrentToken()>();

        $r2 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_INT>;

        if $r1 == $r2 goto label01;

        $r3 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_FLOAT>;

        if $r1 != $r3 goto label02;

     label01:
        $i0 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: int getIntValue()>();

        return $i0;

     label02:
        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_STRING>;

        if $r1 != $r4 goto label12;

        $r10 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: java.lang.String getText()>();

        $r11 = virtualinvoke $r10.<java.lang.String: java.lang.String trim()>();

     label03:
        $i1 = virtualinvoke $r11.<java.lang.String: int length()>();

        if $i1 <= 9 goto label07;

        $l3 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r11);

        $b4 = $l3 cmp -2147483648L;

        $i7 = (int) $b4;

        if $i7 < 0 goto label04;

        $b5 = $l3 cmp 2147483647L;

        $i8 = (int) $b5;

        if $i8 <= 0 goto label05;

     label04:
        $r13 = r7.<org.codehaus.jackson.map.deser.std.StdDeserializer: java.lang.Class _valueClass>;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Overflow: numeric value (");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") out of range of int (");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(-2147483648);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(2147483647);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        $r22 = virtualinvoke r6.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException weirdStringException(java.lang.Class,java.lang.String)>($r13, $r21);

        throw $r22;

     label05:
        $i6 = (int) $l3;

     label06:
        return $i6;

     label07:
        if $i1 != 0 goto label09;

     label08:
        return 0;

     label09:
        $i2 = staticinvoke <org.codehaus.jackson.io.NumberInput: int parseInt(java.lang.String)>($r11);

     label10:
        return $i2;

     label11:
        $r23 := @caughtexception;

        $r24 = r7.<org.codehaus.jackson.map.deser.std.StdDeserializer: java.lang.Class _valueClass>;

        $r25 = virtualinvoke r6.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException weirdStringException(java.lang.Class,java.lang.String)>($r24, "not a valid int value");

        throw $r25;

     label12:
        $r5 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NULL>;

        if $r1 != $r5 goto label13;

        return 0;

     label13:
        $r8 = r7.<org.codehaus.jackson.map.deser.std.StdDeserializer: java.lang.Class _valueClass>;

        $r9 = virtualinvoke r6.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException mappingException(java.lang.Class,org.codehaus.jackson.JsonToken)>($r8, $r1);

        throw $r9;

        catch java.lang.IllegalArgumentException from label03 to label06 with label11;
        catch java.lang.IllegalArgumentException from label07 to label08 with label11;
        catch java.lang.IllegalArgumentException from label09 to label10 with label11;
    }

    protected final java.lang.Integer _parseInteger(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.JsonToken $r1, $r2, $r4, $r5, $r6;
        java.lang.Integer $r3, $r12, $r15, $r17, $r29;
        byte $b4, $b5;
        java.lang.StringBuilder $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r33;
        long $l3;
        org.codehaus.jackson.map.DeserializationContext r7;
        org.codehaus.jackson.map.JsonMappingException $r10, $r28, $r32;
        int $i0, $i1, $i2, $i6, $i7, $i8;
        java.lang.String $r13, $r14, $r27;
        org.codehaus.jackson.JsonParser r0;
        java.lang.IllegalArgumentException $r30;
        org.codehaus.jackson.map.deser.std.StdDeserializer r8;
        java.lang.Class $r9, $r19, $r31;
        java.lang.Object $r11, $r16;

        r8 := @this: org.codehaus.jackson.map.deser.std.StdDeserializer;

        r0 := @parameter0: org.codehaus.jackson.JsonParser;

        r7 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken getCurrentToken()>();

        $r2 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_INT>;

        if $r1 == $r2 goto label01;

        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_FLOAT>;

        if $r1 != $r4 goto label02;

     label01:
        $i0 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: int getIntValue()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        return $r3;

     label02:
        $r5 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_STRING>;

        if $r1 != $r5 goto label12;

        $r13 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: java.lang.String getText()>();

        $r14 = virtualinvoke $r13.<java.lang.String: java.lang.String trim()>();

     label03:
        $i1 = virtualinvoke $r14.<java.lang.String: int length()>();

        if $i1 <= 9 goto label07;

        $l3 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r14);

        $b4 = $l3 cmp -2147483648L;

        $i7 = (int) $b4;

        if $i7 < 0 goto label04;

        $b5 = $l3 cmp 2147483647L;

        $i8 = (int) $b5;

        if $i8 <= 0 goto label05;

     label04:
        $r19 = r8.<org.codehaus.jackson.map.deser.std.StdDeserializer: java.lang.Class _valueClass>;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Overflow: numeric value (");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") out of range of Integer (");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(-2147483648);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(2147483647);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        $r28 = virtualinvoke r7.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException weirdStringException(java.lang.Class,java.lang.String)>($r19, $r27);

        throw $r28;

     label05:
        $i6 = (int) $l3;

        $r29 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

     label06:
        return $r29;

     label07:
        if $i1 != 0 goto label09;

        $r16 = virtualinvoke r8.<org.codehaus.jackson.map.deser.std.StdDeserializer: java.lang.Object getEmptyValue()>();

        $r17 = (java.lang.Integer) $r16;

     label08:
        return $r17;

     label09:
        $i2 = staticinvoke <org.codehaus.jackson.io.NumberInput: int parseInt(java.lang.String)>($r14);

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

     label10:
        return $r15;

     label11:
        $r30 := @caughtexception;

        $r31 = r8.<org.codehaus.jackson.map.deser.std.StdDeserializer: java.lang.Class _valueClass>;

        $r32 = virtualinvoke r7.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException weirdStringException(java.lang.Class,java.lang.String)>($r31, "not a valid Integer value");

        throw $r32;

     label12:
        $r6 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NULL>;

        if $r1 != $r6 goto label13;

        $r11 = virtualinvoke r8.<org.codehaus.jackson.map.deser.std.StdDeserializer: java.lang.Object getNullValue()>();

        $r12 = (java.lang.Integer) $r11;

        return $r12;

     label13:
        $r9 = r8.<org.codehaus.jackson.map.deser.std.StdDeserializer: java.lang.Class _valueClass>;

        $r10 = virtualinvoke r7.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException mappingException(java.lang.Class,org.codehaus.jackson.JsonToken)>($r9, $r1);

        throw $r10;

        catch java.lang.IllegalArgumentException from label03 to label06 with label11;
        catch java.lang.IllegalArgumentException from label07 to label08 with label11;
        catch java.lang.IllegalArgumentException from label09 to label10 with label11;
    }

    protected final java.lang.Long _parseLong(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.JsonToken $r1, $r2, $r4, $r5, $r6;
        long $l0, $l2;
        org.codehaus.jackson.map.DeserializationContext r7;
        org.codehaus.jackson.map.JsonMappingException $r10, $r20;
        java.lang.Long $r3, $r12, $r15, $r17;
        int $i1;
        java.lang.String $r13, $r14;
        org.codehaus.jackson.JsonParser r0;
        java.lang.IllegalArgumentException $r18;
        org.codehaus.jackson.map.deser.std.StdDeserializer r8;
        java.lang.Class $r9, $r19;
        java.lang.Object $r11, $r16;

        r8 := @this: org.codehaus.jackson.map.deser.std.StdDeserializer;

        r0 := @parameter0: org.codehaus.jackson.JsonParser;

        r7 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken getCurrentToken()>();

        $r2 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_INT>;

        if $r1 == $r2 goto label1;

        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_FLOAT>;

        if $r1 != $r4 goto label2;

     label1:
        $l0 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: long getLongValue()>();

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        return $r3;

     label2:
        $r5 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_STRING>;

        if $r1 != $r5 goto label6;

        $r13 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: java.lang.String getText()>();

        $r14 = virtualinvoke $r13.<java.lang.String: java.lang.String trim()>();

        $i1 = virtualinvoke $r14.<java.lang.String: int length()>();

        if $i1 != 0 goto label3;

        $r16 = virtualinvoke r8.<org.codehaus.jackson.map.deser.std.StdDeserializer: java.lang.Object getEmptyValue()>();

        $r17 = (java.lang.Long) $r16;

        return $r17;

     label3:
        $l2 = staticinvoke <org.codehaus.jackson.io.NumberInput: long parseLong(java.lang.String)>($r14);

        $r15 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

     label4:
        return $r15;

     label5:
        $r18 := @caughtexception;

        $r19 = r8.<org.codehaus.jackson.map.deser.std.StdDeserializer: java.lang.Class _valueClass>;

        $r20 = virtualinvoke r7.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException weirdStringException(java.lang.Class,java.lang.String)>($r19, "not a valid Long value");

        throw $r20;

     label6:
        $r6 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NULL>;

        if $r1 != $r6 goto label7;

        $r11 = virtualinvoke r8.<org.codehaus.jackson.map.deser.std.StdDeserializer: java.lang.Object getNullValue()>();

        $r12 = (java.lang.Long) $r11;

        return $r12;

     label7:
        $r9 = r8.<org.codehaus.jackson.map.deser.std.StdDeserializer: java.lang.Class _valueClass>;

        $r10 = virtualinvoke r7.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException mappingException(java.lang.Class,org.codehaus.jackson.JsonToken)>($r9, $r1);

        throw $r10;

        catch java.lang.IllegalArgumentException from label3 to label4 with label5;
    }

    protected final long _parseLongPrimitive(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.JsonToken $r1, $r2, $r3, $r4, $r5;
        long $l0, $l2;
        org.codehaus.jackson.map.DeserializationContext r6;
        org.codehaus.jackson.map.JsonMappingException $r9, $r14;
        int $i1;
        java.lang.String $r10, $r11;
        org.codehaus.jackson.JsonParser r0;
        java.lang.IllegalArgumentException $r12;
        org.codehaus.jackson.map.deser.std.StdDeserializer r7;
        java.lang.Class $r8, $r13;

        r7 := @this: org.codehaus.jackson.map.deser.std.StdDeserializer;

        r0 := @parameter0: org.codehaus.jackson.JsonParser;

        r6 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken getCurrentToken()>();

        $r2 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_INT>;

        if $r1 == $r2 goto label1;

        $r3 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_FLOAT>;

        if $r1 != $r3 goto label2;

     label1:
        $l0 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: long getLongValue()>();

        return $l0;

     label2:
        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_STRING>;

        if $r1 != $r4 goto label6;

        $r10 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: java.lang.String getText()>();

        $r11 = virtualinvoke $r10.<java.lang.String: java.lang.String trim()>();

        $i1 = virtualinvoke $r11.<java.lang.String: int length()>();

        if $i1 != 0 goto label3;

        return 0L;

     label3:
        $l2 = staticinvoke <org.codehaus.jackson.io.NumberInput: long parseLong(java.lang.String)>($r11);

     label4:
        return $l2;

     label5:
        $r12 := @caughtexception;

        $r13 = r7.<org.codehaus.jackson.map.deser.std.StdDeserializer: java.lang.Class _valueClass>;

        $r14 = virtualinvoke r6.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException weirdStringException(java.lang.Class,java.lang.String)>($r13, "not a valid long value");

        throw $r14;

     label6:
        $r5 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NULL>;

        if $r1 != $r5 goto label7;

        return 0L;

     label7:
        $r8 = r7.<org.codehaus.jackson.map.deser.std.StdDeserializer: java.lang.Class _valueClass>;

        $r9 = virtualinvoke r6.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException mappingException(java.lang.Class,org.codehaus.jackson.JsonToken)>($r8, $r1);

        throw $r9;

        catch java.lang.IllegalArgumentException from label3 to label4 with label5;
    }

    protected final java.lang.Float _parseFloat(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        java.lang.Float $r3, $r12, $r16, $r18, $r21, $r24, $r28;
        org.codehaus.jackson.JsonToken $r1, $r2, $r4, $r5, $r6;
        boolean $z0, $z1, $z2, $z3, $z4;
        float $f0, $f1;
        org.codehaus.jackson.map.DeserializationContext r7;
        org.codehaus.jackson.map.JsonMappingException $r10, $r27;
        int $i0, $i2;
        java.lang.String $r13, $r14, $r15, $r17, $r19, $r20, $r22;
        org.codehaus.jackson.JsonParser r0;
        char $c1;
        java.lang.IllegalArgumentException $r25;
        org.codehaus.jackson.map.deser.std.StdDeserializer r8;
        java.lang.Class $r9, $r26;
        java.lang.Object $r11, $r23;

        r8 := @this: org.codehaus.jackson.map.deser.std.StdDeserializer;

        r0 := @parameter0: org.codehaus.jackson.JsonParser;

        r7 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken getCurrentToken()>();

        $r2 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_INT>;

        if $r1 == $r2 goto label01;

        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_FLOAT>;

        if $r1 != $r4 goto label02;

     label01:
        $f0 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: float getFloatValue()>();

        $r3 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        return $r3;

     label02:
        $r5 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_STRING>;

        if $r1 != $r5 goto label12;

        $r13 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: java.lang.String getText()>();

        $r14 = virtualinvoke $r13.<java.lang.String: java.lang.String trim()>();

        $i0 = virtualinvoke $r14.<java.lang.String: int length()>();

        if $i0 != 0 goto label03;

        $r23 = virtualinvoke r8.<org.codehaus.jackson.map.deser.std.StdDeserializer: java.lang.Object getEmptyValue()>();

        $r24 = (java.lang.Float) $r23;

        return $r24;

     label03:
        $c1 = virtualinvoke $r14.<java.lang.String: char charAt(int)>(0);

        $i2 = (int) $c1;

        lookupswitch($i2)
        {
            case 45: goto label07;
            case 73: goto label04;
            case 78: goto label06;
            default: goto label09;
        };

     label04:
        $r17 = "Infinity";

        $z1 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>($r14);

        if $z1 != 0 goto label05;

        $r19 = "INF";

        $z2 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>($r14);

        if $z2 == 0 goto label09;

     label05:
        $r18 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(#InfinityF);

        return $r18;

     label06:
        $r15 = "NaN";

        $z0 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>($r14);

        if $z0 == 0 goto label09;

        $r16 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(#NaNF);

        return $r16;

     label07:
        $r20 = "-Infinity";

        $z3 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>($r14);

        if $z3 != 0 goto label08;

        $r22 = "-INF";

        $z4 = virtualinvoke $r22.<java.lang.String: boolean equals(java.lang.Object)>($r14);

        if $z4 == 0 goto label09;

     label08:
        $r21 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(#-InfinityF);

        return $r21;

     label09:
        $f1 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r14);

        $r28 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f1);

     label10:
        return $r28;

     label11:
        $r25 := @caughtexception;

        $r26 = r8.<org.codehaus.jackson.map.deser.std.StdDeserializer: java.lang.Class _valueClass>;

        $r27 = virtualinvoke r7.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException weirdStringException(java.lang.Class,java.lang.String)>($r26, "not a valid Float value");

        throw $r27;

     label12:
        $r6 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NULL>;

        if $r1 != $r6 goto label13;

        $r11 = virtualinvoke r8.<org.codehaus.jackson.map.deser.std.StdDeserializer: java.lang.Object getNullValue()>();

        $r12 = (java.lang.Float) $r11;

        return $r12;

     label13:
        $r9 = r8.<org.codehaus.jackson.map.deser.std.StdDeserializer: java.lang.Class _valueClass>;

        $r10 = virtualinvoke r7.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException mappingException(java.lang.Class,org.codehaus.jackson.JsonToken)>($r9, $r1);

        throw $r10;

        catch java.lang.IllegalArgumentException from label09 to label10 with label11;
    }

    protected final float _parseFloatPrimitive(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.JsonToken $r1, $r2, $r3, $r4, $r5;
        org.codehaus.jackson.map.DeserializationContext r6;
        org.codehaus.jackson.map.JsonMappingException $r9, $r19;
        int $i0, $i2;
        java.lang.String $r10, $r11, $r12, $r13, $r14, $r15, $r16;
        org.codehaus.jackson.JsonParser r0;
        boolean $z0, $z1, $z2, $z3, $z4;
        char $c1;
        java.lang.IllegalArgumentException $r17;
        org.codehaus.jackson.map.deser.std.StdDeserializer r7;
        float $f0, $f1;
        java.lang.Class $r8, $r18;

        r7 := @this: org.codehaus.jackson.map.deser.std.StdDeserializer;

        r0 := @parameter0: org.codehaus.jackson.JsonParser;

        r6 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken getCurrentToken()>();

        $r2 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_INT>;

        if $r1 == $r2 goto label01;

        $r3 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_FLOAT>;

        if $r1 != $r3 goto label02;

     label01:
        $f0 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: float getFloatValue()>();

        return $f0;

     label02:
        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_STRING>;

        if $r1 != $r4 goto label12;

        $r10 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: java.lang.String getText()>();

        $r11 = virtualinvoke $r10.<java.lang.String: java.lang.String trim()>();

        $i0 = virtualinvoke $r11.<java.lang.String: int length()>();

        if $i0 != 0 goto label03;

        return 0.0F;

     label03:
        $c1 = virtualinvoke $r11.<java.lang.String: char charAt(int)>(0);

        $i2 = (int) $c1;

        lookupswitch($i2)
        {
            case 45: goto label07;
            case 73: goto label04;
            case 78: goto label06;
            default: goto label09;
        };

     label04:
        $r13 = "Infinity";

        $z1 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z1 != 0 goto label05;

        $r14 = "INF";

        $z2 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z2 == 0 goto label09;

     label05:
        return #InfinityF;

     label06:
        $r12 = "NaN";

        $z0 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z0 == 0 goto label09;

        return #NaNF;

     label07:
        $r15 = "-Infinity";

        $z3 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z3 != 0 goto label08;

        $r16 = "-INF";

        $z4 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z4 == 0 goto label09;

     label08:
        return #-InfinityF;

     label09:
        $f1 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r11);

     label10:
        return $f1;

     label11:
        $r17 := @caughtexception;

        $r18 = r7.<org.codehaus.jackson.map.deser.std.StdDeserializer: java.lang.Class _valueClass>;

        $r19 = virtualinvoke r6.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException weirdStringException(java.lang.Class,java.lang.String)>($r18, "not a valid float value");

        throw $r19;

     label12:
        $r5 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NULL>;

        if $r1 != $r5 goto label13;

        return 0.0F;

     label13:
        $r8 = r7.<org.codehaus.jackson.map.deser.std.StdDeserializer: java.lang.Class _valueClass>;

        $r9 = virtualinvoke r6.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException mappingException(java.lang.Class,org.codehaus.jackson.JsonToken)>($r8, $r1);

        throw $r9;

        catch java.lang.IllegalArgumentException from label09 to label10 with label11;
    }

    protected final java.lang.Double _parseDouble(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.JsonToken $r1, $r2, $r4, $r5, $r6;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Double $r3, $r12, $r16, $r18, $r21, $r24, $r28;
        org.codehaus.jackson.map.DeserializationContext r7;
        org.codehaus.jackson.map.JsonMappingException $r10, $r27;
        int $i0, $i2;
        java.lang.String $r13, $r14, $r15, $r17, $r19, $r20, $r22;
        org.codehaus.jackson.JsonParser r0;
        double $d0, $d1;
        char $c1;
        java.lang.IllegalArgumentException $r25;
        org.codehaus.jackson.map.deser.std.StdDeserializer r8;
        java.lang.Class $r9, $r26;
        java.lang.Object $r11, $r23;

        r8 := @this: org.codehaus.jackson.map.deser.std.StdDeserializer;

        r0 := @parameter0: org.codehaus.jackson.JsonParser;

        r7 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken getCurrentToken()>();

        $r2 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_INT>;

        if $r1 == $r2 goto label01;

        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_FLOAT>;

        if $r1 != $r4 goto label02;

     label01:
        $d0 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: double getDoubleValue()>();

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r3;

     label02:
        $r5 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_STRING>;

        if $r1 != $r5 goto label12;

        $r13 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: java.lang.String getText()>();

        $r14 = virtualinvoke $r13.<java.lang.String: java.lang.String trim()>();

        $i0 = virtualinvoke $r14.<java.lang.String: int length()>();

        if $i0 != 0 goto label03;

        $r23 = virtualinvoke r8.<org.codehaus.jackson.map.deser.std.StdDeserializer: java.lang.Object getEmptyValue()>();

        $r24 = (java.lang.Double) $r23;

        return $r24;

     label03:
        $c1 = virtualinvoke $r14.<java.lang.String: char charAt(int)>(0);

        $i2 = (int) $c1;

        lookupswitch($i2)
        {
            case 45: goto label07;
            case 73: goto label04;
            case 78: goto label06;
            default: goto label09;
        };

     label04:
        $r17 = "Infinity";

        $z1 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>($r14);

        if $z1 != 0 goto label05;

        $r19 = "INF";

        $z2 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>($r14);

        if $z2 == 0 goto label09;

     label05:
        $r18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(#Infinity);

        return $r18;

     label06:
        $r15 = "NaN";

        $z0 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>($r14);

        if $z0 == 0 goto label09;

        $r16 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(#NaN);

        return $r16;

     label07:
        $r20 = "-Infinity";

        $z3 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>($r14);

        if $z3 != 0 goto label08;

        $r22 = "-INF";

        $z4 = virtualinvoke $r22.<java.lang.String: boolean equals(java.lang.Object)>($r14);

        if $z4 == 0 goto label09;

     label08:
        $r21 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(#-Infinity);

        return $r21;

     label09:
        $d1 = staticinvoke <org.codehaus.jackson.map.deser.std.StdDeserializer: double parseDouble(java.lang.String)>($r14);

        $r28 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

     label10:
        return $r28;

     label11:
        $r25 := @caughtexception;

        $r26 = r8.<org.codehaus.jackson.map.deser.std.StdDeserializer: java.lang.Class _valueClass>;

        $r27 = virtualinvoke r7.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException weirdStringException(java.lang.Class,java.lang.String)>($r26, "not a valid Double value");

        throw $r27;

     label12:
        $r6 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NULL>;

        if $r1 != $r6 goto label13;

        $r11 = virtualinvoke r8.<org.codehaus.jackson.map.deser.std.StdDeserializer: java.lang.Object getNullValue()>();

        $r12 = (java.lang.Double) $r11;

        return $r12;

     label13:
        $r9 = r8.<org.codehaus.jackson.map.deser.std.StdDeserializer: java.lang.Class _valueClass>;

        $r10 = virtualinvoke r7.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException mappingException(java.lang.Class,org.codehaus.jackson.JsonToken)>($r9, $r1);

        throw $r10;

        catch java.lang.IllegalArgumentException from label09 to label10 with label11;
    }

    protected final double _parseDoublePrimitive(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.JsonToken $r1, $r2, $r3, $r4, $r5;
        org.codehaus.jackson.map.DeserializationContext r6;
        org.codehaus.jackson.map.JsonMappingException $r9, $r19;
        int $i0, $i2;
        java.lang.String $r10, $r11, $r12, $r13, $r14, $r15, $r16;
        org.codehaus.jackson.JsonParser r0;
        double $d0, $d1;
        boolean $z0, $z1, $z2, $z3, $z4;
        char $c1;
        java.lang.IllegalArgumentException $r17;
        org.codehaus.jackson.map.deser.std.StdDeserializer r7;
        java.lang.Class $r8, $r18;

        r7 := @this: org.codehaus.jackson.map.deser.std.StdDeserializer;

        r0 := @parameter0: org.codehaus.jackson.JsonParser;

        r6 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken getCurrentToken()>();

        $r2 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_INT>;

        if $r1 == $r2 goto label01;

        $r3 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_FLOAT>;

        if $r1 != $r3 goto label02;

     label01:
        $d0 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: double getDoubleValue()>();

        return $d0;

     label02:
        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_STRING>;

        if $r1 != $r4 goto label12;

        $r10 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: java.lang.String getText()>();

        $r11 = virtualinvoke $r10.<java.lang.String: java.lang.String trim()>();

        $i0 = virtualinvoke $r11.<java.lang.String: int length()>();

        if $i0 != 0 goto label03;

        return 0.0;

     label03:
        $c1 = virtualinvoke $r11.<java.lang.String: char charAt(int)>(0);

        $i2 = (int) $c1;

        lookupswitch($i2)
        {
            case 45: goto label07;
            case 73: goto label04;
            case 78: goto label06;
            default: goto label09;
        };

     label04:
        $r13 = "Infinity";

        $z1 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z1 != 0 goto label05;

        $r14 = "INF";

        $z2 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z2 == 0 goto label09;

     label05:
        return #Infinity;

     label06:
        $r12 = "NaN";

        $z0 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z0 == 0 goto label09;

        return #NaN;

     label07:
        $r15 = "-Infinity";

        $z3 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z3 != 0 goto label08;

        $r16 = "-INF";

        $z4 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z4 == 0 goto label09;

     label08:
        return #-Infinity;

     label09:
        $d1 = staticinvoke <org.codehaus.jackson.map.deser.std.StdDeserializer: double parseDouble(java.lang.String)>($r11);

     label10:
        return $d1;

     label11:
        $r17 := @caughtexception;

        $r18 = r7.<org.codehaus.jackson.map.deser.std.StdDeserializer: java.lang.Class _valueClass>;

        $r19 = virtualinvoke r6.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException weirdStringException(java.lang.Class,java.lang.String)>($r18, "not a valid double value");

        throw $r19;

     label12:
        $r5 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NULL>;

        if $r1 != $r5 goto label13;

        return 0.0;

     label13:
        $r8 = r7.<org.codehaus.jackson.map.deser.std.StdDeserializer: java.lang.Class _valueClass>;

        $r9 = virtualinvoke r6.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException mappingException(java.lang.Class,org.codehaus.jackson.JsonToken)>($r8, $r1);

        throw $r9;

        catch java.lang.IllegalArgumentException from label09 to label10 with label11;
    }

    protected java.util.Date _parseDate(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.JsonToken $r1, $r2, $r3, $r4;
        java.util.Date $r11, $r13, $r15, $r16;
        long $l1;
        org.codehaus.jackson.map.DeserializationContext r5;
        org.codehaus.jackson.map.JsonMappingException $r8, $r25;
        int $i0;
        java.lang.String $r9, $r10, $r21, $r24;
        org.codehaus.jackson.JsonParser r0;
        java.lang.IllegalArgumentException $r17;
        org.codehaus.jackson.map.deser.std.StdDeserializer r6;
        java.lang.Class $r7, $r19;
        java.lang.Object $r12, $r14;
        java.lang.StringBuilder $r18, $r20, $r22, $r23;

        r6 := @this: org.codehaus.jackson.map.deser.std.StdDeserializer;

        r0 := @parameter0: org.codehaus.jackson.JsonParser;

        r5 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken getCurrentToken()>();

        $r2 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_INT>;

        if $r1 != $r2 goto label1;

        $r16 = new java.util.Date;

        $l1 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: long getLongValue()>();

        specialinvoke $r16.<java.util.Date: void <init>(long)>($l1);

        return $r16;

     label1:
        $r3 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NULL>;

        if $r1 != $r3 goto label2;

        $r14 = virtualinvoke r6.<org.codehaus.jackson.map.deser.std.StdDeserializer: java.lang.Object getNullValue()>();

        $r15 = (java.util.Date) $r14;

        return $r15;

     label2:
        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_STRING>;

        if $r1 != $r4 goto label8;

     label3:
        $r9 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: java.lang.String getText()>();

        $r10 = virtualinvoke $r9.<java.lang.String: java.lang.String trim()>();

        $i0 = virtualinvoke $r10.<java.lang.String: int length()>();

        if $i0 != 0 goto label5;

        $r12 = virtualinvoke r6.<org.codehaus.jackson.map.deser.std.StdDeserializer: java.lang.Object getEmptyValue()>();

        $r13 = (java.util.Date) $r12;

     label4:
        return $r13;

     label5:
        $r11 = virtualinvoke r5.<org.codehaus.jackson.map.DeserializationContext: java.util.Date parseDate(java.lang.String)>($r10);

     label6:
        return $r11;

     label7:
        $r17 := @caughtexception;

        $r19 = r6.<org.codehaus.jackson.map.deser.std.StdDeserializer: java.lang.Class _valueClass>;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("not a valid representation (error: ");

        $r21 = virtualinvoke $r17.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        $r25 = virtualinvoke r5.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException weirdStringException(java.lang.Class,java.lang.String)>($r19, $r24);

        throw $r25;

     label8:
        $r7 = r6.<org.codehaus.jackson.map.deser.std.StdDeserializer: java.lang.Class _valueClass>;

        $r8 = virtualinvoke r5.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException mappingException(java.lang.Class,org.codehaus.jackson.JsonToken)>($r7, $r1);

        throw $r8;

        catch java.lang.IllegalArgumentException from label3 to label4 with label7;
        catch java.lang.IllegalArgumentException from label5 to label6 with label7;
    }

    protected static final double parseDouble(java.lang.String) throws java.lang.NumberFormatException
    {
        java.lang.String r0, $r1;
        boolean $z0;
        double $d0;

        r0 := @parameter0: java.lang.String;

        $r1 = "2.2250738585072012e-308";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        return 2.2250738585072014E-308;

     label1:
        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r0);

        return $d0;
    }

    protected org.codehaus.jackson.map.JsonDeserializer findDeserializer(org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.map.DeserializerProvider, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.BeanProperty) throws org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.deser.std.StdDeserializer r5;
        org.codehaus.jackson.map.DeserializerProvider r0;
        org.codehaus.jackson.type.JavaType r2;
        org.codehaus.jackson.map.JsonDeserializer $r4;
        org.codehaus.jackson.map.DeserializationConfig r1;
        org.codehaus.jackson.map.BeanProperty r3;

        r5 := @this: org.codehaus.jackson.map.deser.std.StdDeserializer;

        r1 := @parameter0: org.codehaus.jackson.map.DeserializationConfig;

        r0 := @parameter1: org.codehaus.jackson.map.DeserializerProvider;

        r2 := @parameter2: org.codehaus.jackson.type.JavaType;

        r3 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        $r4 = virtualinvoke r0.<org.codehaus.jackson.map.DeserializerProvider: org.codehaus.jackson.map.JsonDeserializer findValueDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>(r1, r2, r3);

        return $r4;
    }

    protected void handleUnknownProperty(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext, java.lang.Object, java.lang.String) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.map.deser.std.StdDeserializer r2;
        java.lang.Object r4;
        java.lang.String r3;
        org.codehaus.jackson.map.DeserializationContext r0;
        org.codehaus.jackson.JsonParser r1;
        boolean $z0;

        r2 := @this: org.codehaus.jackson.map.deser.std.StdDeserializer;

        r1 := @parameter0: org.codehaus.jackson.JsonParser;

        r0 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        r4 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.String;

        if r4 != null goto label1;

        r4 = virtualinvoke r2.<org.codehaus.jackson.map.deser.std.StdDeserializer: java.lang.Class getValueClass()>();

     label1:
        $z0 = virtualinvoke r0.<org.codehaus.jackson.map.DeserializationContext: boolean handleUnknownProperty(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.JsonDeserializer,java.lang.Object,java.lang.String)>(r1, r2, r4, r3);

        if $z0 == 0 goto label2;

        return;

     label2:
        virtualinvoke r2.<org.codehaus.jackson.map.deser.std.StdDeserializer: void reportUnknownProperty(org.codehaus.jackson.map.DeserializationContext,java.lang.Object,java.lang.String)>(r0, r4, r3);

        virtualinvoke r1.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonParser skipChildren()>();

        return;
    }

    protected void reportUnknownProperty(org.codehaus.jackson.map.DeserializationContext, java.lang.Object, java.lang.String) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.map.JsonMappingException $r4;
        org.codehaus.jackson.map.deser.std.StdDeserializer r5;
        org.codehaus.jackson.map.DeserializationConfig$Feature $r1;
        java.lang.Object r2;
        java.lang.String r3;
        org.codehaus.jackson.map.DeserializationContext r0;
        boolean $z0;

        r5 := @this: org.codehaus.jackson.map.deser.std.StdDeserializer;

        r0 := @parameter0: org.codehaus.jackson.map.DeserializationContext;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.String;

        $r1 = <org.codehaus.jackson.map.DeserializationConfig$Feature: org.codehaus.jackson.map.DeserializationConfig$Feature FAIL_ON_UNKNOWN_PROPERTIES>;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.map.DeserializationContext: boolean isEnabled(org.codehaus.jackson.map.DeserializationConfig$Feature)>($r1);

        if $z0 == 0 goto label1;

        $r4 = virtualinvoke r0.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException unknownFieldException(java.lang.Object,java.lang.String)>(r2, r3);

        throw $r4;

     label1:
        return;
    }
}
