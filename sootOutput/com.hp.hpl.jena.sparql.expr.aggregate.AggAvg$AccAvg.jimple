class com.hp.hpl.jena.sparql.expr.aggregate.AggAvg$AccAvg extends com.hp.hpl.jena.sparql.expr.aggregate.AccumulatorExpr
{
    private com.hp.hpl.jena.sparql.expr.NodeValue total;
    private int count;
    static final boolean DEBUG;

    public void <init>(com.hp.hpl.jena.sparql.expr.Expr)
    {
        com.hp.hpl.jena.sparql.expr.aggregate.AggAvg$AccAvg r0;
        com.hp.hpl.jena.sparql.expr.NodeValue $r2;
        com.hp.hpl.jena.sparql.expr.Expr r1;

        r0 := @this: com.hp.hpl.jena.sparql.expr.aggregate.AggAvg$AccAvg;

        r1 := @parameter0: com.hp.hpl.jena.sparql.expr.Expr;

        specialinvoke r0.<com.hp.hpl.jena.sparql.expr.aggregate.AccumulatorExpr: void <init>(com.hp.hpl.jena.sparql.expr.Expr)>(r1);

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.expr.aggregate.AggAvg: com.hp.hpl.jena.sparql.expr.NodeValue access$000()>();

        r0.<com.hp.hpl.jena.sparql.expr.aggregate.AggAvg$AccAvg: com.hp.hpl.jena.sparql.expr.NodeValue total> = $r2;

        r0.<com.hp.hpl.jena.sparql.expr.aggregate.AggAvg$AccAvg: int count> = 0;

        return;
    }

    protected void accumulate(com.hp.hpl.jena.sparql.expr.NodeValue, com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.sparql.function.FunctionEnv)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0, $r7, $r8, $r9, $r10;
        com.hp.hpl.jena.sparql.expr.aggregate.AggAvg$AccAvg r6;
        com.hp.hpl.jena.sparql.expr.ExprEvalException $r1;
        int $i0, $i1;
        java.lang.String $r5;
        boolean $z0;
        com.hp.hpl.jena.sparql.engine.binding.Binding r11;
        java.lang.StringBuilder $r2, $r3, $r4;
        com.hp.hpl.jena.sparql.function.FunctionEnv r12;

        r6 := @this: com.hp.hpl.jena.sparql.expr.aggregate.AggAvg$AccAvg;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        r11 := @parameter1: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r12 := @parameter2: com.hp.hpl.jena.sparql.function.FunctionEnv;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isNumber()>();

        if $z0 == 0 goto label2;

        $i0 = r6.<com.hp.hpl.jena.sparql.expr.aggregate.AggAvg$AccAvg: int count>;

        $i1 = $i0 + 1;

        r6.<com.hp.hpl.jena.sparql.expr.aggregate.AggAvg$AccAvg: int count> = $i1;

        $r7 = r6.<com.hp.hpl.jena.sparql.expr.aggregate.AggAvg$AccAvg: com.hp.hpl.jena.sparql.expr.NodeValue total>;

        $r8 = staticinvoke <com.hp.hpl.jena.sparql.expr.aggregate.AggAvg: com.hp.hpl.jena.sparql.expr.NodeValue access$000()>();

        if $r7 != $r8 goto label1;

        r6.<com.hp.hpl.jena.sparql.expr.aggregate.AggAvg$AccAvg: com.hp.hpl.jena.sparql.expr.NodeValue total> = r0;

        goto label3;

     label1:
        $r9 = r6.<com.hp.hpl.jena.sparql.expr.aggregate.AggAvg$AccAvg: com.hp.hpl.jena.sparql.expr.NodeValue total>;

        $r10 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: com.hp.hpl.jena.sparql.expr.NodeValue numAdd(com.hp.hpl.jena.sparql.expr.NodeValue,com.hp.hpl.jena.sparql.expr.NodeValue)>(r0, $r9);

        r6.<com.hp.hpl.jena.sparql.expr.aggregate.AggAvg$AccAvg: com.hp.hpl.jena.sparql.expr.NodeValue total> = $r10;

        goto label3;

     label2:
        $r1 = new com.hp.hpl.jena.sparql.expr.ExprEvalException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("avg: not a number: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<com.hp.hpl.jena.sparql.expr.ExprEvalException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label3:
        return;
    }

    protected void accumulateError(com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.sparql.function.FunctionEnv)
    {
        com.hp.hpl.jena.sparql.expr.aggregate.AggAvg$AccAvg r0;
        com.hp.hpl.jena.sparql.engine.binding.Binding r1;
        com.hp.hpl.jena.sparql.function.FunctionEnv r2;

        r0 := @this: com.hp.hpl.jena.sparql.expr.aggregate.AggAvg$AccAvg;

        r1 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r2 := @parameter1: com.hp.hpl.jena.sparql.function.FunctionEnv;

        return;
    }

    public com.hp.hpl.jena.sparql.expr.NodeValue getAccValue()
    {
        com.hp.hpl.jena.sparql.expr.NodeValue $r1, $r2, $r3, $r4;
        com.hp.hpl.jena.sparql.expr.aggregate.AggAvg$AccAvg r0;
        long $l1, $l4;
        byte $b2;
        int $i0, $i3;

        r0 := @this: com.hp.hpl.jena.sparql.expr.aggregate.AggAvg$AccAvg;

        $i0 = r0.<com.hp.hpl.jena.sparql.expr.aggregate.AggAvg$AccAvg: int count>;

        if $i0 != 0 goto label1;

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.expr.aggregate.AggAvg: com.hp.hpl.jena.sparql.expr.NodeValue access$000()>();

        return $r4;

     label1:
        $l1 = r0.<com.hp.hpl.jena.sparql.expr.aggregate.AccumulatorExpr: long errorCount>;

        $b2 = $l1 cmp 0L;

        if $b2 == 0 goto label2;

        return null;

     label2:
        $i3 = r0.<com.hp.hpl.jena.sparql.expr.aggregate.AggAvg$AccAvg: int count>;

        $l4 = (long) $i3;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeInteger(long)>($l4);

        $r2 = r0.<com.hp.hpl.jena.sparql.expr.aggregate.AggAvg$AccAvg: com.hp.hpl.jena.sparql.expr.NodeValue total>;

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: com.hp.hpl.jena.sparql.expr.NodeValue numDivide(com.hp.hpl.jena.sparql.expr.NodeValue,com.hp.hpl.jena.sparql.expr.NodeValue)>($r2, $r1);

        return $r3;
    }

    public static void <clinit>()
    {
        <com.hp.hpl.jena.sparql.expr.aggregate.AggAvg$AccAvg: boolean DEBUG> = 0;

        return;
    }
}
