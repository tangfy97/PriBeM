public class org.springframework.core.convert.TypeDescriptor extends java.lang.Object
{
    public static final org.springframework.core.convert.TypeDescriptor NULL;
    private static final org.springframework.core.convert.TypeDescriptor UNKNOWN;
    private static final java.util.Map typeDescriptorCache;
    private static final java.lang.'annotation'.Annotation[] EMPTY_ANNOTATION_ARRAY;
    private java.lang.Class type;
    private org.springframework.core.MethodParameter methodParameter;
    private java.lang.reflect.Field field;
    private int fieldNestingLevel;
    private java.lang.Object value;
    private volatile org.springframework.core.convert.TypeDescriptor elementType;
    private volatile org.springframework.core.convert.TypeDescriptor mapKeyType;
    private volatile org.springframework.core.convert.TypeDescriptor mapValueType;
    private volatile java.lang.'annotation'.Annotation[] annotations;

    static void <clinit>()
    {
        java.util.Map $r6, $r9, $r12, $r15, $r18, $r21, $r24, $r27, $r30, $r33, $r36, $r39, $r42, $r45, $r48, $r51, $r53;
        java.util.HashMap $r2;
        java.lang.'annotation'.Annotation[] $r3;
        org.springframework.core.convert.TypeDescriptor $r0, $r1, $r4, $r8, $r10, $r14, $r16, $r20, $r22, $r26, $r28, $r32, $r34, $r38, $r40, $r44, $r46, $r50, $r52;
        java.lang.Class $r5, $r7, $r11, $r13, $r17, $r19, $r23, $r25, $r29, $r31, $r35, $r37, $r41, $r43, $r47, $r49;

        $r0 = new org.springframework.core.convert.TypeDescriptor;

        specialinvoke $r0.<org.springframework.core.convert.TypeDescriptor: void <init>()>();

        <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor NULL> = $r0;

        $r1 = new org.springframework.core.convert.TypeDescriptor;

        specialinvoke $r1.<org.springframework.core.convert.TypeDescriptor: void <init>(java.lang.Class)>(class "Ljava/lang/Object;");

        <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor UNKNOWN> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        <org.springframework.core.convert.TypeDescriptor: java.util.Map typeDescriptorCache> = $r2;

        $r3 = newarray (java.lang.'annotation'.Annotation)[0];

        <org.springframework.core.convert.TypeDescriptor: java.lang.'annotation'.Annotation[] EMPTY_ANNOTATION_ARRAY> = $r3;

        $r6 = <org.springframework.core.convert.TypeDescriptor: java.util.Map typeDescriptorCache>;

        $r7 = <java.lang.Boolean: java.lang.Class TYPE>;

        $r4 = new org.springframework.core.convert.TypeDescriptor;

        $r5 = <java.lang.Boolean: java.lang.Class TYPE>;

        specialinvoke $r4.<org.springframework.core.convert.TypeDescriptor: void <init>(java.lang.Class)>($r5);

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r4);

        $r9 = <org.springframework.core.convert.TypeDescriptor: java.util.Map typeDescriptorCache>;

        $r8 = new org.springframework.core.convert.TypeDescriptor;

        specialinvoke $r8.<org.springframework.core.convert.TypeDescriptor: void <init>(java.lang.Class)>(class "Ljava/lang/Boolean;");

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Boolean;", $r8);

        $r12 = <org.springframework.core.convert.TypeDescriptor: java.util.Map typeDescriptorCache>;

        $r13 = <java.lang.Byte: java.lang.Class TYPE>;

        $r10 = new org.springframework.core.convert.TypeDescriptor;

        $r11 = <java.lang.Byte: java.lang.Class TYPE>;

        specialinvoke $r10.<org.springframework.core.convert.TypeDescriptor: void <init>(java.lang.Class)>($r11);

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, $r10);

        $r15 = <org.springframework.core.convert.TypeDescriptor: java.util.Map typeDescriptorCache>;

        $r14 = new org.springframework.core.convert.TypeDescriptor;

        specialinvoke $r14.<org.springframework.core.convert.TypeDescriptor: void <init>(java.lang.Class)>(class "Ljava/lang/Byte;");

        interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Byte;", $r14);

        $r18 = <org.springframework.core.convert.TypeDescriptor: java.util.Map typeDescriptorCache>;

        $r19 = <java.lang.Character: java.lang.Class TYPE>;

        $r16 = new org.springframework.core.convert.TypeDescriptor;

        $r17 = <java.lang.Character: java.lang.Class TYPE>;

        specialinvoke $r16.<org.springframework.core.convert.TypeDescriptor: void <init>(java.lang.Class)>($r17);

        interfaceinvoke $r18.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r19, $r16);

        $r21 = <org.springframework.core.convert.TypeDescriptor: java.util.Map typeDescriptorCache>;

        $r20 = new org.springframework.core.convert.TypeDescriptor;

        specialinvoke $r20.<org.springframework.core.convert.TypeDescriptor: void <init>(java.lang.Class)>(class "Ljava/lang/Character;");

        interfaceinvoke $r21.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Character;", $r20);

        $r24 = <org.springframework.core.convert.TypeDescriptor: java.util.Map typeDescriptorCache>;

        $r25 = <java.lang.Short: java.lang.Class TYPE>;

        $r22 = new org.springframework.core.convert.TypeDescriptor;

        $r23 = <java.lang.Short: java.lang.Class TYPE>;

        specialinvoke $r22.<org.springframework.core.convert.TypeDescriptor: void <init>(java.lang.Class)>($r23);

        interfaceinvoke $r24.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r25, $r22);

        $r27 = <org.springframework.core.convert.TypeDescriptor: java.util.Map typeDescriptorCache>;

        $r26 = new org.springframework.core.convert.TypeDescriptor;

        specialinvoke $r26.<org.springframework.core.convert.TypeDescriptor: void <init>(java.lang.Class)>(class "Ljava/lang/Short;");

        interfaceinvoke $r27.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Short;", $r26);

        $r30 = <org.springframework.core.convert.TypeDescriptor: java.util.Map typeDescriptorCache>;

        $r31 = <java.lang.Integer: java.lang.Class TYPE>;

        $r28 = new org.springframework.core.convert.TypeDescriptor;

        $r29 = <java.lang.Integer: java.lang.Class TYPE>;

        specialinvoke $r28.<org.springframework.core.convert.TypeDescriptor: void <init>(java.lang.Class)>($r29);

        interfaceinvoke $r30.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r31, $r28);

        $r33 = <org.springframework.core.convert.TypeDescriptor: java.util.Map typeDescriptorCache>;

        $r32 = new org.springframework.core.convert.TypeDescriptor;

        specialinvoke $r32.<org.springframework.core.convert.TypeDescriptor: void <init>(java.lang.Class)>(class "Ljava/lang/Integer;");

        interfaceinvoke $r33.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Integer;", $r32);

        $r36 = <org.springframework.core.convert.TypeDescriptor: java.util.Map typeDescriptorCache>;

        $r37 = <java.lang.Long: java.lang.Class TYPE>;

        $r34 = new org.springframework.core.convert.TypeDescriptor;

        $r35 = <java.lang.Long: java.lang.Class TYPE>;

        specialinvoke $r34.<org.springframework.core.convert.TypeDescriptor: void <init>(java.lang.Class)>($r35);

        interfaceinvoke $r36.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r37, $r34);

        $r39 = <org.springframework.core.convert.TypeDescriptor: java.util.Map typeDescriptorCache>;

        $r38 = new org.springframework.core.convert.TypeDescriptor;

        specialinvoke $r38.<org.springframework.core.convert.TypeDescriptor: void <init>(java.lang.Class)>(class "Ljava/lang/Long;");

        interfaceinvoke $r39.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Long;", $r38);

        $r42 = <org.springframework.core.convert.TypeDescriptor: java.util.Map typeDescriptorCache>;

        $r43 = <java.lang.Float: java.lang.Class TYPE>;

        $r40 = new org.springframework.core.convert.TypeDescriptor;

        $r41 = <java.lang.Float: java.lang.Class TYPE>;

        specialinvoke $r40.<org.springframework.core.convert.TypeDescriptor: void <init>(java.lang.Class)>($r41);

        interfaceinvoke $r42.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r43, $r40);

        $r45 = <org.springframework.core.convert.TypeDescriptor: java.util.Map typeDescriptorCache>;

        $r44 = new org.springframework.core.convert.TypeDescriptor;

        specialinvoke $r44.<org.springframework.core.convert.TypeDescriptor: void <init>(java.lang.Class)>(class "Ljava/lang/Float;");

        interfaceinvoke $r45.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Float;", $r44);

        $r48 = <org.springframework.core.convert.TypeDescriptor: java.util.Map typeDescriptorCache>;

        $r49 = <java.lang.Double: java.lang.Class TYPE>;

        $r46 = new org.springframework.core.convert.TypeDescriptor;

        $r47 = <java.lang.Double: java.lang.Class TYPE>;

        specialinvoke $r46.<org.springframework.core.convert.TypeDescriptor: void <init>(java.lang.Class)>($r47);

        interfaceinvoke $r48.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r49, $r46);

        $r51 = <org.springframework.core.convert.TypeDescriptor: java.util.Map typeDescriptorCache>;

        $r50 = new org.springframework.core.convert.TypeDescriptor;

        specialinvoke $r50.<org.springframework.core.convert.TypeDescriptor: void <init>(java.lang.Class)>(class "Ljava/lang/Double;");

        interfaceinvoke $r51.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Double;", $r50);

        $r53 = <org.springframework.core.convert.TypeDescriptor: java.util.Map typeDescriptorCache>;

        $r52 = new org.springframework.core.convert.TypeDescriptor;

        specialinvoke $r52.<org.springframework.core.convert.TypeDescriptor: void <init>(java.lang.Class)>(class "Ljava/lang/String;");

        interfaceinvoke $r53.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/lang/String;", $r52);

        return;
    }

    public void <init>(org.springframework.core.MethodParameter)
    {
        org.springframework.core.convert.TypeDescriptor r0;
        org.springframework.core.MethodParameter r1;

        r0 := @this: org.springframework.core.convert.TypeDescriptor;

        r1 := @parameter0: org.springframework.core.MethodParameter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.springframework.core.convert.TypeDescriptor: int fieldNestingLevel> = 1;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "MethodParameter must not be null");

        r0.<org.springframework.core.convert.TypeDescriptor: org.springframework.core.MethodParameter methodParameter> = r1;

        return;
    }

    public void <init>(java.lang.reflect.Field)
    {
        java.lang.reflect.Field r1;
        org.springframework.core.convert.TypeDescriptor r0;

        r0 := @this: org.springframework.core.convert.TypeDescriptor;

        r1 := @parameter0: java.lang.reflect.Field;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.springframework.core.convert.TypeDescriptor: int fieldNestingLevel> = 1;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "Field must not be null");

        r0.<org.springframework.core.convert.TypeDescriptor: java.lang.reflect.Field field> = r1;

        return;
    }

    public void <init>(org.springframework.core.MethodParameter, java.lang.Class)
    {
        java.lang.Class r2;
        org.springframework.core.convert.TypeDescriptor r0;
        org.springframework.core.MethodParameter r1;

        r0 := @this: org.springframework.core.convert.TypeDescriptor;

        r1 := @parameter0: org.springframework.core.MethodParameter;

        r2 := @parameter1: java.lang.Class;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.springframework.core.convert.TypeDescriptor: int fieldNestingLevel> = 1;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "MethodParameter must not be null");

        r0.<org.springframework.core.convert.TypeDescriptor: org.springframework.core.MethodParameter methodParameter> = r1;

        r0.<org.springframework.core.convert.TypeDescriptor: java.lang.Class type> = r2;

        return;
    }

    public void <init>(java.lang.reflect.Field, java.lang.Class)
    {
        java.lang.Class r2;
        java.lang.reflect.Field r1;
        org.springframework.core.convert.TypeDescriptor r0;

        r0 := @this: org.springframework.core.convert.TypeDescriptor;

        r1 := @parameter0: java.lang.reflect.Field;

        r2 := @parameter1: java.lang.Class;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.springframework.core.convert.TypeDescriptor: int fieldNestingLevel> = 1;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "Field must not be null");

        r0.<org.springframework.core.convert.TypeDescriptor: java.lang.reflect.Field field> = r1;

        r0.<org.springframework.core.convert.TypeDescriptor: java.lang.Class type> = r2;

        return;
    }

    private void <init>(java.lang.reflect.Field, int, java.lang.Class)
    {
        org.springframework.core.convert.TypeDescriptor r0;
        int i0;
        java.lang.Class r2;
        java.lang.reflect.Field r1;

        r0 := @this: org.springframework.core.convert.TypeDescriptor;

        r1 := @parameter0: java.lang.reflect.Field;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Class;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.springframework.core.convert.TypeDescriptor: int fieldNestingLevel> = 1;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "Field must not be null");

        r0.<org.springframework.core.convert.TypeDescriptor: java.lang.reflect.Field field> = r1;

        r0.<org.springframework.core.convert.TypeDescriptor: int fieldNestingLevel> = i0;

        r0.<org.springframework.core.convert.TypeDescriptor: java.lang.Class type> = r2;

        return;
    }

    private void <init>()
    {
        org.springframework.core.convert.TypeDescriptor r0;

        r0 := @this: org.springframework.core.convert.TypeDescriptor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.springframework.core.convert.TypeDescriptor: int fieldNestingLevel> = 1;

        return;
    }

    private void <init>(java.lang.Object)
    {
        java.lang.Object r1;
        java.lang.Class $r2;
        org.springframework.core.convert.TypeDescriptor r0;

        r0 := @this: org.springframework.core.convert.TypeDescriptor;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.springframework.core.convert.TypeDescriptor: int fieldNestingLevel> = 1;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "Value must not be null");

        r0.<org.springframework.core.convert.TypeDescriptor: java.lang.Object value> = r1;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        r0.<org.springframework.core.convert.TypeDescriptor: java.lang.Class type> = $r2;

        return;
    }

    private void <init>(java.lang.Class)
    {
        java.lang.Class r1;
        org.springframework.core.convert.TypeDescriptor r0;

        r0 := @this: org.springframework.core.convert.TypeDescriptor;

        r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.springframework.core.convert.TypeDescriptor: int fieldNestingLevel> = 1;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "Type must not be null");

        r0.<org.springframework.core.convert.TypeDescriptor: java.lang.Class type> = r1;

        return;
    }

    public org.springframework.core.MethodParameter getMethodParameter()
    {
        org.springframework.core.convert.TypeDescriptor r0;
        org.springframework.core.MethodParameter $r1;

        r0 := @this: org.springframework.core.convert.TypeDescriptor;

        $r1 = r0.<org.springframework.core.convert.TypeDescriptor: org.springframework.core.MethodParameter methodParameter>;

        return $r1;
    }

    public java.lang.reflect.Field getField()
    {
        java.lang.reflect.Field $r1;
        org.springframework.core.convert.TypeDescriptor r0;

        r0 := @this: org.springframework.core.convert.TypeDescriptor;

        $r1 = r0.<org.springframework.core.convert.TypeDescriptor: java.lang.reflect.Field field>;

        return $r1;
    }

    public java.lang.Class getType()
    {
        java.lang.reflect.Field $r2, $r6;
        org.springframework.core.convert.TypeDescriptor r0;
        org.springframework.core.MethodParameter $r3, $r4;
        java.lang.Class $r1, $r5, $r7, $r8;

        r0 := @this: org.springframework.core.convert.TypeDescriptor;

        $r1 = r0.<org.springframework.core.convert.TypeDescriptor: java.lang.Class type>;

        if $r1 == null goto label1;

        $r8 = r0.<org.springframework.core.convert.TypeDescriptor: java.lang.Class type>;

        return $r8;

     label1:
        $r2 = r0.<org.springframework.core.convert.TypeDescriptor: java.lang.reflect.Field field>;

        if $r2 == null goto label2;

        $r6 = r0.<org.springframework.core.convert.TypeDescriptor: java.lang.reflect.Field field>;

        $r7 = virtualinvoke $r6.<java.lang.reflect.Field: java.lang.Class getType()>();

        return $r7;

     label2:
        $r3 = r0.<org.springframework.core.convert.TypeDescriptor: org.springframework.core.MethodParameter methodParameter>;

        if $r3 == null goto label3;

        $r4 = r0.<org.springframework.core.convert.TypeDescriptor: org.springframework.core.MethodParameter methodParameter>;

        $r5 = virtualinvoke $r4.<org.springframework.core.MethodParameter: java.lang.Class getParameterType()>();

        return $r5;

     label3:
        return null;
    }

    public java.lang.Class getObjectType()
    {
        java.lang.Class $r1, $r2;
        org.springframework.core.convert.TypeDescriptor r0;

        r0 := @this: org.springframework.core.convert.TypeDescriptor;

        $r1 = virtualinvoke r0.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>();

        if $r1 == null goto label1;

        $r2 = staticinvoke <org.springframework.util.ClassUtils: java.lang.Class resolvePrimitiveIfNecessary(java.lang.Class)>($r1);

        goto label2;

     label1:
        $r2 = $r1;

     label2:
        return $r2;
    }

    public java.lang.String getName()
    {
        java.lang.Class $r1;
        java.lang.String $r2;
        org.springframework.core.convert.TypeDescriptor r0;

        r0 := @this: org.springframework.core.convert.TypeDescriptor;

        $r1 = virtualinvoke r0.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>();

        if $r1 == null goto label1;

        $r2 = staticinvoke <org.springframework.util.ClassUtils: java.lang.String getQualifiedName(java.lang.Class)>($r1);

        goto label2;

     label1:
        $r2 = null;

     label2:
        return $r2;
    }

    public boolean isPrimitive()
    {
        java.lang.Class $r1;
        org.springframework.core.convert.TypeDescriptor r0;
        boolean $z0;

        r0 := @this: org.springframework.core.convert.TypeDescriptor;

        $r1 = virtualinvoke r0.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>();

        if $r1 == null goto label1;

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isPrimitive()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isArray()
    {
        java.lang.Class $r1;
        org.springframework.core.convert.TypeDescriptor r0;
        boolean $z0;

        r0 := @this: org.springframework.core.convert.TypeDescriptor;

        $r1 = virtualinvoke r0.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>();

        if $r1 == null goto label1;

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isCollection()
    {
        org.springframework.core.convert.TypeDescriptor r0;
        java.lang.Class $r1, $r2;
        boolean $z0;

        r0 := @this: org.springframework.core.convert.TypeDescriptor;

        $r1 = class "Ljava/util/Collection;";

        $r2 = virtualinvoke r0.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>();

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r2);

        return $z0;
    }

    public java.lang.Class getElementType()
    {
        java.lang.Class $r2;
        org.springframework.core.convert.TypeDescriptor r0, $r1;

        r0 := @this: org.springframework.core.convert.TypeDescriptor;

        $r1 = virtualinvoke r0.<org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor getElementTypeDescriptor()>();

        $r2 = virtualinvoke $r1.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>();

        return $r2;
    }

    public org.springframework.core.convert.TypeDescriptor getElementTypeDescriptor()
    {
        org.springframework.core.convert.TypeDescriptor r0, $r1, $r2, $r4;
        java.lang.Class $r3;

        r0 := @this: org.springframework.core.convert.TypeDescriptor;

        $r1 = r0.<org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor elementType>;

        if $r1 != null goto label1;

        $r3 = specialinvoke r0.<org.springframework.core.convert.TypeDescriptor: java.lang.Class resolveElementType()>();

        $r4 = virtualinvoke r0.<org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor forElementType(java.lang.Class)>($r3);

        r0.<org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor elementType> = $r4;

     label1:
        $r2 = r0.<org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor elementType>;

        return $r2;
    }

    public org.springframework.core.convert.TypeDescriptor getElementTypeDescriptor(java.lang.Object)
    {
        org.springframework.core.convert.TypeDescriptor r0, $r1, $r2, $r4;
        java.lang.Object r3;

        r0 := @this: org.springframework.core.convert.TypeDescriptor;

        r3 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor getElementTypeDescriptor()>();

        $r2 = <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor UNKNOWN>;

        if $r1 == $r2 goto label1;

        $r4 = $r1;

        goto label2;

     label1:
        $r4 = staticinvoke <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor forObject(java.lang.Object)>(r3);

     label2:
        return $r4;
    }

    public boolean isMap()
    {
        org.springframework.core.convert.TypeDescriptor r0;
        java.lang.Class $r1, $r2;
        boolean $z0;

        r0 := @this: org.springframework.core.convert.TypeDescriptor;

        $r1 = class "Ljava/util/Map;";

        $r2 = virtualinvoke r0.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>();

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r2);

        return $z0;
    }

    public boolean isMapEntryTypeKnown()
    {
        org.springframework.core.convert.TypeDescriptor r0;
        java.lang.Class $r1, $r2;
        boolean $z0;

        r0 := @this: org.springframework.core.convert.TypeDescriptor;

        $z0 = virtualinvoke r0.<org.springframework.core.convert.TypeDescriptor: boolean isMap()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getMapKeyType()>();

        if $r1 == null goto label1;

        $r2 = virtualinvoke r0.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getMapValueType()>();

        if $r2 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.lang.Class getMapKeyType()
    {
        java.lang.Class $r2;
        org.springframework.core.convert.TypeDescriptor r0, $r1;

        r0 := @this: org.springframework.core.convert.TypeDescriptor;

        $r1 = virtualinvoke r0.<org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor getMapKeyTypeDescriptor()>();

        $r2 = virtualinvoke $r1.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>();

        return $r2;
    }

    public org.springframework.core.convert.TypeDescriptor getMapKeyTypeDescriptor()
    {
        org.springframework.core.convert.TypeDescriptor r0, $r1, $r2, $r4;
        java.lang.Class $r3;

        r0 := @this: org.springframework.core.convert.TypeDescriptor;

        $r1 = r0.<org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor mapKeyType>;

        if $r1 != null goto label1;

        $r3 = specialinvoke r0.<org.springframework.core.convert.TypeDescriptor: java.lang.Class resolveMapKeyType()>();

        $r4 = virtualinvoke r0.<org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor forElementType(java.lang.Class)>($r3);

        r0.<org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor mapKeyType> = $r4;

     label1:
        $r2 = r0.<org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor mapKeyType>;

        return $r2;
    }

    public org.springframework.core.convert.TypeDescriptor getMapKeyTypeDescriptor(java.lang.Object)
    {
        org.springframework.core.convert.TypeDescriptor r0, $r1, $r2, $r4;
        java.lang.Object r3;

        r0 := @this: org.springframework.core.convert.TypeDescriptor;

        r3 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor getMapKeyTypeDescriptor()>();

        $r2 = <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor UNKNOWN>;

        if $r1 == $r2 goto label1;

        $r4 = $r1;

        goto label2;

     label1:
        $r4 = staticinvoke <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor forObject(java.lang.Object)>(r3);

     label2:
        return $r4;
    }

    public java.lang.Class getMapValueType()
    {
        java.lang.Class $r2;
        org.springframework.core.convert.TypeDescriptor r0, $r1;

        r0 := @this: org.springframework.core.convert.TypeDescriptor;

        $r1 = virtualinvoke r0.<org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor getMapValueTypeDescriptor()>();

        $r2 = virtualinvoke $r1.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>();

        return $r2;
    }

    public org.springframework.core.convert.TypeDescriptor getMapValueTypeDescriptor()
    {
        org.springframework.core.convert.TypeDescriptor r0, $r1, $r2, $r4;
        java.lang.Class $r3;

        r0 := @this: org.springframework.core.convert.TypeDescriptor;

        $r1 = r0.<org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor mapValueType>;

        if $r1 != null goto label1;

        $r3 = specialinvoke r0.<org.springframework.core.convert.TypeDescriptor: java.lang.Class resolveMapValueType()>();

        $r4 = virtualinvoke r0.<org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor forElementType(java.lang.Class)>($r3);

        r0.<org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor mapValueType> = $r4;

     label1:
        $r2 = r0.<org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor mapValueType>;

        return $r2;
    }

    public org.springframework.core.convert.TypeDescriptor getMapValueTypeDescriptor(java.lang.Object)
    {
        org.springframework.core.convert.TypeDescriptor r0, $r1, $r2, $r4;
        java.lang.Object r3;

        r0 := @this: org.springframework.core.convert.TypeDescriptor;

        r3 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor getMapValueTypeDescriptor()>();

        $r2 = <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor UNKNOWN>;

        if $r1 == $r2 goto label1;

        $r4 = $r1;

        goto label2;

     label1:
        $r4 = staticinvoke <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor forObject(java.lang.Object)>(r3);

     label2:
        return $r4;
    }

    public java.lang.'annotation'.Annotation[] getAnnotations()
    {
        org.springframework.core.convert.TypeDescriptor r0;
        java.lang.'annotation'.Annotation[] $r1, $r2, $r3;

        r0 := @this: org.springframework.core.convert.TypeDescriptor;

        $r1 = r0.<org.springframework.core.convert.TypeDescriptor: java.lang.'annotation'.Annotation[] annotations>;

        if $r1 != null goto label1;

        $r3 = specialinvoke r0.<org.springframework.core.convert.TypeDescriptor: java.lang.'annotation'.Annotation[] resolveAnnotations()>();

        r0.<org.springframework.core.convert.TypeDescriptor: java.lang.'annotation'.Annotation[] annotations> = $r3;

     label1:
        $r2 = r0.<org.springframework.core.convert.TypeDescriptor: java.lang.'annotation'.Annotation[] annotations>;

        return $r2;
    }

    public java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)
    {
        java.lang.'annotation'.Annotation[] $r1;
        org.springframework.core.convert.TypeDescriptor r0;
        int i0, i1;
        java.lang.'annotation'.Annotation r2;
        java.lang.Class $r3, r4;
        boolean $z0;

        r0 := @this: org.springframework.core.convert.TypeDescriptor;

        r4 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<org.springframework.core.convert.TypeDescriptor: java.lang.'annotation'.Annotation[] getAnnotations()>();

        i0 = lengthof $r1;

        i1 = 0;

        goto label3;

     label1:
        r2 = $r1[i1];

        $r3 = interfaceinvoke r2.<java.lang.'annotation'.Annotation: java.lang.Class annotationType()>();

        $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>(r4);

        if $z0 == 0 goto label2;

        return r2;

     label2:
        i1 = i1 + 1;

     label3:
        if i1 < i0 goto label1;

        return null;
    }

    public boolean isAssignableTo(org.springframework.core.convert.TypeDescriptor)
    {
        org.springframework.core.convert.TypeDescriptor r0, $r1, r2, $r3, $r8, $r9, $r10, $r11, $r14, $r15;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        java.lang.Class $r4, $r5, $r6, $r7, $r12, $r13;

        r0 := @this: org.springframework.core.convert.TypeDescriptor;

        r2 := @parameter0: org.springframework.core.convert.TypeDescriptor;

        $r1 = <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor NULL>;

        if r0 == $r1 goto label1;

        $r3 = <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor NULL>;

        if r2 != $r3 goto label2;

     label1:
        return 1;

     label2:
        $z0 = virtualinvoke r0.<org.springframework.core.convert.TypeDescriptor: boolean isCollection()>();

        if $z0 == 0 goto label3;

        $z11 = virtualinvoke r2.<org.springframework.core.convert.TypeDescriptor: boolean isCollection()>();

        if $z11 != 0 goto label4;

     label3:
        $z1 = virtualinvoke r0.<org.springframework.core.convert.TypeDescriptor: boolean isArray()>();

        if $z1 == 0 goto label6;

        $z8 = virtualinvoke r2.<org.springframework.core.convert.TypeDescriptor: boolean isArray()>();

        if $z8 == 0 goto label6;

     label4:
        $r12 = virtualinvoke r2.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>();

        $r13 = virtualinvoke r0.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>();

        $z9 = virtualinvoke $r12.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r13);

        if $z9 == 0 goto label5;

        $r14 = virtualinvoke r0.<org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor getElementTypeDescriptor()>();

        $r15 = virtualinvoke r2.<org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor getElementTypeDescriptor()>();

        $z10 = virtualinvoke $r14.<org.springframework.core.convert.TypeDescriptor: boolean isAssignableTo(org.springframework.core.convert.TypeDescriptor)>($r15);

        if $z10 == 0 goto label5;

        return 1;

     label5:
        return 0;

     label6:
        $z2 = virtualinvoke r0.<org.springframework.core.convert.TypeDescriptor: boolean isMap()>();

        if $z2 == 0 goto label8;

        $z4 = virtualinvoke r2.<org.springframework.core.convert.TypeDescriptor: boolean isMap()>();

        if $z4 == 0 goto label8;

        $r6 = virtualinvoke r2.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>();

        $r7 = virtualinvoke r0.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>();

        $z5 = virtualinvoke $r6.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r7);

        if $z5 == 0 goto label7;

        $r8 = virtualinvoke r0.<org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor getMapKeyTypeDescriptor()>();

        $r9 = virtualinvoke r2.<org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor getMapKeyTypeDescriptor()>();

        $z6 = virtualinvoke $r8.<org.springframework.core.convert.TypeDescriptor: boolean isAssignableTo(org.springframework.core.convert.TypeDescriptor)>($r9);

        if $z6 == 0 goto label7;

        $r10 = virtualinvoke r0.<org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor getMapValueTypeDescriptor()>();

        $r11 = virtualinvoke r2.<org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor getMapValueTypeDescriptor()>();

        $z7 = virtualinvoke $r10.<org.springframework.core.convert.TypeDescriptor: boolean isAssignableTo(org.springframework.core.convert.TypeDescriptor)>($r11);

        if $z7 == 0 goto label7;

        return 1;

     label7:
        return 0;

     label8:
        $r4 = virtualinvoke r2.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getObjectType()>();

        $r5 = virtualinvoke r0.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getObjectType()>();

        $z3 = virtualinvoke $r4.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r5);

        return $z3;
    }

    public org.springframework.core.convert.TypeDescriptor forElementType(java.lang.Class)
    {
        java.lang.reflect.Field $r3, $r6;
        org.springframework.core.convert.TypeDescriptor r1, $r4, $r5, $r9, $r10;
        org.springframework.core.MethodParameter $r2, $r7, $r8;
        int $i0, $i1;
        java.lang.Class r0;

        r1 := @this: org.springframework.core.convert.TypeDescriptor;

        r0 := @parameter0: java.lang.Class;

        if r0 != null goto label1;

        $r10 = <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor UNKNOWN>;

        return $r10;

     label1:
        $r2 = r1.<org.springframework.core.convert.TypeDescriptor: org.springframework.core.MethodParameter methodParameter>;

        if $r2 == null goto label2;

        $r7 = new org.springframework.core.MethodParameter;

        $r8 = r1.<org.springframework.core.convert.TypeDescriptor: org.springframework.core.MethodParameter methodParameter>;

        specialinvoke $r7.<org.springframework.core.MethodParameter: void <init>(org.springframework.core.MethodParameter)>($r8);

        virtualinvoke $r7.<org.springframework.core.MethodParameter: void increaseNestingLevel()>();

        $r9 = new org.springframework.core.convert.TypeDescriptor;

        specialinvoke $r9.<org.springframework.core.convert.TypeDescriptor: void <init>(org.springframework.core.MethodParameter,java.lang.Class)>($r7, r0);

        return $r9;

     label2:
        $r3 = r1.<org.springframework.core.convert.TypeDescriptor: java.lang.reflect.Field field>;

        if $r3 == null goto label3;

        $r5 = new org.springframework.core.convert.TypeDescriptor;

        $r6 = r1.<org.springframework.core.convert.TypeDescriptor: java.lang.reflect.Field field>;

        $i0 = r1.<org.springframework.core.convert.TypeDescriptor: int fieldNestingLevel>;

        $i1 = $i0 + 1;

        specialinvoke $r5.<org.springframework.core.convert.TypeDescriptor: void <init>(java.lang.reflect.Field,int,java.lang.Class)>($r6, $i1, r0);

        return $r5;

     label3:
        $r4 = staticinvoke <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor valueOf(java.lang.Class)>(r0);

        return $r4;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.'annotation'.Annotation[] $r12, $r13;
        org.springframework.core.convert.TypeDescriptor r0, $r2, r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z8, $z9, $z10, $z11;
        java.lang.Object r1;
        java.lang.Class $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;

        r0 := @this: org.springframework.core.convert.TypeDescriptor;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.springframework.core.convert.TypeDescriptor;

        if $z0 == 0 goto label2;

        $r2 = <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor NULL>;

        if r1 != $r2 goto label3;

     label2:
        return 0;

     label3:
        r3 = (org.springframework.core.convert.TypeDescriptor) r1;

        $r4 = virtualinvoke r0.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>();

        $r5 = virtualinvoke r3.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>();

        $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        if $z1 == 0 goto label4;

        $r12 = virtualinvoke r0.<org.springframework.core.convert.TypeDescriptor: java.lang.'annotation'.Annotation[] getAnnotations()>();

        $r13 = virtualinvoke r3.<org.springframework.core.convert.TypeDescriptor: java.lang.'annotation'.Annotation[] getAnnotations()>();

        $z6 = staticinvoke <org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>($r12, $r13);

        if $z6 == 0 goto label4;

        $z11 = 1;

        $z10 = 1;

        $z9 = 1;

        goto label5;

     label4:
        $z11 = 0;

        $z10 = 0;

        $z9 = 0;

     label5:
        $z8 = virtualinvoke r0.<org.springframework.core.convert.TypeDescriptor: boolean isCollection()>();

        if $z8 == 0 goto label7;

        if $z10 == 0 goto label6;

        $r10 = virtualinvoke r0.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getElementType()>();

        $r11 = virtualinvoke r3.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getElementType()>();

        $z5 = staticinvoke <org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>($r10, $r11);

        if $z5 == 0 goto label6;

        return 1;

     label6:
        return 0;

     label7:
        $z2 = virtualinvoke r0.<org.springframework.core.convert.TypeDescriptor: boolean isMap()>();

        if $z2 == 0 goto label9;

        if $z11 == 0 goto label8;

        $r6 = virtualinvoke r0.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getMapKeyType()>();

        $r7 = virtualinvoke r3.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getMapKeyType()>();

        $z3 = staticinvoke <org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>($r6, $r7);

        if $z3 == 0 goto label8;

        $r8 = virtualinvoke r0.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getMapValueType()>();

        $r9 = virtualinvoke r3.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getMapValueType()>();

        $z4 = staticinvoke <org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>($r8, $r9);

        if $z4 == 0 goto label8;

        return 1;

     label8:
        return 0;

     label9:
        return $z9;
    }

    public int hashCode()
    {
        org.springframework.core.convert.TypeDescriptor r0, $r1;
        int $i0;
        java.lang.Class $r2;

        r0 := @this: org.springframework.core.convert.TypeDescriptor;

        $r1 = <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor NULL>;

        if r0 != $r1 goto label1;

        $i0 = 0;

        goto label2;

     label1:
        $r2 = virtualinvoke r0.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>();

        $i0 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

     label2:
        return $i0;
    }

    public java.lang.String asString()
    {
        java.lang.String $r1;
        org.springframework.core.convert.TypeDescriptor r0;

        r0 := @this: org.springframework.core.convert.TypeDescriptor;

        $r1 = virtualinvoke r0.<org.springframework.core.convert.TypeDescriptor: java.lang.String toString()>();

        return $r1;
    }

    public java.lang.String toString()
    {
        java.lang.'annotation'.Annotation[] $r3;
        org.springframework.core.convert.TypeDescriptor r0, $r1, $r12, $r15, $r17;
        int i0, i1;
        java.lang.String $r7, $r10, $r19;
        boolean $z0, $z1;
        java.lang.'annotation'.Annotation r4;
        java.lang.StringBuilder $r2, $r5, $r8, $r11, $r13, $r14, $r16, $r18;
        java.lang.Class $r6, $r9;

        r0 := @this: org.springframework.core.convert.TypeDescriptor;

        $r1 = <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor NULL>;

        if r0 != $r1 goto label1;

        return "null";

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke r0.<org.springframework.core.convert.TypeDescriptor: java.lang.'annotation'.Annotation[] getAnnotations()>();

        i0 = lengthof $r3;

        i1 = 0;

        goto label3;

     label2:
        r4 = $r3[i1];

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("@");

        $r6 = interfaceinvoke r4.<java.lang.'annotation'.Annotation: java.lang.Class annotationType()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        i1 = i1 + 1;

     label3:
        if i1 < i0 goto label2;

        $r9 = virtualinvoke r0.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>();

        $r10 = staticinvoke <org.springframework.util.ClassUtils: java.lang.String getQualifiedName(java.lang.Class)>($r9);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $z0 = virtualinvoke r0.<org.springframework.core.convert.TypeDescriptor: boolean isMap()>();

        if $z0 == 0 goto label4;

        $r14 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<");

        $r15 = virtualinvoke r0.<org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor getMapKeyTypeDescriptor()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r16 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r17 = virtualinvoke r0.<org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor getMapValueTypeDescriptor()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r17);

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        goto label5;

     label4:
        $z1 = virtualinvoke r0.<org.springframework.core.convert.TypeDescriptor: boolean isCollection()>();

        if $z1 == 0 goto label5;

        $r11 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<");

        $r12 = virtualinvoke r0.<org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor getElementTypeDescriptor()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

     label5:
        $r19 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r19;
    }

    private java.lang.Class resolveElementType()
    {
        org.springframework.core.convert.TypeDescriptor r0;
        java.lang.Class $r1, $r2, $r3;
        boolean $z0, $z1;

        r0 := @this: org.springframework.core.convert.TypeDescriptor;

        $z0 = virtualinvoke r0.<org.springframework.core.convert.TypeDescriptor: boolean isArray()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.Class getComponentType()>();

        return $r3;

     label1:
        $z1 = virtualinvoke r0.<org.springframework.core.convert.TypeDescriptor: boolean isCollection()>();

        if $z1 == 0 goto label2;

        $r1 = specialinvoke r0.<org.springframework.core.convert.TypeDescriptor: java.lang.Class resolveCollectionElementType()>();

        return $r1;

     label2:
        return null;
    }

    private java.lang.Class resolveCollectionElementType()
    {
        org.springframework.core.convert.TypeDescriptor r0;
        org.springframework.core.MethodParameter $r2, $r10;
        int $i0;
        boolean $z0;
        java.util.Collection $r8;
        java.lang.reflect.Field $r1, $r12;
        java.lang.Object $r3, $r7;
        java.lang.Class $r4, $r5, $r6, $r9, $r11, $r13;

        r0 := @this: org.springframework.core.convert.TypeDescriptor;

        $r1 = r0.<org.springframework.core.convert.TypeDescriptor: java.lang.reflect.Field field>;

        if $r1 == null goto label1;

        $r12 = r0.<org.springframework.core.convert.TypeDescriptor: java.lang.reflect.Field field>;

        $i0 = r0.<org.springframework.core.convert.TypeDescriptor: int fieldNestingLevel>;

        $r13 = staticinvoke <org.springframework.core.GenericCollectionTypeResolver: java.lang.Class getCollectionFieldType(java.lang.reflect.Field,int)>($r12, $i0);

        return $r13;

     label1:
        $r2 = r0.<org.springframework.core.convert.TypeDescriptor: org.springframework.core.MethodParameter methodParameter>;

        if $r2 == null goto label2;

        $r10 = r0.<org.springframework.core.convert.TypeDescriptor: org.springframework.core.MethodParameter methodParameter>;

        $r11 = staticinvoke <org.springframework.core.GenericCollectionTypeResolver: java.lang.Class getCollectionParameterType(org.springframework.core.MethodParameter)>($r10);

        return $r11;

     label2:
        $r3 = r0.<org.springframework.core.convert.TypeDescriptor: java.lang.Object value>;

        $z0 = $r3 instanceof java.util.Collection;

        if $z0 == 0 goto label3;

        $r7 = r0.<org.springframework.core.convert.TypeDescriptor: java.lang.Object value>;

        $r8 = (java.util.Collection) $r7;

        $r9 = staticinvoke <org.springframework.util.CollectionUtils: java.lang.Class findCommonElementType(java.util.Collection)>($r8);

        if $r9 == null goto label4;

        return $r9;

     label3:
        $r4 = r0.<org.springframework.core.convert.TypeDescriptor: java.lang.Class type>;

        if $r4 == null goto label4;

        $r5 = r0.<org.springframework.core.convert.TypeDescriptor: java.lang.Class type>;

        $r6 = staticinvoke <org.springframework.core.GenericCollectionTypeResolver: java.lang.Class getCollectionType(java.lang.Class)>($r5);

        return $r6;

     label4:
        return null;
    }

    private java.lang.Class resolveMapKeyType()
    {
        org.springframework.core.convert.TypeDescriptor r0;
        org.springframework.core.MethodParameter $r2, $r12;
        java.util.Map $r8;
        boolean $z0, $z1;
        java.util.Collection $r10;
        java.util.Set $r9;
        java.lang.reflect.Field $r1, $r14;
        java.lang.Object $r3, $r7;
        java.lang.Class $r4, $r5, $r6, $r11, $r13, $r15;

        r0 := @this: org.springframework.core.convert.TypeDescriptor;

        $r1 = r0.<org.springframework.core.convert.TypeDescriptor: java.lang.reflect.Field field>;

        if $r1 == null goto label1;

        $r14 = r0.<org.springframework.core.convert.TypeDescriptor: java.lang.reflect.Field field>;

        $r15 = staticinvoke <org.springframework.core.GenericCollectionTypeResolver: java.lang.Class getMapKeyFieldType(java.lang.reflect.Field)>($r14);

        return $r15;

     label1:
        $r2 = r0.<org.springframework.core.convert.TypeDescriptor: org.springframework.core.MethodParameter methodParameter>;

        if $r2 == null goto label2;

        $r12 = r0.<org.springframework.core.convert.TypeDescriptor: org.springframework.core.MethodParameter methodParameter>;

        $r13 = staticinvoke <org.springframework.core.GenericCollectionTypeResolver: java.lang.Class getMapKeyParameterType(org.springframework.core.MethodParameter)>($r12);

        return $r13;

     label2:
        $r3 = r0.<org.springframework.core.convert.TypeDescriptor: java.lang.Object value>;

        $z0 = $r3 instanceof java.util.Map;

        if $z0 == 0 goto label3;

        $r7 = r0.<org.springframework.core.convert.TypeDescriptor: java.lang.Object value>;

        $r8 = (java.util.Map) $r7;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Set keySet()>();

        $r10 = (java.util.Collection) $r9;

        $r11 = staticinvoke <org.springframework.util.CollectionUtils: java.lang.Class findCommonElementType(java.util.Collection)>($r10);

        if $r11 == null goto label4;

        return $r11;

     label3:
        $r4 = r0.<org.springframework.core.convert.TypeDescriptor: java.lang.Class type>;

        if $r4 == null goto label4;

        $z1 = virtualinvoke r0.<org.springframework.core.convert.TypeDescriptor: boolean isMap()>();

        if $z1 == 0 goto label4;

        $r5 = r0.<org.springframework.core.convert.TypeDescriptor: java.lang.Class type>;

        $r6 = staticinvoke <org.springframework.core.GenericCollectionTypeResolver: java.lang.Class getMapKeyType(java.lang.Class)>($r5);

        return $r6;

     label4:
        return null;
    }

    private java.lang.Class resolveMapValueType()
    {
        org.springframework.core.convert.TypeDescriptor r0;
        org.springframework.core.MethodParameter $r2, $r11;
        java.util.Map $r8;
        boolean $z0, $z1;
        java.util.Collection $r9;
        java.lang.reflect.Field $r1, $r13;
        java.lang.Object $r3, $r7;
        java.lang.Class $r4, $r5, $r6, $r10, $r12, $r14;

        r0 := @this: org.springframework.core.convert.TypeDescriptor;

        $r1 = r0.<org.springframework.core.convert.TypeDescriptor: java.lang.reflect.Field field>;

        if $r1 == null goto label1;

        $r13 = r0.<org.springframework.core.convert.TypeDescriptor: java.lang.reflect.Field field>;

        $r14 = staticinvoke <org.springframework.core.GenericCollectionTypeResolver: java.lang.Class getMapValueFieldType(java.lang.reflect.Field)>($r13);

        return $r14;

     label1:
        $r2 = r0.<org.springframework.core.convert.TypeDescriptor: org.springframework.core.MethodParameter methodParameter>;

        if $r2 == null goto label2;

        $r11 = r0.<org.springframework.core.convert.TypeDescriptor: org.springframework.core.MethodParameter methodParameter>;

        $r12 = staticinvoke <org.springframework.core.GenericCollectionTypeResolver: java.lang.Class getMapValueParameterType(org.springframework.core.MethodParameter)>($r11);

        return $r12;

     label2:
        $r3 = r0.<org.springframework.core.convert.TypeDescriptor: java.lang.Object value>;

        $z0 = $r3 instanceof java.util.Map;

        if $z0 == 0 goto label3;

        $r7 = r0.<org.springframework.core.convert.TypeDescriptor: java.lang.Object value>;

        $r8 = (java.util.Map) $r7;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Collection values()>();

        $r10 = staticinvoke <org.springframework.util.CollectionUtils: java.lang.Class findCommonElementType(java.util.Collection)>($r9);

        if $r10 == null goto label4;

        return $r10;

     label3:
        $r4 = r0.<org.springframework.core.convert.TypeDescriptor: java.lang.Class type>;

        if $r4 == null goto label4;

        $z1 = virtualinvoke r0.<org.springframework.core.convert.TypeDescriptor: boolean isMap()>();

        if $z1 == 0 goto label4;

        $r5 = r0.<org.springframework.core.convert.TypeDescriptor: java.lang.Class type>;

        $r6 = staticinvoke <org.springframework.core.GenericCollectionTypeResolver: java.lang.Class getMapValueType(java.lang.Class)>($r5);

        return $r6;

     label4:
        return null;
    }

    private java.lang.'annotation'.Annotation[] resolveAnnotations()
    {
        java.lang.'annotation'.Annotation[] $r3, $r6, $r8, $r10;
        java.lang.reflect.Field $r1, $r9;
        org.springframework.core.convert.TypeDescriptor r0;
        org.springframework.core.MethodParameter $r2, $r4, $r5, $r7;
        int $i0;

        r0 := @this: org.springframework.core.convert.TypeDescriptor;

        $r1 = r0.<org.springframework.core.convert.TypeDescriptor: java.lang.reflect.Field field>;

        if $r1 == null goto label1;

        $r9 = r0.<org.springframework.core.convert.TypeDescriptor: java.lang.reflect.Field field>;

        $r10 = virtualinvoke $r9.<java.lang.reflect.Field: java.lang.'annotation'.Annotation[] getAnnotations()>();

        return $r10;

     label1:
        $r2 = r0.<org.springframework.core.convert.TypeDescriptor: org.springframework.core.MethodParameter methodParameter>;

        if $r2 == null goto label3;

        $r4 = r0.<org.springframework.core.convert.TypeDescriptor: org.springframework.core.MethodParameter methodParameter>;

        $i0 = virtualinvoke $r4.<org.springframework.core.MethodParameter: int getParameterIndex()>();

        if $i0 >= 0 goto label2;

        $r7 = r0.<org.springframework.core.convert.TypeDescriptor: org.springframework.core.MethodParameter methodParameter>;

        $r8 = virtualinvoke $r7.<org.springframework.core.MethodParameter: java.lang.'annotation'.Annotation[] getMethodAnnotations()>();

        return $r8;

     label2:
        $r5 = r0.<org.springframework.core.convert.TypeDescriptor: org.springframework.core.MethodParameter methodParameter>;

        $r6 = virtualinvoke $r5.<org.springframework.core.MethodParameter: java.lang.'annotation'.Annotation[] getParameterAnnotations()>();

        return $r6;

     label3:
        $r3 = <org.springframework.core.convert.TypeDescriptor: java.lang.'annotation'.Annotation[] EMPTY_ANNOTATION_ARRAY>;

        return $r3;
    }

    public static org.springframework.core.convert.TypeDescriptor forObject(java.lang.Object)
    {
        org.springframework.core.convert.TypeDescriptor $r1, $r3, $r4;
        java.lang.Object r0;
        java.lang.Class $r2;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        $r4 = <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor NULL>;

        return $r4;

     label1:
        $z0 = r0 instanceof java.util.Collection;

        if $z0 != 0 goto label2;

        $z1 = r0 instanceof java.util.Map;

        if $z1 == 0 goto label3;

     label2:
        $r1 = new org.springframework.core.convert.TypeDescriptor;

        specialinvoke $r1.<org.springframework.core.convert.TypeDescriptor: void <init>(java.lang.Object)>(r0);

        return $r1;

     label3:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = staticinvoke <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor valueOf(java.lang.Class)>($r2);

        return $r3;
    }

    public static org.springframework.core.convert.TypeDescriptor valueOf(java.lang.Class)
    {
        org.springframework.core.convert.TypeDescriptor r3, $r4, $r5;
        java.util.Map $r1;
        java.lang.Class r0;
        java.lang.Object $r2;

        r0 := @parameter0: java.lang.Class;

        if r0 != null goto label1;

        $r4 = <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor NULL>;

        return $r4;

     label1:
        $r1 = <org.springframework.core.convert.TypeDescriptor: java.util.Map typeDescriptorCache>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r3 = (org.springframework.core.convert.TypeDescriptor) $r2;

        if r3 == null goto label2;

        $r5 = r3;

        goto label3;

     label2:
        $r5 = new org.springframework.core.convert.TypeDescriptor;

        specialinvoke $r5.<org.springframework.core.convert.TypeDescriptor: void <init>(java.lang.Class)>(r0);

     label3:
        return $r5;
    }
}
