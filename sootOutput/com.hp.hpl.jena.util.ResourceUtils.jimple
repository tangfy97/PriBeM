public class com.hp.hpl.jena.util.ResourceUtils extends java.lang.Object
{
    private static final int WINDOW_SIZE;

    public void <init>()
    {
        com.hp.hpl.jena.util.ResourceUtils r0;

        r0 := @this: com.hp.hpl.jena.util.ResourceUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.List maximalLowerElements(java.util.Collection, com.hp.hpl.jena.rdf.model.Property, boolean)
    {
        java.util.List $r3;
        java.util.Iterator $r1;
        java.util.Collection r0;
        com.hp.hpl.jena.rdf.model.Property r2;
        boolean z0;

        r0 := @parameter0: java.util.Collection;

        r2 := @parameter1: com.hp.hpl.jena.rdf.model.Property;

        z0 := @parameter2: boolean;

        $r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

        $r3 = staticinvoke <com.hp.hpl.jena.util.ResourceUtils: java.util.List maximalLowerElements(java.util.Iterator,com.hp.hpl.jena.rdf.model.Property,boolean)>($r1, r2, z0);

        return $r3;
    }

    public static java.util.List maximalLowerElements(java.util.Iterator, com.hp.hpl.jena.rdf.model.Property, boolean)
    {
        java.util.ArrayList $r0, $r1, $r2, $r8;
        com.hp.hpl.jena.rdf.model.Property r6;
        boolean $z0, $z1, z2, $z3, $z4, $z5, $z6;
        java.util.Iterator r3;
        com.hp.hpl.jena.rdf.model.Resource r5;
        java.lang.Object $r4, $r7;

        r3 := @parameter0: java.util.Iterator;

        r6 := @parameter1: com.hp.hpl.jena.rdf.model.Property;

        z2 := @parameter2: boolean;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r7);

        goto label1;

     label2:
        $z1 = interfaceinvoke $r0.<java.util.List: boolean isEmpty()>();

        if $z1 != 0 goto label8;

        $r4 = interfaceinvoke $r0.<java.util.List: java.lang.Object remove(int)>(0);

        r5 = (com.hp.hpl.jena.rdf.model.Resource) $r4;

        $z3 = staticinvoke <com.hp.hpl.jena.util.ResourceUtils: boolean testResourceCovered(java.util.List,com.hp.hpl.jena.rdf.model.Property,boolean,com.hp.hpl.jena.rdf.model.Resource)>($r0, r6, z2, r5);

        if $z3 != 0 goto label3;

        $z4 = staticinvoke <com.hp.hpl.jena.util.ResourceUtils: boolean testResourceCovered(java.util.List,com.hp.hpl.jena.rdf.model.Property,boolean,com.hp.hpl.jena.rdf.model.Resource)>($r1, r6, z2, r5);

        if $z4 != 0 goto label3;

        $z5 = staticinvoke <com.hp.hpl.jena.util.ResourceUtils: boolean testResourceCovered(java.util.List,com.hp.hpl.jena.rdf.model.Property,boolean,com.hp.hpl.jena.rdf.model.Resource)>($r2, r6, z2, r5);

        if $z5 == 0 goto label4;

     label3:
        $z6 = 1;

        goto label5;

     label4:
        $z6 = 0;

     label5:
        if $z6 == 0 goto label6;

        $r8 = $r2;

        goto label7;

     label6:
        $r8 = $r1;

     label7:
        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>(r5);

        goto label2;

     label8:
        return $r1;
    }

    private static boolean testResourceCovered(java.util.List, com.hp.hpl.jena.rdf.model.Property, boolean, com.hp.hpl.jena.rdf.model.Resource)
    {
        java.util.Iterator $r1;
        com.hp.hpl.jena.rdf.model.Resource r3, r5;
        java.util.List r0;
        com.hp.hpl.jena.rdf.model.Property r4;
        java.lang.Object $r2;
        boolean $z0, z1, z2, $z3;

        r0 := @parameter0: java.util.List;

        r4 := @parameter1: com.hp.hpl.jena.rdf.model.Property;

        z1 := @parameter2: boolean;

        r5 := @parameter3: com.hp.hpl.jena.rdf.model.Resource;

        z2 = 0;

        $r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        if z2 != 0 goto label4;

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.hp.hpl.jena.rdf.model.Resource) $r2;

        if z1 == 0 goto label2;

        $z3 = interfaceinvoke r5.<com.hp.hpl.jena.rdf.model.Resource: boolean hasProperty(com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>(r4, r3);

        goto label3;

     label2:
        $z3 = interfaceinvoke r3.<com.hp.hpl.jena.rdf.model.Resource: boolean hasProperty(com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>(r4, r5);

     label3:
        z2 = $z3;

        goto label1;

     label4:
        return z2;
    }

    public static java.util.List removeEquiv(java.util.List, com.hp.hpl.jena.rdf.model.Property, com.hp.hpl.jena.rdf.model.Resource)
    {
        java.util.Iterator $r2;
        com.hp.hpl.jena.rdf.model.Resource r4, r6;
        java.util.ArrayList $r0;
        java.util.List r1;
        com.hp.hpl.jena.rdf.model.Property r5;
        java.lang.Object $r3;
        boolean $z0, $z1, $z2;

        r1 := @parameter0: java.util.List;

        r5 := @parameter1: com.hp.hpl.jena.rdf.model.Property;

        r6 := @parameter2: com.hp.hpl.jena.rdf.model.Resource;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.hp.hpl.jena.rdf.model.Resource) $r3;

        $z1 = interfaceinvoke r4.<com.hp.hpl.jena.rdf.model.Resource: boolean hasProperty(com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>(r5, r6);

        if $z1 == 0 goto label2;

        $z2 = interfaceinvoke r6.<com.hp.hpl.jena.rdf.model.Resource: boolean hasProperty(com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>(r5, r4);

        if $z2 == 0 goto label2;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r4);

     label2:
        goto label1;

     label3:
        interfaceinvoke r1.<java.util.List: boolean removeAll(java.util.Collection)>($r0);

        return $r0;
    }

    public static java.util.List partition(java.util.List, com.hp.hpl.jena.rdf.model.Property)
    {
        com.hp.hpl.jena.rdf.model.Resource r4;
        java.util.ArrayList $r0, $r2;
        java.util.List r1, $r6;
        com.hp.hpl.jena.rdf.model.Property r5;
        java.lang.Object $r3;
        boolean $z0;

        r1 := @parameter0: java.util.List;

        r5 := @parameter1: com.hp.hpl.jena.rdf.model.Property;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r0.<java.util.List: boolean addAll(java.util.Collection)>(r1);

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

     label1:
        $z0 = interfaceinvoke $r0.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $r3 = interfaceinvoke $r0.<java.util.List: java.lang.Object remove(int)>(0);

        r4 = (com.hp.hpl.jena.rdf.model.Resource) $r3;

        $r6 = staticinvoke <com.hp.hpl.jena.util.ResourceUtils: java.util.List removeEquiv(java.util.List,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.Resource)>($r0, r5, r4);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r4);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r6);

        goto label1;

     label2:
        return $r2;
    }

    public static com.hp.hpl.jena.rdf.model.Resource renameResource(com.hp.hpl.jena.rdf.model.Resource, java.lang.String)
    {
        com.hp.hpl.jena.graph.Node $r2, $r8, $r10, $r11, $r16, $r17, $r18, $r19, $r20, $r21, $r23, $r24, r25, $r26, $r30, $r31, $r38, $r39;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, z9, $z10, $z11, z12, z13;
        com.hp.hpl.jena.graph.Triple $r27, r36, r37;
        java.lang.Throwable $r33;
        com.hp.hpl.jena.reasoner.InfGraph $r13, $r32;
        java.util.ArrayList $r9;
        int i0;
        java.lang.String $r1, r6;
        com.hp.hpl.jena.graph.Graph $r4, r5, $r34;
        java.util.Iterator $r14, $r15;
        com.hp.hpl.jena.rdf.model.Resource r0, $r7;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r12, r35, $r40;
        com.hp.hpl.jena.rdf.model.Model $r3;
        java.lang.Object $r22, $r28, $r29;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        r6 := @parameter1: java.lang.String;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Resource: java.lang.String getURI()>();

        if $r1 == null goto label01;

        $z8 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r6);

        if $z8 == 0 goto label01;

        return r0;

     label01:
        $r2 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.graph.Node asNode()>();

        $r3 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.Model getModel()>();

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.graph.Graph getGraph()>();

        $z0 = $r4 instanceof com.hp.hpl.jena.reasoner.InfGraph;

        if $z0 == 0 goto label02;

        $r32 = (com.hp.hpl.jena.reasoner.InfGraph) $r4;

        $r34 = interfaceinvoke $r32.<com.hp.hpl.jena.reasoner.InfGraph: com.hp.hpl.jena.graph.Graph getRawGraph()>();

        goto label03;

     label02:
        $r34 = $r4;

     label03:
        r5 = $r34;

        $r7 = interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Resource createResource(java.lang.String)>(r6);

        $r8 = interfaceinvoke $r7.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.graph.Node asNode()>();

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>(int)>(1000);

        z9 = 1;

        z13 = 1;

        z12 = 1;

        $r11 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r10 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r12 = interfaceinvoke $r34.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r2, $r11, $r10);

        r35 = $r12;

     label04:
        $z1 = interfaceinvoke $r12.<com.hp.hpl.jena.util.iterator.ExtendedIterator: boolean hasNext()>();

        if $z1 != 0 goto label05;

        interfaceinvoke $r12.<com.hp.hpl.jena.util.iterator.ExtendedIterator: void close()>();

        z9 = 0;

        z13 = 0;

        z12 = 0;

        $r31 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r30 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        r35 = interfaceinvoke $r34.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r31, $r30, $r2);

     label05:
        $z2 = interfaceinvoke r35.<com.hp.hpl.jena.util.iterator.ExtendedIterator: boolean hasNext()>();

     label06:
        $z10 = interfaceinvoke r35.<com.hp.hpl.jena.util.iterator.ExtendedIterator: boolean hasNext()>();

        if $z10 == 0 goto label20;

        i0 = 0;

     label07:
        $z3 = interfaceinvoke r35.<com.hp.hpl.jena.util.iterator.ExtendedIterator: boolean hasNext()>();

        if $z3 == 0 goto label08;

        if i0 >= 1000 goto label08;

        $r29 = interfaceinvoke r35.<com.hp.hpl.jena.util.iterator.ExtendedIterator: java.lang.Object next()>();

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r29);

        i0 = i0 + 1;

        goto label07;

     label08:
        interfaceinvoke r35.<com.hp.hpl.jena.util.iterator.ExtendedIterator: void close()>();

        $r14 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z11 = interfaceinvoke $r14.<java.util.Iterator: boolean hasNext()>();

        if $z11 == 0 goto label10;

        $r28 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>();

        r36 = (com.hp.hpl.jena.graph.Triple) $r28;

        interfaceinvoke r5.<com.hp.hpl.jena.graph.Graph: void delete(com.hp.hpl.jena.graph.Triple)>(r36);

        goto label09;

     label10:
        $r15 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label11:
        $z4 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label16;

        $r22 = interfaceinvoke $r15.<java.util.Iterator: java.lang.Object next()>();

        r37 = (com.hp.hpl.jena.graph.Triple) $r22;

        $r23 = virtualinvoke r37.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        $r24 = virtualinvoke r37.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        $z6 = virtualinvoke $r23.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>($r2);

        if $z6 == 0 goto label12;

        $r38 = $r8;

        goto label13;

     label12:
        $r38 = $r23;

     label13:
        r25 = $r38;

        $z7 = virtualinvoke $r24.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>($r2);

        if $z7 == 0 goto label14;

        $r39 = $r8;

        goto label15;

     label14:
        $r39 = $r24;

     label15:
        $r26 = virtualinvoke r37.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r27 = staticinvoke <com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Triple create(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r25, $r26, $r39);

        interfaceinvoke r5.<com.hp.hpl.jena.graph.Graph: void add(com.hp.hpl.jena.graph.Triple)>($r27);

        goto label11;

     label16:
        interfaceinvoke $r9.<java.util.List: void clear()>();

        if z12 == 0 goto label17;

        $r21 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r20 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r40 = interfaceinvoke r5.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r2, $r21, $r20);

        goto label18;

     label17:
        $r17 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r16 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r40 = interfaceinvoke r5.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r17, $r16, $r2);

     label18:
        r35 = $r40;

        if z13 == 0 goto label19;

        $z5 = interfaceinvoke $r40.<com.hp.hpl.jena.util.iterator.ExtendedIterator: boolean hasNext()>();

        if $z5 != 0 goto label19;

        interfaceinvoke $r40.<com.hp.hpl.jena.util.iterator.ExtendedIterator: void close()>();

        z9 = 0;

        z13 = 0;

        z12 = 0;

        $r19 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r18 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        r35 = interfaceinvoke r5.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r19, $r18, $r2);

     label19:
        goto label06;

     label20:
        interfaceinvoke r35.<com.hp.hpl.jena.util.iterator.ExtendedIterator: void close()>();

        goto label23;

     label21:
        $r33 := @caughtexception;

     label22:
        interfaceinvoke r35.<com.hp.hpl.jena.util.iterator.ExtendedIterator: void close()>();

        throw $r33;

     label23:
        if r5 == $r4 goto label24;

        if $z2 == 0 goto label24;

        $r13 = (com.hp.hpl.jena.reasoner.InfGraph) $r4;

        interfaceinvoke $r13.<com.hp.hpl.jena.reasoner.InfGraph: void rebind()>();

     label24:
        return $r7;

        catch java.lang.Throwable from label04 to label20 with label21;
        catch java.lang.Throwable from label21 to label22 with label21;
    }

    public static com.hp.hpl.jena.rdf.model.Model reachableClosure(com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.rdf.model.RDFNode $r8, $r9;
        java.util.Set $r1;
        com.hp.hpl.jena.rdf.model.Statement $r7;
        com.hp.hpl.jena.rdf.model.Resource r3, r5;
        com.hp.hpl.jena.rdf.model.StmtIterator $r6;
        com.hp.hpl.jena.rdf.model.Model $r0;
        java.lang.Object $r4;
        java.util.LinkedList $r2;
        boolean $z0, $z1, $z2, $z3;

        r3 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        $r0 = staticinvoke <com.hp.hpl.jena.rdf.model.ModelFactory: com.hp.hpl.jena.rdf.model.Model createDefaultModel()>();

        $r1 = staticinvoke <com.hp.hpl.jena.util.CollectionFactory: java.util.Set createHashedSet()>();

        $r2 = new java.util.LinkedList;

        specialinvoke $r2.<java.util.LinkedList: void <init>()>();

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r3);

     label1:
        $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label5;

        $r4 = interfaceinvoke $r2.<java.util.List: java.lang.Object remove(int)>(0);

        r5 = (com.hp.hpl.jena.rdf.model.Resource) $r4;

        $z1 = interfaceinvoke $r1.<java.util.Set: boolean contains(java.lang.Object)>(r5);

        if $z1 != 0 goto label4;

        interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>(r5);

        $r6 = interfaceinvoke r5.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.StmtIterator listProperties()>();

     label2:
        $z2 = interfaceinvoke $r6.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z2 == 0 goto label4;

        $r7 = interfaceinvoke $r6.<com.hp.hpl.jena.rdf.model.StmtIterator: com.hp.hpl.jena.rdf.model.Statement nextStatement()>();

        interfaceinvoke $r0.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Model add(com.hp.hpl.jena.rdf.model.Statement)>($r7);

        $r8 = interfaceinvoke $r7.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.RDFNode getObject()>();

        $z3 = $r8 instanceof com.hp.hpl.jena.rdf.model.Resource;

        if $z3 == 0 goto label3;

        $r9 = interfaceinvoke $r7.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.RDFNode getObject()>();

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r9);

     label3:
        goto label2;

     label4:
        goto label1;

     label5:
        return $r0;
    }

    public static void <clinit>()
    {
        <com.hp.hpl.jena.util.ResourceUtils: int WINDOW_SIZE> = 1000;

        return;
    }
}
