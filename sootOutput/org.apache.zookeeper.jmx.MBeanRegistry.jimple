public class org.apache.zookeeper.jmx.MBeanRegistry extends java.lang.Object
{
    private static final org.slf4j.Logger LOG;
    private static org.apache.zookeeper.jmx.MBeanRegistry instance;
    private java.util.Map mapBean2Path;
    private java.util.Map mapName2Bean;
    private javax.management.MBeanServer mBeanServer;
    static final boolean $assertionsDisabled;

    public static org.apache.zookeeper.jmx.MBeanRegistry getInstance()
    {
        org.apache.zookeeper.jmx.MBeanRegistry $r0;

        $r0 = <org.apache.zookeeper.jmx.MBeanRegistry: org.apache.zookeeper.jmx.MBeanRegistry instance>;

        return $r0;
    }

    public void <init>()
    {
        org.apache.zookeeper.jmx.MBeanRegistry r0;
        javax.management.MBeanServer $r3, $r5;
        java.util.concurrent.ConcurrentHashMap $r1, $r2;
        java.lang.Error $r4;

        r0 := @this: org.apache.zookeeper.jmx.MBeanRegistry;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.apache.zookeeper.jmx.MBeanRegistry: java.util.Map mapBean2Path> = $r1;

        $r2 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r2.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.apache.zookeeper.jmx.MBeanRegistry: java.util.Map mapName2Bean> = $r2;

     label1:
        $r3 = staticinvoke <java.lang.management.ManagementFactory: javax.management.MBeanServer getPlatformMBeanServer()>();

        r0.<org.apache.zookeeper.jmx.MBeanRegistry: javax.management.MBeanServer mBeanServer> = $r3;

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = staticinvoke <javax.management.MBeanServerFactory: javax.management.MBeanServer createMBeanServer()>();

        r0.<org.apache.zookeeper.jmx.MBeanRegistry: javax.management.MBeanServer mBeanServer> = $r5;

     label4:
        return;

        catch java.lang.Error from label1 to label2 with label3;
    }

    public javax.management.MBeanServer getPlatformMBeanServer()
    {
        org.apache.zookeeper.jmx.MBeanRegistry r0;
        javax.management.MBeanServer $r1;

        r0 := @this: org.apache.zookeeper.jmx.MBeanRegistry;

        $r1 = r0.<org.apache.zookeeper.jmx.MBeanRegistry: javax.management.MBeanServer mBeanServer>;

        return $r1;
    }

    public void register(org.apache.zookeeper.jmx.ZKMBeanInfo, org.apache.zookeeper.jmx.ZKMBeanInfo) throws javax.management.JMException
    {
        java.lang.AssertionError $r7, $r8;
        org.apache.zookeeper.jmx.ZKMBeanInfo r0, r2;
        javax.management.MBeanServer $r4;
        java.util.Map $r5, $r18, $r19;
        java.lang.String $r13, $r15, r16, $r17, $r20;
        boolean $z0, $z1, $z2;
        org.slf4j.Logger $r11;
        org.apache.zookeeper.jmx.MBeanRegistry r1;
        javax.management.ObjectName $r3;
        javax.management.JMException $r9;
        java.lang.Object $r6;
        java.lang.StringBuilder $r10, $r12, $r14;

        r1 := @this: org.apache.zookeeper.jmx.MBeanRegistry;

        r2 := @parameter0: org.apache.zookeeper.jmx.ZKMBeanInfo;

        r0 := @parameter1: org.apache.zookeeper.jmx.ZKMBeanInfo;

        $z0 = <org.apache.zookeeper.jmx.MBeanRegistry: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r2 != null goto label1;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label1:
        r16 = null;

        if r0 == null goto label2;

        $r5 = r1.<org.apache.zookeeper.jmx.MBeanRegistry: java.util.Map mapBean2Path>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r16 = (java.lang.String) $r6;

        $z1 = <org.apache.zookeeper.jmx.MBeanRegistry: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        if r16 != null goto label2;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label2:
        $r17 = virtualinvoke r1.<org.apache.zookeeper.jmx.MBeanRegistry: java.lang.String makeFullPath(java.lang.String,org.apache.zookeeper.jmx.ZKMBeanInfo)>(r16, r0);

        $r18 = r1.<org.apache.zookeeper.jmx.MBeanRegistry: java.util.Map mapBean2Path>;

        interfaceinvoke $r18.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r17);

        $r19 = r1.<org.apache.zookeeper.jmx.MBeanRegistry: java.util.Map mapName2Bean>;

        $r20 = interfaceinvoke r2.<org.apache.zookeeper.jmx.ZKMBeanInfo: java.lang.String getName()>();

        interfaceinvoke $r19.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r20, r2);

        $z2 = interfaceinvoke r2.<org.apache.zookeeper.jmx.ZKMBeanInfo: boolean isHidden()>();

        if $z2 == 0 goto label3;

        return;

     label3:
        $r3 = virtualinvoke r1.<org.apache.zookeeper.jmx.MBeanRegistry: javax.management.ObjectName makeObjectName(java.lang.String,org.apache.zookeeper.jmx.ZKMBeanInfo)>($r17, r2);

     label4:
        $r4 = r1.<org.apache.zookeeper.jmx.MBeanRegistry: javax.management.MBeanServer mBeanServer>;

        interfaceinvoke $r4.<javax.management.MBeanServer: javax.management.ObjectInstance registerMBean(java.lang.Object,javax.management.ObjectName)>(r2, $r3);

     label5:
        goto label7;

     label6:
        $r9 := @caughtexception;

        $r11 = <org.apache.zookeeper.jmx.MBeanRegistry: org.slf4j.Logger LOG>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to register MBean ");

        $r13 = interfaceinvoke r2.<org.apache.zookeeper.jmx.ZKMBeanInfo: java.lang.String getName()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r11.<org.slf4j.Logger: void warn(java.lang.String)>($r15);

        throw $r9;

     label7:
        return;

        catch javax.management.JMException from label4 to label5 with label6;
    }

    private void unregister(java.lang.String, org.apache.zookeeper.jmx.ZKMBeanInfo) throws javax.management.JMException
    {
        org.slf4j.Logger $r7;
        org.apache.zookeeper.jmx.MBeanRegistry r2;
        javax.management.ObjectName $r4;
        org.apache.zookeeper.jmx.ZKMBeanInfo r1;
        javax.management.JMException $r5;
        javax.management.MBeanServer $r3;
        java.lang.StringBuilder $r6, $r8, $r10;
        java.lang.String r0, $r9, $r11;
        boolean $z0;

        r2 := @this: org.apache.zookeeper.jmx.MBeanRegistry;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: org.apache.zookeeper.jmx.ZKMBeanInfo;

        if r0 != null goto label1;

        return;

     label1:
        $z0 = interfaceinvoke r1.<org.apache.zookeeper.jmx.ZKMBeanInfo: boolean isHidden()>();

        if $z0 != 0 goto label5;

     label2:
        $r3 = r2.<org.apache.zookeeper.jmx.MBeanRegistry: javax.management.MBeanServer mBeanServer>;

        $r4 = virtualinvoke r2.<org.apache.zookeeper.jmx.MBeanRegistry: javax.management.ObjectName makeObjectName(java.lang.String,org.apache.zookeeper.jmx.ZKMBeanInfo)>(r0, r1);

        interfaceinvoke $r3.<javax.management.MBeanServer: void unregisterMBean(javax.management.ObjectName)>($r4);

     label3:
        goto label5;

     label4:
        $r5 := @caughtexception;

        $r7 = <org.apache.zookeeper.jmx.MBeanRegistry: org.slf4j.Logger LOG>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to unregister MBean ");

        $r9 = interfaceinvoke r1.<org.apache.zookeeper.jmx.ZKMBeanInfo: java.lang.String getName()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r7.<org.slf4j.Logger: void warn(java.lang.String)>($r11);

        throw $r5;

     label5:
        return;

        catch javax.management.JMException from label2 to label3 with label4;
    }

    public void unregister(org.apache.zookeeper.jmx.ZKMBeanInfo)
    {
        org.slf4j.Logger $r9;
        org.apache.zookeeper.jmx.MBeanRegistry r1;
        org.apache.zookeeper.jmx.ZKMBeanInfo r0;
        javax.management.JMException $r8;
        java.util.Map $r2, $r5, $r6;
        java.lang.Object $r3;
        java.lang.String r4, $r7;

        r1 := @this: org.apache.zookeeper.jmx.MBeanRegistry;

        r0 := @parameter0: org.apache.zookeeper.jmx.ZKMBeanInfo;

        if r0 != null goto label1;

        return;

     label1:
        $r2 = r1.<org.apache.zookeeper.jmx.MBeanRegistry: java.util.Map mapBean2Path>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r4 = (java.lang.String) $r3;

     label2:
        specialinvoke r1.<org.apache.zookeeper.jmx.MBeanRegistry: void unregister(java.lang.String,org.apache.zookeeper.jmx.ZKMBeanInfo)>(r4, r0);

     label3:
        goto label5;

     label4:
        $r8 := @caughtexception;

        $r9 = <org.apache.zookeeper.jmx.MBeanRegistry: org.slf4j.Logger LOG>;

        interfaceinvoke $r9.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Error during unregister", $r8);

     label5:
        $r5 = r1.<org.apache.zookeeper.jmx.MBeanRegistry: java.util.Map mapBean2Path>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r0);

        $r6 = r1.<org.apache.zookeeper.jmx.MBeanRegistry: java.util.Map mapName2Bean>;

        $r7 = interfaceinvoke r0.<org.apache.zookeeper.jmx.ZKMBeanInfo: java.lang.String getName()>();

        interfaceinvoke $r6.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r7);

        return;

        catch javax.management.JMException from label2 to label3 with label4;
    }

    public void unregisterAll()
    {
        java.util.Map$Entry r7;
        org.slf4j.Logger $r13;
        java.util.Iterator $r3;
        org.apache.zookeeper.jmx.MBeanRegistry r0;
        java.util.Set $r2;
        org.apache.zookeeper.jmx.ZKMBeanInfo $r11;
        javax.management.JMException $r12;
        java.util.Map $r1, $r4, $r5;
        java.lang.Object $r6, $r8, $r10;
        java.lang.String $r9;
        boolean $z0;

        r0 := @this: org.apache.zookeeper.jmx.MBeanRegistry;

        $r1 = r0.<org.apache.zookeeper.jmx.MBeanRegistry: java.util.Map mapBean2Path>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r6 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.Map$Entry) $r6;

     label2:
        $r8 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r9 = (java.lang.String) $r8;

        $r10 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r11 = (org.apache.zookeeper.jmx.ZKMBeanInfo) $r10;

        specialinvoke r0.<org.apache.zookeeper.jmx.MBeanRegistry: void unregister(java.lang.String,org.apache.zookeeper.jmx.ZKMBeanInfo)>($r9, $r11);

     label3:
        goto label5;

     label4:
        $r12 := @caughtexception;

        $r13 = <org.apache.zookeeper.jmx.MBeanRegistry: org.slf4j.Logger LOG>;

        interfaceinvoke $r13.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Error during unregister", $r12);

     label5:
        goto label1;

     label6:
        $r4 = r0.<org.apache.zookeeper.jmx.MBeanRegistry: java.util.Map mapBean2Path>;

        interfaceinvoke $r4.<java.util.Map: void clear()>();

        $r5 = r0.<org.apache.zookeeper.jmx.MBeanRegistry: java.util.Map mapName2Bean>;

        interfaceinvoke $r5.<java.util.Map: void clear()>();

        return;

        catch javax.management.JMException from label2 to label3 with label4;
    }

    public transient java.lang.String makeFullPath(java.lang.String, java.lang.String[])
    {
        org.apache.zookeeper.jmx.MBeanRegistry r7;
        java.lang.String[] r4;
        int $i0, i1;
        java.lang.StringBuilder $r1, $r2, $r3, $r8;
        java.lang.String r0, $r5, r6, $r9;
        boolean $z0, z1;

        r7 := @this: org.apache.zookeeper.jmx.MBeanRegistry;

        r0 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String[];

        $r8 = new java.lang.StringBuilder;

        if r0 != null goto label1;

        $r9 = "/";

        goto label3;

     label1:
        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("/");

        if $z0 == 0 goto label2;

        $r9 = r0;

        goto label3;

     label2:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

     label3:
        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>($r9);

        z1 = 1;

        $i0 = lengthof r4;

        i1 = 0;

     label4:
        if i1 >= $i0 goto label9;

        r6 = r4[i1];

        if r6 != null goto label5;

        goto label8;

     label5:
        if z1 != 0 goto label6;

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        goto label7;

     label6:
        z1 = 0;

     label7:
        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

     label8:
        i1 = i1 + 1;

        goto label4;

     label9:
        $r5 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    protected java.lang.String makeFullPath(java.lang.String, org.apache.zookeeper.jmx.ZKMBeanInfo)
    {
        org.apache.zookeeper.jmx.ZKMBeanInfo r3;
        org.apache.zookeeper.jmx.MBeanRegistry r0;
        java.lang.String[] $r2;
        java.lang.String r1, $r4, $r5;

        r0 := @this: org.apache.zookeeper.jmx.MBeanRegistry;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: org.apache.zookeeper.jmx.ZKMBeanInfo;

        $r2 = newarray (java.lang.String)[1];

        if r3 != null goto label1;

        $r5 = null;

        goto label2;

     label1:
        $r5 = interfaceinvoke r3.<org.apache.zookeeper.jmx.ZKMBeanInfo: java.lang.String getName()>();

     label2:
        $r2[0] = $r5;

        $r4 = virtualinvoke r0.<org.apache.zookeeper.jmx.MBeanRegistry: java.lang.String makeFullPath(java.lang.String,java.lang.String[])>(r1, $r2);

        return $r4;
    }

    private int tokenize(java.lang.StringBuilder, java.lang.String, int)
    {
        org.apache.zookeeper.jmx.MBeanRegistry r8;
        java.lang.String[] $r1;
        int i0, $i1, $i2, i3, i4;
        java.lang.StringBuilder r3, $r4, $r5, $r6, $r7;
        java.lang.String r0, r2;

        r8 := @this: org.apache.zookeeper.jmx.MBeanRegistry;

        r3 := @parameter0: java.lang.StringBuilder;

        r0 := @parameter1: java.lang.String;

        i3 := @parameter2: int;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>("/");

        i0 = lengthof $r1;

        i4 = 0;

     label1:
        if i4 >= i0 goto label4;

        r2 = $r1[i4];

        $i1 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i1 != 0 goto label2;

        goto label3;

     label2:
        $r4 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("name");

        $i2 = i3;

        i3 = i3 + 1;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

     label3:
        i4 = i4 + 1;

        goto label1;

     label4:
        return i3;
    }

    protected javax.management.ObjectName makeObjectName(java.lang.String, org.apache.zookeeper.jmx.ZKMBeanInfo) throws javax.management.MalformedObjectNameException
    {
        org.apache.zookeeper.jmx.ZKMBeanInfo r3;
        int $i0, $i1, $i2;
        java.lang.String r0, $r4, $r6, $r11, $r15, $r17;
        org.slf4j.Logger $r9;
        org.apache.zookeeper.jmx.MBeanRegistry r2;
        javax.management.ObjectName $r5;
        javax.management.MalformedObjectNameException $r7;
        java.lang.StringBuilder $r1, $r8, $r10, $r12, $r13, $r16;
        java.lang.Class $r14;

        r2 := @this: org.apache.zookeeper.jmx.MBeanRegistry;

        r0 := @parameter0: java.lang.String;

        r3 := @parameter1: org.apache.zookeeper.jmx.ZKMBeanInfo;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("org.apache.ZooKeeperService:");

        $i0 = specialinvoke r2.<org.apache.zookeeper.jmx.MBeanRegistry: int tokenize(java.lang.StringBuilder,java.lang.String,int)>($r1, r0, 0);

        $r4 = interfaceinvoke r3.<org.apache.zookeeper.jmx.ZKMBeanInfo: java.lang.String getName()>();

        specialinvoke r2.<org.apache.zookeeper.jmx.MBeanRegistry: int tokenize(java.lang.StringBuilder,java.lang.String,int)>($r1, $r4, $i0);

        $i1 = virtualinvoke $r1.<java.lang.StringBuilder: int length()>();

        $i2 = $i1 - 1;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder deleteCharAt(int)>($i2);

     label2:
        $r5 = new javax.management.ObjectName;

        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<javax.management.ObjectName: void <init>(java.lang.String)>($r6);

     label3:
        return $r5;

     label4:
        $r7 := @caughtexception;

        $r9 = <org.apache.zookeeper.jmx.MBeanRegistry: org.slf4j.Logger LOG>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid name \"");

        $r11 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" for class ");

        $r14 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        $r15 = virtualinvoke $r14.<java.lang.Class: java.lang.String toString()>();

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r9.<org.slf4j.Logger: void warn(java.lang.String)>($r17);

        throw $r7;

        catch javax.management.MalformedObjectNameException from label2 to label3 with label4;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r1;
        org.apache.zookeeper.jmx.MBeanRegistry $r2;
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/zookeeper/jmx/MBeanRegistry;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.zookeeper.jmx.MBeanRegistry: boolean $assertionsDisabled> = $z1;

        $r1 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/zookeeper/jmx/MBeanRegistry;");

        <org.apache.zookeeper.jmx.MBeanRegistry: org.slf4j.Logger LOG> = $r1;

        $r2 = new org.apache.zookeeper.jmx.MBeanRegistry;

        specialinvoke $r2.<org.apache.zookeeper.jmx.MBeanRegistry: void <init>()>();

        <org.apache.zookeeper.jmx.MBeanRegistry: org.apache.zookeeper.jmx.MBeanRegistry instance> = $r2;

        return;
    }
}
