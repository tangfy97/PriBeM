final class org.wiztools.commons.CollectionsUtil$2 extends java.lang.Object implements org.wiztools.commons.MultiValueMap
{
    final org.wiztools.commons.MultiValueMap val$map;

    void <init>(org.wiztools.commons.MultiValueMap)
    {
        org.wiztools.commons.CollectionsUtil$2 r0;
        org.wiztools.commons.MultiValueMap r1;

        r0 := @this: org.wiztools.commons.CollectionsUtil$2;

        r1 := @parameter0: org.wiztools.commons.MultiValueMap;

        r0.<org.wiztools.commons.CollectionsUtil$2: org.wiztools.commons.MultiValueMap val$map> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void clear()
    {
        org.wiztools.commons.CollectionsUtil$2 r1;
        java.lang.UnsupportedOperationException $r0;

        r1 := @this: org.wiztools.commons.CollectionsUtil$2;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Not supported yet.");

        throw $r0;
    }

    public boolean containsKey(java.lang.Object)
    {
        org.wiztools.commons.CollectionsUtil$2 r0;
        java.lang.Object r1;
        org.wiztools.commons.MultiValueMap $r2;
        boolean $z0;

        r0 := @this: org.wiztools.commons.CollectionsUtil$2;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.wiztools.commons.CollectionsUtil$2: org.wiztools.commons.MultiValueMap val$map>;

        $z0 = interfaceinvoke $r2.<org.wiztools.commons.MultiValueMap: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean containsValue(java.lang.Object)
    {
        org.wiztools.commons.CollectionsUtil$2 r0;
        java.lang.Object r1;
        org.wiztools.commons.MultiValueMap $r2;
        boolean $z0;

        r0 := @this: org.wiztools.commons.CollectionsUtil$2;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.wiztools.commons.CollectionsUtil$2: org.wiztools.commons.MultiValueMap val$map>;

        $z0 = interfaceinvoke $r2.<org.wiztools.commons.MultiValueMap: boolean containsValue(java.lang.Object)>(r1);

        return $z0;
    }

    public java.util.Collection get(java.lang.Object)
    {
        org.wiztools.commons.CollectionsUtil$2 r0;
        java.util.Collection $r3, $r4;
        java.lang.Object r1;
        org.wiztools.commons.MultiValueMap $r2;

        r0 := @this: org.wiztools.commons.CollectionsUtil$2;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.wiztools.commons.CollectionsUtil$2: org.wiztools.commons.MultiValueMap val$map>;

        $r3 = interfaceinvoke $r2.<org.wiztools.commons.MultiValueMap: java.util.Collection get(java.lang.Object)>(r1);

        $r4 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>($r3);

        return $r4;
    }

    public boolean isEmpty()
    {
        org.wiztools.commons.CollectionsUtil$2 r0;
        org.wiztools.commons.MultiValueMap $r1;
        boolean $z0;

        r0 := @this: org.wiztools.commons.CollectionsUtil$2;

        $r1 = r0.<org.wiztools.commons.CollectionsUtil$2: org.wiztools.commons.MultiValueMap val$map>;

        $z0 = interfaceinvoke $r1.<org.wiztools.commons.MultiValueMap: boolean isEmpty()>();

        return $z0;
    }

    public java.util.Set keySet()
    {
        org.wiztools.commons.CollectionsUtil$2 r0;
        java.util.Set $r2, $r3;
        org.wiztools.commons.MultiValueMap $r1;

        r0 := @this: org.wiztools.commons.CollectionsUtil$2;

        $r1 = r0.<org.wiztools.commons.CollectionsUtil$2: org.wiztools.commons.MultiValueMap val$map>;

        $r2 = interfaceinvoke $r1.<org.wiztools.commons.MultiValueMap: java.util.Set keySet()>();

        $r3 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r2);

        return $r3;
    }

    public java.util.Collection put(java.lang.Object, java.lang.Object)
    {
        org.wiztools.commons.CollectionsUtil$2 r1;
        java.lang.UnsupportedOperationException $r0;
        java.lang.Object r2, r3;

        r1 := @this: org.wiztools.commons.CollectionsUtil$2;

        r2 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Object;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Not supported yet.");

        throw $r0;
    }

    public java.util.Collection remove(java.lang.Object)
    {
        org.wiztools.commons.CollectionsUtil$2 r1;
        java.lang.UnsupportedOperationException $r0;
        java.lang.Object r2;

        r1 := @this: org.wiztools.commons.CollectionsUtil$2;

        r2 := @parameter0: java.lang.Object;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Not supported yet.");

        throw $r0;
    }

    public int size()
    {
        org.wiztools.commons.CollectionsUtil$2 r0;
        int $i0;
        org.wiztools.commons.MultiValueMap $r1;

        r0 := @this: org.wiztools.commons.CollectionsUtil$2;

        $r1 = r0.<org.wiztools.commons.CollectionsUtil$2: org.wiztools.commons.MultiValueMap val$map>;

        $i0 = interfaceinvoke $r1.<org.wiztools.commons.MultiValueMap: int size()>();

        return $i0;
    }

    public java.util.Collection values()
    {
        org.wiztools.commons.CollectionsUtil$2 r0;
        java.util.Collection $r2, $r3;
        java.util.Set $r4, $r5;
        java.util.List $r6, $r7;
        org.wiztools.commons.MultiValueMap $r1;
        boolean $z0, $z1;

        r0 := @this: org.wiztools.commons.CollectionsUtil$2;

        $r1 = r0.<org.wiztools.commons.CollectionsUtil$2: org.wiztools.commons.MultiValueMap val$map>;

        $r2 = interfaceinvoke $r1.<org.wiztools.commons.MultiValueMap: java.util.Collection values()>();

        if $r2 != null goto label1;

        return null;

     label1:
        $z0 = $r2 instanceof java.util.List;

        if $z0 == 0 goto label2;

        $r6 = (java.util.List) $r2;

        $r7 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r6);

        return $r7;

     label2:
        $z1 = $r2 instanceof java.util.Set;

        if $z1 == 0 goto label3;

        $r4 = (java.util.Set) $r2;

        $r5 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r4);

        return $r5;

     label3:
        $r3 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>($r2);

        return $r3;
    }

    public boolean equals(java.lang.Object)
    {
        org.wiztools.commons.CollectionsUtil$2 r2;
        java.util.Collection $r7, $r8;
        java.util.Set $r4, $r5;
        java.lang.Object r0;
        org.wiztools.commons.MultiValueMap r1, $r3, $r6;
        boolean $z0, $z1, $z2;

        r2 := @this: org.wiztools.commons.CollectionsUtil$2;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        return 0;

     label1:
        $z0 = r0 instanceof org.wiztools.commons.MultiValueMap;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r1 = (org.wiztools.commons.MultiValueMap) r0;

        $r3 = r2.<org.wiztools.commons.CollectionsUtil$2: org.wiztools.commons.MultiValueMap val$map>;

        $r4 = interfaceinvoke $r3.<org.wiztools.commons.MultiValueMap: java.util.Set keySet()>();

        $r5 = interfaceinvoke r1.<org.wiztools.commons.MultiValueMap: java.util.Set keySet()>();

        if $r4 == $r5 goto label4;

        if $r4 == null goto label3;

        $z2 = interfaceinvoke $r4.<java.util.Set: boolean equals(java.lang.Object)>($r5);

        if $z2 != 0 goto label4;

     label3:
        return 0;

     label4:
        $r6 = r2.<org.wiztools.commons.CollectionsUtil$2: org.wiztools.commons.MultiValueMap val$map>;

        $r7 = interfaceinvoke $r6.<org.wiztools.commons.MultiValueMap: java.util.Collection values()>();

        $r8 = interfaceinvoke r1.<org.wiztools.commons.MultiValueMap: java.util.Collection values()>();

        if $r7 == $r8 goto label6;

        if $r7 == null goto label5;

        $z1 = interfaceinvoke $r7.<java.util.Collection: boolean equals(java.lang.Object)>($r8);

        if $z1 != 0 goto label6;

     label5:
        return 0;

     label6:
        return 1;
    }

    public int hashCode()
    {
        org.wiztools.commons.CollectionsUtil$2 r0;
        int $i0, $i1;
        org.wiztools.commons.MultiValueMap $r1, $r2;

        r0 := @this: org.wiztools.commons.CollectionsUtil$2;

        $r1 = r0.<org.wiztools.commons.CollectionsUtil$2: org.wiztools.commons.MultiValueMap val$map>;

        if $r1 == null goto label1;

        $r2 = r0.<org.wiztools.commons.CollectionsUtil$2: org.wiztools.commons.MultiValueMap val$map>;

        $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        goto label2;

     label1:
        $i1 = 0;

     label2:
        $i0 = 329 + $i1;

        return $i0;
    }

    public java.lang.String toString()
    {
        org.wiztools.commons.CollectionsUtil$2 r0;
        java.lang.String $r2;
        org.wiztools.commons.MultiValueMap $r1;

        r0 := @this: org.wiztools.commons.CollectionsUtil$2;

        $r1 = r0.<org.wiztools.commons.CollectionsUtil$2: org.wiztools.commons.MultiValueMap val$map>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }
}
