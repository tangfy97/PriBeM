public class org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker extends java.lang.Object
{
    private static final java.lang.String SELECTION_ANNOTATION_PREFIX;
    private static final java.lang.String LINKY_ANNOTATION;
    private static final java.lang.String SPELLY_ANNOTATION;
    private static final java.lang.String LANGUAGE_ANNOTATION;
    private static final java.lang.String ROSY_ANNOTATION;
    public static final java.lang.String THREAD_INLINE_ANCHOR_TAGNAME;
    private static final org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker$ReusableWorthyChangeChecker INSTANCE;
    private static final org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker$True TRUE;
    private static final org.waveprotocol.wave.model.document.operation.DocOpCursor CHECKER;

    private void <init>()
    {
        org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker r0;

        r0 := @this: org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static boolean isAnchor(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("reply");

        return $z0;
    }

    public static boolean isWorthy(org.waveprotocol.wave.model.document.operation.DocOp)
    {
        org.waveprotocol.wave.model.document.operation.DocOp r1;
        org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker$ReusableWorthyChangeChecker $r0;
        boolean $z0;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.DocOp;

        $r0 = staticinvoke <org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker: org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker$ReusableWorthyChangeChecker create()>();

        $z0 = interfaceinvoke $r0.<org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker$ReusableWorthyChangeChecker: boolean isWorthy(org.waveprotocol.wave.model.document.operation.DocOp)>(r1);

        return $z0;
    }

    public static org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker$ReusableWorthyChangeChecker create()
    {
        org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker$ReusableWorthyChangeChecker $r0;

        $r0 = <org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker: org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker$ReusableWorthyChangeChecker INSTANCE>;

        return $r0;
    }

    public static boolean isBlipIdWorthy(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("attach");

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("mini");

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("tr+");

        if $z2 != 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        return $z3;
    }

    static org.waveprotocol.wave.model.document.operation.DocOpCursor access$000()
    {
        org.waveprotocol.wave.model.document.operation.DocOpCursor $r0;

        $r0 = <org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker: org.waveprotocol.wave.model.document.operation.DocOpCursor CHECKER>;

        return $r0;
    }

    static org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker$True access$100()
    {
        org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker$True $r0;

        $r0 = <org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker: org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker$True TRUE>;

        return $r0;
    }

    static boolean access$200(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker: boolean isAnchor(java.lang.String)>(r0);

        return $z0;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker$2 $r2;
        org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker$1 $r0;
        org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker$True $r1;

        <org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker: java.lang.String THREAD_INLINE_ANCHOR_TAGNAME> = "reply";

        <org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker: java.lang.String ROSY_ANNOTATION> = "tr/1";

        <org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker: java.lang.String LANGUAGE_ANNOTATION> = "lang";

        <org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker: java.lang.String SPELLY_ANNOTATION> = "spell";

        <org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker: java.lang.String LINKY_ANNOTATION> = "link/auto";

        <org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker: java.lang.String SELECTION_ANNOTATION_PREFIX> = "user/";

        $r0 = new org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker$1;

        specialinvoke $r0.<org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker$1: void <init>()>();

        <org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker: org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker$ReusableWorthyChangeChecker INSTANCE> = $r0;

        $r1 = new org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker$True;

        specialinvoke $r1.<org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker$True: void <init>(java.lang.String)>("Preallocated exception with a meaningless stack trace");

        <org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker: org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker$True TRUE> = $r1;

        $r2 = new org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker$2;

        specialinvoke $r2.<org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker$2: void <init>()>();

        <org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker: org.waveprotocol.wave.model.document.operation.DocOpCursor CHECKER> = $r2;

        return;
    }
}
