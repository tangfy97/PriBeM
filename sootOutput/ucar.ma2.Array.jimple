public abstract class ucar.ma2.Array extends java.lang.Object
{
    protected final ucar.ma2.Index indexCalc;
    protected final int rank;
    protected boolean unsigned;
    private ucar.ma2.IndexIterator ii;

    public static ucar.ma2.Array factory(ucar.ma2.DataType, int[])
    {
        int[] r0;
        ucar.ma2.Index $r1;
        ucar.ma2.DataType r2;
        java.lang.Class $r3;
        ucar.ma2.Array $r4;

        r2 := @parameter0: ucar.ma2.DataType;

        r0 := @parameter1: int[];

        $r1 = staticinvoke <ucar.ma2.Index: ucar.ma2.Index factory(int[])>(r0);

        $r3 = virtualinvoke r2.<ucar.ma2.DataType: java.lang.Class getPrimitiveClassType()>();

        $r4 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,ucar.ma2.Index)>($r3, $r1);

        return $r4;
    }

    public static ucar.ma2.Array factory(java.lang.Class, int[])
    {
        int[] r0;
        ucar.ma2.Index $r1;
        java.lang.Class r2;
        ucar.ma2.Array $r3;

        r2 := @parameter0: java.lang.Class;

        r0 := @parameter1: int[];

        $r1 = staticinvoke <ucar.ma2.Index: ucar.ma2.Index factory(int[])>(r0);

        $r3 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,ucar.ma2.Index)>(r2, $r1);

        return $r3;
    }

    private static ucar.ma2.Array factory(java.lang.Class, ucar.ma2.Index)
    {
        ucar.ma2.ArrayByte $r13;
        ucar.ma2.ArrayFloat $r5;
        ucar.ma2.ArrayChar $r15;
        ucar.ma2.ArrayDouble $r3;
        ucar.ma2.ArrayInt $r9;
        ucar.ma2.ArrayObject $r18;
        ucar.ma2.ArrayShort $r11;
        ucar.ma2.ArrayBoolean $r17;
        ucar.ma2.Index r2;
        java.lang.Class r0, $r1, $r4, $r6, $r8, $r10, $r12, $r14, $r16;
        ucar.ma2.ArrayLong $r7;

        r0 := @parameter0: java.lang.Class;

        r2 := @parameter1: ucar.ma2.Index;

        $r1 = <java.lang.Double: java.lang.Class TYPE>;

        if r0 == $r1 goto label01;

        if r0 != class "Ljava/lang/Double;" goto label02;

     label01:
        $r3 = staticinvoke <ucar.ma2.ArrayDouble: ucar.ma2.ArrayDouble factory(ucar.ma2.Index)>(r2);

        return $r3;

     label02:
        $r4 = <java.lang.Float: java.lang.Class TYPE>;

        if r0 == $r4 goto label03;

        if r0 != class "Ljava/lang/Float;" goto label04;

     label03:
        $r5 = staticinvoke <ucar.ma2.ArrayFloat: ucar.ma2.ArrayFloat factory(ucar.ma2.Index)>(r2);

        return $r5;

     label04:
        $r6 = <java.lang.Long: java.lang.Class TYPE>;

        if r0 == $r6 goto label05;

        if r0 != class "Ljava/lang/Long;" goto label06;

     label05:
        $r7 = staticinvoke <ucar.ma2.ArrayLong: ucar.ma2.ArrayLong factory(ucar.ma2.Index)>(r2);

        return $r7;

     label06:
        $r8 = <java.lang.Integer: java.lang.Class TYPE>;

        if r0 == $r8 goto label07;

        if r0 != class "Ljava/lang/Integer;" goto label08;

     label07:
        $r9 = staticinvoke <ucar.ma2.ArrayInt: ucar.ma2.ArrayInt factory(ucar.ma2.Index)>(r2);

        return $r9;

     label08:
        $r10 = <java.lang.Short: java.lang.Class TYPE>;

        if r0 == $r10 goto label09;

        if r0 != class "Ljava/lang/Short;" goto label10;

     label09:
        $r11 = staticinvoke <ucar.ma2.ArrayShort: ucar.ma2.ArrayShort factory(ucar.ma2.Index)>(r2);

        return $r11;

     label10:
        $r12 = <java.lang.Byte: java.lang.Class TYPE>;

        if r0 == $r12 goto label11;

        if r0 != class "Ljava/lang/Byte;" goto label12;

     label11:
        $r13 = staticinvoke <ucar.ma2.ArrayByte: ucar.ma2.ArrayByte factory(ucar.ma2.Index)>(r2);

        return $r13;

     label12:
        $r14 = <java.lang.Character: java.lang.Class TYPE>;

        if r0 == $r14 goto label13;

        if r0 != class "Ljava/lang/Character;" goto label14;

     label13:
        $r15 = staticinvoke <ucar.ma2.ArrayChar: ucar.ma2.ArrayChar factory(ucar.ma2.Index)>(r2);

        return $r15;

     label14:
        $r16 = <java.lang.Boolean: java.lang.Class TYPE>;

        if r0 == $r16 goto label15;

        if r0 != class "Ljava/lang/Boolean;" goto label16;

     label15:
        $r17 = staticinvoke <ucar.ma2.ArrayBoolean: ucar.ma2.ArrayBoolean factory(ucar.ma2.Index)>(r2);

        return $r17;

     label16:
        $r18 = staticinvoke <ucar.ma2.ArrayObject: ucar.ma2.ArrayObject factory(java.lang.Class,ucar.ma2.Index)>(r0, r2);

        return $r18;
    }

    public static ucar.ma2.Array factory(ucar.ma2.DataType, int[], java.lang.Object)
    {
        int[] r2;
        ucar.ma2.DataType r0;
        java.lang.Class $r1;
        java.lang.Object r3;
        ucar.ma2.Array $r4;

        r0 := @parameter0: ucar.ma2.DataType;

        r2 := @parameter1: int[];

        r3 := @parameter2: java.lang.Object;

        $r1 = virtualinvoke r0.<ucar.ma2.DataType: java.lang.Class getPrimitiveClassType()>();

        $r4 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[],java.lang.Object)>($r1, r2, r3);

        return $r4;
    }

    public static ucar.ma2.Array factory(java.lang.Class, int[], java.lang.Object)
    {
        int[] r0;
        ucar.ma2.Index $r1;
        java.lang.Class r2;
        java.lang.Object r3;
        ucar.ma2.Array $r4;

        r2 := @parameter0: java.lang.Class;

        r0 := @parameter1: int[];

        r3 := @parameter2: java.lang.Object;

        $r1 = staticinvoke <ucar.ma2.Index: ucar.ma2.Index factory(int[])>(r0);

        $r4 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,ucar.ma2.Index,java.lang.Object)>(r2, $r1, r3);

        return $r4;
    }

    private static ucar.ma2.Array factory(java.lang.Class, ucar.ma2.Index, java.lang.Object)
    {
        byte[] $r24, $r25;
        ucar.ma2.ArrayByte $r26;
        ucar.ma2.ArrayFloat $r10;
        int[] $r16, $r17;
        ucar.ma2.ArrayInt $r18;
        short[] $r20, $r21;
        ucar.ma2.ArrayLong $r14;
        java.lang.Object[] $r35, $r36;
        double[] $r4, $r5;
        float[] $r8, $r9;
        long[] $r12, $r13;
        ucar.ma2.ArrayChar $r30;
        ucar.ma2.ArrayDouble $r6;
        ucar.ma2.ArrayObject $r37;
        ucar.ma2.ArrayShort $r22;
        boolean[] $r32, $r33;
        ucar.ma2.ArrayBoolean $r34;
        ucar.ma2.Index r2;
        char[] $r28, $r29;
        java.lang.Class r0, $r1, $r7, $r11, $r15, $r19, $r23, $r27, $r31;
        java.lang.Object r3;

        r0 := @parameter0: java.lang.Class;

        r2 := @parameter1: ucar.ma2.Index;

        r3 := @parameter2: java.lang.Object;

        $r1 = <java.lang.Double: java.lang.Class TYPE>;

        if r0 == $r1 goto label01;

        if r0 != class "Ljava/lang/Double;" goto label02;

     label01:
        $r4 = (double[]) r3;

        $r5 = (double[]) $r4;

        $r6 = staticinvoke <ucar.ma2.ArrayDouble: ucar.ma2.ArrayDouble factory(ucar.ma2.Index,double[])>(r2, $r5);

        return $r6;

     label02:
        $r7 = <java.lang.Float: java.lang.Class TYPE>;

        if r0 == $r7 goto label03;

        if r0 != class "Ljava/lang/Float;" goto label04;

     label03:
        $r8 = (float[]) r3;

        $r9 = (float[]) $r8;

        $r10 = staticinvoke <ucar.ma2.ArrayFloat: ucar.ma2.ArrayFloat factory(ucar.ma2.Index,float[])>(r2, $r9);

        return $r10;

     label04:
        $r11 = <java.lang.Long: java.lang.Class TYPE>;

        if r0 == $r11 goto label05;

        if r0 != class "Ljava/lang/Long;" goto label06;

     label05:
        $r12 = (long[]) r3;

        $r13 = (long[]) $r12;

        $r14 = staticinvoke <ucar.ma2.ArrayLong: ucar.ma2.ArrayLong factory(ucar.ma2.Index,long[])>(r2, $r13);

        return $r14;

     label06:
        $r15 = <java.lang.Integer: java.lang.Class TYPE>;

        if r0 == $r15 goto label07;

        if r0 != class "Ljava/lang/Integer;" goto label08;

     label07:
        $r16 = (int[]) r3;

        $r17 = (int[]) $r16;

        $r18 = staticinvoke <ucar.ma2.ArrayInt: ucar.ma2.ArrayInt factory(ucar.ma2.Index,int[])>(r2, $r17);

        return $r18;

     label08:
        $r19 = <java.lang.Short: java.lang.Class TYPE>;

        if r0 == $r19 goto label09;

        if r0 != class "Ljava/lang/Short;" goto label10;

     label09:
        $r20 = (short[]) r3;

        $r21 = (short[]) $r20;

        $r22 = staticinvoke <ucar.ma2.ArrayShort: ucar.ma2.ArrayShort factory(ucar.ma2.Index,short[])>(r2, $r21);

        return $r22;

     label10:
        $r23 = <java.lang.Byte: java.lang.Class TYPE>;

        if r0 == $r23 goto label11;

        if r0 != class "Ljava/lang/Byte;" goto label12;

     label11:
        $r24 = (byte[]) r3;

        $r25 = (byte[]) $r24;

        $r26 = staticinvoke <ucar.ma2.ArrayByte: ucar.ma2.ArrayByte factory(ucar.ma2.Index,byte[])>(r2, $r25);

        return $r26;

     label12:
        $r27 = <java.lang.Character: java.lang.Class TYPE>;

        if r0 == $r27 goto label13;

        if r0 != class "Ljava/lang/Character;" goto label14;

     label13:
        $r28 = (char[]) r3;

        $r29 = (char[]) $r28;

        $r30 = staticinvoke <ucar.ma2.ArrayChar: ucar.ma2.ArrayChar factory(ucar.ma2.Index,char[])>(r2, $r29);

        return $r30;

     label14:
        $r31 = <java.lang.Boolean: java.lang.Class TYPE>;

        if r0 == $r31 goto label15;

        if r0 != class "Ljava/lang/Boolean;" goto label16;

     label15:
        $r32 = (boolean[]) r3;

        $r33 = (boolean[]) $r32;

        $r34 = staticinvoke <ucar.ma2.ArrayBoolean: ucar.ma2.ArrayBoolean factory(ucar.ma2.Index,boolean[])>(r2, $r33);

        return $r34;

     label16:
        $r35 = (java.lang.Object[]) r3;

        $r36 = (java.lang.Object[]) $r35;

        $r37 = staticinvoke <ucar.ma2.ArrayObject: ucar.ma2.ArrayObject factory(java.lang.Class,ucar.ma2.Index,java.lang.Object[])>(r0, r2, $r36);

        return $r37;
    }

    public static ucar.ma2.Array factoryConstant(java.lang.Class, int[], java.lang.Object)
    {
        byte[] $r26, $r27;
        ucar.ma2.ArrayByte $r25;
        ucar.ma2.ArrayFloat $r9;
        int[] r1, $r18, $r19;
        ucar.ma2.ArrayInt $r17;
        ucar.ma2.IndexConstant $r0;
        short[] $r22, $r23;
        ucar.ma2.ArrayLong $r13;
        java.lang.Object[] $r37, $r38;
        double[] $r6, $r7;
        float[] $r10, $r11;
        long[] $r14, $r15;
        ucar.ma2.ArrayChar $r29;
        ucar.ma2.ArrayDouble $r4;
        ucar.ma2.ArrayObject $r36;
        ucar.ma2.ArrayShort $r21;
        boolean[] $r34, $r35;
        ucar.ma2.ArrayBoolean $r33;
        char[] $r30, $r31;
        java.lang.Class r2, $r3, $r8, $r12, $r16, $r20, $r24, $r28, $r32;
        java.lang.Object r5;

        r2 := @parameter0: java.lang.Class;

        r1 := @parameter1: int[];

        r5 := @parameter2: java.lang.Object;

        $r0 = new ucar.ma2.IndexConstant;

        specialinvoke $r0.<ucar.ma2.IndexConstant: void <init>(int[])>(r1);

        $r3 = <java.lang.Double: java.lang.Class TYPE>;

        if r2 == $r3 goto label01;

        if r2 != class "Ljava/lang/Double;" goto label02;

     label01:
        $r4 = new ucar.ma2.ArrayDouble;

        $r6 = (double[]) r5;

        $r7 = (double[]) $r6;

        specialinvoke $r4.<ucar.ma2.ArrayDouble: void <init>(ucar.ma2.Index,double[])>($r0, $r7);

        return $r4;

     label02:
        $r8 = <java.lang.Float: java.lang.Class TYPE>;

        if r2 == $r8 goto label03;

        if r2 != class "Ljava/lang/Float;" goto label04;

     label03:
        $r9 = new ucar.ma2.ArrayFloat;

        $r10 = (float[]) r5;

        $r11 = (float[]) $r10;

        specialinvoke $r9.<ucar.ma2.ArrayFloat: void <init>(ucar.ma2.Index,float[])>($r0, $r11);

        return $r9;

     label04:
        $r12 = <java.lang.Long: java.lang.Class TYPE>;

        if r2 == $r12 goto label05;

        if r2 != class "Ljava/lang/Long;" goto label06;

     label05:
        $r13 = new ucar.ma2.ArrayLong;

        $r14 = (long[]) r5;

        $r15 = (long[]) $r14;

        specialinvoke $r13.<ucar.ma2.ArrayLong: void <init>(ucar.ma2.Index,long[])>($r0, $r15);

        return $r13;

     label06:
        $r16 = <java.lang.Integer: java.lang.Class TYPE>;

        if r2 == $r16 goto label07;

        if r2 != class "Ljava/lang/Integer;" goto label08;

     label07:
        $r17 = new ucar.ma2.ArrayInt;

        $r18 = (int[]) r5;

        $r19 = (int[]) $r18;

        specialinvoke $r17.<ucar.ma2.ArrayInt: void <init>(ucar.ma2.Index,int[])>($r0, $r19);

        return $r17;

     label08:
        $r20 = <java.lang.Short: java.lang.Class TYPE>;

        if r2 == $r20 goto label09;

        if r2 != class "Ljava/lang/Short;" goto label10;

     label09:
        $r21 = new ucar.ma2.ArrayShort;

        $r22 = (short[]) r5;

        $r23 = (short[]) $r22;

        specialinvoke $r21.<ucar.ma2.ArrayShort: void <init>(ucar.ma2.Index,short[])>($r0, $r23);

        return $r21;

     label10:
        $r24 = <java.lang.Byte: java.lang.Class TYPE>;

        if r2 == $r24 goto label11;

        if r2 != class "Ljava/lang/Byte;" goto label12;

     label11:
        $r25 = new ucar.ma2.ArrayByte;

        $r26 = (byte[]) r5;

        $r27 = (byte[]) $r26;

        specialinvoke $r25.<ucar.ma2.ArrayByte: void <init>(ucar.ma2.Index,byte[])>($r0, $r27);

        return $r25;

     label12:
        $r28 = <java.lang.Character: java.lang.Class TYPE>;

        if r2 == $r28 goto label13;

        if r2 != class "Ljava/lang/Character;" goto label14;

     label13:
        $r29 = new ucar.ma2.ArrayChar;

        $r30 = (char[]) r5;

        $r31 = (char[]) $r30;

        specialinvoke $r29.<ucar.ma2.ArrayChar: void <init>(ucar.ma2.Index,char[])>($r0, $r31);

        return $r29;

     label14:
        $r32 = <java.lang.Boolean: java.lang.Class TYPE>;

        if r2 == $r32 goto label15;

        if r2 != class "Ljava/lang/Boolean;" goto label16;

     label15:
        $r33 = new ucar.ma2.ArrayBoolean;

        $r34 = (boolean[]) r5;

        $r35 = (boolean[]) $r34;

        specialinvoke $r33.<ucar.ma2.ArrayBoolean: void <init>(ucar.ma2.Index,boolean[])>($r0, $r35);

        return $r33;

     label16:
        $r36 = new ucar.ma2.ArrayObject;

        $r37 = (java.lang.Object[]) r5;

        $r38 = (java.lang.Object[]) $r37;

        specialinvoke $r36.<ucar.ma2.ArrayObject: void <init>(java.lang.Class,ucar.ma2.Index,java.lang.Object[])>(r2, $r0, $r38);

        return $r36;
    }

    public static ucar.ma2.Array factory(java.lang.Object)
    {
        ucar.ma2.IndexIterator $r3;
        ucar.ma2.Array $r2;
        int[] r1;
        int $i0, $i1, i2, i3;
        java.lang.Object r0, $r4, r6;
        java.lang.Class r5, r7;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Object;

        i2 = 0;

        r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

     label1:
        $z0 = virtualinvoke r5.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label2;

        i2 = i2 + 1;

        r5 = virtualinvoke r5.<java.lang.Class: java.lang.Class getComponentType()>();

        goto label1;

     label2:
        i3 = 0;

        r1 = newarray (int)[i2];

        r6 = r0;

        r7 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

     label3:
        $z1 = virtualinvoke r7.<java.lang.Class: boolean isArray()>();

        if $z1 == 0 goto label4;

        $i0 = i3;

        i3 = i3 + 1;

        $i1 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(r6);

        r1[$i0] = $i1;

        $r4 = staticinvoke <java.lang.reflect.Array: java.lang.Object get(java.lang.Object,int)>(r6, 0);

        r6 = $r4;

        r7 = virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();

        goto label3;

     label4:
        $r2 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[])>(r5, r1);

        $r3 = virtualinvoke $r2.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

        staticinvoke <ucar.ma2.Array: void reflectArrayCopyIn(java.lang.Object,ucar.ma2.Array,ucar.ma2.IndexIterator)>(r0, $r2, $r3);

        return $r2;
    }

    private static void reflectArrayCopyIn(java.lang.Object, ucar.ma2.Array, ucar.ma2.IndexIterator)
    {
        ucar.ma2.IndexIterator r5;
        ucar.ma2.Array r4;
        int $i0, i1;
        java.lang.Object r0, $r3;
        java.lang.Class $r1, $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        r4 := @parameter1: ucar.ma2.Array;

        r5 := @parameter2: ucar.ma2.IndexIterator;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.Class getComponentType()>();

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isPrimitive()>();

        if $z0 == 0 goto label1;

        virtualinvoke r4.<ucar.ma2.Array: void copyFrom1DJavaArray(ucar.ma2.IndexIterator,java.lang.Object)>(r5, r0);

        goto label3;

     label1:
        i1 = 0;

     label2:
        $i0 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(r0);

        if i1 >= $i0 goto label3;

        $r3 = staticinvoke <java.lang.reflect.Array: java.lang.Object get(java.lang.Object,int)>(r0, i1);

        staticinvoke <ucar.ma2.Array: void reflectArrayCopyIn(java.lang.Object,ucar.ma2.Array,ucar.ma2.IndexIterator)>($r3, r4, r5);

        i1 = i1 + 1;

        goto label2;

     label3:
        return;
    }

    private static void reflectArrayCopyOut(java.lang.Object, ucar.ma2.Array, ucar.ma2.IndexIterator)
    {
        ucar.ma2.IndexIterator r5;
        ucar.ma2.Array r4;
        int $i0, i1;
        java.lang.Object r0, $r3;
        java.lang.Class $r1, $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        r4 := @parameter1: ucar.ma2.Array;

        r5 := @parameter2: ucar.ma2.IndexIterator;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.Class getComponentType()>();

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isPrimitive()>();

        if $z0 == 0 goto label1;

        virtualinvoke r4.<ucar.ma2.Array: void copyTo1DJavaArray(ucar.ma2.IndexIterator,java.lang.Object)>(r5, r0);

        goto label3;

     label1:
        i1 = 0;

     label2:
        $i0 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(r0);

        if i1 >= $i0 goto label3;

        $r3 = staticinvoke <java.lang.reflect.Array: java.lang.Object get(java.lang.Object,int)>(r0, i1);

        staticinvoke <ucar.ma2.Array: void reflectArrayCopyOut(java.lang.Object,ucar.ma2.Array,ucar.ma2.IndexIterator)>($r3, r4, r5);

        i1 = i1 + 1;

        goto label2;

     label3:
        return;
    }

    public static void arraycopy(ucar.ma2.Array, int, ucar.ma2.Array, int, int)
    {
        java.lang.ArrayIndexOutOfBoundsException $r5;
        ucar.ma2.Array r0, r3;
        int i0, i1, i2, $i3, i4;
        java.lang.Class $r1;
        java.lang.Object $r2, $r4;
        boolean $z0;
        double $d0;

        r0 := @parameter0: ucar.ma2.Array;

        i0 := @parameter1: int;

        r3 := @parameter2: ucar.ma2.Array;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        $z0 = virtualinvoke r0.<ucar.ma2.Array: boolean isConstant()>();

        if $z0 == 0 goto label3;

        $d0 = virtualinvoke r0.<ucar.ma2.Array: double getDouble(int)>(0);

        i4 = i1;

     label1:
        $i3 = i1 + i2;

        if i4 >= $i3 goto label2;

        virtualinvoke r3.<ucar.ma2.Array: void setDouble(int,double)>(i4, $d0);

        i4 = i4 + 1;

        goto label1;

     label2:
        return;

     label3:
        $r1 = virtualinvoke r0.<ucar.ma2.Array: java.lang.Class getElementType()>();

        $r2 = virtualinvoke r0.<ucar.ma2.Array: java.lang.Object get1DJavaArray(java.lang.Class)>($r1);

        $r4 = virtualinvoke r3.<ucar.ma2.Array: java.lang.Object getStorage()>();

     label4:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, i0, $r4, i1, i2);

     label5:
        goto label7;

     label6:
        $r5 := @caughtexception;

        throw $r5;

     label7:
        return;

        catch java.lang.ArrayIndexOutOfBoundsException from label4 to label5 with label6;
    }

    public static ucar.ma2.Array makeArray(ucar.ma2.DataType, int, double, double)
    {
        ucar.ma2.IndexIterator $r4;
        ucar.ma2.DataType r0;
        ucar.ma2.Array $r3;
        int[] $r2;
        int i0, i1;
        java.lang.Class $r1;
        double d0, d1, $d2, $d3, d4;

        r0 := @parameter0: ucar.ma2.DataType;

        i0 := @parameter1: int;

        d0 := @parameter2: double;

        d1 := @parameter3: double;

        $r1 = virtualinvoke r0.<ucar.ma2.DataType: java.lang.Class getPrimitiveClassType()>();

        $r2 = newarray (int)[1];

        $r2[0] = i0;

        $r3 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[])>($r1, $r2);

        $r4 = virtualinvoke $r3.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $d2 = (double) i1;

        $d3 = $d2 * d1;

        d4 = d0 + $d3;

        interfaceinvoke $r4.<ucar.ma2.IndexIterator: void setDoubleNext(double)>(d4);

        i1 = i1 + 1;

        goto label1;

     label2:
        return $r3;
    }

    public static ucar.ma2.Array makeArray(ucar.ma2.DataType, java.util.List) throws java.lang.NumberFormatException
    {
        java.util.Iterator $r6;
        ucar.ma2.IndexIterator $r5;
        ucar.ma2.DataType r0, $r9, $r10;
        long $l1;
        ucar.ma2.Array $r4;
        java.util.List r3;
        int[] $r2;
        int $i0;
        java.lang.Class $r1;
        java.lang.Object $r7;
        java.lang.String r8;
        boolean $z0;
        double $d0;

        r0 := @parameter0: ucar.ma2.DataType;

        r3 := @parameter1: java.util.List;

        $r1 = virtualinvoke r0.<ucar.ma2.DataType: java.lang.Class getPrimitiveClassType()>();

        $r2 = newarray (int)[1];

        $i0 = interfaceinvoke r3.<java.util.List: int size()>();

        $r2[0] = $i0;

        $r4 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[])>($r1, $r2);

        $r5 = virtualinvoke $r4.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

        $r6 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.lang.String) $r7;

        $r9 = <ucar.ma2.DataType: ucar.ma2.DataType STRING>;

        if r0 != $r9 goto label2;

        interfaceinvoke $r5.<ucar.ma2.IndexIterator: void setObjectNext(java.lang.Object)>(r8);

        goto label4;

     label2:
        $r10 = <ucar.ma2.DataType: ucar.ma2.DataType LONG>;

        if r0 != $r10 goto label3;

        $l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r8);

        interfaceinvoke $r5.<ucar.ma2.IndexIterator: void setLongNext(long)>($l1);

        goto label4;

     label3:
        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r8);

        interfaceinvoke $r5.<ucar.ma2.IndexIterator: void setDoubleNext(double)>($d0);

     label4:
        goto label1;

     label5:
        return $r4;
    }

    public static ucar.ma2.Array makeArray(ucar.ma2.DataType, java.lang.String[]) throws java.lang.NumberFormatException
    {
        ucar.ma2.IndexIterator $r5;
        ucar.ma2.DataType r0, $r7, $r8;
        java.lang.String[] r3;
        long $l2;
        ucar.ma2.Array $r4;
        int[] $r2;
        int $i0, i1, i3;
        java.lang.Class $r1;
        java.lang.String r6;
        double $d0;

        r0 := @parameter0: ucar.ma2.DataType;

        r3 := @parameter1: java.lang.String[];

        $r1 = virtualinvoke r0.<ucar.ma2.DataType: java.lang.Class getPrimitiveClassType()>();

        $r2 = newarray (int)[1];

        $i0 = lengthof r3;

        $r2[0] = $i0;

        $r4 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[])>($r1, $r2);

        $r5 = virtualinvoke $r4.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

        i1 = lengthof r3;

        i3 = 0;

     label1:
        if i3 >= i1 goto label5;

        r6 = r3[i3];

        $r7 = <ucar.ma2.DataType: ucar.ma2.DataType STRING>;

        if r0 != $r7 goto label2;

        interfaceinvoke $r5.<ucar.ma2.IndexIterator: void setObjectNext(java.lang.Object)>(r6);

        goto label4;

     label2:
        $r8 = <ucar.ma2.DataType: ucar.ma2.DataType LONG>;

        if r0 != $r8 goto label3;

        $l2 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r6);

        interfaceinvoke $r5.<ucar.ma2.IndexIterator: void setLongNext(long)>($l2);

        goto label4;

     label3:
        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r6);

        interfaceinvoke $r5.<ucar.ma2.IndexIterator: void setDoubleNext(double)>($d0);

     label4:
        i3 = i3 + 1;

        goto label1;

     label5:
        return $r4;
    }

    protected void <init>(int[])
    {
        int[] r1;
        ucar.ma2.Index $r2;
        int $i0;
        ucar.ma2.Array r0;

        r0 := @this: ucar.ma2.Array;

        r1 := @parameter0: int[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = lengthof r1;

        r0.<ucar.ma2.Array: int rank> = $i0;

        $r2 = staticinvoke <ucar.ma2.Index: ucar.ma2.Index factory(int[])>(r1);

        r0.<ucar.ma2.Array: ucar.ma2.Index indexCalc> = $r2;

        return;
    }

    protected void <init>(ucar.ma2.Index)
    {
        int $i0;
        ucar.ma2.Array r0;
        ucar.ma2.Index r1;

        r0 := @this: ucar.ma2.Array;

        r1 := @parameter0: ucar.ma2.Index;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = virtualinvoke r1.<ucar.ma2.Index: int getRank()>();

        r0.<ucar.ma2.Array: int rank> = $i0;

        r0.<ucar.ma2.Array: ucar.ma2.Index indexCalc> = r1;

        return;
    }

    public ucar.ma2.Index getIndex()
    {
        ucar.ma2.Index $r1, $r3;
        java.lang.Object $r2;
        ucar.ma2.Array r0;

        r0 := @this: ucar.ma2.Array;

        $r1 = r0.<ucar.ma2.Array: ucar.ma2.Index indexCalc>;

        $r2 = virtualinvoke $r1.<ucar.ma2.Index: java.lang.Object clone()>();

        $r3 = (ucar.ma2.Index) $r2;

        return $r3;
    }

    public ucar.ma2.Index getIndexPrivate()
    {
        ucar.ma2.Array r0;
        ucar.ma2.Index $r1;

        r0 := @this: ucar.ma2.Array;

        $r1 = r0.<ucar.ma2.Array: ucar.ma2.Index indexCalc>;

        return $r1;
    }

    public ucar.ma2.IndexIterator getIndexIterator()
    {
        ucar.ma2.Array r0;
        ucar.ma2.Index $r1;
        ucar.ma2.IndexIterator $r2;

        r0 := @this: ucar.ma2.Array;

        $r1 = r0.<ucar.ma2.Array: ucar.ma2.Index indexCalc>;

        $r2 = virtualinvoke $r1.<ucar.ma2.Index: ucar.ma2.IndexIterator getIndexIterator(ucar.ma2.Array)>(r0);

        return $r2;
    }

    public int getRank()
    {
        int $i0;
        ucar.ma2.Array r0;

        r0 := @this: ucar.ma2.Array;

        $i0 = r0.<ucar.ma2.Array: int rank>;

        return $i0;
    }

    public int[] getShape()
    {
        ucar.ma2.Array r0;
        ucar.ma2.Index $r1;
        int[] $r2;

        r0 := @this: ucar.ma2.Array;

        $r1 = r0.<ucar.ma2.Array: ucar.ma2.Index indexCalc>;

        $r2 = virtualinvoke $r1.<ucar.ma2.Index: int[] getShape()>();

        return $r2;
    }

    public long getSize()
    {
        long $l0;
        ucar.ma2.Array r0;
        ucar.ma2.Index $r1;

        r0 := @this: ucar.ma2.Array;

        $r1 = r0.<ucar.ma2.Array: ucar.ma2.Index indexCalc>;

        $l0 = virtualinvoke $r1.<ucar.ma2.Index: long getSize()>();

        return $l0;
    }

    public long getSizeBytes()
    {
        ucar.ma2.DataType $r2;
        long $l0, $l2, $l3;
        ucar.ma2.Array r0;
        ucar.ma2.Index $r3;
        int $i1;
        java.lang.Class $r1;

        r0 := @this: ucar.ma2.Array;

        $r1 = virtualinvoke r0.<ucar.ma2.Array: java.lang.Class getElementType()>();

        $r2 = staticinvoke <ucar.ma2.DataType: ucar.ma2.DataType getType(java.lang.Class)>($r1);

        $r3 = r0.<ucar.ma2.Array: ucar.ma2.Index indexCalc>;

        $l0 = virtualinvoke $r3.<ucar.ma2.Index: long getSize()>();

        $i1 = virtualinvoke $r2.<ucar.ma2.DataType: int getSize()>();

        $l2 = (long) $i1;

        $l3 = $l0 * $l2;

        return $l3;
    }

    public ucar.ma2.IndexIterator getRangeIterator(java.util.List) throws ucar.ma2.InvalidRangeException
    {
        java.util.List r1;
        ucar.ma2.IndexIterator $r3;
        ucar.ma2.Array r0, $r2;

        r0 := @this: ucar.ma2.Array;

        r1 := @parameter0: java.util.List;

        $r2 = virtualinvoke r0.<ucar.ma2.Array: ucar.ma2.Array section(java.util.List)>(r1);

        $r3 = virtualinvoke $r2.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

        return $r3;
    }

    public ucar.ma2.IndexIterator getIndexIteratorFast()
    {
        ucar.ma2.Array r0;
        ucar.ma2.Index $r1;
        ucar.ma2.IteratorFast $r2;

        r0 := @this: ucar.ma2.Array;

        $r1 = r0.<ucar.ma2.Array: ucar.ma2.Index indexCalc>;

        $r2 = virtualinvoke $r1.<ucar.ma2.Index: ucar.ma2.IteratorFast getIndexIteratorFast(ucar.ma2.Array)>(r0);

        return $r2;
    }

    public abstract java.lang.Class getElementType();

    abstract ucar.ma2.Array createView(ucar.ma2.Index);

    public abstract java.lang.Object getStorage();

    abstract void copyFrom1DJavaArray(ucar.ma2.IndexIterator, java.lang.Object);

    abstract void copyTo1DJavaArray(ucar.ma2.IndexIterator, java.lang.Object);

    public ucar.ma2.Array section(java.util.List) throws ucar.ma2.InvalidRangeException
    {
        java.util.List r1;
        ucar.ma2.Index $r2, $r3;
        ucar.ma2.Array r0, $r4;

        r0 := @this: ucar.ma2.Array;

        r1 := @parameter0: java.util.List;

        $r2 = r0.<ucar.ma2.Array: ucar.ma2.Index indexCalc>;

        $r3 = virtualinvoke $r2.<ucar.ma2.Index: ucar.ma2.Index section(java.util.List)>(r1);

        $r4 = virtualinvoke r0.<ucar.ma2.Array: ucar.ma2.Array createView(ucar.ma2.Index)>($r3);

        return $r4;
    }

    public ucar.ma2.Array section(int[], int[]) throws ucar.ma2.InvalidRangeException
    {
        int[] r1, r2;
        ucar.ma2.Array r0, $r3;

        r0 := @this: ucar.ma2.Array;

        r1 := @parameter0: int[];

        r2 := @parameter1: int[];

        $r3 = virtualinvoke r0.<ucar.ma2.Array: ucar.ma2.Array section(int[],int[],int[])>(r1, r2, null);

        return $r3;
    }

    public ucar.ma2.Array section(int[], int[], int[]) throws ucar.ma2.InvalidRangeException
    {
        java.util.ArrayList $r0;
        int[] r1, r7, r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12, $i13;
        ucar.ma2.Range $r6;
        ucar.ma2.Array r2, $r5;
        ucar.ma2.Index $r3, $r4;

        r2 := @this: ucar.ma2.Array;

        r1 := @parameter0: int[];

        r7 := @parameter1: int[];

        r8 := @parameter2: int[];

        $r0 = new java.util.ArrayList;

        $i0 = lengthof r1;

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>($i0);

        if r8 != null goto label2;

        $i9 = lengthof r1;

        r8 = newarray (int)[$i9];

        i11 = 0;

     label1:
        $i10 = lengthof r8;

        if i11 >= $i10 goto label2;

        r8[i11] = 1;

        i11 = i11 + 1;

        goto label1;

     label2:
        i12 = 0;

     label3:
        $i13 = lengthof r1;

        if i12 >= $i13 goto label4;

        $r6 = new ucar.ma2.Range;

        $i8 = r1[i12];

        $i4 = r1[i12];

        $i2 = r8[i12];

        $i1 = r7[i12];

        $i3 = $i2 * $i1;

        $i5 = $i4 + $i3;

        $i7 = $i5 - 1;

        $i6 = r8[i12];

        specialinvoke $r6.<ucar.ma2.Range: void <init>(int,int,int)>($i8, $i7, $i6);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r6);

        i12 = i12 + 1;

        goto label3;

     label4:
        $r3 = r2.<ucar.ma2.Array: ucar.ma2.Index indexCalc>;

        $r4 = virtualinvoke $r3.<ucar.ma2.Index: ucar.ma2.Index section(java.util.List)>($r0);

        $r5 = virtualinvoke r2.<ucar.ma2.Array: ucar.ma2.Array createView(ucar.ma2.Index)>($r4);

        return $r5;
    }

    public ucar.ma2.Array sectionNoReduce(java.util.List) throws ucar.ma2.InvalidRangeException
    {
        java.util.List r1;
        ucar.ma2.Index $r2, $r3;
        ucar.ma2.Array r0, $r4;

        r0 := @this: ucar.ma2.Array;

        r1 := @parameter0: java.util.List;

        $r2 = r0.<ucar.ma2.Array: ucar.ma2.Index indexCalc>;

        $r3 = virtualinvoke $r2.<ucar.ma2.Index: ucar.ma2.Index sectionNoReduce(java.util.List)>(r1);

        $r4 = virtualinvoke r0.<ucar.ma2.Array: ucar.ma2.Array createView(ucar.ma2.Index)>($r3);

        return $r4;
    }

    public ucar.ma2.Array sectionNoReduce(int[], int[], int[]) throws ucar.ma2.InvalidRangeException
    {
        java.util.ArrayList $r0;
        int[] r1, r7, r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12, $i13;
        ucar.ma2.Range $r6;
        ucar.ma2.Array r2, $r5;
        ucar.ma2.Index $r3, $r4;

        r2 := @this: ucar.ma2.Array;

        r1 := @parameter0: int[];

        r7 := @parameter1: int[];

        r8 := @parameter2: int[];

        $r0 = new java.util.ArrayList;

        $i0 = lengthof r1;

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>($i0);

        if r8 != null goto label2;

        $i9 = lengthof r1;

        r8 = newarray (int)[$i9];

        i11 = 0;

     label1:
        $i10 = lengthof r8;

        if i11 >= $i10 goto label2;

        r8[i11] = 1;

        i11 = i11 + 1;

        goto label1;

     label2:
        i12 = 0;

     label3:
        $i13 = lengthof r1;

        if i12 >= $i13 goto label4;

        $r6 = new ucar.ma2.Range;

        $i8 = r1[i12];

        $i4 = r1[i12];

        $i2 = r8[i12];

        $i1 = r7[i12];

        $i3 = $i2 * $i1;

        $i5 = $i4 + $i3;

        $i7 = $i5 - 1;

        $i6 = r8[i12];

        specialinvoke $r6.<ucar.ma2.Range: void <init>(int,int,int)>($i8, $i7, $i6);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r6);

        i12 = i12 + 1;

        goto label3;

     label4:
        $r3 = r2.<ucar.ma2.Array: ucar.ma2.Index indexCalc>;

        $r4 = virtualinvoke $r3.<ucar.ma2.Index: ucar.ma2.Index sectionNoReduce(java.util.List)>($r0);

        $r5 = virtualinvoke r2.<ucar.ma2.Array: ucar.ma2.Array createView(ucar.ma2.Index)>($r4);

        return $r5;
    }

    public ucar.ma2.Array slice(int, int)
    {
        java.lang.IllegalArgumentException $r6;
        ucar.ma2.Array r0, $r3, $r4;
        ucar.ma2.InvalidRangeException $r5;
        int[] r1, $r2;
        int $i0, i1, i2;

        r0 := @this: ucar.ma2.Array;

        i1 := @parameter0: int;

        i2 := @parameter1: int;

        $i0 = r0.<ucar.ma2.Array: int rank>;

        r1 = newarray (int)[$i0];

        $r2 = virtualinvoke r0.<ucar.ma2.Array: int[] getShape()>();

        r1[i1] = i2;

        $r2[i1] = 1;

     label1:
        $r3 = virtualinvoke r0.<ucar.ma2.Array: ucar.ma2.Array sectionNoReduce(int[],int[],int[])>(r1, $r2, null);

        $r4 = virtualinvoke $r3.<ucar.ma2.Array: ucar.ma2.Array reduce(int)>(i1);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r6;

        catch ucar.ma2.InvalidRangeException from label1 to label2 with label3;
    }

    public ucar.ma2.Array copy()
    {
        int[] $r2;
        java.lang.Class $r1;
        ucar.ma2.Array r0, $r3;
        boolean $z0;

        r0 := @this: ucar.ma2.Array;

        $r1 = virtualinvoke r0.<ucar.ma2.Array: java.lang.Class getElementType()>();

        $r2 = virtualinvoke r0.<ucar.ma2.Array: int[] getShape()>();

        $r3 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[])>($r1, $r2);

        staticinvoke <ucar.ma2.MAMath: void copy(ucar.ma2.Array,ucar.ma2.Array)>($r3, r0);

        $z0 = virtualinvoke r0.<ucar.ma2.Array: boolean isUnsigned()>();

        virtualinvoke $r3.<ucar.ma2.Array: void setUnsigned(boolean)>($z0);

        return $r3;
    }

    public java.lang.Object get1DJavaArray(java.lang.Class)
    {
        ucar.ma2.Array r1, $r4;
        int[] $r3;
        ucar.ma2.Index $r6;
        java.lang.Class r0, $r2;
        java.lang.Object $r5, $r7, $r8;
        boolean $z0;

        r1 := @this: ucar.ma2.Array;

        r0 := @parameter0: java.lang.Class;

        $r2 = virtualinvoke r1.<ucar.ma2.Array: java.lang.Class getElementType()>();

        if r0 != $r2 goto label2;

        $r6 = r1.<ucar.ma2.Array: ucar.ma2.Index indexCalc>;

        $z0 = virtualinvoke $r6.<ucar.ma2.Index: boolean isFastIterator()>();

        if $z0 == 0 goto label1;

        $r8 = virtualinvoke r1.<ucar.ma2.Array: java.lang.Object getStorage()>();

        return $r8;

     label1:
        $r7 = virtualinvoke r1.<ucar.ma2.Array: java.lang.Object copyTo1DJavaArray()>();

        return $r7;

     label2:
        $r3 = virtualinvoke r1.<ucar.ma2.Array: int[] getShape()>();

        $r4 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[])>(r0, $r3);

        staticinvoke <ucar.ma2.MAMath: void copy(ucar.ma2.Array,ucar.ma2.Array)>($r4, r1);

        $r5 = virtualinvoke $r4.<ucar.ma2.Array: java.lang.Object getStorage()>();

        return $r5;
    }

    public java.nio.ByteBuffer getDataAsByteBuffer()
    {
        java.lang.UnsupportedOperationException $r0;
        ucar.ma2.Array r1;

        r1 := @this: ucar.ma2.Array;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public static ucar.ma2.Array factory(ucar.ma2.DataType, int[], java.nio.ByteBuffer)
    {
        byte[] $r20;
        java.nio.FloatBuffer $r6;
        java.nio.ByteBuffer r2;
        byte $b11;
        int[] $r1, $r5, $r8, $r11, $r14, $r17, $r19, $r22, r28;
        java.nio.IntBuffer $r12;
        ucar.ma2.DataType r0;
        float $f0;
        java.lang.StringBuilder $r24, $r25, $r26;
        java.nio.ShortBuffer $r15;
        long $l5;
        short $s9;
        int $i0, $i1, $i2, $i3, $i4, $i6, $i7, $i8, $i10, $i13, i14, i15, i16, i17, i18, i19;
        java.lang.String $r27;
        double $d0;
        java.lang.UnsupportedOperationException $r23;
        java.nio.DoubleBuffer $r3;
        char $c12;
        ucar.ma2.Array $r4, $r7, $r10, $r13, $r16, $r18, $r21;
        java.nio.LongBuffer $r9;

        r0 := @parameter0: ucar.ma2.DataType;

        r28 := @parameter1: int[];

        r2 := @parameter2: java.nio.ByteBuffer;

        $r1 = <ucar.ma2.Array$1: int[] $SwitchMap$ucar$ma2$DataType>;

        $i0 = virtualinvoke r0.<ucar.ma2.DataType: int ordinal()>();

        $i1 = $r1[$i0];

        tableswitch($i1)
        {
            case 1: goto label01;
            case 2: goto label01;
            case 3: goto label03;
            case 4: goto label07;
            case 5: goto label07;
            case 6: goto label11;
            case 7: goto label11;
            case 8: goto label15;
            case 9: goto label19;
            case 10: goto label23;
            default: goto label27;
        };

     label01:
        if r28 != null goto label02;

        $r22 = newarray (int)[1];

        $i13 = virtualinvoke r2.<java.nio.ByteBuffer: int limit()>();

        $r22[0] = $i13;

        r28 = $r22;

     label02:
        $r20 = virtualinvoke r2.<java.nio.ByteBuffer: byte[] array()>();

        $r21 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(ucar.ma2.DataType,int[],java.lang.Object)>(r0, r28, $r20);

        return $r21;

     label03:
        $i10 = virtualinvoke r2.<java.nio.ByteBuffer: int limit()>();

        if r28 != null goto label04;

        $r19 = newarray (int)[1];

        $r19[0] = $i10;

        r28 = $r19;

     label04:
        $r18 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(ucar.ma2.DataType,int[])>(r0, r28);

        i14 = 0;

     label05:
        if i14 >= $i10 goto label06;

        $b11 = virtualinvoke r2.<java.nio.ByteBuffer: byte get(int)>(i14);

        $c12 = (char) $b11;

        virtualinvoke $r18.<ucar.ma2.Array: void setChar(int,char)>(i14, $c12);

        i14 = i14 + 1;

        goto label05;

     label06:
        return $r18;

     label07:
        $r15 = virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ShortBuffer asShortBuffer()>();

        $i8 = virtualinvoke $r15.<java.nio.ShortBuffer: int limit()>();

        if r28 != null goto label08;

        $r17 = newarray (int)[1];

        $r17[0] = $i8;

        r28 = $r17;

     label08:
        $r16 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(ucar.ma2.DataType,int[])>(r0, r28);

        i15 = 0;

     label09:
        if i15 >= $i8 goto label10;

        $s9 = virtualinvoke $r15.<java.nio.ShortBuffer: short get(int)>(i15);

        virtualinvoke $r16.<ucar.ma2.Array: void setShort(int,short)>(i15, $s9);

        i15 = i15 + 1;

        goto label09;

     label10:
        return $r16;

     label11:
        $r12 = virtualinvoke r2.<java.nio.ByteBuffer: java.nio.IntBuffer asIntBuffer()>();

        $i6 = virtualinvoke $r12.<java.nio.IntBuffer: int limit()>();

        if r28 != null goto label12;

        $r14 = newarray (int)[1];

        $r14[0] = $i6;

        r28 = $r14;

     label12:
        $r13 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(ucar.ma2.DataType,int[])>(r0, r28);

        i16 = 0;

     label13:
        if i16 >= $i6 goto label14;

        $i7 = virtualinvoke $r12.<java.nio.IntBuffer: int get(int)>(i16);

        virtualinvoke $r13.<ucar.ma2.Array: void setInt(int,int)>(i16, $i7);

        i16 = i16 + 1;

        goto label13;

     label14:
        return $r13;

     label15:
        $r9 = virtualinvoke r2.<java.nio.ByteBuffer: java.nio.LongBuffer asLongBuffer()>();

        $i4 = virtualinvoke $r9.<java.nio.LongBuffer: int limit()>();

        if r28 != null goto label16;

        $r11 = newarray (int)[1];

        $r11[0] = $i4;

        r28 = $r11;

     label16:
        $r10 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(ucar.ma2.DataType,int[])>(r0, r28);

        i17 = 0;

     label17:
        if i17 >= $i4 goto label18;

        $l5 = virtualinvoke $r9.<java.nio.LongBuffer: long get(int)>(i17);

        virtualinvoke $r10.<ucar.ma2.Array: void setLong(int,long)>(i17, $l5);

        i17 = i17 + 1;

        goto label17;

     label18:
        return $r10;

     label19:
        $r6 = virtualinvoke r2.<java.nio.ByteBuffer: java.nio.FloatBuffer asFloatBuffer()>();

        $i3 = virtualinvoke $r6.<java.nio.FloatBuffer: int limit()>();

        if r28 != null goto label20;

        $r8 = newarray (int)[1];

        $r8[0] = $i3;

        r28 = $r8;

     label20:
        $r7 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(ucar.ma2.DataType,int[])>(r0, r28);

        i18 = 0;

     label21:
        if i18 >= $i3 goto label22;

        $f0 = virtualinvoke $r6.<java.nio.FloatBuffer: float get(int)>(i18);

        virtualinvoke $r7.<ucar.ma2.Array: void setFloat(int,float)>(i18, $f0);

        i18 = i18 + 1;

        goto label21;

     label22:
        return $r7;

     label23:
        $r3 = virtualinvoke r2.<java.nio.ByteBuffer: java.nio.DoubleBuffer asDoubleBuffer()>();

        $i2 = virtualinvoke $r3.<java.nio.DoubleBuffer: int limit()>();

        if r28 != null goto label24;

        $r5 = newarray (int)[1];

        $r5[0] = $i2;

        r28 = $r5;

     label24:
        $r4 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(ucar.ma2.DataType,int[])>(r0, r28);

        i19 = 0;

     label25:
        if i19 >= $i2 goto label26;

        $d0 = virtualinvoke $r3.<java.nio.DoubleBuffer: double get(int)>(i19);

        virtualinvoke $r4.<ucar.ma2.Array: void setDouble(int,double)>(i19, $d0);

        i19 = i19 + 1;

        goto label25;

     label26:
        return $r4;

     label27:
        $r23 = new java.lang.UnsupportedOperationException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r27);

        throw $r23;
    }

    public java.lang.Object copyTo1DJavaArray()
    {
        java.lang.Object $r2;
        ucar.ma2.Array r0, $r1;

        r0 := @this: ucar.ma2.Array;

        $r1 = virtualinvoke r0.<ucar.ma2.Array: ucar.ma2.Array copy()>();

        $r2 = virtualinvoke $r1.<ucar.ma2.Array: java.lang.Object getStorage()>();

        return $r2;
    }

    public java.lang.Object copyToNDJavaArray()
    {
        int[] $r2;
        ucar.ma2.IndexIterator $r4;
        java.lang.Class $r1;
        java.lang.Object $r3;
        java.lang.IllegalArgumentException $r6;
        ucar.ma2.Array r0;
        java.lang.Exception $r5;

        r0 := @this: ucar.ma2.Array;

     label1:
        $r1 = virtualinvoke r0.<ucar.ma2.Array: java.lang.Class getElementType()>();

        $r2 = virtualinvoke r0.<ucar.ma2.Array: int[] getShape()>();

        $r3 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r1, $r2);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r5);

        throw $r6;

     label4:
        $r4 = virtualinvoke r0.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

        staticinvoke <ucar.ma2.Array: void reflectArrayCopyOut(java.lang.Object,ucar.ma2.Array,ucar.ma2.IndexIterator)>($r3, r0, $r4);

        return $r3;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public ucar.ma2.Array flip(int)
    {
        ucar.ma2.Index $r1, $r2;
        int i0;
        ucar.ma2.Array r0, $r3;

        r0 := @this: ucar.ma2.Array;

        i0 := @parameter0: int;

        $r1 = r0.<ucar.ma2.Array: ucar.ma2.Index indexCalc>;

        $r2 = virtualinvoke $r1.<ucar.ma2.Index: ucar.ma2.Index flip(int)>(i0);

        $r3 = virtualinvoke r0.<ucar.ma2.Array: ucar.ma2.Array createView(ucar.ma2.Index)>($r2);

        return $r3;
    }

    public ucar.ma2.Array transpose(int, int)
    {
        ucar.ma2.Index $r1, $r2;
        int i0, i1;
        ucar.ma2.Array r0, $r3;

        r0 := @this: ucar.ma2.Array;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<ucar.ma2.Array: ucar.ma2.Index indexCalc>;

        $r2 = virtualinvoke $r1.<ucar.ma2.Index: ucar.ma2.Index transpose(int,int)>(i0, i1);

        $r3 = virtualinvoke r0.<ucar.ma2.Array: ucar.ma2.Array createView(ucar.ma2.Index)>($r2);

        return $r3;
    }

    public ucar.ma2.Array permute(int[])
    {
        int[] r1;
        ucar.ma2.Index $r2, $r3;
        ucar.ma2.Array r0, $r4;

        r0 := @this: ucar.ma2.Array;

        r1 := @parameter0: int[];

        $r2 = r0.<ucar.ma2.Array: ucar.ma2.Index indexCalc>;

        $r3 = virtualinvoke $r2.<ucar.ma2.Index: ucar.ma2.Index permute(int[])>(r1);

        $r4 = virtualinvoke r0.<ucar.ma2.Array: ucar.ma2.Array createView(ucar.ma2.Index)>($r3);

        return $r4;
    }

    public ucar.ma2.Array reshape(int[])
    {
        long $l0, $l1, $l3;
        java.lang.IllegalArgumentException $r4;
        ucar.ma2.Array r0, $r3;
        byte $b2;
        int[] r2;
        int $i4;
        java.lang.Class $r1;
        boolean $z0;

        r0 := @this: ucar.ma2.Array;

        r2 := @parameter0: int[];

        $r1 = virtualinvoke r0.<ucar.ma2.Array: java.lang.Class getElementType()>();

        $r3 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[])>($r1, r2);

        $l0 = virtualinvoke $r3.<ucar.ma2.Array: long getSize()>();

        $l1 = virtualinvoke r0.<ucar.ma2.Array: long getSize()>();

        $b2 = $l0 cmp $l1;

        if $b2 == 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("reshape arrays must have same total size");

        throw $r4;

     label1:
        $z0 = virtualinvoke r0.<ucar.ma2.Array: boolean isUnsigned()>();

        virtualinvoke $r3.<ucar.ma2.Array: void setUnsigned(boolean)>($z0);

        $l3 = virtualinvoke r0.<ucar.ma2.Array: long getSize()>();

        $i4 = (int) $l3;

        staticinvoke <ucar.ma2.Array: void arraycopy(ucar.ma2.Array,int,ucar.ma2.Array,int,int)>(r0, 0, $r3, 0, $i4);

        return $r3;
    }

    public ucar.ma2.Array reshapeNoCopy(int[])
    {
        long $l0, $l1;
        java.lang.IllegalArgumentException $r5;
        ucar.ma2.Array r0, $r4;
        byte $b2;
        int[] r2;
        java.lang.Class $r1;
        java.lang.Object $r3;

        r0 := @this: ucar.ma2.Array;

        r2 := @parameter0: int[];

        $r1 = virtualinvoke r0.<ucar.ma2.Array: java.lang.Class getElementType()>();

        $r3 = virtualinvoke r0.<ucar.ma2.Array: java.lang.Object getStorage()>();

        $r4 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[],java.lang.Object)>($r1, r2, $r3);

        $l0 = virtualinvoke $r4.<ucar.ma2.Array: long getSize()>();

        $l1 = virtualinvoke r0.<ucar.ma2.Array: long getSize()>();

        $b2 = $l0 cmp $l1;

        if $b2 == 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("reshape arrays must have same total size");

        throw $r5;

     label1:
        return $r4;
    }

    public ucar.ma2.Array reduce()
    {
        ucar.ma2.Index $r1, $r2, $r3;
        ucar.ma2.Array r0, $r4;

        r0 := @this: ucar.ma2.Array;

        $r1 = r0.<ucar.ma2.Array: ucar.ma2.Index indexCalc>;

        $r2 = virtualinvoke $r1.<ucar.ma2.Index: ucar.ma2.Index reduce()>();

        $r3 = r0.<ucar.ma2.Array: ucar.ma2.Index indexCalc>;

        if $r2 != $r3 goto label1;

        return r0;

     label1:
        $r4 = virtualinvoke r0.<ucar.ma2.Array: ucar.ma2.Array createView(ucar.ma2.Index)>($r2);

        return $r4;
    }

    public ucar.ma2.Array reduce(int)
    {
        ucar.ma2.Index $r1, $r2;
        int i0;
        ucar.ma2.Array r0, $r3;

        r0 := @this: ucar.ma2.Array;

        i0 := @parameter0: int;

        $r1 = r0.<ucar.ma2.Array: ucar.ma2.Index indexCalc>;

        $r2 = virtualinvoke $r1.<ucar.ma2.Index: ucar.ma2.Index reduce(int)>(i0);

        $r3 = virtualinvoke r0.<ucar.ma2.Array: ucar.ma2.Array createView(ucar.ma2.Index)>($r2);

        return $r3;
    }

    public boolean isUnsigned()
    {
        ucar.ma2.Array r0;
        boolean $z0;

        r0 := @this: ucar.ma2.Array;

        $z0 = r0.<ucar.ma2.Array: boolean unsigned>;

        return $z0;
    }

    public boolean isConstant()
    {
        ucar.ma2.Array r0;
        ucar.ma2.Index $r1;
        boolean $z0;

        r0 := @this: ucar.ma2.Array;

        $r1 = r0.<ucar.ma2.Array: ucar.ma2.Index indexCalc>;

        $z0 = $r1 instanceof ucar.ma2.IndexConstant;

        return $z0;
    }

    public void setUnsigned(boolean)
    {
        ucar.ma2.Array r0;
        boolean z0;

        r0 := @this: ucar.ma2.Array;

        z0 := @parameter0: boolean;

        r0.<ucar.ma2.Array: boolean unsigned> = z0;

        return;
    }

    public abstract double getDouble(ucar.ma2.Index);

    public abstract void setDouble(ucar.ma2.Index, double);

    public abstract float getFloat(ucar.ma2.Index);

    public abstract void setFloat(ucar.ma2.Index, float);

    public abstract long getLong(ucar.ma2.Index);

    public abstract void setLong(ucar.ma2.Index, long);

    public abstract int getInt(ucar.ma2.Index);

    public abstract void setInt(ucar.ma2.Index, int);

    public abstract short getShort(ucar.ma2.Index);

    public abstract void setShort(ucar.ma2.Index, short);

    public abstract byte getByte(ucar.ma2.Index);

    public abstract void setByte(ucar.ma2.Index, byte);

    public abstract char getChar(ucar.ma2.Index);

    public abstract void setChar(ucar.ma2.Index, char);

    public abstract boolean getBoolean(ucar.ma2.Index);

    public abstract void setBoolean(ucar.ma2.Index, boolean);

    public abstract java.lang.Object getObject(ucar.ma2.Index);

    public abstract void setObject(ucar.ma2.Index, java.lang.Object);

    public abstract double getDouble(int);

    public abstract void setDouble(int, double);

    public abstract float getFloat(int);

    public abstract void setFloat(int, float);

    public abstract long getLong(int);

    public abstract void setLong(int, long);

    public abstract int getInt(int);

    public abstract void setInt(int, int);

    public abstract short getShort(int);

    public abstract void setShort(int, short);

    public abstract byte getByte(int);

    public abstract void setByte(int, byte);

    public abstract char getChar(int);

    public abstract void setChar(int, char);

    public abstract boolean getBoolean(int);

    public abstract void setBoolean(int, boolean);

    public abstract java.lang.Object getObject(int);

    public abstract void setObject(int, java.lang.Object);

    public java.lang.String toString()
    {
        ucar.ma2.IndexIterator $r2;
        java.lang.StringBuilder $r0;
        java.lang.Object $r4;
        java.lang.String $r3;
        ucar.ma2.Array r1;
        boolean $z0;

        r1 := @this: ucar.ma2.Array;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r1.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r2.<ucar.ma2.IndexIterator: java.lang.Object getObjectNext()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        goto label1;

     label2:
        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public java.lang.String shapeToString()
    {
        ucar.ma2.Array r0;
        int[] $r1;
        int $i0, $i1, i2, i3;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        r0 := @this: ucar.ma2.Array;

        $r1 = virtualinvoke r0.<ucar.ma2.Array: int[] getShape()>();

        $i0 = lengthof $r1;

        if $i0 != 0 goto label1;

        return "";

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(40);

        i3 = 0;

     label2:
        $i1 = lengthof $r1;

        if i3 >= $i1 goto label4;

        i2 = $r1[i3];

        if i3 <= 0 goto label3;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

     label3:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        i3 = i3 + 1;

        goto label2;

     label4:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public boolean hasNext()
    {
        ucar.ma2.IndexIterator $r1, $r2, $r3;
        ucar.ma2.Array r0;
        boolean $z0;

        r0 := @this: ucar.ma2.Array;

        $r1 = r0.<ucar.ma2.Array: ucar.ma2.IndexIterator ii>;

        if null != $r1 goto label1;

        $r3 = virtualinvoke r0.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

        r0.<ucar.ma2.Array: ucar.ma2.IndexIterator ii> = $r3;

     label1:
        $r2 = r0.<ucar.ma2.Array: ucar.ma2.IndexIterator ii>;

        $z0 = interfaceinvoke $r2.<ucar.ma2.IndexIterator: boolean hasNext()>();

        return $z0;
    }

    public java.lang.Object next()
    {
        java.lang.Object $r2;
        ucar.ma2.Array r0;
        ucar.ma2.IndexIterator $r1;

        r0 := @this: ucar.ma2.Array;

        $r1 = r0.<ucar.ma2.Array: ucar.ma2.IndexIterator ii>;

        $r2 = interfaceinvoke $r1.<ucar.ma2.IndexIterator: java.lang.Object getObjectNext()>();

        return $r2;
    }

    public double nextDouble()
    {
        ucar.ma2.Array r0;
        ucar.ma2.IndexIterator $r1;
        double $d0;

        r0 := @this: ucar.ma2.Array;

        $r1 = r0.<ucar.ma2.Array: ucar.ma2.IndexIterator ii>;

        $d0 = interfaceinvoke $r1.<ucar.ma2.IndexIterator: double getDoubleNext()>();

        return $d0;
    }

    public float nextFloat()
    {
        float $f0;
        ucar.ma2.Array r0;
        ucar.ma2.IndexIterator $r1;

        r0 := @this: ucar.ma2.Array;

        $r1 = r0.<ucar.ma2.Array: ucar.ma2.IndexIterator ii>;

        $f0 = interfaceinvoke $r1.<ucar.ma2.IndexIterator: float getFloatNext()>();

        return $f0;
    }

    public byte nextByte()
    {
        byte $b0;
        ucar.ma2.Array r0;
        ucar.ma2.IndexIterator $r1;

        r0 := @this: ucar.ma2.Array;

        $r1 = r0.<ucar.ma2.Array: ucar.ma2.IndexIterator ii>;

        $b0 = interfaceinvoke $r1.<ucar.ma2.IndexIterator: byte getByteNext()>();

        return $b0;
    }

    public short nextShort()
    {
        short $s0;
        ucar.ma2.Array r0;
        ucar.ma2.IndexIterator $r1;

        r0 := @this: ucar.ma2.Array;

        $r1 = r0.<ucar.ma2.Array: ucar.ma2.IndexIterator ii>;

        $s0 = interfaceinvoke $r1.<ucar.ma2.IndexIterator: short getShortNext()>();

        return $s0;
    }

    public int nextInt()
    {
        int $i0;
        ucar.ma2.Array r0;
        ucar.ma2.IndexIterator $r1;

        r0 := @this: ucar.ma2.Array;

        $r1 = r0.<ucar.ma2.Array: ucar.ma2.IndexIterator ii>;

        $i0 = interfaceinvoke $r1.<ucar.ma2.IndexIterator: int getIntNext()>();

        return $i0;
    }

    public long nextLong()
    {
        long $l0;
        ucar.ma2.Array r0;
        ucar.ma2.IndexIterator $r1;

        r0 := @this: ucar.ma2.Array;

        $r1 = r0.<ucar.ma2.Array: ucar.ma2.IndexIterator ii>;

        $l0 = interfaceinvoke $r1.<ucar.ma2.IndexIterator: long getLongNext()>();

        return $l0;
    }

    public char nextChar()
    {
        char $c0;
        ucar.ma2.Array r0;
        ucar.ma2.IndexIterator $r1;

        r0 := @this: ucar.ma2.Array;

        $r1 = r0.<ucar.ma2.Array: ucar.ma2.IndexIterator ii>;

        $c0 = interfaceinvoke $r1.<ucar.ma2.IndexIterator: char getCharNext()>();

        return $c0;
    }

    public boolean nextBoolean()
    {
        ucar.ma2.Array r0;
        ucar.ma2.IndexIterator $r1;
        boolean $z0;

        r0 := @this: ucar.ma2.Array;

        $r1 = r0.<ucar.ma2.Array: ucar.ma2.IndexIterator ii>;

        $z0 = interfaceinvoke $r1.<ucar.ma2.IndexIterator: boolean getBooleanNext()>();

        return $z0;
    }

    public void resetLocalIterator()
    {
        ucar.ma2.Array r0;

        r0 := @this: ucar.ma2.Array;

        r0.<ucar.ma2.Array: ucar.ma2.IndexIterator ii> = null;

        return;
    }
}
