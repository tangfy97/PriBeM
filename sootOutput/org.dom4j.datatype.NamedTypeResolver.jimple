class org.dom4j.datatype.NamedTypeResolver extends java.lang.Object
{
    protected java.util.Map complexTypeMap;
    protected java.util.Map simpleTypeMap;
    protected java.util.Map typedElementMap;
    protected java.util.Map elementFactoryMap;
    protected org.dom4j.DocumentFactory documentFactory;

    void <init>(org.dom4j.DocumentFactory)
    {
        org.dom4j.datatype.NamedTypeResolver r0;
        java.util.HashMap $r1, $r2, $r3, $r4;
        org.dom4j.DocumentFactory r5;

        r0 := @this: org.dom4j.datatype.NamedTypeResolver;

        r5 := @parameter0: org.dom4j.DocumentFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.dom4j.datatype.NamedTypeResolver: java.util.Map complexTypeMap> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<org.dom4j.datatype.NamedTypeResolver: java.util.Map simpleTypeMap> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<org.dom4j.datatype.NamedTypeResolver: java.util.Map typedElementMap> = $r3;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<org.dom4j.datatype.NamedTypeResolver: java.util.Map elementFactoryMap> = $r4;

        r0.<org.dom4j.datatype.NamedTypeResolver: org.dom4j.DocumentFactory documentFactory> = r5;

        return;
    }

    void registerComplexType(org.dom4j.QName, org.dom4j.DocumentFactory)
    {
        org.dom4j.datatype.NamedTypeResolver r0;
        java.util.Map $r3;
        org.dom4j.QName r1;
        org.dom4j.DocumentFactory r2;

        r0 := @this: org.dom4j.datatype.NamedTypeResolver;

        r1 := @parameter0: org.dom4j.QName;

        r2 := @parameter1: org.dom4j.DocumentFactory;

        $r3 = r0.<org.dom4j.datatype.NamedTypeResolver: java.util.Map complexTypeMap>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    void registerSimpleType(org.dom4j.QName, com.sun.msv.datatype.xsd.XSDatatype)
    {
        org.dom4j.datatype.NamedTypeResolver r0;
        java.util.Map $r3;
        com.sun.msv.datatype.xsd.XSDatatype r2;
        org.dom4j.QName r1;

        r0 := @this: org.dom4j.datatype.NamedTypeResolver;

        r1 := @parameter0: org.dom4j.QName;

        r2 := @parameter1: com.sun.msv.datatype.xsd.XSDatatype;

        $r3 = r0.<org.dom4j.datatype.NamedTypeResolver: java.util.Map simpleTypeMap>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    void registerTypedElement(org.dom4j.Element, org.dom4j.QName, org.dom4j.DocumentFactory)
    {
        org.dom4j.datatype.NamedTypeResolver r0;
        java.util.Map $r3, $r5;
        org.dom4j.Element r1;
        org.dom4j.QName r2;
        org.dom4j.DocumentFactory r4;

        r0 := @this: org.dom4j.datatype.NamedTypeResolver;

        r1 := @parameter0: org.dom4j.Element;

        r2 := @parameter1: org.dom4j.QName;

        r4 := @parameter2: org.dom4j.DocumentFactory;

        $r3 = r0.<org.dom4j.datatype.NamedTypeResolver: java.util.Map typedElementMap>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        $r5 = r0.<org.dom4j.datatype.NamedTypeResolver: java.util.Map elementFactoryMap>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r4);

        return;
    }

    void resolveElementTypes()
    {
        org.dom4j.DocumentFactory r16, r20;
        org.dom4j.datatype.DatatypeElementFactory $r17;
        org.dom4j.datatype.NamedTypeResolver r0;
        java.util.Map $r1, $r7, $r10, $r11, $r12, $r14, $r18;
        boolean $z0, $z1, $z2, $z3;
        java.util.Iterator $r3;
        java.util.Set $r2;
        com.sun.msv.datatype.xsd.XSDatatype r21;
        java.lang.Object $r4, $r8, $r13, $r15, $r19;
        org.dom4j.Element r5;
        org.dom4j.QName $r6, r9;

        r0 := @this: org.dom4j.datatype.NamedTypeResolver;

        $r1 = r0.<org.dom4j.datatype.NamedTypeResolver: java.util.Map typedElementMap>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.dom4j.Element) $r4;

        $r6 = specialinvoke r0.<org.dom4j.datatype.NamedTypeResolver: org.dom4j.QName getQNameOfSchemaElement(org.dom4j.Element)>(r5);

        $r7 = r0.<org.dom4j.datatype.NamedTypeResolver: java.util.Map typedElementMap>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5);

        r9 = (org.dom4j.QName) $r8;

        $r10 = r0.<org.dom4j.datatype.NamedTypeResolver: java.util.Map complexTypeMap>;

        $z1 = interfaceinvoke $r10.<java.util.Map: boolean containsKey(java.lang.Object)>(r9);

        if $z1 == 0 goto label2;

        $r18 = r0.<org.dom4j.datatype.NamedTypeResolver: java.util.Map complexTypeMap>;

        $r19 = interfaceinvoke $r18.<java.util.Map: java.lang.Object get(java.lang.Object)>(r9);

        r20 = (org.dom4j.DocumentFactory) $r19;

        virtualinvoke $r6.<org.dom4j.QName: void setDocumentFactory(org.dom4j.DocumentFactory)>(r20);

        goto label3;

     label2:
        $r11 = r0.<org.dom4j.datatype.NamedTypeResolver: java.util.Map simpleTypeMap>;

        $z2 = interfaceinvoke $r11.<java.util.Map: boolean containsKey(java.lang.Object)>(r9);

        if $z2 == 0 goto label3;

        $r12 = r0.<org.dom4j.datatype.NamedTypeResolver: java.util.Map simpleTypeMap>;

        $r13 = interfaceinvoke $r12.<java.util.Map: java.lang.Object get(java.lang.Object)>(r9);

        r21 = (com.sun.msv.datatype.xsd.XSDatatype) $r13;

        $r14 = r0.<org.dom4j.datatype.NamedTypeResolver: java.util.Map elementFactoryMap>;

        $r15 = interfaceinvoke $r14.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5);

        r16 = (org.dom4j.DocumentFactory) $r15;

        $z3 = r16 instanceof org.dom4j.datatype.DatatypeElementFactory;

        if $z3 == 0 goto label3;

        $r17 = (org.dom4j.datatype.DatatypeElementFactory) r16;

        virtualinvoke $r17.<org.dom4j.datatype.DatatypeElementFactory: void setChildElementXSDatatype(org.dom4j.QName,com.sun.msv.datatype.xsd.XSDatatype)>($r6, r21);

     label3:
        goto label1;

     label4:
        return;
    }

    void resolveNamedTypes()
    {
        org.dom4j.datatype.NamedTypeResolver r0;

        r0 := @this: org.dom4j.datatype.NamedTypeResolver;

        virtualinvoke r0.<org.dom4j.datatype.NamedTypeResolver: void resolveElementTypes()>();

        return;
    }

    private org.dom4j.QName getQNameOfSchemaElement(org.dom4j.Element)
    {
        org.dom4j.datatype.NamedTypeResolver r2;
        org.dom4j.Element r0;
        org.dom4j.QName $r3;
        java.lang.String $r1;

        r2 := @this: org.dom4j.datatype.NamedTypeResolver;

        r0 := @parameter0: org.dom4j.Element;

        $r1 = interfaceinvoke r0.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String)>("name");

        $r3 = specialinvoke r2.<org.dom4j.datatype.NamedTypeResolver: org.dom4j.QName getQName(java.lang.String)>($r1);

        return $r3;
    }

    private org.dom4j.QName getQName(java.lang.String)
    {
        org.dom4j.datatype.NamedTypeResolver r0;
        org.dom4j.QName $r3;
        java.lang.String r1;
        org.dom4j.DocumentFactory $r2;

        r0 := @this: org.dom4j.datatype.NamedTypeResolver;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.dom4j.datatype.NamedTypeResolver: org.dom4j.DocumentFactory documentFactory>;

        $r3 = virtualinvoke $r2.<org.dom4j.DocumentFactory: org.dom4j.QName createQName(java.lang.String)>(r1);

        return $r3;
    }
}
