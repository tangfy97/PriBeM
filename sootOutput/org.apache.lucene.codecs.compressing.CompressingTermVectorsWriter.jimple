public final class org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter extends org.apache.lucene.codecs.TermVectorsWriter
{
    static final int MAX_DOCUMENTS_PER_CHUNK;
    static final java.lang.String VECTORS_EXTENSION;
    static final java.lang.String VECTORS_INDEX_EXTENSION;
    static final java.lang.String CODEC_SFX_IDX;
    static final java.lang.String CODEC_SFX_DAT;
    static final int VERSION_START;
    static final int VERSION_CURRENT;
    static final int BLOCK_SIZE;
    static final int POSITIONS;
    static final int OFFSETS;
    static final int PAYLOADS;
    static final int FLAGS_BITS;
    private final org.apache.lucene.store.Directory directory;
    private final java.lang.String segment;
    private final java.lang.String segmentSuffix;
    private org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexWriter indexWriter;
    private org.apache.lucene.store.IndexOutput vectorsStream;
    private final org.apache.lucene.codecs.compressing.CompressionMode compressionMode;
    private final org.apache.lucene.codecs.compressing.Compressor compressor;
    private final int chunkSize;
    private int numDocs;
    private final java.util.Deque pendingDocs;
    private org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$DocData curDoc;
    private org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData curField;
    private final org.apache.lucene.util.BytesRef lastTerm;
    private int[] positionsBuf;
    private int[] startOffsetsBuf;
    private int[] lengthsBuf;
    private int[] payloadLengthsBuf;
    private final org.apache.lucene.codecs.compressing.GrowableByteArrayDataOutput termSuffixes;
    private final org.apache.lucene.codecs.compressing.GrowableByteArrayDataOutput payloadBytes;
    private final org.apache.lucene.util.packed.BlockPackedWriter writer;
    static final boolean $assertionsDisabled;

    private org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$DocData addDocData(int)
    {
        org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData r9;
        java.util.Deque $r1, $r6, $r7, $r12;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter r0;
        int $i0, $i1, $i2, i3, $i4, $i5, $i6, $i7, $i8, $i9;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$DocData $r3, $r4, r10, r11;
        java.util.Iterator $r2;
        java.lang.Object $r5, $r8;

        r0 := @this: org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter;

        i3 := @parameter0: int;

        r9 = null;

        $r1 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: java.util.Deque pendingDocs>;

        $r2 = interfaceinvoke $r1.<java.util.Deque: java.util.Iterator descendingIterator()>();

     label01:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label03;

        $r5 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r10 = (org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$DocData) $r5;

        $r6 = r10.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$DocData: java.util.Deque fields>;

        $z4 = interfaceinvoke $r6.<java.util.Deque: boolean isEmpty()>();

        if $z4 != 0 goto label02;

        $r7 = r10.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$DocData: java.util.Deque fields>;

        $r8 = interfaceinvoke $r7.<java.util.Deque: java.lang.Object getLast()>();

        r9 = (org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData) $r8;

        goto label03;

     label02:
        goto label01;

     label03:
        if r9 != null goto label04;

        $r4 = new org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$DocData;

        specialinvoke $r4.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$DocData: void <init>(org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter,int,int,int,int)>(r0, i3, 0, 0, 0);

        r11 = $r4;

        goto label11;

     label04:
        $i0 = r9.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData: int posStart>;

        $z1 = r9.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData: boolean hasPositions>;

        if $z1 == 0 goto label05;

        $i7 = r9.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData: int totalPositions>;

        goto label06;

     label05:
        $i7 = 0;

     label06:
        $i6 = $i0 + $i7;

        $i1 = r9.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData: int offStart>;

        $z2 = r9.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData: boolean hasOffsets>;

        if $z2 == 0 goto label07;

        $i8 = r9.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData: int totalPositions>;

        goto label08;

     label07:
        $i8 = 0;

     label08:
        $i5 = $i1 + $i8;

        $i2 = r9.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData: int payStart>;

        $z3 = r9.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData: boolean hasPayloads>;

        if $z3 == 0 goto label09;

        $i9 = r9.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData: int totalPositions>;

        goto label10;

     label09:
        $i9 = 0;

     label10:
        $i4 = $i2 + $i9;

        $r3 = new org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$DocData;

        specialinvoke $r3.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$DocData: void <init>(org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter,int,int,int,int)>(r0, i3, $i6, $i5, $i4);

        r11 = $r3;

     label11:
        $r12 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: java.util.Deque pendingDocs>;

        interfaceinvoke $r12.<java.util.Deque: boolean add(java.lang.Object)>(r11);

        return r11;
    }

    public void <init>(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, java.lang.String, org.apache.lucene.store.IOContext, java.lang.String, org.apache.lucene.codecs.compressing.CompressionMode, int) throws java.io.IOException
    {
        byte $b7, $b11;
        int[] $r33, $r34, $r35, $r36;
        org.apache.lucene.codecs.compressing.GrowableByteArrayDataOutput $r8, $r9;
        org.apache.lucene.store.Directory r1;
        java.io.Closeable[] $r37, $r43;
        org.apache.lucene.codecs.compressing.CompressionMode r5;
        org.apache.lucene.store.IOContext r13;
        boolean $z0, $z1, $z2;
        org.apache.lucene.util.BytesRef $r10;
        org.apache.lucene.index.SegmentInfo r2;
        java.lang.StringBuilder $r18, $r20, $r21, $r23, $r24, $r25;
        org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexWriter $r28;
        java.lang.Throwable $r42;
        long $l5, $l6, $l9, $l10;
        java.lang.AssertionError $r38, $r40, $r41;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter r0;
        org.apache.lucene.util.packed.BlockPackedWriter $r31;
        int i0, $i1, $i2, $i3, $i4, $i8;
        java.lang.String $r3, r4, $r11, $r12, $r15, $r16, r19, $r22, $r26;
        org.apache.lucene.store.IndexOutput $r14, $r17, $r27, $r29, $r30, $r32, $r39, r44;
        org.apache.lucene.codecs.compressing.Compressor $r6;
        java.util.ArrayDeque $r7;

        r0 := @this: org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter;

        r1 := @parameter0: org.apache.lucene.store.Directory;

        r2 := @parameter1: org.apache.lucene.index.SegmentInfo;

        r4 := @parameter2: java.lang.String;

        r13 := @parameter3: org.apache.lucene.store.IOContext;

        r19 := @parameter4: java.lang.String;

        r5 := @parameter5: org.apache.lucene.codecs.compressing.CompressionMode;

        i0 := @parameter6: int;

        specialinvoke r0.<org.apache.lucene.codecs.TermVectorsWriter: void <init>()>();

        $z0 = <org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r1 != null goto label1;

        $r41 = new java.lang.AssertionError;

        specialinvoke $r41.<java.lang.AssertionError: void <init>()>();

        throw $r41;

     label1:
        r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.store.Directory directory> = r1;

        $r3 = r2.<org.apache.lucene.index.SegmentInfo: java.lang.String name>;

        r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: java.lang.String segment> = $r3;

        r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: java.lang.String segmentSuffix> = r4;

        r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.codecs.compressing.CompressionMode compressionMode> = r5;

        $r6 = virtualinvoke r5.<org.apache.lucene.codecs.compressing.CompressionMode: org.apache.lucene.codecs.compressing.Compressor newCompressor()>();

        r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.codecs.compressing.Compressor compressor> = $r6;

        r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: int chunkSize> = i0;

        r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: int numDocs> = 0;

        $r7 = new java.util.ArrayDeque;

        specialinvoke $r7.<java.util.ArrayDeque: void <init>()>();

        r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: java.util.Deque pendingDocs> = $r7;

        $r8 = new org.apache.lucene.codecs.compressing.GrowableByteArrayDataOutput;

        $i1 = staticinvoke <org.apache.lucene.util.ArrayUtil: int oversize(int,int)>(i0, 1);

        specialinvoke $r8.<org.apache.lucene.codecs.compressing.GrowableByteArrayDataOutput: void <init>(int)>($i1);

        r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.codecs.compressing.GrowableByteArrayDataOutput termSuffixes> = $r8;

        $r9 = new org.apache.lucene.codecs.compressing.GrowableByteArrayDataOutput;

        $i2 = staticinvoke <org.apache.lucene.util.ArrayUtil: int oversize(int,int)>(1, 1);

        specialinvoke $r9.<org.apache.lucene.codecs.compressing.GrowableByteArrayDataOutput: void <init>(int)>($i2);

        r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.codecs.compressing.GrowableByteArrayDataOutput payloadBytes> = $r9;

        $r10 = new org.apache.lucene.util.BytesRef;

        $i3 = staticinvoke <org.apache.lucene.util.ArrayUtil: int oversize(int,int)>(30, 1);

        specialinvoke $r10.<org.apache.lucene.util.BytesRef: void <init>(int)>($i3);

        r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.util.BytesRef lastTerm> = $r10;

        $r11 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: java.lang.String segment>;

        $r12 = staticinvoke <org.apache.lucene.index.IndexFileNames: java.lang.String segmentFileName(java.lang.String,java.lang.String,java.lang.String)>($r11, r4, "tvx");

        $r14 = virtualinvoke r1.<org.apache.lucene.store.Directory: org.apache.lucene.store.IndexOutput createOutput(java.lang.String,org.apache.lucene.store.IOContext)>($r12, r13);

        r44 = $r14;

     label2:
        $r15 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: java.lang.String segment>;

        $r16 = staticinvoke <org.apache.lucene.index.IndexFileNames: java.lang.String segmentFileName(java.lang.String,java.lang.String,java.lang.String)>($r15, r4, "tvd");

        $r17 = virtualinvoke r1.<org.apache.lucene.store.Directory: org.apache.lucene.store.IndexOutput createOutput(java.lang.String,org.apache.lucene.store.IOContext)>($r16, r13);

        r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.store.IndexOutput vectorsStream> = $r17;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Index");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r19);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Data");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.lucene.codecs.CodecUtil: void writeHeader(org.apache.lucene.store.DataOutput,java.lang.String,int)>($r14, $r22, 0);

        $r27 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.store.IndexOutput vectorsStream>;

        staticinvoke <org.apache.lucene.codecs.CodecUtil: void writeHeader(org.apache.lucene.store.DataOutput,java.lang.String,int)>($r27, $r26, 0);

        $z1 = <org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: boolean $assertionsDisabled>;

        if $z1 != 0 goto label3;

        $i8 = staticinvoke <org.apache.lucene.codecs.CodecUtil: int headerLength(java.lang.String)>($r26);

        $l9 = (long) $i8;

        $r39 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.store.IndexOutput vectorsStream>;

        $l10 = virtualinvoke $r39.<org.apache.lucene.store.IndexOutput: long getFilePointer()>();

        $b11 = $l9 cmp $l10;

        if $b11 == 0 goto label3;

        $r40 = new java.lang.AssertionError;

        specialinvoke $r40.<java.lang.AssertionError: void <init>()>();

        throw $r40;

     label3:
        $z2 = <org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: boolean $assertionsDisabled>;

        if $z2 != 0 goto label4;

        $i4 = staticinvoke <org.apache.lucene.codecs.CodecUtil: int headerLength(java.lang.String)>($r22);

        $l5 = (long) $i4;

        $l6 = virtualinvoke $r14.<org.apache.lucene.store.IndexOutput: long getFilePointer()>();

        $b7 = $l5 cmp $l6;

        if $b7 == 0 goto label4;

        $r38 = new java.lang.AssertionError;

        specialinvoke $r38.<java.lang.AssertionError: void <init>()>();

        throw $r38;

     label4:
        $r28 = new org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexWriter;

        specialinvoke $r28.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexWriter: void <init>(org.apache.lucene.store.IndexOutput)>($r14);

        r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexWriter indexWriter> = $r28;

        r44 = null;

        $r29 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.store.IndexOutput vectorsStream>;

        virtualinvoke $r29.<org.apache.lucene.store.IndexOutput: void writeVInt(int)>(1);

        $r30 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.store.IndexOutput vectorsStream>;

        virtualinvoke $r30.<org.apache.lucene.store.IndexOutput: void writeVInt(int)>(i0);

        $r31 = new org.apache.lucene.util.packed.BlockPackedWriter;

        $r32 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.store.IndexOutput vectorsStream>;

        specialinvoke $r31.<org.apache.lucene.util.packed.BlockPackedWriter: void <init>(org.apache.lucene.store.DataOutput,int)>($r32, 64);

        r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.util.packed.BlockPackedWriter writer> = $r31;

        $r33 = newarray (int)[1024];

        r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: int[] positionsBuf> = $r33;

        $r34 = newarray (int)[1024];

        r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: int[] startOffsetsBuf> = $r34;

        $r35 = newarray (int)[1024];

        r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: int[] lengthsBuf> = $r35;

        $r36 = newarray (int)[1024];

        r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: int[] payloadLengthsBuf> = $r36;

     label5:
        if 1 != 0 goto label9;

        $r37 = newarray (java.io.Closeable)[1];

        $r37[0] = null;

        staticinvoke <org.apache.lucene.util.IOUtils: void closeWhileHandlingException(java.io.Closeable[])>($r37);

        virtualinvoke r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: void abort()>();

        goto label9;

     label6:
        $r42 := @caughtexception;

     label7:
        if 0 != 0 goto label8;

        $r43 = newarray (java.io.Closeable)[1];

        $r43[0] = r44;

        staticinvoke <org.apache.lucene.util.IOUtils: void closeWhileHandlingException(java.io.Closeable[])>($r43);

        virtualinvoke r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: void abort()>();

     label8:
        throw $r42;

     label9:
        return;

        catch java.lang.Throwable from label2 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public void close() throws java.io.IOException
    {
        org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexWriter $r3;
        java.lang.Throwable $r4;
        java.io.Closeable[] $r0;
        org.apache.lucene.store.IndexOutput $r2;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter r1;

        r1 := @this: org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter;

     label1:
        $r0 = newarray (java.io.Closeable)[2];

        $r2 = r1.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.store.IndexOutput vectorsStream>;

        $r0[0] = $r2;

        $r3 = r1.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexWriter indexWriter>;

        $r0[1] = $r3;

        staticinvoke <org.apache.lucene.util.IOUtils: void close(java.io.Closeable[])>($r0);

     label2:
        r1.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.store.IndexOutput vectorsStream> = null;

        r1.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexWriter indexWriter> = null;

        goto label5;

     label3:
        $r4 := @caughtexception;

     label4:
        r1.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.store.IndexOutput vectorsStream> = null;

        r1.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexWriter indexWriter> = null;

        throw $r4;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void abort()
    {
        java.lang.String[] $r2;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter r1;
        org.apache.lucene.store.Directory $r5;
        java.io.Closeable[] $r0;
        java.lang.String $r3, $r4, $r6, $r7, $r8, $r9;

        r1 := @this: org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter;

        $r0 = newarray (java.io.Closeable)[1];

        $r0[0] = r1;

        staticinvoke <org.apache.lucene.util.IOUtils: void closeWhileHandlingException(java.io.Closeable[])>($r0);

        $r5 = r1.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.store.Directory directory>;

        $r2 = newarray (java.lang.String)[2];

        $r4 = r1.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: java.lang.String segment>;

        $r3 = r1.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: java.lang.String segmentSuffix>;

        $r6 = staticinvoke <org.apache.lucene.index.IndexFileNames: java.lang.String segmentFileName(java.lang.String,java.lang.String,java.lang.String)>($r4, $r3, "tvd");

        $r2[0] = $r6;

        $r8 = r1.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: java.lang.String segment>;

        $r7 = r1.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: java.lang.String segmentSuffix>;

        $r9 = staticinvoke <org.apache.lucene.index.IndexFileNames: java.lang.String segmentFileName(java.lang.String,java.lang.String,java.lang.String)>($r8, $r7, "tvx");

        $r2[1] = $r9;

        staticinvoke <org.apache.lucene.util.IOUtils: void deleteFilesIgnoringExceptions(org.apache.lucene.store.Directory,java.lang.String[])>($r5, $r2);

        return;
    }

    public void startDocument(int) throws java.io.IOException
    {
        int i0;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$DocData $r1;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter r0;

        r0 := @this: org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$DocData addDocData(int)>(i0);

        r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$DocData curDoc> = $r1;

        return;
    }

    public void finishDocument() throws java.io.IOException
    {
        byte[] $r3;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter r0;
        org.apache.lucene.codecs.compressing.GrowableByteArrayDataOutput $r1, $r2, $r4, $r5;
        int $i0, $i1, $i2;
        boolean $z0;

        r0 := @this: org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter;

        $r4 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.codecs.compressing.GrowableByteArrayDataOutput termSuffixes>;

        $r1 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.codecs.compressing.GrowableByteArrayDataOutput payloadBytes>;

        $r3 = $r1.<org.apache.lucene.codecs.compressing.GrowableByteArrayDataOutput: byte[] bytes>;

        $r2 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.codecs.compressing.GrowableByteArrayDataOutput payloadBytes>;

        $i0 = $r2.<org.apache.lucene.codecs.compressing.GrowableByteArrayDataOutput: int length>;

        virtualinvoke $r4.<org.apache.lucene.codecs.compressing.GrowableByteArrayDataOutput: void writeBytes(byte[],int)>($r3, $i0);

        $r5 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.codecs.compressing.GrowableByteArrayDataOutput payloadBytes>;

        $r5.<org.apache.lucene.codecs.compressing.GrowableByteArrayDataOutput: int length> = 0;

        $i1 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: int numDocs>;

        $i2 = $i1 + 1;

        r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: int numDocs> = $i2;

        $z0 = specialinvoke r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: boolean triggerFlush()>();

        if $z0 == 0 goto label1;

        specialinvoke r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: void flush()>();

     label1:
        r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$DocData curDoc> = null;

        return;
    }

    public void startField(org.apache.lucene.index.FieldInfo, int, boolean, boolean, boolean) throws java.io.IOException
    {
        org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$DocData $r2;
        org.apache.lucene.util.BytesRef $r4;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData $r3;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter r0;
        int i0, $i1;
        org.apache.lucene.index.FieldInfo r1;
        boolean z0, z1, z2;

        r0 := @this: org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter;

        r1 := @parameter0: org.apache.lucene.index.FieldInfo;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        z2 := @parameter4: boolean;

        $r2 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$DocData curDoc>;

        $i1 = r1.<org.apache.lucene.index.FieldInfo: int number>;

        $r3 = virtualinvoke $r2.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$DocData: org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData addField(int,int,boolean,boolean,boolean)>($i1, i0, z0, z1, z2);

        r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData curField> = $r3;

        $r4 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.util.BytesRef lastTerm>;

        $r4.<org.apache.lucene.util.BytesRef: int length> = 0;

        return;
    }

    public void finishField() throws java.io.IOException
    {
        org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter r0;

        r0 := @this: org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter;

        r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData curField> = null;

        return;
    }

    public void startTerm(org.apache.lucene.util.BytesRef, int) throws java.io.IOException
    {
        byte[] $r4, $r7, $r11, $r12, $r14;
        org.apache.lucene.codecs.compressing.GrowableByteArrayDataOutput $r5;
        boolean $z0;
        org.apache.lucene.util.BytesRef r1, $r2, $r6, $r8, $r9, $r10, $r13;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData $r3;
        java.lang.AssertionError $r15;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter r0;
        int $i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;

        r0 := @this: org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter;

        r1 := @parameter0: org.apache.lucene.util.BytesRef;

        i1 := @parameter1: int;

        $z0 = <org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i1 >= 1 goto label1;

        $r15 = new java.lang.AssertionError;

        specialinvoke $r15.<java.lang.AssertionError: void <init>()>();

        throw $r15;

     label1:
        $r2 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.util.BytesRef lastTerm>;

        $i0 = staticinvoke <org.apache.lucene.util.StringHelper: int bytesDifference(org.apache.lucene.util.BytesRef,org.apache.lucene.util.BytesRef)>($r2, r1);

        $r3 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData curField>;

        $i2 = r1.<org.apache.lucene.util.BytesRef: int length>;

        $i3 = $i2 - $i0;

        virtualinvoke $r3.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData: void addTerm(int,int,int)>(i1, $i0, $i3);

        $r5 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.codecs.compressing.GrowableByteArrayDataOutput termSuffixes>;

        $r4 = r1.<org.apache.lucene.util.BytesRef: byte[] bytes>;

        $i4 = r1.<org.apache.lucene.util.BytesRef: int offset>;

        $i7 = $i4 + $i0;

        $i5 = r1.<org.apache.lucene.util.BytesRef: int length>;

        $i6 = $i5 - $i0;

        virtualinvoke $r5.<org.apache.lucene.codecs.compressing.GrowableByteArrayDataOutput: void writeBytes(byte[],int,int)>($r4, $i7, $i6);

        $r6 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.util.BytesRef lastTerm>;

        $r7 = $r6.<org.apache.lucene.util.BytesRef: byte[] bytes>;

        $i9 = lengthof $r7;

        $i8 = r1.<org.apache.lucene.util.BytesRef: int length>;

        if $i9 >= $i8 goto label2;

        $r13 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.util.BytesRef lastTerm>;

        $i13 = r1.<org.apache.lucene.util.BytesRef: int length>;

        $i14 = staticinvoke <org.apache.lucene.util.ArrayUtil: int oversize(int,int)>($i13, 1);

        $r14 = newarray (byte)[$i14];

        $r13.<org.apache.lucene.util.BytesRef: byte[] bytes> = $r14;

     label2:
        $r8 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.util.BytesRef lastTerm>;

        $r8.<org.apache.lucene.util.BytesRef: int offset> = 0;

        $r9 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.util.BytesRef lastTerm>;

        $i10 = r1.<org.apache.lucene.util.BytesRef: int length>;

        $r9.<org.apache.lucene.util.BytesRef: int length> = $i10;

        $r12 = r1.<org.apache.lucene.util.BytesRef: byte[] bytes>;

        $i12 = r1.<org.apache.lucene.util.BytesRef: int offset>;

        $r10 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.util.BytesRef lastTerm>;

        $r11 = $r10.<org.apache.lucene.util.BytesRef: byte[] bytes>;

        $i11 = r1.<org.apache.lucene.util.BytesRef: int length>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r12, $i12, $r11, 0, $i11);

        return;
    }

    public void addPosition(int, int, int, org.apache.lucene.util.BytesRef) throws java.io.IOException
    {
        byte[] $r4;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData $r2, $r3, $r6;
        java.lang.AssertionError $r7;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter r0;
        org.apache.lucene.codecs.compressing.GrowableByteArrayDataOutput $r5;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7;
        boolean $z0, $z1;
        org.apache.lucene.util.BytesRef r1;

        r0 := @this: org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 := @parameter3: org.apache.lucene.util.BytesRef;

        $z0 = <org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r6 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData curField>;

        $i6 = $r6.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData: int flags>;

        if $i6 != 0 goto label1;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label1:
        $r2 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData curField>;

        $i3 = i2 - i1;

        if r1 != null goto label2;

        $i7 = 0;

        goto label3;

     label2:
        $i7 = r1.<org.apache.lucene.util.BytesRef: int length>;

     label3:
        virtualinvoke $r2.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData: void addPosition(int,int,int,int)>(i0, i1, $i3, $i7);

        $r3 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData curField>;

        $z1 = $r3.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData: boolean hasPayloads>;

        if $z1 == 0 goto label4;

        if r1 == null goto label4;

        $r5 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.codecs.compressing.GrowableByteArrayDataOutput payloadBytes>;

        $r4 = r1.<org.apache.lucene.util.BytesRef: byte[] bytes>;

        $i5 = r1.<org.apache.lucene.util.BytesRef: int offset>;

        $i4 = r1.<org.apache.lucene.util.BytesRef: int length>;

        virtualinvoke $r5.<org.apache.lucene.codecs.compressing.GrowableByteArrayDataOutput: void writeBytes(byte[],int,int)>($r4, $i5, $i4);

     label4:
        return;
    }

    private boolean triggerFlush()
    {
        org.apache.lucene.codecs.compressing.GrowableByteArrayDataOutput $r1;
        int $i0, $i1, $i2;
        java.util.Deque $r2;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter;

        $r1 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.codecs.compressing.GrowableByteArrayDataOutput termSuffixes>;

        $i1 = $r1.<org.apache.lucene.codecs.compressing.GrowableByteArrayDataOutput: int length>;

        $i0 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: int chunkSize>;

        if $i1 >= $i0 goto label1;

        $r2 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: java.util.Deque pendingDocs>;

        $i2 = interfaceinvoke $r2.<java.util.Deque: int size()>();

        if $i2 < 128 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    private void flush() throws java.io.IOException
    {
        org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexWriter $r3;
        byte[] $r12;
        long $l1;
        java.lang.AssertionError $r14;
        java.util.Deque $r1, $r6;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter r0;
        int[] $r8;
        org.apache.lucene.codecs.compressing.GrowableByteArrayDataOutput $r7, $r9, $r10;
        int $i0, $i2, $i3, $i4, $i5;
        org.apache.lucene.store.IndexOutput $r2, $r4, $r5, $r11;
        boolean $z0;
        org.apache.lucene.codecs.compressing.Compressor $r13;

        r0 := @this: org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter;

        $r1 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: java.util.Deque pendingDocs>;

        $i0 = interfaceinvoke $r1.<java.util.Deque: int size()>();

        $z0 = <org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if $i0 > 0 goto label1;

        $r14 = new java.lang.AssertionError;

        specialinvoke $r14.<java.lang.AssertionError: void <init>(int)>($i0);

        throw $r14;

     label1:
        $r3 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexWriter indexWriter>;

        $r2 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.store.IndexOutput vectorsStream>;

        $l1 = virtualinvoke $r2.<org.apache.lucene.store.IndexOutput: long getFilePointer()>();

        virtualinvoke $r3.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexWriter: void writeIndex(int,long)>($i0, $l1);

        $i2 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: int numDocs>;

        $i5 = $i2 - $i0;

        $r4 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.store.IndexOutput vectorsStream>;

        virtualinvoke $r4.<org.apache.lucene.store.IndexOutput: void writeVInt(int)>($i5);

        $r5 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.store.IndexOutput vectorsStream>;

        virtualinvoke $r5.<org.apache.lucene.store.IndexOutput: void writeVInt(int)>($i0);

        $i3 = specialinvoke r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: int flushNumFields(int)>($i0);

        if $i3 <= 0 goto label2;

        $r8 = specialinvoke r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: int[] flushFieldNums()>();

        specialinvoke r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: void flushFields(int,int[])>($i3, $r8);

        specialinvoke r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: void flushFlags(int,int[])>($i3, $r8);

        specialinvoke r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: void flushNumTerms(int)>($i3);

        specialinvoke r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: void flushTermLengths()>();

        specialinvoke r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: void flushTermFreqs()>();

        specialinvoke r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: void flushPositions()>();

        specialinvoke r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: void flushOffsets(int[])>($r8);

        specialinvoke r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: void flushPayloadLengths()>();

        $r13 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.codecs.compressing.Compressor compressor>;

        $r9 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.codecs.compressing.GrowableByteArrayDataOutput termSuffixes>;

        $r12 = $r9.<org.apache.lucene.codecs.compressing.GrowableByteArrayDataOutput: byte[] bytes>;

        $r10 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.codecs.compressing.GrowableByteArrayDataOutput termSuffixes>;

        $i4 = $r10.<org.apache.lucene.codecs.compressing.GrowableByteArrayDataOutput: int length>;

        $r11 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.store.IndexOutput vectorsStream>;

        virtualinvoke $r13.<org.apache.lucene.codecs.compressing.Compressor: void compress(byte[],int,int,org.apache.lucene.store.DataOutput)>($r12, 0, $i4, $r11);

     label2:
        $r6 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: java.util.Deque pendingDocs>;

        interfaceinvoke $r6.<java.util.Deque: void clear()>();

        r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$DocData curDoc> = null;

        r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData curField> = null;

        $r7 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.codecs.compressing.GrowableByteArrayDataOutput termSuffixes>;

        $r7.<org.apache.lucene.codecs.compressing.GrowableByteArrayDataOutput: int length> = 0;

        return;
    }

    private int flushNumFields(int) throws java.io.IOException
    {
        long $l2;
        java.util.Deque $r3, $r9;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter r0;
        org.apache.lucene.util.packed.BlockPackedWriter $r2, $r5, $r8;
        int i0, $i1, $i3, i4, i5;
        org.apache.lucene.store.IndexOutput $r1, $r12;
        boolean $z0;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$DocData r7, $r11;
        java.util.Iterator $r4;
        java.lang.Object $r6, $r10;

        r0 := @this: org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter;

        i0 := @parameter0: int;

        if i0 != 1 goto label1;

        $r9 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: java.util.Deque pendingDocs>;

        $r10 = interfaceinvoke $r9.<java.util.Deque: java.lang.Object getFirst()>();

        $r11 = (org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$DocData) $r10;

        i4 = $r11.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$DocData: int numFields>;

        $r12 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.store.IndexOutput vectorsStream>;

        virtualinvoke $r12.<org.apache.lucene.store.IndexOutput: void writeVInt(int)>(i4);

        return i4;

     label1:
        $r2 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.util.packed.BlockPackedWriter writer>;

        $r1 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.store.IndexOutput vectorsStream>;

        virtualinvoke $r2.<org.apache.lucene.util.packed.BlockPackedWriter: void reset(org.apache.lucene.store.DataOutput)>($r1);

        i5 = 0;

        $r3 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: java.util.Deque pendingDocs>;

        $r4 = interfaceinvoke $r3.<java.util.Deque: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$DocData) $r6;

        $r8 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.util.packed.BlockPackedWriter writer>;

        $i1 = r7.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$DocData: int numFields>;

        $l2 = (long) $i1;

        virtualinvoke $r8.<org.apache.lucene.util.packed.BlockPackedWriter: void add(long)>($l2);

        $i3 = r7.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$DocData: int numFields>;

        i5 = i5 + $i3;

        goto label2;

     label3:
        $r5 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.util.packed.BlockPackedWriter writer>;

        virtualinvoke $r5.<org.apache.lucene.util.packed.BlockPackedWriter: void finish()>();

        return i5;
    }

    private int[] flushFieldNums() throws java.io.IOException
    {
        java.lang.Integer $r5, r13, $r21, r24;
        byte $b7;
        int[] r25;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.lucene.util.packed.PackedInts$Writer $r9;
        long $l2, $l14;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData r23;
        java.lang.AssertionError $r16;
        java.util.Deque $r2, $r18;
        java.util.TreeSet $r0;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter r1;
        int $i0, $i1, $i3, $i4, $i5, $i6, $i8, $i9, $i10, $i11, $i12, $i13, $i15, $i16, $i17, $i18, i19;
        org.apache.lucene.store.IndexOutput $r6, $r7, $r15;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$DocData r22;
        java.util.Iterator $r3, $r10, $r11, $r19;
        org.apache.lucene.util.packed.PackedInts$Format $r8;
        java.lang.Object $r4, $r12, $r14, $r17, $r20;

        r1 := @this: org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter;

        $r0 = new java.util.TreeSet;

        specialinvoke $r0.<java.util.TreeSet: void <init>()>();

        $r2 = r1.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: java.util.Deque pendingDocs>;

        $r3 = interfaceinvoke $r2.<java.util.Deque: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label04;

        $r17 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r22 = (org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$DocData) $r17;

        $r18 = r22.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$DocData: java.util.Deque fields>;

        $r19 = interfaceinvoke $r18.<java.util.Deque: java.util.Iterator iterator()>();

     label02:
        $z3 = interfaceinvoke $r19.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label03;

        $r20 = interfaceinvoke $r19.<java.util.Iterator: java.lang.Object next()>();

        r23 = (org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData) $r20;

        $i18 = r23.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData: int fieldNum>;

        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i18);

        interfaceinvoke $r0.<java.util.SortedSet: boolean add(java.lang.Object)>($r21);

        goto label02;

     label03:
        goto label01;

     label04:
        $i0 = interfaceinvoke $r0.<java.util.SortedSet: int size()>();

        $z1 = <org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: boolean $assertionsDisabled>;

        if $z1 != 0 goto label05;

        if $i0 > 0 goto label05;

        $r16 = new java.lang.AssertionError;

        specialinvoke $r16.<java.lang.AssertionError: void <init>()>();

        throw $r16;

     label05:
        $r4 = interfaceinvoke $r0.<java.util.SortedSet: java.lang.Object last()>();

        $r5 = (java.lang.Integer) $r4;

        $i1 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        $l2 = (long) $i1;

        $i3 = staticinvoke <org.apache.lucene.util.packed.PackedInts: int bitsRequired(long)>($l2);

        $i4 = $i0 - 1;

        $i5 = staticinvoke <java.lang.Math: int min(int,int)>($i4, 7);

        $i6 = $i5 << 5;

        $i17 = $i6 | $i3;

        $r6 = r1.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.store.IndexOutput vectorsStream>;

        $b7 = (byte) $i17;

        virtualinvoke $r6.<org.apache.lucene.store.IndexOutput: void writeByte(byte)>($b7);

        $i8 = $i0 - 1;

        if $i8 < 7 goto label06;

        $r15 = r1.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.store.IndexOutput vectorsStream>;

        $i15 = $i0 - 1;

        $i16 = $i15 - 7;

        virtualinvoke $r15.<org.apache.lucene.store.IndexOutput: void writeVInt(int)>($i16);

     label06:
        $r7 = r1.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.store.IndexOutput vectorsStream>;

        $r8 = <org.apache.lucene.util.packed.PackedInts$Format: org.apache.lucene.util.packed.PackedInts$Format PACKED>;

        $i9 = interfaceinvoke $r0.<java.util.SortedSet: int size()>();

        $r9 = staticinvoke <org.apache.lucene.util.packed.PackedInts: org.apache.lucene.util.packed.PackedInts$Writer getWriterNoHeader(org.apache.lucene.store.DataOutput,org.apache.lucene.util.packed.PackedInts$Format,int,int,int)>($r7, $r8, $i9, $i3, 1);

        $r10 = interfaceinvoke $r0.<java.util.SortedSet: java.util.Iterator iterator()>();

     label07:
        $z4 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label08;

        $r14 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r24 = (java.lang.Integer) $r14;

        $i13 = virtualinvoke r24.<java.lang.Integer: int intValue()>();

        $l14 = (long) $i13;

        virtualinvoke $r9.<org.apache.lucene.util.packed.PackedInts$Writer: void add(long)>($l14);

        goto label07;

     label08:
        virtualinvoke $r9.<org.apache.lucene.util.packed.PackedInts$Writer: void finish()>();

        $i10 = interfaceinvoke $r0.<java.util.SortedSet: int size()>();

        r25 = newarray (int)[$i10];

        i19 = 0;

        $r11 = interfaceinvoke $r0.<java.util.SortedSet: java.util.Iterator iterator()>();

     label09:
        $z2 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label10;

        $r12 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r13 = (java.lang.Integer) $r12;

        $i11 = i19;

        i19 = i19 + 1;

        $i12 = virtualinvoke r13.<java.lang.Integer: int intValue()>();

        r25[$i11] = $i12;

        goto label09;

     label10:
        return r25;
    }

    private void flushFields(int, int[]) throws java.io.IOException
    {
        long $l3, $l7;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData r12;
        java.lang.AssertionError $r13;
        java.util.Deque $r5, $r9;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter r0;
        int[] r1;
        int i0, $i1, $i2, $i4, $i5, $i6;
        org.apache.lucene.store.IndexOutput $r2;
        boolean $z0, $z1, $z2;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$DocData r8;
        java.util.Iterator $r6, $r10;
        org.apache.lucene.util.packed.PackedInts$Format $r3;
        org.apache.lucene.util.packed.PackedInts$Writer $r4;
        java.lang.Object $r7, $r11;

        r0 := @this: org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter;

        i0 := @parameter0: int;

        r1 := @parameter1: int[];

        $r2 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.store.IndexOutput vectorsStream>;

        $r3 = <org.apache.lucene.util.packed.PackedInts$Format: org.apache.lucene.util.packed.PackedInts$Format PACKED>;

        $i1 = lengthof r1;

        $i2 = $i1 - 1;

        $l3 = (long) $i2;

        $i4 = staticinvoke <org.apache.lucene.util.packed.PackedInts: int bitsRequired(long)>($l3);

        $r4 = staticinvoke <org.apache.lucene.util.packed.PackedInts: org.apache.lucene.util.packed.PackedInts$Writer getWriterNoHeader(org.apache.lucene.store.DataOutput,org.apache.lucene.util.packed.PackedInts$Format,int,int,int)>($r2, $r3, i0, $i4, 1);

        $r5 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: java.util.Deque pendingDocs>;

        $r6 = interfaceinvoke $r5.<java.util.Deque: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$DocData) $r7;

        $r9 = r8.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$DocData: java.util.Deque fields>;

        $r10 = interfaceinvoke $r9.<java.util.Deque: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r12 = (org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData) $r11;

        $i5 = r12.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData: int fieldNum>;

        $i6 = staticinvoke <java.util.Arrays: int binarySearch(int[],int)>(r1, $i5);

        $z2 = <org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: boolean $assertionsDisabled>;

        if $z2 != 0 goto label3;

        if $i6 >= 0 goto label3;

        $r13 = new java.lang.AssertionError;

        specialinvoke $r13.<java.lang.AssertionError: void <init>()>();

        throw $r13;

     label3:
        $l7 = (long) $i6;

        virtualinvoke $r4.<org.apache.lucene.util.packed.PackedInts$Writer: void add(long)>($l7);

        goto label2;

     label4:
        goto label1;

     label5:
        virtualinvoke $r4.<org.apache.lucene.util.packed.PackedInts$Writer: void finish()>();

        return;
    }

    private void flushFlags(int, int[]) throws java.io.IOException
    {
        long $l6, $l12;
        java.lang.AssertionError $r31, $r32, $r33, $r34;
        org.apache.lucene.util.packed.PackedInts$Format $r6, $r17;
        int[] r0, r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, z8;
        org.apache.lucene.util.packed.PackedInts$Writer $r8, $r19;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData r28, r30;
        java.util.Deque $r3, $r9, $r13, $r23;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter r2;
        int $i0, i1, $i2, $i3, $i4, $i5, $i7, $i8, $i9, $i10, $i11, $i13, $i14, $i15, $i16, $i17, $i18, i19, i20, i21, $i23, $i25;
        org.apache.lucene.store.IndexOutput $r5, $r7, $r16, $r18;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$DocData r27, r29;
        java.util.Iterator $r4, $r10, $r14, $r24;
        java.lang.Object $r12, $r15, $r22, $r25;

        r2 := @this: org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter;

        i1 := @parameter0: int;

        r0 := @parameter1: int[];

        z8 = 1;

        $i0 = lengthof r0;

        r1 = newarray (int)[$i0];

        $i23 = (int) -1;

        staticinvoke <java.util.Arrays: void fill(int[],int)>(r1, $i23);

        $r3 = r2.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: java.util.Deque pendingDocs>;

        $r4 = interfaceinvoke $r3.<java.util.Deque: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label07;

        $r22 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r27 = (org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$DocData) $r22;

        $r23 = r27.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$DocData: java.util.Deque fields>;

        $r24 = interfaceinvoke $r23.<java.util.Deque: java.util.Iterator iterator()>();

     label02:
        $z6 = interfaceinvoke $r24.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label06;

        $r25 = interfaceinvoke $r24.<java.util.Iterator: java.lang.Object next()>();

        r28 = (org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData) $r25;

        $i13 = r28.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData: int fieldNum>;

        $i14 = staticinvoke <java.util.Arrays: int binarySearch(int[],int)>(r0, $i13);

        $z7 = <org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: boolean $assertionsDisabled>;

        if $z7 != 0 goto label03;

        if $i14 >= 0 goto label03;

        $r31 = new java.lang.AssertionError;

        specialinvoke $r31.<java.lang.AssertionError: void <init>()>();

        throw $r31;

     label03:
        $i15 = r1[$i14];

        $i25 = (int) -1;

        if $i15 != $i25 goto label04;

        $i18 = r28.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData: int flags>;

        r1[$i14] = $i18;

        goto label05;

     label04:
        $i17 = r1[$i14];

        $i16 = r28.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData: int flags>;

        if $i17 == $i16 goto label05;

        z8 = 0;

        goto label07;

     label05:
        goto label02;

     label06:
        goto label01;

     label07:
        if z8 == 0 goto label12;

        $r16 = r2.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.store.IndexOutput vectorsStream>;

        virtualinvoke $r16.<org.apache.lucene.store.IndexOutput: void writeVInt(int)>(0);

        $r18 = r2.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.store.IndexOutput vectorsStream>;

        $r17 = <org.apache.lucene.util.packed.PackedInts$Format: org.apache.lucene.util.packed.PackedInts$Format PACKED>;

        $i8 = lengthof r1;

        $i7 = <org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: int FLAGS_BITS>;

        $r19 = staticinvoke <org.apache.lucene.util.packed.PackedInts: org.apache.lucene.util.packed.PackedInts$Writer getWriterNoHeader(org.apache.lucene.store.DataOutput,org.apache.lucene.util.packed.PackedInts$Format,int,int,int)>($r18, $r17, $i8, $i7, 1);

        i19 = lengthof r1;

        i20 = 0;

     label08:
        if i20 >= i19 goto label10;

        i21 = r1[i20];

        $z5 = <org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: boolean $assertionsDisabled>;

        if $z5 != 0 goto label09;

        if i21 >= 0 goto label09;

        $r32 = new java.lang.AssertionError;

        specialinvoke $r32.<java.lang.AssertionError: void <init>()>();

        throw $r32;

     label09:
        $l12 = (long) i21;

        virtualinvoke $r19.<org.apache.lucene.util.packed.PackedInts$Writer: void add(long)>($l12);

        i20 = i20 + 1;

        goto label08;

     label10:
        $z4 = <org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: boolean $assertionsDisabled>;

        if $z4 != 0 goto label11;

        $i9 = virtualinvoke $r19.<org.apache.lucene.util.packed.PackedInts$Writer: int ord()>();

        $i10 = lengthof r1;

        $i11 = $i10 - 1;

        if $i9 == $i11 goto label11;

        $r33 = new java.lang.AssertionError;

        specialinvoke $r33.<java.lang.AssertionError: void <init>()>();

        throw $r33;

     label11:
        virtualinvoke $r19.<org.apache.lucene.util.packed.PackedInts$Writer: void finish()>();

        goto label18;

     label12:
        $r5 = r2.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.store.IndexOutput vectorsStream>;

        virtualinvoke $r5.<org.apache.lucene.store.IndexOutput: void writeVInt(int)>(1);

        $r7 = r2.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.store.IndexOutput vectorsStream>;

        $r6 = <org.apache.lucene.util.packed.PackedInts$Format: org.apache.lucene.util.packed.PackedInts$Format PACKED>;

        $i2 = <org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: int FLAGS_BITS>;

        $r8 = staticinvoke <org.apache.lucene.util.packed.PackedInts: org.apache.lucene.util.packed.PackedInts$Writer getWriterNoHeader(org.apache.lucene.store.DataOutput,org.apache.lucene.util.packed.PackedInts$Format,int,int,int)>($r7, $r6, i1, $i2, 1);

        $r9 = r2.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: java.util.Deque pendingDocs>;

        $r10 = interfaceinvoke $r9.<java.util.Deque: java.util.Iterator iterator()>();

     label13:
        $z1 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label16;

        $r12 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r29 = (org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$DocData) $r12;

        $r13 = r29.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$DocData: java.util.Deque fields>;

        $r14 = interfaceinvoke $r13.<java.util.Deque: java.util.Iterator iterator()>();

     label14:
        $z3 = interfaceinvoke $r14.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label15;

        $r15 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>();

        r30 = (org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData) $r15;

        $i5 = r30.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData: int flags>;

        $l6 = (long) $i5;

        virtualinvoke $r8.<org.apache.lucene.util.packed.PackedInts$Writer: void add(long)>($l6);

        goto label14;

     label15:
        goto label13;

     label16:
        $z2 = <org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: boolean $assertionsDisabled>;

        if $z2 != 0 goto label17;

        $i3 = virtualinvoke $r8.<org.apache.lucene.util.packed.PackedInts$Writer: int ord()>();

        $i4 = i1 - 1;

        if $i3 == $i4 goto label17;

        $r34 = new java.lang.AssertionError;

        specialinvoke $r34.<java.lang.AssertionError: void <init>()>();

        throw $r34;

     label17:
        virtualinvoke $r8.<org.apache.lucene.util.packed.PackedInts$Writer: void finish()>();

     label18:
        return;
    }

    private void flushNumTerms(int) throws java.io.IOException
    {
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.lucene.util.packed.PackedInts$Writer $r6;
        long $l0, $l6;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData r14, r20;
        java.lang.AssertionError $r9;
        java.util.Deque $r1, $r7, $r11, $r16;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter r0;
        int $i1, i2, $i3, $i4, $i5, $i7, i8;
        org.apache.lucene.store.IndexOutput $r3, $r5;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$DocData r19, r21;
        java.util.Iterator $r2, $r8, $r12, $r17;
        org.apache.lucene.util.packed.PackedInts$Format $r4;
        java.lang.Object $r10, $r13, $r15, $r18;

        r0 := @this: org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter;

        i2 := @parameter0: int;

        i8 = 0;

        $r1 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: java.util.Deque pendingDocs>;

        $r2 = interfaceinvoke $r1.<java.util.Deque: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r15 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r19 = (org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$DocData) $r15;

        $r16 = r19.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$DocData: java.util.Deque fields>;

        $r17 = interfaceinvoke $r16.<java.util.Deque: java.util.Iterator iterator()>();

     label2:
        $z4 = interfaceinvoke $r17.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label3;

        $r18 = interfaceinvoke $r17.<java.util.Iterator: java.lang.Object next()>();

        r20 = (org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData) $r18;

        $i7 = r20.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData: int numTerms>;

        i8 = i8 | $i7;

        goto label2;

     label3:
        goto label1;

     label4:
        $l0 = (long) i8;

        $i1 = staticinvoke <org.apache.lucene.util.packed.PackedInts: int bitsRequired(long)>($l0);

        $r3 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.store.IndexOutput vectorsStream>;

        virtualinvoke $r3.<org.apache.lucene.store.IndexOutput: void writeVInt(int)>($i1);

        $r5 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.store.IndexOutput vectorsStream>;

        $r4 = <org.apache.lucene.util.packed.PackedInts$Format: org.apache.lucene.util.packed.PackedInts$Format PACKED>;

        $r6 = staticinvoke <org.apache.lucene.util.packed.PackedInts: org.apache.lucene.util.packed.PackedInts$Writer getWriterNoHeader(org.apache.lucene.store.DataOutput,org.apache.lucene.util.packed.PackedInts$Format,int,int,int)>($r5, $r4, i2, $i1, 1);

        $r7 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: java.util.Deque pendingDocs>;

        $r8 = interfaceinvoke $r7.<java.util.Deque: java.util.Iterator iterator()>();

     label5:
        $z1 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label8;

        $r10 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r21 = (org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$DocData) $r10;

        $r11 = r21.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$DocData: java.util.Deque fields>;

        $r12 = interfaceinvoke $r11.<java.util.Deque: java.util.Iterator iterator()>();

     label6:
        $z3 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label7;

        $r13 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r14 = (org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData) $r13;

        $i5 = r14.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData: int numTerms>;

        $l6 = (long) $i5;

        virtualinvoke $r6.<org.apache.lucene.util.packed.PackedInts$Writer: void add(long)>($l6);

        goto label6;

     label7:
        goto label5;

     label8:
        $z2 = <org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: boolean $assertionsDisabled>;

        if $z2 != 0 goto label9;

        $i3 = virtualinvoke $r6.<org.apache.lucene.util.packed.PackedInts$Writer: int ord()>();

        $i4 = i2 - 1;

        if $i3 == $i4 goto label9;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label9:
        virtualinvoke $r6.<org.apache.lucene.util.packed.PackedInts$Writer: void finish()>();

        return;
    }

    private void flushTermLengths() throws java.io.IOException
    {
        int[] $r15, $r21;
        boolean $z0, $z1, $z2, $z3;
        long $l2, $l5;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData r24, r26;
        java.util.Deque $r3, $r8, $r12, $r18;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter r0;
        org.apache.lucene.util.packed.BlockPackedWriter $r2, $r5, $r7, $r10, $r16, $r22;
        int $i0, $i1, $i3, $i4, i6, i7;
        org.apache.lucene.store.IndexOutput $r1, $r6;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$DocData r23, r25;
        java.util.Iterator $r4, $r9, $r13, $r19;
        java.lang.Object $r11, $r14, $r17, $r20;

        r0 := @this: org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter;

        $r2 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.util.packed.BlockPackedWriter writer>;

        $r1 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.store.IndexOutput vectorsStream>;

        virtualinvoke $r2.<org.apache.lucene.util.packed.BlockPackedWriter: void reset(org.apache.lucene.store.DataOutput)>($r1);

        $r3 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: java.util.Deque pendingDocs>;

        $r4 = interfaceinvoke $r3.<java.util.Deque: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label06;

        $r17 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r23 = (org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$DocData) $r17;

        $r18 = r23.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$DocData: java.util.Deque fields>;

        $r19 = interfaceinvoke $r18.<java.util.Deque: java.util.Iterator iterator()>();

     label02:
        $z3 = interfaceinvoke $r19.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label05;

        $r20 = interfaceinvoke $r19.<java.util.Iterator: java.lang.Object next()>();

        r24 = (org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData) $r20;

        i6 = 0;

     label03:
        $i3 = r24.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData: int numTerms>;

        if i6 >= $i3 goto label04;

        $r22 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.util.packed.BlockPackedWriter writer>;

        $r21 = r24.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData: int[] prefixLengths>;

        $i4 = $r21[i6];

        $l5 = (long) $i4;

        virtualinvoke $r22.<org.apache.lucene.util.packed.BlockPackedWriter: void add(long)>($l5);

        i6 = i6 + 1;

        goto label03;

     label04:
        goto label02;

     label05:
        goto label01;

     label06:
        $r5 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.util.packed.BlockPackedWriter writer>;

        virtualinvoke $r5.<org.apache.lucene.util.packed.BlockPackedWriter: void finish()>();

        $r7 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.util.packed.BlockPackedWriter writer>;

        $r6 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.store.IndexOutput vectorsStream>;

        virtualinvoke $r7.<org.apache.lucene.util.packed.BlockPackedWriter: void reset(org.apache.lucene.store.DataOutput)>($r6);

        $r8 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: java.util.Deque pendingDocs>;

        $r9 = interfaceinvoke $r8.<java.util.Deque: java.util.Iterator iterator()>();

     label07:
        $z1 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label12;

        $r11 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r25 = (org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$DocData) $r11;

        $r12 = r25.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$DocData: java.util.Deque fields>;

        $r13 = interfaceinvoke $r12.<java.util.Deque: java.util.Iterator iterator()>();

     label08:
        $z2 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label11;

        $r14 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r26 = (org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData) $r14;

        i7 = 0;

     label09:
        $i0 = r26.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData: int numTerms>;

        if i7 >= $i0 goto label10;

        $r16 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.util.packed.BlockPackedWriter writer>;

        $r15 = r26.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData: int[] suffixLengths>;

        $i1 = $r15[i7];

        $l2 = (long) $i1;

        virtualinvoke $r16.<org.apache.lucene.util.packed.BlockPackedWriter: void add(long)>($l2);

        i7 = i7 + 1;

        goto label09;

     label10:
        goto label08;

     label11:
        goto label07;

     label12:
        $r10 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.util.packed.BlockPackedWriter writer>;

        virtualinvoke $r10.<org.apache.lucene.util.packed.BlockPackedWriter: void finish()>();

        return;
    }

    private void flushTermFreqs() throws java.io.IOException
    {
        org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData r11;
        long $l3;
        java.util.Deque $r3, $r8;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter r0;
        org.apache.lucene.util.packed.BlockPackedWriter $r2, $r5, $r13;
        int[] $r12;
        int $i0, $i1, $i2, i4;
        org.apache.lucene.store.IndexOutput $r1;
        boolean $z0, $z1;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$DocData r7;
        java.util.Iterator $r4, $r9;
        java.lang.Object $r6, $r10;

        r0 := @this: org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter;

        $r2 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.util.packed.BlockPackedWriter writer>;

        $r1 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.store.IndexOutput vectorsStream>;

        virtualinvoke $r2.<org.apache.lucene.util.packed.BlockPackedWriter: void reset(org.apache.lucene.store.DataOutput)>($r1);

        $r3 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: java.util.Deque pendingDocs>;

        $r4 = interfaceinvoke $r3.<java.util.Deque: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r6 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$DocData) $r6;

        $r8 = r7.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$DocData: java.util.Deque fields>;

        $r9 = interfaceinvoke $r8.<java.util.Deque: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r11 = (org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData) $r10;

        i4 = 0;

     label3:
        $i0 = r11.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData: int numTerms>;

        if i4 >= $i0 goto label4;

        $r13 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.util.packed.BlockPackedWriter writer>;

        $r12 = r11.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData: int[] freqs>;

        $i1 = $r12[i4];

        $i2 = $i1 - 1;

        $l3 = (long) $i2;

        virtualinvoke $r13.<org.apache.lucene.util.packed.BlockPackedWriter: void add(long)>($l3);

        i4 = i4 + 1;

        goto label3;

     label4:
        goto label2;

     label5:
        goto label1;

     label6:
        $r5 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.util.packed.BlockPackedWriter writer>;

        virtualinvoke $r5.<org.apache.lucene.util.packed.BlockPackedWriter: void finish()>();

        return;
    }

    private void flushPositions() throws java.io.IOException
    {
        int[] $r13, $r14;
        boolean $z0, $z1, $z2, $z3;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData r11;
        long $l8;
        java.lang.AssertionError $r12;
        java.util.Deque $r3, $r8;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter r0;
        org.apache.lucene.util.packed.BlockPackedWriter $r2, $r5, $r15;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, $i7, i9, i10, i11, i12;
        org.apache.lucene.store.IndexOutput $r1;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$DocData r7;
        java.util.Iterator $r4, $r9;
        java.lang.Object $r6, $r10;

        r0 := @this: org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter;

        $r2 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.util.packed.BlockPackedWriter writer>;

        $r1 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.store.IndexOutput vectorsStream>;

        virtualinvoke $r2.<org.apache.lucene.util.packed.BlockPackedWriter: void reset(org.apache.lucene.store.DataOutput)>($r1);

        $r3 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: java.util.Deque pendingDocs>;

        $r4 = interfaceinvoke $r3.<java.util.Deque: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label9;

        $r6 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$DocData) $r6;

        $r8 = r7.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$DocData: java.util.Deque fields>;

        $r9 = interfaceinvoke $r8.<java.util.Deque: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label8;

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r11 = (org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData) $r10;

        $z2 = r11.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData: boolean hasPositions>;

        if $z2 == 0 goto label7;

        i9 = 0;

        i10 = 0;

     label3:
        $i0 = r11.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData: int numTerms>;

        if i10 >= $i0 goto label6;

        i11 = 0;

        i12 = 0;

     label4:
        $r13 = r11.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData: int[] freqs>;

        $i2 = $r13[i10];

        if i12 >= $i2 goto label5;

        $r14 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: int[] positionsBuf>;

        $i4 = r11.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData: int posStart>;

        $i3 = i9;

        i9 = i9 + 1;

        $i5 = $i4 + $i3;

        i6 = $r14[$i5];

        $r15 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.util.packed.BlockPackedWriter writer>;

        $i7 = i6 - i11;

        $l8 = (long) $i7;

        virtualinvoke $r15.<org.apache.lucene.util.packed.BlockPackedWriter: void add(long)>($l8);

        i11 = i6;

        i12 = i12 + 1;

        goto label4;

     label5:
        i10 = i10 + 1;

        goto label3;

     label6:
        $z3 = <org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: boolean $assertionsDisabled>;

        if $z3 != 0 goto label7;

        $i1 = r11.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData: int totalPositions>;

        if i9 == $i1 goto label7;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label7:
        goto label2;

     label8:
        goto label1;

     label9:
        $r5 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.util.packed.BlockPackedWriter writer>;

        virtualinvoke $r5.<org.apache.lucene.util.packed.BlockPackedWriter: void finish()>();

        return;
    }

    private void flushOffsets(int[]) throws java.io.IOException
    {
        byte $b37, $b39;
        long $l18, $l31, $l36, $l38, $l40, $l41, $l53, $l54, $l55, $l57, $l58, $l59;
        float[] r45;
        int[] r0, $r21, $r22, $r23, $r24, $r30, $r31, $r33, $r40, $r41, $r42;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter r3;
        long[] r1, r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i32, $i33, $i34, $i35, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i56, i60, i61, i62, i63, i64, i65, i66, i67, i68, i69, i70, i71, i72, i73, $i74, i75, i76, i77, $i78, $i79;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$DocData r43, r46, r48;
        java.lang.Object $r16, $r19, $r26, $r29, $r35, $r38;
        java.lang.AssertionError $r50, $r51;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, z12;
        float $f0, $f1, $f2, $f3, f4;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData r44, r47, r49;
        java.util.Deque $r4, $r8, $r13, $r17, $r27, $r36;
        org.apache.lucene.util.packed.BlockPackedWriter $r7, $r10, $r12, $r15, $r25, $r32;
        org.apache.lucene.store.IndexOutput $r6, $r11, $r34;
        double $d0, $d1, $d2;
        java.util.Iterator $r5, $r9, $r14, $r18, $r28, $r37;

        r3 := @this: org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter;

        r0 := @parameter0: int[];

        z12 = 0;

        $i0 = lengthof r0;

        r1 = newarray (long)[$i0];

        $i1 = lengthof r0;

        r2 = newarray (long)[$i1];

        $r4 = r3.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: java.util.Deque pendingDocs>;

        $r5 = interfaceinvoke $r4.<java.util.Deque: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label09;

        $r35 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r43 = (org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$DocData) $r35;

        $r36 = r43.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$DocData: java.util.Deque fields>;

        $r37 = interfaceinvoke $r36.<java.util.Deque: java.util.Iterator iterator()>();

     label02:
        $z7 = interfaceinvoke $r37.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label08;

        $r38 = interfaceinvoke $r37.<java.util.Iterator: java.lang.Object next()>();

        r44 = (org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData) $r38;

        $z8 = r44.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData: boolean hasOffsets>;

        z12 = z12 | $z8;

        $z9 = r44.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData: boolean hasOffsets>;

        if $z9 == 0 goto label07;

        $z10 = r44.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData: boolean hasPositions>;

        if $z10 == 0 goto label07;

        $i43 = r44.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData: int fieldNum>;

        $i44 = staticinvoke <java.util.Arrays: int binarySearch(int[],int)>(r0, $i43);

        i60 = 0;

        i61 = 0;

     label03:
        $i45 = r44.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData: int numTerms>;

        if i61 >= $i45 goto label06;

        i62 = 0;

        i63 = 0;

        i64 = 0;

     label04:
        $r40 = r44.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData: int[] freqs>;

        $i47 = $r40[i61];

        if i64 >= $i47 goto label05;

        $r41 = r3.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: int[] positionsBuf>;

        $i48 = r44.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData: int posStart>;

        $i49 = $i48 + i60;

        i65 = $r41[$i49];

        $r42 = r3.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: int[] startOffsetsBuf>;

        $i50 = r44.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData: int offStart>;

        $i51 = $i50 + i60;

        i66 = $r42[$i51];

        $l54 = r1[$i44];

        $i52 = i65 - i62;

        $l53 = (long) $i52;

        $l55 = $l54 + $l53;

        r1[$i44] = $l55;

        $l58 = r2[$i44];

        $i56 = i66 - i63;

        $l57 = (long) $i56;

        $l59 = $l58 + $l57;

        r2[$i44] = $l59;

        i62 = i65;

        i63 = i66;

        i60 = i60 + 1;

        i64 = i64 + 1;

        goto label04;

     label05:
        i61 = i61 + 1;

        goto label03;

     label06:
        $z11 = <org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: boolean $assertionsDisabled>;

        if $z11 != 0 goto label07;

        $i46 = r44.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData: int totalPositions>;

        if i60 == $i46 goto label07;

        $r50 = new java.lang.AssertionError;

        specialinvoke $r50.<java.lang.AssertionError: void <init>()>();

        throw $r50;

     label07:
        goto label02;

     label08:
        goto label01;

     label09:
        if z12 != 0 goto label10;

        return;

     label10:
        $i2 = lengthof r0;

        r45 = newarray (float)[$i2];

        i67 = 0;

     label11:
        $i3 = lengthof r0;

        if i67 >= $i3 goto label15;

        $i42 = i67;

        $l36 = r1[i67];

        $b37 = $l36 cmp 0L;

        $i78 = (int) $b37;

        if $i78 <= 0 goto label12;

        $l38 = r2[i67];

        $b39 = $l38 cmp 0L;

        $i79 = (int) $b39;

        if $i79 > 0 goto label13;

     label12:
        $f3 = 0.0F;

        goto label14;

     label13:
        $l40 = r2[i67];

        $d1 = (double) $l40;

        $l41 = r1[i67];

        $d0 = (double) $l41;

        $d2 = $d1 / $d0;

        $f3 = (float) $d2;

     label14:
        r45[$i42] = $f3;

        i67 = i67 + 1;

        goto label11;

     label15:
        i68 = 0;

     label16:
        $i4 = lengthof r0;

        if i68 >= $i4 goto label17;

        $r34 = r3.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.store.IndexOutput vectorsStream>;

        $f2 = r45[i68];

        $i35 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>($f2);

        virtualinvoke $r34.<org.apache.lucene.store.IndexOutput: void writeInt(int)>($i35);

        i68 = i68 + 1;

        goto label16;

     label17:
        $r7 = r3.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.util.packed.BlockPackedWriter writer>;

        $r6 = r3.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.store.IndexOutput vectorsStream>;

        virtualinvoke $r7.<org.apache.lucene.util.packed.BlockPackedWriter: void reset(org.apache.lucene.store.DataOutput)>($r6);

        $r8 = r3.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: java.util.Deque pendingDocs>;

        $r9 = interfaceinvoke $r8.<java.util.Deque: java.util.Iterator iterator()>();

     label18:
        $z1 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label27;

        $r26 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r46 = (org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$DocData) $r26;

        $r27 = r46.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$DocData: java.util.Deque fields>;

        $r28 = interfaceinvoke $r27.<java.util.Deque: java.util.Iterator iterator()>();

     label19:
        $z5 = interfaceinvoke $r28.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label26;

        $r29 = interfaceinvoke $r28.<java.util.Iterator: java.lang.Object next()>();

        r47 = (org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData) $r29;

        $i19 = r47.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData: int flags>;

        $i20 = $i19 & 2;

        if $i20 == 0 goto label25;

        $i21 = r47.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData: int fieldNum>;

        $i22 = staticinvoke <java.util.Arrays: int binarySearch(int[],int)>(r0, $i21);

        f4 = r45[$i22];

        i69 = 0;

        i70 = 0;

     label20:
        $i23 = r47.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData: int numTerms>;

        if i70 >= $i23 goto label25;

        i71 = 0;

        i72 = 0;

        i73 = 0;

     label21:
        $r30 = r47.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData: int[] freqs>;

        $i24 = $r30[i70];

        if i73 >= $i24 goto label24;

        $z6 = r47.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData: boolean hasPositions>;

        if $z6 == 0 goto label22;

        $r33 = r3.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: int[] positionsBuf>;

        $i32 = r47.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData: int posStart>;

        $i33 = $i32 + i69;

        $i74 = $r33[$i33];

        goto label23;

     label22:
        $i74 = 0;

     label23:
        $r31 = r3.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: int[] startOffsetsBuf>;

        $i25 = r47.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData: int offStart>;

        $i26 = $i25 + i69;

        $i34 = $r31[$i26];

        $r32 = r3.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.util.packed.BlockPackedWriter writer>;

        $i29 = $i34 - i72;

        $i27 = $i74 - i71;

        $f0 = (float) $i27;

        $f1 = f4 * $f0;

        $i28 = (int) $f1;

        $i30 = $i29 - $i28;

        $l31 = (long) $i30;

        virtualinvoke $r32.<org.apache.lucene.util.packed.BlockPackedWriter: void add(long)>($l31);

        i71 = $i74;

        i72 = $i34;

        i69 = i69 + 1;

        i73 = i73 + 1;

        goto label21;

     label24:
        i70 = i70 + 1;

        goto label20;

     label25:
        goto label19;

     label26:
        goto label18;

     label27:
        $r10 = r3.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.util.packed.BlockPackedWriter writer>;

        virtualinvoke $r10.<org.apache.lucene.util.packed.BlockPackedWriter: void finish()>();

        $r12 = r3.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.util.packed.BlockPackedWriter writer>;

        $r11 = r3.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.store.IndexOutput vectorsStream>;

        virtualinvoke $r12.<org.apache.lucene.util.packed.BlockPackedWriter: void reset(org.apache.lucene.store.DataOutput)>($r11);

        $r13 = r3.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: java.util.Deque pendingDocs>;

        $r14 = interfaceinvoke $r13.<java.util.Deque: java.util.Iterator iterator()>();

     label28:
        $z2 = interfaceinvoke $r14.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label36;

        $r16 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>();

        r48 = (org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$DocData) $r16;

        $r17 = r48.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$DocData: java.util.Deque fields>;

        $r18 = interfaceinvoke $r17.<java.util.Deque: java.util.Iterator iterator()>();

     label29:
        $z3 = interfaceinvoke $r18.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label35;

        $r19 = interfaceinvoke $r18.<java.util.Iterator: java.lang.Object next()>();

        r49 = (org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData) $r19;

        $i5 = r49.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData: int flags>;

        $i6 = $i5 & 2;

        if $i6 == 0 goto label34;

        i75 = 0;

        i76 = 0;

     label30:
        $i7 = r49.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData: int numTerms>;

        if i76 >= $i7 goto label33;

        i77 = 0;

     label31:
        $r21 = r49.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData: int[] freqs>;

        $i9 = $r21[i76];

        if i77 >= $i9 goto label32;

        $r25 = r3.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.util.packed.BlockPackedWriter writer>;

        $r22 = r3.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: int[] lengthsBuf>;

        $i11 = r49.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData: int offStart>;

        $i10 = i75;

        i75 = i75 + 1;

        $i12 = $i11 + $i10;

        $i14 = $r22[$i12];

        $r23 = r49.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData: int[] prefixLengths>;

        $i13 = $r23[i76];

        $i16 = $i14 - $i13;

        $r24 = r49.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData: int[] suffixLengths>;

        $i15 = $r24[i76];

        $i17 = $i16 - $i15;

        $l18 = (long) $i17;

        virtualinvoke $r25.<org.apache.lucene.util.packed.BlockPackedWriter: void add(long)>($l18);

        i77 = i77 + 1;

        goto label31;

     label32:
        i76 = i76 + 1;

        goto label30;

     label33:
        $z4 = <org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: boolean $assertionsDisabled>;

        if $z4 != 0 goto label34;

        $i8 = r49.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData: int totalPositions>;

        if i75 == $i8 goto label34;

        $r51 = new java.lang.AssertionError;

        specialinvoke $r51.<java.lang.AssertionError: void <init>()>();

        throw $r51;

     label34:
        goto label29;

     label35:
        goto label28;

     label36:
        $r15 = r3.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.util.packed.BlockPackedWriter writer>;

        virtualinvoke $r15.<org.apache.lucene.util.packed.BlockPackedWriter: void finish()>();

        return;
    }

    private void flushPayloadLengths() throws java.io.IOException
    {
        org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData r11;
        long $l4;
        java.util.Deque $r3, $r8;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter r0;
        org.apache.lucene.util.packed.BlockPackedWriter $r2, $r5, $r13;
        int[] $r12;
        int $i0, $i1, $i2, $i3, i5;
        org.apache.lucene.store.IndexOutput $r1;
        boolean $z0, $z1, $z2;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$DocData r7;
        java.util.Iterator $r4, $r9;
        java.lang.Object $r6, $r10;

        r0 := @this: org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter;

        $r2 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.util.packed.BlockPackedWriter writer>;

        $r1 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.store.IndexOutput vectorsStream>;

        virtualinvoke $r2.<org.apache.lucene.util.packed.BlockPackedWriter: void reset(org.apache.lucene.store.DataOutput)>($r1);

        $r3 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: java.util.Deque pendingDocs>;

        $r4 = interfaceinvoke $r3.<java.util.Deque: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r6 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$DocData) $r6;

        $r8 = r7.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$DocData: java.util.Deque fields>;

        $r9 = interfaceinvoke $r8.<java.util.Deque: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r11 = (org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData) $r10;

        $z2 = r11.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData: boolean hasPayloads>;

        if $z2 == 0 goto label4;

        i5 = 0;

     label3:
        $i0 = r11.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData: int totalPositions>;

        if i5 >= $i0 goto label4;

        $r13 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.util.packed.BlockPackedWriter writer>;

        $r12 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: int[] payloadLengthsBuf>;

        $i1 = r11.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData: int payStart>;

        $i2 = $i1 + i5;

        $i3 = $r12[$i2];

        $l4 = (long) $i3;

        virtualinvoke $r13.<org.apache.lucene.util.packed.BlockPackedWriter: void add(long)>($l4);

        i5 = i5 + 1;

        goto label3;

     label4:
        goto label2;

     label5:
        goto label1;

     label6:
        $r5 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.util.packed.BlockPackedWriter writer>;

        virtualinvoke $r5.<org.apache.lucene.util.packed.BlockPackedWriter: void finish()>();

        return;
    }

    public void finish(org.apache.lucene.index.FieldInfos, int) throws java.io.IOException
    {
        org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexWriter $r2;
        java.lang.RuntimeException $r3;
        java.util.Deque $r1;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter r0;
        int i0, $i1, $i2;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8;
        java.lang.String $r9;
        org.apache.lucene.index.FieldInfos r10;
        boolean $z0;

        r0 := @this: org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter;

        r10 := @parameter0: org.apache.lucene.index.FieldInfos;

        i0 := @parameter1: int;

        $r1 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: java.util.Deque pendingDocs>;

        $z0 = interfaceinvoke $r1.<java.util.Deque: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        specialinvoke r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: void flush()>();

     label1:
        $i1 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: int numDocs>;

        if i0 == $i1 goto label2;

        $r3 = new java.lang.RuntimeException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Wrote ");

        $i2 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: int numDocs>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" docs, finish called with numDocs=");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>($r9);

        throw $r3;

     label2:
        $r2 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexWriter indexWriter>;

        virtualinvoke $r2.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexWriter: void finish(int)>(i0);

        return;
    }

    public java.util.Comparator getComparator()
    {
        java.util.Comparator $r0;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter r1;

        r1 := @this: org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter;

        $r0 = staticinvoke <org.apache.lucene.util.BytesRef: java.util.Comparator getUTF8SortedAsUnicodeComparator()>();

        return $r0;
    }

    public void addProx(int, org.apache.lucene.store.DataInput, org.apache.lucene.store.DataInput) throws java.io.IOException
    {
        org.apache.lucene.store.DataInput r6, r17;
        long $l32;
        java.lang.AssertionError $r31, $r33;
        int[] $r5, $r7, $r8, $r9, $r10, $r11, $r12, $r15, $r18, $r21, $r22, $r23, $r24, $r26, $r27, $r28, $r29;
        org.apache.lucene.codecs.compressing.GrowableByteArrayDataOutput $r25;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData $r1, $r2, $r3, $r4, $r13, $r14, $r16, $r19, $r20, $r30, $r32, $r34;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i33, $i34, $i35, i36, i37, i38, i39, i40, i41, i42, i43, i44, i45;

        r0 := @this: org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter;

        i0 := @parameter0: int;

        r17 := @parameter1: org.apache.lucene.store.DataInput;

        r6 := @parameter2: org.apache.lucene.store.DataInput;

        $z0 = <org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: boolean $assertionsDisabled>;

        if $z0 != 0 goto label03;

        $r32 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData curField>;

        $z5 = $r32.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData: boolean hasPositions>;

        if r17 == null goto label01;

        $z6 = 1;

        goto label02;

     label01:
        $z6 = 0;

     label02:
        if $z5 == $z6 goto label03;

        $r33 = new java.lang.AssertionError;

        specialinvoke $r33.<java.lang.AssertionError: void <init>()>();

        throw $r33;

     label03:
        $z1 = <org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: boolean $assertionsDisabled>;

        if $z1 != 0 goto label06;

        $r30 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData curField>;

        $z4 = $r30.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData: boolean hasOffsets>;

        if r6 == null goto label04;

        $z7 = 1;

        goto label05;

     label04:
        $z7 = 0;

     label05:
        if $z4 == $z7 goto label06;

        $r31 = new java.lang.AssertionError;

        specialinvoke $r31.<java.lang.AssertionError: void <init>()>();

        throw $r31;

     label06:
        $r1 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData curField>;

        $z2 = $r1.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData: boolean hasPositions>;

        if $z2 == 0 goto label15;

        $r13 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData curField>;

        $i15 = $r13.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData: int posStart>;

        $r14 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData curField>;

        $i14 = $r14.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData: int totalPositions>;

        i36 = $i15 + $i14;

        $i17 = i36 + i0;

        $r15 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: int[] positionsBuf>;

        $i16 = lengthof $r15;

        if $i17 <= $i16 goto label07;

        $r28 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: int[] positionsBuf>;

        $i35 = i36 + i0;

        $r29 = staticinvoke <org.apache.lucene.util.ArrayUtil: int[] grow(int[],int)>($r28, $i35);

        r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: int[] positionsBuf> = $r29;

     label07:
        i37 = 0;

        $r16 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData curField>;

        $z3 = $r16.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData: boolean hasPayloads>;

        if $z3 == 0 goto label13;

        $r19 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData curField>;

        $i22 = $r19.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData: int payStart>;

        $r20 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData curField>;

        $i21 = $r20.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData: int totalPositions>;

        i38 = $i22 + $i21;

        $i24 = i38 + i0;

        $r21 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: int[] payloadLengthsBuf>;

        $i23 = lengthof $r21;

        if $i24 <= $i23 goto label08;

        $r26 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: int[] payloadLengthsBuf>;

        $i34 = i38 + i0;

        $r27 = staticinvoke <org.apache.lucene.util.ArrayUtil: int[] grow(int[],int)>($r26, $i34);

        r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: int[] payloadLengthsBuf> = $r27;

     label08:
        i39 = 0;

     label09:
        if i39 >= i0 goto label12;

        $i25 = virtualinvoke r17.<org.apache.lucene.store.DataInput: int readVInt()>();

        $i26 = $i25 & 1;

        if $i26 == 0 goto label10;

        $i30 = virtualinvoke r17.<org.apache.lucene.store.DataInput: int readVInt()>();

        $r24 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: int[] payloadLengthsBuf>;

        $i31 = i38 + i39;

        $r24[$i31] = $i30;

        $r25 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.codecs.compressing.GrowableByteArrayDataOutput payloadBytes>;

        $l32 = (long) $i30;

        virtualinvoke $r25.<org.apache.lucene.codecs.compressing.GrowableByteArrayDataOutput: void copyBytes(org.apache.lucene.store.DataInput,long)>(r17, $l32);

        goto label11;

     label10:
        $r22 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: int[] payloadLengthsBuf>;

        $i27 = i38 + i39;

        $r22[$i27] = 0;

     label11:
        $i28 = $i25 >>> 1;

        $i33 = i37 + $i28;

        i37 = $i33;

        $r23 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: int[] positionsBuf>;

        $i29 = i36 + i39;

        $r23[$i29] = $i33;

        i39 = i39 + 1;

        goto label09;

     label12:
        goto label15;

     label13:
        i40 = 0;

     label14:
        if i40 >= i0 goto label15;

        $i18 = virtualinvoke r17.<org.apache.lucene.store.DataInput: int readVInt()>();

        $i19 = $i18 >>> 1;

        i37 = i37 + $i19;

        $r18 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: int[] positionsBuf>;

        $i20 = i36 + i40;

        $r18[$i20] = i37;

        i40 = i40 + 1;

        goto label14;

     label15:
        $r34 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData curField>;

        $z8 = $r34.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData: boolean hasOffsets>;

        if $z8 == 0 goto label18;

        $r3 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData curField>;

        $i4 = $r3.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData: int offStart>;

        $r4 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData curField>;

        $i3 = $r4.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData: int totalPositions>;

        i41 = $i4 + $i3;

        $i6 = i41 + i0;

        $r5 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: int[] startOffsetsBuf>;

        $i5 = lengthof $r5;

        if $i6 <= $i5 goto label16;

        $i12 = i41 + i0;

        $i13 = staticinvoke <org.apache.lucene.util.ArrayUtil: int oversize(int,int)>($i12, 4);

        $r9 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: int[] startOffsetsBuf>;

        $r10 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>($r9, $i13);

        r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: int[] startOffsetsBuf> = $r10;

        $r11 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: int[] lengthsBuf>;

        $r12 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>($r11, $i13);

        r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: int[] lengthsBuf> = $r12;

     label16:
        i42 = 0;

        i43 = 0;

     label17:
        if i43 >= i0 goto label18;

        $i7 = virtualinvoke r6.<org.apache.lucene.store.DataInput: int readVInt()>();

        i44 = i42 + $i7;

        $i8 = virtualinvoke r6.<org.apache.lucene.store.DataInput: int readVInt()>();

        i45 = i44 + $i8;

        i42 = i45;

        $r7 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: int[] startOffsetsBuf>;

        $i9 = i41 + i43;

        $r7[$i9] = i44;

        $r8 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: int[] lengthsBuf>;

        $i11 = i41 + i43;

        $i10 = i45 - i44;

        $r8[$i11] = $i10;

        i43 = i43 + 1;

        goto label17;

     label18:
        $r2 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData curField>;

        $i1 = $r2.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData: int totalPositions>;

        $i2 = $i1 + i0;

        $r2.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter$FieldData: int totalPositions> = $i2;

        return;
    }

    public int merge(org.apache.lucene.index.MergeState) throws java.io.IOException
    {
        byte $b29;
        org.apache.lucene.index.FieldInfos $r4;
        org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader $r13;
        org.apache.lucene.index.AtomicReader r6;
        org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexWriter $r21;
        org.apache.lucene.index.SegmentReader[] $r7;
        long $l6, $l16, $l17, l18, $l19, $l27, $l28;
        java.lang.AssertionError $r30;
        org.apache.lucene.util.Bits $r29;
        org.apache.lucene.store.IndexInput $r14;
        org.apache.lucene.codecs.TermVectorsReader $r27;
        org.apache.lucene.index.Fields $r9, $r16, $r18;
        org.apache.lucene.index.MergeState r0;
        org.apache.lucene.codecs.compressing.CompressionMode $r11, $r12;
        boolean $z0, $z1, $z2, $z3;
        java.util.List $r1;
        java.util.Deque $r15;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i20, $i21, $i22, $i23, $i24, $i25, $i26, i30, i31, $i32, i33, i34, $i35, $i36;
        org.apache.lucene.index.SegmentReader r8;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsReader r28;
        org.apache.lucene.store.IndexOutput $r20, $r22, $r23, $r24;
        double $d0;
        org.apache.lucene.index.MergeState$CheckAbort $r10, $r17, $r19, $r25;
        java.util.Iterator $r2;
        java.lang.Object $r5;

        r3 := @this: org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter;

        r0 := @parameter0: org.apache.lucene.index.MergeState;

        i30 = 0;

        i31 = 0;

        $r1 = r0.<org.apache.lucene.index.MergeState: java.util.List readers>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label14;

        $r5 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.lucene.index.AtomicReader) $r5;

        $r7 = r0.<org.apache.lucene.index.MergeState: org.apache.lucene.index.SegmentReader[] matchingSegmentReaders>;

        $i0 = i31;

        i31 = i31 + 1;

        r8 = $r7[$i0];

        r28 = null;

        if r8 == null goto label02;

        $r27 = virtualinvoke r8.<org.apache.lucene.index.SegmentReader: org.apache.lucene.codecs.TermVectorsReader getTermVectorsReader()>();

        if $r27 == null goto label02;

        $z3 = $r27 instanceof org.apache.lucene.codecs.compressing.CompressingTermVectorsReader;

        if $z3 == 0 goto label02;

        r28 = (org.apache.lucene.codecs.compressing.CompressingTermVectorsReader) $r27;

     label02:
        $i32 = virtualinvoke r6.<org.apache.lucene.index.AtomicReader: int maxDoc()>();

        $r29 = virtualinvoke r6.<org.apache.lucene.index.AtomicReader: org.apache.lucene.util.Bits getLiveDocs()>();

        if r28 == null goto label03;

        $r11 = virtualinvoke r28.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.codecs.compressing.CompressionMode getCompressionMode()>();

        $r12 = r3.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.codecs.compressing.CompressionMode compressionMode>;

        if $r11 != $r12 goto label03;

        $i2 = virtualinvoke r28.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: int getChunkSize()>();

        $i3 = r3.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: int chunkSize>;

        if $i2 != $i3 goto label03;

        $i4 = virtualinvoke r28.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: int getPackedIntsVersion()>();

        if $i4 == 1 goto label06;

     label03:
        i33 = staticinvoke <org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: int nextLiveDoc(int,org.apache.lucene.util.Bits,int)>(0, $r29, $i32);

     label04:
        if i33 >= $i32 goto label05;

        $r9 = virtualinvoke r6.<org.apache.lucene.index.AtomicReader: org.apache.lucene.index.Fields getTermVectors(int)>(i33);

        virtualinvoke r3.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: void addAllDocVectors(org.apache.lucene.index.Fields,org.apache.lucene.index.MergeState)>($r9, r0);

        i30 = i30 + 1;

        $r10 = r0.<org.apache.lucene.index.MergeState: org.apache.lucene.index.MergeState$CheckAbort checkAbort>;

        virtualinvoke $r10.<org.apache.lucene.index.MergeState$CheckAbort: void work(double)>(300.0);

        $i1 = i33 + 1;

        i33 = staticinvoke <org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: int nextLiveDoc(int,org.apache.lucene.util.Bits,int)>($i1, $r29, $i32);

        goto label04;

     label05:
        goto label13;

     label06:
        $r13 = virtualinvoke r28.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader getIndex()>();

        $r14 = virtualinvoke r28.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.store.IndexInput getVectorsStream()>();

        i34 = staticinvoke <org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: int nextLiveDoc(int,org.apache.lucene.util.Bits,int)>(0, $r29, $i32);

     label07:
        if i34 >= $i32 goto label13;

        $r15 = r3.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: java.util.Deque pendingDocs>;

        $z1 = interfaceinvoke $r15.<java.util.Deque: boolean isEmpty()>();

        if $z1 == 0 goto label12;

        if i34 == 0 goto label08;

        $i26 = i34 - 1;

        $l27 = virtualinvoke $r13.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader: long getStartPointer(int)>($i26);

        $l28 = virtualinvoke $r13.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader: long getStartPointer(int)>(i34);

        $b29 = $l27 cmp $l28;

        $i36 = (int) $b29;

        if $i36 >= 0 goto label12;

     label08:
        $l6 = virtualinvoke $r13.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader: long getStartPointer(int)>(i34);

        virtualinvoke $r14.<org.apache.lucene.store.IndexInput: void seek(long)>($l6);

        $i7 = virtualinvoke $r14.<org.apache.lucene.store.IndexInput: int readVInt()>();

        $i8 = virtualinvoke $r14.<org.apache.lucene.store.IndexInput: int readVInt()>();

        $z2 = <org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: boolean $assertionsDisabled>;

        if $z2 != 0 goto label09;

        $i24 = $i7 + $i8;

        $i25 = virtualinvoke r8.<org.apache.lucene.index.SegmentReader: int maxDoc()>();

        if $i24 <= $i25 goto label09;

        $r30 = new java.lang.AssertionError;

        specialinvoke $r30.<java.lang.AssertionError: void <init>()>();

        throw $r30;

     label09:
        $i9 = $i7 + $i8;

        $i10 = virtualinvoke r8.<org.apache.lucene.index.SegmentReader: int maxDoc()>();

        if $i9 >= $i10 goto label10;

        $i12 = $i7 + $i8;

        $i13 = staticinvoke <org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: int nextDeletedDoc(int,org.apache.lucene.util.Bits,int)>($i7, $r29, $i12);

        $i14 = $i7 + $i8;

        if $i13 != $i14 goto label10;

        $i15 = $i7 + $i8;

        $l16 = virtualinvoke $r13.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader: long getStartPointer(int)>($i15);

        $l17 = virtualinvoke $r14.<org.apache.lucene.store.IndexInput: long getFilePointer()>();

        l18 = $l16 - $l17;

        $r21 = r3.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexWriter indexWriter>;

        $r20 = r3.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.store.IndexOutput vectorsStream>;

        $l19 = virtualinvoke $r20.<org.apache.lucene.store.IndexOutput: long getFilePointer()>();

        virtualinvoke $r21.<org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexWriter: void writeIndex(int,long)>($i8, $l19);

        $r22 = r3.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.store.IndexOutput vectorsStream>;

        virtualinvoke $r22.<org.apache.lucene.store.IndexOutput: void writeVInt(int)>(i30);

        $r23 = r3.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.store.IndexOutput vectorsStream>;

        virtualinvoke $r23.<org.apache.lucene.store.IndexOutput: void writeVInt(int)>($i8);

        $r24 = r3.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: org.apache.lucene.store.IndexOutput vectorsStream>;

        virtualinvoke $r24.<org.apache.lucene.store.IndexOutput: void copyBytes(org.apache.lucene.store.DataInput,long)>($r14, l18);

        i30 = i30 + $i8;

        $i20 = r3.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: int numDocs>;

        $i21 = $i20 + $i8;

        r3.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: int numDocs> = $i21;

        $r25 = r0.<org.apache.lucene.index.MergeState: org.apache.lucene.index.MergeState$CheckAbort checkAbort>;

        $i22 = 300 * $i8;

        $d0 = (double) $i22;

        virtualinvoke $r25.<org.apache.lucene.index.MergeState$CheckAbort: void work(double)>($d0);

        $i23 = $i7 + $i8;

        i34 = staticinvoke <org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: int nextLiveDoc(int,org.apache.lucene.util.Bits,int)>($i23, $r29, $i32);

        goto label11;

     label10:
        $i35 = $i7 + $i8;

        if i34 >= $i35 goto label11;

        $r18 = virtualinvoke r6.<org.apache.lucene.index.AtomicReader: org.apache.lucene.index.Fields getTermVectors(int)>(i34);

        virtualinvoke r3.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: void addAllDocVectors(org.apache.lucene.index.Fields,org.apache.lucene.index.MergeState)>($r18, r0);

        i30 = i30 + 1;

        $r19 = r0.<org.apache.lucene.index.MergeState: org.apache.lucene.index.MergeState$CheckAbort checkAbort>;

        virtualinvoke $r19.<org.apache.lucene.index.MergeState$CheckAbort: void work(double)>(300.0);

        $i11 = i34 + 1;

        i34 = staticinvoke <org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: int nextLiveDoc(int,org.apache.lucene.util.Bits,int)>($i11, $r29, $i32);

        goto label10;

     label11:
        goto label07;

     label12:
        $r16 = virtualinvoke r6.<org.apache.lucene.index.AtomicReader: org.apache.lucene.index.Fields getTermVectors(int)>(i34);

        virtualinvoke r3.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: void addAllDocVectors(org.apache.lucene.index.Fields,org.apache.lucene.index.MergeState)>($r16, r0);

        i30 = i30 + 1;

        $r17 = r0.<org.apache.lucene.index.MergeState: org.apache.lucene.index.MergeState$CheckAbort checkAbort>;

        virtualinvoke $r17.<org.apache.lucene.index.MergeState$CheckAbort: void work(double)>(300.0);

        $i5 = i34 + 1;

        i34 = staticinvoke <org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: int nextLiveDoc(int,org.apache.lucene.util.Bits,int)>($i5, $r29, $i32);

        goto label07;

     label13:
        goto label01;

     label14:
        $r4 = r0.<org.apache.lucene.index.MergeState: org.apache.lucene.index.FieldInfos fieldInfos>;

        virtualinvoke r3.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: void finish(org.apache.lucene.index.FieldInfos,int)>($r4, i30);

        return i30;
    }

    private static int nextLiveDoc(int, org.apache.lucene.util.Bits, int)
    {
        int i0, i1;
        org.apache.lucene.util.Bits r0;
        boolean $z0;

        i1 := @parameter0: int;

        r0 := @parameter1: org.apache.lucene.util.Bits;

        i0 := @parameter2: int;

        if r0 != null goto label1;

        return i1;

     label1:
        if i1 >= i0 goto label2;

        $z0 = interfaceinvoke r0.<org.apache.lucene.util.Bits: boolean get(int)>(i1);

        if $z0 != 0 goto label2;

        i1 = i1 + 1;

        goto label1;

     label2:
        return i1;
    }

    private static int nextDeletedDoc(int, org.apache.lucene.util.Bits, int)
    {
        int i0, i1;
        org.apache.lucene.util.Bits r0;
        boolean $z0;

        i1 := @parameter0: int;

        r0 := @parameter1: org.apache.lucene.util.Bits;

        i0 := @parameter2: int;

        if r0 != null goto label1;

        return i0;

     label1:
        if i1 >= i0 goto label2;

        $z0 = interfaceinvoke r0.<org.apache.lucene.util.Bits: boolean get(int)>(i1);

        if $z0 == 0 goto label2;

        i1 = i1 + 1;

        goto label1;

     label2:
        return i1;
    }

    static int[] access$000(org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter)
    {
        int[] $r1;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter r0;

        r0 := @parameter0: org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter;

        $r1 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: int[] positionsBuf>;

        return $r1;
    }

    static int[] access$002(org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter, int[])
    {
        int[] r1;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter r0;

        r0 := @parameter0: org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter;

        r1 := @parameter1: int[];

        r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: int[] positionsBuf> = r1;

        return r1;
    }

    static int[] access$100(org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter)
    {
        int[] $r1;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter r0;

        r0 := @parameter0: org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter;

        $r1 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: int[] startOffsetsBuf>;

        return $r1;
    }

    static int[] access$102(org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter, int[])
    {
        int[] r1;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter r0;

        r0 := @parameter0: org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter;

        r1 := @parameter1: int[];

        r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: int[] startOffsetsBuf> = r1;

        return r1;
    }

    static int[] access$202(org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter, int[])
    {
        int[] r1;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter r0;

        r0 := @parameter0: org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter;

        r1 := @parameter1: int[];

        r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: int[] lengthsBuf> = r1;

        return r1;
    }

    static int[] access$200(org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter)
    {
        int[] $r1;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter r0;

        r0 := @parameter0: org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter;

        $r1 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: int[] lengthsBuf>;

        return $r1;
    }

    static int[] access$300(org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter)
    {
        int[] $r1;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter r0;

        r0 := @parameter0: org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter;

        $r1 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: int[] payloadLengthsBuf>;

        return $r1;
    }

    static int[] access$302(org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter, int[])
    {
        int[] r1;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter r0;

        r0 := @parameter0: org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter;

        r1 := @parameter1: int[];

        r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: int[] payloadLengthsBuf> = r1;

        return r1;
    }

    static void <clinit>()
    {
        int $i0;
        java.lang.Class $r0;
        boolean $z0, $z1;

        <org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: int PAYLOADS> = 4;

        <org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: int OFFSETS> = 2;

        <org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: int POSITIONS> = 1;

        <org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: int BLOCK_SIZE> = 64;

        <org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: int VERSION_CURRENT> = 0;

        <org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: int VERSION_START> = 0;

        <org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: java.lang.String CODEC_SFX_DAT> = "Data";

        <org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: java.lang.String CODEC_SFX_IDX> = "Index";

        <org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: java.lang.String VECTORS_INDEX_EXTENSION> = "tvx";

        <org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: java.lang.String VECTORS_EXTENSION> = "tvd";

        <org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: int MAX_DOCUMENTS_PER_CHUNK> = 128;

        $r0 = class "Lorg/apache/lucene/codecs/compressing/CompressingTermVectorsWriter;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: boolean $assertionsDisabled> = $z1;

        $i0 = staticinvoke <org.apache.lucene.util.packed.PackedInts: int bitsRequired(long)>(7L);

        <org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter: int FLAGS_BITS> = $i0;

        return;
    }
}
