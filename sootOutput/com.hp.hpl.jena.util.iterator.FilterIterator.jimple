public class com.hp.hpl.jena.util.iterator.FilterIterator extends com.hp.hpl.jena.util.iterator.WrappedIterator
{
    protected final com.hp.hpl.jena.util.iterator.Filter f;
    protected java.lang.Object current;
    protected boolean canRemove;
    protected boolean hasCurrent;

    public void <init>(com.hp.hpl.jena.util.iterator.Filter, java.util.Iterator)
    {
        com.hp.hpl.jena.util.iterator.FilterIterator r0;
        java.util.Iterator r1;
        com.hp.hpl.jena.util.iterator.Filter r2;

        r0 := @this: com.hp.hpl.jena.util.iterator.FilterIterator;

        r2 := @parameter0: com.hp.hpl.jena.util.iterator.Filter;

        r1 := @parameter1: java.util.Iterator;

        specialinvoke r0.<com.hp.hpl.jena.util.iterator.WrappedIterator: void <init>(java.util.Iterator)>(r1);

        r0.<com.hp.hpl.jena.util.iterator.FilterIterator: com.hp.hpl.jena.util.iterator.Filter f> = r2;

        return;
    }

    public boolean hasNext()
    {
        java.lang.Object $r1;
        com.hp.hpl.jena.util.iterator.FilterIterator r0;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: com.hp.hpl.jena.util.iterator.FilterIterator;

     label1:
        $z0 = r0.<com.hp.hpl.jena.util.iterator.FilterIterator: boolean hasCurrent>;

        if $z0 != 0 goto label2;

        $z2 = specialinvoke r0.<com.hp.hpl.jena.util.iterator.WrappedIterator: boolean hasNext()>();

        if $z2 == 0 goto label2;

        $r1 = specialinvoke r0.<com.hp.hpl.jena.util.iterator.WrappedIterator: java.lang.Object next()>();

        r0.<com.hp.hpl.jena.util.iterator.FilterIterator: java.lang.Object current> = $r1;

        $z3 = virtualinvoke r0.<com.hp.hpl.jena.util.iterator.FilterIterator: boolean accept(java.lang.Object)>($r1);

        r0.<com.hp.hpl.jena.util.iterator.FilterIterator: boolean hasCurrent> = $z3;

        goto label1;

     label2:
        r0.<com.hp.hpl.jena.util.iterator.FilterIterator: boolean canRemove> = 0;

        $z1 = r0.<com.hp.hpl.jena.util.iterator.FilterIterator: boolean hasCurrent>;

        return $z1;
    }

    protected boolean accept(java.lang.Object)
    {
        java.lang.Object r1;
        com.hp.hpl.jena.util.iterator.FilterIterator r0;
        com.hp.hpl.jena.util.iterator.Filter $r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.util.iterator.FilterIterator;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.hp.hpl.jena.util.iterator.FilterIterator: com.hp.hpl.jena.util.iterator.Filter f>;

        $z0 = virtualinvoke $r2.<com.hp.hpl.jena.util.iterator.Filter: boolean accept(java.lang.Object)>(r1);

        return $z0;
    }

    public void remove()
    {
        java.lang.IllegalStateException $r1;
        com.hp.hpl.jena.util.iterator.FilterIterator r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.util.iterator.FilterIterator;

        $z0 = r0.<com.hp.hpl.jena.util.iterator.FilterIterator: boolean canRemove>;

        if $z0 != 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("FilterIterators do not permit calls to hasNext between calls to next and remove.");

        throw $r1;

     label1:
        specialinvoke r0.<com.hp.hpl.jena.util.iterator.WrappedIterator: void remove()>();

        return;
    }

    public java.lang.Object next()
    {
        java.lang.Object $r1;
        com.hp.hpl.jena.util.iterator.FilterIterator r0;
        java.util.NoSuchElementException $r2;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.util.iterator.FilterIterator;

        $z0 = r0.<com.hp.hpl.jena.util.iterator.FilterIterator: boolean hasCurrent>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<com.hp.hpl.jena.util.iterator.FilterIterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

     label1:
        r0.<com.hp.hpl.jena.util.iterator.FilterIterator: boolean canRemove> = 1;

        r0.<com.hp.hpl.jena.util.iterator.FilterIterator: boolean hasCurrent> = 0;

        $r1 = r0.<com.hp.hpl.jena.util.iterator.FilterIterator: java.lang.Object current>;

        return $r1;

     label2:
        $r2 = new java.util.NoSuchElementException;

        specialinvoke $r2.<java.util.NoSuchElementException: void <init>()>();

        throw $r2;
    }
}
