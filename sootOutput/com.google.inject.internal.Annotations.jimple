public class com.google.inject.internal.Annotations extends java.lang.Object
{
    private static final com.google.inject.internal.Annotations$AnnotationChecker scopeChecker;
    private static final com.google.inject.internal.Annotations$AnnotationChecker bindingAnnotationChecker;

    public void <init>()
    {
        com.google.inject.internal.Annotations r0;

        r0 := @this: com.google.inject.internal.Annotations;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean isMarker(java.lang.Class)
    {
        int $i0;
        java.lang.Class r0;
        java.lang.reflect.Method[] $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        $i0 = lengthof $r1;

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean isRetainedAtRuntime(java.lang.Class)
    {
        java.lang.'annotation'.Annotation $r1;
        java.lang.Class r0;
        java.lang.'annotation'.Retention r2;
        java.lang.'annotation'.RetentionPolicy $r3, $r4;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Ljava/lang/annotation/Retention;");

        r2 = (java.lang.'annotation'.Retention) $r1;

        if r2 == null goto label1;

        $r3 = interfaceinvoke r2.<java.lang.'annotation'.Retention: java.lang.'annotation'.RetentionPolicy value()>();

        $r4 = <java.lang.'annotation'.RetentionPolicy: java.lang.'annotation'.RetentionPolicy RUNTIME>;

        if $r3 != $r4 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static java.lang.Class findScopeAnnotation(com.google.inject.internal.Errors, java.lang.Class)
    {
        com.google.inject.internal.Errors r0;
        java.lang.Class r1, $r3;
        java.lang.'annotation'.Annotation[] $r2;

        r0 := @parameter0: com.google.inject.internal.Errors;

        r1 := @parameter1: java.lang.Class;

        $r2 = virtualinvoke r1.<java.lang.Class: java.lang.'annotation'.Annotation[] getAnnotations()>();

        $r3 = staticinvoke <com.google.inject.internal.Annotations: java.lang.Class findScopeAnnotation(com.google.inject.internal.Errors,java.lang.'annotation'.Annotation[])>(r0, $r2);

        return $r3;
    }

    public static java.lang.Class findScopeAnnotation(com.google.inject.internal.Errors, java.lang.'annotation'.Annotation[])
    {
        java.lang.'annotation'.Annotation[] r0;
        com.google.inject.internal.Errors r3;
        int i0, i1;
        java.lang.'annotation'.Annotation r1;
        java.lang.Class $r2, r4;
        boolean $z0;

        r3 := @parameter0: com.google.inject.internal.Errors;

        r0 := @parameter1: java.lang.'annotation'.Annotation[];

        r4 = null;

        i0 = lengthof r0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        r1 = r0[i1];

        $r2 = interfaceinvoke r1.<java.lang.'annotation'.Annotation: java.lang.Class annotationType()>();

        $z0 = staticinvoke <com.google.inject.internal.Annotations: boolean isScopeAnnotation(java.lang.Class)>($r2);

        if $z0 == 0 goto label3;

        if r4 == null goto label2;

        virtualinvoke r3.<com.google.inject.internal.Errors: com.google.inject.internal.Errors duplicateScopeAnnotations(java.lang.Class,java.lang.Class)>(r4, $r2);

        goto label3;

     label2:
        r4 = $r2;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return r4;
    }

    public static boolean isScopeAnnotation(java.lang.Class)
    {
        com.google.inject.internal.Annotations$AnnotationChecker $r1;
        java.lang.Class r0;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        $r1 = <com.google.inject.internal.Annotations: com.google.inject.internal.Annotations$AnnotationChecker scopeChecker>;

        $z0 = virtualinvoke $r1.<com.google.inject.internal.Annotations$AnnotationChecker: boolean hasAnnotations(java.lang.Class)>(r0);

        return $z0;
    }

    public static void checkForMisplacedScopeAnnotations(java.lang.Class, java.lang.Object, com.google.inject.internal.Errors)
    {
        com.google.inject.internal.Errors r1, $r3;
        java.lang.Class r0, $r2;
        java.lang.Object r4;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        r4 := @parameter1: java.lang.Object;

        r1 := @parameter2: com.google.inject.internal.Errors;

        $z0 = staticinvoke <com.google.inject.internal.util.$Classes: boolean isConcrete(java.lang.Class)>(r0);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = staticinvoke <com.google.inject.internal.Annotations: java.lang.Class findScopeAnnotation(com.google.inject.internal.Errors,java.lang.Class)>(r1, r0);

        if $r2 == null goto label2;

        $r3 = virtualinvoke r1.<com.google.inject.internal.Errors: com.google.inject.internal.Errors withSource(java.lang.Object)>(r0);

        virtualinvoke $r3.<com.google.inject.internal.Errors: com.google.inject.internal.Errors scopeAnnotationOnAbstractType(java.lang.Class,java.lang.Class,java.lang.Object)>($r2, r0, r4);

     label2:
        return;
    }

    public static com.google.inject.Key getKey(com.google.inject.TypeLiteral, java.lang.reflect.Member, java.lang.'annotation'.Annotation[], com.google.inject.internal.Errors) throws com.google.inject.internal.ErrorsException
    {
        com.google.inject.internal.Errors r0;
        java.lang.reflect.Member r1;
        int $i0;
        java.lang.'annotation'.Annotation $r3;
        com.google.inject.Key $r5;
        java.lang.'annotation'.Annotation[] r2;
        com.google.inject.TypeLiteral r4;

        r4 := @parameter0: com.google.inject.TypeLiteral;

        r1 := @parameter1: java.lang.reflect.Member;

        r2 := @parameter2: java.lang.'annotation'.Annotation[];

        r0 := @parameter3: com.google.inject.internal.Errors;

        $i0 = virtualinvoke r0.<com.google.inject.internal.Errors: int size()>();

        $r3 = staticinvoke <com.google.inject.internal.Annotations: java.lang.'annotation'.Annotation findBindingAnnotation(com.google.inject.internal.Errors,java.lang.reflect.Member,java.lang.'annotation'.Annotation[])>(r0, r1, r2);

        virtualinvoke r0.<com.google.inject.internal.Errors: void throwIfNewErrors(int)>($i0);

        if $r3 != null goto label1;

        $r5 = staticinvoke <com.google.inject.Key: com.google.inject.Key get(com.google.inject.TypeLiteral)>(r4);

        goto label2;

     label1:
        $r5 = staticinvoke <com.google.inject.Key: com.google.inject.Key get(com.google.inject.TypeLiteral,java.lang.'annotation'.Annotation)>(r4, $r3);

     label2:
        return $r5;
    }

    public static java.lang.'annotation'.Annotation findBindingAnnotation(com.google.inject.internal.Errors, java.lang.reflect.Member, java.lang.'annotation'.Annotation[])
    {
        java.lang.reflect.Member r4;
        java.lang.'annotation'.Annotation[] r0;
        com.google.inject.internal.Errors r3;
        int i0, i1;
        java.lang.'annotation'.Annotation r1, r6;
        java.lang.Class $r2, $r5;
        boolean $z0;

        r3 := @parameter0: com.google.inject.internal.Errors;

        r4 := @parameter1: java.lang.reflect.Member;

        r0 := @parameter2: java.lang.'annotation'.Annotation[];

        r6 = null;

        i0 = lengthof r0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        r1 = r0[i1];

        $r2 = interfaceinvoke r1.<java.lang.'annotation'.Annotation: java.lang.Class annotationType()>();

        $z0 = staticinvoke <com.google.inject.internal.Annotations: boolean isBindingAnnotation(java.lang.Class)>($r2);

        if $z0 == 0 goto label3;

        if r6 == null goto label2;

        $r5 = interfaceinvoke r6.<java.lang.'annotation'.Annotation: java.lang.Class annotationType()>();

        virtualinvoke r3.<com.google.inject.internal.Errors: com.google.inject.internal.Errors duplicateBindingAnnotations(java.lang.reflect.Member,java.lang.Class,java.lang.Class)>(r4, $r5, $r2);

        goto label3;

     label2:
        r6 = r1;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return r6;
    }

    public static boolean isBindingAnnotation(java.lang.Class)
    {
        com.google.inject.internal.Annotations$AnnotationChecker $r1;
        java.lang.Class r0;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        $r1 = <com.google.inject.internal.Annotations: com.google.inject.internal.Annotations$AnnotationChecker bindingAnnotationChecker>;

        $z0 = virtualinvoke $r1.<com.google.inject.internal.Annotations$AnnotationChecker: boolean hasAnnotations(java.lang.Class)>(r0);

        return $z0;
    }

    public static java.lang.'annotation'.Annotation canonicalizeIfNamed(java.lang.'annotation'.Annotation)
    {
        java.lang.'annotation'.Annotation r0;
        com.google.inject.name.Named $r3;
        javax.inject.Named $r1;
        java.lang.String $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.'annotation'.Annotation;

        $z0 = r0 instanceof javax.inject.Named;

        if $z0 == 0 goto label1;

        $r1 = (javax.inject.Named) r0;

        $r2 = interfaceinvoke $r1.<javax.inject.Named: java.lang.String value()>();

        $r3 = staticinvoke <com.google.inject.name.Names: com.google.inject.name.Named named(java.lang.String)>($r2);

        return $r3;

     label1:
        return r0;
    }

    public static java.lang.Class canonicalizeIfNamed(java.lang.Class)
    {
        java.lang.Class r0;

        r0 := @parameter0: java.lang.Class;

        if r0 != class "Ljavax/inject/Named;" goto label1;

        return class "Lcom/google/inject/name/Named;";

     label1:
        return r0;
    }

    static void <clinit>()
    {
        java.util.List $r2, $r5;
        com.google.inject.internal.Annotations$AnnotationChecker $r0, $r3;
        java.lang.Class[] $r1, $r4;

        $r0 = new com.google.inject.internal.Annotations$AnnotationChecker;

        $r1 = newarray (java.lang.Class)[2];

        $r1[0] = class "Lcom/google/inject/ScopeAnnotation;";

        $r1[1] = class "Ljavax/inject/Scope;";

        $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1);

        specialinvoke $r0.<com.google.inject.internal.Annotations$AnnotationChecker: void <init>(java.util.Collection)>($r2);

        <com.google.inject.internal.Annotations: com.google.inject.internal.Annotations$AnnotationChecker scopeChecker> = $r0;

        $r3 = new com.google.inject.internal.Annotations$AnnotationChecker;

        $r4 = newarray (java.lang.Class)[2];

        $r4[0] = class "Lcom/google/inject/BindingAnnotation;";

        $r4[1] = class "Ljavax/inject/Qualifier;";

        $r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4);

        specialinvoke $r3.<com.google.inject.internal.Annotations$AnnotationChecker: void <init>(java.util.Collection)>($r5);

        <com.google.inject.internal.Annotations: com.google.inject.internal.Annotations$AnnotationChecker bindingAnnotationChecker> = $r3;

        return;
    }
}
