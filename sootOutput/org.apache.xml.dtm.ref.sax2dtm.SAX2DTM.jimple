public class org.apache.xml.dtm.ref.sax2dtm.SAX2DTM extends org.apache.xml.dtm.ref.DTMDefaultBaseIterators implements org.xml.sax.EntityResolver, org.xml.sax.DTDHandler, org.xml.sax.ContentHandler, org.xml.sax.ErrorHandler, org.xml.sax.ext.DeclHandler, org.xml.sax.ext.LexicalHandler
{
    private static final boolean DEBUG;
    private org.apache.xml.dtm.ref.IncrementalSAXSource m_incrementalSAXSource;
    protected org.apache.xml.utils.FastStringBuffer m_chars;
    protected org.apache.xml.utils.SuballocatedIntVector m_data;
    protected transient org.apache.xml.utils.IntStack m_parents;
    protected transient int m_previous;
    protected transient java.util.Vector m_prefixMappings;
    protected transient org.apache.xml.utils.IntStack m_contextIndexes;
    protected transient int m_textType;
    protected transient int m_coalescedTextType;
    protected transient org.xml.sax.Locator m_locator;
    private transient java.lang.String m_systemId;
    protected transient boolean m_insideDTD;
    protected org.apache.xml.dtm.ref.DTMTreeWalker m_walker;
    protected org.apache.xml.dtm.ref.DTMStringPool m_valuesOrPrefixes;
    protected boolean m_endDocumentOccured;
    protected org.apache.xml.utils.SuballocatedIntVector m_dataOrQName;
    protected java.util.Hashtable m_idAttributes;
    static final java.lang.String[] m_fixednames;
    private java.util.Vector m_entities;
    private static final int ENTITY_FIELD_PUBLICID;
    private static final int ENTITY_FIELD_SYSTEMID;
    private static final int ENTITY_FIELD_NOTATIONNAME;
    private static final int ENTITY_FIELD_NAME;
    private static final int ENTITY_FIELDS_PER;
    protected int m_textPendingStart;
    protected boolean m_useSourceLocationProperty;
    protected static boolean m_source_location;
    protected org.apache.xml.utils.StringVector m_sourceSystemId;
    protected org.apache.xml.utils.IntVector m_sourceLine;
    protected org.apache.xml.utils.IntVector m_sourceColumn;
    boolean m_pastFirstElement;

    public void <init>(org.apache.xml.dtm.DTMManager, javax.xml.transform.Source, int, org.apache.xml.dtm.DTMWSFilter, org.apache.xml.utils.XMLStringFactory, boolean)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM r0;
        org.apache.xml.utils.XMLStringFactory r4;
        org.apache.xml.dtm.DTMManager r1;
        int i0;
        org.apache.xml.dtm.DTMWSFilter r3;
        javax.xml.transform.Source r2;
        boolean z0;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM;

        r1 := @parameter0: org.apache.xml.dtm.DTMManager;

        r2 := @parameter1: javax.xml.transform.Source;

        i0 := @parameter2: int;

        r3 := @parameter3: org.apache.xml.dtm.DTMWSFilter;

        r4 := @parameter4: org.apache.xml.utils.XMLStringFactory;

        z0 := @parameter5: boolean;

        specialinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: void <init>(org.apache.xml.dtm.DTMManager,javax.xml.transform.Source,int,org.apache.xml.dtm.DTMWSFilter,org.apache.xml.utils.XMLStringFactory,boolean,int,boolean,boolean)>(r1, r2, i0, r3, r4, z0, 512, 1, 0);

        return;
    }

    public void <init>(org.apache.xml.dtm.DTMManager, javax.xml.transform.Source, int, org.apache.xml.dtm.DTMWSFilter, org.apache.xml.utils.XMLStringFactory, boolean, int, boolean, boolean)
    {
        org.apache.xml.utils.IntStack $r31, $r32, $r37, $r38;
        java.util.Vector $r24;
        org.apache.xml.utils.XMLStringFactory r4;
        org.apache.xml.dtm.DTMWSFilter r3;
        org.apache.xml.utils.StringVector $r21, $r39;
        boolean z0, z1, z2, $z3, $z4, $z5, $z6;
        org.apache.xml.utils.SuballocatedIntVector $r14, $r27, $r28, $r33, $r34;
        org.apache.xml.utils.FastStringBuffer $r30, $r36;
        org.apache.xml.dtm.ref.DTMTreeWalker $r25;
        org.apache.xml.dtm.DTMManager r1;
        org.apache.xml.utils.IntVector $r22, $r23, $r40, $r41;
        javax.xml.transform.Source r2;
        int i0, i1, $i3;
        java.util.Hashtable $r26;
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM r0;
        org.apache.xml.dtm.ref.DTMStringPool $r29, $r35;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM;

        r1 := @parameter0: org.apache.xml.dtm.DTMManager;

        r2 := @parameter1: javax.xml.transform.Source;

        i0 := @parameter2: int;

        r3 := @parameter3: org.apache.xml.dtm.DTMWSFilter;

        r4 := @parameter4: org.apache.xml.utils.XMLStringFactory;

        z0 := @parameter5: boolean;

        i1 := @parameter6: int;

        z1 := @parameter7: boolean;

        z2 := @parameter8: boolean;

        specialinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBaseIterators: void <init>(org.apache.xml.dtm.DTMManager,javax.xml.transform.Source,int,org.apache.xml.dtm.DTMWSFilter,org.apache.xml.utils.XMLStringFactory,boolean,int,boolean,boolean)>(r1, r2, i0, r3, r4, z0, i1, z1, z2);

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.dtm.ref.IncrementalSAXSource m_incrementalSAXSource> = null;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int m_previous> = 0;

        $r24 = new java.util.Vector;

        specialinvoke $r24.<java.util.Vector: void <init>()>();

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: java.util.Vector m_prefixMappings> = $r24;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int m_textType> = 3;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int m_coalescedTextType> = 3;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.xml.sax.Locator m_locator> = null;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: java.lang.String m_systemId> = null;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: boolean m_insideDTD> = 0;

        $r25 = new org.apache.xml.dtm.ref.DTMTreeWalker;

        specialinvoke $r25.<org.apache.xml.dtm.ref.DTMTreeWalker: void <init>()>();

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.dtm.ref.DTMTreeWalker m_walker> = $r25;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: boolean m_endDocumentOccured> = 0;

        $r26 = new java.util.Hashtable;

        specialinvoke $r26.<java.util.Hashtable: void <init>()>();

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: java.util.Hashtable m_idAttributes> = $r26;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: java.util.Vector m_entities> = null;

        $i3 = (int) -1;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int m_textPendingStart> = $i3;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: boolean m_useSourceLocationProperty> = 0;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: boolean m_pastFirstElement> = 0;

        if i1 > 64 goto label1;

        $r27 = new org.apache.xml.utils.SuballocatedIntVector;

        specialinvoke $r27.<org.apache.xml.utils.SuballocatedIntVector: void <init>(int,int)>(i1, 4);

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_data> = $r27;

        $r28 = new org.apache.xml.utils.SuballocatedIntVector;

        specialinvoke $r28.<org.apache.xml.utils.SuballocatedIntVector: void <init>(int,int)>(i1, 4);

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_dataOrQName> = $r28;

        $r29 = new org.apache.xml.dtm.ref.DTMStringPool;

        specialinvoke $r29.<org.apache.xml.dtm.ref.DTMStringPool: void <init>(int)>(16);

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.dtm.ref.DTMStringPool m_valuesOrPrefixes> = $r29;

        $r30 = new org.apache.xml.utils.FastStringBuffer;

        specialinvoke $r30.<org.apache.xml.utils.FastStringBuffer: void <init>(int,int)>(7, 10);

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.FastStringBuffer m_chars> = $r30;

        $r31 = new org.apache.xml.utils.IntStack;

        specialinvoke $r31.<org.apache.xml.utils.IntStack: void <init>(int)>(4);

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.IntStack m_contextIndexes> = $r31;

        $r32 = new org.apache.xml.utils.IntStack;

        specialinvoke $r32.<org.apache.xml.utils.IntStack: void <init>(int)>(4);

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.IntStack m_parents> = $r32;

        goto label2;

     label1:
        $r33 = new org.apache.xml.utils.SuballocatedIntVector;

        specialinvoke $r33.<org.apache.xml.utils.SuballocatedIntVector: void <init>(int,int)>(i1, 32);

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_data> = $r33;

        $r34 = new org.apache.xml.utils.SuballocatedIntVector;

        specialinvoke $r34.<org.apache.xml.utils.SuballocatedIntVector: void <init>(int,int)>(i1, 32);

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_dataOrQName> = $r34;

        $r35 = new org.apache.xml.dtm.ref.DTMStringPool;

        specialinvoke $r35.<org.apache.xml.dtm.ref.DTMStringPool: void <init>()>();

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.dtm.ref.DTMStringPool m_valuesOrPrefixes> = $r35;

        $r36 = new org.apache.xml.utils.FastStringBuffer;

        specialinvoke $r36.<org.apache.xml.utils.FastStringBuffer: void <init>(int,int)>(10, 13);

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.FastStringBuffer m_chars> = $r36;

        $r37 = new org.apache.xml.utils.IntStack;

        specialinvoke $r37.<org.apache.xml.utils.IntStack: void <init>()>();

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.IntStack m_contextIndexes> = $r37;

        $r38 = new org.apache.xml.utils.IntStack;

        specialinvoke $r38.<org.apache.xml.utils.IntStack: void <init>()>();

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.IntStack m_parents> = $r38;

     label2:
        $r14 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_data>;

        virtualinvoke $r14.<org.apache.xml.utils.SuballocatedIntVector: void addElement(int)>(0);

        $z3 = <org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: boolean m_source_location>;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: boolean m_useSourceLocationProperty> = $z3;

        $z4 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: boolean m_useSourceLocationProperty>;

        if $z4 == 0 goto label3;

        $r39 = new org.apache.xml.utils.StringVector;

        $r21 = $r39;

        specialinvoke $r39.<org.apache.xml.utils.StringVector: void <init>()>();

        goto label4;

     label3:
        $r21 = null;

     label4:
        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.StringVector m_sourceSystemId> = $r21;

        $z5 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: boolean m_useSourceLocationProperty>;

        if $z5 == 0 goto label5;

        $r40 = new org.apache.xml.utils.IntVector;

        $r22 = $r40;

        specialinvoke $r40.<org.apache.xml.utils.IntVector: void <init>()>();

        goto label6;

     label5:
        $r22 = null;

     label6:
        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.IntVector m_sourceLine> = $r22;

        $z6 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: boolean m_useSourceLocationProperty>;

        if $z6 == 0 goto label7;

        $r41 = new org.apache.xml.utils.IntVector;

        $r23 = $r41;

        specialinvoke $r41.<org.apache.xml.utils.IntVector: void <init>()>();

        goto label8;

     label7:
        $r23 = null;

     label8:
        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.IntVector m_sourceColumn> = $r23;

        return;
    }

    public static void setUseSourceLocation(boolean)
    {
        boolean z0;

        z0 := @parameter0: boolean;

        <org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: boolean m_source_location> = z0;

        return;
    }

    protected int _dataOrQName(int)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM r0;
        org.apache.xml.utils.SuballocatedIntVector $r1, $r2;
        int i0, $i1, $i2, $i3, $i4, $i6;
        boolean $z0;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int m_size>;

        if i0 >= $i1 goto label1;

        $r2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_dataOrQName>;

        $i4 = virtualinvoke $r2.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i0);

        return $i4;

     label1:
        $z0 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: boolean nextNode()>();

        if $z0 != 0 goto label2;

        $i6 = (int) -1;

        return $i6;

     label2:
        $i2 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int m_size>;

        if i0 >= $i2 goto label3;

        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_dataOrQName>;

        $i3 = virtualinvoke $r1.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i0);

        return $i3;

     label3:
        goto label1;
    }

    public void clearCoRoutine()
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM r0;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM;

        virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: void clearCoRoutine(boolean)>(1);

        return;
    }

    public void clearCoRoutine(boolean)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM r0;
        org.apache.xml.dtm.ref.IncrementalSAXSource $r1, $r2;
        boolean z0;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM;

        z0 := @parameter0: boolean;

        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.dtm.ref.IncrementalSAXSource m_incrementalSAXSource>;

        if null == $r1 goto label2;

        if z0 == 0 goto label1;

        $r2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.dtm.ref.IncrementalSAXSource m_incrementalSAXSource>;

        interfaceinvoke $r2.<org.apache.xml.dtm.ref.IncrementalSAXSource: java.lang.Object deliverMoreNodes(boolean)>(0);

     label1:
        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.dtm.ref.IncrementalSAXSource m_incrementalSAXSource> = null;

     label2:
        return;
    }

    public void setIncrementalSAXSource(org.apache.xml.dtm.ref.IncrementalSAXSource)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM r0;
        org.apache.xml.dtm.ref.IncrementalSAXSource r1;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM;

        r1 := @parameter0: org.apache.xml.dtm.ref.IncrementalSAXSource;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.dtm.ref.IncrementalSAXSource m_incrementalSAXSource> = r1;

        interfaceinvoke r1.<org.apache.xml.dtm.ref.IncrementalSAXSource: void setContentHandler(org.xml.sax.ContentHandler)>(r0);

        interfaceinvoke r1.<org.apache.xml.dtm.ref.IncrementalSAXSource: void setLexicalHandler(org.xml.sax.ext.LexicalHandler)>(r0);

        interfaceinvoke r1.<org.apache.xml.dtm.ref.IncrementalSAXSource: void setDTDHandler(org.xml.sax.DTDHandler)>(r0);

        return;
    }

    public org.xml.sax.ContentHandler getContentHandler()
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM r0;
        org.apache.xml.dtm.ref.IncrementalSAXSource $r1, $r2;
        org.xml.sax.ContentHandler $r3;
        boolean $z0;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM;

        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.dtm.ref.IncrementalSAXSource m_incrementalSAXSource>;

        $z0 = $r1 instanceof org.apache.xml.dtm.ref.IncrementalSAXSource_Filter;

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.dtm.ref.IncrementalSAXSource m_incrementalSAXSource>;

        $r3 = (org.xml.sax.ContentHandler) $r2;

        return $r3;

     label1:
        return r0;
    }

    public org.xml.sax.ext.LexicalHandler getLexicalHandler()
    {
        org.xml.sax.ext.LexicalHandler $r3;
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM r0;
        org.apache.xml.dtm.ref.IncrementalSAXSource $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM;

        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.dtm.ref.IncrementalSAXSource m_incrementalSAXSource>;

        $z0 = $r1 instanceof org.apache.xml.dtm.ref.IncrementalSAXSource_Filter;

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.dtm.ref.IncrementalSAXSource m_incrementalSAXSource>;

        $r3 = (org.xml.sax.ext.LexicalHandler) $r2;

        return $r3;

     label1:
        return r0;
    }

    public org.xml.sax.EntityResolver getEntityResolver()
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM r0;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM;

        return r0;
    }

    public org.xml.sax.DTDHandler getDTDHandler()
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM r0;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM;

        return r0;
    }

    public org.xml.sax.ErrorHandler getErrorHandler()
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM r0;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM;

        return r0;
    }

    public org.xml.sax.ext.DeclHandler getDeclHandler()
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM r0;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM;

        return r0;
    }

    public boolean needsTwoThreads()
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM r0;
        org.apache.xml.dtm.ref.IncrementalSAXSource $r1;
        boolean $z0;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM;

        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.dtm.ref.IncrementalSAXSource m_incrementalSAXSource>;

        if null == $r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void dispatchCharactersEvents(int, org.xml.sax.ContentHandler, boolean) throws org.xml.sax.SAXException
    {
        boolean $z0, z1, $z2;
        org.apache.xml.utils.SuballocatedIntVector $r6, $r9, $r10, $r11, $r12, $r13;
        org.apache.xml.utils.FastStringBuffer $r7, $r8, $r14, $r15;
        short $s2, $s8;
        int i0, $i1, $i3, $i4, $i5, $i6, $i7, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, i17, i18, i19, $i20, i21, i22, $i24, $i25, $i27, $i29, $i30, $i32, $i34;
        java.lang.String $r2;
        org.xml.sax.ContentHandler r3;
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM r0;
        org.apache.xml.dtm.ref.DTMStringPool $r1;
        char[] $r4, $r5;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM;

        i0 := @parameter0: int;

        r3 := @parameter1: org.xml.sax.ContentHandler;

        z1 := @parameter2: boolean;

        $i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i0);

        $i24 = (int) -1;

        if $i1 != $i24 goto label01;

        return;

     label01:
        $s2 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: short _type(int)>($i1);

        $i25 = (int) $s2;

        $z0 = specialinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: boolean isTextType(int)>($i25);

        if $z0 == 0 goto label04;

        $r11 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_dataOrQName>;

        $i13 = virtualinvoke $r11.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i1);

        $r12 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i14 = virtualinvoke $r12.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i13);

        $r13 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i15 = $i13 + 1;

        $i16 = virtualinvoke $r13.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i15);

        if z1 == 0 goto label02;

        $r15 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.FastStringBuffer m_chars>;

        virtualinvoke $r15.<org.apache.xml.utils.FastStringBuffer: int sendNormalizedSAXcharacters(org.xml.sax.ContentHandler,int,int)>(r3, $i14, $i16);

        goto label03;

     label02:
        $r14 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.FastStringBuffer m_chars>;

        virtualinvoke $r14.<org.apache.xml.utils.FastStringBuffer: void sendSAXcharacters(org.xml.sax.ContentHandler,int,int)>(r3, $i14, $i16);

     label03:
        goto label14;

     label04:
        $i3 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _firstch(int)>($i1);

        $i27 = (int) -1;

        if $i27 == $i3 goto label11;

        $i29 = (int) -1;

        i17 = $i29;

        i18 = 0;

        i19 = $i3;

     label05:
        $s8 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: short _type(int)>(i19);

        $i30 = (int) $s8;

        $z2 = specialinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: boolean isTextType(int)>($i30);

        if $z2 == 0 goto label07;

        $i10 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int _dataOrQName(int)>(i19);

        $i32 = (int) -1;

        if $i32 != i17 goto label06;

        $r10 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_data>;

        i17 = virtualinvoke $r10.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i10);

     label06:
        $r9 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i11 = $i10 + 1;

        $i12 = virtualinvoke $r9.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i11);

        i18 = i18 + $i12;

     label07:
        $i20 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int getNextNodeIdentity(int)>(i19);

        i19 = $i20;

        $i34 = (int) -1;

        if $i34 == $i20 goto label08;

        $i9 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _parent(int)>($i20);

        if $i9 >= $i1 goto label05;

     label08:
        if i18 <= 0 goto label10;

        if z1 == 0 goto label09;

        $r8 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.FastStringBuffer m_chars>;

        virtualinvoke $r8.<org.apache.xml.utils.FastStringBuffer: int sendNormalizedSAXcharacters(org.xml.sax.ContentHandler,int,int)>(r3, i17, i18);

        goto label10;

     label09:
        $r7 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.FastStringBuffer m_chars>;

        virtualinvoke $r7.<org.apache.xml.utils.FastStringBuffer: void sendSAXcharacters(org.xml.sax.ContentHandler,int,int)>(r3, i17, i18);

     label10:
        goto label14;

     label11:
        if $s2 == 1 goto label14;

        $i4 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int _dataOrQName(int)>($i1);

        i21 = $i4;

        if $i4 >= 0 goto label12;

        i22 = neg $i4;

        $r6 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i7 = i22 + 1;

        i21 = virtualinvoke $r6.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i7);

     label12:
        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.dtm.ref.DTMStringPool m_valuesOrPrefixes>;

        $r2 = virtualinvoke $r1.<org.apache.xml.dtm.ref.DTMStringPool: java.lang.String indexToString(int)>(i21);

        if z1 == 0 goto label13;

        $r5 = virtualinvoke $r2.<java.lang.String: char[] toCharArray()>();

        $i6 = virtualinvoke $r2.<java.lang.String: int length()>();

        staticinvoke <org.apache.xml.utils.FastStringBuffer: void sendNormalizedSAXcharacters(char[],int,int,org.xml.sax.ContentHandler)>($r5, 0, $i6, r3);

        goto label14;

     label13:
        $r4 = virtualinvoke $r2.<java.lang.String: char[] toCharArray()>();

        $i5 = virtualinvoke $r2.<java.lang.String: int length()>();

        interfaceinvoke r3.<org.xml.sax.ContentHandler: void characters(char[],int,int)>($r4, 0, $i5);

     label14:
        return;
    }

    public java.lang.String getNodeName(int)
    {
        java.lang.String[] $r9;
        short $s5;
        java.lang.StringBuffer $r14, $r17, $r19;
        int i0, $i1, $i2, $i3, $i4, $i6, i7, i8, $i9, $i10;
        java.lang.String $r4, $r8, $r10, $r12, $r16, $r18;
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM r0;
        org.apache.xml.utils.SuballocatedIntVector $r2, $r5;
        org.apache.xml.dtm.ref.DTMStringPool $r3;
        org.apache.xml.dtm.ref.ExpandedNameTable $r1, $r6, $r7, $r11, $r15;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int getExpandedTypeID(int)>(i0);

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        $i2 = virtualinvoke $r1.<org.apache.xml.dtm.ref.ExpandedNameTable: int getNamespaceID(int)>($i1);

        if 0 != $i2 goto label4;

        $s5 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: short getNodeType(int)>(i0);

        $i9 = (int) $s5;

        if $i9 != 13 goto label2;

        $r11 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        $r12 = virtualinvoke $r11.<org.apache.xml.dtm.ref.ExpandedNameTable: java.lang.String getLocalName(int)>($i1);

        if null != $r12 goto label1;

        return "xmlns";

     label1:
        $r19 = new java.lang.StringBuffer;

        specialinvoke $r19.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("xmlns:");

        $r15 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        $r16 = virtualinvoke $r15.<org.apache.xml.dtm.ref.ExpandedNameTable: java.lang.String getLocalName(int)>($i1);

        $r17 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r18;

     label2:
        $r6 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        $i6 = virtualinvoke $r6.<org.apache.xml.dtm.ref.ExpandedNameTable: int getLocalNameID(int)>($i1);

        if 0 != $i6 goto label3;

        $r9 = <org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: java.lang.String[] m_fixednames>;

        $i10 = (int) $s5;

        $r10 = $r9[$i10];

        return $r10;

     label3:
        $r7 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        $r8 = virtualinvoke $r7.<org.apache.xml.dtm.ref.ExpandedNameTable: java.lang.String getLocalName(int)>($i1);

        return $r8;

     label4:
        $r2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_dataOrQName>;

        $i3 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i0);

        $i4 = virtualinvoke $r2.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i3);

        i7 = $i4;

        if $i4 >= 0 goto label5;

        i8 = neg $i4;

        $r5 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_data>;

        i7 = virtualinvoke $r5.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i8);

     label5:
        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.dtm.ref.DTMStringPool m_valuesOrPrefixes>;

        $r4 = virtualinvoke $r3.<org.apache.xml.dtm.ref.DTMStringPool: java.lang.String indexToString(int)>(i7);

        return $r4;
    }

    public java.lang.String getNodeNameX(int)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM r0;
        org.apache.xml.utils.SuballocatedIntVector $r2, $r5;
        org.apache.xml.dtm.ref.DTMStringPool $r3;
        int i0, $i1, $i2, $i3, $i4, i5, i6;
        org.apache.xml.dtm.ref.ExpandedNameTable $r1, $r6;
        java.lang.String $r4, $r7;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int getExpandedTypeID(int)>(i0);

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        $i2 = virtualinvoke $r1.<org.apache.xml.dtm.ref.ExpandedNameTable: int getNamespaceID(int)>($i1);

        if 0 != $i2 goto label2;

        $r6 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        $r7 = virtualinvoke $r6.<org.apache.xml.dtm.ref.ExpandedNameTable: java.lang.String getLocalName(int)>($i1);

        if $r7 != null goto label1;

        return "";

     label1:
        return $r7;

     label2:
        $r2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_dataOrQName>;

        $i3 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i0);

        $i4 = virtualinvoke $r2.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i3);

        i5 = $i4;

        if $i4 >= 0 goto label3;

        i6 = neg $i4;

        $r5 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_data>;

        i5 = virtualinvoke $r5.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i6);

     label3:
        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.dtm.ref.DTMStringPool m_valuesOrPrefixes>;

        $r4 = virtualinvoke $r3.<org.apache.xml.dtm.ref.DTMStringPool: java.lang.String indexToString(int)>(i5);

        return $r4;
    }

    public boolean isAttributeSpecified(int)
    {
        int i0;
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM r0;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM;

        i0 := @parameter0: int;

        return 1;
    }

    public java.lang.String getDocumentTypeDeclarationSystemIdentifier()
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM r0;
        java.lang.String $r1;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM;

        $r1 = staticinvoke <org.apache.xml.res.XMLMessages: java.lang.String createXMLMessage(java.lang.String,java.lang.Object[])>("ER_METHOD_NOT_SUPPORTED", null);

        virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: void error(java.lang.String)>($r1);

        return null;
    }

    protected int getNextNodeIdentity(int)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM r0;
        org.apache.xml.dtm.ref.IncrementalSAXSource $r1;
        int $i0, i1, i2, $i4;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM;

        i1 := @parameter0: int;

        i2 = i1 + 1;

        goto label3;

     label1:
        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.dtm.ref.IncrementalSAXSource m_incrementalSAXSource>;

        if null != $r1 goto label2;

        $i4 = (int) -1;

        return $i4;

     label2:
        virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: boolean nextNode()>();

     label3:
        $i0 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int m_size>;

        if i2 >= $i0 goto label1;

        return i2;
    }

    public void dispatchToEvents(int, org.xml.sax.ContentHandler) throws org.xml.sax.SAXException
    {
        java.lang.Throwable $r4;
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM r0;
        int i0;
        org.apache.xml.dtm.ref.DTMTreeWalker $r3, r5;
        org.xml.sax.ContentHandler $r1, r2;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM;

        i0 := @parameter0: int;

        r2 := @parameter1: org.xml.sax.ContentHandler;

        r5 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.dtm.ref.DTMTreeWalker m_walker>;

        $r1 = virtualinvoke r5.<org.apache.xml.dtm.ref.DTMTreeWalker: org.xml.sax.ContentHandler getcontentHandler()>();

        if null == $r1 goto label1;

        $r3 = new org.apache.xml.dtm.ref.DTMTreeWalker;

        specialinvoke $r3.<org.apache.xml.dtm.ref.DTMTreeWalker: void <init>()>();

        r5 = $r3;

     label1:
        virtualinvoke r5.<org.apache.xml.dtm.ref.DTMTreeWalker: void setcontentHandler(org.xml.sax.ContentHandler)>(r2);

        virtualinvoke r5.<org.apache.xml.dtm.ref.DTMTreeWalker: void setDTM(org.apache.xml.dtm.DTM)>(r0);

     label2:
        virtualinvoke r5.<org.apache.xml.dtm.ref.DTMTreeWalker: void traverse(int)>(i0);

        goto label7;

     label3:
        goto label6;

     label4:
        $r4 := @caughtexception;

        goto label8;

     label5:
        throw $r4;

     label6:
        return;

     label7:
        virtualinvoke r5.<org.apache.xml.dtm.ref.DTMTreeWalker: void setcontentHandler(org.xml.sax.ContentHandler)>(null);

        goto label3;

     label8:
        virtualinvoke r5.<org.apache.xml.dtm.ref.DTMTreeWalker: void setcontentHandler(org.xml.sax.ContentHandler)>(null);

        goto label5;

        catch java.lang.Throwable from label2 to label4 with label4;
    }

    public int getNumberOfNodes()
    {
        int $i0;
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM r0;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM;

        $i0 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int m_size>;

        return $i0;
    }

    protected boolean nextNode()
    {
        org.apache.xml.utils.WrappedRuntimeException $r5;
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM r0;
        org.apache.xml.dtm.ref.IncrementalSAXSource $r1, $r2;
        java.lang.RuntimeException $r7;
        java.lang.Exception $r6;
        java.lang.Boolean $r4;
        java.lang.Object $r3;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM;

        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.dtm.ref.IncrementalSAXSource m_incrementalSAXSource>;

        if null != $r1 goto label1;

        return 0;

     label1:
        $z0 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: boolean m_endDocumentOccured>;

        if $z0 == 0 goto label2;

        virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: void clearCoRoutine()>();

        return 0;

     label2:
        $r2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.dtm.ref.IncrementalSAXSource m_incrementalSAXSource>;

        $r3 = interfaceinvoke $r2.<org.apache.xml.dtm.ref.IncrementalSAXSource: java.lang.Object deliverMoreNodes(boolean)>(1);

        $z1 = $r3 instanceof java.lang.Boolean;

        if $z1 != 0 goto label5;

        $z2 = $r3 instanceof java.lang.RuntimeException;

        if $z2 == 0 goto label3;

        $r7 = (java.lang.RuntimeException) $r3;

        throw $r7;

     label3:
        $z3 = $r3 instanceof java.lang.Exception;

        if $z3 == 0 goto label4;

        $r5 = new org.apache.xml.utils.WrappedRuntimeException;

        $r6 = (java.lang.Exception) $r3;

        specialinvoke $r5.<org.apache.xml.utils.WrappedRuntimeException: void <init>(java.lang.Exception)>($r6);

        throw $r5;

     label4:
        virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: void clearCoRoutine()>();

        return 0;

     label5:
        $r4 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        if $r3 == $r4 goto label6;

        virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: void clearCoRoutine()>();

     label6:
        return 1;
    }

    private final boolean isTextType(int)
    {
        int i0;
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM r0;
        boolean $z0;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM;

        i0 := @parameter0: int;

        if 3 == i0 goto label1;

        if 4 != i0 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    protected int addNode(int, int, int, int, int, boolean)
    {
        org.xml.sax.Locator $r8;
        byte $b9;
        int $i0, $i1, $i2, $i3, i4, i5, i6, i7, i8, $i10, $i12, $i14, $i16, $i18;
        boolean z0, $z1;
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM r0;
        org.apache.xml.utils.SuballocatedIntVector $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r9, $r10, $r11;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM;

        i8 := @parameter0: int;

        i5 := @parameter1: int;

        i4 := @parameter2: int;

        i7 := @parameter3: int;

        i6 := @parameter4: int;

        z0 := @parameter5: boolean;

        $i0 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int m_size>;

        $i1 = $i0 + 1;

        r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int m_size> = $i1;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_dtmIdent>;

        $i2 = virtualinvoke $r1.<org.apache.xml.utils.SuballocatedIntVector: int size()>();

        $i3 = $i0 >>> 16;

        if $i2 != $i3 goto label01;

        virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: void addNewDTMID(int)>($i0);

     label01:
        $r2 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_firstch>;

        if z0 == 0 goto label02;

        $b9 = -2;

        goto label03;

     label02:
        $b9 = -1;

     label03:
        $i10 = (int) $b9;

        virtualinvoke $r2.<org.apache.xml.utils.SuballocatedIntVector: void addElement(int)>($i10);

        $r3 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_nextsib>;

        $i12 = (int) -2;

        virtualinvoke $r3.<org.apache.xml.utils.SuballocatedIntVector: void addElement(int)>($i12);

        $r4 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_parent>;

        virtualinvoke $r4.<org.apache.xml.utils.SuballocatedIntVector: void addElement(int)>(i4);

        $r5 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_exptype>;

        virtualinvoke $r5.<org.apache.xml.utils.SuballocatedIntVector: void addElement(int)>(i5);

        $r6 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_dataOrQName>;

        virtualinvoke $r6.<org.apache.xml.utils.SuballocatedIntVector: void addElement(int)>(i6);

        $r7 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_prevsib>;

        if $r7 == null goto label04;

        $r11 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_prevsib>;

        virtualinvoke $r11.<org.apache.xml.utils.SuballocatedIntVector: void addElement(int)>(i7);

     label04:
        $i14 = (int) -1;

        if $i14 == i7 goto label05;

        $r10 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_nextsib>;

        virtualinvoke $r10.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>($i0, i7);

     label05:
        $r8 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.xml.sax.Locator m_locator>;

        if $r8 == null goto label06;

        $z1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: boolean m_useSourceLocationProperty>;

        if $z1 == 0 goto label06;

        virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: void setSourceLocation()>();

     label06:
        lookupswitch(i8)
        {
            case 2: goto label08;
            case 13: goto label07;
            default: goto label09;
        };

     label07:
        virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: void declareNamespaceInContext(int,int)>(i4, $i0);

        goto label10;

     label08:
        goto label10;

     label09:
        $i16 = (int) -1;

        if $i16 != i7 goto label10;

        $i18 = (int) -1;

        if $i18 == i4 goto label10;

        $r9 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_firstch>;

        virtualinvoke $r9.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>($i0, i4);

     label10:
        return $i0;
    }

    protected void addNewDTMID(int)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM r0;
        org.apache.xml.utils.SuballocatedIntVector $r3;
        org.apache.xml.dtm.ref.DTMManagerDefault r7;
        java.lang.ClassCastException $r4, $r5;
        org.apache.xml.dtm.DTMManager $r1, $r2;
        int $i0, i1, $i2;
        java.lang.String $r6;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM;

        i1 := @parameter0: int;

     label1:
        $r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.DTMManager m_mgr>;

        if $r1 != null goto label2;

        $r4 = new java.lang.ClassCastException;

        specialinvoke $r4.<java.lang.ClassCastException: void <init>()>();

        throw $r4;

     label2:
        $r2 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.DTMManager m_mgr>;

        r7 = (org.apache.xml.dtm.ref.DTMManagerDefault) $r2;

        $i0 = virtualinvoke r7.<org.apache.xml.dtm.ref.DTMManagerDefault: int getFirstFreeDTMID()>();

        virtualinvoke r7.<org.apache.xml.dtm.ref.DTMManagerDefault: void addDTM(org.apache.xml.dtm.DTM,int,int)>(r0, $i0, i1);

        $r3 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_dtmIdent>;

        $i2 = $i0 << 16;

        virtualinvoke $r3.<org.apache.xml.utils.SuballocatedIntVector: void addElement(int)>($i2);

     label3:
        goto label5;

     label4:
        $r5 := @caughtexception;

        $r6 = staticinvoke <org.apache.xml.res.XMLMessages: java.lang.String createXMLMessage(java.lang.String,java.lang.Object[])>("ER_NO_DTMIDS_AVAIL", null);

        virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: void error(java.lang.String)>($r6);

     label5:
        return;

        catch java.lang.ClassCastException from label1 to label3 with label4;
    }

    public void migrateTo(org.apache.xml.dtm.DTMManager)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM r0;
        org.apache.xml.utils.SuballocatedIntVector $r2, $r4;
        org.apache.xml.dtm.ref.DTMManagerDefault $r3, $r5;
        org.apache.xml.dtm.DTMManager r1;
        int $i0, $i1, i2, i3, i4;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM;

        r1 := @parameter0: org.apache.xml.dtm.DTMManager;

        specialinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: void migrateTo(org.apache.xml.dtm.DTMManager)>(r1);

        $r2 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_dtmIdent>;

        $i0 = virtualinvoke $r2.<org.apache.xml.utils.SuballocatedIntVector: int size()>();

        $r3 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.DTMManagerDefault m_mgrDefault>;

        i2 = virtualinvoke $r3.<org.apache.xml.dtm.ref.DTMManagerDefault: int getFirstFreeDTMID()>();

        i3 = 0;

        i4 = 0;

        goto label2;

     label1:
        $r4 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_dtmIdent>;

        $i1 = i2 << 16;

        virtualinvoke $r4.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>($i1, i4);

        $r5 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.DTMManagerDefault m_mgrDefault>;

        virtualinvoke $r5.<org.apache.xml.dtm.ref.DTMManagerDefault: void addDTM(org.apache.xml.dtm.DTM,int,int)>(r0, i2, i3);

        i2 = i2 + 1;

        i3 = i3 + 65536;

        i4 = i4 + 1;

     label2:
        if i4 < $i0 goto label1;

        return;
    }

    protected void setSourceLocation()
    {
        org.xml.sax.Locator $r1, $r4, $r6;
        java.lang.StringBuffer $r9, $r11, $r12, $r13, $r15;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String $r3, $r16;
        org.apache.xml.utils.StringVector $r2, $r8, $r14;
        java.io.PrintStream $r10;
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM r0;
        org.apache.xml.utils.IntVector $r5, $r7;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM;

        $r2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.StringVector m_sourceSystemId>;

        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.xml.sax.Locator m_locator>;

        $r3 = interfaceinvoke $r1.<org.xml.sax.Locator: java.lang.String getSystemId()>();

        virtualinvoke $r2.<org.apache.xml.utils.StringVector: void addElement(java.lang.String)>($r3);

        $r5 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.IntVector m_sourceLine>;

        $r4 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.xml.sax.Locator m_locator>;

        $i0 = interfaceinvoke $r4.<org.xml.sax.Locator: int getLineNumber()>();

        virtualinvoke $r5.<org.apache.xml.utils.IntVector: void addElement(int)>($i0);

        $r7 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.IntVector m_sourceColumn>;

        $r6 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.xml.sax.Locator m_locator>;

        $i1 = interfaceinvoke $r6.<org.xml.sax.Locator: int getColumnNumber()>();

        virtualinvoke $r7.<org.apache.xml.utils.IntVector: void addElement(int)>($i1);

        $r8 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.StringVector m_sourceSystemId>;

        $i2 = virtualinvoke $r8.<org.apache.xml.utils.StringVector: int size()>();

        $i3 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int m_size>;

        if $i2 == $i3 goto label1;

        $r10 = <java.lang.System: java.io.PrintStream err>;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("CODING ERROR in Source Location: ");

        $i4 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int m_size>;

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i4);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" != ");

        $r14 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.StringVector m_sourceSystemId>;

        $i5 = virtualinvoke $r14.<org.apache.xml.utils.StringVector: int size()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i5);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r16);

        staticinvoke <java.lang.System: void exit(int)>(1);

     label1:
        return;
    }

    public java.lang.String getNodeValue(int)
    {
        short $s2;
        int i0, $i1, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10, $i11, $i12, $i13;
        java.lang.String $r2, $r7;
        boolean $z0;
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM r0;
        org.apache.xml.utils.SuballocatedIntVector $r3, $r4, $r5;
        org.apache.xml.utils.FastStringBuffer $r6;
        org.apache.xml.dtm.ref.DTMStringPool $r1;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i0);

        $s2 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: short _type(int)>($i1);

        $i11 = (int) $s2;

        $z0 = specialinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: boolean isTextType(int)>($i11);

        if $z0 == 0 goto label1;

        $i5 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int _dataOrQName(int)>($i1);

        $r4 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i6 = virtualinvoke $r4.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i5);

        $r5 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i7 = $i5 + 1;

        $i8 = virtualinvoke $r5.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i7);

        $r6 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.FastStringBuffer m_chars>;

        $r7 = virtualinvoke $r6.<org.apache.xml.utils.FastStringBuffer: java.lang.String getString(int,int)>($i6, $i8);

        return $r7;

     label1:
        if 1 == $s2 goto label2;

        $i12 = (int) $s2;

        if 11 == $i12 goto label2;

        $i13 = (int) $s2;

        if 9 != $i13 goto label3;

     label2:
        return null;

     label3:
        $i3 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int _dataOrQName(int)>($i1);

        i9 = $i3;

        if $i3 >= 0 goto label4;

        i10 = neg $i3;

        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i4 = i10 + 1;

        i9 = virtualinvoke $r3.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i4);

     label4:
        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.dtm.ref.DTMStringPool m_valuesOrPrefixes>;

        $r2 = virtualinvoke $r1.<org.apache.xml.dtm.ref.DTMStringPool: java.lang.String indexToString(int)>(i9);

        return $r2;
    }

    public java.lang.String getLocalName(int)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM r0;
        int i0, $i1, $i2;
        org.apache.xml.dtm.ref.ExpandedNameTable $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        $i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i0);

        $i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _exptype(int)>($i1);

        $r2 = virtualinvoke $r1.<org.apache.xml.dtm.ref.ExpandedNameTable: java.lang.String getLocalName(int)>($i2);

        return $r2;
    }

    public java.lang.String getUnparsedEntityURI(java.lang.String)
    {
        java.util.Vector $r1, $r2, $r3, $r7, $r10, $r12;
        int $i0, $i1, $i2, $i3, $i4, i5;
        java.lang.String r5, r6, r9, r14;
        boolean $z0;
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM r0;
        java.lang.Object $r4, $r8, $r11, $r13;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM;

        r6 := @parameter0: java.lang.String;

        r14 = "";

        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: java.util.Vector m_entities>;

        if null != $r1 goto label1;

        return "";

     label1:
        $r2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: java.util.Vector m_entities>;

        $i0 = virtualinvoke $r2.<java.util.Vector: int size()>();

        i5 = 0;

        goto label4;

     label2:
        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: java.util.Vector m_entities>;

        $i1 = i5 + 3;

        $r4 = virtualinvoke $r3.<java.util.Vector: java.lang.Object elementAt(int)>($i1);

        r5 = (java.lang.String) $r4;

        if null == r5 goto label3;

        $z0 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>(r6);

        if $z0 == 0 goto label3;

        $r7 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: java.util.Vector m_entities>;

        $i2 = i5 + 2;

        $r8 = virtualinvoke $r7.<java.util.Vector: java.lang.Object elementAt(int)>($i2);

        r9 = (java.lang.String) $r8;

        if null == r9 goto label5;

        $r10 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: java.util.Vector m_entities>;

        $i3 = i5 + 1;

        $r11 = virtualinvoke $r10.<java.util.Vector: java.lang.Object elementAt(int)>($i3);

        r14 = (java.lang.String) $r11;

        if null != r14 goto label5;

        $r12 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: java.util.Vector m_entities>;

        $i4 = i5 + 0;

        $r13 = virtualinvoke $r12.<java.util.Vector: java.lang.Object elementAt(int)>($i4);

        r14 = (java.lang.String) $r13;

        goto label5;

     label3:
        i5 = i5 + 4;

     label4:
        if i5 < $i0 goto label2;

     label5:
        return r14;
    }

    public java.lang.String getPrefix(int)
    {
        short $s2;
        int i0, $i1, $i3, $i4, $i5, $i6, $i7;
        java.lang.String $r3, $r4, $r6, $r7;
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM r0;
        org.apache.xml.utils.SuballocatedIntVector $r1;
        org.apache.xml.dtm.ref.DTMStringPool $r2, $r5;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i0);

        $s2 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: short _type(int)>($i1);

        if 1 != $s2 goto label2;

        $i6 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int _dataOrQName(int)>($i1);

        if 0 != $i6 goto label1;

        return "";

     label1:
        $r5 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.dtm.ref.DTMStringPool m_valuesOrPrefixes>;

        $r6 = virtualinvoke $r5.<org.apache.xml.dtm.ref.DTMStringPool: java.lang.String indexToString(int)>($i6);

        $r7 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: java.lang.String getPrefix(java.lang.String,java.lang.String)>($r6, null);

        return $r7;

     label2:
        $i7 = (int) $s2;

        if 2 != $i7 goto label3;

        $i3 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int _dataOrQName(int)>($i1);

        if $i3 >= 0 goto label3;

        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i4 = neg $i3;

        $i5 = virtualinvoke $r1.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i4);

        $r2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.dtm.ref.DTMStringPool m_valuesOrPrefixes>;

        $r3 = virtualinvoke $r2.<org.apache.xml.dtm.ref.DTMStringPool: java.lang.String indexToString(int)>($i5);

        $r4 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: java.lang.String getPrefix(java.lang.String,java.lang.String)>($r3, null);

        return $r4;

     label3:
        return "";
    }

    public int getAttributeNode(int, java.lang.String, java.lang.String)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM r0;
        int i0, i1, $i3, $i5;
        java.lang.String $r1, $r2, r3, r4;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM;

        i0 := @parameter0: int;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int getFirstAttribute(int)>(i0);

        goto label6;

     label1:
        $r1 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: java.lang.String getNamespaceURI(int)>(i1);

        $r2 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: java.lang.String getLocalName(int)>(i1);

        if r3 == $r1 goto label2;

        if r3 == null goto label3;

        $z1 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z1 == 0 goto label3;

     label2:
        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        if $z2 == 0 goto label5;

        $z0 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label5;

        return i1;

     label5:
        i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int getNextAttribute(int)>(i1);

     label6:
        $i3 = (int) -1;

        if $i3 != i1 goto label1;

        $i5 = (int) -1;

        return $i5;
    }

    public java.lang.String getDocumentTypeDeclarationPublicIdentifier()
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM r0;
        java.lang.String $r1;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM;

        $r1 = staticinvoke <org.apache.xml.res.XMLMessages: java.lang.String createXMLMessage(java.lang.String,java.lang.Object[])>("ER_METHOD_NOT_SUPPORTED", null);

        virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: void error(java.lang.String)>($r1);

        return null;
    }

    public java.lang.String getNamespaceURI(int)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM r0;
        int i0, $i1, $i2;
        org.apache.xml.dtm.ref.ExpandedNameTable $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        $i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i0);

        $i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _exptype(int)>($i1);

        $r2 = virtualinvoke $r1.<org.apache.xml.dtm.ref.ExpandedNameTable: java.lang.String getNamespace(int)>($i2);

        return $r2;
    }

    public org.apache.xml.utils.XMLString getStringValue(int)
    {
        org.apache.xml.utils.XMLString $r2, $r6, $r10, $r17;
        org.apache.xml.utils.XMLStringFactory $r1, $r4, $r9, $r16;
        boolean $z0, $z1;
        org.apache.xml.utils.SuballocatedIntVector $r7, $r11, $r12, $r13, $r14;
        org.apache.xml.utils.FastStringBuffer $r8, $r15;
        short $s5, s14;
        int i0, $i1, $i2, $i3, $i4, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i15, i16, i17, $i18, i19, i20, $i22, $i24, $i26, $i27, $i29, $i31;
        java.lang.String $r5;
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM r0;
        org.apache.xml.dtm.ref.DTMStringPool $r3;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i0);

        $i22 = (int) -1;

        if $i1 != $i22 goto label01;

        s14 = -1;

        goto label02;

     label01:
        s14 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: short _type(int)>($i1);

     label02:
        $z0 = specialinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: boolean isTextType(int)>(s14);

        if $z0 == 0 goto label03;

        $i10 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int _dataOrQName(int)>($i1);

        $r13 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i11 = virtualinvoke $r13.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i10);

        $r14 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i12 = $i10 + 1;

        $i13 = virtualinvoke $r14.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i12);

        $r16 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.XMLStringFactory m_xstrf>;

        $r15 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.FastStringBuffer m_chars>;

        $r17 = virtualinvoke $r16.<org.apache.xml.utils.XMLStringFactory: org.apache.xml.utils.XMLString newstr(org.apache.xml.utils.FastStringBuffer,int,int)>($r15, $i11, $i13);

        return $r17;

     label03:
        $i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _firstch(int)>($i1);

        $i24 = (int) -1;

        if $i24 == $i2 goto label09;

        $i26 = (int) -1;

        i15 = $i26;

        i16 = 0;

        i17 = $i2;

     label04:
        $s5 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: short _type(int)>(i17);

        $i27 = (int) $s5;

        $z1 = specialinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: boolean isTextType(int)>($i27);

        if $z1 == 0 goto label06;

        $i7 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int _dataOrQName(int)>(i17);

        $i29 = (int) -1;

        if $i29 != i15 goto label05;

        $r12 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_data>;

        i15 = virtualinvoke $r12.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i7);

     label05:
        $r11 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i8 = $i7 + 1;

        $i9 = virtualinvoke $r11.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i8);

        i16 = i16 + $i9;

     label06:
        $i18 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int getNextNodeIdentity(int)>(i17);

        i17 = $i18;

        $i31 = (int) -1;

        if $i31 == $i18 goto label07;

        $i6 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _parent(int)>($i18);

        if $i6 >= $i1 goto label04;

     label07:
        if i16 <= 0 goto label08;

        $r9 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.XMLStringFactory m_xstrf>;

        $r8 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.FastStringBuffer m_chars>;

        $r10 = virtualinvoke $r9.<org.apache.xml.utils.XMLStringFactory: org.apache.xml.utils.XMLString newstr(org.apache.xml.utils.FastStringBuffer,int,int)>($r8, i15, i16);

        return $r10;

     label08:
        goto label11;

     label09:
        if s14 == 1 goto label11;

        $i3 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int _dataOrQName(int)>($i1);

        i19 = $i3;

        if $i3 >= 0 goto label10;

        i20 = neg $i3;

        $r7 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i4 = i20 + 1;

        i19 = virtualinvoke $r7.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i4);

     label10:
        $r4 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.XMLStringFactory m_xstrf>;

        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.dtm.ref.DTMStringPool m_valuesOrPrefixes>;

        $r5 = virtualinvoke $r3.<org.apache.xml.dtm.ref.DTMStringPool: java.lang.String indexToString(int)>(i19);

        $r6 = virtualinvoke $r4.<org.apache.xml.utils.XMLStringFactory: org.apache.xml.utils.XMLString newstr(java.lang.String)>($r5);

        return $r6;

     label11:
        $r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.XMLStringFactory m_xstrf>;

        $r2 = virtualinvoke $r1.<org.apache.xml.utils.XMLStringFactory: org.apache.xml.utils.XMLString emptystr()>();

        return $r2;
    }

    public boolean isWhitespace(int)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM r0;
        org.apache.xml.utils.SuballocatedIntVector $r1, $r2;
        org.apache.xml.utils.FastStringBuffer $r3;
        short s6;
        int i0, $i1, $i2, $i3, $i4, $i5, $i8;
        boolean $z0, $z1;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i0);

        $i8 = (int) -1;

        if $i1 != $i8 goto label1;

        s6 = -1;

        goto label2;

     label1:
        s6 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: short _type(int)>($i1);

     label2:
        $z0 = specialinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: boolean isTextType(int)>(s6);

        if $z0 == 0 goto label3;

        $i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int _dataOrQName(int)>($i1);

        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i3 = virtualinvoke $r1.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i2);

        $r2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i4 = $i2 + 1;

        $i5 = virtualinvoke $r2.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i4);

        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.FastStringBuffer m_chars>;

        $z1 = virtualinvoke $r3.<org.apache.xml.utils.FastStringBuffer: boolean isWhitespace(int,int)>($i3, $i5);

        return $z1;

     label3:
        return 0;
    }

    public int getElementById(java.lang.String)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM r0;
        java.lang.Integer $r4;
        int $i0, $i1, $i3;
        java.lang.Object $r3;
        java.lang.String r1;
        java.util.Hashtable $r2;
        boolean $z0, z1;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM;

        r1 := @parameter0: java.lang.String;

        z1 = 1;

     label1:
        $r2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: java.util.Hashtable m_idAttributes>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.lang.Integer) $r3;

        if null == $r4 goto label2;

        $i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        $i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeHandle(int)>($i0);

        return $i1;

     label2:
        if z1 == 0 goto label4;

        $z0 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: boolean m_endDocumentOccured>;

        if $z0 == 0 goto label3;

        goto label4;

     label3:
        z1 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: boolean nextNode()>();

        if null == $r4 goto label1;

     label4:
        $i3 = (int) -1;

        return $i3;
    }

    public java.lang.String getPrefix(java.lang.String, java.lang.String)
    {
        java.util.Vector $r3, $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, $i11;
        java.lang.String r0, r1, r6, $r7;
        boolean $z0, $z1, $z2, $z3;
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM r2;
        java.lang.Object $r5;

        r2 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM;

        r1 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        $i11 = (int) -1;

        i8 = $i11;

        if null == r0 goto label09;

        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i2 <= 0 goto label09;

     label01:
        $r3 = r2.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: java.util.Vector m_prefixMappings>;

        i9 = i8 + 1;

        $i3 = virtualinvoke $r3.<java.util.Vector: int indexOf(java.lang.Object,int)>(r0, i9);

        i8 = $i3;

        $i4 = $i3 & 1;

        if $i4 == 0 goto label01;

        if $i3 < 0 goto label02;

        $r4 = r2.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: java.util.Vector m_prefixMappings>;

        $i7 = $i3 - 1;

        $r5 = virtualinvoke $r4.<java.util.Vector: java.lang.Object elementAt(int)>($i7);

        r6 = (java.lang.String) $r5;

        goto label15;

     label02:
        if null == r1 goto label08;

        $i5 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(58);

        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("xmlns");

        if $z2 == 0 goto label03;

        r6 = "";

        goto label07;

     label03:
        $z3 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("xmlns:");

        if $z3 == 0 goto label04;

        $i6 = $i5 + 1;

        r6 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i6);

        goto label07;

     label04:
        if $i5 <= 0 goto label05;

        $r7 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i5);

        goto label06;

     label05:
        $r7 = null;

     label06:
        r6 = $r7;

     label07:
        goto label15;

     label08:
        r6 = null;

        goto label15;

     label09:
        if null == r1 goto label14;

        $i0 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(58);

        if $i0 <= 0 goto label11;

        $z1 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("xmlns:");

        if $z1 == 0 goto label10;

        $i1 = $i0 + 1;

        r6 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i1);

        goto label13;

     label10:
        r6 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        goto label13;

     label11:
        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("xmlns");

        if $z0 == 0 goto label12;

        r6 = "";

        goto label13;

     label12:
        r6 = null;

     label13:
        goto label15;

     label14:
        r6 = null;

     label15:
        return r6;
    }

    public int getIdForNamespace(java.lang.String)
    {
        org.apache.xml.dtm.ref.DTMStringPool $r2;
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM r0;
        int $i0;
        java.lang.String r1;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.dtm.ref.DTMStringPool m_valuesOrPrefixes>;

        $i0 = virtualinvoke $r2.<org.apache.xml.dtm.ref.DTMStringPool: int stringToIndex(java.lang.String)>(r1);

        return $i0;
    }

    public java.lang.String getNamespaceURI(java.lang.String)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM r0;
        org.apache.xml.utils.IntStack $r1;
        java.util.Vector $r2, $r6;
        int $i0, $i1, $i2, i3, i4, $i5, $i7;
        java.lang.Object $r3;
        java.lang.String r4, r5;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM;

        r4 := @parameter0: java.lang.String;

        r5 = "";

        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.IntStack m_contextIndexes>;

        $i0 = virtualinvoke $r1.<org.apache.xml.utils.IntStack: int peek()>();

        i3 = $i0 - 1;

        if null != r4 goto label1;

        r4 = "";

     label1:
        $r6 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: java.util.Vector m_prefixMappings>;

        i4 = i3 + 1;

        $i5 = virtualinvoke $r6.<java.util.Vector: int indexOf(java.lang.Object,int)>(r4, i4);

        i3 = $i5;

        if $i5 < 0 goto label2;

        $i2 = $i5 & 1;

        if $i2 == 1 goto label1;

     label2:
        $i7 = (int) -1;

        if $i5 <= $i7 goto label3;

        $r2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: java.util.Vector m_prefixMappings>;

        $i1 = $i5 + 1;

        $r3 = virtualinvoke $r2.<java.util.Vector: java.lang.Object elementAt(int)>($i1);

        r5 = (java.lang.String) $r3;

     label3:
        return r5;
    }

    public void setIDAttribute(java.lang.String, int)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM r0;
        int i0;
        java.lang.String r1;
        java.lang.Integer $r2;
        java.util.Hashtable $r3;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: java.util.Hashtable m_idAttributes>;

        $r2 = new java.lang.Integer;

        specialinvoke $r2.<java.lang.Integer: void <init>(int)>(i0);

        virtualinvoke $r3.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r2);

        return;
    }

    protected void charactersFlush()
    {
        org.apache.xml.utils.IntStack $r4;
        int $i0, $i1, $i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i14;
        boolean $z0, z1;
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM r0;
        org.apache.xml.utils.SuballocatedIntVector $r3, $r5, $r6;
        org.apache.xml.utils.FastStringBuffer $r1, $r7, $r8;
        org.apache.xml.dtm.ref.ExpandedNameTable $r2;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM;

        $i0 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int m_textPendingStart>;

        if $i0 < 0 goto label4;

        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.FastStringBuffer m_chars>;

        $i1 = virtualinvoke $r1.<org.apache.xml.utils.FastStringBuffer: int size()>();

        $i2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int m_textPendingStart>;

        i3 = $i1 - $i2;

        z1 = 0;

        $z0 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: boolean getShouldStripWhitespace()>();

        if $z0 == 0 goto label1;

        $r8 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.FastStringBuffer m_chars>;

        $i12 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int m_textPendingStart>;

        z1 = virtualinvoke $r8.<org.apache.xml.utils.FastStringBuffer: boolean isWhitespace(int,int)>($i12, i3);

     label1:
        if z1 == 0 goto label2;

        $r7 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.FastStringBuffer m_chars>;

        $i11 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int m_textPendingStart>;

        virtualinvoke $r7.<org.apache.xml.utils.FastStringBuffer: void setLength(int)>($i11);

        goto label3;

     label2:
        $r2 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        $i4 = virtualinvoke $r2.<org.apache.xml.dtm.ref.ExpandedNameTable: int getExpandedTypeID(int)>(3);

        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i5 = virtualinvoke $r3.<org.apache.xml.utils.SuballocatedIntVector: int size()>();

        $i6 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int m_coalescedTextType>;

        $r4 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.IntStack m_parents>;

        $i7 = virtualinvoke $r4.<org.apache.xml.utils.IntStack: int peek()>();

        $i8 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int m_previous>;

        $i9 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int addNode(int,int,int,int,int,boolean)>($i6, $i4, $i7, $i8, $i5, 0);

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int m_previous> = $i9;

        $r5 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i10 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int m_textPendingStart>;

        virtualinvoke $r5.<org.apache.xml.utils.SuballocatedIntVector: void addElement(int)>($i10);

        $r6 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_data>;

        virtualinvoke $r6.<org.apache.xml.utils.SuballocatedIntVector: void addElement(int)>(i3);

     label3:
        $i14 = (int) -1;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int m_textPendingStart> = $i14;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int m_coalescedTextType> = 3;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int m_textType> = 3;

     label4:
        return;
    }

    public org.xml.sax.InputSource resolveEntity(java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM r0;
        java.lang.String r1, r2;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        return null;
    }

    public void notationDecl(java.lang.String, java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM r0;
        java.lang.String r1, r2, r3;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        return;
    }

    public void unparsedEntityDecl(java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM r0;
        java.lang.Exception $r12;
        java.util.Vector $r1, $r5, $r6, $r8, $r10, $r11;
        org.xml.sax.SAXException $r13;
        java.lang.String $r2, $r3, r4, r7, r9, r14;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM;

        r9 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        r14 := @parameter2: java.lang.String;

        r7 := @parameter3: java.lang.String;

        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: java.util.Vector m_entities>;

        if null != $r1 goto label1;

        $r11 = new java.util.Vector;

        specialinvoke $r11.<java.util.Vector: void <init>()>();

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: java.util.Vector m_entities> = $r11;

     label1:
        $r2 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: java.lang.String getDocumentBaseURI()>();

        $r3 = staticinvoke <org.apache.xml.utils.SystemIDResolver: java.lang.String getAbsoluteURI(java.lang.String,java.lang.String)>(r14, $r2);

     label2:
        goto label4;

     label3:
        $r12 := @caughtexception;

        $r13 = new org.xml.sax.SAXException;

        specialinvoke $r13.<org.xml.sax.SAXException: void <init>(java.lang.Exception)>($r12);

        throw $r13;

     label4:
        $r5 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: java.util.Vector m_entities>;

        virtualinvoke $r5.<java.util.Vector: void addElement(java.lang.Object)>(r4);

        $r6 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: java.util.Vector m_entities>;

        virtualinvoke $r6.<java.util.Vector: void addElement(java.lang.Object)>($r3);

        $r8 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: java.util.Vector m_entities>;

        virtualinvoke $r8.<java.util.Vector: void addElement(java.lang.Object)>(r7);

        $r10 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: java.util.Vector m_entities>;

        virtualinvoke $r10.<java.util.Vector: void addElement(java.lang.Object)>(r9);

        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void setDocumentLocator(org.xml.sax.Locator)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM r0;
        java.lang.String $r2;
        org.xml.sax.Locator r1;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM;

        r1 := @parameter0: org.xml.sax.Locator;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.xml.sax.Locator m_locator> = r1;

        $r2 = interfaceinvoke r1.<org.xml.sax.Locator: java.lang.String getSystemId()>();

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: java.lang.String m_systemId> = $r2;

        return;
    }

    public void startDocument() throws org.xml.sax.SAXException
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM r0;
        org.apache.xml.utils.IntStack $r2, $r4;
        java.util.Vector $r3;
        int $i0, $i1, $i2, $i4, $i6, $i8;
        org.apache.xml.dtm.ref.ExpandedNameTable $r1;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        $i0 = virtualinvoke $r1.<org.apache.xml.dtm.ref.ExpandedNameTable: int getExpandedTypeID(int)>(9);

        $i4 = (int) -1;

        $i6 = (int) -1;

        $i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int addNode(int,int,int,int,int,boolean)>(9, $i0, $i4, $i6, 0, 1);

        $r2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.IntStack m_parents>;

        virtualinvoke $r2.<org.apache.xml.utils.IntStack: int push(int)>($i1);

        $i8 = (int) -1;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int m_previous> = $i8;

        $r4 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.IntStack m_contextIndexes>;

        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: java.util.Vector m_prefixMappings>;

        $i2 = virtualinvoke $r3.<java.util.Vector: int size()>();

        virtualinvoke $r4.<org.apache.xml.utils.IntStack: int push(int)>($i2);

        return;
    }

    public void endDocument() throws org.xml.sax.SAXException
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM r0;
        org.apache.xml.utils.SuballocatedIntVector $r1, $r2, $r3, $r4;
        int $i0, $i1, $i2, $i4, $i6, $i8, $i10, $i12;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM;

        virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: void charactersFlush()>();

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_nextsib>;

        $i4 = (int) -1;

        virtualinvoke $r1.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>($i4, 0);

        $r2 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_firstch>;

        $i0 = virtualinvoke $r2.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(0);

        $i6 = (int) -2;

        if $i0 != $i6 goto label1;

        $r4 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_firstch>;

        $i8 = (int) -1;

        virtualinvoke $r4.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>($i8, 0);

     label1:
        $i1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int m_previous>;

        $i10 = (int) -1;

        if $i10 == $i1 goto label2;

        $r3 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_nextsib>;

        $i2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int m_previous>;

        $i12 = (int) -1;

        virtualinvoke $r3.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>($i12, $i2);

     label2:
        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.IntStack m_parents> = null;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: java.util.Vector m_prefixMappings> = null;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.IntStack m_contextIndexes> = null;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: boolean m_endDocumentOccured> = 1;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.xml.sax.Locator m_locator> = null;

        return;
    }

    public void startPrefixMapping(java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM r0;
        java.util.Vector $r1, $r3;
        java.lang.String r2, r4;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM;

        r4 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        if null != r4 goto label1;

        r4 = "";

     label1:
        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: java.util.Vector m_prefixMappings>;

        virtualinvoke $r1.<java.util.Vector: void addElement(java.lang.Object)>(r4);

        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: java.util.Vector m_prefixMappings>;

        virtualinvoke $r3.<java.util.Vector: void addElement(java.lang.Object)>(r2);

        return;
    }

    public void endPrefixMapping(java.lang.String) throws org.xml.sax.SAXException
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM r0;
        org.apache.xml.utils.IntStack $r1;
        java.util.Vector $r2, $r3, $r5;
        int $i0, $i1, $i2, i3, i4, $i5, $i7;
        java.lang.String r4;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM;

        r4 := @parameter0: java.lang.String;

        if null != r4 goto label1;

        r4 = "";

     label1:
        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.IntStack m_contextIndexes>;

        $i0 = virtualinvoke $r1.<org.apache.xml.utils.IntStack: int peek()>();

        i3 = $i0 - 1;

     label2:
        $r5 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: java.util.Vector m_prefixMappings>;

        i4 = i3 + 1;

        $i5 = virtualinvoke $r5.<java.util.Vector: int indexOf(java.lang.Object,int)>(r4, i4);

        i3 = $i5;

        if $i5 < 0 goto label3;

        $i2 = $i5 & 1;

        if $i2 == 1 goto label2;

     label3:
        $i7 = (int) -1;

        if $i5 <= $i7 goto label4;

        $r2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: java.util.Vector m_prefixMappings>;

        virtualinvoke $r2.<java.util.Vector: void setElementAt(java.lang.Object,int)>("%@$#^@#", $i5);

        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: java.util.Vector m_prefixMappings>;

        $i1 = $i5 + 1;

        virtualinvoke $r3.<java.util.Vector: void setElementAt(java.lang.Object,int)>("%@$#^@#", $i1);

     label4:
        return;
    }

    protected boolean declAlreadyDeclared(java.lang.String)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM r0;
        org.apache.xml.utils.IntStack $r1;
        java.util.Vector r2;
        int $i0, $i1, i2;
        java.lang.Object $r3;
        java.lang.String r4, r5;
        boolean $z0;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM;

        r5 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.IntStack m_contextIndexes>;

        $i0 = virtualinvoke $r1.<org.apache.xml.utils.IntStack: int peek()>();

        r2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: java.util.Vector m_prefixMappings>;

        $i1 = virtualinvoke r2.<java.util.Vector: int size()>();

        i2 = $i0;

        goto label4;

     label1:
        $r3 = virtualinvoke r2.<java.util.Vector: java.lang.Object elementAt(int)>(i2);

        r4 = (java.lang.String) $r3;

        if r4 != null goto label2;

        goto label3;

     label2:
        $z0 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>(r5);

        if $z0 == 0 goto label3;

        return 1;

     label3:
        i2 = i2 + 2;

     label4:
        if i2 < $i1 goto label1;

        return 0;
    }

    public void startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes) throws org.xml.sax.SAXException
    {
        org.apache.xml.utils.IntStack $r6, $r7, $r8, $r38;
        java.util.Vector $r9, $r10, $r12, $r39;
        byte b22, b25, b26;
        org.apache.xml.utils.SuballocatedIntVector $r26, $r27, $r28, $r31;
        short $s15;
        java.lang.String r1, r2, r4, $r5, $r17, $r18, $r19, $r20, $r21, $r22, r35, r36, r37;
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM r0;
        org.apache.xml.dtm.ref.DTMStringPool $r15, $r23, $r25, $r33, $r34;
        org.apache.xml.dtm.ref.ExpandedNameTable $r3, $r14, $r24, $r32;
        org.apache.xml.dtm.DTMWSFilter $r29, $r30;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i16, $i17, $i18, i19, i20, i21, i23, $i24, $i28, $i30, $i32, $i34, $i35, $i36, $i38;
        org.xml.sax.Attributes r16;
        java.lang.Object $r11, $r13;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        r16 := @parameter3: org.xml.sax.Attributes;

        virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: void charactersFlush()>();

        $r3 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        $i0 = virtualinvoke $r3.<org.apache.xml.dtm.ref.ExpandedNameTable: int getExpandedTypeID(java.lang.String,java.lang.String,int)>(r1, r2, 1);

        $r5 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: java.lang.String getPrefix(java.lang.String,java.lang.String)>(r4, r1);

        if null == $r5 goto label01;

        $r34 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.dtm.ref.DTMStringPool m_valuesOrPrefixes>;

        $i18 = virtualinvoke $r34.<org.apache.xml.dtm.ref.DTMStringPool: int stringToIndex(java.lang.String)>(r4);

        goto label02;

     label01:
        $i18 = 0;

     label02:
        $r6 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.IntStack m_parents>;

        $i1 = virtualinvoke $r6.<org.apache.xml.utils.IntStack: int peek()>();

        $i2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int m_previous>;

        $i3 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int addNode(int,int,int,int,int,boolean)>(1, $i0, $i1, $i2, $i18, 1);

        $z0 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: boolean m_indexing>;

        if $z0 == 0 goto label03;

        virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: void indexNode(int,int)>($i0, $i3);

     label03:
        $r7 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.IntStack m_parents>;

        virtualinvoke $r7.<org.apache.xml.utils.IntStack: int push(int)>($i3);

        $r8 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.IntStack m_contextIndexes>;

        $i4 = virtualinvoke $r8.<org.apache.xml.utils.IntStack: int peek()>();

        $r9 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: java.util.Vector m_prefixMappings>;

        $i5 = virtualinvoke $r9.<java.util.Vector: int size()>();

        $i28 = (int) -1;

        i19 = $i28;

        $z1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: boolean m_pastFirstElement>;

        if $z1 != 0 goto label04;

        $r32 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        $i16 = virtualinvoke $r32.<org.apache.xml.dtm.ref.ExpandedNameTable: int getExpandedTypeID(java.lang.String,java.lang.String,int)>(null, "xml", 13);

        $r33 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.dtm.ref.DTMStringPool m_valuesOrPrefixes>;

        $i17 = virtualinvoke $r33.<org.apache.xml.dtm.ref.DTMStringPool: int stringToIndex(java.lang.String)>("http://www.w3.org/XML/1998/namespace");

        $i30 = (int) -1;

        i19 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int addNode(int,int,int,int,int,boolean)>(13, $i16, $i3, $i30, $i17, 0);

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: boolean m_pastFirstElement> = 1;

     label04:
        i20 = $i4;

        goto label08;

     label05:
        $r10 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: java.util.Vector m_prefixMappings>;

        $r11 = virtualinvoke $r10.<java.util.Vector: java.lang.Object elementAt(int)>(i20);

        r35 = (java.lang.String) $r11;

        if r35 != null goto label06;

        goto label07;

     label06:
        $r12 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: java.util.Vector m_prefixMappings>;

        $i6 = i20 + 1;

        $r13 = virtualinvoke $r12.<java.util.Vector: java.lang.Object elementAt(int)>($i6);

        r36 = (java.lang.String) $r13;

        $r14 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        $i7 = virtualinvoke $r14.<org.apache.xml.dtm.ref.ExpandedNameTable: int getExpandedTypeID(java.lang.String,java.lang.String,int)>(null, r35, 13);

        $r15 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.dtm.ref.DTMStringPool m_valuesOrPrefixes>;

        $i8 = virtualinvoke $r15.<org.apache.xml.dtm.ref.DTMStringPool: int stringToIndex(java.lang.String)>(r36);

        i19 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int addNode(int,int,int,int,int,boolean)>(13, $i7, $i3, i19, $i8, 0);

     label07:
        i20 = i20 + 2;

     label08:
        if i20 < $i5 goto label05;

        $i9 = interfaceinvoke r16.<org.xml.sax.Attributes: int getLength()>();

        i21 = 0;

        goto label17;

     label09:
        $r17 = interfaceinvoke r16.<org.xml.sax.Attributes: java.lang.String getURI(int)>(i21);

        $r18 = interfaceinvoke r16.<org.xml.sax.Attributes: java.lang.String getQName(int)>(i21);

        $r19 = interfaceinvoke r16.<org.xml.sax.Attributes: java.lang.String getValue(int)>(i21);

        r37 = $r19;

        $r20 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: java.lang.String getPrefix(java.lang.String,java.lang.String)>($r18, $r17);

        $r21 = interfaceinvoke r16.<org.xml.sax.Attributes: java.lang.String getLocalName(int)>(i21);

        if null == $r18 goto label12;

        $z3 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>("xmlns");

        if $z3 != 0 goto label10;

        $z5 = virtualinvoke $r18.<java.lang.String: boolean startsWith(java.lang.String)>("xmlns:");

        if $z5 == 0 goto label12;

     label10:
        $z4 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: boolean declAlreadyDeclared(java.lang.String)>($r20);

        if $z4 == 0 goto label11;

        goto label16;

     label11:
        b22 = 13;

        b26 = 13;

        b25 = 13;

        goto label13;

     label12:
        b22 = 2;

        b26 = 2;

        b25 = 2;

        $r22 = interfaceinvoke r16.<org.xml.sax.Attributes: java.lang.String getType(int)>(i21);

        $z2 = virtualinvoke $r22.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("ID");

        if $z2 == 0 goto label13;

        virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: void setIDAttribute(java.lang.String,int)>($r19, $i3);

     label13:
        if null != $r19 goto label14;

        r37 = "";

     label14:
        $r23 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.dtm.ref.DTMStringPool m_valuesOrPrefixes>;

        $i10 = virtualinvoke $r23.<org.apache.xml.dtm.ref.DTMStringPool: int stringToIndex(java.lang.String)>(r37);

        i23 = $i10;

        if null == $r20 goto label15;

        $r25 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.dtm.ref.DTMStringPool m_valuesOrPrefixes>;

        $i12 = virtualinvoke $r25.<org.apache.xml.dtm.ref.DTMStringPool: int stringToIndex(java.lang.String)>($r18);

        $r26 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i13 = virtualinvoke $r26.<org.apache.xml.utils.SuballocatedIntVector: int size()>();

        $r27 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_data>;

        virtualinvoke $r27.<org.apache.xml.utils.SuballocatedIntVector: void addElement(int)>($i12);

        $r28 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_data>;

        virtualinvoke $r28.<org.apache.xml.utils.SuballocatedIntVector: void addElement(int)>($i10);

        i23 = neg $i13;

     label15:
        $r24 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        $i11 = virtualinvoke $r24.<org.apache.xml.dtm.ref.ExpandedNameTable: int getExpandedTypeID(java.lang.String,java.lang.String,int)>($r17, $r21, b25);

        i19 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int addNode(int,int,int,int,int,boolean)>(b26, $i11, $i3, i19, i23, 0);

     label16:
        i21 = i21 + 1;

     label17:
        if i21 < $i9 goto label09;

        $i32 = (int) -1;

        if $i32 == i19 goto label18;

        $r31 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_nextsib>;

        $i34 = (int) -1;

        virtualinvoke $r31.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>($i34, i19);

     label18:
        $r29 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.DTMWSFilter m_wsfilter>;

        if null == $r29 goto label22;

        $r30 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.DTMWSFilter m_wsfilter>;

        $i14 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeHandle(int)>($i3);

        $s15 = interfaceinvoke $r30.<org.apache.xml.dtm.DTMWSFilter: short getShouldStripSpace(int,org.apache.xml.dtm.DTM)>($i14, r0);

        $i35 = (int) $s15;

        if 3 != $i35 goto label19;

        $z6 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: boolean getShouldStripWhitespace()>();

        goto label21;

     label19:
        $i36 = (int) $s15;

        if 2 != $i36 goto label20;

        $z6 = 1;

        goto label21;

     label20:
        $z6 = 0;

     label21:
        virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: void pushShouldStripWhitespace(boolean)>($z6);

     label22:
        $i38 = (int) -1;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int m_previous> = $i38;

        $r38 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.IntStack m_contextIndexes>;

        $r39 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: java.util.Vector m_prefixMappings>;

        $i24 = virtualinvoke $r39.<java.util.Vector: int size()>();

        virtualinvoke $r38.<org.apache.xml.utils.IntStack: int push(int)>($i24);

        return;
    }

    public void endElement(java.lang.String, java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        org.apache.xml.utils.IntStack $r1, $r2, $r4;
        java.util.Vector $r3, $r7;
        int $i0, $i1, $i2, $i3, $i4, $i6, $i8, $i10;
        java.lang.String r8, r9, r10;
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM r0;
        org.apache.xml.utils.SuballocatedIntVector $r5, $r6;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM;

        r8 := @parameter0: java.lang.String;

        r9 := @parameter1: java.lang.String;

        r10 := @parameter2: java.lang.String;

        virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: void charactersFlush()>();

        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.IntStack m_contextIndexes>;

        virtualinvoke $r1.<org.apache.xml.utils.IntStack: void quickPop(int)>(1);

        $r2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.IntStack m_contextIndexes>;

        $i0 = virtualinvoke $r2.<org.apache.xml.utils.IntStack: int peek()>();

        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: java.util.Vector m_prefixMappings>;

        $i1 = virtualinvoke $r3.<java.util.Vector: int size()>();

        if $i0 == $i1 goto label1;

        $r7 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: java.util.Vector m_prefixMappings>;

        virtualinvoke $r7.<java.util.Vector: void setSize(int)>($i0);

     label1:
        $i4 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int m_previous>;

        $r4 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.IntStack m_parents>;

        $i2 = virtualinvoke $r4.<org.apache.xml.utils.IntStack: int pop()>();

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int m_previous> = $i2;

        $i6 = (int) -1;

        if $i6 != $i4 goto label2;

        $r6 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_firstch>;

        $i3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int m_previous>;

        $i8 = (int) -1;

        virtualinvoke $r6.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>($i8, $i3);

        goto label3;

     label2:
        $r5 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_nextsib>;

        $i10 = (int) -1;

        virtualinvoke $r5.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>($i10, $i4);

     label3:
        virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: void popShouldStripWhitespace()>();

        return;
    }

    public void characters(char[], int, int) throws org.xml.sax.SAXException
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM r0;
        org.apache.xml.utils.FastStringBuffer $r2, $r3;
        int $i0, $i1, i2, i3, $i4, $i5, $i7;
        char[] r1;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM;

        r1 := @parameter0: char[];

        i2 := @parameter1: int;

        i3 := @parameter2: int;

        $i0 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int m_textPendingStart>;

        $i7 = (int) -1;

        if $i0 != $i7 goto label1;

        $r2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.FastStringBuffer m_chars>;

        $i4 = virtualinvoke $r2.<org.apache.xml.utils.FastStringBuffer: int size()>();

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int m_textPendingStart> = $i4;

        $i5 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int m_textType>;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int m_coalescedTextType> = $i5;

        goto label2;

     label1:
        $i1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int m_textType>;

        if $i1 != 3 goto label2;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int m_coalescedTextType> = 3;

     label2:
        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.FastStringBuffer m_chars>;

        virtualinvoke $r3.<org.apache.xml.utils.FastStringBuffer: void append(char[],int,int)>(r1, i2, i3);

        return;
    }

    public void ignorableWhitespace(char[], int, int) throws org.xml.sax.SAXException
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM r0;
        int i0, i1;
        char[] r1;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: void characters(char[],int,int)>(r1, i0, i1);

        return;
    }

    public void processingInstruction(java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM r0;
        org.apache.xml.utils.IntStack $r5;
        org.apache.xml.dtm.ref.DTMStringPool $r4;
        int $i0, $i1, $i2, $i3, $i4;
        org.apache.xml.dtm.ref.ExpandedNameTable $r2;
        java.lang.String r1, r3;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: void charactersFlush()>();

        $r2 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        $i0 = virtualinvoke $r2.<org.apache.xml.dtm.ref.ExpandedNameTable: int getExpandedTypeID(java.lang.String,java.lang.String,int)>(null, r1, 7);

        $r4 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.dtm.ref.DTMStringPool m_valuesOrPrefixes>;

        $i1 = virtualinvoke $r4.<org.apache.xml.dtm.ref.DTMStringPool: int stringToIndex(java.lang.String)>(r3);

        $r5 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.IntStack m_parents>;

        $i2 = virtualinvoke $r5.<org.apache.xml.utils.IntStack: int peek()>();

        $i3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int m_previous>;

        $i4 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int addNode(int,int,int,int,int,boolean)>(7, $i0, $i2, $i3, $i1, 0);

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int m_previous> = $i4;

        return;
    }

    public void skippedEntity(java.lang.String) throws org.xml.sax.SAXException
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM r0;
        java.lang.String r1;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public void warning(org.xml.sax.SAXParseException) throws org.xml.sax.SAXException
    {
        java.io.PrintStream $r1;
        org.xml.sax.SAXParseException r0;
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM r3;
        java.lang.String $r2;

        r3 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM;

        r0 := @parameter0: org.xml.sax.SAXParseException;

        $r1 = <java.lang.System: java.io.PrintStream err>;

        $r2 = virtualinvoke r0.<org.xml.sax.SAXException: java.lang.String getMessage()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r2);

        return;
    }

    public void error(org.xml.sax.SAXParseException) throws org.xml.sax.SAXException
    {
        org.xml.sax.SAXParseException r0;
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM r1;

        r1 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM;

        r0 := @parameter0: org.xml.sax.SAXParseException;

        throw r0;
    }

    public void fatalError(org.xml.sax.SAXParseException) throws org.xml.sax.SAXException
    {
        org.xml.sax.SAXParseException r0;
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM r1;

        r1 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM;

        r0 := @parameter0: org.xml.sax.SAXParseException;

        throw r0;
    }

    public void elementDecl(java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM r0;
        java.lang.String r1, r2;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        return;
    }

    public void attributeDecl(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM r0;
        java.lang.String r1, r2, r3, r4, r5;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: java.lang.String;

        return;
    }

    public void internalEntityDecl(java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM r0;
        java.lang.String r1, r2;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        return;
    }

    public void externalEntityDecl(java.lang.String, java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM r0;
        java.lang.String r1, r2, r3;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        return;
    }

    public void startDTD(java.lang.String, java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM r0;
        java.lang.String r1, r2, r3;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: boolean m_insideDTD> = 1;

        return;
    }

    public void endDTD() throws org.xml.sax.SAXException
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM r0;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: boolean m_insideDTD> = 0;

        return;
    }

    public void startEntity(java.lang.String) throws org.xml.sax.SAXException
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM r0;
        java.lang.String r1;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public void endEntity(java.lang.String) throws org.xml.sax.SAXException
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM r0;
        java.lang.String r1;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public void startCDATA() throws org.xml.sax.SAXException
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM r0;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int m_textType> = 4;

        return;
    }

    public void endCDATA() throws org.xml.sax.SAXException
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM r0;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int m_textType> = 3;

        return;
    }

    public void comment(char[], int, int) throws org.xml.sax.SAXException
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM r0;
        org.apache.xml.utils.IntStack $r5;
        org.apache.xml.dtm.ref.DTMStringPool $r4;
        int $i0, i1, i2, $i3, $i4, $i5, $i6;
        org.apache.xml.dtm.ref.ExpandedNameTable $r1;
        char[] r3;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM;

        r3 := @parameter0: char[];

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $z0 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: boolean m_insideDTD>;

        if $z0 == 0 goto label1;

        return;

     label1:
        virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: void charactersFlush()>();

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        $i0 = virtualinvoke $r1.<org.apache.xml.dtm.ref.ExpandedNameTable: int getExpandedTypeID(int)>(8);

        $r4 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.dtm.ref.DTMStringPool m_valuesOrPrefixes>;

        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(char[],int,int)>(r3, i1, i2);

        $i3 = virtualinvoke $r4.<org.apache.xml.dtm.ref.DTMStringPool: int stringToIndex(java.lang.String)>($r2);

        $r5 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.IntStack m_parents>;

        $i4 = virtualinvoke $r5.<org.apache.xml.utils.IntStack: int peek()>();

        $i5 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int m_previous>;

        $i6 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int addNode(int,int,int,int,int,boolean)>(8, $i0, $i4, $i5, $i3, 0);

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int m_previous> = $i6;

        return;
    }

    public void setProperty(java.lang.String, java.lang.Object)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM r0;
        java.lang.Object r2;
        java.lang.String r1;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        return;
    }

    public javax.xml.transform.SourceLocator getSourceLocatorFor(int)
    {
        org.xml.sax.Locator $r1, $r6;
        org.apache.xml.dtm.ref.NodeLocator $r13, $r14, $r15;
        int $i0, $i1, $i2, i3, $i5, $i7, $i9, $i11;
        java.lang.String $r2, $r4, $r7, $r10;
        org.apache.xml.utils.StringVector $r9;
        boolean $z0;
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM r0;
        org.apache.xml.utils.IntVector $r11, $r12;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM;

        i3 := @parameter0: int;

        $z0 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: boolean m_useSourceLocationProperty>;

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i3);

        $r13 = new org.apache.xml.dtm.ref.NodeLocator;

        $r9 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.StringVector m_sourceSystemId>;

        $r10 = virtualinvoke $r9.<org.apache.xml.utils.StringVector: java.lang.String elementAt(int)>($i0);

        $r11 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.IntVector m_sourceLine>;

        $i1 = virtualinvoke $r11.<org.apache.xml.utils.IntVector: int elementAt(int)>($i0);

        $r12 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.IntVector m_sourceColumn>;

        $i2 = virtualinvoke $r12.<org.apache.xml.utils.IntVector: int elementAt(int)>($i0);

        specialinvoke $r13.<org.apache.xml.dtm.ref.NodeLocator: void <init>(java.lang.String,java.lang.String,int,int)>(null, $r10, $i1, $i2);

        return $r13;

     label1:
        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.xml.sax.Locator m_locator>;

        if $r1 == null goto label2;

        $r14 = new org.apache.xml.dtm.ref.NodeLocator;

        $r6 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.xml.sax.Locator m_locator>;

        $r7 = interfaceinvoke $r6.<org.xml.sax.Locator: java.lang.String getSystemId()>();

        $i5 = (int) -1;

        $i7 = (int) -1;

        specialinvoke $r14.<org.apache.xml.dtm.ref.NodeLocator: void <init>(java.lang.String,java.lang.String,int,int)>(null, $r7, $i5, $i7);

        return $r14;

     label2:
        $r2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: java.lang.String m_systemId>;

        if $r2 == null goto label3;

        $r15 = new org.apache.xml.dtm.ref.NodeLocator;

        $r4 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: java.lang.String m_systemId>;

        $i9 = (int) -1;

        $i11 = (int) -1;

        specialinvoke $r15.<org.apache.xml.dtm.ref.NodeLocator: void <init>(java.lang.String,java.lang.String,int,int)>(null, $r4, $i9, $i11);

        return $r15;

     label3:
        return null;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0;

        <org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int ENTITY_FIELDS_PER> = 4;

        <org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int ENTITY_FIELD_NAME> = 3;

        <org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int ENTITY_FIELD_NOTATIONNAME> = 2;

        <org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int ENTITY_FIELD_SYSTEMID> = 1;

        <org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int ENTITY_FIELD_PUBLICID> = 0;

        <org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: boolean DEBUG> = 0;

        $r0 = newarray (java.lang.String)[13];

        $r0[0] = null;

        $r0[1] = null;

        $r0[2] = null;

        $r0[3] = "#text";

        $r0[4] = "#cdata_section";

        $r0[5] = null;

        $r0[6] = null;

        $r0[7] = null;

        $r0[8] = "#comment";

        $r0[9] = "#document";

        $r0[10] = null;

        $r0[11] = "#document-fragment";

        $r0[12] = null;

        <org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: java.lang.String[] m_fixednames> = $r0;

        <org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: boolean m_source_location> = 0;

        return;
    }
}
