public class com.hp.hpl.jena.sparql.modify.UpdateEngineWorker extends java.lang.Object implements com.hp.hpl.jena.sparql.modify.request.UpdateVisitor
{
    protected final com.hp.hpl.jena.update.GraphStore graphStore;
    protected final boolean alwaysSilent;
    protected final com.hp.hpl.jena.sparql.engine.binding.Binding inputBinding;
    protected final com.hp.hpl.jena.sparql.util.Context context;

    public void <init>(com.hp.hpl.jena.update.GraphStore, com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.sparql.util.Context)
    {
        com.hp.hpl.jena.sparql.engine.binding.Binding r2;
        com.hp.hpl.jena.update.GraphStore r1;
        com.hp.hpl.jena.sparql.modify.UpdateEngineWorker r0;
        com.hp.hpl.jena.sparql.util.Context r3;

        r0 := @this: com.hp.hpl.jena.sparql.modify.UpdateEngineWorker;

        r1 := @parameter0: com.hp.hpl.jena.update.GraphStore;

        r2 := @parameter1: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r3 := @parameter2: com.hp.hpl.jena.sparql.util.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: boolean alwaysSilent> = 1;

        r0.<com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: boolean alwaysSilent> = 1;

        r0.<com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: com.hp.hpl.jena.update.GraphStore graphStore> = r1;

        r0.<com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: com.hp.hpl.jena.sparql.engine.binding.Binding inputBinding> = r2;

        r0.<com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: com.hp.hpl.jena.sparql.util.Context context> = r3;

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.modify.request.UpdateDrop)
    {
        com.hp.hpl.jena.sparql.modify.request.UpdateDrop r1;
        com.hp.hpl.jena.sparql.modify.UpdateEngineWorker r0;

        r0 := @this: com.hp.hpl.jena.sparql.modify.UpdateEngineWorker;

        r1 := @parameter0: com.hp.hpl.jena.sparql.modify.request.UpdateDrop;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: void execDropClear(com.hp.hpl.jena.sparql.modify.request.UpdateDropClear,boolean)>(r1, 0);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.modify.request.UpdateClear)
    {
        com.hp.hpl.jena.sparql.modify.UpdateEngineWorker r0;
        com.hp.hpl.jena.sparql.modify.request.UpdateClear r1;

        r0 := @this: com.hp.hpl.jena.sparql.modify.UpdateEngineWorker;

        r1 := @parameter0: com.hp.hpl.jena.sparql.modify.request.UpdateClear;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: void execDropClear(com.hp.hpl.jena.sparql.modify.request.UpdateDropClear,boolean)>(r1, 1);

        return;
    }

    protected void execDropClear(com.hp.hpl.jena.sparql.modify.request.UpdateDropClear, boolean)
    {
        com.hp.hpl.jena.sparql.modify.request.UpdateDropClear r0;
        com.hp.hpl.jena.graph.Node $r8;
        com.hp.hpl.jena.sparql.ARQInternalErrorException $r1;
        com.hp.hpl.jena.sparql.modify.UpdateEngineWorker r7;
        java.lang.StringBuilder $r2, $r3, $r5;
        java.lang.String $r6;
        com.hp.hpl.jena.sparql.modify.request.Target $r4;
        boolean $z0, $z1, $z2, $z3, z4;

        r7 := @this: com.hp.hpl.jena.sparql.modify.UpdateEngineWorker;

        r0 := @parameter0: com.hp.hpl.jena.sparql.modify.request.UpdateDropClear;

        z4 := @parameter1: boolean;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.modify.request.UpdateDropClear: boolean isAll()>();

        if $z0 == 0 goto label1;

        virtualinvoke r7.<com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: void execDropClear(com.hp.hpl.jena.sparql.modify.request.UpdateDropClear,com.hp.hpl.jena.graph.Node,boolean)>(r0, null, 1);

        virtualinvoke r7.<com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: void execDropClearAllNamed(com.hp.hpl.jena.sparql.modify.request.UpdateDropClear,boolean)>(r0, z4);

        goto label5;

     label1:
        $z1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.modify.request.UpdateDropClear: boolean isAllNamed()>();

        if $z1 == 0 goto label2;

        virtualinvoke r7.<com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: void execDropClearAllNamed(com.hp.hpl.jena.sparql.modify.request.UpdateDropClear,boolean)>(r0, z4);

        goto label5;

     label2:
        $z2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.modify.request.UpdateDropClear: boolean isDefault()>();

        if $z2 == 0 goto label3;

        virtualinvoke r7.<com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: void execDropClear(com.hp.hpl.jena.sparql.modify.request.UpdateDropClear,com.hp.hpl.jena.graph.Node,boolean)>(r0, null, 1);

        goto label5;

     label3:
        $z3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.modify.request.UpdateDropClear: boolean isOneGraph()>();

        if $z3 == 0 goto label4;

        $r8 = virtualinvoke r0.<com.hp.hpl.jena.sparql.modify.request.UpdateDropClear: com.hp.hpl.jena.graph.Node getGraph()>();

        virtualinvoke r7.<com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: void execDropClear(com.hp.hpl.jena.sparql.modify.request.UpdateDropClear,com.hp.hpl.jena.graph.Node,boolean)>(r0, $r8, z4);

        goto label5;

     label4:
        $r1 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Target is undefined: ");

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.modify.request.UpdateDropClear: com.hp.hpl.jena.sparql.modify.request.Target getTarget()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>(java.lang.String)>($r6);

        throw $r1;

     label5:
        return;
    }

    protected void execDropClear(com.hp.hpl.jena.sparql.modify.request.UpdateDropClear, com.hp.hpl.jena.graph.Node, boolean)
    {
        com.hp.hpl.jena.update.GraphStore $r2, $r3, $r5;
        com.hp.hpl.jena.sparql.modify.request.UpdateDropClear r6;
        com.hp.hpl.jena.graph.Node r1;
        com.hp.hpl.jena.sparql.modify.UpdateEngineWorker r0;
        com.hp.hpl.jena.graph.Graph $r4;
        boolean z0, $z1;

        r0 := @this: com.hp.hpl.jena.sparql.modify.UpdateEngineWorker;

        r6 := @parameter0: com.hp.hpl.jena.sparql.modify.request.UpdateDropClear;

        r1 := @parameter1: com.hp.hpl.jena.graph.Node;

        z0 := @parameter2: boolean;

        if z0 == 0 goto label2;

        if r1 == null goto label1;

        $r5 = r0.<com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: com.hp.hpl.jena.update.GraphStore graphStore>;

        $z1 = interfaceinvoke $r5.<com.hp.hpl.jena.update.GraphStore: boolean containsGraph(com.hp.hpl.jena.graph.Node)>(r1);

        if $z1 == 0 goto label3;

     label1:
        $r3 = r0.<com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: com.hp.hpl.jena.update.GraphStore graphStore>;

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: com.hp.hpl.jena.graph.Graph graph(com.hp.hpl.jena.update.GraphStore,com.hp.hpl.jena.graph.Node)>($r3, r1);

        interfaceinvoke $r4.<com.hp.hpl.jena.graph.Graph: void clear()>();

        goto label3;

     label2:
        $r2 = r0.<com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: com.hp.hpl.jena.update.GraphStore graphStore>;

        interfaceinvoke $r2.<com.hp.hpl.jena.update.GraphStore: void removeGraph(com.hp.hpl.jena.graph.Node)>(r1);

     label3:
        return;
    }

    protected void execDropClearAllNamed(com.hp.hpl.jena.sparql.modify.request.UpdateDropClear, boolean)
    {
        com.hp.hpl.jena.update.GraphStore $r1;
        java.util.Iterator $r2, $r4;
        com.hp.hpl.jena.sparql.modify.request.UpdateDropClear r7;
        com.hp.hpl.jena.graph.Node r6;
        java.util.List $r3;
        com.hp.hpl.jena.sparql.modify.UpdateEngineWorker r0;
        java.lang.Object $r5;
        boolean $z0, z1;

        r0 := @this: com.hp.hpl.jena.sparql.modify.UpdateEngineWorker;

        r7 := @parameter0: com.hp.hpl.jena.sparql.modify.request.UpdateDropClear;

        z1 := @parameter1: boolean;

        $r1 = r0.<com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: com.hp.hpl.jena.update.GraphStore graphStore>;

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.update.GraphStore: java.util.Iterator listGraphNodes()>();

        $r3 = staticinvoke <org.apache.jena.atlas.iterator.Iter: java.util.List toList(java.util.Iterator)>($r2);

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.hp.hpl.jena.graph.Node) $r5;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: void execDropClear(com.hp.hpl.jena.sparql.modify.request.UpdateDropClear,com.hp.hpl.jena.graph.Node,boolean)>(r7, r6, z1);

        goto label1;

     label2:
        return;
    }

    public void visit(com.hp.hpl.jena.sparql.modify.request.UpdateCreate)
    {
        com.hp.hpl.jena.update.GraphStore $r3, $r4;
        com.hp.hpl.jena.sparql.modify.request.UpdateCreate r0;
        com.hp.hpl.jena.sparql.modify.UpdateEngineWorker r2;
        com.hp.hpl.jena.graph.Node $r1;
        com.hp.hpl.jena.graph.Graph $r5;
        boolean $z0;

        r2 := @this: com.hp.hpl.jena.sparql.modify.UpdateEngineWorker;

        r0 := @parameter0: com.hp.hpl.jena.sparql.modify.request.UpdateCreate;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.modify.request.UpdateCreate: com.hp.hpl.jena.graph.Node getGraph()>();

        if $r1 != null goto label1;

        return;

     label1:
        $r3 = r2.<com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: com.hp.hpl.jena.update.GraphStore graphStore>;

        $z0 = interfaceinvoke $r3.<com.hp.hpl.jena.update.GraphStore: boolean containsGraph(com.hp.hpl.jena.graph.Node)>($r1);

        if $z0 == 0 goto label2;

        return;

     label2:
        $r4 = r2.<com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: com.hp.hpl.jena.update.GraphStore graphStore>;

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.graph.GraphFactory: com.hp.hpl.jena.graph.Graph createDefaultGraph()>();

        interfaceinvoke $r4.<com.hp.hpl.jena.update.GraphStore: void addGraph(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Graph)>($r1, $r5);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.modify.request.UpdateLoad)
    {
        com.hp.hpl.jena.update.UpdateException $r13, $r19, $r25;
        com.hp.hpl.jena.update.GraphStore $r12, $r16;
        com.hp.hpl.jena.graph.Node $r2;
        java.lang.String $r1, $r4, $r24;
        com.hp.hpl.jena.graph.Graph $r14, $r17;
        boolean $z0, $z1, $z2, $z3;
        org.apache.jena.atlas.web.TypedInputStream $r3;
        org.apache.jena.riot.Lang $r5;
        java.util.Iterator $r8;
        org.apache.jena.riot.system.StreamRDF $r7, $r15;
        java.lang.RuntimeException $r18;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r6;
        com.hp.hpl.jena.sparql.modify.request.UpdateLoad r0;
        com.hp.hpl.jena.sparql.core.Quad r10;
        com.hp.hpl.jena.sparql.modify.UpdateEngineWorker r11;
        java.lang.Object $r9;
        java.lang.StringBuilder $r20, $r21, $r22, $r23;

        r11 := @this: com.hp.hpl.jena.sparql.modify.UpdateEngineWorker;

        r0 := @parameter0: com.hp.hpl.jena.sparql.modify.request.UpdateLoad;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.modify.request.UpdateLoad: java.lang.String getSource()>();

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.modify.request.UpdateLoad: com.hp.hpl.jena.graph.Node getDest()>();

     label1:
        $r3 = staticinvoke <org.apache.jena.riot.RDFDataMgr: org.apache.jena.atlas.web.TypedInputStream open(java.lang.String)>($r1);

        $r4 = virtualinvoke $r3.<org.apache.jena.atlas.web.TypedInputStream: java.lang.String getContentType()>();

        $r5 = staticinvoke <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang contentTypeToLang(java.lang.String)>($r4);

        $z0 = staticinvoke <org.apache.jena.riot.RDFLanguages: boolean isTriples(org.apache.jena.riot.Lang)>($r5);

        if $z0 == 0 goto label2;

        $r14 = staticinvoke <com.hp.hpl.jena.sparql.graph.GraphFactory: com.hp.hpl.jena.graph.Graph createGraphMem()>();

        $r15 = staticinvoke <org.apache.jena.riot.system.StreamRDFLib: org.apache.jena.riot.system.StreamRDF graph(com.hp.hpl.jena.graph.Graph)>($r14);

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void parse(org.apache.jena.riot.system.StreamRDF,org.apache.jena.atlas.web.TypedInputStream,java.lang.String)>($r15, $r3, $r1);

        $r16 = r11.<com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: com.hp.hpl.jena.update.GraphStore graphStore>;

        $r17 = staticinvoke <com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: com.hp.hpl.jena.graph.Graph graph(com.hp.hpl.jena.update.GraphStore,com.hp.hpl.jena.graph.Node)>($r16, $r2);

        staticinvoke <com.hp.hpl.jena.graph.GraphUtil: void addInto(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Graph)>($r17, $r14);

        goto label5;

     label2:
        if $r2 == null goto label3;

        $r13 = new com.hp.hpl.jena.update.UpdateException;

        specialinvoke $r13.<com.hp.hpl.jena.update.UpdateException: void <init>(java.lang.String)>("Attempt to load quads into a graph");

        throw $r13;

     label3:
        $r6 = staticinvoke <com.hp.hpl.jena.sparql.core.DatasetGraphFactory: com.hp.hpl.jena.sparql.core.DatasetGraph createMem()>();

        $r7 = staticinvoke <org.apache.jena.riot.system.StreamRDFLib: org.apache.jena.riot.system.StreamRDF dataset(com.hp.hpl.jena.sparql.core.DatasetGraph)>($r6);

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void parse(org.apache.jena.riot.system.StreamRDF,org.apache.jena.atlas.web.TypedInputStream,java.lang.String)>($r7, $r3, $r1);

        $r8 = interfaceinvoke $r6.<com.hp.hpl.jena.sparql.core.DatasetGraph: java.util.Iterator find()>();

     label4:
        $z1 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (com.hp.hpl.jena.sparql.core.Quad) $r9;

        $r12 = r11.<com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: com.hp.hpl.jena.update.GraphStore graphStore>;

        interfaceinvoke $r12.<com.hp.hpl.jena.update.GraphStore: void add(com.hp.hpl.jena.sparql.core.Quad)>(r10);

        goto label4;

     label5:
        goto label8;

     label6:
        $r18 := @caughtexception;

        $z2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.modify.request.UpdateLoad: boolean getSilent()>();

        if $z2 != 0 goto label8;

        $z3 = $r18 instanceof com.hp.hpl.jena.update.UpdateException;

        if $z3 == 0 goto label7;

        $r25 = (com.hp.hpl.jena.update.UpdateException) $r18;

        throw $r25;

     label7:
        $r19 = new com.hp.hpl.jena.update.UpdateException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to LOAD \'");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<com.hp.hpl.jena.update.UpdateException: void <init>(java.lang.String,java.lang.Throwable)>($r24, $r18);

        throw $r19;

     label8:
        return;

        catch java.lang.RuntimeException from label1 to label5 with label6;
    }

    public void visit(com.hp.hpl.jena.sparql.modify.request.UpdateAdd)
    {
        com.hp.hpl.jena.update.GraphStore $r4;
        com.hp.hpl.jena.sparql.modify.request.UpdateAdd r1;
        com.hp.hpl.jena.sparql.modify.UpdateEngineWorker r0;
        com.hp.hpl.jena.sparql.modify.request.Target $r2, $r3, $r5, $r6;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.sparql.modify.UpdateEngineWorker;

        r1 := @parameter0: com.hp.hpl.jena.sparql.modify.request.UpdateAdd;

        $z0 = specialinvoke r0.<com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: boolean validBinaryGraphOp(com.hp.hpl.jena.sparql.modify.request.UpdateBinaryOp)>(r1);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.modify.request.UpdateAdd: com.hp.hpl.jena.sparql.modify.request.Target getSrc()>();

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.modify.request.UpdateAdd: com.hp.hpl.jena.sparql.modify.request.Target getDest()>();

        $z1 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.modify.request.Target: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label2;

        return;

     label2:
        $r4 = r0.<com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: com.hp.hpl.jena.update.GraphStore graphStore>;

        $r5 = virtualinvoke r1.<com.hp.hpl.jena.sparql.modify.request.UpdateAdd: com.hp.hpl.jena.sparql.modify.request.Target getSrc()>();

        $r6 = virtualinvoke r1.<com.hp.hpl.jena.sparql.modify.request.UpdateAdd: com.hp.hpl.jena.sparql.modify.request.Target getDest()>();

        staticinvoke <com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: void gsCopyTriples(com.hp.hpl.jena.update.GraphStore,com.hp.hpl.jena.sparql.modify.request.Target,com.hp.hpl.jena.sparql.modify.request.Target)>($r4, $r5, $r6);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.modify.request.UpdateCopy)
    {
        com.hp.hpl.jena.update.GraphStore $r4;
        com.hp.hpl.jena.sparql.modify.UpdateEngineWorker r0;
        com.hp.hpl.jena.sparql.modify.request.UpdateCopy r1;
        com.hp.hpl.jena.sparql.modify.request.Target $r2, $r3, $r5, $r6;
        boolean $z0, $z1, $z2;

        r0 := @this: com.hp.hpl.jena.sparql.modify.UpdateEngineWorker;

        r1 := @parameter0: com.hp.hpl.jena.sparql.modify.request.UpdateCopy;

        $z0 = specialinvoke r0.<com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: boolean validBinaryGraphOp(com.hp.hpl.jena.sparql.modify.request.UpdateBinaryOp)>(r1);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.modify.request.UpdateCopy: com.hp.hpl.jena.sparql.modify.request.Target getSrc()>();

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.modify.request.UpdateCopy: com.hp.hpl.jena.sparql.modify.request.Target getDest()>();

        $z1 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.modify.request.Target: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label2;

        return;

     label2:
        $r4 = r0.<com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: com.hp.hpl.jena.update.GraphStore graphStore>;

        $r5 = virtualinvoke r1.<com.hp.hpl.jena.sparql.modify.request.UpdateCopy: com.hp.hpl.jena.sparql.modify.request.Target getSrc()>();

        $r6 = virtualinvoke r1.<com.hp.hpl.jena.sparql.modify.request.UpdateCopy: com.hp.hpl.jena.sparql.modify.request.Target getDest()>();

        $z2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.modify.request.UpdateCopy: boolean getSilent()>();

        staticinvoke <com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: void gsCopy(com.hp.hpl.jena.update.GraphStore,com.hp.hpl.jena.sparql.modify.request.Target,com.hp.hpl.jena.sparql.modify.request.Target,boolean)>($r4, $r5, $r6, $z2);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.modify.request.UpdateMove)
    {
        com.hp.hpl.jena.update.GraphStore $r4, $r7;
        com.hp.hpl.jena.sparql.modify.request.UpdateMove r1;
        com.hp.hpl.jena.sparql.modify.UpdateEngineWorker r0;
        com.hp.hpl.jena.sparql.modify.request.Target $r2, $r3, $r5, $r6, $r8;
        boolean $z0, $z1, $z2;

        r0 := @this: com.hp.hpl.jena.sparql.modify.UpdateEngineWorker;

        r1 := @parameter0: com.hp.hpl.jena.sparql.modify.request.UpdateMove;

        $z0 = specialinvoke r0.<com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: boolean validBinaryGraphOp(com.hp.hpl.jena.sparql.modify.request.UpdateBinaryOp)>(r1);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.modify.request.UpdateMove: com.hp.hpl.jena.sparql.modify.request.Target getSrc()>();

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.modify.request.UpdateMove: com.hp.hpl.jena.sparql.modify.request.Target getDest()>();

        $z1 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.modify.request.Target: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label2;

        return;

     label2:
        $r4 = r0.<com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: com.hp.hpl.jena.update.GraphStore graphStore>;

        $r5 = virtualinvoke r1.<com.hp.hpl.jena.sparql.modify.request.UpdateMove: com.hp.hpl.jena.sparql.modify.request.Target getSrc()>();

        $r6 = virtualinvoke r1.<com.hp.hpl.jena.sparql.modify.request.UpdateMove: com.hp.hpl.jena.sparql.modify.request.Target getDest()>();

        $z2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.modify.request.UpdateMove: boolean getSilent()>();

        staticinvoke <com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: void gsCopy(com.hp.hpl.jena.update.GraphStore,com.hp.hpl.jena.sparql.modify.request.Target,com.hp.hpl.jena.sparql.modify.request.Target,boolean)>($r4, $r5, $r6, $z2);

        $r7 = r0.<com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: com.hp.hpl.jena.update.GraphStore graphStore>;

        $r8 = virtualinvoke r1.<com.hp.hpl.jena.sparql.modify.request.UpdateMove: com.hp.hpl.jena.sparql.modify.request.Target getSrc()>();

        staticinvoke <com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: void gsDrop(com.hp.hpl.jena.update.GraphStore,com.hp.hpl.jena.sparql.modify.request.Target,boolean)>($r7, $r8, 1);

        return;
    }

    private boolean validBinaryGraphOp(com.hp.hpl.jena.sparql.modify.request.UpdateBinaryOp)
    {
        com.hp.hpl.jena.update.GraphStore $r11;
        com.hp.hpl.jena.graph.Node $r9;
        java.lang.String $r7, $r15;
        boolean $z0, $z1, $z2, $z3;
        com.hp.hpl.jena.sparql.modify.request.UpdateBinaryOp r0;
        com.hp.hpl.jena.sparql.modify.UpdateEngineWorker r10;
        java.lang.StringBuilder $r3, $r4, $r6, $r12, $r13, $r14;
        com.hp.hpl.jena.sparql.modify.request.Target $r1, $r2, $r5, $r8;

        r10 := @this: com.hp.hpl.jena.sparql.modify.UpdateEngineWorker;

        r0 := @parameter0: com.hp.hpl.jena.sparql.modify.request.UpdateBinaryOp;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.modify.request.UpdateBinaryOp: com.hp.hpl.jena.sparql.modify.request.Target getSrc()>();

        $z0 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.modify.request.Target: boolean isDefault()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.modify.request.UpdateBinaryOp: com.hp.hpl.jena.sparql.modify.request.Target getSrc()>();

        $z1 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.modify.request.Target: boolean isOneNamedGraph()>();

        if $z1 == 0 goto label4;

        $r8 = virtualinvoke r0.<com.hp.hpl.jena.sparql.modify.request.UpdateBinaryOp: com.hp.hpl.jena.sparql.modify.request.Target getSrc()>();

        $r9 = virtualinvoke $r8.<com.hp.hpl.jena.sparql.modify.request.Target: com.hp.hpl.jena.graph.Node getGraph()>();

        $r11 = r10.<com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: com.hp.hpl.jena.update.GraphStore graphStore>;

        $z2 = interfaceinvoke $r11.<com.hp.hpl.jena.update.GraphStore: boolean containsGraph(com.hp.hpl.jena.graph.Node)>($r9);

        if $z2 != 0 goto label3;

        $z3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.modify.request.UpdateBinaryOp: boolean getSilent()>();

        if $z3 != 0 goto label2;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No such graph: ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: void error(java.lang.String)>($r15);

     label2:
        return 0;

     label3:
        return 1;

     label4:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid source target for oepration; ");

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.modify.request.UpdateBinaryOp: com.hp.hpl.jena.sparql.modify.request.Target getSrc()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: void error(java.lang.String)>($r7);

        return 0;
    }

    protected static void gsCopy(com.hp.hpl.jena.update.GraphStore, com.hp.hpl.jena.sparql.modify.request.Target, com.hp.hpl.jena.sparql.modify.request.Target, boolean)
    {
        com.hp.hpl.jena.update.GraphStore r2;
        com.hp.hpl.jena.sparql.modify.request.Target r0, r1;
        boolean $z0, z1;

        r2 := @parameter0: com.hp.hpl.jena.update.GraphStore;

        r1 := @parameter1: com.hp.hpl.jena.sparql.modify.request.Target;

        r0 := @parameter2: com.hp.hpl.jena.sparql.modify.request.Target;

        z1 := @parameter3: boolean;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.modify.request.Target: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        staticinvoke <com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: void gsClear(com.hp.hpl.jena.update.GraphStore,com.hp.hpl.jena.sparql.modify.request.Target,boolean)>(r2, r0, 1);

        staticinvoke <com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: void gsCopyTriples(com.hp.hpl.jena.update.GraphStore,com.hp.hpl.jena.sparql.modify.request.Target,com.hp.hpl.jena.sparql.modify.request.Target)>(r2, r1, r0);

        return;
    }

    protected static void gsCopyTriples(com.hp.hpl.jena.update.GraphStore, com.hp.hpl.jena.sparql.modify.request.Target, com.hp.hpl.jena.sparql.modify.request.Target)
    {
        java.lang.Throwable $r11;
        com.hp.hpl.jena.update.GraphStore r0;
        java.util.Iterator $r10;
        org.apache.jena.atlas.data.SerializationFactory $r7;
        com.hp.hpl.jena.sparql.util.Context $r5;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r9;
        org.apache.jena.atlas.data.ThresholdPolicy $r6;
        org.apache.jena.atlas.data.DefaultDataBag $r8;
        com.hp.hpl.jena.sparql.modify.request.Target r1, r3;
        com.hp.hpl.jena.graph.Graph $r2, $r4;

        r0 := @parameter0: com.hp.hpl.jena.update.GraphStore;

        r1 := @parameter1: com.hp.hpl.jena.sparql.modify.request.Target;

        r3 := @parameter2: com.hp.hpl.jena.sparql.modify.request.Target;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: com.hp.hpl.jena.graph.Graph graph(com.hp.hpl.jena.update.GraphStore,com.hp.hpl.jena.sparql.modify.request.Target)>(r0, r1);

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: com.hp.hpl.jena.graph.Graph graph(com.hp.hpl.jena.update.GraphStore,com.hp.hpl.jena.sparql.modify.request.Target)>(r0, r3);

        $r5 = interfaceinvoke r0.<com.hp.hpl.jena.update.GraphStore: com.hp.hpl.jena.sparql.util.Context getContext()>();

        $r6 = staticinvoke <org.apache.jena.atlas.data.ThresholdPolicyFactory: org.apache.jena.atlas.data.ThresholdPolicy policyFromContext(com.hp.hpl.jena.sparql.util.Context)>($r5);

        $r7 = staticinvoke <org.openjena.riot.SerializationFactoryFinder: org.apache.jena.atlas.data.SerializationFactory tripleSerializationFactory()>();

        $r8 = staticinvoke <org.apache.jena.atlas.data.BagFactory: org.apache.jena.atlas.data.DefaultDataBag newDefaultBag(org.apache.jena.atlas.data.ThresholdPolicy,org.apache.jena.atlas.data.SerializationFactory)>($r6, $r7);

     label1:
        $r9 = interfaceinvoke $r2.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(null, null, null);

        interfaceinvoke $r8.<org.apache.jena.atlas.data.DataBag: void addAll(java.util.Iterator)>($r9);

        staticinvoke <org.apache.jena.atlas.iterator.Iter: void close(java.util.Iterator)>($r9);

        $r10 = interfaceinvoke $r8.<org.apache.jena.atlas.data.DataBag: java.util.Iterator iterator()>();

        staticinvoke <com.hp.hpl.jena.sparql.graph.GraphOps: void addAll(com.hp.hpl.jena.graph.Graph,java.util.Iterator)>($r4, $r10);

     label2:
        interfaceinvoke $r8.<org.apache.jena.atlas.data.DataBag: void close()>();

        goto label5;

     label3:
        $r11 := @caughtexception;

     label4:
        interfaceinvoke $r8.<org.apache.jena.atlas.data.DataBag: void close()>();

        throw $r11;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    protected static void gsClear(com.hp.hpl.jena.update.GraphStore, com.hp.hpl.jena.sparql.modify.request.Target, boolean)
    {
        com.hp.hpl.jena.update.GraphStore r0;
        com.hp.hpl.jena.sparql.modify.request.Target r1;
        com.hp.hpl.jena.graph.Graph $r2;
        boolean z0;

        r0 := @parameter0: com.hp.hpl.jena.update.GraphStore;

        r1 := @parameter1: com.hp.hpl.jena.sparql.modify.request.Target;

        z0 := @parameter2: boolean;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: com.hp.hpl.jena.graph.Graph graph(com.hp.hpl.jena.update.GraphStore,com.hp.hpl.jena.sparql.modify.request.Target)>(r0, r1);

        interfaceinvoke $r2.<com.hp.hpl.jena.graph.Graph: void clear()>();

        return;
    }

    protected static void gsDrop(com.hp.hpl.jena.update.GraphStore, com.hp.hpl.jena.sparql.modify.request.Target, boolean)
    {
        com.hp.hpl.jena.update.GraphStore r1;
        com.hp.hpl.jena.graph.Node $r2;
        com.hp.hpl.jena.sparql.modify.request.Target r0;
        com.hp.hpl.jena.graph.Graph $r3;
        boolean $z0, z1;

        r1 := @parameter0: com.hp.hpl.jena.update.GraphStore;

        r0 := @parameter1: com.hp.hpl.jena.sparql.modify.request.Target;

        z1 := @parameter2: boolean;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.modify.request.Target: boolean isDefault()>();

        if $z0 == 0 goto label1;

        $r3 = interfaceinvoke r1.<com.hp.hpl.jena.update.GraphStore: com.hp.hpl.jena.graph.Graph getDefaultGraph()>();

        interfaceinvoke $r3.<com.hp.hpl.jena.graph.Graph: void clear()>();

        goto label2;

     label1:
        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.modify.request.Target: com.hp.hpl.jena.graph.Node getGraph()>();

        interfaceinvoke r1.<com.hp.hpl.jena.update.GraphStore: void removeGraph(com.hp.hpl.jena.graph.Node)>($r2);

     label2:
        return;
    }

    public org.apache.jena.atlas.lib.Sink createInsertDataSink()
    {
        com.hp.hpl.jena.sparql.modify.UpdateEngineWorker$1 $r0;
        com.hp.hpl.jena.sparql.modify.UpdateEngineWorker r1;

        r1 := @this: com.hp.hpl.jena.sparql.modify.UpdateEngineWorker;

        $r0 = new com.hp.hpl.jena.sparql.modify.UpdateEngineWorker$1;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.modify.UpdateEngineWorker$1: void <init>(com.hp.hpl.jena.sparql.modify.UpdateEngineWorker)>(r1);

        return $r0;
    }

    public void visit(com.hp.hpl.jena.sparql.modify.request.UpdateDataInsert)
    {
        com.hp.hpl.jena.sparql.modify.request.UpdateDataInsert r0;
        java.util.Iterator $r2;
        com.hp.hpl.jena.update.GraphStore $r6;
        com.hp.hpl.jena.sparql.core.Quad r4;
        java.util.List $r1;
        com.hp.hpl.jena.sparql.modify.UpdateEngineWorker r5;
        java.lang.Object $r3;
        boolean $z0;

        r5 := @this: com.hp.hpl.jena.sparql.modify.UpdateEngineWorker;

        r0 := @parameter0: com.hp.hpl.jena.sparql.modify.request.UpdateDataInsert;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.modify.request.UpdateDataInsert: java.util.List getQuads()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.hp.hpl.jena.sparql.core.Quad) $r3;

        $r6 = r5.<com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: com.hp.hpl.jena.update.GraphStore graphStore>;

        staticinvoke <com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: void addToGraphStore(com.hp.hpl.jena.update.GraphStore,com.hp.hpl.jena.sparql.core.Quad)>($r6, r4);

        goto label1;

     label2:
        return;
    }

    public org.apache.jena.atlas.lib.Sink createDeleteDataSink()
    {
        com.hp.hpl.jena.sparql.modify.UpdateEngineWorker$2 $r0;
        com.hp.hpl.jena.sparql.modify.UpdateEngineWorker r1;

        r1 := @this: com.hp.hpl.jena.sparql.modify.UpdateEngineWorker;

        $r0 = new com.hp.hpl.jena.sparql.modify.UpdateEngineWorker$2;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.modify.UpdateEngineWorker$2: void <init>(com.hp.hpl.jena.sparql.modify.UpdateEngineWorker)>(r1);

        return $r0;
    }

    public void visit(com.hp.hpl.jena.sparql.modify.request.UpdateDataDelete)
    {
        com.hp.hpl.jena.sparql.modify.request.UpdateDataDelete r0;
        java.util.Iterator $r2;
        com.hp.hpl.jena.update.GraphStore $r6;
        com.hp.hpl.jena.sparql.core.Quad r4;
        java.util.List $r1;
        com.hp.hpl.jena.sparql.modify.UpdateEngineWorker r5;
        java.lang.Object $r3;
        boolean $z0;

        r5 := @this: com.hp.hpl.jena.sparql.modify.UpdateEngineWorker;

        r0 := @parameter0: com.hp.hpl.jena.sparql.modify.request.UpdateDataDelete;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.modify.request.UpdateDataDelete: java.util.List getQuads()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.hp.hpl.jena.sparql.core.Quad) $r3;

        $r6 = r5.<com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: com.hp.hpl.jena.update.GraphStore graphStore>;

        staticinvoke <com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: void deleteFromGraphStore(com.hp.hpl.jena.update.GraphStore,com.hp.hpl.jena.sparql.core.Quad)>($r6, r4);

        goto label1;

     label2:
        return;
    }

    public void visit(com.hp.hpl.jena.sparql.modify.request.UpdateDeleteWhere)
    {
        java.lang.Throwable $r11;
        com.hp.hpl.jena.update.GraphStore $r4;
        java.util.Iterator $r9, $r10;
        org.apache.jena.atlas.data.SerializationFactory $r7;
        com.hp.hpl.jena.sparql.util.Context $r5;
        java.util.List $r1;
        org.apache.jena.atlas.data.ThresholdPolicy $r6;
        com.hp.hpl.jena.sparql.modify.request.UpdateDeleteWhere r0;
        com.hp.hpl.jena.sparql.modify.UpdateEngineWorker r2;
        org.apache.jena.atlas.data.DefaultDataBag $r8;
        com.hp.hpl.jena.sparql.syntax.Element $r3;

        r2 := @this: com.hp.hpl.jena.sparql.modify.UpdateEngineWorker;

        r0 := @parameter0: com.hp.hpl.jena.sparql.modify.request.UpdateDeleteWhere;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.modify.request.UpdateDeleteWhere: java.util.List getQuads()>();

        $r3 = virtualinvoke r2.<com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: com.hp.hpl.jena.sparql.syntax.Element elementFromQuads(java.util.List)>($r1);

        $r4 = r2.<com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: com.hp.hpl.jena.update.GraphStore graphStore>;

        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.update.GraphStore: com.hp.hpl.jena.sparql.util.Context getContext()>();

        $r6 = staticinvoke <org.apache.jena.atlas.data.ThresholdPolicyFactory: org.apache.jena.atlas.data.ThresholdPolicy policyFromContext(com.hp.hpl.jena.sparql.util.Context)>($r5);

        $r7 = staticinvoke <org.openjena.riot.SerializationFactoryFinder: org.apache.jena.atlas.data.SerializationFactory bindingSerializationFactory()>();

        $r8 = staticinvoke <org.apache.jena.atlas.data.BagFactory: org.apache.jena.atlas.data.DefaultDataBag newDefaultBag(org.apache.jena.atlas.data.ThresholdPolicy,org.apache.jena.atlas.data.SerializationFactory)>($r6, $r7);

     label1:
        $r9 = virtualinvoke r2.<com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: java.util.Iterator evalBindings(com.hp.hpl.jena.sparql.syntax.Element,com.hp.hpl.jena.graph.Node)>($r3, null);

        interfaceinvoke $r8.<org.apache.jena.atlas.data.DataBag: void addAll(java.util.Iterator)>($r9);

        staticinvoke <org.apache.jena.atlas.iterator.Iter: void close(java.util.Iterator)>($r9);

        $r10 = interfaceinvoke $r8.<org.apache.jena.atlas.data.DataBag: java.util.Iterator iterator()>();

        virtualinvoke r2.<com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: void execDelete(java.util.List,com.hp.hpl.jena.graph.Node,java.util.Iterator)>($r1, null, $r10);

        staticinvoke <org.apache.jena.atlas.iterator.Iter: void close(java.util.Iterator)>($r10);

     label2:
        interfaceinvoke $r8.<org.apache.jena.atlas.data.DataBag: void close()>();

        goto label5;

     label3:
        $r11 := @caughtexception;

     label4:
        interfaceinvoke $r8.<org.apache.jena.atlas.data.DataBag: void close()>();

        throw $r11;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void visit(com.hp.hpl.jena.sparql.modify.request.UpdateModify)
    {
        java.lang.Throwable $r18;
        com.hp.hpl.jena.query.Query $r4;
        com.hp.hpl.jena.update.GraphStore $r6;
        com.hp.hpl.jena.graph.Node $r1;
        com.hp.hpl.jena.sparql.modify.request.UpdateModify r0;
        java.util.Iterator $r13, $r14, $r16;
        org.apache.jena.atlas.data.SerializationFactory $r9;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r5, r19;
        com.hp.hpl.jena.sparql.util.Context $r7, $r11;
        com.hp.hpl.jena.sparql.engine.binding.Binding $r12;
        java.util.List $r15, $r17;
        org.apache.jena.atlas.data.ThresholdPolicy $r8;
        com.hp.hpl.jena.sparql.modify.UpdateEngineWorker r2;
        org.apache.jena.atlas.data.DefaultDataBag $r10;
        com.hp.hpl.jena.sparql.syntax.Element $r3;

        r2 := @this: com.hp.hpl.jena.sparql.modify.UpdateEngineWorker;

        r0 := @parameter0: com.hp.hpl.jena.sparql.modify.request.UpdateModify;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.modify.request.UpdateModify: com.hp.hpl.jena.graph.Node getWithIRI()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.modify.request.UpdateModify: com.hp.hpl.jena.sparql.syntax.Element getWherePattern()>();

        $r4 = virtualinvoke r2.<com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: com.hp.hpl.jena.query.Query elementToQuery(com.hp.hpl.jena.sparql.syntax.Element)>($r3);

        $r5 = virtualinvoke r2.<com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: com.hp.hpl.jena.sparql.core.DatasetGraph processUsing(com.hp.hpl.jena.sparql.modify.request.UpdateModify)>(r0);

        r19 = $r5;

        if $r5 != null goto label1;

        if $r1 == null goto label1;

        r19 = virtualinvoke r2.<com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: com.hp.hpl.jena.sparql.core.DatasetGraph processWith(com.hp.hpl.jena.sparql.modify.request.UpdateModify)>(r0);

     label1:
        if r19 != null goto label2;

        r19 = r2.<com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: com.hp.hpl.jena.update.GraphStore graphStore>;

     label2:
        $r6 = r2.<com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: com.hp.hpl.jena.update.GraphStore graphStore>;

        $r7 = interfaceinvoke $r6.<com.hp.hpl.jena.update.GraphStore: com.hp.hpl.jena.sparql.util.Context getContext()>();

        $r8 = staticinvoke <org.apache.jena.atlas.data.ThresholdPolicyFactory: org.apache.jena.atlas.data.ThresholdPolicy policyFromContext(com.hp.hpl.jena.sparql.util.Context)>($r7);

        $r9 = staticinvoke <org.openjena.riot.SerializationFactoryFinder: org.apache.jena.atlas.data.SerializationFactory bindingSerializationFactory()>();

        $r10 = staticinvoke <org.apache.jena.atlas.data.BagFactory: org.apache.jena.atlas.data.DefaultDataBag newDefaultBag(org.apache.jena.atlas.data.ThresholdPolicy,org.apache.jena.atlas.data.SerializationFactory)>($r8, $r9);

     label3:
        $r12 = r2.<com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: com.hp.hpl.jena.sparql.engine.binding.Binding inputBinding>;

        $r11 = r2.<com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: com.hp.hpl.jena.sparql.util.Context context>;

        $r13 = staticinvoke <com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: java.util.Iterator evalBindings(com.hp.hpl.jena.query.Query,com.hp.hpl.jena.sparql.core.DatasetGraph,com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.util.Context)>($r4, r19, $r12, $r11);

        interfaceinvoke $r10.<org.apache.jena.atlas.data.DataBag: void addAll(java.util.Iterator)>($r13);

        staticinvoke <org.apache.jena.atlas.iterator.Iter: void close(java.util.Iterator)>($r13);

        $r14 = interfaceinvoke $r10.<org.apache.jena.atlas.data.DataBag: java.util.Iterator iterator()>();

        $r15 = virtualinvoke r0.<com.hp.hpl.jena.sparql.modify.request.UpdateModify: java.util.List getDeleteQuads()>();

        virtualinvoke r2.<com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: void execDelete(java.util.List,com.hp.hpl.jena.graph.Node,java.util.Iterator)>($r15, $r1, $r14);

        staticinvoke <org.apache.jena.atlas.iterator.Iter: void close(java.util.Iterator)>($r14);

        $r16 = interfaceinvoke $r10.<org.apache.jena.atlas.data.DataBag: java.util.Iterator iterator()>();

        $r17 = virtualinvoke r0.<com.hp.hpl.jena.sparql.modify.request.UpdateModify: java.util.List getInsertQuads()>();

        virtualinvoke r2.<com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: void execInsert(java.util.List,com.hp.hpl.jena.graph.Node,java.util.Iterator)>($r17, $r1, $r16);

        staticinvoke <org.apache.jena.atlas.iterator.Iter: void close(java.util.Iterator)>($r16);

     label4:
        interfaceinvoke $r10.<org.apache.jena.atlas.data.DataBag: void close()>();

        goto label7;

     label5:
        $r18 := @caughtexception;

     label6:
        interfaceinvoke $r10.<org.apache.jena.atlas.data.DataBag: void close()>();

        throw $r18;

     label7:
        return;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    protected com.hp.hpl.jena.sparql.core.DatasetGraph processUsing(com.hp.hpl.jena.sparql.modify.request.UpdateModify)
    {
        com.hp.hpl.jena.sparql.modify.request.UpdateModify r0;
        com.hp.hpl.jena.update.GraphStore $r5;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r6;
        java.util.List $r1, $r2, $r3, $r7;
        com.hp.hpl.jena.sparql.modify.UpdateEngineWorker r4;
        int $i0, $i1;

        r4 := @this: com.hp.hpl.jena.sparql.modify.UpdateEngineWorker;

        r0 := @parameter0: com.hp.hpl.jena.sparql.modify.request.UpdateModify;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.modify.request.UpdateModify: java.util.List getUsing()>();

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        $r7 = virtualinvoke r0.<com.hp.hpl.jena.sparql.modify.request.UpdateModify: java.util.List getUsingNamed()>();

        $i1 = interfaceinvoke $r7.<java.util.List: int size()>();

        if $i1 != 0 goto label1;

        return null;

     label1:
        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.modify.request.UpdateModify: java.util.List getUsing()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.modify.request.UpdateModify: java.util.List getUsingNamed()>();

        $r5 = r4.<com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: com.hp.hpl.jena.update.GraphStore graphStore>;

        $r6 = staticinvoke <com.hp.hpl.jena.sparql.core.DynamicDatasets: com.hp.hpl.jena.sparql.core.DatasetGraph dynamicDataset(java.util.Collection,java.util.Collection,com.hp.hpl.jena.sparql.core.DatasetGraph,boolean)>($r2, $r3, $r5, 0);

        return $r6;
    }

    protected com.hp.hpl.jena.sparql.core.DatasetGraph processWith(com.hp.hpl.jena.sparql.modify.request.UpdateModify)
    {
        com.hp.hpl.jena.sparql.modify.request.UpdateModify r0;
        com.hp.hpl.jena.update.GraphStore $r3, $r6;
        com.hp.hpl.jena.sparql.modify.UpdateEngineWorker r2;
        com.hp.hpl.jena.sparql.modify.UpdateEngineWorker$DatasetGraphAltDefaultGraph $r5;
        com.hp.hpl.jena.graph.Node $r1;
        com.hp.hpl.jena.graph.Graph $r4;

        r2 := @this: com.hp.hpl.jena.sparql.modify.UpdateEngineWorker;

        r0 := @parameter0: com.hp.hpl.jena.sparql.modify.request.UpdateModify;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.modify.request.UpdateModify: com.hp.hpl.jena.graph.Node getWithIRI()>();

        if $r1 != null goto label1;

        return null;

     label1:
        $r3 = r2.<com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: com.hp.hpl.jena.update.GraphStore graphStore>;

        $r4 = specialinvoke r2.<com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: com.hp.hpl.jena.graph.Graph graphOrDummy(com.hp.hpl.jena.sparql.core.DatasetGraph,com.hp.hpl.jena.graph.Node)>($r3, $r1);

        $r5 = new com.hp.hpl.jena.sparql.modify.UpdateEngineWorker$DatasetGraphAltDefaultGraph;

        $r6 = r2.<com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: com.hp.hpl.jena.update.GraphStore graphStore>;

        specialinvoke $r5.<com.hp.hpl.jena.sparql.modify.UpdateEngineWorker$DatasetGraphAltDefaultGraph: void <init>(com.hp.hpl.jena.sparql.core.DatasetGraph,com.hp.hpl.jena.graph.Graph)>($r6, $r4);

        return $r5;
    }

    private com.hp.hpl.jena.graph.Graph graphOrDummy(com.hp.hpl.jena.sparql.core.DatasetGraph, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.update.GraphStore $r2;
        com.hp.hpl.jena.sparql.modify.UpdateEngineWorker r0;
        com.hp.hpl.jena.graph.Node r1;
        com.hp.hpl.jena.sparql.core.DatasetGraph r4;
        com.hp.hpl.jena.graph.Graph $r3, r5;

        r0 := @this: com.hp.hpl.jena.sparql.modify.UpdateEngineWorker;

        r4 := @parameter0: com.hp.hpl.jena.sparql.core.DatasetGraph;

        r1 := @parameter1: com.hp.hpl.jena.graph.Node;

        $r2 = r0.<com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: com.hp.hpl.jena.update.GraphStore graphStore>;

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: com.hp.hpl.jena.graph.Graph graph(com.hp.hpl.jena.update.GraphStore,com.hp.hpl.jena.graph.Node)>($r2, r1);

        r5 = $r3;

        if $r3 != null goto label1;

        r5 = staticinvoke <com.hp.hpl.jena.sparql.graph.GraphFactory: com.hp.hpl.jena.graph.Graph createGraphMem()>();

     label1:
        return r5;
    }

    protected static java.util.List unused_convertBNodesToVariables(java.util.List)
    {
        java.util.List r1, $r2;
        com.hp.hpl.jena.sparql.modify.NodeTransformBNodesToVariables $r0;

        r1 := @parameter0: java.util.List;

        $r0 = new com.hp.hpl.jena.sparql.modify.NodeTransformBNodesToVariables;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.modify.NodeTransformBNodesToVariables: void <init>()>();

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.graph.NodeTransformLib: java.util.List transformQuads(com.hp.hpl.jena.sparql.graph.NodeTransform,java.util.List)>($r0, r1);

        return $r2;
    }

    protected com.hp.hpl.jena.sparql.syntax.Element elementFromQuads(java.util.List)
    {
        com.hp.hpl.jena.sparql.syntax.ElementNamedGraph $r10;
        com.hp.hpl.jena.sparql.syntax.ElementTriplesBlock $r1, $r8, r12;
        com.hp.hpl.jena.graph.Node $r6, $r7, $r9, r13;
        boolean $z0;
        java.util.Iterator $r3;
        com.hp.hpl.jena.sparql.core.Quad r5;
        com.hp.hpl.jena.graph.Triple $r14;
        java.util.List r2;
        com.hp.hpl.jena.sparql.syntax.ElementGroup $r0;
        com.hp.hpl.jena.sparql.modify.UpdateEngineWorker r11;
        java.lang.Object $r4;

        r11 := @this: com.hp.hpl.jena.sparql.modify.UpdateEngineWorker;

        r2 := @parameter0: java.util.List;

        $r0 = new com.hp.hpl.jena.sparql.syntax.ElementGroup;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.syntax.ElementGroup: void <init>()>();

        $r1 = new com.hp.hpl.jena.sparql.syntax.ElementTriplesBlock;

        specialinvoke $r1.<com.hp.hpl.jena.sparql.syntax.ElementTriplesBlock: void <init>()>();

        r12 = $r1;

        virtualinvoke $r0.<com.hp.hpl.jena.sparql.syntax.ElementGroup: void addElement(com.hp.hpl.jena.sparql.syntax.Element)>($r1);

        r13 = <com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node defaultGraphNodeGenerated>;

        $r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.hp.hpl.jena.sparql.core.Quad) $r4;

        $r6 = virtualinvoke r5.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getGraph()>();

        if $r6 == r13 goto label4;

        $r7 = virtualinvoke r5.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getGraph()>();

        r13 = $r7;

        $r8 = new com.hp.hpl.jena.sparql.syntax.ElementTriplesBlock;

        specialinvoke $r8.<com.hp.hpl.jena.sparql.syntax.ElementTriplesBlock: void <init>()>();

        r12 = $r8;

        if $r7 == null goto label2;

        $r9 = <com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node defaultGraphNodeGenerated>;

        if $r7 != $r9 goto label3;

     label2:
        virtualinvoke $r0.<com.hp.hpl.jena.sparql.syntax.ElementGroup: void addElement(com.hp.hpl.jena.sparql.syntax.Element)>($r8);

        goto label4;

     label3:
        $r10 = new com.hp.hpl.jena.sparql.syntax.ElementNamedGraph;

        specialinvoke $r10.<com.hp.hpl.jena.sparql.syntax.ElementNamedGraph: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.syntax.Element)>($r7, $r8);

        virtualinvoke $r0.<com.hp.hpl.jena.sparql.syntax.ElementGroup: void addElement(com.hp.hpl.jena.sparql.syntax.Element)>($r10);

     label4:
        $r14 = virtualinvoke r5.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Triple asTriple()>();

        virtualinvoke r12.<com.hp.hpl.jena.sparql.syntax.ElementTriplesBlock: void addTriple(com.hp.hpl.jena.graph.Triple)>($r14);

        goto label1;

     label5:
        return $r0;
    }

    protected void execDelete(java.util.List, com.hp.hpl.jena.graph.Node, java.util.Iterator)
    {
        java.util.Iterator r2, $r3;
        com.hp.hpl.jena.update.GraphStore $r7;
        com.hp.hpl.jena.graph.Node r1;
        com.hp.hpl.jena.sparql.core.Quad r5;
        java.util.List r0;
        com.hp.hpl.jena.sparql.modify.UpdateEngineWorker r6;
        java.lang.Object $r4;
        boolean $z0;

        r6 := @this: com.hp.hpl.jena.sparql.modify.UpdateEngineWorker;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: com.hp.hpl.jena.graph.Node;

        r2 := @parameter2: java.util.Iterator;

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.modify.TemplateLib: java.util.Iterator template(java.util.List,com.hp.hpl.jena.graph.Node,java.util.Iterator)>(r0, r1, r2);

        if $r3 != null goto label1;

        return;

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.hp.hpl.jena.sparql.core.Quad) $r4;

        $r7 = r6.<com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: com.hp.hpl.jena.update.GraphStore graphStore>;

        interfaceinvoke $r7.<com.hp.hpl.jena.update.GraphStore: void delete(com.hp.hpl.jena.sparql.core.Quad)>(r5);

        goto label1;

     label2:
        return;
    }

    protected void execInsert(java.util.List, com.hp.hpl.jena.graph.Node, java.util.Iterator)
    {
        java.util.Iterator r2, $r3;
        com.hp.hpl.jena.update.GraphStore $r7;
        com.hp.hpl.jena.graph.Node r1;
        com.hp.hpl.jena.sparql.core.Quad r5;
        java.util.List r0;
        com.hp.hpl.jena.sparql.modify.UpdateEngineWorker r6;
        java.lang.Object $r4;
        boolean $z0;

        r6 := @this: com.hp.hpl.jena.sparql.modify.UpdateEngineWorker;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: com.hp.hpl.jena.graph.Node;

        r2 := @parameter2: java.util.Iterator;

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.modify.TemplateLib: java.util.Iterator template(java.util.List,com.hp.hpl.jena.graph.Node,java.util.Iterator)>(r0, r1, r2);

        if $r3 != null goto label1;

        return;

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.hp.hpl.jena.sparql.core.Quad) $r4;

        $r7 = r6.<com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: com.hp.hpl.jena.update.GraphStore graphStore>;

        staticinvoke <com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: void addToGraphStore(com.hp.hpl.jena.update.GraphStore,com.hp.hpl.jena.sparql.core.Quad)>($r7, r5);

        goto label1;

     label2:
        return;
    }

    private static void addToGraphStore(com.hp.hpl.jena.update.GraphStore, com.hp.hpl.jena.sparql.core.Quad)
    {
        com.hp.hpl.jena.update.GraphStore r1;
        com.hp.hpl.jena.sparql.core.Quad r0;
        boolean $z0;

        r1 := @parameter0: com.hp.hpl.jena.update.GraphStore;

        r0 := @parameter1: com.hp.hpl.jena.sparql.core.Quad;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.Quad: boolean isLegalAsData()>();

        if $z0 == 0 goto label1;

        interfaceinvoke r1.<com.hp.hpl.jena.update.GraphStore: void add(com.hp.hpl.jena.sparql.core.Quad)>(r0);

     label1:
        return;
    }

    private static void deleteFromGraphStore(com.hp.hpl.jena.update.GraphStore, com.hp.hpl.jena.sparql.core.Quad)
    {
        com.hp.hpl.jena.update.GraphStore r0;
        com.hp.hpl.jena.sparql.core.Quad r1;

        r0 := @parameter0: com.hp.hpl.jena.update.GraphStore;

        r1 := @parameter1: com.hp.hpl.jena.sparql.core.Quad;

        interfaceinvoke r0.<com.hp.hpl.jena.update.GraphStore: void delete(com.hp.hpl.jena.sparql.core.Quad)>(r1);

        return;
    }

    protected com.hp.hpl.jena.query.Query elementToQuery(com.hp.hpl.jena.sparql.syntax.Element)
    {
        com.hp.hpl.jena.sparql.syntax.Element r0;
        com.hp.hpl.jena.query.Query $r1;
        com.hp.hpl.jena.sparql.modify.UpdateEngineWorker r2;

        r2 := @this: com.hp.hpl.jena.sparql.modify.UpdateEngineWorker;

        r0 := @parameter0: com.hp.hpl.jena.sparql.syntax.Element;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.hp.hpl.jena.query.Query;

        specialinvoke $r1.<com.hp.hpl.jena.query.Query: void <init>()>();

        virtualinvoke $r1.<com.hp.hpl.jena.query.Query: void setQueryPattern(com.hp.hpl.jena.sparql.syntax.Element)>(r0);

        virtualinvoke $r1.<com.hp.hpl.jena.query.Query: void setQuerySelectType()>();

        virtualinvoke $r1.<com.hp.hpl.jena.query.Query: void setQueryResultStar(boolean)>(1);

        virtualinvoke $r1.<com.hp.hpl.jena.query.Query: void setResultVars()>();

        return $r1;
    }

    protected java.util.Iterator evalBindings(com.hp.hpl.jena.sparql.syntax.Element, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.query.Query $r2;
        java.util.Iterator $r4;
        com.hp.hpl.jena.sparql.modify.UpdateEngineWorker r0;
        com.hp.hpl.jena.sparql.syntax.Element r1;
        com.hp.hpl.jena.graph.Node r3;

        r0 := @this: com.hp.hpl.jena.sparql.modify.UpdateEngineWorker;

        r1 := @parameter0: com.hp.hpl.jena.sparql.syntax.Element;

        r3 := @parameter1: com.hp.hpl.jena.graph.Node;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: com.hp.hpl.jena.query.Query elementToQuery(com.hp.hpl.jena.sparql.syntax.Element)>(r1);

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: java.util.Iterator evalBindings(com.hp.hpl.jena.query.Query,com.hp.hpl.jena.graph.Node)>($r2, r3);

        return $r4;
    }

    protected java.util.Iterator evalBindings(com.hp.hpl.jena.query.Query, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.query.Query r1;
        java.util.Iterator $r8;
        com.hp.hpl.jena.graph.Node r2;
        com.hp.hpl.jena.sparql.core.DatasetGraph r5;
        com.hp.hpl.jena.sparql.util.Context $r7;
        com.hp.hpl.jena.sparql.engine.binding.Binding $r6;
        com.hp.hpl.jena.sparql.modify.UpdateEngineWorker r0;
        com.hp.hpl.jena.sparql.modify.UpdateEngineWorker$DatasetGraphAltDefaultGraph $r4;
        com.hp.hpl.jena.graph.Graph $r3;

        r0 := @this: com.hp.hpl.jena.sparql.modify.UpdateEngineWorker;

        r1 := @parameter0: com.hp.hpl.jena.query.Query;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        r5 = r0.<com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: com.hp.hpl.jena.update.GraphStore graphStore>;

        if r1 == null goto label1;

        if r2 == null goto label1;

        $r3 = specialinvoke r0.<com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: com.hp.hpl.jena.graph.Graph graphOrDummy(com.hp.hpl.jena.sparql.core.DatasetGraph,com.hp.hpl.jena.graph.Node)>(r5, r2);

        $r4 = new com.hp.hpl.jena.sparql.modify.UpdateEngineWorker$DatasetGraphAltDefaultGraph;

        specialinvoke $r4.<com.hp.hpl.jena.sparql.modify.UpdateEngineWorker$DatasetGraphAltDefaultGraph: void <init>(com.hp.hpl.jena.sparql.core.DatasetGraph,com.hp.hpl.jena.graph.Graph)>(r5, $r3);

        r5 = $r4;

     label1:
        $r6 = r0.<com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: com.hp.hpl.jena.sparql.engine.binding.Binding inputBinding>;

        $r7 = r0.<com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: com.hp.hpl.jena.sparql.util.Context context>;

        $r8 = staticinvoke <com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: java.util.Iterator evalBindings(com.hp.hpl.jena.query.Query,com.hp.hpl.jena.sparql.core.DatasetGraph,com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.util.Context)>(r1, r5, $r6, $r7);

        return $r8;
    }

    protected static java.util.Iterator evalBindings(com.hp.hpl.jena.query.Query, com.hp.hpl.jena.sparql.core.DatasetGraph, com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.sparql.util.Context)
    {
        com.hp.hpl.jena.query.Query r0;
        com.hp.hpl.jena.sparql.engine.binding.Binding r1, $r6;
        java.util.Iterator r5;
        com.hp.hpl.jena.sparql.engine.Plan $r4;
        com.hp.hpl.jena.sparql.core.DatasetGraph r2;
        com.hp.hpl.jena.sparql.util.Context r3;

        r0 := @parameter0: com.hp.hpl.jena.query.Query;

        r2 := @parameter1: com.hp.hpl.jena.sparql.core.DatasetGraph;

        r1 := @parameter2: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r3 := @parameter3: com.hp.hpl.jena.sparql.util.Context;

        if r0 == null goto label1;

        $r4 = staticinvoke <com.hp.hpl.jena.query.QueryExecutionFactory: com.hp.hpl.jena.sparql.engine.Plan createPlan(com.hp.hpl.jena.query.Query,com.hp.hpl.jena.sparql.core.DatasetGraph,com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.util.Context)>(r0, r2, r1, r3);

        r5 = interfaceinvoke $r4.<com.hp.hpl.jena.sparql.engine.Plan: com.hp.hpl.jena.sparql.engine.QueryIterator iterator()>();

        goto label4;

     label1:
        if null == r1 goto label2;

        $r6 = r1;

        goto label3;

     label2:
        $r6 = staticinvoke <com.hp.hpl.jena.sparql.engine.binding.BindingRoot: com.hp.hpl.jena.sparql.engine.binding.Binding create()>();

     label3:
        r5 = staticinvoke <org.apache.jena.atlas.iterator.Iter: java.util.Iterator singleton(java.lang.Object)>($r6);

     label4:
        return r5;
    }

    protected static com.hp.hpl.jena.graph.Graph graph(com.hp.hpl.jena.update.GraphStore, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.update.GraphStore r1;
        com.hp.hpl.jena.graph.Node r0, $r3;
        com.hp.hpl.jena.graph.Graph $r2, $r4;

        r1 := @parameter0: com.hp.hpl.jena.update.GraphStore;

        r0 := @parameter1: com.hp.hpl.jena.graph.Node;

        if r0 == null goto label1;

        $r3 = <com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node defaultGraphNodeGenerated>;

        if r0 != $r3 goto label2;

     label1:
        $r2 = interfaceinvoke r1.<com.hp.hpl.jena.update.GraphStore: com.hp.hpl.jena.graph.Graph getDefaultGraph()>();

        return $r2;

     label2:
        $r4 = interfaceinvoke r1.<com.hp.hpl.jena.update.GraphStore: com.hp.hpl.jena.graph.Graph getGraph(com.hp.hpl.jena.graph.Node)>(r0);

        return $r4;
    }

    protected static com.hp.hpl.jena.graph.Graph graph(com.hp.hpl.jena.update.GraphStore, com.hp.hpl.jena.sparql.modify.request.Target)
    {
        com.hp.hpl.jena.update.GraphStore r5;
        com.hp.hpl.jena.graph.Node $r6;
        java.lang.StringBuilder $r1, $r2, $r3;
        java.lang.String $r4;
        com.hp.hpl.jena.sparql.modify.request.Target r0;
        com.hp.hpl.jena.graph.Graph $r7, $r8;
        boolean $z0, $z1;

        r5 := @parameter0: com.hp.hpl.jena.update.GraphStore;

        r0 := @parameter1: com.hp.hpl.jena.sparql.modify.request.Target;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.modify.request.Target: boolean isDefault()>();

        if $z0 == 0 goto label1;

        $r8 = interfaceinvoke r5.<com.hp.hpl.jena.update.GraphStore: com.hp.hpl.jena.graph.Graph getDefaultGraph()>();

        return $r8;

     label1:
        $z1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.modify.request.Target: boolean isOneNamedGraph()>();

        if $z1 == 0 goto label2;

        $r6 = virtualinvoke r0.<com.hp.hpl.jena.sparql.modify.request.Target: com.hp.hpl.jena.graph.Node getGraph()>();

        $r7 = staticinvoke <com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: com.hp.hpl.jena.graph.Graph graph(com.hp.hpl.jena.update.GraphStore,com.hp.hpl.jena.graph.Node)>(r5, $r6);

        return $r7;

     label2:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Target does not name one graph: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: void error(java.lang.String)>($r4);

        return null;
    }

    protected static void error(java.lang.String)
    {
        com.hp.hpl.jena.update.UpdateException $r0;
        java.lang.String r1;

        r1 := @parameter0: java.lang.String;

        $r0 = new com.hp.hpl.jena.update.UpdateException;

        specialinvoke $r0.<com.hp.hpl.jena.update.UpdateException: void <init>(java.lang.String)>(r1);

        throw $r0;
    }

    static void access$000(com.hp.hpl.jena.update.GraphStore, com.hp.hpl.jena.sparql.core.Quad)
    {
        com.hp.hpl.jena.update.GraphStore r0;
        com.hp.hpl.jena.sparql.core.Quad r1;

        r0 := @parameter0: com.hp.hpl.jena.update.GraphStore;

        r1 := @parameter1: com.hp.hpl.jena.sparql.core.Quad;

        staticinvoke <com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: void addToGraphStore(com.hp.hpl.jena.update.GraphStore,com.hp.hpl.jena.sparql.core.Quad)>(r0, r1);

        return;
    }

    static void access$100(com.hp.hpl.jena.update.GraphStore, com.hp.hpl.jena.sparql.core.Quad)
    {
        com.hp.hpl.jena.update.GraphStore r0;
        com.hp.hpl.jena.sparql.core.Quad r1;

        r0 := @parameter0: com.hp.hpl.jena.update.GraphStore;

        r1 := @parameter1: com.hp.hpl.jena.sparql.core.Quad;

        staticinvoke <com.hp.hpl.jena.sparql.modify.UpdateEngineWorker: void deleteFromGraphStore(com.hp.hpl.jena.update.GraphStore,com.hp.hpl.jena.sparql.core.Quad)>(r0, r1);

        return;
    }
}
