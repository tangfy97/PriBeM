public class org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory extends org.eclipse.jdt.internal.compiler.batch.ClasspathLocation
{
    private java.util.Hashtable directoryCache;
    private java.lang.String[] missingPackageHolder;
    private int mode;
    private java.lang.String encoding;

    void <init>(java.io.File, java.lang.String, int, org.eclipse.jdt.internal.compiler.env.AccessRuleSet, java.lang.String)
    {
        org.eclipse.jdt.internal.compiler.env.AccessRuleSet r1;
        java.lang.String[] $r3;
        java.lang.StringBuffer $r10, $r14;
        int i0;
        org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory r0;
        java.lang.String r2, $r5, $r6, $r7, r9, $r11, $r12, $r13, $r15;
        java.util.Hashtable $r8;
        boolean $z0;
        java.io.File r4;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory;

        r4 := @parameter0: java.io.File;

        r9 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r1 := @parameter3: org.eclipse.jdt.internal.compiler.env.AccessRuleSet;

        r2 := @parameter4: java.lang.String;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathLocation: void <init>(org.eclipse.jdt.internal.compiler.env.AccessRuleSet,java.lang.String)>(r1, r2);

        $r3 = newarray (java.lang.String)[1];

        r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory: java.lang.String[] missingPackageHolder> = $r3;

        r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory: int mode> = i0;

        $r5 = virtualinvoke r4.<java.io.File: java.lang.String getAbsolutePath()>();

        r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory: java.lang.String path> = $r5;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory: java.lang.String path>;

        $r6 = <java.io.File: java.lang.String separator>;

        $z0 = virtualinvoke $r7.<java.lang.String: boolean endsWith(java.lang.String)>($r6);

        if $z0 != 0 goto label1;

        $r11 = r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory: java.lang.String path>;

        $r10 = new java.lang.StringBuffer;

        $r12 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r11);

        specialinvoke $r10.<java.lang.StringBuffer: void <init>(java.lang.String)>($r12);

        $r13 = <java.io.File: java.lang.String separator>;

        $r14 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory: java.lang.String path> = $r15;

     label1:
        $r8 = new java.util.Hashtable;

        specialinvoke $r8.<java.util.Hashtable: void <init>(int)>(11);

        r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory: java.util.Hashtable directoryCache> = $r8;

        r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory: java.lang.String encoding> = r9;

        return;
    }

    java.lang.String[] directoryList(java.lang.String)
    {
        org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory r0;
        boolean $z0, $z1, $z2, $z3;
        java.lang.String[] $r4, r15, $r16, r17, $r19;
        java.lang.StringBuffer $r9, $r20;
        int $i1, $i2, i4, $i5, $i7, $i9;
        java.lang.String r1, $r7, $r8, $r10, $r12, $r13, $r14;
        java.util.Hashtable $r2, $r11, $r18;
        char $c0, $c3;
        java.io.File $r21;
        java.lang.Object $r3;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory: java.util.Hashtable directoryCache>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);

        r15 = (java.lang.String[]) $r3;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory: java.lang.String[] missingPackageHolder>;

        if r15 != $r4 goto label1;

        return null;

     label1:
        if r15 == null goto label2;

        return r15;

     label2:
        $r21 = new java.io.File;

        $r20 = new java.lang.StringBuffer;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory: java.lang.String path>;

        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r7);

        specialinvoke $r20.<java.lang.StringBuffer: void <init>(java.lang.String)>($r8);

        $r9 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r21.<java.io.File: void <init>(java.lang.String)>($r10);

        $z0 = virtualinvoke $r21.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label8;

        i4 = virtualinvoke r1.<java.lang.String: int length()>();

        $c0 = <java.io.File: char separatorChar>;

        $i5 = (int) $c0;

        $i1 = virtualinvoke r1.<java.lang.String: int lastIndexOf(int)>($i5);

     label3:
        $i7 = (int) -1;

        i4 = i4 + $i7;

        if i4 <= $i1 goto label4;

        $c3 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i4);

        $z3 = staticinvoke <org.eclipse.jdt.internal.compiler.parser.ScannerHelper: boolean isUpperCase(char)>($c3);

        if $z3 == 0 goto label3;

     label4:
        if i4 <= $i1 goto label6;

        $i9 = (int) -1;

        if $i1 != $i9 goto label5;

        $r14 = <org.eclipse.jdt.internal.compiler.util.Util: java.lang.String EMPTY_STRING>;

        $z2 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory: boolean doesFileExist(java.lang.String,java.lang.String)>(r1, $r14);

        if $z2 != 0 goto label6;

        goto label8;

     label5:
        $i2 = $i1 + 1;

        $r12 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i2);

        $r13 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        $z1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory: boolean doesFileExist(java.lang.String,java.lang.String)>($r12, $r13);

        if $z1 != 0 goto label6;

        goto label8;

     label6:
        $r16 = virtualinvoke $r21.<java.io.File: java.lang.String[] list()>();

        r17 = $r16;

        if $r16 != null goto label7;

        r17 = <org.eclipse.jdt.core.compiler.CharOperation: java.lang.String[] NO_STRINGS>;

     label7:
        $r11 = r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory: java.util.Hashtable directoryCache>;

        virtualinvoke $r11.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r17);

        return r17;

     label8:
        $r18 = r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory: java.util.Hashtable directoryCache>;

        $r19 = r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory: java.lang.String[] missingPackageHolder>;

        virtualinvoke $r18.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r19);

        return null;
    }

    boolean doesFileExist(java.lang.String, java.lang.String)
    {
        java.lang.String[] $r2;
        int i0, $i2;
        org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory r0;
        java.lang.String r1, r3, $r4;
        boolean $z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory;

        r3 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory: java.lang.String[] directoryList(java.lang.String)>(r1);

        if $r2 != null goto label1;

        return 0;

     label1:
        i0 = lengthof $r2;

        goto label3;

     label2:
        $r4 = $r2[i0];

        $z0 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label3;

        return 1;

     label3:
        $i2 = (int) -1;

        i0 = i0 + $i2;

        if i0 >= 0 goto label2;

        return 0;
    }

    public java.util.List fetchLinkedJars(org.eclipse.jdt.internal.compiler.batch.FileSystem$ClasspathSectionProblemReporter)
    {
        org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory r0;
        org.eclipse.jdt.internal.compiler.batch.FileSystem$ClasspathSectionProblemReporter r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.batch.FileSystem$ClasspathSectionProblemReporter;

        return null;
    }

    public org.eclipse.jdt.internal.compiler.env.NameEnvironmentAnswer findClass(char[], java.lang.String, java.lang.String)
    {
        org.eclipse.jdt.internal.compiler.env.NameEnvironmentAnswer $r4;
        char[] r1;
        org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory r0;
        java.lang.String r2, r3;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory;

        r1 := @parameter0: char[];

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r4 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory: org.eclipse.jdt.internal.compiler.env.NameEnvironmentAnswer findClass(char[],java.lang.String,java.lang.String,boolean)>(r1, r2, r3, 0);

        return $r4;
    }

    public org.eclipse.jdt.internal.compiler.env.NameEnvironmentAnswer findClass(char[], java.lang.String, java.lang.String, boolean)
    {
        org.eclipse.jdt.internal.compiler.env.NameEnvironmentAnswer $r51, $r56, $r58;
        byte $b6;
        org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory r0;
        boolean $z0, z1, z2, $z3, $z4, $z5, $z6;
        java.lang.Exception $r45;
        long $l4, $l5;
        org.eclipse.jdt.internal.compiler.env.AccessRestriction $r12, $r31, $r36;
        java.lang.StringBuffer $r8, $r17, $r18, $r23, $r39, $r43, $r47, $r48, $r49, $r52, $r57;
        int $i0, $i1, $i2, $i3, $i7, $i8, $i9;
        java.lang.String r1, $r5, $r6, r7, $r9, $r14, $r15, $r16, $r19, $r21, $r22, $r24, $r29, $r30, $r34, $r35, $r38, $r40, $r42, $r44, $r46;
        org.eclipse.jdt.internal.compiler.classfmt.ClassFileReader $r10;
        org.eclipse.jdt.internal.compiler.batch.CompilationUnit $r50, $r55;
        java.io.File $r53, $r54;
        char[] r3;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory;

        r3 := @parameter0: char[];

        r1 := @parameter1: java.lang.String;

        r7 := @parameter2: java.lang.String;

        z2 := @parameter3: boolean;

        $z0 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory: boolean isPackage(java.lang.String)>(r1);

        if $z0 != 0 goto label01;

        return null;

     label01:
        $r46 = new java.lang.String;

        specialinvoke $r46.<java.lang.String: void <init>(char[])>(r3);

        $i0 = r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory: int mode>;

        $i1 = $i0 & 2;

        if $i1 == 0 goto label02;

        $r47 = new java.lang.StringBuffer;

        $r42 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r46);

        specialinvoke $r47.<java.lang.StringBuffer: void <init>(java.lang.String)>($r42);

        $r43 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".class");

        $r44 = virtualinvoke $r43.<java.lang.StringBuffer: java.lang.String toString()>();

        $z4 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory: boolean doesFileExist(java.lang.String,java.lang.String)>($r44, r1);

        if $z4 == 0 goto label02;

        $z5 = 1;

        goto label03;

     label02:
        $z5 = 0;

     label03:
        z1 = $z5;

        $i7 = r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory: int mode>;

        $i8 = $i7 & 1;

        if $i8 == 0 goto label04;

        $r48 = new java.lang.StringBuffer;

        $r38 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r46);

        specialinvoke $r48.<java.lang.StringBuffer: void <init>(java.lang.String)>($r38);

        $r39 = virtualinvoke $r48.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".java");

        $r40 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.String toString()>();

        $z3 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory: boolean doesFileExist(java.lang.String,java.lang.String)>($r40, r1);

        if $z3 == 0 goto label04;

        $z6 = 1;

        goto label05;

     label04:
        $z6 = 0;

     label05:
        if $z6 == 0 goto label07;

        if z2 != 0 goto label07;

        $r49 = new java.lang.StringBuffer;

        $r14 = r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory: java.lang.String path>;

        $r15 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r14);

        specialinvoke $r49.<java.lang.StringBuffer: void <init>(java.lang.String)>($r15);

        $i2 = virtualinvoke r7.<java.lang.String: int length()>();

        $i3 = $i2 - 6;

        $r16 = virtualinvoke r7.<java.lang.String: java.lang.String substring(int,int)>(0, $i3);

        $r17 = virtualinvoke $r49.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".java");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        if z1 != 0 goto label06;

        $r51 = new org.eclipse.jdt.internal.compiler.env.NameEnvironmentAnswer;

        $r50 = new org.eclipse.jdt.internal.compiler.batch.CompilationUnit;

        $r35 = r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory: java.lang.String encoding>;

        $r34 = r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory: java.lang.String destinationPath>;

        specialinvoke $r50.<org.eclipse.jdt.internal.compiler.batch.CompilationUnit: void <init>(char[],java.lang.String,java.lang.String,java.lang.String)>(null, $r19, $r35, $r34);

        $r36 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory: org.eclipse.jdt.internal.compiler.env.AccessRestriction fetchAccessRestriction(java.lang.String)>(r7);

        specialinvoke $r51.<org.eclipse.jdt.internal.compiler.env.NameEnvironmentAnswer: void <init>(org.eclipse.jdt.internal.compiler.env.ICompilationUnit,org.eclipse.jdt.internal.compiler.env.AccessRestriction)>($r50, $r36);

        return $r51;

     label06:
        $r52 = new java.lang.StringBuffer;

        $r21 = r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory: java.lang.String path>;

        $r22 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r21);

        specialinvoke $r52.<java.lang.StringBuffer: void <init>(java.lang.String)>($r22);

        $r23 = virtualinvoke $r52.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r7);

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.String toString()>();

        $r53 = new java.io.File;

        specialinvoke $r53.<java.io.File: void <init>(java.lang.String)>($r24);

        $l4 = virtualinvoke $r53.<java.io.File: long lastModified()>();

        $r54 = new java.io.File;

        specialinvoke $r54.<java.io.File: void <init>(java.lang.String)>($r19);

        $l5 = virtualinvoke $r54.<java.io.File: long lastModified()>();

        $b6 = $l5 cmp $l4;

        $i9 = (int) $b6;

        if $i9 <= 0 goto label07;

        $r56 = new org.eclipse.jdt.internal.compiler.env.NameEnvironmentAnswer;

        $r55 = new org.eclipse.jdt.internal.compiler.batch.CompilationUnit;

        $r30 = r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory: java.lang.String encoding>;

        $r29 = r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory: java.lang.String destinationPath>;

        specialinvoke $r55.<org.eclipse.jdt.internal.compiler.batch.CompilationUnit: void <init>(char[],java.lang.String,java.lang.String,java.lang.String)>(null, $r19, $r30, $r29);

        $r31 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory: org.eclipse.jdt.internal.compiler.env.AccessRestriction fetchAccessRestriction(java.lang.String)>(r7);

        specialinvoke $r56.<org.eclipse.jdt.internal.compiler.env.NameEnvironmentAnswer: void <init>(org.eclipse.jdt.internal.compiler.env.ICompilationUnit,org.eclipse.jdt.internal.compiler.env.AccessRestriction)>($r55, $r31);

        return $r56;

     label07:
        if z1 == 0 goto label11;

     label08:
        $r57 = new java.lang.StringBuffer;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory: java.lang.String path>;

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r5);

        specialinvoke $r57.<java.lang.StringBuffer: void <init>(java.lang.String)>($r6);

        $r8 = virtualinvoke $r57.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        $r10 = staticinvoke <org.eclipse.jdt.internal.compiler.classfmt.ClassFileReader: org.eclipse.jdt.internal.compiler.classfmt.ClassFileReader read(java.lang.String)>($r9);

        if $r10 == null goto label11;

        $r58 = new org.eclipse.jdt.internal.compiler.env.NameEnvironmentAnswer;

        $r12 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory: org.eclipse.jdt.internal.compiler.env.AccessRestriction fetchAccessRestriction(java.lang.String)>(r7);

        specialinvoke $r58.<org.eclipse.jdt.internal.compiler.env.NameEnvironmentAnswer: void <init>(org.eclipse.jdt.internal.compiler.env.IBinaryType,org.eclipse.jdt.internal.compiler.env.AccessRestriction)>($r10, $r12);

     label09:
        return $r58;

     label10:
        $r45 := @caughtexception;

     label11:
        return null;

        catch java.lang.Exception from label08 to label09 with label10;
    }

    public char[][][] findTypeNames(java.lang.String)
    {
        java.lang.String[] $r9;
        char[][] $r12, $r16;
        org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory$1 $r8;
        java.lang.StringBuffer $r3, $r6;
        int $i0, $i2, i3;
        org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory r0;
        java.lang.String r1, $r4, $r5, $r7, r13, $r14;
        boolean $z0, $z1, $z2;
        char[][][] r10;
        char $c1;
        java.io.File $r2;
        char[] $r11, $r15;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory: boolean isPackage(java.lang.String)>(r1);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r2 = new java.io.File;

        $r3 = new java.lang.StringBuffer;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory: java.lang.String path>;

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4);

        specialinvoke $r3.<java.lang.StringBuffer: void <init>(java.lang.String)>($r5);

        $r6 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>($r7);

        $z1 = virtualinvoke $r2.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label2;

        $z2 = virtualinvoke $r2.<java.io.File: boolean isDirectory()>();

        if $z2 != 0 goto label3;

     label2:
        return null;

     label3:
        $r8 = new org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory$1;

        specialinvoke $r8.<org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory$1: void <init>(org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory)>(r0);

        $r9 = virtualinvoke $r2.<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>($r8);

        if $r9 == null goto label4;

        $i0 = lengthof $r9;

        if $i0 != 0 goto label5;

     label4:
        return null;

     label5:
        r10 = newarray (char[][])[$i0];

        $c1 = <java.io.File: char separatorChar>;

        $r11 = virtualinvoke r1.<java.lang.String: char[] toCharArray()>();

        $r12 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: char[][] splitOn(char,char[])>($c1, $r11);

        i3 = 0;

        goto label7;

     label6:
        r13 = $r9[i3];

        $i2 = virtualinvoke r13.<java.lang.String: int indexOf(int)>(46);

        $r14 = virtualinvoke r13.<java.lang.String: java.lang.String substring(int,int)>(0, $i2);

        $r15 = virtualinvoke $r14.<java.lang.String: char[] toCharArray()>();

        $r16 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: char[][] arrayConcat(char[][],char[])>($r12, $r15);

        r10[i3] = $r16;

        i3 = i3 + 1;

     label7:
        if i3 < $i0 goto label6;

        return r10;
    }

    public void initialize() throws java.io.IOException
    {
        org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory;

        return;
    }

    public boolean isPackage(java.lang.String)
    {
        org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory r0;
        java.lang.String[] $r2;
        java.lang.String r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory: java.lang.String[] directoryList(java.lang.String)>(r1);

        if $r2 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public void reset()
    {
        org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory r0;
        java.util.Hashtable $r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory;

        $r1 = new java.util.Hashtable;

        specialinvoke $r1.<java.util.Hashtable: void <init>(int)>(11);

        r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory: java.util.Hashtable directoryCache> = $r1;

        return;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuffer $r0, $r3;
        org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory r1;
        java.lang.String $r2, $r4;

        r1 := @this: org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>(java.lang.String)>("ClasspathDirectory ");

        $r2 = r1.<org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory: java.lang.String path>;

        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    public char[] normalizedPath()
    {
        char $c0;
        int $i1;
        char[] $r1, $r3, $r4, $r5;
        org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory r0;
        java.lang.String $r2;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory: char[] normalizedPath>;

        if $r1 != null goto label1;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory: java.lang.String path>;

        $r3 = virtualinvoke $r2.<java.lang.String: char[] toCharArray()>();

        r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory: char[] normalizedPath> = $r3;

        $c0 = <java.io.File: char separatorChar>;

        $i1 = (int) $c0;

        if $i1 != 92 goto label1;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory: char[] normalizedPath>;

        staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: void replace(char[],char,char)>($r4, 92, 47);

     label1:
        $r5 = r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory: char[] normalizedPath>;

        return $r5;
    }

    public java.lang.String getPath()
    {
        org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory r0;
        java.lang.String $r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory: java.lang.String path>;

        return $r1;
    }
}
