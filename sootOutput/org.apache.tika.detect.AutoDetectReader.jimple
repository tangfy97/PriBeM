public class org.apache.tika.detect.AutoDetectReader extends java.io.BufferedReader
{
    private static final org.apache.tika.config.ServiceLoader DEFAULT_LOADER;
    private final java.nio.charset.Charset charset;

    private static java.nio.charset.Charset detect(java.io.InputStream, org.apache.tika.metadata.Metadata, java.util.List, org.apache.tika.config.LoadErrorHandler) throws java.io.IOException, org.apache.tika.exception.TikaException
    {
        org.apache.tika.mime.MediaType $r4;
        org.apache.tika.metadata.Metadata r2;
        java.nio.charset.Charset $r7, $r10;
        org.apache.tika.exception.TikaException $r18;
        java.util.Map $r5;
        java.lang.String $r3, $r15, r17;
        java.lang.NoClassDefFoundError $r12;
        boolean $z0;
        org.apache.tika.config.LoadErrorHandler r13;
        java.util.Iterator $r1;
        java.lang.Exception $r11;
        java.util.List r0;
        java.lang.Object $r6, $r8;
        java.lang.Class $r14;
        org.apache.tika.detect.EncodingDetector r16;
        java.io.InputStream r9;

        r9 := @parameter0: java.io.InputStream;

        r2 := @parameter1: org.apache.tika.metadata.Metadata;

        r0 := @parameter2: java.util.List;

        r13 := @parameter3: org.apache.tika.config.LoadErrorHandler;

        $r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label07;

        $r8 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r16 = (org.apache.tika.detect.EncodingDetector) $r8;

     label02:
        $r10 = interfaceinvoke r16.<org.apache.tika.detect.EncodingDetector: java.nio.charset.Charset detect(java.io.InputStream,org.apache.tika.metadata.Metadata)>(r9, r2);

        if $r10 == null goto label04;

     label03:
        return $r10;

     label04:
        goto label06;

     label05:
        $r12 := @caughtexception;

        $r14 = virtualinvoke r16.<java.lang.Object: java.lang.Class getClass()>();

        $r15 = virtualinvoke $r14.<java.lang.Class: java.lang.String getName()>();

        interfaceinvoke r13.<org.apache.tika.config.LoadErrorHandler: void handleLoadError(java.lang.String,java.lang.Throwable)>($r15, $r12);

     label06:
        goto label01;

     label07:
        $r3 = virtualinvoke r2.<org.apache.tika.metadata.Metadata: java.lang.String get(java.lang.String)>("Content-Type");

        $r4 = staticinvoke <org.apache.tika.mime.MediaType: org.apache.tika.mime.MediaType parse(java.lang.String)>($r3);

        if $r4 == null goto label11;

        $r5 = virtualinvoke $r4.<org.apache.tika.mime.MediaType: java.util.Map getParameters()>();

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>("charset");

        r17 = (java.lang.String) $r6;

        if r17 == null goto label11;

     label08:
        $r7 = staticinvoke <org.apache.tika.utils.CharsetUtils: java.nio.charset.Charset forName(java.lang.String)>(r17);

     label09:
        return $r7;

     label10:
        $r11 := @caughtexception;

     label11:
        $r18 = new org.apache.tika.exception.TikaException;

        specialinvoke $r18.<org.apache.tika.exception.TikaException: void <init>(java.lang.String)>("Failed to detect the character encoding of a document");

        throw $r18;

        catch java.lang.NoClassDefFoundError from label02 to label03 with label05;
        catch java.lang.Exception from label08 to label09 with label10;
    }

    private void <init>(java.io.InputStream, java.nio.charset.Charset) throws java.io.IOException
    {
        java.nio.charset.Charset r3;
        org.apache.tika.detect.AutoDetectReader r0;
        int $i0, $i2;
        java.io.InputStreamReader $r4;
        java.io.InputStream r2;

        r0 := @this: org.apache.tika.detect.AutoDetectReader;

        r2 := @parameter0: java.io.InputStream;

        r3 := @parameter1: java.nio.charset.Charset;

        $r4 = new java.io.InputStreamReader;

        specialinvoke $r4.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>(r2, r3);

        specialinvoke r0.<java.io.BufferedReader: void <init>(java.io.Reader)>($r4);

        r0.<org.apache.tika.detect.AutoDetectReader: java.nio.charset.Charset charset> = r3;

        virtualinvoke r0.<org.apache.tika.detect.AutoDetectReader: void mark(int)>(1);

        $i0 = virtualinvoke r0.<org.apache.tika.detect.AutoDetectReader: int read()>();

        $i2 = (int) 65279;

        if $i0 == $i2 goto label1;

        virtualinvoke r0.<org.apache.tika.detect.AutoDetectReader: void reset()>();

     label1:
        return;
    }

    private void <init>(java.io.BufferedInputStream, org.apache.tika.metadata.Metadata, java.util.List, org.apache.tika.config.LoadErrorHandler) throws java.io.IOException, org.apache.tika.exception.TikaException
    {
        org.apache.tika.metadata.Metadata r2;
        java.util.List r3;
        java.io.BufferedInputStream r1;
        java.nio.charset.Charset $r5;
        org.apache.tika.detect.AutoDetectReader r0;
        org.apache.tika.config.LoadErrorHandler r4;

        r0 := @this: org.apache.tika.detect.AutoDetectReader;

        r1 := @parameter0: java.io.BufferedInputStream;

        r2 := @parameter1: org.apache.tika.metadata.Metadata;

        r3 := @parameter2: java.util.List;

        r4 := @parameter3: org.apache.tika.config.LoadErrorHandler;

        $r5 = staticinvoke <org.apache.tika.detect.AutoDetectReader: java.nio.charset.Charset detect(java.io.InputStream,org.apache.tika.metadata.Metadata,java.util.List,org.apache.tika.config.LoadErrorHandler)>(r1, r2, r3, r4);

        specialinvoke r0.<org.apache.tika.detect.AutoDetectReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>(r1, $r5);

        return;
    }

    public void <init>(java.io.InputStream, org.apache.tika.metadata.Metadata, org.apache.tika.config.ServiceLoader) throws java.io.IOException, org.apache.tika.exception.TikaException
    {
        org.apache.tika.metadata.Metadata r3;
        org.apache.tika.config.ServiceLoader r4;
        java.util.List $r5;
        java.io.BufferedInputStream $r1;
        org.apache.tika.detect.AutoDetectReader r0;
        java.io.InputStream r2;
        org.apache.tika.config.LoadErrorHandler $r6;

        r0 := @this: org.apache.tika.detect.AutoDetectReader;

        r2 := @parameter0: java.io.InputStream;

        r3 := @parameter1: org.apache.tika.metadata.Metadata;

        r4 := @parameter2: org.apache.tika.config.ServiceLoader;

        $r1 = new java.io.BufferedInputStream;

        specialinvoke $r1.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>(r2);

        $r5 = virtualinvoke r4.<org.apache.tika.config.ServiceLoader: java.util.List loadServiceProviders(java.lang.Class)>(class "Lorg/apache/tika/detect/EncodingDetector;");

        $r6 = virtualinvoke r4.<org.apache.tika.config.ServiceLoader: org.apache.tika.config.LoadErrorHandler getLoadErrorHandler()>();

        specialinvoke r0.<org.apache.tika.detect.AutoDetectReader: void <init>(java.io.BufferedInputStream,org.apache.tika.metadata.Metadata,java.util.List,org.apache.tika.config.LoadErrorHandler)>($r1, r3, $r5, $r6);

        return;
    }

    public void <init>(java.io.InputStream, org.apache.tika.metadata.Metadata) throws java.io.IOException, org.apache.tika.exception.TikaException
    {
        org.apache.tika.metadata.Metadata r3;
        org.apache.tika.config.ServiceLoader $r4;
        java.io.BufferedInputStream $r1;
        org.apache.tika.detect.AutoDetectReader r0;
        java.io.InputStream r2;

        r0 := @this: org.apache.tika.detect.AutoDetectReader;

        r2 := @parameter0: java.io.InputStream;

        r3 := @parameter1: org.apache.tika.metadata.Metadata;

        $r1 = new java.io.BufferedInputStream;

        specialinvoke $r1.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>(r2);

        $r4 = <org.apache.tika.detect.AutoDetectReader: org.apache.tika.config.ServiceLoader DEFAULT_LOADER>;

        specialinvoke r0.<org.apache.tika.detect.AutoDetectReader: void <init>(java.io.InputStream,org.apache.tika.metadata.Metadata,org.apache.tika.config.ServiceLoader)>($r1, r3, $r4);

        return;
    }

    public void <init>(java.io.InputStream) throws java.io.IOException, org.apache.tika.exception.TikaException
    {
        org.apache.tika.metadata.Metadata $r2;
        org.apache.tika.detect.AutoDetectReader r0;
        java.io.InputStream r1;

        r0 := @this: org.apache.tika.detect.AutoDetectReader;

        r1 := @parameter0: java.io.InputStream;

        $r2 = new org.apache.tika.metadata.Metadata;

        specialinvoke $r2.<org.apache.tika.metadata.Metadata: void <init>()>();

        specialinvoke r0.<org.apache.tika.detect.AutoDetectReader: void <init>(java.io.InputStream,org.apache.tika.metadata.Metadata)>(r1, $r2);

        return;
    }

    public java.nio.charset.Charset getCharset()
    {
        java.nio.charset.Charset $r1;
        org.apache.tika.detect.AutoDetectReader r0;

        r0 := @this: org.apache.tika.detect.AutoDetectReader;

        $r1 = r0.<org.apache.tika.detect.AutoDetectReader: java.nio.charset.Charset charset>;

        return $r1;
    }

    public org.xml.sax.InputSource asInputSource()
    {
        org.xml.sax.InputSource $r0;
        java.nio.charset.Charset $r2;
        org.apache.tika.detect.AutoDetectReader r1;
        java.lang.String $r3;

        r1 := @this: org.apache.tika.detect.AutoDetectReader;

        $r0 = new org.xml.sax.InputSource;

        specialinvoke $r0.<org.xml.sax.InputSource: void <init>(java.io.Reader)>(r1);

        $r2 = r1.<org.apache.tika.detect.AutoDetectReader: java.nio.charset.Charset charset>;

        $r3 = virtualinvoke $r2.<java.nio.charset.Charset: java.lang.String name()>();

        virtualinvoke $r0.<org.xml.sax.InputSource: void setEncoding(java.lang.String)>($r3);

        return $r0;
    }

    static void <clinit>()
    {
        org.apache.tika.config.ServiceLoader $r0;
        java.lang.Class $r1;
        java.lang.ClassLoader $r2;

        $r0 = new org.apache.tika.config.ServiceLoader;

        $r1 = class "Lorg/apache/tika/detect/AutoDetectReader;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        specialinvoke $r0.<org.apache.tika.config.ServiceLoader: void <init>(java.lang.ClassLoader)>($r2);

        <org.apache.tika.detect.AutoDetectReader: org.apache.tika.config.ServiceLoader DEFAULT_LOADER> = $r0;

        return;
    }
}
