final class com.mycila.inject.internal.guava.collect.Synchronized extends java.lang.Object
{

    private void <init>()
    {
        com.mycila.inject.internal.guava.collect.Synchronized r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Synchronized;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static java.util.Collection collection(java.util.Collection, java.lang.Object)
    {
        java.lang.Object r2;
        com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedCollection $r0;
        java.util.Collection r1;

        r1 := @parameter0: java.util.Collection;

        r2 := @parameter1: java.lang.Object;

        $r0 = new com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedCollection;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedCollection: void <init>(java.util.Collection,java.lang.Object,com.mycila.inject.internal.guava.collect.Synchronized$1)>(r1, r2, null);

        return $r0;
    }

    static java.util.Set set(java.util.Set, java.lang.Object)
    {
        java.util.Set r1;
        com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedSet $r0;
        java.lang.Object r2;

        r1 := @parameter0: java.util.Set;

        r2 := @parameter1: java.lang.Object;

        $r0 = new com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedSet;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedSet: void <init>(java.util.Set,java.lang.Object)>(r1, r2);

        return $r0;
    }

    private static java.util.SortedSet sortedSet(java.util.SortedSet, java.lang.Object)
    {
        java.lang.Object r2;
        java.util.SortedSet r1;
        com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedSortedSet $r0;

        r1 := @parameter0: java.util.SortedSet;

        r2 := @parameter1: java.lang.Object;

        $r0 = new com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedSortedSet;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedSortedSet: void <init>(java.util.SortedSet,java.lang.Object)>(r1, r2);

        return $r0;
    }

    private static java.util.List list(java.util.List, java.lang.Object)
    {
        java.util.List r0;
        com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedRandomAccessList $r3;
        java.lang.Object r1;
        com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedList $r2, $r4;
        boolean $z0;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.lang.Object;

        $z0 = r0 instanceof java.util.RandomAccess;

        if $z0 == 0 goto label1;

        $r3 = new com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedRandomAccessList;

        $r2 = $r3;

        specialinvoke $r3.<com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedRandomAccessList: void <init>(java.util.List,java.lang.Object)>(r0, r1);

        goto label2;

     label1:
        $r4 = new com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedList;

        $r2 = $r4;

        specialinvoke $r4.<com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedList: void <init>(java.util.List,java.lang.Object)>(r0, r1);

     label2:
        return $r2;
    }

    static com.mycila.inject.internal.guava.collect.Multiset multiset(com.mycila.inject.internal.guava.collect.Multiset, java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.Multiset r0;
        java.lang.Object r2;
        boolean $z0, $z1;
        com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedMultiset $r1;

        r0 := @parameter0: com.mycila.inject.internal.guava.collect.Multiset;

        r2 := @parameter1: java.lang.Object;

        $z0 = r0 instanceof com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedMultiset;

        if $z0 != 0 goto label1;

        $z1 = r0 instanceof com.mycila.inject.internal.guava.collect.ImmutableMultiset;

        if $z1 == 0 goto label2;

     label1:
        return r0;

     label2:
        $r1 = new com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedMultiset;

        specialinvoke $r1.<com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedMultiset: void <init>(com.mycila.inject.internal.guava.collect.Multiset,java.lang.Object)>(r0, r2);

        return $r1;
    }

    static com.mycila.inject.internal.guava.collect.Multimap multimap(com.mycila.inject.internal.guava.collect.Multimap, java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedMultimap $r1;
        com.mycila.inject.internal.guava.collect.Multimap r0;
        java.lang.Object r2;
        boolean $z0, $z1;

        r0 := @parameter0: com.mycila.inject.internal.guava.collect.Multimap;

        r2 := @parameter1: java.lang.Object;

        $z0 = r0 instanceof com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedMultimap;

        if $z0 != 0 goto label1;

        $z1 = r0 instanceof com.mycila.inject.internal.guava.collect.ImmutableMultimap;

        if $z1 == 0 goto label2;

     label1:
        return r0;

     label2:
        $r1 = new com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedMultimap;

        specialinvoke $r1.<com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedMultimap: void <init>(com.mycila.inject.internal.guava.collect.Multimap,java.lang.Object)>(r0, r2);

        return $r1;
    }

    static com.mycila.inject.internal.guava.collect.ListMultimap listMultimap(com.mycila.inject.internal.guava.collect.ListMultimap, java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedListMultimap $r1;
        java.lang.Object r2;
        com.mycila.inject.internal.guava.collect.ListMultimap r0;
        boolean $z0, $z1;

        r0 := @parameter0: com.mycila.inject.internal.guava.collect.ListMultimap;

        r2 := @parameter1: java.lang.Object;

        $z0 = r0 instanceof com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedListMultimap;

        if $z0 != 0 goto label1;

        $z1 = r0 instanceof com.mycila.inject.internal.guava.collect.ImmutableListMultimap;

        if $z1 == 0 goto label2;

     label1:
        return r0;

     label2:
        $r1 = new com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedListMultimap;

        specialinvoke $r1.<com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedListMultimap: void <init>(com.mycila.inject.internal.guava.collect.ListMultimap,java.lang.Object)>(r0, r2);

        return $r1;
    }

    static com.mycila.inject.internal.guava.collect.SetMultimap setMultimap(com.mycila.inject.internal.guava.collect.SetMultimap, java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.SetMultimap r0;
        com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedSetMultimap $r1;
        java.lang.Object r2;
        boolean $z0, $z1;

        r0 := @parameter0: com.mycila.inject.internal.guava.collect.SetMultimap;

        r2 := @parameter1: java.lang.Object;

        $z0 = r0 instanceof com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedSetMultimap;

        if $z0 != 0 goto label1;

        $z1 = r0 instanceof com.mycila.inject.internal.guava.collect.ImmutableSetMultimap;

        if $z1 == 0 goto label2;

     label1:
        return r0;

     label2:
        $r1 = new com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedSetMultimap;

        specialinvoke $r1.<com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedSetMultimap: void <init>(com.mycila.inject.internal.guava.collect.SetMultimap,java.lang.Object)>(r0, r2);

        return $r1;
    }

    static com.mycila.inject.internal.guava.collect.SortedSetMultimap sortedSetMultimap(com.mycila.inject.internal.guava.collect.SortedSetMultimap, java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedSortedSetMultimap $r1;
        java.lang.Object r2;
        com.mycila.inject.internal.guava.collect.SortedSetMultimap r0;
        boolean $z0;

        r0 := @parameter0: com.mycila.inject.internal.guava.collect.SortedSetMultimap;

        r2 := @parameter1: java.lang.Object;

        $z0 = r0 instanceof com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedSortedSetMultimap;

        if $z0 == 0 goto label1;

        return r0;

     label1:
        $r1 = new com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedSortedSetMultimap;

        specialinvoke $r1.<com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedSortedSetMultimap: void <init>(com.mycila.inject.internal.guava.collect.SortedSetMultimap,java.lang.Object)>(r0, r2);

        return $r1;
    }

    private static java.util.Collection typePreservingCollection(java.util.Collection, java.lang.Object)
    {
        java.util.SortedSet $r7, $r8;
        java.util.Collection r0, $r2;
        java.util.Set $r5, $r6;
        java.util.List $r3, $r4;
        java.lang.Object r1;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: java.lang.Object;

        $z0 = r0 instanceof java.util.SortedSet;

        if $z0 == 0 goto label1;

        $r7 = (java.util.SortedSet) r0;

        $r8 = staticinvoke <com.mycila.inject.internal.guava.collect.Synchronized: java.util.SortedSet sortedSet(java.util.SortedSet,java.lang.Object)>($r7, r1);

        return $r8;

     label1:
        $z1 = r0 instanceof java.util.Set;

        if $z1 == 0 goto label2;

        $r5 = (java.util.Set) r0;

        $r6 = staticinvoke <com.mycila.inject.internal.guava.collect.Synchronized: java.util.Set set(java.util.Set,java.lang.Object)>($r5, r1);

        return $r6;

     label2:
        $z2 = r0 instanceof java.util.List;

        if $z2 == 0 goto label3;

        $r3 = (java.util.List) r0;

        $r4 = staticinvoke <com.mycila.inject.internal.guava.collect.Synchronized: java.util.List list(java.util.List,java.lang.Object)>($r3, r1);

        return $r4;

     label3:
        $r2 = staticinvoke <com.mycila.inject.internal.guava.collect.Synchronized: java.util.Collection collection(java.util.Collection,java.lang.Object)>(r0, r1);

        return $r2;
    }

    private static java.util.Set typePreservingSet(java.util.Set, java.lang.Object)
    {
        java.util.SortedSet $r3, $r4;
        java.util.Set r0, $r2;
        java.lang.Object r1;
        boolean $z0;

        r0 := @parameter0: java.util.Set;

        r1 := @parameter1: java.lang.Object;

        $z0 = r0 instanceof java.util.SortedSet;

        if $z0 == 0 goto label1;

        $r3 = (java.util.SortedSet) r0;

        $r4 = staticinvoke <com.mycila.inject.internal.guava.collect.Synchronized: java.util.SortedSet sortedSet(java.util.SortedSet,java.lang.Object)>($r3, r1);

        return $r4;

     label1:
        $r2 = staticinvoke <com.mycila.inject.internal.guava.collect.Synchronized: java.util.Set set(java.util.Set,java.lang.Object)>(r0, r1);

        return $r2;
    }

    static java.util.Map map(java.util.Map, java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedMap $r0;
        java.lang.Object r2;
        java.util.Map r1;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: java.lang.Object;

        $r0 = new com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedMap;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedMap: void <init>(java.util.Map,java.lang.Object)>(r1, r2);

        return $r0;
    }

    static java.util.SortedMap sortedMap(java.util.SortedMap, java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedSortedMap $r0;
        java.lang.Object r2;
        java.util.SortedMap r1;

        r1 := @parameter0: java.util.SortedMap;

        r2 := @parameter1: java.lang.Object;

        $r0 = new com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedSortedMap;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedSortedMap: void <init>(java.util.SortedMap,java.lang.Object)>(r1, r2);

        return $r0;
    }

    static com.mycila.inject.internal.guava.collect.BiMap biMap(com.mycila.inject.internal.guava.collect.BiMap, java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.BiMap r0;
        com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedBiMap $r1;
        java.lang.Object r2;
        boolean $z0, $z1;

        r0 := @parameter0: com.mycila.inject.internal.guava.collect.BiMap;

        r2 := @parameter1: java.lang.Object;

        $z0 = r0 instanceof com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedBiMap;

        if $z0 != 0 goto label1;

        $z1 = r0 instanceof com.mycila.inject.internal.guava.collect.ImmutableBiMap;

        if $z1 == 0 goto label2;

     label1:
        return r0;

     label2:
        $r1 = new com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedBiMap;

        specialinvoke $r1.<com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedBiMap: void <init>(com.mycila.inject.internal.guava.collect.BiMap,java.lang.Object,com.mycila.inject.internal.guava.collect.BiMap,com.mycila.inject.internal.guava.collect.Synchronized$1)>(r0, r2, null, null);

        return $r1;
    }

    static java.util.SortedSet access$100(java.util.SortedSet, java.lang.Object)
    {
        java.lang.Object r1;
        java.util.SortedSet r0, $r2;

        r0 := @parameter0: java.util.SortedSet;

        r1 := @parameter1: java.lang.Object;

        $r2 = staticinvoke <com.mycila.inject.internal.guava.collect.Synchronized: java.util.SortedSet sortedSet(java.util.SortedSet,java.lang.Object)>(r0, r1);

        return $r2;
    }

    static java.util.List access$200(java.util.List, java.lang.Object)
    {
        java.util.List r0, $r2;
        java.lang.Object r1;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.lang.Object;

        $r2 = staticinvoke <com.mycila.inject.internal.guava.collect.Synchronized: java.util.List list(java.util.List,java.lang.Object)>(r0, r1);

        return $r2;
    }

    static java.util.Set access$300(java.util.Set, java.lang.Object)
    {
        java.util.Set r0, $r2;
        java.lang.Object r1;

        r0 := @parameter0: java.util.Set;

        r1 := @parameter1: java.lang.Object;

        $r2 = staticinvoke <com.mycila.inject.internal.guava.collect.Synchronized: java.util.Set typePreservingSet(java.util.Set,java.lang.Object)>(r0, r1);

        return $r2;
    }

    static java.util.Collection access$400(java.util.Collection, java.lang.Object)
    {
        java.lang.Object r1;
        java.util.Collection r0, $r2;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: java.lang.Object;

        $r2 = staticinvoke <com.mycila.inject.internal.guava.collect.Synchronized: java.util.Collection typePreservingCollection(java.util.Collection,java.lang.Object)>(r0, r1);

        return $r2;
    }

    static java.util.Collection access$500(java.util.Collection, java.lang.Object)
    {
        java.lang.Object r1;
        java.util.Collection r0, $r2;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: java.lang.Object;

        $r2 = staticinvoke <com.mycila.inject.internal.guava.collect.Synchronized: java.util.Collection collection(java.util.Collection,java.lang.Object)>(r0, r1);

        return $r2;
    }
}
