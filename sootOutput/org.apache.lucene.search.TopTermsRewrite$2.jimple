final class org.apache.lucene.search.TopTermsRewrite$2 extends java.lang.Object implements java.util.Comparator
{
    static final boolean $assertionsDisabled;

    void <init>()
    {
        org.apache.lucene.search.TopTermsRewrite$2 r0;

        r0 := @this: org.apache.lucene.search.TopTermsRewrite$2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public int compare(org.apache.lucene.search.TopTermsRewrite$ScoreTerm, org.apache.lucene.search.TopTermsRewrite$ScoreTerm)
    {
        org.apache.lucene.util.BytesRef $r2, $r3;
        java.lang.AssertionError $r7;
        org.apache.lucene.search.TopTermsRewrite$ScoreTerm r0, r1;
        int $i0;
        java.util.Comparator $r4, $r5, $r6;
        boolean $z0;
        org.apache.lucene.search.TopTermsRewrite$2 r8;

        r8 := @this: org.apache.lucene.search.TopTermsRewrite$2;

        r0 := @parameter0: org.apache.lucene.search.TopTermsRewrite$ScoreTerm;

        r1 := @parameter1: org.apache.lucene.search.TopTermsRewrite$ScoreTerm;

        $z0 = <org.apache.lucene.search.TopTermsRewrite$2: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r6 = r0.<org.apache.lucene.search.TopTermsRewrite$ScoreTerm: java.util.Comparator termComp>;

        $r5 = r1.<org.apache.lucene.search.TopTermsRewrite$ScoreTerm: java.util.Comparator termComp>;

        if $r6 == $r5 goto label1;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>(java.lang.Object)>("term comparator should not change between segments");

        throw $r7;

     label1:
        $r4 = r0.<org.apache.lucene.search.TopTermsRewrite$ScoreTerm: java.util.Comparator termComp>;

        $r3 = r0.<org.apache.lucene.search.TopTermsRewrite$ScoreTerm: org.apache.lucene.util.BytesRef bytes>;

        $r2 = r1.<org.apache.lucene.search.TopTermsRewrite$ScoreTerm: org.apache.lucene.util.BytesRef bytes>;

        $i0 = interfaceinvoke $r4.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r3, $r2);

        return $i0;
    }

    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        org.apache.lucene.search.TopTermsRewrite$ScoreTerm $r3, $r4;
        int $i0;
        java.lang.Object r1, r2;
        org.apache.lucene.search.TopTermsRewrite$2 r0;

        r0 := @this: org.apache.lucene.search.TopTermsRewrite$2;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (org.apache.lucene.search.TopTermsRewrite$ScoreTerm) r1;

        $r3 = (org.apache.lucene.search.TopTermsRewrite$ScoreTerm) r2;

        $i0 = virtualinvoke r0.<org.apache.lucene.search.TopTermsRewrite$2: int compare(org.apache.lucene.search.TopTermsRewrite$ScoreTerm,org.apache.lucene.search.TopTermsRewrite$ScoreTerm)>($r4, $r3);

        return $i0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/search/TopTermsRewrite;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.search.TopTermsRewrite$2: boolean $assertionsDisabled> = $z1;

        return;
    }
}
