public class org.codehaus.groovy.tools.shell.util.SimpleCompletor extends jline.SimpleCompletor
{
    static final boolean $assertionsDisabled;
    static java.lang.Class class$org$codehaus$groovy$tools$shell$util$SimpleCompletor;

    public void <init>(java.lang.String[])
    {
        org.codehaus.groovy.tools.shell.util.SimpleCompletor r0;
        java.lang.String[] r1;

        r0 := @this: org.codehaus.groovy.tools.shell.util.SimpleCompletor;

        r1 := @parameter0: java.lang.String[];

        specialinvoke r0.<jline.SimpleCompletor: void <init>(java.lang.String[])>(r1);

        return;
    }

    public void <init>()
    {
        org.codehaus.groovy.tools.shell.util.SimpleCompletor r0;
        java.lang.String[] $r1;

        r0 := @this: org.codehaus.groovy.tools.shell.util.SimpleCompletor;

        $r1 = newarray (java.lang.String)[0];

        specialinvoke r0.<org.codehaus.groovy.tools.shell.util.SimpleCompletor: void <init>(java.lang.String[])>($r1);

        return;
    }

    public void <init>(groovy.lang.Closure)
    {
        java.lang.IllegalStateException $r6;
        groovy.lang.Closure r1;
        java.lang.AssertionError $r11;
        java.lang.StringBuffer $r7, $r8, $r9;
        java.lang.String $r5, $r10;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r3;
        org.codehaus.groovy.tools.shell.util.SimpleCompletor r0;
        java.util.List r12;
        java.lang.Object $r2, $r4;

        r0 := @this: org.codehaus.groovy.tools.shell.util.SimpleCompletor;

        r1 := @parameter0: groovy.lang.Closure;

        specialinvoke r0.<org.codehaus.groovy.tools.shell.util.SimpleCompletor: void <init>()>();

        $z0 = <org.codehaus.groovy.tools.shell.util.SimpleCompletor: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r1 != null goto label1;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label1:
        $r2 = virtualinvoke r1.<groovy.lang.Closure: java.lang.Object call()>();

        r12 = null;

        $z1 = $r2 instanceof java.util.List;

        if $z1 == 0 goto label2;

        r12 = (java.util.List) $r2;

     label2:
        if r12 != null goto label3;

        $r6 = new java.lang.IllegalStateException;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The loader closure did not return a list of candicates; found: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label3:
        $r3 = interfaceinvoke r12.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z2 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label5;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4);

        virtualinvoke r0.<org.codehaus.groovy.tools.shell.util.SimpleCompletor: void add(java.lang.String)>($r5);

        goto label4;

     label5:
        return;
    }

    public void add(java.lang.String)
    {
        org.codehaus.groovy.tools.shell.util.SimpleCompletor r0;
        java.lang.String r1;

        r0 := @this: org.codehaus.groovy.tools.shell.util.SimpleCompletor;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.codehaus.groovy.tools.shell.util.SimpleCompletor: void addCandidateString(java.lang.String)>(r1);

        return;
    }

    public java.lang.Object leftShift(java.lang.String)
    {
        org.codehaus.groovy.tools.shell.util.SimpleCompletor r0;
        java.lang.String r1;

        r0 := @this: org.codehaus.groovy.tools.shell.util.SimpleCompletor;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.codehaus.groovy.tools.shell.util.SimpleCompletor: void add(java.lang.String)>(r1);

        return null;
    }

    public int complete(java.lang.String, int, java.util.List)
    {
        java.util.SortedSet $r3, $r4;
        byte $b5;
        java.lang.StringBuffer $r10, $r11, $r17;
        int $i0, $i1, i2, $i3, $i4, $i7;
        java.lang.String r0, r1, $r9, $r12, $r14, $r15, r16;
        boolean $z0, $z1;
        java.util.Iterator $r5;
        org.codehaus.groovy.tools.shell.util.SimpleCompletor r2;
        java.util.List r6;
        java.lang.Object $r8, $r13;

        r2 := @this: org.codehaus.groovy.tools.shell.util.SimpleCompletor;

        r0 := @parameter0: java.lang.String;

        i2 := @parameter1: int;

        r6 := @parameter2: java.util.List;

        if r0 != null goto label1;

        $r15 = "";

        goto label2;

     label1:
        $r15 = r0;

     label2:
        r1 = $r15;

        $r3 = virtualinvoke r2.<org.codehaus.groovy.tools.shell.util.SimpleCompletor: java.util.SortedSet getCandidates()>();

        $r4 = interfaceinvoke $r3.<java.util.SortedSet: java.util.SortedSet tailSet(java.lang.Object)>($r15);

        $r5 = interfaceinvoke $r4.<java.util.SortedSet: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r13 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r16 = (java.lang.String) $r13;

        $z0 = virtualinvoke r16.<java.lang.String: boolean startsWith(java.lang.String)>(r1);

        if $z0 != 0 goto label4;

        goto label6;

     label4:
        $r14 = virtualinvoke r2.<org.codehaus.groovy.tools.shell.util.SimpleCompletor: java.lang.String getDelimiter()>();

        if $r14 == null goto label5;

        $i3 = virtualinvoke r16.<java.lang.String: int indexOf(java.lang.String,int)>($r14, i2);

        $i7 = (int) -1;

        if $i3 == $i7 goto label5;

        $i4 = $i3 + 1;

        r16 = virtualinvoke r16.<java.lang.String: java.lang.String substring(int,int)>(0, $i4);

     label5:
        interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>(r16);

        goto label3;

     label6:
        $i0 = interfaceinvoke r6.<java.util.List: int size()>();

        if $i0 != 1 goto label7;

        $r17 = new java.lang.StringBuffer;

        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        $r8 = interfaceinvoke r6.<java.util.List: java.lang.Object get(int)>(0);

        $r9 = (java.lang.String) $r8;

        $r10 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke r6.<java.util.List: java.lang.Object set(int,java.lang.Object)>(0, $r12);

     label7:
        $i1 = interfaceinvoke r6.<java.util.List: int size()>();

        if $i1 != 0 goto label8;

        $b5 = -1;

        goto label9;

     label8:
        $b5 = 0;

     label9:
        return $b5;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.Class $r0, $r1;
        boolean $z0, $z1;

        $r0 = <org.codehaus.groovy.tools.shell.util.SimpleCompletor: java.lang.Class class$org$codehaus$groovy$tools$shell$util$SimpleCompletor>;

        if $r0 != null goto label1;

        $r1 = staticinvoke <org.codehaus.groovy.tools.shell.util.SimpleCompletor: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.tools.shell.util.SimpleCompletor");

        <org.codehaus.groovy.tools.shell.util.SimpleCompletor: java.lang.Class class$org$codehaus$groovy$tools$shell$util$SimpleCompletor> = $r1;

        goto label2;

     label1:
        $r1 = <org.codehaus.groovy.tools.shell.util.SimpleCompletor: java.lang.Class class$org$codehaus$groovy$tools$shell$util$SimpleCompletor>;

     label2:
        $z0 = virtualinvoke $r1.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        <org.codehaus.groovy.tools.shell.util.SimpleCompletor: boolean $assertionsDisabled> = $z1;

        return;
    }
}
