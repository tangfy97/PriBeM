public class org.apache.lucene.search.spans.SpanNearPayloadCheckQuery extends org.apache.lucene.search.spans.SpanPositionCheckQuery
{
    protected final java.util.Collection payloadToMatch;

    public void <init>(org.apache.lucene.search.spans.SpanNearQuery, java.util.Collection)
    {
        org.apache.lucene.search.spans.SpanNearQuery r1;
        org.apache.lucene.search.spans.SpanNearPayloadCheckQuery r0;
        java.util.Collection r2;

        r0 := @this: org.apache.lucene.search.spans.SpanNearPayloadCheckQuery;

        r1 := @parameter0: org.apache.lucene.search.spans.SpanNearQuery;

        r2 := @parameter1: java.util.Collection;

        specialinvoke r0.<org.apache.lucene.search.spans.SpanPositionCheckQuery: void <init>(org.apache.lucene.search.spans.SpanQuery)>(r1);

        r0.<org.apache.lucene.search.spans.SpanNearPayloadCheckQuery: java.util.Collection payloadToMatch> = r2;

        return;
    }

    protected org.apache.lucene.search.spans.SpanPositionCheckQuery$AcceptStatus acceptPosition(org.apache.lucene.search.spans.Spans) throws java.io.IOException
    {
        byte[] r11, r15;
        org.apache.lucene.search.spans.SpanNearPayloadCheckQuery r3;
        int $i0, $i1, $i2, i3;
        boolean $z0, $z1, $z2, $z3;
        java.util.Iterator $r6, $r13;
        java.util.Collection $r2, $r4, $r7, $r12;
        org.apache.lucene.search.spans.SpanPositionCheckQuery$AcceptStatus $r1, $r5, $r8, $r9;
        java.lang.Object $r10, $r14;
        org.apache.lucene.search.spans.Spans r0;

        r3 := @this: org.apache.lucene.search.spans.SpanNearPayloadCheckQuery;

        r0 := @parameter0: org.apache.lucene.search.spans.Spans;

        $z0 = virtualinvoke r0.<org.apache.lucene.search.spans.Spans: boolean isPayloadAvailable()>();

        if $z0 != 1 goto label8;

        $r2 = virtualinvoke r0.<org.apache.lucene.search.spans.Spans: java.util.Collection getPayload()>();

        $i0 = interfaceinvoke $r2.<java.util.Collection: int size()>();

        $r4 = r3.<org.apache.lucene.search.spans.SpanNearPayloadCheckQuery: java.util.Collection payloadToMatch>;

        $i1 = interfaceinvoke $r4.<java.util.Collection: int size()>();

        if $i0 != $i1 goto label7;

        i3 = 0;

        $r6 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r10 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r11 = (byte[]) $r10;

        $r12 = r3.<org.apache.lucene.search.spans.SpanNearPayloadCheckQuery: java.util.Collection payloadToMatch>;

        $r13 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z2 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label4;

        $r14 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r15 = (byte[]) $r14;

        $z3 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r11, r15);

        if $z3 != 1 goto label3;

        i3 = i3 + 1;

        goto label4;

     label3:
        goto label2;

     label4:
        goto label1;

     label5:
        $r7 = r3.<org.apache.lucene.search.spans.SpanNearPayloadCheckQuery: java.util.Collection payloadToMatch>;

        $i2 = interfaceinvoke $r7.<java.util.Collection: int size()>();

        if i3 != $i2 goto label6;

        $r9 = <org.apache.lucene.search.spans.SpanPositionCheckQuery$AcceptStatus: org.apache.lucene.search.spans.SpanPositionCheckQuery$AcceptStatus YES>;

        return $r9;

     label6:
        $r8 = <org.apache.lucene.search.spans.SpanPositionCheckQuery$AcceptStatus: org.apache.lucene.search.spans.SpanPositionCheckQuery$AcceptStatus NO>;

        return $r8;

     label7:
        $r5 = <org.apache.lucene.search.spans.SpanPositionCheckQuery$AcceptStatus: org.apache.lucene.search.spans.SpanPositionCheckQuery$AcceptStatus NO>;

        return $r5;

     label8:
        $r1 = <org.apache.lucene.search.spans.SpanPositionCheckQuery$AcceptStatus: org.apache.lucene.search.spans.SpanPositionCheckQuery$AcceptStatus NO>;

        return $r1;
    }

    public java.lang.String toString(java.lang.String)
    {
        byte[] r10;
        java.util.Iterator $r6;
        java.util.Collection $r5;
        org.apache.lucene.search.spans.SpanNearPayloadCheckQuery r1;
        float $f0;
        java.lang.StringBuilder $r0;
        java.lang.Object $r9;
        java.lang.String r2, $r4, $r7, $r8;
        org.apache.lucene.search.spans.SpanQuery $r3;
        boolean $z0;

        r1 := @this: org.apache.lucene.search.spans.SpanNearPayloadCheckQuery;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("spanPayCheck(");

        $r3 = r1.<org.apache.lucene.search.spans.SpanNearPayloadCheckQuery: org.apache.lucene.search.spans.SpanQuery match>;

        $r4 = virtualinvoke $r3.<org.apache.lucene.search.spans.SpanQuery: java.lang.String toString(java.lang.String)>(r2);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", payloadRef: ");

        $r5 = r1.<org.apache.lucene.search.spans.SpanNearPayloadCheckQuery: java.util.Collection payloadToMatch>;

        $r6 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r9 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r10 = (byte[]) $r9;

        staticinvoke <org.apache.lucene.util.ToStringUtils: void byteArray(java.lang.StringBuilder,byte[])>($r0, r10);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(59);

        goto label1;

     label2:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $f0 = virtualinvoke r1.<org.apache.lucene.search.spans.SpanNearPayloadCheckQuery: float getBoost()>();

        $r7 = staticinvoke <org.apache.lucene.util.ToStringUtils: java.lang.String boost(float)>($f0);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r8 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public org.apache.lucene.search.spans.SpanNearPayloadCheckQuery clone()
    {
        org.apache.lucene.search.Query $r3;
        org.apache.lucene.search.spans.SpanNearQuery $r5;
        java.util.Collection $r4;
        org.apache.lucene.search.spans.SpanNearPayloadCheckQuery $r0, r1;
        float $f0;
        org.apache.lucene.search.spans.SpanQuery $r2;

        r1 := @this: org.apache.lucene.search.spans.SpanNearPayloadCheckQuery;

        $r0 = new org.apache.lucene.search.spans.SpanNearPayloadCheckQuery;

        $r2 = r1.<org.apache.lucene.search.spans.SpanNearPayloadCheckQuery: org.apache.lucene.search.spans.SpanQuery match>;

        $r3 = virtualinvoke $r2.<org.apache.lucene.search.spans.SpanQuery: org.apache.lucene.search.Query clone()>();

        $r5 = (org.apache.lucene.search.spans.SpanNearQuery) $r3;

        $r4 = r1.<org.apache.lucene.search.spans.SpanNearPayloadCheckQuery: java.util.Collection payloadToMatch>;

        specialinvoke $r0.<org.apache.lucene.search.spans.SpanNearPayloadCheckQuery: void <init>(org.apache.lucene.search.spans.SpanNearQuery,java.util.Collection)>($r5, $r4);

        $f0 = virtualinvoke r1.<org.apache.lucene.search.spans.SpanNearPayloadCheckQuery: float getBoost()>();

        virtualinvoke $r0.<org.apache.lucene.search.spans.SpanNearPayloadCheckQuery: void setBoost(float)>($f0);

        return $r0;
    }

    public boolean equals(java.lang.Object)
    {
        java.util.Collection $r3, $r4;
        org.apache.lucene.search.spans.SpanNearPayloadCheckQuery r0, r2;
        byte $b0;
        float $f0, $f1;
        java.lang.Object r1;
        org.apache.lucene.search.spans.SpanQuery $r5, $r6;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.apache.lucene.search.spans.SpanNearPayloadCheckQuery;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.apache.lucene.search.spans.SpanNearPayloadCheckQuery;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (org.apache.lucene.search.spans.SpanNearPayloadCheckQuery) r1;

        $r4 = r0.<org.apache.lucene.search.spans.SpanNearPayloadCheckQuery: java.util.Collection payloadToMatch>;

        $r3 = r2.<org.apache.lucene.search.spans.SpanNearPayloadCheckQuery: java.util.Collection payloadToMatch>;

        $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label3;

        $r6 = r0.<org.apache.lucene.search.spans.SpanNearPayloadCheckQuery: org.apache.lucene.search.spans.SpanQuery match>;

        $r5 = r2.<org.apache.lucene.search.spans.SpanNearPayloadCheckQuery: org.apache.lucene.search.spans.SpanQuery match>;

        $z2 = virtualinvoke $r6.<org.apache.lucene.search.spans.SpanQuery: boolean equals(java.lang.Object)>($r5);

        if $z2 == 0 goto label3;

        $f0 = virtualinvoke r0.<org.apache.lucene.search.spans.SpanNearPayloadCheckQuery: float getBoost()>();

        $f1 = virtualinvoke r2.<org.apache.lucene.search.spans.SpanNearPayloadCheckQuery: float getBoost()>();

        $b0 = $f0 cmpl $f1;

        if $b0 != 0 goto label3;

        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        return $z3;
    }

    public int hashCode()
    {
        java.util.Collection $r2;
        org.apache.lucene.search.spans.SpanNearPayloadCheckQuery r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7, i8;
        float $f0;
        org.apache.lucene.search.spans.SpanQuery $r1;

        r0 := @this: org.apache.lucene.search.spans.SpanNearPayloadCheckQuery;

        $r1 = r0.<org.apache.lucene.search.spans.SpanNearPayloadCheckQuery: org.apache.lucene.search.spans.SpanQuery match>;

        $i0 = virtualinvoke $r1.<org.apache.lucene.search.spans.SpanQuery: int hashCode()>();

        $i2 = $i0 << 8;

        $i1 = $i0 >>> 25;

        $i3 = $i2 | $i1;

        i6 = $i0 ^ $i3;

        $r2 = r0.<org.apache.lucene.search.spans.SpanNearPayloadCheckQuery: java.util.Collection payloadToMatch>;

        $i4 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        i7 = i6 ^ $i4;

        $f0 = virtualinvoke r0.<org.apache.lucene.search.spans.SpanNearPayloadCheckQuery: float getBoost()>();

        $i5 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>($f0);

        i8 = i7 ^ $i5;

        return i8;
    }

    public volatile org.apache.lucene.search.Query clone()
    {
        org.apache.lucene.search.spans.SpanNearPayloadCheckQuery r0, $r1;

        r0 := @this: org.apache.lucene.search.spans.SpanNearPayloadCheckQuery;

        $r1 = virtualinvoke r0.<org.apache.lucene.search.spans.SpanNearPayloadCheckQuery: org.apache.lucene.search.spans.SpanNearPayloadCheckQuery clone()>();

        return $r1;
    }

    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.apache.lucene.search.spans.SpanNearPayloadCheckQuery r0, $r1;

        r0 := @this: org.apache.lucene.search.spans.SpanNearPayloadCheckQuery;

        $r1 = virtualinvoke r0.<org.apache.lucene.search.spans.SpanNearPayloadCheckQuery: org.apache.lucene.search.spans.SpanNearPayloadCheckQuery clone()>();

        return $r1;
    }
}
