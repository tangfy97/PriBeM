public class org.apache.xmlbeans.impl.tool.SchemaCodeGenerator extends java.lang.Object
{
    private static java.util.Set deleteFileQueue;
    private static int triesRemaining;
    static final boolean $assertionsDisabled;
    static java.lang.Class class$org$apache$xmlbeans$impl$tool$SchemaCodeGenerator;

    public void <init>()
    {
        org.apache.xmlbeans.impl.tool.SchemaCodeGenerator r0;

        r0 := @this: org.apache.xmlbeans.impl.tool.SchemaCodeGenerator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void saveTypeSystem(org.apache.xmlbeans.SchemaTypeSystem, java.io.File, java.io.File, repackage.Repackager, org.apache.xmlbeans.XmlOptions) throws java.io.IOException
    {
        org.apache.xmlbeans.impl.util.FilerImpl $r0;
        repackage.Repackager r2;
        org.apache.xmlbeans.SchemaTypeSystem r3;
        org.apache.xmlbeans.XmlOptions r5;
        java.io.File r1, r4;

        r3 := @parameter0: org.apache.xmlbeans.SchemaTypeSystem;

        r1 := @parameter1: java.io.File;

        r4 := @parameter2: java.io.File;

        r2 := @parameter3: repackage.Repackager;

        r5 := @parameter4: org.apache.xmlbeans.XmlOptions;

        $r0 = new org.apache.xmlbeans.impl.util.FilerImpl;

        specialinvoke $r0.<org.apache.xmlbeans.impl.util.FilerImpl: void <init>(java.io.File,java.io.File,repackage.Repackager,boolean,boolean)>(r1, null, r2, 0, 0);

        interfaceinvoke r3.<org.apache.xmlbeans.SchemaTypeSystem: void save(org.apache.xmlbeans.Filer)>($r0);

        return;
    }

    static void deleteObsoleteFiles(java.io.File, java.io.File, java.util.Set)
    {
        int $i0, $i1, $i2, $i3, $i4, i5, $i6;
        java.lang.String $r3;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.Set r6;
        java.lang.IllegalArgumentException $r1;
        java.io.File r0, r2, $r5, $r7, $r8, $r9, $r10, $r11;
        java.io.File[] $r4;

        r0 := @parameter0: java.io.File;

        r2 := @parameter1: java.io.File;

        r6 := @parameter2: java.util.Set;

        $z0 = virtualinvoke r0.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label01;

        $z1 = virtualinvoke r2.<java.io.File: boolean isDirectory()>();

        if $z1 != 0 goto label02;

     label01:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r1;

     label02:
        $r3 = virtualinvoke r2.<java.io.File: java.lang.String getAbsolutePath()>();

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i0 > 5 goto label03;

        return;

     label03:
        $z2 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>("/home/");

        if $z2 == 0 goto label05;

        $i1 = virtualinvoke $r3.<java.lang.String: int indexOf(java.lang.String,int)>("/", 6);

        $i2 = virtualinvoke $r3.<java.lang.String: int length()>();

        $i3 = $i2 - 1;

        if $i1 >= $i3 goto label04;

        $i4 = virtualinvoke $r3.<java.lang.String: int indexOf(java.lang.String,int)>("/", 6);

        if $i4 >= 0 goto label05;

     label04:
        return;

     label05:
        $r4 = virtualinvoke r2.<java.io.File: java.io.File[] listFiles()>();

        i5 = 0;

     label06:
        $i6 = lengthof $r4;

        if i5 >= $i6 goto label10;

        $r5 = $r4[i5];

        $z3 = virtualinvoke $r5.<java.io.File: boolean isDirectory()>();

        if $z3 == 0 goto label07;

        $r11 = $r4[i5];

        staticinvoke <org.apache.xmlbeans.impl.tool.SchemaCodeGenerator: void deleteObsoleteFiles(java.io.File,java.io.File,java.util.Set)>(r0, $r11, r6);

        goto label09;

     label07:
        $r7 = $r4[i5];

        $z4 = interfaceinvoke r6.<java.util.Set: boolean contains(java.lang.Object)>($r7);

        if $z4 == 0 goto label08;

        goto label09;

     label08:
        $r8 = $r4[i5];

        staticinvoke <org.apache.xmlbeans.impl.tool.SchemaCodeGenerator: void deleteXmlBeansFile(java.io.File)>($r8);

        $r9 = $r4[i5];

        $r10 = virtualinvoke $r9.<java.io.File: java.io.File getParentFile()>();

        staticinvoke <org.apache.xmlbeans.impl.tool.SchemaCodeGenerator: void deleteDirRecursively(java.io.File,java.io.File)>(r0, $r10);

     label09:
        i5 = i5 + 1;

        goto label06;

     label10:
        return;
    }

    private static void deleteXmlBeansFile(java.io.File)
    {
        java.lang.String $r1;
        java.io.File r0;
        boolean $z0;

        r0 := @parameter0: java.io.File;

        $r1 = virtualinvoke r0.<java.io.File: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean endsWith(java.lang.String)>(".java");

        if $z0 == 0 goto label1;

        virtualinvoke r0.<java.io.File: boolean delete()>();

     label1:
        return;
    }

    private static void deleteDirRecursively(java.io.File, java.io.File)
    {
        int $i0;
        java.lang.String[] r3;
        java.io.File r0, $r1, r2;
        boolean $z0;

        r0 := @parameter0: java.io.File;

        r2 := @parameter1: java.io.File;

        r3 = virtualinvoke r2.<java.io.File: java.lang.String[] list()>();

     label1:
        if r3 == null goto label2;

        $i0 = lengthof r3;

        if $i0 != 0 goto label2;

        $z0 = virtualinvoke r2.<java.io.File: boolean equals(java.lang.Object)>(r0);

        if $z0 != 0 goto label2;

        virtualinvoke r2.<java.io.File: boolean delete()>();

        $r1 = virtualinvoke r2.<java.io.File: java.io.File getParentFile()>();

        r2 = $r1;

        r3 = virtualinvoke $r1.<java.io.File: java.lang.String[] list()>();

        goto label1;

     label2:
        return;
    }

    protected static java.io.File createTempDir() throws java.io.IOException
    {
        java.lang.AssertionError $r11;
        java.lang.StringBuffer $r5, $r6, $r7, $r8, $r12, $r13, $r15;
        int $i0, $i1, $i2, i3;
        java.lang.String $r1, $r3, $r4, $r9, $r14, $r16, $r20;
        boolean $z0, $z1, $z2, $z3;
        java.io.IOException $r17;
        java.io.File $r0, $r2, $r10, r19;
        java.lang.Exception $r18;

     label01:
        $r0 = new java.io.File;

        $r1 = staticinvoke <org.apache.xmlbeans.SystemProperties: java.lang.String getProperty(java.lang.String)>("java.io.tmpdir");

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>($r1);

        virtualinvoke $r0.<java.io.File: boolean mkdirs()>();

     label02:
        goto label04;

     label03:
        $r18 := @caughtexception;

        virtualinvoke $r18.<java.lang.Exception: void printStackTrace()>();

     label04:
        $r2 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String)>("xbean", null);

        $r3 = virtualinvoke $r2.<java.io.File: java.lang.String getAbsolutePath()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean endsWith(java.lang.String)>(".tmp");

        if $z0 != 0 goto label05;

        $r17 = new java.io.IOException;

        specialinvoke $r17.<java.io.IOException: void <init>(java.lang.String)>("Error: createTempFile did not create a file ending with .tmp");

        throw $r17;

     label05:
        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        $i1 = $i0 - 4;

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        r19 = null;

        i3 = 0;

     label06:
        if i3 >= 100 goto label10;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".d");

        if i3 != 0 goto label07;

        $r20 = "";

        goto label08;

     label07:
        $i2 = i3;

        i3 = i3 + 1;

        $r20 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i2);

     label08:
        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        $r10 = new java.io.File;

        specialinvoke $r10.<java.io.File: void <init>(java.lang.String)>($r9);

        r19 = $r10;

        $z1 = virtualinvoke $r10.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label09;

        $z2 = virtualinvoke $r10.<java.io.File: boolean mkdirs()>();

        $z3 = <org.apache.xmlbeans.impl.tool.SchemaCodeGenerator: boolean $assertionsDisabled>;

        if $z3 != 0 goto label10;

        if $z2 != 0 goto label10;

        $r11 = new java.lang.AssertionError;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Could not create ");

        $r14 = virtualinvoke $r10.<java.io.File: java.lang.String getAbsolutePath()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.AssertionError: void <init>(java.lang.Object)>($r16);

        throw $r11;

     label09:
        i3 = i3 + 1;

        goto label06;

     label10:
        virtualinvoke $r2.<java.io.File: void deleteOnExit()>();

        return r19;

        catch java.lang.Exception from label01 to label02 with label03;
    }

    protected static void tryHardToDelete(java.io.File)
    {
        java.io.File r0;
        boolean $z0;

        r0 := @parameter0: java.io.File;

        staticinvoke <org.apache.xmlbeans.impl.tool.SchemaCodeGenerator: void tryToDelete(java.io.File)>(r0);

        $z0 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label1;

        staticinvoke <org.apache.xmlbeans.impl.tool.SchemaCodeGenerator: void tryToDeleteLater(java.io.File)>(r0);

     label1:
        return;
    }

    private static void tryToDelete(java.io.File)
    {
        java.lang.String[] $r1;
        java.io.File r0, $r2;
        int $i0, i1;
        java.lang.String $r3;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label3;

        $z1 = virtualinvoke r0.<java.io.File: boolean isDirectory()>();

        if $z1 == 0 goto label2;

        $r1 = virtualinvoke r0.<java.io.File: java.lang.String[] list()>();

        if $r1 == null goto label2;

        i1 = 0;

     label1:
        $i0 = lengthof $r1;

        if i1 >= $i0 goto label2;

        $r2 = new java.io.File;

        $r3 = $r1[i1];

        specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>(r0, $r3);

        staticinvoke <org.apache.xmlbeans.impl.tool.SchemaCodeGenerator: void tryToDelete(java.io.File)>($r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        $z2 = virtualinvoke r0.<java.io.File: boolean delete()>();

        if $z2 != 0 goto label3;

        return;

     label3:
        return;
    }

    private static boolean tryNowThatItsLater()
    {
        java.lang.Throwable $r10, $r11;
        java.util.ArrayList $r1, $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r5;
        java.util.Set $r0, $r2, $r3, $r6, $r7;
        java.io.File r9;
        java.lang.Object $r8;

        $r0 = <org.apache.xmlbeans.impl.tool.SchemaCodeGenerator: java.util.Set deleteFileQueue>;

        entermonitor $r0;

     label01:
        $r1 = new java.util.ArrayList;

        $r2 = <org.apache.xmlbeans.impl.tool.SchemaCodeGenerator: java.util.Set deleteFileQueue>;

        specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

        $r3 = <org.apache.xmlbeans.impl.tool.SchemaCodeGenerator: java.util.Set deleteFileQueue>;

        interfaceinvoke $r3.<java.util.Set: void clear()>();

        exitmonitor $r0;

     label02:
        goto label05;

     label03:
        $r11 := @caughtexception;

        exitmonitor $r0;

     label04:
        throw $r11;

     label05:
        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $r5 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label06:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label08;

        $r8 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r9 = (java.io.File) $r8;

        staticinvoke <org.apache.xmlbeans.impl.tool.SchemaCodeGenerator: void tryToDelete(java.io.File)>(r9);

        $z1 = virtualinvoke r9.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label07;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r9);

     label07:
        goto label06;

     label08:
        $r6 = <org.apache.xmlbeans.impl.tool.SchemaCodeGenerator: java.util.Set deleteFileQueue>;

        entermonitor $r6;

     label09:
        $i0 = <org.apache.xmlbeans.impl.tool.SchemaCodeGenerator: int triesRemaining>;

        if $i0 <= 0 goto label10;

        $i4 = <org.apache.xmlbeans.impl.tool.SchemaCodeGenerator: int triesRemaining>;

        $i5 = $i4 - 1;

        <org.apache.xmlbeans.impl.tool.SchemaCodeGenerator: int triesRemaining> = $i5;

     label10:
        $i1 = <org.apache.xmlbeans.impl.tool.SchemaCodeGenerator: int triesRemaining>;

        if $i1 <= 0 goto label11;

        $i3 = interfaceinvoke $r4.<java.util.List: int size()>();

        if $i3 != 0 goto label12;

     label11:
        <org.apache.xmlbeans.impl.tool.SchemaCodeGenerator: int triesRemaining> = 0;

        goto label13;

     label12:
        $r7 = <org.apache.xmlbeans.impl.tool.SchemaCodeGenerator: java.util.Set deleteFileQueue>;

        interfaceinvoke $r7.<java.util.Set: boolean addAll(java.util.Collection)>($r4);

     label13:
        $i2 = <org.apache.xmlbeans.impl.tool.SchemaCodeGenerator: int triesRemaining>;

        if $i2 > 0 goto label14;

        $z2 = 1;

        goto label15;

     label14:
        $z2 = 0;

     label15:
        exitmonitor $r6;

     label16:
        return $z2;

     label17:
        $r10 := @caughtexception;

        exitmonitor $r6;

     label18:
        throw $r10;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label03 to label04 with label03;
        catch java.lang.Throwable from label09 to label16 with label17;
        catch java.lang.Throwable from label17 to label18 with label17;
    }

    private static void giveUp()
    {
        java.lang.Throwable $r2;
        java.util.Set $r0, $r1;

        $r0 = <org.apache.xmlbeans.impl.tool.SchemaCodeGenerator: java.util.Set deleteFileQueue>;

        entermonitor $r0;

     label1:
        $r1 = <org.apache.xmlbeans.impl.tool.SchemaCodeGenerator: java.util.Set deleteFileQueue>;

        interfaceinvoke $r1.<java.util.Set: void clear()>();

        <org.apache.xmlbeans.impl.tool.SchemaCodeGenerator: int triesRemaining> = 0;

        exitmonitor $r0;

     label2:
        goto label5;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r0;

     label4:
        throw $r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private static void tryToDeleteLater(java.io.File)
    {
        java.lang.Throwable $r4;
        int $i0, $i1;
        java.util.Set $r0, $r2;
        org.apache.xmlbeans.impl.tool.SchemaCodeGenerator$1 $r3;
        java.io.File r1;

        r1 := @parameter0: java.io.File;

        $r0 = <org.apache.xmlbeans.impl.tool.SchemaCodeGenerator: java.util.Set deleteFileQueue>;

        entermonitor $r0;

     label1:
        $r2 = <org.apache.xmlbeans.impl.tool.SchemaCodeGenerator: java.util.Set deleteFileQueue>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1);

        $i0 = <org.apache.xmlbeans.impl.tool.SchemaCodeGenerator: int triesRemaining>;

        if $i0 != 0 goto label2;

        $r3 = new org.apache.xmlbeans.impl.tool.SchemaCodeGenerator$1;

        specialinvoke $r3.<org.apache.xmlbeans.impl.tool.SchemaCodeGenerator$1: void <init>()>();

     label2:
        $i1 = <org.apache.xmlbeans.impl.tool.SchemaCodeGenerator: int triesRemaining>;

        if $i1 >= 10 goto label3;

        <org.apache.xmlbeans.impl.tool.SchemaCodeGenerator: int triesRemaining> = 10;

     label3:
        exitmonitor $r0;

     label4:
        goto label7;

     label5:
        $r4 := @caughtexception;

        exitmonitor $r0;

     label6:
        throw $r4;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static boolean access$000()
    {
        boolean $z0;

        $z0 = staticinvoke <org.apache.xmlbeans.impl.tool.SchemaCodeGenerator: boolean tryNowThatItsLater()>();

        return $z0;
    }

    static void access$100()
    {
        staticinvoke <org.apache.xmlbeans.impl.tool.SchemaCodeGenerator: void giveUp()>();

        return;
    }

    static void <clinit>()
    {
        java.util.HashSet $r1;
        java.lang.Class $r0, $r2;
        boolean $z0, $z1;

        $r0 = <org.apache.xmlbeans.impl.tool.SchemaCodeGenerator: java.lang.Class class$org$apache$xmlbeans$impl$tool$SchemaCodeGenerator>;

        if $r0 != null goto label1;

        $r2 = staticinvoke <org.apache.xmlbeans.impl.tool.SchemaCodeGenerator: java.lang.Class class$(java.lang.String)>("org.apache.xmlbeans.impl.tool.SchemaCodeGenerator");

        <org.apache.xmlbeans.impl.tool.SchemaCodeGenerator: java.lang.Class class$org$apache$xmlbeans$impl$tool$SchemaCodeGenerator> = $r2;

        goto label2;

     label1:
        $r2 = <org.apache.xmlbeans.impl.tool.SchemaCodeGenerator: java.lang.Class class$org$apache$xmlbeans$impl$tool$SchemaCodeGenerator>;

     label2:
        $z0 = virtualinvoke $r2.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        <org.apache.xmlbeans.impl.tool.SchemaCodeGenerator: boolean $assertionsDisabled> = $z1;

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        <org.apache.xmlbeans.impl.tool.SchemaCodeGenerator: java.util.Set deleteFileQueue> = $r1;

        <org.apache.xmlbeans.impl.tool.SchemaCodeGenerator: int triesRemaining> = 0;

        return;
    }
}
