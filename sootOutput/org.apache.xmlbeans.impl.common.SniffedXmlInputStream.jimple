public class org.apache.xmlbeans.impl.common.SniffedXmlInputStream extends java.io.BufferedInputStream
{
    public static int MAX_SNIFFED_BYTES;
    private static java.nio.charset.Charset dummy1;
    private static java.nio.charset.Charset dummy2;
    private static java.nio.charset.Charset dummy3;
    private static java.nio.charset.Charset dummy4;
    private static java.nio.charset.Charset dummy5;
    private static java.nio.charset.Charset dummy6;
    private static java.nio.charset.Charset dummy7;
    private java.lang.String _encoding;
    private static char[] WHITESPACE;
    private static char[] NOTNAME;
    static final boolean $assertionsDisabled;
    static java.lang.Class class$org$apache$xmlbeans$impl$common$SniffedXmlInputStream;

    public void <init>(java.io.InputStream) throws java.io.IOException
    {
        org.apache.xmlbeans.impl.common.SniffedXmlInputStream r0;
        java.lang.String $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        java.io.InputStream r1;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.common.SniffedXmlInputStream;

        r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>(r1);

        $r2 = specialinvoke r0.<org.apache.xmlbeans.impl.common.SniffedXmlInputStream: java.lang.String sniffFourBytes()>();

        r0.<org.apache.xmlbeans.impl.common.SniffedXmlInputStream: java.lang.String _encoding> = $r2;

        $r3 = r0.<org.apache.xmlbeans.impl.common.SniffedXmlInputStream: java.lang.String _encoding>;

        if $r3 == null goto label1;

        $r6 = r0.<org.apache.xmlbeans.impl.common.SniffedXmlInputStream: java.lang.String _encoding>;

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("IBM037");

        if $z0 == 0 goto label1;

        $r7 = r0.<org.apache.xmlbeans.impl.common.SniffedXmlInputStream: java.lang.String _encoding>;

        $r8 = specialinvoke r0.<org.apache.xmlbeans.impl.common.SniffedXmlInputStream: java.lang.String sniffForXmlDecl(java.lang.String)>($r7);

        if $r8 == null goto label1;

        r0.<org.apache.xmlbeans.impl.common.SniffedXmlInputStream: java.lang.String _encoding> = $r8;

     label1:
        $r9 = r0.<org.apache.xmlbeans.impl.common.SniffedXmlInputStream: java.lang.String _encoding>;

        if $r9 != null goto label2;

        $r5 = specialinvoke r0.<org.apache.xmlbeans.impl.common.SniffedXmlInputStream: java.lang.String sniffForXmlDecl(java.lang.String)>("UTF-8");

        r0.<org.apache.xmlbeans.impl.common.SniffedXmlInputStream: java.lang.String _encoding> = $r5;

     label2:
        $r4 = r0.<org.apache.xmlbeans.impl.common.SniffedXmlInputStream: java.lang.String _encoding>;

        if $r4 != null goto label3;

        r0.<org.apache.xmlbeans.impl.common.SniffedXmlInputStream: java.lang.String _encoding> = "UTF-8";

     label3:
        return;
    }

    private int readAsMuchAsPossible(byte[], int, int) throws java.io.IOException
    {
        byte[] r1;
        org.apache.xmlbeans.impl.common.SniffedXmlInputStream r0;
        int i0, i1, $i2, $i3, $i4, i5;

        r0 := @this: org.apache.xmlbeans.impl.common.SniffedXmlInputStream;

        r1 := @parameter0: byte[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        i5 = 0;

     label1:
        if i5 >= i0 goto label3;

        $i3 = i1 + i5;

        $i2 = i0 - i5;

        $i4 = virtualinvoke r0.<org.apache.xmlbeans.impl.common.SniffedXmlInputStream: int read(byte[],int,int)>(r1, $i3, $i2);

        if $i4 >= 0 goto label2;

        goto label3;

     label2:
        i5 = i5 + $i4;

        goto label1;

     label3:
        return i5;
    }

    private java.lang.String sniffFourBytes() throws java.io.IOException
    {
        byte[] r1;
        byte $b1, $b3, $b7, $b11, $b15, $b16, $b17, $b18, $b19, $b20, $b21, $b22, $b24, $b26, $b28;
        org.apache.xmlbeans.impl.common.SniffedXmlInputStream r0;
        java.lang.Throwable $r2;
        long $l23, $l25, $l27, l29;
        short $s12, $s35;
        int $i0, $i2, $i4, $i5, $i6, $i8, $i9, $i10, $i13, $i14, $i30, $i31, $i32, $i34, $i36;

        r0 := @this: org.apache.xmlbeans.impl.common.SniffedXmlInputStream;

        virtualinvoke r0.<org.apache.xmlbeans.impl.common.SniffedXmlInputStream: void mark(int)>(4);

     label01:
        r1 = newarray (byte)[4];

        $i0 = specialinvoke r0.<org.apache.xmlbeans.impl.common.SniffedXmlInputStream: int readAsMuchAsPossible(byte[],int,int)>(r1, 0, 4);

        if $i0 >= 4 goto label03;

     label02:
        virtualinvoke r0.<org.apache.xmlbeans.impl.common.SniffedXmlInputStream: void reset()>();

        return null;

     label03:
        $b1 = r1[0];

        $i30 = (int) $b1;

        $i2 = $i30 << 24;

        $i6 = -16777216 & $i2;

        $b3 = r1[1];

        $i31 = (int) $b3;

        $i4 = $i31 << 16;

        $i5 = 16711680 & $i4;

        $i10 = $i6 | $i5;

        $b7 = r1[2];

        $i32 = (int) $b7;

        $i8 = $i32 << 8;

        $i34 = (int) 65280;

        $i9 = $i34 & $i8;

        $i13 = $i10 | $i9;

        $b11 = r1[3];

        $s35 = (short) $b11;

        $s12 = 255 & $s35;

        $i36 = (int) $s12;

        $i14 = $i13 | $i36;

        l29 = (long) $i14;

        $b15 = l29 cmp 65279L;

        if $b15 != 0 goto label05;

     label04:
        virtualinvoke r0.<org.apache.xmlbeans.impl.common.SniffedXmlInputStream: void reset()>();

        return "UCS-4";

     label05:
        $b16 = l29 cmp -131072L;

        if $b16 != 0 goto label07;

     label06:
        virtualinvoke r0.<org.apache.xmlbeans.impl.common.SniffedXmlInputStream: void reset()>();

        return "UCS-4";

     label07:
        $b17 = l29 cmp 60L;

        if $b17 != 0 goto label09;

     label08:
        virtualinvoke r0.<org.apache.xmlbeans.impl.common.SniffedXmlInputStream: void reset()>();

        return "UCS-4BE";

     label09:
        $b18 = l29 cmp 1006632960L;

        if $b18 != 0 goto label11;

     label10:
        virtualinvoke r0.<org.apache.xmlbeans.impl.common.SniffedXmlInputStream: void reset()>();

        return "UCS-4LE";

     label11:
        $b19 = l29 cmp 3932223L;

        if $b19 != 0 goto label13;

     label12:
        virtualinvoke r0.<org.apache.xmlbeans.impl.common.SniffedXmlInputStream: void reset()>();

        return "UTF-16BE";

     label13:
        $b20 = l29 cmp 1006649088L;

        if $b20 != 0 goto label15;

     label14:
        virtualinvoke r0.<org.apache.xmlbeans.impl.common.SniffedXmlInputStream: void reset()>();

        return "UTF-16LE";

     label15:
        $b21 = l29 cmp 1010792557L;

        if $b21 != 0 goto label17;

     label16:
        virtualinvoke r0.<org.apache.xmlbeans.impl.common.SniffedXmlInputStream: void reset()>();

        return null;

     label17:
        $b22 = l29 cmp 1282385812L;

        if $b22 != 0 goto label19;

     label18:
        virtualinvoke r0.<org.apache.xmlbeans.impl.common.SniffedXmlInputStream: void reset()>();

        return "IBM037";

     label19:
        $l23 = l29 & -65536L;

        $b24 = $l23 cmp -16842752L;

        if $b24 != 0 goto label21;

     label20:
        virtualinvoke r0.<org.apache.xmlbeans.impl.common.SniffedXmlInputStream: void reset()>();

        return "UTF-16";

     label21:
        $l25 = l29 & -65536L;

        $b26 = $l25 cmp -131072L;

        if $b26 != 0 goto label23;

     label22:
        virtualinvoke r0.<org.apache.xmlbeans.impl.common.SniffedXmlInputStream: void reset()>();

        return "UTF-16";

     label23:
        $l27 = l29 & -256L;

        $b28 = $l27 cmp -272908544L;

        if $b28 != 0 goto label25;

     label24:
        virtualinvoke r0.<org.apache.xmlbeans.impl.common.SniffedXmlInputStream: void reset()>();

        return "UTF-8";

     label25:
        virtualinvoke r0.<org.apache.xmlbeans.impl.common.SniffedXmlInputStream: void reset()>();

        return null;

     label26:
        $r2 := @caughtexception;

     label27:
        virtualinvoke r0.<org.apache.xmlbeans.impl.common.SniffedXmlInputStream: void reset()>();

        throw $r2;

        catch java.lang.Throwable from label01 to label02 with label26;
        catch java.lang.Throwable from label03 to label04 with label26;
        catch java.lang.Throwable from label05 to label06 with label26;
        catch java.lang.Throwable from label07 to label08 with label26;
        catch java.lang.Throwable from label09 to label10 with label26;
        catch java.lang.Throwable from label11 to label12 with label26;
        catch java.lang.Throwable from label13 to label14 with label26;
        catch java.lang.Throwable from label15 to label16 with label26;
        catch java.lang.Throwable from label17 to label18 with label26;
        catch java.lang.Throwable from label19 to label20 with label26;
        catch java.lang.Throwable from label21 to label22 with label26;
        catch java.lang.Throwable from label23 to label24 with label26;
        catch java.lang.Throwable from label26 to label27 with label26;
    }

    private java.lang.String sniffForXmlDecl(java.lang.String) throws java.io.IOException
    {
        java.lang.Throwable $r8;
        byte[] r1;
        java.nio.charset.Charset $r3;
        java.io.ByteArrayInputStream $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6;
        java.lang.String r2, $r7;
        org.apache.xmlbeans.impl.common.SniffedXmlInputStream r0;
        java.io.InputStreamReader $r4;
        char[] r6;

        r0 := @this: org.apache.xmlbeans.impl.common.SniffedXmlInputStream;

        r2 := @parameter0: java.lang.String;

        $i0 = <org.apache.xmlbeans.impl.common.SniffedXmlInputStream: int MAX_SNIFFED_BYTES>;

        virtualinvoke r0.<org.apache.xmlbeans.impl.common.SniffedXmlInputStream: void mark(int)>($i0);

     label1:
        $i1 = <org.apache.xmlbeans.impl.common.SniffedXmlInputStream: int MAX_SNIFFED_BYTES>;

        r1 = newarray (byte)[$i1];

        $i2 = <org.apache.xmlbeans.impl.common.SniffedXmlInputStream: int MAX_SNIFFED_BYTES>;

        $i3 = specialinvoke r0.<org.apache.xmlbeans.impl.common.SniffedXmlInputStream: int readAsMuchAsPossible(byte[],int,int)>(r1, 0, $i2);

        $r3 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>(r2);

        $r4 = new java.io.InputStreamReader;

        $r5 = new java.io.ByteArrayInputStream;

        specialinvoke $r5.<java.io.ByteArrayInputStream: void <init>(byte[],int,int)>(r1, 0, $i3);

        specialinvoke $r4.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>($r5, $r3);

        r6 = newarray (char)[$i3];

        i6 = 0;

     label2:
        if i6 >= $i3 goto label4;

        $i4 = $i3 - i6;

        $i5 = virtualinvoke $r4.<java.io.Reader: int read(char[],int,int)>(r6, i6, $i4);

        if $i5 >= 0 goto label3;

        goto label4;

     label3:
        i6 = i6 + $i5;

        goto label2;

     label4:
        $r7 = staticinvoke <org.apache.xmlbeans.impl.common.SniffedXmlInputStream: java.lang.String extractXmlDeclEncoding(char[],int,int)>(r6, 0, i6);

     label5:
        virtualinvoke r0.<org.apache.xmlbeans.impl.common.SniffedXmlInputStream: void reset()>();

        return $r7;

     label6:
        $r8 := @caughtexception;

     label7:
        virtualinvoke r0.<org.apache.xmlbeans.impl.common.SniffedXmlInputStream: void reset()>();

        throw $r8;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public java.lang.String getXmlEncoding()
    {
        org.apache.xmlbeans.impl.common.SniffedXmlInputStream r0;
        java.lang.String $r1;

        r0 := @this: org.apache.xmlbeans.impl.common.SniffedXmlInputStream;

        $r1 = r0.<org.apache.xmlbeans.impl.common.SniffedXmlInputStream: java.lang.String _encoding>;

        return $r1;
    }

    static java.lang.String extractXmlDeclEncoding(char[], int, int)
    {
        org.apache.xmlbeans.impl.common.SniffedXmlInputStream$ScannedAttribute $r1;
        int i0, i1, i2, $i3, $i4, i5;
        char[] r0;
        java.lang.String $r2, $r3;
        boolean $z0;

        r0 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 = i0 + i1;

        $i3 = staticinvoke <org.apache.xmlbeans.impl.common.SniffedXmlInputStream: int firstIndexOf(java.lang.String,char[],int,int)>("<?xml", r0, i0, i2);

        if $i3 < 0 goto label3;

        i5 = $i3 + 5;

        $r1 = new org.apache.xmlbeans.impl.common.SniffedXmlInputStream$ScannedAttribute;

        specialinvoke $r1.<org.apache.xmlbeans.impl.common.SniffedXmlInputStream$ScannedAttribute: void <init>(org.apache.xmlbeans.impl.common.SniffedXmlInputStream$1)>(null);

     label1:
        if i5 >= i2 goto label3;

        $i4 = staticinvoke <org.apache.xmlbeans.impl.common.SniffedXmlInputStream: int scanAttribute(char[],int,int,org.apache.xmlbeans.impl.common.SniffedXmlInputStream$ScannedAttribute)>(r0, i5, i2, $r1);

        i5 = $i4;

        if $i4 >= 0 goto label2;

        return null;

     label2:
        $r2 = $r1.<org.apache.xmlbeans.impl.common.SniffedXmlInputStream$ScannedAttribute: java.lang.String name>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("encoding");

        if $z0 == 0 goto label1;

        $r3 = $r1.<org.apache.xmlbeans.impl.common.SniffedXmlInputStream$ScannedAttribute: java.lang.String value>;

        return $r3;

     label3:
        return null;
    }

    private static int firstIndexOf(java.lang.String, char[], int, int)
    {
        java.lang.AssertionError $r4;
        int $i0, $i2, $i3, $i6, $i8, i9, i10, i11, $i12, $i13, $i14, $i15, $i17;
        java.lang.String r0;
        boolean $z0;
        char $c1, $c4, $c5, $c7;
        char[] $r1, r2;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: char[];

        i9 := @parameter2: int;

        i10 := @parameter3: int;

        $z0 = <org.apache.xmlbeans.impl.common.SniffedXmlInputStream: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i6 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i6 > 0 goto label1;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label1:
        $r1 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>();

        $c7 = $r1[0];

        $i0 = lengthof $r1;

        $i8 = i10 - $i0;

     label2:
        if i9 >= $i8 goto label7;

        $c1 = r2[i9];

        $i12 = (int) $c1;

        $i13 = (int) $c7;

        if $i12 != $i13 goto label6;

        i11 = 1;

     label3:
        $i2 = lengthof $r1;

        if i11 >= $i2 goto label5;

        $i3 = i9 + i11;

        $c5 = r2[$i3];

        $c4 = $r1[i11];

        $i14 = (int) $c5;

        $i15 = (int) $c4;

        if $i14 == $i15 goto label4;

        goto label6;

     label4:
        i11 = i11 + 1;

        goto label3;

     label5:
        return i9;

     label6:
        i9 = i9 + 1;

        goto label2;

     label7:
        $i17 = (int) -1;

        return $i17;
    }

    private static int nextNonmatchingByte(char[], char[], int, int)
    {
        char c1, $c3;
        int i0, $i2, i4, i5, $i6, $i7, $i9;
        char[] r0, r1;

        r1 := @parameter0: char[];

        r0 := @parameter1: char[];

        i4 := @parameter2: int;

        i0 := @parameter3: int;

     label1:
        if i4 >= i0 goto label6;

        c1 = r0[i4];

        i5 = 0;

     label2:
        $i2 = lengthof r1;

        if i5 >= $i2 goto label4;

        $c3 = r1[i5];

        $i6 = (int) c1;

        $i7 = (int) $c3;

        if $i6 != $i7 goto label3;

        goto label5;

     label3:
        i5 = i5 + 1;

        goto label2;

     label4:
        return i4;

     label5:
        i4 = i4 + 1;

        goto label1;

     label6:
        $i9 = (int) -1;

        return $i9;
    }

    private static int nextMatchingByte(char[], char[], int, int)
    {
        char c1, $c3;
        int i0, $i2, i4, i5, $i6, $i7, $i9;
        char[] r0, r1;

        r1 := @parameter0: char[];

        r0 := @parameter1: char[];

        i4 := @parameter2: int;

        i0 := @parameter3: int;

     label1:
        if i4 >= i0 goto label5;

        c1 = r0[i4];

        i5 = 0;

     label2:
        $i2 = lengthof r1;

        if i5 >= $i2 goto label4;

        $c3 = r1[i5];

        $i6 = (int) c1;

        $i7 = (int) $c3;

        if $i6 != $i7 goto label3;

        return i4;

     label3:
        i5 = i5 + 1;

        goto label2;

     label4:
        i4 = i4 + 1;

        goto label1;

     label5:
        $i9 = (int) -1;

        return $i9;
    }

    private static int nextMatchingByte(char, char[], int, int)
    {
        char c1, $c2;
        int i0, i3, $i4, $i5, $i7;
        char[] r0;

        c1 := @parameter0: char;

        r0 := @parameter1: char[];

        i3 := @parameter2: int;

        i0 := @parameter3: int;

     label1:
        if i3 >= i0 goto label3;

        $c2 = r0[i3];

        $i4 = (int) $c2;

        $i5 = (int) c1;

        if $i4 != $i5 goto label2;

        return i3;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        $i7 = (int) -1;

        return $i7;
    }

    private static int scanAttribute(char[], int, int, org.apache.xmlbeans.impl.common.SniffedXmlInputStream$ScannedAttribute)
    {
        int i0, i1, $i2, $i3, $i4, $i6, $i7, $i9, $i11, $i12, $i13, $i14, $i15, $i16, $i19, $i21, $i23, $i24, $i26, $i27, $i28, $i30, $i32;
        java.lang.String $r8, $r9;
        org.apache.xmlbeans.impl.common.SniffedXmlInputStream$ScannedAttribute r5;
        char $c5, $c8, $c10, $c17;
        char[] r0, $r1, $r2, $r3, $r4;

        r0 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r5 := @parameter3: org.apache.xmlbeans.impl.common.SniffedXmlInputStream$ScannedAttribute;

        $r1 = <org.apache.xmlbeans.impl.common.SniffedXmlInputStream: char[] WHITESPACE>;

        $i2 = staticinvoke <org.apache.xmlbeans.impl.common.SniffedXmlInputStream: int nextNonmatchingByte(char[],char[],int,int)>($r1, r0, i0, i1);

        if $i2 >= 0 goto label1;

        $i19 = (int) -1;

        return $i19;

     label1:
        $r2 = <org.apache.xmlbeans.impl.common.SniffedXmlInputStream: char[] NOTNAME>;

        $i3 = staticinvoke <org.apache.xmlbeans.impl.common.SniffedXmlInputStream: int nextMatchingByte(char[],char[],int,int)>($r2, r0, $i2, i1);

        if $i3 >= 0 goto label2;

        $i21 = (int) -1;

        return $i21;

     label2:
        $r3 = <org.apache.xmlbeans.impl.common.SniffedXmlInputStream: char[] WHITESPACE>;

        $i4 = staticinvoke <org.apache.xmlbeans.impl.common.SniffedXmlInputStream: int nextNonmatchingByte(char[],char[],int,int)>($r3, r0, $i3, i1);

        if $i4 >= 0 goto label3;

        $i23 = (int) -1;

        return $i23;

     label3:
        $c5 = r0[$i4];

        $i24 = (int) $c5;

        if $i24 == 61 goto label4;

        $i26 = (int) -1;

        return $i26;

     label4:
        $r4 = <org.apache.xmlbeans.impl.common.SniffedXmlInputStream: char[] WHITESPACE>;

        $i6 = $i4 + 1;

        $i7 = staticinvoke <org.apache.xmlbeans.impl.common.SniffedXmlInputStream: int nextNonmatchingByte(char[],char[],int,int)>($r4, r0, $i6, i1);

        $c8 = r0[$i7];

        $i27 = (int) $c8;

        if $i27 == 39 goto label5;

        $c17 = r0[$i7];

        $i28 = (int) $c17;

        if $i28 == 34 goto label5;

        $i30 = (int) -1;

        return $i30;

     label5:
        $c10 = r0[$i7];

        $i9 = $i7 + 1;

        $i11 = staticinvoke <org.apache.xmlbeans.impl.common.SniffedXmlInputStream: int nextMatchingByte(char,char[],int,int)>($c10, r0, $i9, i1);

        if $i11 >= 0 goto label6;

        $i32 = (int) -1;

        return $i32;

     label6:
        $r8 = new java.lang.String;

        $i12 = $i3 - $i2;

        specialinvoke $r8.<java.lang.String: void <init>(char[],int,int)>(r0, $i2, $i12);

        r5.<org.apache.xmlbeans.impl.common.SniffedXmlInputStream$ScannedAttribute: java.lang.String name> = $r8;

        $r9 = new java.lang.String;

        $i15 = $i7 + 1;

        $i13 = $i11 - $i7;

        $i14 = $i13 - 1;

        specialinvoke $r9.<java.lang.String: void <init>(char[],int,int)>(r0, $i15, $i14);

        r5.<org.apache.xmlbeans.impl.common.SniffedXmlInputStream$ScannedAttribute: java.lang.String value> = $r9;

        $i16 = $i11 + 1;

        return $i16;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.nio.charset.Charset $r1, $r2, $r3, $r4, $r5, $r6, $r7;
        char[] $r8, $r9;
        java.lang.Class $r0, $r10;
        boolean $z0, $z1;

        $r0 = <org.apache.xmlbeans.impl.common.SniffedXmlInputStream: java.lang.Class class$org$apache$xmlbeans$impl$common$SniffedXmlInputStream>;

        if $r0 != null goto label1;

        $r10 = staticinvoke <org.apache.xmlbeans.impl.common.SniffedXmlInputStream: java.lang.Class class$(java.lang.String)>("org.apache.xmlbeans.impl.common.SniffedXmlInputStream");

        <org.apache.xmlbeans.impl.common.SniffedXmlInputStream: java.lang.Class class$org$apache$xmlbeans$impl$common$SniffedXmlInputStream> = $r10;

        goto label2;

     label1:
        $r10 = <org.apache.xmlbeans.impl.common.SniffedXmlInputStream: java.lang.Class class$org$apache$xmlbeans$impl$common$SniffedXmlInputStream>;

     label2:
        $z0 = virtualinvoke $r10.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        <org.apache.xmlbeans.impl.common.SniffedXmlInputStream: boolean $assertionsDisabled> = $z1;

        <org.apache.xmlbeans.impl.common.SniffedXmlInputStream: int MAX_SNIFFED_BYTES> = 192;

        $r1 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("UTF-8");

        <org.apache.xmlbeans.impl.common.SniffedXmlInputStream: java.nio.charset.Charset dummy1> = $r1;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("UTF-16");

        <org.apache.xmlbeans.impl.common.SniffedXmlInputStream: java.nio.charset.Charset dummy2> = $r2;

        $r3 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("UTF-16BE");

        <org.apache.xmlbeans.impl.common.SniffedXmlInputStream: java.nio.charset.Charset dummy3> = $r3;

        $r4 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("UTF-16LE");

        <org.apache.xmlbeans.impl.common.SniffedXmlInputStream: java.nio.charset.Charset dummy4> = $r4;

        $r5 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("ISO-8859-1");

        <org.apache.xmlbeans.impl.common.SniffedXmlInputStream: java.nio.charset.Charset dummy5> = $r5;

        $r6 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("US-ASCII");

        <org.apache.xmlbeans.impl.common.SniffedXmlInputStream: java.nio.charset.Charset dummy6> = $r6;

        $r7 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("Cp1252");

        <org.apache.xmlbeans.impl.common.SniffedXmlInputStream: java.nio.charset.Charset dummy7> = $r7;

        $r8 = newarray (char)[4];

        $r8[0] = 32;

        $r8[1] = 13;

        $r8[2] = 9;

        $r8[3] = 10;

        <org.apache.xmlbeans.impl.common.SniffedXmlInputStream: char[] WHITESPACE> = $r8;

        $r9 = newarray (char)[10];

        $r9[0] = 61;

        $r9[1] = 32;

        $r9[2] = 13;

        $r9[3] = 9;

        $r9[4] = 10;

        $r9[5] = 63;

        $r9[6] = 62;

        $r9[7] = 60;

        $r9[8] = 39;

        $r9[9] = 34;

        <org.apache.xmlbeans.impl.common.SniffedXmlInputStream: char[] NOTNAME> = $r9;

        return;
    }
}
