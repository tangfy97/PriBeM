public class org.apache.batik.gvt.PatternPaintContext extends java.lang.Object implements java.awt.PaintContext
{
    private java.awt.image.ColorModel rasterCM;
    private java.awt.image.WritableRaster raster;
    private java.awt.image.RenderedImage tiled;
    protected java.awt.geom.AffineTransform usr2dev;
    private static java.awt.Rectangle EVERYTHING;

    public java.awt.geom.AffineTransform getUsr2Dev()
    {
        java.awt.geom.AffineTransform $r1;
        org.apache.batik.gvt.PatternPaintContext r0;

        r0 := @this: org.apache.batik.gvt.PatternPaintContext;

        $r1 = r0.<org.apache.batik.gvt.PatternPaintContext: java.awt.geom.AffineTransform usr2dev>;

        return $r1;
    }

    public void <init>(java.awt.image.ColorModel, java.awt.geom.AffineTransform, java.awt.RenderingHints, org.apache.batik.ext.awt.image.renderable.Filter, java.awt.geom.Rectangle2D, boolean)
    {
        java.awt.geom.Rectangle2D r4;
        java.awt.RenderingHints r31, $r37;
        byte $b0, $b1;
        boolean z0, $z1, $z2, $z3;
        java.awt.Shape $r16;
        java.awt.image.BufferedImage $r42;
        java.awt.image.RenderedImage $r19, $r21, $r34, $r35;
        java.awt.geom.AffineTransform r1;
        org.apache.batik.ext.awt.image.renderable.Filter r2;
        org.apache.batik.gvt.PatternPaintContext r0;
        java.awt.image.renderable.RenderContext $r40;
        org.apache.batik.ext.awt.image.rendered.CachableRed $r15, $r20;
        org.apache.batik.ext.awt.image.rendered.TileCacheRed $r41;
        java.awt.Rectangle $r5, $r17, $r33;
        java.awt.color.ColorSpace $r7, $r8, $r9;
        int $i2, $i3;
        org.apache.batik.ext.awt.image.renderable.TileRable8Bit $r39;
        double $d0, $d1;
        java.lang.IllegalArgumentException $r36, $r38;
        java.awt.image.ColorModel r6, $r10, $r11, $r14, $r22, $r23, $r24, $r25, $r26, $r27;
        java.awt.image.WritableRaster $r12;

        r0 := @this: org.apache.batik.gvt.PatternPaintContext;

        r6 := @parameter0: java.awt.image.ColorModel;

        r1 := @parameter1: java.awt.geom.AffineTransform;

        r31 := @parameter2: java.awt.RenderingHints;

        r2 := @parameter3: org.apache.batik.ext.awt.image.renderable.Filter;

        r4 := @parameter4: java.awt.geom.Rectangle2D;

        z0 := @parameter5: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label01;

        $r36 = new java.lang.IllegalArgumentException;

        specialinvoke $r36.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r36;

     label01:
        if r31 != null goto label02;

        $r37 = new java.awt.RenderingHints;

        specialinvoke $r37.<java.awt.RenderingHints: void <init>(java.util.Map)>(null);

        r31 = $r37;

     label02:
        if r2 != null goto label03;

        $r38 = new java.lang.IllegalArgumentException;

        specialinvoke $r38.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r38;

     label03:
        r0.<org.apache.batik.gvt.PatternPaintContext: java.awt.geom.AffineTransform usr2dev> = r1;

        $r39 = new org.apache.batik.ext.awt.image.renderable.TileRable8Bit;

        $r5 = <org.apache.batik.gvt.PatternPaintContext: java.awt.Rectangle EVERYTHING>;

        specialinvoke $r39.<org.apache.batik.ext.awt.image.renderable.TileRable8Bit: void <init>(org.apache.batik.ext.awt.image.renderable.Filter,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,boolean)>(r2, $r5, r4, z0);

        $r7 = virtualinvoke r6.<java.awt.image.ColorModel: java.awt.color.ColorSpace getColorSpace()>();

        $r8 = staticinvoke <java.awt.color.ColorSpace: java.awt.color.ColorSpace getInstance(int)>(1000);

        if $r7 != $r8 goto label04;

        interfaceinvoke $r39.<org.apache.batik.ext.awt.image.renderable.FilterColorInterpolation: void setColorSpaceLinear(boolean)>(0);

        goto label05;

     label04:
        $r9 = staticinvoke <java.awt.color.ColorSpace: java.awt.color.ColorSpace getInstance(int)>(1004);

        if $r7 != $r9 goto label05;

        interfaceinvoke $r39.<org.apache.batik.ext.awt.image.renderable.FilterColorInterpolation: void setColorSpaceLinear(boolean)>(1);

     label05:
        $r40 = new java.awt.image.renderable.RenderContext;

        $r33 = <org.apache.batik.gvt.PatternPaintContext: java.awt.Rectangle EVERYTHING>;

        specialinvoke $r40.<java.awt.image.renderable.RenderContext: void <init>(java.awt.geom.AffineTransform,java.awt.Shape,java.awt.RenderingHints)>(r1, $r33, r31);

        $r34 = interfaceinvoke $r39.<java.awt.image.renderable.RenderableImage: java.awt.image.RenderedImage createRendering(java.awt.image.renderable.RenderContext)>($r40);

        r0.<org.apache.batik.gvt.PatternPaintContext: java.awt.image.RenderedImage tiled> = $r34;

        $r35 = r0.<org.apache.batik.gvt.PatternPaintContext: java.awt.image.RenderedImage tiled>;

        if $r35 == null goto label08;

        $r16 = virtualinvoke r1.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>(r4);

        $r17 = interfaceinvoke $r16.<java.awt.Shape: java.awt.Rectangle getBounds()>();

        $d0 = virtualinvoke $r17.<java.awt.geom.RectangularShape: double getWidth()>();

        $b0 = $d0 cmpl 128.0;

        $i2 = (int) $b0;

        if $i2 > 0 goto label06;

        $d1 = virtualinvoke $r17.<java.awt.geom.RectangularShape: double getHeight()>();

        $b1 = $d1 cmpl 128.0;

        $i3 = (int) $b1;

        if $i3 <= 0 goto label07;

     label06:
        $r41 = new org.apache.batik.ext.awt.image.rendered.TileCacheRed;

        $r19 = r0.<org.apache.batik.gvt.PatternPaintContext: java.awt.image.RenderedImage tiled>;

        $r20 = staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: org.apache.batik.ext.awt.image.rendered.CachableRed wrap(java.awt.image.RenderedImage)>($r19);

        specialinvoke $r41.<org.apache.batik.ext.awt.image.rendered.TileCacheRed: void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed,int,int)>($r20, 256, 64);

        r0.<org.apache.batik.gvt.PatternPaintContext: java.awt.image.RenderedImage tiled> = $r41;

     label07:
        goto label09;

     label08:
        $r10 = staticinvoke <java.awt.image.ColorModel: java.awt.image.ColorModel getRGBdefault()>();

        r0.<org.apache.batik.gvt.PatternPaintContext: java.awt.image.ColorModel rasterCM> = $r10;

        $r11 = r0.<org.apache.batik.gvt.PatternPaintContext: java.awt.image.ColorModel rasterCM>;

        $r12 = virtualinvoke $r11.<java.awt.image.ColorModel: java.awt.image.WritableRaster createCompatibleWritableRaster(int,int)>(32, 32);

        $r42 = new java.awt.image.BufferedImage;

        $r14 = r0.<org.apache.batik.gvt.PatternPaintContext: java.awt.image.ColorModel rasterCM>;

        specialinvoke $r42.<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>($r14, $r12, 0, null);

        $r15 = staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: org.apache.batik.ext.awt.image.rendered.CachableRed wrap(java.awt.image.RenderedImage)>($r42);

        r0.<org.apache.batik.gvt.PatternPaintContext: java.awt.image.RenderedImage tiled> = $r15;

        return;

     label09:
        $r21 = r0.<org.apache.batik.gvt.PatternPaintContext: java.awt.image.RenderedImage tiled>;

        $r22 = interfaceinvoke $r21.<java.awt.image.RenderedImage: java.awt.image.ColorModel getColorModel()>();

        r0.<org.apache.batik.gvt.PatternPaintContext: java.awt.image.ColorModel rasterCM> = $r22;

        $r23 = r0.<org.apache.batik.gvt.PatternPaintContext: java.awt.image.ColorModel rasterCM>;

        $z1 = virtualinvoke $r23.<java.awt.image.ColorModel: boolean hasAlpha()>();

        if $z1 == 0 goto label11;

        $z2 = virtualinvoke r6.<java.awt.image.ColorModel: boolean hasAlpha()>();

        if $z2 == 0 goto label10;

        $r26 = r0.<org.apache.batik.gvt.PatternPaintContext: java.awt.image.ColorModel rasterCM>;

        $z3 = virtualinvoke r6.<java.awt.image.ColorModel: boolean isAlphaPremultiplied()>();

        $r27 = staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: java.awt.image.ColorModel coerceColorModel(java.awt.image.ColorModel,boolean)>($r26, $z3);

        r0.<org.apache.batik.gvt.PatternPaintContext: java.awt.image.ColorModel rasterCM> = $r27;

        goto label11;

     label10:
        $r24 = r0.<org.apache.batik.gvt.PatternPaintContext: java.awt.image.ColorModel rasterCM>;

        $r25 = staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: java.awt.image.ColorModel coerceColorModel(java.awt.image.ColorModel,boolean)>($r24, 0);

        r0.<org.apache.batik.gvt.PatternPaintContext: java.awt.image.ColorModel rasterCM> = $r25;

     label11:
        return;
    }

    public void dispose()
    {
        org.apache.batik.gvt.PatternPaintContext r0;

        r0 := @this: org.apache.batik.gvt.PatternPaintContext;

        r0.<org.apache.batik.gvt.PatternPaintContext: java.awt.image.WritableRaster raster> = null;

        return;
    }

    public java.awt.image.ColorModel getColorModel()
    {
        java.awt.image.ColorModel $r1;
        org.apache.batik.gvt.PatternPaintContext r0;

        r0 := @this: org.apache.batik.gvt.PatternPaintContext;

        $r1 = r0.<org.apache.batik.gvt.PatternPaintContext: java.awt.image.ColorModel rasterCM>;

        return $r1;
    }

    public java.awt.image.Raster getRaster(int, int, int, int)
    {
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7;
        java.awt.image.Raster $r2;
        boolean $z0;
        java.awt.image.RenderedImage $r11, $r12;
        org.apache.batik.gvt.PatternPaintContext r0;
        java.awt.image.ColorModel $r7, $r13, $r14;
        java.awt.image.WritableRaster $r1, $r3, $r4, $r5, $r6, $r8, $r9, $r10, $r15;

        r0 := @this: org.apache.batik.gvt.PatternPaintContext;

        i2 := @parameter0: int;

        i3 := @parameter1: int;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r1 = r0.<org.apache.batik.gvt.PatternPaintContext: java.awt.image.WritableRaster raster>;

        if $r1 == null goto label1;

        $r5 = r0.<org.apache.batik.gvt.PatternPaintContext: java.awt.image.WritableRaster raster>;

        $i5 = virtualinvoke $r5.<java.awt.image.Raster: int getWidth()>();

        if $i5 < i0 goto label1;

        $r6 = r0.<org.apache.batik.gvt.PatternPaintContext: java.awt.image.WritableRaster raster>;

        $i6 = virtualinvoke $r6.<java.awt.image.Raster: int getHeight()>();

        if $i6 >= i1 goto label2;

     label1:
        $r7 = r0.<org.apache.batik.gvt.PatternPaintContext: java.awt.image.ColorModel rasterCM>;

        $r8 = virtualinvoke $r7.<java.awt.image.ColorModel: java.awt.image.WritableRaster createCompatibleWritableRaster(int,int)>(i0, i1);

        r0.<org.apache.batik.gvt.PatternPaintContext: java.awt.image.WritableRaster raster> = $r8;

     label2:
        $r9 = r0.<org.apache.batik.gvt.PatternPaintContext: java.awt.image.WritableRaster raster>;

        $r10 = virtualinvoke $r9.<java.awt.image.WritableRaster: java.awt.image.WritableRaster createWritableChild(int,int,int,int,int,int,int[])>(0, 0, i0, i1, i2, i3, null);

        $r11 = r0.<org.apache.batik.gvt.PatternPaintContext: java.awt.image.RenderedImage tiled>;

        interfaceinvoke $r11.<java.awt.image.RenderedImage: java.awt.image.WritableRaster copyData(java.awt.image.WritableRaster)>($r10);

        $r12 = r0.<org.apache.batik.gvt.PatternPaintContext: java.awt.image.RenderedImage tiled>;

        $r13 = interfaceinvoke $r12.<java.awt.image.RenderedImage: java.awt.image.ColorModel getColorModel()>();

        $r14 = r0.<org.apache.batik.gvt.PatternPaintContext: java.awt.image.ColorModel rasterCM>;

        $z0 = virtualinvoke $r14.<java.awt.image.ColorModel: boolean isAlphaPremultiplied()>();

        staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: java.awt.image.ColorModel coerceData(java.awt.image.WritableRaster,java.awt.image.ColorModel,boolean)>($r10, $r13, $z0);

        $r15 = r0.<org.apache.batik.gvt.PatternPaintContext: java.awt.image.WritableRaster raster>;

        $i7 = virtualinvoke $r15.<java.awt.image.Raster: int getWidth()>();

        if $i7 != i0 goto label3;

        $r3 = r0.<org.apache.batik.gvt.PatternPaintContext: java.awt.image.WritableRaster raster>;

        $i4 = virtualinvoke $r3.<java.awt.image.Raster: int getHeight()>();

        if $i4 != i1 goto label3;

        $r4 = r0.<org.apache.batik.gvt.PatternPaintContext: java.awt.image.WritableRaster raster>;

        return $r4;

     label3:
        $r2 = virtualinvoke $r10.<java.awt.image.Raster: java.awt.image.Raster createTranslatedChild(int,int)>(0, 0);

        return $r2;
    }

    static void <clinit>()
    {
        java.awt.Rectangle $r0;

        $r0 = new java.awt.Rectangle;

        specialinvoke $r0.<java.awt.Rectangle: void <init>(int,int,int,int)>(-536870912, -536870912, 1073741823, 1073741823);

        <org.apache.batik.gvt.PatternPaintContext: java.awt.Rectangle EVERYTHING> = $r0;

        return;
    }
}
