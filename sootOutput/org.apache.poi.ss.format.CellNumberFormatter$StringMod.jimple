class org.apache.poi.ss.format.CellNumberFormatter$StringMod extends java.lang.Object implements java.lang.Comparable
{
    final org.apache.poi.ss.format.CellNumberFormatter$Special special;
    final int op;
    java.lang.CharSequence toAdd;
    org.apache.poi.ss.format.CellNumberFormatter$Special end;
    boolean startInclusive;
    boolean endInclusive;
    public static final int BEFORE;
    public static final int AFTER;
    public static final int REPLACE;

    private void <init>(org.apache.poi.ss.format.CellNumberFormatter$Special, java.lang.CharSequence, int)
    {
        org.apache.poi.ss.format.CellNumberFormatter$Special r1;
        org.apache.poi.ss.format.CellNumberFormatter$StringMod r0;
        java.lang.CharSequence r2;
        int i0;

        r0 := @this: org.apache.poi.ss.format.CellNumberFormatter$StringMod;

        r1 := @parameter0: org.apache.poi.ss.format.CellNumberFormatter$Special;

        r2 := @parameter1: java.lang.CharSequence;

        i0 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.poi.ss.format.CellNumberFormatter$StringMod: org.apache.poi.ss.format.CellNumberFormatter$Special special> = r1;

        r0.<org.apache.poi.ss.format.CellNumberFormatter$StringMod: java.lang.CharSequence toAdd> = r2;

        r0.<org.apache.poi.ss.format.CellNumberFormatter$StringMod: int op> = i0;

        return;
    }

    public void <init>(org.apache.poi.ss.format.CellNumberFormatter$Special, boolean, org.apache.poi.ss.format.CellNumberFormatter$Special, boolean, char)
    {
        org.apache.poi.ss.format.CellNumberFormatter$Special r1, r2;
        char c0;
        org.apache.poi.ss.format.CellNumberFormatter$StringMod r0;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;
        boolean z0, z1;

        r0 := @this: org.apache.poi.ss.format.CellNumberFormatter$StringMod;

        r1 := @parameter0: org.apache.poi.ss.format.CellNumberFormatter$Special;

        z0 := @parameter1: boolean;

        r2 := @parameter2: org.apache.poi.ss.format.CellNumberFormatter$Special;

        z1 := @parameter3: boolean;

        c0 := @parameter4: char;

        specialinvoke r0.<org.apache.poi.ss.format.CellNumberFormatter$StringMod: void <init>(org.apache.poi.ss.format.CellNumberFormatter$Special,boolean,org.apache.poi.ss.format.CellNumberFormatter$Special,boolean)>(r1, z0, r2, z1);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<org.apache.poi.ss.format.CellNumberFormatter$StringMod: java.lang.CharSequence toAdd> = $r6;

        return;
    }

    public void <init>(org.apache.poi.ss.format.CellNumberFormatter$Special, boolean, org.apache.poi.ss.format.CellNumberFormatter$Special, boolean)
    {
        org.apache.poi.ss.format.CellNumberFormatter$Special r1, r2;
        org.apache.poi.ss.format.CellNumberFormatter$StringMod r0;
        boolean z0, z1;

        r0 := @this: org.apache.poi.ss.format.CellNumberFormatter$StringMod;

        r1 := @parameter0: org.apache.poi.ss.format.CellNumberFormatter$Special;

        z0 := @parameter1: boolean;

        r2 := @parameter2: org.apache.poi.ss.format.CellNumberFormatter$Special;

        z1 := @parameter3: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.poi.ss.format.CellNumberFormatter$StringMod: org.apache.poi.ss.format.CellNumberFormatter$Special special> = r1;

        r0.<org.apache.poi.ss.format.CellNumberFormatter$StringMod: boolean startInclusive> = z0;

        r0.<org.apache.poi.ss.format.CellNumberFormatter$StringMod: org.apache.poi.ss.format.CellNumberFormatter$Special end> = r2;

        r0.<org.apache.poi.ss.format.CellNumberFormatter$StringMod: boolean endInclusive> = z1;

        r0.<org.apache.poi.ss.format.CellNumberFormatter$StringMod: int op> = 3;

        r0.<org.apache.poi.ss.format.CellNumberFormatter$StringMod: java.lang.CharSequence toAdd> = "";

        return;
    }

    public int compareTo(org.apache.poi.ss.format.CellNumberFormatter$StringMod)
    {
        org.apache.poi.ss.format.CellNumberFormatter$Special $r1, $r3;
        org.apache.poi.ss.format.CellNumberFormatter$StringMod r0, r2;
        int $i0, $i1, i2, $i3, $i4, $i5;

        r0 := @this: org.apache.poi.ss.format.CellNumberFormatter$StringMod;

        r2 := @parameter0: org.apache.poi.ss.format.CellNumberFormatter$StringMod;

        $r1 = r0.<org.apache.poi.ss.format.CellNumberFormatter$StringMod: org.apache.poi.ss.format.CellNumberFormatter$Special special>;

        $i1 = $r1.<org.apache.poi.ss.format.CellNumberFormatter$Special: int pos>;

        $r3 = r2.<org.apache.poi.ss.format.CellNumberFormatter$StringMod: org.apache.poi.ss.format.CellNumberFormatter$Special special>;

        $i0 = $r3.<org.apache.poi.ss.format.CellNumberFormatter$Special: int pos>;

        i2 = $i1 - $i0;

        if i2 == 0 goto label1;

        return i2;

     label1:
        $i4 = r0.<org.apache.poi.ss.format.CellNumberFormatter$StringMod: int op>;

        $i3 = r2.<org.apache.poi.ss.format.CellNumberFormatter$StringMod: int op>;

        $i5 = $i4 - $i3;

        return $i5;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.poi.ss.format.CellNumberFormatter$StringMod r0, $r2;
        int $i0;
        java.lang.Object r1;
        java.lang.RuntimeException $r3;
        boolean $z0;

        r0 := @this: org.apache.poi.ss.format.CellNumberFormatter$StringMod;

        r1 := @parameter0: java.lang.Object;

     label1:
        $r2 = (org.apache.poi.ss.format.CellNumberFormatter$StringMod) r1;

        $i0 = virtualinvoke r0.<org.apache.poi.ss.format.CellNumberFormatter$StringMod: int compareTo(org.apache.poi.ss.format.CellNumberFormatter$StringMod)>($r2);

        if $i0 != 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;

     label4:
        $r3 := @caughtexception;

        return 0;

        catch java.lang.RuntimeException from label1 to label3 with label4;
    }

    public int hashCode()
    {
        org.apache.poi.ss.format.CellNumberFormatter$Special $r1;
        org.apache.poi.ss.format.CellNumberFormatter$StringMod r0;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.poi.ss.format.CellNumberFormatter$StringMod;

        $r1 = r0.<org.apache.poi.ss.format.CellNumberFormatter$StringMod: org.apache.poi.ss.format.CellNumberFormatter$Special special>;

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $i1 = r0.<org.apache.poi.ss.format.CellNumberFormatter$StringMod: int op>;

        $i2 = $i0 + $i1;

        return $i2;
    }

    public volatile int compareTo(java.lang.Object)
    {
        org.apache.poi.ss.format.CellNumberFormatter$StringMod r0, $r2;
        int $i0;
        java.lang.Object r1;

        r0 := @this: org.apache.poi.ss.format.CellNumberFormatter$StringMod;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.poi.ss.format.CellNumberFormatter$StringMod) r1;

        $i0 = virtualinvoke r0.<org.apache.poi.ss.format.CellNumberFormatter$StringMod: int compareTo(org.apache.poi.ss.format.CellNumberFormatter$StringMod)>($r2);

        return $i0;
    }

    void <init>(org.apache.poi.ss.format.CellNumberFormatter$Special, java.lang.CharSequence, int, org.apache.poi.ss.format.CellNumberFormatter$1)
    {
        org.apache.poi.ss.format.CellNumberFormatter$Special r1;
        org.apache.poi.ss.format.CellNumberFormatter$1 r3;
        org.apache.poi.ss.format.CellNumberFormatter$StringMod r0;
        java.lang.CharSequence r2;
        int i0;

        r0 := @this: org.apache.poi.ss.format.CellNumberFormatter$StringMod;

        r1 := @parameter0: org.apache.poi.ss.format.CellNumberFormatter$Special;

        r2 := @parameter1: java.lang.CharSequence;

        i0 := @parameter2: int;

        r3 := @parameter3: org.apache.poi.ss.format.CellNumberFormatter$1;

        specialinvoke r0.<org.apache.poi.ss.format.CellNumberFormatter$StringMod: void <init>(org.apache.poi.ss.format.CellNumberFormatter$Special,java.lang.CharSequence,int)>(r1, r2, i0);

        return;
    }

    public static void <clinit>()
    {
        <org.apache.poi.ss.format.CellNumberFormatter$StringMod: int REPLACE> = 3;

        <org.apache.poi.ss.format.CellNumberFormatter$StringMod: int AFTER> = 2;

        <org.apache.poi.ss.format.CellNumberFormatter$StringMod: int BEFORE> = 1;

        return;
    }
}
