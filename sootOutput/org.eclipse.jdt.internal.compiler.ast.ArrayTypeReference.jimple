public class org.eclipse.jdt.internal.compiler.ast.ArrayTypeReference extends org.eclipse.jdt.internal.compiler.ast.SingleTypeReference
{
    public int dimensions;
    public int originalSourceEnd;

    public void <init>(char[], int, long)
    {
        int $i1, i2;
        char[] r1;
        org.eclipse.jdt.internal.compiler.ast.ArrayTypeReference r0;
        long l0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.ArrayTypeReference;

        r1 := @parameter0: char[];

        i2 := @parameter1: int;

        l0 := @parameter2: long;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.ast.SingleTypeReference: void <init>(char[],long)>(r1, l0);

        $i1 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayTypeReference: int sourceEnd>;

        r0.<org.eclipse.jdt.internal.compiler.ast.ArrayTypeReference: int originalSourceEnd> = $i1;

        r0.<org.eclipse.jdt.internal.compiler.ast.ArrayTypeReference: int dimensions> = i2;

        return;
    }

    public int dimensions()
    {
        int $i0;
        org.eclipse.jdt.internal.compiler.ast.ArrayTypeReference r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.ArrayTypeReference;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayTypeReference: int dimensions>;

        return $i0;
    }

    public char[][] getParameterizedTypeName()
    {
        org.eclipse.jdt.internal.compiler.ast.ArrayTypeReference r0;
        char[][] $r2;
        int i0, $i1, i2, $i3, i4;
        char[] r1, $r3, $r4;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.ArrayTypeReference;

        i0 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayTypeReference: int dimensions>;

        $i1 = i0 * 2;

        r1 = newarray (char)[$i1];

        i4 = 0;

        goto label2;

     label1:
        i2 = i4 * 2;

        r1[i2] = 91;

        $i3 = i2 + 1;

        r1[$i3] = 93;

        i4 = i4 + 1;

     label2:
        if i4 < i0 goto label1;

        $r2 = newarray (char[])[1];

        $r3 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayTypeReference: char[] token>;

        $r4 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: char[] concat(char[],char[])>($r3, r1);

        $r2[0] = $r4;

        return $r2;
    }

    protected org.eclipse.jdt.internal.compiler.lookup.TypeBinding getTypeBinding(org.eclipse.jdt.internal.compiler.lookup.Scope)
    {
        org.eclipse.jdt.internal.compiler.lookup.Scope r2;
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r6;
        org.eclipse.jdt.internal.compiler.ast.ArrayTypeReference r0;
        org.eclipse.jdt.internal.compiler.lookup.ArrayBinding $r5;
        org.eclipse.jdt.internal.compiler.lookup.TypeBinding $r1, $r4, $r7;
        int $i0, $i1;
        char[] $r3;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.ArrayTypeReference;

        r2 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.Scope;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayTypeReference: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType>;

        if $r1 == null goto label1;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayTypeReference: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType>;

        return $r7;

     label1:
        $i0 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayTypeReference: int dimensions>;

        if $i0 <= 255 goto label2;

        $r6 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.lookup.Scope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        virtualinvoke $r6.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void tooManyDimensions(org.eclipse.jdt.internal.compiler.ast.ASTNode)>(r0);

     label2:
        $r3 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayTypeReference: char[] token>;

        $r4 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.lookup.Scope: org.eclipse.jdt.internal.compiler.lookup.TypeBinding getType(char[])>($r3);

        $i1 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayTypeReference: int dimensions>;

        $r5 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.lookup.Scope: org.eclipse.jdt.internal.compiler.lookup.ArrayBinding createArrayType(org.eclipse.jdt.internal.compiler.lookup.TypeBinding,int)>($r4, $i1);

        return $r5;
    }

    public java.lang.StringBuffer printExpression(int, java.lang.StringBuffer)
    {
        org.eclipse.jdt.internal.compiler.ast.ArrayTypeReference r0;
        java.lang.StringBuffer r1;
        int i0, $i1, $i2, $i3, $i4, $i5, i6, i7;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.ArrayTypeReference;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.StringBuffer;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.ast.SingleTypeReference: java.lang.StringBuffer printExpression(int,java.lang.StringBuffer)>(i0, r1);

        $i1 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayTypeReference: int bits>;

        $i2 = $i1 & 16384;

        if $i2 == 0 goto label3;

        i6 = 0;

        goto label2;

     label1:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[]");

        i6 = i6 + 1;

     label2:
        $i4 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayTypeReference: int dimensions>;

        $i5 = $i4 - 1;

        if i6 < $i5 goto label1;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("...");

        goto label6;

     label3:
        i7 = 0;

        goto label5;

     label4:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[]");

        i7 = i7 + 1;

     label5:
        $i3 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayTypeReference: int dimensions>;

        if i7 < $i3 goto label4;

     label6:
        return r1;
    }

    public void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor, org.eclipse.jdt.internal.compiler.lookup.BlockScope)
    {
        org.eclipse.jdt.internal.compiler.ASTVisitor r0;
        org.eclipse.jdt.internal.compiler.ast.ArrayTypeReference r1;
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r2;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.ArrayTypeReference;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.ASTVisitor;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: boolean visit(org.eclipse.jdt.internal.compiler.ast.ArrayTypeReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r1, r2);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: void endVisit(org.eclipse.jdt.internal.compiler.ast.ArrayTypeReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r1, r2);

        return;
    }

    public void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor, org.eclipse.jdt.internal.compiler.lookup.ClassScope)
    {
        org.eclipse.jdt.internal.compiler.ASTVisitor r0;
        org.eclipse.jdt.internal.compiler.ast.ArrayTypeReference r1;
        org.eclipse.jdt.internal.compiler.lookup.ClassScope r2;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.ArrayTypeReference;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.ASTVisitor;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.lookup.ClassScope;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: boolean visit(org.eclipse.jdt.internal.compiler.ast.ArrayTypeReference,org.eclipse.jdt.internal.compiler.lookup.ClassScope)>(r1, r2);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: void endVisit(org.eclipse.jdt.internal.compiler.ast.ArrayTypeReference,org.eclipse.jdt.internal.compiler.lookup.ClassScope)>(r1, r2);

        return;
    }
}
