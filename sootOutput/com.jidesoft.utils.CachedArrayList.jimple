public class com.jidesoft.utils.CachedArrayList extends java.util.ArrayList
{
    private static final long serialVersionUID;
    private java.util.Map _indexCache;
    private boolean _lazyCaching;
    private boolean _isDirty;

    public void <init>()
    {
        com.jidesoft.utils.CachedArrayList r0;

        r0 := @this: com.jidesoft.utils.CachedArrayList;

        specialinvoke r0.<java.util.ArrayList: void <init>()>();

        r0.<com.jidesoft.utils.CachedArrayList: boolean _lazyCaching> = 0;

        r0.<com.jidesoft.utils.CachedArrayList: boolean _isDirty> = 0;

        return;
    }

    public void <init>(java.util.Collection)
    {
        com.jidesoft.utils.CachedArrayList r0;
        java.util.Collection r1;
        boolean $z0;

        r0 := @this: com.jidesoft.utils.CachedArrayList;

        r1 := @parameter0: java.util.Collection;

        specialinvoke r0.<java.util.ArrayList: void <init>(java.util.Collection)>(r1);

        r0.<com.jidesoft.utils.CachedArrayList: boolean _lazyCaching> = 0;

        r0.<com.jidesoft.utils.CachedArrayList: boolean _isDirty> = 0;

        $z0 = virtualinvoke r0.<com.jidesoft.utils.CachedArrayList: boolean isLazyCaching()>();

        if $z0 != 0 goto label1;

        virtualinvoke r0.<com.jidesoft.utils.CachedArrayList: void cacheAll()>();

     label1:
        return;
    }

    public void <init>(int)
    {
        com.jidesoft.utils.CachedArrayList r0;
        int i0;

        r0 := @this: com.jidesoft.utils.CachedArrayList;

        i0 := @parameter0: int;

        specialinvoke r0.<java.util.ArrayList: void <init>(int)>(i0);

        r0.<com.jidesoft.utils.CachedArrayList: boolean _lazyCaching> = 0;

        r0.<com.jidesoft.utils.CachedArrayList: boolean _isDirty> = 0;

        return;
    }

    public int indexOf(java.lang.Object)
    {
        java.lang.Integer $r5;
        com.jidesoft.utils.CachedArrayList r0;
        java.util.Map $r1, $r3;
        int $i0, $i1, $i3, $i5;
        java.lang.Object r2, $r4;
        boolean $z0, $z1;

        r0 := @this: com.jidesoft.utils.CachedArrayList;

        r2 := @parameter0: java.lang.Object;

        $r1 = r0.<com.jidesoft.utils.CachedArrayList: java.util.Map _indexCache>;

        if $r1 == null goto label1;

        $z1 = r0.<com.jidesoft.utils.CachedArrayList: boolean _isDirty>;

        if $z1 == 0 goto label2;

     label1:
        virtualinvoke r0.<com.jidesoft.utils.CachedArrayList: void cacheAll()>();

     label2:
        $r3 = r0.<com.jidesoft.utils.CachedArrayList: java.util.Map _indexCache>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        $r5 = (java.lang.Integer) $r4;

        if $r5 == null goto label3;

        $i1 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        return $i1;

     label3:
        $z0 = virtualinvoke r0.<com.jidesoft.utils.CachedArrayList: boolean isLazyCaching()>();

        if $z0 == 0 goto label6;

        $i0 = specialinvoke r0.<java.util.ArrayList: int indexOf(java.lang.Object)>(r2);

        $i3 = (int) -1;

        if $i0 != $i3 goto label4;

        virtualinvoke r0.<com.jidesoft.utils.CachedArrayList: void uncacheIt(java.lang.Object)>(r2);

        goto label5;

     label4:
        virtualinvoke r0.<com.jidesoft.utils.CachedArrayList: void cacheIt(java.lang.Object,int)>(r2, $i0);

     label5:
        return $i0;

     label6:
        $i5 = (int) -1;

        return $i5;
    }

    protected synchronized void adjustCache(int, int)
    {
        java.lang.Integer $r9, $r10, $r11;
        java.util.Map $r1, $r2, $r3, $r7;
        int $i0, i1, i2, $i3;
        boolean $z0;
        java.util.Iterator $r5;
        java.util.Set $r4;
        com.jidesoft.utils.CachedArrayList r0;
        java.lang.Object $r6, $r8;

        r0 := @this: com.jidesoft.utils.CachedArrayList;

        i1 := @parameter0: int;

        i2 := @parameter1: int;

        $r1 = r0.<com.jidesoft.utils.CachedArrayList: java.util.Map _indexCache>;

        if $r1 == null goto label5;

        $r2 = virtualinvoke r0.<com.jidesoft.utils.CachedArrayList: java.util.Map createCache()>();

        $r3 = r0.<com.jidesoft.utils.CachedArrayList: java.util.Map _indexCache>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set keySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r7 = r0.<com.jidesoft.utils.CachedArrayList: java.util.Map _indexCache>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>($r6);

        $r9 = (java.lang.Integer) $r8;

        $i0 = virtualinvoke $r9.<java.lang.Integer: int intValue()>();

        if $i0 < i1 goto label2;

        $i3 = $i0 + i2;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r11);

        goto label3;

     label2:
        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r10);

     label3:
        goto label1;

     label4:
        r0.<com.jidesoft.utils.CachedArrayList: java.util.Map _indexCache> = $r2;

     label5:
        return;
    }

    protected java.util.Map createCache()
    {
        com.jidesoft.utils.CachedArrayList r1;
        java.util.IdentityHashMap $r0;

        r1 := @this: com.jidesoft.utils.CachedArrayList;

        $r0 = new java.util.IdentityHashMap;

        specialinvoke $r0.<java.util.IdentityHashMap: void <init>()>();

        return $r0;
    }

    public void cacheIt(java.lang.Object, int)
    {
        java.lang.Integer $r4, r6, $r9, r11;
        java.util.Map $r1, $r3, $r7, $r12, $r14;
        int i0, $i1, $i2, $i3, i4, $i6;
        boolean $z0, $z1;
        com.jidesoft.utils.CachedArrayList r0;
        java.lang.Object r2, $r5, $r8, $r10, $r13;

        r0 := @this: com.jidesoft.utils.CachedArrayList;

        r2 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        $r1 = r0.<com.jidesoft.utils.CachedArrayList: java.util.Map _indexCache>;

        if $r1 == null goto label4;

        $r3 = r0.<com.jidesoft.utils.CachedArrayList: java.util.Map _indexCache>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r5 = interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r4);

        r6 = (java.lang.Integer) $r5;

        if r6 == null goto label1;

        $i3 = virtualinvoke r6.<java.lang.Integer: int intValue()>();

        if $i3 >= i0 goto label1;

        $r14 = r0.<com.jidesoft.utils.CachedArrayList: java.util.Map _indexCache>;

        interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r6);

     label1:
        virtualinvoke r0.<com.jidesoft.utils.CachedArrayList: void markDirtyIfNecessary(int)>(i0);

        $z1 = r0.<com.jidesoft.utils.CachedArrayList: boolean _isDirty>;

        if $z1 != 0 goto label4;

        $z0 = virtualinvoke r0.<com.jidesoft.utils.CachedArrayList: boolean isLazyCaching()>();

        if $z0 != 0 goto label4;

        $i1 = virtualinvoke r0.<com.jidesoft.utils.CachedArrayList: int size()>();

        i4 = $i1 - 1;

     label2:
        if i4 <= i0 goto label4;

        $r7 = r0.<com.jidesoft.utils.CachedArrayList: java.util.Map _indexCache>;

        $r8 = virtualinvoke r0.<com.jidesoft.utils.CachedArrayList: java.lang.Object get(int)>(i4);

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i4);

        $r10 = interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r9);

        r11 = (java.lang.Integer) $r10;

        if r11 == null goto label3;

        $i2 = virtualinvoke r11.<java.lang.Integer: int intValue()>();

        if $i2 >= i0 goto label3;

        $r12 = r0.<com.jidesoft.utils.CachedArrayList: java.util.Map _indexCache>;

        $r13 = virtualinvoke r0.<com.jidesoft.utils.CachedArrayList: java.lang.Object get(int)>(i4);

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, r11);

     label3:
        $i6 = (int) -1;

        i4 = i4 + $i6;

        goto label2;

     label4:
        return;
    }

    protected void markDirtyIfNecessary(int)
    {
        com.jidesoft.utils.CachedArrayList r0;
        int i0, $i1, $i2;

        r0 := @this: com.jidesoft.utils.CachedArrayList;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<com.jidesoft.utils.CachedArrayList: int size()>();

        $i2 = $i1 / 2;

        if i0 >= $i2 goto label1;

        r0.<com.jidesoft.utils.CachedArrayList: boolean _isDirty> = 1;

     label1:
        return;
    }

    public void uncacheIt(java.lang.Object)
    {
        com.jidesoft.utils.CachedArrayList r0;
        java.util.Map $r1, $r3;
        java.lang.Object r2;

        r0 := @this: com.jidesoft.utils.CachedArrayList;

        r2 := @parameter0: java.lang.Object;

        $r1 = r0.<com.jidesoft.utils.CachedArrayList: java.util.Map _indexCache>;

        if $r1 == null goto label1;

        $r3 = r0.<com.jidesoft.utils.CachedArrayList: java.util.Map _indexCache>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r2);

     label1:
        return;
    }

    public boolean add(java.lang.Object)
    {
        com.jidesoft.utils.CachedArrayList r0;
        java.util.Map $r2;
        int $i0, $i1;
        java.lang.Object r1;
        boolean $z0, $z1;

        r0 := @this: com.jidesoft.utils.CachedArrayList;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        $z1 = virtualinvoke r0.<com.jidesoft.utils.CachedArrayList: boolean isLazyCaching()>();

        if $z1 != 0 goto label1;

        $r2 = r0.<com.jidesoft.utils.CachedArrayList: java.util.Map _indexCache>;

        if $r2 == null goto label1;

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke r0.<com.jidesoft.utils.CachedArrayList: int size()>();

        $i1 = $i0 - 1;

        virtualinvoke r0.<com.jidesoft.utils.CachedArrayList: void cacheIt(java.lang.Object,int)>(r1, $i1);

     label1:
        return $z0;
    }

    public void add(int, java.lang.Object)
    {
        com.jidesoft.utils.CachedArrayList r0;
        java.util.Map $r2;
        int i0, $i1;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: com.jidesoft.utils.CachedArrayList;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        $i1 = virtualinvoke r0.<com.jidesoft.utils.CachedArrayList: int size()>();

        if i0 != $i1 goto label1;

        virtualinvoke r0.<com.jidesoft.utils.CachedArrayList: boolean add(java.lang.Object)>(r1);

        return;

     label1:
        specialinvoke r0.<java.util.ArrayList: void add(int,java.lang.Object)>(i0, r1);

        $z0 = virtualinvoke r0.<com.jidesoft.utils.CachedArrayList: boolean isLazyCaching()>();

        if $z0 != 0 goto label2;

        virtualinvoke r0.<com.jidesoft.utils.CachedArrayList: void cacheIt(java.lang.Object,int)>(r1, i0);

        goto label3;

     label2:
        $r2 = r0.<com.jidesoft.utils.CachedArrayList: java.util.Map _indexCache>;

        if $r2 == null goto label3;

        virtualinvoke r0.<com.jidesoft.utils.CachedArrayList: void cacheIt(java.lang.Object,int)>(r1, i0);

     label3:
        return;
    }

    private void initializeCache()
    {
        com.jidesoft.utils.CachedArrayList r0;
        java.util.Map $r1, $r2;

        r0 := @this: com.jidesoft.utils.CachedArrayList;

        $r1 = r0.<com.jidesoft.utils.CachedArrayList: java.util.Map _indexCache>;

        if $r1 != null goto label1;

        $r2 = virtualinvoke r0.<com.jidesoft.utils.CachedArrayList: java.util.Map createCache()>();

        r0.<com.jidesoft.utils.CachedArrayList: java.util.Map _indexCache> = $r2;

     label1:
        return;
    }

    public java.lang.Object remove(int)
    {
        com.jidesoft.utils.CachedArrayList r0;
        int i0;
        java.lang.Object $r1;

        r0 := @this: com.jidesoft.utils.CachedArrayList;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<java.util.ArrayList: java.lang.Object remove(int)>(i0);

        if $r1 == null goto label1;

        virtualinvoke r0.<com.jidesoft.utils.CachedArrayList: void uncacheAll()>();

     label1:
        return $r1;
    }

    public boolean remove(java.lang.Object)
    {
        com.jidesoft.utils.CachedArrayList r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: com.jidesoft.utils.CachedArrayList;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<java.util.ArrayList: boolean remove(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.jidesoft.utils.CachedArrayList: void uncacheAll()>();

     label1:
        return $z0;
    }

    public boolean removeAll(java.util.Collection)
    {
        com.jidesoft.utils.CachedArrayList r0;
        java.util.Collection r1;
        boolean $z0;

        r0 := @this: com.jidesoft.utils.CachedArrayList;

        r1 := @parameter0: java.util.Collection;

        virtualinvoke r0.<com.jidesoft.utils.CachedArrayList: void uncacheAll()>();

        $z0 = specialinvoke r0.<java.util.ArrayList: boolean removeAll(java.util.Collection)>(r1);

        return $z0;
    }

    public void clear()
    {
        com.jidesoft.utils.CachedArrayList r0;

        r0 := @this: com.jidesoft.utils.CachedArrayList;

        virtualinvoke r0.<com.jidesoft.utils.CachedArrayList: void uncacheAll()>();

        specialinvoke r0.<java.util.ArrayList: void clear()>();

        return;
    }

    public boolean addAll(java.util.Collection)
    {
        java.util.Iterator $r3;
        java.util.Collection r1;
        com.jidesoft.utils.CachedArrayList r0;
        java.util.Map $r2;
        int $i0, i1;
        java.lang.Object $r4;
        boolean $z0, $z1;

        r0 := @this: com.jidesoft.utils.CachedArrayList;

        r1 := @parameter0: java.util.Collection;

        i1 = virtualinvoke r0.<com.jidesoft.utils.CachedArrayList: int size()>();

        $z0 = specialinvoke r0.<java.util.ArrayList: boolean addAll(java.util.Collection)>(r1);

        if $z0 == 0 goto label2;

        $r2 = r0.<com.jidesoft.utils.CachedArrayList: java.util.Map _indexCache>;

        if $r2 == null goto label2;

        $r3 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $i0 = i1;

        i1 = i1 + 1;

        virtualinvoke r0.<com.jidesoft.utils.CachedArrayList: void cacheIt(java.lang.Object,int)>($r4, $i0);

        goto label1;

     label2:
        return $z0;
    }

    public boolean addAll(int, java.util.Collection)
    {
        com.jidesoft.utils.CachedArrayList r0;
        java.util.Collection r1;
        int i0, $i1;
        boolean $z0, $z1;

        r0 := @this: com.jidesoft.utils.CachedArrayList;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.Collection;

        $i1 = virtualinvoke r0.<com.jidesoft.utils.CachedArrayList: int size()>();

        if i0 != $i1 goto label1;

        $z1 = virtualinvoke r0.<com.jidesoft.utils.CachedArrayList: boolean addAll(java.util.Collection)>(r1);

        return $z1;

     label1:
        $z0 = specialinvoke r0.<java.util.ArrayList: boolean addAll(int,java.util.Collection)>(i0, r1);

        if $z0 == 0 goto label2;

        virtualinvoke r0.<com.jidesoft.utils.CachedArrayList: void uncacheAll()>();

     label2:
        return $z0;
    }

    public java.lang.Object set(int, java.lang.Object)
    {
        com.jidesoft.utils.CachedArrayList r0;
        int i0;
        java.lang.Object r1, $r2, $r3;
        boolean $z0;

        r0 := @this: com.jidesoft.utils.CachedArrayList;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        $z0 = virtualinvoke r0.<com.jidesoft.utils.CachedArrayList: boolean isLazyCaching()>();

        if $z0 != 0 goto label1;

        virtualinvoke r0.<com.jidesoft.utils.CachedArrayList: void uncacheAll()>();

        $r3 = specialinvoke r0.<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>(i0, r1);

        return $r3;

     label1:
        $r2 = specialinvoke r0.<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>(i0, r1);

        return $r2;
    }

    public void invalidateCache()
    {
        com.jidesoft.utils.CachedArrayList r0;

        r0 := @this: com.jidesoft.utils.CachedArrayList;

        virtualinvoke r0.<com.jidesoft.utils.CachedArrayList: void uncacheAll()>();

        return;
    }

    public void uncacheAll()
    {
        com.jidesoft.utils.CachedArrayList r0;
        java.util.Map $r1, $r2;

        r0 := @this: com.jidesoft.utils.CachedArrayList;

        $r1 = r0.<com.jidesoft.utils.CachedArrayList: java.util.Map _indexCache>;

        if $r1 == null goto label1;

        $r2 = r0.<com.jidesoft.utils.CachedArrayList: java.util.Map _indexCache>;

        interfaceinvoke $r2.<java.util.Map: void clear()>();

        r0.<com.jidesoft.utils.CachedArrayList: java.util.Map _indexCache> = null;

     label1:
        return;
    }

    public void cacheAll()
    {
        java.lang.Integer $r4;
        com.jidesoft.utils.CachedArrayList r0;
        java.util.Map $r1, $r2;
        int $i0, i1, $i3;
        java.lang.Object $r3;

        r0 := @this: com.jidesoft.utils.CachedArrayList;

        $r1 = virtualinvoke r0.<com.jidesoft.utils.CachedArrayList: java.util.Map createCache()>();

        r0.<com.jidesoft.utils.CachedArrayList: java.util.Map _indexCache> = $r1;

        $i0 = virtualinvoke r0.<com.jidesoft.utils.CachedArrayList: int size()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label2;

        $r2 = r0.<com.jidesoft.utils.CachedArrayList: java.util.Map _indexCache>;

        $r3 = virtualinvoke r0.<com.jidesoft.utils.CachedArrayList: java.lang.Object get(int)>(i1);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r4);

        $i3 = (int) -1;

        i1 = i1 + $i3;

        goto label1;

     label2:
        r0.<com.jidesoft.utils.CachedArrayList: boolean _isDirty> = 0;

        return;
    }

    public boolean isLazyCaching()
    {
        com.jidesoft.utils.CachedArrayList r0;
        boolean $z0;

        r0 := @this: com.jidesoft.utils.CachedArrayList;

        $z0 = r0.<com.jidesoft.utils.CachedArrayList: boolean _lazyCaching>;

        return $z0;
    }

    public void setLazyCaching(boolean)
    {
        com.jidesoft.utils.CachedArrayList r0;
        boolean z0;

        r0 := @this: com.jidesoft.utils.CachedArrayList;

        z0 := @parameter0: boolean;

        r0.<com.jidesoft.utils.CachedArrayList: boolean _lazyCaching> = z0;

        return;
    }

    protected void removeRange(int, int)
    {
        int i0, i1;
        com.jidesoft.utils.CachedArrayList r0;

        r0 := @this: com.jidesoft.utils.CachedArrayList;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 != i1 goto label1;

        virtualinvoke r0.<com.jidesoft.utils.CachedArrayList: java.lang.Object remove(int)>(i0);

        goto label2;

     label1:
        specialinvoke r0.<java.util.ArrayList: void removeRange(int,int)>(i0, i1);

        virtualinvoke r0.<com.jidesoft.utils.CachedArrayList: void uncacheAll()>();

     label2:
        return;
    }

    public static void <clinit>()
    {
        <com.jidesoft.utils.CachedArrayList: long serialVersionUID> = 3835017332487313880L;

        return;
    }
}
