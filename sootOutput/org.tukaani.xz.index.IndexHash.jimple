public class org.tukaani.xz.index.IndexHash extends org.tukaani.xz.index.IndexBase
{
    private org.tukaani.xz.check.Check hash;

    public void <init>()
    {
        org.tukaani.xz.CorruptedInputException $r1;
        org.tukaani.xz.check.SHA256 $r2;
        org.tukaani.xz.index.IndexHash r0;
        java.security.NoSuchAlgorithmException $r3;
        org.tukaani.xz.check.CRC32 $r4;

        r0 := @this: org.tukaani.xz.index.IndexHash;

        $r1 = new org.tukaani.xz.CorruptedInputException;

        specialinvoke $r1.<org.tukaani.xz.CorruptedInputException: void <init>()>();

        specialinvoke r0.<org.tukaani.xz.index.IndexBase: void <init>(org.tukaani.xz.XZIOException)>($r1);

     label1:
        $r2 = new org.tukaani.xz.check.SHA256;

        specialinvoke $r2.<org.tukaani.xz.check.SHA256: void <init>()>();

        r0.<org.tukaani.xz.index.IndexHash: org.tukaani.xz.check.Check hash> = $r2;

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new org.tukaani.xz.check.CRC32;

        specialinvoke $r4.<org.tukaani.xz.check.CRC32: void <init>()>();

        r0.<org.tukaani.xz.index.IndexHash: org.tukaani.xz.check.Check hash> = $r4;

     label4:
        return;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
    }

    public void add(long, long) throws org.tukaani.xz.XZIOException
    {
        byte[] $r3;
        org.tukaani.xz.check.Check $r2;
        org.tukaani.xz.index.IndexHash r0;
        long l0, l1;
        java.nio.ByteBuffer $r1;

        r0 := @this: org.tukaani.xz.index.IndexHash;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        specialinvoke r0.<org.tukaani.xz.index.IndexBase: void add(long,long)>(l0, l1);

        $r1 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(16);

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer putLong(long)>(l0);

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer putLong(long)>(l1);

        $r2 = r0.<org.tukaani.xz.index.IndexHash: org.tukaani.xz.check.Check hash>;

        $r3 = virtualinvoke $r1.<java.nio.ByteBuffer: byte[] array()>();

        virtualinvoke $r2.<org.tukaani.xz.check.Check: void update(byte[])>($r3);

        return;
    }

    public void validate(java.io.InputStream) throws java.io.IOException
    {
        byte[] $r6, $r8;
        java.util.zip.CheckedInputStream $r18;
        org.tukaani.xz.index.IndexHash r3, $r20;
        byte $b2, $b4, $b7, $b10, $b13, $b20, $b26, $b29, $b32;
        boolean $z0;
        org.tukaani.xz.XZIOException $r13;
        java.io.DataInputStream $r24;
        org.tukaani.xz.check.Check $r5, $r7;
        long $l0, $l1, $l3, $l5, $l6, $l8, $l9, $l11, $l12, $l14, $l16, $l17, $l19, $l22, $l23, $l24, $l25, $l27, $l28, $l30, $l31, l33;
        int $i15, $i18, $i21, i34, i35, $i36, $i37, $i38, $i39, $i41;
        org.tukaani.xz.CorruptedInputException $r19, $r21, $r22, $r23, $r25, $r26;
        java.util.zip.CRC32 $r17;
        java.io.InputStream r2;

        r3 := @this: org.tukaani.xz.index.IndexHash;

        r2 := @parameter0: java.io.InputStream;

        $r17 = new java.util.zip.CRC32;

        specialinvoke $r17.<java.util.zip.CRC32: void <init>()>();

        virtualinvoke $r17.<java.util.zip.CRC32: void update(int)>(0);

        $r18 = new java.util.zip.CheckedInputStream;

        specialinvoke $r18.<java.util.zip.CheckedInputStream: void <init>(java.io.InputStream,java.util.zip.Checksum)>(r2, $r17);

        $l0 = staticinvoke <org.tukaani.xz.common.DecoderUtil: long decodeVLI(java.io.InputStream)>($r18);

        $l1 = r3.<org.tukaani.xz.index.IndexHash: long recordCount>;

        $b2 = $l0 cmp $l1;

        if $b2 == 0 goto label01;

        $r19 = new org.tukaani.xz.CorruptedInputException;

        specialinvoke $r19.<org.tukaani.xz.CorruptedInputException: void <init>(java.lang.String)>("XZ Index is corrupt");

        throw $r19;

     label01:
        $r20 = new org.tukaani.xz.index.IndexHash;

        specialinvoke $r20.<org.tukaani.xz.index.IndexHash: void <init>()>();

        l33 = 0L;

     label02:
        $l3 = r3.<org.tukaani.xz.index.IndexHash: long recordCount>;

        $b4 = l33 cmp $l3;

        $i36 = (int) $b4;

        if $i36 >= 0 goto label09;

        $l22 = staticinvoke <org.tukaani.xz.common.DecoderUtil: long decodeVLI(java.io.InputStream)>($r18);

        $l23 = staticinvoke <org.tukaani.xz.common.DecoderUtil: long decodeVLI(java.io.InputStream)>($r18);

     label03:
        virtualinvoke $r20.<org.tukaani.xz.index.IndexHash: void add(long,long)>($l22, $l23);

     label04:
        goto label06;

     label05:
        $r13 := @caughtexception;

        $r21 = new org.tukaani.xz.CorruptedInputException;

        specialinvoke $r21.<org.tukaani.xz.CorruptedInputException: void <init>(java.lang.String)>("XZ Index is corrupt");

        throw $r21;

     label06:
        $l25 = $r20.<org.tukaani.xz.index.IndexHash: long blocksSum>;

        $l24 = r3.<org.tukaani.xz.index.IndexHash: long blocksSum>;

        $b26 = $l25 cmp $l24;

        $i37 = (int) $b26;

        if $i37 > 0 goto label07;

        $l28 = $r20.<org.tukaani.xz.index.IndexHash: long uncompressedSum>;

        $l27 = r3.<org.tukaani.xz.index.IndexHash: long uncompressedSum>;

        $b29 = $l28 cmp $l27;

        $i38 = (int) $b29;

        if $i38 > 0 goto label07;

        $l31 = $r20.<org.tukaani.xz.index.IndexHash: long indexListSize>;

        $l30 = r3.<org.tukaani.xz.index.IndexHash: long indexListSize>;

        $b32 = $l31 cmp $l30;

        $i39 = (int) $b32;

        if $i39 <= 0 goto label08;

     label07:
        $r22 = new org.tukaani.xz.CorruptedInputException;

        specialinvoke $r22.<org.tukaani.xz.CorruptedInputException: void <init>(java.lang.String)>("XZ Index is corrupt");

        throw $r22;

     label08:
        l33 = l33 + 1L;

        goto label02;

     label09:
        $l6 = $r20.<org.tukaani.xz.index.IndexHash: long blocksSum>;

        $l5 = r3.<org.tukaani.xz.index.IndexHash: long blocksSum>;

        $b7 = $l6 cmp $l5;

        if $b7 != 0 goto label10;

        $l9 = $r20.<org.tukaani.xz.index.IndexHash: long uncompressedSum>;

        $l8 = r3.<org.tukaani.xz.index.IndexHash: long uncompressedSum>;

        $b10 = $l9 cmp $l8;

        if $b10 != 0 goto label10;

        $l12 = $r20.<org.tukaani.xz.index.IndexHash: long indexListSize>;

        $l11 = r3.<org.tukaani.xz.index.IndexHash: long indexListSize>;

        $b13 = $l12 cmp $l11;

        if $b13 != 0 goto label10;

        $r5 = $r20.<org.tukaani.xz.index.IndexHash: org.tukaani.xz.check.Check hash>;

        $r6 = virtualinvoke $r5.<org.tukaani.xz.check.Check: byte[] finish()>();

        $r7 = r3.<org.tukaani.xz.index.IndexHash: org.tukaani.xz.check.Check hash>;

        $r8 = virtualinvoke $r7.<org.tukaani.xz.check.Check: byte[] finish()>();

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r6, $r8);

        if $z0 != 0 goto label11;

     label10:
        $r23 = new org.tukaani.xz.CorruptedInputException;

        specialinvoke $r23.<org.tukaani.xz.CorruptedInputException: void <init>(java.lang.String)>("XZ Index is corrupt");

        throw $r23;

     label11:
        $r24 = new java.io.DataInputStream;

        specialinvoke $r24.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r18);

        i34 = virtualinvoke r3.<org.tukaani.xz.index.IndexHash: int getIndexPaddingSize()>();

     label12:
        if i34 <= 0 goto label14;

        $i21 = virtualinvoke $r24.<java.io.DataInputStream: int readUnsignedByte()>();

        if $i21 == 0 goto label13;

        $r25 = new org.tukaani.xz.CorruptedInputException;

        specialinvoke $r25.<org.tukaani.xz.CorruptedInputException: void <init>(java.lang.String)>("XZ Index is corrupt");

        throw $r25;

     label13:
        $i41 = (int) -1;

        i34 = i34 + $i41;

        goto label12;

     label14:
        $l14 = virtualinvoke $r17.<java.util.zip.CRC32: long getValue()>();

        i35 = 0;

     label15:
        if i35 >= 4 goto label17;

        $i15 = i35 * 8;

        $l16 = $l14 >>> $i15;

        $l17 = $l16 & 255L;

        $i18 = virtualinvoke $r24.<java.io.DataInputStream: int readUnsignedByte()>();

        $l19 = (long) $i18;

        $b20 = $l17 cmp $l19;

        if $b20 == 0 goto label16;

        $r26 = new org.tukaani.xz.CorruptedInputException;

        specialinvoke $r26.<org.tukaani.xz.CorruptedInputException: void <init>(java.lang.String)>("XZ Index is corrupt");

        throw $r26;

     label16:
        i35 = i35 + 1;

        goto label15;

     label17:
        return;

        catch org.tukaani.xz.XZIOException from label03 to label04 with label05;
    }
}
