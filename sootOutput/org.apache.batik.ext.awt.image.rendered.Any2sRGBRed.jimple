public class org.apache.batik.ext.awt.image.rendered.Any2sRGBRed extends org.apache.batik.ext.awt.image.rendered.AbstractRed
{
    boolean srcIsLsRGB;
    private static final double GAMMA;
    private static final int[] linearToSRGBLut;

    public void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed)
    {
        java.awt.Rectangle $r2;
        java.awt.color.ColorSpace $r6, $r7;
        java.awt.image.SampleModel $r4;
        org.apache.batik.ext.awt.image.rendered.CachableRed r1;
        java.awt.image.ColorModel $r3, $r5;
        int $i0, $i1;
        org.apache.batik.ext.awt.image.rendered.Any2sRGBRed r0;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.Any2sRGBRed;

        r1 := @parameter0: org.apache.batik.ext.awt.image.rendered.CachableRed;

        $r2 = interfaceinvoke r1.<org.apache.batik.ext.awt.image.rendered.CachableRed: java.awt.Rectangle getBounds()>();

        $r3 = staticinvoke <org.apache.batik.ext.awt.image.rendered.Any2sRGBRed: java.awt.image.ColorModel fixColorModel(org.apache.batik.ext.awt.image.rendered.CachableRed)>(r1);

        $r4 = staticinvoke <org.apache.batik.ext.awt.image.rendered.Any2sRGBRed: java.awt.image.SampleModel fixSampleModel(org.apache.batik.ext.awt.image.rendered.CachableRed)>(r1);

        $i0 = interfaceinvoke r1.<java.awt.image.RenderedImage: int getTileGridXOffset()>();

        $i1 = interfaceinvoke r1.<java.awt.image.RenderedImage: int getTileGridYOffset()>();

        specialinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed,java.awt.Rectangle,java.awt.image.ColorModel,java.awt.image.SampleModel,int,int,java.util.Map)>(r1, $r2, $r3, $r4, $i0, $i1, null);

        r0.<org.apache.batik.ext.awt.image.rendered.Any2sRGBRed: boolean srcIsLsRGB> = 0;

        $r5 = interfaceinvoke r1.<java.awt.image.RenderedImage: java.awt.image.ColorModel getColorModel()>();

        if $r5 != null goto label1;

        return;

     label1:
        $r6 = virtualinvoke $r5.<java.awt.image.ColorModel: java.awt.color.ColorSpace getColorSpace()>();

        $r7 = staticinvoke <java.awt.color.ColorSpace: java.awt.color.ColorSpace getInstance(int)>(1004);

        if $r6 != $r7 goto label2;

        r0.<org.apache.batik.ext.awt.image.rendered.Any2sRGBRed: boolean srcIsLsRGB> = 1;

     label2:
        return;
    }

    public static boolean is_INT_PACK_COMP(java.awt.image.SampleModel)
    {
        java.awt.image.SampleModel r0;
        int[] $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9;
        java.awt.image.SinglePixelPackedSampleModel r1;
        boolean $z0;

        r0 := @parameter0: java.awt.image.SampleModel;

        $z0 = r0 instanceof java.awt.image.SinglePixelPackedSampleModel;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $i0 = virtualinvoke r0.<java.awt.image.SampleModel: int getDataType()>();

        if $i0 == 3 goto label2;

        return 0;

     label2:
        r1 = (java.awt.image.SinglePixelPackedSampleModel) r0;

        $r2 = virtualinvoke r1.<java.awt.image.SinglePixelPackedSampleModel: int[] getBitMasks()>();

        $i1 = lengthof $r2;

        if $i1 == 3 goto label3;

        $i7 = lengthof $r2;

        if $i7 == 4 goto label3;

        return 0;

     label3:
        $i2 = $r2[0];

        if $i2 == 16711680 goto label4;

        return 0;

     label4:
        $i3 = $r2[1];

        $i9 = (int) 65280;

        if $i3 == $i9 goto label5;

        return 0;

     label5:
        $i4 = $r2[2];

        if $i4 == 255 goto label6;

        return 0;

     label6:
        $i5 = lengthof $r2;

        if $i5 != 4 goto label7;

        $i6 = $r2[3];

        if $i6 == -16777216 goto label7;

        return 0;

     label7:
        return 1;
    }

    public static java.awt.image.WritableRaster applyLut_INT(java.awt.image.WritableRaster, int[])
    {
        int[][] $r5;
        java.awt.image.SampleModel $r1;
        int[] r6, r7;
        java.awt.image.DataBuffer $r3;
        java.awt.image.DataBufferInt r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, $i9, $i10, $i11, $i12, i13, i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, i29, i30;
        java.awt.image.SinglePixelPackedSampleModel r2;
        java.awt.image.WritableRaster r0;

        r0 := @parameter0: java.awt.image.WritableRaster;

        r7 := @parameter1: int[];

        $r1 = virtualinvoke r0.<java.awt.image.Raster: java.awt.image.SampleModel getSampleModel()>();

        r2 = (java.awt.image.SinglePixelPackedSampleModel) $r1;

        $r3 = virtualinvoke r0.<java.awt.image.Raster: java.awt.image.DataBuffer getDataBuffer()>();

        r4 = (java.awt.image.DataBufferInt) $r3;

        $i0 = virtualinvoke r4.<java.awt.image.DataBuffer: int getOffset()>();

        $i1 = virtualinvoke r0.<java.awt.image.Raster: int getMinX()>();

        $i2 = virtualinvoke r0.<java.awt.image.Raster: int getSampleModelTranslateX()>();

        $i3 = $i1 - $i2;

        $i4 = virtualinvoke r0.<java.awt.image.Raster: int getMinY()>();

        $i5 = virtualinvoke r0.<java.awt.image.Raster: int getSampleModelTranslateY()>();

        $i6 = $i4 - $i5;

        $i7 = virtualinvoke r2.<java.awt.image.SinglePixelPackedSampleModel: int getOffset(int,int)>($i3, $i6);

        i8 = $i0 + $i7;

        $r5 = virtualinvoke r4.<java.awt.image.DataBufferInt: int[][] getBankData()>();

        r6 = $r5[0];

        $i9 = virtualinvoke r0.<java.awt.image.Raster: int getWidth()>();

        $i10 = virtualinvoke r0.<java.awt.image.Raster: int getHeight()>();

        $i11 = virtualinvoke r2.<java.awt.image.SinglePixelPackedSampleModel: int getScanlineStride()>();

        i29 = 0;

        goto label4;

     label1:
        $i12 = i29 * $i11;

        i30 = i8 + $i12;

        i13 = i30 + $i9;

        goto label3;

     label2:
        i14 = r6[i30];

        $i19 = i14 & -16777216;

        $i15 = i14 >>> 16;

        $i16 = $i15 & 255;

        $i17 = r7[$i16];

        $i18 = $i17 << 16;

        $i24 = $i19 | $i18;

        $i20 = i14 >>> 8;

        $i21 = $i20 & 255;

        $i22 = r7[$i21];

        $i23 = $i22 << 8;

        $i27 = $i24 | $i23;

        $i25 = i14 & 255;

        $i26 = r7[$i25];

        $i28 = $i27 | $i26;

        r6[i30] = $i28;

        i30 = i30 + 1;

     label3:
        if i30 < i13 goto label2;

        i29 = i29 + 1;

     label4:
        if i29 < $i10 goto label1;

        return r0;
    }

    public java.awt.image.WritableRaster copyData(java.awt.image.WritableRaster)
    {
        java.awt.image.SampleModel $r5, $r22, $r49;
        java.awt.image.ColorConvertOp $r16;
        java.util.Vector $r1;
        org.apache.batik.ext.awt.image.rendered.CachableRed r3;
        java.awt.image.BandCombineOp $r30, $r55;
        java.lang.Throwable $r51;
        float[] $r25, $r26, $r27, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r44, $r45, $r46, $r47, $r48;
        java.awt.image.Raster $r13, $r24, $r29, $r54;
        int[] $r50;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.awt.image.BufferedImage $r14, $r18;
        java.awt.Rectangle $r12, $r23, $r28, $r53;
        java.awt.color.ColorSpace $r6, $r7, $r9, $r10, $r17, $r20;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8;
        float[][] r52, r56;
        java.awt.image.ColorModel $r4, $r8, r58;
        java.lang.Object $r2;
        java.awt.image.WritableRaster r11, $r15, $r19, $r21, r57;
        org.apache.batik.ext.awt.image.rendered.Any2sRGBRed r0;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.Any2sRGBRed;

        r11 := @parameter0: java.awt.image.WritableRaster;

        $r1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.util.Vector getSources()>();

        $r2 = virtualinvoke $r1.<java.util.Vector: java.lang.Object get(int)>(0);

        r3 = (org.apache.batik.ext.awt.image.rendered.CachableRed) $r2;

        $r4 = interfaceinvoke r3.<java.awt.image.RenderedImage: java.awt.image.ColorModel getColorModel()>();

        $r5 = interfaceinvoke r3.<java.awt.image.RenderedImage: java.awt.image.SampleModel getSampleModel()>();

        $z0 = r0.<org.apache.batik.ext.awt.image.rendered.Any2sRGBRed: boolean srcIsLsRGB>;

        if $z0 == 0 goto label02;

        $r49 = virtualinvoke r11.<java.awt.image.Raster: java.awt.image.SampleModel getSampleModel()>();

        $z4 = staticinvoke <org.apache.batik.ext.awt.image.rendered.Any2sRGBRed: boolean is_INT_PACK_COMP(java.awt.image.SampleModel)>($r49);

        if $z4 == 0 goto label02;

        interfaceinvoke r3.<java.awt.image.RenderedImage: java.awt.image.WritableRaster copyData(java.awt.image.WritableRaster)>(r11);

        $z5 = virtualinvoke $r4.<java.awt.image.ColorModel: boolean hasAlpha()>();

        if $z5 == 0 goto label01;

        staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: java.awt.image.ColorModel coerceData(java.awt.image.WritableRaster,java.awt.image.ColorModel,boolean)>(r11, $r4, 0);

     label01:
        $r50 = <org.apache.batik.ext.awt.image.rendered.Any2sRGBRed: int[] linearToSRGBLut>;

        staticinvoke <org.apache.batik.ext.awt.image.rendered.Any2sRGBRed: java.awt.image.WritableRaster applyLut_INT(java.awt.image.WritableRaster,int[])>(r11, $r50);

        return r11;

     label02:
        if $r4 != null goto label08;

        $i6 = virtualinvoke $r5.<java.awt.image.SampleModel: int getNumBands()>();

        tableswitch($i6)
        {
            case 1: goto label03;
            case 2: goto label04;
            case 3: goto label05;
            default: goto label06;
        };

     label03:
        r52 = newmultiarray (float)[3][1];

        $r42 = r52[0];

        $r42[0] = 1.0F;

        $r43 = r52[1];

        $r43[0] = 1.0F;

        $r44 = r52[2];

        $r44[0] = 1.0F;

        goto label07;

     label04:
        r52 = newmultiarray (float)[4][2];

        $r38 = r52[0];

        $r38[0] = 1.0F;

        $r39 = r52[1];

        $r39[0] = 1.0F;

        $r40 = r52[2];

        $r40[0] = 1.0F;

        $r41 = r52[3];

        $r41[1] = 1.0F;

        goto label07;

     label05:
        r52 = newmultiarray (float)[3][3];

        $r35 = r52[0];

        $r35[0] = 1.0F;

        $r36 = r52[1];

        $r36[1] = 1.0F;

        $r37 = r52[2];

        $r37[2] = 1.0F;

        goto label07;

     label06:
        $i7 = virtualinvoke $r5.<java.awt.image.SampleModel: int getNumBands()>();

        r52 = newmultiarray (float)[4][$i7];

        $r45 = r52[0];

        $r45[0] = 1.0F;

        $r46 = r52[1];

        $r46[1] = 1.0F;

        $r47 = r52[2];

        $r47[2] = 1.0F;

        $r48 = r52[3];

        $r48[3] = 1.0F;

     label07:
        $r53 = virtualinvoke r11.<java.awt.image.Raster: java.awt.Rectangle getBounds()>();

        $r54 = interfaceinvoke r3.<java.awt.image.RenderedImage: java.awt.image.Raster getData(java.awt.Rectangle)>($r53);

        $r55 = new java.awt.image.BandCombineOp;

        specialinvoke $r55.<java.awt.image.BandCombineOp: void <init>(float[][],java.awt.RenderingHints)>(r52, null);

        virtualinvoke $r55.<java.awt.image.BandCombineOp: java.awt.image.WritableRaster filter(java.awt.image.Raster,java.awt.image.WritableRaster)>($r54, r11);

        return r11;

     label08:
        $r6 = virtualinvoke $r4.<java.awt.image.ColorModel: java.awt.color.ColorSpace getColorSpace()>();

        $r7 = staticinvoke <java.awt.color.ColorSpace: java.awt.color.ColorSpace getInstance(int)>(1003);

        if $r6 != $r7 goto label16;

     label09:
        $i5 = virtualinvoke $r5.<java.awt.image.SampleModel: int getNumBands()>();

        lookupswitch($i5)
        {
            case 1: goto label10;
            case 2: goto label11;
            default: goto label11;
        };

     label10:
        r56 = newmultiarray (float)[3][1];

        $r25 = r56[0];

        $r25[0] = 1.0F;

        $r26 = r56[1];

        $r26[0] = 1.0F;

        $r27 = r56[2];

        $r27[0] = 1.0F;

        goto label12;

     label11:
        r56 = newmultiarray (float)[4][2];

        $r31 = r56[0];

        $r31[0] = 1.0F;

        $r32 = r56[1];

        $r32[0] = 1.0F;

        $r33 = r56[2];

        $r33[0] = 1.0F;

        $r34 = r56[3];

        $r34[1] = 1.0F;

     label12:
        $r28 = virtualinvoke r11.<java.awt.image.Raster: java.awt.Rectangle getBounds()>();

        $r29 = interfaceinvoke r3.<java.awt.image.RenderedImage: java.awt.image.Raster getData(java.awt.Rectangle)>($r28);

        $r30 = new java.awt.image.BandCombineOp;

        specialinvoke $r30.<java.awt.image.BandCombineOp: void <init>(float[][],java.awt.RenderingHints)>(r56, null);

        virtualinvoke $r30.<java.awt.image.BandCombineOp: java.awt.image.WritableRaster filter(java.awt.image.Raster,java.awt.image.WritableRaster)>($r29, r11);

     label13:
        goto label15;

     label14:
        $r51 := @caughtexception;

        virtualinvoke $r51.<java.lang.Throwable: void printStackTrace()>();

     label15:
        return r11;

     label16:
        $r8 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.image.ColorModel getColorModel()>();

        $r9 = virtualinvoke $r4.<java.awt.image.ColorModel: java.awt.color.ColorSpace getColorSpace()>();

        $r10 = virtualinvoke $r8.<java.awt.image.ColorModel: java.awt.color.ColorSpace getColorSpace()>();

        if $r9 != $r10 goto label19;

        $z3 = staticinvoke <org.apache.batik.ext.awt.image.rendered.Any2sRGBRed: boolean is_INT_PACK_COMP(java.awt.image.SampleModel)>($r5);

        if $z3 == 0 goto label17;

        interfaceinvoke r3.<java.awt.image.RenderedImage: java.awt.image.WritableRaster copyData(java.awt.image.WritableRaster)>(r11);

        goto label18;

     label17:
        $r23 = virtualinvoke r11.<java.awt.image.Raster: java.awt.Rectangle getBounds()>();

        $r24 = interfaceinvoke r3.<java.awt.image.RenderedImage: java.awt.image.Raster getData(java.awt.Rectangle)>($r23);

        staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: void copyData(java.awt.image.Raster,java.awt.image.WritableRaster)>($r24, r11);

     label18:
        return r11;

     label19:
        $r12 = virtualinvoke r11.<java.awt.image.Raster: java.awt.Rectangle getBounds()>();

        $r13 = interfaceinvoke r3.<java.awt.image.RenderedImage: java.awt.image.Raster getData(java.awt.Rectangle)>($r12);

        r57 = (java.awt.image.WritableRaster) $r13;

        r58 = $r4;

        $z1 = virtualinvoke $r4.<java.awt.image.ColorModel: boolean hasAlpha()>();

        if $z1 == 0 goto label20;

        r58 = staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: java.awt.image.ColorModel coerceData(java.awt.image.WritableRaster,java.awt.image.ColorModel,boolean)>(r57, $r4, 0);

     label20:
        $r14 = new java.awt.image.BufferedImage;

        $r15 = virtualinvoke r57.<java.awt.image.WritableRaster: java.awt.image.WritableRaster createWritableTranslatedChild(int,int)>(0, 0);

        specialinvoke $r14.<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>(r58, $r15, 0, null);

        $r16 = new java.awt.image.ColorConvertOp;

        $r17 = virtualinvoke $r8.<java.awt.image.ColorModel: java.awt.color.ColorSpace getColorSpace()>();

        specialinvoke $r16.<java.awt.image.ColorConvertOp: void <init>(java.awt.color.ColorSpace,java.awt.RenderingHints)>($r17, null);

        $r18 = virtualinvoke $r16.<java.awt.image.ColorConvertOp: java.awt.image.BufferedImage filter(java.awt.image.BufferedImage,java.awt.image.BufferedImage)>($r14, null);

        $r19 = virtualinvoke r11.<java.awt.image.WritableRaster: java.awt.image.WritableRaster createWritableTranslatedChild(int,int)>(0, 0);

        i8 = 0;

        goto label22;

     label21:
        $r21 = virtualinvoke $r18.<java.awt.image.BufferedImage: java.awt.image.WritableRaster getRaster()>();

        staticinvoke <org.apache.batik.ext.awt.image.rendered.AbstractRed: void copyBand(java.awt.image.Raster,int,java.awt.image.WritableRaster,int)>($r21, i8, $r19, i8);

        i8 = i8 + 1;

     label22:
        $r20 = virtualinvoke $r8.<java.awt.image.ColorModel: java.awt.color.ColorSpace getColorSpace()>();

        $i0 = virtualinvoke $r20.<java.awt.color.ColorSpace: int getNumComponents()>();

        if i8 < $i0 goto label21;

        $z2 = virtualinvoke $r8.<java.awt.image.ColorModel: boolean hasAlpha()>();

        if $z2 == 0 goto label23;

        $i1 = virtualinvoke $r5.<java.awt.image.SampleModel: int getNumBands()>();

        $i2 = $i1 - 1;

        $r22 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.image.SampleModel getSampleModel()>();

        $i3 = virtualinvoke $r22.<java.awt.image.SampleModel: int getNumBands()>();

        $i4 = $i3 - 1;

        staticinvoke <org.apache.batik.ext.awt.image.rendered.AbstractRed: void copyBand(java.awt.image.Raster,int,java.awt.image.WritableRaster,int)>(r57, $i2, r11, $i4);

     label23:
        return r11;

        catch java.lang.Throwable from label09 to label13 with label14;
    }

    protected static java.awt.image.ColorModel fixColorModel(org.apache.batik.ext.awt.image.rendered.CachableRed)
    {
        java.awt.image.SampleModel $r2;
        org.apache.batik.ext.awt.image.rendered.CachableRed r0;
        java.awt.image.ColorModel $r1, $r3, $r4, $r5, $r6, $r7, $r8;
        int $i0;
        boolean $z0;

        r0 := @parameter0: org.apache.batik.ext.awt.image.rendered.CachableRed;

        $r1 = interfaceinvoke r0.<java.awt.image.RenderedImage: java.awt.image.ColorModel getColorModel()>();

        if $r1 == null goto label2;

        $z0 = virtualinvoke $r1.<java.awt.image.ColorModel: boolean hasAlpha()>();

        if $z0 == 0 goto label1;

        $r8 = <org.apache.batik.ext.awt.image.GraphicsUtil: java.awt.image.ColorModel sRGB_Unpre>;

        return $r8;

     label1:
        $r7 = <org.apache.batik.ext.awt.image.GraphicsUtil: java.awt.image.ColorModel sRGB>;

        return $r7;

     label2:
        $r2 = interfaceinvoke r0.<java.awt.image.RenderedImage: java.awt.image.SampleModel getSampleModel()>();

        $i0 = virtualinvoke $r2.<java.awt.image.SampleModel: int getNumBands()>();

        tableswitch($i0)
        {
            case 1: goto label3;
            case 2: goto label4;
            case 3: goto label5;
            default: goto label6;
        };

     label3:
        $r5 = <org.apache.batik.ext.awt.image.GraphicsUtil: java.awt.image.ColorModel sRGB>;

        return $r5;

     label4:
        $r4 = <org.apache.batik.ext.awt.image.GraphicsUtil: java.awt.image.ColorModel sRGB_Unpre>;

        return $r4;

     label5:
        $r3 = <org.apache.batik.ext.awt.image.GraphicsUtil: java.awt.image.ColorModel sRGB>;

        return $r3;

     label6:
        $r6 = <org.apache.batik.ext.awt.image.GraphicsUtil: java.awt.image.ColorModel sRGB_Unpre>;

        return $r6;
    }

    protected static java.awt.image.SampleModel fixSampleModel(org.apache.batik.ext.awt.image.rendered.CachableRed)
    {
        java.awt.image.SampleModel $r1;
        org.apache.batik.ext.awt.image.rendered.CachableRed r0;
        java.awt.image.ColorModel $r2;
        int[] $r4, $r6;
        int $i0, $i1, $i2, $i3, $i4, $i6, $i8;
        java.awt.image.SinglePixelPackedSampleModel $r7, $r8;
        boolean z0;

        r0 := @parameter0: org.apache.batik.ext.awt.image.rendered.CachableRed;

        $r1 = interfaceinvoke r0.<java.awt.image.RenderedImage: java.awt.image.SampleModel getSampleModel()>();

        $r2 = interfaceinvoke r0.<java.awt.image.RenderedImage: java.awt.image.ColorModel getColorModel()>();

        if $r2 == null goto label1;

        z0 = virtualinvoke $r2.<java.awt.image.ColorModel: boolean hasAlpha()>();

        goto label4;

     label1:
        $i0 = virtualinvoke $r1.<java.awt.image.SampleModel: int getNumBands()>();

        lookupswitch($i0)
        {
            case 1: goto label2;
            case 3: goto label2;
            default: goto label3;
        };

     label2:
        z0 = 0;

        goto label4;

     label3:
        z0 = 1;

     label4:
        if z0 == 0 goto label5;

        $r7 = new java.awt.image.SinglePixelPackedSampleModel;

        $i3 = virtualinvoke $r1.<java.awt.image.SampleModel: int getWidth()>();

        $i4 = virtualinvoke $r1.<java.awt.image.SampleModel: int getHeight()>();

        $r6 = newarray (int)[4];

        $r6[0] = 16711680;

        $i6 = (int) 65280;

        $r6[1] = $i6;

        $r6[2] = 255;

        $r6[3] = -16777216;

        specialinvoke $r7.<java.awt.image.SinglePixelPackedSampleModel: void <init>(int,int,int,int[])>(3, $i3, $i4, $r6);

        return $r7;

     label5:
        $r8 = new java.awt.image.SinglePixelPackedSampleModel;

        $i1 = virtualinvoke $r1.<java.awt.image.SampleModel: int getWidth()>();

        $i2 = virtualinvoke $r1.<java.awt.image.SampleModel: int getHeight()>();

        $r4 = newarray (int)[3];

        $r4[0] = 16711680;

        $i8 = (int) 65280;

        $r4[1] = $i8;

        $r4[2] = 255;

        specialinvoke $r8.<java.awt.image.SinglePixelPackedSampleModel: void <init>(int,int,int,int[])>(3, $i1, $i2, $r4);

        return $r8;
    }

    static void <clinit>()
    {
        long $l1;
        byte $b0;
        int[] $r0, $r1;
        int $i2, i3, $i4;
        double $d0, $d1, $d2, $d3, d4, d5;

        <org.apache.batik.ext.awt.image.rendered.Any2sRGBRed: double GAMMA> = 2.4;

        $r0 = newarray (int)[256];

        <org.apache.batik.ext.awt.image.rendered.Any2sRGBRed: int[] linearToSRGBLut> = $r0;

        i3 = 0;

        goto label4;

     label1:
        $d0 = (double) i3;

        d4 = $d0 * 0.00392156862745098;

        $b0 = d4 cmpg 0.0031308;

        $i4 = (int) $b0;

        if $i4 > 0 goto label2;

        d5 = d4 * 12.92;

        goto label3;

     label2:
        $d1 = staticinvoke <java.lang.Math: double pow(double,double)>(d4, 0.4166666666666667);

        $d2 = 1.055 * $d1;

        d5 = $d2 - 0.055;

     label3:
        $r1 = <org.apache.batik.ext.awt.image.rendered.Any2sRGBRed: int[] linearToSRGBLut>;

        $d3 = d5 * 255.0;

        $l1 = staticinvoke <java.lang.Math: long round(double)>($d3);

        $i2 = (int) $l1;

        $r1[i3] = $i2;

        i3 = i3 + 1;

     label4:
        if i3 < 256 goto label1;

        return;
    }
}
