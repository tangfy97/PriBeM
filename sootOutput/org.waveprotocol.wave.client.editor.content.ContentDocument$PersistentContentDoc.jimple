public class org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc extends org.waveprotocol.wave.client.editor.content.PersistentContentView
{
    private org.waveprotocol.wave.client.editor.content.LazyPersistenceManager persistenceManager;
    private boolean isInsideFilter;
    final org.waveprotocol.wave.client.editor.content.ContentDocument this$0;

    public void <init>(org.waveprotocol.wave.client.editor.content.ContentDocument, org.waveprotocol.wave.client.editor.content.ContentRawDocument)
    {
        org.waveprotocol.wave.client.editor.content.ContentRawDocument r2;
        org.waveprotocol.wave.client.editor.content.ContentDocument r1;
        org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentDocument;

        r2 := @parameter1: org.waveprotocol.wave.client.editor.content.ContentRawDocument;

        r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc: org.waveprotocol.wave.client.editor.content.ContentDocument this$0> = r1;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.content.PersistentContentView: void <init>(org.waveprotocol.wave.client.editor.content.ContentRawDocument)>(r2);

        return;
    }

    void setPersistenceManager(org.waveprotocol.wave.client.editor.content.LazyPersistenceManager)
    {
        org.waveprotocol.wave.client.editor.content.LazyPersistenceManager r0, $r2;
        org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc r1;
        boolean $z0, $z1;

        r1 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.LazyPersistenceManager;

        if r0 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "Can\'t use a null persistence manager.");

        $r2 = r1.<org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc: org.waveprotocol.wave.client.editor.content.LazyPersistenceManager persistenceManager>;

        if $r2 != null goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkState(boolean,java.lang.Object)>($z1, "Can\'t set persistence manager twice.");

        r1.<org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc: org.waveprotocol.wave.client.editor.content.LazyPersistenceManager persistenceManager> = r0;

        return;
    }

    protected void schedulePaint(org.waveprotocol.wave.client.editor.content.ContentNode)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r3;
        java.util.List $r2;
        org.waveprotocol.wave.client.editor.content.ContentDocument $r1;
        org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc;

        r3 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc: org.waveprotocol.wave.client.editor.content.ContentDocument this$0>;

        $r2 = staticinvoke <org.waveprotocol.wave.client.editor.content.ContentDocument: java.util.List access$1900(org.waveprotocol.wave.client.editor.content.ContentDocument)>($r1);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r3);

        return;
    }

    public void markNodeForPersistence(org.waveprotocol.wave.client.editor.content.ContentNode, boolean)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r1;
        org.waveprotocol.wave.client.editor.content.LazyPersistenceManager $r2, $r3;
        org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc r0;
        boolean z0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        z0 := @parameter1: boolean;

        $r2 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc: org.waveprotocol.wave.client.editor.content.LazyPersistenceManager persistenceManager>;

        virtualinvoke $r2.<org.waveprotocol.wave.client.editor.content.LazyPersistenceManager: void markAsLazyPersisted(org.waveprotocol.wave.client.editor.content.ContentNode)>(r1);

        if z0 != 0 goto label1;

        $r3 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc: org.waveprotocol.wave.client.editor.content.LazyPersistenceManager persistenceManager>;

        virtualinvoke $r3.<org.waveprotocol.wave.client.editor.content.LazyPersistenceManager: void updateLazyNodes(org.waveprotocol.wave.client.editor.content.ContentNode)>(r1);

     label1:
        return;
    }

    public void onBeforeFilter(org.waveprotocol.wave.model.document.util.Point)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode $r5;
        org.waveprotocol.wave.client.editor.content.LazyPersistenceManager $r3;
        org.waveprotocol.wave.client.editor.content.ContentDocument $r1;
        java.lang.Object $r4;
        org.waveprotocol.wave.model.document.util.Point r2;
        org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc r0;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc;

        r2 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc: org.waveprotocol.wave.client.editor.content.ContentDocument this$0>;

        $z0 = staticinvoke <org.waveprotocol.wave.client.editor.content.ContentDocument: boolean access$2000(org.waveprotocol.wave.client.editor.content.ContentDocument)>($r1);

        if $z0 == 0 goto label1;

        $z1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc: boolean isInsideFilter>;

        if $z1 != 0 goto label1;

        r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc: boolean isInsideFilter> = 1;

        $r3 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc: org.waveprotocol.wave.client.editor.content.LazyPersistenceManager persistenceManager>;

        $r4 = virtualinvoke r2.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r5 = (org.waveprotocol.wave.client.editor.content.ContentNode) $r4;

        virtualinvoke $r3.<org.waveprotocol.wave.client.editor.content.LazyPersistenceManager: void updateLazyNodes(org.waveprotocol.wave.client.editor.content.ContentNode)>($r5);

        r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc: boolean isInsideFilter> = 0;

     label1:
        return;
    }

    public org.waveprotocol.wave.client.editor.content.ContentElement createElement(java.lang.String, java.util.Map, org.waveprotocol.wave.client.editor.content.ContentElement, org.waveprotocol.wave.client.editor.content.ContentNode)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r5;
        org.waveprotocol.wave.client.editor.content.LazyPersistenceManager $r1, $r8;
        java.util.Map r3;
        org.waveprotocol.wave.client.editor.content.ContentElement r4, $r7, $r9;
        java.lang.Object $r6;
        java.lang.String r2;
        org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.util.Map;

        r4 := @parameter2: org.waveprotocol.wave.client.editor.content.ContentElement;

        r5 := @parameter3: org.waveprotocol.wave.client.editor.content.ContentNode;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc: org.waveprotocol.wave.client.editor.content.LazyPersistenceManager persistenceManager>;

        $z0 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.LazyPersistenceManager: boolean isCreationDelegate()>();

        if $z0 == 0 goto label1;

        $r8 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc: org.waveprotocol.wave.client.editor.content.LazyPersistenceManager persistenceManager>;

        $r9 = virtualinvoke $r8.<org.waveprotocol.wave.client.editor.content.LazyPersistenceManager: org.waveprotocol.wave.client.editor.content.ContentElement createElement(java.lang.String,java.util.Map,org.waveprotocol.wave.client.editor.content.ContentElement,org.waveprotocol.wave.client.editor.content.ContentNode)>(r2, r3, r4, r5);

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc: void schedulePaint(org.waveprotocol.wave.client.editor.content.ContentNode)>($r9);

        return $r9;

     label1:
        $r6 = specialinvoke r0.<org.waveprotocol.wave.client.editor.content.PersistentContentView: java.lang.Object createElement(java.lang.String,java.util.Map,java.lang.Object,java.lang.Object)>(r2, r3, r4, r5);

        $r7 = (org.waveprotocol.wave.client.editor.content.ContentElement) $r6;

        return $r7;
    }

    public org.waveprotocol.wave.client.editor.content.ContentTextNode createTextNode(java.lang.String, org.waveprotocol.wave.client.editor.content.ContentElement, org.waveprotocol.wave.client.editor.content.ContentNode)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r4;
        org.waveprotocol.wave.client.editor.content.LazyPersistenceManager $r1, $r7;
        org.waveprotocol.wave.client.editor.content.ContentTextNode $r6, $r8;
        org.waveprotocol.wave.client.editor.content.ContentElement r3;
        java.lang.Object $r5;
        java.lang.String r2;
        org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: org.waveprotocol.wave.client.editor.content.ContentElement;

        r4 := @parameter2: org.waveprotocol.wave.client.editor.content.ContentNode;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc: org.waveprotocol.wave.client.editor.content.LazyPersistenceManager persistenceManager>;

        $z0 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.LazyPersistenceManager: boolean isCreationDelegate()>();

        if $z0 == 0 goto label1;

        $r7 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc: org.waveprotocol.wave.client.editor.content.LazyPersistenceManager persistenceManager>;

        $r8 = virtualinvoke $r7.<org.waveprotocol.wave.client.editor.content.LazyPersistenceManager: org.waveprotocol.wave.client.editor.content.ContentTextNode createTextNode(java.lang.String,org.waveprotocol.wave.client.editor.content.ContentElement,org.waveprotocol.wave.client.editor.content.ContentNode)>(r2, r3, r4);

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc: void schedulePaint(org.waveprotocol.wave.client.editor.content.ContentNode)>($r8);

        return $r8;

     label1:
        $r5 = specialinvoke r0.<org.waveprotocol.wave.client.editor.content.PersistentContentView: java.lang.Object createTextNode(java.lang.String,java.lang.Object,java.lang.Object)>(r2, r3, r4);

        $r6 = (org.waveprotocol.wave.client.editor.content.ContentTextNode) $r5;

        return $r6;
    }

    protected volatile void schedulePaint(java.lang.Object)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode $r2;
        java.lang.Object r1;
        org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.client.editor.content.ContentNode) r1;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc: void schedulePaint(org.waveprotocol.wave.client.editor.content.ContentNode)>($r2);

        return;
    }

    public volatile java.lang.Object createTextNode(java.lang.String, java.lang.Object, java.lang.Object)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode $r4;
        org.waveprotocol.wave.client.editor.content.ContentTextNode $r6;
        java.lang.Object r2, r3;
        org.waveprotocol.wave.client.editor.content.ContentElement $r5;
        java.lang.String r1;
        org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r5 = (org.waveprotocol.wave.client.editor.content.ContentElement) r2;

        $r4 = (org.waveprotocol.wave.client.editor.content.ContentNode) r3;

        $r6 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc: org.waveprotocol.wave.client.editor.content.ContentTextNode createTextNode(java.lang.String,org.waveprotocol.wave.client.editor.content.ContentElement,org.waveprotocol.wave.client.editor.content.ContentNode)>(r1, $r5, $r4);

        return $r6;
    }

    public volatile java.lang.Object createElement(java.lang.String, java.util.Map, java.lang.Object, java.lang.Object)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode $r5;
        java.util.Map r2;
        java.lang.Object r3, r4;
        org.waveprotocol.wave.client.editor.content.ContentElement $r6, $r7;
        java.lang.String r1;
        org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Map;

        r3 := @parameter2: java.lang.Object;

        r4 := @parameter3: java.lang.Object;

        $r6 = (org.waveprotocol.wave.client.editor.content.ContentElement) r3;

        $r5 = (org.waveprotocol.wave.client.editor.content.ContentNode) r4;

        $r7 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc: org.waveprotocol.wave.client.editor.content.ContentElement createElement(java.lang.String,java.util.Map,org.waveprotocol.wave.client.editor.content.ContentElement,org.waveprotocol.wave.client.editor.content.ContentNode)>(r1, r2, $r6, $r5);

        return $r7;
    }

    public volatile void markNodeForPersistence(java.lang.Object, boolean)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode $r2;
        java.lang.Object r1;
        org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc r0;
        boolean z0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        $r2 = (org.waveprotocol.wave.client.editor.content.ContentNode) r1;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc: void markNodeForPersistence(org.waveprotocol.wave.client.editor.content.ContentNode,boolean)>($r2, z0);

        return;
    }
}
