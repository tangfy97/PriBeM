class com.google.inject.servlet.InternalServletModule$BackwardsCompatibleServletContextProvider extends java.lang.Object implements com.google.inject.Provider
{
    private javax.servlet.ServletContext injectedServletContext;

    void <init>()
    {
        com.google.inject.servlet.InternalServletModule$BackwardsCompatibleServletContextProvider r0;

        r0 := @this: com.google.inject.servlet.InternalServletModule$BackwardsCompatibleServletContextProvider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    void set(javax.servlet.ServletContext)
    {
        com.google.inject.servlet.InternalServletModule$BackwardsCompatibleServletContextProvider r0;
        javax.servlet.ServletContext r1;

        r0 := @this: com.google.inject.servlet.InternalServletModule$BackwardsCompatibleServletContextProvider;

        r1 := @parameter0: javax.servlet.ServletContext;

        r0.<com.google.inject.servlet.InternalServletModule$BackwardsCompatibleServletContextProvider: javax.servlet.ServletContext injectedServletContext> = r1;

        return;
    }

    public javax.servlet.ServletContext get()
    {
        com.google.inject.servlet.InternalServletModule$BackwardsCompatibleServletContextProvider r0;
        javax.servlet.ServletContext $r1, $r5, $r6;
        java.lang.Class $r2;
        java.lang.String $r3;
        java.util.logging.Logger $r4;

        r0 := @this: com.google.inject.servlet.InternalServletModule$BackwardsCompatibleServletContextProvider;

        $r1 = r0.<com.google.inject.servlet.InternalServletModule$BackwardsCompatibleServletContextProvider: javax.servlet.ServletContext injectedServletContext>;

        if null == $r1 goto label1;

        $r6 = r0.<com.google.inject.servlet.InternalServletModule$BackwardsCompatibleServletContextProvider: javax.servlet.ServletContext injectedServletContext>;

        return $r6;

     label1:
        $r2 = class "Lcom/google/inject/servlet/InternalServletModule;";

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r4 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r3);

        virtualinvoke $r4.<java.util.logging.Logger: void warning(java.lang.String)>("You are attempting to use a deprecated API (specifically, attempting to @Inject ServletContext inside an eagerly created singleton. While we allow this for backwards compatibility, be warned that this MAY have unexpected behavior if you have more than one injector (with ServletModule) running in the same JVM. Please consult the Guice documentation at http://code.google.com/p/google-guice/wiki/Servlets for more information.");

        $r5 = staticinvoke <com.google.inject.servlet.GuiceFilter: javax.servlet.ServletContext getServletContext()>();

        return $r5;
    }

    public volatile java.lang.Object get()
    {
        com.google.inject.servlet.InternalServletModule$BackwardsCompatibleServletContextProvider r0;
        javax.servlet.ServletContext $r1;

        r0 := @this: com.google.inject.servlet.InternalServletModule$BackwardsCompatibleServletContextProvider;

        $r1 = virtualinvoke r0.<com.google.inject.servlet.InternalServletModule$BackwardsCompatibleServletContextProvider: javax.servlet.ServletContext get()>();

        return $r1;
    }
}
