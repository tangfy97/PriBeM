public class org.mortbay.jetty.HttpParser$Input extends javax.servlet.ServletInputStream
{
    protected org.mortbay.jetty.HttpParser _parser;
    protected org.mortbay.io.EndPoint _endp;
    protected long _maxIdleTime;
    protected org.mortbay.io.Buffer _content;

    public void <init>(org.mortbay.jetty.HttpParser, long)
    {
        org.mortbay.io.View $r4;
        org.mortbay.io.EndPoint $r2;
        org.mortbay.jetty.HttpParser r1, $r3, $r5;
        org.mortbay.jetty.HttpParser$Input r0;
        long l0;

        r0 := @this: org.mortbay.jetty.HttpParser$Input;

        r1 := @parameter0: org.mortbay.jetty.HttpParser;

        l0 := @parameter1: long;

        specialinvoke r0.<javax.servlet.ServletInputStream: void <init>()>();

        r0.<org.mortbay.jetty.HttpParser$Input: org.mortbay.jetty.HttpParser _parser> = r1;

        $r2 = staticinvoke <org.mortbay.jetty.HttpParser: org.mortbay.io.EndPoint access$000(org.mortbay.jetty.HttpParser)>(r1);

        r0.<org.mortbay.jetty.HttpParser$Input: org.mortbay.io.EndPoint _endp> = $r2;

        r0.<org.mortbay.jetty.HttpParser$Input: long _maxIdleTime> = l0;

        $r3 = r0.<org.mortbay.jetty.HttpParser$Input: org.mortbay.jetty.HttpParser _parser>;

        $r4 = staticinvoke <org.mortbay.jetty.HttpParser: org.mortbay.io.View access$100(org.mortbay.jetty.HttpParser)>($r3);

        r0.<org.mortbay.jetty.HttpParser$Input: org.mortbay.io.Buffer _content> = $r4;

        $r5 = r0.<org.mortbay.jetty.HttpParser$Input: org.mortbay.jetty.HttpParser _parser>;

        staticinvoke <org.mortbay.jetty.HttpParser: org.mortbay.jetty.HttpParser$Input access$202(org.mortbay.jetty.HttpParser,org.mortbay.jetty.HttpParser$Input)>($r5, r0);

        return;
    }

    public int read() throws java.io.IOException
    {
        short s1;
        org.mortbay.io.Buffer $r1;
        byte $b0;
        org.mortbay.jetty.HttpParser$Input r0;
        boolean $z0;

        r0 := @this: org.mortbay.jetty.HttpParser$Input;

        s1 = -1;

        $z0 = specialinvoke r0.<org.mortbay.jetty.HttpParser$Input: boolean blockForContent()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<org.mortbay.jetty.HttpParser$Input: org.mortbay.io.Buffer _content>;

        $b0 = interfaceinvoke $r1.<org.mortbay.io.Buffer: byte get()>();

        s1 = 255 & $b0;

     label1:
        return s1;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        byte[] r1;
        org.mortbay.io.Buffer $r2;
        org.mortbay.jetty.HttpParser$Input r0;
        int i0, i1, i2, $i4;
        boolean $z0;

        r0 := @this: org.mortbay.jetty.HttpParser$Input;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i4 = (int) -1;

        i2 = $i4;

        $z0 = specialinvoke r0.<org.mortbay.jetty.HttpParser$Input: boolean blockForContent()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<org.mortbay.jetty.HttpParser$Input: org.mortbay.io.Buffer _content>;

        i2 = interfaceinvoke $r2.<org.mortbay.io.Buffer: int get(byte[],int,int)>(r1, i0, i1);

     label1:
        return i2;
    }

    private boolean blockForContent() throws java.io.IOException
    {
        org.mortbay.jetty.EofException $r24;
        byte $b4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        org.mortbay.jetty.HttpParser $r2, $r5, $r6, $r10, $r13, $r14, $r16, $r18, $r19;
        long $l2, $l3;
        int $i0, $i1, $i5, $i6, $i7, $i8;
        org.mortbay.io.Buffer $r1, $r15, $r22, $r23;
        org.mortbay.jetty.HttpParser$Input r0;
        java.io.IOException $r20;
        org.mortbay.io.EndPoint $r3, $r4, $r7, $r8, $r9, $r11, $r17, $r21;

        r0 := @this: org.mortbay.jetty.HttpParser$Input;

        $r1 = r0.<org.mortbay.jetty.HttpParser$Input: org.mortbay.io.Buffer _content>;

        $i0 = interfaceinvoke $r1.<org.mortbay.io.Buffer: int length()>();

        if $i0 <= 0 goto label01;

        return 1;

     label01:
        $r2 = r0.<org.mortbay.jetty.HttpParser$Input: org.mortbay.jetty.HttpParser _parser>;

        $i1 = virtualinvoke $r2.<org.mortbay.jetty.HttpParser: int getState()>();

        if $i1 > 0 goto label02;

        return 0;

     label02:
        $r3 = r0.<org.mortbay.jetty.HttpParser$Input: org.mortbay.io.EndPoint _endp>;

        if $r3 != null goto label03;

        $r19 = r0.<org.mortbay.jetty.HttpParser$Input: org.mortbay.jetty.HttpParser _parser>;

        virtualinvoke $r19.<org.mortbay.jetty.HttpParser: long parseNext()>();

        goto label12;

     label03:
        $r4 = r0.<org.mortbay.jetty.HttpParser$Input: org.mortbay.io.EndPoint _endp>;

        $z0 = interfaceinvoke $r4.<org.mortbay.io.EndPoint: boolean isBlocking()>();

        if $z0 == 0 goto label08;

     label04:
        $r14 = r0.<org.mortbay.jetty.HttpParser$Input: org.mortbay.jetty.HttpParser _parser>;

        virtualinvoke $r14.<org.mortbay.jetty.HttpParser: long parseNext()>();

     label05:
        $r15 = r0.<org.mortbay.jetty.HttpParser$Input: org.mortbay.io.Buffer _content>;

        $i5 = interfaceinvoke $r15.<org.mortbay.io.Buffer: int length()>();

        if $i5 != 0 goto label06;

        $r16 = r0.<org.mortbay.jetty.HttpParser$Input: org.mortbay.jetty.HttpParser _parser>;

        $z5 = virtualinvoke $r16.<org.mortbay.jetty.HttpParser: boolean isState(int)>(0);

        if $z5 != 0 goto label06;

        $r17 = r0.<org.mortbay.jetty.HttpParser$Input: org.mortbay.io.EndPoint _endp>;

        $z6 = interfaceinvoke $r17.<org.mortbay.io.EndPoint: boolean isOpen()>();

        if $z6 == 0 goto label06;

        $r18 = r0.<org.mortbay.jetty.HttpParser$Input: org.mortbay.jetty.HttpParser _parser>;

        virtualinvoke $r18.<org.mortbay.jetty.HttpParser: long parseNext()>();

        goto label05;

     label06:
        goto label12;

     label07:
        $r20 := @caughtexception;

        $r21 = r0.<org.mortbay.jetty.HttpParser$Input: org.mortbay.io.EndPoint _endp>;

        interfaceinvoke $r21.<org.mortbay.io.EndPoint: void close()>();

        throw $r20;

     label08:
        $r5 = r0.<org.mortbay.jetty.HttpParser$Input: org.mortbay.jetty.HttpParser _parser>;

        virtualinvoke $r5.<org.mortbay.jetty.HttpParser: long parseNext()>();

     label09:
        $r22 = r0.<org.mortbay.jetty.HttpParser$Input: org.mortbay.io.Buffer _content>;

        $i6 = interfaceinvoke $r22.<org.mortbay.io.Buffer: int length()>();

        if $i6 != 0 goto label12;

        $r6 = r0.<org.mortbay.jetty.HttpParser$Input: org.mortbay.jetty.HttpParser _parser>;

        $z1 = virtualinvoke $r6.<org.mortbay.jetty.HttpParser: boolean isState(int)>(0);

        if $z1 != 0 goto label12;

        $r7 = r0.<org.mortbay.jetty.HttpParser$Input: org.mortbay.io.EndPoint _endp>;

        $z2 = interfaceinvoke $r7.<org.mortbay.io.EndPoint: boolean isOpen()>();

        if $z2 == 0 goto label12;

        $r8 = r0.<org.mortbay.jetty.HttpParser$Input: org.mortbay.io.EndPoint _endp>;

        $z3 = interfaceinvoke $r8.<org.mortbay.io.EndPoint: boolean isBufferingInput()>();

        if $z3 == 0 goto label10;

        $r13 = r0.<org.mortbay.jetty.HttpParser$Input: org.mortbay.jetty.HttpParser _parser>;

        $l3 = virtualinvoke $r13.<org.mortbay.jetty.HttpParser: long parseNext()>();

        $b4 = $l3 cmp 0L;

        $i8 = (int) $b4;

        if $i8 <= 0 goto label10;

        goto label09;

     label10:
        $r9 = r0.<org.mortbay.jetty.HttpParser$Input: org.mortbay.io.EndPoint _endp>;

        $l2 = r0.<org.mortbay.jetty.HttpParser$Input: long _maxIdleTime>;

        $z4 = interfaceinvoke $r9.<org.mortbay.io.EndPoint: boolean blockReadable(long)>($l2);

        if $z4 != 0 goto label11;

        $r11 = r0.<org.mortbay.jetty.HttpParser$Input: org.mortbay.io.EndPoint _endp>;

        interfaceinvoke $r11.<org.mortbay.io.EndPoint: void close()>();

        $r24 = new org.mortbay.jetty.EofException;

        specialinvoke $r24.<org.mortbay.jetty.EofException: void <init>(java.lang.String)>("timeout");

        throw $r24;

     label11:
        $r10 = r0.<org.mortbay.jetty.HttpParser$Input: org.mortbay.jetty.HttpParser _parser>;

        virtualinvoke $r10.<org.mortbay.jetty.HttpParser: long parseNext()>();

        goto label09;

     label12:
        $r23 = r0.<org.mortbay.jetty.HttpParser$Input: org.mortbay.io.Buffer _content>;

        $i7 = interfaceinvoke $r23.<org.mortbay.io.Buffer: int length()>();

        if $i7 <= 0 goto label13;

        $z7 = 1;

        goto label14;

     label13:
        $z7 = 0;

     label14:
        return $z7;

        catch java.io.IOException from label04 to label06 with label07;
    }

    public int available() throws java.io.IOException
    {
        org.mortbay.io.Buffer $r1, $r3, $r4, $r6, $r7;
        org.mortbay.jetty.HttpParser $r5;
        org.mortbay.jetty.HttpParser$Input r0;
        org.mortbay.io.EndPoint $r2;
        int $i0, $i1, $i2;
        boolean $z0;

        r0 := @this: org.mortbay.jetty.HttpParser$Input;

        $r1 = r0.<org.mortbay.jetty.HttpParser$Input: org.mortbay.io.Buffer _content>;

        if $r1 == null goto label1;

        $r6 = r0.<org.mortbay.jetty.HttpParser$Input: org.mortbay.io.Buffer _content>;

        $i0 = interfaceinvoke $r6.<org.mortbay.io.Buffer: int length()>();

        if $i0 <= 0 goto label1;

        $r7 = r0.<org.mortbay.jetty.HttpParser$Input: org.mortbay.io.Buffer _content>;

        $i1 = interfaceinvoke $r7.<org.mortbay.io.Buffer: int length()>();

        return $i1;

     label1:
        $r2 = r0.<org.mortbay.jetty.HttpParser$Input: org.mortbay.io.EndPoint _endp>;

        $z0 = interfaceinvoke $r2.<org.mortbay.io.EndPoint: boolean isBlocking()>();

        if $z0 != 0 goto label2;

        $r5 = r0.<org.mortbay.jetty.HttpParser$Input: org.mortbay.jetty.HttpParser _parser>;

        virtualinvoke $r5.<org.mortbay.jetty.HttpParser: long parseNext()>();

     label2:
        $r3 = r0.<org.mortbay.jetty.HttpParser$Input: org.mortbay.io.Buffer _content>;

        if $r3 != null goto label3;

        $i2 = 0;

        goto label4;

     label3:
        $r4 = r0.<org.mortbay.jetty.HttpParser$Input: org.mortbay.io.Buffer _content>;

        $i2 = interfaceinvoke $r4.<org.mortbay.io.Buffer: int length()>();

     label4:
        return $i2;
    }
}
