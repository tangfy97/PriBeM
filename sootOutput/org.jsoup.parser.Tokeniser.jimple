class org.jsoup.parser.Tokeniser extends java.lang.Object
{
    static final char replacementChar;
    private org.jsoup.parser.CharacterReader reader;
    private org.jsoup.parser.ParseErrorList errors;
    private org.jsoup.parser.TokeniserState state;
    private org.jsoup.parser.Token emitPending;
    private boolean isEmitPending;
    private java.lang.StringBuilder charBuffer;
    java.lang.StringBuilder dataBuffer;
    org.jsoup.parser.Token$Tag tagPending;
    org.jsoup.parser.Token$Doctype doctypePending;
    org.jsoup.parser.Token$Comment commentPending;
    private org.jsoup.parser.Token$StartTag lastStartTag;
    private boolean selfClosingFlagAcknowledged;

    void <init>(org.jsoup.parser.CharacterReader, org.jsoup.parser.ParseErrorList)
    {
        org.jsoup.parser.CharacterReader r3;
        org.jsoup.parser.Tokeniser r0;
        java.lang.StringBuilder $r2;
        org.jsoup.parser.ParseErrorList r4;
        org.jsoup.parser.TokeniserState $r1;

        r0 := @this: org.jsoup.parser.Tokeniser;

        r3 := @parameter0: org.jsoup.parser.CharacterReader;

        r4 := @parameter1: org.jsoup.parser.ParseErrorList;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = <org.jsoup.parser.TokeniserState: org.jsoup.parser.TokeniserState Data>;

        r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.TokeniserState state> = $r1;

        r0.<org.jsoup.parser.Tokeniser: boolean isEmitPending> = 0;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        r0.<org.jsoup.parser.Tokeniser: java.lang.StringBuilder charBuffer> = $r2;

        r0.<org.jsoup.parser.Tokeniser: boolean selfClosingFlagAcknowledged> = 1;

        r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader> = r3;

        r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.ParseErrorList errors> = r4;

        return;
    }

    org.jsoup.parser.Token read()
    {
        org.jsoup.parser.Tokeniser r0;
        org.jsoup.parser.Token $r2;
        org.jsoup.parser.Token$Character $r7;
        org.jsoup.parser.CharacterReader $r8;
        int $i0, $i1;
        java.lang.StringBuilder $r1, $r3, $r5, $r6;
        java.lang.String $r4;
        org.jsoup.parser.TokeniserState $r9;
        boolean $z0, $z1;

        r0 := @this: org.jsoup.parser.Tokeniser;

        $z0 = r0.<org.jsoup.parser.Tokeniser: boolean selfClosingFlagAcknowledged>;

        if $z0 != 0 goto label1;

        specialinvoke r0.<org.jsoup.parser.Tokeniser: void error(java.lang.String)>("Self closing flag not acknowledged");

        r0.<org.jsoup.parser.Tokeniser: boolean selfClosingFlagAcknowledged> = 1;

     label1:
        $z1 = r0.<org.jsoup.parser.Tokeniser: boolean isEmitPending>;

        if $z1 != 0 goto label2;

        $r9 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.TokeniserState state>;

        $r8 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        virtualinvoke $r9.<org.jsoup.parser.TokeniserState: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>(r0, $r8);

        goto label1;

     label2:
        $r1 = r0.<org.jsoup.parser.Tokeniser: java.lang.StringBuilder charBuffer>;

        $i0 = virtualinvoke $r1.<java.lang.StringBuilder: int length()>();

        if $i0 <= 0 goto label3;

        $r3 = r0.<org.jsoup.parser.Tokeniser: java.lang.StringBuilder charBuffer>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = r0.<org.jsoup.parser.Tokeniser: java.lang.StringBuilder charBuffer>;

        $r5 = r0.<org.jsoup.parser.Tokeniser: java.lang.StringBuilder charBuffer>;

        $i1 = virtualinvoke $r5.<java.lang.StringBuilder: int length()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder delete(int,int)>(0, $i1);

        $r7 = new org.jsoup.parser.Token$Character;

        specialinvoke $r7.<org.jsoup.parser.Token$Character: void <init>(java.lang.String)>($r4);

        return $r7;

     label3:
        r0.<org.jsoup.parser.Tokeniser: boolean isEmitPending> = 0;

        $r2 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token emitPending>;

        return $r2;
    }

    void emit(org.jsoup.parser.Token)
    {
        org.jsoup.nodes.Attributes $r6;
        org.jsoup.parser.Token$StartTag r7;
        org.jsoup.parser.Tokeniser r0;
        org.jsoup.parser.Token r1;
        org.jsoup.parser.Token$TokenType $r2, $r3, $r4, $r5;
        org.jsoup.parser.Token$EndTag r8;
        boolean $z0, $z1;

        r0 := @this: org.jsoup.parser.Tokeniser;

        r1 := @parameter0: org.jsoup.parser.Token;

        $z0 = r0.<org.jsoup.parser.Tokeniser: boolean isEmitPending>;

        staticinvoke <org.jsoup.helper.Validate: void isFalse(boolean,java.lang.String)>($z0, "There is an unread token pending!");

        r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token emitPending> = r1;

        r0.<org.jsoup.parser.Tokeniser: boolean isEmitPending> = 1;

        $r3 = r1.<org.jsoup.parser.Token: org.jsoup.parser.Token$TokenType type>;

        $r2 = <org.jsoup.parser.Token$TokenType: org.jsoup.parser.Token$TokenType StartTag>;

        if $r3 != $r2 goto label2;

        r7 = (org.jsoup.parser.Token$StartTag) r1;

        r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token$StartTag lastStartTag> = r7;

        $z1 = r7.<org.jsoup.parser.Token$StartTag: boolean selfClosing>;

        if $z1 == 0 goto label1;

        r0.<org.jsoup.parser.Tokeniser: boolean selfClosingFlagAcknowledged> = 0;

     label1:
        goto label3;

     label2:
        $r5 = r1.<org.jsoup.parser.Token: org.jsoup.parser.Token$TokenType type>;

        $r4 = <org.jsoup.parser.Token$TokenType: org.jsoup.parser.Token$TokenType EndTag>;

        if $r5 != $r4 goto label3;

        r8 = (org.jsoup.parser.Token$EndTag) r1;

        $r6 = r8.<org.jsoup.parser.Token$EndTag: org.jsoup.nodes.Attributes attributes>;

        if $r6 == null goto label3;

        specialinvoke r0.<org.jsoup.parser.Tokeniser: void error(java.lang.String)>("Attributes incorrectly present on end tag");

     label3:
        return;
    }

    void emit(java.lang.String)
    {
        java.lang.StringBuilder $r2;
        java.lang.String r1;
        org.jsoup.parser.Tokeniser r0;

        r0 := @this: org.jsoup.parser.Tokeniser;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.jsoup.parser.Tokeniser: java.lang.StringBuilder charBuffer>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        return;
    }

    void emit(char[])
    {
        char[] r1;
        java.lang.StringBuilder $r2;
        org.jsoup.parser.Tokeniser r0;

        r0 := @this: org.jsoup.parser.Tokeniser;

        r1 := @parameter0: char[];

        $r2 = r0.<org.jsoup.parser.Tokeniser: java.lang.StringBuilder charBuffer>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char[])>(r1);

        return;
    }

    void emit(char)
    {
        char c0;
        java.lang.StringBuilder $r1;
        org.jsoup.parser.Tokeniser r0;

        r0 := @this: org.jsoup.parser.Tokeniser;

        c0 := @parameter0: char;

        $r1 = r0.<org.jsoup.parser.Tokeniser: java.lang.StringBuilder charBuffer>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        return;
    }

    org.jsoup.parser.TokeniserState getState()
    {
        org.jsoup.parser.TokeniserState $r1;
        org.jsoup.parser.Tokeniser r0;

        r0 := @this: org.jsoup.parser.Tokeniser;

        $r1 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.TokeniserState state>;

        return $r1;
    }

    void transition(org.jsoup.parser.TokeniserState)
    {
        org.jsoup.parser.TokeniserState r1;
        org.jsoup.parser.Tokeniser r0;

        r0 := @this: org.jsoup.parser.Tokeniser;

        r1 := @parameter0: org.jsoup.parser.TokeniserState;

        r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.TokeniserState state> = r1;

        return;
    }

    void advanceTransition(org.jsoup.parser.TokeniserState)
    {
        org.jsoup.parser.CharacterReader $r1;
        org.jsoup.parser.TokeniserState r2;
        org.jsoup.parser.Tokeniser r0;

        r0 := @this: org.jsoup.parser.Tokeniser;

        r2 := @parameter0: org.jsoup.parser.TokeniserState;

        $r1 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        virtualinvoke $r1.<org.jsoup.parser.CharacterReader: void advance()>();

        r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.TokeniserState state> = r2;

        return;
    }

    void acknowledgeSelfClosingFlag()
    {
        org.jsoup.parser.Tokeniser r0;

        r0 := @this: org.jsoup.parser.Tokeniser;

        r0.<org.jsoup.parser.Tokeniser: boolean selfClosingFlagAcknowledged> = 1;

        return;
    }

    char[] consumeCharacterReference(java.lang.Character, boolean)
    {
        org.jsoup.parser.Tokeniser r0;
        java.lang.Integer $r23;
        java.lang.Character r2, $r12;
        byte $b5;
        boolean $z0, $z1, $z2, $z3, $z4, z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;
        java.lang.Object[] $r18;
        int $i1, i4, $i6, $i7, $i9, $i11, $i13, $i15;
        java.lang.String $r8, $r19, $r29, r30;
        char $c0, $c2, $c3;
        java.lang.NumberFormatException $r28;
        org.jsoup.parser.CharacterReader $r1, $r4, $r5, $r6, $r7, $r9, $r10, $r13, $r14, $r16, $r17, $r20, $r21, $r22, $r25, $r26, $r27, $r32;
        char[] $r3, $r11, $r15, $r24, $r31;

        r0 := @this: org.jsoup.parser.Tokeniser;

        r2 := @parameter0: java.lang.Character;

        z5 := @parameter1: boolean;

        $r1 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        $z0 = virtualinvoke $r1.<org.jsoup.parser.CharacterReader: boolean isEmpty()>();

        if $z0 == 0 goto label01;

        return null;

     label01:
        if r2 == null goto label02;

        $c2 = virtualinvoke r2.<java.lang.Character: char charValue()>();

        $r27 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        $c3 = virtualinvoke $r27.<org.jsoup.parser.CharacterReader: char current()>();

        $i6 = (int) $c2;

        $i7 = (int) $c3;

        if $i6 != $i7 goto label02;

        return null;

     label02:
        $r4 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        $r3 = newarray (char)[7];

        $r3[0] = 9;

        $r3[1] = 10;

        $r3[2] = 13;

        $r3[3] = 12;

        $r3[4] = 32;

        $r3[5] = 60;

        $r3[6] = 38;

        $z1 = virtualinvoke $r4.<org.jsoup.parser.CharacterReader: boolean matchesAny(char[])>($r3);

        if $z1 == 0 goto label03;

        return null;

     label03:
        $r5 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        virtualinvoke $r5.<org.jsoup.parser.CharacterReader: void mark()>();

        $r6 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        $z2 = virtualinvoke $r6.<org.jsoup.parser.CharacterReader: boolean matchConsume(java.lang.String)>("#");

        if $z2 == 0 goto label17;

        $r20 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        $z11 = virtualinvoke $r20.<org.jsoup.parser.CharacterReader: boolean matchConsumeIgnoreCase(java.lang.String)>("X");

        if $z11 == 0 goto label04;

        $r26 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        $r29 = virtualinvoke $r26.<org.jsoup.parser.CharacterReader: java.lang.String consumeHexSequence()>();

        goto label05;

     label04:
        $r21 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        $r29 = virtualinvoke $r21.<org.jsoup.parser.CharacterReader: java.lang.String consumeDigitSequence()>();

     label05:
        r30 = $r29;

        $i1 = virtualinvoke $r29.<java.lang.String: int length()>();

        if $i1 != 0 goto label06;

        specialinvoke r0.<org.jsoup.parser.Tokeniser: void characterReferenceError(java.lang.String)>("numeric reference with no numerals");

        $r25 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        virtualinvoke $r25.<org.jsoup.parser.CharacterReader: void rewindToMark()>();

        return null;

     label06:
        $r22 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        $z12 = virtualinvoke $r22.<org.jsoup.parser.CharacterReader: boolean matchConsume(java.lang.String)>(";");

        if $z12 != 0 goto label07;

        specialinvoke r0.<org.jsoup.parser.Tokeniser: void characterReferenceError(java.lang.String)>("missing semicolon");

     label07:
        $i9 = (int) -1;

        i4 = $i9;

     label08:
        if $z11 == 0 goto label09;

        $b5 = 16;

        goto label10;

     label09:
        $b5 = 10;

     label10:
        $r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)>(r30, $b5);

        i4 = virtualinvoke $r23.<java.lang.Integer: int intValue()>();

     label11:
        goto label13;

     label12:
        $r28 := @caughtexception;

     label13:
        $i11 = (int) -1;

        if i4 == $i11 goto label15;

        $i13 = (int) 55296;

        if i4 < $i13 goto label14;

        $i15 = (int) 57343;

        if i4 <= $i15 goto label15;

     label14:
        if i4 <= 1114111 goto label16;

     label15:
        specialinvoke r0.<org.jsoup.parser.Tokeniser: void characterReferenceError(java.lang.String)>("character outside of valid range");

        $r31 = newarray (char)[1];

        $r31[0] = 65533;

        return $r31;

     label16:
        $r24 = staticinvoke <java.lang.Character: char[] toChars(int)>(i4);

        return $r24;

     label17:
        $r7 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        $r8 = virtualinvoke $r7.<org.jsoup.parser.CharacterReader: java.lang.String consumeLetterThenDigitSequence()>();

        $r9 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        $z3 = virtualinvoke $r9.<org.jsoup.parser.CharacterReader: boolean matches(char)>(59);

        $z4 = staticinvoke <org.jsoup.nodes.Entities: boolean isBaseNamedEntity(java.lang.String)>($r8);

        if $z4 != 0 goto label18;

        $z10 = staticinvoke <org.jsoup.nodes.Entities: boolean isNamedEntity(java.lang.String)>($r8);

        if $z10 == 0 goto label19;

        if $z3 == 0 goto label19;

     label18:
        $z13 = 1;

        goto label20;

     label19:
        $z13 = 0;

     label20:
        if $z13 != 0 goto label22;

        $r17 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        virtualinvoke $r17.<org.jsoup.parser.CharacterReader: void rewindToMark()>();

        if $z3 == 0 goto label21;

        $r18 = newarray (java.lang.Object)[1];

        $r18[0] = $r8;

        $r19 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("invalid named referenece \'%s\'", $r18);

        specialinvoke r0.<org.jsoup.parser.Tokeniser: void characterReferenceError(java.lang.String)>($r19);

     label21:
        return null;

     label22:
        if z5 == 0 goto label24;

        $r13 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        $z7 = virtualinvoke $r13.<org.jsoup.parser.CharacterReader: boolean matchesLetter()>();

        if $z7 != 0 goto label23;

        $r14 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        $z8 = virtualinvoke $r14.<org.jsoup.parser.CharacterReader: boolean matchesDigit()>();

        if $z8 != 0 goto label23;

        $r16 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        $r15 = newarray (char)[3];

        $r15[0] = 61;

        $r15[1] = 45;

        $r15[2] = 95;

        $z9 = virtualinvoke $r16.<org.jsoup.parser.CharacterReader: boolean matchesAny(char[])>($r15);

        if $z9 == 0 goto label24;

     label23:
        $r32 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        virtualinvoke $r32.<org.jsoup.parser.CharacterReader: void rewindToMark()>();

        return null;

     label24:
        $r10 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        $z6 = virtualinvoke $r10.<org.jsoup.parser.CharacterReader: boolean matchConsume(java.lang.String)>(";");

        if $z6 != 0 goto label25;

        specialinvoke r0.<org.jsoup.parser.Tokeniser: void characterReferenceError(java.lang.String)>("missing semicolon");

     label25:
        $r11 = newarray (char)[1];

        $r12 = staticinvoke <org.jsoup.nodes.Entities: java.lang.Character getCharacterByName(java.lang.String)>($r8);

        $c0 = virtualinvoke $r12.<java.lang.Character: char charValue()>();

        $r11[0] = $c0;

        return $r11;

        catch java.lang.NumberFormatException from label08 to label11 with label12;
    }

    org.jsoup.parser.Token$Tag createTagPending(boolean)
    {
        org.jsoup.parser.Token$EndTag $r4;
        org.jsoup.parser.Token$StartTag $r3;
        org.jsoup.parser.Tokeniser r0;
        org.jsoup.parser.Token$Tag $r1, $r2;
        boolean z0;

        r0 := @this: org.jsoup.parser.Tokeniser;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r3 = new org.jsoup.parser.Token$StartTag;

        $r2 = $r3;

        specialinvoke $r3.<org.jsoup.parser.Token$StartTag: void <init>()>();

        goto label2;

     label1:
        $r4 = new org.jsoup.parser.Token$EndTag;

        $r2 = $r4;

        specialinvoke $r4.<org.jsoup.parser.Token$EndTag: void <init>()>();

     label2:
        r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token$Tag tagPending> = $r2;

        $r1 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token$Tag tagPending>;

        return $r1;
    }

    void emitTagPending()
    {
        org.jsoup.parser.Token$Tag $r1, $r2;
        org.jsoup.parser.Tokeniser r0;

        r0 := @this: org.jsoup.parser.Tokeniser;

        $r1 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token$Tag tagPending>;

        virtualinvoke $r1.<org.jsoup.parser.Token$Tag: void finaliseTag()>();

        $r2 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token$Tag tagPending>;

        virtualinvoke r0.<org.jsoup.parser.Tokeniser: void emit(org.jsoup.parser.Token)>($r2);

        return;
    }

    void createCommentPending()
    {
        org.jsoup.parser.Token$Comment $r1;
        org.jsoup.parser.Tokeniser r0;

        r0 := @this: org.jsoup.parser.Tokeniser;

        $r1 = new org.jsoup.parser.Token$Comment;

        specialinvoke $r1.<org.jsoup.parser.Token$Comment: void <init>()>();

        r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token$Comment commentPending> = $r1;

        return;
    }

    void emitCommentPending()
    {
        org.jsoup.parser.Token$Comment $r1;
        org.jsoup.parser.Tokeniser r0;

        r0 := @this: org.jsoup.parser.Tokeniser;

        $r1 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token$Comment commentPending>;

        virtualinvoke r0.<org.jsoup.parser.Tokeniser: void emit(org.jsoup.parser.Token)>($r1);

        return;
    }

    void createDoctypePending()
    {
        org.jsoup.parser.Token$Doctype $r1;
        org.jsoup.parser.Tokeniser r0;

        r0 := @this: org.jsoup.parser.Tokeniser;

        $r1 = new org.jsoup.parser.Token$Doctype;

        specialinvoke $r1.<org.jsoup.parser.Token$Doctype: void <init>()>();

        r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token$Doctype doctypePending> = $r1;

        return;
    }

    void emitDoctypePending()
    {
        org.jsoup.parser.Token$Doctype $r1;
        org.jsoup.parser.Tokeniser r0;

        r0 := @this: org.jsoup.parser.Tokeniser;

        $r1 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token$Doctype doctypePending>;

        virtualinvoke r0.<org.jsoup.parser.Tokeniser: void emit(org.jsoup.parser.Token)>($r1);

        return;
    }

    void createTempBuffer()
    {
        java.lang.StringBuilder $r1;
        org.jsoup.parser.Tokeniser r0;

        r0 := @this: org.jsoup.parser.Tokeniser;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        r0.<org.jsoup.parser.Tokeniser: java.lang.StringBuilder dataBuffer> = $r1;

        return;
    }

    boolean isAppropriateEndTagToken()
    {
        org.jsoup.parser.Token$StartTag $r1, $r3;
        org.jsoup.parser.Tokeniser r0;
        org.jsoup.parser.Token$Tag $r2;
        java.lang.String $r4, $r5;
        boolean $z0;

        r0 := @this: org.jsoup.parser.Tokeniser;

        $r1 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token$StartTag lastStartTag>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $r2 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token$Tag tagPending>;

        $r5 = $r2.<org.jsoup.parser.Token$Tag: java.lang.String tagName>;

        $r3 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token$StartTag lastStartTag>;

        $r4 = $r3.<org.jsoup.parser.Token$StartTag: java.lang.String tagName>;

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        return $z0;
    }

    java.lang.String appropriateEndTagName()
    {
        java.lang.String $r2;
        org.jsoup.parser.Token$StartTag $r1;
        org.jsoup.parser.Tokeniser r0;

        r0 := @this: org.jsoup.parser.Tokeniser;

        $r1 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token$StartTag lastStartTag>;

        $r2 = $r1.<org.jsoup.parser.Token$StartTag: java.lang.String tagName>;

        return $r2;
    }

    void error(org.jsoup.parser.TokeniserState)
    {
        org.jsoup.parser.ParseError $r2;
        java.lang.Object[] $r5;
        org.jsoup.parser.Tokeniser r0;
        char $c1;
        org.jsoup.parser.ParseErrorList $r1, $r4;
        java.lang.Character $r7;
        org.jsoup.parser.CharacterReader $r3, $r6;
        int $i0;
        org.jsoup.parser.TokeniserState r8;
        boolean $z0;

        r0 := @this: org.jsoup.parser.Tokeniser;

        r8 := @parameter0: org.jsoup.parser.TokeniserState;

        $r1 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.ParseErrorList errors>;

        $z0 = virtualinvoke $r1.<org.jsoup.parser.ParseErrorList: boolean canAddError()>();

        if $z0 == 0 goto label1;

        $r4 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.ParseErrorList errors>;

        $r2 = new org.jsoup.parser.ParseError;

        $r3 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        $i0 = virtualinvoke $r3.<org.jsoup.parser.CharacterReader: int pos()>();

        $r5 = newarray (java.lang.Object)[2];

        $r6 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        $c1 = virtualinvoke $r6.<org.jsoup.parser.CharacterReader: char current()>();

        $r7 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c1);

        $r5[0] = $r7;

        $r5[1] = r8;

        specialinvoke $r2.<org.jsoup.parser.ParseError: void <init>(int,java.lang.String,java.lang.Object[])>($i0, "Unexpected character \'%s\' in input state [%s]", $r5);

        virtualinvoke $r4.<org.jsoup.parser.ParseErrorList: boolean add(java.lang.Object)>($r2);

     label1:
        return;
    }

    void eofError(org.jsoup.parser.TokeniserState)
    {
        org.jsoup.parser.ParseError $r2;
        java.lang.Object[] $r5;
        org.jsoup.parser.Tokeniser r0;
        org.jsoup.parser.ParseErrorList $r1, $r4;
        org.jsoup.parser.CharacterReader $r3;
        int $i0;
        org.jsoup.parser.TokeniserState r6;
        boolean $z0;

        r0 := @this: org.jsoup.parser.Tokeniser;

        r6 := @parameter0: org.jsoup.parser.TokeniserState;

        $r1 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.ParseErrorList errors>;

        $z0 = virtualinvoke $r1.<org.jsoup.parser.ParseErrorList: boolean canAddError()>();

        if $z0 == 0 goto label1;

        $r4 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.ParseErrorList errors>;

        $r2 = new org.jsoup.parser.ParseError;

        $r3 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        $i0 = virtualinvoke $r3.<org.jsoup.parser.CharacterReader: int pos()>();

        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = r6;

        specialinvoke $r2.<org.jsoup.parser.ParseError: void <init>(int,java.lang.String,java.lang.Object[])>($i0, "Unexpectedly reached end of file (EOF) in input state [%s]", $r5);

        virtualinvoke $r4.<org.jsoup.parser.ParseErrorList: boolean add(java.lang.Object)>($r2);

     label1:
        return;
    }

    private void characterReferenceError(java.lang.String)
    {
        org.jsoup.parser.ParseError $r2;
        java.lang.Object[] $r5;
        org.jsoup.parser.Tokeniser r0;
        org.jsoup.parser.ParseErrorList $r1, $r4;
        org.jsoup.parser.CharacterReader $r3;
        int $i0;
        java.lang.String r6;
        boolean $z0;

        r0 := @this: org.jsoup.parser.Tokeniser;

        r6 := @parameter0: java.lang.String;

        $r1 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.ParseErrorList errors>;

        $z0 = virtualinvoke $r1.<org.jsoup.parser.ParseErrorList: boolean canAddError()>();

        if $z0 == 0 goto label1;

        $r4 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.ParseErrorList errors>;

        $r2 = new org.jsoup.parser.ParseError;

        $r3 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        $i0 = virtualinvoke $r3.<org.jsoup.parser.CharacterReader: int pos()>();

        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = r6;

        specialinvoke $r2.<org.jsoup.parser.ParseError: void <init>(int,java.lang.String,java.lang.Object[])>($i0, "Invalid character reference: %s", $r5);

        virtualinvoke $r4.<org.jsoup.parser.ParseErrorList: boolean add(java.lang.Object)>($r2);

     label1:
        return;
    }

    private void error(java.lang.String)
    {
        org.jsoup.parser.ParseError $r2;
        org.jsoup.parser.Tokeniser r0;
        org.jsoup.parser.ParseErrorList $r1, $r4;
        org.jsoup.parser.CharacterReader $r3;
        int $i0;
        java.lang.String r5;
        boolean $z0;

        r0 := @this: org.jsoup.parser.Tokeniser;

        r5 := @parameter0: java.lang.String;

        $r1 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.ParseErrorList errors>;

        $z0 = virtualinvoke $r1.<org.jsoup.parser.ParseErrorList: boolean canAddError()>();

        if $z0 == 0 goto label1;

        $r4 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.ParseErrorList errors>;

        $r2 = new org.jsoup.parser.ParseError;

        $r3 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        $i0 = virtualinvoke $r3.<org.jsoup.parser.CharacterReader: int pos()>();

        specialinvoke $r2.<org.jsoup.parser.ParseError: void <init>(int,java.lang.String)>($i0, r5);

        virtualinvoke $r4.<org.jsoup.parser.ParseErrorList: boolean add(java.lang.Object)>($r2);

     label1:
        return;
    }

    boolean currentNodeInHtmlNS()
    {
        org.jsoup.parser.Tokeniser r0;

        r0 := @this: org.jsoup.parser.Tokeniser;

        return 1;
    }

    java.lang.String unescapeEntities(boolean)
    {
        org.jsoup.parser.Tokeniser r1;
        org.jsoup.parser.CharacterReader $r3, $r5, $r6, $r8;
        int $i0;
        char[] $r7;
        java.lang.StringBuilder $r0;
        java.lang.String $r2, $r4;
        boolean $z0, z1, $z2;

        r1 := @this: org.jsoup.parser.Tokeniser;

        z1 := @parameter0: boolean;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

     label1:
        $r8 = r1.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        $z2 = virtualinvoke $r8.<org.jsoup.parser.CharacterReader: boolean isEmpty()>();

        if $z2 != 0 goto label5;

        $r3 = r1.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        $r4 = virtualinvoke $r3.<org.jsoup.parser.CharacterReader: java.lang.String consumeTo(char)>(38);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r5 = r1.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        $z0 = virtualinvoke $r5.<org.jsoup.parser.CharacterReader: boolean matches(char)>(38);

        if $z0 == 0 goto label1;

        $r6 = r1.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        virtualinvoke $r6.<org.jsoup.parser.CharacterReader: char consume()>();

        $r7 = virtualinvoke r1.<org.jsoup.parser.Tokeniser: char[] consumeCharacterReference(java.lang.Character,boolean)>(null, z1);

        if $r7 == null goto label2;

        $i0 = lengthof $r7;

        if $i0 != 0 goto label3;

     label2:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(38);

        goto label4;

     label3:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char[])>($r7);

     label4:
        goto label1;

     label5:
        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public static void <clinit>()
    {
        <org.jsoup.parser.Tokeniser: char replacementChar> = 65533;

        return;
    }
}
