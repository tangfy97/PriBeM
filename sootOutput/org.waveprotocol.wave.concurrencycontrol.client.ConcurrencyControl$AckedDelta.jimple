final class org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl$AckedDelta extends java.lang.Object
{
    final org.waveprotocol.wave.model.operation.wave.WaveletDelta delta;
    final org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl$AckInfo ack;

    void <init>(org.waveprotocol.wave.model.operation.wave.WaveletDelta, org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl$AckInfo)
    {
        org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl$AckedDelta r0;
        org.waveprotocol.wave.model.operation.wave.WaveletDelta r1;
        org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl$AckInfo r2;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl$AckedDelta;

        r1 := @parameter0: org.waveprotocol.wave.model.operation.wave.WaveletDelta;

        r2 := @parameter1: org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl$AckInfo;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl$AckedDelta: org.waveprotocol.wave.model.operation.wave.WaveletDelta delta> = r1;

        r0.<org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl$AckedDelta: org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl$AckInfo ack> = r2;

        return;
    }
}
