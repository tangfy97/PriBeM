public abstract class org.springframework.beans.factory.BeanFactoryUtils extends java.lang.Object
{
    public static final java.lang.String GENERATED_BEAN_NAME_SEPARATOR;

    public void <init>()
    {
        org.springframework.beans.factory.BeanFactoryUtils r0;

        r0 := @this: org.springframework.beans.factory.BeanFactoryUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean isFactoryDereference(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("&");

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static java.lang.String transformedBeanName(java.lang.String)
    {
        int $i0;
        java.lang.String r0, $r1, r2;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "\'name\' must not be null");

        r2 = r0;

        goto label2;

     label1:
        $r1 = "&";

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        r2 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>($i0);

     label2:
        $z0 = virtualinvoke r2.<java.lang.String: boolean startsWith(java.lang.String)>("&");

        if $z0 != 0 goto label1;

        return r2;
    }

    public static boolean isGeneratedBeanName(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>("#");

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static java.lang.String originalBeanName(java.lang.String)
    {
        int $i0, $i2;
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "\'name\' must not be null");

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>("#");

        $i2 = (int) -1;

        if $i0 == $i2 goto label1;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        goto label2;

     label1:
        $r1 = r0;

     label2:
        return $r1;
    }

    public static int countBeansIncludingAncestors(org.springframework.beans.factory.ListableBeanFactory)
    {
        int $i0;
        java.lang.String[] $r1;
        org.springframework.beans.factory.ListableBeanFactory r0;

        r0 := @parameter0: org.springframework.beans.factory.ListableBeanFactory;

        $r1 = staticinvoke <org.springframework.beans.factory.BeanFactoryUtils: java.lang.String[] beanNamesIncludingAncestors(org.springframework.beans.factory.ListableBeanFactory)>(r0);

        $i0 = lengthof $r1;

        return $i0;
    }

    public static java.lang.String[] beanNamesIncludingAncestors(org.springframework.beans.factory.ListableBeanFactory)
    {
        java.lang.String[] $r1;
        org.springframework.beans.factory.ListableBeanFactory r0;

        r0 := @parameter0: org.springframework.beans.factory.ListableBeanFactory;

        $r1 = staticinvoke <org.springframework.beans.factory.BeanFactoryUtils: java.lang.String[] beanNamesForTypeIncludingAncestors(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class)>(r0, class "Ljava/lang/Object;");

        return $r1;
    }

    public static java.lang.String[] beanNamesForTypeIncludingAncestors(org.springframework.beans.factory.ListableBeanFactory, java.lang.Class)
    {
        org.springframework.beans.factory.HierarchicalBeanFactory r3;
        java.lang.String[] $r2, $r7, r12;
        java.util.ArrayList $r8;
        int i0, i1;
        java.lang.String r11;
        boolean $z0, $z1, $z2, $z3;
        java.util.Collection $r10;
        java.util.List $r9;
        org.springframework.beans.factory.BeanFactory $r4, $r5;
        java.lang.Class r1;
        org.springframework.beans.factory.ListableBeanFactory r0, $r6;

        r0 := @parameter0: org.springframework.beans.factory.ListableBeanFactory;

        r1 := @parameter1: java.lang.Class;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "ListableBeanFactory must not be null");

        $r2 = interfaceinvoke r0.<org.springframework.beans.factory.ListableBeanFactory: java.lang.String[] getBeanNamesForType(java.lang.Class)>(r1);

        r12 = $r2;

        $z0 = r0 instanceof org.springframework.beans.factory.HierarchicalBeanFactory;

        if $z0 == 0 goto label4;

        r3 = (org.springframework.beans.factory.HierarchicalBeanFactory) r0;

        $r4 = interfaceinvoke r3.<org.springframework.beans.factory.HierarchicalBeanFactory: org.springframework.beans.factory.BeanFactory getParentBeanFactory()>();

        $z1 = $r4 instanceof org.springframework.beans.factory.ListableBeanFactory;

        if $z1 == 0 goto label4;

        $r5 = interfaceinvoke r3.<org.springframework.beans.factory.HierarchicalBeanFactory: org.springframework.beans.factory.BeanFactory getParentBeanFactory()>();

        $r6 = (org.springframework.beans.factory.ListableBeanFactory) $r5;

        $r7 = staticinvoke <org.springframework.beans.factory.BeanFactoryUtils: java.lang.String[] beanNamesForTypeIncludingAncestors(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class)>($r6, r1);

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        $r9 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        $r10 = (java.util.Collection) $r9;

        interfaceinvoke $r8.<java.util.List: boolean addAll(java.util.Collection)>($r10);

        i0 = lengthof $r7;

        i1 = 0;

        goto label3;

     label1:
        r11 = $r7[i1];

        $z2 = interfaceinvoke $r8.<java.util.List: boolean contains(java.lang.Object)>(r11);

        if $z2 != 0 goto label2;

        $z3 = interfaceinvoke r3.<org.springframework.beans.factory.HierarchicalBeanFactory: boolean containsLocalBean(java.lang.String)>(r11);

        if $z3 != 0 goto label2;

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>(r11);

     label2:
        i1 = i1 + 1;

     label3:
        if i1 < i0 goto label1;

        r12 = staticinvoke <org.springframework.util.StringUtils: java.lang.String[] toStringArray(java.util.Collection)>($r8);

     label4:
        return r12;
    }

    public static java.lang.String[] beanNamesForTypeIncludingAncestors(org.springframework.beans.factory.ListableBeanFactory, java.lang.Class, boolean, boolean)
    {
        org.springframework.beans.factory.HierarchicalBeanFactory r3;
        java.lang.String[] $r2, $r7, r12;
        java.util.ArrayList $r8;
        int i0, i1;
        java.lang.String r11;
        boolean z0, z1, $z2, $z3, $z4, $z5;
        java.util.Collection $r10;
        java.util.List $r9;
        org.springframework.beans.factory.BeanFactory $r4, $r5;
        java.lang.Class r1;
        org.springframework.beans.factory.ListableBeanFactory r0, $r6;

        r0 := @parameter0: org.springframework.beans.factory.ListableBeanFactory;

        r1 := @parameter1: java.lang.Class;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "ListableBeanFactory must not be null");

        $r2 = interfaceinvoke r0.<org.springframework.beans.factory.ListableBeanFactory: java.lang.String[] getBeanNamesForType(java.lang.Class,boolean,boolean)>(r1, z0, z1);

        r12 = $r2;

        $z2 = r0 instanceof org.springframework.beans.factory.HierarchicalBeanFactory;

        if $z2 == 0 goto label4;

        r3 = (org.springframework.beans.factory.HierarchicalBeanFactory) r0;

        $r4 = interfaceinvoke r3.<org.springframework.beans.factory.HierarchicalBeanFactory: org.springframework.beans.factory.BeanFactory getParentBeanFactory()>();

        $z3 = $r4 instanceof org.springframework.beans.factory.ListableBeanFactory;

        if $z3 == 0 goto label4;

        $r5 = interfaceinvoke r3.<org.springframework.beans.factory.HierarchicalBeanFactory: org.springframework.beans.factory.BeanFactory getParentBeanFactory()>();

        $r6 = (org.springframework.beans.factory.ListableBeanFactory) $r5;

        $r7 = staticinvoke <org.springframework.beans.factory.BeanFactoryUtils: java.lang.String[] beanNamesForTypeIncludingAncestors(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,boolean,boolean)>($r6, r1, z0, z1);

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        $r9 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        $r10 = (java.util.Collection) $r9;

        interfaceinvoke $r8.<java.util.List: boolean addAll(java.util.Collection)>($r10);

        i0 = lengthof $r7;

        i1 = 0;

        goto label3;

     label1:
        r11 = $r7[i1];

        $z4 = interfaceinvoke $r8.<java.util.List: boolean contains(java.lang.Object)>(r11);

        if $z4 != 0 goto label2;

        $z5 = interfaceinvoke r3.<org.springframework.beans.factory.HierarchicalBeanFactory: boolean containsLocalBean(java.lang.String)>(r11);

        if $z5 != 0 goto label2;

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>(r11);

     label2:
        i1 = i1 + 1;

     label3:
        if i1 < i0 goto label1;

        r12 = staticinvoke <org.springframework.util.StringUtils: java.lang.String[] toStringArray(java.util.Collection)>($r8);

     label4:
        return r12;
    }

    public static java.util.Map beansOfTypeIncludingAncestors(org.springframework.beans.factory.ListableBeanFactory, java.lang.Class) throws org.springframework.beans.BeansException
    {
        org.springframework.beans.factory.HierarchicalBeanFactory r4;
        java.util.LinkedHashMap $r1;
        java.util.Map $r3, $r8;
        java.lang.String r14;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.Map$Entry r12;
        java.util.Iterator $r10;
        java.util.Set $r9;
        org.springframework.beans.factory.BeanFactory $r5, $r6;
        java.lang.Class r2;
        java.lang.Object $r11, $r13, $r15;
        org.springframework.beans.factory.ListableBeanFactory r0, $r7;

        r0 := @parameter0: org.springframework.beans.factory.ListableBeanFactory;

        r2 := @parameter1: java.lang.Class;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "ListableBeanFactory must not be null");

        $r1 = new java.util.LinkedHashMap;

        specialinvoke $r1.<java.util.LinkedHashMap: void <init>(int)>(4);

        $r3 = interfaceinvoke r0.<org.springframework.beans.factory.ListableBeanFactory: java.util.Map getBeansOfType(java.lang.Class)>(r2);

        interfaceinvoke $r1.<java.util.Map: void putAll(java.util.Map)>($r3);

        $z0 = r0 instanceof org.springframework.beans.factory.HierarchicalBeanFactory;

        if $z0 == 0 goto label3;

        r4 = (org.springframework.beans.factory.HierarchicalBeanFactory) r0;

        $r5 = interfaceinvoke r4.<org.springframework.beans.factory.HierarchicalBeanFactory: org.springframework.beans.factory.BeanFactory getParentBeanFactory()>();

        $z1 = $r5 instanceof org.springframework.beans.factory.ListableBeanFactory;

        if $z1 == 0 goto label3;

        $r6 = interfaceinvoke r4.<org.springframework.beans.factory.HierarchicalBeanFactory: org.springframework.beans.factory.BeanFactory getParentBeanFactory()>();

        $r7 = (org.springframework.beans.factory.ListableBeanFactory) $r6;

        $r8 = staticinvoke <org.springframework.beans.factory.BeanFactoryUtils: java.util.Map beansOfTypeIncludingAncestors(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class)>($r7, r2);

        $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Set entrySet()>();

        $r10 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r12 = (java.util.Map$Entry) $r11;

        $r13 = interfaceinvoke r12.<java.util.Map$Entry: java.lang.Object getKey()>();

        r14 = (java.lang.String) $r13;

        $z2 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>(r14);

        if $z2 != 0 goto label2;

        $z3 = interfaceinvoke r4.<org.springframework.beans.factory.HierarchicalBeanFactory: boolean containsLocalBean(java.lang.String)>(r14);

        if $z3 != 0 goto label2;

        $r15 = interfaceinvoke r12.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r14, $r15);

     label2:
        $z4 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z4 != 0 goto label1;

     label3:
        return $r1;
    }

    public static java.util.Map beansOfTypeIncludingAncestors(org.springframework.beans.factory.ListableBeanFactory, java.lang.Class, boolean, boolean) throws org.springframework.beans.BeansException
    {
        org.springframework.beans.factory.HierarchicalBeanFactory r4;
        java.util.LinkedHashMap $r1;
        java.util.Map $r3, $r8;
        java.lang.String r14;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6;
        java.util.Map$Entry r12;
        java.util.Iterator $r10;
        java.util.Set $r9;
        org.springframework.beans.factory.BeanFactory $r5, $r6;
        java.lang.Class r2;
        java.lang.Object $r11, $r13, $r15;
        org.springframework.beans.factory.ListableBeanFactory r0, $r7;

        r0 := @parameter0: org.springframework.beans.factory.ListableBeanFactory;

        r2 := @parameter1: java.lang.Class;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "ListableBeanFactory must not be null");

        $r1 = new java.util.LinkedHashMap;

        specialinvoke $r1.<java.util.LinkedHashMap: void <init>(int)>(4);

        $r3 = interfaceinvoke r0.<org.springframework.beans.factory.ListableBeanFactory: java.util.Map getBeansOfType(java.lang.Class,boolean,boolean)>(r2, z0, z1);

        interfaceinvoke $r1.<java.util.Map: void putAll(java.util.Map)>($r3);

        $z2 = r0 instanceof org.springframework.beans.factory.HierarchicalBeanFactory;

        if $z2 == 0 goto label3;

        r4 = (org.springframework.beans.factory.HierarchicalBeanFactory) r0;

        $r5 = interfaceinvoke r4.<org.springframework.beans.factory.HierarchicalBeanFactory: org.springframework.beans.factory.BeanFactory getParentBeanFactory()>();

        $z3 = $r5 instanceof org.springframework.beans.factory.ListableBeanFactory;

        if $z3 == 0 goto label3;

        $r6 = interfaceinvoke r4.<org.springframework.beans.factory.HierarchicalBeanFactory: org.springframework.beans.factory.BeanFactory getParentBeanFactory()>();

        $r7 = (org.springframework.beans.factory.ListableBeanFactory) $r6;

        $r8 = staticinvoke <org.springframework.beans.factory.BeanFactoryUtils: java.util.Map beansOfTypeIncludingAncestors(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,boolean,boolean)>($r7, r2, z0, z1);

        $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Set entrySet()>();

        $r10 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r12 = (java.util.Map$Entry) $r11;

        $r13 = interfaceinvoke r12.<java.util.Map$Entry: java.lang.Object getKey()>();

        r14 = (java.lang.String) $r13;

        $z4 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>(r14);

        if $z4 != 0 goto label2;

        $z5 = interfaceinvoke r4.<org.springframework.beans.factory.HierarchicalBeanFactory: boolean containsLocalBean(java.lang.String)>(r14);

        if $z5 != 0 goto label2;

        $r15 = interfaceinvoke r12.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r14, $r15);

     label2:
        $z6 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z6 != 0 goto label1;

     label3:
        return $r1;
    }

    public static java.lang.Object beanOfTypeIncludingAncestors(org.springframework.beans.factory.ListableBeanFactory, java.lang.Class) throws org.springframework.beans.BeansException
    {
        java.util.Iterator $r8;
        java.util.Collection $r7;
        java.util.Map $r2;
        org.springframework.beans.factory.NoSuchBeanDefinitionException $r3;
        int $i0, $i1;
        java.lang.Class r1;
        java.lang.StringBuilder $r4, $r5;
        java.lang.Object $r9;
        java.lang.String $r6;
        org.springframework.beans.factory.ListableBeanFactory r0;

        r0 := @parameter0: org.springframework.beans.factory.ListableBeanFactory;

        r1 := @parameter1: java.lang.Class;

        $r2 = staticinvoke <org.springframework.beans.factory.BeanFactoryUtils: java.util.Map beansOfTypeIncludingAncestors(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class)>(r0, r1);

        $i0 = interfaceinvoke $r2.<java.util.Map: int size()>();

        if $i0 != 1 goto label1;

        $r7 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>();

        $r8 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        return $r9;

     label1:
        $r3 = new org.springframework.beans.factory.NoSuchBeanDefinitionException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("expected single bean but found ");

        $i1 = interfaceinvoke $r2.<java.util.Map: int size()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<org.springframework.beans.factory.NoSuchBeanDefinitionException: void <init>(java.lang.Class,java.lang.String)>(r1, $r6);

        throw $r3;
    }

    public static java.lang.Object beanOfTypeIncludingAncestors(org.springframework.beans.factory.ListableBeanFactory, java.lang.Class, boolean, boolean) throws org.springframework.beans.BeansException
    {
        java.util.Iterator $r8;
        java.util.Collection $r7;
        java.util.Map $r2;
        org.springframework.beans.factory.NoSuchBeanDefinitionException $r3;
        int $i0, $i1;
        java.lang.Class r1;
        java.lang.StringBuilder $r4, $r5;
        java.lang.Object $r9;
        java.lang.String $r6;
        org.springframework.beans.factory.ListableBeanFactory r0;
        boolean z0, z1;

        r0 := @parameter0: org.springframework.beans.factory.ListableBeanFactory;

        r1 := @parameter1: java.lang.Class;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        $r2 = staticinvoke <org.springframework.beans.factory.BeanFactoryUtils: java.util.Map beansOfTypeIncludingAncestors(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,boolean,boolean)>(r0, r1, z0, z1);

        $i0 = interfaceinvoke $r2.<java.util.Map: int size()>();

        if $i0 != 1 goto label1;

        $r7 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>();

        $r8 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        return $r9;

     label1:
        $r3 = new org.springframework.beans.factory.NoSuchBeanDefinitionException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("expected single bean but found ");

        $i1 = interfaceinvoke $r2.<java.util.Map: int size()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<org.springframework.beans.factory.NoSuchBeanDefinitionException: void <init>(java.lang.Class,java.lang.String)>(r1, $r6);

        throw $r3;
    }

    public static java.lang.Object beanOfType(org.springframework.beans.factory.ListableBeanFactory, java.lang.Class) throws org.springframework.beans.BeansException
    {
        java.util.Iterator $r8;
        java.util.Collection $r7;
        java.util.Map $r2;
        org.springframework.beans.factory.NoSuchBeanDefinitionException $r3;
        int $i0, $i1;
        java.lang.Class r1;
        java.lang.StringBuilder $r4, $r5;
        java.lang.Object $r9;
        java.lang.String $r6;
        org.springframework.beans.factory.ListableBeanFactory r0;

        r0 := @parameter0: org.springframework.beans.factory.ListableBeanFactory;

        r1 := @parameter1: java.lang.Class;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "ListableBeanFactory must not be null");

        $r2 = interfaceinvoke r0.<org.springframework.beans.factory.ListableBeanFactory: java.util.Map getBeansOfType(java.lang.Class)>(r1);

        $i0 = interfaceinvoke $r2.<java.util.Map: int size()>();

        if $i0 != 1 goto label1;

        $r7 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>();

        $r8 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        return $r9;

     label1:
        $r3 = new org.springframework.beans.factory.NoSuchBeanDefinitionException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("expected single bean but found ");

        $i1 = interfaceinvoke $r2.<java.util.Map: int size()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<org.springframework.beans.factory.NoSuchBeanDefinitionException: void <init>(java.lang.Class,java.lang.String)>(r1, $r6);

        throw $r3;
    }

    public static java.lang.Object beanOfType(org.springframework.beans.factory.ListableBeanFactory, java.lang.Class, boolean, boolean) throws org.springframework.beans.BeansException
    {
        java.util.Iterator $r8;
        java.util.Collection $r7;
        java.util.Map $r2;
        org.springframework.beans.factory.NoSuchBeanDefinitionException $r3;
        int $i0, $i1;
        java.lang.Class r1;
        java.lang.StringBuilder $r4, $r5;
        java.lang.Object $r9;
        java.lang.String $r6;
        org.springframework.beans.factory.ListableBeanFactory r0;
        boolean z0, z1;

        r0 := @parameter0: org.springframework.beans.factory.ListableBeanFactory;

        r1 := @parameter1: java.lang.Class;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "ListableBeanFactory must not be null");

        $r2 = interfaceinvoke r0.<org.springframework.beans.factory.ListableBeanFactory: java.util.Map getBeansOfType(java.lang.Class,boolean,boolean)>(r1, z0, z1);

        $i0 = interfaceinvoke $r2.<java.util.Map: int size()>();

        if $i0 != 1 goto label1;

        $r7 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>();

        $r8 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        return $r9;

     label1:
        $r3 = new org.springframework.beans.factory.NoSuchBeanDefinitionException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("expected single bean but found ");

        $i1 = interfaceinvoke $r2.<java.util.Map: int size()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<org.springframework.beans.factory.NoSuchBeanDefinitionException: void <init>(java.lang.Class,java.lang.String)>(r1, $r6);

        throw $r3;
    }

    public static void <clinit>()
    {
        <org.springframework.beans.factory.BeanFactoryUtils: java.lang.String GENERATED_BEAN_NAME_SEPARATOR> = "#";

        return;
    }
}
