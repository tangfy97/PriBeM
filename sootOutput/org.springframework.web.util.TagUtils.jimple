public abstract class org.springframework.web.util.TagUtils extends java.lang.Object
{
    public static final java.lang.String SCOPE_PAGE;
    public static final java.lang.String SCOPE_REQUEST;
    public static final java.lang.String SCOPE_SESSION;
    public static final java.lang.String SCOPE_APPLICATION;

    public void <init>()
    {
        org.springframework.web.util.TagUtils r0;

        r0 := @this: org.springframework.web.util.TagUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int getScope(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Scope to search for cannot be null");

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("request");

        if $z0 == 0 goto label1;

        return 2;

     label1:
        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("session");

        if $z1 == 0 goto label2;

        return 3;

     label2:
        $z2 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("application");

        if $z2 == 0 goto label3;

        return 4;

     label3:
        return 1;
    }

    public static boolean hasAncestorOfType(javax.servlet.jsp.tagext.Tag, java.lang.Class)
    {
        java.lang.IllegalArgumentException $r4;
        javax.servlet.jsp.tagext.Tag r0, r10;
        java.lang.Class r1, $r2, $r3;
        java.lang.StringBuilder $r5, $r7, $r8;
        java.lang.String $r6, $r9;
        boolean $z0, $z1;

        r0 := @parameter0: javax.servlet.jsp.tagext.Tag;

        r1 := @parameter1: java.lang.Class;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Tag cannot be null");

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "Ancestor tag class cannot be null");

        $r2 = class "Ljavax/servlet/jsp/tagext/Tag;";

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1);

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Class \'");

        $r6 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not a valid Tag type");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r4;

     label1:
        r10 = interfaceinvoke r0.<javax.servlet.jsp.tagext.Tag: javax.servlet.jsp.tagext.Tag getParent()>();

        goto label4;

     label2:
        $r3 = virtualinvoke r10.<java.lang.Object: java.lang.Class getClass()>();

        $z1 = virtualinvoke r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r3);

        if $z1 == 0 goto label3;

        return 1;

     label3:
        r10 = interfaceinvoke r10.<javax.servlet.jsp.tagext.Tag: javax.servlet.jsp.tagext.Tag getParent()>();

     label4:
        if r10 != null goto label2;

        return 0;
    }

    public static void assertHasAncestorOfType(javax.servlet.jsp.tagext.Tag, java.lang.Class, java.lang.String, java.lang.String)
    {
        java.lang.IllegalStateException $r4;
        javax.servlet.jsp.tagext.Tag r2;
        java.lang.Class r3;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r9;
        java.lang.String r0, r1, $r10;
        boolean $z0;

        r2 := @parameter0: javax.servlet.jsp.tagext.Tag;

        r3 := @parameter1: java.lang.Class;

        r0 := @parameter2: java.lang.String;

        r1 := @parameter3: java.lang.String;

        staticinvoke <org.springframework.util.Assert: void hasText(java.lang.String,java.lang.String)>(r0, "\'tagName\' must not be empty");

        staticinvoke <org.springframework.util.Assert: void hasText(java.lang.String,java.lang.String)>(r1, "\'ancestorTagName\' must not be empty");

        $z0 = staticinvoke <org.springframework.web.util.TagUtils: boolean hasAncestorOfType(javax.servlet.jsp.tagext.Tag,java.lang.Class)>(r2, r3);

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalStateException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("The \'");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' tag can only be used inside a valid \'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' tag.");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r10);

        throw $r4;

     label1:
        return;
    }

    public static void <clinit>()
    {
        <org.springframework.web.util.TagUtils: java.lang.String SCOPE_APPLICATION> = "application";

        <org.springframework.web.util.TagUtils: java.lang.String SCOPE_SESSION> = "session";

        <org.springframework.web.util.TagUtils: java.lang.String SCOPE_REQUEST> = "request";

        <org.springframework.web.util.TagUtils: java.lang.String SCOPE_PAGE> = "page";

        return;
    }
}
