public class org.waveprotocol.wave.crypto.DefaultCacheImpl extends java.lang.Object implements org.waveprotocol.wave.crypto.VerifiedCertChainCache
{
    private static final int VALIDATION_CACHE_SIZE;
    private static final long VALIDATION_CACHE_AGE_SECONDS;
    private final org.waveprotocol.wave.crypto.DefaultCacheImpl$LruLinkedHashMap map;
    private final org.waveprotocol.wave.crypto.TimeSource timeSource;

    public void <init>(org.waveprotocol.wave.crypto.TimeSource)
    {
        org.waveprotocol.wave.crypto.DefaultCacheImpl r0;
        org.waveprotocol.wave.crypto.DefaultCacheImpl$LruLinkedHashMap $r1;
        org.waveprotocol.wave.crypto.TimeSource r2;

        r0 := @this: org.waveprotocol.wave.crypto.DefaultCacheImpl;

        r2 := @parameter0: org.waveprotocol.wave.crypto.TimeSource;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.waveprotocol.wave.crypto.DefaultCacheImpl$LruLinkedHashMap;

        specialinvoke $r1.<org.waveprotocol.wave.crypto.DefaultCacheImpl$LruLinkedHashMap: void <init>(int)>(1024);

        r0.<org.waveprotocol.wave.crypto.DefaultCacheImpl: org.waveprotocol.wave.crypto.DefaultCacheImpl$LruLinkedHashMap map> = $r1;

        r0.<org.waveprotocol.wave.crypto.DefaultCacheImpl: org.waveprotocol.wave.crypto.TimeSource timeSource> = r2;

        return;
    }

    public void add(java.util.List)
    {
        java.lang.Throwable $r6;
        long $l0, l1;
        org.waveprotocol.wave.crypto.DefaultCacheImpl r0;
        java.util.List r3;
        org.waveprotocol.wave.crypto.TimeSource $r2;
        org.waveprotocol.wave.crypto.DefaultCacheImpl$LruLinkedHashMap $r1, $r5;
        org.waveprotocol.wave.crypto.DefaultCacheImpl$EntryWithAge $r4;

        r0 := @this: org.waveprotocol.wave.crypto.DefaultCacheImpl;

        r3 := @parameter0: java.util.List;

        $r1 = r0.<org.waveprotocol.wave.crypto.DefaultCacheImpl: org.waveprotocol.wave.crypto.DefaultCacheImpl$LruLinkedHashMap map>;

        entermonitor $r1;

     label1:
        $r2 = r0.<org.waveprotocol.wave.crypto.DefaultCacheImpl: org.waveprotocol.wave.crypto.TimeSource timeSource>;

        $l0 = interfaceinvoke $r2.<org.waveprotocol.wave.crypto.TimeSource: long currentTimeMillis()>();

        l1 = $l0 + 600000L;

        $r5 = r0.<org.waveprotocol.wave.crypto.DefaultCacheImpl: org.waveprotocol.wave.crypto.DefaultCacheImpl$LruLinkedHashMap map>;

        $r4 = new org.waveprotocol.wave.crypto.DefaultCacheImpl$EntryWithAge;

        specialinvoke $r4.<org.waveprotocol.wave.crypto.DefaultCacheImpl$EntryWithAge: void <init>(long)>(l1);

        virtualinvoke $r5.<org.waveprotocol.wave.crypto.DefaultCacheImpl$LruLinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r4);

        exitmonitor $r1;

     label2:
        goto label5;

     label3:
        $r6 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r6;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean contains(java.util.List)
    {
        java.lang.Throwable $r7;
        long $l0, $l1;
        org.waveprotocol.wave.crypto.DefaultCacheImpl r0;
        java.util.List r2;
        byte $b2;
        org.waveprotocol.wave.crypto.TimeSource $r6;
        int $i3;
        java.lang.Object $r4;
        org.waveprotocol.wave.crypto.DefaultCacheImpl$LruLinkedHashMap $r1, $r3;
        org.waveprotocol.wave.crypto.DefaultCacheImpl$EntryWithAge r5;

        r0 := @this: org.waveprotocol.wave.crypto.DefaultCacheImpl;

        r2 := @parameter0: java.util.List;

        $r1 = r0.<org.waveprotocol.wave.crypto.DefaultCacheImpl: org.waveprotocol.wave.crypto.DefaultCacheImpl$LruLinkedHashMap map>;

        entermonitor $r1;

     label1:
        $r3 = r0.<org.waveprotocol.wave.crypto.DefaultCacheImpl: org.waveprotocol.wave.crypto.DefaultCacheImpl$LruLinkedHashMap map>;

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.crypto.DefaultCacheImpl$LruLinkedHashMap: java.lang.Object get(java.lang.Object)>(r2);

        r5 = (org.waveprotocol.wave.crypto.DefaultCacheImpl$EntryWithAge) $r4;

        if r5 == null goto label3;

        $r6 = r0.<org.waveprotocol.wave.crypto.DefaultCacheImpl: org.waveprotocol.wave.crypto.TimeSource timeSource>;

        $l0 = interfaceinvoke $r6.<org.waveprotocol.wave.crypto.TimeSource: long currentTimeMillis()>();

        $l1 = staticinvoke <org.waveprotocol.wave.crypto.DefaultCacheImpl$EntryWithAge: long access$000(org.waveprotocol.wave.crypto.DefaultCacheImpl$EntryWithAge)>(r5);

        $b2 = $l0 cmp $l1;

        $i3 = (int) $b2;

        if $i3 >= 0 goto label3;

        exitmonitor $r1;

     label2:
        return 1;

     label3:
        exitmonitor $r1;

     label4:
        return 0;

     label5:
        $r7 := @caughtexception;

        exitmonitor $r1;

     label6:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public static void <clinit>()
    {
        <org.waveprotocol.wave.crypto.DefaultCacheImpl: long VALIDATION_CACHE_AGE_SECONDS> = 600L;

        <org.waveprotocol.wave.crypto.DefaultCacheImpl: int VALIDATION_CACHE_SIZE> = 1024;

        return;
    }
}
