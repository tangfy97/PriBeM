public abstract class org.springframework.web.filter.AbstractRequestLoggingFilter extends org.springframework.web.filter.OncePerRequestFilter
{
    public static final java.lang.String DEFAULT_BEFORE_MESSAGE_PREFIX;
    public static final java.lang.String DEFAULT_BEFORE_MESSAGE_SUFFIX;
    public static final java.lang.String DEFAULT_AFTER_MESSAGE_PREFIX;
    public static final java.lang.String DEFAULT_AFTER_MESSAGE_SUFFIX;
    private static final int DEFAULT_MAX_PAYLOAD_LENGTH;
    private boolean includeQueryString;
    private boolean includeClientInfo;
    private boolean includePayload;
    private int maxPayloadLength;
    private java.lang.String beforeMessagePrefix;
    private java.lang.String beforeMessageSuffix;
    private java.lang.String afterMessagePrefix;
    private java.lang.String afterMessageSuffix;

    public void <init>()
    {
        org.springframework.web.filter.AbstractRequestLoggingFilter r0;

        r0 := @this: org.springframework.web.filter.AbstractRequestLoggingFilter;

        specialinvoke r0.<org.springframework.web.filter.OncePerRequestFilter: void <init>()>();

        r0.<org.springframework.web.filter.AbstractRequestLoggingFilter: boolean includeQueryString> = 0;

        r0.<org.springframework.web.filter.AbstractRequestLoggingFilter: boolean includeClientInfo> = 0;

        r0.<org.springframework.web.filter.AbstractRequestLoggingFilter: boolean includePayload> = 0;

        r0.<org.springframework.web.filter.AbstractRequestLoggingFilter: int maxPayloadLength> = 50;

        r0.<org.springframework.web.filter.AbstractRequestLoggingFilter: java.lang.String beforeMessagePrefix> = "Before request [";

        r0.<org.springframework.web.filter.AbstractRequestLoggingFilter: java.lang.String beforeMessageSuffix> = "]";

        r0.<org.springframework.web.filter.AbstractRequestLoggingFilter: java.lang.String afterMessagePrefix> = "After request [";

        r0.<org.springframework.web.filter.AbstractRequestLoggingFilter: java.lang.String afterMessageSuffix> = "]";

        return;
    }

    public void setIncludeQueryString(boolean)
    {
        org.springframework.web.filter.AbstractRequestLoggingFilter r0;
        boolean z0;

        r0 := @this: org.springframework.web.filter.AbstractRequestLoggingFilter;

        z0 := @parameter0: boolean;

        r0.<org.springframework.web.filter.AbstractRequestLoggingFilter: boolean includeQueryString> = z0;

        return;
    }

    protected boolean isIncludeQueryString()
    {
        org.springframework.web.filter.AbstractRequestLoggingFilter r0;
        boolean $z0;

        r0 := @this: org.springframework.web.filter.AbstractRequestLoggingFilter;

        $z0 = r0.<org.springframework.web.filter.AbstractRequestLoggingFilter: boolean includeQueryString>;

        return $z0;
    }

    public void setIncludeClientInfo(boolean)
    {
        org.springframework.web.filter.AbstractRequestLoggingFilter r0;
        boolean z0;

        r0 := @this: org.springframework.web.filter.AbstractRequestLoggingFilter;

        z0 := @parameter0: boolean;

        r0.<org.springframework.web.filter.AbstractRequestLoggingFilter: boolean includeClientInfo> = z0;

        return;
    }

    protected boolean isIncludeClientInfo()
    {
        org.springframework.web.filter.AbstractRequestLoggingFilter r0;
        boolean $z0;

        r0 := @this: org.springframework.web.filter.AbstractRequestLoggingFilter;

        $z0 = r0.<org.springframework.web.filter.AbstractRequestLoggingFilter: boolean includeClientInfo>;

        return $z0;
    }

    public void setIncludePayload(boolean)
    {
        org.springframework.web.filter.AbstractRequestLoggingFilter r0;
        boolean z0;

        r0 := @this: org.springframework.web.filter.AbstractRequestLoggingFilter;

        z0 := @parameter0: boolean;

        r0.<org.springframework.web.filter.AbstractRequestLoggingFilter: boolean includePayload> = z0;

        return;
    }

    protected boolean isIncludePayload()
    {
        org.springframework.web.filter.AbstractRequestLoggingFilter r0;
        boolean $z0;

        r0 := @this: org.springframework.web.filter.AbstractRequestLoggingFilter;

        $z0 = r0.<org.springframework.web.filter.AbstractRequestLoggingFilter: boolean includePayload>;

        return $z0;
    }

    public void setMaxPayloadLength(int)
    {
        int i0;
        org.springframework.web.filter.AbstractRequestLoggingFilter r0;
        boolean $z0;

        r0 := @this: org.springframework.web.filter.AbstractRequestLoggingFilter;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.springframework.util.Assert: void isTrue(boolean,java.lang.String)>($z0, "\'maxPayloadLength\' should be larger than or equal to 0");

        r0.<org.springframework.web.filter.AbstractRequestLoggingFilter: int maxPayloadLength> = i0;

        return;
    }

    protected int getMaxPayloadLength()
    {
        int $i0;
        org.springframework.web.filter.AbstractRequestLoggingFilter r0;

        r0 := @this: org.springframework.web.filter.AbstractRequestLoggingFilter;

        $i0 = r0.<org.springframework.web.filter.AbstractRequestLoggingFilter: int maxPayloadLength>;

        return $i0;
    }

    public void setBeforeMessagePrefix(java.lang.String)
    {
        java.lang.String r1;
        org.springframework.web.filter.AbstractRequestLoggingFilter r0;

        r0 := @this: org.springframework.web.filter.AbstractRequestLoggingFilter;

        r1 := @parameter0: java.lang.String;

        r0.<org.springframework.web.filter.AbstractRequestLoggingFilter: java.lang.String beforeMessagePrefix> = r1;

        return;
    }

    public void setBeforeMessageSuffix(java.lang.String)
    {
        java.lang.String r1;
        org.springframework.web.filter.AbstractRequestLoggingFilter r0;

        r0 := @this: org.springframework.web.filter.AbstractRequestLoggingFilter;

        r1 := @parameter0: java.lang.String;

        r0.<org.springframework.web.filter.AbstractRequestLoggingFilter: java.lang.String beforeMessageSuffix> = r1;

        return;
    }

    public void setAfterMessagePrefix(java.lang.String)
    {
        java.lang.String r1;
        org.springframework.web.filter.AbstractRequestLoggingFilter r0;

        r0 := @this: org.springframework.web.filter.AbstractRequestLoggingFilter;

        r1 := @parameter0: java.lang.String;

        r0.<org.springframework.web.filter.AbstractRequestLoggingFilter: java.lang.String afterMessagePrefix> = r1;

        return;
    }

    public void setAfterMessageSuffix(java.lang.String)
    {
        java.lang.String r1;
        org.springframework.web.filter.AbstractRequestLoggingFilter r0;

        r0 := @this: org.springframework.web.filter.AbstractRequestLoggingFilter;

        r1 := @parameter0: java.lang.String;

        r0.<org.springframework.web.filter.AbstractRequestLoggingFilter: java.lang.String afterMessageSuffix> = r1;

        return;
    }

    protected void doFilterInternal(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, javax.servlet.FilterChain) throws javax.servlet.ServletException, java.io.IOException
    {
        java.lang.Throwable $r6;
        javax.servlet.FilterChain r2;
        javax.servlet.http.HttpServletResponse r3;
        org.springframework.web.filter.AbstractRequestLoggingFilter$RequestCachingRequestWrapper $r5;
        org.springframework.web.filter.AbstractRequestLoggingFilter r0;
        javax.servlet.http.HttpServletRequest r8;
        java.lang.String $r1, $r4, $r7;
        boolean $z0;

        r0 := @this: org.springframework.web.filter.AbstractRequestLoggingFilter;

        r8 := @parameter0: javax.servlet.http.HttpServletRequest;

        r3 := @parameter1: javax.servlet.http.HttpServletResponse;

        r2 := @parameter2: javax.servlet.FilterChain;

        $z0 = virtualinvoke r0.<org.springframework.web.filter.AbstractRequestLoggingFilter: boolean isIncludePayload()>();

        if $z0 == 0 goto label1;

        $r5 = new org.springframework.web.filter.AbstractRequestLoggingFilter$RequestCachingRequestWrapper;

        specialinvoke $r5.<org.springframework.web.filter.AbstractRequestLoggingFilter$RequestCachingRequestWrapper: void <init>(javax.servlet.http.HttpServletRequest,org.springframework.web.filter.AbstractRequestLoggingFilter$RequestCachingRequestWrapper)>(r8, null);

        r8 = $r5;

     label1:
        $r1 = specialinvoke r0.<org.springframework.web.filter.AbstractRequestLoggingFilter: java.lang.String getBeforeMessage(javax.servlet.http.HttpServletRequest)>(r8);

        virtualinvoke r0.<org.springframework.web.filter.AbstractRequestLoggingFilter: void beforeRequest(javax.servlet.http.HttpServletRequest,java.lang.String)>(r8, $r1);

     label2:
        interfaceinvoke r2.<javax.servlet.FilterChain: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)>(r8, r3);

        goto label4;

     label3:
        $r6 := @caughtexception;

        $r7 = specialinvoke r0.<org.springframework.web.filter.AbstractRequestLoggingFilter: java.lang.String getAfterMessage(javax.servlet.http.HttpServletRequest)>(r8);

        virtualinvoke r0.<org.springframework.web.filter.AbstractRequestLoggingFilter: void afterRequest(javax.servlet.http.HttpServletRequest,java.lang.String)>(r8, $r7);

        throw $r6;

     label4:
        $r4 = specialinvoke r0.<org.springframework.web.filter.AbstractRequestLoggingFilter: java.lang.String getAfterMessage(javax.servlet.http.HttpServletRequest)>(r8);

        virtualinvoke r0.<org.springframework.web.filter.AbstractRequestLoggingFilter: void afterRequest(javax.servlet.http.HttpServletRequest,java.lang.String)>(r8, $r4);

        return;

        catch java.lang.Throwable from label2 to label3 with label3;
    }

    private java.lang.String getBeforeMessage(javax.servlet.http.HttpServletRequest)
    {
        javax.servlet.http.HttpServletRequest r1;
        java.lang.String $r2, $r3, $r4;
        org.springframework.web.filter.AbstractRequestLoggingFilter r0;

        r0 := @this: org.springframework.web.filter.AbstractRequestLoggingFilter;

        r1 := @parameter0: javax.servlet.http.HttpServletRequest;

        $r3 = r0.<org.springframework.web.filter.AbstractRequestLoggingFilter: java.lang.String beforeMessagePrefix>;

        $r2 = r0.<org.springframework.web.filter.AbstractRequestLoggingFilter: java.lang.String beforeMessageSuffix>;

        $r4 = virtualinvoke r0.<org.springframework.web.filter.AbstractRequestLoggingFilter: java.lang.String createMessage(javax.servlet.http.HttpServletRequest,java.lang.String,java.lang.String)>(r1, $r3, $r2);

        return $r4;
    }

    private java.lang.String getAfterMessage(javax.servlet.http.HttpServletRequest)
    {
        javax.servlet.http.HttpServletRequest r1;
        java.lang.String $r2, $r3, $r4;
        org.springframework.web.filter.AbstractRequestLoggingFilter r0;

        r0 := @this: org.springframework.web.filter.AbstractRequestLoggingFilter;

        r1 := @parameter0: javax.servlet.http.HttpServletRequest;

        $r3 = r0.<org.springframework.web.filter.AbstractRequestLoggingFilter: java.lang.String afterMessagePrefix>;

        $r2 = r0.<org.springframework.web.filter.AbstractRequestLoggingFilter: java.lang.String afterMessageSuffix>;

        $r4 = virtualinvoke r0.<org.springframework.web.filter.AbstractRequestLoggingFilter: java.lang.String createMessage(javax.servlet.http.HttpServletRequest,java.lang.String,java.lang.String)>(r1, $r3, $r2);

        return $r4;
    }

    protected java.lang.String createMessage(javax.servlet.http.HttpServletRequest, java.lang.String, java.lang.String)
    {
        byte[] $r7;
        boolean $z0, $z1, $z2, $z3, $z4;
        javax.servlet.http.HttpSession $r12;
        java.lang.StringBuilder $r0, $r2, $r10, $r14, $r15, $r17, $r18;
        java.io.UnsupportedEncodingException $r20;
        org.springframework.web.filter.AbstractRequestLoggingFilter r5;
        javax.servlet.http.HttpServletRequest r3;
        int $i0, $i1, $i2, $i3;
        java.lang.String r1, $r4, r6, $r8, $r9, $r11, $r13, $r16, $r19, r22, $r23;
        org.springframework.web.filter.AbstractRequestLoggingFilter$RequestCachingRequestWrapper r21;

        r5 := @this: org.springframework.web.filter.AbstractRequestLoggingFilter;

        r3 := @parameter0: javax.servlet.http.HttpServletRequest;

        r1 := @parameter1: java.lang.String;

        r6 := @parameter2: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("uri=");

        $r4 = interfaceinvoke r3.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $z0 = virtualinvoke r5.<org.springframework.web.filter.AbstractRequestLoggingFilter: boolean isIncludeQueryString()>();

        if $z0 == 0 goto label1;

        $r18 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(63);

        $r19 = interfaceinvoke r3.<javax.servlet.http.HttpServletRequest: java.lang.String getQueryString()>();

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

     label1:
        $z1 = virtualinvoke r5.<org.springframework.web.filter.AbstractRequestLoggingFilter: boolean isIncludeClientInfo()>();

        if $z1 == 0 goto label4;

        $r11 = interfaceinvoke r3.<javax.servlet.http.HttpServletRequest: java.lang.String getRemoteAddr()>();

        $z3 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>($r11);

        if $z3 == 0 goto label2;

        $r17 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";client=");

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

     label2:
        $r12 = interfaceinvoke r3.<javax.servlet.http.HttpServletRequest: javax.servlet.http.HttpSession getSession(boolean)>(0);

        if $r12 == null goto label3;

        $r15 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";session=");

        $r16 = interfaceinvoke $r12.<javax.servlet.http.HttpSession: java.lang.String getId()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

     label3:
        $r13 = interfaceinvoke r3.<javax.servlet.http.HttpServletRequest: java.lang.String getRemoteUser()>();

        if $r13 == null goto label4;

        $r14 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";user=");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

     label4:
        $z4 = virtualinvoke r5.<org.springframework.web.filter.AbstractRequestLoggingFilter: boolean isIncludePayload()>();

        if $z4 == 0 goto label9;

        $z2 = r3 instanceof org.springframework.web.filter.AbstractRequestLoggingFilter$RequestCachingRequestWrapper;

        if $z2 == 0 goto label9;

        r21 = (org.springframework.web.filter.AbstractRequestLoggingFilter$RequestCachingRequestWrapper) r3;

        $r7 = staticinvoke <org.springframework.web.filter.AbstractRequestLoggingFilter$RequestCachingRequestWrapper: byte[] access$2(org.springframework.web.filter.AbstractRequestLoggingFilter$RequestCachingRequestWrapper)>(r21);

        $i0 = lengthof $r7;

        if $i0 <= 0 goto label9;

        $i1 = lengthof $r7;

        $i2 = virtualinvoke r5.<org.springframework.web.filter.AbstractRequestLoggingFilter: int getMaxPayloadLength()>();

        $i3 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i2);

     label5:
        $r8 = new java.lang.String;

        $r9 = virtualinvoke r21.<org.springframework.web.filter.AbstractRequestLoggingFilter$RequestCachingRequestWrapper: java.lang.String getCharacterEncoding()>();

        specialinvoke $r8.<java.lang.String: void <init>(byte[],int,int,java.lang.String)>($r7, 0, $i3, $r9);

        r22 = $r8;

     label6:
        goto label8;

     label7:
        $r20 := @caughtexception;

        r22 = "[unknown]";

     label8:
        $r10 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";payload=");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r22);

     label9:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r23 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r23;

        catch java.io.UnsupportedEncodingException from label5 to label6 with label7;
    }

    protected abstract void beforeRequest(javax.servlet.http.HttpServletRequest, java.lang.String);

    protected abstract void afterRequest(javax.servlet.http.HttpServletRequest, java.lang.String);

    public static void <clinit>()
    {
        <org.springframework.web.filter.AbstractRequestLoggingFilter: int DEFAULT_MAX_PAYLOAD_LENGTH> = 50;

        <org.springframework.web.filter.AbstractRequestLoggingFilter: java.lang.String DEFAULT_AFTER_MESSAGE_SUFFIX> = "]";

        <org.springframework.web.filter.AbstractRequestLoggingFilter: java.lang.String DEFAULT_AFTER_MESSAGE_PREFIX> = "After request [";

        <org.springframework.web.filter.AbstractRequestLoggingFilter: java.lang.String DEFAULT_BEFORE_MESSAGE_SUFFIX> = "]";

        <org.springframework.web.filter.AbstractRequestLoggingFilter: java.lang.String DEFAULT_BEFORE_MESSAGE_PREFIX> = "Before request [";

        return;
    }
}
