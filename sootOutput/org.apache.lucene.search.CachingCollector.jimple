public abstract class org.apache.lucene.search.CachingCollector extends org.apache.lucene.search.Collector
{
    private static final int MAX_ARRAY_SIZE;
    private static final int INITIAL_ARRAY_SIZE;
    private static final int[] EMPTY_INT_ARRAY;
    protected final org.apache.lucene.search.Collector other;
    protected final int maxDocsToCache;
    protected final java.util.List cachedSegs;
    protected final java.util.List cachedDocs;
    private org.apache.lucene.index.AtomicReaderContext lastReaderContext;
    protected int[] curDocs;
    protected int upto;
    protected int base;
    protected int lastDocBase;

    public static org.apache.lucene.search.CachingCollector create(boolean, boolean, double)
    {
        org.apache.lucene.search.CachingCollector$1 $r0;
        org.apache.lucene.search.CachingCollector $r1;
        boolean z0, z1;
        double d0;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        d0 := @parameter2: double;

        $r0 = new org.apache.lucene.search.CachingCollector$1;

        specialinvoke $r0.<org.apache.lucene.search.CachingCollector$1: void <init>(boolean)>(z0);

        $r1 = staticinvoke <org.apache.lucene.search.CachingCollector: org.apache.lucene.search.CachingCollector create(org.apache.lucene.search.Collector,boolean,double)>($r0, z1, d0);

        return $r1;
    }

    public static org.apache.lucene.search.CachingCollector create(org.apache.lucene.search.Collector, boolean, double)
    {
        org.apache.lucene.search.CachingCollector$NoScoreCachingCollector $r3;
        org.apache.lucene.search.CachingCollector$ScoreCachingCollector $r2;
        org.apache.lucene.search.Collector r0;
        org.apache.lucene.search.CachingCollector $r1;
        boolean z0;
        double d0;

        r0 := @parameter0: org.apache.lucene.search.Collector;

        z0 := @parameter1: boolean;

        d0 := @parameter2: double;

        if z0 == 0 goto label1;

        $r2 = new org.apache.lucene.search.CachingCollector$ScoreCachingCollector;

        $r1 = $r2;

        specialinvoke $r2.<org.apache.lucene.search.CachingCollector$ScoreCachingCollector: void <init>(org.apache.lucene.search.Collector,double)>(r0, d0);

        goto label2;

     label1:
        $r3 = new org.apache.lucene.search.CachingCollector$NoScoreCachingCollector;

        $r1 = $r3;

        specialinvoke $r3.<org.apache.lucene.search.CachingCollector$NoScoreCachingCollector: void <init>(org.apache.lucene.search.Collector,double)>(r0, d0);

     label2:
        return $r1;
    }

    public static org.apache.lucene.search.CachingCollector create(org.apache.lucene.search.Collector, boolean, int)
    {
        org.apache.lucene.search.CachingCollector$NoScoreCachingCollector $r3;
        int i0;
        org.apache.lucene.search.CachingCollector$ScoreCachingCollector $r2;
        org.apache.lucene.search.Collector r0;
        org.apache.lucene.search.CachingCollector $r1;
        boolean z0;

        r0 := @parameter0: org.apache.lucene.search.Collector;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        if z0 == 0 goto label1;

        $r2 = new org.apache.lucene.search.CachingCollector$ScoreCachingCollector;

        $r1 = $r2;

        specialinvoke $r2.<org.apache.lucene.search.CachingCollector$ScoreCachingCollector: void <init>(org.apache.lucene.search.Collector,int)>(r0, i0);

        goto label2;

     label1:
        $r3 = new org.apache.lucene.search.CachingCollector$NoScoreCachingCollector;

        $r1 = $r3;

        specialinvoke $r3.<org.apache.lucene.search.CachingCollector$NoScoreCachingCollector: void <init>(org.apache.lucene.search.Collector,int)>(r0, i0);

     label2:
        return $r1;
    }

    private void <init>(org.apache.lucene.search.Collector, double, boolean)
    {
        org.apache.lucene.search.Collector r2;
        java.util.ArrayList $r1, $r3;
        java.util.List $r6;
        byte b1;
        int[] $r4, $r5;
        int $i0;
        org.apache.lucene.search.CachingCollector r0;
        boolean z0;
        double d0, $d1, $d2, $d3, $d4;

        r0 := @this: org.apache.lucene.search.CachingCollector;

        r2 := @parameter0: org.apache.lucene.search.Collector;

        d0 := @parameter1: double;

        z0 := @parameter2: boolean;

        specialinvoke r0.<org.apache.lucene.search.Collector: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.lucene.search.CachingCollector: java.util.List cachedSegs> = $r1;

        r0.<org.apache.lucene.search.CachingCollector: org.apache.lucene.search.Collector other> = r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.lucene.search.CachingCollector: java.util.List cachedDocs> = $r3;

        $r4 = newarray (int)[128];

        r0.<org.apache.lucene.search.CachingCollector: int[] curDocs> = $r4;

        $r6 = r0.<org.apache.lucene.search.CachingCollector: java.util.List cachedDocs>;

        $r5 = r0.<org.apache.lucene.search.CachingCollector: int[] curDocs>;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r5);

        b1 = 4;

        if z0 == 0 goto label1;

        b1 = 8;

     label1:
        $d1 = d0 * 1024.0;

        $d3 = $d1 * 1024.0;

        $d2 = (double) b1;

        $d4 = $d3 / $d2;

        $i0 = (int) $d4;

        r0.<org.apache.lucene.search.CachingCollector: int maxDocsToCache> = $i0;

        return;
    }

    private void <init>(org.apache.lucene.search.Collector, int)
    {
        org.apache.lucene.search.Collector r2;
        java.util.ArrayList $r1, $r3;
        java.util.List $r6;
        int[] $r4, $r5;
        int i0;
        org.apache.lucene.search.CachingCollector r0;

        r0 := @this: org.apache.lucene.search.CachingCollector;

        r2 := @parameter0: org.apache.lucene.search.Collector;

        i0 := @parameter1: int;

        specialinvoke r0.<org.apache.lucene.search.Collector: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.lucene.search.CachingCollector: java.util.List cachedSegs> = $r1;

        r0.<org.apache.lucene.search.CachingCollector: org.apache.lucene.search.Collector other> = r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.lucene.search.CachingCollector: java.util.List cachedDocs> = $r3;

        $r4 = newarray (int)[128];

        r0.<org.apache.lucene.search.CachingCollector: int[] curDocs> = $r4;

        $r6 = r0.<org.apache.lucene.search.CachingCollector: java.util.List cachedDocs>;

        $r5 = r0.<org.apache.lucene.search.CachingCollector: int[] curDocs>;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r5);

        r0.<org.apache.lucene.search.CachingCollector: int maxDocsToCache> = i0;

        return;
    }

    public boolean acceptsDocsOutOfOrder()
    {
        org.apache.lucene.search.CachingCollector r0;
        org.apache.lucene.search.Collector $r1;
        boolean $z0;

        r0 := @this: org.apache.lucene.search.CachingCollector;

        $r1 = r0.<org.apache.lucene.search.CachingCollector: org.apache.lucene.search.Collector other>;

        $z0 = virtualinvoke $r1.<org.apache.lucene.search.Collector: boolean acceptsDocsOutOfOrder()>();

        return $z0;
    }

    public boolean isCached()
    {
        org.apache.lucene.search.CachingCollector r0;
        int[] $r1;
        boolean $z0;

        r0 := @this: org.apache.lucene.search.CachingCollector;

        $r1 = r0.<org.apache.lucene.search.CachingCollector: int[] curDocs>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void setNextReader(org.apache.lucene.index.AtomicReaderContext) throws java.io.IOException
    {
        org.apache.lucene.search.CachingCollector$SegStart $r4;
        org.apache.lucene.search.Collector $r2;
        java.util.List $r6;
        int $i0, $i1, $i2;
        org.apache.lucene.search.CachingCollector r0;
        org.apache.lucene.index.AtomicReaderContext r1, $r3, $r5;

        r0 := @this: org.apache.lucene.search.CachingCollector;

        r1 := @parameter0: org.apache.lucene.index.AtomicReaderContext;

        $r2 = r0.<org.apache.lucene.search.CachingCollector: org.apache.lucene.search.Collector other>;

        virtualinvoke $r2.<org.apache.lucene.search.Collector: void setNextReader(org.apache.lucene.index.AtomicReaderContext)>(r1);

        $r3 = r0.<org.apache.lucene.search.CachingCollector: org.apache.lucene.index.AtomicReaderContext lastReaderContext>;

        if $r3 == null goto label1;

        $r6 = r0.<org.apache.lucene.search.CachingCollector: java.util.List cachedSegs>;

        $r4 = new org.apache.lucene.search.CachingCollector$SegStart;

        $r5 = r0.<org.apache.lucene.search.CachingCollector: org.apache.lucene.index.AtomicReaderContext lastReaderContext>;

        $i1 = r0.<org.apache.lucene.search.CachingCollector: int base>;

        $i0 = r0.<org.apache.lucene.search.CachingCollector: int upto>;

        $i2 = $i1 + $i0;

        specialinvoke $r4.<org.apache.lucene.search.CachingCollector$SegStart: void <init>(org.apache.lucene.index.AtomicReaderContext,int)>($r5, $i2);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r4);

     label1:
        r0.<org.apache.lucene.search.CachingCollector: org.apache.lucene.index.AtomicReaderContext lastReaderContext> = r1;

        return;
    }

    void replayInit(org.apache.lucene.search.Collector)
    {
        java.lang.IllegalStateException $r8;
        org.apache.lucene.search.CachingCollector$SegStart $r3;
        org.apache.lucene.search.Collector r1, $r6;
        java.lang.IllegalArgumentException $r7;
        java.util.List $r5;
        int $i0, $i1, $i2;
        org.apache.lucene.search.CachingCollector r0;
        org.apache.lucene.index.AtomicReaderContext $r2, $r4;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.lucene.search.CachingCollector;

        r1 := @parameter0: org.apache.lucene.search.Collector;

        $z0 = virtualinvoke r0.<org.apache.lucene.search.CachingCollector: boolean isCached()>();

        if $z0 != 0 goto label1;

        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("cannot replay: cache was cleared because too much RAM was required");

        throw $r8;

     label1:
        $z1 = virtualinvoke r1.<org.apache.lucene.search.Collector: boolean acceptsDocsOutOfOrder()>();

        if $z1 != 0 goto label2;

        $r6 = r0.<org.apache.lucene.search.CachingCollector: org.apache.lucene.search.Collector other>;

        $z2 = virtualinvoke $r6.<org.apache.lucene.search.Collector: boolean acceptsDocsOutOfOrder()>();

        if $z2 == 0 goto label2;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("cannot replay: given collector does not support out-of-order collection, while the wrapped collector does. Therefore cached documents may be out-of-order.");

        throw $r7;

     label2:
        $r2 = r0.<org.apache.lucene.search.CachingCollector: org.apache.lucene.index.AtomicReaderContext lastReaderContext>;

        if $r2 == null goto label3;

        $r5 = r0.<org.apache.lucene.search.CachingCollector: java.util.List cachedSegs>;

        $r3 = new org.apache.lucene.search.CachingCollector$SegStart;

        $r4 = r0.<org.apache.lucene.search.CachingCollector: org.apache.lucene.index.AtomicReaderContext lastReaderContext>;

        $i1 = r0.<org.apache.lucene.search.CachingCollector: int base>;

        $i0 = r0.<org.apache.lucene.search.CachingCollector: int upto>;

        $i2 = $i1 + $i0;

        specialinvoke $r3.<org.apache.lucene.search.CachingCollector$SegStart: void <init>(org.apache.lucene.index.AtomicReaderContext,int)>($r4, $i2);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r3);

        r0.<org.apache.lucene.search.CachingCollector: org.apache.lucene.index.AtomicReaderContext lastReaderContext> = null;

     label3:
        return;
    }

    public abstract void replay(org.apache.lucene.search.Collector) throws java.io.IOException;

    void <init>(org.apache.lucene.search.Collector, double, boolean, org.apache.lucene.search.CachingCollector$1)
    {
        org.apache.lucene.search.CachingCollector$1 r2;
        org.apache.lucene.search.CachingCollector r0;
        org.apache.lucene.search.Collector r1;
        double d0;
        boolean z0;

        r0 := @this: org.apache.lucene.search.CachingCollector;

        r1 := @parameter0: org.apache.lucene.search.Collector;

        d0 := @parameter1: double;

        z0 := @parameter2: boolean;

        r2 := @parameter3: org.apache.lucene.search.CachingCollector$1;

        specialinvoke r0.<org.apache.lucene.search.CachingCollector: void <init>(org.apache.lucene.search.Collector,double,boolean)>(r1, d0, z0);

        return;
    }

    void <init>(org.apache.lucene.search.Collector, int, org.apache.lucene.search.CachingCollector$1)
    {
        org.apache.lucene.search.CachingCollector$1 r2;
        int i0;
        org.apache.lucene.search.CachingCollector r0;
        org.apache.lucene.search.Collector r1;

        r0 := @this: org.apache.lucene.search.CachingCollector;

        r1 := @parameter0: org.apache.lucene.search.Collector;

        i0 := @parameter1: int;

        r2 := @parameter2: org.apache.lucene.search.CachingCollector$1;

        specialinvoke r0.<org.apache.lucene.search.CachingCollector: void <init>(org.apache.lucene.search.Collector,int)>(r1, i0);

        return;
    }

    static int[] access$300()
    {
        int[] $r0;

        $r0 = <org.apache.lucene.search.CachingCollector: int[] EMPTY_INT_ARRAY>;

        return $r0;
    }

    static void <clinit>()
    {
        int[] $r0;

        <org.apache.lucene.search.CachingCollector: int INITIAL_ARRAY_SIZE> = 128;

        <org.apache.lucene.search.CachingCollector: int MAX_ARRAY_SIZE> = 524288;

        $r0 = newarray (int)[0];

        <org.apache.lucene.search.CachingCollector: int[] EMPTY_INT_ARRAY> = $r0;

        return;
    }
}
