public class org.sat4j.tools.xplain.HighLevelXplain extends org.sat4j.tools.SolverDecorator implements org.sat4j.tools.xplain.Explainer
{
    protected java.util.Map constrs;
    protected org.sat4j.specs.IVecInt assump;
    private int lastCreatedVar;
    private boolean pooledVarId;
    private org.sat4j.tools.xplain.MinimizationStrategy xplainStrategy;
    private final java.util.Map highLevelToVar;
    private static final long serialVersionUID;
    static final boolean $assertionsDisabled;

    public void <init>(org.sat4j.specs.ISolver)
    {
        org.sat4j.specs.ISolver r1;
        org.sat4j.tools.xplain.DeletionStrategy $r3;
        java.util.HashMap $r2, $r4;
        org.sat4j.tools.xplain.HighLevelXplain r0;

        r0 := @this: org.sat4j.tools.xplain.HighLevelXplain;

        r1 := @parameter0: org.sat4j.specs.ISolver;

        specialinvoke r0.<org.sat4j.tools.SolverDecorator: void <init>(org.sat4j.specs.ISolver)>(r1);

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<org.sat4j.tools.xplain.HighLevelXplain: java.util.Map constrs> = $r2;

        r0.<org.sat4j.tools.xplain.HighLevelXplain: boolean pooledVarId> = 0;

        $r3 = new org.sat4j.tools.xplain.DeletionStrategy;

        specialinvoke $r3.<org.sat4j.tools.xplain.DeletionStrategy: void <init>()>();

        r0.<org.sat4j.tools.xplain.HighLevelXplain: org.sat4j.tools.xplain.MinimizationStrategy xplainStrategy> = $r3;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<org.sat4j.tools.xplain.HighLevelXplain: java.util.Map highLevelToVar> = $r4;

        return;
    }

    public org.sat4j.specs.IConstr addClause(org.sat4j.specs.IVecInt, int) throws org.sat4j.specs.ContradictionException
    {
        java.lang.Integer $r2, $r6, $r8, $r10, r12;
        java.util.Map $r1, $r7, $r9;
        int i0, $i1, $i2;
        org.sat4j.specs.IConstr $r5, $r11;
        org.sat4j.specs.IVecInt r4;
        java.lang.Object $r3;
        org.sat4j.tools.xplain.HighLevelXplain r0;

        r0 := @this: org.sat4j.tools.xplain.HighLevelXplain;

        r4 := @parameter0: org.sat4j.specs.IVecInt;

        i0 := @parameter1: int;

        if i0 != 0 goto label1;

        $r11 = virtualinvoke r0.<org.sat4j.tools.xplain.HighLevelXplain: org.sat4j.specs.IConstr addClause(org.sat4j.specs.IVecInt)>(r4);

        return $r11;

     label1:
        $r1 = r0.<org.sat4j.tools.xplain.HighLevelXplain: java.util.Map highLevelToVar>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        r12 = (java.lang.Integer) $r3;

        if r12 != null goto label2;

        $i2 = virtualinvoke r0.<org.sat4j.tools.xplain.HighLevelXplain: int createNewVar(org.sat4j.specs.IVecInt)>(r4);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        r12 = $r6;

        $r7 = r0.<org.sat4j.tools.xplain.HighLevelXplain: java.util.Map highLevelToVar>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r6);

        $r9 = r0.<org.sat4j.tools.xplain.HighLevelXplain: java.util.Map constrs>;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r10);

     label2:
        $i1 = virtualinvoke r12.<java.lang.Integer: int intValue()>();

        interfaceinvoke r4.<org.sat4j.specs.IVecInt: org.sat4j.specs.IVecInt push(int)>($i1);

        $r5 = specialinvoke r0.<org.sat4j.tools.SolverDecorator: org.sat4j.specs.IConstr addClause(org.sat4j.specs.IVecInt)>(r4);

        return $r5;
    }

    protected int createNewVar(org.sat4j.specs.IVecInt)
    {
        int $i0, $i1, $i2;
        org.sat4j.specs.IVecInt r1;
        org.sat4j.tools.xplain.HighLevelXplain r0;
        boolean $z0;

        r0 := @this: org.sat4j.tools.xplain.HighLevelXplain;

        r1 := @parameter0: org.sat4j.specs.IVecInt;

        $z0 = r0.<org.sat4j.tools.xplain.HighLevelXplain: boolean pooledVarId>;

        if $z0 == 0 goto label1;

        r0.<org.sat4j.tools.xplain.HighLevelXplain: boolean pooledVarId> = 0;

        $i2 = r0.<org.sat4j.tools.xplain.HighLevelXplain: int lastCreatedVar>;

        return $i2;

     label1:
        $i0 = virtualinvoke r0.<org.sat4j.tools.xplain.HighLevelXplain: int nextFreeVarId(boolean)>(1);

        r0.<org.sat4j.tools.xplain.HighLevelXplain: int lastCreatedVar> = $i0;

        $i1 = r0.<org.sat4j.tools.xplain.HighLevelXplain: int lastCreatedVar>;

        return $i1;
    }

    protected void discardLastestVar()
    {
        org.sat4j.tools.xplain.HighLevelXplain r0;

        r0 := @this: org.sat4j.tools.xplain.HighLevelXplain;

        r0.<org.sat4j.tools.xplain.HighLevelXplain: boolean pooledVarId> = 1;

        return;
    }

    public org.sat4j.specs.IConstr addAtLeast(org.sat4j.specs.IVecInt, int) throws org.sat4j.specs.ContradictionException
    {
        java.lang.UnsupportedOperationException $r0;
        org.sat4j.specs.IVecInt r2;
        int i0;
        org.sat4j.tools.xplain.HighLevelXplain r1;

        r1 := @this: org.sat4j.tools.xplain.HighLevelXplain;

        r2 := @parameter0: org.sat4j.specs.IVecInt;

        i0 := @parameter1: int;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public org.sat4j.specs.IConstr addAtMost(org.sat4j.specs.IVecInt, int) throws org.sat4j.specs.ContradictionException
    {
        java.lang.UnsupportedOperationException $r0;
        org.sat4j.specs.IVecInt r2;
        int i0;
        org.sat4j.tools.xplain.HighLevelXplain r1;

        r1 := @this: org.sat4j.tools.xplain.HighLevelXplain;

        r2 := @parameter0: org.sat4j.specs.IVecInt;

        i0 := @parameter1: int;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    private org.sat4j.specs.IVecInt explanationKeys() throws org.sat4j.specs.TimeoutException
    {
        org.sat4j.specs.ISolver $r1, r9;
        org.sat4j.specs.IVecInt $r2, $r5, $r7;
        org.sat4j.tools.xplain.MinimizationStrategy $r4;
        java.lang.AssertionError $r8;
        org.sat4j.tools.SolverDecorator $r6;
        java.util.Map $r3;
        org.sat4j.tools.xplain.HighLevelXplain r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.sat4j.tools.xplain.HighLevelXplain;

        $z0 = <org.sat4j.tools.xplain.HighLevelXplain: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r7 = r0.<org.sat4j.tools.xplain.HighLevelXplain: org.sat4j.specs.IVecInt assump>;

        $z2 = virtualinvoke r0.<org.sat4j.tools.xplain.HighLevelXplain: boolean isSatisfiable(org.sat4j.specs.IVecInt)>($r7);

        if $z2 == 0 goto label1;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label1:
        $r1 = virtualinvoke r0.<org.sat4j.tools.xplain.HighLevelXplain: org.sat4j.specs.ISolver decorated()>();

        r9 = $r1;

        $z1 = $r1 instanceof org.sat4j.tools.SolverDecorator;

        if $z1 == 0 goto label2;

        $r6 = (org.sat4j.tools.SolverDecorator) $r1;

        r9 = virtualinvoke $r6.<org.sat4j.tools.SolverDecorator: org.sat4j.specs.ISolver decorated()>();

     label2:
        $r4 = r0.<org.sat4j.tools.xplain.HighLevelXplain: org.sat4j.tools.xplain.MinimizationStrategy xplainStrategy>;

        $r3 = r0.<org.sat4j.tools.xplain.HighLevelXplain: java.util.Map constrs>;

        $r2 = r0.<org.sat4j.tools.xplain.HighLevelXplain: org.sat4j.specs.IVecInt assump>;

        $r5 = interfaceinvoke $r4.<org.sat4j.tools.xplain.MinimizationStrategy: org.sat4j.specs.IVecInt explain(org.sat4j.specs.ISolver,java.util.Map,org.sat4j.specs.IVecInt)>(r9, $r3, $r2);

        return $r5;
    }

    public int[] minimalExplanation() throws org.sat4j.specs.TimeoutException
    {
        java.util.Iterator $r3;
        java.util.Collection $r1;
        java.lang.Integer $r5;
        int[] r2;
        int $i0, $i1, $i2, i3;
        java.lang.Object $r4;
        org.sat4j.tools.xplain.HighLevelXplain r0;
        boolean $z0;

        r0 := @this: org.sat4j.tools.xplain.HighLevelXplain;

        $r1 = virtualinvoke r0.<org.sat4j.tools.xplain.HighLevelXplain: java.util.Collection explain()>();

        $i0 = interfaceinvoke $r1.<java.util.Collection: int size()>();

        r2 = newarray (int)[$i0];

        i3 = 0;

        $r3 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.lang.Integer) $r4;

        $i1 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        $i2 = i3;

        i3 = i3 + 1;

        r2[$i2] = $i1;

        goto label1;

     label2:
        staticinvoke <java.util.Arrays: void sort(int[])>(r2);

        return r2;
    }

    public java.util.Collection explain() throws org.sat4j.specs.TimeoutException
    {
        org.sat4j.specs.IteratorInt $r3;
        org.sat4j.specs.IVecInt $r1;
        java.lang.Integer $r5;
        java.util.HashSet $r2;
        java.util.Map $r4;
        int $i0, $i1;
        java.lang.Object $r6;
        org.sat4j.tools.xplain.HighLevelXplain r0;
        boolean $z0;

        r0 := @this: org.sat4j.tools.xplain.HighLevelXplain;

        $r1 = specialinvoke r0.<org.sat4j.tools.xplain.HighLevelXplain: org.sat4j.specs.IVecInt explanationKeys()>();

        $r2 = new java.util.HashSet;

        $i0 = interfaceinvoke $r1.<org.sat4j.specs.IVecInt: int size()>();

        specialinvoke $r2.<java.util.HashSet: void <init>(int)>($i0);

        $r3 = interfaceinvoke $r1.<org.sat4j.specs.IVecInt: org.sat4j.specs.IteratorInt iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<org.sat4j.specs.IteratorInt: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = r0.<org.sat4j.tools.xplain.HighLevelXplain: java.util.Map constrs>;

        $i1 = interfaceinvoke $r3.<org.sat4j.specs.IteratorInt: int next()>();

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r6 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        interfaceinvoke $r2.<java.util.Collection: boolean add(java.lang.Object)>($r6);

        goto label1;

     label2:
        return $r2;
    }

    public void cancelExplanation()
    {
        org.sat4j.tools.xplain.MinimizationStrategy $r1;
        org.sat4j.tools.xplain.HighLevelXplain r0;

        r0 := @this: org.sat4j.tools.xplain.HighLevelXplain;

        $r1 = r0.<org.sat4j.tools.xplain.HighLevelXplain: org.sat4j.tools.xplain.MinimizationStrategy xplainStrategy>;

        interfaceinvoke $r1.<org.sat4j.tools.xplain.MinimizationStrategy: void cancelExplanationComputation()>();

        return;
    }

    public int[] findModel() throws org.sat4j.specs.TimeoutException
    {
        java.util.Iterator $r5;
        org.sat4j.specs.IVecInt $r1;
        java.util.Set $r4;
        java.lang.Integer r8;
        int[] $r6;
        java.util.Map $r3;
        int $i0, $i1;
        org.sat4j.core.VecInt $r2;
        java.lang.Object $r7;
        org.sat4j.tools.xplain.HighLevelXplain r0;
        boolean $z0;

        r0 := @this: org.sat4j.tools.xplain.HighLevelXplain;

        $r1 = <org.sat4j.core.VecInt: org.sat4j.specs.IVecInt EMPTY>;

        r0.<org.sat4j.tools.xplain.HighLevelXplain: org.sat4j.specs.IVecInt assump> = $r1;

        $r2 = new org.sat4j.core.VecInt;

        specialinvoke $r2.<org.sat4j.core.VecInt: void <init>()>();

        $r3 = r0.<org.sat4j.tools.xplain.HighLevelXplain: java.util.Map constrs>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set keySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.lang.Integer) $r7;

        $i0 = virtualinvoke r8.<java.lang.Integer: int intValue()>();

        $i1 = neg $i0;

        interfaceinvoke $r2.<org.sat4j.specs.IVecInt: org.sat4j.specs.IVecInt push(int)>($i1);

        goto label1;

     label2:
        $r6 = specialinvoke r0.<org.sat4j.tools.SolverDecorator: int[] findModel(org.sat4j.specs.IVecInt)>($r2);

        return $r6;
    }

    public int[] findModel(org.sat4j.specs.IVecInt) throws org.sat4j.specs.TimeoutException
    {
        java.util.Iterator $r5;
        org.sat4j.specs.IVecInt r1;
        java.util.Set $r4;
        java.lang.Integer r8;
        int[] $r6;
        java.util.Map $r3;
        int $i0, $i1;
        org.sat4j.core.VecInt $r2;
        java.lang.Object $r7;
        org.sat4j.tools.xplain.HighLevelXplain r0;
        boolean $z0;

        r0 := @this: org.sat4j.tools.xplain.HighLevelXplain;

        r1 := @parameter0: org.sat4j.specs.IVecInt;

        r0.<org.sat4j.tools.xplain.HighLevelXplain: org.sat4j.specs.IVecInt assump> = r1;

        $r2 = new org.sat4j.core.VecInt;

        specialinvoke $r2.<org.sat4j.core.VecInt: void <init>()>();

        interfaceinvoke r1.<org.sat4j.specs.IVecInt: void copyTo(org.sat4j.specs.IVecInt)>($r2);

        $r3 = r0.<org.sat4j.tools.xplain.HighLevelXplain: java.util.Map constrs>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set keySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.lang.Integer) $r7;

        $i0 = virtualinvoke r8.<java.lang.Integer: int intValue()>();

        $i1 = neg $i0;

        interfaceinvoke $r2.<org.sat4j.specs.IVecInt: org.sat4j.specs.IVecInt push(int)>($i1);

        goto label1;

     label2:
        $r6 = specialinvoke r0.<org.sat4j.tools.SolverDecorator: int[] findModel(org.sat4j.specs.IVecInt)>($r2);

        return $r6;
    }

    public boolean isSatisfiable() throws org.sat4j.specs.TimeoutException
    {
        java.util.Iterator $r5;
        org.sat4j.specs.IVecInt $r1;
        java.util.Set $r4;
        java.lang.Integer r7;
        java.util.Map $r3;
        int $i0, $i1;
        org.sat4j.core.VecInt $r2;
        java.lang.Object $r6;
        org.sat4j.tools.xplain.HighLevelXplain r0;
        boolean $z0, $z1;

        r0 := @this: org.sat4j.tools.xplain.HighLevelXplain;

        $r1 = <org.sat4j.core.VecInt: org.sat4j.specs.IVecInt EMPTY>;

        r0.<org.sat4j.tools.xplain.HighLevelXplain: org.sat4j.specs.IVecInt assump> = $r1;

        $r2 = new org.sat4j.core.VecInt;

        specialinvoke $r2.<org.sat4j.core.VecInt: void <init>()>();

        $r3 = r0.<org.sat4j.tools.xplain.HighLevelXplain: java.util.Map constrs>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set keySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.lang.Integer) $r6;

        $i0 = virtualinvoke r7.<java.lang.Integer: int intValue()>();

        $i1 = neg $i0;

        interfaceinvoke $r2.<org.sat4j.specs.IVecInt: org.sat4j.specs.IVecInt push(int)>($i1);

        goto label1;

     label2:
        $z1 = specialinvoke r0.<org.sat4j.tools.SolverDecorator: boolean isSatisfiable(org.sat4j.specs.IVecInt)>($r2);

        return $z1;
    }

    public boolean isSatisfiable(boolean) throws org.sat4j.specs.TimeoutException
    {
        java.util.Iterator $r5;
        org.sat4j.specs.IVecInt $r1;
        java.util.Set $r4;
        java.lang.Integer r7;
        java.util.Map $r3;
        int $i0, $i1;
        org.sat4j.core.VecInt $r2;
        java.lang.Object $r6;
        org.sat4j.tools.xplain.HighLevelXplain r0;
        boolean $z0, z1, $z2;

        r0 := @this: org.sat4j.tools.xplain.HighLevelXplain;

        z1 := @parameter0: boolean;

        $r1 = <org.sat4j.core.VecInt: org.sat4j.specs.IVecInt EMPTY>;

        r0.<org.sat4j.tools.xplain.HighLevelXplain: org.sat4j.specs.IVecInt assump> = $r1;

        $r2 = new org.sat4j.core.VecInt;

        specialinvoke $r2.<org.sat4j.core.VecInt: void <init>()>();

        $r3 = r0.<org.sat4j.tools.xplain.HighLevelXplain: java.util.Map constrs>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set keySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.lang.Integer) $r6;

        $i0 = virtualinvoke r7.<java.lang.Integer: int intValue()>();

        $i1 = neg $i0;

        interfaceinvoke $r2.<org.sat4j.specs.IVecInt: org.sat4j.specs.IVecInt push(int)>($i1);

        goto label1;

     label2:
        $z2 = specialinvoke r0.<org.sat4j.tools.SolverDecorator: boolean isSatisfiable(org.sat4j.specs.IVecInt,boolean)>($r2, z1);

        return $z2;
    }

    public boolean isSatisfiable(org.sat4j.specs.IVecInt) throws org.sat4j.specs.TimeoutException
    {
        java.util.Iterator $r5;
        org.sat4j.specs.IVecInt r1;
        java.util.Set $r4;
        java.lang.Integer r7;
        java.util.Map $r3;
        int $i0, $i1;
        org.sat4j.core.VecInt $r2;
        java.lang.Object $r6;
        org.sat4j.tools.xplain.HighLevelXplain r0;
        boolean $z0, $z1;

        r0 := @this: org.sat4j.tools.xplain.HighLevelXplain;

        r1 := @parameter0: org.sat4j.specs.IVecInt;

        r0.<org.sat4j.tools.xplain.HighLevelXplain: org.sat4j.specs.IVecInt assump> = r1;

        $r2 = new org.sat4j.core.VecInt;

        specialinvoke $r2.<org.sat4j.core.VecInt: void <init>()>();

        interfaceinvoke r1.<org.sat4j.specs.IVecInt: void copyTo(org.sat4j.specs.IVecInt)>($r2);

        $r3 = r0.<org.sat4j.tools.xplain.HighLevelXplain: java.util.Map constrs>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set keySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.lang.Integer) $r6;

        $i0 = virtualinvoke r7.<java.lang.Integer: int intValue()>();

        $i1 = neg $i0;

        interfaceinvoke $r2.<org.sat4j.specs.IVecInt: org.sat4j.specs.IVecInt push(int)>($i1);

        goto label1;

     label2:
        $z1 = specialinvoke r0.<org.sat4j.tools.SolverDecorator: boolean isSatisfiable(org.sat4j.specs.IVecInt)>($r2);

        return $z1;
    }

    public boolean isSatisfiable(org.sat4j.specs.IVecInt, boolean) throws org.sat4j.specs.TimeoutException
    {
        java.util.Iterator $r5;
        org.sat4j.specs.IVecInt r1;
        java.util.Set $r4;
        java.lang.Integer r7;
        java.util.Map $r3;
        int $i0, $i1;
        org.sat4j.core.VecInt $r2;
        java.lang.Object $r6;
        org.sat4j.tools.xplain.HighLevelXplain r0;
        boolean $z0, z1, $z2;

        r0 := @this: org.sat4j.tools.xplain.HighLevelXplain;

        r1 := @parameter0: org.sat4j.specs.IVecInt;

        z1 := @parameter1: boolean;

        r0.<org.sat4j.tools.xplain.HighLevelXplain: org.sat4j.specs.IVecInt assump> = r1;

        $r2 = new org.sat4j.core.VecInt;

        specialinvoke $r2.<org.sat4j.core.VecInt: void <init>()>();

        interfaceinvoke r1.<org.sat4j.specs.IVecInt: void copyTo(org.sat4j.specs.IVecInt)>($r2);

        $r3 = r0.<org.sat4j.tools.xplain.HighLevelXplain: java.util.Map constrs>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set keySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.lang.Integer) $r6;

        $i0 = virtualinvoke r7.<java.lang.Integer: int intValue()>();

        $i1 = neg $i0;

        interfaceinvoke $r2.<org.sat4j.specs.IVecInt: org.sat4j.specs.IVecInt push(int)>($i1);

        goto label1;

     label2:
        $z2 = specialinvoke r0.<org.sat4j.tools.SolverDecorator: boolean isSatisfiable(org.sat4j.specs.IVecInt,boolean)>($r2, z1);

        return $z2;
    }

    public int[] model()
    {
        java.lang.Integer $r5;
        int[] $r1, r3;
        java.util.Map $r2, $r4;
        int $i0, $i1, $i2, i3, i4, $i5, $i6, i7, i8;
        java.lang.Object $r6;
        org.sat4j.tools.xplain.HighLevelXplain r0;

        r0 := @this: org.sat4j.tools.xplain.HighLevelXplain;

        $r1 = specialinvoke r0.<org.sat4j.tools.SolverDecorator: int[] model()>();

        if $r1 != null goto label1;

        return null;

     label1:
        $i0 = lengthof $r1;

        $r2 = r0.<org.sat4j.tools.xplain.HighLevelXplain: java.util.Map constrs>;

        $i1 = interfaceinvoke $r2.<java.util.Map: int size()>();

        $i2 = $i0 - $i1;

        r3 = newarray (int)[$i2];

        i7 = 0;

        i3 = lengthof $r1;

        i8 = 0;

     label2:
        if i8 >= i3 goto label4;

        i4 = $r1[i8];

        $r4 = r0.<org.sat4j.tools.xplain.HighLevelXplain: java.util.Map constrs>;

        $i5 = staticinvoke <java.lang.Math: int abs(int)>(i4);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r6 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        if $r6 != null goto label3;

        $i6 = i7;

        i7 = i7 + 1;

        r3[$i6] = i4;

     label3:
        i8 = i8 + 1;

        goto label2;

     label4:
        return r3;
    }

    public java.lang.String toString(java.lang.String)
    {
        java.io.PrintStream $r1, $r7;
        org.sat4j.tools.xplain.MinimizationStrategy $r10;
        java.lang.StringBuilder $r0, $r3, $r4, $r6, $r8, $r11;
        java.lang.String r2, $r5, $r12, $r13;
        org.sat4j.tools.xplain.HighLevelXplain r9;

        r9 := @this: org.sat4j.tools.xplain.HighLevelXplain;

        r2 := @parameter0: java.lang.String;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("High Level Explanation (MUS) enabled solver");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r5);

        $r7 = <java.lang.System: java.io.PrintStream out>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r10 = r9.<org.sat4j.tools.xplain.HighLevelXplain: org.sat4j.tools.xplain.MinimizationStrategy xplainStrategy>;

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>($r12);

        $r13 = specialinvoke r9.<org.sat4j.tools.SolverDecorator: java.lang.String toString(java.lang.String)>(r2);

        return $r13;
    }

    public void setMinimizationStrategy(org.sat4j.tools.xplain.MinimizationStrategy)
    {
        org.sat4j.tools.xplain.MinimizationStrategy r1;
        org.sat4j.tools.xplain.HighLevelXplain r0;

        r0 := @this: org.sat4j.tools.xplain.HighLevelXplain;

        r1 := @parameter0: org.sat4j.tools.xplain.MinimizationStrategy;

        r0.<org.sat4j.tools.xplain.HighLevelXplain: org.sat4j.tools.xplain.MinimizationStrategy xplainStrategy> = r1;

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        <org.sat4j.tools.xplain.HighLevelXplain: long serialVersionUID> = 1L;

        $r0 = class "Lorg/sat4j/tools/xplain/HighLevelXplain;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.sat4j.tools.xplain.HighLevelXplain: boolean $assertionsDisabled> = $z1;

        return;
    }
}
