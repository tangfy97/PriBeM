class org.apache.cxf.jaxrs.provider.JSONUtils$JettisonMappedReaderFactory extends org.codehaus.jettison.AbstractXMLInputFactory
{
    private static final int INPUT_BUF_SIZE;
    private org.codehaus.jettison.mapped.MappedNamespaceConvention convention;
    private org.apache.cxf.staxutils.DocumentDepthProperties depthProps;

    public void <init>(java.util.Map, org.apache.cxf.staxutils.DocumentDepthProperties)
    {
        org.apache.cxf.staxutils.DocumentDepthProperties r4;
        org.apache.cxf.jaxrs.provider.JSONUtils$JettisonMappedReaderFactory r0;
        java.util.Map r3;
        org.codehaus.jettison.mapped.MappedNamespaceConvention $r1;
        org.codehaus.jettison.mapped.Configuration $r2;

        r0 := @this: org.apache.cxf.jaxrs.provider.JSONUtils$JettisonMappedReaderFactory;

        r3 := @parameter0: java.util.Map;

        r4 := @parameter1: org.apache.cxf.staxutils.DocumentDepthProperties;

        specialinvoke r0.<org.codehaus.jettison.AbstractXMLInputFactory: void <init>()>();

        $r1 = new org.codehaus.jettison.mapped.MappedNamespaceConvention;

        $r2 = new org.codehaus.jettison.mapped.Configuration;

        specialinvoke $r2.<org.codehaus.jettison.mapped.Configuration: void <init>(java.util.Map)>(r3);

        specialinvoke $r1.<org.codehaus.jettison.mapped.MappedNamespaceConvention: void <init>(org.codehaus.jettison.mapped.Configuration)>($r2);

        r0.<org.apache.cxf.jaxrs.provider.JSONUtils$JettisonMappedReaderFactory: org.codehaus.jettison.mapped.MappedNamespaceConvention convention> = $r1;

        r0.<org.apache.cxf.jaxrs.provider.JSONUtils$JettisonMappedReaderFactory: org.apache.cxf.staxutils.DocumentDepthProperties depthProps> = r4;

        return;
    }

    public javax.xml.stream.XMLStreamReader createXMLStreamReader(org.codehaus.jettison.json.JSONTokener) throws javax.xml.stream.XMLStreamException
    {
        org.apache.cxf.jaxrs.provider.JSONUtils$JettisonMappedReaderFactory r2;
        org.codehaus.jettison.mapped.MappedNamespaceConvention $r5;
        org.apache.cxf.jaxrs.provider.JSONUtils$JettisonJSONObject $r0;
        org.codehaus.jettison.mapped.MappedXMLStreamReader $r4;
        org.apache.cxf.staxutils.DocumentDepthProperties $r3;
        org.codehaus.jettison.json.JSONException $r6;
        javax.xml.stream.XMLStreamException $r7;
        org.codehaus.jettison.json.JSONTokener r1;

        r2 := @this: org.apache.cxf.jaxrs.provider.JSONUtils$JettisonMappedReaderFactory;

        r1 := @parameter0: org.codehaus.jettison.json.JSONTokener;

     label1:
        $r0 = new org.apache.cxf.jaxrs.provider.JSONUtils$JettisonJSONObject;

        $r3 = r2.<org.apache.cxf.jaxrs.provider.JSONUtils$JettisonMappedReaderFactory: org.apache.cxf.staxutils.DocumentDepthProperties depthProps>;

        specialinvoke $r0.<org.apache.cxf.jaxrs.provider.JSONUtils$JettisonJSONObject: void <init>(org.codehaus.jettison.json.JSONTokener,org.apache.cxf.staxutils.DocumentDepthProperties)>(r1, $r3);

        $r4 = new org.codehaus.jettison.mapped.MappedXMLStreamReader;

        $r5 = r2.<org.apache.cxf.jaxrs.provider.JSONUtils$JettisonMappedReaderFactory: org.codehaus.jettison.mapped.MappedNamespaceConvention convention>;

        specialinvoke $r4.<org.codehaus.jettison.mapped.MappedXMLStreamReader: void <init>(org.codehaus.jettison.json.JSONObject,org.codehaus.jettison.mapped.MappedNamespaceConvention)>($r0, $r5);

     label2:
        return $r4;

     label3:
        $r6 := @caughtexception;

        $r7 = new javax.xml.stream.XMLStreamException;

        specialinvoke $r7.<javax.xml.stream.XMLStreamException: void <init>(java.lang.Throwable)>($r6);

        throw $r7;

        catch org.codehaus.jettison.json.JSONException from label1 to label2 with label3;
    }

    private java.lang.String readAll(java.io.InputStream, java.lang.String) throws java.io.IOException
    {
        byte[] r0;
        org.apache.cxf.jaxrs.provider.JSONUtils$JettisonMappedReaderFactory r3;
        java.io.ByteArrayOutputStream r4, $r5;
        int $i0, i1;
        java.lang.String r2, $r6;
        java.io.InputStream r1;

        r3 := @this: org.apache.cxf.jaxrs.provider.JSONUtils$JettisonMappedReaderFactory;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.lang.String;

        r0 = newarray (byte)[4096];

        r4 = null;

     label1:
        $i0 = virtualinvoke r1.<java.io.InputStream: int read(byte[])>(r0);

        if $i0 >= 0 goto label2;

        goto label7;

     label2:
        if r4 != null goto label6;

        if $i0 >= 64 goto label3;

        i1 = 64;

        goto label5;

     label3:
        if $i0 != 4096 goto label4;

        i1 = 16384;

        goto label5;

     label4:
        i1 = $i0;

     label5:
        $r5 = new java.io.ByteArrayOutputStream;

        specialinvoke $r5.<java.io.ByteArrayOutputStream: void <init>(int)>(i1);

        r4 = $r5;

     label6:
        virtualinvoke r4.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>(r0, 0, $i0);

        goto label1;

     label7:
        if r4 != null goto label8;

        $r6 = "";

        goto label9;

     label8:
        $r6 = virtualinvoke r4.<java.io.ByteArrayOutputStream: java.lang.String toString(java.lang.String)>(r2);

     label9:
        return $r6;
    }

    public javax.xml.stream.XMLStreamReader createXMLStreamReader(java.io.InputStream, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        org.apache.cxf.jaxrs.provider.JSONUtils$JettisonMappedReaderFactory r0;
        java.io.IOException $r6;
        org.apache.cxf.staxutils.DocumentDepthProperties $r4;
        javax.xml.stream.XMLStreamReader $r5;
        org.apache.cxf.jaxrs.provider.JSONUtils$JettisonJSONTokener $r3;
        javax.xml.stream.XMLStreamException $r7;
        java.lang.String $r2, r8;
        java.io.InputStream r1;

        r0 := @this: org.apache.cxf.jaxrs.provider.JSONUtils$JettisonMappedReaderFactory;

        r1 := @parameter0: java.io.InputStream;

        r8 := @parameter1: java.lang.String;

        if r8 != null goto label1;

        r8 = "UTF-8";

     label1:
        $r2 = specialinvoke r0.<org.apache.cxf.jaxrs.provider.JSONUtils$JettisonMappedReaderFactory: java.lang.String readAll(java.io.InputStream,java.lang.String)>(r1, r8);

        $r3 = new org.apache.cxf.jaxrs.provider.JSONUtils$JettisonJSONTokener;

        $r4 = r0.<org.apache.cxf.jaxrs.provider.JSONUtils$JettisonMappedReaderFactory: org.apache.cxf.staxutils.DocumentDepthProperties depthProps>;

        specialinvoke $r3.<org.apache.cxf.jaxrs.provider.JSONUtils$JettisonJSONTokener: void <init>(java.lang.String,org.apache.cxf.staxutils.DocumentDepthProperties)>($r2, $r4);

        $r5 = virtualinvoke r0.<org.apache.cxf.jaxrs.provider.JSONUtils$JettisonMappedReaderFactory: javax.xml.stream.XMLStreamReader createXMLStreamReader(org.codehaus.jettison.json.JSONTokener)>($r3);

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        $r7 = new javax.xml.stream.XMLStreamException;

        specialinvoke $r7.<javax.xml.stream.XMLStreamException: void <init>(java.lang.Throwable)>($r6);

        throw $r7;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static void <clinit>()
    {
        <org.apache.cxf.jaxrs.provider.JSONUtils$JettisonMappedReaderFactory: int INPUT_BUF_SIZE> = 4096;

        return;
    }
}
