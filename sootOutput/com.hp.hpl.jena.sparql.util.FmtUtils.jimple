public class com.hp.hpl.jena.sparql.util.FmtUtils extends java.lang.Object
{
    static final java.lang.String indentPrefix;
    public static boolean multiLineExpr;
    public static boolean printOpName;
    static com.hp.hpl.jena.sparql.util.NodeToLabelMap bNodeMap;
    private static int relFlags;
    private static java.util.regex.Pattern schemePattern;
    static boolean applyUnicodeEscapes;

    public void <init>()
    {
        com.hp.hpl.jena.sparql.util.FmtUtils r0;

        r0 := @this: com.hp.hpl.jena.sparql.util.FmtUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.hp.hpl.jena.sparql.serializer.SerializationContext sCxt()
    {
        com.hp.hpl.jena.shared.PrefixMapping $r0;
        com.hp.hpl.jena.sparql.serializer.SerializationContext $r1;

        $r0 = staticinvoke <com.hp.hpl.jena.sparql.ARQConstants: com.hp.hpl.jena.shared.PrefixMapping getGlobalPrefixMap()>();

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: com.hp.hpl.jena.sparql.serializer.SerializationContext sCxt(com.hp.hpl.jena.shared.PrefixMapping)>($r0);

        return $r1;
    }

    public static com.hp.hpl.jena.sparql.serializer.SerializationContext sCxt(com.hp.hpl.jena.shared.PrefixMapping)
    {
        com.hp.hpl.jena.shared.PrefixMapping r1;
        com.hp.hpl.jena.sparql.serializer.SerializationContext $r0;

        r1 := @parameter0: com.hp.hpl.jena.shared.PrefixMapping;

        $r0 = new com.hp.hpl.jena.sparql.serializer.SerializationContext;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.serializer.SerializationContext: void <init>(com.hp.hpl.jena.shared.PrefixMapping)>(r1);

        return $r0;
    }

    public static java.lang.String stringForTriple(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.graph.Node $r2, $r6, $r10;
        com.hp.hpl.jena.graph.Triple r1;
        java.lang.StringBuilder $r0, $r4, $r5, $r8, $r9, $r12;
        java.lang.String $r3, $r7, $r11, $r13;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: java.lang.String stringForNode(com.hp.hpl.jena.graph.Node)>($r2);

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r6 = virtualinvoke r1.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r7 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: java.lang.String stringForNode(com.hp.hpl.jena.graph.Node)>($r6);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r10 = virtualinvoke r1.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        $r11 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: java.lang.String stringForNode(com.hp.hpl.jena.graph.Node)>($r10);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r13;
    }

    public static java.lang.String stringForTriple(com.hp.hpl.jena.graph.Triple, com.hp.hpl.jena.shared.PrefixMapping)
    {
        com.hp.hpl.jena.graph.Node $r2, $r7, $r11;
        com.hp.hpl.jena.graph.Triple r1;
        java.lang.StringBuilder $r0, $r5, $r6, $r9, $r10, $r13;
        java.lang.String $r4, $r8, $r12, $r14;
        com.hp.hpl.jena.shared.PrefixMapping r3;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        r3 := @parameter1: com.hp.hpl.jena.shared.PrefixMapping;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: java.lang.String stringForNode(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.shared.PrefixMapping)>($r2, r3);

        $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r7 = virtualinvoke r1.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r8 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: java.lang.String stringForNode(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.shared.PrefixMapping)>($r7, r3);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r11 = virtualinvoke r1.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        $r12 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: java.lang.String stringForNode(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.shared.PrefixMapping)>($r11, r3);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r14;
    }

    public static java.lang.String stringForQuad(com.hp.hpl.jena.sparql.core.Quad)
    {
        com.hp.hpl.jena.graph.Node $r2, $r3, $r5, $r7, $r10;
        com.hp.hpl.jena.sparql.core.Quad r1;
        java.lang.StringBuilder $r0;
        java.lang.String $r4, $r6, $r8, $r9, $r11;

        r1 := @parameter0: com.hp.hpl.jena.sparql.core.Quad;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getGraph()>();

        if $r2 == null goto label1;

        $r10 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getGraph()>();

        $r11 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: java.lang.String stringForNode(com.hp.hpl.jena.graph.Node)>($r10);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

     label1:
        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getSubject()>();

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: java.lang.String stringForNode(com.hp.hpl.jena.graph.Node)>($r3);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r5 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r6 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: java.lang.String stringForNode(com.hp.hpl.jena.graph.Node)>($r5);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r7 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getObject()>();

        $r8 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: java.lang.String stringForNode(com.hp.hpl.jena.graph.Node)>($r7);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r9 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    public static java.lang.String stringForQuad(com.hp.hpl.jena.sparql.core.Quad, com.hp.hpl.jena.shared.PrefixMapping)
    {
        com.hp.hpl.jena.graph.Node $r2, $r3, $r6, $r8, $r11;
        com.hp.hpl.jena.sparql.core.Quad r1;
        java.lang.StringBuilder $r0;
        java.lang.String $r5, $r7, $r9, $r10, $r12;
        com.hp.hpl.jena.shared.PrefixMapping r4;

        r1 := @parameter0: com.hp.hpl.jena.sparql.core.Quad;

        r4 := @parameter1: com.hp.hpl.jena.shared.PrefixMapping;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getGraph()>();

        if $r2 == null goto label1;

        $r11 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getGraph()>();

        $r12 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: java.lang.String stringForNode(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.shared.PrefixMapping)>($r11, r4);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

     label1:
        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getSubject()>();

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: java.lang.String stringForNode(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.shared.PrefixMapping)>($r3, r4);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r6 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r7 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: java.lang.String stringForNode(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.shared.PrefixMapping)>($r6, r4);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r8 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getObject()>();

        $r9 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: java.lang.String stringForNode(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.shared.PrefixMapping)>($r8, r4);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r10 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }

    private static void formatTriple(org.apache.jena.atlas.io.IndentedWriter, com.hp.hpl.jena.graph.Triple, com.hp.hpl.jena.sparql.serializer.SerializationContext)
    {
        com.hp.hpl.jena.sparql.serializer.SerializationContext r3;
        com.hp.hpl.jena.graph.Node $r2, $r5, $r7;
        org.apache.jena.atlas.io.IndentedWriter r0;
        com.hp.hpl.jena.graph.Triple r1;
        java.lang.String $r4, $r6, $r8;

        r0 := @parameter0: org.apache.jena.atlas.io.IndentedWriter;

        r1 := @parameter1: com.hp.hpl.jena.graph.Triple;

        r3 := @parameter2: com.hp.hpl.jena.sparql.serializer.SerializationContext;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: java.lang.String stringForNode(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.serializer.SerializationContext)>($r2, r3);

        virtualinvoke r0.<org.apache.jena.atlas.io.IndentedWriter: void print(java.lang.String)>($r4);

        virtualinvoke r0.<org.apache.jena.atlas.io.IndentedWriter: void print(java.lang.String)>(" ");

        $r5 = virtualinvoke r1.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r6 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: java.lang.String stringForNode(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.serializer.SerializationContext)>($r5, r3);

        virtualinvoke r0.<org.apache.jena.atlas.io.IndentedWriter: void print(java.lang.String)>($r6);

        virtualinvoke r0.<org.apache.jena.atlas.io.IndentedWriter: void print(java.lang.String)>(" ");

        $r7 = virtualinvoke r1.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        $r8 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: java.lang.String stringForNode(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.serializer.SerializationContext)>($r7, r3);

        virtualinvoke r0.<org.apache.jena.atlas.io.IndentedWriter: void print(java.lang.String)>($r8);

        virtualinvoke r0.<org.apache.jena.atlas.io.IndentedWriter: void print(java.lang.String)>(" .");

        return;
    }

    public static void formatPattern(org.apache.jena.atlas.io.IndentedWriter, com.hp.hpl.jena.sparql.core.BasicPattern, com.hp.hpl.jena.sparql.serializer.SerializationContext)
    {
        java.util.Iterator $r1;
        com.hp.hpl.jena.sparql.serializer.SerializationContext r5;
        com.hp.hpl.jena.sparql.core.BasicPattern r0;
        org.apache.jena.atlas.io.IndentedWriter r4;
        com.hp.hpl.jena.graph.Triple r3;
        java.lang.Object $r2;
        boolean $z0, z1;

        r4 := @parameter0: org.apache.jena.atlas.io.IndentedWriter;

        r0 := @parameter1: com.hp.hpl.jena.sparql.core.BasicPattern;

        r5 := @parameter2: com.hp.hpl.jena.sparql.serializer.SerializationContext;

        z1 = 1;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.BasicPattern: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.hp.hpl.jena.graph.Triple) $r2;

        if z1 != 0 goto label2;

        virtualinvoke r4.<org.apache.jena.atlas.io.IndentedWriter: void println()>();

     label2:
        staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: void formatTriple(org.apache.jena.atlas.io.IndentedWriter,com.hp.hpl.jena.graph.Triple,com.hp.hpl.jena.sparql.serializer.SerializationContext)>(r4, r3, r5);

        z1 = 0;

        goto label1;

     label3:
        return;
    }

    public static java.lang.String stringForObject(java.lang.Object)
    {
        com.hp.hpl.jena.rdf.model.RDFNode $r4;
        com.hp.hpl.jena.graph.Node $r2;
        java.lang.Object r0;
        java.lang.String $r1, $r3, $r5;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        return "<<null>>";

     label1:
        $z0 = r0 instanceof com.hp.hpl.jena.rdf.model.RDFNode;

        if $z0 == 0 goto label2;

        $r4 = (com.hp.hpl.jena.rdf.model.RDFNode) r0;

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: java.lang.String stringForRDFNode(com.hp.hpl.jena.rdf.model.RDFNode)>($r4);

        return $r5;

     label2:
        $z1 = r0 instanceof com.hp.hpl.jena.graph.Node;

        if $z1 == 0 goto label3;

        $r2 = (com.hp.hpl.jena.graph.Node) r0;

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: java.lang.String stringForNode(com.hp.hpl.jena.graph.Node)>($r2);

        return $r3;

     label3:
        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        return $r1;
    }

    public static java.lang.String stringForRDFNode(com.hp.hpl.jena.rdf.model.RDFNode)
    {
        com.hp.hpl.jena.rdf.model.RDFNode r0;
        com.hp.hpl.jena.sparql.serializer.SerializationContext $r1;
        com.hp.hpl.jena.rdf.model.Model r4;
        java.lang.String $r2;
        com.hp.hpl.jena.rdf.model.Resource $r3;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.RDFNode;

        r4 = null;

        $z0 = r0 instanceof com.hp.hpl.jena.rdf.model.Resource;

        if $z0 == 0 goto label1;

        $r3 = (com.hp.hpl.jena.rdf.model.Resource) r0;

        r4 = interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.Model getModel()>();

     label1:
        $r1 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: com.hp.hpl.jena.sparql.serializer.SerializationContext newSerializationContext(com.hp.hpl.jena.shared.PrefixMapping)>(r4);

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: java.lang.String stringForRDFNode(com.hp.hpl.jena.rdf.model.RDFNode,com.hp.hpl.jena.sparql.serializer.SerializationContext)>(r0, $r1);

        return $r2;
    }

    public static java.lang.String stringForRDFNode(com.hp.hpl.jena.rdf.model.RDFNode, com.hp.hpl.jena.sparql.serializer.SerializationContext)
    {
        com.hp.hpl.jena.rdf.model.RDFNode r0;
        com.hp.hpl.jena.sparql.serializer.SerializationContext r2;
        com.hp.hpl.jena.graph.Node $r1;
        java.lang.String $r3;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.RDFNode;

        r2 := @parameter1: com.hp.hpl.jena.sparql.serializer.SerializationContext;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.RDFNode: com.hp.hpl.jena.graph.Node asNode()>();

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: java.lang.String stringForNode(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.serializer.SerializationContext)>($r1, r2);

        return $r3;
    }

    public static java.lang.String stringForLiteral(com.hp.hpl.jena.graph.Node_Literal, com.hp.hpl.jena.sparql.serializer.SerializationContext)
    {
        java.math.BigDecimal $r11;
        java.math.BigInteger $r12;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        com.hp.hpl.jena.graph.Node_Literal r0;
        java.lang.StringBuilder $r21;
        com.hp.hpl.jena.sparql.serializer.SerializationContext r5;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r1, $r2, $r3, $r4, $r6, $r8, $r10, r16, $r18, $r20;
        java.lang.NumberFormatException $r13, $r14, $r15;
        com.hp.hpl.jena.rdf.model.Resource $r7, $r9, $r17, $r19;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node_Literal;

        r5 := @parameter1: com.hp.hpl.jena.sparql.serializer.SerializationContext;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node_Literal: java.lang.String getLiteralDatatypeURI()>();

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node_Literal: java.lang.String getLiteralLanguage()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node_Literal: java.lang.String getLiteralLexicalForm()>();

        if $r1 == null goto label16;

        if r5 == null goto label01;

        $z5 = virtualinvoke r5.<com.hp.hpl.jena.sparql.serializer.SerializationContext: boolean getUsePlainLiterals()>();

        if $z5 == 0 goto label16;

     label01:
        $r7 = <com.hp.hpl.jena.vocabulary.XSD: com.hp.hpl.jena.rdf.model.Resource integer>;

        $r8 = interfaceinvoke $r7.<com.hp.hpl.jena.rdf.model.Resource: java.lang.String getURI()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z0 == 0 goto label06;

     label02:
        r16 = $r3;

        $z4 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>("+");

        if $z4 == 0 goto label03;

        r16 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int)>(1);

     label03:
        $r12 = new java.math.BigInteger;

        specialinvoke $r12.<java.math.BigInteger: void <init>(java.lang.String)>(r16);

     label04:
        return $r3;

     label05:
        $r15 := @caughtexception;

     label06:
        $r9 = <com.hp.hpl.jena.vocabulary.XSD: com.hp.hpl.jena.rdf.model.Resource decimal>;

        $r10 = interfaceinvoke $r9.<com.hp.hpl.jena.rdf.model.Resource: java.lang.String getURI()>();

        $z1 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z1 == 0 goto label10;

        $i3 = virtualinvoke $r3.<java.lang.String: int indexOf(int)>(46);

        if $i3 <= 0 goto label10;

     label07:
        $r11 = new java.math.BigDecimal;

        specialinvoke $r11.<java.math.BigDecimal: void <init>(java.lang.String)>($r3);

     label08:
        return $r3;

     label09:
        $r14 := @caughtexception;

     label10:
        $r17 = <com.hp.hpl.jena.vocabulary.XSD: com.hp.hpl.jena.rdf.model.Resource xdouble>;

        $r18 = interfaceinvoke $r17.<com.hp.hpl.jena.rdf.model.Resource: java.lang.String getURI()>();

        $z6 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r18);

        if $z6 == 0 goto label14;

        $i1 = virtualinvoke $r3.<java.lang.String: int indexOf(int)>(101);

        if $i1 >= 0 goto label11;

        $i2 = virtualinvoke $r3.<java.lang.String: int indexOf(int)>(69);

        if $i2 < 0 goto label14;

     label11:
        staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r3);

     label12:
        return $r3;

     label13:
        $r13 := @caughtexception;

     label14:
        $r19 = <com.hp.hpl.jena.vocabulary.XSD: com.hp.hpl.jena.rdf.model.Resource xboolean>;

        $r20 = interfaceinvoke $r19.<com.hp.hpl.jena.rdf.model.Resource: java.lang.String getURI()>();

        $z7 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r20);

        if $z7 == 0 goto label16;

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("true");

        if $z2 == 0 goto label15;

        return $r3;

     label15:
        $z3 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("false");

        if $z3 == 0 goto label16;

        return $r3;

     label16:
        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: void stringEsc(java.lang.StringBuilder,java.lang.String,boolean)>($r21, $r3, 1);

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        if $r2 == null goto label17;

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 <= 0 goto label17;

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("@");

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

     label17:
        if $r1 == null goto label18;

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("^^");

        $r6 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: java.lang.String stringForURI(java.lang.String,com.hp.hpl.jena.sparql.serializer.SerializationContext)>($r1, r5);

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

     label18:
        $r4 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;

        catch java.lang.NumberFormatException from label02 to label04 with label05;
        catch java.lang.NumberFormatException from label07 to label08 with label09;
        catch java.lang.NumberFormatException from label11 to label12 with label13;
    }

    public static java.lang.String stringForString(java.lang.String)
    {
        java.lang.StringBuilder $r0;
        java.lang.String r1, $r2;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: void stringEsc(java.lang.StringBuilder,java.lang.String,boolean)>($r0, r1, 1);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public static java.lang.String stringForResource(com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.sparql.serializer.SerializationContext $r2;
        com.hp.hpl.jena.rdf.model.Model $r1;
        java.lang.String $r3;
        com.hp.hpl.jena.rdf.model.Resource r0;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.Model getModel()>();

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: com.hp.hpl.jena.sparql.serializer.SerializationContext newSerializationContext(com.hp.hpl.jena.shared.PrefixMapping)>($r1);

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: java.lang.String stringForResource(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.sparql.serializer.SerializationContext)>(r0, $r2);

        return $r3;
    }

    public static java.lang.String stringForResource(com.hp.hpl.jena.rdf.model.Resource, com.hp.hpl.jena.sparql.serializer.SerializationContext)
    {
        com.hp.hpl.jena.sparql.serializer.SerializationContext r2;
        com.hp.hpl.jena.graph.Node $r1;
        java.lang.String $r3;
        com.hp.hpl.jena.rdf.model.Resource r0;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        r2 := @parameter1: com.hp.hpl.jena.sparql.serializer.SerializationContext;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.graph.Node asNode()>();

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: java.lang.String stringForNode(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.serializer.SerializationContext)>($r1, r2);

        return $r3;
    }

    public static java.lang.String stringForNode(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0;
        java.lang.String $r2;
        com.hp.hpl.jena.shared.PrefixMapping $r1;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.ARQConstants: com.hp.hpl.jena.shared.PrefixMapping getGlobalPrefixMap()>();

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: java.lang.String stringForNode(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.shared.PrefixMapping)>(r0, $r1);

        return $r2;
    }

    public static java.lang.String stringForNode(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.shared.PrefixMapping)
    {
        com.hp.hpl.jena.sparql.serializer.SerializationContext $r2;
        com.hp.hpl.jena.graph.Node r0;
        java.lang.String $r3;
        com.hp.hpl.jena.shared.PrefixMapping r1;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        r1 := @parameter1: com.hp.hpl.jena.shared.PrefixMapping;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: com.hp.hpl.jena.sparql.serializer.SerializationContext newSerializationContext(com.hp.hpl.jena.shared.PrefixMapping)>(r1);

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: java.lang.String stringForNode(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.serializer.SerializationContext)>(r0, $r2);

        return $r3;
    }

    public static java.lang.String stringForNode(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.sparql.core.Prologue)
    {
        com.hp.hpl.jena.sparql.core.Prologue r1;
        com.hp.hpl.jena.sparql.serializer.SerializationContext $r2;
        com.hp.hpl.jena.graph.Node r0;
        java.lang.String $r3;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        r1 := @parameter1: com.hp.hpl.jena.sparql.core.Prologue;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: com.hp.hpl.jena.sparql.serializer.SerializationContext newSerializationContext(com.hp.hpl.jena.sparql.core.Prologue)>(r1);

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: java.lang.String stringForNode(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.serializer.SerializationContext)>(r0, $r2);

        return $r3;
    }

    public static java.lang.String stringForNode(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.sparql.serializer.SerializationContext)
    {
        com.hp.hpl.jena.sparql.serializer.SerializationContext r1;
        com.hp.hpl.jena.sparql.util.NodeToLabelMap $r22, $r23;
        com.hp.hpl.jena.graph.Node r0, $r2;
        java.lang.String $r6, $r7, $r10, $r12, $r13, $r14, $r16, $r19, $r21, $r24;
        boolean $z0, $z1, $z2, $z3, $z4;
        com.hp.hpl.jena.graph.Node_Literal $r15;
        java.lang.StringBuilder $r3, $r4, $r5, $r8, $r9, $r11, $r17, $r18, $r20;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        r1 := @parameter1: com.hp.hpl.jena.sparql.serializer.SerializationContext;

        if r0 != null goto label1;

        return "<<null>>";

     label1:
        if r1 == null goto label2;

        $r22 = virtualinvoke r1.<com.hp.hpl.jena.sparql.serializer.SerializationContext: com.hp.hpl.jena.sparql.util.NodeToLabelMap getBNodeMap()>();

        if $r22 == null goto label2;

        $r23 = virtualinvoke r1.<com.hp.hpl.jena.sparql.serializer.SerializationContext: com.hp.hpl.jena.sparql.util.NodeToLabelMap getBNodeMap()>();

        $r24 = virtualinvoke $r23.<com.hp.hpl.jena.sparql.util.NodeToLabelMap: java.lang.String asString(com.hp.hpl.jena.graph.Node)>(r0);

        if $r24 == null goto label2;

        return $r24;

     label2:
        $z4 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isBlank()>();

        if $z4 == 0 goto label3;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_:");

        $r19 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getBlankNodeLabel()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r21;

     label3:
        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z0 == 0 goto label4;

        $r15 = (com.hp.hpl.jena.graph.Node_Literal) r0;

        $r16 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: java.lang.String stringForLiteral(com.hp.hpl.jena.graph.Node_Literal,com.hp.hpl.jena.sparql.serializer.SerializationContext)>($r15, r1);

        return $r16;

     label4:
        $z1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isURI()>();

        if $z1 == 0 goto label5;

        $r13 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getURI()>();

        $r14 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: java.lang.String stringForURI(java.lang.String,com.hp.hpl.jena.sparql.serializer.SerializationContext)>($r13, r1);

        return $r14;

     label5:
        $z2 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z2 == 0 goto label6;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?");

        $r10 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getName()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r12;

     label6:
        $r2 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $z3 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>($r2);

        if $z3 == 0 goto label7;

        return "ANY";

     label7:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to turn a node into a string: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.jena.atlas.logging.Log: void warn(java.lang.Class,java.lang.String)>(class "Lcom/hp/hpl/jena/sparql/util/FmtUtils;", $r6);

        $r7 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String toString()>();

        return $r7;
    }

    public static java.lang.String stringForURI(java.lang.String)
    {
        java.lang.StringBuilder $r0, $r1, $r4, $r5;
        java.lang.String r2, $r3, $r6;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<");

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: java.lang.String stringEsc(java.lang.String)>(r2);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public static java.lang.String stringForURI(java.lang.String, com.hp.hpl.jena.sparql.core.Prologue)
    {
        com.hp.hpl.jena.sparql.core.Prologue r1;
        java.lang.String r0, $r2, $r4;
        com.hp.hpl.jena.shared.PrefixMapping $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: com.hp.hpl.jena.sparql.core.Prologue;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.Prologue: java.lang.String getBaseURI()>();

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.Prologue: com.hp.hpl.jena.shared.PrefixMapping getPrefixMapping()>();

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: java.lang.String stringForURI(java.lang.String,java.lang.String,com.hp.hpl.jena.shared.PrefixMapping)>(r0, $r2, $r3);

        return $r4;
    }

    public static java.lang.String stringForURI(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: java.lang.String stringForURI(java.lang.String,java.lang.String,com.hp.hpl.jena.shared.PrefixMapping)>(r0, r1, null);

        return $r2;
    }

    public static java.lang.String stringForURI(java.lang.String, com.hp.hpl.jena.sparql.serializer.SerializationContext)
    {
        com.hp.hpl.jena.sparql.serializer.SerializationContext r0;
        java.lang.String r1, $r2, $r4, $r5;
        com.hp.hpl.jena.shared.PrefixMapping $r3;

        r1 := @parameter0: java.lang.String;

        r0 := @parameter1: com.hp.hpl.jena.sparql.serializer.SerializationContext;

        if r0 != null goto label1;

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: java.lang.String stringForURI(java.lang.String,java.lang.String,com.hp.hpl.jena.shared.PrefixMapping)>(r1, null, null);

        return $r5;

     label1:
        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.serializer.SerializationContext: java.lang.String getBaseIRI()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.serializer.SerializationContext: com.hp.hpl.jena.shared.PrefixMapping getPrefixMapping()>();

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: java.lang.String stringForURI(java.lang.String,java.lang.String,com.hp.hpl.jena.shared.PrefixMapping)>(r1, $r2, $r3);

        return $r4;
    }

    public static java.lang.String stringForURI(java.lang.String, com.hp.hpl.jena.shared.PrefixMapping)
    {
        java.lang.String r0, $r2;
        com.hp.hpl.jena.shared.PrefixMapping r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: com.hp.hpl.jena.shared.PrefixMapping;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: java.lang.String stringForURI(java.lang.String,java.lang.String,com.hp.hpl.jena.shared.PrefixMapping)>(r0, null, r1);

        return $r2;
    }

    public static java.lang.String stringForURI(java.lang.String, java.lang.String, com.hp.hpl.jena.shared.PrefixMapping)
    {
        java.lang.StringBuilder $r5, $r6, $r7, $r8;
        java.lang.String r1, r2, $r3, $r4, $r9, $r10;
        com.hp.hpl.jena.shared.PrefixMapping r0;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r0 := @parameter2: com.hp.hpl.jena.shared.PrefixMapping;

        if r0 == null goto label1;

        $r10 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: java.lang.String prefixFor(java.lang.String,com.hp.hpl.jena.shared.PrefixMapping)>(r2, r0);

        if $r10 == null goto label1;

        return $r10;

     label1:
        if r1 == null goto label2;

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: java.lang.String abbrevByBase(java.lang.String,java.lang.String)>(r2, r1);

        if $r4 == null goto label2;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;

     label2:
        $r3 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: java.lang.String stringForURI(java.lang.String)>(r2);

        return $r3;
    }

    public static java.lang.String abbrevByBase(java.lang.String, java.lang.String)
    {
        org.apache.jena.iri.IRIFactory $r1;
        int $i0;
        java.lang.String r0, r2, $r5;
        org.apache.jena.iri.IRI $r3, $r4;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: boolean hasScheme(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        return r0;

     label1:
        $r1 = staticinvoke <org.apache.jena.iri.IRIFactory: org.apache.jena.iri.IRIFactory jenaImplementation()>();

        $r3 = virtualinvoke $r1.<org.apache.jena.iri.IRIFactory: org.apache.jena.iri.IRI construct(java.lang.String)>(r2);

        $i0 = <com.hp.hpl.jena.sparql.util.FmtUtils: int relFlags>;

        $r4 = virtualinvoke $r3.<org.apache.jena.iri.IRI: org.apache.jena.iri.IRI relativize(java.lang.String,int)>(r0, $i0);

        $r5 = virtualinvoke $r4.<org.apache.jena.iri.IRI: java.lang.String toString()>();

        return $r5;
    }

    private static boolean hasScheme(java.lang.String)
    {
        java.util.regex.Matcher $r2;
        java.lang.String r0;
        java.util.regex.Pattern $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $r1 = <com.hp.hpl.jena.sparql.util.FmtUtils: java.util.regex.Pattern schemePattern>;

        $r2 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0);

        $z0 = virtualinvoke $r2.<java.util.regex.Matcher: boolean matches()>();

        return $z0;
    }

    private static java.lang.String prefixFor(java.lang.String, com.hp.hpl.jena.shared.PrefixMapping)
    {
        java.lang.String r1, $r2, $r3;
        com.hp.hpl.jena.shared.PrefixMapping r0;
        boolean $z0, $z1;

        r1 := @parameter0: java.lang.String;

        r0 := @parameter1: com.hp.hpl.jena.shared.PrefixMapping;

        if r0 != null goto label1;

        return null;

     label1:
        $r2 = interfaceinvoke r0.<com.hp.hpl.jena.shared.PrefixMapping: java.lang.String shortForm(java.lang.String)>(r1);

        if $r2 == r1 goto label2;

        $z1 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: boolean checkValidPrefixName(java.lang.String)>($r2);

        if $z1 == 0 goto label2;

        return $r2;

     label2:
        $r3 = interfaceinvoke r0.<com.hp.hpl.jena.shared.PrefixMapping: java.lang.String qnameFor(java.lang.String)>(r1);

        if $r3 == null goto label3;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: boolean checkValidPrefixName(java.lang.String)>($r3);

        if $z0 == 0 goto label3;

        return $r3;

     label3:
        return null;
    }

    private static boolean checkValidPrefixName(java.lang.String)
    {
        com.hp.hpl.jena.sparql.ARQInternalErrorException $r3;
        int $i0, $i1;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String r0, $r1, $r2, $r7;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(58);

        if $i0 >= 0 goto label1;

        $r3 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Broken short form -- ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label1:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $i1 = $i0 + 1;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i1);

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: boolean checkValidPrefix(java.lang.String)>($r1);

        if $z0 == 0 goto label2;

        $z1 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: boolean checkValidLocalname(java.lang.String)>($r2);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    private static boolean checkValidPrefix(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("_");

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $z1 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: boolean checkValidLocalname(java.lang.String)>(r0);

        return $z1;
    }

    private static boolean checkValidLocalname(java.lang.String)
    {
        char $c2;
        int $i0, $i1, i3;
        java.lang.String r0;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        return 1;

     label1:
        i3 = 0;

     label2:
        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if i3 >= $i1 goto label4;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i3);

        $z2 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: boolean validPNameChar(char)>($c2);

        if $z2 != 0 goto label3;

        return 0;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        $z0 = virtualinvoke r0.<java.lang.String: boolean endsWith(java.lang.String)>(".");

        if $z0 == 0 goto label5;

        return 0;

     label5:
        $z1 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>(".");

        if $z1 == 0 goto label6;

        return 0;

     label6:
        return 1;
    }

    private static boolean validPNameChar(char)
    {
        int $i1, $i2, $i3;
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        $z0 = staticinvoke <java.lang.Character: boolean isLetterOrDigit(char)>(c0);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $i1 = (int) c0;

        if $i1 != 46 goto label2;

        return 1;

     label2:
        $i2 = (int) c0;

        if $i2 != 45 goto label3;

        return 1;

     label3:
        $i3 = (int) c0;

        if $i3 != 95 goto label4;

        return 1;

     label4:
        return 0;
    }

    public static java.lang.String stringEsc(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: java.lang.String stringEsc(java.lang.String,boolean)>(r0, 1);

        return $r1;
    }

    public static java.lang.String stringEsc(java.lang.String, boolean)
    {
        java.lang.StringBuilder $r0;
        java.lang.String r1, $r2;
        boolean z0;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: void stringEsc(java.lang.StringBuilder,java.lang.String,boolean)>($r0, r1, z0);

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public static void stringEsc(java.lang.StringBuilder, java.lang.String)
    {
        java.lang.StringBuilder r0;
        java.lang.String r1;

        r0 := @parameter0: java.lang.StringBuilder;

        r1 := @parameter1: java.lang.String;

        staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: void stringEsc(java.lang.StringBuilder,java.lang.String,boolean)>(r0, r1, 1);

        return;
    }

    public static void stringEsc(java.lang.StringBuilder, java.lang.String, boolean)
    {
        java.util.Locale $r3;
        int $i0, $i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i19;
        java.lang.String r0, $r2, $r4;
        boolean z0, $z1;
        char $c1;
        java.lang.StringBuilder r1;

        r1 := @parameter0: java.lang.StringBuilder;

        r0 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i3 = 0;

     label01:
        if i3 >= $i0 goto label14;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i3);

        $i5 = (int) $c1;

        if $i5 == 92 goto label02;

        $i6 = (int) $c1;

        if $i6 != 34 goto label03;

     label02:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(92);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        goto label13;

     label03:
        if z0 == 0 goto label08;

        $i7 = (int) $c1;

        if $i7 == 10 goto label04;

        $i8 = (int) $c1;

        if $i8 == 13 goto label04;

        $i9 = (int) $c1;

        if $i9 == 12 goto label04;

        $i10 = (int) $c1;

        if $i10 != 9 goto label08;

     label04:
        $i11 = (int) $c1;

        if $i11 != 10 goto label05;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\n");

     label05:
        $i12 = (int) $c1;

        if $i12 != 9 goto label06;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\t");

     label06:
        $i13 = (int) $c1;

        if $i13 != 13 goto label07;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\r");

     label07:
        $i14 = (int) $c1;

        if $i14 != 12 goto label13;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\f");

        goto label13;

     label08:
        $z1 = <com.hp.hpl.jena.sparql.util.FmtUtils: boolean applyUnicodeEscapes>;

        if $z1 != 0 goto label09;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        goto label13;

     label09:
        $i15 = (int) $c1;

        if $i15 < 32 goto label10;

        $i16 = (int) $c1;

        if $i16 >= 127 goto label10;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        goto label13;

     label10:
        $i17 = (int) $c1;

        $r2 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i17);

        $r3 = <java.util.Locale: java.util.Locale ENGLISH>;

        $r4 = virtualinvoke $r2.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r3);

        $i2 = virtualinvoke $r4.<java.lang.String: int length()>();

        i4 = 4 - $i2;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\u");

     label11:
        if i4 <= 0 goto label12;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0");

        $i19 = (int) -1;

        i4 = i4 + $i19;

        goto label11;

     label12:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

     label13:
        i3 = i3 + 1;

        goto label01;

     label14:
        return;
    }

    public static void resetBNodeLabels()
    {
        com.hp.hpl.jena.sparql.util.NodeToLabelMapBNode $r0;

        $r0 = new com.hp.hpl.jena.sparql.util.NodeToLabelMapBNode;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.util.NodeToLabelMapBNode: void <init>(java.lang.String,boolean)>("b", 0);

        <com.hp.hpl.jena.sparql.util.FmtUtils: com.hp.hpl.jena.sparql.util.NodeToLabelMap bNodeMap> = $r0;

        return;
    }

    private static com.hp.hpl.jena.sparql.serializer.SerializationContext newSerializationContext(com.hp.hpl.jena.shared.PrefixMapping)
    {
        com.hp.hpl.jena.sparql.util.NodeToLabelMap $r2;
        com.hp.hpl.jena.shared.PrefixMapping r1;
        com.hp.hpl.jena.sparql.serializer.SerializationContext $r0;

        r1 := @parameter0: com.hp.hpl.jena.shared.PrefixMapping;

        $r0 = new com.hp.hpl.jena.sparql.serializer.SerializationContext;

        $r2 = <com.hp.hpl.jena.sparql.util.FmtUtils: com.hp.hpl.jena.sparql.util.NodeToLabelMap bNodeMap>;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.serializer.SerializationContext: void <init>(com.hp.hpl.jena.shared.PrefixMapping,com.hp.hpl.jena.sparql.util.NodeToLabelMap)>(r1, $r2);

        return $r0;
    }

    private static com.hp.hpl.jena.sparql.serializer.SerializationContext newSerializationContext(com.hp.hpl.jena.sparql.core.Prologue)
    {
        com.hp.hpl.jena.sparql.util.NodeToLabelMap $r2;
        com.hp.hpl.jena.sparql.core.Prologue r1;
        com.hp.hpl.jena.sparql.serializer.SerializationContext $r0;

        r1 := @parameter0: com.hp.hpl.jena.sparql.core.Prologue;

        $r0 = new com.hp.hpl.jena.sparql.serializer.SerializationContext;

        $r2 = <com.hp.hpl.jena.sparql.util.FmtUtils: com.hp.hpl.jena.sparql.util.NodeToLabelMap bNodeMap>;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.serializer.SerializationContext: void <init>(com.hp.hpl.jena.sparql.core.Prologue,com.hp.hpl.jena.sparql.util.NodeToLabelMap)>(r1, $r2);

        return $r0;
    }

    static void <clinit>()
    {
        com.hp.hpl.jena.sparql.util.NodeToLabelMapBNode $r0;
        java.util.regex.Pattern $r1;

        <com.hp.hpl.jena.sparql.util.FmtUtils: java.lang.String indentPrefix> = "  ";

        <com.hp.hpl.jena.sparql.util.FmtUtils: boolean multiLineExpr> = 0;

        <com.hp.hpl.jena.sparql.util.FmtUtils: boolean printOpName> = 1;

        $r0 = new com.hp.hpl.jena.sparql.util.NodeToLabelMapBNode;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.util.NodeToLabelMapBNode: void <init>(java.lang.String,boolean)>("b", 0);

        <com.hp.hpl.jena.sparql.util.FmtUtils: com.hp.hpl.jena.sparql.util.NodeToLabelMap bNodeMap> = $r0;

        <com.hp.hpl.jena.sparql.util.FmtUtils: int relFlags> = 9;

        $r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[A-Za-z]+:");

        <com.hp.hpl.jena.sparql.util.FmtUtils: java.util.regex.Pattern schemePattern> = $r1;

        <com.hp.hpl.jena.sparql.util.FmtUtils: boolean applyUnicodeEscapes> = 0;

        return;
    }
}
