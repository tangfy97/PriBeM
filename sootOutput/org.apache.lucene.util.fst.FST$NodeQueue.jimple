class org.apache.lucene.util.fst.FST$NodeQueue extends org.apache.lucene.util.PriorityQueue
{
    static final boolean $assertionsDisabled;

    public void <init>(int)
    {
        int i0;
        org.apache.lucene.util.fst.FST$NodeQueue r0;

        r0 := @this: org.apache.lucene.util.fst.FST$NodeQueue;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.lucene.util.PriorityQueue: void <init>(int,boolean)>(i0, 0);

        return;
    }

    public boolean lessThan(org.apache.lucene.util.fst.FST$NodeAndInCount, org.apache.lucene.util.fst.FST$NodeAndInCount)
    {
        org.apache.lucene.util.fst.FST$NodeAndInCount r0, r1;
        int $i0;
        org.apache.lucene.util.fst.FST$NodeQueue r3;
        java.lang.AssertionError $r2;
        boolean $z0, $z1;

        r3 := @this: org.apache.lucene.util.fst.FST$NodeQueue;

        r0 := @parameter0: org.apache.lucene.util.fst.FST$NodeAndInCount;

        r1 := @parameter1: org.apache.lucene.util.fst.FST$NodeAndInCount;

        $i0 = virtualinvoke r0.<org.apache.lucene.util.fst.FST$NodeAndInCount: int compareTo(org.apache.lucene.util.fst.FST$NodeAndInCount)>(r1);

        $z0 = <org.apache.lucene.util.fst.FST$NodeQueue: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if $i0 != 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        if $i0 >= 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public volatile boolean lessThan(java.lang.Object, java.lang.Object)
    {
        org.apache.lucene.util.fst.FST$NodeAndInCount $r3, $r4;
        org.apache.lucene.util.fst.FST$NodeQueue r0;
        java.lang.Object r1, r2;
        boolean $z0;

        r0 := @this: org.apache.lucene.util.fst.FST$NodeQueue;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (org.apache.lucene.util.fst.FST$NodeAndInCount) r1;

        $r3 = (org.apache.lucene.util.fst.FST$NodeAndInCount) r2;

        $z0 = virtualinvoke r0.<org.apache.lucene.util.fst.FST$NodeQueue: boolean lessThan(org.apache.lucene.util.fst.FST$NodeAndInCount,org.apache.lucene.util.fst.FST$NodeAndInCount)>($r4, $r3);

        return $z0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/util/fst/FST;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.util.fst.FST$NodeQueue: boolean $assertionsDisabled> = $z1;

        return;
    }
}
