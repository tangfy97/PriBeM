public class org.springframework.beans.factory.config.PropertyPathFactoryBean extends java.lang.Object implements org.springframework.beans.factory.FactoryBean, org.springframework.beans.factory.BeanNameAware, org.springframework.beans.factory.BeanFactoryAware
{
    private static final org.apache.commons.logging.Log logger;
    private org.springframework.beans.BeanWrapper targetBeanWrapper;
    private java.lang.String targetBeanName;
    private java.lang.String propertyPath;
    private java.lang.Class resultType;
    private java.lang.String beanName;
    private org.springframework.beans.factory.BeanFactory beanFactory;

    static void <clinit>()
    {
        org.apache.commons.logging.Log $r0;

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lorg/springframework/beans/factory/config/PropertyPathFactoryBean;");

        <org.springframework.beans.factory.config.PropertyPathFactoryBean: org.apache.commons.logging.Log logger> = $r0;

        return;
    }

    public void <init>()
    {
        org.springframework.beans.factory.config.PropertyPathFactoryBean r0;

        r0 := @this: org.springframework.beans.factory.config.PropertyPathFactoryBean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void setTargetObject(java.lang.Object)
    {
        org.springframework.beans.factory.config.PropertyPathFactoryBean r0;
        org.springframework.beans.BeanWrapper $r2;
        java.lang.Object r1;

        r0 := @this: org.springframework.beans.factory.config.PropertyPathFactoryBean;

        r1 := @parameter0: java.lang.Object;

        $r2 = staticinvoke <org.springframework.beans.PropertyAccessorFactory: org.springframework.beans.BeanWrapper forBeanPropertyAccess(java.lang.Object)>(r1);

        r0.<org.springframework.beans.factory.config.PropertyPathFactoryBean: org.springframework.beans.BeanWrapper targetBeanWrapper> = $r2;

        return;
    }

    public void setTargetBeanName(java.lang.String)
    {
        org.springframework.beans.factory.config.PropertyPathFactoryBean r0;
        java.lang.String r1, $r2;

        r0 := @this: org.springframework.beans.factory.config.PropertyPathFactoryBean;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <org.springframework.util.StringUtils: java.lang.String trimAllWhitespace(java.lang.String)>(r1);

        r0.<org.springframework.beans.factory.config.PropertyPathFactoryBean: java.lang.String targetBeanName> = $r2;

        return;
    }

    public void setPropertyPath(java.lang.String)
    {
        org.springframework.beans.factory.config.PropertyPathFactoryBean r0;
        java.lang.String r1, $r2;

        r0 := @this: org.springframework.beans.factory.config.PropertyPathFactoryBean;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <org.springframework.util.StringUtils: java.lang.String trimAllWhitespace(java.lang.String)>(r1);

        r0.<org.springframework.beans.factory.config.PropertyPathFactoryBean: java.lang.String propertyPath> = $r2;

        return;
    }

    public void setResultType(java.lang.Class)
    {
        org.springframework.beans.factory.config.PropertyPathFactoryBean r0;
        java.lang.Class r1;

        r0 := @this: org.springframework.beans.factory.config.PropertyPathFactoryBean;

        r1 := @parameter0: java.lang.Class;

        r0.<org.springframework.beans.factory.config.PropertyPathFactoryBean: java.lang.Class resultType> = r1;

        return;
    }

    public void setBeanName(java.lang.String)
    {
        org.springframework.beans.factory.config.PropertyPathFactoryBean r0;
        java.lang.String r1, $r2, $r3;

        r0 := @this: org.springframework.beans.factory.config.PropertyPathFactoryBean;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <org.springframework.beans.factory.BeanFactoryUtils: java.lang.String originalBeanName(java.lang.String)>(r1);

        $r3 = staticinvoke <org.springframework.util.StringUtils: java.lang.String trimAllWhitespace(java.lang.String)>($r2);

        r0.<org.springframework.beans.factory.config.PropertyPathFactoryBean: java.lang.String beanName> = $r3;

        return;
    }

    public void setBeanFactory(org.springframework.beans.factory.BeanFactory)
    {
        org.springframework.beans.factory.config.PropertyPathFactoryBean r0;
        boolean $z0;
        java.lang.StringBuilder $r26, $r27, $r34;
        org.springframework.beans.BeanWrapper $r2, $r3, $r5, $r11, $r13;
        int $i0, $i1, $i3;
        java.lang.String $r4, $r6, $r8, $r12, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r25, $r28, $r30;
        java.lang.IllegalArgumentException $r32, $r33, $r35, $r36;
        org.springframework.beans.factory.BeanFactory r1, $r7, $r9;
        java.lang.Object $r10;
        java.lang.Class $r14;

        r0 := @this: org.springframework.beans.factory.config.PropertyPathFactoryBean;

        r1 := @parameter0: org.springframework.beans.factory.BeanFactory;

        r0.<org.springframework.beans.factory.config.PropertyPathFactoryBean: org.springframework.beans.factory.BeanFactory beanFactory> = r1;

        $r2 = r0.<org.springframework.beans.factory.config.PropertyPathFactoryBean: org.springframework.beans.BeanWrapper targetBeanWrapper>;

        if $r2 == null goto label1;

        $r30 = r0.<org.springframework.beans.factory.config.PropertyPathFactoryBean: java.lang.String targetBeanName>;

        if $r30 == null goto label1;

        $r32 = new java.lang.IllegalArgumentException;

        specialinvoke $r32.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Specify either \'targetObject\' or \'targetBeanName\', not both");

        throw $r32;

     label1:
        $r3 = r0.<org.springframework.beans.factory.config.PropertyPathFactoryBean: org.springframework.beans.BeanWrapper targetBeanWrapper>;

        if $r3 != null goto label4;

        $r16 = r0.<org.springframework.beans.factory.config.PropertyPathFactoryBean: java.lang.String targetBeanName>;

        if $r16 != null goto label4;

        $r17 = r0.<org.springframework.beans.factory.config.PropertyPathFactoryBean: java.lang.String propertyPath>;

        if $r17 == null goto label2;

        $r33 = new java.lang.IllegalArgumentException;

        specialinvoke $r33.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Specify \'targetObject\' or \'targetBeanName\' in combination with \'propertyPath\'");

        throw $r33;

     label2:
        $r18 = r0.<org.springframework.beans.factory.config.PropertyPathFactoryBean: java.lang.String beanName>;

        $i0 = virtualinvoke $r18.<java.lang.String: int indexOf(int)>(46);

        $i3 = (int) -1;

        if $i0 != $i3 goto label3;

        $r35 = new java.lang.IllegalArgumentException;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>(java.lang.String)>("Neither \'targetObject\' nor \'targetBeanName\' specified, and PropertyPathFactoryBean bean name \'");

        $r25 = r0.<org.springframework.beans.factory.config.PropertyPathFactoryBean: java.lang.String beanName>;

        $r26 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' does not follow \'beanName.property\' syntax");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r35.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r28);

        throw $r35;

     label3:
        $r19 = r0.<org.springframework.beans.factory.config.PropertyPathFactoryBean: java.lang.String beanName>;

        $r20 = virtualinvoke $r19.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        r0.<org.springframework.beans.factory.config.PropertyPathFactoryBean: java.lang.String targetBeanName> = $r20;

        $r21 = r0.<org.springframework.beans.factory.config.PropertyPathFactoryBean: java.lang.String beanName>;

        $i1 = $i0 + 1;

        $r22 = virtualinvoke $r21.<java.lang.String: java.lang.String substring(int)>($i1);

        r0.<org.springframework.beans.factory.config.PropertyPathFactoryBean: java.lang.String propertyPath> = $r22;

        goto label5;

     label4:
        $r4 = r0.<org.springframework.beans.factory.config.PropertyPathFactoryBean: java.lang.String propertyPath>;

        if $r4 != null goto label5;

        $r36 = new java.lang.IllegalArgumentException;

        specialinvoke $r36.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'propertyPath\' is required");

        throw $r36;

     label5:
        $r5 = r0.<org.springframework.beans.factory.config.PropertyPathFactoryBean: org.springframework.beans.BeanWrapper targetBeanWrapper>;

        if $r5 != null goto label6;

        $r7 = r0.<org.springframework.beans.factory.config.PropertyPathFactoryBean: org.springframework.beans.factory.BeanFactory beanFactory>;

        $r6 = r0.<org.springframework.beans.factory.config.PropertyPathFactoryBean: java.lang.String targetBeanName>;

        $z0 = interfaceinvoke $r7.<org.springframework.beans.factory.BeanFactory: boolean isSingleton(java.lang.String)>($r6);

        if $z0 == 0 goto label6;

        $r9 = r0.<org.springframework.beans.factory.config.PropertyPathFactoryBean: org.springframework.beans.factory.BeanFactory beanFactory>;

        $r8 = r0.<org.springframework.beans.factory.config.PropertyPathFactoryBean: java.lang.String targetBeanName>;

        $r10 = interfaceinvoke $r9.<org.springframework.beans.factory.BeanFactory: java.lang.Object getBean(java.lang.String)>($r8);

        $r11 = staticinvoke <org.springframework.beans.PropertyAccessorFactory: org.springframework.beans.BeanWrapper forBeanPropertyAccess(java.lang.Object)>($r10);

        r0.<org.springframework.beans.factory.config.PropertyPathFactoryBean: org.springframework.beans.BeanWrapper targetBeanWrapper> = $r11;

        $r13 = r0.<org.springframework.beans.factory.config.PropertyPathFactoryBean: org.springframework.beans.BeanWrapper targetBeanWrapper>;

        $r12 = r0.<org.springframework.beans.factory.config.PropertyPathFactoryBean: java.lang.String propertyPath>;

        $r14 = interfaceinvoke $r13.<org.springframework.beans.BeanWrapper: java.lang.Class getPropertyType(java.lang.String)>($r12);

        r0.<org.springframework.beans.factory.config.PropertyPathFactoryBean: java.lang.Class resultType> = $r14;

     label6:
        return;
    }

    public java.lang.Object getObject() throws org.springframework.beans.BeansException
    {
        org.springframework.beans.factory.config.PropertyPathFactoryBean r0;
        org.springframework.beans.BeanWrapper r20;
        java.lang.String $r1, $r5, $r8, $r12, $r16, $r19, $r21;
        boolean $z0, $z1, $z2;
        org.springframework.beans.factory.BeanFactory $r2, $r6, $r7;
        java.lang.Object $r3, $r22;
        org.apache.commons.logging.Log $r4, $r11;
        java.lang.StringBuilder $r10, $r13, $r14, $r15, $r17, $r18;
        org.springframework.beans.factory.config.ConfigurableBeanFactory $r9;

        r0 := @this: org.springframework.beans.factory.config.PropertyPathFactoryBean;

        r20 = r0.<org.springframework.beans.factory.config.PropertyPathFactoryBean: org.springframework.beans.BeanWrapper targetBeanWrapper>;

        if r20 == null goto label1;

        $r4 = <org.springframework.beans.factory.config.PropertyPathFactoryBean: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r4.<org.apache.commons.logging.Log: boolean isWarnEnabled()>();

        if $z0 == 0 goto label2;

        $r5 = r0.<org.springframework.beans.factory.config.PropertyPathFactoryBean: java.lang.String targetBeanName>;

        if $r5 == null goto label2;

        $r6 = r0.<org.springframework.beans.factory.config.PropertyPathFactoryBean: org.springframework.beans.factory.BeanFactory beanFactory>;

        $z1 = $r6 instanceof org.springframework.beans.factory.config.ConfigurableBeanFactory;

        if $z1 == 0 goto label2;

        $r7 = r0.<org.springframework.beans.factory.config.PropertyPathFactoryBean: org.springframework.beans.factory.BeanFactory beanFactory>;

        $r9 = (org.springframework.beans.factory.config.ConfigurableBeanFactory) $r7;

        $r8 = r0.<org.springframework.beans.factory.config.PropertyPathFactoryBean: java.lang.String targetBeanName>;

        $z2 = interfaceinvoke $r9.<org.springframework.beans.factory.config.ConfigurableBeanFactory: boolean isCurrentlyInCreation(java.lang.String)>($r8);

        if $z2 == 0 goto label2;

        $r11 = <org.springframework.beans.factory.config.PropertyPathFactoryBean: org.apache.commons.logging.Log logger>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>("Target bean \'");

        $r12 = r0.<org.springframework.beans.factory.config.PropertyPathFactoryBean: java.lang.String targetBeanName>;

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is still in creation due to a circular ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("reference - obtained value for property \'");

        $r16 = r0.<org.springframework.beans.factory.config.PropertyPathFactoryBean: java.lang.String propertyPath>;

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' may be outdated!");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r11.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r19);

        goto label2;

     label1:
        $r2 = r0.<org.springframework.beans.factory.config.PropertyPathFactoryBean: org.springframework.beans.factory.BeanFactory beanFactory>;

        $r1 = r0.<org.springframework.beans.factory.config.PropertyPathFactoryBean: java.lang.String targetBeanName>;

        $r3 = interfaceinvoke $r2.<org.springframework.beans.factory.BeanFactory: java.lang.Object getBean(java.lang.String)>($r1);

        r20 = staticinvoke <org.springframework.beans.PropertyAccessorFactory: org.springframework.beans.BeanWrapper forBeanPropertyAccess(java.lang.Object)>($r3);

     label2:
        $r21 = r0.<org.springframework.beans.factory.config.PropertyPathFactoryBean: java.lang.String propertyPath>;

        $r22 = interfaceinvoke r20.<org.springframework.beans.BeanWrapper: java.lang.Object getPropertyValue(java.lang.String)>($r21);

        return $r22;
    }

    public java.lang.Class getObjectType()
    {
        org.springframework.beans.factory.config.PropertyPathFactoryBean r0;
        java.lang.Class $r1;

        r0 := @this: org.springframework.beans.factory.config.PropertyPathFactoryBean;

        $r1 = r0.<org.springframework.beans.factory.config.PropertyPathFactoryBean: java.lang.Class resultType>;

        return $r1;
    }

    public boolean isSingleton()
    {
        org.springframework.beans.factory.config.PropertyPathFactoryBean r0;

        r0 := @this: org.springframework.beans.factory.config.PropertyPathFactoryBean;

        return 0;
    }
}
