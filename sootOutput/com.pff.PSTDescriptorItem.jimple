class com.pff.PSTDescriptorItem extends java.lang.Object
{
    int descriptorIdentifier;
    int offsetIndexIdentifier;
    int subNodeOffsetIndexIdentifier;
    byte[] dataBlockData;
    int[] dataBlockOffsets;
    private com.pff.PSTFile pstFile;

    void <init>(byte[], int, com.pff.PSTFile)
    {
        byte[] r2;
        com.pff.PSTFile r1;
        long $l3, $l7, $l12, $l16, $l20, $l25;
        int $i0, i1, $i2, $i4, $i5, $i6, $i8, $i9, $i10, $i11, $i13, $i14, $i15, $i17, $i18, $i19, $i21, $i22, $i23, $i24, $i26, $i27, $i29, $i31, $i33, $i35;
        com.pff.PSTDescriptorItem r0;

        r0 := @this: com.pff.PSTDescriptorItem;

        r2 := @parameter0: byte[];

        i1 := @parameter1: int;

        r1 := @parameter2: com.pff.PSTFile;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.pff.PSTDescriptorItem: byte[] dataBlockData> = null;

        r0.<com.pff.PSTDescriptorItem: int[] dataBlockOffsets> = null;

        r0.<com.pff.PSTDescriptorItem: com.pff.PSTFile pstFile> = r1;

        $i0 = virtualinvoke r1.<com.pff.PSTFile: int getPSTFileType()>();

        if $i0 != 14 goto label1;

        $i15 = i1 + 4;

        $l16 = staticinvoke <com.pff.PSTObject: long convertLittleEndianBytesToLong(byte[],int,int)>(r2, i1, $i15);

        $i17 = (int) $l16;

        r0.<com.pff.PSTDescriptorItem: int descriptorIdentifier> = $i17;

        $i19 = i1 + 4;

        $i18 = i1 + 8;

        $l20 = staticinvoke <com.pff.PSTObject: long convertLittleEndianBytesToLong(byte[],int,int)>(r2, $i19, $i18);

        $i21 = (int) $l20;

        $i29 = (int) -2;

        $i22 = $i21 & $i29;

        r0.<com.pff.PSTDescriptorItem: int offsetIndexIdentifier> = $i22;

        $i24 = i1 + 8;

        $i23 = i1 + 12;

        $l25 = staticinvoke <com.pff.PSTObject: long convertLittleEndianBytesToLong(byte[],int,int)>(r2, $i24, $i23);

        $i26 = (int) $l25;

        $i31 = (int) -2;

        $i27 = $i26 & $i31;

        r0.<com.pff.PSTDescriptorItem: int subNodeOffsetIndexIdentifier> = $i27;

        goto label2;

     label1:
        $i2 = i1 + 4;

        $l3 = staticinvoke <com.pff.PSTObject: long convertLittleEndianBytesToLong(byte[],int,int)>(r2, i1, $i2);

        $i4 = (int) $l3;

        r0.<com.pff.PSTDescriptorItem: int descriptorIdentifier> = $i4;

        $i6 = i1 + 8;

        $i5 = i1 + 16;

        $l7 = staticinvoke <com.pff.PSTObject: long convertLittleEndianBytesToLong(byte[],int,int)>(r2, $i6, $i5);

        $i8 = (int) $l7;

        $i33 = (int) -2;

        $i9 = $i8 & $i33;

        r0.<com.pff.PSTDescriptorItem: int offsetIndexIdentifier> = $i9;

        $i11 = i1 + 16;

        $i10 = i1 + 24;

        $l12 = staticinvoke <com.pff.PSTObject: long convertLittleEndianBytesToLong(byte[],int,int)>(r2, $i11, $i10);

        $i13 = (int) $l12;

        $i35 = (int) -2;

        $i14 = $i13 & $i35;

        r0.<com.pff.PSTDescriptorItem: int subNodeOffsetIndexIdentifier> = $i14;

     label2:
        return;
    }

    public byte[] getData() throws java.io.IOException, com.pff.PSTException
    {
        com.pff.PSTDescriptorItem r0;
        byte[] $r1, r4, $r5, $r6;
        long $l1, $l2;
        int $i0, $i3;
        com.pff.PSTFile $r2;
        com.pff.PSTNodeInputStream $r3;

        r0 := @this: com.pff.PSTDescriptorItem;

        $r1 = r0.<com.pff.PSTDescriptorItem: byte[] dataBlockData>;

        if $r1 == null goto label1;

        $r6 = r0.<com.pff.PSTDescriptorItem: byte[] dataBlockData>;

        return $r6;

     label1:
        $r2 = r0.<com.pff.PSTDescriptorItem: com.pff.PSTFile pstFile>;

        $i0 = r0.<com.pff.PSTDescriptorItem: int offsetIndexIdentifier>;

        $l1 = (long) $i0;

        $r3 = virtualinvoke $r2.<com.pff.PSTFile: com.pff.PSTNodeInputStream readLeaf(long)>($l1);

        $l2 = virtualinvoke $r3.<com.pff.PSTNodeInputStream: long length()>();

        $i3 = (int) $l2;

        r4 = newarray (byte)[$i3];

        virtualinvoke $r3.<com.pff.PSTNodeInputStream: int read(byte[])>(r4);

        r0.<com.pff.PSTDescriptorItem: byte[] dataBlockData> = r4;

        $r5 = r0.<com.pff.PSTDescriptorItem: byte[] dataBlockData>;

        return $r5;
    }

    public int[] getBlockOffsets() throws java.io.IOException, com.pff.PSTException
    {
        com.pff.PSTDescriptorItem r0;
        java.lang.Long[] $r4;
        long $l1;
        int[] $r1, r5, $r7;
        java.lang.Long $r6;
        int $i0, $i2, $i3, $i4, i5;
        com.pff.PSTFile $r2;
        com.pff.PSTNodeInputStream $r3;

        r0 := @this: com.pff.PSTDescriptorItem;

        $r1 = r0.<com.pff.PSTDescriptorItem: int[] dataBlockOffsets>;

        if $r1 == null goto label1;

        $r7 = r0.<com.pff.PSTDescriptorItem: int[] dataBlockOffsets>;

        return $r7;

     label1:
        $r2 = r0.<com.pff.PSTDescriptorItem: com.pff.PSTFile pstFile>;

        $i0 = r0.<com.pff.PSTDescriptorItem: int offsetIndexIdentifier>;

        $l1 = (long) $i0;

        $r3 = virtualinvoke $r2.<com.pff.PSTFile: com.pff.PSTNodeInputStream readLeaf(long)>($l1);

        $r4 = virtualinvoke $r3.<com.pff.PSTNodeInputStream: java.lang.Long[] getBlockOffsets()>();

        $i2 = lengthof $r4;

        r5 = newarray (int)[$i2];

        i5 = 0;

     label2:
        $i3 = lengthof $r4;

        if i5 >= $i3 goto label3;

        $r6 = $r4[i5];

        $i4 = virtualinvoke $r6.<java.lang.Long: int intValue()>();

        r5[i5] = $i4;

        i5 = i5 + 1;

        goto label2;

     label3:
        return r5;
    }

    public int getDataSize() throws java.io.IOException, com.pff.PSTException
    {
        com.pff.PSTDescriptorItem r0;
        int $i0, $i2;
        com.pff.PSTFile $r1;
        long $l1;

        r0 := @this: com.pff.PSTDescriptorItem;

        $r1 = r0.<com.pff.PSTDescriptorItem: com.pff.PSTFile pstFile>;

        $i0 = r0.<com.pff.PSTDescriptorItem: int offsetIndexIdentifier>;

        $l1 = (long) $i0;

        $i2 = virtualinvoke $r1.<com.pff.PSTFile: int getLeafSize(long)>($l1);

        return $i2;
    }

    public java.lang.String toString()
    {
        com.pff.PSTDescriptorItem r2;
        int $i0, $i1, $i2;
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        java.lang.String $r11;

        r2 := @this: com.pff.PSTDescriptorItem;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PSTDescriptorItem\n   descriptorIdentifier: ");

        $i0 = r2.<com.pff.PSTDescriptorItem: int descriptorIdentifier>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("   offsetIndexIdentifier: ");

        $i1 = r2.<com.pff.PSTDescriptorItem: int offsetIndexIdentifier>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("   subNodeOffsetIndexIdentifier: ");

        $i2 = r2.<com.pff.PSTDescriptorItem: int subNodeOffsetIndexIdentifier>;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;
    }
}
