public class org.apache.xpath.axes.OneStepIterator extends org.apache.xpath.axes.ChildTestIterator
{
    protected int m_axis;
    protected org.apache.xml.dtm.DTMAxisIterator m_iterator;

    void <init>(org.apache.xpath.compiler.Compiler, int, int) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.axes.OneStepIterator r0;
        int i0, i1, $i2, $i3, $i5;
        org.apache.xpath.compiler.Compiler r1;

        r0 := @this: org.apache.xpath.axes.OneStepIterator;

        r1 := @parameter0: org.apache.xpath.compiler.Compiler;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<org.apache.xpath.axes.ChildTestIterator: void <init>(org.apache.xpath.compiler.Compiler,int,int)>(r1, i0, i1);

        $i5 = (int) -1;

        r0.<org.apache.xpath.axes.OneStepIterator: int m_axis> = $i5;

        $i2 = staticinvoke <org.apache.xpath.compiler.OpMap: int getFirstChildPos(int)>(i0);

        $i3 = staticinvoke <org.apache.xpath.axes.WalkerFactory: int getAxisFromStep(org.apache.xpath.compiler.Compiler,int)>(r1, $i2);

        r0.<org.apache.xpath.axes.OneStepIterator: int m_axis> = $i3;

        return;
    }

    public void <init>(org.apache.xml.dtm.DTMAxisIterator, int) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.axes.OneStepIterator r0;
        org.apache.xml.dtm.DTMAxisIterator r1;
        int i0, $i2, $i4;

        r0 := @this: org.apache.xpath.axes.OneStepIterator;

        r1 := @parameter0: org.apache.xml.dtm.DTMAxisIterator;

        i0 := @parameter1: int;

        specialinvoke r0.<org.apache.xpath.axes.ChildTestIterator: void <init>(org.apache.xml.dtm.DTMAxisTraverser)>(null);

        $i2 = (int) -1;

        r0.<org.apache.xpath.axes.OneStepIterator: int m_axis> = $i2;

        r0.<org.apache.xpath.axes.OneStepIterator: org.apache.xml.dtm.DTMAxisIterator m_iterator> = r1;

        r0.<org.apache.xpath.axes.OneStepIterator: int m_axis> = i0;

        $i4 = (int) -1;

        virtualinvoke r0.<org.apache.xpath.patterns.NodeTest: void initNodeTest(int)>($i4);

        return;
    }

    public void setRoot(int, java.lang.Object)
    {
        org.apache.xpath.axes.OneStepIterator r0;
        org.apache.xml.dtm.DTMAxisIterator $r2, $r4;
        int i0, $i1, $i2, $i3, $i5;
        org.apache.xml.dtm.DTM $r3;
        java.lang.Object r1;

        r0 := @this: org.apache.xpath.axes.OneStepIterator;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        specialinvoke r0.<org.apache.xpath.axes.ChildTestIterator: void setRoot(int,java.lang.Object)>(i0, r1);

        $i1 = r0.<org.apache.xpath.axes.OneStepIterator: int m_axis>;

        $i5 = (int) -1;

        if $i1 <= $i5 goto label1;

        $r3 = r0.<org.apache.xpath.axes.LocPathIterator: org.apache.xml.dtm.DTM m_cdtm>;

        $i3 = r0.<org.apache.xpath.axes.OneStepIterator: int m_axis>;

        $r4 = interfaceinvoke $r3.<org.apache.xml.dtm.DTM: org.apache.xml.dtm.DTMAxisIterator getAxisIterator(int)>($i3);

        r0.<org.apache.xpath.axes.OneStepIterator: org.apache.xml.dtm.DTMAxisIterator m_iterator> = $r4;

     label1:
        $r2 = r0.<org.apache.xpath.axes.OneStepIterator: org.apache.xml.dtm.DTMAxisIterator m_iterator>;

        $i2 = r0.<org.apache.xpath.axes.LocPathIterator: int m_context>;

        interfaceinvoke $r2.<org.apache.xml.dtm.DTMAxisIterator: org.apache.xml.dtm.DTMAxisIterator setStartNode(int)>($i2);

        return;
    }

    public void detach()
    {
        org.apache.xpath.axes.OneStepIterator r0;
        int $i0, $i2;
        boolean $z0;

        r0 := @this: org.apache.xpath.axes.OneStepIterator;

        $z0 = r0.<org.apache.xpath.axes.LocPathIterator: boolean m_allowDetach>;

        if $z0 == 0 goto label2;

        $i0 = r0.<org.apache.xpath.axes.OneStepIterator: int m_axis>;

        $i2 = (int) -1;

        if $i0 <= $i2 goto label1;

        r0.<org.apache.xpath.axes.OneStepIterator: org.apache.xml.dtm.DTMAxisIterator m_iterator> = null;

     label1:
        specialinvoke r0.<org.apache.xpath.axes.ChildTestIterator: void detach()>();

     label2:
        return;
    }

    protected int getNextNode()
    {
        int $i0;
        org.apache.xpath.axes.OneStepIterator r0;
        org.apache.xml.dtm.DTMAxisIterator $r1;

        r0 := @this: org.apache.xpath.axes.OneStepIterator;

        $r1 = r0.<org.apache.xpath.axes.OneStepIterator: org.apache.xml.dtm.DTMAxisIterator m_iterator>;

        $i0 = interfaceinvoke $r1.<org.apache.xml.dtm.DTMAxisIterator: int next()>();

        r0.<org.apache.xpath.axes.LocPathIterator: int m_lastFetched> = $i0;

        return $i0;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.apache.xpath.axes.OneStepIterator r0, r2;
        org.apache.xml.dtm.DTMAxisIterator $r3, $r4, $r5;
        java.lang.Object $r1;

        r0 := @this: org.apache.xpath.axes.OneStepIterator;

        $r1 = specialinvoke r0.<org.apache.xpath.axes.PredicatedNodeTest: java.lang.Object clone()>();

        r2 = (org.apache.xpath.axes.OneStepIterator) $r1;

        $r3 = r0.<org.apache.xpath.axes.OneStepIterator: org.apache.xml.dtm.DTMAxisIterator m_iterator>;

        if $r3 == null goto label1;

        $r4 = r0.<org.apache.xpath.axes.OneStepIterator: org.apache.xml.dtm.DTMAxisIterator m_iterator>;

        $r5 = interfaceinvoke $r4.<org.apache.xml.dtm.DTMAxisIterator: org.apache.xml.dtm.DTMAxisIterator cloneIterator()>();

        r2.<org.apache.xpath.axes.OneStepIterator: org.apache.xml.dtm.DTMAxisIterator m_iterator> = $r5;

     label1:
        return r2;
    }

    public org.apache.xml.dtm.DTMIterator cloneWithReset() throws java.lang.CloneNotSupportedException
    {
        org.apache.xpath.axes.OneStepIterator r0, r2;
        org.apache.xml.dtm.DTMAxisIterator $r3;
        org.apache.xml.dtm.DTMIterator $r1;

        r0 := @this: org.apache.xpath.axes.OneStepIterator;

        $r1 = specialinvoke r0.<org.apache.xpath.axes.ChildTestIterator: org.apache.xml.dtm.DTMIterator cloneWithReset()>();

        r2 = (org.apache.xpath.axes.OneStepIterator) $r1;

        $r3 = r0.<org.apache.xpath.axes.OneStepIterator: org.apache.xml.dtm.DTMAxisIterator m_iterator>;

        r2.<org.apache.xpath.axes.OneStepIterator: org.apache.xml.dtm.DTMAxisIterator m_iterator> = $r3;

        return r2;
    }

    public boolean isReverseAxes()
    {
        org.apache.xpath.axes.OneStepIterator r0;
        org.apache.xml.dtm.DTMAxisIterator $r1;
        boolean $z0;

        r0 := @this: org.apache.xpath.axes.OneStepIterator;

        $r1 = r0.<org.apache.xpath.axes.OneStepIterator: org.apache.xml.dtm.DTMAxisIterator m_iterator>;

        $z0 = interfaceinvoke $r1.<org.apache.xml.dtm.DTMAxisIterator: boolean isReverse()>();

        return $z0;
    }

    protected int getProximityPosition(int)
    {
        java.lang.Throwable $r5;
        org.apache.xpath.axes.OneStepIterator r0, r7;
        java.lang.CloneNotSupportedException $r6;
        int[] $r1, $r4, $r8;
        org.apache.xpath.XPathContext $r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, $i8, $i10, $i12;
        boolean $z0;
        java.lang.Object $r3;

        r0 := @this: org.apache.xpath.axes.OneStepIterator;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<org.apache.xpath.axes.OneStepIterator: boolean isReverseAxes()>();

        if $z0 != 0 goto label01;

        $i6 = specialinvoke r0.<org.apache.xpath.axes.PredicatedNodeTest: int getProximityPosition(int)>(i0);

        return $i6;

     label01:
        if i0 >= 0 goto label02;

        $i10 = (int) -1;

        return $i10;

     label02:
        $r1 = r0.<org.apache.xpath.axes.PredicatedNodeTest: int[] m_proximityPositions>;

        $i1 = $r1[i0];

        if $i1 > 0 goto label12;

        $r2 = virtualinvoke r0.<org.apache.xpath.axes.LocPathIterator: org.apache.xpath.XPathContext getXPathContext()>();

     label03:
        $r3 = virtualinvoke r0.<org.apache.xpath.axes.OneStepIterator: java.lang.Object clone()>();

        r7 = (org.apache.xpath.axes.OneStepIterator) $r3;

        $i2 = virtualinvoke r0.<org.apache.xpath.axes.LocPathIterator: int getRoot()>();

        virtualinvoke $r2.<org.apache.xpath.XPathContext: void pushCurrentNode(int)>($i2);

        virtualinvoke r7.<org.apache.xpath.axes.OneStepIterator: void setRoot(int,java.lang.Object)>($i2, $r2);

        r7.<org.apache.xpath.axes.PredicatedNodeTest: int m_predCount> = i0;

        i7 = 1;

        goto label05;

     label04:
        i7 = i7 + 1;

     label05:
        $i3 = virtualinvoke r7.<org.apache.xpath.axes.BasicTestIterator: int nextNode()>();

        $i12 = (int) -1;

        if $i12 != $i3 goto label04;

        $r4 = r0.<org.apache.xpath.axes.PredicatedNodeTest: int[] m_proximityPositions>;

        $i4 = $r4[i0];

        $i5 = $i4 + i7;

        $r4[i0] = $i5;

     label06:
        goto label13;

     label07:
        goto label12;

     label08:
        $r6 := @caughtexception;

        goto label14;

     label09:
        goto label12;

     label10:
        $r5 := @caughtexception;

        goto label15;

     label11:
        throw $r5;

     label12:
        $r8 = r0.<org.apache.xpath.axes.PredicatedNodeTest: int[] m_proximityPositions>;

        $i8 = $r8[i0];

        return $i8;

     label13:
        virtualinvoke $r2.<org.apache.xpath.XPathContext: void popCurrentNode()>();

        goto label07;

     label14:
        virtualinvoke $r2.<org.apache.xpath.XPathContext: void popCurrentNode()>();

        goto label09;

     label15:
        virtualinvoke $r2.<org.apache.xpath.XPathContext: void popCurrentNode()>();

        goto label11;

        catch java.lang.CloneNotSupportedException from label03 to label06 with label08;
        catch java.lang.Throwable from label03 to label10 with label10;
    }

    public int getLength()
    {
        java.lang.Throwable $r3;
        org.apache.xpath.axes.OneStepIterator r0, $r7;
        java.lang.CloneNotSupportedException $r4;
        org.apache.xpath.XPathContext $r1, $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, $i7, $i8, $i10, $i12;
        boolean $z0, z1, $z3, $z4;
        org.apache.xpath.axes.SubContextList $r2;
        org.apache.xml.dtm.DTMIterator $r6;

        r0 := @this: org.apache.xpath.axes.OneStepIterator;

        $z0 = virtualinvoke r0.<org.apache.xpath.axes.OneStepIterator: boolean isReverseAxes()>();

        if $z0 != 0 goto label01;

        $i5 = specialinvoke r0.<org.apache.xpath.axes.LocPathIterator: int getLength()>();

        return $i5;

     label01:
        $r1 = r0.<org.apache.xpath.axes.LocPathIterator: org.apache.xpath.XPathContext m_execContext>;

        $r2 = virtualinvoke $r1.<org.apache.xpath.XPathContext: org.apache.xpath.axes.SubContextList getSubContextList()>();

        if r0 != $r2 goto label02;

        $z4 = 1;

        $z3 = 1;

        goto label03;

     label02:
        $z4 = 0;

        $z3 = 0;

     label03:
        z1 = $z4;

        virtualinvoke r0.<org.apache.xpath.axes.PredicatedNodeTest: int getPredicateCount()>();

        $i0 = r0.<org.apache.xpath.axes.LocPathIterator: int m_length>;

        $i10 = (int) -1;

        if $i10 == $i0 goto label04;

        if $z3 == 0 goto label04;

        $i3 = r0.<org.apache.xpath.axes.PredicatedNodeTest: int m_predicateIndex>;

        if $i3 >= 1 goto label04;

        $i4 = r0.<org.apache.xpath.axes.LocPathIterator: int m_length>;

        return $i4;

     label04:
        i6 = 0;

        $r5 = virtualinvoke r0.<org.apache.xpath.axes.LocPathIterator: org.apache.xpath.XPathContext getXPathContext()>();

     label05:
        $r6 = virtualinvoke r0.<org.apache.xpath.axes.OneStepIterator: org.apache.xml.dtm.DTMIterator cloneWithReset()>();

        $r7 = (org.apache.xpath.axes.OneStepIterator) $r6;

        $i7 = virtualinvoke r0.<org.apache.xpath.axes.LocPathIterator: int getRoot()>();

        virtualinvoke $r5.<org.apache.xpath.XPathContext: void pushCurrentNode(int)>($i7);

        virtualinvoke $r7.<org.apache.xpath.axes.OneStepIterator: void setRoot(int,java.lang.Object)>($i7, $r5);

        $i8 = r0.<org.apache.xpath.axes.PredicatedNodeTest: int m_predicateIndex>;

        $r7.<org.apache.xpath.axes.PredicatedNodeTest: int m_predCount> = $i8;

        goto label07;

     label06:
        i6 = i6 + 1;

     label07:
        $i1 = virtualinvoke $r7.<org.apache.xpath.axes.BasicTestIterator: int nextNode()>();

        $i12 = (int) -1;

        if $i12 != $i1 goto label06;

     label08:
        goto label16;

     label09:
        goto label14;

     label10:
        $r4 := @caughtexception;

        goto label17;

     label11:
        goto label14;

     label12:
        $r3 := @caughtexception;

        goto label18;

     label13:
        throw $r3;

     label14:
        if z1 == 0 goto label15;

        $i2 = r0.<org.apache.xpath.axes.PredicatedNodeTest: int m_predicateIndex>;

        if $i2 >= 1 goto label15;

        r0.<org.apache.xpath.axes.LocPathIterator: int m_length> = i6;

     label15:
        return i6;

     label16:
        virtualinvoke $r5.<org.apache.xpath.XPathContext: void popCurrentNode()>();

        goto label09;

     label17:
        virtualinvoke $r5.<org.apache.xpath.XPathContext: void popCurrentNode()>();

        goto label11;

     label18:
        virtualinvoke $r5.<org.apache.xpath.XPathContext: void popCurrentNode()>();

        goto label13;

        catch java.lang.CloneNotSupportedException from label05 to label08 with label10;
        catch java.lang.Throwable from label05 to label12 with label12;
    }

    protected void countProximityPosition(int)
    {
        org.apache.xpath.axes.OneStepIterator r0;
        int[] $r1, $r2;
        int i0, $i1, $i2, $i3;
        boolean $z0;

        r0 := @this: org.apache.xpath.axes.OneStepIterator;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<org.apache.xpath.axes.OneStepIterator: boolean isReverseAxes()>();

        if $z0 != 0 goto label1;

        specialinvoke r0.<org.apache.xpath.axes.PredicatedNodeTest: void countProximityPosition(int)>(i0);

        goto label2;

     label1:
        $r1 = r0.<org.apache.xpath.axes.PredicatedNodeTest: int[] m_proximityPositions>;

        $i1 = lengthof $r1;

        if i0 >= $i1 goto label2;

        $r2 = r0.<org.apache.xpath.axes.PredicatedNodeTest: int[] m_proximityPositions>;

        $i2 = $r2[i0];

        $i3 = $i2 - 1;

        $r2[i0] = $i3;

     label2:
        return;
    }

    public void reset()
    {
        org.apache.xpath.axes.OneStepIterator r0;
        org.apache.xml.dtm.DTMAxisIterator $r1, $r2;

        r0 := @this: org.apache.xpath.axes.OneStepIterator;

        specialinvoke r0.<org.apache.xpath.axes.LocPathIterator: void reset()>();

        $r1 = r0.<org.apache.xpath.axes.OneStepIterator: org.apache.xml.dtm.DTMAxisIterator m_iterator>;

        if null == $r1 goto label1;

        $r2 = r0.<org.apache.xpath.axes.OneStepIterator: org.apache.xml.dtm.DTMAxisIterator m_iterator>;

        interfaceinvoke $r2.<org.apache.xml.dtm.DTMAxisIterator: org.apache.xml.dtm.DTMAxisIterator reset()>();

     label1:
        return;
    }

    public int getAxis()
    {
        int $i0;
        org.apache.xpath.axes.OneStepIterator r0;

        r0 := @this: org.apache.xpath.axes.OneStepIterator;

        $i0 = r0.<org.apache.xpath.axes.OneStepIterator: int m_axis>;

        return $i0;
    }

    public boolean deepEquals(org.apache.xpath.Expression)
    {
        org.apache.xpath.Expression r1;
        org.apache.xpath.axes.OneStepIterator r0, $r2;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.xpath.axes.OneStepIterator;

        r1 := @parameter0: org.apache.xpath.Expression;

        $z0 = specialinvoke r0.<org.apache.xpath.axes.PredicatedNodeTest: boolean deepEquals(org.apache.xpath.Expression)>(r1);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $i1 = r0.<org.apache.xpath.axes.OneStepIterator: int m_axis>;

        $r2 = (org.apache.xpath.axes.OneStepIterator) r1;

        $i0 = $r2.<org.apache.xpath.axes.OneStepIterator: int m_axis>;

        if $i1 == $i0 goto label2;

        return 0;

     label2:
        return 1;
    }
}
