class com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl extends com.sun.xml.bind.v2.model.impl.ERPropertyInfoImpl implements com.sun.xml.bind.v2.model.core.ReferencePropertyInfo, com.sun.xml.bind.v2.model.impl.DummyPropertyInfo
{
    private java.util.Set types;
    private java.util.Set subTypes;
    private final boolean isMixed;
    private final com.sun.xml.bind.v2.model.core.WildcardMode wildcard;
    private final java.lang.Object domHandler;
    private java.lang.Boolean isRequired;
    private static boolean is2_2;
    static final boolean $assertionsDisabled;

    public void <init>(com.sun.xml.bind.v2.model.impl.ClassInfoImpl, com.sun.xml.bind.v2.model.impl.PropertySeed)
    {
        com.sun.xml.bind.v2.model.impl.PropertySeed r2;
        javax.xml.bind.'annotation'.XmlAnyElement $r10;
        com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl r0;
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl r1;
        com.sun.xml.bind.v2.model.'annotation'.AnnotationReader $r7;
        java.lang.'annotation'.Annotation $r4, $r5;
        com.sun.xml.bind.v2.model.core.WildcardMode $r11;
        java.lang.Object $r8, $r9;
        java.util.LinkedHashSet $r3;
        com.sun.xml.bind.v2.model.nav.Navigator $r6;
        boolean $z0, $z1;

        r0 := @this: com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl;

        r1 := @parameter0: com.sun.xml.bind.v2.model.impl.ClassInfoImpl;

        r2 := @parameter1: com.sun.xml.bind.v2.model.impl.PropertySeed;

        specialinvoke r0.<com.sun.xml.bind.v2.model.impl.ERPropertyInfoImpl: void <init>(com.sun.xml.bind.v2.model.impl.ClassInfoImpl,com.sun.xml.bind.v2.model.impl.PropertySeed)>(r1, r2);

        $r3 = new java.util.LinkedHashSet;

        specialinvoke $r3.<java.util.LinkedHashSet: void <init>()>();

        r0.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: java.util.Set subTypes> = $r3;

        $r4 = interfaceinvoke r2.<com.sun.xml.bind.v2.model.impl.PropertySeed: java.lang.'annotation'.Annotation readAnnotation(java.lang.Class)>(class "Ljavax/xml/bind/annotation/XmlMixed;");

        if $r4 == null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        r0.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: boolean isMixed> = $z1;

        $r5 = interfaceinvoke r2.<com.sun.xml.bind.v2.model.impl.PropertySeed: java.lang.'annotation'.Annotation readAnnotation(java.lang.Class)>(class "Ljavax/xml/bind/annotation/XmlAnyElement;");

        $r10 = (javax.xml.bind.'annotation'.XmlAnyElement) $r5;

        if $r10 != null goto label3;

        r0.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: com.sun.xml.bind.v2.model.core.WildcardMode wildcard> = null;

        r0.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: java.lang.Object domHandler> = null;

        goto label6;

     label3:
        $z0 = interfaceinvoke $r10.<javax.xml.bind.'annotation'.XmlAnyElement: boolean lax()>();

        if $z0 == 0 goto label4;

        $r11 = <com.sun.xml.bind.v2.model.core.WildcardMode: com.sun.xml.bind.v2.model.core.WildcardMode LAX>;

        goto label5;

     label4:
        $r11 = <com.sun.xml.bind.v2.model.core.WildcardMode: com.sun.xml.bind.v2.model.core.WildcardMode SKIP>;

     label5:
        r0.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: com.sun.xml.bind.v2.model.core.WildcardMode wildcard> = $r11;

        $r6 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r7 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: com.sun.xml.bind.v2.model.'annotation'.AnnotationReader reader()>();

        $r8 = interfaceinvoke $r7.<com.sun.xml.bind.v2.model.'annotation'.AnnotationReader: java.lang.Object getClassValue(java.lang.'annotation'.Annotation,java.lang.String)>($r10, "value");

        $r9 = interfaceinvoke $r6.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.Object asDecl(java.lang.Object)>($r8);

        r0.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: java.lang.Object domHandler> = $r9;

     label6:
        return;
    }

    public java.util.Set ref()
    {
        java.util.Set $r1;
        com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl r0;

        r0 := @this: com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl;

        $r1 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: java.util.Set getElements()>();

        return $r1;
    }

    public com.sun.xml.bind.v2.model.core.PropertyKind kind()
    {
        com.sun.xml.bind.v2.model.core.PropertyKind $r0;
        com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl r1;

        r1 := @this: com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl;

        $r0 = <com.sun.xml.bind.v2.model.core.PropertyKind: com.sun.xml.bind.v2.model.core.PropertyKind REFERENCE>;

        return $r0;
    }

    public java.util.Set getElements()
    {
        com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl r0;
        java.util.Set $r1, $r2, $r3;
        java.lang.AssertionError $r4;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl;

        $r1 = r0.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: java.util.Set types>;

        if $r1 != null goto label1;

        specialinvoke r0.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: void calcTypes(boolean)>(0);

     label1:
        $z0 = <com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $r3 = r0.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: java.util.Set types>;

        if $r3 != null goto label2;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label2:
        $r2 = r0.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: java.util.Set types>;

        return $r2;
    }

    private void calcTypes(boolean)
    {
        com.sun.xml.bind.v2.model.impl.PropertySeed $r2, $r4, $r52, $r100, r116;
        java.lang.StringBuilder $r43, $r50, $r51, $r54, $r91, $r98, $r99, $r102;
        java.lang.Object[] $r26, $r32, $r42, $r73, $r79, $r90;
        javax.xml.bind.'annotation'.XmlElementRef r18, r110, r113, r118;
        com.sun.xml.bind.v2.model.'annotation'.AnnotationReader $r15, $r62;
        com.sun.xml.bind.v2.model.impl.Messages $r27, $r34, $r45, $r74, $r81, $r93;
        javax.xml.bind.'annotation'.XmlElementRefs r109, r117;
        java.lang.'annotation'.Annotation $r3, $r5, $r12, $r13;
        com.sun.xml.bind.v2.runtime.IllegalAnnotationException $r25, $r31, $r41, $r72, $r78, $r89;
        int i0, i1, i2, i3;
        java.lang.Boolean $r6, $r68, $r85;
        java.lang.Object $r11, $r16, $r17, $r19, $r21, $r23, $r38, $r48, $r63, $r64, $r65, $r67, $r70, $r86, $r96, r114, r121;
        java.lang.Class $r56, $r58, $r104, $r106;
        java.util.Set $r7, $r9, $r10;
        java.lang.String $r29, $r35, $r36, $r37, $r49, $r53, $r55, $r57, $r59, $r60, $r76, $r82, $r83, $r84, $r97, $r101, $r103, $r105, $r107, $r108;
        java.util.LinkedHashSet $r1;
        com.sun.xml.bind.v2.model.impl.ModelBuilder $r28, $r33, $r44, $r75, $r80, $r92;
        com.sun.xml.bind.v2.model.nav.Navigator $r14, $r20, $r22, $r46, $r61, $r66, $r69, $r94;
        javax.xml.bind.'annotation'.XmlElementRef[] $r39, $r87, r111, r112, r119, r120;
        boolean $z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, z9, $z10, z11;
        com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl r0, r115;
        java.util.Iterator $r8;
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl $r24, $r30, $r40, $r47, $r71, $r77, $r88, $r95;

        r0 := @this: com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl;

        z1 := @parameter0: boolean;

        $r1 = new java.util.LinkedHashSet;

        specialinvoke $r1.<java.util.LinkedHashSet: void <init>()>();

        r0.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: java.util.Set types> = $r1;

        $r2 = r0.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: com.sun.xml.bind.v2.model.impl.PropertySeed seed>;

        $r3 = interfaceinvoke $r2.<com.sun.xml.bind.v2.model.impl.PropertySeed: java.lang.'annotation'.Annotation readAnnotation(java.lang.Class)>(class "Ljavax/xml/bind/annotation/XmlElementRefs;");

        r109 = (javax.xml.bind.'annotation'.XmlElementRefs) $r3;

        $r4 = r0.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: com.sun.xml.bind.v2.model.impl.PropertySeed seed>;

        $r5 = interfaceinvoke $r4.<com.sun.xml.bind.v2.model.impl.PropertySeed: java.lang.'annotation'.Annotation readAnnotation(java.lang.Class)>(class "Ljavax/xml/bind/annotation/XmlElementRef;");

        r110 = (javax.xml.bind.'annotation'.XmlElementRef) $r5;

        if r109 == null goto label01;

        if r110 == null goto label01;

        $r88 = r0.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: com.sun.xml.bind.v2.model.impl.ClassInfoImpl parent>;

        $r92 = $r88.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.ModelBuilder builder>;

        $r89 = new com.sun.xml.bind.v2.runtime.IllegalAnnotationException;

        $r93 = <com.sun.xml.bind.v2.model.impl.Messages: com.sun.xml.bind.v2.model.impl.Messages MUTUALLY_EXCLUSIVE_ANNOTATIONS>;

        $r90 = newarray (java.lang.Object)[3];

        $r91 = new java.lang.StringBuilder;

        specialinvoke $r91.<java.lang.StringBuilder: void <init>()>();

        $r94 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r95 = r0.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: com.sun.xml.bind.v2.model.impl.ClassInfoImpl parent>;

        $r96 = virtualinvoke $r95.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: java.lang.Object getClazz()>();

        $r97 = interfaceinvoke $r94.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.String getClassName(java.lang.Object)>($r96);

        $r98 = virtualinvoke $r91.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r97);

        $r99 = virtualinvoke $r98.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(35);

        $r100 = r0.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: com.sun.xml.bind.v2.model.impl.PropertySeed seed>;

        $r101 = interfaceinvoke $r100.<com.sun.xml.bind.v2.model.impl.PropertySeed: java.lang.String getName()>();

        $r102 = virtualinvoke $r99.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r101);

        $r103 = virtualinvoke $r102.<java.lang.StringBuilder: java.lang.String toString()>();

        $r90[0] = $r103;

        $r104 = interfaceinvoke r110.<javax.xml.bind.'annotation'.XmlElementRef: java.lang.Class annotationType()>();

        $r105 = virtualinvoke $r104.<java.lang.Class: java.lang.String getName()>();

        $r90[1] = $r105;

        $r106 = interfaceinvoke r109.<javax.xml.bind.'annotation'.XmlElementRefs: java.lang.Class annotationType()>();

        $r107 = virtualinvoke $r106.<java.lang.Class: java.lang.String getName()>();

        $r90[2] = $r107;

        $r108 = virtualinvoke $r93.<com.sun.xml.bind.v2.model.impl.Messages: java.lang.String format(java.lang.Object[])>($r90);

        specialinvoke $r89.<com.sun.xml.bind.v2.runtime.IllegalAnnotationException: void <init>(java.lang.String,java.lang.'annotation'.Annotation,java.lang.'annotation'.Annotation)>($r108, r110, r109);

        virtualinvoke $r92.<com.sun.xml.bind.v2.model.impl.ModelBuilder: void reportError(com.sun.xml.bind.v2.runtime.IllegalAnnotationException)>($r89);

     label01:
        if r109 == null goto label02;

        r111 = interfaceinvoke r109.<javax.xml.bind.'annotation'.XmlElementRefs: javax.xml.bind.'annotation'.XmlElementRef[] value()>();

        goto label04;

     label02:
        if r110 == null goto label03;

        $r87 = newarray (javax.xml.bind.'annotation'.XmlElementRef)[1];

        $r87[0] = r110;

        r111 = $r87;

        goto label04;

     label03:
        r111 = null;

     label04:
        $z7 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: boolean isCollection()>();

        if $z7 != 0 goto label05;

        $z8 = 1;

        goto label06;

     label05:
        $z8 = 0;

     label06:
        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z8);

        r0.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: java.lang.Boolean isRequired> = $r6;

        if r111 == null goto label15;

        $r61 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r62 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: com.sun.xml.bind.v2.model.'annotation'.AnnotationReader reader()>();

        $r63 = interfaceinvoke $r61.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.Object ref(java.lang.Class)>(class "Ljavax/xml/bind/annotation/XmlElementRef$DEFAULT;");

        $r64 = interfaceinvoke $r61.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.Object asDecl(java.lang.Class)>(class "Ljavax/xml/bind/JAXBElement;");

        r112 = r111;

        i0 = lengthof r111;

        i1 = 0;

     label07:
        if i1 >= i0 goto label15;

        r113 = r112[i1];

        $r65 = interfaceinvoke $r62.<com.sun.xml.bind.v2.model.'annotation'.AnnotationReader: java.lang.Object getClassValue(java.lang.'annotation'.Annotation,java.lang.String)>(r113, "type");

        r114 = $r65;

        $r66 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $z3 = interfaceinvoke $r66.<com.sun.xml.bind.v2.model.nav.Navigator: boolean isSameType(java.lang.Object,java.lang.Object)>($r65, $r63);

        if $z3 == 0 goto label08;

        $r86 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: java.lang.Object getIndividualType()>();

        r114 = interfaceinvoke $r61.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.Object erasure(java.lang.Object)>($r86);

     label08:
        $r67 = interfaceinvoke $r61.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.Object getBaseClass(java.lang.Object,java.lang.Object)>(r114, $r64);

        if $r67 == null goto label09;

        z9 = specialinvoke r0.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: boolean addGenericElement(javax.xml.bind.'annotation'.XmlElementRef)>(r113);

        goto label10;

     label09:
        z9 = specialinvoke r0.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: boolean addAllSubtypes(java.lang.Object)>(r114);

     label10:
        $r68 = r0.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: java.lang.Boolean isRequired>;

        $z4 = virtualinvoke $r68.<java.lang.Boolean: boolean booleanValue()>();

        if $z4 == 0 goto label11;

        $z6 = specialinvoke r0.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: boolean isRequired(javax.xml.bind.'annotation'.XmlElementRef)>(r113);

        if $z6 != 0 goto label11;

        $r85 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        r0.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: java.lang.Boolean isRequired> = $r85;

     label11:
        if z1 == 0 goto label14;

        if z9 != 0 goto label14;

        $r69 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r70 = interfaceinvoke $r61.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.Object ref(java.lang.Class)>(class "Ljavax/xml/bind/JAXBElement;");

        $z5 = interfaceinvoke $r69.<com.sun.xml.bind.v2.model.nav.Navigator: boolean isSameType(java.lang.Object,java.lang.Object)>(r114, $r70);

        if $z5 == 0 goto label12;

        $r77 = r0.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: com.sun.xml.bind.v2.model.impl.ClassInfoImpl parent>;

        $r80 = $r77.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.ModelBuilder builder>;

        $r78 = new com.sun.xml.bind.v2.runtime.IllegalAnnotationException;

        $r81 = <com.sun.xml.bind.v2.model.impl.Messages: com.sun.xml.bind.v2.model.impl.Messages NO_XML_ELEMENT_DECL>;

        $r79 = newarray (java.lang.Object)[2];

        $r82 = specialinvoke r0.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: java.lang.String getEffectiveNamespaceFor(javax.xml.bind.'annotation'.XmlElementRef)>(r113);

        $r79[0] = $r82;

        $r83 = interfaceinvoke r113.<javax.xml.bind.'annotation'.XmlElementRef: java.lang.String name()>();

        $r79[1] = $r83;

        $r84 = virtualinvoke $r81.<com.sun.xml.bind.v2.model.impl.Messages: java.lang.String format(java.lang.Object[])>($r79);

        specialinvoke $r78.<com.sun.xml.bind.v2.runtime.IllegalAnnotationException: void <init>(java.lang.String,com.sun.xml.bind.v2.model.'annotation'.Locatable)>($r84, r0);

        virtualinvoke $r80.<com.sun.xml.bind.v2.model.impl.ModelBuilder: void reportError(com.sun.xml.bind.v2.runtime.IllegalAnnotationException)>($r78);

        goto label13;

     label12:
        $r71 = r0.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: com.sun.xml.bind.v2.model.impl.ClassInfoImpl parent>;

        $r75 = $r71.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.ModelBuilder builder>;

        $r72 = new com.sun.xml.bind.v2.runtime.IllegalAnnotationException;

        $r74 = <com.sun.xml.bind.v2.model.impl.Messages: com.sun.xml.bind.v2.model.impl.Messages INVALID_XML_ELEMENT_REF>;

        $r73 = newarray (java.lang.Object)[1];

        $r73[0] = r114;

        $r76 = virtualinvoke $r74.<com.sun.xml.bind.v2.model.impl.Messages: java.lang.String format(java.lang.Object[])>($r73);

        specialinvoke $r72.<com.sun.xml.bind.v2.runtime.IllegalAnnotationException: void <init>(java.lang.String,com.sun.xml.bind.v2.model.'annotation'.Locatable)>($r76, r0);

        virtualinvoke $r75.<com.sun.xml.bind.v2.model.impl.ModelBuilder: void reportError(com.sun.xml.bind.v2.runtime.IllegalAnnotationException)>($r72);

     label13:
        return;

     label14:
        i1 = i1 + 1;

        goto label07;

     label15:
        $r7 = r0.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: java.util.Set subTypes>;

        $r8 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label16:
        $z10 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z10 == 0 goto label29;

        $r11 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r115 = (com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl) $r11;

        r116 = r115.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: com.sun.xml.bind.v2.model.impl.PropertySeed seed>;

        $r12 = interfaceinvoke r116.<com.sun.xml.bind.v2.model.impl.PropertySeed: java.lang.'annotation'.Annotation readAnnotation(java.lang.Class)>(class "Ljavax/xml/bind/annotation/XmlElementRefs;");

        r117 = (javax.xml.bind.'annotation'.XmlElementRefs) $r12;

        $r13 = interfaceinvoke r116.<com.sun.xml.bind.v2.model.impl.PropertySeed: java.lang.'annotation'.Annotation readAnnotation(java.lang.Class)>(class "Ljavax/xml/bind/annotation/XmlElementRef;");

        r118 = (javax.xml.bind.'annotation'.XmlElementRef) $r13;

        if r117 == null goto label17;

        if r118 == null goto label17;

        $r40 = r0.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: com.sun.xml.bind.v2.model.impl.ClassInfoImpl parent>;

        $r44 = $r40.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.ModelBuilder builder>;

        $r41 = new com.sun.xml.bind.v2.runtime.IllegalAnnotationException;

        $r45 = <com.sun.xml.bind.v2.model.impl.Messages: com.sun.xml.bind.v2.model.impl.Messages MUTUALLY_EXCLUSIVE_ANNOTATIONS>;

        $r42 = newarray (java.lang.Object)[3];

        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        $r46 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r47 = r0.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: com.sun.xml.bind.v2.model.impl.ClassInfoImpl parent>;

        $r48 = virtualinvoke $r47.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: java.lang.Object getClazz()>();

        $r49 = interfaceinvoke $r46.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.String getClassName(java.lang.Object)>($r48);

        $r50 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r49);

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(35);

        $r52 = r0.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: com.sun.xml.bind.v2.model.impl.PropertySeed seed>;

        $r53 = interfaceinvoke $r52.<com.sun.xml.bind.v2.model.impl.PropertySeed: java.lang.String getName()>();

        $r54 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r53);

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.String toString()>();

        $r42[0] = $r55;

        $r56 = interfaceinvoke r118.<javax.xml.bind.'annotation'.XmlElementRef: java.lang.Class annotationType()>();

        $r57 = virtualinvoke $r56.<java.lang.Class: java.lang.String getName()>();

        $r42[1] = $r57;

        $r58 = interfaceinvoke r117.<javax.xml.bind.'annotation'.XmlElementRefs: java.lang.Class annotationType()>();

        $r59 = virtualinvoke $r58.<java.lang.Class: java.lang.String getName()>();

        $r42[2] = $r59;

        $r60 = virtualinvoke $r45.<com.sun.xml.bind.v2.model.impl.Messages: java.lang.String format(java.lang.Object[])>($r42);

        specialinvoke $r41.<com.sun.xml.bind.v2.runtime.IllegalAnnotationException: void <init>(java.lang.String,java.lang.'annotation'.Annotation,java.lang.'annotation'.Annotation)>($r60, r118, r117);

        virtualinvoke $r44.<com.sun.xml.bind.v2.model.impl.ModelBuilder: void reportError(com.sun.xml.bind.v2.runtime.IllegalAnnotationException)>($r41);

     label17:
        if r117 == null goto label18;

        r119 = interfaceinvoke r117.<javax.xml.bind.'annotation'.XmlElementRefs: javax.xml.bind.'annotation'.XmlElementRef[] value()>();

        goto label20;

     label18:
        if r118 == null goto label19;

        $r39 = newarray (javax.xml.bind.'annotation'.XmlElementRef)[1];

        $r39[0] = r118;

        r119 = $r39;

        goto label20;

     label19:
        r119 = null;

     label20:
        if r119 == null goto label28;

        $r14 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r15 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: com.sun.xml.bind.v2.model.'annotation'.AnnotationReader reader()>();

        $r16 = interfaceinvoke $r14.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.Object ref(java.lang.Class)>(class "Ljavax/xml/bind/annotation/XmlElementRef$DEFAULT;");

        $r17 = interfaceinvoke $r14.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.Object asDecl(java.lang.Class)>(class "Ljavax/xml/bind/JAXBElement;");

        r120 = r119;

        i2 = lengthof r119;

        i3 = 0;

     label21:
        if i3 >= i2 goto label28;

        r18 = r120[i3];

        $r19 = interfaceinvoke $r15.<com.sun.xml.bind.v2.model.'annotation'.AnnotationReader: java.lang.Object getClassValue(java.lang.'annotation'.Annotation,java.lang.String)>(r18, "type");

        r121 = $r19;

        $r20 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $z0 = interfaceinvoke $r20.<com.sun.xml.bind.v2.model.nav.Navigator: boolean isSameType(java.lang.Object,java.lang.Object)>($r19, $r16);

        if $z0 == 0 goto label22;

        $r38 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: java.lang.Object getIndividualType()>();

        r121 = interfaceinvoke $r14.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.Object erasure(java.lang.Object)>($r38);

     label22:
        $r21 = interfaceinvoke $r14.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.Object getBaseClass(java.lang.Object,java.lang.Object)>(r121, $r17);

        if $r21 == null goto label23;

        z11 = specialinvoke r0.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: boolean addGenericElement(javax.xml.bind.'annotation'.XmlElementRef,com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl)>(r18, r115);

        goto label24;

     label23:
        z11 = specialinvoke r0.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: boolean addAllSubtypes(java.lang.Object)>(r121);

     label24:
        if z1 == 0 goto label27;

        if z11 != 0 goto label27;

        $r22 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r23 = interfaceinvoke $r14.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.Object ref(java.lang.Class)>(class "Ljavax/xml/bind/JAXBElement;");

        $z2 = interfaceinvoke $r22.<com.sun.xml.bind.v2.model.nav.Navigator: boolean isSameType(java.lang.Object,java.lang.Object)>(r121, $r23);

        if $z2 == 0 goto label25;

        $r30 = r0.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: com.sun.xml.bind.v2.model.impl.ClassInfoImpl parent>;

        $r33 = $r30.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.ModelBuilder builder>;

        $r31 = new com.sun.xml.bind.v2.runtime.IllegalAnnotationException;

        $r34 = <com.sun.xml.bind.v2.model.impl.Messages: com.sun.xml.bind.v2.model.impl.Messages NO_XML_ELEMENT_DECL>;

        $r32 = newarray (java.lang.Object)[2];

        $r35 = specialinvoke r0.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: java.lang.String getEffectiveNamespaceFor(javax.xml.bind.'annotation'.XmlElementRef)>(r18);

        $r32[0] = $r35;

        $r36 = interfaceinvoke r18.<javax.xml.bind.'annotation'.XmlElementRef: java.lang.String name()>();

        $r32[1] = $r36;

        $r37 = virtualinvoke $r34.<com.sun.xml.bind.v2.model.impl.Messages: java.lang.String format(java.lang.Object[])>($r32);

        specialinvoke $r31.<com.sun.xml.bind.v2.runtime.IllegalAnnotationException: void <init>(java.lang.String,com.sun.xml.bind.v2.model.'annotation'.Locatable)>($r37, r0);

        virtualinvoke $r33.<com.sun.xml.bind.v2.model.impl.ModelBuilder: void reportError(com.sun.xml.bind.v2.runtime.IllegalAnnotationException)>($r31);

        goto label26;

     label25:
        $r24 = r0.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: com.sun.xml.bind.v2.model.impl.ClassInfoImpl parent>;

        $r28 = $r24.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.ModelBuilder builder>;

        $r25 = new com.sun.xml.bind.v2.runtime.IllegalAnnotationException;

        $r27 = <com.sun.xml.bind.v2.model.impl.Messages: com.sun.xml.bind.v2.model.impl.Messages INVALID_XML_ELEMENT_REF>;

        $r26 = newarray (java.lang.Object)[0];

        $r29 = virtualinvoke $r27.<com.sun.xml.bind.v2.model.impl.Messages: java.lang.String format(java.lang.Object[])>($r26);

        specialinvoke $r25.<com.sun.xml.bind.v2.runtime.IllegalAnnotationException: void <init>(java.lang.String,com.sun.xml.bind.v2.model.'annotation'.Locatable)>($r29, r0);

        virtualinvoke $r28.<com.sun.xml.bind.v2.model.impl.ModelBuilder: void reportError(com.sun.xml.bind.v2.runtime.IllegalAnnotationException)>($r25);

     label26:
        return;

     label27:
        i3 = i3 + 1;

        goto label21;

     label28:
        goto label16;

     label29:
        $r9 = r0.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: java.util.Set types>;

        $r10 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r9);

        r0.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: java.util.Set types> = $r10;

        return;
    }

    public boolean isRequired()
    {
        com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl r0;
        java.lang.Boolean $r1, $r2;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl;

        $r1 = r0.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: java.lang.Boolean isRequired>;

        if $r1 != null goto label1;

        specialinvoke r0.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: void calcTypes(boolean)>(0);

     label1:
        $r2 = r0.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: java.lang.Boolean isRequired>;

        $z0 = virtualinvoke $r2.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    private boolean isRequired(javax.xml.bind.'annotation'.XmlElementRef)
    {
        java.lang.LinkageError $r1;
        com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl r2;
        javax.xml.bind.'annotation'.XmlElementRef r0;
        boolean $z0, $z1;

        r2 := @this: com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl;

        r0 := @parameter0: javax.xml.bind.'annotation'.XmlElementRef;

        $z0 = <com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: boolean is2_2>;

        if $z0 != 0 goto label1;

        return 1;

     label1:
        $z1 = interfaceinvoke r0.<javax.xml.bind.'annotation'.XmlElementRef: boolean required()>();

     label2:
        return $z1;

     label3:
        $r1 := @caughtexception;

        <com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: boolean is2_2> = 0;

        return 1;

        catch java.lang.LinkageError from label1 to label2 with label3;
    }

    private boolean addGenericElement(javax.xml.bind.'annotation'.XmlElementRef)
    {
        com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl r0;
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl $r3, $r4;
        javax.xml.bind.'annotation'.XmlElementRef r1;
        com.sun.xml.bind.v2.model.impl.ElementInfoImpl $r9;
        java.lang.Object $r6;
        java.lang.String $r2, $r8;
        com.sun.xml.bind.v2.model.impl.TypeInfoSetImpl $r5;
        javax.xml.namespace.QName $r7;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl;

        r1 := @parameter0: javax.xml.bind.'annotation'.XmlElementRef;

        $r2 = specialinvoke r0.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: java.lang.String getEffectiveNamespaceFor(javax.xml.bind.'annotation'.XmlElementRef)>(r1);

        $r3 = r0.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: com.sun.xml.bind.v2.model.impl.ClassInfoImpl parent>;

        $r5 = $r3.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.TypeInfoSetImpl owner>;

        $r4 = r0.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: com.sun.xml.bind.v2.model.impl.ClassInfoImpl parent>;

        $r6 = virtualinvoke $r4.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: java.lang.Object getClazz()>();

        $r7 = new javax.xml.namespace.QName;

        $r8 = interfaceinvoke r1.<javax.xml.bind.'annotation'.XmlElementRef: java.lang.String name()>();

        specialinvoke $r7.<javax.xml.namespace.QName: void <init>(java.lang.String,java.lang.String)>($r2, $r8);

        $r9 = virtualinvoke $r5.<com.sun.xml.bind.v2.model.impl.TypeInfoSetImpl: com.sun.xml.bind.v2.model.impl.ElementInfoImpl getElementInfo(java.lang.Object,javax.xml.namespace.QName)>($r6, $r7);

        $z0 = specialinvoke r0.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: boolean addGenericElement(com.sun.xml.bind.v2.model.core.ElementInfo)>($r9);

        return $z0;
    }

    private boolean addGenericElement(javax.xml.bind.'annotation'.XmlElementRef, com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl)
    {
        com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl r0, r3;
        java.util.Set $r11;
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl $r4, $r5;
        javax.xml.bind.'annotation'.XmlElementRef r1;
        com.sun.xml.bind.v2.model.impl.ElementInfoImpl $r10;
        java.lang.Object $r7;
        java.lang.String $r2, $r9;
        com.sun.xml.bind.v2.model.impl.TypeInfoSetImpl $r6;
        javax.xml.namespace.QName $r8;

        r3 := @this: com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl;

        r1 := @parameter0: javax.xml.bind.'annotation'.XmlElementRef;

        r0 := @parameter1: com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl;

        $r2 = specialinvoke r0.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: java.lang.String getEffectiveNamespaceFor(javax.xml.bind.'annotation'.XmlElementRef)>(r1);

        $r4 = r3.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: com.sun.xml.bind.v2.model.impl.ClassInfoImpl parent>;

        $r6 = $r4.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.TypeInfoSetImpl owner>;

        $r5 = r0.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: com.sun.xml.bind.v2.model.impl.ClassInfoImpl parent>;

        $r7 = virtualinvoke $r5.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: java.lang.Object getClazz()>();

        $r8 = new javax.xml.namespace.QName;

        $r9 = interfaceinvoke r1.<javax.xml.bind.'annotation'.XmlElementRef: java.lang.String name()>();

        specialinvoke $r8.<javax.xml.namespace.QName: void <init>(java.lang.String,java.lang.String)>($r2, $r9);

        $r10 = virtualinvoke $r6.<com.sun.xml.bind.v2.model.impl.TypeInfoSetImpl: com.sun.xml.bind.v2.model.impl.ElementInfoImpl getElementInfo(java.lang.Object,javax.xml.namespace.QName)>($r7, $r8);

        $r11 = r3.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: java.util.Set types>;

        interfaceinvoke $r11.<java.util.Set: boolean add(java.lang.Object)>($r10);

        return 1;
    }

    private java.lang.String getEffectiveNamespaceFor(javax.xml.bind.'annotation'.XmlElementRef)
    {
        com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl r2;
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl $r4, $r10;
        javax.xml.bind.'annotation'.XmlElementRef r0;
        com.sun.xml.bind.v2.model.'annotation'.AnnotationReader $r3;
        javax.xml.bind.'annotation'.XmlNsForm $r8, $r9;
        java.lang.'annotation'.Annotation $r6;
        int $i0;
        java.lang.Object $r5;
        java.lang.String $r1, r12;
        javax.xml.bind.'annotation'.XmlSchema r7;
        com.sun.xml.bind.v2.model.impl.ModelBuilder $r11;

        r2 := @this: com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl;

        r0 := @parameter0: javax.xml.bind.'annotation'.XmlElementRef;

        $r1 = interfaceinvoke r0.<javax.xml.bind.'annotation'.XmlElementRef: java.lang.String namespace()>();

        r12 = $r1;

        $r3 = virtualinvoke r2.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: com.sun.xml.bind.v2.model.'annotation'.AnnotationReader reader()>();

        $r4 = r2.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: com.sun.xml.bind.v2.model.impl.ClassInfoImpl parent>;

        $r5 = virtualinvoke $r4.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: java.lang.Object getClazz()>();

        $r6 = interfaceinvoke $r3.<com.sun.xml.bind.v2.model.'annotation'.AnnotationReader: java.lang.'annotation'.Annotation getPackageAnnotation(java.lang.Class,java.lang.Object,com.sun.xml.bind.v2.model.'annotation'.Locatable)>(class "Ljavax/xml/bind/annotation/XmlSchema;", $r5, r2);

        r7 = (javax.xml.bind.'annotation'.XmlSchema) $r6;

        if r7 == null goto label1;

        $r8 = interfaceinvoke r7.<javax.xml.bind.'annotation'.XmlSchema: javax.xml.bind.'annotation'.XmlNsForm attributeFormDefault()>();

        $r9 = <javax.xml.bind.'annotation'.XmlNsForm: javax.xml.bind.'annotation'.XmlNsForm QUALIFIED>;

        if $r8 != $r9 goto label1;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        $r10 = r2.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: com.sun.xml.bind.v2.model.impl.ClassInfoImpl parent>;

        $r11 = $r10.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.ModelBuilder builder>;

        r12 = $r11.<com.sun.xml.bind.v2.model.impl.ModelBuilder: java.lang.String defaultNsUri>;

     label1:
        return r12;
    }

    private boolean addGenericElement(com.sun.xml.bind.v2.model.core.ElementInfo)
    {
        java.util.Iterator $r4;
        com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl r1;
        java.util.Collection $r3;
        java.util.Set $r2;
        com.sun.xml.bind.v2.model.core.ElementInfo r0, r6;
        java.lang.Object $r5;
        boolean $z0;

        r1 := @this: com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl;

        r0 := @parameter0: com.sun.xml.bind.v2.model.core.ElementInfo;

        if r0 != null goto label1;

        return 0;

     label1:
        $r2 = r1.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: java.util.Set types>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r0);

        $r3 = interfaceinvoke r0.<com.sun.xml.bind.v2.model.core.ElementInfo: java.util.Collection getSubstitutionMembers()>();

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.sun.xml.bind.v2.model.core.ElementInfo) $r5;

        specialinvoke r1.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: boolean addGenericElement(com.sun.xml.bind.v2.model.core.ElementInfo)>(r6);

        goto label2;

     label3:
        return 1;
    }

    private boolean addAllSubtypes(java.lang.Object)
    {
        com.sun.xml.bind.v2.model.core.Element $r24, $r26;
        java.util.Map $r10, $r15;
        com.sun.xml.bind.v2.model.impl.TypeInfoSetImpl $r9, $r14;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, z6, $z7;
        com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl r0;
        java.util.Collection $r11, $r16;
        com.sun.xml.bind.v2.model.core.NonElement $r6;
        java.util.Set $r20, $r23, $r25;
        com.sun.xml.bind.v2.model.core.ClassInfo r7;
        com.sun.xml.bind.v2.model.impl.ModelBuilder $r4;
        java.util.Iterator $r12, $r17;
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl $r2, $r8, $r13, r27;
        com.sun.xml.bind.v2.model.impl.ElementInfoImpl r28;
        java.lang.Object r3, $r5, $r18, $r19, $r21, $r22;
        com.sun.xml.bind.v2.model.nav.Navigator $r1;

        r0 := @this: com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl;

        r3 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r2 = r0.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: com.sun.xml.bind.v2.model.impl.ClassInfoImpl parent>;

        $r4 = $r2.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.ModelBuilder builder>;

        $r5 = interfaceinvoke $r1.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.Object asDecl(java.lang.Object)>(r3);

        $r6 = virtualinvoke $r4.<com.sun.xml.bind.v2.model.impl.ModelBuilder: com.sun.xml.bind.v2.model.core.NonElement getClassInfo(java.lang.Object,com.sun.xml.bind.v2.model.'annotation'.Locatable)>($r5, r0);

        $z0 = $r6 instanceof com.sun.xml.bind.v2.model.core.ClassInfo;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        z6 = 0;

        r7 = (com.sun.xml.bind.v2.model.core.ClassInfo) $r6;

        $z1 = interfaceinvoke r7.<com.sun.xml.bind.v2.model.core.ClassInfo: boolean isElement()>();

        if $z1 == 0 goto label2;

        $r25 = r0.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: java.util.Set types>;

        $r26 = interfaceinvoke r7.<com.sun.xml.bind.v2.model.core.ClassInfo: com.sun.xml.bind.v2.model.core.Element asElement()>();

        interfaceinvoke $r25.<java.util.Set: boolean add(java.lang.Object)>($r26);

        z6 = 1;

     label2:
        $r8 = r0.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: com.sun.xml.bind.v2.model.impl.ClassInfoImpl parent>;

        $r9 = $r8.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.TypeInfoSetImpl owner>;

        $r10 = virtualinvoke $r9.<com.sun.xml.bind.v2.model.impl.TypeInfoSetImpl: java.util.Map beans()>();

        $r11 = interfaceinvoke $r10.<java.util.Map: java.util.Collection values()>();

        $r12 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z7 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label5;

        $r21 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r27 = (com.sun.xml.bind.v2.model.impl.ClassInfoImpl) $r21;

        $z4 = interfaceinvoke r27.<com.sun.xml.bind.v2.model.core.ClassInfo: boolean isElement()>();

        if $z4 == 0 goto label4;

        $r22 = interfaceinvoke r27.<com.sun.xml.bind.v2.model.core.ClassInfo: java.lang.Object getType()>();

        $z5 = interfaceinvoke $r1.<com.sun.xml.bind.v2.model.nav.Navigator: boolean isSubClassOf(java.lang.Object,java.lang.Object)>($r22, r3);

        if $z5 == 0 goto label4;

        $r23 = r0.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: java.util.Set types>;

        $r24 = interfaceinvoke r27.<com.sun.xml.bind.v2.model.core.ClassInfo: com.sun.xml.bind.v2.model.core.Element asElement()>();

        interfaceinvoke $r23.<java.util.Set: boolean add(java.lang.Object)>($r24);

        z6 = 1;

     label4:
        goto label3;

     label5:
        $r13 = r0.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: com.sun.xml.bind.v2.model.impl.ClassInfoImpl parent>;

        $r14 = $r13.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.TypeInfoSetImpl owner>;

        $r15 = virtualinvoke $r14.<com.sun.xml.bind.v2.model.impl.TypeInfoSetImpl: java.util.Map getElementMappings(java.lang.Object)>(null);

        $r16 = interfaceinvoke $r15.<java.util.Map: java.util.Collection values()>();

        $r17 = interfaceinvoke $r16.<java.util.Collection: java.util.Iterator iterator()>();

     label6:
        $z2 = interfaceinvoke $r17.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label8;

        $r18 = interfaceinvoke $r17.<java.util.Iterator: java.lang.Object next()>();

        r28 = (com.sun.xml.bind.v2.model.impl.ElementInfoImpl) $r18;

        $r19 = interfaceinvoke r28.<com.sun.xml.bind.v2.model.core.ElementInfo: java.lang.Object getType()>();

        $z3 = interfaceinvoke $r1.<com.sun.xml.bind.v2.model.nav.Navigator: boolean isSubClassOf(java.lang.Object,java.lang.Object)>($r19, r3);

        if $z3 == 0 goto label7;

        $r20 = r0.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: java.util.Set types>;

        interfaceinvoke $r20.<java.util.Set: boolean add(java.lang.Object)>(r28);

        z6 = 1;

     label7:
        goto label6;

     label8:
        return z6;
    }

    protected void link()
    {
        com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl r0;

        r0 := @this: com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl;

        specialinvoke r0.<com.sun.xml.bind.v2.model.impl.ERPropertyInfoImpl: void link()>();

        specialinvoke r0.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: void calcTypes(boolean)>(1);

        return;
    }

    public final void addType(com.sun.xml.bind.v2.model.impl.PropertyInfoImpl)
    {
        com.sun.xml.bind.v2.model.impl.PropertyInfoImpl r1;
        java.util.Set $r2;
        com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl r0;

        r0 := @this: com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl;

        r1 := @parameter0: com.sun.xml.bind.v2.model.impl.PropertyInfoImpl;

        $r2 = r0.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: java.util.Set subTypes>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1);

        return;
    }

    public final boolean isMixed()
    {
        com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl r0;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl;

        $z0 = r0.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: boolean isMixed>;

        return $z0;
    }

    public final com.sun.xml.bind.v2.model.core.WildcardMode getWildcard()
    {
        com.sun.xml.bind.v2.model.core.WildcardMode $r1;
        com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl r0;

        r0 := @this: com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl;

        $r1 = r0.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: com.sun.xml.bind.v2.model.core.WildcardMode wildcard>;

        return $r1;
    }

    public final java.lang.Object getDOMHandler()
    {
        java.lang.Object $r1;
        com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl r0;

        r0 := @this: com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl;

        $r1 = r0.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: java.lang.Object domHandler>;

        return $r1;
    }

    public volatile java.util.Collection ref()
    {
        java.util.Set $r1;
        com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl r0;

        r0 := @this: com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl;

        $r1 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: java.util.Set ref()>();

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lcom/sun/xml/bind/v2/model/impl/ReferencePropertyInfoImpl;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: boolean $assertionsDisabled> = $z1;

        <com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: boolean is2_2> = 1;

        return;
    }
}
