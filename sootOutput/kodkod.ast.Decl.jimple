public final class kodkod.ast.Decl extends kodkod.ast.Decls
{
    private final kodkod.ast.Variable variable;
    private final kodkod.ast.operator.Multiplicity mult;
    private final kodkod.ast.Expression expression;

    void <init>(kodkod.ast.Variable, kodkod.ast.operator.Multiplicity, kodkod.ast.Expression)
    {
        kodkod.ast.operator.Multiplicity r1, $r2, $r5;
        int $i0, $i1, $i2;
        java.lang.String $r10, $r16;
        kodkod.ast.Decl r0;
        kodkod.ast.Expression r4;
        java.lang.IllegalArgumentException $r6, $r11, $r17;
        kodkod.ast.Variable r3;
        java.lang.StringBuilder $r7, $r8, $r9, $r12, $r13, $r14, $r15;

        r0 := @this: kodkod.ast.Decl;

        r3 := @parameter0: kodkod.ast.Variable;

        r1 := @parameter1: kodkod.ast.operator.Multiplicity;

        r4 := @parameter2: kodkod.ast.Expression;

        specialinvoke r0.<kodkod.ast.Decls: void <init>()>();

        $r2 = <kodkod.ast.operator.Multiplicity: kodkod.ast.operator.Multiplicity NO>;

        if r1 != $r2 goto label1;

        $r17 = new java.lang.IllegalArgumentException;

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("NO is not a valid multiplicity in a declaration.");

        throw $r17;

     label1:
        $i0 = virtualinvoke r3.<kodkod.ast.Variable: int arity()>();

        $i1 = virtualinvoke r4.<kodkod.ast.Expression: int arity()>();

        if $i0 == $i1 goto label2;

        $r11 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unmatched arities in a declaration: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r11;

     label2:
        $r5 = <kodkod.ast.operator.Multiplicity: kodkod.ast.operator.Multiplicity SET>;

        if r1 == $r5 goto label3;

        $i2 = virtualinvoke r4.<kodkod.ast.Expression: int arity()>();

        if $i2 <= 1 goto label3;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot use multiplicity ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with an expression of arity > 1.");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label3:
        r0.<kodkod.ast.Decl: kodkod.ast.Variable variable> = r3;

        r0.<kodkod.ast.Decl: kodkod.ast.operator.Multiplicity mult> = r1;

        r0.<kodkod.ast.Decl: kodkod.ast.Expression expression> = r4;

        return;
    }

    public kodkod.ast.Variable variable()
    {
        kodkod.ast.Decl r0;
        kodkod.ast.Variable $r1;

        r0 := @this: kodkod.ast.Decl;

        $r1 = r0.<kodkod.ast.Decl: kodkod.ast.Variable variable>;

        return $r1;
    }

    public kodkod.ast.operator.Multiplicity multiplicity()
    {
        kodkod.ast.Decl r0;
        kodkod.ast.operator.Multiplicity $r1;

        r0 := @this: kodkod.ast.Decl;

        $r1 = r0.<kodkod.ast.Decl: kodkod.ast.operator.Multiplicity mult>;

        return $r1;
    }

    public kodkod.ast.Expression expression()
    {
        kodkod.ast.Decl r0;
        kodkod.ast.Expression $r1;

        r0 := @this: kodkod.ast.Decl;

        $r1 = r0.<kodkod.ast.Decl: kodkod.ast.Expression expression>;

        return $r1;
    }

    public java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)
    {
        kodkod.ast.Decl r1;
        java.lang.Object $r2;
        kodkod.ast.visitor.ReturnVisitor r0;

        r1 := @this: kodkod.ast.Decl;

        r0 := @parameter0: kodkod.ast.visitor.ReturnVisitor;

        $r2 = interfaceinvoke r0.<kodkod.ast.visitor.ReturnVisitor: java.lang.Object visit(kodkod.ast.Decl)>(r1);

        return $r2;
    }

    public void accept(kodkod.ast.visitor.VoidVisitor)
    {
        kodkod.ast.Decl r1;
        kodkod.ast.visitor.VoidVisitor r0;

        r1 := @this: kodkod.ast.Decl;

        r0 := @parameter0: kodkod.ast.visitor.VoidVisitor;

        interfaceinvoke r0.<kodkod.ast.visitor.VoidVisitor: void visit(kodkod.ast.Decl)>(r1);

        return;
    }

    public java.lang.String toString()
    {
        kodkod.ast.operator.Multiplicity $r5;
        kodkod.ast.Decl r1;
        kodkod.ast.Expression $r8;
        kodkod.ast.Variable $r2;
        java.lang.StringBuilder $r0, $r3, $r4, $r6, $r7, $r9;
        java.lang.String $r10;

        r1 := @this: kodkod.ast.Decl;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = r1.<kodkod.ast.Decl: kodkod.ast.Variable variable>;

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r5 = r1.<kodkod.ast.Decl: kodkod.ast.operator.Multiplicity mult>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r8 = r1.<kodkod.ast.Decl: kodkod.ast.Expression expression>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }
}
