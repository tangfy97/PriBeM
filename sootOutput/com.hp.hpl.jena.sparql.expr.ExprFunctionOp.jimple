public abstract class com.hp.hpl.jena.sparql.expr.ExprFunctionOp extends com.hp.hpl.jena.sparql.expr.ExprFunction
{
    private final com.hp.hpl.jena.sparql.algebra.Op op;
    private com.hp.hpl.jena.sparql.algebra.Op opRun;
    private final com.hp.hpl.jena.sparql.syntax.Element element;

    protected void <init>(java.lang.String, com.hp.hpl.jena.sparql.syntax.Element, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.expr.ExprFunctionOp r0;
        com.hp.hpl.jena.sparql.syntax.Element r3;
        java.lang.String r1;
        com.hp.hpl.jena.sparql.algebra.Op r2;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprFunctionOp;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: com.hp.hpl.jena.sparql.syntax.Element;

        r2 := @parameter2: com.hp.hpl.jena.sparql.algebra.Op;

        specialinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprFunction: void <init>(java.lang.String)>(r1);

        r0.<com.hp.hpl.jena.sparql.expr.ExprFunctionOp: com.hp.hpl.jena.sparql.algebra.Op opRun> = null;

        r0.<com.hp.hpl.jena.sparql.expr.ExprFunctionOp: com.hp.hpl.jena.sparql.algebra.Op op> = r2;

        r0.<com.hp.hpl.jena.sparql.expr.ExprFunctionOp: com.hp.hpl.jena.sparql.syntax.Element element> = r3;

        return;
    }

    public com.hp.hpl.jena.sparql.expr.Expr getArg(int)
    {
        com.hp.hpl.jena.sparql.expr.ExprFunctionOp r0;
        int i0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprFunctionOp;

        i0 := @parameter0: int;

        return null;
    }

    public boolean isGraphPattern()
    {
        com.hp.hpl.jena.sparql.expr.ExprFunctionOp r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprFunctionOp;

        return 1;
    }

    public com.hp.hpl.jena.sparql.algebra.Op getGraphPattern()
    {
        com.hp.hpl.jena.sparql.expr.ExprFunctionOp r0;
        com.hp.hpl.jena.sparql.algebra.Op $r1;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprFunctionOp;

        $r1 = r0.<com.hp.hpl.jena.sparql.expr.ExprFunctionOp: com.hp.hpl.jena.sparql.algebra.Op op>;

        return $r1;
    }

    public com.hp.hpl.jena.sparql.syntax.Element getElement()
    {
        com.hp.hpl.jena.sparql.expr.ExprFunctionOp r0;
        com.hp.hpl.jena.sparql.syntax.Element $r1;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprFunctionOp;

        $r1 = r0.<com.hp.hpl.jena.sparql.expr.ExprFunctionOp: com.hp.hpl.jena.sparql.syntax.Element element>;

        return $r1;
    }

    public int numArgs()
    {
        com.hp.hpl.jena.sparql.expr.ExprFunctionOp r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprFunctionOp;

        return 0;
    }

    public final com.hp.hpl.jena.sparql.expr.NodeValue eval(com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.sparql.function.FunctionEnv)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue $r13;
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterSingleton $r8;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r4;
        com.hp.hpl.jena.sparql.util.Context $r2, $r5;
        com.hp.hpl.jena.sparql.expr.ExprFunctionOp r9;
        com.hp.hpl.jena.sparql.engine.binding.Binding r7;
        com.hp.hpl.jena.sparql.engine.iterator.QueryIteratorCheck $r12;
        com.hp.hpl.jena.sparql.engine.ExecutionContext $r0;
        com.hp.hpl.jena.sparql.engine.main.OpExecutorFactory $r6;
        com.hp.hpl.jena.sparql.function.FunctionEnv r1;
        com.hp.hpl.jena.graph.Graph $r3;
        com.hp.hpl.jena.sparql.algebra.Op $r10;
        com.hp.hpl.jena.sparql.engine.QueryIterator $r11;

        r9 := @this: com.hp.hpl.jena.sparql.expr.ExprFunctionOp;

        r7 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r1 := @parameter1: com.hp.hpl.jena.sparql.function.FunctionEnv;

        $r0 = new com.hp.hpl.jena.sparql.engine.ExecutionContext;

        $r2 = interfaceinvoke r1.<com.hp.hpl.jena.sparql.function.FunctionEnv: com.hp.hpl.jena.sparql.util.Context getContext()>();

        $r3 = interfaceinvoke r1.<com.hp.hpl.jena.sparql.function.FunctionEnv: com.hp.hpl.jena.graph.Graph getActiveGraph()>();

        $r4 = interfaceinvoke r1.<com.hp.hpl.jena.sparql.function.FunctionEnv: com.hp.hpl.jena.sparql.core.DatasetGraph getDataset()>();

        $r5 = interfaceinvoke r1.<com.hp.hpl.jena.sparql.function.FunctionEnv: com.hp.hpl.jena.sparql.util.Context getContext()>();

        $r6 = staticinvoke <com.hp.hpl.jena.sparql.engine.main.QC: com.hp.hpl.jena.sparql.engine.main.OpExecutorFactory getFactory(com.hp.hpl.jena.sparql.util.Context)>($r5);

        specialinvoke $r0.<com.hp.hpl.jena.sparql.engine.ExecutionContext: void <init>(com.hp.hpl.jena.sparql.util.Context,com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.sparql.core.DatasetGraph,com.hp.hpl.jena.sparql.engine.main.OpExecutorFactory)>($r2, $r3, $r4, $r6);

        $r8 = staticinvoke <com.hp.hpl.jena.sparql.engine.iterator.QueryIterSingleton: com.hp.hpl.jena.sparql.engine.iterator.QueryIterSingleton create(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r7, $r0);

        $r10 = r9.<com.hp.hpl.jena.sparql.expr.ExprFunctionOp: com.hp.hpl.jena.sparql.algebra.Op op>;

        $r11 = staticinvoke <com.hp.hpl.jena.sparql.engine.main.QC: com.hp.hpl.jena.sparql.engine.QueryIterator execute(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.engine.QueryIterator,com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r10, $r8, $r0);

        $r12 = staticinvoke <com.hp.hpl.jena.sparql.engine.iterator.QueryIteratorCheck: com.hp.hpl.jena.sparql.engine.iterator.QueryIteratorCheck check(com.hp.hpl.jena.sparql.engine.QueryIterator,com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r11, $r0);

        $r13 = virtualinvoke r9.<com.hp.hpl.jena.sparql.expr.ExprFunctionOp: com.hp.hpl.jena.sparql.expr.NodeValue eval(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.engine.QueryIterator,com.hp.hpl.jena.sparql.function.FunctionEnv)>(r7, $r12, r1);

        interfaceinvoke $r12.<com.hp.hpl.jena.sparql.engine.QueryIterator: void close()>();

        return $r13;
    }

    protected abstract com.hp.hpl.jena.sparql.expr.NodeValue eval(com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.sparql.engine.QueryIterator, com.hp.hpl.jena.sparql.function.FunctionEnv);

    public abstract com.hp.hpl.jena.sparql.expr.ExprFunctionOp copy(com.hp.hpl.jena.sparql.expr.ExprList, com.hp.hpl.jena.sparql.algebra.Op);

    public void visit(com.hp.hpl.jena.sparql.expr.ExprVisitor)
    {
        com.hp.hpl.jena.sparql.expr.ExprFunctionOp r1;
        com.hp.hpl.jena.sparql.expr.ExprVisitor r0;

        r1 := @this: com.hp.hpl.jena.sparql.expr.ExprFunctionOp;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprVisitor;

        interfaceinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprVisitor: void visit(com.hp.hpl.jena.sparql.expr.ExprFunctionOp)>(r1);

        return;
    }

    public com.hp.hpl.jena.sparql.expr.Expr apply(com.hp.hpl.jena.sparql.expr.ExprTransform, com.hp.hpl.jena.sparql.expr.ExprList, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.expr.ExprFunctionOp r1;
        com.hp.hpl.jena.sparql.expr.ExprTransform r0;
        com.hp.hpl.jena.sparql.expr.Expr $r4;
        com.hp.hpl.jena.sparql.expr.ExprList r2;
        com.hp.hpl.jena.sparql.algebra.Op r3;

        r1 := @this: com.hp.hpl.jena.sparql.expr.ExprFunctionOp;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprTransform;

        r2 := @parameter1: com.hp.hpl.jena.sparql.expr.ExprList;

        r3 := @parameter2: com.hp.hpl.jena.sparql.algebra.Op;

        $r4 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprTransform: com.hp.hpl.jena.sparql.expr.Expr transform(com.hp.hpl.jena.sparql.expr.ExprFunctionOp,com.hp.hpl.jena.sparql.expr.ExprList,com.hp.hpl.jena.sparql.algebra.Op)>(r1, r2, r3);

        return $r4;
    }
}
