public abstract class kodkod.ast.visitor.AbstractVoidVisitor extends java.lang.Object implements kodkod.ast.visitor.VoidVisitor
{

    protected void <init>()
    {
        kodkod.ast.visitor.AbstractVoidVisitor r0;

        r0 := @this: kodkod.ast.visitor.AbstractVoidVisitor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    protected abstract boolean visited(kodkod.ast.Node);

    public void visit(kodkod.ast.Decls)
    {
        kodkod.ast.visitor.AbstractVoidVisitor r0;
        java.util.Iterator $r2;
        kodkod.ast.Decl r4;
        java.lang.Object $r3;
        kodkod.ast.Decls r1;
        boolean $z0, $z1;

        r0 := @this: kodkod.ast.visitor.AbstractVoidVisitor;

        r1 := @parameter0: kodkod.ast.Decls;

        $z0 = virtualinvoke r0.<kodkod.ast.visitor.AbstractVoidVisitor: boolean visited(kodkod.ast.Node)>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = virtualinvoke r1.<kodkod.ast.Decls: java.util.Iterator iterator()>();

        goto label3;

     label2:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (kodkod.ast.Decl) $r3;

        virtualinvoke r4.<kodkod.ast.Decl: void accept(kodkod.ast.visitor.VoidVisitor)>(r0);

     label3:
        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label2;

        return;
    }

    public void visit(kodkod.ast.Decl)
    {
        kodkod.ast.visitor.AbstractVoidVisitor r0;
        kodkod.ast.Decl r1;
        kodkod.ast.Expression $r3;
        boolean $z0;
        kodkod.ast.Variable $r2;

        r0 := @this: kodkod.ast.visitor.AbstractVoidVisitor;

        r1 := @parameter0: kodkod.ast.Decl;

        $z0 = virtualinvoke r0.<kodkod.ast.visitor.AbstractVoidVisitor: boolean visited(kodkod.ast.Node)>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = virtualinvoke r1.<kodkod.ast.Decl: kodkod.ast.Variable variable()>();

        virtualinvoke $r2.<kodkod.ast.Variable: void accept(kodkod.ast.visitor.VoidVisitor)>(r0);

        $r3 = virtualinvoke r1.<kodkod.ast.Decl: kodkod.ast.Expression expression()>();

        virtualinvoke $r3.<kodkod.ast.Expression: void accept(kodkod.ast.visitor.VoidVisitor)>(r0);

        return;
    }

    public void visit(kodkod.ast.Relation)
    {
        kodkod.ast.visitor.AbstractVoidVisitor r0;
        kodkod.ast.Relation r1;

        r0 := @this: kodkod.ast.visitor.AbstractVoidVisitor;

        r1 := @parameter0: kodkod.ast.Relation;

        return;
    }

    public void visit(kodkod.ast.Variable)
    {
        kodkod.ast.visitor.AbstractVoidVisitor r0;
        kodkod.ast.Variable r1;

        r0 := @this: kodkod.ast.visitor.AbstractVoidVisitor;

        r1 := @parameter0: kodkod.ast.Variable;

        return;
    }

    public void visit(kodkod.ast.ConstantExpression)
    {
        kodkod.ast.ConstantExpression r1;
        kodkod.ast.visitor.AbstractVoidVisitor r0;

        r0 := @this: kodkod.ast.visitor.AbstractVoidVisitor;

        r1 := @parameter0: kodkod.ast.ConstantExpression;

        return;
    }

    public void visit(kodkod.ast.NaryExpression)
    {
        kodkod.ast.visitor.AbstractVoidVisitor r0;
        kodkod.ast.NaryExpression r1;
        java.util.Iterator $r2;
        kodkod.ast.Expression r4;
        java.lang.Object $r3;
        boolean $z0, $z1;

        r0 := @this: kodkod.ast.visitor.AbstractVoidVisitor;

        r1 := @parameter0: kodkod.ast.NaryExpression;

        $z0 = virtualinvoke r0.<kodkod.ast.visitor.AbstractVoidVisitor: boolean visited(kodkod.ast.Node)>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = virtualinvoke r1.<kodkod.ast.NaryExpression: java.util.Iterator iterator()>();

        goto label3;

     label2:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (kodkod.ast.Expression) $r3;

        virtualinvoke r4.<kodkod.ast.Expression: void accept(kodkod.ast.visitor.VoidVisitor)>(r0);

     label3:
        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label2;

        return;
    }

    public void visit(kodkod.ast.BinaryExpression)
    {
        kodkod.ast.visitor.AbstractVoidVisitor r0;
        kodkod.ast.BinaryExpression r1;
        kodkod.ast.Expression $r2, $r3;
        boolean $z0;

        r0 := @this: kodkod.ast.visitor.AbstractVoidVisitor;

        r1 := @parameter0: kodkod.ast.BinaryExpression;

        $z0 = virtualinvoke r0.<kodkod.ast.visitor.AbstractVoidVisitor: boolean visited(kodkod.ast.Node)>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = virtualinvoke r1.<kodkod.ast.BinaryExpression: kodkod.ast.Expression left()>();

        virtualinvoke $r2.<kodkod.ast.Expression: void accept(kodkod.ast.visitor.VoidVisitor)>(r0);

        $r3 = virtualinvoke r1.<kodkod.ast.BinaryExpression: kodkod.ast.Expression right()>();

        virtualinvoke $r3.<kodkod.ast.Expression: void accept(kodkod.ast.visitor.VoidVisitor)>(r0);

        return;
    }

    public void visit(kodkod.ast.UnaryExpression)
    {
        kodkod.ast.visitor.AbstractVoidVisitor r0;
        kodkod.ast.Expression $r2;
        kodkod.ast.UnaryExpression r1;
        boolean $z0;

        r0 := @this: kodkod.ast.visitor.AbstractVoidVisitor;

        r1 := @parameter0: kodkod.ast.UnaryExpression;

        $z0 = virtualinvoke r0.<kodkod.ast.visitor.AbstractVoidVisitor: boolean visited(kodkod.ast.Node)>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = virtualinvoke r1.<kodkod.ast.UnaryExpression: kodkod.ast.Expression expression()>();

        virtualinvoke $r2.<kodkod.ast.Expression: void accept(kodkod.ast.visitor.VoidVisitor)>(r0);

        return;
    }

    public void visit(kodkod.ast.Comprehension)
    {
        kodkod.ast.visitor.AbstractVoidVisitor r0;
        kodkod.ast.Formula $r3;
        kodkod.ast.Decls $r2;
        kodkod.ast.Comprehension r1;
        boolean $z0;

        r0 := @this: kodkod.ast.visitor.AbstractVoidVisitor;

        r1 := @parameter0: kodkod.ast.Comprehension;

        $z0 = virtualinvoke r0.<kodkod.ast.visitor.AbstractVoidVisitor: boolean visited(kodkod.ast.Node)>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = virtualinvoke r1.<kodkod.ast.Comprehension: kodkod.ast.Decls decls()>();

        virtualinvoke $r2.<kodkod.ast.Decls: void accept(kodkod.ast.visitor.VoidVisitor)>(r0);

        $r3 = virtualinvoke r1.<kodkod.ast.Comprehension: kodkod.ast.Formula formula()>();

        virtualinvoke $r3.<kodkod.ast.Formula: void accept(kodkod.ast.visitor.VoidVisitor)>(r0);

        return;
    }

    public void visit(kodkod.ast.IfExpression)
    {
        kodkod.ast.visitor.AbstractVoidVisitor r0;
        kodkod.ast.Formula $r2;
        kodkod.ast.Expression $r3, $r4;
        kodkod.ast.IfExpression r1;
        boolean $z0;

        r0 := @this: kodkod.ast.visitor.AbstractVoidVisitor;

        r1 := @parameter0: kodkod.ast.IfExpression;

        $z0 = virtualinvoke r0.<kodkod.ast.visitor.AbstractVoidVisitor: boolean visited(kodkod.ast.Node)>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = virtualinvoke r1.<kodkod.ast.IfExpression: kodkod.ast.Formula condition()>();

        virtualinvoke $r2.<kodkod.ast.Formula: void accept(kodkod.ast.visitor.VoidVisitor)>(r0);

        $r3 = virtualinvoke r1.<kodkod.ast.IfExpression: kodkod.ast.Expression thenExpr()>();

        virtualinvoke $r3.<kodkod.ast.Expression: void accept(kodkod.ast.visitor.VoidVisitor)>(r0);

        $r4 = virtualinvoke r1.<kodkod.ast.IfExpression: kodkod.ast.Expression elseExpr()>();

        virtualinvoke $r4.<kodkod.ast.Expression: void accept(kodkod.ast.visitor.VoidVisitor)>(r0);

        return;
    }

    public void visit(kodkod.ast.ProjectExpression)
    {
        kodkod.ast.ProjectExpression r1;
        kodkod.ast.visitor.AbstractVoidVisitor r0;
        kodkod.ast.IntExpression $r3;
        int $i0, i1;
        kodkod.ast.Expression $r2;
        boolean $z0;

        r0 := @this: kodkod.ast.visitor.AbstractVoidVisitor;

        r1 := @parameter0: kodkod.ast.ProjectExpression;

        $z0 = virtualinvoke r0.<kodkod.ast.visitor.AbstractVoidVisitor: boolean visited(kodkod.ast.Node)>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = virtualinvoke r1.<kodkod.ast.ProjectExpression: kodkod.ast.Expression expression()>();

        virtualinvoke $r2.<kodkod.ast.Expression: void accept(kodkod.ast.visitor.VoidVisitor)>(r0);

        i1 = 0;

        $i0 = virtualinvoke r1.<kodkod.ast.ProjectExpression: int arity()>();

        goto label3;

     label2:
        $r3 = virtualinvoke r1.<kodkod.ast.ProjectExpression: kodkod.ast.IntExpression column(int)>(i1);

        virtualinvoke $r3.<kodkod.ast.IntExpression: void accept(kodkod.ast.visitor.VoidVisitor)>(r0);

        i1 = i1 + 1;

     label3:
        if i1 < $i0 goto label2;

        return;
    }

    public void visit(kodkod.ast.IntToExprCast)
    {
        kodkod.ast.visitor.AbstractVoidVisitor r0;
        kodkod.ast.IntExpression $r2;
        kodkod.ast.IntToExprCast r1;
        boolean $z0;

        r0 := @this: kodkod.ast.visitor.AbstractVoidVisitor;

        r1 := @parameter0: kodkod.ast.IntToExprCast;

        $z0 = virtualinvoke r0.<kodkod.ast.visitor.AbstractVoidVisitor: boolean visited(kodkod.ast.Node)>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = virtualinvoke r1.<kodkod.ast.IntToExprCast: kodkod.ast.IntExpression intExpr()>();

        virtualinvoke $r2.<kodkod.ast.IntExpression: void accept(kodkod.ast.visitor.VoidVisitor)>(r0);

        return;
    }

    public void visit(kodkod.ast.IntConstant)
    {
        kodkod.ast.IntConstant r1;
        kodkod.ast.visitor.AbstractVoidVisitor r0;

        r0 := @this: kodkod.ast.visitor.AbstractVoidVisitor;

        r1 := @parameter0: kodkod.ast.IntConstant;

        return;
    }

    public void visit(kodkod.ast.IfIntExpression)
    {
        kodkod.ast.visitor.AbstractVoidVisitor r0;
        kodkod.ast.IntExpression $r3, $r4;
        kodkod.ast.IfIntExpression r1;
        kodkod.ast.Formula $r2;
        boolean $z0;

        r0 := @this: kodkod.ast.visitor.AbstractVoidVisitor;

        r1 := @parameter0: kodkod.ast.IfIntExpression;

        $z0 = virtualinvoke r0.<kodkod.ast.visitor.AbstractVoidVisitor: boolean visited(kodkod.ast.Node)>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = virtualinvoke r1.<kodkod.ast.IfIntExpression: kodkod.ast.Formula condition()>();

        virtualinvoke $r2.<kodkod.ast.Formula: void accept(kodkod.ast.visitor.VoidVisitor)>(r0);

        $r3 = virtualinvoke r1.<kodkod.ast.IfIntExpression: kodkod.ast.IntExpression thenExpr()>();

        virtualinvoke $r3.<kodkod.ast.IntExpression: void accept(kodkod.ast.visitor.VoidVisitor)>(r0);

        $r4 = virtualinvoke r1.<kodkod.ast.IfIntExpression: kodkod.ast.IntExpression elseExpr()>();

        virtualinvoke $r4.<kodkod.ast.IntExpression: void accept(kodkod.ast.visitor.VoidVisitor)>(r0);

        return;
    }

    public void visit(kodkod.ast.ExprToIntCast)
    {
        kodkod.ast.visitor.AbstractVoidVisitor r0;
        kodkod.ast.ExprToIntCast r1;
        kodkod.ast.Expression $r2;
        boolean $z0;

        r0 := @this: kodkod.ast.visitor.AbstractVoidVisitor;

        r1 := @parameter0: kodkod.ast.ExprToIntCast;

        $z0 = virtualinvoke r0.<kodkod.ast.visitor.AbstractVoidVisitor: boolean visited(kodkod.ast.Node)>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = virtualinvoke r1.<kodkod.ast.ExprToIntCast: kodkod.ast.Expression expression()>();

        virtualinvoke $r2.<kodkod.ast.Expression: void accept(kodkod.ast.visitor.VoidVisitor)>(r0);

        return;
    }

    public void visit(kodkod.ast.NaryIntExpression)
    {
        kodkod.ast.NaryIntExpression r1;
        kodkod.ast.visitor.AbstractVoidVisitor r0;
        kodkod.ast.IntExpression r4;
        java.util.Iterator $r2;
        java.lang.Object $r3;
        boolean $z0, $z1;

        r0 := @this: kodkod.ast.visitor.AbstractVoidVisitor;

        r1 := @parameter0: kodkod.ast.NaryIntExpression;

        $z0 = virtualinvoke r0.<kodkod.ast.visitor.AbstractVoidVisitor: boolean visited(kodkod.ast.Node)>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = virtualinvoke r1.<kodkod.ast.NaryIntExpression: java.util.Iterator iterator()>();

        goto label3;

     label2:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (kodkod.ast.IntExpression) $r3;

        virtualinvoke r4.<kodkod.ast.IntExpression: void accept(kodkod.ast.visitor.VoidVisitor)>(r0);

     label3:
        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label2;

        return;
    }

    public void visit(kodkod.ast.BinaryIntExpression)
    {
        kodkod.ast.visitor.AbstractVoidVisitor r0;
        kodkod.ast.IntExpression $r2, $r3;
        kodkod.ast.BinaryIntExpression r1;
        boolean $z0;

        r0 := @this: kodkod.ast.visitor.AbstractVoidVisitor;

        r1 := @parameter0: kodkod.ast.BinaryIntExpression;

        $z0 = virtualinvoke r0.<kodkod.ast.visitor.AbstractVoidVisitor: boolean visited(kodkod.ast.Node)>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = virtualinvoke r1.<kodkod.ast.BinaryIntExpression: kodkod.ast.IntExpression left()>();

        virtualinvoke $r2.<kodkod.ast.IntExpression: void accept(kodkod.ast.visitor.VoidVisitor)>(r0);

        $r3 = virtualinvoke r1.<kodkod.ast.BinaryIntExpression: kodkod.ast.IntExpression right()>();

        virtualinvoke $r3.<kodkod.ast.IntExpression: void accept(kodkod.ast.visitor.VoidVisitor)>(r0);

        return;
    }

    public void visit(kodkod.ast.UnaryIntExpression)
    {
        kodkod.ast.visitor.AbstractVoidVisitor r0;
        kodkod.ast.IntExpression $r2;
        kodkod.ast.UnaryIntExpression r1;
        boolean $z0;

        r0 := @this: kodkod.ast.visitor.AbstractVoidVisitor;

        r1 := @parameter0: kodkod.ast.UnaryIntExpression;

        $z0 = virtualinvoke r0.<kodkod.ast.visitor.AbstractVoidVisitor: boolean visited(kodkod.ast.Node)>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = virtualinvoke r1.<kodkod.ast.UnaryIntExpression: kodkod.ast.IntExpression intExpr()>();

        virtualinvoke $r2.<kodkod.ast.IntExpression: void accept(kodkod.ast.visitor.VoidVisitor)>(r0);

        return;
    }

    public void visit(kodkod.ast.SumExpression)
    {
        kodkod.ast.visitor.AbstractVoidVisitor r0;
        kodkod.ast.IntExpression $r3;
        kodkod.ast.Decls $r2;
        kodkod.ast.SumExpression r1;
        boolean $z0;

        r0 := @this: kodkod.ast.visitor.AbstractVoidVisitor;

        r1 := @parameter0: kodkod.ast.SumExpression;

        $z0 = virtualinvoke r0.<kodkod.ast.visitor.AbstractVoidVisitor: boolean visited(kodkod.ast.Node)>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = virtualinvoke r1.<kodkod.ast.SumExpression: kodkod.ast.Decls decls()>();

        virtualinvoke $r2.<kodkod.ast.Decls: void accept(kodkod.ast.visitor.VoidVisitor)>(r0);

        $r3 = virtualinvoke r1.<kodkod.ast.SumExpression: kodkod.ast.IntExpression intExpr()>();

        virtualinvoke $r3.<kodkod.ast.IntExpression: void accept(kodkod.ast.visitor.VoidVisitor)>(r0);

        return;
    }

    public void visit(kodkod.ast.IntComparisonFormula)
    {
        kodkod.ast.IntComparisonFormula r1;
        kodkod.ast.visitor.AbstractVoidVisitor r0;
        kodkod.ast.IntExpression $r2, $r3;
        boolean $z0;

        r0 := @this: kodkod.ast.visitor.AbstractVoidVisitor;

        r1 := @parameter0: kodkod.ast.IntComparisonFormula;

        $z0 = virtualinvoke r0.<kodkod.ast.visitor.AbstractVoidVisitor: boolean visited(kodkod.ast.Node)>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = virtualinvoke r1.<kodkod.ast.IntComparisonFormula: kodkod.ast.IntExpression left()>();

        virtualinvoke $r2.<kodkod.ast.IntExpression: void accept(kodkod.ast.visitor.VoidVisitor)>(r0);

        $r3 = virtualinvoke r1.<kodkod.ast.IntComparisonFormula: kodkod.ast.IntExpression right()>();

        virtualinvoke $r3.<kodkod.ast.IntExpression: void accept(kodkod.ast.visitor.VoidVisitor)>(r0);

        return;
    }

    public void visit(kodkod.ast.QuantifiedFormula)
    {
        kodkod.ast.visitor.AbstractVoidVisitor r0;
        kodkod.ast.QuantifiedFormula r1;
        kodkod.ast.Formula $r3;
        kodkod.ast.Decls $r2;
        boolean $z0;

        r0 := @this: kodkod.ast.visitor.AbstractVoidVisitor;

        r1 := @parameter0: kodkod.ast.QuantifiedFormula;

        $z0 = virtualinvoke r0.<kodkod.ast.visitor.AbstractVoidVisitor: boolean visited(kodkod.ast.Node)>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = virtualinvoke r1.<kodkod.ast.QuantifiedFormula: kodkod.ast.Decls decls()>();

        virtualinvoke $r2.<kodkod.ast.Decls: void accept(kodkod.ast.visitor.VoidVisitor)>(r0);

        $r3 = virtualinvoke r1.<kodkod.ast.QuantifiedFormula: kodkod.ast.Formula formula()>();

        virtualinvoke $r3.<kodkod.ast.Formula: void accept(kodkod.ast.visitor.VoidVisitor)>(r0);

        return;
    }

    public void visit(kodkod.ast.NaryFormula)
    {
        kodkod.ast.visitor.AbstractVoidVisitor r0;
        java.util.Iterator $r2;
        kodkod.ast.Formula r4;
        java.lang.Object $r3;
        kodkod.ast.NaryFormula r1;
        boolean $z0, $z1;

        r0 := @this: kodkod.ast.visitor.AbstractVoidVisitor;

        r1 := @parameter0: kodkod.ast.NaryFormula;

        $z0 = virtualinvoke r0.<kodkod.ast.visitor.AbstractVoidVisitor: boolean visited(kodkod.ast.Node)>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = virtualinvoke r1.<kodkod.ast.NaryFormula: java.util.Iterator iterator()>();

        goto label3;

     label2:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (kodkod.ast.Formula) $r3;

        virtualinvoke r4.<kodkod.ast.Formula: void accept(kodkod.ast.visitor.VoidVisitor)>(r0);

     label3:
        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label2;

        return;
    }

    public void visit(kodkod.ast.BinaryFormula)
    {
        kodkod.ast.BinaryFormula r1;
        kodkod.ast.visitor.AbstractVoidVisitor r0;
        kodkod.ast.Formula $r2, $r3;
        boolean $z0;

        r0 := @this: kodkod.ast.visitor.AbstractVoidVisitor;

        r1 := @parameter0: kodkod.ast.BinaryFormula;

        $z0 = virtualinvoke r0.<kodkod.ast.visitor.AbstractVoidVisitor: boolean visited(kodkod.ast.Node)>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = virtualinvoke r1.<kodkod.ast.BinaryFormula: kodkod.ast.Formula left()>();

        virtualinvoke $r2.<kodkod.ast.Formula: void accept(kodkod.ast.visitor.VoidVisitor)>(r0);

        $r3 = virtualinvoke r1.<kodkod.ast.BinaryFormula: kodkod.ast.Formula right()>();

        virtualinvoke $r3.<kodkod.ast.Formula: void accept(kodkod.ast.visitor.VoidVisitor)>(r0);

        return;
    }

    public void visit(kodkod.ast.NotFormula)
    {
        kodkod.ast.visitor.AbstractVoidVisitor r0;
        kodkod.ast.NotFormula r1;
        kodkod.ast.Formula $r2;
        boolean $z0;

        r0 := @this: kodkod.ast.visitor.AbstractVoidVisitor;

        r1 := @parameter0: kodkod.ast.NotFormula;

        $z0 = virtualinvoke r0.<kodkod.ast.visitor.AbstractVoidVisitor: boolean visited(kodkod.ast.Node)>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = virtualinvoke r1.<kodkod.ast.NotFormula: kodkod.ast.Formula formula()>();

        virtualinvoke $r2.<kodkod.ast.Formula: void accept(kodkod.ast.visitor.VoidVisitor)>(r0);

        return;
    }

    public void visit(kodkod.ast.ConstantFormula)
    {
        kodkod.ast.ConstantFormula r1;
        kodkod.ast.visitor.AbstractVoidVisitor r0;

        r0 := @this: kodkod.ast.visitor.AbstractVoidVisitor;

        r1 := @parameter0: kodkod.ast.ConstantFormula;

        return;
    }

    public void visit(kodkod.ast.ComparisonFormula)
    {
        kodkod.ast.visitor.AbstractVoidVisitor r0;
        kodkod.ast.ComparisonFormula r1;
        kodkod.ast.Expression $r2, $r3;
        boolean $z0;

        r0 := @this: kodkod.ast.visitor.AbstractVoidVisitor;

        r1 := @parameter0: kodkod.ast.ComparisonFormula;

        $z0 = virtualinvoke r0.<kodkod.ast.visitor.AbstractVoidVisitor: boolean visited(kodkod.ast.Node)>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = virtualinvoke r1.<kodkod.ast.ComparisonFormula: kodkod.ast.Expression left()>();

        virtualinvoke $r2.<kodkod.ast.Expression: void accept(kodkod.ast.visitor.VoidVisitor)>(r0);

        $r3 = virtualinvoke r1.<kodkod.ast.ComparisonFormula: kodkod.ast.Expression right()>();

        virtualinvoke $r3.<kodkod.ast.Expression: void accept(kodkod.ast.visitor.VoidVisitor)>(r0);

        return;
    }

    public void visit(kodkod.ast.MultiplicityFormula)
    {
        kodkod.ast.MultiplicityFormula r1;
        kodkod.ast.visitor.AbstractVoidVisitor r0;
        kodkod.ast.Expression $r2;
        boolean $z0;

        r0 := @this: kodkod.ast.visitor.AbstractVoidVisitor;

        r1 := @parameter0: kodkod.ast.MultiplicityFormula;

        $z0 = virtualinvoke r0.<kodkod.ast.visitor.AbstractVoidVisitor: boolean visited(kodkod.ast.Node)>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = virtualinvoke r1.<kodkod.ast.MultiplicityFormula: kodkod.ast.Expression expression()>();

        virtualinvoke $r2.<kodkod.ast.Expression: void accept(kodkod.ast.visitor.VoidVisitor)>(r0);

        return;
    }

    public void visit(kodkod.ast.RelationPredicate)
    {
        kodkod.ast.RelationPredicate$Function r12;
        kodkod.ast.visitor.AbstractVoidVisitor r0;
        kodkod.ast.Expression $r10, $r11;
        kodkod.ast.RelationPredicate$TotalOrdering r13;
        kodkod.ast.RelationPredicate r1;
        kodkod.ast.Relation $r2, $r7, $r8, $r9;
        kodkod.ast.RelationPredicate$Name $r3, $r4, $r5, $r6;
        boolean $z0;

        r0 := @this: kodkod.ast.visitor.AbstractVoidVisitor;

        r1 := @parameter0: kodkod.ast.RelationPredicate;

        $z0 = virtualinvoke r0.<kodkod.ast.visitor.AbstractVoidVisitor: boolean visited(kodkod.ast.Node)>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = virtualinvoke r1.<kodkod.ast.RelationPredicate: kodkod.ast.Relation relation()>();

        virtualinvoke $r2.<kodkod.ast.Relation: void accept(kodkod.ast.visitor.VoidVisitor)>(r0);

        $r3 = virtualinvoke r1.<kodkod.ast.RelationPredicate: kodkod.ast.RelationPredicate$Name name()>();

        $r4 = <kodkod.ast.RelationPredicate$Name: kodkod.ast.RelationPredicate$Name FUNCTION>;

        if $r3 != $r4 goto label2;

        r12 = (kodkod.ast.RelationPredicate$Function) r1;

        $r10 = virtualinvoke r12.<kodkod.ast.RelationPredicate$Function: kodkod.ast.Expression domain()>();

        virtualinvoke $r10.<kodkod.ast.Expression: void accept(kodkod.ast.visitor.VoidVisitor)>(r0);

        $r11 = virtualinvoke r12.<kodkod.ast.RelationPredicate$Function: kodkod.ast.Expression range()>();

        virtualinvoke $r11.<kodkod.ast.Expression: void accept(kodkod.ast.visitor.VoidVisitor)>(r0);

        goto label3;

     label2:
        $r5 = virtualinvoke r1.<kodkod.ast.RelationPredicate: kodkod.ast.RelationPredicate$Name name()>();

        $r6 = <kodkod.ast.RelationPredicate$Name: kodkod.ast.RelationPredicate$Name TOTAL_ORDERING>;

        if $r5 != $r6 goto label3;

        r13 = (kodkod.ast.RelationPredicate$TotalOrdering) r1;

        $r7 = virtualinvoke r13.<kodkod.ast.RelationPredicate$TotalOrdering: kodkod.ast.Relation ordered()>();

        virtualinvoke $r7.<kodkod.ast.Relation: void accept(kodkod.ast.visitor.VoidVisitor)>(r0);

        $r8 = virtualinvoke r13.<kodkod.ast.RelationPredicate$TotalOrdering: kodkod.ast.Relation first()>();

        virtualinvoke $r8.<kodkod.ast.Relation: void accept(kodkod.ast.visitor.VoidVisitor)>(r0);

        $r9 = virtualinvoke r13.<kodkod.ast.RelationPredicate$TotalOrdering: kodkod.ast.Relation last()>();

        virtualinvoke $r9.<kodkod.ast.Relation: void accept(kodkod.ast.visitor.VoidVisitor)>(r0);

     label3:
        return;
    }
}
