public abstract class com.google.gxp.compiler.base.Type extends com.google.gxp.compiler.base.SerializableAbstractNode
{

    protected void <init>(com.google.gxp.compiler.base.Node)
    {
        com.google.gxp.compiler.base.Type r0;
        com.google.gxp.compiler.base.Node r1;

        r0 := @this: com.google.gxp.compiler.base.Type;

        r1 := @parameter0: com.google.gxp.compiler.base.Node;

        specialinvoke r0.<com.google.gxp.compiler.base.SerializableAbstractNode: void <init>(com.google.gxp.compiler.base.Node)>(r1);

        return;
    }

    protected void <init>(com.google.gxp.compiler.alerts.SourcePosition, java.lang.String)
    {
        com.google.gxp.compiler.alerts.SourcePosition r1;
        com.google.gxp.compiler.base.Type r0;
        java.lang.String r2;

        r0 := @this: com.google.gxp.compiler.base.Type;

        r1 := @parameter0: com.google.gxp.compiler.alerts.SourcePosition;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<com.google.gxp.compiler.base.SerializableAbstractNode: void <init>(com.google.gxp.compiler.alerts.SourcePosition,java.lang.String)>(r1, r2);

        return;
    }

    public abstract boolean onlyAllowedInParam();

    public boolean isContent()
    {
        com.google.gxp.compiler.base.Type r0;

        r0 := @this: com.google.gxp.compiler.base.Type;

        return 0;
    }

    public abstract boolean takesDefaultParam();

    public boolean takesRegexParam()
    {
        com.google.gxp.compiler.base.Type r0;

        r0 := @this: com.google.gxp.compiler.base.Type;

        return 0;
    }

    public boolean takesConstructorParam()
    {
        com.google.gxp.compiler.base.Type r0;

        r0 := @this: com.google.gxp.compiler.base.Type;

        return 0;
    }

    public com.google.gxp.compiler.base.Expression getDefaultValue()
    {
        com.google.gxp.compiler.base.Type r0;

        r0 := @this: com.google.gxp.compiler.base.Type;

        return null;
    }

    public java.util.regex.Pattern getPattern(java.lang.String)
    {
        com.google.gxp.compiler.base.Type r0;
        java.lang.String r1;

        r0 := @this: com.google.gxp.compiler.base.Type;

        r1 := @parameter0: java.lang.String;

        return null;
    }

    public abstract com.google.gxp.compiler.base.Expression parseObjectConstant(java.lang.String, com.google.gxp.compiler.base.ObjectConstant, com.google.gxp.compiler.alerts.AlertSink);

    public abstract java.lang.Object acceptTypeVisitor(com.google.gxp.compiler.base.TypeVisitor);

    public java.lang.String toString()
    {
        com.google.gxp.compiler.alerts.SourcePosition $r6;
        com.google.gxp.compiler.base.Type r1;
        java.lang.StringBuilder $r0, $r4, $r5, $r7;
        java.lang.Class $r2;
        java.lang.String $r3, $r8;

        r1 := @this: com.google.gxp.compiler.base.Type;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getSimpleName()>();

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("@");

        $r6 = virtualinvoke r1.<com.google.gxp.compiler.base.Type: com.google.gxp.compiler.alerts.SourcePosition getSourcePosition()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public abstract boolean matches(com.google.gxp.compiler.base.Type);

    public abstract boolean equals(java.lang.Object);

    protected final boolean equalsType(com.google.gxp.compiler.base.Type)
    {
        com.google.gxp.compiler.base.Type r0, r1;
        boolean $z0;

        r0 := @this: com.google.gxp.compiler.base.Type;

        r1 := @parameter0: com.google.gxp.compiler.base.Type;

        $z0 = virtualinvoke r0.<com.google.gxp.compiler.base.Type: boolean equalsAbstractNode(com.google.gxp.compiler.base.SerializableAbstractNode)>(r1);

        return $z0;
    }

    public abstract int hashCode();

    protected final int typeHashCode()
    {
        java.lang.Object[] $r0;
        int $i0, $i1;
        com.google.gxp.compiler.base.Type r1;
        java.lang.Integer $r2;

        r1 := @this: com.google.gxp.compiler.base.Type;

        $r0 = newarray (java.lang.Object)[1];

        $i0 = virtualinvoke r1.<com.google.gxp.compiler.base.Type: int abstractNodeHashCode()>();

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r0[0] = $r2;

        $i1 = staticinvoke <com.google.gxp.com.google.common.base.Objects: int hashCode(java.lang.Object[])>($r0);

        return $i1;
    }
}
