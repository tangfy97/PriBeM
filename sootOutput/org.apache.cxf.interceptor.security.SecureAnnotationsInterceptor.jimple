public class org.apache.cxf.interceptor.security.SecureAnnotationsInterceptor extends org.apache.cxf.interceptor.security.SimpleAuthorizingInterceptor
{
    private static final java.util.logging.Logger LOG;
    private static final java.lang.String DEFAULT_ANNOTATION_CLASS_NAME;
    private static final java.util.Set SKIP_METHODS;
    private java.lang.String annotationClassName;

    public void <init>()
    {
        org.apache.cxf.interceptor.security.SecureAnnotationsInterceptor r0;

        r0 := @this: org.apache.cxf.interceptor.security.SecureAnnotationsInterceptor;

        specialinvoke r0.<org.apache.cxf.interceptor.security.SimpleAuthorizingInterceptor: void <init>()>();

        r0.<org.apache.cxf.interceptor.security.SecureAnnotationsInterceptor: java.lang.String annotationClassName> = "javax.annotation.security.RolesAllowed";

        return;
    }

    public void setAnnotationClassName(java.lang.String)
    {
        java.lang.Throwable $r2;
        org.apache.cxf.interceptor.security.SecureAnnotationsInterceptor r1;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7;
        java.lang.String r0, $r8;

        r1 := @this: org.apache.cxf.interceptor.security.SecureAnnotationsInterceptor;

        r0 := @parameter0: java.lang.String;

     label1:
        staticinvoke <org.apache.cxf.common.classloader.ClassLoaderUtils: java.lang.Class loadClass(java.lang.String,java.lang.Class)>(r0, class "Lorg/apache/cxf/interceptor/security/SecureAnnotationsInterceptor;");

        r1.<org.apache.cxf.interceptor.security.SecureAnnotationsInterceptor: java.lang.String annotationClassName> = r0;

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        virtualinvoke $r2.<java.lang.Throwable: void printStackTrace()>();

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Annotation class ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not available");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r3;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setSecuredObject(java.lang.Object)
    {
        org.apache.cxf.interceptor.security.SecureAnnotationsInterceptor r3;
        java.util.HashMap $r2;
        java.util.logging.Level $r4;
        java.lang.String $r14, $r18, $r20;
        boolean $z0, $z1, $z2;
        java.util.Map$Entry r9;
        java.util.Iterator $r7;
        java.util.Set $r6;
        java.util.logging.Logger $r5, $r11, $r21;
        java.lang.Object r0, $r8, $r13, $r17;
        java.lang.Class $r1;
        java.lang.StringBuilder $r10, $r12, $r15, $r16, $r19;

        r3 := @this: org.apache.cxf.interceptor.security.SecureAnnotationsInterceptor;

        r0 := @parameter0: java.lang.Object;

        $r1 = staticinvoke <org.apache.cxf.common.util.ClassHelper: java.lang.Class getRealClass(java.lang.Object)>(r0);

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        virtualinvoke r3.<org.apache.cxf.interceptor.security.SecureAnnotationsInterceptor: void findRoles(java.lang.Class,java.util.Map)>($r1, $r2);

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r21 = <org.apache.cxf.interceptor.security.SecureAnnotationsInterceptor: java.util.logging.Logger LOG>;

        virtualinvoke $r21.<java.util.logging.Logger: void warning(java.lang.String)>("The roles map is empty, the service object is not protected");

        goto label3;

     label1:
        $r5 = <org.apache.cxf.interceptor.security.SecureAnnotationsInterceptor: java.util.logging.Logger LOG>;

        $r4 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z1 = virtualinvoke $r5.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r4);

        if $z1 == 0 goto label3;

        $r6 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();

        $r7 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z2 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label3;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (java.util.Map$Entry) $r8;

        $r11 = <org.apache.cxf.interceptor.security.SecureAnnotationsInterceptor: java.util.logging.Logger LOG>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Method: ");

        $r13 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r14 = (java.lang.String) $r13;

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", roles: ");

        $r17 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r18 = (java.lang.String) $r17;

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<java.util.logging.Logger: void fine(java.lang.String)>($r20);

        goto label2;

     label3:
        specialinvoke r3.<org.apache.cxf.interceptor.security.SimpleAuthorizingInterceptor: void setMethodRolesMap(java.util.Map)>($r2);

        return;
    }

    protected void findRoles(java.lang.Class, java.util.Map)
    {
        org.apache.cxf.interceptor.security.SecureAnnotationsInterceptor r1;
        java.lang.'annotation'.Annotation[] $r2, $r11;
        java.lang.reflect.Method[] $r5;
        java.util.Map r6;
        int i0, i1, i2, i3;
        java.lang.String $r3, $r4, $r10, $r12, $r13, $r14, $r15, $r17;
        java.lang.reflect.Method r16;
        boolean $z0, $z1, $z2;
        java.lang.Class[] $r8;
        java.util.Set $r9;
        java.lang.Class r0, $r7, r18;

        r1 := @this: org.apache.cxf.interceptor.security.SecureAnnotationsInterceptor;

        r0 := @parameter0: java.lang.Class;

        r6 := @parameter1: java.util.Map;

        if r0 == null goto label01;

        if r0 != class "Ljava/lang/Object;" goto label02;

     label01:
        return;

     label02:
        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.'annotation'.Annotation[] getAnnotations()>();

        $r3 = r1.<org.apache.cxf.interceptor.security.SecureAnnotationsInterceptor: java.lang.String annotationClassName>;

        $r4 = specialinvoke r1.<org.apache.cxf.interceptor.security.SecureAnnotationsInterceptor: java.lang.String getRoles(java.lang.'annotation'.Annotation[],java.lang.String)>($r2, $r3);

        $r5 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        i0 = lengthof $r5;

        i1 = 0;

     label03:
        if i1 >= i0 goto label08;

        r16 = $r5[i1];

        $r9 = <org.apache.cxf.interceptor.security.SecureAnnotationsInterceptor: java.util.Set SKIP_METHODS>;

        $r10 = virtualinvoke r16.<java.lang.reflect.Method: java.lang.String getName()>();

        $z2 = interfaceinvoke $r9.<java.util.Set: boolean contains(java.lang.Object)>($r10);

        if $z2 == 0 goto label04;

        goto label07;

     label04:
        $r11 = virtualinvoke r16.<java.lang.reflect.Method: java.lang.'annotation'.Annotation[] getAnnotations()>();

        $r12 = r1.<org.apache.cxf.interceptor.security.SecureAnnotationsInterceptor: java.lang.String annotationClassName>;

        $r13 = specialinvoke r1.<org.apache.cxf.interceptor.security.SecureAnnotationsInterceptor: java.lang.String getRoles(java.lang.'annotation'.Annotation[],java.lang.String)>($r11, $r12);

        if $r13 == null goto label05;

        $r17 = $r13;

        goto label06;

     label05:
        $r17 = $r4;

     label06:
        if $r17 == null goto label07;

        $r14 = virtualinvoke r16.<java.lang.reflect.Method: java.lang.String getName()>();

        interfaceinvoke r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, $r17);

        $r15 = virtualinvoke r1.<org.apache.cxf.interceptor.security.SecureAnnotationsInterceptor: java.lang.String createMethodSig(java.lang.reflect.Method)>(r16);

        interfaceinvoke r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r15, $r17);

     label07:
        i1 = i1 + 1;

        goto label03;

     label08:
        $z0 = interfaceinvoke r6.<java.util.Map: boolean isEmpty()>();

        if $z0 != 0 goto label09;

        return;

     label09:
        $r7 = virtualinvoke r0.<java.lang.Class: java.lang.Class getSuperclass()>();

        virtualinvoke r1.<org.apache.cxf.interceptor.security.SecureAnnotationsInterceptor: void findRoles(java.lang.Class,java.util.Map)>($r7, r6);

        $z1 = interfaceinvoke r6.<java.util.Map: boolean isEmpty()>();

        if $z1 != 0 goto label10;

        return;

     label10:
        $r8 = virtualinvoke r0.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        i2 = lengthof $r8;

        i3 = 0;

     label11:
        if i3 >= i2 goto label12;

        r18 = $r8[i3];

        virtualinvoke r1.<org.apache.cxf.interceptor.security.SecureAnnotationsInterceptor: void findRoles(java.lang.Class,java.util.Map)>(r18, r6);

        i3 = i3 + 1;

        goto label11;

     label12:
        return;
    }

    private java.lang.String getRoles(java.lang.'annotation'.Annotation[], java.lang.String)
    {
        java.lang.Object[] $r8;
        org.apache.cxf.interceptor.security.SecureAnnotationsInterceptor r16;
        java.lang.String[] $r10, r11;
        java.lang.'annotation'.Annotation[] r0;
        int i0, $i1, $i2, $i3, i4, i5;
        java.lang.String $r3, r4, $r13, $r14;
        java.lang.reflect.Method $r7;
        boolean $z0;
        java.lang.Class[] $r6;
        java.lang.Exception $r15;
        java.lang.'annotation'.Annotation r1;
        java.lang.Class $r2, $r5;
        java.lang.Object $r9;
        java.lang.StringBuilder $r12;

        r16 := @this: org.apache.cxf.interceptor.security.SecureAnnotationsInterceptor;

        r0 := @parameter0: java.lang.'annotation'.Annotation[];

        r4 := @parameter1: java.lang.String;

        i0 = lengthof r0;

        i4 = 0;

     label1:
        if i4 >= i0 goto label9;

        r1 = r0[i4];

        $r2 = interfaceinvoke r1.<java.lang.'annotation'.Annotation: java.lang.Class annotationType()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z0 == 0 goto label8;

     label2:
        $r5 = interfaceinvoke r1.<java.lang.'annotation'.Annotation: java.lang.Class annotationType()>();

        $r6 = newarray (java.lang.Class)[0];

        $r7 = virtualinvoke $r5.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("value", $r6);

        $r8 = newarray (java.lang.Object)[0];

        $r9 = virtualinvoke $r7.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r1, $r8);

        $r10 = (java.lang.String[]) $r9;

        r11 = (java.lang.String[]) $r10;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        i5 = 0;

     label3:
        $i1 = lengthof r11;

        if i5 >= $i1 goto label5;

        $r14 = r11[i5];

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $i3 = i5 + 1;

        $i2 = lengthof r11;

        if $i3 >= $i2 goto label4;

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

     label4:
        i5 = i5 + 1;

        goto label3;

     label5:
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

     label6:
        return $r13;

     label7:
        $r15 := @caughtexception;

        goto label9;

     label8:
        i4 = i4 + 1;

        goto label1;

     label9:
        return null;

        catch java.lang.Exception from label2 to label6 with label7;
    }

    static void <clinit>()
    {
        java.util.HashSet $r1;
        java.util.List $r4;
        java.util.Set $r3;
        java.lang.String[] $r2;
        java.util.logging.Logger $r0;

        <org.apache.cxf.interceptor.security.SecureAnnotationsInterceptor: java.lang.String DEFAULT_ANNOTATION_CLASS_NAME> = "javax.annotation.security.RolesAllowed";

        $r0 = staticinvoke <org.apache.cxf.common.logging.LogUtils: java.util.logging.Logger getL7dLogger(java.lang.Class)>(class "Lorg/apache/cxf/interceptor/security/SecureAnnotationsInterceptor;");

        <org.apache.cxf.interceptor.security.SecureAnnotationsInterceptor: java.util.logging.Logger LOG> = $r0;

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        <org.apache.cxf.interceptor.security.SecureAnnotationsInterceptor: java.util.Set SKIP_METHODS> = $r1;

        $r3 = <org.apache.cxf.interceptor.security.SecureAnnotationsInterceptor: java.util.Set SKIP_METHODS>;

        $r2 = newarray (java.lang.String)[6];

        $r2[0] = "wait";

        $r2[1] = "notify";

        $r2[2] = "notifyAll";

        $r2[3] = "equals";

        $r2[4] = "toString";

        $r2[5] = "hashCode";

        $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        interfaceinvoke $r3.<java.util.Set: boolean addAll(java.util.Collection)>($r4);

        return;
    }
}
