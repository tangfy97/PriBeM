public abstract class com.mongodb.DBCollection extends java.lang.Object
{
    static final boolean DEBUG;
    final com.mongodb.DB _db;
    protected final java.lang.String _name;
    protected final java.lang.String _fullName;
    protected java.util.List _hintFields;
    private com.mongodb.WriteConcern _concern;
    protected java.lang.Class _objectClass;
    private java.util.Map _internalClass;
    private com.mongodb.ReflectionDBObject$JavaWrapper _wrapper;
    private boolean _anyUpdateSave;
    private final java.util.Set _createIndexes;
    private final java.util.Set _createIndexesAfterSave;

    public abstract com.mongodb.WriteResult insert(com.mongodb.DBObject[], com.mongodb.WriteConcern) throws com.mongodb.MongoException;

    public com.mongodb.WriteResult insert(com.mongodb.DBObject, com.mongodb.WriteConcern) throws com.mongodb.MongoException
    {
        com.mongodb.WriteResult $r4;
        com.mongodb.DBObject r2;
        com.mongodb.DBObject[] $r1;
        com.mongodb.DBCollection r0;
        com.mongodb.WriteConcern r3;

        r0 := @this: com.mongodb.DBCollection;

        r2 := @parameter0: com.mongodb.DBObject;

        r3 := @parameter1: com.mongodb.WriteConcern;

        $r1 = newarray (com.mongodb.DBObject)[1];

        $r1[0] = r2;

        $r4 = virtualinvoke r0.<com.mongodb.DBCollection: com.mongodb.WriteResult insert(com.mongodb.DBObject[],com.mongodb.WriteConcern)>($r1, r3);

        return $r4;
    }

    public transient com.mongodb.WriteResult insert(com.mongodb.DBObject[]) throws com.mongodb.MongoException
    {
        com.mongodb.WriteResult $r3;
        com.mongodb.DBObject[] r1;
        com.mongodb.DBCollection r0;
        com.mongodb.WriteConcern $r2;

        r0 := @this: com.mongodb.DBCollection;

        r1 := @parameter0: com.mongodb.DBObject[];

        $r2 = virtualinvoke r0.<com.mongodb.DBCollection: com.mongodb.WriteConcern getWriteConcern()>();

        $r3 = virtualinvoke r0.<com.mongodb.DBCollection: com.mongodb.WriteResult insert(com.mongodb.DBObject[],com.mongodb.WriteConcern)>(r1, $r2);

        return $r3;
    }

    public com.mongodb.WriteResult insert(java.util.List) throws com.mongodb.MongoException
    {
        java.lang.Object[] $r3;
        com.mongodb.DBObject[] $r2, $r4;
        com.mongodb.DBCollection r0;
        com.mongodb.WriteResult $r6;
        java.util.List r1;
        int $i0;
        com.mongodb.WriteConcern $r5;

        r0 := @this: com.mongodb.DBCollection;

        r1 := @parameter0: java.util.List;

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        $r2 = newarray (com.mongodb.DBObject)[$i0];

        $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r2);

        $r4 = (com.mongodb.DBObject[]) $r3;

        $r5 = virtualinvoke r0.<com.mongodb.DBCollection: com.mongodb.WriteConcern getWriteConcern()>();

        $r6 = virtualinvoke r0.<com.mongodb.DBCollection: com.mongodb.WriteResult insert(com.mongodb.DBObject[],com.mongodb.WriteConcern)>($r4, $r5);

        return $r6;
    }

    public abstract com.mongodb.WriteResult update(com.mongodb.DBObject, com.mongodb.DBObject, boolean, boolean, com.mongodb.WriteConcern) throws com.mongodb.MongoException;

    public com.mongodb.WriteResult update(com.mongodb.DBObject, com.mongodb.DBObject, boolean, boolean) throws com.mongodb.MongoException
    {
        com.mongodb.WriteResult $r4;
        com.mongodb.DBObject r1, r2;
        com.mongodb.DBCollection r0;
        com.mongodb.WriteConcern $r3;
        boolean z0, z1;

        r0 := @this: com.mongodb.DBCollection;

        r1 := @parameter0: com.mongodb.DBObject;

        r2 := @parameter1: com.mongodb.DBObject;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        $r3 = virtualinvoke r0.<com.mongodb.DBCollection: com.mongodb.WriteConcern getWriteConcern()>();

        $r4 = virtualinvoke r0.<com.mongodb.DBCollection: com.mongodb.WriteResult update(com.mongodb.DBObject,com.mongodb.DBObject,boolean,boolean,com.mongodb.WriteConcern)>(r1, r2, z0, z1, $r3);

        return $r4;
    }

    public com.mongodb.WriteResult update(com.mongodb.DBObject, com.mongodb.DBObject) throws com.mongodb.MongoException
    {
        com.mongodb.WriteResult $r3;
        com.mongodb.DBObject r1, r2;
        com.mongodb.DBCollection r0;

        r0 := @this: com.mongodb.DBCollection;

        r1 := @parameter0: com.mongodb.DBObject;

        r2 := @parameter1: com.mongodb.DBObject;

        $r3 = virtualinvoke r0.<com.mongodb.DBCollection: com.mongodb.WriteResult update(com.mongodb.DBObject,com.mongodb.DBObject,boolean,boolean)>(r1, r2, 0, 0);

        return $r3;
    }

    public com.mongodb.WriteResult updateMulti(com.mongodb.DBObject, com.mongodb.DBObject) throws com.mongodb.MongoException
    {
        com.mongodb.WriteResult $r3;
        com.mongodb.DBObject r1, r2;
        com.mongodb.DBCollection r0;

        r0 := @this: com.mongodb.DBCollection;

        r1 := @parameter0: com.mongodb.DBObject;

        r2 := @parameter1: com.mongodb.DBObject;

        $r3 = virtualinvoke r0.<com.mongodb.DBCollection: com.mongodb.WriteResult update(com.mongodb.DBObject,com.mongodb.DBObject,boolean,boolean)>(r1, r2, 0, 1);

        return $r3;
    }

    protected abstract void doapply(com.mongodb.DBObject);

    public abstract com.mongodb.WriteResult remove(com.mongodb.DBObject, com.mongodb.WriteConcern) throws com.mongodb.MongoException;

    public com.mongodb.WriteResult remove(com.mongodb.DBObject) throws com.mongodb.MongoException
    {
        com.mongodb.WriteResult $r3;
        com.mongodb.DBObject r1;
        com.mongodb.DBCollection r0;
        com.mongodb.WriteConcern $r2;

        r0 := @this: com.mongodb.DBCollection;

        r1 := @parameter0: com.mongodb.DBObject;

        $r2 = virtualinvoke r0.<com.mongodb.DBCollection: com.mongodb.WriteConcern getWriteConcern()>();

        $r3 = virtualinvoke r0.<com.mongodb.DBCollection: com.mongodb.WriteResult remove(com.mongodb.DBObject,com.mongodb.WriteConcern)>(r1, $r2);

        return $r3;
    }

    abstract java.util.Iterator __find(com.mongodb.DBObject, com.mongodb.DBObject, int, int, int) throws com.mongodb.MongoException;

    public final com.mongodb.DBCursor find(com.mongodb.DBObject, com.mongodb.DBObject, int, int, int) throws com.mongodb.MongoException
    {
        com.mongodb.DBCollection r0;
        com.mongodb.DBObject r1, r2;
        com.mongodb.DBCursor $r3, $r4;
        int i0, i1, i2;

        r0 := @this: com.mongodb.DBCollection;

        r1 := @parameter0: com.mongodb.DBObject;

        r2 := @parameter1: com.mongodb.DBObject;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        $r3 = virtualinvoke r0.<com.mongodb.DBCollection: com.mongodb.DBCursor find(com.mongodb.DBObject,com.mongodb.DBObject,int,int)>(r1, r2, i0, i1);

        $r4 = virtualinvoke $r3.<com.mongodb.DBCursor: com.mongodb.DBCursor addOption(int)>(i2);

        return $r4;
    }

    public final com.mongodb.DBCursor find(com.mongodb.DBObject, com.mongodb.DBObject, int, int)
    {
        com.mongodb.DBCollection r0;
        com.mongodb.DBObject r1, r2;
        com.mongodb.DBCursor $r3, $r4, $r5;
        int i0, i1, $i2;

        r0 := @this: com.mongodb.DBCollection;

        r1 := @parameter0: com.mongodb.DBObject;

        r2 := @parameter1: com.mongodb.DBObject;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r3 = virtualinvoke r0.<com.mongodb.DBCollection: com.mongodb.DBCursor find(com.mongodb.DBObject,com.mongodb.DBObject)>(r1, r2);

        $r4 = virtualinvoke $r3.<com.mongodb.DBCursor: com.mongodb.DBCursor skip(int)>(i0);

        $r5 = virtualinvoke $r4.<com.mongodb.DBCursor: com.mongodb.DBCursor batchSize(int)>(i1);

        if i1 >= 0 goto label1;

        $i2 = staticinvoke <java.lang.Math: int abs(int)>(i1);

        virtualinvoke $r5.<com.mongodb.DBCursor: com.mongodb.DBCursor limit(int)>($i2);

     label1:
        return $r5;
    }

    java.util.Iterator __find(com.mongodb.DBObject, com.mongodb.DBObject, int, int) throws com.mongodb.MongoException
    {
        com.mongodb.DBObject r1, r2;
        java.util.Iterator $r3;
        com.mongodb.DBCollection r0;
        int i0, i1;

        r0 := @this: com.mongodb.DBCollection;

        r1 := @parameter0: com.mongodb.DBObject;

        r2 := @parameter1: com.mongodb.DBObject;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r3 = virtualinvoke r0.<com.mongodb.DBCollection: java.util.Iterator __find(com.mongodb.DBObject,com.mongodb.DBObject,int,int,int)>(r1, r2, i0, i1, 0);

        return $r3;
    }

    protected abstract void createIndex(com.mongodb.DBObject, com.mongodb.DBObject) throws com.mongodb.MongoException;

    public final com.mongodb.DBObject findOne(java.lang.Object) throws com.mongodb.MongoException
    {
        com.mongodb.DBCollection r0;
        java.lang.Object r1;
        com.mongodb.DBObject $r2;

        r0 := @this: com.mongodb.DBCollection;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.mongodb.DBCollection: com.mongodb.DBObject findOne(java.lang.Object,com.mongodb.DBObject)>(r1, null);

        return $r2;
    }

    public final com.mongodb.DBObject findOne(java.lang.Object, com.mongodb.DBObject)
    {
        java.util.Iterator $r4;
        com.mongodb.DBCollection r0;
        com.mongodb.BasicDBObject $r7;
        com.mongodb.DBObject r3, $r6;
        int $i1;
        java.lang.Object r2, $r5;

        r0 := @this: com.mongodb.DBCollection;

        r2 := @parameter0: java.lang.Object;

        r3 := @parameter1: com.mongodb.DBObject;

        $r7 = new com.mongodb.BasicDBObject;

        specialinvoke $r7.<com.mongodb.BasicDBObject: void <init>(java.lang.String,java.lang.Object)>("_id", r2);

        $i1 = (int) -1;

        $r4 = virtualinvoke r0.<com.mongodb.DBCollection: java.util.Iterator __find(com.mongodb.DBObject,com.mongodb.DBObject,int,int,int)>($r7, r3, 0, $i1, 0);

        if $r4 == null goto label1;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (com.mongodb.DBObject) $r5;

        goto label2;

     label1:
        $r6 = null;

     label2:
        return $r6;
    }

    public com.mongodb.DBObject findAndModify(com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.DBObject, boolean, com.mongodb.DBObject, boolean, boolean)
    {
        com.mongodb.CommandResult $r38;
        com.mongodb.DBObject r3, r4, r5, r6, $r40;
        boolean $z0, z1, z2, z3, $z4, $z5, $z6, $z7, $z8;
        com.mongodb.MongoException $r8;
        java.util.Set $r7, $r11, $r13, $r14, $r15;
        java.lang.StringBuilder $r16, $r18, $r20, $r21, $r23, $r24, $r26, $r27, $r28, $r29, $r31, $r32, $r33, $r34, $r35;
        com.mongodb.DB $r37;
        java.lang.Boolean $r9, $r10, $r12;
        java.lang.String $r2, $r19, $r22, $r25, $r30, $r36;
        java.io.PrintStream $r17;
        com.mongodb.BasicDBObject $r0;
        com.mongodb.DBCollection r1;
        java.lang.Object $r39;

        r1 := @this: com.mongodb.DBCollection;

        r3 := @parameter0: com.mongodb.DBObject;

        r4 := @parameter1: com.mongodb.DBObject;

        r5 := @parameter2: com.mongodb.DBObject;

        z1 := @parameter3: boolean;

        r6 := @parameter4: com.mongodb.DBObject;

        z2 := @parameter5: boolean;

        z3 := @parameter6: boolean;

        $z0 = <com.mongodb.DBCollection: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r17 = <java.lang.System: java.io.PrintStream out>;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("findAndModify: ");

        $r19 = r1.<com.mongodb.DBCollection: java.lang.String _fullName>;

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" query:");

        $r22 = staticinvoke <com.mongodb.util.JSON: java.lang.String serialize(java.lang.Object)>(r3);

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" sort:");

        $r25 = staticinvoke <com.mongodb.util.JSON: java.lang.String serialize(java.lang.Object)>(r5);

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" remove:");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z1);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" update: ");

        $r30 = staticinvoke <com.mongodb.util.JSON: java.lang.String serialize(java.lang.Object)>(r6);

        $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" upsert: ");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z3);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" returnNew:");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z2);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r17.<java.io.PrintStream: void println(java.lang.String)>($r36);

     label1:
        $r0 = new com.mongodb.BasicDBObject;

        $r2 = r1.<com.mongodb.DBCollection: java.lang.String _name>;

        specialinvoke $r0.<com.mongodb.BasicDBObject: void <init>(java.lang.String,java.lang.Object)>("findandmodify", $r2);

        if r3 == null goto label2;

        $r15 = interfaceinvoke r3.<com.mongodb.DBObject: java.util.Set keySet()>();

        $z8 = interfaceinvoke $r15.<java.util.Set: boolean isEmpty()>();

        if $z8 != 0 goto label2;

        virtualinvoke $r0.<com.mongodb.BasicDBObject: com.mongodb.BasicDBObject append(java.lang.String,java.lang.Object)>("query", r3);

     label2:
        if r4 == null goto label3;

        $r14 = interfaceinvoke r4.<com.mongodb.DBObject: java.util.Set keySet()>();

        $z7 = interfaceinvoke $r14.<java.util.Set: boolean isEmpty()>();

        if $z7 != 0 goto label3;

        virtualinvoke $r0.<com.mongodb.BasicDBObject: com.mongodb.BasicDBObject append(java.lang.String,java.lang.Object)>("fields", r4);

     label3:
        if r5 == null goto label4;

        $r13 = interfaceinvoke r5.<com.mongodb.DBObject: java.util.Set keySet()>();

        $z6 = interfaceinvoke $r13.<java.util.Set: boolean isEmpty()>();

        if $z6 != 0 goto label4;

        virtualinvoke $r0.<com.mongodb.BasicDBObject: com.mongodb.BasicDBObject append(java.lang.String,java.lang.Object)>("sort", r5);

     label4:
        if z1 == 0 goto label5;

        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z1);

        virtualinvoke $r0.<com.mongodb.BasicDBObject: com.mongodb.BasicDBObject append(java.lang.String,java.lang.Object)>("remove", $r12);

        goto label8;

     label5:
        if r6 == null goto label6;

        $r11 = interfaceinvoke r6.<com.mongodb.DBObject: java.util.Set keySet()>();

        $z5 = interfaceinvoke $r11.<java.util.Set: boolean isEmpty()>();

        if $z5 != 0 goto label6;

        virtualinvoke $r0.<com.mongodb.BasicDBObject: com.mongodb.BasicDBObject append(java.lang.String,java.lang.Object)>("update", r6);

     label6:
        if z2 == 0 goto label7;

        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z2);

        virtualinvoke $r0.<com.mongodb.BasicDBObject: com.mongodb.BasicDBObject append(java.lang.String,java.lang.Object)>("new", $r10);

     label7:
        if z3 == 0 goto label8;

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z2);

        virtualinvoke $r0.<com.mongodb.BasicDBObject: com.mongodb.BasicDBObject append(java.lang.String,java.lang.Object)>("upsert", $r9);

     label8:
        if z1 == 0 goto label9;

        if r6 == null goto label9;

        $r7 = interfaceinvoke r6.<com.mongodb.DBObject: java.util.Set keySet()>();

        $z4 = interfaceinvoke $r7.<java.util.Set: boolean isEmpty()>();

        if $z4 != 0 goto label9;

        if z2 != 0 goto label9;

        $r8 = new com.mongodb.MongoException;

        specialinvoke $r8.<com.mongodb.MongoException: void <init>(java.lang.String)>("FindAndModify: Remove cannot be mixed with the Update, or returnNew params!");

        throw $r8;

     label9:
        $r37 = r1.<com.mongodb.DBCollection: com.mongodb.DB _db>;

        $r38 = virtualinvoke $r37.<com.mongodb.DB: com.mongodb.CommandResult command(com.mongodb.DBObject)>($r0);

        $r39 = virtualinvoke $r38.<com.mongodb.CommandResult: java.lang.Object get(java.lang.String)>("value");

        $r40 = (com.mongodb.DBObject) $r39;

        return $r40;
    }

    public com.mongodb.DBObject findAndModify(com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.DBObject)
    {
        com.mongodb.DBObject r1, r2, $r3, r4;
        com.mongodb.DBCollection r0;

        r0 := @this: com.mongodb.DBCollection;

        r1 := @parameter0: com.mongodb.DBObject;

        r4 := @parameter1: com.mongodb.DBObject;

        r2 := @parameter2: com.mongodb.DBObject;

        $r3 = virtualinvoke r0.<com.mongodb.DBCollection: com.mongodb.DBObject findAndModify(com.mongodb.DBObject,com.mongodb.DBObject,com.mongodb.DBObject,boolean,com.mongodb.DBObject,boolean,boolean)>(r1, null, null, 0, r2, 0, 0);

        return $r3;
    }

    public com.mongodb.DBObject findAndModify(com.mongodb.DBObject, com.mongodb.DBObject)
    {
        com.mongodb.DBObject r1, r2, $r3;
        com.mongodb.DBCollection r0;

        r0 := @this: com.mongodb.DBCollection;

        r1 := @parameter0: com.mongodb.DBObject;

        r2 := @parameter1: com.mongodb.DBObject;

        $r3 = virtualinvoke r0.<com.mongodb.DBCollection: com.mongodb.DBObject findAndModify(com.mongodb.DBObject,com.mongodb.DBObject,com.mongodb.DBObject,boolean,com.mongodb.DBObject,boolean,boolean)>(r1, null, null, 0, r2, 0, 0);

        return $r3;
    }

    public com.mongodb.DBObject findAndRemove(com.mongodb.DBObject)
    {
        com.mongodb.DBCollection r0;
        com.mongodb.DBObject r1, $r2;

        r0 := @this: com.mongodb.DBCollection;

        r1 := @parameter0: com.mongodb.DBObject;

        $r2 = virtualinvoke r0.<com.mongodb.DBCollection: com.mongodb.DBObject findAndModify(com.mongodb.DBObject,com.mongodb.DBObject,com.mongodb.DBObject,boolean,com.mongodb.DBObject,boolean,boolean)>(r1, null, null, 1, null, 0, 0);

        return $r2;
    }

    public final void createIndex(com.mongodb.DBObject) throws com.mongodb.MongoException
    {
        com.mongodb.DBCollection r0;
        com.mongodb.DBObject r1, $r2;

        r0 := @this: com.mongodb.DBCollection;

        r1 := @parameter0: com.mongodb.DBObject;

        $r2 = virtualinvoke r0.<com.mongodb.DBCollection: com.mongodb.DBObject defaultOptions(com.mongodb.DBObject)>(r1);

        virtualinvoke r0.<com.mongodb.DBCollection: void createIndex(com.mongodb.DBObject,com.mongodb.DBObject)>(r1, $r2);

        return;
    }

    public final void ensureIndex(java.lang.String)
    {
        com.mongodb.DBCollection r0;
        com.mongodb.BasicDBObject $r1;
        java.lang.String r2;
        java.lang.Integer $r3;

        r0 := @this: com.mongodb.DBCollection;

        r2 := @parameter0: java.lang.String;

        $r1 = new com.mongodb.BasicDBObject;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        specialinvoke $r1.<com.mongodb.BasicDBObject: void <init>(java.lang.String,java.lang.Object)>(r2, $r3);

        virtualinvoke r0.<com.mongodb.DBCollection: void ensureIndex(com.mongodb.DBObject)>($r1);

        return;
    }

    public final void ensureIndex(com.mongodb.DBObject) throws com.mongodb.MongoException
    {
        com.mongodb.DBCollection r0;
        com.mongodb.DBObject r1, $r2;

        r0 := @this: com.mongodb.DBCollection;

        r1 := @parameter0: com.mongodb.DBObject;

        $r2 = virtualinvoke r0.<com.mongodb.DBCollection: com.mongodb.DBObject defaultOptions(com.mongodb.DBObject)>(r1);

        virtualinvoke r0.<com.mongodb.DBCollection: void ensureIndex(com.mongodb.DBObject,com.mongodb.DBObject)>(r1, $r2);

        return;
    }

    public void ensureIndex(com.mongodb.DBObject, java.lang.String) throws com.mongodb.MongoException
    {
        com.mongodb.DBCollection r0;
        java.lang.String r2;
        com.mongodb.DBObject r1;

        r0 := @this: com.mongodb.DBCollection;

        r1 := @parameter0: com.mongodb.DBObject;

        r2 := @parameter1: java.lang.String;

        virtualinvoke r0.<com.mongodb.DBCollection: void ensureIndex(com.mongodb.DBObject,java.lang.String,boolean)>(r1, r2, 0);

        return;
    }

    public void ensureIndex(com.mongodb.DBObject, java.lang.String, boolean) throws com.mongodb.MongoException
    {
        com.mongodb.DBObject r1, $r2;
        com.mongodb.DBCollection r0;
        java.lang.Boolean $r4;
        java.lang.String r3;
        boolean z0;

        r0 := @this: com.mongodb.DBCollection;

        r1 := @parameter0: com.mongodb.DBObject;

        r3 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        $r2 = virtualinvoke r0.<com.mongodb.DBCollection: com.mongodb.DBObject defaultOptions(com.mongodb.DBObject)>(r1);

        interfaceinvoke $r2.<com.mongodb.DBObject: java.lang.Object put(java.lang.String,java.lang.Object)>("name", r3);

        if z0 == 0 goto label1;

        $r4 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        interfaceinvoke $r2.<com.mongodb.DBObject: java.lang.Object put(java.lang.String,java.lang.Object)>("unique", $r4);

     label1:
        virtualinvoke r0.<com.mongodb.DBCollection: void ensureIndex(com.mongodb.DBObject,com.mongodb.DBObject)>(r1, $r2);

        return;
    }

    public final void ensureIndex(com.mongodb.DBObject, com.mongodb.DBObject) throws com.mongodb.MongoException
    {
        com.mongodb.DBObject r1, $r2, r3;
        java.lang.String $r7, r14;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, z6;
        java.util.Iterator $r5;
        com.mongodb.DBCollection r0;
        java.util.Set $r4, $r8, $r9, $r10, $r11;
        java.lang.Object $r6, $r12, $r13;

        r0 := @this: com.mongodb.DBCollection;

        r1 := @parameter0: com.mongodb.DBObject;

        r3 := @parameter1: com.mongodb.DBObject;

        $z0 = virtualinvoke r0.<com.mongodb.DBCollection: boolean checkReadOnly(boolean)>(0);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = virtualinvoke r0.<com.mongodb.DBCollection: com.mongodb.DBObject defaultOptions(com.mongodb.DBObject)>(r1);

        $r4 = interfaceinvoke r3.<com.mongodb.DBObject: java.util.Set keySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r12 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r14 = (java.lang.String) $r12;

        $r13 = interfaceinvoke r3.<com.mongodb.DBObject: java.lang.Object get(java.lang.String)>(r14);

        interfaceinvoke $r2.<com.mongodb.DBObject: java.lang.Object put(java.lang.String,java.lang.Object)>(r14, $r13);

        goto label2;

     label3:
        $r6 = interfaceinvoke $r2.<com.mongodb.DBObject: java.lang.Object get(java.lang.String)>("name");

        $r7 = virtualinvoke $r6.<java.lang.Object: java.lang.String toString()>();

        z6 = 0;

        $r8 = r0.<com.mongodb.DBCollection: java.util.Set _createIndexes>;

        $z2 = interfaceinvoke $r8.<java.util.Set: boolean contains(java.lang.Object)>($r7);

        if $z2 != 0 goto label4;

        z6 = 1;

        goto label5;

     label4:
        $z3 = r0.<com.mongodb.DBCollection: boolean _anyUpdateSave>;

        if $z3 == 0 goto label5;

        $r11 = r0.<com.mongodb.DBCollection: java.util.Set _createIndexesAfterSave>;

        $z5 = interfaceinvoke $r11.<java.util.Set: boolean contains(java.lang.Object)>($r7);

        if $z5 != 0 goto label5;

        z6 = 1;

     label5:
        if z6 != 0 goto label6;

        return;

     label6:
        virtualinvoke r0.<com.mongodb.DBCollection: void createIndex(com.mongodb.DBObject,com.mongodb.DBObject)>(r1, $r2);

        $r9 = r0.<com.mongodb.DBCollection: java.util.Set _createIndexes>;

        interfaceinvoke $r9.<java.util.Set: boolean add(java.lang.Object)>($r7);

        $z4 = r0.<com.mongodb.DBCollection: boolean _anyUpdateSave>;

        if $z4 == 0 goto label7;

        $r10 = r0.<com.mongodb.DBCollection: java.util.Set _createIndexesAfterSave>;

        interfaceinvoke $r10.<java.util.Set: boolean add(java.lang.Object)>($r7);

     label7:
        return;
    }

    public void resetIndexCache()
    {
        com.mongodb.DBCollection r0;
        java.util.Set $r1;

        r0 := @this: com.mongodb.DBCollection;

        $r1 = r0.<com.mongodb.DBCollection: java.util.Set _createIndexes>;

        interfaceinvoke $r1.<java.util.Set: void clear()>();

        return;
    }

    com.mongodb.DBObject defaultOptions(com.mongodb.DBObject)
    {
        com.mongodb.DBObject r1;
        com.mongodb.BasicDBObject $r0;
        com.mongodb.DBCollection r3;
        java.lang.String $r2, $r4;

        r3 := @this: com.mongodb.DBCollection;

        r1 := @parameter0: com.mongodb.DBObject;

        $r0 = new com.mongodb.BasicDBObject;

        specialinvoke $r0.<com.mongodb.BasicDBObject: void <init>()>();

        $r2 = staticinvoke <com.mongodb.DBCollection: java.lang.String genIndexName(com.mongodb.DBObject)>(r1);

        interfaceinvoke $r0.<com.mongodb.DBObject: java.lang.Object put(java.lang.String,java.lang.Object)>("name", $r2);

        $r4 = r3.<com.mongodb.DBCollection: java.lang.String _fullName>;

        interfaceinvoke $r0.<com.mongodb.DBObject: java.lang.Object put(java.lang.String,java.lang.Object)>("ns", $r4);

        return $r0;
    }

    public static java.lang.String genIndexName(com.mongodb.DBObject)
    {
        com.mongodb.DBObject r0;
        int $i0;
        java.lang.String r4, $r9, $r13, $r14, r19;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r2;
        java.util.Set $r1;
        java.lang.Object $r3, $r10;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r11, $r12, $r15, $r16, $r17, $r18;

        r0 := @parameter0: com.mongodb.DBObject;

        r19 = "";

        $r1 = interfaceinvoke r0.<com.mongodb.DBObject: java.util.Set keySet()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r3;

        $i0 = virtualinvoke r19.<java.lang.String: int length()>();

        if $i0 <= 0 goto label2;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r19);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_");

        r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r19);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        r19 = $r9;

        $r10 = interfaceinvoke r0.<com.mongodb.DBObject: java.lang.Object get(java.lang.String)>(r4);

        $z1 = $r10 instanceof java.lang.Number;

        if $z1 != 0 goto label3;

        $z2 = $r10 instanceof java.lang.String;

        if $z2 == 0 goto label4;

     label3:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r13 = virtualinvoke $r10.<java.lang.Object: java.lang.String toString()>();

        $r14 = virtualinvoke $r13.<java.lang.String: java.lang.String replace(char,char)>(32, 95);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        r19 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

     label4:
        goto label1;

     label5:
        return r19;
    }

    public void setHintFields(java.util.List)
    {
        com.mongodb.DBCollection r0;
        java.util.List r1;

        r0 := @this: com.mongodb.DBCollection;

        r1 := @parameter0: java.util.List;

        r0.<com.mongodb.DBCollection: java.util.List _hintFields> = r1;

        return;
    }

    public final com.mongodb.DBCursor find(com.mongodb.DBObject)
    {
        com.mongodb.DBCollection r1;
        com.mongodb.DBObject r2;
        com.mongodb.DBCursor $r0;

        r1 := @this: com.mongodb.DBCollection;

        r2 := @parameter0: com.mongodb.DBObject;

        $r0 = new com.mongodb.DBCursor;

        specialinvoke $r0.<com.mongodb.DBCursor: void <init>(com.mongodb.DBCollection,com.mongodb.DBObject,com.mongodb.DBObject)>(r1, r2, null);

        return $r0;
    }

    public final com.mongodb.DBCursor find(com.mongodb.DBObject, com.mongodb.DBObject)
    {
        com.mongodb.DBObject r2, r3;
        com.mongodb.DBCursor $r0;
        com.mongodb.DBCollection r1;

        r1 := @this: com.mongodb.DBCollection;

        r2 := @parameter0: com.mongodb.DBObject;

        r3 := @parameter1: com.mongodb.DBObject;

        $r0 = new com.mongodb.DBCursor;

        specialinvoke $r0.<com.mongodb.DBCursor: void <init>(com.mongodb.DBCollection,com.mongodb.DBObject,com.mongodb.DBObject)>(r1, r2, r3);

        return $r0;
    }

    public final com.mongodb.DBCursor find()
    {
        com.mongodb.DBCollection r1;
        com.mongodb.BasicDBObject $r2;
        com.mongodb.DBCursor $r0;

        r1 := @this: com.mongodb.DBCollection;

        $r0 = new com.mongodb.DBCursor;

        $r2 = new com.mongodb.BasicDBObject;

        specialinvoke $r2.<com.mongodb.BasicDBObject: void <init>()>();

        specialinvoke $r0.<com.mongodb.DBCursor: void <init>(com.mongodb.DBCollection,com.mongodb.DBObject,com.mongodb.DBObject)>(r1, $r2, null);

        return $r0;
    }

    public final com.mongodb.DBObject findOne() throws com.mongodb.MongoException
    {
        com.mongodb.DBCollection r0;
        com.mongodb.BasicDBObject $r1;
        com.mongodb.DBObject $r2;

        r0 := @this: com.mongodb.DBCollection;

        $r1 = new com.mongodb.BasicDBObject;

        specialinvoke $r1.<com.mongodb.BasicDBObject: void <init>()>();

        $r2 = virtualinvoke r0.<com.mongodb.DBCollection: com.mongodb.DBObject findOne(com.mongodb.DBObject)>($r1);

        return $r2;
    }

    public final com.mongodb.DBObject findOne(com.mongodb.DBObject) throws com.mongodb.MongoException
    {
        com.mongodb.DBCollection r0;
        com.mongodb.DBObject r1, $r2;

        r0 := @this: com.mongodb.DBCollection;

        r1 := @parameter0: com.mongodb.DBObject;

        $r2 = virtualinvoke r0.<com.mongodb.DBCollection: com.mongodb.DBObject findOne(com.mongodb.DBObject,com.mongodb.DBObject)>(r1, null);

        return $r2;
    }

    public final com.mongodb.DBObject findOne(com.mongodb.DBObject, com.mongodb.DBObject)
    {
        java.util.Iterator $r3;
        com.mongodb.DBCollection r0;
        com.mongodb.DBObject r1, r2, $r5;
        int $i1;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: com.mongodb.DBCollection;

        r1 := @parameter0: com.mongodb.DBObject;

        r2 := @parameter1: com.mongodb.DBObject;

        $i1 = (int) -1;

        $r3 = virtualinvoke r0.<com.mongodb.DBCollection: java.util.Iterator __find(com.mongodb.DBObject,com.mongodb.DBObject,int,int,int)>(r1, r2, 0, $i1, 0);

        if $r3 == null goto label1;

        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

     label1:
        return null;

     label2:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (com.mongodb.DBObject) $r4;

        return $r5;
    }

    public final java.lang.Object apply(com.mongodb.DBObject)
    {
        com.mongodb.DBCollection r0;
        java.lang.Object $r2;
        com.mongodb.DBObject r1;

        r0 := @this: com.mongodb.DBCollection;

        r1 := @parameter0: com.mongodb.DBObject;

        $r2 = virtualinvoke r0.<com.mongodb.DBCollection: java.lang.Object apply(com.mongodb.DBObject,boolean)>(r1, 1);

        return $r2;
    }

    public final java.lang.Object apply(com.mongodb.DBObject, boolean)
    {
        com.mongodb.DBObject r0;
        com.mongodb.DBCollection r2;
        org.bson.types.ObjectId $r3;
        java.lang.Object $r1, r4;
        boolean z0;

        r2 := @this: com.mongodb.DBCollection;

        r0 := @parameter0: com.mongodb.DBObject;

        z0 := @parameter1: boolean;

        $r1 = interfaceinvoke r0.<com.mongodb.DBObject: java.lang.Object get(java.lang.String)>("_id");

        r4 = $r1;

        if z0 == 0 goto label1;

        if $r1 != null goto label1;

        $r3 = staticinvoke <org.bson.types.ObjectId: org.bson.types.ObjectId get()>();

        r4 = $r3;

        interfaceinvoke r0.<com.mongodb.DBObject: java.lang.Object put(java.lang.String,java.lang.Object)>("_id", $r3);

     label1:
        virtualinvoke r2.<com.mongodb.DBCollection: void doapply(com.mongodb.DBObject)>(r0);

        return r4;
    }

    public final com.mongodb.WriteResult save(com.mongodb.DBObject)
    {
        com.mongodb.DBCollection r0;
        com.mongodb.WriteResult $r2;
        com.mongodb.DBObject r1;

        r0 := @this: com.mongodb.DBCollection;

        r1 := @parameter0: com.mongodb.DBObject;

        $r2 = virtualinvoke r0.<com.mongodb.DBCollection: com.mongodb.WriteResult save(com.mongodb.DBObject,com.mongodb.WriteConcern)>(r1, null);

        return $r2;
    }

    public final com.mongodb.WriteResult save(com.mongodb.DBObject, com.mongodb.WriteConcern) throws com.mongodb.MongoException
    {
        com.mongodb.DBObject[] $r5;
        com.mongodb.WriteResult $r4, $r6, $r10, $r11;
        com.mongodb.DBObject r1;
        java.lang.String $r17, $r23;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.io.PrintStream $r8, $r13, $r20;
        com.mongodb.DBCollection r0;
        com.mongodb.BasicDBObject $r9;
        org.bson.types.ObjectId $r7, $r18;
        java.lang.Object $r2, $r15;
        java.lang.StringBuilder $r12, $r14, $r16, $r19, $r21, $r22;
        com.mongodb.WriteConcern r3;

        r0 := @this: com.mongodb.DBCollection;

        r1 := @parameter0: com.mongodb.DBObject;

        r3 := @parameter1: com.mongodb.WriteConcern;

        $z0 = virtualinvoke r0.<com.mongodb.DBCollection: boolean checkReadOnly(boolean)>(1);

        if $z0 == 0 goto label1;

        return null;

     label1:
        specialinvoke r0.<com.mongodb.DBCollection: com.mongodb.DBObject _checkObject(com.mongodb.DBObject,boolean,boolean)>(r1, 0, 0);

        $r2 = interfaceinvoke r1.<com.mongodb.DBObject: java.lang.Object get(java.lang.String)>("_id");

        $z1 = <com.mongodb.DBCollection: boolean DEBUG>;

        if $z1 == 0 goto label2;

        $r20 = <java.lang.System: java.io.PrintStream out>;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("id : ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r20.<java.io.PrintStream: void println(java.lang.String)>($r23);

     label2:
        if $r2 == null goto label3;

        $z4 = $r2 instanceof org.bson.types.ObjectId;

        if $z4 == 0 goto label7;

        $r18 = (org.bson.types.ObjectId) $r2;

        $z6 = virtualinvoke $r18.<org.bson.types.ObjectId: boolean isNew()>();

        if $z6 == 0 goto label7;

     label3:
        $z2 = <com.mongodb.DBCollection: boolean DEBUG>;

        if $z2 == 0 goto label4;

        $r8 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>("saving new object");

     label4:
        if $r2 == null goto label5;

        $z3 = $r2 instanceof org.bson.types.ObjectId;

        if $z3 == 0 goto label5;

        $r7 = (org.bson.types.ObjectId) $r2;

        virtualinvoke $r7.<org.bson.types.ObjectId: void notNew()>();

     label5:
        if r3 != null goto label6;

        $r5 = newarray (com.mongodb.DBObject)[1];

        $r5[0] = r1;

        $r6 = virtualinvoke r0.<com.mongodb.DBCollection: com.mongodb.WriteResult insert(com.mongodb.DBObject[])>($r5);

        return $r6;

     label6:
        $r4 = virtualinvoke r0.<com.mongodb.DBCollection: com.mongodb.WriteResult insert(com.mongodb.DBObject,com.mongodb.WriteConcern)>(r1, r3);

        return $r4;

     label7:
        $z5 = <com.mongodb.DBCollection: boolean DEBUG>;

        if $z5 == 0 goto label8;

        $r13 = <java.lang.System: java.io.PrintStream out>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("doing implicit upsert : ");

        $r15 = interfaceinvoke r1.<com.mongodb.DBObject: java.lang.Object get(java.lang.String)>("_id");

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>($r17);

     label8:
        $r9 = new com.mongodb.BasicDBObject;

        specialinvoke $r9.<com.mongodb.BasicDBObject: void <init>()>();

        interfaceinvoke $r9.<com.mongodb.DBObject: java.lang.Object put(java.lang.String,java.lang.Object)>("_id", $r2);

        if r3 != null goto label9;

        $r11 = virtualinvoke r0.<com.mongodb.DBCollection: com.mongodb.WriteResult update(com.mongodb.DBObject,com.mongodb.DBObject,boolean,boolean)>($r9, r1, 1, 0);

        return $r11;

     label9:
        $r10 = virtualinvoke r0.<com.mongodb.DBCollection: com.mongodb.WriteResult update(com.mongodb.DBObject,com.mongodb.DBObject,boolean,boolean,com.mongodb.WriteConcern)>($r9, r1, 1, 0, r3);

        return $r10;
    }

    public void dropIndexes() throws com.mongodb.MongoException
    {
        com.mongodb.DBCollection r0;

        r0 := @this: com.mongodb.DBCollection;

        virtualinvoke r0.<com.mongodb.DBCollection: void dropIndexes(java.lang.String)>("*");

        return;
    }

    public void dropIndexes(java.lang.String) throws com.mongodb.MongoException
    {
        com.mongodb.CommandResult $r8;
        com.mongodb.DBObject $r6;
        java.lang.String $r2, r4, $r9, $r14;
        boolean $z0, $z1;
        com.mongodb.BasicDBObjectBuilder $r0, $r3, $r5;
        com.mongodb.MongoException $r10;
        com.mongodb.DBCollection r1;
        com.mongodb.DB $r7;
        java.lang.StringBuilder $r11, $r12, $r13;

        r1 := @this: com.mongodb.DBCollection;

        r4 := @parameter0: java.lang.String;

        $r0 = staticinvoke <com.mongodb.BasicDBObjectBuilder: com.mongodb.BasicDBObjectBuilder start()>();

        $r2 = virtualinvoke r1.<com.mongodb.DBCollection: java.lang.String getName()>();

        $r3 = virtualinvoke $r0.<com.mongodb.BasicDBObjectBuilder: com.mongodb.BasicDBObjectBuilder add(java.lang.String,java.lang.Object)>("deleteIndexes", $r2);

        $r5 = virtualinvoke $r3.<com.mongodb.BasicDBObjectBuilder: com.mongodb.BasicDBObjectBuilder add(java.lang.String,java.lang.Object)>("index", r4);

        $r6 = virtualinvoke $r5.<com.mongodb.BasicDBObjectBuilder: com.mongodb.DBObject get()>();

        $r7 = r1.<com.mongodb.DBCollection: com.mongodb.DB _db>;

        $r8 = virtualinvoke $r7.<com.mongodb.DB: com.mongodb.CommandResult command(com.mongodb.DBObject)>($r6);

        $z0 = virtualinvoke $r8.<com.mongodb.CommandResult: boolean ok()>();

        if $z0 != 0 goto label1;

        $r9 = virtualinvoke $r8.<com.mongodb.CommandResult: java.lang.String getErrorMessage()>();

        $z1 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>("ns not found");

        if $z1 == 0 goto label2;

     label1:
        virtualinvoke r1.<com.mongodb.DBCollection: void resetIndexCache()>();

        return;

     label2:
        $r10 = new com.mongodb.MongoException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("error dropping indexes : ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<com.mongodb.MongoException: void <init>(java.lang.String)>($r14);

        throw $r10;
    }

    public void drop() throws com.mongodb.MongoException
    {
        com.mongodb.BasicDBObjectBuilder $r2, $r4;
        com.mongodb.MongoException $r8;
        com.mongodb.DBCollection r0;
        com.mongodb.CommandResult $r6;
        com.mongodb.DBObject $r5;
        com.mongodb.DB $r1;
        java.lang.StringBuilder $r9, $r10, $r11;
        java.lang.String $r3, $r7, $r12;
        boolean $z0, $z1;

        r0 := @this: com.mongodb.DBCollection;

        $r1 = r0.<com.mongodb.DBCollection: com.mongodb.DB _db>;

        $r2 = staticinvoke <com.mongodb.BasicDBObjectBuilder: com.mongodb.BasicDBObjectBuilder start()>();

        $r3 = virtualinvoke r0.<com.mongodb.DBCollection: java.lang.String getName()>();

        $r4 = virtualinvoke $r2.<com.mongodb.BasicDBObjectBuilder: com.mongodb.BasicDBObjectBuilder add(java.lang.String,java.lang.Object)>("drop", $r3);

        $r5 = virtualinvoke $r4.<com.mongodb.BasicDBObjectBuilder: com.mongodb.DBObject get()>();

        $r6 = virtualinvoke $r1.<com.mongodb.DB: com.mongodb.CommandResult command(com.mongodb.DBObject)>($r5);

        $z0 = virtualinvoke $r6.<com.mongodb.CommandResult: boolean ok()>();

        if $z0 != 0 goto label1;

        $r7 = virtualinvoke $r6.<com.mongodb.CommandResult: java.lang.String getErrorMessage()>();

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>("ns not found");

        if $z1 == 0 goto label2;

     label1:
        return;

     label2:
        $r8 = new com.mongodb.MongoException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("error dropping : ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<com.mongodb.MongoException: void <init>(java.lang.String)>($r12);

        throw $r8;
    }

    public long count() throws com.mongodb.MongoException
    {
        com.mongodb.DBCollection r0;
        com.mongodb.BasicDBObject $r1;
        long $l0;

        r0 := @this: com.mongodb.DBCollection;

        $r1 = new com.mongodb.BasicDBObject;

        specialinvoke $r1.<com.mongodb.BasicDBObject: void <init>()>();

        $l0 = virtualinvoke r0.<com.mongodb.DBCollection: long getCount(com.mongodb.DBObject,com.mongodb.DBObject)>($r1, null);

        return $l0;
    }

    public long count(com.mongodb.DBObject) throws com.mongodb.MongoException
    {
        com.mongodb.DBCollection r0;
        long $l0;
        com.mongodb.DBObject r1;

        r0 := @this: com.mongodb.DBCollection;

        r1 := @parameter0: com.mongodb.DBObject;

        $l0 = virtualinvoke r0.<com.mongodb.DBCollection: long getCount(com.mongodb.DBObject,com.mongodb.DBObject)>(r1, null);

        return $l0;
    }

    public long getCount() throws com.mongodb.MongoException
    {
        com.mongodb.DBCollection r0;
        com.mongodb.BasicDBObject $r1;
        long $l0;

        r0 := @this: com.mongodb.DBCollection;

        $r1 = new com.mongodb.BasicDBObject;

        specialinvoke $r1.<com.mongodb.BasicDBObject: void <init>()>();

        $l0 = virtualinvoke r0.<com.mongodb.DBCollection: long getCount(com.mongodb.DBObject,com.mongodb.DBObject)>($r1, null);

        return $l0;
    }

    public long getCount(com.mongodb.DBObject) throws com.mongodb.MongoException
    {
        com.mongodb.DBCollection r0;
        long $l0;
        com.mongodb.DBObject r1;

        r0 := @this: com.mongodb.DBCollection;

        r1 := @parameter0: com.mongodb.DBObject;

        $l0 = virtualinvoke r0.<com.mongodb.DBCollection: long getCount(com.mongodb.DBObject,com.mongodb.DBObject)>(r1, null);

        return $l0;
    }

    public long getCount(com.mongodb.DBObject, com.mongodb.DBObject) throws com.mongodb.MongoException
    {
        com.mongodb.DBObject r1, r2;
        com.mongodb.DBCollection r0;
        long $l0;

        r0 := @this: com.mongodb.DBCollection;

        r1 := @parameter0: com.mongodb.DBObject;

        r2 := @parameter1: com.mongodb.DBObject;

        $l0 = virtualinvoke r0.<com.mongodb.DBCollection: long getCount(com.mongodb.DBObject,com.mongodb.DBObject,long,long)>(r1, r2, 0L, 0L);

        return $l0;
    }

    public long getCount(com.mongodb.DBObject, com.mongodb.DBObject, long, long) throws com.mongodb.MongoException
    {
        com.mongodb.CommandResult $r6;
        long l0, l2, $l4;
        com.mongodb.DBObject r3, r4;
        byte $b1, $b3;
        java.lang.Long $r13, $r14;
        int $i5, $i6;
        java.lang.String $r2, $r7, $r12;
        boolean $z0, $z1, $z2;
        com.mongodb.MongoException $r17;
        com.mongodb.DBCollection r1;
        com.mongodb.BasicDBObject $r15;
        com.mongodb.DB $r5;
        java.lang.StringBuilder $r10, $r11, $r16;

        r1 := @this: com.mongodb.DBCollection;

        r3 := @parameter0: com.mongodb.DBObject;

        r4 := @parameter1: com.mongodb.DBObject;

        l0 := @parameter2: long;

        l2 := @parameter3: long;

        $r15 = new com.mongodb.BasicDBObject;

        specialinvoke $r15.<com.mongodb.BasicDBObject: void <init>()>();

        $r2 = virtualinvoke r1.<com.mongodb.DBCollection: java.lang.String getName()>();

        virtualinvoke $r15.<com.mongodb.BasicDBObject: java.lang.Object put(java.lang.String,java.lang.Object)>("count", $r2);

        virtualinvoke $r15.<com.mongodb.BasicDBObject: java.lang.Object put(java.lang.String,java.lang.Object)>("query", r3);

        if r4 == null goto label1;

        virtualinvoke $r15.<com.mongodb.BasicDBObject: java.lang.Object put(java.lang.String,java.lang.Object)>("fields", r4);

     label1:
        $b1 = l0 cmp 0L;

        $i5 = (int) $b1;

        if $i5 <= 0 goto label2;

        $r14 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        virtualinvoke $r15.<com.mongodb.BasicDBObject: java.lang.Object put(java.lang.String,java.lang.Object)>("limit", $r14);

     label2:
        $b3 = l2 cmp 0L;

        $i6 = (int) $b3;

        if $i6 <= 0 goto label3;

        $r13 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l2);

        virtualinvoke $r15.<com.mongodb.BasicDBObject: java.lang.Object put(java.lang.String,java.lang.Object)>("skip", $r13);

     label3:
        $r5 = r1.<com.mongodb.DBCollection: com.mongodb.DB _db>;

        $r6 = virtualinvoke $r5.<com.mongodb.DB: com.mongodb.CommandResult command(com.mongodb.DBObject)>($r15);

        $z0 = virtualinvoke $r6.<com.mongodb.CommandResult: boolean ok()>();

        if $z0 != 0 goto label6;

        $r7 = virtualinvoke $r6.<com.mongodb.CommandResult: java.lang.String getErrorMessage()>();

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>("ns does not exist");

        if $z1 != 0 goto label4;

        $z2 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>("ns missing");

        if $z2 == 0 goto label5;

     label4:
        return 0L;

     label5:
        $r17 = new com.mongodb.MongoException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("error counting : ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<com.mongodb.MongoException: void <init>(java.lang.String)>($r12);

        throw $r17;

     label6:
        $l4 = virtualinvoke $r6.<com.mongodb.CommandResult: long getLong(java.lang.String)>("n");

        return $l4;
    }

    public com.mongodb.DBCollection rename(java.lang.String) throws com.mongodb.MongoException
    {
        com.mongodb.CommandResult $r16;
        com.mongodb.DBObject $r15;
        java.lang.String $r4, $r8, r11, $r13;
        com.mongodb.BasicDBObjectBuilder $r3, $r5, $r14;
        com.mongodb.DBCollection r0, $r18;
        com.mongodb.DB $r1, $r2, $r7, $r17;
        java.lang.StringBuilder $r6, $r9, $r10, $r12;

        r0 := @this: com.mongodb.DBCollection;

        r11 := @parameter0: java.lang.String;

        $r1 = r0.<com.mongodb.DBCollection: com.mongodb.DB _db>;

        $r2 = virtualinvoke $r1.<com.mongodb.DB: com.mongodb.DB getSisterDB(java.lang.String)>("admin");

        $r3 = staticinvoke <com.mongodb.BasicDBObjectBuilder: com.mongodb.BasicDBObjectBuilder start()>();

        $r4 = r0.<com.mongodb.DBCollection: java.lang.String _fullName>;

        $r5 = virtualinvoke $r3.<com.mongodb.BasicDBObjectBuilder: com.mongodb.BasicDBObjectBuilder add(java.lang.String,java.lang.Object)>("renameCollection", $r4);

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = r0.<com.mongodb.DBCollection: com.mongodb.DB _db>;

        $r8 = $r7.<com.mongodb.DB: java.lang.String _name>;

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14 = virtualinvoke $r5.<com.mongodb.BasicDBObjectBuilder: com.mongodb.BasicDBObjectBuilder add(java.lang.String,java.lang.Object)>("to", $r13);

        $r15 = virtualinvoke $r14.<com.mongodb.BasicDBObjectBuilder: com.mongodb.DBObject get()>();

        $r16 = virtualinvoke $r2.<com.mongodb.DB: com.mongodb.CommandResult command(com.mongodb.DBObject)>($r15);

        virtualinvoke $r16.<com.mongodb.CommandResult: void throwOnError()>();

        $r17 = r0.<com.mongodb.DBCollection: com.mongodb.DB _db>;

        $r18 = virtualinvoke $r17.<com.mongodb.DB: com.mongodb.DBCollection getCollection(java.lang.String)>(r11);

        return $r18;
    }

    public com.mongodb.DBObject group(com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.DBObject, java.lang.String) throws com.mongodb.MongoException
    {
        com.mongodb.CommandResult $r15;
        com.mongodb.DBObject r6, r8, r12, $r14, $r17;
        java.lang.String $r4, r10;
        com.mongodb.BasicDBObjectBuilder $r3, $r5, $r7, $r9, $r11, $r13;
        com.mongodb.DBCollection r0;
        com.mongodb.BasicDBObject $r1;
        com.mongodb.DB $r2;
        java.lang.Object $r16;

        r0 := @this: com.mongodb.DBCollection;

        r6 := @parameter0: com.mongodb.DBObject;

        r8 := @parameter1: com.mongodb.DBObject;

        r12 := @parameter2: com.mongodb.DBObject;

        r10 := @parameter3: java.lang.String;

        $r2 = r0.<com.mongodb.DBCollection: com.mongodb.DB _db>;

        $r1 = new com.mongodb.BasicDBObject;

        $r3 = staticinvoke <com.mongodb.BasicDBObjectBuilder: com.mongodb.BasicDBObjectBuilder start()>();

        $r4 = virtualinvoke r0.<com.mongodb.DBCollection: java.lang.String getName()>();

        $r5 = virtualinvoke $r3.<com.mongodb.BasicDBObjectBuilder: com.mongodb.BasicDBObjectBuilder add(java.lang.String,java.lang.Object)>("ns", $r4);

        $r7 = virtualinvoke $r5.<com.mongodb.BasicDBObjectBuilder: com.mongodb.BasicDBObjectBuilder add(java.lang.String,java.lang.Object)>("key", r6);

        $r9 = virtualinvoke $r7.<com.mongodb.BasicDBObjectBuilder: com.mongodb.BasicDBObjectBuilder add(java.lang.String,java.lang.Object)>("cond", r8);

        $r11 = virtualinvoke $r9.<com.mongodb.BasicDBObjectBuilder: com.mongodb.BasicDBObjectBuilder add(java.lang.String,java.lang.Object)>("$reduce", r10);

        $r13 = virtualinvoke $r11.<com.mongodb.BasicDBObjectBuilder: com.mongodb.BasicDBObjectBuilder add(java.lang.String,java.lang.Object)>("initial", r12);

        $r14 = virtualinvoke $r13.<com.mongodb.BasicDBObjectBuilder: com.mongodb.DBObject get()>();

        specialinvoke $r1.<com.mongodb.BasicDBObject: void <init>(java.lang.String,java.lang.Object)>("group", $r14);

        $r15 = virtualinvoke $r2.<com.mongodb.DB: com.mongodb.CommandResult command(com.mongodb.DBObject)>($r1);

        virtualinvoke $r15.<com.mongodb.CommandResult: void throwOnError()>();

        $r16 = virtualinvoke $r15.<com.mongodb.CommandResult: java.lang.Object get(java.lang.String)>("retval");

        $r17 = (com.mongodb.DBObject) $r16;

        return $r17;
    }

    public java.util.List distinct(java.lang.String)
    {
        java.util.List $r3;
        com.mongodb.DBCollection r0;
        com.mongodb.BasicDBObject $r2;
        java.lang.String r1;

        r0 := @this: com.mongodb.DBCollection;

        r1 := @parameter0: java.lang.String;

        $r2 = new com.mongodb.BasicDBObject;

        specialinvoke $r2.<com.mongodb.BasicDBObject: void <init>()>();

        $r3 = virtualinvoke r0.<com.mongodb.DBCollection: java.util.List distinct(java.lang.String,com.mongodb.DBObject)>(r1, $r2);

        return $r3;
    }

    public java.util.List distinct(java.lang.String, com.mongodb.DBObject)
    {
        com.mongodb.BasicDBObjectBuilder $r0, $r3, $r5, $r7;
        com.mongodb.DBCollection r1;
        com.mongodb.CommandResult $r10;
        java.util.List $r12, $r13;
        com.mongodb.DBObject r6, $r8;
        com.mongodb.DB $r9;
        java.lang.Object $r11;
        java.lang.String $r2, r4;

        r1 := @this: com.mongodb.DBCollection;

        r4 := @parameter0: java.lang.String;

        r6 := @parameter1: com.mongodb.DBObject;

        $r0 = staticinvoke <com.mongodb.BasicDBObjectBuilder: com.mongodb.BasicDBObjectBuilder start()>();

        $r2 = virtualinvoke r1.<com.mongodb.DBCollection: java.lang.String getName()>();

        $r3 = virtualinvoke $r0.<com.mongodb.BasicDBObjectBuilder: com.mongodb.BasicDBObjectBuilder add(java.lang.String,java.lang.Object)>("distinct", $r2);

        $r5 = virtualinvoke $r3.<com.mongodb.BasicDBObjectBuilder: com.mongodb.BasicDBObjectBuilder add(java.lang.String,java.lang.Object)>("key", r4);

        $r7 = virtualinvoke $r5.<com.mongodb.BasicDBObjectBuilder: com.mongodb.BasicDBObjectBuilder add(java.lang.String,java.lang.Object)>("query", r6);

        $r8 = virtualinvoke $r7.<com.mongodb.BasicDBObjectBuilder: com.mongodb.DBObject get()>();

        $r9 = r1.<com.mongodb.DBCollection: com.mongodb.DB _db>;

        $r10 = virtualinvoke $r9.<com.mongodb.DB: com.mongodb.CommandResult command(com.mongodb.DBObject)>($r8);

        virtualinvoke $r10.<com.mongodb.CommandResult: void throwOnError()>();

        $r11 = virtualinvoke $r10.<com.mongodb.CommandResult: java.lang.Object get(java.lang.String)>("values");

        $r12 = (java.util.List) $r11;

        $r13 = (java.util.List) $r12;

        return $r13;
    }

    public com.mongodb.MapReduceOutput mapReduce(java.lang.String, java.lang.String, java.lang.String, com.mongodb.DBObject) throws com.mongodb.MongoException
    {
        com.mongodb.BasicDBObjectBuilder $r0, $r3, $r5, $r7;
        com.mongodb.DBCollection r1;
        com.mongodb.MapReduceOutput $r11;
        com.mongodb.DBObject r9, $r10;
        java.lang.String $r2, r4, r6, r8;

        r1 := @this: com.mongodb.DBCollection;

        r4 := @parameter0: java.lang.String;

        r6 := @parameter1: java.lang.String;

        r8 := @parameter2: java.lang.String;

        r9 := @parameter3: com.mongodb.DBObject;

        $r0 = staticinvoke <com.mongodb.BasicDBObjectBuilder: com.mongodb.BasicDBObjectBuilder start()>();

        $r2 = r1.<com.mongodb.DBCollection: java.lang.String _name>;

        $r3 = virtualinvoke $r0.<com.mongodb.BasicDBObjectBuilder: com.mongodb.BasicDBObjectBuilder add(java.lang.String,java.lang.Object)>("mapreduce", $r2);

        $r5 = virtualinvoke $r3.<com.mongodb.BasicDBObjectBuilder: com.mongodb.BasicDBObjectBuilder add(java.lang.String,java.lang.Object)>("map", r4);

        $r7 = virtualinvoke $r5.<com.mongodb.BasicDBObjectBuilder: com.mongodb.BasicDBObjectBuilder add(java.lang.String,java.lang.Object)>("reduce", r6);

        if r8 == null goto label1;

        virtualinvoke $r7.<com.mongodb.BasicDBObjectBuilder: com.mongodb.BasicDBObjectBuilder add(java.lang.String,java.lang.Object)>("out", r8);

     label1:
        if r9 == null goto label2;

        virtualinvoke $r7.<com.mongodb.BasicDBObjectBuilder: com.mongodb.BasicDBObjectBuilder add(java.lang.String,java.lang.Object)>("query", r9);

     label2:
        $r10 = virtualinvoke $r7.<com.mongodb.BasicDBObjectBuilder: com.mongodb.DBObject get()>();

        $r11 = virtualinvoke r1.<com.mongodb.DBCollection: com.mongodb.MapReduceOutput mapReduce(com.mongodb.DBObject)>($r10);

        return $r11;
    }

    public com.mongodb.MapReduceOutput mapReduce(com.mongodb.DBObject) throws com.mongodb.MongoException
    {
        com.mongodb.MapReduceOutput $r5;
        com.mongodb.DBObject r0;
        com.mongodb.DBCollection r2;
        com.mongodb.CommandResult $r4;
        java.lang.Object $r1;
        com.mongodb.DB $r3;
        java.lang.IllegalArgumentException $r6;

        r2 := @this: com.mongodb.DBCollection;

        r0 := @parameter0: com.mongodb.DBObject;

        $r1 = interfaceinvoke r0.<com.mongodb.DBObject: java.lang.Object get(java.lang.String)>("mapreduce");

        if $r1 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("need mapreduce arg");

        throw $r6;

     label1:
        $r3 = r2.<com.mongodb.DBCollection: com.mongodb.DB _db>;

        $r4 = virtualinvoke $r3.<com.mongodb.DB: com.mongodb.CommandResult command(com.mongodb.DBObject)>(r0);

        virtualinvoke $r4.<com.mongodb.CommandResult: void throwOnError()>();

        $r5 = new com.mongodb.MapReduceOutput;

        specialinvoke $r5.<com.mongodb.MapReduceOutput: void <init>(com.mongodb.DBCollection,com.mongodb.BasicDBObject)>(r2, $r4);

        return $r5;
    }

    public java.util.List getIndexInfo()
    {
        com.mongodb.BasicDBObject $r0;
        com.mongodb.DBCollection r1, $r4;
        java.util.ArrayList $r6;
        com.mongodb.DBObject $r7;
        com.mongodb.DBCursor $r5;
        com.mongodb.DB $r3;
        java.lang.String $r2;
        boolean $z0;

        r1 := @this: com.mongodb.DBCollection;

        $r0 = new com.mongodb.BasicDBObject;

        specialinvoke $r0.<com.mongodb.BasicDBObject: void <init>()>();

        $r2 = virtualinvoke r1.<com.mongodb.DBCollection: java.lang.String getFullName()>();

        virtualinvoke $r0.<com.mongodb.BasicDBObject: java.lang.Object put(java.lang.String,java.lang.Object)>("ns", $r2);

        $r3 = r1.<com.mongodb.DBCollection: com.mongodb.DB _db>;

        $r4 = virtualinvoke $r3.<com.mongodb.DB: com.mongodb.DBCollection getCollection(java.lang.String)>("system.indexes");

        $r5 = virtualinvoke $r4.<com.mongodb.DBCollection: com.mongodb.DBCursor find(com.mongodb.DBObject)>($r0);

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

     label1:
        $z0 = virtualinvoke $r5.<com.mongodb.DBCursor: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = virtualinvoke $r5.<com.mongodb.DBCursor: com.mongodb.DBObject next()>();

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r7);

        goto label1;

     label2:
        return $r6;
    }

    public void dropIndex(com.mongodb.DBObject) throws com.mongodb.MongoException
    {
        com.mongodb.DBCollection r0;
        java.lang.String $r2;
        com.mongodb.DBObject r1;

        r0 := @this: com.mongodb.DBCollection;

        r1 := @parameter0: com.mongodb.DBObject;

        $r2 = staticinvoke <com.mongodb.DBCollection: java.lang.String genIndexName(com.mongodb.DBObject)>(r1);

        virtualinvoke r0.<com.mongodb.DBCollection: void dropIndexes(java.lang.String)>($r2);

        return;
    }

    public void dropIndex(java.lang.String) throws com.mongodb.MongoException
    {
        com.mongodb.DBCollection r0;
        java.lang.String r1;

        r0 := @this: com.mongodb.DBCollection;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<com.mongodb.DBCollection: void dropIndexes(java.lang.String)>(r1);

        return;
    }

    public com.mongodb.CommandResult getStats()
    {
        com.mongodb.DBCollection r0;
        com.mongodb.BasicDBObject $r2;
        com.mongodb.CommandResult $r4;
        com.mongodb.DB $r1;
        java.lang.String $r3;

        r0 := @this: com.mongodb.DBCollection;

        $r1 = virtualinvoke r0.<com.mongodb.DBCollection: com.mongodb.DB getDB()>();

        $r2 = new com.mongodb.BasicDBObject;

        $r3 = virtualinvoke r0.<com.mongodb.DBCollection: java.lang.String getName()>();

        specialinvoke $r2.<com.mongodb.BasicDBObject: void <init>(java.lang.String,java.lang.Object)>("collstats", $r3);

        $r4 = virtualinvoke $r1.<com.mongodb.DB: com.mongodb.CommandResult command(com.mongodb.DBObject)>($r2);

        return $r4;
    }

    public boolean isCapped()
    {
        com.mongodb.DBCollection r0;
        com.mongodb.CommandResult $r1;
        int $i0;
        java.lang.Object $r2;
        java.lang.Integer $r3;
        boolean $z0;

        r0 := @this: com.mongodb.DBCollection;

        $r1 = virtualinvoke r0.<com.mongodb.DBCollection: com.mongodb.CommandResult getStats()>();

        $r2 = virtualinvoke $r1.<com.mongodb.CommandResult: java.lang.Object get(java.lang.String)>("capped");

        if $r2 == null goto label1;

        $r3 = (java.lang.Integer) $r2;

        $i0 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        if $i0 != 1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected void <init>(com.mongodb.DB, java.lang.String)
    {
        com.mongodb.DBCollection r0;
        java.util.HashMap $r1;
        java.util.HashSet $r3, $r4;
        java.util.Map $r2;
        com.mongodb.DB r5, $r8;
        java.lang.StringBuilder $r7, $r10, $r11, $r12;
        java.lang.String r6, $r9, $r13;

        r0 := @this: com.mongodb.DBCollection;

        r5 := @parameter0: com.mongodb.DB;

        r6 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.mongodb.DBCollection: com.mongodb.WriteConcern _concern> = null;

        r0.<com.mongodb.DBCollection: java.lang.Class _objectClass> = null;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        $r2 = staticinvoke <java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>($r1);

        r0.<com.mongodb.DBCollection: java.util.Map _internalClass> = $r2;

        r0.<com.mongodb.DBCollection: com.mongodb.ReflectionDBObject$JavaWrapper _wrapper> = null;

        r0.<com.mongodb.DBCollection: boolean _anyUpdateSave> = 0;

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        r0.<com.mongodb.DBCollection: java.util.Set _createIndexes> = $r3;

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        r0.<com.mongodb.DBCollection: java.util.Set _createIndexesAfterSave> = $r4;

        r0.<com.mongodb.DBCollection: com.mongodb.DB _db> = r5;

        r0.<com.mongodb.DBCollection: java.lang.String _name> = r6;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = r0.<com.mongodb.DBCollection: com.mongodb.DB _db>;

        $r9 = virtualinvoke $r8.<com.mongodb.DB: java.lang.String getName()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<com.mongodb.DBCollection: java.lang.String _fullName> = $r13;

        return;
    }

    private com.mongodb.DBObject _checkObject(com.mongodb.DBObject, boolean, boolean)
    {
        com.mongodb.DBObject r0;
        com.mongodb.DBCollection r1;
        java.lang.IllegalArgumentException $r2, $r3;
        boolean $z0, z1, z2;

        r1 := @this: com.mongodb.DBCollection;

        r0 := @parameter0: com.mongodb.DBObject;

        z2 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        if r0 != null goto label2;

        if z2 == 0 goto label1;

        return null;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("can\'t be null");

        throw $r3;

     label2:
        $z0 = interfaceinvoke r0.<com.mongodb.DBObject: boolean isPartialObject()>();

        if $z0 == 0 goto label3;

        if z1 != 0 goto label3;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("can\'t save partial objects");

        throw $r2;

     label3:
        if z1 != 0 goto label4;

        specialinvoke r1.<com.mongodb.DBCollection: void _checkKeys(com.mongodb.DBObject)>(r0);

     label4:
        return r0;
    }

    private void _checkKeys(com.mongodb.DBObject)
    {
        java.util.Iterator $r2;
        com.mongodb.DBCollection r6;
        java.util.Set $r1;
        char $c0;
        java.lang.IllegalArgumentException $r10, $r11;
        com.mongodb.DBObject r0, $r7;
        int $i1;
        java.lang.Object $r3, $r5;
        java.lang.String r4;
        boolean $z0, $z1, $z2;

        r6 := @this: com.mongodb.DBCollection;

        r0 := @parameter0: com.mongodb.DBObject;

        $r1 = interfaceinvoke r0.<com.mongodb.DBObject: java.util.Set keySet()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r3;

        $z1 = virtualinvoke r4.<java.lang.String: boolean contains(java.lang.CharSequence)>(".");

        if $z1 == 0 goto label2;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("fields stored in the db can\'t have . in them");

        throw $r10;

     label2:
        $c0 = virtualinvoke r4.<java.lang.String: char charAt(int)>(0);

        $i1 = (int) $c0;

        if $i1 != 36 goto label3;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("fields stored in the db can\'t start with \'$\'");

        throw $r11;

     label3:
        $r5 = interfaceinvoke r0.<com.mongodb.DBObject: java.lang.Object get(java.lang.String)>(r4);

        $z2 = $r5 instanceof com.mongodb.DBObject;

        if $z2 == 0 goto label4;

        $r7 = (com.mongodb.DBObject) $r5;

        specialinvoke r6.<com.mongodb.DBCollection: void _checkKeys(com.mongodb.DBObject)>($r7);

     label4:
        goto label1;

     label5:
        return;
    }

    public com.mongodb.DBCollection getCollection(java.lang.String)
    {
        com.mongodb.DBCollection r0, $r9;
        java.lang.StringBuilder $r1, $r4, $r5, $r7;
        com.mongodb.DB $r2;
        java.lang.String $r3, r6, $r8;

        r0 := @this: com.mongodb.DBCollection;

        r6 := @parameter0: java.lang.String;

        $r2 = r0.<com.mongodb.DBCollection: com.mongodb.DB _db>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = r0.<com.mongodb.DBCollection: java.lang.String _name>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = virtualinvoke $r2.<com.mongodb.DB: com.mongodb.DBCollection getCollection(java.lang.String)>($r8);

        return $r9;
    }

    public java.lang.String getName()
    {
        com.mongodb.DBCollection r0;
        java.lang.String $r1;

        r0 := @this: com.mongodb.DBCollection;

        $r1 = r0.<com.mongodb.DBCollection: java.lang.String _name>;

        return $r1;
    }

    public java.lang.String getFullName()
    {
        com.mongodb.DBCollection r0;
        java.lang.String $r1;

        r0 := @this: com.mongodb.DBCollection;

        $r1 = r0.<com.mongodb.DBCollection: java.lang.String _fullName>;

        return $r1;
    }

    public com.mongodb.DB getDB()
    {
        com.mongodb.DBCollection r0;
        com.mongodb.DB $r1;

        r0 := @this: com.mongodb.DBCollection;

        $r1 = r0.<com.mongodb.DBCollection: com.mongodb.DB _db>;

        return $r1;
    }

    protected boolean checkReadOnly(boolean)
    {
        java.lang.IllegalStateException $r2;
        com.mongodb.DBCollection r0;
        com.mongodb.DB $r1;
        boolean $z0, z1;

        r0 := @this: com.mongodb.DBCollection;

        z1 := @parameter0: boolean;

        $r1 = r0.<com.mongodb.DBCollection: com.mongodb.DB _db>;

        $z0 = $r1.<com.mongodb.DB: boolean _readOnly>;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        if z1 != 0 goto label2;

        return 1;

     label2:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("db is read only");

        throw $r2;
    }

    public int hashCode()
    {
        com.mongodb.DBCollection r0;
        int $i0;
        java.lang.String $r1;

        r0 := @this: com.mongodb.DBCollection;

        $r1 = r0.<com.mongodb.DBCollection: java.lang.String _fullName>;

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        com.mongodb.DBCollection r1;
        java.lang.Object r0;
        boolean $z0;

        r1 := @this: com.mongodb.DBCollection;

        r0 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.String toString()
    {
        com.mongodb.DBCollection r0;
        java.lang.String $r1;

        r0 := @this: com.mongodb.DBCollection;

        $r1 = r0.<com.mongodb.DBCollection: java.lang.String _name>;

        return $r1;
    }

    public void setObjectClass(java.lang.Class)
    {
        com.mongodb.DBCollection r2;
        java.lang.IllegalArgumentException $r5;
        com.mongodb.ReflectionDBObject$JavaWrapper $r4;
        java.lang.Class r0, $r1, $r3;
        java.lang.StringBuilder $r6, $r8, $r9;
        java.lang.String $r7, $r10;
        boolean $z0, $z1;

        r2 := @this: com.mongodb.DBCollection;

        r0 := @parameter0: java.lang.Class;

        $r1 = class "Lcom/mongodb/DBObject;";

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z0 != 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a DBObject");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r5;

     label1:
        r2.<com.mongodb.DBCollection: java.lang.Class _objectClass> = r0;

        $r3 = class "Lcom/mongodb/ReflectionDBObject;";

        $z1 = virtualinvoke $r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z1 == 0 goto label2;

        $r4 = staticinvoke <com.mongodb.ReflectionDBObject: com.mongodb.ReflectionDBObject$JavaWrapper getWrapper(java.lang.Class)>(r0);

        r2.<com.mongodb.DBCollection: com.mongodb.ReflectionDBObject$JavaWrapper _wrapper> = $r4;

        goto label3;

     label2:
        r2.<com.mongodb.DBCollection: com.mongodb.ReflectionDBObject$JavaWrapper _wrapper> = null;

     label3:
        return;
    }

    public java.lang.Class getObjectClass()
    {
        com.mongodb.DBCollection r0;
        java.lang.Class $r1;

        r0 := @this: com.mongodb.DBCollection;

        $r1 = r0.<com.mongodb.DBCollection: java.lang.Class _objectClass>;

        return $r1;
    }

    public void setInternalClass(java.lang.String, java.lang.Class)
    {
        java.util.Map $r3;
        com.mongodb.DBCollection r0;
        java.lang.Class r2;
        java.lang.String r1;

        r0 := @this: com.mongodb.DBCollection;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Class;

        $r3 = r0.<com.mongodb.DBCollection: java.util.Map _internalClass>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    protected java.lang.Class getInternalClass(java.lang.String)
    {
        com.mongodb.DBCollection r0;
        com.mongodb.ReflectionDBObject$JavaWrapper $r5, $r6;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.Class r4, $r7;
        java.lang.String r1;

        r0 := @this: com.mongodb.DBCollection;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.mongodb.DBCollection: java.util.Map _internalClass>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (java.lang.Class) $r3;

        if r4 == null goto label1;

        return r4;

     label1:
        $r5 = r0.<com.mongodb.DBCollection: com.mongodb.ReflectionDBObject$JavaWrapper _wrapper>;

        if $r5 != null goto label2;

        return null;

     label2:
        $r6 = r0.<com.mongodb.DBCollection: com.mongodb.ReflectionDBObject$JavaWrapper _wrapper>;

        $r7 = virtualinvoke $r6.<com.mongodb.ReflectionDBObject$JavaWrapper: java.lang.Class getInternalClass(java.lang.String)>(r1);

        return $r7;
    }

    public void setWriteConcern(com.mongodb.WriteConcern)
    {
        com.mongodb.DBCollection r0;
        com.mongodb.WriteConcern r1;

        r0 := @this: com.mongodb.DBCollection;

        r1 := @parameter0: com.mongodb.WriteConcern;

        r0.<com.mongodb.DBCollection: com.mongodb.WriteConcern _concern> = r1;

        return;
    }

    public com.mongodb.WriteConcern getWriteConcern()
    {
        com.mongodb.DBCollection r0;
        com.mongodb.DB $r2;
        com.mongodb.WriteConcern $r1, $r3, $r4;

        r0 := @this: com.mongodb.DBCollection;

        $r1 = r0.<com.mongodb.DBCollection: com.mongodb.WriteConcern _concern>;

        if $r1 == null goto label1;

        $r4 = r0.<com.mongodb.DBCollection: com.mongodb.WriteConcern _concern>;

        return $r4;

     label1:
        $r2 = r0.<com.mongodb.DBCollection: com.mongodb.DB _db>;

        $r3 = virtualinvoke $r2.<com.mongodb.DB: com.mongodb.WriteConcern getWriteConcern()>();

        return $r3;
    }

    static void <clinit>()
    {
        boolean $z0;

        $z0 = staticinvoke <java.lang.Boolean: boolean getBoolean(java.lang.String)>("DEBUG.DB");

        <com.mongodb.DBCollection: boolean DEBUG> = $z0;

        return;
    }
}
