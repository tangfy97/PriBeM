public class ucar.atd.dorade.DoradePARM extends ucar.atd.dorade.DoradeDescriptor
{
    public static final float BAD_VALUE;
    private java.lang.String paramName;
    private java.lang.String paramDescription;
    private java.lang.String unitName;
    private short usedPRTs;
    private short usedFrequencies;
    private float rcvrBandwidth;
    private short pulseWidth;
    private short polarization;
    private short nSamples;
    private short binaryFormat;
    public static final int FORMAT_8BIT_INT;
    public static final int FORMAT_16BIT_INT;
    public static final int FORMAT_32BIT_INT;
    public static final int FORMAT_32BIT_FLOAT;
    public static final int FORMAT_16BIT_FLOAT;
    private java.lang.String thresholdParamName;
    private float thresholdValue;
    private float scale;
    private float bias;
    private int badDataFlag;
    private ucar.atd.dorade.DoradeRADD myRADD;

    public void <init>(java.io.RandomAccessFile, boolean, ucar.atd.dorade.DoradeRADD) throws ucar.atd.dorade.DoradeDescriptor$DescriptorException
    {
        java.io.RandomAccessFile r1;
        byte[] $r2;
        ucar.atd.dorade.DoradePARM r0;
        short $s0, $s1, $s2, $s3, $s4, $s5;
        ucar.atd.dorade.DoradeRADD r3;
        int $i6;
        java.lang.String $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        boolean z0, $z1;
        java.io.PrintStream $r12;
        float $f0, $f1, $f2, $f3;

        r0 := @this: ucar.atd.dorade.DoradePARM;

        r1 := @parameter0: java.io.RandomAccessFile;

        z0 := @parameter1: boolean;

        r3 := @parameter2: ucar.atd.dorade.DoradeRADD;

        specialinvoke r0.<ucar.atd.dorade.DoradeDescriptor: void <init>()>();

        $r2 = virtualinvoke r0.<ucar.atd.dorade.DoradePARM: byte[] readDescriptor(java.io.RandomAccessFile,boolean,java.lang.String)>(r1, z0, "PARM");

        r0.<ucar.atd.dorade.DoradePARM: ucar.atd.dorade.DoradeRADD myRADD> = r3;

        $r4 = new java.lang.String;

        specialinvoke $r4.<java.lang.String: void <init>(byte[],int,int)>($r2, 8, 8);

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String trim()>();

        r0.<ucar.atd.dorade.DoradePARM: java.lang.String paramName> = $r5;

        $r6 = new java.lang.String;

        specialinvoke $r6.<java.lang.String: void <init>(byte[],int,int)>($r2, 16, 40);

        $r7 = virtualinvoke $r6.<java.lang.String: java.lang.String trim()>();

        r0.<ucar.atd.dorade.DoradePARM: java.lang.String paramDescription> = $r7;

        $r8 = new java.lang.String;

        specialinvoke $r8.<java.lang.String: void <init>(byte[],int,int)>($r2, 56, 8);

        $r9 = virtualinvoke $r8.<java.lang.String: java.lang.String trim()>();

        r0.<ucar.atd.dorade.DoradePARM: java.lang.String unitName> = $r9;

        $s0 = virtualinvoke r0.<ucar.atd.dorade.DoradePARM: short grabShort(byte[],int)>($r2, 64);

        r0.<ucar.atd.dorade.DoradePARM: short usedPRTs> = $s0;

        $s1 = virtualinvoke r0.<ucar.atd.dorade.DoradePARM: short grabShort(byte[],int)>($r2, 66);

        r0.<ucar.atd.dorade.DoradePARM: short usedFrequencies> = $s1;

        $f0 = virtualinvoke r0.<ucar.atd.dorade.DoradePARM: float grabFloat(byte[],int)>($r2, 68);

        r0.<ucar.atd.dorade.DoradePARM: float rcvrBandwidth> = $f0;

        $s2 = virtualinvoke r0.<ucar.atd.dorade.DoradePARM: short grabShort(byte[],int)>($r2, 72);

        r0.<ucar.atd.dorade.DoradePARM: short pulseWidth> = $s2;

        $s3 = virtualinvoke r0.<ucar.atd.dorade.DoradePARM: short grabShort(byte[],int)>($r2, 74);

        r0.<ucar.atd.dorade.DoradePARM: short polarization> = $s3;

        $s4 = virtualinvoke r0.<ucar.atd.dorade.DoradePARM: short grabShort(byte[],int)>($r2, 76);

        r0.<ucar.atd.dorade.DoradePARM: short nSamples> = $s4;

        $s5 = virtualinvoke r0.<ucar.atd.dorade.DoradePARM: short grabShort(byte[],int)>($r2, 78);

        r0.<ucar.atd.dorade.DoradePARM: short binaryFormat> = $s5;

        $r10 = new java.lang.String;

        specialinvoke $r10.<java.lang.String: void <init>(byte[],int,int)>($r2, 80, 8);

        $r11 = virtualinvoke $r10.<java.lang.String: java.lang.String trim()>();

        r0.<ucar.atd.dorade.DoradePARM: java.lang.String thresholdParamName> = $r11;

        $f1 = virtualinvoke r0.<ucar.atd.dorade.DoradePARM: float grabFloat(byte[],int)>($r2, 88);

        r0.<ucar.atd.dorade.DoradePARM: float thresholdValue> = $f1;

        $f2 = virtualinvoke r0.<ucar.atd.dorade.DoradePARM: float grabFloat(byte[],int)>($r2, 92);

        r0.<ucar.atd.dorade.DoradePARM: float scale> = $f2;

        $f3 = virtualinvoke r0.<ucar.atd.dorade.DoradePARM: float grabFloat(byte[],int)>($r2, 96);

        r0.<ucar.atd.dorade.DoradePARM: float bias> = $f3;

        $i6 = virtualinvoke r0.<ucar.atd.dorade.DoradePARM: int grabInt(byte[],int)>($r2, 100);

        r0.<ucar.atd.dorade.DoradePARM: int badDataFlag> = $i6;

        $z1 = r0.<ucar.atd.dorade.DoradePARM: boolean verbose>;

        if $z1 == 0 goto label1;

        $r12 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.Object)>(r0);

     label1:
        return;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r1, $r2, $r5, $r6, $r9, $r10, $r12, $r13, $r16, $r17, $r19, $r20, $r23, $r24, $r25, $r26, $r29, $r30, $r31, $r32, $r35, $r36, $r37, $r38, $r41, $r42, $r43, $r44, $r47, $r48, $r49, $r50, $r53, $r54, $r55, $r56, $r59, $r60, $r61, $r62, $r65, $r66, $r68, $r69, $r72, $r73, $r74, $r75, $r78, $r79, $r80, $r81, $r84, $r85, $r86, $r87, $r90, $r91, $r92, $r94, $r95, $r96, $r97, $r98, $r99, $r100, $r101, $r102, $r103, $r104, $r105, $r106, $r107, $r108;
        ucar.atd.dorade.DoradePARM r3;
        short $s0, $s1, $s2, $s3, $s4, $s5;
        java.lang.String $r4, $r7, $r11, $r14, $r18, $r21, $r27, $r33, $r39, $r45, $r51, $r57, $r63, $r67, $r70, $r76, $r82, $r88, $r93;
        float $f0, $f1, $f2, $f3;
        int $i6, $i7, $i8, $i9, $i10, $i11, $i12;

        r3 := @this: ucar.atd.dorade.DoradePARM;

        $r94 = new java.lang.StringBuilder;

        specialinvoke $r94.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r94.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PARM\n");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  param name: ");

        $r4 = r3.<ucar.atd.dorade.DoradePARM: java.lang.String paramName>;

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r95 = new java.lang.StringBuilder;

        specialinvoke $r95.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r95.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  param description: ");

        $r11 = r3.<ucar.atd.dorade.DoradePARM: java.lang.String paramDescription>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r96 = new java.lang.StringBuilder;

        specialinvoke $r96.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  unit name: ");

        $r18 = r3.<ucar.atd.dorade.DoradePARM: java.lang.String unitName>;

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        $r97 = new java.lang.StringBuilder;

        specialinvoke $r97.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r97.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  used PRTs: ");

        $s0 = r3.<ucar.atd.dorade.DoradePARM: short usedPRTs>;

        $i7 = (int) $s0;

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        $r98 = new java.lang.StringBuilder;

        specialinvoke $r98.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r98.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  used frequencies: ");

        $s1 = r3.<ucar.atd.dorade.DoradePARM: short usedFrequencies>;

        $i8 = (int) $s1;

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        $r99 = new java.lang.StringBuilder;

        specialinvoke $r99.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r99.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  receiver bandwidth: ");

        $f0 = r3.<ucar.atd.dorade.DoradePARM: float rcvrBandwidth>;

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        $r100 = new java.lang.StringBuilder;

        specialinvoke $r100.<java.lang.StringBuilder: void <init>()>();

        $r41 = virtualinvoke $r100.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r39);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  pulse width: ");

        $s2 = r3.<ucar.atd.dorade.DoradePARM: short pulseWidth>;

        $i9 = (int) $s2;

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        $r101 = new java.lang.StringBuilder;

        specialinvoke $r101.<java.lang.StringBuilder: void <init>()>();

        $r47 = virtualinvoke $r101.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r45);

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  polarization: ");

        $s3 = r3.<ucar.atd.dorade.DoradePARM: short polarization>;

        $i10 = (int) $s3;

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        $r102 = new java.lang.StringBuilder;

        specialinvoke $r102.<java.lang.StringBuilder: void <init>()>();

        $r53 = virtualinvoke $r102.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r51);

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  number of samples: ");

        $s4 = r3.<ucar.atd.dorade.DoradePARM: short nSamples>;

        $i11 = (int) $s4;

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i11);

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.String toString()>();

        $r103 = new java.lang.StringBuilder;

        specialinvoke $r103.<java.lang.StringBuilder: void <init>()>();

        $r59 = virtualinvoke $r103.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r57);

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  binary format: ");

        $s5 = r3.<ucar.atd.dorade.DoradePARM: short binaryFormat>;

        $i12 = (int) $s5;

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i12);

        $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.String toString()>();

        $r104 = new java.lang.StringBuilder;

        specialinvoke $r104.<java.lang.StringBuilder: void <init>()>();

        $r65 = virtualinvoke $r104.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r63);

        $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  threshold parameter: ");

        $r67 = r3.<ucar.atd.dorade.DoradePARM: java.lang.String thresholdParamName>;

        $r68 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r67);

        $r69 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r70 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.String toString()>();

        $r105 = new java.lang.StringBuilder;

        specialinvoke $r105.<java.lang.StringBuilder: void <init>()>();

        $r72 = virtualinvoke $r105.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r70);

        $r73 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  threshold value: ");

        $f1 = r3.<ucar.atd.dorade.DoradePARM: float thresholdValue>;

        $r74 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f1);

        $r75 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r76 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.String toString()>();

        $r106 = new java.lang.StringBuilder;

        specialinvoke $r106.<java.lang.StringBuilder: void <init>()>();

        $r78 = virtualinvoke $r106.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r76);

        $r79 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  scale: ");

        $f2 = r3.<ucar.atd.dorade.DoradePARM: float scale>;

        $r80 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f2);

        $r81 = virtualinvoke $r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r82 = virtualinvoke $r81.<java.lang.StringBuilder: java.lang.String toString()>();

        $r107 = new java.lang.StringBuilder;

        specialinvoke $r107.<java.lang.StringBuilder: void <init>()>();

        $r84 = virtualinvoke $r107.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r82);

        $r85 = virtualinvoke $r84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  bias: ");

        $f3 = r3.<ucar.atd.dorade.DoradePARM: float bias>;

        $r86 = virtualinvoke $r85.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f3);

        $r87 = virtualinvoke $r86.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r88 = virtualinvoke $r87.<java.lang.StringBuilder: java.lang.String toString()>();

        $r108 = new java.lang.StringBuilder;

        specialinvoke $r108.<java.lang.StringBuilder: void <init>()>();

        $r90 = virtualinvoke $r108.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r88);

        $r91 = virtualinvoke $r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  bad data flag: ");

        $i6 = r3.<ucar.atd.dorade.DoradePARM: int badDataFlag>;

        $r92 = virtualinvoke $r91.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r93 = virtualinvoke $r92.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r93;
    }

    public java.lang.String getName()
    {
        ucar.atd.dorade.DoradePARM r0;
        java.lang.String $r1;

        r0 := @this: ucar.atd.dorade.DoradePARM;

        $r1 = r0.<ucar.atd.dorade.DoradePARM: java.lang.String paramName>;

        return $r1;
    }

    public int getBadDataFlag()
    {
        int $i0;
        ucar.atd.dorade.DoradePARM r0;

        r0 := @this: ucar.atd.dorade.DoradePARM;

        $i0 = r0.<ucar.atd.dorade.DoradePARM: int badDataFlag>;

        return $i0;
    }

    public float getThresholdValue()
    {
        float $f0;
        ucar.atd.dorade.DoradePARM r0;

        r0 := @this: ucar.atd.dorade.DoradePARM;

        $f0 = r0.<ucar.atd.dorade.DoradePARM: float thresholdValue>;

        return $f0;
    }

    public int getPolarization()
    {
        int $i1;
        ucar.atd.dorade.DoradePARM r0;
        short $s0;

        r0 := @this: ucar.atd.dorade.DoradePARM;

        $s0 = r0.<ucar.atd.dorade.DoradePARM: short polarization>;

        $i1 = (int) $s0;

        return $i1;
    }

    public float getScale()
    {
        float $f0;
        ucar.atd.dorade.DoradePARM r0;

        r0 := @this: ucar.atd.dorade.DoradePARM;

        $f0 = r0.<ucar.atd.dorade.DoradePARM: float scale>;

        return $f0;
    }

    public java.lang.String getUnitName()
    {
        ucar.atd.dorade.DoradePARM r0;
        java.lang.String $r1;

        r0 := @this: ucar.atd.dorade.DoradePARM;

        $r1 = r0.<ucar.atd.dorade.DoradePARM: java.lang.String unitName>;

        return $r1;
    }

    public int getusedPRTs()
    {
        int $i1;
        ucar.atd.dorade.DoradePARM r0;
        short $s0;

        r0 := @this: ucar.atd.dorade.DoradePARM;

        $s0 = r0.<ucar.atd.dorade.DoradePARM: short usedPRTs>;

        $i1 = (int) $s0;

        return $i1;
    }

    public int getusedFrequencies()
    {
        int $i1;
        ucar.atd.dorade.DoradePARM r0;
        short $s0;

        r0 := @this: ucar.atd.dorade.DoradePARM;

        $s0 = r0.<ucar.atd.dorade.DoradePARM: short usedFrequencies>;

        $i1 = (int) $s0;

        return $i1;
    }

    public int getnSamples()
    {
        int $i1;
        ucar.atd.dorade.DoradePARM r0;
        short $s0;

        r0 := @this: ucar.atd.dorade.DoradePARM;

        $s0 = r0.<ucar.atd.dorade.DoradePARM: short nSamples>;

        $i1 = (int) $s0;

        return $i1;
    }

    public java.lang.String getthresholdParamName()
    {
        ucar.atd.dorade.DoradePARM r0;
        java.lang.String $r1;

        r0 := @this: ucar.atd.dorade.DoradePARM;

        $r1 = r0.<ucar.atd.dorade.DoradePARM: java.lang.String thresholdParamName>;

        return $r1;
    }

    public java.lang.String getUnits()
    {
        ucar.atd.dorade.DoradePARM r0;
        java.lang.String $r1;

        r0 := @this: ucar.atd.dorade.DoradePARM;

        $r1 = r0.<ucar.atd.dorade.DoradePARM: java.lang.String unitName>;

        return $r1;
    }

    public java.lang.String getDescription()
    {
        ucar.atd.dorade.DoradePARM r0;
        java.lang.String $r1;

        r0 := @this: ucar.atd.dorade.DoradePARM;

        $r1 = r0.<ucar.atd.dorade.DoradePARM: java.lang.String paramDescription>;

        return $r1;
    }

    public int getBinaryFormat()
    {
        int $i1;
        ucar.atd.dorade.DoradePARM r0;
        short $s0;

        r0 := @this: ucar.atd.dorade.DoradePARM;

        $s0 = r0.<ucar.atd.dorade.DoradePARM: short binaryFormat>;

        $i1 = (int) $s0;

        return $i1;
    }

    public int getNCells()
    {
        int $i0;
        ucar.atd.dorade.DoradePARM r0;
        ucar.atd.dorade.DoradeRADD $r1;

        r0 := @this: ucar.atd.dorade.DoradePARM;

        $r1 = r0.<ucar.atd.dorade.DoradePARM: ucar.atd.dorade.DoradeRADD myRADD>;

        $i0 = virtualinvoke $r1.<ucar.atd.dorade.DoradeRADD: int getNCells()>();

        return $i0;
    }

    public float getCellSpacing() throws ucar.atd.dorade.DoradeDescriptor$DescriptorException
    {
        float $f0;
        ucar.atd.dorade.DoradePARM r0;
        ucar.atd.dorade.DoradeRADD $r1;

        r0 := @this: ucar.atd.dorade.DoradePARM;

        $r1 = r0.<ucar.atd.dorade.DoradePARM: ucar.atd.dorade.DoradeRADD myRADD>;

        $f0 = virtualinvoke $r1.<ucar.atd.dorade.DoradeRADD: float getCellSpacing()>();

        return $f0;
    }

    public float[] getParamValues(ucar.atd.dorade.DoradeRDAT) throws ucar.atd.dorade.DoradeDescriptor$DescriptorException
    {
        ucar.atd.dorade.DoradePARM r0;
        ucar.atd.dorade.DoradeRDAT r1;
        float[] $r2;

        r0 := @this: ucar.atd.dorade.DoradePARM;

        r1 := @parameter0: ucar.atd.dorade.DoradeRDAT;

        $r2 = virtualinvoke r0.<ucar.atd.dorade.DoradePARM: float[] getParamValues(ucar.atd.dorade.DoradeRDAT,float[])>(r1, null);

        return $r2;
    }

    public float[] getParamValues(ucar.atd.dorade.DoradeRDAT, float[]) throws ucar.atd.dorade.DoradeDescriptor$DescriptorException
    {
        byte[] $r4;
        byte $b4, b13;
        java.lang.StringBuilder $r14, $r15, $r16, $r20, $r21, $r28, $r31;
        ucar.atd.dorade.DoradeRDAT r1;
        ucar.atd.dorade.DoradePARM r0;
        float[] r6, $r8, $r9, $r10, $r11, r24;
        short $s1, $s16, $s17, $s18, $s22;
        ucar.atd.dorade.DoradeRADD $r5, $r26;
        java.lang.String $r2, $r3, $r17, $r22;
        boolean $z0;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20;
        ucar.atd.dorade.DoradeDescriptor$DescriptorException $r27, $r29, $r30, $r32;
        short[] r25;
        int $i0, $i2, $i3, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i14, $i15, $i19, $i20, i21, $i23, $i24, $i25, $i26, $i27, $i28;

        r0 := @this: ucar.atd.dorade.DoradePARM;

        r1 := @parameter0: ucar.atd.dorade.DoradeRDAT;

        r6 := @parameter1: float[];

        $r2 = r0.<ucar.atd.dorade.DoradePARM: java.lang.String paramName>;

        $r3 = virtualinvoke r1.<ucar.atd.dorade.DoradeRDAT: java.lang.String getParamName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label01;

        $r27 = new ucar.atd.dorade.DoradeDescriptor$DescriptorException;

        specialinvoke $r27.<ucar.atd.dorade.DoradeDescriptor$DescriptorException: void <init>(java.lang.String)>("parameter name mismatch");

        throw $r27;

     label01:
        $r4 = virtualinvoke r1.<ucar.atd.dorade.DoradeRDAT: byte[] getRawData()>();

        $r5 = r0.<ucar.atd.dorade.DoradePARM: ucar.atd.dorade.DoradeRADD myRADD>;

        $i0 = virtualinvoke $r5.<ucar.atd.dorade.DoradeRADD: int getNCells()>();

        if r6 == null goto label02;

        $i19 = lengthof r6;

        if $i19 != $i0 goto label02;

        r24 = r6;

        goto label03;

     label02:
        r24 = newarray (float)[$i0];

     label03:
        r25 = null;

        $r26 = r0.<ucar.atd.dorade.DoradePARM: ucar.atd.dorade.DoradeRADD myRADD>;

        $i20 = virtualinvoke $r26.<ucar.atd.dorade.DoradeRADD: int getCompressionScheme()>();

        if $i20 != 1 goto label05;

        $s17 = r0.<ucar.atd.dorade.DoradePARM: short binaryFormat>;

        $i23 = (int) $s17;

        if $i23 == 2 goto label04;

        $r29 = new ucar.atd.dorade.DoradeDescriptor$DescriptorException;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot unpack compressed data with binary format ");

        $s18 = r0.<ucar.atd.dorade.DoradePARM: short binaryFormat>;

        $i24 = (int) $s18;

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i24);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r29.<ucar.atd.dorade.DoradeDescriptor$DescriptorException: void <init>(java.lang.String)>($r22);

        throw $r29;

     label04:
        r25 = specialinvoke r0.<ucar.atd.dorade.DoradePARM: short[] uncompressHRD(byte[],int)>($r4, $i0);

     label05:
        i21 = 0;

     label06:
        if i21 >= $i0 goto label24;

        $s1 = r0.<ucar.atd.dorade.DoradePARM: short binaryFormat>;

        $i25 = (int) $s1;

        tableswitch($i25)
        {
            case 1: goto label07;
            case 2: goto label10;
            case 3: goto label15;
            case 4: goto label18;
            case 5: goto label21;
            default: goto label22;
        };

     label07:
        b13 = $r4[i21];

        $r11 = r24;

        $i15 = i21;

        $i14 = r0.<ucar.atd.dorade.DoradePARM: int badDataFlag>;

        $i26 = (int) b13;

        if $i26 != $i14 goto label08;

        $f17 = 3.4028235E38F;

        goto label09;

     label08:
        $f14 = (float) b13;

        $f13 = r0.<ucar.atd.dorade.DoradePARM: float bias>;

        $f16 = $f14 - $f13;

        $f15 = r0.<ucar.atd.dorade.DoradePARM: float scale>;

        $f17 = $f16 / $f15;

     label09:
        $r11[$i15] = $f17;

        goto label23;

     label10:
        if r25 == null goto label11;

        $s22 = r25[i21];

        goto label12;

     label11:
        $i10 = 2 * i21;

        $s22 = virtualinvoke r0.<ucar.atd.dorade.DoradePARM: short grabShort(byte[],int)>($r4, $i10);

     label12:
        $r10 = r24;

        $i12 = i21;

        $i11 = r0.<ucar.atd.dorade.DoradePARM: int badDataFlag>;

        $i27 = (int) $s22;

        if $i27 != $i11 goto label13;

        $f18 = 3.4028235E38F;

        goto label14;

     label13:
        $f10 = (float) $s22;

        $f9 = r0.<ucar.atd.dorade.DoradePARM: float bias>;

        $f12 = $f10 - $f9;

        $f11 = r0.<ucar.atd.dorade.DoradePARM: float scale>;

        $f18 = $f12 / $f11;

     label14:
        $r10[$i12] = $f18;

        goto label23;

     label15:
        $i6 = 4 * i21;

        $i7 = virtualinvoke r0.<ucar.atd.dorade.DoradePARM: int grabInt(byte[],int)>($r4, $i6);

        $r9 = r24;

        $i9 = i21;

        $i8 = r0.<ucar.atd.dorade.DoradePARM: int badDataFlag>;

        if $i7 != $i8 goto label16;

        $f19 = 3.4028235E38F;

        goto label17;

     label16:
        $f6 = (float) $i7;

        $f5 = r0.<ucar.atd.dorade.DoradePARM: float bias>;

        $f8 = $f6 - $f5;

        $f7 = r0.<ucar.atd.dorade.DoradePARM: float scale>;

        $f19 = $f8 / $f7;

     label17:
        $r9[$i9] = $f19;

        goto label23;

     label18:
        $i2 = 4 * i21;

        $f0 = virtualinvoke r0.<ucar.atd.dorade.DoradePARM: float grabFloat(byte[],int)>($r4, $i2);

        $r8 = r24;

        $i5 = i21;

        $i3 = r0.<ucar.atd.dorade.DoradePARM: int badDataFlag>;

        $f1 = (float) $i3;

        $b4 = $f0 cmpl $f1;

        if $b4 != 0 goto label19;

        $f20 = 3.4028235E38F;

        goto label20;

     label19:
        $f2 = r0.<ucar.atd.dorade.DoradePARM: float bias>;

        $f4 = $f0 - $f2;

        $f3 = r0.<ucar.atd.dorade.DoradePARM: float scale>;

        $f20 = $f4 / $f3;

     label20:
        $r8[$i5] = $f20;

        goto label23;

     label21:
        $r30 = new ucar.atd.dorade.DoradeDescriptor$DescriptorException;

        specialinvoke $r30.<ucar.atd.dorade.DoradeDescriptor$DescriptorException: void <init>(java.lang.String)>("can\'t unpack 16-bit float data yet");

        throw $r30;

     label22:
        $r32 = new ucar.atd.dorade.DoradeDescriptor$DescriptorException;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bad binary format (");

        $s16 = r0.<ucar.atd.dorade.DoradePARM: short binaryFormat>;

        $i28 = (int) $s16;

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i28);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r32.<ucar.atd.dorade.DoradeDescriptor$DescriptorException: void <init>(java.lang.String)>($r17);

        throw $r32;

     label23:
        i21 = i21 + 1;

        goto label06;

     label24:
        return r24;
    }

    private short[] uncompressHRD(byte[], int) throws ucar.atd.dorade.DoradeDescriptor$DescriptorException
    {
        byte[] r2;
        ucar.atd.dorade.DoradePARM r1;
        short $s1, $s6, $s7, $s9, $s10;
        int i0, $i2, $i3, $i4, $i5, $i8, i11, i12, i13, i14, $i15, $i17, $i18, $i19, $i20;
        boolean z0, $z1;
        ucar.atd.dorade.DoradeDescriptor$DescriptorException $r4;
        short[] r0;

        r1 := @this: ucar.atd.dorade.DoradePARM;

        r2 := @parameter0: byte[];

        i0 := @parameter1: int;

        r0 = newarray (short)[i0];

        i11 = 0;

        i12 = 0;

     label01:
        $s1 = virtualinvoke r1.<ucar.atd.dorade.DoradePARM: short grabShort(byte[],int)>(r2, i11);

        i11 = i11 + 2;

        $i15 = (int) $s1;

        $i17 = (int) 32768;

        $i2 = $i15 & $i17;

        if $i2 == 0 goto label02;

        $z1 = 1;

        goto label03;

     label02:
        $z1 = 0;

     label03:
        z0 = $z1;

        $s10 = $s1 & 32767;

        if $s10 != 1 goto label04;

        goto label10;

     label04:
        $i18 = (int) $s10;

        $i3 = i12 + $i18;

        if $i3 <= i0 goto label05;

        $r4 = new ucar.atd.dorade.DoradeDescriptor$DescriptorException;

        specialinvoke $r4.<ucar.atd.dorade.DoradeDescriptor$DescriptorException: void <init>(java.lang.String)>("attempt to unpack too many cells");

        throw $r4;

     label05:
        i13 = i12;

     label06:
        $i19 = (int) $s10;

        $i4 = i12 + $i19;

        if i13 >= $i4 goto label09;

        if z0 == 0 goto label07;

        $s7 = virtualinvoke r1.<ucar.atd.dorade.DoradePARM: short grabShort(byte[],int)>(r2, i11);

        r0[i13] = $s7;

        i11 = i11 + 2;

        goto label08;

     label07:
        $i5 = r1.<ucar.atd.dorade.DoradePARM: int badDataFlag>;

        $s6 = (short) $i5;

        r0[i13] = $s6;

     label08:
        i13 = i13 + 1;

        goto label06;

     label09:
        $i20 = (int) $s10;

        i12 = i12 + $i20;

        goto label01;

     label10:
        i14 = i12;

     label11:
        if i14 >= i0 goto label12;

        $i8 = r1.<ucar.atd.dorade.DoradePARM: int badDataFlag>;

        $s9 = (short) $i8;

        r0[i14] = $s9;

        i14 = i14 + 1;

        goto label11;

     label12:
        return r0;
    }

    public static void <clinit>()
    {
        <ucar.atd.dorade.DoradePARM: int FORMAT_16BIT_FLOAT> = 5;

        <ucar.atd.dorade.DoradePARM: int FORMAT_32BIT_FLOAT> = 4;

        <ucar.atd.dorade.DoradePARM: int FORMAT_32BIT_INT> = 3;

        <ucar.atd.dorade.DoradePARM: int FORMAT_16BIT_INT> = 2;

        <ucar.atd.dorade.DoradePARM: int FORMAT_8BIT_INT> = 1;

        <ucar.atd.dorade.DoradePARM: float BAD_VALUE> = 3.4028235E38F;

        return;
    }
}
