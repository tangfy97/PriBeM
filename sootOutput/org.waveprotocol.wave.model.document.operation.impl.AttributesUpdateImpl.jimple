public class org.waveprotocol.wave.model.document.operation.impl.AttributesUpdateImpl extends org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap implements org.waveprotocol.wave.model.document.operation.AttributesUpdate
{
    public static final org.waveprotocol.wave.model.document.operation.impl.AttributesUpdateImpl EMPTY_MAP;

    public void <init>()
    {
        org.waveprotocol.wave.model.document.operation.impl.AttributesUpdateImpl r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.impl.AttributesUpdateImpl;

        specialinvoke r0.<org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap: void <init>()>();

        return;
    }

    public transient void <init>(java.lang.String[])
    {
        java.lang.String[] r1;
        org.waveprotocol.wave.model.document.operation.impl.AttributesUpdateImpl r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.impl.AttributesUpdateImpl;

        r1 := @parameter0: java.lang.String[];

        specialinvoke r0.<org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap: void <init>(java.lang.String[])>(r1);

        return;
    }

    public void <init>(java.util.Map)
    {
        org.waveprotocol.wave.model.document.operation.impl.AttributesUpdateImpl r0;
        java.util.Map r1;

        r0 := @this: org.waveprotocol.wave.model.document.operation.impl.AttributesUpdateImpl;

        r1 := @parameter0: java.util.Map;

        specialinvoke r0.<org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap: void <init>(java.util.Map)>(r1);

        return;
    }

    private void <init>(java.util.List)
    {
        java.util.List r1;
        org.waveprotocol.wave.model.document.operation.impl.AttributesUpdateImpl r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.impl.AttributesUpdateImpl;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap: void <init>(java.util.List)>(r1);

        return;
    }

    protected org.waveprotocol.wave.model.document.operation.impl.AttributesUpdateImpl createFromList(java.util.List)
    {
        java.util.List r1;
        org.waveprotocol.wave.model.document.operation.impl.AttributesUpdateImpl $r0, r2;

        r2 := @this: org.waveprotocol.wave.model.document.operation.impl.AttributesUpdateImpl;

        r1 := @parameter0: java.util.List;

        $r0 = new org.waveprotocol.wave.model.document.operation.impl.AttributesUpdateImpl;

        specialinvoke $r0.<org.waveprotocol.wave.model.document.operation.impl.AttributesUpdateImpl: void <init>(java.util.List)>(r1);

        return $r0;
    }

    public static org.waveprotocol.wave.model.document.operation.impl.AttributesUpdateImpl fromSortedUpdates(java.util.List)
    {
        java.util.List r0;
        org.waveprotocol.wave.model.document.operation.impl.AttributesUpdateImpl $r1;

        r0 := @parameter0: java.util.List;

        staticinvoke <org.waveprotocol.wave.model.document.operation.impl.AttributesUpdateImpl: void checkUpdatesSorted(java.util.List)>(r0);

        $r1 = staticinvoke <org.waveprotocol.wave.model.document.operation.impl.AttributesUpdateImpl: org.waveprotocol.wave.model.document.operation.impl.AttributesUpdateImpl fromSortedUpdatesUnchecked(java.util.List)>(r0);

        return $r1;
    }

    public static org.waveprotocol.wave.model.document.operation.impl.AttributesUpdateImpl fromSortedUpdatesUnchecked(java.util.List)
    {
        java.util.List r1;
        org.waveprotocol.wave.model.document.operation.impl.AttributesUpdateImpl $r0;

        r1 := @parameter0: java.util.List;

        $r0 = new org.waveprotocol.wave.model.document.operation.impl.AttributesUpdateImpl;

        specialinvoke $r0.<org.waveprotocol.wave.model.document.operation.impl.AttributesUpdateImpl: void <init>(java.util.List)>(r1);

        return $r0;
    }

    public static org.waveprotocol.wave.model.document.operation.impl.AttributesUpdateImpl fromUnsortedUpdates(java.util.List)
    {
        java.util.List r1;
        java.util.Comparator $r2;
        java.util.ArrayList $r0;
        org.waveprotocol.wave.model.document.operation.impl.AttributesUpdateImpl $r3;

        r1 := @parameter0: java.util.List;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>(java.util.Collection)>(r1);

        $r2 = <org.waveprotocol.wave.model.document.operation.impl.AttributesUpdateImpl: java.util.Comparator comparator>;

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r0, $r2);

        $r3 = staticinvoke <org.waveprotocol.wave.model.document.operation.impl.AttributesUpdateImpl: org.waveprotocol.wave.model.document.operation.impl.AttributesUpdateImpl fromSortedUpdates(java.util.List)>($r0);

        return $r3;
    }

    public static org.waveprotocol.wave.model.document.operation.impl.AttributesUpdateImpl fromUnsortedUpdatesUnchecked(java.util.List)
    {
        java.util.List r1;
        java.util.Comparator $r2;
        java.util.ArrayList $r0;
        org.waveprotocol.wave.model.document.operation.impl.AttributesUpdateImpl $r3;

        r1 := @parameter0: java.util.List;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>(java.util.Collection)>(r1);

        $r2 = <org.waveprotocol.wave.model.document.operation.impl.AttributesUpdateImpl: java.util.Comparator comparator>;

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r0, $r2);

        $r3 = staticinvoke <org.waveprotocol.wave.model.document.operation.impl.AttributesUpdateImpl: org.waveprotocol.wave.model.document.operation.impl.AttributesUpdateImpl fromSortedUpdatesUnchecked(java.util.List)>($r0);

        return $r3;
    }

    public static transient org.waveprotocol.wave.model.document.operation.AttributesUpdate fromUnsortedTripletsUnchecked(java.lang.String[])
    {
        org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap$AttributeUpdate $r3;
        java.lang.String[] r0;
        java.util.ArrayList $r1;
        int $i0, $i1, $i2, $i3, i4, $i5;
        java.lang.String $r4, $r5, $r6;
        org.waveprotocol.wave.model.document.operation.impl.AttributesUpdateImpl $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.String[];

        $i0 = lengthof r0;

        $i1 = $i0 % 3;

        if $i1 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "triplets.length must be divisible by 3");

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        i4 = 0;

     label3:
        $i5 = lengthof r0;

        if i4 >= $i5 goto label4;

        $r3 = new org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap$AttributeUpdate;

        $r6 = r0[i4];

        $i2 = i4 + 1;

        $r5 = r0[$i2];

        $i3 = i4 + 2;

        $r4 = r0[$i3];

        specialinvoke $r3.<org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap$AttributeUpdate: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r6, $r5, $r4);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r3);

        i4 = i4 + 3;

        goto label3;

     label4:
        $r2 = staticinvoke <org.waveprotocol.wave.model.document.operation.impl.AttributesUpdateImpl: org.waveprotocol.wave.model.document.operation.impl.AttributesUpdateImpl fromUnsortedUpdatesUnchecked(java.util.List)>($r1);

        return $r2;
    }

    protected volatile org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap createFromList(java.util.List)
    {
        java.util.List r1;
        org.waveprotocol.wave.model.document.operation.impl.AttributesUpdateImpl r0, $r2;

        r0 := @this: org.waveprotocol.wave.model.document.operation.impl.AttributesUpdateImpl;

        r1 := @parameter0: java.util.List;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.document.operation.impl.AttributesUpdateImpl: org.waveprotocol.wave.model.document.operation.impl.AttributesUpdateImpl createFromList(java.util.List)>(r1);

        return $r2;
    }

    public volatile org.waveprotocol.wave.model.document.operation.AttributesUpdate exclude(java.util.Collection)
    {
        java.util.Collection r1;
        org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap $r2;
        org.waveprotocol.wave.model.document.operation.AttributesUpdate $r3;
        org.waveprotocol.wave.model.document.operation.impl.AttributesUpdateImpl r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.impl.AttributesUpdateImpl;

        r1 := @parameter0: java.util.Collection;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap: org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap exclude(java.util.Collection)>(r1);

        $r3 = (org.waveprotocol.wave.model.document.operation.AttributesUpdate) $r2;

        return $r3;
    }

    public volatile org.waveprotocol.wave.model.document.operation.AttributesUpdate composeWith(org.waveprotocol.wave.model.document.operation.AttributesUpdate)
    {
        org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap $r2;
        org.waveprotocol.wave.model.document.operation.AttributesUpdate r1, $r3;
        org.waveprotocol.wave.model.document.operation.impl.AttributesUpdateImpl r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.impl.AttributesUpdateImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.AttributesUpdate;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap: org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap composeWith(org.waveprotocol.wave.model.document.operation.util.UpdateMap)>(r1);

        $r3 = (org.waveprotocol.wave.model.document.operation.AttributesUpdate) $r2;

        return $r3;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.model.document.operation.impl.AttributesUpdateImpl $r0;

        $r0 = new org.waveprotocol.wave.model.document.operation.impl.AttributesUpdateImpl;

        specialinvoke $r0.<org.waveprotocol.wave.model.document.operation.impl.AttributesUpdateImpl: void <init>()>();

        <org.waveprotocol.wave.model.document.operation.impl.AttributesUpdateImpl: org.waveprotocol.wave.model.document.operation.impl.AttributesUpdateImpl EMPTY_MAP> = $r0;

        return;
    }
}
