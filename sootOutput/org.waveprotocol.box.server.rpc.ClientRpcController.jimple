class org.waveprotocol.box.server.rpc.ClientRpcController extends java.lang.Object implements com.google.protobuf.RpcController
{
    private final org.waveprotocol.box.server.rpc.ClientRpcChannel owner;
    private org.waveprotocol.box.server.rpc.ClientRpcController$RpcState state;

    void <init>(org.waveprotocol.box.server.rpc.ClientRpcChannel)
    {
        org.waveprotocol.box.server.rpc.ClientRpcChannel r1;
        org.waveprotocol.box.server.rpc.ClientRpcController r0;

        r0 := @this: org.waveprotocol.box.server.rpc.ClientRpcController;

        r1 := @parameter0: org.waveprotocol.box.server.rpc.ClientRpcChannel;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.box.server.rpc.ClientRpcController: org.waveprotocol.box.server.rpc.ClientRpcController$RpcState state> = null;

        r0.<org.waveprotocol.box.server.rpc.ClientRpcController: org.waveprotocol.box.server.rpc.ClientRpcChannel owner> = r1;

        r0.<org.waveprotocol.box.server.rpc.ClientRpcController: org.waveprotocol.box.server.rpc.ClientRpcController$RpcState state> = null;

        return;
    }

    org.waveprotocol.box.server.rpc.ClientRpcController$Status status()
    {
        org.waveprotocol.box.server.rpc.ClientRpcController r0;
        org.waveprotocol.box.server.rpc.ClientRpcController$Status $r3;
        org.waveprotocol.box.server.rpc.ClientRpcController$RpcState $r1, $r2;
        boolean $z0;

        r0 := @this: org.waveprotocol.box.server.rpc.ClientRpcController;

        $r1 = r0.<org.waveprotocol.box.server.rpc.ClientRpcController: org.waveprotocol.box.server.rpc.ClientRpcController$RpcState state>;

        if $r1 != null goto label1;

        $r3 = <org.waveprotocol.box.server.rpc.ClientRpcController$Status: org.waveprotocol.box.server.rpc.ClientRpcController$Status PENDING>;

        goto label3;

     label1:
        $r2 = r0.<org.waveprotocol.box.server.rpc.ClientRpcController: org.waveprotocol.box.server.rpc.ClientRpcController$RpcState state>;

        $z0 = staticinvoke <org.waveprotocol.box.server.rpc.ClientRpcController$RpcState: boolean access$000(org.waveprotocol.box.server.rpc.ClientRpcController$RpcState)>($r2);

        if $z0 == 0 goto label2;

        $r3 = <org.waveprotocol.box.server.rpc.ClientRpcController$Status: org.waveprotocol.box.server.rpc.ClientRpcController$Status COMPLETE>;

        goto label3;

     label2:
        $r3 = <org.waveprotocol.box.server.rpc.ClientRpcController$Status: org.waveprotocol.box.server.rpc.ClientRpcController$Status ACTIVE>;

     label3:
        return $r3;
    }

    private void checkStatus(org.waveprotocol.box.server.rpc.ClientRpcController$Status)
    {
        java.lang.IllegalStateException $r3;
        org.waveprotocol.box.server.rpc.ClientRpcController$Status $r1, r2;
        org.waveprotocol.box.server.rpc.ClientRpcController r0;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8;
        java.lang.String $r9;
        boolean $z0;

        r0 := @this: org.waveprotocol.box.server.rpc.ClientRpcController;

        r2 := @parameter0: org.waveprotocol.box.server.rpc.ClientRpcController$Status;

        $r1 = virtualinvoke r0.<org.waveprotocol.box.server.rpc.ClientRpcController: org.waveprotocol.box.server.rpc.ClientRpcController$Status status()>();

        $z0 = virtualinvoke $r1.<org.waveprotocol.box.server.rpc.ClientRpcController$Status: boolean equals(java.lang.Object)>(r2);

        if $z0 != 0 goto label1;

        $r3 = new java.lang.IllegalStateException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Controller expected status ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", was ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9);

        throw $r3;

     label1:
        return;
    }

    void configure(org.waveprotocol.box.server.rpc.ClientRpcController$RpcState)
    {
        java.lang.IllegalStateException $r15;
        org.waveprotocol.box.server.rpc.ClientRpcController$Status $r1;
        org.waveprotocol.box.server.rpc.ClientRpcController r0;
        java.lang.String $r14;
        org.waveprotocol.box.server.rpc.ClientRpcController$RpcState $r2, r3;
        boolean $z0;
        org.waveprotocol.box.server.rpc.ClientRpcChannel $r4, $r5, $r9, $r12;
        java.lang.IllegalArgumentException $r6;
        java.lang.StringBuilder $r7, $r8, $r10, $r11, $r13;

        r0 := @this: org.waveprotocol.box.server.rpc.ClientRpcController;

        r3 := @parameter0: org.waveprotocol.box.server.rpc.ClientRpcController$RpcState;

        $r1 = <org.waveprotocol.box.server.rpc.ClientRpcController$Status: org.waveprotocol.box.server.rpc.ClientRpcController$Status PENDING>;

        specialinvoke r0.<org.waveprotocol.box.server.rpc.ClientRpcController: void checkStatus(org.waveprotocol.box.server.rpc.ClientRpcController$Status)>($r1);

        $r2 = r0.<org.waveprotocol.box.server.rpc.ClientRpcController: org.waveprotocol.box.server.rpc.ClientRpcController$RpcState state>;

        if $r2 == null goto label1;

        $r15 = new java.lang.IllegalStateException;

        specialinvoke $r15.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Can\'t configure this RPC, already configured.");

        throw $r15;

     label1:
        $r4 = r0.<org.waveprotocol.box.server.rpc.ClientRpcController: org.waveprotocol.box.server.rpc.ClientRpcChannel owner>;

        $r5 = staticinvoke <org.waveprotocol.box.server.rpc.ClientRpcController$RpcState: org.waveprotocol.box.server.rpc.ClientRpcChannel access$100(org.waveprotocol.box.server.rpc.ClientRpcController$RpcState)>(r3);

        $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label2;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Should only be configured by ");

        $r9 = r0.<org.waveprotocol.box.server.rpc.ClientRpcController: org.waveprotocol.box.server.rpc.ClientRpcChannel owner>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", configuration attempted by ");

        $r12 = staticinvoke <org.waveprotocol.box.server.rpc.ClientRpcController$RpcState: org.waveprotocol.box.server.rpc.ClientRpcChannel access$100(org.waveprotocol.box.server.rpc.ClientRpcController$RpcState)>(r3);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r6;

     label2:
        r0.<org.waveprotocol.box.server.rpc.ClientRpcController: org.waveprotocol.box.server.rpc.ClientRpcController$RpcState state> = r3;

        return;
    }

    void response(com.google.protobuf.Message)
    {
        java.lang.IllegalStateException $r6;
        java.lang.RuntimeException $r7;
        org.waveprotocol.box.server.rpc.ClientRpcController$Status $r1;
        com.google.protobuf.RpcCallback $r9;
        org.waveprotocol.box.server.rpc.ClientRpcController r0;
        com.google.protobuf.Message r3;
        org.waveprotocol.box.server.rpc.ClientRpcController$RpcState $r2, $r4, $r5, $r8;
        boolean $z0;

        r0 := @this: org.waveprotocol.box.server.rpc.ClientRpcController;

        r3 := @parameter0: com.google.protobuf.Message;

        $r1 = <org.waveprotocol.box.server.rpc.ClientRpcController$Status: org.waveprotocol.box.server.rpc.ClientRpcController$Status ACTIVE>;

        specialinvoke r0.<org.waveprotocol.box.server.rpc.ClientRpcController: void checkStatus(org.waveprotocol.box.server.rpc.ClientRpcController$Status)>($r1);

        $r2 = r0.<org.waveprotocol.box.server.rpc.ClientRpcController: org.waveprotocol.box.server.rpc.ClientRpcController$RpcState state>;

        $z0 = staticinvoke <org.waveprotocol.box.server.rpc.ClientRpcController$RpcState: boolean access$200(org.waveprotocol.box.server.rpc.ClientRpcController$RpcState)>($r2);

        if $z0 != 0 goto label2;

        if r3 != null goto label1;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Normal RPCs should not be completed early.");

        throw $r6;

     label1:
        $r5 = r0.<org.waveprotocol.box.server.rpc.ClientRpcController: org.waveprotocol.box.server.rpc.ClientRpcController$RpcState state>;

        staticinvoke <org.waveprotocol.box.server.rpc.ClientRpcController$RpcState: boolean access$002(org.waveprotocol.box.server.rpc.ClientRpcController$RpcState,boolean)>($r5, 1);

        goto label3;

     label2:
        if r3 != null goto label3;

        $r4 = r0.<org.waveprotocol.box.server.rpc.ClientRpcController: org.waveprotocol.box.server.rpc.ClientRpcController$RpcState state>;

        staticinvoke <org.waveprotocol.box.server.rpc.ClientRpcController$RpcState: boolean access$002(org.waveprotocol.box.server.rpc.ClientRpcController$RpcState,boolean)>($r4, 1);

     label3:
        $r8 = r0.<org.waveprotocol.box.server.rpc.ClientRpcController: org.waveprotocol.box.server.rpc.ClientRpcController$RpcState state>;

        $r9 = staticinvoke <org.waveprotocol.box.server.rpc.ClientRpcController$RpcState: com.google.protobuf.RpcCallback access$300(org.waveprotocol.box.server.rpc.ClientRpcController$RpcState)>($r8);

        interfaceinvoke $r9.<com.google.protobuf.RpcCallback: void run(java.lang.Object)>(r3);

     label4:
        goto label6;

     label5:
        $r7 := @caughtexception;

        virtualinvoke $r7.<java.lang.RuntimeException: void printStackTrace()>();

     label6:
        return;

        catch java.lang.RuntimeException from label3 to label4 with label5;
    }

    void failure(java.lang.String)
    {
        org.waveprotocol.box.server.rpc.ClientRpcController$Status $r1;
        com.google.protobuf.RpcCallback $r7;
        org.waveprotocol.box.server.rpc.ClientRpcController r0;
        java.lang.String r4;
        org.waveprotocol.box.server.rpc.ClientRpcController$RpcState $r2, $r3, $r5, $r6;

        r0 := @this: org.waveprotocol.box.server.rpc.ClientRpcController;

        r4 := @parameter0: java.lang.String;

        $r1 = <org.waveprotocol.box.server.rpc.ClientRpcController$Status: org.waveprotocol.box.server.rpc.ClientRpcController$Status ACTIVE>;

        specialinvoke r0.<org.waveprotocol.box.server.rpc.ClientRpcController: void checkStatus(org.waveprotocol.box.server.rpc.ClientRpcController$Status)>($r1);

        $r2 = r0.<org.waveprotocol.box.server.rpc.ClientRpcController: org.waveprotocol.box.server.rpc.ClientRpcController$RpcState state>;

        staticinvoke <org.waveprotocol.box.server.rpc.ClientRpcController$RpcState: boolean access$002(org.waveprotocol.box.server.rpc.ClientRpcController$RpcState,boolean)>($r2, 1);

        $r3 = r0.<org.waveprotocol.box.server.rpc.ClientRpcController: org.waveprotocol.box.server.rpc.ClientRpcController$RpcState state>;

        staticinvoke <org.waveprotocol.box.server.rpc.ClientRpcController$RpcState: boolean access$402(org.waveprotocol.box.server.rpc.ClientRpcController$RpcState,boolean)>($r3, 1);

        $r5 = r0.<org.waveprotocol.box.server.rpc.ClientRpcController: org.waveprotocol.box.server.rpc.ClientRpcController$RpcState state>;

        staticinvoke <org.waveprotocol.box.server.rpc.ClientRpcController$RpcState: java.lang.String access$502(org.waveprotocol.box.server.rpc.ClientRpcController$RpcState,java.lang.String)>($r5, r4);

        $r6 = r0.<org.waveprotocol.box.server.rpc.ClientRpcController: org.waveprotocol.box.server.rpc.ClientRpcController$RpcState state>;

        $r7 = staticinvoke <org.waveprotocol.box.server.rpc.ClientRpcController$RpcState: com.google.protobuf.RpcCallback access$300(org.waveprotocol.box.server.rpc.ClientRpcController$RpcState)>($r6);

        interfaceinvoke $r7.<com.google.protobuf.RpcCallback: void run(java.lang.Object)>(null);

        return;
    }

    public java.lang.String errorText()
    {
        org.waveprotocol.box.server.rpc.ClientRpcController r0;
        java.lang.String $r2;
        boolean $z0;
        org.waveprotocol.box.server.rpc.ClientRpcController$RpcState $r1;

        r0 := @this: org.waveprotocol.box.server.rpc.ClientRpcController;

        $z0 = virtualinvoke r0.<org.waveprotocol.box.server.rpc.ClientRpcController: boolean failed()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<org.waveprotocol.box.server.rpc.ClientRpcController: org.waveprotocol.box.server.rpc.ClientRpcController$RpcState state>;

        $r2 = staticinvoke <org.waveprotocol.box.server.rpc.ClientRpcController$RpcState: java.lang.String access$500(org.waveprotocol.box.server.rpc.ClientRpcController$RpcState)>($r1);

        goto label2;

     label1:
        $r2 = null;

     label2:
        return $r2;
    }

    public boolean failed()
    {
        org.waveprotocol.box.server.rpc.ClientRpcController r0;
        org.waveprotocol.box.server.rpc.ClientRpcController$Status $r1;
        org.waveprotocol.box.server.rpc.ClientRpcController$RpcState $r2;
        boolean $z0;

        r0 := @this: org.waveprotocol.box.server.rpc.ClientRpcController;

        $r1 = <org.waveprotocol.box.server.rpc.ClientRpcController$Status: org.waveprotocol.box.server.rpc.ClientRpcController$Status COMPLETE>;

        specialinvoke r0.<org.waveprotocol.box.server.rpc.ClientRpcController: void checkStatus(org.waveprotocol.box.server.rpc.ClientRpcController$Status)>($r1);

        $r2 = r0.<org.waveprotocol.box.server.rpc.ClientRpcController: org.waveprotocol.box.server.rpc.ClientRpcController$RpcState state>;

        $z0 = staticinvoke <org.waveprotocol.box.server.rpc.ClientRpcController$RpcState: boolean access$400(org.waveprotocol.box.server.rpc.ClientRpcController$RpcState)>($r2);

        return $z0;
    }

    public boolean isCanceled()
    {
        java.lang.UnsupportedOperationException $r0;
        org.waveprotocol.box.server.rpc.ClientRpcController r1;

        r1 := @this: org.waveprotocol.box.server.rpc.ClientRpcController;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Server-side method of RpcController only.");

        throw $r0;
    }

    public void notifyOnCancel(com.google.protobuf.RpcCallback)
    {
        java.lang.UnsupportedOperationException $r0;
        org.waveprotocol.box.server.rpc.ClientRpcController r1;
        com.google.protobuf.RpcCallback r2;

        r1 := @this: org.waveprotocol.box.server.rpc.ClientRpcController;

        r2 := @parameter0: com.google.protobuf.RpcCallback;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Server-side method of RpcController only.");

        throw $r0;
    }

    public void reset()
    {
        org.waveprotocol.box.server.rpc.ClientRpcController r0;
        org.waveprotocol.box.server.rpc.ClientRpcController$Status $r1;

        r0 := @this: org.waveprotocol.box.server.rpc.ClientRpcController;

        $r1 = <org.waveprotocol.box.server.rpc.ClientRpcController$Status: org.waveprotocol.box.server.rpc.ClientRpcController$Status COMPLETE>;

        specialinvoke r0.<org.waveprotocol.box.server.rpc.ClientRpcController: void checkStatus(org.waveprotocol.box.server.rpc.ClientRpcController$Status)>($r1);

        r0.<org.waveprotocol.box.server.rpc.ClientRpcController: org.waveprotocol.box.server.rpc.ClientRpcController$RpcState state> = null;

        return;
    }

    public void setFailed(java.lang.String)
    {
        java.lang.UnsupportedOperationException $r0;
        java.lang.String r2;
        org.waveprotocol.box.server.rpc.ClientRpcController r1;

        r1 := @this: org.waveprotocol.box.server.rpc.ClientRpcController;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Server-side method of RpcController only.");

        throw $r0;
    }

    public void startCancel()
    {
        java.lang.IllegalStateException $r6;
        org.waveprotocol.box.server.rpc.ClientRpcController r0;
        org.waveprotocol.box.server.rpc.ClientRpcController$Status $r1, $r2, $r3;
        java.lang.Runnable $r5;
        org.waveprotocol.box.server.rpc.ClientRpcController$RpcState $r4;

        r0 := @this: org.waveprotocol.box.server.rpc.ClientRpcController;

        $r1 = virtualinvoke r0.<org.waveprotocol.box.server.rpc.ClientRpcController: org.waveprotocol.box.server.rpc.ClientRpcController$Status status()>();

        $r2 = <org.waveprotocol.box.server.rpc.ClientRpcController$Status: org.waveprotocol.box.server.rpc.ClientRpcController$Status PENDING>;

        if $r1 != $r2 goto label1;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Can\'t cancel this RPC, not currently active.");

        throw $r6;

     label1:
        $r3 = <org.waveprotocol.box.server.rpc.ClientRpcController$Status: org.waveprotocol.box.server.rpc.ClientRpcController$Status COMPLETE>;

        if $r1 != $r3 goto label2;

        goto label3;

     label2:
        $r4 = r0.<org.waveprotocol.box.server.rpc.ClientRpcController: org.waveprotocol.box.server.rpc.ClientRpcController$RpcState state>;

        $r5 = staticinvoke <org.waveprotocol.box.server.rpc.ClientRpcController$RpcState: java.lang.Runnable access$600(org.waveprotocol.box.server.rpc.ClientRpcController$RpcState)>($r4);

        interfaceinvoke $r5.<java.lang.Runnable: void run()>();

     label3:
        return;
    }
}
