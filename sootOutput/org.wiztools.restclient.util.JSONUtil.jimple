public final class org.wiztools.restclient.util.JSONUtil extends java.lang.Object
{

    private void <init>()
    {
        org.wiztools.restclient.util.JSONUtil r0;

        r0 := @this: org.wiztools.restclient.util.JSONUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String indentJSON(java.lang.String) throws org.wiztools.restclient.util.JSONUtil$JSONParseException
    {
        org.wiztools.restclient.util.JSONUtil$JSONParseException $r11;
        java.io.StringWriter $r6;
        java.io.IOException $r9;
        org.codehaus.jackson.JsonNode $r5;
        org.codehaus.jackson.JsonFactory $r0;
        java.io.StringReader $r1;
        org.codehaus.jackson.JsonParseException $r10;
        org.codehaus.jackson.JsonGenerator $r7;
        java.lang.String r2, $r8, $r12;
        org.codehaus.jackson.map.ObjectMapper $r4;
        org.codehaus.jackson.JsonParser $r3;

        r2 := @parameter0: java.lang.String;

        $r0 = new org.codehaus.jackson.JsonFactory;

        specialinvoke $r0.<org.codehaus.jackson.JsonFactory: void <init>()>();

     label1:
        $r1 = new java.io.StringReader;

        specialinvoke $r1.<java.io.StringReader: void <init>(java.lang.String)>(r2);

        $r3 = virtualinvoke $r0.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.JsonParser createJsonParser(java.io.Reader)>($r1);

        $r4 = new org.codehaus.jackson.map.ObjectMapper;

        specialinvoke $r4.<org.codehaus.jackson.map.ObjectMapper: void <init>()>();

     label2:
        $r5 = virtualinvoke $r4.<org.codehaus.jackson.map.ObjectMapper: org.codehaus.jackson.JsonNode readTree(org.codehaus.jackson.JsonParser)>($r3);

     label3:
        goto label5;

     label4:
        $r10 := @caughtexception;

        $r11 = new org.wiztools.restclient.util.JSONUtil$JSONParseException;

        $r12 = virtualinvoke $r10.<org.codehaus.jackson.JsonParseException: java.lang.String getMessage()>();

        specialinvoke $r11.<org.wiztools.restclient.util.JSONUtil$JSONParseException: void <init>(java.lang.String)>($r12);

        throw $r11;

     label5:
        $r6 = new java.io.StringWriter;

        specialinvoke $r6.<java.io.StringWriter: void <init>()>();

        $r7 = virtualinvoke $r0.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.JsonGenerator createJsonGenerator(java.io.Writer)>($r6);

        virtualinvoke $r7.<org.codehaus.jackson.JsonGenerator: org.codehaus.jackson.JsonGenerator useDefaultPrettyPrinter()>();

        virtualinvoke $r4.<org.codehaus.jackson.map.ObjectMapper: void writeTree(org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.JsonNode)>($r7, $r5);

        virtualinvoke $r7.<org.codehaus.jackson.JsonGenerator: void flush()>();

        virtualinvoke $r7.<org.codehaus.jackson.JsonGenerator: void close()>();

        $r8 = virtualinvoke $r6.<java.io.StringWriter: java.lang.String toString()>();

     label6:
        return $r8;

     label7:
        $r9 := @caughtexception;

        virtualinvoke $r9.<java.io.IOException: void printStackTrace()>();

        return r2;

        catch org.codehaus.jackson.JsonParseException from label2 to label3 with label4;
        catch java.io.IOException from label1 to label6 with label7;
    }
}
