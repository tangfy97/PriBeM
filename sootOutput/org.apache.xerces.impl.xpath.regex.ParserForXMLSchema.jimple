class org.apache.xerces.impl.xpath.regex.ParserForXMLSchema extends org.apache.xerces.impl.xpath.regex.RegexParser
{
    private static java.util.Hashtable ranges;
    private static java.util.Hashtable ranges2;
    private static final java.lang.String SPACES;
    private static final java.lang.String NAMECHARS;
    private static final java.lang.String LETTERS;
    private static final java.lang.String DIGITS;

    public void <init>()
    {
        org.apache.xerces.impl.xpath.regex.ParserForXMLSchema r0;

        r0 := @this: org.apache.xerces.impl.xpath.regex.ParserForXMLSchema;

        specialinvoke r0.<org.apache.xerces.impl.xpath.regex.RegexParser: void <init>()>();

        return;
    }

    public void <init>(java.util.Locale)
    {
        org.apache.xerces.impl.xpath.regex.ParserForXMLSchema r0;
        java.util.Locale r1;

        r0 := @this: org.apache.xerces.impl.xpath.regex.ParserForXMLSchema;

        r1 := @parameter0: java.util.Locale;

        specialinvoke r0.<org.apache.xerces.impl.xpath.regex.RegexParser: void <init>(java.util.Locale)>(r1);

        return;
    }

    org.apache.xerces.impl.xpath.regex.Token processCaret() throws org.apache.xerces.impl.xpath.regex.ParseException
    {
        org.apache.xerces.impl.xpath.regex.ParserForXMLSchema r0;
        org.apache.xerces.impl.xpath.regex.Token$CharToken $r1;

        r0 := @this: org.apache.xerces.impl.xpath.regex.ParserForXMLSchema;

        virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: void next()>();

        $r1 = staticinvoke <org.apache.xerces.impl.xpath.regex.Token: org.apache.xerces.impl.xpath.regex.Token$CharToken createChar(int)>(94);

        return $r1;
    }

    org.apache.xerces.impl.xpath.regex.Token processDollar() throws org.apache.xerces.impl.xpath.regex.ParseException
    {
        org.apache.xerces.impl.xpath.regex.ParserForXMLSchema r0;
        org.apache.xerces.impl.xpath.regex.Token$CharToken $r1;

        r0 := @this: org.apache.xerces.impl.xpath.regex.ParserForXMLSchema;

        virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: void next()>();

        $r1 = staticinvoke <org.apache.xerces.impl.xpath.regex.Token: org.apache.xerces.impl.xpath.regex.Token$CharToken createChar(int)>(36);

        return $r1;
    }

    org.apache.xerces.impl.xpath.regex.Token processLookahead() throws org.apache.xerces.impl.xpath.regex.ParseException
    {
        int $i0;
        org.apache.xerces.impl.xpath.regex.ParserForXMLSchema r0;
        org.apache.xerces.impl.xpath.regex.ParseException $r1;

        r0 := @this: org.apache.xerces.impl.xpath.regex.ParserForXMLSchema;

        $i0 = r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: int offset>;

        $r1 = virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: org.apache.xerces.impl.xpath.regex.ParseException ex(java.lang.String,int)>("parser.process.1", $i0);

        throw $r1;
    }

    org.apache.xerces.impl.xpath.regex.Token processNegativelookahead() throws org.apache.xerces.impl.xpath.regex.ParseException
    {
        int $i0;
        org.apache.xerces.impl.xpath.regex.ParserForXMLSchema r0;
        org.apache.xerces.impl.xpath.regex.ParseException $r1;

        r0 := @this: org.apache.xerces.impl.xpath.regex.ParserForXMLSchema;

        $i0 = r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: int offset>;

        $r1 = virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: org.apache.xerces.impl.xpath.regex.ParseException ex(java.lang.String,int)>("parser.process.1", $i0);

        throw $r1;
    }

    org.apache.xerces.impl.xpath.regex.Token processLookbehind() throws org.apache.xerces.impl.xpath.regex.ParseException
    {
        int $i0;
        org.apache.xerces.impl.xpath.regex.ParserForXMLSchema r0;
        org.apache.xerces.impl.xpath.regex.ParseException $r1;

        r0 := @this: org.apache.xerces.impl.xpath.regex.ParserForXMLSchema;

        $i0 = r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: int offset>;

        $r1 = virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: org.apache.xerces.impl.xpath.regex.ParseException ex(java.lang.String,int)>("parser.process.1", $i0);

        throw $r1;
    }

    org.apache.xerces.impl.xpath.regex.Token processNegativelookbehind() throws org.apache.xerces.impl.xpath.regex.ParseException
    {
        int $i0;
        org.apache.xerces.impl.xpath.regex.ParserForXMLSchema r0;
        org.apache.xerces.impl.xpath.regex.ParseException $r1;

        r0 := @this: org.apache.xerces.impl.xpath.regex.ParserForXMLSchema;

        $i0 = r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: int offset>;

        $r1 = virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: org.apache.xerces.impl.xpath.regex.ParseException ex(java.lang.String,int)>("parser.process.1", $i0);

        throw $r1;
    }

    org.apache.xerces.impl.xpath.regex.Token processBacksolidus_A() throws org.apache.xerces.impl.xpath.regex.ParseException
    {
        int $i0;
        org.apache.xerces.impl.xpath.regex.ParserForXMLSchema r0;
        org.apache.xerces.impl.xpath.regex.ParseException $r1;

        r0 := @this: org.apache.xerces.impl.xpath.regex.ParserForXMLSchema;

        $i0 = r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: int offset>;

        $r1 = virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: org.apache.xerces.impl.xpath.regex.ParseException ex(java.lang.String,int)>("parser.process.1", $i0);

        throw $r1;
    }

    org.apache.xerces.impl.xpath.regex.Token processBacksolidus_Z() throws org.apache.xerces.impl.xpath.regex.ParseException
    {
        int $i0;
        org.apache.xerces.impl.xpath.regex.ParserForXMLSchema r0;
        org.apache.xerces.impl.xpath.regex.ParseException $r1;

        r0 := @this: org.apache.xerces.impl.xpath.regex.ParserForXMLSchema;

        $i0 = r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: int offset>;

        $r1 = virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: org.apache.xerces.impl.xpath.regex.ParseException ex(java.lang.String,int)>("parser.process.1", $i0);

        throw $r1;
    }

    org.apache.xerces.impl.xpath.regex.Token processBacksolidus_z() throws org.apache.xerces.impl.xpath.regex.ParseException
    {
        int $i0;
        org.apache.xerces.impl.xpath.regex.ParserForXMLSchema r0;
        org.apache.xerces.impl.xpath.regex.ParseException $r1;

        r0 := @this: org.apache.xerces.impl.xpath.regex.ParserForXMLSchema;

        $i0 = r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: int offset>;

        $r1 = virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: org.apache.xerces.impl.xpath.regex.ParseException ex(java.lang.String,int)>("parser.process.1", $i0);

        throw $r1;
    }

    org.apache.xerces.impl.xpath.regex.Token processBacksolidus_b() throws org.apache.xerces.impl.xpath.regex.ParseException
    {
        int $i0;
        org.apache.xerces.impl.xpath.regex.ParserForXMLSchema r0;
        org.apache.xerces.impl.xpath.regex.ParseException $r1;

        r0 := @this: org.apache.xerces.impl.xpath.regex.ParserForXMLSchema;

        $i0 = r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: int offset>;

        $r1 = virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: org.apache.xerces.impl.xpath.regex.ParseException ex(java.lang.String,int)>("parser.process.1", $i0);

        throw $r1;
    }

    org.apache.xerces.impl.xpath.regex.Token processBacksolidus_B() throws org.apache.xerces.impl.xpath.regex.ParseException
    {
        int $i0;
        org.apache.xerces.impl.xpath.regex.ParserForXMLSchema r0;
        org.apache.xerces.impl.xpath.regex.ParseException $r1;

        r0 := @this: org.apache.xerces.impl.xpath.regex.ParserForXMLSchema;

        $i0 = r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: int offset>;

        $r1 = virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: org.apache.xerces.impl.xpath.regex.ParseException ex(java.lang.String,int)>("parser.process.1", $i0);

        throw $r1;
    }

    org.apache.xerces.impl.xpath.regex.Token processBacksolidus_lt() throws org.apache.xerces.impl.xpath.regex.ParseException
    {
        int $i0;
        org.apache.xerces.impl.xpath.regex.ParserForXMLSchema r0;
        org.apache.xerces.impl.xpath.regex.ParseException $r1;

        r0 := @this: org.apache.xerces.impl.xpath.regex.ParserForXMLSchema;

        $i0 = r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: int offset>;

        $r1 = virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: org.apache.xerces.impl.xpath.regex.ParseException ex(java.lang.String,int)>("parser.process.1", $i0);

        throw $r1;
    }

    org.apache.xerces.impl.xpath.regex.Token processBacksolidus_gt() throws org.apache.xerces.impl.xpath.regex.ParseException
    {
        int $i0;
        org.apache.xerces.impl.xpath.regex.ParserForXMLSchema r0;
        org.apache.xerces.impl.xpath.regex.ParseException $r1;

        r0 := @this: org.apache.xerces.impl.xpath.regex.ParserForXMLSchema;

        $i0 = r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: int offset>;

        $r1 = virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: org.apache.xerces.impl.xpath.regex.ParseException ex(java.lang.String,int)>("parser.process.1", $i0);

        throw $r1;
    }

    org.apache.xerces.impl.xpath.regex.Token processStar(org.apache.xerces.impl.xpath.regex.Token) throws org.apache.xerces.impl.xpath.regex.ParseException
    {
        org.apache.xerces.impl.xpath.regex.Token$ClosureToken $r2;
        org.apache.xerces.impl.xpath.regex.ParserForXMLSchema r0;
        org.apache.xerces.impl.xpath.regex.Token r1;

        r0 := @this: org.apache.xerces.impl.xpath.regex.ParserForXMLSchema;

        r1 := @parameter0: org.apache.xerces.impl.xpath.regex.Token;

        virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: void next()>();

        $r2 = staticinvoke <org.apache.xerces.impl.xpath.regex.Token: org.apache.xerces.impl.xpath.regex.Token$ClosureToken createClosure(org.apache.xerces.impl.xpath.regex.Token)>(r1);

        return $r2;
    }

    org.apache.xerces.impl.xpath.regex.Token processPlus(org.apache.xerces.impl.xpath.regex.Token) throws org.apache.xerces.impl.xpath.regex.ParseException
    {
        org.apache.xerces.impl.xpath.regex.Token$ClosureToken $r2;
        org.apache.xerces.impl.xpath.regex.Token r1;
        org.apache.xerces.impl.xpath.regex.ParserForXMLSchema r0;
        org.apache.xerces.impl.xpath.regex.Token$ConcatToken $r3;

        r0 := @this: org.apache.xerces.impl.xpath.regex.ParserForXMLSchema;

        r1 := @parameter0: org.apache.xerces.impl.xpath.regex.Token;

        virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: void next()>();

        $r2 = staticinvoke <org.apache.xerces.impl.xpath.regex.Token: org.apache.xerces.impl.xpath.regex.Token$ClosureToken createClosure(org.apache.xerces.impl.xpath.regex.Token)>(r1);

        $r3 = staticinvoke <org.apache.xerces.impl.xpath.regex.Token: org.apache.xerces.impl.xpath.regex.Token$ConcatToken createConcat(org.apache.xerces.impl.xpath.regex.Token,org.apache.xerces.impl.xpath.regex.Token)>(r1, $r2);

        return $r3;
    }

    org.apache.xerces.impl.xpath.regex.Token processQuestion(org.apache.xerces.impl.xpath.regex.Token) throws org.apache.xerces.impl.xpath.regex.ParseException
    {
        org.apache.xerces.impl.xpath.regex.Token r2, $r3;
        org.apache.xerces.impl.xpath.regex.ParserForXMLSchema r0;
        org.apache.xerces.impl.xpath.regex.Token$UnionToken $r1;

        r0 := @this: org.apache.xerces.impl.xpath.regex.ParserForXMLSchema;

        r2 := @parameter0: org.apache.xerces.impl.xpath.regex.Token;

        virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: void next()>();

        $r1 = staticinvoke <org.apache.xerces.impl.xpath.regex.Token: org.apache.xerces.impl.xpath.regex.Token$UnionToken createUnion()>();

        virtualinvoke $r1.<org.apache.xerces.impl.xpath.regex.Token: void addChild(org.apache.xerces.impl.xpath.regex.Token)>(r2);

        $r3 = staticinvoke <org.apache.xerces.impl.xpath.regex.Token: org.apache.xerces.impl.xpath.regex.Token createEmpty()>();

        virtualinvoke $r1.<org.apache.xerces.impl.xpath.regex.Token: void addChild(org.apache.xerces.impl.xpath.regex.Token)>($r3);

        return $r1;
    }

    boolean checkQuestion(int)
    {
        int i0;
        org.apache.xerces.impl.xpath.regex.ParserForXMLSchema r0;

        r0 := @this: org.apache.xerces.impl.xpath.regex.ParserForXMLSchema;

        i0 := @parameter0: int;

        return 0;
    }

    org.apache.xerces.impl.xpath.regex.Token processParen() throws org.apache.xerces.impl.xpath.regex.ParseException
    {
        org.apache.xerces.impl.xpath.regex.Token $r1;
        org.apache.xerces.impl.xpath.regex.Token$ParenToken $r2;
        int $i0, $i1, $i2;
        org.apache.xerces.impl.xpath.regex.ParserForXMLSchema r0;
        org.apache.xerces.impl.xpath.regex.ParseException $r3;

        r0 := @this: org.apache.xerces.impl.xpath.regex.ParserForXMLSchema;

        virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: void next()>();

        $r1 = virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: org.apache.xerces.impl.xpath.regex.Token parseRegex()>();

        $r2 = staticinvoke <org.apache.xerces.impl.xpath.regex.Token: org.apache.xerces.impl.xpath.regex.Token$ParenToken createParen(org.apache.xerces.impl.xpath.regex.Token,int)>($r1, 0);

        $i0 = virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: int read()>();

        if $i0 == 7 goto label1;

        $i1 = r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: int offset>;

        $i2 = $i1 - 1;

        $r3 = virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: org.apache.xerces.impl.xpath.regex.ParseException ex(java.lang.String,int)>("parser.factor.1", $i2);

        throw $r3;

     label1:
        virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: void next()>();

        return $r2;
    }

    org.apache.xerces.impl.xpath.regex.Token processParen2() throws org.apache.xerces.impl.xpath.regex.ParseException
    {
        int $i0;
        org.apache.xerces.impl.xpath.regex.ParserForXMLSchema r0;
        org.apache.xerces.impl.xpath.regex.ParseException $r1;

        r0 := @this: org.apache.xerces.impl.xpath.regex.ParserForXMLSchema;

        $i0 = r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: int offset>;

        $r1 = virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: org.apache.xerces.impl.xpath.regex.ParseException ex(java.lang.String,int)>("parser.process.1", $i0);

        throw $r1;
    }

    org.apache.xerces.impl.xpath.regex.Token processCondition() throws org.apache.xerces.impl.xpath.regex.ParseException
    {
        int $i0;
        org.apache.xerces.impl.xpath.regex.ParserForXMLSchema r0;
        org.apache.xerces.impl.xpath.regex.ParseException $r1;

        r0 := @this: org.apache.xerces.impl.xpath.regex.ParserForXMLSchema;

        $i0 = r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: int offset>;

        $r1 = virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: org.apache.xerces.impl.xpath.regex.ParseException ex(java.lang.String,int)>("parser.process.1", $i0);

        throw $r1;
    }

    org.apache.xerces.impl.xpath.regex.Token processModifiers() throws org.apache.xerces.impl.xpath.regex.ParseException
    {
        int $i0;
        org.apache.xerces.impl.xpath.regex.ParserForXMLSchema r0;
        org.apache.xerces.impl.xpath.regex.ParseException $r1;

        r0 := @this: org.apache.xerces.impl.xpath.regex.ParserForXMLSchema;

        $i0 = r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: int offset>;

        $r1 = virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: org.apache.xerces.impl.xpath.regex.ParseException ex(java.lang.String,int)>("parser.process.1", $i0);

        throw $r1;
    }

    org.apache.xerces.impl.xpath.regex.Token processIndependent() throws org.apache.xerces.impl.xpath.regex.ParseException
    {
        int $i0;
        org.apache.xerces.impl.xpath.regex.ParserForXMLSchema r0;
        org.apache.xerces.impl.xpath.regex.ParseException $r1;

        r0 := @this: org.apache.xerces.impl.xpath.regex.ParserForXMLSchema;

        $i0 = r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: int offset>;

        $r1 = virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: org.apache.xerces.impl.xpath.regex.ParseException ex(java.lang.String,int)>("parser.process.1", $i0);

        throw $r1;
    }

    org.apache.xerces.impl.xpath.regex.Token processBacksolidus_c() throws org.apache.xerces.impl.xpath.regex.ParseException
    {
        org.apache.xerces.impl.xpath.regex.ParserForXMLSchema r0;
        org.apache.xerces.impl.xpath.regex.Token $r1;

        r0 := @this: org.apache.xerces.impl.xpath.regex.ParserForXMLSchema;

        virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: void next()>();

        $r1 = virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: org.apache.xerces.impl.xpath.regex.Token getTokenForShorthand(int)>(99);

        return $r1;
    }

    org.apache.xerces.impl.xpath.regex.Token processBacksolidus_C() throws org.apache.xerces.impl.xpath.regex.ParseException
    {
        org.apache.xerces.impl.xpath.regex.ParserForXMLSchema r0;
        org.apache.xerces.impl.xpath.regex.Token $r1;

        r0 := @this: org.apache.xerces.impl.xpath.regex.ParserForXMLSchema;

        virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: void next()>();

        $r1 = virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: org.apache.xerces.impl.xpath.regex.Token getTokenForShorthand(int)>(67);

        return $r1;
    }

    org.apache.xerces.impl.xpath.regex.Token processBacksolidus_i() throws org.apache.xerces.impl.xpath.regex.ParseException
    {
        org.apache.xerces.impl.xpath.regex.ParserForXMLSchema r0;
        org.apache.xerces.impl.xpath.regex.Token $r1;

        r0 := @this: org.apache.xerces.impl.xpath.regex.ParserForXMLSchema;

        virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: void next()>();

        $r1 = virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: org.apache.xerces.impl.xpath.regex.Token getTokenForShorthand(int)>(105);

        return $r1;
    }

    org.apache.xerces.impl.xpath.regex.Token processBacksolidus_I() throws org.apache.xerces.impl.xpath.regex.ParseException
    {
        org.apache.xerces.impl.xpath.regex.ParserForXMLSchema r0;
        org.apache.xerces.impl.xpath.regex.Token $r1;

        r0 := @this: org.apache.xerces.impl.xpath.regex.ParserForXMLSchema;

        virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: void next()>();

        $r1 = virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: org.apache.xerces.impl.xpath.regex.Token getTokenForShorthand(int)>(73);

        return $r1;
    }

    org.apache.xerces.impl.xpath.regex.Token processBacksolidus_g() throws org.apache.xerces.impl.xpath.regex.ParseException
    {
        int $i0, $i1;
        org.apache.xerces.impl.xpath.regex.ParserForXMLSchema r0;
        org.apache.xerces.impl.xpath.regex.ParseException $r1;

        r0 := @this: org.apache.xerces.impl.xpath.regex.ParserForXMLSchema;

        $i0 = r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: int offset>;

        $i1 = $i0 - 2;

        $r1 = virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: org.apache.xerces.impl.xpath.regex.ParseException ex(java.lang.String,int)>("parser.process.1", $i1);

        throw $r1;
    }

    org.apache.xerces.impl.xpath.regex.Token processBacksolidus_X() throws org.apache.xerces.impl.xpath.regex.ParseException
    {
        int $i0, $i1;
        org.apache.xerces.impl.xpath.regex.ParserForXMLSchema r0;
        org.apache.xerces.impl.xpath.regex.ParseException $r1;

        r0 := @this: org.apache.xerces.impl.xpath.regex.ParserForXMLSchema;

        $i0 = r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: int offset>;

        $i1 = $i0 - 2;

        $r1 = virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: org.apache.xerces.impl.xpath.regex.ParseException ex(java.lang.String,int)>("parser.process.1", $i1);

        throw $r1;
    }

    org.apache.xerces.impl.xpath.regex.Token processBackreference() throws org.apache.xerces.impl.xpath.regex.ParseException
    {
        int $i0, $i1;
        org.apache.xerces.impl.xpath.regex.ParserForXMLSchema r0;
        org.apache.xerces.impl.xpath.regex.ParseException $r1;

        r0 := @this: org.apache.xerces.impl.xpath.regex.ParserForXMLSchema;

        $i0 = r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: int offset>;

        $i1 = $i0 - 4;

        $r1 = virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: org.apache.xerces.impl.xpath.regex.ParseException ex(java.lang.String,int)>("parser.process.1", $i1);

        throw $r1;
    }

    int processCIinCharacterClass(org.apache.xerces.impl.xpath.regex.RangeToken, int)
    {
        org.apache.xerces.impl.xpath.regex.Token $r2;
        int i0, $i2;
        org.apache.xerces.impl.xpath.regex.RangeToken r0;
        org.apache.xerces.impl.xpath.regex.ParserForXMLSchema r1;

        r1 := @this: org.apache.xerces.impl.xpath.regex.ParserForXMLSchema;

        r0 := @parameter0: org.apache.xerces.impl.xpath.regex.RangeToken;

        i0 := @parameter1: int;

        $r2 = virtualinvoke r1.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: org.apache.xerces.impl.xpath.regex.Token getTokenForShorthand(int)>(i0);

        virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.RangeToken: void mergeRanges(org.apache.xerces.impl.xpath.regex.Token)>($r2);

        $i2 = (int) -1;

        return $i2;
    }

    protected org.apache.xerces.impl.xpath.regex.RangeToken parseCharacterClass(boolean) throws org.apache.xerces.impl.xpath.regex.ParseException
    {
        org.apache.xerces.impl.xpath.regex.RangeToken $r10, $r13, $r16, r17, r18;
        org.apache.xerces.impl.xpath.regex.ParseException $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r11, $r12, $r14;
        org.apache.xerces.impl.xpath.regex.Token $r15;
        boolean $z0, $z1, z2, z3, z4, z5, $z6, z7, z8, z9, z10, z11, z12;
        org.apache.xerces.impl.xpath.regex.ParserForXMLSchema r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, i30, i31, $i32, i33, $i34, $i35, $i37, $i39, $i41, $i43;

        r0 := @this: org.apache.xerces.impl.xpath.regex.ParserForXMLSchema;

        z2 := @parameter0: boolean;

        virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: void setContext(int)>(1);

        virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: void next()>();

        z3 = 0;

        z12 = 0;

        z11 = 0;

        r17 = null;

        $i0 = virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: int read()>();

        if $i0 != 0 goto label01;

        $i28 = r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: int chardata>;

        if $i28 != 94 goto label01;

        z3 = 1;

        z12 = 1;

        z11 = 1;

        virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: void next()>();

        $r16 = staticinvoke <org.apache.xerces.impl.xpath.regex.Token: org.apache.xerces.impl.xpath.regex.RangeToken createRange()>();

        r17 = $r16;

        virtualinvoke $r16.<org.apache.xerces.impl.xpath.regex.RangeToken: void addRange(int,int)>(0, 1114111);

        r18 = staticinvoke <org.apache.xerces.impl.xpath.regex.Token: org.apache.xerces.impl.xpath.regex.RangeToken createRange()>();

        goto label02;

     label01:
        r18 = staticinvoke <org.apache.xerces.impl.xpath.regex.Token: org.apache.xerces.impl.xpath.regex.RangeToken createRange()>();

     label02:
        z4 = 1;

        z10 = 1;

        z9 = 1;

        z8 = 1;

        z7 = 1;

        goto label36;

     label03:
        if $i34 != 0 goto label04;

        $i27 = r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: int chardata>;

        if $i27 != 93 goto label04;

        if z9 != 0 goto label04;

        if z11 == 0 goto label37;

        virtualinvoke r17.<org.apache.xerces.impl.xpath.regex.RangeToken: void subtractRanges(org.apache.xerces.impl.xpath.regex.Token)>(r18);

        r18 = r17;

        goto label37;

     label04:
        $i29 = r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: int chardata>;

        i30 = $i29;

        z5 = 0;

        if $i34 != 10 goto label11;

        lookupswitch($i29)
        {
            case 45: goto label09;
            case 67: goto label06;
            case 68: goto label05;
            case 73: goto label06;
            case 80: goto label07;
            case 83: goto label05;
            case 87: goto label05;
            case 99: goto label06;
            case 100: goto label05;
            case 105: goto label06;
            case 112: goto label07;
            case 115: goto label05;
            case 119: goto label05;
            default: goto label10;
        };

     label05:
        $r15 = virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: org.apache.xerces.impl.xpath.regex.Token getTokenForShorthand(int)>($i29);

        virtualinvoke r18.<org.apache.xerces.impl.xpath.regex.RangeToken: void mergeRanges(org.apache.xerces.impl.xpath.regex.Token)>($r15);

        z5 = 1;

        goto label14;

     label06:
        $i26 = virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: int processCIinCharacterClass(org.apache.xerces.impl.xpath.regex.RangeToken,int)>(r18, $i29);

        i30 = $i26;

        if $i26 >= 0 goto label14;

        z5 = 1;

        goto label14;

     label07:
        i31 = r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: int offset>;

        $r13 = virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: org.apache.xerces.impl.xpath.regex.RangeToken processBacksolidus_pP(int)>($i29);

        if $r13 != null goto label08;

        $r14 = virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: org.apache.xerces.impl.xpath.regex.ParseException ex(java.lang.String,int)>("parser.atom.5", i31);

        throw $r14;

     label08:
        virtualinvoke r18.<org.apache.xerces.impl.xpath.regex.RangeToken: void mergeRanges(org.apache.xerces.impl.xpath.regex.Token)>($r13);

        z5 = 1;

        goto label14;

     label09:
        i30 = virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: int decodeEscaped()>();

        goto label14;

     label10:
        i30 = virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: int decodeEscaped()>();

        goto label14;

     label11:
        if $i34 != 24 goto label14;

        if z7 != 0 goto label14;

        if z12 == 0 goto label12;

        virtualinvoke r17.<org.apache.xerces.impl.xpath.regex.RangeToken: void subtractRanges(org.apache.xerces.impl.xpath.regex.Token)>(r18);

        r18 = r17;

     label12:
        $r10 = virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: org.apache.xerces.impl.xpath.regex.RangeToken parseCharacterClass(boolean)>(0);

        virtualinvoke r18.<org.apache.xerces.impl.xpath.regex.RangeToken: void subtractRanges(org.apache.xerces.impl.xpath.regex.Token)>($r10);

        $i22 = virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: int read()>();

        if $i22 != 0 goto label13;

        $i24 = r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: int chardata>;

        if $i24 == 93 goto label37;

     label13:
        $i23 = r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: int offset>;

        $r11 = virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: org.apache.xerces.impl.xpath.regex.ParseException ex(java.lang.String,int)>("parser.cc.5", $i23);

        throw $r11;

     label14:
        virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: void next()>();

        if z5 != 0 goto label35;

        if $i34 != 0 goto label17;

        if i30 != 91 goto label15;

        $i20 = r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: int offset>;

        $i21 = $i20 - 2;

        $r9 = virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: org.apache.xerces.impl.xpath.regex.ParseException ex(java.lang.String,int)>("parser.cc.6", $i21);

        throw $r9;

     label15:
        if i30 != 93 goto label16;

        $i18 = r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: int offset>;

        $i19 = $i18 - 2;

        $r8 = virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: org.apache.xerces.impl.xpath.regex.ParseException ex(java.lang.String,int)>("parser.cc.7", $i19);

        throw $r8;

     label16:
        if i30 != 45 goto label17;

        $i15 = r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: int chardata>;

        if $i15 == 93 goto label17;

        if z8 != 0 goto label17;

        $i16 = r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: int offset>;

        $i17 = $i16 - 2;

        $r7 = virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: org.apache.xerces.impl.xpath.regex.ParseException ex(java.lang.String,int)>("parser.cc.8", $i17);

        throw $r7;

     label17:
        $i32 = virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: int read()>();

        if $i32 != 0 goto label18;

        $i1 = r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: int chardata>;

        if $i1 != 45 goto label18;

        if i30 != 45 goto label21;

        if z10 == 0 goto label21;

     label18:
        $z6 = virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: boolean isSet(int)>(2);

        if $z6 == 0 goto label19;

        $i37 = (int) 65535;

        if i30 <= $i37 goto label20;

     label19:
        virtualinvoke r18.<org.apache.xerces.impl.xpath.regex.RangeToken: void addRange(int,int)>(i30, i30);

        goto label35;

     label20:
        staticinvoke <org.apache.xerces.impl.xpath.regex.RegexParser: void addCaseInsensitiveChar(org.apache.xerces.impl.xpath.regex.RangeToken,int)>(r18, i30);

        goto label35;

     label21:
        virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: void next()>();

        $i2 = virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: int read()>();

        if $i2 != 1 goto label22;

        $i14 = r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: int offset>;

        $r6 = virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: org.apache.xerces.impl.xpath.regex.ParseException ex(java.lang.String,int)>("parser.cc.2", $i14);

        throw $r6;

     label22:
        if $i2 != 0 goto label26;

        $i13 = r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: int chardata>;

        if $i13 != 93 goto label26;

        $z1 = virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: boolean isSet(int)>(2);

        if $z1 == 0 goto label23;

        $i39 = (int) 65535;

        if i30 <= $i39 goto label24;

     label23:
        virtualinvoke r18.<org.apache.xerces.impl.xpath.regex.RangeToken: void addRange(int,int)>(i30, i30);

        goto label25;

     label24:
        staticinvoke <org.apache.xerces.impl.xpath.regex.RegexParser: void addCaseInsensitiveChar(org.apache.xerces.impl.xpath.regex.RangeToken,int)>(r18, i30);

     label25:
        virtualinvoke r18.<org.apache.xerces.impl.xpath.regex.RangeToken: void addRange(int,int)>(45, 45);

        goto label35;

     label26:
        if $i2 != 24 goto label27;

        $i11 = r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: int offset>;

        $i12 = $i11 - 1;

        $r5 = virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: org.apache.xerces.impl.xpath.regex.ParseException ex(java.lang.String,int)>("parser.cc.8", $i12);

        throw $r5;

     label27:
        i33 = r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: int chardata>;

        if $i2 != 0 goto label30;

        if i33 != 91 goto label28;

        $i9 = r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: int offset>;

        $i10 = $i9 - 1;

        $r4 = virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: org.apache.xerces.impl.xpath.regex.ParseException ex(java.lang.String,int)>("parser.cc.6", $i10);

        throw $r4;

     label28:
        if i33 != 93 goto label29;

        $i7 = r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: int offset>;

        $i8 = $i7 - 1;

        $r3 = virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: org.apache.xerces.impl.xpath.regex.ParseException ex(java.lang.String,int)>("parser.cc.7", $i8);

        throw $r3;

     label29:
        if i33 != 45 goto label31;

        $i5 = r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: int offset>;

        $i6 = $i5 - 2;

        $r2 = virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: org.apache.xerces.impl.xpath.regex.ParseException ex(java.lang.String,int)>("parser.cc.8", $i6);

        throw $r2;

     label30:
        if $i2 != 10 goto label31;

        i33 = virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: int decodeEscaped()>();

     label31:
        virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: void next()>();

        if i30 <= i33 goto label32;

        $i3 = r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: int offset>;

        $i4 = $i3 - 1;

        $r1 = virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: org.apache.xerces.impl.xpath.regex.ParseException ex(java.lang.String,int)>("parser.ope.3", $i4);

        throw $r1;

     label32:
        $z0 = virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: boolean isSet(int)>(2);

        if $z0 == 0 goto label33;

        $i41 = (int) 65535;

        if i30 <= $i41 goto label34;

        $i43 = (int) 65535;

        if i33 <= $i43 goto label34;

     label33:
        virtualinvoke r18.<org.apache.xerces.impl.xpath.regex.RangeToken: void addRange(int,int)>(i30, i33);

        goto label35;

     label34:
        staticinvoke <org.apache.xerces.impl.xpath.regex.RegexParser: void addCaseInsensitiveCharRange(org.apache.xerces.impl.xpath.regex.RangeToken,int,int)>(r18, i30, i33);

     label35:
        z4 = 0;

        z10 = 0;

        z9 = 0;

        z8 = 0;

        z7 = 0;

     label36:
        $i34 = virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: int read()>();

        if $i34 != 1 goto label03;

     label37:
        $i35 = virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: int read()>();

        if $i35 != 1 goto label38;

        $i25 = r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: int offset>;

        $r12 = virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: org.apache.xerces.impl.xpath.regex.ParseException ex(java.lang.String,int)>("parser.cc.2", $i25);

        throw $r12;

     label38:
        virtualinvoke r18.<org.apache.xerces.impl.xpath.regex.RangeToken: void sortRanges()>();

        virtualinvoke r18.<org.apache.xerces.impl.xpath.regex.RangeToken: void compactRanges()>();

        virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: void setContext(int)>(0);

        virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: void next()>();

        return r18;
    }

    protected org.apache.xerces.impl.xpath.regex.RangeToken parseSetOperations() throws org.apache.xerces.impl.xpath.regex.ParseException
    {
        int $i0;
        org.apache.xerces.impl.xpath.regex.ParserForXMLSchema r0;
        org.apache.xerces.impl.xpath.regex.ParseException $r1;

        r0 := @this: org.apache.xerces.impl.xpath.regex.ParserForXMLSchema;

        $i0 = r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: int offset>;

        $r1 = virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: org.apache.xerces.impl.xpath.regex.ParseException ex(java.lang.String,int)>("parser.process.1", $i0);

        throw $r1;
    }

    org.apache.xerces.impl.xpath.regex.Token getTokenForShorthand(int)
    {
        java.lang.StringBuffer $r11, $r12, $r14;
        int i0;
        java.lang.String $r13, $r15;
        org.apache.xerces.impl.xpath.regex.RangeToken $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        org.apache.xerces.impl.xpath.regex.ParserForXMLSchema r16;
        java.lang.RuntimeException $r10;

        r16 := @this: org.apache.xerces.impl.xpath.regex.ParserForXMLSchema;

        i0 := @parameter0: int;

        lookupswitch(i0)
        {
            case 67: goto label08;
            case 68: goto label02;
            case 73: goto label10;
            case 83: goto label06;
            case 87: goto label04;
            case 99: goto label07;
            case 100: goto label01;
            case 105: goto label09;
            case 115: goto label05;
            case 119: goto label03;
            default: goto label11;
        };

     label01:
        $r3 = staticinvoke <org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: org.apache.xerces.impl.xpath.regex.RangeToken getRange(java.lang.String,boolean)>("xml:isDigit", 1);

        return $r3;

     label02:
        $r8 = staticinvoke <org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: org.apache.xerces.impl.xpath.regex.RangeToken getRange(java.lang.String,boolean)>("xml:isDigit", 0);

        return $r8;

     label03:
        $r0 = staticinvoke <org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: org.apache.xerces.impl.xpath.regex.RangeToken getRange(java.lang.String,boolean)>("xml:isWord", 1);

        return $r0;

     label04:
        $r5 = staticinvoke <org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: org.apache.xerces.impl.xpath.regex.RangeToken getRange(java.lang.String,boolean)>("xml:isWord", 0);

        return $r5;

     label05:
        $r1 = staticinvoke <org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: org.apache.xerces.impl.xpath.regex.RangeToken getRange(java.lang.String,boolean)>("xml:isSpace", 1);

        return $r1;

     label06:
        $r6 = staticinvoke <org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: org.apache.xerces.impl.xpath.regex.RangeToken getRange(java.lang.String,boolean)>("xml:isSpace", 0);

        return $r6;

     label07:
        $r4 = staticinvoke <org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: org.apache.xerces.impl.xpath.regex.RangeToken getRange(java.lang.String,boolean)>("xml:isNameChar", 1);

        return $r4;

     label08:
        $r9 = staticinvoke <org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: org.apache.xerces.impl.xpath.regex.RangeToken getRange(java.lang.String,boolean)>("xml:isNameChar", 0);

        return $r9;

     label09:
        $r2 = staticinvoke <org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: org.apache.xerces.impl.xpath.regex.RangeToken getRange(java.lang.String,boolean)>("xml:isInitialNameChar", 1);

        return $r2;

     label10:
        $r7 = staticinvoke <org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: org.apache.xerces.impl.xpath.regex.RangeToken getRange(java.lang.String,boolean)>("xml:isInitialNameChar", 0);

        return $r7;

     label11:
        $r10 = new java.lang.RuntimeException;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Internal Error: shorthands: \\u");

        $r13 = staticinvoke <java.lang.Integer: java.lang.String toString(int,int)>(i0, 16);

        $r14 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.String)>($r15);

        throw $r10;
    }

    int decodeEscaped() throws org.apache.xerces.impl.xpath.regex.ParseException
    {
        org.apache.xerces.impl.xpath.regex.ParserForXMLSchema r0;
        int $i0, $i1, $i2, $i3, $i4, i5;
        org.apache.xerces.impl.xpath.regex.ParseException $r1, $r2;

        r0 := @this: org.apache.xerces.impl.xpath.regex.ParserForXMLSchema;

        $i0 = virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: int read()>();

        if $i0 == 10 goto label1;

        $i3 = r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: int offset>;

        $i4 = $i3 - 1;

        $r2 = virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: org.apache.xerces.impl.xpath.regex.ParseException ex(java.lang.String,int)>("parser.next.1", $i4);

        throw $r2;

     label1:
        i5 = r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: int chardata>;

        lookupswitch(i5)
        {
            case 40: goto label5;
            case 41: goto label5;
            case 42: goto label5;
            case 43: goto label5;
            case 45: goto label5;
            case 46: goto label5;
            case 63: goto label5;
            case 91: goto label5;
            case 92: goto label5;
            case 93: goto label5;
            case 94: goto label5;
            case 110: goto label2;
            case 114: goto label3;
            case 116: goto label4;
            case 123: goto label5;
            case 124: goto label5;
            case 125: goto label5;
            default: goto label6;
        };

     label2:
        i5 = 10;

        goto label7;

     label3:
        i5 = 13;

        goto label7;

     label4:
        i5 = 9;

        goto label7;

     label5:
        goto label7;

     label6:
        $i1 = r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: int offset>;

        $i2 = $i1 - 2;

        $r1 = virtualinvoke r0.<org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: org.apache.xerces.impl.xpath.regex.ParseException ex(java.lang.String,int)>("parser.process.1", $i2);

        throw $r1;

     label7:
        return i5;
    }

    protected static synchronized org.apache.xerces.impl.xpath.regex.RangeToken getRange(java.lang.String, boolean)
    {
        boolean z0;
        org.apache.xerces.impl.xpath.regex.RangeToken $r8, $r12, $r16, $r20, $r27, $r31, $r35;
        org.apache.xerces.impl.xpath.regex.Token $r11, $r15, $r19, $r23, $r26, $r30, $r34;
        java.lang.String r1;
        java.util.Hashtable $r0, $r2, $r4, $r6, $r7, $r9, $r10, $r13, $r14, $r17, $r18, $r21, $r24, $r25, $r28, $r29, $r32, $r33;
        java.lang.Object $r3, $r5, $r22;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r0 = <org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: java.util.Hashtable ranges>;

        if $r0 != null goto label1;

        $r6 = new java.util.Hashtable;

        specialinvoke $r6.<java.util.Hashtable: void <init>()>();

        <org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: java.util.Hashtable ranges> = $r6;

        $r7 = new java.util.Hashtable;

        specialinvoke $r7.<java.util.Hashtable: void <init>()>();

        <org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: java.util.Hashtable ranges2> = $r7;

        $r8 = staticinvoke <org.apache.xerces.impl.xpath.regex.Token: org.apache.xerces.impl.xpath.regex.RangeToken createRange()>();

        staticinvoke <org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: void setupRange(org.apache.xerces.impl.xpath.regex.Token,java.lang.String)>($r8, "\t\n\r\r  ");

        $r9 = <org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: java.util.Hashtable ranges>;

        virtualinvoke $r9.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("xml:isSpace", $r8);

        $r10 = <org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: java.util.Hashtable ranges2>;

        $r11 = staticinvoke <org.apache.xerces.impl.xpath.regex.Token: org.apache.xerces.impl.xpath.regex.Token complementRanges(org.apache.xerces.impl.xpath.regex.Token)>($r8);

        virtualinvoke $r10.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("xml:isSpace", $r11);

        $r12 = staticinvoke <org.apache.xerces.impl.xpath.regex.Token: org.apache.xerces.impl.xpath.regex.RangeToken createRange()>();

        staticinvoke <org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: void setupRange(org.apache.xerces.impl.xpath.regex.Token,java.lang.String)>($r12, "09\u0660\u0669\u06f0\u06f9\u0966\u096f\u09e6\u09ef\u0a66\u0a6f\u0ae6\u0aef\u0b66\u0b6f\u0be7\u0bef\u0c66\u0c6f\u0ce6\u0cef\u0d66\u0d6f\u0e50\u0e59\u0ed0\u0ed9\u0f20\u0f29");

        $r13 = <org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: java.util.Hashtable ranges>;

        virtualinvoke $r13.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("xml:isDigit", $r12);

        $r14 = <org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: java.util.Hashtable ranges2>;

        $r15 = staticinvoke <org.apache.xerces.impl.xpath.regex.Token: org.apache.xerces.impl.xpath.regex.Token complementRanges(org.apache.xerces.impl.xpath.regex.Token)>($r12);

        virtualinvoke $r14.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("xml:isDigit", $r15);

        $r16 = staticinvoke <org.apache.xerces.impl.xpath.regex.Token: org.apache.xerces.impl.xpath.regex.RangeToken createRange()>();

        staticinvoke <org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: void setupRange(org.apache.xerces.impl.xpath.regex.Token,java.lang.String)>($r16, "09\u0660\u0669\u06f0\u06f9\u0966\u096f\u09e6\u09ef\u0a66\u0a6f\u0ae6\u0aef\u0b66\u0b6f\u0be7\u0bef\u0c66\u0c6f\u0ce6\u0cef\u0d66\u0d6f\u0e50\u0e59\u0ed0\u0ed9\u0f20\u0f29");

        $r17 = <org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: java.util.Hashtable ranges>;

        virtualinvoke $r17.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("xml:isDigit", $r16);

        $r18 = <org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: java.util.Hashtable ranges2>;

        $r19 = staticinvoke <org.apache.xerces.impl.xpath.regex.Token: org.apache.xerces.impl.xpath.regex.Token complementRanges(org.apache.xerces.impl.xpath.regex.Token)>($r16);

        virtualinvoke $r18.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("xml:isDigit", $r19);

        $r20 = staticinvoke <org.apache.xerces.impl.xpath.regex.Token: org.apache.xerces.impl.xpath.regex.RangeToken createRange()>();

        staticinvoke <org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: void setupRange(org.apache.xerces.impl.xpath.regex.Token,java.lang.String)>($r20, "AZaz\u00c0\u00d6\u00d8\u00f6\u00f8\u0131\u0134\u013e\u0141\u0148\u014a\u017e\u0180\u01c3\u01cd\u01f0\u01f4\u01f5\u01fa\u0217\u0250\u02a8\u02bb\u02c1\u0386\u0386\u0388\u038a\u038c\u038c\u038e\u03a1\u03a3\u03ce\u03d0\u03d6\u03da\u03da\u03dc\u03dc\u03de\u03de\u03e0\u03e0\u03e2\u03f3\u0401\u040c\u040e\u044f\u0451\u045c\u045e\u0481\u0490\u04c4\u04c7\u04c8\u04cb\u04cc\u04d0\u04eb\u04ee\u04f5\u04f8\u04f9\u0531\u0556\u0559\u0559\u0561\u0586\u05d0\u05ea\u05f0\u05f2\u0621\u063a\u0641\u064a\u0671\u06b7\u06ba\u06be\u06c0\u06ce\u06d0\u06d3\u06d5\u06d5\u06e5\u06e6\u0905\u0939\u093d\u093d\u0958\u0961\u0985\u098c\u098f\u0990\u0993\u09a8\u09aa\u09b0\u09b2\u09b2\u09b6\u09b9\u09dc\u09dd\u09df\u09e1\u09f0\u09f1\u0a05\u0a0a\u0a0f\u0a10\u0a13\u0a28\u0a2a\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59\u0a5c\u0a5e\u0a5e\u0a72\u0a74\u0a85\u0a8b\u0a8d\u0a8d\u0a8f\u0a91\u0a93\u0aa8\u0aaa\u0ab0\u0ab2\u0ab3\u0ab5\u0ab9\u0abd\u0abd\u0ae0\u0ae0\u0b05\u0b0c\u0b0f\u0b10\u0b13\u0b28\u0b2a\u0b30\u0b32\u0b33\u0b36\u0b39\u0b3d\u0b3d\u0b5c\u0b5d\u0b5f\u0b61\u0b85\u0b8a\u0b8e\u0b90\u0b92\u0b95\u0b99\u0b9a\u0b9c\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8\u0baa\u0bae\u0bb5\u0bb7\u0bb9\u0c05\u0c0c\u0c0e\u0c10\u0c12\u0c28\u0c2a\u0c33\u0c35\u0c39\u0c60\u0c61\u0c85\u0c8c\u0c8e\u0c90\u0c92\u0ca8\u0caa\u0cb3\u0cb5\u0cb9\u0cde\u0cde\u0ce0\u0ce1\u0d05\u0d0c\u0d0e\u0d10\u0d12\u0d28\u0d2a\u0d39\u0d60\u0d61\u0e01\u0e2e\u0e30\u0e30\u0e32\u0e33\u0e40\u0e45\u0e81\u0e82\u0e84\u0e84\u0e87\u0e88\u0e8a\u0e8a\u0e8d\u0e8d\u0e94\u0e97\u0e99\u0e9f\u0ea1\u0ea3\u0ea5\u0ea5\u0ea7\u0ea7\u0eaa\u0eab\u0ead\u0eae\u0eb0\u0eb0\u0eb2\u0eb3\u0ebd\u0ebd\u0ec0\u0ec4\u0f40\u0f47\u0f49\u0f69\u10a0\u10c5\u10d0\u10f6\u1100\u1100\u1102\u1103\u1105\u1107\u1109\u1109\u110b\u110c\u110e\u1112\u113c\u113c\u113e\u113e\u1140\u1140\u114c\u114c\u114e\u114e\u1150\u1150\u1154\u1155\u1159\u1159\u115f\u1161\u1163\u1163\u1165\u1165\u1167\u1167\u1169\u1169\u116d\u116e\u1172\u1173\u1175\u1175\u119e\u119e\u11a8\u11a8\u11ab\u11ab\u11ae\u11af\u11b7\u11b8\u11ba\u11ba\u11bc\u11c2\u11eb\u11eb\u11f0\u11f0\u11f9\u11f9\u1e00\u1e9b\u1ea0\u1ef9\u1f00\u1f15\u1f18\u1f1d\u1f20\u1f45\u1f48\u1f4d\u1f50\u1f57\u1f59\u1f59\u1f5b\u1f5b\u1f5d\u1f5d\u1f5f\u1f7d\u1f80\u1fb4\u1fb6\u1fbc\u1fbe\u1fbe\u1fc2\u1fc4\u1fc6\u1fcc\u1fd0\u1fd3\u1fd6\u1fdb\u1fe0\u1fec\u1ff2\u1ff4\u1ff6\u1ffc\u2126\u2126\u212a\u212b\u212e\u212e\u2180\u2182\u3007\u3007\u3021\u3029\u3041\u3094\u30a1\u30fa\u3105\u312c\u4e00\u9fa5\uac00\ud7a3");

        $r21 = <org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: java.util.Hashtable ranges>;

        $r22 = virtualinvoke $r21.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>("xml:isDigit");

        $r23 = (org.apache.xerces.impl.xpath.regex.Token) $r22;

        virtualinvoke $r20.<org.apache.xerces.impl.xpath.regex.Token: void mergeRanges(org.apache.xerces.impl.xpath.regex.Token)>($r23);

        $r24 = <org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: java.util.Hashtable ranges>;

        virtualinvoke $r24.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("xml:isWord", $r20);

        $r25 = <org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: java.util.Hashtable ranges2>;

        $r26 = staticinvoke <org.apache.xerces.impl.xpath.regex.Token: org.apache.xerces.impl.xpath.regex.Token complementRanges(org.apache.xerces.impl.xpath.regex.Token)>($r20);

        virtualinvoke $r25.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("xml:isWord", $r26);

        $r27 = staticinvoke <org.apache.xerces.impl.xpath.regex.Token: org.apache.xerces.impl.xpath.regex.RangeToken createRange()>();

        staticinvoke <org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: void setupRange(org.apache.xerces.impl.xpath.regex.Token,java.lang.String)>($r27, "-.0:AZ__az\u00b7\u00b7\u00c0\u00d6\u00d8\u00f6\u00f8\u0131\u0134\u013e\u0141\u0148\u014a\u017e\u0180\u01c3\u01cd\u01f0\u01f4\u01f5\u01fa\u0217\u0250\u02a8\u02bb\u02c1\u02d0\u02d1\u0300\u0345\u0360\u0361\u0386\u038a\u038c\u038c\u038e\u03a1\u03a3\u03ce\u03d0\u03d6\u03da\u03da\u03dc\u03dc\u03de\u03de\u03e0\u03e0\u03e2\u03f3\u0401\u040c\u040e\u044f\u0451\u045c\u045e\u0481\u0483\u0486\u0490\u04c4\u04c7\u04c8\u04cb\u04cc\u04d0\u04eb\u04ee\u04f5\u04f8\u04f9\u0531\u0556\u0559\u0559\u0561\u0586\u0591\u05a1\u05a3\u05b9\u05bb\u05bd\u05bf\u05bf\u05c1\u05c2\u05c4\u05c4\u05d0\u05ea\u05f0\u05f2\u0621\u063a\u0640\u0652\u0660\u0669\u0670\u06b7\u06ba\u06be\u06c0\u06ce\u06d0\u06d3\u06d5\u06e8\u06ea\u06ed\u06f0\u06f9\u0901\u0903\u0905\u0939\u093c\u094d\u0951\u0954\u0958\u0963\u0966\u096f\u0981\u0983\u0985\u098c\u098f\u0990\u0993\u09a8\u09aa\u09b0\u09b2\u09b2\u09b6\u09b9\u09bc\u09bc\u09be\u09c4\u09c7\u09c8\u09cb\u09cd\u09d7\u09d7\u09dc\u09dd\u09df\u09e3\u09e6\u09f1\u0a02\u0a02\u0a05\u0a0a\u0a0f\u0a10\u0a13\u0a28\u0a2a\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a3c\u0a3c\u0a3e\u0a42\u0a47\u0a48\u0a4b\u0a4d\u0a59\u0a5c\u0a5e\u0a5e\u0a66\u0a74\u0a81\u0a83\u0a85\u0a8b\u0a8d\u0a8d\u0a8f\u0a91\u0a93\u0aa8\u0aaa\u0ab0\u0ab2\u0ab3\u0ab5\u0ab9\u0abc\u0ac5\u0ac7\u0ac9\u0acb\u0acd\u0ae0\u0ae0\u0ae6\u0aef\u0b01\u0b03\u0b05\u0b0c\u0b0f\u0b10\u0b13\u0b28\u0b2a\u0b30\u0b32\u0b33\u0b36\u0b39\u0b3c\u0b43\u0b47\u0b48\u0b4b\u0b4d\u0b56\u0b57\u0b5c\u0b5d\u0b5f\u0b61\u0b66\u0b6f\u0b82\u0b83\u0b85\u0b8a\u0b8e\u0b90\u0b92\u0b95\u0b99\u0b9a\u0b9c\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8\u0baa\u0bae\u0bb5\u0bb7\u0bb9\u0bbe\u0bc2\u0bc6\u0bc8\u0bca\u0bcd\u0bd7\u0bd7\u0be7\u0bef\u0c01\u0c03\u0c05\u0c0c\u0c0e\u0c10\u0c12\u0c28\u0c2a\u0c33\u0c35\u0c39\u0c3e\u0c44\u0c46\u0c48\u0c4a\u0c4d\u0c55\u0c56\u0c60\u0c61\u0c66\u0c6f\u0c82\u0c83\u0c85\u0c8c\u0c8e\u0c90\u0c92\u0ca8\u0caa\u0cb3\u0cb5\u0cb9\u0cbe\u0cc4\u0cc6\u0cc8\u0cca\u0ccd\u0cd5\u0cd6\u0cde\u0cde\u0ce0\u0ce1\u0ce6\u0cef\u0d02\u0d03\u0d05\u0d0c\u0d0e\u0d10\u0d12\u0d28\u0d2a\u0d39\u0d3e\u0d43\u0d46\u0d48\u0d4a\u0d4d\u0d57\u0d57\u0d60\u0d61\u0d66\u0d6f\u0e01\u0e2e\u0e30\u0e3a\u0e40\u0e4e\u0e50\u0e59\u0e81\u0e82\u0e84\u0e84\u0e87\u0e88\u0e8a\u0e8a\u0e8d\u0e8d\u0e94\u0e97\u0e99\u0e9f\u0ea1\u0ea3\u0ea5\u0ea5\u0ea7\u0ea7\u0eaa\u0eab\u0ead\u0eae\u0eb0\u0eb9\u0ebb\u0ebd\u0ec0\u0ec4\u0ec6\u0ec6\u0ec8\u0ecd\u0ed0\u0ed9\u0f18\u0f19\u0f20\u0f29\u0f35\u0f35\u0f37\u0f37\u0f39\u0f39\u0f3e\u0f47\u0f49\u0f69\u0f71\u0f84\u0f86\u0f8b\u0f90\u0f95\u0f97\u0f97\u0f99\u0fad\u0fb1\u0fb7\u0fb9\u0fb9\u10a0\u10c5\u10d0\u10f6\u1100\u1100\u1102\u1103\u1105\u1107\u1109\u1109\u110b\u110c\u110e\u1112\u113c\u113c\u113e\u113e\u1140\u1140\u114c\u114c\u114e\u114e\u1150\u1150\u1154\u1155\u1159\u1159\u115f\u1161\u1163\u1163\u1165\u1165\u1167\u1167\u1169\u1169\u116d\u116e\u1172\u1173\u1175\u1175\u119e\u119e\u11a8\u11a8\u11ab\u11ab\u11ae\u11af\u11b7\u11b8\u11ba\u11ba\u11bc\u11c2\u11eb\u11eb\u11f0\u11f0\u11f9\u11f9\u1e00\u1e9b\u1ea0\u1ef9\u1f00\u1f15\u1f18\u1f1d\u1f20\u1f45\u1f48\u1f4d\u1f50\u1f57\u1f59\u1f59\u1f5b\u1f5b\u1f5d\u1f5d\u1f5f\u1f7d\u1f80\u1fb4\u1fb6\u1fbc\u1fbe\u1fbe\u1fc2\u1fc4\u1fc6\u1fcc\u1fd0\u1fd3\u1fd6\u1fdb\u1fe0\u1fec\u1ff2\u1ff4\u1ff6\u1ffc\u20d0\u20dc\u20e1\u20e1\u2126\u2126\u212a\u212b\u212e\u212e\u2180\u2182\u3005\u3005\u3007\u3007\u3021\u302f\u3031\u3035\u3041\u3094\u3099\u309a\u309d\u309e\u30a1\u30fa\u30fc\u30fe\u3105\u312c\u4e00\u9fa5\uac00\ud7a3");

        $r28 = <org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: java.util.Hashtable ranges>;

        virtualinvoke $r28.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("xml:isNameChar", $r27);

        $r29 = <org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: java.util.Hashtable ranges2>;

        $r30 = staticinvoke <org.apache.xerces.impl.xpath.regex.Token: org.apache.xerces.impl.xpath.regex.Token complementRanges(org.apache.xerces.impl.xpath.regex.Token)>($r27);

        virtualinvoke $r29.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("xml:isNameChar", $r30);

        $r31 = staticinvoke <org.apache.xerces.impl.xpath.regex.Token: org.apache.xerces.impl.xpath.regex.RangeToken createRange()>();

        staticinvoke <org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: void setupRange(org.apache.xerces.impl.xpath.regex.Token,java.lang.String)>($r31, "AZaz\u00c0\u00d6\u00d8\u00f6\u00f8\u0131\u0134\u013e\u0141\u0148\u014a\u017e\u0180\u01c3\u01cd\u01f0\u01f4\u01f5\u01fa\u0217\u0250\u02a8\u02bb\u02c1\u0386\u0386\u0388\u038a\u038c\u038c\u038e\u03a1\u03a3\u03ce\u03d0\u03d6\u03da\u03da\u03dc\u03dc\u03de\u03de\u03e0\u03e0\u03e2\u03f3\u0401\u040c\u040e\u044f\u0451\u045c\u045e\u0481\u0490\u04c4\u04c7\u04c8\u04cb\u04cc\u04d0\u04eb\u04ee\u04f5\u04f8\u04f9\u0531\u0556\u0559\u0559\u0561\u0586\u05d0\u05ea\u05f0\u05f2\u0621\u063a\u0641\u064a\u0671\u06b7\u06ba\u06be\u06c0\u06ce\u06d0\u06d3\u06d5\u06d5\u06e5\u06e6\u0905\u0939\u093d\u093d\u0958\u0961\u0985\u098c\u098f\u0990\u0993\u09a8\u09aa\u09b0\u09b2\u09b2\u09b6\u09b9\u09dc\u09dd\u09df\u09e1\u09f0\u09f1\u0a05\u0a0a\u0a0f\u0a10\u0a13\u0a28\u0a2a\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59\u0a5c\u0a5e\u0a5e\u0a72\u0a74\u0a85\u0a8b\u0a8d\u0a8d\u0a8f\u0a91\u0a93\u0aa8\u0aaa\u0ab0\u0ab2\u0ab3\u0ab5\u0ab9\u0abd\u0abd\u0ae0\u0ae0\u0b05\u0b0c\u0b0f\u0b10\u0b13\u0b28\u0b2a\u0b30\u0b32\u0b33\u0b36\u0b39\u0b3d\u0b3d\u0b5c\u0b5d\u0b5f\u0b61\u0b85\u0b8a\u0b8e\u0b90\u0b92\u0b95\u0b99\u0b9a\u0b9c\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8\u0baa\u0bae\u0bb5\u0bb7\u0bb9\u0c05\u0c0c\u0c0e\u0c10\u0c12\u0c28\u0c2a\u0c33\u0c35\u0c39\u0c60\u0c61\u0c85\u0c8c\u0c8e\u0c90\u0c92\u0ca8\u0caa\u0cb3\u0cb5\u0cb9\u0cde\u0cde\u0ce0\u0ce1\u0d05\u0d0c\u0d0e\u0d10\u0d12\u0d28\u0d2a\u0d39\u0d60\u0d61\u0e01\u0e2e\u0e30\u0e30\u0e32\u0e33\u0e40\u0e45\u0e81\u0e82\u0e84\u0e84\u0e87\u0e88\u0e8a\u0e8a\u0e8d\u0e8d\u0e94\u0e97\u0e99\u0e9f\u0ea1\u0ea3\u0ea5\u0ea5\u0ea7\u0ea7\u0eaa\u0eab\u0ead\u0eae\u0eb0\u0eb0\u0eb2\u0eb3\u0ebd\u0ebd\u0ec0\u0ec4\u0f40\u0f47\u0f49\u0f69\u10a0\u10c5\u10d0\u10f6\u1100\u1100\u1102\u1103\u1105\u1107\u1109\u1109\u110b\u110c\u110e\u1112\u113c\u113c\u113e\u113e\u1140\u1140\u114c\u114c\u114e\u114e\u1150\u1150\u1154\u1155\u1159\u1159\u115f\u1161\u1163\u1163\u1165\u1165\u1167\u1167\u1169\u1169\u116d\u116e\u1172\u1173\u1175\u1175\u119e\u119e\u11a8\u11a8\u11ab\u11ab\u11ae\u11af\u11b7\u11b8\u11ba\u11ba\u11bc\u11c2\u11eb\u11eb\u11f0\u11f0\u11f9\u11f9\u1e00\u1e9b\u1ea0\u1ef9\u1f00\u1f15\u1f18\u1f1d\u1f20\u1f45\u1f48\u1f4d\u1f50\u1f57\u1f59\u1f59\u1f5b\u1f5b\u1f5d\u1f5d\u1f5f\u1f7d\u1f80\u1fb4\u1fb6\u1fbc\u1fbe\u1fbe\u1fc2\u1fc4\u1fc6\u1fcc\u1fd0\u1fd3\u1fd6\u1fdb\u1fe0\u1fec\u1ff2\u1ff4\u1ff6\u1ffc\u2126\u2126\u212a\u212b\u212e\u212e\u2180\u2182\u3007\u3007\u3021\u3029\u3041\u3094\u30a1\u30fa\u3105\u312c\u4e00\u9fa5\uac00\ud7a3");

        virtualinvoke $r31.<org.apache.xerces.impl.xpath.regex.Token: void addRange(int,int)>(95, 95);

        virtualinvoke $r31.<org.apache.xerces.impl.xpath.regex.Token: void addRange(int,int)>(58, 58);

        $r32 = <org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: java.util.Hashtable ranges>;

        virtualinvoke $r32.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("xml:isInitialNameChar", $r31);

        $r33 = <org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: java.util.Hashtable ranges2>;

        $r34 = staticinvoke <org.apache.xerces.impl.xpath.regex.Token: org.apache.xerces.impl.xpath.regex.Token complementRanges(org.apache.xerces.impl.xpath.regex.Token)>($r31);

        virtualinvoke $r33.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("xml:isInitialNameChar", $r34);

     label1:
        if z0 == 0 goto label2;

        $r4 = <org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: java.util.Hashtable ranges>;

        $r5 = virtualinvoke $r4.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);

        $r35 = (org.apache.xerces.impl.xpath.regex.RangeToken) $r5;

        goto label3;

     label2:
        $r2 = <org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: java.util.Hashtable ranges2>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);

        $r35 = (org.apache.xerces.impl.xpath.regex.RangeToken) $r3;

     label3:
        return $r35;
    }

    static void setupRange(org.apache.xerces.impl.xpath.regex.Token, java.lang.String)
    {
        char $c1, $c3;
        org.apache.xerces.impl.xpath.regex.Token r1;
        int $i0, $i2, i4, $i5, $i6;
        java.lang.String r0;

        r1 := @parameter0: org.apache.xerces.impl.xpath.regex.Token;

        r0 := @parameter1: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i4 = 0;

        goto label2;

     label1:
        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i4);

        $i2 = i4 + 1;

        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i2);

        $i5 = (int) $c1;

        $i6 = (int) $c3;

        virtualinvoke r1.<org.apache.xerces.impl.xpath.regex.Token: void addRange(int,int)>($i5, $i6);

        i4 = i4 + 2;

     label2:
        if i4 < $i0 goto label1;

        return;
    }

    static void <clinit>()
    {
        <org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: java.lang.String DIGITS> = "09\u0660\u0669\u06f0\u06f9\u0966\u096f\u09e6\u09ef\u0a66\u0a6f\u0ae6\u0aef\u0b66\u0b6f\u0be7\u0bef\u0c66\u0c6f\u0ce6\u0cef\u0d66\u0d6f\u0e50\u0e59\u0ed0\u0ed9\u0f20\u0f29";

        <org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: java.lang.String LETTERS> = "AZaz\u00c0\u00d6\u00d8\u00f6\u00f8\u0131\u0134\u013e\u0141\u0148\u014a\u017e\u0180\u01c3\u01cd\u01f0\u01f4\u01f5\u01fa\u0217\u0250\u02a8\u02bb\u02c1\u0386\u0386\u0388\u038a\u038c\u038c\u038e\u03a1\u03a3\u03ce\u03d0\u03d6\u03da\u03da\u03dc\u03dc\u03de\u03de\u03e0\u03e0\u03e2\u03f3\u0401\u040c\u040e\u044f\u0451\u045c\u045e\u0481\u0490\u04c4\u04c7\u04c8\u04cb\u04cc\u04d0\u04eb\u04ee\u04f5\u04f8\u04f9\u0531\u0556\u0559\u0559\u0561\u0586\u05d0\u05ea\u05f0\u05f2\u0621\u063a\u0641\u064a\u0671\u06b7\u06ba\u06be\u06c0\u06ce\u06d0\u06d3\u06d5\u06d5\u06e5\u06e6\u0905\u0939\u093d\u093d\u0958\u0961\u0985\u098c\u098f\u0990\u0993\u09a8\u09aa\u09b0\u09b2\u09b2\u09b6\u09b9\u09dc\u09dd\u09df\u09e1\u09f0\u09f1\u0a05\u0a0a\u0a0f\u0a10\u0a13\u0a28\u0a2a\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59\u0a5c\u0a5e\u0a5e\u0a72\u0a74\u0a85\u0a8b\u0a8d\u0a8d\u0a8f\u0a91\u0a93\u0aa8\u0aaa\u0ab0\u0ab2\u0ab3\u0ab5\u0ab9\u0abd\u0abd\u0ae0\u0ae0\u0b05\u0b0c\u0b0f\u0b10\u0b13\u0b28\u0b2a\u0b30\u0b32\u0b33\u0b36\u0b39\u0b3d\u0b3d\u0b5c\u0b5d\u0b5f\u0b61\u0b85\u0b8a\u0b8e\u0b90\u0b92\u0b95\u0b99\u0b9a\u0b9c\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8\u0baa\u0bae\u0bb5\u0bb7\u0bb9\u0c05\u0c0c\u0c0e\u0c10\u0c12\u0c28\u0c2a\u0c33\u0c35\u0c39\u0c60\u0c61\u0c85\u0c8c\u0c8e\u0c90\u0c92\u0ca8\u0caa\u0cb3\u0cb5\u0cb9\u0cde\u0cde\u0ce0\u0ce1\u0d05\u0d0c\u0d0e\u0d10\u0d12\u0d28\u0d2a\u0d39\u0d60\u0d61\u0e01\u0e2e\u0e30\u0e30\u0e32\u0e33\u0e40\u0e45\u0e81\u0e82\u0e84\u0e84\u0e87\u0e88\u0e8a\u0e8a\u0e8d\u0e8d\u0e94\u0e97\u0e99\u0e9f\u0ea1\u0ea3\u0ea5\u0ea5\u0ea7\u0ea7\u0eaa\u0eab\u0ead\u0eae\u0eb0\u0eb0\u0eb2\u0eb3\u0ebd\u0ebd\u0ec0\u0ec4\u0f40\u0f47\u0f49\u0f69\u10a0\u10c5\u10d0\u10f6\u1100\u1100\u1102\u1103\u1105\u1107\u1109\u1109\u110b\u110c\u110e\u1112\u113c\u113c\u113e\u113e\u1140\u1140\u114c\u114c\u114e\u114e\u1150\u1150\u1154\u1155\u1159\u1159\u115f\u1161\u1163\u1163\u1165\u1165\u1167\u1167\u1169\u1169\u116d\u116e\u1172\u1173\u1175\u1175\u119e\u119e\u11a8\u11a8\u11ab\u11ab\u11ae\u11af\u11b7\u11b8\u11ba\u11ba\u11bc\u11c2\u11eb\u11eb\u11f0\u11f0\u11f9\u11f9\u1e00\u1e9b\u1ea0\u1ef9\u1f00\u1f15\u1f18\u1f1d\u1f20\u1f45\u1f48\u1f4d\u1f50\u1f57\u1f59\u1f59\u1f5b\u1f5b\u1f5d\u1f5d\u1f5f\u1f7d\u1f80\u1fb4\u1fb6\u1fbc\u1fbe\u1fbe\u1fc2\u1fc4\u1fc6\u1fcc\u1fd0\u1fd3\u1fd6\u1fdb\u1fe0\u1fec\u1ff2\u1ff4\u1ff6\u1ffc\u2126\u2126\u212a\u212b\u212e\u212e\u2180\u2182\u3007\u3007\u3021\u3029\u3041\u3094\u30a1\u30fa\u3105\u312c\u4e00\u9fa5\uac00\ud7a3";

        <org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: java.lang.String NAMECHARS> = "-.0:AZ__az\u00b7\u00b7\u00c0\u00d6\u00d8\u00f6\u00f8\u0131\u0134\u013e\u0141\u0148\u014a\u017e\u0180\u01c3\u01cd\u01f0\u01f4\u01f5\u01fa\u0217\u0250\u02a8\u02bb\u02c1\u02d0\u02d1\u0300\u0345\u0360\u0361\u0386\u038a\u038c\u038c\u038e\u03a1\u03a3\u03ce\u03d0\u03d6\u03da\u03da\u03dc\u03dc\u03de\u03de\u03e0\u03e0\u03e2\u03f3\u0401\u040c\u040e\u044f\u0451\u045c\u045e\u0481\u0483\u0486\u0490\u04c4\u04c7\u04c8\u04cb\u04cc\u04d0\u04eb\u04ee\u04f5\u04f8\u04f9\u0531\u0556\u0559\u0559\u0561\u0586\u0591\u05a1\u05a3\u05b9\u05bb\u05bd\u05bf\u05bf\u05c1\u05c2\u05c4\u05c4\u05d0\u05ea\u05f0\u05f2\u0621\u063a\u0640\u0652\u0660\u0669\u0670\u06b7\u06ba\u06be\u06c0\u06ce\u06d0\u06d3\u06d5\u06e8\u06ea\u06ed\u06f0\u06f9\u0901\u0903\u0905\u0939\u093c\u094d\u0951\u0954\u0958\u0963\u0966\u096f\u0981\u0983\u0985\u098c\u098f\u0990\u0993\u09a8\u09aa\u09b0\u09b2\u09b2\u09b6\u09b9\u09bc\u09bc\u09be\u09c4\u09c7\u09c8\u09cb\u09cd\u09d7\u09d7\u09dc\u09dd\u09df\u09e3\u09e6\u09f1\u0a02\u0a02\u0a05\u0a0a\u0a0f\u0a10\u0a13\u0a28\u0a2a\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a3c\u0a3c\u0a3e\u0a42\u0a47\u0a48\u0a4b\u0a4d\u0a59\u0a5c\u0a5e\u0a5e\u0a66\u0a74\u0a81\u0a83\u0a85\u0a8b\u0a8d\u0a8d\u0a8f\u0a91\u0a93\u0aa8\u0aaa\u0ab0\u0ab2\u0ab3\u0ab5\u0ab9\u0abc\u0ac5\u0ac7\u0ac9\u0acb\u0acd\u0ae0\u0ae0\u0ae6\u0aef\u0b01\u0b03\u0b05\u0b0c\u0b0f\u0b10\u0b13\u0b28\u0b2a\u0b30\u0b32\u0b33\u0b36\u0b39\u0b3c\u0b43\u0b47\u0b48\u0b4b\u0b4d\u0b56\u0b57\u0b5c\u0b5d\u0b5f\u0b61\u0b66\u0b6f\u0b82\u0b83\u0b85\u0b8a\u0b8e\u0b90\u0b92\u0b95\u0b99\u0b9a\u0b9c\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8\u0baa\u0bae\u0bb5\u0bb7\u0bb9\u0bbe\u0bc2\u0bc6\u0bc8\u0bca\u0bcd\u0bd7\u0bd7\u0be7\u0bef\u0c01\u0c03\u0c05\u0c0c\u0c0e\u0c10\u0c12\u0c28\u0c2a\u0c33\u0c35\u0c39\u0c3e\u0c44\u0c46\u0c48\u0c4a\u0c4d\u0c55\u0c56\u0c60\u0c61\u0c66\u0c6f\u0c82\u0c83\u0c85\u0c8c\u0c8e\u0c90\u0c92\u0ca8\u0caa\u0cb3\u0cb5\u0cb9\u0cbe\u0cc4\u0cc6\u0cc8\u0cca\u0ccd\u0cd5\u0cd6\u0cde\u0cde\u0ce0\u0ce1\u0ce6\u0cef\u0d02\u0d03\u0d05\u0d0c\u0d0e\u0d10\u0d12\u0d28\u0d2a\u0d39\u0d3e\u0d43\u0d46\u0d48\u0d4a\u0d4d\u0d57\u0d57\u0d60\u0d61\u0d66\u0d6f\u0e01\u0e2e\u0e30\u0e3a\u0e40\u0e4e\u0e50\u0e59\u0e81\u0e82\u0e84\u0e84\u0e87\u0e88\u0e8a\u0e8a\u0e8d\u0e8d\u0e94\u0e97\u0e99\u0e9f\u0ea1\u0ea3\u0ea5\u0ea5\u0ea7\u0ea7\u0eaa\u0eab\u0ead\u0eae\u0eb0\u0eb9\u0ebb\u0ebd\u0ec0\u0ec4\u0ec6\u0ec6\u0ec8\u0ecd\u0ed0\u0ed9\u0f18\u0f19\u0f20\u0f29\u0f35\u0f35\u0f37\u0f37\u0f39\u0f39\u0f3e\u0f47\u0f49\u0f69\u0f71\u0f84\u0f86\u0f8b\u0f90\u0f95\u0f97\u0f97\u0f99\u0fad\u0fb1\u0fb7\u0fb9\u0fb9\u10a0\u10c5\u10d0\u10f6\u1100\u1100\u1102\u1103\u1105\u1107\u1109\u1109\u110b\u110c\u110e\u1112\u113c\u113c\u113e\u113e\u1140\u1140\u114c\u114c\u114e\u114e\u1150\u1150\u1154\u1155\u1159\u1159\u115f\u1161\u1163\u1163\u1165\u1165\u1167\u1167\u1169\u1169\u116d\u116e\u1172\u1173\u1175\u1175\u119e\u119e\u11a8\u11a8\u11ab\u11ab\u11ae\u11af\u11b7\u11b8\u11ba\u11ba\u11bc\u11c2\u11eb\u11eb\u11f0\u11f0\u11f9\u11f9\u1e00\u1e9b\u1ea0\u1ef9\u1f00\u1f15\u1f18\u1f1d\u1f20\u1f45\u1f48\u1f4d\u1f50\u1f57\u1f59\u1f59\u1f5b\u1f5b\u1f5d\u1f5d\u1f5f\u1f7d\u1f80\u1fb4\u1fb6\u1fbc\u1fbe\u1fbe\u1fc2\u1fc4\u1fc6\u1fcc\u1fd0\u1fd3\u1fd6\u1fdb\u1fe0\u1fec\u1ff2\u1ff4\u1ff6\u1ffc\u20d0\u20dc\u20e1\u20e1\u2126\u2126\u212a\u212b\u212e\u212e\u2180\u2182\u3005\u3005\u3007\u3007\u3021\u302f\u3031\u3035\u3041\u3094\u3099\u309a\u309d\u309e\u30a1\u30fa\u30fc\u30fe\u3105\u312c\u4e00\u9fa5\uac00\ud7a3";

        <org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: java.lang.String SPACES> = "\t\n\r\r  ";

        <org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: java.util.Hashtable ranges> = null;

        <org.apache.xerces.impl.xpath.regex.ParserForXMLSchema: java.util.Hashtable ranges2> = null;

        return;
    }
}
