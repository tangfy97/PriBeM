public class org.eclipse.jdt.internal.compiler.ast.StringLiteral extends org.eclipse.jdt.internal.compiler.ast.Literal
{
    char[] source;
    int lineNumber;

    public void <init>(char[], int, int, int)
    {
        org.eclipse.jdt.internal.compiler.ast.StringLiteral r0;
        int i0, i1, i2, $i3;
        char[] r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.StringLiteral;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.ast.StringLiteral: void <init>(int,int)>(i0, i1);

        r0.<org.eclipse.jdt.internal.compiler.ast.StringLiteral: char[] source> = r1;

        $i3 = i2 - 1;

        r0.<org.eclipse.jdt.internal.compiler.ast.StringLiteral: int lineNumber> = $i3;

        return;
    }

    public void <init>(int, int)
    {
        int i0, i1;
        org.eclipse.jdt.internal.compiler.ast.StringLiteral r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.StringLiteral;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.ast.Literal: void <init>(int,int)>(i0, i1);

        return;
    }

    public void computeConstant()
    {
        org.eclipse.jdt.internal.compiler.ast.StringLiteral r0;
        org.eclipse.jdt.internal.compiler.impl.Constant $r3;
        char[] $r1;
        java.lang.String $r2;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.StringLiteral;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.ast.StringLiteral: char[] source>;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(char[])>($r1);

        $r3 = staticinvoke <org.eclipse.jdt.internal.compiler.impl.StringConstant: org.eclipse.jdt.internal.compiler.impl.Constant fromValue(java.lang.String)>($r2);

        r0.<org.eclipse.jdt.internal.compiler.ast.StringLiteral: org.eclipse.jdt.internal.compiler.impl.Constant constant> = $r3;

        return;
    }

    public org.eclipse.jdt.internal.compiler.ast.ExtendedStringLiteral extendWith(org.eclipse.jdt.internal.compiler.ast.CharLiteral)
    {
        org.eclipse.jdt.internal.compiler.ast.StringLiteral r1;
        org.eclipse.jdt.internal.compiler.ast.CharLiteral r2;
        org.eclipse.jdt.internal.compiler.ast.ExtendedStringLiteral $r0;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.StringLiteral;

        r2 := @parameter0: org.eclipse.jdt.internal.compiler.ast.CharLiteral;

        $r0 = new org.eclipse.jdt.internal.compiler.ast.ExtendedStringLiteral;

        specialinvoke $r0.<org.eclipse.jdt.internal.compiler.ast.ExtendedStringLiteral: void <init>(org.eclipse.jdt.internal.compiler.ast.StringLiteral,org.eclipse.jdt.internal.compiler.ast.CharLiteral)>(r1, r2);

        return $r0;
    }

    public org.eclipse.jdt.internal.compiler.ast.ExtendedStringLiteral extendWith(org.eclipse.jdt.internal.compiler.ast.StringLiteral)
    {
        org.eclipse.jdt.internal.compiler.ast.StringLiteral r1, r2;
        org.eclipse.jdt.internal.compiler.ast.ExtendedStringLiteral $r0;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.StringLiteral;

        r2 := @parameter0: org.eclipse.jdt.internal.compiler.ast.StringLiteral;

        $r0 = new org.eclipse.jdt.internal.compiler.ast.ExtendedStringLiteral;

        specialinvoke $r0.<org.eclipse.jdt.internal.compiler.ast.ExtendedStringLiteral: void <init>(org.eclipse.jdt.internal.compiler.ast.StringLiteral,org.eclipse.jdt.internal.compiler.ast.StringLiteral)>(r1, r2);

        return $r0;
    }

    public org.eclipse.jdt.internal.compiler.ast.StringLiteralConcatenation extendsWith(org.eclipse.jdt.internal.compiler.ast.StringLiteral)
    {
        org.eclipse.jdt.internal.compiler.ast.StringLiteral r1, r2;
        org.eclipse.jdt.internal.compiler.ast.StringLiteralConcatenation $r0;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.StringLiteral;

        r2 := @parameter0: org.eclipse.jdt.internal.compiler.ast.StringLiteral;

        $r0 = new org.eclipse.jdt.internal.compiler.ast.StringLiteralConcatenation;

        specialinvoke $r0.<org.eclipse.jdt.internal.compiler.ast.StringLiteralConcatenation: void <init>(org.eclipse.jdt.internal.compiler.ast.StringLiteral,org.eclipse.jdt.internal.compiler.ast.StringLiteral)>(r1, r2);

        return $r0;
    }

    public void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.codegen.CodeStream, boolean)
    {
        org.eclipse.jdt.internal.compiler.ast.StringLiteral r1;
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r4;
        org.eclipse.jdt.internal.compiler.codegen.CodeStream r0;
        org.eclipse.jdt.internal.compiler.impl.Constant $r2;
        int i0, $i1;
        java.lang.String $r3;
        boolean z0;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.StringLiteral;

        r4 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r0 := @parameter1: org.eclipse.jdt.internal.compiler.codegen.CodeStream;

        z0 := @parameter2: boolean;

        i0 = r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: int position>;

        if z0 == 0 goto label1;

        $r2 = r1.<org.eclipse.jdt.internal.compiler.ast.StringLiteral: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $r3 = virtualinvoke $r2.<org.eclipse.jdt.internal.compiler.impl.Constant: java.lang.String stringValue()>();

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void ldc(java.lang.String)>($r3);

     label1:
        $i1 = r1.<org.eclipse.jdt.internal.compiler.ast.StringLiteral: int sourceStart>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void recordPositionsFrom(int,int)>(i0, $i1);

        return;
    }

    public org.eclipse.jdt.internal.compiler.lookup.TypeBinding literalType(org.eclipse.jdt.internal.compiler.lookup.BlockScope)
    {
        org.eclipse.jdt.internal.compiler.ast.StringLiteral r2;
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r0;
        org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding $r1;

        r2 := @this: org.eclipse.jdt.internal.compiler.ast.StringLiteral;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        $r1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding getJavaLangString()>();

        return $r1;
    }

    public java.lang.StringBuffer printExpression(int, java.lang.StringBuffer)
    {
        org.eclipse.jdt.internal.compiler.ast.StringLiteral r1;
        char $c0, $c1;
        java.lang.StringBuffer r0;
        int i2, i3, $i4, $i5;
        char[] $r2, $r3, $r4;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.StringLiteral;

        i2 := @parameter0: int;

        r0 := @parameter1: java.lang.StringBuffer;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(34);

        i3 = 0;

        goto label12;

     label01:
        $r2 = r1.<org.eclipse.jdt.internal.compiler.ast.StringLiteral: char[] source>;

        $c0 = $r2[i3];

        $i5 = (int) $c0;

        lookupswitch($i5)
        {
            case 8: goto label02;
            case 9: goto label03;
            case 10: goto label04;
            case 12: goto label05;
            case 13: goto label06;
            case 34: goto label07;
            case 39: goto label08;
            case 92: goto label09;
            default: goto label10;
        };

     label02:
        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\b");

        goto label11;

     label03:
        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\t");

        goto label11;

     label04:
        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\n");

        goto label11;

     label05:
        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\f");

        goto label11;

     label06:
        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\r");

        goto label11;

     label07:
        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\\"");

        goto label11;

     label08:
        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\\'");

        goto label11;

     label09:
        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\\\");

        goto label11;

     label10:
        $r3 = r1.<org.eclipse.jdt.internal.compiler.ast.StringLiteral: char[] source>;

        $c1 = $r3[i3];

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c1);

     label11:
        i3 = i3 + 1;

     label12:
        $r4 = r1.<org.eclipse.jdt.internal.compiler.ast.StringLiteral: char[] source>;

        $i4 = lengthof $r4;

        if i3 < $i4 goto label01;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(34);

        return r0;
    }

    public char[] source()
    {
        org.eclipse.jdt.internal.compiler.ast.StringLiteral r0;
        char[] $r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.StringLiteral;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.ast.StringLiteral: char[] source>;

        return $r1;
    }

    public void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor, org.eclipse.jdt.internal.compiler.lookup.BlockScope)
    {
        org.eclipse.jdt.internal.compiler.ast.StringLiteral r1;
        org.eclipse.jdt.internal.compiler.ASTVisitor r0;
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r2;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.StringLiteral;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.ASTVisitor;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: boolean visit(org.eclipse.jdt.internal.compiler.ast.StringLiteral,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r1, r2);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: void endVisit(org.eclipse.jdt.internal.compiler.ast.StringLiteral,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r1, r2);

        return;
    }
}
