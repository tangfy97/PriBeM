final class com.mycila.inject.internal.cglib.core.ReflectUtils$2 extends java.lang.Object implements java.security.PrivilegedAction
{

    void <init>()
    {
        com.mycila.inject.internal.cglib.core.ReflectUtils$2 r0;

        r0 := @this: com.mycila.inject.internal.cglib.core.ReflectUtils$2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.Object run()
    {
        java.lang.NoSuchMethodException $r9;
        java.lang.reflect.Method $r7, $r8;
        com.mycila.inject.internal.cglib.core.ReflectUtils$2 r13;
        com.mycila.inject.internal.cglib.core.CodeGenerationException $r10, $r12;
        java.lang.Class[] $r1;
        java.lang.Class $r0, $r2, $r3, $r4, $r5, $r6, $r14, $r15, $r16;
        java.lang.ClassNotFoundException $r11;

        r13 := @this: com.mycila.inject.internal.cglib.core.ReflectUtils$2;

     label01:
        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("java.lang.ClassLoader");

        $r1 = newarray (java.lang.Class)[5];

        $r2 = <com.mycila.inject.internal.cglib.core.ReflectUtils: java.lang.Class class$java$lang$String>;

        if $r2 != null goto label02;

        $r14 = staticinvoke <com.mycila.inject.internal.cglib.core.ReflectUtils: java.lang.Class class$(java.lang.String)>("java.lang.String");

        <com.mycila.inject.internal.cglib.core.ReflectUtils: java.lang.Class class$java$lang$String> = $r14;

        goto label03;

     label02:
        $r14 = <com.mycila.inject.internal.cglib.core.ReflectUtils: java.lang.Class class$java$lang$String>;

     label03:
        $r1[0] = $r14;

        $r3 = <com.mycila.inject.internal.cglib.core.ReflectUtils: java.lang.Class array$B>;

        if $r3 != null goto label04;

        $r15 = staticinvoke <com.mycila.inject.internal.cglib.core.ReflectUtils: java.lang.Class class$(java.lang.String)>("[B");

        <com.mycila.inject.internal.cglib.core.ReflectUtils: java.lang.Class array$B> = $r15;

        goto label05;

     label04:
        $r15 = <com.mycila.inject.internal.cglib.core.ReflectUtils: java.lang.Class array$B>;

     label05:
        $r1[1] = $r15;

        $r4 = <java.lang.Integer: java.lang.Class TYPE>;

        $r1[2] = $r4;

        $r5 = <java.lang.Integer: java.lang.Class TYPE>;

        $r1[3] = $r5;

        $r6 = <com.mycila.inject.internal.cglib.core.ReflectUtils: java.lang.Class class$java$security$ProtectionDomain>;

        if $r6 != null goto label06;

        $r16 = staticinvoke <com.mycila.inject.internal.cglib.core.ReflectUtils: java.lang.Class class$(java.lang.String)>("java.security.ProtectionDomain");

        <com.mycila.inject.internal.cglib.core.ReflectUtils: java.lang.Class class$java$security$ProtectionDomain> = $r16;

        goto label07;

     label06:
        $r16 = <com.mycila.inject.internal.cglib.core.ReflectUtils: java.lang.Class class$java$security$ProtectionDomain>;

     label07:
        $r1[4] = $r16;

        $r7 = virtualinvoke $r0.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("defineClass", $r1);

        staticinvoke <com.mycila.inject.internal.cglib.core.ReflectUtils: java.lang.reflect.Method access$002(java.lang.reflect.Method)>($r7);

        $r8 = staticinvoke <com.mycila.inject.internal.cglib.core.ReflectUtils: java.lang.reflect.Method access$000()>();

        virtualinvoke $r8.<java.lang.reflect.Method: void setAccessible(boolean)>(1);

     label08:
        goto label11;

     label09:
        $r11 := @caughtexception;

        $r12 = new com.mycila.inject.internal.cglib.core.CodeGenerationException;

        specialinvoke $r12.<com.mycila.inject.internal.cglib.core.CodeGenerationException: void <init>(java.lang.Throwable)>($r11);

        throw $r12;

     label10:
        $r9 := @caughtexception;

        $r10 = new com.mycila.inject.internal.cglib.core.CodeGenerationException;

        specialinvoke $r10.<com.mycila.inject.internal.cglib.core.CodeGenerationException: void <init>(java.lang.Throwable)>($r9);

        throw $r10;

     label11:
        return null;

        catch java.lang.ClassNotFoundException from label01 to label08 with label09;
        catch java.lang.NoSuchMethodException from label01 to label08 with label10;
    }
}
