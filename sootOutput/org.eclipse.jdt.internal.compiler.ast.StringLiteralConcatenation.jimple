public class org.eclipse.jdt.internal.compiler.ast.StringLiteralConcatenation extends org.eclipse.jdt.internal.compiler.ast.StringLiteral
{
    private static final int INITIAL_SIZE;
    public org.eclipse.jdt.internal.compiler.ast.Expression[] literals;
    public int counter;

    public void <init>(org.eclipse.jdt.internal.compiler.ast.StringLiteral, org.eclipse.jdt.internal.compiler.ast.StringLiteral)
    {
        org.eclipse.jdt.internal.compiler.ast.StringLiteral r1, r5;
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r4;
        org.eclipse.jdt.internal.compiler.ast.StringLiteral[] $r3;
        org.eclipse.jdt.internal.compiler.ast.StringLiteralConcatenation r0;
        int $i0, $i1, $i2, $i3;
        char[] $r2;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.StringLiteralConcatenation;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.ast.StringLiteral;

        r5 := @parameter1: org.eclipse.jdt.internal.compiler.ast.StringLiteral;

        $i1 = r1.<org.eclipse.jdt.internal.compiler.ast.StringLiteral: int sourceStart>;

        $i0 = r1.<org.eclipse.jdt.internal.compiler.ast.StringLiteral: int sourceEnd>;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.ast.StringLiteral: void <init>(int,int)>($i1, $i0);

        $r2 = r1.<org.eclipse.jdt.internal.compiler.ast.StringLiteral: char[] source>;

        r0.<org.eclipse.jdt.internal.compiler.ast.StringLiteralConcatenation: char[] source> = $r2;

        $r3 = newarray (org.eclipse.jdt.internal.compiler.ast.StringLiteral)[5];

        r0.<org.eclipse.jdt.internal.compiler.ast.StringLiteralConcatenation: org.eclipse.jdt.internal.compiler.ast.Expression[] literals> = $r3;

        r0.<org.eclipse.jdt.internal.compiler.ast.StringLiteralConcatenation: int counter> = 0;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.ast.StringLiteralConcatenation: org.eclipse.jdt.internal.compiler.ast.Expression[] literals>;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.ast.StringLiteralConcatenation: int counter>;

        $i3 = $i2 + 1;

        r0.<org.eclipse.jdt.internal.compiler.ast.StringLiteralConcatenation: int counter> = $i3;

        $r4[$i2] = r1;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ast.StringLiteralConcatenation: org.eclipse.jdt.internal.compiler.ast.StringLiteralConcatenation extendsWith(org.eclipse.jdt.internal.compiler.ast.StringLiteral)>(r5);

        return;
    }

    public org.eclipse.jdt.internal.compiler.ast.StringLiteralConcatenation extendsWith(org.eclipse.jdt.internal.compiler.ast.StringLiteral)
    {
        org.eclipse.jdt.internal.compiler.ast.StringLiteral r1;
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r2, $r10, $r12;
        int $i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        org.eclipse.jdt.internal.compiler.ast.StringLiteral[] $r11;
        org.eclipse.jdt.internal.compiler.ast.StringLiteralConcatenation r0;
        char[] $r3, $r4, $r5, $r6, $r7, $r8, $r9;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.StringLiteralConcatenation;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.ast.StringLiteral;

        $i0 = r1.<org.eclipse.jdt.internal.compiler.ast.StringLiteral: int sourceEnd>;

        r0.<org.eclipse.jdt.internal.compiler.ast.StringLiteralConcatenation: int sourceEnd> = $i0;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.ast.StringLiteralConcatenation: org.eclipse.jdt.internal.compiler.ast.Expression[] literals>;

        i1 = lengthof $r2;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.ast.StringLiteralConcatenation: int counter>;

        if $i2 != i1 goto label1;

        $r12 = r0.<org.eclipse.jdt.internal.compiler.ast.StringLiteralConcatenation: org.eclipse.jdt.internal.compiler.ast.Expression[] literals>;

        $i8 = i1 + 5;

        $r11 = newarray (org.eclipse.jdt.internal.compiler.ast.StringLiteral)[$i8];

        r0.<org.eclipse.jdt.internal.compiler.ast.StringLiteralConcatenation: org.eclipse.jdt.internal.compiler.ast.Expression[] literals> = $r11;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r12, 0, $r11, 0, i1);

     label1:
        $r3 = r0.<org.eclipse.jdt.internal.compiler.ast.StringLiteralConcatenation: char[] source>;

        $i9 = lengthof $r3;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.ast.StringLiteralConcatenation: char[] source>;

        $r4 = r1.<org.eclipse.jdt.internal.compiler.ast.StringLiteral: char[] source>;

        $i3 = lengthof $r4;

        $i4 = $i9 + $i3;

        $r5 = newarray (char)[$i4];

        r0.<org.eclipse.jdt.internal.compiler.ast.StringLiteralConcatenation: char[] source> = $r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, $r5, 0, $i9);

        $r9 = r1.<org.eclipse.jdt.internal.compiler.ast.StringLiteral: char[] source>;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.ast.StringLiteralConcatenation: char[] source>;

        $r7 = r1.<org.eclipse.jdt.internal.compiler.ast.StringLiteral: char[] source>;

        $i5 = lengthof $r7;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, 0, $r8, $i9, $i5);

        $r10 = r0.<org.eclipse.jdt.internal.compiler.ast.StringLiteralConcatenation: org.eclipse.jdt.internal.compiler.ast.Expression[] literals>;

        $i6 = r0.<org.eclipse.jdt.internal.compiler.ast.StringLiteralConcatenation: int counter>;

        $i7 = $i6 + 1;

        r0.<org.eclipse.jdt.internal.compiler.ast.StringLiteralConcatenation: int counter> = $i7;

        $r10[$i6] = r1;

        return r0;
    }

    public java.lang.StringBuffer printExpression(int, java.lang.StringBuffer)
    {
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r2;
        org.eclipse.jdt.internal.compiler.ast.Expression $r3;
        org.eclipse.jdt.internal.compiler.ast.StringLiteralConcatenation r1;
        java.lang.StringBuffer r0, $r4;
        int i0, i1, i2;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.StringLiteralConcatenation;

        i1 := @parameter0: int;

        r0 := @parameter1: java.lang.StringBuffer;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("StringLiteralConcatenation{");

        i2 = 0;

        i0 = r1.<org.eclipse.jdt.internal.compiler.ast.StringLiteralConcatenation: int counter>;

        goto label2;

     label1:
        $r2 = r1.<org.eclipse.jdt.internal.compiler.ast.StringLiteralConcatenation: org.eclipse.jdt.internal.compiler.ast.Expression[] literals>;

        $r3 = $r2[i2];

        virtualinvoke $r3.<org.eclipse.jdt.internal.compiler.ast.Expression: java.lang.StringBuffer printExpression(int,java.lang.StringBuffer)>(i1, r0);

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("+\n");

        i2 = i2 + 1;

     label2:
        if i2 < i0 goto label1;

        $r4 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(125);

        return $r4;
    }

    public char[] source()
    {
        char[] $r1;
        org.eclipse.jdt.internal.compiler.ast.StringLiteralConcatenation r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.StringLiteralConcatenation;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.ast.StringLiteralConcatenation: char[] source>;

        return $r1;
    }

    public void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor, org.eclipse.jdt.internal.compiler.lookup.BlockScope)
    {
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r2;
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r3;
        org.eclipse.jdt.internal.compiler.ASTVisitor r0;
        org.eclipse.jdt.internal.compiler.ast.Expression $r4;
        org.eclipse.jdt.internal.compiler.ast.StringLiteralConcatenation r1;
        int i0, i1;
        boolean $z0;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.StringLiteralConcatenation;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.ASTVisitor;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        $z0 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: boolean visit(org.eclipse.jdt.internal.compiler.ast.StringLiteralConcatenation,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r1, r2);

        if $z0 == 0 goto label3;

        i1 = 0;

        i0 = r1.<org.eclipse.jdt.internal.compiler.ast.StringLiteralConcatenation: int counter>;

        goto label2;

     label1:
        $r3 = r1.<org.eclipse.jdt.internal.compiler.ast.StringLiteralConcatenation: org.eclipse.jdt.internal.compiler.ast.Expression[] literals>;

        $r4 = $r3[i1];

        virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.ast.Expression: void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r0, r2);

        i1 = i1 + 1;

     label2:
        if i1 < i0 goto label1;

     label3:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: void endVisit(org.eclipse.jdt.internal.compiler.ast.StringLiteralConcatenation,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r1, r2);

        return;
    }

    public static void <clinit>()
    {
        <org.eclipse.jdt.internal.compiler.ast.StringLiteralConcatenation: int INITIAL_SIZE> = 5;

        return;
    }
}
