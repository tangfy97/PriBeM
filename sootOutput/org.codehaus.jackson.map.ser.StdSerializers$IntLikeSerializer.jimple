public final class org.codehaus.jackson.map.ser.StdSerializers$IntLikeSerializer extends org.codehaus.jackson.map.ser.std.ScalarSerializerBase
{
    static final org.codehaus.jackson.map.ser.StdSerializers$IntLikeSerializer instance;

    public void <init>()
    {
        org.codehaus.jackson.map.ser.StdSerializers$IntLikeSerializer r0;

        r0 := @this: org.codehaus.jackson.map.ser.StdSerializers$IntLikeSerializer;

        specialinvoke r0.<org.codehaus.jackson.map.ser.std.ScalarSerializerBase: void <init>(java.lang.Class)>(class "Ljava/lang/Number;");

        return;
    }

    public void serialize(java.lang.Number, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.map.ser.StdSerializers$IntLikeSerializer r2;
        org.codehaus.jackson.JsonGenerator r0;
        int $i0;
        org.codehaus.jackson.map.SerializerProvider r3;
        java.lang.Number r1;

        r2 := @this: org.codehaus.jackson.map.ser.StdSerializers$IntLikeSerializer;

        r1 := @parameter0: java.lang.Number;

        r0 := @parameter1: org.codehaus.jackson.JsonGenerator;

        r3 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $i0 = virtualinvoke r1.<java.lang.Number: int intValue()>();

        virtualinvoke r0.<org.codehaus.jackson.JsonGenerator: void writeNumber(int)>($i0);

        return;
    }

    public org.codehaus.jackson.JsonNode getSchema(org.codehaus.jackson.map.SerializerProvider, java.lang.reflect.Type)
    {
        org.codehaus.jackson.map.ser.StdSerializers$IntLikeSerializer r0;
        java.lang.reflect.Type r3;
        org.codehaus.jackson.map.SerializerProvider r2;
        org.codehaus.jackson.node.ObjectNode $r1;

        r0 := @this: org.codehaus.jackson.map.ser.StdSerializers$IntLikeSerializer;

        r2 := @parameter0: org.codehaus.jackson.map.SerializerProvider;

        r3 := @parameter1: java.lang.reflect.Type;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.ser.StdSerializers$IntLikeSerializer: org.codehaus.jackson.node.ObjectNode createSchemaNode(java.lang.String,boolean)>("integer", 1);

        return $r1;
    }

    public volatile void serialize(java.lang.Object, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.map.ser.StdSerializers$IntLikeSerializer r0;
        org.codehaus.jackson.JsonGenerator r2;
        org.codehaus.jackson.map.SerializerProvider r3;
        java.lang.Object r1;
        java.lang.Number $r4;

        r0 := @this: org.codehaus.jackson.map.ser.StdSerializers$IntLikeSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.codehaus.jackson.JsonGenerator;

        r3 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r4 = (java.lang.Number) r1;

        virtualinvoke r0.<org.codehaus.jackson.map.ser.StdSerializers$IntLikeSerializer: void serialize(java.lang.Number,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r4, r2, r3);

        return;
    }

    static void <clinit>()
    {
        org.codehaus.jackson.map.ser.StdSerializers$IntLikeSerializer $r0;

        $r0 = new org.codehaus.jackson.map.ser.StdSerializers$IntLikeSerializer;

        specialinvoke $r0.<org.codehaus.jackson.map.ser.StdSerializers$IntLikeSerializer: void <init>()>();

        <org.codehaus.jackson.map.ser.StdSerializers$IntLikeSerializer: org.codehaus.jackson.map.ser.StdSerializers$IntLikeSerializer instance> = $r0;

        return;
    }
}
