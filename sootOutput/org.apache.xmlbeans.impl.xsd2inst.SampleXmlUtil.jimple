public class org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil extends java.lang.Object
{
    private boolean _soapEnc;
    private static final int MAX_ELEMENTS;
    private int _nElements;
    java.util.Random _picker;
    public static final java.lang.String[] WORDS;
    private static final java.lang.String[] DNS1;
    private static final java.lang.String[] DNS2;
    private static final javax.xml.namespace.QName HREF;
    private static final javax.xml.namespace.QName ID;
    private static final javax.xml.namespace.QName XSI_TYPE;
    private static final javax.xml.namespace.QName ENC_ARRAYTYPE;
    private static final javax.xml.namespace.QName ENC_OFFSET;
    private static final java.util.Set SKIPPED_SOAP_ATTRS;
    private java.util.ArrayList _typeStack;

    private void <init>(boolean)
    {
        org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil r0;
        java.util.Random $r1;
        java.util.ArrayList $r2;
        boolean z0;

        r0 := @this: org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil;

        z0 := @parameter0: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.Random;

        specialinvoke $r1.<java.util.Random: void <init>(long)>(1L);

        r0.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: java.util.Random _picker> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: java.util.ArrayList _typeStack> = $r2;

        r0.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: boolean _soapEnc> = z0;

        return;
    }

    public static java.lang.String createSampleForType(org.apache.xmlbeans.SchemaType)
    {
        org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil $r2;
        org.apache.xmlbeans.XmlOptions $r4;
        org.apache.xmlbeans.XmlCursor $r1;
        org.apache.xmlbeans.XmlObject $r0;
        java.lang.String $r5;
        org.apache.xmlbeans.SchemaType r3;

        r3 := @parameter0: org.apache.xmlbeans.SchemaType;

        $r0 = staticinvoke <org.apache.xmlbeans.XmlObject$Factory: org.apache.xmlbeans.XmlObject newInstance()>();

        $r1 = interfaceinvoke $r0.<org.apache.xmlbeans.XmlObject: org.apache.xmlbeans.XmlCursor newCursor()>();

        interfaceinvoke $r1.<org.apache.xmlbeans.XmlCursor: org.apache.xmlbeans.XmlCursor$TokenType toNextToken()>();

        $r2 = new org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil;

        specialinvoke $r2.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: void <init>(boolean)>(0);

        specialinvoke $r2.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: void createSampleForType(org.apache.xmlbeans.SchemaType,org.apache.xmlbeans.XmlCursor)>(r3, $r1);

        $r4 = new org.apache.xmlbeans.XmlOptions;

        specialinvoke $r4.<org.apache.xmlbeans.XmlOptions: void <init>()>();

        virtualinvoke $r4.<org.apache.xmlbeans.XmlOptions: void put(java.lang.Object)>("SAVE_PRETTY_PRINT");

        virtualinvoke $r4.<org.apache.xmlbeans.XmlOptions: void put(java.lang.Object,int)>("SAVE_PRETTY_PRINT_INDENT", 2);

        virtualinvoke $r4.<org.apache.xmlbeans.XmlOptions: void put(java.lang.Object)>("SAVE_AGGRESSIVE_NAMESPACES");

        $r5 = interfaceinvoke $r0.<org.apache.xmlbeans.XmlObject: java.lang.String xmlText(org.apache.xmlbeans.XmlOptions)>($r4);

        return $r5;
    }

    private void createSampleForType(org.apache.xmlbeans.SchemaType, org.apache.xmlbeans.XmlCursor)
    {
        org.apache.xmlbeans.SchemaParticle $r13, $r16, $r17, $r18;
        org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil r0;
        org.apache.xmlbeans.SchemaType r1;
        boolean $z0, $z1, $z2;
        java.lang.Throwable $r19;
        org.apache.xmlbeans.XmlCursor r4;
        java.lang.String[] $r8, $r14;
        java.util.ArrayList $r2, $r3, $r5, $r6, $r20, $r21, $r22, $r23;
        java.lang.StringBuffer $r7, $r10, $r11;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.String $r9, $r12, $r15;

        r0 := @this: org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil;

        r1 := @parameter0: org.apache.xmlbeans.SchemaType;

        r4 := @parameter1: org.apache.xmlbeans.XmlCursor;

        $r2 = r0.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: java.util.ArrayList _typeStack>;

        $z0 = virtualinvoke $r2.<java.util.ArrayList: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label01;

        return;

     label01:
        $r3 = r0.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: java.util.ArrayList _typeStack>;

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

     label02:
        $z1 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaType: boolean isSimpleType()>();

        if $z1 != 0 goto label03;

        $z2 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaType: boolean isURType()>();

        if $z2 == 0 goto label05;

     label03:
        specialinvoke r0.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: void processSimpleType(org.apache.xmlbeans.SchemaType,org.apache.xmlbeans.XmlCursor)>(r1, r4);

     label04:
        $r6 = r0.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: java.util.ArrayList _typeStack>;

        $r5 = r0.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: java.util.ArrayList _typeStack>;

        $i0 = virtualinvoke $r5.<java.util.ArrayList: int size()>();

        $i1 = $i0 - 1;

        virtualinvoke $r6.<java.util.ArrayList: java.lang.Object remove(int)>($i1);

        return;

     label05:
        specialinvoke r0.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: void processAttributes(org.apache.xmlbeans.SchemaType,org.apache.xmlbeans.XmlCursor)>(r1, r4);

        $i2 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaType: int getContentType()>();

        tableswitch($i2)
        {
            case 0: goto label06;
            case 1: goto label06;
            case 2: goto label07;
            case 3: goto label10;
            case 4: goto label08;
            default: goto label11;
        };

     label06:
        goto label11;

     label07:
        specialinvoke r0.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: void processSimpleType(org.apache.xmlbeans.SchemaType,org.apache.xmlbeans.XmlCursor)>(r1, r4);

        goto label11;

     label08:
        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = <org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: java.lang.String[] WORDS>;

        $r9 = specialinvoke r0.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: java.lang.String pick(java.lang.String[])>($r8);

        $r10 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke r4.<org.apache.xmlbeans.XmlCursor: void insertChars(java.lang.String)>($r12);

        $r13 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaParticle getContentModel()>();

        if $r13 == null goto label09;

        $r16 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaParticle getContentModel()>();

        specialinvoke r0.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: void processParticle(org.apache.xmlbeans.SchemaParticle,org.apache.xmlbeans.XmlCursor,boolean)>($r16, r4, 1);

     label09:
        $r14 = <org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: java.lang.String[] WORDS>;

        $r15 = specialinvoke r0.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: java.lang.String pick(java.lang.String[])>($r14);

        interfaceinvoke r4.<org.apache.xmlbeans.XmlCursor: void insertChars(java.lang.String)>($r15);

        goto label11;

     label10:
        $r17 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaParticle getContentModel()>();

        if $r17 == null goto label11;

        $r18 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaParticle getContentModel()>();

        specialinvoke r0.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: void processParticle(org.apache.xmlbeans.SchemaParticle,org.apache.xmlbeans.XmlCursor,boolean)>($r18, r4, 0);

     label11:
        $r22 = r0.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: java.util.ArrayList _typeStack>;

        $r23 = r0.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: java.util.ArrayList _typeStack>;

        $i5 = virtualinvoke $r23.<java.util.ArrayList: int size()>();

        $i6 = $i5 - 1;

        virtualinvoke $r22.<java.util.ArrayList: java.lang.Object remove(int)>($i6);

        goto label14;

     label12:
        $r19 := @caughtexception;

     label13:
        $r21 = r0.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: java.util.ArrayList _typeStack>;

        $r20 = r0.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: java.util.ArrayList _typeStack>;

        $i3 = virtualinvoke $r20.<java.util.ArrayList: int size()>();

        $i4 = $i3 - 1;

        virtualinvoke $r21.<java.util.ArrayList: java.lang.Object remove(int)>($i4);

        throw $r19;

     label14:
        return;

        catch java.lang.Throwable from label02 to label04 with label12;
        catch java.lang.Throwable from label05 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    private void processSimpleType(org.apache.xmlbeans.SchemaType, org.apache.xmlbeans.XmlCursor)
    {
        org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil r0;
        org.apache.xmlbeans.XmlCursor r3;
        java.lang.String $r2;
        org.apache.xmlbeans.SchemaType r1;

        r0 := @this: org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil;

        r1 := @parameter0: org.apache.xmlbeans.SchemaType;

        r3 := @parameter1: org.apache.xmlbeans.XmlCursor;

        $r2 = specialinvoke r0.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: java.lang.String sampleDataForSimpleType(org.apache.xmlbeans.SchemaType)>(r1);

        interfaceinvoke r3.<org.apache.xmlbeans.XmlCursor: void insertChars(java.lang.String)>($r2);

        return;
    }

    private java.lang.String sampleDataForSimpleType(org.apache.xmlbeans.SchemaType)
    {
        byte[] $r53, $r54;
        org.apache.xmlbeans.SchemaType[] $r57;
        org.apache.xmlbeans.SchemaType r0, $r1, $r2, $r4, $r8, $r9, $r58, $r60;
        java.lang.StringBuffer $r26, $r27, $r30, $r31, $r34, $r35, $r38, $r39, $r42, $r61;
        java.lang.String $r6, $r7, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r29, $r33, $r37, $r41, $r43, $r44, $r46, $r47, $r48, $r49, $r51, $r52, $r56, $r59, $r62, $r63, $r64, $r66, r67, r68, $r69;
        org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil r5;
        boolean $z0, $z1;
        org.apache.xmlbeans.XmlAnySimpleType $r55;
        java.io.UnsupportedEncodingException $r65;
        java.lang.String[] $r28, $r32, $r36, $r40, $r45, $r50;
        org.apache.xmlbeans.XmlAnySimpleType[] $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13;

        r5 := @this: org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil;

        r0 := @parameter0: org.apache.xmlbeans.SchemaType;

        $r1 = <org.apache.xmlbeans.XmlObject: org.apache.xmlbeans.SchemaType type>;

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label01;

        return "anyType";

     label01:
        $r2 = <org.apache.xmlbeans.XmlAnySimpleType: org.apache.xmlbeans.SchemaType type>;

        $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        if $z1 == 0 goto label02;

        return "anySimpleType";

     label02:
        $i0 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaType: int getSimpleVariety()>();

        if $i0 != 3 goto label06;

        $r60 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType getListItemType()>();

        $r61 = new java.lang.StringBuffer;

        specialinvoke $r61.<java.lang.StringBuffer: void <init>()>();

        $i12 = specialinvoke r5.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: int pickLength(org.apache.xmlbeans.SchemaType)>(r0);

        if $i12 <= 0 goto label03;

        $r64 = specialinvoke r5.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: java.lang.String sampleDataForSimpleType(org.apache.xmlbeans.SchemaType)>($r60);

        virtualinvoke $r61.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r64);

     label03:
        i13 = 1;

     label04:
        if i13 >= $i12 goto label05;

        virtualinvoke $r61.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        $r63 = specialinvoke r5.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: java.lang.String sampleDataForSimpleType(org.apache.xmlbeans.SchemaType)>($r60);

        virtualinvoke $r61.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r63);

        i13 = i13 + 1;

        goto label04;

     label05:
        $r62 = virtualinvoke $r61.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r62;

     label06:
        $i1 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaType: int getSimpleVariety()>();

        if $i1 != 2 goto label08;

        $r57 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType[] getUnionConstituentTypes()>();

        $i9 = lengthof $r57;

        if $i9 != 0 goto label07;

        return "";

     label07:
        $i10 = lengthof $r57;

        $i11 = specialinvoke r5.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: int pick(int)>($i10);

        $r58 = $r57[$i11];

        $r59 = specialinvoke r5.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: java.lang.String sampleDataForSimpleType(org.apache.xmlbeans.SchemaType)>($r58);

        return $r59;

     label08:
        $r3 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.XmlAnySimpleType[] getEnumerationValues()>();

        if $r3 == null goto label09;

        $i6 = lengthof $r3;

        if $i6 <= 0 goto label09;

        $i7 = lengthof $r3;

        $i8 = specialinvoke r5.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: int pick(int)>($i7);

        $r55 = $r3[$i8];

        $r56 = interfaceinvoke $r55.<org.apache.xmlbeans.XmlAnySimpleType: java.lang.String getStringValue()>();

        return $r56;

     label09:
        $r4 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType getPrimitiveType()>();

        $i2 = interfaceinvoke $r4.<org.apache.xmlbeans.SchemaType: int getBuiltinTypeCode()>();

        tableswitch($i2)
        {
            case 0: goto label10;
            case 1: goto label11;
            case 2: goto label11;
            case 3: goto label12;
            case 4: goto label15;
            case 5: goto label20;
            case 6: goto label21;
            case 7: goto label22;
            case 8: goto label23;
            case 9: goto label24;
            case 10: goto label25;
            case 11: goto label26;
            case 12: goto label41;
            case 13: goto label46;
            case 14: goto label47;
            case 15: goto label47;
            case 16: goto label47;
            case 17: goto label47;
            case 18: goto label47;
            case 19: goto label47;
            case 20: goto label47;
            case 21: goto label47;
            default: goto label10;
        };

     label10:
        return "";

     label11:
        return "anything";

     label12:
        $i5 = specialinvoke r5.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: int pick(int)>(2);

        if $i5 != 0 goto label13;

        $r66 = "true";

        goto label14;

     label13:
        $r66 = "false";

     label14:
        return $r66;

     label15:
        r67 = null;

     label16:
        $r49 = new java.lang.String;

        $r50 = <org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: java.lang.String[] WORDS>;

        $r51 = specialinvoke r5.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: java.lang.String pick(java.lang.String[])>($r50);

        $r52 = specialinvoke r5.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: java.lang.String formatToLength(java.lang.String,org.apache.xmlbeans.SchemaType)>($r51, r0);

        $r53 = virtualinvoke $r52.<java.lang.String: byte[] getBytes(java.lang.String)>("utf-8");

        $r54 = staticinvoke <org.apache.xmlbeans.impl.util.Base64: byte[] encode(byte[])>($r53);

        specialinvoke $r49.<java.lang.String: void <init>(byte[])>($r54);

        r67 = $r49;

     label17:
        goto label19;

     label18:
        $r65 := @caughtexception;

     label19:
        return r67;

     label20:
        $r45 = <org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: java.lang.String[] WORDS>;

        $r46 = specialinvoke r5.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: java.lang.String pick(java.lang.String[])>($r45);

        $r47 = specialinvoke r5.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: java.lang.String formatToLength(java.lang.String,org.apache.xmlbeans.SchemaType)>($r46, r0);

        $r48 = staticinvoke <org.apache.xmlbeans.impl.util.HexBin: java.lang.String encode(java.lang.String)>($r47);

        return $r48;

     label21:
        $r26 = new java.lang.StringBuffer;

        specialinvoke $r26.<java.lang.StringBuffer: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("http://www.");

        $r28 = <org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: java.lang.String[] DNS1>;

        $r29 = specialinvoke r5.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: java.lang.String pick(java.lang.String[])>($r28);

        $r30 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".");

        $r32 = <org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: java.lang.String[] DNS2>;

        $r33 = specialinvoke r5.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: java.lang.String pick(java.lang.String[])>($r32);

        $r34 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r33);

        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("/");

        $r36 = <org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: java.lang.String[] WORDS>;

        $r37 = specialinvoke r5.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: java.lang.String pick(java.lang.String[])>($r36);

        $r38 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r37);

        $r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("/");

        $r40 = <org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: java.lang.String[] WORDS>;

        $r41 = specialinvoke r5.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: java.lang.String pick(java.lang.String[])>($r40);

        $r42 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r41);

        $r43 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.String toString()>();

        $r44 = specialinvoke r5.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: java.lang.String formatToLength(java.lang.String,org.apache.xmlbeans.SchemaType)>($r43, r0);

        return $r44;

     label22:
        $r25 = specialinvoke r5.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: java.lang.String formatToLength(java.lang.String,org.apache.xmlbeans.SchemaType)>("qname", r0);

        return $r25;

     label23:
        $r24 = specialinvoke r5.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: java.lang.String formatToLength(java.lang.String,org.apache.xmlbeans.SchemaType)>("notation", r0);

        return $r24;

     label24:
        return "1.5E2";

     label25:
        return "1.051732E7";

     label26:
        $r9 = specialinvoke r5.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: org.apache.xmlbeans.SchemaType closestBuiltin(org.apache.xmlbeans.SchemaType)>(r0);

        $i4 = interfaceinvoke $r9.<org.apache.xmlbeans.SchemaType: int getBuiltinTypeCode()>();

        tableswitch($i4)
        {
            case 11: goto label40;
            case 12: goto label40;
            case 13: goto label40;
            case 14: goto label40;
            case 15: goto label40;
            case 16: goto label40;
            case 17: goto label40;
            case 18: goto label40;
            case 19: goto label40;
            case 20: goto label40;
            case 21: goto label40;
            case 22: goto label35;
            case 23: goto label33;
            case 24: goto label31;
            case 25: goto label27;
            case 26: goto label29;
            case 27: goto label36;
            case 28: goto label37;
            case 29: goto label38;
            case 30: goto label39;
            case 31: goto label34;
            case 32: goto label32;
            case 33: goto label28;
            case 34: goto label30;
            default: goto label40;
        };

     label27:
        $r19 = specialinvoke r5.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: java.lang.String formatDecimal(java.lang.String,org.apache.xmlbeans.SchemaType)>("1", r0);

        return $r19;

     label28:
        $r11 = specialinvoke r5.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: java.lang.String formatDecimal(java.lang.String,org.apache.xmlbeans.SchemaType)>("5", r0);

        return $r11;

     label29:
        $r18 = specialinvoke r5.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: java.lang.String formatDecimal(java.lang.String,org.apache.xmlbeans.SchemaType)>("2", r0);

        return $r18;

     label30:
        $r10 = specialinvoke r5.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: java.lang.String formatDecimal(java.lang.String,org.apache.xmlbeans.SchemaType)>("6", r0);

        return $r10;

     label31:
        $r20 = specialinvoke r5.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: java.lang.String formatDecimal(java.lang.String,org.apache.xmlbeans.SchemaType)>("3", r0);

        return $r20;

     label32:
        $r12 = specialinvoke r5.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: java.lang.String formatDecimal(java.lang.String,org.apache.xmlbeans.SchemaType)>("7", r0);

        return $r12;

     label33:
        $r21 = specialinvoke r5.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: java.lang.String formatDecimal(java.lang.String,org.apache.xmlbeans.SchemaType)>("10", r0);

        return $r21;

     label34:
        $r13 = specialinvoke r5.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: java.lang.String formatDecimal(java.lang.String,org.apache.xmlbeans.SchemaType)>("11", r0);

        return $r13;

     label35:
        $r22 = specialinvoke r5.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: java.lang.String formatDecimal(java.lang.String,org.apache.xmlbeans.SchemaType)>("100", r0);

        return $r22;

     label36:
        $r17 = specialinvoke r5.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: java.lang.String formatDecimal(java.lang.String,org.apache.xmlbeans.SchemaType)>("-200", r0);

        return $r17;

     label37:
        $r16 = specialinvoke r5.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: java.lang.String formatDecimal(java.lang.String,org.apache.xmlbeans.SchemaType)>("-201", r0);

        return $r16;

     label38:
        $r15 = specialinvoke r5.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: java.lang.String formatDecimal(java.lang.String,org.apache.xmlbeans.SchemaType)>("200", r0);

        return $r15;

     label39:
        $r14 = specialinvoke r5.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: java.lang.String formatDecimal(java.lang.String,org.apache.xmlbeans.SchemaType)>("201", r0);

        return $r14;

     label40:
        $r23 = specialinvoke r5.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: java.lang.String formatDecimal(java.lang.String,org.apache.xmlbeans.SchemaType)>("1000.00", r0);

        return $r23;

     label41:
        $r8 = specialinvoke r5.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: org.apache.xmlbeans.SchemaType closestBuiltin(org.apache.xmlbeans.SchemaType)>(r0);

        $i3 = interfaceinvoke $r8.<org.apache.xmlbeans.SchemaType: int getBuiltinTypeCode()>();

        lookupswitch($i3)
        {
            case 12: goto label42;
            case 35: goto label42;
            case 36: goto label43;
            default: goto label44;
        };

     label42:
        r68 = "string";

        goto label45;

     label43:
        r68 = "token";

        goto label45;

     label44:
        r68 = "string";

     label45:
        $r69 = specialinvoke r5.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: java.lang.String formatToLength(java.lang.String,org.apache.xmlbeans.SchemaType)>(r68, r0);

        return $r69;

     label46:
        $r7 = specialinvoke r5.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: java.lang.String formatDuration(org.apache.xmlbeans.SchemaType)>(r0);

        return $r7;

     label47:
        $r6 = specialinvoke r5.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: java.lang.String formatDate(org.apache.xmlbeans.SchemaType)>(r0);

        return $r6;

        catch java.io.UnsupportedEncodingException from label16 to label17 with label18;
    }

    private int pick(int)
    {
        org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil r0;
        int i0, $i1;
        java.util.Random $r1;

        r0 := @this: org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: java.util.Random _picker>;

        $i1 = virtualinvoke $r1.<java.util.Random: int nextInt(int)>(i0);

        return $i1;
    }

    private java.lang.String pick(java.lang.String[])
    {
        org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil r1;
        int $i0, $i1;
        java.lang.String[] r0;
        java.lang.String $r2;

        r1 := @this: org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil;

        r0 := @parameter0: java.lang.String[];

        $i0 = lengthof r0;

        $i1 = specialinvoke r1.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: int pick(int)>($i0);

        $r2 = r0[$i1];

        return $r2;
    }

    private java.lang.String pick(java.lang.String[], int)
    {
        java.lang.String[] r1;
        org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil r0;
        java.lang.StringBuffer $r6;
        int $i0, $i1, $i2, $i3, i4, i5, $i7;
        java.lang.String $r3, $r4, $r5;

        r0 := @this: org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil;

        r1 := @parameter0: java.lang.String[];

        i4 := @parameter1: int;

        if i4 > 0 goto label1;

        return "";

     label1:
        $i0 = lengthof r1;

        $i1 = specialinvoke r0.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: int pick(int)>($i0);

        i5 = $i1;

        $r6 = new java.lang.StringBuffer;

        $r3 = r1[$i1];

        specialinvoke $r6.<java.lang.StringBuffer: void <init>(java.lang.String)>($r3);

     label2:
        $i2 = i4;

        $i7 = (int) -1;

        i4 = i4 + $i7;

        if $i2 <= 0 goto label4;

        i5 = i5 + 1;

        $i3 = lengthof r1;

        if i5 < $i3 goto label3;

        i5 = 0;

     label3:
        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        $r5 = r1[i5];

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        goto label2;

     label4:
        $r4 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    private java.lang.String pickDigits(int)
    {
        org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil r2;
        java.lang.StringBuffer $r4;
        int $i0, $i1, i2, $i4;
        java.lang.String $r1, $r3;

        r2 := @this: org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil;

        i2 := @parameter0: int;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

     label1:
        $i0 = i2;

        $i4 = (int) -1;

        i2 = i2 + $i4;

        if $i0 <= 0 goto label2;

        $i1 = specialinvoke r2.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: int pick(int)>(10);

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i1);

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        goto label1;

     label2:
        $r1 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r1;
    }

    private int pickLength(org.apache.xmlbeans.SchemaType)
    {
        org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil r9;
        int $i0, $i1, $i2, $i3, i4, i5, $i6;
        java.math.BigInteger $r7, $r8, $r10;
        org.apache.xmlbeans.SchemaType r0;
        org.apache.xmlbeans.XmlAnySimpleType $r1, $r3, $r5;
        org.apache.xmlbeans.XmlInteger r2, r4, r6;

        r9 := @this: org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil;

        r0 := @parameter0: org.apache.xmlbeans.SchemaType;

        $r1 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(0);

        r2 = (org.apache.xmlbeans.XmlInteger) $r1;

        if r2 == null goto label1;

        $r10 = interfaceinvoke r2.<org.apache.xmlbeans.XmlInteger: java.math.BigInteger getBigIntegerValue()>();

        $i3 = virtualinvoke $r10.<java.math.BigInteger: int intValue()>();

        return $i3;

     label1:
        $r3 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(1);

        r4 = (org.apache.xmlbeans.XmlInteger) $r3;

        $r5 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(2);

        r6 = (org.apache.xmlbeans.XmlInteger) $r5;

        if r4 != null goto label2;

        i4 = 0;

        goto label3;

     label2:
        $r7 = interfaceinvoke r4.<org.apache.xmlbeans.XmlInteger: java.math.BigInteger getBigIntegerValue()>();

        i4 = virtualinvoke $r7.<java.math.BigInteger: int intValue()>();

     label3:
        if r6 != null goto label4;

        i5 = 2147483647;

        goto label5;

     label4:
        $r8 = interfaceinvoke r6.<org.apache.xmlbeans.XmlInteger: java.math.BigInteger getBigIntegerValue()>();

        i5 = virtualinvoke $r8.<java.math.BigInteger: int intValue()>();

     label5:
        if i4 != 0 goto label6;

        if i5 < 1 goto label6;

        i4 = 1;

     label6:
        $i6 = i4 + 2;

        if i5 <= $i6 goto label7;

        i5 = i4 + 2;

     label7:
        if i5 >= i4 goto label8;

        i5 = i4;

     label8:
        $i0 = i5 - i4;

        $i1 = specialinvoke r9.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: int pick(int)>($i0);

        $i2 = i4 + $i1;

        return $i2;
    }

    private java.lang.String formatToLength(java.lang.String, org.apache.xmlbeans.SchemaType)
    {
        org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil r11;
        java.lang.StringBuffer $r6, $r7, $r8;
        int $i0, $i1, $i2, $i3;
        java.lang.String r0, r12;
        org.apache.xmlbeans.SchemaType r1;
        org.apache.xmlbeans.SimpleValue $r5, r13, r14;
        org.apache.xmlbeans.XmlAnySimpleType $r2, $r3, $r4, $r9;
        java.lang.Exception $r10;

        r11 := @this: org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: org.apache.xmlbeans.SchemaType;

        r12 = r0;

     label1:
        $r2 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(0);

        r13 = (org.apache.xmlbeans.SimpleValue) $r2;

        if r13 != null goto label2;

        $r9 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(1);

        r13 = (org.apache.xmlbeans.SimpleValue) $r9;

     label2:
        if r13 == null goto label4;

        $i2 = interfaceinvoke r13.<org.apache.xmlbeans.SimpleValue: int getIntValue()>();

     label3:
        $i3 = virtualinvoke r12.<java.lang.String: int length()>();

        if $i3 >= $i2 goto label4;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r12);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r12);

        r12 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label3;

     label4:
        $r3 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(0);

        $r5 = (org.apache.xmlbeans.SimpleValue) $r3;

        r14 = $r5;

        if $r5 != null goto label5;

        $r4 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(2);

        r14 = (org.apache.xmlbeans.SimpleValue) $r4;

     label5:
        if r14 == null goto label6;

        $i0 = interfaceinvoke r14.<org.apache.xmlbeans.SimpleValue: int getIntValue()>();

        $i1 = virtualinvoke r12.<java.lang.String: int length()>();

        if $i1 <= $i0 goto label6;

        r12 = virtualinvoke r12.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

     label6:
        goto label8;

     label7:
        $r10 := @caughtexception;

     label8:
        return r12;

        catch java.lang.Exception from label1 to label6 with label7;
    }

    private java.lang.String formatDecimal(java.lang.String, org.apache.xmlbeans.SchemaType)
    {
        java.math.BigDecimal $r6, $r12, $r16, $r17, r21, $r23, r24, $r25, r26, $r31, r34, r37, $r38, $r40, $r42, $r43, $r45, $r46, $r47;
        java.math.BigInteger $r36;
        org.apache.xmlbeans.SchemaType r2;
        java.lang.StringBuffer $r41, $r44;
        java.lang.String r1, $r10, $r15, $r39;
        org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil r20;
        boolean z0, z1, z2, z3, $z4, $z5, z6, z7, z8, z9;
        org.apache.xmlbeans.XmlAnySimpleType $r3, $r4, $r5, $r27, $r29, $r32;
        org.apache.xmlbeans.XmlDecimal $r18, $r19, r22, $r28, $r30, $r33;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, $i10, i11, $i12, i13, i14, i15, i16, $i17, $i19, $i21, $i23;

        r20 := @this: org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.xmlbeans.SchemaType;

        $r40 = new java.math.BigDecimal;

        specialinvoke $r40.<java.math.BigDecimal: void <init>(java.lang.String)>(r1);

        r21 = $r40;

        $r3 = interfaceinvoke r2.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(4);

        r22 = (org.apache.xmlbeans.XmlDecimal) $r3;

        if r22 == null goto label01;

        $r23 = interfaceinvoke r22.<org.apache.xmlbeans.XmlDecimal: java.math.BigDecimal getBigDecimalValue()>();

        goto label02;

     label01:
        $r23 = null;

     label02:
        r24 = $r23;

        $r4 = interfaceinvoke r2.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(5);

        $r19 = (org.apache.xmlbeans.XmlDecimal) $r4;

        if $r19 == null goto label03;

        $r25 = interfaceinvoke $r19.<org.apache.xmlbeans.XmlDecimal: java.math.BigDecimal getBigDecimalValue()>();

        goto label04;

     label03:
        $r25 = null;

     label04:
        r26 = $r25;

        z2 = 1;

        z9 = 1;

        z8 = 1;

        z3 = 1;

        z7 = 1;

        z6 = 1;

        $r5 = interfaceinvoke r2.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(3);

        $r18 = (org.apache.xmlbeans.XmlDecimal) $r5;

        if $r18 == null goto label06;

        $r17 = interfaceinvoke $r18.<org.apache.xmlbeans.XmlDecimal: java.math.BigDecimal getBigDecimalValue()>();

        if r24 == null goto label05;

        $i7 = virtualinvoke r24.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>($r17);

        if $i7 >= 0 goto label06;

     label05:
        r24 = $r17;

        z2 = 0;

        z9 = 0;

        z8 = 0;

     label06:
        $r27 = interfaceinvoke r2.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(6);

        $r28 = (org.apache.xmlbeans.XmlDecimal) $r27;

        if $r28 == null goto label08;

        $r16 = interfaceinvoke $r28.<org.apache.xmlbeans.XmlDecimal: java.math.BigDecimal getBigDecimalValue()>();

        if r26 == null goto label07;

        $i6 = virtualinvoke r26.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>($r16);

        if $i6 <= 0 goto label08;

     label07:
        r26 = $r16;

        z3 = 0;

        z7 = 0;

        z6 = 0;

     label08:
        $r29 = interfaceinvoke r2.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(7);

        $r30 = (org.apache.xmlbeans.XmlDecimal) $r29;

        $i19 = (int) -1;

        i8 = $i19;

        if $r30 == null goto label12;

        $r12 = interfaceinvoke $r30.<org.apache.xmlbeans.XmlDecimal: java.math.BigDecimal getBigDecimalValue()>();

        $i3 = virtualinvoke $r12.<java.math.BigDecimal: int intValue()>();

        i8 = $i3;

        $r41 = new java.lang.StringBuffer;

        specialinvoke $r41.<java.lang.StringBuffer: void <init>(int)>($i3);

        i9 = 0;

     label09:
        if i9 >= $i3 goto label10;

        virtualinvoke $r41.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(57);

        i9 = i9 + 1;

        goto label09;

     label10:
        $r42 = new java.math.BigDecimal;

        $r15 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r42.<java.math.BigDecimal: void <init>(java.lang.String)>($r15);

        if r26 == null goto label11;

        $i5 = virtualinvoke r26.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>($r42);

        if $i5 <= 0 goto label11;

        r26 = $r42;

        z3 = 1;

        z7 = 1;

        z6 = 1;

     label11:
        $r31 = virtualinvoke $r42.<java.math.BigDecimal: java.math.BigDecimal negate()>();

        if r24 == null goto label12;

        $i4 = virtualinvoke r24.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>($r31);

        if $i4 >= 0 goto label12;

        r24 = $r31;

        z2 = 1;

        z9 = 1;

        z8 = 1;

     label12:
        if r24 != null goto label13;

        $i10 = 1;

        goto label14;

     label13:
        $i10 = virtualinvoke $r40.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>(r24);

     label14:
        i11 = $i10;

        if r26 != null goto label15;

        $i21 = (int) -1;

        $i12 = $i21;

        goto label16;

     label15:
        $i12 = virtualinvoke $r40.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>(r26);

     label16:
        i13 = $i12;

        if i11 > 0 goto label17;

        if i11 != 0 goto label18;

        if z9 == 0 goto label18;

     label17:
        $z4 = 1;

        goto label19;

     label18:
        $z4 = 0;

     label19:
        z0 = $z4;

        if i13 < 0 goto label20;

        if i13 != 0 goto label21;

        if z6 == 0 goto label21;

     label20:
        $z5 = 1;

        goto label22;

     label21:
        $z5 = 0;

     label22:
        z1 = $z5;

        $r32 = interfaceinvoke r2.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(8);

        $r33 = (org.apache.xmlbeans.XmlDecimal) $r32;

        $i23 = (int) -1;

        i14 = $i23;

        if $r33 != null goto label23;

        $r43 = new java.math.BigDecimal;

        specialinvoke $r43.<java.math.BigDecimal: void <init>(int)>(1);

        r34 = $r43;

        goto label27;

     label23:
        $r6 = interfaceinvoke $r33.<org.apache.xmlbeans.XmlDecimal: java.math.BigDecimal getBigDecimalValue()>();

        $i0 = virtualinvoke $r6.<java.math.BigDecimal: int intValue()>();

        i14 = $i0;

        if $i0 <= 0 goto label26;

        $r44 = new java.lang.StringBuffer;

        specialinvoke $r44.<java.lang.StringBuffer: void <init>(java.lang.String)>("0.");

        i15 = 1;

     label24:
        if i15 >= $i0 goto label25;

        virtualinvoke $r44.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(48);

        i15 = i15 + 1;

        goto label24;

     label25:
        virtualinvoke $r44.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(49);

        $r45 = new java.math.BigDecimal;

        $r10 = virtualinvoke $r44.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r45.<java.math.BigDecimal: void <init>(java.lang.String)>($r10);

        r34 = $r45;

        goto label27;

     label26:
        $r46 = new java.math.BigDecimal;

        specialinvoke $r46.<java.math.BigDecimal: void <init>(double)>(1.0);

        r34 = $r46;

     label27:
        if z0 == 0 goto label28;

        if z1 == 0 goto label28;

        goto label32;

     label28:
        if z0 == 0 goto label30;

        if z1 != 0 goto label30;

        if z7 == 0 goto label29;

        r21 = r26;

        goto label32;

     label29:
        r21 = virtualinvoke r26.<java.math.BigDecimal: java.math.BigDecimal subtract(java.math.BigDecimal)>(r34);

        goto label32;

     label30:
        if z0 != 0 goto label32;

        if z1 == 0 goto label32;

        if z8 == 0 goto label31;

        r21 = r24;

        goto label32;

     label31:
        r21 = virtualinvoke r24.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>(r34);

     label32:
        i16 = 0;

        $r47 = new java.math.BigDecimal;

        $r36 = <java.math.BigInteger: java.math.BigInteger ONE>;

        specialinvoke $r47.<java.math.BigDecimal: void <init>(java.math.BigInteger)>($r36);

        r37 = r21;

     label33:
        $r38 = virtualinvoke r37.<java.math.BigDecimal: java.math.BigDecimal abs()>();

        $i17 = virtualinvoke $r38.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>($r47);

        if $i17 < 0 goto label34;

        r37 = virtualinvoke r37.<java.math.BigDecimal: java.math.BigDecimal movePointLeft(int)>(1);

        i16 = i16 + 1;

        goto label33;

     label34:
        if i14 <= 0 goto label36;

        if i8 < 0 goto label35;

        $i1 = i8 - i16;

        $i2 = staticinvoke <java.lang.Math: int max(int,int)>(i14, $i1);

        r21 = virtualinvoke r21.<java.math.BigDecimal: java.math.BigDecimal setScale(int)>($i2);

        goto label37;

     label35:
        r21 = virtualinvoke r21.<java.math.BigDecimal: java.math.BigDecimal setScale(int)>(i14);

        goto label37;

     label36:
        if i14 != 0 goto label37;

        r21 = virtualinvoke r21.<java.math.BigDecimal: java.math.BigDecimal setScale(int)>(0);

     label37:
        $r39 = virtualinvoke r21.<java.math.BigDecimal: java.lang.String toString()>();

        return $r39;
    }

    private java.lang.String formatDuration(org.apache.xmlbeans.SchemaType)
    {
        java.math.BigDecimal $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20;
        org.apache.xmlbeans.SchemaType r0;
        java.lang.String $r29;
        org.apache.xmlbeans.XmlDuration $r21, $r22, $r23, r24;
        org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil r6;
        org.apache.xmlbeans.GDuration r25, r26, r27, r28;
        org.apache.xmlbeans.XmlAnySimpleType $r1, $r2, $r3, $r4;
        org.apache.xmlbeans.GDurationBuilder $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83;

        r6 := @this: org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil;

        r0 := @parameter0: org.apache.xmlbeans.SchemaType;

        $r1 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(4);

        r24 = (org.apache.xmlbeans.XmlDuration) $r1;

        r25 = null;

        if r24 == null goto label01;

        r25 = interfaceinvoke r24.<org.apache.xmlbeans.XmlDuration: org.apache.xmlbeans.GDuration getGDurationValue()>();

     label01:
        $r2 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(5);

        $r23 = (org.apache.xmlbeans.XmlDuration) $r2;

        r26 = null;

        if $r23 == null goto label02;

        r26 = interfaceinvoke $r23.<org.apache.xmlbeans.XmlDuration: org.apache.xmlbeans.GDuration getGDurationValue()>();

     label02:
        $r3 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(3);

        $r22 = (org.apache.xmlbeans.XmlDuration) $r3;

        r27 = null;

        if $r22 == null goto label03;

        r27 = interfaceinvoke $r22.<org.apache.xmlbeans.XmlDuration: org.apache.xmlbeans.GDuration getGDurationValue()>();

     label03:
        $r4 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(6);

        $r21 = (org.apache.xmlbeans.XmlDuration) $r4;

        r28 = null;

        if $r21 == null goto label04;

        r28 = interfaceinvoke $r21.<org.apache.xmlbeans.XmlDuration: org.apache.xmlbeans.GDuration getGDurationValue()>();

     label04:
        $r5 = new org.apache.xmlbeans.GDurationBuilder;

        specialinvoke $r5.<org.apache.xmlbeans.GDurationBuilder: void <init>()>();

        $i0 = specialinvoke r6.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: int pick(int)>(800000);

        virtualinvoke $r5.<org.apache.xmlbeans.GDurationBuilder: void setSecond(int)>($i0);

        $i1 = specialinvoke r6.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: int pick(int)>(20);

        virtualinvoke $r5.<org.apache.xmlbeans.GDurationBuilder: void setMonth(int)>($i1);

        if r25 == null goto label11;

        $i65 = virtualinvoke $r5.<org.apache.xmlbeans.GDurationBuilder: int getYear()>();

        $i66 = virtualinvoke r25.<org.apache.xmlbeans.GDuration: int getYear()>();

        if $i65 >= $i66 goto label05;

        $i83 = virtualinvoke r25.<org.apache.xmlbeans.GDuration: int getYear()>();

        virtualinvoke $r5.<org.apache.xmlbeans.GDurationBuilder: void setYear(int)>($i83);

     label05:
        $i67 = virtualinvoke $r5.<org.apache.xmlbeans.GDurationBuilder: int getMonth()>();

        $i68 = virtualinvoke r25.<org.apache.xmlbeans.GDuration: int getMonth()>();

        if $i67 >= $i68 goto label06;

        $i82 = virtualinvoke r25.<org.apache.xmlbeans.GDuration: int getMonth()>();

        virtualinvoke $r5.<org.apache.xmlbeans.GDurationBuilder: void setMonth(int)>($i82);

     label06:
        $i69 = virtualinvoke $r5.<org.apache.xmlbeans.GDurationBuilder: int getDay()>();

        $i70 = virtualinvoke r25.<org.apache.xmlbeans.GDuration: int getDay()>();

        if $i69 >= $i70 goto label07;

        $i81 = virtualinvoke r25.<org.apache.xmlbeans.GDuration: int getDay()>();

        virtualinvoke $r5.<org.apache.xmlbeans.GDurationBuilder: void setDay(int)>($i81);

     label07:
        $i71 = virtualinvoke $r5.<org.apache.xmlbeans.GDurationBuilder: int getHour()>();

        $i72 = virtualinvoke r25.<org.apache.xmlbeans.GDuration: int getHour()>();

        if $i71 >= $i72 goto label08;

        $i80 = virtualinvoke r25.<org.apache.xmlbeans.GDuration: int getHour()>();

        virtualinvoke $r5.<org.apache.xmlbeans.GDurationBuilder: void setHour(int)>($i80);

     label08:
        $i73 = virtualinvoke $r5.<org.apache.xmlbeans.GDurationBuilder: int getMinute()>();

        $i74 = virtualinvoke r25.<org.apache.xmlbeans.GDuration: int getMinute()>();

        if $i73 >= $i74 goto label09;

        $i79 = virtualinvoke r25.<org.apache.xmlbeans.GDuration: int getMinute()>();

        virtualinvoke $r5.<org.apache.xmlbeans.GDurationBuilder: void setMinute(int)>($i79);

     label09:
        $i75 = virtualinvoke $r5.<org.apache.xmlbeans.GDurationBuilder: int getSecond()>();

        $i76 = virtualinvoke r25.<org.apache.xmlbeans.GDuration: int getSecond()>();

        if $i75 >= $i76 goto label10;

        $i78 = virtualinvoke r25.<org.apache.xmlbeans.GDuration: int getSecond()>();

        virtualinvoke $r5.<org.apache.xmlbeans.GDurationBuilder: void setSecond(int)>($i78);

     label10:
        $r18 = virtualinvoke $r5.<org.apache.xmlbeans.GDurationBuilder: java.math.BigDecimal getFraction()>();

        $r19 = virtualinvoke r25.<org.apache.xmlbeans.GDuration: java.math.BigDecimal getFraction()>();

        $i77 = virtualinvoke $r18.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>($r19);

        if $i77 >= 0 goto label11;

        $r20 = virtualinvoke r25.<org.apache.xmlbeans.GDuration: java.math.BigDecimal getFraction()>();

        virtualinvoke $r5.<org.apache.xmlbeans.GDurationBuilder: void setFraction(java.math.BigDecimal)>($r20);

     label11:
        if r26 == null goto label18;

        $i46 = virtualinvoke $r5.<org.apache.xmlbeans.GDurationBuilder: int getYear()>();

        $i47 = virtualinvoke r26.<org.apache.xmlbeans.GDuration: int getYear()>();

        if $i46 <= $i47 goto label12;

        $i64 = virtualinvoke r26.<org.apache.xmlbeans.GDuration: int getYear()>();

        virtualinvoke $r5.<org.apache.xmlbeans.GDurationBuilder: void setYear(int)>($i64);

     label12:
        $i48 = virtualinvoke $r5.<org.apache.xmlbeans.GDurationBuilder: int getMonth()>();

        $i49 = virtualinvoke r26.<org.apache.xmlbeans.GDuration: int getMonth()>();

        if $i48 <= $i49 goto label13;

        $i63 = virtualinvoke r26.<org.apache.xmlbeans.GDuration: int getMonth()>();

        virtualinvoke $r5.<org.apache.xmlbeans.GDurationBuilder: void setMonth(int)>($i63);

     label13:
        $i50 = virtualinvoke $r5.<org.apache.xmlbeans.GDurationBuilder: int getDay()>();

        $i51 = virtualinvoke r26.<org.apache.xmlbeans.GDuration: int getDay()>();

        if $i50 <= $i51 goto label14;

        $i62 = virtualinvoke r26.<org.apache.xmlbeans.GDuration: int getDay()>();

        virtualinvoke $r5.<org.apache.xmlbeans.GDurationBuilder: void setDay(int)>($i62);

     label14:
        $i52 = virtualinvoke $r5.<org.apache.xmlbeans.GDurationBuilder: int getHour()>();

        $i53 = virtualinvoke r26.<org.apache.xmlbeans.GDuration: int getHour()>();

        if $i52 <= $i53 goto label15;

        $i61 = virtualinvoke r26.<org.apache.xmlbeans.GDuration: int getHour()>();

        virtualinvoke $r5.<org.apache.xmlbeans.GDurationBuilder: void setHour(int)>($i61);

     label15:
        $i54 = virtualinvoke $r5.<org.apache.xmlbeans.GDurationBuilder: int getMinute()>();

        $i55 = virtualinvoke r26.<org.apache.xmlbeans.GDuration: int getMinute()>();

        if $i54 <= $i55 goto label16;

        $i60 = virtualinvoke r26.<org.apache.xmlbeans.GDuration: int getMinute()>();

        virtualinvoke $r5.<org.apache.xmlbeans.GDurationBuilder: void setMinute(int)>($i60);

     label16:
        $i56 = virtualinvoke $r5.<org.apache.xmlbeans.GDurationBuilder: int getSecond()>();

        $i57 = virtualinvoke r26.<org.apache.xmlbeans.GDuration: int getSecond()>();

        if $i56 <= $i57 goto label17;

        $i59 = virtualinvoke r26.<org.apache.xmlbeans.GDuration: int getSecond()>();

        virtualinvoke $r5.<org.apache.xmlbeans.GDurationBuilder: void setSecond(int)>($i59);

     label17:
        $r15 = virtualinvoke $r5.<org.apache.xmlbeans.GDurationBuilder: java.math.BigDecimal getFraction()>();

        $r16 = virtualinvoke r26.<org.apache.xmlbeans.GDuration: java.math.BigDecimal getFraction()>();

        $i58 = virtualinvoke $r15.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>($r16);

        if $i58 <= 0 goto label18;

        $r17 = virtualinvoke r26.<org.apache.xmlbeans.GDuration: java.math.BigDecimal getFraction()>();

        virtualinvoke $r5.<org.apache.xmlbeans.GDurationBuilder: void setFraction(java.math.BigDecimal)>($r17);

     label18:
        if r27 == null goto label25;

        $i21 = virtualinvoke $r5.<org.apache.xmlbeans.GDurationBuilder: int getYear()>();

        $i22 = virtualinvoke r27.<org.apache.xmlbeans.GDuration: int getYear()>();

        if $i21 > $i22 goto label19;

        $i44 = virtualinvoke r27.<org.apache.xmlbeans.GDuration: int getYear()>();

        $i45 = $i44 + 1;

        virtualinvoke $r5.<org.apache.xmlbeans.GDurationBuilder: void setYear(int)>($i45);

     label19:
        $i23 = virtualinvoke $r5.<org.apache.xmlbeans.GDurationBuilder: int getMonth()>();

        $i24 = virtualinvoke r27.<org.apache.xmlbeans.GDuration: int getMonth()>();

        if $i23 > $i24 goto label20;

        $i42 = virtualinvoke r27.<org.apache.xmlbeans.GDuration: int getMonth()>();

        $i43 = $i42 + 1;

        virtualinvoke $r5.<org.apache.xmlbeans.GDurationBuilder: void setMonth(int)>($i43);

     label20:
        $i25 = virtualinvoke $r5.<org.apache.xmlbeans.GDurationBuilder: int getDay()>();

        $i26 = virtualinvoke r27.<org.apache.xmlbeans.GDuration: int getDay()>();

        if $i25 > $i26 goto label21;

        $i40 = virtualinvoke r27.<org.apache.xmlbeans.GDuration: int getDay()>();

        $i41 = $i40 + 1;

        virtualinvoke $r5.<org.apache.xmlbeans.GDurationBuilder: void setDay(int)>($i41);

     label21:
        $i27 = virtualinvoke $r5.<org.apache.xmlbeans.GDurationBuilder: int getHour()>();

        $i28 = virtualinvoke r27.<org.apache.xmlbeans.GDuration: int getHour()>();

        if $i27 > $i28 goto label22;

        $i38 = virtualinvoke r27.<org.apache.xmlbeans.GDuration: int getHour()>();

        $i39 = $i38 + 1;

        virtualinvoke $r5.<org.apache.xmlbeans.GDurationBuilder: void setHour(int)>($i39);

     label22:
        $i29 = virtualinvoke $r5.<org.apache.xmlbeans.GDurationBuilder: int getMinute()>();

        $i30 = virtualinvoke r27.<org.apache.xmlbeans.GDuration: int getMinute()>();

        if $i29 > $i30 goto label23;

        $i36 = virtualinvoke r27.<org.apache.xmlbeans.GDuration: int getMinute()>();

        $i37 = $i36 + 1;

        virtualinvoke $r5.<org.apache.xmlbeans.GDurationBuilder: void setMinute(int)>($i37);

     label23:
        $i31 = virtualinvoke $r5.<org.apache.xmlbeans.GDurationBuilder: int getSecond()>();

        $i32 = virtualinvoke r27.<org.apache.xmlbeans.GDuration: int getSecond()>();

        if $i31 > $i32 goto label24;

        $i34 = virtualinvoke r27.<org.apache.xmlbeans.GDuration: int getSecond()>();

        $i35 = $i34 + 1;

        virtualinvoke $r5.<org.apache.xmlbeans.GDurationBuilder: void setSecond(int)>($i35);

     label24:
        $r10 = virtualinvoke $r5.<org.apache.xmlbeans.GDurationBuilder: java.math.BigDecimal getFraction()>();

        $r11 = virtualinvoke r27.<org.apache.xmlbeans.GDuration: java.math.BigDecimal getFraction()>();

        $i33 = virtualinvoke $r10.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>($r11);

        if $i33 > 0 goto label25;

        $r12 = virtualinvoke r27.<org.apache.xmlbeans.GDuration: java.math.BigDecimal getFraction()>();

        $r13 = new java.math.BigDecimal;

        specialinvoke $r13.<java.math.BigDecimal: void <init>(double)>(0.001);

        $r14 = virtualinvoke $r12.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>($r13);

        virtualinvoke $r5.<org.apache.xmlbeans.GDurationBuilder: void setFraction(java.math.BigDecimal)>($r14);

     label25:
        if r28 == null goto label32;

        $i2 = virtualinvoke $r5.<org.apache.xmlbeans.GDurationBuilder: int getYear()>();

        $i3 = virtualinvoke r28.<org.apache.xmlbeans.GDuration: int getYear()>();

        if $i2 <= $i3 goto label26;

        $i20 = virtualinvoke r28.<org.apache.xmlbeans.GDuration: int getYear()>();

        virtualinvoke $r5.<org.apache.xmlbeans.GDurationBuilder: void setYear(int)>($i20);

     label26:
        $i4 = virtualinvoke $r5.<org.apache.xmlbeans.GDurationBuilder: int getMonth()>();

        $i5 = virtualinvoke r28.<org.apache.xmlbeans.GDuration: int getMonth()>();

        if $i4 <= $i5 goto label27;

        $i19 = virtualinvoke r28.<org.apache.xmlbeans.GDuration: int getMonth()>();

        virtualinvoke $r5.<org.apache.xmlbeans.GDurationBuilder: void setMonth(int)>($i19);

     label27:
        $i6 = virtualinvoke $r5.<org.apache.xmlbeans.GDurationBuilder: int getDay()>();

        $i7 = virtualinvoke r28.<org.apache.xmlbeans.GDuration: int getDay()>();

        if $i6 <= $i7 goto label28;

        $i18 = virtualinvoke r28.<org.apache.xmlbeans.GDuration: int getDay()>();

        virtualinvoke $r5.<org.apache.xmlbeans.GDurationBuilder: void setDay(int)>($i18);

     label28:
        $i8 = virtualinvoke $r5.<org.apache.xmlbeans.GDurationBuilder: int getHour()>();

        $i9 = virtualinvoke r28.<org.apache.xmlbeans.GDuration: int getHour()>();

        if $i8 <= $i9 goto label29;

        $i17 = virtualinvoke r28.<org.apache.xmlbeans.GDuration: int getHour()>();

        virtualinvoke $r5.<org.apache.xmlbeans.GDurationBuilder: void setHour(int)>($i17);

     label29:
        $i10 = virtualinvoke $r5.<org.apache.xmlbeans.GDurationBuilder: int getMinute()>();

        $i11 = virtualinvoke r28.<org.apache.xmlbeans.GDuration: int getMinute()>();

        if $i10 <= $i11 goto label30;

        $i16 = virtualinvoke r28.<org.apache.xmlbeans.GDuration: int getMinute()>();

        virtualinvoke $r5.<org.apache.xmlbeans.GDurationBuilder: void setMinute(int)>($i16);

     label30:
        $i12 = virtualinvoke $r5.<org.apache.xmlbeans.GDurationBuilder: int getSecond()>();

        $i13 = virtualinvoke r28.<org.apache.xmlbeans.GDuration: int getSecond()>();

        if $i12 <= $i13 goto label31;

        $i15 = virtualinvoke r28.<org.apache.xmlbeans.GDuration: int getSecond()>();

        virtualinvoke $r5.<org.apache.xmlbeans.GDurationBuilder: void setSecond(int)>($i15);

     label31:
        $r7 = virtualinvoke $r5.<org.apache.xmlbeans.GDurationBuilder: java.math.BigDecimal getFraction()>();

        $r8 = virtualinvoke r28.<org.apache.xmlbeans.GDuration: java.math.BigDecimal getFraction()>();

        $i14 = virtualinvoke $r7.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>($r8);

        if $i14 <= 0 goto label32;

        $r9 = virtualinvoke r28.<org.apache.xmlbeans.GDuration: java.math.BigDecimal getFraction()>();

        virtualinvoke $r5.<org.apache.xmlbeans.GDurationBuilder: void setFraction(java.math.BigDecimal)>($r9);

     label32:
        virtualinvoke $r5.<org.apache.xmlbeans.GDurationBuilder: void normalize()>();

        $r29 = virtualinvoke $r5.<org.apache.xmlbeans.GDurationBuilder: java.lang.String toString()>();

        return $r29;
    }

    private java.lang.String formatDate(org.apache.xmlbeans.SchemaType)
    {
        org.apache.xmlbeans.GDateBuilder r68, $r98, $r99, $r100, $r101;
        org.apache.xmlbeans.XmlGDay $r23, $r25, r89, $r91;
        org.apache.xmlbeans.SchemaType r3, $r4, $r96;
        long $l1, $l2, $l4, $l5, $l6, $l7, $l8, $l9, $l10, $l11;
        org.apache.xmlbeans.XmlCalendar $r9, $r10, $r11, $r13;
        java.util.Date $r97;
        org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil r2;
        org.apache.xmlbeans.XmlGMonth $r16, $r18, r92, $r94;
        int $i0, $i3, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i39, $i41, $i43, $i45;
        org.apache.xmlbeans.XmlGYear $r37, $r39, r83, $r85;
        org.apache.xmlbeans.XmlTime $r58, $r60, r74, $r76;
        java.lang.String $r8;
        org.apache.xmlbeans.GDate $r15, $r17, $r22, $r24, $r29, $r31, $r36, $r38, $r43, $r45, $r50, $r52, $r57, $r59, $r64, $r66, r69, r70;
        boolean $z0, $z1, $z2, $z3;
        org.apache.xmlbeans.XmlAnySimpleType $r5, $r6, $r7, $r19, $r20, $r21, $r26, $r27, $r28, $r33, $r34, $r35, $r40, $r41, $r42, $r47, $r48, $r49, $r54, $r55, $r56, $r61, $r62, $r63, $r72, $r75, $r78, $r81, $r84, $r87, $r90, $r93;
        org.apache.xmlbeans.XmlGYearMonth $r44, $r46, r80, $r82;
        org.apache.xmlbeans.XmlDateTime $r65, $r67, r71, $r73;
        org.apache.xmlbeans.XmlGMonthDay $r30, $r32, r86, $r88;
        org.apache.xmlbeans.XmlDate $r51, $r53, r77, $r79;

        r2 := @this: org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil;

        r3 := @parameter0: org.apache.xmlbeans.SchemaType;

        $r98 = new org.apache.xmlbeans.GDateBuilder;

        $r97 = new java.util.Date;

        $i0 = specialinvoke r2.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: int pick(int)>(31536000);

        $l1 = (long) $i0;

        $l2 = 1000L * $l1;

        $i3 = specialinvoke r2.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: int pick(int)>(20);

        $l4 = (long) $i3;

        $l5 = 30L + $l4;

        $l6 = $l5 * 365L;

        $l7 = $l6 * 24L;

        $l8 = $l7 * 60L;

        $l9 = $l8 * 60L;

        $l10 = $l9 * 1000L;

        $l11 = $l2 + $l10;

        specialinvoke $r97.<java.util.Date: void <init>(long)>($l11);

        specialinvoke $r98.<org.apache.xmlbeans.GDateBuilder: void <init>(java.util.Date)>($r97);

        r68 = $r98;

        r69 = null;

        r70 = null;

        $r4 = interfaceinvoke r3.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType getPrimitiveType()>();

        $i12 = interfaceinvoke $r4.<org.apache.xmlbeans.SchemaType: int getBuiltinTypeCode()>();

        tableswitch($i12)
        {
            case 14: goto label01;
            case 15: goto label07;
            case 16: goto label13;
            case 17: goto label19;
            case 18: goto label25;
            case 19: goto label31;
            case 20: goto label37;
            case 21: goto label43;
            default: goto label49;
        };

     label01:
        $r61 = interfaceinvoke r3.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(4);

        r71 = (org.apache.xmlbeans.XmlDateTime) $r61;

        if r71 == null goto label02;

        r69 = interfaceinvoke r71.<org.apache.xmlbeans.XmlDateTime: org.apache.xmlbeans.GDate getGDateValue()>();

     label02:
        $r62 = interfaceinvoke r3.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(3);

        $r67 = (org.apache.xmlbeans.XmlDateTime) $r62;

        if $r67 == null goto label04;

        if r69 == null goto label03;

        $r66 = interfaceinvoke $r67.<org.apache.xmlbeans.XmlDateTime: org.apache.xmlbeans.GDate getGDateValue()>();

        $i35 = virtualinvoke r69.<org.apache.xmlbeans.GDate: int compareToGDate(org.apache.xmlbeans.GDateSpecification)>($r66);

        if $i35 > 0 goto label04;

     label03:
        r69 = interfaceinvoke $r67.<org.apache.xmlbeans.XmlDateTime: org.apache.xmlbeans.GDate getGDateValue()>();

     label04:
        $r72 = interfaceinvoke r3.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(5);

        $r73 = (org.apache.xmlbeans.XmlDateTime) $r72;

        if $r73 == null goto label05;

        r70 = interfaceinvoke $r73.<org.apache.xmlbeans.XmlDateTime: org.apache.xmlbeans.GDate getGDateValue()>();

     label05:
        $r63 = interfaceinvoke r3.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(6);

        $r65 = (org.apache.xmlbeans.XmlDateTime) $r63;

        if $r65 == null goto label49;

        if r70 == null goto label06;

        $r64 = interfaceinvoke $r65.<org.apache.xmlbeans.XmlDateTime: org.apache.xmlbeans.GDate getGDateValue()>();

        $i34 = virtualinvoke r70.<org.apache.xmlbeans.GDate: int compareToGDate(org.apache.xmlbeans.GDateSpecification)>($r64);

        if $i34 < 0 goto label49;

     label06:
        r70 = interfaceinvoke $r65.<org.apache.xmlbeans.XmlDateTime: org.apache.xmlbeans.GDate getGDateValue()>();

        goto label49;

     label07:
        $r54 = interfaceinvoke r3.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(4);

        r74 = (org.apache.xmlbeans.XmlTime) $r54;

        if r74 == null goto label08;

        r69 = interfaceinvoke r74.<org.apache.xmlbeans.XmlTime: org.apache.xmlbeans.GDate getGDateValue()>();

     label08:
        $r55 = interfaceinvoke r3.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(3);

        $r60 = (org.apache.xmlbeans.XmlTime) $r55;

        if $r60 == null goto label10;

        if r69 == null goto label09;

        $r59 = interfaceinvoke $r60.<org.apache.xmlbeans.XmlTime: org.apache.xmlbeans.GDate getGDateValue()>();

        $i33 = virtualinvoke r69.<org.apache.xmlbeans.GDate: int compareToGDate(org.apache.xmlbeans.GDateSpecification)>($r59);

        if $i33 > 0 goto label10;

     label09:
        r69 = interfaceinvoke $r60.<org.apache.xmlbeans.XmlTime: org.apache.xmlbeans.GDate getGDateValue()>();

     label10:
        $r75 = interfaceinvoke r3.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(5);

        $r76 = (org.apache.xmlbeans.XmlTime) $r75;

        if $r76 == null goto label11;

        r70 = interfaceinvoke $r76.<org.apache.xmlbeans.XmlTime: org.apache.xmlbeans.GDate getGDateValue()>();

     label11:
        $r56 = interfaceinvoke r3.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(6);

        $r58 = (org.apache.xmlbeans.XmlTime) $r56;

        if $r58 == null goto label49;

        if r70 == null goto label12;

        $r57 = interfaceinvoke $r58.<org.apache.xmlbeans.XmlTime: org.apache.xmlbeans.GDate getGDateValue()>();

        $i32 = virtualinvoke r70.<org.apache.xmlbeans.GDate: int compareToGDate(org.apache.xmlbeans.GDateSpecification)>($r57);

        if $i32 < 0 goto label49;

     label12:
        r70 = interfaceinvoke $r58.<org.apache.xmlbeans.XmlTime: org.apache.xmlbeans.GDate getGDateValue()>();

        goto label49;

     label13:
        $r47 = interfaceinvoke r3.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(4);

        r77 = (org.apache.xmlbeans.XmlDate) $r47;

        if r77 == null goto label14;

        r69 = interfaceinvoke r77.<org.apache.xmlbeans.XmlDate: org.apache.xmlbeans.GDate getGDateValue()>();

     label14:
        $r48 = interfaceinvoke r3.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(3);

        $r53 = (org.apache.xmlbeans.XmlDate) $r48;

        if $r53 == null goto label16;

        if r69 == null goto label15;

        $r52 = interfaceinvoke $r53.<org.apache.xmlbeans.XmlDate: org.apache.xmlbeans.GDate getGDateValue()>();

        $i31 = virtualinvoke r69.<org.apache.xmlbeans.GDate: int compareToGDate(org.apache.xmlbeans.GDateSpecification)>($r52);

        if $i31 > 0 goto label16;

     label15:
        r69 = interfaceinvoke $r53.<org.apache.xmlbeans.XmlDate: org.apache.xmlbeans.GDate getGDateValue()>();

     label16:
        $r78 = interfaceinvoke r3.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(5);

        $r79 = (org.apache.xmlbeans.XmlDate) $r78;

        if $r79 == null goto label17;

        r70 = interfaceinvoke $r79.<org.apache.xmlbeans.XmlDate: org.apache.xmlbeans.GDate getGDateValue()>();

     label17:
        $r49 = interfaceinvoke r3.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(6);

        $r51 = (org.apache.xmlbeans.XmlDate) $r49;

        if $r51 == null goto label49;

        if r70 == null goto label18;

        $r50 = interfaceinvoke $r51.<org.apache.xmlbeans.XmlDate: org.apache.xmlbeans.GDate getGDateValue()>();

        $i30 = virtualinvoke r70.<org.apache.xmlbeans.GDate: int compareToGDate(org.apache.xmlbeans.GDateSpecification)>($r50);

        if $i30 < 0 goto label49;

     label18:
        r70 = interfaceinvoke $r51.<org.apache.xmlbeans.XmlDate: org.apache.xmlbeans.GDate getGDateValue()>();

        goto label49;

     label19:
        $r40 = interfaceinvoke r3.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(4);

        r80 = (org.apache.xmlbeans.XmlGYearMonth) $r40;

        if r80 == null goto label20;

        r69 = interfaceinvoke r80.<org.apache.xmlbeans.XmlGYearMonth: org.apache.xmlbeans.GDate getGDateValue()>();

     label20:
        $r41 = interfaceinvoke r3.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(3);

        $r46 = (org.apache.xmlbeans.XmlGYearMonth) $r41;

        if $r46 == null goto label22;

        if r69 == null goto label21;

        $r45 = interfaceinvoke $r46.<org.apache.xmlbeans.XmlGYearMonth: org.apache.xmlbeans.GDate getGDateValue()>();

        $i29 = virtualinvoke r69.<org.apache.xmlbeans.GDate: int compareToGDate(org.apache.xmlbeans.GDateSpecification)>($r45);

        if $i29 > 0 goto label22;

     label21:
        r69 = interfaceinvoke $r46.<org.apache.xmlbeans.XmlGYearMonth: org.apache.xmlbeans.GDate getGDateValue()>();

     label22:
        $r81 = interfaceinvoke r3.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(5);

        $r82 = (org.apache.xmlbeans.XmlGYearMonth) $r81;

        if $r82 == null goto label23;

        r70 = interfaceinvoke $r82.<org.apache.xmlbeans.XmlGYearMonth: org.apache.xmlbeans.GDate getGDateValue()>();

     label23:
        $r42 = interfaceinvoke r3.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(6);

        $r44 = (org.apache.xmlbeans.XmlGYearMonth) $r42;

        if $r44 == null goto label49;

        if r70 == null goto label24;

        $r43 = interfaceinvoke $r44.<org.apache.xmlbeans.XmlGYearMonth: org.apache.xmlbeans.GDate getGDateValue()>();

        $i28 = virtualinvoke r70.<org.apache.xmlbeans.GDate: int compareToGDate(org.apache.xmlbeans.GDateSpecification)>($r43);

        if $i28 < 0 goto label49;

     label24:
        r70 = interfaceinvoke $r44.<org.apache.xmlbeans.XmlGYearMonth: org.apache.xmlbeans.GDate getGDateValue()>();

        goto label49;

     label25:
        $r33 = interfaceinvoke r3.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(4);

        r83 = (org.apache.xmlbeans.XmlGYear) $r33;

        if r83 == null goto label26;

        r69 = interfaceinvoke r83.<org.apache.xmlbeans.XmlGYear: org.apache.xmlbeans.GDate getGDateValue()>();

     label26:
        $r34 = interfaceinvoke r3.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(3);

        $r39 = (org.apache.xmlbeans.XmlGYear) $r34;

        if $r39 == null goto label28;

        if r69 == null goto label27;

        $r38 = interfaceinvoke $r39.<org.apache.xmlbeans.XmlGYear: org.apache.xmlbeans.GDate getGDateValue()>();

        $i27 = virtualinvoke r69.<org.apache.xmlbeans.GDate: int compareToGDate(org.apache.xmlbeans.GDateSpecification)>($r38);

        if $i27 > 0 goto label28;

     label27:
        r69 = interfaceinvoke $r39.<org.apache.xmlbeans.XmlGYear: org.apache.xmlbeans.GDate getGDateValue()>();

     label28:
        $r84 = interfaceinvoke r3.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(5);

        $r85 = (org.apache.xmlbeans.XmlGYear) $r84;

        if $r85 == null goto label29;

        r70 = interfaceinvoke $r85.<org.apache.xmlbeans.XmlGYear: org.apache.xmlbeans.GDate getGDateValue()>();

     label29:
        $r35 = interfaceinvoke r3.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(6);

        $r37 = (org.apache.xmlbeans.XmlGYear) $r35;

        if $r37 == null goto label49;

        if r70 == null goto label30;

        $r36 = interfaceinvoke $r37.<org.apache.xmlbeans.XmlGYear: org.apache.xmlbeans.GDate getGDateValue()>();

        $i26 = virtualinvoke r70.<org.apache.xmlbeans.GDate: int compareToGDate(org.apache.xmlbeans.GDateSpecification)>($r36);

        if $i26 < 0 goto label49;

     label30:
        r70 = interfaceinvoke $r37.<org.apache.xmlbeans.XmlGYear: org.apache.xmlbeans.GDate getGDateValue()>();

        goto label49;

     label31:
        $r26 = interfaceinvoke r3.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(4);

        r86 = (org.apache.xmlbeans.XmlGMonthDay) $r26;

        if r86 == null goto label32;

        r69 = interfaceinvoke r86.<org.apache.xmlbeans.XmlGMonthDay: org.apache.xmlbeans.GDate getGDateValue()>();

     label32:
        $r27 = interfaceinvoke r3.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(3);

        $r32 = (org.apache.xmlbeans.XmlGMonthDay) $r27;

        if $r32 == null goto label34;

        if r69 == null goto label33;

        $r31 = interfaceinvoke $r32.<org.apache.xmlbeans.XmlGMonthDay: org.apache.xmlbeans.GDate getGDateValue()>();

        $i25 = virtualinvoke r69.<org.apache.xmlbeans.GDate: int compareToGDate(org.apache.xmlbeans.GDateSpecification)>($r31);

        if $i25 > 0 goto label34;

     label33:
        r69 = interfaceinvoke $r32.<org.apache.xmlbeans.XmlGMonthDay: org.apache.xmlbeans.GDate getGDateValue()>();

     label34:
        $r87 = interfaceinvoke r3.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(5);

        $r88 = (org.apache.xmlbeans.XmlGMonthDay) $r87;

        if $r88 == null goto label35;

        r70 = interfaceinvoke $r88.<org.apache.xmlbeans.XmlGMonthDay: org.apache.xmlbeans.GDate getGDateValue()>();

     label35:
        $r28 = interfaceinvoke r3.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(6);

        $r30 = (org.apache.xmlbeans.XmlGMonthDay) $r28;

        if $r30 == null goto label49;

        if r70 == null goto label36;

        $r29 = interfaceinvoke $r30.<org.apache.xmlbeans.XmlGMonthDay: org.apache.xmlbeans.GDate getGDateValue()>();

        $i24 = virtualinvoke r70.<org.apache.xmlbeans.GDate: int compareToGDate(org.apache.xmlbeans.GDateSpecification)>($r29);

        if $i24 < 0 goto label49;

     label36:
        r70 = interfaceinvoke $r30.<org.apache.xmlbeans.XmlGMonthDay: org.apache.xmlbeans.GDate getGDateValue()>();

        goto label49;

     label37:
        $r19 = interfaceinvoke r3.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(4);

        r89 = (org.apache.xmlbeans.XmlGDay) $r19;

        if r89 == null goto label38;

        r69 = interfaceinvoke r89.<org.apache.xmlbeans.XmlGDay: org.apache.xmlbeans.GDate getGDateValue()>();

     label38:
        $r20 = interfaceinvoke r3.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(3);

        $r25 = (org.apache.xmlbeans.XmlGDay) $r20;

        if $r25 == null goto label40;

        if r69 == null goto label39;

        $r24 = interfaceinvoke $r25.<org.apache.xmlbeans.XmlGDay: org.apache.xmlbeans.GDate getGDateValue()>();

        $i23 = virtualinvoke r69.<org.apache.xmlbeans.GDate: int compareToGDate(org.apache.xmlbeans.GDateSpecification)>($r24);

        if $i23 > 0 goto label40;

     label39:
        r69 = interfaceinvoke $r25.<org.apache.xmlbeans.XmlGDay: org.apache.xmlbeans.GDate getGDateValue()>();

     label40:
        $r90 = interfaceinvoke r3.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(5);

        $r91 = (org.apache.xmlbeans.XmlGDay) $r90;

        if $r91 == null goto label41;

        r70 = interfaceinvoke $r91.<org.apache.xmlbeans.XmlGDay: org.apache.xmlbeans.GDate getGDateValue()>();

     label41:
        $r21 = interfaceinvoke r3.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(6);

        $r23 = (org.apache.xmlbeans.XmlGDay) $r21;

        if $r23 == null goto label49;

        if r70 == null goto label42;

        $r22 = interfaceinvoke $r23.<org.apache.xmlbeans.XmlGDay: org.apache.xmlbeans.GDate getGDateValue()>();

        $i22 = virtualinvoke r70.<org.apache.xmlbeans.GDate: int compareToGDate(org.apache.xmlbeans.GDateSpecification)>($r22);

        if $i22 < 0 goto label49;

     label42:
        r70 = interfaceinvoke $r23.<org.apache.xmlbeans.XmlGDay: org.apache.xmlbeans.GDate getGDateValue()>();

        goto label49;

     label43:
        $r5 = interfaceinvoke r3.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(4);

        r92 = (org.apache.xmlbeans.XmlGMonth) $r5;

        if r92 == null goto label44;

        r69 = interfaceinvoke r92.<org.apache.xmlbeans.XmlGMonth: org.apache.xmlbeans.GDate getGDateValue()>();

     label44:
        $r6 = interfaceinvoke r3.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(3);

        $r18 = (org.apache.xmlbeans.XmlGMonth) $r6;

        if $r18 == null goto label46;

        if r69 == null goto label45;

        $r17 = interfaceinvoke $r18.<org.apache.xmlbeans.XmlGMonth: org.apache.xmlbeans.GDate getGDateValue()>();

        $i21 = virtualinvoke r69.<org.apache.xmlbeans.GDate: int compareToGDate(org.apache.xmlbeans.GDateSpecification)>($r17);

        if $i21 > 0 goto label46;

     label45:
        r69 = interfaceinvoke $r18.<org.apache.xmlbeans.XmlGMonth: org.apache.xmlbeans.GDate getGDateValue()>();

     label46:
        $r93 = interfaceinvoke r3.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(5);

        $r94 = (org.apache.xmlbeans.XmlGMonth) $r93;

        if $r94 == null goto label47;

        r70 = interfaceinvoke $r94.<org.apache.xmlbeans.XmlGMonth: org.apache.xmlbeans.GDate getGDateValue()>();

     label47:
        $r7 = interfaceinvoke r3.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(6);

        $r16 = (org.apache.xmlbeans.XmlGMonth) $r7;

        if $r16 == null goto label49;

        if r70 == null goto label48;

        $r15 = interfaceinvoke $r16.<org.apache.xmlbeans.XmlGMonth: org.apache.xmlbeans.GDate getGDateValue()>();

        $i20 = virtualinvoke r70.<org.apache.xmlbeans.GDate: int compareToGDate(org.apache.xmlbeans.GDateSpecification)>($r15);

        if $i20 < 0 goto label49;

     label48:
        r70 = interfaceinvoke $r16.<org.apache.xmlbeans.XmlGMonth: org.apache.xmlbeans.GDate getGDateValue()>();

        goto label49;

     label49:
        if r69 == null goto label50;

        if r70 != null goto label50;

        $i18 = virtualinvoke r69.<org.apache.xmlbeans.GDate: int compareToGDate(org.apache.xmlbeans.GDateSpecification)>($r98);

        if $i18 < 0 goto label54;

        $r13 = virtualinvoke $r98.<org.apache.xmlbeans.GDateBuilder: org.apache.xmlbeans.XmlCalendar getCalendar()>();

        $i19 = specialinvoke r2.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: int pick(int)>(8);

        virtualinvoke $r13.<java.util.Calendar: void add(int,int)>(11, $i19);

        $r99 = new org.apache.xmlbeans.GDateBuilder;

        specialinvoke $r99.<org.apache.xmlbeans.GDateBuilder: void <init>(java.util.Calendar)>($r13);

        r68 = $r99;

        goto label54;

     label50:
        if r69 != null goto label51;

        if r70 == null goto label51;

        $i15 = virtualinvoke r70.<org.apache.xmlbeans.GDate: int compareToGDate(org.apache.xmlbeans.GDateSpecification)>($r98);

        if $i15 > 0 goto label54;

        $r11 = virtualinvoke $r98.<org.apache.xmlbeans.GDateBuilder: org.apache.xmlbeans.XmlCalendar getCalendar()>();

        $i16 = specialinvoke r2.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: int pick(int)>(8);

        $i17 = 0 - $i16;

        virtualinvoke $r11.<java.util.Calendar: void add(int,int)>(11, $i17);

        $r100 = new org.apache.xmlbeans.GDateBuilder;

        specialinvoke $r100.<org.apache.xmlbeans.GDateBuilder: void <init>(java.util.Calendar)>($r11);

        r68 = $r100;

        goto label54;

     label51:
        if r69 == null goto label54;

        if r70 == null goto label54;

        $i13 = virtualinvoke r69.<org.apache.xmlbeans.GDate: int compareToGDate(org.apache.xmlbeans.GDateSpecification)>($r98);

        if $i13 >= 0 goto label52;

        $i14 = virtualinvoke r70.<org.apache.xmlbeans.GDate: int compareToGDate(org.apache.xmlbeans.GDateSpecification)>($r98);

        if $i14 > 0 goto label54;

     label52:
        $r9 = virtualinvoke r69.<org.apache.xmlbeans.GDate: org.apache.xmlbeans.XmlCalendar getCalendar()>();

        $r10 = virtualinvoke r70.<org.apache.xmlbeans.GDate: org.apache.xmlbeans.XmlCalendar getCalendar()>();

        virtualinvoke $r9.<java.util.Calendar: void add(int,int)>(11, 1);

        $z0 = virtualinvoke $r9.<java.util.Calendar: boolean after(java.lang.Object)>($r10);

        if $z0 == 0 goto label53;

        $i39 = (int) -1;

        virtualinvoke $r9.<java.util.Calendar: void add(int,int)>(11, $i39);

        virtualinvoke $r9.<java.util.Calendar: void add(int,int)>(12, 1);

        $z1 = virtualinvoke $r9.<java.util.Calendar: boolean after(java.lang.Object)>($r10);

        if $z1 == 0 goto label53;

        $i41 = (int) -1;

        virtualinvoke $r9.<java.util.Calendar: void add(int,int)>(12, $i41);

        virtualinvoke $r9.<java.util.Calendar: void add(int,int)>(13, 1);

        $z2 = virtualinvoke $r9.<java.util.Calendar: boolean after(java.lang.Object)>($r10);

        if $z2 == 0 goto label53;

        $i43 = (int) -1;

        virtualinvoke $r9.<java.util.Calendar: void add(int,int)>(13, $i43);

        virtualinvoke $r9.<java.util.Calendar: void add(int,int)>(14, 1);

        $z3 = virtualinvoke $r9.<java.util.Calendar: boolean after(java.lang.Object)>($r10);

        if $z3 == 0 goto label53;

        $i45 = (int) -1;

        virtualinvoke $r9.<java.util.Calendar: void add(int,int)>(14, $i45);

     label53:
        $r101 = new org.apache.xmlbeans.GDateBuilder;

        specialinvoke $r101.<org.apache.xmlbeans.GDateBuilder: void <init>(java.util.Calendar)>($r9);

        r68 = $r101;

     label54:
        $r96 = interfaceinvoke r3.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType getPrimitiveType()>();

        $i36 = interfaceinvoke $r96.<org.apache.xmlbeans.SchemaType: int getBuiltinTypeCode()>();

        virtualinvoke r68.<org.apache.xmlbeans.GDateBuilder: void setBuiltinTypeCode(int)>($i36);

        $i37 = specialinvoke r2.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: int pick(int)>(2);

        if $i37 != 0 goto label55;

        virtualinvoke r68.<org.apache.xmlbeans.GDateBuilder: void clearTimeZone()>();

     label55:
        $r8 = virtualinvoke r68.<org.apache.xmlbeans.GDateBuilder: java.lang.String toString()>();

        return $r8;
    }

    private org.apache.xmlbeans.SchemaType closestBuiltin(org.apache.xmlbeans.SchemaType)
    {
        org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil r0;
        org.apache.xmlbeans.SchemaType r1;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil;

        r1 := @parameter0: org.apache.xmlbeans.SchemaType;

     label1:
        $z0 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaType: boolean isBuiltinType()>();

        if $z0 != 0 goto label2;

        r1 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType getBaseType()>();

        goto label1;

     label2:
        return r1;
    }

    public static javax.xml.namespace.QName crackQName(java.lang.String)
    {
        int $i0, $i1;
        java.lang.String r0, r2, r3;
        javax.xml.namespace.QName $r1;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int lastIndexOf(int)>(58);

        if $i0 < 0 goto label1;

        r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $i1 = $i0 + 1;

        r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i1);

        goto label2;

     label1:
        r2 = "";

        r3 = r0;

     label2:
        $r1 = new javax.xml.namespace.QName;

        specialinvoke $r1.<javax.xml.namespace.QName: void <init>(java.lang.String,java.lang.String)>(r2, r3);

        return $r1;
    }

    private void processParticle(org.apache.xmlbeans.SchemaParticle, org.apache.xmlbeans.XmlCursor, boolean)
    {
        org.apache.xmlbeans.XmlCursor r2;
        org.apache.xmlbeans.SchemaParticle r1;
        org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil r0;
        int $i0, i1, $i2, $i4;
        boolean z0;

        r0 := @this: org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil;

        r1 := @parameter0: org.apache.xmlbeans.SchemaParticle;

        r2 := @parameter1: org.apache.xmlbeans.XmlCursor;

        z0 := @parameter2: boolean;

        i1 = specialinvoke r0.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: int determineMinMaxForSample(org.apache.xmlbeans.SchemaParticle,org.apache.xmlbeans.XmlCursor)>(r1, r2);

     label1:
        $i2 = i1;

        $i4 = (int) -1;

        i1 = i1 + $i4;

        if $i2 <= 0 goto label8;

        $i0 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaParticle: int getParticleType()>();

        tableswitch($i0)
        {
            case 1: goto label5;
            case 2: goto label4;
            case 3: goto label3;
            case 4: goto label2;
            case 5: goto label6;
            default: goto label7;
        };

     label2:
        specialinvoke r0.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: void processElement(org.apache.xmlbeans.SchemaParticle,org.apache.xmlbeans.XmlCursor,boolean)>(r1, r2, z0);

        goto label1;

     label3:
        specialinvoke r0.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: void processSequence(org.apache.xmlbeans.SchemaParticle,org.apache.xmlbeans.XmlCursor,boolean)>(r1, r2, z0);

        goto label1;

     label4:
        specialinvoke r0.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: void processChoice(org.apache.xmlbeans.SchemaParticle,org.apache.xmlbeans.XmlCursor,boolean)>(r1, r2, z0);

        goto label1;

     label5:
        specialinvoke r0.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: void processAll(org.apache.xmlbeans.SchemaParticle,org.apache.xmlbeans.XmlCursor,boolean)>(r1, r2, z0);

        goto label1;

     label6:
        specialinvoke r0.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: void processWildCard(org.apache.xmlbeans.SchemaParticle,org.apache.xmlbeans.XmlCursor,boolean)>(r1, r2, z0);

        goto label1;

     label7:
        goto label1;

     label8:
        return;
    }

    private int determineMinMaxForSample(org.apache.xmlbeans.SchemaParticle, org.apache.xmlbeans.XmlCursor)
    {
        org.apache.xmlbeans.XmlCursor r2;
        org.apache.xmlbeans.SchemaParticle r0;
        org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil r15;
        java.lang.StringBuffer $r3, $r4, $r5, $r8, $r9, $r11, $r12, $r13;
        int $i0, $i1, $i2, $i3, i4, $i5;
        java.math.BigInteger $r1, $r6;
        java.lang.String $r7, $r10, $r14;

        r15 := @this: org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil;

        r0 := @parameter0: org.apache.xmlbeans.SchemaParticle;

        r2 := @parameter1: org.apache.xmlbeans.XmlCursor;

        $i0 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: int getIntMinOccurs()>();

        $i1 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: int getIntMaxOccurs()>();

        if $i0 != $i1 goto label1;

        return $i0;

     label1:
        i4 = $i0;

        if $i0 != 0 goto label2;

        $i3 = r15.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: int _nElements>;

        if $i3 >= 1000 goto label2;

        i4 = 1;

     label2:
        $i5 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: int getParticleType()>();

        if $i5 == 4 goto label3;

        return i4;

     label3:
        $r1 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: java.math.BigInteger getMaxOccurs()>();

        if $r1 != null goto label5;

        if $i0 != 0 goto label4;

        interfaceinvoke r2.<org.apache.xmlbeans.XmlCursor: void insertComment(java.lang.String)>("Zero or more repetitions:");

        goto label7;

     label4:
        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" or more repetitions:");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke r2.<org.apache.xmlbeans.XmlCursor: void insertComment(java.lang.String)>($r14);

        goto label7;

     label5:
        $i2 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: int getIntMaxOccurs()>();

        if $i2 <= 1 goto label6;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" to ");

        $r6 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: java.math.BigInteger getMaxOccurs()>();

        $r7 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" repetitions:");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke r2.<org.apache.xmlbeans.XmlCursor: void insertComment(java.lang.String)>($r10);

        goto label7;

     label6:
        interfaceinvoke r2.<org.apache.xmlbeans.XmlCursor: void insertComment(java.lang.String)>("Optional:");

     label7:
        return i4;
    }

    private java.lang.String getItemNameOrType(org.apache.xmlbeans.SchemaParticle, org.apache.xmlbeans.XmlCursor)
    {
        org.apache.xmlbeans.XmlCursor r8;
        org.apache.xmlbeans.SchemaParticle r0;
        org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil r1;
        java.lang.StringBuffer $r2, $r3, $r6, $r7;
        int $i0, $i1;
        javax.xml.namespace.QName $r4;
        java.lang.String $r5, r9;

        r1 := @this: org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil;

        r0 := @parameter0: org.apache.xmlbeans.SchemaParticle;

        r8 := @parameter1: org.apache.xmlbeans.XmlCursor;

        $i0 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: int getParticleType()>();

        if $i0 != 4 goto label1;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Element (");

        $r4 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: javax.xml.namespace.QName getName()>();

        $r5 = virtualinvoke $r4.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $r6 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label2;

     label1:
        $i1 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: int getParticleType()>();

        r9 = specialinvoke r1.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: java.lang.String printParticleType(int)>($i1);

     label2:
        return r9;
    }

    private void processElement(org.apache.xmlbeans.SchemaParticle, org.apache.xmlbeans.XmlCursor, boolean)
    {
        org.apache.xmlbeans.XmlCursor r3;
        org.apache.xmlbeans.SchemaParticle r0;
        org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil r2;
        int $i0, $i1;
        org.apache.xmlbeans.SchemaLocalElement r1;
        javax.xml.namespace.QName $r4, $r6, $r9;
        java.lang.String $r5, $r7, $r10;
        org.apache.xmlbeans.SchemaType $r8;
        boolean $z0, z1;

        r2 := @this: org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil;

        r0 := @parameter0: org.apache.xmlbeans.SchemaParticle;

        r3 := @parameter1: org.apache.xmlbeans.XmlCursor;

        z1 := @parameter2: boolean;

        r1 = (org.apache.xmlbeans.SchemaLocalElement) r0;

        $z0 = r2.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: boolean _soapEnc>;

        if $z0 == 0 goto label1;

        $r9 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaLocalElement: javax.xml.namespace.QName getName()>();

        $r10 = virtualinvoke $r9.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        interfaceinvoke r3.<org.apache.xmlbeans.XmlCursor: void insertElement(java.lang.String)>($r10);

        goto label2;

     label1:
        $r4 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaLocalElement: javax.xml.namespace.QName getName()>();

        $r5 = virtualinvoke $r4.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $r6 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaLocalElement: javax.xml.namespace.QName getName()>();

        $r7 = virtualinvoke $r6.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        interfaceinvoke r3.<org.apache.xmlbeans.XmlCursor: void insertElement(java.lang.String,java.lang.String)>($r5, $r7);

     label2:
        $i0 = r2.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: int _nElements>;

        $i1 = $i0 + 1;

        r2.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: int _nElements> = $i1;

        interfaceinvoke r3.<org.apache.xmlbeans.XmlCursor: org.apache.xmlbeans.XmlCursor$TokenType toPrevToken()>();

        $r8 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaLocalElement: org.apache.xmlbeans.SchemaType getType()>();

        specialinvoke r2.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: void createSampleForType(org.apache.xmlbeans.SchemaType,org.apache.xmlbeans.XmlCursor)>($r8, r3);

        interfaceinvoke r3.<org.apache.xmlbeans.XmlCursor: org.apache.xmlbeans.XmlCursor$TokenType toNextToken()>();

        return;
    }

    private void moveToken(int, org.apache.xmlbeans.XmlCursor)
    {
        org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil r1;
        org.apache.xmlbeans.XmlCursor r0;
        int i0, $i1, i2;

        r1 := @this: org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil;

        i0 := @parameter0: int;

        r0 := @parameter1: org.apache.xmlbeans.XmlCursor;

        i2 = 0;

     label1:
        $i1 = staticinvoke <java.lang.Math: int abs(int)>(i0);

        if i2 >= $i1 goto label4;

        if i0 >= 0 goto label2;

        interfaceinvoke r0.<org.apache.xmlbeans.XmlCursor: org.apache.xmlbeans.XmlCursor$TokenType toPrevToken()>();

        goto label3;

     label2:
        interfaceinvoke r0.<org.apache.xmlbeans.XmlCursor: org.apache.xmlbeans.XmlCursor$TokenType toNextToken()>();

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        return;
    }

    private static final java.lang.String formatQName(org.apache.xmlbeans.XmlCursor, javax.xml.namespace.QName)
    {
        org.apache.xmlbeans.XmlCursor r0, $r1;
        java.lang.StringBuffer $r5, $r6, $r7, $r9;
        int $i0;
        javax.xml.namespace.QName r2;
        java.lang.String $r3, $r4, $r8, r10;

        r0 := @parameter0: org.apache.xmlbeans.XmlCursor;

        r2 := @parameter1: javax.xml.namespace.QName;

        $r1 = interfaceinvoke r0.<org.apache.xmlbeans.XmlCursor: org.apache.xmlbeans.XmlCursor newCursor()>();

        interfaceinvoke $r1.<org.apache.xmlbeans.XmlCursor: boolean toParent()>();

        $r3 = virtualinvoke r2.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $r4 = interfaceinvoke $r1.<org.apache.xmlbeans.XmlCursor: java.lang.String prefixForNamespace(java.lang.String)>($r3);

        interfaceinvoke $r1.<org.apache.xmlbeans.XmlCursor: void dispose()>();

        if $r4 == null goto label1;

        $i0 = virtualinvoke $r4.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        r10 = virtualinvoke r2.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        goto label3;

     label2:
        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        $r8 = virtualinvoke r2.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

     label3:
        return r10;
    }

    private void processAttributes(org.apache.xmlbeans.SchemaType, org.apache.xmlbeans.XmlCursor)
    {
        org.apache.xmlbeans.SchemaProperty[] $r27;
        org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil r0;
        org.apache.xmlbeans.SchemaProperty r2;
        org.apache.xmlbeans.SchemaType r1, $r6;
        boolean $z0, $z1, $z2, $z3;
        org.apache.xmlbeans.SchemaLocalAttribute $r13;
        java.util.Set $r7;
        javax.xml.namespace.QName $r5, $r8, $r9, $r10, $r12, $r16, $r18, $r24, $r25;
        org.apache.xmlbeans.XmlCursor r4;
        java.lang.StringBuffer $r17, $r20, $r22;
        int i0, $i1;
        java.lang.String $r3, $r19, $r21, $r23, $r26, $r28;
        org.apache.xmlbeans.soap.SOAPArrayType $r15;
        org.apache.xmlbeans.soap.SchemaWSDLArrayType $r14;
        org.apache.xmlbeans.SchemaAttributeModel $r11;

        r0 := @this: org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil;

        r1 := @parameter0: org.apache.xmlbeans.SchemaType;

        r4 := @parameter1: org.apache.xmlbeans.XmlCursor;

        $z0 = r0.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: boolean _soapEnc>;

        if $z0 == 0 goto label1;

        $r24 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaType: javax.xml.namespace.QName getName()>();

        if $r24 == null goto label1;

        $r25 = <org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: javax.xml.namespace.QName XSI_TYPE>;

        $r26 = staticinvoke <org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: java.lang.String formatQName(org.apache.xmlbeans.XmlCursor,javax.xml.namespace.QName)>(r4, $r24);

        interfaceinvoke r4.<org.apache.xmlbeans.XmlCursor: void insertAttributeWithValue(javax.xml.namespace.QName,java.lang.String)>($r25, $r26);

     label1:
        $r27 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaProperty[] getAttributeProperties()>();

        i0 = 0;

     label2:
        $i1 = lengthof $r27;

        if i0 >= $i1 goto label8;

        r2 = $r27[i0];

        $z1 = r0.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: boolean _soapEnc>;

        if $z1 == 0 goto label4;

        $r7 = <org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: java.util.Set SKIPPED_SOAP_ATTRS>;

        $r8 = interfaceinvoke r2.<org.apache.xmlbeans.SchemaProperty: javax.xml.namespace.QName getName()>();

        $z2 = interfaceinvoke $r7.<java.util.Set: boolean contains(java.lang.Object)>($r8);

        if $z2 == 0 goto label3;

        goto label7;

     label3:
        $r9 = <org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: javax.xml.namespace.QName ENC_ARRAYTYPE>;

        $r10 = interfaceinvoke r2.<org.apache.xmlbeans.SchemaProperty: javax.xml.namespace.QName getName()>();

        $z3 = virtualinvoke $r9.<javax.xml.namespace.QName: boolean equals(java.lang.Object)>($r10);

        if $z3 == 0 goto label4;

        $r11 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaAttributeModel getAttributeModel()>();

        $r12 = interfaceinvoke r2.<org.apache.xmlbeans.SchemaProperty: javax.xml.namespace.QName getName()>();

        $r13 = interfaceinvoke $r11.<org.apache.xmlbeans.SchemaAttributeModel: org.apache.xmlbeans.SchemaLocalAttribute getAttribute(javax.xml.namespace.QName)>($r12);

        $r14 = (org.apache.xmlbeans.soap.SchemaWSDLArrayType) $r13;

        $r15 = interfaceinvoke $r14.<org.apache.xmlbeans.soap.SchemaWSDLArrayType: org.apache.xmlbeans.soap.SOAPArrayType getWSDLArrayType()>();

        if $r15 == null goto label7;

        $r16 = interfaceinvoke r2.<org.apache.xmlbeans.SchemaProperty: javax.xml.namespace.QName getName()>();

        $r17 = new java.lang.StringBuffer;

        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        $r18 = virtualinvoke $r15.<org.apache.xmlbeans.soap.SOAPArrayType: javax.xml.namespace.QName getQName()>();

        $r19 = staticinvoke <org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: java.lang.String formatQName(org.apache.xmlbeans.XmlCursor,javax.xml.namespace.QName)>(r4, $r18);

        $r20 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r15.<org.apache.xmlbeans.soap.SOAPArrayType: java.lang.String soap11DimensionString()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke r4.<org.apache.xmlbeans.XmlCursor: void insertAttributeWithValue(javax.xml.namespace.QName,java.lang.String)>($r16, $r23);

        goto label7;

     label4:
        $r3 = interfaceinvoke r2.<org.apache.xmlbeans.SchemaProperty: java.lang.String getDefaultText()>();

        $r5 = interfaceinvoke r2.<org.apache.xmlbeans.SchemaProperty: javax.xml.namespace.QName getName()>();

        if $r3 != null goto label5;

        $r6 = interfaceinvoke r2.<org.apache.xmlbeans.SchemaProperty: org.apache.xmlbeans.SchemaType getType()>();

        $r28 = specialinvoke r0.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: java.lang.String sampleDataForSimpleType(org.apache.xmlbeans.SchemaType)>($r6);

        goto label6;

     label5:
        $r28 = $r3;

     label6:
        interfaceinvoke r4.<org.apache.xmlbeans.XmlCursor: void insertAttributeWithValue(javax.xml.namespace.QName,java.lang.String)>($r5, $r28);

     label7:
        i0 = i0 + 1;

        goto label2;

     label8:
        return;
    }

    private void processSequence(org.apache.xmlbeans.SchemaParticle, org.apache.xmlbeans.XmlCursor, boolean)
    {
        org.apache.xmlbeans.SchemaParticle[] $r1;
        org.apache.xmlbeans.XmlCursor r3;
        java.lang.String[] $r5;
        org.apache.xmlbeans.SchemaParticle r0, $r4;
        org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil r2;
        int $i0, $i1, $i2, i3;
        java.lang.String $r6;
        boolean z0;

        r2 := @this: org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil;

        r0 := @parameter0: org.apache.xmlbeans.SchemaParticle;

        r3 := @parameter1: org.apache.xmlbeans.XmlCursor;

        z0 := @parameter2: boolean;

        $r1 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: org.apache.xmlbeans.SchemaParticle[] getParticleChildren()>();

        i3 = 0;

     label1:
        $i0 = lengthof $r1;

        if i3 >= $i0 goto label3;

        $r4 = $r1[i3];

        specialinvoke r2.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: void processParticle(org.apache.xmlbeans.SchemaParticle,org.apache.xmlbeans.XmlCursor,boolean)>($r4, r3, z0);

        if z0 == 0 goto label2;

        $i1 = lengthof $r1;

        $i2 = $i1 - 1;

        if i3 >= $i2 goto label2;

        $r5 = <org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: java.lang.String[] WORDS>;

        $r6 = specialinvoke r2.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: java.lang.String pick(java.lang.String[])>($r5);

        interfaceinvoke r3.<org.apache.xmlbeans.XmlCursor: void insertChars(java.lang.String)>($r6);

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return;
    }

    private void processChoice(org.apache.xmlbeans.SchemaParticle, org.apache.xmlbeans.XmlCursor, boolean)
    {
        org.apache.xmlbeans.SchemaParticle[] $r1;
        org.apache.xmlbeans.XmlCursor r2;
        org.apache.xmlbeans.SchemaParticle r0, $r10;
        org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil r9;
        java.lang.StringBuffer $r3, $r4, $r6, $r7;
        int $i0, $i1, i2;
        java.lang.String $r5, $r8;
        boolean z0;

        r9 := @this: org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil;

        r0 := @parameter0: org.apache.xmlbeans.SchemaParticle;

        r2 := @parameter1: org.apache.xmlbeans.XmlCursor;

        z0 := @parameter2: boolean;

        $r1 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: org.apache.xmlbeans.SchemaParticle[] getParticleChildren()>();

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("You have a CHOICE of the next ");

        $i0 = lengthof $r1;

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0);

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" items at this level");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke r2.<org.apache.xmlbeans.XmlCursor: void insertComment(java.lang.String)>($r8);

        i2 = 0;

     label1:
        $i1 = lengthof $r1;

        if i2 >= $i1 goto label2;

        $r10 = $r1[i2];

        specialinvoke r9.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: void processParticle(org.apache.xmlbeans.SchemaParticle,org.apache.xmlbeans.XmlCursor,boolean)>($r10, r2, z0);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    private void processAll(org.apache.xmlbeans.SchemaParticle, org.apache.xmlbeans.XmlCursor, boolean)
    {
        org.apache.xmlbeans.SchemaParticle[] $r1;
        org.apache.xmlbeans.XmlCursor r3;
        java.lang.String[] $r5;
        org.apache.xmlbeans.SchemaParticle r0, $r4;
        org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil r2;
        int $i0, $i1, $i2, i3;
        java.lang.String $r6;
        boolean z0;

        r2 := @this: org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil;

        r0 := @parameter0: org.apache.xmlbeans.SchemaParticle;

        r3 := @parameter1: org.apache.xmlbeans.XmlCursor;

        z0 := @parameter2: boolean;

        $r1 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: org.apache.xmlbeans.SchemaParticle[] getParticleChildren()>();

        i3 = 0;

     label1:
        $i0 = lengthof $r1;

        if i3 >= $i0 goto label3;

        $r4 = $r1[i3];

        specialinvoke r2.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: void processParticle(org.apache.xmlbeans.SchemaParticle,org.apache.xmlbeans.XmlCursor,boolean)>($r4, r3, z0);

        if z0 == 0 goto label2;

        $i1 = lengthof $r1;

        $i2 = $i1 - 1;

        if i3 >= $i2 goto label2;

        $r5 = <org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: java.lang.String[] WORDS>;

        $r6 = specialinvoke r2.<org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: java.lang.String pick(java.lang.String[])>($r5);

        interfaceinvoke r3.<org.apache.xmlbeans.XmlCursor: void insertChars(java.lang.String)>($r6);

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return;
    }

    private void processWildCard(org.apache.xmlbeans.SchemaParticle, org.apache.xmlbeans.XmlCursor, boolean)
    {
        org.apache.xmlbeans.SchemaParticle r2;
        org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil r1;
        org.apache.xmlbeans.XmlCursor r0;
        boolean z0;

        r1 := @this: org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil;

        r2 := @parameter0: org.apache.xmlbeans.SchemaParticle;

        r0 := @parameter1: org.apache.xmlbeans.XmlCursor;

        z0 := @parameter2: boolean;

        interfaceinvoke r0.<org.apache.xmlbeans.XmlCursor: void insertComment(java.lang.String)>("You may enter ANY elements at this point");

        interfaceinvoke r0.<org.apache.xmlbeans.XmlCursor: void insertElement(java.lang.String)>("AnyElement");

        return;
    }

    private static javax.xml.namespace.QName getClosestName(org.apache.xmlbeans.SchemaType)
    {
        javax.xml.namespace.QName $r0, $r1;
        org.apache.xmlbeans.SchemaType r2;

        r2 := @parameter0: org.apache.xmlbeans.SchemaType;

     label1:
        $r0 = interfaceinvoke r2.<org.apache.xmlbeans.SchemaType: javax.xml.namespace.QName getName()>();

        if $r0 != null goto label2;

        r2 = interfaceinvoke r2.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType getBaseType()>();

        goto label1;

     label2:
        $r1 = interfaceinvoke r2.<org.apache.xmlbeans.SchemaType: javax.xml.namespace.QName getName()>();

        return $r1;
    }

    private java.lang.String printParticleType(int)
    {
        org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil r1;
        java.lang.StringBuffer $r0;
        int i0;
        java.lang.String $r2;

        r1 := @this: org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil;

        i0 := @parameter0: int;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Schema Particle Type: ");

        tableswitch(i0)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label4;
            case 4: goto label3;
            case 5: goto label5;
            default: goto label6;
        };

     label1:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("ALL\n");

        goto label7;

     label2:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("CHOICE\n");

        goto label7;

     label3:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("ELEMENT\n");

        goto label7;

     label4:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("SEQUENCE\n");

        goto label7;

     label5:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("WILDCARD\n");

        goto label7;

     label6:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Schema Particle Type Unknown");

     label7:
        $r2 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0, $r1, $r2;
        java.util.HashSet $r8;
        java.util.List $r13;
        javax.xml.namespace.QName[] $r9;
        javax.xml.namespace.QName $r3, $r4, $r5, $r6, $r7, $r10, $r11, $r12;

        <org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: int MAX_ELEMENTS> = 1000;

        $r0 = newarray (java.lang.String)[143];

        $r0[0] = "ipsa";

        $r0[1] = "iovis";

        $r0[2] = "rapidum";

        $r0[3] = "iaculata";

        $r0[4] = "e";

        $r0[5] = "nubibus";

        $r0[6] = "ignem";

        $r0[7] = "disiecitque";

        $r0[8] = "rates";

        $r0[9] = "evertitque";

        $r0[10] = "aequora";

        $r0[11] = "ventis";

        $r0[12] = "illum";

        $r0[13] = "exspirantem";

        $r0[14] = "transfixo";

        $r0[15] = "pectore";

        $r0[16] = "flammas";

        $r0[17] = "turbine";

        $r0[18] = "corripuit";

        $r0[19] = "scopuloque";

        $r0[20] = "infixit";

        $r0[21] = "acuto";

        $r0[22] = "ast";

        $r0[23] = "ego";

        $r0[24] = "quae";

        $r0[25] = "divum";

        $r0[26] = "incedo";

        $r0[27] = "regina";

        $r0[28] = "iovisque";

        $r0[29] = "et";

        $r0[30] = "soror";

        $r0[31] = "et";

        $r0[32] = "coniunx";

        $r0[33] = "una";

        $r0[34] = "cum";

        $r0[35] = "gente";

        $r0[36] = "tot";

        $r0[37] = "annos";

        $r0[38] = "bella";

        $r0[39] = "gero";

        $r0[40] = "et";

        $r0[41] = "quisquam";

        $r0[42] = "numen";

        $r0[43] = "iunonis";

        $r0[44] = "adorat";

        $r0[45] = "praeterea";

        $r0[46] = "aut";

        $r0[47] = "supplex";

        $r0[48] = "aris";

        $r0[49] = "imponet";

        $r0[50] = "honorem";

        $r0[51] = "talia";

        $r0[52] = "flammato";

        $r0[53] = "secum";

        $r0[54] = "dea";

        $r0[55] = "corde";

        $r0[56] = "volutans";

        $r0[57] = "nimborum";

        $r0[58] = "in";

        $r0[59] = "patriam";

        $r0[60] = "loca";

        $r0[61] = "feta";

        $r0[62] = "furentibus";

        $r0[63] = "austris";

        $r0[64] = "aeoliam";

        $r0[65] = "venit";

        $r0[66] = "hic";

        $r0[67] = "vasto";

        $r0[68] = "rex";

        $r0[69] = "aeolus";

        $r0[70] = "antro";

        $r0[71] = "luctantis";

        $r0[72] = "ventos";

        $r0[73] = "tempestatesque";

        $r0[74] = "sonoras";

        $r0[75] = "imperio";

        $r0[76] = "premit";

        $r0[77] = "ac";

        $r0[78] = "vinclis";

        $r0[79] = "et";

        $r0[80] = "carcere";

        $r0[81] = "frenat";

        $r0[82] = "illi";

        $r0[83] = "indignantes";

        $r0[84] = "magno";

        $r0[85] = "cum";

        $r0[86] = "murmure";

        $r0[87] = "montis";

        $r0[88] = "circum";

        $r0[89] = "claustra";

        $r0[90] = "fremunt";

        $r0[91] = "celsa";

        $r0[92] = "sedet";

        $r0[93] = "aeolus";

        $r0[94] = "arce";

        $r0[95] = "sceptra";

        $r0[96] = "tenens";

        $r0[97] = "mollitque";

        $r0[98] = "animos";

        $r0[99] = "et";

        $r0[100] = "temperat";

        $r0[101] = "iras";

        $r0[102] = "ni";

        $r0[103] = "faciat";

        $r0[104] = "maria";

        $r0[105] = "ac";

        $r0[106] = "terras";

        $r0[107] = "caelumque";

        $r0[108] = "profundum";

        $r0[109] = "quippe";

        $r0[110] = "ferant";

        $r0[111] = "rapidi";

        $r0[112] = "secum";

        $r0[113] = "verrantque";

        $r0[114] = "per";

        $r0[115] = "auras";

        $r0[116] = "sed";

        $r0[117] = "pater";

        $r0[118] = "omnipotens";

        $r0[119] = "speluncis";

        $r0[120] = "abdidit";

        $r0[121] = "atris";

        $r0[122] = "hoc";

        $r0[123] = "metuens";

        $r0[124] = "molemque";

        $r0[125] = "et";

        $r0[126] = "montis";

        $r0[127] = "insuper";

        $r0[128] = "altos";

        $r0[129] = "imposuit";

        $r0[130] = "regemque";

        $r0[131] = "dedit";

        $r0[132] = "qui";

        $r0[133] = "foedere";

        $r0[134] = "certo";

        $r0[135] = "et";

        $r0[136] = "premere";

        $r0[137] = "et";

        $r0[138] = "laxas";

        $r0[139] = "sciret";

        $r0[140] = "dare";

        $r0[141] = "iussus";

        $r0[142] = "habenas";

        <org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: java.lang.String[] WORDS> = $r0;

        $r1 = newarray (java.lang.String)[7];

        $r1[0] = "corp";

        $r1[1] = "your";

        $r1[2] = "my";

        $r1[3] = "sample";

        $r1[4] = "company";

        $r1[5] = "test";

        $r1[6] = "any";

        <org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: java.lang.String[] DNS1> = $r1;

        $r2 = newarray (java.lang.String)[9];

        $r2[0] = "com";

        $r2[1] = "org";

        $r2[2] = "com";

        $r2[3] = "gov";

        $r2[4] = "org";

        $r2[5] = "com";

        $r2[6] = "org";

        $r2[7] = "com";

        $r2[8] = "edu";

        <org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: java.lang.String[] DNS2> = $r2;

        $r3 = new javax.xml.namespace.QName;

        specialinvoke $r3.<javax.xml.namespace.QName: void <init>(java.lang.String)>("href");

        <org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: javax.xml.namespace.QName HREF> = $r3;

        $r4 = new javax.xml.namespace.QName;

        specialinvoke $r4.<javax.xml.namespace.QName: void <init>(java.lang.String)>("id");

        <org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: javax.xml.namespace.QName ID> = $r4;

        $r5 = new javax.xml.namespace.QName;

        specialinvoke $r5.<javax.xml.namespace.QName: void <init>(java.lang.String,java.lang.String)>("http://www.w3.org/2001/XMLSchema-instance", "type");

        <org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: javax.xml.namespace.QName XSI_TYPE> = $r5;

        $r6 = new javax.xml.namespace.QName;

        specialinvoke $r6.<javax.xml.namespace.QName: void <init>(java.lang.String,java.lang.String)>("http://schemas.xmlsoap.org/soap/encoding/", "arrayType");

        <org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: javax.xml.namespace.QName ENC_ARRAYTYPE> = $r6;

        $r7 = new javax.xml.namespace.QName;

        specialinvoke $r7.<javax.xml.namespace.QName: void <init>(java.lang.String,java.lang.String)>("http://schemas.xmlsoap.org/soap/encoding/", "offset");

        <org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: javax.xml.namespace.QName ENC_OFFSET> = $r7;

        $r8 = new java.util.HashSet;

        $r9 = newarray (javax.xml.namespace.QName)[3];

        $r10 = <org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: javax.xml.namespace.QName HREF>;

        $r9[0] = $r10;

        $r11 = <org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: javax.xml.namespace.QName ID>;

        $r9[1] = $r11;

        $r12 = <org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: javax.xml.namespace.QName ENC_OFFSET>;

        $r9[2] = $r12;

        $r13 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r9);

        specialinvoke $r8.<java.util.HashSet: void <init>(java.util.Collection)>($r13);

        <org.apache.xmlbeans.impl.xsd2inst.SampleXmlUtil: java.util.Set SKIPPED_SOAP_ATTRS> = $r8;

        return;
    }
}
