public class org.xmlpull.v1.builder.xpath.jaxen.pattern.PatternParser extends java.lang.Object
{
    private static final boolean TRACE;
    private static final boolean USE_HANDLER;
    static java.lang.Class class$org$xmlpull$v1$builder$xpath$jaxen$expr$DefaultStep;

    public void <init>()
    {
        org.xmlpull.v1.builder.xpath.jaxen.pattern.PatternParser r0;

        r0 := @this: org.xmlpull.v1.builder.xpath.jaxen.pattern.PatternParser;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.xmlpull.v1.builder.xpath.jaxen.pattern.Pattern parse(java.lang.String) throws org.xmlpull.v1.builder.xpath.jaxen.JaxenException, org.xmlpull.v1.builder.xpath.saxpath.SAXPathException
    {
        org.xmlpull.v1.builder.xpath.jaxen.expr.XPathExpr $r4;
        org.xmlpull.v1.builder.xpath.jaxen.expr.Expr $r5;
        org.xmlpull.v1.builder.xpath.jaxen.pattern.Pattern $r6, $r7;
        org.xmlpull.v1.builder.xpath.jaxen.expr.DefaultXPathFactory $r2;
        org.xmlpull.v1.builder.xpath.saxpath.XPathReader $r0;
        java.lang.String r3;
        org.xmlpull.v1.builder.xpath.jaxen.JaxenHandler $r1;

        r3 := @parameter0: java.lang.String;

        $r0 = staticinvoke <org.xmlpull.v1.builder.xpath.saxpath.helpers.XPathReaderFactory: org.xmlpull.v1.builder.xpath.saxpath.XPathReader createReader()>();

        $r1 = new org.xmlpull.v1.builder.xpath.jaxen.JaxenHandler;

        specialinvoke $r1.<org.xmlpull.v1.builder.xpath.jaxen.JaxenHandler: void <init>()>();

        $r2 = new org.xmlpull.v1.builder.xpath.jaxen.expr.DefaultXPathFactory;

        specialinvoke $r2.<org.xmlpull.v1.builder.xpath.jaxen.expr.DefaultXPathFactory: void <init>()>();

        virtualinvoke $r1.<org.xmlpull.v1.builder.xpath.jaxen.JaxenHandler: void setXPathFactory(org.xmlpull.v1.builder.xpath.jaxen.expr.XPathFactory)>($r2);

        interfaceinvoke $r0.<org.xmlpull.v1.builder.xpath.saxpath.SAXPathEventSource: void setXPathHandler(org.xmlpull.v1.builder.xpath.saxpath.XPathHandler)>($r1);

        interfaceinvoke $r0.<org.xmlpull.v1.builder.xpath.saxpath.XPathReader: void parse(java.lang.String)>(r3);

        $r4 = virtualinvoke $r1.<org.xmlpull.v1.builder.xpath.jaxen.JaxenHandler: org.xmlpull.v1.builder.xpath.jaxen.expr.XPathExpr getXPathExpr()>();

        $r5 = interfaceinvoke $r4.<org.xmlpull.v1.builder.xpath.jaxen.expr.XPathExpr: org.xmlpull.v1.builder.xpath.jaxen.expr.Expr getRootExpr()>();

        $r6 = staticinvoke <org.xmlpull.v1.builder.xpath.jaxen.pattern.PatternParser: org.xmlpull.v1.builder.xpath.jaxen.pattern.Pattern convertExpr(org.xmlpull.v1.builder.xpath.jaxen.expr.Expr)>($r5);

        $r7 = virtualinvoke $r6.<org.xmlpull.v1.builder.xpath.jaxen.pattern.Pattern: org.xmlpull.v1.builder.xpath.jaxen.pattern.Pattern simplify()>();

        return $r7;
    }

    protected static org.xmlpull.v1.builder.xpath.jaxen.pattern.Pattern convertExpr(org.xmlpull.v1.builder.xpath.jaxen.expr.Expr) throws org.xmlpull.v1.builder.xpath.jaxen.JaxenException
    {
        org.xmlpull.v1.builder.xpath.jaxen.expr.DefaultFilterExpr $r2;
        org.xmlpull.v1.builder.xpath.jaxen.expr.Expr r0, $r3, $r5;
        org.xmlpull.v1.builder.xpath.jaxen.pattern.Pattern $r4, $r6;
        org.xmlpull.v1.builder.xpath.jaxen.expr.FilterExpr $r9;
        boolean $z0, $z1, $z2;
        org.xmlpull.v1.builder.xpath.jaxen.expr.LocationPath $r10;
        org.xmlpull.v1.builder.xpath.jaxen.expr.UnionExpr r12;
        org.xmlpull.v1.builder.xpath.jaxen.pattern.UnionPattern $r7;
        org.xmlpull.v1.builder.xpath.jaxen.pattern.LocationPathPattern $r1, $r8, $r11;

        r0 := @parameter0: org.xmlpull.v1.builder.xpath.jaxen.expr.Expr;

        $z0 = r0 instanceof org.xmlpull.v1.builder.xpath.jaxen.expr.LocationPath;

        if $z0 == 0 goto label1;

        $r10 = (org.xmlpull.v1.builder.xpath.jaxen.expr.LocationPath) r0;

        $r11 = staticinvoke <org.xmlpull.v1.builder.xpath.jaxen.pattern.PatternParser: org.xmlpull.v1.builder.xpath.jaxen.pattern.LocationPathPattern convertExpr(org.xmlpull.v1.builder.xpath.jaxen.expr.LocationPath)>($r10);

        return $r11;

     label1:
        $z1 = r0 instanceof org.xmlpull.v1.builder.xpath.jaxen.expr.FilterExpr;

        if $z1 == 0 goto label2;

        $r8 = new org.xmlpull.v1.builder.xpath.jaxen.pattern.LocationPathPattern;

        specialinvoke $r8.<org.xmlpull.v1.builder.xpath.jaxen.pattern.LocationPathPattern: void <init>()>();

        $r9 = (org.xmlpull.v1.builder.xpath.jaxen.expr.FilterExpr) r0;

        virtualinvoke $r8.<org.xmlpull.v1.builder.xpath.jaxen.pattern.LocationPathPattern: void addFilter(org.xmlpull.v1.builder.xpath.jaxen.expr.FilterExpr)>($r9);

        return $r8;

     label2:
        $z2 = r0 instanceof org.xmlpull.v1.builder.xpath.jaxen.expr.UnionExpr;

        if $z2 == 0 goto label3;

        r12 = (org.xmlpull.v1.builder.xpath.jaxen.expr.UnionExpr) r0;

        $r3 = interfaceinvoke r12.<org.xmlpull.v1.builder.xpath.jaxen.expr.BinaryExpr: org.xmlpull.v1.builder.xpath.jaxen.expr.Expr getLHS()>();

        $r4 = staticinvoke <org.xmlpull.v1.builder.xpath.jaxen.pattern.PatternParser: org.xmlpull.v1.builder.xpath.jaxen.pattern.Pattern convertExpr(org.xmlpull.v1.builder.xpath.jaxen.expr.Expr)>($r3);

        $r5 = interfaceinvoke r12.<org.xmlpull.v1.builder.xpath.jaxen.expr.BinaryExpr: org.xmlpull.v1.builder.xpath.jaxen.expr.Expr getRHS()>();

        $r6 = staticinvoke <org.xmlpull.v1.builder.xpath.jaxen.pattern.PatternParser: org.xmlpull.v1.builder.xpath.jaxen.pattern.Pattern convertExpr(org.xmlpull.v1.builder.xpath.jaxen.expr.Expr)>($r5);

        $r7 = new org.xmlpull.v1.builder.xpath.jaxen.pattern.UnionPattern;

        specialinvoke $r7.<org.xmlpull.v1.builder.xpath.jaxen.pattern.UnionPattern: void <init>(org.xmlpull.v1.builder.xpath.jaxen.pattern.Pattern,org.xmlpull.v1.builder.xpath.jaxen.pattern.Pattern)>($r4, $r6);

        return $r7;

     label3:
        $r1 = new org.xmlpull.v1.builder.xpath.jaxen.pattern.LocationPathPattern;

        specialinvoke $r1.<org.xmlpull.v1.builder.xpath.jaxen.pattern.LocationPathPattern: void <init>()>();

        $r2 = new org.xmlpull.v1.builder.xpath.jaxen.expr.DefaultFilterExpr;

        specialinvoke $r2.<org.xmlpull.v1.builder.xpath.jaxen.expr.DefaultFilterExpr: void <init>(org.xmlpull.v1.builder.xpath.jaxen.expr.Expr)>(r0);

        virtualinvoke $r1.<org.xmlpull.v1.builder.xpath.jaxen.pattern.LocationPathPattern: void addFilter(org.xmlpull.v1.builder.xpath.jaxen.expr.FilterExpr)>($r2);

        return $r1;
    }

    protected static org.xmlpull.v1.builder.xpath.jaxen.pattern.LocationPathPattern convertExpr(org.xmlpull.v1.builder.xpath.jaxen.expr.LocationPath) throws org.xmlpull.v1.builder.xpath.jaxen.JaxenException
    {
        java.util.ListIterator $r3;
        int $i0, $i1;
        boolean $z0, $z1, $z2, z3;
        org.xmlpull.v1.builder.xpath.jaxen.expr.LocationPath r1;
        org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTypeTest $r5;
        java.util.List $r2;
        org.xmlpull.v1.builder.xpath.jaxen.expr.Step r7;
        java.lang.Object $r6;
        org.xmlpull.v1.builder.xpath.jaxen.pattern.LocationPathPattern $r0, $r4, $r8, r9;

        r1 := @parameter0: org.xmlpull.v1.builder.xpath.jaxen.expr.LocationPath;

        $r0 = new org.xmlpull.v1.builder.xpath.jaxen.pattern.LocationPathPattern;

        specialinvoke $r0.<org.xmlpull.v1.builder.xpath.jaxen.pattern.LocationPathPattern: void <init>()>();

        $r2 = interfaceinvoke r1.<org.xmlpull.v1.builder.xpath.jaxen.expr.LocationPath: java.util.List getSteps()>();

        r9 = $r0;

        z3 = 1;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.ListIterator listIterator(int)>($i0);

     label1:
        $z0 = interfaceinvoke $r3.<java.util.ListIterator: boolean hasPrevious()>();

        if $z0 == 0 goto label8;

        $r6 = interfaceinvoke $r3.<java.util.ListIterator: java.lang.Object previous()>();

        r7 = (org.xmlpull.v1.builder.xpath.jaxen.expr.Step) $r6;

        if z3 == 0 goto label2;

        z3 = 0;

        r9 = staticinvoke <org.xmlpull.v1.builder.xpath.jaxen.pattern.PatternParser: org.xmlpull.v1.builder.xpath.jaxen.pattern.LocationPathPattern convertStep(org.xmlpull.v1.builder.xpath.jaxen.pattern.LocationPathPattern,org.xmlpull.v1.builder.xpath.jaxen.expr.Step)>(r9, r7);

        goto label7;

     label2:
        $z2 = staticinvoke <org.xmlpull.v1.builder.xpath.jaxen.pattern.PatternParser: boolean navigationStep(org.xmlpull.v1.builder.xpath.jaxen.expr.Step)>(r7);

        if $z2 == 0 goto label6;

        $r8 = new org.xmlpull.v1.builder.xpath.jaxen.pattern.LocationPathPattern;

        specialinvoke $r8.<org.xmlpull.v1.builder.xpath.jaxen.pattern.LocationPathPattern: void <init>()>();

        $i1 = interfaceinvoke r7.<org.xmlpull.v1.builder.xpath.jaxen.expr.Step: int getAxis()>();

        if $i1 == 2 goto label3;

        if $i1 != 12 goto label4;

     label3:
        virtualinvoke r9.<org.xmlpull.v1.builder.xpath.jaxen.pattern.LocationPathPattern: void setAncestorPattern(org.xmlpull.v1.builder.xpath.jaxen.pattern.Pattern)>($r8);

        goto label5;

     label4:
        virtualinvoke r9.<org.xmlpull.v1.builder.xpath.jaxen.pattern.LocationPathPattern: void setParentPattern(org.xmlpull.v1.builder.xpath.jaxen.pattern.Pattern)>($r8);

     label5:
        r9 = $r8;

     label6:
        r9 = staticinvoke <org.xmlpull.v1.builder.xpath.jaxen.pattern.PatternParser: org.xmlpull.v1.builder.xpath.jaxen.pattern.LocationPathPattern convertStep(org.xmlpull.v1.builder.xpath.jaxen.pattern.LocationPathPattern,org.xmlpull.v1.builder.xpath.jaxen.expr.Step)>(r9, r7);

     label7:
        goto label1;

     label8:
        $z1 = interfaceinvoke r1.<org.xmlpull.v1.builder.xpath.jaxen.expr.LocationPath: boolean isAbsolute()>();

        if $z1 == 0 goto label9;

        $r4 = new org.xmlpull.v1.builder.xpath.jaxen.pattern.LocationPathPattern;

        $r5 = <org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTypeTest: org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTypeTest DOCUMENT_TEST>;

        specialinvoke $r4.<org.xmlpull.v1.builder.xpath.jaxen.pattern.LocationPathPattern: void <init>(org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTest)>($r5);

        virtualinvoke r9.<org.xmlpull.v1.builder.xpath.jaxen.pattern.LocationPathPattern: void setParentPattern(org.xmlpull.v1.builder.xpath.jaxen.pattern.Pattern)>($r4);

     label9:
        return $r0;
    }

    protected static org.xmlpull.v1.builder.xpath.jaxen.pattern.LocationPathPattern convertStep(org.xmlpull.v1.builder.xpath.jaxen.pattern.LocationPathPattern, org.xmlpull.v1.builder.xpath.jaxen.expr.Step) throws org.xmlpull.v1.builder.xpath.jaxen.JaxenException
    {
        org.xmlpull.v1.builder.xpath.jaxen.pattern.TextNodeTest $r17;
        org.xmlpull.v1.builder.xpath.jaxen.expr.DefaultNameStep r22;
        byte b3, b4, b5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTypeTest $r13, $r14, $r16, $r18, $r19, $r20, $r21;
        org.xmlpull.v1.builder.xpath.jaxen.pattern.NamespaceTest $r15;
        org.xmlpull.v1.builder.xpath.jaxen.JaxenException $r1;
        java.lang.StringBuffer $r2, $r3, $r4, $r5;
        int $i0, $i1, $i2;
        java.lang.String $r6, $r10, $r11;
        org.xmlpull.v1.builder.xpath.jaxen.expr.Step r0;
        org.xmlpull.v1.builder.xpath.jaxen.expr.DefaultStep $r8;
        org.xmlpull.v1.builder.xpath.jaxen.pattern.LocationPathPattern r7, $r9, $r23;
        org.xmlpull.v1.builder.xpath.jaxen.pattern.NameTest $r12;

        r7 := @parameter0: org.xmlpull.v1.builder.xpath.jaxen.pattern.LocationPathPattern;

        r0 := @parameter1: org.xmlpull.v1.builder.xpath.jaxen.expr.Step;

        $z0 = r0 instanceof org.xmlpull.v1.builder.xpath.jaxen.expr.DefaultAllNodeStep;

        if $z0 == 0 goto label03;

        $i2 = interfaceinvoke r0.<org.xmlpull.v1.builder.xpath.jaxen.expr.Step: int getAxis()>();

        if $i2 != 9 goto label01;

        $r21 = <org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTypeTest: org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTypeTest ATTRIBUTE_TEST>;

        virtualinvoke r7.<org.xmlpull.v1.builder.xpath.jaxen.pattern.LocationPathPattern: void setNodeTest(org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTest)>($r21);

        goto label02;

     label01:
        $r20 = <org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTypeTest: org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTypeTest ELEMENT_TEST>;

        virtualinvoke r7.<org.xmlpull.v1.builder.xpath.jaxen.pattern.LocationPathPattern: void setNodeTest(org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTest)>($r20);

     label02:
        goto label16;

     label03:
        $z1 = r0 instanceof org.xmlpull.v1.builder.xpath.jaxen.expr.DefaultCommentNodeStep;

        if $z1 == 0 goto label04;

        $r19 = <org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTypeTest: org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTypeTest COMMENT_TEST>;

        virtualinvoke r7.<org.xmlpull.v1.builder.xpath.jaxen.pattern.LocationPathPattern: void setNodeTest(org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTest)>($r19);

        goto label16;

     label04:
        $z2 = r0 instanceof org.xmlpull.v1.builder.xpath.jaxen.expr.DefaultProcessingInstructionNodeStep;

        if $z2 == 0 goto label05;

        $r18 = <org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTypeTest: org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTypeTest PROCESSING_INSTRUCTION_TEST>;

        virtualinvoke r7.<org.xmlpull.v1.builder.xpath.jaxen.pattern.LocationPathPattern: void setNodeTest(org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTest)>($r18);

        goto label16;

     label05:
        $z3 = r0 instanceof org.xmlpull.v1.builder.xpath.jaxen.expr.DefaultTextNodeStep;

        if $z3 == 0 goto label06;

        $r17 = <org.xmlpull.v1.builder.xpath.jaxen.pattern.TextNodeTest: org.xmlpull.v1.builder.xpath.jaxen.pattern.TextNodeTest SINGLETON>;

        virtualinvoke r7.<org.xmlpull.v1.builder.xpath.jaxen.pattern.LocationPathPattern: void setNodeTest(org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTest)>($r17);

        goto label16;

     label06:
        $z4 = r0 instanceof org.xmlpull.v1.builder.xpath.jaxen.expr.DefaultCommentNodeStep;

        if $z4 == 0 goto label07;

        $r16 = <org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTypeTest: org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTypeTest COMMENT_TEST>;

        virtualinvoke r7.<org.xmlpull.v1.builder.xpath.jaxen.pattern.LocationPathPattern: void setNodeTest(org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTest)>($r16);

        goto label16;

     label07:
        $z5 = r0 instanceof org.xmlpull.v1.builder.xpath.jaxen.expr.DefaultNameStep;

        if $z5 == 0 goto label14;

        r22 = (org.xmlpull.v1.builder.xpath.jaxen.expr.DefaultNameStep) r0;

        $r10 = virtualinvoke r22.<org.xmlpull.v1.builder.xpath.jaxen.expr.DefaultNameStep: java.lang.String getLocalName()>();

        $r11 = virtualinvoke r22.<org.xmlpull.v1.builder.xpath.jaxen.expr.DefaultNameStep: java.lang.String getPrefix()>();

        $i0 = virtualinvoke r22.<org.xmlpull.v1.builder.xpath.jaxen.expr.DefaultStep: int getAxis()>();

        b3 = 1;

        b5 = 1;

        b4 = 1;

        if $i0 != 9 goto label08;

        b3 = 2;

        b5 = 2;

        b4 = 2;

     label08:
        $z7 = virtualinvoke r22.<org.xmlpull.v1.builder.xpath.jaxen.expr.DefaultNameStep: boolean isMatchesAnyName()>();

        if $z7 == 0 goto label12;

        $i1 = virtualinvoke $r11.<java.lang.String: int length()>();

        if $i1 == 0 goto label09;

        $z8 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>("*");

        if $z8 == 0 goto label11;

     label09:
        if $i0 != 9 goto label10;

        $r14 = <org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTypeTest: org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTypeTest ATTRIBUTE_TEST>;

        virtualinvoke r7.<org.xmlpull.v1.builder.xpath.jaxen.pattern.LocationPathPattern: void setNodeTest(org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTest)>($r14);

        goto label13;

     label10:
        $r13 = <org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTypeTest: org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTypeTest ELEMENT_TEST>;

        virtualinvoke r7.<org.xmlpull.v1.builder.xpath.jaxen.pattern.LocationPathPattern: void setNodeTest(org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTest)>($r13);

        goto label13;

     label11:
        $r15 = new org.xmlpull.v1.builder.xpath.jaxen.pattern.NamespaceTest;

        specialinvoke $r15.<org.xmlpull.v1.builder.xpath.jaxen.pattern.NamespaceTest: void <init>(java.lang.String,short)>($r11, b5);

        virtualinvoke r7.<org.xmlpull.v1.builder.xpath.jaxen.pattern.LocationPathPattern: void setNodeTest(org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTest)>($r15);

        goto label13;

     label12:
        $r12 = new org.xmlpull.v1.builder.xpath.jaxen.pattern.NameTest;

        specialinvoke $r12.<org.xmlpull.v1.builder.xpath.jaxen.pattern.NameTest: void <init>(java.lang.String,short)>($r10, b4);

        virtualinvoke r7.<org.xmlpull.v1.builder.xpath.jaxen.pattern.LocationPathPattern: void setNodeTest(org.xmlpull.v1.builder.xpath.jaxen.pattern.NodeTest)>($r12);

     label13:
        $r23 = staticinvoke <org.xmlpull.v1.builder.xpath.jaxen.pattern.PatternParser: org.xmlpull.v1.builder.xpath.jaxen.pattern.LocationPathPattern convertDefaultStep(org.xmlpull.v1.builder.xpath.jaxen.pattern.LocationPathPattern,org.xmlpull.v1.builder.xpath.jaxen.expr.DefaultStep)>(r7, r22);

        return $r23;

     label14:
        $z6 = r0 instanceof org.xmlpull.v1.builder.xpath.jaxen.expr.DefaultStep;

        if $z6 == 0 goto label15;

        $r8 = (org.xmlpull.v1.builder.xpath.jaxen.expr.DefaultStep) r0;

        $r9 = staticinvoke <org.xmlpull.v1.builder.xpath.jaxen.pattern.PatternParser: org.xmlpull.v1.builder.xpath.jaxen.pattern.LocationPathPattern convertDefaultStep(org.xmlpull.v1.builder.xpath.jaxen.pattern.LocationPathPattern,org.xmlpull.v1.builder.xpath.jaxen.expr.DefaultStep)>(r7, $r8);

        return $r9;

     label15:
        $r1 = new org.xmlpull.v1.builder.xpath.jaxen.JaxenException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Cannot convert: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" to a Pattern");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<org.xmlpull.v1.builder.xpath.jaxen.JaxenException: void <init>(java.lang.String)>($r6);

        throw $r1;

     label16:
        return r7;
    }

    protected static org.xmlpull.v1.builder.xpath.jaxen.pattern.LocationPathPattern convertDefaultStep(org.xmlpull.v1.builder.xpath.jaxen.pattern.LocationPathPattern, org.xmlpull.v1.builder.xpath.jaxen.expr.DefaultStep) throws org.xmlpull.v1.builder.xpath.jaxen.JaxenException
    {
        org.xmlpull.v1.builder.xpath.jaxen.expr.DefaultFilterExpr $r3;
        java.util.Iterator $r4;
        java.util.List $r1;
        org.xmlpull.v1.builder.xpath.jaxen.expr.DefaultStep r0;
        java.lang.Object $r5;
        org.xmlpull.v1.builder.xpath.jaxen.pattern.LocationPathPattern r2;
        org.xmlpull.v1.builder.xpath.jaxen.expr.Predicate $r6;
        boolean $z0, $z1;

        r2 := @parameter0: org.xmlpull.v1.builder.xpath.jaxen.pattern.LocationPathPattern;

        r0 := @parameter1: org.xmlpull.v1.builder.xpath.jaxen.expr.DefaultStep;

        $r1 = virtualinvoke r0.<org.xmlpull.v1.builder.xpath.jaxen.expr.DefaultStep: java.util.List getPredicates()>();

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label3;

        $r3 = new org.xmlpull.v1.builder.xpath.jaxen.expr.DefaultFilterExpr;

        specialinvoke $r3.<org.xmlpull.v1.builder.xpath.jaxen.expr.DefaultFilterExpr: void <init>()>();

        $r4 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (org.xmlpull.v1.builder.xpath.jaxen.expr.Predicate) $r5;

        virtualinvoke $r3.<org.xmlpull.v1.builder.xpath.jaxen.expr.DefaultFilterExpr: void addPredicate(org.xmlpull.v1.builder.xpath.jaxen.expr.Predicate)>($r6);

        goto label1;

     label2:
        virtualinvoke r2.<org.xmlpull.v1.builder.xpath.jaxen.pattern.LocationPathPattern: void addFilter(org.xmlpull.v1.builder.xpath.jaxen.expr.FilterExpr)>($r3);

     label3:
        return r2;
    }

    protected static boolean navigationStep(org.xmlpull.v1.builder.xpath.jaxen.expr.Step)
    {
        java.util.List $r4;
        org.xmlpull.v1.builder.xpath.jaxen.expr.Step r0;
        org.xmlpull.v1.builder.xpath.jaxen.expr.DefaultStep r3;
        java.lang.Class $r1, $r2, $r5;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: org.xmlpull.v1.builder.xpath.jaxen.expr.Step;

        $z0 = r0 instanceof org.xmlpull.v1.builder.xpath.jaxen.expr.DefaultNameStep;

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = <org.xmlpull.v1.builder.xpath.jaxen.pattern.PatternParser: java.lang.Class class$org$xmlpull$v1$builder$xpath$jaxen$expr$DefaultStep>;

        if $r2 != null goto label2;

        $r5 = staticinvoke <org.xmlpull.v1.builder.xpath.jaxen.pattern.PatternParser: java.lang.Class class$(java.lang.String)>("org.xmlpull.v1.builder.xpath.jaxen.expr.DefaultStep");

        <org.xmlpull.v1.builder.xpath.jaxen.pattern.PatternParser: java.lang.Class class$org$xmlpull$v1$builder$xpath$jaxen$expr$DefaultStep> = $r5;

        goto label3;

     label2:
        $r5 = <org.xmlpull.v1.builder.xpath.jaxen.pattern.PatternParser: java.lang.Class class$org$xmlpull$v1$builder$xpath$jaxen$expr$DefaultStep>;

     label3:
        $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        if $z1 == 0 goto label6;

        r3 = (org.xmlpull.v1.builder.xpath.jaxen.expr.DefaultStep) r0;

        $r4 = interfaceinvoke r0.<org.xmlpull.v1.builder.xpath.jaxen.expr.Predicated: java.util.List getPredicates()>();

        $z2 = interfaceinvoke $r4.<java.util.List: boolean isEmpty()>();

        if $z2 != 0 goto label4;

        $z3 = 1;

        goto label5;

     label4:
        $z3 = 0;

     label5:
        return $z3;

     label6:
        return 1;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    public static void <clinit>()
    {
        <org.xmlpull.v1.builder.xpath.jaxen.pattern.PatternParser: boolean USE_HANDLER> = 0;

        <org.xmlpull.v1.builder.xpath.jaxen.pattern.PatternParser: boolean TRACE> = 0;

        return;
    }
}
