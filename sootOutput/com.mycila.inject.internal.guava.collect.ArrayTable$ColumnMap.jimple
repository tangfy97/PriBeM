class com.mycila.inject.internal.guava.collect.ArrayTable$ColumnMap extends java.util.AbstractMap
{
    transient com.mycila.inject.internal.guava.collect.ArrayTable$ColumnMapEntrySet entrySet;
    final com.mycila.inject.internal.guava.collect.ArrayTable this$0;

    private void <init>(com.mycila.inject.internal.guava.collect.ArrayTable)
    {
        com.mycila.inject.internal.guava.collect.ArrayTable r1;
        com.mycila.inject.internal.guava.collect.ArrayTable$ColumnMap r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ArrayTable$ColumnMap;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.ArrayTable;

        r0.<com.mycila.inject.internal.guava.collect.ArrayTable$ColumnMap: com.mycila.inject.internal.guava.collect.ArrayTable this$0> = r1;

        specialinvoke r0.<java.util.AbstractMap: void <init>()>();

        return;
    }

    public java.util.Set entrySet()
    {
        com.mycila.inject.internal.guava.collect.ArrayTable$ColumnMapEntrySet r1, $r3;
        com.mycila.inject.internal.guava.collect.ArrayTable $r2;
        com.mycila.inject.internal.guava.collect.ArrayTable$ColumnMap r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ArrayTable$ColumnMap;

        r1 = r0.<com.mycila.inject.internal.guava.collect.ArrayTable$ColumnMap: com.mycila.inject.internal.guava.collect.ArrayTable$ColumnMapEntrySet entrySet>;

        if r1 != null goto label1;

        $r3 = new com.mycila.inject.internal.guava.collect.ArrayTable$ColumnMapEntrySet;

        $r2 = r0.<com.mycila.inject.internal.guava.collect.ArrayTable$ColumnMap: com.mycila.inject.internal.guava.collect.ArrayTable this$0>;

        specialinvoke $r3.<com.mycila.inject.internal.guava.collect.ArrayTable$ColumnMapEntrySet: void <init>(com.mycila.inject.internal.guava.collect.ArrayTable,com.mycila.inject.internal.guava.collect.ArrayTable$1)>($r2, null);

        r0.<com.mycila.inject.internal.guava.collect.ArrayTable$ColumnMap: com.mycila.inject.internal.guava.collect.ArrayTable$ColumnMapEntrySet entrySet> = $r3;

        goto label2;

     label1:
        $r3 = r1;

     label2:
        return $r3;
    }

    public java.util.Map get(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.ImmutableMap $r2;
        java.lang.Integer r5;
        com.mycila.inject.internal.guava.collect.ArrayTable$Column $r7;
        com.mycila.inject.internal.guava.collect.ArrayTable $r1, $r6;
        int $i0;
        java.lang.Object r3, $r4;
        com.mycila.inject.internal.guava.collect.ArrayTable$ColumnMap r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ArrayTable$ColumnMap;

        r3 := @parameter0: java.lang.Object;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.ArrayTable$ColumnMap: com.mycila.inject.internal.guava.collect.ArrayTable this$0>;

        $r2 = staticinvoke <com.mycila.inject.internal.guava.collect.ArrayTable: com.mycila.inject.internal.guava.collect.ImmutableMap access$500(com.mycila.inject.internal.guava.collect.ArrayTable)>($r1);

        $r4 = virtualinvoke $r2.<com.mycila.inject.internal.guava.collect.ImmutableMap: java.lang.Object get(java.lang.Object)>(r3);

        r5 = (java.lang.Integer) $r4;

        if r5 != null goto label1;

        $r7 = null;

        goto label2;

     label1:
        $r7 = new com.mycila.inject.internal.guava.collect.ArrayTable$Column;

        $r6 = r0.<com.mycila.inject.internal.guava.collect.ArrayTable$ColumnMap: com.mycila.inject.internal.guava.collect.ArrayTable this$0>;

        $i0 = virtualinvoke r5.<java.lang.Integer: int intValue()>();

        specialinvoke $r7.<com.mycila.inject.internal.guava.collect.ArrayTable$Column: void <init>(com.mycila.inject.internal.guava.collect.ArrayTable,int)>($r6, $i0);

     label2:
        return $r7;
    }

    public boolean containsKey(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.ArrayTable $r2;
        java.lang.Object r1;
        com.mycila.inject.internal.guava.collect.ArrayTable$ColumnMap r0;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ArrayTable$ColumnMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.mycila.inject.internal.guava.collect.ArrayTable$ColumnMap: com.mycila.inject.internal.guava.collect.ArrayTable this$0>;

        $z0 = virtualinvoke $r2.<com.mycila.inject.internal.guava.collect.ArrayTable: boolean containsColumn(java.lang.Object)>(r1);

        return $z0;
    }

    public java.util.Set keySet()
    {
        com.mycila.inject.internal.guava.collect.ArrayTable $r1;
        com.mycila.inject.internal.guava.collect.ArrayTable$ColumnMap r0;
        com.mycila.inject.internal.guava.collect.ImmutableSet $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.ArrayTable$ColumnMap;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.ArrayTable$ColumnMap: com.mycila.inject.internal.guava.collect.ArrayTable this$0>;

        $r2 = virtualinvoke $r1.<com.mycila.inject.internal.guava.collect.ArrayTable: com.mycila.inject.internal.guava.collect.ImmutableSet columnKeySet()>();

        return $r2;
    }

    public java.util.Map remove(java.lang.Object)
    {
        java.lang.UnsupportedOperationException $r0;
        java.lang.Object r2;
        com.mycila.inject.internal.guava.collect.ArrayTable$ColumnMap r1;

        r1 := @this: com.mycila.inject.internal.guava.collect.ArrayTable$ColumnMap;

        r2 := @parameter0: java.lang.Object;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public volatile java.lang.Object remove(java.lang.Object)
    {
        java.lang.Object r1;
        com.mycila.inject.internal.guava.collect.ArrayTable$ColumnMap r0;
        java.util.Map $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.ArrayTable$ColumnMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ArrayTable$ColumnMap: java.util.Map remove(java.lang.Object)>(r1);

        return $r2;
    }

    public volatile java.lang.Object get(java.lang.Object)
    {
        java.lang.Object r1;
        com.mycila.inject.internal.guava.collect.ArrayTable$ColumnMap r0;
        java.util.Map $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.ArrayTable$ColumnMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ArrayTable$ColumnMap: java.util.Map get(java.lang.Object)>(r1);

        return $r2;
    }

    void <init>(com.mycila.inject.internal.guava.collect.ArrayTable, com.mycila.inject.internal.guava.collect.ArrayTable$1)
    {
        com.mycila.inject.internal.guava.collect.ArrayTable r1;
        com.mycila.inject.internal.guava.collect.ArrayTable$1 r2;
        com.mycila.inject.internal.guava.collect.ArrayTable$ColumnMap r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ArrayTable$ColumnMap;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.ArrayTable;

        r2 := @parameter1: com.mycila.inject.internal.guava.collect.ArrayTable$1;

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.ArrayTable$ColumnMap: void <init>(com.mycila.inject.internal.guava.collect.ArrayTable)>(r1);

        return;
    }
}
