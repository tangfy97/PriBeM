public final class org.waveprotocol.wave.model.schema.conversation.ConversationSchemas extends java.lang.Object implements org.waveprotocol.wave.model.schema.SchemaProvider
{
    private final org.waveprotocol.wave.model.util.StringMap schemas;
    public static final org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema BLIP_SCHEMA_CONSTRAINTS;
    public static final org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema MANIFEST_SCHEMA_CONSTRAINTS;

    public void <init>()
    {
        org.waveprotocol.wave.model.schema.conversation.ConversationSchemas r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema $r2;
        org.waveprotocol.wave.model.util.StringMap $r1, $r3;

        r0 := @this: org.waveprotocol.wave.model.schema.conversation.ConversationSchemas;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringMap createStringMap()>();

        r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas: org.waveprotocol.wave.model.util.StringMap schemas> = $r1;

        $r3 = r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas: org.waveprotocol.wave.model.util.StringMap schemas>;

        $r2 = <org.waveprotocol.wave.model.schema.conversation.ConversationSchemas: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema MANIFEST_SCHEMA_CONSTRAINTS>;

        interfaceinvoke $r3.<org.waveprotocol.wave.model.util.StringMap: void put(java.lang.String,java.lang.Object)>("conversation", $r2);

        return;
    }

    public org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema getSchemaForId(org.waveprotocol.wave.model.id.WaveletId, java.lang.String)
    {
        org.waveprotocol.wave.model.schema.conversation.ConversationSchemas r3;
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema $r1, $r7, $r8;
        org.waveprotocol.wave.model.id.WaveletId r0;
        org.waveprotocol.wave.model.util.StringMap $r4, $r5;
        java.lang.Object $r6;
        java.lang.String r2;
        boolean $z0, $z1, $z2;

        r3 := @this: org.waveprotocol.wave.model.schema.conversation.ConversationSchemas;

        r0 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        r2 := @parameter1: java.lang.String;

        $z0 = staticinvoke <org.waveprotocol.wave.model.id.IdUtil: boolean isConversationalId(org.waveprotocol.wave.model.id.WaveletId)>(r0);

        if $z0 == 0 goto label2;

        $z1 = staticinvoke <org.waveprotocol.wave.model.id.IdUtil: boolean isBlipId(java.lang.String)>(r2);

        if $z1 == 0 goto label1;

        $r8 = <org.waveprotocol.wave.model.schema.conversation.ConversationSchemas: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema BLIP_SCHEMA_CONSTRAINTS>;

        return $r8;

     label1:
        $r4 = r3.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas: org.waveprotocol.wave.model.util.StringMap schemas>;

        $z2 = interfaceinvoke $r4.<org.waveprotocol.wave.model.util.StringMap: boolean containsKey(java.lang.String)>(r2);

        if $z2 == 0 goto label2;

        $r5 = r3.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas: org.waveprotocol.wave.model.util.StringMap schemas>;

        $r6 = interfaceinvoke $r5.<org.waveprotocol.wave.model.util.StringMap: java.lang.Object get(java.lang.String)>(r2);

        $r7 = (org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema) $r6;

        return $r7;

     label2:
        $r1 = <org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema NO_SCHEMA_CONSTRAINTS>;

        return $r1;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$1 $r1;
        org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema $r0;

        $r0 = new org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema;

        specialinvoke $r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void <init>()>();

        <org.waveprotocol.wave.model.schema.conversation.ConversationSchemas: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema BLIP_SCHEMA_CONSTRAINTS> = $r0;

        $r1 = new org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$1;

        specialinvoke $r1.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$1: void <init>()>();

        <org.waveprotocol.wave.model.schema.conversation.ConversationSchemas: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema MANIFEST_SCHEMA_CONSTRAINTS> = $r1;

        return;
    }
}
