final class org.waveprotocol.wave.model.schema.supplement.UserDataSchemas$6 extends org.waveprotocol.wave.model.schema.AbstractXmlSchemaConstraints
{

    void <init>()
    {
        java.lang.String[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        org.waveprotocol.wave.model.schema.supplement.UserDataSchemas$6 r0;

        r0 := @this: org.waveprotocol.wave.model.schema.supplement.UserDataSchemas$6;

        specialinvoke r0.<org.waveprotocol.wave.model.schema.AbstractXmlSchemaConstraints: void <init>()>();

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = "wavelet";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.supplement.UserDataSchemas$6: void addChildren(java.lang.String,java.lang.String[])>(null, $r1);

        $r2 = newarray (java.lang.String)[1];

        $r2[0] = "blip";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.supplement.UserDataSchemas$6: void addChildren(java.lang.String,java.lang.String[])>("wavelet", $r2);

        $r3 = newarray (java.lang.String)[1];

        $r3[0] = "participants";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.supplement.UserDataSchemas$6: void addChildren(java.lang.String,java.lang.String[])>("wavelet", $r3);

        $r4 = newarray (java.lang.String)[1];

        $r4[0] = "all";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.supplement.UserDataSchemas$6: void addChildren(java.lang.String,java.lang.String[])>("wavelet", $r4);

        $r5 = newarray (java.lang.String)[1];

        $r5[0] = "tags";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.supplement.UserDataSchemas$6: void addChildren(java.lang.String,java.lang.String[])>("wavelet", $r5);

        $r6 = newarray (java.lang.String)[1];

        $r6[0] = "i";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.supplement.UserDataSchemas$6: void addAttrs(java.lang.String,java.lang.String[])>("wavelet", $r6);

        $r7 = newarray (java.lang.String)[1];

        $r7[0] = "i";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.supplement.UserDataSchemas$6: void addAttrs(java.lang.String,java.lang.String[])>("blip", $r7);

        $r8 = newarray (java.lang.String)[1];

        $r8[0] = "v";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.supplement.UserDataSchemas$6: void addAttrs(java.lang.String,java.lang.String[])>("blip", $r8);

        $r9 = newarray (java.lang.String)[1];

        $r9[0] = "v";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.supplement.UserDataSchemas$6: void addAttrs(java.lang.String,java.lang.String[])>("participants", $r9);

        $r10 = newarray (java.lang.String)[1];

        $r10[0] = "v";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.supplement.UserDataSchemas$6: void addAttrs(java.lang.String,java.lang.String[])>("all", $r10);

        $r11 = newarray (java.lang.String)[1];

        $r11[0] = "v";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.supplement.UserDataSchemas$6: void addAttrs(java.lang.String,java.lang.String[])>("tags", $r11);

        return;
    }

    public boolean permitsAttribute(java.lang.String, java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.model.schema.supplement.UserDataSchemas$6 r2;
        java.lang.String r0, $r1, r3, r4;
        boolean $z0, $z1, $z2;

        r2 := @this: org.waveprotocol.wave.model.schema.supplement.UserDataSchemas$6;

        r3 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        $r1 = "v";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        $z2 = staticinvoke <org.waveprotocol.wave.model.schema.SchemaUtils: boolean isNonNegativeInteger(java.lang.String)>(r4);

        return $z2;

     label1:
        $z1 = specialinvoke r2.<org.waveprotocol.wave.model.schema.AbstractXmlSchemaConstraints: boolean permitsAttribute(java.lang.String,java.lang.String,java.lang.String)>(r3, r0, r4);

        return $z1;
    }
}
