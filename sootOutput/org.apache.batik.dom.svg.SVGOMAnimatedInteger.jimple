public class org.apache.batik.dom.svg.SVGOMAnimatedInteger extends org.apache.batik.dom.svg.AbstractSVGAnimatedValue implements org.w3c.dom.svg.SVGAnimatedInteger
{
    protected int defaultValue;
    protected boolean valid;
    protected int baseVal;
    protected int animVal;
    protected boolean changing;

    public void <init>(org.apache.batik.dom.svg.AbstractElement, java.lang.String, java.lang.String, int)
    {
        org.apache.batik.dom.svg.SVGOMAnimatedInteger r0;
        int i0;
        java.lang.String r2, r3;
        org.apache.batik.dom.svg.AbstractElement r1;

        r0 := @this: org.apache.batik.dom.svg.SVGOMAnimatedInteger;

        r1 := @parameter0: org.apache.batik.dom.svg.AbstractElement;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        specialinvoke r0.<org.apache.batik.dom.svg.AbstractSVGAnimatedValue: void <init>(org.apache.batik.dom.svg.AbstractElement,java.lang.String,java.lang.String)>(r1, r2, r3);

        r0.<org.apache.batik.dom.svg.SVGOMAnimatedInteger: int defaultValue> = i0;

        return;
    }

    public int getBaseVal()
    {
        int $i0;
        org.apache.batik.dom.svg.SVGOMAnimatedInteger r0;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMAnimatedInteger;

        $z0 = r0.<org.apache.batik.dom.svg.SVGOMAnimatedInteger: boolean valid>;

        if $z0 != 0 goto label1;

        virtualinvoke r0.<org.apache.batik.dom.svg.SVGOMAnimatedInteger: void update()>();

     label1:
        $i0 = r0.<org.apache.batik.dom.svg.SVGOMAnimatedInteger: int baseVal>;

        return $i0;
    }

    protected void update()
    {
        org.apache.batik.dom.svg.SVGOMAnimatedInteger r0;
        org.w3c.dom.Attr $r4;
        int $i0, $i1;
        java.lang.String $r1, $r2, $r5;
        org.apache.batik.dom.svg.AbstractElement $r3;

        r0 := @this: org.apache.batik.dom.svg.SVGOMAnimatedInteger;

        $r3 = r0.<org.apache.batik.dom.svg.AbstractSVGAnimatedValue: org.apache.batik.dom.svg.AbstractElement element>;

        $r2 = r0.<org.apache.batik.dom.svg.AbstractSVGAnimatedValue: java.lang.String namespaceURI>;

        $r1 = r0.<org.apache.batik.dom.svg.AbstractSVGAnimatedValue: java.lang.String localName>;

        $r4 = virtualinvoke $r3.<org.apache.batik.dom.AbstractElement: org.w3c.dom.Attr getAttributeNodeNS(java.lang.String,java.lang.String)>($r2, $r1);

        if $r4 != null goto label1;

        $i1 = r0.<org.apache.batik.dom.svg.SVGOMAnimatedInteger: int defaultValue>;

        r0.<org.apache.batik.dom.svg.SVGOMAnimatedInteger: int baseVal> = $i1;

        goto label2;

     label1:
        $r5 = interfaceinvoke $r4.<org.w3c.dom.Attr: java.lang.String getValue()>();

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r5);

        r0.<org.apache.batik.dom.svg.SVGOMAnimatedInteger: int baseVal> = $i0;

     label2:
        r0.<org.apache.batik.dom.svg.SVGOMAnimatedInteger: boolean valid> = 1;

        return;
    }

    public void setBaseVal(int) throws org.w3c.dom.DOMException
    {
        java.lang.Throwable $r5;
        org.apache.batik.dom.svg.SVGOMAnimatedInteger r0;
        int i0;
        java.lang.String $r2, $r3, $r4;
        org.apache.batik.dom.svg.AbstractElement $r1;

        r0 := @this: org.apache.batik.dom.svg.SVGOMAnimatedInteger;

        i0 := @parameter0: int;

     label1:
        r0.<org.apache.batik.dom.svg.SVGOMAnimatedInteger: int baseVal> = i0;

        r0.<org.apache.batik.dom.svg.SVGOMAnimatedInteger: boolean valid> = 1;

        r0.<org.apache.batik.dom.svg.SVGOMAnimatedInteger: boolean changing> = 1;

        $r1 = r0.<org.apache.batik.dom.svg.AbstractSVGAnimatedValue: org.apache.batik.dom.svg.AbstractElement element>;

        $r2 = r0.<org.apache.batik.dom.svg.AbstractSVGAnimatedValue: java.lang.String namespaceURI>;

        $r3 = r0.<org.apache.batik.dom.svg.AbstractSVGAnimatedValue: java.lang.String localName>;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        virtualinvoke $r1.<org.apache.batik.dom.AbstractElement: void setAttributeNS(java.lang.String,java.lang.String,java.lang.String)>($r2, $r3, $r4);

        goto label6;

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        goto label7;

     label4:
        throw $r5;

     label5:
        return;

     label6:
        r0.<org.apache.batik.dom.svg.SVGOMAnimatedInteger: boolean changing> = 0;

        goto label2;

     label7:
        r0.<org.apache.batik.dom.svg.SVGOMAnimatedInteger: boolean changing> = 0;

        goto label4;

        catch java.lang.Throwable from label1 to label3 with label3;
    }

    public int getAnimVal()
    {
        org.apache.batik.dom.svg.SVGOMAnimatedInteger r0;
        int $i0, $i1;
        boolean $z0, $z1;

        r0 := @this: org.apache.batik.dom.svg.SVGOMAnimatedInteger;

        $z0 = r0.<org.apache.batik.dom.svg.AbstractSVGAnimatedValue: boolean hasAnimVal>;

        if $z0 == 0 goto label1;

        $i1 = r0.<org.apache.batik.dom.svg.SVGOMAnimatedInteger: int animVal>;

        return $i1;

     label1:
        $z1 = r0.<org.apache.batik.dom.svg.SVGOMAnimatedInteger: boolean valid>;

        if $z1 != 0 goto label2;

        virtualinvoke r0.<org.apache.batik.dom.svg.SVGOMAnimatedInteger: void update()>();

     label2:
        $i0 = r0.<org.apache.batik.dom.svg.SVGOMAnimatedInteger: int baseVal>;

        return $i0;
    }

    public org.apache.batik.anim.values.AnimatableValue getUnderlyingValue(org.apache.batik.dom.anim.AnimationTarget)
    {
        org.apache.batik.dom.anim.AnimationTarget r1;
        org.apache.batik.dom.svg.SVGOMAnimatedInteger r2;
        org.apache.batik.anim.values.AnimatableIntegerValue $r0;
        int $i0;

        r2 := @this: org.apache.batik.dom.svg.SVGOMAnimatedInteger;

        r1 := @parameter0: org.apache.batik.dom.anim.AnimationTarget;

        $r0 = new org.apache.batik.anim.values.AnimatableIntegerValue;

        $i0 = virtualinvoke r2.<org.apache.batik.dom.svg.SVGOMAnimatedInteger: int getBaseVal()>();

        specialinvoke $r0.<org.apache.batik.anim.values.AnimatableIntegerValue: void <init>(org.apache.batik.dom.anim.AnimationTarget,int)>(r1, $i0);

        return $r0;
    }

    protected void updateAnimatedValue(org.apache.batik.anim.values.AnimatableValue)
    {
        org.apache.batik.dom.svg.SVGOMAnimatedInteger r1;
        org.apache.batik.anim.values.AnimatableIntegerValue $r2;
        int $i0;
        org.apache.batik.anim.values.AnimatableValue r0;

        r1 := @this: org.apache.batik.dom.svg.SVGOMAnimatedInteger;

        r0 := @parameter0: org.apache.batik.anim.values.AnimatableValue;

        if r0 != null goto label1;

        r1.<org.apache.batik.dom.svg.AbstractSVGAnimatedValue: boolean hasAnimVal> = 0;

        goto label2;

     label1:
        r1.<org.apache.batik.dom.svg.AbstractSVGAnimatedValue: boolean hasAnimVal> = 1;

        $r2 = (org.apache.batik.anim.values.AnimatableIntegerValue) r0;

        $i0 = virtualinvoke $r2.<org.apache.batik.anim.values.AnimatableIntegerValue: int getValue()>();

        r1.<org.apache.batik.dom.svg.SVGOMAnimatedInteger: int animVal> = $i0;

     label2:
        virtualinvoke r1.<org.apache.batik.dom.svg.AbstractSVGAnimatedValue: void fireAnimatedAttributeListeners()>();

        return;
    }

    public void attrAdded(org.w3c.dom.Attr, java.lang.String)
    {
        org.apache.batik.dom.svg.SVGOMAnimatedInteger r0;
        java.lang.String r2;
        org.w3c.dom.Attr r1;
        boolean $z0, $z1;

        r0 := @this: org.apache.batik.dom.svg.SVGOMAnimatedInteger;

        r1 := @parameter0: org.w3c.dom.Attr;

        r2 := @parameter1: java.lang.String;

        $z0 = r0.<org.apache.batik.dom.svg.SVGOMAnimatedInteger: boolean changing>;

        if $z0 != 0 goto label1;

        r0.<org.apache.batik.dom.svg.SVGOMAnimatedInteger: boolean valid> = 0;

     label1:
        virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGAnimatedValue: void fireBaseAttributeListeners()>();

        $z1 = r0.<org.apache.batik.dom.svg.AbstractSVGAnimatedValue: boolean hasAnimVal>;

        if $z1 != 0 goto label2;

        virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGAnimatedValue: void fireAnimatedAttributeListeners()>();

     label2:
        return;
    }

    public void attrModified(org.w3c.dom.Attr, java.lang.String, java.lang.String)
    {
        org.apache.batik.dom.svg.SVGOMAnimatedInteger r0;
        java.lang.String r2, r3;
        org.w3c.dom.Attr r1;
        boolean $z0, $z1;

        r0 := @this: org.apache.batik.dom.svg.SVGOMAnimatedInteger;

        r1 := @parameter0: org.w3c.dom.Attr;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $z0 = r0.<org.apache.batik.dom.svg.SVGOMAnimatedInteger: boolean changing>;

        if $z0 != 0 goto label1;

        r0.<org.apache.batik.dom.svg.SVGOMAnimatedInteger: boolean valid> = 0;

     label1:
        virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGAnimatedValue: void fireBaseAttributeListeners()>();

        $z1 = r0.<org.apache.batik.dom.svg.AbstractSVGAnimatedValue: boolean hasAnimVal>;

        if $z1 != 0 goto label2;

        virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGAnimatedValue: void fireAnimatedAttributeListeners()>();

     label2:
        return;
    }

    public void attrRemoved(org.w3c.dom.Attr, java.lang.String)
    {
        org.apache.batik.dom.svg.SVGOMAnimatedInteger r0;
        java.lang.String r2;
        org.w3c.dom.Attr r1;
        boolean $z0, $z1;

        r0 := @this: org.apache.batik.dom.svg.SVGOMAnimatedInteger;

        r1 := @parameter0: org.w3c.dom.Attr;

        r2 := @parameter1: java.lang.String;

        $z0 = r0.<org.apache.batik.dom.svg.SVGOMAnimatedInteger: boolean changing>;

        if $z0 != 0 goto label1;

        r0.<org.apache.batik.dom.svg.SVGOMAnimatedInteger: boolean valid> = 0;

     label1:
        virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGAnimatedValue: void fireBaseAttributeListeners()>();

        $z1 = r0.<org.apache.batik.dom.svg.AbstractSVGAnimatedValue: boolean hasAnimVal>;

        if $z1 != 0 goto label2;

        virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGAnimatedValue: void fireAnimatedAttributeListeners()>();

     label2:
        return;
    }
}
