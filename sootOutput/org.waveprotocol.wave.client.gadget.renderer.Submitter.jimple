public class org.waveprotocol.wave.client.gadget.renderer.Submitter extends java.lang.Object
{
    private final int timeoutMs;
    private final org.waveprotocol.wave.client.gadget.renderer.Submitter$SubmitTask task;
    private boolean submitScheduled;

    public void <init>(int, org.waveprotocol.wave.client.gadget.renderer.Submitter$SubmitTask)
    {
        org.waveprotocol.wave.client.gadget.renderer.Submitter$SubmitTask r1;
        int i0, $i1;
        org.waveprotocol.wave.client.gadget.renderer.Submitter r0;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.Submitter;

        i0 := @parameter0: int;

        r1 := @parameter1: org.waveprotocol.wave.client.gadget.renderer.Submitter$SubmitTask;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.client.gadget.renderer.Submitter: org.waveprotocol.wave.client.gadget.renderer.Submitter$SubmitTask task> = r1;

        if i0 <= 0 goto label1;

        $i1 = i0;

        goto label2;

     label1:
        $i1 = 0;

     label2:
        r0.<org.waveprotocol.wave.client.gadget.renderer.Submitter: int timeoutMs> = $i1;

        r0.<org.waveprotocol.wave.client.gadget.renderer.Submitter: boolean submitScheduled> = 0;

        return;
    }

    public void submitImmediately()
    {
        org.waveprotocol.wave.client.gadget.renderer.Submitter$SubmitTask $r1;
        org.waveprotocol.wave.client.gadget.renderer.Submitter r0;
        java.lang.Exception $r2;
        java.lang.StringBuilder $r3, $r4, $r6;
        java.lang.String $r5, $r7;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.Submitter;

     label1:
        $r1 = r0.<org.waveprotocol.wave.client.gadget.renderer.Submitter: org.waveprotocol.wave.client.gadget.renderer.Submitter$SubmitTask task>;

        interfaceinvoke $r1.<org.waveprotocol.wave.client.gadget.renderer.Submitter$SubmitTask: void doSubmit()>();

        r0.<org.waveprotocol.wave.client.gadget.renderer.Submitter: boolean submitScheduled> = 0;

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Submit exception ");

        $r5 = virtualinvoke $r2.<java.lang.Exception: java.lang.String getMessage()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.waveprotocol.wave.client.gadget.GadgetLog: void log(java.lang.String)>($r7);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void triggerScheduledSubmit()
    {
        org.waveprotocol.wave.client.gadget.renderer.Submitter r0;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.Submitter;

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.Submitter: void submitIfScheduled()>();

        return;
    }

    public void submit()
    {
        org.waveprotocol.wave.client.gadget.renderer.Submitter$1 $r1;
        int $i0, $i1;
        org.waveprotocol.wave.client.gadget.renderer.Submitter r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.Submitter;

        $i0 = r0.<org.waveprotocol.wave.client.gadget.renderer.Submitter: int timeoutMs>;

        if $i0 != 0 goto label1;

        virtualinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.Submitter: void submitImmediately()>();

        goto label2;

     label1:
        $z0 = r0.<org.waveprotocol.wave.client.gadget.renderer.Submitter: boolean submitScheduled>;

        if $z0 != 0 goto label2;

        r0.<org.waveprotocol.wave.client.gadget.renderer.Submitter: boolean submitScheduled> = 1;

        $r1 = new org.waveprotocol.wave.client.gadget.renderer.Submitter$1;

        specialinvoke $r1.<org.waveprotocol.wave.client.gadget.renderer.Submitter$1: void <init>(org.waveprotocol.wave.client.gadget.renderer.Submitter)>(r0);

        $i1 = r0.<org.waveprotocol.wave.client.gadget.renderer.Submitter: int timeoutMs>;

        virtualinvoke $r1.<org.waveprotocol.wave.client.gadget.renderer.Submitter$1: void schedule(int)>($i1);

     label2:
        return;
    }

    private void submitIfScheduled()
    {
        org.waveprotocol.wave.client.gadget.renderer.Submitter r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.Submitter;

        $z0 = r0.<org.waveprotocol.wave.client.gadget.renderer.Submitter: boolean submitScheduled>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.Submitter: void submitImmediately()>();

     label1:
        return;
    }

    static void access$000(org.waveprotocol.wave.client.gadget.renderer.Submitter)
    {
        org.waveprotocol.wave.client.gadget.renderer.Submitter r0;

        r0 := @parameter0: org.waveprotocol.wave.client.gadget.renderer.Submitter;

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.Submitter: void submitIfScheduled()>();

        return;
    }
}
