public class arq.cmdline.ModFormat extends java.lang.Object implements arq.cmdline.ArgModuleGeneral
{
    protected final arq.cmdline.ArgDecl resultsFmtDecl;
    private java.lang.String format;
    static final java.util.List formats;

    public void <init>()
    {
        arq.cmdline.ArgDecl $r1;
        java.lang.String[] $r2;
        arq.cmdline.ModFormat r0;

        r0 := @this: arq.cmdline.ModFormat;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new arq.cmdline.ArgDecl;

        $r2 = newarray (java.lang.String)[1];

        $r2[0] = "format";

        specialinvoke $r1.<arq.cmdline.ArgDecl: void <init>(boolean,java.lang.String,java.lang.String[])>(1, "fmt", $r2);

        r0.<arq.cmdline.ModFormat: arq.cmdline.ArgDecl resultsFmtDecl> = $r1;

        r0.<arq.cmdline.ModFormat: java.lang.String format> = "N-TRIPLES";

        return;
    }

    public void processArgs(arq.cmdline.CmdArgModule) throws java.lang.IllegalArgumentException
    {
        arq.cmdline.ArgDecl $r2, $r3;
        arq.cmdline.CmdArgModule r0;
        java.lang.StringBuilder $r7, $r8, $r9;
        arq.cmdline.ModFormat r1;
        java.lang.String $r4, $r5, $r6, $r10;
        boolean $z0;

        r1 := @this: arq.cmdline.ModFormat;

        r0 := @parameter0: arq.cmdline.CmdArgModule;

        $r2 = r1.<arq.cmdline.ModFormat: arq.cmdline.ArgDecl resultsFmtDecl>;

        $z0 = virtualinvoke r0.<arq.cmdline.CmdArgModule: boolean contains(arq.cmdline.ArgDecl)>($r2);

        if $z0 == 0 goto label1;

        $r3 = r1.<arq.cmdline.ModFormat: arq.cmdline.ArgDecl resultsFmtDecl>;

        $r4 = virtualinvoke r0.<arq.cmdline.CmdArgModule: java.lang.String getValue(arq.cmdline.ArgDecl)>($r3);

        $r5 = specialinvoke r1.<arq.cmdline.ModFormat: java.lang.String lookup(java.lang.String)>($r4);

        r1.<arq.cmdline.ModFormat: java.lang.String format> = $r5;

        $r6 = r1.<arq.cmdline.ModFormat: java.lang.String format>;

        if $r6 != null goto label1;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized format: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<arq.cmdline.CmdArgModule: void cmdError(java.lang.String)>($r10);

     label1:
        return;
    }

    public void registerWith(arq.cmdline.CmdGeneral)
    {
        arq.cmdline.Usage $r1;
        arq.cmdline.CmdGeneral r0;
        arq.cmdline.ArgDecl $r3;
        arq.cmdline.ModFormat r2;

        r2 := @this: arq.cmdline.ModFormat;

        r0 := @parameter0: arq.cmdline.CmdGeneral;

        $r1 = virtualinvoke r0.<arq.cmdline.CmdGeneral: arq.cmdline.Usage getUsage()>();

        virtualinvoke $r1.<arq.cmdline.Usage: void startCategory(java.lang.String)>("Output format");

        $r3 = r2.<arq.cmdline.ModFormat: arq.cmdline.ArgDecl resultsFmtDecl>;

        virtualinvoke r0.<arq.cmdline.CmdGeneral: void add(arq.cmdline.ArgDecl,java.lang.String,java.lang.String)>($r3, "--format", "Format (Result sets: text, XML, JSON; Graph: RDF serialization)");

        return;
    }

    public void checkCommandLine(arq.cmdline.CmdArgModule)
    {
        arq.cmdline.CmdArgModule r1;
        arq.cmdline.ModFormat r0;

        r0 := @this: arq.cmdline.ModFormat;

        r1 := @parameter0: arq.cmdline.CmdArgModule;

        return;
    }

    public java.lang.String getFormat()
    {
        arq.cmdline.ModFormat r0;
        java.lang.String $r1;

        r0 := @this: arq.cmdline.ModFormat;

        $r1 = r0.<arq.cmdline.ModFormat: java.lang.String format>;

        return $r1;
    }

    public java.lang.String getFormat(java.lang.String)
    {
        arq.cmdline.ModFormat r0;
        java.lang.String $r1, $r2, r3;

        r0 := @this: arq.cmdline.ModFormat;

        r3 := @parameter0: java.lang.String;

        $r1 = r0.<arq.cmdline.ModFormat: java.lang.String format>;

        if $r1 != null goto label1;

        return r3;

     label1:
        $r2 = r0.<arq.cmdline.ModFormat: java.lang.String format>;

        return $r2;
    }

    private java.lang.String lookup(java.lang.String)
    {
        java.util.Iterator $r1;
        java.util.List $r0;
        java.lang.Object $r2;
        java.lang.String r3, r4;
        arq.cmdline.ModFormat r5;
        boolean $z0, $z1;

        r5 := @this: arq.cmdline.ModFormat;

        r4 := @parameter0: java.lang.String;

        $r0 = <arq.cmdline.ModFormat: java.util.List formats>;

        $r1 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r2;

        $z1 = virtualinvoke r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r4);

        if $z1 == 0 goto label2;

        return r3;

     label2:
        goto label1;

     label3:
        return "TURTLE";
    }

    static void <clinit>()
    {
        java.lang.String[] $r0;
        java.util.List $r1;

        $r0 = newarray (java.lang.String)[11];

        $r0[0] = "RDF/XML";

        $r0[1] = "RDF/XML-ABBREV";

        $r0[2] = "N-TRIPLE";

        $r0[3] = "N-TRIPLES";

        $r0[4] = "N3";

        $r0[5] = "N3-PP";

        $r0[6] = "N3-PLAIN";

        $r0[7] = "N3-TRIPLES";

        $r0[8] = "N3-TRIPLE";

        $r0[9] = "TURTLE";

        $r0[10] = "TTL";

        $r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r0);

        <arq.cmdline.ModFormat: java.util.List formats> = $r1;

        return;
    }
}
