public class org.apache.cxf.interceptor.MessageSenderInterceptor extends org.apache.cxf.phase.AbstractPhaseInterceptor
{
    private static final java.util.ResourceBundle BUNDLE;
    private org.apache.cxf.interceptor.MessageSenderInterceptor$MessageSenderEndingInterceptor ending;

    public void <init>()
    {
        org.apache.cxf.interceptor.MessageSenderInterceptor$MessageSenderEndingInterceptor $r1;
        org.apache.cxf.interceptor.MessageSenderInterceptor r0;

        r0 := @this: org.apache.cxf.interceptor.MessageSenderInterceptor;

        specialinvoke r0.<org.apache.cxf.phase.AbstractPhaseInterceptor: void <init>(java.lang.String)>("prepare-send");

        $r1 = new org.apache.cxf.interceptor.MessageSenderInterceptor$MessageSenderEndingInterceptor;

        specialinvoke $r1.<org.apache.cxf.interceptor.MessageSenderInterceptor$MessageSenderEndingInterceptor: void <init>(org.apache.cxf.interceptor.MessageSenderInterceptor)>(r0);

        r0.<org.apache.cxf.interceptor.MessageSenderInterceptor: org.apache.cxf.interceptor.MessageSenderInterceptor$MessageSenderEndingInterceptor ending> = $r1;

        return;
    }

    public void handleMessage(org.apache.cxf.message.Message)
    {
        java.lang.Object[] $r8;
        org.apache.cxf.transport.Conduit $r2;
        org.apache.cxf.interceptor.MessageSenderInterceptor r0;
        org.apache.cxf.interceptor.InterceptorChain $r3;
        org.apache.cxf.message.Message r1;
        java.io.IOException $r5;
        org.apache.cxf.common.i18n.Message $r7;
        org.apache.cxf.interceptor.Fault $r6;
        java.util.ResourceBundle $r9;
        org.apache.cxf.interceptor.MessageSenderInterceptor$MessageSenderEndingInterceptor $r4;

        r0 := @this: org.apache.cxf.interceptor.MessageSenderInterceptor;

        r1 := @parameter0: org.apache.cxf.message.Message;

     label1:
        $r2 = specialinvoke r0.<org.apache.cxf.interceptor.MessageSenderInterceptor: org.apache.cxf.transport.Conduit getConduit(org.apache.cxf.message.Message)>(r1);

        interfaceinvoke $r2.<org.apache.cxf.transport.Conduit: void prepare(org.apache.cxf.message.Message)>(r1);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r6 = new org.apache.cxf.interceptor.Fault;

        $r7 = new org.apache.cxf.common.i18n.Message;

        $r9 = <org.apache.cxf.interceptor.MessageSenderInterceptor: java.util.ResourceBundle BUNDLE>;

        $r8 = newarray (java.lang.Object)[0];

        specialinvoke $r7.<org.apache.cxf.common.i18n.Message: void <init>(java.lang.String,java.util.ResourceBundle,java.lang.Object[])>("COULD_NOT_SEND", $r9, $r8);

        specialinvoke $r6.<org.apache.cxf.interceptor.Fault: void <init>(org.apache.cxf.common.i18n.Message,java.lang.Throwable)>($r7, $r5);

        throw $r6;

     label4:
        $r3 = interfaceinvoke r1.<org.apache.cxf.message.Message: org.apache.cxf.interceptor.InterceptorChain getInterceptorChain()>();

        $r4 = r0.<org.apache.cxf.interceptor.MessageSenderInterceptor: org.apache.cxf.interceptor.MessageSenderInterceptor$MessageSenderEndingInterceptor ending>;

        interfaceinvoke $r3.<org.apache.cxf.interceptor.InterceptorChain: void add(org.apache.cxf.interceptor.Interceptor)>($r4);

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private org.apache.cxf.transport.Conduit getConduit(org.apache.cxf.message.Message)
    {
        org.apache.cxf.transport.Conduit $r2, r6;
        org.apache.cxf.interceptor.MessageSenderInterceptor r5;
        org.apache.cxf.message.Message r0, $r3, $r4;
        org.apache.cxf.message.Exchange $r1;

        r5 := @this: org.apache.cxf.interceptor.MessageSenderInterceptor;

        r0 := @parameter0: org.apache.cxf.message.Message;

        $r1 = interfaceinvoke r0.<org.apache.cxf.message.Message: org.apache.cxf.message.Exchange getExchange()>();

        $r2 = interfaceinvoke $r1.<org.apache.cxf.message.Exchange: org.apache.cxf.transport.Conduit getConduit(org.apache.cxf.message.Message)>(r0);

        r6 = $r2;

        if $r2 != null goto label2;

        $r3 = interfaceinvoke $r1.<org.apache.cxf.message.Exchange: org.apache.cxf.message.Message getOutMessage()>();

        if $r3 != null goto label1;

        $r4 = interfaceinvoke $r1.<org.apache.cxf.message.Exchange: org.apache.cxf.message.Message getOutFaultMessage()>();

        if $r4 == null goto label2;

     label1:
        r6 = staticinvoke <org.apache.cxf.interceptor.OutgoingChainInterceptor: org.apache.cxf.transport.Conduit getBackChannelConduit(org.apache.cxf.message.Message)>(r0);

     label2:
        return r6;
    }

    static org.apache.cxf.transport.Conduit access$000(org.apache.cxf.interceptor.MessageSenderInterceptor, org.apache.cxf.message.Message)
    {
        org.apache.cxf.transport.Conduit $r2;
        org.apache.cxf.interceptor.MessageSenderInterceptor r0;
        org.apache.cxf.message.Message r1;

        r0 := @parameter0: org.apache.cxf.interceptor.MessageSenderInterceptor;

        r1 := @parameter1: org.apache.cxf.message.Message;

        $r2 = specialinvoke r0.<org.apache.cxf.interceptor.MessageSenderInterceptor: org.apache.cxf.transport.Conduit getConduit(org.apache.cxf.message.Message)>(r1);

        return $r2;
    }

    static java.util.ResourceBundle access$100()
    {
        java.util.ResourceBundle $r0;

        $r0 = <org.apache.cxf.interceptor.MessageSenderInterceptor: java.util.ResourceBundle BUNDLE>;

        return $r0;
    }

    static void <clinit>()
    {
        java.util.ResourceBundle $r0;

        $r0 = staticinvoke <org.apache.cxf.common.i18n.BundleUtils: java.util.ResourceBundle getBundle(java.lang.Class)>(class "Lorg/apache/cxf/interceptor/MessageSenderInterceptor;");

        <org.apache.cxf.interceptor.MessageSenderInterceptor: java.util.ResourceBundle BUNDLE> = $r0;

        return;
    }
}
