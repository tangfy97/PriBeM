public class org.apache.batik.util.ParsedURLData extends java.lang.Object
{
    protected static final java.lang.String HTTP_USER_AGENT_HEADER;
    protected static final java.lang.String HTTP_ACCEPT_HEADER;
    protected static final java.lang.String HTTP_ACCEPT_LANGUAGE_HEADER;
    protected static final java.lang.String HTTP_ACCEPT_ENCODING_HEADER;
    protected static java.util.List acceptedEncodings;
    public static final byte[] GZIP_MAGIC;
    public java.lang.String protocol;
    public java.lang.String host;
    public int port;
    public java.lang.String path;
    public java.lang.String ref;
    public java.lang.String contentType;
    public java.lang.String contentEncoding;
    public java.io.InputStream stream;
    public boolean hasBeenOpened;
    protected java.lang.String contentTypeMediaType;
    protected java.lang.String contentTypeCharset;

    public static java.io.InputStream checkGZIP(java.io.InputStream) throws java.io.IOException
    {
        byte[] $r0, $r4, $r7;
        java.util.zip.GZIPInputStream $r13;
        java.io.BufferedInputStream $r12, $r15;
        byte $b0, $b1, $b2, $b3, $b4, $b6, $b8, $b12, $b13;
        boolean $z0, $z1;
        java.util.zip.ZipException $r8;
        java.lang.Exception $r9;
        java.util.zip.InflaterInputStream $r14, $r16;
        short $s7, $s9, $s21, $s23;
        java.io.FilterInputStream r11;
        int $i5, $i10, $i11, i14, $i15, $i16, $i17, $i18, $i19, $i20, $i22, $i24;
        java.io.InputStream r10;

        r10 := @parameter0: java.io.InputStream;

        $z0 = virtualinvoke r10.<java.io.InputStream: boolean markSupported()>();

        if $z0 != 0 goto label01;

        $r12 = new java.io.BufferedInputStream;

        specialinvoke $r12.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>(r10);

        r10 = $r12;

     label01:
        $r7 = newarray (byte)[2];

     label02:
        virtualinvoke r10.<java.io.InputStream: void mark(int)>(2);

        virtualinvoke r10.<java.io.InputStream: int read(byte[])>($r7);

        virtualinvoke r10.<java.io.InputStream: void reset()>();

     label03:
        goto label05;

     label04:
        $r9 := @caughtexception;

        virtualinvoke r10.<java.io.InputStream: void reset()>();

        return r10;

     label05:
        $b1 = $r7[0];

        $r0 = <org.apache.batik.util.ParsedURLData: byte[] GZIP_MAGIC>;

        $b0 = $r0[0];

        $i15 = (int) $b1;

        $i16 = (int) $b0;

        if $i15 != $i16 goto label06;

        $b13 = $r7[1];

        $r4 = <org.apache.batik.util.ParsedURLData: byte[] GZIP_MAGIC>;

        $b12 = $r4[1];

        $i17 = (int) $b13;

        $i18 = (int) $b12;

        if $i17 != $i18 goto label06;

        $r13 = new java.util.zip.GZIPInputStream;

        specialinvoke $r13.<java.util.zip.GZIPInputStream: void <init>(java.io.InputStream)>(r10);

        return $r13;

     label06:
        $b2 = $r7[0];

        $b3 = $b2 & 15;

        $i19 = (int) $b3;

        if $i19 != 8 goto label10;

        $b4 = $r7[0];

        $i20 = (int) $b4;

        $i5 = $i20 >>> 4;

        if $i5 > 7 goto label10;

        $b6 = $r7[0];

        $s21 = (short) $b6;

        $s7 = $s21 & 255;

        $i22 = (int) $s7;

        $i10 = $i22 * 256;

        $b8 = $r7[1];

        $s23 = (short) $b8;

        $s9 = $s23 & 255;

        $i24 = (int) $s9;

        i14 = $i10 + $i24;

        $i11 = i14 % 31;

        if $i11 != 0 goto label10;

     label07:
        virtualinvoke r10.<java.io.InputStream: void mark(int)>(100);

        $r14 = new java.util.zip.InflaterInputStream;

        specialinvoke $r14.<java.util.zip.InflaterInputStream: void <init>(java.io.InputStream)>(r10);

        r11 = $r14;

        $z1 = virtualinvoke $r14.<java.io.InputStream: boolean markSupported()>();

        if $z1 != 0 goto label08;

        $r15 = new java.io.BufferedInputStream;

        specialinvoke $r15.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r14);

        r11 = $r15;

     label08:
        virtualinvoke r11.<java.io.InputStream: void mark(int)>(2);

        virtualinvoke r11.<java.io.InputStream: int read(byte[])>($r7);

        virtualinvoke r10.<java.io.InputStream: void reset()>();

        $r16 = new java.util.zip.InflaterInputStream;

        specialinvoke $r16.<java.util.zip.InflaterInputStream: void <init>(java.io.InputStream)>(r10);

        return $r16;

     label09:
        $r8 := @caughtexception;

        virtualinvoke r10.<java.io.InputStream: void reset()>();

        return r10;

     label10:
        return r10;

        catch java.lang.Exception from label02 to label03 with label04;
        catch java.util.zip.ZipException from label07 to label09 with label09;
    }

    public void <init>()
    {
        int $i1;
        org.apache.batik.util.ParsedURLData r0;

        r0 := @this: org.apache.batik.util.ParsedURLData;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.batik.util.ParsedURLData: java.lang.String protocol> = null;

        r0.<org.apache.batik.util.ParsedURLData: java.lang.String host> = null;

        $i1 = (int) -1;

        r0.<org.apache.batik.util.ParsedURLData: int port> = $i1;

        r0.<org.apache.batik.util.ParsedURLData: java.lang.String path> = null;

        r0.<org.apache.batik.util.ParsedURLData: java.lang.String ref> = null;

        r0.<org.apache.batik.util.ParsedURLData: java.lang.String contentType> = null;

        r0.<org.apache.batik.util.ParsedURLData: java.lang.String contentEncoding> = null;

        r0.<org.apache.batik.util.ParsedURLData: java.io.InputStream stream> = null;

        r0.<org.apache.batik.util.ParsedURLData: boolean hasBeenOpened> = 0;

        return;
    }

    public void <init>(java.net.URL)
    {
        java.net.URL r1;
        int $i0, $i1, $i2, $i3, $i4, $i6;
        java.lang.String $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13;
        org.apache.batik.util.ParsedURLData r0;

        r0 := @this: org.apache.batik.util.ParsedURLData;

        r1 := @parameter0: java.net.URL;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.batik.util.ParsedURLData: java.lang.String protocol> = null;

        r0.<org.apache.batik.util.ParsedURLData: java.lang.String host> = null;

        $i6 = (int) -1;

        r0.<org.apache.batik.util.ParsedURLData: int port> = $i6;

        r0.<org.apache.batik.util.ParsedURLData: java.lang.String path> = null;

        r0.<org.apache.batik.util.ParsedURLData: java.lang.String ref> = null;

        r0.<org.apache.batik.util.ParsedURLData: java.lang.String contentType> = null;

        r0.<org.apache.batik.util.ParsedURLData: java.lang.String contentEncoding> = null;

        r0.<org.apache.batik.util.ParsedURLData: java.io.InputStream stream> = null;

        r0.<org.apache.batik.util.ParsedURLData: boolean hasBeenOpened> = 0;

        $r2 = virtualinvoke r1.<java.net.URL: java.lang.String getProtocol()>();

        r0.<org.apache.batik.util.ParsedURLData: java.lang.String protocol> = $r2;

        $r3 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String protocol>;

        if $r3 == null goto label1;

        $r7 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String protocol>;

        $i3 = virtualinvoke $r7.<java.lang.String: int length()>();

        if $i3 != 0 goto label1;

        r0.<org.apache.batik.util.ParsedURLData: java.lang.String protocol> = null;

     label1:
        $r8 = virtualinvoke r1.<java.net.URL: java.lang.String getHost()>();

        r0.<org.apache.batik.util.ParsedURLData: java.lang.String host> = $r8;

        $r9 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String host>;

        if $r9 == null goto label2;

        $r6 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String host>;

        $i2 = virtualinvoke $r6.<java.lang.String: int length()>();

        if $i2 != 0 goto label2;

        r0.<org.apache.batik.util.ParsedURLData: java.lang.String host> = null;

     label2:
        $i4 = virtualinvoke r1.<java.net.URL: int getPort()>();

        r0.<org.apache.batik.util.ParsedURLData: int port> = $i4;

        $r10 = virtualinvoke r1.<java.net.URL: java.lang.String getFile()>();

        r0.<org.apache.batik.util.ParsedURLData: java.lang.String path> = $r10;

        $r11 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String path>;

        if $r11 == null goto label3;

        $r5 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String path>;

        $i1 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i1 != 0 goto label3;

        r0.<org.apache.batik.util.ParsedURLData: java.lang.String path> = null;

     label3:
        $r12 = virtualinvoke r1.<java.net.URL: java.lang.String getRef()>();

        r0.<org.apache.batik.util.ParsedURLData: java.lang.String ref> = $r12;

        $r13 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String ref>;

        if $r13 == null goto label4;

        $r4 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String ref>;

        $i0 = virtualinvoke $r4.<java.lang.String: int length()>();

        if $i0 != 0 goto label4;

        r0.<org.apache.batik.util.ParsedURLData: java.lang.String ref> = null;

     label4:
        return;
    }

    protected java.net.URL buildURL() throws java.net.MalformedURLException
    {
        java.net.URL $r13, $r14, $r15;
        int $i0, $i1, $i3;
        java.lang.String $r1, $r3, $r4, $r5, $r7, $r8, $r10, $r11, r12;
        org.apache.batik.util.ParsedURLData r0;

        r0 := @this: org.apache.batik.util.ParsedURLData;

        $r1 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String protocol>;

        if $r1 == null goto label3;

        $r4 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String host>;

        if $r4 == null goto label3;

        r12 = "";

        $r5 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String path>;

        if $r5 == null goto label1;

        r12 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String path>;

     label1:
        $i0 = r0.<org.apache.batik.util.ParsedURLData: int port>;

        $i3 = (int) -1;

        if $i0 != $i3 goto label2;

        $r13 = new java.net.URL;

        $r11 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String protocol>;

        $r10 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String host>;

        specialinvoke $r13.<java.net.URL: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r11, $r10, r12);

        return $r13;

     label2:
        $r14 = new java.net.URL;

        $r8 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String protocol>;

        $r7 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String host>;

        $i1 = r0.<org.apache.batik.util.ParsedURLData: int port>;

        specialinvoke $r14.<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String)>($r8, $r7, $i1, r12);

        return $r14;

     label3:
        $r15 = new java.net.URL;

        $r3 = virtualinvoke r0.<org.apache.batik.util.ParsedURLData: java.lang.String toString()>();

        specialinvoke $r15.<java.net.URL: void <init>(java.lang.String)>($r3);

        return $r15;
    }

    public int hashCode()
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10;
        java.lang.String $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14;
        org.apache.batik.util.ParsedURLData r0;

        r0 := @this: org.apache.batik.util.ParsedURLData;

        i10 = r0.<org.apache.batik.util.ParsedURLData: int port>;

        $r1 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String protocol>;

        if $r1 == null goto label1;

        $r13 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String protocol>;

        $i9 = virtualinvoke $r13.<java.lang.String: int hashCode()>();

        i10 = i10 ^ $i9;

     label1:
        $r2 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String host>;

        if $r2 == null goto label2;

        $r12 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String host>;

        $i8 = virtualinvoke $r12.<java.lang.String: int hashCode()>();

        i10 = i10 ^ $i8;

     label2:
        $r3 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String path>;

        if $r3 == null goto label4;

        $r8 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String path>;

        $i4 = virtualinvoke $r8.<java.lang.String: int length()>();

        if $i4 <= 20 goto label3;

        $r10 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String path>;

        $i6 = $i4 - 20;

        $r11 = virtualinvoke $r10.<java.lang.String: java.lang.String substring(int)>($i6);

        $i7 = virtualinvoke $r11.<java.lang.String: int hashCode()>();

        i10 = i10 ^ $i7;

        goto label4;

     label3:
        $r9 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String path>;

        $i5 = virtualinvoke $r9.<java.lang.String: int hashCode()>();

        i10 = i10 ^ $i5;

     label4:
        $r14 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String ref>;

        if $r14 == null goto label6;

        $r4 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String ref>;

        $i0 = virtualinvoke $r4.<java.lang.String: int length()>();

        if $i0 <= 20 goto label5;

        $r6 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String ref>;

        $i2 = $i0 - 20;

        $r7 = virtualinvoke $r6.<java.lang.String: java.lang.String substring(int)>($i2);

        $i3 = virtualinvoke $r7.<java.lang.String: int hashCode()>();

        i10 = i10 ^ $i3;

        goto label6;

     label5:
        $r5 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String ref>;

        $i1 = virtualinvoke $r5.<java.lang.String: int hashCode()>();

        i10 = i10 ^ $i1;

     label6:
        return i10;
    }

    public boolean equals(java.lang.Object)
    {
        int $i0, $i1;
        java.lang.String $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.batik.util.ParsedURLData r1, r2;
        java.lang.Object r0;

        r2 := @this: org.apache.batik.util.ParsedURLData;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label01;

        return 0;

     label01:
        $z0 = r0 instanceof org.apache.batik.util.ParsedURLData;

        if $z0 != 0 goto label02;

        return 0;

     label02:
        r1 = (org.apache.batik.util.ParsedURLData) r0;

        $i1 = r1.<org.apache.batik.util.ParsedURLData: int port>;

        $i0 = r2.<org.apache.batik.util.ParsedURLData: int port>;

        if $i1 == $i0 goto label03;

        return 0;

     label03:
        $r3 = r1.<org.apache.batik.util.ParsedURLData: java.lang.String protocol>;

        if $r3 != null goto label04;

        $r22 = r2.<org.apache.batik.util.ParsedURLData: java.lang.String protocol>;

        if $r22 == null goto label06;

        return 0;

     label04:
        $r4 = r2.<org.apache.batik.util.ParsedURLData: java.lang.String protocol>;

        if $r4 != null goto label05;

        return 0;

     label05:
        $r6 = r1.<org.apache.batik.util.ParsedURLData: java.lang.String protocol>;

        $r5 = r2.<org.apache.batik.util.ParsedURLData: java.lang.String protocol>;

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z1 != 0 goto label06;

        return 0;

     label06:
        $r7 = r1.<org.apache.batik.util.ParsedURLData: java.lang.String host>;

        if $r7 != null goto label07;

        $r21 = r2.<org.apache.batik.util.ParsedURLData: java.lang.String host>;

        if $r21 == null goto label09;

        return 0;

     label07:
        $r8 = r2.<org.apache.batik.util.ParsedURLData: java.lang.String host>;

        if $r8 != null goto label08;

        return 0;

     label08:
        $r10 = r1.<org.apache.batik.util.ParsedURLData: java.lang.String host>;

        $r9 = r2.<org.apache.batik.util.ParsedURLData: java.lang.String host>;

        $z2 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z2 != 0 goto label09;

        return 0;

     label09:
        $r11 = r1.<org.apache.batik.util.ParsedURLData: java.lang.String ref>;

        if $r11 != null goto label10;

        $r20 = r2.<org.apache.batik.util.ParsedURLData: java.lang.String ref>;

        if $r20 == null goto label12;

        return 0;

     label10:
        $r12 = r2.<org.apache.batik.util.ParsedURLData: java.lang.String ref>;

        if $r12 != null goto label11;

        return 0;

     label11:
        $r14 = r1.<org.apache.batik.util.ParsedURLData: java.lang.String ref>;

        $r13 = r2.<org.apache.batik.util.ParsedURLData: java.lang.String ref>;

        $z3 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r13);

        if $z3 != 0 goto label12;

        return 0;

     label12:
        $r15 = r1.<org.apache.batik.util.ParsedURLData: java.lang.String path>;

        if $r15 != null goto label13;

        $r19 = r2.<org.apache.batik.util.ParsedURLData: java.lang.String path>;

        if $r19 == null goto label15;

        return 0;

     label13:
        $r16 = r2.<org.apache.batik.util.ParsedURLData: java.lang.String path>;

        if $r16 != null goto label14;

        return 0;

     label14:
        $r18 = r1.<org.apache.batik.util.ParsedURLData: java.lang.String path>;

        $r17 = r2.<org.apache.batik.util.ParsedURLData: java.lang.String path>;

        $z4 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>($r17);

        if $z4 != 0 goto label15;

        return 0;

     label15:
        return 1;
    }

    public java.lang.String getContentType(java.lang.String)
    {
        java.io.IOException $r4;
        java.lang.String $r1, r2, $r3, $r5;
        org.apache.batik.util.ParsedURLData r0;
        boolean $z0;

        r0 := @this: org.apache.batik.util.ParsedURLData;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String contentType>;

        if $r1 == null goto label1;

        $r3 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String contentType>;

        return $r3;

     label1:
        $z0 = r0.<org.apache.batik.util.ParsedURLData: boolean hasBeenOpened>;

        if $z0 != 0 goto label5;

     label2:
        virtualinvoke r0.<org.apache.batik.util.ParsedURLData: java.io.InputStream openStreamInternal(java.lang.String,java.util.Iterator,java.util.Iterator)>(r2, null, null);

     label3:
        goto label5;

     label4:
        $r4 := @caughtexception;

     label5:
        $r5 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String contentType>;

        return $r5;

        catch java.io.IOException from label2 to label3 with label4;
    }

    public java.lang.String getContentTypeMediaType(java.lang.String)
    {
        java.lang.String $r1, r2, $r3, $r4;
        org.apache.batik.util.ParsedURLData r0;

        r0 := @this: org.apache.batik.util.ParsedURLData;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String contentTypeMediaType>;

        if $r1 == null goto label1;

        $r4 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String contentTypeMediaType>;

        return $r4;

     label1:
        virtualinvoke r0.<org.apache.batik.util.ParsedURLData: void extractContentTypeParts(java.lang.String)>(r2);

        $r3 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String contentTypeMediaType>;

        return $r3;
    }

    public java.lang.String getContentTypeCharset(java.lang.String)
    {
        java.lang.String $r1, r2, $r3, $r4;
        org.apache.batik.util.ParsedURLData r0;

        r0 := @this: org.apache.batik.util.ParsedURLData;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String contentTypeMediaType>;

        if $r1 == null goto label1;

        $r4 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String contentTypeCharset>;

        return $r4;

     label1:
        virtualinvoke r0.<org.apache.batik.util.ParsedURLData: void extractContentTypeParts(java.lang.String)>(r2);

        $r3 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String contentTypeCharset>;

        return $r3;
    }

    public boolean hasContentTypeParameter(java.lang.String, java.lang.String)
    {
        org.apache.batik.util.ParsedURLData r0;
        int $i0, $i1, $i3, $i4, $i5, i11, i12, $i13, $i14, $i15, $i16, $i17, $i18;
        java.lang.String r1, $r2, $r3, r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        char $c2, $c6, $c7, $c8, $c9, $c10;

        r0 := @this: org.apache.batik.util.ParsedURLData;

        r1 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        virtualinvoke r0.<org.apache.batik.util.ParsedURLData: java.lang.String getContentType(java.lang.String)>(r1);

        $r2 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String contentType>;

        if $r2 != null goto label01;

        return 0;

     label01:
        i11 = 0;

        $r3 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String contentType>;

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        $i1 = virtualinvoke r4.<java.lang.String: int length()>();

        goto label05;

     label02:
        $r5 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String contentType>;

        $c2 = virtualinvoke $r5.<java.lang.String: char charAt(int)>(i11);

        $i13 = (int) $c2;

        lookupswitch($i13)
        {
            case 32: goto label03;
            case 59: goto label03;
            default: goto label04;
        };

     label03:
        goto label06;

     label04:
        i11 = i11 + 1;

     label05:
        if i11 < $i0 goto label02;

     label06:
        if i11 != $i0 goto label07;

        $r12 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String contentType>;

        r0.<org.apache.batik.util.ParsedURLData: java.lang.String contentTypeMediaType> = $r12;

        goto label09;

     label07:
        $r6 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String contentType>;

        $r7 = virtualinvoke $r6.<java.lang.String: java.lang.String substring(int,int)>(0, i11);

        r0.<org.apache.batik.util.ParsedURLData: java.lang.String contentTypeMediaType> = $r7;

        goto label09;

     label08:
        i11 = i11 + 1;

     label09:
        if i11 >= $i0 goto label10;

        $r11 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String contentType>;

        $c10 = virtualinvoke $r11.<java.lang.String: char charAt(int)>(i11);

        $i14 = (int) $c10;

        if $i14 != 59 goto label08;

     label10:
        if i11 != $i0 goto label11;

        return 0;

     label11:
        i11 = i11 + 1;

        goto label13;

     label12:
        i11 = i11 + 1;

     label13:
        if i11 >= $i0 goto label14;

        $r10 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String contentType>;

        $c9 = virtualinvoke $r10.<java.lang.String: char charAt(int)>(i11);

        $i15 = (int) $c9;

        if $i15 == 32 goto label12;

     label14:
        $i3 = $i0 - $i1;

        $i4 = $i3 - 1;

        if i11 < $i4 goto label15;

        return 0;

     label15:
        i12 = 0;

        goto label18;

     label16:
        $r8 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String contentType>;

        $i5 = i11;

        i11 = i11 + 1;

        $c6 = virtualinvoke $r8.<java.lang.String: char charAt(int)>($i5);

        $c7 = virtualinvoke r4.<java.lang.String: char charAt(int)>(i12);

        $i16 = (int) $c6;

        $i17 = (int) $c7;

        if $i16 == $i17 goto label17;

        goto label09;

     label17:
        i12 = i12 + 1;

     label18:
        if i12 < $i1 goto label16;

        $r9 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String contentType>;

        $c8 = virtualinvoke $r9.<java.lang.String: char charAt(int)>(i11);

        $i18 = (int) $c8;

        if $i18 != 61 goto label19;

        return 1;

     label19:
        goto label09;
    }

    protected void extractContentTypeParts(java.lang.String)
    {
        org.apache.batik.util.ParsedURLData r0;
        int $i0, $i2, $i4, $i6, $i8, $i10, $i12, $i14, $i16, i18, i22, i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35;
        java.lang.String r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20;
        char $c1, $c3, $c5, $c7, $c9, $c11, $c13, $c15, $c17, $c19, $c20, $c21;

        r0 := @this: org.apache.batik.util.ParsedURLData;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.apache.batik.util.ParsedURLData: java.lang.String getContentType(java.lang.String)>(r1);

        $r2 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String contentType>;

        if $r2 != null goto label01;

        return;

     label01:
        i22 = 0;

        $r3 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String contentType>;

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        goto label05;

     label02:
        $r4 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String contentType>;

        $c1 = virtualinvoke $r4.<java.lang.String: char charAt(int)>(i22);

        $i24 = (int) $c1;

        lookupswitch($i24)
        {
            case 32: goto label03;
            case 59: goto label03;
            default: goto label04;
        };

     label03:
        goto label06;

     label04:
        i22 = i22 + 1;

     label05:
        if i22 < $i0 goto label02;

     label06:
        if i22 != $i0 goto label07;

        $r20 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String contentType>;

        r0.<org.apache.batik.util.ParsedURLData: java.lang.String contentTypeMediaType> = $r20;

        goto label09;

     label07:
        $r5 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String contentType>;

        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String substring(int,int)>(0, i22);

        r0.<org.apache.batik.util.ParsedURLData: java.lang.String contentTypeMediaType> = $r6;

        goto label09;

     label08:
        i22 = i22 + 1;

     label09:
        if i22 >= $i0 goto label10;

        $r19 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String contentType>;

        $c21 = virtualinvoke $r19.<java.lang.String: char charAt(int)>(i22);

        $i25 = (int) $c21;

        if $i25 != 59 goto label08;

     label10:
        if i22 != $i0 goto label11;

        return;

     label11:
        i23 = i22 + 1;

        goto label13;

     label12:
        i23 = i23 + 1;

     label13:
        if i23 >= $i0 goto label14;

        $r18 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String contentType>;

        $c20 = virtualinvoke $r18.<java.lang.String: char charAt(int)>(i23);

        $i26 = (int) $c20;

        if $i26 == 32 goto label12;

     label14:
        $i2 = $i0 - 8;

        if i23 < $i2 goto label15;

        return;

     label15:
        $r7 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String contentType>;

        i22 = i23 + 1;

        $c3 = virtualinvoke $r7.<java.lang.String: char charAt(int)>(i23);

        $i27 = (int) $c3;

        if $i27 != 99 goto label09;

        $r8 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String contentType>;

        $i4 = i22;

        i22 = i22 + 1;

        $c5 = virtualinvoke $r8.<java.lang.String: char charAt(int)>($i4);

        $i28 = (int) $c5;

        if $i28 == 104 goto label16;

        goto label09;

     label16:
        $r9 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String contentType>;

        $i6 = i22;

        i22 = i22 + 1;

        $c7 = virtualinvoke $r9.<java.lang.String: char charAt(int)>($i6);

        $i29 = (int) $c7;

        if $i29 == 97 goto label17;

        goto label09;

     label17:
        $r10 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String contentType>;

        $i8 = i22;

        i22 = i22 + 1;

        $c9 = virtualinvoke $r10.<java.lang.String: char charAt(int)>($i8);

        $i30 = (int) $c9;

        if $i30 == 114 goto label18;

        goto label09;

     label18:
        $r11 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String contentType>;

        $i10 = i22;

        i22 = i22 + 1;

        $c11 = virtualinvoke $r11.<java.lang.String: char charAt(int)>($i10);

        $i31 = (int) $c11;

        if $i31 == 115 goto label19;

        goto label09;

     label19:
        $r12 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String contentType>;

        $i12 = i22;

        i22 = i22 + 1;

        $c13 = virtualinvoke $r12.<java.lang.String: char charAt(int)>($i12);

        $i32 = (int) $c13;

        if $i32 == 101 goto label20;

        goto label09;

     label20:
        $r13 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String contentType>;

        $i14 = i22;

        i22 = i22 + 1;

        $c15 = virtualinvoke $r13.<java.lang.String: char charAt(int)>($i14);

        $i33 = (int) $c15;

        if $i33 == 116 goto label21;

        goto label09;

     label21:
        $r14 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String contentType>;

        $i16 = i22;

        i22 = i22 + 1;

        $c17 = virtualinvoke $r14.<java.lang.String: char charAt(int)>($i16);

        $i34 = (int) $c17;

        if $i34 == 61 goto label22;

        goto label09;

     label22:
        i18 = i22;

        goto label26;

     label23:
        $r15 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String contentType>;

        $c19 = virtualinvoke $r15.<java.lang.String: char charAt(int)>(i22);

        $i35 = (int) $c19;

        lookupswitch($i35)
        {
            case 32: goto label24;
            case 59: goto label24;
            default: goto label25;
        };

     label24:
        goto label27;

     label25:
        i22 = i22 + 1;

     label26:
        if i22 < $i0 goto label23;

     label27:
        $r16 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String contentType>;

        $r17 = virtualinvoke $r16.<java.lang.String: java.lang.String substring(int,int)>(i18, i22);

        r0.<org.apache.batik.util.ParsedURLData: java.lang.String contentTypeCharset> = $r17;

        return;
    }

    public java.lang.String getContentEncoding(java.lang.String)
    {
        java.io.IOException $r4;
        java.lang.String $r1, r2, $r3, $r5;
        org.apache.batik.util.ParsedURLData r0;
        boolean $z0;

        r0 := @this: org.apache.batik.util.ParsedURLData;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String contentEncoding>;

        if $r1 == null goto label1;

        $r3 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String contentEncoding>;

        return $r3;

     label1:
        $z0 = r0.<org.apache.batik.util.ParsedURLData: boolean hasBeenOpened>;

        if $z0 != 0 goto label5;

     label2:
        virtualinvoke r0.<org.apache.batik.util.ParsedURLData: java.io.InputStream openStreamInternal(java.lang.String,java.util.Iterator,java.util.Iterator)>(r2, null, null);

     label3:
        goto label5;

     label4:
        $r4 := @caughtexception;

     label5:
        $r5 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String contentEncoding>;

        return $r5;

        catch java.io.IOException from label2 to label3 with label4;
    }

    public boolean complete()
    {
        java.net.MalformedURLException $r1;
        org.apache.batik.util.ParsedURLData r0;

        r0 := @this: org.apache.batik.util.ParsedURLData;

     label1:
        virtualinvoke r0.<org.apache.batik.util.ParsedURLData: java.net.URL buildURL()>();

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        return 0;

     label4:
        return 1;

        catch java.net.MalformedURLException from label1 to label2 with label3;
    }

    public java.io.InputStream openStream(java.lang.String, java.util.Iterator) throws java.io.IOException
    {
        java.util.List $r3;
        java.util.Iterator r2, $r4;
        java.lang.String r1;
        org.apache.batik.util.ParsedURLData r0;
        java.io.InputStream $r5, $r6;

        r0 := @this: org.apache.batik.util.ParsedURLData;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Iterator;

        $r3 = <org.apache.batik.util.ParsedURLData: java.util.List acceptedEncodings>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

        $r5 = virtualinvoke r0.<org.apache.batik.util.ParsedURLData: java.io.InputStream openStreamInternal(java.lang.String,java.util.Iterator,java.util.Iterator)>(r1, r2, $r4);

        if $r5 != null goto label1;

        return null;

     label1:
        r0.<org.apache.batik.util.ParsedURLData: java.io.InputStream stream> = null;

        $r6 = staticinvoke <org.apache.batik.util.ParsedURLData: java.io.InputStream checkGZIP(java.io.InputStream)>($r5);

        return $r6;
    }

    public java.io.InputStream openStreamRaw(java.lang.String, java.util.Iterator) throws java.io.IOException
    {
        java.util.Iterator r2;
        java.lang.String r1;
        org.apache.batik.util.ParsedURLData r0;
        java.io.InputStream $r3;

        r0 := @this: org.apache.batik.util.ParsedURLData;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Iterator;

        $r3 = virtualinvoke r0.<org.apache.batik.util.ParsedURLData: java.io.InputStream openStreamInternal(java.lang.String,java.util.Iterator,java.util.Iterator)>(r1, r2, null);

        r0.<org.apache.batik.util.ParsedURLData: java.io.InputStream stream> = null;

        return $r3;
    }

    protected java.io.InputStream openStreamInternal(java.lang.String, java.util.Iterator, java.util.Iterator) throws java.io.IOException
    {
        java.net.URL $r2;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.batik.util.ParsedURLData r0;
        java.net.URLConnection $r3;
        java.lang.StringBuffer $r9, $r10, $r12, $r14, $r15, $r16, $r17, $r18, $r20, $r22, $r23, $r24;
        java.lang.String r4, $r7, $r8, $r13, $r21, r28, r29;
        java.util.Iterator r5, r6;
        java.net.MalformedURLException $r26;
        java.io.IOException $r27;
        java.lang.Object $r11, $r19;
        java.io.InputStream $r1, $r25, $r30;

        r0 := @this: org.apache.batik.util.ParsedURLData;

        r4 := @parameter0: java.lang.String;

        r5 := @parameter1: java.util.Iterator;

        r6 := @parameter2: java.util.Iterator;

        $r1 = r0.<org.apache.batik.util.ParsedURLData: java.io.InputStream stream>;

        if $r1 == null goto label01;

        $r25 = r0.<org.apache.batik.util.ParsedURLData: java.io.InputStream stream>;

        return $r25;

     label01:
        r0.<org.apache.batik.util.ParsedURLData: boolean hasBeenOpened> = 1;

     label02:
        $r2 = virtualinvoke r0.<org.apache.batik.util.ParsedURLData: java.net.URL buildURL()>();

     label03:
        goto label05;

     label04:
        $r26 := @caughtexception;

        $r27 = new java.io.IOException;

        specialinvoke $r27.<java.io.IOException: void <init>(java.lang.String)>("Unable to make sense of URL for connection");

        throw $r27;

     label05:
        if $r2 != null goto label06;

        return null;

     label06:
        $r3 = virtualinvoke $r2.<java.net.URL: java.net.URLConnection openConnection()>();

        $z0 = $r3 instanceof java.net.HttpURLConnection;

        if $z0 == 0 goto label14;

        if r4 == null goto label07;

        virtualinvoke $r3.<java.net.URLConnection: void setRequestProperty(java.lang.String,java.lang.String)>("User-Agent", r4);

     label07:
        if r5 == null goto label10;

        r28 = "";

        goto label09;

     label08:
        $r17 = new java.lang.StringBuffer;

        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r28);

        $r19 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();

        r28 = $r21;

        $z2 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label09;

        $r22 = new java.lang.StringBuffer;

        specialinvoke $r22.<java.lang.StringBuffer: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r21);

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

        r28 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.String toString()>();

     label09:
        $z3 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z3 != 0 goto label08;

        virtualinvoke $r3.<java.net.URLConnection: void setRequestProperty(java.lang.String,java.lang.String)>("Accept", r28);

     label10:
        if r6 == null goto label13;

        r29 = "";

        goto label12;

     label11:
        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r29);

        $r11 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        r29 = $r13;

        $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label12;

        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

        r29 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

     label12:
        $z4 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z4 != 0 goto label11;

        virtualinvoke $r3.<java.net.URLConnection: void setRequestProperty(java.lang.String,java.lang.String)>("Accept-Encoding", r29);

     label13:
        $r7 = virtualinvoke $r3.<java.net.URLConnection: java.lang.String getContentType()>();

        r0.<org.apache.batik.util.ParsedURLData: java.lang.String contentType> = $r7;

        $r8 = virtualinvoke $r3.<java.net.URLConnection: java.lang.String getContentEncoding()>();

        r0.<org.apache.batik.util.ParsedURLData: java.lang.String contentEncoding> = $r8;

     label14:
        $r30 = virtualinvoke $r3.<java.net.URLConnection: java.io.InputStream getInputStream()>();

        r0.<org.apache.batik.util.ParsedURLData: java.io.InputStream stream> = $r30;

        return $r30;

        catch java.net.MalformedURLException from label02 to label03 with label04;
    }

    public java.lang.String getPortStr()
    {
        java.lang.StringBuffer $r4, $r5, $r9, $r10, $r11, $r13, $r15, $r17, $r19, $r20, $r22, $r23, $r24, $r25;
        int $i0, $i1, $i2, $i4, $i6;
        java.lang.String $r1, $r2, $r6, $r7, $r14, $r18, r21;
        org.apache.batik.util.ParsedURLData r0;

        r0 := @this: org.apache.batik.util.ParsedURLData;

        r21 = "";

        $r1 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String protocol>;

        if $r1 == null goto label1;

        $r22 = new java.lang.StringBuffer;

        specialinvoke $r22.<java.lang.StringBuffer: void <init>()>();

        $r17 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("");

        $r18 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String protocol>;

        $r19 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();

     label1:
        $r2 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String host>;

        if $r2 != null goto label2;

        $i2 = r0.<org.apache.batik.util.ParsedURLData: int port>;

        $i4 = (int) -1;

        if $i2 == $i4 goto label4;

     label2:
        $r23 = new java.lang.StringBuffer;

        specialinvoke $r23.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r21);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("//");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        r21 = $r6;

        $r7 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String host>;

        if $r7 == null goto label3;

        $r24 = new java.lang.StringBuffer;

        specialinvoke $r24.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r14 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String host>;

        $r15 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        r21 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

     label3:
        $i0 = r0.<org.apache.batik.util.ParsedURLData: int port>;

        $i6 = (int) -1;

        if $i0 == $i6 goto label4;

        $r25 = new java.lang.StringBuffer;

        specialinvoke $r25.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r21);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        $i1 = r0.<org.apache.batik.util.ParsedURLData: int port>;

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        r21 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

     label4:
        return r21;
    }

    protected boolean sameFile(org.apache.batik.util.ParsedURLData)
    {
        int $i0, $i1;
        java.lang.String $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16;
        boolean $z0, $z1, $z2;
        org.apache.batik.util.ParsedURLData r0, r1;

        r0 := @this: org.apache.batik.util.ParsedURLData;

        r1 := @parameter0: org.apache.batik.util.ParsedURLData;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $i1 = r0.<org.apache.batik.util.ParsedURLData: int port>;

        $i0 = r1.<org.apache.batik.util.ParsedURLData: int port>;

        if $i1 != $i0 goto label5;

        $r3 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String path>;

        $r2 = r1.<org.apache.batik.util.ParsedURLData: java.lang.String path>;

        if $r3 == $r2 goto label2;

        $r14 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String path>;

        if $r14 == null goto label5;

        $r16 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String path>;

        $r15 = r1.<org.apache.batik.util.ParsedURLData: java.lang.String path>;

        $z2 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>($r15);

        if $z2 == 0 goto label5;

     label2:
        $r5 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String host>;

        $r4 = r1.<org.apache.batik.util.ParsedURLData: java.lang.String host>;

        if $r5 == $r4 goto label3;

        $r11 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String host>;

        if $r11 == null goto label5;

        $r13 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String host>;

        $r12 = r1.<org.apache.batik.util.ParsedURLData: java.lang.String host>;

        $z1 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z1 == 0 goto label5;

     label3:
        $r7 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String protocol>;

        $r6 = r1.<org.apache.batik.util.ParsedURLData: java.lang.String protocol>;

        if $r7 == $r6 goto label4;

        $r8 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String protocol>;

        if $r8 == null goto label5;

        $r10 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String protocol>;

        $r9 = r1.<org.apache.batik.util.ParsedURLData: java.lang.String protocol>;

        $z0 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z0 == 0 goto label5;

     label4:
        return 1;

     label5:
        return 0;
    }

    public java.lang.String toString()
    {
        org.apache.batik.util.ParsedURLData r0;
        java.lang.StringBuffer $r4, $r5, $r6, $r8, $r9, $r10, $r12;
        java.lang.String $r1, $r2, $r3, $r7, $r11, r13;

        r0 := @this: org.apache.batik.util.ParsedURLData;

        $r1 = virtualinvoke r0.<org.apache.batik.util.ParsedURLData: java.lang.String getPortStr()>();

        r13 = $r1;

        $r2 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String path>;

        if $r2 == null goto label1;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r11 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String path>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

     label1:
        $r3 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String ref>;

        if $r3 == null goto label2;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r13);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("#");

        $r7 = r0.<org.apache.batik.util.ParsedURLData: java.lang.String ref>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        r13 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

     label2:
        return r13;
    }

    static void <clinit>()
    {
        byte[] $r2;
        java.util.List $r1;
        java.util.LinkedList $r0;

        <org.apache.batik.util.ParsedURLData: java.lang.String HTTP_ACCEPT_ENCODING_HEADER> = "Accept-Encoding";

        <org.apache.batik.util.ParsedURLData: java.lang.String HTTP_ACCEPT_LANGUAGE_HEADER> = "Accept-Language";

        <org.apache.batik.util.ParsedURLData: java.lang.String HTTP_ACCEPT_HEADER> = "Accept";

        <org.apache.batik.util.ParsedURLData: java.lang.String HTTP_USER_AGENT_HEADER> = "User-Agent";

        $r0 = new java.util.LinkedList;

        specialinvoke $r0.<java.util.LinkedList: void <init>()>();

        <org.apache.batik.util.ParsedURLData: java.util.List acceptedEncodings> = $r0;

        $r1 = <org.apache.batik.util.ParsedURLData: java.util.List acceptedEncodings>;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>("gzip");

        $r2 = newarray (byte)[2];

        $r2[0] = 31;

        $r2[1] = -117;

        <org.apache.batik.util.ParsedURLData: byte[] GZIP_MAGIC> = $r2;

        return;
    }
}
