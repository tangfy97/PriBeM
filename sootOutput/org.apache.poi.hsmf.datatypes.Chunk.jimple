public abstract class org.apache.poi.hsmf.datatypes.Chunk extends java.lang.Object
{
    public static final java.lang.String DEFAULT_NAME_PREFIX;
    protected int chunkId;
    protected org.apache.poi.hsmf.datatypes.Types$MAPIType type;
    protected java.lang.String namePrefix;

    protected void <init>(java.lang.String, int, org.apache.poi.hsmf.datatypes.Types$MAPIType)
    {
        org.apache.poi.hsmf.datatypes.Chunk r0;
        int i0;
        java.lang.String r1;
        org.apache.poi.hsmf.datatypes.Types$MAPIType r2;

        r0 := @this: org.apache.poi.hsmf.datatypes.Chunk;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: org.apache.poi.hsmf.datatypes.Types$MAPIType;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.poi.hsmf.datatypes.Chunk: java.lang.String namePrefix> = r1;

        r0.<org.apache.poi.hsmf.datatypes.Chunk: int chunkId> = i0;

        r0.<org.apache.poi.hsmf.datatypes.Chunk: org.apache.poi.hsmf.datatypes.Types$MAPIType type> = r2;

        return;
    }

    protected void <init>(int, org.apache.poi.hsmf.datatypes.Types$MAPIType)
    {
        org.apache.poi.hsmf.datatypes.Chunk r0;
        int i0;
        org.apache.poi.hsmf.datatypes.Types$MAPIType r1;

        r0 := @this: org.apache.poi.hsmf.datatypes.Chunk;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.poi.hsmf.datatypes.Types$MAPIType;

        specialinvoke r0.<org.apache.poi.hsmf.datatypes.Chunk: void <init>(java.lang.String,int,org.apache.poi.hsmf.datatypes.Types$MAPIType)>("__substg1.0_", i0, r1);

        return;
    }

    public int getChunkId()
    {
        org.apache.poi.hsmf.datatypes.Chunk r0;
        int $i0;

        r0 := @this: org.apache.poi.hsmf.datatypes.Chunk;

        $i0 = r0.<org.apache.poi.hsmf.datatypes.Chunk: int chunkId>;

        return $i0;
    }

    public org.apache.poi.hsmf.datatypes.Types$MAPIType getType()
    {
        org.apache.poi.hsmf.datatypes.Chunk r0;
        org.apache.poi.hsmf.datatypes.Types$MAPIType $r1;

        r0 := @this: org.apache.poi.hsmf.datatypes.Chunk;

        $r1 = r0.<org.apache.poi.hsmf.datatypes.Chunk: org.apache.poi.hsmf.datatypes.Types$MAPIType type>;

        return $r1;
    }

    public java.lang.String getEntryName()
    {
        int $i0, $i1;
        org.apache.poi.hsmf.datatypes.Types$MAPIType $r1;
        java.lang.String $r2, $r4, $r6, $r8, $r10, r14;
        org.apache.poi.hsmf.datatypes.Chunk r0;
        java.lang.StringBuilder $r3, $r5, $r7, $r9, $r11, $r12, $r13;

        r0 := @this: org.apache.poi.hsmf.datatypes.Chunk;

        $r1 = r0.<org.apache.poi.hsmf.datatypes.Chunk: org.apache.poi.hsmf.datatypes.Types$MAPIType type>;

        $r2 = virtualinvoke $r1.<org.apache.poi.hsmf.datatypes.Types$MAPIType: java.lang.String asFileEnding()>();

        $i0 = r0.<org.apache.poi.hsmf.datatypes.Chunk: int chunkId>;

        r14 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

     label1:
        $i1 = virtualinvoke r14.<java.lang.String: int length()>();

        if $i1 >= 4 goto label2;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14);

        r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label1;

     label2:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = r0.<org.apache.poi.hsmf.datatypes.Chunk: java.lang.String namePrefix>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke r14.<java.lang.String: java.lang.String toUpperCase()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r2.<java.lang.String: java.lang.String toUpperCase()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }

    public abstract void writeValue(java.io.OutputStream) throws java.io.IOException;

    public abstract void readValue(java.io.InputStream) throws java.io.IOException;

    public static void <clinit>()
    {
        <org.apache.poi.hsmf.datatypes.Chunk: java.lang.String DEFAULT_NAME_PREFIX> = "__substg1.0_";

        return;
    }
}
