public class org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream extends org.apache.commons.compress.archivers.ArchiveOutputStream implements org.apache.commons.compress.archivers.cpio.CpioConstants
{
    private org.apache.commons.compress.archivers.cpio.CpioArchiveEntry entry;
    private boolean closed;
    private boolean finished;
    private final short entryFormat;
    private final java.util.HashMap names;
    private long crc;
    private long written;
    private final java.io.OutputStream out;
    private final int blockSize;
    private long nextArtificalDeviceAndInode;
    private final org.apache.commons.compress.archivers.zip.ZipEncoding encoding;

    public void <init>(java.io.OutputStream, short)
    {
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream r0;
        java.io.OutputStream r1;
        short s0;

        r0 := @this: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream;

        r1 := @parameter0: java.io.OutputStream;

        s0 := @parameter1: short;

        specialinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: void <init>(java.io.OutputStream,short,int,java.lang.String)>(r1, s0, 512, "US-ASCII");

        return;
    }

    public void <init>(java.io.OutputStream, short, int)
    {
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream r0;
        java.io.OutputStream r1;
        short s0;
        int i1;

        r0 := @this: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream;

        r1 := @parameter0: java.io.OutputStream;

        s0 := @parameter1: short;

        i1 := @parameter2: int;

        specialinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: void <init>(java.io.OutputStream,short,int,java.lang.String)>(r1, s0, i1, "US-ASCII");

        return;
    }

    public void <init>(java.io.OutputStream, short, int, java.lang.String)
    {
        java.io.OutputStream r2;
        java.util.HashMap $r10;
        org.apache.commons.compress.archivers.zip.ZipEncoding $r4;
        java.lang.IllegalArgumentException $r12;
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream r0;
        short s0;
        int i1, $i2, $i3;
        java.lang.StringBuilder $r7, $r8, $r11;
        java.lang.String r3, $r9;

        r0 := @this: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream;

        r2 := @parameter0: java.io.OutputStream;

        s0 := @parameter1: short;

        i1 := @parameter2: int;

        r3 := @parameter3: java.lang.String;

        specialinvoke r0.<org.apache.commons.compress.archivers.ArchiveOutputStream: void <init>()>();

        r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: boolean closed> = 0;

        $r10 = new java.util.HashMap;

        specialinvoke $r10.<java.util.HashMap: void <init>()>();

        r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: java.util.HashMap names> = $r10;

        r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: long crc> = 0L;

        r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: long nextArtificalDeviceAndInode> = 1L;

        r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: java.io.OutputStream out> = r2;

        $i2 = (int) s0;

        tableswitch($i2)
        {
            case 1: goto label1;
            case 2: goto label1;
            case 3: goto label2;
            case 4: goto label1;
            case 5: goto label2;
            case 6: goto label2;
            case 7: goto label2;
            case 8: goto label1;
            default: goto label2;
        };

     label1:
        goto label3;

     label2:
        $r12 = new java.lang.IllegalArgumentException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown format: ");

        $i3 = (int) s0;

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r12;

     label3:
        r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: short entryFormat> = s0;

        r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: int blockSize> = i1;

        $r4 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipEncodingHelper: org.apache.commons.compress.archivers.zip.ZipEncoding getZipEncoding(java.lang.String)>(r3);

        r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipEncoding encoding> = $r4;

        return;
    }

    public void <init>(java.io.OutputStream)
    {
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream r0;
        java.io.OutputStream r1;

        r0 := @this: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream;

        r1 := @parameter0: java.io.OutputStream;

        specialinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: void <init>(java.io.OutputStream,short)>(r1, 1);

        return;
    }

    public void <init>(java.io.OutputStream, java.lang.String)
    {
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream r0;
        java.io.OutputStream r1;
        java.lang.String r2;

        r0 := @this: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream;

        r1 := @parameter0: java.io.OutputStream;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: void <init>(java.io.OutputStream,short,int,java.lang.String)>(r1, 1, 512, r2);

        return;
    }

    private void ensureOpen() throws java.io.IOException
    {
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream r0;
        java.io.IOException $r1;
        boolean $z0;

        r0 := @this: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream;

        $z0 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: boolean closed>;

        if $z0 == 0 goto label1;

        $r1 = new java.io.IOException;

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("Stream closed");

        throw $r1;

     label1:
        return;
    }

    public void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry) throws java.io.IOException
    {
        byte $b1;
        boolean $z0;
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry r2, $r3;
        java.lang.StringBuilder $r9, $r11, $r15, $r16, $r17, $r18, $r22, $r24;
        org.apache.commons.compress.archivers.ArchiveEntry r1;
        long $l0, $l5, $l6;
        java.util.HashMap $r4;
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream r0;
        short $s2, $s3, $s4;
        int $i7, $i8, $i9, $i10;
        java.lang.String $r5, $r10, $r12, $r19;
        java.io.IOException $r21, $r23, $r25;
        java.lang.Object $r6;

        r0 := @this: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream;

        r1 := @parameter0: org.apache.commons.compress.archivers.ArchiveEntry;

        $z0 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: boolean finished>;

        if $z0 == 0 goto label1;

        $r21 = new java.io.IOException;

        specialinvoke $r21.<java.io.IOException: void <init>(java.lang.String)>("Stream has already been finished");

        throw $r21;

     label1:
        r2 = (org.apache.commons.compress.archivers.cpio.CpioArchiveEntry) r1;

        specialinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: void ensureOpen()>();

        $r3 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry entry>;

        if $r3 == null goto label2;

        virtualinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: void closeArchiveEntry()>();

     label2:
        $l0 = virtualinvoke r2.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: long getTime()>();

        $b1 = $l0 cmp -1L;

        if $b1 != 0 goto label3;

        $l5 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l6 = $l5 / 1000L;

        virtualinvoke r2.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: void setTime(long)>($l6);

     label3:
        $s2 = virtualinvoke r2.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: short getFormat()>();

        $s3 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: short entryFormat>;

        $i7 = (int) $s2;

        $i8 = (int) $s3;

        if $i7 == $i8 goto label4;

        $r23 = new java.io.IOException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Header format: ");

        $i9 = (int) $s2;

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not match existing format: ");

        $s4 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: short entryFormat>;

        $i10 = (int) $s4;

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<java.io.IOException: void <init>(java.lang.String)>($r19);

        throw $r23;

     label4:
        $r4 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: java.util.HashMap names>;

        $r5 = virtualinvoke r2.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: java.lang.String getName()>();

        $r6 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, r2);

        if $r6 == null goto label5;

        $r25 = new java.io.IOException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("duplicate entry: ");

        $r10 = virtualinvoke r2.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: java.lang.String getName()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<java.io.IOException: void <init>(java.lang.String)>($r12);

        throw $r25;

     label5:
        specialinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: void writeHeader(org.apache.commons.compress.archivers.cpio.CpioArchiveEntry)>(r2);

        r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry entry> = r2;

        r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: long written> = 0L;

        return;
    }

    private void writeHeader(org.apache.commons.compress.archivers.cpio.CpioArchiveEntry) throws java.io.IOException
    {
        byte[] $r3, $r5, $r7;
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream r1;
        short $s0, $s1;
        int $i2, $i3;
        java.lang.String $r12;
        java.io.OutputStream $r2, $r4, $r6;
        java.io.IOException $r14;
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry r0;
        java.lang.StringBuilder $r10, $r11, $r13;

        r1 := @this: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream;

        r0 := @parameter0: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;

        $s0 = virtualinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: short getFormat()>();

        $i2 = (int) $s0;

        tableswitch($i2)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label5;
            case 4: goto label3;
            case 5: goto label5;
            case 6: goto label5;
            case 7: goto label5;
            case 8: goto label4;
            default: goto label5;
        };

     label1:
        $r6 = r1.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: java.io.OutputStream out>;

        $r7 = staticinvoke <org.apache.commons.compress.utils.ArchiveUtils: byte[] toAsciiBytes(java.lang.String)>("070701");

        virtualinvoke $r6.<java.io.OutputStream: void write(byte[])>($r7);

        virtualinvoke r1.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: void count(int)>(6);

        specialinvoke r1.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: void writeNewEntry(org.apache.commons.compress.archivers.cpio.CpioArchiveEntry)>(r0);

        goto label6;

     label2:
        $r4 = r1.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: java.io.OutputStream out>;

        $r5 = staticinvoke <org.apache.commons.compress.utils.ArchiveUtils: byte[] toAsciiBytes(java.lang.String)>("070702");

        virtualinvoke $r4.<java.io.OutputStream: void write(byte[])>($r5);

        virtualinvoke r1.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: void count(int)>(6);

        specialinvoke r1.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: void writeNewEntry(org.apache.commons.compress.archivers.cpio.CpioArchiveEntry)>(r0);

        goto label6;

     label3:
        $r2 = r1.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: java.io.OutputStream out>;

        $r3 = staticinvoke <org.apache.commons.compress.utils.ArchiveUtils: byte[] toAsciiBytes(java.lang.String)>("070707");

        virtualinvoke $r2.<java.io.OutputStream: void write(byte[])>($r3);

        virtualinvoke r1.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: void count(int)>(6);

        specialinvoke r1.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: void writeOldAsciiEntry(org.apache.commons.compress.archivers.cpio.CpioArchiveEntry)>(r0);

        goto label6;

     label4:
        specialinvoke r1.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: void writeBinaryLong(long,int,boolean)>(29127L, 2, 1);

        specialinvoke r1.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: void writeOldBinaryEntry(org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,boolean)>(r0, 1);

        goto label6;

     label5:
        $r14 = new java.io.IOException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unknown format ");

        $s1 = virtualinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: short getFormat()>();

        $i3 = (int) $s1;

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.io.IOException: void <init>(java.lang.String)>($r12);

        throw $r14;

     label6:
        return;
    }

    private void writeNewEntry(org.apache.commons.compress.archivers.cpio.CpioArchiveEntry) throws java.io.IOException
    {
        byte $b2, $b8;
        boolean $z0;
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry r0;
        long $l0, $l1, $l3, $l4, $l5, $l6, $l7, $l9, $l10, $l11, $l12, l13, l14, $l15, $l16, $l17, $l18, $l19, $l20, $l21, $l22, $l23, $l26, $l27;
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream r3;
        int $i24, $i25, $i28;
        java.lang.String $r1, $r2, $r4, $r5;

        r3 := @this: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream;

        r0 := @parameter0: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;

        $l0 = virtualinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: long getInode()>();

        l13 = $l0;

        $l1 = virtualinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: long getDeviceMin()>();

        l14 = $l1;

        $r1 = "TRAILER!!!";

        $r2 = virtualinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        l14 = 0L;

        l13 = 0L;

        goto label3;

     label1:
        $b2 = $l0 cmp 0L;

        if $b2 != 0 goto label2;

        $b8 = $l1 cmp 0L;

        if $b8 != 0 goto label2;

        $l9 = r3.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: long nextArtificalDeviceAndInode>;

        l13 = $l9 & -1L;

        $l10 = r3.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: long nextArtificalDeviceAndInode>;

        $l11 = $l10 + 1L;

        r3.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: long nextArtificalDeviceAndInode> = $l11;

        $l12 = $l10 >> 32;

        l14 = $l12 & -1L;

        goto label3;

     label2:
        $l5 = r3.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: long nextArtificalDeviceAndInode>;

        $l3 = 4294967296L * $l1;

        $l4 = $l0 + $l3;

        $l6 = staticinvoke <java.lang.Math: long max(long,long)>($l5, $l4);

        $l7 = $l6 + 1L;

        r3.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: long nextArtificalDeviceAndInode> = $l7;

     label3:
        specialinvoke r3.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: void writeAsciiLong(long,int,int)>(l13, 8, 16);

        $l15 = virtualinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: long getMode()>();

        specialinvoke r3.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: void writeAsciiLong(long,int,int)>($l15, 8, 16);

        $l16 = virtualinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: long getUID()>();

        specialinvoke r3.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: void writeAsciiLong(long,int,int)>($l16, 8, 16);

        $l17 = virtualinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: long getGID()>();

        specialinvoke r3.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: void writeAsciiLong(long,int,int)>($l17, 8, 16);

        $l18 = virtualinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: long getNumberOfLinks()>();

        specialinvoke r3.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: void writeAsciiLong(long,int,int)>($l18, 8, 16);

        $l19 = virtualinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: long getTime()>();

        specialinvoke r3.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: void writeAsciiLong(long,int,int)>($l19, 8, 16);

        $l20 = virtualinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: long getSize()>();

        specialinvoke r3.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: void writeAsciiLong(long,int,int)>($l20, 8, 16);

        $l21 = virtualinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: long getDeviceMaj()>();

        specialinvoke r3.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: void writeAsciiLong(long,int,int)>($l21, 8, 16);

        specialinvoke r3.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: void writeAsciiLong(long,int,int)>(l14, 8, 16);

        $l22 = virtualinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: long getRemoteDeviceMaj()>();

        specialinvoke r3.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: void writeAsciiLong(long,int,int)>($l22, 8, 16);

        $l23 = virtualinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: long getRemoteDeviceMin()>();

        specialinvoke r3.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: void writeAsciiLong(long,int,int)>($l23, 8, 16);

        $r4 = virtualinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: java.lang.String getName()>();

        $i24 = virtualinvoke $r4.<java.lang.String: int length()>();

        $i25 = $i24 + 1;

        $l26 = (long) $i25;

        specialinvoke r3.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: void writeAsciiLong(long,int,int)>($l26, 8, 16);

        $l27 = virtualinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: long getChksum()>();

        specialinvoke r3.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: void writeAsciiLong(long,int,int)>($l27, 8, 16);

        $r5 = virtualinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: java.lang.String getName()>();

        specialinvoke r3.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: void writeCString(java.lang.String)>($r5);

        $i28 = virtualinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: int getHeaderPadCount()>();

        specialinvoke r3.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: void pad(int)>($i28);

        return;
    }

    private void writeOldAsciiEntry(org.apache.commons.compress.archivers.cpio.CpioArchiveEntry) throws java.io.IOException
    {
        byte $b2, $b8;
        boolean $z0;
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry r0;
        long $l0, $l1, $l3, $l4, $l5, $l6, $l7, $l9, $l10, $l11, $l12, l13, l14, $l15, $l16, $l17, $l18, $l19, $l20, $l23, $l24;
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream r3;
        int $i21, $i22;
        java.lang.String $r1, $r2, $r4, $r5;

        r3 := @this: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream;

        r0 := @parameter0: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;

        $l0 = virtualinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: long getInode()>();

        l13 = $l0;

        $l1 = virtualinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: long getDevice()>();

        l14 = $l1;

        $r1 = "TRAILER!!!";

        $r2 = virtualinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        l14 = 0L;

        l13 = 0L;

        goto label3;

     label1:
        $b2 = $l0 cmp 0L;

        if $b2 != 0 goto label2;

        $b8 = $l1 cmp 0L;

        if $b8 != 0 goto label2;

        $l9 = r3.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: long nextArtificalDeviceAndInode>;

        l13 = $l9 & 262143L;

        $l10 = r3.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: long nextArtificalDeviceAndInode>;

        $l11 = $l10 + 1L;

        r3.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: long nextArtificalDeviceAndInode> = $l11;

        $l12 = $l10 >> 18;

        l14 = $l12 & 262143L;

        goto label3;

     label2:
        $l5 = r3.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: long nextArtificalDeviceAndInode>;

        $l3 = 262144L * $l1;

        $l4 = $l0 + $l3;

        $l6 = staticinvoke <java.lang.Math: long max(long,long)>($l5, $l4);

        $l7 = $l6 + 1L;

        r3.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: long nextArtificalDeviceAndInode> = $l7;

     label3:
        specialinvoke r3.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: void writeAsciiLong(long,int,int)>(l14, 6, 8);

        specialinvoke r3.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: void writeAsciiLong(long,int,int)>(l13, 6, 8);

        $l15 = virtualinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: long getMode()>();

        specialinvoke r3.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: void writeAsciiLong(long,int,int)>($l15, 6, 8);

        $l16 = virtualinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: long getUID()>();

        specialinvoke r3.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: void writeAsciiLong(long,int,int)>($l16, 6, 8);

        $l17 = virtualinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: long getGID()>();

        specialinvoke r3.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: void writeAsciiLong(long,int,int)>($l17, 6, 8);

        $l18 = virtualinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: long getNumberOfLinks()>();

        specialinvoke r3.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: void writeAsciiLong(long,int,int)>($l18, 6, 8);

        $l19 = virtualinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: long getRemoteDevice()>();

        specialinvoke r3.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: void writeAsciiLong(long,int,int)>($l19, 6, 8);

        $l20 = virtualinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: long getTime()>();

        specialinvoke r3.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: void writeAsciiLong(long,int,int)>($l20, 11, 8);

        $r4 = virtualinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: java.lang.String getName()>();

        $i21 = virtualinvoke $r4.<java.lang.String: int length()>();

        $i22 = $i21 + 1;

        $l23 = (long) $i22;

        specialinvoke r3.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: void writeAsciiLong(long,int,int)>($l23, 6, 8);

        $l24 = virtualinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: long getSize()>();

        specialinvoke r3.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: void writeAsciiLong(long,int,int)>($l24, 11, 8);

        $r5 = virtualinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: java.lang.String getName()>();

        specialinvoke r3.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: void writeCString(java.lang.String)>($r5);

        return;
    }

    private void writeOldBinaryEntry(org.apache.commons.compress.archivers.cpio.CpioArchiveEntry, boolean) throws java.io.IOException
    {
        byte $b2, $b8;
        boolean $z0, z1;
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry r0;
        long $l0, $l1, $l3, $l4, $l5, $l6, $l7, $l9, $l10, $l11, $l12, l13, l14, $l15, $l16, $l17, $l18, $l19, $l20, $l23, $l24;
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream r3;
        int $i21, $i22, $i25;
        java.lang.String $r1, $r2, $r4, $r5;

        r3 := @this: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream;

        r0 := @parameter0: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;

        z1 := @parameter1: boolean;

        $l0 = virtualinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: long getInode()>();

        l13 = $l0;

        $l1 = virtualinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: long getDevice()>();

        l14 = $l1;

        $r1 = "TRAILER!!!";

        $r2 = virtualinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        l14 = 0L;

        l13 = 0L;

        goto label3;

     label1:
        $b2 = $l0 cmp 0L;

        if $b2 != 0 goto label2;

        $b8 = $l1 cmp 0L;

        if $b8 != 0 goto label2;

        $l9 = r3.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: long nextArtificalDeviceAndInode>;

        l13 = $l9 & 65535L;

        $l10 = r3.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: long nextArtificalDeviceAndInode>;

        $l11 = $l10 + 1L;

        r3.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: long nextArtificalDeviceAndInode> = $l11;

        $l12 = $l10 >> 16;

        l14 = $l12 & 65535L;

        goto label3;

     label2:
        $l5 = r3.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: long nextArtificalDeviceAndInode>;

        $l3 = 65536L * $l1;

        $l4 = $l0 + $l3;

        $l6 = staticinvoke <java.lang.Math: long max(long,long)>($l5, $l4);

        $l7 = $l6 + 1L;

        r3.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: long nextArtificalDeviceAndInode> = $l7;

     label3:
        specialinvoke r3.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: void writeBinaryLong(long,int,boolean)>(l14, 2, z1);

        specialinvoke r3.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: void writeBinaryLong(long,int,boolean)>(l13, 2, z1);

        $l15 = virtualinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: long getMode()>();

        specialinvoke r3.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: void writeBinaryLong(long,int,boolean)>($l15, 2, z1);

        $l16 = virtualinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: long getUID()>();

        specialinvoke r3.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: void writeBinaryLong(long,int,boolean)>($l16, 2, z1);

        $l17 = virtualinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: long getGID()>();

        specialinvoke r3.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: void writeBinaryLong(long,int,boolean)>($l17, 2, z1);

        $l18 = virtualinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: long getNumberOfLinks()>();

        specialinvoke r3.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: void writeBinaryLong(long,int,boolean)>($l18, 2, z1);

        $l19 = virtualinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: long getRemoteDevice()>();

        specialinvoke r3.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: void writeBinaryLong(long,int,boolean)>($l19, 2, z1);

        $l20 = virtualinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: long getTime()>();

        specialinvoke r3.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: void writeBinaryLong(long,int,boolean)>($l20, 4, z1);

        $r4 = virtualinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: java.lang.String getName()>();

        $i21 = virtualinvoke $r4.<java.lang.String: int length()>();

        $i22 = $i21 + 1;

        $l23 = (long) $i22;

        specialinvoke r3.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: void writeBinaryLong(long,int,boolean)>($l23, 2, z1);

        $l24 = virtualinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: long getSize()>();

        specialinvoke r3.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: void writeBinaryLong(long,int,boolean)>($l24, 4, z1);

        $r5 = virtualinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: java.lang.String getName()>();

        specialinvoke r3.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: void writeCString(java.lang.String)>($r5);

        $i25 = virtualinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: int getHeaderPadCount()>();

        specialinvoke r3.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: void pad(int)>($i25);

        return;
    }

    public void closeArchiveEntry() throws java.io.IOException
    {
        long $l0, $l1, $l5, $l6, $l8, $l9;
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream r0;
        short $s4;
        byte $b2, $b7;
        int $i3, $i10;
        java.lang.String $r15;
        boolean $z0;
        java.io.IOException $r18, $r19, $r21, $r22;
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry $r1, $r2, $r3, $r4, $r5, $r10;
        java.lang.StringBuilder $r9, $r11, $r12, $r13, $r14, $r20;

        r0 := @this: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream;

        $z0 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: boolean finished>;

        if $z0 == 0 goto label1;

        $r18 = new java.io.IOException;

        specialinvoke $r18.<java.io.IOException: void <init>(java.lang.String)>("Stream has already been finished");

        throw $r18;

     label1:
        specialinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: void ensureOpen()>();

        $r1 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry entry>;

        if $r1 != null goto label2;

        $r19 = new java.io.IOException;

        specialinvoke $r19.<java.io.IOException: void <init>(java.lang.String)>("Trying to close non-existent entry");

        throw $r19;

     label2:
        $r2 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry entry>;

        $l0 = virtualinvoke $r2.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: long getSize()>();

        $l1 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: long written>;

        $b2 = $l0 cmp $l1;

        if $b2 == 0 goto label3;

        $r21 = new java.io.IOException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid entry size (expected ");

        $r10 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry entry>;

        $l8 = virtualinvoke $r10.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: long getSize()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l8);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but got ");

        $l9 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: long written>;

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l9);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes)");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<java.io.IOException: void <init>(java.lang.String)>($r15);

        throw $r21;

     label3:
        $r3 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry entry>;

        $i3 = virtualinvoke $r3.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: int getDataPadCount()>();

        specialinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: void pad(int)>($i3);

        $r4 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry entry>;

        $s4 = virtualinvoke $r4.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: short getFormat()>();

        $i10 = (int) $s4;

        if $i10 != 2 goto label4;

        $l5 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: long crc>;

        $r5 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry entry>;

        $l6 = virtualinvoke $r5.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: long getChksum()>();

        $b7 = $l5 cmp $l6;

        if $b7 == 0 goto label4;

        $r22 = new java.io.IOException;

        specialinvoke $r22.<java.io.IOException: void <init>(java.lang.String)>("CRC Error");

        throw $r22;

     label4:
        r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry entry> = null;

        r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: long crc> = 0L;

        r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: long written> = 0L;

        return;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        byte[] r1;
        java.lang.IndexOutOfBoundsException $r9;
        long $l4, $l5, $l6, $l7, $l9, $l10, $l11, $l15, $l16, $l17;
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream r0;
        short $s12, $s14, $s21;
        byte $b8, $b13;
        int i0, i1, $i2, $i3, i18, $i19, $i20;
        java.io.OutputStream $r4;
        java.io.IOException $r10, $r11;
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry $r2, $r3, $r5;

        r0 := @this: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: void ensureOpen()>();

        if i0 < 0 goto label1;

        if i1 < 0 goto label1;

        $i2 = lengthof r1;

        $i3 = $i2 - i1;

        if i0 <= $i3 goto label2;

     label1:
        $r9 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r9.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r9;

     label2:
        if i1 != 0 goto label3;

        return;

     label3:
        $r2 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry entry>;

        if $r2 != null goto label4;

        $r10 = new java.io.IOException;

        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>("no current CPIO entry");

        throw $r10;

     label4:
        $l5 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: long written>;

        $l4 = (long) i1;

        $l6 = $l5 + $l4;

        $r3 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry entry>;

        $l7 = virtualinvoke $r3.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: long getSize()>();

        $b8 = $l6 cmp $l7;

        $i19 = (int) $b8;

        if $i19 <= 0 goto label5;

        $r11 = new java.io.IOException;

        specialinvoke $r11.<java.io.IOException: void <init>(java.lang.String)>("attempt to write past end of STORED entry");

        throw $r11;

     label5:
        $r4 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: java.io.OutputStream out>;

        virtualinvoke $r4.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1);

        $l10 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: long written>;

        $l9 = (long) i1;

        $l11 = $l10 + $l9;

        r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: long written> = $l11;

        $r5 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry entry>;

        $s12 = virtualinvoke $r5.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: short getFormat()>();

        $i20 = (int) $s12;

        if $i20 != 2 goto label7;

        i18 = 0;

     label6:
        if i18 >= i1 goto label7;

        $l16 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: long crc>;

        $b13 = r1[i18];

        $s21 = (short) $b13;

        $s14 = $s21 & 255;

        $l15 = (long) $s14;

        $l17 = $l16 + $l15;

        r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: long crc> = $l17;

        i18 = i18 + 1;

        goto label6;

     label7:
        virtualinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: void count(int)>(i1);

        return;
    }

    public void finish() throws java.io.IOException
    {
        long $l1, $l3, $l4;
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream r0;
        short $s0;
        int $i2, i5, $i6, $i7;
        boolean $z0;
        java.io.IOException $r6, $r7;
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry $r1, $r2, $r3, $r4, $r5;

        r0 := @this: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream;

        specialinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: void ensureOpen()>();

        $z0 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: boolean finished>;

        if $z0 == 0 goto label1;

        $r7 = new java.io.IOException;

        specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>("This archive has already been finished");

        throw $r7;

     label1:
        $r1 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry entry>;

        if $r1 == null goto label2;

        $r6 = new java.io.IOException;

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>("This archive contains unclosed entries.");

        throw $r6;

     label2:
        $r2 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;

        $s0 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: short entryFormat>;

        specialinvoke $r2.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: void <init>(short)>($s0);

        r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry entry> = $r2;

        $r3 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry entry>;

        virtualinvoke $r3.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: void setName(java.lang.String)>("TRAILER!!!");

        $r4 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry entry>;

        virtualinvoke $r4.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: void setNumberOfLinks(long)>(1L);

        $r5 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry entry>;

        specialinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: void writeHeader(org.apache.commons.compress.archivers.cpio.CpioArchiveEntry)>($r5);

        virtualinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: void closeArchiveEntry()>();

        $l1 = virtualinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: long getBytesWritten()>();

        $i2 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: int blockSize>;

        $l3 = (long) $i2;

        $l4 = $l1 % $l3;

        i5 = (int) $l4;

        if i5 == 0 goto label3;

        $i6 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: int blockSize>;

        $i7 = $i6 - i5;

        specialinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: void pad(int)>($i7);

     label3:
        r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: boolean finished> = 1;

        return;
    }

    public void close() throws java.io.IOException
    {
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream r0;
        java.io.OutputStream $r1;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream;

        $z0 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: boolean finished>;

        if $z0 != 0 goto label1;

        virtualinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: void finish()>();

     label1:
        $z1 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: boolean closed>;

        if $z1 != 0 goto label2;

        $r1 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: java.io.OutputStream out>;

        virtualinvoke $r1.<java.io.OutputStream: void close()>();

        r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: boolean closed> = 1;

     label2:
        return;
    }

    private void pad(int) throws java.io.IOException
    {
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream r1;
        java.io.OutputStream $r2;
        byte[] r0;
        int i0;

        r1 := @this: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream;

        i0 := @parameter0: int;

        if i0 <= 0 goto label1;

        r0 = newarray (byte)[i0];

        $r2 = r1.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: java.io.OutputStream out>;

        virtualinvoke $r2.<java.io.OutputStream: void write(byte[])>(r0);

        virtualinvoke r1.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: void count(int)>(i0);

     label1:
        return;
    }

    private void writeBinaryLong(long, int, boolean) throws java.io.IOException
    {
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream r1;
        java.io.OutputStream $r2;
        byte[] $r0;
        int i1, $i2;
        long l0;
        boolean z0;

        r1 := @this: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        $r0 = staticinvoke <org.apache.commons.compress.archivers.cpio.CpioUtil: byte[] long2byteArray(long,int,boolean)>(l0, i1, z0);

        $r2 = r1.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: java.io.OutputStream out>;

        virtualinvoke $r2.<java.io.OutputStream: void write(byte[])>($r0);

        $i2 = lengthof $r0;

        virtualinvoke r1.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: void count(int)>($i2);

        return;
    }

    private void writeAsciiLong(long, int, int) throws java.io.IOException
    {
        byte[] $r2;
        long l1, $l8, l11;
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream r3;
        byte $b9;
        int i0, i2, $i3, $i4, $i5, $i6, $i7, $i10, i12, $i13;
        java.lang.String $r1, $r5, $r6, r7;
        java.io.OutputStream $r4;
        java.lang.StringBuilder $r8;

        r3 := @this: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream;

        l1 := @parameter0: long;

        i2 := @parameter1: int;

        i0 := @parameter2: int;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        if i0 != 16 goto label1;

        $r6 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>(l1);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        goto label3;

     label1:
        if i0 != 8 goto label2;

        $r5 = staticinvoke <java.lang.Long: java.lang.String toOctalString(long)>(l1);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        goto label3;

     label2:
        $r1 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l1);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

     label3:
        $i10 = virtualinvoke $r8.<java.lang.StringBuilder: int length()>();

        if $i10 > i2 goto label6;

        $i6 = virtualinvoke $r8.<java.lang.StringBuilder: int length()>();

        $i7 = i2 - $i6;

        l11 = (long) $i7;

        i12 = 0;

     label4:
        $l8 = (long) i12;

        $b9 = $l8 cmp l11;

        $i13 = (int) $b9;

        if $i13 >= 0 goto label5;

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>(0, "0");

        i12 = i12 + 1;

        goto label4;

     label5:
        r7 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label7;

     label6:
        $i3 = virtualinvoke $r8.<java.lang.StringBuilder: int length()>();

        $i4 = $i3 - i2;

        r7 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String substring(int)>($i4);

     label7:
        $r2 = staticinvoke <org.apache.commons.compress.utils.ArchiveUtils: byte[] toAsciiBytes(java.lang.String)>(r7);

        $r4 = r3.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: java.io.OutputStream out>;

        virtualinvoke $r4.<java.io.OutputStream: void write(byte[])>($r2);

        $i5 = lengthof $r2;

        virtualinvoke r3.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: void count(int)>($i5);

        return;
    }

    private void writeCString(java.lang.String) throws java.io.IOException
    {
        java.io.OutputStream $r4, $r6;
        byte[] $r5;
        org.apache.commons.compress.archivers.zip.ZipEncoding $r2;
        java.nio.ByteBuffer $r3;
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream r0;
        int $i0, $i1, i2, $i3, $i4;
        java.lang.String r1;

        r0 := @this: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipEncoding encoding>;

        $r3 = interfaceinvoke $r2.<org.apache.commons.compress.archivers.zip.ZipEncoding: java.nio.ByteBuffer encode(java.lang.String)>(r1);

        $i0 = virtualinvoke $r3.<java.nio.ByteBuffer: int limit()>();

        $i1 = virtualinvoke $r3.<java.nio.ByteBuffer: int position()>();

        i2 = $i0 - $i1;

        $r4 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: java.io.OutputStream out>;

        $r5 = virtualinvoke $r3.<java.nio.ByteBuffer: byte[] array()>();

        $i3 = virtualinvoke $r3.<java.nio.ByteBuffer: int arrayOffset()>();

        virtualinvoke $r4.<java.io.OutputStream: void write(byte[],int,int)>($r5, $i3, i2);

        $r6 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: java.io.OutputStream out>;

        virtualinvoke $r6.<java.io.OutputStream: void write(int)>(0);

        $i4 = i2 + 1;

        virtualinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: void count(int)>($i4);

        return;
    }

    public org.apache.commons.compress.archivers.ArchiveEntry createArchiveEntry(java.io.File, java.lang.String) throws java.io.IOException
    {
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream r0;
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry $r1;
        java.io.IOException $r4;
        java.lang.String r3;
        java.io.File r2;
        boolean $z0;

        r0 := @this: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream;

        r2 := @parameter0: java.io.File;

        r3 := @parameter1: java.lang.String;

        $z0 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream: boolean finished>;

        if $z0 == 0 goto label1;

        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("Stream has already been finished");

        throw $r4;

     label1:
        $r1 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;

        specialinvoke $r1.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: void <init>(java.io.File,java.lang.String)>(r2, r3);

        return $r1;
    }
}
