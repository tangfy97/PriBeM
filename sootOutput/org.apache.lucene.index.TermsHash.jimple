final class org.apache.lucene.index.TermsHash extends org.apache.lucene.index.InvertedDocConsumer
{
    final org.apache.lucene.index.TermsHashConsumer consumer;
    final org.apache.lucene.index.TermsHash nextTermsHash;
    final org.apache.lucene.util.IntBlockPool intPool;
    final org.apache.lucene.util.ByteBlockPool bytePool;
    org.apache.lucene.util.ByteBlockPool termBytePool;
    final org.apache.lucene.util.Counter bytesUsed;
    final boolean primary;
    final org.apache.lucene.index.DocumentsWriterPerThread$DocState docState;
    final org.apache.lucene.util.BytesRef tr1;
    final org.apache.lucene.util.BytesRef tr2;
    final org.apache.lucene.util.BytesRef termBytesRef;
    final boolean trackAllocations;

    public void <init>(org.apache.lucene.index.DocumentsWriterPerThread, org.apache.lucene.index.TermsHashConsumer, boolean, org.apache.lucene.index.TermsHash)
    {
        org.apache.lucene.util.ByteBlockPool $r10, $r12, $r13;
        org.apache.lucene.util.IntBlockPool $r8;
        org.apache.lucene.index.DocumentsWriterPerThread$DocState $r5;
        org.apache.lucene.index.DocumentsWriterPerThread r4;
        org.apache.lucene.index.TermsHashConsumer r6;
        boolean z0;
        org.apache.lucene.index.TermsHash r0, r7;
        org.apache.lucene.util.BytesRef $r1, $r2, $r3;
        org.apache.lucene.util.ByteBlockPool$Allocator $r11;
        org.apache.lucene.util.IntBlockPool$Allocator $r9;
        org.apache.lucene.util.Counter $r14;

        r0 := @this: org.apache.lucene.index.TermsHash;

        r4 := @parameter0: org.apache.lucene.index.DocumentsWriterPerThread;

        r6 := @parameter1: org.apache.lucene.index.TermsHashConsumer;

        z0 := @parameter2: boolean;

        r7 := @parameter3: org.apache.lucene.index.TermsHash;

        specialinvoke r0.<org.apache.lucene.index.InvertedDocConsumer: void <init>()>();

        $r1 = new org.apache.lucene.util.BytesRef;

        specialinvoke $r1.<org.apache.lucene.util.BytesRef: void <init>()>();

        r0.<org.apache.lucene.index.TermsHash: org.apache.lucene.util.BytesRef tr1> = $r1;

        $r2 = new org.apache.lucene.util.BytesRef;

        specialinvoke $r2.<org.apache.lucene.util.BytesRef: void <init>()>();

        r0.<org.apache.lucene.index.TermsHash: org.apache.lucene.util.BytesRef tr2> = $r2;

        $r3 = new org.apache.lucene.util.BytesRef;

        specialinvoke $r3.<org.apache.lucene.util.BytesRef: void <init>(int)>(10);

        r0.<org.apache.lucene.index.TermsHash: org.apache.lucene.util.BytesRef termBytesRef> = $r3;

        $r5 = r4.<org.apache.lucene.index.DocumentsWriterPerThread: org.apache.lucene.index.DocumentsWriterPerThread$DocState docState>;

        r0.<org.apache.lucene.index.TermsHash: org.apache.lucene.index.DocumentsWriterPerThread$DocState docState> = $r5;

        r0.<org.apache.lucene.index.TermsHash: org.apache.lucene.index.TermsHashConsumer consumer> = r6;

        r0.<org.apache.lucene.index.TermsHash: boolean trackAllocations> = z0;

        r0.<org.apache.lucene.index.TermsHash: org.apache.lucene.index.TermsHash nextTermsHash> = r7;

        if z0 == 0 goto label1;

        $r14 = r4.<org.apache.lucene.index.DocumentsWriterPerThread: org.apache.lucene.util.Counter bytesUsed>;

        goto label2;

     label1:
        $r14 = staticinvoke <org.apache.lucene.util.Counter: org.apache.lucene.util.Counter newCounter()>();

     label2:
        r0.<org.apache.lucene.index.TermsHash: org.apache.lucene.util.Counter bytesUsed> = $r14;

        $r8 = new org.apache.lucene.util.IntBlockPool;

        $r9 = r4.<org.apache.lucene.index.DocumentsWriterPerThread: org.apache.lucene.util.IntBlockPool$Allocator intBlockAllocator>;

        specialinvoke $r8.<org.apache.lucene.util.IntBlockPool: void <init>(org.apache.lucene.util.IntBlockPool$Allocator)>($r9);

        r0.<org.apache.lucene.index.TermsHash: org.apache.lucene.util.IntBlockPool intPool> = $r8;

        $r10 = new org.apache.lucene.util.ByteBlockPool;

        $r11 = r4.<org.apache.lucene.index.DocumentsWriterPerThread: org.apache.lucene.util.ByteBlockPool$Allocator byteBlockAllocator>;

        specialinvoke $r10.<org.apache.lucene.util.ByteBlockPool: void <init>(org.apache.lucene.util.ByteBlockPool$Allocator)>($r11);

        r0.<org.apache.lucene.index.TermsHash: org.apache.lucene.util.ByteBlockPool bytePool> = $r10;

        if r7 == null goto label3;

        r0.<org.apache.lucene.index.TermsHash: boolean primary> = 1;

        $r12 = r0.<org.apache.lucene.index.TermsHash: org.apache.lucene.util.ByteBlockPool bytePool>;

        r0.<org.apache.lucene.index.TermsHash: org.apache.lucene.util.ByteBlockPool termBytePool> = $r12;

        $r13 = r0.<org.apache.lucene.index.TermsHash: org.apache.lucene.util.ByteBlockPool bytePool>;

        r7.<org.apache.lucene.index.TermsHash: org.apache.lucene.util.ByteBlockPool termBytePool> = $r13;

        goto label4;

     label3:
        r0.<org.apache.lucene.index.TermsHash: boolean primary> = 0;

     label4:
        return;
    }

    public void abort()
    {
        java.lang.Throwable $r4;
        org.apache.lucene.index.TermsHash r0, $r2, $r3, $r5, $r6;
        org.apache.lucene.index.TermsHashConsumer $r1;

        r0 := @this: org.apache.lucene.index.TermsHash;

        virtualinvoke r0.<org.apache.lucene.index.TermsHash: void reset()>();

     label1:
        $r1 = r0.<org.apache.lucene.index.TermsHash: org.apache.lucene.index.TermsHashConsumer consumer>;

        virtualinvoke $r1.<org.apache.lucene.index.TermsHashConsumer: void abort()>();

     label2:
        $r2 = r0.<org.apache.lucene.index.TermsHash: org.apache.lucene.index.TermsHash nextTermsHash>;

        if $r2 == null goto label6;

        $r3 = r0.<org.apache.lucene.index.TermsHash: org.apache.lucene.index.TermsHash nextTermsHash>;

        virtualinvoke $r3.<org.apache.lucene.index.TermsHash: void abort()>();

        goto label6;

     label3:
        $r4 := @caughtexception;

     label4:
        $r5 = r0.<org.apache.lucene.index.TermsHash: org.apache.lucene.index.TermsHash nextTermsHash>;

        if $r5 == null goto label5;

        $r6 = r0.<org.apache.lucene.index.TermsHash: org.apache.lucene.index.TermsHash nextTermsHash>;

        virtualinvoke $r6.<org.apache.lucene.index.TermsHash: void abort()>();

     label5:
        throw $r4;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    void reset()
    {
        org.apache.lucene.index.TermsHash r0;
        org.apache.lucene.util.IntBlockPool $r1;
        org.apache.lucene.util.ByteBlockPool $r2;

        r0 := @this: org.apache.lucene.index.TermsHash;

        $r1 = r0.<org.apache.lucene.index.TermsHash: org.apache.lucene.util.IntBlockPool intPool>;

        virtualinvoke $r1.<org.apache.lucene.util.IntBlockPool: void reset(boolean,boolean)>(0, 0);

        $r2 = r0.<org.apache.lucene.index.TermsHash: org.apache.lucene.util.ByteBlockPool bytePool>;

        virtualinvoke $r2.<org.apache.lucene.util.ByteBlockPool: void reset(boolean,boolean)>(0, 0);

        return;
    }

    void flush(java.util.Map, org.apache.lucene.index.SegmentWriteState) throws java.io.IOException
    {
        org.apache.lucene.index.TermsHashPerField r13, $r18;
        java.util.HashMap $r0, $r19, r20;
        java.util.Map r3;
        org.apache.lucene.index.SegmentWriteState r6;
        org.apache.lucene.index.TermsHashConsumer $r7;
        org.apache.lucene.index.TermsHashConsumerPerField $r15;
        boolean $z0;
        org.apache.lucene.index.TermsHash r1, $r2, $r8, $r9, $r16;
        java.util.Map$Entry r11;
        java.util.Iterator $r5;
        java.util.Set $r4;
        java.lang.Object $r10, $r12, $r14, $r17;

        r1 := @this: org.apache.lucene.index.TermsHash;

        r3 := @parameter0: java.util.Map;

        r6 := @parameter1: org.apache.lucene.index.SegmentWriteState;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r2 = r1.<org.apache.lucene.index.TermsHash: org.apache.lucene.index.TermsHash nextTermsHash>;

        if $r2 == null goto label1;

        $r19 = new java.util.HashMap;

        specialinvoke $r19.<java.util.HashMap: void <init>()>();

        r20 = $r19;

        goto label2;

     label1:
        r20 = null;

     label2:
        $r4 = interfaceinvoke r3.<java.util.Map: java.util.Set entrySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r10 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r11 = (java.util.Map$Entry) $r10;

        $r12 = interfaceinvoke r11.<java.util.Map$Entry: java.lang.Object getValue()>();

        r13 = (org.apache.lucene.index.TermsHashPerField) $r12;

        $r14 = interfaceinvoke r11.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r15 = r13.<org.apache.lucene.index.TermsHashPerField: org.apache.lucene.index.TermsHashConsumerPerField consumer>;

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, $r15);

        $r16 = r1.<org.apache.lucene.index.TermsHash: org.apache.lucene.index.TermsHash nextTermsHash>;

        if $r16 == null goto label4;

        $r17 = interfaceinvoke r11.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r18 = r13.<org.apache.lucene.index.TermsHashPerField: org.apache.lucene.index.TermsHashPerField nextPerField>;

        interfaceinvoke r20.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r17, $r18);

     label4:
        goto label3;

     label5:
        $r7 = r1.<org.apache.lucene.index.TermsHash: org.apache.lucene.index.TermsHashConsumer consumer>;

        virtualinvoke $r7.<org.apache.lucene.index.TermsHashConsumer: void flush(java.util.Map,org.apache.lucene.index.SegmentWriteState)>($r0, r6);

        $r8 = r1.<org.apache.lucene.index.TermsHash: org.apache.lucene.index.TermsHash nextTermsHash>;

        if $r8 == null goto label6;

        $r9 = r1.<org.apache.lucene.index.TermsHash: org.apache.lucene.index.TermsHash nextTermsHash>;

        virtualinvoke $r9.<org.apache.lucene.index.TermsHash: void flush(java.util.Map,org.apache.lucene.index.SegmentWriteState)>(r20, r6);

     label6:
        return;
    }

    org.apache.lucene.index.InvertedDocConsumerPerField addField(org.apache.lucene.index.DocInverterPerField, org.apache.lucene.index.FieldInfo)
    {
        org.apache.lucene.index.TermsHash r2, $r4;
        org.apache.lucene.index.TermsHashPerField $r0;
        org.apache.lucene.index.FieldInfo r3;
        org.apache.lucene.index.DocInverterPerField r1;

        r2 := @this: org.apache.lucene.index.TermsHash;

        r1 := @parameter0: org.apache.lucene.index.DocInverterPerField;

        r3 := @parameter1: org.apache.lucene.index.FieldInfo;

        $r0 = new org.apache.lucene.index.TermsHashPerField;

        $r4 = r2.<org.apache.lucene.index.TermsHash: org.apache.lucene.index.TermsHash nextTermsHash>;

        specialinvoke $r0.<org.apache.lucene.index.TermsHashPerField: void <init>(org.apache.lucene.index.DocInverterPerField,org.apache.lucene.index.TermsHash,org.apache.lucene.index.TermsHash,org.apache.lucene.index.FieldInfo)>(r1, r2, $r4, r3);

        return $r0;
    }

    void finishDocument() throws java.io.IOException
    {
        org.apache.lucene.index.TermsHash r0, $r2, $r3, $r4;
        org.apache.lucene.index.TermsHashConsumer $r1, $r5;

        r0 := @this: org.apache.lucene.index.TermsHash;

        $r1 = r0.<org.apache.lucene.index.TermsHash: org.apache.lucene.index.TermsHashConsumer consumer>;

        virtualinvoke $r1.<org.apache.lucene.index.TermsHashConsumer: void finishDocument(org.apache.lucene.index.TermsHash)>(r0);

        $r2 = r0.<org.apache.lucene.index.TermsHash: org.apache.lucene.index.TermsHash nextTermsHash>;

        if $r2 == null goto label1;

        $r3 = r0.<org.apache.lucene.index.TermsHash: org.apache.lucene.index.TermsHash nextTermsHash>;

        $r5 = $r3.<org.apache.lucene.index.TermsHash: org.apache.lucene.index.TermsHashConsumer consumer>;

        $r4 = r0.<org.apache.lucene.index.TermsHash: org.apache.lucene.index.TermsHash nextTermsHash>;

        virtualinvoke $r5.<org.apache.lucene.index.TermsHashConsumer: void finishDocument(org.apache.lucene.index.TermsHash)>($r4);

     label1:
        return;
    }

    void startDocument() throws java.io.IOException
    {
        org.apache.lucene.index.TermsHash r0, $r2, $r3;
        org.apache.lucene.index.TermsHashConsumer $r1, $r4;

        r0 := @this: org.apache.lucene.index.TermsHash;

        $r1 = r0.<org.apache.lucene.index.TermsHash: org.apache.lucene.index.TermsHashConsumer consumer>;

        virtualinvoke $r1.<org.apache.lucene.index.TermsHashConsumer: void startDocument()>();

        $r2 = r0.<org.apache.lucene.index.TermsHash: org.apache.lucene.index.TermsHash nextTermsHash>;

        if $r2 == null goto label1;

        $r3 = r0.<org.apache.lucene.index.TermsHash: org.apache.lucene.index.TermsHash nextTermsHash>;

        $r4 = $r3.<org.apache.lucene.index.TermsHash: org.apache.lucene.index.TermsHashConsumer consumer>;

        virtualinvoke $r4.<org.apache.lucene.index.TermsHashConsumer: void startDocument()>();

     label1:
        return;
    }
}
