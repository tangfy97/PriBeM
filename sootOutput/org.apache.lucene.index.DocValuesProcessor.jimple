final class org.apache.lucene.index.DocValuesProcessor extends org.apache.lucene.index.StoredFieldsConsumer
{
    private final java.util.Map writers;
    private final org.apache.lucene.util.Counter bytesUsed;
    static final boolean $assertionsDisabled;

    public void <init>(org.apache.lucene.util.Counter)
    {
        java.util.HashMap $r1;
        org.apache.lucene.index.DocValuesProcessor r0;
        org.apache.lucene.util.Counter r2;

        r0 := @this: org.apache.lucene.index.DocValuesProcessor;

        r2 := @parameter0: org.apache.lucene.util.Counter;

        specialinvoke r0.<org.apache.lucene.index.StoredFieldsConsumer: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.apache.lucene.index.DocValuesProcessor: java.util.Map writers> = $r1;

        r0.<org.apache.lucene.index.DocValuesProcessor: org.apache.lucene.util.Counter bytesUsed> = r2;

        return;
    }

    void startDocument()
    {
        org.apache.lucene.index.DocValuesProcessor r0;

        r0 := @this: org.apache.lucene.index.DocValuesProcessor;

        return;
    }

    void finishDocument()
    {
        org.apache.lucene.index.DocValuesProcessor r0;

        r0 := @this: org.apache.lucene.index.DocValuesProcessor;

        return;
    }

    public void addField(int, org.apache.lucene.index.IndexableField, org.apache.lucene.index.FieldInfo)
    {
        org.apache.lucene.index.IndexableField r0;
        long $l1;
        java.lang.AssertionError $r8;
        org.apache.lucene.index.IndexableFieldType $r1;
        int i0;
        java.lang.String $r12, $r23;
        java.lang.Number $r13, $r15, $r19;
        boolean $z0, $z1;
        org.apache.lucene.index.DocValuesProcessor r14;
        org.apache.lucene.util.BytesRef $r24, $r25, $r26;
        java.lang.IllegalArgumentException $r16;
        org.apache.lucene.index.FieldInfo$DocValuesType $r2, $r4, $r5, $r6, $r7;
        org.apache.lucene.index.FieldInfo r3;
        java.lang.StringBuilder $r9, $r10, $r11, $r17, $r18, $r21, $r22;
        java.lang.Class $r20;

        r14 := @this: org.apache.lucene.index.DocValuesProcessor;

        i0 := @parameter0: int;

        r0 := @parameter1: org.apache.lucene.index.IndexableField;

        r3 := @parameter2: org.apache.lucene.index.FieldInfo;

        $r1 = interfaceinvoke r0.<org.apache.lucene.index.IndexableField: org.apache.lucene.index.IndexableFieldType fieldType()>();

        $r2 = interfaceinvoke $r1.<org.apache.lucene.index.IndexableFieldType: org.apache.lucene.index.FieldInfo$DocValuesType docValueType()>();

        if $r2 == null goto label6;

        virtualinvoke r3.<org.apache.lucene.index.FieldInfo: void setDocValuesType(org.apache.lucene.index.FieldInfo$DocValuesType)>($r2);

        $r4 = <org.apache.lucene.index.FieldInfo$DocValuesType: org.apache.lucene.index.FieldInfo$DocValuesType BINARY>;

        if $r2 != $r4 goto label1;

        $r26 = interfaceinvoke r0.<org.apache.lucene.index.IndexableField: org.apache.lucene.util.BytesRef binaryValue()>();

        virtualinvoke r14.<org.apache.lucene.index.DocValuesProcessor: void addBinaryField(org.apache.lucene.index.FieldInfo,int,org.apache.lucene.util.BytesRef)>(r3, i0, $r26);

        goto label6;

     label1:
        $r5 = <org.apache.lucene.index.FieldInfo$DocValuesType: org.apache.lucene.index.FieldInfo$DocValuesType SORTED>;

        if $r2 != $r5 goto label2;

        $r25 = interfaceinvoke r0.<org.apache.lucene.index.IndexableField: org.apache.lucene.util.BytesRef binaryValue()>();

        virtualinvoke r14.<org.apache.lucene.index.DocValuesProcessor: void addSortedField(org.apache.lucene.index.FieldInfo,int,org.apache.lucene.util.BytesRef)>(r3, i0, $r25);

        goto label6;

     label2:
        $r6 = <org.apache.lucene.index.FieldInfo$DocValuesType: org.apache.lucene.index.FieldInfo$DocValuesType SORTED_SET>;

        if $r2 != $r6 goto label3;

        $r24 = interfaceinvoke r0.<org.apache.lucene.index.IndexableField: org.apache.lucene.util.BytesRef binaryValue()>();

        virtualinvoke r14.<org.apache.lucene.index.DocValuesProcessor: void addSortedSetField(org.apache.lucene.index.FieldInfo,int,org.apache.lucene.util.BytesRef)>(r3, i0, $r24);

        goto label6;

     label3:
        $r7 = <org.apache.lucene.index.FieldInfo$DocValuesType: org.apache.lucene.index.FieldInfo$DocValuesType NUMERIC>;

        if $r2 != $r7 goto label5;

        $r13 = interfaceinvoke r0.<org.apache.lucene.index.IndexableField: java.lang.Number numericValue()>();

        $z1 = $r13 instanceof java.lang.Long;

        if $z1 != 0 goto label4;

        $r16 = new java.lang.IllegalArgumentException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("illegal type ");

        $r19 = interfaceinvoke r0.<org.apache.lucene.index.IndexableField: java.lang.Number numericValue()>();

        $r20 = virtualinvoke $r19.<java.lang.Object: java.lang.Class getClass()>();

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": DocValues types must be Long");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r23);

        throw $r16;

     label4:
        $r15 = interfaceinvoke r0.<org.apache.lucene.index.IndexableField: java.lang.Number numericValue()>();

        $l1 = virtualinvoke $r15.<java.lang.Number: long longValue()>();

        virtualinvoke r14.<org.apache.lucene.index.DocValuesProcessor: void addNumericField(org.apache.lucene.index.FieldInfo,int,long)>(r3, i0, $l1);

        goto label6;

     label5:
        $z0 = <org.apache.lucene.index.DocValuesProcessor: boolean $assertionsDisabled>;

        if $z0 != 0 goto label6;

        $r8 = new java.lang.AssertionError;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unrecognized DocValues.Type: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.AssertionError: void <init>(java.lang.Object)>($r12);

        throw $r8;

     label6:
        return;
    }

    void flush(org.apache.lucene.index.SegmentWriteState) throws java.io.IOException
    {
        java.lang.Throwable $r16;
        org.apache.lucene.index.DocValuesWriter r14;
        java.util.Map $r1, $r7, $r10;
        org.apache.lucene.index.SegmentWriteState r2;
        java.io.Closeable[] $r11, $r12, $r17, $r18;
        int $i0;
        org.apache.lucene.codecs.DocValuesFormat $r5;
        boolean $z0, $z1;
        org.apache.lucene.codecs.DocValuesConsumer $r6;
        org.apache.lucene.index.DocValuesProcessor r0;
        java.util.Iterator $r9;
        org.apache.lucene.index.SegmentInfo $r3, $r15;
        java.util.Collection $r8;
        org.apache.lucene.codecs.Codec $r4;
        java.lang.Object $r13;

        r0 := @this: org.apache.lucene.index.DocValuesProcessor;

        r2 := @parameter0: org.apache.lucene.index.SegmentWriteState;

        $r1 = r0.<org.apache.lucene.index.DocValuesProcessor: java.util.Map writers>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();

        if $z0 != 0 goto label10;

        $r3 = r2.<org.apache.lucene.index.SegmentWriteState: org.apache.lucene.index.SegmentInfo segmentInfo>;

        $r4 = virtualinvoke $r3.<org.apache.lucene.index.SegmentInfo: org.apache.lucene.codecs.Codec getCodec()>();

        $r5 = virtualinvoke $r4.<org.apache.lucene.codecs.Codec: org.apache.lucene.codecs.DocValuesFormat docValuesFormat()>();

        $r6 = virtualinvoke $r5.<org.apache.lucene.codecs.DocValuesFormat: org.apache.lucene.codecs.DocValuesConsumer fieldsConsumer(org.apache.lucene.index.SegmentWriteState)>(r2);

     label01:
        $r7 = r0.<org.apache.lucene.index.DocValuesProcessor: java.util.Map writers>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.util.Collection values()>();

        $r9 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();

     label02:
        $z1 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label03;

        $r13 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r14 = (org.apache.lucene.index.DocValuesWriter) $r13;

        $r15 = r2.<org.apache.lucene.index.SegmentWriteState: org.apache.lucene.index.SegmentInfo segmentInfo>;

        $i0 = virtualinvoke $r15.<org.apache.lucene.index.SegmentInfo: int getDocCount()>();

        virtualinvoke r14.<org.apache.lucene.index.DocValuesWriter: void finish(int)>($i0);

        virtualinvoke r14.<org.apache.lucene.index.DocValuesWriter: void flush(org.apache.lucene.index.SegmentWriteState,org.apache.lucene.codecs.DocValuesConsumer)>(r2, $r6);

        goto label02;

     label03:
        $r10 = r0.<org.apache.lucene.index.DocValuesProcessor: java.util.Map writers>;

        interfaceinvoke $r10.<java.util.Map: void clear()>();

     label04:
        if 1 == 0 goto label05;

        $r12 = newarray (java.io.Closeable)[1];

        $r12[0] = $r6;

        staticinvoke <org.apache.lucene.util.IOUtils: void close(java.io.Closeable[])>($r12);

        goto label10;

     label05:
        $r11 = newarray (java.io.Closeable)[1];

        $r11[0] = $r6;

        staticinvoke <org.apache.lucene.util.IOUtils: void closeWhileHandlingException(java.io.Closeable[])>($r11);

        goto label10;

     label06:
        $r16 := @caughtexception;

     label07:
        if 0 == 0 goto label08;

        $r18 = newarray (java.io.Closeable)[1];

        $r18[0] = $r6;

        staticinvoke <org.apache.lucene.util.IOUtils: void close(java.io.Closeable[])>($r18);

        goto label09;

     label08:
        $r17 = newarray (java.io.Closeable)[1];

        $r17[0] = $r6;

        staticinvoke <org.apache.lucene.util.IOUtils: void closeWhileHandlingException(java.io.Closeable[])>($r17);

     label09:
        throw $r16;

     label10:
        return;

        catch java.lang.Throwable from label01 to label04 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
    }

    void addBinaryField(org.apache.lucene.index.FieldInfo, int, org.apache.lucene.util.BytesRef)
    {
        org.apache.lucene.index.BinaryDocValuesWriter $r17, r21;
        org.apache.lucene.index.DocValuesWriter r5;
        java.util.Map $r3, $r20;
        int i0;
        java.lang.String $r2, $r10, $r13, $r16, $r19;
        boolean $z0;
        org.apache.lucene.index.DocValuesProcessor r0;
        org.apache.lucene.util.BytesRef r6;
        java.lang.IllegalArgumentException $r7;
        org.apache.lucene.util.Counter $r18;
        org.apache.lucene.index.FieldInfo r1;
        java.lang.Object $r4;
        java.lang.StringBuilder $r8, $r9, $r11, $r12, $r14, $r15;

        r0 := @this: org.apache.lucene.index.DocValuesProcessor;

        r1 := @parameter0: org.apache.lucene.index.FieldInfo;

        i0 := @parameter1: int;

        r6 := @parameter2: org.apache.lucene.util.BytesRef;

        $r3 = r0.<org.apache.lucene.index.DocValuesProcessor: java.util.Map writers>;

        $r2 = r1.<org.apache.lucene.index.FieldInfo: java.lang.String name>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        r5 = (org.apache.lucene.index.DocValuesWriter) $r4;

        if r5 != null goto label1;

        $r17 = new org.apache.lucene.index.BinaryDocValuesWriter;

        $r18 = r0.<org.apache.lucene.index.DocValuesProcessor: org.apache.lucene.util.Counter bytesUsed>;

        specialinvoke $r17.<org.apache.lucene.index.BinaryDocValuesWriter: void <init>(org.apache.lucene.index.FieldInfo,org.apache.lucene.util.Counter)>(r1, $r18);

        r21 = $r17;

        $r20 = r0.<org.apache.lucene.index.DocValuesProcessor: java.util.Map writers>;

        $r19 = r1.<org.apache.lucene.index.FieldInfo: java.lang.String name>;

        interfaceinvoke $r20.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r19, $r17);

        goto label3;

     label1:
        $z0 = r5 instanceof org.apache.lucene.index.BinaryDocValuesWriter;

        if $z0 != 0 goto label2;

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Incompatible DocValues type: field \"");

        $r10 = r1.<org.apache.lucene.index.FieldInfo: java.lang.String name>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" changed from ");

        $r13 = specialinvoke r0.<org.apache.lucene.index.DocValuesProcessor: java.lang.String getTypeDesc(org.apache.lucene.index.DocValuesWriter)>(r5);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to binary");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r7;

     label2:
        r21 = (org.apache.lucene.index.BinaryDocValuesWriter) r5;

     label3:
        virtualinvoke r21.<org.apache.lucene.index.BinaryDocValuesWriter: void addValue(int,org.apache.lucene.util.BytesRef)>(i0, r6);

        return;
    }

    void addSortedField(org.apache.lucene.index.FieldInfo, int, org.apache.lucene.util.BytesRef)
    {
        org.apache.lucene.index.DocValuesWriter r5;
        java.util.Map $r3, $r20;
        int i0;
        java.lang.String $r2, $r10, $r13, $r16, $r19;
        boolean $z0;
        org.apache.lucene.index.DocValuesProcessor r0;
        org.apache.lucene.util.BytesRef r6;
        org.apache.lucene.index.SortedDocValuesWriter $r17, r21;
        java.lang.IllegalArgumentException $r7;
        org.apache.lucene.util.Counter $r18;
        org.apache.lucene.index.FieldInfo r1;
        java.lang.Object $r4;
        java.lang.StringBuilder $r8, $r9, $r11, $r12, $r14, $r15;

        r0 := @this: org.apache.lucene.index.DocValuesProcessor;

        r1 := @parameter0: org.apache.lucene.index.FieldInfo;

        i0 := @parameter1: int;

        r6 := @parameter2: org.apache.lucene.util.BytesRef;

        $r3 = r0.<org.apache.lucene.index.DocValuesProcessor: java.util.Map writers>;

        $r2 = r1.<org.apache.lucene.index.FieldInfo: java.lang.String name>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        r5 = (org.apache.lucene.index.DocValuesWriter) $r4;

        if r5 != null goto label1;

        $r17 = new org.apache.lucene.index.SortedDocValuesWriter;

        $r18 = r0.<org.apache.lucene.index.DocValuesProcessor: org.apache.lucene.util.Counter bytesUsed>;

        specialinvoke $r17.<org.apache.lucene.index.SortedDocValuesWriter: void <init>(org.apache.lucene.index.FieldInfo,org.apache.lucene.util.Counter)>(r1, $r18);

        r21 = $r17;

        $r20 = r0.<org.apache.lucene.index.DocValuesProcessor: java.util.Map writers>;

        $r19 = r1.<org.apache.lucene.index.FieldInfo: java.lang.String name>;

        interfaceinvoke $r20.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r19, $r17);

        goto label3;

     label1:
        $z0 = r5 instanceof org.apache.lucene.index.SortedDocValuesWriter;

        if $z0 != 0 goto label2;

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Incompatible DocValues type: field \"");

        $r10 = r1.<org.apache.lucene.index.FieldInfo: java.lang.String name>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" changed from ");

        $r13 = specialinvoke r0.<org.apache.lucene.index.DocValuesProcessor: java.lang.String getTypeDesc(org.apache.lucene.index.DocValuesWriter)>(r5);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to sorted");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r7;

     label2:
        r21 = (org.apache.lucene.index.SortedDocValuesWriter) r5;

     label3:
        virtualinvoke r21.<org.apache.lucene.index.SortedDocValuesWriter: void addValue(int,org.apache.lucene.util.BytesRef)>(i0, r6);

        return;
    }

    void addSortedSetField(org.apache.lucene.index.FieldInfo, int, org.apache.lucene.util.BytesRef)
    {
        org.apache.lucene.index.DocValuesWriter r5;
        java.util.Map $r3, $r20;
        int i0;
        java.lang.String $r2, $r10, $r13, $r16, $r19;
        boolean $z0;
        org.apache.lucene.index.DocValuesProcessor r0;
        org.apache.lucene.util.BytesRef r6;
        java.lang.IllegalArgumentException $r7;
        org.apache.lucene.index.SortedSetDocValuesWriter $r17, r21;
        org.apache.lucene.util.Counter $r18;
        org.apache.lucene.index.FieldInfo r1;
        java.lang.Object $r4;
        java.lang.StringBuilder $r8, $r9, $r11, $r12, $r14, $r15;

        r0 := @this: org.apache.lucene.index.DocValuesProcessor;

        r1 := @parameter0: org.apache.lucene.index.FieldInfo;

        i0 := @parameter1: int;

        r6 := @parameter2: org.apache.lucene.util.BytesRef;

        $r3 = r0.<org.apache.lucene.index.DocValuesProcessor: java.util.Map writers>;

        $r2 = r1.<org.apache.lucene.index.FieldInfo: java.lang.String name>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        r5 = (org.apache.lucene.index.DocValuesWriter) $r4;

        if r5 != null goto label1;

        $r17 = new org.apache.lucene.index.SortedSetDocValuesWriter;

        $r18 = r0.<org.apache.lucene.index.DocValuesProcessor: org.apache.lucene.util.Counter bytesUsed>;

        specialinvoke $r17.<org.apache.lucene.index.SortedSetDocValuesWriter: void <init>(org.apache.lucene.index.FieldInfo,org.apache.lucene.util.Counter)>(r1, $r18);

        r21 = $r17;

        $r20 = r0.<org.apache.lucene.index.DocValuesProcessor: java.util.Map writers>;

        $r19 = r1.<org.apache.lucene.index.FieldInfo: java.lang.String name>;

        interfaceinvoke $r20.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r19, $r17);

        goto label3;

     label1:
        $z0 = r5 instanceof org.apache.lucene.index.SortedSetDocValuesWriter;

        if $z0 != 0 goto label2;

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Incompatible DocValues type: field \"");

        $r10 = r1.<org.apache.lucene.index.FieldInfo: java.lang.String name>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" changed from ");

        $r13 = specialinvoke r0.<org.apache.lucene.index.DocValuesProcessor: java.lang.String getTypeDesc(org.apache.lucene.index.DocValuesWriter)>(r5);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to sorted");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r7;

     label2:
        r21 = (org.apache.lucene.index.SortedSetDocValuesWriter) r5;

     label3:
        virtualinvoke r21.<org.apache.lucene.index.SortedSetDocValuesWriter: void addValue(int,org.apache.lucene.util.BytesRef)>(i0, r6);

        return;
    }

    void addNumericField(org.apache.lucene.index.FieldInfo, int, long)
    {
        long l1;
        org.apache.lucene.index.DocValuesWriter r5;
        org.apache.lucene.index.NumericDocValuesWriter $r16, r20;
        java.util.Map $r3, $r19;
        int i0;
        java.lang.String $r2, $r9, $r12, $r15, $r18;
        boolean $z0;
        org.apache.lucene.index.DocValuesProcessor r0;
        java.lang.IllegalArgumentException $r6;
        org.apache.lucene.util.Counter $r17;
        org.apache.lucene.index.FieldInfo r1;
        java.lang.Object $r4;
        java.lang.StringBuilder $r7, $r8, $r10, $r11, $r13, $r14;

        r0 := @this: org.apache.lucene.index.DocValuesProcessor;

        r1 := @parameter0: org.apache.lucene.index.FieldInfo;

        i0 := @parameter1: int;

        l1 := @parameter2: long;

        $r3 = r0.<org.apache.lucene.index.DocValuesProcessor: java.util.Map writers>;

        $r2 = r1.<org.apache.lucene.index.FieldInfo: java.lang.String name>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        r5 = (org.apache.lucene.index.DocValuesWriter) $r4;

        if r5 != null goto label1;

        $r16 = new org.apache.lucene.index.NumericDocValuesWriter;

        $r17 = r0.<org.apache.lucene.index.DocValuesProcessor: org.apache.lucene.util.Counter bytesUsed>;

        specialinvoke $r16.<org.apache.lucene.index.NumericDocValuesWriter: void <init>(org.apache.lucene.index.FieldInfo,org.apache.lucene.util.Counter)>(r1, $r17);

        r20 = $r16;

        $r19 = r0.<org.apache.lucene.index.DocValuesProcessor: java.util.Map writers>;

        $r18 = r1.<org.apache.lucene.index.FieldInfo: java.lang.String name>;

        interfaceinvoke $r19.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r18, $r16);

        goto label3;

     label1:
        $z0 = r5 instanceof org.apache.lucene.index.NumericDocValuesWriter;

        if $z0 != 0 goto label2;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Incompatible DocValues type: field \"");

        $r9 = r1.<org.apache.lucene.index.FieldInfo: java.lang.String name>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" changed from ");

        $r12 = specialinvoke r0.<org.apache.lucene.index.DocValuesProcessor: java.lang.String getTypeDesc(org.apache.lucene.index.DocValuesWriter)>(r5);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to numeric");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r6;

     label2:
        r20 = (org.apache.lucene.index.NumericDocValuesWriter) r5;

     label3:
        virtualinvoke r20.<org.apache.lucene.index.NumericDocValuesWriter: void addValue(int,long)>(i0, l1);

        return;
    }

    private java.lang.String getTypeDesc(org.apache.lucene.index.DocValuesWriter)
    {
        org.apache.lucene.index.DocValuesWriter r0;
        org.apache.lucene.index.DocValuesProcessor r2;
        java.lang.AssertionError $r1;
        boolean $z0, $z1, $z2, $z3;

        r2 := @this: org.apache.lucene.index.DocValuesProcessor;

        r0 := @parameter0: org.apache.lucene.index.DocValuesWriter;

        $z0 = r0 instanceof org.apache.lucene.index.BinaryDocValuesWriter;

        if $z0 == 0 goto label1;

        return "binary";

     label1:
        $z1 = r0 instanceof org.apache.lucene.index.NumericDocValuesWriter;

        if $z1 == 0 goto label2;

        return "numeric";

     label2:
        $z2 = <org.apache.lucene.index.DocValuesProcessor: boolean $assertionsDisabled>;

        if $z2 != 0 goto label3;

        $z3 = r0 instanceof org.apache.lucene.index.SortedDocValuesWriter;

        if $z3 != 0 goto label3;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label3:
        return "sorted";
    }

    public void abort() throws java.io.IOException
    {
        java.lang.Throwable $r7;
        org.apache.lucene.index.DocValuesProcessor r0;
        java.util.Iterator $r3;
        java.util.Collection $r2;
        org.apache.lucene.index.DocValuesWriter r6;
        java.util.Map $r1, $r4;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.DocValuesProcessor;

        $r1 = r0.<org.apache.lucene.index.DocValuesProcessor: java.util.Map writers>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.lucene.index.DocValuesWriter) $r5;

     label2:
        virtualinvoke r6.<org.apache.lucene.index.DocValuesWriter: void abort()>();

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;

     label5:
        goto label1;

     label6:
        $r4 = r0.<org.apache.lucene.index.DocValuesProcessor: java.util.Map writers>;

        interfaceinvoke $r4.<java.util.Map: void clear()>();

        return;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/index/DocValuesProcessor;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.index.DocValuesProcessor: boolean $assertionsDisabled> = $z1;

        return;
    }
}
