public class org.springframework.remoting.support.RemoteInvocationTraceInterceptor extends java.lang.Object implements org.aopalliance.intercept.MethodInterceptor
{
    protected static final org.apache.commons.logging.Log logger;
    private final java.lang.String exporterNameClause;

    static void <clinit>()
    {
        org.apache.commons.logging.Log $r0;

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lorg/springframework/remoting/support/RemoteInvocationTraceInterceptor;");

        <org.springframework.remoting.support.RemoteInvocationTraceInterceptor: org.apache.commons.logging.Log logger> = $r0;

        return;
    }

    public void <init>()
    {
        org.springframework.remoting.support.RemoteInvocationTraceInterceptor r0;

        r0 := @this: org.springframework.remoting.support.RemoteInvocationTraceInterceptor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.springframework.remoting.support.RemoteInvocationTraceInterceptor: java.lang.String exporterNameClause> = "";

        return;
    }

    public void <init>(java.lang.String)
    {
        java.lang.StringBuilder $r1, $r4;
        java.lang.String r2, $r3, $r5;
        org.springframework.remoting.support.RemoteInvocationTraceInterceptor r0;

        r0 := @this: org.springframework.remoting.support.RemoteInvocationTraceInterceptor;

        r2 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.StringBuilder;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r2);

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>($r3);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<org.springframework.remoting.support.RemoteInvocationTraceInterceptor: java.lang.String exporterNameClause> = $r5;

        return;
    }

    public java.lang.Object invoke(org.aopalliance.intercept.MethodInvocation) throws java.lang.Throwable
    {
        org.aopalliance.intercept.MethodInvocation r0;
        java.lang.reflect.Method $r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.StringBuilder $r5, $r9, $r10, $r12, $r14, $r17, $r18, $r20, $r24, $r27, $r28, $r30, $r33, $r36, $r37, $r39;
        java.lang.Throwable $r22;
        java.lang.String $r8, $r11, $r13, $r16, $r19, $r21, $r26, $r29, $r31, $r35, $r38, $r40;
        org.springframework.remoting.support.RemoteInvocationTraceInterceptor r7;
        org.apache.commons.logging.Log $r2, $r4, $r6, $r15, $r23, $r25, $r32, $r34;
        java.lang.Object $r3;

        r7 := @this: org.springframework.remoting.support.RemoteInvocationTraceInterceptor;

        r0 := @parameter0: org.aopalliance.intercept.MethodInvocation;

        $r1 = interfaceinvoke r0.<org.aopalliance.intercept.MethodInvocation: java.lang.reflect.Method getMethod()>();

        $r2 = <org.springframework.remoting.support.RemoteInvocationTraceInterceptor: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r2.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r15 = <org.springframework.remoting.support.RemoteInvocationTraceInterceptor: org.apache.commons.logging.Log logger>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>("Incoming ");

        $r16 = r7.<org.springframework.remoting.support.RemoteInvocationTraceInterceptor: java.lang.String exporterNameClause>;

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("remote call: ");

        $r19 = staticinvoke <org.springframework.util.ClassUtils: java.lang.String getQualifiedMethodName(java.lang.reflect.Method)>($r1);

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r15.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r21);

     label1:
        $r3 = interfaceinvoke r0.<org.aopalliance.intercept.MethodInvocation: java.lang.Object proceed()>();

        $r4 = <org.springframework.remoting.support.RemoteInvocationTraceInterceptor: org.apache.commons.logging.Log logger>;

        $z1 = interfaceinvoke $r4.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z1 == 0 goto label2;

        $r6 = <org.springframework.remoting.support.RemoteInvocationTraceInterceptor: org.apache.commons.logging.Log logger>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Finished processing of ");

        $r8 = r7.<org.springframework.remoting.support.RemoteInvocationTraceInterceptor: java.lang.String exporterNameClause>;

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("remote call: ");

        $r11 = staticinvoke <org.springframework.util.ClassUtils: java.lang.String getQualifiedMethodName(java.lang.reflect.Method)>($r1);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r6.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r13);

     label2:
        return $r3;

     label3:
        $r22 := @caughtexception;

        $z2 = $r22 instanceof java.lang.RuntimeException;

        if $z2 != 0 goto label4;

        $z4 = $r22 instanceof java.lang.Error;

        if $z4 == 0 goto label5;

     label4:
        $r23 = <org.springframework.remoting.support.RemoteInvocationTraceInterceptor: org.apache.commons.logging.Log logger>;

        $z3 = interfaceinvoke $r23.<org.apache.commons.logging.Log: boolean isWarnEnabled()>();

        if $z3 == 0 goto label6;

        $r25 = <org.springframework.remoting.support.RemoteInvocationTraceInterceptor: org.apache.commons.logging.Log logger>;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>(java.lang.String)>("Processing of ");

        $r26 = r7.<org.springframework.remoting.support.RemoteInvocationTraceInterceptor: java.lang.String exporterNameClause>;

        $r27 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("remote call resulted in fatal exception: ");

        $r29 = staticinvoke <org.springframework.util.ClassUtils: java.lang.String getQualifiedMethodName(java.lang.reflect.Method)>($r1);

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r25.<org.apache.commons.logging.Log: void warn(java.lang.Object,java.lang.Throwable)>($r31, $r22);

        goto label6;

     label5:
        $r32 = <org.springframework.remoting.support.RemoteInvocationTraceInterceptor: org.apache.commons.logging.Log logger>;

        $z5 = interfaceinvoke $r32.<org.apache.commons.logging.Log: boolean isInfoEnabled()>();

        if $z5 == 0 goto label6;

        $r34 = <org.springframework.remoting.support.RemoteInvocationTraceInterceptor: org.apache.commons.logging.Log logger>;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>(java.lang.String)>("Processing of ");

        $r35 = r7.<org.springframework.remoting.support.RemoteInvocationTraceInterceptor: java.lang.String exporterNameClause>;

        $r36 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("remote call resulted in exception: ");

        $r38 = staticinvoke <org.springframework.util.ClassUtils: java.lang.String getQualifiedMethodName(java.lang.reflect.Method)>($r1);

        $r39 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r38);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r34.<org.apache.commons.logging.Log: void info(java.lang.Object,java.lang.Throwable)>($r40, $r22);

     label6:
        throw $r22;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
