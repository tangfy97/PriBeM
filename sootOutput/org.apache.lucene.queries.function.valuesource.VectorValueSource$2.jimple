class org.apache.lucene.queries.function.valuesource.VectorValueSource$2 extends org.apache.lucene.queries.function.FunctionValues
{
    final org.apache.lucene.queries.function.FunctionValues[] val$valsArr;
    final org.apache.lucene.queries.function.valuesource.VectorValueSource this$0;

    void <init>(org.apache.lucene.queries.function.valuesource.VectorValueSource, org.apache.lucene.queries.function.FunctionValues[])
    {
        org.apache.lucene.queries.function.valuesource.VectorValueSource$2 r0;
        org.apache.lucene.queries.function.FunctionValues[] r2;
        org.apache.lucene.queries.function.valuesource.VectorValueSource r1;

        r0 := @this: org.apache.lucene.queries.function.valuesource.VectorValueSource$2;

        r1 := @parameter0: org.apache.lucene.queries.function.valuesource.VectorValueSource;

        r2 := @parameter1: org.apache.lucene.queries.function.FunctionValues[];

        r0.<org.apache.lucene.queries.function.valuesource.VectorValueSource$2: org.apache.lucene.queries.function.valuesource.VectorValueSource this$0> = r1;

        r0.<org.apache.lucene.queries.function.valuesource.VectorValueSource$2: org.apache.lucene.queries.function.FunctionValues[] val$valsArr> = r2;

        specialinvoke r0.<org.apache.lucene.queries.function.FunctionValues: void <init>()>();

        return;
    }

    public void byteVal(int, byte[])
    {
        byte[] r2;
        org.apache.lucene.queries.function.FunctionValues[] $r1, $r3;
        org.apache.lucene.queries.function.valuesource.VectorValueSource$2 r0;
        byte $b2;
        int $i0, i1, i3;
        org.apache.lucene.queries.function.FunctionValues $r4;

        r0 := @this: org.apache.lucene.queries.function.valuesource.VectorValueSource$2;

        i1 := @parameter0: int;

        r2 := @parameter1: byte[];

        i3 = 0;

     label1:
        $r1 = r0.<org.apache.lucene.queries.function.valuesource.VectorValueSource$2: org.apache.lucene.queries.function.FunctionValues[] val$valsArr>;

        $i0 = lengthof $r1;

        if i3 >= $i0 goto label2;

        $r3 = r0.<org.apache.lucene.queries.function.valuesource.VectorValueSource$2: org.apache.lucene.queries.function.FunctionValues[] val$valsArr>;

        $r4 = $r3[i3];

        $b2 = virtualinvoke $r4.<org.apache.lucene.queries.function.FunctionValues: byte byteVal(int)>(i1);

        r2[i3] = $b2;

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }

    public void shortVal(int, short[])
    {
        org.apache.lucene.queries.function.FunctionValues[] $r1, $r3;
        short $s2;
        org.apache.lucene.queries.function.valuesource.VectorValueSource$2 r0;
        int $i0, i1, i3;
        org.apache.lucene.queries.function.FunctionValues $r4;
        short[] r2;

        r0 := @this: org.apache.lucene.queries.function.valuesource.VectorValueSource$2;

        i1 := @parameter0: int;

        r2 := @parameter1: short[];

        i3 = 0;

     label1:
        $r1 = r0.<org.apache.lucene.queries.function.valuesource.VectorValueSource$2: org.apache.lucene.queries.function.FunctionValues[] val$valsArr>;

        $i0 = lengthof $r1;

        if i3 >= $i0 goto label2;

        $r3 = r0.<org.apache.lucene.queries.function.valuesource.VectorValueSource$2: org.apache.lucene.queries.function.FunctionValues[] val$valsArr>;

        $r4 = $r3[i3];

        $s2 = virtualinvoke $r4.<org.apache.lucene.queries.function.FunctionValues: short shortVal(int)>(i1);

        r2[i3] = $s2;

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }

    public void floatVal(int, float[])
    {
        org.apache.lucene.queries.function.FunctionValues[] $r1, $r3;
        float[] r2;
        org.apache.lucene.queries.function.valuesource.VectorValueSource$2 r0;
        int $i0, i1, i2;
        float $f0;
        org.apache.lucene.queries.function.FunctionValues $r4;

        r0 := @this: org.apache.lucene.queries.function.valuesource.VectorValueSource$2;

        i1 := @parameter0: int;

        r2 := @parameter1: float[];

        i2 = 0;

     label1:
        $r1 = r0.<org.apache.lucene.queries.function.valuesource.VectorValueSource$2: org.apache.lucene.queries.function.FunctionValues[] val$valsArr>;

        $i0 = lengthof $r1;

        if i2 >= $i0 goto label2;

        $r3 = r0.<org.apache.lucene.queries.function.valuesource.VectorValueSource$2: org.apache.lucene.queries.function.FunctionValues[] val$valsArr>;

        $r4 = $r3[i2];

        $f0 = virtualinvoke $r4.<org.apache.lucene.queries.function.FunctionValues: float floatVal(int)>(i1);

        r2[i2] = $f0;

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    public void intVal(int, int[])
    {
        org.apache.lucene.queries.function.FunctionValues[] $r1, $r3;
        org.apache.lucene.queries.function.valuesource.VectorValueSource$2 r0;
        int[] r2;
        int $i0, i1, $i2, i3;
        org.apache.lucene.queries.function.FunctionValues $r4;

        r0 := @this: org.apache.lucene.queries.function.valuesource.VectorValueSource$2;

        i1 := @parameter0: int;

        r2 := @parameter1: int[];

        i3 = 0;

     label1:
        $r1 = r0.<org.apache.lucene.queries.function.valuesource.VectorValueSource$2: org.apache.lucene.queries.function.FunctionValues[] val$valsArr>;

        $i0 = lengthof $r1;

        if i3 >= $i0 goto label2;

        $r3 = r0.<org.apache.lucene.queries.function.valuesource.VectorValueSource$2: org.apache.lucene.queries.function.FunctionValues[] val$valsArr>;

        $r4 = $r3[i3];

        $i2 = virtualinvoke $r4.<org.apache.lucene.queries.function.FunctionValues: int intVal(int)>(i1);

        r2[i3] = $i2;

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }

    public void longVal(int, long[])
    {
        org.apache.lucene.queries.function.FunctionValues[] $r1, $r3;
        long $l2;
        long[] r2;
        org.apache.lucene.queries.function.valuesource.VectorValueSource$2 r0;
        int $i0, i1, i3;
        org.apache.lucene.queries.function.FunctionValues $r4;

        r0 := @this: org.apache.lucene.queries.function.valuesource.VectorValueSource$2;

        i1 := @parameter0: int;

        r2 := @parameter1: long[];

        i3 = 0;

     label1:
        $r1 = r0.<org.apache.lucene.queries.function.valuesource.VectorValueSource$2: org.apache.lucene.queries.function.FunctionValues[] val$valsArr>;

        $i0 = lengthof $r1;

        if i3 >= $i0 goto label2;

        $r3 = r0.<org.apache.lucene.queries.function.valuesource.VectorValueSource$2: org.apache.lucene.queries.function.FunctionValues[] val$valsArr>;

        $r4 = $r3[i3];

        $l2 = virtualinvoke $r4.<org.apache.lucene.queries.function.FunctionValues: long longVal(int)>(i1);

        r2[i3] = $l2;

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }

    public void doubleVal(int, double[])
    {
        org.apache.lucene.queries.function.FunctionValues[] $r1, $r3;
        double[] r2;
        org.apache.lucene.queries.function.valuesource.VectorValueSource$2 r0;
        int $i0, i1, i2;
        org.apache.lucene.queries.function.FunctionValues $r4;
        double $d0;

        r0 := @this: org.apache.lucene.queries.function.valuesource.VectorValueSource$2;

        i1 := @parameter0: int;

        r2 := @parameter1: double[];

        i2 = 0;

     label1:
        $r1 = r0.<org.apache.lucene.queries.function.valuesource.VectorValueSource$2: org.apache.lucene.queries.function.FunctionValues[] val$valsArr>;

        $i0 = lengthof $r1;

        if i2 >= $i0 goto label2;

        $r3 = r0.<org.apache.lucene.queries.function.valuesource.VectorValueSource$2: org.apache.lucene.queries.function.FunctionValues[] val$valsArr>;

        $r4 = $r3[i2];

        $d0 = virtualinvoke $r4.<org.apache.lucene.queries.function.FunctionValues: double doubleVal(int)>(i1);

        r2[i2] = $d0;

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    public void strVal(int, java.lang.String[])
    {
        org.apache.lucene.queries.function.FunctionValues[] $r1, $r3;
        java.lang.String[] r2;
        org.apache.lucene.queries.function.valuesource.VectorValueSource$2 r0;
        int $i0, i1, i2;
        org.apache.lucene.queries.function.FunctionValues $r4;
        java.lang.String $r5;

        r0 := @this: org.apache.lucene.queries.function.valuesource.VectorValueSource$2;

        i1 := @parameter0: int;

        r2 := @parameter1: java.lang.String[];

        i2 = 0;

     label1:
        $r1 = r0.<org.apache.lucene.queries.function.valuesource.VectorValueSource$2: org.apache.lucene.queries.function.FunctionValues[] val$valsArr>;

        $i0 = lengthof $r1;

        if i2 >= $i0 goto label2;

        $r3 = r0.<org.apache.lucene.queries.function.valuesource.VectorValueSource$2: org.apache.lucene.queries.function.FunctionValues[] val$valsArr>;

        $r4 = $r3[i2];

        $r5 = virtualinvoke $r4.<org.apache.lucene.queries.function.FunctionValues: java.lang.String strVal(int)>(i1);

        r2[i2] = $r5;

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    public java.lang.String toString(int)
    {
        org.apache.lucene.queries.function.FunctionValues[] r5;
        org.apache.lucene.queries.function.valuesource.VectorValueSource$2 r1;
        int i0, i1, i2;
        java.lang.StringBuilder $r0, $r4;
        org.apache.lucene.queries.function.FunctionValues r7;
        java.lang.String $r3, $r6, $r8;
        org.apache.lucene.queries.function.valuesource.VectorValueSource $r2;
        boolean z0;

        r1 := @this: org.apache.lucene.queries.function.valuesource.VectorValueSource$2;

        i1 := @parameter0: int;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = r1.<org.apache.lucene.queries.function.valuesource.VectorValueSource$2: org.apache.lucene.queries.function.valuesource.VectorValueSource this$0>;

        $r3 = virtualinvoke $r2.<org.apache.lucene.queries.function.valuesource.VectorValueSource: java.lang.String name()>();

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(40);

        z0 = 1;

        r5 = r1.<org.apache.lucene.queries.function.valuesource.VectorValueSource$2: org.apache.lucene.queries.function.FunctionValues[] val$valsArr>;

        i0 = lengthof r5;

        i2 = 0;

     label1:
        if i2 >= i0 goto label4;

        r7 = r5[i2];

        if z0 == 0 goto label2;

        z0 = 0;

        goto label3;

     label2:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

     label3:
        $r8 = virtualinvoke r7.<org.apache.lucene.queries.function.FunctionValues: java.lang.String toString(int)>(i1);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        i2 = i2 + 1;

        goto label1;

     label4:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r6 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }
}
