public interface  com.hp.hpl.jena.sparql.expr.Expr extends java.lang.Object
{
    public static final int CMP_GREATER;
    public static final int CMP_EQUAL;
    public static final int CMP_LESS;
    public static final int CMP_UNEQUAL;
    public static final int CMP_INDETERMINATE;

    public abstract boolean isSatisfied(com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.sparql.function.FunctionEnv);

    public abstract java.util.Set getVarsMentioned();

    public abstract void varsMentioned(java.util.Collection);

    public abstract com.hp.hpl.jena.sparql.expr.NodeValue eval(com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.sparql.function.FunctionEnv);

    public abstract com.hp.hpl.jena.sparql.expr.Expr copySubstitute(com.hp.hpl.jena.sparql.engine.binding.Binding);

    public abstract com.hp.hpl.jena.sparql.expr.Expr copySubstitute(com.hp.hpl.jena.sparql.engine.binding.Binding, boolean);

    public abstract com.hp.hpl.jena.sparql.expr.Expr applyNodeTransform(com.hp.hpl.jena.sparql.graph.NodeTransform);

    public abstract com.hp.hpl.jena.sparql.expr.Expr deepCopy();

    public abstract boolean isVariable();

    public abstract java.lang.String getVarName();

    public abstract com.hp.hpl.jena.sparql.expr.ExprVar getExprVar();

    public abstract com.hp.hpl.jena.sparql.core.Var asVar();

    public abstract boolean isConstant();

    public abstract com.hp.hpl.jena.sparql.expr.NodeValue getConstant();

    public abstract boolean isFunction();

    public abstract com.hp.hpl.jena.sparql.expr.ExprFunction getFunction();

    public abstract void visit(com.hp.hpl.jena.sparql.expr.ExprVisitor);

    public static void <clinit>()
    {
        <com.hp.hpl.jena.sparql.expr.Expr: int CMP_INDETERMINATE> = 2;

        <com.hp.hpl.jena.sparql.expr.Expr: int CMP_UNEQUAL> = -9;

        <com.hp.hpl.jena.sparql.expr.Expr: int CMP_LESS> = -1;

        <com.hp.hpl.jena.sparql.expr.Expr: int CMP_EQUAL> = 0;

        <com.hp.hpl.jena.sparql.expr.Expr: int CMP_GREATER> = 1;

        return;
    }
}
