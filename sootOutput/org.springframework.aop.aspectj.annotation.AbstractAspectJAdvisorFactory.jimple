public abstract class org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory extends java.lang.Object implements org.springframework.aop.aspectj.'annotation'.AspectJAdvisorFactory
{
    protected static final org.springframework.core.ParameterNameDiscoverer ASPECTJ_ANNOTATION_PARAMETER_NAME_DISCOVERER;
    private static final java.lang.String AJC_MAGIC;
    protected final org.apache.commons.logging.Log logger;
    protected final org.springframework.core.ParameterNameDiscoverer parameterNameDiscoverer;

    static void <clinit>()
    {
        org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotationParameterNameDiscoverer $r0;

        <org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory: java.lang.String AJC_MAGIC> = "ajc$";

        $r0 = new org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotationParameterNameDiscoverer;

        specialinvoke $r0.<org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotationParameterNameDiscoverer: void <init>(org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotationParameterNameDiscoverer)>(null);

        <org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory: org.springframework.core.ParameterNameDiscoverer ASPECTJ_ANNOTATION_PARAMETER_NAME_DISCOVERER> = $r0;

        return;
    }

    protected static org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotation findAspectJAnnotationOnMethod(java.lang.reflect.Method)
    {
        org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotation $r3;
        int i0, i1;
        java.lang.Class[] $r0;
        java.lang.Class r1;
        java.lang.reflect.Method r2;

        r2 := @parameter0: java.lang.reflect.Method;

        $r0 = newarray (java.lang.Class)[6];

        $r0[0] = class "Lorg/aspectj/lang/annotation/Before;";

        $r0[1] = class "Lorg/aspectj/lang/annotation/Around;";

        $r0[2] = class "Lorg/aspectj/lang/annotation/After;";

        $r0[3] = class "Lorg/aspectj/lang/annotation/AfterReturning;";

        $r0[4] = class "Lorg/aspectj/lang/annotation/AfterThrowing;";

        $r0[5] = class "Lorg/aspectj/lang/annotation/Pointcut;";

        i0 = lengthof $r0;

        i1 = 0;

        goto label3;

     label1:
        r1 = $r0[i1];

        $r3 = staticinvoke <org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory: org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotation findAnnotation(java.lang.reflect.Method,java.lang.Class)>(r2, r1);

        if $r3 == null goto label2;

        return $r3;

     label2:
        i1 = i1 + 1;

     label3:
        if i1 < i0 goto label1;

        return null;
    }

    private static org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotation findAnnotation(java.lang.reflect.Method, java.lang.Class)
    {
        org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotation $r3;
        java.lang.'annotation'.Annotation $r2;
        java.lang.Class r1;
        java.lang.reflect.Method r0;

        r0 := @parameter0: java.lang.reflect.Method;

        r1 := @parameter1: java.lang.Class;

        $r2 = staticinvoke <org.springframework.core.'annotation'.AnnotationUtils: java.lang.'annotation'.Annotation findAnnotation(java.lang.reflect.Method,java.lang.Class)>(r0, r1);

        if $r2 == null goto label1;

        $r3 = new org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotation;

        specialinvoke $r3.<org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotation: void <init>(java.lang.'annotation'.Annotation)>($r2);

        return $r3;

     label1:
        return null;
    }

    protected void <init>()
    {
        org.springframework.core.ParameterNameDiscoverer $r4;
        org.springframework.core.PrioritizedParameterNameDiscoverer $r3;
        org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory r0;
        java.lang.Class $r1;
        org.apache.commons.logging.Log $r2;

        r0 := @this: org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        r0.<org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory: org.apache.commons.logging.Log logger> = $r2;

        $r3 = new org.springframework.core.PrioritizedParameterNameDiscoverer;

        specialinvoke $r3.<org.springframework.core.PrioritizedParameterNameDiscoverer: void <init>()>();

        $r4 = <org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory: org.springframework.core.ParameterNameDiscoverer ASPECTJ_ANNOTATION_PARAMETER_NAME_DISCOVERER>;

        virtualinvoke $r3.<org.springframework.core.PrioritizedParameterNameDiscoverer: void addDiscoverer(org.springframework.core.ParameterNameDiscoverer)>($r4);

        r0.<org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory: org.springframework.core.ParameterNameDiscoverer parameterNameDiscoverer> = $r3;

        return;
    }

    public boolean isAspect(java.lang.Class)
    {
        org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory r0;
        java.lang.Class r1;
        boolean $z0, $z1;

        r0 := @this: org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory;

        r1 := @parameter0: java.lang.Class;

        $z0 = specialinvoke r0.<org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory: boolean hasAspectAnnotation(java.lang.Class)>(r1);

        if $z0 == 0 goto label1;

        $z1 = specialinvoke r0.<org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory: boolean compiledByAjc(java.lang.Class)>(r1);

        if $z1 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private boolean hasAspectAnnotation(java.lang.Class)
    {
        java.lang.'annotation'.Annotation $r1;
        java.lang.Class r0;
        org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory r2;

        r2 := @this: org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <org.springframework.core.'annotation'.AnnotationUtils: java.lang.'annotation'.Annotation findAnnotation(java.lang.Class,java.lang.Class)>(r0, class "Lorg/aspectj/lang/annotation/Aspect;");

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    private boolean compiledByAjc(java.lang.Class)
    {
        org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory r4;
        java.lang.reflect.Field r2;
        java.lang.reflect.Field[] $r1;
        int i0, i1;
        java.lang.Class r0;
        java.lang.String $r3;
        boolean $z0;

        r4 := @this: org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory;

        r0 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        i0 = lengthof $r1;

        i1 = 0;

        goto label3;

     label1:
        r2 = $r1[i1];

        $r3 = virtualinvoke r2.<java.lang.reflect.Field: java.lang.String getName()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>("ajc$");

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

     label3:
        if i1 < i0 goto label1;

        return 0;
    }

    public void validate(java.lang.Class) throws org.springframework.aop.framework.AopConfigException
    {
        org.aspectj.lang.reflect.AjType $r3;
        org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory r36;
        org.aspectj.lang.reflect.PerClause $r4, $r7;
        boolean $z0, $z1;
        org.aspectj.lang.reflect.PerClauseKind $r5, $r6, $r8, $r9;
        java.lang.'annotation'.Annotation $r2;
        java.lang.StringBuilder $r11, $r14, $r15, $r18, $r21, $r22, $r27, $r29, $r30, $r33, $r34;
        org.springframework.aop.aspectj.'annotation'.NotAnAtAspectException $r24;
        org.springframework.aop.framework.AopConfigException $r10, $r17, $r26;
        int $i0;
        java.lang.String $r12, $r13, $r16, $r19, $r20, $r23, $r28, $r32, $r35;
        java.lang.Class r0, $r1, $r25, $r31;

        r36 := @this: org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory;

        r0 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.Class getSuperclass()>();

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/aspectj/lang/annotation/Aspect;");

        if $r2 == null goto label1;

        $r25 = virtualinvoke r0.<java.lang.Class: java.lang.Class getSuperclass()>();

        $i0 = virtualinvoke $r25.<java.lang.Class: int getModifiers()>();

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isAbstract(int)>($i0);

        if $z1 != 0 goto label1;

        $r26 = new org.springframework.aop.framework.AopConfigException;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>(java.lang.String)>("[");

        $r28 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] cannot extend concrete aspect [");

        $r31 = virtualinvoke r0.<java.lang.Class: java.lang.Class getSuperclass()>();

        $r32 = virtualinvoke $r31.<java.lang.Class: java.lang.String getName()>();

        $r33 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r26.<org.springframework.aop.framework.AopConfigException: void <init>(java.lang.String)>($r35);

        throw $r26;

     label1:
        $r3 = staticinvoke <org.aspectj.lang.reflect.AjTypeSystem: org.aspectj.lang.reflect.AjType getAjType(java.lang.Class)>(r0);

        $z0 = interfaceinvoke $r3.<org.aspectj.lang.reflect.AjType: boolean isAspect()>();

        if $z0 != 0 goto label2;

        $r24 = new org.springframework.aop.aspectj.'annotation'.NotAnAtAspectException;

        specialinvoke $r24.<org.springframework.aop.aspectj.'annotation'.NotAnAtAspectException: void <init>(java.lang.Class)>(r0);

        throw $r24;

     label2:
        $r4 = interfaceinvoke $r3.<org.aspectj.lang.reflect.AjType: org.aspectj.lang.reflect.PerClause getPerClause()>();

        $r5 = interfaceinvoke $r4.<org.aspectj.lang.reflect.PerClause: org.aspectj.lang.reflect.PerClauseKind getKind()>();

        $r6 = <org.aspectj.lang.reflect.PerClauseKind: org.aspectj.lang.reflect.PerClauseKind PERCFLOW>;

        if $r5 != $r6 goto label3;

        $r17 = new org.springframework.aop.framework.AopConfigException;

        $r18 = new java.lang.StringBuilder;

        $r19 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r20 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r19);

        specialinvoke $r18.<java.lang.StringBuilder: void <init>(java.lang.String)>($r20);

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" uses percflow instantiation model: ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("This is not supported in Spring AOP.");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<org.springframework.aop.framework.AopConfigException: void <init>(java.lang.String)>($r23);

        throw $r17;

     label3:
        $r7 = interfaceinvoke $r3.<org.aspectj.lang.reflect.AjType: org.aspectj.lang.reflect.PerClause getPerClause()>();

        $r8 = interfaceinvoke $r7.<org.aspectj.lang.reflect.PerClause: org.aspectj.lang.reflect.PerClauseKind getKind()>();

        $r9 = <org.aspectj.lang.reflect.PerClauseKind: org.aspectj.lang.reflect.PerClauseKind PERCFLOWBELOW>;

        if $r8 != $r9 goto label4;

        $r10 = new org.springframework.aop.framework.AopConfigException;

        $r11 = new java.lang.StringBuilder;

        $r12 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r13 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r12);

        specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>($r13);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" uses percflowbelow instantiation model: ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("This is not supported in Spring AOP.");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<org.springframework.aop.framework.AopConfigException: void <init>(java.lang.String)>($r16);

        throw $r10;

     label4:
        return;
    }

    protected org.springframework.aop.aspectj.AspectJExpressionPointcut createPointcutExpression(java.lang.reflect.Method, java.lang.Class, java.lang.String[])
    {
        java.lang.Class[] r6;
        java.lang.String[] r0;
        java.lang.Class r2;
        org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory r5;
        java.lang.String $r4;
        org.springframework.aop.aspectj.AspectJExpressionPointcut $r1;
        java.lang.reflect.Method r3;

        r5 := @this: org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory;

        r3 := @parameter0: java.lang.reflect.Method;

        r2 := @parameter1: java.lang.Class;

        r0 := @parameter2: java.lang.String[];

        r6 = newarray (java.lang.Class)[0];

        if r0 == null goto label1;

        r6 = specialinvoke r5.<org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory: java.lang.Class[] extractPointcutParameterTypes(java.lang.String[],java.lang.reflect.Method)>(r0, r3);

     label1:
        $r1 = new org.springframework.aop.aspectj.AspectJExpressionPointcut;

        specialinvoke $r1.<org.springframework.aop.aspectj.AspectJExpressionPointcut: void <init>(java.lang.Class,java.lang.String[],java.lang.Class[])>(r2, r0, r6);

        $r4 = virtualinvoke r3.<java.lang.reflect.Method: java.lang.String toString()>();

        virtualinvoke $r1.<org.springframework.aop.aspectj.AspectJExpressionPointcut: void setLocation(java.lang.String)>($r4);

        return $r1;
    }

    private java.lang.Class[] extractPointcutParameterTypes(java.lang.String[], java.lang.reflect.Method)
    {
        java.lang.IllegalStateException $r5;
        java.lang.String[] r0;
        org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory r11;
        int $i0, $i1, $i2, $i3, $i4, i5, $i6, $i7, $i8, $i9, i10;
        java.lang.String $r10;
        java.lang.reflect.Method r2;
        java.lang.Class[] r1, $r3;
        java.lang.Class $r4;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;

        r11 := @this: org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory;

        r0 := @parameter0: java.lang.String[];

        r2 := @parameter1: java.lang.reflect.Method;

        $i0 = lengthof r0;

        r1 = newarray (java.lang.Class)[$i0];

        $r3 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i2 = lengthof r0;

        $i1 = lengthof $r3;

        if $i2 <= $i1 goto label1;

        $r5 = new java.lang.IllegalStateException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("Expecting at least ");

        $i8 = lengthof r0;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" arguments in the advice declaration, but only found ");

        $i9 = lengthof $r3;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r10);

        throw $r5;

     label1:
        $i4 = lengthof $r3;

        $i3 = lengthof r0;

        i5 = $i4 - $i3;

        i10 = 0;

        goto label3;

     label2:
        $i7 = i10 + i5;

        $r4 = $r3[$i7];

        r1[i10] = $r4;

        i10 = i10 + 1;

     label3:
        $i6 = lengthof r1;

        if i10 < $i6 goto label2;

        return r1;
    }
}
