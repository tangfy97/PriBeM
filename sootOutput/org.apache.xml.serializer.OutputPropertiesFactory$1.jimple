class org.apache.xml.serializer.OutputPropertiesFactory$1 extends java.lang.Object implements java.security.PrivilegedAction
{
    static java.lang.Class class$org$apache$xml$serializer$OutputPropertiesFactory;
    private final java.lang.String val$resourceName;

    void <init>(java.lang.String)
    {
        org.apache.xml.serializer.OutputPropertiesFactory$1 r0;
        java.lang.String r1;

        r0 := @this: org.apache.xml.serializer.OutputPropertiesFactory$1;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.xml.serializer.OutputPropertiesFactory$1: java.lang.String val$resourceName> = r1;

        return;
    }

    public java.lang.Object run()
    {
        org.apache.xml.serializer.OutputPropertiesFactory$1 r1;
        java.lang.Class $r0, $r4;
        java.lang.String $r2;
        java.io.InputStream $r3;

        r1 := @this: org.apache.xml.serializer.OutputPropertiesFactory$1;

        $r0 = <org.apache.xml.serializer.OutputPropertiesFactory$1: java.lang.Class class$org$apache$xml$serializer$OutputPropertiesFactory>;

        if $r0 != null goto label1;

        $r4 = staticinvoke <org.apache.xml.serializer.OutputPropertiesFactory$1: java.lang.Class class$(java.lang.String)>("org.apache.xml.serializer.OutputPropertiesFactory");

        <org.apache.xml.serializer.OutputPropertiesFactory$1: java.lang.Class class$org$apache$xml$serializer$OutputPropertiesFactory> = $r4;

        goto label2;

     label1:
        $r4 = <org.apache.xml.serializer.OutputPropertiesFactory$1: java.lang.Class class$org$apache$xml$serializer$OutputPropertiesFactory>;

     label2:
        $r2 = r1.<org.apache.xml.serializer.OutputPropertiesFactory$1: java.lang.String val$resourceName>;

        $r3 = virtualinvoke $r4.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>($r2);

        return $r3;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        return $r1;

     label2:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label2;
    }
}
