public abstract class org.springframework.util.xml.StaxUtils extends java.lang.Object
{
    private static boolean jaxp14Available;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.ClassLoader $r1;
        boolean $z0;

        $r0 = class "Lorg/springframework/util/xml/StaxUtils;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $z0 = staticinvoke <org.springframework.util.ClassUtils: boolean isPresent(java.lang.String,java.lang.ClassLoader)>("javax.xml.transform.stax.StAXSource", $r1);

        <org.springframework.util.xml.StaxUtils: boolean jaxp14Available> = $z0;

        return;
    }

    public void <init>()
    {
        org.springframework.util.xml.StaxUtils r0;

        r0 := @this: org.springframework.util.xml.StaxUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static javax.xml.transform.Source createCustomStaxSource(javax.xml.stream.XMLStreamReader)
    {
        org.springframework.util.xml.StaxSource $r0;
        javax.xml.stream.XMLStreamReader r1;

        r1 := @parameter0: javax.xml.stream.XMLStreamReader;

        $r0 = new org.springframework.util.xml.StaxSource;

        specialinvoke $r0.<org.springframework.util.xml.StaxSource: void <init>(javax.xml.stream.XMLStreamReader)>(r1);

        return $r0;
    }

    public static javax.xml.transform.Source createStaxSource(javax.xml.stream.XMLStreamReader)
    {
        javax.xml.stream.XMLStreamReader r0;
        javax.xml.transform.Source $r1, $r2;
        boolean $z0;

        r0 := @parameter0: javax.xml.stream.XMLStreamReader;

        $z0 = <org.springframework.util.xml.StaxUtils: boolean jaxp14Available>;

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <org.springframework.util.xml.StaxUtils$Jaxp14StaxHandler: javax.xml.transform.Source access$0(javax.xml.stream.XMLStreamReader)>(r0);

        return $r2;

     label1:
        $r1 = staticinvoke <org.springframework.util.xml.StaxUtils: javax.xml.transform.Source createCustomStaxSource(javax.xml.stream.XMLStreamReader)>(r0);

        return $r1;
    }

    public static javax.xml.transform.Source createCustomStaxSource(javax.xml.stream.XMLEventReader)
    {
        javax.xml.stream.XMLEventReader r1;
        org.springframework.util.xml.StaxSource $r0;

        r1 := @parameter0: javax.xml.stream.XMLEventReader;

        $r0 = new org.springframework.util.xml.StaxSource;

        specialinvoke $r0.<org.springframework.util.xml.StaxSource: void <init>(javax.xml.stream.XMLEventReader)>(r1);

        return $r0;
    }

    public static javax.xml.transform.Source createStaxSource(javax.xml.stream.XMLEventReader) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.XMLEventReader r0;
        javax.xml.transform.Source $r1, $r2;
        boolean $z0;

        r0 := @parameter0: javax.xml.stream.XMLEventReader;

        $z0 = <org.springframework.util.xml.StaxUtils: boolean jaxp14Available>;

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <org.springframework.util.xml.StaxUtils$Jaxp14StaxHandler: javax.xml.transform.Source access$1(javax.xml.stream.XMLEventReader)>(r0);

        return $r2;

     label1:
        $r1 = staticinvoke <org.springframework.util.xml.StaxUtils: javax.xml.transform.Source createCustomStaxSource(javax.xml.stream.XMLEventReader)>(r0);

        return $r1;
    }

    public static boolean isStaxSource(javax.xml.transform.Source)
    {
        javax.xml.transform.Source r0;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: javax.xml.transform.Source;

        $z0 = r0 instanceof org.springframework.util.xml.StaxSource;

        if $z0 != 0 goto label2;

        $z1 = <org.springframework.util.xml.StaxUtils: boolean jaxp14Available>;

        if $z1 == 0 goto label1;

        $z2 = staticinvoke <org.springframework.util.xml.StaxUtils$Jaxp14StaxHandler: boolean access$2(javax.xml.transform.Source)>(r0);

        if $z2 != 0 goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }

    public static javax.xml.transform.Result createCustomStaxResult(javax.xml.stream.XMLStreamWriter)
    {
        javax.xml.stream.XMLStreamWriter r1;
        org.springframework.util.xml.StaxResult $r0;

        r1 := @parameter0: javax.xml.stream.XMLStreamWriter;

        $r0 = new org.springframework.util.xml.StaxResult;

        specialinvoke $r0.<org.springframework.util.xml.StaxResult: void <init>(javax.xml.stream.XMLStreamWriter)>(r1);

        return $r0;
    }

    public static javax.xml.transform.Result createStaxResult(javax.xml.stream.XMLStreamWriter)
    {
        javax.xml.stream.XMLStreamWriter r0;
        javax.xml.transform.Result $r1, $r2;
        boolean $z0;

        r0 := @parameter0: javax.xml.stream.XMLStreamWriter;

        $z0 = <org.springframework.util.xml.StaxUtils: boolean jaxp14Available>;

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <org.springframework.util.xml.StaxUtils$Jaxp14StaxHandler: javax.xml.transform.Result access$3(javax.xml.stream.XMLStreamWriter)>(r0);

        return $r2;

     label1:
        $r1 = staticinvoke <org.springframework.util.xml.StaxUtils: javax.xml.transform.Result createCustomStaxResult(javax.xml.stream.XMLStreamWriter)>(r0);

        return $r1;
    }

    public static javax.xml.transform.Result createCustomStaxResult(javax.xml.stream.XMLEventWriter)
    {
        javax.xml.stream.XMLEventWriter r1;
        org.springframework.util.xml.StaxResult $r0;

        r1 := @parameter0: javax.xml.stream.XMLEventWriter;

        $r0 = new org.springframework.util.xml.StaxResult;

        specialinvoke $r0.<org.springframework.util.xml.StaxResult: void <init>(javax.xml.stream.XMLEventWriter)>(r1);

        return $r0;
    }

    public static javax.xml.transform.Result createStaxResult(javax.xml.stream.XMLEventWriter) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.XMLEventWriter r0;
        javax.xml.transform.Result $r1, $r2;
        boolean $z0;

        r0 := @parameter0: javax.xml.stream.XMLEventWriter;

        $z0 = <org.springframework.util.xml.StaxUtils: boolean jaxp14Available>;

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <org.springframework.util.xml.StaxUtils$Jaxp14StaxHandler: javax.xml.transform.Result access$4(javax.xml.stream.XMLEventWriter)>(r0);

        return $r2;

     label1:
        $r1 = staticinvoke <org.springframework.util.xml.StaxUtils: javax.xml.transform.Result createCustomStaxResult(javax.xml.stream.XMLEventWriter)>(r0);

        return $r1;
    }

    public static boolean isStaxResult(javax.xml.transform.Result)
    {
        javax.xml.transform.Result r0;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: javax.xml.transform.Result;

        $z0 = r0 instanceof org.springframework.util.xml.StaxResult;

        if $z0 != 0 goto label2;

        $z1 = <org.springframework.util.xml.StaxUtils: boolean jaxp14Available>;

        if $z1 == 0 goto label1;

        $z2 = staticinvoke <org.springframework.util.xml.StaxUtils$Jaxp14StaxHandler: boolean access$5(javax.xml.transform.Result)>(r0);

        if $z2 != 0 goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }

    public static javax.xml.stream.XMLStreamReader getXMLStreamReader(javax.xml.transform.Source)
    {
        javax.xml.transform.Source r0;
        org.springframework.util.xml.StaxSource $r7;
        java.lang.IllegalArgumentException $r1;
        javax.xml.stream.XMLStreamReader $r6, $r8;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;
        boolean $z0, $z1;

        r0 := @parameter0: javax.xml.transform.Source;

        $z0 = r0 instanceof org.springframework.util.xml.StaxSource;

        if $z0 == 0 goto label1;

        $r7 = (org.springframework.util.xml.StaxSource) r0;

        $r8 = virtualinvoke $r7.<org.springframework.util.xml.StaxSource: javax.xml.stream.XMLStreamReader getXMLStreamReader()>();

        return $r8;

     label1:
        $z1 = <org.springframework.util.xml.StaxUtils: boolean jaxp14Available>;

        if $z1 == 0 goto label2;

        $r6 = staticinvoke <org.springframework.util.xml.StaxUtils$Jaxp14StaxHandler: javax.xml.stream.XMLStreamReader access$6(javax.xml.transform.Source)>(r0);

        return $r6;

     label2:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("Source \'");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is neither StaxSource nor StAXSource");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;
    }

    public static javax.xml.stream.XMLEventReader getXMLEventReader(javax.xml.transform.Source)
    {
        javax.xml.stream.XMLEventReader $r6, $r8;
        javax.xml.transform.Source r0;
        org.springframework.util.xml.StaxSource $r7;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;
        boolean $z0, $z1;

        r0 := @parameter0: javax.xml.transform.Source;

        $z0 = r0 instanceof org.springframework.util.xml.StaxSource;

        if $z0 == 0 goto label1;

        $r7 = (org.springframework.util.xml.StaxSource) r0;

        $r8 = virtualinvoke $r7.<org.springframework.util.xml.StaxSource: javax.xml.stream.XMLEventReader getXMLEventReader()>();

        return $r8;

     label1:
        $z1 = <org.springframework.util.xml.StaxUtils: boolean jaxp14Available>;

        if $z1 == 0 goto label2;

        $r6 = staticinvoke <org.springframework.util.xml.StaxUtils$Jaxp14StaxHandler: javax.xml.stream.XMLEventReader access$7(javax.xml.transform.Source)>(r0);

        return $r6;

     label2:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("Source \'");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is neither StaxSource nor StAXSource");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;
    }

    public static javax.xml.stream.XMLStreamWriter getXMLStreamWriter(javax.xml.transform.Result)
    {
        javax.xml.transform.Result r0;
        java.lang.IllegalArgumentException $r1;
        org.springframework.util.xml.StaxResult $r7;
        java.lang.StringBuilder $r2, $r3, $r4;
        javax.xml.stream.XMLStreamWriter $r6, $r8;
        java.lang.String $r5;
        boolean $z0, $z1;

        r0 := @parameter0: javax.xml.transform.Result;

        $z0 = r0 instanceof org.springframework.util.xml.StaxResult;

        if $z0 == 0 goto label1;

        $r7 = (org.springframework.util.xml.StaxResult) r0;

        $r8 = virtualinvoke $r7.<org.springframework.util.xml.StaxResult: javax.xml.stream.XMLStreamWriter getXMLStreamWriter()>();

        return $r8;

     label1:
        $z1 = <org.springframework.util.xml.StaxUtils: boolean jaxp14Available>;

        if $z1 == 0 goto label2;

        $r6 = staticinvoke <org.springframework.util.xml.StaxUtils$Jaxp14StaxHandler: javax.xml.stream.XMLStreamWriter access$8(javax.xml.transform.Result)>(r0);

        return $r6;

     label2:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("Result \'");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is neither StaxResult nor StAXResult");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;
    }

    public static javax.xml.stream.XMLEventWriter getXMLEventWriter(javax.xml.transform.Result)
    {
        javax.xml.transform.Result r0;
        java.lang.IllegalArgumentException $r1;
        javax.xml.stream.XMLEventWriter $r6, $r8;
        org.springframework.util.xml.StaxResult $r7;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;
        boolean $z0, $z1;

        r0 := @parameter0: javax.xml.transform.Result;

        $z0 = r0 instanceof org.springframework.util.xml.StaxResult;

        if $z0 == 0 goto label1;

        $r7 = (org.springframework.util.xml.StaxResult) r0;

        $r8 = virtualinvoke $r7.<org.springframework.util.xml.StaxResult: javax.xml.stream.XMLEventWriter getXMLEventWriter()>();

        return $r8;

     label1:
        $z1 = <org.springframework.util.xml.StaxUtils: boolean jaxp14Available>;

        if $z1 == 0 goto label2;

        $r6 = staticinvoke <org.springframework.util.xml.StaxUtils$Jaxp14StaxHandler: javax.xml.stream.XMLEventWriter access$9(javax.xml.transform.Result)>(r0);

        return $r6;

     label2:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("Result \'");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is neither StaxResult nor StAXResult");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;
    }

    public static org.xml.sax.ContentHandler createContentHandler(javax.xml.stream.XMLStreamWriter)
    {
        javax.xml.stream.XMLStreamWriter r1;
        org.springframework.util.xml.StaxStreamContentHandler $r0;

        r1 := @parameter0: javax.xml.stream.XMLStreamWriter;

        $r0 = new org.springframework.util.xml.StaxStreamContentHandler;

        specialinvoke $r0.<org.springframework.util.xml.StaxStreamContentHandler: void <init>(javax.xml.stream.XMLStreamWriter)>(r1);

        return $r0;
    }

    public static org.xml.sax.ContentHandler createContentHandler(javax.xml.stream.XMLEventWriter)
    {
        javax.xml.stream.XMLEventWriter r1;
        org.springframework.util.xml.StaxEventContentHandler $r0;

        r1 := @parameter0: javax.xml.stream.XMLEventWriter;

        $r0 = new org.springframework.util.xml.StaxEventContentHandler;

        specialinvoke $r0.<org.springframework.util.xml.StaxEventContentHandler: void <init>(javax.xml.stream.util.XMLEventConsumer)>(r1);

        return $r0;
    }

    public static org.xml.sax.XMLReader createXMLReader(javax.xml.stream.XMLStreamReader)
    {
        org.springframework.util.xml.StaxStreamXMLReader $r0;
        javax.xml.stream.XMLStreamReader r1;

        r1 := @parameter0: javax.xml.stream.XMLStreamReader;

        $r0 = new org.springframework.util.xml.StaxStreamXMLReader;

        specialinvoke $r0.<org.springframework.util.xml.StaxStreamXMLReader: void <init>(javax.xml.stream.XMLStreamReader)>(r1);

        return $r0;
    }

    public static org.xml.sax.XMLReader createXMLReader(javax.xml.stream.XMLEventReader)
    {
        org.springframework.util.xml.StaxEventXMLReader $r0;
        javax.xml.stream.XMLEventReader r1;

        r1 := @parameter0: javax.xml.stream.XMLEventReader;

        $r0 = new org.springframework.util.xml.StaxEventXMLReader;

        specialinvoke $r0.<org.springframework.util.xml.StaxEventXMLReader: void <init>(javax.xml.stream.XMLEventReader)>(r1);

        return $r0;
    }

    public static javax.xml.stream.XMLStreamReader createEventStreamReader(javax.xml.stream.XMLEventReader) throws javax.xml.stream.XMLStreamException
    {
        org.springframework.util.xml.XMLEventStreamReader $r0;
        javax.xml.stream.XMLEventReader r1;

        r1 := @parameter0: javax.xml.stream.XMLEventReader;

        $r0 = new org.springframework.util.xml.XMLEventStreamReader;

        specialinvoke $r0.<org.springframework.util.xml.XMLEventStreamReader: void <init>(javax.xml.stream.XMLEventReader)>(r1);

        return $r0;
    }

    public static javax.xml.stream.XMLStreamWriter createEventStreamWriter(javax.xml.stream.XMLEventWriter, javax.xml.stream.XMLEventFactory)
    {
        javax.xml.stream.XMLEventWriter r1;
        org.springframework.util.xml.XMLEventStreamWriter $r0;
        javax.xml.stream.XMLEventFactory r2;

        r1 := @parameter0: javax.xml.stream.XMLEventWriter;

        r2 := @parameter1: javax.xml.stream.XMLEventFactory;

        $r0 = new org.springframework.util.xml.XMLEventStreamWriter;

        specialinvoke $r0.<org.springframework.util.xml.XMLEventStreamWriter: void <init>(javax.xml.stream.XMLEventWriter,javax.xml.stream.XMLEventFactory)>(r1, r2);

        return $r0;
    }
}
