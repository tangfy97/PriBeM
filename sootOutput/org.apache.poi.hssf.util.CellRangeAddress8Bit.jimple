public final class org.apache.poi.hssf.util.CellRangeAddress8Bit extends org.apache.poi.ss.util.CellRangeAddressBase
{
    public static final int ENCODED_SIZE;

    public void <init>(int, int, int, int)
    {
        org.apache.poi.hssf.util.CellRangeAddress8Bit r0;
        int i0, i1, i2, i3;

        r0 := @this: org.apache.poi.hssf.util.CellRangeAddress8Bit;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        specialinvoke r0.<org.apache.poi.ss.util.CellRangeAddressBase: void <init>(int,int,int,int)>(i0, i1, i2, i3);

        return;
    }

    public void <init>(org.apache.poi.util.LittleEndianInput)
    {
        org.apache.poi.hssf.util.CellRangeAddress8Bit r0;
        org.apache.poi.util.LittleEndianInput r1;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.apache.poi.hssf.util.CellRangeAddress8Bit;

        r1 := @parameter0: org.apache.poi.util.LittleEndianInput;

        $i0 = staticinvoke <org.apache.poi.hssf.util.CellRangeAddress8Bit: int readUShortAndCheck(org.apache.poi.util.LittleEndianInput)>(r1);

        $i1 = interfaceinvoke r1.<org.apache.poi.util.LittleEndianInput: int readUShort()>();

        $i2 = interfaceinvoke r1.<org.apache.poi.util.LittleEndianInput: int readUByte()>();

        $i3 = interfaceinvoke r1.<org.apache.poi.util.LittleEndianInput: int readUByte()>();

        specialinvoke r0.<org.apache.poi.ss.util.CellRangeAddressBase: void <init>(int,int,int,int)>($i0, $i1, $i2, $i3);

        return;
    }

    private static int readUShortAndCheck(org.apache.poi.util.LittleEndianInput)
    {
        org.apache.poi.util.LittleEndianInput r0;
        int $i0, $i1;
        java.lang.RuntimeException $r1;

        r0 := @parameter0: org.apache.poi.util.LittleEndianInput;

        $i0 = interfaceinvoke r0.<org.apache.poi.util.LittleEndianInput: int available()>();

        if $i0 >= 6 goto label1;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Ran out of data reading CellRangeAddress");

        throw $r1;

     label1:
        $i1 = interfaceinvoke r0.<org.apache.poi.util.LittleEndianInput: int readUShort()>();

        return $i1;
    }

    public int serialize(int, byte[])
    {
        byte[] r2;
        org.apache.poi.hssf.util.CellRangeAddress8Bit r0;
        int i0;
        org.apache.poi.util.LittleEndianByteArrayOutputStream $r1;

        r0 := @this: org.apache.poi.hssf.util.CellRangeAddress8Bit;

        i0 := @parameter0: int;

        r2 := @parameter1: byte[];

        $r1 = new org.apache.poi.util.LittleEndianByteArrayOutputStream;

        specialinvoke $r1.<org.apache.poi.util.LittleEndianByteArrayOutputStream: void <init>(byte[],int,int)>(r2, i0, 6);

        virtualinvoke r0.<org.apache.poi.hssf.util.CellRangeAddress8Bit: void serialize(org.apache.poi.util.LittleEndianOutput)>($r1);

        return 6;
    }

    public void serialize(org.apache.poi.util.LittleEndianOutput)
    {
        org.apache.poi.util.LittleEndianOutput r0;
        org.apache.poi.hssf.util.CellRangeAddress8Bit r1;
        int $i0, $i1, $i2, $i3;

        r1 := @this: org.apache.poi.hssf.util.CellRangeAddress8Bit;

        r0 := @parameter0: org.apache.poi.util.LittleEndianOutput;

        $i0 = virtualinvoke r1.<org.apache.poi.hssf.util.CellRangeAddress8Bit: int getFirstRow()>();

        interfaceinvoke r0.<org.apache.poi.util.LittleEndianOutput: void writeShort(int)>($i0);

        $i1 = virtualinvoke r1.<org.apache.poi.hssf.util.CellRangeAddress8Bit: int getLastRow()>();

        interfaceinvoke r0.<org.apache.poi.util.LittleEndianOutput: void writeShort(int)>($i1);

        $i2 = virtualinvoke r1.<org.apache.poi.hssf.util.CellRangeAddress8Bit: int getFirstColumn()>();

        interfaceinvoke r0.<org.apache.poi.util.LittleEndianOutput: void writeByte(int)>($i2);

        $i3 = virtualinvoke r1.<org.apache.poi.hssf.util.CellRangeAddress8Bit: int getLastColumn()>();

        interfaceinvoke r0.<org.apache.poi.util.LittleEndianOutput: void writeByte(int)>($i3);

        return;
    }

    public org.apache.poi.hssf.util.CellRangeAddress8Bit copy()
    {
        org.apache.poi.hssf.util.CellRangeAddress8Bit $r0, r1;
        int $i0, $i1, $i2, $i3;

        r1 := @this: org.apache.poi.hssf.util.CellRangeAddress8Bit;

        $r0 = new org.apache.poi.hssf.util.CellRangeAddress8Bit;

        $i0 = virtualinvoke r1.<org.apache.poi.hssf.util.CellRangeAddress8Bit: int getFirstRow()>();

        $i1 = virtualinvoke r1.<org.apache.poi.hssf.util.CellRangeAddress8Bit: int getLastRow()>();

        $i2 = virtualinvoke r1.<org.apache.poi.hssf.util.CellRangeAddress8Bit: int getFirstColumn()>();

        $i3 = virtualinvoke r1.<org.apache.poi.hssf.util.CellRangeAddress8Bit: int getLastColumn()>();

        specialinvoke $r0.<org.apache.poi.hssf.util.CellRangeAddress8Bit: void <init>(int,int,int,int)>($i0, $i1, $i2, $i3);

        return $r0;
    }

    public static int getEncodedSize(int)
    {
        int i0, $i1;

        i0 := @parameter0: int;

        $i1 = i0 * 6;

        return $i1;
    }

    public static void <clinit>()
    {
        <org.apache.poi.hssf.util.CellRangeAddress8Bit: int ENCODED_SIZE> = 6;

        return;
    }
}
