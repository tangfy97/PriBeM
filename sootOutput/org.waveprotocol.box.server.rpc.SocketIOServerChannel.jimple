public class org.waveprotocol.box.server.rpc.SocketIOServerChannel extends org.waveprotocol.box.server.rpc.WebSocketChannel implements com.glines.socketio.server.SocketIOInbound
{
    private static final org.waveprotocol.wave.util.logging.Log LOG;
    private com.glines.socketio.server.SocketIOOutbound outbound;

    public void <init>(org.waveprotocol.box.server.rpc.ProtoCallback)
    {
        org.waveprotocol.box.server.rpc.SocketIOServerChannel r0;
        org.waveprotocol.box.server.rpc.ProtoCallback r1;

        r0 := @this: org.waveprotocol.box.server.rpc.SocketIOServerChannel;

        r1 := @parameter0: org.waveprotocol.box.server.rpc.ProtoCallback;

        specialinvoke r0.<org.waveprotocol.box.server.rpc.WebSocketChannel: void <init>(org.waveprotocol.box.server.rpc.ProtoCallback)>(r1);

        return;
    }

    public void onConnect(com.glines.socketio.server.SocketIOOutbound)
    {
        com.glines.socketio.server.SocketIOOutbound r1;
        org.waveprotocol.box.server.rpc.SocketIOServerChannel r0;

        r0 := @this: org.waveprotocol.box.server.rpc.SocketIOServerChannel;

        r1 := @parameter0: com.glines.socketio.server.SocketIOOutbound;

        r0.<org.waveprotocol.box.server.rpc.SocketIOServerChannel: com.glines.socketio.server.SocketIOOutbound outbound> = r1;

        return;
    }

    public void onMessage(int, java.lang.String)
    {
        org.waveprotocol.box.server.rpc.SocketIOServerChannel r5;
        int i0;
        java.lang.StringBuilder $r0, $r2, $r3;
        org.waveprotocol.wave.util.logging.Log $r1;
        java.lang.String $r4, r6;

        r5 := @this: org.waveprotocol.box.server.rpc.SocketIOServerChannel;

        i0 := @parameter0: int;

        r6 := @parameter1: java.lang.String;

        if 0 != i0 goto label1;

        virtualinvoke r5.<org.waveprotocol.box.server.rpc.SocketIOServerChannel: void handleMessageString(java.lang.String)>(r6);

        goto label2;

     label1:
        $r1 = <org.waveprotocol.box.server.rpc.SocketIOServerChannel: org.waveprotocol.wave.util.logging.Log LOG>;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Recieved message of unexpected type: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<org.waveprotocol.wave.util.logging.Log: void warning(java.lang.String)>($r4);

     label2:
        return;
    }

    public void onDisconnect(com.glines.socketio.common.DisconnectReason, java.lang.String)
    {
        java.lang.Throwable $r16;
        org.waveprotocol.box.server.rpc.SocketIOServerChannel r9;
        com.glines.socketio.common.DisconnectReason r4;
        org.waveprotocol.wave.util.logging.Log $r2, $r11;
        java.lang.String r0, $r8, $r15;
        java.lang.StringBuilder $r1, $r3, $r5, $r6, $r7, $r10, $r12, $r13, $r14;

        r9 := @this: org.waveprotocol.box.server.rpc.SocketIOServerChannel;

        r4 := @parameter0: com.glines.socketio.common.DisconnectReason;

        r0 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        $r11 = <org.waveprotocol.box.server.rpc.SocketIOServerChannel: org.waveprotocol.wave.util.logging.Log LOG>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("websocket disconnected[");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<org.waveprotocol.wave.util.logging.Log: void info(java.lang.String)>($r15);

        goto label2;

     label1:
        $r2 = <org.waveprotocol.box.server.rpc.SocketIOServerChannel: org.waveprotocol.wave.util.logging.Log LOG>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("websocket disconnected[");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<org.waveprotocol.wave.util.logging.Log: void info(java.lang.String)>($r8);

     label2:
        entermonitor r9;

     label3:
        r9.<org.waveprotocol.box.server.rpc.SocketIOServerChannel: com.glines.socketio.server.SocketIOOutbound outbound> = null;

        exitmonitor r9;

     label4:
        goto label7;

     label5:
        $r16 := @caughtexception;

        exitmonitor r9;

     label6:
        throw $r16;

     label7:
        return;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    protected void sendMessageString(java.lang.String) throws com.glines.socketio.common.SocketIOException
    {
        com.glines.socketio.server.SocketIOOutbound $r1, $r3;
        java.lang.Throwable $r5;
        org.waveprotocol.wave.util.logging.Log $r4;
        org.waveprotocol.box.server.rpc.SocketIOServerChannel r0;
        java.lang.String r2;

        r0 := @this: org.waveprotocol.box.server.rpc.SocketIOServerChannel;

        r2 := @parameter0: java.lang.String;

        entermonitor r0;

     label1:
        $r1 = r0.<org.waveprotocol.box.server.rpc.SocketIOServerChannel: com.glines.socketio.server.SocketIOOutbound outbound>;

        if $r1 != null goto label2;

        $r4 = <org.waveprotocol.box.server.rpc.SocketIOServerChannel: org.waveprotocol.wave.util.logging.Log LOG>;

        virtualinvoke $r4.<org.waveprotocol.wave.util.logging.Log: void warning(java.lang.String)>("Websocket is not connected");

        goto label3;

     label2:
        $r3 = r0.<org.waveprotocol.box.server.rpc.SocketIOServerChannel: com.glines.socketio.server.SocketIOOutbound outbound>;

        interfaceinvoke $r3.<com.glines.socketio.server.SocketIOOutbound: void sendMessage(java.lang.String)>(r2);

     label3:
        exitmonitor r0;

     label4:
        goto label7;

     label5:
        $r5 := @caughtexception;

        exitmonitor r0;

     label6:
        throw $r5;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.util.logging.Log $r0;

        $r0 = staticinvoke <org.waveprotocol.wave.util.logging.Log: org.waveprotocol.wave.util.logging.Log get(java.lang.Class)>(class "Lorg/waveprotocol/box/server/rpc/SocketIOServerChannel;");

        <org.waveprotocol.box.server.rpc.SocketIOServerChannel: org.waveprotocol.wave.util.logging.Log LOG> = $r0;

        return;
    }
}
