abstract enum class com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$Strength extends java.lang.Enum
{
    public static final enum com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$Strength STRONG;
    public static final enum com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$Strength SOFT;
    public static final enum com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$Strength WEAK;
    private static final com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$Strength[] $VALUES;

    public static com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$Strength[] values()
    {
        java.lang.Object $r1;
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$Strength[] $r0, $r2;

        $r0 = <com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$Strength: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$Strength[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$Strength[]) $r1;

        return $r2;
    }

    public static com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$Strength valueOf(java.lang.String)
    {
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$Strength $r2;
        java.lang.String r0;
        java.lang.Enum $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lcom/mycila/inject/internal/guava/collect/CustomConcurrentHashMap$Strength;", r0);

        $r2 = (com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$Strength) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int)
    {
        int i0;
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$Strength r0;
        java.lang.String r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$Strength;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    abstract com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ValueReference referenceValue(com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$Segment, com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry, java.lang.Object);

    abstract com.mycila.inject.internal.guava.base.Equivalence defaultEquivalence();

    void <init>(java.lang.String, int, com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$1)
    {
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$1 r2;
        int i0;
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$Strength r0;
        java.lang.String r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$Strength;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$1;

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$Strength: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    static void <clinit>()
    {
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$Strength$2 $r1;
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$Strength[] $r3;
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$Strength$1 $r0;
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$Strength $r4, $r5, $r6;
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$Strength$3 $r2;

        $r0 = new com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$Strength$1;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$Strength$1: void <init>(java.lang.String,int)>("STRONG", 0);

        <com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$Strength: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$Strength STRONG> = $r0;

        $r1 = new com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$Strength$2;

        specialinvoke $r1.<com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$Strength$2: void <init>(java.lang.String,int)>("SOFT", 1);

        <com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$Strength: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$Strength SOFT> = $r1;

        $r2 = new com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$Strength$3;

        specialinvoke $r2.<com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$Strength$3: void <init>(java.lang.String,int)>("WEAK", 2);

        <com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$Strength: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$Strength WEAK> = $r2;

        $r3 = newarray (com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$Strength)[3];

        $r4 = <com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$Strength: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$Strength STRONG>;

        $r3[0] = $r4;

        $r5 = <com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$Strength: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$Strength SOFT>;

        $r3[1] = $r5;

        $r6 = <com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$Strength: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$Strength WEAK>;

        $r3[2] = $r6;

        <com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$Strength: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$Strength[] $VALUES> = $r3;

        return;
    }
}
