public class com.jhlabs.image.RippleFilter extends com.jhlabs.image.TransformFilter
{
    static final long serialVersionUID;
    public static final int SINE;
    public static final int SAWTOOTH;
    public static final int TRIANGLE;
    public static final int NOISE;
    public float xAmplitude;
    public float yAmplitude;
    public float xWavelength;
    public float yWavelength;
    private int waveType;

    public void <init>()
    {
        com.jhlabs.image.RippleFilter r0;

        r0 := @this: com.jhlabs.image.RippleFilter;

        specialinvoke r0.<com.jhlabs.image.TransformFilter: void <init>()>();

        r0.<com.jhlabs.image.RippleFilter: float xAmplitude> = 5.0F;

        r0.<com.jhlabs.image.RippleFilter: float yAmplitude> = 0.0F;

        r0.<com.jhlabs.image.RippleFilter: float yWavelength> = 16.0F;

        r0.<com.jhlabs.image.RippleFilter: float xWavelength> = 16.0F;

        return;
    }

    public void setXAmplitude(float)
    {
        float f0;
        com.jhlabs.image.RippleFilter r0;

        r0 := @this: com.jhlabs.image.RippleFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.RippleFilter: float xAmplitude> = f0;

        return;
    }

    public float getXAmplitude()
    {
        float $f0;
        com.jhlabs.image.RippleFilter r0;

        r0 := @this: com.jhlabs.image.RippleFilter;

        $f0 = r0.<com.jhlabs.image.RippleFilter: float xAmplitude>;

        return $f0;
    }

    public void setXWavelength(float)
    {
        float f0;
        com.jhlabs.image.RippleFilter r0;

        r0 := @this: com.jhlabs.image.RippleFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.RippleFilter: float xWavelength> = f0;

        return;
    }

    public float getXWavelength()
    {
        float $f0;
        com.jhlabs.image.RippleFilter r0;

        r0 := @this: com.jhlabs.image.RippleFilter;

        $f0 = r0.<com.jhlabs.image.RippleFilter: float xWavelength>;

        return $f0;
    }

    public void setYAmplitude(float)
    {
        float f0;
        com.jhlabs.image.RippleFilter r0;

        r0 := @this: com.jhlabs.image.RippleFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.RippleFilter: float yAmplitude> = f0;

        return;
    }

    public float getYAmplitude()
    {
        float $f0;
        com.jhlabs.image.RippleFilter r0;

        r0 := @this: com.jhlabs.image.RippleFilter;

        $f0 = r0.<com.jhlabs.image.RippleFilter: float yAmplitude>;

        return $f0;
    }

    public void setYWavelength(float)
    {
        float f0;
        com.jhlabs.image.RippleFilter r0;

        r0 := @this: com.jhlabs.image.RippleFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.RippleFilter: float yWavelength> = f0;

        return;
    }

    public float getYWavelength()
    {
        float $f0;
        com.jhlabs.image.RippleFilter r0;

        r0 := @this: com.jhlabs.image.RippleFilter;

        $f0 = r0.<com.jhlabs.image.RippleFilter: float yWavelength>;

        return $f0;
    }

    public void setWaveType(int)
    {
        int i0;
        com.jhlabs.image.RippleFilter r0;

        r0 := @this: com.jhlabs.image.RippleFilter;

        i0 := @parameter0: int;

        r0.<com.jhlabs.image.RippleFilter: int waveType> = i0;

        return;
    }

    public int getWaveType()
    {
        int $i0;
        com.jhlabs.image.RippleFilter r0;

        r0 := @this: com.jhlabs.image.RippleFilter;

        $i0 = r0.<com.jhlabs.image.RippleFilter: int waveType>;

        return $i0;
    }

    protected void transformSpace(java.awt.Rectangle)
    {
        java.awt.Rectangle r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        com.jhlabs.image.RippleFilter r0;
        float $f0, $f1, $f2, $f3, $f4, $f5;

        r0 := @this: com.jhlabs.image.RippleFilter;

        r1 := @parameter0: java.awt.Rectangle;

        $i0 = r0.<com.jhlabs.image.TransformFilter: int edgeAction>;

        if $i0 != 0 goto label1;

        $i2 = r1.<java.awt.Rectangle: int x>;

        $f0 = r0.<com.jhlabs.image.RippleFilter: float xAmplitude>;

        $i1 = (int) $f0;

        $i3 = $i2 - $i1;

        r1.<java.awt.Rectangle: int x> = $i3;

        $i5 = r1.<java.awt.Rectangle: int width>;

        $f1 = r0.<com.jhlabs.image.RippleFilter: float xAmplitude>;

        $f2 = 2.0F * $f1;

        $i4 = (int) $f2;

        $i6 = $i5 + $i4;

        r1.<java.awt.Rectangle: int width> = $i6;

        $i8 = r1.<java.awt.Rectangle: int y>;

        $f3 = r0.<com.jhlabs.image.RippleFilter: float yAmplitude>;

        $i7 = (int) $f3;

        $i9 = $i8 - $i7;

        r1.<java.awt.Rectangle: int y> = $i9;

        $i11 = r1.<java.awt.Rectangle: int height>;

        $f4 = r0.<com.jhlabs.image.RippleFilter: float yAmplitude>;

        $f5 = 2.0F * $f4;

        $i10 = (int) $f5;

        $i12 = $i11 + $i10;

        r1.<java.awt.Rectangle: int height> = $i12;

     label1:
        return;
    }

    protected void transformInverse(int, int, float[])
    {
        float[] r1;
        int i0, i1, $i2;
        double $d0, $d1, $d2, $d3;
        com.jhlabs.image.RippleFilter r0;
        float $f0, $f1, f2, $f3, $f4, f5, f6, f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15;

        r0 := @this: com.jhlabs.image.RippleFilter;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        r1 := @parameter2: float[];

        $f1 = (float) i0;

        $f0 = r0.<com.jhlabs.image.RippleFilter: float xWavelength>;

        f2 = $f1 / $f0;

        $f4 = (float) i1;

        $f3 = r0.<com.jhlabs.image.RippleFilter: float yWavelength>;

        f5 = $f4 / $f3;

        $i2 = r0.<com.jhlabs.image.RippleFilter: int waveType>;

        tableswitch($i2)
        {
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            default: goto label1;
        };

     label1:
        $d0 = (double) f2;

        $d1 = staticinvoke <java.lang.Math: double sin(double)>($d0);

        f6 = (float) $d1;

        $d2 = (double) f5;

        $d3 = staticinvoke <java.lang.Math: double sin(double)>($d2);

        f7 = (float) $d3;

        goto label5;

     label2:
        f6 = staticinvoke <com.jhlabs.image.ImageMath: float mod(float,float)>(f2, 1.0F);

        f7 = staticinvoke <com.jhlabs.image.ImageMath: float mod(float,float)>(f5, 1.0F);

        goto label5;

     label3:
        f6 = staticinvoke <com.jhlabs.image.ImageMath: float triangle(float)>(f2);

        f7 = staticinvoke <com.jhlabs.image.ImageMath: float triangle(float)>(f5);

        goto label5;

     label4:
        f6 = staticinvoke <com.jhlabs.math.Noise: float noise1(float)>(f2);

        f7 = staticinvoke <com.jhlabs.math.Noise: float noise1(float)>(f5);

     label5:
        $f8 = (float) i1;

        $f9 = r0.<com.jhlabs.image.RippleFilter: float xAmplitude>;

        $f10 = $f9 * f6;

        $f11 = $f8 + $f10;

        r1[0] = $f11;

        $f12 = (float) i0;

        $f13 = r0.<com.jhlabs.image.RippleFilter: float yAmplitude>;

        $f14 = $f13 * f7;

        $f15 = $f12 + $f14;

        r1[1] = $f15;

        return;
    }

    public java.lang.String toString()
    {
        com.jhlabs.image.RippleFilter r0;

        r0 := @this: com.jhlabs.image.RippleFilter;

        return "Distort/Ripple...";
    }

    public static void <clinit>()
    {
        <com.jhlabs.image.RippleFilter: int NOISE> = 3;

        <com.jhlabs.image.RippleFilter: int TRIANGLE> = 2;

        <com.jhlabs.image.RippleFilter: int SAWTOOTH> = 1;

        <com.jhlabs.image.RippleFilter: int SINE> = 0;

        <com.jhlabs.image.RippleFilter: long serialVersionUID> = 5101667633854087384L;

        return;
    }
}
