class org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter extends org.apache.lucene.codecs.TermsConsumer
{
    private final org.apache.lucene.index.FieldInfo fieldInfo;
    private long numTerms;
    long sumTotalTermFreq;
    long sumDocFreq;
    int docCount;
    long indexStartFP;
    private final org.apache.lucene.util.fst.NoOutputs noOutputs;
    private final org.apache.lucene.util.fst.Builder blockBuilder;
    private final java.util.List pending;
    private int lastBlockIndex;
    private int[] subBytes;
    private int[] subTermCounts;
    private int[] subTermCountSums;
    private int[] subSubCounts;
    private final org.apache.lucene.util.IntsRef scratchIntsRef;
    private final org.apache.lucene.store.RAMOutputStream bytesWriter;
    private final org.apache.lucene.store.RAMOutputStream bytesWriter2;
    static final boolean $assertionsDisabled;
    final org.apache.lucene.codecs.BlockTreeTermsWriter this$0;

    void writeBlocks(org.apache.lucene.util.IntsRef, int, int) throws java.io.IOException
    {
        byte[] $r69, $r85;
        byte $b34, $b41;
        java.lang.StringBuilder $r38, $r40, $r41, $r42, $r43, $r44, $r45, $r46, $r47, $r49, $r50, $r52, $r53, $r54, $r99;
        org.apache.lucene.codecs.BlockTreeTermsWriter$PendingEntry r88;
        short s43, s47;
        org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock $r2, $r29, $r32, r90, r91;
        org.apache.lucene.util.IntsRef r1;
        org.apache.lucene.codecs.BlockTreeTermsWriter$PendingTerm r89;
        int[] $r7, $r13, $r14, $r15, $r16, $r17, $r18, $r24, $r25, $r27, $r28, $r31, $r48, $r51, $r56, $r57, $r58, $r59, $r60, $r61, $r62, $r63, $r64, $r65, $r70, $r71, $r72, $r73, $r74, $r75, $r76, $r77, $r78, $r79, $r92, $r93;
        org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i35, $i36, $i37, $i38, $i39, $i40, i42, i44, i45, i46, i48, i49, i50, i51, i52, i53, i54, i55, i56, $i57, $i58, $i59, $i60, $i61, $i62, $i64, $i66, $i68, $i70, $i72;
        java.lang.Object $r66;
        org.apache.lucene.codecs.BlockTreeTermsWriter $r3, $r6, $r20, $r26, $r30, $r35, $r39;
        java.lang.AssertionError $r95, $r96, $r97, $r100, $r101, $r102, $r103;
        java.util.ArrayList $r98;
        java.lang.String $r55;
        org.apache.lucene.store.RAMOutputStream $r4, $r21;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        org.apache.lucene.util.BytesRef $r67, $r68, $r80, $r82, $r83, $r84;
        java.util.List $r5, $r8, $r9, $r10, $r11, $r22, $r94;
        java.util.Iterator $r12;

        r0 := @this: org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter;

        r1 := @parameter0: org.apache.lucene.util.IntsRef;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i0 == 0 goto label01;

        $r6 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: org.apache.lucene.codecs.BlockTreeTermsWriter this$0>;

        $i2 = $r6.<org.apache.lucene.codecs.BlockTreeTermsWriter: int maxItemsInBlock>;

        if i1 > $i2 goto label02;

     label01:
        $i64 = (int) -1;

        $r2 = specialinvoke r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock writeBlock(org.apache.lucene.util.IntsRef,int,int,int,int,int,boolean,int,boolean)>(r1, i0, i0, i1, i1, 0, 0, $i64, 1);

        $r3 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: org.apache.lucene.codecs.BlockTreeTermsWriter this$0>;

        $r4 = $r3.<org.apache.lucene.codecs.BlockTreeTermsWriter: org.apache.lucene.store.RAMOutputStream scratchBytes>;

        virtualinvoke $r2.<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock: void compileIndex(java.util.List,org.apache.lucene.store.RAMOutputStream)>(null, $r4);

        $r5 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: java.util.List pending>;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r2);

        goto label34;

     label02:
        $r7 = r1.<org.apache.lucene.util.IntsRef: int[] ints>;

        $i3 = r1.<org.apache.lucene.util.IntsRef: int offset>;

        $i4 = $i3 + i0;

        i42 = $r7[$i4];

        $r9 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: java.util.List pending>;

        $r8 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: java.util.List pending>;

        $i5 = interfaceinvoke $r8.<java.util.List: int size()>();

        $i6 = $i5 - i1;

        $r10 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: java.util.List pending>;

        $i7 = interfaceinvoke $r10.<java.util.List: int size()>();

        $r11 = interfaceinvoke $r9.<java.util.List: java.util.List subList(int,int)>($i6, $i7);

        s43 = -1;

        i44 = 0;

        i45 = 0;

        i46 = 0;

        $r12 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();

     label03:
        $z0 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label15;

        $r66 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r88 = (org.apache.lucene.codecs.BlockTreeTermsWriter$PendingEntry) $r66;

        $z4 = r88.<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingEntry: boolean isTerm>;

        if $z4 == 0 goto label08;

        r89 = (org.apache.lucene.codecs.BlockTreeTermsWriter$PendingTerm) r88;

        $r82 = r89.<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingTerm: org.apache.lucene.util.BytesRef term>;

        $i38 = $r82.<org.apache.lucene.util.BytesRef: int length>;

        if $i38 != i0 goto label06;

        $z6 = <org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: boolean $assertionsDisabled>;

        if $z6 != 0 goto label04;

        $i66 = (int) -1;

        if s43 == $i66 goto label04;

        $r95 = new java.lang.AssertionError;

        specialinvoke $r95.<java.lang.AssertionError: void <init>()>();

        throw $r95;

     label04:
        $z7 = <org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: boolean $assertionsDisabled>;

        if $z7 != 0 goto label05;

        if i46 == 0 goto label05;

        $r96 = new java.lang.AssertionError;

        specialinvoke $r96.<java.lang.AssertionError: void <init>()>();

        throw $r96;

     label05:
        s47 = -1;

        goto label07;

     label06:
        $r83 = r89.<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingTerm: org.apache.lucene.util.BytesRef term>;

        $r85 = $r83.<org.apache.lucene.util.BytesRef: byte[] bytes>;

        $r84 = r89.<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingTerm: org.apache.lucene.util.BytesRef term>;

        $i39 = $r84.<org.apache.lucene.util.BytesRef: int offset>;

        $i40 = $i39 + i0;

        $b41 = $r85[$i40];

        s47 = $b41 & 255;

     label07:
        goto label10;

     label08:
        r90 = (org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock) r88;

        $z5 = <org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: boolean $assertionsDisabled>;

        if $z5 != 0 goto label09;

        $r80 = r90.<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock: org.apache.lucene.util.BytesRef prefix>;

        $i37 = $r80.<org.apache.lucene.util.BytesRef: int length>;

        if $i37 > i0 goto label09;

        $r97 = new java.lang.AssertionError;

        specialinvoke $r97.<java.lang.AssertionError: void <init>()>();

        throw $r97;

     label09:
        $r67 = r90.<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock: org.apache.lucene.util.BytesRef prefix>;

        $r69 = $r67.<org.apache.lucene.util.BytesRef: byte[] bytes>;

        $r68 = r90.<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock: org.apache.lucene.util.BytesRef prefix>;

        $i32 = $r68.<org.apache.lucene.util.BytesRef: int offset>;

        $i33 = $i32 + i0;

        $b34 = $r69[$i33];

        s47 = $b34 & 255;

     label10:
        if s47 == s43 goto label12;

        $i35 = i44 + i45;

        if $i35 == 0 goto label12;

        $r70 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: int[] subBytes>;

        $i36 = lengthof $r70;

        if $i36 != i46 goto label11;

        $r74 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: int[] subBytes>;

        $r75 = staticinvoke <org.apache.lucene.util.ArrayUtil: int[] grow(int[])>($r74);

        r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: int[] subBytes> = $r75;

        $r76 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: int[] subTermCounts>;

        $r77 = staticinvoke <org.apache.lucene.util.ArrayUtil: int[] grow(int[])>($r76);

        r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: int[] subTermCounts> = $r77;

        $r78 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: int[] subSubCounts>;

        $r79 = staticinvoke <org.apache.lucene.util.ArrayUtil: int[] grow(int[])>($r78);

        r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: int[] subSubCounts> = $r79;

     label11:
        $r71 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: int[] subBytes>;

        $r71[i46] = s43;

        s43 = s47;

        $r72 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: int[] subTermCounts>;

        $r72[i46] = i44;

        $r73 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: int[] subSubCounts>;

        $r73[i46] = i45;

        i45 = 0;

        i44 = 0;

        i46 = i46 + 1;

     label12:
        $z8 = r88.<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingEntry: boolean isTerm>;

        if $z8 == 0 goto label13;

        i44 = i44 + 1;

        goto label14;

     label13:
        i45 = i45 + 1;

     label14:
        goto label03;

     label15:
        $r13 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: int[] subBytes>;

        $i8 = lengthof $r13;

        if $i8 != i46 goto label16;

        $r60 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: int[] subBytes>;

        $r61 = staticinvoke <org.apache.lucene.util.ArrayUtil: int[] grow(int[])>($r60);

        r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: int[] subBytes> = $r61;

        $r62 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: int[] subTermCounts>;

        $r63 = staticinvoke <org.apache.lucene.util.ArrayUtil: int[] grow(int[])>($r62);

        r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: int[] subTermCounts> = $r63;

        $r64 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: int[] subSubCounts>;

        $r65 = staticinvoke <org.apache.lucene.util.ArrayUtil: int[] grow(int[])>($r64);

        r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: int[] subSubCounts> = $r65;

     label16:
        $r14 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: int[] subBytes>;

        $r14[i46] = s43;

        $r15 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: int[] subTermCounts>;

        $r15[i46] = i44;

        $r16 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: int[] subSubCounts>;

        $r16[i46] = i45;

        i48 = i46 + 1;

        $r17 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: int[] subTermCountSums>;

        $i9 = lengthof $r17;

        if $i9 >= i48 goto label17;

        $r58 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: int[] subTermCountSums>;

        $r59 = staticinvoke <org.apache.lucene.util.ArrayUtil: int[] grow(int[],int)>($r58, i48);

        r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: int[] subTermCountSums> = $r59;

     label17:
        i49 = 0;

        i50 = i48 - 1;

     label18:
        if i50 < 0 goto label19;

        $r56 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: int[] subTermCounts>;

        $i31 = $r56[i50];

        i49 = i49 + $i31;

        $r57 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: int[] subTermCountSums>;

        $r57[i50] = i49;

        $i68 = (int) -1;

        i50 = i50 + $i68;

        goto label18;

     label19:
        i51 = 0;

        $r18 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: int[] subBytes>;

        i52 = $r18[0];

        i53 = i1;

        i54 = 0;

        $r98 = new java.util.ArrayList;

        specialinvoke $r98.<java.util.ArrayList: void <init>()>();

        r91 = null;

        i55 = 0;

     label20:
        if i55 >= i48 goto label32;

        $r24 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: int[] subTermCounts>;

        $i11 = $r24[i55];

        $r25 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: int[] subSubCounts>;

        $i10 = $r25[i55];

        $i12 = $i11 + $i10;

        i51 = i51 + $i12;

        i54 = i54 + 1;

        $r26 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: org.apache.lucene.codecs.BlockTreeTermsWriter this$0>;

        $i13 = $r26.<org.apache.lucene.codecs.BlockTreeTermsWriter: int minItemsInBlock>;

        if i51 < $i13 goto label31;

        $i70 = (int) -1;

        if i52 != $i70 goto label21;

        i56 = i0;

        goto label22;

     label21:
        i56 = 1 + i0;

        $r27 = r1.<org.apache.lucene.util.IntsRef: int[] ints>;

        $i14 = r1.<org.apache.lucene.util.IntsRef: int offset>;

        $i15 = $i14 + i0;

        $r27[$i15] = i52;

     label22:
        $i27 = i56;

        $i28 = i53;

        $i29 = i51;

        $r28 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: int[] subTermCountSums>;

        $i16 = 1 + i55;

        $i17 = $r28[$i16];

        $i30 = i52;

        if i53 != i51 goto label23;

        $z9 = 1;

        goto label24;

     label23:
        $z9 = 0;

     label24:
        $r29 = specialinvoke r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock writeBlock(org.apache.lucene.util.IntsRef,int,int,int,int,int,boolean,int,boolean)>(r1, i0, $i27, $i28, $i29, $i17, 1, $i30, $z9);

        if r91 != null goto label25;

        r91 = $r29;

        goto label26;

     label25:
        interfaceinvoke $r98.<java.util.List: boolean add(java.lang.Object)>($r29);

     label26:
        $i26 = i53 - i51;

        i53 = $i26;

        i51 = 0;

        $z1 = <org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: boolean $assertionsDisabled>;

        if $z1 != 0 goto label27;

        $r35 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: org.apache.lucene.codecs.BlockTreeTermsWriter this$0>;

        $i22 = $r35.<org.apache.lucene.codecs.BlockTreeTermsWriter: int minItemsInBlock>;

        if $i22 == 1 goto label27;

        if i54 > 1 goto label27;

        $r100 = new java.lang.AssertionError;

        $r99 = new java.lang.StringBuilder;

        specialinvoke $r99.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r99.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("minItemsInBlock=");

        $r39 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: org.apache.lucene.codecs.BlockTreeTermsWriter this$0>;

        $i23 = $r39.<org.apache.lucene.codecs.BlockTreeTermsWriter: int minItemsInBlock>;

        $r40 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i23);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" subCount=");

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i54);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" sub=");

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i55);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" of ");

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i48);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" subTermCount=");

        $r48 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: int[] subTermCountSums>;

        $i24 = $r48[i55];

        $r49 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i24);

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" subSubCount=");

        $r51 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: int[] subSubCounts>;

        $i25 = $r51[i55];

        $r52 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i25);

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" depth=");

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r100.<java.lang.AssertionError: void <init>(java.lang.Object)>($r55);

        throw $r100;

     label27:
        i54 = 0;

        $r92 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: int[] subBytes>;

        $i57 = i55 + 1;

        $i58 = $r92[$i57];

        i52 = $i58;

        if $i26 != 0 goto label28;

        goto label32;

     label28:
        $r30 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: org.apache.lucene.codecs.BlockTreeTermsWriter this$0>;

        $i18 = $r30.<org.apache.lucene.codecs.BlockTreeTermsWriter: int maxItemsInBlock>;

        if $i26 > $i18 goto label31;

        $z2 = <org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: boolean $assertionsDisabled>;

        if $z2 != 0 goto label29;

        $i72 = (int) -1;

        if $i58 != $i72 goto label29;

        $r101 = new java.lang.AssertionError;

        specialinvoke $r101.<java.lang.AssertionError: void <init>()>();

        throw $r101;

     label29:
        $z3 = <org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: boolean $assertionsDisabled>;

        if $z3 != 0 goto label30;

        if r91 != null goto label30;

        $r102 = new java.lang.AssertionError;

        specialinvoke $r102.<java.lang.AssertionError: void <init>()>();

        throw $r102;

     label30:
        $r31 = r1.<org.apache.lucene.util.IntsRef: int[] ints>;

        $i19 = r1.<org.apache.lucene.util.IntsRef: int offset>;

        $i20 = $i19 + i0;

        $r31[$i20] = $i58;

        $i21 = i0 + 1;

        $r32 = specialinvoke r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock writeBlock(org.apache.lucene.util.IntsRef,int,int,int,int,int,boolean,int,boolean)>(r1, i0, $i21, $i26, $i26, 0, 1, $i58, 1);

        interfaceinvoke $r98.<java.util.List: boolean add(java.lang.Object)>($r32);

        goto label32;

     label31:
        i55 = i55 + 1;

        goto label20;

     label32:
        $r93 = r1.<org.apache.lucene.util.IntsRef: int[] ints>;

        $i59 = r1.<org.apache.lucene.util.IntsRef: int offset>;

        $i60 = $i59 + i0;

        $r93[$i60] = i42;

        $z10 = <org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: boolean $assertionsDisabled>;

        if $z10 != 0 goto label33;

        if r91 != null goto label33;

        $r103 = new java.lang.AssertionError;

        specialinvoke $r103.<java.lang.AssertionError: void <init>()>();

        throw $r103;

     label33:
        $r20 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: org.apache.lucene.codecs.BlockTreeTermsWriter this$0>;

        $r21 = $r20.<org.apache.lucene.codecs.BlockTreeTermsWriter: org.apache.lucene.store.RAMOutputStream scratchBytes>;

        virtualinvoke r91.<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock: void compileIndex(java.util.List,org.apache.lucene.store.RAMOutputStream)>($r98, $r21);

        $r22 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: java.util.List pending>;

        interfaceinvoke $r22.<java.util.List: boolean add(java.lang.Object)>(r91);

     label34:
        $r94 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: java.util.List pending>;

        $i61 = interfaceinvoke $r94.<java.util.List: int size()>();

        $i62 = $i61 - 1;

        r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: int lastBlockIndex> = $i62;

        return;
    }

    private java.lang.String toString(org.apache.lucene.util.BytesRef)
    {
        java.lang.Throwable $r7;
        org.apache.lucene.util.BytesRef r1;
        org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter r9;
        java.lang.StringBuilder $r0, $r3, $r4, $r5;
        java.lang.String $r2, $r6, $r8;

        r9 := @this: org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter;

        r1 := @parameter0: org.apache.lucene.util.BytesRef;

     label1:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r1.<org.apache.lucene.util.BytesRef: java.lang.String utf8ToString()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

        $r8 = virtualinvoke r1.<org.apache.lucene.util.BytesRef: java.lang.String toString()>();

        return $r8;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock writeBlock(org.apache.lucene.util.IntsRef, int, int, int, int, int, boolean, int, boolean) throws java.io.IOException
    {
        byte[] $r32, $r41, $r59, $r84;
        byte $b29, $b40, $b50, $b55;
        java.lang.StringBuilder $r74, $r75, $r77, $r87, $r89, $r90, $r91, $r92, $r93, $r105, $r109;
        long $l4, $l11, $l26, $l27, $l28, $l34, $l35, $l36, $l38, $l39, $l44, $l45, $l46, $l48, $l49, $l51, $l62, $l63;
        org.apache.lucene.codecs.BlockTreeTermsWriter$PendingEntry r96, r98, r99;
        org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock r101, $r116;
        org.apache.lucene.util.IntsRef r82;
        org.apache.lucene.codecs.BlockTreeTermsWriter$PendingTerm $r79, r100;
        int[] $r83;
        org.apache.lucene.codecs.PostingsWriterBase $r25;
        org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter r0;
        int $i0, i1, i2, $i3, i5, $i6, $i7, $i8, $i9, $i10, $i12, i13, $i14, $i15, i16, $i17, $i18, $i19, $i20, $i21, i22, $i23, $i24, $i25, $i30, $i31, $i32, $i33, $i37, $i41, $i42, $i43, $i47, $i52, $i53, $i54, $i56, $i57, i58, i59, i60, i61, $i64, $i65, $i66;
        java.lang.Object $r28, $r55, $r81;
        org.apache.lucene.codecs.BlockTreeTermsWriter $r4, $r7, $r13, $r17, $r20, $r24, $r102;
        java.lang.AssertionError $r104, $r106, $r108, $r110, $r112, $r113, $r114, $r115;
        org.apache.lucene.codecs.TermStats $r43, $r48, $r49, $r51, $r52, $r61, $r66, $r67, $r69, $r70, $r73, $r76;
        java.util.ArrayList r97, $r111;
        java.lang.String $r78, $r94;
        org.apache.lucene.store.RAMOutputStream $r14, $r16, $r19, $r21, $r23, $r30, $r33, $r34, $r39, $r42, $r44, $r50, $r57, $r60, $r62, $r68, $r103;
        org.apache.lucene.util.fst.FST $r35;
        org.apache.lucene.index.FieldInfo $r45, $r63;
        boolean $z0, $z1, z2, z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, z17, z18, $z19, $z20;
        org.apache.lucene.index.FieldInfo$IndexOptions $r46, $r47, $r64, $r65;
        org.apache.lucene.util.BytesRef $r29, $r31, $r38, $r40, $r56, $r58, $r107;
        java.util.List $r1, $r2, $r3, $r88;
        org.apache.lucene.store.IndexOutput $r5, $r8, $r12, $r15, $r18, $r22;
        java.util.Iterator $r9, $r11, $r54;

        r0 := @this: org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter;

        r82 := @parameter0: org.apache.lucene.util.IntsRef;

        i22 := @parameter1: int;

        i5 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        i13 := @parameter5: int;

        z3 := @parameter6: boolean;

        i16 := @parameter7: int;

        z2 := @parameter8: boolean;

        $z0 = <org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        if i2 > 0 goto label01;

        $r104 = new java.lang.AssertionError;

        specialinvoke $r104.<java.lang.AssertionError: void <init>()>();

        throw $r104;

     label01:
        $r1 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: java.util.List pending>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i57 = $i0 - i1;

        $z1 = <org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: boolean $assertionsDisabled>;

        if $z1 != 0 goto label02;

        if $i57 >= 0 goto label02;

        $r106 = new java.lang.AssertionError;

        $r105 = new java.lang.StringBuilder;

        specialinvoke $r105.<java.lang.StringBuilder: void <init>()>();

        $r87 = virtualinvoke $r105.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("pending.size()=");

        $r88 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: java.util.List pending>;

        $i56 = interfaceinvoke $r88.<java.util.List: int size()>();

        $r89 = virtualinvoke $r87.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i56);

        $r90 = virtualinvoke $r89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" startBackwards=");

        $r91 = virtualinvoke $r90.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r92 = virtualinvoke $r91.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" length=");

        $r93 = virtualinvoke $r92.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r94 = virtualinvoke $r93.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r106.<java.lang.AssertionError: void <init>(java.lang.Object)>($r94);

        throw $r106;

     label02:
        $r2 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: java.util.List pending>;

        $i3 = $i57 + i2;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.List subList(int,int)>($i57, $i3);

        $r4 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: org.apache.lucene.codecs.BlockTreeTermsWriter this$0>;

        $r5 = staticinvoke <org.apache.lucene.codecs.BlockTreeTermsWriter: org.apache.lucene.store.IndexOutput access$100(org.apache.lucene.codecs.BlockTreeTermsWriter)>($r4);

        $l4 = virtualinvoke $r5.<org.apache.lucene.store.IndexOutput: long getFilePointer()>();

        $r107 = new org.apache.lucene.util.BytesRef;

        specialinvoke $r107.<org.apache.lucene.util.BytesRef: void <init>(int)>(i5);

        i58 = 0;

     label03:
        if i58 >= i5 goto label04;

        $r84 = $r107.<org.apache.lucene.util.BytesRef: byte[] bytes>;

        $r83 = r82.<org.apache.lucene.util.IntsRef: int[] ints>;

        $i54 = $r83[i58];

        $b55 = (byte) $i54;

        $r84[i58] = $b55;

        i58 = i58 + 1;

        goto label03;

     label04:
        $r107.<org.apache.lucene.util.BytesRef: int length> = i5;

        $r7 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: org.apache.lucene.codecs.BlockTreeTermsWriter this$0>;

        $r8 = staticinvoke <org.apache.lucene.codecs.BlockTreeTermsWriter: org.apache.lucene.store.IndexOutput access$100(org.apache.lucene.codecs.BlockTreeTermsWriter)>($r7);

        $i6 = i2 << 1;

        if z2 == 0 goto label05;

        $z16 = 1;

        goto label06;

     label05:
        $z16 = 0;

     label06:
        $i7 = $i6 | $z16;

        virtualinvoke $r8.<org.apache.lucene.store.IndexOutput: void writeVInt(int)>($i7);

        $i8 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: int lastBlockIndex>;

        if $i8 >= $i57 goto label07;

        z17 = 1;

        goto label12;

     label07:
        if z3 != 0 goto label08;

        z17 = 0;

        goto label12;

     label08:
        z18 = 1;

        $r9 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z4 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label11;

        $r81 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r96 = (org.apache.lucene.codecs.BlockTreeTermsWriter$PendingEntry) $r81;

        $z15 = r96.<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingEntry: boolean isTerm>;

        if $z15 != 0 goto label10;

        z18 = 0;

        goto label11;

     label10:
        goto label09;

     label11:
        z17 = z18;

     label12:
        if z17 == 0 goto label18;

        r97 = null;

        $r54 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label13:
        $z11 = interfaceinvoke $r54.<java.util.Iterator: boolean hasNext()>();

        if $z11 == 0 goto label17;

        $r55 = interfaceinvoke $r54.<java.util.Iterator: java.lang.Object next()>();

        r98 = (org.apache.lucene.codecs.BlockTreeTermsWriter$PendingEntry) $r55;

        $z12 = <org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: boolean $assertionsDisabled>;

        if $z12 != 0 goto label14;

        $z14 = r98.<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingEntry: boolean isTerm>;

        if $z14 != 0 goto label14;

        $r108 = new java.lang.AssertionError;

        specialinvoke $r108.<java.lang.AssertionError: void <init>()>();

        throw $r108;

     label14:
        $r79 = (org.apache.lucene.codecs.BlockTreeTermsWriter$PendingTerm) r98;

        $r56 = $r79.<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingTerm: org.apache.lucene.util.BytesRef term>;

        $i41 = $r56.<org.apache.lucene.util.BytesRef: int length>;

        $i53 = $i41 - i22;

        $r57 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: org.apache.lucene.store.RAMOutputStream bytesWriter>;

        virtualinvoke $r57.<org.apache.lucene.store.RAMOutputStream: void writeVInt(int)>($i53);

        $r60 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: org.apache.lucene.store.RAMOutputStream bytesWriter>;

        $r58 = $r79.<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingTerm: org.apache.lucene.util.BytesRef term>;

        $r59 = $r58.<org.apache.lucene.util.BytesRef: byte[] bytes>;

        virtualinvoke $r60.<org.apache.lucene.store.RAMOutputStream: void writeBytes(byte[],int,int)>($r59, i22, $i53);

        $r62 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: org.apache.lucene.store.RAMOutputStream bytesWriter2>;

        $r61 = $r79.<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingTerm: org.apache.lucene.codecs.TermStats stats>;

        $i42 = $r61.<org.apache.lucene.codecs.TermStats: int docFreq>;

        virtualinvoke $r62.<org.apache.lucene.store.RAMOutputStream: void writeVInt(int)>($i42);

        $r63 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: org.apache.lucene.index.FieldInfo fieldInfo>;

        $r64 = virtualinvoke $r63.<org.apache.lucene.index.FieldInfo: org.apache.lucene.index.FieldInfo$IndexOptions getIndexOptions()>();

        $r65 = <org.apache.lucene.index.FieldInfo$IndexOptions: org.apache.lucene.index.FieldInfo$IndexOptions DOCS_ONLY>;

        if $r64 == $r65 goto label16;

        $z13 = <org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: boolean $assertionsDisabled>;

        if $z13 != 0 goto label15;

        $r69 = $r79.<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingTerm: org.apache.lucene.codecs.TermStats stats>;

        $l49 = $r69.<org.apache.lucene.codecs.TermStats: long totalTermFreq>;

        $r70 = $r79.<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingTerm: org.apache.lucene.codecs.TermStats stats>;

        $i47 = $r70.<org.apache.lucene.codecs.TermStats: int docFreq>;

        $l48 = (long) $i47;

        $b50 = $l49 cmp $l48;

        $i64 = (int) $b50;

        if $i64 >= 0 goto label15;

        $r110 = new java.lang.AssertionError;

        $r109 = new java.lang.StringBuilder;

        specialinvoke $r109.<java.lang.StringBuilder: void <init>()>();

        $r73 = $r79.<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingTerm: org.apache.lucene.codecs.TermStats stats>;

        $l51 = $r73.<org.apache.lucene.codecs.TermStats: long totalTermFreq>;

        $r74 = virtualinvoke $r109.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l51);

        $r75 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" vs ");

        $r76 = $r79.<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingTerm: org.apache.lucene.codecs.TermStats stats>;

        $i52 = $r76.<org.apache.lucene.codecs.TermStats: int docFreq>;

        $r77 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i52);

        $r78 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r110.<java.lang.AssertionError: void <init>(java.lang.Object)>($r78);

        throw $r110;

     label15:
        $r68 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: org.apache.lucene.store.RAMOutputStream bytesWriter2>;

        $r66 = $r79.<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingTerm: org.apache.lucene.codecs.TermStats stats>;

        $l45 = $r66.<org.apache.lucene.codecs.TermStats: long totalTermFreq>;

        $r67 = $r79.<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingTerm: org.apache.lucene.codecs.TermStats stats>;

        $i43 = $r67.<org.apache.lucene.codecs.TermStats: int docFreq>;

        $l44 = (long) $i43;

        $l46 = $l45 - $l44;

        virtualinvoke $r68.<org.apache.lucene.store.RAMOutputStream: void writeVLong(long)>($l46);

     label16:
        goto label13;

     label17:
        i59 = i2;

        goto label27;

     label18:
        $r111 = new java.util.ArrayList;

        specialinvoke $r111.<java.util.ArrayList: void <init>()>();

        r97 = $r111;

        i59 = 0;

        $r11 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label19:
        $z5 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label26;

        $r28 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r99 = (org.apache.lucene.codecs.BlockTreeTermsWriter$PendingEntry) $r28;

        $z7 = r99.<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingEntry: boolean isTerm>;

        if $z7 == 0 goto label22;

        r100 = (org.apache.lucene.codecs.BlockTreeTermsWriter$PendingTerm) r99;

        $r38 = r100.<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingTerm: org.apache.lucene.util.BytesRef term>;

        $i30 = $r38.<org.apache.lucene.util.BytesRef: int length>;

        i60 = $i30 - i22;

        $r39 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: org.apache.lucene.store.RAMOutputStream bytesWriter>;

        $i31 = i60 << 1;

        virtualinvoke $r39.<org.apache.lucene.store.RAMOutputStream: void writeVInt(int)>($i31);

        $r42 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: org.apache.lucene.store.RAMOutputStream bytesWriter>;

        $r40 = r100.<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingTerm: org.apache.lucene.util.BytesRef term>;

        $r41 = $r40.<org.apache.lucene.util.BytesRef: byte[] bytes>;

        virtualinvoke $r42.<org.apache.lucene.store.RAMOutputStream: void writeBytes(byte[],int,int)>($r41, i22, i60);

        $r44 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: org.apache.lucene.store.RAMOutputStream bytesWriter2>;

        $r43 = r100.<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingTerm: org.apache.lucene.codecs.TermStats stats>;

        $i32 = $r43.<org.apache.lucene.codecs.TermStats: int docFreq>;

        virtualinvoke $r44.<org.apache.lucene.store.RAMOutputStream: void writeVInt(int)>($i32);

        $r45 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: org.apache.lucene.index.FieldInfo fieldInfo>;

        $r46 = virtualinvoke $r45.<org.apache.lucene.index.FieldInfo: org.apache.lucene.index.FieldInfo$IndexOptions getIndexOptions()>();

        $r47 = <org.apache.lucene.index.FieldInfo$IndexOptions: org.apache.lucene.index.FieldInfo$IndexOptions DOCS_ONLY>;

        if $r46 == $r47 goto label21;

        $z10 = <org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: boolean $assertionsDisabled>;

        if $z10 != 0 goto label20;

        $r51 = r100.<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingTerm: org.apache.lucene.codecs.TermStats stats>;

        $l39 = $r51.<org.apache.lucene.codecs.TermStats: long totalTermFreq>;

        $r52 = r100.<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingTerm: org.apache.lucene.codecs.TermStats stats>;

        $i37 = $r52.<org.apache.lucene.codecs.TermStats: int docFreq>;

        $l38 = (long) $i37;

        $b40 = $l39 cmp $l38;

        $i65 = (int) $b40;

        if $i65 >= 0 goto label20;

        $r112 = new java.lang.AssertionError;

        specialinvoke $r112.<java.lang.AssertionError: void <init>()>();

        throw $r112;

     label20:
        $r50 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: org.apache.lucene.store.RAMOutputStream bytesWriter2>;

        $r48 = r100.<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingTerm: org.apache.lucene.codecs.TermStats stats>;

        $l35 = $r48.<org.apache.lucene.codecs.TermStats: long totalTermFreq>;

        $r49 = r100.<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingTerm: org.apache.lucene.codecs.TermStats stats>;

        $i33 = $r49.<org.apache.lucene.codecs.TermStats: int docFreq>;

        $l34 = (long) $i33;

        $l36 = $l35 - $l34;

        virtualinvoke $r50.<org.apache.lucene.store.RAMOutputStream: void writeVLong(long)>($l36);

     label21:
        i59 = i59 + 1;

        goto label25;

     label22:
        r101 = (org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock) r99;

        $r29 = r101.<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock: org.apache.lucene.util.BytesRef prefix>;

        $i23 = $r29.<org.apache.lucene.util.BytesRef: int length>;

        i61 = $i23 - i22;

        $z8 = <org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: boolean $assertionsDisabled>;

        if $z8 != 0 goto label23;

        if i61 > 0 goto label23;

        $r113 = new java.lang.AssertionError;

        specialinvoke $r113.<java.lang.AssertionError: void <init>()>();

        throw $r113;

     label23:
        $r30 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: org.apache.lucene.store.RAMOutputStream bytesWriter>;

        $i24 = i61 << 1;

        $i25 = $i24 | 1;

        virtualinvoke $r30.<org.apache.lucene.store.RAMOutputStream: void writeVInt(int)>($i25);

        $r33 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: org.apache.lucene.store.RAMOutputStream bytesWriter>;

        $r31 = r101.<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock: org.apache.lucene.util.BytesRef prefix>;

        $r32 = $r31.<org.apache.lucene.util.BytesRef: byte[] bytes>;

        virtualinvoke $r33.<org.apache.lucene.store.RAMOutputStream: void writeBytes(byte[],int,int)>($r32, i22, i61);

        $z9 = <org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: boolean $assertionsDisabled>;

        if $z9 != 0 goto label24;

        $l28 = r101.<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock: long fp>;

        $b29 = $l28 cmp $l4;

        $i66 = (int) $b29;

        if $i66 < 0 goto label24;

        $r114 = new java.lang.AssertionError;

        specialinvoke $r114.<java.lang.AssertionError: void <init>()>();

        throw $r114;

     label24:
        $r34 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: org.apache.lucene.store.RAMOutputStream bytesWriter>;

        $l26 = r101.<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock: long fp>;

        $l27 = $l4 - $l26;

        virtualinvoke $r34.<org.apache.lucene.store.RAMOutputStream: void writeVLong(long)>($l27);

        $r35 = r101.<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock: org.apache.lucene.util.fst.FST index>;

        interfaceinvoke $r111.<java.util.List: boolean add(java.lang.Object)>($r35);

     label25:
        goto label19;

     label26:
        $z6 = <org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: boolean $assertionsDisabled>;

        if $z6 != 0 goto label27;

        $i21 = interfaceinvoke $r111.<java.util.List: int size()>();

        if $i21 != 0 goto label27;

        $r115 = new java.lang.AssertionError;

        specialinvoke $r115.<java.lang.AssertionError: void <init>()>();

        throw $r115;

     label27:
        $r102 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: org.apache.lucene.codecs.BlockTreeTermsWriter this$0>;

        $r12 = staticinvoke <org.apache.lucene.codecs.BlockTreeTermsWriter: org.apache.lucene.store.IndexOutput access$100(org.apache.lucene.codecs.BlockTreeTermsWriter)>($r102);

        $r103 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: org.apache.lucene.store.RAMOutputStream bytesWriter>;

        $l62 = virtualinvoke $r103.<org.apache.lucene.store.RAMOutputStream: long getFilePointer()>();

        $l63 = $l62 << 1;

        $i9 = (int) $l63;

        if z17 == 0 goto label28;

        $z19 = 1;

        goto label29;

     label28:
        $z19 = 0;

     label29:
        $i10 = $i9 | $z19;

        virtualinvoke $r12.<org.apache.lucene.store.IndexOutput: void writeVInt(int)>($i10);

        $r14 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: org.apache.lucene.store.RAMOutputStream bytesWriter>;

        $r13 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: org.apache.lucene.codecs.BlockTreeTermsWriter this$0>;

        $r15 = staticinvoke <org.apache.lucene.codecs.BlockTreeTermsWriter: org.apache.lucene.store.IndexOutput access$100(org.apache.lucene.codecs.BlockTreeTermsWriter)>($r13);

        virtualinvoke $r14.<org.apache.lucene.store.RAMOutputStream: void writeTo(org.apache.lucene.store.IndexOutput)>($r15);

        $r16 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: org.apache.lucene.store.RAMOutputStream bytesWriter>;

        virtualinvoke $r16.<org.apache.lucene.store.RAMOutputStream: void reset()>();

        $r17 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: org.apache.lucene.codecs.BlockTreeTermsWriter this$0>;

        $r18 = staticinvoke <org.apache.lucene.codecs.BlockTreeTermsWriter: org.apache.lucene.store.IndexOutput access$100(org.apache.lucene.codecs.BlockTreeTermsWriter)>($r17);

        $r19 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: org.apache.lucene.store.RAMOutputStream bytesWriter2>;

        $l11 = virtualinvoke $r19.<org.apache.lucene.store.RAMOutputStream: long getFilePointer()>();

        $i12 = (int) $l11;

        virtualinvoke $r18.<org.apache.lucene.store.IndexOutput: void writeVInt(int)>($i12);

        $r21 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: org.apache.lucene.store.RAMOutputStream bytesWriter2>;

        $r20 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: org.apache.lucene.codecs.BlockTreeTermsWriter this$0>;

        $r22 = staticinvoke <org.apache.lucene.codecs.BlockTreeTermsWriter: org.apache.lucene.store.IndexOutput access$100(org.apache.lucene.codecs.BlockTreeTermsWriter)>($r20);

        virtualinvoke $r21.<org.apache.lucene.store.RAMOutputStream: void writeTo(org.apache.lucene.store.IndexOutput)>($r22);

        $r23 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: org.apache.lucene.store.RAMOutputStream bytesWriter2>;

        virtualinvoke $r23.<org.apache.lucene.store.RAMOutputStream: void reset()>();

        $r24 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: org.apache.lucene.codecs.BlockTreeTermsWriter this$0>;

        $r25 = $r24.<org.apache.lucene.codecs.BlockTreeTermsWriter: org.apache.lucene.codecs.PostingsWriterBase postingsWriter>;

        $i14 = i13 + i59;

        virtualinvoke $r25.<org.apache.lucene.codecs.PostingsWriterBase: void flushTermsBlock(int,int)>($i14, i59);

        interfaceinvoke $r3.<java.util.List: void clear()>();

        $i15 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: int lastBlockIndex>;

        if $i15 < $i57 goto label31;

        $i18 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: int lastBlockIndex>;

        $i17 = $i57 + i2;

        if $i18 >= $i17 goto label30;

        r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: int lastBlockIndex> = $i57;

        goto label31;

     label30:
        $i19 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: int lastBlockIndex>;

        $i20 = $i19 - i2;

        r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: int lastBlockIndex> = $i20;

     label31:
        $r116 = new org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock;

        if i59 == 0 goto label32;

        $z20 = 1;

        goto label33;

     label32:
        $z20 = 0;

     label33:
        specialinvoke $r116.<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock: void <init>(org.apache.lucene.util.BytesRef,long,boolean,boolean,int,java.util.List)>($r107, $l4, $z20, z3, i16, r97);

        return $r116;
    }

    void <init>(org.apache.lucene.codecs.BlockTreeTermsWriter, org.apache.lucene.index.FieldInfo)
    {
        org.apache.lucene.util.fst.NoOutputs $r11, $r15;
        java.util.ArrayList $r17;
        org.apache.lucene.util.IntsRef $r18;
        org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter r0;
        int[] $r3, $r4, $r5, $r6;
        org.apache.lucene.util.fst.Builder $r22;
        org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter$FindBlocks $r21;
        int $i1;
        org.apache.lucene.codecs.PostingsWriterBase $r16;
        org.apache.lucene.util.fst.FST$INPUT_TYPE $r14;
        org.apache.lucene.codecs.BlockTreeTermsWriter r1;
        org.apache.lucene.store.RAMOutputStream $r19, $r20;
        org.apache.lucene.index.FieldInfo r10;

        r0 := @this: org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter;

        r1 := @parameter0: org.apache.lucene.codecs.BlockTreeTermsWriter;

        r10 := @parameter1: org.apache.lucene.index.FieldInfo;

        r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: org.apache.lucene.codecs.BlockTreeTermsWriter this$0> = r1;

        specialinvoke r0.<org.apache.lucene.codecs.TermsConsumer: void <init>()>();

        $r17 = new java.util.ArrayList;

        specialinvoke $r17.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: java.util.List pending> = $r17;

        $i1 = (int) -1;

        r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: int lastBlockIndex> = $i1;

        $r3 = newarray (int)[10];

        r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: int[] subBytes> = $r3;

        $r4 = newarray (int)[10];

        r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: int[] subTermCounts> = $r4;

        $r5 = newarray (int)[10];

        r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: int[] subTermCountSums> = $r5;

        $r6 = newarray (int)[10];

        r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: int[] subSubCounts> = $r6;

        $r18 = new org.apache.lucene.util.IntsRef;

        specialinvoke $r18.<org.apache.lucene.util.IntsRef: void <init>()>();

        r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: org.apache.lucene.util.IntsRef scratchIntsRef> = $r18;

        $r19 = new org.apache.lucene.store.RAMOutputStream;

        specialinvoke $r19.<org.apache.lucene.store.RAMOutputStream: void <init>()>();

        r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: org.apache.lucene.store.RAMOutputStream bytesWriter> = $r19;

        $r20 = new org.apache.lucene.store.RAMOutputStream;

        specialinvoke $r20.<org.apache.lucene.store.RAMOutputStream: void <init>()>();

        r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: org.apache.lucene.store.RAMOutputStream bytesWriter2> = $r20;

        r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: org.apache.lucene.index.FieldInfo fieldInfo> = r10;

        $r11 = staticinvoke <org.apache.lucene.util.fst.NoOutputs: org.apache.lucene.util.fst.NoOutputs getSingleton()>();

        r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: org.apache.lucene.util.fst.NoOutputs noOutputs> = $r11;

        $r22 = new org.apache.lucene.util.fst.Builder;

        $r14 = <org.apache.lucene.util.fst.FST$INPUT_TYPE: org.apache.lucene.util.fst.FST$INPUT_TYPE BYTE1>;

        $r15 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: org.apache.lucene.util.fst.NoOutputs noOutputs>;

        $r21 = new org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter$FindBlocks;

        specialinvoke $r21.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter$FindBlocks: void <init>(org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter,org.apache.lucene.codecs.BlockTreeTermsWriter$1)>(r0, null);

        specialinvoke $r22.<org.apache.lucene.util.fst.Builder: void <init>(org.apache.lucene.util.fst.FST$INPUT_TYPE,int,int,boolean,boolean,int,org.apache.lucene.util.fst.Outputs,org.apache.lucene.util.fst.Builder$FreezeTail,boolean,float,boolean,int)>($r14, 0, 0, 1, 1, 2147483647, $r15, $r21, 0, 0.0F, 1, 15);

        r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: org.apache.lucene.util.fst.Builder blockBuilder> = $r22;

        $r16 = r1.<org.apache.lucene.codecs.BlockTreeTermsWriter: org.apache.lucene.codecs.PostingsWriterBase postingsWriter>;

        virtualinvoke $r16.<org.apache.lucene.codecs.PostingsWriterBase: void setField(org.apache.lucene.index.FieldInfo)>(r10);

        return;
    }

    public java.util.Comparator getComparator()
    {
        org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter r1;
        java.util.Comparator $r0;

        r1 := @this: org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter;

        $r0 = staticinvoke <org.apache.lucene.util.BytesRef: java.util.Comparator getUTF8SortedAsUnicodeComparator()>();

        return $r0;
    }

    public org.apache.lucene.codecs.PostingsConsumer startTerm(org.apache.lucene.util.BytesRef) throws java.io.IOException
    {
        org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter r0;
        org.apache.lucene.util.BytesRef r5;
        org.apache.lucene.codecs.BlockTreeTermsWriter $r1, $r3;
        org.apache.lucene.codecs.PostingsWriterBase $r2, $r4;

        r0 := @this: org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter;

        r5 := @parameter0: org.apache.lucene.util.BytesRef;

        $r1 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: org.apache.lucene.codecs.BlockTreeTermsWriter this$0>;

        $r2 = $r1.<org.apache.lucene.codecs.BlockTreeTermsWriter: org.apache.lucene.codecs.PostingsWriterBase postingsWriter>;

        virtualinvoke $r2.<org.apache.lucene.codecs.PostingsWriterBase: void startTerm()>();

        $r3 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: org.apache.lucene.codecs.BlockTreeTermsWriter this$0>;

        $r4 = $r3.<org.apache.lucene.codecs.BlockTreeTermsWriter: org.apache.lucene.codecs.PostingsWriterBase postingsWriter>;

        return $r4;
    }

    public void finishTerm(org.apache.lucene.util.BytesRef, org.apache.lucene.codecs.TermStats) throws java.io.IOException
    {
        long $l0, $l1;
        java.lang.AssertionError $r13;
        org.apache.lucene.util.fst.NoOutputs $r5;
        org.apache.lucene.codecs.TermStats r10;
        org.apache.lucene.util.IntsRef $r2, $r4;
        org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter r0;
        org.apache.lucene.codecs.BlockTreeTermsWriter$PendingTerm $r7;
        org.apache.lucene.util.fst.Builder $r3;
        int $i2;
        org.apache.lucene.codecs.PostingsWriterBase $r12;
        boolean $z0;
        org.apache.lucene.util.BytesRef r1, $r9;
        org.apache.lucene.codecs.BlockTreeTermsWriter $r11;
        java.util.List $r8;
        java.lang.Object $r6;

        r0 := @this: org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter;

        r1 := @parameter0: org.apache.lucene.util.BytesRef;

        r10 := @parameter1: org.apache.lucene.codecs.TermStats;

        $z0 = <org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i2 = r10.<org.apache.lucene.codecs.TermStats: int docFreq>;

        if $i2 > 0 goto label1;

        $r13 = new java.lang.AssertionError;

        specialinvoke $r13.<java.lang.AssertionError: void <init>()>();

        throw $r13;

     label1:
        $r3 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: org.apache.lucene.util.fst.Builder blockBuilder>;

        $r2 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: org.apache.lucene.util.IntsRef scratchIntsRef>;

        $r4 = staticinvoke <org.apache.lucene.util.fst.Util: org.apache.lucene.util.IntsRef toIntsRef(org.apache.lucene.util.BytesRef,org.apache.lucene.util.IntsRef)>(r1, $r2);

        $r5 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: org.apache.lucene.util.fst.NoOutputs noOutputs>;

        $r6 = virtualinvoke $r5.<org.apache.lucene.util.fst.NoOutputs: java.lang.Object getNoOutput()>();

        virtualinvoke $r3.<org.apache.lucene.util.fst.Builder: void add(org.apache.lucene.util.IntsRef,java.lang.Object)>($r4, $r6);

        $r8 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: java.util.List pending>;

        $r7 = new org.apache.lucene.codecs.BlockTreeTermsWriter$PendingTerm;

        $r9 = staticinvoke <org.apache.lucene.util.BytesRef: org.apache.lucene.util.BytesRef deepCopyOf(org.apache.lucene.util.BytesRef)>(r1);

        specialinvoke $r7.<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingTerm: void <init>(org.apache.lucene.util.BytesRef,org.apache.lucene.codecs.TermStats)>($r9, r10);

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r7);

        $r11 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: org.apache.lucene.codecs.BlockTreeTermsWriter this$0>;

        $r12 = $r11.<org.apache.lucene.codecs.BlockTreeTermsWriter: org.apache.lucene.codecs.PostingsWriterBase postingsWriter>;

        virtualinvoke $r12.<org.apache.lucene.codecs.PostingsWriterBase: void finishTerm(org.apache.lucene.codecs.TermStats)>(r10);

        $l0 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: long numTerms>;

        $l1 = $l0 + 1L;

        r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: long numTerms> = $l1;

        return;
    }

    public void finish(long, long, int) throws java.io.IOException
    {
        byte $b1, $b4, $b6, $b7;
        org.apache.lucene.codecs.BlockTreeTermsWriter $r10, $r12, $r15;
        java.lang.StringBuilder $r33, $r35, $r36, $r38, $r44;
        long $l0, l3, l5, $l8, $l9, $l10;
        org.apache.lucene.codecs.BlockTreeTermsWriter$PendingEntry $r42;
        java.lang.AssertionError $r45, $r46, $r47, $r49, $r50, $r51;
        java.lang.String $r39;
        org.apache.lucene.index.FieldInfo $r3, $r19;
        org.apache.lucene.util.fst.FST $r13, $r22, $r25;
        org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock $r21, $r43;
        org.apache.lucene.util.fst.Builder $r7;
        org.apache.lucene.codecs.BlockTreeTermsWriter$FieldMetaData $r48;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.apache.lucene.index.FieldInfo$IndexOptions $r4, $r5;
        org.apache.lucene.util.BytesRef $r24, $r28;
        java.util.List $r8, $r16, $r18, $r30, $r34, $r37, $r40;
        org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter r0;
        int i2, $i11, $i12, $i13, $i14;
        org.apache.lucene.store.IndexOutput $r11, $r14;
        java.lang.Object $r9, $r20, $r23, $r26, $r41;

        r0 := @this: org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter;

        l5 := @parameter0: long;

        l3 := @parameter1: long;

        i2 := @parameter2: int;

        $l0 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: long numTerms>;

        $b1 = $l0 cmp 0L;

        $i14 = (int) $b1;

        if $i14 <= 0 goto label5;

        $r7 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: org.apache.lucene.util.fst.Builder blockBuilder>;

        virtualinvoke $r7.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.fst.FST finish()>();

        $z2 = <org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: boolean $assertionsDisabled>;

        if $z2 != 0 goto label2;

        $r30 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: java.util.List pending>;

        $i12 = interfaceinvoke $r30.<java.util.List: int size()>();

        if $i12 != 1 goto label1;

        $r40 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: java.util.List pending>;

        $r41 = interfaceinvoke $r40.<java.util.List: java.lang.Object get(int)>(0);

        $r42 = (org.apache.lucene.codecs.BlockTreeTermsWriter$PendingEntry) $r41;

        $z5 = $r42.<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingEntry: boolean isTerm>;

        if $z5 == 0 goto label2;

     label1:
        $r45 = new java.lang.AssertionError;

        $r44 = new java.lang.StringBuilder;

        specialinvoke $r44.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("pending.size()=");

        $r34 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: java.util.List pending>;

        $i13 = interfaceinvoke $r34.<java.util.List: int size()>();

        $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i13);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" pending=");

        $r37 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: java.util.List pending>;

        $r38 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r37);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r45.<java.lang.AssertionError: void <init>(java.lang.Object)>($r39);

        throw $r45;

     label2:
        $r8 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: java.util.List pending>;

        $r9 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>(0);

        $r43 = (org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock) $r9;

        $z3 = <org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: boolean $assertionsDisabled>;

        if $z3 != 0 goto label3;

        $r28 = $r43.<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock: org.apache.lucene.util.BytesRef prefix>;

        $i11 = $r28.<org.apache.lucene.util.BytesRef: int length>;

        if $i11 == 0 goto label3;

        $r46 = new java.lang.AssertionError;

        specialinvoke $r46.<java.lang.AssertionError: void <init>()>();

        throw $r46;

     label3:
        $z4 = <org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: boolean $assertionsDisabled>;

        if $z4 != 0 goto label4;

        $r25 = $r43.<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock: org.apache.lucene.util.fst.FST index>;

        $r26 = virtualinvoke $r25.<org.apache.lucene.util.fst.FST: java.lang.Object getEmptyOutput()>();

        if $r26 != null goto label4;

        $r47 = new java.lang.AssertionError;

        specialinvoke $r47.<java.lang.AssertionError: void <init>()>();

        throw $r47;

     label4:
        r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: long sumTotalTermFreq> = l5;

        r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: long sumDocFreq> = l3;

        r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: int docCount> = i2;

        $r10 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: org.apache.lucene.codecs.BlockTreeTermsWriter this$0>;

        $r11 = staticinvoke <org.apache.lucene.codecs.BlockTreeTermsWriter: org.apache.lucene.store.IndexOutput access$300(org.apache.lucene.codecs.BlockTreeTermsWriter)>($r10);

        $l8 = virtualinvoke $r11.<org.apache.lucene.store.IndexOutput: long getFilePointer()>();

        r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: long indexStartFP> = $l8;

        $r13 = $r43.<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock: org.apache.lucene.util.fst.FST index>;

        $r12 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: org.apache.lucene.codecs.BlockTreeTermsWriter this$0>;

        $r14 = staticinvoke <org.apache.lucene.codecs.BlockTreeTermsWriter: org.apache.lucene.store.IndexOutput access$300(org.apache.lucene.codecs.BlockTreeTermsWriter)>($r12);

        virtualinvoke $r13.<org.apache.lucene.util.fst.FST: void save(org.apache.lucene.store.DataOutput)>($r14);

        $r15 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: org.apache.lucene.codecs.BlockTreeTermsWriter this$0>;

        $r16 = staticinvoke <org.apache.lucene.codecs.BlockTreeTermsWriter: java.util.List access$400(org.apache.lucene.codecs.BlockTreeTermsWriter)>($r15);

        $r48 = new org.apache.lucene.codecs.BlockTreeTermsWriter$FieldMetaData;

        $r19 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: org.apache.lucene.index.FieldInfo fieldInfo>;

        $r18 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: java.util.List pending>;

        $r20 = interfaceinvoke $r18.<java.util.List: java.lang.Object get(int)>(0);

        $r21 = (org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock) $r20;

        $r22 = $r21.<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock: org.apache.lucene.util.fst.FST index>;

        $r23 = virtualinvoke $r22.<org.apache.lucene.util.fst.FST: java.lang.Object getEmptyOutput()>();

        $r24 = (org.apache.lucene.util.BytesRef) $r23;

        $l10 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: long numTerms>;

        $l9 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: long indexStartFP>;

        specialinvoke $r48.<org.apache.lucene.codecs.BlockTreeTermsWriter$FieldMetaData: void <init>(org.apache.lucene.index.FieldInfo,org.apache.lucene.util.BytesRef,long,long,long,long,int)>($r19, $r24, $l10, $l9, l5, l3, i2);

        interfaceinvoke $r16.<java.util.List: boolean add(java.lang.Object)>($r48);

        goto label9;

     label5:
        $z0 = <org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: boolean $assertionsDisabled>;

        if $z0 != 0 goto label7;

        $b6 = l5 cmp 0L;

        if $b6 == 0 goto label7;

        $r3 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: org.apache.lucene.index.FieldInfo fieldInfo>;

        $r4 = virtualinvoke $r3.<org.apache.lucene.index.FieldInfo: org.apache.lucene.index.FieldInfo$IndexOptions getIndexOptions()>();

        $r5 = <org.apache.lucene.index.FieldInfo$IndexOptions: org.apache.lucene.index.FieldInfo$IndexOptions DOCS_ONLY>;

        if $r4 != $r5 goto label6;

        $b7 = l5 cmp -1L;

        if $b7 == 0 goto label7;

     label6:
        $r49 = new java.lang.AssertionError;

        specialinvoke $r49.<java.lang.AssertionError: void <init>()>();

        throw $r49;

     label7:
        $z6 = <org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: boolean $assertionsDisabled>;

        if $z6 != 0 goto label8;

        $b4 = l3 cmp 0L;

        if $b4 == 0 goto label8;

        $r50 = new java.lang.AssertionError;

        specialinvoke $r50.<java.lang.AssertionError: void <init>()>();

        throw $r50;

     label8:
        $z1 = <org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: boolean $assertionsDisabled>;

        if $z1 != 0 goto label9;

        if i2 == 0 goto label9;

        $r51 = new java.lang.AssertionError;

        specialinvoke $r51.<java.lang.AssertionError: void <init>()>();

        throw $r51;

     label9:
        return;
    }

    static org.apache.lucene.util.fst.Builder access$000(org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter)
    {
        org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter r0;
        org.apache.lucene.util.fst.Builder $r1;

        r0 := @parameter0: org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter;

        $r1 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: org.apache.lucene.util.fst.Builder blockBuilder>;

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/codecs/BlockTreeTermsWriter;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: boolean $assertionsDisabled> = $z1;

        return;
    }
}
