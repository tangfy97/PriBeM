abstract class org.apache.lucene.util.packed.AbstractAppendingLongBuffer$Iterator extends java.lang.Object
{
    long[] currentValues;
    int vOff;
    int pOff;
    static final boolean $assertionsDisabled;
    final org.apache.lucene.util.packed.AbstractAppendingLongBuffer this$0;

    void <init>(org.apache.lucene.util.packed.AbstractAppendingLongBuffer)
    {
        org.apache.lucene.util.packed.AbstractAppendingLongBuffer$Iterator r0;
        org.apache.lucene.util.packed.AbstractAppendingLongBuffer r1;
        long[] $r2, $r3;
        int $i0;

        r0 := @this: org.apache.lucene.util.packed.AbstractAppendingLongBuffer$Iterator;

        r1 := @parameter0: org.apache.lucene.util.packed.AbstractAppendingLongBuffer;

        r0.<org.apache.lucene.util.packed.AbstractAppendingLongBuffer$Iterator: org.apache.lucene.util.packed.AbstractAppendingLongBuffer this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.lucene.util.packed.AbstractAppendingLongBuffer$Iterator: int pOff> = 0;

        r0.<org.apache.lucene.util.packed.AbstractAppendingLongBuffer$Iterator: int vOff> = 0;

        $i0 = r1.<org.apache.lucene.util.packed.AbstractAppendingLongBuffer: int valuesOff>;

        if $i0 != 0 goto label1;

        $r3 = r1.<org.apache.lucene.util.packed.AbstractAppendingLongBuffer: long[] pending>;

        r0.<org.apache.lucene.util.packed.AbstractAppendingLongBuffer$Iterator: long[] currentValues> = $r3;

        goto label2;

     label1:
        $r2 = newarray (long)[1024];

        r0.<org.apache.lucene.util.packed.AbstractAppendingLongBuffer$Iterator: long[] currentValues> = $r2;

        virtualinvoke r0.<org.apache.lucene.util.packed.AbstractAppendingLongBuffer$Iterator: void fillValues()>();

     label2:
        return;
    }

    abstract void fillValues();

    public final boolean hasNext()
    {
        org.apache.lucene.util.packed.AbstractAppendingLongBuffer $r1, $r2, $r3;
        org.apache.lucene.util.packed.AbstractAppendingLongBuffer$Iterator r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        boolean $z0;

        r0 := @this: org.apache.lucene.util.packed.AbstractAppendingLongBuffer$Iterator;

        $i1 = r0.<org.apache.lucene.util.packed.AbstractAppendingLongBuffer$Iterator: int vOff>;

        $r1 = r0.<org.apache.lucene.util.packed.AbstractAppendingLongBuffer$Iterator: org.apache.lucene.util.packed.AbstractAppendingLongBuffer this$0>;

        $i0 = $r1.<org.apache.lucene.util.packed.AbstractAppendingLongBuffer: int valuesOff>;

        if $i1 < $i0 goto label1;

        $i3 = r0.<org.apache.lucene.util.packed.AbstractAppendingLongBuffer$Iterator: int vOff>;

        $r2 = r0.<org.apache.lucene.util.packed.AbstractAppendingLongBuffer$Iterator: org.apache.lucene.util.packed.AbstractAppendingLongBuffer this$0>;

        $i2 = $r2.<org.apache.lucene.util.packed.AbstractAppendingLongBuffer: int valuesOff>;

        if $i3 != $i2 goto label2;

        $i5 = r0.<org.apache.lucene.util.packed.AbstractAppendingLongBuffer$Iterator: int pOff>;

        $r3 = r0.<org.apache.lucene.util.packed.AbstractAppendingLongBuffer$Iterator: org.apache.lucene.util.packed.AbstractAppendingLongBuffer this$0>;

        $i4 = $r3.<org.apache.lucene.util.packed.AbstractAppendingLongBuffer: int pendingOff>;

        if $i5 >= $i4 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public final long next()
    {
        org.apache.lucene.util.packed.AbstractAppendingLongBuffer $r2;
        long $l7;
        java.lang.AssertionError $r3;
        org.apache.lucene.util.packed.AbstractAppendingLongBuffer$Iterator r0;
        long[] $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.util.packed.AbstractAppendingLongBuffer$Iterator;

        $z0 = <org.apache.lucene.util.packed.AbstractAppendingLongBuffer$Iterator: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<org.apache.lucene.util.packed.AbstractAppendingLongBuffer$Iterator: boolean hasNext()>();

        if $z1 != 0 goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label1:
        $r1 = r0.<org.apache.lucene.util.packed.AbstractAppendingLongBuffer$Iterator: long[] currentValues>;

        $i0 = r0.<org.apache.lucene.util.packed.AbstractAppendingLongBuffer$Iterator: int pOff>;

        $i1 = $i0 + 1;

        r0.<org.apache.lucene.util.packed.AbstractAppendingLongBuffer$Iterator: int pOff> = $i1;

        $l7 = $r1[$i0];

        $i2 = r0.<org.apache.lucene.util.packed.AbstractAppendingLongBuffer$Iterator: int pOff>;

        if $i2 != 1024 goto label2;

        $i3 = r0.<org.apache.lucene.util.packed.AbstractAppendingLongBuffer$Iterator: int vOff>;

        $i4 = $i3 + 1;

        r0.<org.apache.lucene.util.packed.AbstractAppendingLongBuffer$Iterator: int vOff> = $i4;

        r0.<org.apache.lucene.util.packed.AbstractAppendingLongBuffer$Iterator: int pOff> = 0;

        $i6 = r0.<org.apache.lucene.util.packed.AbstractAppendingLongBuffer$Iterator: int vOff>;

        $r2 = r0.<org.apache.lucene.util.packed.AbstractAppendingLongBuffer$Iterator: org.apache.lucene.util.packed.AbstractAppendingLongBuffer this$0>;

        $i5 = $r2.<org.apache.lucene.util.packed.AbstractAppendingLongBuffer: int valuesOff>;

        if $i6 > $i5 goto label2;

        virtualinvoke r0.<org.apache.lucene.util.packed.AbstractAppendingLongBuffer$Iterator: void fillValues()>();

     label2:
        return $l7;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/util/packed/AbstractAppendingLongBuffer;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.util.packed.AbstractAppendingLongBuffer$Iterator: boolean $assertionsDisabled> = $z1;

        return;
    }
}
