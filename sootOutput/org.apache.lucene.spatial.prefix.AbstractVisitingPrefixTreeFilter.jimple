public abstract class org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter extends org.apache.lucene.spatial.prefix.AbstractPrefixTreeFilter
{
    protected final int prefixGridScanLevel;
    static final boolean $assertionsDisabled;

    public void <init>(com.spatial4j.core.shape.Shape, java.lang.String, org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree, int, int)
    {
        org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree r3;
        java.lang.AssertionError $r4;
        com.spatial4j.core.shape.Shape r1;
        org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.String r2;
        boolean $z0;

        r0 := @this: org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter;

        r1 := @parameter0: com.spatial4j.core.shape.Shape;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        specialinvoke r0.<org.apache.lucene.spatial.prefix.AbstractPrefixTreeFilter: void <init>(com.spatial4j.core.shape.Shape,java.lang.String,org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree,int)>(r1, r2, r3, i0);

        $i2 = virtualinvoke r3.<org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree: int getMaxLevels()>();

        $i3 = $i2 - 1;

        $i4 = staticinvoke <java.lang.Math: int min(int,int)>(i1, $i3);

        $i5 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i4);

        r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter: int prefixGridScanLevel> = $i5;

        $z0 = <org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i6 = virtualinvoke r3.<org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree: int getMaxLevels()>();

        if i0 <= $i6 goto label1;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label1:
        return;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter r0, r2;
        int $i0, $i1;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<org.apache.lucene.spatial.prefix.AbstractPrefixTreeFilter: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r2 = (org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter) r1;

        $i1 = r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter: int prefixGridScanLevel>;

        $i0 = r2.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter: int prefixGridScanLevel>;

        if $i1 == $i0 goto label2;

        return 0;

     label2:
        return 1;
    }

    public int hashCode()
    {
        org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter r0;
        int $i0, $i1, $i2, i3;

        r0 := @this: org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter;

        $i0 = specialinvoke r0.<org.apache.lucene.spatial.prefix.AbstractPrefixTreeFilter: int hashCode()>();

        $i2 = 31 * $i0;

        $i1 = r0.<org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter: int prefixGridScanLevel>;

        i3 = $i2 + $i1;

        return i3;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/spatial/prefix/AbstractVisitingPrefixTreeFilter;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeFilter: boolean $assertionsDisabled> = $z1;

        return;
    }
}
