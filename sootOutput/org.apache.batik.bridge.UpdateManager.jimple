public class org.apache.batik.bridge.UpdateManager extends java.lang.Object
{
    static final int MIN_REPAINT_TIME;
    protected org.apache.batik.bridge.BridgeContext bridgeContext;
    protected org.w3c.dom.Document document;
    protected org.apache.batik.util.RunnableQueue updateRunnableQueue;
    protected org.apache.batik.util.RunnableQueue$RunHandler runHandler;
    protected volatile boolean running;
    protected volatile boolean suspendCalled;
    protected java.util.List listeners;
    protected org.apache.batik.bridge.ScriptingEnvironment scriptingEnvironment;
    protected org.apache.batik.bridge.RepaintManager repaintManager;
    protected org.apache.batik.gvt.UpdateTracker updateTracker;
    protected org.apache.batik.gvt.GraphicsNode graphicsNode;
    protected boolean started;
    protected org.apache.batik.bridge.BridgeContext[] secondaryBridgeContexts;
    protected org.apache.batik.bridge.ScriptingEnvironment[] secondaryScriptingEnvironments;
    protected int minRepaintTime;
    long outOfDateTime;
    java.util.List suspensionList;
    int nextSuspensionIndex;
    long allResumeTime;
    java.util.Timer repaintTriggerTimer;
    java.util.TimerTask repaintTimerTask;
    static org.apache.batik.util.EventDispatcher$Dispatcher startedDispatcher;
    static org.apache.batik.util.EventDispatcher$Dispatcher stoppedDispatcher;
    static org.apache.batik.util.EventDispatcher$Dispatcher suspendedDispatcher;
    static org.apache.batik.util.EventDispatcher$Dispatcher resumedDispatcher;
    static org.apache.batik.util.EventDispatcher$Dispatcher updateStartedDispatcher;
    static org.apache.batik.util.EventDispatcher$Dispatcher updateCompletedDispatcher;
    static org.apache.batik.util.EventDispatcher$Dispatcher updateFailedDispatcher;

    public void <init>(org.apache.batik.bridge.BridgeContext, org.apache.batik.gvt.GraphicsNode, org.w3c.dom.Document)
    {
        java.util.ArrayList $r3;
        org.w3c.dom.Document r6, $r21;
        int $i0, $i1, i2, $i3;
        java.util.LinkedList $r1;
        org.apache.batik.bridge.BridgeContext[] $r14, $r16, $r17, $r19, $r25;
        boolean $z0;
        org.apache.batik.bridge.ScriptingEnvironment $r13, $r23;
        org.apache.batik.util.RunnableQueue $r7, $r10;
        org.apache.batik.gvt.GraphicsNode r11;
        org.apache.batik.bridge.BridgeContext r4, $r5, $r12, r20;
        org.apache.batik.util.RunnableQueue$RunHandler $r8, $r9;
        org.apache.batik.dom.svg.SVGOMDocument $r22;
        java.util.List $r2;
        org.apache.batik.bridge.ScriptingEnvironment[] $r18, $r24;
        java.lang.Object $r15;
        org.apache.batik.bridge.UpdateManager r0;

        r0 := @this: org.apache.batik.bridge.UpdateManager;

        r4 := @parameter0: org.apache.batik.bridge.BridgeContext;

        r11 := @parameter1: org.apache.batik.gvt.GraphicsNode;

        r6 := @parameter2: org.w3c.dom.Document;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.LinkedList;

        specialinvoke $r1.<java.util.LinkedList: void <init>()>();

        $r2 = staticinvoke <java.util.Collections: java.util.List synchronizedList(java.util.List)>($r1);

        r0.<org.apache.batik.bridge.UpdateManager: java.util.List listeners> = $r2;

        r0.<org.apache.batik.bridge.UpdateManager: long outOfDateTime> = 0L;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.batik.bridge.UpdateManager: java.util.List suspensionList> = $r3;

        r0.<org.apache.batik.bridge.UpdateManager: int nextSuspensionIndex> = 1;

        r0.<org.apache.batik.bridge.UpdateManager: long allResumeTime> = -1L;

        r0.<org.apache.batik.bridge.UpdateManager: java.util.Timer repaintTriggerTimer> = null;

        r0.<org.apache.batik.bridge.UpdateManager: java.util.TimerTask repaintTimerTask> = null;

        r0.<org.apache.batik.bridge.UpdateManager: org.apache.batik.bridge.BridgeContext bridgeContext> = r4;

        $r5 = r0.<org.apache.batik.bridge.UpdateManager: org.apache.batik.bridge.BridgeContext bridgeContext>;

        virtualinvoke $r5.<org.apache.batik.bridge.BridgeContext: void setUpdateManager(org.apache.batik.bridge.UpdateManager)>(r0);

        r0.<org.apache.batik.bridge.UpdateManager: org.w3c.dom.Document document> = r6;

        $r7 = staticinvoke <org.apache.batik.util.RunnableQueue: org.apache.batik.util.RunnableQueue createRunnableQueue()>();

        r0.<org.apache.batik.bridge.UpdateManager: org.apache.batik.util.RunnableQueue updateRunnableQueue> = $r7;

        $r8 = virtualinvoke r0.<org.apache.batik.bridge.UpdateManager: org.apache.batik.util.RunnableQueue$RunHandler createRunHandler()>();

        r0.<org.apache.batik.bridge.UpdateManager: org.apache.batik.util.RunnableQueue$RunHandler runHandler> = $r8;

        $r10 = r0.<org.apache.batik.bridge.UpdateManager: org.apache.batik.util.RunnableQueue updateRunnableQueue>;

        $r9 = r0.<org.apache.batik.bridge.UpdateManager: org.apache.batik.util.RunnableQueue$RunHandler runHandler>;

        virtualinvoke $r10.<org.apache.batik.util.RunnableQueue: void setRunHandler(org.apache.batik.util.RunnableQueue$RunHandler)>($r9);

        r0.<org.apache.batik.bridge.UpdateManager: org.apache.batik.gvt.GraphicsNode graphicsNode> = r11;

        $r12 = r0.<org.apache.batik.bridge.UpdateManager: org.apache.batik.bridge.BridgeContext bridgeContext>;

        $r13 = virtualinvoke r0.<org.apache.batik.bridge.UpdateManager: org.apache.batik.bridge.ScriptingEnvironment initializeScriptingEnvironment(org.apache.batik.bridge.BridgeContext)>($r12);

        r0.<org.apache.batik.bridge.UpdateManager: org.apache.batik.bridge.ScriptingEnvironment scriptingEnvironment> = $r13;

        $r14 = virtualinvoke r4.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.BridgeContext[] getChildContexts()>();

        $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.Object clone()>();

        $r16 = (org.apache.batik.bridge.BridgeContext[]) $r15;

        r0.<org.apache.batik.bridge.UpdateManager: org.apache.batik.bridge.BridgeContext[] secondaryBridgeContexts> = $r16;

        $r17 = r0.<org.apache.batik.bridge.UpdateManager: org.apache.batik.bridge.BridgeContext[] secondaryBridgeContexts>;

        $i0 = lengthof $r17;

        $r18 = newarray (org.apache.batik.bridge.ScriptingEnvironment)[$i0];

        r0.<org.apache.batik.bridge.UpdateManager: org.apache.batik.bridge.ScriptingEnvironment[] secondaryScriptingEnvironments> = $r18;

        i2 = 0;

        goto label4;

     label1:
        $r19 = r0.<org.apache.batik.bridge.UpdateManager: org.apache.batik.bridge.BridgeContext[] secondaryBridgeContexts>;

        r20 = $r19[i2];

        $r21 = virtualinvoke r20.<org.apache.batik.bridge.BridgeContext: org.w3c.dom.Document getDocument()>();

        $r22 = (org.apache.batik.dom.svg.SVGOMDocument) $r21;

        $z0 = virtualinvoke $r22.<org.apache.batik.dom.svg.SVGOMDocument: boolean isSVG12()>();

        if $z0 != 0 goto label2;

        goto label3;

     label2:
        virtualinvoke r20.<org.apache.batik.bridge.BridgeContext: void setUpdateManager(org.apache.batik.bridge.UpdateManager)>(r0);

        $r23 = virtualinvoke r0.<org.apache.batik.bridge.UpdateManager: org.apache.batik.bridge.ScriptingEnvironment initializeScriptingEnvironment(org.apache.batik.bridge.BridgeContext)>(r20);

        $r24 = r0.<org.apache.batik.bridge.UpdateManager: org.apache.batik.bridge.ScriptingEnvironment[] secondaryScriptingEnvironments>;

        $r24[i2] = $r23;

     label3:
        i2 = i2 + 1;

     label4:
        $r25 = r0.<org.apache.batik.bridge.UpdateManager: org.apache.batik.bridge.BridgeContext[] secondaryBridgeContexts>;

        $i3 = lengthof $r25;

        if i2 < $i3 goto label1;

        $i1 = <org.apache.batik.bridge.UpdateManager: int MIN_REPAINT_TIME>;

        r0.<org.apache.batik.bridge.UpdateManager: int minRepaintTime> = $i1;

        return;
    }

    public int getMinRepaintTime()
    {
        int $i0;
        org.apache.batik.bridge.UpdateManager r0;

        r0 := @this: org.apache.batik.bridge.UpdateManager;

        $i0 = r0.<org.apache.batik.bridge.UpdateManager: int minRepaintTime>;

        return $i0;
    }

    public void setMinRepaintTime(int)
    {
        int i0;
        org.apache.batik.bridge.UpdateManager r0;

        r0 := @this: org.apache.batik.bridge.UpdateManager;

        i0 := @parameter0: int;

        r0.<org.apache.batik.bridge.UpdateManager: int minRepaintTime> = i0;

        return;
    }

    protected org.apache.batik.bridge.ScriptingEnvironment initializeScriptingEnvironment(org.apache.batik.bridge.BridgeContext)
    {
        org.apache.batik.bridge.ScriptingEnvironment $r3, r8;
        org.apache.batik.bridge.svg12.DefaultXBLManager $r5;
        org.apache.batik.bridge.svg12.SVG12ScriptingEnvironment $r4;
        org.apache.batik.bridge.BridgeContext r0;
        org.apache.batik.dom.xbl.XBLManager $r6;
        org.apache.batik.dom.svg.SVGOMDocument r2;
        org.w3c.dom.Document $r1;
        org.apache.batik.bridge.UpdateManager r7;
        boolean $z0;

        r7 := @this: org.apache.batik.bridge.UpdateManager;

        r0 := @parameter0: org.apache.batik.bridge.BridgeContext;

        $r1 = virtualinvoke r0.<org.apache.batik.bridge.BridgeContext: org.w3c.dom.Document getDocument()>();

        r2 = (org.apache.batik.dom.svg.SVGOMDocument) $r1;

        $z0 = virtualinvoke r2.<org.apache.batik.dom.svg.SVGOMDocument: boolean isSVG12()>();

        if $z0 == 0 goto label1;

        $r4 = new org.apache.batik.bridge.svg12.SVG12ScriptingEnvironment;

        specialinvoke $r4.<org.apache.batik.bridge.svg12.SVG12ScriptingEnvironment: void <init>(org.apache.batik.bridge.BridgeContext)>(r0);

        r8 = $r4;

        $r5 = new org.apache.batik.bridge.svg12.DefaultXBLManager;

        specialinvoke $r5.<org.apache.batik.bridge.svg12.DefaultXBLManager: void <init>(org.w3c.dom.Document,org.apache.batik.bridge.BridgeContext)>(r2, r0);

        r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.dom.xbl.XBLManager xblManager> = $r5;

        $r6 = r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.dom.xbl.XBLManager xblManager>;

        virtualinvoke r2.<org.apache.batik.dom.AbstractDocument: void setXBLManager(org.apache.batik.dom.xbl.XBLManager)>($r6);

        goto label2;

     label1:
        $r3 = new org.apache.batik.bridge.ScriptingEnvironment;

        specialinvoke $r3.<org.apache.batik.bridge.ScriptingEnvironment: void <init>(org.apache.batik.bridge.BridgeContext)>(r0);

        r8 = $r3;

     label2:
        return r8;
    }

    public synchronized void dispatchSVGLoadEvent() throws java.lang.InterruptedException
    {
        org.apache.batik.bridge.ScriptingEnvironment $r1, r8;
        org.apache.batik.bridge.BridgeContext $r2, r4;
        org.apache.batik.dom.svg.SVGOMDocument $r6;
        org.apache.batik.bridge.ScriptingEnvironment[] $r7, $r9;
        org.w3c.dom.Document $r5;
        int i0, $i1;
        org.apache.batik.bridge.BridgeContext[] $r3;
        org.apache.batik.bridge.UpdateManager r0;
        boolean $z0;

        r0 := @this: org.apache.batik.bridge.UpdateManager;

        $r2 = r0.<org.apache.batik.bridge.UpdateManager: org.apache.batik.bridge.BridgeContext bridgeContext>;

        $r1 = r0.<org.apache.batik.bridge.UpdateManager: org.apache.batik.bridge.ScriptingEnvironment scriptingEnvironment>;

        virtualinvoke r0.<org.apache.batik.bridge.UpdateManager: void dispatchSVGLoadEvent(org.apache.batik.bridge.BridgeContext,org.apache.batik.bridge.ScriptingEnvironment)>($r2, $r1);

        i0 = 0;

        goto label4;

     label1:
        $r3 = r0.<org.apache.batik.bridge.UpdateManager: org.apache.batik.bridge.BridgeContext[] secondaryBridgeContexts>;

        r4 = $r3[i0];

        $r5 = virtualinvoke r4.<org.apache.batik.bridge.BridgeContext: org.w3c.dom.Document getDocument()>();

        $r6 = (org.apache.batik.dom.svg.SVGOMDocument) $r5;

        $z0 = virtualinvoke $r6.<org.apache.batik.dom.svg.SVGOMDocument: boolean isSVG12()>();

        if $z0 != 0 goto label2;

        goto label3;

     label2:
        $r7 = r0.<org.apache.batik.bridge.UpdateManager: org.apache.batik.bridge.ScriptingEnvironment[] secondaryScriptingEnvironments>;

        r8 = $r7[i0];

        virtualinvoke r0.<org.apache.batik.bridge.UpdateManager: void dispatchSVGLoadEvent(org.apache.batik.bridge.BridgeContext,org.apache.batik.bridge.ScriptingEnvironment)>(r4, r8);

     label3:
        i0 = i0 + 1;

     label4:
        $r9 = r0.<org.apache.batik.bridge.UpdateManager: org.apache.batik.bridge.ScriptingEnvironment[] secondaryScriptingEnvironments>;

        $i1 = lengthof $r9;

        if i0 < $i1 goto label1;

        r0.<org.apache.batik.bridge.UpdateManager: org.apache.batik.bridge.BridgeContext[] secondaryBridgeContexts> = null;

        r0.<org.apache.batik.bridge.UpdateManager: org.apache.batik.bridge.ScriptingEnvironment[] secondaryScriptingEnvironments> = null;

        return;
    }

    protected void dispatchSVGLoadEvent(org.apache.batik.bridge.BridgeContext, org.apache.batik.bridge.ScriptingEnvironment)
    {
        org.apache.batik.bridge.ScriptingEnvironment r0;
        org.apache.batik.bridge.BridgeContext r1;
        org.apache.batik.dom.xbl.XBLManager $r2, $r4;
        org.apache.batik.bridge.svg12.SVG12BridgeContext r3;
        org.apache.batik.bridge.UpdateManager r5;
        boolean $z0;

        r5 := @this: org.apache.batik.bridge.UpdateManager;

        r1 := @parameter0: org.apache.batik.bridge.BridgeContext;

        r0 := @parameter1: org.apache.batik.bridge.ScriptingEnvironment;

        virtualinvoke r0.<org.apache.batik.bridge.BaseScriptingEnvironment: void loadScripts()>();

        virtualinvoke r0.<org.apache.batik.bridge.BaseScriptingEnvironment: void dispatchSVGLoadEvent()>();

        $z0 = virtualinvoke r1.<org.apache.batik.bridge.BridgeContext: boolean isSVG12()>();

        if $z0 == 0 goto label1;

        $r2 = r1.<org.apache.batik.bridge.BridgeContext: org.apache.batik.dom.xbl.XBLManager xblManager>;

        if $r2 == null goto label1;

        r3 = (org.apache.batik.bridge.svg12.SVG12BridgeContext) r1;

        virtualinvoke r3.<org.apache.batik.bridge.svg12.SVG12BridgeContext: void addBindingListener()>();

        $r4 = r3.<org.apache.batik.bridge.BridgeContext: org.apache.batik.dom.xbl.XBLManager xblManager>;

        interfaceinvoke $r4.<org.apache.batik.dom.xbl.XBLManager: void startProcessing()>();

     label1:
        return;
    }

    public void dispatchSVGZoomEvent() throws java.lang.InterruptedException
    {
        org.apache.batik.bridge.ScriptingEnvironment $r1;
        org.apache.batik.bridge.UpdateManager r0;

        r0 := @this: org.apache.batik.bridge.UpdateManager;

        $r1 = r0.<org.apache.batik.bridge.UpdateManager: org.apache.batik.bridge.ScriptingEnvironment scriptingEnvironment>;

        virtualinvoke $r1.<org.apache.batik.bridge.BaseScriptingEnvironment: void dispatchSVGZoomEvent()>();

        return;
    }

    public void dispatchSVGScrollEvent() throws java.lang.InterruptedException
    {
        org.apache.batik.bridge.ScriptingEnvironment $r1;
        org.apache.batik.bridge.UpdateManager r0;

        r0 := @this: org.apache.batik.bridge.UpdateManager;

        $r1 = r0.<org.apache.batik.bridge.UpdateManager: org.apache.batik.bridge.ScriptingEnvironment scriptingEnvironment>;

        virtualinvoke $r1.<org.apache.batik.bridge.BaseScriptingEnvironment: void dispatchSVGScrollEvent()>();

        return;
    }

    public void dispatchSVGResizeEvent() throws java.lang.InterruptedException
    {
        org.apache.batik.bridge.ScriptingEnvironment $r1;
        org.apache.batik.bridge.UpdateManager r0;

        r0 := @this: org.apache.batik.bridge.UpdateManager;

        $r1 = r0.<org.apache.batik.bridge.UpdateManager: org.apache.batik.bridge.ScriptingEnvironment scriptingEnvironment>;

        virtualinvoke $r1.<org.apache.batik.bridge.BaseScriptingEnvironment: void dispatchSVGResizeEvent()>();

        return;
    }

    public void manageUpdates(org.apache.batik.gvt.renderer.ImageRenderer)
    {
        org.apache.batik.util.RunnableQueue $r3;
        org.apache.batik.bridge.UpdateManager$1 $r1;
        org.apache.batik.bridge.UpdateManager r0;
        org.apache.batik.gvt.renderer.ImageRenderer r2;

        r0 := @this: org.apache.batik.bridge.UpdateManager;

        r2 := @parameter0: org.apache.batik.gvt.renderer.ImageRenderer;

        $r3 = r0.<org.apache.batik.bridge.UpdateManager: org.apache.batik.util.RunnableQueue updateRunnableQueue>;

        $r1 = new org.apache.batik.bridge.UpdateManager$1;

        specialinvoke $r1.<org.apache.batik.bridge.UpdateManager$1: void <init>(org.apache.batik.bridge.UpdateManager,org.apache.batik.gvt.renderer.ImageRenderer)>(r0, r2);

        virtualinvoke $r3.<org.apache.batik.util.RunnableQueue: void preemptLater(java.lang.Runnable)>($r1);

        virtualinvoke r0.<org.apache.batik.bridge.UpdateManager: void resume()>();

        return;
    }

    public org.apache.batik.bridge.BridgeContext getBridgeContext()
    {
        org.apache.batik.bridge.BridgeContext $r1;
        org.apache.batik.bridge.UpdateManager r0;

        r0 := @this: org.apache.batik.bridge.UpdateManager;

        $r1 = r0.<org.apache.batik.bridge.UpdateManager: org.apache.batik.bridge.BridgeContext bridgeContext>;

        return $r1;
    }

    public org.apache.batik.util.RunnableQueue getUpdateRunnableQueue()
    {
        org.apache.batik.util.RunnableQueue $r1;
        org.apache.batik.bridge.UpdateManager r0;

        r0 := @this: org.apache.batik.bridge.UpdateManager;

        $r1 = r0.<org.apache.batik.bridge.UpdateManager: org.apache.batik.util.RunnableQueue updateRunnableQueue>;

        return $r1;
    }

    public org.apache.batik.bridge.RepaintManager getRepaintManager()
    {
        org.apache.batik.bridge.RepaintManager $r1;
        org.apache.batik.bridge.UpdateManager r0;

        r0 := @this: org.apache.batik.bridge.UpdateManager;

        $r1 = r0.<org.apache.batik.bridge.UpdateManager: org.apache.batik.bridge.RepaintManager repaintManager>;

        return $r1;
    }

    public org.apache.batik.gvt.UpdateTracker getUpdateTracker()
    {
        org.apache.batik.gvt.UpdateTracker $r1;
        org.apache.batik.bridge.UpdateManager r0;

        r0 := @this: org.apache.batik.bridge.UpdateManager;

        $r1 = r0.<org.apache.batik.bridge.UpdateManager: org.apache.batik.gvt.UpdateTracker updateTracker>;

        return $r1;
    }

    public org.w3c.dom.Document getDocument()
    {
        org.apache.batik.bridge.UpdateManager r0;
        org.w3c.dom.Document $r1;

        r0 := @this: org.apache.batik.bridge.UpdateManager;

        $r1 = r0.<org.apache.batik.bridge.UpdateManager: org.w3c.dom.Document document>;

        return $r1;
    }

    public org.apache.batik.bridge.ScriptingEnvironment getScriptingEnvironment()
    {
        org.apache.batik.bridge.ScriptingEnvironment $r1;
        org.apache.batik.bridge.UpdateManager r0;

        r0 := @this: org.apache.batik.bridge.UpdateManager;

        $r1 = r0.<org.apache.batik.bridge.UpdateManager: org.apache.batik.bridge.ScriptingEnvironment scriptingEnvironment>;

        return $r1;
    }

    public synchronized boolean isRunning()
    {
        org.apache.batik.bridge.UpdateManager r0;
        boolean $z0;

        r0 := @this: org.apache.batik.bridge.UpdateManager;

        $z0 = r0.<org.apache.batik.bridge.UpdateManager: boolean running>;

        return $z0;
    }

    public synchronized void suspend()
    {
        org.apache.batik.util.RunnableQueue $r1, $r4;
        org.apache.batik.util.RunnableQueue$RunnableQueueState $r2, $r3;
        org.apache.batik.bridge.UpdateManager r0;

        r0 := @this: org.apache.batik.bridge.UpdateManager;

        $r1 = r0.<org.apache.batik.bridge.UpdateManager: org.apache.batik.util.RunnableQueue updateRunnableQueue>;

        $r2 = virtualinvoke $r1.<org.apache.batik.util.RunnableQueue: org.apache.batik.util.RunnableQueue$RunnableQueueState getQueueState()>();

        $r3 = <org.apache.batik.util.RunnableQueue: org.apache.batik.util.RunnableQueue$RunnableQueueState RUNNING>;

        if $r2 != $r3 goto label1;

        $r4 = r0.<org.apache.batik.bridge.UpdateManager: org.apache.batik.util.RunnableQueue updateRunnableQueue>;

        virtualinvoke $r4.<org.apache.batik.util.RunnableQueue: void suspendExecution(boolean)>(0);

     label1:
        r0.<org.apache.batik.bridge.UpdateManager: boolean suspendCalled> = 1;

        return;
    }

    public synchronized void resume()
    {
        org.apache.batik.util.RunnableQueue $r1, $r4;
        org.apache.batik.util.RunnableQueue$RunnableQueueState $r2, $r3;
        org.apache.batik.bridge.UpdateManager r0;

        r0 := @this: org.apache.batik.bridge.UpdateManager;

        $r1 = r0.<org.apache.batik.bridge.UpdateManager: org.apache.batik.util.RunnableQueue updateRunnableQueue>;

        $r2 = virtualinvoke $r1.<org.apache.batik.util.RunnableQueue: org.apache.batik.util.RunnableQueue$RunnableQueueState getQueueState()>();

        $r3 = <org.apache.batik.util.RunnableQueue: org.apache.batik.util.RunnableQueue$RunnableQueueState RUNNING>;

        if $r2 == $r3 goto label1;

        $r4 = r0.<org.apache.batik.bridge.UpdateManager: org.apache.batik.util.RunnableQueue updateRunnableQueue>;

        virtualinvoke $r4.<org.apache.batik.util.RunnableQueue: void resumeExecution()>();

     label1:
        return;
    }

    public void interrupt()
    {
        java.lang.IllegalStateException $r4;
        org.apache.batik.util.RunnableQueue $r2, $r3;
        org.apache.batik.bridge.UpdateManager$2 $r0;
        org.apache.batik.bridge.UpdateManager r1;

        r1 := @this: org.apache.batik.bridge.UpdateManager;

        $r0 = new org.apache.batik.bridge.UpdateManager$2;

        specialinvoke $r0.<org.apache.batik.bridge.UpdateManager$2: void <init>(org.apache.batik.bridge.UpdateManager)>(r1);

     label1:
        $r2 = r1.<org.apache.batik.bridge.UpdateManager: org.apache.batik.util.RunnableQueue updateRunnableQueue>;

        virtualinvoke $r2.<org.apache.batik.util.RunnableQueue: void preemptLater(java.lang.Runnable)>($r0);

        $r3 = r1.<org.apache.batik.bridge.UpdateManager: org.apache.batik.util.RunnableQueue updateRunnableQueue>;

        virtualinvoke $r3.<org.apache.batik.util.RunnableQueue: void resumeExecution()>();

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        return;

        catch java.lang.IllegalStateException from label1 to label2 with label3;
    }

    public void dispatchSVGUnLoadEvent()
    {
        java.lang.IllegalStateException $r3;
        org.apache.batik.util.RunnableQueue $r2;
        org.apache.batik.bridge.UpdateManager$3 $r1;
        org.apache.batik.bridge.UpdateManager r0;
        boolean $z0;

        r0 := @this: org.apache.batik.bridge.UpdateManager;

        $z0 = r0.<org.apache.batik.bridge.UpdateManager: boolean started>;

        if $z0 != 0 goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("UpdateManager not started.");

        throw $r3;

     label1:
        $r2 = r0.<org.apache.batik.bridge.UpdateManager: org.apache.batik.util.RunnableQueue updateRunnableQueue>;

        $r1 = new org.apache.batik.bridge.UpdateManager$3;

        specialinvoke $r1.<org.apache.batik.bridge.UpdateManager$3: void <init>(org.apache.batik.bridge.UpdateManager)>(r0);

        virtualinvoke $r2.<org.apache.batik.util.RunnableQueue: void preemptLater(java.lang.Runnable)>($r1);

        virtualinvoke r0.<org.apache.batik.bridge.UpdateManager: void resume()>();

        return;
    }

    public void updateRendering(java.awt.geom.AffineTransform, boolean, java.awt.Shape, int, int)
    {
        java.awt.Shape r2;
        java.awt.geom.AffineTransform r1;
        java.util.ArrayList $r4;
        org.apache.batik.bridge.RepaintManager $r3;
        int i0, i1;
        org.apache.batik.bridge.UpdateManager r0;
        boolean z0;

        r0 := @this: org.apache.batik.bridge.UpdateManager;

        r1 := @parameter0: java.awt.geom.AffineTransform;

        z0 := @parameter1: boolean;

        r2 := @parameter2: java.awt.Shape;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        $r3 = r0.<org.apache.batik.bridge.UpdateManager: org.apache.batik.bridge.RepaintManager repaintManager>;

        virtualinvoke $r3.<org.apache.batik.bridge.RepaintManager: void setupRenderer(java.awt.geom.AffineTransform,boolean,java.awt.Shape,int,int)>(r1, z0, r2, i0, i1);

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>(1);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r2);

        virtualinvoke r0.<org.apache.batik.bridge.UpdateManager: void updateRendering(java.util.List,boolean)>($r4, 0);

        return;
    }

    public void updateRendering(java.awt.geom.AffineTransform, boolean, boolean, java.awt.Shape, int, int)
    {
        java.awt.Shape r2;
        java.awt.geom.AffineTransform r1;
        java.util.ArrayList $r4;
        org.apache.batik.bridge.RepaintManager $r3;
        int i0, i1;
        org.apache.batik.bridge.UpdateManager r0;
        boolean z0, z1;

        r0 := @this: org.apache.batik.bridge.UpdateManager;

        r1 := @parameter0: java.awt.geom.AffineTransform;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        r2 := @parameter3: java.awt.Shape;

        i0 := @parameter4: int;

        i1 := @parameter5: int;

        $r3 = r0.<org.apache.batik.bridge.UpdateManager: org.apache.batik.bridge.RepaintManager repaintManager>;

        virtualinvoke $r3.<org.apache.batik.bridge.RepaintManager: void setupRenderer(java.awt.geom.AffineTransform,boolean,java.awt.Shape,int,int)>(r1, z0, r2, i0, i1);

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>(1);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r2);

        virtualinvoke r0.<org.apache.batik.bridge.UpdateManager: void updateRendering(java.util.List,boolean)>($r4, z1);

        return;
    }

    protected void updateRendering(java.util.List, boolean)
    {
        java.lang.Throwable $r13;
        org.apache.batik.bridge.UpdateManagerEvent $r0, $r9, $r14, $r17;
        java.util.ArrayList $r8;
        org.apache.batik.util.EventDispatcher$Dispatcher $r4, $r12, $r15, $r18;
        boolean z0;
        java.awt.image.BufferedImage $r3, $r11;
        java.util.Collection $r7;
        java.lang.ThreadDeath $r16;
        org.apache.batik.bridge.RepaintManager $r2, $r6, $r10;
        java.util.List r5;
        org.apache.batik.bridge.UpdateManager r1;

        r1 := @this: org.apache.batik.bridge.UpdateManager;

        r5 := @parameter0: java.util.List;

        z0 := @parameter1: boolean;

     label1:
        $r0 = new org.apache.batik.bridge.UpdateManagerEvent;

        $r2 = r1.<org.apache.batik.bridge.UpdateManager: org.apache.batik.bridge.RepaintManager repaintManager>;

        $r3 = virtualinvoke $r2.<org.apache.batik.bridge.RepaintManager: java.awt.image.BufferedImage getOffScreen()>();

        specialinvoke $r0.<org.apache.batik.bridge.UpdateManagerEvent: void <init>(java.lang.Object,java.awt.image.BufferedImage,java.util.List)>(r1, $r3, null);

        $r4 = <org.apache.batik.bridge.UpdateManager: org.apache.batik.util.EventDispatcher$Dispatcher updateStartedDispatcher>;

        virtualinvoke r1.<org.apache.batik.bridge.UpdateManager: void fireEvent(org.apache.batik.util.EventDispatcher$Dispatcher,java.lang.Object)>($r4, $r0);

        $r6 = r1.<org.apache.batik.bridge.UpdateManager: org.apache.batik.bridge.RepaintManager repaintManager>;

        $r7 = virtualinvoke $r6.<org.apache.batik.bridge.RepaintManager: java.util.Collection updateRendering(java.util.Collection)>(r5);

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>(java.util.Collection)>($r7);

        $r9 = new org.apache.batik.bridge.UpdateManagerEvent;

        $r10 = r1.<org.apache.batik.bridge.UpdateManager: org.apache.batik.bridge.RepaintManager repaintManager>;

        $r11 = virtualinvoke $r10.<org.apache.batik.bridge.RepaintManager: java.awt.image.BufferedImage getOffScreen()>();

        specialinvoke $r9.<org.apache.batik.bridge.UpdateManagerEvent: void <init>(java.lang.Object,java.awt.image.BufferedImage,java.util.List,boolean)>(r1, $r11, $r8, z0);

        $r12 = <org.apache.batik.bridge.UpdateManager: org.apache.batik.util.EventDispatcher$Dispatcher updateCompletedDispatcher>;

        virtualinvoke r1.<org.apache.batik.bridge.UpdateManager: void fireEvent(org.apache.batik.util.EventDispatcher$Dispatcher,java.lang.Object)>($r12, $r9);

     label2:
        goto label5;

     label3:
        $r16 := @caughtexception;

        $r17 = new org.apache.batik.bridge.UpdateManagerEvent;

        specialinvoke $r17.<org.apache.batik.bridge.UpdateManagerEvent: void <init>(java.lang.Object,java.awt.image.BufferedImage,java.util.List)>(r1, null, null);

        $r18 = <org.apache.batik.bridge.UpdateManager: org.apache.batik.util.EventDispatcher$Dispatcher updateFailedDispatcher>;

        virtualinvoke r1.<org.apache.batik.bridge.UpdateManager: void fireEvent(org.apache.batik.util.EventDispatcher$Dispatcher,java.lang.Object)>($r18, $r17);

        throw $r16;

     label4:
        $r13 := @caughtexception;

        $r14 = new org.apache.batik.bridge.UpdateManagerEvent;

        specialinvoke $r14.<org.apache.batik.bridge.UpdateManagerEvent: void <init>(java.lang.Object,java.awt.image.BufferedImage,java.util.List)>(r1, null, null);

        $r15 = <org.apache.batik.bridge.UpdateManager: org.apache.batik.util.EventDispatcher$Dispatcher updateFailedDispatcher>;

        virtualinvoke r1.<org.apache.batik.bridge.UpdateManager: void fireEvent(org.apache.batik.util.EventDispatcher$Dispatcher,java.lang.Object)>($r15, $r14);

     label5:
        return;

        catch java.lang.ThreadDeath from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label4;
    }

    protected void repaint()
    {
        java.lang.Throwable $r10;
        long $l0, $l1, $l3, $l5, $l7, $l8;
        byte $b2, $b4, $b9;
        int $i6, $i10, $i11, $i12;
        boolean $z0, $z1, $z2;
        org.apache.batik.gvt.UpdateTracker $r1, $r2, $r4;
        java.util.Iterator $r8;
        org.apache.batik.util.RunnableQueue $r5, $r7;
        java.util.List $r3;
        java.lang.Object $r6, $r9;
        org.apache.batik.bridge.UpdateManager r0;

        r0 := @this: org.apache.batik.bridge.UpdateManager;

        $r1 = r0.<org.apache.batik.bridge.UpdateManager: org.apache.batik.gvt.UpdateTracker updateTracker>;

        $z0 = virtualinvoke $r1.<org.apache.batik.gvt.UpdateTracker: boolean hasChanged()>();

        if $z0 != 0 goto label1;

        r0.<org.apache.batik.bridge.UpdateManager: long outOfDateTime> = 0L;

        return;

     label1:
        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l1 = r0.<org.apache.batik.bridge.UpdateManager: long allResumeTime>;

        $b2 = $l0 cmp $l1;

        $i10 = (int) $b2;

        if $i10 >= 0 goto label2;

        virtualinvoke r0.<org.apache.batik.bridge.UpdateManager: void createRepaintTimer()>();

        return;

     label2:
        $l3 = r0.<org.apache.batik.bridge.UpdateManager: long allResumeTime>;

        $b4 = $l3 cmp 0L;

        $i11 = (int) $b4;

        if $i11 <= 0 goto label3;

        virtualinvoke r0.<org.apache.batik.bridge.UpdateManager: void releaseAllRedrawSuspension()>();

     label3:
        $l5 = r0.<org.apache.batik.bridge.UpdateManager: long outOfDateTime>;

        $l8 = $l0 - $l5;

        $i6 = r0.<org.apache.batik.bridge.UpdateManager: int minRepaintTime>;

        $l7 = (long) $i6;

        $b9 = $l8 cmp $l7;

        $i12 = (int) $b9;

        if $i12 >= 0 goto label8;

        $r5 = r0.<org.apache.batik.bridge.UpdateManager: org.apache.batik.util.RunnableQueue updateRunnableQueue>;

        $r6 = virtualinvoke $r5.<org.apache.batik.util.RunnableQueue: java.lang.Object getIteratorLock()>();

        entermonitor $r6;

     label4:
        $r7 = r0.<org.apache.batik.bridge.UpdateManager: org.apache.batik.util.RunnableQueue updateRunnableQueue>;

        $r8 = virtualinvoke $r7.<org.apache.batik.util.RunnableQueue: java.util.Iterator iterator()>();

        goto label6;

     label5:
        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        $z2 = $r9 instanceof org.apache.batik.bridge.NoRepaintRunnable;

        if $z2 != 0 goto label6;

        exitmonitor $r6;

        return;

     label6:
        $z1 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label5;

        exitmonitor $r6;

        goto label8;

     label7:
        $r10 := @caughtexception;

        exitmonitor $r6;

        throw $r10;

     label8:
        $r2 = r0.<org.apache.batik.bridge.UpdateManager: org.apache.batik.gvt.UpdateTracker updateTracker>;

        $r3 = virtualinvoke $r2.<org.apache.batik.gvt.UpdateTracker: java.util.List getDirtyAreas()>();

        $r4 = r0.<org.apache.batik.bridge.UpdateManager: org.apache.batik.gvt.UpdateTracker updateTracker>;

        virtualinvoke $r4.<org.apache.batik.gvt.UpdateTracker: void clear()>();

        if $r3 == null goto label9;

        virtualinvoke r0.<org.apache.batik.bridge.UpdateManager: void updateRendering(java.util.List,boolean)>($r3, 0);

     label9:
        r0.<org.apache.batik.bridge.UpdateManager: long outOfDateTime> = 0L;

        return;

        catch java.lang.Throwable from label4 to label7 with label7;
    }

    public void forceRepaint()
    {
        java.util.List $r3;
        org.apache.batik.gvt.UpdateTracker $r1, $r2, $r4;
        org.apache.batik.bridge.UpdateManager r0;
        boolean $z0;

        r0 := @this: org.apache.batik.bridge.UpdateManager;

        $r1 = r0.<org.apache.batik.bridge.UpdateManager: org.apache.batik.gvt.UpdateTracker updateTracker>;

        $z0 = virtualinvoke $r1.<org.apache.batik.gvt.UpdateTracker: boolean hasChanged()>();

        if $z0 != 0 goto label1;

        r0.<org.apache.batik.bridge.UpdateManager: long outOfDateTime> = 0L;

        return;

     label1:
        $r2 = r0.<org.apache.batik.bridge.UpdateManager: org.apache.batik.gvt.UpdateTracker updateTracker>;

        $r3 = virtualinvoke $r2.<org.apache.batik.gvt.UpdateTracker: java.util.List getDirtyAreas()>();

        $r4 = r0.<org.apache.batik.bridge.UpdateManager: org.apache.batik.gvt.UpdateTracker updateTracker>;

        virtualinvoke $r4.<org.apache.batik.gvt.UpdateTracker: void clear()>();

        if $r3 == null goto label2;

        virtualinvoke r0.<org.apache.batik.bridge.UpdateManager: void updateRendering(java.util.List,boolean)>($r3, 0);

     label2:
        r0.<org.apache.batik.bridge.UpdateManager: long outOfDateTime> = 0L;

        return;
    }

    void createRepaintTimer()
    {
        long $l0, $l2, $l3, $l5, l6;
        java.util.Timer $r2, $r5, $r7;
        org.apache.batik.bridge.UpdateManager$RepaintTimerTask $r8;
        byte $b1, $b4;
        int $i7, $i8;
        java.util.TimerTask $r1, $r4;
        org.apache.batik.bridge.UpdateManager r0;

        r0 := @this: org.apache.batik.bridge.UpdateManager;

        $r1 = r0.<org.apache.batik.bridge.UpdateManager: java.util.TimerTask repaintTimerTask>;

        if $r1 == null goto label1;

        return;

     label1:
        $l0 = r0.<org.apache.batik.bridge.UpdateManager: long allResumeTime>;

        $b1 = $l0 cmp 0L;

        $i7 = (int) $b1;

        if $i7 >= 0 goto label2;

        return;

     label2:
        $r2 = r0.<org.apache.batik.bridge.UpdateManager: java.util.Timer repaintTriggerTimer>;

        if $r2 != null goto label3;

        $r7 = new java.util.Timer;

        specialinvoke $r7.<java.util.Timer: void <init>(boolean)>(1);

        r0.<org.apache.batik.bridge.UpdateManager: java.util.Timer repaintTriggerTimer> = $r7;

     label3:
        $l2 = r0.<org.apache.batik.bridge.UpdateManager: long allResumeTime>;

        $l3 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l5 = $l2 - $l3;

        l6 = $l5;

        $b4 = $l5 cmp 0L;

        $i8 = (int) $b4;

        if $i8 >= 0 goto label4;

        l6 = 0L;

     label4:
        $r8 = new org.apache.batik.bridge.UpdateManager$RepaintTimerTask;

        specialinvoke $r8.<org.apache.batik.bridge.UpdateManager$RepaintTimerTask: void <init>(org.apache.batik.bridge.UpdateManager,org.apache.batik.bridge.UpdateManager)>(r0, r0);

        r0.<org.apache.batik.bridge.UpdateManager: java.util.TimerTask repaintTimerTask> = $r8;

        $r5 = r0.<org.apache.batik.bridge.UpdateManager: java.util.Timer repaintTriggerTimer>;

        $r4 = r0.<org.apache.batik.bridge.UpdateManager: java.util.TimerTask repaintTimerTask>;

        virtualinvoke $r5.<java.util.Timer: void schedule(java.util.TimerTask,long)>($r4, l6);

        return;
    }

    void resetRepaintTimer()
    {
        long $l0, $l2, $l3, $l5, l6;
        java.util.Timer $r2, $r5, $r7;
        org.apache.batik.bridge.UpdateManager$RepaintTimerTask $r8;
        byte $b1, $b4;
        int $i7, $i8;
        java.util.TimerTask $r1, $r4;
        org.apache.batik.bridge.UpdateManager r0;

        r0 := @this: org.apache.batik.bridge.UpdateManager;

        $r1 = r0.<org.apache.batik.bridge.UpdateManager: java.util.TimerTask repaintTimerTask>;

        if $r1 != null goto label1;

        return;

     label1:
        $l0 = r0.<org.apache.batik.bridge.UpdateManager: long allResumeTime>;

        $b1 = $l0 cmp 0L;

        $i7 = (int) $b1;

        if $i7 >= 0 goto label2;

        return;

     label2:
        $r2 = r0.<org.apache.batik.bridge.UpdateManager: java.util.Timer repaintTriggerTimer>;

        if $r2 != null goto label3;

        $r7 = new java.util.Timer;

        specialinvoke $r7.<java.util.Timer: void <init>(boolean)>(1);

        r0.<org.apache.batik.bridge.UpdateManager: java.util.Timer repaintTriggerTimer> = $r7;

     label3:
        $l2 = r0.<org.apache.batik.bridge.UpdateManager: long allResumeTime>;

        $l3 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l5 = $l2 - $l3;

        l6 = $l5;

        $b4 = $l5 cmp 0L;

        $i8 = (int) $b4;

        if $i8 >= 0 goto label4;

        l6 = 0L;

     label4:
        $r8 = new org.apache.batik.bridge.UpdateManager$RepaintTimerTask;

        specialinvoke $r8.<org.apache.batik.bridge.UpdateManager$RepaintTimerTask: void <init>(org.apache.batik.bridge.UpdateManager,org.apache.batik.bridge.UpdateManager)>(r0, r0);

        r0.<org.apache.batik.bridge.UpdateManager: java.util.TimerTask repaintTimerTask> = $r8;

        $r5 = r0.<org.apache.batik.bridge.UpdateManager: java.util.Timer repaintTriggerTimer>;

        $r4 = r0.<org.apache.batik.bridge.UpdateManager: java.util.TimerTask repaintTimerTask>;

        virtualinvoke $r5.<java.util.Timer: void schedule(java.util.TimerTask,long)>($r4, l6);

        return;
    }

    int addRedrawSuspension(int)
    {
        org.apache.batik.bridge.UpdateManager$SuspensionInfo $r3;
        long $l0, $l2, l3, $l6;
        java.util.List $r2;
        byte $b7;
        int i1, $i4, $i5, $i8, $i9;
        org.apache.batik.bridge.UpdateManager r1;

        r1 := @this: org.apache.batik.bridge.UpdateManager;

        i1 := @parameter0: int;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l2 = (long) i1;

        l3 = $l0 + $l2;

        $r3 = new org.apache.batik.bridge.UpdateManager$SuspensionInfo;

        $i4 = r1.<org.apache.batik.bridge.UpdateManager: int nextSuspensionIndex>;

        $i5 = $i4 + 1;

        r1.<org.apache.batik.bridge.UpdateManager: int nextSuspensionIndex> = $i5;

        specialinvoke $r3.<org.apache.batik.bridge.UpdateManager$SuspensionInfo: void <init>(org.apache.batik.bridge.UpdateManager,int,long)>(r1, $i4, l3);

        $l6 = r1.<org.apache.batik.bridge.UpdateManager: long allResumeTime>;

        $b7 = l3 cmp $l6;

        $i9 = (int) $b7;

        if $i9 <= 0 goto label1;

        r1.<org.apache.batik.bridge.UpdateManager: long allResumeTime> = l3;

        virtualinvoke r1.<org.apache.batik.bridge.UpdateManager: void resetRepaintTimer()>();

     label1:
        $r2 = r1.<org.apache.batik.bridge.UpdateManager: java.util.List suspensionList>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r3);

        $i8 = virtualinvoke $r3.<org.apache.batik.bridge.UpdateManager$SuspensionInfo: int getIndex()>();

        return $i8;
    }

    void releaseAllRedrawSuspension()
    {
        java.util.List $r1;
        org.apache.batik.bridge.UpdateManager r0;

        r0 := @this: org.apache.batik.bridge.UpdateManager;

        $r1 = r0.<org.apache.batik.bridge.UpdateManager: java.util.List suspensionList>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

        r0.<org.apache.batik.bridge.UpdateManager: long allResumeTime> = -1L;

        virtualinvoke r0.<org.apache.batik.bridge.UpdateManager: void resetRepaintTimer()>();

        return;
    }

    boolean releaseRedrawSuspension(int)
    {
        long $l8, $l9, $l11;
        byte $b10;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i12, i13, i14;
        org.apache.batik.bridge.UpdateManager$SuspensionInfo r9, r10;
        java.util.List $r1, $r2, $r3, $r5, $r7, $r8;
        java.lang.Object $r4, $r6;
        org.apache.batik.bridge.UpdateManager r0;

        r0 := @this: org.apache.batik.bridge.UpdateManager;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.batik.bridge.UpdateManager: int nextSuspensionIndex>;

        if i0 <= $i1 goto label1;

        return 0;

     label1:
        $r1 = r0.<org.apache.batik.bridge.UpdateManager: java.util.List suspensionList>;

        $i2 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i2 != 0 goto label2;

        return 1;

     label2:
        i12 = 0;

        $r2 = r0.<org.apache.batik.bridge.UpdateManager: java.util.List suspensionList>;

        $i3 = interfaceinvoke $r2.<java.util.List: int size()>();

        i13 = $i3 - 1;

        goto label6;

     label3:
        $i4 = i12 + i13;

        i14 = $i4 >> 1;

        $r3 = r0.<org.apache.batik.bridge.UpdateManager: java.util.List suspensionList>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i14);

        r9 = (org.apache.batik.bridge.UpdateManager$SuspensionInfo) $r4;

        $i5 = virtualinvoke r9.<org.apache.batik.bridge.UpdateManager$SuspensionInfo: int getIndex()>();

        if $i5 != i0 goto label4;

        i13 = i14;

        i12 = i14;

        goto label6;

     label4:
        if $i5 >= i0 goto label5;

        i12 = i14 + 1;

        goto label6;

     label5:
        i13 = i14 - 1;

     label6:
        if i12 < i13 goto label3;

        $r5 = r0.<org.apache.batik.bridge.UpdateManager: java.util.List suspensionList>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i12);

        r10 = (org.apache.batik.bridge.UpdateManager$SuspensionInfo) $r6;

        $i6 = virtualinvoke r10.<org.apache.batik.bridge.UpdateManager$SuspensionInfo: int getIndex()>();

        if $i6 == i0 goto label7;

        return 1;

     label7:
        $r7 = r0.<org.apache.batik.bridge.UpdateManager: java.util.List suspensionList>;

        interfaceinvoke $r7.<java.util.List: java.lang.Object remove(int)>(i12);

        $r8 = r0.<org.apache.batik.bridge.UpdateManager: java.util.List suspensionList>;

        $i7 = interfaceinvoke $r8.<java.util.List: int size()>();

        if $i7 != 0 goto label8;

        r0.<org.apache.batik.bridge.UpdateManager: long allResumeTime> = -1L;

        virtualinvoke r0.<org.apache.batik.bridge.UpdateManager: void resetRepaintTimer()>();

        goto label9;

     label8:
        $l8 = virtualinvoke r10.<org.apache.batik.bridge.UpdateManager$SuspensionInfo: long getResumeMilli()>();

        $l9 = r0.<org.apache.batik.bridge.UpdateManager: long allResumeTime>;

        $b10 = $l8 cmp $l9;

        if $b10 != 0 goto label9;

        $l11 = virtualinvoke r0.<org.apache.batik.bridge.UpdateManager: long findNewAllResumeTime()>();

        r0.<org.apache.batik.bridge.UpdateManager: long allResumeTime> = $l11;

        virtualinvoke r0.<org.apache.batik.bridge.UpdateManager: void resetRepaintTimer()>();

     label9:
        return 1;
    }

    long findNewAllResumeTime()
    {
        java.util.Iterator $r2;
        org.apache.batik.bridge.UpdateManager$SuspensionInfo r4;
        long $l0, l2;
        java.util.List $r1;
        byte $b1;
        int $i3;
        java.lang.Object $r3;
        org.apache.batik.bridge.UpdateManager r0;
        boolean $z0;

        r0 := @this: org.apache.batik.bridge.UpdateManager;

        l2 = -1L;

        $r1 = r0.<org.apache.batik.bridge.UpdateManager: java.util.List suspensionList>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.batik.bridge.UpdateManager$SuspensionInfo) $r3;

        $l0 = virtualinvoke r4.<org.apache.batik.bridge.UpdateManager$SuspensionInfo: long getResumeMilli()>();

        $b1 = $l0 cmp l2;

        $i3 = (int) $b1;

        if $i3 <= 0 goto label2;

        l2 = $l0;

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return l2;
    }

    public void addUpdateManagerListener(org.apache.batik.bridge.UpdateManagerListener)
    {
        java.util.List $r2;
        org.apache.batik.bridge.UpdateManagerListener r1;
        org.apache.batik.bridge.UpdateManager r0;

        r0 := @this: org.apache.batik.bridge.UpdateManager;

        r1 := @parameter0: org.apache.batik.bridge.UpdateManagerListener;

        $r2 = r0.<org.apache.batik.bridge.UpdateManager: java.util.List listeners>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void removeUpdateManagerListener(org.apache.batik.bridge.UpdateManagerListener)
    {
        java.util.List $r2;
        org.apache.batik.bridge.UpdateManagerListener r1;
        org.apache.batik.bridge.UpdateManager r0;

        r0 := @this: org.apache.batik.bridge.UpdateManager;

        r1 := @parameter0: org.apache.batik.bridge.UpdateManagerListener;

        $r2 = r0.<org.apache.batik.bridge.UpdateManager: java.util.List listeners>;

        interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>(r1);

        return;
    }

    protected void fireEvent(org.apache.batik.util.EventDispatcher$Dispatcher, java.lang.Object)
    {
        java.util.List $r3;
        java.lang.Object r2;
        org.apache.batik.bridge.UpdateManager r1;
        org.apache.batik.util.EventDispatcher$Dispatcher r0;

        r1 := @this: org.apache.batik.bridge.UpdateManager;

        r0 := @parameter0: org.apache.batik.util.EventDispatcher$Dispatcher;

        r2 := @parameter1: java.lang.Object;

        $r3 = r1.<org.apache.batik.bridge.UpdateManager: java.util.List listeners>;

        staticinvoke <org.apache.batik.util.EventDispatcher: void fireEvent(org.apache.batik.util.EventDispatcher$Dispatcher,java.util.List,java.lang.Object,boolean)>(r0, $r3, r2, 0);

        return;
    }

    protected org.apache.batik.util.RunnableQueue$RunHandler createRunHandler()
    {
        org.apache.batik.bridge.UpdateManager$UpdateManagerRunHander $r0;
        org.apache.batik.bridge.UpdateManager r1;

        r1 := @this: org.apache.batik.bridge.UpdateManager;

        $r0 = new org.apache.batik.bridge.UpdateManager$UpdateManagerRunHander;

        specialinvoke $r0.<org.apache.batik.bridge.UpdateManager$UpdateManagerRunHander: void <init>(org.apache.batik.bridge.UpdateManager)>(r1);

        return $r0;
    }

    static void <clinit>()
    {
        java.lang.Throwable $r1;
        org.apache.batik.bridge.UpdateManager$9 $r8;
        org.apache.batik.bridge.UpdateManager$8 $r7;
        org.apache.batik.bridge.UpdateManager$11 $r10;
        java.lang.NumberFormatException $r2;
        org.apache.batik.bridge.UpdateManager$10 $r9;
        int $i0, i1;
        java.lang.SecurityException $r3;
        java.lang.String $r0;
        org.apache.batik.bridge.UpdateManager$5 $r4;
        org.apache.batik.bridge.UpdateManager$7 $r6;
        org.apache.batik.bridge.UpdateManager$6 $r5;

        i1 = 20;

     label01:
        $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("org.apache.batik.min_repaint_time", "20");

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r0);

        i1 = $i0;

     label02:
        goto label11;

     label03:
        goto label10;

     label04:
        $r3 := @caughtexception;

        goto label12;

     label05:
        goto label10;

     label06:
        $r2 := @caughtexception;

        goto label13;

     label07:
        goto label10;

     label08:
        $r1 := @caughtexception;

        goto label14;

     label09:
        throw $r1;

     label10:
        $r4 = new org.apache.batik.bridge.UpdateManager$5;

        specialinvoke $r4.<org.apache.batik.bridge.UpdateManager$5: void <init>()>();

        <org.apache.batik.bridge.UpdateManager: org.apache.batik.util.EventDispatcher$Dispatcher startedDispatcher> = $r4;

        $r5 = new org.apache.batik.bridge.UpdateManager$6;

        specialinvoke $r5.<org.apache.batik.bridge.UpdateManager$6: void <init>()>();

        <org.apache.batik.bridge.UpdateManager: org.apache.batik.util.EventDispatcher$Dispatcher stoppedDispatcher> = $r5;

        $r6 = new org.apache.batik.bridge.UpdateManager$7;

        specialinvoke $r6.<org.apache.batik.bridge.UpdateManager$7: void <init>()>();

        <org.apache.batik.bridge.UpdateManager: org.apache.batik.util.EventDispatcher$Dispatcher suspendedDispatcher> = $r6;

        $r7 = new org.apache.batik.bridge.UpdateManager$8;

        specialinvoke $r7.<org.apache.batik.bridge.UpdateManager$8: void <init>()>();

        <org.apache.batik.bridge.UpdateManager: org.apache.batik.util.EventDispatcher$Dispatcher resumedDispatcher> = $r7;

        $r8 = new org.apache.batik.bridge.UpdateManager$9;

        specialinvoke $r8.<org.apache.batik.bridge.UpdateManager$9: void <init>()>();

        <org.apache.batik.bridge.UpdateManager: org.apache.batik.util.EventDispatcher$Dispatcher updateStartedDispatcher> = $r8;

        $r9 = new org.apache.batik.bridge.UpdateManager$10;

        specialinvoke $r9.<org.apache.batik.bridge.UpdateManager$10: void <init>()>();

        <org.apache.batik.bridge.UpdateManager: org.apache.batik.util.EventDispatcher$Dispatcher updateCompletedDispatcher> = $r9;

        $r10 = new org.apache.batik.bridge.UpdateManager$11;

        specialinvoke $r10.<org.apache.batik.bridge.UpdateManager$11: void <init>()>();

        <org.apache.batik.bridge.UpdateManager: org.apache.batik.util.EventDispatcher$Dispatcher updateFailedDispatcher> = $r10;

        return;

     label11:
        <org.apache.batik.bridge.UpdateManager: int MIN_REPAINT_TIME> = $i0;

        goto label03;

     label12:
        <org.apache.batik.bridge.UpdateManager: int MIN_REPAINT_TIME> = 20;

        goto label05;

     label13:
        <org.apache.batik.bridge.UpdateManager: int MIN_REPAINT_TIME> = 20;

        goto label07;

     label14:
        <org.apache.batik.bridge.UpdateManager: int MIN_REPAINT_TIME> = i1;

        goto label09;

        catch java.lang.SecurityException from label01 to label02 with label04;
        catch java.lang.NumberFormatException from label01 to label02 with label06;
        catch java.lang.Throwable from label01 to label08 with label08;
    }
}
