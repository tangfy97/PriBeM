class bsh.BSHCastExpression extends bsh.SimpleNode
{

    public void <init>(int)
    {
        int i0;
        bsh.BSHCastExpression r0;

        r0 := @this: bsh.BSHCastExpression;

        i0 := @parameter0: int;

        specialinvoke r0.<bsh.SimpleNode: void <init>(int)>(i0);

        return;
    }

    public java.lang.Object eval(bsh.CallStack, bsh.Interpreter) throws bsh.EvalError
    {
        bsh.EvalError $r11;
        bsh.Interpreter r3;
        bsh.UtilEvalError $r10;
        bsh.SimpleNode r7;
        bsh.CallStack r0;
        bsh.BSHType $r4;
        java.lang.Class $r5;
        java.lang.Object $r8, $r9;
        bsh.Node $r2, $r6;
        bsh.BSHCastExpression r1;

        r1 := @this: bsh.BSHCastExpression;

        r0 := @parameter0: bsh.CallStack;

        r3 := @parameter1: bsh.Interpreter;

        virtualinvoke r0.<bsh.CallStack: bsh.NameSpace top()>();

        $r2 = virtualinvoke r1.<bsh.BSHCastExpression: bsh.Node jjtGetChild(int)>(0);

        $r4 = (bsh.BSHType) $r2;

        $r5 = virtualinvoke $r4.<bsh.BSHType: java.lang.Class getType(bsh.CallStack,bsh.Interpreter)>(r0, r3);

        $r6 = virtualinvoke r1.<bsh.BSHCastExpression: bsh.Node jjtGetChild(int)>(1);

        r7 = (bsh.SimpleNode) $r6;

        $r8 = virtualinvoke r7.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>(r0, r3);

        virtualinvoke $r8.<java.lang.Object: java.lang.Class getClass()>();

     label1:
        $r9 = staticinvoke <bsh.Types: java.lang.Object castObject(java.lang.Object,java.lang.Class,int)>($r8, $r5, 0);

     label2:
        return $r9;

     label3:
        $r10 := @caughtexception;

        $r11 = virtualinvoke $r10.<bsh.UtilEvalError: bsh.EvalError toEvalError(bsh.SimpleNode,bsh.CallStack)>(r1, r0);

        throw $r11;

        catch bsh.UtilEvalError from label1 to label2 with label3;
    }
}
