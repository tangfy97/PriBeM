class com.mycila.inject.internal.guava.util.concurrent.SimpleTimeLimiter$1 extends java.lang.Object implements java.lang.reflect.InvocationHandler
{
    final java.lang.Object val$target;
    final long val$timeoutDuration;
    final java.util.concurrent.TimeUnit val$timeoutUnit;
    final java.util.Set val$interruptibleMethods;
    final com.mycila.inject.internal.guava.util.concurrent.SimpleTimeLimiter this$0;

    void <init>(com.mycila.inject.internal.guava.util.concurrent.SimpleTimeLimiter, java.lang.Object, long, java.util.concurrent.TimeUnit, java.util.Set)
    {
        java.util.concurrent.TimeUnit r3;
        com.mycila.inject.internal.guava.util.concurrent.SimpleTimeLimiter$1 r0;
        com.mycila.inject.internal.guava.util.concurrent.SimpleTimeLimiter r1;
        java.util.Set r4;
        java.lang.Object r2;
        long l0;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.SimpleTimeLimiter$1;

        r1 := @parameter0: com.mycila.inject.internal.guava.util.concurrent.SimpleTimeLimiter;

        r2 := @parameter1: java.lang.Object;

        l0 := @parameter2: long;

        r3 := @parameter3: java.util.concurrent.TimeUnit;

        r4 := @parameter4: java.util.Set;

        r0.<com.mycila.inject.internal.guava.util.concurrent.SimpleTimeLimiter$1: com.mycila.inject.internal.guava.util.concurrent.SimpleTimeLimiter this$0> = r1;

        r0.<com.mycila.inject.internal.guava.util.concurrent.SimpleTimeLimiter$1: java.lang.Object val$target> = r2;

        r0.<com.mycila.inject.internal.guava.util.concurrent.SimpleTimeLimiter$1: long val$timeoutDuration> = l0;

        r0.<com.mycila.inject.internal.guava.util.concurrent.SimpleTimeLimiter$1: java.util.concurrent.TimeUnit val$timeoutUnit> = r3;

        r0.<com.mycila.inject.internal.guava.util.concurrent.SimpleTimeLimiter$1: java.util.Set val$interruptibleMethods> = r4;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.Object invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]) throws java.lang.Throwable
    {
        java.lang.Object[] r3;
        java.util.Set $r4;
        com.mycila.inject.internal.guava.util.concurrent.SimpleTimeLimiter $r5;
        long $l0;
        java.util.concurrent.TimeUnit $r6;
        com.mycila.inject.internal.guava.util.concurrent.SimpleTimeLimiter$1 r1;
        com.mycila.inject.internal.guava.util.concurrent.SimpleTimeLimiter$1$1 $r0;
        java.lang.Object $r7, r8;
        java.lang.reflect.Method r2;
        boolean $z0;

        r1 := @this: com.mycila.inject.internal.guava.util.concurrent.SimpleTimeLimiter$1;

        r8 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.reflect.Method;

        r3 := @parameter2: java.lang.Object[];

        $r0 = new com.mycila.inject.internal.guava.util.concurrent.SimpleTimeLimiter$1$1;

        specialinvoke $r0.<com.mycila.inject.internal.guava.util.concurrent.SimpleTimeLimiter$1$1: void <init>(com.mycila.inject.internal.guava.util.concurrent.SimpleTimeLimiter$1,java.lang.reflect.Method,java.lang.Object[])>(r1, r2, r3);

        $r5 = r1.<com.mycila.inject.internal.guava.util.concurrent.SimpleTimeLimiter$1: com.mycila.inject.internal.guava.util.concurrent.SimpleTimeLimiter this$0>;

        $l0 = r1.<com.mycila.inject.internal.guava.util.concurrent.SimpleTimeLimiter$1: long val$timeoutDuration>;

        $r6 = r1.<com.mycila.inject.internal.guava.util.concurrent.SimpleTimeLimiter$1: java.util.concurrent.TimeUnit val$timeoutUnit>;

        $r4 = r1.<com.mycila.inject.internal.guava.util.concurrent.SimpleTimeLimiter$1: java.util.Set val$interruptibleMethods>;

        $z0 = interfaceinvoke $r4.<java.util.Set: boolean contains(java.lang.Object)>(r2);

        $r7 = virtualinvoke $r5.<com.mycila.inject.internal.guava.util.concurrent.SimpleTimeLimiter: java.lang.Object callWithTimeout(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit,boolean)>($r0, $l0, $r6, $z0);

        return $r7;
    }
}
