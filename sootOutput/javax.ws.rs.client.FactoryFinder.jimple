final class javax.ws.rs.client.FactoryFinder extends java.lang.Object
{
    private static final java.util.logging.Logger LOGGER;

    private void <init>()
    {
        javax.ws.rs.client.FactoryFinder r0;

        r0 := @this: javax.ws.rs.client.FactoryFinder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static java.lang.ClassLoader getContextClassLoader()
    {
        java.lang.Object $r1;
        java.lang.ClassLoader $r2;
        javax.ws.rs.client.FactoryFinder$1 $r0;

        $r0 = new javax.ws.rs.client.FactoryFinder$1;

        specialinvoke $r0.<javax.ws.rs.client.FactoryFinder$1: void <init>()>();

        $r1 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0);

        $r2 = (java.lang.ClassLoader) $r1;

        return $r2;
    }

    private static java.lang.Object newInstance(java.lang.String, java.lang.ClassLoader) throws java.lang.ClassNotFoundException
    {
        java.util.logging.Level $r14;
        java.lang.String r1, $r9, $r19, $r22;
        java.util.logging.Logger $r13;
        java.lang.Exception $r2;
        java.lang.ClassNotFoundException $r3, $r10, $r11;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8, $r12, $r15, $r16, $r17, $r20, $r21;
        java.lang.Class $r18, r23;
        java.lang.Object $r24;
        java.lang.ClassLoader r0;

        r1 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.ClassLoader;

     label1:
        if r0 != null goto label2;

        r23 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r1);

        goto label5;

     label2:
        r23 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(r1, 0, r0);

     label3:
        goto label5;

     label4:
        $r11 := @caughtexception;

        $r13 = <javax.ws.rs.client.FactoryFinder: java.util.logging.Logger LOGGER>;

        $r14 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to load provider class ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" using custom classloader ");

        $r18 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r19 = virtualinvoke $r18.<java.lang.Class: java.lang.String getName()>();

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" trying again with current classloader.");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r13.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r14, $r22, $r11);

        r23 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r1);

     label5:
        $r24 = virtualinvoke r23.<java.lang.Class: java.lang.Object newInstance()>();

     label6:
        return $r24;

     label7:
        $r10 := @caughtexception;

        throw $r10;

     label8:
        $r2 := @caughtexception;

        $r3 = new java.lang.ClassNotFoundException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Provider ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" could not be instantiated: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.ClassNotFoundException: void <init>(java.lang.String,java.lang.Throwable)>($r9, $r2);

        throw $r3;

        catch java.lang.ClassNotFoundException from label2 to label3 with label4;
        catch java.lang.ClassNotFoundException from label1 to label6 with label7;
        catch java.lang.Exception from label1 to label6 with label8;
    }

    static java.lang.Object find(java.lang.String, java.lang.String) throws java.lang.ClassNotFoundException
    {
        java.lang.Exception $r44, $r52;
        java.lang.StringBuilder $r1, $r2, $r4, $r7, $r8, $r10, $r11, $r13, $r14, $r21, $r22, $r23, $r24, $r37, $r40, $r41, $r42, $r45, $r48, $r49, $r50, $r53, $r56, $r57, $r58, $r59;
        java.lang.ClassLoader $r0;
        java.lang.String r3, $r5, $r6, $r9, $r12, $r15, $r17, r18, $r25, $r29, $r33, $r34, $r43, $r51, $r60;
        java.util.Properties $r27;
        java.io.InputStreamReader $r32;
        java.io.File $r16;
        java.lang.ClassNotFoundException $r20;
        java.io.BufferedReader $r31;
        java.lang.SecurityException $r36;
        boolean $z0, $z1;
        java.util.logging.Logger $r38, $r46, $r54;
        java.util.logging.Level $r39, $r47, $r55;
        java.io.FileInputStream $r28;
        java.lang.Object $r19, $r26, $r30, $r35;
        java.io.InputStream r61;

        r3 := @parameter0: java.lang.String;

        r18 := @parameter1: java.lang.String;

        $r0 = staticinvoke <javax.ws.rs.client.FactoryFinder: java.lang.ClassLoader getContextClassLoader()>();

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("META-INF/services/");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

     label01:
        if $r0 != null goto label02;

        r61 = staticinvoke <java.lang.ClassLoader: java.io.InputStream getSystemResourceAsStream(java.lang.String)>($r5);

        goto label03;

     label02:
        r61 = virtualinvoke $r0.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>($r5);

     label03:
        if r61 == null goto label05;

        $r31 = new java.io.BufferedReader;

        $r32 = new java.io.InputStreamReader;

        specialinvoke $r32.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>(r61, "UTF-8");

        specialinvoke $r31.<java.io.BufferedReader: void <init>(java.io.Reader)>($r32);

        $r33 = virtualinvoke $r31.<java.io.BufferedReader: java.lang.String readLine()>();

        virtualinvoke $r31.<java.io.BufferedReader: void close()>();

        if $r33 == null goto label05;

        $r34 = "";

        $z1 = virtualinvoke $r34.<java.lang.String: boolean equals(java.lang.Object)>($r33);

        if $z1 != 0 goto label05;

        $r35 = staticinvoke <javax.ws.rs.client.FactoryFinder: java.lang.Object newInstance(java.lang.String,java.lang.ClassLoader)>($r33, $r0);

     label04:
        return $r35;

     label05:
        goto label07;

     label06:
        $r52 := @caughtexception;

        $r54 = <javax.ws.rs.client.FactoryFinder: java.util.logging.Logger LOGGER>;

        $r55 = <java.util.logging.Level: java.util.logging.Level FINER>;

        $r53 = new java.lang.StringBuilder;

        specialinvoke $r53.<java.lang.StringBuilder: void <init>()>();

        $r56 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to load service ");

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from ");

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r54.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r55, $r60, $r52);

     label07:
        $r6 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.home");

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r9 = <java.io.File: java.lang.String separator>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("lib");

        $r12 = <java.io.File: java.lang.String separator>;

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("jaxrs.properties");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r16 = new java.io.File;

        specialinvoke $r16.<java.io.File: void <init>(java.lang.String)>($r15);

        $z0 = virtualinvoke $r16.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label09;

        $r27 = new java.util.Properties;

        specialinvoke $r27.<java.util.Properties: void <init>()>();

        $r28 = new java.io.FileInputStream;

        specialinvoke $r28.<java.io.FileInputStream: void <init>(java.io.File)>($r16);

        virtualinvoke $r27.<java.util.Properties: void load(java.io.InputStream)>($r28);

        $r29 = virtualinvoke $r27.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r3);

        $r30 = staticinvoke <javax.ws.rs.client.FactoryFinder: java.lang.Object newInstance(java.lang.String,java.lang.ClassLoader)>($r29, $r0);

     label08:
        return $r30;

     label09:
        goto label11;

     label10:
        $r44 := @caughtexception;

        $r46 = <javax.ws.rs.client.FactoryFinder: java.util.logging.Logger LOGGER>;

        $r47 = <java.util.logging.Level: java.util.logging.Level FINER>;

        $r45 = new java.lang.StringBuilder;

        specialinvoke $r45.<java.lang.StringBuilder: void <init>()>();

        $r48 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to load service ");

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from $java.home/lib/jaxrs.properties");

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r46.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r47, $r51, $r44);

     label11:
        $r17 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(r3);

        if $r17 == null goto label13;

        $r26 = staticinvoke <javax.ws.rs.client.FactoryFinder: java.lang.Object newInstance(java.lang.String,java.lang.ClassLoader)>($r17, $r0);

     label12:
        return $r26;

     label13:
        goto label15;

     label14:
        $r36 := @caughtexception;

        $r38 = <javax.ws.rs.client.FactoryFinder: java.util.logging.Logger LOGGER>;

        $r39 = <java.util.logging.Level: java.util.logging.Level FINER>;

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r40 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to load service ");

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from a system property");

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r38.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r39, $r43, $r36);

     label15:
        if r18 != null goto label16;

        $r20 = new java.lang.ClassNotFoundException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Provider for ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cannot be found");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.ClassNotFoundException: void <init>(java.lang.String,java.lang.Throwable)>($r25, null);

        throw $r20;

     label16:
        $r19 = staticinvoke <javax.ws.rs.client.FactoryFinder: java.lang.Object newInstance(java.lang.String,java.lang.ClassLoader)>(r18, $r0);

        return $r19;

        catch java.lang.Exception from label01 to label04 with label06;
        catch java.lang.Exception from label07 to label08 with label10;
        catch java.lang.SecurityException from label11 to label12 with label14;
    }

    static java.util.logging.Logger access$000()
    {
        java.util.logging.Logger $r0;

        $r0 = <javax.ws.rs.client.FactoryFinder: java.util.logging.Logger LOGGER>;

        return $r0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        java.util.logging.Logger $r2;

        $r0 = class "Ljavax/ws/rs/client/FactoryFinder;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <javax.ws.rs.client.FactoryFinder: java.util.logging.Logger LOGGER> = $r2;

        return;
    }
}
