public class com.hp.hpl.jena.sparql.syntax.ElementGroup extends com.hp.hpl.jena.sparql.syntax.Element
{
    java.util.List elements;

    public void <init>()
    {
        com.hp.hpl.jena.sparql.syntax.ElementGroup r0;
        java.util.ArrayList $r1;

        r0 := @this: com.hp.hpl.jena.sparql.syntax.ElementGroup;

        specialinvoke r0.<com.hp.hpl.jena.sparql.syntax.Element: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.syntax.ElementGroup: java.util.List elements> = $r1;

        return;
    }

    public void addElement(com.hp.hpl.jena.sparql.syntax.Element)
    {
        com.hp.hpl.jena.sparql.syntax.Element r1;
        java.util.List $r2;
        com.hp.hpl.jena.sparql.syntax.ElementGroup r0;

        r0 := @this: com.hp.hpl.jena.sparql.syntax.ElementGroup;

        r1 := @parameter0: com.hp.hpl.jena.sparql.syntax.Element;

        $r2 = r0.<com.hp.hpl.jena.sparql.syntax.ElementGroup: java.util.List elements>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void addTriplePattern(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.sparql.syntax.ElementGroup r0;
        com.hp.hpl.jena.sparql.syntax.ElementTriplesBlock $r1;
        com.hp.hpl.jena.graph.Triple r2;

        r0 := @this: com.hp.hpl.jena.sparql.syntax.ElementGroup;

        r2 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r1 = specialinvoke r0.<com.hp.hpl.jena.sparql.syntax.ElementGroup: com.hp.hpl.jena.sparql.syntax.ElementTriplesBlock ensureBGP()>();

        virtualinvoke $r1.<com.hp.hpl.jena.sparql.syntax.ElementTriplesBlock: void addTriple(com.hp.hpl.jena.graph.Triple)>(r2);

        return;
    }

    public void addElementFilter(com.hp.hpl.jena.sparql.syntax.ElementFilter)
    {
        com.hp.hpl.jena.sparql.syntax.ElementFilter r1;
        com.hp.hpl.jena.sparql.syntax.ElementGroup r0;

        r0 := @this: com.hp.hpl.jena.sparql.syntax.ElementGroup;

        r1 := @parameter0: com.hp.hpl.jena.sparql.syntax.ElementFilter;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.syntax.ElementGroup: void addElement(com.hp.hpl.jena.sparql.syntax.Element)>(r1);

        return;
    }

    private com.hp.hpl.jena.sparql.syntax.ElementTriplesBlock ensureBGP()
    {
        com.hp.hpl.jena.sparql.syntax.ElementTriplesBlock $r3, $r4, $r5;
        java.util.List $r1;
        com.hp.hpl.jena.sparql.syntax.ElementGroup r0;
        int $i0;
        com.hp.hpl.jena.sparql.syntax.Element $r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.syntax.ElementGroup;

        $r1 = r0.<com.hp.hpl.jena.sparql.syntax.ElementGroup: java.util.List elements>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        $r5 = specialinvoke r0.<com.hp.hpl.jena.sparql.syntax.ElementGroup: com.hp.hpl.jena.sparql.syntax.ElementTriplesBlock pushBGP()>();

        return $r5;

     label1:
        $r2 = specialinvoke r0.<com.hp.hpl.jena.sparql.syntax.ElementGroup: com.hp.hpl.jena.sparql.syntax.Element top()>();

        $z0 = $r2 instanceof com.hp.hpl.jena.sparql.syntax.ElementTriplesBlock;

        if $z0 == 0 goto label2;

        $r4 = (com.hp.hpl.jena.sparql.syntax.ElementTriplesBlock) $r2;

        return $r4;

     label2:
        $r3 = specialinvoke r0.<com.hp.hpl.jena.sparql.syntax.ElementGroup: com.hp.hpl.jena.sparql.syntax.ElementTriplesBlock pushBGP()>();

        return $r3;
    }

    private com.hp.hpl.jena.sparql.syntax.ElementTriplesBlock pushBGP()
    {
        java.util.List $r2;
        com.hp.hpl.jena.sparql.syntax.ElementGroup r1;
        com.hp.hpl.jena.sparql.syntax.ElementTriplesBlock $r0;

        r1 := @this: com.hp.hpl.jena.sparql.syntax.ElementGroup;

        $r0 = new com.hp.hpl.jena.sparql.syntax.ElementTriplesBlock;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.syntax.ElementTriplesBlock: void <init>()>();

        $r2 = r1.<com.hp.hpl.jena.sparql.syntax.ElementGroup: java.util.List elements>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r0);

        return $r0;
    }

    private void setTop(com.hp.hpl.jena.sparql.syntax.Element)
    {
        java.util.List $r1, $r2;
        com.hp.hpl.jena.sparql.syntax.ElementGroup r0;
        int $i0, $i1;
        com.hp.hpl.jena.sparql.syntax.Element r3;

        r0 := @this: com.hp.hpl.jena.sparql.syntax.ElementGroup;

        r3 := @parameter0: com.hp.hpl.jena.sparql.syntax.Element;

        $r2 = r0.<com.hp.hpl.jena.sparql.syntax.ElementGroup: java.util.List elements>;

        $r1 = r0.<com.hp.hpl.jena.sparql.syntax.ElementGroup: java.util.List elements>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        interfaceinvoke $r2.<java.util.List: java.lang.Object set(int,java.lang.Object)>($i1, r3);

        return;
    }

    private com.hp.hpl.jena.sparql.syntax.Element top()
    {
        java.util.List $r1, $r2;
        com.hp.hpl.jena.sparql.syntax.ElementGroup r0;
        int $i0, $i1;
        com.hp.hpl.jena.sparql.syntax.Element $r4;
        java.lang.Object $r3;

        r0 := @this: com.hp.hpl.jena.sparql.syntax.ElementGroup;

        $r2 = r0.<com.hp.hpl.jena.sparql.syntax.ElementGroup: java.util.List elements>;

        $r1 = r0.<com.hp.hpl.jena.sparql.syntax.ElementGroup: java.util.List elements>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i1);

        $r4 = (com.hp.hpl.jena.sparql.syntax.Element) $r3;

        return $r4;
    }

    public int mark()
    {
        int $i0;
        java.util.List $r1;
        com.hp.hpl.jena.sparql.syntax.ElementGroup r0;

        r0 := @this: com.hp.hpl.jena.sparql.syntax.ElementGroup;

        $r1 = r0.<com.hp.hpl.jena.sparql.syntax.ElementGroup: java.util.List elements>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public java.util.List getElements()
    {
        java.util.List $r1;
        com.hp.hpl.jena.sparql.syntax.ElementGroup r0;

        r0 := @this: com.hp.hpl.jena.sparql.syntax.ElementGroup;

        $r1 = r0.<com.hp.hpl.jena.sparql.syntax.ElementGroup: java.util.List elements>;

        return $r1;
    }

    public boolean isEmpty()
    {
        java.util.List $r1;
        com.hp.hpl.jena.sparql.syntax.ElementGroup r0;
        int $i0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.syntax.ElementGroup;

        $r1 = r0.<com.hp.hpl.jena.sparql.syntax.ElementGroup: java.util.List elements>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int hashCode()
    {
        java.util.List $r1;
        com.hp.hpl.jena.sparql.syntax.ElementGroup r0;
        int $i0, i1;

        r0 := @this: com.hp.hpl.jena.sparql.syntax.ElementGroup;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.syntax.ElementGroup: java.util.List getElements()>();

        $i0 = interfaceinvoke $r1.<java.util.List: int hashCode()>();

        i1 = 162 ^ $i0;

        return i1;
    }

    public boolean equalTo(com.hp.hpl.jena.sparql.syntax.Element, com.hp.hpl.jena.sparql.util.NodeIsomorphismMap)
    {
        int $i0, $i1, $i2, i3;
        boolean $z0, $z1;
        java.util.List $r3, $r4, $r5, $r6, $r9;
        com.hp.hpl.jena.sparql.syntax.ElementGroup r1, r2;
        com.hp.hpl.jena.sparql.util.NodeIsomorphismMap r12;
        com.hp.hpl.jena.sparql.syntax.Element r0, r8, r11;
        java.lang.Object $r7, $r10;

        r2 := @this: com.hp.hpl.jena.sparql.syntax.ElementGroup;

        r0 := @parameter0: com.hp.hpl.jena.sparql.syntax.Element;

        r12 := @parameter1: com.hp.hpl.jena.sparql.util.NodeIsomorphismMap;

        if r0 != null goto label1;

        return 0;

     label1:
        $z0 = r0 instanceof com.hp.hpl.jena.sparql.syntax.ElementGroup;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r1 = (com.hp.hpl.jena.sparql.syntax.ElementGroup) r0;

        $r3 = virtualinvoke r2.<com.hp.hpl.jena.sparql.syntax.ElementGroup: java.util.List getElements()>();

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.sparql.syntax.ElementGroup: java.util.List getElements()>();

        $i1 = interfaceinvoke $r4.<java.util.List: int size()>();

        if $i0 == $i1 goto label3;

        return 0;

     label3:
        i3 = 0;

     label4:
        $r5 = virtualinvoke r2.<com.hp.hpl.jena.sparql.syntax.ElementGroup: java.util.List getElements()>();

        $i2 = interfaceinvoke $r5.<java.util.List: int size()>();

        if i3 >= $i2 goto label6;

        $r6 = virtualinvoke r2.<com.hp.hpl.jena.sparql.syntax.ElementGroup: java.util.List getElements()>();

        $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>(i3);

        r8 = (com.hp.hpl.jena.sparql.syntax.Element) $r7;

        $r9 = virtualinvoke r1.<com.hp.hpl.jena.sparql.syntax.ElementGroup: java.util.List getElements()>();

        $r10 = interfaceinvoke $r9.<java.util.List: java.lang.Object get(int)>(i3);

        r11 = (com.hp.hpl.jena.sparql.syntax.Element) $r10;

        $z1 = virtualinvoke r8.<com.hp.hpl.jena.sparql.syntax.Element: boolean equalTo(com.hp.hpl.jena.sparql.syntax.Element,com.hp.hpl.jena.sparql.util.NodeIsomorphismMap)>(r11, r12);

        if $z1 != 0 goto label5;

        return 0;

     label5:
        i3 = i3 + 1;

        goto label4;

     label6:
        return 1;
    }

    public void visit(com.hp.hpl.jena.sparql.syntax.ElementVisitor)
    {
        com.hp.hpl.jena.sparql.syntax.ElementVisitor r0;
        com.hp.hpl.jena.sparql.syntax.ElementGroup r1;

        r1 := @this: com.hp.hpl.jena.sparql.syntax.ElementGroup;

        r0 := @parameter0: com.hp.hpl.jena.sparql.syntax.ElementVisitor;

        interfaceinvoke r0.<com.hp.hpl.jena.sparql.syntax.ElementVisitor: void visit(com.hp.hpl.jena.sparql.syntax.ElementGroup)>(r1);

        return;
    }
}
