class org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token extends java.lang.Object
{
    private final org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type type;
    private final java.lang.String data;

    void <init>(org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type)
    {
        org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token r0;
        org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type r1;

        r0 := @this: org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token;

        r1 := @parameter0: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type;

        specialinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token: void <init>(org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type,java.lang.String)>(r1, null);

        return;
    }

    void <init>(org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type, java.lang.String)
    {
        org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token r0;
        java.lang.String r2;
        org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type r1;

        r0 := @this: org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token;

        r1 := @parameter0: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type type> = r1;

        r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token: java.lang.String data> = r2;

        return;
    }

    org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type getType()
    {
        org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token r0;
        org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type $r1;

        r0 := @this: org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token;

        $r1 = r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type type>;

        return $r1;
    }

    java.lang.String getData()
    {
        org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token r0;
        java.lang.String $r1;

        r0 := @this: org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token;

        $r1 = r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token: java.lang.String data>;

        return $r1;
    }

    public java.lang.String toString()
    {
        org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token r2;
        org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type $r3;
        java.lang.StringBuilder $r0, $r1, $r4, $r5, $r7, $r8;
        java.lang.String $r6, $r9;

        r2 := @this: org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r3 = r2.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type type>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r6 = r2.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$Token: java.lang.String data>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }
}
