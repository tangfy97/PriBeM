public class org.apache.batik.bridge.svg12.SVG12URIResolver extends org.apache.batik.bridge.URIResolver
{

    public void <init>(org.w3c.dom.svg.SVGDocument, org.apache.batik.bridge.DocumentLoader)
    {
        org.apache.batik.bridge.DocumentLoader r2;
        org.w3c.dom.svg.SVGDocument r1;
        org.apache.batik.bridge.svg12.SVG12URIResolver r0;

        r0 := @this: org.apache.batik.bridge.svg12.SVG12URIResolver;

        r1 := @parameter0: org.w3c.dom.svg.SVGDocument;

        r2 := @parameter1: org.apache.batik.bridge.DocumentLoader;

        specialinvoke r0.<org.apache.batik.bridge.URIResolver: void <init>(org.w3c.dom.svg.SVGDocument,org.apache.batik.bridge.DocumentLoader)>(r1, r2);

        return;
    }

    protected java.lang.String getRefererBaseURI(org.w3c.dom.Element)
    {
        org.w3c.dom.Element r0, $r2;
        org.apache.batik.dom.AbstractNode r1;
        java.lang.String $r3;
        org.apache.batik.bridge.svg12.SVG12URIResolver r4;

        r4 := @this: org.apache.batik.bridge.svg12.SVG12URIResolver;

        r0 := @parameter0: org.w3c.dom.Element;

        r1 = (org.apache.batik.dom.AbstractNode) r0;

        $r2 = virtualinvoke r1.<org.apache.batik.dom.AbstractNode: org.w3c.dom.Element getXblBoundElement()>();

        if $r2 == null goto label1;

        return null;

     label1:
        $r3 = virtualinvoke r1.<org.apache.batik.dom.AbstractNode: java.lang.String getBaseURI()>();

        return $r3;
    }

    protected org.w3c.dom.Node getNodeByFragment(java.lang.String, org.w3c.dom.Element)
    {
        org.w3c.dom.Document $r12;
        org.w3c.dom.Node $r6, $r11;
        int $i0, i1;
        java.lang.String r5;
        org.apache.batik.dom.xbl.XBLShadowTreeElement r8;
        org.w3c.dom.NodeList $r10;
        org.apache.batik.dom.xbl.NodeXBL r1, r3;
        org.w3c.dom.Element r0, $r2, $r7, $r9, $r13;
        org.apache.batik.bridge.svg12.SVG12URIResolver r4;

        r4 := @this: org.apache.batik.bridge.svg12.SVG12URIResolver;

        r5 := @parameter0: java.lang.String;

        r0 := @parameter1: org.w3c.dom.Element;

        r1 = (org.apache.batik.dom.xbl.NodeXBL) r0;

        $r2 = interfaceinvoke r1.<org.apache.batik.dom.xbl.NodeXBL: org.w3c.dom.Element getXblBoundElement()>();

        r3 = (org.apache.batik.dom.xbl.NodeXBL) $r2;

        if r3 == null goto label5;

        $r7 = interfaceinvoke r3.<org.apache.batik.dom.xbl.NodeXBL: org.w3c.dom.Element getXblShadowTree()>();

        r8 = (org.apache.batik.dom.xbl.XBLShadowTreeElement) $r7;

        $r9 = interfaceinvoke r8.<org.apache.batik.dom.xbl.XBLShadowTreeElement: org.w3c.dom.Element getElementById(java.lang.String)>(r5);

        if $r9 == null goto label1;

        return $r9;

     label1:
        $r10 = interfaceinvoke r1.<org.apache.batik.dom.xbl.NodeXBL: org.w3c.dom.NodeList getXblDefinitions()>();

        i1 = 0;

        goto label4;

     label2:
        $r11 = interfaceinvoke $r10.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i1);

        $r12 = interfaceinvoke $r11.<org.w3c.dom.Node: org.w3c.dom.Document getOwnerDocument()>();

        $r13 = interfaceinvoke $r12.<org.w3c.dom.Document: org.w3c.dom.Element getElementById(java.lang.String)>(r5);

        if $r13 == null goto label3;

        return $r13;

     label3:
        i1 = i1 + 1;

     label4:
        $i0 = interfaceinvoke $r10.<org.w3c.dom.NodeList: int getLength()>();

        if i1 < $i0 goto label2;

     label5:
        $r6 = specialinvoke r4.<org.apache.batik.bridge.URIResolver: org.w3c.dom.Node getNodeByFragment(java.lang.String,org.w3c.dom.Element)>(r5, r0);

        return $r6;
    }
}
