public class org.apache.log4j.PropertyConfigurator extends java.lang.Object implements org.apache.log4j.spi.Configurator
{
    protected java.util.Hashtable registry;
    private org.apache.log4j.spi.LoggerRepository repository;
    protected org.apache.log4j.spi.LoggerFactory loggerFactory;
    static final java.lang.String CATEGORY_PREFIX;
    static final java.lang.String LOGGER_PREFIX;
    static final java.lang.String FACTORY_PREFIX;
    static final java.lang.String ADDITIVITY_PREFIX;
    static final java.lang.String ROOT_CATEGORY_PREFIX;
    static final java.lang.String ROOT_LOGGER_PREFIX;
    static final java.lang.String APPENDER_PREFIX;
    static final java.lang.String RENDERER_PREFIX;
    static final java.lang.String THRESHOLD_PREFIX;
    private static final java.lang.String THROWABLE_RENDERER_PREFIX;
    private static final java.lang.String LOGGER_REF;
    private static final java.lang.String ROOT_REF;
    private static final java.lang.String APPENDER_REF_TAG;
    public static final java.lang.String LOGGER_FACTORY_KEY;
    private static final java.lang.String RESET_KEY;
    private static final java.lang.String INTERNAL_ROOT_NAME;
    static java.lang.Class class$org$apache$log4j$spi$LoggerFactory;
    static java.lang.Class class$org$apache$log4j$spi$ThrowableRenderer;
    static java.lang.Class class$org$apache$log4j$Appender;
    static java.lang.Class class$org$apache$log4j$Layout;
    static java.lang.Class class$org$apache$log4j$spi$ErrorHandler;
    static java.lang.Class class$org$apache$log4j$spi$Filter;

    public void <init>()
    {
        org.apache.log4j.PropertyConfigurator r0;
        org.apache.log4j.DefaultCategoryFactory $r2;
        java.util.Hashtable $r1;

        r0 := @this: org.apache.log4j.PropertyConfigurator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.Hashtable;

        specialinvoke $r1.<java.util.Hashtable: void <init>(int)>(11);

        r0.<org.apache.log4j.PropertyConfigurator: java.util.Hashtable registry> = $r1;

        $r2 = new org.apache.log4j.DefaultCategoryFactory;

        specialinvoke $r2.<org.apache.log4j.DefaultCategoryFactory: void <init>()>();

        r0.<org.apache.log4j.PropertyConfigurator: org.apache.log4j.spi.LoggerFactory loggerFactory> = $r2;

        return;
    }

    public void doConfigure(java.lang.String, org.apache.log4j.spi.LoggerRepository)
    {
        java.lang.Throwable $r5, $r8, $r9, $r14;
        org.apache.log4j.PropertyConfigurator r3;
        java.io.InterruptedIOException $r6, $r10, $r15;
        java.lang.StringBuffer $r18, $r19, $r20, $r21, $r23, $r24, $r25, $r26;
        java.lang.Thread $r7, $r11, $r13, $r16;
        java.lang.String r2, $r22, $r27;
        boolean $z0, $z1;
        java.util.Properties $r0;
        java.io.FileInputStream $r1, r17;
        java.lang.Exception $r12;
        org.apache.log4j.spi.LoggerRepository r4;

        r3 := @this: org.apache.log4j.PropertyConfigurator;

        r2 := @parameter0: java.lang.String;

        r4 := @parameter1: org.apache.log4j.spi.LoggerRepository;

        $r0 = new java.util.Properties;

        specialinvoke $r0.<java.util.Properties: void <init>()>();

        r17 = null;

     label01:
        $r1 = new java.io.FileInputStream;

        specialinvoke $r1.<java.io.FileInputStream: void <init>(java.lang.String)>(r2);

        r17 = $r1;

        virtualinvoke $r0.<java.util.Properties: void load(java.io.InputStream)>($r1);

        virtualinvoke $r1.<java.io.FileInputStream: void close()>();

     label02:
        if $r1 == null goto label23;

     label03:
        virtualinvoke $r1.<java.io.FileInputStream: void close()>();

     label04:
        goto label23;

     label05:
        $r15 := @caughtexception;

        $r16 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r16.<java.lang.Thread: void interrupt()>();

        goto label23;

     label06:
        $r14 := @caughtexception;

        goto label23;

     label07:
        $r12 := @caughtexception;

        $z0 = $r12 instanceof java.io.InterruptedIOException;

        if $z0 != 0 goto label08;

        $z1 = $r12 instanceof java.lang.InterruptedException;

        if $z1 == 0 goto label09;

     label08:
        $r13 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r13.<java.lang.Thread: void interrupt()>();

     label09:
        $r18 = new java.lang.StringBuffer;

        specialinvoke $r18.<java.lang.StringBuffer: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Could not read configuration file [");

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("].");

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)>($r22, $r12);

        $r23 = new java.lang.StringBuffer;

        specialinvoke $r23.<java.lang.StringBuffer: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Ignoring configuration file [");

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("].");

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String)>($r27);

     label10:
        if r17 == null goto label15;

     label11:
        virtualinvoke r17.<java.io.FileInputStream: void close()>();

     label12:
        goto label15;

     label13:
        $r10 := @caughtexception;

        $r11 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r11.<java.lang.Thread: void interrupt()>();

        goto label15;

     label14:
        $r9 := @caughtexception;

     label15:
        return;

     label16:
        $r8 := @caughtexception;

     label17:
        if r17 == null goto label22;

     label18:
        virtualinvoke r17.<java.io.FileInputStream: void close()>();

     label19:
        goto label22;

     label20:
        $r6 := @caughtexception;

        $r7 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r7.<java.lang.Thread: void interrupt()>();

        goto label22;

     label21:
        $r5 := @caughtexception;

     label22:
        throw $r8;

     label23:
        virtualinvoke r3.<org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>($r0, r4);

        return;

        catch java.io.InterruptedIOException from label03 to label04 with label05;
        catch java.lang.Throwable from label03 to label04 with label06;
        catch java.lang.Exception from label01 to label02 with label07;
        catch java.io.InterruptedIOException from label11 to label12 with label13;
        catch java.lang.Throwable from label11 to label12 with label14;
        catch java.lang.Throwable from label01 to label02 with label16;
        catch java.lang.Throwable from label07 to label10 with label16;
        catch java.io.InterruptedIOException from label18 to label19 with label20;
        catch java.lang.Throwable from label18 to label19 with label21;
        catch java.lang.Throwable from label16 to label17 with label16;
    }

    public static void configure(java.lang.String)
    {
        org.apache.log4j.PropertyConfigurator $r0;
        org.apache.log4j.spi.LoggerRepository $r2;
        java.lang.String r1;

        r1 := @parameter0: java.lang.String;

        $r0 = new org.apache.log4j.PropertyConfigurator;

        specialinvoke $r0.<org.apache.log4j.PropertyConfigurator: void <init>()>();

        $r2 = staticinvoke <org.apache.log4j.LogManager: org.apache.log4j.spi.LoggerRepository getLoggerRepository()>();

        virtualinvoke $r0.<org.apache.log4j.PropertyConfigurator: void doConfigure(java.lang.String,org.apache.log4j.spi.LoggerRepository)>(r1, $r2);

        return;
    }

    public static void configure(java.net.URL)
    {
        org.apache.log4j.PropertyConfigurator $r0;
        org.apache.log4j.spi.LoggerRepository $r2;
        java.net.URL r1;

        r1 := @parameter0: java.net.URL;

        $r0 = new org.apache.log4j.PropertyConfigurator;

        specialinvoke $r0.<org.apache.log4j.PropertyConfigurator: void <init>()>();

        $r2 = staticinvoke <org.apache.log4j.LogManager: org.apache.log4j.spi.LoggerRepository getLoggerRepository()>();

        virtualinvoke $r0.<org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)>(r1, $r2);

        return;
    }

    public static void configure(java.util.Properties)
    {
        org.apache.log4j.PropertyConfigurator $r0;
        org.apache.log4j.spi.LoggerRepository $r2;
        java.util.Properties r1;

        r1 := @parameter0: java.util.Properties;

        $r0 = new org.apache.log4j.PropertyConfigurator;

        specialinvoke $r0.<org.apache.log4j.PropertyConfigurator: void <init>()>();

        $r2 = staticinvoke <org.apache.log4j.LogManager: org.apache.log4j.spi.LoggerRepository getLoggerRepository()>();

        virtualinvoke $r0.<org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>(r1, $r2);

        return;
    }

    public static void configureAndWatch(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.apache.log4j.PropertyConfigurator: void configureAndWatch(java.lang.String,long)>(r0, 60000L);

        return;
    }

    public static void configureAndWatch(java.lang.String, long)
    {
        long l0;
        java.lang.String r1;
        org.apache.log4j.PropertyWatchdog $r0;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        $r0 = new org.apache.log4j.PropertyWatchdog;

        specialinvoke $r0.<org.apache.log4j.PropertyWatchdog: void <init>(java.lang.String)>(r1);

        virtualinvoke $r0.<org.apache.log4j.helpers.FileWatchdog: void setDelay(long)>(l0);

        virtualinvoke $r0.<java.lang.Thread: void start()>();

        return;
    }

    public void doConfigure(java.util.Properties, org.apache.log4j.spi.LoggerRepository)
    {
        org.apache.log4j.PropertyConfigurator r0;
        java.lang.StringBuffer $r8, $r9, $r11, $r12;
        org.apache.log4j.Level $r6, $r7, $r10;
        java.lang.String $r3, $r4, $r13, $r14, r15, $r16;
        java.util.Hashtable $r5;
        boolean $z0, $z1;
        java.util.Properties r2;
        org.apache.log4j.spi.LoggerRepository r1;

        r0 := @this: org.apache.log4j.PropertyConfigurator;

        r2 := @parameter0: java.util.Properties;

        r1 := @parameter1: org.apache.log4j.spi.LoggerRepository;

        r0.<org.apache.log4j.PropertyConfigurator: org.apache.log4j.spi.LoggerRepository repository> = r1;

        $r3 = virtualinvoke r2.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("log4j.debug");

        r15 = $r3;

        if $r3 != null goto label1;

        $r14 = virtualinvoke r2.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("log4j.configDebug");

        r15 = $r14;

        if $r14 == null goto label1;

        staticinvoke <org.apache.log4j.helpers.LogLog: void warn(java.lang.String)>("[log4j.configDebug] is deprecated. Use [log4j.debug] instead.");

     label1:
        if r15 == null goto label2;

        $z1 = staticinvoke <org.apache.log4j.helpers.OptionConverter: boolean toBoolean(java.lang.String,boolean)>(r15, 1);

        staticinvoke <org.apache.log4j.helpers.LogLog: void setInternalDebugging(boolean)>($z1);

     label2:
        $r4 = virtualinvoke r2.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("log4j.reset");

        if $r4 == null goto label3;

        $z0 = staticinvoke <org.apache.log4j.helpers.OptionConverter: boolean toBoolean(java.lang.String,boolean)>($r4, 0);

        if $z0 == 0 goto label3;

        interfaceinvoke r1.<org.apache.log4j.spi.LoggerRepository: void resetConfiguration()>();

     label3:
        $r16 = staticinvoke <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>("log4j.threshold", r2);

        if $r16 == null goto label4;

        $r6 = <org.apache.log4j.Level: org.apache.log4j.Level ALL>;

        $r7 = staticinvoke <org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>($r16, $r6);

        interfaceinvoke r1.<org.apache.log4j.spi.LoggerRepository: void setThreshold(org.apache.log4j.Level)>($r7);

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Hierarchy threshold set to [");

        $r10 = interfaceinvoke r1.<org.apache.log4j.spi.LoggerRepository: org.apache.log4j.Level getThreshold()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("].");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r13);

     label4:
        virtualinvoke r0.<org.apache.log4j.PropertyConfigurator: void configureRootCategory(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>(r2, r1);

        virtualinvoke r0.<org.apache.log4j.PropertyConfigurator: void configureLoggerFactory(java.util.Properties)>(r2);

        virtualinvoke r0.<org.apache.log4j.PropertyConfigurator: void parseCatsAndRenderers(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>(r2, r1);

        staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>("Finished configuring.");

        $r5 = r0.<org.apache.log4j.PropertyConfigurator: java.util.Hashtable registry>;

        virtualinvoke $r5.<java.util.Hashtable: void clear()>();

        return;
    }

    public void doConfigure(java.net.URL, org.apache.log4j.spi.LoggerRepository)
    {
        java.net.URL r3;
        java.lang.Thread $r13, $r18, $r20, $r24;
        boolean $z0, $z1;
        java.lang.Exception $r19;
        java.lang.Throwable $r14;
        org.apache.log4j.PropertyConfigurator r8;
        java.io.InterruptedIOException $r12, $r17, $r23;
        java.lang.StringBuffer $r1, $r2, $r4, $r26, $r27, $r28, $r29, $r31, $r32, $r33, $r34;
        java.net.URLConnection $r6;
        java.lang.String $r5, $r30, $r35;
        java.util.Properties $r0;
        java.io.IOException $r11, $r16, $r22;
        java.lang.RuntimeException $r10, $r15, $r21;
        org.apache.log4j.spi.LoggerRepository r9;
        java.io.InputStream $r7, r25;

        r8 := @this: org.apache.log4j.PropertyConfigurator;

        r3 := @parameter0: java.net.URL;

        r9 := @parameter1: org.apache.log4j.spi.LoggerRepository;

        $r0 = new java.util.Properties;

        specialinvoke $r0.<java.util.Properties: void <init>()>();

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Reading configuration from URL ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r5);

        r25 = null;

     label01:
        $r6 = virtualinvoke r3.<java.net.URL: java.net.URLConnection openConnection()>();

        virtualinvoke $r6.<java.net.URLConnection: void setUseCaches(boolean)>(0);

        $r7 = virtualinvoke $r6.<java.net.URLConnection: java.io.InputStream getInputStream()>();

        r25 = $r7;

        virtualinvoke $r0.<java.util.Properties: void load(java.io.InputStream)>($r7);

     label02:
        if $r7 == null goto label26;

     label03:
        virtualinvoke $r7.<java.io.InputStream: void close()>();

     label04:
        goto label26;

     label05:
        $r23 := @caughtexception;

        $r24 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r24.<java.lang.Thread: void interrupt()>();

        goto label26;

     label06:
        $r22 := @caughtexception;

        goto label26;

     label07:
        $r21 := @caughtexception;

        goto label26;

     label08:
        $r19 := @caughtexception;

        $z0 = $r19 instanceof java.io.InterruptedIOException;

        if $z0 != 0 goto label09;

        $z1 = $r19 instanceof java.lang.InterruptedException;

        if $z1 == 0 goto label10;

     label09:
        $r20 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r20.<java.lang.Thread: void interrupt()>();

     label10:
        $r26 = new java.lang.StringBuffer;

        specialinvoke $r26.<java.lang.StringBuffer: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Could not read configuration file from URL [");

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r3);

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("].");

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)>($r30, $r19);

        $r31 = new java.lang.StringBuffer;

        specialinvoke $r31.<java.lang.StringBuffer: void <init>()>();

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Ignoring configuration file [");

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r3);

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("].");

        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String)>($r35);

     label11:
        if r25 == null goto label17;

     label12:
        virtualinvoke r25.<java.io.InputStream: void close()>();

     label13:
        goto label17;

     label14:
        $r17 := @caughtexception;

        $r18 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r18.<java.lang.Thread: void interrupt()>();

        goto label17;

     label15:
        $r16 := @caughtexception;

        goto label17;

     label16:
        $r15 := @caughtexception;

     label17:
        return;

     label18:
        $r14 := @caughtexception;

     label19:
        if r25 == null goto label25;

     label20:
        virtualinvoke r25.<java.io.InputStream: void close()>();

     label21:
        goto label25;

     label22:
        $r12 := @caughtexception;

        $r13 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r13.<java.lang.Thread: void interrupt()>();

        goto label25;

     label23:
        $r11 := @caughtexception;

        goto label25;

     label24:
        $r10 := @caughtexception;

     label25:
        throw $r14;

     label26:
        virtualinvoke r8.<org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>($r0, r9);

        return;

        catch java.io.InterruptedIOException from label03 to label04 with label05;
        catch java.io.IOException from label03 to label04 with label06;
        catch java.lang.RuntimeException from label03 to label04 with label07;
        catch java.lang.Exception from label01 to label02 with label08;
        catch java.io.InterruptedIOException from label12 to label13 with label14;
        catch java.io.IOException from label12 to label13 with label15;
        catch java.lang.RuntimeException from label12 to label13 with label16;
        catch java.lang.Throwable from label01 to label02 with label18;
        catch java.lang.Throwable from label08 to label11 with label18;
        catch java.io.InterruptedIOException from label20 to label21 with label22;
        catch java.io.IOException from label20 to label21 with label23;
        catch java.lang.RuntimeException from label20 to label21 with label24;
        catch java.lang.Throwable from label18 to label19 with label18;
    }

    protected void configureLoggerFactory(java.util.Properties)
    {
        java.util.Properties r0;
        org.apache.log4j.PropertyConfigurator r7;
        java.lang.StringBuffer $r2, $r3, $r4, $r5;
        org.apache.log4j.spi.LoggerFactory $r9, $r11, $r12;
        java.lang.Class $r8, $r13;
        java.lang.Object $r10;
        java.lang.String $r1, $r6;

        r7 := @this: org.apache.log4j.PropertyConfigurator;

        r0 := @parameter0: java.util.Properties;

        $r1 = staticinvoke <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>("log4j.loggerFactory", r0);

        if $r1 == null goto label3;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Setting category factory to [");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("].");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r6);

        $r8 = <org.apache.log4j.PropertyConfigurator: java.lang.Class class$org$apache$log4j$spi$LoggerFactory>;

        if $r8 != null goto label1;

        $r13 = staticinvoke <org.apache.log4j.PropertyConfigurator: java.lang.Class class$(java.lang.String)>("org.apache.log4j.spi.LoggerFactory");

        <org.apache.log4j.PropertyConfigurator: java.lang.Class class$org$apache$log4j$spi$LoggerFactory> = $r13;

        goto label2;

     label1:
        $r13 = <org.apache.log4j.PropertyConfigurator: java.lang.Class class$org$apache$log4j$spi$LoggerFactory>;

     label2:
        $r9 = r7.<org.apache.log4j.PropertyConfigurator: org.apache.log4j.spi.LoggerFactory loggerFactory>;

        $r10 = staticinvoke <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)>($r1, $r13, $r9);

        $r11 = (org.apache.log4j.spi.LoggerFactory) $r10;

        r7.<org.apache.log4j.PropertyConfigurator: org.apache.log4j.spi.LoggerFactory loggerFactory> = $r11;

        $r12 = r7.<org.apache.log4j.PropertyConfigurator: org.apache.log4j.spi.LoggerFactory loggerFactory>;

        staticinvoke <org.apache.log4j.config.PropertySetter: void setProperties(java.lang.Object,java.util.Properties,java.lang.String)>($r12, r0, "log4j.factory.");

     label3:
        return;
    }

    void configureRootCategory(java.util.Properties, org.apache.log4j.spi.LoggerRepository)
    {
        java.lang.Throwable $r5;
        java.util.Properties r0;
        org.apache.log4j.PropertyConfigurator r4;
        org.apache.log4j.Logger $r3;
        org.apache.log4j.spi.LoggerRepository r2;
        java.lang.String $r1, r6, r7;

        r4 := @this: org.apache.log4j.PropertyConfigurator;

        r0 := @parameter0: java.util.Properties;

        r2 := @parameter1: org.apache.log4j.spi.LoggerRepository;

        r6 = "log4j.rootLogger";

        $r1 = staticinvoke <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>("log4j.rootLogger", r0);

        r7 = $r1;

        if $r1 != null goto label1;

        r7 = staticinvoke <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>("log4j.rootCategory", r0);

        r6 = "log4j.rootCategory";

     label1:
        if r7 != null goto label2;

        staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>("Could not find root logger information. Is this OK?");

        goto label7;

     label2:
        $r3 = interfaceinvoke r2.<org.apache.log4j.spi.LoggerRepository: org.apache.log4j.Logger getRootLogger()>();

        entermonitor $r3;

     label3:
        virtualinvoke r4.<org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)>(r0, $r3, r6, "root", r7);

        exitmonitor $r3;

     label4:
        goto label7;

     label5:
        $r5 := @caughtexception;

        exitmonitor $r3;

     label6:
        throw $r5;

     label7:
        return;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    protected void parseCatsAndRenderers(java.util.Properties, org.apache.log4j.spi.LoggerRepository)
    {
        java.util.Enumeration $r1;
        org.apache.log4j.Logger $r21;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        org.apache.log4j.config.PropertySetter $r10;
        org.apache.log4j.spi.LoggerFactory $r20;
        java.lang.Throwable $r17;
        org.apache.log4j.spi.ThrowableRendererSupport $r11;
        org.apache.log4j.PropertyConfigurator r5;
        org.apache.log4j.spi.ThrowableRenderer $r12;
        int $i0, $i1, $i2;
        java.lang.String r3, $r6, $r7, $r13, $r14, $r15, r18, $r19;
        java.util.Properties r0;
        org.apache.log4j.spi.RendererSupport $r16;
        java.lang.Object $r2, $r9;
        org.apache.log4j.spi.LoggerRepository r4;
        java.lang.Class $r8, $r22;

        r5 := @this: org.apache.log4j.PropertyConfigurator;

        r0 := @parameter0: java.util.Properties;

        r4 := @parameter1: org.apache.log4j.spi.LoggerRepository;

        $r1 = virtualinvoke r0.<java.util.Properties: java.util.Enumeration propertyNames()>();

     label01:
        $z0 = interfaceinvoke $r1.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label17;

        $r2 = interfaceinvoke $r1.<java.util.Enumeration: java.lang.Object nextElement()>();

        r3 = (java.lang.String) $r2;

        $z1 = virtualinvoke r3.<java.lang.String: boolean startsWith(java.lang.String)>("log4j.category.");

        if $z1 != 0 goto label02;

        $z4 = virtualinvoke r3.<java.lang.String: boolean startsWith(java.lang.String)>("log4j.logger.");

        if $z4 == 0 goto label10;

     label02:
        r18 = null;

        $z2 = virtualinvoke r3.<java.lang.String: boolean startsWith(java.lang.String)>("log4j.category.");

        if $z2 == 0 goto label03;

        $r7 = "log4j.category.";

        $i1 = virtualinvoke $r7.<java.lang.String: int length()>();

        r18 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int)>($i1);

        goto label04;

     label03:
        $z3 = virtualinvoke r3.<java.lang.String: boolean startsWith(java.lang.String)>("log4j.logger.");

        if $z3 == 0 goto label04;

        $r6 = "log4j.logger.";

        $i0 = virtualinvoke $r6.<java.lang.String: int length()>();

        r18 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int)>($i0);

     label04:
        $r19 = staticinvoke <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>(r3, r0);

        $r20 = r5.<org.apache.log4j.PropertyConfigurator: org.apache.log4j.spi.LoggerFactory loggerFactory>;

        $r21 = interfaceinvoke r4.<org.apache.log4j.spi.LoggerRepository: org.apache.log4j.Logger getLogger(java.lang.String,org.apache.log4j.spi.LoggerFactory)>(r18, $r20);

        entermonitor $r21;

     label05:
        virtualinvoke r5.<org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)>(r0, $r21, r3, r18, $r19);

        virtualinvoke r5.<org.apache.log4j.PropertyConfigurator: void parseAdditivityForLogger(java.util.Properties,org.apache.log4j.Logger,java.lang.String)>(r0, $r21, r18);

        exitmonitor $r21;

     label06:
        goto label09;

     label07:
        $r17 := @caughtexception;

        exitmonitor $r21;

     label08:
        throw $r17;

     label09:
        goto label16;

     label10:
        $z5 = virtualinvoke r3.<java.lang.String: boolean startsWith(java.lang.String)>("log4j.renderer.");

        if $z5 == 0 goto label12;

        $r13 = "log4j.renderer.";

        $i2 = virtualinvoke $r13.<java.lang.String: int length()>();

        $r14 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int)>($i2);

        $r15 = staticinvoke <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>(r3, r0);

        $z8 = r4 instanceof org.apache.log4j.spi.RendererSupport;

        if $z8 == 0 goto label11;

        $r16 = (org.apache.log4j.spi.RendererSupport) r4;

        staticinvoke <org.apache.log4j.or.RendererMap: void addRenderer(org.apache.log4j.spi.RendererSupport,java.lang.String,java.lang.String)>($r16, $r14, $r15);

     label11:
        goto label16;

     label12:
        $z6 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("log4j.throwableRenderer");

        if $z6 == 0 goto label16;

        $z7 = r4 instanceof org.apache.log4j.spi.ThrowableRendererSupport;

        if $z7 == 0 goto label16;

        $r8 = <org.apache.log4j.PropertyConfigurator: java.lang.Class class$org$apache$log4j$spi$ThrowableRenderer>;

        if $r8 != null goto label13;

        $r22 = staticinvoke <org.apache.log4j.PropertyConfigurator: java.lang.Class class$(java.lang.String)>("org.apache.log4j.spi.ThrowableRenderer");

        <org.apache.log4j.PropertyConfigurator: java.lang.Class class$org$apache$log4j$spi$ThrowableRenderer> = $r22;

        goto label14;

     label13:
        $r22 = <org.apache.log4j.PropertyConfigurator: java.lang.Class class$org$apache$log4j$spi$ThrowableRenderer>;

     label14:
        $r9 = staticinvoke <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByKey(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Object)>(r0, "log4j.throwableRenderer", $r22, null);

        $r12 = (org.apache.log4j.spi.ThrowableRenderer) $r9;

        if $r12 != null goto label15;

        staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String)>("Could not instantiate throwableRenderer.");

        goto label16;

     label15:
        $r10 = new org.apache.log4j.config.PropertySetter;

        specialinvoke $r10.<org.apache.log4j.config.PropertySetter: void <init>(java.lang.Object)>($r12);

        virtualinvoke $r10.<org.apache.log4j.config.PropertySetter: void setProperties(java.util.Properties,java.lang.String)>(r0, "log4j.throwableRenderer.");

        $r11 = (org.apache.log4j.spi.ThrowableRendererSupport) r4;

        interfaceinvoke $r11.<org.apache.log4j.spi.ThrowableRendererSupport: void setThrowableRenderer(org.apache.log4j.spi.ThrowableRenderer)>($r12);

     label16:
        goto label01;

     label17:
        return;

        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
    }

    void parseAdditivityForLogger(java.util.Properties, org.apache.log4j.Logger, java.lang.String)
    {
        org.apache.log4j.PropertyConfigurator r21;
        org.apache.log4j.Logger r20;
        java.lang.StringBuffer $r0, $r1, $r3, $r7, $r8, $r9, $r10, $r11, $r12, $r14, $r15, $r16, $r17, $r18;
        java.lang.String r2, $r4, $r6, $r13, $r19;
        boolean $z0, $z1;
        java.util.Properties r5;

        r21 := @this: org.apache.log4j.PropertyConfigurator;

        r5 := @parameter0: java.util.Properties;

        r20 := @parameter1: org.apache.log4j.Logger;

        r2 := @parameter2: java.lang.String;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("log4j.additivity.");

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        $r6 = staticinvoke <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>($r4, r5);

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Handling log4j.additivity.");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("=[");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r13);

        if $r6 == null goto label1;

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.apache.log4j.helpers.OptionConverter: boolean toBoolean(java.lang.String,boolean)>($r6, 1);

        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Setting additivity for \"");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\" to ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>($z1);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r19);

        virtualinvoke r20.<org.apache.log4j.Category: void setAdditivity(boolean)>($z1);

     label1:
        return;
    }

    void parseCategory(java.util.Properties, org.apache.log4j.Logger, java.lang.String, java.lang.String, java.lang.String)
    {
        org.apache.log4j.Logger r10;
        org.apache.log4j.Level $r29, $r30, $r36;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        org.apache.log4j.PropertyConfigurator r18;
        org.apache.log4j.Appender $r20;
        java.lang.StringBuffer $r0, $r1, $r3, $r4, $r6, $r7, $r13, $r14, $r15, $r16, $r22, $r23, $r24, $r25, $r32, $r33, $r34, $r35, $r37;
        java.util.StringTokenizer $r9;
        java.lang.String r2, r5, $r8, $r11, $r12, $r17, $r21, $r26, $r27, $r28, r31, $r38;
        java.util.Properties r19;

        r18 := @this: org.apache.log4j.PropertyConfigurator;

        r19 := @parameter0: java.util.Properties;

        r10 := @parameter1: org.apache.log4j.Logger;

        r31 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.String;

        r5 := @parameter4: java.lang.String;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Parsing for [");

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] with value=[");

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("].");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r8);

        $r9 = new java.util.StringTokenizer;

        specialinvoke $r9.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r5, ",");

        $z0 = virtualinvoke r5.<java.lang.String: boolean startsWith(java.lang.String)>(",");

        if $z0 != 0 goto label6;

        $z2 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z2 != 0 goto label6;

        $z3 = virtualinvoke $r9.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z3 != 0 goto label1;

        return;

     label1:
        $r21 = virtualinvoke $r9.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r22 = new java.lang.StringBuffer;

        specialinvoke $r22.<java.lang.StringBuffer: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Level token is [");

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r21);

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("].");

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r26);

        $r27 = "inherited";

        $z4 = virtualinvoke $r27.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r21);

        if $z4 != 0 goto label2;

        $r28 = "null";

        $z6 = virtualinvoke $r28.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r21);

        if $z6 == 0 goto label4;

     label2:
        $z5 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("root");

        if $z5 == 0 goto label3;

        staticinvoke <org.apache.log4j.helpers.LogLog: void warn(java.lang.String)>("The root logger cannot be set to null.");

        goto label5;

     label3:
        virtualinvoke r10.<org.apache.log4j.Category: void setLevel(org.apache.log4j.Level)>(null);

        goto label5;

     label4:
        $r29 = <org.apache.log4j.Level: org.apache.log4j.Level DEBUG>;

        $r30 = staticinvoke <org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>($r21, $r29);

        virtualinvoke r10.<org.apache.log4j.Category: void setLevel(org.apache.log4j.Level)>($r30);

     label5:
        $r32 = new java.lang.StringBuffer;

        specialinvoke $r32.<java.lang.StringBuffer: void <init>()>();

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Category ");

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" set to ");

        $r36 = virtualinvoke r10.<org.apache.log4j.Category: org.apache.log4j.Level getLevel()>();

        $r37 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r36);

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r38);

     label6:
        virtualinvoke r10.<org.apache.log4j.Category: void removeAllAppenders()>();

     label7:
        $z7 = virtualinvoke $r9.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z7 == 0 goto label9;

        $r11 = virtualinvoke $r9.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r12 = virtualinvoke $r11.<java.lang.String: java.lang.String trim()>();

        if $r12 == null goto label7;

        $z1 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>(",");

        if $z1 == 0 goto label8;

        goto label7;

     label8:
        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Parsing appender named \"");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\".");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r17);

        $r20 = virtualinvoke r18.<org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)>(r19, $r12);

        if $r20 == null goto label7;

        virtualinvoke r10.<org.apache.log4j.Category: void addAppender(org.apache.log4j.Appender)>($r20);

        goto label7;

     label9:
        return;
    }

    org.apache.log4j.Appender parseAppender(java.util.Properties, java.lang.String)
    {
        java.util.Set $r39;
        org.apache.log4j.Layout $r73;
        java.lang.StringBuffer $r3, $r4, $r5, $r7, $r8, $r9, $r16, $r17, $r18, $r19, $r24, $r25, $r26, $r27, $r29, $r30, $r31, $r32, $r34, $r35, $r36, $r37, $r41, $r42, $r43, $r45, $r46, $r47, $r48, $r59, $r60, $r61, $r62, $r64, $r65, $r66, $r68, $r69, $r70, $r71, $r74, $r75, $r76, $r77, $r80, $r81, $r82, $r83, $r87, $r88, $r89, $r93, $r94, $r95, $r97, $r98, $r99, $r100;
        java.lang.String r1, $r6, $r10, $r20, $r28, $r33, $r38, $r44, $r49, $r54, $r63, $r67, $r72, $r78, $r84, $r90, $r91, $r96, $r101;
        java.util.Map$Entry r51;
        java.util.Properties r11, $r22;
        org.apache.log4j.spi.ErrorHandler $r56;
        boolean $z0, $z1, $z2, $z3;
        org.apache.log4j.PropertyConfigurator r0;
        java.lang.String[] $r23;
        org.apache.log4j.Appender $r2, $r79;
        int $i0, $i1, i2;
        java.util.Iterator $r40;
        java.lang.Class $r12, $r14, $r57, $r85, $r86, $r92;
        java.lang.Object $r13, $r15, $r50, $r52, $r53, $r55, $r58;
        org.apache.log4j.spi.LoggerRepository $r21;

        r0 := @this: org.apache.log4j.PropertyConfigurator;

        r11 := @parameter0: java.util.Properties;

        r1 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender registryGet(java.lang.String)>(r1);

        if $r2 == null goto label01;

        $r80 = new java.lang.StringBuffer;

        specialinvoke $r80.<java.lang.StringBuffer: void <init>()>();

        $r81 = virtualinvoke $r80.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Appender \"");

        $r82 = virtualinvoke $r81.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r83 = virtualinvoke $r82.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\" was already parsed.");

        $r84 = virtualinvoke $r83.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r84);

        return $r2;

     label01:
        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("log4j.appender.");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".layout");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        $r12 = <org.apache.log4j.PropertyConfigurator: java.lang.Class class$org$apache$log4j$Appender>;

        if $r12 != null goto label02;

        $r85 = staticinvoke <org.apache.log4j.PropertyConfigurator: java.lang.Class class$(java.lang.String)>("org.apache.log4j.Appender");

        <org.apache.log4j.PropertyConfigurator: java.lang.Class class$org$apache$log4j$Appender> = $r85;

        goto label03;

     label02:
        $r85 = <org.apache.log4j.PropertyConfigurator: java.lang.Class class$org$apache$log4j$Appender>;

     label03:
        $r13 = staticinvoke <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByKey(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Object)>(r11, $r6, $r85, null);

        $r79 = (org.apache.log4j.Appender) $r13;

        if $r79 != null goto label04;

        $r74 = new java.lang.StringBuffer;

        specialinvoke $r74.<java.lang.StringBuffer: void <init>()>();

        $r75 = virtualinvoke $r74.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Could not instantiate appender named \"");

        $r76 = virtualinvoke $r75.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r77 = virtualinvoke $r76.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\".");

        $r78 = virtualinvoke $r77.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String)>($r78);

        return null;

     label04:
        interfaceinvoke $r79.<org.apache.log4j.Appender: void setName(java.lang.String)>(r1);

        $z0 = $r79 instanceof org.apache.log4j.spi.OptionHandler;

        if $z0 == 0 goto label17;

        $z1 = interfaceinvoke $r79.<org.apache.log4j.Appender: boolean requiresLayout()>();

        if $z1 == 0 goto label07;

        $r57 = <org.apache.log4j.PropertyConfigurator: java.lang.Class class$org$apache$log4j$Layout>;

        if $r57 != null goto label05;

        $r86 = staticinvoke <org.apache.log4j.PropertyConfigurator: java.lang.Class class$(java.lang.String)>("org.apache.log4j.Layout");

        <org.apache.log4j.PropertyConfigurator: java.lang.Class class$org$apache$log4j$Layout> = $r86;

        goto label06;

     label05:
        $r86 = <org.apache.log4j.PropertyConfigurator: java.lang.Class class$org$apache$log4j$Layout>;

     label06:
        $r58 = staticinvoke <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByKey(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Object)>(r11, $r10, $r86, null);

        $r73 = (org.apache.log4j.Layout) $r58;

        if $r73 == null goto label07;

        interfaceinvoke $r79.<org.apache.log4j.Appender: void setLayout(org.apache.log4j.Layout)>($r73);

        $r59 = new java.lang.StringBuffer;

        specialinvoke $r59.<java.lang.StringBuffer: void <init>()>();

        $r60 = virtualinvoke $r59.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Parsing layout options for \"");

        $r61 = virtualinvoke $r60.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r62 = virtualinvoke $r61.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\".");

        $r63 = virtualinvoke $r62.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r63);

        $r64 = new java.lang.StringBuffer;

        specialinvoke $r64.<java.lang.StringBuffer: void <init>()>();

        $r65 = virtualinvoke $r64.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        $r66 = virtualinvoke $r65.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".");

        $r67 = virtualinvoke $r66.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.config.PropertySetter: void setProperties(java.lang.Object,java.util.Properties,java.lang.String)>($r73, r11, $r67);

        $r68 = new java.lang.StringBuffer;

        specialinvoke $r68.<java.lang.StringBuffer: void <init>()>();

        $r69 = virtualinvoke $r68.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("End of parsing for \"");

        $r70 = virtualinvoke $r69.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r71 = virtualinvoke $r70.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\".");

        $r72 = virtualinvoke $r71.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r72);

     label07:
        $r87 = new java.lang.StringBuffer;

        specialinvoke $r87.<java.lang.StringBuffer: void <init>()>();

        $r88 = virtualinvoke $r87.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r89 = virtualinvoke $r88.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".errorhandler");

        $r90 = virtualinvoke $r89.<java.lang.StringBuffer: java.lang.String toString()>();

        $r91 = staticinvoke <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>($r90, r11);

        if $r91 == null goto label16;

        $r14 = <org.apache.log4j.PropertyConfigurator: java.lang.Class class$org$apache$log4j$spi$ErrorHandler>;

        if $r14 != null goto label08;

        $r92 = staticinvoke <org.apache.log4j.PropertyConfigurator: java.lang.Class class$(java.lang.String)>("org.apache.log4j.spi.ErrorHandler");

        <org.apache.log4j.PropertyConfigurator: java.lang.Class class$org$apache$log4j$spi$ErrorHandler> = $r92;

        goto label09;

     label08:
        $r92 = <org.apache.log4j.PropertyConfigurator: java.lang.Class class$org$apache$log4j$spi$ErrorHandler>;

     label09:
        $r15 = staticinvoke <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByKey(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Object)>(r11, $r90, $r92, null);

        $r56 = (org.apache.log4j.spi.ErrorHandler) $r15;

        if $r56 == null goto label16;

        interfaceinvoke $r79.<org.apache.log4j.Appender: void setErrorHandler(org.apache.log4j.spi.ErrorHandler)>($r56);

        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Parsing errorhandler options for \"");

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\".");

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r20);

        $r21 = r0.<org.apache.log4j.PropertyConfigurator: org.apache.log4j.spi.LoggerRepository repository>;

        specialinvoke r0.<org.apache.log4j.PropertyConfigurator: void parseErrorHandler(org.apache.log4j.spi.ErrorHandler,java.lang.String,java.util.Properties,org.apache.log4j.spi.LoggerRepository)>($r56, $r90, r11, $r21);

        $r22 = new java.util.Properties;

        specialinvoke $r22.<java.util.Properties: void <init>()>();

        $r23 = newarray (java.lang.String)[3];

        $r24 = new java.lang.StringBuffer;

        specialinvoke $r24.<java.lang.StringBuffer: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r90);

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".");

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("root-ref");

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.String toString()>();

        $r23[0] = $r28;

        $r29 = new java.lang.StringBuffer;

        specialinvoke $r29.<java.lang.StringBuffer: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r90);

        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".");

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("logger-ref");

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.String toString()>();

        $r23[1] = $r33;

        $r34 = new java.lang.StringBuffer;

        specialinvoke $r34.<java.lang.StringBuffer: void <init>()>();

        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r90);

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".");

        $r37 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("appender-ref");

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.String toString()>();

        $r23[2] = $r38;

        $r39 = virtualinvoke r11.<java.util.Hashtable: java.util.Set entrySet()>();

        $r40 = interfaceinvoke $r39.<java.util.Set: java.util.Iterator iterator()>();

     label10:
        $z2 = interfaceinvoke $r40.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label15;

        $r50 = interfaceinvoke $r40.<java.util.Iterator: java.lang.Object next()>();

        r51 = (java.util.Map$Entry) $r50;

        i2 = 0;

     label11:
        $i0 = lengthof $r23;

        if i2 >= $i0 goto label13;

        $r54 = $r23[i2];

        $r55 = interfaceinvoke r51.<java.util.Map$Entry: java.lang.Object getKey()>();

        $z3 = virtualinvoke $r54.<java.lang.String: boolean equals(java.lang.Object)>($r55);

        if $z3 == 0 goto label12;

        goto label13;

     label12:
        i2 = i2 + 1;

        goto label11;

     label13:
        $i1 = lengthof $r23;

        if i2 != $i1 goto label14;

        $r52 = interfaceinvoke r51.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r53 = interfaceinvoke r51.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke $r22.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r52, $r53);

     label14:
        goto label10;

     label15:
        $r41 = new java.lang.StringBuffer;

        specialinvoke $r41.<java.lang.StringBuffer: void <init>()>();

        $r42 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r90);

        $r43 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".");

        $r44 = virtualinvoke $r43.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.config.PropertySetter: void setProperties(java.lang.Object,java.util.Properties,java.lang.String)>($r56, $r22, $r44);

        $r45 = new java.lang.StringBuffer;

        specialinvoke $r45.<java.lang.StringBuffer: void <init>()>();

        $r46 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("End of errorhandler parsing for \"");

        $r47 = virtualinvoke $r46.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r48 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\".");

        $r49 = virtualinvoke $r48.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r49);

     label16:
        $r93 = new java.lang.StringBuffer;

        specialinvoke $r93.<java.lang.StringBuffer: void <init>()>();

        $r94 = virtualinvoke $r93.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r95 = virtualinvoke $r94.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".");

        $r96 = virtualinvoke $r95.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.config.PropertySetter: void setProperties(java.lang.Object,java.util.Properties,java.lang.String)>($r79, r11, $r96);

        $r97 = new java.lang.StringBuffer;

        specialinvoke $r97.<java.lang.StringBuffer: void <init>()>();

        $r98 = virtualinvoke $r97.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Parsed \"");

        $r99 = virtualinvoke $r98.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r100 = virtualinvoke $r99.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\" options.");

        $r101 = virtualinvoke $r100.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r101);

     label17:
        virtualinvoke r0.<org.apache.log4j.PropertyConfigurator: void parseAppenderFilters(java.util.Properties,java.lang.String,org.apache.log4j.Appender)>(r11, r1, $r79);

        virtualinvoke r0.<org.apache.log4j.PropertyConfigurator: void registryPut(org.apache.log4j.Appender)>($r79);

        return $r79;
    }

    private void parseErrorHandler(org.apache.log4j.spi.ErrorHandler, java.lang.String, java.util.Properties, org.apache.log4j.spi.LoggerRepository)
    {
        org.apache.log4j.PropertyConfigurator r12;
        org.apache.log4j.Logger $r18, $r19;
        org.apache.log4j.Appender $r13;
        java.lang.StringBuffer $r0, $r2, $r3, $r7, $r8, $r9, $r20, $r21, $r22;
        java.lang.String r1, $r4, $r6, $r10, $r11, $r23, $r24;
        boolean $z0;
        java.util.Properties r5;
        org.apache.log4j.spi.ErrorHandler r14;
        org.apache.log4j.spi.LoggerFactory $r15, $r17;
        org.apache.log4j.spi.LoggerRepository r16;

        r12 := @this: org.apache.log4j.PropertyConfigurator;

        r14 := @parameter0: org.apache.log4j.spi.ErrorHandler;

        r1 := @parameter1: java.lang.String;

        r5 := @parameter2: java.util.Properties;

        r16 := @parameter3: org.apache.log4j.spi.LoggerRepository;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("root-ref");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        $r6 = staticinvoke <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>($r4, r5);

        $z0 = staticinvoke <org.apache.log4j.helpers.OptionConverter: boolean toBoolean(java.lang.String,boolean)>($r6, 0);

        if $z0 == 0 goto label1;

        $r18 = interfaceinvoke r16.<org.apache.log4j.spi.LoggerRepository: org.apache.log4j.Logger getRootLogger()>();

        interfaceinvoke r14.<org.apache.log4j.spi.ErrorHandler: void setLogger(org.apache.log4j.Logger)>($r18);

     label1:
        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("logger-ref");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        $r11 = staticinvoke <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>($r10, r5);

        if $r11 == null goto label4;

        $r15 = r12.<org.apache.log4j.PropertyConfigurator: org.apache.log4j.spi.LoggerFactory loggerFactory>;

        if $r15 != null goto label2;

        $r19 = interfaceinvoke r16.<org.apache.log4j.spi.LoggerRepository: org.apache.log4j.Logger getLogger(java.lang.String)>($r11);

        goto label3;

     label2:
        $r17 = r12.<org.apache.log4j.PropertyConfigurator: org.apache.log4j.spi.LoggerFactory loggerFactory>;

        $r19 = interfaceinvoke r16.<org.apache.log4j.spi.LoggerRepository: org.apache.log4j.Logger getLogger(java.lang.String,org.apache.log4j.spi.LoggerFactory)>($r11, $r17);

     label3:
        interfaceinvoke r14.<org.apache.log4j.spi.ErrorHandler: void setLogger(org.apache.log4j.Logger)>($r19);

     label4:
        $r20 = new java.lang.StringBuffer;

        specialinvoke $r20.<java.lang.StringBuffer: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("appender-ref");

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.String toString()>();

        $r24 = staticinvoke <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>($r23, r5);

        if $r24 == null goto label5;

        $r13 = virtualinvoke r12.<org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)>(r5, $r24);

        if $r13 == null goto label5;

        interfaceinvoke r14.<org.apache.log4j.spi.ErrorHandler: void setBackupAppender(org.apache.log4j.Appender)>($r13);

     label5:
        return;
    }

    void parseAppenderFilters(java.util.Properties, java.lang.String, org.apache.log4j.Appender)
    {
        java.util.Enumeration $r8, $r32;
        java.util.Vector r31, $r53, r58, $r63;
        org.apache.log4j.spi.Filter $r47;
        org.apache.log4j.config.PropertySetter $r67;
        org.apache.log4j.NameValue r44, $r64;
        java.lang.StringBuffer $r1, $r3, $r4, $r13, $r14, $r15, $r18, $r19, $r20, $r22, $r23, $r25, $r34, $r36, $r37, $r40, $r41, $r61, $r66, $r68, $r69;
        java.lang.String r2, $r5, $r11, $r16, $r21, $r26, $r39, $r42, $r45, $r46, $r50, r55, r56, r57, r59;
        java.util.Properties r7;
        boolean $z0, $z1, $z2, $z3;
        org.apache.log4j.PropertyConfigurator r54;
        org.apache.log4j.Appender r38;
        int $i0, $i1, $i2, $i4, $i6;
        java.util.Hashtable $r62;
        org.apache.log4j.SortedKeyEnumeration $r65;
        java.lang.Object $r10, $r24, $r28, $r30, $r43, $r48, $r49;
        java.lang.Class $r27, $r35, $r60;

        r54 := @this: org.apache.log4j.PropertyConfigurator;

        r7 := @parameter0: java.util.Properties;

        r2 := @parameter1: java.lang.String;

        r38 := @parameter2: org.apache.log4j.Appender;

        $r61 = new java.lang.StringBuffer;

        specialinvoke $r61.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r61.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("log4j.appender.");

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".filter.");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        $i0 = virtualinvoke $r5.<java.lang.String: int length()>();

        $r62 = new java.util.Hashtable;

        specialinvoke $r62.<java.util.Hashtable: void <init>()>();

        $r8 = virtualinvoke r7.<java.util.Hashtable: java.util.Enumeration keys()>();

        r55 = "";

     label01:
        $z0 = interfaceinvoke $r8.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label05;

        $r48 = interfaceinvoke $r8.<java.util.Enumeration: java.lang.Object nextElement()>();

        r56 = (java.lang.String) $r48;

        $z3 = virtualinvoke r56.<java.lang.String: boolean startsWith(java.lang.String)>($r5);

        if $z3 == 0 goto label04;

        $i1 = virtualinvoke r56.<java.lang.String: int indexOf(int,int)>(46, $i0);

        r57 = r56;

        $i4 = (int) -1;

        if $i1 == $i4 goto label02;

        r57 = virtualinvoke r56.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        $i2 = $i1 + 1;

        r55 = virtualinvoke r56.<java.lang.String: java.lang.String substring(int)>($i2);

     label02:
        $r49 = virtualinvoke $r62.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r57);

        $r53 = (java.util.Vector) $r49;

        r58 = $r53;

        if $r53 != null goto label03;

        $r63 = new java.util.Vector;

        specialinvoke $r63.<java.util.Vector: void <init>()>();

        r58 = $r63;

        virtualinvoke $r62.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r57, $r63);

     label03:
        $i6 = (int) -1;

        if $i1 == $i6 goto label04;

        $r50 = staticinvoke <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>(r56, r7);

        $r64 = new org.apache.log4j.NameValue;

        specialinvoke $r64.<org.apache.log4j.NameValue: void <init>(java.lang.String,java.lang.String)>(r55, $r50);

        virtualinvoke r58.<java.util.Vector: boolean add(java.lang.Object)>($r64);

     label04:
        goto label01;

     label05:
        $r65 = new org.apache.log4j.SortedKeyEnumeration;

        specialinvoke $r65.<org.apache.log4j.SortedKeyEnumeration: void <init>(java.util.Hashtable)>($r62);

     label06:
        $z1 = interfaceinvoke $r65.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z1 == 0 goto label14;

        $r10 = interfaceinvoke $r65.<java.util.Enumeration: java.lang.Object nextElement()>();

        r59 = (java.lang.String) $r10;

        $r11 = virtualinvoke r7.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r59);

        if $r11 == null goto label12;

        $r66 = new java.lang.StringBuffer;

        specialinvoke $r66.<java.lang.StringBuffer: void <init>()>();

        $r18 = virtualinvoke $r66.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Filter key: [");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r59);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] class: [");

        $r21 = virtualinvoke r7.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r59);

        $r22 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] props: ");

        $r24 = virtualinvoke $r62.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r59);

        $r25 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r26);

        $r27 = <org.apache.log4j.PropertyConfigurator: java.lang.Class class$org$apache$log4j$spi$Filter>;

        if $r27 != null goto label07;

        $r60 = staticinvoke <org.apache.log4j.PropertyConfigurator: java.lang.Class class$(java.lang.String)>("org.apache.log4j.spi.Filter");

        <org.apache.log4j.PropertyConfigurator: java.lang.Class class$org$apache$log4j$spi$Filter> = $r60;

        goto label08;

     label07:
        $r60 = <org.apache.log4j.PropertyConfigurator: java.lang.Class class$org$apache$log4j$spi$Filter>;

     label08:
        $r28 = staticinvoke <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)>($r11, $r60, null);

        $r47 = (org.apache.log4j.spi.Filter) $r28;

        if $r47 == null goto label11;

        $r67 = new org.apache.log4j.config.PropertySetter;

        specialinvoke $r67.<org.apache.log4j.config.PropertySetter: void <init>(java.lang.Object)>($r47);

        $r30 = virtualinvoke $r62.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r59);

        r31 = (java.util.Vector) $r30;

        $r32 = virtualinvoke r31.<java.util.Vector: java.util.Enumeration elements()>();

     label09:
        $z2 = interfaceinvoke $r32.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z2 == 0 goto label10;

        $r43 = interfaceinvoke $r32.<java.util.Enumeration: java.lang.Object nextElement()>();

        r44 = (org.apache.log4j.NameValue) $r43;

        $r46 = r44.<org.apache.log4j.NameValue: java.lang.String key>;

        $r45 = r44.<org.apache.log4j.NameValue: java.lang.String value>;

        virtualinvoke $r67.<org.apache.log4j.config.PropertySetter: void setProperty(java.lang.String,java.lang.String)>($r46, $r45);

        goto label09;

     label10:
        virtualinvoke $r67.<org.apache.log4j.config.PropertySetter: void activate()>();

        $r68 = new java.lang.StringBuffer;

        specialinvoke $r68.<java.lang.StringBuffer: void <init>()>();

        $r34 = virtualinvoke $r68.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Adding filter of type [");

        $r35 = virtualinvoke $r47.<java.lang.Object: java.lang.Class getClass()>();

        $r36 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r35);

        $r37 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] to appender named [");

        $r39 = interfaceinvoke r38.<org.apache.log4j.Appender: java.lang.String getName()>();

        $r40 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r39);

        $r41 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("].");

        $r42 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r42);

        interfaceinvoke r38.<org.apache.log4j.Appender: void addFilter(org.apache.log4j.spi.Filter)>($r47);

     label11:
        goto label13;

     label12:
        $r69 = new java.lang.StringBuffer;

        specialinvoke $r69.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r69.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Missing class definition for filter: [");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r59);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void warn(java.lang.String)>($r16);

     label13:
        goto label06;

     label14:
        return;
    }

    void registryPut(org.apache.log4j.Appender)
    {
        org.apache.log4j.Appender r1;
        org.apache.log4j.PropertyConfigurator r0;
        java.lang.String $r3;
        java.util.Hashtable $r2;

        r0 := @this: org.apache.log4j.PropertyConfigurator;

        r1 := @parameter0: org.apache.log4j.Appender;

        $r2 = r0.<org.apache.log4j.PropertyConfigurator: java.util.Hashtable registry>;

        $r3 = interfaceinvoke r1.<org.apache.log4j.Appender: java.lang.String getName()>();

        virtualinvoke $r2.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r1);

        return;
    }

    org.apache.log4j.Appender registryGet(java.lang.String)
    {
        org.apache.log4j.Appender $r4;
        org.apache.log4j.PropertyConfigurator r0;
        java.lang.Object $r3;
        java.lang.String r1;
        java.util.Hashtable $r2;

        r0 := @this: org.apache.log4j.PropertyConfigurator;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.log4j.PropertyConfigurator: java.util.Hashtable registry>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (org.apache.log4j.Appender) $r3;

        return $r4;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    public static void <clinit>()
    {
        <org.apache.log4j.PropertyConfigurator: java.lang.String INTERNAL_ROOT_NAME> = "root";

        <org.apache.log4j.PropertyConfigurator: java.lang.String RESET_KEY> = "log4j.reset";

        <org.apache.log4j.PropertyConfigurator: java.lang.String LOGGER_FACTORY_KEY> = "log4j.loggerFactory";

        <org.apache.log4j.PropertyConfigurator: java.lang.String APPENDER_REF_TAG> = "appender-ref";

        <org.apache.log4j.PropertyConfigurator: java.lang.String ROOT_REF> = "root-ref";

        <org.apache.log4j.PropertyConfigurator: java.lang.String LOGGER_REF> = "logger-ref";

        <org.apache.log4j.PropertyConfigurator: java.lang.String THROWABLE_RENDERER_PREFIX> = "log4j.throwableRenderer";

        <org.apache.log4j.PropertyConfigurator: java.lang.String THRESHOLD_PREFIX> = "log4j.threshold";

        <org.apache.log4j.PropertyConfigurator: java.lang.String RENDERER_PREFIX> = "log4j.renderer.";

        <org.apache.log4j.PropertyConfigurator: java.lang.String APPENDER_PREFIX> = "log4j.appender.";

        <org.apache.log4j.PropertyConfigurator: java.lang.String ROOT_LOGGER_PREFIX> = "log4j.rootLogger";

        <org.apache.log4j.PropertyConfigurator: java.lang.String ROOT_CATEGORY_PREFIX> = "log4j.rootCategory";

        <org.apache.log4j.PropertyConfigurator: java.lang.String ADDITIVITY_PREFIX> = "log4j.additivity.";

        <org.apache.log4j.PropertyConfigurator: java.lang.String FACTORY_PREFIX> = "log4j.factory";

        <org.apache.log4j.PropertyConfigurator: java.lang.String LOGGER_PREFIX> = "log4j.logger.";

        <org.apache.log4j.PropertyConfigurator: java.lang.String CATEGORY_PREFIX> = "log4j.category.";

        return;
    }
}
