public abstract class org.apache.batik.dom.AbstractNode extends java.lang.Object implements org.apache.batik.dom.ExtendedNode, org.apache.batik.dom.xbl.NodeXBL, org.apache.batik.dom.xbl.XBLManagerData, java.io.Serializable
{
    public static final org.w3c.dom.NodeList EMPTY_NODE_LIST;
    protected org.apache.batik.dom.AbstractDocument ownerDocument;
    protected transient org.apache.batik.dom.events.EventSupport eventSupport;
    protected java.util.HashMap userData;
    protected java.util.HashMap userDataHandlers;
    protected java.lang.Object managerData;
    public static final short DOCUMENT_POSITION_DISCONNECTED;
    public static final short DOCUMENT_POSITION_PRECEDING;
    public static final short DOCUMENT_POSITION_FOLLOWING;
    public static final short DOCUMENT_POSITION_CONTAINS;
    public static final short DOCUMENT_POSITION_CONTAINED_BY;
    public static final short DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC;

    public void <init>()
    {
        org.apache.batik.dom.AbstractNode r0;

        r0 := @this: org.apache.batik.dom.AbstractNode;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void setNodeName(java.lang.String)
    {
        org.apache.batik.dom.AbstractNode r0;
        java.lang.String r1;

        r0 := @this: org.apache.batik.dom.AbstractNode;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public void setOwnerDocument(org.w3c.dom.Document)
    {
        org.apache.batik.dom.AbstractDocument $r2;
        org.apache.batik.dom.AbstractNode r0;
        org.w3c.dom.Document r1;

        r0 := @this: org.apache.batik.dom.AbstractNode;

        r1 := @parameter0: org.w3c.dom.Document;

        $r2 = (org.apache.batik.dom.AbstractDocument) r1;

        r0.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.AbstractDocument ownerDocument> = $r2;

        return;
    }

    public void setSpecified(boolean)
    {
        java.lang.Object[] $r1;
        java.lang.Integer $r5;
        short $s0;
        org.apache.batik.dom.AbstractNode r0;
        org.w3c.dom.DOMException $r4;
        int $i1;
        java.lang.String $r3;
        boolean z0;

        r0 := @this: org.apache.batik.dom.AbstractNode;

        z0 := @parameter0: boolean;

        $r1 = newarray (java.lang.Object)[2];

        $r5 = new java.lang.Integer;

        $s0 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: short getNodeType()>();

        $i1 = (int) $s0;

        specialinvoke $r5.<java.lang.Integer: void <init>(int)>($i1);

        $r1[0] = $r5;

        $r3 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: java.lang.String getNodeName()>();

        $r1[1] = $r3;

        $r4 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(11, "node.type", $r1);

        throw $r4;
    }

    public java.lang.String getNodeValue() throws org.w3c.dom.DOMException
    {
        org.apache.batik.dom.AbstractNode r0;

        r0 := @this: org.apache.batik.dom.AbstractNode;

        return null;
    }

    public void setNodeValue(java.lang.String) throws org.w3c.dom.DOMException
    {
        org.apache.batik.dom.AbstractNode r0;
        java.lang.String r1;

        r0 := @this: org.apache.batik.dom.AbstractNode;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public org.w3c.dom.Node getParentNode()
    {
        org.apache.batik.dom.AbstractNode r0;

        r0 := @this: org.apache.batik.dom.AbstractNode;

        return null;
    }

    public void setParentNode(org.w3c.dom.Node)
    {
        java.lang.Object[] $r1;
        java.lang.Integer $r6;
        short $s0;
        org.apache.batik.dom.AbstractNode r0;
        org.w3c.dom.DOMException $r4;
        org.w3c.dom.Node r5;
        int $i1;
        java.lang.String $r3;

        r0 := @this: org.apache.batik.dom.AbstractNode;

        r5 := @parameter0: org.w3c.dom.Node;

        $r1 = newarray (java.lang.Object)[2];

        $r6 = new java.lang.Integer;

        $s0 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: short getNodeType()>();

        $i1 = (int) $s0;

        specialinvoke $r6.<java.lang.Integer: void <init>(int)>($i1);

        $r1[0] = $r6;

        $r3 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: java.lang.String getNodeName()>();

        $r1[1] = $r3;

        $r4 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(3, "parent.not.allowed", $r1);

        throw $r4;
    }

    public org.w3c.dom.NodeList getChildNodes()
    {
        org.w3c.dom.NodeList $r0;
        org.apache.batik.dom.AbstractNode r1;

        r1 := @this: org.apache.batik.dom.AbstractNode;

        $r0 = <org.apache.batik.dom.AbstractNode: org.w3c.dom.NodeList EMPTY_NODE_LIST>;

        return $r0;
    }

    public org.w3c.dom.Node getFirstChild()
    {
        org.apache.batik.dom.AbstractNode r0;

        r0 := @this: org.apache.batik.dom.AbstractNode;

        return null;
    }

    public org.w3c.dom.Node getLastChild()
    {
        org.apache.batik.dom.AbstractNode r0;

        r0 := @this: org.apache.batik.dom.AbstractNode;

        return null;
    }

    public void setPreviousSibling(org.w3c.dom.Node)
    {
        java.lang.Object[] $r1;
        java.lang.Integer $r6;
        short $s0;
        org.apache.batik.dom.AbstractNode r0;
        org.w3c.dom.DOMException $r4;
        org.w3c.dom.Node r5;
        int $i1;
        java.lang.String $r3;

        r0 := @this: org.apache.batik.dom.AbstractNode;

        r5 := @parameter0: org.w3c.dom.Node;

        $r1 = newarray (java.lang.Object)[2];

        $r6 = new java.lang.Integer;

        $s0 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: short getNodeType()>();

        $i1 = (int) $s0;

        specialinvoke $r6.<java.lang.Integer: void <init>(int)>($i1);

        $r1[0] = $r6;

        $r3 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: java.lang.String getNodeName()>();

        $r1[1] = $r3;

        $r4 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(3, "sibling.not.allowed", $r1);

        throw $r4;
    }

    public org.w3c.dom.Node getPreviousSibling()
    {
        org.apache.batik.dom.AbstractNode r0;

        r0 := @this: org.apache.batik.dom.AbstractNode;

        return null;
    }

    public void setNextSibling(org.w3c.dom.Node)
    {
        java.lang.Object[] $r1;
        java.lang.Integer $r6;
        short $s0;
        org.apache.batik.dom.AbstractNode r0;
        org.w3c.dom.DOMException $r4;
        org.w3c.dom.Node r5;
        int $i1;
        java.lang.String $r3;

        r0 := @this: org.apache.batik.dom.AbstractNode;

        r5 := @parameter0: org.w3c.dom.Node;

        $r1 = newarray (java.lang.Object)[2];

        $r6 = new java.lang.Integer;

        $s0 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: short getNodeType()>();

        $i1 = (int) $s0;

        specialinvoke $r6.<java.lang.Integer: void <init>(int)>($i1);

        $r1[0] = $r6;

        $r3 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: java.lang.String getNodeName()>();

        $r1[1] = $r3;

        $r4 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(3, "sibling.not.allowed", $r1);

        throw $r4;
    }

    public org.w3c.dom.Node getNextSibling()
    {
        org.apache.batik.dom.AbstractNode r0;

        r0 := @this: org.apache.batik.dom.AbstractNode;

        return null;
    }

    public boolean hasAttributes()
    {
        org.apache.batik.dom.AbstractNode r0;

        r0 := @this: org.apache.batik.dom.AbstractNode;

        return 0;
    }

    public org.w3c.dom.NamedNodeMap getAttributes()
    {
        org.apache.batik.dom.AbstractNode r0;

        r0 := @this: org.apache.batik.dom.AbstractNode;

        return null;
    }

    public org.w3c.dom.Document getOwnerDocument()
    {
        org.apache.batik.dom.AbstractDocument $r1;
        org.apache.batik.dom.AbstractNode r0;

        r0 := @this: org.apache.batik.dom.AbstractNode;

        $r1 = r0.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.AbstractDocument ownerDocument>;

        return $r1;
    }

    public java.lang.String getNamespaceURI()
    {
        org.apache.batik.dom.AbstractNode r0;

        r0 := @this: org.apache.batik.dom.AbstractNode;

        return null;
    }

    public org.w3c.dom.Node insertBefore(org.w3c.dom.Node, org.w3c.dom.Node) throws org.w3c.dom.DOMException
    {
        java.lang.Object[] $r1;
        java.lang.Integer $r7;
        short $s0;
        org.apache.batik.dom.AbstractNode r0;
        org.w3c.dom.DOMException $r4;
        org.w3c.dom.Node r5, r6;
        int $i1;
        java.lang.String $r3;

        r0 := @this: org.apache.batik.dom.AbstractNode;

        r5 := @parameter0: org.w3c.dom.Node;

        r6 := @parameter1: org.w3c.dom.Node;

        $r1 = newarray (java.lang.Object)[2];

        $r7 = new java.lang.Integer;

        $s0 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: short getNodeType()>();

        $i1 = (int) $s0;

        specialinvoke $r7.<java.lang.Integer: void <init>(int)>($i1);

        $r1[0] = $r7;

        $r3 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: java.lang.String getNodeName()>();

        $r1[1] = $r3;

        $r4 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(3, "children.not.allowed", $r1);

        throw $r4;
    }

    public org.w3c.dom.Node replaceChild(org.w3c.dom.Node, org.w3c.dom.Node) throws org.w3c.dom.DOMException
    {
        java.lang.Object[] $r1;
        java.lang.Integer $r7;
        short $s0;
        org.apache.batik.dom.AbstractNode r0;
        org.w3c.dom.DOMException $r4;
        org.w3c.dom.Node r5, r6;
        int $i1;
        java.lang.String $r3;

        r0 := @this: org.apache.batik.dom.AbstractNode;

        r5 := @parameter0: org.w3c.dom.Node;

        r6 := @parameter1: org.w3c.dom.Node;

        $r1 = newarray (java.lang.Object)[2];

        $r7 = new java.lang.Integer;

        $s0 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: short getNodeType()>();

        $i1 = (int) $s0;

        specialinvoke $r7.<java.lang.Integer: void <init>(int)>($i1);

        $r1[0] = $r7;

        $r3 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: java.lang.String getNodeName()>();

        $r1[1] = $r3;

        $r4 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(3, "children.not.allowed", $r1);

        throw $r4;
    }

    public org.w3c.dom.Node removeChild(org.w3c.dom.Node) throws org.w3c.dom.DOMException
    {
        java.lang.Object[] $r1;
        java.lang.Integer $r6;
        short $s0;
        org.apache.batik.dom.AbstractNode r0;
        org.w3c.dom.DOMException $r4;
        org.w3c.dom.Node r5;
        int $i1;
        java.lang.String $r3;

        r0 := @this: org.apache.batik.dom.AbstractNode;

        r5 := @parameter0: org.w3c.dom.Node;

        $r1 = newarray (java.lang.Object)[2];

        $r6 = new java.lang.Integer;

        $s0 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: short getNodeType()>();

        $i1 = (int) $s0;

        specialinvoke $r6.<java.lang.Integer: void <init>(int)>($i1);

        $r1[0] = $r6;

        $r3 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: java.lang.String getNodeName()>();

        $r1[1] = $r3;

        $r4 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(3, "children.not.allowed", $r1);

        throw $r4;
    }

    public org.w3c.dom.Node appendChild(org.w3c.dom.Node) throws org.w3c.dom.DOMException
    {
        java.lang.Object[] $r1;
        java.lang.Integer $r6;
        short $s0;
        org.apache.batik.dom.AbstractNode r0;
        org.w3c.dom.DOMException $r4;
        org.w3c.dom.Node r5;
        int $i1;
        java.lang.String $r3;

        r0 := @this: org.apache.batik.dom.AbstractNode;

        r5 := @parameter0: org.w3c.dom.Node;

        $r1 = newarray (java.lang.Object)[2];

        $r6 = new java.lang.Integer;

        $s0 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: short getNodeType()>();

        $i1 = (int) $s0;

        specialinvoke $r6.<java.lang.Integer: void <init>(int)>($i1);

        $r1[0] = $r6;

        $r3 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: java.lang.String getNodeName()>();

        $r1[1] = $r3;

        $r4 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(3, "children.not.allowed", $r1);

        throw $r4;
    }

    public boolean hasChildNodes()
    {
        org.apache.batik.dom.AbstractNode r0;

        r0 := @this: org.apache.batik.dom.AbstractNode;

        return 0;
    }

    public org.w3c.dom.Node cloneNode(boolean)
    {
        org.apache.batik.dom.AbstractNode r0;
        org.w3c.dom.Node $r1, $r2, $r3;
        boolean z0;

        r0 := @this: org.apache.batik.dom.AbstractNode;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.Node newNode()>();

        $r3 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.Node deepCopyInto(org.w3c.dom.Node)>($r2);

        goto label2;

     label1:
        $r1 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.Node newNode()>();

        $r3 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.Node copyInto(org.w3c.dom.Node)>($r1);

     label2:
        virtualinvoke r0.<org.apache.batik.dom.AbstractNode: void fireUserDataHandlers(short,org.w3c.dom.Node,org.w3c.dom.Node)>(1, r0, $r3);

        return $r3;
    }

    public void normalize()
    {
        org.apache.batik.dom.AbstractNode r0;

        r0 := @this: org.apache.batik.dom.AbstractNode;

        return;
    }

    public boolean isSupported(java.lang.String, java.lang.String)
    {
        org.apache.batik.dom.AbstractNode r0;
        org.apache.batik.dom.AbstractDocument $r1;
        java.lang.String r3, r4;
        org.w3c.dom.DOMImplementation $r2;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.AbstractNode;

        r3 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.AbstractDocument getCurrentDocument()>();

        $r2 = virtualinvoke $r1.<org.apache.batik.dom.AbstractDocument: org.w3c.dom.DOMImplementation getImplementation()>();

        $z0 = interfaceinvoke $r2.<org.w3c.dom.DOMImplementation: boolean hasFeature(java.lang.String,java.lang.String)>(r3, r4);

        return $z0;
    }

    public java.lang.String getPrefix()
    {
        org.apache.batik.dom.AbstractNode r0;
        java.lang.String $r1, $r2, $r3;

        r0 := @this: org.apache.batik.dom.AbstractNode;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: java.lang.String getNamespaceURI()>();

        if $r1 != null goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r2 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: java.lang.String getNodeName()>();

        $r3 = staticinvoke <org.apache.batik.dom.util.DOMUtilities: java.lang.String getPrefix(java.lang.String)>($r2);

     label2:
        return $r3;
    }

    public void setPrefix(java.lang.String) throws org.w3c.dom.DOMException
    {
        java.lang.Integer $r31, $r32, $r33, $r34, $r35;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.Object[] $r10, $r15, $r19, $r23, $r27;
        short $s0, $s1, $s2, $s3, $s4;
        org.apache.batik.dom.AbstractNode r0;
        java.lang.StringBuffer $r5, $r6, $r7, $r36;
        org.w3c.dom.DOMException $r13, $r18, $r22, $r26, $r30;
        int $i5, $i6, $i7, $i8, $i9;
        java.lang.String $r1, $r2, r3, $r8, $r9, $r12, $r14, $r17, $r21, $r25, $r29;

        r0 := @this: org.apache.batik.dom.AbstractNode;

        r3 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: boolean isReadonly()>();

        if $z0 == 0 goto label1;

        $r27 = newarray (java.lang.Object)[2];

        $r31 = new java.lang.Integer;

        $s4 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: short getNodeType()>();

        $i5 = (int) $s4;

        specialinvoke $r31.<java.lang.Integer: void <init>(int)>($i5);

        $r27[0] = $r31;

        $r29 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: java.lang.String getNodeName()>();

        $r27[1] = $r29;

        $r30 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(7, "readonly.node", $r27);

        throw $r30;

     label1:
        $r1 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: java.lang.String getNamespaceURI()>();

        if $r1 != null goto label2;

        $r23 = newarray (java.lang.Object)[2];

        $r32 = new java.lang.Integer;

        $s3 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: short getNodeType()>();

        $i6 = (int) $s3;

        specialinvoke $r32.<java.lang.Integer: void <init>(int)>($i6);

        $r23[0] = $r32;

        $r25 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: java.lang.String getNodeName()>();

        $r23[1] = $r25;

        $r26 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(14, "namespace", $r23);

        throw $r26;

     label2:
        $r2 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: java.lang.String getLocalName()>();

        if r3 != null goto label3;

        virtualinvoke r0.<org.apache.batik.dom.AbstractNode: void setNodeName(java.lang.String)>($r2);

        return;

     label3:
        $z1 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z1 != 0 goto label4;

        $z7 = staticinvoke <org.apache.batik.dom.util.DOMUtilities: boolean isValidName(java.lang.String)>(r3);

        if $z7 != 0 goto label4;

        $r19 = newarray (java.lang.Object)[3];

        $r33 = new java.lang.Integer;

        $s2 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: short getNodeType()>();

        $i7 = (int) $s2;

        specialinvoke $r33.<java.lang.Integer: void <init>(int)>($i7);

        $r19[0] = $r33;

        $r21 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: java.lang.String getNodeName()>();

        $r19[1] = $r21;

        $r19[2] = r3;

        $r22 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(5, "prefix", $r19);

        throw $r22;

     label4:
        $z2 = staticinvoke <org.apache.batik.dom.util.DOMUtilities: boolean isValidPrefix(java.lang.String)>(r3);

        if $z2 != 0 goto label5;

        $r15 = newarray (java.lang.Object)[3];

        $r34 = new java.lang.Integer;

        $s1 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: short getNodeType()>();

        $i8 = (int) $s1;

        specialinvoke $r34.<java.lang.Integer: void <init>(int)>($i8);

        $r15[0] = $r34;

        $r17 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: java.lang.String getNodeName()>();

        $r15[1] = $r17;

        $r15[2] = r3;

        $r18 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(14, "prefix", $r15);

        throw $r18;

     label5:
        $z3 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("xml");

        if $z3 == 0 goto label6;

        $r14 = "http://www.w3.org/XML/1998/namespace";

        $z6 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z6 == 0 goto label7;

     label6:
        $z4 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("xmlns");

        if $z4 == 0 goto label8;

        $r9 = "http://www.w3.org/2000/xmlns/";

        $z5 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z5 != 0 goto label8;

     label7:
        $r10 = newarray (java.lang.Object)[3];

        $r35 = new java.lang.Integer;

        $s0 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: short getNodeType()>();

        $i9 = (int) $s0;

        specialinvoke $r35.<java.lang.Integer: void <init>(int)>($i9);

        $r10[0] = $r35;

        $r12 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: java.lang.String getNodeName()>();

        $r10[1] = $r12;

        $r10[2] = $r1;

        $r13 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(14, "namespace.uri", $r10);

        throw $r13;

     label8:
        $r36 = new java.lang.StringBuffer;

        specialinvoke $r36.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.batik.dom.AbstractNode: void setNodeName(java.lang.String)>($r8);

        return;
    }

    public java.lang.String getLocalName()
    {
        org.apache.batik.dom.AbstractNode r0;
        java.lang.String $r1, $r2, $r3;

        r0 := @this: org.apache.batik.dom.AbstractNode;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: java.lang.String getNamespaceURI()>();

        if $r1 != null goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r2 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: java.lang.String getNodeName()>();

        $r3 = staticinvoke <org.apache.batik.dom.util.DOMUtilities: java.lang.String getLocalName(java.lang.String)>($r2);

     label2:
        return $r3;
    }

    public org.w3c.dom.DOMException createDOMException(short, java.lang.String, java.lang.Object[])
    {
        java.lang.Object[] r4;
        org.apache.batik.dom.AbstractDocument $r2;
        java.lang.Exception $r6;
        short s0;
        org.apache.batik.dom.AbstractNode r1;
        org.w3c.dom.DOMException $r0, $r7;
        java.lang.String r3, $r5;

        r1 := @this: org.apache.batik.dom.AbstractNode;

        s0 := @parameter0: short;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.Object[];

     label1:
        $r0 = new org.w3c.dom.DOMException;

        $r2 = virtualinvoke r1.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.AbstractDocument getCurrentDocument()>();

        $r5 = virtualinvoke $r2.<org.apache.batik.dom.AbstractDocument: java.lang.String formatMessage(java.lang.String,java.lang.Object[])>(r3, r4);

        specialinvoke $r0.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(s0, $r5);

        return $r0;

     label2:
        $r6 := @caughtexception;

        $r7 = new org.w3c.dom.DOMException;

        specialinvoke $r7.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(s0, r3);

        return $r7;

        catch java.lang.Exception from label1 to label2 with label2;
    }

    protected java.lang.String getCascadedXMLBase(org.w3c.dom.Node)
    {
        org.apache.batik.dom.AbstractDocument r8;
        org.w3c.dom.Attr $r1;
        short $s0, $s1, $s2;
        org.apache.batik.dom.AbstractNode r0;
        org.w3c.dom.Element r9;
        org.apache.batik.util.ParsedURL $r10;
        org.w3c.dom.Document $r4;
        org.w3c.dom.Node r5, r7;
        int $i3;
        java.lang.String $r3, r6;

        r0 := @this: org.apache.batik.dom.AbstractNode;

        r5 := @parameter0: org.w3c.dom.Node;

        r6 = null;

        r7 = interfaceinvoke r5.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

        goto label03;

     label01:
        $s0 = interfaceinvoke r7.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 != 1 goto label02;

        r6 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: java.lang.String getCascadedXMLBase(org.w3c.dom.Node)>(r7);

        goto label04;

     label02:
        r7 = interfaceinvoke r7.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

     label03:
        if r7 != null goto label01;

     label04:
        if r6 != null goto label08;

        $s2 = interfaceinvoke r5.<org.w3c.dom.Node: short getNodeType()>();

        $i3 = (int) $s2;

        if $i3 != 9 goto label05;

        r8 = (org.apache.batik.dom.AbstractDocument) r5;

        goto label06;

     label05:
        $r4 = interfaceinvoke r5.<org.w3c.dom.Node: org.w3c.dom.Document getOwnerDocument()>();

        r8 = (org.apache.batik.dom.AbstractDocument) $r4;

     label06:
        r6 = virtualinvoke r8.<org.apache.batik.dom.AbstractDocument: java.lang.String getDocumentURI()>();

        goto label08;

     label07:
        r5 = interfaceinvoke r5.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

     label08:
        if r5 == null goto label09;

        $s1 = interfaceinvoke r5.<org.w3c.dom.Node: short getNodeType()>();

        if $s1 != 1 goto label07;

     label09:
        if r5 != null goto label10;

        return r6;

     label10:
        r9 = (org.w3c.dom.Element) r5;

        $r1 = interfaceinvoke r9.<org.w3c.dom.Element: org.w3c.dom.Attr getAttributeNodeNS(java.lang.String,java.lang.String)>("http://www.w3.org/XML/1998/namespace", "base");

        if $r1 == null goto label12;

        if r6 != null goto label11;

        r6 = interfaceinvoke $r1.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        goto label12;

     label11:
        $r10 = new org.apache.batik.util.ParsedURL;

        $r3 = interfaceinvoke $r1.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        specialinvoke $r10.<org.apache.batik.util.ParsedURL: void <init>(java.lang.String,java.lang.String)>(r6, $r3);

        r6 = virtualinvoke $r10.<org.apache.batik.util.ParsedURL: java.lang.String toString()>();

     label12:
        return r6;
    }

    public java.lang.String getBaseURI()
    {
        org.apache.batik.dom.AbstractNode r0;
        java.lang.String $r1;

        r0 := @this: org.apache.batik.dom.AbstractNode;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: java.lang.String getCascadedXMLBase(org.w3c.dom.Node)>(r0);

        return $r1;
    }

    public static java.lang.String getBaseURI(org.w3c.dom.Node)
    {
        org.apache.batik.dom.AbstractNode $r1;
        java.lang.String $r2;
        org.w3c.dom.Node r0;

        r0 := @parameter0: org.w3c.dom.Node;

        $r1 = (org.apache.batik.dom.AbstractNode) r0;

        $r2 = virtualinvoke $r1.<org.apache.batik.dom.AbstractNode: java.lang.String getBaseURI()>();

        return $r2;
    }

    public short compareDocumentPosition(org.w3c.dom.Node) throws org.w3c.dom.DOMException
    {
        org.w3c.dom.Attr $r6, $r7, $r10, r12;
        java.util.ArrayList $r17, $r18;
        short $s0, $s1, $s4;
        org.apache.batik.dom.AbstractNode r0;
        org.w3c.dom.Node r1, r11, r13, r16;
        int $i2, $i3, $i5, $i6, i7, i8, i9, i10, $i11, $i12, $i13, $i15, $i17;
        org.w3c.dom.Element $r8, $r9;
        java.lang.Object $r4, $r5, r14, r15;

        r0 := @this: org.apache.batik.dom.AbstractNode;

        r1 := @parameter0: org.w3c.dom.Node;

        if r0 != r1 goto label01;

        return 0;

     label01:
        $r17 = new java.util.ArrayList;

        specialinvoke $r17.<java.util.ArrayList: void <init>(int)>(10);

        $r18 = new java.util.ArrayList;

        specialinvoke $r18.<java.util.ArrayList: void <init>(int)>(10);

        i7 = 0;

        i8 = 0;

        $s0 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: short getNodeType()>();

        $i11 = (int) $s0;

        if $i11 != 2 goto label04;

        virtualinvoke $r17.<java.util.ArrayList: boolean add(java.lang.Object)>(r0);

        i7 = 1;

        $r7 = (org.w3c.dom.Attr) r0;

        $r8 = interfaceinvoke $r7.<org.w3c.dom.Attr: org.w3c.dom.Element getOwnerElement()>();

        r11 = $r8;

        $s4 = interfaceinvoke r1.<org.w3c.dom.Node: short getNodeType()>();

        $i12 = (int) $s4;

        if $i12 != 2 goto label07;

        r12 = (org.w3c.dom.Attr) r1;

        $r9 = interfaceinvoke r12.<org.w3c.dom.Attr: org.w3c.dom.Element getOwnerElement()>();

        if $r8 != $r9 goto label03;

        $i5 = virtualinvoke r0.<java.lang.Object: int hashCode()>();

        $r10 = (org.w3c.dom.Attr) r1;

        $i6 = virtualinvoke $r10.<java.lang.Object: int hashCode()>();

        if $i5 >= $i6 goto label02;

        return 34;

     label02:
        return 36;

     label03:
        goto label07;

     label04:
        r11 = r0;

        goto label07;

     label05:
        if r11 != r1 goto label06;

        return 20;

     label06:
        virtualinvoke $r17.<java.util.ArrayList: boolean add(java.lang.Object)>(r11);

        i7 = i7 + 1;

        r11 = interfaceinvoke r11.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

     label07:
        if r11 != null goto label05;

        $s1 = interfaceinvoke r1.<org.w3c.dom.Node: short getNodeType()>();

        $i13 = (int) $s1;

        if $i13 != 2 goto label08;

        virtualinvoke $r18.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        i8 = 1;

        $r6 = (org.w3c.dom.Attr) r1;

        r13 = interfaceinvoke $r6.<org.w3c.dom.Attr: org.w3c.dom.Element getOwnerElement()>();

        goto label11;

     label08:
        r13 = r1;

        goto label11;

     label09:
        if r13 != r0 goto label10;

        return 10;

     label10:
        virtualinvoke $r18.<java.util.ArrayList: boolean add(java.lang.Object)>(r13);

        i8 = i8 + 1;

        r13 = interfaceinvoke r13.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

     label11:
        if r13 != null goto label09;

        i9 = i7 - 1;

        i10 = i8 - 1;

        $r4 = virtualinvoke $r17.<java.util.ArrayList: java.lang.Object get(int)>(i9);

        $r5 = virtualinvoke $r18.<java.util.ArrayList: java.lang.Object get(int)>(i10);

        if $r4 == $r5 goto label13;

        $i2 = virtualinvoke r0.<java.lang.Object: int hashCode()>();

        $i3 = virtualinvoke r1.<java.lang.Object: int hashCode()>();

        if $i2 >= $i3 goto label12;

        return 35;

     label12:
        return 37;

     label13:
        r14 = virtualinvoke $r17.<java.util.ArrayList: java.lang.Object get(int)>(i9);

        r15 = virtualinvoke $r18.<java.util.ArrayList: java.lang.Object get(int)>(i10);

        goto label15;

     label14:
        r13 = (org.w3c.dom.Node) r14;

        $i15 = (int) -1;

        i9 = i9 + $i15;

        r14 = virtualinvoke $r17.<java.util.ArrayList: java.lang.Object get(int)>(i9);

        $i17 = (int) -1;

        i10 = i10 + $i17;

        r15 = virtualinvoke $r18.<java.util.ArrayList: java.lang.Object get(int)>(i10);

     label15:
        if r14 == r15 goto label14;

        r16 = interfaceinvoke r13.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        goto label19;

     label16:
        if r16 != r14 goto label17;

        return 2;

     label17:
        if r16 != r15 goto label18;

        return 4;

     label18:
        r16 = interfaceinvoke r16.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label19:
        if r16 != null goto label16;

        return 1;
    }

    public java.lang.String getTextContent()
    {
        org.apache.batik.dom.AbstractNode r0;

        r0 := @this: org.apache.batik.dom.AbstractNode;

        return null;
    }

    public void setTextContent(java.lang.String) throws org.w3c.dom.DOMException
    {
        org.w3c.dom.Text $r5;
        java.lang.Object[] $r6;
        java.lang.Integer $r10;
        short $s0, $s1;
        org.apache.batik.dom.AbstractNode r0;
        org.w3c.dom.Document $r3;
        org.w3c.dom.Node $r1, $r2;
        org.w3c.dom.DOMException $r9;
        int $i2, $i3;
        java.lang.String r4, $r8;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.AbstractNode;

        r4 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: boolean isReadonly()>();

        if $z0 == 0 goto label1;

        $r6 = newarray (java.lang.Object)[2];

        $r10 = new java.lang.Integer;

        $s1 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: short getNodeType()>();

        $i2 = (int) $s1;

        specialinvoke $r10.<java.lang.Integer: void <init>(int)>($i2);

        $r6[0] = $r10;

        $r8 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: java.lang.String getNodeName()>();

        $r6[1] = $r8;

        $r9 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(7, "readonly.node", $r6);

        throw $r9;

     label1:
        $s0 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: short getNodeType()>();

        $i3 = (int) $s0;

        if $i3 == 10 goto label4;

        goto label3;

     label2:
        $r2 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.Node getFirstChild()>();

        virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.Node removeChild(org.w3c.dom.Node)>($r2);

     label3:
        $r1 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.Node getFirstChild()>();

        if $r1 != null goto label2;

        $r3 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.Document getOwnerDocument()>();

        $r5 = interfaceinvoke $r3.<org.w3c.dom.Document: org.w3c.dom.Text createTextNode(java.lang.String)>(r4);

        virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r5);

     label4:
        return;
    }

    public boolean isSameNode(org.w3c.dom.Node)
    {
        org.apache.batik.dom.AbstractNode r0;
        org.w3c.dom.Node r1;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.AbstractNode;

        r1 := @parameter0: org.w3c.dom.Node;

        if r0 != r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.String lookupPrefix(java.lang.String)
    {
        org.w3c.dom.Attr $r6;
        short $s1, $s2;
        org.apache.batik.dom.AbstractNode r1, r4, r8, $r12;
        org.w3c.dom.Document $r2;
        org.w3c.dom.Node r14;
        int $i0, $i3;
        java.lang.String r0, $r5, $r9, $r11, $r13;
        org.w3c.dom.Element $r3, $r7, $r10;

        r1 := @this: org.apache.batik.dom.AbstractNode;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label01;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label02;

     label01:
        return null;

     label02:
        $s1 = virtualinvoke r1.<org.apache.batik.dom.AbstractNode: short getNodeType()>();

        $i3 = (int) $s1;

        tableswitch($i3)
        {
            case 1: goto label03;
            case 2: goto label06;
            case 3: goto label08;
            case 4: goto label08;
            case 5: goto label08;
            case 6: goto label05;
            case 7: goto label08;
            case 8: goto label08;
            case 9: goto label04;
            case 10: goto label05;
            case 11: goto label05;
            case 12: goto label05;
            default: goto label08;
        };

     label03:
        $r10 = (org.w3c.dom.Element) r1;

        $r11 = virtualinvoke r1.<org.apache.batik.dom.AbstractNode: java.lang.String lookupNamespacePrefix(java.lang.String,org.w3c.dom.Element)>(r0, $r10);

        return $r11;

     label04:
        $r2 = (org.w3c.dom.Document) r1;

        $r3 = interfaceinvoke $r2.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

        r4 = (org.apache.batik.dom.AbstractNode) $r3;

        $r5 = virtualinvoke r4.<org.apache.batik.dom.AbstractNode: java.lang.String lookupPrefix(java.lang.String)>(r0);

        return $r5;

     label05:
        return null;

     label06:
        $r6 = (org.w3c.dom.Attr) r1;

        $r7 = interfaceinvoke $r6.<org.w3c.dom.Attr: org.w3c.dom.Element getOwnerElement()>();

        r8 = (org.apache.batik.dom.AbstractNode) $r7;

        if r8 == null goto label07;

        $r9 = virtualinvoke r8.<org.apache.batik.dom.AbstractNode: java.lang.String lookupPrefix(java.lang.String)>(r0);

        return $r9;

     label07:
        return null;

     label08:
        r14 = virtualinvoke r1.<org.apache.batik.dom.AbstractNode: org.w3c.dom.Node getParentNode()>();

        goto label11;

     label09:
        $s2 = interfaceinvoke r14.<org.w3c.dom.Node: short getNodeType()>();

        if $s2 != 1 goto label10;

        $r12 = (org.apache.batik.dom.AbstractNode) r14;

        $r13 = virtualinvoke $r12.<org.apache.batik.dom.AbstractNode: java.lang.String lookupPrefix(java.lang.String)>(r0);

        return $r13;

     label10:
        r14 = interfaceinvoke r14.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

     label11:
        if r14 != null goto label09;

        return null;
    }

    protected java.lang.String lookupNamespacePrefix(java.lang.String, org.w3c.dom.Element)
    {
        short $s0;
        org.apache.batik.dom.AbstractNode r3, $r5, r12, $r14;
        org.w3c.dom.Node $r7, r17;
        int i1, $i2;
        org.w3c.dom.NamedNodeMap $r16;
        java.lang.String $r1, $r2, r4, $r6, $r8, $r9, $r10, $r11, $r13, $r15;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.w3c.dom.Element r0;

        r3 := @this: org.apache.batik.dom.AbstractNode;

        r4 := @parameter0: java.lang.String;

        r0 := @parameter1: org.w3c.dom.Element;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        $r2 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getPrefix()>();

        if $r1 == null goto label1;

        $z3 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z3 == 0 goto label1;

        if $r2 == null goto label1;

        $r14 = (org.apache.batik.dom.AbstractNode) r0;

        $r15 = virtualinvoke $r14.<org.apache.batik.dom.AbstractNode: java.lang.String lookupNamespaceURI(java.lang.String)>($r2);

        if $r15 == null goto label1;

        $z4 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z4 == 0 goto label1;

        return $r2;

     label1:
        $r16 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.NamedNodeMap getAttributes()>();

        if $r16 == null goto label5;

        i1 = 0;

        goto label4;

     label2:
        $r7 = interfaceinvoke $r16.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node item(int)>(i1);

        $r8 = "xmlns";

        $r9 = interfaceinvoke $r7.<org.w3c.dom.Node: java.lang.String getPrefix()>();

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z0 == 0 goto label3;

        $r10 = interfaceinvoke $r7.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        $z1 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z1 == 0 goto label3;

        $r11 = interfaceinvoke $r7.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        r12 = (org.apache.batik.dom.AbstractNode) r0;

        $r13 = virtualinvoke r12.<org.apache.batik.dom.AbstractNode: java.lang.String lookupNamespaceURI(java.lang.String)>($r11);

        if $r13 == null goto label3;

        $z2 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z2 == 0 goto label3;

        return $r11;

     label3:
        i1 = i1 + 1;

     label4:
        $i2 = interfaceinvoke $r16.<org.w3c.dom.NamedNodeMap: int getLength()>();

        if i1 < $i2 goto label2;

     label5:
        r17 = virtualinvoke r3.<org.apache.batik.dom.AbstractNode: org.w3c.dom.Node getParentNode()>();

        goto label8;

     label6:
        $s0 = interfaceinvoke r17.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 != 1 goto label7;

        $r5 = (org.apache.batik.dom.AbstractNode) r17;

        $r6 = virtualinvoke $r5.<org.apache.batik.dom.AbstractNode: java.lang.String lookupNamespacePrefix(java.lang.String,org.w3c.dom.Element)>(r4, r0);

        return $r6;

     label7:
        r17 = interfaceinvoke r17.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

     label8:
        if r17 != null goto label6;

        return null;
    }

    public boolean isDefaultNamespace(java.lang.String)
    {
        org.w3c.dom.Attr $r5;
        short $s0, $s1;
        org.apache.batik.dom.AbstractNode r0, r3, r7, r16;
        org.w3c.dom.Document $r1;
        org.w3c.dom.Node $r10, r15;
        int $i2, i3, $i4;
        org.w3c.dom.NamedNodeMap $r9;
        java.lang.String r4, $r8, $r11, $r12, $r13, $r14;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.w3c.dom.Element $r2, $r6;

        r0 := @this: org.apache.batik.dom.AbstractNode;

        r4 := @parameter0: java.lang.String;

        $s0 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: short getNodeType()>();

        $i4 = (int) $s0;

        tableswitch($i4)
        {
            case 1: goto label05;
            case 2: goto label03;
            case 3: goto label14;
            case 4: goto label14;
            case 5: goto label14;
            case 6: goto label02;
            case 7: goto label14;
            case 8: goto label14;
            case 9: goto label01;
            case 10: goto label02;
            case 11: goto label02;
            case 12: goto label02;
            default: goto label14;
        };

     label01:
        $r1 = (org.w3c.dom.Document) r0;

        $r2 = interfaceinvoke $r1.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

        r3 = (org.apache.batik.dom.AbstractNode) $r2;

        $z0 = virtualinvoke r3.<org.apache.batik.dom.AbstractNode: boolean isDefaultNamespace(java.lang.String)>(r4);

        return $z0;

     label02:
        return 0;

     label03:
        $r5 = (org.w3c.dom.Attr) r0;

        $r6 = interfaceinvoke $r5.<org.w3c.dom.Attr: org.w3c.dom.Element getOwnerElement()>();

        r7 = (org.apache.batik.dom.AbstractNode) $r6;

        if r7 == null goto label04;

        $z1 = virtualinvoke r7.<org.apache.batik.dom.AbstractNode: boolean isDefaultNamespace(java.lang.String)>(r4);

        return $z1;

     label04:
        return 0;

     label05:
        $r8 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: java.lang.String getPrefix()>();

        if $r8 != null goto label10;

        $r14 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: java.lang.String getNamespaceURI()>();

        if $r14 != null goto label06;

        if r4 == null goto label07;

     label06:
        if $r14 == null goto label08;

        $z5 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z5 == 0 goto label08;

     label07:
        $z6 = 1;

        goto label09;

     label08:
        $z6 = 0;

     label09:
        return $z6;

     label10:
        $r9 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.NamedNodeMap getAttributes()>();

        if $r9 == null goto label14;

        i3 = 0;

        goto label13;

     label11:
        $r10 = interfaceinvoke $r9.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node item(int)>(i3);

        $r11 = "xmlns";

        $r12 = interfaceinvoke $r10.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $z3 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z3 == 0 goto label12;

        $r13 = interfaceinvoke $r10.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        $z4 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        return $z4;

     label12:
        i3 = i3 + 1;

     label13:
        $i2 = interfaceinvoke $r9.<org.w3c.dom.NamedNodeMap: int getLength()>();

        if i3 < $i2 goto label11;

     label14:
        r15 = r0;

        goto label17;

     label15:
        $s1 = interfaceinvoke r15.<org.w3c.dom.Node: short getNodeType()>();

        if $s1 != 1 goto label16;

        r16 = (org.apache.batik.dom.AbstractNode) r15;

        $z2 = virtualinvoke r16.<org.apache.batik.dom.AbstractNode: boolean isDefaultNamespace(java.lang.String)>(r4);

        return $z2;

     label16:
        r15 = interfaceinvoke r15.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

     label17:
        if r15 != null goto label15;

        return 0;
    }

    public java.lang.String lookupNamespaceURI(java.lang.String)
    {
        org.w3c.dom.Attr $r6;
        short $s0, $s1;
        org.apache.batik.dom.AbstractNode r0, r3, r8, r20;
        org.w3c.dom.Document $r1;
        org.w3c.dom.Node $r12, r19;
        int $i2, i3, $i4, $i5;
        org.w3c.dom.NamedNodeMap $r10;
        java.lang.String r4, $r5, $r9, $r11, $r13, $r14, $r15, $r16, $r17, r18;
        boolean $z0, $z1, $z2;
        org.w3c.dom.Element $r2, $r7;

        r0 := @this: org.apache.batik.dom.AbstractNode;

        r4 := @parameter0: java.lang.String;

        $s0 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: short getNodeType()>();

        $i5 = (int) $s0;

        tableswitch($i5)
        {
            case 1: goto label05;
            case 2: goto label03;
            case 3: goto label13;
            case 4: goto label13;
            case 5: goto label13;
            case 6: goto label02;
            case 7: goto label13;
            case 8: goto label13;
            case 9: goto label01;
            case 10: goto label02;
            case 11: goto label02;
            case 12: goto label02;
            default: goto label13;
        };

     label01:
        $r1 = (org.w3c.dom.Document) r0;

        $r2 = interfaceinvoke $r1.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

        r3 = (org.apache.batik.dom.AbstractNode) $r2;

        $r5 = virtualinvoke r3.<org.apache.batik.dom.AbstractNode: java.lang.String lookupNamespaceURI(java.lang.String)>(r4);

        return $r5;

     label02:
        return null;

     label03:
        $r6 = (org.w3c.dom.Attr) r0;

        $r7 = interfaceinvoke $r6.<org.w3c.dom.Attr: org.w3c.dom.Element getOwnerElement()>();

        r8 = (org.apache.batik.dom.AbstractNode) $r7;

        if r8 == null goto label04;

        $r9 = virtualinvoke r8.<org.apache.batik.dom.AbstractNode: java.lang.String lookupNamespaceURI(java.lang.String)>(r4);

        return $r9;

     label04:
        return null;

     label05:
        $r10 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.NamedNodeMap getAttributes()>();

        if $r10 == null goto label13;

        i3 = 0;

        goto label12;

     label06:
        $r12 = interfaceinvoke $r10.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node item(int)>(i3);

        $r13 = interfaceinvoke $r12.<org.w3c.dom.Node: java.lang.String getPrefix()>();

        $r14 = interfaceinvoke $r12.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        r18 = $r14;

        if $r14 != null goto label07;

        r18 = interfaceinvoke $r12.<org.w3c.dom.Node: java.lang.String getNodeName()>();

     label07:
        $r15 = "xmlns";

        $z0 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>($r13);

        if $z0 == 0 goto label08;

        $z2 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: boolean compareStrings(java.lang.String,java.lang.String)>(r18, r4);

        if $z2 != 0 goto label09;

     label08:
        $r16 = "xmlns";

        $z1 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>(r18);

        if $z1 == 0 goto label11;

        if r4 != null goto label11;

     label09:
        $r17 = interfaceinvoke $r12.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        $i2 = virtualinvoke $r17.<java.lang.String: int length()>();

        if $i2 <= 0 goto label10;

        return $r17;

     label10:
        return null;

     label11:
        i3 = i3 + 1;

     label12:
        $i4 = interfaceinvoke $r10.<org.w3c.dom.NamedNodeMap: int getLength()>();

        if i3 < $i4 goto label06;

     label13:
        r19 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.Node getParentNode()>();

        goto label16;

     label14:
        $s1 = interfaceinvoke r19.<org.w3c.dom.Node: short getNodeType()>();

        if $s1 != 1 goto label15;

        r20 = (org.apache.batik.dom.AbstractNode) r19;

        $r11 = virtualinvoke r20.<org.apache.batik.dom.AbstractNode: java.lang.String lookupNamespaceURI(java.lang.String)>(r4);

        return $r11;

     label15:
        r19 = interfaceinvoke r19.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

     label16:
        if r19 != null goto label14;

        return null;
    }

    public boolean isEqualNode(org.w3c.dom.Node)
    {
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12;
        short $s0, $s1;
        org.apache.batik.dom.AbstractNode r1, $r16;
        org.w3c.dom.Node r0, $r14, $r15;
        int $i2, $i3, $i4;
        org.w3c.dom.NamedNodeMap $r12, $r13, $r23, $r24, $r25, $r26;
        java.lang.String $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r17, $r18, $r19, $r20, $r21, $r22;
        org.w3c.dom.DocumentType r27, r28;

        r1 := @this: org.apache.batik.dom.AbstractNode;

        r0 := @parameter0: org.w3c.dom.Node;

        if r0 != null goto label1;

        return 0;

     label1:
        $s0 = interfaceinvoke r0.<org.w3c.dom.Node: short getNodeType()>();

        $s1 = virtualinvoke r1.<org.apache.batik.dom.AbstractNode: short getNodeType()>();

        $i2 = (int) $s0;

        $i3 = (int) $s1;

        if $i2 != $i3 goto label2;

        $r2 = virtualinvoke r1.<org.apache.batik.dom.AbstractNode: java.lang.String getNodeName()>();

        $r3 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $z0 = virtualinvoke r1.<org.apache.batik.dom.AbstractNode: boolean compareStrings(java.lang.String,java.lang.String)>($r2, $r3);

        if $z0 == 0 goto label2;

        $r4 = virtualinvoke r1.<org.apache.batik.dom.AbstractNode: java.lang.String getLocalName()>();

        $r5 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $z1 = virtualinvoke r1.<org.apache.batik.dom.AbstractNode: boolean compareStrings(java.lang.String,java.lang.String)>($r4, $r5);

        if $z1 == 0 goto label2;

        $r6 = virtualinvoke r1.<org.apache.batik.dom.AbstractNode: java.lang.String getPrefix()>();

        $r7 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getPrefix()>();

        $z2 = virtualinvoke r1.<org.apache.batik.dom.AbstractNode: boolean compareStrings(java.lang.String,java.lang.String)>($r6, $r7);

        if $z2 == 0 goto label2;

        $r8 = virtualinvoke r1.<org.apache.batik.dom.AbstractNode: java.lang.String getNodeValue()>();

        $r9 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        $z3 = virtualinvoke r1.<org.apache.batik.dom.AbstractNode: boolean compareStrings(java.lang.String,java.lang.String)>($r8, $r9);

        if $z3 == 0 goto label2;

        $r10 = virtualinvoke r1.<org.apache.batik.dom.AbstractNode: java.lang.String getNodeValue()>();

        $r11 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        $z4 = virtualinvoke r1.<org.apache.batik.dom.AbstractNode: boolean compareStrings(java.lang.String,java.lang.String)>($r10, $r11);

        if $z4 == 0 goto label2;

        $r12 = virtualinvoke r1.<org.apache.batik.dom.AbstractNode: org.w3c.dom.NamedNodeMap getAttributes()>();

        $r13 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.NamedNodeMap getAttributes()>();

        $z5 = virtualinvoke r1.<org.apache.batik.dom.AbstractNode: boolean compareNamedNodeMaps(org.w3c.dom.NamedNodeMap,org.w3c.dom.NamedNodeMap)>($r12, $r13);

        if $z5 != 0 goto label3;

     label2:
        return 0;

     label3:
        $i4 = (int) $s0;

        if $i4 != 10 goto label5;

        r27 = (org.w3c.dom.DocumentType) r1;

        r28 = (org.w3c.dom.DocumentType) r0;

        $r17 = interfaceinvoke r27.<org.w3c.dom.DocumentType: java.lang.String getPublicId()>();

        $r18 = interfaceinvoke r28.<org.w3c.dom.DocumentType: java.lang.String getPublicId()>();

        $z7 = virtualinvoke r1.<org.apache.batik.dom.AbstractNode: boolean compareStrings(java.lang.String,java.lang.String)>($r17, $r18);

        if $z7 == 0 goto label4;

        $r19 = interfaceinvoke r27.<org.w3c.dom.DocumentType: java.lang.String getSystemId()>();

        $r20 = interfaceinvoke r28.<org.w3c.dom.DocumentType: java.lang.String getSystemId()>();

        $z8 = virtualinvoke r1.<org.apache.batik.dom.AbstractNode: boolean compareStrings(java.lang.String,java.lang.String)>($r19, $r20);

        if $z8 == 0 goto label4;

        $r21 = interfaceinvoke r27.<org.w3c.dom.DocumentType: java.lang.String getInternalSubset()>();

        $r22 = interfaceinvoke r28.<org.w3c.dom.DocumentType: java.lang.String getInternalSubset()>();

        $z9 = virtualinvoke r1.<org.apache.batik.dom.AbstractNode: boolean compareStrings(java.lang.String,java.lang.String)>($r21, $r22);

        if $z9 == 0 goto label4;

        $r23 = interfaceinvoke r27.<org.w3c.dom.DocumentType: org.w3c.dom.NamedNodeMap getEntities()>();

        $r24 = interfaceinvoke r28.<org.w3c.dom.DocumentType: org.w3c.dom.NamedNodeMap getEntities()>();

        $z10 = virtualinvoke r1.<org.apache.batik.dom.AbstractNode: boolean compareNamedNodeMaps(org.w3c.dom.NamedNodeMap,org.w3c.dom.NamedNodeMap)>($r23, $r24);

        if $z10 == 0 goto label4;

        $r25 = interfaceinvoke r27.<org.w3c.dom.DocumentType: org.w3c.dom.NamedNodeMap getNotations()>();

        $r26 = interfaceinvoke r28.<org.w3c.dom.DocumentType: org.w3c.dom.NamedNodeMap getNotations()>();

        $z11 = virtualinvoke r1.<org.apache.batik.dom.AbstractNode: boolean compareNamedNodeMaps(org.w3c.dom.NamedNodeMap,org.w3c.dom.NamedNodeMap)>($r25, $r26);

        if $z11 != 0 goto label5;

     label4:
        return 0;

     label5:
        $r14 = virtualinvoke r1.<org.apache.batik.dom.AbstractNode: org.w3c.dom.Node getFirstChild()>();

        $r15 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        if $r14 == null goto label6;

        if $r15 == null goto label6;

        $r16 = (org.apache.batik.dom.AbstractNode) $r14;

        $z6 = virtualinvoke $r16.<org.apache.batik.dom.AbstractNode: boolean isEqualNode(org.w3c.dom.Node)>($r15);

        if $z6 != 0 goto label6;

        return 0;

     label6:
        if $r14 != $r15 goto label7;

        $z12 = 1;

        goto label8;

     label7:
        $z12 = 0;

     label8:
        return $z12;
    }

    protected boolean compareStrings(java.lang.String, java.lang.String)
    {
        org.apache.batik.dom.AbstractNode r2;
        java.lang.String r0, r1;
        boolean $z0, $z1;

        r2 := @this: org.apache.batik.dom.AbstractNode;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label2;

     label1:
        if r0 != null goto label3;

        if r1 != null goto label3;

     label2:
        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        return $z1;
    }

    protected boolean compareNamedNodeMaps(org.w3c.dom.NamedNodeMap, org.w3c.dom.NamedNodeMap)
    {
        org.apache.batik.dom.AbstractNode $r5, r7;
        org.w3c.dom.Node $r2, r8;
        int $i0, $i1, i2;
        org.w3c.dom.NamedNodeMap r0, r1;
        java.lang.String $r3, $r4, $r6;
        boolean $z0;

        r7 := @this: org.apache.batik.dom.AbstractNode;

        r0 := @parameter0: org.w3c.dom.NamedNodeMap;

        r1 := @parameter1: org.w3c.dom.NamedNodeMap;

        if r0 != null goto label01;

        if r1 != null goto label02;

     label01:
        if r0 == null goto label03;

        if r1 != null goto label03;

     label02:
        return 0;

     label03:
        if r0 == null goto label10;

        $i0 = interfaceinvoke r0.<org.w3c.dom.NamedNodeMap: int getLength()>();

        $i1 = interfaceinvoke r1.<org.w3c.dom.NamedNodeMap: int getLength()>();

        if $i0 == $i1 goto label04;

        return 0;

     label04:
        i2 = 0;

        goto label09;

     label05:
        $r2 = interfaceinvoke r0.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node item(int)>(i2);

        $r3 = interfaceinvoke $r2.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        if $r3 == null goto label06;

        $r6 = interfaceinvoke $r2.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        r8 = interfaceinvoke r1.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node getNamedItemNS(java.lang.String,java.lang.String)>($r6, $r3);

        goto label07;

     label06:
        $r4 = interfaceinvoke $r2.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        r8 = interfaceinvoke r1.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node getNamedItem(java.lang.String)>($r4);

     label07:
        $r5 = (org.apache.batik.dom.AbstractNode) $r2;

        $z0 = virtualinvoke $r5.<org.apache.batik.dom.AbstractNode: boolean isEqualNode(org.w3c.dom.Node)>(r8);

        if $z0 != 0 goto label08;

        return 0;

     label08:
        i2 = i2 + 1;

     label09:
        if i2 < $i0 goto label05;

     label10:
        return 1;
    }

    public java.lang.Object getFeature(java.lang.String, java.lang.String)
    {
        org.apache.batik.dom.AbstractNode r0;
        java.lang.String r1, r2;

        r0 := @this: org.apache.batik.dom.AbstractNode;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        return null;
    }

    public java.lang.Object getUserData(java.lang.String)
    {
        org.apache.batik.dom.AbstractNode r0;
        java.util.HashMap $r1, $r3;
        java.lang.Object $r4;
        java.lang.String r2;

        r0 := @this: org.apache.batik.dom.AbstractNode;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.batik.dom.AbstractNode: java.util.HashMap userData>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r3 = r0.<org.apache.batik.dom.AbstractNode: java.util.HashMap userData>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r2);

        return $r4;
    }

    public java.lang.Object setUserData(java.lang.String, java.lang.Object, org.w3c.dom.UserDataHandler)
    {
        org.w3c.dom.UserDataHandler r4;
        java.util.HashMap $r1, $r5, $r6, $r8, $r9, $r11, $r12;
        org.apache.batik.dom.AbstractNode r0;
        java.lang.Object r2, $r7, $r10;
        java.lang.String r3;

        r0 := @this: org.apache.batik.dom.AbstractNode;

        r3 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        r4 := @parameter2: org.w3c.dom.UserDataHandler;

        $r1 = r0.<org.apache.batik.dom.AbstractNode: java.util.HashMap userData>;

        if $r1 != null goto label1;

        $r11 = new java.util.HashMap;

        specialinvoke $r11.<java.util.HashMap: void <init>()>();

        r0.<org.apache.batik.dom.AbstractNode: java.util.HashMap userData> = $r11;

        $r12 = new java.util.HashMap;

        specialinvoke $r12.<java.util.HashMap: void <init>()>();

        r0.<org.apache.batik.dom.AbstractNode: java.util.HashMap userDataHandlers> = $r12;

     label1:
        if r2 != null goto label2;

        $r8 = r0.<org.apache.batik.dom.AbstractNode: java.util.HashMap userData>;

        virtualinvoke $r8.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r3);

        $r9 = r0.<org.apache.batik.dom.AbstractNode: java.util.HashMap userDataHandlers>;

        $r10 = virtualinvoke $r9.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r3);

        return $r10;

     label2:
        $r5 = r0.<org.apache.batik.dom.AbstractNode: java.util.HashMap userDataHandlers>;

        virtualinvoke $r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r4);

        $r6 = r0.<org.apache.batik.dom.AbstractNode: java.util.HashMap userData>;

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r2);

        return $r7;
    }

    protected void fireUserDataHandlers(short, org.w3c.dom.Node, org.w3c.dom.Node)
    {
        java.util.HashMap $r2, $r3, $r8;
        short s0;
        org.apache.batik.dom.AbstractNode r1, r16;
        org.w3c.dom.Node r0, r15;
        java.lang.String $r13;
        boolean $z0;
        java.util.Map$Entry r7;
        java.util.Iterator $r5;
        org.w3c.dom.UserDataHandler r11;
        java.util.Set $r4;
        java.lang.Object $r6, $r9, $r10, $r12, $r14;

        r16 := @this: org.apache.batik.dom.AbstractNode;

        s0 := @parameter0: short;

        r0 := @parameter1: org.w3c.dom.Node;

        r15 := @parameter2: org.w3c.dom.Node;

        r1 = (org.apache.batik.dom.AbstractNode) r0;

        $r2 = r1.<org.apache.batik.dom.AbstractNode: java.util.HashMap userData>;

        if $r2 == null goto label3;

        $r3 = r1.<org.apache.batik.dom.AbstractNode: java.util.HashMap userData>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.util.Set entrySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.Map$Entry) $r6;

        $r8 = r1.<org.apache.batik.dom.AbstractNode: java.util.HashMap userDataHandlers>;

        $r9 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r10 = virtualinvoke $r8.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r9);

        r11 = (org.w3c.dom.UserDataHandler) $r10;

        if r11 == null goto label2;

        $r12 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r13 = (java.lang.String) $r12;

        $r14 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke r11.<org.w3c.dom.UserDataHandler: void handle(short,java.lang.String,java.lang.Object,org.w3c.dom.Node,org.w3c.dom.Node)>(s0, $r13, $r14, r0, r15);

     label2:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

     label3:
        return;
    }

    public void addEventListener(java.lang.String, org.w3c.dom.events.EventListener, boolean)
    {
        org.apache.batik.dom.AbstractNode r0;
        org.w3c.dom.events.EventListener r3;
        org.apache.batik.dom.events.EventSupport $r1, $r4;
        java.lang.String r2;
        boolean z0;

        r0 := @this: org.apache.batik.dom.AbstractNode;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: org.w3c.dom.events.EventListener;

        z0 := @parameter2: boolean;

        $r1 = r0.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.events.EventSupport eventSupport>;

        if $r1 != null goto label1;

        virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.events.EventSupport initializeEventSupport()>();

     label1:
        $r4 = r0.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.events.EventSupport eventSupport>;

        virtualinvoke $r4.<org.apache.batik.dom.events.EventSupport: void addEventListener(java.lang.String,org.w3c.dom.events.EventListener,boolean)>(r2, r3, z0);

        return;
    }

    public void addEventListenerNS(java.lang.String, java.lang.String, org.w3c.dom.events.EventListener, boolean, java.lang.Object)
    {
        org.apache.batik.dom.events.EventSupport $r1, $r6;
        org.apache.batik.dom.AbstractNode r0;
        org.w3c.dom.events.EventListener r3;
        int $i0;
        java.lang.Object r4;
        java.lang.String r2, r5;
        boolean z0;

        r0 := @this: org.apache.batik.dom.AbstractNode;

        r5 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.w3c.dom.events.EventListener;

        z0 := @parameter3: boolean;

        r4 := @parameter4: java.lang.Object;

        $r1 = r0.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.events.EventSupport eventSupport>;

        if $r1 != null goto label1;

        virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.events.EventSupport initializeEventSupport()>();

     label1:
        if r5 == null goto label2;

        $i0 = virtualinvoke r5.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

        r5 = null;

     label2:
        $r6 = r0.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.events.EventSupport eventSupport>;

        virtualinvoke $r6.<org.apache.batik.dom.events.EventSupport: void addEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean,java.lang.Object)>(r5, r2, r3, z0, r4);

        return;
    }

    public void removeEventListener(java.lang.String, org.w3c.dom.events.EventListener, boolean)
    {
        org.apache.batik.dom.AbstractNode r0;
        org.w3c.dom.events.EventListener r3;
        org.apache.batik.dom.events.EventSupport $r1, $r4;
        java.lang.String r2;
        boolean z0;

        r0 := @this: org.apache.batik.dom.AbstractNode;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: org.w3c.dom.events.EventListener;

        z0 := @parameter2: boolean;

        $r1 = r0.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.events.EventSupport eventSupport>;

        if $r1 == null goto label1;

        $r4 = r0.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.events.EventSupport eventSupport>;

        virtualinvoke $r4.<org.apache.batik.dom.events.EventSupport: void removeEventListener(java.lang.String,org.w3c.dom.events.EventListener,boolean)>(r2, r3, z0);

     label1:
        return;
    }

    public void removeEventListenerNS(java.lang.String, java.lang.String, org.w3c.dom.events.EventListener, boolean)
    {
        org.apache.batik.dom.events.EventSupport $r1, $r5;
        org.apache.batik.dom.AbstractNode r0;
        org.w3c.dom.events.EventListener r3;
        int $i0;
        java.lang.String r2, r4;
        boolean z0;

        r0 := @this: org.apache.batik.dom.AbstractNode;

        r4 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.w3c.dom.events.EventListener;

        z0 := @parameter3: boolean;

        $r1 = r0.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.events.EventSupport eventSupport>;

        if $r1 == null goto label2;

        if r4 == null goto label1;

        $i0 = virtualinvoke r4.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        r4 = null;

     label1:
        $r5 = r0.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.events.EventSupport eventSupport>;

        virtualinvoke $r5.<org.apache.batik.dom.events.EventSupport: void removeEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean)>(r4, r2, r3, z0);

     label2:
        return;
    }

    public org.apache.batik.dom.events.NodeEventTarget getParentNodeEventTarget()
    {
        org.apache.batik.dom.AbstractNode r0;
        org.w3c.dom.Node $r1;
        org.apache.batik.dom.events.NodeEventTarget $r2;

        r0 := @this: org.apache.batik.dom.AbstractNode;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.Node getXblParentNode()>();

        $r2 = (org.apache.batik.dom.events.NodeEventTarget) $r1;

        return $r2;
    }

    public boolean dispatchEvent(org.w3c.dom.events.Event) throws org.w3c.dom.events.EventException
    {
        org.apache.batik.dom.AbstractNode r0;
        org.w3c.dom.events.Event r2;
        org.apache.batik.dom.events.EventSupport $r1, $r3;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.AbstractNode;

        r2 := @parameter0: org.w3c.dom.events.Event;

        $r1 = r0.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.events.EventSupport eventSupport>;

        if $r1 != null goto label1;

        virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.events.EventSupport initializeEventSupport()>();

     label1:
        $r3 = r0.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.events.EventSupport eventSupport>;

        $z0 = virtualinvoke $r3.<org.apache.batik.dom.events.EventSupport: boolean dispatchEvent(org.apache.batik.dom.events.NodeEventTarget,org.w3c.dom.events.Event)>(r0, r2);

        return $z0;
    }

    public boolean willTriggerNS(java.lang.String, java.lang.String)
    {
        org.apache.batik.dom.AbstractNode r0;
        java.lang.String r1, r2;

        r0 := @this: org.apache.batik.dom.AbstractNode;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        return 1;
    }

    public boolean hasEventListenerNS(java.lang.String, java.lang.String)
    {
        org.apache.batik.dom.AbstractNode r0;
        int $i0;
        org.apache.batik.dom.events.EventSupport $r1, $r4;
        java.lang.String r2, r3;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.AbstractNode;

        r3 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r1 = r0.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.events.EventSupport eventSupport>;

        if $r1 != null goto label1;

        return 0;

     label1:
        if r3 == null goto label2;

        $i0 = virtualinvoke r3.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

        r3 = null;

     label2:
        $r4 = r0.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.events.EventSupport eventSupport>;

        $z0 = virtualinvoke $r4.<org.apache.batik.dom.events.EventSupport: boolean hasEventListenerNS(java.lang.String,java.lang.String)>(r3, r2);

        return $z0;
    }

    public org.apache.batik.dom.events.EventSupport getEventSupport()
    {
        org.apache.batik.dom.events.EventSupport $r1;
        org.apache.batik.dom.AbstractNode r0;

        r0 := @this: org.apache.batik.dom.AbstractNode;

        $r1 = r0.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.events.EventSupport eventSupport>;

        return $r1;
    }

    public org.apache.batik.dom.events.EventSupport initializeEventSupport()
    {
        org.apache.batik.dom.AbstractNode r0;
        org.apache.batik.dom.events.EventSupport $r1, $r2, $r6;
        org.apache.batik.dom.AbstractDocument $r3;
        org.apache.batik.dom.AbstractDOMImplementation r5;
        org.w3c.dom.DOMImplementation $r4;

        r0 := @this: org.apache.batik.dom.AbstractNode;

        $r1 = r0.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.events.EventSupport eventSupport>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.AbstractDocument getCurrentDocument()>();

        $r4 = virtualinvoke $r3.<org.apache.batik.dom.AbstractDocument: org.w3c.dom.DOMImplementation getImplementation()>();

        r5 = (org.apache.batik.dom.AbstractDOMImplementation) $r4;

        $r6 = virtualinvoke r5.<org.apache.batik.dom.AbstractDOMImplementation: org.apache.batik.dom.events.EventSupport createEventSupport(org.apache.batik.dom.AbstractNode)>(r0);

        r0.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.events.EventSupport eventSupport> = $r6;

        virtualinvoke $r3.<org.apache.batik.dom.AbstractDocument: void setEventsEnabled(boolean)>(1);

     label1:
        $r2 = r0.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.events.EventSupport eventSupport>;

        return $r2;
    }

    public void fireDOMNodeInsertedIntoDocumentEvent()
    {
        org.apache.batik.dom.AbstractNode r0;
        org.w3c.dom.events.Event $r2;
        org.apache.batik.dom.AbstractDocument $r1;
        org.apache.batik.dom.events.DOMMutationEvent r3;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.AbstractNode;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.AbstractDocument getCurrentDocument()>();

        $z0 = virtualinvoke $r1.<org.apache.batik.dom.AbstractDocument: boolean getEventsEnabled()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke $r1.<org.apache.batik.dom.AbstractDocument: org.w3c.dom.events.Event createEvent(java.lang.String)>("MutationEvents");

        r3 = (org.apache.batik.dom.events.DOMMutationEvent) $r2;

        virtualinvoke r3.<org.apache.batik.dom.events.DOMMutationEvent: void initMutationEventNS(java.lang.String,java.lang.String,boolean,boolean,org.w3c.dom.Node,java.lang.String,java.lang.String,java.lang.String,short)>("http://www.w3.org/2001/xml-events", "DOMNodeInsertedIntoDocument", 1, 0, null, null, null, null, 2);

        virtualinvoke r0.<org.apache.batik.dom.AbstractNode: boolean dispatchEvent(org.w3c.dom.events.Event)>(r3);

     label1:
        return;
    }

    public void fireDOMNodeRemovedFromDocumentEvent()
    {
        org.apache.batik.dom.AbstractNode r0;
        org.w3c.dom.events.Event $r2;
        org.apache.batik.dom.AbstractDocument $r1;
        org.apache.batik.dom.events.DOMMutationEvent r3;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.AbstractNode;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.AbstractDocument getCurrentDocument()>();

        $z0 = virtualinvoke $r1.<org.apache.batik.dom.AbstractDocument: boolean getEventsEnabled()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke $r1.<org.apache.batik.dom.AbstractDocument: org.w3c.dom.events.Event createEvent(java.lang.String)>("MutationEvents");

        r3 = (org.apache.batik.dom.events.DOMMutationEvent) $r2;

        virtualinvoke r3.<org.apache.batik.dom.events.DOMMutationEvent: void initMutationEventNS(java.lang.String,java.lang.String,boolean,boolean,org.w3c.dom.Node,java.lang.String,java.lang.String,java.lang.String,short)>("http://www.w3.org/2001/xml-events", "DOMNodeRemovedFromDocument", 1, 0, null, null, null, null, 3);

        virtualinvoke r0.<org.apache.batik.dom.AbstractNode: boolean dispatchEvent(org.w3c.dom.events.Event)>(r3);

     label1:
        return;
    }

    protected void fireDOMCharacterDataModifiedEvent(java.lang.String, java.lang.String)
    {
        org.apache.batik.dom.AbstractNode r0;
        org.w3c.dom.events.Event $r2;
        org.apache.batik.dom.AbstractDocument $r1;
        org.apache.batik.dom.events.DOMMutationEvent r3;
        java.lang.String r4, r5;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.AbstractNode;

        r4 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.AbstractDocument getCurrentDocument()>();

        $z0 = virtualinvoke $r1.<org.apache.batik.dom.AbstractDocument: boolean getEventsEnabled()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke $r1.<org.apache.batik.dom.AbstractDocument: org.w3c.dom.events.Event createEvent(java.lang.String)>("MutationEvents");

        r3 = (org.apache.batik.dom.events.DOMMutationEvent) $r2;

        virtualinvoke r3.<org.apache.batik.dom.events.DOMMutationEvent: void initMutationEventNS(java.lang.String,java.lang.String,boolean,boolean,org.w3c.dom.Node,java.lang.String,java.lang.String,java.lang.String,short)>("http://www.w3.org/2001/xml-events", "DOMCharacterDataModified", 1, 0, null, r4, r5, null, 1);

        virtualinvoke r0.<org.apache.batik.dom.AbstractNode: boolean dispatchEvent(org.w3c.dom.events.Event)>(r3);

     label1:
        return;
    }

    protected org.apache.batik.dom.AbstractDocument getCurrentDocument()
    {
        org.apache.batik.dom.AbstractDocument $r1;
        org.apache.batik.dom.AbstractNode r0;

        r0 := @this: org.apache.batik.dom.AbstractNode;

        $r1 = r0.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.AbstractDocument ownerDocument>;

        return $r1;
    }

    protected abstract org.w3c.dom.Node newNode();

    protected org.w3c.dom.Node export(org.w3c.dom.Node, org.apache.batik.dom.AbstractDocument)
    {
        org.apache.batik.dom.AbstractNode r1, r3;
        org.w3c.dom.Node r0;
        org.apache.batik.dom.AbstractDocument r2;

        r3 := @this: org.apache.batik.dom.AbstractNode;

        r0 := @parameter0: org.w3c.dom.Node;

        r2 := @parameter1: org.apache.batik.dom.AbstractDocument;

        r1 = (org.apache.batik.dom.AbstractNode) r0;

        r1.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.AbstractDocument ownerDocument> = r2;

        virtualinvoke r1.<org.apache.batik.dom.AbstractNode: void setReadonly(boolean)>(0);

        return r0;
    }

    protected org.w3c.dom.Node deepExport(org.w3c.dom.Node, org.apache.batik.dom.AbstractDocument)
    {
        org.apache.batik.dom.AbstractNode r1, r3;
        org.w3c.dom.Node r0;
        org.apache.batik.dom.AbstractDocument r2;

        r3 := @this: org.apache.batik.dom.AbstractNode;

        r0 := @parameter0: org.w3c.dom.Node;

        r2 := @parameter1: org.apache.batik.dom.AbstractDocument;

        r1 = (org.apache.batik.dom.AbstractNode) r0;

        r1.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.AbstractDocument ownerDocument> = r2;

        virtualinvoke r1.<org.apache.batik.dom.AbstractNode: void setReadonly(boolean)>(0);

        return r0;
    }

    protected org.w3c.dom.Node copyInto(org.w3c.dom.Node)
    {
        org.apache.batik.dom.AbstractNode r1, r2;
        org.w3c.dom.Node r0;
        org.apache.batik.dom.AbstractDocument $r3;

        r2 := @this: org.apache.batik.dom.AbstractNode;

        r0 := @parameter0: org.w3c.dom.Node;

        r1 = (org.apache.batik.dom.AbstractNode) r0;

        $r3 = r2.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.AbstractDocument ownerDocument>;

        r1.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.AbstractDocument ownerDocument> = $r3;

        return r0;
    }

    protected org.w3c.dom.Node deepCopyInto(org.w3c.dom.Node)
    {
        org.apache.batik.dom.AbstractNode r1, r2;
        org.w3c.dom.Node r0;
        org.apache.batik.dom.AbstractDocument $r3;

        r2 := @this: org.apache.batik.dom.AbstractNode;

        r0 := @parameter0: org.w3c.dom.Node;

        r1 = (org.apache.batik.dom.AbstractNode) r0;

        $r3 = r2.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.AbstractDocument ownerDocument>;

        r1.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.AbstractDocument ownerDocument> = $r3;

        return r0;
    }

    protected void checkChildType(org.w3c.dom.Node, boolean)
    {
        java.lang.Object[] $r1;
        java.lang.Integer $r6;
        short $s0;
        org.apache.batik.dom.AbstractNode r0;
        org.w3c.dom.DOMException $r4;
        org.w3c.dom.Node r5;
        int $i1;
        java.lang.String $r3;
        boolean z0;

        r0 := @this: org.apache.batik.dom.AbstractNode;

        r5 := @parameter0: org.w3c.dom.Node;

        z0 := @parameter1: boolean;

        $r1 = newarray (java.lang.Object)[2];

        $r6 = new java.lang.Integer;

        $s0 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: short getNodeType()>();

        $i1 = (int) $s0;

        specialinvoke $r6.<java.lang.Integer: void <init>(int)>($i1);

        $r1[0] = $r6;

        $r3 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: java.lang.String getNodeName()>();

        $r1[1] = $r3;

        $r4 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(3, "children.not.allowed", $r1);

        throw $r4;
    }

    public org.w3c.dom.Node getXblParentNode()
    {
        org.apache.batik.dom.AbstractNode r0;
        org.w3c.dom.Node $r3;
        org.apache.batik.dom.AbstractDocument $r1;
        org.apache.batik.dom.xbl.XBLManager $r2;

        r0 := @this: org.apache.batik.dom.AbstractNode;

        $r1 = r0.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.AbstractDocument ownerDocument>;

        $r2 = virtualinvoke $r1.<org.apache.batik.dom.AbstractDocument: org.apache.batik.dom.xbl.XBLManager getXBLManager()>();

        $r3 = interfaceinvoke $r2.<org.apache.batik.dom.xbl.XBLManager: org.w3c.dom.Node getXblParentNode(org.w3c.dom.Node)>(r0);

        return $r3;
    }

    public org.w3c.dom.NodeList getXblChildNodes()
    {
        org.apache.batik.dom.AbstractNode r0;
        org.w3c.dom.NodeList $r3;
        org.apache.batik.dom.AbstractDocument $r1;
        org.apache.batik.dom.xbl.XBLManager $r2;

        r0 := @this: org.apache.batik.dom.AbstractNode;

        $r1 = r0.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.AbstractDocument ownerDocument>;

        $r2 = virtualinvoke $r1.<org.apache.batik.dom.AbstractDocument: org.apache.batik.dom.xbl.XBLManager getXBLManager()>();

        $r3 = interfaceinvoke $r2.<org.apache.batik.dom.xbl.XBLManager: org.w3c.dom.NodeList getXblChildNodes(org.w3c.dom.Node)>(r0);

        return $r3;
    }

    public org.w3c.dom.NodeList getXblScopedChildNodes()
    {
        org.apache.batik.dom.AbstractNode r0;
        org.w3c.dom.NodeList $r3;
        org.apache.batik.dom.AbstractDocument $r1;
        org.apache.batik.dom.xbl.XBLManager $r2;

        r0 := @this: org.apache.batik.dom.AbstractNode;

        $r1 = r0.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.AbstractDocument ownerDocument>;

        $r2 = virtualinvoke $r1.<org.apache.batik.dom.AbstractDocument: org.apache.batik.dom.xbl.XBLManager getXBLManager()>();

        $r3 = interfaceinvoke $r2.<org.apache.batik.dom.xbl.XBLManager: org.w3c.dom.NodeList getXblScopedChildNodes(org.w3c.dom.Node)>(r0);

        return $r3;
    }

    public org.w3c.dom.Node getXblFirstChild()
    {
        org.apache.batik.dom.AbstractNode r0;
        org.w3c.dom.Node $r3;
        org.apache.batik.dom.AbstractDocument $r1;
        org.apache.batik.dom.xbl.XBLManager $r2;

        r0 := @this: org.apache.batik.dom.AbstractNode;

        $r1 = r0.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.AbstractDocument ownerDocument>;

        $r2 = virtualinvoke $r1.<org.apache.batik.dom.AbstractDocument: org.apache.batik.dom.xbl.XBLManager getXBLManager()>();

        $r3 = interfaceinvoke $r2.<org.apache.batik.dom.xbl.XBLManager: org.w3c.dom.Node getXblFirstChild(org.w3c.dom.Node)>(r0);

        return $r3;
    }

    public org.w3c.dom.Node getXblLastChild()
    {
        org.apache.batik.dom.AbstractNode r0;
        org.w3c.dom.Node $r3;
        org.apache.batik.dom.AbstractDocument $r1;
        org.apache.batik.dom.xbl.XBLManager $r2;

        r0 := @this: org.apache.batik.dom.AbstractNode;

        $r1 = r0.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.AbstractDocument ownerDocument>;

        $r2 = virtualinvoke $r1.<org.apache.batik.dom.AbstractDocument: org.apache.batik.dom.xbl.XBLManager getXBLManager()>();

        $r3 = interfaceinvoke $r2.<org.apache.batik.dom.xbl.XBLManager: org.w3c.dom.Node getXblLastChild(org.w3c.dom.Node)>(r0);

        return $r3;
    }

    public org.w3c.dom.Node getXblPreviousSibling()
    {
        org.apache.batik.dom.AbstractNode r0;
        org.w3c.dom.Node $r3;
        org.apache.batik.dom.AbstractDocument $r1;
        org.apache.batik.dom.xbl.XBLManager $r2;

        r0 := @this: org.apache.batik.dom.AbstractNode;

        $r1 = r0.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.AbstractDocument ownerDocument>;

        $r2 = virtualinvoke $r1.<org.apache.batik.dom.AbstractDocument: org.apache.batik.dom.xbl.XBLManager getXBLManager()>();

        $r3 = interfaceinvoke $r2.<org.apache.batik.dom.xbl.XBLManager: org.w3c.dom.Node getXblPreviousSibling(org.w3c.dom.Node)>(r0);

        return $r3;
    }

    public org.w3c.dom.Node getXblNextSibling()
    {
        org.apache.batik.dom.AbstractNode r0;
        org.w3c.dom.Node $r3;
        org.apache.batik.dom.AbstractDocument $r1;
        org.apache.batik.dom.xbl.XBLManager $r2;

        r0 := @this: org.apache.batik.dom.AbstractNode;

        $r1 = r0.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.AbstractDocument ownerDocument>;

        $r2 = virtualinvoke $r1.<org.apache.batik.dom.AbstractDocument: org.apache.batik.dom.xbl.XBLManager getXBLManager()>();

        $r3 = interfaceinvoke $r2.<org.apache.batik.dom.xbl.XBLManager: org.w3c.dom.Node getXblNextSibling(org.w3c.dom.Node)>(r0);

        return $r3;
    }

    public org.w3c.dom.Element getXblFirstElementChild()
    {
        org.apache.batik.dom.AbstractNode r0;
        org.w3c.dom.Element $r3;
        org.apache.batik.dom.AbstractDocument $r1;
        org.apache.batik.dom.xbl.XBLManager $r2;

        r0 := @this: org.apache.batik.dom.AbstractNode;

        $r1 = r0.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.AbstractDocument ownerDocument>;

        $r2 = virtualinvoke $r1.<org.apache.batik.dom.AbstractDocument: org.apache.batik.dom.xbl.XBLManager getXBLManager()>();

        $r3 = interfaceinvoke $r2.<org.apache.batik.dom.xbl.XBLManager: org.w3c.dom.Element getXblFirstElementChild(org.w3c.dom.Node)>(r0);

        return $r3;
    }

    public org.w3c.dom.Element getXblLastElementChild()
    {
        org.apache.batik.dom.AbstractNode r0;
        org.w3c.dom.Element $r3;
        org.apache.batik.dom.AbstractDocument $r1;
        org.apache.batik.dom.xbl.XBLManager $r2;

        r0 := @this: org.apache.batik.dom.AbstractNode;

        $r1 = r0.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.AbstractDocument ownerDocument>;

        $r2 = virtualinvoke $r1.<org.apache.batik.dom.AbstractDocument: org.apache.batik.dom.xbl.XBLManager getXBLManager()>();

        $r3 = interfaceinvoke $r2.<org.apache.batik.dom.xbl.XBLManager: org.w3c.dom.Element getXblLastElementChild(org.w3c.dom.Node)>(r0);

        return $r3;
    }

    public org.w3c.dom.Element getXblPreviousElementSibling()
    {
        org.apache.batik.dom.AbstractNode r0;
        org.w3c.dom.Element $r3;
        org.apache.batik.dom.AbstractDocument $r1;
        org.apache.batik.dom.xbl.XBLManager $r2;

        r0 := @this: org.apache.batik.dom.AbstractNode;

        $r1 = r0.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.AbstractDocument ownerDocument>;

        $r2 = virtualinvoke $r1.<org.apache.batik.dom.AbstractDocument: org.apache.batik.dom.xbl.XBLManager getXBLManager()>();

        $r3 = interfaceinvoke $r2.<org.apache.batik.dom.xbl.XBLManager: org.w3c.dom.Element getXblPreviousElementSibling(org.w3c.dom.Node)>(r0);

        return $r3;
    }

    public org.w3c.dom.Element getXblNextElementSibling()
    {
        org.apache.batik.dom.AbstractNode r0;
        org.w3c.dom.Element $r3;
        org.apache.batik.dom.AbstractDocument $r1;
        org.apache.batik.dom.xbl.XBLManager $r2;

        r0 := @this: org.apache.batik.dom.AbstractNode;

        $r1 = r0.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.AbstractDocument ownerDocument>;

        $r2 = virtualinvoke $r1.<org.apache.batik.dom.AbstractDocument: org.apache.batik.dom.xbl.XBLManager getXBLManager()>();

        $r3 = interfaceinvoke $r2.<org.apache.batik.dom.xbl.XBLManager: org.w3c.dom.Element getXblNextElementSibling(org.w3c.dom.Node)>(r0);

        return $r3;
    }

    public org.w3c.dom.Element getXblBoundElement()
    {
        org.apache.batik.dom.AbstractNode r0;
        org.w3c.dom.Element $r3;
        org.apache.batik.dom.AbstractDocument $r1;
        org.apache.batik.dom.xbl.XBLManager $r2;

        r0 := @this: org.apache.batik.dom.AbstractNode;

        $r1 = r0.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.AbstractDocument ownerDocument>;

        $r2 = virtualinvoke $r1.<org.apache.batik.dom.AbstractDocument: org.apache.batik.dom.xbl.XBLManager getXBLManager()>();

        $r3 = interfaceinvoke $r2.<org.apache.batik.dom.xbl.XBLManager: org.w3c.dom.Element getXblBoundElement(org.w3c.dom.Node)>(r0);

        return $r3;
    }

    public org.w3c.dom.Element getXblShadowTree()
    {
        org.apache.batik.dom.AbstractNode r0;
        org.w3c.dom.Element $r3;
        org.apache.batik.dom.AbstractDocument $r1;
        org.apache.batik.dom.xbl.XBLManager $r2;

        r0 := @this: org.apache.batik.dom.AbstractNode;

        $r1 = r0.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.AbstractDocument ownerDocument>;

        $r2 = virtualinvoke $r1.<org.apache.batik.dom.AbstractDocument: org.apache.batik.dom.xbl.XBLManager getXBLManager()>();

        $r3 = interfaceinvoke $r2.<org.apache.batik.dom.xbl.XBLManager: org.w3c.dom.Element getXblShadowTree(org.w3c.dom.Node)>(r0);

        return $r3;
    }

    public org.w3c.dom.NodeList getXblDefinitions()
    {
        org.apache.batik.dom.AbstractNode r0;
        org.w3c.dom.NodeList $r3;
        org.apache.batik.dom.AbstractDocument $r1;
        org.apache.batik.dom.xbl.XBLManager $r2;

        r0 := @this: org.apache.batik.dom.AbstractNode;

        $r1 = r0.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.AbstractDocument ownerDocument>;

        $r2 = virtualinvoke $r1.<org.apache.batik.dom.AbstractDocument: org.apache.batik.dom.xbl.XBLManager getXBLManager()>();

        $r3 = interfaceinvoke $r2.<org.apache.batik.dom.xbl.XBLManager: org.w3c.dom.NodeList getXblDefinitions(org.w3c.dom.Node)>(r0);

        return $r3;
    }

    public java.lang.Object getManagerData()
    {
        java.lang.Object $r1;
        org.apache.batik.dom.AbstractNode r0;

        r0 := @this: org.apache.batik.dom.AbstractNode;

        $r1 = r0.<org.apache.batik.dom.AbstractNode: java.lang.Object managerData>;

        return $r1;
    }

    public void setManagerData(java.lang.Object)
    {
        java.lang.Object r1;
        org.apache.batik.dom.AbstractNode r0;

        r0 := @this: org.apache.batik.dom.AbstractNode;

        r1 := @parameter0: java.lang.Object;

        r0.<org.apache.batik.dom.AbstractNode: java.lang.Object managerData> = r1;

        return;
    }

    public abstract void setReadonly(boolean);

    public abstract boolean isReadonly();

    public abstract short getNodeType();

    public abstract java.lang.String getNodeName();

    static void <clinit>()
    {
        org.apache.batik.dom.AbstractNode$1 $r0;

        <org.apache.batik.dom.AbstractNode: short DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC> = 32;

        <org.apache.batik.dom.AbstractNode: short DOCUMENT_POSITION_CONTAINED_BY> = 16;

        <org.apache.batik.dom.AbstractNode: short DOCUMENT_POSITION_CONTAINS> = 8;

        <org.apache.batik.dom.AbstractNode: short DOCUMENT_POSITION_FOLLOWING> = 4;

        <org.apache.batik.dom.AbstractNode: short DOCUMENT_POSITION_PRECEDING> = 2;

        <org.apache.batik.dom.AbstractNode: short DOCUMENT_POSITION_DISCONNECTED> = 1;

        $r0 = new org.apache.batik.dom.AbstractNode$1;

        specialinvoke $r0.<org.apache.batik.dom.AbstractNode$1: void <init>()>();

        <org.apache.batik.dom.AbstractNode: org.w3c.dom.NodeList EMPTY_NODE_LIST> = $r0;

        return;
    }
}
