public final class org.apache.log4j.spi.NOPLoggerRepository extends java.lang.Object implements org.apache.log4j.spi.LoggerRepository
{

    public void <init>()
    {
        org.apache.log4j.spi.NOPLoggerRepository r0;

        r0 := @this: org.apache.log4j.spi.NOPLoggerRepository;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void addHierarchyEventListener(org.apache.log4j.spi.HierarchyEventListener)
    {
        org.apache.log4j.spi.HierarchyEventListener r1;
        org.apache.log4j.spi.NOPLoggerRepository r0;

        r0 := @this: org.apache.log4j.spi.NOPLoggerRepository;

        r1 := @parameter0: org.apache.log4j.spi.HierarchyEventListener;

        return;
    }

    public boolean isDisabled(int)
    {
        int i0;
        org.apache.log4j.spi.NOPLoggerRepository r0;

        r0 := @this: org.apache.log4j.spi.NOPLoggerRepository;

        i0 := @parameter0: int;

        return 1;
    }

    public void setThreshold(org.apache.log4j.Level)
    {
        org.apache.log4j.spi.NOPLoggerRepository r0;
        org.apache.log4j.Level r1;

        r0 := @this: org.apache.log4j.spi.NOPLoggerRepository;

        r1 := @parameter0: org.apache.log4j.Level;

        return;
    }

    public void setThreshold(java.lang.String)
    {
        java.lang.String r1;
        org.apache.log4j.spi.NOPLoggerRepository r0;

        r0 := @this: org.apache.log4j.spi.NOPLoggerRepository;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public void emitNoAppenderWarning(org.apache.log4j.Category)
    {
        org.apache.log4j.spi.NOPLoggerRepository r0;
        org.apache.log4j.Category r1;

        r0 := @this: org.apache.log4j.spi.NOPLoggerRepository;

        r1 := @parameter0: org.apache.log4j.Category;

        return;
    }

    public org.apache.log4j.Level getThreshold()
    {
        org.apache.log4j.spi.NOPLoggerRepository r1;
        org.apache.log4j.Level $r0;

        r1 := @this: org.apache.log4j.spi.NOPLoggerRepository;

        $r0 = <org.apache.log4j.Level: org.apache.log4j.Level OFF>;

        return $r0;
    }

    public org.apache.log4j.Logger getLogger(java.lang.String)
    {
        java.lang.String r2;
        org.apache.log4j.spi.NOPLogger $r0;
        org.apache.log4j.spi.NOPLoggerRepository r1;

        r1 := @this: org.apache.log4j.spi.NOPLoggerRepository;

        r2 := @parameter0: java.lang.String;

        $r0 = new org.apache.log4j.spi.NOPLogger;

        specialinvoke $r0.<org.apache.log4j.spi.NOPLogger: void <init>(org.apache.log4j.spi.NOPLoggerRepository,java.lang.String)>(r1, r2);

        return $r0;
    }

    public org.apache.log4j.Logger getLogger(java.lang.String, org.apache.log4j.spi.LoggerFactory)
    {
        org.apache.log4j.spi.NOPLogger $r0;
        org.apache.log4j.spi.LoggerFactory r3;
        java.lang.String r2;
        org.apache.log4j.spi.NOPLoggerRepository r1;

        r1 := @this: org.apache.log4j.spi.NOPLoggerRepository;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: org.apache.log4j.spi.LoggerFactory;

        $r0 = new org.apache.log4j.spi.NOPLogger;

        specialinvoke $r0.<org.apache.log4j.spi.NOPLogger: void <init>(org.apache.log4j.spi.NOPLoggerRepository,java.lang.String)>(r1, r2);

        return $r0;
    }

    public org.apache.log4j.Logger getRootLogger()
    {
        org.apache.log4j.spi.NOPLogger $r0;
        org.apache.log4j.spi.NOPLoggerRepository r1;

        r1 := @this: org.apache.log4j.spi.NOPLoggerRepository;

        $r0 = new org.apache.log4j.spi.NOPLogger;

        specialinvoke $r0.<org.apache.log4j.spi.NOPLogger: void <init>(org.apache.log4j.spi.NOPLoggerRepository,java.lang.String)>(r1, "root");

        return $r0;
    }

    public org.apache.log4j.Logger exists(java.lang.String)
    {
        java.lang.String r1;
        org.apache.log4j.spi.NOPLoggerRepository r0;

        r0 := @this: org.apache.log4j.spi.NOPLoggerRepository;

        r1 := @parameter0: java.lang.String;

        return null;
    }

    public void shutdown()
    {
        org.apache.log4j.spi.NOPLoggerRepository r0;

        r0 := @this: org.apache.log4j.spi.NOPLoggerRepository;

        return;
    }

    public java.util.Enumeration getCurrentLoggers()
    {
        java.util.Vector $r0;
        java.util.Enumeration $r1;
        org.apache.log4j.spi.NOPLoggerRepository r2;

        r2 := @this: org.apache.log4j.spi.NOPLoggerRepository;

        $r0 = new java.util.Vector;

        specialinvoke $r0.<java.util.Vector: void <init>()>();

        $r1 = virtualinvoke $r0.<java.util.Vector: java.util.Enumeration elements()>();

        return $r1;
    }

    public java.util.Enumeration getCurrentCategories()
    {
        org.apache.log4j.spi.NOPLoggerRepository r0;
        java.util.Enumeration $r1;

        r0 := @this: org.apache.log4j.spi.NOPLoggerRepository;

        $r1 = virtualinvoke r0.<org.apache.log4j.spi.NOPLoggerRepository: java.util.Enumeration getCurrentLoggers()>();

        return $r1;
    }

    public void fireAddAppenderEvent(org.apache.log4j.Category, org.apache.log4j.Appender)
    {
        org.apache.log4j.Appender r2;
        org.apache.log4j.spi.NOPLoggerRepository r0;
        org.apache.log4j.Category r1;

        r0 := @this: org.apache.log4j.spi.NOPLoggerRepository;

        r1 := @parameter0: org.apache.log4j.Category;

        r2 := @parameter1: org.apache.log4j.Appender;

        return;
    }

    public void resetConfiguration()
    {
        org.apache.log4j.spi.NOPLoggerRepository r0;

        r0 := @this: org.apache.log4j.spi.NOPLoggerRepository;

        return;
    }
}
