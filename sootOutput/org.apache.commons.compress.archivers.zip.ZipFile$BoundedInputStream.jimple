class org.apache.commons.compress.archivers.zip.ZipFile$BoundedInputStream extends java.io.InputStream
{
    private long remaining;
    private long loc;
    private boolean addDummyByte;
    final org.apache.commons.compress.archivers.zip.ZipFile this$0;

    void <init>(org.apache.commons.compress.archivers.zip.ZipFile, long, long)
    {
        org.apache.commons.compress.archivers.zip.ZipFile$BoundedInputStream r0;
        long l0, l1;
        org.apache.commons.compress.archivers.zip.ZipFile r1;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipFile$BoundedInputStream;

        r1 := @parameter0: org.apache.commons.compress.archivers.zip.ZipFile;

        l1 := @parameter1: long;

        l0 := @parameter2: long;

        r0.<org.apache.commons.compress.archivers.zip.ZipFile$BoundedInputStream: org.apache.commons.compress.archivers.zip.ZipFile this$0> = r1;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        r0.<org.apache.commons.compress.archivers.zip.ZipFile$BoundedInputStream: boolean addDummyByte> = 0;

        r0.<org.apache.commons.compress.archivers.zip.ZipFile$BoundedInputStream: long remaining> = l0;

        r0.<org.apache.commons.compress.archivers.zip.ZipFile$BoundedInputStream: long loc> = l1;

        return;
    }

    public int read() throws java.io.IOException
    {
        java.lang.Throwable $r7;
        java.io.RandomAccessFile $r2, $r4, $r6;
        long $l0, $l1, $l3, $l4;
        byte $b2;
        org.apache.commons.compress.archivers.zip.ZipFile$BoundedInputStream r0;
        int $i5, $i6, $i8;
        boolean $z0;
        org.apache.commons.compress.archivers.zip.ZipFile $r1, $r3, $r5;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipFile$BoundedInputStream;

        $l0 = r0.<org.apache.commons.compress.archivers.zip.ZipFile$BoundedInputStream: long remaining>;

        $l1 = $l0 - 1L;

        r0.<org.apache.commons.compress.archivers.zip.ZipFile$BoundedInputStream: long remaining> = $l1;

        $b2 = $l0 cmp 0L;

        $i6 = (int) $b2;

        if $i6 > 0 goto label2;

        $z0 = r0.<org.apache.commons.compress.archivers.zip.ZipFile$BoundedInputStream: boolean addDummyByte>;

        if $z0 == 0 goto label1;

        r0.<org.apache.commons.compress.archivers.zip.ZipFile$BoundedInputStream: boolean addDummyByte> = 0;

        return 0;

     label1:
        $i8 = (int) -1;

        return $i8;

     label2:
        $r1 = r0.<org.apache.commons.compress.archivers.zip.ZipFile$BoundedInputStream: org.apache.commons.compress.archivers.zip.ZipFile this$0>;

        $r2 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipFile: java.io.RandomAccessFile access$600(org.apache.commons.compress.archivers.zip.ZipFile)>($r1);

        entermonitor $r2;

     label3:
        $r3 = r0.<org.apache.commons.compress.archivers.zip.ZipFile$BoundedInputStream: org.apache.commons.compress.archivers.zip.ZipFile this$0>;

        $r4 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipFile: java.io.RandomAccessFile access$600(org.apache.commons.compress.archivers.zip.ZipFile)>($r3);

        $l3 = r0.<org.apache.commons.compress.archivers.zip.ZipFile$BoundedInputStream: long loc>;

        $l4 = $l3 + 1L;

        r0.<org.apache.commons.compress.archivers.zip.ZipFile$BoundedInputStream: long loc> = $l4;

        virtualinvoke $r4.<java.io.RandomAccessFile: void seek(long)>($l3);

        $r5 = r0.<org.apache.commons.compress.archivers.zip.ZipFile$BoundedInputStream: org.apache.commons.compress.archivers.zip.ZipFile this$0>;

        $r6 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipFile: java.io.RandomAccessFile access$600(org.apache.commons.compress.archivers.zip.ZipFile)>($r5);

        $i5 = virtualinvoke $r6.<java.io.RandomAccessFile: int read()>();

        exitmonitor $r2;

     label4:
        return $i5;

     label5:
        $r7 := @caughtexception;

        exitmonitor $r2;

     label6:
        throw $r7;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        java.lang.Throwable $r8;
        java.io.RandomAccessFile $r2, $r4, $r6;
        byte[] r7;
        long $l0, $l2, $l3, $l5, $l8, $l9, $l10, $l11, $l12, $l13, $l14;
        byte $b1, $b4;
        org.apache.commons.compress.archivers.zip.ZipFile$BoundedInputStream r0;
        int i6, $i7, i15, $i16, $i18, $i19;
        boolean $z0;
        org.apache.commons.compress.archivers.zip.ZipFile $r1, $r3, $r5;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipFile$BoundedInputStream;

        r7 := @parameter0: byte[];

        i6 := @parameter1: int;

        i15 := @parameter2: int;

        $l0 = r0.<org.apache.commons.compress.archivers.zip.ZipFile$BoundedInputStream: long remaining>;

        $b1 = $l0 cmp 0L;

        $i16 = (int) $b1;

        if $i16 > 0 goto label02;

        $z0 = r0.<org.apache.commons.compress.archivers.zip.ZipFile$BoundedInputStream: boolean addDummyByte>;

        if $z0 == 0 goto label01;

        r0.<org.apache.commons.compress.archivers.zip.ZipFile$BoundedInputStream: boolean addDummyByte> = 0;

        r7[i6] = 0;

        return 1;

     label01:
        $i18 = (int) -1;

        return $i18;

     label02:
        if i15 > 0 goto label03;

        return 0;

     label03:
        $l3 = (long) i15;

        $l2 = r0.<org.apache.commons.compress.archivers.zip.ZipFile$BoundedInputStream: long remaining>;

        $b4 = $l3 cmp $l2;

        $i19 = (int) $b4;

        if $i19 <= 0 goto label04;

        $l14 = r0.<org.apache.commons.compress.archivers.zip.ZipFile$BoundedInputStream: long remaining>;

        i15 = (int) $l14;

     label04:
        $r1 = r0.<org.apache.commons.compress.archivers.zip.ZipFile$BoundedInputStream: org.apache.commons.compress.archivers.zip.ZipFile this$0>;

        $r2 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipFile: java.io.RandomAccessFile access$600(org.apache.commons.compress.archivers.zip.ZipFile)>($r1);

        entermonitor $r2;

     label05:
        $r3 = r0.<org.apache.commons.compress.archivers.zip.ZipFile$BoundedInputStream: org.apache.commons.compress.archivers.zip.ZipFile this$0>;

        $r4 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipFile: java.io.RandomAccessFile access$600(org.apache.commons.compress.archivers.zip.ZipFile)>($r3);

        $l5 = r0.<org.apache.commons.compress.archivers.zip.ZipFile$BoundedInputStream: long loc>;

        virtualinvoke $r4.<java.io.RandomAccessFile: void seek(long)>($l5);

        $r5 = r0.<org.apache.commons.compress.archivers.zip.ZipFile$BoundedInputStream: org.apache.commons.compress.archivers.zip.ZipFile this$0>;

        $r6 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipFile: java.io.RandomAccessFile access$600(org.apache.commons.compress.archivers.zip.ZipFile)>($r5);

        $i7 = virtualinvoke $r6.<java.io.RandomAccessFile: int read(byte[],int,int)>(r7, i6, i15);

        exitmonitor $r2;

     label06:
        goto label09;

     label07:
        $r8 := @caughtexception;

        exitmonitor $r2;

     label08:
        throw $r8;

     label09:
        if $i7 <= 0 goto label10;

        $l9 = r0.<org.apache.commons.compress.archivers.zip.ZipFile$BoundedInputStream: long loc>;

        $l8 = (long) $i7;

        $l10 = $l9 + $l8;

        r0.<org.apache.commons.compress.archivers.zip.ZipFile$BoundedInputStream: long loc> = $l10;

        $l12 = r0.<org.apache.commons.compress.archivers.zip.ZipFile$BoundedInputStream: long remaining>;

        $l11 = (long) $i7;

        $l13 = $l12 - $l11;

        r0.<org.apache.commons.compress.archivers.zip.ZipFile$BoundedInputStream: long remaining> = $l13;

     label10:
        return $i7;

        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
    }

    void addDummy()
    {
        org.apache.commons.compress.archivers.zip.ZipFile$BoundedInputStream r0;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipFile$BoundedInputStream;

        r0.<org.apache.commons.compress.archivers.zip.ZipFile$BoundedInputStream: boolean addDummyByte> = 1;

        return;
    }
}
