public class org.waveprotocol.wave.client.editor.util.EditorDocHelper extends java.lang.Object
{
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        org.waveprotocol.wave.client.editor.util.EditorDocHelper r0;

        r0 := @this: org.waveprotocol.wave.client.editor.util.EditorDocHelper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean isNamedElement(org.waveprotocol.wave.client.editor.content.ContentNode, java.lang.String)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0;
        java.lang.AssertionError $r4;
        org.waveprotocol.wave.client.editor.content.ContentElement $r1;
        java.lang.String $r2, r3;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        r3 := @parameter1: java.lang.String;

        $z0 = <org.waveprotocol.wave.client.editor.util.EditorDocHelper: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r0 != null goto label1;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label1:
        $z1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: boolean isTextNode()>();

        if $z1 != 0 goto label2;

        $r1 = (org.waveprotocol.wave.client.editor.content.ContentElement) r0;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.ContentElement: java.lang.String getTagName()>();

        $z2 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z2 == 0 goto label2;

        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;
    }

    public static void checkNamedElement(org.waveprotocol.wave.client.editor.content.ContentNode, java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0;
        org.waveprotocol.wave.client.editor.content.ContentElement $r10;
        java.lang.String r1, r3, $r11, $r15, $r16;
        boolean $z0, $z1;
        java.lang.StringBuilder $r2, $r4, $r5, $r6, $r7, $r8, $r9, $r12, $r13, $r14;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        r1 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $z0 = staticinvoke <org.waveprotocol.wave.client.editor.util.EditorDocHelper: boolean isNamedElement(org.waveprotocol.wave.client.editor.content.ContentNode,java.lang.String)>(r0, r1);

        if $z0 != 0 goto label3;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": expected element \'");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\', got ");

        $z1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: boolean isTextNode()>();

        if $z1 == 0 goto label1;

        $r16 = "a text node";

        goto label2;

     label1:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("element \'");

        $r10 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement asElement()>();

        $r11 = virtualinvoke $r10.<org.waveprotocol.wave.client.editor.content.ContentElement: java.lang.String getTagName()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        $r14 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void illegalArgument(java.lang.Object)>($r15);

     label3:
        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/client/editor/util/EditorDocHelper;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.client.editor.util.EditorDocHelper: boolean $assertionsDisabled> = $z1;

        return;
    }
}
