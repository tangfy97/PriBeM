public abstract class org.apache.solr.common.util.ContentStreamBase extends java.lang.Object implements org.apache.solr.common.util.ContentStream
{
    public static final java.lang.String DEFAULT_CHARSET;
    protected java.lang.String name;
    protected java.lang.String sourceInfo;
    protected java.lang.String contentType;
    protected java.lang.Long size;

    public void <init>()
    {
        org.apache.solr.common.util.ContentStreamBase r0;

        r0 := @this: org.apache.solr.common.util.ContentStreamBase;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String getCharsetFromContentType(java.lang.String)
    {
        java.util.Locale $r1;
        int $i0, $i1, $i2;
        java.lang.String r0, $r2, $r3, $r4, $r5;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $r1 = <java.util.Locale: java.util.Locale ROOT>;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r1);

        $i0 = virtualinvoke $r2.<java.lang.String: int indexOf(java.lang.String)>("charset=");

        if $i0 <= 0 goto label1;

        $r3 = "charset=";

        $i1 = virtualinvoke $r3.<java.lang.String: int length()>();

        $i2 = $i0 + $i1;

        $r4 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i2);

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String trim()>();

        return $r5;

     label1:
        return null;
    }

    public java.io.Reader getReader() throws java.io.IOException
    {
        org.apache.solr.common.util.ContentStreamBase r0;
        java.lang.String $r1, $r2;
        java.io.InputStreamReader $r5;
        java.io.InputStream $r3, $r4;

        r0 := @this: org.apache.solr.common.util.ContentStreamBase;

        $r1 = virtualinvoke r0.<org.apache.solr.common.util.ContentStreamBase: java.lang.String getContentType()>();

        $r2 = staticinvoke <org.apache.solr.common.util.ContentStreamBase: java.lang.String getCharsetFromContentType(java.lang.String)>($r1);

        if $r2 != null goto label1;

        $r5 = new java.io.InputStreamReader;

        $r4 = virtualinvoke r0.<org.apache.solr.common.util.ContentStreamBase: java.io.InputStream getStream()>();

        specialinvoke $r5.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r4, "utf-8");

        goto label2;

     label1:
        $r5 = new java.io.InputStreamReader;

        $r3 = virtualinvoke r0.<org.apache.solr.common.util.ContentStreamBase: java.io.InputStream getStream()>();

        specialinvoke $r5.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r3, $r2);

     label2:
        return $r5;
    }

    public java.lang.String getContentType()
    {
        org.apache.solr.common.util.ContentStreamBase r0;
        java.lang.String $r1;

        r0 := @this: org.apache.solr.common.util.ContentStreamBase;

        $r1 = r0.<org.apache.solr.common.util.ContentStreamBase: java.lang.String contentType>;

        return $r1;
    }

    public void setContentType(java.lang.String)
    {
        org.apache.solr.common.util.ContentStreamBase r0;
        java.lang.String r1;

        r0 := @this: org.apache.solr.common.util.ContentStreamBase;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.solr.common.util.ContentStreamBase: java.lang.String contentType> = r1;

        return;
    }

    public java.lang.String getName()
    {
        org.apache.solr.common.util.ContentStreamBase r0;
        java.lang.String $r1;

        r0 := @this: org.apache.solr.common.util.ContentStreamBase;

        $r1 = r0.<org.apache.solr.common.util.ContentStreamBase: java.lang.String name>;

        return $r1;
    }

    public void setName(java.lang.String)
    {
        org.apache.solr.common.util.ContentStreamBase r0;
        java.lang.String r1;

        r0 := @this: org.apache.solr.common.util.ContentStreamBase;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.solr.common.util.ContentStreamBase: java.lang.String name> = r1;

        return;
    }

    public java.lang.Long getSize()
    {
        org.apache.solr.common.util.ContentStreamBase r0;
        java.lang.Long $r1;

        r0 := @this: org.apache.solr.common.util.ContentStreamBase;

        $r1 = r0.<org.apache.solr.common.util.ContentStreamBase: java.lang.Long size>;

        return $r1;
    }

    public void setSize(java.lang.Long)
    {
        org.apache.solr.common.util.ContentStreamBase r0;
        java.lang.Long r1;

        r0 := @this: org.apache.solr.common.util.ContentStreamBase;

        r1 := @parameter0: java.lang.Long;

        r0.<org.apache.solr.common.util.ContentStreamBase: java.lang.Long size> = r1;

        return;
    }

    public java.lang.String getSourceInfo()
    {
        org.apache.solr.common.util.ContentStreamBase r0;
        java.lang.String $r1;

        r0 := @this: org.apache.solr.common.util.ContentStreamBase;

        $r1 = r0.<org.apache.solr.common.util.ContentStreamBase: java.lang.String sourceInfo>;

        return $r1;
    }

    public void setSourceInfo(java.lang.String)
    {
        org.apache.solr.common.util.ContentStreamBase r0;
        java.lang.String r1;

        r0 := @this: org.apache.solr.common.util.ContentStreamBase;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.solr.common.util.ContentStreamBase: java.lang.String sourceInfo> = r1;

        return;
    }

    public static void <clinit>()
    {
        <org.apache.solr.common.util.ContentStreamBase: java.lang.String DEFAULT_CHARSET> = "utf-8";

        return;
    }
}
