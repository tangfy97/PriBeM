public final class ucar.units.ScaledUnit extends ucar.units.UnitImpl implements ucar.units.DerivableUnit
{
    private static final long serialVersionUID;
    private final double _scale;
    private final ucar.units.Unit _unit;

    public void <init>(double)
    {
        ucar.units.ScaledUnit r0;
        ucar.units.DerivedUnitImpl $r1;
        double d0;

        r0 := @this: ucar.units.ScaledUnit;

        d0 := @parameter0: double;

        $r1 = <ucar.units.DerivedUnitImpl: ucar.units.DerivedUnitImpl DIMENSIONLESS>;

        specialinvoke r0.<ucar.units.ScaledUnit: void <init>(double,ucar.units.Unit)>(d0, $r1);

        return;
    }

    public void <init>(double, ucar.units.Unit)
    {
        ucar.units.ScaledUnit r0;
        ucar.units.Unit r1;
        double d0;

        r0 := @this: ucar.units.ScaledUnit;

        d0 := @parameter0: double;

        r1 := @parameter1: ucar.units.Unit;

        specialinvoke r0.<ucar.units.ScaledUnit: void <init>(double,ucar.units.Unit,ucar.units.UnitName)>(d0, r1, null);

        return;
    }

    public void <init>(double, ucar.units.Unit, ucar.units.UnitName)
    {
        ucar.units.UnitName r1;
        ucar.units.Unit r2, $r4;
        ucar.units.ScaledUnit r0, $r3, $r5;
        boolean $z0;
        double d0, $d1, $d2;

        r0 := @this: ucar.units.ScaledUnit;

        d0 := @parameter0: double;

        r2 := @parameter1: ucar.units.Unit;

        r1 := @parameter2: ucar.units.UnitName;

        specialinvoke r0.<ucar.units.UnitImpl: void <init>(ucar.units.UnitName)>(r1);

        $z0 = r2 instanceof ucar.units.ScaledUnit;

        if $z0 != 0 goto label1;

        r0.<ucar.units.ScaledUnit: ucar.units.Unit _unit> = r2;

        r0.<ucar.units.ScaledUnit: double _scale> = d0;

        goto label2;

     label1:
        $r3 = (ucar.units.ScaledUnit) r2;

        $r4 = $r3.<ucar.units.ScaledUnit: ucar.units.Unit _unit>;

        r0.<ucar.units.ScaledUnit: ucar.units.Unit _unit> = $r4;

        $r5 = (ucar.units.ScaledUnit) r2;

        $d1 = $r5.<ucar.units.ScaledUnit: double _scale>;

        $d2 = $d1 * d0;

        r0.<ucar.units.ScaledUnit: double _scale> = $d2;

     label2:
        return;
    }

    static ucar.units.Unit getInstance(double, ucar.units.Unit) throws ucar.units.MultiplyException
    {
        byte $b0, $b1;
        ucar.units.Unit r0, $r2;
        ucar.units.ScaledUnit $r4;
        ucar.units.MultiplyException $r3;
        double d0;

        d0 := @parameter0: double;

        r0 := @parameter1: ucar.units.Unit;

        $b0 = d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        $r3 = new ucar.units.MultiplyException;

        specialinvoke $r3.<ucar.units.MultiplyException: void <init>(double,ucar.units.Unit)>(d0, r0);

        throw $r3;

     label1:
        $b1 = d0 cmpl 1.0;

        if $b1 != 0 goto label2;

        $r2 = r0;

        goto label3;

     label2:
        $r4 = new ucar.units.ScaledUnit;

        $r2 = $r4;

        specialinvoke $r4.<ucar.units.ScaledUnit: void <init>(double,ucar.units.Unit)>(d0, r0);

     label3:
        return $r2;
    }

    public double getScale()
    {
        ucar.units.ScaledUnit r0;
        double $d0;

        r0 := @this: ucar.units.ScaledUnit;

        $d0 = r0.<ucar.units.ScaledUnit: double _scale>;

        return $d0;
    }

    public ucar.units.Unit getUnit()
    {
        ucar.units.ScaledUnit r0;
        ucar.units.Unit $r1;

        r0 := @this: ucar.units.ScaledUnit;

        $r1 = r0.<ucar.units.ScaledUnit: ucar.units.Unit _unit>;

        return $r1;
    }

    public ucar.units.Unit clone(ucar.units.UnitName)
    {
        ucar.units.UnitName r3;
        ucar.units.ScaledUnit $r0, r1;
        ucar.units.Unit $r2;
        double $d0;

        r1 := @this: ucar.units.ScaledUnit;

        r3 := @parameter0: ucar.units.UnitName;

        $r0 = new ucar.units.ScaledUnit;

        $d0 = r1.<ucar.units.ScaledUnit: double _scale>;

        $r2 = virtualinvoke r1.<ucar.units.ScaledUnit: ucar.units.Unit getUnit()>();

        specialinvoke $r0.<ucar.units.ScaledUnit: void <init>(double,ucar.units.Unit,ucar.units.UnitName)>($d0, $r2, r3);

        return $r0;
    }

    public ucar.units.Unit multiplyBy(double) throws ucar.units.MultiplyException
    {
        ucar.units.ScaledUnit r0;
        ucar.units.Unit $r1, $r2;
        double d0, $d1, $d2;

        r0 := @this: ucar.units.ScaledUnit;

        d0 := @parameter0: double;

        $d1 = r0.<ucar.units.ScaledUnit: double _scale>;

        $d2 = d0 * $d1;

        $r1 = r0.<ucar.units.ScaledUnit: ucar.units.Unit _unit>;

        $r2 = staticinvoke <ucar.units.ScaledUnit: ucar.units.Unit getInstance(double,ucar.units.Unit)>($d2, $r1);

        return $r2;
    }

    protected ucar.units.Unit myMultiplyBy(ucar.units.Unit) throws ucar.units.MultiplyException
    {
        ucar.units.Unit r0, $r2, $r3, $r5, $r7, $r8;
        ucar.units.ScaledUnit r1, $r4, $r6, $r9;
        boolean $z0;
        double $d0, $d1, $d2, $d3;

        r1 := @this: ucar.units.ScaledUnit;

        r0 := @parameter0: ucar.units.Unit;

        $z0 = r0 instanceof ucar.units.ScaledUnit;

        if $z0 == 0 goto label1;

        $r9 = new ucar.units.ScaledUnit;

        $d1 = virtualinvoke r1.<ucar.units.ScaledUnit: double getScale()>();

        $r4 = (ucar.units.ScaledUnit) r0;

        $d2 = virtualinvoke $r4.<ucar.units.ScaledUnit: double getScale()>();

        $d3 = $d1 * $d2;

        $r5 = virtualinvoke r1.<ucar.units.ScaledUnit: ucar.units.Unit getUnit()>();

        $r6 = (ucar.units.ScaledUnit) r0;

        $r7 = virtualinvoke $r6.<ucar.units.ScaledUnit: ucar.units.Unit getUnit()>();

        $r8 = interfaceinvoke $r5.<ucar.units.Unit: ucar.units.Unit multiplyBy(ucar.units.Unit)>($r7);

        specialinvoke $r9.<ucar.units.ScaledUnit: void <init>(double,ucar.units.Unit)>($d3, $r8);

        goto label2;

     label1:
        $r9 = new ucar.units.ScaledUnit;

        $d0 = virtualinvoke r1.<ucar.units.ScaledUnit: double getScale()>();

        $r2 = virtualinvoke r1.<ucar.units.ScaledUnit: ucar.units.Unit getUnit()>();

        $r3 = interfaceinvoke $r2.<ucar.units.Unit: ucar.units.Unit multiplyBy(ucar.units.Unit)>(r0);

        specialinvoke $r9.<ucar.units.ScaledUnit: void <init>(double,ucar.units.Unit)>($d0, $r3);

     label2:
        return $r9;
    }

    protected ucar.units.Unit myDivideBy(ucar.units.Unit) throws ucar.units.OperationException
    {
        ucar.units.Unit r0, $r2, $r3, $r5, $r7, $r8;
        ucar.units.ScaledUnit r1, $r4, $r6, $r9;
        boolean $z0;
        double $d0, $d1, $d2, $d3;

        r1 := @this: ucar.units.ScaledUnit;

        r0 := @parameter0: ucar.units.Unit;

        $z0 = r0 instanceof ucar.units.ScaledUnit;

        if $z0 == 0 goto label1;

        $r9 = new ucar.units.ScaledUnit;

        $d1 = virtualinvoke r1.<ucar.units.ScaledUnit: double getScale()>();

        $r4 = (ucar.units.ScaledUnit) r0;

        $d2 = virtualinvoke $r4.<ucar.units.ScaledUnit: double getScale()>();

        $d3 = $d1 / $d2;

        $r5 = virtualinvoke r1.<ucar.units.ScaledUnit: ucar.units.Unit getUnit()>();

        $r6 = (ucar.units.ScaledUnit) r0;

        $r7 = virtualinvoke $r6.<ucar.units.ScaledUnit: ucar.units.Unit getUnit()>();

        $r8 = interfaceinvoke $r5.<ucar.units.Unit: ucar.units.Unit divideBy(ucar.units.Unit)>($r7);

        specialinvoke $r9.<ucar.units.ScaledUnit: void <init>(double,ucar.units.Unit)>($d3, $r8);

        goto label2;

     label1:
        $r9 = new ucar.units.ScaledUnit;

        $d0 = virtualinvoke r1.<ucar.units.ScaledUnit: double getScale()>();

        $r2 = virtualinvoke r1.<ucar.units.ScaledUnit: ucar.units.Unit getUnit()>();

        $r3 = interfaceinvoke $r2.<ucar.units.Unit: ucar.units.Unit divideBy(ucar.units.Unit)>(r0);

        specialinvoke $r9.<ucar.units.ScaledUnit: void <init>(double,ucar.units.Unit)>($d0, $r3);

     label2:
        return $r9;
    }

    protected ucar.units.Unit myDivideInto(ucar.units.Unit) throws ucar.units.OperationException
    {
        boolean $z0;
        double $d0, $d1, $d2, $d3, $d4;
        ucar.units.Unit r0, $r2, $r3, $r5, $r7, $r8;
        ucar.units.ScaledUnit r1, $r4, $r6, $r9;

        r1 := @this: ucar.units.ScaledUnit;

        r0 := @parameter0: ucar.units.Unit;

        $z0 = r0 instanceof ucar.units.ScaledUnit;

        if $z0 == 0 goto label1;

        $r9 = new ucar.units.ScaledUnit;

        $r4 = (ucar.units.ScaledUnit) r0;

        $d2 = virtualinvoke $r4.<ucar.units.ScaledUnit: double getScale()>();

        $d3 = virtualinvoke r1.<ucar.units.ScaledUnit: double getScale()>();

        $d4 = $d2 / $d3;

        $r5 = virtualinvoke r1.<ucar.units.ScaledUnit: ucar.units.Unit getUnit()>();

        $r6 = (ucar.units.ScaledUnit) r0;

        $r7 = virtualinvoke $r6.<ucar.units.ScaledUnit: ucar.units.Unit getUnit()>();

        $r8 = interfaceinvoke $r5.<ucar.units.Unit: ucar.units.Unit divideInto(ucar.units.Unit)>($r7);

        specialinvoke $r9.<ucar.units.ScaledUnit: void <init>(double,ucar.units.Unit)>($d4, $r8);

        goto label2;

     label1:
        $r9 = new ucar.units.ScaledUnit;

        $d0 = virtualinvoke r1.<ucar.units.ScaledUnit: double getScale()>();

        $d1 = 1.0 / $d0;

        $r2 = virtualinvoke r1.<ucar.units.ScaledUnit: ucar.units.Unit getUnit()>();

        $r3 = interfaceinvoke $r2.<ucar.units.Unit: ucar.units.Unit divideInto(ucar.units.Unit)>(r0);

        specialinvoke $r9.<ucar.units.ScaledUnit: void <init>(double,ucar.units.Unit)>($d1, $r3);

     label2:
        return $r9;
    }

    protected ucar.units.Unit myRaiseTo(int) throws ucar.units.RaiseException
    {
        ucar.units.Unit $r2, $r3;
        ucar.units.ScaledUnit $r0, r1;
        int i0;
        double $d0, $d1, $d2;

        r1 := @this: ucar.units.ScaledUnit;

        i0 := @parameter0: int;

        $r0 = new ucar.units.ScaledUnit;

        $d0 = virtualinvoke r1.<ucar.units.ScaledUnit: double getScale()>();

        $d1 = (double) i0;

        $d2 = staticinvoke <java.lang.Math: double pow(double,double)>($d0, $d1);

        $r2 = virtualinvoke r1.<ucar.units.ScaledUnit: ucar.units.Unit getUnit()>();

        $r3 = interfaceinvoke $r2.<ucar.units.Unit: ucar.units.Unit raiseTo(int)>(i0);

        specialinvoke $r0.<ucar.units.ScaledUnit: void <init>(double,ucar.units.Unit)>($d2, $r3);

        return $r0;
    }

    public ucar.units.DerivedUnit getDerivedUnit()
    {
        ucar.units.ScaledUnit r0;
        ucar.units.Unit $r1;
        ucar.units.DerivedUnit $r2;

        r0 := @this: ucar.units.ScaledUnit;

        $r1 = virtualinvoke r0.<ucar.units.ScaledUnit: ucar.units.Unit getUnit()>();

        $r2 = interfaceinvoke $r1.<ucar.units.Unit: ucar.units.DerivedUnit getDerivedUnit()>();

        return $r2;
    }

    public float toDerivedUnit(float) throws ucar.units.ConversionException
    {
        ucar.units.ScaledUnit r0;
        float f0, $f1;
        double $d0, $d1;

        r0 := @this: ucar.units.ScaledUnit;

        f0 := @parameter0: float;

        $d0 = (double) f0;

        $d1 = virtualinvoke r0.<ucar.units.ScaledUnit: double toDerivedUnit(double)>($d0);

        $f1 = (float) $d1;

        return $f1;
    }

    public double toDerivedUnit(double) throws ucar.units.ConversionException
    {
        ucar.units.DerivedUnit $r5;
        ucar.units.Unit $r1, $r2;
        ucar.units.DerivableUnit $r3;
        ucar.units.ConversionException $r4;
        ucar.units.ScaledUnit r0;
        boolean $z0;
        double d0, $d1, $d2, $d3;

        r0 := @this: ucar.units.ScaledUnit;

        d0 := @parameter0: double;

        $r1 = r0.<ucar.units.ScaledUnit: ucar.units.Unit _unit>;

        $z0 = $r1 instanceof ucar.units.DerivableUnit;

        if $z0 != 0 goto label1;

        $r4 = new ucar.units.ConversionException;

        $r5 = virtualinvoke r0.<ucar.units.ScaledUnit: ucar.units.DerivedUnit getDerivedUnit()>();

        specialinvoke $r4.<ucar.units.ConversionException: void <init>(ucar.units.Unit,ucar.units.Unit)>(r0, $r5);

        throw $r4;

     label1:
        $r2 = r0.<ucar.units.ScaledUnit: ucar.units.Unit _unit>;

        $r3 = (ucar.units.DerivableUnit) $r2;

        $d1 = virtualinvoke r0.<ucar.units.ScaledUnit: double getScale()>();

        $d2 = d0 * $d1;

        $d3 = interfaceinvoke $r3.<ucar.units.DerivableUnit: double toDerivedUnit(double)>($d2);

        return $d3;
    }

    public float[] toDerivedUnit(float[], float[]) throws ucar.units.ConversionException
    {
        ucar.units.DerivedUnit $r8;
        float[] r1, r4, $r6;
        int i0, $i2;
        double $d0;
        boolean $z0;
        ucar.units.Unit $r2, $r3;
        ucar.units.DerivableUnit $r5;
        ucar.units.ConversionException $r9;
        ucar.units.ScaledUnit r0;
        float f0, $f1, $f2;

        r0 := @this: ucar.units.ScaledUnit;

        r1 := @parameter0: float[];

        r4 := @parameter1: float[];

        $d0 = virtualinvoke r0.<ucar.units.ScaledUnit: double getScale()>();

        f0 = (float) $d0;

        i0 = lengthof r1;

     label1:
        $i2 = (int) -1;

        i0 = i0 + $i2;

        if i0 < 0 goto label2;

        $f1 = r1[i0];

        $f2 = $f1 * f0;

        r4[i0] = $f2;

        goto label1;

     label2:
        $r2 = r0.<ucar.units.ScaledUnit: ucar.units.Unit _unit>;

        $z0 = $r2 instanceof ucar.units.DerivableUnit;

        if $z0 != 0 goto label3;

        $r9 = new ucar.units.ConversionException;

        $r8 = virtualinvoke r0.<ucar.units.ScaledUnit: ucar.units.DerivedUnit getDerivedUnit()>();

        specialinvoke $r9.<ucar.units.ConversionException: void <init>(ucar.units.Unit,ucar.units.Unit)>(r0, $r8);

        throw $r9;

     label3:
        $r3 = virtualinvoke r0.<ucar.units.ScaledUnit: ucar.units.Unit getUnit()>();

        $r5 = (ucar.units.DerivableUnit) $r3;

        $r6 = interfaceinvoke $r5.<ucar.units.DerivableUnit: float[] toDerivedUnit(float[],float[])>(r4, r4);

        return $r6;
    }

    public double[] toDerivedUnit(double[], double[]) throws ucar.units.ConversionException
    {
        ucar.units.DerivedUnit $r8;
        double[] r1, r4, $r6;
        ucar.units.Unit $r2, $r3;
        ucar.units.DerivableUnit $r5;
        ucar.units.ConversionException $r9;
        ucar.units.ScaledUnit r0;
        int i0, $i2;
        double $d0, $d1, $d2;
        boolean $z0;

        r0 := @this: ucar.units.ScaledUnit;

        r1 := @parameter0: double[];

        r4 := @parameter1: double[];

        $d0 = virtualinvoke r0.<ucar.units.ScaledUnit: double getScale()>();

        i0 = lengthof r1;

     label1:
        $i2 = (int) -1;

        i0 = i0 + $i2;

        if i0 < 0 goto label2;

        $d1 = r1[i0];

        $d2 = $d1 * $d0;

        r4[i0] = $d2;

        goto label1;

     label2:
        $r2 = r0.<ucar.units.ScaledUnit: ucar.units.Unit _unit>;

        $z0 = $r2 instanceof ucar.units.DerivableUnit;

        if $z0 != 0 goto label3;

        $r9 = new ucar.units.ConversionException;

        $r8 = virtualinvoke r0.<ucar.units.ScaledUnit: ucar.units.DerivedUnit getDerivedUnit()>();

        specialinvoke $r9.<ucar.units.ConversionException: void <init>(ucar.units.Unit,ucar.units.Unit)>(r0, $r8);

        throw $r9;

     label3:
        $r3 = virtualinvoke r0.<ucar.units.ScaledUnit: ucar.units.Unit getUnit()>();

        $r5 = (ucar.units.DerivableUnit) $r3;

        $r6 = interfaceinvoke $r5.<ucar.units.DerivableUnit: double[] toDerivedUnit(double[],double[])>(r4, r4);

        return $r6;
    }

    public float fromDerivedUnit(float) throws ucar.units.ConversionException
    {
        ucar.units.ScaledUnit r0;
        float f0, $f1;
        double $d0, $d1;

        r0 := @this: ucar.units.ScaledUnit;

        f0 := @parameter0: float;

        $d0 = (double) f0;

        $d1 = virtualinvoke r0.<ucar.units.ScaledUnit: double fromDerivedUnit(double)>($d0);

        $f1 = (float) $d1;

        return $f1;
    }

    public double fromDerivedUnit(double) throws ucar.units.ConversionException
    {
        ucar.units.DerivedUnit $r5;
        ucar.units.Unit $r1, $r2;
        ucar.units.DerivableUnit $r3;
        ucar.units.ConversionException $r4;
        ucar.units.ScaledUnit r0;
        boolean $z0;
        double d0, $d1, $d2, $d3;

        r0 := @this: ucar.units.ScaledUnit;

        d0 := @parameter0: double;

        $r1 = r0.<ucar.units.ScaledUnit: ucar.units.Unit _unit>;

        $z0 = $r1 instanceof ucar.units.DerivableUnit;

        if $z0 != 0 goto label1;

        $r4 = new ucar.units.ConversionException;

        $r5 = virtualinvoke r0.<ucar.units.ScaledUnit: ucar.units.DerivedUnit getDerivedUnit()>();

        specialinvoke $r4.<ucar.units.ConversionException: void <init>(ucar.units.Unit,ucar.units.Unit)>($r5, r0);

        throw $r4;

     label1:
        $r2 = virtualinvoke r0.<ucar.units.ScaledUnit: ucar.units.Unit getUnit()>();

        $r3 = (ucar.units.DerivableUnit) $r2;

        $d1 = interfaceinvoke $r3.<ucar.units.DerivableUnit: double fromDerivedUnit(double)>(d0);

        $d2 = virtualinvoke r0.<ucar.units.ScaledUnit: double getScale()>();

        $d3 = $d1 / $d2;

        return $d3;
    }

    public float[] fromDerivedUnit(float[], float[]) throws ucar.units.ConversionException
    {
        ucar.units.DerivedUnit $r7;
        ucar.units.Unit $r1, $r2;
        float[] r3, r4;
        ucar.units.DerivableUnit $r5;
        ucar.units.ConversionException $r8;
        ucar.units.ScaledUnit r0;
        int i0, $i2;
        float f0, $f1, $f2;
        boolean $z0;
        double $d0;

        r0 := @this: ucar.units.ScaledUnit;

        r3 := @parameter0: float[];

        r4 := @parameter1: float[];

        $r1 = r0.<ucar.units.ScaledUnit: ucar.units.Unit _unit>;

        $z0 = $r1 instanceof ucar.units.DerivableUnit;

        if $z0 != 0 goto label1;

        $r8 = new ucar.units.ConversionException;

        $r7 = virtualinvoke r0.<ucar.units.ScaledUnit: ucar.units.DerivedUnit getDerivedUnit()>();

        specialinvoke $r8.<ucar.units.ConversionException: void <init>(ucar.units.Unit,ucar.units.Unit)>($r7, r0);

        throw $r8;

     label1:
        $r2 = virtualinvoke r0.<ucar.units.ScaledUnit: ucar.units.Unit getUnit()>();

        $r5 = (ucar.units.DerivableUnit) $r2;

        interfaceinvoke $r5.<ucar.units.DerivableUnit: float[] fromDerivedUnit(float[],float[])>(r3, r4);

        $d0 = virtualinvoke r0.<ucar.units.ScaledUnit: double getScale()>();

        f0 = (float) $d0;

        i0 = lengthof r3;

     label2:
        $i2 = (int) -1;

        i0 = i0 + $i2;

        if i0 < 0 goto label3;

        $f1 = r4[i0];

        $f2 = $f1 / f0;

        r4[i0] = $f2;

        goto label2;

     label3:
        return r4;
    }

    public double[] fromDerivedUnit(double[], double[]) throws ucar.units.ConversionException
    {
        ucar.units.DerivedUnit $r7;
        ucar.units.Unit $r1, $r2;
        double[] r3, r4;
        ucar.units.DerivableUnit $r5;
        ucar.units.ConversionException $r8;
        ucar.units.ScaledUnit r0;
        int i0, $i2;
        boolean $z0;
        double $d0, $d1, $d2;

        r0 := @this: ucar.units.ScaledUnit;

        r3 := @parameter0: double[];

        r4 := @parameter1: double[];

        $r1 = r0.<ucar.units.ScaledUnit: ucar.units.Unit _unit>;

        $z0 = $r1 instanceof ucar.units.DerivableUnit;

        if $z0 != 0 goto label1;

        $r8 = new ucar.units.ConversionException;

        $r7 = virtualinvoke r0.<ucar.units.ScaledUnit: ucar.units.DerivedUnit getDerivedUnit()>();

        specialinvoke $r8.<ucar.units.ConversionException: void <init>(ucar.units.Unit,ucar.units.Unit)>($r7, r0);

        throw $r8;

     label1:
        $r2 = virtualinvoke r0.<ucar.units.ScaledUnit: ucar.units.Unit getUnit()>();

        $r5 = (ucar.units.DerivableUnit) $r2;

        interfaceinvoke $r5.<ucar.units.DerivableUnit: double[] fromDerivedUnit(double[],double[])>(r3, r4);

        $d0 = virtualinvoke r0.<ucar.units.ScaledUnit: double getScale()>();

        i0 = lengthof r3;

     label2:
        $i2 = (int) -1;

        i0 = i0 + $i2;

        if i0 < 0 goto label3;

        $d1 = r4[i0];

        $d2 = $d1 / $d0;

        r4[i0] = $d2;

        goto label2;

     label3:
        return r4;
    }

    public boolean equals(java.lang.Object)
    {
        ucar.units.Unit $r3, $r4, $r5;
        byte $b0, $b1;
        ucar.units.ScaledUnit r0, r2;
        java.lang.Object r1;
        double $d0, $d1, $d2;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: ucar.units.ScaledUnit;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $d0 = r0.<ucar.units.ScaledUnit: double _scale>;

        $b0 = $d0 cmpl 1.0;

        if $b0 != 0 goto label2;

        $r5 = r0.<ucar.units.ScaledUnit: ucar.units.Unit _unit>;

        $z2 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        return $z2;

     label2:
        $z0 = r1 instanceof ucar.units.ScaledUnit;

        if $z0 != 0 goto label3;

        return 0;

     label3:
        r2 = (ucar.units.ScaledUnit) r1;

        $d2 = r0.<ucar.units.ScaledUnit: double _scale>;

        $d1 = r2.<ucar.units.ScaledUnit: double _scale>;

        $b1 = $d2 cmpl $d1;

        if $b1 != 0 goto label4;

        $r4 = r0.<ucar.units.ScaledUnit: ucar.units.Unit _unit>;

        $r3 = r2.<ucar.units.ScaledUnit: ucar.units.Unit _unit>;

        $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label4;

        $z3 = 1;

        goto label5;

     label4:
        $z3 = 0;

     label5:
        return $z3;
    }

    public int hashCode()
    {
        java.lang.Double $r1;
        ucar.units.Unit $r2;
        byte $b0;
        ucar.units.ScaledUnit r0;
        int $i1, $i2, $i3;
        double $d0, $d1;

        r0 := @this: ucar.units.ScaledUnit;

        $d0 = virtualinvoke r0.<ucar.units.ScaledUnit: double getScale()>();

        $b0 = $d0 cmpl 1.0;

        if $b0 != 0 goto label1;

        $i3 = 0;

        goto label2;

     label1:
        $d1 = virtualinvoke r0.<ucar.units.ScaledUnit: double getScale()>();

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        $i3 = virtualinvoke $r1.<java.lang.Double: int hashCode()>();

     label2:
        $r2 = virtualinvoke r0.<ucar.units.ScaledUnit: ucar.units.Unit getUnit()>();

        $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        $i2 = $i3 ^ $i1;

        return $i2;
    }

    public boolean isDimensionless()
    {
        ucar.units.ScaledUnit r0;
        ucar.units.Unit $r1;
        boolean $z0;

        r0 := @this: ucar.units.ScaledUnit;

        $r1 = virtualinvoke r0.<ucar.units.ScaledUnit: ucar.units.Unit getUnit()>();

        $z0 = interfaceinvoke $r1.<ucar.units.Unit: boolean isDimensionless()>();

        return $z0;
    }

    public java.lang.String toString()
    {
        ucar.units.ScaledUnit r0;
        java.lang.String $r1, $r2;

        r0 := @this: ucar.units.ScaledUnit;

        $r1 = specialinvoke r0.<ucar.units.UnitImpl: java.lang.String toString()>();

        if $r1 == null goto label1;

        $r2 = $r1;

        goto label2;

     label1:
        $r2 = virtualinvoke r0.<ucar.units.ScaledUnit: java.lang.String getCanonicalString()>();

     label2:
        return $r2;
    }

    public java.lang.String getCanonicalString()
    {
        ucar.units.Unit $r1, $r7;
        ucar.units.ScaledUnit r0;
        ucar.units.DerivedUnitImpl $r2;
        java.lang.StringBuilder $r3, $r5, $r6, $r9;
        java.lang.String $r4, $r8, $r10;
        boolean $z0;
        double $d0, $d1;

        r0 := @this: ucar.units.ScaledUnit;

        $r2 = <ucar.units.DerivedUnitImpl: ucar.units.DerivedUnitImpl DIMENSIONLESS>;

        $r1 = r0.<ucar.units.ScaledUnit: ucar.units.Unit _unit>;

        $z0 = virtualinvoke $r2.<ucar.units.DerivedUnitImpl: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $d1 = virtualinvoke r0.<ucar.units.ScaledUnit: double getScale()>();

        $r10 = staticinvoke <java.lang.Double: java.lang.String toString(double)>($d1);

        goto label2;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $d0 = virtualinvoke r0.<ucar.units.ScaledUnit: double getScale()>();

        $r4 = staticinvoke <java.lang.Double: java.lang.String toString(double)>($d0);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r7 = r0.<ucar.units.ScaledUnit: ucar.units.Unit _unit>;

        $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        return $r10;
    }

    public static void main(java.lang.String[]) throws java.lang.Exception
    {
        ucar.units.SupplementaryBaseQuantity $r73;
        java.lang.StringBuilder $r4, $r6, $r8, $r12, $r14, $r16, $r18, $r20, $r22, $r24, $r26, $r28, $r30, $r32, $r33, $r35, $r37, $r41, $r43, $r45, $r46, $r48, $r50, $r54, $r56, $r58, $r59, $r62, $r64, $r65, $r67, $r69, $r70, $r76, $r78, $r79;
        ucar.units.RegularBaseQuantity $r1;
        float[] $r38, $r39, $r40, $r51, $r52, $r53;
        java.lang.String $r9, $r17, $r23, $r29, $r34, $r42, $r47, $r55, $r60, $r66, $r71, $r80;
        boolean $z0, $z1, $z2, $z3, $z4;
        ucar.units.UnitName $r0, $r72;
        ucar.units.Unit $r7, $r10, $r15, $r21, $r27;
        ucar.units.ScaledUnit $r3, r11, $r61, $r75;
        float $f0, $f1;
        java.lang.String[] r81;
        double $d0, $d1;
        java.io.PrintStream $r5, $r13, $r19, $r25, $r31, $r36, $r44, $r49, $r57, $r63, $r68, $r77;
        ucar.units.BaseUnit $r2, $r74;

        r81 := @parameter0: java.lang.String[];

        $r0 = staticinvoke <ucar.units.UnitName: ucar.units.UnitName newUnitName(java.lang.String,java.lang.String,java.lang.String)>("meter", null, "m");

        $r1 = <ucar.units.BaseQuantity: ucar.units.RegularBaseQuantity LENGTH>;

        $r2 = staticinvoke <ucar.units.BaseUnit: ucar.units.BaseUnit getOrCreate(ucar.units.UnitName,ucar.units.BaseQuantity)>($r0, $r1);

        $r3 = new ucar.units.ScaledUnit;

        specialinvoke $r3.<ucar.units.ScaledUnit: void <init>(double,ucar.units.Unit)>(1852.0, $r2);

        $r5 = <java.lang.System: java.io.PrintStream out>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("nauticalMile.getUnit().equals(meter)=");

        $r7 = virtualinvoke $r3.<ucar.units.ScaledUnit: ucar.units.Unit getUnit()>();

        $z0 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r9);

        $r10 = virtualinvoke $r3.<ucar.units.ScaledUnit: ucar.units.Unit multiplyBy(ucar.units.Unit)>($r2);

        r11 = (ucar.units.ScaledUnit) $r10;

        $r13 = <java.lang.System: java.io.PrintStream out>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("nauticalMileMeter.divideBy(nauticalMile)=");

        $r15 = virtualinvoke r11.<ucar.units.ScaledUnit: ucar.units.Unit divideBy(ucar.units.Unit)>($r3);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>($r17);

        $r19 = <java.lang.System: java.io.PrintStream out>;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("meter.divideBy(nauticalMile)=");

        $r21 = virtualinvoke $r2.<ucar.units.BaseUnit: ucar.units.Unit divideBy(ucar.units.Unit)>($r3);

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r19.<java.io.PrintStream: void println(java.lang.String)>($r23);

        $r25 = <java.lang.System: java.io.PrintStream out>;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("nauticalMile.raiseTo(2)=");

        $r27 = virtualinvoke $r3.<ucar.units.ScaledUnit: ucar.units.Unit raiseTo(int)>(2);

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r25.<java.io.PrintStream: void println(java.lang.String)>($r29);

        $r31 = <java.lang.System: java.io.PrintStream out>;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("nauticalMile.toDerivedUnit(1.)=");

        $d0 = virtualinvoke $r3.<ucar.units.ScaledUnit: double toDerivedUnit(double)>(1.0);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r31.<java.io.PrintStream: void println(java.lang.String)>($r34);

        $r36 = <java.lang.System: java.io.PrintStream out>;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r37 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("nauticalMile.toDerivedUnit(new float[]{1,2,3}, new float[3])[1]=");

        $r38 = newarray (float)[3];

        $r38[0] = 1.0F;

        $r38[1] = 2.0F;

        $r38[2] = 3.0F;

        $r39 = newarray (float)[3];

        $r40 = virtualinvoke $r3.<ucar.units.ScaledUnit: float[] toDerivedUnit(float[],float[])>($r38, $r39);

        $f0 = $r40[1];

        $r41 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r36.<java.io.PrintStream: void println(java.lang.String)>($r42);

        $r44 = <java.lang.System: java.io.PrintStream out>;

        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        $r45 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("nauticalMile.fromDerivedUnit(1852.)=");

        $d1 = virtualinvoke $r3.<ucar.units.ScaledUnit: double fromDerivedUnit(double)>(1852.0);

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d1);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r44.<java.io.PrintStream: void println(java.lang.String)>($r47);

        $r49 = <java.lang.System: java.io.PrintStream out>;

        $r48 = new java.lang.StringBuilder;

        specialinvoke $r48.<java.lang.StringBuilder: void <init>()>();

        $r50 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("nauticalMile.fromDerivedUnit(new float[]{1852},new float[1])[0]=");

        $r51 = newarray (float)[1];

        $r51[0] = 1852.0F;

        $r52 = newarray (float)[1];

        $r53 = virtualinvoke $r3.<ucar.units.ScaledUnit: float[] fromDerivedUnit(float[],float[])>($r51, $r52);

        $f1 = $r53[0];

        $r54 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f1);

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r49.<java.io.PrintStream: void println(java.lang.String)>($r55);

        $r57 = <java.lang.System: java.io.PrintStream out>;

        $r56 = new java.lang.StringBuilder;

        specialinvoke $r56.<java.lang.StringBuilder: void <init>()>();

        $r58 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("nauticalMile.equals(nauticalMile)=");

        $z1 = virtualinvoke $r3.<ucar.units.ScaledUnit: boolean equals(java.lang.Object)>($r3);

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r57.<java.io.PrintStream: void println(java.lang.String)>($r60);

        $r61 = new ucar.units.ScaledUnit;

        specialinvoke $r61.<ucar.units.ScaledUnit: void <init>(double,ucar.units.Unit)>(2.0, $r3);

        $r63 = <java.lang.System: java.io.PrintStream out>;

        $r62 = new java.lang.StringBuilder;

        specialinvoke $r62.<java.lang.StringBuilder: void <init>()>();

        $r64 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("nauticalMile.equals(nautical2Mile)=");

        $z2 = virtualinvoke $r3.<ucar.units.ScaledUnit: boolean equals(java.lang.Object)>($r61);

        $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r63.<java.io.PrintStream: void println(java.lang.String)>($r66);

        $r68 = <java.lang.System: java.io.PrintStream out>;

        $r67 = new java.lang.StringBuilder;

        specialinvoke $r67.<java.lang.StringBuilder: void <init>()>();

        $r69 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("nauticalMile.isDimensionless()=");

        $z3 = virtualinvoke $r3.<ucar.units.ScaledUnit: boolean isDimensionless()>();

        $r70 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z3);

        $r71 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r68.<java.io.PrintStream: void println(java.lang.String)>($r71);

        $r72 = staticinvoke <ucar.units.UnitName: ucar.units.UnitName newUnitName(java.lang.String,java.lang.String,java.lang.String)>("radian", null, "rad");

        $r73 = <ucar.units.BaseQuantity: ucar.units.SupplementaryBaseQuantity PLANE_ANGLE>;

        $r74 = staticinvoke <ucar.units.BaseUnit: ucar.units.BaseUnit getOrCreate(ucar.units.UnitName,ucar.units.BaseQuantity)>($r72, $r73);

        $r75 = new ucar.units.ScaledUnit;

        specialinvoke $r75.<ucar.units.ScaledUnit: void <init>(double,ucar.units.Unit)>(0.017453277777777776, $r74);

        $r77 = <java.lang.System: java.io.PrintStream out>;

        $r76 = new java.lang.StringBuilder;

        specialinvoke $r76.<java.lang.StringBuilder: void <init>()>();

        $r78 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("degree.isDimensionless()=");

        $z4 = virtualinvoke $r75.<ucar.units.ScaledUnit: boolean isDimensionless()>();

        $r79 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z4);

        $r80 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r77.<java.io.PrintStream: void println(java.lang.String)>($r80);

        return;
    }

    public static void <clinit>()
    {
        <ucar.units.ScaledUnit: long serialVersionUID> = 1L;

        return;
    }
}
