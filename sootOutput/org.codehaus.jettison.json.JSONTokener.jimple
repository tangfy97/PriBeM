public class org.codehaus.jettison.json.JSONTokener extends java.lang.Object
{
    private int myIndex;
    private java.lang.String mySource;

    public void <init>(java.lang.String)
    {
        org.codehaus.jettison.json.JSONTokener r0;
        java.lang.String r1;

        r0 := @this: org.codehaus.jettison.json.JSONTokener;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.codehaus.jettison.json.JSONTokener: int myIndex> = 0;

        r0.<org.codehaus.jettison.json.JSONTokener: java.lang.String mySource> = r1;

        return;
    }

    public void back()
    {
        org.codehaus.jettison.json.JSONTokener r0;
        int $i0, $i1, $i2;

        r0 := @this: org.codehaus.jettison.json.JSONTokener;

        $i0 = r0.<org.codehaus.jettison.json.JSONTokener: int myIndex>;

        if $i0 <= 0 goto label1;

        $i1 = r0.<org.codehaus.jettison.json.JSONTokener: int myIndex>;

        $i2 = $i1 - 1;

        r0.<org.codehaus.jettison.json.JSONTokener: int myIndex> = $i2;

     label1:
        return;
    }

    public static int dehexchar(char)
    {
        char c0;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i14;

        c0 := @parameter0: char;

        $i4 = (int) c0;

        if $i4 < 48 goto label1;

        $i5 = (int) c0;

        if $i5 > 57 goto label1;

        $i6 = (int) c0;

        $i3 = $i6 - 48;

        return $i3;

     label1:
        $i7 = (int) c0;

        if $i7 < 65 goto label2;

        $i8 = (int) c0;

        if $i8 > 70 goto label2;

        $i9 = (int) c0;

        $i2 = $i9 - 55;

        return $i2;

     label2:
        $i10 = (int) c0;

        if $i10 < 97 goto label3;

        $i11 = (int) c0;

        if $i11 > 102 goto label3;

        $i12 = (int) c0;

        $i1 = $i12 - 87;

        return $i1;

     label3:
        $i14 = (int) -1;

        return $i14;
    }

    public boolean more()
    {
        org.codehaus.jettison.json.JSONTokener r0;
        int $i0, $i1;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: org.codehaus.jettison.json.JSONTokener;

        $i0 = r0.<org.codehaus.jettison.json.JSONTokener: int myIndex>;

        $r1 = r0.<org.codehaus.jettison.json.JSONTokener: java.lang.String mySource>;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 >= $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public char next()
    {
        org.codehaus.jettison.json.JSONTokener r0;
        int $i0, $i2, $i3;
        char $c1;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: org.codehaus.jettison.json.JSONTokener;

        $z0 = virtualinvoke r0.<org.codehaus.jettison.json.JSONTokener: boolean more()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<org.codehaus.jettison.json.JSONTokener: java.lang.String mySource>;

        $i0 = r0.<org.codehaus.jettison.json.JSONTokener: int myIndex>;

        $c1 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i0);

        $i2 = r0.<org.codehaus.jettison.json.JSONTokener: int myIndex>;

        $i3 = $i2 + 1;

        r0.<org.codehaus.jettison.json.JSONTokener: int myIndex> = $i3;

        return $c1;

     label1:
        return 0;
    }

    public char next(char) throws org.codehaus.jettison.json.JSONException
    {
        char $c0, c1;
        org.codehaus.jettison.json.JSONException $r8;
        org.codehaus.jettison.json.JSONTokener r0;
        int $i2, $i3;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6, $r9;
        java.lang.String $r7;

        r0 := @this: org.codehaus.jettison.json.JSONTokener;

        c1 := @parameter0: char;

        $c0 = virtualinvoke r0.<org.codehaus.jettison.json.JSONTokener: char next()>();

        $i2 = (int) $c0;

        $i3 = (int) c1;

        if $i2 == $i3 goto label1;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected \'");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' and instead saw \'");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'.");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = virtualinvoke r0.<org.codehaus.jettison.json.JSONTokener: org.codehaus.jettison.json.JSONException syntaxError(java.lang.String)>($r7);

        throw $r8;

     label1:
        return $c0;
    }

    public java.lang.String next(int) throws org.codehaus.jettison.json.JSONException
    {
        org.codehaus.jettison.json.JSONException $r4;
        org.codehaus.jettison.json.JSONTokener r0;
        int i0, i1, i2, $i3, $i4, $i5;
        java.lang.String $r1, $r2, $r3;

        r0 := @this: org.codehaus.jettison.json.JSONTokener;

        i1 := @parameter0: int;

        i0 = r0.<org.codehaus.jettison.json.JSONTokener: int myIndex>;

        i2 = i0 + i1;

        $r1 = r0.<org.codehaus.jettison.json.JSONTokener: java.lang.String mySource>;

        $i3 = virtualinvoke $r1.<java.lang.String: int length()>();

        if i2 < $i3 goto label1;

        $r4 = virtualinvoke r0.<org.codehaus.jettison.json.JSONTokener: org.codehaus.jettison.json.JSONException syntaxError(java.lang.String)>("Substring bounds error");

        throw $r4;

     label1:
        $i4 = r0.<org.codehaus.jettison.json.JSONTokener: int myIndex>;

        $i5 = $i4 + i1;

        r0.<org.codehaus.jettison.json.JSONTokener: int myIndex> = $i5;

        $r2 = r0.<org.codehaus.jettison.json.JSONTokener: java.lang.String mySource>;

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(i0, i2);

        return $r3;
    }

    public char nextClean() throws org.codehaus.jettison.json.JSONException
    {
        int $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        char $c0, $c1, $c2, $c3, $c4, $c5;
        org.codehaus.jettison.json.JSONException $r1;
        org.codehaus.jettison.json.JSONTokener r0;

        r0 := @this: org.codehaus.jettison.json.JSONTokener;

     label01:
        $c0 = virtualinvoke r0.<org.codehaus.jettison.json.JSONTokener: char next()>();

        $i6 = (int) $c0;

        if $i6 != 47 goto label07;

        $c2 = virtualinvoke r0.<org.codehaus.jettison.json.JSONTokener: char next()>();

        $i7 = (int) $c2;

        lookupswitch($i7)
        {
            case 42: goto label03;
            case 47: goto label02;
            default: goto label06;
        };

     label02:
        $c3 = virtualinvoke r0.<org.codehaus.jettison.json.JSONTokener: char next()>();

        $i8 = (int) $c3;

        if $i8 == 10 goto label11;

        $i9 = (int) $c3;

        if $i9 == 13 goto label11;

        if $c3 != 0 goto label02;

        goto label11;

     label03:
        $c5 = virtualinvoke r0.<org.codehaus.jettison.json.JSONTokener: char next()>();

        if $c5 != 0 goto label04;

        $r1 = virtualinvoke r0.<org.codehaus.jettison.json.JSONTokener: org.codehaus.jettison.json.JSONException syntaxError(java.lang.String)>("Unclosed comment.");

        throw $r1;

     label04:
        $i10 = (int) $c5;

        if $i10 != 42 goto label03;

        $c4 = virtualinvoke r0.<org.codehaus.jettison.json.JSONTokener: char next()>();

        $i11 = (int) $c4;

        if $i11 != 47 goto label05;

        goto label11;

     label05:
        virtualinvoke r0.<org.codehaus.jettison.json.JSONTokener: void back()>();

        goto label03;

     label06:
        virtualinvoke r0.<org.codehaus.jettison.json.JSONTokener: void back()>();

        return 47;

     label07:
        $i12 = (int) $c0;

        if $i12 != 35 goto label09;

     label08:
        $c1 = virtualinvoke r0.<org.codehaus.jettison.json.JSONTokener: char next()>();

        $i13 = (int) $c1;

        if $i13 == 10 goto label11;

        $i14 = (int) $c1;

        if $i14 == 13 goto label11;

        if $c1 != 0 goto label08;

        goto label11;

     label09:
        if $c0 == 0 goto label10;

        $i15 = (int) $c0;

        if $i15 <= 32 goto label11;

     label10:
        return $c0;

     label11:
        goto label01;
    }

    public java.lang.String nextString(char) throws org.codehaus.jettison.json.JSONException
    {
        java.lang.StringBuffer $r6;
        int $i1, $i3, $i7, $i8, $i9, $i10;
        java.lang.String $r2, $r3, $r5;
        char $c0, $c2, $c4, c5, $c6;
        org.codehaus.jettison.json.JSONException $r4;
        org.codehaus.jettison.json.JSONTokener r1;

        r1 := @this: org.codehaus.jettison.json.JSONTokener;

        c5 := @parameter0: char;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

     label01:
        $c6 = virtualinvoke r1.<org.codehaus.jettison.json.JSONTokener: char next()>();

        $i7 = (int) $c6;

        lookupswitch($i7)
        {
            case 0: goto label02;
            case 10: goto label02;
            case 13: goto label02;
            case 92: goto label03;
            default: goto label12;
        };

     label02:
        $r4 = virtualinvoke r1.<org.codehaus.jettison.json.JSONTokener: org.codehaus.jettison.json.JSONException syntaxError(java.lang.String)>("Unterminated string");

        throw $r4;

     label03:
        $c0 = virtualinvoke r1.<org.codehaus.jettison.json.JSONTokener: char next()>();

        $i8 = (int) $c0;

        tableswitch($i8)
        {
            case 98: goto label04;
            case 99: goto label11;
            case 100: goto label11;
            case 101: goto label11;
            case 102: goto label07;
            case 103: goto label11;
            case 104: goto label11;
            case 105: goto label11;
            case 106: goto label11;
            case 107: goto label11;
            case 108: goto label11;
            case 109: goto label11;
            case 110: goto label06;
            case 111: goto label11;
            case 112: goto label11;
            case 113: goto label11;
            case 114: goto label08;
            case 115: goto label11;
            case 116: goto label05;
            case 117: goto label09;
            case 118: goto label11;
            case 119: goto label11;
            case 120: goto label10;
            default: goto label11;
        };

     label04:
        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(8);

        goto label01;

     label05:
        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(9);

        goto label01;

     label06:
        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

        goto label01;

     label07:
        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(12);

        goto label01;

     label08:
        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(13);

        goto label01;

     label09:
        $r3 = virtualinvoke r1.<org.codehaus.jettison.json.JSONTokener: java.lang.String next(int)>(4);

        $i3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r3, 16);

        $c4 = (char) $i3;

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c4);

        goto label01;

     label10:
        $r2 = virtualinvoke r1.<org.codehaus.jettison.json.JSONTokener: java.lang.String next(int)>(2);

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r2, 16);

        $c2 = (char) $i1;

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c2);

        goto label01;

     label11:
        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c0);

        goto label01;

     label12:
        $i9 = (int) $c6;

        $i10 = (int) c5;

        if $i9 != $i10 goto label13;

        $r5 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r5;

     label13:
        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c6);

        goto label01;
    }

    public java.lang.String nextTo(char)
    {
        char $c0, c1;
        java.lang.StringBuffer $r4;
        org.codehaus.jettison.json.JSONTokener r1;
        int $i2, $i3, $i4, $i5;
        java.lang.String $r2, $r3;

        r1 := @this: org.codehaus.jettison.json.JSONTokener;

        c1 := @parameter0: char;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

     label1:
        $c0 = virtualinvoke r1.<org.codehaus.jettison.json.JSONTokener: char next()>();

        $i2 = (int) $c0;

        $i3 = (int) c1;

        if $i2 == $i3 goto label2;

        if $c0 == 0 goto label2;

        $i4 = (int) $c0;

        if $i4 == 10 goto label2;

        $i5 = (int) $c0;

        if $i5 != 13 goto label4;

     label2:
        if $c0 == 0 goto label3;

        virtualinvoke r1.<org.codehaus.jettison.json.JSONTokener: void back()>();

     label3:
        $r2 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

        return $r3;

     label4:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c0);

        goto label1;
    }

    public java.lang.String nextTo(java.lang.String)
    {
        char $c0;
        java.lang.StringBuffer $r5;
        org.codehaus.jettison.json.JSONTokener r1;
        int $i1, $i2, $i3, $i4;
        java.lang.String r2, $r3, $r4;

        r1 := @this: org.codehaus.jettison.json.JSONTokener;

        r2 := @parameter0: java.lang.String;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

     label1:
        $c0 = virtualinvoke r1.<org.codehaus.jettison.json.JSONTokener: char next()>();

        $i2 = (int) $c0;

        $i1 = virtualinvoke r2.<java.lang.String: int indexOf(int)>($i2);

        if $i1 >= 0 goto label2;

        if $c0 == 0 goto label2;

        $i3 = (int) $c0;

        if $i3 == 10 goto label2;

        $i4 = (int) $c0;

        if $i4 != 13 goto label4;

     label2:
        if $c0 == 0 goto label3;

        virtualinvoke r1.<org.codehaus.jettison.json.JSONTokener: void back()>();

     label3:
        $r3 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String trim()>();

        return $r4;

     label4:
        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c0);

        goto label1;
    }

    public java.lang.Object nextValue() throws org.codehaus.jettison.json.JSONException
    {
        java.lang.Integer $r26, $r27, $r28;
        java.lang.Long $r29;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Exception $r15, $r16, $r18, $r20, $r21;
        org.codehaus.jettison.json.JSONTokener r0;
        java.lang.Double $r30;
        java.lang.StringBuffer $r25;
        int $i1, $i2, $i4, $i6, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18;
        java.lang.Boolean $r11, $r12;
        java.lang.String $r3, $r5, $r6, $r9, $r14;
        org.codehaus.jettison.json.JSONObject $r23;
        char $c0, $c3, $c5, c7;
        org.codehaus.jettison.json.JSONArray $r24;
        org.codehaus.jettison.json.JSONException $r13;
        java.lang.Object $r10;

        r0 := @this: org.codehaus.jettison.json.JSONTokener;

        $c0 = virtualinvoke r0.<org.codehaus.jettison.json.JSONTokener: char nextClean()>();

        c7 = $c0;

        $i8 = (int) $c0;

        lookupswitch($i8)
        {
            case 34: goto label01;
            case 39: goto label01;
            case 91: goto label03;
            case 123: goto label02;
            default: goto label04;
        };

     label01:
        $r3 = virtualinvoke r0.<org.codehaus.jettison.json.JSONTokener: java.lang.String nextString(char)>($c0);

        return $r3;

     label02:
        virtualinvoke r0.<org.codehaus.jettison.json.JSONTokener: void back()>();

        $r23 = new org.codehaus.jettison.json.JSONObject;

        specialinvoke $r23.<org.codehaus.jettison.json.JSONObject: void <init>(org.codehaus.jettison.json.JSONTokener)>(r0);

        return $r23;

     label03:
        virtualinvoke r0.<org.codehaus.jettison.json.JSONTokener: void back()>();

        $r24 = new org.codehaus.jettison.json.JSONArray;

        specialinvoke $r24.<org.codehaus.jettison.json.JSONArray: void <init>(org.codehaus.jettison.json.JSONTokener)>(r0);

        return $r24;

     label04:
        $r25 = new java.lang.StringBuffer;

        specialinvoke $r25.<java.lang.StringBuffer: void <init>()>();

     label05:
        $i9 = (int) c7;

        if $i9 < 32 goto label06;

        $r14 = ",:]}/\\\"[{;=#";

        $i10 = (int) c7;

        $i6 = virtualinvoke $r14.<java.lang.String: int indexOf(int)>($i10);

        if $i6 >= 0 goto label06;

        virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c7);

        c7 = virtualinvoke r0.<org.codehaus.jettison.json.JSONTokener: char next()>();

        goto label05;

     label06:
        virtualinvoke r0.<org.codehaus.jettison.json.JSONTokener: void back()>();

        $r5 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.String toString()>();

        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String trim()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 == 0 goto label07;

        $r13 = virtualinvoke r0.<org.codehaus.jettison.json.JSONTokener: org.codehaus.jettison.json.JSONException syntaxError(java.lang.String)>("Missing value.");

        throw $r13;

     label07:
        $z1 = virtualinvoke $r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("true");

        if $z1 == 0 goto label08;

        $r12 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        return $r12;

     label08:
        $z2 = virtualinvoke $r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("false");

        if $z2 == 0 goto label09;

        $r11 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        return $r11;

     label09:
        $z3 = virtualinvoke $r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("null");

        if $z3 == 0 goto label10;

        $r10 = <org.codehaus.jettison.json.JSONObject: java.lang.Object NULL>;

        return $r10;

     label10:
        $i11 = (int) $c0;

        if $i11 < 48 goto label11;

        $i12 = (int) $c0;

        if $i12 <= 57 goto label12;

     label11:
        $i13 = (int) $c0;

        if $i13 == 46 goto label12;

        $i14 = (int) $c0;

        if $i14 == 45 goto label12;

        $i15 = (int) $c0;

        if $i15 != 43 goto label28;

     label12:
        $i16 = (int) $c0;

        if $i16 != 48 goto label19;

        $i1 = virtualinvoke $r6.<java.lang.String: int length()>();

        if $i1 <= 2 goto label16;

        $c3 = virtualinvoke $r6.<java.lang.String: char charAt(int)>(1);

        $i17 = (int) $c3;

        if $i17 == 120 goto label13;

        $c5 = virtualinvoke $r6.<java.lang.String: char charAt(int)>(1);

        $i18 = (int) $c5;

        if $i18 != 88 goto label16;

     label13:
        $r26 = new java.lang.Integer;

        $r9 = virtualinvoke $r6.<java.lang.String: java.lang.String substring(int)>(2);

        $i4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r9, 16);

        specialinvoke $r26.<java.lang.Integer: void <init>(int)>($i4);

     label14:
        return $r26;

     label15:
        $r21 := @caughtexception;

        goto label19;

     label16:
        $r27 = new java.lang.Integer;

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r6, 8);

        specialinvoke $r27.<java.lang.Integer: void <init>(int)>($i2);

     label17:
        return $r27;

     label18:
        $r20 := @caughtexception;

     label19:
        $r28 = new java.lang.Integer;

        specialinvoke $r28.<java.lang.Integer: void <init>(java.lang.String)>($r6);

     label20:
        return $r28;

     label21:
        $r18 := @caughtexception;

     label22:
        $r29 = new java.lang.Long;

        specialinvoke $r29.<java.lang.Long: void <init>(java.lang.String)>($r6);

     label23:
        return $r29;

     label24:
        $r16 := @caughtexception;

     label25:
        $r30 = new java.lang.Double;

        specialinvoke $r30.<java.lang.Double: void <init>(java.lang.String)>($r6);

     label26:
        return $r30;

     label27:
        $r15 := @caughtexception;

        return $r6;

     label28:
        return $r6;

        catch java.lang.Exception from label13 to label14 with label15;
        catch java.lang.Exception from label16 to label17 with label18;
        catch java.lang.Exception from label19 to label20 with label21;
        catch java.lang.Exception from label22 to label23 with label24;
        catch java.lang.Exception from label25 to label26 with label27;
    }

    public char skipTo(char)
    {
        org.codehaus.jettison.json.JSONTokener r0;
        int i0, $i3, $i4;
        char $c1, c2;

        r0 := @this: org.codehaus.jettison.json.JSONTokener;

        c2 := @parameter0: char;

        i0 = r0.<org.codehaus.jettison.json.JSONTokener: int myIndex>;

     label1:
        $c1 = virtualinvoke r0.<org.codehaus.jettison.json.JSONTokener: char next()>();

        if $c1 != 0 goto label2;

        r0.<org.codehaus.jettison.json.JSONTokener: int myIndex> = i0;

        return $c1;

     label2:
        $i3 = (int) $c1;

        $i4 = (int) c2;

        if $i3 != $i4 goto label1;

        virtualinvoke r0.<org.codehaus.jettison.json.JSONTokener: void back()>();

        return $c1;
    }

    public void skipPast(java.lang.String)
    {
        org.codehaus.jettison.json.JSONTokener r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.String r1, $r2, $r3;

        r0 := @this: org.codehaus.jettison.json.JSONTokener;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.codehaus.jettison.json.JSONTokener: java.lang.String mySource>;

        $i0 = r0.<org.codehaus.jettison.json.JSONTokener: int myIndex>;

        $i1 = virtualinvoke $r2.<java.lang.String: int indexOf(java.lang.String,int)>(r1, $i0);

        r0.<org.codehaus.jettison.json.JSONTokener: int myIndex> = $i1;

        $i2 = r0.<org.codehaus.jettison.json.JSONTokener: int myIndex>;

        if $i2 >= 0 goto label1;

        $r3 = r0.<org.codehaus.jettison.json.JSONTokener: java.lang.String mySource>;

        $i6 = virtualinvoke $r3.<java.lang.String: int length()>();

        r0.<org.codehaus.jettison.json.JSONTokener: int myIndex> = $i6;

        goto label2;

     label1:
        $i3 = r0.<org.codehaus.jettison.json.JSONTokener: int myIndex>;

        $i4 = virtualinvoke r1.<java.lang.String: int length()>();

        $i5 = $i3 + $i4;

        r0.<org.codehaus.jettison.json.JSONTokener: int myIndex> = $i5;

     label2:
        return;
    }

    public org.codehaus.jettison.json.JSONException syntaxError(java.lang.String)
    {
        org.codehaus.jettison.json.JSONException $r0;
        org.codehaus.jettison.json.JSONTokener r4;
        java.lang.StringBuilder $r1, $r3, $r6;
        java.lang.String r2, $r5, $r7;

        r4 := @this: org.codehaus.jettison.json.JSONTokener;

        r2 := @parameter0: java.lang.String;

        $r0 = new org.codehaus.jettison.json.JSONException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r5 = virtualinvoke r4.<org.codehaus.jettison.json.JSONTokener: java.lang.String toString()>();

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<org.codehaus.jettison.json.JSONException: void <init>(java.lang.String)>($r7);

        return $r0;
    }

    public java.lang.String toString()
    {
        org.codehaus.jettison.json.JSONTokener r2;
        int $i0;
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r6;
        java.lang.String $r5, $r7;

        r2 := @this: org.codehaus.jettison.json.JSONTokener;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" at character ");

        $i0 = r2.<org.codehaus.jettison.json.JSONTokener: int myIndex>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" of ");

        $r5 = r2.<org.codehaus.jettison.json.JSONTokener: java.lang.String mySource>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }
}
