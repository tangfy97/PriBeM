class net.oauth.SimpleOAuthValidator$UsedNonce extends java.lang.Object implements java.lang.Comparable
{
    private final java.lang.String sortKey;

    transient void <init>(long, java.lang.String[])
    {
        java.lang.Object[] $r2;
        long l0;
        java.lang.String[] r5;
        net.oauth.SimpleOAuthValidator$UsedNonce r0;
        java.lang.Long $r3;
        int i1, i2;
        java.lang.StringBuilder $r1, $r8;
        java.lang.String $r4, $r6, r7, $r9;

        r0 := @this: net.oauth.SimpleOAuthValidator$UsedNonce;

        l0 := @parameter0: long;

        r5 := @parameter1: java.lang.String[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.StringBuilder;

        $r2 = newarray (java.lang.Object)[1];

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r2[0] = $r3;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%20d", $r2);

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>($r4);

        i1 = lengthof r5;

        i2 = 0;

     label1:
        if i2 >= i1 goto label4;

        r7 = r5[i2];

        $r8 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&");

        if r7 != null goto label2;

        $r9 = " ";

        goto label3;

     label2:
        $r9 = staticinvoke <net.oauth.OAuth: java.lang.String percentEncode(java.lang.String)>(r7);

     label3:
        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        i2 = i2 + 1;

        goto label1;

     label4:
        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<net.oauth.SimpleOAuthValidator$UsedNonce: java.lang.String sortKey> = $r6;

        return;
    }

    long getTimestamp()
    {
        long $l1;
        net.oauth.SimpleOAuthValidator$UsedNonce r0;
        int $i0, i2;
        java.lang.String $r1, $r2, $r3, $r4, $r5;

        r0 := @this: net.oauth.SimpleOAuthValidator$UsedNonce;

        $r1 = r0.<net.oauth.SimpleOAuthValidator$UsedNonce: java.lang.String sortKey>;

        $i0 = virtualinvoke $r1.<java.lang.String: int indexOf(java.lang.String)>("&");

        i2 = $i0;

        if $i0 >= 0 goto label1;

        $r5 = r0.<net.oauth.SimpleOAuthValidator$UsedNonce: java.lang.String sortKey>;

        i2 = virtualinvoke $r5.<java.lang.String: int length()>();

     label1:
        $r2 = r0.<net.oauth.SimpleOAuthValidator$UsedNonce: java.lang.String sortKey>;

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(0, i2);

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String trim()>();

        $l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r4);

        return $l1;
    }

    public int compareTo(net.oauth.SimpleOAuthValidator$UsedNonce)
    {
        net.oauth.SimpleOAuthValidator$UsedNonce r0, r1;
        int $i0;
        java.lang.String $r2, $r3;

        r1 := @this: net.oauth.SimpleOAuthValidator$UsedNonce;

        r0 := @parameter0: net.oauth.SimpleOAuthValidator$UsedNonce;

        if r0 != null goto label1;

        $i0 = 1;

        goto label2;

     label1:
        $r3 = r1.<net.oauth.SimpleOAuthValidator$UsedNonce: java.lang.String sortKey>;

        $r2 = r0.<net.oauth.SimpleOAuthValidator$UsedNonce: java.lang.String sortKey>;

        $i0 = virtualinvoke $r3.<java.lang.String: int compareTo(java.lang.String)>($r2);

     label2:
        return $i0;
    }

    public int hashCode()
    {
        net.oauth.SimpleOAuthValidator$UsedNonce r0;
        int $i0;
        java.lang.String $r1;

        r0 := @this: net.oauth.SimpleOAuthValidator$UsedNonce;

        $r1 = r0.<net.oauth.SimpleOAuthValidator$UsedNonce: java.lang.String sortKey>;

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        net.oauth.SimpleOAuthValidator$UsedNonce r1, $r4;
        java.lang.Object r0;
        java.lang.Class $r2, $r3;
        java.lang.String $r5, $r6;
        boolean $z0;

        r1 := @this: net.oauth.SimpleOAuthValidator$UsedNonce;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        return 0;

     label1:
        if r0 != r1 goto label2;

        return 1;

     label2:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 == $r3 goto label3;

        return 0;

     label3:
        $r6 = r1.<net.oauth.SimpleOAuthValidator$UsedNonce: java.lang.String sortKey>;

        $r4 = (net.oauth.SimpleOAuthValidator$UsedNonce) r0;

        $r5 = $r4.<net.oauth.SimpleOAuthValidator$UsedNonce: java.lang.String sortKey>;

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        return $z0;
    }

    public java.lang.String toString()
    {
        net.oauth.SimpleOAuthValidator$UsedNonce r0;
        java.lang.String $r1;

        r0 := @this: net.oauth.SimpleOAuthValidator$UsedNonce;

        $r1 = r0.<net.oauth.SimpleOAuthValidator$UsedNonce: java.lang.String sortKey>;

        return $r1;
    }

    public volatile int compareTo(java.lang.Object)
    {
        net.oauth.SimpleOAuthValidator$UsedNonce r0, $r2;
        int $i0;
        java.lang.Object r1;

        r0 := @this: net.oauth.SimpleOAuthValidator$UsedNonce;

        r1 := @parameter0: java.lang.Object;

        $r2 = (net.oauth.SimpleOAuthValidator$UsedNonce) r1;

        $i0 = virtualinvoke r0.<net.oauth.SimpleOAuthValidator$UsedNonce: int compareTo(net.oauth.SimpleOAuthValidator$UsedNonce)>($r2);

        return $i0;
    }
}
