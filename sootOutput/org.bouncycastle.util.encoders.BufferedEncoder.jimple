public class org.bouncycastle.util.encoders.BufferedEncoder extends java.lang.Object
{
    protected byte[] buf;
    protected int bufOff;
    protected org.bouncycastle.util.encoders.Translator translator;

    public void <init>(org.bouncycastle.util.encoders.Translator, int)
    {
        org.bouncycastle.util.encoders.BufferedEncoder r0;
        byte[] $r2;
        int i0, $i1, $i2;
        java.lang.IllegalArgumentException $r3;
        org.bouncycastle.util.encoders.Translator r1;

        r0 := @this: org.bouncycastle.util.encoders.BufferedEncoder;

        r1 := @parameter0: org.bouncycastle.util.encoders.Translator;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.bouncycastle.util.encoders.BufferedEncoder: org.bouncycastle.util.encoders.Translator translator> = r1;

        $i1 = interfaceinvoke r1.<org.bouncycastle.util.encoders.Translator: int getEncodedBlockSize()>();

        $i2 = i0 % $i1;

        if $i2 == 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("buffer size not multiple of input block size");

        throw $r3;

     label1:
        $r2 = newarray (byte)[i0];

        r0.<org.bouncycastle.util.encoders.BufferedEncoder: byte[] buf> = $r2;

        r0.<org.bouncycastle.util.encoders.BufferedEncoder: int bufOff> = 0;

        return;
    }

    public int processByte(byte, byte[], int)
    {
        org.bouncycastle.util.encoders.BufferedEncoder r0;
        byte[] $r1, $r2, $r3, r4, $r5;
        byte b2;
        int $i0, $i1, $i3, $i4, i5, $i6, i7;
        org.bouncycastle.util.encoders.Translator $r6;

        r0 := @this: org.bouncycastle.util.encoders.BufferedEncoder;

        b2 := @parameter0: byte;

        r4 := @parameter1: byte[];

        i5 := @parameter2: int;

        i7 = 0;

        $r1 = r0.<org.bouncycastle.util.encoders.BufferedEncoder: byte[] buf>;

        $i0 = r0.<org.bouncycastle.util.encoders.BufferedEncoder: int bufOff>;

        $i1 = $i0 + 1;

        r0.<org.bouncycastle.util.encoders.BufferedEncoder: int bufOff> = $i1;

        $r1[$i0] = b2;

        $i4 = r0.<org.bouncycastle.util.encoders.BufferedEncoder: int bufOff>;

        $r2 = r0.<org.bouncycastle.util.encoders.BufferedEncoder: byte[] buf>;

        $i3 = lengthof $r2;

        if $i4 != $i3 goto label1;

        $r6 = r0.<org.bouncycastle.util.encoders.BufferedEncoder: org.bouncycastle.util.encoders.Translator translator>;

        $r5 = r0.<org.bouncycastle.util.encoders.BufferedEncoder: byte[] buf>;

        $r3 = r0.<org.bouncycastle.util.encoders.BufferedEncoder: byte[] buf>;

        $i6 = lengthof $r3;

        i7 = interfaceinvoke $r6.<org.bouncycastle.util.encoders.Translator: int encode(byte[],int,int,byte[],int)>($r5, 0, $i6, r4, i5);

        r0.<org.bouncycastle.util.encoders.BufferedEncoder: int bufOff> = 0;

     label1:
        return i7;
    }

    public int processBytes(byte[], int, int, byte[], int)
    {
        byte[] $r1, r2, $r3, $r4, $r5, r6, $r7, $r9;
        org.bouncycastle.util.encoders.Translator $r8, $r10;
        org.bouncycastle.util.encoders.BufferedEncoder r0;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, $i12, i13, i14, i15, i16, i17, i18, i19, i20;
        java.lang.IllegalArgumentException $r11;

        r0 := @this: org.bouncycastle.util.encoders.BufferedEncoder;

        r2 := @parameter0: byte[];

        i13 := @parameter1: int;

        i14 := @parameter2: int;

        r6 := @parameter3: byte[];

        i15 := @parameter4: int;

        if i14 >= 0 goto label1;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can\'t have a negative input length!");

        throw $r11;

     label1:
        i16 = 0;

        $r1 = r0.<org.bouncycastle.util.encoders.BufferedEncoder: byte[] buf>;

        $i1 = lengthof $r1;

        $i0 = r0.<org.bouncycastle.util.encoders.BufferedEncoder: int bufOff>;

        i2 = $i1 - $i0;

        if i14 <= i2 goto label2;

        $r4 = r0.<org.bouncycastle.util.encoders.BufferedEncoder: byte[] buf>;

        $i6 = r0.<org.bouncycastle.util.encoders.BufferedEncoder: int bufOff>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, i13, $r4, $i6, i2);

        $r8 = r0.<org.bouncycastle.util.encoders.BufferedEncoder: org.bouncycastle.util.encoders.Translator translator>;

        $r7 = r0.<org.bouncycastle.util.encoders.BufferedEncoder: byte[] buf>;

        $r5 = r0.<org.bouncycastle.util.encoders.BufferedEncoder: byte[] buf>;

        $i7 = lengthof $r5;

        $i8 = interfaceinvoke $r8.<org.bouncycastle.util.encoders.Translator: int encode(byte[],int,int,byte[],int)>($r7, 0, $i7, r6, i15);

        i17 = 0 + $i8;

        r0.<org.bouncycastle.util.encoders.BufferedEncoder: int bufOff> = 0;

        i18 = i14 - i2;

        i19 = i13 + i2;

        i20 = i15 + i17;

        $r9 = r0.<org.bouncycastle.util.encoders.BufferedEncoder: byte[] buf>;

        $i9 = lengthof $r9;

        $i10 = i18 % $i9;

        i11 = i18 - $i10;

        $r10 = r0.<org.bouncycastle.util.encoders.BufferedEncoder: org.bouncycastle.util.encoders.Translator translator>;

        $i12 = interfaceinvoke $r10.<org.bouncycastle.util.encoders.Translator: int encode(byte[],int,int,byte[],int)>(r2, i19, i11, r6, i20);

        i16 = i17 + $i12;

        i14 = i18 - i11;

        i13 = i19 + i11;

     label2:
        if i14 == 0 goto label3;

        $r3 = r0.<org.bouncycastle.util.encoders.BufferedEncoder: byte[] buf>;

        $i3 = r0.<org.bouncycastle.util.encoders.BufferedEncoder: int bufOff>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, i13, $r3, $i3, i14);

        $i4 = r0.<org.bouncycastle.util.encoders.BufferedEncoder: int bufOff>;

        $i5 = $i4 + i14;

        r0.<org.bouncycastle.util.encoders.BufferedEncoder: int bufOff> = $i5;

     label3:
        return i16;
    }
}
