final class kodkod.util.nodes.AnnotatedNode$SharingDetector extends kodkod.ast.visitor.AbstractVoidVisitor
{
    final java.util.IdentityHashMap sharingStatus;
    int numSharedNodes;

    void <init>()
    {
        kodkod.util.nodes.AnnotatedNode$SharingDetector r0;
        java.util.IdentityHashMap $r1;

        r0 := @this: kodkod.util.nodes.AnnotatedNode$SharingDetector;

        specialinvoke r0.<kodkod.ast.visitor.AbstractVoidVisitor: void <init>()>();

        $r1 = new java.util.IdentityHashMap;

        specialinvoke $r1.<java.util.IdentityHashMap: void <init>()>();

        r0.<kodkod.util.nodes.AnnotatedNode$SharingDetector: java.util.IdentityHashMap sharingStatus> = $r1;

        return;
    }

    kodkod.util.collections.IdentityHashSet sharedNodes()
    {
        java.util.Map$Entry r6;
        java.util.IdentityHashMap $r2;
        kodkod.util.collections.IdentityHashSet $r0;
        java.util.Iterator $r4;
        java.util.Set $r3;
        kodkod.util.nodes.AnnotatedNode$SharingDetector r1;
        kodkod.ast.Node $r10;
        int $i0;
        java.lang.Boolean $r8;
        java.lang.Object $r5, $r7, $r9;
        boolean $z0;

        r1 := @this: kodkod.util.nodes.AnnotatedNode$SharingDetector;

        $r0 = new kodkod.util.collections.IdentityHashSet;

        $i0 = r1.<kodkod.util.nodes.AnnotatedNode$SharingDetector: int numSharedNodes>;

        specialinvoke $r0.<kodkod.util.collections.IdentityHashSet: void <init>(int)>($i0);

        $r2 = r1.<kodkod.util.nodes.AnnotatedNode$SharingDetector: java.util.IdentityHashMap sharingStatus>;

        $r3 = virtualinvoke $r2.<java.util.IdentityHashMap: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.Map$Entry) $r5;

        $r7 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r8 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        if $r7 != $r8 goto label2;

        $r9 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r10 = (kodkod.ast.Node) $r9;

        virtualinvoke $r0.<kodkod.util.collections.IdentityHashSet: boolean add(java.lang.Object)>($r10);

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return $r0;
    }

    protected final boolean visited(kodkod.ast.Node)
    {
        java.util.IdentityHashMap $r2, $r5;
        kodkod.util.nodes.AnnotatedNode$SharingDetector r0;
        kodkod.ast.Node r1;
        int $i0, $i1;
        java.lang.Boolean $r4, r6;
        java.lang.Object $r3;
        boolean $z0, $z1;

        r0 := @this: kodkod.util.nodes.AnnotatedNode$SharingDetector;

        r1 := @parameter0: kodkod.ast.Node;

        $r2 = r0.<kodkod.util.nodes.AnnotatedNode$SharingDetector: java.util.IdentityHashMap sharingStatus>;

        $r3 = virtualinvoke $r2.<java.util.IdentityHashMap: java.lang.Object get(java.lang.Object)>(r1);

        r6 = (java.lang.Boolean) $r3;

        $r4 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean equals(java.lang.Object)>(r6);

        if $z0 != 0 goto label3;

        if r6 != null goto label1;

        r6 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        goto label2;

     label1:
        r6 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $i0 = r0.<kodkod.util.nodes.AnnotatedNode$SharingDetector: int numSharedNodes>;

        $i1 = $i0 + 1;

        r0.<kodkod.util.nodes.AnnotatedNode$SharingDetector: int numSharedNodes> = $i1;

     label2:
        $r5 = r0.<kodkod.util.nodes.AnnotatedNode$SharingDetector: java.util.IdentityHashMap sharingStatus>;

        virtualinvoke $r5.<java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r6);

     label3:
        $z1 = virtualinvoke r6.<java.lang.Boolean: boolean booleanValue()>();

        return $z1;
    }
}
