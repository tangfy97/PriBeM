public final class org.apache.jena.atlas.lib.BitsInt extends java.lang.Object
{
    private static int IntLen;

    private void <init>()
    {
        org.apache.jena.atlas.lib.BitsInt r0;

        r0 := @this: org.apache.jena.atlas.lib.BitsInt;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static final int unpack(int, int, int)
    {
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;

        i2 := @parameter0: int;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        staticinvoke <org.apache.jena.atlas.lib.BitsInt: void check(int,int)>(i0, i1);

        if i1 != 0 goto label1;

        return 0;

     label1:
        $i3 = <org.apache.jena.atlas.lib.BitsInt: int IntLen>;

        $i4 = $i3 - i1;

        $i8 = i2 << $i4;

        $i5 = <org.apache.jena.atlas.lib.BitsInt: int IntLen>;

        $i6 = $i5 - i1;

        $i7 = $i6 + i0;

        $i9 = $i8 >>> $i7;

        return $i9;
    }

    public static final int pack(int, int, int, int)
    {
        int i0, i1, $i2, i3, $i4, i5, i6;

        i5 := @parameter0: int;

        i3 := @parameter1: int;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        staticinvoke <org.apache.jena.atlas.lib.BitsInt: void check(int,int)>(i0, i1);

        $i2 = staticinvoke <org.apache.jena.atlas.lib.BitsInt: int clear$(int,int,int)>(i5, i0, i1);

        $i4 = i3 << i0;

        i6 = $i2 | $i4;

        return i6;
    }

    public static final int unpack(java.lang.String, int, int)
    {
        int i0, i1, $i2;
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i0, i1);

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r1, 16);

        return $i2;
    }

    public static final int set(int, int)
    {
        int i0, i1, $i2;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        staticinvoke <org.apache.jena.atlas.lib.BitsInt: void check(int)>(i0);

        $i2 = staticinvoke <org.apache.jena.atlas.lib.BitsInt: int set$(int,int)>(i1, i0);

        return $i2;
    }

    public static final int set(int, int, int)
    {
        int i0, i1, i2, $i3;

        i2 := @parameter0: int;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        staticinvoke <org.apache.jena.atlas.lib.BitsInt: void check(int,int)>(i0, i1);

        $i3 = staticinvoke <org.apache.jena.atlas.lib.BitsInt: int set$(int,int,int)>(i2, i0, i1);

        return $i3;
    }

    public static final boolean test(int, boolean, int)
    {
        int i0, i1;
        boolean z0, $z1;

        i1 := @parameter0: int;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        staticinvoke <org.apache.jena.atlas.lib.BitsInt: void check(int)>(i0);

        $z1 = staticinvoke <org.apache.jena.atlas.lib.BitsInt: boolean test$(int,boolean,int)>(i1, z0, i0);

        return $z1;
    }

    public static final boolean isSet(int, int)
    {
        int i0, i1;
        boolean $z0;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        staticinvoke <org.apache.jena.atlas.lib.BitsInt: void check(int)>(i0);

        $z0 = staticinvoke <org.apache.jena.atlas.lib.BitsInt: boolean test$(int,boolean,int)>(i1, 1, i0);

        return $z0;
    }

    public static final boolean test(int, int, int, int)
    {
        int i0, i1, i2, i3;
        boolean $z0;

        i2 := @parameter0: int;

        i3 := @parameter1: int;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        staticinvoke <org.apache.jena.atlas.lib.BitsInt: void check(int,int)>(i0, i1);

        $z0 = staticinvoke <org.apache.jena.atlas.lib.BitsInt: boolean test$(int,int,int,int)>(i2, i3, i0, i1);

        return $z0;
    }

    public static final int access(int, int, int)
    {
        int i0, i1, i2, $i3;

        i2 := @parameter0: int;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        staticinvoke <org.apache.jena.atlas.lib.BitsInt: void check(int,int)>(i0, i1);

        $i3 = staticinvoke <org.apache.jena.atlas.lib.BitsInt: int access$(int,int,int)>(i2, i0, i1);

        return $i3;
    }

    public static final int clear(int, int, int)
    {
        int i0, i1, i2, $i3;

        i2 := @parameter0: int;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        staticinvoke <org.apache.jena.atlas.lib.BitsInt: void check(int,int)>(i0, i1);

        $i3 = staticinvoke <org.apache.jena.atlas.lib.BitsInt: int clear$(int,int,int)>(i2, i0, i1);

        return $i3;
    }

    public static final int mask(int, int)
    {
        int i0, i1, $i2;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        staticinvoke <org.apache.jena.atlas.lib.BitsInt: void check(int,int)>(i0, i1);

        $i2 = staticinvoke <org.apache.jena.atlas.lib.BitsInt: int mask$(int,int)>(i0, i1);

        return $i2;
    }

    public static final int maskZero(int, int)
    {
        int i0, i1, $i2;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        staticinvoke <org.apache.jena.atlas.lib.BitsInt: void check(int,int)>(i0, i1);

        $i2 = staticinvoke <org.apache.jena.atlas.lib.BitsInt: int maskZero$(int,int)>(i0, i1);

        return $i2;
    }

    private static final int clear$(int, int, int)
    {
        int i0, i1, $i2, i3, i4;

        i3 := @parameter0: int;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = staticinvoke <org.apache.jena.atlas.lib.BitsInt: int maskZero$(int,int)>(i0, i1);

        i4 = i3 & $i2;

        return i4;
    }

    private static final int set$(int, int)
    {
        int i0, $i1, i2, $i3;

        i2 := @parameter0: int;

        i0 := @parameter1: int;

        $i1 = staticinvoke <org.apache.jena.atlas.lib.BitsInt: int mask$(int)>(i0);

        $i3 = i2 | $i1;

        return $i3;
    }

    private static final int set$(int, int, int)
    {
        int i0, i1, $i2, i3, $i4;

        i3 := @parameter0: int;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = staticinvoke <org.apache.jena.atlas.lib.BitsInt: int mask$(int,int)>(i0, i1);

        $i4 = i3 | $i2;

        return $i4;
    }

    private static boolean test$(int, boolean, int)
    {
        int i0, i1;
        boolean z0, $z1, $z2;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        i1 := @parameter2: int;

        $z1 = staticinvoke <org.apache.jena.atlas.lib.BitsInt: boolean access$(int,int)>(i0, i1);

        if z0 != $z1 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    private static boolean test$(int, int, int, int)
    {
        int i0, i1, i2, $i3, i4;
        boolean $z0;

        i0 := @parameter0: int;

        i4 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $i3 = staticinvoke <org.apache.jena.atlas.lib.BitsInt: int access$(int,int,int)>(i0, i1, i2);

        if $i3 != i4 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static final boolean access$(int, int)
    {
        byte $b5;
        int i0, $i1, i2, $i3;
        long $l4;
        boolean $z0;

        i2 := @parameter0: int;

        i0 := @parameter1: int;

        $i1 = staticinvoke <org.apache.jena.atlas.lib.BitsInt: int mask$(int)>(i0);

        $i3 = i2 & $i1;

        $l4 = (long) $i3;

        $b5 = $l4 cmp 0L;

        if $b5 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static final int access$(int, int, int)
    {
        int i0, i1, $i2, $i3, $i4, i5, $i6, $i7, $i8, $i9, $i10;

        i0 := @parameter0: int;

        i5 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = <org.apache.jena.atlas.lib.BitsInt: int IntLen>;

        $i3 = $i2 - i1;

        $i8 = i0 << $i3;

        $i4 = <org.apache.jena.atlas.lib.BitsInt: int IntLen>;

        $i6 = $i4 - i1;

        $i7 = $i6 + i5;

        $i9 = $i8 >>> $i7;

        $i10 = $i9 << i5;

        return $i10;
    }

    private static final int mask$(int)
    {
        int i0, $i1;

        i0 := @parameter0: int;

        $i1 = 1 << i0;

        return $i1;
    }

    private static final int mask$(int, int)
    {
        int i0, $i1, $i2, $i3, i4, $i5, $i6, $i7, $i8, $i9, $i11;

        i4 := @parameter0: int;

        i0 := @parameter1: int;

        if i0 != 0 goto label1;

        return 0;

     label1:
        $i1 = <org.apache.jena.atlas.lib.BitsInt: int IntLen>;

        $i2 = $i1 - i0;

        $i11 = (int) -1;

        $i7 = $i11 << $i2;

        $i3 = <org.apache.jena.atlas.lib.BitsInt: int IntLen>;

        $i5 = $i3 - i0;

        $i6 = $i5 + i4;

        $i8 = $i7 >>> $i6;

        $i9 = $i8 << i4;

        return $i9;
    }

    private static final int maskZero$(int, int)
    {
        int i0, i1, $i2, $i3, $i5;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = staticinvoke <org.apache.jena.atlas.lib.BitsInt: int mask$(int,int)>(i0, i1);

        $i5 = (int) -1;

        $i3 = $i2 ^ $i5;

        return $i3;
    }

    private static final void check(int)
    {
        int i0, $i1;
        java.lang.StringBuilder $r1, $r2, $r3;
        java.lang.String $r4;
        java.lang.IllegalArgumentException $r0;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $i1 = <org.apache.jena.atlas.lib.BitsInt: int IntLen>;

        if i0 < $i1 goto label2;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal bit index: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r0;

     label2:
        return;
    }

    private static final void check(int, int)
    {
        int i0, $i1, i2, $i3;
        java.lang.String $r4, $r9, $r17;
        java.lang.IllegalArgumentException $r0, $r5, $r10;
        java.lang.StringBuilder $r1, $r2, $r3, $r6, $r7, $r8, $r11, $r12, $r13, $r14, $r15, $r16;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        if i0 < 0 goto label1;

        $i1 = <org.apache.jena.atlas.lib.BitsInt: int IntLen>;

        if i0 < $i1 goto label2;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal start: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r0;

     label2:
        if i2 < 0 goto label3;

        $i3 = <org.apache.jena.atlas.lib.BitsInt: int IntLen>;

        if i2 <= $i3 goto label4;

     label3:
        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal finish: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label4:
        if i0 <= i2 goto label5;

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal range: (");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw $r10;

     label5:
        return;
    }

    static void <clinit>()
    {
        <org.apache.jena.atlas.lib.BitsInt: int IntLen> = 32;

        return;
    }
}
