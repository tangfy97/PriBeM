public class org.apache.lucene.queryparser.flexible.standard.builders.RegexpQueryNodeBuilder extends java.lang.Object implements org.apache.lucene.queryparser.flexible.standard.builders.StandardQueryBuilder
{

    public void <init>()
    {
        org.apache.lucene.queryparser.flexible.standard.builders.RegexpQueryNodeBuilder r0;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.builders.RegexpQueryNodeBuilder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.apache.lucene.search.RegexpQuery build(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) throws org.apache.lucene.queryparser.flexible.core.QueryNodeException
    {
        org.apache.lucene.util.BytesRef $r5;
        org.apache.lucene.queryparser.flexible.standard.nodes.RegexpQueryNode r1;
        org.apache.lucene.index.Term $r3;
        org.apache.lucene.queryparser.flexible.standard.builders.RegexpQueryNodeBuilder r8;
        org.apache.lucene.search.RegexpQuery $r2;
        java.lang.Object $r6;
        org.apache.lucene.search.MultiTermQuery$RewriteMethod r7;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode r0;
        java.lang.String $r4;

        r8 := @this: org.apache.lucene.queryparser.flexible.standard.builders.RegexpQueryNodeBuilder;

        r0 := @parameter0: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode;

        r1 = (org.apache.lucene.queryparser.flexible.standard.nodes.RegexpQueryNode) r0;

        $r2 = new org.apache.lucene.search.RegexpQuery;

        $r3 = new org.apache.lucene.index.Term;

        $r4 = virtualinvoke r1.<org.apache.lucene.queryparser.flexible.standard.nodes.RegexpQueryNode: java.lang.String getFieldAsString()>();

        $r5 = virtualinvoke r1.<org.apache.lucene.queryparser.flexible.standard.nodes.RegexpQueryNode: org.apache.lucene.util.BytesRef textToBytesRef()>();

        specialinvoke $r3.<org.apache.lucene.index.Term: void <init>(java.lang.String,org.apache.lucene.util.BytesRef)>($r4, $r5);

        specialinvoke $r2.<org.apache.lucene.search.RegexpQuery: void <init>(org.apache.lucene.index.Term)>($r3);

        $r6 = interfaceinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNode: java.lang.Object getTag(java.lang.String)>("MultiTermRewriteMethodConfiguration");

        r7 = (org.apache.lucene.search.MultiTermQuery$RewriteMethod) $r6;

        if r7 == null goto label1;

        virtualinvoke $r2.<org.apache.lucene.search.RegexpQuery: void setRewriteMethod(org.apache.lucene.search.MultiTermQuery$RewriteMethod)>(r7);

     label1:
        return $r2;
    }

    public volatile org.apache.lucene.search.Query build(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) throws org.apache.lucene.queryparser.flexible.core.QueryNodeException
    {
        org.apache.lucene.queryparser.flexible.standard.builders.RegexpQueryNodeBuilder r0;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode r1;
        org.apache.lucene.search.RegexpQuery $r2;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.builders.RegexpQueryNodeBuilder;

        r1 := @parameter0: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode;

        $r2 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.builders.RegexpQueryNodeBuilder: org.apache.lucene.search.RegexpQuery build(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)>(r1);

        return $r2;
    }

    public volatile java.lang.Object build(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) throws org.apache.lucene.queryparser.flexible.core.QueryNodeException
    {
        org.apache.lucene.queryparser.flexible.standard.builders.RegexpQueryNodeBuilder r0;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode r1;
        org.apache.lucene.search.RegexpQuery $r2;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.builders.RegexpQueryNodeBuilder;

        r1 := @parameter0: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode;

        $r2 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.builders.RegexpQueryNodeBuilder: org.apache.lucene.search.RegexpQuery build(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)>(r1);

        return $r2;
    }
}
