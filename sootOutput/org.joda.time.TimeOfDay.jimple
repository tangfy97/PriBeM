public final class org.joda.time.TimeOfDay extends org.joda.time.base.BasePartial implements org.joda.time.ReadablePartial, java.io.Serializable
{
    private static final long serialVersionUID;
    private static final org.joda.time.DateTimeFieldType[] FIELD_TYPES;
    public static final org.joda.time.TimeOfDay MIDNIGHT;
    public static final int HOUR_OF_DAY;
    public static final int MINUTE_OF_HOUR;
    public static final int SECOND_OF_MINUTE;
    public static final int MILLIS_OF_SECOND;

    public static org.joda.time.TimeOfDay fromCalendarFields(java.util.Calendar)
    {
        java.util.Calendar r0;
        org.joda.time.TimeOfDay $r1;
        int $i0, $i1, $i2, $i3;
        java.lang.IllegalArgumentException $r2;

        r0 := @parameter0: java.util.Calendar;

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The calendar must not be null");

        throw $r2;

     label1:
        $r1 = new org.joda.time.TimeOfDay;

        $i0 = virtualinvoke r0.<java.util.Calendar: int get(int)>(11);

        $i1 = virtualinvoke r0.<java.util.Calendar: int get(int)>(12);

        $i2 = virtualinvoke r0.<java.util.Calendar: int get(int)>(13);

        $i3 = virtualinvoke r0.<java.util.Calendar: int get(int)>(14);

        specialinvoke $r1.<org.joda.time.TimeOfDay: void <init>(int,int,int,int)>($i0, $i1, $i2, $i3);

        return $r1;
    }

    public static org.joda.time.TimeOfDay fromDateFields(java.util.Date)
    {
        java.util.Date r0;
        long $l3, $l4;
        java.lang.IllegalArgumentException $r2;
        org.joda.time.TimeOfDay $r1;
        int $i0, $i1, $i2, $i5;

        r0 := @parameter0: java.util.Date;

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The date must not be null");

        throw $r2;

     label1:
        $r1 = new org.joda.time.TimeOfDay;

        $i0 = virtualinvoke r0.<java.util.Date: int getHours()>();

        $i1 = virtualinvoke r0.<java.util.Date: int getMinutes()>();

        $i2 = virtualinvoke r0.<java.util.Date: int getSeconds()>();

        $l3 = virtualinvoke r0.<java.util.Date: long getTime()>();

        $l4 = $l3 % 1000L;

        $i5 = (int) $l4;

        specialinvoke $r1.<org.joda.time.TimeOfDay: void <init>(int,int,int,int)>($i0, $i1, $i2, $i5);

        return $r1;
    }

    public static org.joda.time.TimeOfDay fromMillisOfDay(long)
    {
        long l0;
        org.joda.time.TimeOfDay $r0;

        l0 := @parameter0: long;

        $r0 = staticinvoke <org.joda.time.TimeOfDay: org.joda.time.TimeOfDay fromMillisOfDay(long,org.joda.time.Chronology)>(l0, null);

        return $r0;
    }

    public static org.joda.time.TimeOfDay fromMillisOfDay(long, org.joda.time.Chronology)
    {
        org.joda.time.TimeOfDay $r2;
        org.joda.time.Chronology $r0, $r1, r3;
        long l0;

        l0 := @parameter0: long;

        r3 := @parameter1: org.joda.time.Chronology;

        $r0 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r3);

        $r1 = virtualinvoke $r0.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>();

        $r2 = new org.joda.time.TimeOfDay;

        specialinvoke $r2.<org.joda.time.TimeOfDay: void <init>(long,org.joda.time.Chronology)>(l0, $r1);

        return $r2;
    }

    public void <init>()
    {
        org.joda.time.TimeOfDay r0;

        r0 := @this: org.joda.time.TimeOfDay;

        specialinvoke r0.<org.joda.time.base.BasePartial: void <init>()>();

        return;
    }

    public void <init>(org.joda.time.DateTimeZone)
    {
        org.joda.time.chrono.ISOChronology $r2;
        org.joda.time.DateTimeZone r1;
        org.joda.time.TimeOfDay r0;

        r0 := @this: org.joda.time.TimeOfDay;

        r1 := @parameter0: org.joda.time.DateTimeZone;

        $r2 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>(r1);

        specialinvoke r0.<org.joda.time.base.BasePartial: void <init>(org.joda.time.Chronology)>($r2);

        return;
    }

    public void <init>(org.joda.time.Chronology)
    {
        org.joda.time.Chronology r1;
        org.joda.time.TimeOfDay r0;

        r0 := @this: org.joda.time.TimeOfDay;

        r1 := @parameter0: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.base.BasePartial: void <init>(org.joda.time.Chronology)>(r1);

        return;
    }

    public void <init>(long)
    {
        long l0;
        org.joda.time.TimeOfDay r0;

        r0 := @this: org.joda.time.TimeOfDay;

        l0 := @parameter0: long;

        specialinvoke r0.<org.joda.time.base.BasePartial: void <init>(long)>(l0);

        return;
    }

    public void <init>(long, org.joda.time.Chronology)
    {
        org.joda.time.Chronology r1;
        long l0;
        org.joda.time.TimeOfDay r0;

        r0 := @this: org.joda.time.TimeOfDay;

        l0 := @parameter0: long;

        r1 := @parameter1: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.base.BasePartial: void <init>(long,org.joda.time.Chronology)>(l0, r1);

        return;
    }

    public void <init>(java.lang.Object)
    {
        java.lang.Object r1;
        org.joda.time.format.DateTimeFormatter $r2;
        org.joda.time.TimeOfDay r0;

        r0 := @this: org.joda.time.TimeOfDay;

        r1 := @parameter0: java.lang.Object;

        $r2 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter timeParser()>();

        specialinvoke r0.<org.joda.time.base.BasePartial: void <init>(java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter)>(r1, null, $r2);

        return;
    }

    public void <init>(java.lang.Object, org.joda.time.Chronology)
    {
        org.joda.time.format.DateTimeFormatter $r4;
        org.joda.time.TimeOfDay r0;
        org.joda.time.Chronology r2, $r3;
        java.lang.Object r1;

        r0 := @this: org.joda.time.TimeOfDay;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.joda.time.Chronology;

        $r3 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r2);

        $r4 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter timeParser()>();

        specialinvoke r0.<org.joda.time.base.BasePartial: void <init>(java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter)>(r1, $r3, $r4);

        return;
    }

    public void <init>(int, int)
    {
        int i0, i1;
        org.joda.time.TimeOfDay r0;

        r0 := @this: org.joda.time.TimeOfDay;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<org.joda.time.TimeOfDay: void <init>(int,int,int,int,org.joda.time.Chronology)>(i0, i1, 0, 0, null);

        return;
    }

    public void <init>(int, int, org.joda.time.Chronology)
    {
        org.joda.time.TimeOfDay r0;
        int i0, i1;
        org.joda.time.Chronology r1;

        r0 := @this: org.joda.time.TimeOfDay;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.TimeOfDay: void <init>(int,int,int,int,org.joda.time.Chronology)>(i0, i1, 0, 0, r1);

        return;
    }

    public void <init>(int, int, int)
    {
        org.joda.time.TimeOfDay r0;
        int i0, i1, i2;

        r0 := @this: org.joda.time.TimeOfDay;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        specialinvoke r0.<org.joda.time.TimeOfDay: void <init>(int,int,int,int,org.joda.time.Chronology)>(i0, i1, i2, 0, null);

        return;
    }

    public void <init>(int, int, int, org.joda.time.Chronology)
    {
        org.joda.time.TimeOfDay r0;
        int i0, i1, i2;
        org.joda.time.Chronology r1;

        r0 := @this: org.joda.time.TimeOfDay;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 := @parameter3: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.TimeOfDay: void <init>(int,int,int,int,org.joda.time.Chronology)>(i0, i1, i2, 0, r1);

        return;
    }

    public void <init>(int, int, int, int)
    {
        org.joda.time.TimeOfDay r0;
        int i0, i1, i2, i3;

        r0 := @this: org.joda.time.TimeOfDay;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        specialinvoke r0.<org.joda.time.TimeOfDay: void <init>(int,int,int,int,org.joda.time.Chronology)>(i0, i1, i2, i3, null);

        return;
    }

    public void <init>(int, int, int, int, org.joda.time.Chronology)
    {
        int[] $r1;
        org.joda.time.TimeOfDay r0;
        int i0, i1, i2, i3;
        org.joda.time.Chronology r2;

        r0 := @this: org.joda.time.TimeOfDay;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r2 := @parameter4: org.joda.time.Chronology;

        $r1 = newarray (int)[4];

        $r1[0] = i0;

        $r1[1] = i1;

        $r1[2] = i2;

        $r1[3] = i3;

        specialinvoke r0.<org.joda.time.base.BasePartial: void <init>(int[],org.joda.time.Chronology)>($r1, r2);

        return;
    }

    void <init>(org.joda.time.TimeOfDay, int[])
    {
        int[] r2;
        org.joda.time.TimeOfDay r0, r1;

        r0 := @this: org.joda.time.TimeOfDay;

        r1 := @parameter0: org.joda.time.TimeOfDay;

        r2 := @parameter1: int[];

        specialinvoke r0.<org.joda.time.base.BasePartial: void <init>(org.joda.time.base.BasePartial,int[])>(r1, r2);

        return;
    }

    void <init>(org.joda.time.TimeOfDay, org.joda.time.Chronology)
    {
        org.joda.time.Chronology r2;
        org.joda.time.TimeOfDay r0, r1;

        r0 := @this: org.joda.time.TimeOfDay;

        r1 := @parameter0: org.joda.time.TimeOfDay;

        r2 := @parameter1: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.base.BasePartial: void <init>(org.joda.time.base.BasePartial,org.joda.time.Chronology)>(r1, r2);

        return;
    }

    public int size()
    {
        org.joda.time.TimeOfDay r0;

        r0 := @this: org.joda.time.TimeOfDay;

        return 4;
    }

    protected org.joda.time.DateTimeField getField(int, org.joda.time.Chronology)
    {
        java.lang.IndexOutOfBoundsException $r5;
        org.joda.time.Chronology r0;
        java.lang.StringBuffer $r6, $r7, $r8;
        org.joda.time.TimeOfDay r10;
        int i0;
        org.joda.time.DateTimeField $r1, $r2, $r3, $r4;
        java.lang.String $r9;

        r10 := @this: org.joda.time.TimeOfDay;

        i0 := @parameter0: int;

        r0 := @parameter1: org.joda.time.Chronology;

        tableswitch(i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            default: goto label5;
        };

     label1:
        $r4 = virtualinvoke r0.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfDay()>();

        return $r4;

     label2:
        $r3 = virtualinvoke r0.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfHour()>();

        return $r3;

     label3:
        $r2 = virtualinvoke r0.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfMinute()>();

        return $r2;

     label4:
        $r1 = virtualinvoke r0.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfSecond()>();

        return $r1;

     label5:
        $r5 = new java.lang.IndexOutOfBoundsException;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid index: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r9);

        throw $r5;
    }

    public org.joda.time.DateTimeFieldType getFieldType(int)
    {
        org.joda.time.DateTimeFieldType[] $r0;
        org.joda.time.TimeOfDay r2;
        int i0;
        org.joda.time.DateTimeFieldType $r1;

        r2 := @this: org.joda.time.TimeOfDay;

        i0 := @parameter0: int;

        $r0 = <org.joda.time.TimeOfDay: org.joda.time.DateTimeFieldType[] FIELD_TYPES>;

        $r1 = $r0[i0];

        return $r1;
    }

    public org.joda.time.DateTimeFieldType[] getFieldTypes()
    {
        org.joda.time.DateTimeFieldType[] $r0, $r2;
        org.joda.time.TimeOfDay r3;
        java.lang.Object $r1;

        r3 := @this: org.joda.time.TimeOfDay;

        $r0 = <org.joda.time.TimeOfDay: org.joda.time.DateTimeFieldType[] FIELD_TYPES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (org.joda.time.DateTimeFieldType[]) $r1;

        return $r2;
    }

    public org.joda.time.TimeOfDay withChronologyRetainFields(org.joda.time.Chronology)
    {
        int[] $r5;
        org.joda.time.TimeOfDay r2, $r4;
        org.joda.time.Chronology $r0, $r1, $r3, r6;

        r2 := @this: org.joda.time.TimeOfDay;

        r6 := @parameter0: org.joda.time.Chronology;

        $r0 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r6);

        $r1 = virtualinvoke $r0.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>();

        $r3 = virtualinvoke r2.<org.joda.time.TimeOfDay: org.joda.time.Chronology getChronology()>();

        if $r1 != $r3 goto label1;

        return r2;

     label1:
        $r4 = new org.joda.time.TimeOfDay;

        specialinvoke $r4.<org.joda.time.TimeOfDay: void <init>(org.joda.time.TimeOfDay,org.joda.time.Chronology)>(r2, $r1);

        $r5 = virtualinvoke r2.<org.joda.time.TimeOfDay: int[] getValues()>();

        virtualinvoke $r1.<org.joda.time.Chronology: void validate(org.joda.time.ReadablePartial,int[])>($r4, $r5);

        return $r4;
    }

    public org.joda.time.TimeOfDay withField(org.joda.time.DateTimeFieldType, int)
    {
        int[] $r2, $r4;
        org.joda.time.TimeOfDay r0, $r5;
        int $i0, i1, $i2;
        org.joda.time.DateTimeFieldType r1;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.TimeOfDay;

        r1 := @parameter0: org.joda.time.DateTimeFieldType;

        i1 := @parameter1: int;

        $i0 = virtualinvoke r0.<org.joda.time.TimeOfDay: int indexOfSupported(org.joda.time.DateTimeFieldType)>(r1);

        $i2 = virtualinvoke r0.<org.joda.time.TimeOfDay: int getValue(int)>($i0);

        if i1 != $i2 goto label1;

        return r0;

     label1:
        $r2 = virtualinvoke r0.<org.joda.time.TimeOfDay: int[] getValues()>();

        $r3 = virtualinvoke r0.<org.joda.time.TimeOfDay: org.joda.time.DateTimeField getField(int)>($i0);

        $r4 = virtualinvoke $r3.<org.joda.time.DateTimeField: int[] set(org.joda.time.ReadablePartial,int,int[],int)>(r0, $i0, $r2, i1);

        $r5 = new org.joda.time.TimeOfDay;

        specialinvoke $r5.<org.joda.time.TimeOfDay: void <init>(org.joda.time.TimeOfDay,int[])>(r0, $r4);

        return $r5;
    }

    public org.joda.time.TimeOfDay withFieldAdded(org.joda.time.DurationFieldType, int)
    {
        int[] $r2, $r4;
        org.joda.time.TimeOfDay r0, $r5;
        org.joda.time.DurationFieldType r1;
        int $i0, i1;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.TimeOfDay;

        r1 := @parameter0: org.joda.time.DurationFieldType;

        i1 := @parameter1: int;

        $i0 = virtualinvoke r0.<org.joda.time.TimeOfDay: int indexOfSupported(org.joda.time.DurationFieldType)>(r1);

        if i1 != 0 goto label1;

        return r0;

     label1:
        $r2 = virtualinvoke r0.<org.joda.time.TimeOfDay: int[] getValues()>();

        $r3 = virtualinvoke r0.<org.joda.time.TimeOfDay: org.joda.time.DateTimeField getField(int)>($i0);

        $r4 = virtualinvoke $r3.<org.joda.time.DateTimeField: int[] addWrapPartial(org.joda.time.ReadablePartial,int,int[],int)>(r0, $i0, $r2, i1);

        $r5 = new org.joda.time.TimeOfDay;

        specialinvoke $r5.<org.joda.time.TimeOfDay: void <init>(org.joda.time.TimeOfDay,int[])>(r0, $r4);

        return $r5;
    }

    public org.joda.time.TimeOfDay withPeriodAdded(org.joda.time.ReadablePeriod, int)
    {
        org.joda.time.ReadablePeriod r0;
        int[] r5;
        org.joda.time.TimeOfDay r1, $r2;
        org.joda.time.DurationFieldType $r3;
        int i0, $i1, $i2, $i3, $i4, i5;
        org.joda.time.DateTimeField $r4;

        r1 := @this: org.joda.time.TimeOfDay;

        r0 := @parameter0: org.joda.time.ReadablePeriod;

        i0 := @parameter1: int;

        if r0 == null goto label1;

        if i0 != 0 goto label2;

     label1:
        return r1;

     label2:
        r5 = virtualinvoke r1.<org.joda.time.TimeOfDay: int[] getValues()>();

        i5 = 0;

     label3:
        $i1 = interfaceinvoke r0.<org.joda.time.ReadablePeriod: int size()>();

        if i5 >= $i1 goto label5;

        $r3 = interfaceinvoke r0.<org.joda.time.ReadablePeriod: org.joda.time.DurationFieldType getFieldType(int)>(i5);

        $i2 = virtualinvoke r1.<org.joda.time.TimeOfDay: int indexOf(org.joda.time.DurationFieldType)>($r3);

        if $i2 < 0 goto label4;

        $r4 = virtualinvoke r1.<org.joda.time.TimeOfDay: org.joda.time.DateTimeField getField(int)>($i2);

        $i3 = interfaceinvoke r0.<org.joda.time.ReadablePeriod: int getValue(int)>(i5);

        $i4 = staticinvoke <org.joda.time.field.FieldUtils: int safeMultiply(int,int)>($i3, i0);

        r5 = virtualinvoke $r4.<org.joda.time.DateTimeField: int[] addWrapPartial(org.joda.time.ReadablePartial,int,int[],int)>(r1, $i2, r5, $i4);

     label4:
        i5 = i5 + 1;

        goto label3;

     label5:
        $r2 = new org.joda.time.TimeOfDay;

        specialinvoke $r2.<org.joda.time.TimeOfDay: void <init>(org.joda.time.TimeOfDay,int[])>(r1, r5);

        return $r2;
    }

    public org.joda.time.TimeOfDay plus(org.joda.time.ReadablePeriod)
    {
        org.joda.time.ReadablePeriod r1;
        org.joda.time.TimeOfDay r0, $r2;

        r0 := @this: org.joda.time.TimeOfDay;

        r1 := @parameter0: org.joda.time.ReadablePeriod;

        $r2 = virtualinvoke r0.<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay withPeriodAdded(org.joda.time.ReadablePeriod,int)>(r1, 1);

        return $r2;
    }

    public org.joda.time.TimeOfDay plusHours(int)
    {
        org.joda.time.TimeOfDay r0, $r2;
        org.joda.time.DurationFieldType $r1;
        int i0;

        r0 := @this: org.joda.time.TimeOfDay;

        i0 := @parameter0: int;

        $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>();

        $r2 = virtualinvoke r0.<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay withFieldAdded(org.joda.time.DurationFieldType,int)>($r1, i0);

        return $r2;
    }

    public org.joda.time.TimeOfDay plusMinutes(int)
    {
        org.joda.time.TimeOfDay r0, $r2;
        org.joda.time.DurationFieldType $r1;
        int i0;

        r0 := @this: org.joda.time.TimeOfDay;

        i0 := @parameter0: int;

        $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>();

        $r2 = virtualinvoke r0.<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay withFieldAdded(org.joda.time.DurationFieldType,int)>($r1, i0);

        return $r2;
    }

    public org.joda.time.TimeOfDay plusSeconds(int)
    {
        org.joda.time.TimeOfDay r0, $r2;
        org.joda.time.DurationFieldType $r1;
        int i0;

        r0 := @this: org.joda.time.TimeOfDay;

        i0 := @parameter0: int;

        $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>();

        $r2 = virtualinvoke r0.<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay withFieldAdded(org.joda.time.DurationFieldType,int)>($r1, i0);

        return $r2;
    }

    public org.joda.time.TimeOfDay plusMillis(int)
    {
        org.joda.time.TimeOfDay r0, $r2;
        org.joda.time.DurationFieldType $r1;
        int i0;

        r0 := @this: org.joda.time.TimeOfDay;

        i0 := @parameter0: int;

        $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>();

        $r2 = virtualinvoke r0.<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay withFieldAdded(org.joda.time.DurationFieldType,int)>($r1, i0);

        return $r2;
    }

    public org.joda.time.TimeOfDay minus(org.joda.time.ReadablePeriod)
    {
        org.joda.time.ReadablePeriod r1;
        org.joda.time.TimeOfDay r0, $r2;
        int $i1;

        r0 := @this: org.joda.time.TimeOfDay;

        r1 := @parameter0: org.joda.time.ReadablePeriod;

        $i1 = (int) -1;

        $r2 = virtualinvoke r0.<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay withPeriodAdded(org.joda.time.ReadablePeriod,int)>(r1, $i1);

        return $r2;
    }

    public org.joda.time.TimeOfDay minusHours(int)
    {
        org.joda.time.TimeOfDay r0, $r2;
        org.joda.time.DurationFieldType $r1;
        int i0, $i1;

        r0 := @this: org.joda.time.TimeOfDay;

        i0 := @parameter0: int;

        $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>();

        $i1 = staticinvoke <org.joda.time.field.FieldUtils: int safeNegate(int)>(i0);

        $r2 = virtualinvoke r0.<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay withFieldAdded(org.joda.time.DurationFieldType,int)>($r1, $i1);

        return $r2;
    }

    public org.joda.time.TimeOfDay minusMinutes(int)
    {
        org.joda.time.TimeOfDay r0, $r2;
        org.joda.time.DurationFieldType $r1;
        int i0, $i1;

        r0 := @this: org.joda.time.TimeOfDay;

        i0 := @parameter0: int;

        $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>();

        $i1 = staticinvoke <org.joda.time.field.FieldUtils: int safeNegate(int)>(i0);

        $r2 = virtualinvoke r0.<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay withFieldAdded(org.joda.time.DurationFieldType,int)>($r1, $i1);

        return $r2;
    }

    public org.joda.time.TimeOfDay minusSeconds(int)
    {
        org.joda.time.TimeOfDay r0, $r2;
        org.joda.time.DurationFieldType $r1;
        int i0, $i1;

        r0 := @this: org.joda.time.TimeOfDay;

        i0 := @parameter0: int;

        $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>();

        $i1 = staticinvoke <org.joda.time.field.FieldUtils: int safeNegate(int)>(i0);

        $r2 = virtualinvoke r0.<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay withFieldAdded(org.joda.time.DurationFieldType,int)>($r1, $i1);

        return $r2;
    }

    public org.joda.time.TimeOfDay minusMillis(int)
    {
        org.joda.time.TimeOfDay r0, $r2;
        org.joda.time.DurationFieldType $r1;
        int i0, $i1;

        r0 := @this: org.joda.time.TimeOfDay;

        i0 := @parameter0: int;

        $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>();

        $i1 = staticinvoke <org.joda.time.field.FieldUtils: int safeNegate(int)>(i0);

        $r2 = virtualinvoke r0.<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay withFieldAdded(org.joda.time.DurationFieldType,int)>($r1, $i1);

        return $r2;
    }

    public org.joda.time.TimeOfDay$Property property(org.joda.time.DateTimeFieldType)
    {
        org.joda.time.TimeOfDay$Property $r0;
        org.joda.time.TimeOfDay r1;
        int $i0;
        org.joda.time.DateTimeFieldType r2;

        r1 := @this: org.joda.time.TimeOfDay;

        r2 := @parameter0: org.joda.time.DateTimeFieldType;

        $r0 = new org.joda.time.TimeOfDay$Property;

        $i0 = virtualinvoke r1.<org.joda.time.TimeOfDay: int indexOfSupported(org.joda.time.DateTimeFieldType)>(r2);

        specialinvoke $r0.<org.joda.time.TimeOfDay$Property: void <init>(org.joda.time.TimeOfDay,int)>(r1, $i0);

        return $r0;
    }

    public org.joda.time.LocalTime toLocalTime()
    {
        org.joda.time.TimeOfDay r1;
        org.joda.time.LocalTime $r0;
        int $i0, $i1, $i2, $i3;
        org.joda.time.Chronology $r2;

        r1 := @this: org.joda.time.TimeOfDay;

        $r0 = new org.joda.time.LocalTime;

        $i0 = virtualinvoke r1.<org.joda.time.TimeOfDay: int getHourOfDay()>();

        $i1 = virtualinvoke r1.<org.joda.time.TimeOfDay: int getMinuteOfHour()>();

        $i2 = virtualinvoke r1.<org.joda.time.TimeOfDay: int getSecondOfMinute()>();

        $i3 = virtualinvoke r1.<org.joda.time.TimeOfDay: int getMillisOfSecond()>();

        $r2 = virtualinvoke r1.<org.joda.time.TimeOfDay: org.joda.time.Chronology getChronology()>();

        specialinvoke $r0.<org.joda.time.LocalTime: void <init>(int,int,int,int,org.joda.time.Chronology)>($i0, $i1, $i2, $i3, $r2);

        return $r0;
    }

    public org.joda.time.DateTime toDateTimeToday()
    {
        org.joda.time.DateTime $r1;
        org.joda.time.TimeOfDay r0;

        r0 := @this: org.joda.time.TimeOfDay;

        $r1 = virtualinvoke r0.<org.joda.time.TimeOfDay: org.joda.time.DateTime toDateTimeToday(org.joda.time.DateTimeZone)>(null);

        return $r1;
    }

    public org.joda.time.DateTime toDateTimeToday(org.joda.time.DateTimeZone)
    {
        org.joda.time.DateTimeZone r2;
        org.joda.time.TimeOfDay r0;
        org.joda.time.Chronology $r1, $r3;
        org.joda.time.DateTime $r4;
        long $l0, $l1;

        r0 := @this: org.joda.time.TimeOfDay;

        r2 := @parameter0: org.joda.time.DateTimeZone;

        $r1 = virtualinvoke r0.<org.joda.time.TimeOfDay: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>(r2);

        $l0 = staticinvoke <org.joda.time.DateTimeUtils: long currentTimeMillis()>();

        $l1 = virtualinvoke $r3.<org.joda.time.Chronology: long set(org.joda.time.ReadablePartial,long)>(r0, $l0);

        $r4 = new org.joda.time.DateTime;

        specialinvoke $r4.<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>($l1, $r3);

        return $r4;
    }

    public int getHourOfDay()
    {
        int $i0;
        org.joda.time.TimeOfDay r0;

        r0 := @this: org.joda.time.TimeOfDay;

        $i0 = virtualinvoke r0.<org.joda.time.TimeOfDay: int getValue(int)>(0);

        return $i0;
    }

    public int getMinuteOfHour()
    {
        int $i0;
        org.joda.time.TimeOfDay r0;

        r0 := @this: org.joda.time.TimeOfDay;

        $i0 = virtualinvoke r0.<org.joda.time.TimeOfDay: int getValue(int)>(1);

        return $i0;
    }

    public int getSecondOfMinute()
    {
        int $i0;
        org.joda.time.TimeOfDay r0;

        r0 := @this: org.joda.time.TimeOfDay;

        $i0 = virtualinvoke r0.<org.joda.time.TimeOfDay: int getValue(int)>(2);

        return $i0;
    }

    public int getMillisOfSecond()
    {
        int $i0;
        org.joda.time.TimeOfDay r0;

        r0 := @this: org.joda.time.TimeOfDay;

        $i0 = virtualinvoke r0.<org.joda.time.TimeOfDay: int getValue(int)>(3);

        return $i0;
    }

    public org.joda.time.TimeOfDay withHourOfDay(int)
    {
        int[] $r1, $r4;
        org.joda.time.TimeOfDay r0, $r5;
        org.joda.time.Chronology $r2;
        int i0;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.TimeOfDay;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.TimeOfDay: int[] getValues()>();

        $r2 = virtualinvoke r0.<org.joda.time.TimeOfDay: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfDay()>();

        $r4 = virtualinvoke $r3.<org.joda.time.DateTimeField: int[] set(org.joda.time.ReadablePartial,int,int[],int)>(r0, 0, $r1, i0);

        $r5 = new org.joda.time.TimeOfDay;

        specialinvoke $r5.<org.joda.time.TimeOfDay: void <init>(org.joda.time.TimeOfDay,int[])>(r0, $r4);

        return $r5;
    }

    public org.joda.time.TimeOfDay withMinuteOfHour(int)
    {
        int[] $r1, $r4;
        org.joda.time.TimeOfDay r0, $r5;
        org.joda.time.Chronology $r2;
        int i0;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.TimeOfDay;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.TimeOfDay: int[] getValues()>();

        $r2 = virtualinvoke r0.<org.joda.time.TimeOfDay: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfHour()>();

        $r4 = virtualinvoke $r3.<org.joda.time.DateTimeField: int[] set(org.joda.time.ReadablePartial,int,int[],int)>(r0, 1, $r1, i0);

        $r5 = new org.joda.time.TimeOfDay;

        specialinvoke $r5.<org.joda.time.TimeOfDay: void <init>(org.joda.time.TimeOfDay,int[])>(r0, $r4);

        return $r5;
    }

    public org.joda.time.TimeOfDay withSecondOfMinute(int)
    {
        int[] $r1, $r4;
        org.joda.time.TimeOfDay r0, $r5;
        org.joda.time.Chronology $r2;
        int i0;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.TimeOfDay;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.TimeOfDay: int[] getValues()>();

        $r2 = virtualinvoke r0.<org.joda.time.TimeOfDay: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfMinute()>();

        $r4 = virtualinvoke $r3.<org.joda.time.DateTimeField: int[] set(org.joda.time.ReadablePartial,int,int[],int)>(r0, 2, $r1, i0);

        $r5 = new org.joda.time.TimeOfDay;

        specialinvoke $r5.<org.joda.time.TimeOfDay: void <init>(org.joda.time.TimeOfDay,int[])>(r0, $r4);

        return $r5;
    }

    public org.joda.time.TimeOfDay withMillisOfSecond(int)
    {
        int[] $r1, $r4;
        org.joda.time.TimeOfDay r0, $r5;
        org.joda.time.Chronology $r2;
        int i0;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.TimeOfDay;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.TimeOfDay: int[] getValues()>();

        $r2 = virtualinvoke r0.<org.joda.time.TimeOfDay: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfSecond()>();

        $r4 = virtualinvoke $r3.<org.joda.time.DateTimeField: int[] set(org.joda.time.ReadablePartial,int,int[],int)>(r0, 3, $r1, i0);

        $r5 = new org.joda.time.TimeOfDay;

        specialinvoke $r5.<org.joda.time.TimeOfDay: void <init>(org.joda.time.TimeOfDay,int[])>(r0, $r4);

        return $r5;
    }

    public org.joda.time.TimeOfDay$Property hourOfDay()
    {
        org.joda.time.TimeOfDay$Property $r0;
        org.joda.time.TimeOfDay r1;

        r1 := @this: org.joda.time.TimeOfDay;

        $r0 = new org.joda.time.TimeOfDay$Property;

        specialinvoke $r0.<org.joda.time.TimeOfDay$Property: void <init>(org.joda.time.TimeOfDay,int)>(r1, 0);

        return $r0;
    }

    public org.joda.time.TimeOfDay$Property minuteOfHour()
    {
        org.joda.time.TimeOfDay$Property $r0;
        org.joda.time.TimeOfDay r1;

        r1 := @this: org.joda.time.TimeOfDay;

        $r0 = new org.joda.time.TimeOfDay$Property;

        specialinvoke $r0.<org.joda.time.TimeOfDay$Property: void <init>(org.joda.time.TimeOfDay,int)>(r1, 1);

        return $r0;
    }

    public org.joda.time.TimeOfDay$Property secondOfMinute()
    {
        org.joda.time.TimeOfDay$Property $r0;
        org.joda.time.TimeOfDay r1;

        r1 := @this: org.joda.time.TimeOfDay;

        $r0 = new org.joda.time.TimeOfDay$Property;

        specialinvoke $r0.<org.joda.time.TimeOfDay$Property: void <init>(org.joda.time.TimeOfDay,int)>(r1, 2);

        return $r0;
    }

    public org.joda.time.TimeOfDay$Property millisOfSecond()
    {
        org.joda.time.TimeOfDay$Property $r0;
        org.joda.time.TimeOfDay r1;

        r1 := @this: org.joda.time.TimeOfDay;

        $r0 = new org.joda.time.TimeOfDay$Property;

        specialinvoke $r0.<org.joda.time.TimeOfDay$Property: void <init>(org.joda.time.TimeOfDay,int)>(r1, 3);

        return $r0;
    }

    public java.lang.String toString()
    {
        java.lang.String $r2;
        org.joda.time.format.DateTimeFormatter $r0;
        org.joda.time.TimeOfDay r1;

        r1 := @this: org.joda.time.TimeOfDay;

        $r0 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter tTime()>();

        $r2 = virtualinvoke $r0.<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>(r1);

        return $r2;
    }

    static void <clinit>()
    {
        org.joda.time.DateTimeFieldType[] $r0;
        org.joda.time.TimeOfDay $r5;
        org.joda.time.DateTimeFieldType $r1, $r2, $r3, $r4;

        <org.joda.time.TimeOfDay: int MILLIS_OF_SECOND> = 3;

        <org.joda.time.TimeOfDay: int SECOND_OF_MINUTE> = 2;

        <org.joda.time.TimeOfDay: int MINUTE_OF_HOUR> = 1;

        <org.joda.time.TimeOfDay: int HOUR_OF_DAY> = 0;

        <org.joda.time.TimeOfDay: long serialVersionUID> = 3633353405803318660L;

        $r0 = newarray (org.joda.time.DateTimeFieldType)[4];

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfDay()>();

        $r0[0] = $r1;

        $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfHour()>();

        $r0[1] = $r2;

        $r3 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfMinute()>();

        $r0[2] = $r3;

        $r4 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfSecond()>();

        $r0[3] = $r4;

        <org.joda.time.TimeOfDay: org.joda.time.DateTimeFieldType[] FIELD_TYPES> = $r0;

        $r5 = new org.joda.time.TimeOfDay;

        specialinvoke $r5.<org.joda.time.TimeOfDay: void <init>(int,int,int,int)>(0, 0, 0, 0);

        <org.joda.time.TimeOfDay: org.joda.time.TimeOfDay MIDNIGHT> = $r5;

        return;
    }
}
