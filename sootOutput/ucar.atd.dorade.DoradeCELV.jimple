class ucar.atd.dorade.DoradeCELV extends ucar.atd.dorade.DoradeDescriptor
{
    protected int nCells;
    protected float[] ranges;

    public void <init>(java.io.RandomAccessFile, boolean) throws ucar.atd.dorade.DoradeDescriptor$DescriptorException
    {
        java.io.PrintStream $r4;
        java.io.RandomAccessFile r1;
        byte[] $r2;
        float[] $r3, $r5;
        ucar.atd.dorade.DoradeCELV r0;
        int $i0, $i1, $i2, $i3, $i4, i5;
        float $f0;
        boolean z0, $z1;

        r0 := @this: ucar.atd.dorade.DoradeCELV;

        r1 := @parameter0: java.io.RandomAccessFile;

        z0 := @parameter1: boolean;

        specialinvoke r0.<ucar.atd.dorade.DoradeDescriptor: void <init>()>();

        $r2 = virtualinvoke r0.<ucar.atd.dorade.DoradeCELV: byte[] readDescriptor(java.io.RandomAccessFile,boolean,java.lang.String)>(r1, z0, "CELV");

        $i0 = virtualinvoke r0.<ucar.atd.dorade.DoradeCELV: int grabInt(byte[],int)>($r2, 8);

        r0.<ucar.atd.dorade.DoradeCELV: int nCells> = $i0;

        $i1 = r0.<ucar.atd.dorade.DoradeCELV: int nCells>;

        $r3 = newarray (float)[$i1];

        r0.<ucar.atd.dorade.DoradeCELV: float[] ranges> = $r3;

        i5 = 0;

     label1:
        $i2 = r0.<ucar.atd.dorade.DoradeCELV: int nCells>;

        if i5 >= $i2 goto label2;

        $r5 = r0.<ucar.atd.dorade.DoradeCELV: float[] ranges>;

        $i3 = 4 * i5;

        $i4 = 12 + $i3;

        $f0 = virtualinvoke r0.<ucar.atd.dorade.DoradeCELV: float grabFloat(byte[],int)>($r2, $i4);

        $r5[i5] = $f0;

        i5 = i5 + 1;

        goto label1;

     label2:
        $z1 = r0.<ucar.atd.dorade.DoradeCELV: boolean verbose>;

        if $z1 == 0 goto label3;

        $r4 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.Object)>(r0);

     label3:
        return;
    }

    protected void <init>()
    {
        ucar.atd.dorade.DoradeCELV r0;

        r0 := @this: ucar.atd.dorade.DoradeCELV;

        specialinvoke r0.<ucar.atd.dorade.DoradeDescriptor: void <init>()>();

        return;
    }

    public java.lang.String toString()
    {
        float[] $r10, $r13, $r16;
        int $i0, $i1, $i2;
        java.lang.String $r6, $r18;
        ucar.atd.dorade.DoradeCELV r3;
        float $f0, $f1, $f2;
        java.lang.StringBuilder $r0, $r1, $r2, $r4, $r5, $r7, $r8, $r9, $r11, $r12, $r14, $r15, $r17;

        r3 := @this: ucar.atd.dorade.DoradeCELV;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CELV\n");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  number of cells: ");

        $i0 = r3.<ucar.atd.dorade.DoradeCELV: int nCells>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ranges: ");

        $r10 = r3.<ucar.atd.dorade.DoradeCELV: float[] ranges>;

        $f0 = $r10[0];

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r13 = r3.<ucar.atd.dorade.DoradeCELV: float[] ranges>;

        $f1 = $r13[1];

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f1);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ..., ");

        $r16 = r3.<ucar.atd.dorade.DoradeCELV: float[] ranges>;

        $i1 = r3.<ucar.atd.dorade.DoradeCELV: int nCells>;

        $i2 = $i1 - 1;

        $f2 = $r16[$i2];

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f2);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r18;
    }

    public int getNCells()
    {
        ucar.atd.dorade.DoradeCELV r0;
        int $i0;

        r0 := @this: ucar.atd.dorade.DoradeCELV;

        $i0 = r0.<ucar.atd.dorade.DoradeCELV: int nCells>;

        return $i0;
    }

    public float[] getCellRanges()
    {
        ucar.atd.dorade.DoradeCELV r0;
        float[] $r1;

        r0 := @this: ucar.atd.dorade.DoradeCELV;

        $r1 = r0.<ucar.atd.dorade.DoradeCELV: float[] ranges>;

        return $r1;
    }
}
