final class com.mycila.inject.internal.guava.base.Optional$Present extends com.mycila.inject.internal.guava.base.Optional
{
    private final java.lang.Object reference;
    private static final long serialVersionUID;

    void <init>(java.lang.Object)
    {
        java.lang.Object r1;
        com.mycila.inject.internal.guava.base.Optional$Present r0;

        r0 := @this: com.mycila.inject.internal.guava.base.Optional$Present;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<com.mycila.inject.internal.guava.base.Optional: void <init>(com.mycila.inject.internal.guava.base.Optional$1)>(null);

        r0.<com.mycila.inject.internal.guava.base.Optional$Present: java.lang.Object reference> = r1;

        return;
    }

    public boolean isPresent()
    {
        com.mycila.inject.internal.guava.base.Optional$Present r0;

        r0 := @this: com.mycila.inject.internal.guava.base.Optional$Present;

        return 1;
    }

    public java.lang.Object get()
    {
        java.lang.Object $r1;
        com.mycila.inject.internal.guava.base.Optional$Present r0;

        r0 := @this: com.mycila.inject.internal.guava.base.Optional$Present;

        $r1 = r0.<com.mycila.inject.internal.guava.base.Optional$Present: java.lang.Object reference>;

        return $r1;
    }

    public java.lang.Object or(java.lang.Object)
    {
        java.lang.Object r0, $r2;
        com.mycila.inject.internal.guava.base.Optional$Present r1;

        r1 := @this: com.mycila.inject.internal.guava.base.Optional$Present;

        r0 := @parameter0: java.lang.Object;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "use orNull() instead of or(null)");

        $r2 = r1.<com.mycila.inject.internal.guava.base.Optional$Present: java.lang.Object reference>;

        return $r2;
    }

    public com.mycila.inject.internal.guava.base.Optional or(com.mycila.inject.internal.guava.base.Optional)
    {
        com.mycila.inject.internal.guava.base.Optional r0;
        com.mycila.inject.internal.guava.base.Optional$Present r1;

        r1 := @this: com.mycila.inject.internal.guava.base.Optional$Present;

        r0 := @parameter0: com.mycila.inject.internal.guava.base.Optional;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        return r1;
    }

    public java.lang.Object or(com.mycila.inject.internal.guava.base.Supplier)
    {
        com.mycila.inject.internal.guava.base.Supplier r0;
        java.lang.Object $r2;
        com.mycila.inject.internal.guava.base.Optional$Present r1;

        r1 := @this: com.mycila.inject.internal.guava.base.Optional$Present;

        r0 := @parameter0: com.mycila.inject.internal.guava.base.Supplier;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r2 = r1.<com.mycila.inject.internal.guava.base.Optional$Present: java.lang.Object reference>;

        return $r2;
    }

    public java.lang.Object orNull()
    {
        java.lang.Object $r1;
        com.mycila.inject.internal.guava.base.Optional$Present r0;

        r0 := @this: com.mycila.inject.internal.guava.base.Optional$Present;

        $r1 = r0.<com.mycila.inject.internal.guava.base.Optional$Present: java.lang.Object reference>;

        return $r1;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object r0, $r3, $r4;
        com.mycila.inject.internal.guava.base.Optional$Present r1, r2;
        boolean $z0, $z1;

        r2 := @this: com.mycila.inject.internal.guava.base.Optional$Present;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof com.mycila.inject.internal.guava.base.Optional$Present;

        if $z0 == 0 goto label1;

        r1 = (com.mycila.inject.internal.guava.base.Optional$Present) r0;

        $r4 = r2.<com.mycila.inject.internal.guava.base.Optional$Present: java.lang.Object reference>;

        $r3 = r1.<com.mycila.inject.internal.guava.base.Optional$Present: java.lang.Object reference>;

        $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        return $z1;

     label1:
        return 0;
    }

    public int hashCode()
    {
        int $i0, $i1;
        java.lang.Object $r1;
        com.mycila.inject.internal.guava.base.Optional$Present r0;

        r0 := @this: com.mycila.inject.internal.guava.base.Optional$Present;

        $r1 = r0.<com.mycila.inject.internal.guava.base.Optional$Present: java.lang.Object reference>;

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $i1 = 1502476572 + $i0;

        return $i1;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r0, $r1, $r4, $r5;
        java.lang.Object $r3;
        com.mycila.inject.internal.guava.base.Optional$Present r2;
        java.lang.String $r6;

        r2 := @this: com.mycila.inject.internal.guava.base.Optional$Present;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Optional.of(");

        $r3 = r2.<com.mycila.inject.internal.guava.base.Optional$Present: java.lang.Object reference>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public static void <clinit>()
    {
        <com.mycila.inject.internal.guava.base.Optional$Present: long serialVersionUID> = 0L;

        return;
    }
}
