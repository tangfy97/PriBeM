public class jena.rdfparse extends java.lang.Object
{

    public void <init>()
    {
        jena.rdfparse r0;

        r0 := @this: jena.rdfparse;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static transient void main(java.lang.String[]) throws java.lang.Exception
    {
        java.lang.String[] r0;
        int $i0;
        java.lang.String $r1, $r2, $r3;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.String[];

        $i0 = lengthof r0;

        if $i0 != 1 goto label2;

        $r1 = r0[0];

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("--test");

        if $z0 != 0 goto label1;

        $r3 = r0[0];

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("--internal-test");

        if $z2 == 0 goto label2;

     label1:
        $r2 = r0[0];

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("--test");

        staticinvoke <jena.rdfparse: void runTests(boolean)>($z1);

        goto label3;

     label2:
        staticinvoke <com.hp.hpl.jena.rdf.arp.NTriple: void main(java.lang.String[])>(r0);

     label3:
        return;
    }

    protected static void runTests(boolean) throws java.lang.Exception
    {
        java.lang.Object[] $r4;
        java.lang.Class[] $r1;
        java.lang.reflect.Constructor $r3;
        com.hp.hpl.jena.shared.Command r7;
        java.lang.Boolean $r5;
        java.lang.Class $r0, $r2;
        java.lang.Object $r6;
        boolean z0;

        z0 := @parameter0: boolean;

        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("jena.test.rdfparse");

        $r1 = newarray (java.lang.Class)[1];

        $r2 = <java.lang.Boolean: java.lang.Class TYPE>;

        $r1[0] = $r2;

        $r3 = virtualinvoke $r0.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r1);

        $r4 = newarray (java.lang.Object)[1];

        $r5 = new java.lang.Boolean;

        specialinvoke $r5.<java.lang.Boolean: void <init>(boolean)>(z0);

        $r4[0] = $r5;

        $r6 = virtualinvoke $r3.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r4);

        r7 = (com.hp.hpl.jena.shared.Command) $r6;

        interfaceinvoke r7.<com.hp.hpl.jena.shared.Command: java.lang.Object execute()>();

        return;
    }

    static void <clinit>()
    {
        staticinvoke <jena.cmdline.CmdLineUtils: void setLog4jConfiguration()>();

        return;
    }
}
