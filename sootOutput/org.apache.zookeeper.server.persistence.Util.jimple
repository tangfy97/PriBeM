public class org.apache.zookeeper.server.persistence.Util extends java.lang.Object
{
    private static final org.slf4j.Logger LOG;
    private static final java.lang.String SNAP_DIR;
    private static final java.lang.String LOG_DIR;
    private static final java.lang.String DB_FORMAT_CONV;
    private static final java.nio.ByteBuffer fill;

    public void <init>()
    {
        org.apache.zookeeper.server.persistence.Util r0;

        r0 := @this: org.apache.zookeeper.server.persistence.Util;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String makeURIString(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String r2, r7, $r9, r10, $r11, r16;
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r5, $r6, $r8, $r12, $r13, $r14, $r15;

        r2 := @parameter0: java.lang.String;

        r7 := @parameter1: java.lang.String;

        r10 := @parameter2: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("file:snapDir=");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("logDir");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        r16 = $r9;

        if r10 == null goto label1;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";dbFormatConversion=");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        $r11 = virtualinvoke r16.<java.lang.String: java.lang.String replace(char,char)>(92, 47);

        return $r11;
    }

    public static java.net.URI makeFileLoggerURL(java.io.File, java.io.File)
    {
        java.lang.String $r1, $r3, $r4;
        java.net.URI $r5;
        java.io.File r0, r2;

        r0 := @parameter0: java.io.File;

        r2 := @parameter1: java.io.File;

        $r1 = virtualinvoke r0.<java.io.File: java.lang.String getPath()>();

        $r3 = virtualinvoke r2.<java.io.File: java.lang.String getPath()>();

        $r4 = staticinvoke <org.apache.zookeeper.server.persistence.Util: java.lang.String makeURIString(java.lang.String,java.lang.String,java.lang.String)>($r1, $r3, null);

        $r5 = staticinvoke <java.net.URI: java.net.URI create(java.lang.String)>($r4);

        return $r5;
    }

    public static java.net.URI makeFileLoggerURL(java.io.File, java.io.File, java.lang.String)
    {
        java.lang.String $r1, $r3, r4, $r5;
        java.net.URI $r6;
        java.io.File r0, r2;

        r0 := @parameter0: java.io.File;

        r2 := @parameter1: java.io.File;

        r4 := @parameter2: java.lang.String;

        $r1 = virtualinvoke r0.<java.io.File: java.lang.String getPath()>();

        $r3 = virtualinvoke r2.<java.io.File: java.lang.String getPath()>();

        $r5 = staticinvoke <org.apache.zookeeper.server.persistence.Util: java.lang.String makeURIString(java.lang.String,java.lang.String,java.lang.String)>($r1, $r3, r4);

        $r6 = staticinvoke <java.net.URI: java.net.URI create(java.lang.String)>($r5);

        return $r6;
    }

    public static java.lang.String makeLogName(long)
    {
        java.lang.StringBuilder $r0, $r1, $r3;
        long l0;
        java.lang.String $r2, $r4;

        l0 := @parameter0: long;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("log.");

        $r2 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>(l0);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    public static java.lang.String makeSnapshotName(long)
    {
        java.lang.StringBuilder $r0, $r1, $r3;
        long l0;
        java.lang.String $r2, $r4;

        l0 := @parameter0: long;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("snapshot.");

        $r2 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>(l0);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    public static java.io.File getSnapDir(java.util.Properties)
    {
        java.util.Properties r1;
        java.lang.String $r2;
        java.io.File $r0;

        r1 := @parameter0: java.util.Properties;

        $r0 = new java.io.File;

        $r2 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("snapDir");

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>($r2);

        return $r0;
    }

    public static java.io.File getLogDir(java.util.Properties)
    {
        java.util.Properties r1;
        java.lang.String $r2;
        java.io.File $r0;

        r1 := @parameter0: java.util.Properties;

        $r0 = new java.io.File;

        $r2 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("logDir");

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>($r2);

        return $r0;
    }

    public static java.lang.String getFormatConversionPolicy(java.util.Properties)
    {
        java.util.Properties r0;
        java.lang.String $r1;

        r0 := @parameter0: java.util.Properties;

        $r1 = virtualinvoke r0.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("dbFormatConversion");

        return $r1;
    }

    public static long getZxidFromName(java.lang.String, java.lang.String)
    {
        java.lang.String[] $r1;
        java.lang.NumberFormatException $r5;
        long l1;
        int $i0;
        java.lang.String r0, r2, $r3, $r4;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        l1 = -1L;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\.");

        $i0 = lengthof $r1;

        if $i0 != 2 goto label4;

        $r3 = $r1[0];

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z0 == 0 goto label4;

     label1:
        $r4 = $r1[1];

        l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String,int)>($r4, 16);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

     label4:
        return l1;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public static boolean isValidSnapshot(java.io.File) throws java.io.IOException
    {
        byte[] r21;
        java.io.RandomAccessFile $r22;
        java.nio.ByteBuffer $r3;
        byte $b1, $b3, $b8;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r10, $r11, $r15, $r16, $r17, $r18, $r23, $r24;
        java.lang.Throwable $r20;
        long $l0, $l2, $l4, $l5;
        short $s9, $s16;
        int $i6, $i7, $i10, $i11, $i12, i13, $i14, $i15, $i17;
        java.lang.String $r1, $r12, $r19;
        org.slf4j.Logger $r5, $r14;
        java.io.File r0;

        r0 := @parameter0: java.io.File;

        if r0 == null goto label01;

        $r1 = virtualinvoke r0.<java.io.File: java.lang.String getName()>();

        $l0 = staticinvoke <org.apache.zookeeper.server.persistence.Util: long getZxidFromName(java.lang.String,java.lang.String)>($r1, "snapshot");

        $b1 = $l0 cmp -1L;

        if $b1 != 0 goto label02;

     label01:
        return 0;

     label02:
        $r22 = new java.io.RandomAccessFile;

        specialinvoke $r22.<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>(r0, "r");

     label03:
        $l2 = virtualinvoke $r22.<java.io.RandomAccessFile: long length()>();

        $b3 = $l2 cmp 10L;

        $i14 = (int) $b3;

        if $i14 >= 0 goto label05;

        goto label17;

     label04:
        return 0;

     label05:
        $l4 = virtualinvoke $r22.<java.io.RandomAccessFile: long length()>();

        $l5 = $l4 - 5L;

        virtualinvoke $r22.<java.io.RandomAccessFile: void seek(long)>($l5);

        r21 = newarray (byte)[5];

        i13 = 0;

     label06:
        if i13 >= 5 goto label07;

        $i10 = lengthof r21;

        $i11 = $i10 - i13;

        $i12 = virtualinvoke $r22.<java.io.RandomAccessFile: int read(byte[],int,int)>(r21, i13, $i11);

        if $i12 < 0 goto label07;

        i13 = i13 + $i12;

        goto label06;

     label07:
        $i6 = lengthof r21;

        if i13 == $i6 goto label09;

        $r14 = <org.apache.zookeeper.server.persistence.Util: org.slf4j.Logger LOG>;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid snapshot ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" too short, len = ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i13);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r14.<org.slf4j.Logger: void info(java.lang.String)>($r19);

        goto label18;

     label08:
        return 0;

     label09:
        $r3 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r21);

        $i7 = virtualinvoke $r3.<java.nio.ByteBuffer: int getInt()>();

        $b8 = virtualinvoke $r3.<java.nio.ByteBuffer: byte get()>();

        if $i7 != 1 goto label10;

        $i15 = (int) $b8;

        if $i15 == 47 goto label12;

     label10:
        $r5 = <org.apache.zookeeper.server.persistence.Util: org.slf4j.Logger LOG>;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid snapshot ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" len = ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" byte = ");

        $s16 = (short) $b8;

        $s9 = $s16 & 255;

        $i17 = (int) $s9;

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i17);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r5.<org.slf4j.Logger: void info(java.lang.String)>($r12);

        goto label19;

     label11:
        return 0;

     label12:
        goto label20;

     label13:
        goto label16;

     label14:
        $r20 := @caughtexception;

        goto label21;

     label15:
        throw $r20;

     label16:
        return 1;

     label17:
        virtualinvoke $r22.<java.io.RandomAccessFile: void close()>();

        goto label04;

     label18:
        virtualinvoke $r22.<java.io.RandomAccessFile: void close()>();

        goto label08;

     label19:
        virtualinvoke $r22.<java.io.RandomAccessFile: void close()>();

        goto label11;

     label20:
        virtualinvoke $r22.<java.io.RandomAccessFile: void close()>();

        goto label13;

     label21:
        virtualinvoke $r22.<java.io.RandomAccessFile: void close()>();

        goto label15;

        catch java.lang.Throwable from label03 to label04 with label14;
        catch java.lang.Throwable from label05 to label08 with label14;
        catch java.lang.Throwable from label09 to label11 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label14 to label15 with label14;
    }

    public static long padLogFile(java.io.FileOutputStream, long, long) throws java.io.IOException
    {
        java.io.FileOutputStream r0;
        long $l0, $l1, l3, $l5, $l6, l7;
        java.nio.ByteBuffer $r2, $r4, $r5;
        byte $b2;
        int $i4, $i8;
        java.nio.channels.FileChannel $r1, $r3;

        r0 := @parameter0: java.io.FileOutputStream;

        l7 := @parameter1: long;

        l3 := @parameter2: long;

        $r1 = virtualinvoke r0.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>();

        $l0 = virtualinvoke $r1.<java.nio.channels.FileChannel: long position()>();

        $l1 = $l0 + 4096L;

        $b2 = $l1 cmp l7;

        $i8 = (int) $b2;

        if $i8 < 0 goto label1;

        l7 = l7 + l3;

        $r2 = <org.apache.zookeeper.server.persistence.Util: java.nio.ByteBuffer fill>;

        virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(0);

        $r3 = virtualinvoke r0.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>();

        $r5 = <org.apache.zookeeper.server.persistence.Util: java.nio.ByteBuffer fill>;

        $r4 = <org.apache.zookeeper.server.persistence.Util: java.nio.ByteBuffer fill>;

        $i4 = virtualinvoke $r4.<java.nio.ByteBuffer: int remaining()>();

        $l5 = (long) $i4;

        $l6 = l7 - $l5;

        virtualinvoke $r3.<java.nio.channels.FileChannel: int write(java.nio.ByteBuffer,long)>($r5, $l6);

     label1:
        return l7;
    }

    public static byte[] readTxnBytes(org.apache.jute.InputArchive) throws java.io.IOException
    {
        byte[] $r1;
        org.slf4j.Logger $r2;
        byte $b1;
        org.apache.jute.InputArchive r0;
        int $i0, $i2;
        java.io.EOFException $r3;

        r0 := @parameter0: org.apache.jute.InputArchive;

     label1:
        $r1 = interfaceinvoke r0.<org.apache.jute.InputArchive: byte[] readBuffer(java.lang.String)>("txtEntry");

        $i0 = lengthof $r1;

        if $i0 != 0 goto label3;

     label2:
        return $r1;

     label3:
        $b1 = interfaceinvoke r0.<org.apache.jute.InputArchive: byte readByte(java.lang.String)>("EOF");

        $i2 = (int) $b1;

        if $i2 == 66 goto label5;

        $r2 = <org.apache.zookeeper.server.persistence.Util: org.slf4j.Logger LOG>;

        interfaceinvoke $r2.<org.slf4j.Logger: void error(java.lang.String)>("Last transaction was partial.");

     label4:
        return null;

     label5:
        return $r1;

     label6:
        $r3 := @caughtexception;

        return null;

        catch java.io.EOFException from label1 to label2 with label6;
        catch java.io.EOFException from label3 to label4 with label6;
    }

    public static byte[] marshallTxnEntry(org.apache.zookeeper.txn.TxnHeader, org.apache.jute.Record) throws java.io.IOException
    {
        org.apache.jute.BinaryOutputArchive $r1;
        byte[] $r4;
        java.io.ByteArrayOutputStream $r0;
        org.apache.zookeeper.txn.TxnHeader r2;
        org.apache.jute.Record r3;

        r2 := @parameter0: org.apache.zookeeper.txn.TxnHeader;

        r3 := @parameter1: org.apache.jute.Record;

        $r0 = new java.io.ByteArrayOutputStream;

        specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>()>();

        $r1 = staticinvoke <org.apache.jute.BinaryOutputArchive: org.apache.jute.BinaryOutputArchive getArchive(java.io.OutputStream)>($r0);

        virtualinvoke r2.<org.apache.zookeeper.txn.TxnHeader: void serialize(org.apache.jute.OutputArchive,java.lang.String)>($r1, "hdr");

        if r3 == null goto label1;

        interfaceinvoke r3.<org.apache.jute.Record: void serialize(org.apache.jute.OutputArchive,java.lang.String)>($r1, "txn");

     label1:
        $r4 = virtualinvoke $r0.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r4;
    }

    public static void writeTxnBytes(org.apache.jute.OutputArchive, byte[]) throws java.io.IOException
    {
        org.apache.jute.OutputArchive r0;
        byte[] r1;

        r0 := @parameter0: org.apache.jute.OutputArchive;

        r1 := @parameter1: byte[];

        interfaceinvoke r0.<org.apache.jute.OutputArchive: void writeBuffer(byte[],java.lang.String)>(r1, "txnEntry");

        interfaceinvoke r0.<org.apache.jute.OutputArchive: void writeByte(byte,java.lang.String)>(66, "EOR");

        return;
    }

    public static java.util.List sortDataDir(java.io.File[], java.lang.String, boolean)
    {
        java.util.List $r1;
        org.apache.zookeeper.server.persistence.Util$DataDirFileComparator $r2;
        java.lang.String r3;
        java.io.File[] r0;
        boolean z0;
        java.util.ArrayList $r4;

        r0 := @parameter0: java.io.File[];

        r3 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        if r0 != null goto label1;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>(0);

        return $r4;

     label1:
        $r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r0);

        $r2 = new org.apache.zookeeper.server.persistence.Util$DataDirFileComparator;

        specialinvoke $r2.<org.apache.zookeeper.server.persistence.Util$DataDirFileComparator: void <init>(java.lang.String,boolean)>(r3, z0);

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r1, $r2);

        return $r1;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;
        java.nio.ByteBuffer $r1;

        <org.apache.zookeeper.server.persistence.Util: java.lang.String DB_FORMAT_CONV> = "dbFormatConversion";

        <org.apache.zookeeper.server.persistence.Util: java.lang.String LOG_DIR> = "logDir";

        <org.apache.zookeeper.server.persistence.Util: java.lang.String SNAP_DIR> = "snapDir";

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/zookeeper/server/persistence/Util;");

        <org.apache.zookeeper.server.persistence.Util: org.slf4j.Logger LOG> = $r0;

        $r1 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>(1);

        <org.apache.zookeeper.server.persistence.Util: java.nio.ByteBuffer fill> = $r1;

        return;
    }
}
