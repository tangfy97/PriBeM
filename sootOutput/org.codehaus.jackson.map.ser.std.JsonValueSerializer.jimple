public class org.codehaus.jackson.map.ser.std.JsonValueSerializer extends org.codehaus.jackson.map.ser.std.SerializerBase implements org.codehaus.jackson.map.ResolvableSerializer, org.codehaus.jackson.schema.SchemaAware
{
    protected final java.lang.reflect.Method _accessorMethod;
    protected org.codehaus.jackson.map.JsonSerializer _valueSerializer;
    protected final org.codehaus.jackson.map.BeanProperty _property;
    protected boolean _forceTypeInformation;

    public void <init>(java.lang.reflect.Method, org.codehaus.jackson.map.JsonSerializer, org.codehaus.jackson.map.BeanProperty)
    {
        org.codehaus.jackson.map.ser.std.JsonValueSerializer r0;
        org.codehaus.jackson.map.JsonSerializer r2;
        java.lang.reflect.Method r1;
        org.codehaus.jackson.map.BeanProperty r3;

        r0 := @this: org.codehaus.jackson.map.ser.std.JsonValueSerializer;

        r1 := @parameter0: java.lang.reflect.Method;

        r2 := @parameter1: org.codehaus.jackson.map.JsonSerializer;

        r3 := @parameter2: org.codehaus.jackson.map.BeanProperty;

        specialinvoke r0.<org.codehaus.jackson.map.ser.std.SerializerBase: void <init>(java.lang.Class)>(class "Ljava/lang/Object;");

        r0.<org.codehaus.jackson.map.ser.std.JsonValueSerializer: java.lang.reflect.Method _accessorMethod> = r1;

        r0.<org.codehaus.jackson.map.ser.std.JsonValueSerializer: org.codehaus.jackson.map.JsonSerializer _valueSerializer> = r2;

        r0.<org.codehaus.jackson.map.ser.std.JsonValueSerializer: org.codehaus.jackson.map.BeanProperty _property> = r3;

        return;
    }

    public void serialize(java.lang.Object, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        java.lang.Throwable $r18, r21;
        java.lang.Object[] $r2;
        org.codehaus.jackson.map.SerializerProvider r6;
        java.lang.Error $r17;
        org.codehaus.jackson.map.JsonMappingException $r16;
        org.codehaus.jackson.JsonGenerator r5;
        java.lang.String $r12, $r15;
        java.lang.reflect.Method $r3, $r11;
        boolean $z0, $z1;
        org.codehaus.jackson.map.ser.std.JsonValueSerializer r0;
        java.io.IOException $r19;
        org.codehaus.jackson.map.JsonSerializer r20;
        org.codehaus.jackson.map.BeanProperty $r8;
        java.lang.Exception $r9;
        java.lang.Object r1, $r4;
        java.lang.Class $r7;
        java.lang.StringBuilder $r10, $r13, $r14;

        r0 := @this: org.codehaus.jackson.map.ser.std.JsonValueSerializer;

        r1 := @parameter0: java.lang.Object;

        r5 := @parameter1: org.codehaus.jackson.JsonGenerator;

        r6 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

     label01:
        $r3 = r0.<org.codehaus.jackson.map.ser.std.JsonValueSerializer: java.lang.reflect.Method _accessorMethod>;

        $r2 = newarray (java.lang.Object)[0];

        $r4 = virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r1, $r2);

        if $r4 != null goto label03;

        virtualinvoke r6.<org.codehaus.jackson.map.SerializerProvider: void defaultSerializeNull(org.codehaus.jackson.JsonGenerator)>(r5);

     label02:
        return;

     label03:
        r20 = r0.<org.codehaus.jackson.map.ser.std.JsonValueSerializer: org.codehaus.jackson.map.JsonSerializer _valueSerializer>;

        if r20 != null goto label04;

        $r7 = virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = r0.<org.codehaus.jackson.map.ser.std.JsonValueSerializer: org.codehaus.jackson.map.BeanProperty _property>;

        r20 = virtualinvoke r6.<org.codehaus.jackson.map.SerializerProvider: org.codehaus.jackson.map.JsonSerializer findTypedValueSerializer(java.lang.Class,boolean,org.codehaus.jackson.map.BeanProperty)>($r7, 1, $r8);

     label04:
        virtualinvoke r20.<org.codehaus.jackson.map.JsonSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r4, r5, r6);

     label05:
        goto label11;

     label06:
        $r19 := @caughtexception;

        throw $r19;

     label07:
        $r9 := @caughtexception;

        r21 = $r9;

     label08:
        $z0 = r21 instanceof java.lang.reflect.InvocationTargetException;

        if $z0 == 0 goto label09;

        $r18 = virtualinvoke r21.<java.lang.Throwable: java.lang.Throwable getCause()>();

        if $r18 == null goto label09;

        r21 = virtualinvoke r21.<java.lang.Throwable: java.lang.Throwable getCause()>();

        goto label08;

     label09:
        $z1 = r21 instanceof java.lang.Error;

        if $z1 == 0 goto label10;

        $r17 = (java.lang.Error) r21;

        throw $r17;

     label10:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = r0.<org.codehaus.jackson.map.ser.std.JsonValueSerializer: java.lang.reflect.Method _accessorMethod>;

        $r12 = virtualinvoke $r11.<java.lang.reflect.Method: java.lang.String getName()>();

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("()");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r16 = staticinvoke <org.codehaus.jackson.map.JsonMappingException: org.codehaus.jackson.map.JsonMappingException wrapWithPath(java.lang.Throwable,java.lang.Object,java.lang.String)>(r21, r1, $r15);

        throw $r16;

     label11:
        return;

        catch java.io.IOException from label01 to label02 with label06;
        catch java.io.IOException from label03 to label05 with label06;
        catch java.lang.Exception from label01 to label02 with label07;
        catch java.lang.Exception from label03 to label05 with label07;
    }

    public void serializeWithType(java.lang.Object, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider, org.codehaus.jackson.map.TypeSerializer) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        java.lang.Throwable $r20, r23;
        java.lang.Object[] $r2;
        org.codehaus.jackson.map.SerializerProvider r6;
        java.lang.Error $r19;
        org.codehaus.jackson.map.JsonMappingException $r18;
        org.codehaus.jackson.JsonGenerator r9;
        org.codehaus.jackson.map.TypeSerializer r10;
        java.lang.String $r14, $r17;
        java.lang.reflect.Method $r3, $r13;
        boolean $z0, $z1, $z2, $z3;
        org.codehaus.jackson.map.ser.std.JsonValueSerializer r0;
        java.io.IOException $r21;
        org.codehaus.jackson.map.JsonSerializer $r8, r22;
        org.codehaus.jackson.map.BeanProperty $r7;
        java.lang.Exception $r11;
        java.lang.Object r1, $r4;
        java.lang.Class $r5;
        java.lang.StringBuilder $r12, $r15, $r16;

        r0 := @this: org.codehaus.jackson.map.ser.std.JsonValueSerializer;

        r1 := @parameter0: java.lang.Object;

        r9 := @parameter1: org.codehaus.jackson.JsonGenerator;

        r6 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        r10 := @parameter3: org.codehaus.jackson.map.TypeSerializer;

     label01:
        $r3 = r0.<org.codehaus.jackson.map.ser.std.JsonValueSerializer: java.lang.reflect.Method _accessorMethod>;

        $r2 = newarray (java.lang.Object)[0];

        $r4 = virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r1, $r2);

        if $r4 != null goto label03;

        virtualinvoke r6.<org.codehaus.jackson.map.SerializerProvider: void defaultSerializeNull(org.codehaus.jackson.JsonGenerator)>(r9);

     label02:
        return;

     label03:
        r22 = r0.<org.codehaus.jackson.map.ser.std.JsonValueSerializer: org.codehaus.jackson.map.JsonSerializer _valueSerializer>;

        if r22 == null goto label06;

        $z0 = r0.<org.codehaus.jackson.map.ser.std.JsonValueSerializer: boolean _forceTypeInformation>;

        if $z0 == 0 goto label04;

        virtualinvoke r10.<org.codehaus.jackson.map.TypeSerializer: void writeTypePrefixForScalar(java.lang.Object,org.codehaus.jackson.JsonGenerator)>(r1, r9);

     label04:
        virtualinvoke r22.<org.codehaus.jackson.map.JsonSerializer: void serializeWithType(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.TypeSerializer)>($r4, r9, r6, r10);

        $z1 = r0.<org.codehaus.jackson.map.ser.std.JsonValueSerializer: boolean _forceTypeInformation>;

        if $z1 == 0 goto label05;

        virtualinvoke r10.<org.codehaus.jackson.map.TypeSerializer: void writeTypeSuffixForScalar(java.lang.Object,org.codehaus.jackson.JsonGenerator)>(r1, r9);

     label05:
        return;

     label06:
        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = r0.<org.codehaus.jackson.map.ser.std.JsonValueSerializer: org.codehaus.jackson.map.BeanProperty _property>;

        $r8 = virtualinvoke r6.<org.codehaus.jackson.map.SerializerProvider: org.codehaus.jackson.map.JsonSerializer findTypedValueSerializer(java.lang.Class,boolean,org.codehaus.jackson.map.BeanProperty)>($r5, 1, $r7);

        virtualinvoke $r8.<org.codehaus.jackson.map.JsonSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r4, r9, r6);

     label07:
        goto label13;

     label08:
        $r21 := @caughtexception;

        throw $r21;

     label09:
        $r11 := @caughtexception;

        r23 = $r11;

     label10:
        $z2 = r23 instanceof java.lang.reflect.InvocationTargetException;

        if $z2 == 0 goto label11;

        $r20 = virtualinvoke r23.<java.lang.Throwable: java.lang.Throwable getCause()>();

        if $r20 == null goto label11;

        r23 = virtualinvoke r23.<java.lang.Throwable: java.lang.Throwable getCause()>();

        goto label10;

     label11:
        $z3 = r23 instanceof java.lang.Error;

        if $z3 == 0 goto label12;

        $r19 = (java.lang.Error) r23;

        throw $r19;

     label12:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = r0.<org.codehaus.jackson.map.ser.std.JsonValueSerializer: java.lang.reflect.Method _accessorMethod>;

        $r14 = virtualinvoke $r13.<java.lang.reflect.Method: java.lang.String getName()>();

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("()");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $r18 = staticinvoke <org.codehaus.jackson.map.JsonMappingException: org.codehaus.jackson.map.JsonMappingException wrapWithPath(java.lang.Throwable,java.lang.Object,java.lang.String)>(r23, r1, $r17);

        throw $r18;

     label13:
        return;

        catch java.io.IOException from label01 to label02 with label08;
        catch java.io.IOException from label03 to label05 with label08;
        catch java.io.IOException from label06 to label07 with label08;
        catch java.lang.Exception from label01 to label02 with label09;
        catch java.lang.Exception from label03 to label05 with label09;
        catch java.lang.Exception from label06 to label07 with label09;
    }

    public org.codehaus.jackson.JsonNode getSchema(org.codehaus.jackson.map.SerializerProvider, java.lang.reflect.Type) throws org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.ser.std.JsonValueSerializer r0;
        org.codehaus.jackson.map.SerializerProvider r3;
        org.codehaus.jackson.map.JsonSerializer $r1, $r2;
        org.codehaus.jackson.JsonNode $r6;
        org.codehaus.jackson.schema.SchemaAware $r4;
        java.lang.reflect.Type r5;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.ser.std.JsonValueSerializer;

        r3 := @parameter0: org.codehaus.jackson.map.SerializerProvider;

        r5 := @parameter1: java.lang.reflect.Type;

        $r1 = r0.<org.codehaus.jackson.map.ser.std.JsonValueSerializer: org.codehaus.jackson.map.JsonSerializer _valueSerializer>;

        $z0 = $r1 instanceof org.codehaus.jackson.schema.SchemaAware;

        if $z0 == 0 goto label1;

        $r2 = r0.<org.codehaus.jackson.map.ser.std.JsonValueSerializer: org.codehaus.jackson.map.JsonSerializer _valueSerializer>;

        $r4 = (org.codehaus.jackson.schema.SchemaAware) $r2;

        $r6 = interfaceinvoke $r4.<org.codehaus.jackson.schema.SchemaAware: org.codehaus.jackson.JsonNode getSchema(org.codehaus.jackson.map.SerializerProvider,java.lang.reflect.Type)>(r3, null);

        goto label2;

     label1:
        $r6 = staticinvoke <org.codehaus.jackson.schema.JsonSchema: org.codehaus.jackson.JsonNode getDefaultSchemaNode()>();

     label2:
        return $r6;
    }

    public void resolve(org.codehaus.jackson.map.SerializerProvider) throws org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.SerializerProvider r2;
        int $i0;
        org.codehaus.jackson.type.JavaType $r6;
        java.lang.reflect.Method $r4, $r10;
        boolean $z0, $z1, $z2;
        org.codehaus.jackson.map.ser.std.JsonValueSerializer r0;
        org.codehaus.jackson.map.JsonSerializer $r1, $r8, $r9;
        org.codehaus.jackson.map.BeanProperty $r7;
        java.lang.reflect.Type $r5;
        java.lang.Class $r11;
        org.codehaus.jackson.map.SerializationConfig$Feature $r3;

        r0 := @this: org.codehaus.jackson.map.ser.std.JsonValueSerializer;

        r2 := @parameter0: org.codehaus.jackson.map.SerializerProvider;

        $r1 = r0.<org.codehaus.jackson.map.ser.std.JsonValueSerializer: org.codehaus.jackson.map.JsonSerializer _valueSerializer>;

        if $r1 != null goto label2;

        $r3 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature USE_STATIC_TYPING>;

        $z0 = virtualinvoke r2.<org.codehaus.jackson.map.SerializerProvider: boolean isEnabled(org.codehaus.jackson.map.SerializationConfig$Feature)>($r3);

        if $z0 != 0 goto label1;

        $r10 = r0.<org.codehaus.jackson.map.ser.std.JsonValueSerializer: java.lang.reflect.Method _accessorMethod>;

        $r11 = virtualinvoke $r10.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $i0 = virtualinvoke $r11.<java.lang.Class: int getModifiers()>();

        $z2 = staticinvoke <java.lang.reflect.Modifier: boolean isFinal(int)>($i0);

        if $z2 == 0 goto label2;

     label1:
        $r4 = r0.<org.codehaus.jackson.map.ser.std.JsonValueSerializer: java.lang.reflect.Method _accessorMethod>;

        $r5 = virtualinvoke $r4.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>();

        $r6 = virtualinvoke r2.<org.codehaus.jackson.map.SerializerProvider: org.codehaus.jackson.type.JavaType constructType(java.lang.reflect.Type)>($r5);

        $r7 = r0.<org.codehaus.jackson.map.ser.std.JsonValueSerializer: org.codehaus.jackson.map.BeanProperty _property>;

        $r8 = virtualinvoke r2.<org.codehaus.jackson.map.SerializerProvider: org.codehaus.jackson.map.JsonSerializer findTypedValueSerializer(org.codehaus.jackson.type.JavaType,boolean,org.codehaus.jackson.map.BeanProperty)>($r6, 0, $r7);

        r0.<org.codehaus.jackson.map.ser.std.JsonValueSerializer: org.codehaus.jackson.map.JsonSerializer _valueSerializer> = $r8;

        $r9 = r0.<org.codehaus.jackson.map.ser.std.JsonValueSerializer: org.codehaus.jackson.map.JsonSerializer _valueSerializer>;

        $z1 = virtualinvoke r0.<org.codehaus.jackson.map.ser.std.JsonValueSerializer: boolean isNaturalTypeWithStdHandling(org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.JsonSerializer)>($r6, $r9);

        r0.<org.codehaus.jackson.map.ser.std.JsonValueSerializer: boolean _forceTypeInformation> = $z1;

     label2:
        return;
    }

    protected boolean isNaturalTypeWithStdHandling(org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.JsonSerializer)
    {
        org.codehaus.jackson.map.ser.std.JsonValueSerializer r6;
        org.codehaus.jackson.map.JsonSerializer r2;
        java.lang.'annotation'.Annotation $r8;
        org.codehaus.jackson.type.JavaType r0;
        java.lang.Class $r1, $r3, $r4, $r5, $r7;
        boolean $z0, $z1;

        r6 := @this: org.codehaus.jackson.map.ser.std.JsonValueSerializer;

        r0 := @parameter0: org.codehaus.jackson.type.JavaType;

        r2 := @parameter1: org.codehaus.jackson.map.JsonSerializer;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        $z0 = virtualinvoke r0.<org.codehaus.jackson.type.JavaType: boolean isPrimitive()>();

        if $z0 == 0 goto label1;

        $r3 = <java.lang.Integer: java.lang.Class TYPE>;

        if $r1 == $r3 goto label2;

        $r4 = <java.lang.Boolean: java.lang.Class TYPE>;

        if $r1 == $r4 goto label2;

        $r5 = <java.lang.Double: java.lang.Class TYPE>;

        if $r1 == $r5 goto label2;

        return 0;

     label1:
        if $r1 == class "Ljava/lang/String;" goto label2;

        if $r1 == class "Ljava/lang/Integer;" goto label2;

        if $r1 == class "Ljava/lang/Boolean;" goto label2;

        if $r1 == class "Ljava/lang/Double;" goto label2;

        return 0;

     label2:
        $r7 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/codehaus/jackson/map/annotate/JacksonStdImpl;");

        if $r8 == null goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        return $z1;
    }

    public java.lang.String toString()
    {
        org.codehaus.jackson.map.ser.std.JsonValueSerializer r2;
        java.lang.StringBuilder $r0, $r1, $r5, $r6, $r9, $r10;
        java.lang.Class $r4;
        java.lang.String $r8, $r11;
        java.lang.reflect.Method $r3, $r7;

        r2 := @this: org.codehaus.jackson.map.ser.std.JsonValueSerializer;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(@JsonValue serializer for method ");

        $r3 = r2.<org.codehaus.jackson.map.ser.std.JsonValueSerializer: java.lang.reflect.Method _accessorMethod>;

        $r4 = virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("#");

        $r7 = r2.<org.codehaus.jackson.map.ser.std.JsonValueSerializer: java.lang.reflect.Method _accessorMethod>;

        $r8 = virtualinvoke $r7.<java.lang.reflect.Method: java.lang.String getName()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;
    }
}
