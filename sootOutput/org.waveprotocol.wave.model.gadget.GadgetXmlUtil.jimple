public final class org.waveprotocol.wave.model.gadget.GadgetXmlUtil extends java.lang.Object
{

    private void <init>()
    {
        org.waveprotocol.wave.model.gadget.GadgetXmlUtil r0;

        r0 := @this: org.waveprotocol.wave.model.gadget.GadgetXmlUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.waveprotocol.wave.model.document.util.XmlStringBuilder constructXml(java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.model.document.util.XmlStringBuilder $r2;
        java.lang.String r0, r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <org.waveprotocol.wave.model.gadget.GadgetXmlUtil: org.waveprotocol.wave.model.document.util.XmlStringBuilder constructXml(java.lang.String,java.lang.String,java.lang.String)>(r0, "", r1);

        return $r2;
    }

    public static org.waveprotocol.wave.model.document.util.XmlStringBuilder constructXml(java.lang.String, java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.model.document.util.XmlStringBuilder $r3;
        java.lang.String r0, r1, r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $r3 = staticinvoke <org.waveprotocol.wave.model.gadget.GadgetXmlUtil: org.waveprotocol.wave.model.document.util.XmlStringBuilder constructXml(java.lang.String,java.lang.String,java.lang.String,java.lang.String[],java.util.Map)>(r0, r1, r2, null, null);

        return $r3;
    }

    public static org.waveprotocol.wave.model.document.util.XmlStringBuilder constructXml(java.lang.String, java.lang.String, java.lang.String, java.lang.String[], java.util.Map)
    {
        org.waveprotocol.wave.model.document.util.XmlStringBuilder $r0, $r15, $r16, $r19;
        java.lang.String[] r1, $r3, $r17;
        java.util.Map r2;
        int $i0, i1;
        java.lang.String r4, r5, r6, $r12, $r14, $r18, $r20;
        boolean $z0;
        java.util.Map$Entry r10;
        java.util.Iterator $r8;
        java.util.Set $r7;
        java.lang.Object $r9, $r11, $r13;

        r4 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.String;

        r6 := @parameter2: java.lang.String;

        r1 := @parameter3: java.lang.String[];

        r2 := @parameter4: java.util.Map;

        $r0 = staticinvoke <org.waveprotocol.wave.model.document.util.XmlStringBuilder: org.waveprotocol.wave.model.document.util.XmlStringBuilder createEmpty()>();

        if r1 == null goto label2;

        i1 = 0;

     label1:
        $i0 = lengthof r1;

        if i1 >= $i0 goto label2;

        $r16 = staticinvoke <org.waveprotocol.wave.model.document.util.XmlStringBuilder: org.waveprotocol.wave.model.document.util.XmlStringBuilder createText(java.lang.String)>("");

        $r17 = newarray (java.lang.String)[2];

        $r17[0] = "name";

        $r18 = r1[i1];

        $r17[1] = $r18;

        $r19 = virtualinvoke $r16.<org.waveprotocol.wave.model.document.util.XmlStringBuilder: org.waveprotocol.wave.model.document.util.XmlStringBuilder wrap(java.lang.String,java.lang.String[])>("category", $r17);

        virtualinvoke $r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilder: org.waveprotocol.wave.model.document.util.XmlStringBuilder append(org.waveprotocol.wave.model.document.util.XmlStringBuilder)>($r19);

        i1 = i1 + 1;

        goto label1;

     label2:
        if r2 == null goto label4;

        $r7 = interfaceinvoke r2.<java.util.Map: java.util.Set entrySet()>();

        $r8 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (java.util.Map$Entry) $r9;

        $r11 = interfaceinvoke r10.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r12 = (java.lang.String) $r11;

        $r13 = interfaceinvoke r10.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r14 = (java.lang.String) $r13;

        $r15 = staticinvoke <org.waveprotocol.wave.model.gadget.GadgetXmlUtil: org.waveprotocol.wave.model.document.util.XmlStringBuilder constructStateXml(java.lang.String,java.lang.String)>($r12, $r14);

        virtualinvoke $r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilder: org.waveprotocol.wave.model.document.util.XmlStringBuilder append(org.waveprotocol.wave.model.document.util.XmlStringBuilder)>($r15);

        goto label3;

     label4:
        $r3 = newarray (java.lang.String)[10];

        $r3[0] = "url";

        $r3[1] = r4;

        $r3[2] = "title";

        $r3[3] = "";

        $r3[4] = "prefs";

        if r5 == null goto label5;

        $r20 = r5;

        goto label6;

     label5:
        $r20 = "";

     label6:
        $r3[5] = $r20;

        $r3[6] = "state";

        $r3[7] = "";

        $r3[8] = "author";

        $r3[9] = r6;

        virtualinvoke $r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilder: org.waveprotocol.wave.model.document.util.XmlStringBuilder wrap(java.lang.String,java.lang.String[])>("gadget", $r3);

        return $r0;
    }

    public static org.waveprotocol.wave.model.document.util.XmlStringBuilder constructCategoriesXml(java.lang.String)
    {
        org.waveprotocol.wave.model.document.util.XmlStringBuilder $r0, $r3;
        java.lang.String[] $r1;
        java.lang.String r2;

        r2 := @parameter0: java.lang.String;

        $r0 = staticinvoke <org.waveprotocol.wave.model.document.util.XmlStringBuilder: org.waveprotocol.wave.model.document.util.XmlStringBuilder createText(java.lang.String)>("");

        $r1 = newarray (java.lang.String)[2];

        $r1[0] = "name";

        $r1[1] = r2;

        $r3 = virtualinvoke $r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilder: org.waveprotocol.wave.model.document.util.XmlStringBuilder wrap(java.lang.String,java.lang.String[])>("category", $r1);

        return $r3;
    }

    public static org.waveprotocol.wave.model.document.util.XmlStringBuilder constructTitleXml(java.lang.String)
    {
        org.waveprotocol.wave.model.document.util.XmlStringBuilder $r0, $r3;
        java.lang.String[] $r1;
        java.lang.String r2;

        r2 := @parameter0: java.lang.String;

        $r0 = staticinvoke <org.waveprotocol.wave.model.document.util.XmlStringBuilder: org.waveprotocol.wave.model.document.util.XmlStringBuilder createText(java.lang.String)>("");

        $r1 = newarray (java.lang.String)[2];

        $r1[0] = "value";

        $r1[1] = r2;

        $r3 = virtualinvoke $r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilder: org.waveprotocol.wave.model.document.util.XmlStringBuilder wrap(java.lang.String,java.lang.String[])>("title", $r1);

        return $r3;
    }

    public static org.waveprotocol.wave.model.document.util.XmlStringBuilder constructElementXml(java.lang.String, java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.model.document.util.XmlStringBuilder $r0, $r5;
        java.lang.String[] $r2;
        java.lang.String r1, r3, r4;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        $r0 = staticinvoke <org.waveprotocol.wave.model.document.util.XmlStringBuilder: org.waveprotocol.wave.model.document.util.XmlStringBuilder createText(java.lang.String)>("");

        $r2 = newarray (java.lang.String)[4];

        $r2[0] = "name";

        $r2[1] = r3;

        $r2[2] = "value";

        $r2[3] = r4;

        $r5 = virtualinvoke $r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilder: org.waveprotocol.wave.model.document.util.XmlStringBuilder wrap(java.lang.String,java.lang.String[])>(r1, $r2);

        return $r5;
    }

    public static org.waveprotocol.wave.model.document.util.XmlStringBuilder constructStateXml(java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.model.document.util.XmlStringBuilder $r0, $r4;
        java.lang.String[] $r1;
        java.lang.String r2, r3;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r0 = staticinvoke <org.waveprotocol.wave.model.document.util.XmlStringBuilder: org.waveprotocol.wave.model.document.util.XmlStringBuilder createText(java.lang.String)>("");

        $r1 = newarray (java.lang.String)[4];

        $r1[0] = "name";

        $r1[1] = r2;

        $r1[2] = "value";

        $r1[3] = r3;

        $r4 = virtualinvoke $r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilder: org.waveprotocol.wave.model.document.util.XmlStringBuilder wrap(java.lang.String,java.lang.String[])>("state", $r1);

        return $r4;
    }

    public static org.waveprotocol.wave.model.document.util.XmlStringBuilder constructPrefXml(java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.model.document.util.XmlStringBuilder $r0, $r4;
        java.lang.String[] $r1;
        java.lang.String r2, r3;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r0 = staticinvoke <org.waveprotocol.wave.model.document.util.XmlStringBuilder: org.waveprotocol.wave.model.document.util.XmlStringBuilder createText(java.lang.String)>("");

        $r1 = newarray (java.lang.String)[4];

        $r1[0] = "name";

        $r1[1] = r2;

        $r1[2] = "value";

        $r1[3] = r3;

        $r4 = virtualinvoke $r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilder: org.waveprotocol.wave.model.document.util.XmlStringBuilder wrap(java.lang.String,java.lang.String[])>("pref", $r1);

        return $r4;
    }
}
