public class nu.xom.Document extends nu.xom.ParentNode
{

    public void <init>(nu.xom.Element)
    {
        nu.xom.Document r0;
        nu.xom.Element r1;

        r0 := @this: nu.xom.Document;

        r1 := @parameter0: nu.xom.Element;

        specialinvoke r0.<nu.xom.ParentNode: void <init>()>();

        virtualinvoke r0.<nu.xom.Document: void _insertChild(nu.xom.Node,int)>(r1, 0);

        return;
    }

    public void <init>(nu.xom.Document)
    {
        nu.xom.Element $r2;
        nu.xom.Node $r3, $r5, $r6;
        int $i0, i1;
        java.lang.String $r4;
        nu.xom.Document r0, r1;
        boolean $z0;

        r0 := @this: nu.xom.Document;

        r1 := @parameter0: nu.xom.Document;

        specialinvoke r0.<nu.xom.ParentNode: void <init>()>();

        $r2 = virtualinvoke r1.<nu.xom.Document: nu.xom.Element getRootElement()>();

        $r3 = virtualinvoke $r2.<nu.xom.Element: nu.xom.Node copy()>();

        virtualinvoke r0.<nu.xom.Document: void insertChild(nu.xom.Node,int)>($r3, 0);

        $i0 = virtualinvoke r1.<nu.xom.Document: int getChildCount()>();

        i1 = 0;

     label1:
        if i1 >= $i0 goto label3;

        $r5 = virtualinvoke r1.<nu.xom.Document: nu.xom.Node getChild(int)>(i1);

        $z0 = virtualinvoke $r5.<nu.xom.Node: boolean isElement()>();

        if $z0 != 0 goto label2;

        $r6 = virtualinvoke $r5.<nu.xom.Node: nu.xom.Node copy()>();

        virtualinvoke r0.<nu.xom.Document: void insertChild(nu.xom.Node,int)>($r6, i1);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r4 = r1.<nu.xom.Document: java.lang.String actualBaseURI>;

        r0.<nu.xom.Document: java.lang.String actualBaseURI> = $r4;

        return;
    }

    final void insertionAllowed(nu.xom.Node, int)
    {
        java.lang.NullPointerException $r16;
        java.lang.StringBuffer $r3, $r4, $r7, $r8;
        int $i0, i1, $i2;
        nu.xom.IllegalAddException $r2, $r11, $r12, $r14;
        nu.xom.ParentNode $r1;
        java.lang.String $r6, $r9;
        boolean $z0, $z1, $z2, $z3;
        nu.xom.DocType $r13;
        nu.xom.Node r0;
        nu.xom.MultipleParentException $r15;
        java.lang.Class $r5;
        nu.xom.Document r10;

        r10 := @this: nu.xom.Document;

        r0 := @parameter0: nu.xom.Node;

        i1 := @parameter1: int;

        if r0 != null goto label1;

        $r16 = new java.lang.NullPointerException;

        specialinvoke $r16.<java.lang.NullPointerException: void <init>(java.lang.String)>("Tried to insert a null child in the document");

        throw $r16;

     label1:
        $r1 = virtualinvoke r0.<nu.xom.Node: nu.xom.ParentNode getParent()>();

        if $r1 == null goto label2;

        $r15 = new nu.xom.MultipleParentException;

        specialinvoke $r15.<nu.xom.MultipleParentException: void <init>(java.lang.String)>("Child already has a parent.");

        throw $r15;

     label2:
        $z0 = virtualinvoke r0.<nu.xom.Node: boolean isComment()>();

        if $z0 != 0 goto label3;

        $z1 = virtualinvoke r0.<nu.xom.Node: boolean isProcessingInstruction()>();

        if $z1 == 0 goto label4;

     label3:
        return;

     label4:
        $z2 = virtualinvoke r0.<nu.xom.Node: boolean isDocType()>();

        if $z2 == 0 goto label7;

        $i2 = specialinvoke r10.<nu.xom.Document: int getRootPosition()>();

        if i1 > $i2 goto label6;

        $r13 = virtualinvoke r10.<nu.xom.Document: nu.xom.DocType getDocType()>();

        if $r13 == null goto label5;

        $r14 = new nu.xom.IllegalAddException;

        specialinvoke $r14.<nu.xom.IllegalAddException: void <init>(java.lang.String)>("Tried to insert a second DOCTYPE");

        throw $r14;

     label5:
        return;

     label6:
        $r12 = new nu.xom.IllegalAddException;

        specialinvoke $r12.<nu.xom.IllegalAddException: void <init>(java.lang.String)>("Cannot add a document type declaration after the root element");

        throw $r12;

     label7:
        $z3 = virtualinvoke r0.<nu.xom.Node: boolean isElement()>();

        if $z3 == 0 goto label9;

        $i0 = virtualinvoke r10.<nu.xom.Document: int getChildCount()>();

        if $i0 != 0 goto label8;

        return;

     label8:
        $r11 = new nu.xom.IllegalAddException;

        specialinvoke $r11.<nu.xom.IllegalAddException: void <init>(java.lang.String)>("Cannot add a second root element to a Document.");

        throw $r11;

     label9:
        $r2 = new nu.xom.IllegalAddException;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Cannot add a ");

        $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" to a Document.");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r2.<nu.xom.IllegalAddException: void <init>(java.lang.String)>($r9);

        throw $r2;
    }

    private int getRootPosition()
    {
        int i0;
        nu.xom.Document r0;
        nu.xom.Node $r1;
        boolean $z0;

        r0 := @this: nu.xom.Document;

        i0 = 0;

     label1:
        $r1 = virtualinvoke r0.<nu.xom.Document: nu.xom.Node getChild(int)>(i0);

        $z0 = virtualinvoke $r1.<nu.xom.Node: boolean isElement()>();

        if $z0 == 0 goto label2;

        return i0;

     label2:
        i0 = i0 + 1;

        goto label1;
    }

    public final nu.xom.DocType getDocType()
    {
        int $i0, i1;
        nu.xom.Document r0;
        nu.xom.Node $r1;
        boolean $z0;
        nu.xom.DocType $r2;

        r0 := @this: nu.xom.Document;

        i1 = 0;

     label1:
        $i0 = virtualinvoke r0.<nu.xom.Document: int getChildCount()>();

        if i1 >= $i0 goto label3;

        $r1 = virtualinvoke r0.<nu.xom.Document: nu.xom.Node getChild(int)>(i1);

        $z0 = virtualinvoke $r1.<nu.xom.Node: boolean isDocType()>();

        if $z0 == 0 goto label2;

        $r2 = (nu.xom.DocType) $r1;

        return $r2;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return null;
    }

    public void setDocType(nu.xom.DocType)
    {
        nu.xom.MultipleParentException $r4;
        int $i0;
        nu.xom.ParentNode $r3;
        nu.xom.Document r0;
        java.lang.NullPointerException $r5;
        nu.xom.DocType $r1, r2;

        r0 := @this: nu.xom.Document;

        r2 := @parameter0: nu.xom.DocType;

        $r1 = virtualinvoke r0.<nu.xom.Document: nu.xom.DocType getDocType()>();

        if r2 != null goto label1;

        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null DocType");

        throw $r5;

     label1:
        if r2 != $r1 goto label2;

        return;

     label2:
        $r3 = virtualinvoke r2.<nu.xom.DocType: nu.xom.ParentNode getParent()>();

        if $r3 == null goto label3;

        $r4 = new nu.xom.MultipleParentException;

        specialinvoke $r4.<nu.xom.MultipleParentException: void <init>(java.lang.String)>("DocType belongs to another document");

        throw $r4;

     label3:
        if $r1 != null goto label4;

        virtualinvoke r0.<nu.xom.Document: void insertChild(nu.xom.Node,int)>(r2, 0);

        goto label5;

     label4:
        $i0 = virtualinvoke r0.<nu.xom.Document: int indexOf(nu.xom.Node)>($r1);

        specialinvoke r0.<nu.xom.ParentNode: nu.xom.Node removeChild(int)>($i0);

        virtualinvoke r0.<nu.xom.Document: void fastInsertChild(nu.xom.Node,int)>(r2, $i0);

        virtualinvoke $r1.<nu.xom.DocType: void setParent(nu.xom.ParentNode)>(null);

        virtualinvoke r2.<nu.xom.DocType: void setParent(nu.xom.ParentNode)>(r0);

     label5:
        return;
    }

    public final nu.xom.Element getRootElement()
    {
        nu.xom.Element $r2;
        int i0;
        nu.xom.Document r0;
        nu.xom.Node $r1;
        boolean $z0;

        r0 := @this: nu.xom.Document;

        i0 = 0;

     label1:
        $r1 = virtualinvoke r0.<nu.xom.Document: nu.xom.Node getChild(int)>(i0);

        $z0 = virtualinvoke $r1.<nu.xom.Node: boolean isElement()>();

        if $z0 == 0 goto label2;

        $r2 = (nu.xom.Element) $r1;

        return $r2;

     label2:
        i0 = i0 + 1;

        goto label1;
    }

    public void setRootElement(nu.xom.Element)
    {
        nu.xom.Element $r1, r2;
        java.lang.NullPointerException $r11;
        nu.xom.MultipleParentException $r5;
        java.lang.StringBuffer $r6, $r8, $r9;
        int $i0;
        nu.xom.ParentNode $r3;
        java.lang.String $r7, $r10;
        nu.xom.Document r0;
        nu.xom.Node[] $r4;

        r0 := @this: nu.xom.Document;

        r2 := @parameter0: nu.xom.Element;

        $r1 = virtualinvoke r0.<nu.xom.Document: nu.xom.Element getRootElement()>();

        if r2 != $r1 goto label1;

        return;

     label1:
        if r2 != null goto label2;

        $r11 = new java.lang.NullPointerException;

        specialinvoke $r11.<java.lang.NullPointerException: void <init>(java.lang.String)>("Root element cannot be null");

        throw $r11;

     label2:
        $r3 = virtualinvoke r2.<nu.xom.Element: nu.xom.ParentNode getParent()>();

        if $r3 == null goto label3;

        $r5 = new nu.xom.MultipleParentException;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke r2.<nu.xom.Element: java.lang.String getQualifiedName()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" already has a parent");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r5.<nu.xom.MultipleParentException: void <init>(java.lang.String)>($r10);

        throw $r5;

     label3:
        virtualinvoke r0.<nu.xom.Document: void fillInBaseURI(nu.xom.Element)>($r1);

        $i0 = virtualinvoke r0.<nu.xom.Document: int indexOf(nu.xom.Node)>($r1);

        virtualinvoke $r1.<nu.xom.Element: void setParent(nu.xom.ParentNode)>(null);

        $r4 = r0.<nu.xom.Document: nu.xom.Node[] children>;

        $r4[$i0] = r2;

        virtualinvoke r2.<nu.xom.Element: void setParent(nu.xom.ParentNode)>(r0);

        return;
    }

    public void setBaseURI(java.lang.String)
    {
        java.lang.String r1;
        nu.xom.Document r0;

        r0 := @this: nu.xom.Document;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<nu.xom.Document: void setActualBaseURI(java.lang.String)>(r1);

        return;
    }

    public final java.lang.String getBaseURI()
    {
        java.lang.String $r1;
        nu.xom.Document r0;

        r0 := @this: nu.xom.Document;

        $r1 = virtualinvoke r0.<nu.xom.Document: java.lang.String getActualBaseURI()>();

        return $r1;
    }

    public nu.xom.Node removeChild(int)
    {
        nu.xom.WellformednessException $r2;
        int i0, $i1;
        nu.xom.Document r0;
        nu.xom.Node $r1;

        r0 := @this: nu.xom.Document;

        i0 := @parameter0: int;

        $i1 = specialinvoke r0.<nu.xom.Document: int getRootPosition()>();

        if i0 != $i1 goto label1;

        $r2 = new nu.xom.WellformednessException;

        specialinvoke $r2.<nu.xom.WellformednessException: void <init>(java.lang.String)>("Cannot remove the root element");

        throw $r2;

     label1:
        $r1 = specialinvoke r0.<nu.xom.ParentNode: nu.xom.Node removeChild(int)>(i0);

        return $r1;
    }

    public nu.xom.Node removeChild(nu.xom.Node)
    {
        nu.xom.WellformednessException $r4;
        nu.xom.Element $r2;
        nu.xom.Document r1;
        nu.xom.Node r0, $r3;

        r1 := @this: nu.xom.Document;

        r0 := @parameter0: nu.xom.Node;

        $r2 = virtualinvoke r1.<nu.xom.Document: nu.xom.Element getRootElement()>();

        if r0 != $r2 goto label1;

        $r4 = new nu.xom.WellformednessException;

        specialinvoke $r4.<nu.xom.WellformednessException: void <init>(java.lang.String)>("Cannot remove the root element");

        throw $r4;

     label1:
        $r3 = specialinvoke r1.<nu.xom.ParentNode: nu.xom.Node removeChild(nu.xom.Node)>(r0);

        return $r3;
    }

    public void replaceChild(nu.xom.Node, nu.xom.Node)
    {
        nu.xom.Element $r2, $r5;
        nu.xom.Node r0, r3;
        nu.xom.Document r1;
        boolean $z0, $z1;
        nu.xom.DocType $r4, $r6;

        r1 := @this: nu.xom.Document;

        r0 := @parameter0: nu.xom.Node;

        r3 := @parameter1: nu.xom.Node;

        $r2 = virtualinvoke r1.<nu.xom.Document: nu.xom.Element getRootElement()>();

        if r0 != $r2 goto label1;

        if r3 == null goto label1;

        $z1 = virtualinvoke r3.<nu.xom.Node: boolean isElement()>();

        if $z1 == 0 goto label1;

        $r5 = (nu.xom.Element) r3;

        virtualinvoke r1.<nu.xom.Document: void setRootElement(nu.xom.Element)>($r5);

        goto label3;

     label1:
        $r6 = virtualinvoke r1.<nu.xom.Document: nu.xom.DocType getDocType()>();

        if r0 != $r6 goto label2;

        if r3 == null goto label2;

        $z0 = virtualinvoke r3.<nu.xom.Node: boolean isDocType()>();

        if $z0 == 0 goto label2;

        $r4 = (nu.xom.DocType) r3;

        virtualinvoke r1.<nu.xom.Document: void setDocType(nu.xom.DocType)>($r4);

        goto label3;

     label2:
        specialinvoke r1.<nu.xom.ParentNode: void replaceChild(nu.xom.Node,nu.xom.Node)>(r0, r3);

     label3:
        return;
    }

    public final java.lang.String getValue()
    {
        java.lang.String $r2;
        nu.xom.Document r0;
        nu.xom.Element $r1;

        r0 := @this: nu.xom.Document;

        $r1 = virtualinvoke r0.<nu.xom.Document: nu.xom.Element getRootElement()>();

        $r2 = virtualinvoke $r1.<nu.xom.Element: java.lang.String getValue()>();

        return $r2;
    }

    public final java.lang.String toXML()
    {
        java.lang.StringBuffer $r0;
        int $i0, i1;
        java.lang.String $r2, $r4;
        nu.xom.Document r1;
        nu.xom.Node $r3;

        r1 := @this: nu.xom.Document;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>(int)>(64);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("<?xml version=\"1.0\"?>\n");

        i1 = 0;

     label1:
        $i0 = virtualinvoke r1.<nu.xom.Document: int getChildCount()>();

        if i1 >= $i0 goto label2;

        $r3 = virtualinvoke r1.<nu.xom.Document: nu.xom.Node getChild(int)>(i1);

        $r4 = virtualinvoke $r3.<nu.xom.Node: java.lang.String toXML()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        i1 = i1 + 1;

        goto label1;

     label2:
        $r2 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    public nu.xom.Node copy()
    {
        nu.xom.Document $r0, r1;

        r1 := @this: nu.xom.Document;

        $r0 = new nu.xom.Document;

        specialinvoke $r0.<nu.xom.Document: void <init>(nu.xom.Document)>(r1);

        return $r0;
    }

    boolean isDocument()
    {
        nu.xom.Document r0;

        r0 := @this: nu.xom.Document;

        return 1;
    }

    public final java.lang.String toString()
    {
        nu.xom.Element $r7;
        java.lang.StringBuffer $r0, $r1, $r5, $r6, $r9, $r10;
        java.lang.Class $r3;
        java.lang.String $r4, $r8, $r11;
        nu.xom.Document r2;

        r2 := @this: nu.xom.Document;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[");

        $r3 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r5 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": ");

        $r7 = virtualinvoke r2.<nu.xom.Document: nu.xom.Element getRootElement()>();

        $r8 = virtualinvoke $r7.<nu.xom.Element: java.lang.String getQualifiedName()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r11;
    }
}
